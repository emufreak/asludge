
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #103349,d0
       8:	       subi.l #103349,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 193b5 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #103349,d0
      40:	       subi.l #103349,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 193b5 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 5976 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #103349,d0
      7e:	       subi.l #103349,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 193b5 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 11cc6 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 19b50 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 11cde <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 193b6 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 11cc6 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 19b50 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 193b6 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 11cc6 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 19b50 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 15176 <PutChar+0x4>
     35c:	|  |              |   jsr 14822 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 19b58 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 19b58 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 19b58 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 19b58 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 19b58 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 19b58 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 19b58 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 151a0 <PutChar+0x2e>
     834:	|   jsr 14822 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 19b58 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 151bc <PutChar+0x4a>
     8a6:	|   jsr 14822 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 19b58 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 19b58 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 19b58 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 19b58 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 19b58 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 19b58 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 19b58 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 19b58 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 19b50 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 19b58 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 11cc6 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 19b58 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 19b50 <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 19b50 <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #86500,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 19b50 <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 151f1 <PutChar+0x7f>
     cea:	   |   jsr 14822 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 1505c <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 15136 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 1520e <PutChar+0x9c>
     d66:	|      jsr 14822 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 19b50 <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 19b50 <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 19b50 <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 19a60 <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 7bf0 <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),19a60 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 19a64 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 19a68 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 15221 <PutChar+0xaf>
     de8:	jsr 14822 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     df4:	             lea -24(sp),sp
     df8:	             move.l a6,-(sp)

  if(CstPalette) FreeVec(CstPalette);
     dfa:	             move.l 19aa0 <CstPalette>,d0
     e00:	         /-- beq.s e1a <CstBlankScreen+0x26>
     e02:	         |   move.l 19aa0 <CstPalette>,12(sp)
     e0a:	         |   move.l 19b50 <SysBase>,d0
     e10:	         |   movea.l d0,a6
     e12:	         |   movea.l 12(sp),a1
     e16:	         |   jsr -690(a6)
  CstPaletteLoaded = 0;
     e1a:	         \-> clr.w 19a74 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e20:	             move.l #14675968,8(sp)

  width /= 16;
     e28:	             move.l 32(sp),d0
     e2c:	             movea.l d0,a0
     e2e:	             cmpa.w #0,a0
     e32:	         /-- bge.s e38 <CstBlankScreen+0x44>
     e34:	         |   lea 15(a0),a0
     e38:	         \-> move.l a0,d0
     e3a:	             asr.l #4,d0
     e3c:	             move.l d0,32(sp)

  WaitBlit();
     e40:	             move.l 19b5c <GfxBase>,d0
     e46:	             movea.l d0,a6
     e48:	             jsr -228(a6)

  //Both Buffers need to be done
  for(int i=0;i<2;i++) {
     e4c:	             clr.l 24(sp)
     e50:	   /-------- bra.w f2a <CstBlankScreen+0x136>
    custom->bltafwm = 0xffff;
     e54:	/--|-------> movea.l 8(sp),a0
     e58:	|  |         move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
     e5e:	|  |         movea.l 8(sp),a0
     e62:	|  |         move.w #-1,70(a0)
    custom->bltamod = 0;
     e68:	|  |         movea.l 8(sp),a0
     e6c:	|  |         move.w #0,100(a0)
    custom->bltbmod = 0;
     e72:	|  |         movea.l 8(sp),a0
     e76:	|  |         move.w #0,98(a0)
    custom->bltcmod = 0;
     e7c:	|  |         movea.l 8(sp),a0
     e80:	|  |         move.w #0,96(a0)
    custom->bltdmod = 0;
     e86:	|  |         movea.l 8(sp),a0
     e8a:	|  |         move.w #0,102(a0)
    custom->bltcon1 = 0;
     e90:	|  |         movea.l 8(sp),a0
     e94:	|  |         move.w #0,66(a0)
    custom->bltcon0 = 0x0100;
     e9a:	|  |         movea.l 8(sp),a0
     e9e:	|  |         move.w #256,64(a0)
    ULONG bltdpt = (ULONG) CstDrawBuffer;
     ea4:	|  |         move.l 19a88 <CstDrawBuffer>,d0
     eaa:	|  |         move.l d0,20(sp)
    UWORD bltsize = height*64+width;    
     eae:	|  |         move.l 36(sp),d0
     eb2:	|  |         lsl.w #6,d0
     eb4:	|  |         move.l 32(sp),d1
     eb8:	|  |         movea.w d0,a0
     eba:	|  |         adda.w d1,a0
     ebc:	|  |         move.w a0,6(sp)
    UWORD blitsize = width*height*2;
     ec0:	|  |         move.l 32(sp),d1
     ec4:	|  |         move.l 36(sp),d0
     ec8:	|  |         muls.w d1,d0
     eca:	|  |         add.w d0,d0
     ecc:	|  |         move.w d0,4(sp)
    for(int i2=0;i2<5;i2++)
     ed0:	|  |         clr.l 16(sp)
     ed4:	|  |     /-- bra.s f06 <CstBlankScreen+0x112>
    {            
      custom->bltdpt = (APTR) bltdpt;
     ed6:	|  |  /--|-> move.l 20(sp),d0
     eda:	|  |  |  |   movea.l 8(sp),a0
     ede:	|  |  |  |   move.l d0,84(a0)
      custom->bltsize = bltsize;            
     ee2:	|  |  |  |   movea.l 8(sp),a0
     ee6:	|  |  |  |   move.w 6(sp),88(a0)
      WaitBlit();
     eec:	|  |  |  |   move.l 19b5c <GfxBase>,d0
     ef2:	|  |  |  |   movea.l d0,a6
     ef4:	|  |  |  |   jsr -228(a6)
      bltdpt += blitsize;
     ef8:	|  |  |  |   moveq #0,d0
     efa:	|  |  |  |   move.w 4(sp),d0
     efe:	|  |  |  |   add.l d0,20(sp)
    for(int i2=0;i2<5;i2++)
     f02:	|  |  |  |   addq.l #1,16(sp)
     f06:	|  |  |  \-> moveq #4,d0
     f08:	|  |  |      cmp.l 16(sp),d0
     f0c:	|  |  \----- bge.s ed6 <CstBlankScreen+0xe2>
    }

    WaitBlit();
     f0e:	|  |         move.l 19b5c <GfxBase>,d0
     f14:	|  |         movea.l d0,a6
     f16:	|  |         jsr -228(a6)
    WaitVbl();
     f1a:	|  |         jsr 14756 <WaitVbl>
    CstSwapBuffer();
     f20:	|  |         jsr 2054 <CstSwapBuffer>
  for(int i=0;i<2;i++) {
     f26:	|  |         addq.l #1,24(sp)
     f2a:	|  \-------> moveq #1,d0
     f2c:	|            cmp.l 24(sp),d0
     f30:	\----------- bge.w e54 <CstBlankScreen+0x60>
  }

}
     f34:	             nop
     f36:	             nop
     f38:	             movea.l (sp)+,a6
     f3a:	             lea 24(sp),sp
     f3e:	             rts

00000f40 <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     f40:	       lea -52(sp),sp
     f44:	       move.l a6,-(sp)
     f46:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     f48:	       move.l #400,32(sp)
     f50:	       moveq #2,d0
     f52:	       move.l d0,28(sp)
     f56:	       move.l 19b50 <SysBase>,d0
     f5c:	       movea.l d0,a6
     f5e:	       move.l 32(sp),d0
     f62:	       move.l 28(sp),d1
     f66:	       jsr -198(a6)
     f6a:	       move.l d0,24(sp)
     f6e:	       move.l 24(sp),d0
     f72:	       move.l d0,20(sp)
  
  if( retval == 0) {
     f76:	   /-- bne.s fa0 <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     f78:	   |   pea 28 <_start+0x28>
     f7c:	   |   pea 1525a <PutChar+0xe8>
     f82:	   |   jsr 14822 <KPrintF>
     f88:	   |   addq.l #8,sp
    Exit(1);
     f8a:	   |   moveq #1,d1
     f8c:	   |   move.l d1,16(sp)
     f90:	   |   move.l 19b58 <DOSBase>,d0
     f96:	   |   movea.l d0,a6
     f98:	   |   move.l 16(sp),d1
     f9c:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     fa0:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     fa6:	       move.l #103352,52(sp)
  for(int i=0; i<16;i++)
     fae:	       clr.l 48(sp)
     fb2:	   /-- bra.s fd8 <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
     fb4:	/--|-> move.l 52(sp),d1
     fb8:	|  |   move.l d1,d2
     fba:	|  |   addq.l #4,d2
     fbc:	|  |   move.l d2,52(sp)
     fc0:	|  |   move.l 56(sp),d0
     fc4:	|  |   move.l d0,d2
     fc6:	|  |   addq.l #4,d2
     fc8:	|  |   move.l d2,56(sp)
     fcc:	|  |   movea.l d1,a0
     fce:	|  |   move.l (a0),d1
     fd0:	|  |   movea.l d0,a0
     fd2:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
     fd4:	|  |   addq.l #1,48(sp)
     fd8:	|  \-> moveq #15,d0
     fda:	|      cmp.l 48(sp),d0
     fde:	\----- bge.s fb4 <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
     fe0:	       move.l #103416,52(sp)

  for(int i=0; i<12;i++)
     fe8:	       clr.l 44(sp)
     fec:	   /-- bra.s 1012 <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
     fee:	/--|-> move.l 52(sp),d1
     ff2:	|  |   move.l d1,d2
     ff4:	|  |   addq.l #4,d2
     ff6:	|  |   move.l d2,52(sp)
     ffa:	|  |   move.l 56(sp),d0
     ffe:	|  |   move.l d0,d2
    1000:	|  |   addq.l #4,d2
    1002:	|  |   move.l d2,56(sp)
    1006:	|  |   movea.l d1,a0
    1008:	|  |   move.l (a0),d1
    100a:	|  |   movea.l d0,a0
    100c:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    100e:	|  |   addq.l #1,44(sp)
    1012:	|  \-> moveq #11,d0
    1014:	|      cmp.l 44(sp),d0
    1018:	\----- bge.s fee <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
    101a:	       move.l #103464,52(sp)
  for(int i=0; i<10;i++)
    1022:	       clr.l 40(sp)
    1026:	   /-- bra.s 104c <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
    1028:	/--|-> move.l 52(sp),d1
    102c:	|  |   move.l d1,d2
    102e:	|  |   addq.l #4,d2
    1030:	|  |   move.l d2,52(sp)
    1034:	|  |   move.l 56(sp),d0
    1038:	|  |   move.l d0,d2
    103a:	|  |   addq.l #4,d2
    103c:	|  |   move.l d2,56(sp)
    1040:	|  |   movea.l d1,a0
    1042:	|  |   move.l (a0),d1
    1044:	|  |   movea.l d0,a0
    1046:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1048:	|  |   addq.l #1,40(sp)
    104c:	|  \-> moveq #9,d0
    104e:	|      cmp.l 40(sp),d0
    1052:	\----- bge.s 1028 <CstCreateCopperlist+0xe8>

  
  clpartinstruction = CstClColorTemplate;
    1054:	       move.l #103504,52(sp)
  CstClColor = (UWORD *) cl;
    105c:	       move.l 56(sp),19a9c <CstClColor>
  for(int i=0; i<32;i++)
    1064:	       clr.l 36(sp)
    1068:	   /-- bra.s 108e <CstCreateCopperlist+0x14e>
    *cl++ = *clpartinstruction++;        
    106a:	/--|-> move.l 52(sp),d1
    106e:	|  |   move.l d1,d2
    1070:	|  |   addq.l #4,d2
    1072:	|  |   move.l d2,52(sp)
    1076:	|  |   move.l 56(sp),d0
    107a:	|  |   move.l d0,d2
    107c:	|  |   addq.l #4,d2
    107e:	|  |   move.l d2,56(sp)
    1082:	|  |   movea.l d1,a0
    1084:	|  |   move.l (a0),d1
    1086:	|  |   movea.l d0,a0
    1088:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    108a:	|  |   addq.l #1,36(sp)
    108e:	|  \-> moveq #31,d0
    1090:	|      cmp.l 36(sp),d0
    1094:	\----- bge.s 106a <CstCreateCopperlist+0x12a>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1096:	       moveq #40,d1
    1098:	       cmp.l 64(sp),d1
    109c:	   /-- bge.s 10fa <CstCreateCopperlist+0x1ba>
    int tmp = width - 40;
    109e:	   |   moveq #-40,d2
    10a0:	   |   add.l 64(sp),d2
    10a4:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    10a8:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    10ae:	   |   move.l 8(sp),d0
    10b2:	   |   move.l d0,d1
    10b4:	   |   addq.l #2,d1
    10b6:	   |   move.l d1,8(sp)
    10ba:	   |   movea.l d0,a0
    10bc:	   |   move.w #264,(a0)
    *cw++ = tmp;
    10c0:	   |   move.l 8(sp),d0
    10c4:	   |   move.l d0,d1
    10c6:	   |   addq.l #2,d1
    10c8:	   |   move.l d1,8(sp)
    10cc:	   |   move.l 12(sp),d1
    10d0:	   |   movea.l d0,a0
    10d2:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    10d4:	   |   move.l 8(sp),d0
    10d8:	   |   move.l d0,d1
    10da:	   |   addq.l #2,d1
    10dc:	   |   move.l d1,8(sp)
    10e0:	   |   movea.l d0,a0
    10e2:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    10e6:	   |   move.l 8(sp),d0
    10ea:	   |   move.l d0,d1
    10ec:	   |   addq.l #2,d1
    10ee:	   |   move.l d1,8(sp)
    10f2:	   |   move.l 12(sp),d1
    10f6:	   |   movea.l d0,a0
    10f8:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    10fa:	   \-> move.l 56(sp),d0
    10fe:	       move.l d0,d1
    1100:	       addq.l #4,d1
    1102:	       move.l d1,56(sp)
    1106:	       moveq #-2,d2
    1108:	       movea.l d0,a0
    110a:	       move.l d2,(a0)
  return (UWORD *) retval;  
    110c:	       move.l 20(sp),d0
}
    1110:	       move.l (sp)+,d2
    1112:	       movea.l (sp)+,a6
    1114:	       lea 52(sp),sp
    1118:	       rts

0000111a <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    111a:	       lea -28(sp),sp
    111e:	       move.l d2,-(sp)
  ULONG *bplcursorsrc = (ULONG *) CstBackDrop;
    1120:	       move.l 19a7a <CstBackDrop>,28(sp)
  ULONG *bplcursordst = (ULONG *) CstDrawBuffer;
    1128:	       move.l 19a88 <CstDrawBuffer>,24(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    1130:	       clr.l 20(sp)
    1134:	   /-- bra.s 115a <CstDisplayBackDrop+0x40>
  {
    *bplcursordst++ = *bplcursorsrc++;
    1136:	/--|-> move.l 28(sp),d1
    113a:	|  |   move.l d1,d0
    113c:	|  |   addq.l #4,d0
    113e:	|  |   move.l d0,28(sp)
    1142:	|  |   move.l 24(sp),d0
    1146:	|  |   move.l d0,d2
    1148:	|  |   addq.l #4,d2
    114a:	|  |   move.l d2,24(sp)
    114e:	|  |   movea.l d1,a0
    1150:	|  |   move.l (a0),d1
    1152:	|  |   movea.l d0,a0
    1154:	|  |   move.l d1,(a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1156:	|  |   addq.l #1,20(sp)
    115a:	|  \-> move.w 19a76 <CstBackdropSize>,d0
    1160:	|      lsr.w #2,d0
    1162:	|      move.w d0,d0
    1164:	|      andi.l #65535,d0
    116a:	|      cmp.l 20(sp),d0
    116e:	\----- bgt.s 1136 <CstDisplayBackDrop+0x1c>
  }

  UWORD *tmp = CstClColor;
    1170:	       move.l 19a9c <CstClColor>,16(sp)
  UWORD reg = 0x180;
    1178:	       move.w #384,6(sp)
  UWORD *colorpos = CstPalette;
    117e:	       move.l 19aa0 <CstPalette>,12(sp)
  
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    1186:	       clr.l 8(sp)
    118a:	   /-- bra.s 11bc <CstDisplayBackDrop+0xa2>
    *tmp++;
    118c:	/--|-> move.l 16(sp),d0
    1190:	|  |   move.l d0,d1
    1192:	|  |   addq.l #2,d1
    1194:	|  |   move.l d1,16(sp)
    *tmp++ = *colorpos++;
    1198:	|  |   move.l 12(sp),d1
    119c:	|  |   move.l d1,d2
    119e:	|  |   addq.l #2,d2
    11a0:	|  |   move.l d2,12(sp)
    11a4:	|  |   move.l 16(sp),d0
    11a8:	|  |   move.l d0,d2
    11aa:	|  |   addq.l #2,d2
    11ac:	|  |   move.l d2,16(sp)
    11b0:	|  |   movea.l d1,a0
    11b2:	|  |   move.w (a0),d1
    11b4:	|  |   movea.l d0,a0
    11b6:	|  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    11b8:	|  |   addq.l #1,8(sp)
    11bc:	|  \-> moveq #31,d0
    11be:	|      cmp.l 8(sp),d0
    11c2:	\----- bge.s 118c <CstDisplayBackDrop+0x72>
  }
}
    11c4:	       nop
    11c6:	       nop
    11c8:	       move.l (sp)+,d2
    11ca:	       lea 28(sp),sp
    11ce:	       rts

000011d0 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    11d0:	    move.w 19a82 <CstApplyBackDropCounter>,d0
    11d6:	/-- ble.s 11ec <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    11d8:	|   jsr 111a <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    11de:	|   move.w 19a82 <CstApplyBackDropCounter>,d0
    11e4:	|   subq.w #1,d0
    11e6:	|   move.w d0,19a82 <CstApplyBackDropCounter>
  }    
}
    11ec:	\-> nop
    11ee:	    rts

000011f0 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    11f0:	             lea -140(sp),sp
    11f4:	             movem.l d2-d4/a6,-(sp)
	KPrintF("CstLoadBackDrop: Loading of Background started");
    11f8:	             pea 15295 <PutChar+0x123>
    11fe:	             jsr 14822 <KPrintF>
    1204:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1206:	             move.l 160(sp),-(sp)
    120a:	             jsr 6bc <get2bytes>
    1210:	             addq.l #4,sp
    1212:	             move.w d0,130(sp)
  UWORD height = get2bytes(fp);  
    1216:	             move.l 160(sp),-(sp)
    121a:	             jsr 6bc <get2bytes>
    1220:	             addq.l #4,sp
    1222:	             move.w d0,128(sp)

  UWORD widthbyteslayer = width/8;
    1226:	             move.w 130(sp),d0
    122a:	             lsr.w #3,d0
    122c:	             move.w d0,126(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1230:	             move.w 126(sp),d0
    1234:	             lsr.w #1,d0
    1236:	             move.w d0,124(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    123a:	             move.l 19aa4 <winWidth>,d0
    1240:	             lsr.l #3,d0
    1242:	             move.w d0,122(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1246:	             move.w 126(sp),d0
    124a:	             muls.w 128(sp),d0
    124e:	             move.w d0,120(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1252:	             move.w 120(sp),d1
    1256:	             move.w d1,d0
    1258:	             add.w d0,d0
    125a:	             add.w d0,d0
    125c:	             move.w d0,d2
    125e:	             add.w d1,d2
    1260:	             move.w d2,118(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1264:	             move.w 19a74 <CstPaletteLoaded>,d0
    126a:	/----------- bne.s 12e2 <CstLoadBackdrop+0xf2>
  {    
    UWORD reg = 0x180;
    126c:	|            move.w #384,116(sp)
    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1272:	|            moveq #64,d0
    1274:	|            move.l d0,112(sp)
    1278:	|            clr.l 108(sp)
    127c:	|            move.l 19b50 <SysBase>,d0
    1282:	|            movea.l d0,a6
    1284:	|            move.l 112(sp),d0
    1288:	|            move.l 108(sp),d1
    128c:	|            jsr -684(a6)
    1290:	|            move.l d0,104(sp)
    1294:	|            move.l 104(sp),d0
    1298:	|            move.l d0,19aa0 <CstPalette>
    CstPaletteLoaded = 1;
    129e:	|            move.w #1,19a74 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    12a6:	|            move.l 19aa0 <CstPalette>,152(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12ae:	|            clr.l 148(sp)
    12b2:	|        /-- bra.s 12d8 <CstLoadBackdrop+0xe8>
      *tmp++ = get2bytes(fp);
    12b4:	|     /--|-> move.l 160(sp),-(sp)
    12b8:	|     |  |   jsr 6bc <get2bytes>
    12be:	|     |  |   addq.l #4,sp
    12c0:	|     |  |   move.l d0,d1
    12c2:	|     |  |   move.l 152(sp),d0
    12c6:	|     |  |   move.l d0,d2
    12c8:	|     |  |   addq.l #2,d2
    12ca:	|     |  |   move.l d2,152(sp)
    12ce:	|     |  |   move.l d1,d1
    12d0:	|     |  |   movea.l d0,a0
    12d2:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12d4:	|     |  |   addq.l #1,148(sp)
    12d8:	|     |  \-> moveq #31,d0
    12da:	|     |      cmp.l 148(sp),d0
    12de:	|     \----- bge.s 12b4 <CstLoadBackdrop+0xc4>
    12e0:	|  /-------- bra.s 1300 <CstLoadBackdrop+0x110>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12e2:	\--|-------> clr.l 144(sp)
    12e6:	   |     /-- bra.s 12f8 <CstLoadBackdrop+0x108>
      get2bytes(fp);
    12e8:	   |  /--|-> move.l 160(sp),-(sp)
    12ec:	   |  |  |   jsr 6bc <get2bytes>
    12f2:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    12f4:	   |  |  |   addq.l #1,144(sp)
    12f8:	   |  |  \-> moveq #31,d2
    12fa:	   |  |      cmp.l 144(sp),d2
    12fe:	   |  \----- bge.s 12e8 <CstLoadBackdrop+0xf8>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1300:	   \-------> moveq #0,d0
    1302:	             move.w 118(sp),d0
    1306:	             move.l d0,100(sp)
    130a:	             moveq #2,d0
    130c:	             move.l d0,96(sp)
    1310:	             move.l 19b50 <SysBase>,d0
    1316:	             movea.l d0,a6
    1318:	             move.l 100(sp),d0
    131c:	             move.l 96(sp),d1
    1320:	             jsr -684(a6)
    1324:	             move.l d0,92(sp)
    1328:	             move.l 92(sp),d0
    132c:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1330:	         /-- bne.s 1340 <CstLoadBackdrop+0x150>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1332:	         |   pea 152c4 <PutChar+0x152>
    1338:	         |   jsr 14822 <KPrintF>
    133e:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1340:	         \-> moveq #0,d0
    1342:	             move.w 120(sp),d0
    1346:	             move.l d0,84(sp)
    134a:	             moveq #2,d2
    134c:	             move.l d2,80(sp)
    1350:	             move.l 19b50 <SysBase>,d0
    1356:	             movea.l d0,a6
    1358:	             move.l 84(sp),d0
    135c:	             move.l 80(sp),d1
    1360:	             jsr -684(a6)
    1364:	             move.l d0,76(sp)
    1368:	             move.l 76(sp),d0
    136c:	             move.l d0,72(sp)
  if( !tmpmask)
    1370:	         /-- bne.s 1380 <CstLoadBackdrop+0x190>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1372:	         |   pea 152fa <PutChar+0x188>
    1378:	         |   jsr 14822 <KPrintF>
    137e:	         |   addq.l #4,sp
#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1380:	         \-> move.l 160(sp),68(sp)
    1386:	             move.l 88(sp),64(sp)
    138c:	             moveq #2,d0
    138e:	             move.l d0,60(sp)
    1392:	             move.w 118(sp),d0
    1396:	             lsr.w #1,d0
    1398:	             move.w d0,d0
    139a:	             andi.l #65535,d0
    13a0:	             move.l d0,56(sp)
    13a4:	             move.l 19b58 <DOSBase>,d0
    13aa:	             movea.l d0,a6
    13ac:	             move.l 68(sp),d1
    13b0:	             move.l 64(sp),d2
    13b4:	             move.l 60(sp),d3
    13b8:	             move.l 56(sp),d4
    13bc:	             jsr -324(a6)
    13c0:	             move.l d0,52(sp)
    13c4:	             move.l 52(sp),d0
    13c8:	             move.w d0,50(sp)
  if(!count) {
    13cc:	         /-- bne.s 13e0 <CstLoadBackdrop+0x1f0>
    KPrintF("Error while reading stream");
    13ce:	         |   pea 1532e <PutChar+0x1bc>
    13d4:	         |   jsr 14822 <KPrintF>
    13da:	         |   addq.l #4,sp
    return;
    13dc:	   /-----|-- bra.w 15c0 <CstLoadBackdrop+0x3d0>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    13e0:	   |     \-> move.l 160(sp),46(sp)
    13e6:	   |         move.l 72(sp),42(sp)
    13ec:	   |         moveq #2,d2
    13ee:	   |         move.l d2,38(sp)
    13f2:	   |         move.w 120(sp),d0
    13f6:	   |         lsr.w #1,d0
    13f8:	   |         move.w d0,d0
    13fa:	   |         andi.l #65535,d0
    1400:	   |         move.l d0,34(sp)
    1404:	   |         move.l 19b58 <DOSBase>,d0
    140a:	   |         movea.l d0,a6
    140c:	   |         move.l 46(sp),d1
    1410:	   |         move.l 42(sp),d2
    1414:	   |         move.l 38(sp),d3
    1418:	   |         move.l 34(sp),d4
    141c:	   |         jsr -324(a6)
    1420:	   |         move.l d0,30(sp)
    1424:	   |         move.l 30(sp),d0
    1428:	   |         move.w d0,50(sp)
   

  if(!count) {
    142c:	   |     /-- bne.s 1440 <CstLoadBackdrop+0x250>
    KPrintF("Error while reading stream");
    142e:	   |     |   pea 1532e <PutChar+0x1bc>
    1434:	   |     |   jsr 14822 <KPrintF>
    143a:	   |     |   addq.l #4,sp
    return;
    143c:	   +-----|-- bra.w 15c0 <CstLoadBackdrop+0x3d0>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1440:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1448:	   |         move.l 19a7a <CstBackDrop>,d0
    144e:	   |         move.l d0,140(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1452:	   |         move.l 168(sp),d0
    1456:	   |         move.w d0,d1
    1458:	   |         muls.w 122(sp),d1
    145c:	   |         move.l 164(sp),d0
    1460:	   |     /-- bpl.s 1464 <CstLoadBackdrop+0x274>
    1462:	   |     |   addq.l #7,d0
    1464:	   |     \-> asr.l #3,d0
    1466:	   |         move.l d0,d0
    1468:	   |         movea.w d1,a0
    146a:	   |         adda.w d0,a0
    146c:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1470:	   |         moveq #0,d0
    1472:	   |         move.w 24(sp),d0
    1476:	   |         add.l d0,140(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    147a:	   |         pea 15349 <PutChar+0x1d7>
    1480:	   |         jsr 14822 <KPrintF>
    1486:	   |         addq.l #4,sp


  WaitBlit();
    1488:	   |         move.l 19b5c <GfxBase>,d0
    148e:	   |         movea.l d0,a6
    1490:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    1494:	   |         movea.l 26(sp),a0
    1498:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    149e:	   |         movea.l 26(sp),a0
    14a2:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    14a8:	   |         movea.l 26(sp),a0
    14ac:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    14b2:	   |         movea.l 26(sp),a0
    14b6:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    14bc:	   |         move.w 122(sp),d0
    14c0:	   |         sub.w 126(sp),d0
    14c4:	   |         movea.l 26(sp),a0
    14c8:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    14cc:	   |         move.w 122(sp),d0
    14d0:	   |         sub.w 126(sp),d0
    14d4:	   |         movea.l 26(sp),a0
    14d8:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    14dc:	   |         movea.l 26(sp),a0
    14e0:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    14e6:	   |         movea.l 26(sp),a0
    14ea:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    14f0:	   |         move.l 88(sp),136(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    14f6:	   |         clr.l 132(sp)
    14fa:	   |     /-- bra.s 155c <CstLoadBackdrop+0x36c>
  {    
    custom->bltapt = (APTR) tmpmask;
    14fc:	   |  /--|-> movea.l 26(sp),a0
    1500:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    1506:	   |  |  |   move.l 136(sp),d0
    150a:	   |  |  |   movea.l 26(sp),a0
    150e:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    1512:	   |  |  |   move.l 140(sp),d0
    1516:	   |  |  |   movea.l 26(sp),a0
    151a:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    151e:	   |  |  |   move.l 140(sp),d0
    1522:	   |  |  |   movea.l 26(sp),a0
    1526:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    152a:	   |  |  |   move.w 128(sp),d0
    152e:	   |  |  |   lsl.w #6,d0
    1530:	   |  |  |   add.w 124(sp),d0
    1534:	   |  |  |   movea.l 26(sp),a0
    1538:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    153c:	   |  |  |   moveq #0,d0
    153e:	   |  |  |   move.w 120(sp),d0
    1542:	   |  |  |   add.l d0,136(sp)
    backdropcursor += CstBackdropSizePlane;
    1546:	   |  |  |   move.w 19a78 <CstBackdropSizePlane>,d0
    154c:	   |  |  |   move.w d0,d0
    154e:	   |  |  |   andi.l #65535,d0
    1554:	   |  |  |   add.l d0,140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1558:	   |  |  |   addq.l #1,132(sp)
    155c:	   |  |  \-> moveq #4,d0
    155e:	   |  |      cmp.l 132(sp),d0
    1562:	   |  \----- bge.s 14fc <CstLoadBackdrop+0x30c>
  }    

  WaitBlit();
    1564:	   |         move.l 19b5c <GfxBase>,d0
    156a:	   |         movea.l d0,a6
    156c:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    1570:	   |         pea 15368 <PutChar+0x1f6>
    1576:	   |         jsr 14822 <KPrintF>
    157c:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    157e:	   |         move.l 88(sp),20(sp)
    1584:	   |         move.l 19b50 <SysBase>,d0
    158a:	   |         movea.l d0,a6
    158c:	   |         movea.l 20(sp),a1
    1590:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    1594:	   |         move.l 72(sp),16(sp)
    159a:	   |         move.l 19b50 <SysBase>,d0
    15a0:	   |         movea.l d0,a6
    15a2:	   |         movea.l 16(sp),a1
    15a6:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    15aa:	   |         move.w #2,19a82 <CstApplyBackDropCounter>

  KPrintF("CstLoadBackDrop: Finished");
    15b2:	   |         pea 15388 <PutChar+0x216>
    15b8:	   |         jsr 14822 <KPrintF>
    15be:	   |         addq.l #4,sp

}
    15c0:	   \-------> movem.l (sp)+,d2-d4/a6
    15c4:	             lea 140(sp),sp
    15c8:	             rts

000015ca <CstRestoreScreen>:

ULONG test = 0;

void CstRestoreScreen()
{
    15ca:	                lea -28(sp),sp
    15ce:	                move.l a6,-(sp)
    15d0:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    15d2:	                move.l #14675968,16(sp)

  UWORD *cursor = CstDrawBufferCleanupCursor;
    15da:	                move.l 19a90 <CstDrawBufferCleanupCursor>,32(sp)
  if(!*cursor || !CstDrawBuffer) {
    15e2:	                movea.l 32(sp),a0
    15e6:	                move.w (a0),d0
    15e8:	/-------------- beq.w 179c <CstRestoreScreen+0x1d2>
    15ec:	|               move.l 19a88 <CstDrawBuffer>,d0
    15f2:	+-------------- beq.w 179c <CstRestoreScreen+0x1d2>
    return;
  } 

  WaitBlit();
    15f6:	|               move.l 19b5c <GfxBase>,d0
    15fc:	|               movea.l d0,a6
    15fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1602:	|               movea.l 16(sp),a0
    1606:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    160c:	|               movea.l 16(sp),a0
    1610:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1616:	|               movea.l 16(sp),a0
    161a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1620:	|     /-------- bra.w 1788 <CstRestoreScreen+0x1be>
  {    
    UWORD width = *cursor++;
    1624:	|  /--|-------> move.l 32(sp),d0
    1628:	|  |  |         move.l d0,d1
    162a:	|  |  |         addq.l #2,d1
    162c:	|  |  |         move.l d1,32(sp)
    1630:	|  |  |         movea.l d0,a0
    1632:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1636:	|  |  |         move.l 32(sp),d0
    163a:	|  |  |         move.l d0,d1
    163c:	|  |  |         addq.l #2,d1
    163e:	|  |  |         move.l d1,32(sp)
    1642:	|  |  |         movea.l d0,a0
    1644:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1648:	|  |  |         move.l 32(sp),d0
    164c:	|  |  |         move.l d0,d1
    164e:	|  |  |         addq.l #2,d1
    1650:	|  |  |         move.l d1,32(sp)
    1654:	|  |  |         movea.l d0,a0
    1656:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    165a:	|  |  |         move.l 32(sp),d0
    165e:	|  |  |         move.l d0,d1
    1660:	|  |  |         addq.l #2,d1
    1662:	|  |  |         move.l d1,32(sp)
    1666:	|  |  |         movea.l d0,a0
    1668:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    166c:	|  |  |         move.l 19aa4 <winWidth>,d0
    1672:	|  |  |         lsr.l #3,d0
    1674:	|  |  |         move.l d0,d1
    1676:	|  |  |         move.w 14(sp),d0
    167a:	|  |  |         add.w d0,d0
    167c:	|  |  |         sub.w d0,d1
    167e:	|  |  |         movea.l 16(sp),a0
    1682:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1686:	|  |  |         move.l 19aa4 <winWidth>,d0
    168c:	|  |  |         lsr.l #3,d0
    168e:	|  |  |         move.l d0,d1
    1690:	|  |  |         move.w 14(sp),d0
    1694:	|  |  |         add.w d0,d0
    1696:	|  |  |         sub.w d0,d1
    1698:	|  |  |         movea.l 16(sp),a0
    169c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    16a0:	|  |  |         moveq #0,d0
    16a2:	|  |  |         move.w 8(sp),d0
    16a6:	|  |  |         move.l 19aa4 <winWidth>,d1
    16ac:	|  |  |         move.l d1,-(sp)
    16ae:	|  |  |         move.l d0,-(sp)
    16b0:	|  |  |         jsr 1505c <__mulsi3>
    16b6:	|  |  |         addq.l #8,sp
    16b8:	|  |  |         move.l d0,d1
    16ba:	|  |  |         lsr.l #3,d1
    16bc:	|  |  |         move.l 19a7a <CstBackDrop>,d0
    16c2:	|  |  |         add.l d0,d1
    16c4:	|  |  |         moveq #0,d0
    16c6:	|  |  |         move.w 10(sp),d0
    16ca:	|  |  |         move.l d1,d2
    16cc:	|  |  |         add.l d0,d2
    16ce:	|  |  |         move.l d2,28(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    16d2:	|  |  |         moveq #0,d0
    16d4:	|  |  |         move.w 8(sp),d0
    16d8:	|  |  |         move.l 19aa4 <winWidth>,d1
    16de:	|  |  |         move.l d1,-(sp)
    16e0:	|  |  |         move.l d0,-(sp)
    16e2:	|  |  |         jsr 1505c <__mulsi3>
    16e8:	|  |  |         addq.l #8,sp
    16ea:	|  |  |         move.l d0,d1
    16ec:	|  |  |         lsr.l #3,d1
    16ee:	|  |  |         move.l 19a88 <CstDrawBuffer>,d0
    16f4:	|  |  |         add.l d0,d1
    16f6:	|  |  |         moveq #0,d0
    16f8:	|  |  |         move.w 10(sp),d0
    16fc:	|  |  |         move.l d1,d2
    16fe:	|  |  |         add.l d0,d2
    1700:	|  |  |         move.l d2,24(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1704:	|  |  |         clr.l 20(sp)
    1708:	|  |  |     /-- bra.s 1780 <CstRestoreScreen+0x1b6>
    {
      custom->bltapt = (APTR) bltapt;
    170a:	|  |  |  /--|-> move.l 28(sp),d0
    170e:	|  |  |  |  |   movea.l 16(sp),a0
    1712:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1716:	|  |  |  |  |   move.l 24(sp),d0
    171a:	|  |  |  |  |   movea.l 16(sp),a0
    171e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1722:	|  |  |  |  |   move.w 12(sp),d0
    1726:	|  |  |  |  |   lsl.w #6,d0
    1728:	|  |  |  |  |   add.w 14(sp),d0
    172c:	|  |  |  |  |   movea.l 16(sp),a0
    1730:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1734:	|  |  |  |  |   move.l 19aa4 <winWidth>,d0
    173a:	|  |  |  |  |   lsr.l #3,d0
    173c:	|  |  |  |  |   move.l 19aa8 <winHeight>,d1
    1742:	|  |  |  |  |   move.l d1,-(sp)
    1744:	|  |  |  |  |   move.l d0,-(sp)
    1746:	|  |  |  |  |   jsr 1505c <__mulsi3>
    174c:	|  |  |  |  |   addq.l #8,sp
    174e:	|  |  |  |  |   add.l d0,28(sp)
      bltdpt += winWidth/8*winHeight;
    1752:	|  |  |  |  |   move.l 19aa4 <winWidth>,d0
    1758:	|  |  |  |  |   lsr.l #3,d0
    175a:	|  |  |  |  |   move.l 19aa8 <winHeight>,d1
    1760:	|  |  |  |  |   move.l d1,-(sp)
    1762:	|  |  |  |  |   move.l d0,-(sp)
    1764:	|  |  |  |  |   jsr 1505c <__mulsi3>
    176a:	|  |  |  |  |   addq.l #8,sp
    176c:	|  |  |  |  |   add.l d0,24(sp)
      WaitBlit();
    1770:	|  |  |  |  |   move.l 19b5c <GfxBase>,d0
    1776:	|  |  |  |  |   movea.l d0,a6
    1778:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    177c:	|  |  |  |  |   addq.l #1,20(sp)
    1780:	|  |  |  |  \-> moveq #4,d0
    1782:	|  |  |  |      cmp.l 20(sp),d0
    1786:	|  |  |  \----- bge.s 170a <CstRestoreScreen+0x140>
  while(*cursor)
    1788:	|  |  \-------> movea.l 32(sp),a0
    178c:	|  |            move.w (a0),d0
    178e:	|  \----------- bne.w 1624 <CstRestoreScreen+0x5a>
    }  
  }
  *CstDrawBufferCleanupCursor = 0;
    1792:	|               movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1798:	|               clr.w (a0)
    179a:	|           /-- bra.s 179e <CstRestoreScreen+0x1d4>
    return;
    179c:	\-----------|-> nop
}
    179e:	            \-> move.l (sp)+,d2
    17a0:	                movea.l (sp)+,a6
    17a2:	                lea 28(sp),sp
    17a6:	                rts

000017a8 <CstScaleSprite>:
void CstScaleSprite( struct sprite *single, WORD x, WORD y)
{
    17a8:	             lea -68(sp),sp
    17ac:	             movem.l d2-d3/a6,-(sp)
    17b0:	             move.l 88(sp),d1
    17b4:	             move.l 92(sp),d0
    17b8:	             move.w d1,d1
    17ba:	             move.w d1,16(sp)
    17be:	             move.w d0,d0
    17c0:	             move.w d0,14(sp)
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    17c4:	      /----- bpl.s 180c <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    17c6:	      |      movea.w 14(sp),a1
    17ca:	      |      movea.l 84(sp),a0
    17ce:	      |      move.l 4(a0),d0
    17d2:	      |      add.l a1,d0
    17d4:	      |  /-- bpl.s 17e8 <CstScaleSprite+0x40>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    17d6:	      |  |   pea 153a2 <PutChar+0x230>
    17dc:	      |  |   jsr 14822 <KPrintF>
    17e2:	      |  |   addq.l #4,sp
      return;
    17e4:	/-----|--|-- bra.w 2032 <CstScaleSprite+0x88a>
    }
    ystartdst = 0;
    17e8:	|     |  \-> clr.l 44(sp)
    ystartsrc = y*-1;
    17ec:	|     |      move.w 14(sp),d0
    17f0:	|     |      ext.l d0
    17f2:	|     |      neg.l d0
    17f4:	|     |      move.l d0,40(sp)
    blitheight = single->height+y;
    17f8:	|     |      movea.l 84(sp),a0
    17fc:	|     |      move.l 4(a0),d0
    1800:	|     |      movea.w 14(sp),a0
    1804:	|     |      add.l a0,d0
    1806:	|     |      move.l d0,36(sp)
    180a:	|  /--|----- bra.s 187e <CstScaleSprite+0xd6>
  } else if(y+single->height > (int) winHeight) {
    180c:	|  |  \----> movea.w 14(sp),a1
    1810:	|  |         movea.l 84(sp),a0
    1814:	|  |         move.l 4(a0),d0
    1818:	|  |         move.l a1,d1
    181a:	|  |         add.l d0,d1
    181c:	|  |         move.l 19aa8 <winHeight>,d0
    1822:	|  |         cmp.l d1,d0
    1824:	|  |  /----- bge.s 1866 <CstScaleSprite+0xbe>
    if(y  > (int) winHeight) {
    1826:	|  |  |      movea.w 14(sp),a0
    182a:	|  |  |      move.l 19aa8 <winHeight>,d0
    1830:	|  |  |      cmp.l a0,d0
    1832:	|  |  |  /-- bge.s 1846 <CstScaleSprite+0x9e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1834:	|  |  |  |   pea 153a2 <PutChar+0x230>
    183a:	|  |  |  |   jsr 14822 <KPrintF>
    1840:	|  |  |  |   addq.l #4,sp
      return;
    1842:	+--|--|--|-- bra.w 2032 <CstScaleSprite+0x88a>
    }
    ystartdst = y;
    1846:	|  |  |  \-> movea.w 14(sp),a0
    184a:	|  |  |      move.l a0,44(sp)
    ystartsrc = 0;
    184e:	|  |  |      clr.l 40(sp)
    blitheight = winHeight-y;
    1852:	|  |  |      move.l 19aa8 <winHeight>,d0
    1858:	|  |  |      movea.w 14(sp),a0
    185c:	|  |  |      move.l d0,d1
    185e:	|  |  |      sub.l a0,d1
    1860:	|  |  |      move.l d1,36(sp)
    1864:	|  +--|----- bra.s 187e <CstScaleSprite+0xd6>
  } else {
    ystartdst = y;
    1866:	|  |  \----> movea.w 14(sp),a0
    186a:	|  |         move.l a0,44(sp)
    ystartsrc = 0;
    186e:	|  |         clr.l 40(sp)
    blitheight = single->height;
    1872:	|  |         movea.l 84(sp),a0
    1876:	|  |         move.l 4(a0),d0
    187a:	|  |         move.l d0,36(sp)
  }

  if( x < 0) { //Leftmost part outside screen
    187e:	|  \-------> tst.w 16(sp)
    1882:	|     /----- bge.w 1a68 <CstScaleSprite+0x2c0>
    if(x + single->width < 0) {
    1886:	|     |      movea.w 16(sp),a1
    188a:	|     |      movea.l 84(sp),a0
    188e:	|     |      move.l (a0),d0
    1890:	|     |      add.l a1,d0
    1892:	|     |  /-- bpl.s 18a6 <CstScaleSprite+0xfe>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1894:	|     |  |   pea 153a2 <PutChar+0x230>
    189a:	|     |  |   jsr 14822 <KPrintF>
    18a0:	|     |  |   addq.l #4,sp
      return;
    18a2:	+-----|--|-- bra.w 2032 <CstScaleSprite+0x88a>
    }
    extrawords = 1;
    18a6:	|     |  \-> move.w #1,78(sp)
    cutwordssource = (x*-1)/16; 
    18ac:	|     |      move.w 16(sp),d0
    18b0:	|     |  /-- bpl.s 18b6 <CstScaleSprite+0x10e>
    18b2:	|     |  |   addi.w #15,d0
    18b6:	|     |  \-> asr.w #4,d0
    18b8:	|     |      neg.w d0
    18ba:	|     |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    18be:	|     |      move.w 16(sp),d0
    18c2:	|     |      ext.l d0
    18c4:	|     |      neg.l d0
    18c6:	|     |      andi.l #-2147483633,d0
    18cc:	|     |  /-- bpl.s 18d6 <CstScaleSprite+0x12e>
    18ce:	|     |  |   subq.l #1,d0
    18d0:	|     |  |   moveq #-16,d1
    18d2:	|     |  |   or.l d1,d0
    18d4:	|     |  |   addq.l #1,d0
    18d6:	|     |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    18da:	|     |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    18de:	|     |      movea.l 84(sp),a0
    18e2:	|     |      move.l 24(a0),d0
    18e6:	|     |      move.l d0,d2
    18e8:	|     |      moveq #0,d0
    18ea:	|     |      move.w 76(sp),d0
    18ee:	|     |      add.l d0,d0
    18f0:	|     |      move.l d0,d3
    18f2:	|     |      movea.l 84(sp),a0
    18f6:	|     |      move.l (a0),d0
    18f8:	|     |  /-- bpl.s 18fc <CstScaleSprite+0x154>
    18fa:	|     |  |   addq.l #7,d0
    18fc:	|     |  \-> asr.l #3,d0
    18fe:	|     |      movea.l 84(sp),a0
    1902:	|     |      move.l 4(a0),d1
    1906:	|     |      move.l d1,-(sp)
    1908:	|     |      move.l d0,-(sp)
    190a:	|     |      jsr 1505c <__mulsi3>
    1910:	|     |      addq.l #8,sp
    1912:	|     |      move.l d0,d1
    1914:	|     |      move.l d1,d0
    1916:	|     |      add.l d0,d0
    1918:	|     |      add.l d0,d0
    191a:	|     |      add.l d1,d0
    191c:	|     |      add.l d3,d0
    191e:	|     |      add.l d0,d2
    1920:	|     |      movea.l 84(sp),a0
    1924:	|     |      move.l (a0),d0
    1926:	|     |      move.l 40(sp),-(sp)
    192a:	|     |      move.l d0,-(sp)
    192c:	|     |      jsr 1505c <__mulsi3>
    1932:	|     |      addq.l #8,sp
    1934:	|     |      lsr.l #3,d0
    1936:	|     |      move.l d2,d1
    1938:	|     |      add.l d0,d1
    193a:	|     |      move.l d1,68(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    193e:	|     |      movea.l 84(sp),a0
    1942:	|     |      move.l 24(a0),d0
    1946:	|     |      move.l d0,d1
    1948:	|     |      moveq #0,d0
    194a:	|     |      move.w 76(sp),d0
    194e:	|     |      add.l d0,d0
    1950:	|     |      move.l d1,d2
    1952:	|     |      add.l d0,d2
    1954:	|     |      movea.l 84(sp),a0
    1958:	|     |      move.l (a0),d0
    195a:	|     |      move.l 40(sp),-(sp)
    195e:	|     |      move.l d0,-(sp)
    1960:	|     |      jsr 1505c <__mulsi3>
    1966:	|     |      addq.l #8,sp
    1968:	|     |      lsr.l #3,d0
    196a:	|     |      move.l d2,d1
    196c:	|     |      add.l d0,d1
    196e:	|     |      move.l d1,64(sp)
    bltcpt = ((ULONG) CstBackDrop) + ystartdst*winWidth/8 - 2;
    1972:	|     |      move.l 19aa4 <winWidth>,d0
    1978:	|     |      move.l 44(sp),-(sp)
    197c:	|     |      move.l d0,-(sp)
    197e:	|     |      jsr 1505c <__mulsi3>
    1984:	|     |      addq.l #8,sp
    1986:	|     |      move.l d0,d1
    1988:	|     |      lsr.l #3,d1
    198a:	|     |      move.l 19a7a <CstBackDrop>,d0
    1990:	|     |      add.l d1,d0
    1992:	|     |      move.l d0,d2
    1994:	|     |      subq.l #2,d2
    1996:	|     |      move.l d2,60(sp)
    bltdpt = ((ULONG) CstDrawBuffer) + ystartdst*winWidth/8 - 2;
    199a:	|     |      move.l 19aa4 <winWidth>,d0
    19a0:	|     |      move.l 44(sp),-(sp)
    19a4:	|     |      move.l d0,-(sp)
    19a6:	|     |      jsr 1505c <__mulsi3>
    19ac:	|     |      addq.l #8,sp
    19ae:	|     |      move.l d0,d1
    19b0:	|     |      lsr.l #3,d1
    19b2:	|     |      move.l 19a88 <CstDrawBuffer>,d0
    19b8:	|     |      add.l d1,d0
    19ba:	|     |      move.l d0,d1
    19bc:	|     |      subq.l #2,d1
    19be:	|     |      move.l d1,56(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    19c2:	|     |      moveq #0,d0
    19c4:	|     |      move.w 74(sp),d0
    19c8:	|     |      moveq #16,d1
    19ca:	|     |      sub.l d0,d1
    19cc:	|     |      move.l d1,d0
    19ce:	|     |      moveq #12,d2
    19d0:	|     |      lsl.l d2,d0
    19d2:	|     |      addi.l #4042,d0
    19d8:	|     |      move.l d0,52(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    19dc:	|     |      moveq #0,d0
    19de:	|     |      move.w 74(sp),d0
    19e2:	|     |      moveq #16,d1
    19e4:	|     |      sub.l d0,d1
    19e6:	|     |      move.l d1,d0
    19e8:	|     |      moveq #12,d1
    19ea:	|     |      lsl.l d1,d0
    19ec:	|     |      move.l d0,48(sp)
    *CstDrawBufferCleanupCursor++ = single->width/16+cutwordssource; //Width in X Bytes
    19f0:	|     |      movea.l 84(sp),a0
    19f4:	|     |      move.l (a0),d0
    19f6:	|     |      movea.l d0,a0
    19f8:	|     |      cmpa.w #0,a0
    19fc:	|     |  /-- bge.s 1a02 <CstScaleSprite+0x25a>
    19fe:	|     |  |   lea 15(a0),a0
    1a02:	|     |  \-> move.l a0,d0
    1a04:	|     |      asr.l #4,d0
    1a06:	|     |      move.l d0,d0
    1a08:	|     |      movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1a0e:	|     |      move.l a0,d1
    1a10:	|     |      addq.l #2,d1
    1a12:	|     |      move.l d1,19a90 <CstDrawBufferCleanupCursor>
    1a18:	|     |      add.w 76(sp),d0
    1a1c:	|     |      move.w d0,(a0)
    *CstDrawBufferCleanupCursor++ = blitheight; //Height
    1a1e:	|     |      movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1a24:	|     |      move.l a0,d0
    1a26:	|     |      addq.l #2,d0
    1a28:	|     |      move.l d0,19a90 <CstDrawBufferCleanupCursor>
    1a2e:	|     |      move.l 36(sp),d0
    1a32:	|     |      move.w d0,(a0)
    *CstDrawBufferCleanupCursor++ = 0; //X Start in Bytes
    1a34:	|     |      movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1a3a:	|     |      move.l a0,d0
    1a3c:	|     |      addq.l #2,d0
    1a3e:	|     |      move.l d0,19a90 <CstDrawBufferCleanupCursor>
    1a44:	|     |      clr.w (a0)
    *CstDrawBufferCleanupCursor++ = ystartdst; //Y Start    
    1a46:	|     |      movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1a4c:	|     |      move.l a0,d0
    1a4e:	|     |      addq.l #2,d0
    1a50:	|     |      move.l d0,19a90 <CstDrawBufferCleanupCursor>
    1a56:	|     |      move.l 44(sp),d0
    1a5a:	|     |      move.w d0,(a0)
    *CstDrawBufferCleanupCursor = 0;
    1a5c:	|     |      movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1a62:	|     |      clr.w (a0)
    1a64:	|  /--|----- bra.w 1e52 <CstScaleSprite+0x6aa>
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen
    1a68:	|  |  \----> movea.w 16(sp),a1
    1a6c:	|  |         movea.l 84(sp),a0
    1a70:	|  |         move.l (a0),d0
    1a72:	|  |         move.l a1,d1
    1a74:	|  |         add.l d0,d1
    1a76:	|  |         move.l 19aa4 <winWidth>,d0
    1a7c:	|  |         cmp.l d1,d0
    1a7e:	|  |  /----- bge.w 1c90 <CstScaleSprite+0x4e8>
    if(x - single->width > (int) winWidth)
    1a82:	|  |  |      movea.w 16(sp),a1
    1a86:	|  |  |      movea.l 84(sp),a0
    1a8a:	|  |  |      move.l (a0),d0
    1a8c:	|  |  |      move.l a1,d1
    1a8e:	|  |  |      sub.l d0,d1
    1a90:	|  |  |      move.l 19aa4 <winWidth>,d0
    1a96:	|  |  |      cmp.l d1,d0
    1a98:	|  |  |  /-- bge.s 1aac <CstScaleSprite+0x304>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1a9a:	|  |  |  |   pea 153a2 <PutChar+0x230>
    1aa0:	|  |  |  |   jsr 14822 <KPrintF>
    1aa6:	|  |  |  |   addq.l #4,sp
      return;
    1aa8:	+--|--|--|-- bra.w 2032 <CstScaleSprite+0x88a>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    1aac:	|  |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    1ab0:	|  |  |      movea.w 16(sp),a1
    1ab4:	|  |  |      movea.l 84(sp),a0
    1ab8:	|  |  |      move.l (a0),d0
    1aba:	|  |  |      add.l a1,d0
    1abc:	|  |  |      move.l d0,d1
    1abe:	|  |  |      move.l 19aa4 <winWidth>,d0
    1ac4:	|  |  |      sub.l d0,d1
    1ac6:	|  |  |      move.l d1,d0
    1ac8:	|  |  |      lsr.l #4,d0
    1aca:	|  |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    1ace:	|  |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    1ad2:	|  |  |      move.w #-1,72(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    1ad8:	|  |  |      movea.l 84(sp),a0
    1adc:	|  |  |      move.l 24(a0),d0
    1ae0:	|  |  |      move.l d0,d2
    1ae2:	|  |  |      movea.l 84(sp),a0
    1ae6:	|  |  |      move.l (a0),d0
    1ae8:	|  |  |  /-- bpl.s 1aec <CstScaleSprite+0x344>
    1aea:	|  |  |  |   addq.l #7,d0
    1aec:	|  |  |  \-> asr.l #3,d0
    1aee:	|  |  |      movea.l 84(sp),a0
    1af2:	|  |  |      move.l 4(a0),d1
    1af6:	|  |  |      move.l d1,-(sp)
    1af8:	|  |  |      move.l d0,-(sp)
    1afa:	|  |  |      jsr 1505c <__mulsi3>
    1b00:	|  |  |      addq.l #8,sp
    1b02:	|  |  |      move.l d0,d1
    1b04:	|  |  |      move.l d1,d0
    1b06:	|  |  |      add.l d0,d0
    1b08:	|  |  |      add.l d0,d0
    1b0a:	|  |  |      add.l d1,d0
    1b0c:	|  |  |      add.l d0,d2
    1b0e:	|  |  |      movea.l 84(sp),a0
    1b12:	|  |  |      move.l (a0),d0
    1b14:	|  |  |      move.l 40(sp),-(sp)
    1b18:	|  |  |      move.l d0,-(sp)
    1b1a:	|  |  |      jsr 1505c <__mulsi3>
    1b20:	|  |  |      addq.l #8,sp
    1b22:	|  |  |      lsr.l #3,d0
    1b24:	|  |  |      move.l d2,d1
    1b26:	|  |  |      add.l d0,d1
    1b28:	|  |  |      move.l d1,68(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    1b2c:	|  |  |      movea.l 84(sp),a0
    1b30:	|  |  |      move.l 24(a0),d0
    1b34:	|  |  |      move.l d0,d2
    1b36:	|  |  |      movea.l 84(sp),a0
    1b3a:	|  |  |      move.l (a0),d0
    1b3c:	|  |  |      move.l 40(sp),-(sp)
    1b40:	|  |  |      move.l d0,-(sp)
    1b42:	|  |  |      jsr 1505c <__mulsi3>
    1b48:	|  |  |      addq.l #8,sp
    1b4a:	|  |  |      lsr.l #3,d0
    1b4c:	|  |  |      move.l d2,d1
    1b4e:	|  |  |      add.l d0,d1
    1b50:	|  |  |      move.l d1,64(sp)
    bltcpt = ((ULONG) CstBackDrop) + ystartdst*winWidth/8 + (x/16)*2;
    1b54:	|  |  |      move.l 19aa4 <winWidth>,d0
    1b5a:	|  |  |      move.l 44(sp),-(sp)
    1b5e:	|  |  |      move.l d0,-(sp)
    1b60:	|  |  |      jsr 1505c <__mulsi3>
    1b66:	|  |  |      addq.l #8,sp
    1b68:	|  |  |      move.l d0,d1
    1b6a:	|  |  |      lsr.l #3,d1
    1b6c:	|  |  |      move.l 19a7a <CstBackDrop>,d0
    1b72:	|  |  |      add.l d0,d1
    1b74:	|  |  |      move.w 16(sp),d0
    1b78:	|  |  |  /-- bpl.s 1b7e <CstScaleSprite+0x3d6>
    1b7a:	|  |  |  |   addi.w #15,d0
    1b7e:	|  |  |  \-> asr.w #4,d0
    1b80:	|  |  |      movea.w d0,a0
    1b82:	|  |  |      move.l a0,d0
    1b84:	|  |  |      add.l a0,d0
    1b86:	|  |  |      move.l d1,d2
    1b88:	|  |  |      add.l d0,d2
    1b8a:	|  |  |      move.l d2,60(sp)
    bltdpt = ((ULONG) CstDrawBuffer) + ystartdst*winWidth/8 + (x/16)*2;
    1b8e:	|  |  |      move.l 19aa4 <winWidth>,d0
    1b94:	|  |  |      move.l 44(sp),-(sp)
    1b98:	|  |  |      move.l d0,-(sp)
    1b9a:	|  |  |      jsr 1505c <__mulsi3>
    1ba0:	|  |  |      addq.l #8,sp
    1ba2:	|  |  |      move.l d0,d1
    1ba4:	|  |  |      lsr.l #3,d1
    1ba6:	|  |  |      move.l 19a88 <CstDrawBuffer>,d0
    1bac:	|  |  |      add.l d0,d1
    1bae:	|  |  |      move.w 16(sp),d0
    1bb2:	|  |  |  /-- bpl.s 1bb8 <CstScaleSprite+0x410>
    1bb4:	|  |  |  |   addi.w #15,d0
    1bb8:	|  |  |  \-> asr.w #4,d0
    1bba:	|  |  |      movea.w d0,a0
    1bbc:	|  |  |      move.l a0,d0
    1bbe:	|  |  |      add.l a0,d0
    1bc0:	|  |  |      move.l d1,d2
    1bc2:	|  |  |      add.l d0,d2
    1bc4:	|  |  |      move.l d2,56(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    1bc8:	|  |  |      movea.l 84(sp),a0
    1bcc:	|  |  |      move.l (a0),d0
    1bce:	|  |  |      andi.l #-2147483633,d0
    1bd4:	|  |  |  /-- bpl.s 1bde <CstScaleSprite+0x436>
    1bd6:	|  |  |  |   subq.l #1,d0
    1bd8:	|  |  |  |   moveq #-16,d1
    1bda:	|  |  |  |   or.l d1,d0
    1bdc:	|  |  |  |   addq.l #1,d0
    1bde:	|  |  |  \-> moveq #12,d2
    1be0:	|  |  |      lsl.l d2,d0
    1be2:	|  |  |      addi.l #4042,d0
    1be8:	|  |  |      move.l d0,52(sp)
    bltcon1 = ((single->width%16) << 12);
    1bec:	|  |  |      movea.l 84(sp),a0
    1bf0:	|  |  |      move.l (a0),d0
    1bf2:	|  |  |      andi.l #-2147483633,d0
    1bf8:	|  |  |  /-- bpl.s 1c02 <CstScaleSprite+0x45a>
    1bfa:	|  |  |  |   subq.l #1,d0
    1bfc:	|  |  |  |   moveq #-16,d1
    1bfe:	|  |  |  |   or.l d1,d0
    1c00:	|  |  |  |   addq.l #1,d0
    1c02:	|  |  |  \-> moveq #12,d2
    1c04:	|  |  |      lsl.l d2,d0
    1c06:	|  |  |      move.l d0,48(sp)
    *CstDrawBufferCleanupCursor++ = single->width/16+cutwordssource; //Width in X Bytes
    1c0a:	|  |  |      movea.l 84(sp),a0
    1c0e:	|  |  |      move.l (a0),d0
    1c10:	|  |  |      movea.l d0,a0
    1c12:	|  |  |      cmpa.w #0,a0
    1c16:	|  |  |  /-- bge.s 1c1c <CstScaleSprite+0x474>
    1c18:	|  |  |  |   lea 15(a0),a0
    1c1c:	|  |  |  \-> move.l a0,d0
    1c1e:	|  |  |      asr.l #4,d0
    1c20:	|  |  |      move.l d0,d0
    1c22:	|  |  |      movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1c28:	|  |  |      move.l a0,d1
    1c2a:	|  |  |      addq.l #2,d1
    1c2c:	|  |  |      move.l d1,19a90 <CstDrawBufferCleanupCursor>
    1c32:	|  |  |      add.w 76(sp),d0
    1c36:	|  |  |      move.w d0,(a0)
    *CstDrawBufferCleanupCursor++ = blitheight; //Height
    1c38:	|  |  |      movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1c3e:	|  |  |      move.l a0,d0
    1c40:	|  |  |      addq.l #2,d0
    1c42:	|  |  |      move.l d0,19a90 <CstDrawBufferCleanupCursor>
    1c48:	|  |  |      move.l 36(sp),d0
    1c4c:	|  |  |      move.w d0,(a0)
    *CstDrawBufferCleanupCursor++ = (x/16)*2; //X Start in Bytes
    1c4e:	|  |  |      move.w 16(sp),d0
    1c52:	|  |  |  /-- bpl.s 1c58 <CstScaleSprite+0x4b0>
    1c54:	|  |  |  |   addi.w #15,d0
    1c58:	|  |  |  \-> asr.w #4,d0
    1c5a:	|  |  |      movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1c60:	|  |  |      move.l a0,d1
    1c62:	|  |  |      addq.l #2,d1
    1c64:	|  |  |      move.l d1,19a90 <CstDrawBufferCleanupCursor>
    1c6a:	|  |  |      add.w d0,d0
    1c6c:	|  |  |      move.w d0,(a0)
    *CstDrawBufferCleanupCursor++ = ystartdst; //Y Start  
    1c6e:	|  |  |      movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1c74:	|  |  |      move.l a0,d0
    1c76:	|  |  |      addq.l #2,d0
    1c78:	|  |  |      move.l d0,19a90 <CstDrawBufferCleanupCursor>
    1c7e:	|  |  |      move.l 44(sp),d0
    1c82:	|  |  |      move.w d0,(a0)
    *CstDrawBufferCleanupCursor = 0;  
    1c84:	|  |  |      movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1c8a:	|  |  |      clr.w (a0)
    1c8c:	|  +--|----- bra.w 1e52 <CstScaleSprite+0x6aa>
  } else { //Whole Sprite on Screen
    extrawords = 1;
    1c90:	|  |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    1c96:	|  |         clr.w 76(sp)
    cutmaskpixel = 0;
    1c9a:	|  |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1c9e:	|  |         clr.w 72(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    1ca2:	|  |         movea.l 84(sp),a0
    1ca6:	|  |         move.l 24(a0),d0
    1caa:	|  |         move.l d0,d2
    1cac:	|  |         movea.l 84(sp),a0
    1cb0:	|  |         move.l (a0),d0
    1cb2:	|  |     /-- bpl.s 1cb6 <CstScaleSprite+0x50e>
    1cb4:	|  |     |   addq.l #7,d0
    1cb6:	|  |     \-> asr.l #3,d0
    1cb8:	|  |         movea.l 84(sp),a0
    1cbc:	|  |         move.l 4(a0),d1
    1cc0:	|  |         move.l d1,-(sp)
    1cc2:	|  |         move.l d0,-(sp)
    1cc4:	|  |         jsr 1505c <__mulsi3>
    1cca:	|  |         addq.l #8,sp
    1ccc:	|  |         move.l d0,d1
    1cce:	|  |         move.l d1,d0
    1cd0:	|  |         add.l d0,d0
    1cd2:	|  |         add.l d0,d0
    1cd4:	|  |         add.l d1,d0
    1cd6:	|  |         add.l d0,d2
    1cd8:	|  |         movea.l 84(sp),a0
    1cdc:	|  |         move.l (a0),d0
    1cde:	|  |         move.l 40(sp),-(sp)
    1ce2:	|  |         move.l d0,-(sp)
    1ce4:	|  |         jsr 1505c <__mulsi3>
    1cea:	|  |         addq.l #8,sp
    1cec:	|  |         lsr.l #3,d0
    1cee:	|  |         move.l d2,d1
    1cf0:	|  |         add.l d0,d1
    1cf2:	|  |         move.l d1,68(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    1cf6:	|  |         movea.l 84(sp),a0
    1cfa:	|  |         move.l 24(a0),d0
    1cfe:	|  |         move.l d0,d2
    1d00:	|  |         movea.l 84(sp),a0
    1d04:	|  |         move.l (a0),d0
    1d06:	|  |         move.l 40(sp),-(sp)
    1d0a:	|  |         move.l d0,-(sp)
    1d0c:	|  |         jsr 1505c <__mulsi3>
    1d12:	|  |         addq.l #8,sp
    1d14:	|  |         lsr.l #3,d0
    1d16:	|  |         move.l d2,d1
    1d18:	|  |         add.l d0,d1
    1d1a:	|  |         move.l d1,64(sp)
    bltcpt = ((ULONG) CstBackDrop) + ystartdst*winWidth/8 + (x/16)*2;
    1d1e:	|  |         move.l 19aa4 <winWidth>,d0
    1d24:	|  |         move.l 44(sp),-(sp)
    1d28:	|  |         move.l d0,-(sp)
    1d2a:	|  |         jsr 1505c <__mulsi3>
    1d30:	|  |         addq.l #8,sp
    1d32:	|  |         move.l d0,d1
    1d34:	|  |         lsr.l #3,d1
    1d36:	|  |         move.l 19a7a <CstBackDrop>,d0
    1d3c:	|  |         add.l d0,d1
    1d3e:	|  |         move.w 16(sp),d0
    1d42:	|  |     /-- bpl.s 1d48 <CstScaleSprite+0x5a0>
    1d44:	|  |     |   addi.w #15,d0
    1d48:	|  |     \-> asr.w #4,d0
    1d4a:	|  |         movea.w d0,a0
    1d4c:	|  |         move.l a0,d0
    1d4e:	|  |         add.l a0,d0
    1d50:	|  |         move.l d1,d2
    1d52:	|  |         add.l d0,d2
    1d54:	|  |         move.l d2,60(sp)
    bltdpt = ((ULONG) CstDrawBuffer) + ystartdst*winWidth/8 + (x/16)*2;
    1d58:	|  |         move.l 19aa4 <winWidth>,d0
    1d5e:	|  |         move.l 44(sp),-(sp)
    1d62:	|  |         move.l d0,-(sp)
    1d64:	|  |         jsr 1505c <__mulsi3>
    1d6a:	|  |         addq.l #8,sp
    1d6c:	|  |         move.l d0,d1
    1d6e:	|  |         lsr.l #3,d1
    1d70:	|  |         move.l 19a88 <CstDrawBuffer>,d0
    1d76:	|  |         add.l d0,d1
    1d78:	|  |         move.w 16(sp),d0
    1d7c:	|  |     /-- bpl.s 1d82 <CstScaleSprite+0x5da>
    1d7e:	|  |     |   addi.w #15,d0
    1d82:	|  |     \-> asr.w #4,d0
    1d84:	|  |         movea.w d0,a0
    1d86:	|  |         move.l a0,d0
    1d88:	|  |         add.l a0,d0
    1d8a:	|  |         move.l d1,d2
    1d8c:	|  |         add.l d0,d2
    1d8e:	|  |         move.l d2,56(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    1d92:	|  |         move.w 16(sp),d0
    1d96:	|  |         andi.w #-32753,d0
    1d9a:	|  |     /-- bpl.s 1da4 <CstScaleSprite+0x5fc>
    1d9c:	|  |     |   subq.w #1,d0
    1d9e:	|  |     |   ori.w #-16,d0
    1da2:	|  |     |   addq.w #1,d0
    1da4:	|  |     \-> ext.l d0
    1da6:	|  |         moveq #12,d1
    1da8:	|  |         lsl.l d1,d0
    1daa:	|  |         addi.l #4042,d0
    1db0:	|  |         move.l d0,52(sp)
    bltcon1 = ((x%16) << 12);
    1db4:	|  |         move.w 16(sp),d0
    1db8:	|  |         andi.w #-32753,d0
    1dbc:	|  |     /-- bpl.s 1dc6 <CstScaleSprite+0x61e>
    1dbe:	|  |     |   subq.w #1,d0
    1dc0:	|  |     |   ori.w #-16,d0
    1dc4:	|  |     |   addq.w #1,d0
    1dc6:	|  |     \-> ext.l d0
    1dc8:	|  |         moveq #12,d2
    1dca:	|  |         lsl.l d2,d0
    1dcc:	|  |         move.l d0,48(sp)
    *CstDrawBufferCleanupCursor++ = single->width/16+cutwordssource; //Width in X Bytes
    1dd0:	|  |         movea.l 84(sp),a0
    1dd4:	|  |         move.l (a0),d0
    1dd6:	|  |         movea.l d0,a0
    1dd8:	|  |         cmpa.w #0,a0
    1ddc:	|  |     /-- bge.s 1de2 <CstScaleSprite+0x63a>
    1dde:	|  |     |   lea 15(a0),a0
    1de2:	|  |     \-> move.l a0,d0
    1de4:	|  |         asr.l #4,d0
    1de6:	|  |         move.l d0,d0
    1de8:	|  |         movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1dee:	|  |         move.l a0,d1
    1df0:	|  |         addq.l #2,d1
    1df2:	|  |         move.l d1,19a90 <CstDrawBufferCleanupCursor>
    1df8:	|  |         add.w 76(sp),d0
    1dfc:	|  |         move.w d0,(a0)
    *CstDrawBufferCleanupCursor++ = blitheight; //Height
    1dfe:	|  |         movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1e04:	|  |         move.l a0,d0
    1e06:	|  |         addq.l #2,d0
    1e08:	|  |         move.l d0,19a90 <CstDrawBufferCleanupCursor>
    1e0e:	|  |         move.l 36(sp),d0
    1e12:	|  |         move.w d0,(a0)
    *CstDrawBufferCleanupCursor++ = (x/16)*2; //X Start in Bytes
    1e14:	|  |         move.w 16(sp),d0
    1e18:	|  |     /-- bpl.s 1e1e <CstScaleSprite+0x676>
    1e1a:	|  |     |   addi.w #15,d0
    1e1e:	|  |     \-> asr.w #4,d0
    1e20:	|  |         movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1e26:	|  |         move.l a0,d1
    1e28:	|  |         addq.l #2,d1
    1e2a:	|  |         move.l d1,19a90 <CstDrawBufferCleanupCursor>
    1e30:	|  |         add.w d0,d0
    1e32:	|  |         move.w d0,(a0)
    *CstDrawBufferCleanupCursor++ = ystartdst; //Y Start    
    1e34:	|  |         movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1e3a:	|  |         move.l a0,d0
    1e3c:	|  |         addq.l #2,d0
    1e3e:	|  |         move.l d0,19a90 <CstDrawBufferCleanupCursor>
    1e44:	|  |         move.l 44(sp),d0
    1e48:	|  |         move.w d0,(a0)
    *CstDrawBufferCleanupCursor = 0;
    1e4a:	|  |         movea.l 19a90 <CstDrawBufferCleanupCursor>,a0
    1e50:	|  |         clr.w (a0)
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    1e52:	|  \-------> moveq #0,d0
    1e54:	|            move.w 74(sp),d0
    1e58:	|            moveq #0,d1
    1e5a:	|            not.w d1
    1e5c:	|            asr.l d0,d1
    1e5e:	|            move.w d1,30(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    1e62:	|            moveq #0,d1
    1e64:	|            move.w 76(sp),d1
    1e68:	|            moveq #0,d0
    1e6a:	|            move.w 78(sp),d0
    1e6e:	|            sub.l d0,d1
    1e70:	|            move.l d1,d0
    1e72:	|            add.w d0,d0
    1e74:	|            move.w d0,28(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    1e78:	|            moveq #0,d1
    1e7a:	|            move.w 76(sp),d1
    1e7e:	|            moveq #0,d0
    1e80:	|            move.w 78(sp),d0
    1e84:	|            sub.l d0,d1
    1e86:	|            move.l d1,d0
    1e88:	|            add.w d0,d0
    1e8a:	|            move.w d0,26(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    1e8e:	|            move.l 19aa4 <winWidth>,d0
    1e94:	|            lsr.l #3,d0
    1e96:	|            move.l d0,d1
    1e98:	|            movea.l 84(sp),a0
    1e9c:	|            move.l (a0),d0
    1e9e:	|        /-- bpl.s 1ea2 <CstScaleSprite+0x6fa>
    1ea0:	|        |   addq.l #7,d0
    1ea2:	|        \-> asr.l #3,d0
    1ea4:	|            move.l d0,d0
    1ea6:	|            sub.w d0,d1
    1ea8:	|            move.w 76(sp),d0
    1eac:	|            sub.w 78(sp),d0
    1eb0:	|            add.w d0,d0
    1eb2:	|            add.w d1,d0
    1eb4:	|            move.w d0,24(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    1eb8:	|            move.l 19aa4 <winWidth>,d0
    1ebe:	|            lsr.l #3,d0
    1ec0:	|            move.l d0,d1
    1ec2:	|            movea.l 84(sp),a0
    1ec6:	|            move.l (a0),d0
    1ec8:	|        /-- bpl.s 1ecc <CstScaleSprite+0x724>
    1eca:	|        |   addq.l #7,d0
    1ecc:	|        \-> asr.l #3,d0
    1ece:	|            move.l d0,d0
    1ed0:	|            sub.w d0,d1
    1ed2:	|            move.w 76(sp),d0
    1ed6:	|            sub.w 78(sp),d0
    1eda:	|            add.w d0,d0
    1edc:	|            add.w d1,d0
    1ede:	|            move.w d0,22(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1ee2:	|            move.l #14675968,18(sp)
  WaitBlit();
    1eea:	|            move.l 19b5c <GfxBase>,d0
    1ef0:	|            movea.l d0,a6
    1ef2:	|            jsr -228(a6)

  custom->bltafwm = bltafwm;
    1ef6:	|            movea.l 18(sp),a0
    1efa:	|            move.w 30(sp),68(a0)
  custom->bltalwm = bltalwm;
    1f00:	|            movea.l 18(sp),a0
    1f04:	|            move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    1f0a:	|            move.w 28(sp),d0
    1f0e:	|            movea.l 18(sp),a0
    1f12:	|            move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    1f16:	|            move.w 26(sp),d0
    1f1a:	|            movea.l 18(sp),a0
    1f1e:	|            move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    1f22:	|            move.w 24(sp),d0
    1f26:	|            movea.l 18(sp),a0
    1f2a:	|            move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    1f2e:	|            move.w 22(sp),d0
    1f32:	|            movea.l 18(sp),a0
    1f36:	|            move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    1f3a:	|            move.l 52(sp),d0
    1f3e:	|            movea.l 18(sp),a0
    1f42:	|            move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    1f46:	|            move.l 48(sp),d0
    1f4a:	|            movea.l 18(sp),a0
    1f4e:	|            move.w d0,66(a0)

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1f52:	|            clr.l 32(sp)
    1f56:	|     /----- bra.w 2028 <CstScaleSprite+0x880>
  {
    custom->bltapt = (APTR) bltapt;
    1f5a:	|  /--|----> move.l 68(sp),d0
    1f5e:	|  |  |      movea.l 18(sp),a0
    1f62:	|  |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    1f66:	|  |  |      move.l 64(sp),d0
    1f6a:	|  |  |      movea.l 18(sp),a0
    1f6e:	|  |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    1f72:	|  |  |      move.l 60(sp),d0
    1f76:	|  |  |      movea.l 18(sp),a0
    1f7a:	|  |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    1f7e:	|  |  |      move.l 56(sp),d0
    1f82:	|  |  |      movea.l 18(sp),a0
    1f86:	|  |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    1f8a:	|  |  |      move.l 36(sp),d0
    1f8e:	|  |  |      move.w d0,d1
    1f90:	|  |  |      lsl.w #6,d1
    1f92:	|  |  |      movea.l 84(sp),a0
    1f96:	|  |  |      move.l (a0),d0
    1f98:	|  |  |      movea.l d0,a0
    1f9a:	|  |  |      cmpa.w #0,a0
    1f9e:	|  |  |  /-- bge.s 1fa4 <CstScaleSprite+0x7fc>
    1fa0:	|  |  |  |   lea 15(a0),a0
    1fa4:	|  |  |  \-> move.l a0,d0
    1fa6:	|  |  |      asr.l #4,d0
    1fa8:	|  |  |      move.l d0,d0
    1faa:	|  |  |      add.w d1,d0
    1fac:	|  |  |      sub.w 76(sp),d0
    1fb0:	|  |  |      add.w 78(sp),d0
    1fb4:	|  |  |      movea.l 18(sp),a0
    1fb8:	|  |  |      move.w d0,88(a0)
    bltbpt += (single->width >> 3)*single->height;
    1fbc:	|  |  |      movea.l 84(sp),a0
    1fc0:	|  |  |      move.l (a0),d0
    1fc2:	|  |  |      asr.l #3,d0
    1fc4:	|  |  |      movea.l 84(sp),a0
    1fc8:	|  |  |      move.l 4(a0),d1
    1fcc:	|  |  |      move.l d1,-(sp)
    1fce:	|  |  |      move.l d0,-(sp)
    1fd0:	|  |  |      jsr 1505c <__mulsi3>
    1fd6:	|  |  |      addq.l #8,sp
    1fd8:	|  |  |      add.l d0,64(sp)
    bltcpt += winWidth/8*winHeight;
    1fdc:	|  |  |      move.l 19aa4 <winWidth>,d0
    1fe2:	|  |  |      lsr.l #3,d0
    1fe4:	|  |  |      move.l 19aa8 <winHeight>,d1
    1fea:	|  |  |      move.l d1,-(sp)
    1fec:	|  |  |      move.l d0,-(sp)
    1fee:	|  |  |      jsr 1505c <__mulsi3>
    1ff4:	|  |  |      addq.l #8,sp
    1ff6:	|  |  |      add.l d0,60(sp)
    bltdpt += winWidth/8*winHeight;
    1ffa:	|  |  |      move.l 19aa4 <winWidth>,d0
    2000:	|  |  |      lsr.l #3,d0
    2002:	|  |  |      move.l 19aa8 <winHeight>,d1
    2008:	|  |  |      move.l d1,-(sp)
    200a:	|  |  |      move.l d0,-(sp)
    200c:	|  |  |      jsr 1505c <__mulsi3>
    2012:	|  |  |      addq.l #8,sp
    2014:	|  |  |      add.l d0,56(sp)
    WaitBlit();
    2018:	|  |  |      move.l 19b5c <GfxBase>,d0
    201e:	|  |  |      movea.l d0,a6
    2020:	|  |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2024:	|  |  |      addq.l #1,32(sp)
    2028:	|  |  \----> moveq #4,d0
    202a:	|  |         cmp.l 32(sp),d0
    202e:	|  \-------- bge.w 1f5a <CstScaleSprite+0x7b2>
  }   
}
    2032:	\----------> movem.l (sp)+,d2-d3/a6
    2036:	             lea 68(sp),sp
    203a:	             rts

0000203c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    203c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    203e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    2044:	move.l 8(sp),d0
    2048:	movea.l (sp),a0
    204a:	move.l d0,128(a0)
}
    204e:	nop
    2050:	addq.l #4,sp
    2052:	rts

00002054 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    2054:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    2058:	move.l 19a84 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    2060:	move.l 19a88 <CstDrawBuffer>,d0
    2066:	move.l d0,19a84 <CstViewBuffer>
  CstDrawBuffer = tmp;
    206c:	move.l 16(sp),19a88 <CstDrawBuffer>

  UWORD *tmp2 = CstViewBufferCleanupStart;
    2074:	move.l 19a94 <CstViewBufferCleanupStart>,12(sp)
  CstViewBufferCleanupStart = CstDrawBufferCleanupStart;
    207c:	move.l 19a8c <CstDrawBufferCleanupStart>,d0
    2082:	move.l d0,19a94 <CstViewBufferCleanupStart>
  CstDrawBufferCleanupStart = tmp2;
    2088:	move.l 12(sp),19a8c <CstDrawBufferCleanupStart>
  CstViewBufferCleanupCursor = CstViewBufferCleanupStart;
    2090:	move.l 19a94 <CstViewBufferCleanupStart>,d0
    2096:	move.l d0,19a98 <CstViewBufferCleanupCursor>
  CstDrawBufferCleanupCursor = CstDrawBufferCleanupStart;
    209c:	move.l 19a8c <CstDrawBufferCleanupStart>,d0
    20a2:	move.l d0,19a90 <CstDrawBufferCleanupCursor>

  UWORD *copword = CstCopperList;
    20a8:	move.l 19a7e <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    20b0:	move.l 19a84 <CstViewBuffer>,d0
    20b6:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    20ba:	move.l 4(sp),d0
    20be:	clr.w d0
    20c0:	swap d0
    20c2:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    20c6:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    20ca:	movea.w #118,a0
    20ce:	adda.l 8(sp),a0
    20d2:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    20d4:	movea.w #114,a0
    20d8:	adda.l 8(sp),a0
    20dc:	move.w 2(sp),(a0)

  ptr +=  40*256;
    20e0:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    20e8:	move.l 4(sp),d0
    20ec:	clr.w d0
    20ee:	swap d0
    20f0:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    20f4:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    20f8:	movea.w #126,a0
    20fc:	adda.l 8(sp),a0
    2100:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    2102:	movea.w #122,a0
    2106:	adda.l 8(sp),a0
    210a:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    210e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2116:	move.l 4(sp),d0
    211a:	clr.w d0
    211c:	swap d0
    211e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2122:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    2126:	movea.l 8(sp),a0
    212a:	lea 134(a0),a0
    212e:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    2130:	movea.l 8(sp),a0
    2134:	lea 130(a0),a0
    2138:	move.w 2(sp),(a0)

  ptr +=  40*256;
    213c:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2144:	move.l 4(sp),d0
    2148:	clr.w d0
    214a:	swap d0
    214c:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2150:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    2154:	movea.l 8(sp),a0
    2158:	lea 142(a0),a0
    215c:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    215e:	movea.l 8(sp),a0
    2162:	lea 138(a0),a0
    2166:	move.w 2(sp),(a0)

  ptr +=  40*256;
    216a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2172:	move.l 4(sp),d0
    2176:	clr.w d0
    2178:	swap d0
    217a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    217e:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    2182:	movea.l 8(sp),a0
    2186:	lea 150(a0),a0
    218a:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    218c:	movea.l 8(sp),a0
    2190:	lea 146(a0),a0
    2194:	move.w 2(sp),(a0)

}
    2198:	nop
    219a:	lea 20(sp),sp
    219e:	rts

000021a0 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    21a0:	          lea -68(sp),sp
    21a4:	          move.l a6,-(sp)

  width = width / 8;
    21a6:	          move.l 76(sp),d0
    21aa:	      /-- bpl.s 21ae <CstReserveBackdrop+0xe>
    21ac:	      |   addq.l #7,d0
    21ae:	      \-> asr.l #3,d0
    21b0:	          move.l d0,76(sp)

  if( width < 40) 
    21b4:	          moveq #39,d0
    21b6:	          cmp.l 76(sp),d0
    21ba:	      /-- blt.s 21d0 <CstReserveBackdrop+0x30>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    21bc:	      |   pea 153d5 <PutChar+0x263>
    21c2:	      |   jsr 14822 <KPrintF>
    21c8:	      |   addq.l #4,sp
    return FALSE;
    21ca:	      |   clr.w d0
    21cc:	/-----|-- bra.w 2480 <CstReserveBackdrop+0x2e0>
  }  

  CstCopperList = CstCreateCopperlist( width);
    21d0:	|     \-> move.l 76(sp),-(sp)
    21d4:	|         jsr f40 <CstCreateCopperlist>
    21da:	|         addq.l #4,sp
    21dc:	|         move.l d0,19a7e <CstCopperList>
  CstBackdropSizePlane = width*height;
    21e2:	|         move.l 76(sp),d1
    21e6:	|         move.l 80(sp),d0
    21ea:	|         muls.w d1,d0
    21ec:	|         move.w d0,19a78 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    21f2:	|         move.w 19a78 <CstBackdropSizePlane>,d1
    21f8:	|         move.w d1,d0
    21fa:	|         add.w d0,d0
    21fc:	|         add.w d0,d0
    21fe:	|         add.w d1,d0
    2200:	|         move.w d0,19a76 <CstBackdropSize>

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    2206:	|         move.w 19a76 <CstBackdropSize>,d0
    220c:	|         move.w d0,d0
    220e:	|         andi.l #65535,d0
    2214:	|         move.l d0,60(sp)
    2218:	|         moveq #2,d1
    221a:	|         move.l d1,56(sp)
    221e:	|         move.l 19b50 <SysBase>,d0
    2224:	|         movea.l d0,a6
    2226:	|         move.l 60(sp),d0
    222a:	|         move.l 56(sp),d1
    222e:	|         jsr -684(a6)
    2232:	|         move.l d0,52(sp)
    2236:	|         move.l 52(sp),d0
    223a:	|         move.l d0,19a7a <CstBackDrop>
  if( !CstBackDrop)
    2240:	|         move.l 19a7a <CstBackDrop>,d0
    2246:	|     /-- bne.s 225c <CstReserveBackdrop+0xbc>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    2248:	|     |   pea 15413 <PutChar+0x2a1>
    224e:	|     |   jsr 14822 <KPrintF>
    2254:	|     |   addq.l #4,sp
    return FALSE;  
    2256:	|     |   clr.w d0
    2258:	+-----|-- bra.w 2480 <CstReserveBackdrop+0x2e0>
  }

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    225c:	|     \-> move.l 19a7a <CstBackDrop>,68(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    2264:	|         clr.l 64(sp)
    2268:	|     /-- bra.s 227e <CstReserveBackdrop+0xde>
  {
    *cursor++ = 0;
    226a:	|  /--|-> move.l 68(sp),d0
    226e:	|  |  |   move.l d0,d1
    2270:	|  |  |   addq.l #4,d1
    2272:	|  |  |   move.l d1,68(sp)
    2276:	|  |  |   movea.l d0,a0
    2278:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    227a:	|  |  |   addq.l #1,64(sp)
    227e:	|  |  \-> move.w 19a76 <CstBackdropSize>,d0
    2284:	|  |      lsr.w #2,d0
    2286:	|  |      move.w d0,d0
    2288:	|  |      andi.l #65535,d0
    228e:	|  |      cmp.l 64(sp),d0
    2292:	|  \----- bgt.s 226a <CstReserveBackdrop+0xca>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2294:	|         move.w 19a76 <CstBackdropSize>,d0
    229a:	|         move.w d0,d0
    229c:	|         andi.l #65535,d0
    22a2:	|         move.l 76(sp),d1
    22a6:	|         add.l d1,d1
    22a8:	|         add.l d1,d0
    22aa:	|         move.l d0,48(sp)
    22ae:	|         moveq #2,d0
    22b0:	|         move.l d0,44(sp)
    22b4:	|         move.l 19b50 <SysBase>,d0
    22ba:	|         movea.l d0,a6
    22bc:	|         move.l 48(sp),d0
    22c0:	|         move.l 44(sp),d1
    22c4:	|         jsr -684(a6)
    22c8:	|         move.l d0,40(sp)
    22cc:	|         move.l 40(sp),d0
    22d0:	|         move.l d0,19a88 <CstDrawBuffer>
  if( !CstDrawBuffer)
    22d6:	|         move.l 19a88 <CstDrawBuffer>,d0
    22dc:	|     /-- bne.s 22f2 <CstReserveBackdrop+0x152>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    22de:	|     |   pea 1544b <PutChar+0x2d9>
    22e4:	|     |   jsr 14822 <KPrintF>
    22ea:	|     |   addq.l #4,sp
    return FALSE;  
    22ec:	|     |   clr.w d0
    22ee:	+-----|-- bra.w 2480 <CstReserveBackdrop+0x2e0>
  }
  CstDrawBufferCleanupStart = AllocVec( 100*3*2,MEMF_ANY);
    22f2:	|     \-> move.l #600,36(sp)
    22fa:	|         clr.l 32(sp)
    22fe:	|         move.l 19b50 <SysBase>,d0
    2304:	|         movea.l d0,a6
    2306:	|         move.l 36(sp),d0
    230a:	|         move.l 32(sp),d1
    230e:	|         jsr -684(a6)
    2312:	|         move.l d0,28(sp)
    2316:	|         move.l 28(sp),d0
    231a:	|         move.l d0,19a8c <CstDrawBufferCleanupStart>
  if( !CstDrawBufferCleanupStart)
    2320:	|         move.l 19a8c <CstDrawBufferCleanupStart>,d0
    2326:	|     /-- bne.s 233c <CstReserveBackdrop+0x19c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstDrawBufferCleanupStart");
    2328:	|     |   pea 15485 <PutChar+0x313>
    232e:	|     |   jsr 14822 <KPrintF>
    2334:	|     |   addq.l #4,sp
    return FALSE;  
    2336:	|     |   clr.w d0
    2338:	+-----|-- bra.w 2480 <CstReserveBackdrop+0x2e0>
  }
  CstDrawBufferCleanupCursor = CstDrawBufferCleanupStart;
    233c:	|     \-> move.l 19a8c <CstDrawBufferCleanupStart>,d0
    2342:	|         move.l d0,19a90 <CstDrawBufferCleanupCursor>
  *CstDrawBufferCleanupStart = 0;
    2348:	|         movea.l 19a8c <CstDrawBufferCleanupStart>,a0
    234e:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2350:	|         move.w 19a76 <CstBackdropSize>,d0
    2356:	|         move.w d0,d0
    2358:	|         andi.l #65535,d0
    235e:	|         move.l 76(sp),d1
    2362:	|         add.l d1,d1
    2364:	|         add.l d1,d0
    2366:	|         move.l d0,24(sp)
    236a:	|         moveq #2,d1
    236c:	|         move.l d1,20(sp)
    2370:	|         move.l 19b50 <SysBase>,d0
    2376:	|         movea.l d0,a6
    2378:	|         move.l 24(sp),d0
    237c:	|         move.l 20(sp),d1
    2380:	|         jsr -684(a6)
    2384:	|         move.l d0,16(sp)
    2388:	|         move.l 16(sp),d0
    238c:	|         move.l d0,19a84 <CstViewBuffer>
  if( !CstViewBuffer)
    2392:	|         move.l 19a84 <CstViewBuffer>,d0
    2398:	|     /-- bne.s 23ae <CstReserveBackdrop+0x20e>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    239a:	|     |   pea 154ce <PutChar+0x35c>
    23a0:	|     |   jsr 14822 <KPrintF>
    23a6:	|     |   addq.l #4,sp
    return FALSE;  
    23a8:	|     |   clr.w d0
    23aa:	+-----|-- bra.w 2480 <CstReserveBackdrop+0x2e0>
  }
  CstViewBufferCleanupStart = AllocVec( 100*3*2,MEMF_ANY);
    23ae:	|     \-> move.l #600,12(sp)
    23b6:	|         clr.l 8(sp)
    23ba:	|         move.l 19b50 <SysBase>,d0
    23c0:	|         movea.l d0,a6
    23c2:	|         move.l 12(sp),d0
    23c6:	|         move.l 8(sp),d1
    23ca:	|         jsr -684(a6)
    23ce:	|         move.l d0,4(sp)
    23d2:	|         move.l 4(sp),d0
    23d6:	|         move.l d0,19a94 <CstViewBufferCleanupStart>
  if( !CstViewBufferCleanupStart)
    23dc:	|         move.l 19a94 <CstViewBufferCleanupStart>,d0
    23e2:	|     /-- bne.s 23f8 <CstReserveBackdrop+0x258>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstViewBufferCleanupStart");
    23e4:	|     |   pea 15508 <PutChar+0x396>
    23ea:	|     |   jsr 14822 <KPrintF>
    23f0:	|     |   addq.l #4,sp
    return FALSE;  
    23f2:	|     |   clr.w d0
    23f4:	+-----|-- bra.w 2480 <CstReserveBackdrop+0x2e0>
  }
  *CstViewBufferCleanupStart = 0;
    23f8:	|     \-> movea.l 19a94 <CstViewBufferCleanupStart>,a0
    23fe:	|         clr.w (a0)
  CstViewBufferCleanupCursor = CstViewBufferCleanupStart;
    2400:	|         move.l 19a94 <CstViewBufferCleanupStart>,d0
    2406:	|         move.l d0,19a98 <CstViewBufferCleanupCursor>
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    240c:	|         move.l 19a88 <CstDrawBuffer>,d1
    2412:	|         move.l 76(sp),d0
    2416:	|     /-- bpl.s 241a <CstReserveBackdrop+0x27a>
    2418:	|     |   addq.l #3,d0
    241a:	|     \-> asr.l #2,d0
    241c:	|         add.l d0,d0
    241e:	|         add.l d0,d0
    2420:	|         add.l d1,d0
    2422:	|         move.l d0,19a88 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    2428:	|         move.l 19a84 <CstViewBuffer>,d1
    242e:	|         move.l 76(sp),d0
    2432:	|     /-- bpl.s 2436 <CstReserveBackdrop+0x296>
    2434:	|     |   addq.l #3,d0
    2436:	|     \-> asr.l #2,d0
    2438:	|         add.l d0,d0
    243a:	|         add.l d0,d0
    243c:	|         add.l d1,d0
    243e:	|         move.l d0,19a84 <CstViewBuffer>
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    2444:	|         move.l 19a7e <CstCopperList>,d0
    244a:	|     /-- beq.s 245c <CstReserveBackdrop+0x2bc>
    244c:	|     |   move.l 19a88 <CstDrawBuffer>,d0
    2452:	|     +-- beq.s 245c <CstReserveBackdrop+0x2bc>
    2454:	|     |   move.l 19a84 <CstViewBuffer>,d0
    245a:	|  /--|-- bne.s 246e <CstReserveBackdrop+0x2ce>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    245c:	|  |  \-> pea 15551 <PutChar+0x3df>
    2462:	|  |      jsr 14822 <KPrintF>
    2468:	|  |      addq.l #4,sp
    return FALSE;
    246a:	|  |      clr.w d0
    246c:	+--|----- bra.s 2480 <CstReserveBackdrop+0x2e0>
  }

  CstSetCl( CstCopperList);
    246e:	|  \----> move.l 19a7e <CstCopperList>,d0
    2474:	|         move.l d0,-(sp)
    2476:	|         jsr 203c <CstSetCl>
    247c:	|         addq.l #4,sp
  return TRUE;
    247e:	|         moveq #1,d0

}
    2480:	\-------> movea.l (sp)+,a6
    2482:	          lea 68(sp),sp
    2486:	          rts

00002488 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    2488:	    lea -12(sp),sp
    248c:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    248e:	    move.l 19a88 <CstDrawBuffer>,d0
    2494:	/-- beq.s 24ae <CstFreeBuffer+0x26>
    2496:	|   move.l 19a88 <CstDrawBuffer>,12(sp)
    249e:	|   move.l 19b50 <SysBase>,d0
    24a4:	|   movea.l d0,a6
    24a6:	|   movea.l 12(sp),a1
    24aa:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    24ae:	\-> move.l 19a84 <CstViewBuffer>,d0
    24b4:	/-- beq.s 24ce <CstFreeBuffer+0x46>
    24b6:	|   move.l 19a84 <CstViewBuffer>,8(sp)
    24be:	|   move.l 19b50 <SysBase>,d0
    24c4:	|   movea.l d0,a6
    24c6:	|   movea.l 8(sp),a1
    24ca:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    24ce:	\-> move.l 19a7e <CstCopperList>,d0
    24d4:	/-- beq.s 24ee <CstFreeBuffer+0x66>
    24d6:	|   move.l 19a7e <CstCopperList>,4(sp)
    24de:	|   move.l 19b50 <SysBase>,d0
    24e4:	|   movea.l d0,a6
    24e6:	|   movea.l 4(sp),a1
    24ea:	|   jsr -690(a6)
}
    24ee:	\-> nop
    24f0:	    movea.l (sp)+,a6
    24f2:	    lea 12(sp),sp
    24f6:	    rts

000024f8 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    24f8:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    24fc:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    2500:	       tst.l 24(sp)
    2504:	   /-- bge.s 250a <drawLine+0x12>
    2506:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    250a:	   \-> tst.l 28(sp)
    250e:	   /-- bge.s 2514 <drawLine+0x1c>
    2510:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    2514:	   \-> tst.l 32(sp)
    2518:	   /-- bge.s 251e <drawLine+0x26>
    251a:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    251e:	   \-> tst.l 36(sp)
    2522:	   /-- bge.s 2528 <drawLine+0x30>
    2524:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    2528:	   \-> move.l 19c40 <sceneWidth>,d0
    252e:	       cmp.l 24(sp),d0
    2532:	   /-- bge.s 2542 <drawLine+0x4a>
    2534:	   |   move.l 19c40 <sceneWidth>,d0
    253a:	   |   move.l d0,d1
    253c:	   |   subq.l #1,d1
    253e:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    2542:	   \-> move.l 19c40 <sceneWidth>,d0
    2548:	       cmp.l 32(sp),d0
    254c:	   /-- bge.s 255c <drawLine+0x64>
    254e:	   |   move.l 19c40 <sceneWidth>,d0
    2554:	   |   move.l d0,d1
    2556:	   |   subq.l #1,d1
    2558:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    255c:	   \-> move.l 19c44 <sceneHeight>,d0
    2562:	       cmp.l 28(sp),d0
    2566:	   /-- bge.s 2576 <drawLine+0x7e>
    2568:	   |   move.l 19c44 <sceneHeight>,d0
    256e:	   |   move.l d0,d1
    2570:	   |   subq.l #1,d1
    2572:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    2576:	   \-> move.l 19c44 <sceneHeight>,d0
    257c:	       cmp.l 36(sp),d0
    2580:	   /-- bge.s 2590 <drawLine+0x98>
    2582:	   |   move.l 19c44 <sceneHeight>,d0
    2588:	   |   move.l d0,d1
    258a:	   |   subq.l #1,d1
    258c:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    2590:	   \-> move.l 24(sp),d0
    2594:	       cmp.l 32(sp),d0
    2598:	/----- ble.s 25b4 <drawLine+0xbc>
		x = x2; 
    259a:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    25a0:	|      tst.w 10(sp)
    25a4:	|      seq d0
    25a6:	|      neg.b d0
    25a8:	|      move.b d0,d0
    25aa:	|      andi.w #255,d0
    25ae:	|      move.w d0,10(sp)
    25b2:	|  /-- bra.s 25ba <drawLine+0xc2>
	} else x = x1;
    25b4:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    25ba:	   \-> move.l 28(sp),d1
    25be:	       cmp.l 36(sp),d1
    25c2:	/----- ble.s 25de <drawLine+0xe6>
		y = y2; 
    25c4:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    25ca:	|      tst.w 10(sp)
    25ce:	|      seq d0
    25d0:	|      neg.b d0
    25d2:	|      move.b d0,d0
    25d4:	|      andi.w #255,d0
    25d8:	|      move.w d0,10(sp)
    25dc:	|  /-- bra.s 25e4 <drawLine+0xec>
	} else y = y1;	
    25de:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    25e4:	   \-> move.l 32(sp),d0
    25e8:	       sub.l 24(sp),d0
    25ec:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    25f0:	       move.l 6(sp),d0
    25f4:	   /-- bpl.s 25f8 <drawLine+0x100>
    25f6:	   |   neg.l d0
    25f8:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    25fc:	       move.l 36(sp),d1
    2600:	       sub.l 28(sp),d1
    2604:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    2608:	       move.l 2(sp),d0
    260c:	   /-- bpl.s 2610 <drawLine+0x118>
    260e:	   |   neg.l d0
    2610:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    2614:	       tst.l 6(sp)
    2618:	   /-- bne.s 263c <drawLine+0x144>
		diffX = 1;
    261a:	   |   moveq #1,d0
    261c:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    2620:	   |   move.l 19c40 <sceneWidth>,d0
    2626:	   |   subq.l #1,d0
    2628:	   |   cmp.l 16(sp),d0
    262c:	   +-- bne.s 263c <drawLine+0x144>
    262e:	   |   move.l 19c40 <sceneWidth>,d0
    2634:	   |   move.l d0,d1
    2636:	   |   subq.l #2,d1
    2638:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    263c:	   \-> tst.l 2(sp)
    2640:	   /-- bne.s 2664 <drawLine+0x16c>
		diffY = 1;
    2642:	   |   moveq #1,d0
    2644:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    2648:	   |   move.l 19c44 <sceneHeight>,d0
    264e:	   |   subq.l #1,d0
    2650:	   |   cmp.l 12(sp),d0
    2654:	   +-- bne.s 2664 <drawLine+0x16c>
    2656:	   |   move.l 19c44 <sceneHeight>,d0
    265c:	   |   move.l d0,d1
    265e:	   |   subq.l #2,d1
    2660:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    2664:	   \-> pea 1557e <PutChar+0x40c>
    266a:	       jsr 14822 <KPrintF>
    2670:	       addq.l #4,sp
	
}
    2672:	       nop
    2674:	       lea 20(sp),sp
    2678:	       rts

0000267a <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    267a:	                      lea -24(sp),sp
    267e:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    2680:	                      move.l 19aac <firstTexture>,d0
    2686:	/-------------------- beq.w 2764 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    268a:	|                     clr.l 24(sp)
    268e:	|     /-------------- bra.w 2758 <deleteTextures+0xde>
			BOOL found = FALSE;
    2692:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    2696:	|  |  |               move.l 19aac <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    269e:	|  |  |               movea.l 20(sp),a0
    26a2:	|  |  |               move.l (a0),d1
    26a4:	|  |  |               move.l 24(sp),d0
    26a8:	|  |  |               add.l d0,d0
    26aa:	|  |  |               add.l d0,d0
    26ac:	|  |  |               movea.l 36(sp),a0
    26b0:	|  |  |               adda.l d0,a0
    26b2:	|  |  |               move.l (a0),d0
    26b4:	|  |  |               cmp.l d1,d0
    26b6:	|  |  |  /----------- bne.w 274a <deleteTextures+0xd0>
				found = TRUE;
    26ba:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    26c0:	|  |  |  |            movea.l 20(sp),a0
    26c4:	|  |  |  |            move.l 12(a0),d0
    26c8:	|  |  |  |            move.l d0,19aac <firstTexture>
				FreeVec(list);
    26ce:	|  |  |  |            move.l 20(sp),6(sp)
    26d4:	|  |  |  |            move.l 19b50 <SysBase>,d0
    26da:	|  |  |  |            movea.l d0,a6
    26dc:	|  |  |  |            movea.l 6(sp),a1
    26e0:	|  |  |  |            jsr -690(a6)
				continue;
    26e4:	|  |  |  |  /-------- bra.s 2754 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    26e6:	|  |  |  |  |  /----> movea.l 20(sp),a0
    26ea:	|  |  |  |  |  |      movea.l 12(a0),a0
    26ee:	|  |  |  |  |  |      move.l (a0),d1
    26f0:	|  |  |  |  |  |      move.l 24(sp),d0
    26f4:	|  |  |  |  |  |      add.l d0,d0
    26f6:	|  |  |  |  |  |      add.l d0,d0
    26f8:	|  |  |  |  |  |      movea.l 36(sp),a0
    26fc:	|  |  |  |  |  |      adda.l d0,a0
    26fe:	|  |  |  |  |  |      move.l (a0),d0
    2700:	|  |  |  |  |  |      cmp.l d1,d0
    2702:	|  |  |  |  |  |  /-- bne.s 2740 <deleteTextures+0xc6>
					found = TRUE;
    2704:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    270a:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    270e:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    2714:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2718:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    271c:	|  |  |  |  |  |  |   move.l 12(a0),d0
    2720:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2724:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    2728:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    272e:	|  |  |  |  |  |  |   move.l 19b50 <SysBase>,d0
    2734:	|  |  |  |  |  |  |   movea.l d0,a6
    2736:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    273a:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    273e:	|  |  |  |  +--|--|-- bra.s 2754 <deleteTextures+0xda>
				}
				list = list->next;
    2740:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    2744:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    274a:	|  |  |  \--|--|----> movea.l 20(sp),a0
    274e:	|  |  |     |  |      move.l 12(a0),d0
    2752:	|  |  |     |  \----- bne.s 26e6 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    2754:	|  |  |     \-------> addq.l #1,24(sp)
    2758:	|  |  \-------------> move.l 24(sp),d0
    275c:	|  |                  cmp.l 32(sp),d0
    2760:	|  \----------------- bcs.w 2692 <deleteTextures+0x18>
			}
		}
	}
}
    2764:	\-------------------> nop
    2766:	                      movea.l (sp)+,a6
    2768:	                      lea 24(sp),sp
    276c:	                      rts

0000276e <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    276e:	subq.l #4,sp
    2770:	move.l 8(sp),d0
    2774:	move.w d0,d0
    2776:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    277a:	pea 155a1 <PutChar+0x42f>
    2780:	jsr 14822 <KPrintF>
    2786:	addq.l #4,sp
}
    2788:	nop
    278a:	addq.l #4,sp
    278c:	rts

0000278e <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    278e:	       moveq #-1,d0
    2790:	       cmp.l 4(sp),d0
    2794:	   /-- bne.s 279a <resourceNameFromNum+0xc>
    2796:	   |   moveq #0,d0
    2798:	/--|-- bra.s 27d2 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    279a:	|  \-> move.l 19b2c <numResourceNames>,d0
    27a0:	|  /-- bne.s 27aa <resourceNameFromNum+0x1c>
    27a2:	|  |   move.l #87505,d0
    27a8:	+--|-- bra.s 27d2 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    27aa:	|  \-> move.l 19b2c <numResourceNames>,d0
    27b0:	|      cmp.l 4(sp),d0
    27b4:	|  /-- ble.s 27cc <resourceNameFromNum+0x3e>
    27b6:	|  |   move.l 19ae4 <allResourceNames>,d1
    27bc:	|  |   move.l 4(sp),d0
    27c0:	|  |   add.l d0,d0
    27c2:	|  |   add.l d0,d0
    27c4:	|  |   movea.l d1,a0
    27c6:	|  |   adda.l d0,a0
    27c8:	|  |   move.l (a0),d0
    27ca:	+--|-- bra.s 27d2 <resourceNameFromNum+0x44>
	return "Unknown resource";
    27cc:	|  \-> move.l #87514,d0
    27d2:	\----> rts

000027d4 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    27d4:	          lea -40(sp),sp
    27d8:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    27dc:	          move.l #320,19aa4 <winWidth>
    winHeight = 256;
    27e6:	          move.l #256,19aa8 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    27f0:	          tst.l 56(sp)
    27f4:	      /-- bne.s 280c <main_sludge+0x38>
		bundleFolder = copyString("game/");
    27f6:	      |   pea 155eb <PutChar+0x479>
    27fc:	      |   jsr b8 <copyString>
    2802:	      |   addq.l #4,sp
    2804:	      |   move.l d0,19abc <bundleFolder>
    280a:	   /--|-- bra.s 2822 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    280c:	   |  \-> movea.l 60(sp),a0
    2810:	   |      move.l (a0),d0
    2812:	   |      move.l d0,-(sp)
    2814:	   |      jsr b8 <copyString>
    281a:	   |      addq.l #4,sp
    281c:	   |      move.l d0,19abc <bundleFolder>
	}
    
	int lastSlash = -1;
    2822:	   \----> moveq #-1,d0
    2824:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    2828:	          clr.l 40(sp)
    282c:	   /----- bra.s 284e <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    282e:	/--|----> move.l 19abc <bundleFolder>,d1
    2834:	|  |      move.l 40(sp),d0
    2838:	|  |      movea.l d1,a0
    283a:	|  |      adda.l d0,a0
    283c:	|  |      move.b (a0),d0
    283e:	|  |      cmpi.b #47,d0
    2842:	|  |  /-- bne.s 284a <main_sludge+0x76>
    2844:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    284a:	|  |  \-> addq.l #1,40(sp)
    284e:	|  \----> move.l 19abc <bundleFolder>,d1
    2854:	|         move.l 40(sp),d0
    2858:	|         movea.l d1,a0
    285a:	|         adda.l d0,a0
    285c:	|         move.b (a0),d0
    285e:	\-------- bne.s 282e <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    2860:	          move.l 19abc <bundleFolder>,d0
    2866:	          move.l 44(sp),d1
    286a:	          addq.l #1,d1
    286c:	          movea.l d0,a0
    286e:	          adda.l d1,a0
    2870:	          clr.b (a0)

	if (argc > 1) {
    2872:	          moveq #1,d0
    2874:	          cmp.l 56(sp),d0
    2878:	      /-- bge.s 2894 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    287a:	      |   move.l 56(sp),d0
    287e:	      |   addi.l #1073741823,d0
    2884:	      |   add.l d0,d0
    2886:	      |   add.l d0,d0
    2888:	      |   movea.l 60(sp),a0
    288c:	      |   adda.l d0,a0
    288e:	      |   move.l (a0),48(sp)
    2892:	   /--|-- bra.s 28ee <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    2894:	   |  \-> move.l 19abc <bundleFolder>,d0
    289a:	   |      pea 155f1 <PutChar+0x47f>
    28a0:	   |      move.l d0,-(sp)
    28a2:	   |      jsr 11d06 <joinStrings>
    28a8:	   |      addq.l #8,sp
    28aa:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    28ae:	   |      move.l 48(sp),-(sp)
    28b2:	   |      jsr 11c00 <fileExists>
    28b8:	   |      addq.l #4,sp
    28ba:	   |      tst.b d0
    28bc:	   +----- bne.s 28ee <main_sludge+0x11a>
			FreeVec(sludgeFile);
    28be:	   |      move.l 48(sp),36(sp)
    28c4:	   |      move.l 19b50 <SysBase>,d0
    28ca:	   |      movea.l d0,a6
    28cc:	   |      movea.l 36(sp),a1
    28d0:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    28d4:	   |      move.l 19abc <bundleFolder>,d0
    28da:	   |      pea 155fe <PutChar+0x48c>
    28e0:	   |      move.l d0,-(sp)
    28e2:	   |      jsr 11d06 <joinStrings>
    28e8:	   |      addq.l #8,sp
    28ea:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    28ee:	   \----> pea 15607 <PutChar+0x495>
    28f4:	          jsr 14822 <KPrintF>
    28fa:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    28fc:	          move.l 48(sp),-(sp)
    2900:	          jsr 11c00 <fileExists>
    2906:	          addq.l #4,sp
    2908:	          tst.b d0
    290a:	      /-- bne.s 2962 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    290c:	      |   move.l 19b58 <DOSBase>,d0
    2912:	      |   movea.l d0,a6
    2914:	      |   jsr -60(a6)
    2918:	      |   move.l d0,28(sp)
    291c:	      |   move.l 28(sp),d0
    2920:	      |   move.l d0,24(sp)
    2924:	      |   move.l #87559,20(sp)
    292c:	      |   moveq #21,d0
    292e:	      |   move.l d0,16(sp)
    2932:	      |   move.l 19b58 <DOSBase>,d0
    2938:	      |   movea.l d0,a6
    293a:	      |   move.l 24(sp),d1
    293e:	      |   move.l 20(sp),d2
    2942:	      |   move.l 16(sp),d3
    2946:	      |   jsr -48(a6)
    294a:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    294e:	      |   pea 15607 <PutChar+0x495>
    2954:	      |   jsr 14822 <KPrintF>
    295a:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    295c:	      |   moveq #0,d0
    295e:	/-----|-- bra.w 2b4c <main_sludge+0x378>
	}

	KPrintF("Setgamefilepath\n");
    2962:	|     \-> pea 1561d <PutChar+0x4ab>
    2968:	|         jsr 14822 <KPrintF>
    296e:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    2970:	|         move.l 48(sp),-(sp)
    2974:	|         jsr 2b56 <setGameFilePath>
    297a:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    297c:	|         move.l 48(sp),-(sp)
    2980:	|         jsr 3e8a <initSludge>
    2986:	|         addq.l #4,sp
    2988:	|         tst.w d0
    298a:	|     /-- bne.s 2992 <main_sludge+0x1be>
    298c:	|     |   moveq #0,d0
    298e:	+-----|-- bra.w 2b4c <main_sludge+0x378>
	
	if( winWidth != 320 || winHeight != 256) {
    2992:	|     \-> move.l 19aa4 <winWidth>,d0
    2998:	|         cmpi.l #320,d0
    299e:	|     /-- bne.s 29ae <main_sludge+0x1da>
    29a0:	|     |   move.l 19aa8 <winHeight>,d0
    29a6:	|     |   cmpi.l #256,d0
    29ac:	|  /--|-- beq.s 29d0 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    29ae:	|  |  \-> pea 1562e <PutChar+0x4bc>
    29b4:	|  |      jsr 14822 <KPrintF>
    29ba:	|  |      addq.l #4,sp
		winWidth = 320;
    29bc:	|  |      move.l #320,19aa4 <winWidth>
		winHeight = 256;
    29c6:	|  |      move.l #256,19aa8 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    29d0:	|  \----> pea 156ab <PutChar+0x539>
    29d6:	|         jsr 14822 <KPrintF>
    29dc:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    29de:	|         move.l 19aa8 <winHeight>,d0
    29e4:	|         move.l d0,d1
    29e6:	|         move.l 19aa4 <winWidth>,d0
    29ec:	|         move.l d1,-(sp)
    29ee:	|         move.l d0,-(sp)
    29f0:	|         jsr b4ee <resizeBackdrop>
    29f6:	|         addq.l #8,sp
    29f8:	|         tst.w d0
    29fa:	|     /-- bne.s 2a10 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    29fc:	|     |   pea 156be <PutChar+0x54c>
    2a02:	|     |   jsr 14822 <KPrintF>
    2a08:	|     |   addq.l #4,sp
		return FALSE;
    2a0a:	|     |   moveq #0,d0
    2a0c:	+-----|-- bra.w 2b4c <main_sludge+0x378>
	}

	KPrintF("Init People\n");
    2a10:	|     \-> pea 156e4 <PutChar+0x572>
    2a16:	|         jsr 14822 <KPrintF>
    2a1c:	|         addq.l #4,sp
	if (! initPeople ())
    2a1e:	|         jsr 8bb6 <initPeople>
    2a24:	|         tst.w d0
    2a26:	|     /-- bne.s 2a3c <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    2a28:	|     |   pea 156f1 <PutChar+0x57f>
    2a2e:	|     |   jsr 14822 <KPrintF>
    2a34:	|     |   addq.l #4,sp
		return FALSE;
    2a36:	|     |   moveq #0,d0
    2a38:	+-----|-- bra.w 2b4c <main_sludge+0x378>
	}

	KPrintF("Init Floor\n");
    2a3c:	|     \-> pea 15712 <PutChar+0x5a0>
    2a42:	|         jsr 14822 <KPrintF>
    2a48:	|         addq.l #4,sp
	if (! initFloor ())
    2a4a:	|         jsr 13bd8 <initFloor>
    2a50:	|         tst.w d0
    2a52:	|     /-- bne.s 2a68 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    2a54:	|     |   pea 1571e <PutChar+0x5ac>
    2a5a:	|     |   jsr 14822 <KPrintF>
    2a60:	|     |   addq.l #4,sp
		
		return FALSE;
    2a62:	|     |   moveq #0,d0
    2a64:	+-----|-- bra.w 2b4c <main_sludge+0x378>
	}

	KPrintF("Init Objecttype\n");
    2a68:	|     \-> pea 1573e <PutChar+0x5cc>
    2a6e:	|         jsr 14822 <KPrintF>
    2a74:	|         addq.l #4,sp
	if (! initObjectTypes ())
    2a76:	|         jsr b6aa <initObjectTypes>
    2a7c:	|         tst.w d0
    2a7e:	|     /-- bne.s 2a94 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    2a80:	|     |   pea 1574f <PutChar+0x5dd>
    2a86:	|     |   jsr 14822 <KPrintF>
    2a8c:	|     |   addq.l #4,sp
		return FALSE;
    2a8e:	|     |   moveq #0,d0
    2a90:	+-----|-- bra.w 2b4c <main_sludge+0x378>
	}

	KPrintF("Init speech\n");
    2a94:	|     \-> pea 15775 <PutChar+0x603>
    2a9a:	|         jsr 14822 <KPrintF>
    2aa0:	|         addq.l #4,sp
	initSpeech ();
    2aa2:	|         jsr 6264 <initSpeech>
	KPrintF("Init status bar\n");
    2aa8:	|         pea 15782 <PutChar+0x610>
    2aae:	|         jsr 14822 <KPrintF>
    2ab4:	|         addq.l #4,sp
	initStatusBar ();
    2ab6:	|         jsr 5d28 <initStatusBar>

	KPrintF("Get numbered string\n");
    2abc:	|         pea 15793 <PutChar+0x621>
    2ac2:	|         jsr 14822 <KPrintF>
    2ac8:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    2aca:	|         pea 1 <_start+0x1>
    2ace:	|         jsr 5046 <getNumberedString>
    2ad4:	|         addq.l #4,sp
    2ad6:	|         move.l d0,19ab4 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    2adc:	|         pea 157a8 <PutChar+0x636>
    2ae2:	|         jsr 14822 <KPrintF>
    2ae8:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    2aea:	|         move.l 19b20 <noStack>,d0
    2af0:	|         pea 1 <_start+0x1>
    2af4:	|         move.l d0,-(sp)
    2af6:	|         clr.l -(sp)
    2af8:	|         clr.l -(sp)
    2afa:	|         clr.l -(sp)
    2afc:	|         jsr 4ece <startNewFunctionNum>
    2b02:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    2b06:	|         pea 157c0 <PutChar+0x64e>
    2b0c:	|         jsr 14822 <KPrintF>
    2b12:	|         addq.l #4,sp

	weAreDoneSoQuit = 0;
    2b14:	|         clr.l 19ac0 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {				
    2b1a:	|     /-- bra.s 2b2e <main_sludge+0x35a>
		sludgeDisplay ();
    2b1c:	|  /--|-> jsr 4e64 <sludgeDisplay>
		handleInput();
    2b22:	|  |  |   jsr 3e82 <handleInput>
		WaitVbl();
    2b28:	|  |  |   jsr 14756 <WaitVbl>
	while ( !weAreDoneSoQuit ) {				
    2b2e:	|  |  \-> move.l 19ac0 <weAreDoneSoQuit>,d0
    2b34:	|  \----- beq.s 2b1c <main_sludge+0x348>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    2b36:	|         move.l 48(sp),32(sp)
    2b3c:	|         move.l 19b50 <SysBase>,d0
    2b42:	|         movea.l d0,a6
    2b44:	|         movea.l 32(sp),a1
    2b48:	|         jsr -690(a6)
}
    2b4c:	\-------> movem.l (sp)+,d2-d3/a6
    2b50:	          lea 40(sp),sp
    2b54:	          rts

00002b56 <setGameFilePath>:

void setGameFilePath (char * f) {
    2b56:	          lea -1104(sp),sp
    2b5a:	          move.l a6,-(sp)
    2b5c:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    2b5e:	          move.l #1112,d0
    2b64:	          add.l sp,d0
    2b66:	          addi.l #-1102,d0
    2b6c:	          move.l d0,1100(sp)
    2b70:	          move.l #998,1096(sp)
    2b78:	          move.l 19b58 <DOSBase>,d0
    2b7e:	          movea.l d0,a6
    2b80:	          move.l 1100(sp),d1
    2b84:	          move.l 1096(sp),d2
    2b88:	          jsr -564(a6)
    2b8c:	          move.w d0,1094(sp)
    2b90:	          move.w 1094(sp),d0
    2b94:	      /-- bne.s 2ba4 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    2b96:	      |   pea 157d3 <PutChar+0x661>
    2b9c:	      |   jsr 14822 <KPrintF>
    2ba2:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    2ba4:	      \-> moveq #-1,d0
    2ba6:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    2baa:	          clr.l 1104(sp)
    2bae:	   /----- bra.s 2bcc <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    2bb0:	/--|----> move.l 1104(sp),d0
    2bb4:	|  |      movea.l 1116(sp),a0
    2bb8:	|  |      adda.l d0,a0
    2bba:	|  |      move.b (a0),d0
    2bbc:	|  |      cmpi.b #47,d0
    2bc0:	|  |  /-- bne.s 2bc8 <setGameFilePath+0x72>
    2bc2:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    2bc8:	|  |  \-> addq.l #1,1104(sp)
    2bcc:	|  \----> move.l 1104(sp),d0
    2bd0:	|         movea.l 1116(sp),a0
    2bd4:	|         adda.l d0,a0
    2bd6:	|         move.b (a0),d0
    2bd8:	\-------- bne.s 2bb0 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    2bda:	          moveq #-1,d0
    2bdc:	          cmp.l 1108(sp),d0
    2be0:	   /----- beq.s 2c5a <setGameFilePath+0x104>
		f[got] = 0;	
    2be2:	   |      move.l 1108(sp),d0
    2be6:	   |      movea.l 1116(sp),a0
    2bea:	   |      adda.l d0,a0
    2bec:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    2bee:	   |      move.l 1116(sp),1090(sp)
    2bf4:	   |      moveq #-2,d0
    2bf6:	   |      move.l d0,1086(sp)
    2bfa:	   |      move.l 19b58 <DOSBase>,d0
    2c00:	   |      movea.l d0,a6
    2c02:	   |      move.l 1090(sp),d1
    2c06:	   |      move.l 1086(sp),d2
    2c0a:	   |      jsr -84(a6)
    2c0e:	   |      move.l d0,1082(sp)
    2c12:	   |      move.l 1082(sp),d0
    2c16:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    2c1a:	   |      move.l 1078(sp),1074(sp)
    2c20:	   |      move.l 19b58 <DOSBase>,d0
    2c26:	   |      movea.l d0,a6
    2c28:	   |      move.l 1074(sp),d1
    2c2c:	   |      jsr -126(a6)
    2c30:	   |      move.l d0,1070(sp)
    2c34:	   |      move.l 1070(sp),d0
    2c38:	   |  /-- bne.s 2c4c <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    2c3a:	   |  |   move.l 1116(sp),-(sp)
    2c3e:	   |  |   pea 157f9 <PutChar+0x687>
    2c44:	   |  |   jsr 14822 <KPrintF>
    2c4a:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    2c4c:	   |  \-> move.l 1108(sp),d0
    2c50:	   |      movea.l 1116(sp),a0
    2c54:	   |      adda.l d0,a0
    2c56:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    2c5a:	   \----> move.l #400,1066(sp)
    2c62:	          clr.l 1062(sp)
    2c66:	          move.l 19b50 <SysBase>,d0
    2c6c:	          movea.l d0,a6
    2c6e:	          move.l 1066(sp),d0
    2c72:	          move.l 1062(sp),d1
    2c76:	          jsr -684(a6)
    2c7a:	          move.l d0,1058(sp)
    2c7e:	          move.l 1058(sp),d0
    2c82:	          move.l d0,19ab8 <gamePath>
	if (gamePath==0) {
    2c88:	          move.l 19ab8 <gamePath>,d0
    2c8e:	      /-- bne.s 2ca2 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    2c90:	      |   pea 1582c <PutChar+0x6ba>
    2c96:	      |   jsr 14822 <KPrintF>
    2c9c:	      |   addq.l #4,sp
    2c9e:	   /--|-- bra.w 2d8a <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    2ca2:	   |  \-> move.l 19ab8 <gamePath>,1054(sp)
    2caa:	   |      moveq #-2,d0
    2cac:	   |      move.l d0,1050(sp)
    2cb0:	   |      move.l 19b58 <DOSBase>,d0
    2cb6:	   |      movea.l d0,a6
    2cb8:	   |      move.l 1054(sp),d1
    2cbc:	   |      move.l 1050(sp),d2
    2cc0:	   |      jsr -84(a6)
    2cc4:	   |      move.l d0,1046(sp)
    2cc8:	   |      move.l 1046(sp),d0
    2ccc:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    2cd0:	   |      move.l 1042(sp),1038(sp)
    2cd6:	   |      move.l 19b58 <DOSBase>,d0
    2cdc:	   |      movea.l d0,a6
    2cde:	   |      move.l 1038(sp),d1
    2ce2:	   |      jsr -126(a6)
    2ce6:	   |      move.l d0,1034(sp)
    2cea:	   |      move.l 1034(sp),d0
    2cee:	   |  /-- bne.s 2cfe <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    2cf0:	   |  |   pea 15867 <PutChar+0x6f5>
    2cf6:	   |  |   jsr 14822 <KPrintF>
    2cfc:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    2cfe:	   |  \-> move.l #1112,d0
    2d04:	   |      add.l sp,d0
    2d06:	   |      addi.l #-1102,d0
    2d0c:	   |      move.l d0,1030(sp)
    2d10:	   |      moveq #-2,d0
    2d12:	   |      move.l d0,1026(sp)
    2d16:	   |      move.l 19b58 <DOSBase>,d0
    2d1c:	   |      movea.l d0,a6
    2d1e:	   |      move.l 1030(sp),d1
    2d22:	   |      move.l 1026(sp),d2
    2d26:	   |      jsr -84(a6)
    2d2a:	   |      move.l d0,1022(sp)
    2d2e:	   |      move.l 1022(sp),d0
    2d32:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    2d36:	   |      move.l 1042(sp),1018(sp)
    2d3c:	   |      move.l 19b58 <DOSBase>,d0
    2d42:	   |      movea.l d0,a6
    2d44:	   |      move.l 1018(sp),d1
    2d48:	   |      jsr -126(a6)
    2d4c:	   |      move.l d0,1014(sp)
    2d50:	   |      move.l 1014(sp),d0
    2d54:	   |  /-- bne.s 2d6a <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    2d56:	   |  |   moveq #10,d0
    2d58:	   |  |   add.l sp,d0
    2d5a:	   |  |   move.l d0,-(sp)
    2d5c:	   |  |   pea 15893 <PutChar+0x721>
    2d62:	   |  |   jsr 14822 <KPrintF>
    2d68:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    2d6a:	   |  \-> move.l 19ab8 <gamePath>,d0
    2d70:	   +----- beq.s 2d8a <setGameFilePath+0x234>
    2d72:	   |      move.l 19ab8 <gamePath>,1010(sp)
    2d7a:	   |      move.l 19b50 <SysBase>,d0
    2d80:	   |      movea.l d0,a6
    2d82:	   |      movea.l 1010(sp),a1
    2d86:	   |      jsr -690(a6)
}
    2d8a:	   \----> move.l (sp)+,d2
    2d8c:	          movea.l (sp)+,a6
    2d8e:	          lea 1104(sp),sp
    2d92:	          rts

00002d94 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    2d94:	/-------> lea -16(sp),sp
    2d98:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    2d9a:	|         move.l 24(sp),-(sp)
    2d9e:	|         jsr 4c46 <pauseFunction>
    2da4:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    2da6:	|     /-- bra.s 2db8 <abortFunction+0x24>
    2da8:	|  /--|-> moveq #24,d0
    2daa:	|  |  |   add.l 24(sp),d0
    2dae:	|  |  |   move.l d0,-(sp)
    2db0:	|  |  |   jsr 1315e <trimStack>
    2db6:	|  |  |   addq.l #4,sp
    2db8:	|  |  \-> movea.l 24(sp),a0
    2dbc:	|  |      move.l 24(a0),d0
    2dc0:	|  \----- bne.s 2da8 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    2dc2:	|         movea.l 24(sp),a0
    2dc6:	|         move.l 4(a0),12(sp)
    2dcc:	|         move.l 19b50 <SysBase>,d0
    2dd2:	|         movea.l d0,a6
    2dd4:	|         movea.l 12(sp),a1
    2dd8:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2ddc:	|         clr.l 16(sp)
    2de0:	|     /-- bra.s 2e00 <abortFunction+0x6c>
    2de2:	|  /--|-> movea.l 24(sp),a0
    2de6:	|  |  |   move.l 20(a0),d1
    2dea:	|  |  |   move.l 16(sp),d0
    2dee:	|  |  |   lsl.l #3,d0
    2df0:	|  |  |   add.l d1,d0
    2df2:	|  |  |   move.l d0,-(sp)
    2df4:	|  |  |   jsr 12a28 <unlinkVar>
    2dfa:	|  |  |   addq.l #4,sp
    2dfc:	|  |  |   addq.l #1,16(sp)
    2e00:	|  |  \-> movea.l 24(sp),a0
    2e04:	|  |      move.l 8(a0),d0
    2e08:	|  |      cmp.l 16(sp),d0
    2e0c:	|  \----- bgt.s 2de2 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    2e0e:	|         movea.l 24(sp),a0
    2e12:	|         move.l 20(a0),8(sp)
    2e18:	|         move.l 19b50 <SysBase>,d0
    2e1e:	|         movea.l d0,a6
    2e20:	|         movea.l 8(sp),a1
    2e24:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    2e28:	|         moveq #28,d0
    2e2a:	|         add.l 24(sp),d0
    2e2e:	|         move.l d0,-(sp)
    2e30:	|         jsr 12a28 <unlinkVar>
    2e36:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    2e38:	|         movea.l 24(sp),a0
    2e3c:	|         move.l 40(a0),d0
    2e40:	|     /-- beq.s 2e52 <abortFunction+0xbe>
    2e42:	|     |   movea.l 24(sp),a0
    2e46:	|     |   move.l 40(a0),d0
    2e4a:	|     |   move.l d0,-(sp)
    2e4c:	\-----|-- jsr 2d94 <abortFunction>(pc)
    2e50:	      |   addq.l #4,sp
	FreeVec(fun);
    2e52:	      \-> move.l 24(sp),4(sp)
    2e58:	          move.l 19b50 <SysBase>,d0
    2e5e:	          movea.l d0,a6
    2e60:	          movea.l 4(sp),a1
    2e64:	          jsr -690(a6)
	fun = NULL;
    2e68:	          clr.l 24(sp)
}
    2e6c:	          nop
    2e6e:	          movea.l (sp)+,a6
    2e70:	          lea 16(sp),sp
    2e74:	          rts

00002e76 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    2e76:	          subq.l #8,sp
	int n = 0;
    2e78:	          clr.l 4(sp)
	*killedMyself = FALSE;
    2e7c:	          movea.l 20(sp),a0
    2e80:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    2e82:	          move.l 19ae8 <allRunningFunctions>,(sp)
	while (fun) {
    2e88:	   /----- bra.s 2eb6 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    2e8a:	/--|----> movea.l (sp),a0
    2e8c:	|  |      move.l (a0),d0
    2e8e:	|  |      cmp.l 12(sp),d0
    2e92:	|  |  /-- bne.s 2eb0 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    2e94:	|  |  |   movea.l (sp),a0
    2e96:	|  |  |   move.w #1,54(a0)
			n++;
    2e9c:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    2ea0:	|  |  |   move.l (sp),d0
    2ea2:	|  |  |   cmp.l 16(sp),d0
    2ea6:	|  |  +-- bne.s 2eb0 <cancelAFunction+0x3a>
    2ea8:	|  |  |   movea.l 20(sp),a0
    2eac:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    2eb0:	|  |  \-> movea.l (sp),a0
    2eb2:	|  |      move.l 44(a0),(sp)
	while (fun) {
    2eb6:	|  \----> tst.l (sp)
    2eb8:	\-------- bne.s 2e8a <cancelAFunction+0x14>
	}
	return n;
    2eba:	          move.l 4(sp),d0
}
    2ebe:	          addq.l #8,sp
    2ec0:	          rts

00002ec2 <completeTimers>:


void completeTimers () {
    2ec2:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    2ec4:	          move.l 19ae8 <allRunningFunctions>,(sp)

	while (thisFunction) {
    2eca:	   /----- bra.s 2ee0 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    2ecc:	/--|----> movea.l (sp),a0
    2ece:	|  |      move.b 56(a0),d0
    2ed2:	|  |  /-- bne.s 2eda <completeTimers+0x18>
    2ed4:	|  |  |   movea.l (sp),a0
    2ed6:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    2eda:	|  |  \-> movea.l (sp),a0
    2edc:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    2ee0:	|  \----> tst.l (sp)
    2ee2:	\-------- bne.s 2ecc <completeTimers+0xa>
	}
}
    2ee4:	          nop
    2ee6:	          nop
    2ee8:	          addq.l #4,sp
    2eea:	          rts

00002eec <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    2eec:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    2ef0:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    2ef6:	                                                             movea.l 80(sp),a0
    2efa:	                                                             move.w 54(a0),d0
    2efe:	/----------------------------------------------------------- beq.w 3d9e <continueFunction+0xeb2>
		abortFunction (fun);
    2f02:	|                                                            move.l 80(sp),-(sp)
    2f06:	|                                                            jsr 2d94 <abortFunction>
    2f0c:	|                                                            addq.l #4,sp
		return TRUE;
    2f0e:	|                                                            moveq #1,d0
    2f10:	|  /-------------------------------------------------------- bra.w 3da8 <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    2f14:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    2f1a:	|  |  |                                                      movea.l 80(sp),a0
    2f1e:	|  |  |                                                      move.l 4(a0),d1
    2f22:	|  |  |                                                      movea.l 80(sp),a0
    2f26:	|  |  |                                                      move.l 36(a0),d0
    2f2a:	|  |  |                                                      lsl.l #3,d0
    2f2c:	|  |  |                                                      movea.l d1,a0
    2f2e:	|  |  |                                                      adda.l d0,a0
    2f30:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    2f36:	|  |  |                                                      movea.l 80(sp),a0
    2f3a:	|  |  |                                                      move.l 4(a0),d1
    2f3e:	|  |  |                                                      movea.l 80(sp),a0
    2f42:	|  |  |                                                      move.l 36(a0),d0
    2f46:	|  |  |                                                      lsl.l #3,d0
    2f48:	|  |  |                                                      movea.l d1,a0
    2f4a:	|  |  |                                                      adda.l d0,a0
    2f4c:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    2f50:	|  |  |                                                      move.l 64(sp),-(sp)
    2f54:	|  |  |                                                      pea 1599b <PutChar+0x829>
    2f5a:	|  |  |                                                      jsr 14822 <KPrintF>
    2f60:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    2f62:	|  |  |                                                      moveq #41,d0
    2f64:	|  |  |                                                      cmp.l 64(sp),d0
    2f68:	|  |  |  /-------------------------------------------------- bcs.w 3d52 <continueFunction+0xe66>
    2f6c:	|  |  |  |                                                   move.l 64(sp),d0
    2f70:	|  |  |  |                                                   add.l d0,d0
    2f72:	|  |  |  |                                                   movea.l d0,a0
    2f74:	|  |  |  |                                                   adda.l #12160,a0
    2f7a:	|  |  |  |                                                   move.w (a0),d0
    2f7c:	|  |  |  |                                                   jmp (2f80 <continueFunction+0x94>,pc,d0.w)
    2f80:	|  |  |  |                                                   bset d6,(a2)
    2f82:	|  |  |  |                                                   ori.w #2670,(a4)
    2f86:	|  |  |  |                                                   eori.w #2416,d6
    2f8a:	|  |  |  |                                                   bchg d4,d2
    2f8c:	|  |  |  |                                                   bclr d4,(a4)+
    2f8e:	|  |  |  |                                                   andi.l #181013194,d4
    2f94:	|  |  |  |                                                   .short 0x0aca
    2f96:	|  |  |  |                                                   .short 0x0aca
    2f98:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    2fa0:	|  |  |  |                                                   .short 0x0aca
    2fa2:	|  |  |  |                                                   andi.w #906,-(a4)
    2fa6:	|  |  |  |                                                   bchg d1,196(a2)
    2faa:	|  |  |  |                                                   bset d1,580(a4)
    2fae:	|  |  |  |                                                   bclr d1,2576(a2)
    2fb2:	|  |  |  |                                                   andi.b #-56,2762(a2)
    2fb8:	|  |  |  |                                                   .short 0x0aca
    2fba:	|  |  |  |                                                   eori.l #63572682,d0
    2fc0:	|  |  |  |                                                   .short 0x0aca
    2fc2:	|  |  |  |                                                   bchg d3,-(a2)
    2fc4:	|  |  |  |                                                   bchg #-36,(a2)
    2fc8:	|  |  |  |                                                   .short 0x08cc
    2fca:	|  |  |  |                                                   addi.b #14,1038(a0)
    2fd0:	|  |  |  |                                                   .short 0x040e
    2fd2:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    2fd6:	|  |  |  |                                                   ori.w #8232,(a0)
    2fda:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    2fe0:	|  |  |  |                                                   ori.w #12136,(a0)
    2fe4:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    2fea:	|  |  |  |                                                   ori.w #12328,(a0)
    2fee:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    2ff4:	|  |  |  |                                                   add.l 44(sp),d1
    2ff8:	|  |  |  |                                                   moveq #28,d0
    2ffa:	|  |  |  |                                                   add.l 80(sp),d0
    2ffe:	|  |  |  |                                                   move.l d1,-(sp)
    3000:	|  |  |  |                                                   move.l d0,-(sp)
    3002:	|  |  |  |                                                   jsr 12c94 <copyVariable>
    3008:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    300a:	|  |  |  |                                                   move.l 80(sp),-(sp)
    300e:	|  |  |  |                                                   jsr 3dae <finishFunction>
    3014:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    3016:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    301c:	|  |  |  |                                                   move.l 80(sp),-(sp)
    3020:	|  |  |  |                                                   jsr 4c88 <restartFunction>
    3026:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    3028:	|  |  |  |  /----------------------------------------------- bra.w 3d86 <continueFunction+0xe9a>
				finishFunction (fun);
    302c:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    3030:	|  |  |  |  |                                                jsr 3dae <finishFunction>
    3036:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    3038:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    303c:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    3040:	|  |  |  |  +----------------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    3044:	|  |  |  |  |                                                movea.l 80(sp),a0
    3048:	|  |  |  |  |                                                move.l 28(a0),d0
    304c:	|  |  |  |  |                                                moveq #2,d1
    304e:	|  |  |  |  |                                                cmp.l d0,d1
    3050:	|  |  |  |  |                                            /-- beq.s 305c <continueFunction+0x170>
    3052:	|  |  |  |  |                                            |   moveq #4,d1
    3054:	|  |  |  |  |                                            |   cmp.l d0,d1
    3056:	|  |  |  |  |                                         /--|-- beq.s 30aa <continueFunction+0x1be>
    3058:	|  |  |  |  |                                /--------|--|-- bra.w 3192 <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    305c:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    3060:	|  |  |  |  |                                |        |      jsr 4c46 <pauseFunction>
    3066:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    3068:	|  |  |  |  |                                |        |      moveq #24,d0
    306a:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    306e:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    3072:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    3076:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    307a:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    307c:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    3080:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    3084:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    3086:	|  |  |  |  |                                |        |      jsr 4ece <startNewFunctionNum>
    308c:	|  |  |  |  |                                |        |      lea 20(sp),sp
    3090:	|  |  |  |  |                                |        |      tst.l d0
    3092:	|  |  |  |  |                                |        |  /-- bne.s 309a <continueFunction+0x1ae>
    3094:	|  |  |  |  |                                |        |  |   clr.w d0
    3096:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 3da8 <continueFunction+0xebc>
				fun = allRunningFunctions;
    309a:	|  |  |  |  |                                |        |  \-> move.l 19ae8 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    30a2:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    30a6:	|  |  |  |  |                                |  /-----|----- bra.w 31a6 <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    30aa:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    30ae:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    30b2:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    30b6:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    30ba:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    30bc:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    30be:	|  |  |  |  |                                |  |            jsr 114bc <callBuiltIn>
    30c4:	|  |  |  |  |                                |  |            lea 12(sp),sp
    30c8:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    30cc:	|  |  |  |  |                                |  |            moveq #5,d0
    30ce:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    30d2:	|  |  |  |  |                                |  |  /-------- bcs.w 318e <continueFunction+0x2a2>
    30d6:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    30da:	|  |  |  |  |                                |  |  |         add.l d0,d0
    30dc:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    30de:	|  |  |  |  |                                |  |  |         adda.l #12522,a0
    30e4:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    30e6:	|  |  |  |  |                                |  |  |         jmp (30ea <continueFunction+0x1fe>,pc,d0.w)
    30ea:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    30f0:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    30f4:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    30fa:	|  |  |  |  |                                |  |  |         subq.l #4,20153(sp)
    30fe:	|  |  |  |  |                                |  |  |         ori.b #34,d1
    3102:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    3104:	|  |  |  |  |                                |  |  |         clr.w d0
    3106:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 3da8 <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    310a:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    310e:	|  |  |  |  |                                |  |  |         jsr 4c46 <pauseFunction>
    3114:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    3116:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    311a:	|  |  |  |  |                                |  |  |  /----- bra.s 3190 <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    311c:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    3120:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    3124:	|  |  |  |  |                                |  |  |  +----- bra.s 3190 <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    3126:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    312a:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    3130:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    3132:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    3136:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    313a:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    313e:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    3140:	|  |  |  |  |                                |  |  |  |      jsr 130cc <setVariable>
    3146:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    314a:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    314e:	|  |  |  |  |                                |  |  |  |      jsr 4c46 <pauseFunction>
    3154:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    3156:	|  |  |  |  |                                |  |  |  |      move.l 19b20 <noStack>,d1
    315c:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    3160:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    3162:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    3164:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    3168:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    316a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    316c:	|  |  |  |  |                                |  |  |  |      jsr 4ece <startNewFunctionNum>
    3172:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    3176:	|  |  |  |  |                                |  |  |  |      tst.l d0
    3178:	|  |  |  |  |                                |  |  |  |  /-- bne.s 3180 <continueFunction+0x294>
    317a:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    317c:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 3da8 <continueFunction+0xebc>
							fun = allRunningFunctions;
    3180:	|  |  |  |  |                                |  |  |  |  \-> move.l 19ae8 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    3188:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    318c:	|  |  |  |  |                                |  |  |  +----- bra.s 3190 <continueFunction+0x2a4>

						default:
						break;
    318e:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    3190:	|  |  |  |  |                                |  +-----\----X bra.s 31a6 <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    3192:	|  |  |  |  |                                \--|----------> pea 159fa <PutChar+0x888>
    3198:	|  |  |  |  |                                   |            jsr 14822 <KPrintF>
    319e:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    31a0:	|  |  |  |  |                                   |            clr.w d0
    31a2:	|  +--|--|--|-----------------------------------|----------- bra.w 3da8 <continueFunction+0xebc>
			}
			break;
    31a6:	|  |  |  |  +-----------------------------------\----------X bra.w 3d86 <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    31aa:	|  |  |  |  |                                                moveq #28,d0
    31ac:	|  |  |  |  |                                                add.l 80(sp),d0
    31b0:	|  |  |  |  |                                                clr.l -(sp)
    31b2:	|  |  |  |  |                                                clr.l -(sp)
    31b4:	|  |  |  |  |                                                move.l d0,-(sp)
    31b6:	|  |  |  |  |                                                jsr 130cc <setVariable>
    31bc:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    31c0:	|  |  |  |  +----------------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    31c4:	|  |  |  |  |                                                move.l 68(sp),d1
    31c8:	|  |  |  |  |                                                moveq #28,d0
    31ca:	|  |  |  |  |                                                add.l 80(sp),d0
    31ce:	|  |  |  |  |                                                move.l d1,-(sp)
    31d0:	|  |  |  |  |                                                pea 5 <_start+0x5>
    31d4:	|  |  |  |  |                                                move.l d0,-(sp)
    31d6:	|  |  |  |  |                                                jsr 130cc <setVariable>
    31dc:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    31e0:	|  |  |  |  +----------------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    31e4:	|  |  |  |  |                                                move.l 68(sp),d1
    31e8:	|  |  |  |  |                                                moveq #28,d0
    31ea:	|  |  |  |  |                                                add.l 80(sp),d0
    31ee:	|  |  |  |  |                                                move.l d1,-(sp)
    31f0:	|  |  |  |  |                                                pea 1 <_start+0x1>
    31f4:	|  |  |  |  |                                                move.l d0,-(sp)
    31f6:	|  |  |  |  |                                                jsr 130cc <setVariable>
    31fc:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3200:	|  |  |  |  +----------------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    3204:	|  |  |  |  |                                                moveq #28,d0
    3206:	|  |  |  |  |                                                add.l 80(sp),d0
    320a:	|  |  |  |  |                                                movea.l 80(sp),a0
    320e:	|  |  |  |  |                                                movea.l 20(a0),a0
    3212:	|  |  |  |  |                                                move.l 68(sp),d1
    3216:	|  |  |  |  |                                                lsl.l #3,d1
    3218:	|  |  |  |  |                                                add.l a0,d1
    321a:	|  |  |  |  |                                                move.l d0,-(sp)
    321c:	|  |  |  |  |                                                move.l d1,-(sp)
    321e:	|  |  |  |  |                                                jsr 12c94 <copyVariable>
    3224:	|  |  |  |  |                                                addq.l #8,sp
    3226:	|  |  |  |  |                                                tst.w d0
    3228:	|  |  |  |  |  /-------------------------------------------- bne.w 3d64 <continueFunction+0xe78>
    322c:	|  |  |  |  |  |                                             clr.w d0
    322e:	|  +--|--|--|--|-------------------------------------------- bra.w 3da8 <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    3232:	|  |  |  |  |  |                                             moveq #28,d0
    3234:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3238:	|  |  |  |  |  |                                             move.l d0,-(sp)
    323a:	|  |  |  |  |  |                                             jsr 12d1a <getBoolean>
    3240:	|  |  |  |  |  |                                             addq.l #4,sp
    3242:	|  |  |  |  |  |                                             tst.w d0
    3244:	|  |  |  |  |  |                                      /----- beq.s 3260 <continueFunction+0x374>
    3246:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    324a:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    324e:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    3250:	|  |  |  |  |  |                                      |      jsr 12d1a <getBoolean>
    3256:	|  |  |  |  |  |                                      |      addq.l #4,sp
    3258:	|  |  |  |  |  |                                      |      tst.w d0
    325a:	|  |  |  |  |  |                                      +----- beq.s 3260 <continueFunction+0x374>
    325c:	|  |  |  |  |  |                                      |      moveq #1,d0
    325e:	|  |  |  |  |  |                                      |  /-- bra.s 3262 <continueFunction+0x376>
    3260:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3262:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3264:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3268:	|  |  |  |  |  |                                             move.l d0,-(sp)
    326a:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    326e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3270:	|  |  |  |  |  |                                             jsr 130cc <setVariable>
    3276:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    327a:	|  |  |  |  |  |                                             moveq #24,d0
    327c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3280:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3282:	|  |  |  |  |  |                                             jsr 1315e <trimStack>
    3288:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    328a:	|  |  |  |  +--|-------------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    328e:	|  |  |  |  |  |                                             moveq #28,d0
    3290:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3294:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3296:	|  |  |  |  |  |                                             jsr 12d1a <getBoolean>
    329c:	|  |  |  |  |  |                                             addq.l #4,sp
    329e:	|  |  |  |  |  |                                             tst.w d0
    32a0:	|  |  |  |  |  |                                         /-- bne.s 32b8 <continueFunction+0x3cc>
    32a2:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    32a6:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    32aa:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    32ac:	|  |  |  |  |  |                                         |   jsr 12d1a <getBoolean>
    32b2:	|  |  |  |  |  |                                         |   addq.l #4,sp
    32b4:	|  |  |  |  |  |                                         |   tst.w d0
    32b6:	|  |  |  |  |  |                                      /--|-- beq.s 32bc <continueFunction+0x3d0>
    32b8:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    32ba:	|  |  |  |  |  |                                      |  /-- bra.s 32be <continueFunction+0x3d2>
    32bc:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    32be:	|  |  |  |  |  |                                         \-> moveq #28,d1
    32c0:	|  |  |  |  |  |                                             add.l 80(sp),d1
    32c4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    32c6:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    32ca:	|  |  |  |  |  |                                             move.l d1,-(sp)
    32cc:	|  |  |  |  |  |                                             jsr 130cc <setVariable>
    32d2:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    32d6:	|  |  |  |  |  |                                             moveq #24,d0
    32d8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    32dc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    32de:	|  |  |  |  |  |                                             jsr 1315e <trimStack>
    32e4:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    32e6:	|  |  |  |  +--|-------------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    32ea:	|  |  |  |  |  |                                             move.l 68(sp),d1
    32ee:	|  |  |  |  |  |                                             moveq #28,d0
    32f0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    32f4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    32f6:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    32fa:	|  |  |  |  |  |                                             move.l d0,-(sp)
    32fc:	|  |  |  |  |  |                                             jsr 130cc <setVariable>
    3302:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3306:	|  |  |  |  +--|-------------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    330a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    330e:	|  |  |  |  |  |                                             moveq #28,d0
    3310:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3314:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3316:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    331a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    331c:	|  |  |  |  |  |                                             jsr 130cc <setVariable>
    3322:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3326:	|  |  |  |  +--|-------------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    332a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    332e:	|  |  |  |  |  |                                             moveq #28,d0
    3330:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3334:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3336:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    333a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    333c:	|  |  |  |  |  |                                             jsr 130cc <setVariable>
    3342:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3346:	|  |  |  |  +--|-------------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    334a:	|  |  |  |  |  |                                             move.l 19ab0 <dialogValue>,d0
    3350:	|  |  |  |  |  |                                             moveq #1,d1
    3352:	|  |  |  |  |  |                                             cmp.l d0,d1
    3354:	|  |  |  |  |  |  /----------------------------------------- beq.w 3d68 <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    3358:	|  |  |  |  |  |  |                                          pea 15a0f <PutChar+0x89d>
    335e:	|  |  |  |  |  |  |                                          jsr 14822 <KPrintF>
    3364:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    3366:	|  |  |  |  |  |  |                                          clr.w d0
    3368:	|  +--|--|--|--|--|----------------------------------------- bra.w 3da8 <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    336c:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    3370:	|  |  |  |  |  |  |                                          moveq #28,d0
    3372:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    3376:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    3378:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    337a:	|  |  |  |  |  |  |                                          jsr 1285e <loadStringToVar>
    3380:	|  |  |  |  |  |  |                                          addq.l #8,sp
    3382:	|  |  |  |  |  |  |                                          tst.w d0
    3384:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 3d6c <continueFunction+0xe80>
					return FALSE;
    3388:	|  |  |  |  |  |  |  |                                       clr.w d0
    338a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 3da8 <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    338e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3392:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3396:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3398:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    339a:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    339c:	|  |  |  |  |  |  |  |                                /----- beq.s 33fa <continueFunction+0x50e>
    339e:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    33a0:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    33a2:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 358e <continueFunction+0x6a2>
    33a6:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    33a8:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 33b4 <continueFunction+0x4c8>
    33aa:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    33ac:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    33ae:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 33fa <continueFunction+0x50e>
    33b0:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 358e <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    33b4:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    33b6:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    33ba:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 33e6 <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    33bc:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    33be:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    33c2:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    33c4:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    33c6:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    33c8:	|  |  |  |  |  |  |  |              |                 |  |   jsr 130cc <setVariable>
    33ce:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    33d2:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    33d4:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    33d8:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    33da:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1315e <trimStack>
    33e0:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    33e2:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 35a4 <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    33e6:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 15a50 <PutChar+0x8de>
    33ec:	|  |  |  |  |  |  |  |              |  |              |      jsr 14822 <KPrintF>
    33f2:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    33f4:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    33f6:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 3da8 <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    33fa:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    33fe:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3402:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    3406:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    3408:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 341e <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    340a:	|  |  |  |  |  |  |  |              |  |                 |   pea 15a8c <PutChar+0x91a>
    3410:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14822 <KPrintF>
    3416:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    3418:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    341a:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 3da8 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    341e:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    3420:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3424:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3426:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    342a:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    342e:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    3430:	|  |  |  |  |  |  |  |              |  |                     jsr 127da <getValueType>
    3436:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    343a:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    343c:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3444 <continueFunction+0x558>
    343e:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3440:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 3da8 <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3444:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    3448:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    344c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    344e:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    3450:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    3452:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3474 <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    3454:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    3458:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    345a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    345e:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    3462:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    3466:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    3468:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    346a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12464 <fastArrayGetByIndex>
    3470:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    3472:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 3494 <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    3474:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    3478:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    347a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    347e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    3482:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    3486:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    3488:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    348a:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    348c:	|  |  |  |  |  |  |  |              |  |              |      jsr 130ee <stackGetByIndex>
    3492:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3494:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    3498:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    349a:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    349e:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    34a0:	|  |  |  |  |  |  |  |              |  |                     jsr 1315e <trimStack>
    34a6:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    34a8:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    34ac:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 34c8 <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    34ae:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    34b0:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    34b4:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    34b6:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    34b8:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    34ba:	|  |  |  |  |  |  |  |              |  |                 |   jsr 130cc <setVariable>
    34c0:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    34c4:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 35a2 <continueFunction+0x6b6>
    34c8:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    34ca:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    34ce:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 34dc <continueFunction+0x5f0>
    34d0:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    34d2:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    34d6:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 3526 <continueFunction+0x63a>
    34d8:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 356e <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    34dc:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    34e0:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    34e4:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    34e8:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    34ea:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 127da <getValueType>
    34f0:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    34f4:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    34f6:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 34fe <continueFunction+0x612>
    34f8:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    34fa:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 3588 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    34fe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    3500:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    3502:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    3506:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    3508:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    350c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    350e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 130cc <setVariable>
    3514:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    3518:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    351a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    351c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    3520:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    3524:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 358c <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3526:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    352a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    352e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    3532:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    3534:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 127da <getValueType>
    353a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    353e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    3540:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 3546 <continueFunction+0x65a>
    3542:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    3544:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 3588 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    3546:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    3548:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    354a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    354e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    3550:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3554:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    3556:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 130cc <setVariable>
    355c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    3560:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    3562:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    3564:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    3568:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    356c:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 358c <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    356e:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    3570:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    3574:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    3576:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    357a:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 12c94 <copyVariable>
    3580:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    3582:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    3584:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 35a2 <continueFunction+0x6b6>
    3586:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3588:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 3da8 <continueFunction+0xebc>
				break;
    358c:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 35a2 <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    358e:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 15aaa <PutChar+0x938>
    3594:	|  |  |  |  |  |  |  |                 |  |                  jsr 14822 <KPrintF>
    359a:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    359c:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    359e:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 3da8 <continueFunction+0xebc>
				break;
    35a2:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    35a4:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 3d86 <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    35a8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    35ac:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    35b0:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    35b2:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    35b4:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    35b6:	|  |  |  |  |  |  |  |                                   /-- beq.s 35c4 <continueFunction+0x6d8>
    35b8:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    35ba:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    35bc:	|  |  |  |  |  |  |  |                                /--|-- beq.w 3670 <continueFunction+0x784>
    35c0:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 36ce <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    35c4:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    35c8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    35cc:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    35d0:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    35d2:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 35e8 <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    35d4:	|  |  |  |  |  |  |  |                             |  |  |   pea 15a8c <PutChar+0x91a>
    35da:	|  |  |  |  |  |  |  |                             |  |  |   jsr 14822 <KPrintF>
    35e0:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    35e2:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    35e4:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3da8 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    35e8:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    35ea:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    35ee:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    35f0:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    35f4:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    35f8:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    35fa:	|  |  |  |  |  |  |  |                             |  |      jsr 127da <getValueType>
    3600:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3604:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3606:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 360e <continueFunction+0x722>
    3608:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    360a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3da8 <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    360e:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3612:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3616:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    361a:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    361c:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    3620:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    3622:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    3626:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    362a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    362e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3630:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    3632:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    3634:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3636:	|  |  |  |  |  |  |  |                             |  |      jsr 4e8a <stackSetByIndex>
    363c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3640:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3642:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 364a <continueFunction+0x75e>
						return FALSE;
    3644:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3646:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 3da8 <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    364a:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    364c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3650:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3652:	|  |  |  |  |  |  |  |                             |  |      jsr 1315e <trimStack>
    3658:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    365a:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    365c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3660:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3662:	|  |  |  |  |  |  |  |                             |  |      jsr 1315e <trimStack>
    3668:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    366a:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    366c:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 3d86 <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    3670:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    3672:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    3676:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    3678:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    367c:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    3680:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    3682:	|  |  |  |  |  |  |  |                             |         jsr 127da <getValueType>
    3688:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    368c:	|  |  |  |  |  |  |  |                             |         tst.w d0
    368e:	|  |  |  |  |  |  |  |                             |     /-- bne.s 3696 <continueFunction+0x7aa>
    3690:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    3692:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 3da8 <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    3696:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    369a:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    369c:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    36a0:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    36a4:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    36a8:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    36aa:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    36ac:	|  |  |  |  |  |  |  |                             |         jsr 12464 <fastArrayGetByIndex>
    36b2:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    36b4:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    36b8:	|  |  |  |  |  |  |  |                             |     /-- bne.s 36c8 <continueFunction+0x7dc>
    36ba:	|  |  |  |  |  |  |  |                             |     |   pea 15ace <PutChar+0x95c>
    36c0:	|  |  |  |  |  |  |  |                             |     |   jsr 14822 <KPrintF>
    36c6:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    36c8:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    36ca:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 3da8 <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    36ce:	|  |  |  |  |  |  |  |                             \-------> pea 15aaa <PutChar+0x938>
    36d4:	|  |  |  |  |  |  |  |                                       jsr 14822 <KPrintF>
    36da:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    36dc:	|  |  |  |  |  |  |  |                                       clr.w d0
    36de:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 3da8 <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    36e2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    36e6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    36ea:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    36ee:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    36f0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    36f2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    36f4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    36f8:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    36fc:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    36fe:	|  |  |  |  |  |  |  |                                       jsr 127da <getValueType>
    3704:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3708:	|  |  |  |  |  |  |  |                                       tst.w d0
    370a:	|  |  |  |  |  |  |  |                                   /-- bne.s 3712 <continueFunction+0x826>
    370c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    370e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3da8 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    3712:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    3716:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3718:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    371c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    371e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3722:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3724:	|  |  |  |  |  |  |  |                                       jsr 130cc <setVariable>
    372a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    372e:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    3732:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3734:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    3736:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    373a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    373e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3742:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3744:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3746:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3748:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    374c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    374e:	|  |  |  |  |  |  |  |                                       jsr 130cc <setVariable>
    3754:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3758:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    375c:	|  |  |  |  |  |  |  |                                       move.l 19afe <globalVars>,d1
    3762:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3766:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3768:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    376a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    376c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3770:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    3774:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3776:	|  |  |  |  |  |  |  |                                       jsr 127da <getValueType>
    377c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3780:	|  |  |  |  |  |  |  |                                       tst.w d0
    3782:	|  |  |  |  |  |  |  |                                   /-- bne.s 378a <continueFunction+0x89e>
    3784:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3786:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3da8 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    378a:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    378e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3790:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3794:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3796:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    379a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    379c:	|  |  |  |  |  |  |  |                                       jsr 130cc <setVariable>
    37a2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    37a6:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    37aa:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    37ac:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    37ae:	|  |  |  |  |  |  |  |                                       movea.l 19afe <globalVars>,a0
    37b4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    37b8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    37ba:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    37bc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    37be:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    37c2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    37c4:	|  |  |  |  |  |  |  |                                       jsr 130cc <setVariable>
    37ca:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    37ce:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    37d2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    37d6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    37da:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    37de:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    37e0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    37e2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    37e4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    37e8:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    37ec:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    37ee:	|  |  |  |  |  |  |  |                                       jsr 127da <getValueType>
    37f4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    37f8:	|  |  |  |  |  |  |  |                                       tst.w d0
    37fa:	|  |  |  |  |  |  |  |                                   /-- bne.s 3802 <continueFunction+0x916>
    37fc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    37fe:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3da8 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    3802:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    3806:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3808:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    380c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    380e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3812:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3814:	|  |  |  |  |  |  |  |                                       jsr 130cc <setVariable>
    381a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    381e:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    3822:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3824:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    3826:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    382a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    382e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3832:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3834:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3836:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3838:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    383c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    383e:	|  |  |  |  |  |  |  |                                       jsr 130cc <setVariable>
    3844:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3848:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    384c:	|  |  |  |  |  |  |  |                                       move.l 19afe <globalVars>,d1
    3852:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3856:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3858:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    385a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    385c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3860:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    3864:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3866:	|  |  |  |  |  |  |  |                                       jsr 127da <getValueType>
    386c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3870:	|  |  |  |  |  |  |  |                                       tst.w d0
    3872:	|  |  |  |  |  |  |  |                                   /-- bne.s 387a <continueFunction+0x98e>
    3874:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3876:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 3da8 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    387a:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    387e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3880:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3884:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3886:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    388a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    388c:	|  |  |  |  |  |  |  |                                       jsr 130cc <setVariable>
    3892:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    3896:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    389a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    389c:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    389e:	|  |  |  |  |  |  |  |                                       movea.l 19afe <globalVars>,a0
    38a4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    38a8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    38aa:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    38ac:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    38ae:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    38b2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    38b4:	|  |  |  |  |  |  |  |                                       jsr 130cc <setVariable>
    38ba:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    38be:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    38c2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    38c6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    38ca:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    38ce:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    38d0:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    38d2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    38d4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    38d8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    38da:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    38dc:	|  |  |  |  |  |  |  |                                       jsr 12c94 <copyVariable>
    38e2:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    38e4:	|  |  |  |  |  |  |  |                                       tst.w d0
    38e6:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 3d70 <continueFunction+0xe84>
    38ea:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    38ec:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 3da8 <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    38f0:	|  |  |  |  |  |  |  |  |                                    move.l 19afe <globalVars>,d1
    38f6:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    38fa:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    38fc:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    38fe:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    3900:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    3904:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    3906:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    3908:	|  |  |  |  |  |  |  |  |                                    jsr 12c94 <copyVariable>
    390e:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    3910:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    3912:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 3d74 <continueFunction+0xe88>
    3916:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    3918:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 3da8 <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    391c:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    391e:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    3922:	|  |  |  |  |  |  |  |  |  |                                 movea.l 19afe <globalVars>,a0
    3928:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    392c:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    392e:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    3930:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    3932:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    3934:	|  |  |  |  |  |  |  |  |  |                                 jsr 12c94 <copyVariable>
    393a:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    393c:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    393e:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 3d78 <continueFunction+0xe8c>
    3942:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    3944:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 3da8 <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    3948:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    394a:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    394e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    3950:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    3954:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    3956:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    3958:	|  |  |  |  |  |  |  |  |  |  |                              jsr 12016 <addVarToStack>
    395e:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    3960:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    3962:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 3d7c <continueFunction+0xe90>
    3966:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    3968:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 3da8 <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    396c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    396e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    3972:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    3974:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    3978:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    397a:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    397c:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 1209c <addVarToStackQuick>
    3982:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    3984:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    3986:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 3d80 <continueFunction+0xe94>
    398a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    398c:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 3da8 <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    3990:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    3992:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3996:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    3998:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 12d1a <getBoolean>
    399e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    39a0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    39a2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    39a4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    39a6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    39a8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    39aa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    39ac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    39b0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    39b2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    39b6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    39b8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 130cc <setVariable>
    39be:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    39c2:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    39c6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    39c8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    39cc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    39ce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 12d1a <getBoolean>
    39d4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    39d6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    39d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 3d84 <continueFunction+0xe98>
				advanceNow = FALSE;
    39dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    39e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    39e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    39ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 3d84 <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    39ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    39f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    39f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    39fc:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 3d86 <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    3a00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    3a02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    3a06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    3a08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    3a0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    3a10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    3a12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 127da <getValueType>
    3a18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    3a1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    3a1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 3a26 <continueFunction+0xb3a>
    3a20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    3a22:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 3da8 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    3a26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    3a2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    3a2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    3a2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    3a30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    3a34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    3a36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    3a3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    3a3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 130cc <setVariable>
    3a42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    3a46:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 3d86 <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    3a4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    3a4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    3a52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 3d3c <continueFunction+0xe50>
    3a56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    3a58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    3a5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 3ad8 <continueFunction+0xbec>
    3a5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    3a60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    3a64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 3b22 <continueFunction+0xc36>
    3a68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    3a6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    3a6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 3a7c <continueFunction+0xb90>
    3a70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    3a72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    3a76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 3aaa <continueFunction+0xbbe>
    3a78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 3b22 <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    3a7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    3a7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    3a82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    3a86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    3a8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    3a8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    3a8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 12110 <addVariablesInSecond>
    3a94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    3a96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    3a98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    3a9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    3a9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1315e <trimStack>
    3aa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    3aa6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 3d50 <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    3aaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    3aac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    3ab0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    3ab4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    3ab8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    3aba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    3abc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 121ce <compareVariablesInSecond>
    3ac2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    3ac4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    3ac6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    3aca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    3acc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1315e <trimStack>
    3ad2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    3ad4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 3d50 <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    3ad8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    3ada:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    3ade:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3ae2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    3ae6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    3ae8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    3aea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 121ce <compareVariablesInSecond>
    3af0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    3af2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    3af4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    3af8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    3afa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1315e <trimStack>
    3b00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    3b02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3b06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    3b0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    3b0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    3b0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    3b10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    3b16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3b1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    3b1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 3d50 <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    3b22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    3b26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    3b2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    3b2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    3b30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    3b34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    3b36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 127da <getValueType>
    3b3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    3b40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    3b42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 3b4a <continueFunction+0xc5e>
    3b44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    3b46:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 3da8 <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    3b4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    3b4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    3b50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    3b52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    3b56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    3b5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    3b5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 127da <getValueType>
    3b62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    3b66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    3b68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 3b70 <continueFunction+0xc84>
    3b6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    3b6c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 3da8 <continueFunction+0xebc>
					trimStack (&fun -> stack);
    3b70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    3b72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    3b76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    3b78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1315e <trimStack>
    3b7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    3b80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    3b82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    3b86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    3b88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    3b8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 3d4e <continueFunction+0xe62>
    3b8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    3b90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    3b92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #15262,a0
    3b98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    3b9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (3b9e <continueFunction+0xcb2>,pc,d0.w)
    3b9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    3ba2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    3ba4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3bac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    3bae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3bb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3bbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    3bc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    3bce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3bd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3bd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3bd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3bda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1505c <__mulsi3>
    3be0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3be2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3be4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3be6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3bea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3bec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3bf0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3bf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 130cc <setVariable>
    3bf8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3bfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3d50 <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    3c00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3c04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3c08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    3c0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3c0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3c10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3c12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3c16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3c18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 130cc <setVariable>
    3c1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3c22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3d50 <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    3c26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3c2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3c2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3c30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3c32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15108 <__modsi3>
    3c38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3c3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3c3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3c3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3c42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3c44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3c48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3c4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 130cc <setVariable>
    3c50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3c54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3d50 <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    3c58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3c5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3c60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3c62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3c64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 150da <__divsi3>
    3c6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3c6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3c6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3c70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3c74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3c76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3c7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3c7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 130cc <setVariable>
    3c82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3c86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3d50 <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    3c8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3c8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3c92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3c94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    3c96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3c98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3c9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3c9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3c9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3ca2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3ca4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3ca8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3caa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 130cc <setVariable>
    3cb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3cb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 3d50 <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    3cb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3cbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3cc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3cc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    3cc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3cc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3cc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3cca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3ccc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3cd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3cd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3cd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3cd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 130cc <setVariable>
    3cde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3ce2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3d50 <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    3ce4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3ce8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3cec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3cee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    3cf0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3cf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3cf4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3cf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3cf8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3cfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3cfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3d02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3d04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 130cc <setVariable>
    3d0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3d0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3d50 <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    3d10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3d14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3d18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    3d1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3d1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3d20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3d22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3d24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3d28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3d2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3d2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3d30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 130cc <setVariable>
    3d36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3d3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 3d50 <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    3d3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 15aef <PutChar+0x97d>
    3d42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 14822 <KPrintF>
    3d48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    3d4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    3d4c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 3da8 <continueFunction+0xebc>
						break;
    3d4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    3d50:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 3d86 <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    3d52:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 15b07 <PutChar+0x995>
    3d58:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 14822 <KPrintF>
    3d5e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    3d60:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    3d62:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 3da8 <continueFunction+0xebc>
			break;
    3d64:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    3d66:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 3d86 <continueFunction+0xe9a>
			break;
    3d68:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    3d6a:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 3d86 <continueFunction+0xe9a>
			break;
    3d6c:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    3d6e:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 3d86 <continueFunction+0xe9a>
			break;
    3d70:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    3d72:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 3d86 <continueFunction+0xe9a>
			break;
    3d74:	|  |  |     |              \--|--|--|--|-------------------> nop
    3d76:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 3d86 <continueFunction+0xe9a>
			break;
    3d78:	|  |  |     |                 \--|--|--|-------------------> nop
    3d7a:	|  |  |     +--------------------|--|--|-------------------- bra.s 3d86 <continueFunction+0xe9a>
			break;
    3d7c:	|  |  |     |                    \--|--|-------------------> nop
    3d7e:	|  |  |     +-----------------------|--|-------------------- bra.s 3d86 <continueFunction+0xe9a>
			break;
    3d80:	|  |  |     |                       \--|-------------------> nop
    3d82:	|  |  |     +--------------------------|-------------------- bra.s 3d86 <continueFunction+0xe9a>
			break;
    3d84:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    3d86:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    3d8a:	+--|--|----------------------------------------------------- beq.s 3d9e <continueFunction+0xeb2>
    3d8c:	|  |  |                                                      movea.l 80(sp),a0
    3d90:	|  |  |                                                      move.l 36(a0),d0
    3d94:	|  |  |                                                      addq.l #1,d0
    3d96:	|  |  |                                                      movea.l 80(sp),a0
    3d9a:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    3d9e:	\--|--|----------------------------------------------------> tst.w 74(sp)
    3da2:	   |  \----------------------------------------------------- bne.w 2f14 <continueFunction+0x28>

	}
	return TRUE;
    3da6:	   |                                                         moveq #1,d0
}
    3da8:	   \-------------------------------------------------------> lea 76(sp),sp
    3dac:	                                                             rts

00003dae <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    3dae:	       lea -16(sp),sp
    3db2:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    3db4:	       move.l 24(sp),-(sp)
    3db8:	       jsr 4c46 <pauseFunction>
    3dbe:	       addq.l #4,sp
	if (fun -> stack) 
    3dc0:	       movea.l 24(sp),a0
    3dc4:	       move.l 24(a0),d0
    3dc8:	   /-- beq.s 3dde <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    3dca:	   |   pea 15b33 <PutChar+0x9c1>
    3dd0:	   |   pea 15b60 <PutChar+0x9ee>
    3dd6:	   |   jsr 14822 <KPrintF>
    3ddc:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    3dde:	   \-> movea.l 24(sp),a0
    3de2:	       move.l 4(a0),12(sp)
    3de8:	       move.l 19b50 <SysBase>,d0
    3dee:	       movea.l d0,a6
    3df0:	       movea.l 12(sp),a1
    3df4:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    3df8:	       clr.l 16(sp)
    3dfc:	   /-- bra.s 3e1c <finishFunction+0x6e>
    3dfe:	/--|-> movea.l 24(sp),a0
    3e02:	|  |   move.l 20(a0),d1
    3e06:	|  |   move.l 16(sp),d0
    3e0a:	|  |   lsl.l #3,d0
    3e0c:	|  |   add.l d1,d0
    3e0e:	|  |   move.l d0,-(sp)
    3e10:	|  |   jsr 12a28 <unlinkVar>
    3e16:	|  |   addq.l #4,sp
    3e18:	|  |   addq.l #1,16(sp)
    3e1c:	|  \-> movea.l 24(sp),a0
    3e20:	|      move.l 8(a0),d0
    3e24:	|      cmp.l 16(sp),d0
    3e28:	\----- bgt.s 3dfe <finishFunction+0x50>
	if( fun->numLocals > 0) {
    3e2a:	       movea.l 24(sp),a0
    3e2e:	       move.l 8(a0),d0
    3e32:	   /-- ble.s 3e4e <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    3e34:	   |   movea.l 24(sp),a0
    3e38:	   |   move.l 20(a0),8(sp)
    3e3e:	   |   move.l 19b50 <SysBase>,d0
    3e44:	   |   movea.l d0,a6
    3e46:	   |   movea.l 8(sp),a1
    3e4a:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    3e4e:	   \-> moveq #28,d0
    3e50:	       add.l 24(sp),d0
    3e54:	       move.l d0,-(sp)
    3e56:	       jsr 12a28 <unlinkVar>
    3e5c:	       addq.l #4,sp
	FreeVec(fun);
    3e5e:	       move.l 24(sp),4(sp)
    3e64:	       move.l 19b50 <SysBase>,d0
    3e6a:	       movea.l d0,a6
    3e6c:	       movea.l 4(sp),a1
    3e70:	       jsr -690(a6)
	fun = NULL;
    3e74:	       clr.l 24(sp)
}
    3e78:	       nop
    3e7a:	       movea.l (sp)+,a6
    3e7c:	       lea 16(sp),sp
    3e80:	       rts

00003e82 <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    3e82:	jsr 4ca2 <runSludge>
}
    3e88:	rts

00003e8a <initSludge>:

BOOL initSludge (char * filename) {
    3e8a:	             lea -296(sp),sp
    3e8e:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    3e92:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    3e96:	             jsr 8f5c <makeNullAnim>
    3e9c:	             move.l d0,19a60 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    3ea2:	             pea 19afa <gameVersion>
    3ea8:	             pea 15b70 <PutChar+0x9fe>
    3eae:	             pea 45 <_start+0x45>
    3eb2:	             pea 47 <_start+0x47>
    3eb6:	             move.l 336(sp),-(sp)
    3eba:	             jsr 48d6 <openAndVerify>
    3ec0:	             lea 20(sp),sp
    3ec4:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    3ec8:	         /-- bne.s 3ed0 <initSludge+0x46>
    3eca:	         |   clr.w d0
    3ecc:	/--------|-- bra.w 45f6 <initSludge+0x76c>
	if (FGetC (fp)) {
    3ed0:	|        \-> move.l 292(sp),288(sp)
    3ed6:	|            move.l 19b58 <DOSBase>,d0
    3edc:	|            movea.l d0,a6
    3ede:	|            move.l 288(sp),d1
    3ee2:	|            jsr -306(a6)
    3ee6:	|            move.l d0,284(sp)
    3eea:	|            move.l 284(sp),d0
    3eee:	|  /-------- beq.w 4094 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    3ef2:	|  |         move.l 292(sp),-(sp)
    3ef6:	|  |         jsr 6bc <get2bytes>
    3efc:	|  |         addq.l #4,sp
    3efe:	|  |         move.l d0,19b24 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    3f04:	|  |         move.l 19b24 <numBIFNames>,d0
    3f0a:	|  |         move.l d0,280(sp)
    3f0e:	|  |         clr.l 276(sp)
    3f12:	|  |         move.l 19b50 <SysBase>,d0
    3f18:	|  |         movea.l d0,a6
    3f1a:	|  |         move.l 280(sp),d0
    3f1e:	|  |         move.l 276(sp),d1
    3f22:	|  |         jsr -684(a6)
    3f26:	|  |         move.l d0,272(sp)
    3f2a:	|  |         move.l 272(sp),d0
    3f2e:	|  |         move.l d0,19ae0 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    3f34:	|  |         move.l 19ae0 <allBIFNames>,d0
    3f3a:	|  |     /-- bne.s 3f42 <initSludge+0xb8>
    3f3c:	|  |     |   clr.w d0
    3f3e:	+--|-----|-- bra.w 45f6 <initSludge+0x76c>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    3f42:	|  |     \-> clr.l 308(sp)
    3f46:	|  |     /-- bra.s 3f6c <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    3f48:	|  |  /--|-> move.l 19ae0 <allBIFNames>,d1
    3f4e:	|  |  |  |   move.l 308(sp),d0
    3f52:	|  |  |  |   add.l d0,d0
    3f54:	|  |  |  |   add.l d0,d0
    3f56:	|  |  |  |   movea.l d1,a2
    3f58:	|  |  |  |   adda.l d0,a2
    3f5a:	|  |  |  |   move.l 292(sp),-(sp)
    3f5e:	|  |  |  |   jsr b02 <readString>
    3f64:	|  |  |  |   addq.l #4,sp
    3f66:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    3f68:	|  |  |  |   addq.l #1,308(sp)
    3f6c:	|  |  |  \-> move.l 19b24 <numBIFNames>,d0
    3f72:	|  |  |      cmp.l 308(sp),d0
    3f76:	|  |  \----- bgt.s 3f48 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    3f78:	|  |         move.l 292(sp),-(sp)
    3f7c:	|  |         jsr 6bc <get2bytes>
    3f82:	|  |         addq.l #4,sp
    3f84:	|  |         move.l d0,19b30 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    3f8a:	|  |         move.l 19b30 <numUserFunc>,d0
    3f90:	|  |         move.l d0,268(sp)
    3f94:	|  |         clr.l 264(sp)
    3f98:	|  |         move.l 19b50 <SysBase>,d0
    3f9e:	|  |         movea.l d0,a6
    3fa0:	|  |         move.l 268(sp),d0
    3fa4:	|  |         move.l 264(sp),d1
    3fa8:	|  |         jsr -684(a6)
    3fac:	|  |         move.l d0,260(sp)
    3fb0:	|  |         move.l 260(sp),d0
    3fb4:	|  |         move.l d0,19aec <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    3fba:	|  |         move.l 19aec <allUserFunc>,d0
    3fc0:	|  |     /-- bne.s 3fc8 <initSludge+0x13e>
    3fc2:	|  |     |   clr.w d0
    3fc4:	+--|-----|-- bra.w 45f6 <initSludge+0x76c>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    3fc8:	|  |     \-> clr.l 304(sp)
    3fcc:	|  |     /-- bra.s 3ff2 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    3fce:	|  |  /--|-> move.l 19aec <allUserFunc>,d1
    3fd4:	|  |  |  |   move.l 304(sp),d0
    3fd8:	|  |  |  |   add.l d0,d0
    3fda:	|  |  |  |   add.l d0,d0
    3fdc:	|  |  |  |   movea.l d1,a2
    3fde:	|  |  |  |   adda.l d0,a2
    3fe0:	|  |  |  |   move.l 292(sp),-(sp)
    3fe4:	|  |  |  |   jsr b02 <readString>
    3fea:	|  |  |  |   addq.l #4,sp
    3fec:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    3fee:	|  |  |  |   addq.l #1,304(sp)
    3ff2:	|  |  |  \-> move.l 19b30 <numUserFunc>,d0
    3ff8:	|  |  |      cmp.l 304(sp),d0
    3ffc:	|  |  \----- bgt.s 3fce <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    3ffe:	|  |         move.l 19afa <gameVersion>,d0
    4004:	|  |         cmpi.l #258,d0
    400a:	|  +-------- ble.w 4094 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    400e:	|  |         move.l 292(sp),-(sp)
    4012:	|  |         jsr 6bc <get2bytes>
    4018:	|  |         addq.l #4,sp
    401a:	|  |         move.l d0,19b2c <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    4020:	|  |         move.l 19b2c <numResourceNames>,d0
    4026:	|  |         move.l d0,256(sp)
    402a:	|  |         clr.l 252(sp)
    402e:	|  |         move.l 19b50 <SysBase>,d0
    4034:	|  |         movea.l d0,a6
    4036:	|  |         move.l 256(sp),d0
    403a:	|  |         move.l 252(sp),d1
    403e:	|  |         jsr -684(a6)
    4042:	|  |         move.l d0,248(sp)
    4046:	|  |         move.l 248(sp),d0
    404a:	|  |         move.l d0,19ae4 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    4050:	|  |         move.l 19ae4 <allResourceNames>,d0
    4056:	|  |     /-- bne.s 405e <initSludge+0x1d4>
    4058:	|  |     |   clr.w d0
    405a:	+--|-----|-- bra.w 45f6 <initSludge+0x76c>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    405e:	|  |     \-> clr.l 300(sp)
    4062:	|  |     /-- bra.s 4088 <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    4064:	|  |  /--|-> move.l 19ae4 <allResourceNames>,d1
    406a:	|  |  |  |   move.l 300(sp),d0
    406e:	|  |  |  |   add.l d0,d0
    4070:	|  |  |  |   add.l d0,d0
    4072:	|  |  |  |   movea.l d1,a2
    4074:	|  |  |  |   adda.l d0,a2
    4076:	|  |  |  |   move.l 292(sp),-(sp)
    407a:	|  |  |  |   jsr b02 <readString>
    4080:	|  |  |  |   addq.l #4,sp
    4082:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    4084:	|  |  |  |   addq.l #1,300(sp)
    4088:	|  |  |  \-> move.l 19b2c <numResourceNames>,d0
    408e:	|  |  |      cmp.l 300(sp),d0
    4092:	|  |  \----- bgt.s 4064 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    4094:	|  \-------> move.l 292(sp),-(sp)
    4098:	|            jsr 6bc <get2bytes>
    409e:	|            addq.l #4,sp
    40a0:	|            move.l d0,19aa4 <winWidth>
	winHeight = get2bytes (fp);
    40a6:	|            move.l 292(sp),-(sp)
    40aa:	|            jsr 6bc <get2bytes>
    40b0:	|            addq.l #4,sp
    40b2:	|            move.l d0,19aa8 <winHeight>
	specialSettings = FGetC (fp);
    40b8:	|            move.l 292(sp),244(sp)
    40be:	|            move.l 19b58 <DOSBase>,d0
    40c4:	|            movea.l d0,a6
    40c6:	|            move.l 244(sp),d1
    40ca:	|            jsr -306(a6)
    40ce:	|            move.l d0,240(sp)
    40d2:	|            move.l 240(sp),d0
    40d6:	|            move.l d0,19b34 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    40dc:	|            move.l 292(sp),236(sp)
    40e2:	|            move.l 19b58 <DOSBase>,d0
    40e8:	|            movea.l d0,a6
    40ea:	|            move.l 236(sp),d1
    40ee:	|            jsr -306(a6)
    40f2:	|            move.l d0,232(sp)
    40f6:	|            move.l 232(sp),d0
    40fa:	|            move.l d0,-(sp)
    40fc:	|            pea 3e8 <encodeFilename+0xea>
    4100:	|            jsr 150da <__divsi3>
    4106:	|            addq.l #8,sp
    4108:	|            move.l d0,194e8 <desiredfps>

	FreeVec(readString (fp));
    410e:	|            move.l 292(sp),-(sp)
    4112:	|            jsr b02 <readString>
    4118:	|            addq.l #4,sp
    411a:	|            move.l d0,228(sp)
    411e:	|            move.l 19b50 <SysBase>,d0
    4124:	|            movea.l d0,a6
    4126:	|            movea.l 228(sp),a1
    412a:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    412e:	|            move.l 292(sp),224(sp)
    4134:	|            move.l #105202,220(sp)
    413c:	|            moveq #8,d0
    413e:	|            move.l d0,216(sp)
    4142:	|            moveq #1,d1
    4144:	|            move.l d1,212(sp)
    4148:	|            move.l 19b58 <DOSBase>,d0
    414e:	|            movea.l d0,a6
    4150:	|            move.l 224(sp),d1
    4154:	|            move.l 220(sp),d2
    4158:	|            move.l 216(sp),d3
    415c:	|            move.l 212(sp),d4
    4160:	|            jsr -324(a6)
    4164:	|            move.l d0,208(sp)
    4168:	|            move.l 208(sp),d0
    416c:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    4170:	|            moveq #1,d0
    4172:	|            cmp.l 204(sp),d0
    4176:	|        /-- beq.s 4186 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    4178:	|        |   pea 15ba9 <PutChar+0xa37>
    417e:	|        |   jsr 14822 <KPrintF>
    4184:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    4186:	|        \-> move.l 19afa <gameVersion>,d0
    418c:	|            cmpi.l #258,d0
    4192:	|        /-- ble.s 41a2 <initSludge+0x318>
    4194:	|        |   move.l 292(sp),-(sp)
    4198:	|        |   jsr b02 <readString>
    419e:	|        |   addq.l #4,sp
    41a0:	|     /--|-- bra.s 41b6 <initSludge+0x32c>
    41a2:	|     |  \-> pea 15bc7 <PutChar+0xa55>
    41a8:	|     |      pea 15bc7 <PutChar+0xa55>
    41ae:	|     |      jsr 11d06 <joinStrings>
    41b4:	|     |      addq.l #8,sp
    41b6:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    41ba:	|            move.l 19afa <gameVersion>,d0
    41c0:	|            cmpi.l #258,d0
    41c6:	|     /----- ble.s 41e8 <initSludge+0x35e>
    41c8:	|     |      move.l 292(sp),196(sp)
    41ce:	|     |      move.l 19b58 <DOSBase>,d0
    41d4:	|     |      movea.l d0,a6
    41d6:	|     |      move.l 196(sp),d1
    41da:	|     |      jsr -306(a6)
    41de:	|     |      move.l d0,192(sp)
    41e2:	|     |      move.l 192(sp),d0
    41e6:	|     |  /-- bra.s 41ea <initSludge+0x360>
    41e8:	|     \--|-> moveq #0,d0
    41ea:	|        \-> move.l d0,19c84 <gameSettings+0x4>
	makeLanguageTable (fp);
    41f0:	|            move.l 292(sp),-(sp)
    41f4:	|            jsr 116bc <makeLanguageTable>
    41fa:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    41fc:	|            move.l 19afa <gameVersion>,d0
    4202:	|            cmpi.l #261,d0
    4208:	|        /-- ble.s 4256 <initSludge+0x3cc>
	{
		FGetC(fp);
    420a:	|        |   move.l 292(sp),188(sp)
    4210:	|        |   move.l 19b58 <DOSBase>,d0
    4216:	|        |   movea.l d0,a6
    4218:	|        |   move.l 188(sp),d1
    421c:	|        |   jsr -306(a6)
    4220:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    4224:	|        |   move.l 292(sp),180(sp)
    422a:	|        |   move.l 19b58 <DOSBase>,d0
    4230:	|        |   movea.l d0,a6
    4232:	|        |   move.l 180(sp),d1
    4236:	|        |   jsr -306(a6)
    423a:	|        |   move.l d0,176(sp)
		getFloat (fp);
    423e:	|        |   move.l 292(sp),-(sp)
    4242:	|        |   jsr 7d8 <getFloat>
    4248:	|        |   addq.l #4,sp
		getFloat (fp);
    424a:	|        |   move.l 292(sp),-(sp)
    424e:	|        |   jsr 7d8 <getFloat>
    4254:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    4256:	|        \-> move.l 292(sp),-(sp)
    425a:	|            jsr b02 <readString>
    4260:	|            addq.l #4,sp
    4262:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    4266:	|            pea 15bc8 <PutChar+0xa56>
    426c:	|            move.l 176(sp),-(sp)
    4270:	|            jsr 11c86 <strcmp>
    4276:	|            addq.l #8,sp
    4278:	|            tst.l d0
    427a:	|        /-- beq.s 4282 <initSludge+0x3f8>
		return FALSE;
    427c:	|        |   clr.w d0
    427e:	+--------|-- bra.w 45f6 <initSludge+0x76c>
	}
	FreeVec( checker);
    4282:	|        \-> move.l 172(sp),168(sp)
    4288:	|            move.l 19b50 <SysBase>,d0
    428e:	|            movea.l d0,a6
    4290:	|            movea.l 168(sp),a1
    4294:	|            jsr -690(a6)
	checker = NULL;
    4298:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    429c:	|            move.l 292(sp),164(sp)
    42a2:	|            move.l 19b58 <DOSBase>,d0
    42a8:	|            movea.l d0,a6
    42aa:	|            move.l 164(sp),d1
    42ae:	|            jsr -306(a6)
    42b2:	|            move.l d0,160(sp)
    42b6:	|            move.l 160(sp),d0
    42ba:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    42be:	|            moveq #0,d0
    42c0:	|            move.b 159(sp),d0
    42c4:	|            moveq #1,d1
    42c6:	|            and.l d1,d0
    42c8:	|        /-- beq.s 4320 <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    42ca:	|        |   move.l 19b58 <DOSBase>,d0
    42d0:	|        |   movea.l d0,a6
    42d2:	|        |   jsr -60(a6)
    42d6:	|        |   move.l d0,38(sp)
    42da:	|        |   move.l 38(sp),d0
    42de:	|        |   move.l d0,34(sp)
    42e2:	|        |   move.l #89040,30(sp)
    42ea:	|        |   moveq #54,d0
    42ec:	|        |   move.l d0,26(sp)
    42f0:	|        |   move.l 19b58 <DOSBase>,d0
    42f6:	|        |   movea.l d0,a6
    42f8:	|        |   move.l 34(sp),d1
    42fc:	|        |   move.l 30(sp),d2
    4300:	|        |   move.l 26(sp),d3
    4304:	|        |   jsr -48(a6)
    4308:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    430c:	|        |   pea 15c07 <PutChar+0xa95>
    4312:	|        |   jsr 14822 <KPrintF>
    4318:	|        |   addq.l #4,sp
		return FALSE;
    431a:	|        |   clr.w d0
    431c:	+--------|-- bra.w 45f6 <initSludge+0x76c>
	}

	numGlobals = get2bytes (fp);
    4320:	|        \-> move.l 292(sp),-(sp)
    4324:	|            jsr 6bc <get2bytes>
    432a:	|            addq.l #4,sp
    432c:	|            move.l d0,19b28 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    4332:	|            move.l 19b28 <numGlobals>,d0
    4338:	|            lsl.l #3,d0
    433a:	|            move.l d0,154(sp)
    433e:	|            clr.l 150(sp)
    4342:	|            move.l 19b50 <SysBase>,d0
    4348:	|            movea.l d0,a6
    434a:	|            move.l 154(sp),d0
    434e:	|            move.l 150(sp),d1
    4352:	|            jsr -684(a6)
    4356:	|            move.l d0,146(sp)
    435a:	|            move.l 146(sp),d0
    435e:	|            move.l d0,19afe <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    4364:	|            move.l 19afe <globalVars>,d0
    436a:	|        /-- bne.s 4388 <initSludge+0x4fe>
    436c:	|        |   move.l 19b28 <numGlobals>,d0
    4372:	|        +-- ble.s 4388 <initSludge+0x4fe>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    4374:	|        |   pea 15c3f <PutChar+0xacd>
    437a:	|        |   jsr 14822 <KPrintF>
    4380:	|        |   addq.l #4,sp
		return FALSE;
    4382:	|        |   clr.w d0
    4384:	+--------|-- bra.w 45f6 <initSludge+0x76c>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    4388:	|        \-> clr.l 312(sp)
    438c:	|        /-- bra.s 43a4 <initSludge+0x51a>
    438e:	|     /--|-> move.l 19afe <globalVars>,d1
    4394:	|     |  |   move.l 312(sp),d0
    4398:	|     |  |   lsl.l #3,d0
    439a:	|     |  |   movea.l d1,a0
    439c:	|     |  |   adda.l d0,a0
    439e:	|     |  |   clr.l (a0)
    43a0:	|     |  |   addq.l #1,312(sp)
    43a4:	|     |  \-> move.l 19b28 <numGlobals>,d0
    43aa:	|     |      cmp.l 312(sp),d0
    43ae:	|     \----- bgt.s 438e <initSludge+0x504>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    43b0:	|            move.l 19c84 <gameSettings+0x4>,d0
    43b6:	|            clr.l -(sp)
    43b8:	|            move.l d0,-(sp)
    43ba:	|            move.l 300(sp),-(sp)
    43be:	|            jsr 538c <setFileIndices>
    43c4:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    43c8:	|            pea 1 <_start+0x1>
    43cc:	|            jsr 5046 <getNumberedString>
    43d2:	|            addq.l #4,sp
    43d4:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    43d8:	|            move.l 142(sp),-(sp)
    43dc:	|            jsr 2fe <encodeFilename>
    43e2:	|            addq.l #4,sp
    43e4:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    43e8:	|            move.l 142(sp),134(sp)
    43ee:	|            move.l 19b50 <SysBase>,d0
    43f4:	|            movea.l d0,a6
    43f6:	|            movea.l 134(sp),a1
    43fa:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    43fe:	|            move.l 138(sp),130(sp)
    4404:	|            move.l 19b58 <DOSBase>,d0
    440a:	|            movea.l d0,a6
    440c:	|            move.l 130(sp),d1
    4410:	|            jsr -120(a6)
    4414:	|            move.l d0,126(sp)
    4418:	|            move.l 126(sp),d0
    441c:	|            move.l d0,296(sp)
	if(lock == 0) {
    4420:	|        /-- bne.s 444e <initSludge+0x5c4>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    4422:	|        |   move.l 138(sp),122(sp)
    4428:	|        |   moveq #-2,d1
    442a:	|        |   move.l d1,118(sp)
    442e:	|        |   move.l 19b58 <DOSBase>,d0
    4434:	|        |   movea.l d0,a6
    4436:	|        |   move.l 122(sp),d1
    443a:	|        |   move.l 118(sp),d2
    443e:	|        |   jsr -84(a6)
    4442:	|        |   move.l d0,114(sp)
    4446:	|        |   move.l 114(sp),d0
    444a:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    444e:	|        \-> move.l 296(sp),110(sp)
    4454:	|            move.l 19b58 <DOSBase>,d0
    445a:	|            movea.l d0,a6
    445c:	|            move.l 110(sp),d1
    4460:	|            jsr -126(a6)
    4464:	|            move.l d0,106(sp)
    4468:	|            move.l 106(sp),d0
    446c:	|        /-- bne.s 44c8 <initSludge+0x63e>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    446e:	|        |   move.l 138(sp),-(sp)
    4472:	|        |   pea 15c72 <PutChar+0xb00>
    4478:	|        |   jsr 14822 <KPrintF>
    447e:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    4480:	|        |   move.l 19b58 <DOSBase>,d0
    4486:	|        |   movea.l d0,a6
    4488:	|        |   jsr -60(a6)
    448c:	|        |   move.l d0,58(sp)
    4490:	|        |   move.l 58(sp),d0
    4494:	|        |   move.l d0,54(sp)
    4498:	|        |   move.l #89247,50(sp)
    44a0:	|        |   moveq #40,d0
    44a2:	|        |   move.l d0,46(sp)
    44a6:	|        |   move.l 19b58 <DOSBase>,d0
    44ac:	|        |   movea.l d0,a6
    44ae:	|        |   move.l 54(sp),d1
    44b2:	|        |   move.l 50(sp),d2
    44b6:	|        |   move.l 46(sp),d3
    44ba:	|        |   jsr -48(a6)
    44be:	|        |   move.l d0,42(sp)
		return FALSE;
    44c2:	|        |   clr.w d0
    44c4:	+--------|-- bra.w 45f6 <initSludge+0x76c>
	}

	FreeVec(gameName);
    44c8:	|        \-> move.l 138(sp),102(sp)
    44ce:	|            move.l 19b50 <SysBase>,d0
    44d4:	|            movea.l d0,a6
    44d6:	|            movea.l 102(sp),a1
    44da:	|            jsr -690(a6)

	readIniFile (filename);
    44de:	|            move.l 320(sp),-(sp)
    44e2:	|            jsr 117f0 <readIniFile>
    44e8:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    44ea:	|            jsr 115c2 <getLanguageForFileB>
    44f0:	|            move.l d0,194d6 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    44f6:	|            move.l 194d6 <languageNum>,d0
    44fc:	|        /-- bpl.s 450c <initSludge+0x682>
    44fe:	|        |   pea 15cc8 <PutChar+0xb56>
    4504:	|        |   jsr 14822 <KPrintF>
    450a:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    450c:	|        \-> move.l 194d6 <languageNum>,d0
    4512:	|            move.l d0,d1
    4514:	|            move.l 19c84 <gameSettings+0x4>,d0
    451a:	|            move.l d1,-(sp)
    451c:	|            move.l d0,-(sp)
    451e:	|            clr.l -(sp)
    4520:	|            jsr 538c <setFileIndices>
    4526:	|            lea 12(sp),sp

	if (dataFol[0]) {
    452a:	|            movea.l 200(sp),a0
    452e:	|            move.b (a0),d0
    4530:	|     /----- beq.w 45da <initSludge+0x750>
		char *dataFolder = encodeFilename(dataFol);
    4534:	|     |      move.l 200(sp),-(sp)
    4538:	|     |      jsr 2fe <encodeFilename>
    453e:	|     |      addq.l #4,sp
    4540:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    4544:	|     |      move.l 98(sp),94(sp)
    454a:	|     |      move.l 19b58 <DOSBase>,d0
    4550:	|     |      movea.l d0,a6
    4552:	|     |      move.l 94(sp),d1
    4556:	|     |      jsr -120(a6)
    455a:	|     |      move.l d0,90(sp)
    455e:	|     |      move.l 90(sp),d0
    4562:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    4566:	|     |  /-- bne.s 4594 <initSludge+0x70a>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    4568:	|     |  |   move.l 98(sp),86(sp)
    456e:	|     |  |   moveq #-2,d1
    4570:	|     |  |   move.l d1,82(sp)
    4574:	|     |  |   move.l 19b58 <DOSBase>,d0
    457a:	|     |  |   movea.l d0,a6
    457c:	|     |  |   move.l 86(sp),d1
    4580:	|     |  |   move.l 82(sp),d2
    4584:	|     |  |   jsr -84(a6)
    4588:	|     |  |   move.l d0,78(sp)
    458c:	|     |  |   move.l 78(sp),d0
    4590:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    4594:	|     |  \-> move.l 296(sp),74(sp)
    459a:	|     |      move.l 19b58 <DOSBase>,d0
    45a0:	|     |      movea.l d0,a6
    45a2:	|     |      move.l 74(sp),d1
    45a6:	|     |      jsr -126(a6)
    45aa:	|     |      move.l d0,70(sp)
    45ae:	|     |      move.l 70(sp),d0
    45b2:	|     |  /-- bne.s 45c4 <initSludge+0x73a>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    45b4:	|     |  |   move.l 19b58 <DOSBase>,d0
    45ba:	|     |  |   movea.l d0,a6
    45bc:	|     |  |   jsr -60(a6)
    45c0:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    45c4:	|     |  \-> move.l 98(sp),62(sp)
    45ca:	|     |      move.l 19b50 <SysBase>,d0
    45d0:	|     |      movea.l d0,a6
    45d2:	|     |      movea.l 62(sp),a1
    45d6:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    45da:	|     \----> movea.l 19aa8 <winHeight>,a0
    45e0:	|            lea -15(a0),a0
    45e4:	|            move.l a0,d0
    45e6:	|            move.l d0,-(sp)
    45e8:	|            pea a <_start+0xa>
    45ec:	|            jsr 5dbe <positionStatus>
    45f2:	|            addq.l #8,sp

	return TRUE;
    45f4:	|            moveq #1,d0
}
    45f6:	\----------> movem.l (sp)+,d2-d4/a2/a6
    45fa:	             lea 296(sp),sp
    45fe:	             rts

00004600 <killSpeechTimers>:

void killSpeechTimers () {
    4600:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    4602:	          move.l 19ae8 <allRunningFunctions>,(sp)

	while (thisFunction) {
    4608:	   /----- bra.s 4634 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    460a:	/--|----> movea.l (sp),a0
    460c:	|  |      move.b 56(a0),d0
    4610:	|  |  /-- bne.s 462e <killSpeechTimers+0x2e>
    4612:	|  |  |   movea.l (sp),a0
    4614:	|  |  |   move.w 50(a0),d0
    4618:	|  |  +-- beq.s 462e <killSpeechTimers+0x2e>
    461a:	|  |  |   movea.l (sp),a0
    461c:	|  |  |   move.l 12(a0),d0
    4620:	|  |  +-- beq.s 462e <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    4622:	|  |  |   movea.l (sp),a0
    4624:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    4628:	|  |  |   movea.l (sp),a0
    462a:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    462e:	|  |  \-> movea.l (sp),a0
    4630:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4634:	|  \----> tst.l (sp)
    4636:	\-------- bne.s 460a <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    4638:	          jsr 62fc <killAllSpeech>
}
    463e:	          nop
    4640:	          addq.l #4,sp
    4642:	          rts

00004644 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    4644:	             lea -52(sp),sp
    4648:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    464a:	             movea.l 60(sp),a0
    464e:	             move.l (a0),d0
    4650:	             move.l d0,-(sp)
    4652:	             jsr 52cc <openSubSlice>
    4658:	             addq.l #4,sp
    465a:	             tst.w d0
    465c:	         /-- bne.s 4664 <loadFunctionCode+0x20>
    465e:	         |   clr.w d0
    4660:	/--------|-- bra.w 482e <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    4664:	|        \-> move.l 19b38 <bigDataFile>,44(sp)
    466c:	|            move.l 19b58 <DOSBase>,d0
    4672:	|            movea.l d0,a6
    4674:	|            move.l 44(sp),d1
    4678:	|            jsr -306(a6)
    467c:	|            move.l d0,40(sp)
    4680:	|            move.l 40(sp),d0
    4684:	|            move.l d0,d0
    4686:	|            movea.l 60(sp),a0
    468a:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    468e:	|            move.l 19b38 <bigDataFile>,d0
    4694:	|            move.l d0,-(sp)
    4696:	|            jsr 6bc <get2bytes>
    469c:	|            addq.l #4,sp
    469e:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    46a2:	|            move.l 19b38 <bigDataFile>,d0
    46a8:	|            move.l d0,-(sp)
    46aa:	|            jsr 6bc <get2bytes>
    46b0:	|            addq.l #4,sp
    46b2:	|            movea.l 60(sp),a0
    46b6:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    46ba:	|            move.l 19b38 <bigDataFile>,d0
    46c0:	|            move.l d0,-(sp)
    46c2:	|            jsr 6bc <get2bytes>
    46c8:	|            addq.l #4,sp
    46ca:	|            movea.l 60(sp),a0
    46ce:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    46d2:	|            move.l 36(sp),d0
    46d6:	|            lsl.l #3,d0
    46d8:	|            move.l d0,32(sp)
    46dc:	|            clr.l 28(sp)
    46e0:	|            move.l 19b50 <SysBase>,d0
    46e6:	|            movea.l d0,a6
    46e8:	|            move.l 32(sp),d0
    46ec:	|            move.l 28(sp),d1
    46f0:	|            jsr -684(a6)
    46f4:	|            move.l d0,24(sp)
    46f8:	|            move.l 24(sp),d0
    46fc:	|            movea.l 60(sp),a0
    4700:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    4704:	|            movea.l 60(sp),a0
    4708:	|            move.l 4(a0),d0
    470c:	|        /-- bne.s 4722 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    470e:	|        |   pea 15cf3 <PutChar+0xb81>
    4714:	|        |   jsr 14822 <KPrintF>
    471a:	|        |   addq.l #4,sp
		return FALSE;
    471c:	|        |   clr.w d0
    471e:	+--------|-- bra.w 482e <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    4722:	|        \-> clr.l 52(sp)
    4726:	|        /-- bra.s 4788 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    4728:	|     /--|-> move.l 19b38 <bigDataFile>,8(sp)
    4730:	|     |  |   move.l 19b58 <DOSBase>,d0
    4736:	|     |  |   movea.l d0,a6
    4738:	|     |  |   move.l 8(sp),d1
    473c:	|     |  |   jsr -306(a6)
    4740:	|     |  |   move.l d0,4(sp)
    4744:	|     |  |   move.l 4(sp),d1
    4748:	|     |  |   movea.l 60(sp),a0
    474c:	|     |  |   movea.l 4(a0),a0
    4750:	|     |  |   move.l 52(sp),d0
    4754:	|     |  |   lsl.l #3,d0
    4756:	|     |  |   adda.l d0,a0
    4758:	|     |  |   move.l d1,d0
    475a:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    475c:	|     |  |   move.l 19b38 <bigDataFile>,d0
    4762:	|     |  |   move.l d0,-(sp)
    4764:	|     |  |   jsr 6bc <get2bytes>
    476a:	|     |  |   addq.l #4,sp
    476c:	|     |  |   move.l d0,d1
    476e:	|     |  |   movea.l 60(sp),a0
    4772:	|     |  |   movea.l 4(a0),a0
    4776:	|     |  |   move.l 52(sp),d0
    477a:	|     |  |   lsl.l #3,d0
    477c:	|     |  |   adda.l d0,a0
    477e:	|     |  |   move.l d1,d0
    4780:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    4784:	|     |  |   addq.l #1,52(sp)
    4788:	|     |  \-> move.l 52(sp),d0
    478c:	|     |      cmp.l 36(sp),d0
    4790:	|     \----- bcs.s 4728 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    4792:	|            jsr 503c <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    4798:	|            movea.l 60(sp),a0
    479c:	|            move.l 8(a0),d0
    47a0:	|  /-------- ble.w 4824 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    47a4:	|  |         movea.l 60(sp),a0
    47a8:	|  |         move.l 8(a0),d0
    47ac:	|  |         lsl.l #3,d0
    47ae:	|  |         move.l d0,20(sp)
    47b2:	|  |         clr.l 16(sp)
    47b6:	|  |         move.l 19b50 <SysBase>,d0
    47bc:	|  |         movea.l d0,a6
    47be:	|  |         move.l 20(sp),d0
    47c2:	|  |         move.l 16(sp),d1
    47c6:	|  |         jsr -684(a6)
    47ca:	|  |         move.l d0,12(sp)
    47ce:	|  |         move.l 12(sp),d0
    47d2:	|  |         movea.l 60(sp),a0
    47d6:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    47da:	|  |         movea.l 60(sp),a0
    47de:	|  |         move.l 20(a0),d0
    47e2:	|  |     /-- bne.s 47f6 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    47e4:	|  |     |   pea 15cf3 <PutChar+0xb81>
    47ea:	|  |     |   jsr 14822 <KPrintF>
    47f0:	|  |     |   addq.l #4,sp
			return FALSE;
    47f2:	|  |     |   clr.w d0
    47f4:	+--|-----|-- bra.s 482e <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    47f6:	|  |     \-> clr.l 48(sp)
    47fa:	|  |     /-- bra.s 4814 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    47fc:	|  |  /--|-> movea.l 60(sp),a0
    4800:	|  |  |  |   move.l 20(a0),d1
    4804:	|  |  |  |   move.l 48(sp),d0
    4808:	|  |  |  |   lsl.l #3,d0
    480a:	|  |  |  |   movea.l d1,a0
    480c:	|  |  |  |   adda.l d0,a0
    480e:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    4810:	|  |  |  |   addq.l #1,48(sp)
    4814:	|  |  |  \-> movea.l 60(sp),a0
    4818:	|  |  |      move.l 8(a0),d0
    481c:	|  |  |      cmp.l 48(sp),d0
    4820:	|  |  \----- bgt.s 47fc <loadFunctionCode+0x1b8>
    4822:	|  |     /-- bra.s 482c <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    4824:	|  \-----|-> movea.l 60(sp),a0
    4828:	|        |   clr.l 8(a0)
	}
	return TRUE;
    482c:	|        \-> moveq #1,d0
}
    482e:	\----------> movea.l (sp)+,a6
    4830:	             lea 52(sp),sp
    4834:	             rts

00004836 <loadHandlers>:

void loadHandlers (BPTR fp) {
    4836:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    4838:	movea.l 194d2 <currentEvents>,a2
    483e:	move.l 8(sp),-(sp)
    4842:	jsr 6bc <get2bytes>
    4848:	addq.l #4,sp
    484a:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    484c:	movea.l 194d2 <currentEvents>,a2
    4852:	move.l 8(sp),-(sp)
    4856:	jsr 6bc <get2bytes>
    485c:	addq.l #4,sp
    485e:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    4862:	movea.l 194d2 <currentEvents>,a2
    4868:	move.l 8(sp),-(sp)
    486c:	jsr 6bc <get2bytes>
    4872:	addq.l #4,sp
    4874:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    4878:	movea.l 194d2 <currentEvents>,a2
    487e:	move.l 8(sp),-(sp)
    4882:	jsr 6bc <get2bytes>
    4888:	addq.l #4,sp
    488a:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    488e:	movea.l 194d2 <currentEvents>,a2
    4894:	move.l 8(sp),-(sp)
    4898:	jsr 6bc <get2bytes>
    489e:	addq.l #4,sp
    48a0:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    48a4:	movea.l 194d2 <currentEvents>,a2
    48aa:	move.l 8(sp),-(sp)
    48ae:	jsr 6bc <get2bytes>
    48b4:	addq.l #4,sp
    48b6:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    48ba:	movea.l 194d2 <currentEvents>,a2
    48c0:	move.l 8(sp),-(sp)
    48c4:	jsr 6bc <get2bytes>
    48ca:	addq.l #4,sp
    48cc:	move.l d0,24(a2)
}
    48d0:	nop
    48d2:	movea.l (sp)+,a2
    48d4:	rts

000048d6 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    48d6:	       lea -312(sp),sp
    48da:	       movem.l d2-d3/a6,-(sp)
    48de:	       move.l 332(sp),d1
    48e2:	       move.l 336(sp),d0
    48e6:	       move.b d1,d1
    48e8:	       move.b d1,16(sp)
    48ec:	       move.b d0,d0
    48ee:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    48f2:	       move.l 328(sp),318(sp)
    48f8:	       move.l #1005,314(sp)
    4900:	       move.l 19b58 <DOSBase>,d0
    4906:	       movea.l d0,a6
    4908:	       move.l 318(sp),d1
    490c:	       move.l 314(sp),d2
    4910:	       jsr -30(a6)
    4914:	       move.l d0,310(sp)
    4918:	       move.l 310(sp),d0
    491c:	       move.l d0,306(sp)

	if (! fp) {
    4920:	   /-- bne.s 497c <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    4922:	   |   move.l 19b58 <DOSBase>,d0
    4928:	   |   movea.l d0,a6
    492a:	   |   jsr -60(a6)
    492e:	   |   move.l d0,154(sp)
    4932:	   |   move.l 154(sp),d0
    4936:	   |   move.l d0,150(sp)
    493a:	   |   move.l #89372,146(sp)
    4942:	   |   moveq #31,d0
    4944:	   |   move.l d0,142(sp)
    4948:	   |   move.l 19b58 <DOSBase>,d0
    494e:	   |   movea.l d0,a6
    4950:	   |   move.l 150(sp),d1
    4954:	   |   move.l 146(sp),d2
    4958:	   |   move.l 142(sp),d3
    495c:	   |   jsr -48(a6)
    4960:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    4964:	   |   move.l 328(sp),-(sp)
    4968:	   |   pea 15d3c <PutChar+0xbca>
    496e:	   |   jsr 14822 <KPrintF>
    4974:	   |   addq.l #8,sp
		return NULL;
    4976:	   |   moveq #0,d0
    4978:	/--|-- bra.w 4c3c <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    497c:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    4980:	|      move.l 306(sp),302(sp)
    4986:	|      move.l 19b58 <DOSBase>,d0
    498c:	|      movea.l d0,a6
    498e:	|      move.l 302(sp),d1
    4992:	|      jsr -306(a6)
    4996:	|      move.l d0,298(sp)
    499a:	|      move.l 298(sp),d0
    499e:	|      moveq #83,d1
    49a0:	|      cmp.l d0,d1
    49a2:	|  /-- beq.s 49aa <openAndVerify+0xd4>
    49a4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    49aa:	|  \-> move.l 306(sp),294(sp)
    49b0:	|      move.l 19b58 <DOSBase>,d0
    49b6:	|      movea.l d0,a6
    49b8:	|      move.l 294(sp),d1
    49bc:	|      jsr -306(a6)
    49c0:	|      move.l d0,290(sp)
    49c4:	|      move.l 290(sp),d0
    49c8:	|      moveq #76,d1
    49ca:	|      cmp.l d0,d1
    49cc:	|  /-- beq.s 49d4 <openAndVerify+0xfe>
    49ce:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    49d4:	|  \-> move.l 306(sp),286(sp)
    49da:	|      move.l 19b58 <DOSBase>,d0
    49e0:	|      movea.l d0,a6
    49e2:	|      move.l 286(sp),d1
    49e6:	|      jsr -306(a6)
    49ea:	|      move.l d0,282(sp)
    49ee:	|      move.l 282(sp),d0
    49f2:	|      moveq #85,d1
    49f4:	|      cmp.l d0,d1
    49f6:	|  /-- beq.s 49fe <openAndVerify+0x128>
    49f8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    49fe:	|  \-> move.l 306(sp),278(sp)
    4a04:	|      move.l 19b58 <DOSBase>,d0
    4a0a:	|      movea.l d0,a6
    4a0c:	|      move.l 278(sp),d1
    4a10:	|      jsr -306(a6)
    4a14:	|      move.l d0,274(sp)
    4a18:	|      move.l 274(sp),d0
    4a1c:	|      moveq #68,d1
    4a1e:	|      cmp.l d0,d1
    4a20:	|  /-- beq.s 4a28 <openAndVerify+0x152>
    4a22:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    4a28:	|  \-> move.l 306(sp),270(sp)
    4a2e:	|      move.l 19b58 <DOSBase>,d0
    4a34:	|      movea.l d0,a6
    4a36:	|      move.l 270(sp),d1
    4a3a:	|      jsr -306(a6)
    4a3e:	|      move.l d0,266(sp)
    4a42:	|      move.l 266(sp),d1
    4a46:	|      move.b 16(sp),d0
    4a4a:	|      ext.w d0
    4a4c:	|      movea.w d0,a0
    4a4e:	|      cmpa.l d1,a0
    4a50:	|  /-- beq.s 4a58 <openAndVerify+0x182>
    4a52:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    4a58:	|  \-> move.l 306(sp),262(sp)
    4a5e:	|      move.l 19b58 <DOSBase>,d0
    4a64:	|      movea.l d0,a6
    4a66:	|      move.l 262(sp),d1
    4a6a:	|      jsr -306(a6)
    4a6e:	|      move.l d0,258(sp)
    4a72:	|      move.l 258(sp),d1
    4a76:	|      move.b 14(sp),d0
    4a7a:	|      ext.w d0
    4a7c:	|      movea.w d0,a0
    4a7e:	|      cmpa.l d1,a0
    4a80:	|  /-- beq.s 4a88 <openAndVerify+0x1b2>
    4a82:	|  |   move.w #1,322(sp)
	if (headerBad) {
    4a88:	|  \-> tst.w 322(sp)
    4a8c:	|  /-- beq.s 4ae4 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    4a8e:	|  |   move.l 19b58 <DOSBase>,d0
    4a94:	|  |   movea.l d0,a6
    4a96:	|  |   jsr -60(a6)
    4a9a:	|  |   move.l d0,174(sp)
    4a9e:	|  |   move.l 174(sp),d0
    4aa2:	|  |   move.l d0,170(sp)
    4aa6:	|  |   move.l #89435,166(sp)
    4aae:	|  |   moveq #31,d0
    4ab0:	|  |   move.l d0,162(sp)
    4ab4:	|  |   move.l 19b58 <DOSBase>,d0
    4aba:	|  |   movea.l d0,a6
    4abc:	|  |   move.l 170(sp),d1
    4ac0:	|  |   move.l 166(sp),d2
    4ac4:	|  |   move.l 162(sp),d3
    4ac8:	|  |   jsr -48(a6)
    4acc:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    4ad0:	|  |   pea 15d5b <PutChar+0xbe9>
    4ad6:	|  |   jsr 14822 <KPrintF>
    4adc:	|  |   addq.l #4,sp
		return NULL;
    4ade:	|  |   moveq #0,d0
    4ae0:	+--|-- bra.w 4c3c <openAndVerify+0x366>
	}
	FGetC (fp);
    4ae4:	|  \-> move.l 306(sp),254(sp)
    4aea:	|      move.l 19b58 <DOSBase>,d0
    4af0:	|      movea.l d0,a6
    4af2:	|      move.l 254(sp),d1
    4af6:	|      jsr -306(a6)
    4afa:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    4afe:	|      nop
    4b00:	|  /-> move.l 306(sp),246(sp)
    4b06:	|  |   move.l 19b58 <DOSBase>,d0
    4b0c:	|  |   movea.l d0,a6
    4b0e:	|  |   move.l 246(sp),d1
    4b12:	|  |   jsr -306(a6)
    4b16:	|  |   move.l d0,242(sp)
    4b1a:	|  |   move.l 242(sp),d0
    4b1e:	|  \-- bne.s 4b00 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    4b20:	|      move.l 306(sp),238(sp)
    4b26:	|      move.l 19b58 <DOSBase>,d0
    4b2c:	|      movea.l d0,a6
    4b2e:	|      move.l 238(sp),d1
    4b32:	|      jsr -306(a6)
    4b36:	|      move.l d0,234(sp)
    4b3a:	|      move.l 234(sp),d0
    4b3e:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    4b42:	|      move.l 306(sp),226(sp)
    4b48:	|      move.l 19b58 <DOSBase>,d0
    4b4e:	|      movea.l d0,a6
    4b50:	|      move.l 226(sp),d1
    4b54:	|      jsr -306(a6)
    4b58:	|      move.l d0,222(sp)
    4b5c:	|      move.l 222(sp),d0
    4b60:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    4b64:	|      move.l 230(sp),d0
    4b68:	|      lsl.l #8,d0
    4b6a:	|      add.l 218(sp),d0
    4b6e:	|      movea.l 344(sp),a0
    4b72:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    4b74:	|      movea.l 344(sp),a0
    4b78:	|      move.l (a0),d0
    4b7a:	|      cmpi.l #514,d0
    4b80:	|  /-- ble.s 4bd6 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    4b82:	|  |   move.l 19b58 <DOSBase>,d0
    4b88:	|  |   movea.l d0,a6
    4b8a:	|  |   jsr -60(a6)
    4b8e:	|  |   move.l d0,194(sp)
    4b92:	|  |   move.l 194(sp),d0
    4b96:	|  |   move.l d0,190(sp)
    4b9a:	|  |   move.l #89462,186(sp)
    4ba2:	|  |   moveq #100,d1
    4ba4:	|  |   move.l d1,182(sp)
    4ba8:	|  |   move.l 19b58 <DOSBase>,d0
    4bae:	|  |   movea.l d0,a6
    4bb0:	|  |   move.l 190(sp),d1
    4bb4:	|  |   move.l 186(sp),d2
    4bb8:	|  |   move.l 182(sp),d3
    4bbc:	|  |   jsr -48(a6)
    4bc0:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    4bc4:	|  |   pea 15d76 <PutChar+0xc04>
    4bca:	|  |   jsr 14822 <KPrintF>
    4bd0:	|  |   addq.l #4,sp
		return NULL;
    4bd2:	|  |   moveq #0,d0
    4bd4:	+--|-- bra.s 4c3c <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    4bd6:	|  \-> movea.l 344(sp),a0
    4bda:	|      move.l (a0),d0
    4bdc:	|      cmpi.l #257,d0
    4be2:	|  /-- bgt.s 4c38 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    4be4:	|  |   move.l 19b58 <DOSBase>,d0
    4bea:	|  |   movea.l d0,a6
    4bec:	|  |   jsr -60(a6)
    4bf0:	|  |   move.l d0,214(sp)
    4bf4:	|  |   move.l 214(sp),d0
    4bf8:	|  |   move.l d0,210(sp)
    4bfc:	|  |   move.l #89531,206(sp)
    4c04:	|  |   moveq #100,d0
    4c06:	|  |   move.l d0,202(sp)
    4c0a:	|  |   move.l 19b58 <DOSBase>,d0
    4c10:	|  |   movea.l d0,a6
    4c12:	|  |   move.l 210(sp),d1
    4c16:	|  |   move.l 206(sp),d2
    4c1a:	|  |   move.l 202(sp),d3
    4c1e:	|  |   jsr -48(a6)
    4c22:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    4c26:	|  |   pea 15dbb <PutChar+0xc49>
    4c2c:	|  |   jsr 14822 <KPrintF>
    4c32:	|  |   addq.l #4,sp
		return NULL;
    4c34:	|  |   moveq #0,d0
    4c36:	+--|-- bra.s 4c3c <openAndVerify+0x366>
	}
	return fp;
    4c38:	|  \-> move.l 306(sp),d0
}
    4c3c:	\----> movem.l (sp)+,d2-d3/a6
    4c40:	       lea 312(sp),sp
    4c44:	       rts

00004c46 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    4c46:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    4c48:	          move.l #105192,(sp)
	while (* huntAndDestroy) {
    4c4e:	   /----- bra.s 4c7a <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    4c50:	/--|----> movea.l (sp),a0
    4c52:	|  |      move.l (a0),d0
    4c54:	|  |      cmp.l 8(sp),d0
    4c58:	|  |  /-- bne.s 4c70 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    4c5a:	|  |  |   movea.l (sp),a0
    4c5c:	|  |  |   movea.l (a0),a0
    4c5e:	|  |  |   move.l 44(a0),d0
    4c62:	|  |  |   movea.l (sp),a0
    4c64:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    4c66:	|  |  |   movea.l 8(sp),a0
    4c6a:	|  |  |   clr.l 44(a0)
    4c6e:	|  +--|-- bra.s 4c7a <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    4c70:	|  |  \-> movea.l (sp),a0
    4c72:	|  |      move.l (a0),d0
    4c74:	|  |      moveq #44,d1
    4c76:	|  |      add.l d0,d1
    4c78:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    4c7a:	|  \----> movea.l (sp),a0
    4c7c:	|         move.l (a0),d0
    4c7e:	\-------- bne.s 4c50 <pauseFunction+0xa>
		}
	}
}
    4c80:	          nop
    4c82:	          nop
    4c84:	          addq.l #4,sp
    4c86:	          rts

00004c88 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    4c88:	move.l 19ae8 <allRunningFunctions>,d0
    4c8e:	movea.l 4(sp),a0
    4c92:	move.l d0,44(a0)
	allRunningFunctions = fun;
    4c96:	move.l 4(sp),19ae8 <allRunningFunctions>
}
    4c9e:	nop
    4ca0:	rts

00004ca2 <runSludge>:

BOOL runSludge () {
    4ca2:	                   lea -12(sp),sp
    4ca6:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    4ca8:	                   move.l 19ae8 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    4cb0:	      /----------- bra.s 4d2c <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    4cb2:	   /--|----------> movea.l 12(sp),a0
    4cb6:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    4cbc:	   |  |            movea.l 12(sp),a0
    4cc0:	   |  |            move.b 56(a0),d0
    4cc4:	   |  |  /-------- bne.s 4d26 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    4cc6:	   |  |  |         movea.l 12(sp),a0
    4cca:	   |  |  |         move.l 12(a0),d0
    4cce:	   |  |  |  /----- beq.s 4cf8 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    4cd0:	   |  |  |  |      movea.l 12(sp),a0
    4cd4:	   |  |  |  |      move.l 12(a0),d0
    4cd8:	   |  |  |  |  /-- bpl.s 4ce4 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    4cda:	   |  |  |  |  |   movea.l 12(sp),a0
    4cde:	   |  |  |  |  |   clr.l 12(a0)
    4ce2:	   |  |  +--|--|-- bra.s 4d26 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    4ce4:	   |  |  |  |  \-> movea.l 12(sp),a0
    4ce8:	   |  |  |  |      move.l 12(a0),d0
    4cec:	   |  |  |  |      subq.l #1,d0
    4cee:	   |  |  |  |      movea.l 12(sp),a0
    4cf2:	   |  |  |  |      move.l d0,12(a0)
    4cf6:	   |  |  +--|----- bra.s 4d26 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    4cf8:	   |  |  |  \----> movea.l 12(sp),a0
    4cfc:	   |  |  |         move.w 50(a0),d0
    4d00:	   |  |  |     /-- beq.s 4d10 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    4d02:	   |  |  |     |   movea.l 12(sp),a0
    4d06:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    4d0a:	   |  |  |     |   jsr 62fc <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    4d10:	   |  |  |     \-> move.l 12(sp),-(sp)
    4d14:	   |  |  |         jsr 2eec <continueFunction>
    4d1a:	   |  |  |         addq.l #4,sp
    4d1c:	   |  |  |         tst.w d0
    4d1e:	   |  |  +-------- bne.s 4d26 <runSludge+0x84>
					return FALSE;
    4d20:	   |  |  |         clr.w d0
    4d22:	/--|--|--|-------- bra.w 4db2 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    4d26:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    4d2c:	|  |  \----------> tst.l 12(sp)
    4d30:	|  \-------------- bne.s 4cb2 <runSludge+0x10>
	}

	if (loadNow) {
    4d32:	|                  move.l 19b1c <loadNow>,d0
    4d38:	|        /-------- beq.s 4db0 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    4d3a:	|        |         movea.l 19b1c <loadNow>,a0
    4d40:	|        |         move.b (a0),d0
    4d42:	|        |         cmpi.b #58,d0
    4d46:	|        |  /----- bne.s 4d7a <runSludge+0xd8>
			saveGame (loadNow + 1);
    4d48:	|        |  |      move.l 19b1c <loadNow>,d0
    4d4e:	|        |  |      addq.l #1,d0
    4d50:	|        |  |      move.l d0,-(sp)
    4d52:	|        |  |      jsr aa1c <saveGame>
    4d58:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    4d5a:	|        |  |      movea.l 19c6e <saverFunc>,a0
    4d60:	|        |  |      lea 28(a0),a0
    4d64:	|        |  |      pea 1 <_start+0x1>
    4d68:	|        |  |      pea 1 <_start+0x1>
    4d6c:	|        |  |      move.l a0,-(sp)
    4d6e:	|        |  |      jsr 130cc <setVariable>
    4d74:	|        |  |      lea 12(sp),sp
    4d78:	|        |  |  /-- bra.s 4d92 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    4d7a:	|        |  \--|-> move.l 19b1c <loadNow>,d0
    4d80:	|        |     |   move.l d0,-(sp)
    4d82:	|        |     |   jsr a564 <loadGame>
    4d88:	|        |     |   addq.l #4,sp
    4d8a:	|        |     |   tst.w d0
    4d8c:	|        |     +-- bne.s 4d92 <runSludge+0xf0>
    4d8e:	|        |     |   clr.w d0
    4d90:	+--------|-----|-- bra.s 4db2 <runSludge+0x110>
		}
		FreeVec(loadNow);
    4d92:	|        |     \-> move.l 19b1c <loadNow>,8(sp)
    4d9a:	|        |         move.l 19b50 <SysBase>,d0
    4da0:	|        |         movea.l d0,a6
    4da2:	|        |         movea.l 8(sp),a1
    4da6:	|        |         jsr -690(a6)
		loadNow = NULL;
    4daa:	|        |         clr.l 19b1c <loadNow>
	}

	return TRUE;
    4db0:	|        \-------> moveq #1,d0
}
    4db2:	\----------------> movea.l (sp)+,a6
    4db4:	                   lea 12(sp),sp
    4db8:	                   rts

00004dba <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    4dba:	movea.l 194d2 <currentEvents>,a0
    4dc0:	move.l (a0),d0
    4dc2:	move.l 4(sp),-(sp)
    4dc6:	move.l d0,-(sp)
    4dc8:	jsr 8d0 <put2bytes>
    4dce:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    4dd0:	movea.l 194d2 <currentEvents>,a0
    4dd6:	move.l 4(a0),d0
    4dda:	move.l 4(sp),-(sp)
    4dde:	move.l d0,-(sp)
    4de0:	jsr 8d0 <put2bytes>
    4de6:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    4de8:	movea.l 194d2 <currentEvents>,a0
    4dee:	move.l 8(a0),d0
    4df2:	move.l 4(sp),-(sp)
    4df6:	move.l d0,-(sp)
    4df8:	jsr 8d0 <put2bytes>
    4dfe:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    4e00:	movea.l 194d2 <currentEvents>,a0
    4e06:	move.l 12(a0),d0
    4e0a:	move.l 4(sp),-(sp)
    4e0e:	move.l d0,-(sp)
    4e10:	jsr 8d0 <put2bytes>
    4e16:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    4e18:	movea.l 194d2 <currentEvents>,a0
    4e1e:	move.l 16(a0),d0
    4e22:	move.l 4(sp),-(sp)
    4e26:	move.l d0,-(sp)
    4e28:	jsr 8d0 <put2bytes>
    4e2e:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    4e30:	movea.l 194d2 <currentEvents>,a0
    4e36:	move.l 20(a0),d0
    4e3a:	move.l 4(sp),-(sp)
    4e3e:	move.l d0,-(sp)
    4e40:	jsr 8d0 <put2bytes>
    4e46:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    4e48:	movea.l 194d2 <currentEvents>,a0
    4e4e:	move.l 24(a0),d0
    4e52:	move.l 4(sp),-(sp)
    4e56:	move.l d0,-(sp)
    4e58:	jsr 8d0 <put2bytes>
    4e5e:	addq.l #8,sp
}
    4e60:	nop
    4e62:	rts

00004e64 <sludgeDisplay>:

void sludgeDisplay () {					
    4e64:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4e66:	move.l #14675968,(sp)
	//custom->color[0] = 0xf00;
	CstDrawBackdrop();
    4e6c:	jsr 11d0 <CstDrawBackdrop>
	CstRestoreScreen();
    4e72:	jsr 15ca <CstRestoreScreen>
	drawPeople();
    4e78:	jsr 8326 <drawPeople>
	CstSwapBuffer();
    4e7e:	jsr 2054 <CstSwapBuffer>
	//custom->color[0] = 0x000;
}
    4e84:	nop
    4e86:	addq.l #4,sp
    4e88:	rts

00004e8a <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    4e8a:	      /-- bra.s 4eaa <stackSetByIndex+0x20>
		vS = vS->next;
    4e8c:	/-----|-> movea.l 4(sp),a0
    4e90:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    4e96:	|     +-- bne.s 4eaa <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    4e98:	|     |   pea 15e02 <PutChar+0xc90>
    4e9e:	|     |   jsr 14822 <KPrintF>
    4ea4:	|     |   addq.l #4,sp
			return FALSE;
    4ea6:	|     |   clr.w d0
    4ea8:	|  /--|-- bra.s 4ecc <stackSetByIndex+0x42>
	while (theIndex--) {
    4eaa:	|  |  \-> move.l 8(sp),d0
    4eae:	|  |      move.l d0,d1
    4eb0:	|  |      subq.l #1,d1
    4eb2:	|  |      move.l d1,8(sp)
    4eb6:	|  |      tst.l d0
    4eb8:	\--|----- bne.s 4e8c <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    4eba:	   |      move.l 4(sp),d0
    4ebe:	   |      move.l d0,-(sp)
    4ec0:	   |      move.l 16(sp),-(sp)
    4ec4:	   |      jsr 12c94 <copyVariable>
    4eca:	   |      addq.l #8,sp
}
    4ecc:	   \----> rts

00004ece <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    4ece:	             lea -24(sp),sp
    4ed2:	             move.l a6,-(sp)
    4ed4:	             move.l 48(sp),d0
    4ed8:	             move.w d0,d0
    4eda:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    4ede:	             moveq #58,d0
    4ee0:	             move.l d0,24(sp)
    4ee4:	             clr.l 20(sp)
    4ee8:	             move.l 19b50 <SysBase>,d0
    4eee:	             movea.l d0,a6
    4ef0:	             move.l 24(sp),d0
    4ef4:	             move.l 20(sp),d1
    4ef8:	             jsr -684(a6)
    4efc:	             move.l d0,16(sp)
    4f00:	             move.l 16(sp),d0
    4f04:	             move.l d0,12(sp)
	if(!newFunc) {
    4f08:	         /-- bne.s 4f1e <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    4f0a:	         |   pea 15e1b <PutChar+0xca9>
    4f10:	         |   jsr 14822 <KPrintF>
    4f16:	         |   addq.l #4,sp
		return 0;
    4f18:	         |   moveq #0,d0
    4f1a:	/--------|-- bra.w 5034 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    4f1e:	|        \-> move.l 32(sp),d0
    4f22:	|            movea.l 12(sp),a0
    4f26:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    4f28:	|            move.l 12(sp),-(sp)
    4f2c:	|            jsr 4644 <loadFunctionCode>
    4f32:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    4f34:	|            movea.l 12(sp),a0
    4f38:	|            move.l 16(a0),d1
    4f3c:	|            move.l 36(sp),d0
    4f40:	|            cmp.l d1,d0
    4f42:	|        /-- beq.s 4f58 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    4f44:	|        |   pea 15e44 <PutChar+0xcd2>
    4f4a:	|        |   jsr 14822 <KPrintF>
    4f50:	|        |   addq.l #4,sp
		return NULL; 
    4f52:	|        |   moveq #0,d0
    4f54:	+--------|-- bra.w 5034 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    4f58:	|        \-> movea.l 12(sp),a0
    4f5c:	|            move.l 16(a0),d1
    4f60:	|            movea.l 12(sp),a0
    4f64:	|            move.l 8(a0),d0
    4f68:	|            cmp.l d1,d0
    4f6a:	|  /-------- bge.s 4fd4 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    4f6c:	|  |         pea 15e60 <PutChar+0xcee>
    4f72:	|  |         jsr 14822 <KPrintF>
    4f78:	|  |         addq.l #4,sp
		return NULL; 
    4f7a:	|  |         moveq #0,d0
    4f7c:	+--|-------- bra.w 5034 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    4f80:	|  |  /----> movea.l 44(sp),a0
    4f84:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    4f88:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    4f8c:	|  |  |      movea.l 44(sp),a0
    4f90:	|  |  |      move.l (a0),d0
    4f92:	|  |  |  /-- bne.s 4fa8 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    4f94:	|  |  |  |   pea 15e8a <PutChar+0xd18>
    4f9a:	|  |  |  |   jsr 14822 <KPrintF>
    4fa0:	|  |  |  |   addq.l #4,sp
			return NULL;
    4fa2:	|  |  |  |   moveq #0,d0
    4fa4:	+--|--|--|-- bra.w 5034 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    4fa8:	|  |  |  \-> movea.l 12(sp),a0
    4fac:	|  |  |      move.l 20(a0),d1
    4fb0:	|  |  |      move.l 36(sp),d0
    4fb4:	|  |  |      lsl.l #3,d0
    4fb6:	|  |  |      add.l d0,d1
    4fb8:	|  |  |      move.l 8(sp),d0
    4fbc:	|  |  |      move.l d1,-(sp)
    4fbe:	|  |  |      move.l d0,-(sp)
    4fc0:	|  |  |      jsr 12c94 <copyVariable>
    4fc6:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    4fc8:	|  |  |      move.l 44(sp),-(sp)
    4fcc:	|  |  |      jsr 1315e <trimStack>
    4fd2:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    4fd4:	|  \--|----> tst.l 36(sp)
    4fd8:	|     \----- bne.s 4f80 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    4fda:	|            movea.l 12(sp),a0
    4fde:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    4fe2:	|            movea.l 12(sp),a0
    4fe6:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    4fea:	|            movea.l 12(sp),a0
    4fee:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    4ff4:	|            movea.l 12(sp),a0
    4ff8:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    4ffe:	|            movea.l 12(sp),a0
    5002:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    5006:	|            movea.l 12(sp),a0
    500a:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    500e:	|            movea.l 12(sp),a0
    5012:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    5016:	|            movea.l 12(sp),a0
    501a:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    501e:	|            movea.l 12(sp),a0
    5022:	|            clr.l 28(a0)

	restartFunction (newFunc);
    5026:	|            move.l 12(sp),-(sp)
    502a:	|            jsr 4c88 <restartFunction>
    5030:	|            addq.l #4,sp
	return 1;
    5032:	|            moveq #1,d0
}
    5034:	\----------> movea.l (sp)+,a6
    5036:	             lea 24(sp),sp
    503a:	             rts

0000503c <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    503c:	clr.w 194de <sliceBusy>
}
    5042:	nop
    5044:	rts

00005046 <getNumberedString>:

char * getNumberedString (int value) {
    5046:	       lea -56(sp),sp
    504a:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    504e:	       move.w 194de <sliceBusy>,d0
    5054:	   /-- beq.s 509e <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    5056:	   |   move.l 19b58 <DOSBase>,d0
    505c:	   |   movea.l d0,a6
    505e:	   |   jsr -60(a6)
    5062:	   |   move.l d0,28(sp)
    5066:	   |   move.l 28(sp),d0
    506a:	   |   move.l d0,24(sp)
    506e:	   |   move.l #89813,20(sp)
    5076:	   |   moveq #76,d0
    5078:	   |   move.l d0,16(sp)
    507c:	   |   move.l 19b58 <DOSBase>,d0
    5082:	   |   movea.l d0,a6
    5084:	   |   move.l 24(sp),d1
    5088:	   |   move.l 20(sp),d2
    508c:	   |   move.l 16(sp),d3
    5090:	   |   jsr -48(a6)
    5094:	   |   move.l d0,12(sp)
		return NULL;
    5098:	   |   moveq #0,d0
    509a:	/--|-- bra.w 513a <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    509e:	|  \-> move.l 19b38 <bigDataFile>,64(sp)
    50a6:	|      move.l 72(sp),d0
    50aa:	|      add.l d0,d0
    50ac:	|      add.l d0,d0
    50ae:	|      move.l d0,d1
    50b0:	|      move.l 19b44 <startOfTextIndex>,d0
    50b6:	|      add.l d1,d0
    50b8:	|      move.l d0,60(sp)
    50bc:	|      moveq #-1,d0
    50be:	|      move.l d0,56(sp)
    50c2:	|      move.l 19b58 <DOSBase>,d0
    50c8:	|      movea.l d0,a6
    50ca:	|      move.l 64(sp),d1
    50ce:	|      move.l 60(sp),d2
    50d2:	|      move.l 56(sp),d3
    50d6:	|      jsr -66(a6)
    50da:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    50de:	|      move.l 19b38 <bigDataFile>,d0
    50e4:	|      move.l d0,-(sp)
    50e6:	|      jsr 718 <get4bytes>
    50ec:	|      addq.l #4,sp
    50ee:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    50f2:	|      move.l 19b38 <bigDataFile>,48(sp)
    50fa:	|      move.l 72(sp),44(sp)
    5100:	|      moveq #-1,d0
    5102:	|      move.l d0,40(sp)
    5106:	|      move.l 19b58 <DOSBase>,d0
    510c:	|      movea.l d0,a6
    510e:	|      move.l 48(sp),d1
    5112:	|      move.l 44(sp),d2
    5116:	|      move.l 40(sp),d3
    511a:	|      jsr -66(a6)
    511e:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    5122:	|      move.l 19b38 <bigDataFile>,d0
    5128:	|      move.l d0,-(sp)
    512a:	|      jsr b02 <readString>
    5130:	|      addq.l #4,sp
    5132:	|      move.l d0,32(sp)
	
	return s;
    5136:	|      move.l 32(sp),d0
}
    513a:	\----> movem.l (sp)+,d2-d3/a6
    513e:	       lea 56(sp),sp
    5142:	       rts

00005144 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    5144:	       lea -32(sp),sp
    5148:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    514c:	       move.w 194de <sliceBusy>,d0
    5152:	   /-- beq.s 516e <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5154:	   |   pea 15f22 <PutChar+0xdb0>
    515a:	   |   pea 15f40 <PutChar+0xdce>
    5160:	   |   jsr 14822 <KPrintF>
    5166:	   |   addq.l #8,sp
		return 0;
    5168:	   |   moveq #0,d0
    516a:	/--|-- bra.w 5202 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    516e:	|  \-> move.l 19b38 <bigDataFile>,40(sp)
    5176:	|      move.l 48(sp),d0
    517a:	|      add.l d0,d0
    517c:	|      add.l d0,d0
    517e:	|      move.l d0,d1
    5180:	|      move.l 19b40 <startOfDataIndex>,d0
    5186:	|      add.l d1,d0
    5188:	|      move.l d0,36(sp)
    518c:	|      moveq #-1,d0
    518e:	|      move.l d0,32(sp)
    5192:	|      move.l 19b58 <DOSBase>,d0
    5198:	|      movea.l d0,a6
    519a:	|      move.l 40(sp),d1
    519e:	|      move.l 36(sp),d2
    51a2:	|      move.l 32(sp),d3
    51a6:	|      jsr -66(a6)
    51aa:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    51ae:	|      move.l 19b38 <bigDataFile>,24(sp)
    51b6:	|      move.l 19b38 <bigDataFile>,d0
    51bc:	|      move.l d0,-(sp)
    51be:	|      jsr 718 <get4bytes>
    51c4:	|      addq.l #4,sp
    51c6:	|      move.l d0,20(sp)
    51ca:	|      clr.l 16(sp)
    51ce:	|      move.l 19b58 <DOSBase>,d0
    51d4:	|      movea.l d0,a6
    51d6:	|      move.l 24(sp),d1
    51da:	|      move.l 20(sp),d2
    51de:	|      move.l 16(sp),d3
    51e2:	|      jsr -66(a6)
    51e6:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    51ea:	|      move.w #1,194de <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    51f2:	|      move.l 19b38 <bigDataFile>,d0
    51f8:	|      move.l d0,-(sp)
    51fa:	|      jsr 718 <get4bytes>
    5200:	|      addq.l #4,sp
}
    5202:	\----> movem.l (sp)+,d2-d3/a6
    5206:	       lea 32(sp),sp
    520a:	       rts

0000520c <openObjectSlice>:

BOOL openObjectSlice (int num) {
    520c:	       lea -32(sp),sp
    5210:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    5214:	       move.w 194de <sliceBusy>,d0
    521a:	   /-- beq.s 5236 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    521c:	   |   pea 15f22 <PutChar+0xdb0>
    5222:	   |   pea 15f40 <PutChar+0xdce>
    5228:	   |   jsr 14822 <KPrintF>
    522e:	   |   addq.l #8,sp
        return FALSE;
    5230:	   |   clr.w d0
    5232:	/--|-- bra.w 52c2 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    5236:	|  \-> move.l 19b38 <bigDataFile>,40(sp)
    523e:	|      move.l 48(sp),d0
    5242:	|      add.l d0,d0
    5244:	|      add.l d0,d0
    5246:	|      move.l d0,d1
    5248:	|      move.l 19b4c <startOfObjectIndex>,d0
    524e:	|      add.l d1,d0
    5250:	|      move.l d0,36(sp)
    5254:	|      moveq #-1,d0
    5256:	|      move.l d0,32(sp)
    525a:	|      move.l 19b58 <DOSBase>,d0
    5260:	|      movea.l d0,a6
    5262:	|      move.l 40(sp),d1
    5266:	|      move.l 36(sp),d2
    526a:	|      move.l 32(sp),d3
    526e:	|      jsr -66(a6)
    5272:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    5276:	|      move.l 19b38 <bigDataFile>,24(sp)
    527e:	|      move.l 19b38 <bigDataFile>,d0
    5284:	|      move.l d0,-(sp)
    5286:	|      jsr 718 <get4bytes>
    528c:	|      addq.l #4,sp
    528e:	|      move.l d0,20(sp)
    5292:	|      moveq #-1,d0
    5294:	|      move.l d0,16(sp)
    5298:	|      move.l 19b58 <DOSBase>,d0
    529e:	|      movea.l d0,a6
    52a0:	|      move.l 24(sp),d1
    52a4:	|      move.l 20(sp),d2
    52a8:	|      move.l 16(sp),d3
    52ac:	|      jsr -66(a6)
    52b0:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    52b4:	|      move.w #1,194de <sliceBusy>
    52bc:	|      move.w 194de <sliceBusy>,d0
}
    52c2:	\----> movem.l (sp)+,d2-d3/a6
    52c6:	       lea 32(sp),sp
    52ca:	       rts

000052cc <openSubSlice>:

BOOL openSubSlice (int num) {
    52cc:	       lea -32(sp),sp
    52d0:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    52d4:	       move.w 194de <sliceBusy>,d0
    52da:	   /-- beq.s 52f6 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    52dc:	   |   pea 15f22 <PutChar+0xdb0>
    52e2:	   |   pea 15f40 <PutChar+0xdce>
    52e8:	   |   jsr 14822 <KPrintF>
    52ee:	   |   addq.l #8,sp
		return FALSE;
    52f0:	   |   clr.w d0
    52f2:	/--|-- bra.w 5382 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    52f6:	|  \-> move.l 19b38 <bigDataFile>,40(sp)
    52fe:	|      move.l 48(sp),d0
    5302:	|      add.l d0,d0
    5304:	|      add.l d0,d0
    5306:	|      move.l d0,d1
    5308:	|      move.l 19b48 <startOfSubIndex>,d0
    530e:	|      add.l d1,d0
    5310:	|      move.l d0,36(sp)
    5314:	|      moveq #-1,d0
    5316:	|      move.l d0,32(sp)
    531a:	|      move.l 19b58 <DOSBase>,d0
    5320:	|      movea.l d0,a6
    5322:	|      move.l 40(sp),d1
    5326:	|      move.l 36(sp),d2
    532a:	|      move.l 32(sp),d3
    532e:	|      jsr -66(a6)
    5332:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    5336:	|      move.l 19b38 <bigDataFile>,24(sp)
    533e:	|      move.l 19b38 <bigDataFile>,d0
    5344:	|      move.l d0,-(sp)
    5346:	|      jsr 718 <get4bytes>
    534c:	|      addq.l #4,sp
    534e:	|      move.l d0,20(sp)
    5352:	|      moveq #-1,d0
    5354:	|      move.l d0,16(sp)
    5358:	|      move.l 19b58 <DOSBase>,d0
    535e:	|      movea.l d0,a6
    5360:	|      move.l 24(sp),d1
    5364:	|      move.l 20(sp),d2
    5368:	|      move.l 16(sp),d3
    536c:	|      jsr -66(a6)
    5370:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    5374:	|      move.w #1,194de <sliceBusy>
    537c:	|      move.w 194de <sliceBusy>,d0
}
    5382:	\----> movem.l (sp)+,d2-d3/a6
    5386:	       lea 32(sp),sp
    538a:	       rts

0000538c <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    538c:	       lea -180(sp),sp
    5390:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    5394:	       tst.l 196(sp)
    5398:	/----- beq.s 53d8 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    539a:	|      move.l 196(sp),19b38 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    53a2:	|      move.l 196(sp),168(sp)
    53a8:	|      clr.l 164(sp)
    53ac:	|      clr.l 160(sp)
    53b0:	|      move.l 19b58 <DOSBase>,d0
    53b6:	|      movea.l d0,a6
    53b8:	|      move.l 168(sp),d1
    53bc:	|      move.l 164(sp),d2
    53c0:	|      move.l 160(sp),d3
    53c4:	|      jsr -66(a6)
    53c8:	|      move.l d0,156(sp)
    53cc:	|      move.l 156(sp),d0
    53d0:	|      move.l d0,19b3c <startIndex>
    53d6:	|  /-- bra.s 5412 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    53d8:	\--|-> move.l 19b38 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    53e0:	   |   move.l 196(sp),184(sp)
    53e6:	   |   move.l 19b3c <startIndex>,d0
    53ec:	   |   move.l d0,180(sp)
    53f0:	   |   moveq #-1,d0
    53f2:	   |   move.l d0,176(sp)
    53f6:	   |   move.l 19b58 <DOSBase>,d0
    53fc:	   |   movea.l d0,a6
    53fe:	   |   move.l 184(sp),d1
    5402:	   |   move.l 180(sp),d2
    5406:	   |   move.l 176(sp),d3
    540a:	   |   jsr -66(a6)
    540e:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    5412:	   \-> clr.w 194de <sliceBusy>

	if (skipBefore > numLanguages) {
    5418:	       move.l 204(sp),d0
    541c:	       cmp.l 200(sp),d0
    5420:	   /-- bls.s 5434 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    5422:	   |   pea 15f5a <PutChar+0xde8>
    5428:	   |   jsr 14822 <KPrintF>
    542e:	   |   addq.l #4,sp
		skipBefore = 0;
    5430:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    5434:	   \-> move.l 200(sp),d0
    5438:	       sub.l 204(sp),d0
    543c:	       move.l d0,188(sp)
	while (skipBefore) {
    5440:	   /-- bra.s 547e <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    5442:	/--|-> move.l 196(sp),24(sp)
    5448:	|  |   move.l 196(sp),-(sp)
    544c:	|  |   jsr 718 <get4bytes>
    5452:	|  |   addq.l #4,sp
    5454:	|  |   move.l d0,20(sp)
    5458:	|  |   moveq #-1,d0
    545a:	|  |   move.l d0,16(sp)
    545e:	|  |   move.l 19b58 <DOSBase>,d0
    5464:	|  |   movea.l d0,a6
    5466:	|  |   move.l 24(sp),d1
    546a:	|  |   move.l 20(sp),d2
    546e:	|  |   move.l 16(sp),d3
    5472:	|  |   jsr -66(a6)
    5476:	|  |   move.l d0,12(sp)
		skipBefore --;
    547a:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    547e:	|  \-> tst.l 204(sp)
    5482:	\----- bne.s 5442 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    5484:	       move.l 196(sp),152(sp)
    548a:	       clr.l 148(sp)
    548e:	       clr.l 144(sp)
    5492:	       move.l 19b58 <DOSBase>,d0
    5498:	       movea.l d0,a6
    549a:	       move.l 152(sp),d1
    549e:	       move.l 148(sp),d2
    54a2:	       move.l 144(sp),d3
    54a6:	       jsr -66(a6)
    54aa:	       move.l d0,140(sp)
    54ae:	       move.l 140(sp),d0
    54b2:	       addq.l #4,d0
    54b4:	       move.l d0,19b44 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    54ba:	       move.l 196(sp),136(sp)
    54c0:	       move.l 196(sp),-(sp)
    54c4:	       jsr 718 <get4bytes>
    54ca:	       addq.l #4,sp
    54cc:	       move.l d0,132(sp)
    54d0:	       moveq #-1,d0
    54d2:	       move.l d0,128(sp)
    54d6:	       move.l 19b58 <DOSBase>,d0
    54dc:	       movea.l d0,a6
    54de:	       move.l 136(sp),d1
    54e2:	       move.l 132(sp),d2
    54e6:	       move.l 128(sp),d3
    54ea:	       jsr -66(a6)
    54ee:	       move.l d0,124(sp)

	while (skipAfter) {
    54f2:	   /-- bra.s 5530 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    54f4:	/--|-> move.l 196(sp),40(sp)
    54fa:	|  |   move.l 196(sp),-(sp)
    54fe:	|  |   jsr 718 <get4bytes>
    5504:	|  |   addq.l #4,sp
    5506:	|  |   move.l d0,36(sp)
    550a:	|  |   moveq #-1,d0
    550c:	|  |   move.l d0,32(sp)
    5510:	|  |   move.l 19b58 <DOSBase>,d0
    5516:	|  |   movea.l d0,a6
    5518:	|  |   move.l 40(sp),d1
    551c:	|  |   move.l 36(sp),d2
    5520:	|  |   move.l 32(sp),d3
    5524:	|  |   jsr -66(a6)
    5528:	|  |   move.l d0,28(sp)
		skipAfter --;
    552c:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    5530:	|  \-> tst.l 188(sp)
    5534:	\----- bne.s 54f4 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    5536:	       move.l 196(sp),120(sp)
    553c:	       clr.l 116(sp)
    5540:	       clr.l 112(sp)
    5544:	       move.l 19b58 <DOSBase>,d0
    554a:	       movea.l d0,a6
    554c:	       move.l 120(sp),d1
    5550:	       move.l 116(sp),d2
    5554:	       move.l 112(sp),d3
    5558:	       jsr -66(a6)
    555c:	       move.l d0,108(sp)
    5560:	       move.l 108(sp),d0
    5564:	       addq.l #4,d0
    5566:	       move.l d0,19b48 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    556c:	       move.l 196(sp),104(sp)
    5572:	       move.l 196(sp),-(sp)
    5576:	       jsr 718 <get4bytes>
    557c:	       addq.l #4,sp
    557e:	       move.l d0,100(sp)
    5582:	       clr.l 96(sp)
    5586:	       move.l 19b58 <DOSBase>,d0
    558c:	       movea.l d0,a6
    558e:	       move.l 104(sp),d1
    5592:	       move.l 100(sp),d2
    5596:	       move.l 96(sp),d3
    559a:	       jsr -66(a6)
    559e:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    55a2:	       move.l 196(sp),88(sp)
    55a8:	       clr.l 84(sp)
    55ac:	       clr.l 80(sp)
    55b0:	       move.l 19b58 <DOSBase>,d0
    55b6:	       movea.l d0,a6
    55b8:	       move.l 88(sp),d1
    55bc:	       move.l 84(sp),d2
    55c0:	       move.l 80(sp),d3
    55c4:	       jsr -66(a6)
    55c8:	       move.l d0,76(sp)
    55cc:	       move.l 76(sp),d0
    55d0:	       addq.l #4,d0
    55d2:	       move.l d0,19b4c <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    55d8:	       move.l 196(sp),72(sp)
    55de:	       move.l 196(sp),-(sp)
    55e2:	       jsr 718 <get4bytes>
    55e8:	       addq.l #4,sp
    55ea:	       move.l d0,68(sp)
    55ee:	       clr.l 64(sp)
    55f2:	       move.l 19b58 <DOSBase>,d0
    55f8:	       movea.l d0,a6
    55fa:	       move.l 72(sp),d1
    55fe:	       move.l 68(sp),d2
    5602:	       move.l 64(sp),d3
    5606:	       jsr -66(a6)
    560a:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    560e:	       move.l 196(sp),56(sp)
    5614:	       clr.l 52(sp)
    5618:	       clr.l 48(sp)
    561c:	       move.l 19b58 <DOSBase>,d0
    5622:	       movea.l d0,a6
    5624:	       move.l 56(sp),d1
    5628:	       move.l 52(sp),d2
    562c:	       move.l 48(sp),d3
    5630:	       jsr -66(a6)
    5634:	       move.l d0,44(sp)
    5638:	       move.l 44(sp),d0
    563c:	       move.l d0,19b40 <startOfDataIndex>
    5642:	       nop
    5644:	       movem.l (sp)+,d2-d3/a6
    5648:	       lea 180(sp),sp
    564c:	       rts

0000564e <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    564e:	    lea -20(sp),sp
    5652:	    move.l a6,-(sp)
    5654:	    move.l d7,-(sp)
	APTR vbr = 0;
    5656:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    565a:	    move.w #20090,10(sp)
    5660:	    move.w #2049,12(sp)
    5666:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    566c:	    movea.l 19b50 <SysBase>,a0
    5672:	    move.w 296(a0),d0
    5676:	    move.w d0,d0
    5678:	    andi.l #65535,d0
    567e:	    moveq #1,d1
    5680:	    and.l d1,d0
    5682:	/-- beq.s 56b0 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    5684:	|   lea 28(sp),a0
    5688:	|   lea -18(a0),a0
    568c:	|   move.l a0,20(sp)
    5690:	|   move.l 19b50 <SysBase>,d0
    5696:	|   movea.l d0,a6
    5698:	|   move.l 20(sp),d7
    569c:	|   exg d7,a5
    569e:	|   jsr -30(a6)
    56a2:	|   exg d7,a5
    56a4:	|   move.l d0,16(sp)
    56a8:	|   move.l 16(sp),d0
    56ac:	|   move.l d0,24(sp)

	return vbr;
    56b0:	\-> move.l 24(sp),d0
}
    56b4:	    move.l (sp)+,d7
    56b6:	    movea.l (sp)+,a6
    56b8:	    lea 20(sp),sp
    56bc:	    rts

000056be <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    56be:	movea.l 19b76 <VBR>,a0
    56c4:	lea 108(a0),a0
    56c8:	move.l 4(sp),(a0)
}
    56cc:	nop
    56ce:	rts

000056d0 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    56d0:	movea.l 19b76 <VBR>,a0
    56d6:	move.l 108(a0),d0
}
    56da:	rts

000056dc <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    56dc:	       subq.l #8,sp
    56de:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    56e0:	       pea 15fa3 <PutChar+0xe31>
    56e6:	       jsr 14822 <KPrintF>
    56ec:	       addq.l #4,sp
	Forbid();
    56ee:	       move.l 19b50 <SysBase>,d0
    56f4:	       movea.l d0,a6
    56f6:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    56fa:	       pea 15fbb <PutChar+0xe49>
    5700:	       jsr 14822 <KPrintF>
    5706:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    5708:	       movea.l 19b54 <custom>,a0
    570e:	       move.w 16(a0),d0
    5712:	       move.w d0,19b74 <SystemADKCON>
	SystemInts=custom->intenar;
    5718:	       movea.l 19b54 <custom>,a0
    571e:	       move.w 28(a0),d0
    5722:	       move.w d0,19b70 <SystemInts>
	SystemDMA=custom->dmaconr;
    5728:	       movea.l 19b54 <custom>,a0
    572e:	       move.w 2(a0),d0
    5732:	       move.w d0,19b72 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    5738:	       movea.l 19b5c <GfxBase>,a0
    573e:	       move.l 34(a0),d0
    5742:	       move.l d0,19b7e <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    5748:	       pea 15fd9 <PutChar+0xe67>
    574e:	       jsr 14822 <KPrintF>
    5754:	       addq.l #4,sp
	LoadView(0);
    5756:	       clr.l 4(sp)
    575a:	       move.l 19b5c <GfxBase>,d0
    5760:	       movea.l d0,a6
    5762:	       movea.l 4(sp),a1
    5766:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    576a:	       pea 15fef <PutChar+0xe7d>
    5770:	       jsr 14822 <KPrintF>
    5776:	       addq.l #4,sp
	WaitTOF();
    5778:	       move.l 19b5c <GfxBase>,d0
    577e:	       movea.l d0,a6
    5780:	       jsr -270(a6)
	WaitTOF();
    5784:	       move.l 19b5c <GfxBase>,d0
    578a:	       movea.l d0,a6
    578c:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    5790:	       pea 16004 <PutChar+0xe92>
    5796:	       jsr 14822 <KPrintF>
    579c:	       addq.l #4,sp
	WaitVbl();
    579e:	       jsr 14756 <WaitVbl>
	WaitVbl();
    57a4:	       jsr 14756 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    57aa:	       pea 16019 <PutChar+0xea7>
    57b0:	       jsr 14822 <KPrintF>
    57b6:	       addq.l #4,sp
	OwnBlitter();
    57b8:	       move.l 19b5c <GfxBase>,d0
    57be:	       movea.l d0,a6
    57c0:	       jsr -456(a6)
	WaitBlit();	
    57c4:	       move.l 19b5c <GfxBase>,d0
    57ca:	       movea.l d0,a6
    57cc:	       jsr -228(a6)
	Disable();
    57d0:	       move.l 19b50 <SysBase>,d0
    57d6:	       movea.l d0,a6
    57d8:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    57dc:	       pea 1603a <PutChar+0xec8>
    57e2:	       jsr 14822 <KPrintF>
    57e8:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    57ea:	       movea.l 19b54 <custom>,a0
    57f0:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    57f6:	       pea 16051 <PutChar+0xedf>
    57fc:	       jsr 14822 <KPrintF>
    5802:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    5804:	       clr.l 8(sp)
    5808:	   /-- bra.s 5826 <TakeSystem+0x14a>
		custom->color[a]=0;
    580a:	/--|-> movea.l 19b54 <custom>,a0
    5810:	|  |   move.l 8(sp),d0
    5814:	|  |   addi.l #192,d0
    581a:	|  |   add.l d0,d0
    581c:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    5822:	|  |   addq.l #1,8(sp)
    5826:	|  \-> moveq #31,d0
    5828:	|      cmp.l 8(sp),d0
    582c:	\----- bge.s 580a <TakeSystem+0x12e>

	WaitVbl();
    582e:	       jsr 14756 <WaitVbl>
	WaitVbl();
    5834:	       jsr 14756 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    583a:	       pea 16076 <PutChar+0xf04>
    5840:	       jsr 14822 <KPrintF>
    5846:	       addq.l #4,sp
	VBR=GetVBR();
    5848:	       jsr 564e <GetVBR>
    584e:	       move.l d0,19b76 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    5854:	       jsr 56d0 <GetInterruptHandler>
    585a:	       move.l d0,19b7a <SystemIrq>
}
    5860:	       nop
    5862:	       movea.l (sp)+,a6
    5864:	       addq.l #8,sp
    5866:	       rts

00005868 <FreeSystem>:

void FreeSystem() { 
    5868:	subq.l #4,sp
    586a:	move.l a6,-(sp)
	WaitVbl();
    586c:	jsr 14756 <WaitVbl>
	WaitBlit();
    5872:	move.l 19b5c <GfxBase>,d0
    5878:	movea.l d0,a6
    587a:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    587e:	movea.l 19b54 <custom>,a0
    5884:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    588a:	movea.l 19b54 <custom>,a0
    5890:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    5896:	movea.l 19b54 <custom>,a0
    589c:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    58a2:	move.l 19b7a <SystemIrq>,d0
    58a8:	move.l d0,-(sp)
    58aa:	jsr 56be <SetInterruptHandler>
    58b0:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    58b2:	movea.l 19b5c <GfxBase>,a0
    58b8:	move.l 38(a0),d0
    58bc:	movea.l 19b54 <custom>,a0
    58c2:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    58c6:	movea.l 19b5c <GfxBase>,a0
    58cc:	move.l 50(a0),d0
    58d0:	movea.l 19b54 <custom>,a0
    58d6:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    58da:	movea.l 19b54 <custom>,a0
    58e0:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    58e6:	move.w 19b72 <SystemDMA>,d0
    58ec:	movea.l 19b54 <custom>,a0
    58f2:	ori.w #-32768,d0
    58f6:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    58fa:	move.w 19b74 <SystemADKCON>,d0
    5900:	movea.l 19b54 <custom>,a0
    5906:	ori.w #-32768,d0
    590a:	move.w d0,158(a0)

	WaitBlit();	
    590e:	move.l 19b5c <GfxBase>,d0
    5914:	movea.l d0,a6
    5916:	jsr -228(a6)
	DisownBlitter();
    591a:	move.l 19b5c <GfxBase>,d0
    5920:	movea.l d0,a6
    5922:	jsr -462(a6)
	Enable();
    5926:	move.l 19b50 <SysBase>,d0
    592c:	movea.l d0,a6
    592e:	jsr -126(a6)

	LoadView(ActiView);
    5932:	move.l 19b7e <ActiView>,4(sp)
    593a:	move.l 19b5c <GfxBase>,d0
    5940:	movea.l d0,a6
    5942:	movea.l 4(sp),a1
    5946:	jsr -222(a6)
	WaitTOF();
    594a:	move.l 19b5c <GfxBase>,d0
    5950:	movea.l d0,a6
    5952:	jsr -270(a6)
	WaitTOF();
    5956:	move.l 19b5c <GfxBase>,d0
    595c:	movea.l d0,a6
    595e:	jsr -270(a6)

	Permit();
    5962:	move.l 19b50 <SysBase>,d0
    5968:	movea.l d0,a6
    596a:	jsr -138(a6)
}
    596e:	nop
    5970:	movea.l (sp)+,a6
    5972:	addq.l #4,sp
    5974:	rts

00005976 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    5976:	    lea -128(sp),sp
    597a:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    597e:	    movea.w #4,a0
    5982:	    move.l (a0),d0
    5984:	    move.l d0,19b50 <SysBase>
	custom = (struct Custom*)0xdff000;	
    598a:	    move.l #14675968,19b54 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    5994:	    move.l #90266,136(sp)
    599c:	    clr.l 132(sp)
    59a0:	    move.l 19b50 <SysBase>,d0
    59a6:	    movea.l d0,a6
    59a8:	    movea.l 136(sp),a1
    59ac:	    move.l 132(sp),d0
    59b0:	    jsr -552(a6)
    59b4:	    move.l d0,128(sp)
    59b8:	    move.l 128(sp),d0
    59bc:	    move.l d0,19b5c <GfxBase>
	if (!GfxBase)
    59c2:	    move.l 19b5c <GfxBase>,d0
    59c8:	/-- bne.s 59de <main+0x68>
		Exit(0);
    59ca:	|   clr.l 124(sp)
    59ce:	|   move.l 19b58 <DOSBase>,d0
    59d4:	|   movea.l d0,a6
    59d6:	|   move.l 124(sp),d1
    59da:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    59de:	\-> move.l #90283,120(sp)
    59e6:	    clr.l 116(sp)
    59ea:	    move.l 19b50 <SysBase>,d0
    59f0:	    movea.l d0,a6
    59f2:	    movea.l 120(sp),a1
    59f6:	    move.l 116(sp),d0
    59fa:	    jsr -552(a6)
    59fe:	    move.l d0,112(sp)
    5a02:	    move.l 112(sp),d0
    5a06:	    move.l d0,19b58 <DOSBase>
	if (!DOSBase)
    5a0c:	    move.l 19b58 <DOSBase>,d0
    5a12:	/-- bne.s 5a28 <main+0xb2>
		Exit(0);
    5a14:	|   clr.l 108(sp)
    5a18:	|   move.l 19b58 <DOSBase>,d0
    5a1e:	|   movea.l d0,a6
    5a20:	|   move.l 108(sp),d1
    5a24:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    5a28:	\-> move.l #90295,104(sp)
    5a30:	    clr.l 100(sp)
    5a34:	    move.l 19b50 <SysBase>,d0
    5a3a:	    movea.l d0,a6
    5a3c:	    movea.l 104(sp),a1
    5a40:	    move.l 100(sp),d0
    5a44:	    jsr -552(a6)
    5a48:	    move.l d0,96(sp)
    5a4c:	    move.l 96(sp),d0
    5a50:	    move.l d0,19b60 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    5a56:	    move.l 19b60 <MathIeeeSingBasBase>,d0
    5a5c:	/-- bne.s 5a72 <main+0xfc>
		Exit(0);	
    5a5e:	|   clr.l 92(sp)
    5a62:	|   move.l 19b58 <DOSBase>,d0
    5a68:	|   movea.l d0,a6
    5a6a:	|   move.l 92(sp),d1
    5a6e:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    5a72:	\-> move.l #90319,88(sp)
    5a7a:	    clr.l 84(sp)
    5a7e:	    move.l 19b50 <SysBase>,d0
    5a84:	    movea.l d0,a6
    5a86:	    movea.l 88(sp),a1
    5a8a:	    move.l 84(sp),d0
    5a8e:	    jsr -552(a6)
    5a92:	    move.l d0,80(sp)
    5a96:	    move.l 80(sp),d0
    5a9a:	    move.l d0,19b64 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    5aa0:	    move.l 19b64 <MathIeeeSingTransBase>,d0
    5aa6:	/-- bne.s 5abc <main+0x146>
		Exit(0);
    5aa8:	|   clr.l 76(sp)
    5aac:	|   move.l 19b58 <DOSBase>,d0
    5ab2:	|   movea.l d0,a6
    5ab4:	|   move.l 76(sp),d1
    5ab8:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    5abc:	\-> move.l #90345,72(sp)
    5ac4:	    clr.l 68(sp)
    5ac8:	    move.l 19b50 <SysBase>,d0
    5ace:	    movea.l d0,a6
    5ad0:	    movea.l 72(sp),a1
    5ad4:	    move.l 68(sp),d0
    5ad8:	    jsr -552(a6)
    5adc:	    move.l d0,64(sp)
    5ae0:	    move.l 64(sp),d0
    5ae4:	    move.l d0,19b6c <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    5aea:	    move.l 19b6c <MathIeeeDoubTransBase>,d0
    5af0:	/-- bne.s 5b06 <main+0x190>
		Exit(0);
    5af2:	|   clr.l 60(sp)
    5af6:	|   move.l 19b58 <DOSBase>,d0
    5afc:	|   movea.l d0,a6
    5afe:	|   move.l 60(sp),d1
    5b02:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    5b06:	\-> move.l #90371,56(sp)
    5b0e:	    clr.l 52(sp)
    5b12:	    move.l 19b50 <SysBase>,d0
    5b18:	    movea.l d0,a6
    5b1a:	    movea.l 56(sp),a1
    5b1e:	    move.l 52(sp),d0
    5b22:	    jsr -552(a6)
    5b26:	    move.l d0,48(sp)
    5b2a:	    move.l 48(sp),d0
    5b2e:	    move.l d0,19b68 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    5b34:	    move.l 19b68 <MathIeeeDoubBasBase>,d0
    5b3a:	/-- bne.s 5b50 <main+0x1da>
		Exit(0);
    5b3c:	|   clr.l 44(sp)
    5b40:	|   move.l 19b58 <DOSBase>,d0
    5b46:	|   movea.l d0,a6
    5b48:	|   move.l 44(sp),d1
    5b4c:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 001!\n");
    5b50:	\-> pea 1611b <PutChar+0xfa9>
    5b56:	    jsr 14822 <KPrintF>
    5b5c:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    5b5e:	    move.l 19b58 <DOSBase>,d0
    5b64:	    movea.l d0,a6
    5b66:	    jsr -60(a6)
    5b6a:	    move.l d0,40(sp)
    5b6e:	    move.l 40(sp),d0
    5b72:	    move.l d0,36(sp)
    5b76:	    move.l #90427,32(sp)
    5b7e:	    moveq #15,d0
    5b80:	    move.l d0,28(sp)
    5b84:	    move.l 19b58 <DOSBase>,d0
    5b8a:	    movea.l d0,a6
    5b8c:	    move.l 36(sp),d1
    5b90:	    move.l 32(sp),d2
    5b94:	    move.l 28(sp),d3
    5b98:	    jsr -48(a6)
    5b9c:	    move.l d0,24(sp)
	Delay(50);
    5ba0:	    moveq #50,d0
    5ba2:	    move.l d0,20(sp)
    5ba6:	    move.l 19b58 <DOSBase>,d0
    5bac:	    movea.l d0,a6
    5bae:	    move.l 20(sp),d1
    5bb2:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    5bb6:	    pea 1614b <PutChar+0xfd9>
    5bbc:	    jsr 14822 <KPrintF>
    5bc2:	    addq.l #4,sp
	TakeSystem();
    5bc4:	    jsr 56dc <TakeSystem>
	KPrintF("System Taken\n");
    5bca:	    pea 1615a <PutChar+0xfe8>
    5bd0:	    jsr 14822 <KPrintF>
    5bd6:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    5bd8:	    movea.l 19b54 <custom>,a0
    5bde:	    move.w #-30721,150(a0)
	WaitVbl();
    5be4:	    jsr 14756 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    5bea:	    pea 16168 <PutChar+0xff6>
    5bf0:	    jsr 14822 <KPrintF>
    5bf6:	    addq.l #4,sp
	main_sludge(argc, argv);	
    5bf8:	    move.l 148(sp),-(sp)
    5bfc:	    move.l 148(sp),-(sp)
    5c00:	    jsr 27d4 <main_sludge>
    5c06:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    5c08:	    jsr 5868 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    5c0e:	    move.l 19b58 <DOSBase>,16(sp)
    5c16:	    move.l 19b50 <SysBase>,d0
    5c1c:	    movea.l d0,a6
    5c1e:	    movea.l 16(sp),a1
    5c22:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    5c26:	    move.l 19b5c <GfxBase>,12(sp)
    5c2e:	    move.l 19b50 <SysBase>,d0
    5c34:	    movea.l d0,a6
    5c36:	    movea.l 12(sp),a1
    5c3a:	    jsr -414(a6)
    5c3e:	    moveq #0,d0
}
    5c40:	    movem.l (sp)+,d2-d3/a6
    5c44:	    lea 128(sp),sp
    5c48:	    rts

00005c4a <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    5c4a:	    lea -16(sp),sp
    5c4e:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    5c50:	    moveq #8,d0
    5c52:	    move.l d0,16(sp)
    5c56:	    clr.l 12(sp)
    5c5a:	    move.l 19b50 <SysBase>,d0
    5c60:	    movea.l d0,a6
    5c62:	    move.l 16(sp),d0
    5c66:	    move.l 12(sp),d1
    5c6a:	    jsr -684(a6)
    5c6e:	    move.l d0,8(sp)
    5c72:	    move.l 8(sp),d0
    5c76:	    move.l d0,4(sp)
	if (!newStat) {
    5c7a:	/-- bne.s 5caa <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    5c7c:	|   movea.l 194e0 <nowStatus>,a0
    5c82:	|   move.l (a0),d0
    5c84:	|   movea.l 4(sp),a0
    5c88:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    5c8c:	|   pea 15bc7 <PutChar+0xa55>
    5c92:	|   jsr b8 <copyString>
    5c98:	|   addq.l #4,sp
    5c9a:	|   movea.l 4(sp),a0
    5c9e:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    5ca0:	|   movea.l 194e0 <nowStatus>,a0
    5ca6:	|   move.l 4(sp),(a0)
	}
}
    5caa:	\-> nop
    5cac:	    movea.l (sp)+,a6
    5cae:	    lea 16(sp),sp
    5cb2:	    rts

00005cb4 <clearStatusBar>:

void clearStatusBar () {
    5cb4:	       lea -16(sp),sp
    5cb8:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    5cba:	       movea.l 194e0 <nowStatus>,a0
    5cc0:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    5cc4:	       movea.l 194e0 <nowStatus>,a0
    5cca:	       moveq #-1,d0
    5ccc:	       move.l d0,6(a0)
	while (stat) {
    5cd0:	   /-- bra.s 5d10 <clearStatusBar+0x5c>
		kill = stat;
    5cd2:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    5cd8:	|  |   movea.l 16(sp),a0
    5cdc:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    5ce2:	|  |   movea.l 12(sp),a0
    5ce6:	|  |   move.l (a0),8(sp)
    5cea:	|  |   move.l 19b50 <SysBase>,d0
    5cf0:	|  |   movea.l d0,a6
    5cf2:	|  |   movea.l 8(sp),a1
    5cf6:	|  |   jsr -690(a6)
		FreeVec(kill);
    5cfa:	|  |   move.l 12(sp),4(sp)
    5d00:	|  |   move.l 19b50 <SysBase>,d0
    5d06:	|  |   movea.l d0,a6
    5d08:	|  |   movea.l 4(sp),a1
    5d0c:	|  |   jsr -690(a6)
	while (stat) {
    5d10:	|  \-> tst.l 16(sp)
    5d14:	\----- bne.s 5cd2 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    5d16:	       movea.l 194e0 <nowStatus>,a0
    5d1c:	       clr.l (a0)
}
    5d1e:	       nop
    5d20:	       movea.l (sp)+,a6
    5d22:	       lea 16(sp),sp
    5d26:	       rts

00005d28 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    5d28:	clr.l 19b82 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    5d2e:	move.w #-1,19b86 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    5d36:	moveq #-1,d0
    5d38:	move.l d0,19b88 <mainStatus+0x6>
	mainStatus.statusX = 10;
    5d3e:	moveq #10,d0
    5d40:	move.l d0,19b8c <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    5d46:	movea.l 19aa8 <winHeight>,a0
    5d4c:	lea -15(a0),a0
    5d50:	move.l a0,d0
    5d52:	move.l d0,19b90 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    5d58:	nop
    5d5a:	rts

00005d5c <killLastStatus>:

void killLastStatus () {
    5d5c:	    lea -12(sp),sp
    5d60:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    5d62:	    movea.l 194e0 <nowStatus>,a0
    5d68:	    move.l (a0),d0
    5d6a:	/-- beq.s 5db4 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    5d6c:	|   movea.l 194e0 <nowStatus>,a0
    5d72:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    5d76:	|   movea.l 194e0 <nowStatus>,a0
    5d7c:	|   movea.l 12(sp),a1
    5d80:	|   move.l 4(a1),d0
    5d84:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    5d86:	|   movea.l 12(sp),a0
    5d8a:	|   move.l (a0),8(sp)
    5d8e:	|   move.l 19b50 <SysBase>,d0
    5d94:	|   movea.l d0,a6
    5d96:	|   movea.l 8(sp),a1
    5d9a:	|   jsr -690(a6)
		FreeVec(kill);
    5d9e:	|   move.l 12(sp),4(sp)
    5da4:	|   move.l 19b50 <SysBase>,d0
    5daa:	|   movea.l d0,a6
    5dac:	|   movea.l 4(sp),a1
    5db0:	|   jsr -690(a6)
	}
}
    5db4:	\-> nop
    5db6:	    movea.l (sp)+,a6
    5db8:	    lea 12(sp),sp
    5dbc:	    rts

00005dbe <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    5dbe:	movea.l 194e0 <nowStatus>,a0
    5dc4:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    5dca:	movea.l 194e0 <nowStatus>,a0
    5dd0:	move.l 8(sp),14(a0)
}
    5dd6:	nop
    5dd8:	rts

00005dda <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    5dda:	       lea -100(sp),sp
    5dde:	       move.l a6,-(sp)
    5de0:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    5de2:	       movea.l 194e0 <nowStatus>,a0
    5de8:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    5dec:	       movea.l 194e0 <nowStatus>,a0
    5df2:	       move.w 4(a0),d0
    5df6:	       move.w d0,d0
    5df8:	       andi.l #65535,d0
    5dfe:	       move.l 112(sp),-(sp)
    5e02:	       move.l d0,-(sp)
    5e04:	       jsr 8d0 <put2bytes>
    5e0a:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    5e0c:	       movea.l 194e0 <nowStatus>,a0
    5e12:	       move.l 6(a0),d0
    5e16:	       move.l d0,d0
    5e18:	       movea.w d0,a0
    5e1a:	       move.l 112(sp),-(sp)
    5e1e:	       move.l a0,-(sp)
    5e20:	       jsr a9c <putSigned>
    5e26:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    5e28:	       movea.l 194e0 <nowStatus>,a0
    5e2e:	       move.l 10(a0),d0
    5e32:	       move.l 112(sp),-(sp)
    5e36:	       move.l d0,-(sp)
    5e38:	       jsr 8d0 <put2bytes>
    5e3e:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    5e40:	       movea.l 194e0 <nowStatus>,a0
    5e46:	       move.l 14(a0),d0
    5e4a:	       move.l 112(sp),-(sp)
    5e4e:	       move.l d0,-(sp)
    5e50:	       jsr 8d0 <put2bytes>
    5e56:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    5e58:	       move.l 112(sp),100(sp)
    5e5e:	       movea.l 194e0 <nowStatus>,a0
    5e64:	       move.l 18(a0),96(sp)
    5e6a:	       move.l 19b58 <DOSBase>,d0
    5e70:	       movea.l d0,a6
    5e72:	       move.l 100(sp),d1
    5e76:	       move.l 96(sp),d2
    5e7a:	       jsr -312(a6)
    5e7e:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    5e82:	       move.l 112(sp),88(sp)
    5e88:	       movea.l 194e0 <nowStatus>,a0
    5e8e:	       move.l 22(a0),84(sp)
    5e94:	       move.l 19b58 <DOSBase>,d0
    5e9a:	       movea.l d0,a6
    5e9c:	       move.l 88(sp),d1
    5ea0:	       move.l 84(sp),d2
    5ea4:	       jsr -312(a6)
    5ea8:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    5eac:	       move.l 112(sp),76(sp)
    5eb2:	       movea.l 194e0 <nowStatus>,a0
    5eb8:	       move.l 26(a0),72(sp)
    5ebe:	       move.l 19b58 <DOSBase>,d0
    5ec4:	       movea.l d0,a6
    5ec6:	       move.l 76(sp),d1
    5eca:	       move.l 72(sp),d2
    5ece:	       jsr -312(a6)
    5ed2:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    5ed6:	       move.l 112(sp),64(sp)
    5edc:	       movea.l 194e0 <nowStatus>,a0
    5ee2:	       move.l 30(a0),60(sp)
    5ee8:	       move.l 19b58 <DOSBase>,d0
    5eee:	       movea.l d0,a6
    5ef0:	       move.l 64(sp),d1
    5ef4:	       move.l 60(sp),d2
    5ef8:	       jsr -312(a6)
    5efc:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    5f00:	       move.l 112(sp),52(sp)
    5f06:	       movea.l 194e0 <nowStatus>,a0
    5f0c:	       move.l 34(a0),48(sp)
    5f12:	       move.l 19b58 <DOSBase>,d0
    5f18:	       movea.l d0,a6
    5f1a:	       move.l 52(sp),d1
    5f1e:	       move.l 48(sp),d2
    5f22:	       jsr -312(a6)
    5f26:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    5f2a:	       move.l 112(sp),40(sp)
    5f30:	       movea.l 194e0 <nowStatus>,a0
    5f36:	       move.l 38(a0),36(sp)
    5f3c:	       move.l 19b58 <DOSBase>,d0
    5f42:	       movea.l d0,a6
    5f44:	       move.l 40(sp),d1
    5f48:	       move.l 36(sp),d2
    5f4c:	       jsr -312(a6)
    5f50:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    5f54:	   /-- bra.s 5f98 <saveStatusBars+0x1be>
		FPutC (fp,1);
    5f56:	/--|-> move.l 112(sp),16(sp)
    5f5c:	|  |   moveq #1,d0
    5f5e:	|  |   move.l d0,12(sp)
    5f62:	|  |   move.l 19b58 <DOSBase>,d0
    5f68:	|  |   movea.l d0,a6
    5f6a:	|  |   move.l 16(sp),d1
    5f6e:	|  |   move.l 12(sp),d2
    5f72:	|  |   jsr -312(a6)
    5f76:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    5f7a:	|  |   movea.l 104(sp),a0
    5f7e:	|  |   move.l (a0),d0
    5f80:	|  |   move.l 112(sp),-(sp)
    5f84:	|  |   move.l d0,-(sp)
    5f86:	|  |   jsr bd8 <writeString>
    5f8c:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    5f8e:	|  |   movea.l 104(sp),a0
    5f92:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    5f98:	|  \-> tst.l 104(sp)
    5f9c:	\----- bne.s 5f56 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    5f9e:	       move.l 112(sp),28(sp)
    5fa4:	       clr.l 24(sp)
    5fa8:	       move.l 19b58 <DOSBase>,d0
    5fae:	       movea.l d0,a6
    5fb0:	       move.l 28(sp),d1
    5fb4:	       move.l 24(sp),d2
    5fb8:	       jsr -312(a6)
    5fbc:	       move.l d0,20(sp)
}
    5fc0:	       nop
    5fc2:	       move.l (sp)+,d2
    5fc4:	       movea.l (sp)+,a6
    5fc6:	       lea 100(sp),sp
    5fca:	       rts

00005fcc <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    5fcc:	movea.l 194e0 <nowStatus>,a0
    5fd2:	move.l 4(sp),6(a0)
}
    5fd8:	nop
    5fda:	rts

00005fdc <setStatusBar>:

void setStatusBar (char * txt) {
    5fdc:	    subq.l #4,sp
    5fde:	    move.l a6,-(sp)
    5fe0:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    5fe2:	    movea.l 194e0 <nowStatus>,a0
    5fe8:	    move.l (a0),d0
    5fea:	/-- beq.s 601e <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    5fec:	|   movea.l 194e0 <nowStatus>,a0
    5ff2:	|   movea.l (a0),a0
    5ff4:	|   move.l (a0),8(sp)
    5ff8:	|   move.l 19b50 <SysBase>,d0
    5ffe:	|   movea.l d0,a6
    6000:	|   movea.l 8(sp),a1
    6004:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    6008:	|   movea.l 194e0 <nowStatus>,a0
    600e:	|   movea.l (a0),a2
    6010:	|   move.l 16(sp),-(sp)
    6014:	|   jsr b8 <copyString>
    601a:	|   addq.l #4,sp
    601c:	|   move.l d0,(a2)
	}
}
    601e:	\-> nop
    6020:	    movea.l (sp)+,a2
    6022:	    movea.l (sp)+,a6
    6024:	    addq.l #4,sp
    6026:	    rts

00006028 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    6028:	       movea.l 194e0 <nowStatus>,a0
    602e:	       move.l (a0),d0
    6030:	/----- beq.s 603e <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    6032:	|      movea.l 194e0 <nowStatus>,a0
    6038:	|      movea.l (a0),a0
    603a:	|      move.l (a0),d0
    603c:	|  /-- bra.s 6044 <statusBarText+0x1c>
	} else {
		return "";
    603e:	\--|-> move.l #89031,d0
	}
    6044:	   \-> rts

00006046 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    6046:	       lea -28(sp),sp
    604a:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    604e:	       move.l 52(sp),-(sp)
    6052:	       jsr 131b8 <stringWidth>
    6058:	       addq.l #4,sp
    605a:	       asr.l #1,d0
    605c:	       move.l d0,-(sp)
    605e:	       jsr 14ada <__floatsisf>
    6064:	       addq.l #4,sp
    6066:	       move.l d0,d1
    6068:	       move.l 194f8 <cameraZoom>,d0
    606e:	       move.l d0,-(sp)
    6070:	       move.l d1,-(sp)
    6072:	       jsr 14986 <__divsf3>
    6078:	       addq.l #8,sp
    607a:	       move.l d0,-(sp)
    607c:	       jsr 14a72 <__fixsfsi>
    6082:	       addq.l #4,sp
    6084:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    6088:	       move.l 56(sp),d0
    608c:	       sub.l 44(sp),d0
    6090:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    6094:	       move.l 56(sp),d0
    6098:	       add.l 44(sp),d0
    609c:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    60a0:	       moveq #12,d0
    60a2:	       move.l d0,32(sp)
    60a6:	       clr.l 28(sp)
    60aa:	       move.l 19b50 <SysBase>,d0
    60b0:	       movea.l d0,a6
    60b2:	       move.l 32(sp),d0
    60b6:	       move.l 28(sp),d1
    60ba:	       jsr -684(a6)
    60be:	       move.l d0,24(sp)
    60c2:	       move.l 24(sp),d0
    60c6:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    60ca:	       movea.l 19bac <speech>,a0
    60d0:	       move.l 4(a0),d0
    60d4:	       movea.l 20(sp),a0
    60d8:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    60dc:	       move.l 52(sp),-(sp)
    60e0:	       jsr b8 <copyString>
    60e6:	       addq.l #4,sp
    60e8:	       movea.l 20(sp),a0
    60ec:	       move.l d0,(a0)
	newLine -> x = xx1;
    60ee:	       movea.l 20(sp),a0
    60f2:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    60f8:	       movea.l 19bac <speech>,a0
    60fe:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    6104:	       moveq #4,d0
    6106:	       cmp.l 40(sp),d0
    610a:	   /-- blt.s 612c <addSpeechLine+0xe6>
    610c:	   |   movea.l 60(sp),a0
    6110:	   |   move.l (a0),d1
    6112:	   |   moveq #5,d0
    6114:	   |   sub.l 40(sp),d0
    6118:	   |   cmp.l d1,d0
    611a:	   +-- ble.s 612c <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    611c:	   |   moveq #5,d0
    611e:	   |   sub.l 40(sp),d0
    6122:	   |   movea.l 60(sp),a0
    6126:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    6128:	/--|-- bra.w 6258 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    612c:	|  \-> move.l 36(sp),-(sp)
    6130:	|      jsr 14ada <__floatsisf>
    6136:	|      addq.l #4,sp
    6138:	|      move.l d0,d2
    613a:	|      move.l 19aa4 <winWidth>,d0
    6140:	|      move.l d0,-(sp)
    6142:	|      jsr 14b02 <__floatunsisf>
    6148:	|      addq.l #4,sp
    614a:	|      move.l d0,d1
    614c:	|      move.l 194f8 <cameraZoom>,d0
    6152:	|      move.l d0,-(sp)
    6154:	|      move.l d1,-(sp)
    6156:	|      jsr 14986 <__divsf3>
    615c:	|      addq.l #8,sp
    615e:	|      move.l #1084227584,-(sp)
    6164:	|      move.l d0,-(sp)
    6166:	|      jsr 14dce <__subsf3>
    616c:	|      addq.l #8,sp
    616e:	|      move.l d0,-(sp)
    6170:	|      move.l d2,-(sp)
    6172:	|      jsr 14bc2 <__gesf2>
    6178:	|      addq.l #8,sp
    617a:	|      tst.l d0
    617c:	|  /-- bge.s 6182 <addSpeechLine+0x13c>
}
    617e:	+--|-- bra.w 6258 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6182:	|  \-> movea.l 60(sp),a0
    6186:	|      move.l (a0),d0
    6188:	|      move.l d0,-(sp)
    618a:	|      jsr 14ada <__floatsisf>
    6190:	|      addq.l #4,sp
    6192:	|      move.l d0,-(sp)
    6194:	|      jsr 149f2 <__extendsfdf2>
    619a:	|      addq.l #4,sp
    619c:	|      move.l d0,d4
    619e:	|      move.l d1,d5
    61a0:	|      move.l 19aa4 <winWidth>,d0
    61a6:	|      move.l d0,-(sp)
    61a8:	|      jsr 14b02 <__floatunsisf>
    61ae:	|      addq.l #4,sp
    61b0:	|      move.l d0,d1
    61b2:	|      move.l 194f8 <cameraZoom>,d0
    61b8:	|      move.l d0,-(sp)
    61ba:	|      move.l d1,-(sp)
    61bc:	|      jsr 14986 <__divsf3>
    61c2:	|      addq.l #8,sp
    61c4:	|      move.l d0,-(sp)
    61c6:	|      jsr 149f2 <__extendsfdf2>
    61cc:	|      addq.l #4,sp
    61ce:	|      clr.l -(sp)
    61d0:	|      move.l #1075052544,-(sp)
    61d6:	|      move.l d1,-(sp)
    61d8:	|      move.l d0,-(sp)
    61da:	|      jsr 14d6c <__subdf3>
    61e0:	|      lea 16(sp),sp
    61e4:	|      move.l d0,d2
    61e6:	|      move.l d1,d3
    61e8:	|      move.l 36(sp),-(sp)
    61ec:	|      jsr 14a9a <__floatsidf>
    61f2:	|      addq.l #4,sp
    61f4:	|      move.l d1,-(sp)
    61f6:	|      move.l d0,-(sp)
    61f8:	|      move.l d3,-(sp)
    61fa:	|      move.l d2,-(sp)
    61fc:	|      jsr 14d6c <__subdf3>
    6202:	|      lea 16(sp),sp
    6206:	|      move.l d1,-(sp)
    6208:	|      move.l d0,-(sp)
    620a:	|      move.l d5,-(sp)
    620c:	|      move.l d4,-(sp)
    620e:	|      jsr 14bf8 <__gtdf2>
    6214:	|      lea 16(sp),sp
    6218:	|      tst.l d0
    621a:	|  /-- bgt.s 621e <addSpeechLine+0x1d8>
}
    621c:	+--|-- bra.s 6258 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    621e:	|  \-> move.l 19aa4 <winWidth>,d0
    6224:	|      move.l d0,-(sp)
    6226:	|      jsr 14b02 <__floatunsisf>
    622c:	|      addq.l #4,sp
    622e:	|      move.l d0,d1
    6230:	|      move.l 194f8 <cameraZoom>,d0
    6236:	|      move.l d0,-(sp)
    6238:	|      move.l d1,-(sp)
    623a:	|      jsr 14986 <__divsf3>
    6240:	|      addq.l #8,sp
    6242:	|      move.l d0,-(sp)
    6244:	|      jsr 14a72 <__fixsfsi>
    624a:	|      addq.l #4,sp
    624c:	|      subq.l #5,d0
    624e:	|      sub.l 36(sp),d0
    6252:	|      movea.l 60(sp),a0
    6256:	|      move.l d0,(a0)
}
    6258:	\----> nop
    625a:	       movem.l (sp)+,d2-d5/a6
    625e:	       lea 28(sp),sp
    6262:	       rts

00006264 <initSpeech>:


void initSpeech () {
    6264:	       lea -12(sp),sp
    6268:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    626a:	       moveq #20,d0
    626c:	       move.l d0,12(sp)
    6270:	       clr.l 8(sp)
    6274:	       move.l 19b50 <SysBase>,d0
    627a:	       movea.l d0,a6
    627c:	       move.l 12(sp),d0
    6280:	       move.l 8(sp),d1
    6284:	       jsr -684(a6)
    6288:	       move.l d0,4(sp)
    628c:	       move.l 4(sp),d0
    6290:	       move.l d0,19bac <speech>
	if (speech) {
    6296:	       move.l 19bac <speech>,d0
    629c:	/----- beq.s 62c8 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    629e:	|      movea.l 19bac <speech>,a0
    62a4:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    62a6:	|      movea.l 19bac <speech>,a0
    62ac:	|      clr.l 4(a0)
		speech -> speechY = 0;
    62b0:	|      movea.l 19bac <speech>,a0
    62b6:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    62ba:	|      movea.l 19bac <speech>,a0
    62c0:	|      moveq #-1,d0
    62c2:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    62c6:	|  /-- bra.s 62d6 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    62c8:	\--|-> pea 161a5 <PutChar+0x1033>
    62ce:	   |   jsr 14822 <KPrintF>
    62d4:	   |   addq.l #4,sp
}
    62d6:	   \-> nop
    62d8:	       movea.l (sp)+,a6
    62da:	       lea 12(sp),sp
    62de:	       rts

000062e0 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    62e0:	       movea.l 19bac <speech>,a0
    62e6:	       move.l 4(a0),d0
    62ea:	/----- beq.s 62f8 <isThereAnySpeechGoingOn+0x18>
    62ec:	|      movea.l 19bac <speech>,a0
    62f2:	|      move.l 16(a0),d0
    62f6:	|  /-- bra.s 62fa <isThereAnySpeechGoingOn+0x1a>
    62f8:	\--|-> moveq #-1,d0
}
    62fa:	   \-> rts

000062fc <killAllSpeech>:

void killAllSpeech () {
    62fc:	       lea -12(sp),sp
    6300:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    6302:	       movea.l 19bac <speech>,a0
    6308:	       move.l 12(a0),d0
    630c:	       moveq #-1,d1
    630e:	       cmp.l d0,d1
    6310:	   /-- beq.s 631e <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    6312:	   |   movea.l 19bac <speech>,a0
    6318:	   |   moveq #-1,d0
    631a:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    631e:	   \-> movea.l 19bac <speech>,a0
    6324:	       move.l (a0),d0
    6326:	/----- beq.w 63b2 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    632a:	|      movea.l 19bac <speech>,a0
    6330:	|      move.l (a0),d0
    6332:	|      lea -120(sp),sp
    6336:	|      move.l sp,d1
    6338:	|      movea.l d0,a0
    633a:	|      moveq #120,d0
    633c:	|      move.l d0,-(sp)
    633e:	|      move.l a0,-(sp)
    6340:	|      move.l d1,-(sp)
    6342:	|      jsr 147d6 <memcpy>
    6348:	|      lea 12(sp),sp
    634c:	|      jsr 8d90 <makeSilent>
    6352:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    6356:	|      movea.l 19bac <speech>,a0
    635c:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    635e:	+----- bra.s 63b2 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    6360:	|  /-> movea.l 19bac <speech>,a0
    6366:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    636c:	|  |   movea.l 19bac <speech>,a0
    6372:	|  |   movea.l 4(a0),a1
    6376:	|  |   movea.l 19bac <speech>,a0
    637c:	|  |   move.l 4(a1),d0
    6380:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    6384:	|  |   movea.l 12(sp),a0
    6388:	|  |   move.l (a0),8(sp)
    638c:	|  |   move.l 19b50 <SysBase>,d0
    6392:	|  |   movea.l d0,a6
    6394:	|  |   movea.l 8(sp),a1
    6398:	|  |   jsr -690(a6)
		FreeVec(killMe);
    639c:	|  |   move.l 12(sp),4(sp)
    63a2:	|  |   move.l 19b50 <SysBase>,d0
    63a8:	|  |   movea.l d0,a6
    63aa:	|  |   movea.l 4(sp),a1
    63ae:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    63b2:	\--|-> movea.l 19bac <speech>,a0
    63b8:	   |   move.l 4(a0),d0
    63bc:	   \-- bne.s 6360 <killAllSpeech+0x64>
	}
}
    63be:	       nop
    63c0:	       nop
    63c2:	       movea.l (sp)+,a6
    63c4:	       lea 12(sp),sp
    63c8:	       rts

000063ca <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    63ca:	pea 2 <_start+0x2>
    63ce:	move.l 8(sp),-(sp)
    63d2:	jsr 652a <setFrames>
    63d8:	addq.l #8,sp
}
    63da:	nop
    63dc:	rts

000063de <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    63de:	       lea -52(sp),sp
    63e2:	       move.l a6,-(sp)
    63e4:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    63e6:	       movea.l 64(sp),a0
    63ea:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    63f0:	       move.l 194e4 <speechSpeed>,d0
    63f6:	       move.l 68(sp),-(sp)
    63fa:	       move.l d0,-(sp)
    63fc:	       jsr a46 <putFloat>
    6402:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    6404:	       movea.l 64(sp),a0
    6408:	       move.l 8(a0),d0
    640c:	       move.l 68(sp),-(sp)
    6410:	       move.l d0,-(sp)
    6412:	       jsr 8d0 <put2bytes>
    6418:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    641a:	       movea.l 64(sp),a0
    641e:	       move.l 16(a0),d0
    6422:	       move.l 68(sp),-(sp)
    6426:	       move.l d0,-(sp)
    6428:	       jsr 8d0 <put2bytes>
    642e:	       addq.l #8,sp
		if (sS -> currentTalker) {
    6430:	       movea.l 64(sp),a0
    6434:	       move.l (a0),d0
    6436:	   /-- beq.s 647a <saveSpeech+0x9c>
			FPutC (fp, 1);
    6438:	   |   move.l 68(sp),40(sp)
    643e:	   |   moveq #1,d0
    6440:	   |   move.l d0,36(sp)
    6444:	   |   move.l 19b58 <DOSBase>,d0
    644a:	   |   movea.l d0,a6
    644c:	   |   move.l 40(sp),d1
    6450:	   |   move.l 36(sp),d2
    6454:	   |   jsr -312(a6)
    6458:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    645c:	   |   movea.l 64(sp),a0
    6460:	   |   movea.l (a0),a0
    6462:	   |   movea.l 102(a0),a0
    6466:	   |   move.l 4(a0),d0
    646a:	   |   move.l 68(sp),-(sp)
    646e:	   |   move.l d0,-(sp)
    6470:	   |   jsr 8d0 <put2bytes>
    6476:	   |   addq.l #8,sp
    6478:	/--|-- bra.s 64f6 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    647a:	|  \-> move.l 68(sp),52(sp)
    6480:	|      clr.l 48(sp)
    6484:	|      move.l 19b58 <DOSBase>,d0
    648a:	|      movea.l d0,a6
    648c:	|      move.l 52(sp),d1
    6490:	|      move.l 48(sp),d2
    6494:	|      jsr -312(a6)
    6498:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    649c:	+----- bra.s 64f6 <saveSpeech+0x118>
			FPutC (fp, 1);
    649e:	|  /-> move.l 68(sp),16(sp)
    64a4:	|  |   moveq #1,d0
    64a6:	|  |   move.l d0,12(sp)
    64aa:	|  |   move.l 19b58 <DOSBase>,d0
    64b0:	|  |   movea.l d0,a6
    64b2:	|  |   move.l 16(sp),d1
    64b6:	|  |   move.l 12(sp),d2
    64ba:	|  |   jsr -312(a6)
    64be:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    64c2:	|  |   movea.l 56(sp),a0
    64c6:	|  |   move.l (a0),d0
    64c8:	|  |   move.l 68(sp),-(sp)
    64cc:	|  |   move.l d0,-(sp)
    64ce:	|  |   jsr bd8 <writeString>
    64d4:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    64d6:	|  |   movea.l 56(sp),a0
    64da:	|  |   move.l 8(a0),d0
    64de:	|  |   move.l 68(sp),-(sp)
    64e2:	|  |   move.l d0,-(sp)
    64e4:	|  |   jsr 8d0 <put2bytes>
    64ea:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    64ec:	|  |   movea.l 56(sp),a0
    64f0:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    64f6:	\--|-> tst.l 56(sp)
    64fa:	   \-- bne.s 649e <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    64fc:	       move.l 68(sp),28(sp)
    6502:	       clr.l 24(sp)
    6506:	       move.l 19b58 <DOSBase>,d0
    650c:	       movea.l d0,a6
    650e:	       move.l 28(sp),d1
    6512:	       move.l 24(sp),d2
    6516:	       jsr -312(a6)
    651a:	       move.l d0,20(sp)
}
    651e:	       nop
    6520:	       move.l (sp)+,d2
    6522:	       movea.l (sp)+,a6
    6524:	       lea 52(sp),sp
    6528:	       rts

0000652a <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    652a:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    652c:	movea.l 8(sp),a0
    6530:	movea.l 68(a0),a0
    6534:	move.l (a0),d2
    6536:	movea.l 8(sp),a0
    653a:	movea.l 68(a0),a0
    653e:	move.l 4(a0),d0
    6542:	move.l 12(sp),-(sp)
    6546:	move.l d0,-(sp)
    6548:	jsr 1505c <__mulsi3>
    654e:	addq.l #8,sp
    6550:	move.l d0,d1
    6552:	movea.l 8(sp),a0
    6556:	move.l 94(a0),d0
    655a:	add.l d1,d0
    655c:	add.l d0,d0
    655e:	add.l d0,d0
    6560:	movea.l d2,a0
    6562:	adda.l d0,a0
    6564:	move.l (a0),d0
    6566:	movea.l 8(sp),a0
    656a:	move.l d0,60(a0)
}
    656e:	nop
    6570:	move.l (sp)+,d2
    6572:	rts

00006574 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    6574:	       lea -20(sp),sp
    6578:	       move.l d2,-(sp)
    657a:	       move.l 40(sp),d0
    657e:	       move.w d0,d0
    6580:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    6584:	       movea.l 19bac <speech>,a0
    658a:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    6590:	       move.l 32(sp),-(sp)
    6594:	       jsr 887a <findPerson>
    659a:	       addq.l #4,sp
    659c:	       move.l d0,16(sp)
    if (thisPerson) {
    65a0:	   /-- beq.s 65c6 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    65a2:	   |   movea.w 6(sp),a0
    65a6:	   |   move.l a0,-(sp)
    65a8:	   |   move.l 40(sp),-(sp)
    65ac:	   |   move.l 24(sp),-(sp)
    65b0:	   |   move.l 40(sp),-(sp)
    65b4:	   |   jsr 668c <wrapSpeechPerson>
    65ba:	   |   lea 16(sp),sp
    65be:	   |   move.l d0,20(sp)
    65c2:	/--|-- bra.w 6680 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    65c6:	|  \-> move.l 32(sp),-(sp)
    65ca:	|      jsr 132a4 <getRegionForObject>
    65d0:	|      addq.l #4,sp
    65d2:	|      move.l d0,12(sp)
        if (thisRegion) {
    65d6:	|  /-- beq.s 6642 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    65d8:	|  |   movea.l 12(sp),a0
    65dc:	|  |   movea.l 28(a0),a0
    65e0:	|  |   move.l 28(a0),d0
    65e4:	|  |   movea.l 12(sp),a0
    65e8:	|  |   movea.l 4(a0),a1
    65ec:	|  |   movea.l 12(sp),a0
    65f0:	|  |   movea.l 28(a0),a0
    65f4:	|  |   move.l 20(a0),d1
    65f8:	|  |   movea.l a1,a0
    65fa:	|  |   suba.l d1,a0
    65fc:	|  |   move.l 19c62 <cameraY>,d1
    6602:	|  |   movea.l a0,a1
    6604:	|  |   suba.l d1,a1
    6606:	|  |   movea.l 12(sp),a0
    660a:	|  |   move.l (a0),d2
    660c:	|  |   movea.l 12(sp),a0
    6610:	|  |   move.l 8(a0),d1
    6614:	|  |   add.l d2,d1
    6616:	|  |   move.l d1,d2
    6618:	|  |   asr.l #1,d2
    661a:	|  |   move.l 19c5e <cameraX>,d1
    6620:	|  |   movea.l d2,a0
    6622:	|  |   suba.l d1,a0
    6624:	|  |   move.l 36(sp),-(sp)
    6628:	|  |   move.l d0,-(sp)
    662a:	|  |   move.l a1,-(sp)
    662c:	|  |   move.l a0,-(sp)
    662e:	|  |   move.l 44(sp),-(sp)
    6632:	|  |   jsr 67aa <wrapSpeechXY>
    6638:	|  |   lea 20(sp),sp
    663c:	|  |   move.l d0,20(sp)
    6640:	+--|-- bra.s 6680 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    6642:	|  \-> move.l 32(sp),-(sp)
    6646:	|      jsr b610 <findObjectType>
    664c:	|      addq.l #4,sp
    664e:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    6652:	|      movea.l 8(sp),a0
    6656:	|      move.l 28(a0),d1
    665a:	|      move.l 19aa4 <winWidth>,d0
    6660:	|      lsr.l #1,d0
    6662:	|      move.l 36(sp),-(sp)
    6666:	|      move.l d1,-(sp)
    6668:	|      pea a <_start+0xa>
    666c:	|      move.l d0,-(sp)
    666e:	|      move.l 44(sp),-(sp)
    6672:	|      jsr 67aa <wrapSpeechXY>
    6678:	|      lea 20(sp),sp
    667c:	|      move.l d0,20(sp)
        }
    }
    return i;
    6680:	\----> move.l 20(sp),d0
}
    6684:	       move.l (sp)+,d2
    6686:	       lea 20(sp),sp
    668a:	       rts

0000668c <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    668c:	    subq.l #8,sp
    668e:	    movem.l d2-d4,-(sp)
    6692:	    move.l 36(sp),d0
    6696:	    move.w d0,d0
    6698:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    669c:	    movea.l 28(sp),a0
    66a0:	    movea.l 102(a0),a0
    66a4:	    move.l 28(a0),d2
    66a8:	    movea.l 28(sp),a0
    66ac:	    move.l 4(a0),d3
    66b0:	    move.l 19c62 <cameraY>,d0
    66b6:	    move.l d0,-(sp)
    66b8:	    jsr 14ada <__floatsisf>
    66be:	    addq.l #4,sp
    66c0:	    move.l d0,-(sp)
    66c2:	    move.l d3,-(sp)
    66c4:	    jsr 14dce <__subsf3>
    66ca:	    addq.l #8,sp
    66cc:	    move.l d0,d3
    66ce:	    movea.l 28(sp),a0
    66d2:	    move.l 20(a0),d4
    66d6:	    movea.l 28(sp),a0
    66da:	    move.l 8(a0),d1
    66de:	    movea.l 28(sp),a0
    66e2:	    move.l 12(a0),d0
    66e6:	    sub.l d0,d1
    66e8:	    move.l d1,-(sp)
    66ea:	    jsr 14ada <__floatsisf>
    66f0:	    addq.l #4,sp
    66f2:	    move.l d0,-(sp)
    66f4:	    move.l d4,-(sp)
    66f6:	    jsr 14b8c <__mulsf3>
    66fc:	    addq.l #8,sp
    66fe:	    move.l d0,-(sp)
    6700:	    move.l d3,-(sp)
    6702:	    jsr 14dce <__subsf3>
    6708:	    addq.l #8,sp
    670a:	    move.l d0,d3
    670c:	    movea.l 28(sp),a0
    6710:	    movea.l 102(a0),a0
    6714:	    move.l 20(a0),d0
    6718:	    move.l d0,-(sp)
    671a:	    jsr 14ada <__floatsisf>
    6720:	    addq.l #4,sp
    6722:	    move.l d0,-(sp)
    6724:	    move.l d3,-(sp)
    6726:	    jsr 14dce <__subsf3>
    672c:	    addq.l #8,sp
    672e:	    move.l d0,-(sp)
    6730:	    jsr 14a72 <__fixsfsi>
    6736:	    addq.l #4,sp
    6738:	    move.l d0,d4
    673a:	    movea.l 28(sp),a0
    673e:	    move.l (a0),d3
    6740:	    move.l 19c5e <cameraX>,d0
    6746:	    move.l d0,-(sp)
    6748:	    jsr 14ada <__floatsisf>
    674e:	    addq.l #4,sp
    6750:	    move.l d0,-(sp)
    6752:	    move.l d3,-(sp)
    6754:	    jsr 14dce <__subsf3>
    675a:	    addq.l #8,sp
    675c:	    move.l d0,-(sp)
    675e:	    jsr 14a72 <__fixsfsi>
    6764:	    addq.l #4,sp
    6766:	    move.l 32(sp),-(sp)
    676a:	    move.l d2,-(sp)
    676c:	    move.l d4,-(sp)
    676e:	    move.l d0,-(sp)
    6770:	    move.l 40(sp),-(sp)
    6774:	    jsr 67aa <wrapSpeechXY>
    677a:	    lea 20(sp),sp
    677e:	    move.l d0,16(sp)
	if (animPerson) {
    6782:	    tst.w 14(sp)
    6786:	/-- beq.s 679e <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    6788:	|   move.l 28(sp),-(sp)
    678c:	|   jsr 63ca <makeTalker>
    6792:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    6794:	|   movea.l 19bac <speech>,a0
    679a:	|   move.l 28(sp),(a0)
	}
	return i;
    679e:	\-> move.l 16(sp),d0
}
    67a2:	    movem.l (sp)+,d2-d4
    67a6:	    addq.l #8,sp
    67a8:	    rts

000067aa <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    67aa:	                   lea -16(sp),sp
    67ae:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    67b2:	                   clr.l 16(sp)
    killAllSpeech();
    67b6:	                   jsr 62fc <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    67bc:	                   move.l 36(sp),-(sp)
    67c0:	                   jsr 11cc6 <strlen>
    67c6:	                   addq.l #4,sp
    67c8:	                   movea.l d0,a0
    67ca:	                   lea 20(a0),a0
    67ce:	                   move.l a0,-(sp)
    67d0:	                   jsr 14b02 <__floatunsisf>
    67d6:	                   addq.l #4,sp
    67d8:	                   move.l d0,d1
    67da:	                   move.l 194e4 <speechSpeed>,d0
    67e0:	                   move.l d0,-(sp)
    67e2:	                   move.l d1,-(sp)
    67e4:	                   jsr 14b8c <__mulsf3>
    67ea:	                   addq.l #8,sp
    67ec:	                   move.l d0,-(sp)
    67ee:	                   jsr 14a72 <__fixsfsi>
    67f4:	                   addq.l #4,sp
    67f6:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    67fa:	               /-- bgt.s 6802 <wrapSpeechXY+0x58>
    67fc:	               |   moveq #1,d0
    67fe:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    6802:	               \-> moveq #-1,d1
    6804:	                   cmp.l 52(sp),d1
    6808:	               /-- beq.s 6848 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    680a:	               |   move.l 19c72 <speechMode>,d0
    6810:	               +-- ble.s 6848 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    6812:	               |   clr.l -(sp)
    6814:	               |   move.l 56(sp),-(sp)
    6818:	               |   jsr b2e6 <startSound>
    681e:	               |   addq.l #8,sp
    6820:	               |   tst.w d0
    6822:	               +-- beq.s 6848 <wrapSpeechXY+0x9e>
                speechTime = -10;
    6824:	               |   moveq #-10,d0
    6826:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    682a:	               |   movea.l 19bac <speech>,a0
    6830:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    6836:	               |   move.l 19c72 <speechMode>,d0
    683c:	               |   moveq #2,d1
    683e:	               |   cmp.l d0,d1
    6840:	               +-- bne.s 6848 <wrapSpeechXY+0x9e>
    6842:	               |   moveq #-10,d0
    6844:	/--------------|-- bra.w 6ace <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    6848:	|              \-> movea.l 19bac <speech>,a0
    684e:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    6854:	|     /----------- bra.w 6908 <wrapSpeechXY+0x15e>
        a = wrap;
    6858:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    685e:	|  |  |        /-- bra.s 686e <wrapSpeechXY+0xc4>
            a--;
    6860:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    6864:	|  |  |  |     +-- bne.s 686e <wrapSpeechXY+0xc4>
                a = wrap;
    6866:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    686c:	|  |  |  |  /--|-- bra.s 6880 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    686e:	|  |  |  |  |  \-> move.l 28(sp),d0
    6872:	|  |  |  |  |      movea.l 36(sp),a0
    6876:	|  |  |  |  |      adda.l d0,a0
    6878:	|  |  |  |  |      move.b (a0),d0
    687a:	|  |  |  |  |      cmpi.b #32,d0
    687e:	|  |  |  \--|----- bne.s 6860 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    6880:	|  |  |     \----> move.l 28(sp),d0
    6884:	|  |  |            movea.l 36(sp),a0
    6888:	|  |  |            adda.l d0,a0
    688a:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    688c:	|  |  |            lea 16(sp),a0
    6890:	|  |  |            move.l a0,-(sp)
    6892:	|  |  |            move.l 44(sp),-(sp)
    6896:	|  |  |            move.l 44(sp),-(sp)
    689a:	|  |  |            jsr 6046 <addSpeechLine>
    68a0:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    68a4:	|  |  |            move.l 28(sp),d0
    68a8:	|  |  |            movea.l 36(sp),a0
    68ac:	|  |  |            adda.l d0,a0
    68ae:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    68b2:	|  |  |            move.l 28(sp),d0
    68b6:	|  |  |            addq.l #1,d0
    68b8:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    68bc:	|  |  |            move.l 44(sp),-(sp)
    68c0:	|  |  |            jsr 14ada <__floatsisf>
    68c6:	|  |  |            addq.l #4,sp
    68c8:	|  |  |            move.l d0,d2
    68ca:	|  |  |            move.l 19c98 <fontHeight>,d0
    68d0:	|  |  |            move.l d0,-(sp)
    68d2:	|  |  |            jsr 14ada <__floatsisf>
    68d8:	|  |  |            addq.l #4,sp
    68da:	|  |  |            move.l d0,d1
    68dc:	|  |  |            move.l 194f8 <cameraZoom>,d0
    68e2:	|  |  |            move.l d0,-(sp)
    68e4:	|  |  |            move.l d1,-(sp)
    68e6:	|  |  |            jsr 14986 <__divsf3>
    68ec:	|  |  |            addq.l #8,sp
    68ee:	|  |  |            move.l d0,-(sp)
    68f0:	|  |  |            move.l d2,-(sp)
    68f2:	|  |  |            jsr 14dce <__subsf3>
    68f8:	|  |  |            addq.l #8,sp
    68fa:	|  |  |            move.l d0,-(sp)
    68fc:	|  |  |            jsr 14a72 <__fixsfsi>
    6902:	|  |  |            addq.l #4,sp
    6904:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    6908:	|  |  \----------> move.l 36(sp),-(sp)
    690c:	|  |               jsr 11cc6 <strlen>
    6912:	|  |               addq.l #4,sp
    6914:	|  |               move.l d0,d1
    6916:	|  |               move.l 48(sp),d0
    691a:	|  |               cmp.l d1,d0
    691c:	|  \-------------- bcs.w 6858 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    6920:	|                  lea 16(sp),a0
    6924:	|                  move.l a0,-(sp)
    6926:	|                  move.l 44(sp),-(sp)
    692a:	|                  move.l 44(sp),-(sp)
    692e:	|                  jsr 6046 <addSpeechLine>
    6934:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    6938:	|                  move.l 44(sp),-(sp)
    693c:	|                  jsr 14ada <__floatsisf>
    6942:	|                  addq.l #4,sp
    6944:	|                  move.l d0,d2
    6946:	|                  move.l 19c98 <fontHeight>,d0
    694c:	|                  move.l d0,-(sp)
    694e:	|                  jsr 14ada <__floatsisf>
    6954:	|                  addq.l #4,sp
    6956:	|                  move.l d0,d1
    6958:	|                  move.l 194f8 <cameraZoom>,d0
    695e:	|                  move.l d0,-(sp)
    6960:	|                  move.l d1,-(sp)
    6962:	|                  jsr 14986 <__divsf3>
    6968:	|                  addq.l #8,sp
    696a:	|                  move.l d0,-(sp)
    696c:	|                  move.l d2,-(sp)
    696e:	|                  jsr 14dce <__subsf3>
    6974:	|                  addq.l #8,sp
    6976:	|                  move.l d0,-(sp)
    6978:	|                  jsr 14a72 <__fixsfsi>
    697e:	|                  addq.l #4,sp
    6980:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    6984:	|              /-- bpl.s 69a2 <wrapSpeechXY+0x1f8>
    6986:	|              |   movea.l 19bac <speech>,a0
    698c:	|              |   move.l 8(a0),d0
    6990:	|              |   movea.l 19bac <speech>,a0
    6996:	|              |   sub.l 44(sp),d0
    699a:	|              |   move.l d0,8(a0)
    699e:	|           /--|-- bra.w 6a90 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    69a2:	|           |  \-> movea.l 19bac <speech>,a0
    69a8:	|           |      move.l 8(a0),d0
    69ac:	|           |      move.l d0,-(sp)
    69ae:	|           |      jsr 14ada <__floatsisf>
    69b4:	|           |      addq.l #4,sp
    69b6:	|           |      move.l d0,d2
    69b8:	|           |      move.l 19c62 <cameraY>,d0
    69be:	|           |      move.l d0,-(sp)
    69c0:	|           |      jsr 14ada <__floatsisf>
    69c6:	|           |      addq.l #4,sp
    69c8:	|           |      move.l d0,d3
    69ca:	|           |      move.l 19aa8 <winHeight>,d4
    69d0:	|           |      move.l 19c98 <fontHeight>,d0
    69d6:	|           |      pea 3 <_start+0x3>
    69da:	|           |      move.l d0,-(sp)
    69dc:	|           |      jsr 150da <__divsi3>
    69e2:	|           |      addq.l #8,sp
    69e4:	|           |      move.l d4,d1
    69e6:	|           |      sub.l d0,d1
    69e8:	|           |      move.l d1,-(sp)
    69ea:	|           |      jsr 14b02 <__floatunsisf>
    69f0:	|           |      addq.l #4,sp
    69f2:	|           |      move.l d0,d1
    69f4:	|           |      move.l 194f8 <cameraZoom>,d0
    69fa:	|           |      move.l d0,-(sp)
    69fc:	|           |      move.l d1,-(sp)
    69fe:	|           |      jsr 14986 <__divsf3>
    6a04:	|           |      addq.l #8,sp
    6a06:	|           |      move.l d0,-(sp)
    6a08:	|           |      move.l d3,-(sp)
    6a0a:	|           |      jsr 1488c <__addsf3>
    6a10:	|           |      addq.l #8,sp
    6a12:	|           |      move.l d0,-(sp)
    6a14:	|           |      move.l d2,-(sp)
    6a16:	|           |      jsr 14c46 <__gtsf2>
    6a1c:	|           |      addq.l #8,sp
    6a1e:	|           |      tst.l d0
    6a20:	|           +----- ble.s 6a90 <wrapSpeechXY+0x2e6>
    6a22:	|           |      move.l 19c62 <cameraY>,d0
    6a28:	|           |      move.l d0,-(sp)
    6a2a:	|           |      jsr 14ada <__floatsisf>
    6a30:	|           |      addq.l #4,sp
    6a32:	|           |      move.l d0,d2
    6a34:	|           |      move.l 19aa8 <winHeight>,d3
    6a3a:	|           |      move.l 19c98 <fontHeight>,d0
    6a40:	|           |      pea 3 <_start+0x3>
    6a44:	|           |      move.l d0,-(sp)
    6a46:	|           |      jsr 150da <__divsi3>
    6a4c:	|           |      addq.l #8,sp
    6a4e:	|           |      move.l d3,d1
    6a50:	|           |      sub.l d0,d1
    6a52:	|           |      move.l d1,-(sp)
    6a54:	|           |      jsr 14b02 <__floatunsisf>
    6a5a:	|           |      addq.l #4,sp
    6a5c:	|           |      move.l d0,d1
    6a5e:	|           |      move.l 194f8 <cameraZoom>,d0
    6a64:	|           |      move.l d0,-(sp)
    6a66:	|           |      move.l d1,-(sp)
    6a68:	|           |      jsr 14986 <__divsf3>
    6a6e:	|           |      addq.l #8,sp
    6a70:	|           |      move.l d0,-(sp)
    6a72:	|           |      move.l d2,-(sp)
    6a74:	|           |      jsr 1488c <__addsf3>
    6a7a:	|           |      addq.l #8,sp
    6a7c:	|           |      movea.l 19bac <speech>,a2
    6a82:	|           |      move.l d0,-(sp)
    6a84:	|           |      jsr 14a72 <__fixsfsi>
    6a8a:	|           |      addq.l #4,sp
    6a8c:	|           |      move.l d0,8(a2)

    if (offset) {
    6a90:	|           \----> move.l 16(sp),d0
    6a94:	|        /-------- beq.s 6aca <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    6a96:	|        |         movea.l 19bac <speech>,a0
    6a9c:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    6aa2:	|        |     /-- bra.s 6ac4 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    6aa4:	|        |  /--|-> movea.l 20(sp),a0
    6aa8:	|        |  |  |   move.l 8(a0),d1
    6aac:	|        |  |  |   move.l 16(sp),d0
    6ab0:	|        |  |  |   add.l d1,d0
    6ab2:	|        |  |  |   movea.l 20(sp),a0
    6ab6:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    6aba:	|        |  |  |   movea.l 20(sp),a0
    6abe:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    6ac4:	|        |  |  \-> tst.l 20(sp)
    6ac8:	|        |  \----- bne.s 6aa4 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    6aca:	|        \-------> move.l 24(sp),d0
}
    6ace:	\----------------> movem.l (sp)+,d2-d4/a2
    6ad2:	                   lea 16(sp),sp
    6ad6:	                   rts

00006ad8 <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    6ad8:	    subq.l #4,sp
    6ada:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    6adc:	    move.l 19c00 <tga.c.c5785d2a+0x2b>,d0
    6ae2:	/-- beq.s 6b1a <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    6ae4:	|   pea 19c04 <tga.c.c5785d2a+0x2f>
    6aea:	|   pea 1 <_start+0x1>
    6aee:	|   jsr 267a <deleteTextures>
    6af4:	|   addq.l #8,sp
		zBuffer.texName = 0;
    6af6:	|   clr.l 19c04 <tga.c.c5785d2a+0x2f>
        FreeVec(zBuffer.tex);
    6afc:	|   move.l 19c00 <tga.c.c5785d2a+0x2b>,4(sp)
    6b04:	|   move.l 19b50 <SysBase>,d0
    6b0a:	|   movea.l d0,a6
    6b0c:	|   movea.l 4(sp),a1
    6b10:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    6b14:	|   clr.l 19c00 <tga.c.c5785d2a+0x2b>
	}
	zBuffer.numPanels = 0;
    6b1a:	\-> clr.l 19bb8 <zBuffer+0x8>
	zBuffer.originalNum =0;
    6b20:	    clr.l 19bfc <tga.c.c5785d2a+0x27>
}
    6b26:	    nop
    6b28:	    movea.l (sp)+,a6
    6b2a:	    addq.l #4,sp
    6b2c:	    rts

00006b2e <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    6b2e:	                         lea -528(sp),sp
    6b32:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    6b36:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    6b3a:	                         jsr 6ad8 <killZBuffer>

	zBuffer.originalNum = y;
    6b40:	                         move.l 544(sp),d0
    6b44:	                         move.l d0,19bfc <tga.c.c5785d2a+0x27>
	if (! openFileFromNum (y)) return FALSE;
    6b4a:	                         move.l 544(sp),d0
    6b4e:	                         move.l d0,-(sp)
    6b50:	                         jsr 5144 <openFileFromNum>
    6b56:	                         addq.l #4,sp
    6b58:	                         tst.l d0
    6b5a:	                     /-- bne.s 6b62 <setZBuffer+0x34>
    6b5c:	                     |   clr.w d0
    6b5e:	/--------------------|-- bra.w 6f40 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    6b62:	|                    \-> move.l 19b38 <bigDataFile>,524(sp)
    6b6a:	|                        move.l 19b58 <DOSBase>,d0
    6b70:	|                        movea.l d0,a6
    6b72:	|                        move.l 524(sp),d1
    6b76:	|                        jsr -306(a6)
    6b7a:	|                        move.l d0,520(sp)
    6b7e:	|                        move.l 520(sp),d0
    6b82:	|                        moveq #83,d1
    6b84:	|                        cmp.l d0,d1
    6b86:	|                    /-- beq.s 6be8 <setZBuffer+0xba>
    6b88:	|                    |   move.l 19b38 <bigDataFile>,516(sp)
    6b90:	|                    |   move.l 19b58 <DOSBase>,d0
    6b96:	|                    |   movea.l d0,a6
    6b98:	|                    |   move.l 516(sp),d1
    6b9c:	|                    |   jsr -306(a6)
    6ba0:	|                    |   move.l d0,512(sp)
    6ba4:	|                    |   move.l 512(sp),d0
    6ba8:	|                    |   moveq #122,d1
    6baa:	|                    |   cmp.l d0,d1
    6bac:	|                    +-- beq.s 6be8 <setZBuffer+0xba>
    6bae:	|                    |   move.l 19b38 <bigDataFile>,508(sp)
    6bb6:	|                    |   move.l 19b58 <DOSBase>,d0
    6bbc:	|                    |   movea.l d0,a6
    6bbe:	|                    |   move.l 508(sp),d1
    6bc2:	|                    |   jsr -306(a6)
    6bc6:	|                    |   move.l d0,504(sp)
    6bca:	|                    |   move.l 504(sp),d0
    6bce:	|                    |   moveq #98,d1
    6bd0:	|                    |   cmp.l d0,d1
    6bd2:	|                    +-- beq.s 6be8 <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    6bd4:	|                    |   pea 161e2 <PutChar+0x1070>
    6bda:	|                    |   jsr 14822 <KPrintF>
    6be0:	|                    |   addq.l #4,sp
		 return FALSE;
    6be2:	|                    |   clr.w d0
    6be4:	+--------------------|-- bra.w 6f40 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    6be8:	|                    \-> move.l 19b38 <bigDataFile>,500(sp)
    6bf0:	|                        move.l 19b58 <DOSBase>,d0
    6bf6:	|                        movea.l d0,a6
    6bf8:	|                        move.l 500(sp),d1
    6bfc:	|                        jsr -306(a6)
    6c00:	|                        move.l d0,496(sp)
    6c04:	|                        move.l 496(sp),d0
    6c08:	|                    /-- beq.s 6c12 <setZBuffer+0xe4>
    6c0a:	|                    |   moveq #1,d1
    6c0c:	|                    |   cmp.l d0,d1
    6c0e:	|                 /--|-- beq.s 6c28 <setZBuffer+0xfa>
    6c10:	|              /--|--|-- bra.s 6c56 <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    6c12:	|              |  |  \-> move.l #640,19bb0 <zBuffer>
		zBuffer.height = 480;
    6c1c:	|              |  |      move.l #480,19bb4 <zBuffer+0x4>
		break;
    6c26:	|              |  |  /-- bra.s 6c6a <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    6c28:	|              |  \--|-> move.l 19b38 <bigDataFile>,d0
    6c2e:	|              |     |   move.l d0,-(sp)
    6c30:	|              |     |   jsr 6bc <get2bytes>
    6c36:	|              |     |   addq.l #4,sp
    6c38:	|              |     |   move.l d0,19bb0 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    6c3e:	|              |     |   move.l 19b38 <bigDataFile>,d0
    6c44:	|              |     |   move.l d0,-(sp)
    6c46:	|              |     |   jsr 6bc <get2bytes>
    6c4c:	|              |     |   addq.l #4,sp
    6c4e:	|              |     |   move.l d0,19bb4 <zBuffer+0x4>
		break;
    6c54:	|              |     +-- bra.s 6c6a <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    6c56:	|              \-----|-> pea 161f6 <PutChar+0x1084>
    6c5c:	|                    |   jsr 14822 <KPrintF>
    6c62:	|                    |   addq.l #4,sp
		return FALSE;
    6c64:	|                    |   clr.w d0
    6c66:	+--------------------|-- bra.w 6f40 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    6c6a:	|                    \-> move.l 19bb0 <zBuffer>,d0
    6c70:	|                        move.l d0,d1
    6c72:	|                        move.l 19c40 <sceneWidth>,d0
    6c78:	|                        cmp.l d1,d0
    6c7a:	|                    /-- bne.s 6c8e <setZBuffer+0x160>
    6c7c:	|                    |   move.l 19bb4 <zBuffer+0x4>,d0
    6c82:	|                    |   move.l d0,d1
    6c84:	|                    |   move.l 19c44 <sceneHeight>,d0
    6c8a:	|                    |   cmp.l d1,d0
    6c8c:	|                 /--|-- beq.s 6cde <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    6c8e:	|                 |  \-> movea.l 19c44 <sceneHeight>,a1
    6c94:	|                 |      movea.l 19c40 <sceneWidth>,a0
    6c9a:	|                 |      move.l 19bb4 <zBuffer+0x4>,d1
    6ca0:	|                 |      move.l 19bb0 <zBuffer>,d0
    6ca6:	|                 |      move.l a1,-(sp)
    6ca8:	|                 |      move.l a0,-(sp)
    6caa:	|                 |      move.l d1,-(sp)
    6cac:	|                 |      move.l d0,-(sp)
    6cae:	|                 |      pea 16242 <PutChar+0x10d0>
    6cb4:	|                 |      moveq #32,d0
    6cb6:	|                 |      add.l sp,d0
    6cb8:	|                 |      move.l d0,-(sp)
    6cba:	|                 |      jsr 11fe4 <sprintf>
    6cc0:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    6cc4:	|                 |      moveq #12,d0
    6cc6:	|                 |      add.l sp,d0
    6cc8:	|                 |      move.l d0,-(sp)
    6cca:	|                 |      pea 1625d <PutChar+0x10eb>
    6cd0:	|                 |      jsr 14822 <KPrintF>
    6cd6:	|                 |      addq.l #8,sp
		return FALSE;
    6cd8:	|                 |      clr.w d0
    6cda:	+-----------------|----- bra.w 6f40 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    6cde:	|                 \----> move.l 19b38 <bigDataFile>,492(sp)
    6ce6:	|                        move.l 19b58 <DOSBase>,d0
    6cec:	|                        movea.l d0,a6
    6cee:	|                        move.l 492(sp),d1
    6cf2:	|                        jsr -306(a6)
    6cf6:	|                        move.l d0,488(sp)
    6cfa:	|                        move.l 488(sp),d0
    6cfe:	|                        move.l d0,19bb8 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6d04:	|                        clr.l 544(sp)
    6d08:	|                    /-- bra.s 6d34 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    6d0a:	|                 /--|-> move.l 19b38 <bigDataFile>,d0
    6d10:	|                 |  |   move.l d0,-(sp)
    6d12:	|                 |  |   jsr 6bc <get2bytes>
    6d18:	|                 |  |   addq.l #4,sp
    6d1a:	|                 |  |   move.l 544(sp),d1
    6d1e:	|                 |  |   add.l d1,d1
    6d20:	|                 |  |   add.l d1,d1
    6d22:	|                 |  |   lea 540(sp),a0
    6d26:	|                 |  |   add.l a0,d1
    6d28:	|                 |  |   movea.l d1,a0
    6d2a:	|                 |  |   lea -144(a0),a0
    6d2e:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6d30:	|                 |  |   addq.l #1,544(sp)
    6d34:	|                 |  \-> move.l 19bb8 <zBuffer+0x8>,d0
    6d3a:	|                 |      cmp.l 544(sp),d0
    6d3e:	|                 \----- bhi.s 6d0a <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    6d40:	|                        move.l 19bb8 <zBuffer+0x8>,d0
    6d46:	|                        move.l d0,-(sp)
    6d48:	|                        move.l sp,d0
    6d4a:	|                        addi.l #336,d0
    6d50:	|                        move.l d0,-(sp)
    6d52:	|                        move.l sp,d0
    6d54:	|                        addi.l #404,d0
    6d5a:	|                        move.l d0,-(sp)
    6d5c:	|                        jsr 6f4a <sortZPal>
    6d62:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6d66:	|                        clr.l 544(sp)
    6d6a:	|                    /-- bra.s 6de2 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    6d6c:	|                 /--|-> move.l 544(sp),d0
    6d70:	|                 |  |   add.l d0,d0
    6d72:	|                 |  |   add.l d0,d0
    6d74:	|                 |  |   move.l #540,d1
    6d7a:	|                 |  |   add.l sp,d1
    6d7c:	|                 |  |   add.l d1,d0
    6d7e:	|                 |  |   movea.l d0,a0
    6d80:	|                 |  |   lea -208(a0),a0
    6d84:	|                 |  |   move.l (a0),d0
    6d86:	|                 |  |   add.l d0,d0
    6d88:	|                 |  |   add.l d0,d0
    6d8a:	|                 |  |   lea 540(sp),a0
    6d8e:	|                 |  |   add.l a0,d0
    6d90:	|                 |  |   movea.l d0,a0
    6d92:	|                 |  |   lea -144(a0),a0
    6d96:	|                 |  |   move.l (a0),d0
    6d98:	|                 |  |   move.l 544(sp),d1
    6d9c:	|                 |  |   addq.l #3,d1
    6d9e:	|                 |  |   add.l d1,d1
    6da0:	|                 |  |   movea.l d1,a1
    6da2:	|                 |  |   adda.l d1,a1
    6da4:	|                 |  |   lea 19bb0 <zBuffer>,a0
    6daa:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    6dae:	|                 |  |   move.l 544(sp),d0
    6db2:	|                 |  |   add.l d0,d0
    6db4:	|                 |  |   add.l d0,d0
    6db6:	|                 |  |   move.l #540,d1
    6dbc:	|                 |  |   add.l sp,d1
    6dbe:	|                 |  |   add.l d1,d0
    6dc0:	|                 |  |   movea.l d0,a0
    6dc2:	|                 |  |   lea -208(a0),a0
    6dc6:	|                 |  |   move.l (a0),d1
    6dc8:	|                 |  |   move.l 544(sp),d0
    6dcc:	|                 |  |   add.l d1,d1
    6dce:	|                 |  |   add.l d1,d1
    6dd0:	|                 |  |   lea 540(sp),a0
    6dd4:	|                 |  |   add.l a0,d1
    6dd6:	|                 |  |   movea.l d1,a0
    6dd8:	|                 |  |   lea -272(a0),a0
    6ddc:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    6dde:	|                 |  |   addq.l #1,544(sp)
    6de2:	|                 |  \-> move.l 19bb8 <zBuffer+0x8>,d0
    6de8:	|                 |      cmp.l 544(sp),d0
    6dec:	|                 \----- bhi.w 6d6c <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    6df0:	|                        move.l 19c40 <sceneWidth>,d0
    6df6:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    6dfa:	|                        move.l 19c44 <sceneHeight>,d0
    6e00:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    6e04:	|                        move.l 484(sp),-(sp)
    6e08:	|                        move.l 484(sp),-(sp)
    6e0c:	|                        jsr 1505c <__mulsi3>
    6e12:	|                        addq.l #8,sp
    6e14:	|                        move.l d0,476(sp)
    6e18:	|                        clr.l 472(sp)
    6e1c:	|                        move.l 19b50 <SysBase>,d0
    6e22:	|                        movea.l d0,a6
    6e24:	|                        move.l 476(sp),d0
    6e28:	|                        move.l 472(sp),d1
    6e2c:	|                        jsr -684(a6)
    6e30:	|                        move.l d0,468(sp)
    6e34:	|                        move.l 468(sp),d0
    6e38:	|                        move.l d0,19c00 <tga.c.c5785d2a+0x2b>
	if (!zBuffer.tex) {
    6e3e:	|                        move.l 19c00 <tga.c.c5785d2a+0x2b>,d0
    6e44:	|                    /-- bne.s 6e5a <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    6e46:	|                    |   pea 1629a <PutChar+0x1128>
    6e4c:	|                    |   jsr 14822 <KPrintF>
    6e52:	|                    |   addq.l #4,sp
		return FALSE;
    6e54:	|                    |   clr.w d0
    6e56:	+--------------------|-- bra.w 6f40 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    6e5a:	|                    \-> clr.l 544(sp)
    6e5e:	|     /----------------- bra.w 6f2a <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    6e62:	|  /--|----------------> clr.l 536(sp)
    6e66:	|  |  |     /----------- bra.w 6f16 <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    6e6a:	|  |  |  /--|----------> tst.l 528(sp)
    6e6e:	|  |  |  |  |  /-------- bne.s 6ecc <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    6e70:	|  |  |  |  |  |         move.l 19b38 <bigDataFile>,464(sp)
    6e78:	|  |  |  |  |  |         move.l 19b58 <DOSBase>,d0
    6e7e:	|  |  |  |  |  |         movea.l d0,a6
    6e80:	|  |  |  |  |  |         move.l 464(sp),d1
    6e84:	|  |  |  |  |  |         jsr -306(a6)
    6e88:	|  |  |  |  |  |         move.l d0,460(sp)
    6e8c:	|  |  |  |  |  |         move.l 460(sp),d0
    6e90:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    6e94:	|  |  |  |  |  |         move.l 532(sp),d0
    6e98:	|  |  |  |  |  |         asr.l #4,d0
    6e9a:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    6e9e:	|  |  |  |  |  |         moveq #15,d0
    6ea0:	|  |  |  |  |  |         cmp.l 528(sp),d0
    6ea4:	|  |  |  |  |  |  /----- bne.s 6ec2 <setZBuffer+0x394>
    6ea6:	|  |  |  |  |  |  |      move.l 19b38 <bigDataFile>,d0
    6eac:	|  |  |  |  |  |  |      move.l d0,-(sp)
    6eae:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    6eb4:	|  |  |  |  |  |  |      addq.l #4,sp
    6eb6:	|  |  |  |  |  |  |      movea.l d0,a0
    6eb8:	|  |  |  |  |  |  |      lea 16(a0),a0
    6ebc:	|  |  |  |  |  |  |      move.l a0,528(sp)
    6ec0:	|  |  |  |  |  |  |  /-- bra.s 6ec6 <setZBuffer+0x398>
				else stillToGo ++;
    6ec2:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    6ec6:	|  |  |  |  |  |     \-> moveq #15,d1
    6ec8:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    6ecc:	|  |  |  |  |  \-------> move.l 532(sp),d0
    6ed0:	|  |  |  |  |            add.l d0,d0
    6ed2:	|  |  |  |  |            add.l d0,d0
    6ed4:	|  |  |  |  |            lea 540(sp),a0
    6ed8:	|  |  |  |  |            add.l a0,d0
    6eda:	|  |  |  |  |            movea.l d0,a0
    6edc:	|  |  |  |  |            lea -272(a0),a0
    6ee0:	|  |  |  |  |            move.l (a0),d0
    6ee2:	|  |  |  |  |            move.l d0,d2
    6ee4:	|  |  |  |  |            move.l 19c00 <tga.c.c5785d2a+0x2b>,d3
    6eea:	|  |  |  |  |            move.l 484(sp),d0
    6eee:	|  |  |  |  |            move.l 544(sp),-(sp)
    6ef2:	|  |  |  |  |            move.l d0,-(sp)
    6ef4:	|  |  |  |  |            jsr 1505c <__mulsi3>
    6efa:	|  |  |  |  |            addq.l #8,sp
    6efc:	|  |  |  |  |            move.l d0,d1
    6efe:	|  |  |  |  |            move.l 536(sp),d0
    6f02:	|  |  |  |  |            add.l d1,d0
    6f04:	|  |  |  |  |            movea.l d3,a0
    6f06:	|  |  |  |  |            adda.l d0,a0
    6f08:	|  |  |  |  |            move.b d2,d0
    6f0a:	|  |  |  |  |            lsl.b #4,d0
    6f0c:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    6f0e:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    6f12:	|  |  |  |  |            addq.l #1,536(sp)
    6f16:	|  |  |  |  \----------> move.l 536(sp),d1
    6f1a:	|  |  |  |               move.l 19c40 <sceneWidth>,d0
    6f20:	|  |  |  |               cmp.l d1,d0
    6f22:	|  |  |  \-------------- bhi.w 6e6a <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    6f26:	|  |  |                  addq.l #1,544(sp)
    6f2a:	|  |  \----------------> move.l 19c44 <sceneHeight>,d0
    6f30:	|  |                     cmp.l 544(sp),d0
    6f34:	|  \-------------------- bhi.w 6e62 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    6f38:	|                        jsr 503c <finishAccess>
	
	return TRUE;
    6f3e:	|                        moveq #1,d0
}
    6f40:	\----------------------> movem.l (sp)+,d2-d3/a6
    6f44:	                         lea 528(sp),sp
    6f48:	                         rts

00006f4a <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    6f4a:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    6f4c:	             clr.l 4(sp)
    6f50:	         /-- bra.s 6f68 <sortZPal+0x1e>
		newpal[i] = i;
    6f52:	      /--|-> move.l 4(sp),d0
    6f56:	      |  |   add.l d0,d0
    6f58:	      |  |   add.l d0,d0
    6f5a:	      |  |   movea.l 16(sp),a0
    6f5e:	      |  |   adda.l d0,a0
    6f60:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    6f64:	      |  |   addq.l #1,4(sp)
    6f68:	      |  \-> move.l 4(sp),d0
    6f6c:	      |      cmp.l 20(sp),d0
    6f70:	      \----- blt.s 6f52 <sortZPal+0x8>
	}

	if (size < 2) return;		
    6f72:	             moveq #1,d0
    6f74:	             cmp.l 20(sp),d0
    6f78:	/----------- bge.w 702a <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    6f7c:	|            moveq #1,d0
    6f7e:	|            move.l d0,4(sp)
    6f82:	|     /----- bra.w 701c <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    6f86:	|  /--|----> move.l 4(sp),d0
    6f8a:	|  |  |      add.l d0,d0
    6f8c:	|  |  |      add.l d0,d0
    6f8e:	|  |  |      movea.l 16(sp),a0
    6f92:	|  |  |      adda.l d0,a0
    6f94:	|  |  |      move.l (a0),d0
    6f96:	|  |  |      add.l d0,d0
    6f98:	|  |  |      add.l d0,d0
    6f9a:	|  |  |      movea.l 12(sp),a0
    6f9e:	|  |  |      adda.l d0,a0
    6fa0:	|  |  |      move.l (a0),d1
    6fa2:	|  |  |      move.l 4(sp),d0
    6fa6:	|  |  |      addi.l #1073741823,d0
    6fac:	|  |  |      add.l d0,d0
    6fae:	|  |  |      add.l d0,d0
    6fb0:	|  |  |      movea.l 16(sp),a0
    6fb4:	|  |  |      adda.l d0,a0
    6fb6:	|  |  |      move.l (a0),d0
    6fb8:	|  |  |      add.l d0,d0
    6fba:	|  |  |      add.l d0,d0
    6fbc:	|  |  |      movea.l 12(sp),a0
    6fc0:	|  |  |      adda.l d0,a0
    6fc2:	|  |  |      move.l (a0),d0
    6fc4:	|  |  |      cmp.l d1,d0
    6fc6:	|  |  |  /-- ble.s 7018 <sortZPal+0xce>
			tmp = newpal[i];
    6fc8:	|  |  |  |   move.l 4(sp),d0
    6fcc:	|  |  |  |   add.l d0,d0
    6fce:	|  |  |  |   add.l d0,d0
    6fd0:	|  |  |  |   movea.l 16(sp),a0
    6fd4:	|  |  |  |   adda.l d0,a0
    6fd6:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    6fd8:	|  |  |  |   move.l 4(sp),d0
    6fdc:	|  |  |  |   addi.l #1073741823,d0
    6fe2:	|  |  |  |   add.l d0,d0
    6fe4:	|  |  |  |   add.l d0,d0
    6fe6:	|  |  |  |   movea.l 16(sp),a1
    6fea:	|  |  |  |   adda.l d0,a1
    6fec:	|  |  |  |   move.l 4(sp),d0
    6ff0:	|  |  |  |   add.l d0,d0
    6ff2:	|  |  |  |   add.l d0,d0
    6ff4:	|  |  |  |   movea.l 16(sp),a0
    6ff8:	|  |  |  |   adda.l d0,a0
    6ffa:	|  |  |  |   move.l (a1),d0
    6ffc:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    6ffe:	|  |  |  |   move.l 4(sp),d0
    7002:	|  |  |  |   addi.l #1073741823,d0
    7008:	|  |  |  |   add.l d0,d0
    700a:	|  |  |  |   add.l d0,d0
    700c:	|  |  |  |   movea.l 16(sp),a0
    7010:	|  |  |  |   adda.l d0,a0
    7012:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    7014:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    7018:	|  |  |  \-> addq.l #1,4(sp)
    701c:	|  |  \----> move.l 4(sp),d0
    7020:	|  |         cmp.l 20(sp),d0
    7024:	|  \-------- blt.w 6f86 <sortZPal+0x3c>
    7028:	|        /-- bra.s 702c <sortZPal+0xe2>
	if (size < 2) return;		
    702a:	\--------|-> nop
		}
	}
    702c:	         \-> addq.l #8,sp
    702e:	             rts

00007030 <forgetSpriteBank>:
#include "moreio.h"
#include "support/gcc8_c_support.h"


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    7030:	          lea -36(sp),sp
    7034:	          move.l a6,-(sp)

	struct spriteBank *spritebanktoforget = &forgetme->bank;
    7036:	          move.l 44(sp),d0
    703a:	          addq.l #8,d0
    703c:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7040:	          clr.l 36(sp)
    7044:	   /----- bra.s 708a <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    7046:	/--|----> movea.l 28(sp),a0
    704a:	|  |      movea.l 8(a0),a0
    704e:	|  |      move.l 36(sp),d1
    7052:	|  |      move.l d1,d0
    7054:	|  |      lsl.l #3,d0
    7056:	|  |      sub.l d1,d0
    7058:	|  |      add.l d0,d0
    705a:	|  |      add.l d0,d0
    705c:	|  |      adda.l d0,a0
    705e:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    7062:	|  |      movea.l 8(sp),a0
    7066:	|  |      move.l 24(a0),d0
    706a:	|  |  /-- beq.s 7086 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    706c:	|  |  |   movea.l 8(sp),a0
    7070:	|  |  |   move.l 24(a0),4(sp)
    7076:	|  |  |   move.l 19b50 <SysBase>,d0
    707c:	|  |  |   movea.l d0,a6
    707e:	|  |  |   movea.l 4(sp),a1
    7082:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7086:	|  |  \-> addq.l #1,36(sp)
    708a:	|  \----> movea.l 28(sp),a0
    708e:	|         move.l (a0),d0
    7090:	|         cmp.l 36(sp),d0
    7094:	\-------- bgt.s 7046 <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    7096:	          movea.l 28(sp),a0
    709a:	          move.l 8(a0),24(sp)
    70a0:	          move.l 19b50 <SysBase>,d0
    70a6:	          movea.l d0,a6
    70a8:	          movea.l 24(sp),a1
    70ac:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    70b0:	          move.l 28(sp),20(sp)
    70b6:	          move.l 19b50 <SysBase>,d0
    70bc:	          movea.l d0,a6
    70be:	          movea.l 20(sp),a1
    70c2:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    70c6:	          move.l 19c30 <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    70ce:	      /-- bra.s 70da <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    70d0:	   /--|-> movea.l 32(sp),a0
    70d4:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    70da:	   |  \-> movea.l 32(sp),a0
    70de:	   |      movea.l 22(a0),a0
    70e2:	   |      move.l (a0),d1
    70e4:	   |      movea.l 44(sp),a0
    70e8:	   |      move.l (a0),d0
    70ea:	   |      cmp.l d1,d0
    70ec:	   |  /-- beq.s 70f4 <forgetSpriteBank+0xc4>
    70ee:	   |  |   tst.l 32(sp)
    70f2:	   \--|-- bne.s 70d0 <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    70f4:	      \-> tst.l 32(sp)
    70f8:	   /----- beq.s 7122 <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    70fa:	   |      movea.l 44(sp),a0
    70fe:	   |      move.l 22(a0),d0
    7102:	   |      movea.l 32(sp),a0
    7106:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    710a:	   |      move.l 44(sp),12(sp)
    7110:	   |      move.l 19b50 <SysBase>,d0
    7116:	   |      movea.l d0,a6
    7118:	   |      movea.l 12(sp),a1
    711c:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    7120:	   |  /-- bra.s 7148 <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    7122:	   \--|-> movea.l 19c30 <allLoadedBanks>,a0
    7128:	      |   move.l 22(a0),d0
    712c:	      |   move.l d0,19c30 <allLoadedBanks>
		FreeVec( forgetme);
    7132:	      |   move.l 44(sp),16(sp)
    7138:	      |   move.l 19b50 <SysBase>,d0
    713e:	      |   movea.l d0,a6
    7140:	      |   movea.l 16(sp),a1
    7144:	      |   jsr -690(a6)
}
    7148:	      \-> nop
    714a:	          movea.l (sp)+,a6
    714c:	          lea 36(sp),sp
    7150:	          rts

00007152 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    7152:	             lea -84(sp),sp
    7156:	             movem.l d2-d4/a2/a6,-(sp)
    715a:	             move.l 116(sp),d0
    715e:	             move.w d0,d0
    7160:	             move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, spriteBankVersion = 0, howmany = 0, startIndex = 0;
    7164:	             clr.l 96(sp)
    7168:	             clr.l 92(sp)
    716c:	             clr.l 88(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    7170:	             clr.l 84(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    7174:	             move.l 108(sp),-(sp)
    7178:	             jsr 5144 <openFileFromNum>
    717e:	             addq.l #4,sp
    7180:	             tst.l d0
    7182:	         /-- bne.s 7198 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    7184:	         |   pea 162bd <PutChar+0x114b>
    718a:	         |   jsr 14822 <KPrintF>
    7190:	         |   addq.l #4,sp
		return FALSE;
    7192:	         |   clr.w d0
    7194:	/--------|-- bra.w 745e <loadSpriteBank+0x30c>
	}

	loadhere->isFont = isFont;
    7198:	|        \-> movea.l 112(sp),a0
    719c:	|            move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    71a2:	|            move.l 19b38 <bigDataFile>,d0
    71a8:	|            move.l d0,-(sp)
    71aa:	|            jsr 6bc <get2bytes>
    71b0:	|            addq.l #4,sp
	spriteBankVersion = FGetC(bigDataFile);
    71b2:	|            move.l 19b38 <bigDataFile>,80(sp)
    71ba:	|            move.l 19b58 <DOSBase>,d0
    71c0:	|            movea.l d0,a6
    71c2:	|            move.l 80(sp),d1
    71c6:	|            jsr -306(a6)
    71ca:	|            move.l d0,76(sp)
    71ce:	|            move.l 76(sp),d0
    71d2:	|            move.l d0,96(sp)
	total = get2bytes(bigDataFile);
    71d6:	|            move.l 19b38 <bigDataFile>,d0
    71dc:	|            move.l d0,-(sp)
    71de:	|            jsr 6bc <get2bytes>
    71e4:	|            addq.l #4,sp
    71e6:	|            move.l d0,72(sp)

	if (total <= 0) {
    71ea:	|        /-- bgt.s 7200 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    71ec:	|        |   pea 162eb <PutChar+0x1179>
    71f2:	|        |   jsr 14822 <KPrintF>
    71f8:	|        |   addq.l #4,sp
		return FALSE;
    71fa:	|        |   clr.w d0
    71fc:	+--------|-- bra.w 745e <loadSpriteBank+0x30c>
	}
	if (spriteBankVersion > 3) {
    7200:	|        \-> moveq #3,d0
    7202:	|            cmp.l 96(sp),d0
    7206:	|        /-- bge.s 721c <loadSpriteBank+0xca>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    7208:	|        |   pea 1632b <PutChar+0x11b9>
    720e:	|        |   jsr 14822 <KPrintF>
    7214:	|        |   addq.l #4,sp
		return FALSE;
    7216:	|        |   clr.w d0
    7218:	+--------|-- bra.w 745e <loadSpriteBank+0x30c>
	}

	loadhere->total = total;
    721c:	|        \-> movea.l 112(sp),a0
    7220:	|            move.l 72(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    7224:	|            move.l 72(sp),d1
    7228:	|            move.l d1,d0
    722a:	|            lsl.l #3,d0
    722c:	|            sub.l d1,d0
    722e:	|            add.l d0,d0
    7230:	|            add.l d0,d0
    7232:	|            move.l d0,68(sp)
    7236:	|            clr.l 64(sp)
    723a:	|            move.l 19b50 <SysBase>,d0
    7240:	|            movea.l d0,a6
    7242:	|            move.l 68(sp),d0
    7246:	|            move.l 64(sp),d1
    724a:	|            jsr -684(a6)
    724e:	|            move.l d0,60(sp)
    7252:	|            move.l 60(sp),d0
    7256:	|            movea.l 112(sp),a0
    725a:	|            move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    725e:	|            movea.l 112(sp),a0
    7262:	|            move.l 8(a0),d0
    7266:	|        /-- bne.s 726e <loadSpriteBank+0x11c>
    7268:	|        |   clr.w d0
    726a:	+--------|-- bra.w 745e <loadSpriteBank+0x30c>
	
	startIndex = 1;
    726e:	|        \-> moveq #1,d0
    7270:	|            move.l d0,88(sp)

	for (i = 0; i < total; i++) {
    7274:	|            clr.l 100(sp)
    7278:	|     /----- bra.w 744a <loadSpriteBank+0x2f8>
		loadhere->sprites[i].width = get2bytes(bigDataFile);
    727c:	|  /--|----> movea.l 19b38 <bigDataFile>,a1
    7282:	|  |  |      movea.l 112(sp),a0
    7286:	|  |  |      movea.l 8(a0),a0
    728a:	|  |  |      move.l 100(sp),d1
    728e:	|  |  |      move.l d1,d0
    7290:	|  |  |      lsl.l #3,d0
    7292:	|  |  |      sub.l d1,d0
    7294:	|  |  |      add.l d0,d0
    7296:	|  |  |      add.l d0,d0
    7298:	|  |  |      lea (0,a0,d0.l),a2
    729c:	|  |  |      move.l a1,-(sp)
    729e:	|  |  |      jsr 6bc <get2bytes>
    72a4:	|  |  |      addq.l #4,sp
    72a6:	|  |  |      move.l d0,(a2)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    72a8:	|  |  |      movea.l 19b38 <bigDataFile>,a1
    72ae:	|  |  |      movea.l 112(sp),a0
    72b2:	|  |  |      movea.l 8(a0),a0
    72b6:	|  |  |      move.l 100(sp),d1
    72ba:	|  |  |      move.l d1,d0
    72bc:	|  |  |      lsl.l #3,d0
    72be:	|  |  |      sub.l d1,d0
    72c0:	|  |  |      add.l d0,d0
    72c2:	|  |  |      add.l d0,d0
    72c4:	|  |  |      lea (0,a0,d0.l),a2
    72c8:	|  |  |      move.l a1,-(sp)
    72ca:	|  |  |      jsr 6bc <get2bytes>
    72d0:	|  |  |      addq.l #4,sp
    72d2:	|  |  |      move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    72d6:	|  |  |      movea.l 19b38 <bigDataFile>,a1
    72dc:	|  |  |      movea.l 112(sp),a0
    72e0:	|  |  |      movea.l 8(a0),a0
    72e4:	|  |  |      move.l 100(sp),d1
    72e8:	|  |  |      move.l d1,d0
    72ea:	|  |  |      lsl.l #3,d0
    72ec:	|  |  |      sub.l d1,d0
    72ee:	|  |  |      add.l d0,d0
    72f0:	|  |  |      add.l d0,d0
    72f2:	|  |  |      lea (0,a0,d0.l),a2
    72f6:	|  |  |      move.l a1,-(sp)
    72f8:	|  |  |      jsr 6bc <get2bytes>
    72fe:	|  |  |      addq.l #4,sp
    7300:	|  |  |      move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    7304:	|  |  |      movea.l 19b38 <bigDataFile>,a1
    730a:	|  |  |      movea.l 112(sp),a0
    730e:	|  |  |      movea.l 8(a0),a0
    7312:	|  |  |      move.l 100(sp),d1
    7316:	|  |  |      move.l d1,d0
    7318:	|  |  |      lsl.l #3,d0
    731a:	|  |  |      sub.l d1,d0
    731c:	|  |  |      add.l d0,d0
    731e:	|  |  |      add.l d0,d0
    7320:	|  |  |      lea (0,a0,d0.l),a2
    7324:	|  |  |      move.l a1,-(sp)
    7326:	|  |  |      jsr 6bc <get2bytes>
    732c:	|  |  |      addq.l #4,sp
    732e:	|  |  |      move.l d0,12(a2)

		// ToDo Load Data
		UWORD size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    7332:	|  |  |      movea.l 112(sp),a0
    7336:	|  |  |      movea.l 8(a0),a0
    733a:	|  |  |      move.l 100(sp),d1
    733e:	|  |  |      move.l d1,d0
    7340:	|  |  |      lsl.l #3,d0
    7342:	|  |  |      sub.l d1,d0
    7344:	|  |  |      add.l d0,d0
    7346:	|  |  |      add.l d0,d0
    7348:	|  |  |      adda.l d0,a0
    734a:	|  |  |      move.l (a0),d0
    734c:	|  |  |  /-- bpl.s 7350 <loadSpriteBank+0x1fe>
    734e:	|  |  |  |   addq.l #7,d0
    7350:	|  |  |  \-> asr.l #3,d0
    7352:	|  |  |      move.l d0,d2
    7354:	|  |  |      movea.l 112(sp),a0
    7358:	|  |  |      movea.l 8(a0),a0
    735c:	|  |  |      move.l 100(sp),d1
    7360:	|  |  |      move.l d1,d0
    7362:	|  |  |      lsl.l #3,d0
    7364:	|  |  |      sub.l d1,d0
    7366:	|  |  |      add.l d0,d0
    7368:	|  |  |      add.l d0,d0
    736a:	|  |  |      adda.l d0,a0
    736c:	|  |  |      move.l 4(a0),d0
    7370:	|  |  |      move.l d0,d0
    7372:	|  |  |      move.w d2,d1
    7374:	|  |  |      muls.w d0,d1
    7376:	|  |  |      move.w d1,d0
    7378:	|  |  |      add.w d0,d0
    737a:	|  |  |      add.w d1,d0
    737c:	|  |  |      add.w d0,d0
    737e:	|  |  |      move.w d0,58(sp)
		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    7382:	|  |  |      moveq #0,d0
    7384:	|  |  |      move.w 58(sp),d0
    7388:	|  |  |      add.l d0,d0
    738a:	|  |  |      move.l d0,54(sp)
    738e:	|  |  |      moveq #2,d0
    7390:	|  |  |      move.l d0,50(sp)
    7394:	|  |  |      move.l 19b50 <SysBase>,d0
    739a:	|  |  |      movea.l d0,a6
    739c:	|  |  |      move.l 54(sp),d0
    73a0:	|  |  |      move.l 50(sp),d1
    73a4:	|  |  |      jsr -684(a6)
    73a8:	|  |  |      move.l d0,46(sp)
    73ac:	|  |  |      movea.l 46(sp),a1
    73b0:	|  |  |      movea.l 112(sp),a0
    73b4:	|  |  |      movea.l 8(a0),a0
    73b8:	|  |  |      move.l 100(sp),d1
    73bc:	|  |  |      move.l d1,d0
    73be:	|  |  |      lsl.l #3,d0
    73c0:	|  |  |      sub.l d1,d0
    73c2:	|  |  |      add.l d0,d0
    73c4:	|  |  |      add.l d0,d0
    73c6:	|  |  |      adda.l d0,a0
    73c8:	|  |  |      move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    73cc:	|  |  |      move.l 19b38 <bigDataFile>,42(sp)
    73d4:	|  |  |      movea.l 112(sp),a0
    73d8:	|  |  |      movea.l 8(a0),a0
    73dc:	|  |  |      move.l 100(sp),d1
    73e0:	|  |  |      move.l d1,d0
    73e2:	|  |  |      lsl.l #3,d0
    73e4:	|  |  |      sub.l d1,d0
    73e6:	|  |  |      add.l d0,d0
    73e8:	|  |  |      add.l d0,d0
    73ea:	|  |  |      adda.l d0,a0
    73ec:	|  |  |      move.l 24(a0),38(sp)
    73f2:	|  |  |      moveq #2,d0
    73f4:	|  |  |      move.l d0,34(sp)
    73f8:	|  |  |      move.w 58(sp),d0
    73fc:	|  |  |      lsr.w #1,d0
    73fe:	|  |  |      move.w d0,d0
    7400:	|  |  |      andi.l #65535,d0
    7406:	|  |  |      move.l d0,30(sp)
    740a:	|  |  |      move.l 19b58 <DOSBase>,d0
    7410:	|  |  |      movea.l d0,a6
    7412:	|  |  |      move.l 42(sp),d1
    7416:	|  |  |      move.l 38(sp),d2
    741a:	|  |  |      move.l 34(sp),d3
    741e:	|  |  |      move.l 30(sp),d4
    7422:	|  |  |      jsr -324(a6)
    7426:	|  |  |      move.l d0,26(sp)
    742a:	|  |  |      move.l 26(sp),d0
    742e:	|  |  |      move.w d0,24(sp)
		if (!count) {
    7432:	|  |  |  /-- bne.s 7446 <loadSpriteBank+0x2f4>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    7434:	|  |  |  |   pea 16360 <PutChar+0x11ee>
    743a:	|  |  |  |   jsr 14822 <KPrintF>
    7440:	|  |  |  |   addq.l #4,sp
			return FALSE;
    7442:	|  |  |  |   clr.w d0
    7444:	+--|--|--|-- bra.s 745e <loadSpriteBank+0x30c>
	for (i = 0; i < total; i++) {
    7446:	|  |  |  \-> addq.l #1,100(sp)
    744a:	|  |  \----> move.l 100(sp),d0
    744e:	|  |         cmp.l 72(sp),d0
    7452:	|  \-------- blt.w 727c <loadSpriteBank+0x12a>
		}
	}

	finishAccess ();
    7456:	|            jsr 503c <finishAccess>

	return TRUE;
    745c:	|            moveq #1,d0
}
    745e:	\----------> movem.l (sp)+,d2-d4/a2/a6
    7462:	             lea 84(sp),sp
    7466:	             rts

00007468 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    7468:	subq.l #8,sp
    746a:	move.l a2,-(sp)
    746c:	move.l 24(sp),d0
    7470:	move.w d0,d0
    7472:	move.w d0,6(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    7476:	movea.l 20(sp),a0
    747a:	move.l (a0),d0
    747c:	move.l d0,-(sp)
    747e:	jsr 14e3a <__fixunssfsi>
    7484:	addq.l #4,sp
    7486:	move.l d0,d0
    7488:	movea.l 16(sp),a0
    748c:	move.l 8(a0),d1
    7490:	move.l d1,d1
    7492:	movea.w d0,a0
    7494:	suba.w d1,a0
    7496:	move.w a0,10(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;
    749a:	movea.l 20(sp),a0
    749e:	move.l 4(a0),d0
    74a2:	move.l d0,-(sp)
    74a4:	jsr 14e3a <__fixunssfsi>
    74aa:	addq.l #4,sp
    74ac:	move.l d0,d0
    74ae:	movea.l 16(sp),a0
    74b2:	move.l 12(a0),d1
    74b6:	move.l d1,d1
    74b8:	movea.w d0,a0
    74ba:	suba.w d1,a0
    74bc:	move.w a0,8(sp)

	CstScaleSprite( single, (WORD) thisPerson->x, (WORD) thisPerson->y);
    74c0:	movea.l 20(sp),a0
    74c4:	move.l 4(a0),d0
    74c8:	move.l d0,-(sp)
    74ca:	jsr 14a72 <__fixsfsi>
    74d0:	addq.l #4,sp
    74d2:	move.l d0,d0
    74d4:	movea.w d0,a2
    74d6:	movea.l 20(sp),a0
    74da:	move.l (a0),d0
    74dc:	move.l d0,-(sp)
    74de:	jsr 14a72 <__fixsfsi>
    74e4:	addq.l #4,sp
    74e6:	move.l d0,d0
    74e8:	movea.w d0,a0
    74ea:	move.l a2,-(sp)
    74ec:	move.l a0,-(sp)
    74ee:	move.l 24(sp),-(sp)
    74f2:	jsr 17a8 <CstScaleSprite>
    74f8:	lea 12(sp),sp
	//KPrintF("scaleSprite: This function is not implemented yet");
    74fc:	nop
    74fe:	movea.l (sp)+,a2
    7500:	addq.l #8,sp
    7502:	rts

00007504 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    7504:	    move.l 4(sp),d0
    7508:	/-- bpl.s 750c <TF_abs+0x8>
    750a:	|   neg.l d0
}
    750c:	\-> rts

0000750e <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    750e:	             lea -28(sp),sp
    7512:	             move.l a6,-(sp)
    7514:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    7516:	             moveq #120,d0
    7518:	             move.l d0,28(sp)
    751c:	             clr.l 24(sp)
    7520:	             move.l 19b50 <SysBase>,d0
    7526:	             movea.l d0,a6
    7528:	             move.l 28(sp),d0
    752c:	             move.l 24(sp),d1
    7530:	             jsr -684(a6)
    7534:	             move.l d0,20(sp)
    7538:	             move.l 20(sp),d0
    753c:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    7540:	         /-- bne.s 7548 <addPerson+0x3a>
    7542:	         |   clr.w d0
    7544:	/--------|-- bra.w 7778 <addPerson+0x26a>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    7548:	|        \-> move.l 48(sp),-(sp)
    754c:	|            jsr b700 <loadObjectType>
    7552:	|            addq.l #4,sp
    7554:	|            movea.l 16(sp),a0
    7558:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    755c:	|            movea.l 16(sp),a0
    7560:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    7568:	|            movea.l 16(sp),a0
    756c:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    7570:	|            movea.l 16(sp),a0
    7574:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    7578:	|            move.l 44(sp),-(sp)
    757c:	|            jsr 14ada <__floatsisf>
    7582:	|            addq.l #4,sp
    7584:	|            move.l d0,d2
    7586:	|            move.l 40(sp),-(sp)
    758a:	|            jsr 14ada <__floatsisf>
    7590:	|            addq.l #4,sp
    7592:	|            move.l d2,-(sp)
    7594:	|            move.l d0,-(sp)
    7596:	|            move.l 24(sp),-(sp)
    759a:	|            jsr 8fc2 <moveAndScale>
    75a0:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    75a4:	|            movea.l 16(sp),a0
    75a8:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    75ac:	|            movea.l 16(sp),a0
    75b0:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    75b6:	|            movea.l 16(sp),a0
    75ba:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    75c0:	|            movea.l 16(sp),a0
    75c4:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    75c8:	|            movea.l 16(sp),a0
    75cc:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    75d0:	|            movea.l 16(sp),a0
    75d4:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    75da:	|            movea.l 16(sp),a0
    75de:	|            clr.l 94(a0)
    newPerson->angle = 180;
    75e2:	|            movea.l 16(sp),a0
    75e6:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    75ee:	|            movea.l 16(sp),a0
    75f2:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    75fa:	|            movea.l 16(sp),a0
    75fe:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    7602:	|            movea.l 16(sp),a0
    7606:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    760a:	|            movea.l 16(sp),a0
    760e:	|            movea.l 102(a0),a0
    7612:	|            move.l 24(a0),d0
    7616:	|            movea.l 16(sp),a0
    761a:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    761e:	|            movea.l 16(sp),a0
    7622:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    7626:	|            movea.l 16(sp),a0
    762a:	|            movea.l 102(a0),a0
    762e:	|            move.l 32(a0),d0
    7632:	|            movea.l 16(sp),a0
    7636:	|            move.l d0,110(a0)
    newPerson->r = 0;
    763a:	|            movea.l 16(sp),a0
    763e:	|            clr.b 114(a0)
    newPerson->g = 0;
    7642:	|            movea.l 16(sp),a0
    7646:	|            clr.b 115(a0)
    newPerson->b = 0;
    764a:	|            movea.l 16(sp),a0
    764e:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    7652:	|            movea.l 16(sp),a0
    7656:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    765a:	|            movea.l 16(sp),a0
    765e:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    7662:	|            movea.l 16(sp),a0
    7666:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    766c:	|            clr.l -(sp)
    766e:	|            move.l 20(sp),-(sp)
    7672:	|            jsr 652a <setFrames>
    7678:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    767a:	|            movea.l 52(sp),a0
    767e:	|            movea.l (a0),a0
    7680:	|            movea.l (a0),a0
    7682:	|            movea.l 4(a0),a0
    7686:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    768a:	|     /----- bpl.s 7694 <addPerson+0x186>
    768c:	|     |      move.l 12(sp),d0
    7690:	|     |      neg.l d0
    7692:	|     |  /-- bra.s 7696 <addPerson+0x188>
    7694:	|     \--|-> moveq #1,d0
    7696:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    769a:	|            movea.l 52(sp),a0
    769e:	|            movea.l (a0),a0
    76a0:	|            movea.l (a0),a0
    76a2:	|            movea.l (a0),a0
    76a4:	|            move.l 8(a0),d0
    76a8:	|            cmp.l 8(sp),d0
    76ac:	|     /----- bgt.s 76de <addPerson+0x1d0>
        if (fNumSigned < 0) {
    76ae:	|     |      tst.l 12(sp)
    76b2:	|     |  /-- bge.s 76c0 <addPerson+0x1b2>
            newPerson->height = 5;
    76b4:	|     |  |   movea.l 16(sp),a0
    76b8:	|     |  |   moveq #5,d1
    76ba:	|     |  |   move.l d1,8(a0)
    76be:	|  /--|--|-- bra.s 770a <addPerson+0x1fc>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    76c0:	|  |  |  \-> movea.l 52(sp),a0
    76c4:	|  |  |      movea.l (a0),a0
    76c6:	|  |  |      movea.l (a0),a0
    76c8:	|  |  |      movea.l (a0),a0
    76ca:	|  |  |      movea.l 16(a0),a0
    76ce:	|  |  |      move.l 12(a0),d0
    76d2:	|  |  |      addq.l #5,d0
    76d4:	|  |  |      movea.l 16(sp),a0
    76d8:	|  |  |      move.l d0,8(a0)
    76dc:	|  +--|----- bra.s 770a <addPerson+0x1fc>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    76de:	|  |  \----> movea.l 52(sp),a0
    76e2:	|  |         movea.l (a0),a0
    76e4:	|  |         movea.l (a0),a0
    76e6:	|  |         movea.l (a0),a0
    76e8:	|  |         movea.l 16(a0),a0
    76ec:	|  |         move.l 8(sp),d1
    76f0:	|  |         move.l d1,d0
    76f2:	|  |         lsl.l #3,d0
    76f4:	|  |         sub.l d1,d0
    76f6:	|  |         add.l d0,d0
    76f8:	|  |         add.l d0,d0
    76fa:	|  |         adda.l d0,a0
    76fc:	|  |         move.l 12(a0),d0
    7700:	|  |         addq.l #5,d0
    7702:	|  |         movea.l 16(sp),a0
    7706:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    770a:	|  \-------> move.l #105480,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    7712:	|        /-- bra.s 7722 <addPerson+0x214>
        changethat = &((*changethat)->next);
    7714:	|     /--|-> movea.l 32(sp),a0
    7718:	|     |  |   move.l (a0),d0
    771a:	|     |  |   moveq #24,d1
    771c:	|     |  |   add.l d0,d1
    771e:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    7722:	|     |  \-> movea.l 32(sp),a0
    7726:	|     |      move.l (a0),d0
    7728:	|     |  /-- beq.s 7750 <addPerson+0x242>
    772a:	|     |  |   movea.l 32(sp),a0
    772e:	|     |  |   movea.l (a0),a0
    7730:	|     |  |   move.l 4(a0),d2
    7734:	|     |  |   move.l 44(sp),-(sp)
    7738:	|     |  |   jsr 14ada <__floatsisf>
    773e:	|     |  |   addq.l #4,sp
    7740:	|     |  |   move.l d0,-(sp)
    7742:	|     |  |   move.l d2,-(sp)
    7744:	|     |  |   jsr 14d00 <__ltsf2>
    774a:	|     |  |   addq.l #8,sp
    774c:	|     |  |   tst.l d0
    774e:	|     \--|-- blt.s 7714 <addPerson+0x206>
    }

    newPerson->next = (*changethat);
    7750:	|        \-> movea.l 32(sp),a0
    7754:	|            move.l (a0),d0
    7756:	|            movea.l 16(sp),a0
    775a:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    775e:	|            movea.l 32(sp),a0
    7762:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    7766:	|            movea.l 16(sp),a0
    776a:	|            move.l 102(a0),d0
    776e:	|            sne d0
    7770:	|            neg.b d0
    7772:	|            move.b d0,d0
    7774:	|            andi.w #255,d0
}
    7778:	\----------> move.l (sp)+,d2
    777a:	             movea.l (sp)+,a6
    777c:	             lea 28(sp),sp
    7780:	             rts

00007782 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    7782:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    7784:	       move.l 8(sp),-(sp)
    7788:	       jsr 887a <findPerson>
    778e:	       addq.l #4,sp
    7790:	       move.l d0,(sp)
    if (moveMe) {
    7792:	/----- beq.s 77c6 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    7794:	|      movea.l (sp),a0
    7796:	|      move.l 56(a0),d0
    779a:	|  /-- beq.s 77ac <animatePerson+0x2a>
    779c:	|  |   movea.l (sp),a0
    779e:	|  |   move.l 56(a0),d0
    77a2:	|  |   move.l d0,-(sp)
    77a4:	|  |   jsr 2d94 <abortFunction>
    77aa:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    77ac:	|  \-> movea.l (sp),a0
    77ae:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    77b2:	|      movea.l (sp),a0
    77b4:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    77b8:	|      movea.l (sp),a0
    77ba:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    77be:	|      movea.l (sp),a0
    77c0:	|      move.l 12(sp),60(a0)
    }
}
    77c6:	\----> nop
    77c8:	       addq.l #4,sp
    77ca:	       rts

000077cc <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    77cc:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    77ce:	       move.l 8(sp),-(sp)
    77d2:	       jsr 887a <findPerson>
    77d8:	       addq.l #4,sp
    77da:	       move.l d0,(sp)
    if (moveMe) {
    77dc:	/----- beq.s 781e <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    77de:	|      movea.l (sp),a0
    77e0:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    77e4:	|      movea.l (sp),a0
    77e6:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    77ec:	|      move.l (sp),-(sp)
    77ee:	|      jsr 9140 <rethinkAngle>
    77f4:	|      addq.l #4,sp
        if (moveMe->walking) {
    77f6:	|      movea.l (sp),a0
    77f8:	|      move.w 52(a0),d0
    77fc:	|  /-- beq.s 7810 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    77fe:	|  |   pea 1 <_start+0x1>
    7802:	|  |   move.l 4(sp),-(sp)
    7806:	|  |   jsr 652a <setFrames>
    780c:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    780e:	+--|-- bra.s 781e <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    7810:	|  \-> clr.l -(sp)
    7812:	|      move.l 4(sp),-(sp)
    7816:	|      jsr 652a <setFrames>
    781c:	|      addq.l #8,sp
}
    781e:	\----> nop
    7820:	       addq.l #4,sp
    7822:	       rts

00007824 <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    7824:	             lea -36(sp),sp
    7828:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    782a:	             movea.l 44(sp),a0
    782e:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    7834:	             moveq #12,d0
    7836:	             move.l d0,28(sp)
    783a:	             clr.l 24(sp)
    783e:	             move.l 19b50 <SysBase>,d0
    7844:	             movea.l d0,a6
    7846:	             move.l 28(sp),d0
    784a:	             move.l 24(sp),d1
    784e:	             jsr -684(a6)
    7852:	             move.l d0,20(sp)
    7856:	             move.l 20(sp),d0
    785a:	             move.l d0,16(sp)
	if (!(newAnim)) {
    785e:	         /-- bne.s 7874 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    7860:	         |   pea 16393 <PutChar+0x1221>
    7866:	         |   jsr 14822 <KPrintF>
    786c:	         |   addq.l #4,sp
		return NULL;
    786e:	         |   moveq #0,d0
    7870:	/--------|-- bra.w 79c6 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    7874:	|        \-> movea.l 44(sp),a0
    7878:	|            move.l (a0),d0
    787a:	|            movea.l 16(sp),a0
    787e:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    7880:	|            movea.l 16(sp),a0
    7884:	|            movea.l (a0),a0
    7886:	|            move.l 4(a0),d0
    788a:	|            addq.l #1,d0
    788c:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    7890:	|            movea.l 16(sp),a0
    7894:	|            move.l 32(sp),8(a0)

	if (num) {
    789a:	|  /-------- beq.w 79ba <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    789e:	|  |         move.l 32(sp),d1
    78a2:	|  |         move.l d1,d0
    78a4:	|  |         add.l d0,d0
    78a6:	|  |         add.l d1,d0
    78a8:	|  |         add.l d0,d0
    78aa:	|  |         add.l d0,d0
    78ac:	|  |         move.l d0,12(sp)
    78b0:	|  |         clr.l 8(sp)
    78b4:	|  |         move.l 19b50 <SysBase>,d0
    78ba:	|  |         movea.l d0,a6
    78bc:	|  |         move.l 12(sp),d0
    78c0:	|  |         move.l 8(sp),d1
    78c4:	|  |         jsr -684(a6)
    78c8:	|  |         move.l d0,4(sp)
    78cc:	|  |         move.l 4(sp),d0
    78d0:	|  |         movea.l 16(sp),a0
    78d4:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    78d8:	|  |         movea.l 16(sp),a0
    78dc:	|  |         move.l 4(a0),d0
    78e0:	|  |     /-- bne.s 78f6 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    78e2:	|  |     |   pea 16393 <PutChar+0x1221>
    78e8:	|  |     |   jsr 14822 <KPrintF>
    78ee:	|  |     |   addq.l #4,sp
			return NULL;
    78f0:	|  |     |   moveq #0,d0
    78f2:	+--|-----|-- bra.w 79c6 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    78f6:	|  |     \-> clr.l 36(sp)
    78fa:	|  |     /-- bra.w 79ac <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    78fe:	|  |  /--|-> movea.l 44(sp),a0
    7902:	|  |  |  |   movea.l 4(a0),a0
    7906:	|  |  |  |   move.l 36(sp),d1
    790a:	|  |  |  |   move.l d1,d0
    790c:	|  |  |  |   add.l d0,d0
    790e:	|  |  |  |   add.l d1,d0
    7910:	|  |  |  |   add.l d0,d0
    7912:	|  |  |  |   add.l d0,d0
    7914:	|  |  |  |   lea (0,a0,d0.l),a1
    7918:	|  |  |  |   movea.l 16(sp),a0
    791c:	|  |  |  |   movea.l 4(a0),a0
    7920:	|  |  |  |   move.l 36(sp),d1
    7924:	|  |  |  |   move.l d1,d0
    7926:	|  |  |  |   add.l d0,d0
    7928:	|  |  |  |   add.l d1,d0
    792a:	|  |  |  |   add.l d0,d0
    792c:	|  |  |  |   add.l d0,d0
    792e:	|  |  |  |   adda.l d0,a0
    7930:	|  |  |  |   move.l (a1),d0
    7932:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    7934:	|  |  |  |   movea.l 44(sp),a0
    7938:	|  |  |  |   movea.l 4(a0),a0
    793c:	|  |  |  |   move.l 36(sp),d1
    7940:	|  |  |  |   move.l d1,d0
    7942:	|  |  |  |   add.l d0,d0
    7944:	|  |  |  |   add.l d1,d0
    7946:	|  |  |  |   add.l d0,d0
    7948:	|  |  |  |   add.l d0,d0
    794a:	|  |  |  |   lea (0,a0,d0.l),a1
    794e:	|  |  |  |   movea.l 16(sp),a0
    7952:	|  |  |  |   movea.l 4(a0),a0
    7956:	|  |  |  |   move.l 36(sp),d1
    795a:	|  |  |  |   move.l d1,d0
    795c:	|  |  |  |   add.l d0,d0
    795e:	|  |  |  |   add.l d1,d0
    7960:	|  |  |  |   add.l d0,d0
    7962:	|  |  |  |   add.l d0,d0
    7964:	|  |  |  |   adda.l d0,a0
    7966:	|  |  |  |   move.l 4(a1),d0
    796a:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    796e:	|  |  |  |   movea.l 44(sp),a0
    7972:	|  |  |  |   movea.l 4(a0),a0
    7976:	|  |  |  |   move.l 36(sp),d1
    797a:	|  |  |  |   move.l d1,d0
    797c:	|  |  |  |   add.l d0,d0
    797e:	|  |  |  |   add.l d1,d0
    7980:	|  |  |  |   add.l d0,d0
    7982:	|  |  |  |   add.l d0,d0
    7984:	|  |  |  |   lea (0,a0,d0.l),a1
    7988:	|  |  |  |   movea.l 16(sp),a0
    798c:	|  |  |  |   movea.l 4(a0),a0
    7990:	|  |  |  |   move.l 36(sp),d1
    7994:	|  |  |  |   move.l d1,d0
    7996:	|  |  |  |   add.l d0,d0
    7998:	|  |  |  |   add.l d1,d0
    799a:	|  |  |  |   add.l d0,d0
    799c:	|  |  |  |   add.l d0,d0
    799e:	|  |  |  |   adda.l d0,a0
    79a0:	|  |  |  |   move.l 8(a1),d0
    79a4:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    79a8:	|  |  |  |   addq.l #1,36(sp)
    79ac:	|  |  |  \-> move.l 36(sp),d0
    79b0:	|  |  |      cmp.l 32(sp),d0
    79b4:	|  |  \----- blt.w 78fe <copyAnim+0xda>
    79b8:	|  |     /-- bra.s 79c2 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    79ba:	|  \-----|-> movea.l 16(sp),a0
    79be:	|        |   clr.l 4(a0)
	}

	return newAnim;
    79c2:	|        \-> move.l 16(sp),d0
}
    79c6:	\----------> movea.l (sp)+,a6
    79c8:	             lea 36(sp),sp
    79cc:	             rts

000079ce <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    79ce:	                lea -44(sp),sp
    79d2:	                move.l a6,-(sp)
    79d4:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    79d6:	                moveq #12,d0
    79d8:	                move.l d0,40(sp)
    79dc:	                clr.l 36(sp)
    79e0:	                move.l 19b50 <SysBase>,d0
    79e6:	                movea.l d0,a6
    79e8:	                move.l 40(sp),d0
    79ec:	                move.l 36(sp),d1
    79f0:	                jsr -684(a6)
    79f4:	                move.l d0,32(sp)
    79f8:	                move.l 32(sp),d0
    79fc:	                move.l d0,28(sp)
	if( !newP) {
    7a00:	            /-- bne.s 7a16 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    7a02:	            |   pea 163b4 <PutChar+0x1242>
    7a08:	            |   jsr 14822 <KPrintF>
    7a0e:	            |   addq.l #4,sp
		return NULL;
    7a10:	            |   moveq #0,d0
    7a12:	/-----------|-- bra.w 7be6 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    7a16:	|           \-> movea.l 28(sp),a0
    7a1a:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    7a20:	|               move.l 56(sp),d1
    7a24:	|               move.l d1,d0
    7a26:	|               add.l d0,d0
    7a28:	|               add.l d1,d0
    7a2a:	|               add.l d0,d0
    7a2c:	|               add.l d0,d0
    7a2e:	|               move.l d0,24(sp)
    7a32:	|               clr.l 20(sp)
    7a36:	|               move.l 19b50 <SysBase>,d0
    7a3c:	|               movea.l d0,a6
    7a3e:	|               move.l 24(sp),d0
    7a42:	|               move.l 20(sp),d1
    7a46:	|               jsr -684(a6)
    7a4a:	|               move.l d0,16(sp)
    7a4e:	|               move.l 16(sp),d0
    7a52:	|               movea.l 28(sp),a0
    7a56:	|               move.l d0,4(a0)
	if( !newP->frames) {
    7a5a:	|               movea.l 28(sp),a0
    7a5e:	|               move.l 4(a0),d0
    7a62:	|           /-- bne.s 7a78 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    7a64:	|           |   pea 163b4 <PutChar+0x1242>
    7a6a:	|           |   jsr 14822 <KPrintF>
    7a70:	|           |   addq.l #4,sp
		return NULL;
    7a72:	|           |   moveq #0,d0
    7a74:	+-----------|-- bra.w 7be6 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    7a78:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    7a7e:	|               movea.l 60(sp),a0
    7a82:	|               move.l (a0),44(sp)
	while (a) {
    7a86:	|     /-------- bra.w 7bda <createPersonaAnim+0x20c>
		a --;
    7a8a:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    7a8e:	|  |  |         movea.l 28(sp),a0
    7a92:	|  |  |         movea.l 4(a0),a0
    7a96:	|  |  |         move.l 48(sp),d1
    7a9a:	|  |  |         move.l d1,d0
    7a9c:	|  |  |         add.l d0,d0
    7a9e:	|  |  |         add.l d1,d0
    7aa0:	|  |  |         add.l d0,d0
    7aa2:	|  |  |         add.l d0,d0
    7aa4:	|  |  |         adda.l d0,a0
    7aa6:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    7aaa:	|  |  |         movea.l 44(sp),a0
    7aae:	|  |  |         move.l (a0),d0
    7ab0:	|  |  |         moveq #5,d1
    7ab2:	|  |  |         cmp.l d0,d1
    7ab4:	|  |  |     /-- bne.s 7ae0 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    7ab6:	|  |  |     |   movea.l 28(sp),a0
    7aba:	|  |  |     |   movea.l 4(a0),a0
    7abe:	|  |  |     |   move.l 48(sp),d1
    7ac2:	|  |  |     |   move.l d1,d0
    7ac4:	|  |  |     |   add.l d0,d0
    7ac6:	|  |  |     |   add.l d1,d0
    7ac8:	|  |  |     |   add.l d0,d0
    7aca:	|  |  |     |   add.l d0,d0
    7acc:	|  |  |     |   lea (0,a0,d0.l),a1
    7ad0:	|  |  |     |   movea.l 44(sp),a0
    7ad4:	|  |  |     |   move.l 4(a0),d0
    7ad8:	|  |  |     |   move.l d0,8(a1)
    7adc:	|  |  |  /--|-- bra.w 7b88 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    7ae0:	|  |  |  |  \-> movea.l 44(sp),a0
    7ae4:	|  |  |  |      move.l (a0),d0
    7ae6:	|  |  |  |      moveq #2,d1
    7ae8:	|  |  |  |      cmp.l d0,d1
    7aea:	|  |  |  |  /-- bne.s 7b16 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    7aec:	|  |  |  |  |   movea.l 44(sp),a0
    7af0:	|  |  |  |  |   move.l 4(a0),d2
    7af4:	|  |  |  |  |   movea.l 28(sp),a0
    7af8:	|  |  |  |  |   movea.l 4(a0),a0
    7afc:	|  |  |  |  |   move.l 48(sp),d1
    7b00:	|  |  |  |  |   move.l d1,d0
    7b02:	|  |  |  |  |   add.l d0,d0
    7b04:	|  |  |  |  |   add.l d1,d0
    7b06:	|  |  |  |  |   add.l d0,d0
    7b08:	|  |  |  |  |   add.l d0,d0
    7b0a:	|  |  |  |  |   adda.l d0,a0
    7b0c:	|  |  |  |  |   move.l d2,d0
    7b0e:	|  |  |  |  |   neg.l d0
    7b10:	|  |  |  |  |   move.l d0,8(a0)
    7b14:	|  |  |  +--|-- bra.s 7b88 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    7b16:	|  |  |  |  \-> movea.l 44(sp),a0
    7b1a:	|  |  |  |      move.l (a0),d0
    7b1c:	|  |  |  |      moveq #6,d1
    7b1e:	|  |  |  |      cmp.l d0,d1
    7b20:	|  |  |  |  /-- bne.s 7b68 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    7b22:	|  |  |  |  |   movea.l 44(sp),a0
    7b26:	|  |  |  |  |   movea.l 4(a0),a0
    7b2a:	|  |  |  |  |   move.l (a0),d0
    7b2c:	|  |  |  |  |   move.l d0,-(sp)
    7b2e:	|  |  |  |  |   pea 1 <_start+0x1>
    7b32:	|  |  |  |  |   lea 20(sp),a0
    7b36:	|  |  |  |  |   move.l a0,-(sp)
    7b38:	|  |  |  |  |   jsr 127da <getValueType>
    7b3e:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    7b42:	|  |  |  |  |   movea.l 44(sp),a0
    7b46:	|  |  |  |  |   movea.l 4(a0),a0
    7b4a:	|  |  |  |  |   movea.l (a0),a0
    7b4c:	|  |  |  |  |   move.l 8(a0),d0
    7b50:	|  |  |  |  |   move.l d0,-(sp)
    7b52:	|  |  |  |  |   pea 1 <_start+0x1>
    7b56:	|  |  |  |  |   lea 16(sp),a0
    7b5a:	|  |  |  |  |   move.l a0,-(sp)
    7b5c:	|  |  |  |  |   jsr 127da <getValueType>
    7b62:	|  |  |  |  |   lea 12(sp),sp
    7b66:	|  |  |  +--|-- bra.s 7b88 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    7b68:	|  |  |  |  \-> move.l 44(sp),d0
    7b6c:	|  |  |  |      move.l d0,-(sp)
    7b6e:	|  |  |  |      pea 1 <_start+0x1>
    7b72:	|  |  |  |      lea 20(sp),a0
    7b76:	|  |  |  |      move.l a0,-(sp)
    7b78:	|  |  |  |      jsr 127da <getValueType>
    7b7e:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    7b82:	|  |  |  |      moveq #1,d0
    7b84:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    7b88:	|  |  |  \----> move.l 60(sp),-(sp)
    7b8c:	|  |  |         jsr 1315e <trimStack>
    7b92:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    7b94:	|  |  |         movea.l 28(sp),a0
    7b98:	|  |  |         movea.l 4(a0),a0
    7b9c:	|  |  |         move.l 48(sp),d1
    7ba0:	|  |  |         move.l d1,d0
    7ba2:	|  |  |         add.l d0,d0
    7ba4:	|  |  |         add.l d1,d0
    7ba6:	|  |  |         add.l d0,d0
    7ba8:	|  |  |         add.l d0,d0
    7baa:	|  |  |         adda.l d0,a0
    7bac:	|  |  |         move.l 12(sp),d0
    7bb0:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    7bb2:	|  |  |         movea.l 28(sp),a0
    7bb6:	|  |  |         movea.l 4(a0),a0
    7bba:	|  |  |         move.l 48(sp),d1
    7bbe:	|  |  |         move.l d1,d0
    7bc0:	|  |  |         add.l d0,d0
    7bc2:	|  |  |         add.l d1,d0
    7bc4:	|  |  |         add.l d0,d0
    7bc6:	|  |  |         add.l d0,d0
    7bc8:	|  |  |         adda.l d0,a0
    7bca:	|  |  |         move.l 8(sp),d0
    7bce:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    7bd2:	|  |  |         movea.l 60(sp),a0
    7bd6:	|  |  |         move.l (a0),44(sp)
	while (a) {
    7bda:	|  |  \-------> tst.l 48(sp)
    7bde:	|  \----------- bne.w 7a8a <createPersonaAnim+0xbc>
	}

	return newP;
    7be2:	|               move.l 28(sp),d0
}
    7be6:	\-------------> move.l (sp)+,d2
    7be8:	                movea.l (sp)+,a6
    7bea:	                lea 44(sp),sp
    7bee:	                rts

00007bf0 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    7bf0:	       lea -12(sp),sp
    7bf4:	       move.l a6,-(sp)
	int timesused = --orig->theSprites->timesUsed;
    7bf6:	       movea.l 20(sp),a0
    7bfa:	       movea.l (a0),a0
    7bfc:	       move.l 4(a0),d0
    7c00:	       subq.l #1,d0
    7c02:	       move.l d0,4(a0)
    7c06:	       move.l 4(a0),12(sp)
	
	if(!timesused)
    7c0c:	   /-- bne.s 7c1e <deleteAnim+0x2e>
	{
		forgetSpriteBank( orig->theSprites);
    7c0e:	   |   movea.l 20(sp),a0
    7c12:	   |   move.l (a0),d0
    7c14:	   |   move.l d0,-(sp)
    7c16:	   |   jsr 7030 <forgetSpriteBank>
    7c1c:	   |   addq.l #4,sp
	}
	
	if (orig)
    7c1e:	   \-> tst.l 20(sp)
    7c22:	/----- beq.s 7c62 <deleteAnim+0x72>
	{
		if (orig -> numFrames) {
    7c24:	|      movea.l 20(sp),a0
    7c28:	|      move.l 8(a0),d0
    7c2c:	|  /-- beq.s 7c48 <deleteAnim+0x58>
			FreeVec( orig->frames);
    7c2e:	|  |   movea.l 20(sp),a0
    7c32:	|  |   move.l 4(a0),8(sp)
    7c38:	|  |   move.l 19b50 <SysBase>,d0
    7c3e:	|  |   movea.l d0,a6
    7c40:	|  |   movea.l 8(sp),a1
    7c44:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    7c48:	|  \-> move.l 20(sp),4(sp)
    7c4e:	|      move.l 19b50 <SysBase>,d0
    7c54:	|      movea.l d0,a6
    7c56:	|      movea.l 4(sp),a1
    7c5a:	|      jsr -690(a6)
		orig = NULL;
    7c5e:	|      clr.l 20(sp)
	}	
	
}
    7c62:	\----> nop
    7c64:	       movea.l (sp)+,a6
    7c66:	       lea 12(sp),sp
    7c6a:	       rts

00007c6c <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    7c6c:	          lea -124(sp),sp
    7c70:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    7c74:	          movea.l 152(sp),a0
    7c78:	          move.l 44(a0),d1
    7c7c:	          movea.l 152(sp),a0
    7c80:	          move.l 48(a0),d0
    7c84:	          cmp.l d1,d0
    7c86:	      /-- bne.s 7cb6 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    7c88:	      |   movea.l 152(sp),a0
    7c8c:	      |   moveq #-1,d0
    7c8e:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    7c92:	      |   movea.l 152(sp),a0
    7c96:	      |   move.l 28(a0),d0
    7c9a:	      |   movea.l 152(sp),a0
    7c9e:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    7ca2:	      |   movea.l 152(sp),a0
    7ca6:	      |   move.l 32(a0),d0
    7caa:	      |   movea.l 152(sp),a0
    7cae:	      |   move.l d0,40(a0)
    7cb2:	   /--|-- bra.w 821c <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    7cb6:	   |  \-> movea.l 19cb0 <currentFloor>,a0
    7cbc:	   |      move.l 16(a0),d1
    7cc0:	   |      movea.l 152(sp),a0
    7cc4:	   |      move.l 44(a0),d0
    7cc8:	   |      add.l d0,d0
    7cca:	   |      add.l d0,d0
    7ccc:	   |      movea.l d1,a0
    7cce:	   |      adda.l d0,a0
    7cd0:	   |      move.l (a0),d1
    7cd2:	   |      movea.l 152(sp),a0
    7cd6:	   |      move.l 48(a0),d0
    7cda:	   |      add.l d0,d0
    7cdc:	   |      add.l d0,d0
    7cde:	   |      movea.l d1,a0
    7ce0:	   |      adda.l d0,a0
    7ce2:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    7ce6:	   |      moveq #-1,d0
    7ce8:	   |      cmp.l 144(sp),d0
    7cec:	   |  /-- bne.s 7cf4 <doBorderStuff+0x88>
    7cee:	   |  |   clr.w d0
    7cf0:	/--|--|-- bra.w 831c <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    7cf4:	|  |  \-> movea.l 19cb0 <currentFloor>,a0
    7cfa:	|  |      move.l 12(a0),d1
    7cfe:	|  |      move.l 144(sp),d0
    7d02:	|  |      lsl.l #3,d0
    7d04:	|  |      add.l d0,d1
    7d06:	|  |      movea.l 19cb0 <currentFloor>,a0
    7d0c:	|  |      movea.l 12(a0),a1
    7d10:	|  |      movea.l 152(sp),a0
    7d14:	|  |      move.l 44(a0),d0
    7d18:	|  |      lsl.l #3,d0
    7d1a:	|  |      add.l a1,d0
    7d1c:	|  |      lea 40(sp),a0
    7d20:	|  |      move.l a0,-(sp)
    7d22:	|  |      lea 48(sp),a0
    7d26:	|  |      move.l a0,-(sp)
    7d28:	|  |      move.l d1,-(sp)
    7d2a:	|  |      move.l d0,-(sp)
    7d2c:	|  |      jsr 13aa4 <getMatchingCorners>
    7d32:	|  |      lea 16(sp),sp
    7d36:	|  |      tst.w d0
    7d38:	|  |  /-- bne.s 7d4e <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    7d3a:	|  |  |   pea 163de <PutChar+0x126c>
    7d40:	|  |  |   jsr 14822 <KPrintF>
    7d46:	|  |  |   addq.l #4,sp
            return FALSE;
    7d48:	|  |  |   clr.w d0
    7d4a:	+--|--|-- bra.w 831c <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    7d4e:	|  |  \-> movea.l 152(sp),a0
    7d52:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    7d58:	|  |      movea.l 152(sp),a0
    7d5c:	|  |      move.l (a0),d0
    7d5e:	|  |      move.l d0,-(sp)
    7d60:	|  |      jsr 14a72 <__fixsfsi>
    7d66:	|  |      addq.l #4,sp
    7d68:	|  |      move.l d0,140(sp)
    7d6c:	|  |      movea.l 152(sp),a0
    7d70:	|  |      move.l 4(a0),d0
    7d74:	|  |      move.l d0,-(sp)
    7d76:	|  |      jsr 14a72 <__fixsfsi>
    7d7c:	|  |      addq.l #4,sp
    7d7e:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    7d82:	|  |      movea.l 152(sp),a0
    7d86:	|  |      move.l 28(a0),132(sp)
    7d8c:	|  |      movea.l 152(sp),a0
    7d90:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    7d96:	|  |      movea.l 19cb0 <currentFloor>,a0
    7d9c:	|  |      move.l 4(a0),d1
    7da0:	|  |      move.l 44(sp),d0
    7da4:	|  |      lsl.l #3,d0
    7da6:	|  |      movea.l d1,a0
    7da8:	|  |      adda.l d0,a0
    7daa:	|  |      move.l (a0),124(sp)
    7dae:	|  |      movea.l 19cb0 <currentFloor>,a0
    7db4:	|  |      move.l 4(a0),d1
    7db8:	|  |      move.l 44(sp),d0
    7dbc:	|  |      lsl.l #3,d0
    7dbe:	|  |      movea.l d1,a0
    7dc0:	|  |      adda.l d0,a0
    7dc2:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    7dc8:	|  |      movea.l 19cb0 <currentFloor>,a0
    7dce:	|  |      move.l 4(a0),d1
    7dd2:	|  |      move.l 40(sp),d0
    7dd6:	|  |      lsl.l #3,d0
    7dd8:	|  |      movea.l d1,a0
    7dda:	|  |      adda.l d0,a0
    7ddc:	|  |      move.l (a0),116(sp)
    7de0:	|  |      movea.l 19cb0 <currentFloor>,a0
    7de6:	|  |      move.l 4(a0),d1
    7dea:	|  |      move.l 40(sp),d0
    7dee:	|  |      lsl.l #3,d0
    7df0:	|  |      movea.l d1,a0
    7df2:	|  |      adda.l d0,a0
    7df4:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    7dfa:	|  |      move.l 140(sp),d0
    7dfe:	|  |      sub.l 132(sp),d0
    7e02:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    7e06:	|  |      move.l 136(sp),d0
    7e0a:	|  |      sub.l 128(sp),d0
    7e0e:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    7e12:	|  |      move.l 116(sp),d0
    7e16:	|  |      sub.l 124(sp),d0
    7e1a:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    7e1e:	|  |      move.l 112(sp),d0
    7e22:	|  |      sub.l 120(sp),d0
    7e26:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    7e2a:	|  |      move.l 124(sp),d0
    7e2e:	|  |      sub.l 140(sp),d0
    7e32:	|  |      move.l 104(sp),-(sp)
    7e36:	|  |      move.l d0,-(sp)
    7e38:	|  |      jsr 1505c <__mulsi3>
    7e3e:	|  |      addq.l #8,sp
    7e40:	|  |      move.l d0,d2
    7e42:	|  |      move.l 120(sp),d0
    7e46:	|  |      sub.l 136(sp),d0
    7e4a:	|  |      move.l 108(sp),-(sp)
    7e4e:	|  |      move.l d0,-(sp)
    7e50:	|  |      jsr 1505c <__mulsi3>
    7e56:	|  |      addq.l #8,sp
    7e58:	|  |      move.l d2,d1
    7e5a:	|  |      sub.l d0,d1
    7e5c:	|  |      move.l d1,-(sp)
    7e5e:	|  |      jsr 14a9a <__floatsidf>
    7e64:	|  |      addq.l #4,sp
    7e66:	|  |      move.l d0,32(sp)
    7e6a:	|  |      move.l d1,36(sp)
    7e6e:	|  |      move.l 32(sp),88(sp)
    7e74:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    7e7a:	|  |      move.l 96(sp),-(sp)
    7e7e:	|  |      move.l 112(sp),-(sp)
    7e82:	|  |      jsr 1505c <__mulsi3>
    7e88:	|  |      addq.l #8,sp
    7e8a:	|  |      move.l d0,d2
    7e8c:	|  |      move.l 100(sp),-(sp)
    7e90:	|  |      move.l 108(sp),-(sp)
    7e94:	|  |      jsr 1505c <__mulsi3>
    7e9a:	|  |      addq.l #8,sp
    7e9c:	|  |      move.l d2,d1
    7e9e:	|  |      sub.l d0,d1
    7ea0:	|  |      move.l d1,-(sp)
    7ea2:	|  |      jsr 14a9a <__floatsidf>
    7ea8:	|  |      addq.l #4,sp
    7eaa:	|  |      move.l d1,-(sp)
    7eac:	|  |      move.l d0,-(sp)
    7eae:	|  |      move.l 100(sp),-(sp)
    7eb2:	|  |      move.l 100(sp),-(sp)
    7eb6:	|  |      jsr 14924 <__divdf3>
    7ebc:	|  |      lea 16(sp),sp
    7ec0:	|  |      move.l d0,24(sp)
    7ec4:	|  |      move.l d1,28(sp)
    7ec8:	|  |      move.l 24(sp),88(sp)
    7ece:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    7ed4:	|  |      clr.l -(sp)
    7ed6:	|  |      clr.l -(sp)
    7ed8:	|  |      move.l 100(sp),-(sp)
    7edc:	|  |      move.l 100(sp),-(sp)
    7ee0:	|  |      jsr 14bf8 <__gtdf2>
    7ee6:	|  |      lea 16(sp),sp
    7eea:	|  |      tst.l d0
    7eec:	|  |  /-- ble.w 7fc4 <doBorderStuff+0x358>
    7ef0:	|  |  |   clr.l -(sp)
    7ef2:	|  |  |   move.l #1072693248,-(sp)
    7ef8:	|  |  |   move.l 100(sp),-(sp)
    7efc:	|  |  |   move.l 100(sp),-(sp)
    7f00:	|  |  |   jsr 14cb2 <__ltdf2>
    7f06:	|  |  |   lea 16(sp),sp
    7f0a:	|  |  |   tst.l d0
    7f0c:	|  |  +-- bge.w 7fc4 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    7f10:	|  |  |   move.l 124(sp),-(sp)
    7f14:	|  |  |   jsr 14a9a <__floatsidf>
    7f1a:	|  |  |   addq.l #4,sp
    7f1c:	|  |  |   move.l d0,d2
    7f1e:	|  |  |   move.l d1,d3
    7f20:	|  |  |   move.l 100(sp),-(sp)
    7f24:	|  |  |   jsr 14a9a <__floatsidf>
    7f2a:	|  |  |   addq.l #4,sp
    7f2c:	|  |  |   move.l 92(sp),-(sp)
    7f30:	|  |  |   move.l 92(sp),-(sp)
    7f34:	|  |  |   move.l d1,-(sp)
    7f36:	|  |  |   move.l d0,-(sp)
    7f38:	|  |  |   jsr 14b2a <__muldf3>
    7f3e:	|  |  |   lea 16(sp),sp
    7f42:	|  |  |   move.l d1,-(sp)
    7f44:	|  |  |   move.l d0,-(sp)
    7f46:	|  |  |   move.l d3,-(sp)
    7f48:	|  |  |   move.l d2,-(sp)
    7f4a:	|  |  |   jsr 148c2 <__adddf3>
    7f50:	|  |  |   lea 16(sp),sp
    7f54:	|  |  |   move.l d1,-(sp)
    7f56:	|  |  |   move.l d0,-(sp)
    7f58:	|  |  |   jsr 14a32 <__fixdfsi>
    7f5e:	|  |  |   addq.l #8,sp
    7f60:	|  |  |   movea.l 152(sp),a0
    7f64:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    7f68:	|  |  |   move.l 120(sp),-(sp)
    7f6c:	|  |  |   jsr 14a9a <__floatsidf>
    7f72:	|  |  |   addq.l #4,sp
    7f74:	|  |  |   move.l d0,d2
    7f76:	|  |  |   move.l d1,d3
    7f78:	|  |  |   move.l 96(sp),-(sp)
    7f7c:	|  |  |   jsr 14a9a <__floatsidf>
    7f82:	|  |  |   addq.l #4,sp
    7f84:	|  |  |   move.l 92(sp),-(sp)
    7f88:	|  |  |   move.l 92(sp),-(sp)
    7f8c:	|  |  |   move.l d1,-(sp)
    7f8e:	|  |  |   move.l d0,-(sp)
    7f90:	|  |  |   jsr 14b2a <__muldf3>
    7f96:	|  |  |   lea 16(sp),sp
    7f9a:	|  |  |   move.l d1,-(sp)
    7f9c:	|  |  |   move.l d0,-(sp)
    7f9e:	|  |  |   move.l d3,-(sp)
    7fa0:	|  |  |   move.l d2,-(sp)
    7fa2:	|  |  |   jsr 148c2 <__adddf3>
    7fa8:	|  |  |   lea 16(sp),sp
    7fac:	|  |  |   move.l d1,-(sp)
    7fae:	|  |  |   move.l d0,-(sp)
    7fb0:	|  |  |   jsr 14a32 <__fixdfsi>
    7fb6:	|  |  |   addq.l #8,sp
    7fb8:	|  |  |   movea.l 152(sp),a0
    7fbc:	|  |  |   move.l d0,40(a0)
    7fc0:	|  +--|-- bra.w 821c <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    7fc4:	|  |  \-> move.l 140(sp),d0
    7fc8:	|  |      sub.l 124(sp),d0
    7fcc:	|  |      move.l d0,84(sp)
    7fd0:	|  |      move.l 140(sp),d0
    7fd4:	|  |      sub.l 116(sp),d0
    7fd8:	|  |      move.l d0,80(sp)
    7fdc:	|  |      move.l 132(sp),d0
    7fe0:	|  |      sub.l 124(sp),d0
    7fe4:	|  |      move.l d0,76(sp)
    7fe8:	|  |      move.l 132(sp),d0
    7fec:	|  |      sub.l 116(sp),d0
    7ff0:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    7ff4:	|  |      move.l 136(sp),d0
    7ff8:	|  |      sub.l 120(sp),d0
    7ffc:	|  |      move.l d0,68(sp)
    8000:	|  |      move.l 136(sp),d0
    8004:	|  |      sub.l 112(sp),d0
    8008:	|  |      move.l d0,64(sp)
    800c:	|  |      move.l 128(sp),d0
    8010:	|  |      sub.l 120(sp),d0
    8014:	|  |      move.l d0,60(sp)
    8018:	|  |      move.l 128(sp),d0
    801c:	|  |      sub.l 112(sp),d0
    8020:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    8024:	|  |      move.l 84(sp),-(sp)
    8028:	|  |      move.l 88(sp),-(sp)
    802c:	|  |      jsr 1505c <__mulsi3>
    8032:	|  |      addq.l #8,sp
    8034:	|  |      move.l d0,84(sp)
    8038:	|  |      move.l 80(sp),-(sp)
    803c:	|  |      move.l 84(sp),-(sp)
    8040:	|  |      jsr 1505c <__mulsi3>
    8046:	|  |      addq.l #8,sp
    8048:	|  |      move.l d0,80(sp)
    804c:	|  |      move.l 76(sp),-(sp)
    8050:	|  |      move.l 80(sp),-(sp)
    8054:	|  |      jsr 1505c <__mulsi3>
    805a:	|  |      addq.l #8,sp
    805c:	|  |      move.l d0,76(sp)
    8060:	|  |      move.l 72(sp),-(sp)
    8064:	|  |      move.l 76(sp),-(sp)
    8068:	|  |      jsr 1505c <__mulsi3>
    806e:	|  |      addq.l #8,sp
    8070:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    8074:	|  |      move.l 68(sp),-(sp)
    8078:	|  |      move.l 72(sp),-(sp)
    807c:	|  |      jsr 1505c <__mulsi3>
    8082:	|  |      addq.l #8,sp
    8084:	|  |      move.l d0,68(sp)
    8088:	|  |      move.l 64(sp),-(sp)
    808c:	|  |      move.l 68(sp),-(sp)
    8090:	|  |      jsr 1505c <__mulsi3>
    8096:	|  |      addq.l #8,sp
    8098:	|  |      move.l d0,64(sp)
    809c:	|  |      move.l 60(sp),-(sp)
    80a0:	|  |      move.l 64(sp),-(sp)
    80a4:	|  |      jsr 1505c <__mulsi3>
    80aa:	|  |      addq.l #8,sp
    80ac:	|  |      move.l d0,60(sp)
    80b0:	|  |      move.l 56(sp),-(sp)
    80b4:	|  |      move.l 60(sp),-(sp)
    80b8:	|  |      jsr 1505c <__mulsi3>
    80be:	|  |      addq.l #8,sp
    80c0:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    80c4:	|  |      move.l 84(sp),-(sp)
    80c8:	|  |      jsr 14a9a <__floatsidf>
    80ce:	|  |      addq.l #4,sp
    80d0:	|  |      move.l d0,d2
    80d2:	|  |      move.l d1,d3
    80d4:	|  |      move.l 68(sp),-(sp)
    80d8:	|  |      jsr 14a9a <__floatsidf>
    80de:	|  |      addq.l #4,sp
    80e0:	|  |      move.l d1,-(sp)
    80e2:	|  |      move.l d0,-(sp)
    80e4:	|  |      move.l d3,-(sp)
    80e6:	|  |      move.l d2,-(sp)
    80e8:	|  |      jsr 148c2 <__adddf3>
    80ee:	|  |      lea 16(sp),sp
    80f2:	|  |      move.l d1,-(sp)
    80f4:	|  |      move.l d0,-(sp)
    80f6:	|  |      jsr 15012 <sqrt>
    80fc:	|  |      addq.l #8,sp
    80fe:	|  |      move.l d0,d2
    8100:	|  |      move.l d1,d3
    8102:	|  |      move.l 76(sp),-(sp)
    8106:	|  |      jsr 14a9a <__floatsidf>
    810c:	|  |      addq.l #4,sp
    810e:	|  |      move.l d0,d4
    8110:	|  |      move.l d1,d5
    8112:	|  |      move.l 60(sp),-(sp)
    8116:	|  |      jsr 14a9a <__floatsidf>
    811c:	|  |      addq.l #4,sp
    811e:	|  |      move.l d1,-(sp)
    8120:	|  |      move.l d0,-(sp)
    8122:	|  |      move.l d5,-(sp)
    8124:	|  |      move.l d4,-(sp)
    8126:	|  |      jsr 148c2 <__adddf3>
    812c:	|  |      lea 16(sp),sp
    8130:	|  |      move.l d1,-(sp)
    8132:	|  |      move.l d0,-(sp)
    8134:	|  |      jsr 15012 <sqrt>
    813a:	|  |      addq.l #8,sp
    813c:	|  |      move.l d1,-(sp)
    813e:	|  |      move.l d0,-(sp)
    8140:	|  |      move.l d3,-(sp)
    8142:	|  |      move.l d2,-(sp)
    8144:	|  |      jsr 148c2 <__adddf3>
    814a:	|  |      lea 16(sp),sp
    814e:	|  |      move.l d0,d2
    8150:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    8152:	|  |      move.l 80(sp),-(sp)
    8156:	|  |      jsr 14a9a <__floatsidf>
    815c:	|  |      addq.l #4,sp
    815e:	|  |      move.l d0,d4
    8160:	|  |      move.l d1,d5
    8162:	|  |      move.l 64(sp),-(sp)
    8166:	|  |      jsr 14a9a <__floatsidf>
    816c:	|  |      addq.l #4,sp
    816e:	|  |      move.l d1,-(sp)
    8170:	|  |      move.l d0,-(sp)
    8172:	|  |      move.l d5,-(sp)
    8174:	|  |      move.l d4,-(sp)
    8176:	|  |      jsr 148c2 <__adddf3>
    817c:	|  |      lea 16(sp),sp
    8180:	|  |      move.l d1,-(sp)
    8182:	|  |      move.l d0,-(sp)
    8184:	|  |      jsr 15012 <sqrt>
    818a:	|  |      addq.l #8,sp
    818c:	|  |      move.l d0,d4
    818e:	|  |      move.l d1,d5
    8190:	|  |      move.l 72(sp),-(sp)
    8194:	|  |      jsr 14a9a <__floatsidf>
    819a:	|  |      addq.l #4,sp
    819c:	|  |      move.l d0,d6
    819e:	|  |      move.l d1,d7
    81a0:	|  |      move.l 56(sp),-(sp)
    81a4:	|  |      jsr 14a9a <__floatsidf>
    81aa:	|  |      addq.l #4,sp
    81ac:	|  |      move.l d1,-(sp)
    81ae:	|  |      move.l d0,-(sp)
    81b0:	|  |      move.l d7,-(sp)
    81b2:	|  |      move.l d6,-(sp)
    81b4:	|  |      jsr 148c2 <__adddf3>
    81ba:	|  |      lea 16(sp),sp
    81be:	|  |      move.l d1,-(sp)
    81c0:	|  |      move.l d0,-(sp)
    81c2:	|  |      jsr 15012 <sqrt>
    81c8:	|  |      addq.l #8,sp
    81ca:	|  |      move.l d1,-(sp)
    81cc:	|  |      move.l d0,-(sp)
    81ce:	|  |      move.l d5,-(sp)
    81d0:	|  |      move.l d4,-(sp)
    81d2:	|  |      jsr 148c2 <__adddf3>
    81d8:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    81dc:	|  |      move.l d1,-(sp)
    81de:	|  |      move.l d0,-(sp)
    81e0:	|  |      move.l d3,-(sp)
    81e2:	|  |      move.l d2,-(sp)
    81e4:	|  |      jsr 14cb2 <__ltdf2>
    81ea:	|  |      lea 16(sp),sp
    81ee:	|  |      tst.l d0
    81f0:	|  |  /-- bge.s 8208 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    81f2:	|  |  |   movea.l 152(sp),a0
    81f6:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    81fc:	|  |  |   movea.l 152(sp),a0
    8200:	|  |  |   move.l 120(sp),40(a0)
    8206:	|  +--|-- bra.s 821c <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    8208:	|  |  \-> movea.l 152(sp),a0
    820c:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    8212:	|  |      movea.l 152(sp),a0
    8216:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    821c:	|  \----> movea.l 152(sp),a0
    8220:	|         move.l 40(a0),d0
    8224:	|         move.l d0,-(sp)
    8226:	|         jsr 14ada <__floatsisf>
    822c:	|         addq.l #4,sp
    822e:	|         move.l d0,d1
    8230:	|         movea.l 152(sp),a0
    8234:	|         move.l 4(a0),d0
    8238:	|         move.l d0,-(sp)
    823a:	|         move.l d1,-(sp)
    823c:	|         jsr 14dce <__subsf3>
    8242:	|         addq.l #8,sp
    8244:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    8248:	|         movea.l 152(sp),a0
    824c:	|         move.l (a0),d2
    824e:	|         movea.l 152(sp),a0
    8252:	|         move.l 36(a0),d0
    8256:	|         move.l d0,-(sp)
    8258:	|         jsr 14ada <__floatsisf>
    825e:	|         addq.l #4,sp
    8260:	|         move.l d0,-(sp)
    8262:	|         move.l d2,-(sp)
    8264:	|         jsr 14dce <__subsf3>
    826a:	|         addq.l #8,sp
    826c:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    8270:	|         clr.l -(sp)
    8272:	|         move.l 52(sp),-(sp)
    8276:	|         jsr 14d36 <__nesf2>
    827c:	|         addq.l #8,sp
    827e:	|         tst.l d0
    8280:	|     /-- bne.s 8294 <doBorderStuff+0x628>
    8282:	|     |   clr.l -(sp)
    8284:	|     |   move.l 56(sp),-(sp)
    8288:	|     |   jsr 14d36 <__nesf2>
    828e:	|     |   addq.l #8,sp
    8290:	|     |   tst.l d0
    8292:	|  /--|-- beq.s 830a <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    8294:	|  |  \-> move.l 52(sp),d0
    8298:	|  |      move.l d0,-(sp)
    829a:	|  |      move.l d0,-(sp)
    829c:	|  |      jsr 1488c <__addsf3>
    82a2:	|  |      addq.l #8,sp
    82a4:	|  |      move.l d0,-(sp)
    82a6:	|  |      move.l 52(sp),-(sp)
    82aa:	|  |      jsr 14e62 <atan2f>
    82b0:	|  |      addq.l #8,sp
    82b2:	|  |      move.l d0,-(sp)
    82b4:	|  |      jsr 149f2 <__extendsfdf2>
    82ba:	|  |      addq.l #4,sp
    82bc:	|  |      move.l #-1540411785,-(sp)
    82c2:	|  |      move.l #1078765033,-(sp)
    82c8:	|  |      move.l d1,-(sp)
    82ca:	|  |      move.l d0,-(sp)
    82cc:	|  |      jsr 14b2a <__muldf3>
    82d2:	|  |      lea 16(sp),sp
    82d6:	|  |      clr.l -(sp)
    82d8:	|  |      move.l #1080459264,-(sp)
    82de:	|  |      move.l d1,-(sp)
    82e0:	|  |      move.l d0,-(sp)
    82e2:	|  |      jsr 148c2 <__adddf3>
    82e8:	|  |      lea 16(sp),sp
    82ec:	|  |      move.l d1,-(sp)
    82ee:	|  |      move.l d0,-(sp)
    82f0:	|  |      jsr 14a32 <__fixdfsi>
    82f6:	|  |      addq.l #8,sp
    82f8:	|  |      movea.l 152(sp),a0
    82fc:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    8300:	|  |      movea.l 152(sp),a0
    8304:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    830a:	|  \----> pea 1 <_start+0x1>
    830e:	|         move.l 156(sp),-(sp)
    8312:	|         jsr 652a <setFrames>
    8318:	|         addq.l #8,sp
    return TRUE;
    831a:	|         moveq #1,d0
}
    831c:	\-------> movem.l (sp)+,d2-d7
    8320:	          lea 124(sp),sp
    8324:	          rts

00008326 <drawPeople>:

void drawPeople () {
    8326:	                lea -24(sp),sp
    832a:	                move.l d2,-(sp)
	shufflePeople ();
    832c:	                jsr 9d22 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    8332:	                move.l 19c08 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    833a:	                clr.l 20(sp)
	overRegion = NULL;
    833e:	                clr.l 19cac <overRegion>

	while (thisPerson) {
    8344:	   /----------- bra.w 8866 <drawPeople+0x540>
		if (thisPerson -> show) {
    8348:	/--|----------> movea.l 24(sp),a0
    834c:	|  |            move.w 92(a0),d0
    8350:	|  |  /-------- beq.w 861a <drawPeople+0x2f4>
			myAnim = thisPerson -> myAnim;
    8354:	|  |  |         movea.l 24(sp),a0
    8358:	|  |  |         move.l 60(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    835e:	|  |  |         movea.l 24(sp),a0
    8362:	|  |  |         move.l 64(a0),d0
    8366:	|  |  |         cmp.l 20(sp),d0
    836a:	|  |  |  /----- beq.w 852e <drawPeople+0x208>
				thisPerson -> lastUsedAnim = myAnim;
    836e:	|  |  |  |      movea.l 24(sp),a0
    8372:	|  |  |  |      move.l 20(sp),64(a0)
				thisPerson -> frameNum = 0;
    8378:	|  |  |  |      movea.l 24(sp),a0
    837c:	|  |  |  |      clr.l 72(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    8380:	|  |  |  |      movea.l 20(sp),a0
    8384:	|  |  |  |      movea.l 4(a0),a0
    8388:	|  |  |  |      move.l 4(a0),d0
    838c:	|  |  |  |      movea.l 24(sp),a0
    8390:	|  |  |  |      move.l d0,76(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    8394:	|  |  |  |      movea.l 20(sp),a0
    8398:	|  |  |  |      movea.l 4(a0),a1
    839c:	|  |  |  |      movea.l 24(sp),a0
    83a0:	|  |  |  |      move.l 72(a0),d0
    83a4:	|  |  |  |      move.l d0,d1
    83a6:	|  |  |  |      move.l d1,d0
    83a8:	|  |  |  |      add.l d0,d0
    83aa:	|  |  |  |      add.l d1,d0
    83ac:	|  |  |  |      add.l d0,d0
    83ae:	|  |  |  |      add.l d0,d0
    83b0:	|  |  |  |      lea (0,a1,d0.l),a0
    83b4:	|  |  |  |      move.l 8(a0),d0
    83b8:	|  |  |  |  /-- ble.w 845a <drawPeople+0x134>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    83bc:	|  |  |  |  |   movea.l 20(sp),a0
    83c0:	|  |  |  |  |   movea.l 4(a0),a1
    83c4:	|  |  |  |  |   movea.l 24(sp),a0
    83c8:	|  |  |  |  |   move.l 72(a0),d0
    83cc:	|  |  |  |  |   move.l d0,d1
    83ce:	|  |  |  |  |   move.l d1,d0
    83d0:	|  |  |  |  |   add.l d0,d0
    83d2:	|  |  |  |  |   add.l d1,d0
    83d4:	|  |  |  |  |   add.l d0,d0
    83d6:	|  |  |  |  |   add.l d0,d0
    83d8:	|  |  |  |  |   lea (0,a1,d0.l),a0
    83dc:	|  |  |  |  |   move.l 8(a0),d0
    83e0:	|  |  |  |  |   clr.l -(sp)
    83e2:	|  |  |  |  |   move.l d0,-(sp)
    83e4:	|  |  |  |  |   jsr b2e6 <startSound>
    83ea:	|  |  |  |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    83ec:	|  |  |  |  |   movea.l 24(sp),a0
    83f0:	|  |  |  |  |   move.l 72(a0),d0
    83f4:	|  |  |  |  |   addq.l #1,d0
    83f6:	|  |  |  |  |   movea.l 24(sp),a0
    83fa:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    83fe:	|  |  |  |  |   movea.l 24(sp),a0
    8402:	|  |  |  |  |   move.l 72(a0),d0
    8406:	|  |  |  |  |   movea.l 24(sp),a0
    840a:	|  |  |  |  |   movea.l 60(a0),a0
    840e:	|  |  |  |  |   move.l 8(a0),d1
    8412:	|  |  |  |  |   move.l d1,-(sp)
    8414:	|  |  |  |  |   move.l d0,-(sp)
    8416:	|  |  |  |  |   jsr 15108 <__modsi3>
    841c:	|  |  |  |  |   addq.l #8,sp
    841e:	|  |  |  |  |   movea.l 24(sp),a0
    8422:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    8426:	|  |  |  |  |   movea.l 24(sp),a0
    842a:	|  |  |  |  |   movea.l 60(a0),a0
    842e:	|  |  |  |  |   movea.l 4(a0),a1
    8432:	|  |  |  |  |   movea.l 24(sp),a0
    8436:	|  |  |  |  |   move.l 72(a0),d0
    843a:	|  |  |  |  |   move.l d0,d1
    843c:	|  |  |  |  |   move.l d1,d0
    843e:	|  |  |  |  |   add.l d0,d0
    8440:	|  |  |  |  |   add.l d1,d0
    8442:	|  |  |  |  |   add.l d0,d0
    8444:	|  |  |  |  |   add.l d0,d0
    8446:	|  |  |  |  |   lea (0,a1,d0.l),a0
    844a:	|  |  |  |  |   move.l 4(a0),d0
    844e:	|  |  |  |  |   movea.l 24(sp),a0
    8452:	|  |  |  |  |   move.l d0,76(a0)
    8456:	|  |  |  +--|-- bra.w 852e <drawPeople+0x208>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    845a:	|  |  |  |  \-> movea.l 20(sp),a0
    845e:	|  |  |  |      movea.l 4(a0),a1
    8462:	|  |  |  |      movea.l 24(sp),a0
    8466:	|  |  |  |      move.l 72(a0),d0
    846a:	|  |  |  |      move.l d0,d1
    846c:	|  |  |  |      move.l d1,d0
    846e:	|  |  |  |      add.l d0,d0
    8470:	|  |  |  |      add.l d1,d0
    8472:	|  |  |  |      add.l d0,d0
    8474:	|  |  |  |      add.l d0,d0
    8476:	|  |  |  |      lea (0,a1,d0.l),a0
    847a:	|  |  |  |      move.l 8(a0),d0
    847e:	|  |  |  +----- beq.w 852e <drawPeople+0x208>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    8482:	|  |  |  |      movea.l 19b20 <noStack>,a1
    8488:	|  |  |  |      movea.l 20(sp),a0
    848c:	|  |  |  |      move.l 4(a0),d2
    8490:	|  |  |  |      movea.l 24(sp),a0
    8494:	|  |  |  |      move.l 72(a0),d0
    8498:	|  |  |  |      move.l d0,d1
    849a:	|  |  |  |      move.l d1,d0
    849c:	|  |  |  |      add.l d0,d0
    849e:	|  |  |  |      add.l d1,d0
    84a0:	|  |  |  |      add.l d0,d0
    84a2:	|  |  |  |      add.l d0,d0
    84a4:	|  |  |  |      movea.l d2,a0
    84a6:	|  |  |  |      adda.l d0,a0
    84a8:	|  |  |  |      move.l 8(a0),d0
    84ac:	|  |  |  |      neg.l d0
    84ae:	|  |  |  |      pea 1 <_start+0x1>
    84b2:	|  |  |  |      move.l a1,-(sp)
    84b4:	|  |  |  |      clr.l -(sp)
    84b6:	|  |  |  |      clr.l -(sp)
    84b8:	|  |  |  |      move.l d0,-(sp)
    84ba:	|  |  |  |      jsr 4ece <startNewFunctionNum>
    84c0:	|  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    84c4:	|  |  |  |      movea.l 24(sp),a0
    84c8:	|  |  |  |      move.l 72(a0),d0
    84cc:	|  |  |  |      addq.l #1,d0
    84ce:	|  |  |  |      movea.l 24(sp),a0
    84d2:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    84d6:	|  |  |  |      movea.l 24(sp),a0
    84da:	|  |  |  |      move.l 72(a0),d0
    84de:	|  |  |  |      movea.l 24(sp),a0
    84e2:	|  |  |  |      movea.l 60(a0),a0
    84e6:	|  |  |  |      move.l 8(a0),d1
    84ea:	|  |  |  |      move.l d1,-(sp)
    84ec:	|  |  |  |      move.l d0,-(sp)
    84ee:	|  |  |  |      jsr 15108 <__modsi3>
    84f4:	|  |  |  |      addq.l #8,sp
    84f6:	|  |  |  |      movea.l 24(sp),a0
    84fa:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    84fe:	|  |  |  |      movea.l 24(sp),a0
    8502:	|  |  |  |      movea.l 60(a0),a0
    8506:	|  |  |  |      movea.l 4(a0),a1
    850a:	|  |  |  |      movea.l 24(sp),a0
    850e:	|  |  |  |      move.l 72(a0),d0
    8512:	|  |  |  |      move.l d0,d1
    8514:	|  |  |  |      move.l d1,d0
    8516:	|  |  |  |      add.l d0,d0
    8518:	|  |  |  |      add.l d1,d0
    851a:	|  |  |  |      add.l d0,d0
    851c:	|  |  |  |      add.l d0,d0
    851e:	|  |  |  |      lea (0,a1,d0.l),a0
    8522:	|  |  |  |      move.l 4(a0),d0
    8526:	|  |  |  |      movea.l 24(sp),a0
    852a:	|  |  |  |      move.l d0,76(a0)
				}
			}
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    852e:	|  |  |  \----> movea.l 20(sp),a0
    8532:	|  |  |         movea.l 4(a0),a1
    8536:	|  |  |         movea.l 24(sp),a0
    853a:	|  |  |         move.l 72(a0),d0
    853e:	|  |  |         move.l d0,d1
    8540:	|  |  |         move.l d1,d0
    8542:	|  |  |         add.l d0,d0
    8544:	|  |  |         add.l d1,d0
    8546:	|  |  |         add.l d0,d0
    8548:	|  |  |         add.l d0,d0
    854a:	|  |  |         lea (0,a1,d0.l),a0
    854e:	|  |  |         move.l (a0),8(sp)
			int m = fNumSign < 0;
    8552:	|  |  |         move.l 8(sp),d0
    8556:	|  |  |         add.l d0,d0
    8558:	|  |  |         subx.l d0,d0
    855a:	|  |  |         neg.l d0
    855c:	|  |  |         move.b d0,d0
    855e:	|  |  |         move.b d0,d0
    8560:	|  |  |         andi.l #255,d0
    8566:	|  |  |         move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    856a:	|  |  |         move.l 8(sp),-(sp)
    856e:	|  |  |         jsr 7504 <TF_abs>
    8574:	|  |  |         addq.l #4,sp
    8576:	|  |  |         move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    857a:	|  |  |         movea.l 20(sp),a0
    857e:	|  |  |         movea.l (a0),a0
    8580:	|  |  |         move.l 8(a0),d0
    8584:	|  |  |         cmp.l 12(sp),d0
    8588:	|  |  |     /-- bgt.s 8598 <drawPeople+0x272>
				fNum = 0;
    858a:	|  |  |     |   clr.l 12(sp)
				m = 2 - m;
    858e:	|  |  |     |   moveq #2,d0
    8590:	|  |  |     |   sub.l 16(sp),d0
    8594:	|  |  |     |   move.l d0,16(sp)
			}
			if (m != 2) {
    8598:	|  |  |     \-> moveq #2,d0
    859a:	|  |  |         cmp.l 16(sp),d0
    859e:	|  |  +-------- beq.s 861a <drawPeople+0x2f4>
				BOOL r = FALSE;
    85a0:	|  |  |         clr.w 6(sp)
				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    85a4:	|  |  |         move.l 16(sp),d0
    85a8:	|  |  |         movea.w d0,a0
    85aa:	|  |  |         movea.l 20(sp),a1
    85ae:	|  |  |         movea.l (a1),a1
    85b0:	|  |  |         movea.l 16(a1),a1
    85b4:	|  |  |         move.l 12(sp),d1
    85b8:	|  |  |         move.l d1,d0
    85ba:	|  |  |         lsl.l #3,d0
    85bc:	|  |  |         sub.l d1,d0
    85be:	|  |  |         add.l d0,d0
    85c0:	|  |  |         add.l d0,d0
    85c2:	|  |  |         add.l a1,d0
    85c4:	|  |  |         move.l a0,-(sp)
    85c6:	|  |  |         move.l 28(sp),-(sp)
    85ca:	|  |  |         move.l d0,-(sp)
    85cc:	|  |  |         jsr 7468 <scaleSprite>
    85d2:	|  |  |         lea 12(sp),sp
    85d6:	|  |  |         move.w d0,6(sp)
				if (r) {
    85da:	|  |  +-------- beq.s 861a <drawPeople+0x2f4>
					if (thisPerson -> thisType -> screenName[0]) {
    85dc:	|  |  |         movea.l 24(sp),a0
    85e0:	|  |  |         movea.l 102(a0),a0
    85e4:	|  |  |         movea.l (a0),a0
    85e6:	|  |  |         move.b (a0),d0
    85e8:	|  |  +-------- beq.s 861a <drawPeople+0x2f4>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    85ea:	|  |  |         move.l 19c28 <personRegion+0x1c>,d1
    85f0:	|  |  |         movea.l 24(sp),a0
    85f4:	|  |  |         move.l 102(a0),d0
    85f8:	|  |  |         cmp.l d1,d0
    85fa:	|  |  |     /-- beq.s 8602 <drawPeople+0x2dc>
    85fc:	|  |  |     |   clr.l 19b18 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    8602:	|  |  |     \-> movea.l 24(sp),a0
    8606:	|  |  |         move.l 102(a0),d0
    860a:	|  |  |         move.l d0,19c28 <personRegion+0x1c>
						overRegion = & personRegion;
    8610:	|  |  |         move.l #105484,19cac <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    861a:	|  |  \-------> movea.l 24(sp),a0
    861e:	|  |            move.l 76(a0),d0
    8622:	|  |            subq.l #1,d0
    8624:	|  |            movea.l 24(sp),a0
    8628:	|  |            move.l d0,76(a0)
    862c:	|  |            movea.l 24(sp),a0
    8630:	|  |            move.l 76(a0),d0
    8634:	|  |     /----- bne.w 885c <drawPeople+0x536>
			thisPerson -> frameNum ++;
    8638:	|  |     |      movea.l 24(sp),a0
    863c:	|  |     |      move.l 72(a0),d0
    8640:	|  |     |      addq.l #1,d0
    8642:	|  |     |      movea.l 24(sp),a0
    8646:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    864a:	|  |     |      movea.l 24(sp),a0
    864e:	|  |     |      move.l 72(a0),d0
    8652:	|  |     |      movea.l 24(sp),a0
    8656:	|  |     |      movea.l 60(a0),a0
    865a:	|  |     |      move.l 8(a0),d1
    865e:	|  |     |      move.l d1,-(sp)
    8660:	|  |     |      move.l d0,-(sp)
    8662:	|  |     |      jsr 15108 <__modsi3>
    8668:	|  |     |      addq.l #8,sp
    866a:	|  |     |      movea.l 24(sp),a0
    866e:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    8672:	|  |     |      movea.l 24(sp),a0
    8676:	|  |     |      movea.l 60(a0),a0
    867a:	|  |     |      movea.l 4(a0),a1
    867e:	|  |     |      movea.l 24(sp),a0
    8682:	|  |     |      move.l 72(a0),d0
    8686:	|  |     |      move.l d0,d1
    8688:	|  |     |      move.l d1,d0
    868a:	|  |     |      add.l d0,d0
    868c:	|  |     |      add.l d1,d0
    868e:	|  |     |      add.l d0,d0
    8690:	|  |     |      add.l d0,d0
    8692:	|  |     |      lea (0,a1,d0.l),a0
    8696:	|  |     |      move.l 4(a0),d0
    869a:	|  |     |      movea.l 24(sp),a0
    869e:	|  |     |      move.l d0,76(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    86a2:	|  |     |      movea.l 24(sp),a0
    86a6:	|  |     |      move.w 92(a0),d0
    86aa:	|  |     +----- beq.w 885c <drawPeople+0x536>
    86ae:	|  |     |      tst.l 20(sp)
    86b2:	|  |     +----- beq.w 885c <drawPeople+0x536>
    86b6:	|  |     |      movea.l 20(sp),a0
    86ba:	|  |     |      move.l 4(a0),d0
    86be:	|  |     +----- beq.w 885c <drawPeople+0x536>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    86c2:	|  |     |      movea.l 20(sp),a0
    86c6:	|  |     |      movea.l 4(a0),a1
    86ca:	|  |     |      movea.l 24(sp),a0
    86ce:	|  |     |      move.l 72(a0),d0
    86d2:	|  |     |      move.l d0,d1
    86d4:	|  |     |      move.l d1,d0
    86d6:	|  |     |      add.l d0,d0
    86d8:	|  |     |      add.l d1,d0
    86da:	|  |     |      add.l d0,d0
    86dc:	|  |     |      add.l d0,d0
    86de:	|  |     |      lea (0,a1,d0.l),a0
    86e2:	|  |     |      move.l 8(a0),d0
    86e6:	|  |     |  /-- ble.w 8788 <drawPeople+0x462>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    86ea:	|  |     |  |   movea.l 20(sp),a0
    86ee:	|  |     |  |   movea.l 4(a0),a1
    86f2:	|  |     |  |   movea.l 24(sp),a0
    86f6:	|  |     |  |   move.l 72(a0),d0
    86fa:	|  |     |  |   move.l d0,d1
    86fc:	|  |     |  |   move.l d1,d0
    86fe:	|  |     |  |   add.l d0,d0
    8700:	|  |     |  |   add.l d1,d0
    8702:	|  |     |  |   add.l d0,d0
    8704:	|  |     |  |   add.l d0,d0
    8706:	|  |     |  |   lea (0,a1,d0.l),a0
    870a:	|  |     |  |   move.l 8(a0),d0
    870e:	|  |     |  |   clr.l -(sp)
    8710:	|  |     |  |   move.l d0,-(sp)
    8712:	|  |     |  |   jsr b2e6 <startSound>
    8718:	|  |     |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    871a:	|  |     |  |   movea.l 24(sp),a0
    871e:	|  |     |  |   move.l 72(a0),d0
    8722:	|  |     |  |   addq.l #1,d0
    8724:	|  |     |  |   movea.l 24(sp),a0
    8728:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    872c:	|  |     |  |   movea.l 24(sp),a0
    8730:	|  |     |  |   move.l 72(a0),d0
    8734:	|  |     |  |   movea.l 24(sp),a0
    8738:	|  |     |  |   movea.l 60(a0),a0
    873c:	|  |     |  |   move.l 8(a0),d1
    8740:	|  |     |  |   move.l d1,-(sp)
    8742:	|  |     |  |   move.l d0,-(sp)
    8744:	|  |     |  |   jsr 15108 <__modsi3>
    874a:	|  |     |  |   addq.l #8,sp
    874c:	|  |     |  |   movea.l 24(sp),a0
    8750:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    8754:	|  |     |  |   movea.l 24(sp),a0
    8758:	|  |     |  |   movea.l 60(a0),a0
    875c:	|  |     |  |   movea.l 4(a0),a1
    8760:	|  |     |  |   movea.l 24(sp),a0
    8764:	|  |     |  |   move.l 72(a0),d0
    8768:	|  |     |  |   move.l d0,d1
    876a:	|  |     |  |   move.l d1,d0
    876c:	|  |     |  |   add.l d0,d0
    876e:	|  |     |  |   add.l d1,d0
    8770:	|  |     |  |   add.l d0,d0
    8772:	|  |     |  |   add.l d0,d0
    8774:	|  |     |  |   lea (0,a1,d0.l),a0
    8778:	|  |     |  |   move.l 4(a0),d0
    877c:	|  |     |  |   movea.l 24(sp),a0
    8780:	|  |     |  |   move.l d0,76(a0)
    8784:	|  |     +--|-- bra.w 885c <drawPeople+0x536>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    8788:	|  |     |  \-> movea.l 20(sp),a0
    878c:	|  |     |      movea.l 4(a0),a1
    8790:	|  |     |      movea.l 24(sp),a0
    8794:	|  |     |      move.l 72(a0),d0
    8798:	|  |     |      move.l d0,d1
    879a:	|  |     |      move.l d1,d0
    879c:	|  |     |      add.l d0,d0
    879e:	|  |     |      add.l d1,d0
    87a0:	|  |     |      add.l d0,d0
    87a2:	|  |     |      add.l d0,d0
    87a4:	|  |     |      lea (0,a1,d0.l),a0
    87a8:	|  |     |      move.l 8(a0),d0
    87ac:	|  |     +----- beq.w 885c <drawPeople+0x536>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    87b0:	|  |     |      movea.l 19b20 <noStack>,a1
    87b6:	|  |     |      movea.l 20(sp),a0
    87ba:	|  |     |      move.l 4(a0),d2
    87be:	|  |     |      movea.l 24(sp),a0
    87c2:	|  |     |      move.l 72(a0),d0
    87c6:	|  |     |      move.l d0,d1
    87c8:	|  |     |      move.l d1,d0
    87ca:	|  |     |      add.l d0,d0
    87cc:	|  |     |      add.l d1,d0
    87ce:	|  |     |      add.l d0,d0
    87d0:	|  |     |      add.l d0,d0
    87d2:	|  |     |      movea.l d2,a0
    87d4:	|  |     |      adda.l d0,a0
    87d6:	|  |     |      move.l 8(a0),d0
    87da:	|  |     |      neg.l d0
    87dc:	|  |     |      pea 1 <_start+0x1>
    87e0:	|  |     |      move.l a1,-(sp)
    87e2:	|  |     |      clr.l -(sp)
    87e4:	|  |     |      clr.l -(sp)
    87e6:	|  |     |      move.l d0,-(sp)
    87e8:	|  |     |      jsr 4ece <startNewFunctionNum>
    87ee:	|  |     |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    87f2:	|  |     |      movea.l 24(sp),a0
    87f6:	|  |     |      move.l 72(a0),d0
    87fa:	|  |     |      addq.l #1,d0
    87fc:	|  |     |      movea.l 24(sp),a0
    8800:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    8804:	|  |     |      movea.l 24(sp),a0
    8808:	|  |     |      move.l 72(a0),d0
    880c:	|  |     |      movea.l 24(sp),a0
    8810:	|  |     |      movea.l 60(a0),a0
    8814:	|  |     |      move.l 8(a0),d1
    8818:	|  |     |      move.l d1,-(sp)
    881a:	|  |     |      move.l d0,-(sp)
    881c:	|  |     |      jsr 15108 <__modsi3>
    8822:	|  |     |      addq.l #8,sp
    8824:	|  |     |      movea.l 24(sp),a0
    8828:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    882c:	|  |     |      movea.l 24(sp),a0
    8830:	|  |     |      movea.l 60(a0),a0
    8834:	|  |     |      movea.l 4(a0),a1
    8838:	|  |     |      movea.l 24(sp),a0
    883c:	|  |     |      move.l 72(a0),d0
    8840:	|  |     |      move.l d0,d1
    8842:	|  |     |      move.l d1,d0
    8844:	|  |     |      add.l d0,d0
    8846:	|  |     |      add.l d1,d0
    8848:	|  |     |      add.l d0,d0
    884a:	|  |     |      add.l d0,d0
    884c:	|  |     |      lea (0,a1,d0.l),a0
    8850:	|  |     |      move.l 4(a0),d0
    8854:	|  |     |      movea.l 24(sp),a0
    8858:	|  |     |      move.l d0,76(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    885c:	|  |     \----> movea.l 24(sp),a0
    8860:	|  |            move.l 24(a0),24(sp)
	while (thisPerson) {
    8866:	|  \----------> tst.l 24(sp)
    886a:	\-------------- bne.w 8348 <drawPeople+0x22>
	}
}
    886e:	                nop
    8870:	                nop
    8872:	                move.l (sp)+,d2
    8874:	                lea 24(sp),sp
    8878:	                rts

0000887a <findPerson>:


struct onScreenPerson * findPerson (int v) {
    887a:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    887c:	          move.l 19c08 <allPeople>,(sp)
	while (thisPerson) {
    8882:	      /-- bra.s 889a <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    8884:	/-----|-> movea.l (sp),a0
    8886:	|     |   movea.l 102(a0),a0
    888a:	|     |   move.l 4(a0),d0
    888e:	|     |   cmp.l 8(sp),d0
    8892:	|  /--|-- beq.s 88a0 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    8894:	|  |  |   movea.l (sp),a0
    8896:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    889a:	|  |  \-> tst.l (sp)
    889c:	\--|----- bne.s 8884 <findPerson+0xa>
    889e:	   |  /-- bra.s 88a2 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    88a0:	   \--|-> nop
	}
	return thisPerson;
    88a2:	      \-> move.l (sp),d0
}
    88a4:	          addq.l #4,sp
    88a6:	          rts

000088a8 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    88a8:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    88aa:	       move.l 12(sp),-(sp)
    88ae:	       jsr 887a <findPerson>
    88b4:	       addq.l #4,sp
    88b6:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    88b8:	   /-- bne.s 88be <floatCharacter+0x16>
    88ba:	   |   clr.w d0
    88bc:	/--|-- bra.s 88c8 <floatCharacter+0x20>
	moveMe -> floaty = f;
    88be:	|  \-> movea.l (sp),a0
    88c0:	|      move.l 8(sp),12(a0)
	return TRUE;
    88c6:	|      moveq #1,d0
}
    88c8:	\----> addq.l #4,sp
    88ca:	       rts

000088cc <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    88cc:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    88ce:	          tst.l 8(sp)
    88d2:	      /-- bne.s 88e0 <forceWalkingPerson+0x14>
    88d4:	      |   tst.l 12(sp)
    88d8:	      +-- bne.s 88e0 <forceWalkingPerson+0x14>
    88da:	      |   clr.w d0
    88dc:	/-----|-- bra.w 8972 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    88e0:	|     \-> move.l 16(sp),-(sp)
    88e4:	|         jsr 887a <findPerson>
    88ea:	|         addq.l #4,sp
    88ec:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    88ee:	|     /-- bne.s 88f4 <forceWalkingPerson+0x28>
    88f0:	|     |   clr.w d0
    88f2:	+-----|-- bra.s 8972 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    88f4:	|     \-> movea.l (sp),a0
    88f6:	|         move.l 56(a0),d0
    88fa:	|     /-- beq.s 890c <forceWalkingPerson+0x40>
    88fc:	|     |   movea.l (sp),a0
    88fe:	|     |   move.l 56(a0),d0
    8902:	|     |   move.l d0,-(sp)
    8904:	|     |   jsr 2d94 <abortFunction>
    890a:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    890c:	|     \-> movea.l (sp),a0
    890e:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    8914:	|         movea.l (sp),a0
    8916:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    891a:	|         movea.l (sp),a0
    891c:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    8922:	|         movea.l (sp),a0
    8924:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    892a:	|         movea.l (sp),a0
    892c:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    8932:	|         movea.l (sp),a0
    8934:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    8938:	|         movea.l (sp),a0
    893a:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    893e:	|         move.l (sp),-(sp)
    8940:	|         jsr 7c6c <doBorderStuff>
    8946:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    8948:	|         pea 1 <_start+0x1>
    894c:	|         move.l 4(sp),-(sp)
    8950:	|         jsr a12c <walkMe>
    8956:	|         addq.l #8,sp
    8958:	|         tst.w d0
    895a:	|     /-- bne.s 8964 <forceWalkingPerson+0x98>
    895c:	|     |   movea.l (sp),a0
    895e:	|     |   move.w 54(a0),d0
    8962:	|  /--|-- beq.s 8970 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    8964:	|  |  \-> movea.l (sp),a0
    8966:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    896c:	|  |      moveq #1,d0
    896e:	+--|----- bra.s 8972 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    8970:	|  \----> clr.w d0
    }
}
    8972:	\-------> addq.l #4,sp
    8974:	          rts

00008976 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    8976:	                lea -56(sp),sp
    897a:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    897c:	                move.l #320,56(sp)
    8984:	                move.l #200,52(sp)
    898c:	                moveq #-1,d0
    898e:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    8992:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    899a:	                clr.l 44(sp)
    899e:	   /----------- bra.w 8b76 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    89a2:	/--|----------> movea.l 19cb0 <currentFloor>,a0
    89a8:	|  |            move.l 12(a0),d1
    89ac:	|  |            move.l 44(sp),d0
    89b0:	|  |            lsl.l #3,d0
    89b2:	|  |            movea.l d1,a0
    89b4:	|  |            adda.l d0,a0
    89b6:	|  |            move.l (a0),d0
    89b8:	|  |            move.l d0,d1
    89ba:	|  |            subq.l #1,d1
    89bc:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    89c0:	|  |            clr.l 40(sp)
    89c4:	|  |     /----- bra.w 8b54 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    89c8:	|  |  /--|----> movea.l 19cb0 <currentFloor>,a0
    89ce:	|  |  |  |      move.l 4(a0),d1
    89d2:	|  |  |  |      movea.l 19cb0 <currentFloor>,a0
    89d8:	|  |  |  |      movea.l 12(a0),a0
    89dc:	|  |  |  |      move.l 44(sp),d0
    89e0:	|  |  |  |      lsl.l #3,d0
    89e2:	|  |  |  |      adda.l d0,a0
    89e4:	|  |  |  |      movea.l 4(a0),a0
    89e8:	|  |  |  |      move.l 40(sp),d0
    89ec:	|  |  |  |      add.l d0,d0
    89ee:	|  |  |  |      add.l d0,d0
    89f0:	|  |  |  |      adda.l d0,a0
    89f2:	|  |  |  |      move.l (a0),d0
    89f4:	|  |  |  |      lsl.l #3,d0
    89f6:	|  |  |  |      movea.l d1,a0
    89f8:	|  |  |  |      adda.l d0,a0
    89fa:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    89fe:	|  |  |  |      movea.l 19cb0 <currentFloor>,a0
    8a04:	|  |  |  |      move.l 4(a0),d1
    8a08:	|  |  |  |      movea.l 19cb0 <currentFloor>,a0
    8a0e:	|  |  |  |      movea.l 12(a0),a0
    8a12:	|  |  |  |      move.l 44(sp),d0
    8a16:	|  |  |  |      lsl.l #3,d0
    8a18:	|  |  |  |      adda.l d0,a0
    8a1a:	|  |  |  |      movea.l 4(a0),a0
    8a1e:	|  |  |  |      move.l 40(sp),d0
    8a22:	|  |  |  |      add.l d0,d0
    8a24:	|  |  |  |      add.l d0,d0
    8a26:	|  |  |  |      adda.l d0,a0
    8a28:	|  |  |  |      move.l (a0),d0
    8a2a:	|  |  |  |      lsl.l #3,d0
    8a2c:	|  |  |  |      movea.l d1,a0
    8a2e:	|  |  |  |      adda.l d0,a0
    8a30:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    8a36:	|  |  |  |      movea.l 19cb0 <currentFloor>,a0
    8a3c:	|  |  |  |      move.l 4(a0),d1
    8a40:	|  |  |  |      movea.l 19cb0 <currentFloor>,a0
    8a46:	|  |  |  |      movea.l 12(a0),a0
    8a4a:	|  |  |  |      move.l 44(sp),d0
    8a4e:	|  |  |  |      lsl.l #3,d0
    8a50:	|  |  |  |      adda.l d0,a0
    8a52:	|  |  |  |      movea.l 4(a0),a0
    8a56:	|  |  |  |      move.l 36(sp),d0
    8a5a:	|  |  |  |      add.l d0,d0
    8a5c:	|  |  |  |      add.l d0,d0
    8a5e:	|  |  |  |      adda.l d0,a0
    8a60:	|  |  |  |      move.l (a0),d0
    8a62:	|  |  |  |      lsl.l #3,d0
    8a64:	|  |  |  |      movea.l d1,a0
    8a66:	|  |  |  |      adda.l d0,a0
    8a68:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    8a6c:	|  |  |  |      movea.l 19cb0 <currentFloor>,a0
    8a72:	|  |  |  |      move.l 4(a0),d1
    8a76:	|  |  |  |      movea.l 19cb0 <currentFloor>,a0
    8a7c:	|  |  |  |      movea.l 12(a0),a0
    8a80:	|  |  |  |      move.l 44(sp),d0
    8a84:	|  |  |  |      lsl.l #3,d0
    8a86:	|  |  |  |      adda.l d0,a0
    8a88:	|  |  |  |      movea.l 4(a0),a0
    8a8c:	|  |  |  |      move.l 36(sp),d0
    8a90:	|  |  |  |      add.l d0,d0
    8a92:	|  |  |  |      add.l d0,d0
    8a94:	|  |  |  |      adda.l d0,a0
    8a96:	|  |  |  |      move.l (a0),d0
    8a98:	|  |  |  |      lsl.l #3,d0
    8a9a:	|  |  |  |      movea.l d1,a0
    8a9c:	|  |  |  |      adda.l d0,a0
    8a9e:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    8aa4:	|  |  |  |      movea.l 68(sp),a0
    8aa8:	|  |  |  |      move.l (a0),d1
    8aaa:	|  |  |  |      movea.l 64(sp),a0
    8aae:	|  |  |  |      move.l (a0),d0
    8ab0:	|  |  |  |      move.l d1,-(sp)
    8ab2:	|  |  |  |      move.l d0,-(sp)
    8ab4:	|  |  |  |      move.l 24(sp),-(sp)
    8ab8:	|  |  |  |      move.l 32(sp),-(sp)
    8abc:	|  |  |  |      move.l 40(sp),-(sp)
    8ac0:	|  |  |  |      move.l 48(sp),-(sp)
    8ac4:	|  |  |  |      lea 28(sp),a0
    8ac8:	|  |  |  |      move.l a0,-(sp)
    8aca:	|  |  |  |      lea 36(sp),a0
    8ace:	|  |  |  |      move.l a0,-(sp)
    8ad0:	|  |  |  |      jsr 13682 <closestPointOnLine>
    8ad6:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    8ada:	|  |  |  |      movea.l 64(sp),a0
    8ade:	|  |  |  |      move.l (a0),d0
    8ae0:	|  |  |  |      move.l 8(sp),d1
    8ae4:	|  |  |  |      move.l d0,d2
    8ae6:	|  |  |  |      sub.l d1,d2
    8ae8:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    8aec:	|  |  |  |      movea.l 68(sp),a0
    8af0:	|  |  |  |      move.l (a0),d0
    8af2:	|  |  |  |      move.l 4(sp),d1
    8af6:	|  |  |  |      move.l d0,d2
    8af8:	|  |  |  |      sub.l d1,d2
    8afa:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    8afe:	|  |  |  |      move.l 28(sp),-(sp)
    8b02:	|  |  |  |      move.l 32(sp),-(sp)
    8b06:	|  |  |  |      jsr 1505c <__mulsi3>
    8b0c:	|  |  |  |      addq.l #8,sp
    8b0e:	|  |  |  |      move.l d0,d2
    8b10:	|  |  |  |      move.l 24(sp),-(sp)
    8b14:	|  |  |  |      move.l 28(sp),-(sp)
    8b18:	|  |  |  |      jsr 1505c <__mulsi3>
    8b1e:	|  |  |  |      addq.l #8,sp
    8b20:	|  |  |  |      move.l d2,d1
    8b22:	|  |  |  |      add.l d0,d1
    8b24:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    8b28:	|  |  |  |      move.l 12(sp),d2
    8b2c:	|  |  |  |      cmp.l 32(sp),d2
    8b30:	|  |  |  |  /-- bge.s 8b4a <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    8b32:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    8b38:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    8b3e:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    8b44:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    8b4a:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    8b50:	|  |  |  |      addq.l #1,40(sp)
    8b54:	|  |  |  \----> movea.l 19cb0 <currentFloor>,a0
    8b5a:	|  |  |         move.l 12(a0),d1
    8b5e:	|  |  |         move.l 44(sp),d0
    8b62:	|  |  |         lsl.l #3,d0
    8b64:	|  |  |         movea.l d1,a0
    8b66:	|  |  |         adda.l d0,a0
    8b68:	|  |  |         move.l (a0),d0
    8b6a:	|  |  |         cmp.l 40(sp),d0
    8b6e:	|  |  \-------- bgt.w 89c8 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    8b72:	|  |            addq.l #1,44(sp)
    8b76:	|  \----------> movea.l 19cb0 <currentFloor>,a0
    8b7c:	|               move.l 8(a0),d0
    8b80:	|               cmp.l 44(sp),d0
    8b84:	\-------------- bgt.w 89a2 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    8b88:	                moveq #-1,d0
    8b8a:	                cmp.l 48(sp),d0
    8b8e:	            /-- bne.s 8b94 <handleClosestPoint+0x21e>
    8b90:	            |   clr.w d0
    8b92:	         /--|-- bra.s 8bae <handleClosestPoint+0x238>
	*setX = gotX;
    8b94:	         |  \-> movea.l 64(sp),a0
    8b98:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    8b9c:	         |      movea.l 68(sp),a0
    8ba0:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    8ba4:	         |      movea.l 72(sp),a0
    8ba8:	         |      move.l 48(sp),(a0)

	return TRUE;
    8bac:	         |      moveq #1,d0
}
    8bae:	         \----> move.l (sp)+,d2
    8bb0:	                lea 56(sp),sp
    8bb4:	                rts

00008bb6 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    8bb6:	clr.l 19c1c <personRegion+0x10>
	personRegion.sY = 0;
    8bbc:	clr.l 19c20 <personRegion+0x14>
	personRegion.di = -1;
    8bc2:	moveq #-1,d0
    8bc4:	move.l d0,19c24 <personRegion+0x18>
	allScreenRegions = NULL;
    8bca:	clr.l 19ca8 <allScreenRegions>

	return TRUE;
    8bd0:	moveq #1,d0
}
    8bd2:	rts

00008bd4 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    8bd4:	          subq.l #4,sp
    8bd6:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    8bd8:	          tst.l 12(sp)
    8bdc:	      /-- bne.s 8be4 <jumpPerson+0x10>
    8bde:	      |   tst.l 16(sp)
    8be2:	/-----|-- beq.s 8c58 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    8be4:	|     \-> move.l 20(sp),-(sp)
    8be8:	|         jsr 887a <findPerson>
    8bee:	|         addq.l #4,sp
    8bf0:	|         move.l d0,4(sp)
    if (!moveMe) return;
    8bf4:	|  /----- beq.s 8c5c <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    8bf6:	|  |      movea.l 4(sp),a0
    8bfa:	|  |      move.l 56(a0),d0
    8bfe:	|  |  /-- beq.s 8c12 <jumpPerson+0x3e>
    8c00:	|  |  |   movea.l 4(sp),a0
    8c04:	|  |  |   move.l 56(a0),d0
    8c08:	|  |  |   move.l d0,-(sp)
    8c0a:	|  |  |   jsr 2d94 <abortFunction>
    8c10:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    8c12:	|  |  \-> movea.l 4(sp),a0
    8c16:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    8c1a:	|  |      movea.l 4(sp),a0
    8c1e:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    8c22:	|  |      movea.l 4(sp),a0
    8c26:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    8c2a:	|  |      move.l 16(sp),-(sp)
    8c2e:	|  |      jsr 14ada <__floatsisf>
    8c34:	|  |      addq.l #4,sp
    8c36:	|  |      move.l d0,d2
    8c38:	|  |      move.l 12(sp),-(sp)
    8c3c:	|  |      jsr 14ada <__floatsisf>
    8c42:	|  |      addq.l #4,sp
    8c44:	|  |      move.l d2,-(sp)
    8c46:	|  |      move.l d0,-(sp)
    8c48:	|  |      move.l 12(sp),-(sp)
    8c4c:	|  |      jsr 8fc2 <moveAndScale>
    8c52:	|  |      lea 12(sp),sp
    8c56:	|  |  /-- bra.s 8c5e <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    8c58:	\--|--|-> nop
    8c5a:	   |  +-- bra.s 8c5e <jumpPerson+0x8a>
    if (!moveMe) return;
    8c5c:	   \--|-> nop
}
    8c5e:	      \-> move.l (sp)+,d2
    8c60:	          addq.l #4,sp
    8c62:	          rts

00008c64 <killAllPeople>:


void killAllPeople () {
    8c64:	          subq.l #8,sp
    8c66:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    8c68:	   /----- bra.s 8cd4 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    8c6a:	/--|----> movea.l 19c08 <allPeople>,a0
    8c70:	|  |      move.l 56(a0),d0
    8c74:	|  |  /-- beq.s 8c8a <killAllPeople+0x26>
    8c76:	|  |  |   movea.l 19c08 <allPeople>,a0
    8c7c:	|  |  |   move.l 56(a0),d0
    8c80:	|  |  |   move.l d0,-(sp)
    8c82:	|  |  |   jsr 2d94 <abortFunction>
    8c88:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    8c8a:	|  |  \-> movea.l 19c08 <allPeople>,a0
    8c90:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    8c94:	|  |      move.l 19c08 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    8c9c:	|  |      movea.l 19c08 <allPeople>,a0
    8ca2:	|  |      move.l 24(a0),d0
    8ca6:	|  |      move.l d0,19c08 <allPeople>
		removeObjectType (killPeople -> thisType);
    8cac:	|  |      movea.l 8(sp),a0
    8cb0:	|  |      move.l 102(a0),d0
    8cb4:	|  |      move.l d0,-(sp)
    8cb6:	|  |      jsr b9b8 <removeObjectType>
    8cbc:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    8cbe:	|  |      move.l 8(sp),4(sp)
    8cc4:	|  |      move.l 19b50 <SysBase>,d0
    8cca:	|  |      movea.l d0,a6
    8ccc:	|  |      movea.l 4(sp),a1
    8cd0:	|  |      jsr -690(a6)
	while (allPeople) {
    8cd4:	|  \----> move.l 19c08 <allPeople>,d0
    8cda:	\-------- bne.s 8c6a <killAllPeople+0x6>
	}
}
    8cdc:	          nop
    8cde:	          nop
    8ce0:	          movea.l (sp)+,a6
    8ce2:	          addq.l #8,sp
    8ce4:	          rts

00008ce6 <killMostPeople>:

void killMostPeople() {
    8ce6:	          lea -12(sp),sp
    8cea:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    8cec:	          move.l #105480,12(sp)

    while (*lookyHere) {
    8cf4:	   /----- bra.w 8d7a <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    8cf8:	/--|----> movea.l 12(sp),a0
    8cfc:	|  |      movea.l (a0),a0
    8cfe:	|  |      move.l 106(a0),d0
    8d02:	|  |      moveq #32,d1
    8d04:	|  |      and.l d1,d0
    8d06:	|  |  /-- beq.s 8d18 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    8d08:	|  |  |   movea.l 12(sp),a0
    8d0c:	|  |  |   move.l (a0),d0
    8d0e:	|  |  |   moveq #24,d1
    8d10:	|  |  |   add.l d0,d1
    8d12:	|  |  |   move.l d1,12(sp)
    8d16:	|  +--|-- bra.s 8d7a <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    8d18:	|  |  \-> movea.l 12(sp),a0
    8d1c:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    8d20:	|  |      movea.l 8(sp),a0
    8d24:	|  |      move.l 24(a0),d0
    8d28:	|  |      movea.l 12(sp),a0
    8d2c:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    8d2e:	|  |      movea.l 8(sp),a0
    8d32:	|  |      move.l 56(a0),d0
    8d36:	|  |  /-- beq.s 8d4a <killMostPeople+0x64>
    8d38:	|  |  |   movea.l 8(sp),a0
    8d3c:	|  |  |   move.l 56(a0),d0
    8d40:	|  |  |   move.l d0,-(sp)
    8d42:	|  |  |   jsr 2d94 <abortFunction>
    8d48:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    8d4a:	|  |  \-> movea.l 8(sp),a0
    8d4e:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    8d52:	|  |      movea.l 8(sp),a0
    8d56:	|  |      move.l 102(a0),d0
    8d5a:	|  |      move.l d0,-(sp)
    8d5c:	|  |      jsr b9b8 <removeObjectType>
    8d62:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    8d64:	|  |      move.l 8(sp),4(sp)
    8d6a:	|  |      move.l 19b50 <SysBase>,d0
    8d70:	|  |      movea.l d0,a6
    8d72:	|  |      movea.l 4(sp),a1
    8d76:	|  |      jsr -690(a6)
    while (*lookyHere) {
    8d7a:	|  \----> movea.l 12(sp),a0
    8d7e:	|         move.l (a0),d0
    8d80:	\-------- bne.w 8cf8 <killMostPeople+0x12>
        }
    }
}
    8d84:	          nop
    8d86:	          nop
    8d88:	          movea.l (sp)+,a6
    8d8a:	          lea 12(sp),sp
    8d8e:	          rts

00008d90 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    8d90:	clr.l -(sp)
    8d92:	move.l sp,d0
    8d94:	addq.l #8,d0
    8d96:	move.l d0,-(sp)
    8d98:	jsr 652a <setFrames>
    8d9e:	addq.l #8,sp
}
    8da0:	nop
    8da2:	rts

00008da4 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    8da4:	          lea -12(sp),sp
    8da8:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    8daa:	          tst.l 20(sp)
    8dae:	      /-- bne.s 8dbc <makeWalkingPerson+0x18>
    8db0:	      |   tst.l 24(sp)
    8db4:	      +-- bne.s 8dbc <makeWalkingPerson+0x18>
    8db6:	      |   clr.w d0
    8db8:	/-----|-- bra.w 8f54 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    8dbc:	|     \-> movea.l 19cb0 <currentFloor>,a0
    8dc2:	|         move.l 8(a0),d0
    8dc6:	|     /-- bne.s 8dce <makeWalkingPerson+0x2a>
    8dc8:	|     |   clr.w d0
    8dca:	+-----|-- bra.w 8f54 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    8dce:	|     \-> move.l 28(sp),-(sp)
    8dd2:	|         jsr 887a <findPerson>
    8dd8:	|         addq.l #4,sp
    8dda:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    8dde:	|     /-- bne.s 8de6 <makeWalkingPerson+0x42>
    8de0:	|     |   clr.w d0
    8de2:	+-----|-- bra.w 8f54 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    8de6:	|     \-> movea.l 12(sp),a0
    8dea:	|         move.l 56(a0),d0
    8dee:	|     /-- beq.s 8e02 <makeWalkingPerson+0x5e>
    8df0:	|     |   movea.l 12(sp),a0
    8df4:	|     |   move.l 56(a0),d0
    8df8:	|     |   move.l d0,-(sp)
    8dfa:	|     |   jsr 2d94 <abortFunction>
    8e00:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    8e02:	|     \-> movea.l 12(sp),a0
    8e06:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    8e0a:	|         movea.l 12(sp),a0
    8e0e:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    8e14:	|         movea.l 12(sp),a0
    8e18:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    8e1e:	|         movea.l 12(sp),a0
    8e22:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    8e28:	|         movea.l 12(sp),a0
    8e2c:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    8e32:	|         move.l 24(sp),-(sp)
    8e36:	|         move.l 24(sp),-(sp)
    8e3a:	|         jsr 13b84 <inFloor>
    8e40:	|         addq.l #8,sp
    8e42:	|         movea.l 12(sp),a0
    8e46:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    8e4a:	|         movea.l 12(sp),a0
    8e4e:	|         move.l 48(a0),d0
    8e52:	|         moveq #-1,d1
    8e54:	|         cmp.l d0,d1
    8e56:	|     /-- bne.s 8e86 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    8e58:	|     |   movea.w #48,a0
    8e5c:	|     |   adda.l 12(sp),a0
    8e60:	|     |   moveq #32,d1
    8e62:	|     |   add.l 12(sp),d1
    8e66:	|     |   moveq #28,d0
    8e68:	|     |   add.l 12(sp),d0
    8e6c:	|     |   move.l a0,-(sp)
    8e6e:	|     |   move.l d1,-(sp)
    8e70:	|     |   move.l d0,-(sp)
    8e72:	|     |   jsr 8976 <handleClosestPoint>
    8e78:	|     |   lea 12(sp),sp
    8e7c:	|     |   tst.w d0
    8e7e:	|     +-- bne.s 8e86 <makeWalkingPerson+0xe2>
    8e80:	|     |   clr.w d0
    8e82:	+-----|-- bra.w 8f54 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    8e86:	|     \-> movea.l 12(sp),a0
    8e8a:	|         move.l 4(a0),d0
    8e8e:	|         move.l d0,-(sp)
    8e90:	|         jsr 14a72 <__fixsfsi>
    8e96:	|         addq.l #4,sp
    8e98:	|         move.l d0,d2
    8e9a:	|         movea.l 12(sp),a0
    8e9e:	|         move.l (a0),d0
    8ea0:	|         move.l d0,-(sp)
    8ea2:	|         jsr 14a72 <__fixsfsi>
    8ea8:	|         addq.l #4,sp
    8eaa:	|         move.l d2,-(sp)
    8eac:	|         move.l d0,-(sp)
    8eae:	|         jsr 13b84 <inFloor>
    8eb4:	|         addq.l #8,sp
    8eb6:	|         movea.l 12(sp),a0
    8eba:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    8ebe:	|         movea.l 12(sp),a0
    8ec2:	|         move.l 44(a0),d0
    8ec6:	|         moveq #-1,d1
    8ec8:	|         cmp.l d0,d1
    8eca:	|     /-- bne.s 8f1c <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    8ecc:	|     |   movea.l 12(sp),a0
    8ed0:	|     |   move.l (a0),d0
    8ed2:	|     |   move.l d0,-(sp)
    8ed4:	|     |   jsr 14a72 <__fixsfsi>
    8eda:	|     |   addq.l #4,sp
    8edc:	|     |   move.l d0,8(sp)
    8ee0:	|     |   movea.l 12(sp),a0
    8ee4:	|     |   move.l 4(a0),d0
    8ee8:	|     |   move.l d0,-(sp)
    8eea:	|     |   jsr 14a72 <__fixsfsi>
    8ef0:	|     |   addq.l #4,sp
    8ef2:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    8ef6:	|     |   moveq #44,d0
    8ef8:	|     |   add.l 12(sp),d0
    8efc:	|     |   move.l d0,-(sp)
    8efe:	|     |   lea 8(sp),a0
    8f02:	|     |   move.l a0,-(sp)
    8f04:	|     |   moveq #16,d0
    8f06:	|     |   add.l sp,d0
    8f08:	|     |   move.l d0,-(sp)
    8f0a:	|     |   jsr 8976 <handleClosestPoint>
    8f10:	|     |   lea 12(sp),sp
    8f14:	|     |   tst.w d0
    8f16:	|     +-- bne.s 8f1c <makeWalkingPerson+0x178>
    8f18:	|     |   clr.w d0
    8f1a:	+-----|-- bra.s 8f54 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    8f1c:	|     \-> move.l 12(sp),-(sp)
    8f20:	|         jsr 7c6c <doBorderStuff>
    8f26:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    8f28:	|         clr.l -(sp)
    8f2a:	|         move.l 16(sp),-(sp)
    8f2e:	|         jsr a12c <walkMe>
    8f34:	|         addq.l #8,sp
    8f36:	|         tst.w d0
    8f38:	|     /-- bne.s 8f44 <makeWalkingPerson+0x1a0>
    8f3a:	|     |   movea.l 12(sp),a0
    8f3e:	|     |   move.w 54(a0),d0
    8f42:	|  /--|-- beq.s 8f52 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    8f44:	|  |  \-> movea.l 12(sp),a0
    8f48:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    8f4e:	|  |      moveq #1,d0
    8f50:	+--|----- bra.s 8f54 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    8f52:	|  \----> clr.w d0
	}
}
    8f54:	\-------> move.l (sp)+,d2
    8f56:	          lea 12(sp),sp
    8f5a:	          rts

00008f5c <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    8f5c:	       lea -16(sp),sp
    8f60:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    8f62:	       moveq #12,d0
    8f64:	       move.l d0,16(sp)
    8f68:	       clr.l 12(sp)
    8f6c:	       move.l 19b50 <SysBase>,d0
    8f72:	       movea.l d0,a6
    8f74:	       move.l 16(sp),d0
    8f78:	       move.l 12(sp),d1
    8f7c:	       jsr -684(a6)
    8f80:	       move.l d0,8(sp)
    8f84:	       move.l 8(sp),d0
    8f88:	       move.l d0,4(sp)
    if(newAnim == 0) {
    8f8c:	   /-- bne.s 8fa0 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    8f8e:	   |   pea 1645e <PutChar+0x12ec>
    8f94:	   |   jsr 14822 <KPrintF>
    8f9a:	   |   addq.l #4,sp
        return NULL;    
    8f9c:	   |   moveq #0,d0
    8f9e:	/--|-- bra.s 8fba <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    8fa0:	|  \-> movea.l 4(sp),a0
    8fa4:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    8fa6:	|      movea.l 4(sp),a0
    8faa:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    8fae:	|      movea.l 4(sp),a0
    8fb2:	|      clr.l 4(a0)
	return newAnim;
    8fb6:	|      move.l 4(sp),d0
}
    8fba:	\----> movea.l (sp)+,a6
    8fbc:	       lea 16(sp),sp
    8fc0:	       rts

00008fc2 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    8fc2:	    move.l d2,-(sp)
	me->x = x;
    8fc4:	    movea.l 8(sp),a0
    8fc8:	    move.l 12(sp),(a0)
	me->y = y;
    8fcc:	    movea.l 8(sp),a0
    8fd0:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    8fd6:	    movea.l 8(sp),a0
    8fda:	    move.l 106(a0),d0
    8fde:	    moveq #2,d1
    8fe0:	    and.l d1,d0
    8fe2:	/-- bne.s 903a <moveAndScale+0x78>
    8fe4:	|   move.w 194ee <scaleDivide>,d0
    8fea:	+-- beq.s 903a <moveAndScale+0x78>
    8fec:	|   movea.l 8(sp),a0
    8ff0:	|   move.l 4(a0),d2
    8ff4:	|   move.w 194ec <scaleHorizon>,d0
    8ffa:	|   movea.w d0,a0
    8ffc:	|   move.l a0,-(sp)
    8ffe:	|   jsr 14ada <__floatsisf>
    9004:	|   addq.l #4,sp
    9006:	|   move.l d0,-(sp)
    9008:	|   move.l d2,-(sp)
    900a:	|   jsr 14dce <__subsf3>
    9010:	|   addq.l #8,sp
    9012:	|   move.l d0,d2
    9014:	|   move.w 194ee <scaleDivide>,d0
    901a:	|   movea.w d0,a0
    901c:	|   move.l a0,-(sp)
    901e:	|   jsr 14ada <__floatsisf>
    9024:	|   addq.l #4,sp
    9026:	|   move.l d0,-(sp)
    9028:	|   move.l d2,-(sp)
    902a:	|   jsr 14986 <__divsf3>
    9030:	|   addq.l #8,sp
    9032:	|   movea.l 8(sp),a0
    9036:	|   move.l d0,20(a0)
}
    903a:	\-> nop
    903c:	    move.l (sp)+,d2
    903e:	    rts

00009040 <removeOneCharacter>:

void removeOneCharacter (int i) {
    9040:	          lea -16(sp),sp
    9044:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    9046:	          move.l 24(sp),-(sp)
    904a:	          jsr 887a <findPerson>
    9050:	          addq.l #4,sp
    9052:	          move.l d0,8(sp)

    if (p) {
    9056:	/-------- beq.w 9136 <removeOneCharacter+0xf6>
		
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    905a:	|         move.l 19cac <overRegion>,d0
    9060:	|         cmpi.l #105484,d0
    9066:	|     /-- bne.s 9084 <removeOneCharacter+0x44>
    9068:	|     |   movea.l 19cac <overRegion>,a0
    906e:	|     |   move.l 28(a0),d1
    9072:	|     |   movea.l 8(sp),a0
    9076:	|     |   move.l 102(a0),d0
    907a:	|     |   cmp.l d1,d0
    907c:	|     +-- bne.s 9084 <removeOneCharacter+0x44>
            overRegion = NULL;
    907e:	|     |   clr.l 19cac <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    9084:	|     \-> movea.l 8(sp),a0
    9088:	|         move.l 56(a0),d0
    908c:	|     /-- beq.s 90a0 <removeOneCharacter+0x60>
    908e:	|     |   movea.l 8(sp),a0
    9092:	|     |   move.l 56(a0),d0
    9096:	|     |   move.l d0,-(sp)
    9098:	|     |   jsr 2d94 <abortFunction>
    909e:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    90a0:	|     \-> movea.l 8(sp),a0
    90a4:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    90a8:	|         clr.l 12(sp)
    90ac:	|     /-- bra.s 90d4 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    90ae:	|  /--|-> movea.l 8(sp),a0
    90b2:	|  |  |   movea.l 68(a0),a0
    90b6:	|  |  |   move.l (a0),d1
    90b8:	|  |  |   move.l 12(sp),d0
    90bc:	|  |  |   add.l d0,d0
    90be:	|  |  |   add.l d0,d0
    90c0:	|  |  |   movea.l d1,a0
    90c2:	|  |  |   adda.l d0,a0
    90c4:	|  |  |   move.l (a0),d0
    90c6:	|  |  |   move.l d0,-(sp)
    90c8:	|  |  |   jsr 7bf0 <deleteAnim>
    90ce:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    90d0:	|  |  |   addq.l #1,12(sp)
    90d4:	|  |  \-> moveq #2,d0
    90d6:	|  |      cmp.l 12(sp),d0
    90da:	|  \----- bge.s 90ae <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    90dc:	|         move.l #105480,16(sp)
    90e4:	|     /-- bra.s 90f4 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    90e6:	|  /--|-> movea.l 16(sp),a0
    90ea:	|  |  |   move.l (a0),d0
    90ec:	|  |  |   moveq #24,d1
    90ee:	|  |  |   add.l d0,d1
    90f0:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    90f4:	|  |  \-> movea.l 16(sp),a0
    90f8:	|  |      move.l (a0),d0
    90fa:	|  |      cmp.l 8(sp),d0
    90fe:	|  \----- bne.s 90e6 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    9100:	|         movea.l 8(sp),a0
    9104:	|         move.l 24(a0),d0
    9108:	|         movea.l 16(sp),a0
    910c:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    910e:	|         movea.l 8(sp),a0
    9112:	|         move.l 102(a0),d0
    9116:	|         move.l d0,-(sp)
    9118:	|         jsr b9b8 <removeObjectType>
    911e:	|         addq.l #4,sp
        FreeVec(p);
    9120:	|         move.l 8(sp),4(sp)
    9126:	|         move.l 19b50 <SysBase>,d0
    912c:	|         movea.l d0,a6
    912e:	|         movea.l 4(sp),a1
    9132:	|         jsr -690(a6)
    }
}
    9136:	\-------> nop
    9138:	          movea.l (sp)+,a6
    913a:	          lea 16(sp),sp
    913e:	          rts

00009140 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    9140:	       subq.l #8,sp
    9142:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    9144:	       movea.l 16(sp),a0
    9148:	       movea.l 68(a0),a0
    914c:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    9152:	       movea.l 16(sp),a0
    9156:	       move.l 80(a0),d2
    915a:	       move.l 4(sp),-(sp)
    915e:	       pea b4 <_start+0xb4>
    9162:	       jsr 150da <__divsi3>
    9168:	       addq.l #8,sp
    916a:	       add.l d2,d0
    916c:	       move.l d0,d1
    916e:	       addi.l #180,d1
    9174:	       movea.l 16(sp),a0
    9178:	       move.l 88(a0),d0
    917c:	       move.l d1,d2
    917e:	       add.l d0,d2
    9180:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    9184:	   /-- bra.s 918e <rethinkAngle+0x4e>
    9186:	/--|-> addi.l #-360,8(sp)
    918e:	|  \-> cmpi.l #359,8(sp)
    9196:	\----- bgt.s 9186 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    9198:	       move.l 4(sp),-(sp)
    919c:	       move.l 12(sp),-(sp)
    91a0:	       jsr 1505c <__mulsi3>
    91a6:	       addq.l #8,sp
    91a8:	       pea 168 <decodeFilename+0x50>
    91ac:	       move.l d0,-(sp)
    91ae:	       jsr 150da <__divsi3>
    91b4:	       addq.l #8,sp
    91b6:	       movea.l 16(sp),a0
    91ba:	       move.l d0,94(a0)
}
    91be:	       nop
    91c0:	       move.l (sp)+,d2
    91c2:	       addq.l #8,sp
    91c4:	       rts

000091c6 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    91c6:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    91c8:	          movea.l 8(sp),a0
    91cc:	          move.l 8(a0),d0
    91d0:	          move.l 12(sp),-(sp)
    91d4:	          move.l d0,-(sp)
    91d6:	          jsr 8d0 <put2bytes>
    91dc:	          addq.l #8,sp
	if (p -> numFrames) {
    91de:	          movea.l 8(sp),a0
    91e2:	          move.l 8(a0),d0
    91e6:	/-------- beq.w 928a <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    91ea:	|         movea.l 8(sp),a0
    91ee:	|         movea.l (a0),a0
    91f0:	|         move.l (a0),d0
    91f2:	|         move.l 12(sp),-(sp)
    91f6:	|         move.l d0,-(sp)
    91f8:	|         jsr 958 <put4bytes>
    91fe:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    9200:	|         clr.l (sp)
    9202:	|     /-- bra.s 927c <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    9204:	|  /--|-> movea.l 8(sp),a0
    9208:	|  |  |   movea.l 4(a0),a0
    920c:	|  |  |   move.l (sp),d1
    920e:	|  |  |   move.l d1,d0
    9210:	|  |  |   add.l d0,d0
    9212:	|  |  |   add.l d1,d0
    9214:	|  |  |   add.l d0,d0
    9216:	|  |  |   add.l d0,d0
    9218:	|  |  |   adda.l d0,a0
    921a:	|  |  |   move.l (a0),d0
    921c:	|  |  |   move.l 12(sp),-(sp)
    9220:	|  |  |   move.l d0,-(sp)
    9222:	|  |  |   jsr 958 <put4bytes>
    9228:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    922a:	|  |  |   movea.l 8(sp),a0
    922e:	|  |  |   movea.l 4(a0),a0
    9232:	|  |  |   move.l (sp),d1
    9234:	|  |  |   move.l d1,d0
    9236:	|  |  |   add.l d0,d0
    9238:	|  |  |   add.l d1,d0
    923a:	|  |  |   add.l d0,d0
    923c:	|  |  |   add.l d0,d0
    923e:	|  |  |   adda.l d0,a0
    9240:	|  |  |   move.l 4(a0),d0
    9244:	|  |  |   move.l 12(sp),-(sp)
    9248:	|  |  |   move.l d0,-(sp)
    924a:	|  |  |   jsr 958 <put4bytes>
    9250:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    9252:	|  |  |   movea.l 8(sp),a0
    9256:	|  |  |   movea.l 4(a0),a0
    925a:	|  |  |   move.l (sp),d1
    925c:	|  |  |   move.l d1,d0
    925e:	|  |  |   add.l d0,d0
    9260:	|  |  |   add.l d1,d0
    9262:	|  |  |   add.l d0,d0
    9264:	|  |  |   add.l d0,d0
    9266:	|  |  |   adda.l d0,a0
    9268:	|  |  |   move.l 8(a0),d0
    926c:	|  |  |   move.l 12(sp),-(sp)
    9270:	|  |  |   move.l d0,-(sp)
    9272:	|  |  |   jsr 958 <put4bytes>
    9278:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    927a:	|  |  |   addq.l #1,(sp)
    927c:	|  |  \-> movea.l 8(sp),a0
    9280:	|  |      move.l 8(a0),d0
    9284:	|  |      cmp.l (sp),d0
    9286:	|  \----- bgt.w 9204 <saveAnim+0x3e>
		}
	}
	return TRUE;
    928a:	\-------> moveq #1,d0
}
    928c:	          addq.l #4,sp
    928e:	          rts

00009290 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    9290:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    9292:	             movea.l 8(sp),a0
    9296:	             move.l 4(a0),d0
    929a:	             move.l 12(sp),-(sp)
    929e:	             move.l d0,-(sp)
    92a0:	             jsr 8d0 <put2bytes>
    92a6:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    92a8:	             clr.l (sp)
    92aa:	   /-------- bra.s 92d6 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    92ac:	/--|-------> movea.l 8(sp),a0
    92b0:	|  |         move.l (a0),d1
    92b2:	|  |         move.l (sp),d0
    92b4:	|  |         add.l d0,d0
    92b6:	|  |         add.l d0,d0
    92b8:	|  |         movea.l d1,a0
    92ba:	|  |         adda.l d0,a0
    92bc:	|  |         move.l (a0),d0
    92be:	|  |         move.l 12(sp),-(sp)
    92c2:	|  |         move.l d0,-(sp)
    92c4:	|  |         jsr 91c6 <saveAnim>
    92ca:	|  |         addq.l #8,sp
    92cc:	|  |         tst.w d0
    92ce:	|  |     /-- bne.s 92d4 <saveCostume+0x44>
    92d0:	|  |     |   clr.w d0
    92d2:	|  |  /--|-- bra.s 92ea <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    92d4:	|  |  |  \-> addq.l #1,(sp)
    92d6:	|  \--|----> movea.l 8(sp),a0
    92da:	|     |      move.l 4(a0),d1
    92de:	|     |      move.l d1,d0
    92e0:	|     |      add.l d0,d0
    92e2:	|     |      add.l d1,d0
    92e4:	|     |      cmp.l (sp),d0
    92e6:	\-----|----- bgt.s 92ac <saveCostume+0x1c>
	}

	return TRUE;
    92e8:	      |      moveq #1,d0
}
    92ea:	      \----> addq.l #4,sp
    92ec:	             rts

000092ee <savePeople>:

BOOL savePeople (BPTR fp) {
    92ee:	             lea -144(sp),sp
    92f2:	             move.l a6,-(sp)
    92f4:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    92f6:	             move.l 19c08 <allPeople>,148(sp)
	int countPeople = 0, a;
    92fe:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    9302:	             move.w 194ec <scaleHorizon>,d0
    9308:	             movea.w d0,a0
    930a:	             move.l 156(sp),-(sp)
    930e:	             move.l a0,-(sp)
    9310:	             jsr a9c <putSigned>
    9316:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    9318:	             move.w 194ee <scaleDivide>,d0
    931e:	             movea.w d0,a0
    9320:	             move.l 156(sp),-(sp)
    9324:	             move.l a0,-(sp)
    9326:	             jsr a9c <putSigned>
    932c:	             addq.l #8,sp

	while (me) {
    932e:	         /-- bra.s 933e <savePeople+0x50>
		countPeople ++;
    9330:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    9334:	      |  |   movea.l 148(sp),a0
    9338:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    933e:	      |  \-> tst.l 148(sp)
    9342:	      \----- bne.s 9330 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    9344:	             move.l 156(sp),-(sp)
    9348:	             move.l 148(sp),-(sp)
    934c:	             jsr 8d0 <put2bytes>
    9352:	             addq.l #8,sp

	me = allPeople;
    9354:	             move.l 19c08 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    935c:	             clr.l 140(sp)
    9360:	   /-------- bra.w 97b8 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    9364:	/--|-------> movea.l 148(sp),a0
    9368:	|  |         move.l (a0),d0
    936a:	|  |         move.l 156(sp),-(sp)
    936e:	|  |         move.l d0,-(sp)
    9370:	|  |         jsr a46 <putFloat>
    9376:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    9378:	|  |         movea.l 148(sp),a0
    937c:	|  |         move.l 4(a0),d0
    9380:	|  |         move.l 156(sp),-(sp)
    9384:	|  |         move.l d0,-(sp)
    9386:	|  |         jsr a46 <putFloat>
    938c:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    938e:	|  |         movea.l 148(sp),a0
    9392:	|  |         move.l 68(a0),d0
    9396:	|  |         move.l 156(sp),-(sp)
    939a:	|  |         move.l d0,-(sp)
    939c:	|  |         jsr 9290 <saveCostume>
    93a2:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    93a4:	|  |         movea.l 148(sp),a0
    93a8:	|  |         move.l 60(a0),d0
    93ac:	|  |         move.l 156(sp),-(sp)
    93b0:	|  |         move.l d0,-(sp)
    93b2:	|  |         jsr 91c6 <saveAnim>
    93b8:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    93ba:	|  |         move.l 156(sp),136(sp)
    93c0:	|  |         movea.l 148(sp),a0
    93c4:	|  |         move.l 60(a0),d1
    93c8:	|  |         movea.l 148(sp),a0
    93cc:	|  |         move.l 64(a0),d0
    93d0:	|  |         cmp.l d1,d0
    93d2:	|  |         seq d0
    93d4:	|  |         neg.b d0
    93d6:	|  |         move.b d0,d0
    93d8:	|  |         andi.l #255,d0
    93de:	|  |         move.l d0,132(sp)
    93e2:	|  |         move.l 19b58 <DOSBase>,d0
    93e8:	|  |         movea.l d0,a6
    93ea:	|  |         move.l 136(sp),d1
    93ee:	|  |         move.l 132(sp),d2
    93f2:	|  |         jsr -312(a6)
    93f6:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    93fa:	|  |         movea.l 148(sp),a0
    93fe:	|  |         move.l 20(a0),d0
    9402:	|  |         move.l 156(sp),-(sp)
    9406:	|  |         move.l d0,-(sp)
    9408:	|  |         jsr a46 <putFloat>
    940e:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    9410:	|  |         movea.l 148(sp),a0
    9414:	|  |         move.l 106(a0),d0
    9418:	|  |         move.l 156(sp),-(sp)
    941c:	|  |         move.l d0,-(sp)
    941e:	|  |         jsr 8d0 <put2bytes>
    9424:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    9426:	|  |         movea.l 148(sp),a0
    942a:	|  |         move.l 8(a0),d0
    942e:	|  |         move.l 156(sp),-(sp)
    9432:	|  |         move.l d0,-(sp)
    9434:	|  |         jsr 8d0 <put2bytes>
    943a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    943c:	|  |         movea.l 148(sp),a0
    9440:	|  |         move.l 28(a0),d0
    9444:	|  |         move.l 156(sp),-(sp)
    9448:	|  |         move.l d0,-(sp)
    944a:	|  |         jsr 8d0 <put2bytes>
    9450:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    9452:	|  |         movea.l 148(sp),a0
    9456:	|  |         move.l 32(a0),d0
    945a:	|  |         move.l 156(sp),-(sp)
    945e:	|  |         move.l d0,-(sp)
    9460:	|  |         jsr 8d0 <put2bytes>
    9466:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    9468:	|  |         movea.l 148(sp),a0
    946c:	|  |         move.l 36(a0),d0
    9470:	|  |         move.l 156(sp),-(sp)
    9474:	|  |         move.l d0,-(sp)
    9476:	|  |         jsr 8d0 <put2bytes>
    947c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    947e:	|  |         movea.l 148(sp),a0
    9482:	|  |         move.l 40(a0),d0
    9486:	|  |         move.l 156(sp),-(sp)
    948a:	|  |         move.l d0,-(sp)
    948c:	|  |         jsr 8d0 <put2bytes>
    9492:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    9494:	|  |         movea.l 148(sp),a0
    9498:	|  |         move.l 72(a0),d0
    949c:	|  |         move.l 156(sp),-(sp)
    94a0:	|  |         move.l d0,-(sp)
    94a2:	|  |         jsr 8d0 <put2bytes>
    94a8:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    94aa:	|  |         movea.l 148(sp),a0
    94ae:	|  |         move.l 76(a0),d0
    94b2:	|  |         move.l 156(sp),-(sp)
    94b6:	|  |         move.l d0,-(sp)
    94b8:	|  |         jsr 8d0 <put2bytes>
    94be:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    94c0:	|  |         movea.l 148(sp),a0
    94c4:	|  |         move.l 16(a0),d0
    94c8:	|  |         move.l 156(sp),-(sp)
    94cc:	|  |         move.l d0,-(sp)
    94ce:	|  |         jsr 8d0 <put2bytes>
    94d4:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    94d6:	|  |         movea.l 148(sp),a0
    94da:	|  |         move.l 110(a0),d0
    94de:	|  |         move.l 156(sp),-(sp)
    94e2:	|  |         move.l d0,-(sp)
    94e4:	|  |         jsr 8d0 <put2bytes>
    94ea:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    94ec:	|  |         movea.l 148(sp),a0
    94f0:	|  |         move.l 12(a0),d0
    94f4:	|  |         move.l d0,d0
    94f6:	|  |         movea.w d0,a0
    94f8:	|  |         move.l 156(sp),-(sp)
    94fc:	|  |         move.l a0,-(sp)
    94fe:	|  |         jsr a9c <putSigned>
    9504:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    9506:	|  |         move.l 156(sp),124(sp)
    950c:	|  |         movea.l 148(sp),a0
    9510:	|  |         move.w 92(a0),d0
    9514:	|  |         movea.w d0,a0
    9516:	|  |         move.l a0,120(sp)
    951a:	|  |         move.l 19b58 <DOSBase>,d0
    9520:	|  |         movea.l d0,a6
    9522:	|  |         move.l 124(sp),d1
    9526:	|  |         move.l 120(sp),d2
    952a:	|  |         jsr -312(a6)
    952e:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    9532:	|  |         move.l 156(sp),112(sp)
    9538:	|  |         movea.l 148(sp),a0
    953c:	|  |         move.w 52(a0),d0
    9540:	|  |         movea.w d0,a0
    9542:	|  |         move.l a0,108(sp)
    9546:	|  |         move.l 19b58 <DOSBase>,d0
    954c:	|  |         movea.l d0,a6
    954e:	|  |         move.l 112(sp),d1
    9552:	|  |         move.l 108(sp),d2
    9556:	|  |         jsr -312(a6)
    955a:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    955e:	|  |         move.l 156(sp),100(sp)
    9564:	|  |         movea.l 148(sp),a0
    9568:	|  |         move.w 54(a0),d0
    956c:	|  |         movea.w d0,a0
    956e:	|  |         move.l a0,96(sp)
    9572:	|  |         move.l 19b58 <DOSBase>,d0
    9578:	|  |         movea.l d0,a6
    957a:	|  |         move.l 100(sp),d1
    957e:	|  |         move.l 96(sp),d2
    9582:	|  |         jsr -312(a6)
    9586:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    958a:	|  |         movea.l 148(sp),a0
    958e:	|  |         move.l 56(a0),d0
    9592:	|  |  /----- beq.s 95d0 <savePeople+0x2e2>
			FPutC (fp, 1);
    9594:	|  |  |      move.l 156(sp),76(sp)
    959a:	|  |  |      moveq #1,d0
    959c:	|  |  |      move.l d0,72(sp)
    95a0:	|  |  |      move.l 19b58 <DOSBase>,d0
    95a6:	|  |  |      movea.l d0,a6
    95a8:	|  |  |      move.l 76(sp),d1
    95ac:	|  |  |      move.l 72(sp),d2
    95b0:	|  |  |      jsr -312(a6)
    95b4:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    95b8:	|  |  |      movea.l 148(sp),a0
    95bc:	|  |  |      move.l 56(a0),d0
    95c0:	|  |  |      move.l 156(sp),-(sp)
    95c4:	|  |  |      move.l d0,-(sp)
    95c6:	|  |  |      jsr a864 <saveFunction>
    95cc:	|  |  |      addq.l #8,sp
    95ce:	|  |  |  /-- bra.s 95f4 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    95d0:	|  |  \--|-> move.l 156(sp),88(sp)
    95d6:	|  |     |   moveq #1,d0
    95d8:	|  |     |   move.l d0,84(sp)
    95dc:	|  |     |   move.l 19b58 <DOSBase>,d0
    95e2:	|  |     |   movea.l d0,a6
    95e4:	|  |     |   move.l 88(sp),d1
    95e8:	|  |     |   move.l 84(sp),d2
    95ec:	|  |     |   jsr -312(a6)
    95f0:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    95f4:	|  |     \-> movea.l 148(sp),a0
    95f8:	|  |         move.l 94(a0),d0
    95fc:	|  |         move.l 156(sp),-(sp)
    9600:	|  |         move.l d0,-(sp)
    9602:	|  |         jsr 8d0 <put2bytes>
    9608:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    960a:	|  |         movea.l 148(sp),a0
    960e:	|  |         move.l 80(a0),d0
    9612:	|  |         move.l 156(sp),-(sp)
    9616:	|  |         move.l d0,-(sp)
    9618:	|  |         jsr 8d0 <put2bytes>
    961e:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    9620:	|  |         movea.l 148(sp),a0
    9624:	|  |         move.l 88(a0),d0
    9628:	|  |         move.l 156(sp),-(sp)
    962c:	|  |         move.l d0,-(sp)
    962e:	|  |         jsr 8d0 <put2bytes>
    9634:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    9636:	|  |         movea.l 148(sp),a0
    963a:	|  |         move.l 84(a0),d0
    963e:	|  |         move.l 156(sp),-(sp)
    9642:	|  |         move.l d0,-(sp)
    9644:	|  |         jsr 8d0 <put2bytes>
    964a:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    964c:	|  |         movea.l 148(sp),a0
    9650:	|  |         move.l 98(a0),d0
    9654:	|  |         move.l d0,d0
    9656:	|  |         movea.w d0,a0
    9658:	|  |         move.l 156(sp),-(sp)
    965c:	|  |         move.l a0,-(sp)
    965e:	|  |         jsr a9c <putSigned>
    9664:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    9666:	|  |         movea.l 148(sp),a0
    966a:	|  |         move.l 44(a0),d0
    966e:	|  |         move.l d0,d0
    9670:	|  |         movea.w d0,a0
    9672:	|  |         move.l 156(sp),-(sp)
    9676:	|  |         move.l a0,-(sp)
    9678:	|  |         jsr a9c <putSigned>
    967e:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    9680:	|  |         movea.l 148(sp),a0
    9684:	|  |         move.l 48(a0),d0
    9688:	|  |         move.l d0,d0
    968a:	|  |         movea.w d0,a0
    968c:	|  |         move.l 156(sp),-(sp)
    9690:	|  |         move.l a0,-(sp)
    9692:	|  |         jsr a9c <putSigned>
    9698:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    969a:	|  |         move.l 156(sp),64(sp)
    96a0:	|  |         movea.l 148(sp),a0
    96a4:	|  |         move.b 114(a0),d0
    96a8:	|  |         move.b d0,d0
    96aa:	|  |         andi.l #255,d0
    96b0:	|  |         move.l d0,60(sp)
    96b4:	|  |         move.l 19b58 <DOSBase>,d0
    96ba:	|  |         movea.l d0,a6
    96bc:	|  |         move.l 64(sp),d1
    96c0:	|  |         move.l 60(sp),d2
    96c4:	|  |         jsr -312(a6)
    96c8:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    96cc:	|  |         move.l 156(sp),52(sp)
    96d2:	|  |         movea.l 148(sp),a0
    96d6:	|  |         move.b 115(a0),d0
    96da:	|  |         move.b d0,d0
    96dc:	|  |         andi.l #255,d0
    96e2:	|  |         move.l d0,48(sp)
    96e6:	|  |         move.l 19b58 <DOSBase>,d0
    96ec:	|  |         movea.l d0,a6
    96ee:	|  |         move.l 52(sp),d1
    96f2:	|  |         move.l 48(sp),d2
    96f6:	|  |         jsr -312(a6)
    96fa:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    96fe:	|  |         move.l 156(sp),40(sp)
    9704:	|  |         movea.l 148(sp),a0
    9708:	|  |         move.b 116(a0),d0
    970c:	|  |         move.b d0,d0
    970e:	|  |         andi.l #255,d0
    9714:	|  |         move.l d0,36(sp)
    9718:	|  |         move.l 19b58 <DOSBase>,d0
    971e:	|  |         movea.l d0,a6
    9720:	|  |         move.l 40(sp),d1
    9724:	|  |         move.l 36(sp),d2
    9728:	|  |         jsr -312(a6)
    972c:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    9730:	|  |         move.l 156(sp),28(sp)
    9736:	|  |         movea.l 148(sp),a0
    973a:	|  |         move.b 117(a0),d0
    973e:	|  |         move.b d0,d0
    9740:	|  |         andi.l #255,d0
    9746:	|  |         move.l d0,24(sp)
    974a:	|  |         move.l 19b58 <DOSBase>,d0
    9750:	|  |         movea.l d0,a6
    9752:	|  |         move.l 28(sp),d1
    9756:	|  |         move.l 24(sp),d2
    975a:	|  |         jsr -312(a6)
    975e:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    9762:	|  |         move.l 156(sp),16(sp)
    9768:	|  |         movea.l 148(sp),a0
    976c:	|  |         move.b 118(a0),d0
    9770:	|  |         move.b d0,d0
    9772:	|  |         andi.l #255,d0
    9778:	|  |         move.l d0,12(sp)
    977c:	|  |         move.l 19b58 <DOSBase>,d0
    9782:	|  |         movea.l d0,a6
    9784:	|  |         move.l 16(sp),d1
    9788:	|  |         move.l 12(sp),d2
    978c:	|  |         jsr -312(a6)
    9790:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    9794:	|  |         movea.l 148(sp),a0
    9798:	|  |         move.l 102(a0),d0
    979c:	|  |         move.l 156(sp),-(sp)
    97a0:	|  |         move.l d0,-(sp)
    97a2:	|  |         jsr ba58 <saveObjectRef>
    97a8:	|  |         addq.l #8,sp

		me = me -> next;
    97aa:	|  |         movea.l 148(sp),a0
    97ae:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    97b4:	|  |         addq.l #1,140(sp)
    97b8:	|  \-------> movea.l 140(sp),a0
    97bc:	|            cmpa.l 144(sp),a0
    97c0:	\----------- blt.w 9364 <savePeople+0x76>
	}
	return TRUE;
    97c4:	             moveq #1,d0
}
    97c6:	             move.l (sp)+,d2
    97c8:	             movea.l (sp)+,a6
    97ca:	             lea 144(sp),sp
    97ce:	             rts

000097d0 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    97d0:	movea.l 4(sp),a0
    97d4:	move.l 8(sp),(a0)
}
    97d8:	nop
    97da:	rts

000097dc <setDrawMode>:


void setDrawMode (int h, int ob) {
    97dc:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    97de:	       move.l 12(sp),-(sp)
    97e2:	       jsr 887a <findPerson>
    97e8:	       addq.l #4,sp
    97ea:	       move.l d0,(sp)
	if (! moveMe) return;
    97ec:	/----- beq.s 9800 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    97ee:	|      move.l 8(sp),-(sp)
    97f2:	|      move.l 4(sp),-(sp)
    97f6:	|      jsr 9806 <setMyDrawMode>
    97fc:	|      addq.l #8,sp
    97fe:	|  /-- bra.s 9802 <setDrawMode+0x26>
	if (! moveMe) return;
    9800:	\--|-> nop
}
    9802:	   \-> addq.l #4,sp
    9804:	       rts

00009806 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    9806:	       moveq #19,d0
    9808:	       cmp.l 8(sp),d0
    980c:	/----- bcs.w 9ce4 <setMyDrawMode+0x4de>
    9810:	|      move.l 8(sp),d0
    9814:	|      add.l d0,d0
    9816:	|      movea.l d0,a0
    9818:	|      adda.l #38948,a0
    981e:	|      move.w (a0),d0
    9820:	|      jmp (9824 <setMyDrawMode+0x1e>,pc,d0.w)
    9824:	|      .short 0x04c0
    9826:	|      ori.l #6684712,-(a4)
    982c:	|      btst d0,-(a0)
    982e:	|      bchg d0,(a6)+
    9830:	|      bclr d0,(a4)+
    9832:	|      bset d0,(a2)+
    9834:	|      andi.b #84,(a6)
    9838:	|      andi.l #55575312,(a2)
    983e:	|      .short 0x02d0
    9840:	|      bclr d1,(a0)
    9842:	|      .short 0x044a
    9844:	|      .short 0x040c
    9846:	|      movep.l d1,1158(a6)
    984a:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    984c:	|      movea.l 4(sp),a0
    9850:	|      clr.b 116(a0)
    9854:	|      movea.l 4(sp),a0
    9858:	|      move.b 116(a0),d0
    985c:	|      movea.l 4(sp),a0
    9860:	|      move.b d0,115(a0)
    9864:	|      movea.l 4(sp),a0
    9868:	|      move.b 115(a0),d0
    986c:	|      movea.l 4(sp),a0
    9870:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    9874:	|      movea.l 4(sp),a0
    9878:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    987c:	|      movea.l 4(sp),a0
    9880:	|      move.b #64,118(a0)
			break;
    9886:	|  /-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    988a:	|  |   movea.l 4(sp),a0
    988e:	|  |   clr.b 116(a0)
    9892:	|  |   movea.l 4(sp),a0
    9896:	|  |   move.b 116(a0),d0
    989a:	|  |   movea.l 4(sp),a0
    989e:	|  |   move.b d0,115(a0)
    98a2:	|  |   movea.l 4(sp),a0
    98a6:	|  |   move.b 115(a0),d0
    98aa:	|  |   movea.l 4(sp),a0
    98ae:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    98b2:	|  |   movea.l 4(sp),a0
    98b6:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    98ba:	|  |   movea.l 4(sp),a0
    98be:	|  |   move.b #-128,118(a0)
			break;
    98c4:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    98c8:	|  |   movea.l 4(sp),a0
    98cc:	|  |   clr.b 116(a0)
    98d0:	|  |   movea.l 4(sp),a0
    98d4:	|  |   move.b 116(a0),d0
    98d8:	|  |   movea.l 4(sp),a0
    98dc:	|  |   move.b d0,115(a0)
    98e0:	|  |   movea.l 4(sp),a0
    98e4:	|  |   move.b 115(a0),d0
    98e8:	|  |   movea.l 4(sp),a0
    98ec:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    98f0:	|  |   movea.l 4(sp),a0
    98f4:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    98f8:	|  |   movea.l 4(sp),a0
    98fc:	|  |   move.b #-64,118(a0)
			break;
    9902:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9906:	|  |   movea.l 4(sp),a0
    990a:	|  |   clr.b 116(a0)
    990e:	|  |   movea.l 4(sp),a0
    9912:	|  |   move.b 116(a0),d0
    9916:	|  |   movea.l 4(sp),a0
    991a:	|  |   move.b d0,115(a0)
    991e:	|  |   movea.l 4(sp),a0
    9922:	|  |   move.b 115(a0),d0
    9926:	|  |   movea.l 4(sp),a0
    992a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    992e:	|  |   movea.l 4(sp),a0
    9932:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    9936:	|  |   movea.l 4(sp),a0
    993a:	|  |   move.b #-2,118(a0)
			break;
    9940:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9944:	|  |   movea.l 4(sp),a0
    9948:	|  |   clr.b 116(a0)
    994c:	|  |   movea.l 4(sp),a0
    9950:	|  |   move.b 116(a0),d0
    9954:	|  |   movea.l 4(sp),a0
    9958:	|  |   move.b d0,115(a0)
    995c:	|  |   movea.l 4(sp),a0
    9960:	|  |   move.b 115(a0),d0
    9964:	|  |   movea.l 4(sp),a0
    9968:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    996c:	|  |   movea.l 4(sp),a0
    9970:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    9976:	|  |   movea.l 4(sp),a0
    997a:	|  |   clr.b 118(a0)
			break;
    997e:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9982:	|  |   movea.l 4(sp),a0
    9986:	|  |   clr.b 116(a0)
    998a:	|  |   movea.l 4(sp),a0
    998e:	|  |   move.b 116(a0),d0
    9992:	|  |   movea.l 4(sp),a0
    9996:	|  |   move.b d0,115(a0)
    999a:	|  |   movea.l 4(sp),a0
    999e:	|  |   move.b 115(a0),d0
    99a2:	|  |   movea.l 4(sp),a0
    99a6:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    99aa:	|  |   movea.l 4(sp),a0
    99ae:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    99b4:	|  |   movea.l 4(sp),a0
    99b8:	|  |   clr.b 118(a0)
			break;
    99bc:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    99c0:	|  |   movea.l 4(sp),a0
    99c4:	|  |   clr.b 116(a0)
    99c8:	|  |   movea.l 4(sp),a0
    99cc:	|  |   move.b 116(a0),d0
    99d0:	|  |   movea.l 4(sp),a0
    99d4:	|  |   move.b d0,115(a0)
    99d8:	|  |   movea.l 4(sp),a0
    99dc:	|  |   move.b 115(a0),d0
    99e0:	|  |   movea.l 4(sp),a0
    99e4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    99e8:	|  |   movea.l 4(sp),a0
    99ec:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    99f2:	|  |   movea.l 4(sp),a0
    99f6:	|  |   clr.b 118(a0)
			break;
    99fa:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    99fe:	|  |   movea.l 4(sp),a0
    9a02:	|  |   clr.b 116(a0)
    9a06:	|  |   movea.l 4(sp),a0
    9a0a:	|  |   move.b 116(a0),d0
    9a0e:	|  |   movea.l 4(sp),a0
    9a12:	|  |   move.b d0,115(a0)
    9a16:	|  |   movea.l 4(sp),a0
    9a1a:	|  |   move.b 115(a0),d0
    9a1e:	|  |   movea.l 4(sp),a0
    9a22:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9a26:	|  |   movea.l 4(sp),a0
    9a2a:	|  |   st 117(a0)
			moveMe->transparency = 0;
    9a2e:	|  |   movea.l 4(sp),a0
    9a32:	|  |   clr.b 118(a0)
			break;
    9a36:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9a3a:	|  |   movea.l 4(sp),a0
    9a3e:	|  |   clr.b 116(a0)
    9a42:	|  |   movea.l 4(sp),a0
    9a46:	|  |   move.b 116(a0),d0
    9a4a:	|  |   movea.l 4(sp),a0
    9a4e:	|  |   move.b d0,115(a0)
    9a52:	|  |   movea.l 4(sp),a0
    9a56:	|  |   move.b 115(a0),d0
    9a5a:	|  |   movea.l 4(sp),a0
    9a5e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9a62:	|  |   movea.l 4(sp),a0
    9a66:	|  |   st 117(a0)
			moveMe->transparency = 64;
    9a6a:	|  |   movea.l 4(sp),a0
    9a6e:	|  |   move.b #64,118(a0)
			break;
    9a74:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9a78:	|  |   movea.l 4(sp),a0
    9a7c:	|  |   clr.b 116(a0)
    9a80:	|  |   movea.l 4(sp),a0
    9a84:	|  |   move.b 116(a0),d0
    9a88:	|  |   movea.l 4(sp),a0
    9a8c:	|  |   move.b d0,115(a0)
    9a90:	|  |   movea.l 4(sp),a0
    9a94:	|  |   move.b 115(a0),d0
    9a98:	|  |   movea.l 4(sp),a0
    9a9c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9aa0:	|  |   movea.l 4(sp),a0
    9aa4:	|  |   st 117(a0)
			moveMe->transparency = 128;
    9aa8:	|  |   movea.l 4(sp),a0
    9aac:	|  |   move.b #-128,118(a0)
			break;
    9ab2:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9ab6:	|  |   movea.l 4(sp),a0
    9aba:	|  |   clr.b 116(a0)
    9abe:	|  |   movea.l 4(sp),a0
    9ac2:	|  |   move.b 116(a0),d0
    9ac6:	|  |   movea.l 4(sp),a0
    9aca:	|  |   move.b d0,115(a0)
    9ace:	|  |   movea.l 4(sp),a0
    9ad2:	|  |   move.b 115(a0),d0
    9ad6:	|  |   movea.l 4(sp),a0
    9ada:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9ade:	|  |   movea.l 4(sp),a0
    9ae2:	|  |   st 117(a0)
			moveMe->transparency = 192;
    9ae6:	|  |   movea.l 4(sp),a0
    9aea:	|  |   move.b #-64,118(a0)
			break;
    9af0:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    9af4:	|  |   movea.l 4(sp),a0
    9af8:	|  |   move.b #-128,116(a0)
    9afe:	|  |   movea.l 4(sp),a0
    9b02:	|  |   move.b 116(a0),d0
    9b06:	|  |   movea.l 4(sp),a0
    9b0a:	|  |   move.b d0,115(a0)
    9b0e:	|  |   movea.l 4(sp),a0
    9b12:	|  |   move.b 115(a0),d0
    9b16:	|  |   movea.l 4(sp),a0
    9b1a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    9b1e:	|  |   movea.l 4(sp),a0
    9b22:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    9b28:	|  |   movea.l 4(sp),a0
    9b2c:	|  |   clr.b 118(a0)
			break;
    9b30:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    9b34:	|  |   movea.l 4(sp),a0
    9b38:	|  |   move.b #-128,116(a0)
    9b3e:	|  |   movea.l 4(sp),a0
    9b42:	|  |   move.b 116(a0),d0
    9b46:	|  |   movea.l 4(sp),a0
    9b4a:	|  |   move.b d0,115(a0)
    9b4e:	|  |   movea.l 4(sp),a0
    9b52:	|  |   move.b 115(a0),d0
    9b56:	|  |   movea.l 4(sp),a0
    9b5a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    9b5e:	|  |   movea.l 4(sp),a0
    9b62:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    9b68:	|  |   movea.l 4(sp),a0
    9b6c:	|  |   clr.b 118(a0)
			break;
    9b70:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    9b74:	|  |   movea.l 4(sp),a0
    9b78:	|  |   move.b #-128,116(a0)
    9b7e:	|  |   movea.l 4(sp),a0
    9b82:	|  |   move.b 116(a0),d0
    9b86:	|  |   movea.l 4(sp),a0
    9b8a:	|  |   move.b d0,115(a0)
    9b8e:	|  |   movea.l 4(sp),a0
    9b92:	|  |   move.b 115(a0),d0
    9b96:	|  |   movea.l 4(sp),a0
    9b9a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    9b9e:	|  |   movea.l 4(sp),a0
    9ba2:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    9ba8:	|  |   movea.l 4(sp),a0
    9bac:	|  |   clr.b 118(a0)
			break;
    9bb0:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    9bb4:	|  |   movea.l 4(sp),a0
    9bb8:	|  |   move.b #-128,116(a0)
    9bbe:	|  |   movea.l 4(sp),a0
    9bc2:	|  |   move.b 116(a0),d0
    9bc6:	|  |   movea.l 4(sp),a0
    9bca:	|  |   move.b d0,115(a0)
    9bce:	|  |   movea.l 4(sp),a0
    9bd2:	|  |   move.b 115(a0),d0
    9bd6:	|  |   movea.l 4(sp),a0
    9bda:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9bde:	|  |   movea.l 4(sp),a0
    9be2:	|  |   st 117(a0)
			moveMe->transparency = 0;
    9be6:	|  |   movea.l 4(sp),a0
    9bea:	|  |   clr.b 118(a0)
			break;
    9bee:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9bf2:	|  |   movea.l 4(sp),a0
    9bf6:	|  |   st 116(a0)
    9bfa:	|  |   movea.l 4(sp),a0
    9bfe:	|  |   move.b 116(a0),d0
    9c02:	|  |   movea.l 4(sp),a0
    9c06:	|  |   move.b d0,115(a0)
    9c0a:	|  |   movea.l 4(sp),a0
    9c0e:	|  |   move.b 115(a0),d0
    9c12:	|  |   movea.l 4(sp),a0
    9c16:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    9c1a:	|  |   movea.l 4(sp),a0
    9c1e:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    9c24:	|  |   movea.l 4(sp),a0
    9c28:	|  |   clr.b 118(a0)
			break;
    9c2c:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9c30:	|  |   movea.l 4(sp),a0
    9c34:	|  |   st 116(a0)
    9c38:	|  |   movea.l 4(sp),a0
    9c3c:	|  |   move.b 116(a0),d0
    9c40:	|  |   movea.l 4(sp),a0
    9c44:	|  |   move.b d0,115(a0)
    9c48:	|  |   movea.l 4(sp),a0
    9c4c:	|  |   move.b 115(a0),d0
    9c50:	|  |   movea.l 4(sp),a0
    9c54:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    9c58:	|  |   movea.l 4(sp),a0
    9c5c:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    9c62:	|  |   movea.l 4(sp),a0
    9c66:	|  |   clr.b 118(a0)
			break;
    9c6a:	|  +-- bra.w 9d1e <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9c6e:	|  |   movea.l 4(sp),a0
    9c72:	|  |   st 116(a0)
    9c76:	|  |   movea.l 4(sp),a0
    9c7a:	|  |   move.b 116(a0),d0
    9c7e:	|  |   movea.l 4(sp),a0
    9c82:	|  |   move.b d0,115(a0)
    9c86:	|  |   movea.l 4(sp),a0
    9c8a:	|  |   move.b 115(a0),d0
    9c8e:	|  |   movea.l 4(sp),a0
    9c92:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    9c96:	|  |   movea.l 4(sp),a0
    9c9a:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    9ca0:	|  |   movea.l 4(sp),a0
    9ca4:	|  |   clr.b 118(a0)
			break;
    9ca8:	|  +-- bra.s 9d1e <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9caa:	|  |   movea.l 4(sp),a0
    9cae:	|  |   st 116(a0)
    9cb2:	|  |   movea.l 4(sp),a0
    9cb6:	|  |   move.b 116(a0),d0
    9cba:	|  |   movea.l 4(sp),a0
    9cbe:	|  |   move.b d0,115(a0)
    9cc2:	|  |   movea.l 4(sp),a0
    9cc6:	|  |   move.b 115(a0),d0
    9cca:	|  |   movea.l 4(sp),a0
    9cce:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9cd2:	|  |   movea.l 4(sp),a0
    9cd6:	|  |   st 117(a0)
			moveMe->transparency = 0;
    9cda:	|  |   movea.l 4(sp),a0
    9cde:	|  |   clr.b 118(a0)
			break;
    9ce2:	|  +-- bra.s 9d1e <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9ce4:	\--|-> movea.l 4(sp),a0
    9ce8:	   |   clr.b 116(a0)
    9cec:	   |   movea.l 4(sp),a0
    9cf0:	   |   move.b 116(a0),d0
    9cf4:	   |   movea.l 4(sp),a0
    9cf8:	   |   move.b d0,115(a0)
    9cfc:	   |   movea.l 4(sp),a0
    9d00:	   |   move.b 115(a0),d0
    9d04:	   |   movea.l 4(sp),a0
    9d08:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    9d0c:	   |   movea.l 4(sp),a0
    9d10:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    9d14:	   |   movea.l 4(sp),a0
    9d18:	   |   clr.b 118(a0)
			break;
    9d1c:	   |   nop
	}
}
    9d1e:	   \-> nop
    9d20:	       rts

00009d22 <shufflePeople>:

void shufflePeople () {
    9d22:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    9d26:	             move.l #105480,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    9d2e:	             move.l 19c08 <allPeople>,d0
    9d34:	/----------- beq.w 9e0a <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    9d38:	|     /----- bra.w 9dfa <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    9d3c:	|  /--|----> movea.l 16(sp),a0
    9d40:	|  |  |      movea.l (a0),a0
    9d42:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    9d48:	|  |  |      movea.l 16(sp),a0
    9d4c:	|  |  |      movea.l (a0),a0
    9d4e:	|  |  |      move.l 106(a0),d0
    9d52:	|  |  |      moveq #1,d1
    9d54:	|  |  |      and.l d1,d0
    9d56:	|  |  |  /-- beq.s 9d6e <shufflePeople+0x4c>
    9d58:	|  |  |  |   move.l #1148846080,-(sp)
    9d5e:	|  |  |  |   move.l 16(sp),-(sp)
    9d62:	|  |  |  |   jsr 1488c <__addsf3>
    9d68:	|  |  |  |   addq.l #8,sp
    9d6a:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    9d6e:	|  |  |  \-> movea.l 16(sp),a0
    9d72:	|  |  |      movea.l (a0),a0
    9d74:	|  |  |      movea.l 24(a0),a0
    9d78:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    9d7e:	|  |  |      movea.l 16(sp),a0
    9d82:	|  |  |      movea.l (a0),a0
    9d84:	|  |  |      movea.l 24(a0),a0
    9d88:	|  |  |      move.l 106(a0),d0
    9d8c:	|  |  |      moveq #1,d1
    9d8e:	|  |  |      and.l d1,d0
    9d90:	|  |  |  /-- beq.s 9da8 <shufflePeople+0x86>
    9d92:	|  |  |  |   move.l #1148846080,-(sp)
    9d98:	|  |  |  |   move.l 12(sp),-(sp)
    9d9c:	|  |  |  |   jsr 1488c <__addsf3>
    9da2:	|  |  |  |   addq.l #8,sp
    9da4:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    9da8:	|  |  |  \-> move.l 8(sp),-(sp)
    9dac:	|  |  |      move.l 16(sp),-(sp)
    9db0:	|  |  |      jsr 14c46 <__gtsf2>
    9db6:	|  |  |      addq.l #8,sp
    9db8:	|  |  |      tst.l d0
    9dba:	|  |  |  /-- ble.s 9dec <shufflePeople+0xca>
			A = (*thisReference);
    9dbc:	|  |  |  |   movea.l 16(sp),a0
    9dc0:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    9dc4:	|  |  |  |   movea.l 16(sp),a0
    9dc8:	|  |  |  |   movea.l (a0),a0
    9dca:	|  |  |  |   move.l 24(a0),(sp)
			A->next = B->next;
    9dce:	|  |  |  |   movea.l (sp),a0
    9dd0:	|  |  |  |   move.l 24(a0),d0
    9dd4:	|  |  |  |   movea.l 4(sp),a0
    9dd8:	|  |  |  |   move.l d0,24(a0)
			B->next = A;
    9ddc:	|  |  |  |   movea.l (sp),a0
    9dde:	|  |  |  |   move.l 4(sp),24(a0)
			(*thisReference) = B;
    9de4:	|  |  |  |   movea.l 16(sp),a0
    9de8:	|  |  |  |   move.l (sp),(a0)
    9dea:	|  |  +--|-- bra.s 9dfa <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    9dec:	|  |  |  \-> movea.l 16(sp),a0
    9df0:	|  |  |      move.l (a0),d0
    9df2:	|  |  |      moveq #24,d1
    9df4:	|  |  |      add.l d0,d1
    9df6:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    9dfa:	|  |  \----> movea.l 16(sp),a0
    9dfe:	|  |         movea.l (a0),a0
    9e00:	|  |         move.l 24(a0),d0
    9e04:	|  \-------- bne.w 9d3c <shufflePeople+0x1a>
    9e08:	|        /-- bra.s 9e0c <shufflePeople+0xea>
	if (!allPeople) return;
    9e0a:	\--------|-> nop
		}
	}
}
    9e0c:	         \-> lea 20(sp),sp
    9e10:	             rts

00009e12 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    9e12:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    9e14:	       tst.l 8(sp)
    9e18:	   /-- bgt.s 9e1e <setCharacterWalkSpeed+0xc>
    9e1a:	   |   clr.w d0
    9e1c:	/--|-- bra.s 9e3c <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    9e1e:	|  \-> move.l 12(sp),-(sp)
    9e22:	|      jsr 887a <findPerson>
    9e28:	|      addq.l #4,sp
    9e2a:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    9e2c:	|  /-- bne.s 9e32 <setCharacterWalkSpeed+0x20>
    9e2e:	|  |   clr.w d0
    9e30:	+--|-- bra.s 9e3c <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    9e32:	|  \-> movea.l (sp),a0
    9e34:	|      move.l 8(sp),16(a0)
	return TRUE;
    9e3a:	|      moveq #1,d0
}
    9e3c:	\----> addq.l #4,sp
    9e3e:	       rts

00009e40 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    9e40:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    9e42:	       move.l 8(sp),-(sp)
    9e46:	       jsr 887a <findPerson>
    9e4c:	       addq.l #4,sp
    9e4e:	       move.l d0,(sp)
    if (thisPerson) {
    9e50:	/----- beq.s 9e70 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    9e52:	|      movea.l (sp),a0
    9e54:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    9e5a:	|      moveq #2,d0
    9e5c:	|      and.l 12(sp),d0
    9e60:	|  /-- beq.s 9e6c <setPersonExtra+0x2c>
    9e62:	|  |   movea.l (sp),a0
    9e64:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    9e6c:	|  \-> moveq #1,d0
    9e6e:	|  /-- bra.s 9e72 <setPersonExtra+0x32>
    }
    return FALSE;
    9e70:	\--|-> clr.w d0
}
    9e72:	   \-> addq.l #4,sp
    9e74:	       rts

00009e76 <setScale>:


void setScale (short int h, short int d) {
    9e76:	subq.l #4,sp
    9e78:	move.l 8(sp),d1
    9e7c:	move.l 12(sp),d0
    9e80:	move.w d1,d1
    9e82:	move.w d1,2(sp)
    9e86:	move.w d0,d0
    9e88:	move.w d0,(sp)
	scaleHorizon = h;
    9e8a:	move.w 2(sp),194ec <scaleHorizon>
	scaleDivide = d;
    9e92:	move.w (sp),194ee <scaleDivide>
}
    9e98:	nop
    9e9a:	addq.l #4,sp
    9e9c:	rts

00009e9e <setShown>:

void setShown (BOOL h, int ob) {
    9e9e:	    subq.l #8,sp
    9ea0:	    move.l 12(sp),d0
    9ea4:	    move.w d0,d0
    9ea6:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    9eaa:	    move.l 16(sp),-(sp)
    9eae:	    jsr 887a <findPerson>
    9eb4:	    addq.l #4,sp
    9eb6:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    9eba:	/-- beq.s 9ec6 <setShown+0x28>
    9ebc:	|   movea.l 4(sp),a0
    9ec0:	|   move.w 2(sp),92(a0)
}
    9ec6:	\-> nop
    9ec8:	    addq.l #8,sp
    9eca:	    rts

00009ecc <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    9ecc:	       subq.l #8,sp
    9ece:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    9ed0:	       movea.l 16(sp),a0
    9ed4:	       move.l 80(a0),d0
    9ed8:	       move.l d0,d1
    9eda:	       addi.l #360,d1
    9ee0:	       movea.l 16(sp),a0
    9ee4:	       move.l 84(a0),d0
    9ee8:	       move.l d1,d2
    9eea:	       sub.l d0,d2
    9eec:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    9ef0:	       movea.l 16(sp),a0
    9ef4:	       move.l 110(a0),d0
    9ef8:	   /-- beq.s 9f04 <spinStep+0x38>
    9efa:	   |   movea.l 16(sp),a0
    9efe:	   |   move.l 110(a0),d0
    9f02:	/--|-- bra.s 9f1e <spinStep+0x52>
    9f04:	|  \-> movea.l 16(sp),a0
    9f08:	|      movea.l 68(a0),a0
    9f0c:	|      move.l 4(a0),d0
    9f10:	|      move.l d0,-(sp)
    9f12:	|      pea 168 <decodeFilename+0x50>
    9f16:	|      jsr 150da <__divsi3>
    9f1c:	|      addq.l #8,sp
    9f1e:	\----> move.l d0,4(sp)
	while (diff > 180) {
    9f22:	   /-- bra.s 9f2c <spinStep+0x60>
		diff -= 360;
    9f24:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    9f2c:	|  \-> cmpi.l #180,8(sp)
    9f34:	\----- bgt.s 9f24 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    9f36:	       move.l 8(sp),d0
    9f3a:	       cmp.l 4(sp),d0
    9f3e:	   /-- blt.s 9f5c <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    9f40:	   |   movea.l 16(sp),a0
    9f44:	   |   move.l 80(a0),d0
    9f48:	   |   sub.l 4(sp),d0
    9f4c:	   |   move.l d0,-(sp)
    9f4e:	   |   move.l 20(sp),-(sp)
    9f52:	   |   jsr a03c <turnMeAngle>
    9f58:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    9f5a:	/--|-- bra.s 9fa2 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    9f5c:	|  \-> move.l 4(sp),d0
    9f60:	|      neg.l d0
    9f62:	|      cmp.l 8(sp),d0
    9f66:	|  /-- blt.s 9f84 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    9f68:	|  |   movea.l 16(sp),a0
    9f6c:	|  |   move.l 80(a0),d0
    9f70:	|  |   add.l 4(sp),d0
    9f74:	|  |   move.l d0,-(sp)
    9f76:	|  |   move.l 20(sp),-(sp)
    9f7a:	|  |   jsr a03c <turnMeAngle>
    9f80:	|  |   addq.l #8,sp
}
    9f82:	+--|-- bra.s 9fa2 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    9f84:	|  \-> movea.l 16(sp),a0
    9f88:	|      move.l 84(a0),d0
    9f8c:	|      move.l d0,-(sp)
    9f8e:	|      move.l 20(sp),-(sp)
    9f92:	|      jsr a03c <turnMeAngle>
    9f98:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    9f9a:	|      movea.l 16(sp),a0
    9f9e:	|      clr.w 54(a0)
}
    9fa2:	\----> nop
    9fa4:	       move.l (sp)+,d2
    9fa6:	       addq.l #8,sp
    9fa8:	       rts

00009faa <stopPerson>:


BOOL stopPerson (int o) {
    9faa:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    9fac:	       move.l 8(sp),-(sp)
    9fb0:	       jsr 887a <findPerson>
    9fb6:	       addq.l #4,sp
    9fb8:	       move.l d0,(sp)
    if (moveMe)
    9fba:	/----- beq.s 9ff8 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    9fbc:	|      movea.l (sp),a0
    9fbe:	|      move.l 56(a0),d0
    9fc2:	+----- beq.s 9ff8 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    9fc4:	|      movea.l (sp),a0
    9fc6:	|      move.l 56(a0),d0
    9fca:	|      move.l d0,-(sp)
    9fcc:	|      jsr 2d94 <abortFunction>
    9fd2:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    9fd4:	|      movea.l (sp),a0
    9fd6:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    9fda:	|      movea.l (sp),a0
    9fdc:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    9fe0:	|      movea.l (sp),a0
    9fe2:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    9fe6:	|      clr.l -(sp)
    9fe8:	|      move.l 4(sp),-(sp)
    9fec:	|      jsr 652a <setFrames>
    9ff2:	|      addq.l #8,sp
            return TRUE;
    9ff4:	|      moveq #1,d0
    9ff6:	|  /-- bra.s 9ffa <stopPerson+0x50>
        }
    return FALSE;
    9ff8:	\--|-> clr.w d0
}
    9ffa:	   \-> addq.l #4,sp
    9ffc:	       rts

00009ffe <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    9ffe:	       subq.l #8,sp
	int total = 0;
    a000:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    a004:	       clr.l (sp)
    a006:	   /-- bra.s a028 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    a008:	/--|-> movea.l 12(sp),a0
    a00c:	|  |   movea.l 4(a0),a0
    a010:	|  |   move.l (sp),d1
    a012:	|  |   move.l d1,d0
    a014:	|  |   add.l d0,d0
    a016:	|  |   add.l d1,d0
    a018:	|  |   add.l d0,d0
    a01a:	|  |   add.l d0,d0
    a01c:	|  |   adda.l d0,a0
    a01e:	|  |   move.l 4(a0),d0
    a022:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    a026:	|  |   addq.l #1,(sp)
    a028:	|  \-> movea.l 12(sp),a0
    a02c:	|      move.l 8(a0),d0
    a030:	|      cmp.l (sp),d0
    a032:	\----- bgt.s a008 <timeForAnim+0xa>
	}
	return total;
    a034:	       move.l 4(sp),d0
}
    a038:	       addq.l #8,sp
    a03a:	       rts

0000a03c <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    a03c:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    a03e:	       movea.l 8(sp),a0
    a042:	       movea.l 68(a0),a0
    a046:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    a04a:	       movea.l 8(sp),a0
    a04e:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    a054:	       move.l (sp),-(sp)
    a056:	       pea b4 <_start+0xb4>
    a05a:	       jsr 150da <__divsi3>
    a060:	       addq.l #8,sp
    a062:	       move.l d0,d1
    a064:	       addi.l #180,d1
    a06a:	       movea.l 8(sp),a0
    a06e:	       move.l 88(a0),d0
    a072:	       add.l d1,d0
    a074:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    a078:	   /-- bra.s a082 <turnMeAngle+0x46>
    a07a:	/--|-> addi.l #-360,12(sp)
    a082:	|  \-> cmpi.l #359,12(sp)
    a08a:	\----- bgt.s a07a <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    a08c:	       move.l (sp),-(sp)
    a08e:	       move.l 16(sp),-(sp)
    a092:	       jsr 1505c <__mulsi3>
    a098:	       addq.l #8,sp
    a09a:	       pea 168 <decodeFilename+0x50>
    a09e:	       move.l d0,-(sp)
    a0a0:	       jsr 150da <__divsi3>
    a0a6:	       addq.l #8,sp
    a0a8:	       movea.l 8(sp),a0
    a0ac:	       move.l d0,94(a0)
}
    a0b0:	       nop
    a0b2:	       addq.l #4,sp
    a0b4:	       rts

0000a0b6 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    a0b6:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    a0b8:	          move.l 8(sp),-(sp)
    a0bc:	          jsr 887a <findPerson>
    a0c2:	          addq.l #4,sp
    a0c4:	          move.l d0,(sp)
    if (thisPerson) {
    a0c6:	/-------- beq.s a126 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    a0c8:	|         movea.l (sp),a0
    a0ca:	|         move.l 56(a0),d0
    a0ce:	|     /-- beq.s a0e0 <turnPersonToFace+0x2a>
    a0d0:	|     |   movea.l (sp),a0
    a0d2:	|     |   move.l 56(a0),d0
    a0d6:	|     |   move.l d0,-(sp)
    a0d8:	|     |   jsr 2d94 <abortFunction>
    a0de:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    a0e0:	|     \-> movea.l (sp),a0
    a0e2:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    a0e6:	|         movea.l (sp),a0
    a0e8:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    a0ec:	|         movea.l (sp),a0
    a0ee:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    a0f2:	|         move.l 12(sp),-(sp)
    a0f6:	|         move.l 4(sp),-(sp)
    a0fa:	|         jsr a03c <turnMeAngle>
    a100:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    a102:	|         movea.l 19bac <speech>,a0
    a108:	|         move.l (a0),d0
    a10a:	|         cmp.l (sp),d0
    a10c:	|  /----- bne.s a112 <turnPersonToFace+0x5c>
    a10e:	|  |      moveq #2,d0
    a110:	|  |  /-- bra.s a114 <turnPersonToFace+0x5e>
    a112:	|  \--|-> moveq #0,d0
    a114:	|     \-> move.l d0,-(sp)
    a116:	|         move.l 4(sp),-(sp)
    a11a:	|         jsr 652a <setFrames>
    a120:	|         addq.l #8,sp
        return TRUE;
    a122:	|         moveq #1,d0
    a124:	|     /-- bra.s a128 <turnPersonToFace+0x72>
    }
    return FALSE;
    a126:	\-----|-> clr.w d0
}
    a128:	      \-> addq.l #4,sp
    a12a:	          rts

0000a12c <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    a12c:	                lea -20(sp),sp
    a130:	                move.l d3,-(sp)
    a132:	                move.l d2,-(sp)
    a134:	                move.l 36(sp),d0
    a138:	                move.w d0,d0
    a13a:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    a13e:	                cmpi.w #-1,10(sp)
    a144:	/-------------- bne.s a14c <walkMe+0x20>
    a146:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    a14c:	>-------------> movea.l 32(sp),a0
    a150:	|               move.l 36(a0),d0
    a154:	|               move.l d0,-(sp)
    a156:	|               jsr 14ada <__floatsisf>
    a15c:	|               addq.l #4,sp
    a15e:	|               move.l d0,d1
    a160:	|               movea.l 32(sp),a0
    a164:	|               move.l (a0),d0
    a166:	|               move.l d0,-(sp)
    a168:	|               move.l d1,-(sp)
    a16a:	|               jsr 14dce <__subsf3>
    a170:	|               addq.l #8,sp
    a172:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    a176:	|               movea.l 32(sp),a0
    a17a:	|               move.l 40(a0),d0
    a17e:	|               move.l d0,-(sp)
    a180:	|               jsr 14ada <__floatsisf>
    a186:	|               addq.l #4,sp
    a188:	|               move.l d0,d1
    a18a:	|               movea.l 32(sp),a0
    a18e:	|               move.l 4(a0),d0
    a192:	|               move.l d0,-(sp)
    a194:	|               move.l d1,-(sp)
    a196:	|               jsr 14dce <__subsf3>
    a19c:	|               addq.l #8,sp
    a19e:	|               move.l d0,-(sp)
    a1a0:	|               move.l d0,-(sp)
    a1a2:	|               jsr 1488c <__addsf3>
    a1a8:	|               addq.l #8,sp
    a1aa:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    a1ae:	|               movea.l 32(sp),a0
    a1b2:	|               move.l 20(a0),d2
    a1b6:	|               movea.l 32(sp),a0
    a1ba:	|               move.l 16(a0),d0
    a1be:	|               move.l d0,-(sp)
    a1c0:	|               jsr 14ada <__floatsisf>
    a1c6:	|               addq.l #4,sp
    a1c8:	|               move.l d0,-(sp)
    a1ca:	|               move.l d2,-(sp)
    a1cc:	|               jsr 14b8c <__mulsf3>
    a1d2:	|               addq.l #8,sp
    a1d4:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    a1d8:	|               move.l 24(sp),-(sp)
    a1dc:	|               jsr 149f2 <__extendsfdf2>
    a1e2:	|               addq.l #4,sp
    a1e4:	|               move.l #-1717986918,-(sp)
    a1ea:	|               move.l #1070176665,-(sp)
    a1f0:	|               move.l d1,-(sp)
    a1f2:	|               move.l d0,-(sp)
    a1f4:	|               jsr 14cb2 <__ltdf2>
    a1fa:	|               lea 16(sp),sp
    a1fe:	|               tst.l d0
    a200:	|           /-- bge.s a20a <walkMe+0xde>
    a202:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    a20a:	|           \-> move.l 20(sp),-(sp)
    a20e:	|               jsr 14a72 <__fixsfsi>
    a214:	|               addq.l #4,sp
    a216:	|               move.l d0,-(sp)
    a218:	|               jsr 7504 <TF_abs>
    a21e:	|               addq.l #4,sp
    a220:	|               move.l d0,d2
    a222:	|               move.l 16(sp),-(sp)
    a226:	|               jsr 14a72 <__fixsfsi>
    a22c:	|               addq.l #4,sp
    a22e:	|               move.l d0,-(sp)
    a230:	|               jsr 7504 <TF_abs>
    a236:	|               addq.l #4,sp
    a238:	|               cmp.l d2,d0
    a23a:	|        /----- bgt.s a25e <walkMe+0x132>
    a23c:	|        |      move.l 20(sp),-(sp)
    a240:	|        |      jsr 14a72 <__fixsfsi>
    a246:	|        |      addq.l #4,sp
    a248:	|        |      move.l d0,-(sp)
    a24a:	|        |      jsr 7504 <TF_abs>
    a250:	|        |      addq.l #4,sp
    a252:	|        |      move.l d0,-(sp)
    a254:	|        |      jsr 14ada <__floatsisf>
    a25a:	|        |      addq.l #4,sp
    a25c:	|        |  /-- bra.s a27e <walkMe+0x152>
    a25e:	|        \--|-> move.l 16(sp),-(sp)
    a262:	|           |   jsr 14a72 <__fixsfsi>
    a268:	|           |   addq.l #4,sp
    a26a:	|           |   move.l d0,-(sp)
    a26c:	|           |   jsr 7504 <TF_abs>
    a272:	|           |   addq.l #4,sp
    a274:	|           |   move.l d0,-(sp)
    a276:	|           |   jsr 14ada <__floatsisf>
    a27c:	|           |   addq.l #4,sp
    a27e:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    a282:	|               move.l 12(sp),-(sp)
    a286:	|               jsr 14a72 <__fixsfsi>
    a28c:	|               addq.l #4,sp
    a28e:	|               move.l d0,-(sp)
    a290:	|               jsr 7504 <TF_abs>
    a296:	|               addq.l #4,sp
    a298:	|               move.l d0,-(sp)
    a29a:	|               jsr 14ada <__floatsisf>
    a2a0:	|               addq.l #4,sp
    a2a2:	|               move.l d0,-(sp)
    a2a4:	|               move.l 28(sp),-(sp)
    a2a8:	|               jsr 14d00 <__ltsf2>
    a2ae:	|               addq.l #8,sp
    a2b0:	|               tst.l d0
    a2b2:	|        /----- bge.w a364 <walkMe+0x238>
			if (thisPerson->spinning) {
    a2b6:	|        |      movea.l 32(sp),a0
    a2ba:	|        |      move.w 54(a0),d0
    a2be:	|        |  /-- beq.s a2dc <walkMe+0x1b0>
				spinStep(thisPerson);
    a2c0:	|        |  |   move.l 32(sp),-(sp)
    a2c4:	|        |  |   jsr 9ecc <spinStep>
    a2ca:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    a2cc:	|        |  |   pea 1 <_start+0x1>
    a2d0:	|        |  |   move.l 36(sp),-(sp)
    a2d4:	|        |  |   jsr 652a <setFrames>
    a2da:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    a2dc:	|        |  \-> move.l 24(sp),-(sp)
    a2e0:	|        |      move.l 16(sp),-(sp)
    a2e4:	|        |      jsr 14986 <__divsf3>
    a2ea:	|        |      addq.l #8,sp
    a2ec:	|        |      move.l d0,24(sp)
			if (move)
    a2f0:	|        |      tst.w 10(sp)
    a2f4:	|        |  /-- beq.s a35e <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    a2f6:	|        |  |   movea.l 32(sp),a0
    a2fa:	|        |  |   move.l 4(a0),d2
    a2fe:	|        |  |   move.l 24(sp),d0
    a302:	|        |  |   move.l d0,-(sp)
    a304:	|        |  |   move.l d0,-(sp)
    a306:	|        |  |   jsr 1488c <__addsf3>
    a30c:	|        |  |   addq.l #8,sp
    a30e:	|        |  |   move.l d0,-(sp)
    a310:	|        |  |   move.l 20(sp),-(sp)
    a314:	|        |  |   jsr 14986 <__divsf3>
    a31a:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    a31c:	|        |  |   move.l d0,-(sp)
    a31e:	|        |  |   move.l d2,-(sp)
    a320:	|        |  |   jsr 1488c <__addsf3>
    a326:	|        |  |   addq.l #8,sp
    a328:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    a32a:	|        |  |   movea.l 32(sp),a0
    a32e:	|        |  |   move.l (a0),d3
    a330:	|        |  |   move.l 24(sp),-(sp)
    a334:	|        |  |   move.l 24(sp),-(sp)
    a338:	|        |  |   jsr 14986 <__divsf3>
    a33e:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    a340:	|        |  |   move.l d0,-(sp)
    a342:	|        |  |   move.l d3,-(sp)
    a344:	|        |  |   jsr 1488c <__addsf3>
    a34a:	|        |  |   addq.l #8,sp
    a34c:	|        |  |   move.l d2,-(sp)
    a34e:	|        |  |   move.l d0,-(sp)
    a350:	|        |  |   move.l 40(sp),-(sp)
    a354:	|        |  |   jsr 8fc2 <moveAndScale>
    a35a:	|        |  |   lea 12(sp),sp
			return TRUE;
    a35e:	|        |  \-> moveq #1,d0
    a360:	|  /-----|----- bra.w a412 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    a364:	|  |     \----> movea.l 32(sp),a0
    a368:	|  |            move.l 44(a0),d0
    a36c:	|  |            moveq #-1,d1
    a36e:	|  |            cmp.l d0,d1
    a370:	|  |        /-- bne.s a3a8 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    a372:	|  |        |   movea.l 32(sp),a0
    a376:	|  |        |   move.l 98(a0),d0
    a37a:	|  |        |   moveq #-1,d1
    a37c:	|  |        |   cmp.l d0,d1
    a37e:	|  |  /-----|-- beq.s a3bc <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    a380:	|  |  |     |   movea.l 32(sp),a0
    a384:	|  |  |     |   move.l 98(a0),d0
    a388:	|  |  |     |   movea.l 32(sp),a0
    a38c:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    a390:	|  |  |     |   movea.l 32(sp),a0
    a394:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    a39a:	|  |  |     |   move.l 32(sp),-(sp)
    a39e:	|  |  |     |   jsr 9ecc <spinStep>
    a3a4:	|  |  |     |   addq.l #4,sp
			}
			break;
    a3a6:	|  |  +-----|-- bra.s a3bc <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    a3a8:	|  |  |     \-> move.l 32(sp),-(sp)
    a3ac:	|  |  |         jsr 7c6c <doBorderStuff>
    a3b2:	|  |  |         addq.l #4,sp
    a3b4:	|  |  |         tst.w d0
    a3b6:	|  |  |  /----- beq.s a3c0 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    a3b8:	\--|--|--|----- bra.w a14c <walkMe+0x20>
			break;
    a3bc:	   |  \--|----> nop
    a3be:	   |     |  /-- bra.s a3c2 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    a3c0:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    a3c2:	   |        \-> movea.l 32(sp),a0
    a3c6:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    a3ca:	   |            clr.l -(sp)
    a3cc:	   |            move.l 36(sp),-(sp)
    a3d0:	   |            jsr 652a <setFrames>
    a3d6:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    a3d8:	   |            movea.l 32(sp),a0
    a3dc:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    a3e0:	   |            move.l d0,-(sp)
    a3e2:	   |            jsr 14ada <__floatsisf>
    a3e8:	   |            addq.l #4,sp
    a3ea:	   |            move.l d0,d2
				 thisPerson->walkToX,
    a3ec:	   |            movea.l 32(sp),a0
    a3f0:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    a3f4:	   |            move.l d0,-(sp)
    a3f6:	   |            jsr 14ada <__floatsisf>
    a3fc:	   |            addq.l #4,sp
    a3fe:	   |            move.l d2,-(sp)
    a400:	   |            move.l d0,-(sp)
    a402:	   |            move.l 40(sp),-(sp)
    a406:	   |            jsr 8fc2 <moveAndScale>
    a40c:	   |            lea 12(sp),sp
	return FALSE;
    a410:	   |            clr.w d0
}
    a412:	   \----------> move.l (sp)+,d2
    a414:	                move.l (sp)+,d3
    a416:	                lea 20(sp),sp
    a41a:	                rts

0000a41c <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    a41c:	             lea -20(sp),sp
    a420:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    a422:	             move.l 19c30 <allLoadedBanks>,20(sp)
	while (returnMe) {
    a42a:	      /----- bra.s a45c <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
    a42c:	   /--|----> movea.l 20(sp),a0
    a430:	   |  |      move.l (a0),d0
    a432:	   |  |      cmp.l 28(sp),d0
    a436:	   |  |  /-- bne.s a452 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
    a438:	   |  |  |   movea.l 20(sp),a0
    a43c:	   |  |  |   move.l 4(a0),d0
    a440:	   |  |  |   addq.l #1,d0
    a442:	   |  |  |   movea.l 20(sp),a0
    a446:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
    a44a:	   |  |  |   move.l 20(sp),d0
    a44e:	/--|--|--|-- bra.w a512 <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
    a452:	|  |  |  \-> movea.l 20(sp),a0
    a456:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    a45c:	|  |  \----> tst.l 20(sp)
    a460:	|  \-------- bne.s a42c <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    a462:	|            moveq #26,d0
    a464:	|            move.l d0,16(sp)
    a468:	|            clr.l 12(sp)
    a46c:	|            move.l 19b50 <SysBase>,d0
    a472:	|            movea.l d0,a6
    a474:	|            move.l 16(sp),d0
    a478:	|            move.l 12(sp),d1
    a47c:	|            jsr -684(a6)
    a480:	|            move.l d0,8(sp)
    a484:	|            move.l 8(sp),d0
    a488:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    a48c:	|     /----- beq.w a510 <loadBankForAnim+0xf4>
		returnMe->ID = ID;
    a490:	|     |      movea.l 20(sp),a0
    a494:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &(returnMe->bank), FALSE)) {
    a498:	|     |      move.l 20(sp),d0
    a49c:	|     |      addq.l #8,d0
    a49e:	|     |      clr.l -(sp)
    a4a0:	|     |      move.l d0,-(sp)
    a4a2:	|     |      move.l 36(sp),-(sp)
    a4a6:	|     |      jsr 7152 <loadSpriteBank>
    a4ac:	|     |      lea 12(sp),sp
    a4b0:	|     |      tst.w d0
    a4b2:	|     |  /-- beq.s a4e8 <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
    a4b4:	|     |  |   movea.l 20(sp),a0
    a4b8:	|     |  |   moveq #1,d0
    a4ba:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
    a4be:	|     |  |   move.l 19c30 <allLoadedBanks>,d0
    a4c4:	|     |  |   movea.l 20(sp),a0
    a4c8:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    a4cc:	|     |  |   move.l 20(sp),19c30 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    a4d4:	|     |  |   pea 16482 <PutChar+0x1310>
    a4da:	|     |  |   jsr 14822 <KPrintF>
    a4e0:	|     |  |   addq.l #4,sp
			return returnMe;
    a4e2:	|     |  |   move.l 20(sp),d0
    a4e6:	+-----|--|-- bra.s a512 <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    a4e8:	|     |  \-> pea 164af <PutChar+0x133d>
    a4ee:	|     |      jsr 14822 <KPrintF>
    a4f4:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    a4f6:	|     |      move.l 20(sp),4(sp)
    a4fc:	|     |      move.l 19b50 <SysBase>,d0
    a502:	|     |      movea.l d0,a6
    a504:	|     |      movea.l 4(sp),a1
    a508:	|     |      jsr -690(a6)
			return NULL;
    a50c:	|     |      moveq #0,d0
    a50e:	+-----|----- bra.s a512 <loadBankForAnim+0xf6>
		}
	} else return NULL;
    a510:	|     \----> moveq #0,d0
}
    a512:	\----------> movea.l (sp)+,a6
    a514:	             lea 20(sp),sp
    a518:	             rts

0000a51a <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    a51a:	       subq.l #8,sp
    a51c:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    a51e:	   /-- bra.s a54e <clearStackLib+0x34>
		k = stackLib;
    a520:	/--|-> move.l 19c38 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    a528:	|  |   movea.l 19c38 <stackLib>,a0
    a52e:	|  |   move.l 4(a0),d0
    a532:	|  |   move.l d0,19c38 <stackLib>
		FreeVec(k);
    a538:	|  |   move.l 8(sp),4(sp)
    a53e:	|  |   move.l 19b50 <SysBase>,d0
    a544:	|  |   movea.l d0,a6
    a546:	|  |   movea.l 4(sp),a1
    a54a:	|  |   jsr -690(a6)
	while (stackLib) {
    a54e:	|  \-> move.l 19c38 <stackLib>,d0
    a554:	\----- bne.s a520 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    a556:	       clr.l 19c34 <stackLibTotal>
}
    a55c:	       nop
    a55e:	       movea.l (sp)+,a6
    a560:	       addq.l #8,sp
    a562:	       rts

0000a564 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    a564:	          lea -128(sp),sp
    a568:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    a56c:	      /-- bra.s a57e <loadGame+0x1a>
    a56e:	   /--|-> move.l 19ae8 <allRunningFunctions>,d0
    a574:	   |  |   move.l d0,-(sp)
    a576:	   |  |   jsr 3dae <finishFunction>
    a57c:	   |  |   addq.l #4,sp
    a57e:	   |  \-> move.l 19ae8 <allRunningFunctions>,d0
    a584:	   \----- bne.s a56e <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    a586:	          pea 19c3c <ssgVersion>
    a58c:	          pea 1650d <PutChar+0x139b>
    a592:	          pea 41 <_start+0x41>
    a596:	          pea 53 <_start+0x53>
    a59a:	          move.l 160(sp),-(sp)
    a59e:	          jsr 48d6 <openAndVerify>
    a5a4:	          lea 20(sp),sp
    a5a8:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    a5ac:	      /-- bne.s a5b4 <loadGame+0x50>
    a5ae:	      |   clr.w d0
    a5b0:	/-----|-- bra.w a85a <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    a5b4:	|     \-> move.l 112(sp),108(sp)
    a5ba:	|         lea 140(sp),a0
    a5be:	|         lea -126(a0),a0
    a5c2:	|         move.l a0,120(sp)
    a5c6:	|         moveq #8,d0
    a5c8:	|         move.l d0,116(sp)
    a5cc:	|         move.l 19b58 <DOSBase>,d0
    a5d2:	|         movea.l d0,a6
    a5d4:	|         move.l 108(sp),d1
    a5d8:	|         move.l 120(sp),d2
    a5dc:	|         move.l 116(sp),d3
    a5e0:	|         jsr -42(a6)
    a5e4:	|         move.l d0,132(sp)
    a5e8:	|         move.l 132(sp),d0
    a5ec:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    a5f0:	|         moveq #8,d0
    a5f2:	|         cmp.l 128(sp),d0
    a5f6:	|     /-- beq.s a606 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    a5f8:	|     |   pea 1652e <PutChar+0x13bc>
    a5fe:	|     |   jsr 14822 <KPrintF>
    a604:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    a606:	|     \-> move.l 14(sp),d1
    a60a:	|         move.l 19af2 <fileTime>,d0
    a610:	|         cmp.l d1,d0
    a612:	|     /-- bne.s a622 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    a614:	|     |   move.l 18(sp),d1
    a618:	|     |   move.l 19af6 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    a61e:	|     |   cmp.l d1,d0
    a620:	|  /--|-- beq.s a642 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    a622:	|  |  \-> move.l 144(sp),-(sp)
    a626:	|  |      pea 1654a <PutChar+0x13d8>
    a62c:	|  |      pea 16611 <PutChar+0x149f>
    a632:	|  |      jsr 14822 <KPrintF>
    a638:	|  |      lea 12(sp),sp
		return FALSE; 
    a63c:	|  |      clr.w d0
    a63e:	+--|----- bra.w a85a <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    a642:	|  \----> move.l 112(sp),124(sp)
    a648:	|         move.l 19b58 <DOSBase>,d0
    a64e:	|         movea.l d0,a6
    a650:	|         move.l 124(sp),d1
    a654:	|         jsr -306(a6)
    a658:	|         move.l d0,136(sp)
    a65c:	|         move.l 136(sp),d0
    a660:	|         move.l d0,d0
    a662:	|         move.w d0,193b6 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    a668:	|         move.l 112(sp),100(sp)
    a66e:	|         move.l 19b58 <DOSBase>,d0
    a674:	|         movea.l d0,a6
    a676:	|         move.l 100(sp),d1
    a67a:	|         jsr -306(a6)
    a67e:	|         move.l d0,96(sp)
    a682:	|         move.l 96(sp),d0
    a686:	|         move.l d0,d0
    a688:	|         move.w d0,19af0 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    a68e:	|         move.l 112(sp),92(sp)
    a694:	|         move.l 19b58 <DOSBase>,d0
    a69a:	|         movea.l d0,a6
    a69c:	|         move.l 92(sp),d1
    a6a0:	|         jsr -306(a6)
    a6a4:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    a6a8:	|         move.l 112(sp),84(sp)
    a6ae:	|         move.l 19b58 <DOSBase>,d0
    a6b4:	|         movea.l d0,a6
    a6b6:	|         move.l 84(sp),d1
    a6ba:	|         jsr -306(a6)
    a6be:	|         move.l d0,80(sp)
    a6c2:	|         move.l 80(sp),d0
    a6c6:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    a6ca:	|     /-- beq.s a6fe <loadGame+0x19a>
		fontNum = get2bytes (fp);
    a6cc:	|     |   move.l 112(sp),-(sp)
    a6d0:	|     |   jsr 6bc <get2bytes>
    a6d6:	|     |   addq.l #4,sp
    a6d8:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    a6dc:	|     |   move.l 112(sp),-(sp)
    a6e0:	|     |   jsr 6bc <get2bytes>
    a6e6:	|     |   addq.l #4,sp
    a6e8:	|     |   move.l d0,19c98 <fontHeight>
		charOrder = readString(fp);		
    a6ee:	|     |   move.l 112(sp),-(sp)
    a6f2:	|     |   jsr b02 <readString>
    a6f8:	|     |   addq.l #4,sp
    a6fa:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    a6fe:	|     \-> move.l 104(sp),70(sp)
    a704:	|         move.l 19b50 <SysBase>,d0
    a70a:	|         movea.l d0,a6
    a70c:	|         movea.l 70(sp),a1
    a710:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    a714:	|         move.l 112(sp),-(sp)
    a718:	|         jsr 854 <getSigned>
    a71e:	|         addq.l #4,sp
    a720:	|         move.w d0,19a5e <fontSpace>

	killAllPeople ();
    a726:	|         jsr 8c64 <killAllPeople>
	killAllRegions ();
    a72c:	|         jsr 132d2 <killAllRegions>

	int camerX = get2bytes (fp);
    a732:	|         move.l 112(sp),-(sp)
    a736:	|         jsr 6bc <get2bytes>
    a73c:	|         addq.l #4,sp
    a73e:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    a742:	|         move.l 112(sp),-(sp)
    a746:	|         jsr 6bc <get2bytes>
    a74c:	|         addq.l #4,sp
    a74e:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    a752:	|         move.l 112(sp),-(sp)
    a756:	|         jsr 7d8 <getFloat>
    a75c:	|         addq.l #4,sp
    a75e:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    a762:	|         move.l 112(sp),54(sp)
    a768:	|         move.l 19b58 <DOSBase>,d0
    a76e:	|         movea.l d0,a6
    a770:	|         move.l 54(sp),d1
    a774:	|         jsr -306(a6)
    a778:	|         move.l d0,50(sp)
    a77c:	|         move.l 50(sp),d0
    a780:	|         move.l d0,d0
    a782:	|         move.b d0,194d0 <brightnessLevel>

	loadHandlers (fp);
    a788:	|         move.l 112(sp),-(sp)
    a78c:	|         jsr 4836 <loadHandlers>
    a792:	|         addq.l #4,sp
	loadRegions (fp);
    a794:	|         move.l 112(sp),-(sp)
    a798:	|         jsr 1332e <loadRegions>
    a79e:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    a7a0:	|         moveq #12,d0
    a7a2:	|         move.l d0,46(sp)
    a7a6:	|         clr.l 42(sp)
    a7aa:	|         move.l 19b50 <SysBase>,d0
    a7b0:	|         movea.l d0,a6
    a7b2:	|         move.l 46(sp),d0
    a7b6:	|         move.l 42(sp),d1
    a7ba:	|         jsr -684(a6)
    a7be:	|         move.l d0,38(sp)
    a7c2:	|         move.l 38(sp),d0
    a7c6:	|         move.l d0,19a60 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    a7cc:	|         move.l 19a60 <mouseCursorAnim>,d0
    a7d2:	|     /-- bne.s a7e6 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    a7d4:	|     |   pea 1661b <PutChar+0x14a9>
    a7da:	|     |   jsr 14822 <KPrintF>
    a7e0:	|     |   addq.l #4,sp
		return FALSE;
    a7e2:	|     |   clr.w d0
    a7e4:	+-----|-- bra.s a85a <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    a7e6:	|     \-> jsr b4b6 <nosnapshot>
	if (FGetC (fp)) {
    a7ec:	|         move.l 112(sp),34(sp)
    a7f2:	|         move.l 19b58 <DOSBase>,d0
    a7f8:	|         movea.l d0,a6
    a7fa:	|         move.l 34(sp),d1
    a7fe:	|         jsr -306(a6)
    a802:	|         move.l d0,30(sp)
    a806:	|         move.l 30(sp),d0
    a80a:	|     /-- beq.s a820 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    a80c:	|     |   move.l 112(sp),-(sp)
    a810:	|     |   jsr b52a <restoreSnapshot>
    a816:	|     |   addq.l #4,sp
    a818:	|     |   tst.w d0
    a81a:	|     +-- bne.s a820 <loadGame+0x2bc>
    a81c:	|     |   clr.w d0
    a81e:	+-----|-- bra.s a85a <loadGame+0x2f6>
	}

	Close (fp);
    a820:	|     \-> move.l 112(sp),26(sp)
    a826:	|         move.l 19b58 <DOSBase>,d0
    a82c:	|         movea.l d0,a6
    a82e:	|         move.l 26(sp),d1
    a832:	|         jsr -36(a6)
    a836:	|         move.l d0,22(sp)
	clearStackLib ();
    a83a:	|         jsr a51a <clearStackLib>

	cameraX = camerX;
    a840:	|         move.l 66(sp),19c5e <cameraX>
	cameraY = camerY;
    a848:	|         move.l 62(sp),19c62 <cameraY>
	cameraZoom = camerZ;
    a850:	|         move.l 58(sp),194f8 <cameraZoom>

	return TRUE;
    a858:	|         moveq #1,d0
}
    a85a:	\-------> movem.l (sp)+,d2-d3/a6
    a85e:	          lea 128(sp),sp
    a862:	          rts

0000a864 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    a864:	   /-> lea -64(sp),sp
    a868:	   |   move.l a6,-(sp)
    a86a:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    a86c:	   |   movea.l 76(sp),a0
    a870:	   |   move.l (a0),d0
    a872:	   |   move.l 80(sp),-(sp)
    a876:	   |   move.l d0,-(sp)
    a878:	   |   jsr 8d0 <put2bytes>
    a87e:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    a880:	   |   movea.l 76(sp),a0
    a884:	   |   move.l 40(a0),d0
    a888:	/--|-- beq.s a8c4 <saveFunction+0x60>
		FPutC (fp, 1);
    a88a:	|  |   move.l 80(sp),52(sp)
    a890:	|  |   moveq #1,d0
    a892:	|  |   move.l d0,48(sp)
    a896:	|  |   move.l 19b58 <DOSBase>,d0
    a89c:	|  |   movea.l d0,a6
    a89e:	|  |   move.l 52(sp),d1
    a8a2:	|  |   move.l 48(sp),d2
    a8a6:	|  |   jsr -312(a6)
    a8aa:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    a8ae:	|  |   movea.l 76(sp),a0
    a8b2:	|  |   move.l 40(a0),d0
    a8b6:	|  |   move.l 80(sp),-(sp)
    a8ba:	|  |   move.l d0,-(sp)
    a8bc:	|  \-- jsr a864 <saveFunction>(pc)
    a8c0:	|      addq.l #8,sp
    a8c2:	|  /-- bra.s a8e6 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    a8c4:	\--|-> move.l 80(sp),64(sp)
    a8ca:	   |   clr.l 60(sp)
    a8ce:	   |   move.l 19b58 <DOSBase>,d0
    a8d4:	   |   movea.l d0,a6
    a8d6:	   |   move.l 64(sp),d1
    a8da:	   |   move.l 60(sp),d2
    a8de:	   |   jsr -312(a6)
    a8e2:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    a8e6:	   \-> movea.l 76(sp),a0
    a8ea:	       move.l 12(a0),d0
    a8ee:	       move.l 80(sp),-(sp)
    a8f2:	       move.l d0,-(sp)
    a8f4:	       jsr 958 <put4bytes>
    a8fa:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    a8fc:	       movea.l 76(sp),a0
    a900:	       move.l 36(a0),d0
    a904:	       move.l 80(sp),-(sp)
    a908:	       move.l d0,-(sp)
    a90a:	       jsr 8d0 <put2bytes>
    a910:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    a912:	       move.l 80(sp),40(sp)
    a918:	       movea.l 76(sp),a0
    a91c:	       move.w 54(a0),d0
    a920:	       movea.w d0,a0
    a922:	       move.l a0,36(sp)
    a926:	       move.l 19b58 <DOSBase>,d0
    a92c:	       movea.l d0,a6
    a92e:	       move.l 40(sp),d1
    a932:	       move.l 36(sp),d2
    a936:	       jsr -312(a6)
    a93a:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    a93e:	       move.l 80(sp),28(sp)
    a944:	       movea.l 76(sp),a0
    a948:	       move.w 48(a0),d0
    a94c:	       movea.w d0,a0
    a94e:	       move.l a0,24(sp)
    a952:	       move.l 19b58 <DOSBase>,d0
    a958:	       movea.l d0,a6
    a95a:	       move.l 28(sp),d1
    a95e:	       move.l 24(sp),d2
    a962:	       jsr -312(a6)
    a966:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    a96a:	       move.l 80(sp),16(sp)
    a970:	       movea.l 76(sp),a0
    a974:	       move.w 50(a0),d0
    a978:	       movea.w d0,a0
    a97a:	       move.l a0,12(sp)
    a97e:	       move.l 19b58 <DOSBase>,d0
    a984:	       movea.l d0,a6
    a986:	       move.l 16(sp),d1
    a98a:	       move.l 12(sp),d2
    a98e:	       jsr -312(a6)
    a992:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    a996:	       moveq #28,d0
    a998:	       add.l 76(sp),d0
    a99c:	       move.l 80(sp),-(sp)
    a9a0:	       move.l d0,-(sp)
    a9a2:	       jsr b120 <saveVariable>
    a9a8:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    a9aa:	       movea.l 76(sp),a0
    a9ae:	       move.b 56(a0),d0
    a9b2:	   /-- beq.s a9c2 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    a9b4:	   |   pea 1663c <PutChar+0x14ca>
    a9ba:	   |   jsr 14822 <KPrintF>
    a9c0:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    a9c2:	   \-> movea.l 76(sp),a0
    a9c6:	       move.l 24(a0),d0
    a9ca:	       move.l 80(sp),-(sp)
    a9ce:	       move.l d0,-(sp)
    a9d0:	       jsr af94 <saveStack>
    a9d6:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    a9d8:	       clr.l 68(sp)
    a9dc:	   /-- bra.s aa00 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    a9de:	/--|-> movea.l 76(sp),a0
    a9e2:	|  |   move.l 20(a0),d1
    a9e6:	|  |   move.l 68(sp),d0
    a9ea:	|  |   lsl.l #3,d0
    a9ec:	|  |   add.l d1,d0
    a9ee:	|  |   move.l 80(sp),-(sp)
    a9f2:	|  |   move.l d0,-(sp)
    a9f4:	|  |   jsr b120 <saveVariable>
    a9fa:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    a9fc:	|  |   addq.l #1,68(sp)
    aa00:	|  \-> movea.l 76(sp),a0
    aa04:	|      move.l 8(a0),d0
    aa08:	|      cmp.l 68(sp),d0
    aa0c:	\----- bgt.s a9de <saveFunction+0x17a>
	}
}
    aa0e:	       nop
    aa10:	       nop
    aa12:	       move.l (sp)+,d2
    aa14:	       movea.l (sp)+,a6
    aa16:	       lea 64(sp),sp
    aa1a:	       rts

0000aa1c <saveGame>:

BOOL saveGame (char * fname) {
    aa1c:	          lea -272(sp),sp
    aa20:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    aa24:	          move.l 288(sp),268(sp)
    aa2a:	          move.l #1006,264(sp)
    aa32:	          move.l 19b58 <DOSBase>,d0
    aa38:	          movea.l d0,a6
    aa3a:	          move.l 268(sp),d1
    aa3e:	          move.l 264(sp),d2
    aa42:	          jsr -30(a6)
    aa46:	          move.l d0,260(sp)
    aa4a:	          move.l 260(sp),d0
    aa4e:	          move.l d0,256(sp)
	if (fp == NULL) {
    aa52:	      /-- bne.s aa68 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    aa54:	      |   pea 1665e <PutChar+0x14ec>
    aa5a:	      |   jsr 14822 <KPrintF>
    aa60:	      |   addq.l #4,sp
		return FALSE;
    aa62:	      |   clr.w d0
    aa64:	/-----|-- bra.w af8a <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    aa68:	|     \-> move.l 256(sp),252(sp)
    aa6e:	|         move.l #91771,248(sp)
    aa76:	|         moveq #6,d0
    aa78:	|         move.l d0,244(sp)
    aa7c:	|         move.l 19b58 <DOSBase>,d0
    aa82:	|         movea.l d0,a6
    aa84:	|         move.l 252(sp),d1
    aa88:	|         move.l 248(sp),d2
    aa8c:	|         move.l 244(sp),d3
    aa90:	|         jsr -48(a6)
    aa94:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    aa98:	|         move.l 256(sp),236(sp)
    aa9e:	|         clr.l 232(sp)
    aaa2:	|         move.l 19b58 <DOSBase>,d0
    aaa8:	|         movea.l d0,a6
    aaaa:	|         move.l 236(sp),d1
    aaae:	|         move.l 232(sp),d2
    aab2:	|         jsr -312(a6)
    aab6:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    aaba:	|         move.l 256(sp),224(sp)
    aac0:	|         clr.l 220(sp)
    aac4:	|         move.l 19b58 <DOSBase>,d0
    aaca:	|         movea.l d0,a6
    aacc:	|         move.l 224(sp),d1
    aad0:	|         move.l 220(sp),d2
    aad4:	|         jsr -312(a6)
    aad8:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    aadc:	|         move.l 256(sp),212(sp)
    aae2:	|         moveq #2,d0
    aae4:	|         move.l d0,208(sp)
    aae8:	|         move.l 19b58 <DOSBase>,d0
    aaee:	|         movea.l d0,a6
    aaf0:	|         move.l 212(sp),d1
    aaf4:	|         move.l 208(sp),d2
    aaf8:	|         jsr -312(a6)
    aafc:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    ab00:	|         move.l 256(sp),200(sp)
    ab06:	|         moveq #2,d0
    ab08:	|         move.l d0,196(sp)
    ab0c:	|         move.l 19b58 <DOSBase>,d0
    ab12:	|         movea.l d0,a6
    ab14:	|         move.l 200(sp),d1
    ab18:	|         move.l 196(sp),d2
    ab1c:	|         jsr -312(a6)
    ab20:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    ab24:	|         move.l 256(sp),188(sp)
    ab2a:	|         move.l #105202,184(sp)
    ab32:	|         moveq #8,d0
    ab34:	|         move.l d0,180(sp)
    ab38:	|         move.l 19b58 <DOSBase>,d0
    ab3e:	|         movea.l d0,a6
    ab40:	|         move.l 188(sp),d1
    ab44:	|         move.l 184(sp),d2
    ab48:	|         move.l 180(sp),d3
    ab4c:	|         jsr -48(a6)
    ab50:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    ab54:	|         move.l 256(sp),172(sp)
    ab5a:	|         move.w 193b6 <allowAnyFilename>,d0
    ab60:	|         movea.w d0,a0
    ab62:	|         move.l a0,168(sp)
    ab66:	|         move.l 19b58 <DOSBase>,d0
    ab6c:	|         movea.l d0,a6
    ab6e:	|         move.l 172(sp),d1
    ab72:	|         move.l 168(sp),d2
    ab76:	|         jsr -312(a6)
    ab7a:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    ab7e:	|         move.l 256(sp),160(sp)
    ab84:	|         move.w 19af0 <captureAllKeys>,d0
    ab8a:	|         movea.w d0,a0
    ab8c:	|         move.l a0,156(sp)
    ab90:	|         move.l 19b58 <DOSBase>,d0
    ab96:	|         movea.l d0,a6
    ab98:	|         move.l 160(sp),d1
    ab9c:	|         move.l 156(sp),d2
    aba0:	|         jsr -312(a6)
    aba4:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    aba8:	|         move.l 256(sp),148(sp)
    abae:	|         moveq #1,d0
    abb0:	|         move.l d0,144(sp)
    abb4:	|         move.l 19b58 <DOSBase>,d0
    abba:	|         movea.l d0,a6
    abbc:	|         move.l 148(sp),d1
    abc0:	|         move.l 144(sp),d2
    abc4:	|         jsr -312(a6)
    abc8:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    abcc:	|         move.l 256(sp),136(sp)
    abd2:	|         move.l 19ca4 <fontTableSize>,d0
    abd8:	|         sgt d0
    abda:	|         neg.b d0
    abdc:	|         move.b d0,d0
    abde:	|         andi.l #255,d0
    abe4:	|         move.l d0,132(sp)
    abe8:	|         move.l 19b58 <DOSBase>,d0
    abee:	|         movea.l d0,a6
    abf0:	|         move.l 136(sp),d1
    abf4:	|         move.l 132(sp),d2
    abf8:	|         jsr -312(a6)
    abfc:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    ac00:	|         move.l 19ca4 <fontTableSize>,d0
    ac06:	|     /-- ble.s ac44 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    ac08:	|     |   move.l 19c9c <loadedFontNum>,d0
    ac0e:	|     |   move.l 256(sp),-(sp)
    ac12:	|     |   move.l d0,-(sp)
    ac14:	|     |   jsr 8d0 <put2bytes>
    ac1a:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    ac1c:	|     |   move.l 19c98 <fontHeight>,d0
    ac22:	|     |   move.l 256(sp),-(sp)
    ac26:	|     |   move.l d0,-(sp)
    ac28:	|     |   jsr 8d0 <put2bytes>
    ac2e:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    ac30:	|     |   move.l 19ca0 <fontOrderString>,d0
    ac36:	|     |   move.l 256(sp),-(sp)
    ac3a:	|     |   move.l d0,-(sp)
    ac3c:	|     |   jsr bd8 <writeString>
    ac42:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    ac44:	|     \-> move.w 19a5e <fontSpace>,d0
    ac4a:	|         movea.w d0,a0
    ac4c:	|         move.l 256(sp),-(sp)
    ac50:	|         move.l a0,-(sp)
    ac52:	|         jsr a9c <putSigned>
    ac58:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    ac5a:	|         move.l 19c5e <cameraX>,d0
    ac60:	|         move.l 256(sp),-(sp)
    ac64:	|         move.l d0,-(sp)
    ac66:	|         jsr 8d0 <put2bytes>
    ac6c:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    ac6e:	|         move.l 19c62 <cameraY>,d0
    ac74:	|         move.l 256(sp),-(sp)
    ac78:	|         move.l d0,-(sp)
    ac7a:	|         jsr 8d0 <put2bytes>
    ac80:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    ac82:	|         move.l 194f8 <cameraZoom>,d0
    ac88:	|         move.l 256(sp),-(sp)
    ac8c:	|         move.l d0,-(sp)
    ac8e:	|         jsr a46 <putFloat>
    ac94:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    ac96:	|         move.l 256(sp),124(sp)
    ac9c:	|         move.b 194d0 <brightnessLevel>,d0
    aca2:	|         move.b d0,d0
    aca4:	|         andi.l #255,d0
    acaa:	|         move.l d0,120(sp)
    acae:	|         move.l 19b58 <DOSBase>,d0
    acb4:	|         movea.l d0,a6
    acb6:	|         move.l 124(sp),d1
    acba:	|         move.l 120(sp),d2
    acbe:	|         jsr -312(a6)
    acc2:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    acc6:	|         move.l 256(sp),-(sp)
    acca:	|         jsr 4dba <saveHandlers>
    acd0:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    acd2:	|         move.l 256(sp),-(sp)
    acd6:	|         jsr 134e8 <saveRegions>
    acdc:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    acde:	|         move.l 19a60 <mouseCursorAnim>,d0
    ace4:	|         move.l 256(sp),-(sp)
    ace8:	|         move.l d0,-(sp)
    acea:	|         jsr 91c6 <saveAnim>
    acf0:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    acf2:	|         move.l 19a64 <mouseCursorFrameNum>,d0
    acf8:	|         move.l 256(sp),-(sp)
    acfc:	|         move.l d0,-(sp)
    acfe:	|         jsr 8d0 <put2bytes>
    ad04:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    ad06:	|         move.l 19ae8 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    ad0e:	|         clr.l 272(sp)
	while (thisFunction) {
    ad12:	|     /-- bra.s ad22 <saveGame+0x306>
		countFunctions ++;
    ad14:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    ad18:	|  |  |   movea.l 276(sp),a0
    ad1c:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    ad22:	|  |  \-> tst.l 276(sp)
    ad26:	|  \----- bne.s ad14 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    ad28:	|         move.l 256(sp),-(sp)
    ad2c:	|         move.l 276(sp),-(sp)
    ad30:	|         jsr 8d0 <put2bytes>
    ad36:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    ad38:	|         move.l 19ae8 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    ad40:	|     /-- bra.s ad5c <saveGame+0x340>
		saveFunction (thisFunction, fp);
    ad42:	|  /--|-> move.l 256(sp),-(sp)
    ad46:	|  |  |   move.l 280(sp),-(sp)
    ad4a:	|  |  |   jsr a864 <saveFunction>
    ad50:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    ad52:	|  |  |   movea.l 276(sp),a0
    ad56:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    ad5c:	|  |  \-> tst.l 276(sp)
    ad60:	|  \----- bne.s ad42 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    ad62:	|         clr.l 280(sp)
    ad66:	|     /-- bra.s ad88 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    ad68:	|  /--|-> move.l 19afe <globalVars>,d1
    ad6e:	|  |  |   move.l 280(sp),d0
    ad72:	|  |  |   lsl.l #3,d0
    ad74:	|  |  |   add.l d1,d0
    ad76:	|  |  |   move.l 256(sp),-(sp)
    ad7a:	|  |  |   move.l d0,-(sp)
    ad7c:	|  |  |   jsr b120 <saveVariable>
    ad82:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    ad84:	|  |  |   addq.l #1,280(sp)
    ad88:	|  |  \-> move.l 19b28 <numGlobals>,d0
    ad8e:	|  |      cmp.l 280(sp),d0
    ad92:	|  \----- bgt.s ad68 <saveGame+0x34c>
	}

	savePeople (fp);
    ad94:	|         move.l 256(sp),-(sp)
    ad98:	|         jsr 92ee <savePeople>
    ad9e:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    ada0:	|         movea.l 19cb0 <currentFloor>,a0
    ada6:	|         move.l 8(a0),d0
    adaa:	|  /----- beq.s ade8 <saveGame+0x3cc>
		FPutC (fp, 1);
    adac:	|  |      move.l 256(sp),100(sp)
    adb2:	|  |      moveq #1,d0
    adb4:	|  |      move.l d0,96(sp)
    adb8:	|  |      move.l 19b58 <DOSBase>,d0
    adbe:	|  |      movea.l d0,a6
    adc0:	|  |      move.l 100(sp),d1
    adc4:	|  |      move.l 96(sp),d2
    adc8:	|  |      jsr -312(a6)
    adcc:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    add0:	|  |      movea.l 19cb0 <currentFloor>,a0
    add6:	|  |      move.l (a0),d0
    add8:	|  |      move.l 256(sp),-(sp)
    addc:	|  |      move.l d0,-(sp)
    adde:	|  |      jsr 8d0 <put2bytes>
    ade4:	|  |      addq.l #8,sp
    ade6:	|  |  /-- bra.s ae0a <saveGame+0x3ee>
	} else FPutC (fp, 0);
    ade8:	|  \--|-> move.l 256(sp),112(sp)
    adee:	|     |   clr.l 108(sp)
    adf2:	|     |   move.l 19b58 <DOSBase>,d0
    adf8:	|     |   movea.l d0,a6
    adfa:	|     |   move.l 112(sp),d1
    adfe:	|     |   move.l 108(sp),d2
    ae02:	|     |   jsr -312(a6)
    ae06:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    ae0a:	|     \-> move.l 19c00 <tga.c.c5785d2a+0x2b>,d0
    ae10:	|  /----- beq.s ae4c <saveGame+0x430>
		FPutC (fp, 1);
    ae12:	|  |      move.l 256(sp),76(sp)
    ae18:	|  |      moveq #1,d0
    ae1a:	|  |      move.l d0,72(sp)
    ae1e:	|  |      move.l 19b58 <DOSBase>,d0
    ae24:	|  |      movea.l d0,a6
    ae26:	|  |      move.l 76(sp),d1
    ae2a:	|  |      move.l 72(sp),d2
    ae2e:	|  |      jsr -312(a6)
    ae32:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    ae36:	|  |      move.l 19bfc <tga.c.c5785d2a+0x27>,d0
    ae3c:	|  |      move.l 256(sp),-(sp)
    ae40:	|  |      move.l d0,-(sp)
    ae42:	|  |      jsr 8d0 <put2bytes>
    ae48:	|  |      addq.l #8,sp
    ae4a:	|  |  /-- bra.s ae6e <saveGame+0x452>
	} else FPutC (fp,0);
    ae4c:	|  \--|-> move.l 256(sp),88(sp)
    ae52:	|     |   clr.l 84(sp)
    ae56:	|     |   move.l 19b58 <DOSBase>,d0
    ae5c:	|     |   movea.l d0,a6
    ae5e:	|     |   move.l 88(sp),d1
    ae62:	|     |   move.l 84(sp),d2
    ae66:	|     |   jsr -312(a6)
    ae6a:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    ae6e:	|     \-> move.l 256(sp),64(sp)
    ae74:	|         move.l 19c72 <speechMode>,60(sp)
    ae7c:	|         move.l 19b58 <DOSBase>,d0
    ae82:	|         movea.l d0,a6
    ae84:	|         move.l 64(sp),d1
    ae88:	|         move.l 60(sp),d2
    ae8c:	|         jsr -312(a6)
    ae90:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    ae94:	|         move.b 19a34 <fadeMode>,d0
    ae9a:	|         move.b d0,d0
    ae9c:	|         andi.l #255,d0
    aea2:	|         move.l d0,52(sp)
    aea6:	|         move.l 256(sp),48(sp)
    aeac:	|         move.l 19b58 <DOSBase>,d0
    aeb2:	|         movea.l d0,a6
    aeb4:	|         move.l 52(sp),d1
    aeb8:	|         move.l 48(sp),d2
    aebc:	|         jsr -312(a6)
    aec0:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    aec4:	|         move.l 19bac <speech>,d0
    aeca:	|         move.l 256(sp),-(sp)
    aece:	|         move.l d0,-(sp)
    aed0:	|         jsr 63de <saveSpeech>
    aed6:	|         addq.l #8,sp
	saveStatusBars (fp);
    aed8:	|         move.l 256(sp),-(sp)
    aedc:	|         jsr 5dda <saveStatusBars>
    aee2:	|         addq.l #4,sp
	saveSounds (fp);
    aee4:	|         move.l 256(sp),-(sp)
    aee8:	|         jsr b264 <saveSounds>
    aeee:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    aef0:	|         move.w 19c5c <saveEncoding>,d0
    aef6:	|         move.w d0,d0
    aef8:	|         andi.l #65535,d0
    aefe:	|         move.l 256(sp),-(sp)
    af02:	|         move.l d0,-(sp)
    af04:	|         jsr 8d0 <put2bytes>
    af0a:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    af0c:	|         move.l 19c4e <parallaxStuff>,d0
    af12:	|         move.l 256(sp),-(sp)
    af16:	|         move.l d0,-(sp)
    af18:	|         jsr b550 <saveParallaxRecursive>
    af1e:	|         addq.l #8,sp
	FPutC (fp, 0);
    af20:	|         move.l 256(sp),40(sp)
    af26:	|         clr.l 36(sp)
    af2a:	|         move.l 19b58 <DOSBase>,d0
    af30:	|         movea.l d0,a6
    af32:	|         move.l 40(sp),d1
    af36:	|         move.l 36(sp),d2
    af3a:	|         jsr -312(a6)
    af3e:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    af42:	|         move.l 256(sp),28(sp)
    af48:	|         move.l 194d6 <languageNum>,24(sp)
    af50:	|         move.l 19b58 <DOSBase>,d0
    af56:	|         movea.l d0,a6
    af58:	|         move.l 28(sp),d1
    af5c:	|         move.l 24(sp),d2
    af60:	|         jsr -312(a6)
    af64:	|         move.l d0,20(sp)

	Close(fp);
    af68:	|         move.l 256(sp),16(sp)
    af6e:	|         move.l 19b58 <DOSBase>,d0
    af74:	|         movea.l d0,a6
    af76:	|         move.l 16(sp),d1
    af7a:	|         jsr -36(a6)
    af7e:	|         move.l d0,12(sp)
	clearStackLib ();
    af82:	|         jsr a51a <clearStackLib>
	return TRUE;
    af88:	|         moveq #1,d0
}
    af8a:	\-------> movem.l (sp)+,d2-d3/a6
    af8e:	          lea 272(sp),sp
    af92:	          rts

0000af94 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    af94:	       lea -12(sp),sp
	int elements = 0;
    af98:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    af9c:	       move.l 16(sp),(sp)
	while (search) {
    afa0:	   /-- bra.s afac <saveStack+0x18>
		elements ++;
    afa2:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    afa6:	|  |   movea.l (sp),a0
    afa8:	|  |   move.l 8(a0),(sp)
	while (search) {
    afac:	|  \-> tst.l (sp)
    afae:	\----- bne.s afa2 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    afb0:	       move.l 20(sp),-(sp)
    afb4:	       move.l 12(sp),-(sp)
    afb8:	       jsr 8d0 <put2bytes>
    afbe:	       addq.l #8,sp
	search = vs;
    afc0:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    afc4:	       clr.l 4(sp)
    afc8:	   /-- bra.s afe4 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    afca:	/--|-> move.l (sp),d0
    afcc:	|  |   move.l 20(sp),-(sp)
    afd0:	|  |   move.l d0,-(sp)
    afd2:	|  |   jsr b120 <saveVariable>
    afd8:	|  |   addq.l #8,sp
		search = search -> next;
    afda:	|  |   movea.l (sp),a0
    afdc:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    afe0:	|  |   addq.l #1,4(sp)
    afe4:	|  \-> move.l 4(sp),d0
    afe8:	|      cmp.l 8(sp),d0
    afec:	\----- blt.s afca <saveStack+0x36>
	}
}
    afee:	       nop
    aff0:	       nop
    aff2:	       lea 12(sp),sp
    aff6:	       rts

0000aff8 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    aff8:	             lea -44(sp),sp
    affc:	             move.l a6,-(sp)
    affe:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    b000:	             move.l 19c38 <stackLib>,48(sp)
	int a = 0;
    b008:	             clr.l 44(sp)
	while (s) {
    b00c:	      /----- bra.s b06a <saveStackRef+0x72>
		if (s -> stack == vs) {
    b00e:	   /--|----> movea.l 48(sp),a0
    b012:	   |  |      move.l (a0),d0
    b014:	   |  |      cmp.l 56(sp),d0
    b018:	   |  |  /-- bne.s b05c <saveStackRef+0x64>
			FPutC (fp, 1);
    b01a:	   |  |  |   move.l 60(sp),16(sp)
    b020:	   |  |  |   moveq #1,d0
    b022:	   |  |  |   move.l d0,12(sp)
    b026:	   |  |  |   move.l 19b58 <DOSBase>,d0
    b02c:	   |  |  |   movea.l d0,a6
    b02e:	   |  |  |   move.l 16(sp),d1
    b032:	   |  |  |   move.l 12(sp),d2
    b036:	   |  |  |   jsr -312(a6)
    b03a:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    b03e:	   |  |  |   move.l 19c34 <stackLibTotal>,d0
    b044:	   |  |  |   sub.l 44(sp),d0
    b048:	   |  |  |   move.l 60(sp),-(sp)
    b04c:	   |  |  |   move.l d0,-(sp)
    b04e:	   |  |  |   jsr 8d0 <put2bytes>
    b054:	   |  |  |   addq.l #8,sp
			return TRUE;
    b056:	   |  |  |   moveq #1,d0
    b058:	/--|--|--|-- bra.w b116 <saveStackRef+0x11e>
		}
		s = s -> next;
    b05c:	|  |  |  \-> movea.l 48(sp),a0
    b060:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    b066:	|  |  |      addq.l #1,44(sp)
	while (s) {
    b06a:	|  |  \----> tst.l 48(sp)
    b06e:	|  \-------- bne.s b00e <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    b070:	|            move.l 60(sp),40(sp)
    b076:	|            clr.l 36(sp)
    b07a:	|            move.l 19b58 <DOSBase>,d0
    b080:	|            movea.l d0,a6
    b082:	|            move.l 40(sp),d1
    b086:	|            move.l 36(sp),d2
    b08a:	|            jsr -312(a6)
    b08e:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    b092:	|            movea.l 56(sp),a0
    b096:	|            move.l (a0),d0
    b098:	|            move.l 60(sp),-(sp)
    b09c:	|            move.l d0,-(sp)
    b09e:	|            jsr af94 <saveStack>
    b0a4:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    b0a6:	|            moveq #8,d0
    b0a8:	|            move.l d0,28(sp)
    b0ac:	|            clr.l 24(sp)
    b0b0:	|            move.l 19b50 <SysBase>,d0
    b0b6:	|            movea.l d0,a6
    b0b8:	|            move.l 28(sp),d0
    b0bc:	|            move.l 24(sp),d1
    b0c0:	|            jsr -684(a6)
    b0c4:	|            move.l d0,20(sp)
    b0c8:	|            move.l 20(sp),d0
    b0cc:	|            move.l d0,48(sp)
	stackLibTotal ++;
    b0d0:	|            move.l 19c34 <stackLibTotal>,d0
    b0d6:	|            addq.l #1,d0
    b0d8:	|            move.l d0,19c34 <stackLibTotal>
	if (! s) {
    b0de:	|            tst.l 48(sp)
    b0e2:	|        /-- bne.s b0f6 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    b0e4:	|        |   pea 166aa <PutChar+0x1538>
    b0ea:	|        |   jsr 14822 <KPrintF>
    b0f0:	|        |   addq.l #4,sp
		return FALSE;
    b0f2:	|        |   clr.w d0
    b0f4:	+--------|-- bra.s b116 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    b0f6:	|        \-> move.l 19c38 <stackLib>,d0
    b0fc:	|            movea.l 48(sp),a0
    b100:	|            move.l d0,4(a0)
	s -> stack = vs;
    b104:	|            movea.l 48(sp),a0
    b108:	|            move.l 56(sp),(a0)
	stackLib = s;
    b10c:	|            move.l 48(sp),19c38 <stackLib>
	return TRUE;
    b114:	|            moveq #1,d0
}
    b116:	\----------> move.l (sp)+,d2
    b118:	             movea.l (sp)+,a6
    b11a:	             lea 44(sp),sp
    b11e:	             rts

0000b120 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    b120:	          lea -12(sp),sp
    b124:	          move.l a6,-(sp)
    b126:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    b128:	          move.l 28(sp),16(sp)
    b12e:	          movea.l 24(sp),a0
    b132:	          move.l (a0),d0
    b134:	          move.l d0,12(sp)
    b138:	          move.l 19b58 <DOSBase>,d0
    b13e:	          movea.l d0,a6
    b140:	          move.l 16(sp),d1
    b144:	          move.l 12(sp),d2
    b148:	          jsr -312(a6)
    b14c:	          move.l d0,8(sp)
	switch (from -> varType) {
    b150:	          movea.l 24(sp),a0
    b154:	          move.l (a0),d0
    b156:	          moveq #9,d1
    b158:	          cmp.l d0,d1
    b15a:	      /-- bcs.w b20a <saveVariable+0xea>
    b15e:	      |   add.l d0,d0
    b160:	      |   movea.l d0,a0
    b162:	      |   adda.l #45422,a0
    b168:	      |   move.w (a0),d0
    b16a:	      |   jmp (b16e <saveVariable+0x4e>,pc,d0.w)
    b16e:	      |   ori.l #1310740,(a0)+
    b174:	      |   ori.b #20,(20,a0,d0.w)
    b17a:	      |   .short 0x004c
    b17c:	      |   ori.b #126,(a4)
    b180:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    b184:	      |   ori.b #40,(a0)+
    b188:	      |   ori.b #47,d4
    b18c:	      |   ori.b #0,(a4)+
    b190:	      |   jsr 958 <put4bytes>
    b196:	      |   addq.l #8,sp
		return TRUE;
    b198:	      |   moveq #1,d0
    b19a:	/-----|-- bra.w b246 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    b19e:	|     |   movea.l 24(sp),a0
    b1a2:	|     |   move.l 4(a0),d0
    b1a6:	|     |   move.l 28(sp),-(sp)
    b1aa:	|     |   move.l d0,-(sp)
    b1ac:	|     |   jsr bd8 <writeString>
    b1b2:	|     |   addq.l #8,sp
		return TRUE;
    b1b4:	|     |   moveq #1,d0
    b1b6:	+-----|-- bra.w b246 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    b1ba:	|     |   movea.l 24(sp),a0
    b1be:	|     |   move.l 4(a0),d0
    b1c2:	|     |   move.l 28(sp),-(sp)
    b1c6:	|     |   move.l d0,-(sp)
    b1c8:	|     |   jsr aff8 <saveStackRef>
    b1ce:	|     |   addq.l #8,sp
    b1d0:	+-----|-- bra.s b246 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    b1d2:	|     |   movea.l 24(sp),a0
    b1d6:	|     |   move.l 4(a0),d0
    b1da:	|     |   move.l 28(sp),-(sp)
    b1de:	|     |   move.l d0,-(sp)
    b1e0:	|     |   jsr 9290 <saveCostume>
    b1e6:	|     |   addq.l #8,sp
		return FALSE;
    b1e8:	|     |   clr.w d0
    b1ea:	+-----|-- bra.s b246 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    b1ec:	|     |   movea.l 24(sp),a0
    b1f0:	|     |   move.l 4(a0),d0
    b1f4:	|     |   move.l 28(sp),-(sp)
    b1f8:	|     |   move.l d0,-(sp)
    b1fa:	|     |   jsr 91c6 <saveAnim>
    b200:	|     |   addq.l #8,sp
		return FALSE;
    b202:	|     |   clr.w d0
    b204:	+-----|-- bra.s b246 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    b206:	|     |   clr.w d0
    b208:	+-----|-- bra.s b246 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    b20a:	|     \-> movea.l 24(sp),a0
    b20e:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    b210:	|         moveq #10,d1
    b212:	|         cmp.l d0,d1
    b214:	|  /----- bcs.s b22e <saveVariable+0x10e>
						typeName[from->varType] :
    b216:	|  |      movea.l 24(sp),a0
    b21a:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    b21c:	|  |      add.l d0,d0
    b21e:	|  |      movea.l d0,a1
    b220:	|  |      adda.l d0,a1
    b222:	|  |      lea 19a36 <typeName>,a0
    b228:	|  |      move.l (0,a1,a0.l),d0
    b22c:	|  |  /-- bra.s b234 <saveVariable+0x114>
    b22e:	|  \--|-> move.l #91855,d0
    b234:	|     \-> move.l d0,-(sp)
    b236:	|         pea 166d6 <PutChar+0x1564>
    b23c:	|         jsr 14822 <KPrintF>
    b242:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    b244:	|         moveq #1,d0
    b246:	\-------> move.l (sp)+,d2
    b248:	          movea.l (sp)+,a6
    b24a:	          lea 12(sp),sp
    b24e:	          rts

0000b250 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    b250:	moveq #0,d0
}
    b252:	rts

0000b254 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    b254:	nop
    b256:	rts

0000b258 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    b258:	nop
    b25a:	rts

0000b25c <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    b25c:	moveq #1,d0
}
    b25e:	rts

0000b260 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    b260:	nop
    b262:	rts

0000b264 <saveSounds>:

void saveSounds (BPTR fp) {
    b264:	lea -12(sp),sp
    b268:	move.l a6,-(sp)
    b26a:	move.l d2,-(sp)
	FPutC (fp,0);
    b26c:	move.l 24(sp),16(sp)
    b272:	clr.l 12(sp)
    b276:	move.l 19b58 <DOSBase>,d0
    b27c:	movea.l d0,a6
    b27e:	move.l 16(sp),d1
    b282:	move.l 12(sp),d2
    b286:	jsr -312(a6)
    b28a:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    b28e:	move.l 194f4 <defSoundVol>,d0
    b294:	move.l 24(sp),-(sp)
    b298:	move.l d0,-(sp)
    b29a:	jsr 8d0 <put2bytes>
    b2a0:	addq.l #8,sp
	put2bytes (defVol, fp);
    b2a2:	move.l 194f0 <defVol>,d0
    b2a8:	move.l 24(sp),-(sp)
    b2ac:	move.l d0,-(sp)
    b2ae:	jsr 8d0 <put2bytes>
    b2b4:	addq.l #8,sp
}
    b2b6:	nop
    b2b8:	move.l (sp)+,d2
    b2ba:	movea.l (sp)+,a6
    b2bc:	lea 12(sp),sp
    b2c0:	rts

0000b2c2 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    b2c2:	move.l 4(sp),194f0 <defVol>
}
    b2ca:	nop
    b2cc:	rts

0000b2ce <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    b2ce:	move.l 4(sp),194f4 <defSoundVol>
}
    b2d6:	nop
    b2d8:	rts

0000b2da <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    b2da:	nop
    b2dc:	rts

0000b2de <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    b2de:	nop
    b2e0:	rts

0000b2e2 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    b2e2:	nop
    b2e4:	rts

0000b2e6 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    b2e6:	subq.l #4,sp
    b2e8:	move.l 12(sp),d0
    b2ec:	move.w d0,d0
    b2ee:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    b2f2:	moveq #1,d0
}
    b2f4:	addq.l #4,sp
    b2f6:	rts

0000b2f8 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    b2f8:	nop
    b2fa:	rts

0000b2fc <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    b2fc:	move.l 16(sp),-(sp)
    b300:	move.l 16(sp),-(sp)
    b304:	jsr df4 <CstBlankScreen>
    b30a:	addq.l #8,sp
}
    b30c:	nop
    b30e:	rts

0000b310 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    b310:	pea 166f9 <PutChar+0x1587>
    b316:	jsr 14822 <KPrintF>
    b31c:	addq.l #4,sp
}
    b31e:	nop
    b320:	rts

0000b322 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    b322:	movea.l 8(sp),a1
    b326:	movea.l 12(sp),a0
    b32a:	move.l 8(sp),d1
    b32e:	move.l 4(sp),d0
    b332:	move.l a1,-(sp)
    b334:	move.l a0,-(sp)
    b336:	move.l d1,-(sp)
    b338:	move.l d0,-(sp)
    b33a:	jsr 24f8 <drawLine>
    b340:	lea 16(sp),sp
}
    b344:	nop
    b346:	rts

0000b348 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    b348:	movea.l 12(sp),a1
    b34c:	movea.l 4(sp),a0
    b350:	move.l 8(sp),d1
    b354:	move.l 4(sp),d0
    b358:	move.l a1,-(sp)
    b35a:	move.l a0,-(sp)
    b35c:	move.l d1,-(sp)
    b35e:	move.l d0,-(sp)
    b360:	jsr 24f8 <drawLine>
    b366:	lea 16(sp),sp
}
    b36a:	nop
    b36c:	rts

0000b36e <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    b36e:	pea 16732 <PutChar+0x15c0>
    b374:	jsr 14822 <KPrintF>
    b37a:	addq.l #4,sp
}
    b37c:	nop
    b37e:	rts

0000b380 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    b380:	jsr 2488 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    b386:	pea 19c48 <backdropTextureName>
    b38c:	pea 1 <_start+0x1>
    b390:	jsr 267a <deleteTextures>
    b396:	addq.l #8,sp
	backdropTextureName = 0;
    b398:	clr.l 19c48 <backdropTextureName>
	backdropExists = FALSE;
    b39e:	clr.w 19c4c <backdropExists>
}
    b3a4:	nop
    b3a6:	rts

0000b3a8 <killParallax>:

void killParallax () {
    b3a8:	          lea -12(sp),sp
    b3ac:	          move.l a6,-(sp)
	while (parallaxStuff) {
    b3ae:	   /----- bra.s b41a <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    b3b0:	/--|----> move.l 19c4e <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    b3b8:	|  |      movea.l 12(sp),a0
    b3bc:	|  |      move.l 42(a0),d0
    b3c0:	|  |      move.l d0,19c4e <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    b3c6:	|  |      move.l 12(sp),d0
    b3ca:	|  |      addq.l #4,d0
    b3cc:	|  |      move.l d0,-(sp)
    b3ce:	|  |      pea 1 <_start+0x1>
    b3d2:	|  |      jsr 267a <deleteTextures>
    b3d8:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    b3da:	|  |      movea.l 12(sp),a0
    b3de:	|  |      move.l (a0),d0
    b3e0:	|  |  /-- beq.s b3fa <killParallax+0x52>
    b3e2:	|  |  |   movea.l 12(sp),a0
    b3e6:	|  |  |   move.l (a0),8(sp)
    b3ea:	|  |  |   move.l 19b50 <SysBase>,d0
    b3f0:	|  |  |   movea.l d0,a6
    b3f2:	|  |  |   movea.l 8(sp),a1
    b3f6:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    b3fa:	|  |  \-> tst.l 12(sp)
    b3fe:	|  |  /-- beq.s b416 <killParallax+0x6e>
    b400:	|  |  |   move.l 12(sp),4(sp)
    b406:	|  |  |   move.l 19b50 <SysBase>,d0
    b40c:	|  |  |   movea.l d0,a6
    b40e:	|  |  |   movea.l 4(sp),a1
    b412:	|  |  |   jsr -690(a6)
		k = NULL;
    b416:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    b41a:	|  \----> move.l 19c4e <parallaxStuff>,d0
    b420:	\-------- bne.s b3b0 <killParallax+0x8>
	}
}
    b422:	          nop
    b424:	          nop
    b426:	          movea.l (sp)+,a6
    b428:	          lea 12(sp),sp
    b42c:	          rts

0000b42e <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    b42e:	       move.l 4(sp),-(sp)
    b432:	       jsr 5144 <openFileFromNum>
    b438:	       addq.l #4,sp
    b43a:	       tst.l d0
    b43c:	   /-- bne.s b44e <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    b43e:	   |   pea 16753 <PutChar+0x15e1>
    b444:	   |   jsr 14822 <KPrintF>
    b44a:	   |   addq.l #4,sp
		return;
    b44c:	/--|-- bra.s b46e <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    b44e:	|  \-> move.l 19b38 <bigDataFile>,d0
    b454:	|      move.l 12(sp),-(sp)
    b458:	|      move.l 12(sp),-(sp)
    b45c:	|      move.l d0,-(sp)
    b45e:	|      jsr 11f0 <CstLoadBackdrop>
    b464:	|      lea 12(sp),sp
	finishAccess ();
    b468:	|      jsr 503c <finishAccess>
	
}
    b46e:	\----> rts

0000b470 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    b470:	subq.l #8,sp
    b472:	movea.l 12(sp),a0
    b476:	move.l 16(sp),d1
    b47a:	move.l 20(sp),d0
    b47e:	movea.w a0,a0
    b480:	move.w a0,6(sp)
    b484:	move.w d1,d1
    b486:	move.w d1,4(sp)
    b48a:	move.w d0,d0
    b48c:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    b490:	pea 167a2 <PutChar+0x1630>
    b496:	jsr 14822 <KPrintF>
    b49c:	addq.l #4,sp

}
    b49e:	nop
    b4a0:	addq.l #8,sp
    b4a2:	rts

0000b4a4 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    b4a4:	pea 167c5 <PutChar+0x1653>
    b4aa:	jsr 14822 <KPrintF>
    b4b0:	addq.l #4,sp
}
    b4b2:	nop
    b4b4:	rts

0000b4b6 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    b4b6:	pea 19c52 <snapshotTextureName>
    b4bc:	pea 1 <_start+0x1>
    b4c0:	jsr 267a <deleteTextures>
    b4c6:	addq.l #8,sp
	snapshotTextureName = 0;
    b4c8:	clr.l 19c52 <snapshotTextureName>
}
    b4ce:	nop
    b4d0:	rts

0000b4d2 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    b4d2:	move.l 19c44 <sceneHeight>,d0
    b4d8:	move.l d0,d1
    b4da:	move.l 19c40 <sceneWidth>,d0
    b4e0:	move.l d1,-(sp)
    b4e2:	move.l d0,-(sp)
    b4e4:	jsr 21a0 <CstReserveBackdrop>
    b4ea:	addq.l #8,sp
}
    b4ec:	rts

0000b4ee <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    b4ee:	jsr b380 <killBackDrop>
	killParallax ();
    b4f4:	jsr b3a8 <killParallax>
	killZBuffer ();
    b4fa:	jsr 6ad8 <killZBuffer>
	sceneWidth = x;
    b500:	move.l 4(sp),d0
    b504:	move.l d0,19c40 <sceneWidth>
	sceneHeight = y;
    b50a:	move.l 8(sp),d0
    b50e:	move.l d0,19c44 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    b514:	pea 167fe <PutChar+0x168c>
    b51a:	jsr 14822 <KPrintF>
    b520:	addq.l #4,sp
	return reserveBackdrop();
    b522:	jsr b4d2 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    b528:	rts

0000b52a <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    b52a:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    b52c:	move.l 12(sp),-(sp)
    b530:	jsr 6bc <get2bytes>
    b536:	addq.l #4,sp
    b538:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    b53c:	move.l 12(sp),-(sp)
    b540:	jsr 6bc <get2bytes>
    b546:	addq.l #4,sp
    b548:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    b54a:	moveq #1,d0
}
    b54c:	addq.l #8,sp
    b54e:	rts

0000b550 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    b550:	   /-> lea -12(sp),sp
    b554:	   |   move.l a6,-(sp)
    b556:	   |   move.l d2,-(sp)
	if (me) {
    b558:	   |   tst.l 24(sp)
    b55c:	/--|-- beq.w b5f2 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    b560:	|  |   movea.l 24(sp),a0
    b564:	|  |   move.l 42(a0),d0
    b568:	|  |   move.l 28(sp),-(sp)
    b56c:	|  |   move.l d0,-(sp)
    b56e:	|  \-- jsr b550 <saveParallaxRecursive>(pc)
    b572:	|      addq.l #8,sp
		FPutC (fp, 1);
    b574:	|      move.l 28(sp),16(sp)
    b57a:	|      moveq #1,d0
    b57c:	|      move.l d0,12(sp)
    b580:	|      move.l 19b58 <DOSBase>,d0
    b586:	|      movea.l d0,a6
    b588:	|      move.l 16(sp),d1
    b58c:	|      move.l 12(sp),d2
    b590:	|      jsr -312(a6)
    b594:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    b598:	|      movea.l 24(sp),a0
    b59c:	|      move.w 28(a0),d0
    b5a0:	|      move.w d0,d0
    b5a2:	|      andi.l #65535,d0
    b5a8:	|      move.l 28(sp),-(sp)
    b5ac:	|      move.l d0,-(sp)
    b5ae:	|      jsr 8d0 <put2bytes>
    b5b4:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    b5b6:	|      movea.l 24(sp),a0
    b5ba:	|      move.w 30(a0),d0
    b5be:	|      move.w d0,d0
    b5c0:	|      andi.l #65535,d0
    b5c6:	|      move.l 28(sp),-(sp)
    b5ca:	|      move.l d0,-(sp)
    b5cc:	|      jsr 8d0 <put2bytes>
    b5d2:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    b5d4:	|      movea.l 24(sp),a0
    b5d8:	|      move.w 32(a0),d0
    b5dc:	|      move.w d0,d0
    b5de:	|      andi.l #65535,d0
    b5e4:	|      move.l 28(sp),-(sp)
    b5e8:	|      move.l d0,-(sp)
    b5ea:	|      jsr 8d0 <put2bytes>
    b5f0:	|      addq.l #8,sp
	}
}
    b5f2:	\----> nop
    b5f4:	       move.l (sp)+,d2
    b5f6:	       movea.l (sp)+,a6
    b5f8:	       lea 12(sp),sp
    b5fc:	       rts

0000b5fe <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    b5fe:	pea 16825 <PutChar+0x16b3>
    b604:	jsr 14822 <KPrintF>
    b60a:	addq.l #4,sp
	return TRUE;
    b60c:	moveq #1,d0
    b60e:	rts

0000b610 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    b610:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    b612:	             move.l 19c56 <allObjectTypes>,(sp)

	while (huntType) {
    b618:	      /----- bra.s b630 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    b61a:	   /--|----> movea.l (sp),a0
    b61c:	   |  |      move.l 4(a0),d0
    b620:	   |  |      cmp.l 8(sp),d0
    b624:	   |  |  /-- bne.s b62a <findObjectType+0x1a>
    b626:	   |  |  |   move.l (sp),d0
    b628:	/--|--|--|-- bra.s b640 <findObjectType+0x30>
		huntType = huntType -> next;
    b62a:	|  |  |  \-> movea.l (sp),a0
    b62c:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    b630:	|  |  \----> tst.l (sp)
    b632:	|  \-------- bne.s b61a <findObjectType+0xa>
	}

	return loadObjectType (i);
    b634:	|            move.l 8(sp),-(sp)
    b638:	|            jsr b700 <loadObjectType>
    b63e:	|            addq.l #4,sp
}
    b640:	\----------> addq.l #4,sp
    b642:	             rts

0000b644 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    b644:	             lea -12(sp),sp
	int i, num = 0;
    b648:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    b64c:	             move.l 20(sp),-(sp)
    b650:	             jsr b610 <findObjectType>
    b656:	             addq.l #4,sp
    b658:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    b65a:	             clr.l 8(sp)
    b65e:	   /-------- bra.s b694 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    b660:	/--|-------> movea.l (sp),a0
    b662:	|  |         move.l 38(a0),d1
    b666:	|  |         move.l 8(sp),d0
    b66a:	|  |         lsl.l #3,d0
    b66c:	|  |         movea.l d1,a0
    b66e:	|  |         adda.l d0,a0
    b670:	|  |         move.l (a0),d0
    b672:	|  |         cmp.l 16(sp),d0
    b676:	|  |  /----- bne.s b690 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    b678:	|  |  |      movea.l (sp),a0
    b67a:	|  |  |      move.l 38(a0),d1
    b67e:	|  |  |      move.l 8(sp),d0
    b682:	|  |  |      lsl.l #3,d0
    b684:	|  |  |      movea.l d1,a0
    b686:	|  |  |      adda.l d0,a0
    b688:	|  |  |      move.l 4(a0),4(sp)
			break;
    b68e:	|  |  |  /-- bra.s b6a0 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    b690:	|  |  \--|-> addq.l #1,8(sp)
    b694:	|  \-----|-> movea.l (sp),a0
    b696:	|        |   move.l 16(a0),d0
    b69a:	|        |   cmp.l 8(sp),d0
    b69e:	\--------|-- bgt.s b660 <getCombinationFunction+0x1c>
		}
	}

	return num;
    b6a0:	         \-> move.l 4(sp),d0
}
    b6a4:	             lea 12(sp),sp
    b6a8:	             rts

0000b6aa <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    b6aa:	moveq #1,d0
}
    b6ac:	rts

0000b6ae <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    b6ae:	subq.l #8,sp
    b6b0:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    b6b2:	move.l 16(sp),-(sp)
    b6b6:	jsr 6bc <get2bytes>
    b6bc:	addq.l #4,sp
    b6be:	move.l d0,-(sp)
    b6c0:	jsr b700 <loadObjectType>
    b6c6:	addq.l #4,sp
    b6c8:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    b6cc:	movea.l 8(sp),a0
    b6d0:	move.l (a0),4(sp)
    b6d4:	move.l 19b50 <SysBase>,d0
    b6da:	movea.l d0,a6
    b6dc:	movea.l 4(sp),a1
    b6e0:	jsr -690(a6)
	r -> screenName = readString (fp);
    b6e4:	move.l 16(sp),-(sp)
    b6e8:	jsr b02 <readString>
    b6ee:	addq.l #4,sp
    b6f0:	movea.l 8(sp),a0
    b6f4:	move.l d0,(a0)
	return r;
    b6f6:	move.l 8(sp),d0
}
    b6fa:	movea.l (sp)+,a6
    b6fc:	addq.l #8,sp
    b6fe:	rts

0000b700 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    b700:	          lea -84(sp),sp
    b704:	          move.l a6,-(sp)
    b706:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    b708:	          moveq #42,d0
    b70a:	          move.l d0,84(sp)
    b70e:	          clr.l 80(sp)
    b712:	          move.l 19b50 <SysBase>,d0
    b718:	          movea.l d0,a6
    b71a:	          move.l 84(sp),d0
    b71e:	          move.l 80(sp),d1
    b722:	          jsr -684(a6)
    b726:	          move.l d0,76(sp)
    b72a:	          move.l 76(sp),d0
    b72e:	          move.l d0,72(sp)

    if (newType) {
    b732:	/-------- beq.w b9ac <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    b736:	|         move.l 96(sp),-(sp)
    b73a:	|         jsr 520c <openObjectSlice>
    b740:	|         addq.l #4,sp
    b742:	|         tst.w d0
    b744:	+-------- beq.w b9ac <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    b748:	|         move.l 19b38 <bigDataFile>,d0
    b74e:	|         move.l d0,-(sp)
    b750:	|         jsr 6bc <get2bytes>
    b756:	|         addq.l #4,sp
    b758:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    b75c:	|         move.l 19b38 <bigDataFile>,64(sp)
    b764:	|         move.l 19b58 <DOSBase>,d0
    b76a:	|         movea.l d0,a6
    b76c:	|         move.l 64(sp),d1
    b770:	|         jsr -306(a6)
    b774:	|         move.l d0,60(sp)
    b778:	|         move.l 60(sp),d0
    b77c:	|         move.l d0,d0
    b77e:	|         movea.l 72(sp),a0
    b782:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    b786:	|         move.l 19b38 <bigDataFile>,56(sp)
    b78e:	|         move.l 19b58 <DOSBase>,d0
    b794:	|         movea.l d0,a6
    b796:	|         move.l 56(sp),d1
    b79a:	|         jsr -306(a6)
    b79e:	|         move.l d0,52(sp)
    b7a2:	|         move.l 52(sp),d0
    b7a6:	|         move.l d0,d0
    b7a8:	|         movea.l 72(sp),a0
    b7ac:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    b7b0:	|         move.l 19b38 <bigDataFile>,48(sp)
    b7b8:	|         move.l 19b58 <DOSBase>,d0
    b7be:	|         movea.l d0,a6
    b7c0:	|         move.l 48(sp),d1
    b7c4:	|         jsr -306(a6)
    b7c8:	|         move.l d0,44(sp)
    b7cc:	|         move.l 44(sp),d0
    b7d0:	|         move.l d0,d0
    b7d2:	|         movea.l 72(sp),a0
    b7d6:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    b7da:	|         move.l 19b38 <bigDataFile>,40(sp)
    b7e2:	|         move.l 19b58 <DOSBase>,d0
    b7e8:	|         movea.l d0,a6
    b7ea:	|         move.l 40(sp),d1
    b7ee:	|         jsr -306(a6)
    b7f2:	|         move.l d0,36(sp)
    b7f6:	|         move.l 36(sp),d0
    b7fa:	|         movea.l 72(sp),a0
    b7fe:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    b802:	|         move.l 19b38 <bigDataFile>,32(sp)
    b80a:	|         move.l 19b58 <DOSBase>,d0
    b810:	|         movea.l d0,a6
    b812:	|         move.l 32(sp),d1
    b816:	|         jsr -306(a6)
    b81a:	|         move.l d0,28(sp)
    b81e:	|         move.l 28(sp),d0
    b822:	|         movea.l 72(sp),a0
    b826:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    b82a:	|         move.l 19b38 <bigDataFile>,d0
    b830:	|         move.l d0,-(sp)
    b832:	|         jsr 718 <get4bytes>
    b838:	|         addq.l #4,sp
    b83a:	|         movea.l 72(sp),a0
    b83e:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    b842:	|         move.l 19b38 <bigDataFile>,d0
    b848:	|         move.l d0,-(sp)
    b84a:	|         jsr 6bc <get2bytes>
    b850:	|         addq.l #4,sp
    b852:	|         movea.l 72(sp),a0
    b856:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    b85a:	|         move.l 19b38 <bigDataFile>,24(sp)
    b862:	|         move.l 19b58 <DOSBase>,d0
    b868:	|         movea.l d0,a6
    b86a:	|         move.l 24(sp),d1
    b86e:	|         jsr -306(a6)
    b872:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    b876:	|         move.l 19b38 <bigDataFile>,d0
    b87c:	|         move.l d0,-(sp)
    b87e:	|         jsr 7d8 <getFloat>
    b884:	|         addq.l #4,sp
            getFloat(bigDataFile);
    b886:	|         move.l 19b38 <bigDataFile>,d0
    b88c:	|         move.l d0,-(sp)
    b88e:	|         jsr 7d8 <getFloat>
    b894:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    b896:	|         move.l 19b38 <bigDataFile>,d0
    b89c:	|         move.l d0,-(sp)
    b89e:	|         jsr 6bc <get2bytes>
    b8a4:	|         addq.l #4,sp
    b8a6:	|         move.l d0,d0
    b8a8:	|         movea.l 72(sp),a0
    b8ac:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    b8b0:	|         move.l 19b38 <bigDataFile>,d0
    b8b6:	|         move.l d0,-(sp)
    b8b8:	|         jsr 6bc <get2bytes>
    b8be:	|         addq.l #4,sp
    b8c0:	|         movea.l 72(sp),a0
    b8c4:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    b8c8:	|         movea.l 72(sp),a0
    b8cc:	|         move.l 16(a0),d0
    b8d0:	|  /----- beq.s b902 <loadObjectType+0x202>
    b8d2:	|  |      movea.l 72(sp),a0
    b8d6:	|  |      move.l 16(a0),d0
    b8da:	|  |      lsl.l #3,d0
    b8dc:	|  |      move.l d0,16(sp)
    b8e0:	|  |      clr.l 12(sp)
    b8e4:	|  |      move.l 19b50 <SysBase>,d0
    b8ea:	|  |      movea.l d0,a6
    b8ec:	|  |      move.l 16(sp),d0
    b8f0:	|  |      move.l 12(sp),d1
    b8f4:	|  |      jsr -684(a6)
    b8f8:	|  |      move.l d0,8(sp)
    b8fc:	|  |      move.l 8(sp),d0
    b900:	|  |  /-- bra.s b904 <loadObjectType+0x204>
    b902:	|  \--|-> moveq #0,d0
    b904:	|     \-> movea.l 72(sp),a0
    b908:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    b90c:	|         clr.l 88(sp)
    b910:	|     /-- bra.s b960 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    b912:	|  /--|-> move.l 19b38 <bigDataFile>,d1
    b918:	|  |  |   movea.l 72(sp),a0
    b91c:	|  |  |   movea.l 38(a0),a0
    b920:	|  |  |   move.l 88(sp),d0
    b924:	|  |  |   lsl.l #3,d0
    b926:	|  |  |   lea (0,a0,d0.l),a2
    b92a:	|  |  |   move.l d1,-(sp)
    b92c:	|  |  |   jsr 6bc <get2bytes>
    b932:	|  |  |   addq.l #4,sp
    b934:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    b936:	|  |  |   move.l 19b38 <bigDataFile>,d1
    b93c:	|  |  |   movea.l 72(sp),a0
    b940:	|  |  |   movea.l 38(a0),a0
    b944:	|  |  |   move.l 88(sp),d0
    b948:	|  |  |   lsl.l #3,d0
    b94a:	|  |  |   lea (0,a0,d0.l),a2
    b94e:	|  |  |   move.l d1,-(sp)
    b950:	|  |  |   jsr 6bc <get2bytes>
    b956:	|  |  |   addq.l #4,sp
    b958:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    b95c:	|  |  |   addq.l #1,88(sp)
    b960:	|  |  \-> movea.l 72(sp),a0
    b964:	|  |      move.l 16(a0),d0
    b968:	|  |      cmp.l 88(sp),d0
    b96c:	|  \----- bgt.s b912 <loadObjectType+0x212>
            }
            finishAccess();
    b96e:	|         jsr 503c <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    b974:	|         move.l 68(sp),-(sp)
    b978:	|         jsr 5046 <getNumberedString>
    b97e:	|         addq.l #4,sp
    b980:	|         movea.l 72(sp),a0
    b984:	|         move.l d0,(a0)
            newType->objectNum = i;
    b986:	|         movea.l 72(sp),a0
    b98a:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    b990:	|         move.l 19c56 <allObjectTypes>,d0
    b996:	|         movea.l 72(sp),a0
    b99a:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    b99e:	|         move.l 72(sp),19c56 <allObjectTypes>
            return newType;
    b9a6:	|         move.l 72(sp),d0
    b9aa:	|     /-- bra.s b9ae <loadObjectType+0x2ae>
        }
    }
    return NULL;
    b9ac:	\-----|-> moveq #0,d0
}
    b9ae:	      \-> movea.l (sp)+,a2
    b9b0:	          movea.l (sp)+,a6
    b9b2:	          lea 84(sp),sp
    b9b6:	          rts

0000b9b8 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    b9b8:	             lea -16(sp),sp
    b9bc:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    b9be:	             move.l #105558,16(sp)

	while (* huntRegion) {
    b9c6:	   /-------- bra.s ba3a <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    b9c8:	/--|-------> movea.l 16(sp),a0
    b9cc:	|  |         move.l (a0),d0
    b9ce:	|  |         cmp.l 24(sp),d0
    b9d2:	|  |  /----- bne.s ba2c <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    b9d4:	|  |  |      movea.l 24(sp),a0
    b9d8:	|  |  |      move.l 8(a0),d0
    b9dc:	|  |  |      movea.l 16(sp),a0
    b9e0:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    b9e2:	|  |  |      movea.l 24(sp),a0
    b9e6:	|  |  |      move.l 38(a0),12(sp)
    b9ec:	|  |  |      move.l 19b50 <SysBase>,d0
    b9f2:	|  |  |      movea.l d0,a6
    b9f4:	|  |  |      movea.l 12(sp),a1
    b9f8:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    b9fc:	|  |  |      movea.l 24(sp),a0
    ba00:	|  |  |      move.l (a0),8(sp)
    ba04:	|  |  |      move.l 19b50 <SysBase>,d0
    ba0a:	|  |  |      movea.l d0,a6
    ba0c:	|  |  |      movea.l 8(sp),a1
    ba10:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    ba14:	|  |  |      move.l 24(sp),4(sp)
    ba1a:	|  |  |      move.l 19b50 <SysBase>,d0
    ba20:	|  |  |      movea.l d0,a6
    ba22:	|  |  |      movea.l 4(sp),a1
    ba26:	|  |  |      jsr -690(a6)
			return;
    ba2a:	|  |  |  /-- bra.s ba50 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    ba2c:	|  |  \--|-> movea.l 16(sp),a0
    ba30:	|  |     |   move.l (a0),d0
    ba32:	|  |     |   move.l d0,d1
    ba34:	|  |     |   addq.l #8,d1
    ba36:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    ba3a:	|  \-----|-> movea.l 16(sp),a0
    ba3e:	|        |   move.l (a0),d0
    ba40:	\--------|-- bne.s b9c8 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    ba42:	         |   pea 1684c <PutChar+0x16da>
    ba48:	         |   jsr 14822 <KPrintF>
    ba4e:	         |   addq.l #4,sp
}
    ba50:	         \-> movea.l (sp)+,a6
    ba52:	             lea 16(sp),sp
    ba56:	             rts

0000ba58 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    ba58:	movea.l 4(sp),a0
    ba5c:	move.l 4(a0),d0
    ba60:	move.l 8(sp),-(sp)
    ba64:	move.l d0,-(sp)
    ba66:	jsr 8d0 <put2bytes>
    ba6c:	addq.l #8,sp
	writeString (r -> screenName, fp);
    ba6e:	movea.l 4(sp),a0
    ba72:	move.l (a0),d0
    ba74:	move.l 8(sp),-(sp)
    ba78:	move.l d0,-(sp)
    ba7a:	jsr bd8 <writeString>
    ba80:	addq.l #8,sp
    ba82:	nop
    ba84:	rts

0000ba86 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    ba86:	                         lea -112(sp),sp
    ba8a:	                         move.l a6,-(sp)
    ba8c:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    ba8e:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    ba92:	                         move.w 19c5c <saveEncoding>,d0
    ba98:	                  /----- beq.s baa2 <fileToStack+0x1c>
    ba9a:	                  |      move.l #92274,d0
    baa0:	                  |  /-- bra.s baa8 <fileToStack+0x22>
    baa2:	                  \--|-> move.l #92300,d0
    baa8:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    baac:	                         move.l 124(sp),112(sp)
    bab2:	                         move.l #1005,108(sp)
    baba:	                         move.l 19b58 <DOSBase>,d0
    bac0:	                         movea.l d0,a6
    bac2:	                         move.l 112(sp),d1
    bac6:	                         move.l 108(sp),d2
    baca:	                         jsr -30(a6)
    bace:	                         move.l d0,104(sp)
    bad2:	                         move.l 104(sp),d0
    bad6:	                         move.l d0,100(sp)
    if (!fp) {
    bada:	                     /-- bne.s baf4 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    badc:	                     |   move.l 124(sp),-(sp)
    bae0:	                     |   pea 168a3 <PutChar+0x1731>
    bae6:	                     |   jsr 14822 <KPrintF>
    baec:	                     |   addq.l #8,sp
        return FALSE;
    baee:	                     |   clr.w d0
    baf0:	/--------------------|-- bra.w bdea <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    baf4:	|                    \-> move.w 19c5c <saveEncoding>,d0
    bafa:	|                        move.l d0,d0
    bafc:	|                        move.b d0,19c5a <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    bb02:	|                        move.w 19c5c <saveEncoding>,d0
    bb08:	|                        lsr.w #8,d0
    bb0a:	|                        move.l d0,d0
    bb0c:	|                        move.b d0,19c5b <encode2>

    while (*checker) {
    bb12:	|                 /----- bra.s bb76 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    bb14:	|              /--|----> move.l 100(sp),30(sp)
    bb1a:	|              |  |      move.l 19b58 <DOSBase>,d0
    bb20:	|              |  |      movea.l d0,a6
    bb22:	|              |  |      move.l 30(sp),d1
    bb26:	|              |  |      jsr -306(a6)
    bb2a:	|              |  |      move.l d0,26(sp)
    bb2e:	|              |  |      move.l 26(sp),d1
    bb32:	|              |  |      movea.l 116(sp),a0
    bb36:	|              |  |      move.b (a0),d0
    bb38:	|              |  |      ext.w d0
    bb3a:	|              |  |      movea.w d0,a0
    bb3c:	|              |  |      cmpa.l d1,a0
    bb3e:	|              |  |  /-- beq.s bb72 <fileToStack+0xec>
            Close(fp);
    bb40:	|              |  |  |   move.l 100(sp),22(sp)
    bb46:	|              |  |  |   move.l 19b58 <DOSBase>,d0
    bb4c:	|              |  |  |   movea.l d0,a6
    bb4e:	|              |  |  |   move.l 22(sp),d1
    bb52:	|              |  |  |   jsr -36(a6)
    bb56:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    bb5a:	|              |  |  |   move.l 124(sp),-(sp)
    bb5e:	|              |  |  |   pea 168b0 <PutChar+0x173e>
    bb64:	|              |  |  |   jsr 14822 <KPrintF>
    bb6a:	|              |  |  |   addq.l #8,sp
            return FALSE;
    bb6c:	|              |  |  |   clr.w d0
    bb6e:	+--------------|--|--|-- bra.w bdea <fileToStack+0x364>
        }
        checker++;
    bb72:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    bb76:	|              |  \----> movea.l 116(sp),a0
    bb7a:	|              |         move.b (a0),d0
    bb7c:	|              \-------- bne.s bb14 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    bb7e:	|                        move.w 19c5c <saveEncoding>,d0
    bb84:	|  /-------------------- beq.s bbf8 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    bb86:	|  |                     move.l 100(sp),-(sp)
    bb8a:	|  |                     jsr bdf4 <readStringEncoded>
    bb90:	|  |                     addq.l #4,sp
    bb92:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    bb96:	|  |                     pea 168f1 <PutChar+0x177f>
    bb9c:	|  |                     move.l 100(sp),-(sp)
    bba0:	|  |                     jsr 11c86 <strcmp>
    bba6:	|  |                     addq.l #8,sp
    bba8:	|  |                     tst.l d0
    bbaa:	|  |                 /-- beq.s bbde <fileToStack+0x158>
            Close(fp);
    bbac:	|  |                 |   move.l 100(sp),88(sp)
    bbb2:	|  |                 |   move.l 19b58 <DOSBase>,d0
    bbb8:	|  |                 |   movea.l d0,a6
    bbba:	|  |                 |   move.l 88(sp),d1
    bbbe:	|  |                 |   jsr -36(a6)
    bbc2:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    bbc6:	|  |                 |   move.l 124(sp),-(sp)
    bbca:	|  |                 |   pea 16900 <PutChar+0x178e>
    bbd0:	|  |                 |   jsr 14822 <KPrintF>
    bbd6:	|  |                 |   addq.l #8,sp
            return FALSE;
    bbd8:	|  |                 |   clr.w d0
    bbda:	+--|-----------------|-- bra.w bdea <fileToStack+0x364>
        }
        FreeVec(checker);
    bbde:	|  |                 \-> move.l 96(sp),92(sp)
    bbe4:	|  |                     move.l 19b50 <SysBase>,d0
    bbea:	|  |                     movea.l d0,a6
    bbec:	|  |                     movea.l 92(sp),a1
    bbf0:	|  |                     jsr -690(a6)
        checker = NULL;
    bbf4:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    bbf8:	|  >-------------------> move.w 19c5c <saveEncoding>,d0
    bbfe:	|  |     /-------------- beq.w bd32 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    bc02:	|  |     |               move.l 100(sp),76(sp)
    bc08:	|  |     |               move.l 19b58 <DOSBase>,d0
    bc0e:	|  |     |               movea.l d0,a6
    bc10:	|  |     |               move.l 76(sp),d1
    bc14:	|  |     |               jsr -306(a6)
    bc18:	|  |     |               move.l d0,72(sp)
    bc1c:	|  |     |               move.l 72(sp),d0
    bc20:	|  |     |               move.b 19c5a <encode1>,d1
    bc26:	|  |     |               ext.w d1
    bc28:	|  |     |               ext.l d1
    bc2a:	|  |     |               move.l d0,d2
    bc2c:	|  |     |               eor.l d1,d2
    bc2e:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    bc32:	|  |     |               moveq #-1,d0
    bc34:	|  |     |               cmp.l 68(sp),d0
    bc38:	|  |  /--|-------------- beq.w bdc8 <fileToStack+0x342>

            char i = (char) tmp;
    bc3c:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    bc42:	|  |  |  |               move.b 67(sp),d0
    bc46:	|  |  |  |               ext.w d0
    bc48:	|  |  |  |               movea.w d0,a0
    bc4a:	|  |  |  |               moveq #2,d2
    bc4c:	|  |  |  |               cmp.l a0,d2
    bc4e:	|  |  |  |     /-------- beq.s bcca <fileToStack+0x244>
    bc50:	|  |  |  |     |         moveq #2,d0
    bc52:	|  |  |  |     |         cmp.l a0,d0
    bc54:	|  |  |  |  /--|-------- blt.w bd00 <fileToStack+0x27a>
    bc58:	|  |  |  |  |  |         cmpa.w #0,a0
    bc5c:	|  |  |  |  |  |     /-- beq.s bc68 <fileToStack+0x1e2>
    bc5e:	|  |  |  |  |  |     |   moveq #1,d2
    bc60:	|  |  |  |  |  |     |   cmp.l a0,d2
    bc62:	|  |  |  |  |  |  /--|-- beq.s bca4 <fileToStack+0x21e>
    bc64:	|  |  |  |  +--|--|--|-- bra.w bd00 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    bc68:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    bc6c:	|  |  |  |  |  |  |      jsr bdf4 <readStringEncoded>
    bc72:	|  |  |  |  |  |  |      addq.l #4,sp
    bc74:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    bc78:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    bc7c:	|  |  |  |  |  |  |      lea 14(sp),a0
    bc80:	|  |  |  |  |  |  |      move.l a0,-(sp)
    bc82:	|  |  |  |  |  |  |      jsr 129fc <makeTextVar>
    bc88:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    bc8a:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    bc90:	|  |  |  |  |  |  |      move.l 19b50 <SysBase>,d0
    bc96:	|  |  |  |  |  |  |      movea.l d0,a6
    bc98:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    bc9c:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    bca0:	|  |  |  |  |  |  |  /-- bra.w bd58 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    bca4:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    bca8:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    bcae:	|  |  |  |  |  |     |   addq.l #4,sp
    bcb0:	|  |  |  |  |  |     |   move.l d0,-(sp)
    bcb2:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    bcb6:	|  |  |  |  |  |     |   lea 18(sp),a0
    bcba:	|  |  |  |  |  |     |   move.l a0,-(sp)
    bcbc:	|  |  |  |  |  |     |   jsr 130cc <setVariable>
    bcc2:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    bcc6:	|  |  |  |  |  |     +-- bra.w bd58 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    bcca:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    bcd0:	|  |  |  |  |        |   move.l 19b58 <DOSBase>,d0
    bcd6:	|  |  |  |  |        |   movea.l d0,a6
    bcd8:	|  |  |  |  |        |   move.l 62(sp),d1
    bcdc:	|  |  |  |  |        |   jsr -306(a6)
    bce0:	|  |  |  |  |        |   move.l d0,58(sp)
    bce4:	|  |  |  |  |        |   move.l 58(sp),d0
    bce8:	|  |  |  |  |        |   move.l d0,-(sp)
    bcea:	|  |  |  |  |        |   pea 1 <_start+0x1>
    bcee:	|  |  |  |  |        |   lea 18(sp),a0
    bcf2:	|  |  |  |  |        |   move.l a0,-(sp)
    bcf4:	|  |  |  |  |        |   jsr 130cc <setVariable>
    bcfa:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    bcfe:	|  |  |  |  |        +-- bra.s bd58 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    bd00:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    bd04:	|  |  |  |           |   pea 16982 <PutChar+0x1810>
    bd0a:	|  |  |  |           |   jsr 14822 <KPrintF>
    bd10:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    bd12:	|  |  |  |           |   move.l 100(sp),46(sp)
    bd18:	|  |  |  |           |   move.l 19b58 <DOSBase>,d0
    bd1e:	|  |  |  |           |   movea.l d0,a6
    bd20:	|  |  |  |           |   move.l 46(sp),d1
    bd24:	|  |  |  |           |   jsr -36(a6)
    bd28:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    bd2c:	|  |  |  |           |   clr.w d0
    bd2e:	+--|--|--|-----------|-- bra.w bdea <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    bd32:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    bd36:	|  |  |              |   jsr beba <readTextPlain>
    bd3c:	|  |  |              |   addq.l #4,sp
    bd3e:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    bd42:	|  |  |        /-----|-- beq.w bdcc <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    bd46:	|  |  |        |     |   move.l 80(sp),-(sp)
    bd4a:	|  |  |        |     |   lea 14(sp),a0
    bd4e:	|  |  |        |     |   move.l a0,-(sp)
    bd50:	|  |  |        |     |   jsr 129fc <makeTextVar>
    bd56:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    bd58:	|  |  |        |     \-> movea.l 128(sp),a0
    bd5c:	|  |  |        |         move.l (a0),d0
    bd5e:	|  |  |        |  /----- bne.s bd8e <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    bd60:	|  |  |        |  |      move.l 128(sp),d0
    bd64:	|  |  |        |  |      move.l d0,-(sp)
    bd66:	|  |  |        |  |      lea 14(sp),a0
    bd6a:	|  |  |        |  |      move.l a0,-(sp)
    bd6c:	|  |  |        |  |      jsr 1209c <addVarToStackQuick>
    bd72:	|  |  |        |  |      addq.l #8,sp
    bd74:	|  |  |        |  |      tst.w d0
    bd76:	|  |  |        |  |  /-- bne.s bd7c <fileToStack+0x2f6>
    bd78:	|  |  |        |  |  |   clr.w d0
    bd7a:	+--|--|--------|--|--|-- bra.s bdea <fileToStack+0x364>
            sH->last = sH->first;
    bd7c:	|  |  |        |  |  \-> movea.l 128(sp),a0
    bd80:	|  |  |        |  |      move.l (a0),d0
    bd82:	|  |  |        |  |      movea.l 128(sp),a0
    bd86:	|  |  |        |  |      move.l d0,4(a0)
    bd8a:	|  +--|--------|--|----- bra.w bbf8 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    bd8e:	|  |  |        |  \----> movea.l 128(sp),a0
    bd92:	|  |  |        |         move.l 4(a0),d0
    bd96:	|  |  |        |         addq.l #8,d0
    bd98:	|  |  |        |         move.l d0,-(sp)
    bd9a:	|  |  |        |         lea 14(sp),a0
    bd9e:	|  |  |        |         move.l a0,-(sp)
    bda0:	|  |  |        |         jsr 1209c <addVarToStackQuick>
    bda6:	|  |  |        |         addq.l #8,sp
    bda8:	|  |  |        |         tst.w d0
    bdaa:	|  |  |        |     /-- bne.s bdb0 <fileToStack+0x32a>
    bdac:	|  |  |        |     |   clr.w d0
    bdae:	+--|--|--------|-----|-- bra.s bdea <fileToStack+0x364>
            sH->last = sH->last->next;
    bdb0:	|  |  |        |     \-> movea.l 128(sp),a0
    bdb4:	|  |  |        |         movea.l 4(a0),a0
    bdb8:	|  |  |        |         move.l 8(a0),d0
    bdbc:	|  |  |        |         movea.l 128(sp),a0
    bdc0:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    bdc4:	|  \--|--------|-------- bra.w bbf8 <fileToStack+0x172>
            if (tmp == -1) break;
    bdc8:	|     \--------|-------> nop
    bdca:	|              |     /-- bra.s bdce <fileToStack+0x348>
            if (!line) break;
    bdcc:	|              \-----|-> nop
        }
    }
    Close(fp);
    bdce:	|                    \-> move.l 100(sp),38(sp)
    bdd4:	|                        move.l 19b58 <DOSBase>,d0
    bdda:	|                        movea.l d0,a6
    bddc:	|                        move.l 38(sp),d1
    bde0:	|                        jsr -36(a6)
    bde4:	|                        move.l d0,34(sp)
    return TRUE;
    bde8:	|                        moveq #1,d0
}
    bdea:	\----------------------> move.l (sp)+,d2
    bdec:	                         movea.l (sp)+,a6
    bdee:	                         lea 112(sp),sp
    bdf2:	                         rts

0000bdf4 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    bdf4:	          lea -32(sp),sp
    bdf8:	          move.l a6,-(sp)
    bdfa:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    bdfc:	          move.l 44(sp),-(sp)
    be00:	          jsr 6bc <get2bytes>
    be06:	          addq.l #4,sp
    be08:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    be0c:	          move.l 32(sp),d0
    be10:	          addq.l #1,d0
    be12:	          move.l d0,28(sp)
    be16:	          clr.l 24(sp)
    be1a:	          move.l 19b50 <SysBase>,d0
    be20:	          movea.l d0,a6
    be22:	          move.l 28(sp),d0
    be26:	          move.l 24(sp),d1
    be2a:	          jsr -684(a6)
    be2e:	          move.l d0,20(sp)
    be32:	          move.l 20(sp),d0
    be36:	          move.l d0,16(sp)
    if (!s) return NULL;
    be3a:	      /-- bne.s be40 <readStringEncoded+0x4c>
    be3c:	      |   moveq #0,d0
    be3e:	/-----|-- bra.s beb0 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    be40:	|     \-> clr.l 36(sp)
    be44:	|     /-- bra.s be96 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    be46:	|  /--|-> move.l 44(sp),12(sp)
    be4c:	|  |  |   move.l 19b58 <DOSBase>,d0
    be52:	|  |  |   movea.l d0,a6
    be54:	|  |  |   move.l 12(sp),d1
    be58:	|  |  |   jsr -306(a6)
    be5c:	|  |  |   move.l d0,8(sp)
    be60:	|  |  |   move.l 8(sp),d0
    be64:	|  |  |   move.l d0,d1
    be66:	|  |  |   move.b 19c5a <encode1>,d2
    be6c:	|  |  |   move.l 36(sp),d0
    be70:	|  |  |   movea.l 16(sp),a0
    be74:	|  |  |   adda.l d0,a0
    be76:	|  |  |   move.b d1,d0
    be78:	|  |  |   eor.b d2,d0
    be7a:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    be7c:	|  |  |   move.b 19c5a <encode1>,d0
    be82:	|  |  |   move.b d0,d1
    be84:	|  |  |   move.b 19c5b <encode2>,d0
    be8a:	|  |  |   add.b d1,d0
    be8c:	|  |  |   move.b d0,19c5a <encode1>
    for (a = 0; a < len; a++) {
    be92:	|  |  |   addq.l #1,36(sp)
    be96:	|  |  \-> move.l 36(sp),d0
    be9a:	|  |      cmp.l 32(sp),d0
    be9e:	|  \----- blt.s be46 <readStringEncoded+0x52>
    }
    s[len] = 0;
    bea0:	|         move.l 32(sp),d0
    bea4:	|         movea.l 16(sp),a0
    bea8:	|         adda.l d0,a0
    beaa:	|         clr.b (a0)
    return s;
    beac:	|         move.l 16(sp),d0
}
    beb0:	\-------> move.l (sp)+,d2
    beb2:	          movea.l (sp)+,a6
    beb4:	          lea 32(sp),sp
    beb8:	          rts

0000beba <readTextPlain>:

char *readTextPlain(BPTR fp) {
    beba:	             lea -104(sp),sp
    bebe:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    bec2:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    bec6:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    becc:	             move.l 124(sp),106(sp)
    bed2:	             clr.l 102(sp)
    bed6:	             clr.l 98(sp)
    beda:	             move.l 19b58 <DOSBase>,d0
    bee0:	             movea.l d0,a6
    bee2:	             move.l 106(sp),d1
    bee6:	             move.l 102(sp),d2
    beea:	             move.l 98(sp),d3
    beee:	             jsr -66(a6)
    bef2:	             move.l d0,94(sp)
    bef6:	             move.l 94(sp),d0
    befa:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    befe:	   /-------- bra.s bf42 <readTextPlain+0x88>
        tmp = FGetC(fp);
    bf00:	/--|-------> move.l 124(sp),22(sp)
    bf06:	|  |         move.l 19b58 <DOSBase>,d0
    bf0c:	|  |         movea.l d0,a6
    bf0e:	|  |         move.l 22(sp),d1
    bf12:	|  |         jsr -306(a6)
    bf16:	|  |         move.l d0,18(sp)
    bf1a:	|  |         move.l 18(sp),d0
    bf1e:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    bf22:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    bf28:	|  |         cmpi.b #10,17(sp)
    bf2e:	|  |  /----- beq.s bf38 <readTextPlain+0x7e>
    bf30:	|  |  |      moveq #-1,d0
    bf32:	|  |  |      cmp.l 110(sp),d0
    bf36:	|  |  |  /-- bne.s bf3e <readTextPlain+0x84>
            keepGoing = FALSE;
    bf38:	|  |  \--|-> clr.w 114(sp)
    bf3c:	|  +-----|-- bra.s bf42 <readTextPlain+0x88>
        } else {
            stringSize++;
    bf3e:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    bf42:	|  \-------> tst.w 114(sp)
    bf46:	\----------- bne.s bf00 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    bf48:	             tst.l 116(sp)
    bf4c:	         /-- bne.s bf5c <readTextPlain+0xa2>
    bf4e:	         |   moveq #-1,d0
    bf50:	         |   cmp.l 110(sp),d0
    bf54:	         +-- bne.s bf5c <readTextPlain+0xa2>
        return NULL;
    bf56:	         |   moveq #0,d0
    bf58:	      /--|-- bra.w c042 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    bf5c:	      |  \-> move.l 124(sp),86(sp)
    bf62:	      |      move.l 90(sp),82(sp)
    bf68:	      |      moveq #-1,d0
    bf6a:	      |      move.l d0,78(sp)
    bf6e:	      |      move.l 19b58 <DOSBase>,d0
    bf74:	      |      movea.l d0,a6
    bf76:	      |      move.l 86(sp),d1
    bf7a:	      |      move.l 82(sp),d2
    bf7e:	      |      move.l 78(sp),d3
    bf82:	      |      jsr -66(a6)
    bf86:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    bf8a:	      |      move.l 116(sp),d0
    bf8e:	      |      addq.l #1,d0
    bf90:	      |      move.l d0,70(sp)
    bf94:	      |      clr.l 66(sp)
    bf98:	      |      move.l 19b50 <SysBase>,d0
    bf9e:	      |      movea.l d0,a6
    bfa0:	      |      move.l 70(sp),d0
    bfa4:	      |      move.l 66(sp),d1
    bfa8:	      |      jsr -684(a6)
    bfac:	      |      move.l d0,62(sp)
    bfb0:	      |      move.l 62(sp),d0
    bfb4:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    bfb8:	      |  /-- bne.s bfc0 <readTextPlain+0x106>
    bfba:	      |  |   moveq #0,d0
    bfbc:	      +--|-- bra.w c042 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    bfc0:	      |  \-> move.l 124(sp),54(sp)
    bfc6:	      |      move.l 58(sp),50(sp)
    bfcc:	      |      moveq #1,d0
    bfce:	      |      move.l d0,46(sp)
    bfd2:	      |      move.l 116(sp),42(sp)
    bfd8:	      |      move.l 19b58 <DOSBase>,d0
    bfde:	      |      movea.l d0,a6
    bfe0:	      |      move.l 54(sp),d1
    bfe4:	      |      move.l 50(sp),d2
    bfe8:	      |      move.l 46(sp),d3
    bfec:	      |      move.l 42(sp),d4
    bff0:	      |      jsr -324(a6)
    bff4:	      |      move.l d0,38(sp)
    bff8:	      |      move.l 38(sp),d0
    bffc:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    c000:	      |      move.l 34(sp),d0
    c004:	      |      cmp.l 116(sp),d0
    c008:	      |  /-- beq.s c018 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    c00a:	      |  |   pea 169b7 <PutChar+0x1845>
    c010:	      |  |   jsr 14822 <KPrintF>
    c016:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    c018:	      |  \-> move.l 124(sp),30(sp)
    c01e:	      |      move.l 19b58 <DOSBase>,d0
    c024:	      |      movea.l d0,a6
    c026:	      |      move.l 30(sp),d1
    c02a:	      |      jsr -306(a6)
    c02e:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    c032:	      |      move.l 116(sp),d0
    c036:	      |      movea.l 58(sp),a0
    c03a:	      |      adda.l d0,a0
    c03c:	      |      clr.b (a0)
    }

    return reply;
    c03e:	      |      move.l 58(sp),d0
}
    c042:	      \----> movem.l (sp)+,d2-d4/a6
    c046:	             lea 104(sp),sp
    c04a:	             rts

0000c04c <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    c04c:	                      lea -144(sp),sp
    c050:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    c054:	                      move.l 160(sp),148(sp)
    c05a:	                      move.l #1006,144(sp)
    c062:	                      move.l 19b58 <DOSBase>,d0
    c068:	                      movea.l d0,a6
    c06a:	                      move.l 148(sp),d1
    c06e:	                      move.l 144(sp),d2
    c072:	                      jsr -30(a6)
    c076:	                      move.l d0,140(sp)
    c07a:	                      move.l 140(sp),d0
    c07e:	                      move.l d0,136(sp)

    if (!fp) {
    c082:	                  /-- bne.s c09c <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    c084:	                  |   move.l 160(sp),-(sp)
    c088:	                  |   pea 169d8 <PutChar+0x1866>
    c08e:	                  |   jsr 14822 <KPrintF>
    c094:	                  |   addq.l #8,sp
        return FALSE;
    c096:	                  |   clr.w d0
    c098:	/-----------------|-- bra.w c358 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    c09c:	|                 \-> movea.l 164(sp),a0
    c0a0:	|                     movea.l 4(a0),a0
    c0a4:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    c0a8:	|                     move.w 19c5c <saveEncoding>,d0
    c0ae:	|                     move.l d0,d0
    c0b0:	|                     move.b d0,19c5a <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    c0b6:	|                     move.w 19c5c <saveEncoding>,d0
    c0bc:	|                     lsr.w #8,d0
    c0be:	|                     move.l d0,d0
    c0c0:	|                     move.b d0,19c5b <encode2>

    if (saveEncoding) {
    c0c6:	|                     move.w 19c5c <saveEncoding>,d0
    c0cc:	|                 /-- beq.s c11e <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    c0ce:	|                 |   move.l 136(sp),116(sp)
    c0d4:	|                 |   move.l #92274,112(sp)
    c0dc:	|                 |   moveq #99,d0
    c0de:	|                 |   not.b d0
    c0e0:	|                 |   add.l sp,d0
    c0e2:	|                 |   addi.l #-144,d0
    c0e8:	|                 |   move.l d0,108(sp)
    c0ec:	|                 |   move.l 19b58 <DOSBase>,d0
    c0f2:	|                 |   movea.l d0,a6
    c0f4:	|                 |   move.l 116(sp),d1
    c0f8:	|                 |   move.l 112(sp),d2
    c0fc:	|                 |   move.l 108(sp),d3
    c100:	|                 |   jsr -354(a6)
    c104:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    c108:	|                 |   move.l 136(sp),-(sp)
    c10c:	|                 |   pea 168f1 <PutChar+0x177f>
    c112:	|                 |   jsr c362 <writeStringEncoded>
    c118:	|                 |   addq.l #8,sp
    c11a:	|  /--------------|-- bra.w c330 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    c11e:	|  |              \-> move.l 136(sp),132(sp)
    c124:	|  |                  move.l #92300,128(sp)
    c12c:	|  |                  moveq #99,d1
    c12e:	|  |                  not.b d1
    c130:	|  |                  add.l sp,d1
    c132:	|  |                  addi.l #-144,d1
    c138:	|  |                  move.l d1,124(sp)
    c13c:	|  |                  move.l 19b58 <DOSBase>,d0
    c142:	|  |                  movea.l d0,a6
    c144:	|  |                  move.l 132(sp),d1
    c148:	|  |                  move.l 128(sp),d2
    c14c:	|  |                  move.l 124(sp),d3
    c150:	|  |                  jsr -354(a6)
    c154:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    c158:	|  +----------------- bra.w c330 <stackToFile+0x2e4>
        if (saveEncoding) {
    c15c:	|  |  /-------------> move.w 19c5c <saveEncoding>,d0
    c162:	|  |  |     /-------- beq.w c2b4 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    c166:	|  |  |     |         movea.l 152(sp),a0
    c16a:	|  |  |     |         move.l (a0),d0
    c16c:	|  |  |     |         moveq #1,d1
    c16e:	|  |  |     |         cmp.l d0,d1
    c170:	|  |  |     |     /-- beq.s c1c0 <stackToFile+0x174>
    c172:	|  |  |     |     |   moveq #3,d1
    c174:	|  |  |     |     |   cmp.l d0,d1
    c176:	|  |  |     |  /--|-- bne.w c282 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    c17a:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    c180:	|  |  |     |  |  |   move.b 19c5a <encode1>,d0
    c186:	|  |  |     |  |  |   ext.w d0
    c188:	|  |  |     |  |  |   movea.w d0,a0
    c18a:	|  |  |     |  |  |   move.l a0,72(sp)
    c18e:	|  |  |     |  |  |   move.l 19b58 <DOSBase>,d0
    c194:	|  |  |     |  |  |   movea.l d0,a6
    c196:	|  |  |     |  |  |   move.l 76(sp),d1
    c19a:	|  |  |     |  |  |   move.l 72(sp),d2
    c19e:	|  |  |     |  |  |   jsr -312(a6)
    c1a2:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    c1a6:	|  |  |     |  |  |   movea.l 152(sp),a0
    c1aa:	|  |  |     |  |  |   move.l 4(a0),d0
    c1ae:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    c1b2:	|  |  |     |  |  |   move.l d0,-(sp)
    c1b4:	|  |  |     |  |  |   jsr c362 <writeStringEncoded>
    c1ba:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    c1bc:	|  |  |  /--|--|--|-- bra.w c326 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    c1c0:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    c1c4:	|  |  |  |  |  |      move.l 4(a0),d0
    c1c8:	|  |  |  |  |  |  /-- bmi.s c238 <stackToFile+0x1ec>
    c1ca:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    c1ce:	|  |  |  |  |  |  |   move.l 4(a0),d0
    c1d2:	|  |  |  |  |  |  |   cmpi.l #255,d0
    c1d8:	|  |  |  |  |  |  +-- bgt.s c238 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    c1da:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    c1e0:	|  |  |  |  |  |  |   move.b 19c5a <encode1>,d0
    c1e6:	|  |  |  |  |  |  |   eori.b #2,d0
    c1ea:	|  |  |  |  |  |  |   ext.w d0
    c1ec:	|  |  |  |  |  |  |   movea.w d0,a0
    c1ee:	|  |  |  |  |  |  |   move.l a0,60(sp)
    c1f2:	|  |  |  |  |  |  |   move.l 19b58 <DOSBase>,d0
    c1f8:	|  |  |  |  |  |  |   movea.l d0,a6
    c1fa:	|  |  |  |  |  |  |   move.l 64(sp),d1
    c1fe:	|  |  |  |  |  |  |   move.l 60(sp),d2
    c202:	|  |  |  |  |  |  |   jsr -312(a6)
    c206:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    c20a:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    c210:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    c214:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    c21a:	|  |  |  |  |  |  |   move.l 19b58 <DOSBase>,d0
    c220:	|  |  |  |  |  |  |   movea.l d0,a6
    c222:	|  |  |  |  |  |  |   move.l 52(sp),d1
    c226:	|  |  |  |  |  |  |   move.l 48(sp),d2
    c22a:	|  |  |  |  |  |  |   jsr -312(a6)
    c22e:	|  |  |  |  |  |  |   move.l d0,44(sp)
    c232:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    c234:	|  |  |  +--|--|--|-- bra.w c326 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    c238:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    c23e:	|  |  |  |  |  |      move.b 19c5a <encode1>,d0
    c244:	|  |  |  |  |  |      eori.b #1,d0
    c248:	|  |  |  |  |  |      ext.w d0
    c24a:	|  |  |  |  |  |      movea.w d0,a0
    c24c:	|  |  |  |  |  |      move.l a0,36(sp)
    c250:	|  |  |  |  |  |      move.l 19b58 <DOSBase>,d0
    c256:	|  |  |  |  |  |      movea.l d0,a6
    c258:	|  |  |  |  |  |      move.l 40(sp),d1
    c25c:	|  |  |  |  |  |      move.l 36(sp),d2
    c260:	|  |  |  |  |  |      jsr -312(a6)
    c264:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    c268:	|  |  |  |  |  |      movea.l 152(sp),a0
    c26c:	|  |  |  |  |  |      move.l 4(a0),d0
    c270:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    c274:	|  |  |  |  |  |      move.l d0,-(sp)
    c276:	|  |  |  |  |  |      jsr 958 <put4bytes>
    c27c:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    c27e:	|  |  |  +--|--|----- bra.w c326 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    c282:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    c286:	|  |  |  |  |         pea 169ea <PutChar+0x1878>
    c28c:	|  |  |  |  |         jsr 14822 <KPrintF>
    c292:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    c294:	|  |  |  |  |         move.l 136(sp),28(sp)
    c29a:	|  |  |  |  |         move.l 19b58 <DOSBase>,d0
    c2a0:	|  |  |  |  |         movea.l d0,a6
    c2a2:	|  |  |  |  |         move.l 28(sp),d1
    c2a6:	|  |  |  |  |         jsr -36(a6)
    c2aa:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    c2ae:	|  |  |  |  |         clr.w d0
    c2b0:	+--|--|--|--|-------- bra.w c358 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    c2b4:	|  |  |  |  \-------> move.l 152(sp),d0
    c2b8:	|  |  |  |            move.l d0,-(sp)
    c2ba:	|  |  |  |            jsr 12db0 <getTextFromAnyVar>
    c2c0:	|  |  |  |            addq.l #4,sp
    c2c2:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    c2c6:	|  |  |  |     /----- beq.s c33a <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    c2c8:	|  |  |  |     |      movea.l 100(sp),a0
    c2cc:	|  |  |  |     |      move.b (a0),d0
    c2ce:	|  |  |  |     |      ext.w d0
    c2d0:	|  |  |  |     |      movea.w d0,a0
    c2d2:	|  |  |  |     |      move.l a0,12(sp)
    c2d6:	|  |  |  |     |      move.l 136(sp),96(sp)
    c2dc:	|  |  |  |     |      move.l #92742,92(sp)
    c2e4:	|  |  |  |     |      moveq #99,d0
    c2e6:	|  |  |  |     |      not.b d0
    c2e8:	|  |  |  |     |      add.l sp,d0
    c2ea:	|  |  |  |     |      addi.l #-144,d0
    c2f0:	|  |  |  |     |      move.l d0,88(sp)
    c2f4:	|  |  |  |     |      move.l 19b58 <DOSBase>,d0
    c2fa:	|  |  |  |     |      movea.l d0,a6
    c2fc:	|  |  |  |     |      move.l 96(sp),d1
    c300:	|  |  |  |     |      move.l 92(sp),d2
    c304:	|  |  |  |     |      move.l 88(sp),d3
    c308:	|  |  |  |     |      jsr -354(a6)
    c30c:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    c310:	|  |  |  |     |      move.l 100(sp),80(sp)
    c316:	|  |  |  |     |      move.l 19b50 <SysBase>,d0
    c31c:	|  |  |  |     |      movea.l d0,a6
    c31e:	|  |  |  |     |      movea.l 80(sp),a1
    c322:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    c326:	|  |  |  \-----|----> movea.l 152(sp),a0
    c32a:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    c330:	|  \--|--------|----> tst.l 152(sp)
    c334:	|     \--------|----- bne.w c15c <stackToFile+0x110>
    c338:	|              |  /-- bra.s c33c <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    c33a:	|              \--|-> nop
    }
    Close(fp);
    c33c:	|                 \-> move.l 136(sp),20(sp)
    c342:	|                     move.l 19b58 <DOSBase>,d0
    c348:	|                     movea.l d0,a6
    c34a:	|                     move.l 20(sp),d1
    c34e:	|                     jsr -36(a6)
    c352:	|                     move.l d0,16(sp)
    return TRUE;
    c356:	|                     moveq #1,d0
}
    c358:	\-------------------> movem.l (sp)+,d2-d3/a6
    c35c:	                      lea 144(sp),sp
    c360:	                      rts

0000c362 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    c362:	       lea -20(sp),sp
    c366:	       move.l a6,-(sp)
    c368:	       move.l d2,-(sp)
	int a, len = strlen (s);
    c36a:	       move.l 32(sp),-(sp)
    c36e:	       jsr 11cc6 <strlen>
    c374:	       addq.l #4,sp
    c376:	       move.l d0,20(sp)

	put2bytes (len, fp);
    c37a:	       move.l 36(sp),-(sp)
    c37e:	       move.l 24(sp),-(sp)
    c382:	       jsr 8d0 <put2bytes>
    c388:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    c38a:	       clr.l 24(sp)
    c38e:	   /-- bra.s c3e4 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    c390:	/--|-> move.l 36(sp),16(sp)
    c396:	|  |   move.l 24(sp),d0
    c39a:	|  |   movea.l 32(sp),a0
    c39e:	|  |   adda.l d0,a0
    c3a0:	|  |   move.b (a0),d1
    c3a2:	|  |   move.b 19c5a <encode1>,d0
    c3a8:	|  |   eor.b d1,d0
    c3aa:	|  |   ext.w d0
    c3ac:	|  |   movea.w d0,a0
    c3ae:	|  |   move.l a0,12(sp)
    c3b2:	|  |   move.l 19b58 <DOSBase>,d0
    c3b8:	|  |   movea.l d0,a6
    c3ba:	|  |   move.l 16(sp),d1
    c3be:	|  |   move.l 12(sp),d2
    c3c2:	|  |   jsr -312(a6)
    c3c6:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    c3ca:	|  |   move.b 19c5a <encode1>,d0
    c3d0:	|  |   move.b d0,d1
    c3d2:	|  |   move.b 19c5b <encode2>,d0
    c3d8:	|  |   add.b d1,d0
    c3da:	|  |   move.b d0,19c5a <encode1>
	for (a = 0; a < len; a ++) {
    c3e0:	|  |   addq.l #1,24(sp)
    c3e4:	|  \-> move.l 24(sp),d0
    c3e8:	|      cmp.l 20(sp),d0
    c3ec:	\----- blt.s c390 <writeStringEncoded+0x2e>
	}
}
    c3ee:	       nop
    c3f0:	       nop
    c3f2:	       move.l (sp)+,d2
    c3f4:	       movea.l (sp)+,a6
    c3f6:	       lea 20(sp),sp
    c3fa:	       rts

0000c3fc <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    c3fc:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    c3fe:	                   tst.l 8(sp)
    c402:	               /-- bne.s c408 <failSecurityCheck+0xc>
    c404:	               |   moveq #1,d0
    c406:	/--------------|-- bra.s c486 <failSecurityCheck+0x8a>

	int a = 0;
    c408:	|              \-> clr.l (sp)

	while (fn[a]) {
    c40a:	|     /----------- bra.s c478 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    c40c:	|  /--|----------> move.l (sp),d0
    c40e:	|  |  |            movea.l 8(sp),a0
    c412:	|  |  |            adda.l d0,a0
    c414:	|  |  |            move.b (a0),d0
    c416:	|  |  |            ext.w d0
    c418:	|  |  |            movea.w d0,a0
    c41a:	|  |  |            moveq #124,d0
    c41c:	|  |  |            cmp.l a0,d0
    c41e:	|  |  |     /----- beq.s c460 <failSecurityCheck+0x64>
    c420:	|  |  |     |      moveq #124,d1
    c422:	|  |  |     |      cmp.l a0,d1
    c424:	|  |  |  /--|----- blt.s c476 <failSecurityCheck+0x7a>
    c426:	|  |  |  |  |      moveq #92,d0
    c428:	|  |  |  |  |      cmp.l a0,d0
    c42a:	|  |  |  |  +----- beq.s c460 <failSecurityCheck+0x64>
    c42c:	|  |  |  |  |      moveq #92,d1
    c42e:	|  |  |  |  |      cmp.l a0,d1
    c430:	|  |  |  +--|----- blt.s c476 <failSecurityCheck+0x7a>
    c432:	|  |  |  |  |      moveq #60,d0
    c434:	|  |  |  |  |      cmp.l a0,d0
    c436:	|  |  |  |  |  /-- blt.s c456 <failSecurityCheck+0x5a>
    c438:	|  |  |  |  |  |   moveq #34,d1
    c43a:	|  |  |  |  |  |   cmp.l a0,d1
    c43c:	|  |  |  +--|--|-- bgt.s c476 <failSecurityCheck+0x7a>
    c43e:	|  |  |  |  |  |   moveq #-34,d1
    c440:	|  |  |  |  |  |   add.l a0,d1
    c442:	|  |  |  |  |  |   move.l #83894529,d0
    c448:	|  |  |  |  |  |   lsr.l d1,d0
    c44a:	|  |  |  |  |  |   moveq #1,d1
    c44c:	|  |  |  |  |  |   and.l d1,d0
    c44e:	|  |  |  |  |  |   sne d0
    c450:	|  |  |  |  |  |   neg.b d0
    c452:	|  |  |  |  +--|-- bne.s c460 <failSecurityCheck+0x64>
    c454:	|  |  |  +--|--|-- bra.s c476 <failSecurityCheck+0x7a>
    c456:	|  |  |  |  |  \-> lea -62(a0),a0
    c45a:	|  |  |  |  |      moveq #1,d0
    c45c:	|  |  |  |  |      cmp.l a0,d0
    c45e:	|  |  |  +--|----- bcs.s c476 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    c460:	|  |  |  |  \----> move.l 8(sp),-(sp)
    c464:	|  |  |  |         pea 16a4a <PutChar+0x18d8>
    c46a:	|  |  |  |         jsr 14822 <KPrintF>
    c470:	|  |  |  |         addq.l #8,sp
				return TRUE;
    c472:	|  |  |  |         moveq #1,d0
    c474:	+--|--|--|-------- bra.s c486 <failSecurityCheck+0x8a>
		}
		a++;
    c476:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    c478:	|  |  \----------> move.l (sp),d0
    c47a:	|  |               movea.l 8(sp),a0
    c47e:	|  |               adda.l d0,a0
    c480:	|  |               move.b (a0),d0
    c482:	|  \-------------- bne.s c40c <failSecurityCheck+0x10>
	}
	return FALSE;
    c484:	|                  clr.w d0
}
    c486:	\----------------> addq.l #4,sp
    c488:	                   rts

0000c48a <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    c48a:	             lea -24(sp),sp
    c48e:	             move.l a6,-(sp)
    c490:	             move.l 40(sp),d0
    c494:	             move.w d0,d0
    c496:	             move.w d0,6(sp)
	int fileNum = -1;
    c49a:	             moveq #-1,d0
    c49c:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    c4a0:	             jsr 4600 <killSpeechTimers>

	switch (numParams) {
    c4a6:	             moveq #2,d0
    c4a8:	             cmp.l 32(sp),d0
    c4ac:	      /----- beq.s c4f0 <sayCore+0x66>
    c4ae:	      |      moveq #3,d0
    c4b0:	      |      cmp.l 32(sp),d0
    c4b4:	/-----|----- bne.w c5d2 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    c4b8:	|     |      movea.l 36(sp),a0
    c4bc:	|     |      move.l 24(a0),d0
    c4c0:	|     |      move.l d0,-(sp)
    c4c2:	|     |      pea 5 <_start+0x5>
    c4c6:	|     |      lea 20(sp),a0
    c4ca:	|     |      move.l a0,-(sp)
    c4cc:	|     |      jsr 127da <getValueType>
    c4d2:	|     |      lea 12(sp),sp
    c4d6:	|     |      tst.w d0
    c4d8:	|     |  /-- bne.s c4e0 <sayCore+0x56>
    c4da:	|     |  |   moveq #1,d0
    c4dc:	|  /--|--|-- bra.w c5e2 <sayCore+0x158>
			trimStack (&fun -> stack);
    c4e0:	|  |  |  \-> moveq #24,d0
    c4e2:	|  |  |      add.l 36(sp),d0
    c4e6:	|  |  |      move.l d0,-(sp)
    c4e8:	|  |  |      jsr 1315e <trimStack>
    c4ee:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    c4f0:	|  |  \----> movea.l 36(sp),a0
    c4f4:	|  |         move.l 24(a0),d0
    c4f8:	|  |         move.l d0,-(sp)
    c4fa:	|  |         jsr 12db0 <getTextFromAnyVar>
    c500:	|  |         addq.l #4,sp
    c502:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    c506:	|  |     /-- bne.s c50e <sayCore+0x84>
    c508:	|  |     |   moveq #1,d0
    c50a:	|  +-----|-- bra.w c5e2 <sayCore+0x158>
			trimStack (&fun -> stack);
    c50e:	|  |     \-> moveq #24,d0
    c510:	|  |         add.l 36(sp),d0
    c514:	|  |         move.l d0,-(sp)
    c516:	|  |         jsr 1315e <trimStack>
    c51c:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c51e:	|  |         movea.l 36(sp),a0
    c522:	|  |         move.l 24(a0),d0
    c526:	|  |         move.l d0,-(sp)
    c528:	|  |         pea 7 <_start+0x7>
    c52c:	|  |         lea 16(sp),a0
    c530:	|  |         move.l a0,-(sp)
    c532:	|  |         jsr 127da <getValueType>
    c538:	|  |         lea 12(sp),sp
    c53c:	|  |         tst.w d0
    c53e:	|  |     /-- bne.s c546 <sayCore+0xbc>
    c540:	|  |     |   moveq #1,d0
    c542:	|  +-----|-- bra.w c5e2 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c546:	|  |     \-> movea.l 36(sp),a0
    c54a:	|  |         move.l 24(a0),d0
    c54e:	|  |         move.l d0,-(sp)
    c550:	|  |         pea 7 <_start+0x7>
    c554:	|  |         lea 16(sp),a0
    c558:	|  |         move.l a0,-(sp)
    c55a:	|  |         jsr 127da <getValueType>
    c560:	|  |         lea 12(sp),sp
    c564:	|  |         tst.w d0
    c566:	|  |     /-- bne.s c56c <sayCore+0xe2>
    c568:	|  |     |   moveq #1,d0
    c56a:	|  +-----|-- bra.s c5e2 <sayCore+0x158>
			trimStack (&fun -> stack);
    c56c:	|  |     \-> moveq #24,d0
    c56e:	|  |         add.l 36(sp),d0
    c572:	|  |         move.l d0,-(sp)
    c574:	|  |         jsr 1315e <trimStack>
    c57a:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    c57c:	|  |         movea.w 6(sp),a0
    c580:	|  |         move.l 12(sp),d1
    c584:	|  |         move.l 8(sp),d0
    c588:	|  |         move.l a0,-(sp)
    c58a:	|  |         move.l d1,-(sp)
    c58c:	|  |         move.l d0,-(sp)
    c58e:	|  |         move.l 36(sp),-(sp)
    c592:	|  |         jsr 6574 <wrapSpeech>
    c598:	|  |         lea 16(sp),sp
    c59c:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    c5a0:	|  |         movea.l 36(sp),a0
    c5a4:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    c5aa:	|  |         movea.l 36(sp),a0
    c5ae:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    c5b4:	|  |         move.l 24(sp),16(sp)
    c5ba:	|  |         move.l 19b50 <SysBase>,d0
    c5c0:	|  |         movea.l d0,a6
    c5c2:	|  |         movea.l 16(sp),a1
    c5c6:	|  |         jsr -690(a6)
			newText = NULL;
    c5ca:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    c5ce:	|  |         moveq #0,d0
    c5d0:	|  +-------- bra.s c5e2 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    c5d2:	\--|-------> pea 16ad0 <PutChar+0x195e>
    c5d8:	   |         jsr 14822 <KPrintF>
    c5de:	   |         addq.l #4,sp
	return BR_ERROR;
    c5e0:	   |         moveq #1,d0
}
    c5e2:	   \-------> movea.l (sp)+,a6
    c5e4:	             lea 24(sp),sp
    c5e8:	             rts

0000c5ea <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    c5ea:	pea 1 <_start+0x1>
    c5ee:	move.l 12(sp),-(sp)
    c5f2:	move.l 12(sp),-(sp)
    c5f6:	jsr c48a <sayCore>
    c5fc:	lea 12(sp),sp
}
    c600:	rts

0000c602 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    c602:	clr.l -(sp)
    c604:	move.l 12(sp),-(sp)
    c608:	move.l 12(sp),-(sp)
    c60c:	jsr c48a <sayCore>
    c612:	lea 12(sp),sp
}
    c616:	rts

0000c618 <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    c618:	moveq #2,d0
}
    c61a:	rts

0000c61c <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    c61c:	moveq #2,d0
}
    c61e:	rts

0000c620 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    c620:	nop
    c622:	rts

0000c624 <builtIn_setCursor>:

builtIn(setCursor)
{
    c624:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    c626:	movea.l 12(sp),a0
    c62a:	move.l 24(a0),d0
    c62e:	move.l d0,-(sp)
    c630:	jsr 12cb2 <getAnimationFromVar>
    c636:	addq.l #4,sp
    c638:	move.l d0,(sp)
	pickAnimCursor (aa);
    c63a:	move.l (sp),-(sp)
    c63c:	jsr dba <pickAnimCursor>
    c642:	addq.l #4,sp
	trimStack (&fun -> stack);
    c644:	moveq #24,d0
    c646:	add.l 12(sp),d0
    c64a:	move.l d0,-(sp)
    c64c:	jsr 1315e <trimStack>
    c652:	addq.l #4,sp
	return BR_CONTINUE;
    c654:	moveq #2,d0
}
    c656:	addq.l #4,sp
    c658:	rts

0000c65a <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    c65a:	move.l 19b0c <input+0xa>,d1
    c660:	move.l 19c5e <cameraX>,d0
    c666:	add.l d0,d1
    c668:	moveq #28,d0
    c66a:	add.l 8(sp),d0
    c66e:	move.l d1,-(sp)
    c670:	pea 1 <_start+0x1>
    c674:	move.l d0,-(sp)
    c676:	jsr 130cc <setVariable>
    c67c:	lea 12(sp),sp
	return BR_CONTINUE;
    c680:	moveq #2,d0
}
    c682:	rts

0000c684 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    c684:	move.l 19b10 <input+0xe>,d1
    c68a:	move.l 19c62 <cameraY>,d0
    c690:	add.l d0,d1
    c692:	moveq #28,d0
    c694:	add.l 8(sp),d0
    c698:	move.l d1,-(sp)
    c69a:	pea 1 <_start+0x1>
    c69e:	move.l d0,-(sp)
    c6a0:	jsr 130cc <setVariable>
    c6a6:	lea 12(sp),sp
	return BR_CONTINUE;
    c6aa:	moveq #2,d0
}
    c6ac:	rts

0000c6ae <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    c6ae:	move.l 19b0c <input+0xa>,d0
    c6b4:	move.l d0,-(sp)
    c6b6:	jsr 14ada <__floatsisf>
    c6bc:	addq.l #4,sp
    c6be:	move.l d0,d1
    c6c0:	move.l 194f8 <cameraZoom>,d0
    c6c6:	move.l d0,-(sp)
    c6c8:	move.l d1,-(sp)
    c6ca:	jsr 14b8c <__mulsf3>
    c6d0:	addq.l #8,sp
    c6d2:	move.l d0,-(sp)
    c6d4:	jsr 14a72 <__fixsfsi>
    c6da:	addq.l #4,sp
    c6dc:	move.l d0,d1
    c6de:	moveq #28,d0
    c6e0:	add.l 8(sp),d0
    c6e4:	move.l d1,-(sp)
    c6e6:	pea 1 <_start+0x1>
    c6ea:	move.l d0,-(sp)
    c6ec:	jsr 130cc <setVariable>
    c6f2:	lea 12(sp),sp
	return BR_CONTINUE;
    c6f6:	moveq #2,d0
}
    c6f8:	rts

0000c6fa <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    c6fa:	move.l 19b10 <input+0xe>,d0
    c700:	move.l d0,-(sp)
    c702:	jsr 14ada <__floatsisf>
    c708:	addq.l #4,sp
    c70a:	move.l d0,d1
    c70c:	move.l 194f8 <cameraZoom>,d0
    c712:	move.l d0,-(sp)
    c714:	move.l d1,-(sp)
    c716:	jsr 14b8c <__mulsf3>
    c71c:	addq.l #8,sp
    c71e:	move.l d0,-(sp)
    c720:	jsr 14a72 <__fixsfsi>
    c726:	addq.l #4,sp
    c728:	move.l d0,d1
    c72a:	moveq #28,d0
    c72c:	add.l 8(sp),d0
    c730:	move.l d1,-(sp)
    c732:	pea 1 <_start+0x1>
    c736:	move.l d0,-(sp)
    c738:	jsr 130cc <setVariable>
    c73e:	lea 12(sp),sp
	return BR_CONTINUE;
    c742:	moveq #2,d0
}
    c744:	rts

0000c746 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    c746:	jsr 6028 <statusBarText>
    c74c:	move.l d0,d1
    c74e:	moveq #28,d0
    c750:	add.l 8(sp),d0
    c754:	move.l d1,-(sp)
    c756:	move.l d0,-(sp)
    c758:	jsr 129fc <makeTextVar>
    c75e:	addq.l #8,sp
	return BR_CONTINUE;
    c760:	moveq #2,d0
}
    c762:	rts

0000c764 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    c764:	       lea -20(sp),sp
    c768:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    c76a:	       movea.l 32(sp),a0
    c76e:	       move.l 24(a0),d0
    c772:	       move.l d0,-(sp)
    c774:	       jsr 12db0 <getTextFromAnyVar>
    c77a:	       addq.l #4,sp
    c77c:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    c780:	   /-- bne.s c788 <builtIn_getMatchingFiles+0x24>
    c782:	   |   moveq #1,d0
    c784:	/--|-- bra.w c84a <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    c788:	|  \-> moveq #24,d0
    c78a:	|      add.l 32(sp),d0
    c78e:	|      move.l d0,-(sp)
    c790:	|      jsr 1315e <trimStack>
    c796:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    c798:	|      moveq #28,d0
    c79a:	|      add.l 32(sp),d0
    c79e:	|      move.l d0,-(sp)
    c7a0:	|      jsr 12a28 <unlinkVar>
    c7a6:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    c7a8:	|      movea.l 32(sp),a0
    c7ac:	|      moveq #6,d0
    c7ae:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    c7b2:	|      moveq #12,d0
    c7b4:	|      move.l d0,16(sp)
    c7b8:	|      clr.l 12(sp)
    c7bc:	|      move.l 19b50 <SysBase>,d0
    c7c2:	|      movea.l d0,a6
    c7c4:	|      move.l 16(sp),d0
    c7c8:	|      move.l 12(sp),d1
    c7cc:	|      jsr -684(a6)
    c7d0:	|      move.l d0,8(sp)
    c7d4:	|      move.l 8(sp),d0
    c7d8:	|      movea.l 32(sp),a0
    c7dc:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    c7e0:	|      moveq #32,d0
    c7e2:	|      add.l 32(sp),d0
    c7e6:	|  /-- bne.s c7ec <builtIn_getMatchingFiles+0x88>
    c7e8:	|  |   moveq #1,d0
    c7ea:	+--|-- bra.s c84a <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    c7ec:	|  \-> movea.l 32(sp),a0
    c7f0:	|      movea.l 32(a0),a0
    c7f4:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    c7f6:	|      movea.l 32(sp),a0
    c7fa:	|      movea.l 32(a0),a0
    c7fe:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    c802:	|      movea.l 32(sp),a0
    c806:	|      movea.l 32(a0),a0
    c80a:	|      moveq #1,d0
    c80c:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    c810:	|      movea.l 32(sp),a0
    c814:	|      move.l 32(a0),d0
    c818:	|      move.l 20(sp),-(sp)
    c81c:	|      move.l d0,-(sp)
    c81e:	|      jsr 12596 <getSavedGamesStack>
    c824:	|      addq.l #8,sp
    c826:	|      tst.w d0
    c828:	|  /-- bne.s c82e <builtIn_getMatchingFiles+0xca>
    c82a:	|  |   moveq #1,d0
    c82c:	+--|-- bra.s c84a <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    c82e:	|  \-> move.l 20(sp),4(sp)
    c834:	|      move.l 19b50 <SysBase>,d0
    c83a:	|      movea.l d0,a6
    c83c:	|      movea.l 4(sp),a1
    c840:	|      jsr -690(a6)
	newText = NULL;
    c844:	|      clr.l 20(sp)
	return BR_CONTINUE;
    c848:	|      moveq #2,d0
}
    c84a:	\----> movea.l (sp)+,a6
    c84c:	       lea 20(sp),sp
    c850:	       rts

0000c852 <builtIn_saveGame>:

builtIn(saveGame)
{
    c852:	       lea -12(sp),sp
    c856:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    c858:	       movea.l 24(sp),a0
    c85c:	       move.l 24(a0),d0
    c860:	       move.l d0,-(sp)
    c862:	       jsr 12db0 <getTextFromAnyVar>
    c868:	       addq.l #4,sp
    c86a:	       move.l d0,19b1c <loadNow>
    trimStack(&fun->stack);
    c870:	       moveq #24,d0
    c872:	       add.l 24(sp),d0
    c876:	       move.l d0,-(sp)
    c878:	       jsr 1315e <trimStack>
    c87e:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    c880:	       move.l 19b1c <loadNow>,d0
    c886:	       move.l d0,-(sp)
    c888:	       jsr 2fe <encodeFilename>
    c88e:	       addq.l #4,sp
    c890:	       move.l d0,12(sp)
    FreeVec(loadNow);
    c894:	       move.l 19b1c <loadNow>,8(sp)
    c89c:	       move.l 19b50 <SysBase>,d0
    c8a2:	       movea.l d0,a6
    c8a4:	       movea.l 8(sp),a1
    c8a8:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    c8ac:	       move.l 12(sp),-(sp)
    c8b0:	       jsr c3fc <failSecurityCheck>
    c8b6:	       addq.l #4,sp
    c8b8:	       tst.w d0
    c8ba:	   /-- beq.s c8c0 <builtIn_saveGame+0x6e>
    c8bc:	   |   moveq #1,d0
    c8be:	/--|-- bra.s c910 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    c8c0:	|  \-> move.l 12(sp),-(sp)
    c8c4:	|      pea 16afe <PutChar+0x198c>
    c8ca:	|      jsr 11d06 <joinStrings>
    c8d0:	|      addq.l #8,sp
    c8d2:	|      move.l d0,19b1c <loadNow>
    FreeVec(aaaaa);
    c8d8:	|      move.l 12(sp),4(sp)
    c8de:	|      move.l 19b50 <SysBase>,d0
    c8e4:	|      movea.l d0,a6
    c8e6:	|      movea.l 4(sp),a1
    c8ea:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    c8ee:	|      moveq #28,d0
    c8f0:	|      add.l 24(sp),d0
    c8f4:	|      clr.l -(sp)
    c8f6:	|      pea 1 <_start+0x1>
    c8fa:	|      move.l d0,-(sp)
    c8fc:	|      jsr 130cc <setVariable>
    c902:	|      lea 12(sp),sp
    saverFunc = fun;
    c906:	|      move.l 24(sp),19c6e <saverFunc>
    return BR_KEEP_AND_PAUSE;
    c90e:	|      moveq #0,d0
}
    c910:	\----> movea.l (sp)+,a6
    c912:	       lea 12(sp),sp
    c916:	       rts

0000c918 <builtIn_fileExists>:

builtIn(fileExists)
{
    c918:	       lea -36(sp),sp
    c91c:	       move.l a6,-(sp)
    c91e:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    c920:	       movea.l 52(sp),a0
    c924:	       move.l 24(a0),d0
    c928:	       move.l d0,-(sp)
    c92a:	       jsr 12db0 <getTextFromAnyVar>
    c930:	       addq.l #4,sp
    c932:	       move.l d0,19b1c <loadNow>
    trimStack(&fun->stack);
    c938:	       moveq #24,d0
    c93a:	       add.l 52(sp),d0
    c93e:	       move.l d0,-(sp)
    c940:	       jsr 1315e <trimStack>
    c946:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    c948:	       move.l 19b1c <loadNow>,d0
    c94e:	       move.l d0,-(sp)
    c950:	       jsr 2fe <encodeFilename>
    c956:	       addq.l #4,sp
    c958:	       move.l d0,40(sp)
    FreeVec(loadNow);
    c95c:	       move.l 19b1c <loadNow>,36(sp)
    c964:	       move.l 19b50 <SysBase>,d0
    c96a:	       movea.l d0,a6
    c96c:	       movea.l 36(sp),a1
    c970:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    c974:	       move.l 40(sp),-(sp)
    c978:	       jsr c3fc <failSecurityCheck>
    c97e:	       addq.l #4,sp
    c980:	       tst.w d0
    c982:	   /-- beq.s c98a <builtIn_fileExists+0x72>
    c984:	   |   moveq #1,d0
    c986:	/--|-- bra.w ca2a <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    c98a:	|  \-> move.l 40(sp),32(sp)
    c990:	|      move.l #1005,28(sp)
    c998:	|      move.l 19b58 <DOSBase>,d0
    c99e:	|      movea.l d0,a6
    c9a0:	|      move.l 32(sp),d1
    c9a4:	|      move.l 28(sp),d2
    c9a8:	|      jsr -30(a6)
    c9ac:	|      move.l d0,24(sp)
    c9b0:	|      move.l 24(sp),d0
    c9b4:	|      move.l d0,20(sp)
    if (!fp) {        
    c9b8:	|  /-- bne.s c9c8 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    c9ba:	|  |   pea 16b00 <PutChar+0x198e>
    c9c0:	|  |   jsr 14822 <KPrintF>
    c9c6:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    c9c8:	|  \-> tst.l 20(sp)
    c9cc:	|      sne d0
    c9ce:	|      neg.b d0
    c9d0:	|      moveq #0,d1
    c9d2:	|      move.b d0,d1
    c9d4:	|      moveq #28,d0
    c9d6:	|      add.l 52(sp),d0
    c9da:	|      move.l d1,-(sp)
    c9dc:	|      pea 1 <_start+0x1>
    c9e0:	|      move.l d0,-(sp)
    c9e2:	|      jsr 130cc <setVariable>
    c9e8:	|      lea 12(sp),sp
    if (fp) Close(fp);
    c9ec:	|      tst.l 20(sp)
    c9f0:	|  /-- beq.s ca0c <builtIn_fileExists+0xf4>
    c9f2:	|  |   move.l 20(sp),16(sp)
    c9f8:	|  |   move.l 19b58 <DOSBase>,d0
    c9fe:	|  |   movea.l d0,a6
    ca00:	|  |   move.l 16(sp),d1
    ca04:	|  |   jsr -36(a6)
    ca08:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    ca0c:	|  \-> move.l 40(sp),8(sp)
    ca12:	|      move.l 19b50 <SysBase>,d0
    ca18:	|      movea.l d0,a6
    ca1a:	|      movea.l 8(sp),a1
    ca1e:	|      jsr -690(a6)
    loadNow = NULL;
    ca22:	|      clr.l 19b1c <loadNow>
    return BR_CONTINUE;
    ca28:	|      moveq #2,d0
}
    ca2a:	\----> move.l (sp)+,d2
    ca2c:	       movea.l (sp)+,a6
    ca2e:	       lea 36(sp),sp
    ca32:	       rts

0000ca34 <builtIn_loadGame>:

builtIn(loadGame)
{
    ca34:	       lea -36(sp),sp
    ca38:	       move.l a6,-(sp)
    ca3a:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    ca3c:	       movea.l 52(sp),a0
    ca40:	       move.l 24(a0),d0
    ca44:	       move.l d0,-(sp)
    ca46:	       jsr 12db0 <getTextFromAnyVar>
    ca4c:	       addq.l #4,sp
    ca4e:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    ca52:	       moveq #24,d0
    ca54:	       add.l 52(sp),d0
    ca58:	       move.l d0,-(sp)
    ca5a:	       jsr 1315e <trimStack>
    ca60:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    ca62:	       move.l 40(sp),-(sp)
    ca66:	       jsr 2fe <encodeFilename>
    ca6c:	       addq.l #4,sp
    ca6e:	       move.l d0,19b1c <loadNow>
    FreeVec(aaaaa);
    ca74:	       move.l 40(sp),36(sp)
    ca7a:	       move.l 19b50 <SysBase>,d0
    ca80:	       movea.l d0,a6
    ca82:	       movea.l 36(sp),a1
    ca86:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    ca8a:	       move.l 19b1c <loadNow>,d0
    ca90:	       move.l d0,-(sp)
    ca92:	       jsr c3fc <failSecurityCheck>
    ca98:	       addq.l #4,sp
    ca9a:	       tst.w d0
    ca9c:	   /-- beq.s caa2 <builtIn_loadGame+0x6e>
    ca9e:	   |   moveq #1,d0
    caa0:	/--|-- bra.s cb12 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    caa2:	|  \-> move.l 19b1c <loadNow>,32(sp)
    caaa:	|      move.l #1005,28(sp)
    cab2:	|      move.l 19b58 <DOSBase>,d0
    cab8:	|      movea.l d0,a6
    caba:	|      move.l 32(sp),d1
    cabe:	|      move.l 28(sp),d2
    cac2:	|      jsr -30(a6)
    cac6:	|      move.l d0,24(sp)
    caca:	|      move.l 24(sp),d0
    cace:	|      move.l d0,20(sp)
    if (fp) {
    cad2:	|  /-- beq.s caf2 <builtIn_loadGame+0xbe>
        Close(fp);
    cad4:	|  |   move.l 20(sp),12(sp)
    cada:	|  |   move.l 19b58 <DOSBase>,d0
    cae0:	|  |   movea.l d0,a6
    cae2:	|  |   move.l 12(sp),d1
    cae6:	|  |   jsr -36(a6)
    caea:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    caee:	|  |   moveq #0,d0
    caf0:	+--|-- bra.s cb12 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    caf2:	|  \-> move.l 19b1c <loadNow>,16(sp)
    cafa:	|      move.l 19b50 <SysBase>,d0
    cb00:	|      movea.l d0,a6
    cb02:	|      movea.l 16(sp),a1
    cb06:	|      jsr -690(a6)
    loadNow = NULL;
    cb0a:	|      clr.l 19b1c <loadNow>
    return BR_CONTINUE;
    cb10:	|      moveq #2,d0
}
    cb12:	\----> move.l (sp)+,d2
    cb14:	       movea.l (sp)+,a6
    cb16:	       lea 36(sp),sp
    cb1a:	       rts

0000cb1c <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    cb1c:	move.l 19c44 <sceneHeight>,d0
    cb22:	move.l d0,d1
    cb24:	move.l 19c40 <sceneWidth>,d0
    cb2a:	move.l d1,-(sp)
    cb2c:	move.l d0,-(sp)
    cb2e:	clr.l -(sp)
    cb30:	clr.l -(sp)
    cb32:	jsr b2fc <blankScreen>
    cb38:	lea 16(sp),sp
	return BR_CONTINUE;
    cb3c:	moveq #2,d0
}
    cb3e:	rts

0000cb40 <builtIn_blankArea>:

builtIn(blankArea)
{
    cb40:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    cb44:	       movea.l 24(sp),a0
    cb48:	       move.l 24(a0),d0
    cb4c:	       move.l d0,-(sp)
    cb4e:	       pea 1 <_start+0x1>
    cb52:	       lea 8(sp),a0
    cb56:	       move.l a0,-(sp)
    cb58:	       jsr 127da <getValueType>
    cb5e:	       lea 12(sp),sp
    cb62:	       tst.w d0
    cb64:	   /-- bne.s cb6c <builtIn_blankArea+0x2c>
    cb66:	   |   moveq #1,d0
    cb68:	/--|-- bra.w cc42 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    cb6c:	|  \-> moveq #24,d0
    cb6e:	|      add.l 24(sp),d0
    cb72:	|      move.l d0,-(sp)
    cb74:	|      jsr 1315e <trimStack>
    cb7a:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    cb7c:	|      movea.l 24(sp),a0
    cb80:	|      move.l 24(a0),d0
    cb84:	|      move.l d0,-(sp)
    cb86:	|      pea 1 <_start+0x1>
    cb8a:	|      lea 12(sp),a0
    cb8e:	|      move.l a0,-(sp)
    cb90:	|      jsr 127da <getValueType>
    cb96:	|      lea 12(sp),sp
    cb9a:	|      tst.w d0
    cb9c:	|  /-- bne.s cba4 <builtIn_blankArea+0x64>
    cb9e:	|  |   moveq #1,d0
    cba0:	+--|-- bra.w cc42 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    cba4:	|  \-> moveq #24,d0
    cba6:	|      add.l 24(sp),d0
    cbaa:	|      move.l d0,-(sp)
    cbac:	|      jsr 1315e <trimStack>
    cbb2:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    cbb4:	|      movea.l 24(sp),a0
    cbb8:	|      move.l 24(a0),d0
    cbbc:	|      move.l d0,-(sp)
    cbbe:	|      pea 1 <_start+0x1>
    cbc2:	|      moveq #16,d0
    cbc4:	|      add.l sp,d0
    cbc6:	|      move.l d0,-(sp)
    cbc8:	|      jsr 127da <getValueType>
    cbce:	|      lea 12(sp),sp
    cbd2:	|      tst.w d0
    cbd4:	|  /-- bne.s cbda <builtIn_blankArea+0x9a>
    cbd6:	|  |   moveq #1,d0
    cbd8:	+--|-- bra.s cc42 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    cbda:	|  \-> moveq #24,d0
    cbdc:	|      add.l 24(sp),d0
    cbe0:	|      move.l d0,-(sp)
    cbe2:	|      jsr 1315e <trimStack>
    cbe8:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    cbea:	|      movea.l 24(sp),a0
    cbee:	|      move.l 24(a0),d0
    cbf2:	|      move.l d0,-(sp)
    cbf4:	|      pea 1 <_start+0x1>
    cbf8:	|      moveq #20,d0
    cbfa:	|      add.l sp,d0
    cbfc:	|      move.l d0,-(sp)
    cbfe:	|      jsr 127da <getValueType>
    cc04:	|      lea 12(sp),sp
    cc08:	|      tst.w d0
    cc0a:	|  /-- bne.s cc10 <builtIn_blankArea+0xd0>
    cc0c:	|  |   moveq #1,d0
    cc0e:	+--|-- bra.s cc42 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    cc10:	|  \-> moveq #24,d0
    cc12:	|      add.l 24(sp),d0
    cc16:	|      move.l d0,-(sp)
    cc18:	|      jsr 1315e <trimStack>
    cc1e:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    cc20:	|      movea.l (sp),a1
    cc22:	|      movea.l 4(sp),a0
    cc26:	|      move.l 8(sp),d1
    cc2a:	|      move.l 12(sp),d0
    cc2e:	|      move.l a1,-(sp)
    cc30:	|      move.l a0,-(sp)
    cc32:	|      move.l d1,-(sp)
    cc34:	|      move.l d0,-(sp)
    cc36:	|      jsr b2fc <blankScreen>
    cc3c:	|      lea 16(sp),sp
	return BR_CONTINUE;
    cc40:	|      moveq #2,d0
}
    cc42:	\----> lea 16(sp),sp
    cc46:	       rts

0000cc48 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    cc48:	jsr b310 <darkScreen>
	return BR_CONTINUE;
    cc4e:	moveq #2,d0
}
    cc50:	rts

0000cc52 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    cc52:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc56:	       movea.l 20(sp),a0
    cc5a:	       move.l 24(a0),d0
    cc5e:	       move.l d0,-(sp)
    cc60:	       pea 1 <_start+0x1>
    cc64:	       lea 8(sp),a0
    cc68:	       move.l a0,-(sp)
    cc6a:	       jsr 127da <getValueType>
    cc70:	       lea 12(sp),sp
    cc74:	       tst.w d0
    cc76:	   /-- bne.s cc7e <builtIn_addOverlay+0x2c>
    cc78:	   |   moveq #1,d0
    cc7a:	/--|-- bra.w cd16 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    cc7e:	|  \-> moveq #24,d0
    cc80:	|      add.l 20(sp),d0
    cc84:	|      move.l d0,-(sp)
    cc86:	|      jsr 1315e <trimStack>
    cc8c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc8e:	|      movea.l 20(sp),a0
    cc92:	|      move.l 24(a0),d0
    cc96:	|      move.l d0,-(sp)
    cc98:	|      pea 1 <_start+0x1>
    cc9c:	|      moveq #12,d0
    cc9e:	|      add.l sp,d0
    cca0:	|      move.l d0,-(sp)
    cca2:	|      jsr 127da <getValueType>
    cca8:	|      lea 12(sp),sp
    ccac:	|      tst.w d0
    ccae:	|  /-- bne.s ccb4 <builtIn_addOverlay+0x62>
    ccb0:	|  |   moveq #1,d0
    ccb2:	+--|-- bra.s cd16 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ccb4:	|  \-> moveq #24,d0
    ccb6:	|      add.l 20(sp),d0
    ccba:	|      move.l d0,-(sp)
    ccbc:	|      jsr 1315e <trimStack>
    ccc2:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ccc4:	|      movea.l 20(sp),a0
    ccc8:	|      move.l 24(a0),d0
    cccc:	|      move.l d0,-(sp)
    ccce:	|      pea 5 <_start+0x5>
    ccd2:	|      moveq #16,d0
    ccd4:	|      add.l sp,d0
    ccd6:	|      move.l d0,-(sp)
    ccd8:	|      jsr 127da <getValueType>
    ccde:	|      lea 12(sp),sp
    cce2:	|      tst.w d0
    cce4:	|  /-- bne.s ccea <builtIn_addOverlay+0x98>
    cce6:	|  |   moveq #1,d0
    cce8:	+--|-- bra.s cd16 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ccea:	|  \-> moveq #24,d0
    ccec:	|      add.l 20(sp),d0
    ccf0:	|      move.l d0,-(sp)
    ccf2:	|      jsr 1315e <trimStack>
    ccf8:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ccfa:	|      movea.l (sp),a0
    ccfc:	|      move.l 4(sp),d1
    cd00:	|      move.l 8(sp),d0
    cd04:	|      move.l a0,-(sp)
    cd06:	|      move.l d1,-(sp)
    cd08:	|      move.l d0,-(sp)
    cd0a:	|      jsr b42e <loadBackDrop>
    cd10:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cd14:	|      moveq #2,d0
}
    cd16:	\----> lea 12(sp),sp
    cd1a:	       rts

0000cd1c <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    cd1c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cd20:	       movea.l 20(sp),a0
    cd24:	       move.l 24(a0),d0
    cd28:	       move.l d0,-(sp)
    cd2a:	       pea 1 <_start+0x1>
    cd2e:	       lea 8(sp),a0
    cd32:	       move.l a0,-(sp)
    cd34:	       jsr 127da <getValueType>
    cd3a:	       lea 12(sp),sp
    cd3e:	       tst.w d0
    cd40:	   /-- bne.s cd48 <builtIn_mixOverlay+0x2c>
    cd42:	   |   moveq #1,d0
    cd44:	/--|-- bra.w cde0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    cd48:	|  \-> moveq #24,d0
    cd4a:	|      add.l 20(sp),d0
    cd4e:	|      move.l d0,-(sp)
    cd50:	|      jsr 1315e <trimStack>
    cd56:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cd58:	|      movea.l 20(sp),a0
    cd5c:	|      move.l 24(a0),d0
    cd60:	|      move.l d0,-(sp)
    cd62:	|      pea 1 <_start+0x1>
    cd66:	|      moveq #12,d0
    cd68:	|      add.l sp,d0
    cd6a:	|      move.l d0,-(sp)
    cd6c:	|      jsr 127da <getValueType>
    cd72:	|      lea 12(sp),sp
    cd76:	|      tst.w d0
    cd78:	|  /-- bne.s cd7e <builtIn_mixOverlay+0x62>
    cd7a:	|  |   moveq #1,d0
    cd7c:	+--|-- bra.s cde0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    cd7e:	|  \-> moveq #24,d0
    cd80:	|      add.l 20(sp),d0
    cd84:	|      move.l d0,-(sp)
    cd86:	|      jsr 1315e <trimStack>
    cd8c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    cd8e:	|      movea.l 20(sp),a0
    cd92:	|      move.l 24(a0),d0
    cd96:	|      move.l d0,-(sp)
    cd98:	|      pea 5 <_start+0x5>
    cd9c:	|      moveq #16,d0
    cd9e:	|      add.l sp,d0
    cda0:	|      move.l d0,-(sp)
    cda2:	|      jsr 127da <getValueType>
    cda8:	|      lea 12(sp),sp
    cdac:	|      tst.w d0
    cdae:	|  /-- bne.s cdb4 <builtIn_mixOverlay+0x98>
    cdb0:	|  |   moveq #1,d0
    cdb2:	+--|-- bra.s cde0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    cdb4:	|  \-> moveq #24,d0
    cdb6:	|      add.l 20(sp),d0
    cdba:	|      move.l d0,-(sp)
    cdbc:	|      jsr 1315e <trimStack>
    cdc2:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    cdc4:	|      movea.l (sp),a0
    cdc6:	|      move.l 4(sp),d1
    cdca:	|      move.l 8(sp),d0
    cdce:	|      move.l a0,-(sp)
    cdd0:	|      move.l d1,-(sp)
    cdd2:	|      move.l d0,-(sp)
    cdd4:	|      jsr b4a4 <mixBackDrop>
    cdda:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cdde:	|      moveq #2,d0
}
    cde0:	\----> lea 12(sp),sp
    cde4:	       rts

0000cde6 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    cde6:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cdea:	       movea.l 20(sp),a0
    cdee:	       move.l 24(a0),d0
    cdf2:	       move.l d0,-(sp)
    cdf4:	       pea 1 <_start+0x1>
    cdf8:	       lea 8(sp),a0
    cdfc:	       move.l a0,-(sp)
    cdfe:	       jsr 127da <getValueType>
    ce04:	       lea 12(sp),sp
    ce08:	       tst.w d0
    ce0a:	   /-- bne.s ce12 <builtIn_pasteImage+0x2c>
    ce0c:	   |   moveq #1,d0
    ce0e:	/--|-- bra.w cea2 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ce12:	|  \-> moveq #24,d0
    ce14:	|      add.l 20(sp),d0
    ce18:	|      move.l d0,-(sp)
    ce1a:	|      jsr 1315e <trimStack>
    ce20:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ce22:	|      movea.l 20(sp),a0
    ce26:	|      move.l 24(a0),d0
    ce2a:	|      move.l d0,-(sp)
    ce2c:	|      pea 1 <_start+0x1>
    ce30:	|      moveq #12,d0
    ce32:	|      add.l sp,d0
    ce34:	|      move.l d0,-(sp)
    ce36:	|      jsr 127da <getValueType>
    ce3c:	|      lea 12(sp),sp
    ce40:	|      tst.w d0
    ce42:	|  /-- bne.s ce48 <builtIn_pasteImage+0x62>
    ce44:	|  |   moveq #1,d0
    ce46:	+--|-- bra.s cea2 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ce48:	|  \-> moveq #24,d0
    ce4a:	|      add.l 20(sp),d0
    ce4e:	|      move.l d0,-(sp)
    ce50:	|      jsr 1315e <trimStack>
    ce56:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ce58:	|      movea.l 20(sp),a0
    ce5c:	|      move.l 24(a0),d0
    ce60:	|      move.l d0,-(sp)
    ce62:	|      jsr 12cb2 <getAnimationFromVar>
    ce68:	|      addq.l #4,sp
    ce6a:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ce6e:	|      moveq #24,d0
    ce70:	|      add.l 20(sp),d0
    ce74:	|      move.l d0,-(sp)
    ce76:	|      jsr 1315e <trimStack>
    ce7c:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ce7e:	|      tst.l 8(sp)
    ce82:	|  /-- bne.s ce88 <builtIn_pasteImage+0xa2>
    ce84:	|  |   moveq #2,d0
    ce86:	+--|-- bra.s cea2 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    ce88:	|  \-> move.l (sp),d1
    ce8a:	|      move.l 4(sp),d0
    ce8e:	|      move.l 8(sp),-(sp)
    ce92:	|      move.l d1,-(sp)
    ce94:	|      move.l d0,-(sp)
    ce96:	|      jsr de2 <pasteCursor>
    ce9c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cea0:	|      moveq #2,d0
}
    cea2:	\----> lea 12(sp),sp
    cea6:	       rts

0000cea8 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    cea8:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ceaa:	       movea.l 16(sp),a0
    ceae:	       move.l 24(a0),d0
    ceb2:	       move.l d0,-(sp)
    ceb4:	       pea 1 <_start+0x1>
    ceb8:	       move.l sp,d0
    ceba:	       addq.l #8,d0
    cebc:	       move.l d0,-(sp)
    cebe:	       jsr 127da <getValueType>
    cec4:	       lea 12(sp),sp
    cec8:	       tst.w d0
    ceca:	   /-- bne.s ced2 <builtIn_setSceneDimensions+0x2a>
    cecc:	   |   moveq #1,d0
    cece:	/--|-- bra.w cf5a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ced2:	|  \-> moveq #24,d0
    ced4:	|      add.l 16(sp),d0
    ced8:	|      move.l d0,-(sp)
    ceda:	|      jsr 1315e <trimStack>
    cee0:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cee2:	|      movea.l 16(sp),a0
    cee6:	|      move.l 24(a0),d0
    ceea:	|      move.l d0,-(sp)
    ceec:	|      pea 1 <_start+0x1>
    cef0:	|      moveq #12,d0
    cef2:	|      add.l sp,d0
    cef4:	|      move.l d0,-(sp)
    cef6:	|      jsr 127da <getValueType>
    cefc:	|      lea 12(sp),sp
    cf00:	|      tst.w d0
    cf02:	|  /-- bne.s cf08 <builtIn_setSceneDimensions+0x60>
    cf04:	|  |   moveq #1,d0
    cf06:	+--|-- bra.s cf5a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    cf08:	|  \-> moveq #24,d0
    cf0a:	|      add.l 16(sp),d0
    cf0e:	|      move.l d0,-(sp)
    cf10:	|      jsr 1315e <trimStack>
    cf16:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    cf18:	|      move.l (sp),d1
    cf1a:	|      move.l 4(sp),d0
    cf1e:	|      move.l d1,-(sp)
    cf20:	|      move.l d0,-(sp)
    cf22:	|      jsr b4ee <resizeBackdrop>
    cf28:	|      addq.l #8,sp
    cf2a:	|      tst.w d0
    cf2c:	|  /-- beq.s cf4a <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    cf2e:	|  |   move.l (sp),d1
    cf30:	|  |   move.l 4(sp),d0
    cf34:	|  |   move.l d1,-(sp)
    cf36:	|  |   move.l d0,-(sp)
    cf38:	|  |   clr.l -(sp)
    cf3a:	|  |   clr.l -(sp)
    cf3c:	|  |   jsr b2fc <blankScreen>
    cf42:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    cf46:	|  |   moveq #2,d0
    cf48:	+--|-- bra.s cf5a <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    cf4a:	|  \-> pea 16b1e <PutChar+0x19ac>
    cf50:	|      jsr 14822 <KPrintF>
    cf56:	|      addq.l #4,sp
	return BR_ERROR;
    cf58:	|      moveq #1,d0
}
    cf5a:	\----> addq.l #8,sp
    cf5c:	       rts

0000cf5e <builtIn_aimCamera>:

builtIn(aimCamera)
{
    cf5e:	          move.l d3,-(sp)
    cf60:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf62:	          movea.l 16(sp),a0
    cf66:	          move.l 24(a0),d0
    cf6a:	          move.l d0,-(sp)
    cf6c:	          pea 1 <_start+0x1>
    cf70:	          pea 19c62 <cameraY>
    cf76:	          jsr 127da <getValueType>
    cf7c:	          lea 12(sp),sp
    cf80:	          tst.w d0
    cf82:	      /-- bne.s cf8a <builtIn_aimCamera+0x2c>
    cf84:	      |   moveq #1,d0
    cf86:	/-----|-- bra.w d20c <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    cf8a:	|     \-> moveq #24,d0
    cf8c:	|         add.l 16(sp),d0
    cf90:	|         move.l d0,-(sp)
    cf92:	|         jsr 1315e <trimStack>
    cf98:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf9a:	|         movea.l 16(sp),a0
    cf9e:	|         move.l 24(a0),d0
    cfa2:	|         move.l d0,-(sp)
    cfa4:	|         pea 1 <_start+0x1>
    cfa8:	|         pea 19c5e <cameraX>
    cfae:	|         jsr 127da <getValueType>
    cfb4:	|         lea 12(sp),sp
    cfb8:	|         tst.w d0
    cfba:	|     /-- bne.s cfc2 <builtIn_aimCamera+0x64>
    cfbc:	|     |   moveq #1,d0
    cfbe:	+-----|-- bra.w d20c <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    cfc2:	|     \-> moveq #24,d0
    cfc4:	|         add.l 16(sp),d0
    cfc8:	|         move.l d0,-(sp)
    cfca:	|         jsr 1315e <trimStack>
    cfd0:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    cfd2:	|         move.l 19c5e <cameraX>,d0
    cfd8:	|         move.l d0,-(sp)
    cfda:	|         jsr 14ada <__floatsisf>
    cfe0:	|         addq.l #4,sp
    cfe2:	|         move.l d0,d2
    cfe4:	|         move.l 19aa4 <winWidth>,d0
    cfea:	|         lsr.l #1,d0
    cfec:	|         move.l d0,-(sp)
    cfee:	|         jsr 14b02 <__floatunsisf>
    cff4:	|         addq.l #4,sp
    cff6:	|         move.l d0,d1
    cff8:	|         move.l 194f8 <cameraZoom>,d0
    cffe:	|         move.l d0,-(sp)
    d000:	|         move.l d1,-(sp)
    d002:	|         jsr 14986 <__divsf3>
    d008:	|         addq.l #8,sp
    d00a:	|         move.l d0,-(sp)
    d00c:	|         move.l d2,-(sp)
    d00e:	|         jsr 14dce <__subsf3>
    d014:	|         addq.l #8,sp
    d016:	|         move.l d0,-(sp)
    d018:	|         jsr 14a72 <__fixsfsi>
    d01e:	|         addq.l #4,sp
    d020:	|         move.l d0,19c5e <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    d026:	|         move.l 19c62 <cameraY>,d0
    d02c:	|         move.l d0,-(sp)
    d02e:	|         jsr 14ada <__floatsisf>
    d034:	|         addq.l #4,sp
    d036:	|         move.l d0,d2
    d038:	|         move.l 19aa8 <winHeight>,d0
    d03e:	|         lsr.l #1,d0
    d040:	|         move.l d0,-(sp)
    d042:	|         jsr 14b02 <__floatunsisf>
    d048:	|         addq.l #4,sp
    d04a:	|         move.l d0,d1
    d04c:	|         move.l 194f8 <cameraZoom>,d0
    d052:	|         move.l d0,-(sp)
    d054:	|         move.l d1,-(sp)
    d056:	|         jsr 14986 <__divsf3>
    d05c:	|         addq.l #8,sp
    d05e:	|         move.l d0,-(sp)
    d060:	|         move.l d2,-(sp)
    d062:	|         jsr 14dce <__subsf3>
    d068:	|         addq.l #8,sp
    d06a:	|         move.l d0,-(sp)
    d06c:	|         jsr 14a72 <__fixsfsi>
    d072:	|         addq.l #4,sp
    d074:	|         move.l d0,19c62 <cameraY>

	if (cameraX < 0) cameraX = 0;
    d07a:	|         move.l 19c5e <cameraX>,d0
    d080:	|     /-- bpl.s d08c <builtIn_aimCamera+0x12e>
    d082:	|     |   clr.l 19c5e <cameraX>
    d088:	|  /--|-- bra.w d142 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    d08c:	|  |  \-> move.l 19c5e <cameraX>,d0
    d092:	|  |      move.l d0,-(sp)
    d094:	|  |      jsr 14ada <__floatsisf>
    d09a:	|  |      addq.l #4,sp
    d09c:	|  |      move.l d0,d2
    d09e:	|  |      move.l 19c40 <sceneWidth>,d0
    d0a4:	|  |      move.l d0,-(sp)
    d0a6:	|  |      jsr 14b02 <__floatunsisf>
    d0ac:	|  |      addq.l #4,sp
    d0ae:	|  |      move.l d0,d3
    d0b0:	|  |      move.l 19aa4 <winWidth>,d0
    d0b6:	|  |      move.l d0,-(sp)
    d0b8:	|  |      jsr 14b02 <__floatunsisf>
    d0be:	|  |      addq.l #4,sp
    d0c0:	|  |      move.l d0,d1
    d0c2:	|  |      move.l 194f8 <cameraZoom>,d0
    d0c8:	|  |      move.l d0,-(sp)
    d0ca:	|  |      move.l d1,-(sp)
    d0cc:	|  |      jsr 14986 <__divsf3>
    d0d2:	|  |      addq.l #8,sp
    d0d4:	|  |      move.l d0,-(sp)
    d0d6:	|  |      move.l d3,-(sp)
    d0d8:	|  |      jsr 14dce <__subsf3>
    d0de:	|  |      addq.l #8,sp
    d0e0:	|  |      move.l d0,-(sp)
    d0e2:	|  |      move.l d2,-(sp)
    d0e4:	|  |      jsr 14c46 <__gtsf2>
    d0ea:	|  |      addq.l #8,sp
    d0ec:	|  |      tst.l d0
    d0ee:	|  +----- ble.s d142 <builtIn_aimCamera+0x1e4>
    d0f0:	|  |      move.l 19c40 <sceneWidth>,d0
    d0f6:	|  |      move.l d0,-(sp)
    d0f8:	|  |      jsr 14b02 <__floatunsisf>
    d0fe:	|  |      addq.l #4,sp
    d100:	|  |      move.l d0,d2
    d102:	|  |      move.l 19aa4 <winWidth>,d0
    d108:	|  |      move.l d0,-(sp)
    d10a:	|  |      jsr 14b02 <__floatunsisf>
    d110:	|  |      addq.l #4,sp
    d112:	|  |      move.l d0,d1
    d114:	|  |      move.l 194f8 <cameraZoom>,d0
    d11a:	|  |      move.l d0,-(sp)
    d11c:	|  |      move.l d1,-(sp)
    d11e:	|  |      jsr 14986 <__divsf3>
    d124:	|  |      addq.l #8,sp
    d126:	|  |      move.l d0,-(sp)
    d128:	|  |      move.l d2,-(sp)
    d12a:	|  |      jsr 14dce <__subsf3>
    d130:	|  |      addq.l #8,sp
    d132:	|  |      move.l d0,-(sp)
    d134:	|  |      jsr 14a72 <__fixsfsi>
    d13a:	|  |      addq.l #4,sp
    d13c:	|  |      move.l d0,19c5e <cameraX>
	if (cameraY < 0) cameraY = 0;
    d142:	|  \----> move.l 19c62 <cameraY>,d0
    d148:	|     /-- bpl.s d154 <builtIn_aimCamera+0x1f6>
    d14a:	|     |   clr.l 19c62 <cameraY>
    d150:	|  /--|-- bra.w d20a <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    d154:	|  |  \-> move.l 19c62 <cameraY>,d0
    d15a:	|  |      move.l d0,-(sp)
    d15c:	|  |      jsr 14ada <__floatsisf>
    d162:	|  |      addq.l #4,sp
    d164:	|  |      move.l d0,d2
    d166:	|  |      move.l 19c44 <sceneHeight>,d0
    d16c:	|  |      move.l d0,-(sp)
    d16e:	|  |      jsr 14b02 <__floatunsisf>
    d174:	|  |      addq.l #4,sp
    d176:	|  |      move.l d0,d3
    d178:	|  |      move.l 19aa8 <winHeight>,d0
    d17e:	|  |      move.l d0,-(sp)
    d180:	|  |      jsr 14b02 <__floatunsisf>
    d186:	|  |      addq.l #4,sp
    d188:	|  |      move.l d0,d1
    d18a:	|  |      move.l 194f8 <cameraZoom>,d0
    d190:	|  |      move.l d0,-(sp)
    d192:	|  |      move.l d1,-(sp)
    d194:	|  |      jsr 14986 <__divsf3>
    d19a:	|  |      addq.l #8,sp
    d19c:	|  |      move.l d0,-(sp)
    d19e:	|  |      move.l d3,-(sp)
    d1a0:	|  |      jsr 14dce <__subsf3>
    d1a6:	|  |      addq.l #8,sp
    d1a8:	|  |      move.l d0,-(sp)
    d1aa:	|  |      move.l d2,-(sp)
    d1ac:	|  |      jsr 14c46 <__gtsf2>
    d1b2:	|  |      addq.l #8,sp
    d1b4:	|  |      tst.l d0
    d1b6:	|  +----- ble.s d20a <builtIn_aimCamera+0x2ac>
    d1b8:	|  |      move.l 19c44 <sceneHeight>,d0
    d1be:	|  |      move.l d0,-(sp)
    d1c0:	|  |      jsr 14b02 <__floatunsisf>
    d1c6:	|  |      addq.l #4,sp
    d1c8:	|  |      move.l d0,d2
    d1ca:	|  |      move.l 19aa8 <winHeight>,d0
    d1d0:	|  |      move.l d0,-(sp)
    d1d2:	|  |      jsr 14b02 <__floatunsisf>
    d1d8:	|  |      addq.l #4,sp
    d1da:	|  |      move.l d0,d1
    d1dc:	|  |      move.l 194f8 <cameraZoom>,d0
    d1e2:	|  |      move.l d0,-(sp)
    d1e4:	|  |      move.l d1,-(sp)
    d1e6:	|  |      jsr 14986 <__divsf3>
    d1ec:	|  |      addq.l #8,sp
    d1ee:	|  |      move.l d0,-(sp)
    d1f0:	|  |      move.l d2,-(sp)
    d1f2:	|  |      jsr 14dce <__subsf3>
    d1f8:	|  |      addq.l #8,sp
    d1fa:	|  |      move.l d0,-(sp)
    d1fc:	|  |      jsr 14a72 <__fixsfsi>
    d202:	|  |      addq.l #4,sp
    d204:	|  |      move.l d0,19c62 <cameraY>
	return BR_CONTINUE;
    d20a:	|  \----> moveq #2,d0
}
    d20c:	\-------> move.l (sp)+,d2
    d20e:	          move.l (sp)+,d3
    d210:	          rts

0000d212 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    d212:	       subq.l #4,sp
    d214:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d216:	       movea.l 16(sp),a0
    d21a:	       move.l 24(a0),d0
    d21e:	       move.l d0,-(sp)
    d220:	       pea 1 <_start+0x1>
    d224:	       moveq #12,d0
    d226:	       add.l sp,d0
    d228:	       move.l d0,-(sp)
    d22a:	       jsr 127da <getValueType>
    d230:	       lea 12(sp),sp
    d234:	       tst.w d0
    d236:	   /-- bne.s d23e <builtIn_zoomCamera+0x2c>
    d238:	   |   moveq #1,d0
    d23a:	/--|-- bra.w d438 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    d23e:	|  \-> moveq #24,d0
    d240:	|      add.l 16(sp),d0
    d244:	|      move.l d0,-(sp)
    d246:	|      jsr 1315e <trimStack>
    d24c:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    d24e:	|      move.l 19b0c <input+0xa>,d0
    d254:	|      move.l d0,-(sp)
    d256:	|      jsr 14ada <__floatsisf>
    d25c:	|      addq.l #4,sp
    d25e:	|      move.l d0,d1
    d260:	|      move.l 194f8 <cameraZoom>,d0
    d266:	|      move.l d0,-(sp)
    d268:	|      move.l d1,-(sp)
    d26a:	|      jsr 14b8c <__mulsf3>
    d270:	|      addq.l #8,sp
    d272:	|      move.l d0,-(sp)
    d274:	|      jsr 14a72 <__fixsfsi>
    d27a:	|      addq.l #4,sp
    d27c:	|      move.l d0,19b0c <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    d282:	|      move.l 19b10 <input+0xe>,d0
    d288:	|      move.l d0,-(sp)
    d28a:	|      jsr 14ada <__floatsisf>
    d290:	|      addq.l #4,sp
    d292:	|      move.l d0,d1
    d294:	|      move.l 194f8 <cameraZoom>,d0
    d29a:	|      move.l d0,-(sp)
    d29c:	|      move.l d1,-(sp)
    d29e:	|      jsr 14b8c <__mulsf3>
    d2a4:	|      addq.l #8,sp
    d2a6:	|      move.l d0,-(sp)
    d2a8:	|      jsr 14a72 <__fixsfsi>
    d2ae:	|      addq.l #4,sp
    d2b0:	|      move.l d0,19b10 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    d2b6:	|      move.l 4(sp),d0
    d2ba:	|      move.l d0,-(sp)
    d2bc:	|      jsr 14ada <__floatsisf>
    d2c2:	|      addq.l #4,sp
    d2c4:	|      move.l #1008981770,-(sp)
    d2ca:	|      move.l d0,-(sp)
    d2cc:	|      jsr 14b8c <__mulsf3>
    d2d2:	|      addq.l #8,sp
    d2d4:	|      move.l d0,194f8 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    d2da:	|      move.l 19aa4 <winWidth>,d0
    d2e0:	|      move.l d0,-(sp)
    d2e2:	|      jsr 14b02 <__floatunsisf>
    d2e8:	|      addq.l #4,sp
    d2ea:	|      move.l d0,d1
    d2ec:	|      move.l 194f8 <cameraZoom>,d0
    d2f2:	|      move.l d0,-(sp)
    d2f4:	|      move.l d1,-(sp)
    d2f6:	|      jsr 14986 <__divsf3>
    d2fc:	|      addq.l #8,sp
    d2fe:	|      move.l d0,d2
    d300:	|      move.l 19c40 <sceneWidth>,d0
    d306:	|      move.l d0,-(sp)
    d308:	|      jsr 14b02 <__floatunsisf>
    d30e:	|      addq.l #4,sp
    d310:	|      move.l d0,-(sp)
    d312:	|      move.l d2,-(sp)
    d314:	|      jsr 14c46 <__gtsf2>
    d31a:	|      addq.l #8,sp
    d31c:	|      tst.l d0
    d31e:	|  /-- ble.s d354 <builtIn_zoomCamera+0x142>
    d320:	|  |   move.l 19aa4 <winWidth>,d0
    d326:	|  |   move.l d0,-(sp)
    d328:	|  |   jsr 14b02 <__floatunsisf>
    d32e:	|  |   addq.l #4,sp
    d330:	|  |   move.l d0,d2
    d332:	|  |   move.l 19c40 <sceneWidth>,d0
    d338:	|  |   move.l d0,-(sp)
    d33a:	|  |   jsr 14b02 <__floatunsisf>
    d340:	|  |   addq.l #4,sp
    d342:	|  |   move.l d0,-(sp)
    d344:	|  |   move.l d2,-(sp)
    d346:	|  |   jsr 14986 <__divsf3>
    d34c:	|  |   addq.l #8,sp
    d34e:	|  |   move.l d0,194f8 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    d354:	|  \-> move.l 19aa8 <winHeight>,d0
    d35a:	|      move.l d0,-(sp)
    d35c:	|      jsr 14b02 <__floatunsisf>
    d362:	|      addq.l #4,sp
    d364:	|      move.l d0,d1
    d366:	|      move.l 194f8 <cameraZoom>,d0
    d36c:	|      move.l d0,-(sp)
    d36e:	|      move.l d1,-(sp)
    d370:	|      jsr 14986 <__divsf3>
    d376:	|      addq.l #8,sp
    d378:	|      move.l d0,d2
    d37a:	|      move.l 19c44 <sceneHeight>,d0
    d380:	|      move.l d0,-(sp)
    d382:	|      jsr 14b02 <__floatunsisf>
    d388:	|      addq.l #4,sp
    d38a:	|      move.l d0,-(sp)
    d38c:	|      move.l d2,-(sp)
    d38e:	|      jsr 14c46 <__gtsf2>
    d394:	|      addq.l #8,sp
    d396:	|      tst.l d0
    d398:	|  /-- ble.s d3ce <builtIn_zoomCamera+0x1bc>
    d39a:	|  |   move.l 19aa8 <winHeight>,d0
    d3a0:	|  |   move.l d0,-(sp)
    d3a2:	|  |   jsr 14b02 <__floatunsisf>
    d3a8:	|  |   addq.l #4,sp
    d3aa:	|  |   move.l d0,d2
    d3ac:	|  |   move.l 19c44 <sceneHeight>,d0
    d3b2:	|  |   move.l d0,-(sp)
    d3b4:	|  |   jsr 14b02 <__floatunsisf>
    d3ba:	|  |   addq.l #4,sp
    d3bc:	|  |   move.l d0,-(sp)
    d3be:	|  |   move.l d2,-(sp)
    d3c0:	|  |   jsr 14986 <__divsf3>
    d3c6:	|  |   addq.l #8,sp
    d3c8:	|  |   move.l d0,194f8 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    d3ce:	|  \-> move.l 19b0c <input+0xa>,d0
    d3d4:	|      move.l d0,-(sp)
    d3d6:	|      jsr 14ada <__floatsisf>
    d3dc:	|      addq.l #4,sp
    d3de:	|      move.l d0,d1
    d3e0:	|      move.l 194f8 <cameraZoom>,d0
    d3e6:	|      move.l d0,-(sp)
    d3e8:	|      move.l d1,-(sp)
    d3ea:	|      jsr 14986 <__divsf3>
    d3f0:	|      addq.l #8,sp
    d3f2:	|      move.l d0,-(sp)
    d3f4:	|      jsr 14a72 <__fixsfsi>
    d3fa:	|      addq.l #4,sp
    d3fc:	|      move.l d0,19b0c <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    d402:	|      move.l 19b10 <input+0xe>,d0
    d408:	|      move.l d0,-(sp)
    d40a:	|      jsr 14ada <__floatsisf>
    d410:	|      addq.l #4,sp
    d412:	|      move.l d0,d1
    d414:	|      move.l 194f8 <cameraZoom>,d0
    d41a:	|      move.l d0,-(sp)
    d41c:	|      move.l d1,-(sp)
    d41e:	|      jsr 14986 <__divsf3>
    d424:	|      addq.l #8,sp
    d426:	|      move.l d0,-(sp)
    d428:	|      jsr 14a72 <__fixsfsi>
    d42e:	|      addq.l #4,sp
    d430:	|      move.l d0,19b10 <input+0xe>

	return BR_CONTINUE;
    d436:	|      moveq #2,d0
}
    d438:	\----> move.l (sp)+,d2
    d43a:	       addq.l #4,sp
    d43c:	       rts

0000d43e <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    d43e:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    d440:	             tst.l 8(sp)
    d444:	         /-- bne.s d458 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    d446:	         |   pea 16b43 <PutChar+0x19d1>
    d44c:	         |   jsr 14822 <KPrintF>
    d452:	         |   addq.l #4,sp
		return BR_ERROR;
    d454:	         |   moveq #1,d0
    d456:	/--------|-- bra.s d4b8 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    d458:	|        \-> jsr c58 <rand>
    d45e:	|            move.l d0,d1
    d460:	|            move.l 8(sp),d0
    d464:	|            move.l d0,-(sp)
    d466:	|            move.l d1,-(sp)
    d468:	|            jsr 15136 <__umodsi3>
    d46e:	|            addq.l #8,sp
    d470:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    d472:	|     /----- bra.s d4a6 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    d474:	|  /--|----> move.l (sp),d0
    d476:	|  |  |      cmp.l 8(sp),d0
    d47a:	|  |  |  /-- bne.s d496 <builtIn_pickOne+0x58>
    d47c:	|  |  |  |   moveq #28,d0
    d47e:	|  |  |  |   add.l 12(sp),d0
    d482:	|  |  |  |   movea.l 12(sp),a0
    d486:	|  |  |  |   move.l 24(a0),d1
    d48a:	|  |  |  |   move.l d0,-(sp)
    d48c:	|  |  |  |   move.l d1,-(sp)
    d48e:	|  |  |  |   jsr 12c94 <copyVariable>
    d494:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    d496:	|  |  |  \-> moveq #24,d0
    d498:	|  |  |      add.l 12(sp),d0
    d49c:	|  |  |      move.l d0,-(sp)
    d49e:	|  |  |      jsr 1315e <trimStack>
    d4a4:	|  |  |      addq.l #4,sp
	while (numParams --) {
    d4a6:	|  |  \----> move.l 8(sp),d0
    d4aa:	|  |         move.l d0,d1
    d4ac:	|  |         subq.l #1,d1
    d4ae:	|  |         move.l d1,8(sp)
    d4b2:	|  |         tst.l d0
    d4b4:	|  \-------- bne.s d474 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    d4b6:	|            moveq #2,d0
}
    d4b8:	\----------> addq.l #4,sp
    d4ba:	             rts

0000d4bc <builtIn_substring>:

builtIn(substring)
{
    d4bc:	       lea -40(sp),sp
    d4c0:	       move.l a6,-(sp)
    d4c2:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d4c4:	       movea.l 56(sp),a0
    d4c8:	       move.l 24(a0),d0
    d4cc:	       move.l d0,-(sp)
    d4ce:	       pea 1 <_start+0x1>
    d4d2:	       lea 16(sp),a0
    d4d6:	       move.l a0,-(sp)
    d4d8:	       jsr 127da <getValueType>
    d4de:	       lea 12(sp),sp
    d4e2:	       tst.w d0
    d4e4:	   /-- bne.s d4ec <builtIn_substring+0x30>
    d4e6:	   |   moveq #1,d0
    d4e8:	/--|-- bra.w d664 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    d4ec:	|  \-> moveq #24,d0
    d4ee:	|      add.l 56(sp),d0
    d4f2:	|      move.l d0,-(sp)
    d4f4:	|      jsr 1315e <trimStack>
    d4fa:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d4fc:	|      movea.l 56(sp),a0
    d500:	|      move.l 24(a0),d0
    d504:	|      move.l d0,-(sp)
    d506:	|      pea 1 <_start+0x1>
    d50a:	|      lea 20(sp),a0
    d50e:	|      move.l a0,-(sp)
    d510:	|      jsr 127da <getValueType>
    d516:	|      lea 12(sp),sp
    d51a:	|      tst.w d0
    d51c:	|  /-- bne.s d524 <builtIn_substring+0x68>
    d51e:	|  |   moveq #1,d0
    d520:	+--|-- bra.w d664 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    d524:	|  \-> moveq #24,d0
    d526:	|      add.l 56(sp),d0
    d52a:	|      move.l d0,-(sp)
    d52c:	|      jsr 1315e <trimStack>
    d532:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    d534:	|      movea.l 56(sp),a0
    d538:	|      move.l 24(a0),d0
    d53c:	|      move.l d0,-(sp)
    d53e:	|      jsr 12db0 <getTextFromAnyVar>
    d544:	|      addq.l #4,sp
    d546:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    d54a:	|      moveq #24,d0
    d54c:	|      add.l 56(sp),d0
    d550:	|      move.l d0,-(sp)
    d552:	|      jsr 1315e <trimStack>
    d558:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    d55a:	|      move.l 44(sp),-(sp)
    d55e:	|      jsr 11cc6 <strlen>
    d564:	|      addq.l #4,sp
    d566:	|      move.l d0,d1
    d568:	|      move.l 12(sp),d0
    d56c:	|      movea.l d0,a0
    d56e:	|      move.l 8(sp),d0
    d572:	|      add.l a0,d0
    d574:	|      cmp.l d1,d0
    d576:	|  /-- bls.s d5ac <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    d578:	|  |   move.l 44(sp),-(sp)
    d57c:	|  |   jsr 11cc6 <strlen>
    d582:	|  |   addq.l #4,sp
    d584:	|  |   move.l d0,d1
    d586:	|  |   move.l 12(sp),d0
    d58a:	|  |   sub.l d0,d1
    d58c:	|  |   move.l d1,d0
    d58e:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    d592:	|  |   move.l 44(sp),-(sp)
    d596:	|  |   jsr 11cc6 <strlen>
    d59c:	|  |   addq.l #4,sp
    d59e:	|  |   move.l d0,d1
    d5a0:	|  |   move.l 12(sp),d0
    d5a4:	|  |   cmp.l d1,d0
    d5a6:	|  +-- bls.s d5ac <builtIn_substring+0xf0>
            start = 0;
    d5a8:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    d5ac:	|  \-> move.l 8(sp),d0
    d5b0:	|  /-- bpl.s d5b6 <builtIn_substring+0xfa>
        length = 0;
    d5b2:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    d5b6:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    d5bc:	|      move.l 12(sp),d1
    d5c0:	|      move.l 8(sp),d0
    d5c4:	|      move.l d1,d2
    d5c6:	|      add.l d0,d2
    d5c8:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    d5cc:	|      move.l 36(sp),d0
    d5d0:	|      sub.l 40(sp),d0
    d5d4:	|      addq.l #1,d0
    d5d6:	|      move.l d0,32(sp)
    d5da:	|      clr.l 28(sp)
    d5de:	|      move.l 19b50 <SysBase>,d0
    d5e4:	|      movea.l d0,a6
    d5e6:	|      move.l 32(sp),d0
    d5ea:	|      move.l 28(sp),d1
    d5ee:	|      jsr -684(a6)
    d5f2:	|      move.l d0,24(sp)
    d5f6:	|      move.l 24(sp),d0
    d5fa:	|      move.l d0,20(sp)
    if (!newString) {
    d5fe:	|  /-- bne.s d604 <builtIn_substring+0x148>
        return BR_ERROR;
    d600:	|  |   moveq #1,d0
    d602:	+--|-- bra.s d664 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    d604:	|  \-> move.l 36(sp),d0
    d608:	|      sub.l 40(sp),d0
    d60c:	|      move.l d0,d1
    d60e:	|      move.l 40(sp),d0
    d612:	|      add.l 44(sp),d0
    d616:	|      move.l d1,-(sp)
    d618:	|      move.l d0,-(sp)
    d61a:	|      move.l 28(sp),-(sp)
    d61e:	|      jsr 147d6 <memcpy>
    d624:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    d628:	|      move.l 36(sp),d0
    d62c:	|      sub.l 40(sp),d0
    d630:	|      movea.l 20(sp),a0
    d634:	|      adda.l d0,a0
    d636:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    d638:	|      moveq #28,d0
    d63a:	|      add.l 56(sp),d0
    d63e:	|      move.l 20(sp),-(sp)
    d642:	|      move.l d0,-(sp)
    d644:	|      jsr 129fc <makeTextVar>
    d64a:	|      addq.l #8,sp
    FreeVec(newString);
    d64c:	|      move.l 20(sp),16(sp)
    d652:	|      move.l 19b50 <SysBase>,d0
    d658:	|      movea.l d0,a6
    d65a:	|      movea.l 16(sp),a1
    d65e:	|      jsr -690(a6)
    return BR_CONTINUE;
    d662:	|      moveq #2,d0
}
    d664:	\----> move.l (sp)+,d2
    d666:	       movea.l (sp)+,a6
    d668:	       lea 40(sp),sp
    d66c:	       rts

0000d66e <builtIn_stringLength>:

builtIn(stringLength)
{
    d66e:	subq.l #8,sp
    d670:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d672:	movea.l 20(sp),a0
    d676:	move.l 24(a0),d0
    d67a:	move.l d0,-(sp)
    d67c:	jsr 12db0 <getTextFromAnyVar>
    d682:	addq.l #4,sp
    d684:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    d688:	moveq #24,d0
    d68a:	add.l 20(sp),d0
    d68e:	move.l d0,-(sp)
    d690:	jsr 1315e <trimStack>
    d696:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    d698:	move.l 8(sp),-(sp)
    d69c:	jsr 11cc6 <strlen>
    d6a2:	addq.l #4,sp
    d6a4:	move.l d0,d1
    d6a6:	moveq #28,d0
    d6a8:	add.l 20(sp),d0
    d6ac:	move.l d1,-(sp)
    d6ae:	pea 1 <_start+0x1>
    d6b2:	move.l d0,-(sp)
    d6b4:	jsr 130cc <setVariable>
    d6ba:	lea 12(sp),sp
	FreeVec(newText);
    d6be:	move.l 8(sp),4(sp)
    d6c4:	move.l 19b50 <SysBase>,d0
    d6ca:	movea.l d0,a6
    d6cc:	movea.l 4(sp),a1
    d6d0:	jsr -690(a6)
	return BR_CONTINUE;
    d6d4:	moveq #2,d0
}
    d6d6:	movea.l (sp)+,a6
    d6d8:	addq.l #8,sp
    d6da:	rts

0000d6dc <builtIn_newStack>:

builtIn(newStack)
{
    d6dc:	             lea -12(sp),sp
    d6e0:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    d6e2:	             moveq #28,d0
    d6e4:	             add.l 24(sp),d0
    d6e8:	             move.l d0,-(sp)
    d6ea:	             jsr 12a28 <unlinkVar>
    d6f0:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    d6f2:	             movea.l 24(sp),a0
    d6f6:	             moveq #6,d0
    d6f8:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    d6fc:	             moveq #12,d1
    d6fe:	             move.l d1,12(sp)
    d702:	             clr.l 8(sp)
    d706:	             move.l 19b50 <SysBase>,d0
    d70c:	             movea.l d0,a6
    d70e:	             move.l 12(sp),d0
    d712:	             move.l 8(sp),d1
    d716:	             jsr -684(a6)
    d71a:	             move.l d0,4(sp)
    d71e:	             move.l 4(sp),d0
    d722:	             movea.l 24(sp),a0
    d726:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    d72a:	             movea.l 24(sp),a0
    d72e:	             move.l 32(a0),d0
    d732:	         /-- bne.s d73a <builtIn_newStack+0x5e>
    d734:	         |   moveq #1,d0
    d736:	/--------|-- bra.w d7cc <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    d73a:	|        \-> movea.l 24(sp),a0
    d73e:	|            movea.l 32(a0),a0
    d742:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    d744:	|            movea.l 24(sp),a0
    d748:	|            movea.l 32(a0),a0
    d74c:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    d750:	|            movea.l 24(sp),a0
    d754:	|            movea.l 32(a0),a0
    d758:	|            moveq #1,d0
    d75a:	|            move.l d0,8(a0)
    
    while (numParams--) {
    d75e:	|     /----- bra.s d7ba <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    d760:	|  /--|----> movea.l 24(sp),a0
    d764:	|  |  |      move.l 32(a0),d0
    d768:	|  |  |      move.l d0,d1
    d76a:	|  |  |      movea.l 24(sp),a0
    d76e:	|  |  |      move.l 24(a0),d0
    d772:	|  |  |      move.l d1,-(sp)
    d774:	|  |  |      move.l d0,-(sp)
    d776:	|  |  |      jsr 12016 <addVarToStack>
    d77c:	|  |  |      addq.l #8,sp
    d77e:	|  |  |      tst.w d0
    d780:	|  |  |  /-- bne.s d786 <builtIn_newStack+0xaa>
    d782:	|  |  |  |   moveq #1,d0
    d784:	+--|--|--|-- bra.s d7cc <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    d786:	|  |  |  \-> movea.l 24(sp),a0
    d78a:	|  |  |      movea.l 32(a0),a0
    d78e:	|  |  |      move.l 4(a0),d0
    d792:	|  |  |  /-- bne.s d7aa <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    d794:	|  |  |  |   movea.l 24(sp),a0
    d798:	|  |  |  |   movea.l 32(a0),a1
    d79c:	|  |  |  |   movea.l 24(sp),a0
    d7a0:	|  |  |  |   movea.l 32(a0),a0
    d7a4:	|  |  |  |   move.l (a1),d0
    d7a6:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    d7aa:	|  |  |  \-> moveq #24,d0
    d7ac:	|  |  |      add.l 24(sp),d0
    d7b0:	|  |  |      move.l d0,-(sp)
    d7b2:	|  |  |      jsr 1315e <trimStack>
    d7b8:	|  |  |      addq.l #4,sp
    while (numParams--) {
    d7ba:	|  |  \----> move.l 20(sp),d0
    d7be:	|  |         move.l d0,d1
    d7c0:	|  |         subq.l #1,d1
    d7c2:	|  |         move.l d1,20(sp)
    d7c6:	|  |         tst.l d0
    d7c8:	|  \-------- bne.s d760 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    d7ca:	|            moveq #2,d0
}
    d7cc:	\----------> movea.l (sp)+,a6
    d7ce:	             lea 12(sp),sp
    d7d2:	             rts

0000d7d4 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    d7d4:	          movea.l 8(sp),a0
    d7d8:	          movea.l 24(a0),a0
    d7dc:	          move.l (a0),d0
    d7de:	          moveq #6,d1
    d7e0:	          cmp.l d0,d1
    d7e2:	      /-- beq.s d7fe <builtIn_stackSize+0x2a>
    d7e4:	      |   moveq #10,d1
    d7e6:	      |   cmp.l d0,d1
    d7e8:	   /--|-- beq.s d842 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    d7ea:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    d7ec:	   |  |   pea 16b76 <PutChar+0x1a04>
    d7f2:	   |  |   jsr 14822 <KPrintF>
    d7f8:	   |  |   addq.l #4,sp
	return BR_ERROR;
    d7fa:	   |  |   moveq #1,d0
    d7fc:	/--|--|-- bra.s d87c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    d7fe:	|  |  \-> movea.l 8(sp),a0
    d802:	|  |      movea.l 24(a0),a0
    d806:	|  |      move.l 4(a0),d0
    d80a:	|  |      move.l d0,-(sp)
    d80c:	|  |      jsr 1313a <stackSize>
    d812:	|  |      addq.l #4,sp
    d814:	|  |      move.l d0,d1
    d816:	|  |      moveq #28,d0
    d818:	|  |      add.l 8(sp),d0
    d81c:	|  |      move.l d1,-(sp)
    d81e:	|  |      pea 1 <_start+0x1>
    d822:	|  |      move.l d0,-(sp)
    d824:	|  |      jsr 130cc <setVariable>
    d82a:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    d82e:	|  |      moveq #24,d0
    d830:	|  |      add.l 8(sp),d0
    d834:	|  |      move.l d0,-(sp)
    d836:	|  |      jsr 1315e <trimStack>
    d83c:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    d83e:	|  |      moveq #2,d0
    d840:	+--|----- bra.s d87c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    d842:	|  \----> movea.l 8(sp),a0
    d846:	|         movea.l 24(a0),a0
    d84a:	|         movea.l 4(a0),a0
    d84e:	|         move.l 4(a0),d1
    d852:	|         moveq #28,d0
    d854:	|         add.l 8(sp),d0
    d858:	|         move.l d1,-(sp)
    d85a:	|         pea 1 <_start+0x1>
    d85e:	|         move.l d0,-(sp)
    d860:	|         jsr 130cc <setVariable>
    d866:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    d86a:	|         moveq #24,d0
    d86c:	|         add.l 8(sp),d0
    d870:	|         move.l d0,-(sp)
    d872:	|         jsr 1315e <trimStack>
    d878:	|         addq.l #4,sp
			return BR_CONTINUE;
    d87a:	|         moveq #2,d0
}
    d87c:	\-------> rts

0000d87e <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    d87e:	       movea.l 8(sp),a0
    d882:	       movea.l 24(a0),a0
    d886:	       move.l (a0),d0
    d888:	       moveq #6,d1
    d88a:	       cmp.l d0,d1
    d88c:	   /-- beq.s d8a0 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    d88e:	   |   pea 16b9f <PutChar+0x1a2d>
    d894:	   |   jsr 14822 <KPrintF>
    d89a:	   |   addq.l #4,sp
		return BR_ERROR;
    d89c:	   |   moveq #1,d0
    d89e:	/--|-- bra.s d8d4 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    d8a0:	|  \-> moveq #28,d0
    d8a2:	|      add.l 8(sp),d0
    d8a6:	|      movea.l 8(sp),a0
    d8aa:	|      move.l 24(a0),d1
    d8ae:	|      move.l d0,-(sp)
    d8b0:	|      move.l d1,-(sp)
    d8b2:	|      jsr 122e0 <copyStack>
    d8b8:	|      addq.l #8,sp
    d8ba:	|      tst.w d0
    d8bc:	|  /-- bne.s d8c2 <builtIn_copyStack+0x44>
    d8be:	|  |   moveq #1,d0
    d8c0:	+--|-- bra.s d8d4 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    d8c2:	|  \-> moveq #24,d0
    d8c4:	|      add.l 8(sp),d0
    d8c8:	|      move.l d0,-(sp)
    d8ca:	|      jsr 1315e <trimStack>
    d8d0:	|      addq.l #4,sp
	return BR_CONTINUE;
    d8d2:	|      moveq #2,d0
}
    d8d4:	\----> rts

0000d8d6 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    d8d6:	       movea.l 8(sp),a0
    d8da:	       movea.l 24(a0),a0
    d8de:	       movea.l 8(a0),a0
    d8e2:	       move.l (a0),d0
    d8e4:	       moveq #6,d1
    d8e6:	       cmp.l d0,d1
    d8e8:	   /-- beq.s d8fe <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    d8ea:	   |   pea 16bb8 <PutChar+0x1a46>
    d8f0:	   |   jsr 14822 <KPrintF>
    d8f6:	   |   addq.l #4,sp
		return BR_ERROR;
    d8f8:	   |   moveq #1,d0
    d8fa:	/--|-- bra.w d98c <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    d8fe:	|  \-> movea.l 8(sp),a0
    d902:	|      movea.l 24(a0),a0
    d906:	|      movea.l 8(a0),a0
    d90a:	|      move.l 4(a0),d0
    d90e:	|      move.l d0,d1
    d910:	|      movea.l 8(sp),a0
    d914:	|      move.l 24(a0),d0
    d918:	|      move.l d1,-(sp)
    d91a:	|      move.l d0,-(sp)
    d91c:	|      jsr 12016 <addVarToStack>
    d922:	|      addq.l #8,sp
    d924:	|      tst.w d0
    d926:	|  /-- bne.s d92c <builtIn_pushToStack+0x56>
		return BR_ERROR;
    d928:	|  |   moveq #1,d0
    d92a:	+--|-- bra.s d98c <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    d92c:	|  \-> movea.l 8(sp),a0
    d930:	|      movea.l 24(a0),a0
    d934:	|      movea.l 8(a0),a0
    d938:	|      movea.l 4(a0),a0
    d93c:	|      movea.l (a0),a0
    d93e:	|      move.l 8(a0),d0
    d942:	|  /-- bne.s d96a <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    d944:	|  |   movea.l 8(sp),a0
    d948:	|  |   movea.l 24(a0),a0
    d94c:	|  |   movea.l 8(a0),a0
    d950:	|  |   movea.l 4(a0),a1
    d954:	|  |   movea.l 8(sp),a0
    d958:	|  |   movea.l 24(a0),a0
    d95c:	|  |   movea.l 8(a0),a0
    d960:	|  |   movea.l 4(a0),a0
    d964:	|  |   move.l (a1),d0
    d966:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    d96a:	|  \-> moveq #24,d0
    d96c:	|      add.l 8(sp),d0
    d970:	|      move.l d0,-(sp)
    d972:	|      jsr 1315e <trimStack>
    d978:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    d97a:	|      moveq #24,d0
    d97c:	|      add.l 8(sp),d0
    d980:	|      move.l d0,-(sp)
    d982:	|      jsr 1315e <trimStack>
    d988:	|      addq.l #4,sp
	return BR_CONTINUE;
    d98a:	|      moveq #2,d0
}
    d98c:	\----> rts

0000d98e <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    d98e:	             movea.l 8(sp),a0
    d992:	             movea.l 24(a0),a0
    d996:	             movea.l 8(a0),a0
    d99a:	             move.l (a0),d0
    d99c:	             moveq #6,d1
    d99e:	             cmp.l d0,d1
    d9a0:	         /-- beq.s d9b6 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    d9a2:	         |   pea 16bb8 <PutChar+0x1a46>
    d9a8:	         |   jsr 14822 <KPrintF>
    d9ae:	         |   addq.l #4,sp
		return BR_ERROR;
    d9b0:	         |   moveq #1,d0
    d9b2:	/--------|-- bra.w daa4 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    d9b6:	|        \-> movea.l 8(sp),a0
    d9ba:	|            movea.l 24(a0),a0
    d9be:	|            movea.l 8(a0),a0
    d9c2:	|            movea.l 4(a0),a0
    d9c6:	|            move.l (a0),d0
    d9c8:	|     /----- bne.s da22 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    d9ca:	|     |      movea.l 8(sp),a0
    d9ce:	|     |      movea.l 24(a0),a0
    d9d2:	|     |      movea.l 8(a0),a0
    d9d6:	|     |      move.l 4(a0),d0
    d9da:	|     |      move.l d0,d1
    d9dc:	|     |      movea.l 8(sp),a0
    d9e0:	|     |      move.l 24(a0),d0
    d9e4:	|     |      move.l d1,-(sp)
    d9e6:	|     |      move.l d0,-(sp)
    d9e8:	|     |      jsr 12016 <addVarToStack>
    d9ee:	|     |      addq.l #8,sp
    d9f0:	|     |      tst.w d0
    d9f2:	|     |  /-- bne.s d9fa <builtIn_enqueue+0x6c>
			return BR_ERROR;
    d9f4:	|     |  |   moveq #1,d0
    d9f6:	+-----|--|-- bra.w daa4 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    d9fa:	|     |  \-> movea.l 8(sp),a0
    d9fe:	|     |      movea.l 24(a0),a0
    da02:	|     |      movea.l 8(a0),a0
    da06:	|     |      movea.l 4(a0),a1
    da0a:	|     |      movea.l 8(sp),a0
    da0e:	|     |      movea.l 24(a0),a0
    da12:	|     |      movea.l 8(a0),a0
    da16:	|     |      movea.l 4(a0),a0
    da1a:	|     |      move.l (a1),d0
    da1c:	|     |      move.l d0,4(a0)
    da20:	|  /--|----- bra.s da82 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    da22:	|  |  \----> movea.l 8(sp),a0
    da26:	|  |         movea.l 24(a0),a0
    da2a:	|  |         movea.l 8(a0),a0
    da2e:	|  |         movea.l 4(a0),a0
    da32:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    da36:	|  |         move.l d0,d1
    da38:	|  |         addq.l #8,d1
    da3a:	|  |         movea.l 8(sp),a0
    da3e:	|  |         move.l 24(a0),d0
    da42:	|  |         move.l d1,-(sp)
    da44:	|  |         move.l d0,-(sp)
    da46:	|  |         jsr 12016 <addVarToStack>
    da4c:	|  |         addq.l #8,sp
    da4e:	|  |         tst.w d0
    da50:	|  |     /-- bne.s da56 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    da52:	|  |     |   moveq #1,d0
    da54:	+--|-----|-- bra.s daa4 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    da56:	|  |     \-> movea.l 8(sp),a0
    da5a:	|  |         movea.l 24(a0),a0
    da5e:	|  |         movea.l 8(a0),a0
    da62:	|  |         movea.l 4(a0),a0
    da66:	|  |         movea.l 4(a0),a1
    da6a:	|  |         movea.l 8(sp),a0
    da6e:	|  |         movea.l 24(a0),a0
    da72:	|  |         movea.l 8(a0),a0
    da76:	|  |         movea.l 4(a0),a0
    da7a:	|  |         move.l 8(a1),d0
    da7e:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    da82:	|  \-------> moveq #24,d0
    da84:	|            add.l 8(sp),d0
    da88:	|            move.l d0,-(sp)
    da8a:	|            jsr 1315e <trimStack>
    da90:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    da92:	|            moveq #24,d0
    da94:	|            add.l 8(sp),d0
    da98:	|            move.l d0,-(sp)
    da9a:	|            jsr 1315e <trimStack>
    daa0:	|            addq.l #4,sp
	return BR_CONTINUE;
    daa2:	|            moveq #2,d0
}
    daa4:	\----------> rts

0000daa6 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    daa6:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    daa8:	       movea.l 12(sp),a0
    daac:	       movea.l 24(a0),a0
    dab0:	       movea.l 8(a0),a0
    dab4:	       move.l (a0),d0
    dab6:	       moveq #6,d1
    dab8:	       cmp.l d0,d1
    daba:	   /-- beq.s dad0 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    dabc:	   |   pea 16b9f <PutChar+0x1a2d>
    dac2:	   |   jsr 14822 <KPrintF>
    dac8:	   |   addq.l #4,sp
		return BR_ERROR;
    daca:	   |   moveq #1,d0
    dacc:	/--|-- bra.w db66 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    dad0:	|  \-> movea.l 12(sp),a0
    dad4:	|      movea.l 24(a0),a0
    dad8:	|      movea.l 8(a0),a0
    dadc:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    dae0:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    dae2:	|      movea.l 12(sp),a0
    dae6:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    daea:	|      clr.l -(sp)
    daec:	|      move.l d1,-(sp)
    daee:	|      move.l d0,-(sp)
    daf0:	|      jsr 123b6 <deleteVarFromStack>
    daf6:	|      lea 12(sp),sp
    dafa:	|      move.l d0,d1
    dafc:	|      moveq #28,d0
    dafe:	|      add.l 12(sp),d0
    db02:	|      move.l d1,-(sp)
    db04:	|      pea 1 <_start+0x1>
    db08:	|      move.l d0,-(sp)
    db0a:	|      jsr 130cc <setVariable>
    db10:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    db14:	|      movea.l 12(sp),a0
    db18:	|      movea.l 24(a0),a0
    db1c:	|      movea.l 8(a0),a0
    db20:	|      movea.l 4(a0),a0
    db24:	|      move.l (a0),d0
    db26:	|      movea.l 12(sp),a0
    db2a:	|      movea.l 24(a0),a0
    db2e:	|      movea.l 8(a0),a0
    db32:	|      movea.l 4(a0),a2
    db36:	|      move.l d0,-(sp)
    db38:	|      jsr 13116 <stackFindLast>
    db3e:	|      addq.l #4,sp
    db40:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    db44:	|      moveq #24,d0
    db46:	|      add.l 12(sp),d0
    db4a:	|      move.l d0,-(sp)
    db4c:	|      jsr 1315e <trimStack>
    db52:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    db54:	|      moveq #24,d0
    db56:	|      add.l 12(sp),d0
    db5a:	|      move.l d0,-(sp)
    db5c:	|      jsr 1315e <trimStack>
    db62:	|      addq.l #4,sp
	return BR_CONTINUE;
    db64:	|      moveq #2,d0
}
    db66:	\----> movea.l (sp)+,a2
    db68:	       rts

0000db6a <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    db6a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    db6c:	       movea.l 12(sp),a0
    db70:	       movea.l 24(a0),a0
    db74:	       movea.l 8(a0),a0
    db78:	       move.l (a0),d0
    db7a:	       moveq #6,d1
    db7c:	       cmp.l d0,d1
    db7e:	   /-- beq.s db94 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    db80:	   |   pea 16b9f <PutChar+0x1a2d>
    db86:	   |   jsr 14822 <KPrintF>
    db8c:	   |   addq.l #4,sp
		return BR_ERROR;
    db8e:	   |   moveq #1,d0
    db90:	/--|-- bra.w dc2c <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    db94:	|  \-> movea.l 12(sp),a0
    db98:	|      movea.l 24(a0),a0
    db9c:	|      movea.l 8(a0),a0
    dba0:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    dba4:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    dba6:	|      movea.l 12(sp),a0
    dbaa:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    dbae:	|      pea 1 <_start+0x1>
    dbb2:	|      move.l d1,-(sp)
    dbb4:	|      move.l d0,-(sp)
    dbb6:	|      jsr 123b6 <deleteVarFromStack>
    dbbc:	|      lea 12(sp),sp
    dbc0:	|      move.l d0,d1
    dbc2:	|      moveq #28,d0
    dbc4:	|      add.l 12(sp),d0
    dbc8:	|      move.l d1,-(sp)
    dbca:	|      pea 1 <_start+0x1>
    dbce:	|      move.l d0,-(sp)
    dbd0:	|      jsr 130cc <setVariable>
    dbd6:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    dbda:	|      movea.l 12(sp),a0
    dbde:	|      movea.l 24(a0),a0
    dbe2:	|      movea.l 8(a0),a0
    dbe6:	|      movea.l 4(a0),a0
    dbea:	|      move.l (a0),d0
    dbec:	|      movea.l 12(sp),a0
    dbf0:	|      movea.l 24(a0),a0
    dbf4:	|      movea.l 8(a0),a0
    dbf8:	|      movea.l 4(a0),a2
    dbfc:	|      move.l d0,-(sp)
    dbfe:	|      jsr 13116 <stackFindLast>
    dc04:	|      addq.l #4,sp
    dc06:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    dc0a:	|      moveq #24,d0
    dc0c:	|      add.l 12(sp),d0
    dc10:	|      move.l d0,-(sp)
    dc12:	|      jsr 1315e <trimStack>
    dc18:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    dc1a:	|      moveq #24,d0
    dc1c:	|      add.l 12(sp),d0
    dc20:	|      move.l d0,-(sp)
    dc22:	|      jsr 1315e <trimStack>
    dc28:	|      addq.l #4,sp
	return BR_CONTINUE;
    dc2a:	|      moveq #2,d0
}
    dc2c:	\----> movea.l (sp)+,a2
    dc2e:	       rts

0000dc30 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    dc30:	       movea.l 8(sp),a0
    dc34:	       movea.l 24(a0),a0
    dc38:	       move.l (a0),d0
    dc3a:	       moveq #6,d1
    dc3c:	       cmp.l d0,d1
    dc3e:	   /-- beq.s dc52 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    dc40:	   |   pea 16b9f <PutChar+0x1a2d>
    dc46:	   |   jsr 14822 <KPrintF>
    dc4c:	   |   addq.l #4,sp
		return BR_ERROR;
    dc4e:	   |   moveq #1,d0
    dc50:	/--|-- bra.s dcbc <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    dc52:	|  \-> movea.l 8(sp),a0
    dc56:	|      movea.l 24(a0),a0
    dc5a:	|      movea.l 4(a0),a0
    dc5e:	|      move.l (a0),d0
    dc60:	|  /-- bne.s dc74 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    dc62:	|  |   pea 16bd0 <PutChar+0x1a5e>
    dc68:	|  |   jsr 14822 <KPrintF>
    dc6e:	|  |   addq.l #4,sp
		return BR_ERROR;
    dc70:	|  |   moveq #1,d0
    dc72:	+--|-- bra.s dcbc <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    dc74:	|  \-> moveq #28,d0
    dc76:	|      add.l 8(sp),d0
    dc7a:	|      movea.l 8(sp),a0
    dc7e:	|      movea.l 24(a0),a0
    dc82:	|      movea.l 4(a0),a0
    dc86:	|      move.l (a0),d1
    dc88:	|      move.l d0,-(sp)
    dc8a:	|      move.l d1,-(sp)
    dc8c:	|      jsr 12c94 <copyVariable>
    dc92:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    dc94:	|      movea.l 8(sp),a0
    dc98:	|      movea.l 24(a0),a0
    dc9c:	|      move.l 4(a0),d0
    dca0:	|      move.l d0,-(sp)
    dca2:	|      jsr 1315e <trimStack>
    dca8:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    dcaa:	|      moveq #24,d0
    dcac:	|      add.l 8(sp),d0
    dcb0:	|      move.l d0,-(sp)
    dcb2:	|      jsr 1315e <trimStack>
    dcb8:	|      addq.l #4,sp
	return BR_CONTINUE;
    dcba:	|      moveq #2,d0
}
    dcbc:	\----> rts

0000dcbe <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    dcbe:	       movea.l 8(sp),a0
    dcc2:	       movea.l 24(a0),a0
    dcc6:	       move.l (a0),d0
    dcc8:	       moveq #6,d1
    dcca:	       cmp.l d0,d1
    dccc:	   /-- beq.s dce0 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    dcce:	   |   pea 16b9f <PutChar+0x1a2d>
    dcd4:	   |   jsr 14822 <KPrintF>
    dcda:	   |   addq.l #4,sp
		return BR_ERROR;
    dcdc:	   |   moveq #1,d0
    dcde:	/--|-- bra.s dd34 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    dce0:	|  \-> movea.l 8(sp),a0
    dce4:	|      movea.l 24(a0),a0
    dce8:	|      movea.l 4(a0),a0
    dcec:	|      move.l (a0),d0
    dcee:	|  /-- bne.s dd02 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    dcf0:	|  |   pea 16bd0 <PutChar+0x1a5e>
    dcf6:	|  |   jsr 14822 <KPrintF>
    dcfc:	|  |   addq.l #4,sp
		return BR_ERROR;
    dcfe:	|  |   moveq #1,d0
    dd00:	+--|-- bra.s dd34 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    dd02:	|  \-> moveq #28,d0
    dd04:	|      add.l 8(sp),d0
    dd08:	|      movea.l 8(sp),a0
    dd0c:	|      movea.l 24(a0),a0
    dd10:	|      movea.l 4(a0),a0
    dd14:	|      move.l (a0),d1
    dd16:	|      move.l d0,-(sp)
    dd18:	|      move.l d1,-(sp)
    dd1a:	|      jsr 12c94 <copyVariable>
    dd20:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    dd22:	|      moveq #24,d0
    dd24:	|      add.l 8(sp),d0
    dd28:	|      move.l d0,-(sp)
    dd2a:	|      jsr 1315e <trimStack>
    dd30:	|      addq.l #4,sp
	return BR_CONTINUE;
    dd32:	|      moveq #2,d0
}
    dd34:	\----> rts

0000dd36 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    dd36:	       movea.l 8(sp),a0
    dd3a:	       movea.l 24(a0),a0
    dd3e:	       move.l (a0),d0
    dd40:	       moveq #6,d1
    dd42:	       cmp.l d0,d1
    dd44:	   /-- beq.s dd58 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    dd46:	   |   pea 16b9f <PutChar+0x1a2d>
    dd4c:	   |   jsr 14822 <KPrintF>
    dd52:	   |   addq.l #4,sp
		return BR_ERROR;
    dd54:	   |   moveq #1,d0
    dd56:	/--|-- bra.s ddae <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    dd58:	|  \-> movea.l 8(sp),a0
    dd5c:	|      movea.l 24(a0),a0
    dd60:	|      movea.l 4(a0),a0
    dd64:	|      move.l (a0),d0
    dd66:	|  /-- bne.s dd7a <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    dd68:	|  |   pea 16bd0 <PutChar+0x1a5e>
    dd6e:	|  |   jsr 14822 <KPrintF>
    dd74:	|  |   addq.l #4,sp
		return BR_ERROR;
    dd76:	|  |   moveq #1,d0
    dd78:	+--|-- bra.s ddae <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    dd7a:	|  \-> moveq #28,d0
    dd7c:	|      add.l 8(sp),d0
    dd80:	|      movea.l 8(sp),a0
    dd84:	|      movea.l 24(a0),a0
    dd88:	|      movea.l 4(a0),a0
    dd8c:	|      move.l 4(a0),d1
    dd90:	|      move.l d0,-(sp)
    dd92:	|      move.l d1,-(sp)
    dd94:	|      jsr 12c94 <copyVariable>
    dd9a:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    dd9c:	|      moveq #24,d0
    dd9e:	|      add.l 8(sp),d0
    dda2:	|      move.l d0,-(sp)
    dda4:	|      jsr 1315e <trimStack>
    ddaa:	|      addq.l #4,sp
	return BR_CONTINUE;
    ddac:	|      moveq #2,d0
}
    ddae:	\----> rts

0000ddb0 <builtIn_random>:

builtIn(random)
{
    ddb0:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    ddb2:	       movea.l 12(sp),a0
    ddb6:	       move.l 24(a0),d0
    ddba:	       move.l d0,-(sp)
    ddbc:	       pea 1 <_start+0x1>
    ddc0:	       move.l sp,d0
    ddc2:	       addq.l #8,d0
    ddc4:	       move.l d0,-(sp)
    ddc6:	       jsr 127da <getValueType>
    ddcc:	       lea 12(sp),sp
    ddd0:	       tst.w d0
    ddd2:	   /-- bne.s ddd8 <builtIn_random+0x28>
		return BR_ERROR;
    ddd4:	   |   moveq #1,d0
    ddd6:	/--|-- bra.s de22 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    ddd8:	|  \-> moveq #24,d0
    ddda:	|      add.l 12(sp),d0
    ddde:	|      move.l d0,-(sp)
    dde0:	|      jsr 1315e <trimStack>
    dde6:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    dde8:	|      move.l (sp),d0
    ddea:	|  /-- bgt.s ddf0 <builtIn_random+0x40>
    ddec:	|  |   moveq #1,d0
    ddee:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    ddf0:	|  \-> jsr c58 <rand>
    ddf6:	|      move.l d0,d1
    ddf8:	|      move.l (sp),d0
    ddfa:	|      move.l d0,-(sp)
    ddfc:	|      move.l d1,-(sp)
    ddfe:	|      jsr 15136 <__umodsi3>
    de04:	|      addq.l #8,sp
    de06:	|      move.l d0,d1
    de08:	|      moveq #28,d0
    de0a:	|      add.l 12(sp),d0
    de0e:	|      move.l d1,-(sp)
    de10:	|      pea 1 <_start+0x1>
    de14:	|      move.l d0,-(sp)
    de16:	|      jsr 130cc <setVariable>
    de1c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    de20:	|      moveq #2,d0
}
    de22:	\----> addq.l #4,sp
    de24:	       rts

0000de26 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    de26:	nop
    de28:	rts

0000de2a <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    de2a:	moveq #2,d0
}
    de2c:	rts

0000de2e <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    de2e:	moveq #2,d0
}
    de30:	rts

0000de32 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    de32:	moveq #2,d0
}
    de34:	rts

0000de36 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    de36:	moveq #2,d0
}
    de38:	rts

0000de3a <builtIn_setFont>:


builtIn(setFont)
{
    de3a:	       lea -16(sp),sp
    de3e:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    de40:	       movea.l 28(sp),a0
    de44:	       move.l 24(a0),d0
    de48:	       move.l d0,-(sp)
    de4a:	       pea 1 <_start+0x1>
    de4e:	       lea 12(sp),a0
    de52:	       move.l a0,-(sp)
    de54:	       jsr 127da <getValueType>
    de5a:	       lea 12(sp),sp
    de5e:	       tst.w d0
    de60:	   /-- bne.s de68 <builtIn_setFont+0x2e>
    de62:	   |   moveq #1,d0
    de64:	/--|-- bra.w df16 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    de68:	|  \-> moveq #24,d0
    de6a:	|      add.l 28(sp),d0
    de6e:	|      move.l d0,-(sp)
    de70:	|      jsr 1315e <trimStack>
    de76:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    de78:	|      movea.l 28(sp),a0
    de7c:	|      move.l 24(a0),d0
    de80:	|      move.l d0,-(sp)
    de82:	|      jsr 12db0 <getTextFromAnyVar>
    de88:	|      addq.l #4,sp
    de8a:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    de8e:	|  /-- bne.s de96 <builtIn_setFont+0x5c>
    de90:	|  |   moveq #1,d0
    de92:	+--|-- bra.w df16 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    de96:	|  \-> moveq #24,d0
    de98:	|      add.l 28(sp),d0
    de9c:	|      move.l d0,-(sp)
    de9e:	|      jsr 1315e <trimStack>
    dea4:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    dea6:	|      movea.l 28(sp),a0
    deaa:	|      move.l 24(a0),d0
    deae:	|      move.l d0,-(sp)
    deb0:	|      pea 5 <_start+0x5>
    deb4:	|      lea 16(sp),a0
    deb8:	|      move.l a0,-(sp)
    deba:	|      jsr 127da <getValueType>
    dec0:	|      lea 12(sp),sp
    dec4:	|      tst.w d0
    dec6:	|  /-- bne.s decc <builtIn_setFont+0x92>
    dec8:	|  |   moveq #1,d0
    deca:	+--|-- bra.s df16 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    decc:	|  \-> moveq #24,d0
    dece:	|      add.l 28(sp),d0
    ded2:	|      move.l d0,-(sp)
    ded4:	|      jsr 1315e <trimStack>
    deda:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    dedc:	|      move.l 4(sp),d1
    dee0:	|      move.l 8(sp),d0
    dee4:	|      move.l d1,-(sp)
    dee6:	|      move.l 20(sp),-(sp)
    deea:	|      move.l d0,-(sp)
    deec:	|      jsr 131d2 <loadFont>
    def2:	|      lea 12(sp),sp
    def6:	|      tst.w d0
    def8:	|  /-- bne.s defe <builtIn_setFont+0xc4>
    defa:	|  |   moveq #1,d0
    defc:	+--|-- bra.s df16 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    defe:	|  \-> move.l 16(sp),12(sp)
    df04:	|      move.l 19b50 <SysBase>,d0
    df0a:	|      movea.l d0,a6
    df0c:	|      movea.l 12(sp),a1
    df10:	|      jsr -690(a6)

    return BR_CONTINUE;
    df14:	|      moveq #2,d0
}
    df16:	\----> movea.l (sp)+,a6
    df18:	       lea 16(sp),sp
    df1c:	       rts

0000df1e <builtIn_inFont>:

builtIn(inFont)
{
    df1e:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    df20:	       movea.l 12(sp),a0
    df24:	       move.l 24(a0),d0
    df28:	       move.l d0,-(sp)
    df2a:	       jsr 12db0 <getTextFromAnyVar>
    df30:	       addq.l #4,sp
    df32:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    df34:	   /-- bne.s df3a <builtIn_inFont+0x1c>
    df36:	   |   moveq #1,d0
    df38:	/--|-- bra.s df70 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    df3a:	|  \-> moveq #24,d0
    df3c:	|      add.l 12(sp),d0
    df40:	|      move.l d0,-(sp)
    df42:	|      jsr 1315e <trimStack>
    df48:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    df4a:	|      move.l (sp),-(sp)
    df4c:	|      jsr 131a6 <isInFont>
    df52:	|      addq.l #4,sp
    df54:	|      movea.w d0,a0
    df56:	|      moveq #28,d0
    df58:	|      add.l 12(sp),d0
    df5c:	|      move.l a0,-(sp)
    df5e:	|      pea 1 <_start+0x1>
    df62:	|      move.l d0,-(sp)
    df64:	|      jsr 130cc <setVariable>
    df6a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    df6e:	|      moveq #2,d0
}
    df70:	\----> addq.l #4,sp
    df72:	       rts

0000df74 <builtIn_pasteString>:

builtIn(pasteString)
{
    df74:	       lea -16(sp),sp
    df78:	       move.l a6,-(sp)
    df7a:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    df7c:	       movea.l 32(sp),a0
    df80:	       move.l 24(a0),d0
    df84:	       move.l d0,-(sp)
    df86:	       jsr 12db0 <getTextFromAnyVar>
    df8c:	       addq.l #4,sp
    df8e:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    df92:	       moveq #24,d0
    df94:	       add.l 32(sp),d0
    df98:	       move.l d0,-(sp)
    df9a:	       jsr 1315e <trimStack>
    dfa0:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    dfa2:	       movea.l 32(sp),a0
    dfa6:	       move.l 24(a0),d0
    dfaa:	       move.l d0,-(sp)
    dfac:	       pea 1 <_start+0x1>
    dfb0:	       lea 20(sp),a0
    dfb4:	       move.l a0,-(sp)
    dfb6:	       jsr 127da <getValueType>
    dfbc:	       lea 12(sp),sp
    dfc0:	       tst.w d0
    dfc2:	   /-- bne.s dfca <builtIn_pasteString+0x56>
    dfc4:	   |   moveq #1,d0
    dfc6:	/--|-- bra.w e052 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    dfca:	|  \-> moveq #24,d0
    dfcc:	|      add.l 32(sp),d0
    dfd0:	|      move.l d0,-(sp)
    dfd2:	|      jsr 1315e <trimStack>
    dfd8:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    dfda:	|      movea.l 32(sp),a0
    dfde:	|      move.l 24(a0),d0
    dfe2:	|      move.l d0,-(sp)
    dfe4:	|      pea 1 <_start+0x1>
    dfe8:	|      lea 16(sp),a0
    dfec:	|      move.l a0,-(sp)
    dfee:	|      jsr 127da <getValueType>
    dff4:	|      lea 12(sp),sp
    dff8:	|      tst.w d0
    dffa:	|  /-- bne.s e000 <builtIn_pasteString+0x8c>
    dffc:	|  |   moveq #1,d0
    dffe:	+--|-- bra.s e052 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    e000:	|  \-> moveq #24,d0
    e002:	|      add.l 32(sp),d0
    e006:	|      move.l d0,-(sp)
    e008:	|      jsr 1315e <trimStack>
    e00e:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    e010:	|      move.l 8(sp),d0
    e014:	|      cmpi.l #65535,d0
    e01a:	|  /-- bne.s e03a <builtIn_pasteString+0xc6>
    e01c:	|  |   move.l 19aa4 <winWidth>,d2
    e022:	|  |   move.l 20(sp),-(sp)
    e026:	|  |   jsr 131b8 <stringWidth>
    e02c:	|  |   addq.l #4,sp
    e02e:	|  |   move.l d2,d1
    e030:	|  |   sub.l d0,d1
    e032:	|  |   move.l d1,d0
    e034:	|  |   lsr.l #1,d0
    e036:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    e03a:	|  \-> move.l 20(sp),16(sp)
    e040:	|      move.l 19b50 <SysBase>,d0
    e046:	|      movea.l d0,a6
    e048:	|      movea.l 16(sp),a1
    e04c:	|      jsr -690(a6)
    return BR_CONTINUE;
    e050:	|      moveq #2,d0
}
    e052:	\----> move.l (sp)+,d2
    e054:	       movea.l (sp)+,a6
    e056:	       lea 16(sp),sp
    e05a:	       rts

0000e05c <builtIn_anim>:

builtIn(anim)
{
    e05c:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    e060:	       moveq #1,d0
    e062:	       cmp.l 16(sp),d0
    e066:	   /-- blt.s e07c <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    e068:	   |   pea 16be3 <PutChar+0x1a71>
    e06e:	   |   jsr 14822 <KPrintF>
    e074:	   |   addq.l #4,sp
		return BR_ERROR;
    e076:	   |   moveq #1,d0
    e078:	/--|-- bra.w e10a <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    e07c:	|  \-> moveq #24,d1
    e07e:	|      add.l 20(sp),d1
    e082:	|      move.l 16(sp),d0
    e086:	|      subq.l #1,d0
    e088:	|      move.l d1,-(sp)
    e08a:	|      move.l d0,-(sp)
    e08c:	|      jsr 79ce <createPersonaAnim>
    e092:	|      addq.l #8,sp
    e094:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e098:	|      movea.l 20(sp),a0
    e09c:	|      move.l 24(a0),d0
    e0a0:	|      move.l d0,-(sp)
    e0a2:	|      pea 5 <_start+0x5>
    e0a6:	|      lea 8(sp),a0
    e0aa:	|      move.l a0,-(sp)
    e0ac:	|      jsr 127da <getValueType>
    e0b2:	|      lea 12(sp),sp
    e0b6:	|      tst.w d0
    e0b8:	|  /-- bne.s e0be <builtIn_anim+0x62>
    e0ba:	|  |   moveq #1,d0
    e0bc:	+--|-- bra.s e10a <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    e0be:	|  \-> moveq #24,d0
    e0c0:	|      add.l 20(sp),d0
    e0c4:	|      move.l d0,-(sp)
    e0c6:	|      jsr 1315e <trimStack>
    e0cc:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    e0ce:	|      move.l (sp),d0
    e0d0:	|      move.l d0,-(sp)
    e0d2:	|      jsr a41c <loadBankForAnim>
    e0d8:	|      addq.l #4,sp
    e0da:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    e0de:	|  /-- bne.s e0e4 <builtIn_anim+0x88>
    e0e0:	|  |   moveq #1,d0
    e0e2:	+--|-- bra.s e10a <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    e0e4:	|  \-> move.l 4(sp),-(sp)
    e0e8:	|      move.l 12(sp),-(sp)
    e0ec:	|      jsr 97d0 <setBankFile>
    e0f2:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    e0f4:	|      moveq #28,d0
    e0f6:	|      add.l 20(sp),d0
    e0fa:	|      move.l 8(sp),-(sp)
    e0fe:	|      move.l d0,-(sp)
    e100:	|      jsr 13088 <newAnimationVariable>
    e106:	|      addq.l #8,sp
	return BR_CONTINUE;
    e108:	|      moveq #2,d0
}
    e10a:	\----> lea 12(sp),sp
    e10e:	       rts

0000e110 <builtIn_costume>:

builtIn(costume)
{
    e110:	          lea -32(sp),sp
    e114:	          move.l a6,-(sp)
    e116:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    e118:	          moveq #8,d0
    e11a:	          move.l d0,32(sp)
    e11e:	          clr.l 28(sp)
    e122:	          move.l 19b50 <SysBase>,d0
    e128:	          movea.l d0,a6
    e12a:	          move.l 32(sp),d0
    e12e:	          move.l 28(sp),d1
    e132:	          jsr -684(a6)
    e136:	          move.l d0,24(sp)
    e13a:	          move.l 24(sp),d0
    e13e:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    e142:	      /-- bne.s e14a <builtIn_costume+0x3a>
    e144:	      |   moveq #1,d0
    e146:	/-----|-- bra.w e232 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    e14a:	|     \-> move.l 44(sp),d0
    e14e:	|         pea 3 <_start+0x3>
    e152:	|         move.l d0,-(sp)
    e154:	|         jsr 150da <__divsi3>
    e15a:	|         addq.l #8,sp
    e15c:	|         movea.l 20(sp),a0
    e160:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    e164:	|         tst.l 44(sp)
    e168:	|     /-- beq.s e17e <builtIn_costume+0x6e>
    e16a:	|     |   movea.l 20(sp),a0
    e16e:	|     |   move.l 4(a0),d1
    e172:	|     |   move.l d1,d0
    e174:	|     |   add.l d0,d0
    e176:	|     |   add.l d1,d0
    e178:	|     |   cmp.l 44(sp),d0
    e17c:	|  /--|-- beq.s e192 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    e17e:	|  |  \-> pea 16c1d <PutChar+0x1aab>
    e184:	|  |      jsr 14822 <KPrintF>
    e18a:	|  |      addq.l #4,sp
        return BR_ERROR;
    e18c:	|  |      moveq #1,d0
    e18e:	+--|----- bra.w e232 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    e192:	|  \----> move.l 44(sp),d0
    e196:	|         add.l d0,d0
    e198:	|         add.l d0,d0
    e19a:	|         move.l d0,16(sp)
    e19e:	|         clr.l 12(sp)
    e1a2:	|         move.l 19b50 <SysBase>,d0
    e1a8:	|         movea.l d0,a6
    e1aa:	|         move.l 16(sp),d0
    e1ae:	|         move.l 12(sp),d1
    e1b2:	|         jsr -684(a6)
    e1b6:	|         move.l d0,8(sp)
    e1ba:	|         move.l 8(sp),d0
    e1be:	|         movea.l 20(sp),a0
    e1c2:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    e1c4:	|         movea.l 20(sp),a0
    e1c8:	|         move.l (a0),d0
    e1ca:	|     /-- bne.s e1d0 <builtIn_costume+0xc0>
    e1cc:	|     |   moveq #1,d0
    e1ce:	+-----|-- bra.s e232 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    e1d0:	|     \-> move.l 44(sp),d0
    e1d4:	|         subq.l #1,d0
    e1d6:	|         move.l d0,36(sp)
    e1da:	|     /-- bra.s e216 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    e1dc:	|  /--|-> movea.l 48(sp),a0
    e1e0:	|  |  |   move.l 24(a0),d0
    e1e4:	|  |  |   movea.l 20(sp),a0
    e1e8:	|  |  |   movea.l (a0),a0
    e1ea:	|  |  |   move.l 36(sp),d1
    e1ee:	|  |  |   add.l d1,d1
    e1f0:	|  |  |   add.l d1,d1
    e1f2:	|  |  |   lea (0,a0,d1.l),a2
    e1f6:	|  |  |   move.l d0,-(sp)
    e1f8:	|  |  |   jsr 12cb2 <getAnimationFromVar>
    e1fe:	|  |  |   addq.l #4,sp
    e200:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    e202:	|  |  |   moveq #24,d0
    e204:	|  |  |   add.l 48(sp),d0
    e208:	|  |  |   move.l d0,-(sp)
    e20a:	|  |  |   jsr 1315e <trimStack>
    e210:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    e212:	|  |  |   subq.l #1,36(sp)
    e216:	|  |  \-> tst.l 36(sp)
    e21a:	|  \----- bge.s e1dc <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    e21c:	|         moveq #28,d0
    e21e:	|         add.l 48(sp),d0
    e222:	|         move.l 20(sp),-(sp)
    e226:	|         move.l d0,-(sp)
    e228:	|         jsr 130aa <newCostumeVariable>
    e22e:	|         addq.l #8,sp
    return BR_CONTINUE;
    e230:	|         moveq #2,d0
}
    e232:	\-------> movea.l (sp)+,a2
    e234:	          movea.l (sp)+,a6
    e236:	          lea 32(sp),sp
    e23a:	          rts

0000e23c <builtIn_launch>:

builtIn(launch)
{
    e23c:	          lea -20(sp),sp
    e240:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    e242:	          movea.l 32(sp),a0
    e246:	          move.l 24(a0),d0
    e24a:	          move.l d0,-(sp)
    e24c:	          jsr 12db0 <getTextFromAnyVar>
    e252:	          addq.l #4,sp
    e254:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    e258:	      /-- bne.s e260 <builtIn_launch+0x24>
    e25a:	      |   moveq #1,d0
    e25c:	/-----|-- bra.w e38e <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    e260:	|     \-> move.l 20(sp),-(sp)
    e264:	|         jsr 2fe <encodeFilename>
    e26a:	|         addq.l #4,sp
    e26c:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    e270:	|         moveq #24,d0
    e272:	|         add.l 32(sp),d0
    e276:	|         move.l d0,-(sp)
    e278:	|         jsr 1315e <trimStack>
    e27e:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    e280:	|         movea.l 20(sp),a0
    e284:	|         move.b (a0),d0
    e286:	|         cmpi.b #104,d0
    e28a:	|  /----- bne.s e2f4 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    e28c:	|  |      movea.l 20(sp),a0
    e290:	|  |      addq.l #1,a0
    e292:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    e294:	|  |      cmpi.b #116,d0
    e298:	|  +----- bne.s e2f4 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    e29a:	|  |      movea.l 20(sp),a0
    e29e:	|  |      addq.l #2,a0
    e2a0:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    e2a2:	|  |      cmpi.b #116,d0
    e2a6:	|  +----- bne.s e2f4 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    e2a8:	|  |      movea.l 20(sp),a0
    e2ac:	|  |      addq.l #3,a0
    e2ae:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    e2b0:	|  |      cmpi.b #112,d0
    e2b4:	|  +----- bne.s e2f4 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    e2b6:	|  |      movea.l 20(sp),a0
    e2ba:	|  |      addq.l #4,a0
    e2bc:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    e2be:	|  |      cmpi.b #58,d0
    e2c2:	|  |  /-- beq.s e2e0 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    e2c4:	|  |  |   movea.l 20(sp),a0
    e2c8:	|  |  |   addq.l #4,a0
    e2ca:	|  |  |   move.b (a0),d0
    e2cc:	|  |  |   cmpi.b #115,d0
    e2d0:	|  +--|-- bne.s e2f4 <builtIn_launch+0xb8>
    e2d2:	|  |  |   movea.l 20(sp),a0
    e2d6:	|  |  |   addq.l #5,a0
    e2d8:	|  |  |   move.b (a0),d0
    e2da:	|  |  |   cmpi.b #58,d0
    e2de:	|  +--|-- bne.s e2f4 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    e2e0:	|  |  \-> move.l 20(sp),-(sp)
    e2e4:	|  |      jsr b8 <copyString>
    e2ea:	|  |      addq.l #4,sp
    e2ec:	|  |      move.l d0,19c66 <launchMe>
    e2f2:	|  |  /-- bra.s e346 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    e2f4:	|  \--|-> move.l 19ab8 <gamePath>,d0
    e2fa:	|     |   pea 16c68 <PutChar+0x1af6>
    e300:	|     |   move.l d0,-(sp)
    e302:	|     |   jsr 11d06 <joinStrings>
    e308:	|     |   addq.l #8,sp
    e30a:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    e30e:	|     |   move.l 16(sp),-(sp)
    e312:	|     |   move.l 16(sp),-(sp)
    e316:	|     |   jsr 11d06 <joinStrings>
    e31c:	|     |   addq.l #8,sp
    e31e:	|     |   move.l d0,19c66 <launchMe>
        FreeVec(newText);
    e324:	|     |   move.l 16(sp),8(sp)
    e32a:	|     |   move.l 19b50 <SysBase>,d0
    e330:	|     |   movea.l d0,a6
    e332:	|     |   movea.l 8(sp),a1
    e336:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    e33a:	|     |   move.l 19c66 <launchMe>,d0
    e340:	|     +-- bne.s e346 <builtIn_launch+0x10a>
    e342:	|     |   moveq #1,d0
    e344:	+-----|-- bra.s e38e <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    e346:	|     \-> move.l 20(sp),4(sp)
    e34c:	|         move.l 19b50 <SysBase>,d0
    e352:	|         movea.l d0,a6
    e354:	|         movea.l 4(sp),a1
    e358:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    e35c:	|         clr.l -(sp)
    e35e:	|         jsr 276e <setGraphicsWindow>
    e364:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    e366:	|         moveq #28,d0
    e368:	|         add.l 32(sp),d0
    e36c:	|         pea 1 <_start+0x1>
    e370:	|         pea 1 <_start+0x1>
    e374:	|         move.l d0,-(sp)
    e376:	|         jsr 130cc <setVariable>
    e37c:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    e380:	|         moveq #28,d0
    e382:	|         add.l 32(sp),d0
    e386:	|         move.l d0,19c6a <launchResult>

    return BR_KEEP_AND_PAUSE;
    e38c:	|         moveq #0,d0
}
    e38e:	\-------> movea.l (sp)+,a6
    e390:	          lea 20(sp),sp
    e394:	          rts

0000e396 <builtIn_pause>:

builtIn(pause)
{
    e396:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e398:	       movea.l 12(sp),a0
    e39c:	       move.l 24(a0),d0
    e3a0:	       move.l d0,-(sp)
    e3a2:	       pea 1 <_start+0x1>
    e3a6:	       move.l sp,d0
    e3a8:	       addq.l #8,d0
    e3aa:	       move.l d0,-(sp)
    e3ac:	       jsr 127da <getValueType>
    e3b2:	       lea 12(sp),sp
    e3b6:	       tst.w d0
    e3b8:	   /-- bne.s e3be <builtIn_pause+0x28>
    e3ba:	   |   moveq #1,d0
    e3bc:	/--|-- bra.s e3ec <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    e3be:	|  \-> moveq #24,d0
    e3c0:	|      add.l 12(sp),d0
    e3c4:	|      move.l d0,-(sp)
    e3c6:	|      jsr 1315e <trimStack>
    e3cc:	|      addq.l #4,sp
	if (theTime > 0) {
    e3ce:	|      move.l (sp),d0
    e3d0:	|  /-- ble.s e3ea <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    e3d2:	|  |   move.l (sp),d0
    e3d4:	|  |   subq.l #1,d0
    e3d6:	|  |   movea.l 12(sp),a0
    e3da:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    e3de:	|  |   movea.l 12(sp),a0
    e3e2:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    e3e6:	|  |   moveq #0,d0
    e3e8:	+--|-- bra.s e3ec <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    e3ea:	|  \-> moveq #2,d0
}
    e3ec:	\----> addq.l #4,sp
    e3ee:	       rts

0000e3f0 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    e3f0:	jsr 2ec2 <completeTimers>
	return BR_CONTINUE;
    e3f6:	moveq #2,d0
}
    e3f8:	rts

0000e3fa <builtIn_callEvent>:

builtIn(callEvent)
{
    e3fa:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e3fe:	       movea.l 20(sp),a0
    e402:	       move.l 24(a0),d0
    e406:	       move.l d0,-(sp)
    e408:	       pea 7 <_start+0x7>
    e40c:	       lea 8(sp),a0
    e410:	       move.l a0,-(sp)
    e412:	       jsr 127da <getValueType>
    e418:	       lea 12(sp),sp
    e41c:	       tst.w d0
    e41e:	   /-- bne.s e426 <builtIn_callEvent+0x2c>
    e420:	   |   moveq #1,d0
    e422:	/--|-- bra.w e4bc <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    e426:	|  \-> moveq #24,d0
    e428:	|      add.l 20(sp),d0
    e42c:	|      move.l d0,-(sp)
    e42e:	|      jsr 1315e <trimStack>
    e434:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e436:	|      movea.l 20(sp),a0
    e43a:	|      move.l 24(a0),d0
    e43e:	|      move.l d0,-(sp)
    e440:	|      pea 7 <_start+0x7>
    e444:	|      moveq #12,d0
    e446:	|      add.l sp,d0
    e448:	|      move.l d0,-(sp)
    e44a:	|      jsr 127da <getValueType>
    e450:	|      lea 12(sp),sp
    e454:	|      tst.w d0
    e456:	|  /-- bne.s e45c <builtIn_callEvent+0x62>
    e458:	|  |   moveq #1,d0
    e45a:	+--|-- bra.s e4bc <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    e45c:	|  \-> moveq #24,d0
    e45e:	|      add.l 20(sp),d0
    e462:	|      move.l d0,-(sp)
    e464:	|      jsr 1315e <trimStack>
    e46a:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    e46c:	|      move.l (sp),d1
    e46e:	|      move.l 4(sp),d0
    e472:	|      move.l d1,-(sp)
    e474:	|      move.l d0,-(sp)
    e476:	|      jsr b644 <getCombinationFunction>
    e47c:	|      addq.l #8,sp
    e47e:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    e482:	|  /-- beq.s e4a2 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    e484:	|  |   moveq #28,d0
    e486:	|  |   add.l 20(sp),d0
    e48a:	|  |   move.l 8(sp),-(sp)
    e48e:	|  |   pea 2 <_start+0x2>
    e492:	|  |   move.l d0,-(sp)
    e494:	|  |   jsr 130cc <setVariable>
    e49a:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    e49e:	|  |   moveq #4,d0
    e4a0:	+--|-- bra.s e4bc <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    e4a2:	|  \-> moveq #28,d0
    e4a4:	|      add.l 20(sp),d0
    e4a8:	|      clr.l -(sp)
    e4aa:	|      pea 1 <_start+0x1>
    e4ae:	|      move.l d0,-(sp)
    e4b0:	|      jsr 130cc <setVariable>
    e4b6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e4ba:	|      moveq #2,d0
}
    e4bc:	\----> lea 12(sp),sp
    e4c0:	       rts

0000e4c2 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    e4c2:	move.w #1,19c76 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    e4ca:	moveq #2,d0
}
    e4cc:	rts

0000e4ce <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    e4ce:	moveq #24,d0
    e4d0:	add.l 8(sp),d0
    e4d4:	move.l d0,-(sp)
    e4d6:	jsr 1315e <trimStack>
    e4dc:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    e4de:	pea 16c6a <PutChar+0x1af8>
    e4e4:	jsr 14822 <KPrintF>
    e4ea:	addq.l #4,sp
	return BR_CONTINUE;
    e4ec:	moveq #2,d0
}
    e4ee:	rts

0000e4f0 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    e4f0:	pea 16c6a <PutChar+0x1af8>
    e4f6:	jsr 14822 <KPrintF>
    e4fc:	addq.l #4,sp
	return BR_CONTINUE;
    e4fe:	moveq #2,d0
}
    e500:	rts

0000e502 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    e502:	pea 16c6a <PutChar+0x1af8>
    e508:	jsr 14822 <KPrintF>
    e50e:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    e510:	moveq #2,d0
}
    e512:	rts

0000e514 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    e514:	pea 16c6a <PutChar+0x1af8>
    e51a:	jsr 14822 <KPrintF>
    e520:	addq.l #4,sp
	return BR_CONTINUE;
    e522:	moveq #2,d0
}
    e524:	rts

0000e526 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    e526:	pea 16c6a <PutChar+0x1af8>
    e52c:	jsr 14822 <KPrintF>
    e532:	addq.l #4,sp
	return BR_CONTINUE;
    e534:	moveq #2,d0
}
    e536:	rts

0000e538 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    e538:	pea 16c6a <PutChar+0x1af8>
    e53e:	jsr 14822 <KPrintF>
    e544:	addq.l #4,sp
	return BR_CONTINUE;
    e546:	moveq #2,d0
}
    e548:	rts

0000e54a <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    e54a:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e54e:	       movea.l 20(sp),a0
    e552:	       move.l 24(a0),d0
    e556:	       move.l d0,-(sp)
    e558:	       pea 1 <_start+0x1>
    e55c:	       moveq #16,d0
    e55e:	       add.l sp,d0
    e560:	       move.l d0,-(sp)
    e562:	       jsr 127da <getValueType>
    e568:	       lea 12(sp),sp
    e56c:	       tst.w d0
    e56e:	   /-- bne.s e576 <builtIn_startMusic+0x2c>
    e570:	   |   moveq #1,d0
    e572:	/--|-- bra.w e616 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    e576:	|  \-> moveq #24,d0
    e578:	|      add.l 20(sp),d0
    e57c:	|      move.l d0,-(sp)
    e57e:	|      jsr 1315e <trimStack>
    e584:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e586:	|      movea.l 20(sp),a0
    e58a:	|      move.l 24(a0),d0
    e58e:	|      move.l d0,-(sp)
    e590:	|      pea 1 <_start+0x1>
    e594:	|      moveq #12,d0
    e596:	|      add.l sp,d0
    e598:	|      move.l d0,-(sp)
    e59a:	|      jsr 127da <getValueType>
    e5a0:	|      lea 12(sp),sp
    e5a4:	|      tst.w d0
    e5a6:	|  /-- bne.s e5ac <builtIn_startMusic+0x62>
    e5a8:	|  |   moveq #1,d0
    e5aa:	+--|-- bra.s e616 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    e5ac:	|  \-> moveq #24,d0
    e5ae:	|      add.l 20(sp),d0
    e5b2:	|      move.l d0,-(sp)
    e5b4:	|      jsr 1315e <trimStack>
    e5ba:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e5bc:	|      movea.l 20(sp),a0
    e5c0:	|      move.l 24(a0),d0
    e5c4:	|      move.l d0,-(sp)
    e5c6:	|      pea 5 <_start+0x5>
    e5ca:	|      lea 8(sp),a0
    e5ce:	|      move.l a0,-(sp)
    e5d0:	|      jsr 127da <getValueType>
    e5d6:	|      lea 12(sp),sp
    e5da:	|      tst.w d0
    e5dc:	|  /-- bne.s e5e2 <builtIn_startMusic+0x98>
    e5de:	|  |   moveq #1,d0
    e5e0:	+--|-- bra.s e616 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    e5e2:	|  \-> moveq #24,d0
    e5e4:	|      add.l 20(sp),d0
    e5e8:	|      move.l d0,-(sp)
    e5ea:	|      jsr 1315e <trimStack>
    e5f0:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    e5f2:	|      movea.l 8(sp),a0
    e5f6:	|      move.l 4(sp),d1
    e5fa:	|      move.l (sp),d0
    e5fc:	|      move.l a0,-(sp)
    e5fe:	|      move.l d1,-(sp)
    e600:	|      move.l d0,-(sp)
    e602:	|      jsr b25c <playMOD>
    e608:	|      lea 12(sp),sp
    e60c:	|      tst.w d0
    e60e:	|  /-- bne.s e614 <builtIn_startMusic+0xca>
    e610:	|  |   moveq #2,d0
    e612:	+--|-- bra.s e616 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    e614:	|  \-> moveq #2,d0
}
    e616:	\----> lea 12(sp),sp
    e61a:	       rts

0000e61c <builtIn_stopMusic>:

builtIn(stopMusic)
{
    e61c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e61e:	       movea.l 12(sp),a0
    e622:	       move.l 24(a0),d0
    e626:	       move.l d0,-(sp)
    e628:	       pea 1 <_start+0x1>
    e62c:	       move.l sp,d0
    e62e:	       addq.l #8,d0
    e630:	       move.l d0,-(sp)
    e632:	       jsr 127da <getValueType>
    e638:	       lea 12(sp),sp
    e63c:	       tst.w d0
    e63e:	   /-- bne.s e644 <builtIn_stopMusic+0x28>
    e640:	   |   moveq #1,d0
    e642:	/--|-- bra.s e662 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    e644:	|  \-> moveq #24,d0
    e646:	|      add.l 12(sp),d0
    e64a:	|      move.l d0,-(sp)
    e64c:	|      jsr 1315e <trimStack>
    e652:	|      addq.l #4,sp
	stopMOD (v);
    e654:	|      move.l (sp),d0
    e656:	|      move.l d0,-(sp)
    e658:	|      jsr b2f8 <stopMOD>
    e65e:	|      addq.l #4,sp
	return BR_CONTINUE;
    e660:	|      moveq #2,d0
}
    e662:	\----> addq.l #4,sp
    e664:	       rts

0000e666 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    e666:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e668:	       movea.l 16(sp),a0
    e66c:	       move.l 24(a0),d0
    e670:	       move.l d0,-(sp)
    e672:	       pea 1 <_start+0x1>
    e676:	       move.l sp,d0
    e678:	       addq.l #8,d0
    e67a:	       move.l d0,-(sp)
    e67c:	       jsr 127da <getValueType>
    e682:	       lea 12(sp),sp
    e686:	       tst.w d0
    e688:	   /-- bne.s e68e <builtIn_setMusicVolume+0x28>
    e68a:	   |   moveq #1,d0
    e68c:	/--|-- bra.s e6e8 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    e68e:	|  \-> moveq #24,d0
    e690:	|      add.l 16(sp),d0
    e694:	|      move.l d0,-(sp)
    e696:	|      jsr 1315e <trimStack>
    e69c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e69e:	|      movea.l 16(sp),a0
    e6a2:	|      move.l 24(a0),d0
    e6a6:	|      move.l d0,-(sp)
    e6a8:	|      pea 1 <_start+0x1>
    e6ac:	|      moveq #12,d0
    e6ae:	|      add.l sp,d0
    e6b0:	|      move.l d0,-(sp)
    e6b2:	|      jsr 127da <getValueType>
    e6b8:	|      lea 12(sp),sp
    e6bc:	|      tst.w d0
    e6be:	|  /-- bne.s e6c4 <builtIn_setMusicVolume+0x5e>
    e6c0:	|  |   moveq #1,d0
    e6c2:	+--|-- bra.s e6e8 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    e6c4:	|  \-> moveq #24,d0
    e6c6:	|      add.l 16(sp),d0
    e6ca:	|      move.l d0,-(sp)
    e6cc:	|      jsr 1315e <trimStack>
    e6d2:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    e6d4:	|      move.l (sp),d1
    e6d6:	|      move.l 4(sp),d0
    e6da:	|      move.l d1,-(sp)
    e6dc:	|      move.l d0,-(sp)
    e6de:	|      jsr b2de <setMusicVolume>
    e6e4:	|      addq.l #8,sp
	return BR_CONTINUE;
    e6e6:	|      moveq #2,d0
}
    e6e8:	\----> addq.l #8,sp
    e6ea:	       rts

0000e6ec <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    e6ec:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e6ee:	       movea.l 12(sp),a0
    e6f2:	       move.l 24(a0),d0
    e6f6:	       move.l d0,-(sp)
    e6f8:	       pea 1 <_start+0x1>
    e6fc:	       move.l sp,d0
    e6fe:	       addq.l #8,d0
    e700:	       move.l d0,-(sp)
    e702:	       jsr 127da <getValueType>
    e708:	       lea 12(sp),sp
    e70c:	       tst.w d0
    e70e:	   /-- bne.s e714 <builtIn_setDefaultMusicVolume+0x28>
    e710:	   |   moveq #1,d0
    e712:	/--|-- bra.s e732 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    e714:	|  \-> moveq #24,d0
    e716:	|      add.l 12(sp),d0
    e71a:	|      move.l d0,-(sp)
    e71c:	|      jsr 1315e <trimStack>
    e722:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    e724:	|      move.l (sp),d0
    e726:	|      move.l d0,-(sp)
    e728:	|      jsr b2c2 <setDefaultMusicVolume>
    e72e:	|      addq.l #4,sp
	return BR_CONTINUE;
    e730:	|      moveq #2,d0
}
    e732:	\----> addq.l #4,sp
    e734:	       rts

0000e736 <builtIn_playSound>:

builtIn(playSound)
{
    e736:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e738:	       movea.l 12(sp),a0
    e73c:	       move.l 24(a0),d0
    e740:	       move.l d0,-(sp)
    e742:	       pea 5 <_start+0x5>
    e746:	       move.l sp,d0
    e748:	       addq.l #8,d0
    e74a:	       move.l d0,-(sp)
    e74c:	       jsr 127da <getValueType>
    e752:	       lea 12(sp),sp
    e756:	       tst.w d0
    e758:	   /-- bne.s e75e <builtIn_playSound+0x28>
    e75a:	   |   moveq #1,d0
    e75c:	/--|-- bra.s e786 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    e75e:	|  \-> moveq #24,d0
    e760:	|      add.l 12(sp),d0
    e764:	|      move.l d0,-(sp)
    e766:	|      jsr 1315e <trimStack>
    e76c:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    e76e:	|      move.l (sp),d0
    e770:	|      clr.l -(sp)
    e772:	|      move.l d0,-(sp)
    e774:	|      jsr b2e6 <startSound>
    e77a:	|      addq.l #8,sp
    e77c:	|      tst.w d0
    e77e:	|  /-- bne.s e784 <builtIn_playSound+0x4e>
    e780:	|  |   moveq #2,d0
    e782:	+--|-- bra.s e786 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    e784:	|  \-> moveq #2,d0
}
    e786:	\----> addq.l #4,sp
    e788:	       rts

0000e78a <builtIn_loopSound>:

builtIn(loopSound)
{
    e78a:	             lea -28(sp),sp
    e78e:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    e790:	             tst.l 36(sp)
    e794:	         /-- bgt.s e7aa <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    e796:	         |   pea 16c8d <PutChar+0x1b1b>
    e79c:	         |   jsr 14822 <KPrintF>
    e7a2:	         |   addq.l #4,sp
		return BR_ERROR;
    e7a4:	         |   moveq #1,d0
    e7a6:	/--------|-- bra.w e966 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    e7aa:	|        \-> moveq #1,d0
    e7ac:	|            cmp.l 36(sp),d0
    e7b0:	|     /----- blt.s e80c <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    e7b2:	|     |      movea.l 40(sp),a0
    e7b6:	|     |      move.l 24(a0),d0
    e7ba:	|     |      move.l d0,-(sp)
    e7bc:	|     |      pea 5 <_start+0x5>
    e7c0:	|     |      lea 16(sp),a0
    e7c4:	|     |      move.l a0,-(sp)
    e7c6:	|     |      jsr 127da <getValueType>
    e7cc:	|     |      lea 12(sp),sp
    e7d0:	|     |      tst.w d0
    e7d2:	|     |  /-- bne.s e7da <builtIn_loopSound+0x50>
    e7d4:	|     |  |   moveq #1,d0
    e7d6:	+-----|--|-- bra.w e966 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    e7da:	|     |  \-> moveq #24,d0
    e7dc:	|     |      add.l 40(sp),d0
    e7e0:	|     |      move.l d0,-(sp)
    e7e2:	|     |      jsr 1315e <trimStack>
    e7e8:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    e7ea:	|     |      move.l 8(sp),d0
    e7ee:	|     |      pea 1 <_start+0x1>
    e7f2:	|     |      move.l d0,-(sp)
    e7f4:	|     |      jsr b2e6 <startSound>
    e7fa:	|     |      addq.l #8,sp
    e7fc:	|     |      tst.w d0
    e7fe:	|     |  /-- bne.s e806 <builtIn_loopSound+0x7c>
    e800:	|     |  |   moveq #2,d0
    e802:	+-----|--|-- bra.w e966 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    e806:	|     |  \-> moveq #2,d0
    e808:	+-----|----- bra.w e966 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    e80c:	|     \----> moveq #2,d1
    e80e:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    e812:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    e816:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    e81a:	|            movea.l 40(sp),a0
    e81e:	|            movea.l 24(a0),a0
    e822:	|            move.l (a0),d0
    e824:	|            moveq #5,d1
    e826:	|            cmp.l d0,d1
    e828:	|  /-------- beq.w e900 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    e82c:	|  |         movea.l 40(sp),a0
    e830:	|  |         move.l 24(a0),d0
    e834:	|  |         move.l d0,-(sp)
    e836:	|  |         pea 1 <_start+0x1>
    e83a:	|  |         lea 12(sp),a0
    e83e:	|  |         move.l a0,-(sp)
    e840:	|  |         jsr 127da <getValueType>
    e846:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    e84a:	|  |         moveq #24,d0
    e84c:	|  |         add.l 40(sp),d0
    e850:	|  |         move.l d0,-(sp)
    e852:	|  |         jsr 1315e <trimStack>
    e858:	|  |         addq.l #4,sp
			numParams--;
    e85a:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    e85e:	|  +-------- bra.w e900 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    e862:	|  |  /----> movea.l 40(sp),a0
    e866:	|  |  |      move.l 24(a0),d0
    e86a:	|  |  |      move.l d0,-(sp)
    e86c:	|  |  |      pea 5 <_start+0x5>
    e870:	|  |  |      lea 16(sp),a0
    e874:	|  |  |      move.l a0,-(sp)
    e876:	|  |  |      jsr 127da <getValueType>
    e87c:	|  |  |      lea 12(sp),sp
    e880:	|  |  |      tst.w d0
    e882:	|  |  |  /-- bne.s e898 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    e884:	|  |  |  |   pea 16ccb <PutChar+0x1b59>
    e88a:	|  |  |  |   jsr 14822 <KPrintF>
    e890:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    e892:	|  |  |  |   moveq #1,d0
    e894:	+--|--|--|-- bra.w e966 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    e898:	|  |  |  \-> moveq #20,d0
    e89a:	|  |  |      move.l d0,20(sp)
    e89e:	|  |  |      clr.l 16(sp)
    e8a2:	|  |  |      move.l 19b50 <SysBase>,d0
    e8a8:	|  |  |      movea.l d0,a6
    e8aa:	|  |  |      move.l 20(sp),d0
    e8ae:	|  |  |      move.l 16(sp),d1
    e8b2:	|  |  |      jsr -684(a6)
    e8b6:	|  |  |      move.l d0,12(sp)
    e8ba:	|  |  |      move.l 12(sp),d0
    e8be:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    e8c2:	|  |  |  /-- bne.s e8ca <builtIn_loopSound+0x140>
    e8c4:	|  |  |  |   moveq #1,d0
    e8c6:	+--|--|--|-- bra.w e966 <builtIn_loopSound+0x1dc>

			s->next = old;
    e8ca:	|  |  |  \-> movea.l 28(sp),a0
    e8ce:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    e8d4:	|  |  |      movea.l 28(sp),a0
    e8d8:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    e8dc:	|  |  |      move.l 8(sp),d0
    e8e0:	|  |  |      movea.l 28(sp),a0
    e8e4:	|  |  |      move.l d0,(a0)
			old = s;
    e8e6:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    e8ec:	|  |  |      moveq #24,d0
    e8ee:	|  |  |      add.l 40(sp),d0
    e8f2:	|  |  |      move.l d0,-(sp)
    e8f4:	|  |  |      jsr 1315e <trimStack>
    e8fa:	|  |  |      addq.l #4,sp
			numParams--;
    e8fc:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    e900:	|  \--|----> tst.l 36(sp)
    e904:	|     \----- bne.w e862 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    e908:	|        /-- bra.s e914 <builtIn_loopSound+0x18a>
    e90a:	|     /--|-> movea.l 28(sp),a0
    e90e:	|     |  |   move.l 4(a0),28(sp)
    e914:	|     |  \-> movea.l 28(sp),a0
    e918:	|     |      move.l 4(a0),d0
    e91c:	|     \----- bne.s e90a <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    e91e:	|            move.l 4(sp),d0
    e922:	|            moveq #1,d1
    e924:	|            cmp.l d0,d1
    e926:	|     /----- bge.s e93e <builtIn_loopSound+0x1b4>
			s->next = old;
    e928:	|     |      movea.l 28(sp),a0
    e92c:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    e932:	|     |      movea.l 24(sp),a0
    e936:	|     |      move.l 28(sp),8(a0)
    e93c:	|     |  /-- bra.s e94e <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    e93e:	|     \--|-> move.l 4(sp),d0
    e942:	|        +-- beq.s e94e <builtIn_loopSound+0x1c4>
			s->next = s;
    e944:	|        |   movea.l 28(sp),a0
    e948:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    e94e:	|        \-> movea.l 24(sp),a0
    e952:	|            moveq #-1,d0
    e954:	|            move.l d0,16(a0)
		playSoundList(old);
    e958:	|            move.l 24(sp),-(sp)
    e95c:	|            jsr b260 <playSoundList>
    e962:	|            addq.l #4,sp
		return BR_CONTINUE;
    e964:	|            moveq #2,d0
	}
}
    e966:	\----------> movea.l (sp)+,a6
    e968:	             lea 28(sp),sp
    e96c:	             rts

0000e96e <builtIn_stopSound>:

builtIn(stopSound)
{
    e96e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e970:	       movea.l 12(sp),a0
    e974:	       move.l 24(a0),d0
    e978:	       move.l d0,-(sp)
    e97a:	       pea 5 <_start+0x5>
    e97e:	       move.l sp,d0
    e980:	       addq.l #8,d0
    e982:	       move.l d0,-(sp)
    e984:	       jsr 127da <getValueType>
    e98a:	       lea 12(sp),sp
    e98e:	       tst.w d0
    e990:	   /-- bne.s e996 <builtIn_stopSound+0x28>
    e992:	   |   moveq #1,d0
    e994:	/--|-- bra.s e9b4 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    e996:	|  \-> moveq #24,d0
    e998:	|      add.l 12(sp),d0
    e99c:	|      move.l d0,-(sp)
    e99e:	|      jsr 1315e <trimStack>
    e9a4:	|      addq.l #4,sp
	huntKillSound (v);
    e9a6:	|      move.l (sp),d0
    e9a8:	|      move.l d0,-(sp)
    e9aa:	|      jsr b258 <huntKillSound>
    e9b0:	|      addq.l #4,sp
	return BR_CONTINUE;
    e9b2:	|      moveq #2,d0
}
    e9b4:	\----> addq.l #4,sp
    e9b6:	       rts

0000e9b8 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    e9b8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9ba:	       movea.l 12(sp),a0
    e9be:	       move.l 24(a0),d0
    e9c2:	       move.l d0,-(sp)
    e9c4:	       pea 1 <_start+0x1>
    e9c8:	       move.l sp,d0
    e9ca:	       addq.l #8,d0
    e9cc:	       move.l d0,-(sp)
    e9ce:	       jsr 127da <getValueType>
    e9d4:	       lea 12(sp),sp
    e9d8:	       tst.w d0
    e9da:	   /-- bne.s e9e0 <builtIn_setDefaultSoundVolume+0x28>
    e9dc:	   |   moveq #1,d0
    e9de:	/--|-- bra.s e9fe <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    e9e0:	|  \-> moveq #24,d0
    e9e2:	|      add.l 12(sp),d0
    e9e6:	|      move.l d0,-(sp)
    e9e8:	|      jsr 1315e <trimStack>
    e9ee:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    e9f0:	|      move.l (sp),d0
    e9f2:	|      move.l d0,-(sp)
    e9f4:	|      jsr b2ce <setDefaultSoundVolume>
    e9fa:	|      addq.l #4,sp
	return BR_CONTINUE;
    e9fc:	|      moveq #2,d0
}
    e9fe:	\----> addq.l #4,sp
    ea00:	       rts

0000ea02 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    ea02:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea04:	       movea.l 16(sp),a0
    ea08:	       move.l 24(a0),d0
    ea0c:	       move.l d0,-(sp)
    ea0e:	       pea 1 <_start+0x1>
    ea12:	       move.l sp,d0
    ea14:	       addq.l #8,d0
    ea16:	       move.l d0,-(sp)
    ea18:	       jsr 127da <getValueType>
    ea1e:	       lea 12(sp),sp
    ea22:	       tst.w d0
    ea24:	   /-- bne.s ea2a <builtIn_setSoundVolume+0x28>
    ea26:	   |   moveq #1,d0
    ea28:	/--|-- bra.s ea84 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    ea2a:	|  \-> moveq #24,d0
    ea2c:	|      add.l 16(sp),d0
    ea30:	|      move.l d0,-(sp)
    ea32:	|      jsr 1315e <trimStack>
    ea38:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea3a:	|      movea.l 16(sp),a0
    ea3e:	|      move.l 24(a0),d0
    ea42:	|      move.l d0,-(sp)
    ea44:	|      pea 5 <_start+0x5>
    ea48:	|      moveq #12,d0
    ea4a:	|      add.l sp,d0
    ea4c:	|      move.l d0,-(sp)
    ea4e:	|      jsr 127da <getValueType>
    ea54:	|      lea 12(sp),sp
    ea58:	|      tst.w d0
    ea5a:	|  /-- bne.s ea60 <builtIn_setSoundVolume+0x5e>
    ea5c:	|  |   moveq #1,d0
    ea5e:	+--|-- bra.s ea84 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    ea60:	|  \-> moveq #24,d0
    ea62:	|      add.l 16(sp),d0
    ea66:	|      move.l d0,-(sp)
    ea68:	|      jsr 1315e <trimStack>
    ea6e:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    ea70:	|      move.l (sp),d1
    ea72:	|      move.l 4(sp),d0
    ea76:	|      move.l d1,-(sp)
    ea78:	|      move.l d0,-(sp)
    ea7a:	|      jsr b2e2 <setSoundVolume>
    ea80:	|      addq.l #8,sp
	return BR_CONTINUE;
    ea82:	|      moveq #2,d0
}
    ea84:	\----> addq.l #8,sp
    ea86:	       rts

0000ea88 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    ea88:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea8c:	       movea.l 20(sp),a0
    ea90:	       move.l 24(a0),d0
    ea94:	       move.l d0,-(sp)
    ea96:	       pea 1 <_start+0x1>
    ea9a:	       moveq #12,d0
    ea9c:	       add.l sp,d0
    ea9e:	       move.l d0,-(sp)
    eaa0:	       jsr 127da <getValueType>
    eaa6:	       lea 12(sp),sp
    eaaa:	       tst.w d0
    eaac:	   /-- bne.s eab4 <builtIn_setSoundLoopPoints+0x2c>
    eaae:	   |   moveq #1,d0
    eab0:	/--|-- bra.w eb4c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    eab4:	|  \-> moveq #24,d0
    eab6:	|      add.l 20(sp),d0
    eaba:	|      move.l d0,-(sp)
    eabc:	|      jsr 1315e <trimStack>
    eac2:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eac4:	|      movea.l 20(sp),a0
    eac8:	|      move.l 24(a0),d0
    eacc:	|      move.l d0,-(sp)
    eace:	|      pea 1 <_start+0x1>
    ead2:	|      lea 8(sp),a0
    ead6:	|      move.l a0,-(sp)
    ead8:	|      jsr 127da <getValueType>
    eade:	|      lea 12(sp),sp
    eae2:	|      tst.w d0
    eae4:	|  /-- bne.s eaea <builtIn_setSoundLoopPoints+0x62>
    eae6:	|  |   moveq #1,d0
    eae8:	+--|-- bra.s eb4c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    eaea:	|  \-> moveq #24,d0
    eaec:	|      add.l 20(sp),d0
    eaf0:	|      move.l d0,-(sp)
    eaf2:	|      jsr 1315e <trimStack>
    eaf8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eafa:	|      movea.l 20(sp),a0
    eafe:	|      move.l 24(a0),d0
    eb02:	|      move.l d0,-(sp)
    eb04:	|      pea 5 <_start+0x5>
    eb08:	|      moveq #16,d0
    eb0a:	|      add.l sp,d0
    eb0c:	|      move.l d0,-(sp)
    eb0e:	|      jsr 127da <getValueType>
    eb14:	|      lea 12(sp),sp
    eb18:	|      tst.w d0
    eb1a:	|  /-- bne.s eb20 <builtIn_setSoundLoopPoints+0x98>
    eb1c:	|  |   moveq #1,d0
    eb1e:	+--|-- bra.s eb4c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    eb20:	|  \-> moveq #24,d0
    eb22:	|      add.l 20(sp),d0
    eb26:	|      move.l d0,-(sp)
    eb28:	|      jsr 1315e <trimStack>
    eb2e:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    eb30:	|      movea.l 4(sp),a0
    eb34:	|      move.l (sp),d1
    eb36:	|      move.l 8(sp),d0
    eb3a:	|      move.l a0,-(sp)
    eb3c:	|      move.l d1,-(sp)
    eb3e:	|      move.l d0,-(sp)
    eb40:	|      jsr b2da <setSoundLoop>
    eb46:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eb4a:	|      moveq #2,d0
}
    eb4c:	\----> lea 12(sp),sp
    eb50:	       rts

0000eb52 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    eb52:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    eb54:	          movea.l 12(sp),a0
    eb58:	          movea.l 24(a0),a0
    eb5c:	          move.l (a0),d0
    eb5e:	          moveq #5,d1
    eb60:	          cmp.l d0,d1
    eb62:	/-------- bne.s eba6 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    eb64:	|         movea.l 12(sp),a0
    eb68:	|         move.l 24(a0),d0
    eb6c:	|         move.l d0,-(sp)
    eb6e:	|         pea 5 <_start+0x5>
    eb72:	|         move.l sp,d0
    eb74:	|         addq.l #8,d0
    eb76:	|         move.l d0,-(sp)
    eb78:	|         jsr 127da <getValueType>
    eb7e:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    eb82:	|         moveq #24,d0
    eb84:	|         add.l 12(sp),d0
    eb88:	|         move.l d0,-(sp)
    eb8a:	|         jsr 1315e <trimStack>
    eb90:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    eb92:	|         move.l (sp),d0
    eb94:	|         move.l d0,-(sp)
    eb96:	|         jsr 13fcc <setFloor>
    eb9c:	|         addq.l #4,sp
    eb9e:	|         tst.w d0
    eba0:	|  /----- bne.s ebbc <builtIn_setFloor+0x6a>
    eba2:	|  |      moveq #1,d0
    eba4:	|  |  /-- bra.s ebbe <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    eba6:	\--|--|-> moveq #24,d0
    eba8:	   |  |   add.l 12(sp),d0
    ebac:	   |  |   move.l d0,-(sp)
    ebae:	   |  |   jsr 1315e <trimStack>
    ebb4:	   |  |   addq.l #4,sp
		setFloorNull ();
    ebb6:	   |  |   jsr 14746 <setFloorNull>
	}
	return BR_CONTINUE;
    ebbc:	   \--|-> moveq #2,d0
}
    ebbe:	      \-> addq.l #4,sp
    ebc0:	          rts

0000ebc2 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    ebc2:	jsr 13864 <drawFloor>
	return BR_CONTINUE;
    ebc8:	moveq #2,d0
}
    ebca:	rts

0000ebcc <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    ebcc:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    ebce:	          movea.l 12(sp),a0
    ebd2:	          movea.l 24(a0),a0
    ebd6:	          move.l (a0),d0
    ebd8:	          moveq #5,d1
    ebda:	          cmp.l d0,d1
    ebdc:	/-------- bne.s ec20 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    ebde:	|         movea.l 12(sp),a0
    ebe2:	|         move.l 24(a0),d0
    ebe6:	|         move.l d0,-(sp)
    ebe8:	|         pea 5 <_start+0x5>
    ebec:	|         move.l sp,d0
    ebee:	|         addq.l #8,d0
    ebf0:	|         move.l d0,-(sp)
    ebf2:	|         jsr 127da <getValueType>
    ebf8:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    ebfc:	|         moveq #24,d0
    ebfe:	|         add.l 12(sp),d0
    ec02:	|         move.l d0,-(sp)
    ec04:	|         jsr 1315e <trimStack>
    ec0a:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    ec0c:	|         move.l (sp),d0
    ec0e:	|         move.l d0,-(sp)
    ec10:	|         jsr 6b2e <setZBuffer>
    ec16:	|         addq.l #4,sp
    ec18:	|         tst.w d0
    ec1a:	|  /----- bne.s ec36 <builtIn_setZBuffer+0x6a>
    ec1c:	|  |      moveq #1,d0
    ec1e:	|  |  /-- bra.s ec38 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    ec20:	\--|--|-> moveq #24,d0
    ec22:	   |  |   add.l 12(sp),d0
    ec26:	   |  |   move.l d0,-(sp)
    ec28:	   |  |   jsr 1315e <trimStack>
    ec2e:	   |  |   addq.l #4,sp
		killZBuffer ();
    ec30:	   |  |   jsr 6ad8 <killZBuffer>
	}
	return BR_CONTINUE;
    ec36:	   \--|-> moveq #2,d0
}
    ec38:	      \-> addq.l #4,sp
    ec3a:	          rts

0000ec3c <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    ec3c:	pea 16d02 <PutChar+0x1b90>
    ec42:	jsr 14822 <KPrintF>
    ec48:	addq.l #4,sp
	return BR_CONTINUE;
    ec4a:	moveq #2,d0
}
    ec4c:	rts

0000ec4e <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec4e:	          movea.l 8(sp),a0
    ec52:	          move.l 24(a0),d0
    ec56:	          move.l d0,-(sp)
    ec58:	          pea 1 <_start+0x1>
    ec5c:	          pea 19c72 <speechMode>
    ec62:	          jsr 127da <getValueType>
    ec68:	          lea 12(sp),sp
    ec6c:	          tst.w d0
    ec6e:	      /-- bne.s ec74 <builtIn_setSpeechMode+0x26>
    ec70:	      |   moveq #1,d0
    ec72:	/-----|-- bra.s ecac <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    ec74:	|     \-> moveq #24,d0
    ec76:	|         add.l 8(sp),d0
    ec7a:	|         move.l d0,-(sp)
    ec7c:	|         jsr 1315e <trimStack>
    ec82:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    ec84:	|         move.l 19c72 <speechMode>,d0
    ec8a:	|     /-- bmi.s ec98 <builtIn_setSpeechMode+0x4a>
    ec8c:	|     |   move.l 19c72 <speechMode>,d0
    ec92:	|     |   moveq #2,d1
    ec94:	|     |   cmp.l d0,d1
    ec96:	|  /--|-- bge.s ecaa <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    ec98:	|  |  \-> pea 16d1b <PutChar+0x1ba9>
    ec9e:	|  |      jsr 14822 <KPrintF>
    eca4:	|  |      addq.l #4,sp
		return BR_ERROR;
    eca6:	|  |      moveq #1,d0
    eca8:	+--|----- bra.s ecac <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    ecaa:	|  \----> moveq #2,d0
}
    ecac:	\-------> rts

0000ecae <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    ecae:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    ecb0:	       jsr 62e0 <isThereAnySpeechGoingOn>
    ecb6:	       move.l d0,(sp)
	if (i == -1) {
    ecb8:	       moveq #-1,d0
    ecba:	       cmp.l (sp),d0
    ecbc:	/----- bne.s ecd8 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    ecbe:	|      moveq #28,d0
    ecc0:	|      add.l 12(sp),d0
    ecc4:	|      clr.l -(sp)
    ecc6:	|      pea 1 <_start+0x1>
    ecca:	|      move.l d0,-(sp)
    eccc:	|      jsr 130cc <setVariable>
    ecd2:	|      lea 12(sp),sp
    ecd6:	|  /-- bra.s ecf0 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    ecd8:	\--|-> moveq #28,d0
    ecda:	   |   add.l 12(sp),d0
    ecde:	   |   move.l (sp),-(sp)
    ece0:	   |   pea 7 <_start+0x7>
    ece4:	   |   move.l d0,-(sp)
    ece6:	   |   jsr 130cc <setVariable>
    ecec:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ecf0:	   \-> moveq #2,d0
}
    ecf2:	       addq.l #4,sp
    ecf4:	       rts

0000ecf6 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    ecf6:	jsr 4600 <killSpeechTimers>
	return BR_CONTINUE;
    ecfc:	moveq #2,d0
}
    ecfe:	rts

0000ed00 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    ed00:	       move.l 19cac <overRegion>,d0
    ed06:	/----- beq.s ed30 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    ed08:	|      movea.l 19cac <overRegion>,a0
    ed0e:	|      movea.l 28(a0),a0
    ed12:	|      move.l 4(a0),d1
    ed16:	|      moveq #28,d0
    ed18:	|      add.l 8(sp),d0
    ed1c:	|      move.l d1,-(sp)
    ed1e:	|      pea 7 <_start+0x7>
    ed22:	|      move.l d0,-(sp)
    ed24:	|      jsr 130cc <setVariable>
    ed2a:	|      lea 12(sp),sp
    ed2e:	|  /-- bra.s ed48 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    ed30:	\--|-> moveq #28,d0
    ed32:	   |   add.l 8(sp),d0
    ed36:	   |   clr.l -(sp)
    ed38:	   |   pea 1 <_start+0x1>
    ed3c:	   |   move.l d0,-(sp)
    ed3e:	   |   jsr 130cc <setVariable>
    ed44:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    ed48:	   \-> moveq #2,d0
}
    ed4a:	       rts

0000ed4c <builtIn_rename>:

builtIn(rename)
{
    ed4c:	       lea -16(sp),sp
    ed50:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ed52:	       movea.l 28(sp),a0
    ed56:	       move.l 24(a0),d0
    ed5a:	       move.l d0,-(sp)
    ed5c:	       jsr 12db0 <getTextFromAnyVar>
    ed62:	       addq.l #4,sp
    ed64:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    ed68:	   /-- bne.s ed6e <builtIn_rename+0x22>
    ed6a:	   |   moveq #1,d0
    ed6c:	/--|-- bra.s ede8 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    ed6e:	|  \-> moveq #24,d0
    ed70:	|      add.l 28(sp),d0
    ed74:	|      move.l d0,-(sp)
    ed76:	|      jsr 1315e <trimStack>
    ed7c:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    ed7e:	|      movea.l 28(sp),a0
    ed82:	|      move.l 24(a0),d0
    ed86:	|      move.l d0,-(sp)
    ed88:	|      pea 7 <_start+0x7>
    ed8c:	|      lea 12(sp),a0
    ed90:	|      move.l a0,-(sp)
    ed92:	|      jsr 127da <getValueType>
    ed98:	|      lea 12(sp),sp
    ed9c:	|      tst.w d0
    ed9e:	|  /-- bne.s eda4 <builtIn_rename+0x58>
    eda0:	|  |   moveq #1,d0
    eda2:	+--|-- bra.s ede8 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    eda4:	|  \-> moveq #24,d0
    eda6:	|      add.l 28(sp),d0
    edaa:	|      move.l d0,-(sp)
    edac:	|      jsr 1315e <trimStack>
    edb2:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    edb4:	|      move.l 4(sp),d0
    edb8:	|      move.l d0,-(sp)
    edba:	|      jsr b610 <findObjectType>
    edc0:	|      addq.l #4,sp
    edc2:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    edc6:	|      movea.l 12(sp),a0
    edca:	|      move.l (a0),8(sp)
    edce:	|      move.l 19b50 <SysBase>,d0
    edd4:	|      movea.l d0,a6
    edd6:	|      movea.l 8(sp),a1
    edda:	|      jsr -690(a6)
	o->screenName = newText;
    edde:	|      movea.l 12(sp),a0
    ede2:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    ede6:	|      moveq #2,d0
}
    ede8:	\----> movea.l (sp)+,a6
    edea:	       lea 16(sp),sp
    edee:	       rts

0000edf0 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    edf0:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    edf4:	          movea.l 20(sp),a0
    edf8:	          move.l 24(a0),d0
    edfc:	          move.l d0,-(sp)
    edfe:	          pea 7 <_start+0x7>
    ee02:	          lea 8(sp),a0
    ee06:	          move.l a0,-(sp)
    ee08:	          jsr 127da <getValueType>
    ee0e:	          lea 12(sp),sp
    ee12:	          tst.w d0
    ee14:	      /-- bne.s ee1c <builtIn_getObjectX+0x2c>
    ee16:	      |   moveq #1,d0
    ee18:	/-----|-- bra.w eeb8 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    ee1c:	|     \-> moveq #24,d0
    ee1e:	|         add.l 20(sp),d0
    ee22:	|         move.l d0,-(sp)
    ee24:	|         jsr 1315e <trimStack>
    ee2a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    ee2c:	|         move.l (sp),d0
    ee2e:	|         move.l d0,-(sp)
    ee30:	|         jsr 887a <findPerson>
    ee36:	|         addq.l #4,sp
    ee38:	|         move.l d0,8(sp)
	if (pers) {
    ee3c:	|     /-- beq.s ee6a <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    ee3e:	|     |   movea.l 8(sp),a0
    ee42:	|     |   move.l (a0),d0
    ee44:	|     |   move.l d0,-(sp)
    ee46:	|     |   jsr 14a72 <__fixsfsi>
    ee4c:	|     |   addq.l #4,sp
    ee4e:	|     |   move.l d0,d1
    ee50:	|     |   moveq #28,d0
    ee52:	|     |   add.l 20(sp),d0
    ee56:	|     |   move.l d1,-(sp)
    ee58:	|     |   pea 1 <_start+0x1>
    ee5c:	|     |   move.l d0,-(sp)
    ee5e:	|     |   jsr 130cc <setVariable>
    ee64:	|     |   lea 12(sp),sp
    ee68:	|  /--|-- bra.s eeb6 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    ee6a:	|  |  \-> move.l (sp),d0
    ee6c:	|  |      move.l d0,-(sp)
    ee6e:	|  |      jsr 132a4 <getRegionForObject>
    ee74:	|  |      addq.l #4,sp
    ee76:	|  |      move.l d0,4(sp)
		if (la) {
    ee7a:	|  |  /-- beq.s ee9e <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    ee7c:	|  |  |   movea.l 4(sp),a0
    ee80:	|  |  |   move.l 16(a0),d1
    ee84:	|  |  |   moveq #28,d0
    ee86:	|  |  |   add.l 20(sp),d0
    ee8a:	|  |  |   move.l d1,-(sp)
    ee8c:	|  |  |   pea 1 <_start+0x1>
    ee90:	|  |  |   move.l d0,-(sp)
    ee92:	|  |  |   jsr 130cc <setVariable>
    ee98:	|  |  |   lea 12(sp),sp
    ee9c:	|  +--|-- bra.s eeb6 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    ee9e:	|  |  \-> moveq #28,d0
    eea0:	|  |      add.l 20(sp),d0
    eea4:	|  |      clr.l -(sp)
    eea6:	|  |      pea 1 <_start+0x1>
    eeaa:	|  |      move.l d0,-(sp)
    eeac:	|  |      jsr 130cc <setVariable>
    eeb2:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    eeb6:	|  \----> moveq #2,d0
}
    eeb8:	\-------> lea 12(sp),sp
    eebc:	          rts

0000eebe <builtIn_getObjectY>:

builtIn (getObjectY)
{
    eebe:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eec2:	          movea.l 20(sp),a0
    eec6:	          move.l 24(a0),d0
    eeca:	          move.l d0,-(sp)
    eecc:	          pea 7 <_start+0x7>
    eed0:	          lea 8(sp),a0
    eed4:	          move.l a0,-(sp)
    eed6:	          jsr 127da <getValueType>
    eedc:	          lea 12(sp),sp
    eee0:	          tst.w d0
    eee2:	      /-- bne.s eeea <builtIn_getObjectY+0x2c>
    eee4:	      |   moveq #1,d0
    eee6:	/-----|-- bra.w ef88 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    eeea:	|     \-> moveq #24,d0
    eeec:	|         add.l 20(sp),d0
    eef0:	|         move.l d0,-(sp)
    eef2:	|         jsr 1315e <trimStack>
    eef8:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    eefa:	|         move.l (sp),d0
    eefc:	|         move.l d0,-(sp)
    eefe:	|         jsr 887a <findPerson>
    ef04:	|         addq.l #4,sp
    ef06:	|         move.l d0,8(sp)
	if (pers) {
    ef0a:	|     /-- beq.s ef3a <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    ef0c:	|     |   movea.l 8(sp),a0
    ef10:	|     |   move.l 4(a0),d0
    ef14:	|     |   move.l d0,-(sp)
    ef16:	|     |   jsr 14a72 <__fixsfsi>
    ef1c:	|     |   addq.l #4,sp
    ef1e:	|     |   move.l d0,d1
    ef20:	|     |   moveq #28,d0
    ef22:	|     |   add.l 20(sp),d0
    ef26:	|     |   move.l d1,-(sp)
    ef28:	|     |   pea 1 <_start+0x1>
    ef2c:	|     |   move.l d0,-(sp)
    ef2e:	|     |   jsr 130cc <setVariable>
    ef34:	|     |   lea 12(sp),sp
    ef38:	|  /--|-- bra.s ef86 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    ef3a:	|  |  \-> move.l (sp),d0
    ef3c:	|  |      move.l d0,-(sp)
    ef3e:	|  |      jsr 132a4 <getRegionForObject>
    ef44:	|  |      addq.l #4,sp
    ef46:	|  |      move.l d0,4(sp)
		if (la) {
    ef4a:	|  |  /-- beq.s ef6e <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    ef4c:	|  |  |   movea.l 4(sp),a0
    ef50:	|  |  |   move.l 20(a0),d1
    ef54:	|  |  |   moveq #28,d0
    ef56:	|  |  |   add.l 20(sp),d0
    ef5a:	|  |  |   move.l d1,-(sp)
    ef5c:	|  |  |   pea 1 <_start+0x1>
    ef60:	|  |  |   move.l d0,-(sp)
    ef62:	|  |  |   jsr 130cc <setVariable>
    ef68:	|  |  |   lea 12(sp),sp
    ef6c:	|  +--|-- bra.s ef86 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    ef6e:	|  |  \-> moveq #28,d0
    ef70:	|  |      add.l 20(sp),d0
    ef74:	|  |      clr.l -(sp)
    ef76:	|  |      pea 1 <_start+0x1>
    ef7a:	|  |      move.l d0,-(sp)
    ef7c:	|  |      jsr 130cc <setVariable>
    ef82:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    ef86:	|  \----> moveq #2,d0
}
    ef88:	\-------> lea 12(sp),sp
    ef8c:	          rts

0000ef8e <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    ef8e:	       lea -32(sp),sp
    ef92:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef96:	       movea.l 56(sp),a0
    ef9a:	       move.l 24(a0),d0
    ef9e:	       move.l d0,-(sp)
    efa0:	       pea 1 <_start+0x1>
    efa4:	       lea 28(sp),a0
    efa8:	       move.l a0,-(sp)
    efaa:	       jsr 127da <getValueType>
    efb0:	       lea 12(sp),sp
    efb4:	       tst.w d0
    efb6:	   /-- bne.s efbe <builtIn_addScreenRegion+0x30>
    efb8:	   |   moveq #1,d0
    efba:	/--|-- bra.w f198 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    efbe:	|  \-> moveq #24,d0
    efc0:	|      add.l 56(sp),d0
    efc4:	|      move.l d0,-(sp)
    efc6:	|      jsr 1315e <trimStack>
    efcc:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    efce:	|      movea.l 56(sp),a0
    efd2:	|      move.l 24(a0),d0
    efd6:	|      move.l d0,-(sp)
    efd8:	|      pea 1 <_start+0x1>
    efdc:	|      moveq #48,d0
    efde:	|      add.l sp,d0
    efe0:	|      move.l d0,-(sp)
    efe2:	|      jsr 127da <getValueType>
    efe8:	|      lea 12(sp),sp
    efec:	|      tst.w d0
    efee:	|  /-- bne.s eff6 <builtIn_addScreenRegion+0x68>
    eff0:	|  |   moveq #1,d0
    eff2:	+--|-- bra.w f198 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    eff6:	|  \-> moveq #24,d0
    eff8:	|      add.l 56(sp),d0
    effc:	|      move.l d0,-(sp)
    effe:	|      jsr 1315e <trimStack>
    f004:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f006:	|      movea.l 56(sp),a0
    f00a:	|      move.l 24(a0),d0
    f00e:	|      move.l d0,-(sp)
    f010:	|      pea 1 <_start+0x1>
    f014:	|      moveq #52,d0
    f016:	|      add.l sp,d0
    f018:	|      move.l d0,-(sp)
    f01a:	|      jsr 127da <getValueType>
    f020:	|      lea 12(sp),sp
    f024:	|      tst.w d0
    f026:	|  /-- bne.s f02e <builtIn_addScreenRegion+0xa0>
    f028:	|  |   moveq #1,d0
    f02a:	+--|-- bra.w f198 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f02e:	|  \-> moveq #24,d0
    f030:	|      add.l 56(sp),d0
    f034:	|      move.l d0,-(sp)
    f036:	|      jsr 1315e <trimStack>
    f03c:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f03e:	|      movea.l 56(sp),a0
    f042:	|      move.l 24(a0),d0
    f046:	|      move.l d0,-(sp)
    f048:	|      pea 1 <_start+0x1>
    f04c:	|      lea 32(sp),a0
    f050:	|      move.l a0,-(sp)
    f052:	|      jsr 127da <getValueType>
    f058:	|      lea 12(sp),sp
    f05c:	|      tst.w d0
    f05e:	|  /-- bne.s f066 <builtIn_addScreenRegion+0xd8>
    f060:	|  |   moveq #1,d0
    f062:	+--|-- bra.w f198 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f066:	|  \-> moveq #24,d0
    f068:	|      add.l 56(sp),d0
    f06c:	|      move.l d0,-(sp)
    f06e:	|      jsr 1315e <trimStack>
    f074:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f076:	|      movea.l 56(sp),a0
    f07a:	|      move.l 24(a0),d0
    f07e:	|      move.l d0,-(sp)
    f080:	|      pea 1 <_start+0x1>
    f084:	|      lea 36(sp),a0
    f088:	|      move.l a0,-(sp)
    f08a:	|      jsr 127da <getValueType>
    f090:	|      lea 12(sp),sp
    f094:	|      tst.w d0
    f096:	|  /-- bne.s f09e <builtIn_addScreenRegion+0x110>
    f098:	|  |   moveq #1,d0
    f09a:	+--|-- bra.w f198 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f09e:	|  \-> moveq #24,d0
    f0a0:	|      add.l 56(sp),d0
    f0a4:	|      move.l d0,-(sp)
    f0a6:	|      jsr 1315e <trimStack>
    f0ac:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f0ae:	|      movea.l 56(sp),a0
    f0b2:	|      move.l 24(a0),d0
    f0b6:	|      move.l d0,-(sp)
    f0b8:	|      pea 1 <_start+0x1>
    f0bc:	|      lea 40(sp),a0
    f0c0:	|      move.l a0,-(sp)
    f0c2:	|      jsr 127da <getValueType>
    f0c8:	|      lea 12(sp),sp
    f0cc:	|      tst.w d0
    f0ce:	|  /-- bne.s f0d6 <builtIn_addScreenRegion+0x148>
    f0d0:	|  |   moveq #1,d0
    f0d2:	+--|-- bra.w f198 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f0d6:	|  \-> moveq #24,d0
    f0d8:	|      add.l 56(sp),d0
    f0dc:	|      move.l d0,-(sp)
    f0de:	|      jsr 1315e <trimStack>
    f0e4:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f0e6:	|      movea.l 56(sp),a0
    f0ea:	|      move.l 24(a0),d0
    f0ee:	|      move.l d0,-(sp)
    f0f0:	|      pea 1 <_start+0x1>
    f0f4:	|      lea 44(sp),a0
    f0f8:	|      move.l a0,-(sp)
    f0fa:	|      jsr 127da <getValueType>
    f100:	|      lea 12(sp),sp
    f104:	|      tst.w d0
    f106:	|  /-- bne.s f10e <builtIn_addScreenRegion+0x180>
    f108:	|  |   moveq #1,d0
    f10a:	+--|-- bra.w f198 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f10e:	|  \-> moveq #24,d0
    f110:	|      add.l 56(sp),d0
    f114:	|      move.l d0,-(sp)
    f116:	|      jsr 1315e <trimStack>
    f11c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f11e:	|      movea.l 56(sp),a0
    f122:	|      move.l 24(a0),d0
    f126:	|      move.l d0,-(sp)
    f128:	|      pea 7 <_start+0x7>
    f12c:	|      lea 24(sp),a0
    f130:	|      move.l a0,-(sp)
    f132:	|      jsr 127da <getValueType>
    f138:	|      lea 12(sp),sp
    f13c:	|      tst.w d0
    f13e:	|  /-- bne.s f144 <builtIn_addScreenRegion+0x1b6>
    f140:	|  |   moveq #1,d0
    f142:	+--|-- bra.s f198 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f144:	|  \-> moveq #24,d0
    f146:	|      add.l 56(sp),d0
    f14a:	|      move.l d0,-(sp)
    f14c:	|      jsr 1315e <trimStack>
    f152:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    f154:	|      move.l 16(sp),d5
    f158:	|      move.l 20(sp),d4
    f15c:	|      move.l 40(sp),d3
    f160:	|      move.l 44(sp),d2
    f164:	|      movea.l 24(sp),a1
    f168:	|      movea.l 28(sp),a0
    f16c:	|      move.l 32(sp),d1
    f170:	|      move.l 36(sp),d0
    f174:	|      move.l d5,-(sp)
    f176:	|      move.l d4,-(sp)
    f178:	|      move.l d3,-(sp)
    f17a:	|      move.l d2,-(sp)
    f17c:	|      move.l a1,-(sp)
    f17e:	|      move.l a0,-(sp)
    f180:	|      move.l d1,-(sp)
    f182:	|      move.l d0,-(sp)
    f184:	|      jsr 131e4 <addScreenRegion>
    f18a:	|      lea 32(sp),sp
    f18e:	|      tst.w d0
    f190:	|  /-- beq.s f196 <builtIn_addScreenRegion+0x208>
    f192:	|  |   moveq #2,d0
    f194:	+--|-- bra.s f198 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    f196:	|  \-> moveq #1,d0

}
    f198:	\----> movem.l (sp)+,d2-d5
    f19c:	       lea 32(sp),sp
    f1a0:	       rts

0000f1a2 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    f1a2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f1a4:	       movea.l 12(sp),a0
    f1a8:	       move.l 24(a0),d0
    f1ac:	       move.l d0,-(sp)
    f1ae:	       pea 7 <_start+0x7>
    f1b2:	       move.l sp,d0
    f1b4:	       addq.l #8,d0
    f1b6:	       move.l d0,-(sp)
    f1b8:	       jsr 127da <getValueType>
    f1be:	       lea 12(sp),sp
    f1c2:	       tst.w d0
    f1c4:	   /-- bne.s f1ca <builtIn_removeScreenRegion+0x28>
    f1c6:	   |   moveq #1,d0
    f1c8:	/--|-- bra.s f1e8 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    f1ca:	|  \-> moveq #24,d0
    f1cc:	|      add.l 12(sp),d0
    f1d0:	|      move.l d0,-(sp)
    f1d2:	|      jsr 1315e <trimStack>
    f1d8:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    f1da:	|      move.l (sp),d0
    f1dc:	|      move.l d0,-(sp)
    f1de:	|      jsr 1344c <removeScreenRegion>
    f1e4:	|      addq.l #4,sp
	return BR_CONTINUE;
    f1e6:	|      moveq #2,d0
}
    f1e8:	\----> addq.l #4,sp
    f1ea:	       rts

0000f1ec <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    f1ec:	jsr 135d0 <showBoxes>
	return BR_CONTINUE;
    f1f2:	moveq #2,d0
}
    f1f4:	rts

0000f1f6 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    f1f6:	jsr 132d2 <killAllRegions>
	return BR_CONTINUE;
    f1fc:	moveq #2,d0
}
    f1fe:	rts

0000f200 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    f200:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    f204:	       movea.l 24(sp),a0
    f208:	       move.l 24(a0),d0
    f20c:	       move.l d0,-(sp)
    f20e:	       jsr 12486 <getCostumeFromVar>
    f214:	       addq.l #4,sp
    f216:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    f21a:	   /-- bne.s f222 <builtIn_addCharacter+0x22>
    f21c:	   |   moveq #1,d0
    f21e:	/--|-- bra.w f2fe <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    f222:	|  \-> moveq #24,d0
    f224:	|      add.l 24(sp),d0
    f228:	|      move.l d0,-(sp)
    f22a:	|      jsr 1315e <trimStack>
    f230:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f232:	|      movea.l 24(sp),a0
    f236:	|      move.l 24(a0),d0
    f23a:	|      move.l d0,-(sp)
    f23c:	|      pea 1 <_start+0x1>
    f240:	|      lea 12(sp),a0
    f244:	|      move.l a0,-(sp)
    f246:	|      jsr 127da <getValueType>
    f24c:	|      lea 12(sp),sp
    f250:	|      tst.w d0
    f252:	|  /-- bne.s f25a <builtIn_addCharacter+0x5a>
    f254:	|  |   moveq #1,d0
    f256:	+--|-- bra.w f2fe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    f25a:	|  \-> moveq #24,d0
    f25c:	|      add.l 24(sp),d0
    f260:	|      move.l d0,-(sp)
    f262:	|      jsr 1315e <trimStack>
    f268:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f26a:	|      movea.l 24(sp),a0
    f26e:	|      move.l 24(a0),d0
    f272:	|      move.l d0,-(sp)
    f274:	|      pea 1 <_start+0x1>
    f278:	|      moveq #16,d0
    f27a:	|      add.l sp,d0
    f27c:	|      move.l d0,-(sp)
    f27e:	|      jsr 127da <getValueType>
    f284:	|      lea 12(sp),sp
    f288:	|      tst.w d0
    f28a:	|  /-- bne.s f290 <builtIn_addCharacter+0x90>
    f28c:	|  |   moveq #1,d0
    f28e:	+--|-- bra.s f2fe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    f290:	|  \-> moveq #24,d0
    f292:	|      add.l 24(sp),d0
    f296:	|      move.l d0,-(sp)
    f298:	|      jsr 1315e <trimStack>
    f29e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f2a0:	|      movea.l 24(sp),a0
    f2a4:	|      move.l 24(a0),d0
    f2a8:	|      move.l d0,-(sp)
    f2aa:	|      pea 7 <_start+0x7>
    f2ae:	|      lea 8(sp),a0
    f2b2:	|      move.l a0,-(sp)
    f2b4:	|      jsr 127da <getValueType>
    f2ba:	|      lea 12(sp),sp
    f2be:	|      tst.w d0
    f2c0:	|  /-- bne.s f2c6 <builtIn_addCharacter+0xc6>
    f2c2:	|  |   moveq #1,d0
    f2c4:	+--|-- bra.s f2fe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    f2c6:	|  \-> moveq #24,d0
    f2c8:	|      add.l 24(sp),d0
    f2cc:	|      move.l d0,-(sp)
    f2ce:	|      jsr 1315e <trimStack>
    f2d4:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    f2d6:	|      movea.l (sp),a0
    f2d8:	|      move.l 4(sp),d1
    f2dc:	|      move.l 8(sp),d0
    f2e0:	|      move.l 12(sp),-(sp)
    f2e4:	|      move.l a0,-(sp)
    f2e6:	|      move.l d1,-(sp)
    f2e8:	|      move.l d0,-(sp)
    f2ea:	|      jsr 750e <addPerson>
    f2f0:	|      lea 16(sp),sp
    f2f4:	|      tst.w d0
    f2f6:	|  /-- beq.s f2fc <builtIn_addCharacter+0xfc>
    f2f8:	|  |   moveq #2,d0
    f2fa:	+--|-- bra.s f2fe <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    f2fc:	|  \-> moveq #1,d0
}
    f2fe:	\----> lea 16(sp),sp
    f302:	       rts

0000f304 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    f304:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f306:	       movea.l 12(sp),a0
    f30a:	       move.l 24(a0),d0
    f30e:	       move.l d0,-(sp)
    f310:	       pea 7 <_start+0x7>
    f314:	       move.l sp,d0
    f316:	       addq.l #8,d0
    f318:	       move.l d0,-(sp)
    f31a:	       jsr 127da <getValueType>
    f320:	       lea 12(sp),sp
    f324:	       tst.w d0
    f326:	   /-- bne.s f32c <builtIn_hideCharacter+0x28>
    f328:	   |   moveq #1,d0
    f32a:	/--|-- bra.s f34c <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    f32c:	|  \-> moveq #24,d0
    f32e:	|      add.l 12(sp),d0
    f332:	|      move.l d0,-(sp)
    f334:	|      jsr 1315e <trimStack>
    f33a:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    f33c:	|      move.l (sp),d0
    f33e:	|      move.l d0,-(sp)
    f340:	|      clr.l -(sp)
    f342:	|      jsr 9e9e <setShown>
    f348:	|      addq.l #8,sp
	return BR_CONTINUE;
    f34a:	|      moveq #2,d0
}
    f34c:	\----> addq.l #4,sp
    f34e:	       rts

0000f350 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    f350:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f352:	       movea.l 12(sp),a0
    f356:	       move.l 24(a0),d0
    f35a:	       move.l d0,-(sp)
    f35c:	       pea 7 <_start+0x7>
    f360:	       move.l sp,d0
    f362:	       addq.l #8,d0
    f364:	       move.l d0,-(sp)
    f366:	       jsr 127da <getValueType>
    f36c:	       lea 12(sp),sp
    f370:	       tst.w d0
    f372:	   /-- bne.s f378 <builtIn_showCharacter+0x28>
    f374:	   |   moveq #1,d0
    f376:	/--|-- bra.s f39a <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    f378:	|  \-> moveq #24,d0
    f37a:	|      add.l 12(sp),d0
    f37e:	|      move.l d0,-(sp)
    f380:	|      jsr 1315e <trimStack>
    f386:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    f388:	|      move.l (sp),d0
    f38a:	|      move.l d0,-(sp)
    f38c:	|      pea 1 <_start+0x1>
    f390:	|      jsr 9e9e <setShown>
    f396:	|      addq.l #8,sp
	return BR_CONTINUE;
    f398:	|      moveq #2,d0
}
    f39a:	\----> addq.l #4,sp
    f39c:	       rts

0000f39e <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    f39e:	jsr 4600 <killSpeechTimers>
	killMostPeople ();
    f3a4:	jsr 8ce6 <killMostPeople>
	return BR_CONTINUE;
    f3aa:	moveq #2,d0
}
    f3ac:	rts

0000f3ae <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    f3ae:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f3b0:	       movea.l 16(sp),a0
    f3b4:	       move.l 24(a0),d0
    f3b8:	       move.l d0,-(sp)
    f3ba:	       pea 1 <_start+0x1>
    f3be:	       move.l sp,d0
    f3c0:	       addq.l #8,d0
    f3c2:	       move.l d0,-(sp)
    f3c4:	       jsr 127da <getValueType>
    f3ca:	       lea 12(sp),sp
    f3ce:	       tst.w d0
    f3d0:	   /-- bne.s f3d6 <builtIn_setCharacterDrawMode+0x28>
    f3d2:	   |   moveq #1,d0
    f3d4:	/--|-- bra.s f430 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    f3d6:	|  \-> moveq #24,d0
    f3d8:	|      add.l 16(sp),d0
    f3dc:	|      move.l d0,-(sp)
    f3de:	|      jsr 1315e <trimStack>
    f3e4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f3e6:	|      movea.l 16(sp),a0
    f3ea:	|      move.l 24(a0),d0
    f3ee:	|      move.l d0,-(sp)
    f3f0:	|      pea 7 <_start+0x7>
    f3f4:	|      moveq #12,d0
    f3f6:	|      add.l sp,d0
    f3f8:	|      move.l d0,-(sp)
    f3fa:	|      jsr 127da <getValueType>
    f400:	|      lea 12(sp),sp
    f404:	|      tst.w d0
    f406:	|  /-- bne.s f40c <builtIn_setCharacterDrawMode+0x5e>
    f408:	|  |   moveq #1,d0
    f40a:	+--|-- bra.s f430 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    f40c:	|  \-> moveq #24,d0
    f40e:	|      add.l 16(sp),d0
    f412:	|      move.l d0,-(sp)
    f414:	|      jsr 1315e <trimStack>
    f41a:	|      addq.l #4,sp
	setDrawMode (di, obj);
    f41c:	|      move.l 4(sp),d1
    f420:	|      move.l (sp),d0
    f422:	|      move.l d1,-(sp)
    f424:	|      move.l d0,-(sp)
    f426:	|      jsr 97dc <setDrawMode>
    f42c:	|      addq.l #8,sp
	return BR_CONTINUE;
    f42e:	|      moveq #2,d0
}
    f430:	\----> addq.l #8,sp
    f432:	       rts

0000f434 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    f434:	pea 16d59 <PutChar+0x1be7>
    f43a:	jsr 14822 <KPrintF>
    f440:	addq.l #4,sp
	return BR_CONTINUE;
    f442:	moveq #2,d0
}
    f444:	rts

0000f446 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    f446:	pea 16d8c <PutChar+0x1c1a>
    f44c:	jsr 14822 <KPrintF>
    f452:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    f454:	moveq #2,d0
}
    f456:	rts

0000f458 <builtIn_setScale>:

builtIn(setScale)
{
    f458:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f45a:	       movea.l 16(sp),a0
    f45e:	       move.l 24(a0),d0
    f462:	       move.l d0,-(sp)
    f464:	       pea 1 <_start+0x1>
    f468:	       move.l sp,d0
    f46a:	       addq.l #8,d0
    f46c:	       move.l d0,-(sp)
    f46e:	       jsr 127da <getValueType>
    f474:	       lea 12(sp),sp
    f478:	       tst.w d0
    f47a:	   /-- bne.s f480 <builtIn_setScale+0x28>
    f47c:	   |   moveq #1,d0
    f47e:	/--|-- bra.s f4e2 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    f480:	|  \-> moveq #24,d0
    f482:	|      add.l 16(sp),d0
    f486:	|      move.l d0,-(sp)
    f488:	|      jsr 1315e <trimStack>
    f48e:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f490:	|      movea.l 16(sp),a0
    f494:	|      move.l 24(a0),d0
    f498:	|      move.l d0,-(sp)
    f49a:	|      pea 1 <_start+0x1>
    f49e:	|      moveq #12,d0
    f4a0:	|      add.l sp,d0
    f4a2:	|      move.l d0,-(sp)
    f4a4:	|      jsr 127da <getValueType>
    f4aa:	|      lea 12(sp),sp
    f4ae:	|      tst.w d0
    f4b0:	|  /-- bne.s f4b6 <builtIn_setScale+0x5e>
    f4b2:	|  |   moveq #1,d0
    f4b4:	+--|-- bra.s f4e2 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    f4b6:	|  \-> moveq #24,d0
    f4b8:	|      add.l 16(sp),d0
    f4bc:	|      move.l d0,-(sp)
    f4be:	|      jsr 1315e <trimStack>
    f4c4:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    f4c6:	|      move.l (sp),d0
    f4c8:	|      move.l d0,d0
    f4ca:	|      movea.w d0,a1
    f4cc:	|      move.l 4(sp),d0
    f4d0:	|      move.l d0,d0
    f4d2:	|      movea.w d0,a0
    f4d4:	|      move.l a1,-(sp)
    f4d6:	|      move.l a0,-(sp)
    f4d8:	|      jsr 9e76 <setScale>
    f4de:	|      addq.l #8,sp
	return BR_CONTINUE;
    f4e0:	|      moveq #2,d0
}
    f4e2:	\----> addq.l #8,sp
    f4e4:	       rts

0000f4e6 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    f4e6:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f4e8:	       movea.l 12(sp),a0
    f4ec:	       move.l 24(a0),d0
    f4f0:	       move.l d0,-(sp)
    f4f2:	       pea 7 <_start+0x7>
    f4f6:	       move.l sp,d0
    f4f8:	       addq.l #8,d0
    f4fa:	       move.l d0,-(sp)
    f4fc:	       jsr 127da <getValueType>
    f502:	       lea 12(sp),sp
    f506:	       tst.w d0
    f508:	   /-- bne.s f50e <builtIn_stopCharacter+0x28>
    f50a:	   |   moveq #1,d0
    f50c:	/--|-- bra.s f546 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    f50e:	|  \-> moveq #24,d0
    f510:	|      add.l 12(sp),d0
    f514:	|      move.l d0,-(sp)
    f516:	|      jsr 1315e <trimStack>
    f51c:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    f51e:	|      move.l (sp),d0
    f520:	|      move.l d0,-(sp)
    f522:	|      jsr 9faa <stopPerson>
    f528:	|      addq.l #4,sp
    f52a:	|      movea.w d0,a0
    f52c:	|      moveq #28,d0
    f52e:	|      add.l 12(sp),d0
    f532:	|      move.l a0,-(sp)
    f534:	|      pea 1 <_start+0x1>
    f538:	|      move.l d0,-(sp)
    f53a:	|      jsr 130cc <setVariable>
    f540:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f544:	|      moveq #2,d0
}
    f546:	\----> addq.l #4,sp
    f548:	       rts

0000f54a <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    f54a:	pea 16dc6 <PutChar+0x1c54>
    f550:	jsr 14822 <KPrintF>
    f556:	addq.l #4,sp
	return BR_CONTINUE;
    f558:	moveq #2,d0
}
    f55a:	rts

0000f55c <builtIn_animate>:

builtIn(animate)
{
    f55c:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    f55e:	       movea.l 16(sp),a0
    f562:	       move.l 24(a0),d0
    f566:	       move.l d0,-(sp)
    f568:	       jsr 12cb2 <getAnimationFromVar>
    f56e:	       addq.l #4,sp
    f570:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    f574:	   /-- bne.s f57a <builtIn_animate+0x1e>
    f576:	   |   moveq #1,d0
    f578:	/--|-- bra.s f5f8 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    f57a:	|  \-> moveq #24,d0
    f57c:	|      add.l 16(sp),d0
    f580:	|      move.l d0,-(sp)
    f582:	|      jsr 1315e <trimStack>
    f588:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f58a:	|      movea.l 16(sp),a0
    f58e:	|      move.l 24(a0),d0
    f592:	|      move.l d0,-(sp)
    f594:	|      pea 7 <_start+0x7>
    f598:	|      move.l sp,d0
    f59a:	|      addq.l #8,d0
    f59c:	|      move.l d0,-(sp)
    f59e:	|      jsr 127da <getValueType>
    f5a4:	|      lea 12(sp),sp
    f5a8:	|      tst.w d0
    f5aa:	|  /-- bne.s f5b0 <builtIn_animate+0x54>
    f5ac:	|  |   moveq #1,d0
    f5ae:	+--|-- bra.s f5f8 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    f5b0:	|  \-> moveq #24,d0
    f5b2:	|      add.l 16(sp),d0
    f5b6:	|      move.l d0,-(sp)
    f5b8:	|      jsr 1315e <trimStack>
    f5be:	|      addq.l #4,sp
	animatePerson (obj, pp);
    f5c0:	|      move.l (sp),d0
    f5c2:	|      move.l 4(sp),-(sp)
    f5c6:	|      move.l d0,-(sp)
    f5c8:	|      jsr 7782 <animatePerson>
    f5ce:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    f5d0:	|      move.l 4(sp),-(sp)
    f5d4:	|      jsr 9ffe <timeForAnim>
    f5da:	|      addq.l #4,sp
    f5dc:	|      move.l d0,d1
    f5de:	|      moveq #28,d0
    f5e0:	|      add.l 16(sp),d0
    f5e4:	|      move.l d1,-(sp)
    f5e6:	|      pea 1 <_start+0x1>
    f5ea:	|      move.l d0,-(sp)
    f5ec:	|      jsr 130cc <setVariable>
    f5f2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f5f6:	|      moveq #2,d0
}
    f5f8:	\----> addq.l #8,sp
    f5fa:	       rts

0000f5fc <builtIn_setCostume>:

builtIn(setCostume)
{
    f5fc:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    f5fe:	       movea.l 16(sp),a0
    f602:	       move.l 24(a0),d0
    f606:	       move.l d0,-(sp)
    f608:	       jsr 12486 <getCostumeFromVar>
    f60e:	       addq.l #4,sp
    f610:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    f614:	   /-- bne.s f61a <builtIn_setCostume+0x1e>
    f616:	   |   moveq #1,d0
    f618:	/--|-- bra.s f672 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    f61a:	|  \-> moveq #24,d0
    f61c:	|      add.l 16(sp),d0
    f620:	|      move.l d0,-(sp)
    f622:	|      jsr 1315e <trimStack>
    f628:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f62a:	|      movea.l 16(sp),a0
    f62e:	|      move.l 24(a0),d0
    f632:	|      move.l d0,-(sp)
    f634:	|      pea 7 <_start+0x7>
    f638:	|      move.l sp,d0
    f63a:	|      addq.l #8,d0
    f63c:	|      move.l d0,-(sp)
    f63e:	|      jsr 127da <getValueType>
    f644:	|      lea 12(sp),sp
    f648:	|      tst.w d0
    f64a:	|  /-- bne.s f650 <builtIn_setCostume+0x54>
    f64c:	|  |   moveq #1,d0
    f64e:	+--|-- bra.s f672 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    f650:	|  \-> moveq #24,d0
    f652:	|      add.l 16(sp),d0
    f656:	|      move.l d0,-(sp)
    f658:	|      jsr 1315e <trimStack>
    f65e:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    f660:	|      move.l (sp),d0
    f662:	|      move.l 4(sp),-(sp)
    f666:	|      move.l d0,-(sp)
    f668:	|      jsr 77cc <animatePersonUsingPersona>
    f66e:	|      addq.l #8,sp
	return BR_CONTINUE;
    f670:	|      moveq #2,d0
}
    f672:	\----> addq.l #8,sp
    f674:	       rts

0000f676 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    f676:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f678:	       movea.l 16(sp),a0
    f67c:	       move.l 24(a0),d0
    f680:	       move.l d0,-(sp)
    f682:	       pea 1 <_start+0x1>
    f686:	       move.l sp,d0
    f688:	       addq.l #8,d0
    f68a:	       move.l d0,-(sp)
    f68c:	       jsr 127da <getValueType>
    f692:	       lea 12(sp),sp
    f696:	       tst.w d0
    f698:	   /-- bne.s f69e <builtIn_floatCharacter+0x28>
    f69a:	   |   moveq #1,d0
    f69c:	/--|-- bra.s f712 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    f69e:	|  \-> moveq #24,d0
    f6a0:	|      add.l 16(sp),d0
    f6a4:	|      move.l d0,-(sp)
    f6a6:	|      jsr 1315e <trimStack>
    f6ac:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f6ae:	|      movea.l 16(sp),a0
    f6b2:	|      move.l 24(a0),d0
    f6b6:	|      move.l d0,-(sp)
    f6b8:	|      pea 7 <_start+0x7>
    f6bc:	|      moveq #12,d0
    f6be:	|      add.l sp,d0
    f6c0:	|      move.l d0,-(sp)
    f6c2:	|      jsr 127da <getValueType>
    f6c8:	|      lea 12(sp),sp
    f6cc:	|      tst.w d0
    f6ce:	|  /-- bne.s f6d4 <builtIn_floatCharacter+0x5e>
    f6d0:	|  |   moveq #1,d0
    f6d2:	+--|-- bra.s f712 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    f6d4:	|  \-> moveq #24,d0
    f6d6:	|      add.l 16(sp),d0
    f6da:	|      move.l d0,-(sp)
    f6dc:	|      jsr 1315e <trimStack>
    f6e2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    f6e4:	|      move.l 4(sp),d1
    f6e8:	|      move.l (sp),d0
    f6ea:	|      move.l d1,-(sp)
    f6ec:	|      move.l d0,-(sp)
    f6ee:	|      jsr 88a8 <floatCharacter>
    f6f4:	|      addq.l #8,sp
    f6f6:	|      movea.w d0,a0
    f6f8:	|      moveq #28,d0
    f6fa:	|      add.l 16(sp),d0
    f6fe:	|      move.l a0,-(sp)
    f700:	|      pea 1 <_start+0x1>
    f704:	|      move.l d0,-(sp)
    f706:	|      jsr 130cc <setVariable>
    f70c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f710:	|      moveq #2,d0
}
    f712:	\----> addq.l #8,sp
    f714:	       rts

0000f716 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    f716:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f718:	       movea.l 16(sp),a0
    f71c:	       move.l 24(a0),d0
    f720:	       move.l d0,-(sp)
    f722:	       pea 1 <_start+0x1>
    f726:	       move.l sp,d0
    f728:	       addq.l #8,d0
    f72a:	       move.l d0,-(sp)
    f72c:	       jsr 127da <getValueType>
    f732:	       lea 12(sp),sp
    f736:	       tst.w d0
    f738:	   /-- bne.s f73e <builtIn_setCharacterWalkSpeed+0x28>
    f73a:	   |   moveq #1,d0
    f73c:	/--|-- bra.s f7b2 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    f73e:	|  \-> moveq #24,d0
    f740:	|      add.l 16(sp),d0
    f744:	|      move.l d0,-(sp)
    f746:	|      jsr 1315e <trimStack>
    f74c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f74e:	|      movea.l 16(sp),a0
    f752:	|      move.l 24(a0),d0
    f756:	|      move.l d0,-(sp)
    f758:	|      pea 7 <_start+0x7>
    f75c:	|      moveq #12,d0
    f75e:	|      add.l sp,d0
    f760:	|      move.l d0,-(sp)
    f762:	|      jsr 127da <getValueType>
    f768:	|      lea 12(sp),sp
    f76c:	|      tst.w d0
    f76e:	|  /-- bne.s f774 <builtIn_setCharacterWalkSpeed+0x5e>
    f770:	|  |   moveq #1,d0
    f772:	+--|-- bra.s f7b2 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    f774:	|  \-> moveq #24,d0
    f776:	|      add.l 16(sp),d0
    f77a:	|      move.l d0,-(sp)
    f77c:	|      jsr 1315e <trimStack>
    f782:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    f784:	|      move.l 4(sp),d1
    f788:	|      move.l (sp),d0
    f78a:	|      move.l d1,-(sp)
    f78c:	|      move.l d0,-(sp)
    f78e:	|      jsr 9e12 <setCharacterWalkSpeed>
    f794:	|      addq.l #8,sp
    f796:	|      movea.w d0,a0
    f798:	|      moveq #28,d0
    f79a:	|      add.l 16(sp),d0
    f79e:	|      move.l a0,-(sp)
    f7a0:	|      pea 1 <_start+0x1>
    f7a4:	|      move.l d0,-(sp)
    f7a6:	|      jsr 130cc <setVariable>
    f7ac:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f7b0:	|      moveq #2,d0
}
    f7b2:	\----> addq.l #8,sp
    f7b4:	       rts

0000f7b6 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    f7b6:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7b8:	       movea.l 16(sp),a0
    f7bc:	       move.l 24(a0),d0
    f7c0:	       move.l d0,-(sp)
    f7c2:	       pea 1 <_start+0x1>
    f7c6:	       move.l sp,d0
    f7c8:	       addq.l #8,d0
    f7ca:	       move.l d0,-(sp)
    f7cc:	       jsr 127da <getValueType>
    f7d2:	       lea 12(sp),sp
    f7d6:	       tst.w d0
    f7d8:	   /-- bne.s f7de <builtIn_turnCharacter+0x28>
    f7da:	   |   moveq #1,d0
    f7dc:	/--|-- bra.s f852 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    f7de:	|  \-> moveq #24,d0
    f7e0:	|      add.l 16(sp),d0
    f7e4:	|      move.l d0,-(sp)
    f7e6:	|      jsr 1315e <trimStack>
    f7ec:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f7ee:	|      movea.l 16(sp),a0
    f7f2:	|      move.l 24(a0),d0
    f7f6:	|      move.l d0,-(sp)
    f7f8:	|      pea 7 <_start+0x7>
    f7fc:	|      moveq #12,d0
    f7fe:	|      add.l sp,d0
    f800:	|      move.l d0,-(sp)
    f802:	|      jsr 127da <getValueType>
    f808:	|      lea 12(sp),sp
    f80c:	|      tst.w d0
    f80e:	|  /-- bne.s f814 <builtIn_turnCharacter+0x5e>
    f810:	|  |   moveq #1,d0
    f812:	+--|-- bra.s f852 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    f814:	|  \-> moveq #24,d0
    f816:	|      add.l 16(sp),d0
    f81a:	|      move.l d0,-(sp)
    f81c:	|      jsr 1315e <trimStack>
    f822:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    f824:	|      move.l (sp),d1
    f826:	|      move.l 4(sp),d0
    f82a:	|      move.l d1,-(sp)
    f82c:	|      move.l d0,-(sp)
    f82e:	|      jsr a0b6 <turnPersonToFace>
    f834:	|      addq.l #8,sp
    f836:	|      movea.w d0,a0
    f838:	|      moveq #28,d0
    f83a:	|      add.l 16(sp),d0
    f83e:	|      move.l a0,-(sp)
    f840:	|      pea 1 <_start+0x1>
    f844:	|      move.l d0,-(sp)
    f846:	|      jsr 130cc <setVariable>
    f84c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f850:	|      moveq #2,d0
}
    f852:	\----> addq.l #8,sp
    f854:	       rts

0000f856 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    f856:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f858:	       movea.l 16(sp),a0
    f85c:	       move.l 24(a0),d0
    f860:	       move.l d0,-(sp)
    f862:	       pea 1 <_start+0x1>
    f866:	       move.l sp,d0
    f868:	       addq.l #8,d0
    f86a:	       move.l d0,-(sp)
    f86c:	       jsr 127da <getValueType>
    f872:	       lea 12(sp),sp
    f876:	       tst.w d0
    f878:	   /-- bne.s f87e <builtIn_setCharacterExtra+0x28>
    f87a:	   |   moveq #1,d0
    f87c:	/--|-- bra.s f8f2 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    f87e:	|  \-> moveq #24,d0
    f880:	|      add.l 16(sp),d0
    f884:	|      move.l d0,-(sp)
    f886:	|      jsr 1315e <trimStack>
    f88c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f88e:	|      movea.l 16(sp),a0
    f892:	|      move.l 24(a0),d0
    f896:	|      move.l d0,-(sp)
    f898:	|      pea 7 <_start+0x7>
    f89c:	|      moveq #12,d0
    f89e:	|      add.l sp,d0
    f8a0:	|      move.l d0,-(sp)
    f8a2:	|      jsr 127da <getValueType>
    f8a8:	|      lea 12(sp),sp
    f8ac:	|      tst.w d0
    f8ae:	|  /-- bne.s f8b4 <builtIn_setCharacterExtra+0x5e>
    f8b0:	|  |   moveq #1,d0
    f8b2:	+--|-- bra.s f8f2 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    f8b4:	|  \-> moveq #24,d0
    f8b6:	|      add.l 16(sp),d0
    f8ba:	|      move.l d0,-(sp)
    f8bc:	|      jsr 1315e <trimStack>
    f8c2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    f8c4:	|      move.l (sp),d1
    f8c6:	|      move.l 4(sp),d0
    f8ca:	|      move.l d1,-(sp)
    f8cc:	|      move.l d0,-(sp)
    f8ce:	|      jsr 9e40 <setPersonExtra>
    f8d4:	|      addq.l #8,sp
    f8d6:	|      movea.w d0,a0
    f8d8:	|      moveq #28,d0
    f8da:	|      add.l 16(sp),d0
    f8de:	|      move.l a0,-(sp)
    f8e0:	|      pea 1 <_start+0x1>
    f8e4:	|      move.l d0,-(sp)
    f8e6:	|      jsr 130cc <setVariable>
    f8ec:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f8f0:	|      moveq #2,d0
}
    f8f2:	\----> addq.l #8,sp
    f8f4:	       rts

0000f8f6 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
    f8f6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f8f8:	       movea.l 12(sp),a0
    f8fc:	       move.l 24(a0),d0
    f900:	       move.l d0,-(sp)
    f902:	       pea 7 <_start+0x7>
    f906:	       move.l sp,d0
    f908:	       addq.l #8,d0
    f90a:	       move.l d0,-(sp)
    f90c:	       jsr 127da <getValueType>
    f912:	       lea 12(sp),sp
    f916:	       tst.w d0
    f918:	   /-- bne.s f91e <builtIn_removeCharacter+0x28>
    f91a:	   |   moveq #1,d0
    f91c:	/--|-- bra.s f93c <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    f91e:	|  \-> moveq #24,d0
    f920:	|      add.l 12(sp),d0
    f924:	|      move.l d0,-(sp)
    f926:	|      jsr 1315e <trimStack>
    f92c:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    f92e:	|      move.l (sp),d0
    f930:	|      move.l d0,-(sp)
    f932:	|      jsr 9040 <removeOneCharacter>
    f938:	|      addq.l #4,sp
	return BR_CONTINUE;
    f93a:	|      moveq #2,d0
}
    f93c:	\----> addq.l #4,sp
    f93e:	       rts

0000f940 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    f940:	                lea -28(sp),sp
    f944:	                move.l d2,-(sp)
    f946:	                move.l 44(sp),d1
    f94a:	                move.l 48(sp),d0
    f94e:	                move.w d1,d1
    f950:	                move.w d1,6(sp)
    f954:	                move.w d0,d0
    f956:	                move.w d0,4(sp)
	switch (numParams) {
    f95a:	                moveq #2,d0
    f95c:	                cmp.l 36(sp),d0
    f960:	      /-------- beq.w faa2 <moveChr+0x162>
    f964:	      |         moveq #3,d0
    f966:	      |         cmp.l 36(sp),d0
    f96a:	/-----|-------- bne.w fbd6 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f96e:	|     |         movea.l 40(sp),a0
    f972:	|     |         move.l 24(a0),d0
    f976:	|     |         move.l d0,-(sp)
    f978:	|     |         pea 1 <_start+0x1>
    f97c:	|     |         lea 20(sp),a0
    f980:	|     |         move.l a0,-(sp)
    f982:	|     |         jsr 127da <getValueType>
    f988:	|     |         lea 12(sp),sp
    f98c:	|     |         tst.w d0
    f98e:	|     |     /-- bne.s f996 <moveChr+0x56>
    f990:	|     |     |   moveq #1,d0
    f992:	|  /--|-----|-- bra.w fbe6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    f996:	|  |  |     \-> moveq #24,d0
    f998:	|  |  |         add.l 40(sp),d0
    f99c:	|  |  |         move.l d0,-(sp)
    f99e:	|  |  |         jsr 1315e <trimStack>
    f9a4:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f9a6:	|  |  |         movea.l 40(sp),a0
    f9aa:	|  |  |         move.l 24(a0),d0
    f9ae:	|  |  |         move.l d0,-(sp)
    f9b0:	|  |  |         pea 1 <_start+0x1>
    f9b4:	|  |  |         lea 24(sp),a0
    f9b8:	|  |  |         move.l a0,-(sp)
    f9ba:	|  |  |         jsr 127da <getValueType>
    f9c0:	|  |  |         lea 12(sp),sp
    f9c4:	|  |  |         tst.w d0
    f9c6:	|  |  |     /-- bne.s f9ce <moveChr+0x8e>
    f9c8:	|  |  |     |   moveq #1,d0
    f9ca:	|  +--|-----|-- bra.w fbe6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    f9ce:	|  |  |     \-> moveq #24,d0
    f9d0:	|  |  |         add.l 40(sp),d0
    f9d4:	|  |  |         move.l d0,-(sp)
    f9d6:	|  |  |         jsr 1315e <trimStack>
    f9dc:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f9de:	|  |  |         movea.l 40(sp),a0
    f9e2:	|  |  |         move.l 24(a0),d0
    f9e6:	|  |  |         move.l d0,-(sp)
    f9e8:	|  |  |         pea 7 <_start+0x7>
    f9ec:	|  |  |         lea 16(sp),a0
    f9f0:	|  |  |         move.l a0,-(sp)
    f9f2:	|  |  |         jsr 127da <getValueType>
    f9f8:	|  |  |         lea 12(sp),sp
    f9fc:	|  |  |         tst.w d0
    f9fe:	|  |  |     /-- bne.s fa06 <moveChr+0xc6>
    fa00:	|  |  |     |   moveq #1,d0
    fa02:	|  +--|-----|-- bra.w fbe6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    fa06:	|  |  |     \-> moveq #24,d0
    fa08:	|  |  |         add.l 40(sp),d0
    fa0c:	|  |  |         move.l d0,-(sp)
    fa0e:	|  |  |         jsr 1315e <trimStack>
    fa14:	|  |  |         addq.l #4,sp

			if (force) {
    fa16:	|  |  |         tst.w 6(sp)
    fa1a:	|  |  |     /-- beq.s fa4a <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    fa1c:	|  |  |     |   movea.l 8(sp),a0
    fa20:	|  |  |     |   move.l 12(sp),d1
    fa24:	|  |  |     |   move.l 16(sp),d0
    fa28:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbba9a>
    fa2c:	|  |  |     |   move.l 44(sp),-(sp)
    fa30:	|  |  |     |   move.l a0,-(sp)
    fa32:	|  |  |     |   move.l d1,-(sp)
    fa34:	|  |  |     |   move.l d0,-(sp)
    fa36:	|  |  |     |   jsr 88cc <forceWalkingPerson>
    fa3c:	|  |  |     |   lea 20(sp),sp
    fa40:	|  |  |     |   tst.w d0
    fa42:	|  |  |  /--|-- beq.s fa9c <moveChr+0x15c>
    fa44:	|  |  |  |  |   moveq #3,d0
    fa46:	|  +--|--|--|-- bra.w fbe6 <moveChr+0x2a6>
			} else if (immediate) {
    fa4a:	|  |  |  |  \-> tst.w 4(sp)
    fa4e:	|  |  |  |  /-- beq.s fa6e <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    fa50:	|  |  |  |  |   movea.l 8(sp),a0
    fa54:	|  |  |  |  |   move.l 12(sp),d1
    fa58:	|  |  |  |  |   move.l 16(sp),d0
    fa5c:	|  |  |  |  |   move.l a0,-(sp)
    fa5e:	|  |  |  |  |   move.l d1,-(sp)
    fa60:	|  |  |  |  |   move.l d0,-(sp)
    fa62:	|  |  |  |  |   jsr 8bd4 <jumpPerson>
    fa68:	|  |  |  |  |   lea 12(sp),sp
    fa6c:	|  |  |  +--|-- bra.s fa9c <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    fa6e:	|  |  |  |  \-> movea.l 8(sp),a0
    fa72:	|  |  |  |      move.l 12(sp),d1
    fa76:	|  |  |  |      move.l 16(sp),d0
    fa7a:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbba9a>
    fa7e:	|  |  |  |      move.l 44(sp),-(sp)
    fa82:	|  |  |  |      move.l a0,-(sp)
    fa84:	|  |  |  |      move.l d1,-(sp)
    fa86:	|  |  |  |      move.l d0,-(sp)
    fa88:	|  |  |  |      jsr 8da4 <makeWalkingPerson>
    fa8e:	|  |  |  |      lea 20(sp),sp
    fa92:	|  |  |  |      tst.w d0
    fa94:	|  |  |  +----- beq.s fa9c <moveChr+0x15c>
    fa96:	|  |  |  |      moveq #3,d0
    fa98:	|  +--|--|----- bra.w fbe6 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    fa9c:	|  |  |  \----> moveq #2,d0
    fa9e:	|  +--|-------- bra.w fbe6 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    faa2:	|  |  \-------> movea.l 40(sp),a0
    faa6:	|  |            move.l 24(a0),d0
    faaa:	|  |            move.l d0,-(sp)
    faac:	|  |            pea 7 <_start+0x7>
    fab0:	|  |            moveq #32,d0
    fab2:	|  |            add.l sp,d0
    fab4:	|  |            move.l d0,-(sp)
    fab6:	|  |            jsr 127da <getValueType>
    fabc:	|  |            lea 12(sp),sp
    fac0:	|  |            tst.w d0
    fac2:	|  |        /-- bne.s faca <moveChr+0x18a>
    fac4:	|  |        |   moveq #1,d0
    fac6:	|  +--------|-- bra.w fbe6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    faca:	|  |        \-> moveq #24,d0
    facc:	|  |            add.l 40(sp),d0
    fad0:	|  |            move.l d0,-(sp)
    fad2:	|  |            jsr 1315e <trimStack>
    fad8:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fada:	|  |            movea.l 40(sp),a0
    fade:	|  |            move.l 24(a0),d0
    fae2:	|  |            move.l d0,-(sp)
    fae4:	|  |            pea 7 <_start+0x7>
    fae8:	|  |            lea 28(sp),a0
    faec:	|  |            move.l a0,-(sp)
    faee:	|  |            jsr 127da <getValueType>
    faf4:	|  |            lea 12(sp),sp
    faf8:	|  |            tst.w d0
    fafa:	|  |        /-- bne.s fb02 <moveChr+0x1c2>
    fafc:	|  |        |   moveq #1,d0
    fafe:	|  +--------|-- bra.w fbe6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    fb02:	|  |        \-> moveq #24,d0
    fb04:	|  |            add.l 40(sp),d0
    fb08:	|  |            move.l d0,-(sp)
    fb0a:	|  |            jsr 1315e <trimStack>
    fb10:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    fb12:	|  |            move.l 24(sp),d0
    fb16:	|  |            move.l d0,-(sp)
    fb18:	|  |            jsr 132a4 <getRegionForObject>
    fb1e:	|  |            addq.l #4,sp
    fb20:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    fb24:	|  |        /-- bne.s fb2c <moveChr+0x1ec>
    fb26:	|  |        |   moveq #2,d0
    fb28:	|  +--------|-- bra.w fbe6 <moveChr+0x2a6>

			if (force)
    fb2c:	|  |        \-> tst.w 6(sp)
    fb30:	|  |        /-- beq.s fb6c <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    fb32:	|  |        |   movea.l 28(sp),a0
    fb36:	|  |        |   move.l 24(a0),d2
    fb3a:	|  |        |   movea.l 20(sp),a1
    fb3e:	|  |        |   movea.l 28(sp),a0
    fb42:	|  |        |   move.l 20(a0),d1
    fb46:	|  |        |   movea.l 28(sp),a0
    fb4a:	|  |        |   move.l 16(a0),d0
    fb4e:	|  |        |   move.l d2,-(sp)
    fb50:	|  |        |   move.l 44(sp),-(sp)
    fb54:	|  |        |   move.l a1,-(sp)
    fb56:	|  |        |   move.l d1,-(sp)
    fb58:	|  |        |   move.l d0,-(sp)
    fb5a:	|  |        |   jsr 88cc <forceWalkingPerson>
    fb60:	|  |        |   lea 20(sp),sp
    fb64:	|  |        |   tst.w d0
    fb66:	|  |     /--|-- beq.s fbd2 <moveChr+0x292>
    fb68:	|  |     |  |   moveq #3,d0
    fb6a:	|  +-----|--|-- bra.s fbe6 <moveChr+0x2a6>
			}
			else if (immediate)
    fb6c:	|  |     |  \-> tst.w 4(sp)
    fb70:	|  |     |  /-- beq.s fb98 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    fb72:	|  |     |  |   movea.l 20(sp),a1
    fb76:	|  |     |  |   movea.l 28(sp),a0
    fb7a:	|  |     |  |   move.l 20(a0),d1
    fb7e:	|  |     |  |   movea.l 28(sp),a0
    fb82:	|  |     |  |   move.l 16(a0),d0
    fb86:	|  |     |  |   move.l a1,-(sp)
    fb88:	|  |     |  |   move.l d1,-(sp)
    fb8a:	|  |     |  |   move.l d0,-(sp)
    fb8c:	|  |     |  |   jsr 8bd4 <jumpPerson>
    fb92:	|  |     |  |   lea 12(sp),sp
    fb96:	|  |     +--|-- bra.s fbd2 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    fb98:	|  |     |  \-> movea.l 28(sp),a0
    fb9c:	|  |     |      move.l 24(a0),d2
    fba0:	|  |     |      movea.l 20(sp),a1
    fba4:	|  |     |      movea.l 28(sp),a0
    fba8:	|  |     |      move.l 20(a0),d1
    fbac:	|  |     |      movea.l 28(sp),a0
    fbb0:	|  |     |      move.l 16(a0),d0
    fbb4:	|  |     |      move.l d2,-(sp)
    fbb6:	|  |     |      move.l 44(sp),-(sp)
    fbba:	|  |     |      move.l a1,-(sp)
    fbbc:	|  |     |      move.l d1,-(sp)
    fbbe:	|  |     |      move.l d0,-(sp)
    fbc0:	|  |     |      jsr 8da4 <makeWalkingPerson>
    fbc6:	|  |     |      lea 20(sp),sp
    fbca:	|  |     |      tst.w d0
    fbcc:	|  |     +----- beq.s fbd2 <moveChr+0x292>
    fbce:	|  |     |      moveq #3,d0
    fbd0:	|  +-----|----- bra.s fbe6 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    fbd2:	|  |     \----> moveq #2,d0
    fbd4:	|  +----------- bra.s fbe6 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    fbd6:	\--|----------> pea 16de4 <PutChar+0x1c72>
    fbdc:	   |            jsr 14822 <KPrintF>
    fbe2:	   |            addq.l #4,sp
			return BR_ERROR;
    fbe4:	   |            moveq #1,d0
	}
}
    fbe6:	   \----------> move.l (sp)+,d2
    fbe8:	                lea 28(sp),sp
    fbec:	                rts

0000fbee <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    fbee:	clr.l -(sp)
    fbf0:	clr.l -(sp)
    fbf2:	move.l 16(sp),-(sp)
    fbf6:	move.l 16(sp),-(sp)
    fbfa:	jsr f940 <moveChr>
    fc00:	lea 16(sp),sp
}
    fc04:	rts

0000fc06 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    fc06:	clr.l -(sp)
    fc08:	pea 1 <_start+0x1>
    fc0c:	move.l 16(sp),-(sp)
    fc10:	move.l 16(sp),-(sp)
    fc14:	jsr f940 <moveChr>
    fc1a:	lea 16(sp),sp
}
    fc1e:	rts

0000fc20 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    fc20:	pea 1 <_start+0x1>
    fc24:	clr.l -(sp)
    fc26:	move.l 16(sp),-(sp)
    fc2a:	move.l 16(sp),-(sp)
    fc2e:	jsr f940 <moveChr>
    fc34:	lea 16(sp),sp
}
    fc38:	rts

0000fc3a <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    fc3a:	jsr 5cb4 <clearStatusBar>
	return BR_CONTINUE;
    fc40:	moveq #2,d0
}
    fc42:	rts

0000fc44 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    fc44:	jsr 5d5c <killLastStatus>
	return BR_CONTINUE;
    fc4a:	moveq #2,d0
}
    fc4c:	rts

0000fc4e <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    fc4e:	jsr 5c4a <addStatusBar>
	return BR_CONTINUE;
    fc54:	moveq #2,d0
}
    fc56:	rts

0000fc58 <builtIn_statusText>:

builtIn(statusText)
{
    fc58:	       subq.l #8,sp
    fc5a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fc5c:	       movea.l 20(sp),a0
    fc60:	       move.l 24(a0),d0
    fc64:	       move.l d0,-(sp)
    fc66:	       jsr 12db0 <getTextFromAnyVar>
    fc6c:	       addq.l #4,sp
    fc6e:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    fc72:	   /-- bne.s fc78 <builtIn_statusText+0x20>
    fc74:	   |   moveq #1,d0
    fc76:	/--|-- bra.s fcac <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    fc78:	|  \-> moveq #24,d0
    fc7a:	|      add.l 20(sp),d0
    fc7e:	|      move.l d0,-(sp)
    fc80:	|      jsr 1315e <trimStack>
    fc86:	|      addq.l #4,sp
	setStatusBar(newText);
    fc88:	|      move.l 8(sp),-(sp)
    fc8c:	|      jsr 5fdc <setStatusBar>
    fc92:	|      addq.l #4,sp
	FreeVec(newText);
    fc94:	|      move.l 8(sp),4(sp)
    fc9a:	|      move.l 19b50 <SysBase>,d0
    fca0:	|      movea.l d0,a6
    fca2:	|      movea.l 4(sp),a1
    fca6:	|      jsr -690(a6)
	return BR_CONTINUE;
    fcaa:	|      moveq #2,d0
}
    fcac:	\----> movea.l (sp)+,a6
    fcae:	       addq.l #8,sp
    fcb0:	       rts

0000fcb2 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    fcb2:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fcb4:	       movea.l 12(sp),a0
    fcb8:	       move.l 24(a0),d0
    fcbc:	       move.l d0,-(sp)
    fcbe:	       pea 1 <_start+0x1>
    fcc2:	       move.l sp,d0
    fcc4:	       addq.l #8,d0
    fcc6:	       move.l d0,-(sp)
    fcc8:	       jsr 127da <getValueType>
    fcce:	       lea 12(sp),sp
    fcd2:	       tst.w d0
    fcd4:	   /-- bne.s fcda <builtIn_lightStatus+0x28>
    fcd6:	   |   moveq #1,d0
    fcd8:	/--|-- bra.s fcf8 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    fcda:	|  \-> moveq #24,d0
    fcdc:	|      add.l 12(sp),d0
    fce0:	|      move.l d0,-(sp)
    fce2:	|      jsr 1315e <trimStack>
    fce8:	|      addq.l #4,sp
	setLitStatus (val);
    fcea:	|      move.l (sp),d0
    fcec:	|      move.l d0,-(sp)
    fcee:	|      jsr 5fcc <setLitStatus>
    fcf4:	|      addq.l #4,sp
	return BR_CONTINUE;
    fcf6:	|      moveq #2,d0
}
    fcf8:	\----> addq.l #4,sp
    fcfa:	       rts

0000fcfc <builtIn_positionStatus>:

builtIn(positionStatus)
{
    fcfc:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fcfe:	       movea.l 16(sp),a0
    fd02:	       move.l 24(a0),d0
    fd06:	       move.l d0,-(sp)
    fd08:	       pea 1 <_start+0x1>
    fd0c:	       move.l sp,d0
    fd0e:	       addq.l #8,d0
    fd10:	       move.l d0,-(sp)
    fd12:	       jsr 127da <getValueType>
    fd18:	       lea 12(sp),sp
    fd1c:	       tst.w d0
    fd1e:	   /-- bne.s fd24 <builtIn_positionStatus+0x28>
    fd20:	   |   moveq #1,d0
    fd22:	/--|-- bra.s fd7e <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    fd24:	|  \-> moveq #24,d0
    fd26:	|      add.l 16(sp),d0
    fd2a:	|      move.l d0,-(sp)
    fd2c:	|      jsr 1315e <trimStack>
    fd32:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fd34:	|      movea.l 16(sp),a0
    fd38:	|      move.l 24(a0),d0
    fd3c:	|      move.l d0,-(sp)
    fd3e:	|      pea 1 <_start+0x1>
    fd42:	|      moveq #12,d0
    fd44:	|      add.l sp,d0
    fd46:	|      move.l d0,-(sp)
    fd48:	|      jsr 127da <getValueType>
    fd4e:	|      lea 12(sp),sp
    fd52:	|      tst.w d0
    fd54:	|  /-- bne.s fd5a <builtIn_positionStatus+0x5e>
    fd56:	|  |   moveq #1,d0
    fd58:	+--|-- bra.s fd7e <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    fd5a:	|  \-> moveq #24,d0
    fd5c:	|      add.l 16(sp),d0
    fd60:	|      move.l d0,-(sp)
    fd62:	|      jsr 1315e <trimStack>
    fd68:	|      addq.l #4,sp
	positionStatus (x, y);
    fd6a:	|      move.l (sp),d1
    fd6c:	|      move.l 4(sp),d0
    fd70:	|      move.l d1,-(sp)
    fd72:	|      move.l d0,-(sp)
    fd74:	|      jsr 5dbe <positionStatus>
    fd7a:	|      addq.l #8,sp
	return BR_CONTINUE;
    fd7c:	|      moveq #2,d0
}
    fd7e:	\----> addq.l #8,sp
    fd80:	       rts

0000fd82 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    fd82:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fd84:	       movea.l 12(sp),a0
    fd88:	       move.l 24(a0),d0
    fd8c:	       move.l d0,-(sp)
    fd8e:	       pea 1 <_start+0x1>
    fd92:	       move.l sp,d0
    fd94:	       addq.l #8,d0
    fd96:	       move.l d0,-(sp)
    fd98:	       jsr 127da <getValueType>
    fd9e:	       lea 12(sp),sp
    fda2:	       tst.w d0
    fda4:	   /-- bne.s fdaa <builtIn_alignStatus+0x28>
    fda6:	   |   moveq #1,d0
    fda8:	/--|-- bra.s fdca <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    fdaa:	|  \-> moveq #24,d0
    fdac:	|      add.l 12(sp),d0
    fdb0:	|      move.l d0,-(sp)
    fdb2:	|      jsr 1315e <trimStack>
    fdb8:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    fdba:	|      move.l (sp),d0
    fdbc:	|      movea.l 194e0 <nowStatus>,a0
    fdc2:	|      move.l d0,d0
    fdc4:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    fdc8:	|      moveq #2,d0
}
    fdca:	\----> addq.l #4,sp
    fdcc:	       rts

0000fdce <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    fdce:	             tst.l 4(sp)
    fdd2:	      /----- beq.s fdde <getFuncNumForCallback+0x10>
    fdd4:	      |      moveq #1,d0
    fdd6:	      |      cmp.l 4(sp),d0
    fdda:	      |  /-- beq.s fde4 <getFuncNumForCallback+0x16>
    fddc:	   /--|--|-- bra.s fe1a <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    fdde:	   |  \--|-> clr.l 12(sp)
			break;
    fde2:	/--|-----|-- bra.s fe2c <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    fde4:	|  |     \-> movea.l 8(sp),a0
    fde8:	|  |         move.l 24(a0),d0
    fdec:	|  |         move.l d0,-(sp)
    fdee:	|  |         pea 2 <_start+0x2>
    fdf2:	|  |         move.l 20(sp),-(sp)
    fdf6:	|  |         jsr 127da <getValueType>
    fdfc:	|  |         lea 12(sp),sp
    fe00:	|  |         tst.w d0
    fe02:	|  |     /-- bne.s fe08 <getFuncNumForCallback+0x3a>
    fe04:	|  |     |   clr.w d0
    fe06:	|  |  /--|-- bra.s fe2e <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    fe08:	|  |  |  \-> moveq #24,d0
    fe0a:	|  |  |      add.l 8(sp),d0
    fe0e:	|  |  |      move.l d0,-(sp)
    fe10:	|  |  |      jsr 1315e <trimStack>
    fe16:	|  |  |      addq.l #4,sp
			break;
    fe18:	+--|--|----- bra.s fe2c <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    fe1a:	|  \--|----> pea 16e1a <PutChar+0x1ca8>
    fe20:	|     |      jsr 14822 <KPrintF>
    fe26:	|     |      addq.l #4,sp
			return FALSE;
    fe28:	|     |      clr.w d0
    fe2a:	|     +----- bra.s fe2e <getFuncNumForCallback+0x60>
	}
	return TRUE;
    fe2c:	\-----|----> moveq #1,d0
}
    fe2e:	      \----> rts

0000fe30 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    fe30:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    fe32:	       move.l sp,d0
    fe34:	       move.l d0,-(sp)
    fe36:	       move.l 16(sp),-(sp)
    fe3a:	       move.l 16(sp),-(sp)
    fe3e:	       jsr fdce <getFuncNumForCallback>
    fe44:	       lea 12(sp),sp
    fe48:	       tst.w d0
    fe4a:	/----- beq.s fe5a <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    fe4c:	|      movea.l 194d2 <currentEvents>,a0
    fe52:	|      move.l (sp),d0
    fe54:	|      move.l d0,(a0)
		return BR_CONTINUE;
    fe56:	|      moveq #2,d0
    fe58:	|  /-- bra.s fe5c <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    fe5a:	\--|-> moveq #1,d0
}
    fe5c:	   \-> addq.l #4,sp
    fe5e:	       rts

0000fe60 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    fe60:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    fe62:	       move.l sp,d0
    fe64:	       move.l d0,-(sp)
    fe66:	       move.l 16(sp),-(sp)
    fe6a:	       move.l 16(sp),-(sp)
    fe6e:	       jsr fdce <getFuncNumForCallback>
    fe74:	       lea 12(sp),sp
    fe78:	       tst.w d0
    fe7a:	/----- beq.s fe8c <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    fe7c:	|      movea.l 194d2 <currentEvents>,a0
    fe82:	|      move.l (sp),d0
    fe84:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    fe88:	|      moveq #2,d0
    fe8a:	|  /-- bra.s fe8e <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    fe8c:	\--|-> moveq #1,d0
}
    fe8e:	   \-> addq.l #4,sp
    fe90:	       rts

0000fe92 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    fe92:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    fe94:	       move.l sp,d0
    fe96:	       move.l d0,-(sp)
    fe98:	       move.l 16(sp),-(sp)
    fe9c:	       move.l 16(sp),-(sp)
    fea0:	       jsr fdce <getFuncNumForCallback>
    fea6:	       lea 12(sp),sp
    feaa:	       tst.w d0
    feac:	/----- beq.s febe <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    feae:	|      movea.l 194d2 <currentEvents>,a0
    feb4:	|      move.l (sp),d0
    feb6:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    feba:	|      moveq #2,d0
    febc:	|  /-- bra.s fec0 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    febe:	\--|-> moveq #1,d0
}
    fec0:	   \-> addq.l #4,sp
    fec2:	       rts

0000fec4 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    fec4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    fec6:	       move.l sp,d0
    fec8:	       move.l d0,-(sp)
    feca:	       move.l 16(sp),-(sp)
    fece:	       move.l 16(sp),-(sp)
    fed2:	       jsr fdce <getFuncNumForCallback>
    fed8:	       lea 12(sp),sp
    fedc:	       tst.w d0
    fede:	/----- beq.s fef0 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    fee0:	|      movea.l 194d2 <currentEvents>,a0
    fee6:	|      move.l (sp),d0
    fee8:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    feec:	|      moveq #2,d0
    feee:	|  /-- bra.s fef2 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    fef0:	\--|-> moveq #1,d0
}
    fef2:	   \-> addq.l #4,sp
    fef4:	       rts

0000fef6 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    fef6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    fef8:	       move.l sp,d0
    fefa:	       move.l d0,-(sp)
    fefc:	       move.l 16(sp),-(sp)
    ff00:	       move.l 16(sp),-(sp)
    ff04:	       jsr fdce <getFuncNumForCallback>
    ff0a:	       lea 12(sp),sp
    ff0e:	       tst.w d0
    ff10:	/----- beq.s ff22 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    ff12:	|      movea.l 194d2 <currentEvents>,a0
    ff18:	|      move.l (sp),d0
    ff1a:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    ff1e:	|      moveq #2,d0
    ff20:	|  /-- bra.s ff24 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    ff22:	\--|-> moveq #1,d0
}
    ff24:	   \-> addq.l #4,sp
    ff26:	       rts

0000ff28 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    ff28:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    ff2a:	       move.l sp,d0
    ff2c:	       move.l d0,-(sp)
    ff2e:	       move.l 16(sp),-(sp)
    ff32:	       move.l 16(sp),-(sp)
    ff36:	       jsr fdce <getFuncNumForCallback>
    ff3c:	       lea 12(sp),sp
    ff40:	       tst.w d0
    ff42:	/----- beq.s ff54 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    ff44:	|      movea.l 194d2 <currentEvents>,a0
    ff4a:	|      move.l (sp),d0
    ff4c:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    ff50:	|      moveq #2,d0
    ff52:	|  /-- bra.s ff56 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    ff54:	\--|-> moveq #1,d0
}
    ff56:	   \-> addq.l #4,sp
    ff58:	       rts

0000ff5a <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    ff5a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    ff5c:	       move.l sp,d0
    ff5e:	       move.l d0,-(sp)
    ff60:	       move.l 16(sp),-(sp)
    ff64:	       move.l 16(sp),-(sp)
    ff68:	       jsr fdce <getFuncNumForCallback>
    ff6e:	       lea 12(sp),sp
    ff72:	       tst.w d0
    ff74:	/----- beq.s ff86 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    ff76:	|      movea.l 194d2 <currentEvents>,a0
    ff7c:	|      move.l (sp),d0
    ff7e:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    ff82:	|      moveq #2,d0
    ff84:	|  /-- bra.s ff88 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    ff86:	\--|-> moveq #1,d0
}
    ff88:	   \-> addq.l #4,sp
    ff8a:	       rts

0000ff8c <builtIn_spawnSub>:

builtIn (spawnSub)
{
    ff8c:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    ff8e:	          move.l sp,d0
    ff90:	          move.l d0,-(sp)
    ff92:	          move.l 16(sp),-(sp)
    ff96:	          move.l 16(sp),-(sp)
    ff9a:	          jsr fdce <getFuncNumForCallback>
    ffa0:	          lea 12(sp),sp
    ffa4:	          tst.w d0
    ffa6:	/-------- beq.s ffd2 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    ffa8:	|         move.l 19b20 <noStack>,d1
    ffae:	|         move.l (sp),d0
    ffb0:	|         pea 1 <_start+0x1>
    ffb4:	|         move.l d1,-(sp)
    ffb6:	|         clr.l -(sp)
    ffb8:	|         clr.l -(sp)
    ffba:	|         move.l d0,-(sp)
    ffbc:	|         jsr 4ece <startNewFunctionNum>
    ffc2:	|         lea 20(sp),sp
    ffc6:	|         tst.l d0
    ffc8:	|     /-- bne.s ffce <builtIn_spawnSub+0x42>
    ffca:	|     |   moveq #1,d0
    ffcc:	|  /--|-- bra.s ffd4 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    ffce:	|  |  \-> moveq #2,d0
    ffd0:	|  +----- bra.s ffd4 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    ffd2:	\--|----> moveq #1,d0
}
    ffd4:	   \----> addq.l #4,sp
    ffd6:	          rts

0000ffd8 <builtIn_cancelSub>:

builtIn (cancelSub)
{
    ffd8:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    ffda:	          move.l sp,d0
    ffdc:	          addq.l #4,d0
    ffde:	          move.l d0,-(sp)
    ffe0:	          move.l 20(sp),-(sp)
    ffe4:	          move.l 20(sp),-(sp)
    ffe8:	          jsr fdce <getFuncNumForCallback>
    ffee:	          lea 12(sp),sp
    fff2:	          tst.w d0
    fff4:	/-------- beq.s 1002a <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    fff6:	|         move.l 4(sp),d1
    fffa:	|         move.l sp,d0
    fffc:	|         addq.l #2,d0
    fffe:	|         move.l d0,-(sp)
   10000:	|         move.l 20(sp),-(sp)
   10004:	|         move.l d1,-(sp)
   10006:	|         jsr 2e76 <cancelAFunction>
   1000c:	|         lea 12(sp),sp
		if (killedMyself) {
   10010:	|         move.w 2(sp),d0
   10014:	|  /----- beq.s 10026 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   10016:	|  |      move.l 16(sp),-(sp)
   1001a:	|  |      jsr 2d94 <abortFunction>
   10020:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   10022:	|  |      moveq #5,d0
   10024:	|  |  /-- bra.s 1002c <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   10026:	|  \--|-> moveq #2,d0
   10028:	|     +-- bra.s 1002c <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   1002a:	\-----|-> moveq #1,d0
}
   1002c:	      \-> addq.l #8,sp
   1002e:	          rts

00010030 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   10030:	       subq.l #8,sp
   10032:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   10034:	       movea.l 20(sp),a0
   10038:	       move.l 24(a0),d0
   1003c:	       move.l d0,-(sp)
   1003e:	       jsr 12db0 <getTextFromAnyVar>
   10044:	       addq.l #4,sp
   10046:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   1004a:	   /-- bne.s 10050 <builtIn_stringWidth+0x20>
   1004c:	   |   moveq #1,d0
   1004e:	/--|-- bra.s 1009e <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   10050:	|  \-> moveq #24,d0
   10052:	|      add.l 20(sp),d0
   10056:	|      move.l d0,-(sp)
   10058:	|      jsr 1315e <trimStack>
   1005e:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   10060:	|      move.l 8(sp),-(sp)
   10064:	|      jsr 131b8 <stringWidth>
   1006a:	|      addq.l #4,sp
   1006c:	|      move.l d0,d1
   1006e:	|      moveq #28,d0
   10070:	|      add.l 20(sp),d0
   10074:	|      move.l d1,-(sp)
   10076:	|      pea 1 <_start+0x1>
   1007a:	|      move.l d0,-(sp)
   1007c:	|      jsr 130cc <setVariable>
   10082:	|      lea 12(sp),sp
	FreeVec(theText);
   10086:	|      move.l 8(sp),4(sp)
   1008c:	|      move.l 19b50 <SysBase>,d0
   10092:	|      movea.l d0,a6
   10094:	|      movea.l 4(sp),a1
   10098:	|      jsr -690(a6)
	return BR_CONTINUE;
   1009c:	|      moveq #2,d0
}
   1009e:	\----> movea.l (sp)+,a6
   100a0:	       addq.l #8,sp
   100a2:	       rts

000100a4 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   100a4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   100a6:	       movea.l 12(sp),a0
   100aa:	       move.l 24(a0),d0
   100ae:	       move.l d0,-(sp)
   100b0:	       pea 1 <_start+0x1>
   100b4:	       move.l sp,d0
   100b6:	       addq.l #8,d0
   100b8:	       move.l d0,-(sp)
   100ba:	       jsr 127da <getValueType>
   100c0:	       lea 12(sp),sp
   100c4:	       tst.w d0
   100c6:	   /-- bne.s 100cc <builtIn_hardScroll+0x28>
   100c8:	   |   moveq #1,d0
   100ca:	/--|-- bra.s 100ea <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   100cc:	|  \-> moveq #24,d0
   100ce:	|      add.l 12(sp),d0
   100d2:	|      move.l d0,-(sp)
   100d4:	|      jsr 1315e <trimStack>
   100da:	|      addq.l #4,sp
	hardScroll (v);
   100dc:	|      move.l (sp),d0
   100de:	|      move.l d0,-(sp)
   100e0:	|      jsr b36e <hardScroll>
   100e6:	|      addq.l #4,sp
	return BR_CONTINUE;
   100e8:	|      moveq #2,d0
}
   100ea:	\----> addq.l #4,sp
   100ec:	       rts

000100ee <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   100ee:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   100f0:	       movea.l 12(sp),a0
   100f4:	       move.l 24(a0),d0
   100f8:	       move.l d0,-(sp)
   100fa:	       pea 7 <_start+0x7>
   100fe:	       move.l sp,d0
   10100:	       addq.l #8,d0
   10102:	       move.l d0,-(sp)
   10104:	       jsr 127da <getValueType>
   1010a:	       lea 12(sp),sp
   1010e:	       tst.w d0
   10110:	   /-- bne.s 10116 <builtIn_isScreenRegion+0x28>
   10112:	   |   moveq #1,d0
   10114:	/--|-- bra.s 10156 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   10116:	|  \-> moveq #24,d0
   10118:	|      add.l 12(sp),d0
   1011c:	|      move.l d0,-(sp)
   1011e:	|      jsr 1315e <trimStack>
   10124:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   10126:	|      move.l (sp),d0
   10128:	|      move.l d0,-(sp)
   1012a:	|      jsr 132a4 <getRegionForObject>
   10130:	|      addq.l #4,sp
   10132:	|      tst.l d0
   10134:	|      sne d0
   10136:	|      neg.b d0
   10138:	|      moveq #0,d1
   1013a:	|      move.b d0,d1
   1013c:	|      moveq #28,d0
   1013e:	|      add.l 12(sp),d0
   10142:	|      move.l d1,-(sp)
   10144:	|      pea 1 <_start+0x1>
   10148:	|      move.l d0,-(sp)
   1014a:	|      jsr 130cc <setVariable>
   10150:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10154:	|      moveq #2,d0
}
   10156:	\----> addq.l #4,sp
   10158:	       rts

0001015a <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   1015a:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1015c:	       movea.l 12(sp),a0
   10160:	       move.l 24(a0),d0
   10164:	       move.l d0,-(sp)
   10166:	       pea 1 <_start+0x1>
   1016a:	       move.l sp,d0
   1016c:	       addq.l #8,d0
   1016e:	       move.l d0,-(sp)
   10170:	       jsr 127da <getValueType>
   10176:	       lea 12(sp),sp
   1017a:	       tst.w d0
   1017c:	   /-- bne.s 10182 <builtIn_setSpeechSpeed+0x28>
   1017e:	   |   moveq #1,d0
   10180:	/--|-- bra.s 101d0 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   10182:	|  \-> moveq #24,d0
   10184:	|      add.l 12(sp),d0
   10188:	|      move.l d0,-(sp)
   1018a:	|      jsr 1315e <trimStack>
   10190:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   10192:	|      move.l (sp),d0
   10194:	|      move.l d0,-(sp)
   10196:	|      jsr 14ada <__floatsisf>
   1019c:	|      addq.l #4,sp
   1019e:	|      move.l #1008981770,-(sp)
   101a4:	|      move.l d0,-(sp)
   101a6:	|      jsr 14b8c <__mulsf3>
   101ac:	|      addq.l #8,sp
   101ae:	|      move.l d0,194e4 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   101b4:	|      moveq #28,d0
   101b6:	|      add.l 12(sp),d0
   101ba:	|      pea 1 <_start+0x1>
   101be:	|      pea 1 <_start+0x1>
   101c2:	|      move.l d0,-(sp)
   101c4:	|      jsr 130cc <setVariable>
   101ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
   101ce:	|      moveq #2,d0
}
   101d0:	\----> addq.l #4,sp
   101d2:	       rts

000101d4 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   101d4:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   101d6:	       movea.l 12(sp),a0
   101da:	       move.l 24(a0),d0
   101de:	       move.l d0,-(sp)
   101e0:	       pea 1 <_start+0x1>
   101e4:	       move.l sp,d0
   101e6:	       addq.l #8,d0
   101e8:	       move.l d0,-(sp)
   101ea:	       jsr 127da <getValueType>
   101f0:	       lea 12(sp),sp
   101f4:	       tst.w d0
   101f6:	   /-- bne.s 101fc <builtIn_setFontSpacing+0x28>
   101f8:	   |   moveq #1,d0
   101fa:	/--|-- bra.s 10232 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   101fc:	|  \-> move.l (sp),d0
   101fe:	|      move.l d0,d0
   10200:	|      move.w d0,19a5e <fontSpace>
	trimStack (&fun -> stack);
   10206:	|      moveq #24,d0
   10208:	|      add.l 12(sp),d0
   1020c:	|      move.l d0,-(sp)
   1020e:	|      jsr 1315e <trimStack>
   10214:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   10216:	|      moveq #28,d0
   10218:	|      add.l 12(sp),d0
   1021c:	|      pea 1 <_start+0x1>
   10220:	|      pea 1 <_start+0x1>
   10224:	|      move.l d0,-(sp)
   10226:	|      jsr 130cc <setVariable>
   1022c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10230:	|      moveq #2,d0
}
   10232:	\----> addq.l #4,sp
   10234:	       rts

00010236 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   10236:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10238:	          movea.l 12(sp),a0
   1023c:	          move.l 24(a0),d0
   10240:	          move.l d0,-(sp)
   10242:	          pea 1 <_start+0x1>
   10246:	          move.l sp,d0
   10248:	          addq.l #8,d0
   1024a:	          move.l d0,-(sp)
   1024c:	          jsr 127da <getValueType>
   10252:	          lea 12(sp),sp
   10256:	          tst.w d0
   10258:	      /-- bne.s 1025e <builtIn_transitionLevel+0x28>
   1025a:	      |   moveq #1,d0
   1025c:	/-----|-- bra.s 102b2 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1025e:	|     \-> moveq #24,d0
   10260:	|         add.l 12(sp),d0
   10264:	|         move.l d0,-(sp)
   10266:	|         jsr 1315e <trimStack>
   1026c:	|         addq.l #4,sp

	if (number < 0)
   1026e:	|         move.l (sp),d0
   10270:	|     /-- bpl.s 1027a <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   10272:	|     |   clr.b 194d0 <brightnessLevel>
   10278:	|  /--|-- bra.s 10296 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   1027a:	|  |  \-> move.l (sp),d0
   1027c:	|  |      cmpi.l #255,d0
   10282:	|  |  /-- ble.s 1028c <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   10284:	|  |  |   st 194d0 <brightnessLevel>
   1028a:	|  +--|-- bra.s 10296 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   1028c:	|  |  \-> move.l (sp),d0
   1028e:	|  |      move.l d0,d0
   10290:	|  |      move.b d0,194d0 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   10296:	|  \----> moveq #28,d0
   10298:	|         add.l 12(sp),d0
   1029c:	|         pea 1 <_start+0x1>
   102a0:	|         pea 1 <_start+0x1>
   102a4:	|         move.l d0,-(sp)
   102a6:	|         jsr 130cc <setVariable>
   102ac:	|         lea 12(sp),sp
	return BR_CONTINUE;
   102b0:	|         moveq #2,d0
}
   102b2:	\-------> addq.l #4,sp
   102b4:	          rts

000102b6 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   102b6:	movea.l 8(sp),a0
   102ba:	move.l 24(a0),d0
   102be:	move.l d0,-(sp)
   102c0:	jsr 12d1a <getBoolean>
   102c6:	addq.l #4,sp
   102c8:	move.w d0,19af0 <captureAllKeys>
	trimStack (&fun -> stack);
   102ce:	moveq #24,d0
   102d0:	add.l 8(sp),d0
   102d4:	move.l d0,-(sp)
   102d6:	jsr 1315e <trimStack>
   102dc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   102de:	move.w 19af0 <captureAllKeys>,d0
   102e4:	movea.w d0,a0
   102e6:	moveq #28,d0
   102e8:	add.l 8(sp),d0
   102ec:	move.l a0,-(sp)
   102ee:	pea 1 <_start+0x1>
   102f2:	move.l d0,-(sp)
   102f4:	jsr 130cc <setVariable>
   102fa:	lea 12(sp),sp
	return BR_CONTINUE;
   102fe:	moveq #2,d0
}
   10300:	rts

00010302 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   10302:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10306:	       movea.l 20(sp),a0
   1030a:	       move.l 24(a0),d0
   1030e:	       move.l d0,-(sp)
   10310:	       pea 1 <_start+0x1>
   10314:	       moveq #12,d0
   10316:	       add.l sp,d0
   10318:	       move.l d0,-(sp)
   1031a:	       jsr 127da <getValueType>
   10320:	       lea 12(sp),sp
   10324:	       tst.w d0
   10326:	   /-- bne.s 1032e <builtIn_spinCharacter+0x2c>
   10328:	   |   moveq #1,d0
   1032a:	/--|-- bra.w 103de <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1032e:	|  \-> moveq #24,d0
   10330:	|      add.l 20(sp),d0
   10334:	|      move.l d0,-(sp)
   10336:	|      jsr 1315e <trimStack>
   1033c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1033e:	|      movea.l 20(sp),a0
   10342:	|      move.l 24(a0),d0
   10346:	|      move.l d0,-(sp)
   10348:	|      pea 7 <_start+0x7>
   1034c:	|      lea 8(sp),a0
   10350:	|      move.l a0,-(sp)
   10352:	|      jsr 127da <getValueType>
   10358:	|      lea 12(sp),sp
   1035c:	|      tst.w d0
   1035e:	|  /-- bne.s 10364 <builtIn_spinCharacter+0x62>
   10360:	|  |   moveq #1,d0
   10362:	+--|-- bra.s 103de <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   10364:	|  \-> moveq #24,d0
   10366:	|      add.l 20(sp),d0
   1036a:	|      move.l d0,-(sp)
   1036c:	|      jsr 1315e <trimStack>
   10372:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   10374:	|      move.l (sp),d0
   10376:	|      move.l d0,-(sp)
   10378:	|      jsr 887a <findPerson>
   1037e:	|      addq.l #4,sp
   10380:	|      move.l d0,8(sp)
	if (thisPerson) {
   10384:	|  /-- beq.s 103c4 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   10386:	|  |   move.l 4(sp),d0
   1038a:	|  |   movea.l 8(sp),a0
   1038e:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
   10392:	|  |   movea.l 8(sp),a0
   10396:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
   1039c:	|  |   movea.l 8(sp),a0
   103a0:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   103a6:	|  |   moveq #28,d0
   103a8:	|  |   add.l 20(sp),d0
   103ac:	|  |   pea 1 <_start+0x1>
   103b0:	|  |   pea 1 <_start+0x1>
   103b4:	|  |   move.l d0,-(sp)
   103b6:	|  |   jsr 130cc <setVariable>
   103bc:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   103c0:	|  |   moveq #3,d0
   103c2:	+--|-- bra.s 103de <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   103c4:	|  \-> moveq #28,d0
   103c6:	|      add.l 20(sp),d0
   103ca:	|      clr.l -(sp)
   103cc:	|      pea 1 <_start+0x1>
   103d0:	|      move.l d0,-(sp)
   103d2:	|      jsr 130cc <setVariable>
   103d8:	|      lea 12(sp),sp
		return BR_CONTINUE;
   103dc:	|      moveq #2,d0
	}
}
   103de:	\----> lea 12(sp),sp
   103e2:	       rts

000103e4 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   103e4:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   103e6:	          movea.l 16(sp),a0
   103ea:	          move.l 24(a0),d0
   103ee:	          move.l d0,-(sp)
   103f0:	          pea 7 <_start+0x7>
   103f4:	          move.l sp,d0
   103f6:	          addq.l #8,d0
   103f8:	          move.l d0,-(sp)
   103fa:	          jsr 127da <getValueType>
   10400:	          lea 12(sp),sp
   10404:	          tst.w d0
   10406:	      /-- bne.s 1040c <builtIn_getCharacterDirection+0x28>
   10408:	      |   moveq #1,d0
   1040a:	/-----|-- bra.s 1046a <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   1040c:	|     \-> moveq #24,d0
   1040e:	|         add.l 16(sp),d0
   10412:	|         move.l d0,-(sp)
   10414:	|         jsr 1315e <trimStack>
   1041a:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1041c:	|         move.l (sp),d0
   1041e:	|         move.l d0,-(sp)
   10420:	|         jsr 887a <findPerson>
   10426:	|         addq.l #4,sp
   10428:	|         move.l d0,4(sp)
	if (thisPerson) {
   1042c:	|  /----- beq.s 10450 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1042e:	|  |      movea.l 4(sp),a0
   10432:	|  |      move.l 94(a0),d1
   10436:	|  |      moveq #28,d0
   10438:	|  |      add.l 16(sp),d0
   1043c:	|  |      move.l d1,-(sp)
   1043e:	|  |      pea 1 <_start+0x1>
   10442:	|  |      move.l d0,-(sp)
   10444:	|  |      jsr 130cc <setVariable>
   1044a:	|  |      lea 12(sp),sp
   1044e:	|  |  /-- bra.s 10468 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10450:	|  \--|-> moveq #28,d0
   10452:	|     |   add.l 16(sp),d0
   10456:	|     |   clr.l -(sp)
   10458:	|     |   pea 1 <_start+0x1>
   1045c:	|     |   move.l d0,-(sp)
   1045e:	|     |   jsr 130cc <setVariable>
   10464:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10468:	|     \-> moveq #2,d0
}
   1046a:	\-------> addq.l #8,sp
   1046c:	          rts

0001046e <builtIn_isCharacter>:

builtIn(isCharacter)
{
   1046e:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10470:	       movea.l 16(sp),a0
   10474:	       move.l 24(a0),d0
   10478:	       move.l d0,-(sp)
   1047a:	       pea 7 <_start+0x7>
   1047e:	       move.l sp,d0
   10480:	       addq.l #8,d0
   10482:	       move.l d0,-(sp)
   10484:	       jsr 127da <getValueType>
   1048a:	       lea 12(sp),sp
   1048e:	       tst.w d0
   10490:	   /-- bne.s 10496 <builtIn_isCharacter+0x28>
   10492:	   |   moveq #1,d0
   10494:	/--|-- bra.s 104d8 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   10496:	|  \-> moveq #24,d0
   10498:	|      add.l 16(sp),d0
   1049c:	|      move.l d0,-(sp)
   1049e:	|      jsr 1315e <trimStack>
   104a4:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   104a6:	|      move.l (sp),d0
   104a8:	|      move.l d0,-(sp)
   104aa:	|      jsr 887a <findPerson>
   104b0:	|      addq.l #4,sp
   104b2:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   104b6:	|      sne d0
   104b8:	|      neg.b d0
   104ba:	|      moveq #0,d1
   104bc:	|      move.b d0,d1
   104be:	|      moveq #28,d0
   104c0:	|      add.l 16(sp),d0
   104c4:	|      move.l d1,-(sp)
   104c6:	|      pea 1 <_start+0x1>
   104ca:	|      move.l d0,-(sp)
   104cc:	|      jsr 130cc <setVariable>
   104d2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   104d6:	|      moveq #2,d0
}
   104d8:	\----> addq.l #8,sp
   104da:	       rts

000104dc <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   104dc:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   104de:	          movea.l 16(sp),a0
   104e2:	          move.l 24(a0),d0
   104e6:	          move.l d0,-(sp)
   104e8:	          pea 7 <_start+0x7>
   104ec:	          move.l sp,d0
   104ee:	          addq.l #8,d0
   104f0:	          move.l d0,-(sp)
   104f2:	          jsr 127da <getValueType>
   104f8:	          lea 12(sp),sp
   104fc:	          tst.w d0
   104fe:	      /-- bne.s 10504 <builtIn_normalCharacter+0x28>
   10500:	      |   moveq #1,d0
   10502:	/-----|-- bra.s 10580 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   10504:	|     \-> moveq #24,d0
   10506:	|         add.l 16(sp),d0
   1050a:	|         move.l d0,-(sp)
   1050c:	|         jsr 1315e <trimStack>
   10512:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   10514:	|         move.l (sp),d0
   10516:	|         move.l d0,-(sp)
   10518:	|         jsr 887a <findPerson>
   1051e:	|         addq.l #4,sp
   10520:	|         move.l d0,4(sp)
	if (thisPerson)
   10524:	|  /----- beq.s 10566 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   10526:	|  |      movea.l 4(sp),a0
   1052a:	|  |      movea.l 68(a0),a0
   1052e:	|  |      move.l (a0),d1
   10530:	|  |      movea.l 4(sp),a0
   10534:	|  |      move.l 94(a0),d0
   10538:	|  |      add.l d0,d0
   1053a:	|  |      add.l d0,d0
   1053c:	|  |      movea.l d1,a0
   1053e:	|  |      adda.l d0,a0
   10540:	|  |      move.l (a0),d0
   10542:	|  |      movea.l 4(sp),a0
   10546:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1054a:	|  |      moveq #28,d0
   1054c:	|  |      add.l 16(sp),d0
   10550:	|  |      pea 1 <_start+0x1>
   10554:	|  |      pea 1 <_start+0x1>
   10558:	|  |      move.l d0,-(sp)
   1055a:	|  |      jsr 130cc <setVariable>
   10560:	|  |      lea 12(sp),sp
   10564:	|  |  /-- bra.s 1057e <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10566:	|  \--|-> moveq #28,d0
   10568:	|     |   add.l 16(sp),d0
   1056c:	|     |   clr.l -(sp)
   1056e:	|     |   pea 1 <_start+0x1>
   10572:	|     |   move.l d0,-(sp)
   10574:	|     |   jsr 130cc <setVariable>
   1057a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1057e:	|     \-> moveq #2,d0
}
   10580:	\-------> addq.l #8,sp
   10582:	          rts

00010584 <builtIn_isMoving>:

builtIn(isMoving)
{
   10584:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10586:	          movea.l 16(sp),a0
   1058a:	          move.l 24(a0),d0
   1058e:	          move.l d0,-(sp)
   10590:	          pea 7 <_start+0x7>
   10594:	          move.l sp,d0
   10596:	          addq.l #8,d0
   10598:	          move.l d0,-(sp)
   1059a:	          jsr 127da <getValueType>
   105a0:	          lea 12(sp),sp
   105a4:	          tst.w d0
   105a6:	      /-- bne.s 105ac <builtIn_isMoving+0x28>
   105a8:	      |   moveq #1,d0
   105aa:	/-----|-- bra.s 1060c <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   105ac:	|     \-> moveq #24,d0
   105ae:	|         add.l 16(sp),d0
   105b2:	|         move.l d0,-(sp)
   105b4:	|         jsr 1315e <trimStack>
   105ba:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   105bc:	|         move.l (sp),d0
   105be:	|         move.l d0,-(sp)
   105c0:	|         jsr 887a <findPerson>
   105c6:	|         addq.l #4,sp
   105c8:	|         move.l d0,4(sp)
	if (thisPerson)
   105cc:	|  /----- beq.s 105f2 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   105ce:	|  |      movea.l 4(sp),a0
   105d2:	|  |      move.w 52(a0),d0
   105d6:	|  |      movea.w d0,a0
   105d8:	|  |      moveq #28,d0
   105da:	|  |      add.l 16(sp),d0
   105de:	|  |      move.l a0,-(sp)
   105e0:	|  |      pea 1 <_start+0x1>
   105e4:	|  |      move.l d0,-(sp)
   105e6:	|  |      jsr 130cc <setVariable>
   105ec:	|  |      lea 12(sp),sp
   105f0:	|  |  /-- bra.s 1060a <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   105f2:	|  \--|-> moveq #28,d0
   105f4:	|     |   add.l 16(sp),d0
   105f8:	|     |   clr.l -(sp)
   105fa:	|     |   pea 1 <_start+0x1>
   105fe:	|     |   move.l d0,-(sp)
   10600:	|     |   jsr 130cc <setVariable>
   10606:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1060a:	|     \-> moveq #2,d0
}
   1060c:	\-------> addq.l #8,sp
   1060e:	          rts

00010610 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   10610:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10614:	          movea.l 20(sp),a0
   10618:	          move.l 24(a0),d0
   1061c:	          move.l d0,-(sp)
   1061e:	          pea 7 <_start+0x7>
   10622:	          lea 8(sp),a0
   10626:	          move.l a0,-(sp)
   10628:	          jsr 127da <getValueType>
   1062e:	          lea 12(sp),sp
   10632:	          tst.w d0
   10634:	      /-- bne.s 1063c <builtIn_fetchEvent+0x2c>
   10636:	      |   moveq #1,d0
   10638:	/-----|-- bra.w 106d0 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1063c:	|     \-> moveq #24,d0
   1063e:	|         add.l 20(sp),d0
   10642:	|         move.l d0,-(sp)
   10644:	|         jsr 1315e <trimStack>
   1064a:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1064c:	|         movea.l 20(sp),a0
   10650:	|         move.l 24(a0),d0
   10654:	|         move.l d0,-(sp)
   10656:	|         pea 7 <_start+0x7>
   1065a:	|         moveq #12,d0
   1065c:	|         add.l sp,d0
   1065e:	|         move.l d0,-(sp)
   10660:	|         jsr 127da <getValueType>
   10666:	|         lea 12(sp),sp
   1066a:	|         tst.w d0
   1066c:	|     /-- bne.s 10672 <builtIn_fetchEvent+0x62>
   1066e:	|     |   moveq #1,d0
   10670:	+-----|-- bra.s 106d0 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   10672:	|     \-> moveq #24,d0
   10674:	|         add.l 20(sp),d0
   10678:	|         move.l d0,-(sp)
   1067a:	|         jsr 1315e <trimStack>
   10680:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10682:	|         move.l (sp),d1
   10684:	|         move.l 4(sp),d0
   10688:	|         move.l d1,-(sp)
   1068a:	|         move.l d0,-(sp)
   1068c:	|         jsr b644 <getCombinationFunction>
   10692:	|         addq.l #8,sp
   10694:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   10698:	|  /----- beq.s 106b6 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1069a:	|  |      moveq #28,d0
   1069c:	|  |      add.l 20(sp),d0
   106a0:	|  |      move.l 8(sp),-(sp)
   106a4:	|  |      pea 2 <_start+0x2>
   106a8:	|  |      move.l d0,-(sp)
   106aa:	|  |      jsr 130cc <setVariable>
   106b0:	|  |      lea 12(sp),sp
   106b4:	|  |  /-- bra.s 106ce <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   106b6:	|  \--|-> moveq #28,d0
   106b8:	|     |   add.l 20(sp),d0
   106bc:	|     |   clr.l -(sp)
   106be:	|     |   pea 1 <_start+0x1>
   106c2:	|     |   move.l d0,-(sp)
   106c4:	|     |   jsr 130cc <setVariable>
   106ca:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   106ce:	|     \-> moveq #2,d0
}
   106d0:	\-------> lea 12(sp),sp
   106d4:	          rts

000106d6 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   106d6:	       lea -24(sp),sp
   106da:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   106dc:	       movea.l 36(sp),a0
   106e0:	       move.l 24(a0),d0
   106e4:	       move.l d0,-(sp)
   106e6:	       jsr 12db0 <getTextFromAnyVar>
   106ec:	       addq.l #4,sp
   106ee:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   106f2:	       moveq #24,d0
   106f4:	       add.l 36(sp),d0
   106f8:	       move.l d0,-(sp)
   106fa:	       jsr 1315e <trimStack>
   10700:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   10702:	       move.l 24(sp),-(sp)
   10706:	       jsr 2fe <encodeFilename>
   1070c:	       addq.l #4,sp
   1070e:	       move.l d0,20(sp)
    FreeVec(namNormal);
   10712:	       move.l 24(sp),16(sp)
   10718:	       move.l 19b50 <SysBase>,d0
   1071e:	       movea.l d0,a6
   10720:	       movea.l 16(sp),a1
   10724:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   10728:	       move.l 20(sp),-(sp)
   1072c:	       jsr c3fc <failSecurityCheck>
   10732:	       addq.l #4,sp
   10734:	       tst.w d0
   10736:	   /-- beq.s 1073c <builtIn_deleteFile+0x66>
   10738:	   |   moveq #1,d0
   1073a:	/--|-- bra.s 1078a <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   1073c:	|  \-> move.l 20(sp),12(sp)
   10742:	|      move.l 19b58 <DOSBase>,d0
   10748:	|      movea.l d0,a6
   1074a:	|      move.l 12(sp),d1
   1074e:	|      jsr -72(a6)
   10752:	|      move.l d0,8(sp)
   10756:	|      move.l 8(sp),d1
   1075a:	|      moveq #28,d0
   1075c:	|      add.l 36(sp),d0
   10760:	|      move.l d1,-(sp)
   10762:	|      pea 1 <_start+0x1>
   10766:	|      move.l d0,-(sp)
   10768:	|      jsr 130cc <setVariable>
   1076e:	|      lea 12(sp),sp
    FreeVec(nam);
   10772:	|      move.l 20(sp),4(sp)
   10778:	|      move.l 19b50 <SysBase>,d0
   1077e:	|      movea.l d0,a6
   10780:	|      movea.l 4(sp),a1
   10784:	|      jsr -690(a6)

    return BR_CONTINUE;
   10788:	|      moveq #2,d0
}
   1078a:	\----> movea.l (sp)+,a6
   1078c:	       lea 24(sp),sp
   10790:	       rts

00010792 <builtIn_renameFile>:

builtIn(renameFile)
{
   10792:	       lea -40(sp),sp
   10796:	       move.l a6,-(sp)
   10798:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1079a:	       movea.l 56(sp),a0
   1079e:	       move.l 24(a0),d0
   107a2:	       move.l d0,-(sp)
   107a4:	       jsr 12db0 <getTextFromAnyVar>
   107aa:	       addq.l #4,sp
   107ac:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   107b0:	       move.l 44(sp),-(sp)
   107b4:	       jsr 2fe <encodeFilename>
   107ba:	       addq.l #4,sp
   107bc:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   107c0:	       moveq #24,d0
   107c2:	       add.l 56(sp),d0
   107c6:	       move.l d0,-(sp)
   107c8:	       jsr 1315e <trimStack>
   107ce:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   107d0:	       move.l 40(sp),-(sp)
   107d4:	       jsr c3fc <failSecurityCheck>
   107da:	       addq.l #4,sp
   107dc:	       tst.w d0
   107de:	   /-- beq.s 107e6 <builtIn_renameFile+0x54>
   107e0:	   |   moveq #1,d0
   107e2:	/--|-- bra.w 108cc <builtIn_renameFile+0x13a>
	FreeVec(temp);
   107e6:	|  \-> move.l 44(sp),36(sp)
   107ec:	|      move.l 19b50 <SysBase>,d0
   107f2:	|      movea.l d0,a6
   107f4:	|      movea.l 36(sp),a1
   107f8:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   107fc:	|      movea.l 56(sp),a0
   10800:	|      move.l 24(a0),d0
   10804:	|      move.l d0,-(sp)
   10806:	|      jsr 12db0 <getTextFromAnyVar>
   1080c:	|      addq.l #4,sp
   1080e:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   10812:	|      move.l 44(sp),-(sp)
   10816:	|      jsr 2fe <encodeFilename>
   1081c:	|      addq.l #4,sp
   1081e:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   10822:	|      moveq #24,d0
   10824:	|      add.l 56(sp),d0
   10828:	|      move.l d0,-(sp)
   1082a:	|      jsr 1315e <trimStack>
   10830:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   10832:	|      move.l 32(sp),-(sp)
   10836:	|      jsr c3fc <failSecurityCheck>
   1083c:	|      addq.l #4,sp
   1083e:	|      tst.w d0
   10840:	|  /-- beq.s 10848 <builtIn_renameFile+0xb6>
   10842:	|  |   moveq #1,d0
   10844:	+--|-- bra.w 108cc <builtIn_renameFile+0x13a>
	FreeVec(temp);
   10848:	|  \-> move.l 44(sp),28(sp)
   1084e:	|      move.l 19b50 <SysBase>,d0
   10854:	|      movea.l d0,a6
   10856:	|      movea.l 28(sp),a1
   1085a:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   1085e:	|      move.l 32(sp),24(sp)
   10864:	|      move.l 40(sp),20(sp)
   1086a:	|      move.l 19b58 <DOSBase>,d0
   10870:	|      movea.l d0,a6
   10872:	|      move.l 24(sp),d1
   10876:	|      move.l 20(sp),d2
   1087a:	|      jsr -78(a6)
   1087e:	|      move.l d0,16(sp)
   10882:	|      move.l 16(sp),d1
   10886:	|      moveq #28,d0
   10888:	|      add.l 56(sp),d0
   1088c:	|      move.l d1,-(sp)
   1088e:	|      pea 1 <_start+0x1>
   10892:	|      move.l d0,-(sp)
   10894:	|      jsr 130cc <setVariable>
   1089a:	|      lea 12(sp),sp
	FreeVec(nam);
   1089e:	|      move.l 32(sp),12(sp)
   108a4:	|      move.l 19b50 <SysBase>,d0
   108aa:	|      movea.l d0,a6
   108ac:	|      movea.l 12(sp),a1
   108b0:	|      jsr -690(a6)
	FreeVec(newnam);
   108b4:	|      move.l 40(sp),8(sp)
   108ba:	|      move.l 19b50 <SysBase>,d0
   108c0:	|      movea.l d0,a6
   108c2:	|      movea.l 8(sp),a1
   108c6:	|      jsr -690(a6)

	return BR_CONTINUE;
   108ca:	|      moveq #2,d0
}
   108cc:	\----> move.l (sp)+,d2
   108ce:	       movea.l (sp)+,a6
   108d0:	       lea 40(sp),sp
   108d4:	       rts

000108d6 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   108d6:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   108d8:	       movea.l 12(sp),a0
   108dc:	       move.l 24(a0),d0
   108e0:	       move.l d0,-(sp)
   108e2:	       pea 5 <_start+0x5>
   108e6:	       move.l sp,d0
   108e8:	       addq.l #8,d0
   108ea:	       move.l d0,-(sp)
   108ec:	       jsr 127da <getValueType>
   108f2:	       lea 12(sp),sp
   108f6:	       tst.w d0
   108f8:	   /-- bne.s 108fe <builtIn_cacheSound+0x28>
   108fa:	   |   moveq #1,d0
   108fc:	/--|-- bra.s 10926 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   108fe:	|  \-> moveq #24,d0
   10900:	|      add.l 12(sp),d0
   10904:	|      move.l d0,-(sp)
   10906:	|      jsr 1315e <trimStack>
   1090c:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   1090e:	|      move.l (sp),d0
   10910:	|      move.l d0,-(sp)
   10912:	|      jsr b250 <cacheSound>
   10918:	|      addq.l #4,sp
   1091a:	|      moveq #-1,d1
   1091c:	|      cmp.l d0,d1
   1091e:	|  /-- bne.s 10924 <builtIn_cacheSound+0x4e>
   10920:	|  |   moveq #1,d0
   10922:	+--|-- bra.s 10926 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   10924:	|  \-> moveq #2,d0
}
   10926:	\----> addq.l #4,sp
   10928:	       rts

0001092a <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   1092a:	pea 16e2f <PutChar+0x1cbd>
   10930:	jsr 14822 <KPrintF>
   10936:	addq.l #4,sp
	return BR_CONTINUE;
   10938:	moveq #2,d0
}
   1093a:	rts

0001093c <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   1093c:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10940:	          movea.l 20(sp),a0
   10944:	          move.l 24(a0),d0
   10948:	          move.l d0,-(sp)
   1094a:	          pea 1 <_start+0x1>
   1094e:	          moveq #12,d0
   10950:	          add.l sp,d0
   10952:	          move.l d0,-(sp)
   10954:	          jsr 127da <getValueType>
   1095a:	          lea 12(sp),sp
   1095e:	          tst.w d0
   10960:	      /-- bne.s 10968 <builtIn_setCharacterSpinSpeed+0x2c>
   10962:	      |   moveq #1,d0
   10964:	/-----|-- bra.w 10a02 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   10968:	|     \-> moveq #24,d0
   1096a:	|         add.l 20(sp),d0
   1096e:	|         move.l d0,-(sp)
   10970:	|         jsr 1315e <trimStack>
   10976:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10978:	|         movea.l 20(sp),a0
   1097c:	|         move.l 24(a0),d0
   10980:	|         move.l d0,-(sp)
   10982:	|         pea 7 <_start+0x7>
   10986:	|         lea 8(sp),a0
   1098a:	|         move.l a0,-(sp)
   1098c:	|         jsr 127da <getValueType>
   10992:	|         lea 12(sp),sp
   10996:	|         tst.w d0
   10998:	|     /-- bne.s 1099e <builtIn_setCharacterSpinSpeed+0x62>
   1099a:	|     |   moveq #1,d0
   1099c:	+-----|-- bra.s 10a02 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1099e:	|     \-> moveq #24,d0
   109a0:	|         add.l 20(sp),d0
   109a4:	|         move.l d0,-(sp)
   109a6:	|         jsr 1315e <trimStack>
   109ac:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   109ae:	|         move.l (sp),d0
   109b0:	|         move.l d0,-(sp)
   109b2:	|         jsr 887a <findPerson>
   109b8:	|         addq.l #4,sp
   109ba:	|         move.l d0,8(sp)

	if (thisPerson) {
   109be:	|  /----- beq.s 109e8 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   109c0:	|  |      move.l 4(sp),d0
   109c4:	|  |      movea.l 8(sp),a0
   109c8:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   109cc:	|  |      moveq #28,d0
   109ce:	|  |      add.l 20(sp),d0
   109d2:	|  |      pea 1 <_start+0x1>
   109d6:	|  |      pea 1 <_start+0x1>
   109da:	|  |      move.l d0,-(sp)
   109dc:	|  |      jsr 130cc <setVariable>
   109e2:	|  |      lea 12(sp),sp
   109e6:	|  |  /-- bra.s 10a00 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   109e8:	|  \--|-> moveq #28,d0
   109ea:	|     |   add.l 20(sp),d0
   109ee:	|     |   clr.l -(sp)
   109f0:	|     |   pea 1 <_start+0x1>
   109f4:	|     |   move.l d0,-(sp)
   109f6:	|     |   jsr 130cc <setVariable>
   109fc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10a00:	|     \-> moveq #2,d0
}
   10a02:	\-------> lea 12(sp),sp
   10a06:	          rts

00010a08 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   10a08:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a0c:	          movea.l 20(sp),a0
   10a10:	          move.l 24(a0),d0
   10a14:	          move.l d0,-(sp)
   10a16:	          pea 1 <_start+0x1>
   10a1a:	          moveq #12,d0
   10a1c:	          add.l sp,d0
   10a1e:	          move.l d0,-(sp)
   10a20:	          jsr 127da <getValueType>
   10a26:	          lea 12(sp),sp
   10a2a:	          tst.w d0
   10a2c:	      /-- bne.s 10a34 <builtIn_setCharacterAngleOffset+0x2c>
   10a2e:	      |   moveq #1,d0
   10a30:	/-----|-- bra.w 10ace <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   10a34:	|     \-> moveq #24,d0
   10a36:	|         add.l 20(sp),d0
   10a3a:	|         move.l d0,-(sp)
   10a3c:	|         jsr 1315e <trimStack>
   10a42:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a44:	|         movea.l 20(sp),a0
   10a48:	|         move.l 24(a0),d0
   10a4c:	|         move.l d0,-(sp)
   10a4e:	|         pea 7 <_start+0x7>
   10a52:	|         lea 8(sp),a0
   10a56:	|         move.l a0,-(sp)
   10a58:	|         jsr 127da <getValueType>
   10a5e:	|         lea 12(sp),sp
   10a62:	|         tst.w d0
   10a64:	|     /-- bne.s 10a6a <builtIn_setCharacterAngleOffset+0x62>
   10a66:	|     |   moveq #1,d0
   10a68:	+-----|-- bra.s 10ace <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   10a6a:	|     \-> moveq #24,d0
   10a6c:	|         add.l 20(sp),d0
   10a70:	|         move.l d0,-(sp)
   10a72:	|         jsr 1315e <trimStack>
   10a78:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   10a7a:	|         move.l (sp),d0
   10a7c:	|         move.l d0,-(sp)
   10a7e:	|         jsr 887a <findPerson>
   10a84:	|         addq.l #4,sp
   10a86:	|         move.l d0,8(sp)

	if (thisPerson) {
   10a8a:	|  /----- beq.s 10ab4 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   10a8c:	|  |      move.l 4(sp),d0
   10a90:	|  |      movea.l 8(sp),a0
   10a94:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   10a98:	|  |      moveq #28,d0
   10a9a:	|  |      add.l 20(sp),d0
   10a9e:	|  |      pea 1 <_start+0x1>
   10aa2:	|  |      pea 1 <_start+0x1>
   10aa6:	|  |      move.l d0,-(sp)
   10aa8:	|  |      jsr 130cc <setVariable>
   10aae:	|  |      lea 12(sp),sp
   10ab2:	|  |  /-- bra.s 10acc <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10ab4:	|  \--|-> moveq #28,d0
   10ab6:	|     |   add.l 20(sp),d0
   10aba:	|     |   clr.l -(sp)
   10abc:	|     |   pea 1 <_start+0x1>
   10ac0:	|     |   move.l d0,-(sp)
   10ac2:	|     |   jsr 130cc <setVariable>
   10ac8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10acc:	|     \-> moveq #2,d0
}
   10ace:	\-------> lea 12(sp),sp
   10ad2:	          rts

00010ad4 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   10ad4:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ad6:	       movea.l 12(sp),a0
   10ada:	       move.l 24(a0),d0
   10ade:	       move.l d0,-(sp)
   10ae0:	       pea 1 <_start+0x1>
   10ae4:	       move.l sp,d0
   10ae6:	       addq.l #8,d0
   10ae8:	       move.l d0,-(sp)
   10aea:	       jsr 127da <getValueType>
   10af0:	       lea 12(sp),sp
   10af4:	       tst.w d0
   10af6:	   /-- bne.s 10afc <builtIn_transitionMode+0x28>
   10af8:	   |   moveq #1,d0
   10afa:	/--|-- bra.s 10b32 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   10afc:	|  \-> move.l (sp),d0
   10afe:	|      move.l d0,d0
   10b00:	|      move.b d0,19a34 <fadeMode>
	trimStack (&fun -> stack);
   10b06:	|      moveq #24,d0
   10b08:	|      add.l 12(sp),d0
   10b0c:	|      move.l d0,-(sp)
   10b0e:	|      jsr 1315e <trimStack>
   10b14:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   10b16:	|      moveq #28,d0
   10b18:	|      add.l 12(sp),d0
   10b1c:	|      pea 1 <_start+0x1>
   10b20:	|      pea 1 <_start+0x1>
   10b24:	|      move.l d0,-(sp)
   10b26:	|      jsr 130cc <setVariable>
   10b2c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10b30:	|      moveq #2,d0
}
   10b32:	\----> addq.l #4,sp
   10b34:	       rts

00010b36 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10b36:	moveq #24,d0
   10b38:	add.l 8(sp),d0
   10b3c:	move.l d0,-(sp)
   10b3e:	jsr 1315e <trimStack>
   10b44:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   10b46:	moveq #28,d0
   10b48:	add.l 8(sp),d0
   10b4c:	pea 1 <_start+0x1>
   10b50:	pea 1 <_start+0x1>
   10b54:	move.l d0,-(sp)
   10b56:	jsr 130cc <setVariable>
   10b5c:	lea 12(sp),sp
	return BR_CONTINUE;
   10b60:	moveq #2,d0
}
   10b62:	rts

00010b64 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   10b64:	pea 16e59 <PutChar+0x1ce7>
   10b6a:	jsr 14822 <KPrintF>
   10b70:	addq.l #4,sp
	return BR_CONTINUE;
   10b72:	moveq #2,d0
}
   10b74:	rts

00010b76 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   10b76:	       lea -16(sp),sp
   10b7a:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   10b7c:	       movea.l 28(sp),a0
   10b80:	       move.l 24(a0),d0
   10b84:	       move.l d0,-(sp)
   10b86:	       jsr 12db0 <getTextFromAnyVar>
   10b8c:	       addq.l #4,sp
   10b8e:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   10b92:	   /-- bne.s 10b9a <builtIn_saveCustomData+0x24>
   10b94:	   |   moveq #1,d0
   10b96:	/--|-- bra.w 10c4c <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   10b9a:	|  \-> move.l 16(sp),-(sp)
   10b9e:	|      jsr 2fe <encodeFilename>
   10ba4:	|      addq.l #4,sp
   10ba6:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   10baa:	|      move.l 16(sp),8(sp)
   10bb0:	|      move.l 19b50 <SysBase>,d0
   10bb6:	|      movea.l d0,a6
   10bb8:	|      movea.l 8(sp),a1
   10bbc:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   10bc0:	|      move.l 12(sp),-(sp)
   10bc4:	|      jsr c3fc <failSecurityCheck>
   10bca:	|      addq.l #4,sp
   10bcc:	|      tst.w d0
   10bce:	|  /-- beq.s 10bd4 <builtIn_saveCustomData+0x5e>
   10bd0:	|  |   moveq #1,d0
   10bd2:	+--|-- bra.s 10c4c <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   10bd4:	|  \-> moveq #24,d0
   10bd6:	|      add.l 28(sp),d0
   10bda:	|      move.l d0,-(sp)
   10bdc:	|      jsr 1315e <trimStack>
   10be2:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   10be4:	|      movea.l 28(sp),a0
   10be8:	|      movea.l 24(a0),a0
   10bec:	|      move.l (a0),d0
   10bee:	|      moveq #6,d1
   10bf0:	|      cmp.l d0,d1
   10bf2:	|  /-- beq.s 10c06 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   10bf4:	|  |   pea 16e86 <PutChar+0x1d14>
   10bfa:	|  |   jsr 14822 <KPrintF>
   10c00:	|  |   addq.l #4,sp
		return BR_ERROR;
   10c02:	|  |   moveq #1,d0
   10c04:	+--|-- bra.s 10c4c <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   10c06:	|  \-> movea.l 28(sp),a0
   10c0a:	|      move.l 24(a0),d0
   10c0e:	|      move.l d0,-(sp)
   10c10:	|      move.l 16(sp),-(sp)
   10c14:	|      jsr c04c <stackToFile>
   10c1a:	|      addq.l #8,sp
   10c1c:	|      tst.w d0
   10c1e:	|  /-- bne.s 10c24 <builtIn_saveCustomData+0xae>
   10c20:	|  |   moveq #1,d0
   10c22:	+--|-- bra.s 10c4c <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   10c24:	|  \-> moveq #24,d0
   10c26:	|      add.l 28(sp),d0
   10c2a:	|      move.l d0,-(sp)
   10c2c:	|      jsr 1315e <trimStack>
   10c32:	|      addq.l #4,sp
	FreeVec(fileName);
   10c34:	|      move.l 12(sp),4(sp)
   10c3a:	|      move.l 19b50 <SysBase>,d0
   10c40:	|      movea.l d0,a6
   10c42:	|      movea.l 4(sp),a1
   10c46:	|      jsr -690(a6)
	return BR_CONTINUE;
   10c4a:	|      moveq #2,d0
}
   10c4c:	\----> movea.l (sp)+,a6
   10c4e:	       lea 16(sp),sp
   10c52:	       rts

00010c54 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   10c54:	       lea -28(sp),sp
   10c58:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10c5a:	       movea.l 40(sp),a0
   10c5e:	       move.l 24(a0),d0
   10c62:	       move.l d0,-(sp)
   10c64:	       jsr 12db0 <getTextFromAnyVar>
   10c6a:	       addq.l #4,sp
   10c6c:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   10c70:	   /-- bne.s 10c78 <builtIn_loadCustomData+0x24>
   10c72:	   |   moveq #1,d0
   10c74:	/--|-- bra.w 10d74 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   10c78:	|  \-> move.l 28(sp),-(sp)
   10c7c:	|      jsr 2fe <encodeFilename>
   10c82:	|      addq.l #4,sp
   10c84:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   10c88:	|      move.l 28(sp),20(sp)
   10c8e:	|      move.l 19b50 <SysBase>,d0
   10c94:	|      movea.l d0,a6
   10c96:	|      movea.l 20(sp),a1
   10c9a:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   10c9e:	|      move.l 24(sp),-(sp)
   10ca2:	|      jsr c3fc <failSecurityCheck>
   10ca8:	|      addq.l #4,sp
   10caa:	|      tst.w d0
   10cac:	|  /-- beq.s 10cb4 <builtIn_loadCustomData+0x60>
   10cae:	|  |   moveq #1,d0
   10cb0:	+--|-- bra.w 10d74 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   10cb4:	|  \-> moveq #24,d0
   10cb6:	|      add.l 40(sp),d0
   10cba:	|      move.l d0,-(sp)
   10cbc:	|      jsr 1315e <trimStack>
   10cc2:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   10cc4:	|      moveq #28,d0
   10cc6:	|      add.l 40(sp),d0
   10cca:	|      move.l d0,-(sp)
   10ccc:	|      jsr 12a28 <unlinkVar>
   10cd2:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   10cd4:	|      movea.l 40(sp),a0
   10cd8:	|      moveq #6,d0
   10cda:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   10cde:	|      moveq #12,d0
   10ce0:	|      move.l d0,16(sp)
   10ce4:	|      clr.l 12(sp)
   10ce8:	|      move.l 19b50 <SysBase>,d0
   10cee:	|      movea.l d0,a6
   10cf0:	|      move.l 16(sp),d0
   10cf4:	|      move.l 12(sp),d1
   10cf8:	|      jsr -684(a6)
   10cfc:	|      move.l d0,8(sp)
   10d00:	|      move.l 8(sp),d0
   10d04:	|      movea.l 40(sp),a0
   10d08:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   10d0c:	|      movea.l 40(sp),a0
   10d10:	|      move.l 32(a0),d0
   10d14:	|  /-- bne.s 10d1a <builtIn_loadCustomData+0xc6>
   10d16:	|  |   moveq #1,d0
   10d18:	+--|-- bra.s 10d74 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   10d1a:	|  \-> movea.l 40(sp),a0
   10d1e:	|      movea.l 32(a0),a0
   10d22:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   10d24:	|      movea.l 40(sp),a0
   10d28:	|      movea.l 32(a0),a0
   10d2c:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   10d30:	|      movea.l 40(sp),a0
   10d34:	|      movea.l 32(a0),a0
   10d38:	|      moveq #1,d0
   10d3a:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   10d3e:	|      movea.l 40(sp),a0
   10d42:	|      move.l 32(a0),d0
   10d46:	|      move.l d0,-(sp)
   10d48:	|      move.l 28(sp),-(sp)
   10d4c:	|      jsr ba86 <fileToStack>
   10d52:	|      addq.l #8,sp
   10d54:	|      tst.w d0
   10d56:	|  /-- bne.s 10d5c <builtIn_loadCustomData+0x108>
   10d58:	|  |   moveq #1,d0
   10d5a:	+--|-- bra.s 10d74 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   10d5c:	|  \-> move.l 24(sp),4(sp)
   10d62:	|      move.l 19b50 <SysBase>,d0
   10d68:	|      movea.l d0,a6
   10d6a:	|      movea.l 4(sp),a1
   10d6e:	|      jsr -690(a6)
	return BR_CONTINUE;
   10d72:	|      moveq #2,d0
}
   10d74:	\----> movea.l (sp)+,a6
   10d76:	       lea 28(sp),sp
   10d7a:	       rts

00010d7c <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   10d7c:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d7e:	       movea.l 12(sp),a0
   10d82:	       move.l 24(a0),d0
   10d86:	       move.l d0,-(sp)
   10d88:	       pea 1 <_start+0x1>
   10d8c:	       move.l sp,d0
   10d8e:	       addq.l #8,d0
   10d90:	       move.l d0,-(sp)
   10d92:	       jsr 127da <getValueType>
   10d98:	       lea 12(sp),sp
   10d9c:	       tst.w d0
   10d9e:	   /-- bne.s 10da4 <builtIn_setCustomEncoding+0x28>
   10da0:	   |   moveq #1,d0
   10da2:	/--|-- bra.s 10dda <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   10da4:	|  \-> move.l (sp),d0
   10da6:	|      move.l d0,d0
   10da8:	|      move.w d0,19c5c <saveEncoding>
	trimStack (&fun -> stack);
   10dae:	|      moveq #24,d0
   10db0:	|      add.l 12(sp),d0
   10db4:	|      move.l d0,-(sp)
   10db6:	|      jsr 1315e <trimStack>
   10dbc:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   10dbe:	|      moveq #28,d0
   10dc0:	|      add.l 12(sp),d0
   10dc4:	|      pea 1 <_start+0x1>
   10dc8:	|      pea 1 <_start+0x1>
   10dcc:	|      move.l d0,-(sp)
   10dce:	|      jsr 130cc <setVariable>
   10dd4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10dd8:	|      moveq #2,d0
}
   10dda:	\----> addq.l #4,sp
   10ddc:	       rts

00010dde <builtIn_freeSound>:

builtIn(freeSound)
{
   10dde:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10de0:	       movea.l 12(sp),a0
   10de4:	       move.l 24(a0),d0
   10de8:	       move.l d0,-(sp)
   10dea:	       pea 5 <_start+0x5>
   10dee:	       move.l sp,d0
   10df0:	       addq.l #8,d0
   10df2:	       move.l d0,-(sp)
   10df4:	       jsr 127da <getValueType>
   10dfa:	       lea 12(sp),sp
   10dfe:	       tst.w d0
   10e00:	   /-- bne.s 10e06 <builtIn_freeSound+0x28>
   10e02:	   |   moveq #1,d0
   10e04:	/--|-- bra.s 10e24 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   10e06:	|  \-> moveq #24,d0
   10e08:	|      add.l 12(sp),d0
   10e0c:	|      move.l d0,-(sp)
   10e0e:	|      jsr 1315e <trimStack>
   10e14:	|      addq.l #4,sp
	huntKillFreeSound (v);
   10e16:	|      move.l (sp),d0
   10e18:	|      move.l d0,-(sp)
   10e1a:	|      jsr b254 <huntKillFreeSound>
   10e20:	|      addq.l #4,sp
	return BR_CONTINUE;
   10e22:	|      moveq #2,d0
}
   10e24:	\----> addq.l #4,sp
   10e26:	       rts

00010e28 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   10e28:	       lea -12(sp),sp
   10e2c:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e2e:	       movea.l 24(sp),a0
   10e32:	       move.l 24(a0),d0
   10e36:	       move.l d0,-(sp)
   10e38:	       pea 1 <_start+0x1>
   10e3c:	       moveq #16,d0
   10e3e:	       add.l sp,d0
   10e40:	       move.l d0,-(sp)
   10e42:	       jsr 127da <getValueType>
   10e48:	       lea 12(sp),sp
   10e4c:	       tst.w d0
   10e4e:	   /-- bne.s 10e56 <builtIn_parallaxAdd+0x2e>
   10e50:	   |   moveq #1,d0
   10e52:	/--|-- bra.w 10f2a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   10e56:	|  \-> moveq #24,d0
   10e58:	|      add.l 24(sp),d0
   10e5c:	|      move.l d0,-(sp)
   10e5e:	|      jsr 1315e <trimStack>
   10e64:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e66:	|      movea.l 24(sp),a0
   10e6a:	|      move.l 24(a0),d0
   10e6e:	|      move.l d0,-(sp)
   10e70:	|      pea 1 <_start+0x1>
   10e74:	|      moveq #20,d0
   10e76:	|      add.l sp,d0
   10e78:	|      move.l d0,-(sp)
   10e7a:	|      jsr 127da <getValueType>
   10e80:	|      lea 12(sp),sp
   10e84:	|      tst.w d0
   10e86:	|  /-- bne.s 10e8e <builtIn_parallaxAdd+0x66>
   10e88:	|  |   moveq #1,d0
   10e8a:	+--|-- bra.w 10f2a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   10e8e:	|  \-> moveq #24,d0
   10e90:	|      add.l 24(sp),d0
   10e94:	|      move.l d0,-(sp)
   10e96:	|      jsr 1315e <trimStack>
   10e9c:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e9e:	|      movea.l 24(sp),a0
   10ea2:	|      move.l 24(a0),d0
   10ea6:	|      move.l d0,-(sp)
   10ea8:	|      pea 5 <_start+0x5>
   10eac:	|      lea 12(sp),a0
   10eb0:	|      move.l a0,-(sp)
   10eb2:	|      jsr 127da <getValueType>
   10eb8:	|      lea 12(sp),sp
   10ebc:	|      tst.w d0
   10ebe:	|  /-- bne.s 10ec4 <builtIn_parallaxAdd+0x9c>
   10ec0:	|  |   moveq #1,d0
   10ec2:	+--|-- bra.s 10f2a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   10ec4:	|  \-> moveq #24,d0
   10ec6:	|      add.l 24(sp),d0
   10eca:	|      move.l d0,-(sp)
   10ecc:	|      jsr 1315e <trimStack>
   10ed2:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   10ed4:	|      move.l 8(sp),d0
   10ed8:	|      move.l d0,d0
   10eda:	|      moveq #0,d2
   10edc:	|      move.w d0,d2
   10ede:	|      move.l 12(sp),d0
   10ee2:	|      move.l d0,d0
   10ee4:	|      moveq #0,d1
   10ee6:	|      move.w d0,d1
   10ee8:	|      move.l 4(sp),d0
   10eec:	|      move.l d0,d0
   10eee:	|      move.w d0,d0
   10ef0:	|      andi.l #65535,d0
   10ef6:	|      move.l d2,-(sp)
   10ef8:	|      move.l d1,-(sp)
   10efa:	|      move.l d0,-(sp)
   10efc:	|      jsr b470 <loadParallax>
   10f02:	|      lea 12(sp),sp
   10f06:	|      tst.w d0
   10f08:	|  /-- bne.s 10f0e <builtIn_parallaxAdd+0xe6>
   10f0a:	|  |   moveq #1,d0
   10f0c:	+--|-- bra.s 10f2a <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   10f0e:	|  \-> moveq #28,d0
   10f10:	|      add.l 24(sp),d0
   10f14:	|      pea 1 <_start+0x1>
   10f18:	|      pea 1 <_start+0x1>
   10f1c:	|      move.l d0,-(sp)
   10f1e:	|      jsr 130cc <setVariable>
   10f24:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   10f28:	|      moveq #2,d0
}
   10f2a:	\----> move.l (sp)+,d2
   10f2c:	       lea 12(sp),sp
   10f30:	       rts

00010f32 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   10f32:	jsr b3a8 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   10f38:	moveq #28,d0
   10f3a:	add.l 8(sp),d0
   10f3e:	pea 1 <_start+0x1>
   10f42:	pea 1 <_start+0x1>
   10f46:	move.l d0,-(sp)
   10f48:	jsr 130cc <setVariable>
   10f4e:	lea 12(sp),sp
	return BR_CONTINUE;
   10f52:	moveq #2,d0
}
   10f54:	rts

00010f56 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   10f56:	pea 16ea4 <PutChar+0x1d32>
   10f5c:	jsr 14822 <KPrintF>
   10f62:	addq.l #4,sp

	return BR_CONTINUE;
   10f64:	moveq #2,d0
}
   10f66:	rts

00010f68 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   10f68:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   10f6a:	             movea.l 16(sp),a0
   10f6e:	             movea.l 24(a0),a0
   10f72:	             move.l (a0),d0
   10f74:	             moveq #1,d1
   10f76:	             cmp.l d0,d1
   10f78:	      /----- beq.s 10fc0 <builtIn_makeFastArray+0x58>
   10f7a:	      |      moveq #6,d1
   10f7c:	      |      cmp.l d0,d1
   10f7e:	/-----|----- bne.s 10ffe <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   10f80:	|     |      movea.l 16(sp),a0
   10f84:	|     |      movea.l 24(a0),a0
   10f88:	|     |      move.l 4(a0),d1
   10f8c:	|     |      moveq #28,d0
   10f8e:	|     |      add.l 16(sp),d0
   10f92:	|     |      move.l d1,-(sp)
   10f94:	|     |      move.l d0,-(sp)
   10f96:	|     |      jsr 1288c <makeFastArrayFromStack>
   10f9c:	|     |      addq.l #8,sp
   10f9e:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   10fa2:	|     |      moveq #24,d0
   10fa4:	|     |      add.l 16(sp),d0
   10fa8:	|     |      move.l d0,-(sp)
   10faa:	|     |      jsr 1315e <trimStack>
   10fb0:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   10fb2:	|     |      tst.w 6(sp)
   10fb6:	|     |  /-- beq.s 10fbc <builtIn_makeFastArray+0x54>
   10fb8:	|     |  |   moveq #2,d0
   10fba:	|  /--|--|-- bra.s 11010 <builtIn_makeFastArray+0xa8>
   10fbc:	|  |  |  \-> moveq #1,d0
   10fbe:	|  +--|----- bra.s 11010 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   10fc0:	|  |  \----> movea.l 16(sp),a0
   10fc4:	|  |         movea.l 24(a0),a0
   10fc8:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   10fce:	|  |         moveq #24,d0
   10fd0:	|  |         add.l 16(sp),d0
   10fd4:	|  |         move.l d0,-(sp)
   10fd6:	|  |         jsr 1315e <trimStack>
   10fdc:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   10fde:	|  |         moveq #28,d0
   10fe0:	|  |         add.l 16(sp),d0
   10fe4:	|  |         move.l 2(sp),-(sp)
   10fe8:	|  |         move.l d0,-(sp)
   10fea:	|  |         jsr 128f6 <makeFastArraySize>
   10ff0:	|  |         addq.l #8,sp
   10ff2:	|  |         tst.w d0
   10ff4:	|  |     /-- beq.s 10ffa <builtIn_makeFastArray+0x92>
   10ff6:	|  |     |   moveq #2,d0
   10ff8:	|  +-----|-- bra.s 11010 <builtIn_makeFastArray+0xa8>
   10ffa:	|  |     \-> moveq #1,d0
   10ffc:	|  +-------- bra.s 11010 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   10ffe:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   11000:	   |         pea 16ecd <PutChar+0x1d5b>
   11006:	   |         jsr 14822 <KPrintF>
   1100c:	   |         addq.l #4,sp
	return BR_ERROR;
   1100e:	   |         moveq #1,d0
}
   11010:	   \-------> addq.l #8,sp
   11012:	             rts

00011014 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   11014:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11016:	          movea.l 16(sp),a0
   1101a:	          move.l 24(a0),d0
   1101e:	          move.l d0,-(sp)
   11020:	          pea 7 <_start+0x7>
   11024:	          move.l sp,d0
   11026:	          addq.l #8,d0
   11028:	          move.l d0,-(sp)
   1102a:	          jsr 127da <getValueType>
   11030:	          lea 12(sp),sp
   11034:	          tst.w d0
   11036:	      /-- bne.s 1103c <builtIn_getCharacterScale+0x28>
   11038:	      |   moveq #1,d0
   1103a:	/-----|-- bra.s 110b6 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   1103c:	|     \-> moveq #24,d0
   1103e:	|         add.l 16(sp),d0
   11042:	|         move.l d0,-(sp)
   11044:	|         jsr 1315e <trimStack>
   1104a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1104c:	|         move.l (sp),d0
   1104e:	|         move.l d0,-(sp)
   11050:	|         jsr 887a <findPerson>
   11056:	|         addq.l #4,sp
   11058:	|         move.l d0,4(sp)
	if (pers) {
   1105c:	|  /----- beq.s 1109c <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1105e:	|  |      movea.l 4(sp),a0
   11062:	|  |      move.l 20(a0),d0
   11066:	|  |      move.l #1120403456,-(sp)
   1106c:	|  |      move.l d0,-(sp)
   1106e:	|  |      jsr 14b8c <__mulsf3>
   11074:	|  |      addq.l #8,sp
   11076:	|  |      move.l d0,-(sp)
   11078:	|  |      jsr 14a72 <__fixsfsi>
   1107e:	|  |      addq.l #4,sp
   11080:	|  |      move.l d0,d1
   11082:	|  |      moveq #28,d0
   11084:	|  |      add.l 16(sp),d0
   11088:	|  |      move.l d1,-(sp)
   1108a:	|  |      pea 1 <_start+0x1>
   1108e:	|  |      move.l d0,-(sp)
   11090:	|  |      jsr 130cc <setVariable>
   11096:	|  |      lea 12(sp),sp
   1109a:	|  |  /-- bra.s 110b4 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1109c:	|  \--|-> moveq #28,d0
   1109e:	|     |   add.l 16(sp),d0
   110a2:	|     |   clr.l -(sp)
   110a4:	|     |   pea 1 <_start+0x1>
   110a8:	|     |   move.l d0,-(sp)
   110aa:	|     |   jsr 130cc <setVariable>
   110b0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   110b4:	|     \-> moveq #2,d0
}
   110b6:	\-------> addq.l #8,sp
   110b8:	          rts

000110ba <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   110ba:	move.l 19c80 <gameSettings>,d0
   110c0:	move.l d0,d1
   110c2:	moveq #28,d0
   110c4:	add.l 8(sp),d0
   110c8:	move.l d1,-(sp)
   110ca:	pea 1 <_start+0x1>
   110ce:	move.l d0,-(sp)
   110d0:	jsr 130cc <setVariable>
   110d6:	lea 12(sp),sp
	return BR_CONTINUE;
   110da:	moveq #2,d0
}
   110dc:	rts

000110de <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   110de:	moveq #24,d0
   110e0:	add.l 8(sp),d0
   110e4:	move.l d0,-(sp)
   110e6:	jsr 1315e <trimStack>
   110ec:	addq.l #4,sp
	trimStack (&fun -> stack);
   110ee:	moveq #24,d0
   110f0:	add.l 8(sp),d0
   110f4:	move.l d0,-(sp)
   110f6:	jsr 1315e <trimStack>
   110fc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   110fe:	moveq #28,d0
   11100:	add.l 8(sp),d0
   11104:	clr.l -(sp)
   11106:	pea 1 <_start+0x1>
   1110a:	move.l d0,-(sp)
   1110c:	jsr 130cc <setVariable>
   11112:	lea 12(sp),sp

	return BR_CONTINUE;
   11116:	moveq #2,d0

}
   11118:	rts

0001111a <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   1111a:	move.l 194da <lastFramesPerSecond>,d1
   11120:	moveq #28,d0
   11122:	add.l 8(sp),d0
   11126:	move.l d1,-(sp)
   11128:	pea 1 <_start+0x1>
   1112c:	move.l d0,-(sp)
   1112e:	jsr 130cc <setVariable>
   11134:	lea 12(sp),sp
	return BR_CONTINUE;
   11138:	moveq #2,d0
}
   1113a:	rts

0001113c <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   1113c:	moveq #2,d0
}
   1113e:	rts

00011140 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   11140:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11144:	          movea.l 60(sp),a0
   11148:	          move.l 24(a0),d0
   1114c:	          move.l d0,-(sp)
   1114e:	          pea 1 <_start+0x1>
   11152:	          pea 19a70 <thumbHeight>
   11158:	          jsr 127da <getValueType>
   1115e:	          lea 12(sp),sp
   11162:	          tst.w d0
   11164:	      /-- bne.s 1116c <builtIn_setThumbnailSize+0x2c>
   11166:	      |   moveq #1,d0
   11168:	/-----|-- bra.w 11228 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1116c:	|     \-> moveq #24,d0
   1116e:	|         add.l 60(sp),d0
   11172:	|         move.l d0,-(sp)
   11174:	|         jsr 1315e <trimStack>
   1117a:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1117c:	|         movea.l 60(sp),a0
   11180:	|         move.l 24(a0),d0
   11184:	|         move.l d0,-(sp)
   11186:	|         pea 1 <_start+0x1>
   1118a:	|         pea 19a6c <thumbWidth>
   11190:	|         jsr 127da <getValueType>
   11196:	|         lea 12(sp),sp
   1119a:	|         tst.w d0
   1119c:	|     /-- bne.s 111a4 <builtIn_setThumbnailSize+0x64>
   1119e:	|     |   moveq #1,d0
   111a0:	+-----|-- bra.w 11228 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   111a4:	|     \-> moveq #24,d0
   111a6:	|         add.l 60(sp),d0
   111aa:	|         move.l d0,-(sp)
   111ac:	|         jsr 1315e <trimStack>
   111b2:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   111b4:	|         move.l 19a6c <thumbWidth>,d0
   111ba:	|     /-- bmi.s 111e8 <builtIn_setThumbnailSize+0xa8>
   111bc:	|     |   move.l 19a70 <thumbHeight>,d0
   111c2:	|     +-- bmi.s 111e8 <builtIn_setThumbnailSize+0xa8>
   111c4:	|     |   move.l 19a6c <thumbWidth>,d0
   111ca:	|     |   move.l d0,d1
   111cc:	|     |   move.l 19aa4 <winWidth>,d0
   111d2:	|     |   cmp.l d1,d0
   111d4:	|     +-- bcs.s 111e8 <builtIn_setThumbnailSize+0xa8>
   111d6:	|     |   move.l 19a70 <thumbHeight>,d0
   111dc:	|     |   move.l d0,d1
   111de:	|     |   move.l 19aa8 <winHeight>,d0
   111e4:	|     |   cmp.l d1,d0
   111e6:	|  /--|-- bcc.s 11226 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   111e8:	|  |  \-> move.l 19a70 <thumbHeight>,d1
   111ee:	|  |      move.l 19a6c <thumbWidth>,d0
   111f4:	|  |      move.l d1,-(sp)
   111f6:	|  |      move.l d0,-(sp)
   111f8:	|  |      pea 16ef4 <PutChar+0x1d82>
   111fe:	|  |      lea 14(sp),a0
   11202:	|  |      move.l a0,-(sp)
   11204:	|  |      jsr 11fe4 <sprintf>
   1120a:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   1120e:	|  |      lea 2(sp),a0
   11212:	|  |      move.l a0,-(sp)
   11214:	|  |      pea 16efc <PutChar+0x1d8a>
   1121a:	|  |      jsr 14822 <KPrintF>
   11220:	|  |      addq.l #8,sp
		return BR_ERROR;
   11222:	|  |      moveq #1,d0
   11224:	+--|----- bra.s 11228 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   11226:	|  \----> moveq #2,d0
}
   11228:	\-------> lea 52(sp),sp
   1122c:	          rts

0001122e <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1122e:	       lea -12(sp),sp
   11232:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11234:	       movea.l 24(sp),a0
   11238:	       move.l 24(a0),d0
   1123c:	       move.l d0,-(sp)
   1123e:	       pea 1 <_start+0x1>
   11242:	       lea 12(sp),a0
   11246:	       move.l a0,-(sp)
   11248:	       jsr 127da <getValueType>
   1124e:	       lea 12(sp),sp
   11252:	       tst.w d0
   11254:	   /-- bne.s 1125c <builtIn_hasFlag+0x2e>
   11256:	   |   moveq #1,d0
   11258:	/--|-- bra.w 112ec <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1125c:	|  \-> moveq #24,d0
   1125e:	|      add.l 24(sp),d0
   11262:	|      move.l d0,-(sp)
   11264:	|      jsr 1315e <trimStack>
   1126a:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1126c:	|      movea.l 24(sp),a0
   11270:	|      move.l 24(a0),d0
   11274:	|      move.l d0,-(sp)
   11276:	|      pea 7 <_start+0x7>
   1127a:	|      moveq #16,d0
   1127c:	|      add.l sp,d0
   1127e:	|      move.l d0,-(sp)
   11280:	|      jsr 127da <getValueType>
   11286:	|      lea 12(sp),sp
   1128a:	|      tst.w d0
   1128c:	|  /-- bne.s 11292 <builtIn_hasFlag+0x64>
   1128e:	|  |   moveq #1,d0
   11290:	+--|-- bra.s 112ec <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   11292:	|  \-> moveq #24,d0
   11294:	|      add.l 24(sp),d0
   11298:	|      move.l d0,-(sp)
   1129a:	|      jsr 1315e <trimStack>
   112a0:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   112a2:	|      move.l 8(sp),d0
   112a6:	|      move.l d0,-(sp)
   112a8:	|      jsr b610 <findObjectType>
   112ae:	|      addq.l #4,sp
   112b0:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   112b4:	|  /-- bne.s 112ba <builtIn_hasFlag+0x8c>
   112b6:	|  |   moveq #1,d0
   112b8:	+--|-- bra.s 112ec <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   112ba:	|  \-> movea.l 12(sp),a0
   112be:	|      move.w 36(a0),d0
   112c2:	|      moveq #0,d2
   112c4:	|      move.w d0,d2
   112c6:	|      move.l 4(sp),d1
   112ca:	|      moveq #1,d0
   112cc:	|      lsl.l d1,d0
   112ce:	|      move.l d2,d1
   112d0:	|      and.l d0,d1
   112d2:	|      moveq #28,d0
   112d4:	|      add.l 24(sp),d0
   112d8:	|      move.l d1,-(sp)
   112da:	|      pea 1 <_start+0x1>
   112de:	|      move.l d0,-(sp)
   112e0:	|      jsr 130cc <setVariable>
   112e6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   112ea:	|      moveq #2,d0
}
   112ec:	\----> move.l (sp)+,d2
   112ee:	       lea 12(sp),sp
   112f2:	       rts

000112f4 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   112f4:	       jsr b5fe <snapshot>
   112fa:	       tst.w d0
   112fc:	/----- beq.s 11302 <builtIn_snapshotGrab+0xe>
   112fe:	|      moveq #2,d0
   11300:	|  /-- bra.s 11304 <builtIn_snapshotGrab+0x10>
   11302:	\--|-> moveq #1,d0
}
   11304:	   \-> rts

00011306 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   11306:	jsr b4b6 <nosnapshot>
	return BR_CONTINUE;
   1130c:	moveq #2,d0
}
   1130e:	rts

00011310 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   11310:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   11312:	move.w 193b6 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1131a:	movea.l 12(sp),a0
   1131e:	move.l 24(a0),d0
   11322:	move.l d0,-(sp)
   11324:	jsr 12d1a <getBoolean>
   1132a:	addq.l #4,sp
   1132c:	move.w d0,193b6 <allowAnyFilename>
	trimStack (&fun -> stack);
   11332:	moveq #24,d0
   11334:	add.l 12(sp),d0
   11338:	move.l d0,-(sp)
   1133a:	jsr 1315e <trimStack>
   11340:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   11342:	movea.w 2(sp),a0
   11346:	moveq #28,d0
   11348:	add.l 12(sp),d0
   1134c:	move.l a0,-(sp)
   1134e:	pea 1 <_start+0x1>
   11352:	move.l d0,-(sp)
   11354:	jsr 130cc <setVariable>
   1135a:	lea 12(sp),sp
	return BR_CONTINUE;
   1135e:	moveq #2,d0
}
   11360:	addq.l #4,sp
   11362:	rts

00011364 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   11364:	moveq #24,d0
   11366:	add.l 8(sp),d0
   1136a:	move.l d0,-(sp)
   1136c:	jsr 1315e <trimStack>
   11372:	addq.l #4,sp
	trimStack (&fun -> stack);
   11374:	moveq #24,d0
   11376:	add.l 8(sp),d0
   1137a:	move.l d0,-(sp)
   1137c:	jsr 1315e <trimStack>
   11382:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   11384:	moveq #28,d0
   11386:	add.l 8(sp),d0
   1138a:	clr.l -(sp)
   1138c:	pea 1 <_start+0x1>
   11390:	move.l d0,-(sp)
   11392:	jsr 130cc <setVariable>
   11398:	lea 12(sp),sp

	return BR_CONTINUE;
   1139c:	moveq #2,d0
}
   1139e:	rts

000113a0 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   113a0:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   113a2:	movea.l 12(sp),a0
   113a6:	move.l 24(a0),d0
   113aa:	move.l d0,-(sp)
   113ac:	jsr 12db0 <getTextFromAnyVar>
   113b2:	addq.l #4,sp
   113b4:	move.l d0,(sp)
	trimStack (&fun -> stack);
   113b6:	moveq #24,d0
   113b8:	add.l 12(sp),d0
   113bc:	move.l d0,-(sp)
   113be:	jsr 1315e <trimStack>
   113c4:	addq.l #4,sp
	KPrintF (mess);
   113c6:	move.l (sp),-(sp)
   113c8:	jsr 14822 <KPrintF>
   113ce:	addq.l #4,sp
	return BR_ERROR;
   113d0:	moveq #1,d0
}
   113d2:	addq.l #4,sp
   113d4:	rts

000113d6 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   113d6:	moveq #24,d0
   113d8:	add.l 8(sp),d0
   113dc:	move.l d0,-(sp)
   113de:	jsr 1315e <trimStack>
   113e4:	addq.l #4,sp
	trimStack (&fun -> stack);
   113e6:	moveq #24,d0
   113e8:	add.l 8(sp),d0
   113ec:	move.l d0,-(sp)
   113ee:	jsr 1315e <trimStack>
   113f4:	addq.l #4,sp
	trimStack (&fun -> stack);
   113f6:	moveq #24,d0
   113f8:	add.l 8(sp),d0
   113fc:	move.l d0,-(sp)
   113fe:	jsr 1315e <trimStack>
   11404:	addq.l #4,sp
	trimStack (&fun -> stack);
   11406:	moveq #24,d0
   11408:	add.l 8(sp),d0
   1140c:	move.l d0,-(sp)
   1140e:	jsr 1315e <trimStack>
   11414:	addq.l #4,sp

	return BR_CONTINUE;
   11416:	moveq #2,d0
}
   11418:	rts

0001141a <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1141a:	moveq #24,d0
   1141c:	add.l 8(sp),d0
   11420:	move.l d0,-(sp)
   11422:	jsr 1315e <trimStack>
   11428:	addq.l #4,sp
	trimStack (&fun -> stack);
   1142a:	moveq #24,d0
   1142c:	add.l 8(sp),d0
   11430:	move.l d0,-(sp)
   11432:	jsr 1315e <trimStack>
   11438:	addq.l #4,sp
	trimStack (&fun -> stack);
   1143a:	moveq #24,d0
   1143c:	add.l 8(sp),d0
   11440:	move.l d0,-(sp)
   11442:	jsr 1315e <trimStack>
   11448:	addq.l #4,sp

	return BR_CONTINUE;
   1144a:	moveq #2,d0

}
   1144c:	rts

0001144e <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   1144e:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   11450:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   11456:	sne d0
   11458:	neg.b d0
   1145a:	moveq #0,d1
   1145c:	move.b d0,d1
   1145e:	moveq #28,d0
   11460:	add.l 12(sp),d0
   11464:	move.l d1,-(sp)
   11466:	pea 1 <_start+0x1>
   1146a:	move.l d0,-(sp)
   1146c:	jsr 130cc <setVariable>
   11472:	lea 12(sp),sp
	return BR_CONTINUE;
   11476:	moveq #2,d0
}
   11478:	addq.l #4,sp
   1147a:	rts

0001147c <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   1147c:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   1147e:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   11484:	pea 16f13 <PutChar+0x1da1>
   1148a:	jsr 14822 <KPrintF>
   11490:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   11492:	tst.w 2(sp)
   11496:	sne d0
   11498:	neg.b d0
   1149a:	moveq #0,d1
   1149c:	move.b d0,d1
   1149e:	moveq #28,d0
   114a0:	add.l 12(sp),d0
   114a4:	move.l d1,-(sp)
   114a6:	pea 1 <_start+0x1>
   114aa:	move.l d0,-(sp)
   114ac:	jsr 130cc <setVariable>
   114b2:	lea 12(sp),sp
	return BR_CONTINUE;
   114b6:	moveq #2,d0
}
   114b8:	addq.l #4,sp
   114ba:	rts

000114bc <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   114bc:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   114c0:	             move.l 104(sp),d0
   114c4:	             cmpi.l #166,d0
   114ca:	/----------- bhi.w 115ac <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   114ce:	|            move.l 104(sp),d0
   114d2:	|            add.l d0,d0
   114d4:	|            movea.l d0,a1
   114d6:	|            adda.l d0,a1
   114d8:	|            lea 194fc <paramNum>,a0
   114de:	|            move.l (0,a1,a0.l),d0
   114e2:	|            moveq #-1,d1
   114e4:	|            cmp.l d0,d1
   114e6:	|  /-------- beq.w 11574 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   114ea:	|  |         move.l 104(sp),d0
   114ee:	|  |         add.l d0,d0
   114f0:	|  |         movea.l d0,a1
   114f2:	|  |         adda.l d0,a1
   114f4:	|  |         lea 194fc <paramNum>,a0
   114fa:	|  |         move.l (0,a1,a0.l),d0
   114fe:	|  |         cmp.l 108(sp),d0
   11502:	|  +-------- beq.s 11574 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   11504:	|  |         move.l 104(sp),d0
   11508:	|  |         add.l d0,d0
   1150a:	|  |         movea.l d0,a1
   1150c:	|  |         adda.l d0,a1
   1150e:	|  |         lea 194fc <paramNum>,a0
   11514:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   11518:	|  |         moveq #1,d1
   1151a:	|  |         cmp.l d0,d1
   1151c:	|  |  /----- bne.s 11526 <callBuiltIn+0x6a>
   1151e:	|  |  |      move.l #89031,d0
   11524:	|  |  |  /-- bra.s 1152c <callBuiltIn+0x70>
   11526:	|  |  \--|-> move.l #94025,d0
   1152c:	|  |     \-> move.l 104(sp),d1
   11530:	|  |         add.l d1,d1
   11532:	|  |         movea.l d1,a1
   11534:	|  |         adda.l d1,a1
   11536:	|  |         lea 194fc <paramNum>,a0
   1153c:	|  |         move.l (0,a1,a0.l),d1
   11540:	|  |         move.l d0,-(sp)
   11542:	|  |         move.l d1,-(sp)
   11544:	|  |         pea 16f4b <PutChar+0x1dd9>
   1154a:	|  |         lea 12(sp),a0
   1154e:	|  |         move.l a0,-(sp)
   11550:	|  |         jsr 11fe4 <sprintf>
   11556:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   1155a:	|  |         movea.l sp,a0
   1155c:	|  |         move.l a0,-(sp)
   1155e:	|  |         jsr b8 <copyString>
   11564:	|  |         addq.l #4,sp
   11566:	|  |         move.l d0,-(sp)
   11568:	|  |         jsr 14822 <KPrintF>
   1156e:	|  |         addq.l #4,sp
				return BR_ERROR;
   11570:	|  |         moveq #1,d0
   11572:	|  |     /-- bra.s 115bc <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   11574:	|  \-----|-> move.l 104(sp),d0
   11578:	|        |   add.l d0,d0
   1157a:	|        |   movea.l d0,a1
   1157c:	|        |   adda.l d0,a1
   1157e:	|        |   lea 19798 <builtInFunctionArray>,a0
   11584:	|        |   move.l (0,a1,a0.l),d0
   11588:	+--------|-- beq.s 115ac <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   1158a:	|        |   move.l 104(sp),d0
   1158e:	|        |   add.l d0,d0
   11590:	|        |   movea.l d0,a1
   11592:	|        |   adda.l d0,a1
   11594:	|        |   lea 19798 <builtInFunctionArray>,a0
   1159a:	|        |   movea.l (0,a1,a0.l),a0
   1159e:	|        |   move.l 112(sp),-(sp)
   115a2:	|        |   move.l 112(sp),-(sp)
   115a6:	|        |   jsr (a0)
   115a8:	|        |   addq.l #8,sp
   115aa:	|        +-- bra.s 115bc <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   115ac:	\--------|-> pea 16f76 <PutChar+0x1e04>
   115b2:	         |   jsr 14822 <KPrintF>
   115b8:	         |   addq.l #4,sp
	return BR_ERROR;
   115ba:	         |   moveq #1,d0
}
   115bc:	         \-> lea 100(sp),sp
   115c0:	             rts

000115c2 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   115c2:	          subq.l #8,sp
	int indexNum = -1;
   115c4:	          moveq #-1,d0
   115c6:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   115ca:	          clr.l (sp)
   115cc:	   /----- bra.s 115f2 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   115ce:	/--|----> move.l 19c78 <languageTable>,d1
   115d4:	|  |      move.l (sp),d0
   115d6:	|  |      add.l d0,d0
   115d8:	|  |      add.l d0,d0
   115da:	|  |      movea.l d1,a0
   115dc:	|  |      adda.l d0,a0
   115de:	|  |      move.l (a0),d0
   115e0:	|  |      move.l d0,d1
   115e2:	|  |      move.l 19c80 <gameSettings>,d0
   115e8:	|  |      cmp.l d1,d0
   115ea:	|  |  /-- bne.s 115f0 <getLanguageForFileB+0x2e>
   115ec:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   115f0:	|  |  \-> addq.l #1,(sp)
   115f2:	|  \----> move.l 19c84 <gameSettings+0x4>,d0
   115f8:	|         cmp.l (sp),d0
   115fa:	\-------- bcc.s 115ce <getLanguageForFileB+0xc>
	}

	return indexNum;
   115fc:	          move.l 4(sp),d0
}
   11600:	          addq.l #8,sp
   11602:	          rts

00011604 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   11604:	          lea -20(sp),sp
   11608:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1160a:	          move.l 28(sp),-(sp)
   1160e:	          jsr 11cc6 <strlen>
   11614:	          addq.l #4,sp
   11616:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1161a:	          moveq #4,d0
   1161c:	          cmp.l 12(sp),d0
   11620:	      /-- bge.s 11644 <getPrefsFilename+0x40>
   11622:	      |   move.l 12(sp),d0
   11626:	      |   subq.l #4,d0
   11628:	      |   movea.l 28(sp),a0
   1162c:	      |   adda.l d0,a0
   1162e:	      |   move.b (a0),d0
   11630:	      |   cmpi.b #46,d0
   11634:	      +-- bne.s 11644 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   11636:	      |   move.l 12(sp),d0
   1163a:	      |   subq.l #4,d0
   1163c:	      |   movea.l 28(sp),a0
   11640:	      |   adda.l d0,a0
   11642:	      |   clr.b (a0)
	}

	char * f = filename;
   11644:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1164a:	          clr.l 20(sp)
   1164e:	   /----- bra.s 11676 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   11650:	/--|----> move.l 20(sp),d0
   11654:	|  |      movea.l 28(sp),a0
   11658:	|  |      adda.l d0,a0
   1165a:	|  |      move.b (a0),d0
   1165c:	|  |      cmpi.b #47,d0
   11660:	|  |  /-- bne.s 11672 <getPrefsFilename+0x6e>
   11662:	|  |  |   move.l 20(sp),d0
   11666:	|  |  |   addq.l #1,d0
   11668:	|  |  |   move.l 28(sp),d1
   1166c:	|  |  |   add.l d0,d1
   1166e:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   11672:	|  |  \-> addq.l #1,20(sp)
   11676:	|  \----> move.l 20(sp),d0
   1167a:	|         cmp.l 12(sp),d0
   1167e:	\-------- blt.s 11650 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   11680:	          pea 16fa1 <PutChar+0x1e2f>
   11686:	          move.l 20(sp),-(sp)
   1168a:	          jsr 11d06 <joinStrings>
   11690:	          addq.l #8,sp
   11692:	          move.l d0,8(sp)

	FreeVec(filename);
   11696:	          move.l 28(sp),4(sp)
   1169c:	          move.l 19b50 <SysBase>,d0
   116a2:	          movea.l d0,a6
   116a4:	          movea.l 4(sp),a1
   116a8:	          jsr -690(a6)
	filename = NULL;
   116ac:	          clr.l 28(sp)
	return joined;
   116b0:	          move.l 8(sp),d0
}
   116b4:	          movea.l (sp)+,a6
   116b6:	          lea 20(sp),sp
   116ba:	          rts

000116bc <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   116bc:	             lea -28(sp),sp
   116c0:	             move.l a6,-(sp)
   116c2:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   116c4:	             move.l 19c84 <gameSettings+0x4>,d0
   116ca:	             move.l d0,d1
   116cc:	             addq.l #1,d1
   116ce:	             move.l d1,28(sp)
   116d2:	             clr.l 24(sp)
   116d6:	             move.l 19b50 <SysBase>,d0
   116dc:	             movea.l d0,a6
   116de:	             move.l 28(sp),d0
   116e2:	             move.l 24(sp),d1
   116e6:	             jsr -684(a6)
   116ea:	             move.l d0,20(sp)
   116ee:	             move.l 20(sp),d0
   116f2:	             move.l d0,19c78 <languageTable>
    if( languageTable == 0) {
   116f8:	             move.l 19c78 <languageTable>,d0
   116fe:	         /-- bne.s 1170e <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   11700:	         |   pea 16fa6 <PutChar+0x1e34>
   11706:	         |   jsr 14822 <KPrintF>
   1170c:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1170e:	         \-> move.l 19c84 <gameSettings+0x4>,d0
   11714:	             move.l d0,d1
   11716:	             addq.l #1,d1
   11718:	             move.l d1,16(sp)
   1171c:	             clr.l 12(sp)
   11720:	             move.l 19b50 <SysBase>,d0
   11726:	             movea.l d0,a6
   11728:	             move.l 16(sp),d0
   1172c:	             move.l 12(sp),d1
   11730:	             jsr -684(a6)
   11734:	             move.l d0,8(sp)
   11738:	             move.l 8(sp),d0
   1173c:	             move.l d0,19c7c <languageName>
	if( languageName == 0) {
   11742:	             move.l 19c7c <languageName>,d0
   11748:	         /-- bne.s 11758 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1174a:	         |   pea 16fdc <PutChar+0x1e6a>
   11750:	         |   jsr 14822 <KPrintF>
   11756:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   11758:	         \-> clr.l 32(sp)
   1175c:	   /-------- bra.s 117d4 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   1175e:	/--|-------> tst.l 32(sp)
   11762:	|  |  /----- beq.s 11772 <makeLanguageTable+0xb6>
   11764:	|  |  |      move.l 40(sp),-(sp)
   11768:	|  |  |      jsr 6bc <get2bytes>
   1176e:	|  |  |      addq.l #4,sp
   11770:	|  |  |  /-- bra.s 11774 <makeLanguageTable+0xb8>
   11772:	|  |  \--|-> moveq #0,d0
   11774:	|  |     \-> movea.l 19c78 <languageTable>,a0
   1177a:	|  |         move.l 32(sp),d1
   1177e:	|  |         add.l d1,d1
   11780:	|  |         add.l d1,d1
   11782:	|  |         adda.l d1,a0
   11784:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   11786:	|  |         move.l 19c7c <languageName>,d1
   1178c:	|  |         move.l 32(sp),d0
   11790:	|  |         add.l d0,d0
   11792:	|  |         add.l d0,d0
   11794:	|  |         movea.l d1,a0
   11796:	|  |         adda.l d0,a0
   11798:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   1179a:	|  |         move.l 19afa <gameVersion>,d0
   117a0:	|  |         cmpi.l #511,d0
   117a6:	|  |     /-- ble.s 117d0 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   117a8:	|  |     |   move.l 19c84 <gameSettings+0x4>,d0
   117ae:	|  |     +-- beq.s 117d0 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   117b0:	|  |     |   move.l 19c7c <languageName>,d1
   117b6:	|  |     |   move.l 32(sp),d0
   117ba:	|  |     |   add.l d0,d0
   117bc:	|  |     |   add.l d0,d0
   117be:	|  |     |   movea.l d1,a2
   117c0:	|  |     |   adda.l d0,a2
   117c2:	|  |     |   move.l 40(sp),-(sp)
   117c6:	|  |     |   jsr b02 <readString>
   117cc:	|  |     |   addq.l #4,sp
   117ce:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   117d0:	|  |     \-> addq.l #1,32(sp)
   117d4:	|  \-------> move.l 19c84 <gameSettings+0x4>,d0
   117da:	|            cmp.l 32(sp),d0
   117de:	\----------- bcc.w 1175e <makeLanguageTable+0xa2>
		}
	}
}
   117e2:	             nop
   117e4:	             nop
   117e6:	             movea.l (sp)+,a2
   117e8:	             movea.l (sp)+,a6
   117ea:	             lea 28(sp),sp
   117ee:	             rts

000117f0 <readIniFile>:

void readIniFile (char * filename) {
   117f0:	                      lea -564(sp),sp
   117f4:	                      move.l a6,-(sp)
   117f6:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   117f8:	                      move.l 576(sp),-(sp)
   117fc:	                      jsr b8 <copyString>
   11802:	                      addq.l #4,sp
   11804:	                      move.l d0,-(sp)
   11806:	                      jsr 11604 <getPrefsFilename>
   1180c:	                      addq.l #4,sp
   1180e:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   11812:	                      move.l 562(sp),558(sp)
   11818:	                      move.l #1005,554(sp)
   11820:	                      move.l 19b58 <DOSBase>,d0
   11826:	                      movea.l d0,a6
   11828:	                      move.l 558(sp),d1
   1182c:	                      move.l 554(sp),d2
   11830:	                      jsr -30(a6)
   11834:	                      move.l d0,550(sp)
   11838:	                      move.l 550(sp),d0
   1183c:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   11840:	                      clr.l 19c80 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   11846:	                      move.w #1,19c88 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   1184e:	                      clr.l 19c8a <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   11854:	                      moveq #1,d0
   11856:	                      move.l d0,19c8e <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   1185c:	                      clr.w 19c92 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   11862:	                      clr.w 19c94 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   11868:	                      clr.w 19c96 <gameSettings+0x16>

	FreeVec(langName);
   1186e:	                      move.l 562(sp),542(sp)
   11874:	                      move.l 19b50 <SysBase>,d0
   1187a:	                      movea.l d0,a6
   1187c:	                      movea.l 542(sp),a1
   11880:	                      jsr -690(a6)
	langName = NULL;
   11884:	                      clr.l 562(sp)

	if (fp) {
   11888:	                      tst.l 546(sp)
   1188c:	/-------------------- beq.w 11b6a <readIniFile+0x37a>
		char lineSoFar[257] = "";
   11890:	|                     move.l sp,d0
   11892:	|                     addi.l #265,d0
   11898:	|                     move.l #257,d1
   1189e:	|                     move.l d1,-(sp)
   118a0:	|                     clr.l -(sp)
   118a2:	|                     move.l d0,-(sp)
   118a4:	|                     jsr 147a6 <memset>
   118aa:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   118ae:	|                     move.l sp,d0
   118b0:	|                     addq.l #8,d0
   118b2:	|                     move.l #257,d1
   118b8:	|                     move.l d1,-(sp)
   118ba:	|                     clr.l -(sp)
   118bc:	|                     move.l d0,-(sp)
   118be:	|                     jsr 147a6 <memset>
   118c4:	|                     lea 12(sp),sp
		unsigned char here = 0;
   118c8:	|                     clr.b 571(sp)
		char readChar = ' ';
   118cc:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   118d2:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   118d8:	|                     clr.w 566(sp)
		LONG tmp = 0;
   118dc:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   118e0:	|  /----------------> move.l 546(sp),534(sp)
   118e6:	|  |                  move.l 19b58 <DOSBase>,d0
   118ec:	|  |                  movea.l d0,a6
   118ee:	|  |                  move.l 534(sp),d1
   118f2:	|  |                  jsr -306(a6)
   118f6:	|  |                  move.l d0,530(sp)
   118fa:	|  |                  move.l 530(sp),d0
   118fe:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   11902:	|  |                  moveq #-1,d1
   11904:	|  |                  cmp.l 538(sp),d1
   11908:	|  |           /----- bne.s 11916 <readIniFile+0x126>
				readChar = '\n';
   1190a:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   11910:	|  |           |      clr.w 568(sp)
   11914:	|  |           |  /-- bra.s 1191c <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   11916:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   1191c:	|  |              \-> move.b 570(sp),d0
   11920:	|  |                  ext.w d0
   11922:	|  |                  movea.w d0,a0
   11924:	|  |                  moveq #61,d0
   11926:	|  |                  cmp.l a0,d0
   11928:	|  |     /----------- beq.w 11ad2 <readIniFile+0x2e2>
   1192c:	|  |     |            moveq #61,d1
   1192e:	|  |     |            cmp.l a0,d1
   11930:	|  |  /--|----------- blt.w 11ade <readIniFile+0x2ee>
   11934:	|  |  |  |            moveq #10,d0
   11936:	|  |  |  |            cmp.l a0,d0
   11938:	|  |  |  |        /-- beq.s 11942 <readIniFile+0x152>
   1193a:	|  |  |  |        |   moveq #13,d1
   1193c:	|  |  |  |        |   cmp.l a0,d1
   1193e:	|  |  +--|--------|-- bne.w 11ade <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   11942:	|  |  |  |        \-> tst.w 566(sp)
   11946:	|  |  |  |     /----- beq.w 11ac0 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   1194a:	|  |  |  |     |      pea 17010 <PutChar+0x1e9e>
   11950:	|  |  |  |     |      move.l sp,d0
   11952:	|  |  |  |     |      addi.l #269,d0
   11958:	|  |  |  |     |      move.l d0,-(sp)
   1195a:	|  |  |  |     |      jsr 11c86 <strcmp>
   11960:	|  |  |  |     |      addq.l #8,sp
   11962:	|  |  |  |     |      tst.l d0
   11964:	|  |  |  |     |  /-- bne.s 1197e <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   11966:	|  |  |  |     |  |   move.l sp,d0
   11968:	|  |  |  |     |  |   addq.l #8,d0
   1196a:	|  |  |  |     |  |   move.l d0,-(sp)
   1196c:	|  |  |  |     |  |   jsr 11b76 <stringToInt>
   11972:	|  |  |  |     |  |   addq.l #4,sp
   11974:	|  |  |  |     |  |   move.l d0,19c80 <gameSettings>
   1197a:	|  |  |  |     +--|-- bra.w 11ac0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   1197e:	|  |  |  |     |  \-> pea 17019 <PutChar+0x1ea7>
   11984:	|  |  |  |     |      move.l sp,d0
   11986:	|  |  |  |     |      addi.l #269,d0
   1198c:	|  |  |  |     |      move.l d0,-(sp)
   1198e:	|  |  |  |     |      jsr 11c86 <strcmp>
   11994:	|  |  |  |     |      addq.l #8,sp
   11996:	|  |  |  |     |      tst.l d0
   11998:	|  |  |  |     |  /-- bne.s 119be <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   1199a:	|  |  |  |     |  |   move.l sp,d0
   1199c:	|  |  |  |     |  |   addq.l #8,d0
   1199e:	|  |  |  |     |  |   move.l d0,-(sp)
   119a0:	|  |  |  |     |  |   jsr 11b76 <stringToInt>
   119a6:	|  |  |  |     |  |   addq.l #4,sp
   119a8:	|  |  |  |     |  |   tst.l d0
   119aa:	|  |  |  |     |  |   seq d0
   119ac:	|  |  |  |     |  |   neg.b d0
   119ae:	|  |  |  |     |  |   move.b d0,d0
   119b0:	|  |  |  |     |  |   andi.w #255,d0
   119b4:	|  |  |  |     |  |   move.w d0,19c88 <gameSettings+0x8>
   119ba:	|  |  |  |     +--|-- bra.w 11ac0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   119be:	|  |  |  |     |  \-> pea 17020 <PutChar+0x1eae>
   119c4:	|  |  |  |     |      move.l sp,d0
   119c6:	|  |  |  |     |      addi.l #269,d0
   119cc:	|  |  |  |     |      move.l d0,-(sp)
   119ce:	|  |  |  |     |      jsr 11c86 <strcmp>
   119d4:	|  |  |  |     |      addq.l #8,sp
   119d6:	|  |  |  |     |      tst.l d0
   119d8:	|  |  |  |     |  /-- bne.s 119f2 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   119da:	|  |  |  |     |  |   move.l sp,d0
   119dc:	|  |  |  |     |  |   addq.l #8,d0
   119de:	|  |  |  |     |  |   move.l d0,-(sp)
   119e0:	|  |  |  |     |  |   jsr 11b76 <stringToInt>
   119e6:	|  |  |  |     |  |   addq.l #4,sp
   119e8:	|  |  |  |     |  |   move.l d0,19c8a <gameSettings+0xa>
   119ee:	|  |  |  |     +--|-- bra.w 11ac0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   119f2:	|  |  |  |     |  \-> pea 17028 <PutChar+0x1eb6>
   119f8:	|  |  |  |     |      move.l sp,d0
   119fa:	|  |  |  |     |      addi.l #269,d0
   11a00:	|  |  |  |     |      move.l d0,-(sp)
   11a02:	|  |  |  |     |      jsr 11c86 <strcmp>
   11a08:	|  |  |  |     |      addq.l #8,sp
   11a0a:	|  |  |  |     |      tst.l d0
   11a0c:	|  |  |  |     |  /-- bne.s 11a26 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   11a0e:	|  |  |  |     |  |   move.l sp,d0
   11a10:	|  |  |  |     |  |   addq.l #8,d0
   11a12:	|  |  |  |     |  |   move.l d0,-(sp)
   11a14:	|  |  |  |     |  |   jsr 11b76 <stringToInt>
   11a1a:	|  |  |  |     |  |   addq.l #4,sp
   11a1c:	|  |  |  |     |  |   move.l d0,19c8e <gameSettings+0xe>
   11a22:	|  |  |  |     +--|-- bra.w 11ac0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   11a26:	|  |  |  |     |  \-> pea 17032 <PutChar+0x1ec0>
   11a2c:	|  |  |  |     |      move.l sp,d0
   11a2e:	|  |  |  |     |      addi.l #269,d0
   11a34:	|  |  |  |     |      move.l d0,-(sp)
   11a36:	|  |  |  |     |      jsr 11c86 <strcmp>
   11a3c:	|  |  |  |     |      addq.l #8,sp
   11a3e:	|  |  |  |     |      tst.l d0
   11a40:	|  |  |  |     |  /-- bne.s 11a5a <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   11a42:	|  |  |  |     |  |   move.l sp,d0
   11a44:	|  |  |  |     |  |   addq.l #8,d0
   11a46:	|  |  |  |     |  |   move.l d0,-(sp)
   11a48:	|  |  |  |     |  |   jsr 11b76 <stringToInt>
   11a4e:	|  |  |  |     |  |   addq.l #4,sp
   11a50:	|  |  |  |     |  |   move.l d0,d0
   11a52:	|  |  |  |     |  |   move.w d0,19c92 <gameSettings+0x12>
   11a58:	|  |  |  |     +--|-- bra.s 11ac0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   11a5a:	|  |  |  |     |  \-> pea 1703e <PutChar+0x1ecc>
   11a60:	|  |  |  |     |      move.l sp,d0
   11a62:	|  |  |  |     |      addi.l #269,d0
   11a68:	|  |  |  |     |      move.l d0,-(sp)
   11a6a:	|  |  |  |     |      jsr 11c86 <strcmp>
   11a70:	|  |  |  |     |      addq.l #8,sp
   11a72:	|  |  |  |     |      tst.l d0
   11a74:	|  |  |  |     |  /-- bne.s 11a8e <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   11a76:	|  |  |  |     |  |   move.l sp,d0
   11a78:	|  |  |  |     |  |   addq.l #8,d0
   11a7a:	|  |  |  |     |  |   move.l d0,-(sp)
   11a7c:	|  |  |  |     |  |   jsr 11b76 <stringToInt>
   11a82:	|  |  |  |     |  |   addq.l #4,sp
   11a84:	|  |  |  |     |  |   move.l d0,d0
   11a86:	|  |  |  |     |  |   move.w d0,19c94 <gameSettings+0x14>
   11a8c:	|  |  |  |     +--|-- bra.s 11ac0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   11a8e:	|  |  |  |     |  \-> pea 1704c <PutChar+0x1eda>
   11a94:	|  |  |  |     |      move.l sp,d0
   11a96:	|  |  |  |     |      addi.l #269,d0
   11a9c:	|  |  |  |     |      move.l d0,-(sp)
   11a9e:	|  |  |  |     |      jsr 11c86 <strcmp>
   11aa4:	|  |  |  |     |      addq.l #8,sp
   11aa6:	|  |  |  |     |      tst.l d0
   11aa8:	|  |  |  |     +----- bne.s 11ac0 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   11aaa:	|  |  |  |     |      move.l sp,d0
   11aac:	|  |  |  |     |      addq.l #8,d0
   11aae:	|  |  |  |     |      move.l d0,-(sp)
   11ab0:	|  |  |  |     |      jsr 11b76 <stringToInt>
   11ab6:	|  |  |  |     |      addq.l #4,sp
   11ab8:	|  |  |  |     |      move.l d0,d0
   11aba:	|  |  |  |     |      move.w d0,19c96 <gameSettings+0x16>
					}
				}
				here = 0;
   11ac0:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   11ac4:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   11ac8:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   11acc:	|  |  |  |            clr.b 8(sp)
				break;
   11ad0:	|  |  |  |  /-------- bra.s 11b48 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   11ad2:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   11ad8:	|  |  |     |         clr.b 571(sp)
				break;
   11adc:	|  |  |     +-------- bra.s 11b48 <readIniFile+0x358>

				default:
				if (doingSecond) {
   11ade:	|  |  \-----|-------> tst.w 566(sp)
   11ae2:	|  |        |  /----- beq.s 11b16 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   11ae4:	|  |        |  |      move.b 571(sp),d0
   11ae8:	|  |        |  |      move.b d0,d1
   11aea:	|  |        |  |      addq.b #1,d1
   11aec:	|  |        |  |      move.b d1,571(sp)
   11af0:	|  |        |  |      move.b d0,d0
   11af2:	|  |        |  |      andi.l #255,d0
   11af8:	|  |        |  |      lea 572(sp),a0
   11afc:	|  |        |  |      adda.l d0,a0
   11afe:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   11b04:	|  |        |  |      moveq #0,d0
   11b06:	|  |        |  |      move.b 571(sp),d0
   11b0a:	|  |        |  |      lea 572(sp),a0
   11b0e:	|  |        |  |      adda.l d0,a0
   11b10:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   11b14:	|  |        |  |  /-- bra.s 11b46 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   11b16:	|  |        |  \--|-> move.b 571(sp),d0
   11b1a:	|  |        |     |   move.b d0,d1
   11b1c:	|  |        |     |   addq.b #1,d1
   11b1e:	|  |        |     |   move.b d1,571(sp)
   11b22:	|  |        |     |   move.b d0,d0
   11b24:	|  |        |     |   andi.l #255,d0
   11b2a:	|  |        |     |   lea 572(sp),a0
   11b2e:	|  |        |     |   adda.l d0,a0
   11b30:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   11b36:	|  |        |     |   moveq #0,d0
   11b38:	|  |        |     |   move.b 571(sp),d0
   11b3c:	|  |        |     |   lea 572(sp),a0
   11b40:	|  |        |     |   adda.l d0,a0
   11b42:	|  |        |     |   clr.b -307(a0)
				break;
   11b46:	|  |        |     \-> nop
			}
		} while (keepGoing);
   11b48:	|  |        \-------> tst.w 568(sp)
   11b4c:	|  \----------------- bne.w 118e0 <readIniFile+0xf0>

		Close(fp);
   11b50:	|                     move.l 546(sp),526(sp)
   11b56:	|                     move.l 19b58 <DOSBase>,d0
   11b5c:	|                     movea.l d0,a6
   11b5e:	|                     move.l 526(sp),d1
   11b62:	|                     jsr -36(a6)
   11b66:	|                     move.l d0,522(sp)
	}
}
   11b6a:	\-------------------> nop
   11b6c:	                      move.l (sp)+,d2
   11b6e:	                      movea.l (sp)+,a6
   11b70:	                      lea 564(sp),sp
   11b74:	                      rts

00011b76 <stringToInt>:

unsigned int stringToInt (char * s) {
   11b76:	             subq.l #8,sp
	int i = 0;
   11b78:	             clr.l 4(sp)
	BOOL negative = FALSE;
   11b7c:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   11b80:	/----------> movea.l 12(sp),a0
   11b84:	|            move.b (a0),d0
   11b86:	|            cmpi.b #47,d0
   11b8a:	|        /-- ble.s 11bc2 <stringToInt+0x4c>
   11b8c:	|        |   movea.l 12(sp),a0
   11b90:	|        |   move.b (a0),d0
   11b92:	|        |   cmpi.b #57,d0
   11b96:	|        +-- bgt.s 11bc2 <stringToInt+0x4c>
			i *= 10;
   11b98:	|        |   move.l 4(sp),d1
   11b9c:	|        |   move.l d1,d0
   11b9e:	|        |   add.l d0,d0
   11ba0:	|        |   add.l d0,d0
   11ba2:	|        |   add.l d1,d0
   11ba4:	|        |   add.l d0,d0
   11ba6:	|        |   move.l d0,4(sp)
			i += *s - '0';
   11baa:	|        |   movea.l 12(sp),a0
   11bae:	|        |   move.b (a0),d0
   11bb0:	|        |   ext.w d0
   11bb2:	|        |   movea.w d0,a0
   11bb4:	|        |   moveq #-48,d0
   11bb6:	|        |   add.l a0,d0
   11bb8:	|        |   add.l d0,4(sp)
			s ++;
   11bbc:	|        |   addq.l #1,12(sp)
   11bc0:	|  /-----|-- bra.s 11bfa <stringToInt+0x84>
		} else if (*s == '-') {
   11bc2:	|  |     \-> movea.l 12(sp),a0
   11bc6:	|  |         move.b (a0),d0
   11bc8:	|  |         cmpi.b #45,d0
   11bcc:	|  |     /-- bne.s 11be6 <stringToInt+0x70>
			negative = ! negative;
   11bce:	|  |     |   tst.w 2(sp)
   11bd2:	|  |     |   seq d0
   11bd4:	|  |     |   neg.b d0
   11bd6:	|  |     |   move.b d0,d0
   11bd8:	|  |     |   andi.w #255,d0
   11bdc:	|  |     |   move.w d0,2(sp)
			s++;
   11be0:	|  |     |   addq.l #1,12(sp)
   11be4:	+--|-----|-- bra.s 11b80 <stringToInt+0xa>
		} else {
			if (negative)
   11be6:	|  |     \-> tst.w 2(sp)
   11bea:	|  |     /-- beq.s 11bf4 <stringToInt+0x7e>
				return -i;
   11bec:	|  |     |   move.l 4(sp),d0
   11bf0:	|  |     |   neg.l d0
   11bf2:	|  |  /--|-- bra.s 11bfc <stringToInt+0x86>
			return i;
   11bf4:	|  |  |  \-> move.l 4(sp),d0
   11bf8:	|  |  +----- bra.s 11bfc <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   11bfa:	\--\--|----X bra.s 11b80 <stringToInt+0xa>
		}
	}
   11bfc:	      \----> addq.l #8,sp
   11bfe:	             rts

00011c00 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
   11c00:	    lea -28(sp),sp
   11c04:	    move.l a6,-(sp)
   11c06:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   11c08:	    pea 17056 <PutChar+0x1ee4>
   11c0e:	    jsr 14822 <KPrintF>
   11c14:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   11c16:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   11c1a:	    move.l 40(sp),30(sp)
   11c20:	    move.l #1005,26(sp)
   11c28:	    move.l 19b58 <DOSBase>,d0
   11c2e:	    movea.l d0,a6
   11c30:	    move.l 30(sp),d1
   11c34:	    move.l 26(sp),d2
   11c38:	    jsr -30(a6)
   11c3c:	    move.l d0,22(sp)
   11c40:	    move.l 22(sp),d0
   11c44:	    move.l d0,18(sp)
	if (tester) {
   11c48:	/-- beq.s 11c78 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   11c4a:	|   pea 17070 <PutChar+0x1efe>
   11c50:	|   jsr 14822 <KPrintF>
   11c56:	|   addq.l #4,sp
		retval = 1;
   11c58:	|   move.b #1,35(sp)
		Close(tester);
   11c5e:	|   move.l 18(sp),14(sp)
   11c64:	|   move.l 19b58 <DOSBase>,d0
   11c6a:	|   movea.l d0,a6
   11c6c:	|   move.l 14(sp),d1
   11c70:	|   jsr -36(a6)
   11c74:	|   move.l d0,10(sp)
	}
	return retval;
   11c78:	\-> move.b 35(sp),d0
   11c7c:	    move.l (sp)+,d2
   11c7e:	    movea.l (sp)+,a6
   11c80:	    lea 28(sp),sp
   11c84:	    rts

00011c86 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   11c86:	   /-- bra.s 11c90 <strcmp+0xa>
    {
        s1++;
   11c88:	/--|-> addq.l #1,4(sp)
        s2++;
   11c8c:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   11c90:	|  \-> movea.l 4(sp),a0
   11c94:	|      move.b (a0),d0
   11c96:	|  /-- beq.s 11ca8 <strcmp+0x22>
   11c98:	|  |   movea.l 4(sp),a0
   11c9c:	|  |   move.b (a0),d1
   11c9e:	|  |   movea.l 8(sp),a0
   11ca2:	|  |   move.b (a0),d0
   11ca4:	|  |   cmp.b d1,d0
   11ca6:	\--|-- beq.s 11c88 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   11ca8:	   \-> movea.l 4(sp),a0
   11cac:	       move.b (a0),d0
   11cae:	       moveq #0,d1
   11cb0:	       move.b d0,d1
   11cb2:	       movea.l 8(sp),a0
   11cb6:	       move.b (a0),d0
   11cb8:	       move.b d0,d0
   11cba:	       andi.l #255,d0
   11cc0:	       sub.l d0,d1
   11cc2:	       move.l d1,d0
}
   11cc4:	       rts

00011cc6 <strlen>:

long unsigned int strlen (const char *s) 
{  
   11cc6:	       subq.l #4,sp
	long unsigned int i = 0;
   11cc8:	       clr.l (sp)
	while(s[i]) i++; 
   11cca:	   /-- bra.s 11cce <strlen+0x8>
   11ccc:	/--|-> addq.l #1,(sp)
   11cce:	|  \-> movea.l 8(sp),a0
   11cd2:	|      adda.l (sp),a0
   11cd4:	|      move.b (a0),d0
   11cd6:	\----- bne.s 11ccc <strlen+0x6>
	return(i);
   11cd8:	       move.l (sp),d0
}
   11cda:	       addq.l #4,sp
   11cdc:	       rts

00011cde <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   11cde:	    nop
   11ce0:	/-> move.l 8(sp),d0
   11ce4:	|   move.l d0,d1
   11ce6:	|   addq.l #1,d1
   11ce8:	|   move.l d1,8(sp)
   11cec:	|   movea.l 4(sp),a0
   11cf0:	|   lea 1(a0),a1
   11cf4:	|   move.l a1,4(sp)
   11cf8:	|   movea.l d0,a1
   11cfa:	|   move.b (a1),d0
   11cfc:	|   move.b d0,(a0)
   11cfe:	|   move.b (a0),d0
   11d00:	\-- bne.s 11ce0 <strcpy+0x2>
}
   11d02:	    nop
   11d04:	    rts

00011d06 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   11d06:	    lea -20(sp),sp
   11d0a:	    move.l a6,-(sp)
   11d0c:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   11d0e:	    move.l 32(sp),-(sp)
   11d12:	    jsr 11cc6 <strlen>
   11d18:	    addq.l #4,sp
   11d1a:	    move.l d0,d2
   11d1c:	    move.l 36(sp),-(sp)
   11d20:	    jsr 11cc6 <strlen>
   11d26:	    addq.l #4,sp
   11d28:	    add.l d2,d0
   11d2a:	    move.l d0,d1
   11d2c:	    addq.l #1,d1
   11d2e:	    move.l d1,20(sp)
   11d32:	    clr.l 16(sp)
   11d36:	    move.l 19b50 <SysBase>,d0
   11d3c:	    movea.l d0,a6
   11d3e:	    move.l 20(sp),d0
   11d42:	    move.l 16(sp),d1
   11d46:	    jsr -684(a6)
   11d4a:	    move.l d0,12(sp)
   11d4e:	    move.l 12(sp),d0
   11d52:	    move.l d0,8(sp)
	char * t = newString;
   11d56:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   11d5c:	    nop
   11d5e:	/-> move.l 32(sp),d0
   11d62:	|   move.l d0,d1
   11d64:	|   addq.l #1,d1
   11d66:	|   move.l d1,32(sp)
   11d6a:	|   movea.l 24(sp),a0
   11d6e:	|   lea 1(a0),a1
   11d72:	|   move.l a1,24(sp)
   11d76:	|   movea.l d0,a1
   11d78:	|   move.b (a1),d0
   11d7a:	|   move.b d0,(a0)
   11d7c:	|   move.b (a0),d0
   11d7e:	\-- bne.s 11d5e <joinStrings+0x58>
	t--;
   11d80:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   11d84:	    nop
   11d86:	/-> move.l 36(sp),d0
   11d8a:	|   move.l d0,d1
   11d8c:	|   addq.l #1,d1
   11d8e:	|   move.l d1,36(sp)
   11d92:	|   movea.l 24(sp),a0
   11d96:	|   lea 1(a0),a1
   11d9a:	|   move.l a1,24(sp)
   11d9e:	|   movea.l d0,a1
   11da0:	|   move.b (a1),d0
   11da2:	|   move.b d0,(a0)
   11da4:	|   move.b (a0),d0
   11da6:	\-- bne.s 11d86 <joinStrings+0x80>

	return newString;
   11da8:	    move.l 8(sp),d0
}
   11dac:	    move.l (sp)+,d2
   11dae:	    movea.l (sp)+,a6
   11db0:	    lea 20(sp),sp
   11db4:	    rts

00011db6 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   11db6:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   11dba:	       moveq #10,d0
   11dbc:	       cmp.l 28(sp),d0
   11dc0:	   /-- bne.s 11dde <itoa+0x28>
   11dc2:	   |   tst.l 20(sp)
   11dc6:	   +-- bge.s 11dde <itoa+0x28>
        *str++ = '-';
   11dc8:	   |   move.l 24(sp),d0
   11dcc:	   |   move.l d0,d1
   11dce:	   |   addq.l #1,d1
   11dd0:	   |   move.l d1,24(sp)
   11dd4:	   |   movea.l d0,a0
   11dd6:	   |   move.b #45,(a0)
        value *= -1;
   11dda:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   11dde:	   \-> move.l 24(sp),12(sp)
   11de4:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   11dea:	   /-> move.l 20(sp),d0
   11dee:	   |   move.l 28(sp),-(sp)
   11df2:	   |   move.l d0,-(sp)
   11df4:	   |   jsr 15108 <__modsi3>
   11dfa:	   |   addq.l #8,sp
   11dfc:	   |   movea.l d0,a1
   11dfe:	   |   move.l 12(sp),d0
   11e02:	   |   move.l d0,d1
   11e04:	   |   addq.l #1,d1
   11e06:	   |   move.l d1,12(sp)
   11e0a:	   |   lea 17088 <PutChar+0x1f16>,a0
   11e10:	   |   move.b (0,a1,a0.l),d1
   11e14:	   |   movea.l d0,a0
   11e16:	   |   move.b d1,(a0)
        value /= base;
   11e18:	   |   move.l 28(sp),-(sp)
   11e1c:	   |   move.l 24(sp),-(sp)
   11e20:	   |   jsr 150da <__divsi3>
   11e26:	   |   addq.l #8,sp
   11e28:	   |   move.l d0,20(sp)
    } while (value);
   11e2c:	   \-- bne.s 11dea <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   11e2e:	       move.l 12(sp),d0
   11e32:	       move.l d0,d1
   11e34:	       subq.l #1,d1
   11e36:	       move.l d1,12(sp)
   11e3a:	       movea.l d0,a0
   11e3c:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   11e3e:	       move.l 4(sp),8(sp)
   11e44:	   /-- bra.s 11e6a <itoa+0xb4>
        char temp = *low;
   11e46:	/--|-> movea.l 8(sp),a0
   11e4a:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   11e4e:	|  |   movea.l 12(sp),a0
   11e52:	|  |   move.b (a0),d0
   11e54:	|  |   movea.l 8(sp),a0
   11e58:	|  |   move.b d0,(a0)
        *ptr = temp;
   11e5a:	|  |   movea.l 12(sp),a0
   11e5e:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   11e62:	|  |   addq.l #1,8(sp)
   11e66:	|  |   subq.l #1,12(sp)
   11e6a:	|  \-> move.l 8(sp),d0
   11e6e:	|      cmp.l 12(sp),d0
   11e72:	\----- bcs.s 11e46 <itoa+0x90>
    }
    return rc;
   11e74:	       move.l 4(sp),d0
}
   11e78:	       lea 16(sp),sp
   11e7c:	       rts

00011e7e <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   11e7e:	                            lea -40(sp),sp
   11e82:	                            move.l d2,-(sp)
    char* s = str;
   11e84:	                            move.l 48(sp),40(sp)
    const char* p = format;
   11e8a:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   11e90:	   /----------------------- bra.w 11fc4 <vsprintf2+0x146>
        if (*p == '%') {
   11e94:	/--|----------------------> movea.l 36(sp),a0
   11e98:	|  |                        move.b (a0),d0
   11e9a:	|  |                        cmpi.b #37,d0
   11e9e:	|  |  /-------------------- bne.w 11faa <vsprintf2+0x12c>
            switch (*++p) {
   11ea2:	|  |  |                     addq.l #1,36(sp)
   11ea6:	|  |  |                     movea.l 36(sp),a0
   11eaa:	|  |  |                     move.b (a0),d0
   11eac:	|  |  |                     ext.w d0
   11eae:	|  |  |                     movea.w d0,a0
   11eb0:	|  |  |                     moveq #115,d0
   11eb2:	|  |  |                     cmp.l a0,d0
   11eb4:	|  |  |           /-------- beq.s 11f2c <vsprintf2+0xae>
   11eb6:	|  |  |           |         moveq #115,d1
   11eb8:	|  |  |           |         cmp.l a0,d1
   11eba:	|  |  |  /--------|-------- blt.w 11f92 <vsprintf2+0x114>
   11ebe:	|  |  |  |        |         moveq #99,d2
   11ec0:	|  |  |  |        |         cmp.l a0,d2
   11ec2:	|  |  |  |  /-----|-------- beq.w 11f6a <vsprintf2+0xec>
   11ec6:	|  |  |  |  |     |         moveq #100,d0
   11ec8:	|  |  |  |  |     |         cmp.l a0,d0
   11eca:	|  |  |  +--|-----|-------- bne.w 11f92 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   11ece:	|  |  |  |  |     |         addq.l #4,56(sp)
   11ed2:	|  |  |  |  |     |         movea.l 56(sp),a0
   11ed6:	|  |  |  |  |     |         move.l (a0),d0
   11ed8:	|  |  |  |  |     |         move.l d0,d1
   11eda:	|  |  |  |  |     |         subq.l #1,d1
   11edc:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   11ee0:	|  |  |  |  |     |         pea a <_start+0xa>
   11ee4:	|  |  |  |  |     |         lea 8(sp),a0
   11ee8:	|  |  |  |  |     |         move.l a0,-(sp)
   11eea:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   11eee:	|  |  |  |  |     |         jsr 11db6 <itoa>
   11ef4:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   11ef8:	|  |  |  |  |     |         lea 44(sp),a0
   11efc:	|  |  |  |  |     |         lea -40(a0),a0
   11f00:	|  |  |  |  |     |         move.l a0,28(sp)
   11f04:	|  |  |  |  |     |     /-- bra.s 11f20 <vsprintf2+0xa2>
                        *s++ = *b;
   11f06:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   11f0a:	|  |  |  |  |     |  |  |   move.l d0,d1
   11f0c:	|  |  |  |  |     |  |  |   addq.l #1,d1
   11f0e:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   11f12:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   11f16:	|  |  |  |  |     |  |  |   move.b (a0),d1
   11f18:	|  |  |  |  |     |  |  |   movea.l d0,a0
   11f1a:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   11f1c:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   11f20:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   11f24:	|  |  |  |  |     |  |      move.b (a0),d0
   11f26:	|  |  |  |  |     |  \----- bne.s 11f06 <vsprintf2+0x88>
                    }
                    break;
   11f28:	|  |  |  |  |  /--|-------- bra.w 11fc0 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   11f2c:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   11f30:	|  |  |  |  |  |            movea.l 56(sp),a0
   11f34:	|  |  |  |  |  |            move.l (a0),d0
   11f36:	|  |  |  |  |  |            move.l d0,d1
   11f38:	|  |  |  |  |  |            subq.l #1,d1
   11f3a:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   11f3e:	|  |  |  |  |  |        /-- bra.s 11f60 <vsprintf2+0xe2>
                        *s++ = *sval++;
   11f40:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   11f44:	|  |  |  |  |  |     |  |   move.l d1,d2
   11f46:	|  |  |  |  |  |     |  |   addq.l #1,d2
   11f48:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   11f4c:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   11f50:	|  |  |  |  |  |     |  |   move.l d0,d2
   11f52:	|  |  |  |  |  |     |  |   addq.l #1,d2
   11f54:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   11f58:	|  |  |  |  |  |     |  |   movea.l d1,a0
   11f5a:	|  |  |  |  |  |     |  |   move.b (a0),d1
   11f5c:	|  |  |  |  |  |     |  |   movea.l d0,a0
   11f5e:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   11f60:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   11f64:	|  |  |  |  |  |     |      move.b (a0),d0
   11f66:	|  |  |  |  |  |     \----- bne.s 11f40 <vsprintf2+0xc2>
                    }
                    break;
   11f68:	|  |  |  |  |  +----------- bra.s 11fc0 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   11f6a:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   11f6e:	|  |  |  |     |            movea.l 56(sp),a0
   11f72:	|  |  |  |     |            move.l (a0),d0
   11f74:	|  |  |  |     |            move.l d0,d1
   11f76:	|  |  |  |     |            subq.l #1,d1
   11f78:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   11f7c:	|  |  |  |     |            move.l 40(sp),d0
   11f80:	|  |  |  |     |            move.l d0,d2
   11f82:	|  |  |  |     |            addq.l #1,d2
   11f84:	|  |  |  |     |            move.l d2,40(sp)
   11f88:	|  |  |  |     |            move.l 24(sp),d1
   11f8c:	|  |  |  |     |            movea.l d0,a0
   11f8e:	|  |  |  |     |            move.b d1,(a0)
                    break;
   11f90:	|  |  |  |     +----------- bra.s 11fc0 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   11f92:	|  |  |  \-----|----------> move.l 40(sp),d0
   11f96:	|  |  |        |            move.l d0,d1
   11f98:	|  |  |        |            addq.l #1,d1
   11f9a:	|  |  |        |            move.l d1,40(sp)
   11f9e:	|  |  |        |            movea.l 36(sp),a0
   11fa2:	|  |  |        |            move.b (a0),d1
   11fa4:	|  |  |        |            movea.l d0,a0
   11fa6:	|  |  |        |            move.b d1,(a0)
                    break;
   11fa8:	|  |  |        +----------- bra.s 11fc0 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   11faa:	|  |  \--------|----------> move.l 40(sp),d0
   11fae:	|  |           |            move.l d0,d1
   11fb0:	|  |           |            addq.l #1,d1
   11fb2:	|  |           |            move.l d1,40(sp)
   11fb6:	|  |           |            movea.l 36(sp),a0
   11fba:	|  |           |            move.b (a0),d1
   11fbc:	|  |           |            movea.l d0,a0
   11fbe:	|  |           |            move.b d1,(a0)
        }
        p++;
   11fc0:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   11fc4:	|  \----------------------> movea.l 36(sp),a0
   11fc8:	|                           move.b (a0),d0
   11fca:	\-------------------------- bne.w 11e94 <vsprintf2+0x16>
    }
    *s = '\0';
   11fce:	                            movea.l 40(sp),a0
   11fd2:	                            clr.b (a0)
    return s - str;
   11fd4:	                            move.l 40(sp),d0
   11fd8:	                            sub.l 48(sp),d0
}
   11fdc:	                            move.l (sp)+,d2
   11fde:	                            lea 40(sp),sp
   11fe2:	                            rts

00011fe4 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   11fe4:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   11fe6:	moveq #16,d0
   11fe8:	add.l sp,d0
   11fea:	move.l d0,d1
   11fec:	addq.l #4,d1
   11fee:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   11ff2:	move.l 16(sp),d0
   11ff6:	move.l 4(sp),-(sp)
   11ffa:	move.l d0,-(sp)
   11ffc:	move.l 20(sp),-(sp)
   12000:	jsr 11e7e <vsprintf2>
   12006:	lea 12(sp),sp
   1200a:	move.l d0,(sp)
    va_end(args);
   1200c:	clr.l 4(sp)

    return done;
   12010:	move.l (sp),d0
}
   12012:	addq.l #8,sp
   12014:	rts

00012016 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   12016:	       lea -20(sp),sp
   1201a:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1201c:	       moveq #12,d0
   1201e:	       move.l d0,20(sp)
   12022:	       clr.l 16(sp)
   12026:	       move.l 19b50 <SysBase>,d0
   1202c:	       movea.l d0,a6
   1202e:	       move.l 20(sp),d0
   12032:	       move.l 16(sp),d1
   12036:	       jsr -684(a6)
   1203a:	       move.l d0,12(sp)
   1203e:	       move.l 12(sp),d0
   12042:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   12046:	   /-- bne.s 1204c <addVarToStack+0x36>
   12048:	   |   clr.w d0
   1204a:	/--|-- bra.s 12094 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   1204c:	|  \-> move.l 8(sp),d0
   12050:	|      move.l d0,-(sp)
   12052:	|      move.l 32(sp),-(sp)
   12056:	|      jsr 12b78 <copyMain>
   1205c:	|      addq.l #8,sp
   1205e:	|      tst.w d0
   12060:	|  /-- bne.s 1207c <addVarToStack+0x66>
        FreeVec(newStack);
   12062:	|  |   move.l 8(sp),4(sp)
   12068:	|  |   move.l 19b50 <SysBase>,d0
   1206e:	|  |   movea.l d0,a6
   12070:	|  |   movea.l 4(sp),a1
   12074:	|  |   jsr -690(a6)
        return FALSE;
   12078:	|  |   clr.w d0
   1207a:	+--|-- bra.s 12094 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   1207c:	|  \-> movea.l 32(sp),a0
   12080:	|      move.l (a0),d0
   12082:	|      movea.l 8(sp),a0
   12086:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1208a:	|      movea.l 32(sp),a0
   1208e:	|      move.l 8(sp),(a0)
    return TRUE;
   12092:	|      moveq #1,d0
}
   12094:	\----> movea.l (sp)+,a6
   12096:	       lea 20(sp),sp
   1209a:	       rts

0001209c <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   1209c:	       lea -16(sp),sp
   120a0:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   120a2:	       moveq #12,d0
   120a4:	       move.l d0,16(sp)
   120a8:	       clr.l 12(sp)
   120ac:	       move.l 19b50 <SysBase>,d0
   120b2:	       movea.l d0,a6
   120b4:	       move.l 16(sp),d0
   120b8:	       move.l 12(sp),d1
   120bc:	       jsr -684(a6)
   120c0:	       move.l d0,8(sp)
   120c4:	       move.l 8(sp),d0
   120c8:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   120cc:	   /-- bne.s 120d2 <addVarToStackQuick+0x36>
   120ce:	   |   clr.w d0
   120d0:	/--|-- bra.s 12108 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   120d2:	|  \-> move.l 4(sp),d0
   120d6:	|      pea 8 <_start+0x8>
   120da:	|      move.l 28(sp),-(sp)
   120de:	|      move.l d0,-(sp)
   120e0:	|      jsr 147d6 <memcpy>
   120e6:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   120ea:	|      movea.l 24(sp),a0
   120ee:	|      clr.l (a0)

    newStack->next = *thisStack;
   120f0:	|      movea.l 28(sp),a0
   120f4:	|      move.l (a0),d0
   120f6:	|      movea.l 4(sp),a0
   120fa:	|      move.l d0,8(a0)
    *thisStack = newStack;
   120fe:	|      movea.l 28(sp),a0
   12102:	|      move.l 4(sp),(a0)
    return TRUE;
   12106:	|      moveq #1,d0
}
   12108:	\----> movea.l (sp)+,a6
   1210a:	       lea 16(sp),sp
   1210e:	       rts

00012110 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   12110:	       lea -16(sp),sp
   12114:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   12116:	       movea.l 24(sp),a0
   1211a:	       move.l (a0),d0
   1211c:	       moveq #1,d1
   1211e:	       cmp.l d0,d1
   12120:	   /-- bne.s 1214a <addVariablesInSecond+0x3a>
   12122:	   |   movea.l 28(sp),a0
   12126:	   |   move.l (a0),d0
   12128:	   |   moveq #1,d1
   1212a:	   |   cmp.l d0,d1
   1212c:	   +-- bne.s 1214a <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   1212e:	   |   movea.l 28(sp),a0
   12132:	   |   move.l 4(a0),d1
   12136:	   |   movea.l 24(sp),a0
   1213a:	   |   move.l 4(a0),d0
   1213e:	   |   add.l d1,d0
   12140:	   |   movea.l 28(sp),a0
   12144:	   |   move.l d0,4(a0)
   12148:	/--|-- bra.s 121c4 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   1214a:	|  \-> move.l 24(sp),-(sp)
   1214e:	|      jsr 12db0 <getTextFromAnyVar>
   12154:	|      addq.l #4,sp
   12156:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   1215a:	|      move.l 28(sp),-(sp)
   1215e:	|      jsr 12db0 <getTextFromAnyVar>
   12164:	|      addq.l #4,sp
   12166:	|      move.l d0,12(sp)

		unlinkVar(var2);
   1216a:	|      move.l 28(sp),-(sp)
   1216e:	|      jsr 12a28 <unlinkVar>
   12174:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   12176:	|      move.l 12(sp),-(sp)
   1217a:	|      move.l 20(sp),-(sp)
   1217e:	|      jsr 11d06 <joinStrings>
   12184:	|      addq.l #8,sp
   12186:	|      movea.l 28(sp),a0
   1218a:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   1218e:	|      movea.l 28(sp),a0
   12192:	|      moveq #3,d0
   12194:	|      move.l d0,(a0)
		FreeVec(string1);
   12196:	|      move.l 16(sp),8(sp)
   1219c:	|      move.l 19b50 <SysBase>,d0
   121a2:	|      movea.l d0,a6
   121a4:	|      movea.l 8(sp),a1
   121a8:	|      jsr -690(a6)
		FreeVec(string2);
   121ac:	|      move.l 12(sp),4(sp)
   121b2:	|      move.l 19b50 <SysBase>,d0
   121b8:	|      movea.l d0,a6
   121ba:	|      movea.l 4(sp),a1
   121be:	|      jsr -690(a6)
	}
}
   121c2:	|      nop
   121c4:	\----> nop
   121c6:	       movea.l (sp)+,a6
   121c8:	       lea 16(sp),sp
   121cc:	       rts

000121ce <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   121ce:	movea.l 8(sp),a0
   121d2:	move.l 4(a0),-(sp)
   121d6:	move.l (a0),-(sp)
   121d8:	movea.l 12(sp),a0
   121dc:	move.l 4(a0),-(sp)
   121e0:	move.l (a0),-(sp)
   121e2:	jsr 12204 <compareVars>
   121e8:	lea 16(sp),sp
   121ec:	move.l d0,-(sp)
   121ee:	pea 1 <_start+0x1>
   121f2:	move.l 16(sp),-(sp)
   121f6:	jsr 130cc <setVariable>
   121fc:	lea 12(sp),sp
}
   12200:	nop
   12202:	rts

00012204 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   12204:	       subq.l #4,sp
	int re = 0;
   12206:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   12208:	       move.l 8(sp),d1
   1220c:	       move.l 16(sp),d0
   12210:	       cmp.l d1,d0
   12212:	/----- bne.w 122da <compareVars+0xd6>
		switch (var1.varType) {
   12216:	|      move.l 8(sp),d0
   1221a:	|      moveq #9,d1
   1221c:	|      cmp.l d0,d1
   1221e:	|  /-- bcs.w 122c2 <compareVars+0xbe>
   12222:	|  |   add.l d0,d0
   12224:	|  |   movea.l d0,a0
   12226:	|  |   adda.l #74290,a0
   1222c:	|  |   move.w (a0),d0
   1222e:	|  |   jmp (12232 <compareVars+0x2e>,pc,d0.w)
   12232:	|  |   ori.b #-112,(a4)
   12236:	|  |   ori.l #5243024,(a0)
   1223c:	|  |   ori.l #7733392,(a0)
   12242:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   12248:	|  |   move.l d0,(sp)
			break;
   1224a:	+--|-- bra.w 122da <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   1224e:	|  |   move.l 12(sp),d1
   12252:	|  |   move.l 20(sp),d0
   12256:	|  |   cmp.l d1,d0
   12258:	|  |   seq d0
   1225a:	|  |   neg.b d0
   1225c:	|  |   move.b d0,d0
   1225e:	|  |   andi.l #255,d0
   12264:	|  |   move.l d0,(sp)
			break;
   12266:	+--|-- bra.s 122da <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   12268:	|  |   move.l 12(sp),d1
   1226c:	|  |   move.l 20(sp),d0
   12270:	|  |   cmp.l d1,d0
   12272:	|  |   seq d0
   12274:	|  |   neg.b d0
   12276:	|  |   move.b d0,d0
   12278:	|  |   andi.l #255,d0
   1227e:	|  |   move.l d0,(sp)
			break;
   12280:	+--|-- bra.s 122da <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   12282:	|  |   move.l 20(sp),d1
   12286:	|  |   move.l 12(sp),d0
   1228a:	|  |   move.l d1,-(sp)
   1228c:	|  |   move.l d0,-(sp)
   1228e:	|  |   jsr 11c86 <strcmp>
   12294:	|  |   addq.l #8,sp
   12296:	|  |   tst.l d0
   12298:	|  |   seq d0
   1229a:	|  |   neg.b d0
   1229c:	|  |   move.b d0,d0
   1229e:	|  |   andi.l #255,d0
   122a4:	|  |   move.l d0,(sp)
			break;
   122a6:	+--|-- bra.s 122da <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   122a8:	|  |   move.l 12(sp),d1
   122ac:	|  |   move.l 20(sp),d0
   122b0:	|  |   cmp.l d1,d0
   122b2:	|  |   seq d0
   122b4:	|  |   neg.b d0
   122b6:	|  |   move.b d0,d0
   122b8:	|  |   andi.l #255,d0
   122be:	|  |   move.l d0,(sp)
			break;
   122c0:	+--|-- bra.s 122da <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   122c2:	|  \-> move.l 12(sp),d1
   122c6:	|      move.l 20(sp),d0
   122ca:	|      cmp.l d1,d0
   122cc:	|      seq d0
   122ce:	|      neg.b d0
   122d0:	|      move.b d0,d0
   122d2:	|      andi.l #255,d0
   122d8:	|      move.l d0,(sp)
		}
	}
	return re;
   122da:	\----> move.l (sp),d0
}
   122dc:	       addq.l #4,sp
   122de:	       rts

000122e0 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   122e0:	             lea -16(sp),sp
   122e4:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   122e6:	             movea.l 28(sp),a0
   122ea:	             moveq #6,d0
   122ec:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   122ee:	             moveq #12,d0
   122f0:	             move.l d0,12(sp)
   122f4:	             clr.l 8(sp)
   122f8:	             move.l 19b50 <SysBase>,d0
   122fe:	             movea.l d0,a6
   12300:	             move.l 12(sp),d0
   12304:	             move.l 8(sp),d1
   12308:	             jsr -684(a6)
   1230c:	             move.l d0,4(sp)
   12310:	             move.l 4(sp),d0
   12314:	             movea.l 28(sp),a0
   12318:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1231c:	             movea.l 28(sp),a0
   12320:	             move.l 4(a0),d0
   12324:	         /-- bne.s 1232c <copyStack+0x4c>
   12326:	         |   clr.w d0
   12328:	/--------|-- bra.w 123ae <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1232c:	|        \-> movea.l 28(sp),a0
   12330:	|            movea.l 4(a0),a0
   12334:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   12336:	|            movea.l 28(sp),a0
   1233a:	|            movea.l 4(a0),a0
   1233e:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   12342:	|            movea.l 28(sp),a0
   12346:	|            movea.l 4(a0),a0
   1234a:	|            moveq #1,d0
   1234c:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   12350:	|            movea.l 24(sp),a0
   12354:	|            movea.l 4(a0),a0
   12358:	|            move.l (a0),16(sp)

	while (a) {
   1235c:	|     /----- bra.s 123a6 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   1235e:	|  /--|----> movea.l 28(sp),a0
   12362:	|  |  |      move.l 4(a0),d0
   12366:	|  |  |      move.l d0,d1
   12368:	|  |  |      move.l 16(sp),d0
   1236c:	|  |  |      move.l d1,-(sp)
   1236e:	|  |  |      move.l d0,-(sp)
   12370:	|  |  |      jsr 12016 <addVarToStack>
   12376:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   12378:	|  |  |      movea.l 28(sp),a0
   1237c:	|  |  |      movea.l 4(a0),a0
   12380:	|  |  |      move.l 4(a0),d0
   12384:	|  |  |  /-- bne.s 1239c <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   12386:	|  |  |  |   movea.l 28(sp),a0
   1238a:	|  |  |  |   movea.l 4(a0),a1
   1238e:	|  |  |  |   movea.l 28(sp),a0
   12392:	|  |  |  |   movea.l 4(a0),a0
   12396:	|  |  |  |   move.l (a1),d0
   12398:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   1239c:	|  |  |  \-> movea.l 16(sp),a0
   123a0:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   123a6:	|  |  \----> tst.l 16(sp)
   123aa:	|  \-------- bne.s 1235e <copyStack+0x7e>
	}

	return TRUE;
   123ac:	|            moveq #1,d0
}
   123ae:	\----------> movea.l (sp)+,a6
   123b0:	             lea 16(sp),sp
   123b4:	             rts

000123b6 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   123b6:	                lea -20(sp),sp
   123ba:	                move.l a6,-(sp)
   123bc:	                move.l 36(sp),d0
   123c0:	                move.w d0,d0
   123c2:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   123c6:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   123cc:	                clr.l 16(sp)

    while (*huntVar) {
   123d0:	   /----------- bra.s 1244e <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   123d2:	/--|----------> movea.l 20(sp),a0
   123d6:	|  |            movea.l (a0),a0
   123d8:	|  |            movea.l 28(sp),a1
   123dc:	|  |            move.l 4(a1),-(sp)
   123e0:	|  |            move.l (a1),-(sp)
   123e2:	|  |            move.l 4(a0),-(sp)
   123e6:	|  |            move.l (a0),-(sp)
   123e8:	|  |            jsr 12204 <compareVars>
   123ee:	|  |            lea 16(sp),sp
   123f2:	|  |            tst.l d0
   123f4:	|  |  /-------- beq.s 12440 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   123f6:	|  |  |         movea.l 20(sp),a0
   123fa:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   123fe:	|  |  |         movea.l 12(sp),a0
   12402:	|  |  |         move.l 8(a0),d0
   12406:	|  |  |         movea.l 20(sp),a0
   1240a:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   1240c:	|  |  |         move.l 12(sp),d0
   12410:	|  |  |         move.l d0,-(sp)
   12412:	|  |  |         jsr 12a28 <unlinkVar>
   12418:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1241a:	|  |  |         move.l 12(sp),8(sp)
   12420:	|  |  |         move.l 19b50 <SysBase>,d0
   12426:	|  |  |         movea.l d0,a6
   12428:	|  |  |         movea.l 8(sp),a1
   1242c:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   12430:	|  |  |         tst.w 6(sp)
   12434:	|  |  |     /-- bne.s 1243a <deleteVarFromStack+0x84>
   12436:	|  |  |     |   moveq #1,d0
   12438:	|  |  |  /--|-- bra.s 1245c <deleteVarFromStack+0xa6>
            reply++;
   1243a:	|  |  |  |  \-> addq.l #1,16(sp)
   1243e:	|  +--|--|----- bra.s 1244e <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   12440:	|  |  \--|----> movea.l 20(sp),a0
   12444:	|  |     |      move.l (a0),d0
   12446:	|  |     |      move.l d0,d1
   12448:	|  |     |      addq.l #8,d1
   1244a:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   1244e:	|  \-----|----> movea.l 20(sp),a0
   12452:	|        |      move.l (a0),d0
   12454:	\--------|----- bne.w 123d2 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   12458:	         |      move.l 16(sp),d0
}
   1245c:	         \----> movea.l (sp)+,a6
   1245e:	                lea 20(sp),sp
   12462:	                rts

00012464 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   12464:	       movea.l 4(sp),a0
   12468:	       move.l 4(a0),d0
   1246c:	       cmp.l 8(sp),d0
   12470:	   /-- bhi.s 12476 <fastArrayGetByIndex+0x12>
   12472:	   |   moveq #0,d0
   12474:	/--|-- bra.s 12484 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   12476:	|  \-> movea.l 4(sp),a0
   1247a:	|      move.l (a0),d1
   1247c:	|      move.l 8(sp),d0
   12480:	|      lsl.l #3,d0
   12482:	|      add.l d1,d0
}
   12484:	\----> rts

00012486 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   12486:	                lea -32(sp),sp
   1248a:	                move.l a6,-(sp)
   1248c:	                move.l a2,-(sp)
    struct persona *p = NULL;
   1248e:	                clr.l 36(sp)

    switch (thisVar->varType) {
   12492:	                movea.l 44(sp),a0
   12496:	                move.l (a0),d0
   12498:	                moveq #8,d1
   1249a:	                cmp.l d0,d1
   1249c:	            /-- beq.s 124aa <getCostumeFromVar+0x24>
   1249e:	            |   moveq #9,d1
   124a0:	            |   cmp.l d0,d1
   124a2:	   /--------|-- beq.w 12558 <getCostumeFromVar+0xd2>
   124a6:	/--|--------|-- bra.w 12562 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   124aa:	|  |        \-> moveq #8,d0
   124ac:	|  |            move.l d0,28(sp)
   124b0:	|  |            clr.l 24(sp)
   124b4:	|  |            move.l 19b50 <SysBase>,d0
   124ba:	|  |            movea.l d0,a6
   124bc:	|  |            move.l 28(sp),d0
   124c0:	|  |            move.l 24(sp),d1
   124c4:	|  |            jsr -684(a6)
   124c8:	|  |            move.l d0,20(sp)
   124cc:	|  |            move.l 20(sp),d0
   124d0:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   124d4:	|  |        /-- bne.s 124dc <getCostumeFromVar+0x56>
   124d6:	|  |        |   moveq #0,d0
   124d8:	|  |  /-----|-- bra.w 1258c <getCostumeFromVar+0x106>
            p->numDirections = 1;
   124dc:	|  |  |     \-> movea.l 36(sp),a0
   124e0:	|  |  |         moveq #1,d1
   124e2:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   124e6:	|  |  |         moveq #12,d0
   124e8:	|  |  |         move.l d0,16(sp)
   124ec:	|  |  |         clr.l 12(sp)
   124f0:	|  |  |         move.l 19b50 <SysBase>,d0
   124f6:	|  |  |         movea.l d0,a6
   124f8:	|  |  |         move.l 16(sp),d0
   124fc:	|  |  |         move.l 12(sp),d1
   12500:	|  |  |         jsr -684(a6)
   12504:	|  |  |         move.l d0,8(sp)
   12508:	|  |  |         move.l 8(sp),d0
   1250c:	|  |  |         movea.l 36(sp),a0
   12510:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   12512:	|  |  |         movea.l 36(sp),a0
   12516:	|  |  |         move.l (a0),d0
   12518:	|  |  |     /-- bne.s 1251e <getCostumeFromVar+0x98>
   1251a:	|  |  |     |   moveq #0,d0
   1251c:	|  |  +-----|-- bra.s 1258c <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   1251e:	|  |  |     \-> clr.l 32(sp)
   12522:	|  |  |     /-- bra.s 1254e <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   12524:	|  |  |  /--|-> movea.l 44(sp),a0
   12528:	|  |  |  |  |   move.l 4(a0),d0
   1252c:	|  |  |  |  |   movea.l 36(sp),a0
   12530:	|  |  |  |  |   movea.l (a0),a0
   12532:	|  |  |  |  |   move.l 32(sp),d1
   12536:	|  |  |  |  |   add.l d1,d1
   12538:	|  |  |  |  |   add.l d1,d1
   1253a:	|  |  |  |  |   lea (0,a0,d1.l),a2
   1253e:	|  |  |  |  |   move.l d0,-(sp)
   12540:	|  |  |  |  |   jsr 7824 <copyAnim>
   12546:	|  |  |  |  |   addq.l #4,sp
   12548:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1254a:	|  |  |  |  |   addq.l #1,32(sp)
   1254e:	|  |  |  |  \-> moveq #2,d1
   12550:	|  |  |  |      cmp.l 32(sp),d1
   12554:	|  |  |  \----- bge.s 12524 <getCostumeFromVar+0x9e>
            }
            break;
   12556:	|  |  |     /-- bra.s 12588 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   12558:	|  \--|-----|-> movea.l 44(sp),a0
   1255c:	|     |     |   move.l 4(a0),d0
   12560:	|     +-----|-- bra.s 1258c <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   12562:	\-----|-----|-> movea.l 44(sp),a0
   12566:	      |     |   move.l (a0),d0
   12568:	      |     |   add.l d0,d0
   1256a:	      |     |   movea.l d0,a1
   1256c:	      |     |   adda.l d0,a1
   1256e:	      |     |   lea 19a36 <typeName>,a0
   12574:	      |     |   move.l (0,a1,a0.l),d0
   12578:	      |     |   move.l d0,-(sp)
   1257a:	      |     |   pea 170fa <PutChar+0x1f88>
   12580:	      |     |   jsr 14822 <KPrintF>
   12586:	      |     |   addq.l #8,sp
    }

    return p;
   12588:	      |     \-> move.l 36(sp),d0
}
   1258c:	      \-------> movea.l (sp)+,a2
   1258e:	                movea.l (sp)+,a6
   12590:	                lea 32(sp),sp
   12594:	                rts

00012596 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   12596:	                lea -96(sp),sp
   1259a:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   1259e:	                move.l 116(sp),-(sp)
   125a2:	                pea 17132 <PutChar+0x1fc0>
   125a8:	                jsr 11d06 <joinStrings>
   125ae:	                addq.l #8,sp
   125b0:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   125b4:	            /-- bne.s 125bc <getSavedGamesStack+0x26>
   125b6:	            |   clr.w d0
   125b8:	/-----------|-- bra.w 127d0 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   125bc:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   125c0:	|               move.l #94516,98(sp)
   125c8:	|               moveq #-2,d0
   125ca:	|               move.l d0,94(sp)
   125ce:	|               move.l 19b58 <DOSBase>,d0
   125d4:	|               movea.l d0,a6
   125d6:	|               move.l 98(sp),d1
   125da:	|               move.l 94(sp),d2
   125de:	|               jsr -84(a6)
   125e2:	|               move.l d0,90(sp)
   125e6:	|               move.l 90(sp),d0
   125ea:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   125ee:	|           /-- bne.s 125f6 <getSavedGamesStack+0x60>
   125f0:	|           |   clr.w d0
   125f2:	+-----------|-- bra.w 127d0 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   125f6:	|           \-> move.l #260,82(sp)
   125fe:	|               move.l #65536,78(sp)
   12606:	|               move.l 19b50 <SysBase>,d0
   1260c:	|               movea.l d0,a6
   1260e:	|               move.l 82(sp),d0
   12612:	|               move.l 78(sp),d1
   12616:	|               jsr -684(a6)
   1261a:	|               move.l d0,74(sp)
   1261e:	|               move.l 74(sp),d0
   12622:	|               move.l d0,70(sp)
	if (!fib) {
   12626:	|           /-- bne.s 12644 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   12628:	|           |   move.l 86(sp),22(sp)
   1262e:	|           |   move.l 19b58 <DOSBase>,d0
   12634:	|           |   movea.l d0,a6
   12636:	|           |   move.l 22(sp),d1
   1263a:	|           |   jsr -90(a6)
		return FALSE;
   1263e:	|           |   clr.w d0
   12640:	+-----------|-- bra.w 127d0 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   12644:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   12648:	|               move.l 86(sp),66(sp)
   1264e:	|               move.l 70(sp),62(sp)
   12654:	|               move.l 19b58 <DOSBase>,d0
   1265a:	|               movea.l d0,a6
   1265c:	|               move.l 66(sp),d1
   12660:	|               move.l 62(sp),d2
   12664:	|               jsr -102(a6)
   12668:	|               move.l d0,58(sp)
   1266c:	|               move.l 58(sp),d0
   12670:	|  /----------- beq.w 12784 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   12674:	|  |        /-- bra.w 12750 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   12678:	|  |  /-----|-> move.l 70(sp),d2
   1267c:	|  |  |     |   addq.l #8,d2
   1267e:	|  |  |     |   move.l 70(sp),d0
   12682:	|  |  |     |   addq.l #8,d0
   12684:	|  |  |     |   move.l d0,-(sp)
   12686:	|  |  |     |   jsr 11cc6 <strlen>
   1268c:	|  |  |     |   addq.l #4,sp
   1268e:	|  |  |     |   move.l d0,d3
   12690:	|  |  |     |   move.l 116(sp),-(sp)
   12694:	|  |  |     |   jsr 11cc6 <strlen>
   1269a:	|  |  |     |   addq.l #4,sp
   1269c:	|  |  |     |   move.l d3,d1
   1269e:	|  |  |     |   sub.l d0,d1
   126a0:	|  |  |     |   move.l d2,d0
   126a2:	|  |  |     |   add.l d1,d0
   126a4:	|  |  |     |   move.l 116(sp),-(sp)
   126a8:	|  |  |     |   move.l d0,-(sp)
   126aa:	|  |  |     |   jsr 11c86 <strcmp>
   126b0:	|  |  |     |   addq.l #8,sp
   126b2:	|  |  |     |   tst.l d0
   126b4:	|  |  |     +-- bne.w 12750 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   126b8:	|  |  |     |   move.l 70(sp),d0
   126bc:	|  |  |     |   addq.l #8,d0
   126be:	|  |  |     |   move.l d0,-(sp)
   126c0:	|  |  |     |   jsr 11cc6 <strlen>
   126c6:	|  |  |     |   addq.l #4,sp
   126c8:	|  |  |     |   move.l d0,d2
   126ca:	|  |  |     |   move.l 116(sp),-(sp)
   126ce:	|  |  |     |   jsr 11cc6 <strlen>
   126d4:	|  |  |     |   addq.l #4,sp
   126d6:	|  |  |     |   move.l d0,d1
   126d8:	|  |  |     |   move.l d2,d0
   126da:	|  |  |     |   sub.l d1,d0
   126dc:	|  |  |     |   movea.l 70(sp),a0
   126e0:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   126e4:	|  |  |     |   move.l 70(sp),d0
   126e8:	|  |  |     |   addq.l #8,d0
   126ea:	|  |  |     |   move.l d0,-(sp)
   126ec:	|  |  |     |   jsr 118 <decodeFilename>
   126f2:	|  |  |     |   addq.l #4,sp
   126f4:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   126f8:	|  |  |     |   move.l 42(sp),-(sp)
   126fc:	|  |  |     |   lea 18(sp),a0
   12700:	|  |  |     |   move.l a0,-(sp)
   12702:	|  |  |     |   jsr 129fc <makeTextVar>
   12708:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1270a:	|  |  |     |   move.l 42(sp),38(sp)
   12710:	|  |  |     |   move.l 19b50 <SysBase>,d0
   12716:	|  |  |     |   movea.l d0,a6
   12718:	|  |  |     |   movea.l 38(sp),a1
   1271c:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   12720:	|  |  |     |   move.l 112(sp),d0
   12724:	|  |  |     |   move.l d0,-(sp)
   12726:	|  |  |     |   lea 18(sp),a0
   1272a:	|  |  |     |   move.l a0,-(sp)
   1272c:	|  |  |     |   jsr 12016 <addVarToStack>
   12732:	|  |  |     |   addq.l #8,sp
   12734:	|  |  |     |   tst.w d0
   12736:	|  |  |  /--|-- beq.s 12788 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   12738:	|  |  |  |  |   movea.l 112(sp),a0
   1273c:	|  |  |  |  |   move.l 4(a0),d0
   12740:	|  |  |  |  +-- bne.s 12750 <getSavedGamesStack+0x1ba>
   12742:	|  |  |  |  |   movea.l 112(sp),a0
   12746:	|  |  |  |  |   move.l (a0),d0
   12748:	|  |  |  |  |   movea.l 112(sp),a0
   1274c:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   12750:	|  |  |  |  \-> move.l 86(sp),54(sp)
   12756:	|  |  |  |      move.l 70(sp),50(sp)
   1275c:	|  |  |  |      move.l 19b58 <DOSBase>,d0
   12762:	|  |  |  |      movea.l d0,a6
   12764:	|  |  |  |      move.l 54(sp),d1
   12768:	|  |  |  |      move.l 50(sp),d2
   1276c:	|  |  |  |      jsr -108(a6)
   12770:	|  |  |  |      move.l d0,46(sp)
   12774:	|  |  |  |      move.l 46(sp),d0
   12778:	|  |  \--|----- bne.w 12678 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   1277c:	|  |     |      move.w #1,106(sp)
   12782:	|  |     |  /-- bra.s 1278a <getSavedGamesStack+0x1f4>
	}

cleanup:
   12784:	|  \-----|--|-> nop
   12786:	|        |  +-- bra.s 1278a <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   12788:	|        \--|-> nop
	FreeVec(fib);
   1278a:	|           \-> move.l 70(sp),34(sp)
   12790:	|               move.l 19b50 <SysBase>,d0
   12796:	|               movea.l d0,a6
   12798:	|               movea.l 34(sp),a1
   1279c:	|               jsr -690(a6)
	UnLock(dirLock);
   127a0:	|               move.l 86(sp),30(sp)
   127a6:	|               move.l 19b58 <DOSBase>,d0
   127ac:	|               movea.l d0,a6
   127ae:	|               move.l 30(sp),d1
   127b2:	|               jsr -90(a6)
	FreeVec(pattern);
   127b6:	|               move.l 102(sp),26(sp)
   127bc:	|               move.l 19b50 <SysBase>,d0
   127c2:	|               movea.l d0,a6
   127c4:	|               movea.l 26(sp),a1
   127c8:	|               jsr -690(a6)
	return result;
   127cc:	|               move.w 106(sp),d0
}
   127d0:	\-------------> movem.l (sp)+,d2-d3/a6
   127d4:	                lea 96(sp),sp
   127d8:	                rts

000127da <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   127da:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   127dc:	       movea.l 20(sp),a0
   127e0:	       move.l (a0),d0
   127e2:	       cmp.l 16(sp),d0
   127e6:	/----- beq.s 1284a <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   127e8:	|      move.l 16(sp),d0
   127ec:	|      add.l d0,d0
   127ee:	|      movea.l d0,a1
   127f0:	|      adda.l d0,a1
   127f2:	|      lea 19a36 <typeName>,a0
   127f8:	|      move.l (0,a1,a0.l),d0
   127fc:	|      move.l d0,-(sp)
   127fe:	|      pea 17136 <PutChar+0x1fc4>
   12804:	|      jsr 11d06 <joinStrings>
   1280a:	|      addq.l #8,sp
   1280c:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   12810:	|      movea.l 20(sp),a0
   12814:	|      move.l (a0),d0
   12816:	|      add.l d0,d0
   12818:	|      movea.l d0,a1
   1281a:	|      adda.l d0,a1
   1281c:	|      lea 19a36 <typeName>,a0
   12822:	|      move.l (0,a1,a0.l),d0
   12826:	|      move.l d0,-(sp)
   12828:	|      pea 17178 <PutChar+0x2006>
   1282e:	|      jsr 11d06 <joinStrings>
   12834:	|      addq.l #8,sp
   12836:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   12838:	|      move.l (sp),-(sp)
   1283a:	|      move.l 8(sp),-(sp)
   1283e:	|      jsr 14822 <KPrintF>
   12844:	|      addq.l #8,sp

		return FALSE;
   12846:	|      clr.w d0
   12848:	|  /-- bra.s 1285a <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1284a:	\--|-> movea.l 20(sp),a0
   1284e:	   |   move.l 4(a0),d0
   12852:	   |   movea.l 12(sp),a0
   12856:	   |   move.l d0,(a0)
	return TRUE;
   12858:	   |   moveq #1,d0
}
   1285a:	   \-> addq.l #8,sp
   1285c:	       rts

0001285e <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   1285e:	move.l 8(sp),-(sp)
   12862:	jsr 5046 <getNumberedString>
   12868:	addq.l #4,sp
   1286a:	move.l d0,-(sp)
   1286c:	move.l 8(sp),-(sp)
   12870:	jsr 129fc <makeTextVar>
   12876:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   12878:	movea.l 4(sp),a0
   1287c:	move.l 4(a0),d0
   12880:	sne d0
   12882:	neg.b d0
   12884:	move.b d0,d0
   12886:	andi.w #255,d0
}
   1288a:	rts

0001288c <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   1288c:	          subq.l #8,sp
    int size = stackSize(stacky);
   1288e:	          move.l 16(sp),-(sp)
   12892:	          jsr 1313a <stackSize>
   12898:	          addq.l #4,sp
   1289a:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   1289e:	          move.l 4(sp),-(sp)
   128a2:	          move.l 16(sp),-(sp)
   128a6:	          jsr 128f6 <makeFastArraySize>
   128ac:	          addq.l #8,sp
   128ae:	          tst.w d0
   128b0:	      /-- bne.s 128b6 <makeFastArrayFromStack+0x2a>
   128b2:	      |   clr.w d0
   128b4:	/-----|-- bra.s 128f2 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   128b6:	|     \-> movea.l 16(sp),a0
   128ba:	|         move.l (a0),(sp)
    size = 0;
   128bc:	|         clr.l 4(sp)
    while (allV) {
   128c0:	|     /-- bra.s 128ec <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   128c2:	|  /--|-> movea.l 12(sp),a0
   128c6:	|  |  |   movea.l 4(a0),a0
   128ca:	|  |  |   move.l (a0),d1
   128cc:	|  |  |   move.l 4(sp),d0
   128d0:	|  |  |   lsl.l #3,d0
   128d2:	|  |  |   add.l d0,d1
   128d4:	|  |  |   move.l (sp),d0
   128d6:	|  |  |   move.l d1,-(sp)
   128d8:	|  |  |   move.l d0,-(sp)
   128da:	|  |  |   jsr 12b78 <copyMain>
   128e0:	|  |  |   addq.l #8,sp
        size++;
   128e2:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   128e6:	|  |  |   movea.l (sp),a0
   128e8:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   128ec:	|  |  \-> tst.l (sp)
   128ee:	|  \----- bne.s 128c2 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   128f0:	|         moveq #1,d0
}
   128f2:	\-------> addq.l #8,sp
   128f4:	          rts

000128f6 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   128f6:	          lea -28(sp),sp
   128fa:	          move.l a6,-(sp)
    if (size < 0) {
   128fc:	          tst.l 40(sp)
   12900:	      /-- bge.s 12916 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   12902:	      |   pea 171bd <PutChar+0x204b>
   12908:	      |   jsr 14822 <KPrintF>
   1290e:	      |   addq.l #4,sp
		return FALSE;
   12910:	      |   clr.w d0
   12912:	/-----|-- bra.w 129f4 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   12916:	|     \-> move.l 36(sp),-(sp)
   1291a:	|         jsr 12a28 <unlinkVar>
   12920:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   12922:	|         movea.l 36(sp),a0
   12926:	|         moveq #10,d0
   12928:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   1292a:	|         moveq #12,d0
   1292c:	|         move.l d0,24(sp)
   12930:	|         clr.l 20(sp)
   12934:	|         move.l 19b50 <SysBase>,d0
   1293a:	|         movea.l d0,a6
   1293c:	|         move.l 24(sp),d0
   12940:	|         move.l 20(sp),d1
   12944:	|         jsr -684(a6)
   12948:	|         move.l d0,16(sp)
   1294c:	|         move.l 16(sp),d0
   12950:	|         movea.l 36(sp),a0
   12954:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   12958:	|         movea.l 36(sp),a0
   1295c:	|         move.l 4(a0),d0
   12960:	|     /-- bne.s 12968 <makeFastArraySize+0x72>
   12962:	|     |   clr.w d0
   12964:	+-----|-- bra.w 129f4 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   12968:	|     \-> move.l 40(sp),d0
   1296c:	|         lsl.l #3,d0
   1296e:	|         move.l d0,12(sp)
   12972:	|         clr.l 8(sp)
   12976:	|         move.l 19b50 <SysBase>,d0
   1297c:	|         movea.l d0,a6
   1297e:	|         move.l 12(sp),d0
   12982:	|         move.l 8(sp),d1
   12986:	|         jsr -684(a6)
   1298a:	|         move.l d0,4(sp)
   1298e:	|         move.l 4(sp),d0
   12992:	|         movea.l 36(sp),a0
   12996:	|         movea.l 4(a0),a0
   1299a:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   1299c:	|         movea.l 36(sp),a0
   129a0:	|         movea.l 4(a0),a0
   129a4:	|         move.l (a0),d0
   129a6:	|     /-- bne.s 129ac <makeFastArraySize+0xb6>
   129a8:	|     |   clr.w d0
   129aa:	+-----|-- bra.s 129f4 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   129ac:	|     \-> clr.l 28(sp)
   129b0:	|     /-- bra.s 129cc <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   129b2:	|  /--|-> movea.l 36(sp),a0
   129b6:	|  |  |   movea.l 4(a0),a0
   129ba:	|  |  |   move.l (a0),d1
   129bc:	|  |  |   move.l 28(sp),d0
   129c0:	|  |  |   lsl.l #3,d0
   129c2:	|  |  |   movea.l d1,a0
   129c4:	|  |  |   adda.l d0,a0
   129c6:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   129c8:	|  |  |   addq.l #1,28(sp)
   129cc:	|  |  \-> move.l 28(sp),d0
   129d0:	|  |      cmp.l 40(sp),d0
   129d4:	|  \----- blt.s 129b2 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   129d6:	|         movea.l 36(sp),a0
   129da:	|         movea.l 4(a0),a0
   129de:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   129e4:	|         movea.l 36(sp),a0
   129e8:	|         movea.l 4(a0),a0
   129ec:	|         moveq #1,d0
   129ee:	|         move.l d0,8(a0)
    return TRUE;
   129f2:	|         moveq #1,d0
}
   129f4:	\-------> movea.l (sp)+,a6
   129f6:	          lea 28(sp),sp
   129fa:	          rts

000129fc <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   129fc:	move.l 4(sp),-(sp)
   12a00:	jsr 12a28 <unlinkVar>
   12a06:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   12a08:	movea.l 4(sp),a0
   12a0c:	moveq #3,d0
   12a0e:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   12a10:	move.l 8(sp),-(sp)
   12a14:	jsr b8 <copyString>
   12a1a:	addq.l #4,sp
   12a1c:	movea.l 4(sp),a0
   12a20:	move.l d0,4(a0)
}
   12a24:	nop
   12a26:	rts

00012a28 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   12a28:	                      lea -16(sp),sp
   12a2c:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   12a2e:	                      movea.l 24(sp),a0
   12a32:	                      move.l (a0),d0
   12a34:	                      moveq #10,d1
   12a36:	                      cmp.l d0,d1
   12a38:	            /-------- beq.w 12af0 <unlinkVar+0xc8>
   12a3c:	            |         moveq #10,d1
   12a3e:	            |         cmp.l d0,d1
   12a40:	/-----------|-------- bcs.w 12b64 <unlinkVar+0x13c>
   12a44:	|           |         moveq #8,d1
   12a46:	|           |         cmp.l d0,d1
   12a48:	|  /--------|-------- beq.w 12b50 <unlinkVar+0x128>
   12a4c:	|  |        |         moveq #8,d1
   12a4e:	|  |        |         cmp.l d0,d1
   12a50:	+--|--------|-------- bcs.w 12b64 <unlinkVar+0x13c>
   12a54:	|  |        |         moveq #3,d1
   12a56:	|  |        |         cmp.l d0,d1
   12a58:	|  |        |     /-- beq.s 12a64 <unlinkVar+0x3c>
   12a5a:	|  |        |     |   moveq #6,d1
   12a5c:	|  |        |     |   cmp.l d0,d1
   12a5e:	|  |        |  /--|-- beq.s 12a8a <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   12a60:	+--|--------|--|--|-- bra.w 12b64 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   12a64:	|  |        |  |  \-> movea.l 24(sp),a0
   12a68:	|  |        |  |      move.l 4(a0),4(sp)
   12a6e:	|  |        |  |      move.l 19b50 <SysBase>,d0
   12a74:	|  |        |  |      movea.l d0,a6
   12a76:	|  |        |  |      movea.l 4(sp),a1
   12a7a:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   12a7e:	|  |        |  |      movea.l 24(sp),a0
   12a82:	|  |        |  |      clr.l 4(a0)
		break;
   12a86:	|  |  /-----|--|----- bra.w 12b6e <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   12a8a:	|  |  |     |  \----> movea.l 24(sp),a0
   12a8e:	|  |  |     |         movea.l 4(a0),a0
   12a92:	|  |  |     |         move.l 8(a0),d0
   12a96:	|  |  |     |         subq.l #1,d0
   12a98:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   12a9c:	|  |  |     |         movea.l 24(sp),a0
   12aa0:	|  |  |     |         movea.l 4(a0),a0
   12aa4:	|  |  |     |         move.l 8(a0),d0
   12aa8:	|  |  |  /--|-------- bgt.w 12b68 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   12aac:	|  |  |  |  |     /-- bra.s 12ac0 <unlinkVar+0x98>
   12aae:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   12ab2:	|  |  |  |  |  |  |   move.l 4(a0),d0
   12ab6:	|  |  |  |  |  |  |   move.l d0,-(sp)
   12ab8:	|  |  |  |  |  |  |   jsr 1315e <trimStack>
   12abe:	|  |  |  |  |  |  |   addq.l #4,sp
   12ac0:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   12ac4:	|  |  |  |  |  |      movea.l 4(a0),a0
   12ac8:	|  |  |  |  |  |      move.l (a0),d0
   12aca:	|  |  |  |  |  \----- bne.s 12aae <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   12acc:	|  |  |  |  |         movea.l 24(sp),a0
   12ad0:	|  |  |  |  |         move.l 4(a0),8(sp)
   12ad6:	|  |  |  |  |         move.l 19b50 <SysBase>,d0
   12adc:	|  |  |  |  |         movea.l d0,a6
   12ade:	|  |  |  |  |         movea.l 8(sp),a1
   12ae2:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   12ae6:	|  |  |  |  |         movea.l 24(sp),a0
   12aea:	|  |  |  |  |         clr.l 4(a0)
		break;
   12aee:	|  |  |  +--|-------- bra.s 12b68 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   12af0:	|  |  |  |  \-------> movea.l 24(sp),a0
   12af4:	|  |  |  |            movea.l 4(a0),a0
   12af8:	|  |  |  |            move.l 8(a0),d0
   12afc:	|  |  |  |            subq.l #1,d0
   12afe:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   12b02:	|  |  |  |            movea.l 24(sp),a0
   12b06:	|  |  |  |            movea.l 4(a0),a0
   12b0a:	|  |  |  |            move.l 8(a0),d0
   12b0e:	|  |  |  |        /-- bgt.s 12b6c <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   12b10:	|  |  |  |        |   movea.l 24(sp),a0
   12b14:	|  |  |  |        |   movea.l 4(a0),a0
   12b18:	|  |  |  |        |   move.l (a0),16(sp)
   12b1c:	|  |  |  |        |   move.l 19b50 <SysBase>,d0
   12b22:	|  |  |  |        |   movea.l d0,a6
   12b24:	|  |  |  |        |   movea.l 16(sp),a1
   12b28:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   12b2c:	|  |  |  |        |   movea.l 24(sp),a0
   12b30:	|  |  |  |        |   move.l 4(a0),12(sp)
   12b36:	|  |  |  |        |   move.l 19b50 <SysBase>,d0
   12b3c:	|  |  |  |        |   movea.l d0,a6
   12b3e:	|  |  |  |        |   movea.l 12(sp),a1
   12b42:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   12b46:	|  |  |  |        |   movea.l 24(sp),a0
   12b4a:	|  |  |  |        |   clr.l 4(a0)
		break;
   12b4e:	|  |  |  |        +-- bra.s 12b6c <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   12b50:	|  \--|--|--------|-> movea.l 24(sp),a0
   12b54:	|     |  |        |   move.l 4(a0),d0
   12b58:	|     |  |        |   move.l d0,-(sp)
   12b5a:	|     |  |        |   jsr 7bf0 <deleteAnim>
   12b60:	|     |  |        |   addq.l #4,sp
		break;
   12b62:	|     +--|--------|-- bra.s 12b6e <unlinkVar+0x146>
		break;
   12b64:	\-----|--|--------|-> nop
   12b66:	      +--|--------|-- bra.s 12b6e <unlinkVar+0x146>
		break;
   12b68:	      |  \--------|-> nop
   12b6a:	      +-----------|-- bra.s 12b6e <unlinkVar+0x146>
		break;
   12b6c:	      |           \-> nop
	}
}
   12b6e:	      \-------------> nop
   12b70:	                      movea.l (sp)+,a6
   12b72:	                      lea 16(sp),sp
   12b76:	                      rts

00012b78 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   12b78:	       movea.l 4(sp),a0
   12b7c:	       move.l (a0),d0
   12b7e:	       movea.l 8(sp),a0
   12b82:	       move.l d0,(a0)
	switch (to->varType) {
   12b84:	       movea.l 8(sp),a0
   12b88:	       move.l (a0),d0
   12b8a:	       moveq #10,d1
   12b8c:	       cmp.l d0,d1
   12b8e:	/----- bcs.w 12c80 <copyMain+0x108>
   12b92:	|      add.l d0,d0
   12b94:	|      movea.l d0,a0
   12b96:	|      adda.l #76706,a0
   12b9c:	|      move.w (a0),d0
   12b9e:	|      jmp (12ba2 <copyMain+0x2a>,pc,d0.w)
   12ba2:	|      .short 0x00da
   12ba4:	|      ori.b #22,(a6)
   12ba8:	|      ori.w #22,(a4)
   12bac:	|      ori.b #-126,(a6)
   12bb0:	|      ori.b #-68,(a6)
   12bb4:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   12bbc:	|      move.l 4(a0),d0
   12bc0:	|      movea.l 8(sp),a0
   12bc4:	|      move.l d0,4(a0)
		return TRUE;
   12bc8:	|      moveq #1,d0
   12bca:	|  /-- bra.w 12c92 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   12bce:	|  |   movea.l 4(sp),a0
   12bd2:	|  |   move.l 4(a0),d0
   12bd6:	|  |   movea.l 8(sp),a0
   12bda:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   12bde:	|  |   movea.l 8(sp),a0
   12be2:	|  |   movea.l 4(a0),a0
   12be6:	|  |   move.l 8(a0),d0
   12bea:	|  |   addq.l #1,d0
   12bec:	|  |   move.l d0,8(a0)
		return TRUE;
   12bf0:	|  |   moveq #1,d0
   12bf2:	|  +-- bra.w 12c92 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   12bf6:	|  |   movea.l 4(sp),a0
   12bfa:	|  |   move.l 4(a0),d0
   12bfe:	|  |   move.l d0,-(sp)
   12c00:	|  |   jsr b8 <copyString>
   12c06:	|  |   addq.l #4,sp
   12c08:	|  |   movea.l 8(sp),a0
   12c0c:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   12c10:	|  |   movea.l 8(sp),a0
   12c14:	|  |   move.l 4(a0),d0
   12c18:	|  |   sne d0
   12c1a:	|  |   neg.b d0
   12c1c:	|  |   move.b d0,d0
   12c1e:	|  |   andi.w #255,d0
   12c22:	|  +-- bra.s 12c92 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   12c24:	|  |   movea.l 4(sp),a0
   12c28:	|  |   move.l 4(a0),d0
   12c2c:	|  |   movea.l 8(sp),a0
   12c30:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   12c34:	|  |   movea.l 8(sp),a0
   12c38:	|  |   movea.l 4(a0),a0
   12c3c:	|  |   move.l 8(a0),d0
   12c40:	|  |   addq.l #1,d0
   12c42:	|  |   move.l d0,8(a0)
		return TRUE;
   12c46:	|  |   moveq #1,d0
   12c48:	|  +-- bra.s 12c92 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   12c4a:	|  |   movea.l 4(sp),a0
   12c4e:	|  |   move.l 4(a0),d0
   12c52:	|  |   movea.l 8(sp),a0
   12c56:	|  |   move.l d0,4(a0)
		return TRUE;
   12c5a:	|  |   moveq #1,d0
   12c5c:	|  +-- bra.s 12c92 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   12c5e:	|  |   movea.l 4(sp),a0
   12c62:	|  |   move.l 4(a0),d0
   12c66:	|  |   move.l d0,-(sp)
   12c68:	|  |   jsr 7824 <copyAnim>
   12c6e:	|  |   addq.l #4,sp
   12c70:	|  |   movea.l 8(sp),a0
   12c74:	|  |   move.l d0,4(a0)
		return TRUE;
   12c78:	|  |   moveq #1,d0
   12c7a:	|  +-- bra.s 12c92 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   12c7c:	|  |   moveq #1,d0
   12c7e:	|  +-- bra.s 12c92 <copyMain+0x11a>

		default:
		break;
   12c80:	\--|-> nop
	}
	KPrintF("Unknown value type");
   12c82:	   |   pea 1720e <PutChar+0x209c>
   12c88:	   |   jsr 14822 <KPrintF>
   12c8e:	   |   addq.l #4,sp
	return FALSE;
   12c90:	   |   clr.w d0
}
   12c92:	   \-> rts

00012c94 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   12c94:	move.l 8(sp),-(sp)
   12c98:	jsr 12a28 <unlinkVar>
   12c9e:	addq.l #4,sp
	return copyMain(from, to);
   12ca0:	move.l 8(sp),-(sp)
   12ca4:	move.l 8(sp),-(sp)
   12ca8:	jsr 12b78 <copyMain>
   12cae:	addq.l #8,sp
}
   12cb0:	rts

00012cb2 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   12cb2:	       movea.l 4(sp),a0
   12cb6:	       move.l (a0),d0
   12cb8:	       moveq #8,d1
   12cba:	       cmp.l d0,d1
   12cbc:	   /-- bne.s 12cd2 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   12cbe:	   |   movea.l 4(sp),a0
   12cc2:	   |   move.l 4(a0),d0
   12cc6:	   |   move.l d0,-(sp)
   12cc8:	   |   jsr 7824 <copyAnim>
   12cce:	   |   addq.l #4,sp
   12cd0:	/--|-- bra.s 12d18 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   12cd2:	|  \-> movea.l 4(sp),a0
   12cd6:	|      move.l (a0),d0
   12cd8:	|      moveq #1,d1
   12cda:	|      cmp.l d0,d1
   12cdc:	|  /-- bne.s 12cf0 <getAnimationFromVar+0x3e>
   12cde:	|  |   movea.l 4(sp),a0
   12ce2:	|  |   move.l 4(a0),d0
   12ce6:	|  +-- bne.s 12cf0 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   12ce8:	|  |   jsr 8f5c <makeNullAnim>
   12cee:	+--|-- bra.s 12d18 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   12cf0:	|  \-> movea.l 4(sp),a0
   12cf4:	|      move.l (a0),d0
   12cf6:	|      add.l d0,d0
   12cf8:	|      movea.l d0,a1
   12cfa:	|      adda.l d0,a1
   12cfc:	|      lea 19a36 <typeName>,a0
   12d02:	|      move.l (0,a1,a0.l),d0
   12d06:	|      move.l d0,-(sp)
   12d08:	|      pea 170fa <PutChar+0x1f88>
   12d0e:	|      jsr 14822 <KPrintF>
   12d14:	|      addq.l #8,sp
	return NULL;
   12d16:	|      moveq #0,d0
}
   12d18:	\----> rts

00012d1a <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   12d1a:	       movea.l 4(sp),a0
   12d1e:	       move.l (a0),d0
   12d20:	       moveq #10,d1
   12d22:	       cmp.l d0,d1
   12d24:	/----- bcs.w 12daa <getBoolean+0x90>
   12d28:	|      add.l d0,d0
   12d2a:	|      movea.l d0,a0
   12d2c:	|      adda.l #77112,a0
   12d32:	|      move.w (a0),d0
   12d34:	|      jmp (12d38 <getBoolean+0x1e>,pc,d0.w)
   12d38:	|      ori.b #26,(a6)
   12d3c:	|      ori.w #68,(114,a2,d0.w)
   12d42:	|      ori.w #46,(114,a2,d0.w)
   12d48:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   12d4e:	|      clr.w d0
   12d50:	|  /-- bra.s 12dae <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   12d52:	|  |   movea.l 4(sp),a0
   12d56:	|  |   move.l 4(a0),d0
   12d5a:	|  |   sne d0
   12d5c:	|  |   neg.b d0
   12d5e:	|  |   move.b d0,d0
   12d60:	|  |   andi.w #255,d0
   12d64:	|  +-- bra.s 12dae <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   12d66:	|  |   movea.l 4(sp),a0
   12d6a:	|  |   movea.l 4(a0),a0
   12d6e:	|  |   move.l (a0),d0
   12d70:	|  |   sne d0
   12d72:	|  |   neg.b d0
   12d74:	|  |   move.b d0,d0
   12d76:	|  |   andi.w #255,d0
   12d7a:	|  +-- bra.s 12dae <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   12d7c:	|  |   movea.l 4(sp),a0
   12d80:	|  |   movea.l 4(a0),a0
   12d84:	|  |   move.b (a0),d0
   12d86:	|  |   sne d0
   12d88:	|  |   neg.b d0
   12d8a:	|  |   move.b d0,d0
   12d8c:	|  |   andi.w #255,d0
   12d90:	|  +-- bra.s 12dae <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   12d92:	|  |   movea.l 4(sp),a0
   12d96:	|  |   movea.l 4(a0),a0
   12d9a:	|  |   move.l 4(a0),d0
   12d9e:	|  |   sne d0
   12da0:	|  |   neg.b d0
   12da2:	|  |   move.b d0,d0
   12da4:	|  |   andi.w #255,d0
   12da8:	|  +-- bra.s 12dae <getBoolean+0x94>

		default:
		break;
   12daa:	\--|-> nop
	}
	return TRUE;
   12dac:	   |   moveq #1,d0
}
   12dae:	   \-> rts

00012db0 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   12db0:	      /----------> lea -76(sp),sp
   12db4:	      |            move.l a6,-(sp)
	switch (from->varType) {
   12db6:	      |            movea.l 84(sp),a0
   12dba:	      |            move.l (a0),d0
   12dbc:	      |            moveq #10,d1
   12dbe:	      |            cmp.l d0,d1
   12dc0:	/-----|----------- bcs.w 1305e <getTextFromAnyVar+0x2ae>
   12dc4:	|     |            add.l d0,d0
   12dc6:	|     |            movea.l d0,a0
   12dc8:	|     |            adda.l #77268,a0
   12dce:	|     |            move.w (a0),d0
   12dd0:	|     |            jmp (12dd4 <getTextFromAnyVar+0x24>,pc,d0.w)
   12dd4:	|     |            .short 0x028a
   12dd6:	|     |            bset d0,(a0)+
   12dd8:	|     |            .short 0x028a
   12dda:	|     |            ori.b #-118,(a6)
   12dde:	|     |            andi.b #8,ccr
   12de2:	|     |            andi.w #650,-(a0)
   12de6:	|     |            .short 0x028a
   12de8:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   12dee:	|     |            move.l 4(a0),d0
   12df2:	|     |            move.l d0,-(sp)
   12df4:	|     |            jsr b8 <copyString>
   12dfa:	|     |            addq.l #4,sp
   12dfc:	|  /--|----------- bra.w 13080 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   12e00:	|  |  |            pea 17221 <PutChar+0x20af>
   12e06:	|  |  |            jsr b8 <copyString>
   12e0c:	|  |  |            addq.l #4,sp
   12e0e:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   12e12:	|  |  |            clr.l 72(sp)
   12e16:	|  |  |     /----- bra.w 12ec0 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   12e1a:	|  |  |  /--|----> pea 17227 <PutChar+0x20b5>
   12e20:	|  |  |  |  |      move.l 80(sp),-(sp)
   12e24:	|  |  |  |  |      jsr 11d06 <joinStrings>
   12e2a:	|  |  |  |  |      addq.l #8,sp
   12e2c:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   12e30:	|  |  |  |  |  /-- bne.s 12e38 <getTextFromAnyVar+0x88>
   12e32:	|  |  |  |  |  |   moveq #0,d0
   12e34:	|  +--|--|--|--|-- bra.w 13080 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   12e38:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   12e3e:	|  |  |  |  |      move.l 19b50 <SysBase>,d0
   12e44:	|  |  |  |  |      movea.l d0,a6
   12e46:	|  |  |  |  |      movea.l 56(sp),a1
   12e4a:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   12e4e:	|  |  |  |  |      movea.l 84(sp),a0
   12e52:	|  |  |  |  |      movea.l 4(a0),a0
   12e56:	|  |  |  |  |      move.l (a0),d1
   12e58:	|  |  |  |  |      move.l 72(sp),d0
   12e5c:	|  |  |  |  |      lsl.l #3,d0
   12e5e:	|  |  |  |  |      add.l d1,d0
   12e60:	|  |  |  |  |      move.l d0,-(sp)
   12e62:	|  |  +--|--|----- jsr 12db0 <getTextFromAnyVar>(pc)
   12e66:	|  |  |  |  |      addq.l #4,sp
   12e68:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   12e6c:	|  |  |  |  |      move.l 52(sp),-(sp)
   12e70:	|  |  |  |  |      move.l 64(sp),-(sp)
   12e74:	|  |  |  |  |      jsr 11d06 <joinStrings>
   12e7a:	|  |  |  |  |      addq.l #8,sp
   12e7c:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   12e80:	|  |  |  |  |  /-- bne.s 12e88 <getTextFromAnyVar+0xd8>
   12e82:	|  |  |  |  |  |   moveq #0,d0
   12e84:	|  +--|--|--|--|-- bra.w 13080 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   12e88:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   12e8e:	|  |  |  |  |      move.l 19b50 <SysBase>,d0
   12e94:	|  |  |  |  |      movea.l d0,a6
   12e96:	|  |  |  |  |      movea.l 48(sp),a1
   12e9a:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   12e9e:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   12ea2:	|  |  |  |  |      move.l 60(sp),44(sp)
   12ea8:	|  |  |  |  |      move.l 19b50 <SysBase>,d0
   12eae:	|  |  |  |  |      movea.l d0,a6
   12eb0:	|  |  |  |  |      movea.l 44(sp),a1
   12eb4:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   12eb8:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   12ebc:	|  |  |  |  |      addq.l #1,72(sp)
   12ec0:	|  |  |  |  \----> movea.l 84(sp),a0
   12ec4:	|  |  |  |         movea.l 4(a0),a0
   12ec8:	|  |  |  |         move.l 4(a0),d0
   12ecc:	|  |  |  |         cmp.l 72(sp),d0
   12ed0:	|  |  |  \-------- bgt.w 12e1a <getTextFromAnyVar+0x6a>
			}
			return builder;
   12ed4:	|  |  |            move.l 76(sp),d0
   12ed8:	|  +--|----------- bra.w 13080 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   12edc:	|  |  |            pea 17229 <PutChar+0x20b7>
   12ee2:	|  |  |            jsr b8 <copyString>
   12ee8:	|  |  |            addq.l #4,sp
   12eea:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   12eee:	|  |  |            movea.l 84(sp),a0
   12ef2:	|  |  |            movea.l 4(a0),a0
   12ef6:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   12efa:	|  |  |     /----- bra.w 12f9c <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   12efe:	|  |  |  /--|----> pea 17227 <PutChar+0x20b5>
   12f04:	|  |  |  |  |      move.l 72(sp),-(sp)
   12f08:	|  |  |  |  |      jsr 11d06 <joinStrings>
   12f0e:	|  |  |  |  |      addq.l #8,sp
   12f10:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   12f14:	|  |  |  |  |  /-- bne.s 12f1c <getTextFromAnyVar+0x16c>
   12f16:	|  |  |  |  |  |   moveq #0,d0
   12f18:	|  +--|--|--|--|-- bra.w 13080 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   12f1c:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   12f22:	|  |  |  |  |      move.l 19b50 <SysBase>,d0
   12f28:	|  |  |  |  |      movea.l d0,a6
   12f2a:	|  |  |  |  |      movea.l 32(sp),a1
   12f2e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   12f32:	|  |  |  |  |      move.l 64(sp),d0
   12f36:	|  |  |  |  |      move.l d0,-(sp)
   12f38:	|  |  \--|--|----- jsr 12db0 <getTextFromAnyVar>(pc)
   12f3c:	|  |     |  |      addq.l #4,sp
   12f3e:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   12f42:	|  |     |  |      move.l 28(sp),-(sp)
   12f46:	|  |     |  |      move.l 40(sp),-(sp)
   12f4a:	|  |     |  |      jsr 11d06 <joinStrings>
   12f50:	|  |     |  |      addq.l #8,sp
   12f52:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   12f56:	|  |     |  |  /-- bne.s 12f5e <getTextFromAnyVar+0x1ae>
   12f58:	|  |     |  |  |   moveq #0,d0
   12f5a:	|  +-----|--|--|-- bra.w 13080 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   12f5e:	|  |     |  |  \-> move.l 28(sp),24(sp)
   12f64:	|  |     |  |      move.l 19b50 <SysBase>,d0
   12f6a:	|  |     |  |      movea.l d0,a6
   12f6c:	|  |     |  |      movea.l 24(sp),a1
   12f70:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   12f74:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   12f78:	|  |     |  |      move.l 36(sp),20(sp)
   12f7e:	|  |     |  |      move.l 19b50 <SysBase>,d0
   12f84:	|  |     |  |      movea.l d0,a6
   12f86:	|  |     |  |      movea.l 20(sp),a1
   12f8a:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   12f8e:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   12f92:	|  |     |  |      movea.l 64(sp),a0
   12f96:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   12f9c:	|  |     |  \----> tst.l 64(sp)
   12fa0:	|  |     \-------- bne.w 12efe <getTextFromAnyVar+0x14e>
			}
			return builder;
   12fa4:	|  |               move.l 68(sp),d0
   12fa8:	|  +-------------- bra.w 13080 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   12fac:	|  |               moveq #10,d0
   12fae:	|  |               move.l d0,16(sp)
   12fb2:	|  |               clr.l 12(sp)
   12fb6:	|  |               move.l 19b50 <SysBase>,d0
   12fbc:	|  |               movea.l d0,a6
   12fbe:	|  |               move.l 16(sp),d0
   12fc2:	|  |               move.l 12(sp),d1
   12fc6:	|  |               jsr -684(a6)
   12fca:	|  |               move.l d0,8(sp)
   12fce:	|  |               move.l 8(sp),d0
   12fd2:	|  |               move.l d0,4(sp)
			if (! buff) {
   12fd6:	|  |           /-- bne.s 12fec <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   12fd8:	|  |           |   pea 17230 <PutChar+0x20be>
   12fde:	|  |           |   jsr 14822 <KPrintF>
   12fe4:	|  |           |   addq.l #4,sp
				return NULL;
   12fe6:	|  |           |   moveq #0,d0
   12fe8:	|  +-----------|-- bra.w 13080 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   12fec:	|  |           \-> movea.l 84(sp),a0
   12ff0:	|  |               move.l 4(a0),d0
   12ff4:	|  |               move.l d0,-(sp)
   12ff6:	|  |               pea 1725a <PutChar+0x20e8>
   12ffc:	|  |               move.l 12(sp),-(sp)
   13000:	|  |               jsr 11fe4 <sprintf>
   13006:	|  |               lea 12(sp),sp
			return buff;
   1300a:	|  |               move.l 4(sp),d0
   1300e:	|  +-------------- bra.s 13080 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   13010:	|  |               movea.l 84(sp),a0
   13014:	|  |               move.l 4(a0),d0
   13018:	|  |               move.l d0,-(sp)
   1301a:	|  |               jsr 278e <resourceNameFromNum>
   13020:	|  |               addq.l #4,sp
   13022:	|  |               move.l d0,-(sp)
   13024:	|  |               pea 15bc7 <PutChar+0xa55>
   1302a:	|  |               jsr 11d06 <joinStrings>
   13030:	|  |               addq.l #8,sp
   13032:	|  +-------------- bra.s 13080 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   13034:	|  |               movea.l 84(sp),a0
   13038:	|  |               move.l 4(a0),d0
   1303c:	|  |               move.l d0,-(sp)
   1303e:	|  |               jsr b610 <findObjectType>
   13044:	|  |               addq.l #4,sp
   13046:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   1304a:	+--|-------------- beq.s 1305e <getTextFromAnyVar+0x2ae>
   1304c:	|  |               movea.l 40(sp),a0
   13050:	|  |               move.l (a0),d0
   13052:	|  |               move.l d0,-(sp)
   13054:	|  |               jsr b8 <copyString>
   1305a:	|  |               addq.l #4,sp
   1305c:	|  +-------------- bra.s 13080 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   1305e:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   13060:	   |               movea.l 84(sp),a0
   13064:	   |               move.l (a0),d0
   13066:	   |               add.l d0,d0
   13068:	   |               movea.l d0,a1
   1306a:	   |               adda.l d0,a1
   1306c:	   |               lea 19a36 <typeName>,a0
   13072:	   |               move.l (0,a1,a0.l),d0
   13076:	   |               move.l d0,-(sp)
   13078:	   |               jsr b8 <copyString>
   1307e:	   |               addq.l #4,sp
}
   13080:	   \-------------> movea.l (sp)+,a6
   13082:	                   lea 76(sp),sp
   13086:	                   rts

00013088 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   13088:	move.l 4(sp),-(sp)
   1308c:	jsr 12a28 <unlinkVar>
   13092:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   13094:	movea.l 4(sp),a0
   13098:	moveq #8,d0
   1309a:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   1309c:	movea.l 4(sp),a0
   130a0:	move.l 8(sp),4(a0)
}
   130a6:	nop
   130a8:	rts

000130aa <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   130aa:	move.l 4(sp),-(sp)
   130ae:	jsr 12a28 <unlinkVar>
   130b4:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   130b6:	movea.l 4(sp),a0
   130ba:	moveq #9,d0
   130bc:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   130be:	movea.l 4(sp),a0
   130c2:	move.l 8(sp),4(a0)
}
   130c8:	nop
   130ca:	rts

000130cc <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   130cc:	move.l 4(sp),-(sp)
   130d0:	jsr 12a28 <unlinkVar>
   130d6:	addq.l #4,sp
	thisVar->varType = vT;
   130d8:	movea.l 4(sp),a0
   130dc:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   130e0:	movea.l 4(sp),a0
   130e4:	move.l 12(sp),4(a0)
}
   130ea:	nop
   130ec:	rts

000130ee <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   130ee:	      /-- bra.s 13100 <stackGetByIndex+0x12>
        vS = vS->next;
   130f0:	/-----|-> movea.l 4(sp),a0
   130f4:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   130fa:	|     +-- bne.s 13100 <stackGetByIndex+0x12>
            return NULL;
   130fc:	|     |   moveq #0,d0
   130fe:	|  /--|-- bra.s 13114 <stackGetByIndex+0x26>
    while (theIndex--) {
   13100:	|  |  \-> move.l 8(sp),d0
   13104:	|  |      move.l d0,d1
   13106:	|  |      subq.l #1,d1
   13108:	|  |      move.l d1,8(sp)
   1310c:	|  |      tst.l d0
   1310e:	\--|----- bne.s 130f0 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   13110:	   |      move.l 4(sp),d0
}
   13114:	   \----> rts

00013116 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   13116:	          tst.l 4(sp)
   1311a:	      /-- bne.s 1312a <stackFindLast+0x14>
		return NULL;
   1311c:	      |   moveq #0,d0
   1311e:	/-----|-- bra.s 13138 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   13120:	|  /--|-> movea.l 4(sp),a0
   13124:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   1312a:	|  |  \-> movea.l 4(sp),a0
   1312e:	|  |      move.l 8(a0),d0
   13132:	|  \----- bne.s 13120 <stackFindLast+0xa>

	return hunt;
   13134:	|         move.l 4(sp),d0
}
   13138:	\-------> rts

0001313a <stackSize>:

int stackSize (const struct stackHandler * me) {
   1313a:	       subq.l #8,sp
	int r = 0;
   1313c:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   13140:	       movea.l 12(sp),a0
   13144:	       move.l (a0),(sp)
	while (a) {
   13146:	   /-- bra.s 13152 <stackSize+0x18>
		r ++;
   13148:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   1314c:	|  |   movea.l (sp),a0
   1314e:	|  |   move.l 8(a0),(sp)
	while (a) {
   13152:	|  \-> tst.l (sp)
   13154:	\----- bne.s 13148 <stackSize+0xe>
	}
	return r;
   13156:	       move.l 4(sp),d0
}
   1315a:	       addq.l #8,sp
   1315c:	       rts

0001315e <trimStack>:

void trimStack (struct variableStack ** stack) {
   1315e:	subq.l #8,sp
   13160:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   13162:	movea.l 16(sp),a0
   13166:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   1316a:	movea.l 16(sp),a0
   1316e:	movea.l (a0),a0
   13170:	move.l 8(a0),d0
   13174:	movea.l 16(sp),a0
   13178:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   1317a:	move.l 8(sp),d0
   1317e:	move.l d0,-(sp)
   13180:	jsr 12a28 <unlinkVar>
   13186:	addq.l #4,sp
	FreeVec(killMe);
   13188:	move.l 8(sp),4(sp)
   1318e:	move.l 19b50 <SysBase>,d0
   13194:	movea.l d0,a6
   13196:	movea.l 4(sp),a1
   1319a:	jsr -690(a6)
   1319e:	nop
   131a0:	movea.l (sp)+,a6
   131a2:	addq.l #8,sp
   131a4:	rts

000131a6 <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   131a6:	pea 1725d <PutChar+0x20eb>
   131ac:	jsr 14822 <KPrintF>
   131b2:	addq.l #4,sp
	return FALSE;
   131b4:	clr.w d0
}
   131b6:	rts

000131b8 <stringWidth>:

int stringWidth (char * theText) {
   131b8:	       subq.l #8,sp
	int a = 0;
   131ba:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   131be:	       clr.l (sp)

	if (! fontTableSize) return 0;
   131c0:	       move.l 19ca4 <fontTableSize>,d0
   131c6:	/----- bne.s 131cc <stringWidth+0x14>
   131c8:	|      moveq #0,d0
   131ca:	|  /-- bra.s 131ce <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   131cc:	\--|-> move.l (sp),d0
}
   131ce:	   \-> addq.l #8,sp
   131d0:	       rts

000131d2 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   131d2:	pea 17284 <PutChar+0x2112>
   131d8:	jsr 14822 <KPrintF>
   131de:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   131e0:	moveq #1,d0
}
   131e2:	rts

000131e4 <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   131e4:	       lea -16(sp),sp
   131e8:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   131ea:	       moveq #36,d0
   131ec:	       move.l d0,16(sp)
   131f0:	       clr.l 12(sp)
   131f4:	       move.l 19b50 <SysBase>,d0
   131fa:	       movea.l d0,a6
   131fc:	       move.l 16(sp),d0
   13200:	       move.l 12(sp),d1
   13204:	       jsr -684(a6)
   13208:	       move.l d0,8(sp)
   1320c:	       move.l 8(sp),d0
   13210:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   13214:	   /-- bne.s 1321c <addScreenRegion+0x38>
   13216:	   |   clr.w d0
   13218:	/--|-- bra.w 1329c <addScreenRegion+0xb8>
    newRegion->di = di;
   1321c:	|  \-> movea.l 4(sp),a0
   13220:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   13226:	|      movea.l 4(sp),a0
   1322a:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1322e:	|      movea.l 4(sp),a0
   13232:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   13238:	|      movea.l 4(sp),a0
   1323c:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   13242:	|      movea.l 4(sp),a0
   13246:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1324c:	|      movea.l 4(sp),a0
   13250:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   13256:	|      movea.l 4(sp),a0
   1325a:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   13260:	|      move.l 52(sp),-(sp)
   13264:	|      jsr b700 <loadObjectType>
   1326a:	|      addq.l #4,sp
   1326c:	|      movea.l 4(sp),a0
   13270:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   13274:	|      move.l 19ca8 <allScreenRegions>,d0
   1327a:	|      movea.l 4(sp),a0
   1327e:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   13282:	|      move.l 4(sp),19ca8 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   1328a:	|      movea.l 4(sp),a0
   1328e:	|      move.l 28(a0),d0
   13292:	|      sne d0
   13294:	|      neg.b d0
   13296:	|      move.b d0,d0
   13298:	|      andi.w #255,d0
}
   1329c:	\----> movea.l (sp)+,a6
   1329e:	       lea 16(sp),sp
   132a2:	       rts

000132a4 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   132a4:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   132a6:	             move.l 19ca8 <allScreenRegions>,(sp)

	while (thisRegion) {
   132ac:	   /-------- bra.s 132c8 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   132ae:	/--|-------> movea.l (sp),a0
   132b0:	|  |         movea.l 28(a0),a0
   132b4:	|  |         move.l 4(a0),d0
   132b8:	|  |         cmp.l 8(sp),d0
   132bc:	|  |     /-- bne.s 132c2 <getRegionForObject+0x1e>
			return thisRegion;
   132be:	|  |     |   move.l (sp),d0
   132c0:	|  |  /--|-- bra.s 132ce <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   132c2:	|  |  |  \-> movea.l (sp),a0
   132c4:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   132c8:	|  \--|----> tst.l (sp)
   132ca:	\-----|----- bne.s 132ae <getRegionForObject+0xa>
	}

	return NULL;
   132cc:	      |      moveq #0,d0
}
   132ce:	      \----> addq.l #4,sp
   132d0:	             rts

000132d2 <killAllRegions>:

void killAllRegions () {
   132d2:	       subq.l #8,sp
   132d4:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   132d6:	   /-- bra.s 13318 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   132d8:	/--|-> move.l 19ca8 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   132e0:	|  |   movea.l 19ca8 <allScreenRegions>,a0
   132e6:	|  |   move.l 32(a0),d0
   132ea:	|  |   move.l d0,19ca8 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   132f0:	|  |   movea.l 8(sp),a0
   132f4:	|  |   move.l 28(a0),d0
   132f8:	|  |   move.l d0,-(sp)
   132fa:	|  |   jsr b9b8 <removeObjectType>
   13300:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   13302:	|  |   move.l 8(sp),4(sp)
   13308:	|  |   move.l 19b50 <SysBase>,d0
   1330e:	|  |   movea.l d0,a6
   13310:	|  |   movea.l 4(sp),a1
   13314:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   13318:	|  \-> move.l 19ca8 <allScreenRegions>,d0
   1331e:	\----- bne.s 132d8 <killAllRegions+0x6>
	}
	overRegion = NULL;
   13320:	       clr.l 19cac <overRegion>
}
   13326:	       nop
   13328:	       movea.l (sp)+,a6
   1332a:	       addq.l #8,sp
   1332c:	       rts

0001332e <loadRegions>:

void loadRegions (BPTR fp) {
   1332e:	       lea -24(sp),sp
   13332:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   13334:	       move.l 32(sp),-(sp)
   13338:	       jsr 6bc <get2bytes>
   1333e:	       addq.l #4,sp
   13340:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   13344:	       move.l #105640,20(sp)

	while (numRegions --) {
   1334c:	   /-- bra.w 1342a <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   13350:	/--|-> moveq #36,d0
   13352:	|  |   move.l d0,16(sp)
   13356:	|  |   clr.l 12(sp)
   1335a:	|  |   move.l 19b50 <SysBase>,d0
   13360:	|  |   movea.l d0,a6
   13362:	|  |   move.l 16(sp),d0
   13366:	|  |   move.l 12(sp),d1
   1336a:	|  |   jsr -684(a6)
   1336e:	|  |   move.l d0,8(sp)
   13372:	|  |   move.l 8(sp),d0
   13376:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   1337a:	|  |   movea.l 20(sp),a0
   1337e:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   13382:	|  |   moveq #32,d1
   13384:	|  |   add.l 4(sp),d1
   13388:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   1338c:	|  |   move.l 32(sp),-(sp)
   13390:	|  |   jsr 6bc <get2bytes>
   13396:	|  |   addq.l #4,sp
   13398:	|  |   movea.l 4(sp),a0
   1339c:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   1339e:	|  |   move.l 32(sp),-(sp)
   133a2:	|  |   jsr 6bc <get2bytes>
   133a8:	|  |   addq.l #4,sp
   133aa:	|  |   movea.l 4(sp),a0
   133ae:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   133b2:	|  |   move.l 32(sp),-(sp)
   133b6:	|  |   jsr 6bc <get2bytes>
   133bc:	|  |   addq.l #4,sp
   133be:	|  |   movea.l 4(sp),a0
   133c2:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   133c6:	|  |   move.l 32(sp),-(sp)
   133ca:	|  |   jsr 6bc <get2bytes>
   133d0:	|  |   addq.l #4,sp
   133d2:	|  |   movea.l 4(sp),a0
   133d6:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   133da:	|  |   move.l 32(sp),-(sp)
   133de:	|  |   jsr 6bc <get2bytes>
   133e4:	|  |   addq.l #4,sp
   133e6:	|  |   movea.l 4(sp),a0
   133ea:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   133ee:	|  |   move.l 32(sp),-(sp)
   133f2:	|  |   jsr 6bc <get2bytes>
   133f8:	|  |   addq.l #4,sp
   133fa:	|  |   movea.l 4(sp),a0
   133fe:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   13402:	|  |   move.l 32(sp),-(sp)
   13406:	|  |   jsr 6bc <get2bytes>
   1340c:	|  |   addq.l #4,sp
   1340e:	|  |   movea.l 4(sp),a0
   13412:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   13416:	|  |   move.l 32(sp),-(sp)
   1341a:	|  |   jsr b6ae <loadObjectRef>
   13420:	|  |   addq.l #4,sp
   13422:	|  |   movea.l 4(sp),a0
   13426:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   1342a:	|  \-> move.l 24(sp),d0
   1342e:	|      move.l d0,d1
   13430:	|      subq.l #1,d1
   13432:	|      move.l d1,24(sp)
   13436:	|      tst.l d0
   13438:	\----- bne.w 13350 <loadRegions+0x22>
	}
	* pointy = NULL;
   1343c:	       movea.l 20(sp),a0
   13440:	       clr.l (a0)
}
   13442:	       nop
   13444:	       movea.l (sp)+,a6
   13446:	       lea 24(sp),sp
   1344a:	       rts

0001344c <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   1344c:	             lea -12(sp),sp
   13450:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   13452:	             move.l #105640,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   1345a:	   /-------- bra.s 134d4 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   1345c:	/--|-------> movea.l 12(sp),a0
   13460:	|  |         movea.l (a0),a0
   13462:	|  |         movea.l 28(a0),a0
   13466:	|  |         move.l 4(a0),d0
   1346a:	|  |         cmp.l 20(sp),d0
   1346e:	|  |  /----- bne.s 134c6 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   13470:	|  |  |      movea.l 12(sp),a0
   13474:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   13478:	|  |  |      movea.l 8(sp),a0
   1347c:	|  |  |      move.l 32(a0),d0
   13480:	|  |  |      movea.l 12(sp),a0
   13484:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   13486:	|  |  |      movea.l 8(sp),a0
   1348a:	|  |  |      move.l 28(a0),d0
   1348e:	|  |  |      move.l d0,-(sp)
   13490:	|  |  |      jsr b9b8 <removeObjectType>
   13496:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   13498:	|  |  |      move.l 19cac <overRegion>,d0
   1349e:	|  |  |      cmp.l 8(sp),d0
   134a2:	|  |  |  /-- bne.s 134aa <removeScreenRegion+0x5e>
   134a4:	|  |  |  |   clr.l 19cac <overRegion>
            FreeVec(killMe);
   134aa:	|  |  |  \-> move.l 8(sp),4(sp)
   134b0:	|  |  |      move.l 19b50 <SysBase>,d0
   134b6:	|  |  |      movea.l d0,a6
   134b8:	|  |  |      movea.l 4(sp),a1
   134bc:	|  |  |      jsr -690(a6)
            killMe = NULL;
   134c0:	|  |  |      clr.l 8(sp)
   134c4:	|  +--|----- bra.s 134d4 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   134c6:	|  |  \----> movea.l 12(sp),a0
   134ca:	|  |         move.l (a0),d0
   134cc:	|  |         moveq #32,d1
   134ce:	|  |         add.l d0,d1
   134d0:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   134d4:	|  \-------> movea.l 12(sp),a0
   134d8:	|            move.l (a0),d0
   134da:	\----------- bne.s 1345c <removeScreenRegion+0x10>
        }
    }
}
   134dc:	             nop
   134de:	             nop
   134e0:	             movea.l (sp)+,a6
   134e2:	             lea 12(sp),sp
   134e6:	             rts

000134e8 <saveRegions>:

void saveRegions (BPTR fp) {
   134e8:	       subq.l #8,sp
	int numRegions = 0;
   134ea:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   134ee:	       move.l 19ca8 <allScreenRegions>,(sp)
	while (thisRegion) {
   134f4:	   /-- bra.s 13500 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   134f6:	/--|-> movea.l (sp),a0
   134f8:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   134fc:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   13500:	|  \-> tst.l (sp)
   13502:	\----- bne.s 134f6 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   13504:	       move.l 12(sp),-(sp)
   13508:	       move.l 8(sp),-(sp)
   1350c:	       jsr 8d0 <put2bytes>
   13512:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   13514:	       move.l 19ca8 <allScreenRegions>,(sp)
	while (thisRegion) {
   1351a:	/----- bra.w 135c2 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   1351e:	|  /-> movea.l (sp),a0
   13520:	|  |   move.l (a0),d0
   13522:	|  |   move.l 12(sp),-(sp)
   13526:	|  |   move.l d0,-(sp)
   13528:	|  |   jsr 8d0 <put2bytes>
   1352e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   13530:	|  |   movea.l (sp),a0
   13532:	|  |   move.l 4(a0),d0
   13536:	|  |   move.l 12(sp),-(sp)
   1353a:	|  |   move.l d0,-(sp)
   1353c:	|  |   jsr 8d0 <put2bytes>
   13542:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   13544:	|  |   movea.l (sp),a0
   13546:	|  |   move.l 8(a0),d0
   1354a:	|  |   move.l 12(sp),-(sp)
   1354e:	|  |   move.l d0,-(sp)
   13550:	|  |   jsr 8d0 <put2bytes>
   13556:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   13558:	|  |   movea.l (sp),a0
   1355a:	|  |   move.l 12(a0),d0
   1355e:	|  |   move.l 12(sp),-(sp)
   13562:	|  |   move.l d0,-(sp)
   13564:	|  |   jsr 8d0 <put2bytes>
   1356a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   1356c:	|  |   movea.l (sp),a0
   1356e:	|  |   move.l 16(a0),d0
   13572:	|  |   move.l 12(sp),-(sp)
   13576:	|  |   move.l d0,-(sp)
   13578:	|  |   jsr 8d0 <put2bytes>
   1357e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   13580:	|  |   movea.l (sp),a0
   13582:	|  |   move.l 20(a0),d0
   13586:	|  |   move.l 12(sp),-(sp)
   1358a:	|  |   move.l d0,-(sp)
   1358c:	|  |   jsr 8d0 <put2bytes>
   13592:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   13594:	|  |   movea.l (sp),a0
   13596:	|  |   move.l 24(a0),d0
   1359a:	|  |   move.l 12(sp),-(sp)
   1359e:	|  |   move.l d0,-(sp)
   135a0:	|  |   jsr 8d0 <put2bytes>
   135a6:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   135a8:	|  |   movea.l (sp),a0
   135aa:	|  |   move.l 28(a0),d0
   135ae:	|  |   move.l 12(sp),-(sp)
   135b2:	|  |   move.l d0,-(sp)
   135b4:	|  |   jsr ba58 <saveObjectRef>
   135ba:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   135bc:	|  |   movea.l (sp),a0
   135be:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   135c2:	\--|-> tst.l (sp)
   135c4:	   \-- bne.w 1351e <saveRegions+0x36>
	}
}
   135c8:	       nop
   135ca:	       nop
   135cc:	       addq.l #8,sp
   135ce:	       rts

000135d0 <showBoxes>:

void showBoxes () {
   135d0:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   135d2:	       move.l 19ca8 <allScreenRegions>,(sp)

	while (huntRegion) {
   135d8:	/----- bra.w 13674 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   135dc:	|  /-> movea.l (sp),a0
   135de:	|  |   move.l 12(a0),d0
   135e2:	|  |   movea.l d0,a1
   135e4:	|  |   movea.l (sp),a0
   135e6:	|  |   move.l 4(a0),d0
   135ea:	|  |   move.l d0,d1
   135ec:	|  |   movea.l (sp),a0
   135ee:	|  |   move.l (a0),d0
   135f0:	|  |   move.l a1,-(sp)
   135f2:	|  |   move.l d1,-(sp)
   135f4:	|  |   move.l d0,-(sp)
   135f6:	|  |   jsr b348 <drawVerticalLine>
   135fc:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   13600:	|  |   movea.l (sp),a0
   13602:	|  |   move.l 12(a0),d0
   13606:	|  |   movea.l d0,a1
   13608:	|  |   movea.l (sp),a0
   1360a:	|  |   move.l 4(a0),d0
   1360e:	|  |   move.l d0,d1
   13610:	|  |   movea.l (sp),a0
   13612:	|  |   move.l 8(a0),d0
   13616:	|  |   move.l a1,-(sp)
   13618:	|  |   move.l d1,-(sp)
   1361a:	|  |   move.l d0,-(sp)
   1361c:	|  |   jsr b348 <drawVerticalLine>
   13622:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   13626:	|  |   movea.l (sp),a0
   13628:	|  |   move.l 8(a0),d0
   1362c:	|  |   movea.l d0,a1
   1362e:	|  |   movea.l (sp),a0
   13630:	|  |   move.l 4(a0),d0
   13634:	|  |   move.l d0,d1
   13636:	|  |   movea.l (sp),a0
   13638:	|  |   move.l (a0),d0
   1363a:	|  |   move.l a1,-(sp)
   1363c:	|  |   move.l d1,-(sp)
   1363e:	|  |   move.l d0,-(sp)
   13640:	|  |   jsr b322 <drawHorizontalLine>
   13646:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   1364a:	|  |   movea.l (sp),a0
   1364c:	|  |   move.l 8(a0),d0
   13650:	|  |   movea.l d0,a1
   13652:	|  |   movea.l (sp),a0
   13654:	|  |   move.l 12(a0),d0
   13658:	|  |   move.l d0,d1
   1365a:	|  |   movea.l (sp),a0
   1365c:	|  |   move.l (a0),d0
   1365e:	|  |   move.l a1,-(sp)
   13660:	|  |   move.l d1,-(sp)
   13662:	|  |   move.l d0,-(sp)
   13664:	|  |   jsr b322 <drawHorizontalLine>
   1366a:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   1366e:	|  |   movea.l (sp),a0
   13670:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   13674:	\--|-> tst.l (sp)
   13676:	   \-- bne.w 135dc <showBoxes+0xc>
	}
   1367a:	       nop
   1367c:	       nop
   1367e:	       addq.l #4,sp
   13680:	       rts

00013682 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   13682:	       lea -32(sp),sp
   13686:	       move.l d3,-(sp)
   13688:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   1368a:	       move.l 60(sp),d0
   1368e:	       sub.l 52(sp),d0
   13692:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   13696:	       move.l 64(sp),d0
   1369a:	       sub.l 56(sp),d0
   1369e:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   136a2:	       move.l 68(sp),d0
   136a6:	       sub.l 52(sp),d0
   136aa:	       move.l 36(sp),-(sp)
   136ae:	       move.l d0,-(sp)
   136b0:	       jsr 1505c <__mulsi3>
   136b6:	       addq.l #8,sp
   136b8:	       move.l d0,d2
   136ba:	       move.l 72(sp),d0
   136be:	       sub.l 56(sp),d0
   136c2:	       move.l 32(sp),-(sp)
   136c6:	       move.l d0,-(sp)
   136c8:	       jsr 1505c <__mulsi3>
   136ce:	       addq.l #8,sp
   136d0:	       add.l d2,d0
   136d2:	       move.l d0,-(sp)
   136d4:	       jsr 14a9a <__floatsidf>
   136da:	       addq.l #4,sp
   136dc:	       move.l d0,16(sp)
   136e0:	       move.l d1,20(sp)
   136e4:	       move.l 16(sp),24(sp)
   136ea:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   136f0:	       move.l 36(sp),-(sp)
   136f4:	       move.l 40(sp),-(sp)
   136f8:	       jsr 1505c <__mulsi3>
   136fe:	       addq.l #8,sp
   13700:	       move.l d0,d2
   13702:	       move.l 32(sp),-(sp)
   13706:	       move.l 36(sp),-(sp)
   1370a:	       jsr 1505c <__mulsi3>
   13710:	       addq.l #8,sp
   13712:	       add.l d2,d0
   13714:	       move.l d0,-(sp)
   13716:	       jsr 14a9a <__floatsidf>
   1371c:	       addq.l #4,sp
   1371e:	       move.l d1,-(sp)
   13720:	       move.l d0,-(sp)
   13722:	       move.l 36(sp),-(sp)
   13726:	       move.l 36(sp),-(sp)
   1372a:	       jsr 14924 <__divdf3>
   13730:	       lea 16(sp),sp
   13734:	       move.l d0,8(sp)
   13738:	       move.l d1,12(sp)
   1373c:	       move.l 8(sp),24(sp)
   13742:	       move.l 12(sp),28(sp)

	if (m < 0) {
   13748:	       clr.l -(sp)
   1374a:	       clr.l -(sp)
   1374c:	       move.l 36(sp),-(sp)
   13750:	       move.l 36(sp),-(sp)
   13754:	       jsr 14cb2 <__ltdf2>
   1375a:	       lea 16(sp),sp
   1375e:	       tst.l d0
   13760:	   /-- bge.s 13776 <closestPointOnLine+0xf4>
		*closestX = x1;
   13762:	   |   movea.l 44(sp),a0
   13766:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   1376a:	   |   movea.l 48(sp),a0
   1376e:	   |   move.l 56(sp),(a0)
   13772:	/--|-- bra.w 13858 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   13776:	|  \-> clr.l -(sp)
   13778:	|      move.l #1072693248,-(sp)
   1377e:	|      move.l 36(sp),-(sp)
   13782:	|      move.l 36(sp),-(sp)
   13786:	|      jsr 14bf8 <__gtdf2>
   1378c:	|      lea 16(sp),sp
   13790:	|      tst.l d0
   13792:	|  /-- ble.s 137a8 <closestPointOnLine+0x126>
		*closestX = x2;
   13794:	|  |   movea.l 44(sp),a0
   13798:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   1379c:	|  |   movea.l 48(sp),a0
   137a0:	|  |   move.l 64(sp),(a0)
   137a4:	+--|-- bra.w 13858 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   137a8:	|  \-> move.l 52(sp),-(sp)
   137ac:	|      jsr 14a9a <__floatsidf>
   137b2:	|      addq.l #4,sp
   137b4:	|      move.l d0,d2
   137b6:	|      move.l d1,d3
   137b8:	|      move.l 36(sp),-(sp)
   137bc:	|      jsr 14a9a <__floatsidf>
   137c2:	|      addq.l #4,sp
   137c4:	|      move.l 28(sp),-(sp)
   137c8:	|      move.l 28(sp),-(sp)
   137cc:	|      move.l d1,-(sp)
   137ce:	|      move.l d0,-(sp)
   137d0:	|      jsr 14b2a <__muldf3>
   137d6:	|      lea 16(sp),sp
   137da:	|      move.l d1,-(sp)
   137dc:	|      move.l d0,-(sp)
   137de:	|      move.l d3,-(sp)
   137e0:	|      move.l d2,-(sp)
   137e2:	|      jsr 148c2 <__adddf3>
   137e8:	|      lea 16(sp),sp
   137ec:	|      move.l d1,-(sp)
   137ee:	|      move.l d0,-(sp)
   137f0:	|      jsr 14a32 <__fixdfsi>
   137f6:	|      addq.l #8,sp
   137f8:	|      movea.l 44(sp),a0
   137fc:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   137fe:	|      move.l 56(sp),-(sp)
   13802:	|      jsr 14a9a <__floatsidf>
   13808:	|      addq.l #4,sp
   1380a:	|      move.l d0,d2
   1380c:	|      move.l d1,d3
   1380e:	|      move.l 32(sp),-(sp)
   13812:	|      jsr 14a9a <__floatsidf>
   13818:	|      addq.l #4,sp
   1381a:	|      move.l 28(sp),-(sp)
   1381e:	|      move.l 28(sp),-(sp)
   13822:	|      move.l d1,-(sp)
   13824:	|      move.l d0,-(sp)
   13826:	|      jsr 14b2a <__muldf3>
   1382c:	|      lea 16(sp),sp
   13830:	|      move.l d1,-(sp)
   13832:	|      move.l d0,-(sp)
   13834:	|      move.l d3,-(sp)
   13836:	|      move.l d2,-(sp)
   13838:	|      jsr 148c2 <__adddf3>
   1383e:	|      lea 16(sp),sp
   13842:	|      move.l d1,-(sp)
   13844:	|      move.l d0,-(sp)
   13846:	|      jsr 14a32 <__fixdfsi>
   1384c:	|      addq.l #8,sp
   1384e:	|      movea.l 48(sp),a0
   13852:	|      move.l d0,(a0)
		return TRUE;
   13854:	|      moveq #1,d0
   13856:	|  /-- bra.s 1385a <closestPointOnLine+0x1d8>
	}
	return FALSE;
   13858:	\--|-> clr.w d0
}
   1385a:	   \-> move.l (sp)+,d2
   1385c:	       move.l (sp)+,d3
   1385e:	       lea 32(sp),sp
   13862:	       rts

00013864 <drawFloor>:

void drawFloor() {
   13864:	                lea -12(sp),sp
   13868:	                move.l d3,-(sp)
   1386a:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1386c:	                clr.l 16(sp)
   13870:	   /----------- bra.w 13a84 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   13874:	/--|----------> movea.l 19cb0 <currentFloor>,a0
   1387a:	|  |            move.l 12(a0),d1
   1387e:	|  |            move.l 16(sp),d0
   13882:	|  |            lsl.l #3,d0
   13884:	|  |            movea.l d1,a0
   13886:	|  |            adda.l d0,a0
   13888:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   1388c:	|  |            moveq #1,d0
   1388e:	|  |            cmp.l 8(sp),d0
   13892:	|  |  /-------- bge.w 13a80 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   13896:	|  |  |         moveq #1,d0
   13898:	|  |  |         move.l d0,12(sp)
   1389c:	|  |  |     /-- bra.w 13996 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   138a0:	|  |  |  /--|-> movea.l 19cb0 <currentFloor>,a0
   138a6:	|  |  |  |  |   move.l 4(a0),d1
   138aa:	|  |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   138b0:	|  |  |  |  |   movea.l 12(a0),a0
   138b4:	|  |  |  |  |   move.l 16(sp),d0
   138b8:	|  |  |  |  |   lsl.l #3,d0
   138ba:	|  |  |  |  |   adda.l d0,a0
   138bc:	|  |  |  |  |   movea.l 4(a0),a0
   138c0:	|  |  |  |  |   move.l 12(sp),d0
   138c4:	|  |  |  |  |   add.l d0,d0
   138c6:	|  |  |  |  |   add.l d0,d0
   138c8:	|  |  |  |  |   adda.l d0,a0
   138ca:	|  |  |  |  |   move.l (a0),d0
   138cc:	|  |  |  |  |   lsl.l #3,d0
   138ce:	|  |  |  |  |   movea.l d1,a0
   138d0:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   138d2:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   138d6:	|  |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   138dc:	|  |  |  |  |   move.l 4(a0),d1
   138e0:	|  |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   138e6:	|  |  |  |  |   movea.l 12(a0),a0
   138ea:	|  |  |  |  |   move.l 16(sp),d0
   138ee:	|  |  |  |  |   lsl.l #3,d0
   138f0:	|  |  |  |  |   adda.l d0,a0
   138f2:	|  |  |  |  |   movea.l 4(a0),a0
   138f6:	|  |  |  |  |   move.l 12(sp),d0
   138fa:	|  |  |  |  |   add.l d0,d0
   138fc:	|  |  |  |  |   add.l d0,d0
   138fe:	|  |  |  |  |   adda.l d0,a0
   13900:	|  |  |  |  |   move.l (a0),d0
   13902:	|  |  |  |  |   lsl.l #3,d0
   13904:	|  |  |  |  |   movea.l d1,a0
   13906:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   13908:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1390a:	|  |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   13910:	|  |  |  |  |   move.l 4(a0),d1
   13914:	|  |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   1391a:	|  |  |  |  |   movea.l 12(a0),a0
   1391e:	|  |  |  |  |   move.l 16(sp),d0
   13922:	|  |  |  |  |   lsl.l #3,d0
   13924:	|  |  |  |  |   adda.l d0,a0
   13926:	|  |  |  |  |   movea.l 4(a0),a0
   1392a:	|  |  |  |  |   move.l 12(sp),d0
   1392e:	|  |  |  |  |   addi.l #1073741823,d0
   13934:	|  |  |  |  |   add.l d0,d0
   13936:	|  |  |  |  |   add.l d0,d0
   13938:	|  |  |  |  |   adda.l d0,a0
   1393a:	|  |  |  |  |   move.l (a0),d0
   1393c:	|  |  |  |  |   lsl.l #3,d0
   1393e:	|  |  |  |  |   movea.l d1,a0
   13940:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   13942:	|  |  |  |  |   move.l 4(a0),d1
   13946:	|  |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   1394c:	|  |  |  |  |   move.l 4(a0),d3
   13950:	|  |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   13956:	|  |  |  |  |   movea.l 12(a0),a0
   1395a:	|  |  |  |  |   move.l 16(sp),d0
   1395e:	|  |  |  |  |   lsl.l #3,d0
   13960:	|  |  |  |  |   adda.l d0,a0
   13962:	|  |  |  |  |   movea.l 4(a0),a0
   13966:	|  |  |  |  |   move.l 12(sp),d0
   1396a:	|  |  |  |  |   addi.l #1073741823,d0
   13970:	|  |  |  |  |   add.l d0,d0
   13972:	|  |  |  |  |   add.l d0,d0
   13974:	|  |  |  |  |   adda.l d0,a0
   13976:	|  |  |  |  |   move.l (a0),d0
   13978:	|  |  |  |  |   lsl.l #3,d0
   1397a:	|  |  |  |  |   movea.l d3,a0
   1397c:	|  |  |  |  |   adda.l d0,a0
   1397e:	|  |  |  |  |   move.l (a0),d0
   13980:	|  |  |  |  |   move.l d2,-(sp)
   13982:	|  |  |  |  |   move.l a1,-(sp)
   13984:	|  |  |  |  |   move.l d1,-(sp)
   13986:	|  |  |  |  |   move.l d0,-(sp)
   13988:	|  |  |  |  |   jsr 24f8 <drawLine>
   1398e:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   13992:	|  |  |  |  |   addq.l #1,12(sp)
   13996:	|  |  |  |  \-> move.l 12(sp),d0
   1399a:	|  |  |  |      cmp.l 8(sp),d0
   1399e:	|  |  |  \----- blt.w 138a0 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   139a2:	|  |  |         movea.l 19cb0 <currentFloor>,a0
   139a8:	|  |  |         move.l 4(a0),d1
   139ac:	|  |  |         movea.l 19cb0 <currentFloor>,a0
   139b2:	|  |  |         movea.l 12(a0),a0
   139b6:	|  |  |         move.l 16(sp),d0
   139ba:	|  |  |         lsl.l #3,d0
   139bc:	|  |  |         adda.l d0,a0
   139be:	|  |  |         movea.l 4(a0),a0
   139c2:	|  |  |         move.l 8(sp),d0
   139c6:	|  |  |         addi.l #1073741823,d0
   139cc:	|  |  |         add.l d0,d0
   139ce:	|  |  |         add.l d0,d0
   139d0:	|  |  |         adda.l d0,a0
   139d2:	|  |  |         move.l (a0),d0
   139d4:	|  |  |         lsl.l #3,d0
   139d6:	|  |  |         movea.l d1,a0
   139d8:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   139da:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   139de:	|  |  |         movea.l 19cb0 <currentFloor>,a0
   139e4:	|  |  |         move.l 4(a0),d1
   139e8:	|  |  |         movea.l 19cb0 <currentFloor>,a0
   139ee:	|  |  |         movea.l 12(a0),a0
   139f2:	|  |  |         move.l 16(sp),d0
   139f6:	|  |  |         lsl.l #3,d0
   139f8:	|  |  |         adda.l d0,a0
   139fa:	|  |  |         movea.l 4(a0),a0
   139fe:	|  |  |         move.l 8(sp),d0
   13a02:	|  |  |         addi.l #1073741823,d0
   13a08:	|  |  |         add.l d0,d0
   13a0a:	|  |  |         add.l d0,d0
   13a0c:	|  |  |         adda.l d0,a0
   13a0e:	|  |  |         move.l (a0),d0
   13a10:	|  |  |         lsl.l #3,d0
   13a12:	|  |  |         movea.l d1,a0
   13a14:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   13a16:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   13a18:	|  |  |         movea.l 19cb0 <currentFloor>,a0
   13a1e:	|  |  |         move.l 4(a0),d1
   13a22:	|  |  |         movea.l 19cb0 <currentFloor>,a0
   13a28:	|  |  |         movea.l 12(a0),a0
   13a2c:	|  |  |         move.l 16(sp),d0
   13a30:	|  |  |         lsl.l #3,d0
   13a32:	|  |  |         adda.l d0,a0
   13a34:	|  |  |         movea.l 4(a0),a0
   13a38:	|  |  |         move.l (a0),d0
   13a3a:	|  |  |         lsl.l #3,d0
   13a3c:	|  |  |         movea.l d1,a0
   13a3e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   13a40:	|  |  |         move.l 4(a0),d1
   13a44:	|  |  |         movea.l 19cb0 <currentFloor>,a0
   13a4a:	|  |  |         move.l 4(a0),d3
   13a4e:	|  |  |         movea.l 19cb0 <currentFloor>,a0
   13a54:	|  |  |         movea.l 12(a0),a0
   13a58:	|  |  |         move.l 16(sp),d0
   13a5c:	|  |  |         lsl.l #3,d0
   13a5e:	|  |  |         adda.l d0,a0
   13a60:	|  |  |         movea.l 4(a0),a0
   13a64:	|  |  |         move.l (a0),d0
   13a66:	|  |  |         lsl.l #3,d0
   13a68:	|  |  |         movea.l d3,a0
   13a6a:	|  |  |         adda.l d0,a0
   13a6c:	|  |  |         move.l (a0),d0
   13a6e:	|  |  |         move.l d2,-(sp)
   13a70:	|  |  |         move.l a1,-(sp)
   13a72:	|  |  |         move.l d1,-(sp)
   13a74:	|  |  |         move.l d0,-(sp)
   13a76:	|  |  |         jsr 24f8 <drawLine>
   13a7c:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   13a80:	|  |  \-------> addq.l #1,16(sp)
   13a84:	|  \----------> movea.l 19cb0 <currentFloor>,a0
   13a8a:	|               move.l 8(a0),d0
   13a8e:	|               cmp.l 16(sp),d0
   13a92:	\-------------- bgt.w 13874 <drawFloor+0x10>
        }
    }
}
   13a96:	                nop
   13a98:	                nop
   13a9a:	                move.l (sp)+,d2
   13a9c:	                move.l (sp)+,d3
   13a9e:	                lea 12(sp),sp
   13aa2:	                rts

00013aa4 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   13aa4:	                      lea -12(sp),sp
    int sharedVertices = 0;
   13aa8:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   13aac:	                      clr.l 4(sp)
   13ab0:	   /----------------- bra.w 13b42 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   13ab4:	/--|----------------> clr.l (sp)
   13ab6:	|  |     /----------- bra.s 13b32 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   13ab8:	|  |  /--|----------> movea.l 16(sp),a0
   13abc:	|  |  |  |            move.l 4(a0),d1
   13ac0:	|  |  |  |            move.l 4(sp),d0
   13ac4:	|  |  |  |            add.l d0,d0
   13ac6:	|  |  |  |            add.l d0,d0
   13ac8:	|  |  |  |            movea.l d1,a0
   13aca:	|  |  |  |            adda.l d0,a0
   13acc:	|  |  |  |            move.l (a0),d1
   13ace:	|  |  |  |            movea.l 20(sp),a0
   13ad2:	|  |  |  |            movea.l 4(a0),a0
   13ad6:	|  |  |  |            move.l (sp),d0
   13ad8:	|  |  |  |            add.l d0,d0
   13ada:	|  |  |  |            add.l d0,d0
   13adc:	|  |  |  |            adda.l d0,a0
   13ade:	|  |  |  |            move.l (a0),d0
   13ae0:	|  |  |  |            cmp.l d1,d0
   13ae2:	|  |  |  |  /-------- bne.s 13b30 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   13ae4:	|  |  |  |  |         move.l 8(sp),d0
   13ae8:	|  |  |  |  |         move.l d0,d1
   13aea:	|  |  |  |  |         addq.l #1,d1
   13aec:	|  |  |  |  |         move.l d1,8(sp)
   13af0:	|  |  |  |  |         tst.l d0
   13af2:	|  |  |  |  |     /-- beq.s 13b14 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   13af4:	|  |  |  |  |     |   movea.l 16(sp),a0
   13af8:	|  |  |  |  |     |   move.l 4(a0),d1
   13afc:	|  |  |  |  |     |   move.l 4(sp),d0
   13b00:	|  |  |  |  |     |   add.l d0,d0
   13b02:	|  |  |  |  |     |   add.l d0,d0
   13b04:	|  |  |  |  |     |   movea.l d1,a0
   13b06:	|  |  |  |  |     |   adda.l d0,a0
   13b08:	|  |  |  |  |     |   move.l (a0),d0
   13b0a:	|  |  |  |  |     |   movea.l 28(sp),a0
   13b0e:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   13b10:	|  |  |  |  |     |   moveq #1,d0
   13b12:	|  |  |  |  |  /--|-- bra.s 13b52 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   13b14:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   13b18:	|  |  |  |  |  |      move.l 4(a0),d1
   13b1c:	|  |  |  |  |  |      move.l 4(sp),d0
   13b20:	|  |  |  |  |  |      add.l d0,d0
   13b22:	|  |  |  |  |  |      add.l d0,d0
   13b24:	|  |  |  |  |  |      movea.l d1,a0
   13b26:	|  |  |  |  |  |      adda.l d0,a0
   13b28:	|  |  |  |  |  |      move.l (a0),d0
   13b2a:	|  |  |  |  |  |      movea.l 24(sp),a0
   13b2e:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   13b30:	|  |  |  |  \--|----> addq.l #1,(sp)
   13b32:	|  |  |  \-----|----> movea.l 20(sp),a0
   13b36:	|  |  |        |      move.l (a0),d0
   13b38:	|  |  |        |      cmp.l (sp),d0
   13b3a:	|  |  \--------|----- bgt.w 13ab8 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   13b3e:	|  |           |      addq.l #1,4(sp)
   13b42:	|  \-----------|----> movea.l 16(sp),a0
   13b46:	|              |      move.l (a0),d0
   13b48:	|              |      cmp.l 4(sp),d0
   13b4c:	\--------------|----- bgt.w 13ab4 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   13b50:	               |      clr.w d0
}
   13b52:	               \----> lea 12(sp),sp
   13b56:	                      rts

00013b58 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   13b58:	movea.l 19cb0 <currentFloor>,a0
   13b5e:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   13b62:	movea.l 19cb0 <currentFloor>,a0
   13b68:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   13b6c:	movea.l 19cb0 <currentFloor>,a0
   13b72:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   13b76:	movea.l 19cb0 <currentFloor>,a0
   13b7c:	clr.l 16(a0)
}
   13b80:	nop
   13b82:	rts

00013b84 <inFloor>:

int inFloor (int x, int y) {
   13b84:	          subq.l #8,sp
	int i, r = -1;
   13b86:	          moveq #-1,d0
   13b88:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   13b8a:	          clr.l 4(sp)
   13b8e:	   /----- bra.s 13bc2 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   13b90:	/--|----> movea.l 19cb0 <currentFloor>,a0
   13b96:	|  |      move.l 12(a0),d1
   13b9a:	|  |      move.l 4(sp),d0
   13b9e:	|  |      lsl.l #3,d0
   13ba0:	|  |      add.l d1,d0
   13ba2:	|  |      move.l 16(sp),-(sp)
   13ba6:	|  |      move.l 16(sp),-(sp)
   13baa:	|  |      move.l d0,-(sp)
   13bac:	|  |      jsr 13d8e <pointInFloorPolygon>
   13bb2:	|  |      lea 12(sp),sp
   13bb6:	|  |      tst.w d0
   13bb8:	|  |  /-- beq.s 13bbe <inFloor+0x3a>
			r = i;
   13bba:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   13bbe:	|  |  \-> addq.l #1,4(sp)
   13bc2:	|  \----> movea.l 19cb0 <currentFloor>,a0
   13bc8:	|         move.l 8(a0),d0
   13bcc:	|         cmp.l 4(sp),d0
   13bd0:	\-------- bgt.s 13b90 <inFloor+0xc>

	return r;
   13bd2:	          move.l (sp),d0
}
   13bd4:	          addq.l #8,sp
   13bd6:	          rts

00013bd8 <initFloor>:

BOOL initFloor () {
   13bd8:	       lea -12(sp),sp
   13bdc:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   13bde:	       moveq #20,d0
   13be0:	       move.l d0,12(sp)
   13be4:	       clr.l 8(sp)
   13be8:	       move.l 19b50 <SysBase>,d0
   13bee:	       movea.l d0,a6
   13bf0:	       move.l 12(sp),d0
   13bf4:	       move.l 8(sp),d1
   13bf8:	       jsr -684(a6)
   13bfc:	       move.l d0,4(sp)
   13c00:	       move.l 4(sp),d0
   13c04:	       move.l d0,19cb0 <currentFloor>

    if(currentFloor == 0) {
   13c0a:	       move.l 19cb0 <currentFloor>,d0
   13c10:	/----- bne.s 13c24 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   13c12:	|      pea 172a7 <PutChar+0x2135>
   13c18:	|      jsr 14822 <KPrintF>
   13c1e:	|      addq.l #4,sp
        return FALSE;
   13c20:	|      clr.w d0
   13c22:	|  /-- bra.s 13c2c <initFloor+0x54>
    }

	noFloor ();
   13c24:	\--|-> jsr 13b58 <noFloor>
	return TRUE;
   13c2a:	   |   moveq #1,d0
}
   13c2c:	   \-> movea.l (sp)+,a6
   13c2e:	       lea 12(sp),sp
   13c32:	       rts

00013c34 <killFloor>:

void killFloor () {
   13c34:	       lea -24(sp),sp
   13c38:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   13c3a:	       clr.l 24(sp)
   13c3e:	   /-- bra.s 13c98 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   13c40:	/--|-> movea.l 19cb0 <currentFloor>,a0
   13c46:	|  |   move.l 12(a0),d1
   13c4a:	|  |   move.l 24(sp),d0
   13c4e:	|  |   lsl.l #3,d0
   13c50:	|  |   movea.l d1,a0
   13c52:	|  |   adda.l d0,a0
   13c54:	|  |   move.l 4(a0),8(sp)
   13c5a:	|  |   move.l 19b50 <SysBase>,d0
   13c60:	|  |   movea.l d0,a6
   13c62:	|  |   movea.l 8(sp),a1
   13c66:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   13c6a:	|  |   movea.l 19cb0 <currentFloor>,a0
   13c70:	|  |   move.l 16(a0),d1
   13c74:	|  |   move.l 24(sp),d0
   13c78:	|  |   add.l d0,d0
   13c7a:	|  |   add.l d0,d0
   13c7c:	|  |   movea.l d1,a0
   13c7e:	|  |   adda.l d0,a0
   13c80:	|  |   move.l (a0),4(sp)
   13c84:	|  |   move.l 19b50 <SysBase>,d0
   13c8a:	|  |   movea.l d0,a6
   13c8c:	|  |   movea.l 4(sp),a1
   13c90:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   13c94:	|  |   addq.l #1,24(sp)
   13c98:	|  \-> movea.l 19cb0 <currentFloor>,a0
   13c9e:	|      move.l 8(a0),d0
   13ca2:	|      cmp.l 24(sp),d0
   13ca6:	\----- bgt.s 13c40 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   13ca8:	       movea.l 19cb0 <currentFloor>,a0
   13cae:	       move.l 12(a0),20(sp)
   13cb4:	       move.l 19b50 <SysBase>,d0
   13cba:	       movea.l d0,a6
   13cbc:	       movea.l 20(sp),a1
   13cc0:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   13cc4:	       movea.l 19cb0 <currentFloor>,a0
   13cca:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   13cce:	       movea.l 19cb0 <currentFloor>,a0
   13cd4:	       move.l 4(a0),16(sp)
   13cda:	       move.l 19b50 <SysBase>,d0
   13ce0:	       movea.l d0,a6
   13ce2:	       movea.l 16(sp),a1
   13ce6:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   13cea:	       movea.l 19cb0 <currentFloor>,a0
   13cf0:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   13cf4:	       movea.l 19cb0 <currentFloor>,a0
   13cfa:	       move.l 16(a0),12(sp)
   13d00:	       move.l 19b50 <SysBase>,d0
   13d06:	       movea.l d0,a6
   13d08:	       movea.l 12(sp),a1
   13d0c:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   13d10:	       movea.l 19cb0 <currentFloor>,a0
   13d16:	       clr.l 16(a0)
}
   13d1a:	       nop
   13d1c:	       movea.l (sp)+,a6
   13d1e:	       lea 24(sp),sp
   13d22:	       rts

00013d24 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   13d24:	                   lea -12(sp),sp
	int sharedVertices = 0;
   13d28:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   13d2c:	                   clr.l 4(sp)
   13d30:	   /-------------- bra.s 13d7c <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   13d32:	/--|-------------> clr.l (sp)
   13d34:	|  |     /-------- bra.s 13d70 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   13d36:	|  |  /--|-------> move.l 20(sp),d1
   13d3a:	|  |  |  |         move.l 4(sp),d0
   13d3e:	|  |  |  |         add.l d0,d0
   13d40:	|  |  |  |         add.l d0,d0
   13d42:	|  |  |  |         movea.l d1,a0
   13d44:	|  |  |  |         adda.l d0,a0
   13d46:	|  |  |  |         move.l (a0),d1
   13d48:	|  |  |  |         movea.l 28(sp),a0
   13d4c:	|  |  |  |         move.l (sp),d0
   13d4e:	|  |  |  |         add.l d0,d0
   13d50:	|  |  |  |         add.l d0,d0
   13d52:	|  |  |  |         adda.l d0,a0
   13d54:	|  |  |  |         move.l (a0),d0
   13d56:	|  |  |  |         cmp.l d1,d0
   13d58:	|  |  |  |     /-- bne.s 13d6e <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   13d5a:	|  |  |  |     |   move.l 8(sp),d0
   13d5e:	|  |  |  |     |   move.l d0,d1
   13d60:	|  |  |  |     |   addq.l #1,d1
   13d62:	|  |  |  |     |   move.l d1,8(sp)
   13d66:	|  |  |  |     |   tst.l d0
   13d68:	|  |  |  |     +-- beq.s 13d6e <polysShareSide+0x4a>
   13d6a:	|  |  |  |     |   moveq #1,d0
   13d6c:	|  |  |  |  /--|-- bra.s 13d88 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   13d6e:	|  |  |  |  |  \-> addq.l #1,(sp)
   13d70:	|  |  |  \--|----> move.l 24(sp),d0
   13d74:	|  |  |     |      cmp.l (sp),d0
   13d76:	|  |  \-----|----- bgt.s 13d36 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   13d78:	|  |        |      addq.l #1,4(sp)
   13d7c:	|  \--------|----> move.l 16(sp),d0
   13d80:	|           |      cmp.l 4(sp),d0
   13d84:	\-----------|----- bgt.s 13d32 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   13d86:	            |      clr.w d0
}
   13d88:	            \----> lea 12(sp),sp
   13d8c:	                   rts

00013d8e <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   13d8e:	             lea -28(sp),sp
   13d92:	             move.l d3,-(sp)
   13d94:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   13d96:	             clr.l 32(sp)
   13d9a:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   13d9e:	             movea.l 40(sp),a0
   13da2:	             move.l (a0),d0
   13da4:	             move.l d0,d1
   13da6:	             subq.l #1,d1
   13da8:	             move.l d1,28(sp)
   13dac:	   /-------- bra.w 13fa6 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   13db0:	/--|-------> movea.l 19cb0 <currentFloor>,a0
   13db6:	|  |         move.l 4(a0),d1
   13dba:	|  |         movea.l 40(sp),a0
   13dbe:	|  |         movea.l 4(a0),a0
   13dc2:	|  |         move.l 32(sp),d0
   13dc6:	|  |         add.l d0,d0
   13dc8:	|  |         add.l d0,d0
   13dca:	|  |         adda.l d0,a0
   13dcc:	|  |         move.l (a0),d0
   13dce:	|  |         lsl.l #3,d0
   13dd0:	|  |         movea.l d1,a0
   13dd2:	|  |         adda.l d0,a0
   13dd4:	|  |         move.l (a0),d0
   13dd6:	|  |         move.l d0,-(sp)
   13dd8:	|  |         jsr 14ada <__floatsisf>
   13dde:	|  |         addq.l #4,sp
   13de0:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   13de4:	|  |         movea.l 19cb0 <currentFloor>,a0
   13dea:	|  |         move.l 4(a0),d1
   13dee:	|  |         movea.l 40(sp),a0
   13df2:	|  |         movea.l 4(a0),a0
   13df6:	|  |         move.l 32(sp),d0
   13dfa:	|  |         add.l d0,d0
   13dfc:	|  |         add.l d0,d0
   13dfe:	|  |         adda.l d0,a0
   13e00:	|  |         move.l (a0),d0
   13e02:	|  |         lsl.l #3,d0
   13e04:	|  |         movea.l d1,a0
   13e06:	|  |         adda.l d0,a0
   13e08:	|  |         move.l 4(a0),d0
   13e0c:	|  |         move.l d0,-(sp)
   13e0e:	|  |         jsr 14ada <__floatsisf>
   13e14:	|  |         addq.l #4,sp
   13e16:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   13e1a:	|  |         movea.l 19cb0 <currentFloor>,a0
   13e20:	|  |         move.l 4(a0),d1
   13e24:	|  |         movea.l 40(sp),a0
   13e28:	|  |         movea.l 4(a0),a0
   13e2c:	|  |         move.l 28(sp),d0
   13e30:	|  |         add.l d0,d0
   13e32:	|  |         add.l d0,d0
   13e34:	|  |         adda.l d0,a0
   13e36:	|  |         move.l (a0),d0
   13e38:	|  |         lsl.l #3,d0
   13e3a:	|  |         movea.l d1,a0
   13e3c:	|  |         adda.l d0,a0
   13e3e:	|  |         move.l (a0),d0
   13e40:	|  |         move.l d0,-(sp)
   13e42:	|  |         jsr 14ada <__floatsisf>
   13e48:	|  |         addq.l #4,sp
   13e4a:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   13e4e:	|  |         movea.l 19cb0 <currentFloor>,a0
   13e54:	|  |         move.l 4(a0),d1
   13e58:	|  |         movea.l 40(sp),a0
   13e5c:	|  |         movea.l 4(a0),a0
   13e60:	|  |         move.l 28(sp),d0
   13e64:	|  |         add.l d0,d0
   13e66:	|  |         add.l d0,d0
   13e68:	|  |         adda.l d0,a0
   13e6a:	|  |         move.l (a0),d0
   13e6c:	|  |         lsl.l #3,d0
   13e6e:	|  |         movea.l d1,a0
   13e70:	|  |         adda.l d0,a0
   13e72:	|  |         move.l 4(a0),d0
   13e76:	|  |         move.l d0,-(sp)
   13e78:	|  |         jsr 14ada <__floatsisf>
   13e7e:	|  |         addq.l #4,sp
   13e80:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   13e84:	|  |         move.l 48(sp),-(sp)
   13e88:	|  |         jsr 14ada <__floatsisf>
   13e8e:	|  |         addq.l #4,sp
   13e90:	|  |         move.l d0,-(sp)
   13e92:	|  |         move.l 20(sp),-(sp)
   13e96:	|  |         jsr 14c7c <__lesf2>
   13e9c:	|  |         addq.l #8,sp
   13e9e:	|  |         tst.l d0
   13ea0:	|  |     /-- bgt.s 13ec0 <pointInFloorPolygon+0x132>
   13ea2:	|  |     |   move.l 48(sp),-(sp)
   13ea6:	|  |     |   jsr 14ada <__floatsisf>
   13eac:	|  |     |   addq.l #4,sp
   13eae:	|  |     |   move.l d0,-(sp)
   13eb0:	|  |     |   move.l 12(sp),-(sp)
   13eb4:	|  |     |   jsr 14c46 <__gtsf2>
   13eba:	|  |     |   addq.l #8,sp
   13ebc:	|  |     |   tst.l d0
   13ebe:	|  |  /--|-- bgt.s 13f00 <pointInFloorPolygon+0x172>
   13ec0:	|  |  |  \-> move.l 48(sp),-(sp)
   13ec4:	|  |  |      jsr 14ada <__floatsisf>
   13eca:	|  |  |      addq.l #4,sp
   13ecc:	|  |  |      move.l d0,-(sp)
   13ece:	|  |  |      move.l 12(sp),-(sp)
   13ed2:	|  |  |      jsr 14c7c <__lesf2>
   13ed8:	|  |  |      addq.l #8,sp
   13eda:	|  |  |      tst.l d0
   13edc:	|  |  |  /-- bgt.w 13f96 <pointInFloorPolygon+0x208>
   13ee0:	|  |  |  |   move.l 48(sp),-(sp)
   13ee4:	|  |  |  |   jsr 14ada <__floatsisf>
   13eea:	|  |  |  |   addq.l #4,sp
   13eec:	|  |  |  |   move.l d0,-(sp)
   13eee:	|  |  |  |   move.l 20(sp),-(sp)
   13ef2:	|  |  |  |   jsr 14c46 <__gtsf2>
   13ef8:	|  |  |  |   addq.l #8,sp
   13efa:	|  |  |  |   tst.l d0
   13efc:	|  |  |  +-- ble.w 13f96 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   13f00:	|  |  \--|-> move.l 44(sp),-(sp)
   13f04:	|  |     |   jsr 14ada <__floatsisf>
   13f0a:	|  |     |   addq.l #4,sp
   13f0c:	|  |     |   move.l d0,d3
   13f0e:	|  |     |   move.l 20(sp),-(sp)
   13f12:	|  |     |   move.l 16(sp),-(sp)
   13f16:	|  |     |   jsr 14dce <__subsf3>
   13f1c:	|  |     |   addq.l #8,sp
   13f1e:	|  |     |   move.l d0,d2
   13f20:	|  |     |   move.l 48(sp),-(sp)
   13f24:	|  |     |   jsr 14ada <__floatsisf>
   13f2a:	|  |     |   addq.l #4,sp
   13f2c:	|  |     |   move.l 16(sp),-(sp)
   13f30:	|  |     |   move.l d0,-(sp)
   13f32:	|  |     |   jsr 14dce <__subsf3>
   13f38:	|  |     |   addq.l #8,sp
   13f3a:	|  |     |   move.l d0,-(sp)
   13f3c:	|  |     |   move.l d2,-(sp)
   13f3e:	|  |     |   jsr 14b8c <__mulsf3>
   13f44:	|  |     |   addq.l #8,sp
   13f46:	|  |     |   move.l d0,d2
   13f48:	|  |     |   move.l 16(sp),-(sp)
   13f4c:	|  |     |   move.l 12(sp),-(sp)
   13f50:	|  |     |   jsr 14dce <__subsf3>
   13f56:	|  |     |   addq.l #8,sp
   13f58:	|  |     |   move.l d0,-(sp)
   13f5a:	|  |     |   move.l d2,-(sp)
   13f5c:	|  |     |   jsr 14986 <__divsf3>
   13f62:	|  |     |   addq.l #8,sp
   13f64:	|  |     |   move.l 20(sp),-(sp)
   13f68:	|  |     |   move.l d0,-(sp)
   13f6a:	|  |     |   jsr 1488c <__addsf3>
   13f70:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   13f72:	|  |     |   move.l d0,-(sp)
   13f74:	|  |     |   move.l d3,-(sp)
   13f76:	|  |     |   jsr 14d00 <__ltsf2>
   13f7c:	|  |     |   addq.l #8,sp
   13f7e:	|  |     |   tst.l d0
   13f80:	|  |     +-- bge.s 13f96 <pointInFloorPolygon+0x208>

			c = !c;
   13f82:	|  |     |   tst.l 24(sp)
   13f86:	|  |     |   seq d0
   13f88:	|  |     |   neg.b d0
   13f8a:	|  |     |   move.b d0,d0
   13f8c:	|  |     |   andi.l #255,d0
   13f92:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   13f96:	|  |     \-> move.l 32(sp),d0
   13f9a:	|  |         move.l d0,d1
   13f9c:	|  |         addq.l #1,d1
   13f9e:	|  |         move.l d1,32(sp)
   13fa2:	|  |         move.l d0,28(sp)
   13fa6:	|  \-------> movea.l 40(sp),a0
   13faa:	|            move.l (a0),d0
   13fac:	|            cmp.l 32(sp),d0
   13fb0:	\----------- bgt.w 13db0 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   13fb4:	             tst.l 24(sp)
   13fb8:	             sne d0
   13fba:	             neg.b d0
   13fbc:	             move.b d0,d0
   13fbe:	             andi.w #255,d0
}
   13fc2:	             move.l (sp)+,d2
   13fc4:	             move.l (sp)+,d3
   13fc6:	             lea 28(sp),sp
   13fca:	             rts

00013fcc <setFloor>:

BOOL setFloor (int fileNum) {
   13fcc:	                               lea -132(sp),sp
   13fd0:	                               move.l a6,-(sp)
   13fd2:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   13fd4:	                               jsr 13c34 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   13fda:	                               move.l 144(sp),-(sp)
   13fde:	                               jsr 5144 <openFileFromNum>
   13fe4:	                               addq.l #4,sp
   13fe6:	                               tst.l d0
   13fe8:	                           /-- bne.s 13ff0 <setFloor+0x24>
   13fea:	                           |   clr.w d0
   13fec:	/--------------------------|-- bra.w 1473c <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   13ff0:	|                          \-> movea.l 19cb0 <currentFloor>,a0
   13ff6:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   13ffa:	|                              move.l 19b38 <bigDataFile>,118(sp)
   14002:	|                              move.l 19b58 <DOSBase>,d0
   14008:	|                              movea.l d0,a6
   1400a:	|                              move.l 118(sp),d1
   1400e:	|                              jsr -306(a6)
   14012:	|                              move.l d0,114(sp)
   14016:	|                              move.l 114(sp),d0
   1401a:	|                              movea.l 19cb0 <currentFloor>,a0
   14020:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   14024:	|                              movea.l 19cb0 <currentFloor>,a0
   1402a:	|                              move.l 8(a0),d0
   1402e:	|                              lsl.l #3,d0
   14030:	|                              move.l d0,110(sp)
   14034:	|                              clr.l 106(sp)
   14038:	|                              move.l 19b50 <SysBase>,d0
   1403e:	|                              movea.l d0,a6
   14040:	|                              move.l 110(sp),d0
   14044:	|                              move.l 106(sp),d1
   14048:	|                              jsr -684(a6)
   1404c:	|                              move.l d0,102(sp)
   14050:	|                              move.l 102(sp),d0
   14054:	|                              movea.l 19cb0 <currentFloor>,a0
   1405a:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   1405e:	|                              movea.l 19cb0 <currentFloor>,a0
   14064:	|                              move.l 12(a0),d0
   14068:	|                          /-- bne.s 1407e <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   1406a:	|                          |   pea 172cb <PutChar+0x2159>
   14070:	|                          |   jsr 14822 <KPrintF>
   14076:	|                          |   addq.l #4,sp
		return FALSE;
   14078:	|                          |   clr.w d0
   1407a:	+--------------------------|-- bra.w 1473c <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1407e:	|                          \-> clr.l 136(sp)
   14082:	|                    /-------- bra.w 1419a <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   14086:	|                 /--|-------> move.l 19b38 <bigDataFile>,26(sp)
   1408e:	|                 |  |         move.l 19b58 <DOSBase>,d0
   14094:	|                 |  |         movea.l d0,a6
   14096:	|                 |  |         move.l 26(sp),d1
   1409a:	|                 |  |         jsr -306(a6)
   1409e:	|                 |  |         move.l d0,22(sp)
   140a2:	|                 |  |         move.l 22(sp),d1
   140a6:	|                 |  |         movea.l 19cb0 <currentFloor>,a0
   140ac:	|                 |  |         movea.l 12(a0),a0
   140b0:	|                 |  |         move.l 136(sp),d0
   140b4:	|                 |  |         lsl.l #3,d0
   140b6:	|                 |  |         adda.l d0,a0
   140b8:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   140ba:	|                 |  |         movea.l 19cb0 <currentFloor>,a0
   140c0:	|                 |  |         move.l 12(a0),d1
   140c4:	|                 |  |         move.l 136(sp),d0
   140c8:	|                 |  |         lsl.l #3,d0
   140ca:	|                 |  |         movea.l d1,a0
   140cc:	|                 |  |         adda.l d0,a0
   140ce:	|                 |  |         move.l (a0),d0
   140d0:	|                 |  |         add.l d0,d0
   140d2:	|                 |  |         add.l d0,d0
   140d4:	|                 |  |         move.l d0,18(sp)
   140d8:	|                 |  |         clr.l 14(sp)
   140dc:	|                 |  |         move.l 19b50 <SysBase>,d0
   140e2:	|                 |  |         movea.l d0,a6
   140e4:	|                 |  |         move.l 18(sp),d0
   140e8:	|                 |  |         move.l 14(sp),d1
   140ec:	|                 |  |         jsr -684(a6)
   140f0:	|                 |  |         move.l d0,10(sp)
   140f4:	|                 |  |         move.l 10(sp),d1
   140f8:	|                 |  |         movea.l 19cb0 <currentFloor>,a0
   140fe:	|                 |  |         movea.l 12(a0),a0
   14102:	|                 |  |         move.l 136(sp),d0
   14106:	|                 |  |         lsl.l #3,d0
   14108:	|                 |  |         adda.l d0,a0
   1410a:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   1410e:	|                 |  |         movea.l 19cb0 <currentFloor>,a0
   14114:	|                 |  |         move.l 12(a0),d1
   14118:	|                 |  |         move.l 136(sp),d0
   1411c:	|                 |  |         lsl.l #3,d0
   1411e:	|                 |  |         movea.l d1,a0
   14120:	|                 |  |         adda.l d0,a0
   14122:	|                 |  |         move.l 4(a0),d0
   14126:	|                 |  |     /-- bne.s 1413c <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   14128:	|                 |  |     |   pea 172cb <PutChar+0x2159>
   1412e:	|                 |  |     |   jsr 14822 <KPrintF>
   14134:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   14136:	|                 |  |     |   clr.w d0
   14138:	+-----------------|--|-----|-- bra.w 1473c <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1413c:	|                 |  |     \-> clr.l 132(sp)
   14140:	|                 |  |     /-- bra.s 1417a <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   14142:	|                 |  |  /--|-> move.l 19b38 <bigDataFile>,d1
   14148:	|                 |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   1414e:	|                 |  |  |  |   movea.l 12(a0),a0
   14152:	|                 |  |  |  |   move.l 136(sp),d0
   14156:	|                 |  |  |  |   lsl.l #3,d0
   14158:	|                 |  |  |  |   adda.l d0,a0
   1415a:	|                 |  |  |  |   movea.l 4(a0),a0
   1415e:	|                 |  |  |  |   move.l 132(sp),d0
   14162:	|                 |  |  |  |   add.l d0,d0
   14164:	|                 |  |  |  |   add.l d0,d0
   14166:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   1416a:	|                 |  |  |  |   move.l d1,-(sp)
   1416c:	|                 |  |  |  |   jsr 6bc <get2bytes>
   14172:	|                 |  |  |  |   addq.l #4,sp
   14174:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   14176:	|                 |  |  |  |   addq.l #1,132(sp)
   1417a:	|                 |  |  |  \-> movea.l 19cb0 <currentFloor>,a0
   14180:	|                 |  |  |      move.l 12(a0),d1
   14184:	|                 |  |  |      move.l 136(sp),d0
   14188:	|                 |  |  |      lsl.l #3,d0
   1418a:	|                 |  |  |      movea.l d1,a0
   1418c:	|                 |  |  |      adda.l d0,a0
   1418e:	|                 |  |  |      move.l (a0),d0
   14190:	|                 |  |  |      cmp.l 132(sp),d0
   14194:	|                 |  |  \----- bgt.s 14142 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   14196:	|                 |  |         addq.l #1,136(sp)
   1419a:	|                 |  \-------> movea.l 19cb0 <currentFloor>,a0
   141a0:	|                 |            move.l 8(a0),d0
   141a4:	|                 |            cmp.l 136(sp),d0
   141a8:	|                 \----------- bgt.w 14086 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   141ac:	|                              move.l 19b38 <bigDataFile>,d0
   141b2:	|                              move.l d0,-(sp)
   141b4:	|                              jsr 6bc <get2bytes>
   141ba:	|                              addq.l #4,sp
   141bc:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   141c0:	|                              move.l 136(sp),d0
   141c4:	|                              lsl.l #3,d0
   141c6:	|                              move.l d0,98(sp)
   141ca:	|                              clr.l 94(sp)
   141ce:	|                              move.l 19b50 <SysBase>,d0
   141d4:	|                              movea.l d0,a6
   141d6:	|                              move.l 98(sp),d0
   141da:	|                              move.l 94(sp),d1
   141de:	|                              jsr -684(a6)
   141e2:	|                              move.l d0,90(sp)
   141e6:	|                              move.l 90(sp),d0
   141ea:	|                              movea.l 19cb0 <currentFloor>,a0
   141f0:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   141f4:	|                              movea.l 19cb0 <currentFloor>,a0
   141fa:	|                              move.l 4(a0),d0
   141fe:	|                          /-- bne.s 14214 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   14200:	|                          |   pea 172cb <PutChar+0x2159>
   14206:	|                          |   jsr 14822 <KPrintF>
   1420c:	|                          |   addq.l #4,sp
		return FALSE;
   1420e:	|                          |   clr.w d0
   14210:	+--------------------------|-- bra.w 1473c <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   14214:	|                          \-> clr.l 132(sp)
   14218:	|                          /-- bra.s 1426c <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   1421a:	|                       /--|-> move.l 19b38 <bigDataFile>,d1
   14220:	|                       |  |   movea.l 19cb0 <currentFloor>,a0
   14226:	|                       |  |   movea.l 4(a0),a0
   1422a:	|                       |  |   move.l 132(sp),d0
   1422e:	|                       |  |   lsl.l #3,d0
   14230:	|                       |  |   lea (0,a0,d0.l),a2
   14234:	|                       |  |   move.l d1,-(sp)
   14236:	|                       |  |   jsr 6bc <get2bytes>
   1423c:	|                       |  |   addq.l #4,sp
   1423e:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   14240:	|                       |  |   move.l 19b38 <bigDataFile>,d1
   14246:	|                       |  |   movea.l 19cb0 <currentFloor>,a0
   1424c:	|                       |  |   movea.l 4(a0),a0
   14250:	|                       |  |   move.l 132(sp),d0
   14254:	|                       |  |   lsl.l #3,d0
   14256:	|                       |  |   lea (0,a0,d0.l),a2
   1425a:	|                       |  |   move.l d1,-(sp)
   1425c:	|                       |  |   jsr 6bc <get2bytes>
   14262:	|                       |  |   addq.l #4,sp
   14264:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   14268:	|                       |  |   addq.l #1,132(sp)
   1426c:	|                       |  \-> move.l 132(sp),d0
   14270:	|                       |      cmp.l 136(sp),d0
   14274:	|                       \----- blt.s 1421a <setFloor+0x24e>
	}

	finishAccess ();
   14276:	|                              jsr 503c <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1427c:	|                              movea.l 19cb0 <currentFloor>,a0
   14282:	|                              move.l 8(a0),d0
   14286:	|                              add.l d0,d0
   14288:	|                              add.l d0,d0
   1428a:	|                              move.l d0,86(sp)
   1428e:	|                              clr.l 82(sp)
   14292:	|                              move.l 19b50 <SysBase>,d0
   14298:	|                              movea.l d0,a6
   1429a:	|                              move.l 86(sp),d0
   1429e:	|                              move.l 82(sp),d1
   142a2:	|                              jsr -684(a6)
   142a6:	|                              move.l d0,78(sp)
   142aa:	|                              move.l 78(sp),d0
   142ae:	|                              movea.l 19cb0 <currentFloor>,a0
   142b4:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   142b8:	|                              movea.l 19cb0 <currentFloor>,a0
   142be:	|                              move.l 8(a0),d0
   142c2:	|                              add.l d0,d0
   142c4:	|                              add.l d0,d0
   142c6:	|                              move.l d0,74(sp)
   142ca:	|                              clr.l 70(sp)
   142ce:	|                              move.l 19b50 <SysBase>,d0
   142d4:	|                              movea.l d0,a6
   142d6:	|                              move.l 74(sp),d0
   142da:	|                              move.l 70(sp),d1
   142de:	|                              jsr -684(a6)
   142e2:	|                              move.l d0,66(sp)
   142e6:	|                              move.l 66(sp),d0
   142ea:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   142ee:	|                              movea.l 19cb0 <currentFloor>,a0
   142f4:	|                              move.l 16(a0),d0
   142f8:	|                          /-- bne.s 1430e <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   142fa:	|                          |   pea 172cb <PutChar+0x2159>
   14300:	|                          |   jsr 14822 <KPrintF>
   14306:	|                          |   addq.l #4,sp
		return FALSE;
   14308:	|                          |   clr.w d0
   1430a:	+--------------------------|-- bra.w 1473c <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1430e:	|                          \-> clr.l 136(sp)
   14312:	|                    /-------- bra.w 14436 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   14316:	|                 /--|-------> movea.l 19cb0 <currentFloor>,a0
   1431c:	|                 |  |         move.l 8(a0),d0
   14320:	|                 |  |         add.l d0,d0
   14322:	|                 |  |         add.l d0,d0
   14324:	|                 |  |         move.l d0,50(sp)
   14328:	|                 |  |         clr.l 46(sp)
   1432c:	|                 |  |         move.l 19b50 <SysBase>,d0
   14332:	|                 |  |         movea.l d0,a6
   14334:	|                 |  |         move.l 50(sp),d0
   14338:	|                 |  |         move.l 46(sp),d1
   1433c:	|                 |  |         jsr -684(a6)
   14340:	|                 |  |         move.l d0,42(sp)
   14344:	|                 |  |         move.l 42(sp),d0
   14348:	|                 |  |         movea.l 19cb0 <currentFloor>,a0
   1434e:	|                 |  |         movea.l 16(a0),a0
   14352:	|                 |  |         move.l 136(sp),d1
   14356:	|                 |  |         add.l d1,d1
   14358:	|                 |  |         add.l d1,d1
   1435a:	|                 |  |         adda.l d1,a0
   1435c:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1435e:	|                 |  |         movea.l 19cb0 <currentFloor>,a0
   14364:	|                 |  |         move.l 8(a0),d0
   14368:	|                 |  |         add.l d0,d0
   1436a:	|                 |  |         add.l d0,d0
   1436c:	|                 |  |         move.l d0,38(sp)
   14370:	|                 |  |         clr.l 34(sp)
   14374:	|                 |  |         move.l 19b50 <SysBase>,d0
   1437a:	|                 |  |         movea.l d0,a6
   1437c:	|                 |  |         move.l 38(sp),d0
   14380:	|                 |  |         move.l 34(sp),d1
   14384:	|                 |  |         jsr -684(a6)
   14388:	|                 |  |         move.l d0,30(sp)
   1438c:	|                 |  |         move.l 30(sp),d1
   14390:	|                 |  |         move.l 136(sp),d0
   14394:	|                 |  |         add.l d0,d0
   14396:	|                 |  |         add.l d0,d0
   14398:	|                 |  |         movea.l 62(sp),a0
   1439c:	|                 |  |         adda.l d0,a0
   1439e:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   143a0:	|                 |  |         movea.l 19cb0 <currentFloor>,a0
   143a6:	|                 |  |         move.l 16(a0),d1
   143aa:	|                 |  |         move.l 136(sp),d0
   143ae:	|                 |  |         add.l d0,d0
   143b0:	|                 |  |         add.l d0,d0
   143b2:	|                 |  |         movea.l d1,a0
   143b4:	|                 |  |         adda.l d0,a0
   143b6:	|                 |  |         move.l (a0),d0
   143b8:	|                 |  |     /-- bne.s 143ce <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   143ba:	|                 |  |     |   pea 172cb <PutChar+0x2159>
   143c0:	|                 |  |     |   jsr 14822 <KPrintF>
   143c6:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   143c8:	|                 |  |     |   clr.w d0
   143ca:	+-----------------|--|-----|-- bra.w 1473c <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   143ce:	|                 |  |     \-> clr.l 132(sp)
   143d2:	|                 |  |     /-- bra.s 14422 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   143d4:	|                 |  |  /--|-> movea.l 19cb0 <currentFloor>,a0
   143da:	|                 |  |  |  |   move.l 16(a0),d1
   143de:	|                 |  |  |  |   move.l 136(sp),d0
   143e2:	|                 |  |  |  |   add.l d0,d0
   143e4:	|                 |  |  |  |   add.l d0,d0
   143e6:	|                 |  |  |  |   movea.l d1,a0
   143e8:	|                 |  |  |  |   adda.l d0,a0
   143ea:	|                 |  |  |  |   move.l (a0),d1
   143ec:	|                 |  |  |  |   move.l 132(sp),d0
   143f0:	|                 |  |  |  |   add.l d0,d0
   143f2:	|                 |  |  |  |   add.l d0,d0
   143f4:	|                 |  |  |  |   movea.l d1,a0
   143f6:	|                 |  |  |  |   adda.l d0,a0
   143f8:	|                 |  |  |  |   moveq #-1,d1
   143fa:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   143fc:	|                 |  |  |  |   move.l 136(sp),d0
   14400:	|                 |  |  |  |   add.l d0,d0
   14402:	|                 |  |  |  |   add.l d0,d0
   14404:	|                 |  |  |  |   movea.l 62(sp),a0
   14408:	|                 |  |  |  |   adda.l d0,a0
   1440a:	|                 |  |  |  |   move.l (a0),d1
   1440c:	|                 |  |  |  |   move.l 132(sp),d0
   14410:	|                 |  |  |  |   add.l d0,d0
   14412:	|                 |  |  |  |   add.l d0,d0
   14414:	|                 |  |  |  |   movea.l d1,a0
   14416:	|                 |  |  |  |   adda.l d0,a0
   14418:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1441e:	|                 |  |  |  |   addq.l #1,132(sp)
   14422:	|                 |  |  |  \-> movea.l 19cb0 <currentFloor>,a0
   14428:	|                 |  |  |      move.l 8(a0),d0
   1442c:	|                 |  |  |      cmp.l 132(sp),d0
   14430:	|                 |  |  \----- bgt.s 143d4 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   14432:	|                 |  |         addq.l #1,136(sp)
   14436:	|                 |  \-------> movea.l 19cb0 <currentFloor>,a0
   1443c:	|                 |            move.l 8(a0),d0
   14440:	|                 |            cmp.l 136(sp),d0
   14444:	|                 \----------- bgt.w 14316 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   14448:	|                              clr.l 136(sp)
   1444c:	|              /-------------- bra.w 14552 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   14450:	|           /--|-------------> clr.l 132(sp)
   14454:	|           |  |     /-------- bra.w 1453c <setFloor+0x570>
			if (i != j) {
   14458:	|           |  |  /--|-------> move.l 136(sp),d0
   1445c:	|           |  |  |  |         cmp.l 132(sp),d0
   14460:	|           |  |  |  |     /-- beq.w 144f2 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   14464:	|           |  |  |  |     |   movea.l 19cb0 <currentFloor>,a0
   1446a:	|           |  |  |  |     |   move.l 12(a0),d1
   1446e:	|           |  |  |  |     |   move.l 132(sp),d0
   14472:	|           |  |  |  |     |   lsl.l #3,d0
   14474:	|           |  |  |  |     |   movea.l d1,a1
   14476:	|           |  |  |  |     |   adda.l d0,a1
   14478:	|           |  |  |  |     |   movea.l 19cb0 <currentFloor>,a0
   1447e:	|           |  |  |  |     |   move.l 12(a0),d1
   14482:	|           |  |  |  |     |   move.l 136(sp),d0
   14486:	|           |  |  |  |     |   lsl.l #3,d0
   14488:	|           |  |  |  |     |   movea.l d1,a0
   1448a:	|           |  |  |  |     |   adda.l d0,a0
   1448c:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   14490:	|           |  |  |  |     |   move.l (a1),-(sp)
   14492:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   14496:	|           |  |  |  |     |   move.l (a0),-(sp)
   14498:	|           |  |  |  |     |   jsr 13d24 <polysShareSide>
   1449e:	|           |  |  |  |     |   lea 16(sp),sp
   144a2:	|           |  |  |  |     |   tst.w d0
   144a4:	|           |  |  |  |  /--|-- beq.w 14538 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   144a8:	|           |  |  |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   144ae:	|           |  |  |  |  |  |   move.l 16(a0),d1
   144b2:	|           |  |  |  |  |  |   move.l 136(sp),d0
   144b6:	|           |  |  |  |  |  |   add.l d0,d0
   144b8:	|           |  |  |  |  |  |   add.l d0,d0
   144ba:	|           |  |  |  |  |  |   movea.l d1,a0
   144bc:	|           |  |  |  |  |  |   adda.l d0,a0
   144be:	|           |  |  |  |  |  |   move.l (a0),d1
   144c0:	|           |  |  |  |  |  |   move.l 132(sp),d0
   144c4:	|           |  |  |  |  |  |   add.l d0,d0
   144c6:	|           |  |  |  |  |  |   add.l d0,d0
   144c8:	|           |  |  |  |  |  |   movea.l d1,a0
   144ca:	|           |  |  |  |  |  |   adda.l d0,a0
   144cc:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   144d0:	|           |  |  |  |  |  |   move.l 136(sp),d0
   144d4:	|           |  |  |  |  |  |   add.l d0,d0
   144d6:	|           |  |  |  |  |  |   add.l d0,d0
   144d8:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   144dc:	|           |  |  |  |  |  |   adda.l d0,a0
   144de:	|           |  |  |  |  |  |   move.l (a0),d1
   144e0:	|           |  |  |  |  |  |   move.l 132(sp),d0
   144e4:	|           |  |  |  |  |  |   add.l d0,d0
   144e6:	|           |  |  |  |  |  |   add.l d0,d0
   144e8:	|           |  |  |  |  |  |   movea.l d1,a0
   144ea:	|           |  |  |  |  |  |   adda.l d0,a0
   144ec:	|           |  |  |  |  |  |   moveq #1,d1
   144ee:	|           |  |  |  |  |  |   move.l d1,(a0)
   144f0:	|           |  |  |  |  +--|-- bra.s 14538 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   144f2:	|           |  |  |  |  |  \-> movea.l 19cb0 <currentFloor>,a0
   144f8:	|           |  |  |  |  |      move.l 16(a0),d1
   144fc:	|           |  |  |  |  |      move.l 136(sp),d0
   14500:	|           |  |  |  |  |      add.l d0,d0
   14502:	|           |  |  |  |  |      add.l d0,d0
   14504:	|           |  |  |  |  |      movea.l d1,a0
   14506:	|           |  |  |  |  |      adda.l d0,a0
   14508:	|           |  |  |  |  |      move.l (a0),d1
   1450a:	|           |  |  |  |  |      move.l 132(sp),d0
   1450e:	|           |  |  |  |  |      add.l d0,d0
   14510:	|           |  |  |  |  |      add.l d0,d0
   14512:	|           |  |  |  |  |      movea.l d1,a0
   14514:	|           |  |  |  |  |      adda.l d0,a0
   14516:	|           |  |  |  |  |      moveq #-2,d0
   14518:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   1451a:	|           |  |  |  |  |      move.l 136(sp),d0
   1451e:	|           |  |  |  |  |      add.l d0,d0
   14520:	|           |  |  |  |  |      add.l d0,d0
   14522:	|           |  |  |  |  |      movea.l 62(sp),a0
   14526:	|           |  |  |  |  |      adda.l d0,a0
   14528:	|           |  |  |  |  |      move.l (a0),d1
   1452a:	|           |  |  |  |  |      move.l 132(sp),d0
   1452e:	|           |  |  |  |  |      add.l d0,d0
   14530:	|           |  |  |  |  |      add.l d0,d0
   14532:	|           |  |  |  |  |      movea.l d1,a0
   14534:	|           |  |  |  |  |      adda.l d0,a0
   14536:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   14538:	|           |  |  |  |  \----> addq.l #1,132(sp)
   1453c:	|           |  |  |  \-------> movea.l 19cb0 <currentFloor>,a0
   14542:	|           |  |  |            move.l 8(a0),d0
   14546:	|           |  |  |            cmp.l 132(sp),d0
   1454a:	|           |  |  \----------- bgt.w 14458 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1454e:	|           |  |               addq.l #1,136(sp)
   14552:	|           |  \-------------> movea.l 19cb0 <currentFloor>,a0
   14558:	|           |                  move.l 8(a0),d0
   1455c:	|           |                  cmp.l 136(sp),d0
   14560:	|           \----------------- bgt.w 14450 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   14564:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   14568:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   1456c:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   14570:	|  |                           clr.l 136(sp)
   14574:	|  |     /-------------------- bra.w 146ca <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   14578:	|  |  /--|-------------------> clr.l 132(sp)
   1457c:	|  |  |  |     /-------------- bra.w 146b4 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   14580:	|  |  |  |  /--|-------------> movea.l 19cb0 <currentFloor>,a0
   14586:	|  |  |  |  |  |               move.l 16(a0),d1
   1458a:	|  |  |  |  |  |               move.l 136(sp),d0
   1458e:	|  |  |  |  |  |               add.l d0,d0
   14590:	|  |  |  |  |  |               add.l d0,d0
   14592:	|  |  |  |  |  |               movea.l d1,a0
   14594:	|  |  |  |  |  |               adda.l d0,a0
   14596:	|  |  |  |  |  |               move.l (a0),d1
   14598:	|  |  |  |  |  |               move.l 132(sp),d0
   1459c:	|  |  |  |  |  |               add.l d0,d0
   1459e:	|  |  |  |  |  |               add.l d0,d0
   145a0:	|  |  |  |  |  |               movea.l d1,a0
   145a2:	|  |  |  |  |  |               adda.l d0,a0
   145a4:	|  |  |  |  |  |               move.l (a0),d0
   145a6:	|  |  |  |  |  |               moveq #-1,d1
   145a8:	|  |  |  |  |  |               cmp.l d0,d1
   145aa:	|  |  |  |  |  |  /----------- bne.w 146b0 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   145ae:	|  |  |  |  |  |  |            clr.l 122(sp)
   145b2:	|  |  |  |  |  |  |     /----- bra.w 1469e <setFloor+0x6d2>
						if (d != i && d != j) {
   145b6:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   145ba:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   145be:	|  |  |  |  |  |  |  |  |  /-- beq.w 1469a <setFloor+0x6ce>
   145c2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   145c6:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   145ca:	|  |  |  |  |  |  |  |  |  +-- beq.w 1469a <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   145ce:	|  |  |  |  |  |  |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   145d4:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   145d8:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   145dc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   145de:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   145e0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   145e2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   145e4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   145e6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   145ea:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   145ec:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   145ee:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   145f0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   145f2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   145f4:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   145f8:	|  |  |  |  |  |  |  |  |  +-- bne.w 1469a <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   145fc:	|  |  |  |  |  |  |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   14602:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   14606:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1460a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1460c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1460e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   14610:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   14612:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   14614:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   14618:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1461a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1461c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1461e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   14620:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   14622:	|  |  |  |  |  |  |  |  |  +-- bmi.s 1469a <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   14624:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   14628:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1462a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1462c:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   14630:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   14632:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   14634:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   14638:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1463a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1463c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1463e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   14640:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   14642:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   14646:	|  |  |  |  |  |  |  |  |  +-- bgt.s 1469a <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   14648:	|  |  |  |  |  |  |  |  |  |   movea.l 19cb0 <currentFloor>,a0
   1464e:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   14652:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   14656:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14658:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1465a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1465c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1465e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   14660:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   14664:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14666:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14668:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1466a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1466c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   14670:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   14674:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14676:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14678:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1467c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1467e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   14680:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   14684:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14686:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14688:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1468a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1468c:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   14690:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   14692:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   14694:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1469a:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   1469e:	|  |  |  |  |  |  |  |  \----> movea.l 19cb0 <currentFloor>,a0
   146a4:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   146a8:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   146ac:	|  |  |  |  |  |  |  \-------- bgt.w 145b6 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   146b0:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   146b4:	|  |  |  |  |  \-------------> movea.l 19cb0 <currentFloor>,a0
   146ba:	|  |  |  |  |                  move.l 8(a0),d0
   146be:	|  |  |  |  |                  cmp.l 132(sp),d0
   146c2:	|  |  |  |  \----------------- bgt.w 14580 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   146c6:	|  |  |  |                     addq.l #1,136(sp)
   146ca:	|  |  |  \-------------------> movea.l 19cb0 <currentFloor>,a0
   146d0:	|  |  |                        move.l 8(a0),d0
   146d4:	|  |  |                        cmp.l 136(sp),d0
   146d8:	|  |  \----------------------- bgt.w 14578 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   146dc:	|  |                           tst.w 130(sp)
   146e0:	|  \-------------------------- bne.w 14568 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   146e4:	|                              clr.l 136(sp)
   146e8:	|                          /-- bra.s 14710 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   146ea:	|                       /--|-> move.l 136(sp),d0
   146ee:	|                       |  |   add.l d0,d0
   146f0:	|                       |  |   add.l d0,d0
   146f2:	|                       |  |   movea.l 62(sp),a0
   146f6:	|                       |  |   adda.l d0,a0
   146f8:	|                       |  |   move.l (a0),54(sp)
   146fc:	|                       |  |   move.l 19b50 <SysBase>,d0
   14702:	|                       |  |   movea.l d0,a6
   14704:	|                       |  |   movea.l 54(sp),a1
   14708:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1470c:	|                       |  |   addq.l #1,136(sp)
   14710:	|                       |  \-> movea.l 19cb0 <currentFloor>,a0
   14716:	|                       |      move.l 8(a0),d0
   1471a:	|                       |      cmp.l 136(sp),d0
   1471e:	|                       \----- bgt.s 146ea <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   14720:	|                              move.l 62(sp),58(sp)
   14726:	|                              move.l 19b50 <SysBase>,d0
   1472c:	|                              movea.l d0,a6
   1472e:	|                              movea.l 58(sp),a1
   14732:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   14736:	|                              clr.l 62(sp)

	return TRUE;
   1473a:	|                              moveq #1,d0
}
   1473c:	\----------------------------> movea.l (sp)+,a2
   1473e:	                               movea.l (sp)+,a6
   14740:	                               lea 132(sp),sp
   14744:	                               rts

00014746 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   14746:	jsr 13c34 <killFloor>
	noFloor ();
   1474c:	jsr 13b58 <noFloor>
   14752:	nop
   14754:	rts

00014756 <WaitVbl>:
void WaitVbl() {
   14756:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   14758:	   /-> movea.l #14675972,a0
   1475e:	   |   move.l (a0),d0
   14760:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   14762:	   |   move.l (sp),d0
   14764:	   |   andi.l #130816,d0
   1476a:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   1476c:	   |   move.l (sp),d0
   1476e:	   |   cmpi.l #76800,d0
   14774:	   \-- beq.s 14758 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   14776:	/----> movea.l #14675972,a0
   1477c:	|      move.l (a0),d0
   1477e:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   14782:	|      move.l 4(sp),d0
   14786:	|      andi.l #130816,d0
   1478c:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   14790:	|      move.l 4(sp),d0
   14794:	|      cmpi.l #76800,d0
   1479a:	|  /-- beq.s 1479e <WaitVbl+0x48>
	while (1) {
   1479c:	\--|-- bra.s 14776 <WaitVbl+0x20>
			break;
   1479e:	   \-> nop
}
   147a0:	       nop
   147a2:	       addq.l #8,sp
   147a4:	       rts

000147a6 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   147a6:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   147a8:	       move.l 8(sp),(sp)
	while(len-- > 0)
   147ac:	   /-- bra.s 147be <memset+0x18>
		*ptr++ = val;
   147ae:	/--|-> move.l (sp),d0
   147b0:	|  |   move.l d0,d1
   147b2:	|  |   addq.l #1,d1
   147b4:	|  |   move.l d1,(sp)
   147b6:	|  |   move.l 12(sp),d1
   147ba:	|  |   movea.l d0,a0
   147bc:	|  |   move.b d1,(a0)
	while(len-- > 0)
   147be:	|  \-> move.l 16(sp),d0
   147c2:	|      move.l d0,d1
   147c4:	|      subq.l #1,d1
   147c6:	|      move.l d1,16(sp)
   147ca:	|      tst.l d0
   147cc:	\----- bne.s 147ae <memset+0x8>
	return dest;
   147ce:	       move.l 8(sp),d0
}
   147d2:	       addq.l #4,sp
   147d4:	       rts

000147d6 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   147d6:	       subq.l #8,sp
   147d8:	       move.l d2,-(sp)
	char *d = (char *)dest;
   147da:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   147e0:	       move.l 20(sp),4(sp)
	while(len--)
   147e6:	   /-- bra.s 14808 <memcpy+0x32>
		*d++ = *s++;
   147e8:	/--|-> move.l 4(sp),d1
   147ec:	|  |   move.l d1,d0
   147ee:	|  |   addq.l #1,d0
   147f0:	|  |   move.l d0,4(sp)
   147f4:	|  |   move.l 8(sp),d0
   147f8:	|  |   move.l d0,d2
   147fa:	|  |   addq.l #1,d2
   147fc:	|  |   move.l d2,8(sp)
   14800:	|  |   movea.l d1,a0
   14802:	|  |   move.b (a0),d1
   14804:	|  |   movea.l d0,a0
   14806:	|  |   move.b d1,(a0)
	while(len--)
   14808:	|  \-> move.l 24(sp),d0
   1480c:	|      move.l d0,d1
   1480e:	|      subq.l #1,d1
   14810:	|      move.l d1,24(sp)
   14814:	|      tst.l d0
   14816:	\----- bne.s 147e8 <memcpy+0x12>
	return dest;
   14818:	       move.l 16(sp),d0
}
   1481c:	       move.l (sp)+,d2
   1481e:	       addq.l #8,sp
   14820:	       rts

00014822 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   14822:	       lea -128(sp),sp
   14826:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1482a:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xecb9fb>,d0
   14830:	       cmpi.w #20153,d0
   14834:	   /-- beq.s 14858 <KPrintF+0x36>
   14836:	   |   cmpi.w #-24562,d0
   1483a:	   +-- beq.s 14858 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   1483c:	   |   movea.l 19b50 <SysBase>,a6
   14842:	   |   movea.l 144(sp),a0
   14846:	   |   lea 148(sp),a1
   1484a:	   |   lea 15164 <KPutCharX>,a2
   14850:	   |   suba.l a3,a3
   14852:	   |   jsr -522(a6)
}
   14856:	/--|-- bra.s 14882 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   14858:	|  \-> movea.l 19b50 <SysBase>,a6
   1485e:	|      movea.l 144(sp),a0
   14862:	|      lea 148(sp),a1
   14866:	|      lea 15172 <PutChar>,a2
   1486c:	|      lea 12(sp),a3
   14870:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   14874:	|      move.l a3,-(sp)
   14876:	|      pea 56 <_start+0x56>
   1487a:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xecb9fb>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   14880:	|      addq.l #8,sp
}
   14882:	\----> movem.l (sp)+,a2-a3/a6
   14886:	       lea 128(sp),sp
   1488a:	       rts

0001488c <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   1488c:	lea -12(sp),sp
   14890:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   14892:	move.l 20(sp),12(sp)
   14898:	move.l 24(sp),8(sp)
   1489e:	move.l 19b60 <MathIeeeSingBasBase>,d0
   148a4:	movea.l d0,a6
   148a6:	move.l 12(sp),d0
   148aa:	move.l 8(sp),d1
   148ae:	jsr -66(a6)
   148b2:	move.l d0,4(sp)
   148b6:	move.l 4(sp),d0
}
   148ba:	movea.l (sp)+,a6
   148bc:	lea 12(sp),sp
   148c0:	rts

000148c2 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   148c2:	lea -32(sp),sp
   148c6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   148ca:	move.l 48(sp),36(sp)
   148d0:	move.l 52(sp),40(sp)
   148d6:	move.l 56(sp),28(sp)
   148dc:	move.l 60(sp),32(sp)
   148e2:	move.l 19b68 <MathIeeeDoubBasBase>,d0
   148e8:	movea.l d0,a6
   148ea:	move.l 36(sp),d0
   148ee:	move.l 40(sp),d1
   148f2:	move.l 28(sp),d2
   148f6:	move.l 32(sp),d3
   148fa:	jsr -66(a6)
   148fe:	move.l d0,12(sp)
   14902:	move.l d1,16(sp)
   14906:	move.l 12(sp),20(sp)
   1490c:	move.l 16(sp),24(sp)
   14912:	move.l 20(sp),d0
   14916:	move.l 24(sp),d1
}
   1491a:	movem.l (sp)+,d2-d3/a6
   1491e:	lea 32(sp),sp
   14922:	rts

00014924 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   14924:	lea -32(sp),sp
   14928:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   1492c:	move.l 48(sp),36(sp)
   14932:	move.l 52(sp),40(sp)
   14938:	move.l 56(sp),28(sp)
   1493e:	move.l 60(sp),32(sp)
   14944:	move.l 19b68 <MathIeeeDoubBasBase>,d0
   1494a:	movea.l d0,a6
   1494c:	move.l 36(sp),d0
   14950:	move.l 40(sp),d1
   14954:	move.l 28(sp),d2
   14958:	move.l 32(sp),d3
   1495c:	jsr -84(a6)
   14960:	move.l d0,12(sp)
   14964:	move.l d1,16(sp)
   14968:	move.l 12(sp),20(sp)
   1496e:	move.l 16(sp),24(sp)
   14974:	move.l 20(sp),d0
   14978:	move.l 24(sp),d1
}
   1497c:	movem.l (sp)+,d2-d3/a6
   14980:	lea 32(sp),sp
   14984:	rts

00014986 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   14986:	lea -12(sp),sp
   1498a:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   1498c:	move.l 20(sp),12(sp)
   14992:	move.l 24(sp),8(sp)
   14998:	move.l 19b60 <MathIeeeSingBasBase>,d0
   1499e:	movea.l d0,a6
   149a0:	move.l 12(sp),d0
   149a4:	move.l 8(sp),d1
   149a8:	jsr -84(a6)
   149ac:	move.l d0,4(sp)
   149b0:	move.l 4(sp),d0
}
   149b4:	movea.l (sp)+,a6
   149b6:	lea 12(sp),sp
   149ba:	rts

000149bc <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   149bc:	lea -12(sp),sp
   149c0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   149c2:	move.l 20(sp),12(sp)
   149c8:	move.l 24(sp),8(sp)
   149ce:	move.l 19b60 <MathIeeeSingBasBase>,d0
   149d4:	movea.l d0,a6
   149d6:	move.l 12(sp),d0
   149da:	move.l 8(sp),d1
   149de:	jsr -42(a6)
   149e2:	move.l d0,4(sp)
   149e6:	move.l 4(sp),d0
}
   149ea:	movea.l (sp)+,a6
   149ec:	lea 12(sp),sp
   149f0:	rts

000149f2 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   149f2:	lea -20(sp),sp
   149f6:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   149f8:	move.l 28(sp),20(sp)
   149fe:	move.l 19b6c <MathIeeeDoubTransBase>,d0
   14a04:	movea.l d0,a6
   14a06:	move.l 20(sp),d0
   14a0a:	jsr -108(a6)
   14a0e:	move.l d0,4(sp)
   14a12:	move.l d1,8(sp)
   14a16:	move.l 4(sp),12(sp)
   14a1c:	move.l 8(sp),16(sp)
   14a22:	move.l 12(sp),d0
   14a26:	move.l 16(sp),d1
}
   14a2a:	movea.l (sp)+,a6
   14a2c:	lea 20(sp),sp
   14a30:	rts

00014a32 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   14a32:	lea -12(sp),sp
   14a36:	move.l a6,-(sp)
	return IEEEDPFix(value);
   14a38:	move.l 20(sp),8(sp)
   14a3e:	move.l 24(sp),12(sp)
   14a44:	move.l 19b68 <MathIeeeDoubBasBase>,d0
   14a4a:	movea.l d0,a6
   14a4c:	move.l 8(sp),d0
   14a50:	move.l 12(sp),d1
   14a54:	jsr -30(a6)
   14a58:	move.l d0,4(sp)
   14a5c:	move.l 4(sp),d0
   14a60:	move.l d0,-(sp)
   14a62:	jsr 14a9a <__floatsidf>
   14a68:	addq.l #4,sp
}
   14a6a:	movea.l (sp)+,a6
   14a6c:	lea 12(sp),sp
   14a70:	rts

00014a72 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   14a72:	subq.l #8,sp
   14a74:	move.l a6,-(sp)
	return IEEESPFix(value);
   14a76:	move.l 16(sp),8(sp)
   14a7c:	move.l 19b60 <MathIeeeSingBasBase>,d0
   14a82:	movea.l d0,a6
   14a84:	move.l 8(sp),d0
   14a88:	jsr -30(a6)
   14a8c:	move.l d0,4(sp)
   14a90:	move.l 4(sp),d0
}
   14a94:	movea.l (sp)+,a6
   14a96:	addq.l #8,sp
   14a98:	rts

00014a9a <__floatsidf>:


DOUBLE __floatsidf (int i) {
   14a9a:	lea -20(sp),sp
   14a9e:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   14aa0:	move.l 28(sp),20(sp)
   14aa6:	move.l 19b68 <MathIeeeDoubBasBase>,d0
   14aac:	movea.l d0,a6
   14aae:	move.l 20(sp),d0
   14ab2:	jsr -36(a6)
   14ab6:	move.l d0,4(sp)
   14aba:	move.l d1,8(sp)
   14abe:	move.l 4(sp),12(sp)
   14ac4:	move.l 8(sp),16(sp)
   14aca:	move.l 12(sp),d0
   14ace:	move.l 16(sp),d1
}
   14ad2:	movea.l (sp)+,a6
   14ad4:	lea 20(sp),sp
   14ad8:	rts

00014ada <__floatsisf>:

FLOAT __floatsisf(int i) {
   14ada:	subq.l #8,sp
   14adc:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   14ade:	move.l 16(sp),8(sp)
   14ae4:	move.l 19b60 <MathIeeeSingBasBase>,d0
   14aea:	movea.l d0,a6
   14aec:	move.l 8(sp),d0
   14af0:	jsr -36(a6)
   14af4:	move.l d0,4(sp)
   14af8:	move.l 4(sp),d0
}
   14afc:	movea.l (sp)+,a6
   14afe:	addq.l #8,sp
   14b00:	rts

00014b02 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   14b02:	subq.l #8,sp
   14b04:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   14b06:	move.l 16(sp),8(sp)
   14b0c:	move.l 19b60 <MathIeeeSingBasBase>,d0
   14b12:	movea.l d0,a6
   14b14:	move.l 8(sp),d0
   14b18:	jsr -36(a6)
   14b1c:	move.l d0,4(sp)
   14b20:	move.l 4(sp),d0
}
   14b24:	movea.l (sp)+,a6
   14b26:	addq.l #8,sp
   14b28:	rts

00014b2a <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   14b2a:	lea -32(sp),sp
   14b2e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   14b32:	move.l 48(sp),36(sp)
   14b38:	move.l 52(sp),40(sp)
   14b3e:	move.l 56(sp),28(sp)
   14b44:	move.l 60(sp),32(sp)
   14b4a:	move.l 19b68 <MathIeeeDoubBasBase>,d0
   14b50:	movea.l d0,a6
   14b52:	move.l 36(sp),d0
   14b56:	move.l 40(sp),d1
   14b5a:	move.l 28(sp),d2
   14b5e:	move.l 32(sp),d3
   14b62:	jsr -78(a6)
   14b66:	move.l d0,12(sp)
   14b6a:	move.l d1,16(sp)
   14b6e:	move.l 12(sp),20(sp)
   14b74:	move.l 16(sp),24(sp)
   14b7a:	move.l 20(sp),d0
   14b7e:	move.l 24(sp),d1
}
   14b82:	movem.l (sp)+,d2-d3/a6
   14b86:	lea 32(sp),sp
   14b8a:	rts

00014b8c <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   14b8c:	lea -12(sp),sp
   14b90:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   14b92:	move.l 20(sp),12(sp)
   14b98:	move.l 24(sp),8(sp)
   14b9e:	move.l 19b60 <MathIeeeSingBasBase>,d0
   14ba4:	movea.l d0,a6
   14ba6:	move.l 12(sp),d0
   14baa:	move.l 8(sp),d1
   14bae:	jsr -78(a6)
   14bb2:	move.l d0,4(sp)
   14bb6:	move.l 4(sp),d0
}
   14bba:	movea.l (sp)+,a6
   14bbc:	lea 12(sp),sp
   14bc0:	rts

00014bc2 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   14bc2:	lea -12(sp),sp
   14bc6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14bc8:	move.l 20(sp),12(sp)
   14bce:	move.l 24(sp),8(sp)
   14bd4:	move.l 19b60 <MathIeeeSingBasBase>,d0
   14bda:	movea.l d0,a6
   14bdc:	move.l 12(sp),d0
   14be0:	move.l 8(sp),d1
   14be4:	jsr -42(a6)
   14be8:	move.l d0,4(sp)
   14bec:	move.l 4(sp),d0
}
   14bf0:	movea.l (sp)+,a6
   14bf2:	lea 12(sp),sp
   14bf6:	rts

00014bf8 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   14bf8:	lea -20(sp),sp
   14bfc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   14c00:	move.l 36(sp),24(sp)
   14c06:	move.l 40(sp),28(sp)
   14c0c:	move.l 44(sp),16(sp)
   14c12:	move.l 48(sp),20(sp)
   14c18:	move.l 19b68 <MathIeeeDoubBasBase>,d0
   14c1e:	movea.l d0,a6
   14c20:	move.l 24(sp),d0
   14c24:	move.l 28(sp),d1
   14c28:	move.l 16(sp),d2
   14c2c:	move.l 20(sp),d3
   14c30:	jsr -42(a6)
   14c34:	move.l d0,12(sp)
   14c38:	move.l 12(sp),d0
}
   14c3c:	movem.l (sp)+,d2-d3/a6
   14c40:	lea 20(sp),sp
   14c44:	rts

00014c46 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   14c46:	lea -12(sp),sp
   14c4a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14c4c:	move.l 20(sp),12(sp)
   14c52:	move.l 24(sp),8(sp)
   14c58:	move.l 19b60 <MathIeeeSingBasBase>,d0
   14c5e:	movea.l d0,a6
   14c60:	move.l 12(sp),d0
   14c64:	move.l 8(sp),d1
   14c68:	jsr -42(a6)
   14c6c:	move.l d0,4(sp)
   14c70:	move.l 4(sp),d0
}
   14c74:	movea.l (sp)+,a6
   14c76:	lea 12(sp),sp
   14c7a:	rts

00014c7c <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   14c7c:	lea -12(sp),sp
   14c80:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14c82:	move.l 20(sp),12(sp)
   14c88:	move.l 24(sp),8(sp)
   14c8e:	move.l 19b60 <MathIeeeSingBasBase>,d0
   14c94:	movea.l d0,a6
   14c96:	move.l 12(sp),d0
   14c9a:	move.l 8(sp),d1
   14c9e:	jsr -42(a6)
   14ca2:	move.l d0,4(sp)
   14ca6:	move.l 4(sp),d0
}
   14caa:	movea.l (sp)+,a6
   14cac:	lea 12(sp),sp
   14cb0:	rts

00014cb2 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   14cb2:	lea -20(sp),sp
   14cb6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   14cba:	move.l 36(sp),24(sp)
   14cc0:	move.l 40(sp),28(sp)
   14cc6:	move.l 44(sp),16(sp)
   14ccc:	move.l 48(sp),20(sp)
   14cd2:	move.l 19b68 <MathIeeeDoubBasBase>,d0
   14cd8:	movea.l d0,a6
   14cda:	move.l 24(sp),d0
   14cde:	move.l 28(sp),d1
   14ce2:	move.l 16(sp),d2
   14ce6:	move.l 20(sp),d3
   14cea:	jsr -42(a6)
   14cee:	move.l d0,12(sp)
   14cf2:	move.l 12(sp),d0
}
   14cf6:	movem.l (sp)+,d2-d3/a6
   14cfa:	lea 20(sp),sp
   14cfe:	rts

00014d00 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   14d00:	lea -12(sp),sp
   14d04:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14d06:	move.l 20(sp),12(sp)
   14d0c:	move.l 24(sp),8(sp)
   14d12:	move.l 19b60 <MathIeeeSingBasBase>,d0
   14d18:	movea.l d0,a6
   14d1a:	move.l 12(sp),d0
   14d1e:	move.l 8(sp),d1
   14d22:	jsr -42(a6)
   14d26:	move.l d0,4(sp)
   14d2a:	move.l 4(sp),d0
}
   14d2e:	movea.l (sp)+,a6
   14d30:	lea 12(sp),sp
   14d34:	rts

00014d36 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   14d36:	lea -12(sp),sp
   14d3a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14d3c:	move.l 20(sp),12(sp)
   14d42:	move.l 24(sp),8(sp)
   14d48:	move.l 19b60 <MathIeeeSingBasBase>,d0
   14d4e:	movea.l d0,a6
   14d50:	move.l 12(sp),d0
   14d54:	move.l 8(sp),d1
   14d58:	jsr -42(a6)
   14d5c:	move.l d0,4(sp)
   14d60:	move.l 4(sp),d0
}
   14d64:	movea.l (sp)+,a6
   14d66:	lea 12(sp),sp
   14d6a:	rts

00014d6c <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   14d6c:	lea -32(sp),sp
   14d70:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   14d74:	move.l 48(sp),36(sp)
   14d7a:	move.l 52(sp),40(sp)
   14d80:	move.l 56(sp),28(sp)
   14d86:	move.l 60(sp),32(sp)
   14d8c:	move.l 19b68 <MathIeeeDoubBasBase>,d0
   14d92:	movea.l d0,a6
   14d94:	move.l 36(sp),d0
   14d98:	move.l 40(sp),d1
   14d9c:	move.l 28(sp),d2
   14da0:	move.l 32(sp),d3
   14da4:	jsr -72(a6)
   14da8:	move.l d0,12(sp)
   14dac:	move.l d1,16(sp)
   14db0:	move.l 12(sp),20(sp)
   14db6:	move.l 16(sp),24(sp)
   14dbc:	move.l 20(sp),d0
   14dc0:	move.l 24(sp),d1
}
   14dc4:	movem.l (sp)+,d2-d3/a6
   14dc8:	lea 32(sp),sp
   14dcc:	rts

00014dce <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   14dce:	lea -12(sp),sp
   14dd2:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   14dd4:	move.l 20(sp),12(sp)
   14dda:	move.l 24(sp),8(sp)
   14de0:	move.l 19b60 <MathIeeeSingBasBase>,d0
   14de6:	movea.l d0,a6
   14de8:	move.l 12(sp),d0
   14dec:	move.l 8(sp),d1
   14df0:	jsr -72(a6)
   14df4:	move.l d0,4(sp)
   14df8:	move.l 4(sp),d0
}
   14dfc:	movea.l (sp)+,a6
   14dfe:	lea 12(sp),sp
   14e02:	rts

00014e04 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   14e04:	lea -12(sp),sp
   14e08:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   14e0a:	move.l 20(sp),8(sp)
   14e10:	move.l 24(sp),12(sp)
   14e16:	move.l 19b6c <MathIeeeDoubTransBase>,d0
   14e1c:	movea.l d0,a6
   14e1e:	move.l 8(sp),d0
   14e22:	move.l 12(sp),d1
   14e26:	jsr -102(a6)
   14e2a:	move.l d0,4(sp)
   14e2e:	move.l 4(sp),d0
}
   14e32:	movea.l (sp)+,a6
   14e34:	lea 12(sp),sp
   14e38:	rts

00014e3a <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   14e3a:	subq.l #8,sp
   14e3c:	move.l a6,-(sp)
	return IEEESPFix(a);
   14e3e:	move.l 16(sp),8(sp)
   14e44:	move.l 19b60 <MathIeeeSingBasBase>,d0
   14e4a:	movea.l d0,a6
   14e4c:	move.l 8(sp),d0
   14e50:	jsr -30(a6)
   14e54:	move.l d0,4(sp)
   14e58:	move.l 4(sp),d0
}
   14e5c:	movea.l (sp)+,a6
   14e5e:	addq.l #8,sp
   14e60:	rts

00014e62 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   14e62:	       lea -24(sp),sp
   14e66:	       move.l a6,-(sp)
    if (x > 0) {
   14e68:	       clr.l -(sp)
   14e6a:	       move.l 40(sp),-(sp)
   14e6e:	       jsr 14c46 <__gtsf2>
   14e74:	       addq.l #8,sp
   14e76:	       tst.l d0
   14e78:	   /-- ble.s 14eaa <atan2f+0x48>
        return IEEESPAtan(y / x);
   14e7a:	   |   move.l 36(sp),-(sp)
   14e7e:	   |   move.l 36(sp),-(sp)
   14e82:	   |   jsr 14986 <__divsf3>
   14e88:	   |   addq.l #8,sp
   14e8a:	   |   move.l d0,8(sp)
   14e8e:	   |   move.l 19b64 <MathIeeeSingTransBase>,d0
   14e94:	   |   movea.l d0,a6
   14e96:	   |   move.l 8(sp),d0
   14e9a:	   |   jsr -30(a6)
   14e9e:	   |   move.l d0,4(sp)
   14ea2:	   |   move.l 4(sp),d0
   14ea6:	/--|-- bra.w 1500a <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   14eaa:	|  \-> clr.l -(sp)
   14eac:	|      move.l 40(sp),-(sp)
   14eb0:	|      jsr 14d00 <__ltsf2>
   14eb6:	|      addq.l #8,sp
   14eb8:	|      tst.l d0
   14eba:	|  /-- bge.s 14f2e <atan2f+0xcc>
   14ebc:	|  |   clr.l -(sp)
   14ebe:	|  |   move.l 36(sp),-(sp)
   14ec2:	|  |   jsr 14bc2 <__gesf2>
   14ec8:	|  |   addq.l #8,sp
   14eca:	|  |   tst.l d0
   14ecc:	|  +-- blt.s 14f2e <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   14ece:	|  |   move.l 36(sp),-(sp)
   14ed2:	|  |   move.l 36(sp),-(sp)
   14ed6:	|  |   jsr 14986 <__divsf3>
   14edc:	|  |   addq.l #8,sp
   14ede:	|  |   move.l d0,24(sp)
   14ee2:	|  |   move.l 19b64 <MathIeeeSingTransBase>,d0
   14ee8:	|  |   movea.l d0,a6
   14eea:	|  |   move.l 24(sp),d0
   14eee:	|  |   jsr -30(a6)
   14ef2:	|  |   move.l d0,20(sp)
   14ef6:	|  |   move.l 20(sp),d0
   14efa:	|  |   move.l d0,-(sp)
   14efc:	|  |   jsr 149f2 <__extendsfdf2>
   14f02:	|  |   addq.l #4,sp
   14f04:	|  |   move.l #1413754136,-(sp)
   14f0a:	|  |   move.l #1074340347,-(sp)
   14f10:	|  |   move.l d1,-(sp)
   14f12:	|  |   move.l d0,-(sp)
   14f14:	|  |   jsr 148c2 <__adddf3>
   14f1a:	|  |   lea 16(sp),sp
   14f1e:	|  |   move.l d1,-(sp)
   14f20:	|  |   move.l d0,-(sp)
   14f22:	|  |   jsr 14e04 <__truncdfsf2>
   14f28:	|  |   addq.l #8,sp
   14f2a:	+--|-- bra.w 1500a <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   14f2e:	|  \-> clr.l -(sp)
   14f30:	|      move.l 40(sp),-(sp)
   14f34:	|      jsr 14d00 <__ltsf2>
   14f3a:	|      addq.l #8,sp
   14f3c:	|      tst.l d0
   14f3e:	|  /-- bge.s 14fb0 <atan2f+0x14e>
   14f40:	|  |   clr.l -(sp)
   14f42:	|  |   move.l 36(sp),-(sp)
   14f46:	|  |   jsr 14d00 <__ltsf2>
   14f4c:	|  |   addq.l #8,sp
   14f4e:	|  |   tst.l d0
   14f50:	|  +-- bge.s 14fb0 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   14f52:	|  |   move.l 36(sp),-(sp)
   14f56:	|  |   move.l 36(sp),-(sp)
   14f5a:	|  |   jsr 14986 <__divsf3>
   14f60:	|  |   addq.l #8,sp
   14f62:	|  |   move.l d0,16(sp)
   14f66:	|  |   move.l 19b64 <MathIeeeSingTransBase>,d0
   14f6c:	|  |   movea.l d0,a6
   14f6e:	|  |   move.l 16(sp),d0
   14f72:	|  |   jsr -30(a6)
   14f76:	|  |   move.l d0,12(sp)
   14f7a:	|  |   move.l 12(sp),d0
   14f7e:	|  |   move.l d0,-(sp)
   14f80:	|  |   jsr 149f2 <__extendsfdf2>
   14f86:	|  |   addq.l #4,sp
   14f88:	|  |   move.l #1413754136,-(sp)
   14f8e:	|  |   move.l #1074340347,-(sp)
   14f94:	|  |   move.l d1,-(sp)
   14f96:	|  |   move.l d0,-(sp)
   14f98:	|  |   jsr 14d6c <__subdf3>
   14f9e:	|  |   lea 16(sp),sp
   14fa2:	|  |   move.l d1,-(sp)
   14fa4:	|  |   move.l d0,-(sp)
   14fa6:	|  |   jsr 14e04 <__truncdfsf2>
   14fac:	|  |   addq.l #8,sp
   14fae:	+--|-- bra.s 1500a <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   14fb0:	|  \-> clr.l -(sp)
   14fb2:	|      move.l 40(sp),-(sp)
   14fb6:	|      jsr 149bc <__eqsf2>
   14fbc:	|      addq.l #8,sp
   14fbe:	|      tst.l d0
   14fc0:	|  /-- bne.s 14fdc <atan2f+0x17a>
   14fc2:	|  |   clr.l -(sp)
   14fc4:	|  |   move.l 36(sp),-(sp)
   14fc8:	|  |   jsr 14c46 <__gtsf2>
   14fce:	|  |   addq.l #8,sp
   14fd0:	|  |   tst.l d0
   14fd2:	|  +-- ble.s 14fdc <atan2f+0x17a>
        return PI / 2;
   14fd4:	|  |   move.l #1070141403,d0
   14fda:	+--|-- bra.s 1500a <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   14fdc:	|  \-> clr.l -(sp)
   14fde:	|      move.l 40(sp),-(sp)
   14fe2:	|      jsr 149bc <__eqsf2>
   14fe8:	|      addq.l #8,sp
   14fea:	|      tst.l d0
   14fec:	|  /-- bne.s 15008 <atan2f+0x1a6>
   14fee:	|  |   clr.l -(sp)
   14ff0:	|  |   move.l 36(sp),-(sp)
   14ff4:	|  |   jsr 14d00 <__ltsf2>
   14ffa:	|  |   addq.l #8,sp
   14ffc:	|  |   tst.l d0
   14ffe:	|  +-- bge.s 15008 <atan2f+0x1a6>
        return -PI / 2;
   15000:	|  |   move.l #-1077342245,d0
   15006:	+--|-- bra.s 1500a <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   15008:	|  \-> moveq #0,d0
    }
}
   1500a:	\----> movea.l (sp)+,a6
   1500c:	       lea 24(sp),sp
   15010:	       rts

00015012 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   15012:	lea -24(sp),sp
   15016:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   15018:	move.l 32(sp),20(sp)
   1501e:	move.l 36(sp),24(sp)
   15024:	move.l 19b6c <MathIeeeDoubTransBase>,d0
   1502a:	movea.l d0,a6
   1502c:	move.l 20(sp),d0
   15030:	move.l 24(sp),d1
   15034:	jsr -96(a6)
   15038:	move.l d0,4(sp)
   1503c:	move.l d1,8(sp)
   15040:	move.l 4(sp),12(sp)
   15046:	move.l 8(sp),16(sp)
   1504c:	move.l 12(sp),d0
   15050:	move.l 16(sp),d1
}
   15054:	movea.l (sp)+,a6
   15056:	lea 24(sp),sp
   1505a:	rts

0001505c <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   1505c:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   15060:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   15064:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   15068:	mulu.w 8(sp),d1
	addw	d1, d0
   1506c:	add.w d1,d0
	swap	d0
   1506e:	swap d0
	clrw	d0
   15070:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   15072:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   15076:	mulu.w 10(sp),d1
	addl	d1, d0
   1507a:	add.l d1,d0
	rts
   1507c:	rts

0001507e <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   1507e:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   15080:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   15084:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   15088:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   1508e:	   /-- bcc.s 150a6 <__udivsi3+0x28>
	movel	d0, d2
   15090:	   |   move.l d0,d2
	clrw	d2
   15092:	   |   clr.w d2
	swap	d2
   15094:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   15096:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   15098:	   |   move.w d2,d0
	swap	d0
   1509a:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   1509c:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   150a0:	   |   divu.w d1,d2
	movew	d2, d0
   150a2:	   |   move.w d2,d0
	jra	6f
   150a4:	/--|-- bra.s 150d6 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   150a6:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   150a8:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   150aa:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   150ac:	|  |   cmpi.l #65536,d1
	jcc	4b
   150b2:	|  \-- bcc.s 150a8 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   150b4:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   150b6:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   150bc:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   150be:	|      mulu.w d0,d1
	swap	d2
   150c0:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   150c2:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   150c4:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   150c6:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   150c8:	|  /-- bne.s 150d4 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   150ca:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   150cc:	|  +-- bcs.s 150d4 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   150ce:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   150d2:	+--|-- bls.s 150d6 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   150d4:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   150d6:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   150d8:	       rts

000150da <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   150da:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   150dc:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   150de:	    move.l 12(sp),d1
	jpl	1f
   150e2:	/-- bpl.s 150e8 <__divsi3+0xe>
	negl	d1
   150e4:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   150e6:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   150e8:	\-> move.l 8(sp),d0
	jpl	2f
   150ec:	/-- bpl.s 150f2 <__divsi3+0x18>
	negl	d0
   150ee:	|   neg.l d0
	negb	d2
   150f0:	|   neg.b d2

2:	movel	d1, sp@-
   150f2:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   150f4:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   150f6:	    jsr 1507e <__udivsi3>
	addql	#8, sp
   150fc:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   150fe:	    tst.b d2
	jpl	3f
   15100:	/-- bpl.s 15104 <__divsi3+0x2a>
	negl	d0
   15102:	|   neg.l d0

3:	movel	sp@+, d2
   15104:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   15106:	    rts

00015108 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   15108:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   1510c:	move.l 4(sp),d0
	movel	d1, sp@-
   15110:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   15112:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   15114:	jsr 150da <__divsi3>
	addql	#8, sp
   1511a:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   1511c:	move.l 8(sp),d1
	movel	d1, sp@-
   15120:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   15122:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   15124:	jsr 1505c <__mulsi3>
	addql	#8, sp
   1512a:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   1512c:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   15130:	sub.l d0,d1
	movel	d1, d0
   15132:	move.l d1,d0
	rts
   15134:	rts

00015136 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   15136:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   1513a:	move.l 4(sp),d0
	movel	d1, sp@-
   1513e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   15140:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   15142:	jsr 1507e <__udivsi3>
	addql	#8, sp
   15148:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   1514a:	move.l 8(sp),d1
	movel	d1, sp@-
   1514e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   15150:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   15152:	jsr 1505c <__mulsi3>
	addql	#8, sp
   15158:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   1515a:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1515e:	sub.l d0,d1
	movel	d1, d0
   15160:	move.l d1,d0
	rts
   15162:	rts

00015164 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   15164:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   15166:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   1516a:	jsr -516(a6)
    move.l (sp)+, a6
   1516e:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   15170:	rts

00015172 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   15172:	move.b d0,(a3)+
	rts
   15174:	rts
