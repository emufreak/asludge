
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115232,d0
       8:	       subi.l #115232,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c220 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115232,d0
      40:	       subi.l #115232,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c220 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 76e4 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115232,d0
      7e:	       subi.l #115232,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c220 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13d70 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1c9c4 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13d88 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c220 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13d70 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1c9c4 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1c220 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13d70 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1c9c4 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17d76 <PutChar+0x4>
     35c:	|  |              |   jsr 1729e <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1c9cc <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1c9cc <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1c9cc <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1c9cc <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1c9cc <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1c9cc <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1c9cc <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17da0 <PutChar+0x2e>
     834:	|   jsr 1729e <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1c9cc <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17dbc <PutChar+0x4a>
     8a6:	|   jsr 1729e <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1c9cc <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1c9cc <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1c9cc <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1c9cc <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1c9cc <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1c9cc <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1c9cc <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1c9cc <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1c9c4 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1c9cc <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13d70 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1c9cc <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c8ca <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c8ca <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c8ca <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c8ca <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c8ca <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1c984 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c8ca <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c8ca <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1c980 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c8ca <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c8ca <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c8ca <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9a3a <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c8ca <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c8ce <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c8d2 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2e6a <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17de4 <PutChar+0x72>
     e1a:	          jsr 1729e <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c8e6 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17dfd <PutChar+0x8b>
     e30:	      |   jsr 1729e <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1c8e0 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1c9d0 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1c8e6 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17e2b <PutChar+0xb9>
     ef0:	|         jsr 1729e <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1c9d0 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17e4b <PutChar+0xd9>
     f3c:	|         jsr 1729e <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1c8f2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1c918 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1c908 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1c91c <winHeight>,d0
     f6e:	|         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1c908 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1c908 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1c908 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1c908 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17e6b <PutChar+0xf9>
     fbe:	|         jsr 1729e <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1c9c4 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17e80 <PutChar+0x10e>
    1010:	   |   jsr 1729e <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1c9cc <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1c914 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #115234,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #115298,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #115346,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #115386,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1c90c <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17ebb <PutChar+0x149>
    11c6:	                jsr 1729e <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1c904 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1c908 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1c904 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1c8f8 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1c9d0 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1c918 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1c918 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1c918 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 17c5c <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1c8e6 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1c918 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 17c5c <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1c8f8 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1c918 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1c91c <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 17c5c <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1c918 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1c91c <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 17c5c <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1c9d0 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1c910 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1c90c <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1c914 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1c914 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1c8f2 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1c8f2 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1c8f2 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

 UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, UWORD x, UWORD y) {
    14e8:	                      lea -72(sp),sp
    14ec:	                      move.l a6,-(sp)
    14ee:	                      move.l d2,-(sp)
    14f0:	                      move.l 92(sp),d1
    14f4:	                      move.l 96(sp),d0
    14f8:	                      move.w d1,d1
    14fa:	                      move.w d1,12(sp)
    14fe:	                      move.w d0,d0
    1500:	                      move.w d0,10(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1504:	                      move.l #14675968,56(sp)
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP);
    150c:	                      movea.l 84(sp),a0
    1510:	                      move.l (a0),d0
    1512:	                  /-- bpl.s 1516 <CstDrawZBuffer+0x2e>
    1514:	                  |   addq.l #7,d0
    1516:	                  \-> asr.l #3,d0
    1518:	                      movea.l 84(sp),a0
    151c:	                      move.l 4(a0),d1
    1520:	                      move.l d1,-(sp)
    1522:	                      move.l d0,-(sp)
    1524:	                      jsr 17c5c <__mulsi3>
    152a:	                      addq.l #8,sp
    152c:	                      move.l d0,52(sp)
    1530:	                      moveq #2,d0
    1532:	                      move.l d0,48(sp)
    1536:	                      move.l 1c9c4 <SysBase>,d0
    153c:	                      movea.l d0,a6
    153e:	                      move.l 52(sp),d0
    1542:	                      move.l 48(sp),d1
    1546:	                      jsr -684(a6)
    154a:	                      move.l d0,44(sp)
    154e:	                      move.l 44(sp),d0
    1552:	                      move.l d0,40(sp)

  #ifdef EMULATOR
    if(sprite->height == 60)
    1556:	                      movea.l 84(sp),a0
    155a:	                      move.l 4(a0),d0
    155e:	                      moveq #60,d1
    1560:	                      cmp.l d0,d1
    1562:	                  /-- bne.s 1598 <CstDrawZBuffer+0xb0>
      debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1564:	                  |   movea.l 84(sp),a0
    1568:	                  |   move.l 4(a0),d0
    156c:	                  |   move.l d0,d0
    156e:	                  |   movea.w d0,a1
    1570:	                  |   movea.l 84(sp),a0
    1574:	                  |   move.l (a0),d0
    1576:	                  |   move.l d0,d0
    1578:	                  |   movea.w d0,a0
    157a:	                  |   clr.l -(sp)
    157c:	                  |   pea 1 <_start+0x1>
    1580:	                  |   move.l a1,-(sp)
    1582:	                  |   move.l a0,-(sp)
    1584:	                  |   pea 17ed7 <PutChar+0x165>
    158a:	                  |   move.l 60(sp),-(sp)
    158e:	                  |   jsr 17386 <debug_register_bitmap>
    1594:	                  |   lea 24(sp),sp
  #endif  

  WaitBlit();
    1598:	                  \-> move.l 1c9d0 <GfxBase>,d0
    159e:	                      movea.l d0,a6
    15a0:	                      jsr -228(a6)

  custom->bltafwm = 0xffff;
    15a4:	                      movea.l 56(sp),a0
    15a8:	                      move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    15ae:	                      movea.l 56(sp),a0
    15b2:	                      move.w #-1,70(a0)
  custom->bltamod = 0;
    15b8:	                      movea.l 56(sp),a0
    15bc:	                      move.w #0,100(a0)
  custom->bltbmod = 0;
    15c2:	                      movea.l 56(sp),a0
    15c6:	                      move.w #0,98(a0)
  custom->bltcmod = 0;
    15cc:	                      movea.l 56(sp),a0
    15d0:	                      move.w #0,96(a0)
  custom->bltdmod = 0;
    15d6:	                      movea.l 56(sp),a0
    15da:	                      move.w #0,102(a0)
  custom->bltcon0 = 0x9f0; //Copy A to D
    15e0:	                      movea.l 56(sp),a0
    15e4:	                      move.w #2544,64(a0)
  custom->bltcon1 = 0;        
    15ea:	                      movea.l 56(sp),a0
    15ee:	                      move.w #0,66(a0)

  custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    15f4:	                      movea.l 84(sp),a0
    15f8:	                      move.l 24(a0),d2
    15fc:	                      movea.l 84(sp),a0
    1600:	                      move.l (a0),d0
    1602:	                  /-- bpl.s 1606 <CstDrawZBuffer+0x11e>
    1604:	                  |   addq.l #7,d0
    1606:	                  \-> asr.l #3,d0
    1608:	                      movea.l 84(sp),a0
    160c:	                      move.l 4(a0),d1
    1610:	                      move.l d1,-(sp)
    1612:	                      move.l d0,-(sp)
    1614:	                      jsr 17c5c <__mulsi3>
    161a:	                      addq.l #8,sp
    161c:	                      move.l d0,d1
    161e:	                      move.l d1,d0
    1620:	                      add.l d0,d0
    1622:	                      add.l d0,d0
    1624:	                      add.l d1,d0
    1626:	                      add.l d2,d0
    1628:	                      movea.l 56(sp),a0
    162c:	                      move.l d0,80(a0)
  custom->bltdpt = (APTR) returnvalue;
    1630:	                      movea.l 56(sp),a0
    1634:	                      move.l 40(sp),84(a0)
  custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    163a:	                      movea.l 84(sp),a0
    163e:	                      move.l 4(a0),d0
    1642:	                      move.l d0,d0
    1644:	                      move.w d0,d1
    1646:	                      lsl.w #6,d1
    1648:	                      movea.l 84(sp),a0
    164c:	                      move.l (a0),d0
    164e:	                      movea.l d0,a0
    1650:	                      cmpa.w #0,a0
    1654:	                  /-- bge.s 165a <CstDrawZBuffer+0x172>
    1656:	                  |   lea 15(a0),a0
    165a:	                  \-> move.l a0,d0
    165c:	                      asr.l #4,d0
    165e:	                      move.l d0,d0
    1660:	                      add.w d1,d0
    1662:	                      movea.l 56(sp),a0
    1666:	                      move.w d0,88(a0)

  while(zbuffer) 
    166a:	   /----------------- bra.w 1d78 <CstDrawZBuffer+0x890>
  {

    UWORD spritex1oncanvas = x;
    166e:	/--|----------------> move.w 12(sp),38(sp)
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1674:	|  |                  movea.l 84(sp),a0
    1678:	|  |                  move.l (a0),d0
    167a:	|  |                  move.l d0,d0
    167c:	|  |                  move.w 38(sp),d1
    1680:	|  |                  add.w d0,d1
    1682:	|  |                  move.w d1,36(sp)
    UWORD spritey1oncanvas = y;
    1686:	|  |                  move.w 10(sp),34(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    168c:	|  |                  movea.l 84(sp),a0
    1690:	|  |                  move.l 4(a0),d0
    1694:	|  |                  move.l d0,d0
    1696:	|  |                  move.w 34(sp),d1
    169a:	|  |                  add.w d0,d1
    169c:	|  |                  move.w d1,32(sp)

    UWORD zbufferx1oncanvas = zbuffer->topx;
    16a0:	|  |                  movea.l 88(sp),a0
    16a4:	|  |                  move.l 8(a0),d0
    16a8:	|  |                  move.w d0,30(sp)
    UWORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    16ac:	|  |                  movea.l 88(sp),a0
    16b0:	|  |                  move.l (a0),d0
    16b2:	|  |                  move.l d0,d0
    16b4:	|  |                  move.w 30(sp),d1
    16b8:	|  |                  add.w d0,d1
    16ba:	|  |                  move.w d1,28(sp)

    UWORD zbuffery1oncanvas = zbuffer->topy;
    16be:	|  |                  movea.l 88(sp),a0
    16c2:	|  |                  move.l 12(a0),d0
    16c6:	|  |                  move.w d0,26(sp)
    UWORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    16ca:	|  |                  movea.l 88(sp),a0
    16ce:	|  |                  move.l 4(a0),d0
    16d2:	|  |                  move.l d0,d0
    16d4:	|  |                  move.w 26(sp),d1
    16d8:	|  |                  add.w d0,d1
    16da:	|  |                  move.w d1,24(sp)
  
    BOOL zbufferfromright = FALSE;
    16de:	|  |                  clr.w 78(sp)
    BOOL zbufferfromleft = FALSE;
    16e2:	|  |                  clr.w 76(sp)
    BOOL zbufferfrombottom = FALSE;
    16e6:	|  |                  clr.w 74(sp)
    BOOL zbufferfromtop = FALSE;
    16ea:	|  |                  clr.w 72(sp)

    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) {
    16ee:	|  |                  moveq #0,d0
    16f0:	|  |                  move.w 32(sp),d0
    16f4:	|  |                  movea.l 88(sp),a0
    16f8:	|  |                  move.l 16(a0),d1
    16fc:	|  |                  cmp.l d0,d1
    16fe:	|  +----------------- ble.w 1d78 <CstDrawZBuffer+0x890>
      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    1702:	|  |                  move.w 30(sp),d0
    1706:	|  |                  cmp.w 38(sp),d0
    170a:	|  |              /-- bcs.s 171e <CstDrawZBuffer+0x236>
    170c:	|  |              |   move.w 30(sp),d1
    1710:	|  |              |   cmp.w 36(sp),d1
    1714:	|  |              +-- bcc.s 171e <CstDrawZBuffer+0x236>
        zbufferfromright = TRUE;
    1716:	|  |              |   move.w #1,78(sp)
    171c:	|  |           /--|-- bra.s 1738 <CstDrawZBuffer+0x250>
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    171e:	|  |           |  \-> move.w 30(sp),d0
    1722:	|  |           |      cmp.w 38(sp),d0
    1726:	|  |           +----- bcc.s 1738 <CstDrawZBuffer+0x250>
    1728:	|  |           |      move.w 28(sp),d1
    172c:	|  |           |      cmp.w 38(sp),d1
    1730:	|  |           +----- bls.s 1738 <CstDrawZBuffer+0x250>
        zbufferfromleft = TRUE;       
    1732:	|  |           |      move.w #1,76(sp)

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
    1738:	|  |           \----> tst.w 76(sp)
    173c:	|  |              /-- bne.s 1744 <CstDrawZBuffer+0x25c>
    173e:	|  |              |   tst.w 78(sp)
    1742:	|  |           /--|-- beq.s 177a <CstDrawZBuffer+0x292>
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1744:	|  |           |  \-> move.w 26(sp),d0
    1748:	|  |           |      cmp.w 34(sp),d0
    174c:	|  |           |  /-- bcs.s 1760 <CstDrawZBuffer+0x278>
    174e:	|  |           |  |   move.w 26(sp),d1
    1752:	|  |           |  |   cmp.w 32(sp),d1
    1756:	|  |           |  +-- bcc.s 1760 <CstDrawZBuffer+0x278>
          zbufferfrombottom = TRUE;
    1758:	|  |           |  |   move.w #1,74(sp)
    175e:	|  |           +--|-- bra.s 177a <CstDrawZBuffer+0x292>

        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
    1760:	|  |           |  \-> move.w 26(sp),d0
    1764:	|  |           |      cmp.w 34(sp),d0
    1768:	|  |           +----- bcc.s 177a <CstDrawZBuffer+0x292>
    176a:	|  |           |      move.w 24(sp),d1
    176e:	|  |           |      cmp.w 34(sp),d1
    1772:	|  |           +----- bls.s 177a <CstDrawZBuffer+0x292>
          zbufferfromtop = TRUE;       
    1774:	|  |           |      move.w #1,72(sp)
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    177a:	|  |           \----> tst.w 78(sp)
    177e:	|  |              /-- bne.s 1788 <CstDrawZBuffer+0x2a0>
    1780:	|  |              |   tst.w 76(sp)
    1784:	|  |  /-----------|-- beq.w 1d6e <CstDrawZBuffer+0x886>
    1788:	|  |  |           \-> tst.w 74(sp)
    178c:	|  |  |           /-- bne.s 1796 <CstDrawZBuffer+0x2ae>
    178e:	|  |  |           |   tst.w 72(sp)
    1792:	|  |  +-----------|-- beq.w 1d6e <CstDrawZBuffer+0x886>

        UWORD xdiff;
        UWORD xdiffbyte;          
        UWORD xdiffrest;
        UWORD bytewidth, width, rest;
        if(zbufferfromright)
    1796:	|  |  |           \-> tst.w 78(sp)
    179a:	|  |  |     /-------- beq.w 198e <CstDrawZBuffer+0x4a6>
        {        
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    179e:	|  |  |     |         move.w 38(sp),d0
    17a2:	|  |  |     |         sub.w 30(sp),d0
    17a6:	|  |  |     |         move.w d0,22(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    17aa:	|  |  |     |         move.w 22(sp),d0
    17ae:	|  |  |     |         lsr.w #4,d0
    17b0:	|  |  |     |         add.w d0,d0
    17b2:	|  |  |     |         move.w d0,66(sp)
          xdiffrest = xdiff - xdiffbyte * 8;
    17b6:	|  |  |     |         move.w 66(sp),d0
    17ba:	|  |  |     |         lsl.w #3,d0
    17bc:	|  |  |     |         move.w 22(sp),d1
    17c0:	|  |  |     |         sub.w d0,d1
    17c2:	|  |  |     |         move.w d1,20(sp)
          bytewidth, width, rest;


          if( zbufferx2oncanvas > spritex2oncanvas)    
    17c6:	|  |  |     |         move.w 36(sp),d0
    17ca:	|  |  |     |         cmp.w 28(sp),d0
    17ce:	|  |  |     |  /----- bcc.w 18b6 <CstDrawZBuffer+0x3ce>
            //Width       ----------------++++++++++++++++++++++++++++----
            //BWidth      ----------------++++++++++++++++++++++++++++++++
            //ShiftB      ------------------------------------------------

         
            width = spritex2oncanvas - zbufferx1oncanvas;
    17d2:	|  |  |     |  |      move.w 36(sp),d1
    17d6:	|  |  |     |  |      sub.w 30(sp),d1
    17da:	|  |  |     |  |      move.w d1,18(sp)
            bytewidth = (width/16)*2;
    17de:	|  |  |     |  |      move.w 18(sp),d0
    17e2:	|  |  |     |  |      lsr.w #4,d0
    17e4:	|  |  |     |  |      add.w d0,d0
    17e6:	|  |  |     |  |      move.w d0,64(sp)

            WaitBlit();
    17ea:	|  |  |     |  |      move.l 1c9d0 <GfxBase>,d0
    17f0:	|  |  |     |  |      movea.l d0,a6
    17f2:	|  |  |     |  |      jsr -228(a6)

            bltapt = zbuffer->bitplane;
    17f6:	|  |  |     |  |      movea.l 88(sp),a0
    17fa:	|  |  |     |  |      move.l 20(a0),d0
    17fe:	|  |  |     |  |      move.l d0,68(sp)
            if( xdiffrest) {
    1802:	|  |  |     |  |      tst.w 20(sp)
    1806:	|  |  |     |  |  /-- beq.s 180c <CstDrawZBuffer+0x324>
              bytewidth += 2;            
    1808:	|  |  |     |  |  |   addq.w #2,64(sp)
            } 

            custom->bltalwm = 0xffff << xdiffrest;
    180c:	|  |  |     |  |  \-> moveq #0,d0
    180e:	|  |  |     |  |      move.w 20(sp),d0
    1812:	|  |  |     |  |      moveq #0,d1
    1814:	|  |  |     |  |      not.w d1
    1816:	|  |  |     |  |      lsl.l d0,d1
    1818:	|  |  |     |  |      move.l d1,d0
    181a:	|  |  |     |  |      movea.l 56(sp),a0
    181e:	|  |  |     |  |      move.w d0,70(a0)
            custom->bltcon0 = xdiffrest * 4096 + 0xd0c;              
    1822:	|  |  |     |  |      move.w 20(sp),d0
    1826:	|  |  |     |  |      moveq #12,d1
    1828:	|  |  |     |  |      lsl.w d1,d0
    182a:	|  |  |     |  |      addi.w #3340,d0
    182e:	|  |  |     |  |      movea.l 56(sp),a0
    1832:	|  |  |     |  |      move.w d0,64(a0)
            custom->bltbpt = returnvalue + xdiffbyte;
    1836:	|  |  |     |  |      moveq #0,d0
    1838:	|  |  |     |  |      move.w 66(sp),d0
    183c:	|  |  |     |  |      add.l 40(sp),d0
    1840:	|  |  |     |  |      movea.l 56(sp),a0
    1844:	|  |  |     |  |      move.l d0,76(a0)
            custom->bltdpt = returnvalue + xdiffbyte;
    1848:	|  |  |     |  |      moveq #0,d0
    184a:	|  |  |     |  |      move.w 66(sp),d0
    184e:	|  |  |     |  |      add.l 40(sp),d0
    1852:	|  |  |     |  |      movea.l 56(sp),a0
    1856:	|  |  |     |  |      move.l d0,84(a0)
            custom->bltafwm = 0xffff;
    185a:	|  |  |     |  |      movea.l 56(sp),a0
    185e:	|  |  |     |  |      move.w #-1,68(a0)
            custom->bltbmod = sprite->width/8 - bytewidth;
    1864:	|  |  |     |  |      movea.l 84(sp),a0
    1868:	|  |  |     |  |      move.l (a0),d0
    186a:	|  |  |     |  |  /-- bpl.s 186e <CstDrawZBuffer+0x386>
    186c:	|  |  |     |  |  |   addq.l #7,d0
    186e:	|  |  |     |  |  \-> asr.l #3,d0
    1870:	|  |  |     |  |      move.l d0,d0
    1872:	|  |  |     |  |      sub.w 64(sp),d0
    1876:	|  |  |     |  |      movea.l 56(sp),a0
    187a:	|  |  |     |  |      move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    187e:	|  |  |     |  |      movea.l 88(sp),a0
    1882:	|  |  |     |  |      move.l (a0),d0
    1884:	|  |  |     |  |  /-- bpl.s 1888 <CstDrawZBuffer+0x3a0>
    1886:	|  |  |     |  |  |   addq.l #7,d0
    1888:	|  |  |     |  |  \-> asr.l #3,d0
    188a:	|  |  |     |  |      move.l d0,d0
    188c:	|  |  |     |  |      sub.w 64(sp),d0
    1890:	|  |  |     |  |      movea.l 56(sp),a0
    1894:	|  |  |     |  |      move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;                      
    1898:	|  |  |     |  |      movea.l 84(sp),a0
    189c:	|  |  |     |  |      move.l (a0),d0
    189e:	|  |  |     |  |  /-- bpl.s 18a2 <CstDrawZBuffer+0x3ba>
    18a0:	|  |  |     |  |  |   addq.l #7,d0
    18a2:	|  |  |     |  |  \-> asr.l #3,d0
    18a4:	|  |  |     |  |      move.l d0,d0
    18a6:	|  |  |     |  |      sub.w 64(sp),d0
    18aa:	|  |  |     |  |      movea.l 56(sp),a0
    18ae:	|  |  |     |  |      move.w d0,102(a0)
    18b2:	|  |  |  /--|--|----- bra.w 1c2e <CstDrawZBuffer+0x746>
            //Bltbpt      ----------------+-------------------------------------------------------------------------------
            //Blbmod      ++++++++++++++++----------------------------------------------------------------++++++++++++++++
            //Width       --------------------++++++++++++++++++++++++++++++++++++++++++++++++++++++++--------------------
            //BWidth      ----------------++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++----------------
         
            width = spritex2oncanvas - zbufferx1oncanvas;
    18b6:	|  |  |  |  |  \----> move.w 36(sp),d0
    18ba:	|  |  |  |  |         sub.w 30(sp),d0
    18be:	|  |  |  |  |         move.w d0,18(sp)
            bytewidth = (width/16)*2;
    18c2:	|  |  |  |  |         move.w 18(sp),d0
    18c6:	|  |  |  |  |         lsr.w #4,d0
    18c8:	|  |  |  |  |         add.w d0,d0
    18ca:	|  |  |  |  |         move.w d0,64(sp)

            WaitBlit();
    18ce:	|  |  |  |  |         move.l 1c9d0 <GfxBase>,d0
    18d4:	|  |  |  |  |         movea.l d0,a6
    18d6:	|  |  |  |  |         jsr -228(a6)

            bltapt = zbuffer->bitplane;
    18da:	|  |  |  |  |         movea.l 88(sp),a0
    18de:	|  |  |  |  |         move.l 20(a0),d0
    18e2:	|  |  |  |  |         move.l d0,68(sp)
            if( xdiffrest) {
    18e6:	|  |  |  |  |         tst.w 20(sp)
    18ea:	|  |  |  |  |     /-- beq.s 18f0 <CstDrawZBuffer+0x408>
              bytewidth += 2;            
    18ec:	|  |  |  |  |     |   addq.w #2,64(sp)
            } 

            custom->bltalwm = 0x0;
    18f0:	|  |  |  |  |     \-> movea.l 56(sp),a0
    18f4:	|  |  |  |  |         move.w #0,70(a0)
            custom->bltcon0 = xdiffrest * 4096 + 0xd0c;              
    18fa:	|  |  |  |  |         move.w 20(sp),d0
    18fe:	|  |  |  |  |         moveq #12,d1
    1900:	|  |  |  |  |         lsl.w d1,d0
    1902:	|  |  |  |  |         addi.w #3340,d0
    1906:	|  |  |  |  |         movea.l 56(sp),a0
    190a:	|  |  |  |  |         move.w d0,64(a0)
            custom->bltbpt = returnvalue + xdiffbyte;
    190e:	|  |  |  |  |         moveq #0,d0
    1910:	|  |  |  |  |         move.w 66(sp),d0
    1914:	|  |  |  |  |         add.l 40(sp),d0
    1918:	|  |  |  |  |         movea.l 56(sp),a0
    191c:	|  |  |  |  |         move.l d0,76(a0)
            custom->bltdpt = returnvalue + xdiffbyte;
    1920:	|  |  |  |  |         moveq #0,d0
    1922:	|  |  |  |  |         move.w 66(sp),d0
    1926:	|  |  |  |  |         add.l 40(sp),d0
    192a:	|  |  |  |  |         movea.l 56(sp),a0
    192e:	|  |  |  |  |         move.l d0,84(a0)
            custom->bltafwm = 0xffff;
    1932:	|  |  |  |  |         movea.l 56(sp),a0
    1936:	|  |  |  |  |         move.w #-1,68(a0)
            custom->bltbmod = sprite->width/8 - bytewidth;
    193c:	|  |  |  |  |         movea.l 84(sp),a0
    1940:	|  |  |  |  |         move.l (a0),d0
    1942:	|  |  |  |  |     /-- bpl.s 1946 <CstDrawZBuffer+0x45e>
    1944:	|  |  |  |  |     |   addq.l #7,d0
    1946:	|  |  |  |  |     \-> asr.l #3,d0
    1948:	|  |  |  |  |         move.l d0,d0
    194a:	|  |  |  |  |         sub.w 64(sp),d0
    194e:	|  |  |  |  |         movea.l 56(sp),a0
    1952:	|  |  |  |  |         move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1956:	|  |  |  |  |         movea.l 88(sp),a0
    195a:	|  |  |  |  |         move.l (a0),d0
    195c:	|  |  |  |  |     /-- bpl.s 1960 <CstDrawZBuffer+0x478>
    195e:	|  |  |  |  |     |   addq.l #7,d0
    1960:	|  |  |  |  |     \-> asr.l #3,d0
    1962:	|  |  |  |  |         move.l d0,d0
    1964:	|  |  |  |  |         sub.w 64(sp),d0
    1968:	|  |  |  |  |         movea.l 56(sp),a0
    196c:	|  |  |  |  |         move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;          
    1970:	|  |  |  |  |         movea.l 84(sp),a0
    1974:	|  |  |  |  |         move.l (a0),d0
    1976:	|  |  |  |  |     /-- bpl.s 197a <CstDrawZBuffer+0x492>
    1978:	|  |  |  |  |     |   addq.l #7,d0
    197a:	|  |  |  |  |     \-> asr.l #3,d0
    197c:	|  |  |  |  |         move.l d0,d0
    197e:	|  |  |  |  |         sub.w 64(sp),d0
    1982:	|  |  |  |  |         movea.l 56(sp),a0
    1986:	|  |  |  |  |         move.w d0,102(a0)
    198a:	|  |  |  +--|-------- bra.w 1c2e <CstDrawZBuffer+0x746>
        {
          //Get Distance R
          /*sprite  ------------RRRRRRRRx1++++++++++?????????------------*/    
          //zbuffer ------------x1+++++++++++++++++++x2-----------------*/                    
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    198e:	|  |  |  |  \-------> move.w 38(sp),d0
    1992:	|  |  |  |            sub.w 30(sp),d0
    1996:	|  |  |  |            move.w d0,22(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    199a:	|  |  |  |            move.w 22(sp),d0
    199e:	|  |  |  |            lsr.w #4,d0
    19a0:	|  |  |  |            add.w d0,d0
    19a2:	|  |  |  |            move.w d0,66(sp)
          xdiffrest = xdiff - xdiffbyte * 8;
    19a6:	|  |  |  |            move.w 66(sp),d0
    19aa:	|  |  |  |            lsl.w #3,d0
    19ac:	|  |  |  |            move.w 22(sp),d1
    19b0:	|  |  |  |            sub.w d0,d1
    19b2:	|  |  |  |            move.w d1,20(sp)
          bytewidth, width, rest;


          if( zbufferx2oncanvas > spritex2oncanvas)    
    19b6:	|  |  |  |            move.w 36(sp),d0
    19ba:	|  |  |  |            cmp.w 28(sp),d0
    19be:	|  |  |  |  /-------- bcc.w 1afa <CstDrawZBuffer+0x612>
                            //Data        KKKKKKKKKKKKKKKKCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
                            //BltBpt      +---------------------------------------------------------------
                            //BlBmod      NNNNNNNNNNNNNNNN------------------------------------------------
                            //ShiftB      ----------------------------------------------------------------
         
            width = spritex2oncanvas - spritex1oncanvas; 
    19c2:	|  |  |  |  |         move.w 36(sp),d1
    19c6:	|  |  |  |  |         sub.w 38(sp),d1
    19ca:	|  |  |  |  |         move.w d1,18(sp)
            bytewidth = (width/16)*2;
    19ce:	|  |  |  |  |         move.w 18(sp),d0
    19d2:	|  |  |  |  |         lsr.w #4,d0
    19d4:	|  |  |  |  |         add.w d0,d0
    19d6:	|  |  |  |  |         move.w d0,64(sp)

            WaitBlit();
    19da:	|  |  |  |  |         move.l 1c9d0 <GfxBase>,d0
    19e0:	|  |  |  |  |         movea.l d0,a6
    19e2:	|  |  |  |  |         jsr -228(a6)

            bltapt = zbuffer->bitplane + xdiffbyte;
    19e6:	|  |  |  |  |         movea.l 88(sp),a0
    19ea:	|  |  |  |  |         move.l 20(a0),d1
    19ee:	|  |  |  |  |         moveq #0,d0
    19f0:	|  |  |  |  |         move.w 66(sp),d0
    19f4:	|  |  |  |  |         add.l d1,d0
    19f6:	|  |  |  |  |         move.l d0,68(sp)
            if( xdiffrest) {
    19fa:	|  |  |  |  |         tst.w 20(sp)
    19fe:	|  |  |  |  |  /----- beq.s 1a72 <CstDrawZBuffer+0x58a>
              bytewidth += 2;
    1a00:	|  |  |  |  |  |      addq.w #2,64(sp)
              bltapt += -2;
    1a04:	|  |  |  |  |  |      subq.l #2,68(sp)
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0xd0c;
    1a08:	|  |  |  |  |  |      moveq #0,d0
    1a0a:	|  |  |  |  |  |      move.w 20(sp),d0
    1a0e:	|  |  |  |  |  |      moveq #16,d1
    1a10:	|  |  |  |  |  |      sub.l d0,d1
    1a12:	|  |  |  |  |  |      move.l d1,d0
    1a14:	|  |  |  |  |  |      moveq #12,d1
    1a16:	|  |  |  |  |  |      lsl.w d1,d0
    1a18:	|  |  |  |  |  |      addi.w #3340,d0
    1a1c:	|  |  |  |  |  |      movea.l 56(sp),a0
    1a20:	|  |  |  |  |  |      move.w d0,64(a0)
              custom->bltafwm = 0xffff >> (16 - xdiffrest);
    1a24:	|  |  |  |  |  |      moveq #0,d0
    1a26:	|  |  |  |  |  |      move.w 20(sp),d0
    1a2a:	|  |  |  |  |  |      moveq #16,d1
    1a2c:	|  |  |  |  |  |      sub.l d0,d1
    1a2e:	|  |  |  |  |  |      moveq #0,d0
    1a30:	|  |  |  |  |  |      not.w d0
    1a32:	|  |  |  |  |  |      asr.l d1,d0
    1a34:	|  |  |  |  |  |      move.l d0,d0
    1a36:	|  |  |  |  |  |      movea.l 56(sp),a0
    1a3a:	|  |  |  |  |  |      move.w d0,68(a0)
              custom->bltalwm = 0xffff << xdiffrest;
    1a3e:	|  |  |  |  |  |      moveq #0,d0
    1a40:	|  |  |  |  |  |      move.w 20(sp),d0
    1a44:	|  |  |  |  |  |      moveq #0,d1
    1a46:	|  |  |  |  |  |      not.w d1
    1a48:	|  |  |  |  |  |      lsl.l d0,d1
    1a4a:	|  |  |  |  |  |      move.l d1,d0
    1a4c:	|  |  |  |  |  |      movea.l 56(sp),a0
    1a50:	|  |  |  |  |  |      move.w d0,70(a0)
              custom->bltbpt = returnvalue - 2;
    1a54:	|  |  |  |  |  |      move.l 40(sp),d0
    1a58:	|  |  |  |  |  |      subq.l #2,d0
    1a5a:	|  |  |  |  |  |      movea.l 56(sp),a0
    1a5e:	|  |  |  |  |  |      move.l d0,76(a0)
              custom->bltdpt = returnvalue - 2;
    1a62:	|  |  |  |  |  |      move.l 40(sp),d0
    1a66:	|  |  |  |  |  |      subq.l #2,d0
    1a68:	|  |  |  |  |  |      movea.l 56(sp),a0
    1a6c:	|  |  |  |  |  |      move.l d0,84(a0)
    1a70:	|  |  |  |  |  |  /-- bra.s 1aa8 <CstDrawZBuffer+0x5c0>
            } else {
              bytewidth += 2;
    1a72:	|  |  |  |  |  \--|-> addq.w #2,64(sp)
              custom->bltcon0 = 0xd0c;
    1a76:	|  |  |  |  |     |   movea.l 56(sp),a0
    1a7a:	|  |  |  |  |     |   move.w #3340,64(a0)
              custom->bltafwm = 0xffff;
    1a80:	|  |  |  |  |     |   movea.l 56(sp),a0
    1a84:	|  |  |  |  |     |   move.w #-1,68(a0)
              custom->bltalwm = 0xffff;
    1a8a:	|  |  |  |  |     |   movea.l 56(sp),a0
    1a8e:	|  |  |  |  |     |   move.w #-1,70(a0)
              custom->bltbpt = returnvalue;
    1a94:	|  |  |  |  |     |   movea.l 56(sp),a0
    1a98:	|  |  |  |  |     |   move.l 40(sp),76(a0)
              custom->bltdpt = returnvalue;
    1a9e:	|  |  |  |  |     |   movea.l 56(sp),a0
    1aa2:	|  |  |  |  |     |   move.l 40(sp),84(a0)
            }

            custom->bltbmod = sprite->width/8 - bytewidth;
    1aa8:	|  |  |  |  |     \-> movea.l 84(sp),a0
    1aac:	|  |  |  |  |         move.l (a0),d0
    1aae:	|  |  |  |  |     /-- bpl.s 1ab2 <CstDrawZBuffer+0x5ca>
    1ab0:	|  |  |  |  |     |   addq.l #7,d0
    1ab2:	|  |  |  |  |     \-> asr.l #3,d0
    1ab4:	|  |  |  |  |         move.l d0,d0
    1ab6:	|  |  |  |  |         sub.w 64(sp),d0
    1aba:	|  |  |  |  |         movea.l 56(sp),a0
    1abe:	|  |  |  |  |         move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ac2:	|  |  |  |  |         movea.l 88(sp),a0
    1ac6:	|  |  |  |  |         move.l (a0),d0
    1ac8:	|  |  |  |  |     /-- bpl.s 1acc <CstDrawZBuffer+0x5e4>
    1aca:	|  |  |  |  |     |   addq.l #7,d0
    1acc:	|  |  |  |  |     \-> asr.l #3,d0
    1ace:	|  |  |  |  |         move.l d0,d0
    1ad0:	|  |  |  |  |         sub.w 64(sp),d0
    1ad4:	|  |  |  |  |         movea.l 56(sp),a0
    1ad8:	|  |  |  |  |         move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;                      
    1adc:	|  |  |  |  |         movea.l 84(sp),a0
    1ae0:	|  |  |  |  |         move.l (a0),d0
    1ae2:	|  |  |  |  |     /-- bpl.s 1ae6 <CstDrawZBuffer+0x5fe>
    1ae4:	|  |  |  |  |     |   addq.l #7,d0
    1ae6:	|  |  |  |  |     \-> asr.l #3,d0
    1ae8:	|  |  |  |  |         move.l d0,d0
    1aea:	|  |  |  |  |         sub.w 64(sp),d0
    1aee:	|  |  |  |  |         movea.l 56(sp),a0
    1af2:	|  |  |  |  |         move.w d0,102(a0)
    1af6:	|  |  |  +--|-------- bra.w 1c2e <CstDrawZBuffer+0x746>
                            //Data        KKKKKKKKKKKKKKKKCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
                            //BltBpt      +---------------------------------------------------------------
                            //BlBmod      NNNNNNNNNNNNNNNN------------------------------------------------
                            //ShiftB      ----------------------------------------------------------------
         
            width = zbufferx2oncanvas - spritex1oncanvas; 
    1afa:	|  |  |  |  \-------> move.w 28(sp),d0
    1afe:	|  |  |  |            sub.w 38(sp),d0
    1b02:	|  |  |  |            move.w d0,18(sp)
            bytewidth = (width/16)*2;
    1b06:	|  |  |  |            move.w 18(sp),d0
    1b0a:	|  |  |  |            lsr.w #4,d0
    1b0c:	|  |  |  |            add.w d0,d0
    1b0e:	|  |  |  |            move.w d0,64(sp)

            WaitBlit();
    1b12:	|  |  |  |            move.l 1c9d0 <GfxBase>,d0
    1b18:	|  |  |  |            movea.l d0,a6
    1b1a:	|  |  |  |            jsr -228(a6)

            bltapt = zbuffer->bitplane + xdiffbyte;
    1b1e:	|  |  |  |            movea.l 88(sp),a0
    1b22:	|  |  |  |            move.l 20(a0),d1
    1b26:	|  |  |  |            moveq #0,d0
    1b28:	|  |  |  |            move.w 66(sp),d0
    1b2c:	|  |  |  |            add.l d1,d0
    1b2e:	|  |  |  |            move.l d0,68(sp)
            if( xdiffrest) {
    1b32:	|  |  |  |            tst.w 20(sp)
    1b36:	|  |  |  |     /----- beq.s 1baa <CstDrawZBuffer+0x6c2>
              bytewidth += 2;
    1b38:	|  |  |  |     |      addq.w #2,64(sp)
              bltapt += -2;
    1b3c:	|  |  |  |     |      subq.l #2,68(sp)
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0xd0c;
    1b40:	|  |  |  |     |      moveq #0,d0
    1b42:	|  |  |  |     |      move.w 20(sp),d0
    1b46:	|  |  |  |     |      moveq #16,d1
    1b48:	|  |  |  |     |      sub.l d0,d1
    1b4a:	|  |  |  |     |      move.l d1,d0
    1b4c:	|  |  |  |     |      moveq #12,d1
    1b4e:	|  |  |  |     |      lsl.w d1,d0
    1b50:	|  |  |  |     |      addi.w #3340,d0
    1b54:	|  |  |  |     |      movea.l 56(sp),a0
    1b58:	|  |  |  |     |      move.w d0,64(a0)
              custom->bltafwm = 0xffff >> (16 - xdiffrest);
    1b5c:	|  |  |  |     |      moveq #0,d0
    1b5e:	|  |  |  |     |      move.w 20(sp),d0
    1b62:	|  |  |  |     |      moveq #16,d1
    1b64:	|  |  |  |     |      sub.l d0,d1
    1b66:	|  |  |  |     |      moveq #0,d0
    1b68:	|  |  |  |     |      not.w d0
    1b6a:	|  |  |  |     |      asr.l d1,d0
    1b6c:	|  |  |  |     |      move.l d0,d0
    1b6e:	|  |  |  |     |      movea.l 56(sp),a0
    1b72:	|  |  |  |     |      move.w d0,68(a0)
              custom->bltalwm = 0xffff << xdiffrest;
    1b76:	|  |  |  |     |      moveq #0,d0
    1b78:	|  |  |  |     |      move.w 20(sp),d0
    1b7c:	|  |  |  |     |      moveq #0,d1
    1b7e:	|  |  |  |     |      not.w d1
    1b80:	|  |  |  |     |      lsl.l d0,d1
    1b82:	|  |  |  |     |      move.l d1,d0
    1b84:	|  |  |  |     |      movea.l 56(sp),a0
    1b88:	|  |  |  |     |      move.w d0,70(a0)
              custom->bltbpt = returnvalue - 2;
    1b8c:	|  |  |  |     |      move.l 40(sp),d0
    1b90:	|  |  |  |     |      subq.l #2,d0
    1b92:	|  |  |  |     |      movea.l 56(sp),a0
    1b96:	|  |  |  |     |      move.l d0,76(a0)
              custom->bltdpt = returnvalue - 2;
    1b9a:	|  |  |  |     |      move.l 40(sp),d0
    1b9e:	|  |  |  |     |      subq.l #2,d0
    1ba0:	|  |  |  |     |      movea.l 56(sp),a0
    1ba4:	|  |  |  |     |      move.l d0,84(a0)
    1ba8:	|  |  |  |     |  /-- bra.s 1be0 <CstDrawZBuffer+0x6f8>
            } else {
              bytewidth += 2;
    1baa:	|  |  |  |     \--|-> addq.w #2,64(sp)
              custom->bltcon0 = 0xd0c;
    1bae:	|  |  |  |        |   movea.l 56(sp),a0
    1bb2:	|  |  |  |        |   move.w #3340,64(a0)
              custom->bltafwm = 0xffff;
    1bb8:	|  |  |  |        |   movea.l 56(sp),a0
    1bbc:	|  |  |  |        |   move.w #-1,68(a0)
              custom->bltalwm = 0xffff;
    1bc2:	|  |  |  |        |   movea.l 56(sp),a0
    1bc6:	|  |  |  |        |   move.w #-1,70(a0)
              custom->bltbpt = returnvalue;
    1bcc:	|  |  |  |        |   movea.l 56(sp),a0
    1bd0:	|  |  |  |        |   move.l 40(sp),76(a0)
              custom->bltdpt = returnvalue;
    1bd6:	|  |  |  |        |   movea.l 56(sp),a0
    1bda:	|  |  |  |        |   move.l 40(sp),84(a0)
            }

            custom->bltbmod = sprite->width/8 - bytewidth;
    1be0:	|  |  |  |        \-> movea.l 84(sp),a0
    1be4:	|  |  |  |            move.l (a0),d0
    1be6:	|  |  |  |        /-- bpl.s 1bea <CstDrawZBuffer+0x702>
    1be8:	|  |  |  |        |   addq.l #7,d0
    1bea:	|  |  |  |        \-> asr.l #3,d0
    1bec:	|  |  |  |            move.l d0,d0
    1bee:	|  |  |  |            sub.w 64(sp),d0
    1bf2:	|  |  |  |            movea.l 56(sp),a0
    1bf6:	|  |  |  |            move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1bfa:	|  |  |  |            movea.l 88(sp),a0
    1bfe:	|  |  |  |            move.l (a0),d0
    1c00:	|  |  |  |        /-- bpl.s 1c04 <CstDrawZBuffer+0x71c>
    1c02:	|  |  |  |        |   addq.l #7,d0
    1c04:	|  |  |  |        \-> asr.l #3,d0
    1c06:	|  |  |  |            move.l d0,d0
    1c08:	|  |  |  |            sub.w 64(sp),d0
    1c0c:	|  |  |  |            movea.l 56(sp),a0
    1c10:	|  |  |  |            move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;                                
    1c14:	|  |  |  |            movea.l 84(sp),a0
    1c18:	|  |  |  |            move.l (a0),d0
    1c1a:	|  |  |  |        /-- bpl.s 1c1e <CstDrawZBuffer+0x736>
    1c1c:	|  |  |  |        |   addq.l #7,d0
    1c1e:	|  |  |  |        \-> asr.l #3,d0
    1c20:	|  |  |  |            move.l d0,d0
    1c22:	|  |  |  |            sub.w 64(sp),d0
    1c26:	|  |  |  |            movea.l 56(sp),a0
    1c2a:	|  |  |  |            move.w d0,102(a0)
          }                    
        } 
        
        if(zbufferfromtop)
    1c2e:	|  |  |  \----------> tst.w 72(sp)
    1c32:	|  |  |     /-------- beq.w 1cba <CstDrawZBuffer+0x7d2>
          {
            //Get Distance R
            //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
            /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1c36:	|  |  |     |         move.w 34(sp),d0
    1c3a:	|  |  |     |         sub.w 26(sp),d0
    1c3e:	|  |  |     |         move.w d0,14(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1c42:	|  |  |     |         move.w 32(sp),d1
    1c46:	|  |  |     |         cmp.w 24(sp),d1
    1c4a:	|  |  |     |  /----- bcc.s 1c5a <CstDrawZBuffer+0x772>
              height = sprite->height;
    1c4c:	|  |  |     |  |      movea.l 84(sp),a0
    1c50:	|  |  |     |  |      move.l 4(a0),d0
    1c54:	|  |  |     |  |      move.w d0,62(sp)
    1c58:	|  |  |     |  |  /-- bra.s 1c66 <CstDrawZBuffer+0x77e>
            else
              height = zbuffery2oncanvas - spritey1oncanvas;
    1c5a:	|  |  |     |  \--|-> move.w 24(sp),d0
    1c5e:	|  |  |     |     |   sub.w 34(sp),d0
    1c62:	|  |  |     |     |   move.w d0,62(sp)

            WaitBlit();
    1c66:	|  |  |     |     \-> move.l 1c9d0 <GfxBase>,d0
    1c6c:	|  |  |     |         movea.l d0,a6
    1c6e:	|  |  |     |         jsr -228(a6)

            custom->bltapt = bltapt + ydiff*zbuffer->width/8;            
    1c72:	|  |  |     |         moveq #0,d0
    1c74:	|  |  |     |         move.w 14(sp),d0
    1c78:	|  |  |     |         movea.l 88(sp),a0
    1c7c:	|  |  |     |         move.l (a0),d1
    1c7e:	|  |  |     |         move.l d1,-(sp)
    1c80:	|  |  |     |         move.l d0,-(sp)
    1c82:	|  |  |     |         jsr 17c5c <__mulsi3>
    1c88:	|  |  |     |         addq.l #8,sp
    1c8a:	|  |  |     |         tst.l d0
    1c8c:	|  |  |     |     /-- bge.s 1c90 <CstDrawZBuffer+0x7a8>
    1c8e:	|  |  |     |     |   addq.l #7,d0
    1c90:	|  |  |     |     \-> asr.l #3,d0
    1c92:	|  |  |     |         add.l 68(sp),d0
    1c96:	|  |  |     |         movea.l 56(sp),a0
    1c9a:	|  |  |     |         move.l d0,80(a0)
            custom->bltsize = height*64+bytewidth/2;
    1c9e:	|  |  |     |         move.w 62(sp),d0
    1ca2:	|  |  |     |         move.w d0,d1
    1ca4:	|  |  |     |         lsl.w #6,d1
    1ca6:	|  |  |     |         move.w 64(sp),d0
    1caa:	|  |  |     |         lsr.w #1,d0
    1cac:	|  |  |     |         add.w d1,d0
    1cae:	|  |  |     |         movea.l 56(sp),a0
    1cb2:	|  |  |     |         move.w d0,88(a0)
    1cb6:	|  |  +-----|-------- bra.w 1d6e <CstDrawZBuffer+0x886>
          //Zbufferfrombottom
          {
           //Get Distance R
            //sprite ------------x1+++++++++++++++++++x2-----------------*/
            /*zbuffer------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = zbuffery1oncanvas - spritey1oncanvas; 
    1cba:	|  |  |     \-------> move.w 26(sp),d1
    1cbe:	|  |  |               sub.w 34(sp),d1
    1cc2:	|  |  |               move.w d1,16(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1cc6:	|  |  |               move.w 32(sp),d0
    1cca:	|  |  |               cmp.w 24(sp),d0
    1cce:	|  |  |        /----- bcc.s 1cde <CstDrawZBuffer+0x7f6>
              height = spritey2oncanvas - zbuffery1oncanvas; 
    1cd0:	|  |  |        |      move.w 32(sp),d1
    1cd4:	|  |  |        |      sub.w 26(sp),d1
    1cd8:	|  |  |        |      move.w d1,60(sp)
    1cdc:	|  |  |        |  /-- bra.s 1cea <CstDrawZBuffer+0x802>
            else
              height = zbuffer->height;
    1cde:	|  |  |        \--|-> movea.l 88(sp),a0
    1ce2:	|  |  |           |   move.l 4(a0),d0
    1ce6:	|  |  |           |   move.w d0,60(sp)

            WaitBlit();
    1cea:	|  |  |           \-> move.l 1c9d0 <GfxBase>,d0
    1cf0:	|  |  |               movea.l d0,a6
    1cf2:	|  |  |               jsr -228(a6)

            custom->bltbpt = returnvalue+xdiffbyte+ydiff*sprite->width/8;            
    1cf6:	|  |  |               moveq #0,d2
    1cf8:	|  |  |               move.w 66(sp),d2
    1cfc:	|  |  |               moveq #0,d0
    1cfe:	|  |  |               move.w 16(sp),d0
    1d02:	|  |  |               movea.l 84(sp),a0
    1d06:	|  |  |               move.l (a0),d1
    1d08:	|  |  |               move.l d1,-(sp)
    1d0a:	|  |  |               move.l d0,-(sp)
    1d0c:	|  |  |               jsr 17c5c <__mulsi3>
    1d12:	|  |  |               addq.l #8,sp
    1d14:	|  |  |               tst.l d0
    1d16:	|  |  |           /-- bge.s 1d1a <CstDrawZBuffer+0x832>
    1d18:	|  |  |           |   addq.l #7,d0
    1d1a:	|  |  |           \-> asr.l #3,d0
    1d1c:	|  |  |               add.l d2,d0
    1d1e:	|  |  |               add.l 40(sp),d0
    1d22:	|  |  |               movea.l 56(sp),a0
    1d26:	|  |  |               move.l d0,76(a0)
            custom->bltdpt = returnvalue+xdiffbyte+ydiff*sprite->width;          
    1d2a:	|  |  |               moveq #0,d2
    1d2c:	|  |  |               move.w 66(sp),d2
    1d30:	|  |  |               moveq #0,d0
    1d32:	|  |  |               move.w 16(sp),d0
    1d36:	|  |  |               movea.l 84(sp),a0
    1d3a:	|  |  |               move.l (a0),d1
    1d3c:	|  |  |               move.l d1,-(sp)
    1d3e:	|  |  |               move.l d0,-(sp)
    1d40:	|  |  |               jsr 17c5c <__mulsi3>
    1d46:	|  |  |               addq.l #8,sp
    1d48:	|  |  |               add.l d2,d0
    1d4a:	|  |  |               add.l 40(sp),d0
    1d4e:	|  |  |               movea.l 56(sp),a0
    1d52:	|  |  |               move.l d0,84(a0)
            custom->bltsize = height*64+bytewidth/2;
    1d56:	|  |  |               move.w 60(sp),d0
    1d5a:	|  |  |               move.w d0,d1
    1d5c:	|  |  |               lsl.w #6,d1
    1d5e:	|  |  |               move.w 64(sp),d0
    1d62:	|  |  |               lsr.w #1,d0
    1d64:	|  |  |               add.w d1,d0
    1d66:	|  |  |               movea.l 56(sp),a0
    1d6a:	|  |  |               move.w d0,88(a0)
          }   
      }
      zbuffer = zbuffer->nextPanel;
    1d6e:	|  |  \-------------> movea.l 88(sp),a0
    1d72:	|  |                  move.l 24(a0),88(sp)
  while(zbuffer) 
    1d78:	|  \----------------> tst.l 88(sp)
    1d7c:	\-------------------- bne.w 166e <CstDrawZBuffer+0x186>
    }
  }

  return returnvalue;
    1d80:	                      move.l 40(sp),d0

}
    1d84:	                      move.l (sp)+,d2
    1d86:	                      movea.l (sp)+,a6
    1d88:	                      lea 72(sp),sp
    1d8c:	                      rts

00001d8e <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1d8e:	    lea -20(sp),sp
    1d92:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1d94:	    move.l 1c8f8 <CstDrawBuffer>,d0
    1d9a:	/-- beq.s 1db4 <CstFreeBuffer+0x26>
    1d9c:	|   move.l 1c8f8 <CstDrawBuffer>,20(sp)
    1da4:	|   move.l 1c9c4 <SysBase>,d0
    1daa:	|   movea.l d0,a6
    1dac:	|   movea.l 20(sp),a1
    1db0:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1db4:	\-> move.l 1c8f4 <CstViewBuffer>,d0
    1dba:	/-- beq.s 1dd4 <CstFreeBuffer+0x46>
    1dbc:	|   move.l 1c8f4 <CstViewBuffer>,16(sp)
    1dc4:	|   move.l 1c9c4 <SysBase>,d0
    1dca:	|   movea.l d0,a6
    1dcc:	|   movea.l 16(sp),a1
    1dd0:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1dd4:	\-> move.l 1c8ee <CstCopperList>,d0
    1dda:	/-- beq.s 1df4 <CstFreeBuffer+0x66>
    1ddc:	|   move.l 1c8ee <CstCopperList>,12(sp)
    1de4:	|   move.l 1c9c4 <SysBase>,d0
    1dea:	|   movea.l d0,a6
    1dec:	|   movea.l 12(sp),a1
    1df0:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1df4:	\-> move.l 1c8e6 <CstBackDrop>,d0
    1dfa:	/-- beq.s 1e14 <CstFreeBuffer+0x86>
    1dfc:	|   move.l 1c8e6 <CstBackDrop>,8(sp)
    1e04:	|   move.l 1c9c4 <SysBase>,d0
    1e0a:	|   movea.l d0,a6
    1e0c:	|   movea.l 8(sp),a1
    1e10:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1e14:	\-> move.l 1c8ea <CstBackDropBackup>,d0
    1e1a:	/-- beq.s 1e34 <CstFreeBuffer+0xa6>
    1e1c:	|   move.l 1c8ea <CstBackDropBackup>,4(sp)
    1e24:	|   move.l 1c9c4 <SysBase>,d0
    1e2a:	|   movea.l d0,a6
    1e2c:	|   movea.l 4(sp),a1
    1e30:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1e34:	\-> clr.l 1c8f8 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1e3a:	    clr.l 1c8f4 <CstViewBuffer>
  CstCopperList = NULL;
    1e40:	    clr.l 1c8ee <CstCopperList>
  CstBackDrop = NULL;
    1e46:	    clr.l 1c8e6 <CstBackDrop>

}
    1e4c:	    nop
    1e4e:	    movea.l (sp)+,a6
    1e50:	    lea 20(sp),sp
    1e54:	    rts

00001e56 <CstFreeze>:



void CstFreeze( ) {
    1e56:	       lea -36(sp),sp
    1e5a:	       move.l a6,-(sp)
    1e5c:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1e5e:	       pea 17ee2 <PutChar+0x170>
    1e64:	       jsr 1729e <KPrintF>
    1e6a:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1e6c:	       move.l 1c918 <winWidth>,d0
    1e72:	       lsr.l #3,d0
    1e74:	       move.l d0,d1
    1e76:	       move.l 1c91c <winHeight>,d0
    1e7c:	       move.l d0,d0
    1e7e:	       muls.w d0,d1
    1e80:	       move.w d1,d0
    1e82:	       add.w d0,d0
    1e84:	       add.w d0,d0
    1e86:	       move.w d0,d2
    1e88:	       add.w d1,d2
    1e8a:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1e8e:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1e96:	       moveq #0,d0
    1e98:	       move.w 26(sp),d0
    1e9c:	       move.l d0,18(sp)
    1ea0:	       clr.l 14(sp)
    1ea4:	       move.l 1c9c4 <SysBase>,d0
    1eaa:	       movea.l d0,a6
    1eac:	       move.l 18(sp),d0
    1eb0:	       move.l 14(sp),d1
    1eb4:	       jsr -684(a6)
    1eb8:	       move.l d0,10(sp)
    1ebc:	       move.l 10(sp),d0
    1ec0:	       move.l d0,1c8ea <CstBackDropBackup>
  if( !CstBackDropBackup)
    1ec6:	       move.l 1c8ea <CstBackDropBackup>,d0
    1ecc:	   /-- bne.s 1edc <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1ece:	   |   pea 17f09 <PutChar+0x197>
    1ed4:	   |   jsr 1729e <KPrintF>
    1eda:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1edc:	   \-> move.l 1c91c <winHeight>,d0
    1ee2:	       move.l d0,d0
    1ee4:	       movea.w d0,a1
    1ee6:	       move.l 1c918 <winWidth>,d0
    1eec:	       move.l d0,d0
    1eee:	       movea.w d0,a0
    1ef0:	       move.l 1c8ea <CstBackDropBackup>,d0
    1ef6:	       clr.l -(sp)
    1ef8:	       pea 5 <_start+0x5>
    1efc:	       move.l a1,-(sp)
    1efe:	       move.l a0,-(sp)
    1f00:	       pea 17f41 <PutChar+0x1cf>
    1f06:	       move.l d0,-(sp)
    1f08:	       jsr 17386 <debug_register_bitmap>
    1f0e:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1f12:	       move.l 1c8e6 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1f1a:	       move.l 1c8ea <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1f22:	       clr.l 32(sp)
    1f26:	   /-- bra.s 1f4c <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1f28:	/--|-> move.l 40(sp),d1
    1f2c:	|  |   move.l d1,d0
    1f2e:	|  |   addq.l #4,d0
    1f30:	|  |   move.l d0,40(sp)
    1f34:	|  |   move.l 36(sp),d0
    1f38:	|  |   move.l d0,d2
    1f3a:	|  |   addq.l #4,d2
    1f3c:	|  |   move.l d2,36(sp)
    1f40:	|  |   movea.l d1,a0
    1f42:	|  |   move.l (a0),d1
    1f44:	|  |   movea.l d0,a0
    1f46:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1f48:	|  |   addq.l #1,32(sp)
    1f4c:	|  \-> move.w 26(sp),d0
    1f50:	|      lsr.w #2,d0
    1f52:	|      move.w d0,d0
    1f54:	|      andi.l #65535,d0
    1f5a:	|      cmp.l 32(sp),d0
    1f5e:	\----- bgt.s 1f28 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1f60:	       move.l 1c8f4 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1f68:	       move.l 1c8e6 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1f70:	       clr.l 28(sp)
    1f74:	   /-- bra.s 1f9a <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1f76:	/--|-> move.l 40(sp),d1
    1f7a:	|  |   move.l d1,d0
    1f7c:	|  |   addq.l #4,d0
    1f7e:	|  |   move.l d0,40(sp)
    1f82:	|  |   move.l 36(sp),d0
    1f86:	|  |   move.l d0,d2
    1f88:	|  |   addq.l #4,d2
    1f8a:	|  |   move.l d2,36(sp)
    1f8e:	|  |   movea.l d1,a0
    1f90:	|  |   move.l (a0),d1
    1f92:	|  |   movea.l d0,a0
    1f94:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1f96:	|  |   addq.l #1,28(sp)
    1f9a:	|  \-> move.w 26(sp),d0
    1f9e:	|      lsr.w #2,d0
    1fa0:	|      move.w d0,d0
    1fa2:	|      andi.l #65535,d0
    1fa8:	|      cmp.l 28(sp),d0
    1fac:	\----- bgt.s 1f76 <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1fae:	       move.w #2,1c8f2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1fb6:	       move.l 1c918 <winWidth>,d0
    1fbc:	       lsr.l #4,d0
    1fbe:	       movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    1fc4:	       move.l a0,d1
    1fc6:	       addq.l #2,d1
    1fc8:	       move.l d1,1c908 <CstBackDropBufferApplyCursor>
    1fce:	       move.l d0,d0
    1fd0:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1fd2:	       move.l 1c91c <winHeight>,d0
    1fd8:	       movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    1fde:	       move.l a0,d1
    1fe0:	       addq.l #2,d1
    1fe2:	       move.l d1,1c908 <CstBackDropBufferApplyCursor>
    1fe8:	       move.l d0,d0
    1fea:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1fec:	       movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    1ff2:	       move.l a0,d0
    1ff4:	       addq.l #2,d0
    1ff6:	       move.l d0,1c908 <CstBackDropBufferApplyCursor>
    1ffc:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ffe:	       movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    2004:	       move.l a0,d0
    2006:	       addq.l #2,d0
    2008:	       move.l d0,1c908 <CstBackDropBufferApplyCursor>
    200e:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2010:	       movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    2016:	       move.l a0,d0
    2018:	       addq.l #2,d0
    201a:	       move.l d0,1c908 <CstBackDropBufferApplyCursor>
    2020:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    2022:	       pea 17f50 <PutChar+0x1de>
    2028:	       jsr 1729e <KPrintF>
    202e:	       addq.l #4,sp

}  
    2030:	       nop
    2032:	       move.l (sp)+,d2
    2034:	       movea.l (sp)+,a6
    2036:	       lea 36(sp),sp
    203a:	       rts

0000203c <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    203c:	             lea -144(sp),sp
    2040:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    2044:	             pea 17f64 <PutChar+0x1f2>
    204a:	             jsr 1729e <KPrintF>
    2050:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    2052:	             move.l 164(sp),-(sp)
    2056:	             jsr 6bc <get2bytes>
    205c:	             addq.l #4,sp
    205e:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    2062:	             move.l 164(sp),-(sp)
    2066:	             jsr 6bc <get2bytes>
    206c:	             addq.l #4,sp
    206e:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    2072:	             move.w 134(sp),d0
    2076:	             lsr.w #3,d0
    2078:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    207c:	             move.w 130(sp),d0
    2080:	             lsr.w #1,d0
    2082:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    2086:	             move.l 1c918 <winWidth>,d0
    208c:	             lsr.l #3,d0
    208e:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    2092:	             move.w 130(sp),d0
    2096:	             muls.w 132(sp),d0
    209a:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    209e:	             move.w 124(sp),d1
    20a2:	             move.w d1,d0
    20a4:	             add.w d0,d0
    20a6:	             add.w d0,d0
    20a8:	             move.w d0,d2
    20aa:	             add.w d1,d2
    20ac:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    20b0:	             move.w 1c8e0 <CstPaletteLoaded>,d0
    20b6:	/----------- bne.w 2150 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    20ba:	|            move.w #384,120(sp)

    if(CstPalette) {
    20c0:	|            move.l 1c910 <CstPalette>,d0
    20c6:	|        /-- beq.s 20e0 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    20c8:	|        |   move.l 1c910 <CstPalette>,116(sp)
    20d0:	|        |   move.l 1c9c4 <SysBase>,d0
    20d6:	|        |   movea.l d0,a6
    20d8:	|        |   movea.l 116(sp),a1
    20dc:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    20e0:	|        \-> moveq #64,d0
    20e2:	|            move.l d0,112(sp)
    20e6:	|            clr.l 108(sp)
    20ea:	|            move.l 1c9c4 <SysBase>,d0
    20f0:	|            movea.l d0,a6
    20f2:	|            move.l 112(sp),d0
    20f6:	|            move.l 108(sp),d1
    20fa:	|            jsr -684(a6)
    20fe:	|            move.l d0,104(sp)
    2102:	|            move.l 104(sp),d0
    2106:	|            move.l d0,1c910 <CstPalette>
    CstPaletteLoaded = 1;
    210c:	|            move.w #1,1c8e0 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    2114:	|            move.l 1c910 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    211c:	|            clr.l 152(sp)
    2120:	|        /-- bra.s 2146 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    2122:	|     /--|-> move.l 164(sp),-(sp)
    2126:	|     |  |   jsr 6bc <get2bytes>
    212c:	|     |  |   addq.l #4,sp
    212e:	|     |  |   move.l d0,d1
    2130:	|     |  |   move.l 156(sp),d0
    2134:	|     |  |   move.l d0,d2
    2136:	|     |  |   addq.l #2,d2
    2138:	|     |  |   move.l d2,156(sp)
    213c:	|     |  |   move.l d1,d1
    213e:	|     |  |   movea.l d0,a0
    2140:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2142:	|     |  |   addq.l #1,152(sp)
    2146:	|     |  \-> moveq #31,d0
    2148:	|     |      cmp.l 152(sp),d0
    214c:	|     \----- bge.s 2122 <CstLoadBackdrop+0xe6>
    214e:	|  /-------- bra.s 216e <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2150:	\--|-------> clr.l 148(sp)
    2154:	   |     /-- bra.s 2166 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    2156:	   |  /--|-> move.l 164(sp),-(sp)
    215a:	   |  |  |   jsr 6bc <get2bytes>
    2160:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2162:	   |  |  |   addq.l #1,148(sp)
    2166:	   |  |  \-> moveq #31,d2
    2168:	   |  |      cmp.l 148(sp),d2
    216c:	   |  \----- bge.s 2156 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    216e:	   \-------> moveq #0,d0
    2170:	             move.w 122(sp),d0
    2174:	             move.l d0,100(sp)
    2178:	             moveq #2,d0
    217a:	             move.l d0,96(sp)
    217e:	             move.l 1c9c4 <SysBase>,d0
    2184:	             movea.l d0,a6
    2186:	             move.l 100(sp),d0
    218a:	             move.l 96(sp),d1
    218e:	             jsr -684(a6)
    2192:	             move.l d0,92(sp)
    2196:	             move.l 92(sp),d0
    219a:	             move.l d0,88(sp)
  if( !tmpbuffer)
    219e:	         /-- bne.s 21ae <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    21a0:	         |   pea 17f93 <PutChar+0x221>
    21a6:	         |   jsr 1729e <KPrintF>
    21ac:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    21ae:	         \-> moveq #0,d0
    21b0:	             move.w 124(sp),d0
    21b4:	             move.l d0,84(sp)
    21b8:	             moveq #2,d2
    21ba:	             move.l d2,80(sp)
    21be:	             move.l 1c9c4 <SysBase>,d0
    21c4:	             movea.l d0,a6
    21c6:	             move.l 84(sp),d0
    21ca:	             move.l 80(sp),d1
    21ce:	             jsr -684(a6)
    21d2:	             move.l d0,76(sp)
    21d6:	             move.l 76(sp),d0
    21da:	             move.l d0,72(sp)
  if( !tmpmask)
    21de:	         /-- bne.s 21ee <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    21e0:	         |   pea 17fc9 <PutChar+0x257>
    21e6:	         |   jsr 1729e <KPrintF>
    21ec:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    21ee:	         \-> move.w 132(sp),d0
    21f2:	             movea.w d0,a1
    21f4:	             move.w 134(sp),d0
    21f8:	             movea.w d0,a0
    21fa:	             clr.l -(sp)
    21fc:	             pea 5 <_start+0x5>
    2200:	             move.l a1,-(sp)
    2202:	             move.l a0,-(sp)
    2204:	             pea 17ffd <PutChar+0x28b>
    220a:	             move.l 108(sp),-(sp)
    220e:	             jsr 17386 <debug_register_bitmap>
    2214:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    2218:	             move.w 132(sp),d0
    221c:	             movea.w d0,a1
    221e:	             move.w 134(sp),d0
    2222:	             movea.w d0,a0
    2224:	             clr.l -(sp)
    2226:	             pea 1 <_start+0x1>
    222a:	             move.l a1,-(sp)
    222c:	             move.l a0,-(sp)
    222e:	             pea 1800b <PutChar+0x299>
    2234:	             move.l 108(sp),-(sp)
    2238:	             jsr 17386 <debug_register_bitmap>
    223e:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    2242:	             move.l 164(sp),68(sp)
    2248:	             move.l 88(sp),64(sp)
    224e:	             moveq #2,d0
    2250:	             move.l d0,60(sp)
    2254:	             move.w 122(sp),d0
    2258:	             lsr.w #1,d0
    225a:	             move.w d0,d0
    225c:	             andi.l #65535,d0
    2262:	             move.l d0,56(sp)
    2266:	             move.l 1c9cc <DOSBase>,d0
    226c:	             movea.l d0,a6
    226e:	             move.l 68(sp),d1
    2272:	             move.l 64(sp),d2
    2276:	             move.l 60(sp),d3
    227a:	             move.l 56(sp),d4
    227e:	             jsr -324(a6)
    2282:	             move.l d0,52(sp)
    2286:	             move.l 52(sp),d0
    228a:	             move.w d0,50(sp)
  if(!count) {
    228e:	         /-- bne.s 22a2 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2290:	         |   pea 18017 <PutChar+0x2a5>
    2296:	         |   jsr 1729e <KPrintF>
    229c:	         |   addq.l #4,sp
    return;
    229e:	   /-----|-- bra.w 24ee <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    22a2:	   |     \-> move.l 164(sp),46(sp)
    22a8:	   |         move.l 72(sp),42(sp)
    22ae:	   |         moveq #2,d2
    22b0:	   |         move.l d2,38(sp)
    22b4:	   |         move.w 124(sp),d0
    22b8:	   |         lsr.w #1,d0
    22ba:	   |         move.w d0,d0
    22bc:	   |         andi.l #65535,d0
    22c2:	   |         move.l d0,34(sp)
    22c6:	   |         move.l 1c9cc <DOSBase>,d0
    22cc:	   |         movea.l d0,a6
    22ce:	   |         move.l 46(sp),d1
    22d2:	   |         move.l 42(sp),d2
    22d6:	   |         move.l 38(sp),d3
    22da:	   |         move.l 34(sp),d4
    22de:	   |         jsr -324(a6)
    22e2:	   |         move.l d0,30(sp)
    22e6:	   |         move.l 30(sp),d0
    22ea:	   |         move.w d0,50(sp)
   

  if(!count) {
    22ee:	   |     /-- bne.s 2302 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    22f0:	   |     |   pea 18017 <PutChar+0x2a5>
    22f6:	   |     |   jsr 1729e <KPrintF>
    22fc:	   |     |   addq.l #4,sp
    return;
    22fe:	   +-----|-- bra.w 24ee <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2302:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    230a:	   |         move.l 1c8e6 <CstBackDrop>,d0
    2310:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    2314:	   |         move.l 172(sp),d0
    2318:	   |         move.w d0,d1
    231a:	   |         muls.w 126(sp),d1
    231e:	   |         move.l 168(sp),d0
    2322:	   |     /-- bpl.s 2326 <CstLoadBackdrop+0x2ea>
    2324:	   |     |   addq.l #7,d0
    2326:	   |     \-> asr.l #3,d0
    2328:	   |         move.l d0,d0
    232a:	   |         movea.w d1,a0
    232c:	   |         adda.w d0,a0
    232e:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    2332:	   |         moveq #0,d0
    2334:	   |         move.w 24(sp),d0
    2338:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    233c:	   |         pea 18032 <PutChar+0x2c0>
    2342:	   |         jsr 1729e <KPrintF>
    2348:	   |         addq.l #4,sp


  WaitBlit();
    234a:	   |         move.l 1c9d0 <GfxBase>,d0
    2350:	   |         movea.l d0,a6
    2352:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2356:	   |         movea.l 26(sp),a0
    235a:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    2360:	   |         movea.l 26(sp),a0
    2364:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    236a:	   |         movea.l 26(sp),a0
    236e:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2374:	   |         movea.l 26(sp),a0
    2378:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    237e:	   |         move.w 126(sp),d0
    2382:	   |         sub.w 130(sp),d0
    2386:	   |         movea.l 26(sp),a0
    238a:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    238e:	   |         move.w 126(sp),d0
    2392:	   |         sub.w 130(sp),d0
    2396:	   |         movea.l 26(sp),a0
    239a:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    239e:	   |         movea.l 26(sp),a0
    23a2:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    23a8:	   |         movea.l 26(sp),a0
    23ac:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    23b2:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    23b8:	   |         clr.l 136(sp)
    23bc:	   |     /-- bra.s 241e <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    23be:	   |  /--|-> movea.l 26(sp),a0
    23c2:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    23c8:	   |  |  |   move.l 140(sp),d0
    23cc:	   |  |  |   movea.l 26(sp),a0
    23d0:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    23d4:	   |  |  |   move.l 144(sp),d0
    23d8:	   |  |  |   movea.l 26(sp),a0
    23dc:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    23e0:	   |  |  |   move.l 144(sp),d0
    23e4:	   |  |  |   movea.l 26(sp),a0
    23e8:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    23ec:	   |  |  |   move.w 132(sp),d0
    23f0:	   |  |  |   lsl.w #6,d0
    23f2:	   |  |  |   add.w 128(sp),d0
    23f6:	   |  |  |   movea.l 26(sp),a0
    23fa:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    23fe:	   |  |  |   moveq #0,d0
    2400:	   |  |  |   move.w 124(sp),d0
    2404:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    2408:	   |  |  |   move.w 1c8e4 <CstBackdropSizePlane>,d0
    240e:	   |  |  |   move.w d0,d0
    2410:	   |  |  |   andi.l #65535,d0
    2416:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    241a:	   |  |  |   addq.l #1,136(sp)
    241e:	   |  |  \-> moveq #4,d0
    2420:	   |  |      cmp.l 136(sp),d0
    2424:	   |  \----- bge.s 23be <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    2426:	   |         move.l 1c9d0 <GfxBase>,d0
    242c:	   |         movea.l d0,a6
    242e:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    2432:	   |         pea 18051 <PutChar+0x2df>
    2438:	   |         jsr 1729e <KPrintF>
    243e:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2440:	   |         move.l 88(sp),20(sp)
    2446:	   |         move.l 1c9c4 <SysBase>,d0
    244c:	   |         movea.l d0,a6
    244e:	   |         movea.l 20(sp),a1
    2452:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    2456:	   |         move.l 72(sp),16(sp)
    245c:	   |         move.l 1c9c4 <SysBase>,d0
    2462:	   |         movea.l d0,a6
    2464:	   |         movea.l 16(sp),a1
    2468:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    246c:	   |         move.w #2,1c8f2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    2474:	   |         move.l 1c918 <winWidth>,d0
    247a:	   |         lsr.l #4,d0
    247c:	   |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    2482:	   |         move.l a0,d1
    2484:	   |         addq.l #2,d1
    2486:	   |         move.l d1,1c908 <CstBackDropBufferApplyCursor>
    248c:	   |         move.l d0,d0
    248e:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2490:	   |         move.l 1c91c <winHeight>,d0
    2496:	   |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    249c:	   |         move.l a0,d1
    249e:	   |         addq.l #2,d1
    24a0:	   |         move.l d1,1c908 <CstBackDropBufferApplyCursor>
    24a6:	   |         move.l d0,d0
    24a8:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    24aa:	   |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    24b0:	   |         move.l a0,d0
    24b2:	   |         addq.l #2,d0
    24b4:	   |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    24ba:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    24bc:	   |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    24c2:	   |         move.l a0,d0
    24c4:	   |         addq.l #2,d0
    24c6:	   |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    24cc:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    24ce:	   |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    24d4:	   |         move.l a0,d0
    24d6:	   |         addq.l #2,d0
    24d8:	   |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    24de:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    24e0:	   |         pea 18071 <PutChar+0x2ff>
    24e6:	   |         jsr 1729e <KPrintF>
    24ec:	   |         addq.l #4,sp

}
    24ee:	   \-------> movem.l (sp)+,d2-d4/a6
    24f2:	             lea 144(sp),sp
    24f6:	             rts

000024f8 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    24f8:	                lea -72(sp),sp
    24fc:	                move.l a6,-(sp)
    24fe:	                move.l d2,-(sp)
    2500:	                move.l 88(sp),d1
    2504:	                move.l 92(sp),d0
    2508:	                move.w d1,d1
    250a:	                move.w d1,10(sp)
    250e:	                move.w d0,d0
    2510:	                move.w d0,8(sp)
  UWORD *destination = 0;
    2514:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    2518:	                move.w #2,1c8f2 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    2520:	                move.l 1c8e6 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    2528:	                clr.l 56(sp)

  blitwidth = single->width/16;
    252c:	                movea.l 84(sp),a0
    2530:	                move.l (a0),d0
    2532:	                movea.l d0,a0
    2534:	                cmpa.w #0,a0
    2538:	            /-- bge.s 253e <CstPasteChar+0x46>
    253a:	            |   lea 15(a0),a0
    253e:	            \-> move.l a0,d0
    2540:	                asr.l #4,d0
    2542:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    2546:	            /-- bne.s 254e <CstPasteChar+0x56>
    2548:	            |   moveq #1,d0
    254a:	            |   move.l d0,40(sp)

  if( y < 0) {
    254e:	            \-> tst.w 8(sp)
    2552:	         /----- bge.s 259a <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    2554:	         |      movea.w 8(sp),a1
    2558:	         |      movea.l 84(sp),a0
    255c:	         |      move.l 4(a0),d0
    2560:	         |      add.l a1,d0
    2562:	         |  /-- bpl.s 2576 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2564:	         |  |   pea 1808b <PutChar+0x319>
    256a:	         |  |   jsr 1729e <KPrintF>
    2570:	         |  |   addq.l #4,sp
      return;
    2572:	/--------|--|-- bra.w 2c36 <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    2576:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    257a:	|        |      move.w 8(sp),d0
    257e:	|        |      ext.l d0
    2580:	|        |      neg.l d0
    2582:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    2586:	|        |      movea.l 84(sp),a0
    258a:	|        |      move.l 4(a0),d0
    258e:	|        |      movea.w 8(sp),a0
    2592:	|        |      add.l a0,d0
    2594:	|        |      move.l d0,44(sp)
    2598:	|     /--|----- bra.s 260c <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    259a:	|     |  \----> movea.w 8(sp),a1
    259e:	|     |         movea.l 84(sp),a0
    25a2:	|     |         move.l 4(a0),d0
    25a6:	|     |         move.l a1,d1
    25a8:	|     |         add.l d0,d1
    25aa:	|     |         move.l 1c91c <winHeight>,d0
    25b0:	|     |         cmp.l d1,d0
    25b2:	|     |  /----- bge.s 25f4 <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    25b4:	|     |  |      movea.w 8(sp),a0
    25b8:	|     |  |      move.l 1c91c <winHeight>,d0
    25be:	|     |  |      cmp.l a0,d0
    25c0:	|     |  |  /-- bge.s 25d4 <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    25c2:	|     |  |  |   pea 1808b <PutChar+0x319>
    25c8:	|     |  |  |   jsr 1729e <KPrintF>
    25ce:	|     |  |  |   addq.l #4,sp
      return;
    25d0:	+-----|--|--|-- bra.w 2c36 <CstPasteChar+0x73e>
    }
    ystartdst = y;
    25d4:	|     |  |  \-> movea.w 8(sp),a0
    25d8:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    25dc:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    25e0:	|     |  |      move.l 1c91c <winHeight>,d0
    25e6:	|     |  |      movea.w 8(sp),a0
    25ea:	|     |  |      move.l d0,d1
    25ec:	|     |  |      sub.l a0,d1
    25ee:	|     |  |      move.l d1,44(sp)
    25f2:	|     +--|----- bra.s 260c <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    25f4:	|     |  \----> movea.w 8(sp),a0
    25f8:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    25fc:	|     |         clr.l 48(sp)
    blitheight = single->height;
    2600:	|     |         movea.l 84(sp),a0
    2604:	|     |         move.l 4(a0),d0
    2608:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    260c:	|     \-------> tst.w 10(sp)
    2610:	|        /----- bge.w 2782 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    2614:	|        |      movea.w 10(sp),a1
    2618:	|        |      movea.l 84(sp),a0
    261c:	|        |      move.l (a0),d0
    261e:	|        |      add.l a1,d0
    2620:	|        |  /-- bpl.s 2634 <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2622:	|        |  |   pea 1808b <PutChar+0x319>
    2628:	|        |  |   jsr 1729e <KPrintF>
    262e:	|        |  |   addq.l #4,sp
      return;
    2630:	+--------|--|-- bra.w 2c36 <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    2634:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    263a:	|        |      move.w 10(sp),d0
    263e:	|        |  /-- bpl.s 2644 <CstPasteChar+0x14c>
    2640:	|        |  |   addi.w #15,d0
    2644:	|        |  \-> asr.w #4,d0
    2646:	|        |      neg.w d0
    2648:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    264c:	|        |      move.w 10(sp),d0
    2650:	|        |      ext.l d0
    2652:	|        |      neg.l d0
    2654:	|        |      andi.l #-2147483633,d0
    265a:	|        |  /-- bpl.s 2664 <CstPasteChar+0x16c>
    265c:	|        |  |   subq.l #1,d0
    265e:	|        |  |   moveq #-16,d1
    2660:	|        |  |   or.l d1,d0
    2662:	|        |  |   addq.l #1,d0
    2664:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2668:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    266c:	|        |      movea.l 84(sp),a0
    2670:	|        |      move.l 24(a0),d0
    2674:	|        |      move.l d0,d1
    2676:	|        |      moveq #0,d0
    2678:	|        |      move.w 76(sp),d0
    267c:	|        |      add.l d0,d0
    267e:	|        |      move.l d1,d2
    2680:	|        |      add.l d0,d2
    2682:	|        |      movea.l 84(sp),a0
    2686:	|        |      move.l (a0),d0
    2688:	|        |      move.l 48(sp),-(sp)
    268c:	|        |      move.l d0,-(sp)
    268e:	|        |      jsr 17c5c <__mulsi3>
    2694:	|        |      addq.l #8,sp
    2696:	|        |      lsr.l #3,d0
    2698:	|        |      move.l d2,d1
    269a:	|        |      add.l d0,d1
    269c:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    26a0:	|        |      move.l 1c918 <winWidth>,d0
    26a6:	|        |      move.l 52(sp),-(sp)
    26aa:	|        |      move.l d0,-(sp)
    26ac:	|        |      jsr 17c5c <__mulsi3>
    26b2:	|        |      addq.l #8,sp
    26b4:	|        |      lsr.l #3,d0
    26b6:	|        |      move.l 28(sp),d1
    26ba:	|        |      add.l d1,d0
    26bc:	|        |      move.l d0,d2
    26be:	|        |      subq.l #2,d2
    26c0:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    26c4:	|        |      move.l 1c918 <winWidth>,d0
    26ca:	|        |      move.l 52(sp),-(sp)
    26ce:	|        |      move.l d0,-(sp)
    26d0:	|        |      jsr 17c5c <__mulsi3>
    26d6:	|        |      addq.l #8,sp
    26d8:	|        |      lsr.l #3,d0
    26da:	|        |      move.l 28(sp),d1
    26de:	|        |      add.l d1,d0
    26e0:	|        |      move.l d0,d1
    26e2:	|        |      subq.l #2,d1
    26e4:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    26e8:	|        |      moveq #0,d0
    26ea:	|        |      move.w 74(sp),d0
    26ee:	|        |      moveq #16,d1
    26f0:	|        |      sub.l d0,d1
    26f2:	|        |      move.l d1,d0
    26f4:	|        |      moveq #12,d2
    26f6:	|        |      lsl.l d2,d0
    26f8:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    26fc:	|        |      movea.l 84(sp),a0
    2700:	|        |      move.l (a0),d0
    2702:	|        |      movea.l d0,a0
    2704:	|        |      cmpa.w #0,a0
    2708:	|        |  /-- bge.s 270e <CstPasteChar+0x216>
    270a:	|        |  |   lea 15(a0),a0
    270e:	|        |  \-> move.l a0,d0
    2710:	|        |      asr.l #4,d0
    2712:	|        |      move.l d0,d0
    2714:	|        |      add.w 76(sp),d0
    2718:	|        |      movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    271e:	|        |      move.l a0,d1
    2720:	|        |      addq.l #2,d1
    2722:	|        |      move.l d1,1c908 <CstBackDropBufferApplyCursor>
    2728:	|        |      add.w 78(sp),d0
    272c:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    272e:	|        |      movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    2734:	|        |      move.l a0,d0
    2736:	|        |      addq.l #2,d0
    2738:	|        |      move.l d0,1c908 <CstBackDropBufferApplyCursor>
    273e:	|        |      move.l 44(sp),d0
    2742:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2744:	|        |      movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    274a:	|        |      move.l a0,d0
    274c:	|        |      addq.l #2,d0
    274e:	|        |      move.l d0,1c908 <CstBackDropBufferApplyCursor>
    2754:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2756:	|        |      movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    275c:	|        |      move.l a0,d0
    275e:	|        |      addq.l #2,d0
    2760:	|        |      move.l d0,1c908 <CstBackDropBufferApplyCursor>
    2766:	|        |      move.l 52(sp),d0
    276a:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    276c:	|        |      movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    2772:	|        |      move.l a0,d0
    2774:	|        |      addq.l #2,d0
    2776:	|        |      move.l d0,1c908 <CstBackDropBufferApplyCursor>
    277c:	|        |      clr.w (a0)
    277e:	|     /--|----- bra.w 2a96 <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2782:	|     |  \----> movea.w 10(sp),a1
    2786:	|     |         movea.l 84(sp),a0
    278a:	|     |         move.l (a0),d0
    278c:	|     |         move.l a1,d1
    278e:	|     |         add.l d0,d1
    2790:	|     |         move.l 1c918 <winWidth>,d0
    2796:	|     |         cmp.l d1,d0
    2798:	|     |  /----- bge.w 2934 <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    279c:	|     |  |      movea.w 10(sp),a1
    27a0:	|     |  |      movea.l 84(sp),a0
    27a4:	|     |  |      move.l (a0),d0
    27a6:	|     |  |      move.l a1,d1
    27a8:	|     |  |      sub.l d0,d1
    27aa:	|     |  |      move.l 1c918 <winWidth>,d0
    27b0:	|     |  |      cmp.l d1,d0
    27b2:	|     |  |  /-- bge.s 27c6 <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    27b4:	|     |  |  |   pea 1808b <PutChar+0x319>
    27ba:	|     |  |  |   jsr 1729e <KPrintF>
    27c0:	|     |  |  |   addq.l #4,sp
      return;
    27c2:	+-----|--|--|-- bra.w 2c36 <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    27c6:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    27ca:	|     |  |      movea.w 10(sp),a1
    27ce:	|     |  |      movea.l 84(sp),a0
    27d2:	|     |  |      move.l (a0),d0
    27d4:	|     |  |      add.l a1,d0
    27d6:	|     |  |      move.l d0,d1
    27d8:	|     |  |      move.l 1c918 <winWidth>,d0
    27de:	|     |  |      sub.l d0,d1
    27e0:	|     |  |      move.l d1,d0
    27e2:	|     |  |      lsr.l #4,d0
    27e4:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    27e8:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    27ec:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    27f2:	|     |  |      movea.l 84(sp),a0
    27f6:	|     |  |      move.l 24(a0),d0
    27fa:	|     |  |      move.l d0,d2
    27fc:	|     |  |      movea.l 84(sp),a0
    2800:	|     |  |      move.l (a0),d0
    2802:	|     |  |      move.l 48(sp),-(sp)
    2806:	|     |  |      move.l d0,-(sp)
    2808:	|     |  |      jsr 17c5c <__mulsi3>
    280e:	|     |  |      addq.l #8,sp
    2810:	|     |  |      lsr.l #3,d0
    2812:	|     |  |      move.l d2,d1
    2814:	|     |  |      add.l d0,d1
    2816:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    281a:	|     |  |      move.l 1c918 <winWidth>,d0
    2820:	|     |  |      move.l 52(sp),-(sp)
    2824:	|     |  |      move.l d0,-(sp)
    2826:	|     |  |      jsr 17c5c <__mulsi3>
    282c:	|     |  |      addq.l #8,sp
    282e:	|     |  |      lsr.l #3,d0
    2830:	|     |  |      move.l 28(sp),d1
    2834:	|     |  |      add.l d0,d1
    2836:	|     |  |      move.w 10(sp),d0
    283a:	|     |  |  /-- bpl.s 2840 <CstPasteChar+0x348>
    283c:	|     |  |  |   addi.w #15,d0
    2840:	|     |  |  \-> asr.w #4,d0
    2842:	|     |  |      movea.w d0,a0
    2844:	|     |  |      move.l a0,d0
    2846:	|     |  |      add.l a0,d0
    2848:	|     |  |      move.l d1,d2
    284a:	|     |  |      add.l d0,d2
    284c:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2850:	|     |  |      move.l 1c918 <winWidth>,d0
    2856:	|     |  |      move.l 52(sp),-(sp)
    285a:	|     |  |      move.l d0,-(sp)
    285c:	|     |  |      jsr 17c5c <__mulsi3>
    2862:	|     |  |      addq.l #8,sp
    2864:	|     |  |      lsr.l #3,d0
    2866:	|     |  |      move.l 28(sp),d1
    286a:	|     |  |      add.l d0,d1
    286c:	|     |  |      move.w 10(sp),d0
    2870:	|     |  |  /-- bpl.s 2876 <CstPasteChar+0x37e>
    2872:	|     |  |  |   addi.w #15,d0
    2876:	|     |  |  \-> asr.w #4,d0
    2878:	|     |  |      movea.w d0,a0
    287a:	|     |  |      move.l a0,d0
    287c:	|     |  |      add.l a0,d0
    287e:	|     |  |      move.l d1,d2
    2880:	|     |  |      add.l d0,d2
    2882:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    2886:	|     |  |      movea.l 84(sp),a0
    288a:	|     |  |      move.l (a0),d0
    288c:	|     |  |      andi.l #-2147483633,d0
    2892:	|     |  |  /-- bpl.s 289c <CstPasteChar+0x3a4>
    2894:	|     |  |  |   subq.l #1,d0
    2896:	|     |  |  |   moveq #-16,d1
    2898:	|     |  |  |   or.l d1,d0
    289a:	|     |  |  |   addq.l #1,d0
    289c:	|     |  |  \-> moveq #12,d2
    289e:	|     |  |      lsl.l d2,d0
    28a0:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    28a4:	|     |  |      movea.l 84(sp),a0
    28a8:	|     |  |      move.l (a0),d0
    28aa:	|     |  |      movea.l d0,a0
    28ac:	|     |  |      cmpa.w #0,a0
    28b0:	|     |  |  /-- bge.s 28b6 <CstPasteChar+0x3be>
    28b2:	|     |  |  |   lea 15(a0),a0
    28b6:	|     |  |  \-> move.l a0,d0
    28b8:	|     |  |      asr.l #4,d0
    28ba:	|     |  |      move.l d0,d0
    28bc:	|     |  |      movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    28c2:	|     |  |      move.l a0,d1
    28c4:	|     |  |      addq.l #2,d1
    28c6:	|     |  |      move.l d1,1c908 <CstBackDropBufferApplyCursor>
    28cc:	|     |  |      add.w 76(sp),d0
    28d0:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    28d2:	|     |  |      movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    28d8:	|     |  |      move.l a0,d0
    28da:	|     |  |      addq.l #2,d0
    28dc:	|     |  |      move.l d0,1c908 <CstBackDropBufferApplyCursor>
    28e2:	|     |  |      move.l 44(sp),d0
    28e6:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    28e8:	|     |  |      move.w 10(sp),d0
    28ec:	|     |  |  /-- bpl.s 28f2 <CstPasteChar+0x3fa>
    28ee:	|     |  |  |   addi.w #15,d0
    28f2:	|     |  |  \-> asr.w #4,d0
    28f4:	|     |  |      movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    28fa:	|     |  |      move.l a0,d1
    28fc:	|     |  |      addq.l #2,d1
    28fe:	|     |  |      move.l d1,1c908 <CstBackDropBufferApplyCursor>
    2904:	|     |  |      add.w d0,d0
    2906:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2908:	|     |  |      movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    290e:	|     |  |      move.l a0,d0
    2910:	|     |  |      addq.l #2,d0
    2912:	|     |  |      move.l d0,1c908 <CstBackDropBufferApplyCursor>
    2918:	|     |  |      move.l 52(sp),d0
    291c:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    291e:	|     |  |      movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    2924:	|     |  |      move.l a0,d0
    2926:	|     |  |      addq.l #2,d0
    2928:	|     |  |      move.l d0,1c908 <CstBackDropBufferApplyCursor>
    292e:	|     |  |      clr.w (a0)
    2930:	|     +--|----- bra.w 2a96 <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2934:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    293a:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    293e:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2942:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2946:	|     |         movea.l 84(sp),a0
    294a:	|     |         move.l 24(a0),d0
    294e:	|     |         move.l d0,d2
    2950:	|     |         movea.l 84(sp),a0
    2954:	|     |         move.l (a0),d0
    2956:	|     |         movea.l d0,a0
    2958:	|     |         cmpa.w #0,a0
    295c:	|     |     /-- bge.s 2962 <CstPasteChar+0x46a>
    295e:	|     |     |   lea 15(a0),a0
    2962:	|     |     \-> move.l a0,d0
    2964:	|     |         asr.l #4,d0
    2966:	|     |         move.l 48(sp),-(sp)
    296a:	|     |         move.l d0,-(sp)
    296c:	|     |         jsr 17c5c <__mulsi3>
    2972:	|     |         addq.l #8,sp
    2974:	|     |         add.l d0,d0
    2976:	|     |         move.l d2,d1
    2978:	|     |         add.l d0,d1
    297a:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    297e:	|     |         move.l 1c918 <winWidth>,d0
    2984:	|     |         move.l 52(sp),-(sp)
    2988:	|     |         move.l d0,-(sp)
    298a:	|     |         jsr 17c5c <__mulsi3>
    2990:	|     |         addq.l #8,sp
    2992:	|     |         lsr.l #3,d0
    2994:	|     |         move.l 28(sp),d1
    2998:	|     |         add.l d0,d1
    299a:	|     |         move.w 10(sp),d0
    299e:	|     |     /-- bpl.s 29a4 <CstPasteChar+0x4ac>
    29a0:	|     |     |   addi.w #15,d0
    29a4:	|     |     \-> asr.w #4,d0
    29a6:	|     |         movea.w d0,a0
    29a8:	|     |         move.l a0,d0
    29aa:	|     |         add.l a0,d0
    29ac:	|     |         move.l d1,d2
    29ae:	|     |         add.l d0,d2
    29b0:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    29b4:	|     |         move.l 1c918 <winWidth>,d0
    29ba:	|     |         move.l 52(sp),-(sp)
    29be:	|     |         move.l d0,-(sp)
    29c0:	|     |         jsr 17c5c <__mulsi3>
    29c6:	|     |         addq.l #8,sp
    29c8:	|     |         lsr.l #3,d0
    29ca:	|     |         move.l 28(sp),d1
    29ce:	|     |         add.l d0,d1
    29d0:	|     |         move.w 10(sp),d0
    29d4:	|     |     /-- bpl.s 29da <CstPasteChar+0x4e2>
    29d6:	|     |     |   addi.w #15,d0
    29da:	|     |     \-> asr.w #4,d0
    29dc:	|     |         movea.w d0,a0
    29de:	|     |         move.l a0,d0
    29e0:	|     |         add.l a0,d0
    29e2:	|     |         move.l d1,d2
    29e4:	|     |         add.l d0,d2
    29e6:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    29ea:	|     |         move.w 10(sp),d0
    29ee:	|     |         andi.w #-32753,d0
    29f2:	|     |     /-- bpl.s 29fc <CstPasteChar+0x504>
    29f4:	|     |     |   subq.w #1,d0
    29f6:	|     |     |   ori.w #-16,d0
    29fa:	|     |     |   addq.w #1,d0
    29fc:	|     |     \-> ext.l d0
    29fe:	|     |         moveq #12,d1
    2a00:	|     |         lsl.l d1,d0
    2a02:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2a06:	|     |         movea.l 84(sp),a0
    2a0a:	|     |         move.l (a0),d0
    2a0c:	|     |         movea.l d0,a0
    2a0e:	|     |         cmpa.w #0,a0
    2a12:	|     |     /-- bge.s 2a18 <CstPasteChar+0x520>
    2a14:	|     |     |   lea 15(a0),a0
    2a18:	|     |     \-> move.l a0,d0
    2a1a:	|     |         asr.l #4,d0
    2a1c:	|     |         move.l d0,d0
    2a1e:	|     |         add.w 76(sp),d0
    2a22:	|     |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    2a28:	|     |         move.l a0,d1
    2a2a:	|     |         addq.l #2,d1
    2a2c:	|     |         move.l d1,1c908 <CstBackDropBufferApplyCursor>
    2a32:	|     |         add.w 78(sp),d0
    2a36:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2a38:	|     |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    2a3e:	|     |         move.l a0,d0
    2a40:	|     |         addq.l #2,d0
    2a42:	|     |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    2a48:	|     |         move.l 44(sp),d0
    2a4c:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2a4e:	|     |         move.w 10(sp),d0
    2a52:	|     |     /-- bpl.s 2a58 <CstPasteChar+0x560>
    2a54:	|     |     |   addi.w #15,d0
    2a58:	|     |     \-> asr.w #4,d0
    2a5a:	|     |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    2a60:	|     |         move.l a0,d1
    2a62:	|     |         addq.l #2,d1
    2a64:	|     |         move.l d1,1c908 <CstBackDropBufferApplyCursor>
    2a6a:	|     |         add.w d0,d0
    2a6c:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2a6e:	|     |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    2a74:	|     |         move.l a0,d0
    2a76:	|     |         addq.l #2,d0
    2a78:	|     |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    2a7e:	|     |         move.l 52(sp),d0
    2a82:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2a84:	|     |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    2a8a:	|     |         move.l a0,d0
    2a8c:	|     |         addq.l #2,d0
    2a8e:	|     |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    2a94:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2a96:	|     \-------> moveq #0,d0
    2a98:	|               move.w 74(sp),d0
    2a9c:	|               moveq #0,d1
    2a9e:	|               not.w d1
    2aa0:	|               asr.l d0,d1
    2aa2:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2aa6:	|               moveq #0,d1
    2aa8:	|               move.w 76(sp),d1
    2aac:	|               moveq #0,d0
    2aae:	|               move.w 78(sp),d0
    2ab2:	|               sub.l d0,d1
    2ab4:	|               move.l d1,d0
    2ab6:	|               add.w d0,d0
    2ab8:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2abc:	|               move.l 1c918 <winWidth>,d0
    2ac2:	|               lsr.l #3,d0
    2ac4:	|               move.l d0,d2
    2ac6:	|               move.w 76(sp),d1
    2aca:	|               sub.w 78(sp),d1
    2ace:	|               move.l 40(sp),d0
    2ad2:	|               sub.w d0,d1
    2ad4:	|               move.w d1,d0
    2ad6:	|               add.w d1,d0
    2ad8:	|               add.w d2,d0
    2ada:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2ade:	|               move.l 1c918 <winWidth>,d0
    2ae4:	|               lsr.l #3,d0
    2ae6:	|               move.l d0,d2
    2ae8:	|               move.w 76(sp),d1
    2aec:	|               sub.w 78(sp),d1
    2af0:	|               move.l 40(sp),d0
    2af4:	|               sub.w d0,d1
    2af6:	|               move.w d1,d0
    2af8:	|               add.w d1,d0
    2afa:	|               add.w d2,d0
    2afc:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2b00:	|               move.l #14675968,16(sp)
  WaitBlit();
    2b08:	|               move.l 1c9d0 <GfxBase>,d0
    2b0e:	|               movea.l d0,a6
    2b10:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2b14:	|               movea.l 16(sp),a0
    2b18:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    2b1e:	|               movea.l 16(sp),a0
    2b22:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2b28:	|               move.w 24(sp),d0
    2b2c:	|               movea.l 16(sp),a0
    2b30:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2b34:	|               move.w 22(sp),d0
    2b38:	|               movea.l 16(sp),a0
    2b3c:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2b40:	|               move.w 20(sp),d0
    2b44:	|               movea.l 16(sp),a0
    2b48:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2b4c:	|               move.l 1c918 <winWidth>,d0
    2b52:	|               lsr.l #3,d0
    2b54:	|               move.l d0,d1
    2b56:	|               move.l 1c91c <winHeight>,d0
    2b5c:	|               move.l d0,d0
    2b5e:	|               move.w d1,d2
    2b60:	|               muls.w d0,d2
    2b62:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2b66:	|               move.w 1c8de <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2b6e:	|               move.w 38(sp),d0
    2b72:	|               andi.w #1,d0
    2b76:	|               move.w d0,12(sp)
  if(tmp2) {
    2b7a:	|        /----- beq.s 2b84 <CstPasteChar+0x68c>
    minterm = 0xbfa;
    2b7c:	|        |      move.w #3066,36(sp)
    2b82:	|        |  /-- bra.s 2b8a <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    2b84:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b8a:	|           \-> clr.l 32(sp)
    2b8e:	|     /-------- bra.w 2c2c <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2b92:	|  /--|-------> move.l 56(sp),d0
    2b96:	|  |  |         add.w 36(sp),d0
    2b9a:	|  |  |         movea.l 16(sp),a0
    2b9e:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2ba2:	|  |  |         move.l 68(sp),d0
    2ba6:	|  |  |         movea.l 16(sp),a0
    2baa:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2bae:	|  |  |         move.l 64(sp),d0
    2bb2:	|  |  |         movea.l 16(sp),a0
    2bb6:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2bba:	|  |  |         move.l 60(sp),d0
    2bbe:	|  |  |         movea.l 16(sp),a0
    2bc2:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2bc6:	|  |  |         move.l 44(sp),d0
    2bca:	|  |  |         lsl.w #6,d0
    2bcc:	|  |  |         move.l 40(sp),d1
    2bd0:	|  |  |         add.w d1,d0
    2bd2:	|  |  |         sub.w 76(sp),d0
    2bd6:	|  |  |         add.w 78(sp),d0
    2bda:	|  |  |         movea.l 16(sp),a0
    2bde:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2be2:	|  |  |         moveq #0,d0
    2be4:	|  |  |         move.w 14(sp),d0
    2be8:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2bec:	|  |  |         moveq #0,d0
    2bee:	|  |  |         move.w 14(sp),d0
    2bf2:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2bf6:	|  |  |         move.w 38(sp),d0
    2bfa:	|  |  |         lsr.w #1,d0
    2bfc:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2c00:	|  |  |         move.w 38(sp),d1
    2c04:	|  |  |         andi.w #1,d1
    2c08:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2c0c:	|  |  |  /----- beq.s 2c16 <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2c0e:	|  |  |  |      move.w #3066,36(sp)
    2c14:	|  |  |  |  /-- bra.s 2c1c <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2c16:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2c1c:	|  |  |     \-> move.l 1c9d0 <GfxBase>,d0
    2c22:	|  |  |         movea.l d0,a6
    2c24:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c28:	|  |  |         addq.l #1,32(sp)
    2c2c:	|  |  \-------> moveq #4,d2
    2c2e:	|  |            cmp.l 32(sp),d2
    2c32:	|  \----------- bge.w 2b92 <CstPasteChar+0x69a>
 
  }   
}
    2c36:	\-------------> move.l (sp)+,d2
    2c38:	                movea.l (sp)+,a6
    2c3a:	                lea 72(sp),sp
    2c3e:	                rts

00002c40 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2c40:	                   lea -24(sp),sp
    2c44:	                   move.l a6,-(sp)
    2c46:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2c48:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2c50:	                   move.l 1c900 <CstCleanupQueueDrawBuffer>,d0
    2c56:	/----------------- beq.w 2e5e <CstRestoreScreen+0x21e>
    2c5a:	|                  move.l 1c8f8 <CstDrawBuffer>,d0
    2c60:	+----------------- beq.w 2e5e <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2c64:	|                  move.l 1c9d0 <GfxBase>,d0
    2c6a:	|                  movea.l d0,a6
    2c6c:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2c70:	|                  movea.l 16(sp),a0
    2c74:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2c7a:	|                  movea.l 16(sp),a0
    2c7e:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2c84:	|                  movea.l 16(sp),a0
    2c88:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2c8e:	|     /----------- bra.w 2e52 <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2c92:	|  /--|----------> movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    2c98:	|  |  |            move.l 4(a0),d0
    2c9c:	|  |  |  /-------- beq.w 2e20 <CstRestoreScreen+0x1e0>
    2ca0:	|  |  |  |         movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    2ca6:	|  |  |  |         movea.l 4(a0),a0
    2caa:	|  |  |  |         move.l 16(a0),d0
    2cae:	|  |  |  |         moveq #2,d1
    2cb0:	|  |  |  |         cmp.l d0,d1
    2cb2:	|  |  |  +-------- blt.w 2e20 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2cb6:	|  |  |  |         move.l 1c918 <winWidth>,d0
    2cbc:	|  |  |  |         lsr.l #3,d0
    2cbe:	|  |  |  |         move.l d0,d1
    2cc0:	|  |  |  |         movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    2cc6:	|  |  |  |         move.w 8(a0),d0
    2cca:	|  |  |  |         add.w d0,d0
    2ccc:	|  |  |  |         sub.w d0,d1
    2cce:	|  |  |  |         movea.l 16(sp),a0
    2cd2:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2cd6:	|  |  |  |         move.l 1c918 <winWidth>,d0
    2cdc:	|  |  |  |         lsr.l #3,d0
    2cde:	|  |  |  |         move.l d0,d1
    2ce0:	|  |  |  |         movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    2ce6:	|  |  |  |         move.w 8(a0),d0
    2cea:	|  |  |  |         add.w d0,d0
    2cec:	|  |  |  |         sub.w d0,d1
    2cee:	|  |  |  |         movea.l 16(sp),a0
    2cf2:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2cf6:	|  |  |  |         movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    2cfc:	|  |  |  |         move.w 14(a0),d0
    2d00:	|  |  |  |         move.w d0,d0
    2d02:	|  |  |  |         andi.l #65535,d0
    2d08:	|  |  |  |         move.l 1c918 <winWidth>,d1
    2d0e:	|  |  |  |         move.l d1,-(sp)
    2d10:	|  |  |  |         move.l d0,-(sp)
    2d12:	|  |  |  |         jsr 17c5c <__mulsi3>
    2d18:	|  |  |  |         addq.l #8,sp
    2d1a:	|  |  |  |         move.l d0,d1
    2d1c:	|  |  |  |         lsr.l #3,d1
    2d1e:	|  |  |  |         move.l 1c8e6 <CstBackDrop>,d0
    2d24:	|  |  |  |         add.l d0,d1
    2d26:	|  |  |  |         movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    2d2c:	|  |  |  |         move.w 12(a0),d0
    2d30:	|  |  |  |         move.w d0,d0
    2d32:	|  |  |  |         andi.l #65535,d0
    2d38:	|  |  |  |         move.l d1,d2
    2d3a:	|  |  |  |         add.l d0,d2
    2d3c:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2d40:	|  |  |  |         movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    2d46:	|  |  |  |         move.w 14(a0),d0
    2d4a:	|  |  |  |         move.w d0,d0
    2d4c:	|  |  |  |         andi.l #65535,d0
    2d52:	|  |  |  |         move.l 1c918 <winWidth>,d1
    2d58:	|  |  |  |         move.l d1,-(sp)
    2d5a:	|  |  |  |         move.l d0,-(sp)
    2d5c:	|  |  |  |         jsr 17c5c <__mulsi3>
    2d62:	|  |  |  |         addq.l #8,sp
    2d64:	|  |  |  |         move.l d0,d1
    2d66:	|  |  |  |         lsr.l #3,d1
    2d68:	|  |  |  |         move.l 1c8f8 <CstDrawBuffer>,d0
    2d6e:	|  |  |  |         add.l d0,d1
    2d70:	|  |  |  |         movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    2d76:	|  |  |  |         move.w 12(a0),d0
    2d7a:	|  |  |  |         move.w d0,d0
    2d7c:	|  |  |  |         andi.l #65535,d0
    2d82:	|  |  |  |         move.l d1,d2
    2d84:	|  |  |  |         add.l d0,d2
    2d86:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2d8a:	|  |  |  |         clr.l 20(sp)
    2d8e:	|  |  |  |     /-- bra.w 2e16 <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2d92:	|  |  |  |  /--|-> move.l 28(sp),d0
    2d96:	|  |  |  |  |  |   movea.l 16(sp),a0
    2d9a:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2d9e:	|  |  |  |  |  |   move.l 24(sp),d0
    2da2:	|  |  |  |  |  |   movea.l 16(sp),a0
    2da6:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2daa:	|  |  |  |  |  |   movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    2db0:	|  |  |  |  |  |   move.w 10(a0),d0
    2db4:	|  |  |  |  |  |   lsl.w #6,d0
    2db6:	|  |  |  |  |  |   movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    2dbc:	|  |  |  |  |  |   move.w 8(a0),d1
    2dc0:	|  |  |  |  |  |   add.w d1,d0
    2dc2:	|  |  |  |  |  |   movea.l 16(sp),a0
    2dc6:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2dca:	|  |  |  |  |  |   move.l 1c918 <winWidth>,d0
    2dd0:	|  |  |  |  |  |   lsr.l #3,d0
    2dd2:	|  |  |  |  |  |   move.l 1c91c <winHeight>,d1
    2dd8:	|  |  |  |  |  |   move.l d1,-(sp)
    2dda:	|  |  |  |  |  |   move.l d0,-(sp)
    2ddc:	|  |  |  |  |  |   jsr 17c5c <__mulsi3>
    2de2:	|  |  |  |  |  |   addq.l #8,sp
    2de4:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2de8:	|  |  |  |  |  |   move.l 1c918 <winWidth>,d0
    2dee:	|  |  |  |  |  |   lsr.l #3,d0
    2df0:	|  |  |  |  |  |   move.l 1c91c <winHeight>,d1
    2df6:	|  |  |  |  |  |   move.l d1,-(sp)
    2df8:	|  |  |  |  |  |   move.l d0,-(sp)
    2dfa:	|  |  |  |  |  |   jsr 17c5c <__mulsi3>
    2e00:	|  |  |  |  |  |   addq.l #8,sp
    2e02:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2e06:	|  |  |  |  |  |   move.l 1c9d0 <GfxBase>,d0
    2e0c:	|  |  |  |  |  |   movea.l d0,a6
    2e0e:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2e12:	|  |  |  |  |  |   addq.l #1,20(sp)
    2e16:	|  |  |  |  |  \-> moveq #4,d0
    2e18:	|  |  |  |  |      cmp.l 20(sp),d0
    2e1c:	|  |  |  |  \----- bge.w 2d92 <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2e20:	|  |  |  \-------> move.l 1c900 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2e28:	|  |  |            movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    2e2e:	|  |  |            move.l 16(a0),d0
    2e32:	|  |  |            move.l d0,1c900 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2e38:	|  |  |            move.l 12(sp),8(sp)
    2e3e:	|  |  |            move.l 1c9c4 <SysBase>,d0
    2e44:	|  |  |            movea.l d0,a6
    2e46:	|  |  |            movea.l 8(sp),a1
    2e4a:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2e4e:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2e52:	|  |  \----------> move.l 1c900 <CstCleanupQueueDrawBuffer>,d0
    2e58:	|  \-------------- bne.w 2c92 <CstRestoreScreen+0x52>
    2e5c:	|              /-- bra.s 2e60 <CstRestoreScreen+0x220>
    return;
    2e5e:	\--------------|-> nop
  }
  
}
    2e60:	               \-> move.l (sp)+,d2
    2e62:	                   movea.l (sp)+,a6
    2e64:	                   lea 24(sp),sp
    2e68:	                   rts

00002e6a <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2e6a:	                lea -132(sp),sp
    2e6e:	                move.l a6,-(sp)
    2e70:	                move.l d2,-(sp)
    2e72:	                movea.l 152(sp),a0
    2e76:	                move.l 156(sp),d1
    2e7a:	                move.l 160(sp),d0
    2e7e:	                movea.w a0,a0
    2e80:	                move.w a0,12(sp)
    2e84:	                move.w d1,d1
    2e86:	                move.w d1,10(sp)
    2e8a:	                move.w d0,d0
    2e8c:	                move.w d0,8(sp)

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2e90:	                move.w 10(sp),d0
    2e94:	                moveq #0,d1
    2e96:	                move.w d0,d1
    2e98:	                move.w 12(sp),d0
    2e9c:	                move.w d0,d0
    2e9e:	                andi.l #65535,d0
    2ea4:	                movea.l 1ca24 <zBuffer>,a0
    2eaa:	                move.l d1,-(sp)
    2eac:	                move.l d0,-(sp)
    2eae:	                move.l a0,-(sp)
    2eb0:	                move.l 156(sp),-(sp)
    2eb4:	                jsr 14e8 <CstDrawZBuffer>
    2eba:	                lea 16(sp),sp
    2ebe:	                move.l d0,84(sp)

  UWORD *destination = 0;
    2ec2:	                clr.l 136(sp)
  switch(destinationtype)
    2ec6:	                moveq #0,d0
    2ec8:	                move.w 8(sp),d0
    2ecc:	                moveq #1,d1
    2ece:	                cmp.l d0,d1
    2ed0:	            /-- beq.s 2eda <CstScaleSprite+0x70>
    2ed2:	            |   moveq #2,d2
    2ed4:	            |   cmp.l d0,d2
    2ed6:	         /--|-- beq.s 2ee4 <CstScaleSprite+0x7a>
    2ed8:	      /--|--|-- bra.s 2ef6 <CstScaleSprite+0x8c>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    2eda:	      |  |  \-> move.l 1c8f8 <CstDrawBuffer>,136(sp)
      break;
    2ee2:	      +--|----- bra.s 2ef6 <CstScaleSprite+0x8c>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    2ee4:	      |  \----> move.w #2,1c8f2 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2eec:	      |         move.l 1c8e6 <CstBackDrop>,136(sp)
      break;
    2ef4:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    2ef6:	      \-------> tst.w 10(sp)
    2efa:	         /----- bge.s 2f42 <CstScaleSprite+0xd8>
    if(y + single->height < 0) {
    2efc:	         |      movea.w 10(sp),a1
    2f00:	         |      movea.l 144(sp),a0
    2f04:	         |      move.l 4(a0),d0
    2f08:	         |      add.l a1,d0
    2f0a:	         |  /-- bpl.s 2f1e <CstScaleSprite+0xb4>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2f0c:	         |  |   pea 1808b <PutChar+0x319>
    2f12:	         |  |   jsr 1729e <KPrintF>
    2f18:	         |  |   addq.l #4,sp
      return;
    2f1a:	/--------|--|-- bra.w 3954 <CstScaleSprite+0xaea>
    }
    ystartdst = 0;
    2f1e:	|        |  \-> clr.l 100(sp)
    ystartsrc = y*-1;
    2f22:	|        |      move.w 10(sp),d0
    2f26:	|        |      ext.l d0
    2f28:	|        |      neg.l d0
    2f2a:	|        |      move.l d0,96(sp)
    blitheight = single->height+y;
    2f2e:	|        |      movea.l 144(sp),a0
    2f32:	|        |      move.l 4(a0),d0
    2f36:	|        |      movea.w 10(sp),a0
    2f3a:	|        |      add.l a0,d0
    2f3c:	|        |      move.l d0,92(sp)
    2f40:	|     /--|----- bra.s 2fb4 <CstScaleSprite+0x14a>
  } else if(y+single->height > (int) winHeight) {
    2f42:	|     |  \----> movea.w 10(sp),a1
    2f46:	|     |         movea.l 144(sp),a0
    2f4a:	|     |         move.l 4(a0),d0
    2f4e:	|     |         move.l a1,d1
    2f50:	|     |         add.l d0,d1
    2f52:	|     |         move.l 1c91c <winHeight>,d0
    2f58:	|     |         cmp.l d1,d0
    2f5a:	|     |  /----- bge.s 2f9c <CstScaleSprite+0x132>
    if(y  > (int) winHeight) {
    2f5c:	|     |  |      movea.w 10(sp),a0
    2f60:	|     |  |      move.l 1c91c <winHeight>,d0
    2f66:	|     |  |      cmp.l a0,d0
    2f68:	|     |  |  /-- bge.s 2f7c <CstScaleSprite+0x112>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2f6a:	|     |  |  |   pea 1808b <PutChar+0x319>
    2f70:	|     |  |  |   jsr 1729e <KPrintF>
    2f76:	|     |  |  |   addq.l #4,sp
      return;
    2f78:	+-----|--|--|-- bra.w 3954 <CstScaleSprite+0xaea>
    }
    ystartdst = y;
    2f7c:	|     |  |  \-> movea.w 10(sp),a0
    2f80:	|     |  |      move.l a0,100(sp)
    ystartsrc = 0;
    2f84:	|     |  |      clr.l 96(sp)
    blitheight = winHeight-y;
    2f88:	|     |  |      move.l 1c91c <winHeight>,d0
    2f8e:	|     |  |      movea.w 10(sp),a0
    2f92:	|     |  |      move.l d0,d1
    2f94:	|     |  |      sub.l a0,d1
    2f96:	|     |  |      move.l d1,92(sp)
    2f9a:	|     +--|----- bra.s 2fb4 <CstScaleSprite+0x14a>
  } else {
    ystartdst = y;
    2f9c:	|     |  \----> movea.w 10(sp),a0
    2fa0:	|     |         move.l a0,100(sp)
    ystartsrc = 0;
    2fa4:	|     |         clr.l 96(sp)
    blitheight = single->height;
    2fa8:	|     |         movea.l 144(sp),a0
    2fac:	|     |         move.l 4(a0),d0
    2fb0:	|     |         move.l d0,92(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2fb4:	|     \-------> tst.w 12(sp)
    2fb8:	|     /-------- bge.w 3238 <CstScaleSprite+0x3ce>
    if(x + single->width < 0) {
    2fbc:	|     |         movea.w 12(sp),a1
    2fc0:	|     |         movea.l 144(sp),a0
    2fc4:	|     |         move.l (a0),d0
    2fc6:	|     |         add.l a1,d0
    2fc8:	|     |     /-- bpl.s 2fdc <CstScaleSprite+0x172>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2fca:	|     |     |   pea 1808b <PutChar+0x319>
    2fd0:	|     |     |   jsr 1729e <KPrintF>
    2fd6:	|     |     |   addq.l #4,sp
      return;
    2fd8:	+-----|-----|-- bra.w 3954 <CstScaleSprite+0xaea>

    }
    
    extrawords = 1;
    2fdc:	|     |     \-> move.w #1,134(sp)
    cutwordssource = (x*-1)/16; 
    2fe2:	|     |         move.w 12(sp),d0
    2fe6:	|     |     /-- bpl.s 2fec <CstScaleSprite+0x182>
    2fe8:	|     |     |   addi.w #15,d0
    2fec:	|     |     \-> asr.w #4,d0
    2fee:	|     |         neg.w d0
    2ff0:	|     |         move.w d0,132(sp)
    cutmaskpixel = (x*-1)%16;     
    2ff4:	|     |         move.w 12(sp),d0
    2ff8:	|     |         ext.l d0
    2ffa:	|     |         neg.l d0
    2ffc:	|     |         andi.l #-2147483633,d0
    3002:	|     |     /-- bpl.s 300c <CstScaleSprite+0x1a2>
    3004:	|     |     |   subq.l #1,d0
    3006:	|     |     |   moveq #-16,d1
    3008:	|     |     |   or.l d1,d0
    300a:	|     |     |   addq.l #1,d0
    300c:	|     |     \-> move.w d0,130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    3010:	|     |         clr.w 128(sp)
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3014:	|     |         moveq #0,d0
    3016:	|     |         move.w 132(sp),d0
    301a:	|     |         add.l d0,d0
    301c:	|     |         move.l d0,d1
    301e:	|     |         move.l 84(sp),d0
    3022:	|     |         move.l d1,d2
    3024:	|     |         add.l d0,d2
    3026:	|     |         movea.l 144(sp),a0
    302a:	|     |         move.l (a0),d0
    302c:	|     |         move.l 96(sp),-(sp)
    3030:	|     |         move.l d0,-(sp)
    3032:	|     |         jsr 17c5c <__mulsi3>
    3038:	|     |         addq.l #8,sp
    303a:	|     |         lsr.l #3,d0
    303c:	|     |         move.l d2,d1
    303e:	|     |         add.l d0,d1
    3040:	|     |         move.l d1,124(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3044:	|     |         movea.l 144(sp),a0
    3048:	|     |         move.l 24(a0),d0
    304c:	|     |         move.l d0,d1
    304e:	|     |         moveq #0,d0
    3050:	|     |         move.w 132(sp),d0
    3054:	|     |         add.l d0,d0
    3056:	|     |         move.l d1,d2
    3058:	|     |         add.l d0,d2
    305a:	|     |         movea.l 144(sp),a0
    305e:	|     |         move.l (a0),d0
    3060:	|     |         move.l 96(sp),-(sp)
    3064:	|     |         move.l d0,-(sp)
    3066:	|     |         jsr 17c5c <__mulsi3>
    306c:	|     |         addq.l #8,sp
    306e:	|     |         lsr.l #3,d0
    3070:	|     |         move.l d2,d1
    3072:	|     |         add.l d0,d1
    3074:	|     |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3078:	|     |         move.l 1c918 <winWidth>,d0
    307e:	|     |         move.l 100(sp),-(sp)
    3082:	|     |         move.l d0,-(sp)
    3084:	|     |         jsr 17c5c <__mulsi3>
    308a:	|     |         addq.l #8,sp
    308c:	|     |         lsr.l #3,d0
    308e:	|     |         move.l 136(sp),d1
    3092:	|     |         add.l d1,d0
    3094:	|     |         move.l d0,d2
    3096:	|     |         subq.l #2,d2
    3098:	|     |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    309c:	|     |         move.l 1c918 <winWidth>,d0
    30a2:	|     |         move.l 100(sp),-(sp)
    30a6:	|     |         move.l d0,-(sp)
    30a8:	|     |         jsr 17c5c <__mulsi3>
    30ae:	|     |         addq.l #8,sp
    30b0:	|     |         lsr.l #3,d0
    30b2:	|     |         move.l 136(sp),d1
    30b6:	|     |         add.l d1,d0
    30b8:	|     |         move.l d0,d1
    30ba:	|     |         subq.l #2,d1
    30bc:	|     |         move.l d1,112(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    30c0:	|     |         moveq #0,d0
    30c2:	|     |         move.w 130(sp),d0
    30c6:	|     |         moveq #16,d1
    30c8:	|     |         sub.l d0,d1
    30ca:	|     |         move.l d1,d0
    30cc:	|     |         moveq #12,d2
    30ce:	|     |         lsl.l d2,d0
    30d0:	|     |         addi.l #4042,d0
    30d6:	|     |         move.l d0,108(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    30da:	|     |         moveq #0,d0
    30dc:	|     |         move.w 130(sp),d0
    30e0:	|     |         moveq #16,d1
    30e2:	|     |         sub.l d0,d1
    30e4:	|     |         move.l d1,d0
    30e6:	|     |         moveq #12,d1
    30e8:	|     |         lsl.l d1,d0
    30ea:	|     |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    30ee:	|     |         cmpi.w #1,8(sp)
    30f4:	|     |  /----- bne.w 31b2 <CstScaleSprite+0x348>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    30f8:	|     |  |      move.l 1c900 <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3100:	|     |  |      moveq #20,d2
    3102:	|     |  |      move.l d2,44(sp)
    3106:	|     |  |      clr.l 40(sp)
    310a:	|     |  |      move.l 1c9c4 <SysBase>,d0
    3110:	|     |  |      movea.l d0,a6
    3112:	|     |  |      move.l 44(sp),d0
    3116:	|     |  |      move.l 40(sp),d1
    311a:	|     |  |      jsr -684(a6)
    311e:	|     |  |      move.l d0,36(sp)
    3122:	|     |  |      move.l 36(sp),d0
    3126:	|     |  |      move.l d0,1c900 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    312c:	|     |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    3132:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    3138:	|     |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    313e:	|     |  |      move.w 12(sp),d0
    3142:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3144:	|     |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    314a:	|     |  |      move.w 10(sp),d0
    314e:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    3152:	|     |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    3158:	|     |  |      move.l 148(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    315e:	|     |  |      movea.l 144(sp),a0
    3162:	|     |  |      move.l (a0),d0
    3164:	|     |  |      movea.l d0,a0
    3166:	|     |  |      cmpa.w #0,a0
    316a:	|     |  |  /-- bge.s 3170 <CstScaleSprite+0x306>
    316c:	|     |  |  |   lea 15(a0),a0
    3170:	|     |  |  \-> move.l a0,d0
    3172:	|     |  |      asr.l #4,d0
    3174:	|     |  |      move.l d0,d0
    3176:	|     |  |      add.w 132(sp),d0
    317a:	|     |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    3180:	|     |  |      add.w 134(sp),d0
    3184:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3188:	|     |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    318e:	|     |  |      move.l 92(sp),d0
    3192:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3196:	|     |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    319c:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    31a0:	|     |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    31a6:	|     |  |      move.l 100(sp),d0
    31aa:	|     |  |      move.w d0,14(a0)
    31ae:	|  /--|--|----- bra.w 3766 <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    31b2:	|  |  |  \----> movea.l 144(sp),a0
    31b6:	|  |  |         move.l (a0),d0
    31b8:	|  |  |         movea.l d0,a0
    31ba:	|  |  |         cmpa.w #0,a0
    31be:	|  |  |     /-- bge.s 31c4 <CstScaleSprite+0x35a>
    31c0:	|  |  |     |   lea 15(a0),a0
    31c4:	|  |  |     \-> move.l a0,d0
    31c6:	|  |  |         asr.l #4,d0
    31c8:	|  |  |         move.l d0,d0
    31ca:	|  |  |         add.w 132(sp),d0
    31ce:	|  |  |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    31d4:	|  |  |         move.l a0,d1
    31d6:	|  |  |         addq.l #2,d1
    31d8:	|  |  |         move.l d1,1c908 <CstBackDropBufferApplyCursor>
    31de:	|  |  |         add.w 134(sp),d0
    31e2:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    31e4:	|  |  |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    31ea:	|  |  |         move.l a0,d0
    31ec:	|  |  |         addq.l #2,d0
    31ee:	|  |  |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    31f4:	|  |  |         move.l 92(sp),d0
    31f8:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    31fa:	|  |  |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    3200:	|  |  |         move.l a0,d0
    3202:	|  |  |         addq.l #2,d0
    3204:	|  |  |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    320a:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    320c:	|  |  |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    3212:	|  |  |         move.l a0,d0
    3214:	|  |  |         addq.l #2,d0
    3216:	|  |  |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    321c:	|  |  |         move.l 100(sp),d0
    3220:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3222:	|  |  |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    3228:	|  |  |         move.l a0,d0
    322a:	|  |  |         addq.l #2,d0
    322c:	|  |  |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    3232:	|  |  |         clr.w (a0)
    3234:	|  +--|-------- bra.w 3766 <CstScaleSprite+0x8fc>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    3238:	|  |  \-------> movea.w 12(sp),a1
    323c:	|  |            movea.l 144(sp),a0
    3240:	|  |            move.l (a0),d0
    3242:	|  |            move.l a1,d1
    3244:	|  |            add.l d0,d1
    3246:	|  |            move.l 1c918 <winWidth>,d0
    324c:	|  |            cmp.l d1,d0
    324e:	|  |  /-------- bge.w 34fe <CstScaleSprite+0x694>

    if(x - single->width > (int) winWidth)
    3252:	|  |  |         movea.w 12(sp),a1
    3256:	|  |  |         movea.l 144(sp),a0
    325a:	|  |  |         move.l (a0),d0
    325c:	|  |  |         move.l a1,d1
    325e:	|  |  |         sub.l d0,d1
    3260:	|  |  |         move.l 1c918 <winWidth>,d0
    3266:	|  |  |         cmp.l d1,d0
    3268:	|  |  |     /-- bge.s 327c <CstScaleSprite+0x412>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    326a:	|  |  |     |   pea 1808b <PutChar+0x319>
    3270:	|  |  |     |   jsr 1729e <KPrintF>
    3276:	|  |  |     |   addq.l #4,sp
      return;
    3278:	+--|--|-----|-- bra.w 3954 <CstScaleSprite+0xaea>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    327c:	|  |  |     \-> clr.w 134(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    3280:	|  |  |         movea.w 12(sp),a1
    3284:	|  |  |         movea.l 144(sp),a0
    3288:	|  |  |         move.l (a0),d0
    328a:	|  |  |         add.l a1,d0
    328c:	|  |  |         move.l d0,d1
    328e:	|  |  |         move.l 1c918 <winWidth>,d0
    3294:	|  |  |         sub.l d0,d1
    3296:	|  |  |         move.l d1,d0
    3298:	|  |  |         lsr.l #4,d0
    329a:	|  |  |         move.w d0,132(sp)
    cutmaskpixel = 0;
    329e:	|  |  |         clr.w 130(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    32a2:	|  |  |         move.w #-1,128(sp)
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    32a8:	|  |  |         movea.l 144(sp),a0
    32ac:	|  |  |         move.l (a0),d0
    32ae:	|  |  |         move.l 96(sp),-(sp)
    32b2:	|  |  |         move.l d0,-(sp)
    32b4:	|  |  |         jsr 17c5c <__mulsi3>
    32ba:	|  |  |         addq.l #8,sp
    32bc:	|  |  |         lsr.l #3,d0
    32be:	|  |  |         move.l 84(sp),d1
    32c2:	|  |  |         move.l d0,d2
    32c4:	|  |  |         add.l d1,d2
    32c6:	|  |  |         move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    32ca:	|  |  |         movea.l 144(sp),a0
    32ce:	|  |  |         move.l 24(a0),d0
    32d2:	|  |  |         move.l d0,d2
    32d4:	|  |  |         movea.l 144(sp),a0
    32d8:	|  |  |         move.l (a0),d0
    32da:	|  |  |         move.l 96(sp),-(sp)
    32de:	|  |  |         move.l d0,-(sp)
    32e0:	|  |  |         jsr 17c5c <__mulsi3>
    32e6:	|  |  |         addq.l #8,sp
    32e8:	|  |  |         lsr.l #3,d0
    32ea:	|  |  |         move.l d2,d1
    32ec:	|  |  |         add.l d0,d1
    32ee:	|  |  |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    32f2:	|  |  |         move.l 1c918 <winWidth>,d0
    32f8:	|  |  |         move.l 100(sp),-(sp)
    32fc:	|  |  |         move.l d0,-(sp)
    32fe:	|  |  |         jsr 17c5c <__mulsi3>
    3304:	|  |  |         addq.l #8,sp
    3306:	|  |  |         lsr.l #3,d0
    3308:	|  |  |         move.l 136(sp),d1
    330c:	|  |  |         add.l d0,d1
    330e:	|  |  |         move.w 12(sp),d0
    3312:	|  |  |     /-- bpl.s 3318 <CstScaleSprite+0x4ae>
    3314:	|  |  |     |   addi.w #15,d0
    3318:	|  |  |     \-> asr.w #4,d0
    331a:	|  |  |         movea.w d0,a0
    331c:	|  |  |         move.l a0,d0
    331e:	|  |  |         add.l a0,d0
    3320:	|  |  |         move.l d1,d2
    3322:	|  |  |         add.l d0,d2
    3324:	|  |  |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3328:	|  |  |         move.l 1c918 <winWidth>,d0
    332e:	|  |  |         move.l 100(sp),-(sp)
    3332:	|  |  |         move.l d0,-(sp)
    3334:	|  |  |         jsr 17c5c <__mulsi3>
    333a:	|  |  |         addq.l #8,sp
    333c:	|  |  |         lsr.l #3,d0
    333e:	|  |  |         move.l 136(sp),d1
    3342:	|  |  |         add.l d0,d1
    3344:	|  |  |         move.w 12(sp),d0
    3348:	|  |  |     /-- bpl.s 334e <CstScaleSprite+0x4e4>
    334a:	|  |  |     |   addi.w #15,d0
    334e:	|  |  |     \-> asr.w #4,d0
    3350:	|  |  |         movea.w d0,a0
    3352:	|  |  |         move.l a0,d0
    3354:	|  |  |         add.l a0,d0
    3356:	|  |  |         move.l d1,d2
    3358:	|  |  |         add.l d0,d2
    335a:	|  |  |         move.l d2,112(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    335e:	|  |  |         movea.l 144(sp),a0
    3362:	|  |  |         move.l (a0),d0
    3364:	|  |  |         andi.l #-2147483633,d0
    336a:	|  |  |     /-- bpl.s 3374 <CstScaleSprite+0x50a>
    336c:	|  |  |     |   subq.l #1,d0
    336e:	|  |  |     |   moveq #-16,d1
    3370:	|  |  |     |   or.l d1,d0
    3372:	|  |  |     |   addq.l #1,d0
    3374:	|  |  |     \-> moveq #12,d2
    3376:	|  |  |         lsl.l d2,d0
    3378:	|  |  |         addi.l #4042,d0
    337e:	|  |  |         move.l d0,108(sp)
    bltcon1 = ((single->width%16) << 12);
    3382:	|  |  |         movea.l 144(sp),a0
    3386:	|  |  |         move.l (a0),d0
    3388:	|  |  |         andi.l #-2147483633,d0
    338e:	|  |  |     /-- bpl.s 3398 <CstScaleSprite+0x52e>
    3390:	|  |  |     |   subq.l #1,d0
    3392:	|  |  |     |   moveq #-16,d1
    3394:	|  |  |     |   or.l d1,d0
    3396:	|  |  |     |   addq.l #1,d0
    3398:	|  |  |     \-> moveq #12,d2
    339a:	|  |  |         lsl.l d2,d0
    339c:	|  |  |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    33a0:	|  |  |         cmpi.w #1,8(sp)
    33a6:	|  |  |  /----- bne.w 346e <CstScaleSprite+0x604>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    33aa:	|  |  |  |      move.l 1c900 <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    33b2:	|  |  |  |      moveq #20,d0
    33b4:	|  |  |  |      move.l d0,60(sp)
    33b8:	|  |  |  |      clr.l 56(sp)
    33bc:	|  |  |  |      move.l 1c9c4 <SysBase>,d0
    33c2:	|  |  |  |      movea.l d0,a6
    33c4:	|  |  |  |      move.l 60(sp),d0
    33c8:	|  |  |  |      move.l 56(sp),d1
    33cc:	|  |  |  |      jsr -684(a6)
    33d0:	|  |  |  |      move.l d0,52(sp)
    33d4:	|  |  |  |      move.l 52(sp),d0
    33d8:	|  |  |  |      move.l d0,1c900 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    33de:	|  |  |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    33e4:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    33ea:	|  |  |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    33f0:	|  |  |  |      move.w 12(sp),d0
    33f4:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    33f6:	|  |  |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    33fc:	|  |  |  |      move.w 10(sp),d0
    3400:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3404:	|  |  |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    340a:	|  |  |  |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3410:	|  |  |  |      movea.l 144(sp),a0
    3414:	|  |  |  |      move.l (a0),d0
    3416:	|  |  |  |      movea.l d0,a0
    3418:	|  |  |  |      cmpa.w #0,a0
    341c:	|  |  |  |  /-- bge.s 3422 <CstScaleSprite+0x5b8>
    341e:	|  |  |  |  |   lea 15(a0),a0
    3422:	|  |  |  |  \-> move.l a0,d0
    3424:	|  |  |  |      asr.l #4,d0
    3426:	|  |  |  |      move.l d0,d0
    3428:	|  |  |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    342e:	|  |  |  |      add.w 132(sp),d0
    3432:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3436:	|  |  |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    343c:	|  |  |  |      move.l 92(sp),d0
    3440:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3444:	|  |  |  |      move.w 12(sp),d0
    3448:	|  |  |  |  /-- bpl.s 344e <CstScaleSprite+0x5e4>
    344a:	|  |  |  |  |   addi.w #15,d0
    344e:	|  |  |  |  \-> asr.w #4,d0
    3450:	|  |  |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    3456:	|  |  |  |      add.w d0,d0
    3458:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    345c:	|  |  |  |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    3462:	|  |  |  |      move.l 100(sp),d0
    3466:	|  |  |  |      move.w d0,14(a0)
    346a:	|  +--|--|----- bra.w 3766 <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    346e:	|  |  |  \----> movea.l 144(sp),a0
    3472:	|  |  |         move.l (a0),d0
    3474:	|  |  |         movea.l d0,a0
    3476:	|  |  |         cmpa.w #0,a0
    347a:	|  |  |     /-- bge.s 3480 <CstScaleSprite+0x616>
    347c:	|  |  |     |   lea 15(a0),a0
    3480:	|  |  |     \-> move.l a0,d0
    3482:	|  |  |         asr.l #4,d0
    3484:	|  |  |         move.l d0,d0
    3486:	|  |  |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    348c:	|  |  |         move.l a0,d1
    348e:	|  |  |         addq.l #2,d1
    3490:	|  |  |         move.l d1,1c908 <CstBackDropBufferApplyCursor>
    3496:	|  |  |         add.w 132(sp),d0
    349a:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    349c:	|  |  |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    34a2:	|  |  |         move.l a0,d0
    34a4:	|  |  |         addq.l #2,d0
    34a6:	|  |  |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    34ac:	|  |  |         move.l 92(sp),d0
    34b0:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    34b2:	|  |  |         move.w 12(sp),d0
    34b6:	|  |  |     /-- bpl.s 34bc <CstScaleSprite+0x652>
    34b8:	|  |  |     |   addi.w #15,d0
    34bc:	|  |  |     \-> asr.w #4,d0
    34be:	|  |  |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    34c4:	|  |  |         move.l a0,d1
    34c6:	|  |  |         addq.l #2,d1
    34c8:	|  |  |         move.l d1,1c908 <CstBackDropBufferApplyCursor>
    34ce:	|  |  |         add.w d0,d0
    34d0:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    34d2:	|  |  |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    34d8:	|  |  |         move.l a0,d0
    34da:	|  |  |         addq.l #2,d0
    34dc:	|  |  |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    34e2:	|  |  |         move.l 100(sp),d0
    34e6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    34e8:	|  |  |         movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    34ee:	|  |  |         move.l a0,d0
    34f0:	|  |  |         addq.l #2,d0
    34f2:	|  |  |         move.l d0,1c908 <CstBackDropBufferApplyCursor>
    34f8:	|  |  |         clr.w (a0)
    34fa:	|  +--|-------- bra.w 3766 <CstScaleSprite+0x8fc>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    34fe:	|  |  \-------> move.w #1,134(sp)
    cutwordssource = 0;
    3504:	|  |            clr.w 132(sp)
    cutmaskpixel = 0;
    3508:	|  |            clr.w 130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    350c:	|  |            clr.w 128(sp)
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3510:	|  |            movea.l 144(sp),a0
    3514:	|  |            move.l (a0),d0
    3516:	|  |            move.l 96(sp),-(sp)
    351a:	|  |            move.l d0,-(sp)
    351c:	|  |            jsr 17c5c <__mulsi3>
    3522:	|  |            addq.l #8,sp
    3524:	|  |            lsr.l #3,d0
    3526:	|  |            move.l 84(sp),d1
    352a:	|  |            move.l d0,d2
    352c:	|  |            add.l d1,d2
    352e:	|  |            move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3532:	|  |            movea.l 144(sp),a0
    3536:	|  |            move.l 24(a0),d0
    353a:	|  |            move.l d0,d2
    353c:	|  |            movea.l 144(sp),a0
    3540:	|  |            move.l (a0),d0
    3542:	|  |            move.l 96(sp),-(sp)
    3546:	|  |            move.l d0,-(sp)
    3548:	|  |            jsr 17c5c <__mulsi3>
    354e:	|  |            addq.l #8,sp
    3550:	|  |            lsr.l #3,d0
    3552:	|  |            move.l d2,d1
    3554:	|  |            add.l d0,d1
    3556:	|  |            move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    355a:	|  |            move.l 1c918 <winWidth>,d0
    3560:	|  |            move.l 100(sp),-(sp)
    3564:	|  |            move.l d0,-(sp)
    3566:	|  |            jsr 17c5c <__mulsi3>
    356c:	|  |            addq.l #8,sp
    356e:	|  |            lsr.l #3,d0
    3570:	|  |            move.l 136(sp),d1
    3574:	|  |            add.l d0,d1
    3576:	|  |            move.w 12(sp),d0
    357a:	|  |        /-- bpl.s 3580 <CstScaleSprite+0x716>
    357c:	|  |        |   addi.w #15,d0
    3580:	|  |        \-> asr.w #4,d0
    3582:	|  |            movea.w d0,a0
    3584:	|  |            move.l a0,d0
    3586:	|  |            add.l a0,d0
    3588:	|  |            move.l d1,d2
    358a:	|  |            add.l d0,d2
    358c:	|  |            move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3590:	|  |            move.l 1c918 <winWidth>,d0
    3596:	|  |            move.l 100(sp),-(sp)
    359a:	|  |            move.l d0,-(sp)
    359c:	|  |            jsr 17c5c <__mulsi3>
    35a2:	|  |            addq.l #8,sp
    35a4:	|  |            lsr.l #3,d0
    35a6:	|  |            move.l 136(sp),d1
    35aa:	|  |            add.l d0,d1
    35ac:	|  |            move.w 12(sp),d0
    35b0:	|  |        /-- bpl.s 35b6 <CstScaleSprite+0x74c>
    35b2:	|  |        |   addi.w #15,d0
    35b6:	|  |        \-> asr.w #4,d0
    35b8:	|  |            movea.w d0,a0
    35ba:	|  |            move.l a0,d0
    35bc:	|  |            add.l a0,d0
    35be:	|  |            move.l d1,d2
    35c0:	|  |            add.l d0,d2
    35c2:	|  |            move.l d2,112(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    35c6:	|  |            move.w 12(sp),d0
    35ca:	|  |            andi.w #-32753,d0
    35ce:	|  |        /-- bpl.s 35d8 <CstScaleSprite+0x76e>
    35d0:	|  |        |   subq.w #1,d0
    35d2:	|  |        |   ori.w #-16,d0
    35d6:	|  |        |   addq.w #1,d0
    35d8:	|  |        \-> ext.l d0
    35da:	|  |            moveq #12,d1
    35dc:	|  |            lsl.l d1,d0
    35de:	|  |            addi.l #4042,d0
    35e4:	|  |            move.l d0,108(sp)
    bltcon1 = ((x%16) << 12);
    35e8:	|  |            move.w 12(sp),d0
    35ec:	|  |            andi.w #-32753,d0
    35f0:	|  |        /-- bpl.s 35fa <CstScaleSprite+0x790>
    35f2:	|  |        |   subq.w #1,d0
    35f4:	|  |        |   ori.w #-16,d0
    35f8:	|  |        |   addq.w #1,d0
    35fa:	|  |        \-> ext.l d0
    35fc:	|  |            moveq #12,d2
    35fe:	|  |            lsl.l d2,d0
    3600:	|  |            move.l d0,104(sp)
    if( destinationtype == SCREEN)
    3604:	|  |            cmpi.w #1,8(sp)
    360a:	|  |     /----- bne.w 36d6 <CstScaleSprite+0x86c>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    360e:	|  |     |      move.l 1c900 <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3616:	|  |     |      moveq #20,d0
    3618:	|  |     |      move.l d0,76(sp)
    361c:	|  |     |      clr.l 72(sp)
    3620:	|  |     |      move.l 1c9c4 <SysBase>,d0
    3626:	|  |     |      movea.l d0,a6
    3628:	|  |     |      move.l 76(sp),d0
    362c:	|  |     |      move.l 72(sp),d1
    3630:	|  |     |      jsr -684(a6)
    3634:	|  |     |      move.l d0,68(sp)
    3638:	|  |     |      move.l 68(sp),d0
    363c:	|  |     |      move.l d0,1c900 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3642:	|  |     |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    3648:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    364e:	|  |     |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    3654:	|  |     |      move.w 12(sp),d0
    3658:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    365a:	|  |     |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    3660:	|  |     |      move.w 10(sp),d0
    3664:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3668:	|  |     |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    366e:	|  |     |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3674:	|  |     |      movea.l 144(sp),a0
    3678:	|  |     |      move.l (a0),d0
    367a:	|  |     |      movea.l d0,a0
    367c:	|  |     |      cmpa.w #0,a0
    3680:	|  |     |  /-- bge.s 3686 <CstScaleSprite+0x81c>
    3682:	|  |     |  |   lea 15(a0),a0
    3686:	|  |     |  \-> move.l a0,d0
    3688:	|  |     |      asr.l #4,d0
    368a:	|  |     |      move.l d0,d0
    368c:	|  |     |      add.w 132(sp),d0
    3690:	|  |     |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    3696:	|  |     |      add.w 134(sp),d0
    369a:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    369e:	|  |     |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    36a4:	|  |     |      move.l 92(sp),d0
    36a8:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    36ac:	|  |     |      move.w 12(sp),d0
    36b0:	|  |     |  /-- bpl.s 36b6 <CstScaleSprite+0x84c>
    36b2:	|  |     |  |   addi.w #15,d0
    36b6:	|  |     |  \-> asr.w #4,d0
    36b8:	|  |     |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    36be:	|  |     |      add.w d0,d0
    36c0:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    36c4:	|  |     |      movea.l 1c900 <CstCleanupQueueDrawBuffer>,a0
    36ca:	|  |     |      move.l 100(sp),d0
    36ce:	|  |     |      move.w d0,14(a0)
    36d2:	|  +-----|----- bra.w 3766 <CstScaleSprite+0x8fc>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    36d6:	|  |     \----> movea.l 144(sp),a0
    36da:	|  |            move.l (a0),d0
    36dc:	|  |            movea.l d0,a0
    36de:	|  |            cmpa.w #0,a0
    36e2:	|  |        /-- bge.s 36e8 <CstScaleSprite+0x87e>
    36e4:	|  |        |   lea 15(a0),a0
    36e8:	|  |        \-> move.l a0,d0
    36ea:	|  |            asr.l #4,d0
    36ec:	|  |            move.l d0,d0
    36ee:	|  |            add.w 132(sp),d0
    36f2:	|  |            movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    36f8:	|  |            move.l a0,d1
    36fa:	|  |            addq.l #2,d1
    36fc:	|  |            move.l d1,1c908 <CstBackDropBufferApplyCursor>
    3702:	|  |            add.w 134(sp),d0
    3706:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3708:	|  |            movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    370e:	|  |            move.l a0,d0
    3710:	|  |            addq.l #2,d0
    3712:	|  |            move.l d0,1c908 <CstBackDropBufferApplyCursor>
    3718:	|  |            move.l 92(sp),d0
    371c:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    371e:	|  |            move.w 12(sp),d0
    3722:	|  |        /-- bpl.s 3728 <CstScaleSprite+0x8be>
    3724:	|  |        |   addi.w #15,d0
    3728:	|  |        \-> asr.w #4,d0
    372a:	|  |            movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    3730:	|  |            move.l a0,d1
    3732:	|  |            addq.l #2,d1
    3734:	|  |            move.l d1,1c908 <CstBackDropBufferApplyCursor>
    373a:	|  |            add.w d0,d0
    373c:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    373e:	|  |            movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    3744:	|  |            move.l a0,d0
    3746:	|  |            addq.l #2,d0
    3748:	|  |            move.l d0,1c908 <CstBackDropBufferApplyCursor>
    374e:	|  |            move.l 100(sp),d0
    3752:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3754:	|  |            movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    375a:	|  |            move.l a0,d0
    375c:	|  |            addq.l #2,d0
    375e:	|  |            move.l d0,1c908 <CstBackDropBufferApplyCursor>
    3764:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3766:	|  \----------> moveq #0,d0
    3768:	|               move.w 130(sp),d0
    376c:	|               moveq #0,d1
    376e:	|               not.w d1
    3770:	|               asr.l d0,d1
    3772:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3776:	|               moveq #0,d1
    3778:	|               move.w 132(sp),d1
    377c:	|               moveq #0,d0
    377e:	|               move.w 134(sp),d0
    3782:	|               sub.l d0,d1
    3784:	|               move.l d1,d0
    3786:	|               add.w d0,d0
    3788:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    378c:	|               moveq #0,d1
    378e:	|               move.w 132(sp),d1
    3792:	|               moveq #0,d0
    3794:	|               move.w 134(sp),d0
    3798:	|               sub.l d0,d1
    379a:	|               move.l d1,d0
    379c:	|               add.w d0,d0
    379e:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    37a2:	|               move.l 1c918 <winWidth>,d0
    37a8:	|               lsr.l #3,d0
    37aa:	|               move.l d0,d1
    37ac:	|               movea.l 144(sp),a0
    37b0:	|               move.l (a0),d0
    37b2:	|           /-- bpl.s 37b6 <CstScaleSprite+0x94c>
    37b4:	|           |   addq.l #7,d0
    37b6:	|           \-> asr.l #3,d0
    37b8:	|               move.l d0,d0
    37ba:	|               sub.w d0,d1
    37bc:	|               move.w 132(sp),d0
    37c0:	|               sub.w 134(sp),d0
    37c4:	|               add.w d0,d0
    37c6:	|               add.w d1,d0
    37c8:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    37cc:	|               move.l 1c918 <winWidth>,d0
    37d2:	|               lsr.l #3,d0
    37d4:	|               move.l d0,d1
    37d6:	|               movea.l 144(sp),a0
    37da:	|               move.l (a0),d0
    37dc:	|           /-- bpl.s 37e0 <CstScaleSprite+0x976>
    37de:	|           |   addq.l #7,d0
    37e0:	|           \-> asr.l #3,d0
    37e2:	|               move.l d0,d0
    37e4:	|               sub.w d0,d1
    37e6:	|               move.w 132(sp),d0
    37ea:	|               sub.w 134(sp),d0
    37ee:	|               add.w d0,d0
    37f0:	|               add.w d1,d0
    37f2:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    37f6:	|               move.l #14675968,22(sp)
  WaitBlit();
    37fe:	|               move.l 1c9d0 <GfxBase>,d0
    3804:	|               movea.l d0,a6
    3806:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    380a:	|               movea.l 22(sp),a0
    380e:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    3814:	|               movea.l 22(sp),a0
    3818:	|               move.w 128(sp),70(a0)
  custom->bltamod = bltamod;
    381e:	|               move.w 32(sp),d0
    3822:	|               movea.l 22(sp),a0
    3826:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    382a:	|               move.w 30(sp),d0
    382e:	|               movea.l 22(sp),a0
    3832:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    3836:	|               move.w 28(sp),d0
    383a:	|               movea.l 22(sp),a0
    383e:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    3842:	|               move.w 26(sp),d0
    3846:	|               movea.l 22(sp),a0
    384a:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    384e:	|               move.l 108(sp),d0
    3852:	|               movea.l 22(sp),a0
    3856:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    385a:	|               move.l 104(sp),d0
    385e:	|               movea.l 22(sp),a0
    3862:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    3866:	|               movea.l 144(sp),a0
    386a:	|               move.l (a0),d0
    386c:	|               asr.l #3,d0
    386e:	|               move.l d0,d1
    3870:	|               movea.l 144(sp),a0
    3874:	|               move.l 4(a0),d0
    3878:	|               move.l d0,d0
    387a:	|               move.w d1,d2
    387c:	|               muls.w d0,d2
    387e:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    3882:	|               move.l 1c918 <winWidth>,d0
    3888:	|               lsr.l #3,d0
    388a:	|               move.l d0,d1
    388c:	|               move.l 1c91c <winHeight>,d0
    3892:	|               move.l d0,d0
    3894:	|               move.w d1,d2
    3896:	|               muls.w d0,d2
    3898:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    389c:	|               clr.l 88(sp)
    38a0:	|        /----- bra.w 3934 <CstScaleSprite+0xaca>
  {
    custom->bltapt = (APTR) bltapt;
    38a4:	|     /--|----> move.l 124(sp),d0
    38a8:	|     |  |      movea.l 22(sp),a0
    38ac:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    38b0:	|     |  |      move.l 120(sp),d0
    38b4:	|     |  |      movea.l 22(sp),a0
    38b8:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    38bc:	|     |  |      move.l 116(sp),d0
    38c0:	|     |  |      movea.l 22(sp),a0
    38c4:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    38c8:	|     |  |      move.l 112(sp),d0
    38cc:	|     |  |      movea.l 22(sp),a0
    38d0:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38d4:	|     |  |      move.l 92(sp),d0
    38d8:	|     |  |      move.w d0,d1
    38da:	|     |  |      lsl.w #6,d1
    38dc:	|     |  |      movea.l 144(sp),a0
    38e0:	|     |  |      move.l (a0),d0
    38e2:	|     |  |      movea.l d0,a0
    38e4:	|     |  |      cmpa.w #0,a0
    38e8:	|     |  |  /-- bge.s 38ee <CstScaleSprite+0xa84>
    38ea:	|     |  |  |   lea 15(a0),a0
    38ee:	|     |  |  \-> move.l a0,d0
    38f0:	|     |  |      asr.l #4,d0
    38f2:	|     |  |      move.l d0,d0
    38f4:	|     |  |      add.w d1,d0
    38f6:	|     |  |      sub.w 132(sp),d0
    38fa:	|     |  |      add.w 134(sp),d0
    38fe:	|     |  |      movea.l 22(sp),a0
    3902:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    3906:	|     |  |      moveq #0,d0
    3908:	|     |  |      move.w 20(sp),d0
    390c:	|     |  |      add.l d0,120(sp)
    bltcpt += bltcptplus;
    3910:	|     |  |      moveq #0,d0
    3912:	|     |  |      move.w 18(sp),d0
    3916:	|     |  |      add.l d0,116(sp)
    bltdpt += bltcptplus;
    391a:	|     |  |      moveq #0,d0
    391c:	|     |  |      move.w 18(sp),d0
    3920:	|     |  |      add.l d0,112(sp)
    WaitBlit();
    3924:	|     |  |      move.l 1c9d0 <GfxBase>,d0
    392a:	|     |  |      movea.l d0,a6
    392c:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3930:	|     |  |      addq.l #1,88(sp)
    3934:	|     |  \----> moveq #4,d0
    3936:	|     |         cmp.l 88(sp),d0
    393a:	|     \-------- bge.w 38a4 <CstScaleSprite+0xa3a>
  }   

  FreeVec(mask);
    393e:	|               move.l 84(sp),14(sp)
    3944:	|               move.l 1c9c4 <SysBase>,d0
    394a:	|               movea.l d0,a6
    394c:	|               movea.l 14(sp),a1
    3950:	|               jsr -690(a6)
}
    3954:	\-------------> move.l (sp)+,d2
    3956:	                movea.l (sp)+,a6
    3958:	                lea 132(sp),sp
    395c:	                rts

0000395e <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    395e:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3960:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3966:	move.l 8(sp),d0
    396a:	movea.l (sp),a0
    396c:	move.l d0,128(a0)
}
    3970:	nop
    3972:	addq.l #4,sp
    3974:	rts

00003976 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3976:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    397a:	move.l 1c8f4 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3982:	move.l 1c8f8 <CstDrawBuffer>,d0
    3988:	move.l d0,1c8f4 <CstViewBuffer>
  CstDrawBuffer = tmp;
    398e:	move.l 16(sp),1c8f8 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3996:	move.l 1c8fc <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    399e:	move.l 1c900 <CstCleanupQueueDrawBuffer>,d0
    39a4:	move.l d0,1c8fc <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    39aa:	move.l 12(sp),1c900 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    39b2:	move.l 1c8ee <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    39ba:	move.l 1c8f4 <CstViewBuffer>,d0
    39c0:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    39c4:	move.l 4(sp),d0
    39c8:	clr.w d0
    39ca:	swap d0
    39cc:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    39d0:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    39d4:	movea.w #118,a0
    39d8:	adda.l 8(sp),a0
    39dc:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    39de:	movea.w #114,a0
    39e2:	adda.l 8(sp),a0
    39e6:	move.w 2(sp),(a0)

  ptr +=  40*256;
    39ea:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39f2:	move.l 4(sp),d0
    39f6:	clr.w d0
    39f8:	swap d0
    39fa:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39fe:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3a02:	movea.w #126,a0
    3a06:	adda.l 8(sp),a0
    3a0a:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3a0c:	movea.w #122,a0
    3a10:	adda.l 8(sp),a0
    3a14:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3a18:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a20:	move.l 4(sp),d0
    3a24:	clr.w d0
    3a26:	swap d0
    3a28:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a2c:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3a30:	movea.l 8(sp),a0
    3a34:	lea 134(a0),a0
    3a38:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3a3a:	movea.l 8(sp),a0
    3a3e:	lea 130(a0),a0
    3a42:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3a46:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a4e:	move.l 4(sp),d0
    3a52:	clr.w d0
    3a54:	swap d0
    3a56:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a5a:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3a5e:	movea.l 8(sp),a0
    3a62:	lea 142(a0),a0
    3a66:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3a68:	movea.l 8(sp),a0
    3a6c:	lea 138(a0),a0
    3a70:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3a74:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a7c:	move.l 4(sp),d0
    3a80:	clr.w d0
    3a82:	swap d0
    3a84:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a88:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3a8c:	movea.l 8(sp),a0
    3a90:	lea 150(a0),a0
    3a94:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3a96:	movea.l 8(sp),a0
    3a9a:	lea 146(a0),a0
    3a9e:	move.w 2(sp),(a0)

}
    3aa2:	nop
    3aa4:	lea 20(sp),sp
    3aa8:	rts

00003aaa <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3aaa:	          lea -56(sp),sp
    3aae:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3ab0:	          pea 180be <PutChar+0x34c>
    3ab6:	          jsr 1729e <KPrintF>
    3abc:	          addq.l #4,sp

  width = width / 8;
    3abe:	          move.l 64(sp),d0
    3ac2:	      /-- bpl.s 3ac6 <CstReserveBackdrop+0x1c>
    3ac4:	      |   addq.l #7,d0
    3ac6:	      \-> asr.l #3,d0
    3ac8:	          move.l d0,64(sp)

  if( width < 40) 
    3acc:	          moveq #39,d0
    3ace:	          cmp.l 64(sp),d0
    3ad2:	      /-- blt.s 3ae8 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3ad4:	      |   pea 180d8 <PutChar+0x366>
    3ada:	      |   jsr 1729e <KPrintF>
    3ae0:	      |   addq.l #4,sp
    return FALSE;
    3ae2:	      |   clr.w d0
    3ae4:	/-----|-- bra.w 3e2a <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3ae8:	|     \-> pea 18116 <PutChar+0x3a4>
    3aee:	|         jsr 1729e <KPrintF>
    3af4:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3af6:	|         move.l 64(sp),-(sp)
    3afa:	|         jsr fce <CstCreateCopperlist>
    3b00:	|         addq.l #4,sp
    3b02:	|         move.l d0,1c8ee <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3b08:	|         pea 18136 <PutChar+0x3c4>
    3b0e:	|         jsr 1729e <KPrintF>
    3b14:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3b16:	|         move.l 64(sp),d1
    3b1a:	|         move.l 68(sp),d0
    3b1e:	|         muls.w d1,d0
    3b20:	|         move.w d0,1c8e4 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3b26:	|         move.w 1c8e4 <CstBackdropSizePlane>,d1
    3b2c:	|         move.w d1,d0
    3b2e:	|         add.w d0,d0
    3b30:	|         add.w d0,d0
    3b32:	|         add.w d1,d0
    3b34:	|         move.w d0,1c8e2 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3b3a:	|         move.w 1c8e2 <CstBackdropSize>,d0
    3b40:	|         move.w d0,d0
    3b42:	|         andi.l #65535,d0
    3b48:	|         move.l d0,48(sp)
    3b4c:	|         moveq #2,d1
    3b4e:	|         move.l d1,44(sp)
    3b52:	|         move.l 1c9c4 <SysBase>,d0
    3b58:	|         movea.l d0,a6
    3b5a:	|         move.l 48(sp),d0
    3b5e:	|         move.l 44(sp),d1
    3b62:	|         jsr -684(a6)
    3b66:	|         move.l d0,40(sp)
    3b6a:	|         move.l 40(sp),d0
    3b6e:	|         move.l d0,1c8e6 <CstBackDrop>
  if( !CstBackDrop)
    3b74:	|         move.l 1c8e6 <CstBackDrop>,d0
    3b7a:	|     /-- bne.s 3b90 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3b7c:	|     |   pea 1815d <PutChar+0x3eb>
    3b82:	|     |   jsr 1729e <KPrintF>
    3b88:	|     |   addq.l #4,sp
    return FALSE;  
    3b8a:	|     |   clr.w d0
    3b8c:	+-----|-- bra.w 3e2a <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3b90:	|     \-> pea 18195 <PutChar+0x423>
    3b96:	|         jsr 1729e <KPrintF>
    3b9c:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3b9e:	|         move.l 1c8e6 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3ba6:	|         clr.l 52(sp)
    3baa:	|     /-- bra.s 3bc0 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3bac:	|  /--|-> move.l 56(sp),d0
    3bb0:	|  |  |   move.l d0,d1
    3bb2:	|  |  |   addq.l #4,d1
    3bb4:	|  |  |   move.l d1,56(sp)
    3bb8:	|  |  |   movea.l d0,a0
    3bba:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3bbc:	|  |  |   addq.l #1,52(sp)
    3bc0:	|  |  \-> move.w 1c8e2 <CstBackdropSize>,d0
    3bc6:	|  |      lsr.w #2,d0
    3bc8:	|  |      move.w d0,d0
    3bca:	|  |      andi.l #65535,d0
    3bd0:	|  |      cmp.l 52(sp),d0
    3bd4:	|  \----- bgt.s 3bac <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3bd6:	|         move.w 1c8e2 <CstBackdropSize>,d0
    3bdc:	|         move.w d0,d0
    3bde:	|         andi.l #65535,d0
    3be4:	|         move.l 64(sp),d1
    3be8:	|         add.l d1,d1
    3bea:	|         add.l d1,d0
    3bec:	|         move.l d0,36(sp)
    3bf0:	|         moveq #2,d0
    3bf2:	|         move.l d0,32(sp)
    3bf6:	|         move.l 1c9c4 <SysBase>,d0
    3bfc:	|         movea.l d0,a6
    3bfe:	|         move.l 36(sp),d0
    3c02:	|         move.l 32(sp),d1
    3c06:	|         jsr -684(a6)
    3c0a:	|         move.l d0,28(sp)
    3c0e:	|         move.l 28(sp),d0
    3c12:	|         move.l d0,1c8f8 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3c18:	|         move.l 1c8f8 <CstDrawBuffer>,d0
    3c1e:	|     /-- bne.s 3c34 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3c20:	|     |   pea 181bb <PutChar+0x449>
    3c26:	|     |   jsr 1729e <KPrintF>
    3c2c:	|     |   addq.l #4,sp
    return FALSE;  
    3c2e:	|     |   clr.w d0
    3c30:	+-----|-- bra.w 3e2a <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3c34:	|     \-> pea 181f5 <PutChar+0x483>
    3c3a:	|         jsr 1729e <KPrintF>
    3c40:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3c42:	|         move.l #10000,24(sp)
    3c4a:	|         clr.l 20(sp)
    3c4e:	|         move.l 1c9c4 <SysBase>,d0
    3c54:	|         movea.l d0,a6
    3c56:	|         move.l 24(sp),d0
    3c5a:	|         move.l 20(sp),d1
    3c5e:	|         jsr -684(a6)
    3c62:	|         move.l d0,16(sp)
    3c66:	|         move.l 16(sp),d0
    3c6a:	|         move.l d0,1c904 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3c70:	|         move.l 1c904 <CstBackDropBufferApplyStart>,d0
    3c76:	|     /-- bne.s 3c8c <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3c78:	|     |   pea 1821d <PutChar+0x4ab>
    3c7e:	|     |   jsr 1729e <KPrintF>
    3c84:	|     |   addq.l #4,sp
    return FALSE;  
    3c86:	|     |   clr.w d0
    3c88:	+-----|-- bra.w 3e2a <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3c8c:	|     \-> move.l 1c904 <CstBackDropBufferApplyStart>,d0
    3c92:	|         move.l d0,1c908 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3c98:	|         movea.l 1c904 <CstBackDropBufferApplyStart>,a0
    3c9e:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3ca0:	|         movea.l 1c904 <CstBackDropBufferApplyStart>,a0
    3ca6:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3ca8:	|         move.w 1c8e2 <CstBackdropSize>,d0
    3cae:	|         move.w d0,d0
    3cb0:	|         andi.l #65535,d0
    3cb6:	|         move.l 64(sp),d1
    3cba:	|         add.l d1,d1
    3cbc:	|         add.l d1,d0
    3cbe:	|         move.l d0,12(sp)
    3cc2:	|         moveq #2,d1
    3cc4:	|         move.l d1,8(sp)
    3cc8:	|         move.l 1c9c4 <SysBase>,d0
    3cce:	|         movea.l d0,a6
    3cd0:	|         move.l 12(sp),d0
    3cd4:	|         move.l 8(sp),d1
    3cd8:	|         jsr -684(a6)
    3cdc:	|         move.l d0,4(sp)
    3ce0:	|         move.l 4(sp),d0
    3ce4:	|         move.l d0,1c8f4 <CstViewBuffer>
  if( !CstViewBuffer)
    3cea:	|         move.l 1c8f4 <CstViewBuffer>,d0
    3cf0:	|     /-- bne.s 3d06 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3cf2:	|     |   pea 18268 <PutChar+0x4f6>
    3cf8:	|     |   jsr 1729e <KPrintF>
    3cfe:	|     |   addq.l #4,sp
    return FALSE;  
    3d00:	|     |   clr.w d0
    3d02:	+-----|-- bra.w 3e2a <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3d06:	|     \-> pea 182a2 <PutChar+0x530>
    3d0c:	|         jsr 1729e <KPrintF>
    3d12:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3d14:	|         move.l 1c8f8 <CstDrawBuffer>,d1
    3d1a:	|         move.l 64(sp),d0
    3d1e:	|     /-- bpl.s 3d22 <CstReserveBackdrop+0x278>
    3d20:	|     |   addq.l #3,d0
    3d22:	|     \-> asr.l #2,d0
    3d24:	|         add.l d0,d0
    3d26:	|         add.l d0,d0
    3d28:	|         add.l d1,d0
    3d2a:	|         move.l d0,1c8f8 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3d30:	|         move.l 1c8f4 <CstViewBuffer>,d1
    3d36:	|         move.l 64(sp),d0
    3d3a:	|     /-- bpl.s 3d3e <CstReserveBackdrop+0x294>
    3d3c:	|     |   addq.l #3,d0
    3d3e:	|     \-> asr.l #2,d0
    3d40:	|         add.l d0,d0
    3d42:	|         add.l d0,d0
    3d44:	|         add.l d1,d0
    3d46:	|         move.l d0,1c8f4 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3d4c:	|         move.l 1c8e6 <CstBackDrop>,d0
    3d52:	|         clr.l -(sp)
    3d54:	|         pea 5 <_start+0x5>
    3d58:	|         pea 100 <copyString+0x48>
    3d5c:	|         pea 140 <decodeFilename+0x28>
    3d60:	|         pea 182ca <PutChar+0x558>
    3d66:	|         move.l d0,-(sp)
    3d68:	|         jsr 17386 <debug_register_bitmap>
    3d6e:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3d72:	|         move.l 68(sp),d0
    3d76:	|         movea.w d0,a1
    3d78:	|         move.l 64(sp),d0
    3d7c:	|         lsl.w #3,d0
    3d7e:	|         movea.w d0,a0
    3d80:	|         move.l 1c8f8 <CstDrawBuffer>,d0
    3d86:	|         clr.l -(sp)
    3d88:	|         pea 5 <_start+0x5>
    3d8c:	|         move.l a1,-(sp)
    3d8e:	|         move.l a0,-(sp)
    3d90:	|         pea 182da <PutChar+0x568>
    3d96:	|         move.l d0,-(sp)
    3d98:	|         jsr 17386 <debug_register_bitmap>
    3d9e:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3da2:	|         move.l 68(sp),d0
    3da6:	|         movea.w d0,a1
    3da8:	|         move.l 64(sp),d0
    3dac:	|         lsl.w #3,d0
    3dae:	|         movea.w d0,a0
    3db0:	|         move.l 1c8f4 <CstViewBuffer>,d0
    3db6:	|         clr.l -(sp)
    3db8:	|         pea 5 <_start+0x5>
    3dbc:	|         move.l a1,-(sp)
    3dbe:	|         move.l a0,-(sp)
    3dc0:	|         pea 182e9 <PutChar+0x577>
    3dc6:	|         move.l d0,-(sp)
    3dc8:	|         jsr 17386 <debug_register_bitmap>
    3dce:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3dd2:	|         move.l 1c8ee <CstCopperList>,d0
    3dd8:	|     /-- beq.s 3dea <CstReserveBackdrop+0x340>
    3dda:	|     |   move.l 1c8f8 <CstDrawBuffer>,d0
    3de0:	|     +-- beq.s 3dea <CstReserveBackdrop+0x340>
    3de2:	|     |   move.l 1c8f4 <CstViewBuffer>,d0
    3de8:	|  /--|-- bne.s 3dfc <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3dea:	|  |  \-> pea 182f8 <PutChar+0x586>
    3df0:	|  |      jsr 1729e <KPrintF>
    3df6:	|  |      addq.l #4,sp
    return FALSE;
    3df8:	|  |      clr.w d0
    3dfa:	+--|----- bra.s 3e2a <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3dfc:	|  \----> pea 18325 <PutChar+0x5b3>
    3e02:	|         jsr 1729e <KPrintF>
    3e08:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3e0a:	|         move.l 1c8ee <CstCopperList>,d0
    3e10:	|         move.l d0,-(sp)
    3e12:	|         jsr 395e <CstSetCl>
    3e18:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3e1a:	|         pea 1834c <PutChar+0x5da>
    3e20:	|         jsr 1729e <KPrintF>
    3e26:	|         addq.l #4,sp
  return TRUE;
    3e28:	|         moveq #1,d0

}
    3e2a:	\-------> movea.l (sp)+,a6
    3e2c:	          lea 56(sp),sp
    3e30:	          rts

00003e32 <CstUnfreeze>:

void CstUnfreeze() {
    3e32:	       lea -24(sp),sp
    3e36:	       move.l a6,-(sp)
    3e38:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3e3a:	       pea 1836f <PutChar+0x5fd>
    3e40:	       jsr 1729e <KPrintF>
    3e46:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3e48:	       move.l 1c918 <winWidth>,d0
    3e4e:	       lsr.l #3,d0
    3e50:	       move.l d0,d1
    3e52:	       move.l 1c91c <winHeight>,d0
    3e58:	       move.l d0,d0
    3e5a:	       muls.w d0,d1
    3e5c:	       move.w d1,d0
    3e5e:	       add.w d0,d0
    3e60:	       add.w d0,d0
    3e62:	       move.w d0,d2
    3e64:	       add.w d1,d2
    3e66:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3e6a:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3e72:	       move.l 1c91c <winHeight>,d0
    3e78:	       move.l d0,d0
    3e7a:	       movea.w d0,a1
    3e7c:	       move.l 1c918 <winWidth>,d0
    3e82:	       move.l d0,d0
    3e84:	       movea.w d0,a0
    3e86:	       move.l 1c8ea <CstBackDropBackup>,d0
    3e8c:	       clr.l -(sp)
    3e8e:	       pea 5 <_start+0x5>
    3e92:	       move.l a1,-(sp)
    3e94:	       move.l a0,-(sp)
    3e96:	       pea 17f41 <PutChar+0x1cf>
    3e9c:	       move.l d0,-(sp)
    3e9e:	       jsr 17386 <debug_register_bitmap>
    3ea4:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3ea8:	       move.l 1c8ea <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3eb0:	       move.l 1c8e6 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3eb8:	       clr.l 20(sp)
    3ebc:	   /-- bra.s 3ee2 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3ebe:	/--|-> move.l 28(sp),d1
    3ec2:	|  |   move.l d1,d0
    3ec4:	|  |   addq.l #4,d0
    3ec6:	|  |   move.l d0,28(sp)
    3eca:	|  |   move.l 24(sp),d0
    3ece:	|  |   move.l d0,d2
    3ed0:	|  |   addq.l #4,d2
    3ed2:	|  |   move.l d2,24(sp)
    3ed6:	|  |   movea.l d1,a0
    3ed8:	|  |   move.l (a0),d1
    3eda:	|  |   movea.l d0,a0
    3edc:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3ede:	|  |   addq.l #1,20(sp)
    3ee2:	|  \-> move.w 18(sp),d0
    3ee6:	|      lsr.w #2,d0
    3ee8:	|      move.w d0,d0
    3eea:	|      andi.l #65535,d0
    3ef0:	|      cmp.l 20(sp),d0
    3ef4:	\----- bgt.s 3ebe <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3ef6:	       move.w #2,1c8f2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3efe:	       move.l 1c918 <winWidth>,d0
    3f04:	       lsr.l #4,d0
    3f06:	       movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    3f0c:	       move.l a0,d1
    3f0e:	       addq.l #2,d1
    3f10:	       move.l d1,1c908 <CstBackDropBufferApplyCursor>
    3f16:	       move.l d0,d0
    3f18:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3f1a:	       move.l 1c91c <winHeight>,d0
    3f20:	       movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    3f26:	       move.l a0,d1
    3f28:	       addq.l #2,d1
    3f2a:	       move.l d1,1c908 <CstBackDropBufferApplyCursor>
    3f30:	       move.l d0,d0
    3f32:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3f34:	       movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    3f3a:	       move.l a0,d0
    3f3c:	       addq.l #2,d0
    3f3e:	       move.l d0,1c908 <CstBackDropBufferApplyCursor>
    3f44:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3f46:	       movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    3f4c:	       move.l a0,d0
    3f4e:	       addq.l #2,d0
    3f50:	       move.l d0,1c908 <CstBackDropBufferApplyCursor>
    3f56:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3f58:	       movea.l 1c908 <CstBackDropBufferApplyCursor>,a0
    3f5e:	       move.l a0,d0
    3f60:	       addq.l #2,d0
    3f62:	       move.l d0,1c908 <CstBackDropBufferApplyCursor>
    3f68:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3f6a:	       move.l 1c8ea <CstBackDropBackup>,d0
    3f70:	   /-- bne.s 3f8a <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3f72:	   |   move.l 1c8ea <CstBackDropBackup>,10(sp)
    3f7a:	   |   move.l 1c9c4 <SysBase>,d0
    3f80:	   |   movea.l d0,a6
    3f82:	   |   movea.l 10(sp),a1
    3f86:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3f8a:	   \-> pea 17f50 <PutChar+0x1de>
    3f90:	       jsr 1729e <KPrintF>
    3f96:	       addq.l #4,sp

}
    3f98:	       nop
    3f9a:	       move.l (sp)+,d2
    3f9c:	       movea.l (sp)+,a6
    3f9e:	       lea 24(sp),sp
    3fa2:	       rts

00003fa4 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3fa4:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3fa8:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3fac:	       tst.l 24(sp)
    3fb0:	   /-- bge.s 3fb6 <drawLine+0x12>
    3fb2:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3fb6:	   \-> tst.l 28(sp)
    3fba:	   /-- bge.s 3fc0 <drawLine+0x1c>
    3fbc:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3fc0:	   \-> tst.l 32(sp)
    3fc4:	   /-- bge.s 3fca <drawLine+0x26>
    3fc6:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3fca:	   \-> tst.l 36(sp)
    3fce:	   /-- bge.s 3fd4 <drawLine+0x30>
    3fd0:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3fd4:	   \-> move.l 1ca60 <sceneWidth>,d0
    3fda:	       cmp.l 24(sp),d0
    3fde:	   /-- bge.s 3fee <drawLine+0x4a>
    3fe0:	   |   move.l 1ca60 <sceneWidth>,d0
    3fe6:	   |   move.l d0,d1
    3fe8:	   |   subq.l #1,d1
    3fea:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3fee:	   \-> move.l 1ca60 <sceneWidth>,d0
    3ff4:	       cmp.l 32(sp),d0
    3ff8:	   /-- bge.s 4008 <drawLine+0x64>
    3ffa:	   |   move.l 1ca60 <sceneWidth>,d0
    4000:	   |   move.l d0,d1
    4002:	   |   subq.l #1,d1
    4004:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4008:	   \-> move.l 1ca64 <sceneHeight>,d0
    400e:	       cmp.l 28(sp),d0
    4012:	   /-- bge.s 4022 <drawLine+0x7e>
    4014:	   |   move.l 1ca64 <sceneHeight>,d0
    401a:	   |   move.l d0,d1
    401c:	   |   subq.l #1,d1
    401e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4022:	   \-> move.l 1ca64 <sceneHeight>,d0
    4028:	       cmp.l 36(sp),d0
    402c:	   /-- bge.s 403c <drawLine+0x98>
    402e:	   |   move.l 1ca64 <sceneHeight>,d0
    4034:	   |   move.l d0,d1
    4036:	   |   subq.l #1,d1
    4038:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    403c:	   \-> move.l 24(sp),d0
    4040:	       cmp.l 32(sp),d0
    4044:	/----- ble.s 4060 <drawLine+0xbc>
		x = x2; 
    4046:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    404c:	|      tst.w 10(sp)
    4050:	|      seq d0
    4052:	|      neg.b d0
    4054:	|      move.b d0,d0
    4056:	|      andi.w #255,d0
    405a:	|      move.w d0,10(sp)
    405e:	|  /-- bra.s 4066 <drawLine+0xc2>
	} else x = x1;
    4060:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4066:	   \-> move.l 28(sp),d1
    406a:	       cmp.l 36(sp),d1
    406e:	/----- ble.s 408a <drawLine+0xe6>
		y = y2; 
    4070:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4076:	|      tst.w 10(sp)
    407a:	|      seq d0
    407c:	|      neg.b d0
    407e:	|      move.b d0,d0
    4080:	|      andi.w #255,d0
    4084:	|      move.w d0,10(sp)
    4088:	|  /-- bra.s 4090 <drawLine+0xec>
	} else y = y1;	
    408a:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4090:	   \-> move.l 32(sp),d0
    4094:	       sub.l 24(sp),d0
    4098:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    409c:	       move.l 6(sp),d0
    40a0:	   /-- bpl.s 40a4 <drawLine+0x100>
    40a2:	   |   neg.l d0
    40a4:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    40a8:	       move.l 36(sp),d1
    40ac:	       sub.l 28(sp),d1
    40b0:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    40b4:	       move.l 2(sp),d0
    40b8:	   /-- bpl.s 40bc <drawLine+0x118>
    40ba:	   |   neg.l d0
    40bc:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    40c0:	       tst.l 6(sp)
    40c4:	   /-- bne.s 40e8 <drawLine+0x144>
		diffX = 1;
    40c6:	   |   moveq #1,d0
    40c8:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    40cc:	   |   move.l 1ca60 <sceneWidth>,d0
    40d2:	   |   subq.l #1,d0
    40d4:	   |   cmp.l 16(sp),d0
    40d8:	   +-- bne.s 40e8 <drawLine+0x144>
    40da:	   |   move.l 1ca60 <sceneWidth>,d0
    40e0:	   |   move.l d0,d1
    40e2:	   |   subq.l #2,d1
    40e4:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    40e8:	   \-> tst.l 2(sp)
    40ec:	   /-- bne.s 4110 <drawLine+0x16c>
		diffY = 1;
    40ee:	   |   moveq #1,d0
    40f0:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    40f4:	   |   move.l 1ca64 <sceneHeight>,d0
    40fa:	   |   subq.l #1,d0
    40fc:	   |   cmp.l 12(sp),d0
    4100:	   +-- bne.s 4110 <drawLine+0x16c>
    4102:	   |   move.l 1ca64 <sceneHeight>,d0
    4108:	   |   move.l d0,d1
    410a:	   |   subq.l #2,d1
    410c:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4110:	   \-> pea 1839a <PutChar+0x628>
    4116:	       jsr 1729e <KPrintF>
    411c:	       addq.l #4,sp
	
}
    411e:	       nop
    4120:	       lea 20(sp),sp
    4124:	       rts

00004126 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4126:	                      lea -24(sp),sp
    412a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    412c:	                      move.l 1c920 <firstTexture>,d0
    4132:	/-------------------- beq.w 4210 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4136:	|                     clr.l 24(sp)
    413a:	|     /-------------- bra.w 4204 <deleteTextures+0xde>
			BOOL found = FALSE;
    413e:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4142:	|  |  |               move.l 1c920 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    414a:	|  |  |               movea.l 20(sp),a0
    414e:	|  |  |               move.l (a0),d1
    4150:	|  |  |               move.l 24(sp),d0
    4154:	|  |  |               add.l d0,d0
    4156:	|  |  |               add.l d0,d0
    4158:	|  |  |               movea.l 36(sp),a0
    415c:	|  |  |               adda.l d0,a0
    415e:	|  |  |               move.l (a0),d0
    4160:	|  |  |               cmp.l d1,d0
    4162:	|  |  |  /----------- bne.w 41f6 <deleteTextures+0xd0>
				found = TRUE;
    4166:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    416c:	|  |  |  |            movea.l 20(sp),a0
    4170:	|  |  |  |            move.l 12(a0),d0
    4174:	|  |  |  |            move.l d0,1c920 <firstTexture>
				FreeVec(list);
    417a:	|  |  |  |            move.l 20(sp),6(sp)
    4180:	|  |  |  |            move.l 1c9c4 <SysBase>,d0
    4186:	|  |  |  |            movea.l d0,a6
    4188:	|  |  |  |            movea.l 6(sp),a1
    418c:	|  |  |  |            jsr -690(a6)
				continue;
    4190:	|  |  |  |  /-------- bra.s 4200 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4192:	|  |  |  |  |  /----> movea.l 20(sp),a0
    4196:	|  |  |  |  |  |      movea.l 12(a0),a0
    419a:	|  |  |  |  |  |      move.l (a0),d1
    419c:	|  |  |  |  |  |      move.l 24(sp),d0
    41a0:	|  |  |  |  |  |      add.l d0,d0
    41a2:	|  |  |  |  |  |      add.l d0,d0
    41a4:	|  |  |  |  |  |      movea.l 36(sp),a0
    41a8:	|  |  |  |  |  |      adda.l d0,a0
    41aa:	|  |  |  |  |  |      move.l (a0),d0
    41ac:	|  |  |  |  |  |      cmp.l d1,d0
    41ae:	|  |  |  |  |  |  /-- bne.s 41ec <deleteTextures+0xc6>
					found = TRUE;
    41b0:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    41b6:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    41ba:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    41c0:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    41c4:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    41c8:	|  |  |  |  |  |  |   move.l 12(a0),d0
    41cc:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    41d0:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    41d4:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    41da:	|  |  |  |  |  |  |   move.l 1c9c4 <SysBase>,d0
    41e0:	|  |  |  |  |  |  |   movea.l d0,a6
    41e2:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    41e6:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    41ea:	|  |  |  |  +--|--|-- bra.s 4200 <deleteTextures+0xda>
				}
				list = list->next;
    41ec:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    41f0:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    41f6:	|  |  |  \--|--|----> movea.l 20(sp),a0
    41fa:	|  |  |     |  |      move.l 12(a0),d0
    41fe:	|  |  |     |  \----- bne.s 4192 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4200:	|  |  |     \-------> addq.l #1,24(sp)
    4204:	|  |  \-------------> move.l 24(sp),d0
    4208:	|  |                  cmp.l 32(sp),d0
    420c:	|  \----------------- bcs.w 413e <deleteTextures+0x18>
			}
		}
	}
}
    4210:	\-------------------> nop
    4212:	                      movea.l (sp)+,a6
    4214:	                      lea 24(sp),sp
    4218:	                      rts

0000421a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    421a:	subq.l #4,sp
    421c:	move.l 8(sp),d0
    4220:	move.w d0,d0
    4222:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4226:	pea 183bd <PutChar+0x64b>
    422c:	jsr 1729e <KPrintF>
    4232:	addq.l #4,sp
}
    4234:	nop
    4236:	addq.l #4,sp
    4238:	rts

0000423a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    423a:	       moveq #-1,d0
    423c:	       cmp.l 4(sp),d0
    4240:	   /-- bne.s 4246 <resourceNameFromNum+0xc>
    4242:	   |   moveq #0,d0
    4244:	/--|-- bra.s 427e <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4246:	|  \-> move.l 1c9a0 <numResourceNames>,d0
    424c:	|  /-- bne.s 4256 <resourceNameFromNum+0x1c>
    424e:	|  |   move.l #99309,d0
    4254:	+--|-- bra.s 427e <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4256:	|  \-> move.l 1c9a0 <numResourceNames>,d0
    425c:	|      cmp.l 4(sp),d0
    4260:	|  /-- ble.s 4278 <resourceNameFromNum+0x3e>
    4262:	|  |   move.l 1c958 <allResourceNames>,d1
    4268:	|  |   move.l 4(sp),d0
    426c:	|  |   add.l d0,d0
    426e:	|  |   add.l d0,d0
    4270:	|  |   movea.l d1,a0
    4272:	|  |   adda.l d0,a0
    4274:	|  |   move.l (a0),d0
    4276:	+--|-- bra.s 427e <resourceNameFromNum+0x44>
	return "Unknown resource";
    4278:	|  \-> move.l #99318,d0
    427e:	\----> rts

00004280 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4280:	          lea -44(sp),sp
    4284:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4288:	          move.l #320,1c918 <winWidth>
    winHeight = 256;
    4292:	          move.l #256,1c91c <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    429c:	          tst.l 60(sp)
    42a0:	      /-- bne.s 42b8 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    42a2:	      |   pea 18407 <PutChar+0x695>
    42a8:	      |   jsr b8 <copyString>
    42ae:	      |   addq.l #4,sp
    42b0:	      |   move.l d0,1c930 <bundleFolder>
    42b6:	   /--|-- bra.s 42ce <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    42b8:	   |  \-> movea.l 64(sp),a0
    42bc:	   |      move.l (a0),d0
    42be:	   |      move.l d0,-(sp)
    42c0:	   |      jsr b8 <copyString>
    42c6:	   |      addq.l #4,sp
    42c8:	   |      move.l d0,1c930 <bundleFolder>
	}
    
	int lastSlash = -1;
    42ce:	   \----> moveq #-1,d0
    42d0:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    42d4:	          clr.l 44(sp)
    42d8:	   /----- bra.s 42fa <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    42da:	/--|----> move.l 1c930 <bundleFolder>,d1
    42e0:	|  |      move.l 44(sp),d0
    42e4:	|  |      movea.l d1,a0
    42e6:	|  |      adda.l d0,a0
    42e8:	|  |      move.b (a0),d0
    42ea:	|  |      cmpi.b #47,d0
    42ee:	|  |  /-- bne.s 42f6 <main_sludge+0x76>
    42f0:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    42f6:	|  |  \-> addq.l #1,44(sp)
    42fa:	|  \----> move.l 1c930 <bundleFolder>,d1
    4300:	|         move.l 44(sp),d0
    4304:	|         movea.l d1,a0
    4306:	|         adda.l d0,a0
    4308:	|         move.b (a0),d0
    430a:	\-------- bne.s 42da <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    430c:	          move.l 1c930 <bundleFolder>,d0
    4312:	          move.l 48(sp),d1
    4316:	          addq.l #1,d1
    4318:	          movea.l d0,a0
    431a:	          adda.l d1,a0
    431c:	          clr.b (a0)

	if (argc > 1) {
    431e:	          moveq #1,d0
    4320:	          cmp.l 60(sp),d0
    4324:	      /-- bge.s 4340 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4326:	      |   move.l 60(sp),d0
    432a:	      |   addi.l #1073741823,d0
    4330:	      |   add.l d0,d0
    4332:	      |   add.l d0,d0
    4334:	      |   movea.l 64(sp),a0
    4338:	      |   adda.l d0,a0
    433a:	      |   move.l (a0),52(sp)
    433e:	   /--|-- bra.s 439a <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4340:	   |  \-> move.l 1c930 <bundleFolder>,d0
    4346:	   |      pea 1840d <PutChar+0x69b>
    434c:	   |      move.l d0,-(sp)
    434e:	   |      jsr 13db0 <joinStrings>
    4354:	   |      addq.l #8,sp
    4356:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    435a:	   |      move.l 52(sp),-(sp)
    435e:	   |      jsr 13caa <fileExists>
    4364:	   |      addq.l #4,sp
    4366:	   |      tst.b d0
    4368:	   +----- bne.s 439a <main_sludge+0x11a>
			FreeVec(sludgeFile);
    436a:	   |      move.l 52(sp),40(sp)
    4370:	   |      move.l 1c9c4 <SysBase>,d0
    4376:	   |      movea.l d0,a6
    4378:	   |      movea.l 40(sp),a1
    437c:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4380:	   |      move.l 1c930 <bundleFolder>,d0
    4386:	   |      pea 1841a <PutChar+0x6a8>
    438c:	   |      move.l d0,-(sp)
    438e:	   |      jsr 13db0 <joinStrings>
    4394:	   |      addq.l #8,sp
    4396:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    439a:	   \----> pea 18423 <PutChar+0x6b1>
    43a0:	          jsr 1729e <KPrintF>
    43a6:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    43a8:	          move.l 52(sp),-(sp)
    43ac:	          jsr 13caa <fileExists>
    43b2:	          addq.l #4,sp
    43b4:	          tst.b d0
    43b6:	      /-- bne.s 440e <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    43b8:	      |   move.l 1c9cc <DOSBase>,d0
    43be:	      |   movea.l d0,a6
    43c0:	      |   jsr -60(a6)
    43c4:	      |   move.l d0,28(sp)
    43c8:	      |   move.l 28(sp),d0
    43cc:	      |   move.l d0,24(sp)
    43d0:	      |   move.l #99363,20(sp)
    43d8:	      |   moveq #21,d0
    43da:	      |   move.l d0,16(sp)
    43de:	      |   move.l 1c9cc <DOSBase>,d0
    43e4:	      |   movea.l d0,a6
    43e6:	      |   move.l 24(sp),d1
    43ea:	      |   move.l 20(sp),d2
    43ee:	      |   move.l 16(sp),d3
    43f2:	      |   jsr -48(a6)
    43f6:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    43fa:	      |   pea 18423 <PutChar+0x6b1>
    4400:	      |   jsr 1729e <KPrintF>
    4406:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4408:	      |   moveq #0,d0
    440a:	/-----|-- bra.w 4606 <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    440e:	|     \-> pea 18439 <PutChar+0x6c7>
    4414:	|         jsr 1729e <KPrintF>
    441a:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    441c:	|         move.l 52(sp),-(sp)
    4420:	|         jsr 4610 <setGameFilePath>
    4426:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4428:	|         move.l 52(sp),-(sp)
    442c:	|         jsr 5bbe <initSludge>
    4432:	|         addq.l #4,sp
    4434:	|         tst.w d0
    4436:	|     /-- bne.s 443e <main_sludge+0x1be>
    4438:	|     |   moveq #0,d0
    443a:	+-----|-- bra.w 4606 <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    443e:	|     \-> move.l 1c918 <winWidth>,d0
    4444:	|         cmpi.l #320,d0
    444a:	|     /-- bne.s 445a <main_sludge+0x1da>
    444c:	|     |   move.l 1c91c <winHeight>,d0
    4452:	|     |   cmpi.l #256,d0
    4458:	|  /--|-- beq.s 447c <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    445a:	|  |  \-> pea 1844a <PutChar+0x6d8>
    4460:	|  |      jsr 1729e <KPrintF>
    4466:	|  |      addq.l #4,sp
		winWidth = 320;
    4468:	|  |      move.l #320,1c918 <winWidth>
		winHeight = 256;
    4472:	|  |      move.l #256,1c91c <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    447c:	|  \----> pea 184c7 <PutChar+0x755>
    4482:	|         jsr 1729e <KPrintF>
    4488:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    448a:	|         move.l 1c91c <winHeight>,d0
    4490:	|         move.l d0,d1
    4492:	|         move.l 1c918 <winWidth>,d0
    4498:	|         move.l d1,-(sp)
    449a:	|         move.l d0,-(sp)
    449c:	|         jsr d4ac <resizeBackdrop>
    44a2:	|         addq.l #8,sp
    44a4:	|         tst.w d0
    44a6:	|     /-- bne.s 44bc <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    44a8:	|     |   pea 184da <PutChar+0x768>
    44ae:	|     |   jsr 1729e <KPrintF>
    44b4:	|     |   addq.l #4,sp
		return FALSE;
    44b6:	|     |   moveq #0,d0
    44b8:	+-----|-- bra.w 4606 <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    44bc:	|     \-> pea 18500 <PutChar+0x78e>
    44c2:	|         jsr 1729e <KPrintF>
    44c8:	|         addq.l #4,sp
	if (! initPeople ())
    44ca:	|         jsr aa98 <initPeople>
    44d0:	|         tst.w d0
    44d2:	|     /-- bne.s 44e8 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    44d4:	|     |   pea 1850d <PutChar+0x79b>
    44da:	|     |   jsr 1729e <KPrintF>
    44e0:	|     |   addq.l #4,sp
		return FALSE;
    44e2:	|     |   moveq #0,d0
    44e4:	+-----|-- bra.w 4606 <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    44e8:	|     \-> pea 1852e <PutChar+0x7bc>
    44ee:	|         jsr 1729e <KPrintF>
    44f4:	|         addq.l #4,sp
	if (! initFloor ())
    44f6:	|         jsr 16654 <initFloor>
    44fc:	|         tst.w d0
    44fe:	|     /-- bne.s 4514 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4500:	|     |   pea 1853a <PutChar+0x7c8>
    4506:	|     |   jsr 1729e <KPrintF>
    450c:	|     |   addq.l #4,sp
		
		return FALSE;
    450e:	|     |   moveq #0,d0
    4510:	+-----|-- bra.w 4606 <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    4514:	|     \-> pea 1855a <PutChar+0x7e8>
    451a:	|         jsr 1729e <KPrintF>
    4520:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4522:	|         jsr d668 <initObjectTypes>
    4528:	|         tst.w d0
    452a:	|     /-- bne.s 4540 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    452c:	|     |   pea 1856b <PutChar+0x7f9>
    4532:	|     |   jsr 1729e <KPrintF>
    4538:	|     |   addq.l #4,sp
		return FALSE;
    453a:	|     |   moveq #0,d0
    453c:	+-----|-- bra.w 4606 <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    4540:	|     \-> pea 18591 <PutChar+0x81f>
    4546:	|         jsr 1729e <KPrintF>
    454c:	|         addq.l #4,sp
	initSpeech ();
    454e:	|         jsr 7fe0 <initSpeech>
	KPrintF("Init status bar\n");
    4554:	|         pea 1859e <PutChar+0x82c>
    455a:	|         jsr 1729e <KPrintF>
    4560:	|         addq.l #4,sp
	initStatusBar ();
    4562:	|         jsr 7aa4 <initStatusBar>

	KPrintF("Get numbered string\n");
    4568:	|         pea 185af <PutChar+0x83d>
    456e:	|         jsr 1729e <KPrintF>
    4574:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4576:	|         pea 1 <_start+0x1>
    457a:	|         jsr 6db4 <getNumberedString>
    4580:	|         addq.l #4,sp
    4582:	|         move.l d0,1c928 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4588:	|         pea 185c4 <PutChar+0x852>
    458e:	|         jsr 1729e <KPrintF>
    4594:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4596:	|         move.l 1c994 <noStack>,d0
    459c:	|         pea 1 <_start+0x1>
    45a0:	|         move.l d0,-(sp)
    45a2:	|         clr.l -(sp)
    45a4:	|         clr.l -(sp)
    45a6:	|         clr.l -(sp)
    45a8:	|         jsr 6c0a <startNewFunctionNum>
    45ae:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    45b2:	|         pea 185dc <PutChar+0x86a>
    45b8:	|         jsr 1729e <KPrintF>
    45be:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    45c0:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    45c8:	|         clr.l 1c934 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    45ce:	|     /-- bra.s 45e8 <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    45d0:	|  /--|-> jsr 6b9a <sludgeDisplay>
		CsiCheckInput();
    45d6:	|  |  |   jsr cfe0 <CsiCheckInput>
		handleInput();
    45dc:	|  |  |   jsr 5958 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    45e2:	|  |  |   jsr 171d2 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    45e8:	|  |  \-> move.l 1c934 <weAreDoneSoQuit>,d0
    45ee:	|  \----- beq.s 45d0 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    45f0:	|         move.l 52(sp),32(sp)
    45f6:	|         move.l 1c9c4 <SysBase>,d0
    45fc:	|         movea.l d0,a6
    45fe:	|         movea.l 32(sp),a1
    4602:	|         jsr -690(a6)
}
    4606:	\-------> movem.l (sp)+,d2-d3/a6
    460a:	          lea 44(sp),sp
    460e:	          rts

00004610 <setGameFilePath>:

void setGameFilePath (char * f) {
    4610:	          lea -1104(sp),sp
    4614:	          move.l a6,-(sp)
    4616:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4618:	          move.l #1112,d0
    461e:	          add.l sp,d0
    4620:	          addi.l #-1102,d0
    4626:	          move.l d0,1100(sp)
    462a:	          move.l #998,1096(sp)
    4632:	          move.l 1c9cc <DOSBase>,d0
    4638:	          movea.l d0,a6
    463a:	          move.l 1100(sp),d1
    463e:	          move.l 1096(sp),d2
    4642:	          jsr -564(a6)
    4646:	          move.w d0,1094(sp)
    464a:	          move.w 1094(sp),d0
    464e:	      /-- bne.s 465e <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    4650:	      |   pea 185ef <PutChar+0x87d>
    4656:	      |   jsr 1729e <KPrintF>
    465c:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    465e:	      \-> moveq #-1,d0
    4660:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4664:	          clr.l 1104(sp)
    4668:	   /----- bra.s 4686 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    466a:	/--|----> move.l 1104(sp),d0
    466e:	|  |      movea.l 1116(sp),a0
    4672:	|  |      adda.l d0,a0
    4674:	|  |      move.b (a0),d0
    4676:	|  |      cmpi.b #47,d0
    467a:	|  |  /-- bne.s 4682 <setGameFilePath+0x72>
    467c:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4682:	|  |  \-> addq.l #1,1104(sp)
    4686:	|  \----> move.l 1104(sp),d0
    468a:	|         movea.l 1116(sp),a0
    468e:	|         adda.l d0,a0
    4690:	|         move.b (a0),d0
    4692:	\-------- bne.s 466a <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4694:	          moveq #-1,d0
    4696:	          cmp.l 1108(sp),d0
    469a:	   /----- beq.s 4714 <setGameFilePath+0x104>
		f[got] = 0;	
    469c:	   |      move.l 1108(sp),d0
    46a0:	   |      movea.l 1116(sp),a0
    46a4:	   |      adda.l d0,a0
    46a6:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    46a8:	   |      move.l 1116(sp),1090(sp)
    46ae:	   |      moveq #-2,d0
    46b0:	   |      move.l d0,1086(sp)
    46b4:	   |      move.l 1c9cc <DOSBase>,d0
    46ba:	   |      movea.l d0,a6
    46bc:	   |      move.l 1090(sp),d1
    46c0:	   |      move.l 1086(sp),d2
    46c4:	   |      jsr -84(a6)
    46c8:	   |      move.l d0,1082(sp)
    46cc:	   |      move.l 1082(sp),d0
    46d0:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    46d4:	   |      move.l 1078(sp),1074(sp)
    46da:	   |      move.l 1c9cc <DOSBase>,d0
    46e0:	   |      movea.l d0,a6
    46e2:	   |      move.l 1074(sp),d1
    46e6:	   |      jsr -126(a6)
    46ea:	   |      move.l d0,1070(sp)
    46ee:	   |      move.l 1070(sp),d0
    46f2:	   |  /-- bne.s 4706 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    46f4:	   |  |   move.l 1116(sp),-(sp)
    46f8:	   |  |   pea 18615 <PutChar+0x8a3>
    46fe:	   |  |   jsr 1729e <KPrintF>
    4704:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4706:	   |  \-> move.l 1108(sp),d0
    470a:	   |      movea.l 1116(sp),a0
    470e:	   |      adda.l d0,a0
    4710:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4714:	   \----> move.l #400,1066(sp)
    471c:	          clr.l 1062(sp)
    4720:	          move.l 1c9c4 <SysBase>,d0
    4726:	          movea.l d0,a6
    4728:	          move.l 1066(sp),d0
    472c:	          move.l 1062(sp),d1
    4730:	          jsr -684(a6)
    4734:	          move.l d0,1058(sp)
    4738:	          move.l 1058(sp),d0
    473c:	          move.l d0,1c92c <gamePath>
	if (gamePath==0) {
    4742:	          move.l 1c92c <gamePath>,d0
    4748:	      /-- bne.s 475c <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    474a:	      |   pea 18648 <PutChar+0x8d6>
    4750:	      |   jsr 1729e <KPrintF>
    4756:	      |   addq.l #4,sp
    4758:	   /--|-- bra.w 4844 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    475c:	   |  \-> move.l 1c92c <gamePath>,1054(sp)
    4764:	   |      moveq #-2,d0
    4766:	   |      move.l d0,1050(sp)
    476a:	   |      move.l 1c9cc <DOSBase>,d0
    4770:	   |      movea.l d0,a6
    4772:	   |      move.l 1054(sp),d1
    4776:	   |      move.l 1050(sp),d2
    477a:	   |      jsr -84(a6)
    477e:	   |      move.l d0,1046(sp)
    4782:	   |      move.l 1046(sp),d0
    4786:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    478a:	   |      move.l 1042(sp),1038(sp)
    4790:	   |      move.l 1c9cc <DOSBase>,d0
    4796:	   |      movea.l d0,a6
    4798:	   |      move.l 1038(sp),d1
    479c:	   |      jsr -126(a6)
    47a0:	   |      move.l d0,1034(sp)
    47a4:	   |      move.l 1034(sp),d0
    47a8:	   |  /-- bne.s 47b8 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    47aa:	   |  |   pea 18683 <PutChar+0x911>
    47b0:	   |  |   jsr 1729e <KPrintF>
    47b6:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    47b8:	   |  \-> move.l #1112,d0
    47be:	   |      add.l sp,d0
    47c0:	   |      addi.l #-1102,d0
    47c6:	   |      move.l d0,1030(sp)
    47ca:	   |      moveq #-2,d0
    47cc:	   |      move.l d0,1026(sp)
    47d0:	   |      move.l 1c9cc <DOSBase>,d0
    47d6:	   |      movea.l d0,a6
    47d8:	   |      move.l 1030(sp),d1
    47dc:	   |      move.l 1026(sp),d2
    47e0:	   |      jsr -84(a6)
    47e4:	   |      move.l d0,1022(sp)
    47e8:	   |      move.l 1022(sp),d0
    47ec:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    47f0:	   |      move.l 1042(sp),1018(sp)
    47f6:	   |      move.l 1c9cc <DOSBase>,d0
    47fc:	   |      movea.l d0,a6
    47fe:	   |      move.l 1018(sp),d1
    4802:	   |      jsr -126(a6)
    4806:	   |      move.l d0,1014(sp)
    480a:	   |      move.l 1014(sp),d0
    480e:	   |  /-- bne.s 4824 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    4810:	   |  |   moveq #10,d0
    4812:	   |  |   add.l sp,d0
    4814:	   |  |   move.l d0,-(sp)
    4816:	   |  |   pea 186af <PutChar+0x93d>
    481c:	   |  |   jsr 1729e <KPrintF>
    4822:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4824:	   |  \-> move.l 1c92c <gamePath>,d0
    482a:	   +----- beq.s 4844 <setGameFilePath+0x234>
    482c:	   |      move.l 1c92c <gamePath>,1010(sp)
    4834:	   |      move.l 1c9c4 <SysBase>,d0
    483a:	   |      movea.l d0,a6
    483c:	   |      movea.l 1010(sp),a1
    4840:	   |      jsr -690(a6)
}
    4844:	   \----> move.l (sp)+,d2
    4846:	          movea.l (sp)+,a6
    4848:	          lea 1104(sp),sp
    484c:	          rts

0000484e <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    484e:	/-------> lea -16(sp),sp
    4852:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4854:	|         move.l 24(sp),-(sp)
    4858:	|         jsr 697c <pauseFunction>
    485e:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    4860:	|     /-- bra.s 4872 <abortFunction+0x24>
    4862:	|  /--|-> moveq #24,d0
    4864:	|  |  |   add.l 24(sp),d0
    4868:	|  |  |   move.l d0,-(sp)
    486a:	|  |  |   jsr 15208 <trimStack>
    4870:	|  |  |   addq.l #4,sp
    4872:	|  |  \-> movea.l 24(sp),a0
    4876:	|  |      move.l 24(a0),d0
    487a:	|  \----- bne.s 4862 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    487c:	|         movea.l 24(sp),a0
    4880:	|         move.l 4(a0),12(sp)
    4886:	|         move.l 1c9c4 <SysBase>,d0
    488c:	|         movea.l d0,a6
    488e:	|         movea.l 12(sp),a1
    4892:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4896:	|         clr.l 16(sp)
    489a:	|     /-- bra.s 48ba <abortFunction+0x6c>
    489c:	|  /--|-> movea.l 24(sp),a0
    48a0:	|  |  |   move.l 20(a0),d1
    48a4:	|  |  |   move.l 16(sp),d0
    48a8:	|  |  |   lsl.l #3,d0
    48aa:	|  |  |   add.l d1,d0
    48ac:	|  |  |   move.l d0,-(sp)
    48ae:	|  |  |   jsr 14ad2 <unlinkVar>
    48b4:	|  |  |   addq.l #4,sp
    48b6:	|  |  |   addq.l #1,16(sp)
    48ba:	|  |  \-> movea.l 24(sp),a0
    48be:	|  |      move.l 8(a0),d0
    48c2:	|  |      cmp.l 16(sp),d0
    48c6:	|  \----- bgt.s 489c <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    48c8:	|         movea.l 24(sp),a0
    48cc:	|         move.l 20(a0),8(sp)
    48d2:	|         move.l 1c9c4 <SysBase>,d0
    48d8:	|         movea.l d0,a6
    48da:	|         movea.l 8(sp),a1
    48de:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    48e2:	|         moveq #28,d0
    48e4:	|         add.l 24(sp),d0
    48e8:	|         move.l d0,-(sp)
    48ea:	|         jsr 14ad2 <unlinkVar>
    48f0:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    48f2:	|         movea.l 24(sp),a0
    48f6:	|         move.l 40(a0),d0
    48fa:	|     /-- beq.s 490c <abortFunction+0xbe>
    48fc:	|     |   movea.l 24(sp),a0
    4900:	|     |   move.l 40(a0),d0
    4904:	|     |   move.l d0,-(sp)
    4906:	\-----|-- jsr 484e <abortFunction>(pc)
    490a:	      |   addq.l #4,sp
	FreeVec(fun);
    490c:	      \-> move.l 24(sp),4(sp)
    4912:	          move.l 1c9c4 <SysBase>,d0
    4918:	          movea.l d0,a6
    491a:	          movea.l 4(sp),a1
    491e:	          jsr -690(a6)
	fun = NULL;
    4922:	          clr.l 24(sp)
}
    4926:	          nop
    4928:	          movea.l (sp)+,a6
    492a:	          lea 16(sp),sp
    492e:	          rts

00004930 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    4930:	          subq.l #8,sp
	int n = 0;
    4932:	          clr.l 4(sp)
	*killedMyself = FALSE;
    4936:	          movea.l 20(sp),a0
    493a:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    493c:	          move.l 1c95c <allRunningFunctions>,(sp)
	while (fun) {
    4942:	   /----- bra.s 4970 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    4944:	/--|----> movea.l (sp),a0
    4946:	|  |      move.l (a0),d0
    4948:	|  |      cmp.l 12(sp),d0
    494c:	|  |  /-- bne.s 496a <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    494e:	|  |  |   movea.l (sp),a0
    4950:	|  |  |   move.w #1,54(a0)
			n++;
    4956:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    495a:	|  |  |   move.l (sp),d0
    495c:	|  |  |   cmp.l 16(sp),d0
    4960:	|  |  +-- bne.s 496a <cancelAFunction+0x3a>
    4962:	|  |  |   movea.l 20(sp),a0
    4966:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    496a:	|  |  \-> movea.l (sp),a0
    496c:	|  |      move.l 44(a0),(sp)
	while (fun) {
    4970:	|  \----> tst.l (sp)
    4972:	\-------- bne.s 4944 <cancelAFunction+0x14>
	}
	return n;
    4974:	          move.l 4(sp),d0
}
    4978:	          addq.l #8,sp
    497a:	          rts

0000497c <completeTimers>:


void completeTimers () {
    497c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    497e:	          move.l 1c95c <allRunningFunctions>,(sp)

	while (thisFunction) {
    4984:	   /----- bra.s 499a <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    4986:	/--|----> movea.l (sp),a0
    4988:	|  |      move.b 56(a0),d0
    498c:	|  |  /-- bne.s 4994 <completeTimers+0x18>
    498e:	|  |  |   movea.l (sp),a0
    4990:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    4994:	|  |  \-> movea.l (sp),a0
    4996:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    499a:	|  \----> tst.l (sp)
    499c:	\-------- bne.s 4986 <completeTimers+0xa>
	}
}
    499e:	          nop
    49a0:	          nop
    49a2:	          addq.l #4,sp
    49a4:	          rts

000049a6 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    49a6:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    49aa:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    49b0:	                                                             movea.l 80(sp),a0
    49b4:	                                                             move.w 54(a0),d0
    49b8:	/----------------------------------------------------------- beq.w 5846 <continueFunction+0xea0>
		abortFunction (fun);
    49bc:	|                                                            move.l 80(sp),-(sp)
    49c0:	|                                                            jsr 484e <abortFunction>
    49c6:	|                                                            addq.l #4,sp
		return TRUE;
    49c8:	|                                                            moveq #1,d0
    49ca:	|  /-------------------------------------------------------- bra.w 5850 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    49ce:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    49d4:	|  |  |                                                      movea.l 80(sp),a0
    49d8:	|  |  |                                                      move.l 4(a0),d1
    49dc:	|  |  |                                                      movea.l 80(sp),a0
    49e0:	|  |  |                                                      move.l 36(a0),d0
    49e4:	|  |  |                                                      lsl.l #3,d0
    49e6:	|  |  |                                                      movea.l d1,a0
    49e8:	|  |  |                                                      adda.l d0,a0
    49ea:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    49f0:	|  |  |                                                      movea.l 80(sp),a0
    49f4:	|  |  |                                                      move.l 4(a0),d1
    49f8:	|  |  |                                                      movea.l 80(sp),a0
    49fc:	|  |  |                                                      move.l 36(a0),d0
    4a00:	|  |  |                                                      lsl.l #3,d0
    4a02:	|  |  |                                                      movea.l d1,a0
    4a04:	|  |  |                                                      adda.l d0,a0
    4a06:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    4a0a:	|  |  |                                                      moveq #41,d0
    4a0c:	|  |  |                                                      cmp.l 64(sp),d0
    4a10:	|  |  |  /-------------------------------------------------- bcs.w 57fa <continueFunction+0xe54>
    4a14:	|  |  |  |                                                   move.l 64(sp),d0
    4a18:	|  |  |  |                                                   add.l d0,d0
    4a1a:	|  |  |  |                                                   movea.l d0,a0
    4a1c:	|  |  |  |                                                   adda.l #18984,a0
    4a22:	|  |  |  |                                                   move.w (a0),d0
    4a24:	|  |  |  |                                                   jmp (4a28 <continueFunction+0x82>,pc,d0.w)
    4a28:	|  |  |  |                                                   bset d6,(a2)
    4a2a:	|  |  |  |                                                   ori.w #2670,(a4)
    4a2e:	|  |  |  |                                                   eori.w #2416,d6
    4a32:	|  |  |  |                                                   bchg d4,d2
    4a34:	|  |  |  |                                                   bclr d4,(a4)+
    4a36:	|  |  |  |                                                   andi.l #181013194,d4
    4a3c:	|  |  |  |                                                   .short 0x0aca
    4a3e:	|  |  |  |                                                   .short 0x0aca
    4a40:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    4a48:	|  |  |  |                                                   .short 0x0aca
    4a4a:	|  |  |  |                                                   andi.w #906,-(a4)
    4a4e:	|  |  |  |                                                   bchg d1,196(a2)
    4a52:	|  |  |  |                                                   bset d1,580(a4)
    4a56:	|  |  |  |                                                   bclr d1,2576(a2)
    4a5a:	|  |  |  |                                                   andi.b #-56,2762(a2)
    4a60:	|  |  |  |                                                   .short 0x0aca
    4a62:	|  |  |  |                                                   eori.l #63572682,d0
    4a68:	|  |  |  |                                                   .short 0x0aca
    4a6a:	|  |  |  |                                                   bchg d3,-(a2)
    4a6c:	|  |  |  |                                                   bchg #-36,(a2)
    4a70:	|  |  |  |                                                   .short 0x08cc
    4a72:	|  |  |  |                                                   addi.b #14,1038(a0)
    4a78:	|  |  |  |                                                   .short 0x040e
    4a7a:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    4a7e:	|  |  |  |                                                   ori.w #8232,(a0)
    4a82:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    4a88:	|  |  |  |                                                   ori.w #12136,(a0)
    4a8c:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    4a92:	|  |  |  |                                                   ori.w #12328,(a0)
    4a96:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    4a9c:	|  |  |  |                                                   add.l 44(sp),d1
    4aa0:	|  |  |  |                                                   moveq #28,d0
    4aa2:	|  |  |  |                                                   add.l 80(sp),d0
    4aa6:	|  |  |  |                                                   move.l d1,-(sp)
    4aa8:	|  |  |  |                                                   move.l d0,-(sp)
    4aaa:	|  |  |  |                                                   jsr 14d3e <copyVariable>
    4ab0:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    4ab2:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4ab6:	|  |  |  |                                                   jsr 5856 <finishFunction>
    4abc:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    4abe:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    4ac4:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4ac8:	|  |  |  |                                                   jsr 69be <restartFunction>
    4ace:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    4ad0:	|  |  |  |  /----------------------------------------------- bra.w 582e <continueFunction+0xe88>
				finishFunction (fun);
    4ad4:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    4ad8:	|  |  |  |  |                                                jsr 5856 <finishFunction>
    4ade:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4ae0:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    4ae4:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    4ae8:	|  |  |  |  +----------------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    4aec:	|  |  |  |  |                                                movea.l 80(sp),a0
    4af0:	|  |  |  |  |                                                move.l 28(a0),d0
    4af4:	|  |  |  |  |                                                moveq #2,d1
    4af6:	|  |  |  |  |                                                cmp.l d0,d1
    4af8:	|  |  |  |  |                                            /-- beq.s 4b04 <continueFunction+0x15e>
    4afa:	|  |  |  |  |                                            |   moveq #4,d1
    4afc:	|  |  |  |  |                                            |   cmp.l d0,d1
    4afe:	|  |  |  |  |                                         /--|-- beq.s 4b52 <continueFunction+0x1ac>
    4b00:	|  |  |  |  |                                /--------|--|-- bra.w 4c3a <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    4b04:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    4b08:	|  |  |  |  |                                |        |      jsr 697c <pauseFunction>
    4b0e:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    4b10:	|  |  |  |  |                                |        |      moveq #24,d0
    4b12:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    4b16:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    4b1a:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    4b1e:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    4b22:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    4b24:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    4b28:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    4b2c:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    4b2e:	|  |  |  |  |                                |        |      jsr 6c0a <startNewFunctionNum>
    4b34:	|  |  |  |  |                                |        |      lea 20(sp),sp
    4b38:	|  |  |  |  |                                |        |      tst.l d0
    4b3a:	|  |  |  |  |                                |        |  /-- bne.s 4b42 <continueFunction+0x19c>
    4b3c:	|  |  |  |  |                                |        |  |   clr.w d0
    4b3e:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 5850 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    4b42:	|  |  |  |  |                                |        |  \-> move.l 1c95c <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4b4a:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    4b4e:	|  |  |  |  |                                |  /-----|----- bra.w 4c4e <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    4b52:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    4b56:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    4b5a:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    4b5e:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4b62:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    4b64:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    4b66:	|  |  |  |  |                                |  |            jsr 13566 <callBuiltIn>
    4b6c:	|  |  |  |  |                                |  |            lea 12(sp),sp
    4b70:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    4b74:	|  |  |  |  |                                |  |            moveq #5,d0
    4b76:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    4b7a:	|  |  |  |  |                                |  |  /-------- bcs.w 4c36 <continueFunction+0x290>
    4b7e:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4b82:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4b84:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    4b86:	|  |  |  |  |                                |  |  |         adda.l #19346,a0
    4b8c:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4b8e:	|  |  |  |  |                                |  |  |         jmp (4b92 <continueFunction+0x1ec>,pc,d0.w)
    4b92:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    4b98:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4b9c:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4ba2:	|  |  |  |  |                                |  |  |         or.l d3,(-71,sp,d4.l:8)
    4ba6:	|  |  |  |  |                                |  |  |         ori.b #-98,d1
    4baa:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4bac:	|  |  |  |  |                                |  |  |         clr.w d0
    4bae:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 5850 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4bb2:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    4bb6:	|  |  |  |  |                                |  |  |         jsr 697c <pauseFunction>
    4bbc:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4bbe:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4bc2:	|  |  |  |  |                                |  |  |  /----- bra.s 4c38 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4bc4:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    4bc8:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4bcc:	|  |  |  |  |                                |  |  |  +----- bra.s 4c38 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4bce:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4bd2:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    4bd8:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4bda:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4bde:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4be2:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4be6:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4be8:	|  |  |  |  |                                |  |  |  |      jsr 15176 <setVariable>
    4bee:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4bf2:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    4bf6:	|  |  |  |  |                                |  |  |  |      jsr 697c <pauseFunction>
    4bfc:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    4bfe:	|  |  |  |  |                                |  |  |  |      move.l 1c994 <noStack>,d1
    4c04:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4c08:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4c0a:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4c0c:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    4c10:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4c12:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4c14:	|  |  |  |  |                                |  |  |  |      jsr 6c0a <startNewFunctionNum>
    4c1a:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    4c1e:	|  |  |  |  |                                |  |  |  |      tst.l d0
    4c20:	|  |  |  |  |                                |  |  |  |  /-- bne.s 4c28 <continueFunction+0x282>
    4c22:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    4c24:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 5850 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    4c28:	|  |  |  |  |                                |  |  |  |  \-> move.l 1c95c <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    4c30:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    4c34:	|  |  |  |  |                                |  |  |  +----- bra.s 4c38 <continueFunction+0x292>

						default:
						break;
    4c36:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    4c38:	|  |  |  |  |                                |  +-----\----X bra.s 4c4e <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    4c3a:	|  |  |  |  |                                \--|----------> pea 18802 <PutChar+0xa90>
    4c40:	|  |  |  |  |                                   |            jsr 1729e <KPrintF>
    4c46:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    4c48:	|  |  |  |  |                                   |            clr.w d0
    4c4a:	|  +--|--|--|-----------------------------------|----------- bra.w 5850 <continueFunction+0xeaa>
			}
			break;
    4c4e:	|  |  |  |  +-----------------------------------\----------X bra.w 582e <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    4c52:	|  |  |  |  |                                                moveq #28,d0
    4c54:	|  |  |  |  |                                                add.l 80(sp),d0
    4c58:	|  |  |  |  |                                                clr.l -(sp)
    4c5a:	|  |  |  |  |                                                clr.l -(sp)
    4c5c:	|  |  |  |  |                                                move.l d0,-(sp)
    4c5e:	|  |  |  |  |                                                jsr 15176 <setVariable>
    4c64:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4c68:	|  |  |  |  +----------------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4c6c:	|  |  |  |  |                                                move.l 68(sp),d1
    4c70:	|  |  |  |  |                                                moveq #28,d0
    4c72:	|  |  |  |  |                                                add.l 80(sp),d0
    4c76:	|  |  |  |  |                                                move.l d1,-(sp)
    4c78:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4c7c:	|  |  |  |  |                                                move.l d0,-(sp)
    4c7e:	|  |  |  |  |                                                jsr 15176 <setVariable>
    4c84:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4c88:	|  |  |  |  +----------------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4c8c:	|  |  |  |  |                                                move.l 68(sp),d1
    4c90:	|  |  |  |  |                                                moveq #28,d0
    4c92:	|  |  |  |  |                                                add.l 80(sp),d0
    4c96:	|  |  |  |  |                                                move.l d1,-(sp)
    4c98:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4c9c:	|  |  |  |  |                                                move.l d0,-(sp)
    4c9e:	|  |  |  |  |                                                jsr 15176 <setVariable>
    4ca4:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4ca8:	|  |  |  |  +----------------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4cac:	|  |  |  |  |                                                moveq #28,d0
    4cae:	|  |  |  |  |                                                add.l 80(sp),d0
    4cb2:	|  |  |  |  |                                                movea.l 80(sp),a0
    4cb6:	|  |  |  |  |                                                movea.l 20(a0),a0
    4cba:	|  |  |  |  |                                                move.l 68(sp),d1
    4cbe:	|  |  |  |  |                                                lsl.l #3,d1
    4cc0:	|  |  |  |  |                                                add.l a0,d1
    4cc2:	|  |  |  |  |                                                move.l d0,-(sp)
    4cc4:	|  |  |  |  |                                                move.l d1,-(sp)
    4cc6:	|  |  |  |  |                                                jsr 14d3e <copyVariable>
    4ccc:	|  |  |  |  |                                                addq.l #8,sp
    4cce:	|  |  |  |  |                                                tst.w d0
    4cd0:	|  |  |  |  |  /-------------------------------------------- bne.w 580c <continueFunction+0xe66>
    4cd4:	|  |  |  |  |  |                                             clr.w d0
    4cd6:	|  +--|--|--|--|-------------------------------------------- bra.w 5850 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4cda:	|  |  |  |  |  |                                             moveq #28,d0
    4cdc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4ce0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ce2:	|  |  |  |  |  |                                             jsr 14dc4 <getBoolean>
    4ce8:	|  |  |  |  |  |                                             addq.l #4,sp
    4cea:	|  |  |  |  |  |                                             tst.w d0
    4cec:	|  |  |  |  |  |                                      /----- beq.s 4d08 <continueFunction+0x362>
    4cee:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4cf2:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4cf6:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4cf8:	|  |  |  |  |  |                                      |      jsr 14dc4 <getBoolean>
    4cfe:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4d00:	|  |  |  |  |  |                                      |      tst.w d0
    4d02:	|  |  |  |  |  |                                      +----- beq.s 4d08 <continueFunction+0x362>
    4d04:	|  |  |  |  |  |                                      |      moveq #1,d0
    4d06:	|  |  |  |  |  |                                      |  /-- bra.s 4d0a <continueFunction+0x364>
    4d08:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4d0a:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4d0c:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4d10:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d12:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4d16:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d18:	|  |  |  |  |  |                                             jsr 15176 <setVariable>
    4d1e:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4d22:	|  |  |  |  |  |                                             moveq #24,d0
    4d24:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d28:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d2a:	|  |  |  |  |  |                                             jsr 15208 <trimStack>
    4d30:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4d32:	|  |  |  |  +--|-------------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    4d36:	|  |  |  |  |  |                                             moveq #28,d0
    4d38:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d3c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d3e:	|  |  |  |  |  |                                             jsr 14dc4 <getBoolean>
    4d44:	|  |  |  |  |  |                                             addq.l #4,sp
    4d46:	|  |  |  |  |  |                                             tst.w d0
    4d48:	|  |  |  |  |  |                                         /-- bne.s 4d60 <continueFunction+0x3ba>
    4d4a:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    4d4e:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    4d52:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    4d54:	|  |  |  |  |  |                                         |   jsr 14dc4 <getBoolean>
    4d5a:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4d5c:	|  |  |  |  |  |                                         |   tst.w d0
    4d5e:	|  |  |  |  |  |                                      /--|-- beq.s 4d64 <continueFunction+0x3be>
    4d60:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4d62:	|  |  |  |  |  |                                      |  /-- bra.s 4d66 <continueFunction+0x3c0>
    4d64:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4d66:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4d68:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4d6c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d6e:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4d72:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d74:	|  |  |  |  |  |                                             jsr 15176 <setVariable>
    4d7a:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4d7e:	|  |  |  |  |  |                                             moveq #24,d0
    4d80:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d84:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d86:	|  |  |  |  |  |                                             jsr 15208 <trimStack>
    4d8c:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4d8e:	|  |  |  |  +--|-------------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4d92:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4d96:	|  |  |  |  |  |                                             moveq #28,d0
    4d98:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d9c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d9e:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4da2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4da4:	|  |  |  |  |  |                                             jsr 15176 <setVariable>
    4daa:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4dae:	|  |  |  |  +--|-------------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4db2:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4db6:	|  |  |  |  |  |                                             moveq #28,d0
    4db8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4dbc:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4dbe:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4dc2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4dc4:	|  |  |  |  |  |                                             jsr 15176 <setVariable>
    4dca:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4dce:	|  |  |  |  +--|-------------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4dd2:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4dd6:	|  |  |  |  |  |                                             moveq #28,d0
    4dd8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4ddc:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4dde:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4de2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4de4:	|  |  |  |  |  |                                             jsr 15176 <setVariable>
    4dea:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4dee:	|  |  |  |  +--|-------------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4df2:	|  |  |  |  |  |                                             move.l 1c924 <dialogValue>,d0
    4df8:	|  |  |  |  |  |                                             moveq #1,d1
    4dfa:	|  |  |  |  |  |                                             cmp.l d0,d1
    4dfc:	|  |  |  |  |  |  /----------------------------------------- beq.w 5810 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4e00:	|  |  |  |  |  |  |                                          pea 18817 <PutChar+0xaa5>
    4e06:	|  |  |  |  |  |  |                                          jsr 1729e <KPrintF>
    4e0c:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4e0e:	|  |  |  |  |  |  |                                          clr.w d0
    4e10:	|  +--|--|--|--|--|----------------------------------------- bra.w 5850 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4e14:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4e18:	|  |  |  |  |  |  |                                          moveq #28,d0
    4e1a:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4e1e:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4e20:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4e22:	|  |  |  |  |  |  |                                          jsr 14908 <loadStringToVar>
    4e28:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4e2a:	|  |  |  |  |  |  |                                          tst.w d0
    4e2c:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 5814 <continueFunction+0xe6e>
					return FALSE;
    4e30:	|  |  |  |  |  |  |  |                                       clr.w d0
    4e32:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5850 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    4e36:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4e3a:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4e3e:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4e40:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    4e42:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4e44:	|  |  |  |  |  |  |  |                                /----- beq.s 4ea2 <continueFunction+0x4fc>
    4e46:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    4e48:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    4e4a:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 5036 <continueFunction+0x690>
    4e4e:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    4e50:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4e5c <continueFunction+0x4b6>
    4e52:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    4e54:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    4e56:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4ea2 <continueFunction+0x4fc>
    4e58:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5036 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4e5c:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4e5e:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4e62:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4e8e <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    4e64:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    4e66:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4e6a:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4e6c:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4e6e:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4e70:	|  |  |  |  |  |  |  |              |                 |  |   jsr 15176 <setVariable>
    4e76:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4e7a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4e7c:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4e80:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4e82:	|  |  |  |  |  |  |  |              |                 |  |   jsr 15208 <trimStack>
    4e88:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4e8a:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 504c <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4e8e:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 18858 <PutChar+0xae6>
    4e94:	|  |  |  |  |  |  |  |              |  |              |      jsr 1729e <KPrintF>
    4e9a:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4e9c:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4e9e:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 5850 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4ea2:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    4ea6:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4eaa:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4eae:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4eb0:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4ec6 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4eb2:	|  |  |  |  |  |  |  |              |  |                 |   pea 18894 <PutChar+0xb22>
    4eb8:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1729e <KPrintF>
    4ebe:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4ec0:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4ec2:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5850 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4ec6:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4ec8:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4ecc:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4ece:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4ed2:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4ed6:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4ed8:	|  |  |  |  |  |  |  |              |  |                     jsr 14884 <getValueType>
    4ede:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4ee2:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4ee4:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4eec <continueFunction+0x546>
    4ee6:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4ee8:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5850 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4eec:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4ef0:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4ef4:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4ef6:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4ef8:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4efa:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4f1c <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4efc:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4f00:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4f02:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4f06:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4f0a:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4f0e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4f10:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4f12:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1450e <fastArrayGetByIndex>
    4f18:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4f1a:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4f3c <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4f1c:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4f20:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4f22:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4f26:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4f2a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4f2e:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4f30:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4f32:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4f34:	|  |  |  |  |  |  |  |              |  |              |      jsr 15198 <stackGetByIndex>
    4f3a:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4f3c:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4f40:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4f42:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4f46:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4f48:	|  |  |  |  |  |  |  |              |  |                     jsr 15208 <trimStack>
    4f4e:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4f50:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4f54:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4f70 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4f56:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4f58:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4f5c:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4f5e:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4f60:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4f62:	|  |  |  |  |  |  |  |              |  |                 |   jsr 15176 <setVariable>
    4f68:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4f6c:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 504a <continueFunction+0x6a4>
    4f70:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4f72:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4f76:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 4f84 <continueFunction+0x5de>
    4f78:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4f7a:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4f7e:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4fce <continueFunction+0x628>
    4f80:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 5016 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4f84:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    4f88:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4f8c:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4f90:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4f92:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14884 <getValueType>
    4f98:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4f9c:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4f9e:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 4fa6 <continueFunction+0x600>
    4fa0:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4fa2:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 5030 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4fa6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4fa8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4faa:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4fae:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4fb0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4fb4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4fb6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 15176 <setVariable>
    4fbc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4fc0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4fc2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4fc4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4fc8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4fcc:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 5034 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4fce:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4fd2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4fd6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4fda:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4fdc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14884 <getValueType>
    4fe2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4fe6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4fe8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4fee <continueFunction+0x648>
    4fea:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4fec:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5030 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4fee:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4ff0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4ff2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4ff6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4ff8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4ffc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4ffe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 15176 <setVariable>
    5004:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5008:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    500a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    500c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    5010:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5014:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5034 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5016:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    5018:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    501c:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    501e:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5022:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14d3e <copyVariable>
    5028:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    502a:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    502c:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 504a <continueFunction+0x6a4>
    502e:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5030:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 5850 <continueFunction+0xeaa>
				break;
    5034:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 504a <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5036:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 188b2 <PutChar+0xb40>
    503c:	|  |  |  |  |  |  |  |                 |  |                  jsr 1729e <KPrintF>
    5042:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5044:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5046:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 5850 <continueFunction+0xeaa>
				break;
    504a:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    504c:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 582e <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5050:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5054:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5058:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    505a:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    505c:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    505e:	|  |  |  |  |  |  |  |                                   /-- beq.s 506c <continueFunction+0x6c6>
    5060:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5062:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5064:	|  |  |  |  |  |  |  |                                /--|-- beq.w 5118 <continueFunction+0x772>
    5068:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 5176 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    506c:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    5070:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5074:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5078:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    507a:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 5090 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    507c:	|  |  |  |  |  |  |  |                             |  |  |   pea 18894 <PutChar+0xb22>
    5082:	|  |  |  |  |  |  |  |                             |  |  |   jsr 1729e <KPrintF>
    5088:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    508a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    508c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5850 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5090:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    5092:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5096:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5098:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    509c:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    50a0:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    50a2:	|  |  |  |  |  |  |  |                             |  |      jsr 14884 <getValueType>
    50a8:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    50ac:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    50ae:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 50b6 <continueFunction+0x710>
    50b0:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    50b2:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5850 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    50b6:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    50ba:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    50be:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    50c2:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    50c4:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    50c8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    50ca:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    50ce:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    50d2:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    50d6:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    50d8:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    50da:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    50dc:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    50de:	|  |  |  |  |  |  |  |                             |  |      jsr 6bc6 <stackSetByIndex>
    50e4:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    50e8:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    50ea:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 50f2 <continueFunction+0x74c>
						return FALSE;
    50ec:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    50ee:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5850 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    50f2:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    50f4:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    50f8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    50fa:	|  |  |  |  |  |  |  |                             |  |      jsr 15208 <trimStack>
    5100:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5102:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5104:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5108:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    510a:	|  |  |  |  |  |  |  |                             |  |      jsr 15208 <trimStack>
    5110:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5112:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5114:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 582e <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5118:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    511a:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    511e:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5120:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5124:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5128:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    512a:	|  |  |  |  |  |  |  |                             |         jsr 14884 <getValueType>
    5130:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5134:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5136:	|  |  |  |  |  |  |  |                             |     /-- bne.s 513e <continueFunction+0x798>
    5138:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    513a:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 5850 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    513e:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    5142:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5144:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5148:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    514c:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5150:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5152:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5154:	|  |  |  |  |  |  |  |                             |         jsr 1450e <fastArrayGetByIndex>
    515a:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    515c:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5160:	|  |  |  |  |  |  |  |                             |     /-- bne.s 5170 <continueFunction+0x7ca>
    5162:	|  |  |  |  |  |  |  |                             |     |   pea 188d6 <PutChar+0xb64>
    5168:	|  |  |  |  |  |  |  |                             |     |   jsr 1729e <KPrintF>
    516e:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5170:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    5172:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 5850 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5176:	|  |  |  |  |  |  |  |                             \-------> pea 188b2 <PutChar+0xb40>
    517c:	|  |  |  |  |  |  |  |                                       jsr 1729e <KPrintF>
    5182:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5184:	|  |  |  |  |  |  |  |                                       clr.w d0
    5186:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5850 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    518a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    518e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5192:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5196:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5198:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    519a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    519c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51a0:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    51a4:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    51a6:	|  |  |  |  |  |  |  |                                       jsr 14884 <getValueType>
    51ac:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    51b0:	|  |  |  |  |  |  |  |                                       tst.w d0
    51b2:	|  |  |  |  |  |  |  |                                   /-- bne.s 51ba <continueFunction+0x814>
    51b4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    51b6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5850 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    51ba:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    51be:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    51c0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    51c4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51c6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51ca:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51cc:	|  |  |  |  |  |  |  |                                       jsr 15176 <setVariable>
    51d2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    51d6:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    51da:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    51dc:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    51de:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    51e2:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    51e6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51ea:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51ec:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    51ee:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51f0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51f4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51f6:	|  |  |  |  |  |  |  |                                       jsr 15176 <setVariable>
    51fc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5200:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5204:	|  |  |  |  |  |  |  |                                       move.l 1c972 <globalVars>,d1
    520a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    520e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5210:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5212:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5214:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5218:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    521c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    521e:	|  |  |  |  |  |  |  |                                       jsr 14884 <getValueType>
    5224:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5228:	|  |  |  |  |  |  |  |                                       tst.w d0
    522a:	|  |  |  |  |  |  |  |                                   /-- bne.s 5232 <continueFunction+0x88c>
    522c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    522e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5850 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5232:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    5236:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5238:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    523c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    523e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5242:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5244:	|  |  |  |  |  |  |  |                                       jsr 15176 <setVariable>
    524a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    524e:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5252:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5254:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5256:	|  |  |  |  |  |  |  |                                       movea.l 1c972 <globalVars>,a0
    525c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5260:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5262:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5264:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5266:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    526a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    526c:	|  |  |  |  |  |  |  |                                       jsr 15176 <setVariable>
    5272:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5276:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    527a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    527e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5282:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5286:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5288:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    528a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    528c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5290:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5294:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5296:	|  |  |  |  |  |  |  |                                       jsr 14884 <getValueType>
    529c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    52a0:	|  |  |  |  |  |  |  |                                       tst.w d0
    52a2:	|  |  |  |  |  |  |  |                                   /-- bne.s 52aa <continueFunction+0x904>
    52a4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    52a6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5850 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    52aa:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    52ae:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    52b0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    52b4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    52b6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    52ba:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    52bc:	|  |  |  |  |  |  |  |                                       jsr 15176 <setVariable>
    52c2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    52c6:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    52ca:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    52cc:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    52ce:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    52d2:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    52d6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    52da:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    52dc:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    52de:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    52e0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    52e4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    52e6:	|  |  |  |  |  |  |  |                                       jsr 15176 <setVariable>
    52ec:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    52f0:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    52f4:	|  |  |  |  |  |  |  |                                       move.l 1c972 <globalVars>,d1
    52fa:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    52fe:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5300:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5302:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5304:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5308:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    530c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    530e:	|  |  |  |  |  |  |  |                                       jsr 14884 <getValueType>
    5314:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5318:	|  |  |  |  |  |  |  |                                       tst.w d0
    531a:	|  |  |  |  |  |  |  |                                   /-- bne.s 5322 <continueFunction+0x97c>
    531c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    531e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5850 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5322:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    5326:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5328:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    532c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    532e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5332:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5334:	|  |  |  |  |  |  |  |                                       jsr 15176 <setVariable>
    533a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    533e:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5342:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5344:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5346:	|  |  |  |  |  |  |  |                                       movea.l 1c972 <globalVars>,a0
    534c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5350:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5352:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5354:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5356:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    535a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    535c:	|  |  |  |  |  |  |  |                                       jsr 15176 <setVariable>
    5362:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5366:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    536a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    536e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5372:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5376:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5378:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    537a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    537c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5380:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5382:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5384:	|  |  |  |  |  |  |  |                                       jsr 14d3e <copyVariable>
    538a:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    538c:	|  |  |  |  |  |  |  |                                       tst.w d0
    538e:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 5818 <continueFunction+0xe72>
    5392:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5394:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 5850 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5398:	|  |  |  |  |  |  |  |  |                                    move.l 1c972 <globalVars>,d1
    539e:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    53a2:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    53a4:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    53a6:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    53a8:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    53ac:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    53ae:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    53b0:	|  |  |  |  |  |  |  |  |                                    jsr 14d3e <copyVariable>
    53b6:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    53b8:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    53ba:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 581c <continueFunction+0xe76>
    53be:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    53c0:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 5850 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    53c4:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    53c6:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    53ca:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1c972 <globalVars>,a0
    53d0:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    53d4:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    53d6:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    53d8:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    53da:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    53dc:	|  |  |  |  |  |  |  |  |  |                                 jsr 14d3e <copyVariable>
    53e2:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    53e4:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    53e6:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 5820 <continueFunction+0xe7a>
    53ea:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    53ec:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 5850 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    53f0:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    53f2:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    53f6:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    53f8:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    53fc:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    53fe:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5400:	|  |  |  |  |  |  |  |  |  |  |                              jsr 140c0 <addVarToStack>
    5406:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5408:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    540a:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 5824 <continueFunction+0xe7e>
    540e:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5410:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 5850 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5414:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5416:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    541a:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    541c:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5420:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5422:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5424:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 14146 <addVarToStackQuick>
    542a:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    542c:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    542e:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 5828 <continueFunction+0xe82>
    5432:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5434:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 5850 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5438:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    543a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    543e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5440:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14dc4 <getBoolean>
    5446:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5448:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    544a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    544c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    544e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5450:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5452:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5454:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5458:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    545a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    545e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5460:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15176 <setVariable>
    5466:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    546a:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    546e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5470:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5474:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5476:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14dc4 <getBoolean>
    547c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    547e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5480:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 582c <continueFunction+0xe86>
				advanceNow = FALSE;
    5484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    548c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5492:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 582c <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    549a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    549e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    54a4:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 582e <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    54a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    54aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    54ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    54b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    54b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    54b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    54ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14884 <getValueType>
    54c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    54c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    54c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 54ce <continueFunction+0xb28>
    54c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    54ca:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 5850 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    54ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    54d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    54d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    54d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    54d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    54dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    54de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    54e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    54e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 15176 <setVariable>
    54ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    54ee:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 582e <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    54f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    54f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    54fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 57e4 <continueFunction+0xe3e>
    54fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    5500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 5580 <continueFunction+0xbda>
    5506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    550c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 55ca <continueFunction+0xc24>
    5510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 5524 <continueFunction+0xb7e>
    5518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    551a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    551e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 5552 <continueFunction+0xbac>
    5520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 55ca <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    5526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    552a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    552e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 141ba <addVariablesInSecond>
    553c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    553e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    5540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 15208 <trimStack>
    554c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    554e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 57f8 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    5554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    555c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    5560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14278 <compareVariablesInSecond>
    556a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    556c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    556e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 15208 <trimStack>
    557a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    557c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 57f8 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    5582:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    558a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    558e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14278 <compareVariablesInSecond>
    5598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    559a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    559c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    55a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    55a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 15208 <trimStack>
    55a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    55aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    55ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    55b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    55b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    55b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    55b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    55be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    55c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    55c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 57f8 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    55ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    55ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    55d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    55d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    55d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    55dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    55de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14884 <getValueType>
    55e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    55e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    55ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 55f2 <continueFunction+0xc4c>
    55ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    55ee:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5850 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    55f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    55f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    55f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    55fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    55fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14884 <getValueType>
    560a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    560e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 5618 <continueFunction+0xc72>
    5612:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5614:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5850 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    561a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    561e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5620:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15208 <trimStack>
    5626:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    5628:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    562a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    562e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    5630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5632:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 57f6 <continueFunction+0xe50>
    5636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    563a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #22086,a0
    5640:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5646 <continueFunction+0xca0>,pc,d0.w)
    5646:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    564a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    564c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    565e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5666:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    566e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5676:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    567a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    567e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17c5c <__mulsi3>
    5688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    568a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    568c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    568e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5692:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5694:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5698:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    569a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15176 <setVariable>
    56a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 57f8 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    56a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    56ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    56b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    56b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15176 <setVariable>
    56c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 57f8 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    56ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    56d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    56d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17d08 <__modsi3>
    56e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    56e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    56e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15176 <setVariable>
    56f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 57f8 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    5700:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5704:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5708:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    570a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    570c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17cda <__divsi3>
    5712:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5714:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5716:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5718:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    571c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    571e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5722:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5724:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15176 <setVariable>
    572a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    572e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 57f8 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5732:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5736:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    573a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    573c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    573e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5740:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5742:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5744:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5746:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    574a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    574c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5750:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5752:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15176 <setVariable>
    5758:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    575c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 57f8 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    5760:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5764:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5768:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    576a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    576c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    576e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5770:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5772:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5774:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5778:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    577a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    577e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5780:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15176 <setVariable>
    5786:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    578a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 57f8 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    578c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5790:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5794:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5796:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5798:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    579a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    579c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    579e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    57a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    57a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    57a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    57aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    57ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15176 <setVariable>
    57b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    57b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 57f8 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    57b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    57bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    57c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    57c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    57c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    57c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    57c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    57ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    57cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    57d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    57d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    57d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    57d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15176 <setVariable>
    57de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    57e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 57f8 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    57e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 188f7 <PutChar+0xb85>
    57ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 1729e <KPrintF>
    57f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    57f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    57f4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 5850 <continueFunction+0xeaa>
						break;
    57f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    57f8:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 582e <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    57fa:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 1890f <PutChar+0xb9d>
    5800:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 1729e <KPrintF>
    5806:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5808:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    580a:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 5850 <continueFunction+0xeaa>
			break;
    580c:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    580e:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 582e <continueFunction+0xe88>
			break;
    5810:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    5812:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 582e <continueFunction+0xe88>
			break;
    5814:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    5816:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 582e <continueFunction+0xe88>
			break;
    5818:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    581a:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 582e <continueFunction+0xe88>
			break;
    581c:	|  |  |     |              \--|--|--|--|-------------------> nop
    581e:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 582e <continueFunction+0xe88>
			break;
    5820:	|  |  |     |                 \--|--|--|-------------------> nop
    5822:	|  |  |     +--------------------|--|--|-------------------- bra.s 582e <continueFunction+0xe88>
			break;
    5824:	|  |  |     |                    \--|--|-------------------> nop
    5826:	|  |  |     +-----------------------|--|-------------------- bra.s 582e <continueFunction+0xe88>
			break;
    5828:	|  |  |     |                       \--|-------------------> nop
    582a:	|  |  |     +--------------------------|-------------------- bra.s 582e <continueFunction+0xe88>
			break;
    582c:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    582e:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    5832:	+--|--|----------------------------------------------------- beq.s 5846 <continueFunction+0xea0>
    5834:	|  |  |                                                      movea.l 80(sp),a0
    5838:	|  |  |                                                      move.l 36(a0),d0
    583c:	|  |  |                                                      addq.l #1,d0
    583e:	|  |  |                                                      movea.l 80(sp),a0
    5842:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5846:	\--|--|----------------------------------------------------> tst.w 74(sp)
    584a:	   |  \----------------------------------------------------- bne.w 49ce <continueFunction+0x28>

	}
	return TRUE;
    584e:	   |                                                         moveq #1,d0
}
    5850:	   \-------------------------------------------------------> lea 76(sp),sp
    5854:	                                                             rts

00005856 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    5856:	          lea -16(sp),sp
    585a:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    585c:	          move.l 24(sp),-(sp)
    5860:	          jsr 697c <pauseFunction>
    5866:	          addq.l #4,sp
	if (fun -> stack) 
    5868:	          movea.l 24(sp),a0
    586c:	          move.l 24(a0),d0
    5870:	      /-- beq.s 5884 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    5872:	      |   pea 1893b <PutChar+0xbc9>
    5878:	      |   jsr 1729e <KPrintF>
    587e:	      |   addq.l #4,sp
		return;
    5880:	/-----|-- bra.w 591e <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    5884:	|     \-> movea.l 24(sp),a0
    5888:	|         move.l 4(a0),12(sp)
    588e:	|         move.l 1c9c4 <SysBase>,d0
    5894:	|         movea.l d0,a6
    5896:	|         movea.l 12(sp),a1
    589a:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    589e:	|         clr.l 16(sp)
    58a2:	|     /-- bra.s 58c2 <finishFunction+0x6c>
    58a4:	|  /--|-> movea.l 24(sp),a0
    58a8:	|  |  |   move.l 20(a0),d1
    58ac:	|  |  |   move.l 16(sp),d0
    58b0:	|  |  |   lsl.l #3,d0
    58b2:	|  |  |   add.l d1,d0
    58b4:	|  |  |   move.l d0,-(sp)
    58b6:	|  |  |   jsr 14ad2 <unlinkVar>
    58bc:	|  |  |   addq.l #4,sp
    58be:	|  |  |   addq.l #1,16(sp)
    58c2:	|  |  \-> movea.l 24(sp),a0
    58c6:	|  |      move.l 8(a0),d0
    58ca:	|  |      cmp.l 16(sp),d0
    58ce:	|  \----- bgt.s 58a4 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    58d0:	|         movea.l 24(sp),a0
    58d4:	|         move.l 8(a0),d0
    58d8:	|     /-- ble.s 58f4 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    58da:	|     |   movea.l 24(sp),a0
    58de:	|     |   move.l 20(a0),8(sp)
    58e4:	|     |   move.l 1c9c4 <SysBase>,d0
    58ea:	|     |   movea.l d0,a6
    58ec:	|     |   movea.l 8(sp),a1
    58f0:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    58f4:	|     \-> moveq #28,d0
    58f6:	|         add.l 24(sp),d0
    58fa:	|         move.l d0,-(sp)
    58fc:	|         jsr 14ad2 <unlinkVar>
    5902:	|         addq.l #4,sp
	FreeVec(fun);
    5904:	|         move.l 24(sp),4(sp)
    590a:	|         move.l 1c9c4 <SysBase>,d0
    5910:	|         movea.l d0,a6
    5912:	|         movea.l 4(sp),a1
    5916:	|         jsr -690(a6)
	fun = NULL;
    591a:	|         clr.l 24(sp)
}
    591e:	\-------> movea.l (sp)+,a6
    5920:	          lea 16(sp),sp
    5924:	          rts

00005926 <freezeSubs>:

void freezeSubs () {
    5926:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5928:	          move.l 1c95c <allRunningFunctions>,(sp)

	while (thisFunction) {
    592e:	   /----- bra.s 594c <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    5930:	/--|----> movea.l (sp),a0
    5932:	|  |      move.w 52(a0),d0
    5936:	|  |  /-- bne.s 5946 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    5938:	|  |  |   movea.l (sp),a0
    593a:	|  |  |   move.b 56(a0),d0
    593e:	|  |  |   addq.b #1,d0
    5940:	|  |  |   movea.l (sp),a0
    5942:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    5946:	|  |  \-> movea.l (sp),a0
    5948:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    594c:	|  \----> tst.l (sp)
    594e:	\-------- bne.s 5930 <freezeSubs+0xa>
	}
}
    5950:	          nop
    5952:	          nop
    5954:	          addq.l #4,sp
    5956:	          rts

00005958 <handleInput>:

BOOL handleInput () {
    5958:	             lea -16(sp),sp
    595c:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    595e:	             move.l 1cad8 <overRegion>,d0
    5964:	         /-- bne.s 596c <handleInput+0x14>
    5966:	         |   jsr 15a40 <getOverRegion>

	if (input.justMoved) {
    596c:	         \-> move.w 1c97a <input+0x4>,d0
    5972:	         /-- beq.s 59b0 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    5974:	         |   movea.l 1c33c <currentEvents>,a0
    597a:	         |   move.l 16(a0),d0
    597e:	         +-- beq.s 59b0 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5980:	         |   move.l 1c994 <noStack>,d1
    5986:	         |   movea.l 1c33c <currentEvents>,a0
    598c:	         |   move.l 16(a0),d0
    5990:	         |   pea 1 <_start+0x1>
    5994:	         |   move.l d1,-(sp)
    5996:	         |   clr.l -(sp)
    5998:	         |   clr.l -(sp)
    599a:	         |   move.l d0,-(sp)
    599c:	         |   jsr 6c0a <startNewFunctionNum>
    59a2:	         |   lea 20(sp),sp
    59a6:	         |   tst.l d0
    59a8:	         +-- bne.s 59b0 <handleInput+0x58>
    59aa:	         |   clr.w d0
    59ac:	/--------|-- bra.w 5bb6 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    59b0:	|        \-> clr.w 1c97a <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    59b6:	|            move.l 1c98c <lastRegion>,d1
    59bc:	|            move.l 1cad8 <overRegion>,d0
    59c2:	|            cmp.l d1,d0
    59c4:	|  /-------- beq.w 5a9c <handleInput+0x144>
    59c8:	|  |         movea.l 1c33c <currentEvents>,a0
    59ce:	|  |         move.l 20(a0),d0
    59d2:	|  +-------- beq.w 5a9c <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    59d6:	|  |         moveq #12,d0
    59d8:	|  |         move.l d0,16(sp)
    59dc:	|  |         clr.l 12(sp)
    59e0:	|  |         move.l 1c9c4 <SysBase>,d0
    59e6:	|  |         movea.l d0,a6
    59e8:	|  |         move.l 16(sp),d0
    59ec:	|  |         move.l 12(sp),d1
    59f0:	|  |         jsr -684(a6)
    59f4:	|  |         move.l d0,8(sp)
    59f8:	|  |         move.l 8(sp),d0
    59fc:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    5a00:	|  |         move.l 4(sp),d0
    5a04:	|  |     /-- bne.s 5a1a <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    5a06:	|  |     |   pea 18961 <PutChar+0xbef>
    5a0c:	|  |     |   jsr 1729e <KPrintF>
    5a12:	|  |     |   addq.l #4,sp
			return FALSE;
    5a14:	|  |     |   clr.w d0
    5a16:	+--|-----|-- bra.w 5bb6 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    5a1a:	|  |     \-> movea.l 4(sp),a0
    5a1e:	|  |         clr.l (a0)
		if (overRegion) {
    5a20:	|  |         move.l 1cad8 <overRegion>,d0
    5a26:	|  |  /----- beq.s 5a4e <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    5a28:	|  |  |      movea.l 1cad8 <overRegion>,a0
    5a2e:	|  |  |      movea.l 28(a0),a0
    5a32:	|  |  |      move.l 4(a0),d1
    5a36:	|  |  |      move.l 4(sp),d0
    5a3a:	|  |  |      move.l d1,-(sp)
    5a3c:	|  |  |      pea 7 <_start+0x7>
    5a40:	|  |  |      move.l d0,-(sp)
    5a42:	|  |  |      jsr 15176 <setVariable>
    5a48:	|  |  |      lea 12(sp),sp
    5a4c:	|  |  |  /-- bra.s 5a64 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    5a4e:	|  |  \--|-> move.l 4(sp),d0
    5a52:	|  |     |   clr.l -(sp)
    5a54:	|  |     |   pea 1 <_start+0x1>
    5a58:	|  |     |   move.l d0,-(sp)
    5a5a:	|  |     |   jsr 15176 <setVariable>
    5a60:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    5a64:	|  |     \-> movea.l 4(sp),a0
    5a68:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    5a6c:	|  |         movea.l 1c33c <currentEvents>,a0
    5a72:	|  |         move.l 20(a0),d0
    5a76:	|  |         pea 1 <_start+0x1>
    5a7a:	|  |         lea 8(sp),a0
    5a7e:	|  |         move.l a0,-(sp)
    5a80:	|  |         clr.l -(sp)
    5a82:	|  |         pea 1 <_start+0x1>
    5a86:	|  |         move.l d0,-(sp)
    5a88:	|  |         jsr 6c0a <startNewFunctionNum>
    5a8e:	|  |         lea 20(sp),sp
    5a92:	|  |         tst.l d0
    5a94:	|  +-------- bne.s 5a9c <handleInput+0x144>
    5a96:	|  |         clr.w d0
    5a98:	+--|-------- bra.w 5bb6 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    5a9c:	|  \-------> move.w 1c97c <input+0x6>,d0
    5aa2:	|        /-- beq.s 5ae0 <handleInput+0x188>
    5aa4:	|        |   movea.l 1c33c <currentEvents>,a0
    5aaa:	|        |   move.l 4(a0),d0
    5aae:	|        +-- beq.s 5ae0 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5ab0:	|        |   move.l 1c994 <noStack>,d1
    5ab6:	|        |   movea.l 1c33c <currentEvents>,a0
    5abc:	|        |   move.l 4(a0),d0
    5ac0:	|        |   pea 1 <_start+0x1>
    5ac4:	|        |   move.l d1,-(sp)
    5ac6:	|        |   clr.l -(sp)
    5ac8:	|        |   clr.l -(sp)
    5aca:	|        |   move.l d0,-(sp)
    5acc:	|        |   jsr 6c0a <startNewFunctionNum>
    5ad2:	|        |   lea 20(sp),sp
    5ad6:	|        |   tst.l d0
    5ad8:	|        +-- bne.s 5ae0 <handleInput+0x188>
    5ada:	|        |   clr.w d0
    5adc:	+--------|-- bra.w 5bb6 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    5ae0:	|        \-> move.w 1c97e <input+0x8>,d0
    5ae6:	|        /-- beq.s 5b24 <handleInput+0x1cc>
    5ae8:	|        |   movea.l 1c33c <currentEvents>,a0
    5aee:	|        |   move.l 12(a0),d0
    5af2:	|        +-- beq.s 5b24 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5af4:	|        |   move.l 1c994 <noStack>,d1
    5afa:	|        |   movea.l 1c33c <currentEvents>,a0
    5b00:	|        |   move.l 12(a0),d0
    5b04:	|        |   pea 1 <_start+0x1>
    5b08:	|        |   move.l d1,-(sp)
    5b0a:	|        |   clr.l -(sp)
    5b0c:	|        |   clr.l -(sp)
    5b0e:	|        |   move.l d0,-(sp)
    5b10:	|        |   jsr 6c0a <startNewFunctionNum>
    5b16:	|        |   lea 20(sp),sp
    5b1a:	|        |   tst.l d0
    5b1c:	|        +-- bne.s 5b24 <handleInput+0x1cc>
    5b1e:	|        |   clr.w d0
    5b20:	+--------|-- bra.w 5bb6 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    5b24:	|        \-> move.w 1c976 <input>,d0
    5b2a:	|        /-- beq.s 5b62 <handleInput+0x20a>
    5b2c:	|        |   movea.l 1c33c <currentEvents>,a0
    5b32:	|        |   move.l (a0),d0
    5b34:	|        +-- beq.s 5b62 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5b36:	|        |   move.l 1c994 <noStack>,d1
    5b3c:	|        |   movea.l 1c33c <currentEvents>,a0
    5b42:	|        |   move.l (a0),d0
    5b44:	|        |   pea 1 <_start+0x1>
    5b48:	|        |   move.l d1,-(sp)
    5b4a:	|        |   clr.l -(sp)
    5b4c:	|        |   clr.l -(sp)
    5b4e:	|        |   move.l d0,-(sp)
    5b50:	|        |   jsr 6c0a <startNewFunctionNum>
    5b56:	|        |   lea 20(sp),sp
    5b5a:	|        |   tst.l d0
    5b5c:	|        +-- bne.s 5b62 <handleInput+0x20a>
    5b5e:	|        |   clr.w d0
    5b60:	+--------|-- bra.s 5bb6 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5b62:	|        \-> move.w 1c978 <input+0x2>,d0
    5b68:	|        /-- beq.s 5ba4 <handleInput+0x24c>
    5b6a:	|        |   movea.l 1c33c <currentEvents>,a0
    5b70:	|        |   move.l 8(a0),d0
    5b74:	|        +-- beq.s 5ba4 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5b76:	|        |   move.l 1c994 <noStack>,d1
    5b7c:	|        |   movea.l 1c33c <currentEvents>,a0
    5b82:	|        |   move.l 8(a0),d0
    5b86:	|        |   pea 1 <_start+0x1>
    5b8a:	|        |   move.l d1,-(sp)
    5b8c:	|        |   clr.l -(sp)
    5b8e:	|        |   clr.l -(sp)
    5b90:	|        |   move.l d0,-(sp)
    5b92:	|        |   jsr 6c0a <startNewFunctionNum>
    5b98:	|        |   lea 20(sp),sp
    5b9c:	|        |   tst.l d0
    5b9e:	|        +-- bne.s 5ba4 <handleInput+0x24c>
    5ba0:	|        |   clr.w d0
    5ba2:	+--------|-- bra.s 5bb6 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5ba4:	|        \-> move.l 1cad8 <overRegion>,d0
    5baa:	|            move.l d0,1c98c <lastRegion>
	return runSludge ();
    5bb0:	|            jsr 69d8 <runSludge>
}
    5bb6:	\----------> movea.l (sp)+,a6
    5bb8:	             lea 16(sp),sp
    5bbc:	             rts

00005bbe <initSludge>:

BOOL initSludge (char * filename) {
    5bbe:	             lea -292(sp),sp
    5bc2:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    5bc6:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5bca:	             jsr ae3e <makeNullAnim>
    5bd0:	             move.l d0,1c8ca <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    5bd6:	             pea 1c96e <gameVersion>
    5bdc:	             pea 18997 <PutChar+0xc25>
    5be2:	             pea 45 <_start+0x45>
    5be6:	             pea 47 <_start+0x47>
    5bea:	             move.l 332(sp),-(sp)
    5bee:	             jsr 660c <openAndVerify>
    5bf4:	             lea 20(sp),sp
    5bf8:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    5bfc:	         /-- bne.s 5c04 <initSludge+0x46>
    5bfe:	         |   clr.w d0
    5c00:	/--------|-- bra.w 632c <initSludge+0x76e>
	if (FGetC (fp)) {
    5c04:	|        \-> move.l 288(sp),284(sp)
    5c0a:	|            move.l 1c9cc <DOSBase>,d0
    5c10:	|            movea.l d0,a6
    5c12:	|            move.l 284(sp),d1
    5c16:	|            jsr -306(a6)
    5c1a:	|            move.l d0,280(sp)
    5c1e:	|            move.l 280(sp),d0
    5c22:	|  /-------- beq.w 5dcc <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    5c26:	|  |         move.l 288(sp),-(sp)
    5c2a:	|  |         jsr 6bc <get2bytes>
    5c30:	|  |         addq.l #4,sp
    5c32:	|  |         move.l d0,1c998 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    5c38:	|  |         move.l 1c998 <numBIFNames>,d0
    5c3e:	|  |         move.l d0,276(sp)
    5c42:	|  |         clr.l 272(sp)
    5c46:	|  |         move.l 1c9c4 <SysBase>,d0
    5c4c:	|  |         movea.l d0,a6
    5c4e:	|  |         move.l 276(sp),d0
    5c52:	|  |         move.l 272(sp),d1
    5c56:	|  |         jsr -684(a6)
    5c5a:	|  |         move.l d0,268(sp)
    5c5e:	|  |         move.l 268(sp),d0
    5c62:	|  |         move.l d0,1c954 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    5c68:	|  |         move.l 1c954 <allBIFNames>,d0
    5c6e:	|  |     /-- bne.s 5c76 <initSludge+0xb8>
    5c70:	|  |     |   clr.w d0
    5c72:	+--|-----|-- bra.w 632c <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5c76:	|  |     \-> clr.l 304(sp)
    5c7a:	|  |     /-- bra.s 5ca0 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5c7c:	|  |  /--|-> move.l 1c954 <allBIFNames>,d1
    5c82:	|  |  |  |   move.l 304(sp),d0
    5c86:	|  |  |  |   add.l d0,d0
    5c88:	|  |  |  |   add.l d0,d0
    5c8a:	|  |  |  |   movea.l d1,a2
    5c8c:	|  |  |  |   adda.l d0,a2
    5c8e:	|  |  |  |   move.l 288(sp),-(sp)
    5c92:	|  |  |  |   jsr b02 <readString>
    5c98:	|  |  |  |   addq.l #4,sp
    5c9a:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5c9c:	|  |  |  |   addq.l #1,304(sp)
    5ca0:	|  |  |  \-> move.l 1c998 <numBIFNames>,d0
    5ca6:	|  |  |      cmp.l 304(sp),d0
    5caa:	|  |  \----- bgt.s 5c7c <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5cac:	|  |         move.l 288(sp),-(sp)
    5cb0:	|  |         jsr 6bc <get2bytes>
    5cb6:	|  |         addq.l #4,sp
    5cb8:	|  |         move.l d0,1c9a4 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5cbe:	|  |         move.l 1c9a4 <numUserFunc>,d0
    5cc4:	|  |         move.l d0,264(sp)
    5cc8:	|  |         clr.l 260(sp)
    5ccc:	|  |         move.l 1c9c4 <SysBase>,d0
    5cd2:	|  |         movea.l d0,a6
    5cd4:	|  |         move.l 264(sp),d0
    5cd8:	|  |         move.l 260(sp),d1
    5cdc:	|  |         jsr -684(a6)
    5ce0:	|  |         move.l d0,256(sp)
    5ce4:	|  |         move.l 256(sp),d0
    5ce8:	|  |         move.l d0,1c960 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5cee:	|  |         move.l 1c960 <allUserFunc>,d0
    5cf4:	|  |     /-- bne.s 5cfc <initSludge+0x13e>
    5cf6:	|  |     |   clr.w d0
    5cf8:	+--|-----|-- bra.w 632c <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5cfc:	|  |     \-> clr.l 300(sp)
    5d00:	|  |     /-- bra.s 5d26 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5d02:	|  |  /--|-> move.l 1c960 <allUserFunc>,d1
    5d08:	|  |  |  |   move.l 300(sp),d0
    5d0c:	|  |  |  |   add.l d0,d0
    5d0e:	|  |  |  |   add.l d0,d0
    5d10:	|  |  |  |   movea.l d1,a2
    5d12:	|  |  |  |   adda.l d0,a2
    5d14:	|  |  |  |   move.l 288(sp),-(sp)
    5d18:	|  |  |  |   jsr b02 <readString>
    5d1e:	|  |  |  |   addq.l #4,sp
    5d20:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    5d22:	|  |  |  |   addq.l #1,300(sp)
    5d26:	|  |  |  \-> move.l 1c9a4 <numUserFunc>,d0
    5d2c:	|  |  |      cmp.l 300(sp),d0
    5d30:	|  |  \----- bgt.s 5d02 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    5d32:	|  |         move.l 1c96e <gameVersion>,d0
    5d38:	|  |         cmpi.l #258,d0
    5d3e:	|  +-------- ble.w 5dcc <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    5d42:	|  |         move.l 288(sp),-(sp)
    5d46:	|  |         jsr 6bc <get2bytes>
    5d4c:	|  |         addq.l #4,sp
    5d4e:	|  |         move.l d0,1c9a0 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    5d54:	|  |         move.l 1c9a0 <numResourceNames>,d0
    5d5a:	|  |         add.l d0,d0
    5d5c:	|  |         add.l d0,d0
    5d5e:	|  |         move.l d0,252(sp)
    5d62:	|  |         clr.l 248(sp)
    5d66:	|  |         move.l 1c9c4 <SysBase>,d0
    5d6c:	|  |         movea.l d0,a6
    5d6e:	|  |         move.l 252(sp),d0
    5d72:	|  |         move.l 248(sp),d1
    5d76:	|  |         jsr -684(a6)
    5d7a:	|  |         move.l d0,244(sp)
    5d7e:	|  |         move.l 244(sp),d0
    5d82:	|  |         move.l d0,1c958 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5d88:	|  |         move.l 1c958 <allResourceNames>,d0
    5d8e:	|  |     /-- bne.s 5d96 <initSludge+0x1d8>
    5d90:	|  |     |   clr.w d0
    5d92:	+--|-----|-- bra.w 632c <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5d96:	|  |     \-> clr.l 296(sp)
    5d9a:	|  |     /-- bra.s 5dc0 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5d9c:	|  |  /--|-> move.l 1c958 <allResourceNames>,d1
    5da2:	|  |  |  |   move.l 296(sp),d0
    5da6:	|  |  |  |   add.l d0,d0
    5da8:	|  |  |  |   add.l d0,d0
    5daa:	|  |  |  |   movea.l d1,a2
    5dac:	|  |  |  |   adda.l d0,a2
    5dae:	|  |  |  |   move.l 288(sp),-(sp)
    5db2:	|  |  |  |   jsr b02 <readString>
    5db8:	|  |  |  |   addq.l #4,sp
    5dba:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5dbc:	|  |  |  |   addq.l #1,296(sp)
    5dc0:	|  |  |  \-> move.l 1c9a0 <numResourceNames>,d0
    5dc6:	|  |  |      cmp.l 296(sp),d0
    5dca:	|  |  \----- bgt.s 5d9c <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5dcc:	|  \-------> move.l #129,1c980 <input+0xa>
	input.mouseY = 100;
    5dd6:	|            moveq #100,d0
    5dd8:	|            move.l d0,1c984 <input+0xe>
	winWidth = get2bytes (fp);
    5dde:	|            move.l 288(sp),-(sp)
    5de2:	|            jsr 6bc <get2bytes>
    5de8:	|            addq.l #4,sp
    5dea:	|            move.l d0,1c918 <winWidth>
	winHeight = get2bytes (fp);
    5df0:	|            move.l 288(sp),-(sp)
    5df4:	|            jsr 6bc <get2bytes>
    5dfa:	|            addq.l #4,sp
    5dfc:	|            move.l d0,1c91c <winHeight>
	specialSettings = FGetC (fp);
    5e02:	|            move.l 288(sp),240(sp)
    5e08:	|            move.l 1c9cc <DOSBase>,d0
    5e0e:	|            movea.l d0,a6
    5e10:	|            move.l 240(sp),d1
    5e14:	|            jsr -306(a6)
    5e18:	|            move.l d0,236(sp)
    5e1c:	|            move.l 236(sp),d0
    5e20:	|            move.l d0,1c9a8 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5e26:	|            move.l 288(sp),232(sp)
    5e2c:	|            move.l 1c9cc <DOSBase>,d0
    5e32:	|            movea.l d0,a6
    5e34:	|            move.l 232(sp),d1
    5e38:	|            jsr -306(a6)
    5e3c:	|            move.l d0,228(sp)
    5e40:	|            move.l 228(sp),d0
    5e44:	|            move.l d0,-(sp)
    5e46:	|            pea 3e8 <encodeFilename+0xea>
    5e4a:	|            jsr 17cda <__divsi3>
    5e50:	|            addq.l #8,sp
    5e52:	|            move.l d0,1c352 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    5e58:	|            move.l 288(sp),-(sp)
    5e5c:	|            jsr b02 <readString>
    5e62:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    5e64:	|            move.l 288(sp),224(sp)
    5e6a:	|            move.l #117094,220(sp)
    5e72:	|            moveq #8,d1
    5e74:	|            move.l d1,216(sp)
    5e78:	|            moveq #1,d0
    5e7a:	|            move.l d0,212(sp)
    5e7e:	|            move.l 1c9cc <DOSBase>,d0
    5e84:	|            movea.l d0,a6
    5e86:	|            move.l 224(sp),d1
    5e8a:	|            move.l 220(sp),d2
    5e8e:	|            move.l 216(sp),d3
    5e92:	|            move.l 212(sp),d4
    5e96:	|            jsr -324(a6)
    5e9a:	|            move.l d0,208(sp)
    5e9e:	|            move.l 208(sp),d0
    5ea2:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5ea6:	|            moveq #1,d1
    5ea8:	|            cmp.l 204(sp),d1
    5eac:	|        /-- beq.s 5ebc <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5eae:	|        |   pea 189d0 <PutChar+0xc5e>
    5eb4:	|        |   jsr 1729e <KPrintF>
    5eba:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5ebc:	|        \-> move.l 1c96e <gameVersion>,d0
    5ec2:	|            cmpi.l #258,d0
    5ec8:	|        /-- ble.s 5ed8 <initSludge+0x31a>
    5eca:	|        |   move.l 288(sp),-(sp)
    5ece:	|        |   jsr b02 <readString>
    5ed4:	|        |   addq.l #4,sp
    5ed6:	|     /--|-- bra.s 5eec <initSludge+0x32e>
    5ed8:	|     |  \-> pea 189ee <PutChar+0xc7c>
    5ede:	|     |      pea 189ee <PutChar+0xc7c>
    5ee4:	|     |      jsr 13db0 <joinStrings>
    5eea:	|     |      addq.l #8,sp
    5eec:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5ef0:	|            move.l 1c96e <gameVersion>,d0
    5ef6:	|            cmpi.l #258,d0
    5efc:	|     /----- ble.s 5f1e <initSludge+0x360>
    5efe:	|     |      move.l 288(sp),196(sp)
    5f04:	|     |      move.l 1c9cc <DOSBase>,d0
    5f0a:	|     |      movea.l d0,a6
    5f0c:	|     |      move.l 196(sp),d1
    5f10:	|     |      jsr -306(a6)
    5f14:	|     |      move.l d0,192(sp)
    5f18:	|     |      move.l 192(sp),d0
    5f1c:	|     |  /-- bra.s 5f20 <initSludge+0x362>
    5f1e:	|     \--|-> moveq #0,d0
    5f20:	|        \-> move.l d0,1caa4 <gameSettings+0x4>
	makeLanguageTable (fp);
    5f26:	|            move.l 288(sp),-(sp)
    5f2a:	|            jsr 13766 <makeLanguageTable>
    5f30:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5f32:	|            move.l 1c96e <gameVersion>,d0
    5f38:	|            cmpi.l #261,d0
    5f3e:	|        /-- ble.s 5f8c <initSludge+0x3ce>
	{
		FGetC(fp);
    5f40:	|        |   move.l 288(sp),188(sp)
    5f46:	|        |   move.l 1c9cc <DOSBase>,d0
    5f4c:	|        |   movea.l d0,a6
    5f4e:	|        |   move.l 188(sp),d1
    5f52:	|        |   jsr -306(a6)
    5f56:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5f5a:	|        |   move.l 288(sp),180(sp)
    5f60:	|        |   move.l 1c9cc <DOSBase>,d0
    5f66:	|        |   movea.l d0,a6
    5f68:	|        |   move.l 180(sp),d1
    5f6c:	|        |   jsr -306(a6)
    5f70:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5f74:	|        |   move.l 288(sp),-(sp)
    5f78:	|        |   jsr 7d8 <getFloat>
    5f7e:	|        |   addq.l #4,sp
		getFloat (fp);
    5f80:	|        |   move.l 288(sp),-(sp)
    5f84:	|        |   jsr 7d8 <getFloat>
    5f8a:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5f8c:	|        \-> move.l 288(sp),-(sp)
    5f90:	|            jsr b02 <readString>
    5f96:	|            addq.l #4,sp
    5f98:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5f9c:	|            pea 189ef <PutChar+0xc7d>
    5fa2:	|            move.l 176(sp),-(sp)
    5fa6:	|            jsr 13d30 <strcmp>
    5fac:	|            addq.l #8,sp
    5fae:	|            tst.l d0
    5fb0:	|        /-- beq.s 5fb8 <initSludge+0x3fa>
		return FALSE;
    5fb2:	|        |   clr.w d0
    5fb4:	+--------|-- bra.w 632c <initSludge+0x76e>
	}
	FreeVec( checker);
    5fb8:	|        \-> move.l 172(sp),168(sp)
    5fbe:	|            move.l 1c9c4 <SysBase>,d0
    5fc4:	|            movea.l d0,a6
    5fc6:	|            movea.l 168(sp),a1
    5fca:	|            jsr -690(a6)
	checker = NULL;
    5fce:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5fd2:	|            move.l 288(sp),164(sp)
    5fd8:	|            move.l 1c9cc <DOSBase>,d0
    5fde:	|            movea.l d0,a6
    5fe0:	|            move.l 164(sp),d1
    5fe4:	|            jsr -306(a6)
    5fe8:	|            move.l d0,160(sp)
    5fec:	|            move.l 160(sp),d0
    5ff0:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5ff4:	|            moveq #0,d0
    5ff6:	|            move.b 159(sp),d0
    5ffa:	|            moveq #1,d1
    5ffc:	|            and.l d1,d0
    5ffe:	|        /-- beq.s 6056 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6000:	|        |   move.l 1c9cc <DOSBase>,d0
    6006:	|        |   movea.l d0,a6
    6008:	|        |   jsr -60(a6)
    600c:	|        |   move.l d0,38(sp)
    6010:	|        |   move.l 38(sp),d0
    6014:	|        |   move.l d0,34(sp)
    6018:	|        |   move.l #100855,30(sp)
    6020:	|        |   moveq #54,d0
    6022:	|        |   move.l d0,26(sp)
    6026:	|        |   move.l 1c9cc <DOSBase>,d0
    602c:	|        |   movea.l d0,a6
    602e:	|        |   move.l 34(sp),d1
    6032:	|        |   move.l 30(sp),d2
    6036:	|        |   move.l 26(sp),d3
    603a:	|        |   jsr -48(a6)
    603e:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6042:	|        |   pea 18a2e <PutChar+0xcbc>
    6048:	|        |   jsr 1729e <KPrintF>
    604e:	|        |   addq.l #4,sp
		return FALSE;
    6050:	|        |   clr.w d0
    6052:	+--------|-- bra.w 632c <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6056:	|        \-> move.l 288(sp),-(sp)
    605a:	|            jsr 6bc <get2bytes>
    6060:	|            addq.l #4,sp
    6062:	|            move.l d0,1c99c <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6068:	|            move.l 1c99c <numGlobals>,d0
    606e:	|            lsl.l #3,d0
    6070:	|            move.l d0,154(sp)
    6074:	|            clr.l 150(sp)
    6078:	|            move.l 1c9c4 <SysBase>,d0
    607e:	|            movea.l d0,a6
    6080:	|            move.l 154(sp),d0
    6084:	|            move.l 150(sp),d1
    6088:	|            jsr -684(a6)
    608c:	|            move.l d0,146(sp)
    6090:	|            move.l 146(sp),d0
    6094:	|            move.l d0,1c972 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    609a:	|            move.l 1c972 <globalVars>,d0
    60a0:	|        /-- bne.s 60be <initSludge+0x500>
    60a2:	|        |   move.l 1c99c <numGlobals>,d0
    60a8:	|        +-- ble.s 60be <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    60aa:	|        |   pea 18a66 <PutChar+0xcf4>
    60b0:	|        |   jsr 1729e <KPrintF>
    60b6:	|        |   addq.l #4,sp
		return FALSE;
    60b8:	|        |   clr.w d0
    60ba:	+--------|-- bra.w 632c <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    60be:	|        \-> clr.l 308(sp)
    60c2:	|        /-- bra.s 60da <initSludge+0x51c>
    60c4:	|     /--|-> move.l 1c972 <globalVars>,d1
    60ca:	|     |  |   move.l 308(sp),d0
    60ce:	|     |  |   lsl.l #3,d0
    60d0:	|     |  |   movea.l d1,a0
    60d2:	|     |  |   adda.l d0,a0
    60d4:	|     |  |   clr.l (a0)
    60d6:	|     |  |   addq.l #1,308(sp)
    60da:	|     |  \-> move.l 1c99c <numGlobals>,d0
    60e0:	|     |      cmp.l 308(sp),d0
    60e4:	|     \----- bgt.s 60c4 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    60e6:	|            move.l 1caa4 <gameSettings+0x4>,d0
    60ec:	|            clr.l -(sp)
    60ee:	|            move.l d0,-(sp)
    60f0:	|            move.l 296(sp),-(sp)
    60f4:	|            jsr 70fa <setFileIndices>
    60fa:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    60fe:	|            pea 1 <_start+0x1>
    6102:	|            jsr 6db4 <getNumberedString>
    6108:	|            addq.l #4,sp
    610a:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    610e:	|            move.l 142(sp),-(sp)
    6112:	|            jsr 2fe <encodeFilename>
    6118:	|            addq.l #4,sp
    611a:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    611e:	|            move.l 142(sp),134(sp)
    6124:	|            move.l 1c9c4 <SysBase>,d0
    612a:	|            movea.l d0,a6
    612c:	|            movea.l 134(sp),a1
    6130:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6134:	|            move.l 138(sp),130(sp)
    613a:	|            move.l 1c9cc <DOSBase>,d0
    6140:	|            movea.l d0,a6
    6142:	|            move.l 130(sp),d1
    6146:	|            jsr -120(a6)
    614a:	|            move.l d0,126(sp)
    614e:	|            move.l 126(sp),d0
    6152:	|            move.l d0,292(sp)
	if(lock == 0) {
    6156:	|        /-- bne.s 6184 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6158:	|        |   move.l 138(sp),122(sp)
    615e:	|        |   moveq #-2,d1
    6160:	|        |   move.l d1,118(sp)
    6164:	|        |   move.l 1c9cc <DOSBase>,d0
    616a:	|        |   movea.l d0,a6
    616c:	|        |   move.l 122(sp),d1
    6170:	|        |   move.l 118(sp),d2
    6174:	|        |   jsr -84(a6)
    6178:	|        |   move.l d0,114(sp)
    617c:	|        |   move.l 114(sp),d0
    6180:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6184:	|        \-> move.l 292(sp),110(sp)
    618a:	|            move.l 1c9cc <DOSBase>,d0
    6190:	|            movea.l d0,a6
    6192:	|            move.l 110(sp),d1
    6196:	|            jsr -126(a6)
    619a:	|            move.l d0,106(sp)
    619e:	|            move.l 106(sp),d0
    61a2:	|        /-- bne.s 61fe <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    61a4:	|        |   move.l 138(sp),-(sp)
    61a8:	|        |   pea 18a99 <PutChar+0xd27>
    61ae:	|        |   jsr 1729e <KPrintF>
    61b4:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    61b6:	|        |   move.l 1c9cc <DOSBase>,d0
    61bc:	|        |   movea.l d0,a6
    61be:	|        |   jsr -60(a6)
    61c2:	|        |   move.l d0,58(sp)
    61c6:	|        |   move.l 58(sp),d0
    61ca:	|        |   move.l d0,54(sp)
    61ce:	|        |   move.l #101062,50(sp)
    61d6:	|        |   moveq #40,d0
    61d8:	|        |   move.l d0,46(sp)
    61dc:	|        |   move.l 1c9cc <DOSBase>,d0
    61e2:	|        |   movea.l d0,a6
    61e4:	|        |   move.l 54(sp),d1
    61e8:	|        |   move.l 50(sp),d2
    61ec:	|        |   move.l 46(sp),d3
    61f0:	|        |   jsr -48(a6)
    61f4:	|        |   move.l d0,42(sp)
		return FALSE;
    61f8:	|        |   clr.w d0
    61fa:	+--------|-- bra.w 632c <initSludge+0x76e>
	}

	FreeVec(gameName);
    61fe:	|        \-> move.l 138(sp),102(sp)
    6204:	|            move.l 1c9c4 <SysBase>,d0
    620a:	|            movea.l d0,a6
    620c:	|            movea.l 102(sp),a1
    6210:	|            jsr -690(a6)

	readIniFile (filename);
    6214:	|            move.l 316(sp),-(sp)
    6218:	|            jsr 1389a <readIniFile>
    621e:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6220:	|            jsr 1366c <getLanguageForFileB>
    6226:	|            move.l d0,1c340 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    622c:	|            move.l 1c340 <languageNum>,d0
    6232:	|        /-- bpl.s 6242 <initSludge+0x684>
    6234:	|        |   pea 18aef <PutChar+0xd7d>
    623a:	|        |   jsr 1729e <KPrintF>
    6240:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6242:	|        \-> move.l 1c340 <languageNum>,d0
    6248:	|            move.l d0,d1
    624a:	|            move.l 1caa4 <gameSettings+0x4>,d0
    6250:	|            move.l d1,-(sp)
    6252:	|            move.l d0,-(sp)
    6254:	|            clr.l -(sp)
    6256:	|            jsr 70fa <setFileIndices>
    625c:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6260:	|            movea.l 200(sp),a0
    6264:	|            move.b (a0),d0
    6266:	|     /----- beq.w 6310 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    626a:	|     |      move.l 200(sp),-(sp)
    626e:	|     |      jsr 2fe <encodeFilename>
    6274:	|     |      addq.l #4,sp
    6276:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    627a:	|     |      move.l 98(sp),94(sp)
    6280:	|     |      move.l 1c9cc <DOSBase>,d0
    6286:	|     |      movea.l d0,a6
    6288:	|     |      move.l 94(sp),d1
    628c:	|     |      jsr -120(a6)
    6290:	|     |      move.l d0,90(sp)
    6294:	|     |      move.l 90(sp),d0
    6298:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    629c:	|     |  /-- bne.s 62ca <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    629e:	|     |  |   move.l 98(sp),86(sp)
    62a4:	|     |  |   moveq #-2,d1
    62a6:	|     |  |   move.l d1,82(sp)
    62aa:	|     |  |   move.l 1c9cc <DOSBase>,d0
    62b0:	|     |  |   movea.l d0,a6
    62b2:	|     |  |   move.l 86(sp),d1
    62b6:	|     |  |   move.l 82(sp),d2
    62ba:	|     |  |   jsr -84(a6)
    62be:	|     |  |   move.l d0,78(sp)
    62c2:	|     |  |   move.l 78(sp),d0
    62c6:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    62ca:	|     |  \-> move.l 292(sp),74(sp)
    62d0:	|     |      move.l 1c9cc <DOSBase>,d0
    62d6:	|     |      movea.l d0,a6
    62d8:	|     |      move.l 74(sp),d1
    62dc:	|     |      jsr -126(a6)
    62e0:	|     |      move.l d0,70(sp)
    62e4:	|     |      move.l 70(sp),d0
    62e8:	|     |  /-- bne.s 62fa <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    62ea:	|     |  |   move.l 1c9cc <DOSBase>,d0
    62f0:	|     |  |   movea.l d0,a6
    62f2:	|     |  |   jsr -60(a6)
    62f6:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    62fa:	|     |  \-> move.l 98(sp),62(sp)
    6300:	|     |      move.l 1c9c4 <SysBase>,d0
    6306:	|     |      movea.l d0,a6
    6308:	|     |      movea.l 62(sp),a1
    630c:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6310:	|     \----> movea.l 1c91c <winHeight>,a0
    6316:	|            lea -15(a0),a0
    631a:	|            move.l a0,d0
    631c:	|            move.l d0,-(sp)
    631e:	|            pea a <_start+0xa>
    6322:	|            jsr 7b3a <positionStatus>
    6328:	|            addq.l #8,sp

	return TRUE;
    632a:	|            moveq #1,d0
}
    632c:	\----------> movem.l (sp)+,d2-d4/a2/a6
    6330:	             lea 292(sp),sp
    6334:	             rts

00006336 <killSpeechTimers>:

void killSpeechTimers () {
    6336:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6338:	          move.l 1c95c <allRunningFunctions>,(sp)

	while (thisFunction) {
    633e:	   /----- bra.s 636a <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6340:	/--|----> movea.l (sp),a0
    6342:	|  |      move.b 56(a0),d0
    6346:	|  |  /-- bne.s 6364 <killSpeechTimers+0x2e>
    6348:	|  |  |   movea.l (sp),a0
    634a:	|  |  |   move.w 50(a0),d0
    634e:	|  |  +-- beq.s 6364 <killSpeechTimers+0x2e>
    6350:	|  |  |   movea.l (sp),a0
    6352:	|  |  |   move.l 12(a0),d0
    6356:	|  |  +-- beq.s 6364 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6358:	|  |  |   movea.l (sp),a0
    635a:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    635e:	|  |  |   movea.l (sp),a0
    6360:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6364:	|  |  \-> movea.l (sp),a0
    6366:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    636a:	|  \----> tst.l (sp)
    636c:	\-------- bne.s 6340 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    636e:	          jsr 8078 <killAllSpeech>
}
    6374:	          nop
    6376:	          addq.l #4,sp
    6378:	          rts

0000637a <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    637a:	             lea -52(sp),sp
    637e:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6380:	             movea.l 60(sp),a0
    6384:	             move.l (a0),d0
    6386:	             move.l d0,-(sp)
    6388:	             jsr 703a <openSubSlice>
    638e:	             addq.l #4,sp
    6390:	             tst.w d0
    6392:	         /-- bne.s 639a <loadFunctionCode+0x20>
    6394:	         |   clr.w d0
    6396:	/--------|-- bra.w 6564 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    639a:	|        \-> move.l 1c9ac <bigDataFile>,44(sp)
    63a2:	|            move.l 1c9cc <DOSBase>,d0
    63a8:	|            movea.l d0,a6
    63aa:	|            move.l 44(sp),d1
    63ae:	|            jsr -306(a6)
    63b2:	|            move.l d0,40(sp)
    63b6:	|            move.l 40(sp),d0
    63ba:	|            move.l d0,d0
    63bc:	|            movea.l 60(sp),a0
    63c0:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    63c4:	|            move.l 1c9ac <bigDataFile>,d0
    63ca:	|            move.l d0,-(sp)
    63cc:	|            jsr 6bc <get2bytes>
    63d2:	|            addq.l #4,sp
    63d4:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    63d8:	|            move.l 1c9ac <bigDataFile>,d0
    63de:	|            move.l d0,-(sp)
    63e0:	|            jsr 6bc <get2bytes>
    63e6:	|            addq.l #4,sp
    63e8:	|            movea.l 60(sp),a0
    63ec:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    63f0:	|            move.l 1c9ac <bigDataFile>,d0
    63f6:	|            move.l d0,-(sp)
    63f8:	|            jsr 6bc <get2bytes>
    63fe:	|            addq.l #4,sp
    6400:	|            movea.l 60(sp),a0
    6404:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6408:	|            move.l 36(sp),d0
    640c:	|            lsl.l #3,d0
    640e:	|            move.l d0,32(sp)
    6412:	|            clr.l 28(sp)
    6416:	|            move.l 1c9c4 <SysBase>,d0
    641c:	|            movea.l d0,a6
    641e:	|            move.l 32(sp),d0
    6422:	|            move.l 28(sp),d1
    6426:	|            jsr -684(a6)
    642a:	|            move.l d0,24(sp)
    642e:	|            move.l 24(sp),d0
    6432:	|            movea.l 60(sp),a0
    6436:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    643a:	|            movea.l 60(sp),a0
    643e:	|            move.l 4(a0),d0
    6442:	|        /-- bne.s 6458 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6444:	|        |   pea 18b1a <PutChar+0xda8>
    644a:	|        |   jsr 1729e <KPrintF>
    6450:	|        |   addq.l #4,sp
		return FALSE;
    6452:	|        |   clr.w d0
    6454:	+--------|-- bra.w 6564 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6458:	|        \-> clr.l 52(sp)
    645c:	|        /-- bra.s 64be <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    645e:	|     /--|-> move.l 1c9ac <bigDataFile>,8(sp)
    6466:	|     |  |   move.l 1c9cc <DOSBase>,d0
    646c:	|     |  |   movea.l d0,a6
    646e:	|     |  |   move.l 8(sp),d1
    6472:	|     |  |   jsr -306(a6)
    6476:	|     |  |   move.l d0,4(sp)
    647a:	|     |  |   move.l 4(sp),d1
    647e:	|     |  |   movea.l 60(sp),a0
    6482:	|     |  |   movea.l 4(a0),a0
    6486:	|     |  |   move.l 52(sp),d0
    648a:	|     |  |   lsl.l #3,d0
    648c:	|     |  |   adda.l d0,a0
    648e:	|     |  |   move.l d1,d0
    6490:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6492:	|     |  |   move.l 1c9ac <bigDataFile>,d0
    6498:	|     |  |   move.l d0,-(sp)
    649a:	|     |  |   jsr 6bc <get2bytes>
    64a0:	|     |  |   addq.l #4,sp
    64a2:	|     |  |   move.l d0,d1
    64a4:	|     |  |   movea.l 60(sp),a0
    64a8:	|     |  |   movea.l 4(a0),a0
    64ac:	|     |  |   move.l 52(sp),d0
    64b0:	|     |  |   lsl.l #3,d0
    64b2:	|     |  |   adda.l d0,a0
    64b4:	|     |  |   move.l d1,d0
    64b6:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    64ba:	|     |  |   addq.l #1,52(sp)
    64be:	|     |  \-> move.l 52(sp),d0
    64c2:	|     |      cmp.l 36(sp),d0
    64c6:	|     \----- bcs.s 645e <loadFunctionCode+0xe4>
	}

	finishAccess ();
    64c8:	|            jsr 6daa <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    64ce:	|            movea.l 60(sp),a0
    64d2:	|            move.l 8(a0),d0
    64d6:	|  /-------- ble.w 655a <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    64da:	|  |         movea.l 60(sp),a0
    64de:	|  |         move.l 8(a0),d0
    64e2:	|  |         lsl.l #3,d0
    64e4:	|  |         move.l d0,20(sp)
    64e8:	|  |         clr.l 16(sp)
    64ec:	|  |         move.l 1c9c4 <SysBase>,d0
    64f2:	|  |         movea.l d0,a6
    64f4:	|  |         move.l 20(sp),d0
    64f8:	|  |         move.l 16(sp),d1
    64fc:	|  |         jsr -684(a6)
    6500:	|  |         move.l d0,12(sp)
    6504:	|  |         move.l 12(sp),d0
    6508:	|  |         movea.l 60(sp),a0
    650c:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6510:	|  |         movea.l 60(sp),a0
    6514:	|  |         move.l 20(a0),d0
    6518:	|  |     /-- bne.s 652c <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    651a:	|  |     |   pea 18b1a <PutChar+0xda8>
    6520:	|  |     |   jsr 1729e <KPrintF>
    6526:	|  |     |   addq.l #4,sp
			return FALSE;
    6528:	|  |     |   clr.w d0
    652a:	+--|-----|-- bra.s 6564 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    652c:	|  |     \-> clr.l 48(sp)
    6530:	|  |     /-- bra.s 654a <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6532:	|  |  /--|-> movea.l 60(sp),a0
    6536:	|  |  |  |   move.l 20(a0),d1
    653a:	|  |  |  |   move.l 48(sp),d0
    653e:	|  |  |  |   lsl.l #3,d0
    6540:	|  |  |  |   movea.l d1,a0
    6542:	|  |  |  |   adda.l d0,a0
    6544:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6546:	|  |  |  |   addq.l #1,48(sp)
    654a:	|  |  |  \-> movea.l 60(sp),a0
    654e:	|  |  |      move.l 8(a0),d0
    6552:	|  |  |      cmp.l 48(sp),d0
    6556:	|  |  \----- bgt.s 6532 <loadFunctionCode+0x1b8>
    6558:	|  |     /-- bra.s 6562 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    655a:	|  \-----|-> movea.l 60(sp),a0
    655e:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6562:	|        \-> moveq #1,d0
}
    6564:	\----------> movea.l (sp)+,a6
    6566:	             lea 52(sp),sp
    656a:	             rts

0000656c <loadHandlers>:

void loadHandlers (BPTR fp) {
    656c:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    656e:	movea.l 1c33c <currentEvents>,a2
    6574:	move.l 8(sp),-(sp)
    6578:	jsr 6bc <get2bytes>
    657e:	addq.l #4,sp
    6580:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6582:	movea.l 1c33c <currentEvents>,a2
    6588:	move.l 8(sp),-(sp)
    658c:	jsr 6bc <get2bytes>
    6592:	addq.l #4,sp
    6594:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6598:	movea.l 1c33c <currentEvents>,a2
    659e:	move.l 8(sp),-(sp)
    65a2:	jsr 6bc <get2bytes>
    65a8:	addq.l #4,sp
    65aa:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    65ae:	movea.l 1c33c <currentEvents>,a2
    65b4:	move.l 8(sp),-(sp)
    65b8:	jsr 6bc <get2bytes>
    65be:	addq.l #4,sp
    65c0:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    65c4:	movea.l 1c33c <currentEvents>,a2
    65ca:	move.l 8(sp),-(sp)
    65ce:	jsr 6bc <get2bytes>
    65d4:	addq.l #4,sp
    65d6:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    65da:	movea.l 1c33c <currentEvents>,a2
    65e0:	move.l 8(sp),-(sp)
    65e4:	jsr 6bc <get2bytes>
    65ea:	addq.l #4,sp
    65ec:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    65f0:	movea.l 1c33c <currentEvents>,a2
    65f6:	move.l 8(sp),-(sp)
    65fa:	jsr 6bc <get2bytes>
    6600:	addq.l #4,sp
    6602:	move.l d0,24(a2)
}
    6606:	nop
    6608:	movea.l (sp)+,a2
    660a:	rts

0000660c <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    660c:	       lea -312(sp),sp
    6610:	       movem.l d2-d3/a6,-(sp)
    6614:	       move.l 332(sp),d1
    6618:	       move.l 336(sp),d0
    661c:	       move.b d1,d1
    661e:	       move.b d1,16(sp)
    6622:	       move.b d0,d0
    6624:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6628:	       move.l 328(sp),318(sp)
    662e:	       move.l #1005,314(sp)
    6636:	       move.l 1c9cc <DOSBase>,d0
    663c:	       movea.l d0,a6
    663e:	       move.l 318(sp),d1
    6642:	       move.l 314(sp),d2
    6646:	       jsr -30(a6)
    664a:	       move.l d0,310(sp)
    664e:	       move.l 310(sp),d0
    6652:	       move.l d0,306(sp)

	if (! fp) {
    6656:	   /-- bne.s 66b2 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6658:	   |   move.l 1c9cc <DOSBase>,d0
    665e:	   |   movea.l d0,a6
    6660:	   |   jsr -60(a6)
    6664:	   |   move.l d0,154(sp)
    6668:	   |   move.l 154(sp),d0
    666c:	   |   move.l d0,150(sp)
    6670:	   |   move.l #101187,146(sp)
    6678:	   |   moveq #31,d0
    667a:	   |   move.l d0,142(sp)
    667e:	   |   move.l 1c9cc <DOSBase>,d0
    6684:	   |   movea.l d0,a6
    6686:	   |   move.l 150(sp),d1
    668a:	   |   move.l 146(sp),d2
    668e:	   |   move.l 142(sp),d3
    6692:	   |   jsr -48(a6)
    6696:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    669a:	   |   move.l 328(sp),-(sp)
    669e:	   |   pea 18b63 <PutChar+0xdf1>
    66a4:	   |   jsr 1729e <KPrintF>
    66aa:	   |   addq.l #8,sp
		return NULL;
    66ac:	   |   moveq #0,d0
    66ae:	/--|-- bra.w 6972 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    66b2:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    66b6:	|      move.l 306(sp),302(sp)
    66bc:	|      move.l 1c9cc <DOSBase>,d0
    66c2:	|      movea.l d0,a6
    66c4:	|      move.l 302(sp),d1
    66c8:	|      jsr -306(a6)
    66cc:	|      move.l d0,298(sp)
    66d0:	|      move.l 298(sp),d0
    66d4:	|      moveq #83,d1
    66d6:	|      cmp.l d0,d1
    66d8:	|  /-- beq.s 66e0 <openAndVerify+0xd4>
    66da:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    66e0:	|  \-> move.l 306(sp),294(sp)
    66e6:	|      move.l 1c9cc <DOSBase>,d0
    66ec:	|      movea.l d0,a6
    66ee:	|      move.l 294(sp),d1
    66f2:	|      jsr -306(a6)
    66f6:	|      move.l d0,290(sp)
    66fa:	|      move.l 290(sp),d0
    66fe:	|      moveq #76,d1
    6700:	|      cmp.l d0,d1
    6702:	|  /-- beq.s 670a <openAndVerify+0xfe>
    6704:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    670a:	|  \-> move.l 306(sp),286(sp)
    6710:	|      move.l 1c9cc <DOSBase>,d0
    6716:	|      movea.l d0,a6
    6718:	|      move.l 286(sp),d1
    671c:	|      jsr -306(a6)
    6720:	|      move.l d0,282(sp)
    6724:	|      move.l 282(sp),d0
    6728:	|      moveq #85,d1
    672a:	|      cmp.l d0,d1
    672c:	|  /-- beq.s 6734 <openAndVerify+0x128>
    672e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6734:	|  \-> move.l 306(sp),278(sp)
    673a:	|      move.l 1c9cc <DOSBase>,d0
    6740:	|      movea.l d0,a6
    6742:	|      move.l 278(sp),d1
    6746:	|      jsr -306(a6)
    674a:	|      move.l d0,274(sp)
    674e:	|      move.l 274(sp),d0
    6752:	|      moveq #68,d1
    6754:	|      cmp.l d0,d1
    6756:	|  /-- beq.s 675e <openAndVerify+0x152>
    6758:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    675e:	|  \-> move.l 306(sp),270(sp)
    6764:	|      move.l 1c9cc <DOSBase>,d0
    676a:	|      movea.l d0,a6
    676c:	|      move.l 270(sp),d1
    6770:	|      jsr -306(a6)
    6774:	|      move.l d0,266(sp)
    6778:	|      move.l 266(sp),d1
    677c:	|      move.b 16(sp),d0
    6780:	|      ext.w d0
    6782:	|      movea.w d0,a0
    6784:	|      cmpa.l d1,a0
    6786:	|  /-- beq.s 678e <openAndVerify+0x182>
    6788:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    678e:	|  \-> move.l 306(sp),262(sp)
    6794:	|      move.l 1c9cc <DOSBase>,d0
    679a:	|      movea.l d0,a6
    679c:	|      move.l 262(sp),d1
    67a0:	|      jsr -306(a6)
    67a4:	|      move.l d0,258(sp)
    67a8:	|      move.l 258(sp),d1
    67ac:	|      move.b 14(sp),d0
    67b0:	|      ext.w d0
    67b2:	|      movea.w d0,a0
    67b4:	|      cmpa.l d1,a0
    67b6:	|  /-- beq.s 67be <openAndVerify+0x1b2>
    67b8:	|  |   move.w #1,322(sp)
	if (headerBad) {
    67be:	|  \-> tst.w 322(sp)
    67c2:	|  /-- beq.s 681a <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    67c4:	|  |   move.l 1c9cc <DOSBase>,d0
    67ca:	|  |   movea.l d0,a6
    67cc:	|  |   jsr -60(a6)
    67d0:	|  |   move.l d0,174(sp)
    67d4:	|  |   move.l 174(sp),d0
    67d8:	|  |   move.l d0,170(sp)
    67dc:	|  |   move.l #101250,166(sp)
    67e4:	|  |   moveq #31,d0
    67e6:	|  |   move.l d0,162(sp)
    67ea:	|  |   move.l 1c9cc <DOSBase>,d0
    67f0:	|  |   movea.l d0,a6
    67f2:	|  |   move.l 170(sp),d1
    67f6:	|  |   move.l 166(sp),d2
    67fa:	|  |   move.l 162(sp),d3
    67fe:	|  |   jsr -48(a6)
    6802:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6806:	|  |   pea 18b82 <PutChar+0xe10>
    680c:	|  |   jsr 1729e <KPrintF>
    6812:	|  |   addq.l #4,sp
		return NULL;
    6814:	|  |   moveq #0,d0
    6816:	+--|-- bra.w 6972 <openAndVerify+0x366>
	}
	FGetC (fp);
    681a:	|  \-> move.l 306(sp),254(sp)
    6820:	|      move.l 1c9cc <DOSBase>,d0
    6826:	|      movea.l d0,a6
    6828:	|      move.l 254(sp),d1
    682c:	|      jsr -306(a6)
    6830:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6834:	|      nop
    6836:	|  /-> move.l 306(sp),246(sp)
    683c:	|  |   move.l 1c9cc <DOSBase>,d0
    6842:	|  |   movea.l d0,a6
    6844:	|  |   move.l 246(sp),d1
    6848:	|  |   jsr -306(a6)
    684c:	|  |   move.l d0,242(sp)
    6850:	|  |   move.l 242(sp),d0
    6854:	|  \-- bne.s 6836 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6856:	|      move.l 306(sp),238(sp)
    685c:	|      move.l 1c9cc <DOSBase>,d0
    6862:	|      movea.l d0,a6
    6864:	|      move.l 238(sp),d1
    6868:	|      jsr -306(a6)
    686c:	|      move.l d0,234(sp)
    6870:	|      move.l 234(sp),d0
    6874:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    6878:	|      move.l 306(sp),226(sp)
    687e:	|      move.l 1c9cc <DOSBase>,d0
    6884:	|      movea.l d0,a6
    6886:	|      move.l 226(sp),d1
    688a:	|      jsr -306(a6)
    688e:	|      move.l d0,222(sp)
    6892:	|      move.l 222(sp),d0
    6896:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    689a:	|      move.l 230(sp),d0
    689e:	|      lsl.l #8,d0
    68a0:	|      add.l 218(sp),d0
    68a4:	|      movea.l 344(sp),a0
    68a8:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    68aa:	|      movea.l 344(sp),a0
    68ae:	|      move.l (a0),d0
    68b0:	|      cmpi.l #514,d0
    68b6:	|  /-- ble.s 690c <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    68b8:	|  |   move.l 1c9cc <DOSBase>,d0
    68be:	|  |   movea.l d0,a6
    68c0:	|  |   jsr -60(a6)
    68c4:	|  |   move.l d0,194(sp)
    68c8:	|  |   move.l 194(sp),d0
    68cc:	|  |   move.l d0,190(sp)
    68d0:	|  |   move.l #101277,186(sp)
    68d8:	|  |   moveq #100,d1
    68da:	|  |   move.l d1,182(sp)
    68de:	|  |   move.l 1c9cc <DOSBase>,d0
    68e4:	|  |   movea.l d0,a6
    68e6:	|  |   move.l 190(sp),d1
    68ea:	|  |   move.l 186(sp),d2
    68ee:	|  |   move.l 182(sp),d3
    68f2:	|  |   jsr -48(a6)
    68f6:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    68fa:	|  |   pea 18b9d <PutChar+0xe2b>
    6900:	|  |   jsr 1729e <KPrintF>
    6906:	|  |   addq.l #4,sp
		return NULL;
    6908:	|  |   moveq #0,d0
    690a:	+--|-- bra.s 6972 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    690c:	|  \-> movea.l 344(sp),a0
    6910:	|      move.l (a0),d0
    6912:	|      cmpi.l #257,d0
    6918:	|  /-- bgt.s 696e <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    691a:	|  |   move.l 1c9cc <DOSBase>,d0
    6920:	|  |   movea.l d0,a6
    6922:	|  |   jsr -60(a6)
    6926:	|  |   move.l d0,214(sp)
    692a:	|  |   move.l 214(sp),d0
    692e:	|  |   move.l d0,210(sp)
    6932:	|  |   move.l #101346,206(sp)
    693a:	|  |   moveq #100,d0
    693c:	|  |   move.l d0,202(sp)
    6940:	|  |   move.l 1c9cc <DOSBase>,d0
    6946:	|  |   movea.l d0,a6
    6948:	|  |   move.l 210(sp),d1
    694c:	|  |   move.l 206(sp),d2
    6950:	|  |   move.l 202(sp),d3
    6954:	|  |   jsr -48(a6)
    6958:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    695c:	|  |   pea 18be2 <PutChar+0xe70>
    6962:	|  |   jsr 1729e <KPrintF>
    6968:	|  |   addq.l #4,sp
		return NULL;
    696a:	|  |   moveq #0,d0
    696c:	+--|-- bra.s 6972 <openAndVerify+0x366>
	}
	return fp;
    696e:	|  \-> move.l 306(sp),d0
}
    6972:	\----> movem.l (sp)+,d2-d3/a6
    6976:	       lea 312(sp),sp
    697a:	       rts

0000697c <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    697c:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    697e:	          move.l #117084,(sp)
	while (* huntAndDestroy) {
    6984:	   /----- bra.s 69b0 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    6986:	/--|----> movea.l (sp),a0
    6988:	|  |      move.l (a0),d0
    698a:	|  |      cmp.l 8(sp),d0
    698e:	|  |  /-- bne.s 69a6 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    6990:	|  |  |   movea.l (sp),a0
    6992:	|  |  |   movea.l (a0),a0
    6994:	|  |  |   move.l 44(a0),d0
    6998:	|  |  |   movea.l (sp),a0
    699a:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    699c:	|  |  |   movea.l 8(sp),a0
    69a0:	|  |  |   clr.l 44(a0)
    69a4:	|  +--|-- bra.s 69b0 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    69a6:	|  |  \-> movea.l (sp),a0
    69a8:	|  |      move.l (a0),d0
    69aa:	|  |      moveq #44,d1
    69ac:	|  |      add.l d0,d1
    69ae:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    69b0:	|  \----> movea.l (sp),a0
    69b2:	|         move.l (a0),d0
    69b4:	\-------- bne.s 6986 <pauseFunction+0xa>
		}
	}
}
    69b6:	          nop
    69b8:	          nop
    69ba:	          addq.l #4,sp
    69bc:	          rts

000069be <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    69be:	move.l 1c95c <allRunningFunctions>,d0
    69c4:	movea.l 4(sp),a0
    69c8:	move.l d0,44(a0)
	allRunningFunctions = fun;
    69cc:	move.l 4(sp),1c95c <allRunningFunctions>
}
    69d4:	nop
    69d6:	rts

000069d8 <runSludge>:

BOOL runSludge () {
    69d8:	                   lea -12(sp),sp
    69dc:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    69de:	                   move.l 1c95c <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    69e6:	      /----------- bra.s 6a62 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    69e8:	   /--|----------> movea.l 12(sp),a0
    69ec:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    69f2:	   |  |            movea.l 12(sp),a0
    69f6:	   |  |            move.b 56(a0),d0
    69fa:	   |  |  /-------- bne.s 6a5c <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    69fc:	   |  |  |         movea.l 12(sp),a0
    6a00:	   |  |  |         move.l 12(a0),d0
    6a04:	   |  |  |  /----- beq.s 6a2e <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    6a06:	   |  |  |  |      movea.l 12(sp),a0
    6a0a:	   |  |  |  |      move.l 12(a0),d0
    6a0e:	   |  |  |  |  /-- bpl.s 6a1a <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    6a10:	   |  |  |  |  |   movea.l 12(sp),a0
    6a14:	   |  |  |  |  |   clr.l 12(a0)
    6a18:	   |  |  +--|--|-- bra.s 6a5c <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    6a1a:	   |  |  |  |  \-> movea.l 12(sp),a0
    6a1e:	   |  |  |  |      move.l 12(a0),d0
    6a22:	   |  |  |  |      subq.l #1,d0
    6a24:	   |  |  |  |      movea.l 12(sp),a0
    6a28:	   |  |  |  |      move.l d0,12(a0)
    6a2c:	   |  |  +--|----- bra.s 6a5c <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    6a2e:	   |  |  |  \----> movea.l 12(sp),a0
    6a32:	   |  |  |         move.w 50(a0),d0
    6a36:	   |  |  |     /-- beq.s 6a46 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    6a38:	   |  |  |     |   movea.l 12(sp),a0
    6a3c:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    6a40:	   |  |  |     |   jsr 8078 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    6a46:	   |  |  |     \-> move.l 12(sp),-(sp)
    6a4a:	   |  |  |         jsr 49a6 <continueFunction>
    6a50:	   |  |  |         addq.l #4,sp
    6a52:	   |  |  |         tst.w d0
    6a54:	   |  |  +-------- bne.s 6a5c <runSludge+0x84>
					return FALSE;
    6a56:	   |  |  |         clr.w d0
    6a58:	/--|--|--|-------- bra.w 6ae8 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    6a5c:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    6a62:	|  |  \----------> tst.l 12(sp)
    6a66:	|  \-------------- bne.s 69e8 <runSludge+0x10>
	}

	if (loadNow) {
    6a68:	|                  move.l 1c990 <loadNow>,d0
    6a6e:	|        /-------- beq.s 6ae6 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    6a70:	|        |         movea.l 1c990 <loadNow>,a0
    6a76:	|        |         move.b (a0),d0
    6a78:	|        |         cmpi.b #58,d0
    6a7c:	|        |  /----- bne.s 6ab0 <runSludge+0xd8>
			saveGame (loadNow + 1);
    6a7e:	|        |  |      move.l 1c990 <loadNow>,d0
    6a84:	|        |  |      addq.l #1,d0
    6a86:	|        |  |      move.l d0,-(sp)
    6a88:	|        |  |      jsr c810 <saveGame>
    6a8e:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    6a90:	|        |  |      movea.l 1ca8e <saverFunc>,a0
    6a96:	|        |  |      lea 28(a0),a0
    6a9a:	|        |  |      pea 1 <_start+0x1>
    6a9e:	|        |  |      pea 1 <_start+0x1>
    6aa2:	|        |  |      move.l a0,-(sp)
    6aa4:	|        |  |      jsr 15176 <setVariable>
    6aaa:	|        |  |      lea 12(sp),sp
    6aae:	|        |  |  /-- bra.s 6ac8 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    6ab0:	|        |  \--|-> move.l 1c990 <loadNow>,d0
    6ab6:	|        |     |   move.l d0,-(sp)
    6ab8:	|        |     |   jsr c358 <loadGame>
    6abe:	|        |     |   addq.l #4,sp
    6ac0:	|        |     |   tst.w d0
    6ac2:	|        |     +-- bne.s 6ac8 <runSludge+0xf0>
    6ac4:	|        |     |   clr.w d0
    6ac6:	+--------|-----|-- bra.s 6ae8 <runSludge+0x110>
		}
		FreeVec(loadNow);
    6ac8:	|        |     \-> move.l 1c990 <loadNow>,8(sp)
    6ad0:	|        |         move.l 1c9c4 <SysBase>,d0
    6ad6:	|        |         movea.l d0,a6
    6ad8:	|        |         movea.l 8(sp),a1
    6adc:	|        |         jsr -690(a6)
		loadNow = NULL;
    6ae0:	|        |         clr.l 1c990 <loadNow>
	}

	return TRUE;
    6ae6:	|        \-------> moveq #1,d0
}
    6ae8:	\----------------> movea.l (sp)+,a6
    6aea:	                   lea 12(sp),sp
    6aee:	                   rts

00006af0 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    6af0:	movea.l 1c33c <currentEvents>,a0
    6af6:	move.l (a0),d0
    6af8:	move.l 4(sp),-(sp)
    6afc:	move.l d0,-(sp)
    6afe:	jsr 8d0 <put2bytes>
    6b04:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    6b06:	movea.l 1c33c <currentEvents>,a0
    6b0c:	move.l 4(a0),d0
    6b10:	move.l 4(sp),-(sp)
    6b14:	move.l d0,-(sp)
    6b16:	jsr 8d0 <put2bytes>
    6b1c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    6b1e:	movea.l 1c33c <currentEvents>,a0
    6b24:	move.l 8(a0),d0
    6b28:	move.l 4(sp),-(sp)
    6b2c:	move.l d0,-(sp)
    6b2e:	jsr 8d0 <put2bytes>
    6b34:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    6b36:	movea.l 1c33c <currentEvents>,a0
    6b3c:	move.l 12(a0),d0
    6b40:	move.l 4(sp),-(sp)
    6b44:	move.l d0,-(sp)
    6b46:	jsr 8d0 <put2bytes>
    6b4c:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    6b4e:	movea.l 1c33c <currentEvents>,a0
    6b54:	move.l 16(a0),d0
    6b58:	move.l 4(sp),-(sp)
    6b5c:	move.l d0,-(sp)
    6b5e:	jsr 8d0 <put2bytes>
    6b64:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    6b66:	movea.l 1c33c <currentEvents>,a0
    6b6c:	move.l 20(a0),d0
    6b70:	move.l 4(sp),-(sp)
    6b74:	move.l d0,-(sp)
    6b76:	jsr 8d0 <put2bytes>
    6b7c:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6b7e:	movea.l 1c33c <currentEvents>,a0
    6b84:	move.l 24(a0),d0
    6b88:	move.l 4(sp),-(sp)
    6b8c:	move.l d0,-(sp)
    6b8e:	jsr 8d0 <put2bytes>
    6b94:	addq.l #8,sp
}
    6b96:	nop
    6b98:	rts

00006b9a <sludgeDisplay>:

void sludgeDisplay () {					
    6b9a:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6b9c:	move.l #14675968,(sp)
	displayCursor();
    6ba2:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    6ba8:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6bae:	jsr 2c40 <CstRestoreScreen>
	drawPeople();
    6bb4:	jsr a178 <drawPeople>
	CstSwapBuffer();
    6bba:	jsr 3976 <CstSwapBuffer>
}
    6bc0:	nop
    6bc2:	addq.l #4,sp
    6bc4:	rts

00006bc6 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    6bc6:	      /-- bra.s 6be6 <stackSetByIndex+0x20>
		vS = vS->next;
    6bc8:	/-----|-> movea.l 4(sp),a0
    6bcc:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6bd2:	|     +-- bne.s 6be6 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6bd4:	|     |   pea 18c29 <PutChar+0xeb7>
    6bda:	|     |   jsr 1729e <KPrintF>
    6be0:	|     |   addq.l #4,sp
			return FALSE;
    6be2:	|     |   clr.w d0
    6be4:	|  /--|-- bra.s 6c08 <stackSetByIndex+0x42>
	while (theIndex--) {
    6be6:	|  |  \-> move.l 8(sp),d0
    6bea:	|  |      move.l d0,d1
    6bec:	|  |      subq.l #1,d1
    6bee:	|  |      move.l d1,8(sp)
    6bf2:	|  |      tst.l d0
    6bf4:	\--|----- bne.s 6bc8 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    6bf6:	   |      move.l 4(sp),d0
    6bfa:	   |      move.l d0,-(sp)
    6bfc:	   |      move.l 16(sp),-(sp)
    6c00:	   |      jsr 14d3e <copyVariable>
    6c06:	   |      addq.l #8,sp
}
    6c08:	   \----> rts

00006c0a <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6c0a:	             lea -24(sp),sp
    6c0e:	             move.l a6,-(sp)
    6c10:	             move.l 48(sp),d0
    6c14:	             move.w d0,d0
    6c16:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6c1a:	             moveq #58,d0
    6c1c:	             move.l d0,24(sp)
    6c20:	             clr.l 20(sp)
    6c24:	             move.l 1c9c4 <SysBase>,d0
    6c2a:	             movea.l d0,a6
    6c2c:	             move.l 24(sp),d0
    6c30:	             move.l 20(sp),d1
    6c34:	             jsr -684(a6)
    6c38:	             move.l d0,16(sp)
    6c3c:	             move.l 16(sp),d0
    6c40:	             move.l d0,12(sp)
	if(!newFunc) {
    6c44:	         /-- bne.s 6c5a <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    6c46:	         |   pea 18c42 <PutChar+0xed0>
    6c4c:	         |   jsr 1729e <KPrintF>
    6c52:	         |   addq.l #4,sp
		return 0;
    6c54:	         |   moveq #0,d0
    6c56:	/--------|-- bra.w 6d70 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6c5a:	|        \-> move.l 32(sp),d0
    6c5e:	|            movea.l 12(sp),a0
    6c62:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    6c64:	|            move.l 12(sp),-(sp)
    6c68:	|            jsr 637a <loadFunctionCode>
    6c6e:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6c70:	|            movea.l 12(sp),a0
    6c74:	|            move.l 16(a0),d1
    6c78:	|            move.l 36(sp),d0
    6c7c:	|            cmp.l d1,d0
    6c7e:	|        /-- beq.s 6c94 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6c80:	|        |   pea 18c6b <PutChar+0xef9>
    6c86:	|        |   jsr 1729e <KPrintF>
    6c8c:	|        |   addq.l #4,sp
		return NULL; 
    6c8e:	|        |   moveq #0,d0
    6c90:	+--------|-- bra.w 6d70 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6c94:	|        \-> movea.l 12(sp),a0
    6c98:	|            move.l 16(a0),d1
    6c9c:	|            movea.l 12(sp),a0
    6ca0:	|            move.l 8(a0),d0
    6ca4:	|            cmp.l d1,d0
    6ca6:	|  /-------- bge.s 6d10 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6ca8:	|  |         pea 18c87 <PutChar+0xf15>
    6cae:	|  |         jsr 1729e <KPrintF>
    6cb4:	|  |         addq.l #4,sp
		return NULL; 
    6cb6:	|  |         moveq #0,d0
    6cb8:	+--|-------- bra.w 6d70 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6cbc:	|  |  /----> movea.l 44(sp),a0
    6cc0:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6cc4:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6cc8:	|  |  |      movea.l 44(sp),a0
    6ccc:	|  |  |      move.l (a0),d0
    6cce:	|  |  |  /-- bne.s 6ce4 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6cd0:	|  |  |  |   pea 18cb1 <PutChar+0xf3f>
    6cd6:	|  |  |  |   jsr 1729e <KPrintF>
    6cdc:	|  |  |  |   addq.l #4,sp
			return NULL;
    6cde:	|  |  |  |   moveq #0,d0
    6ce0:	+--|--|--|-- bra.w 6d70 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6ce4:	|  |  |  \-> movea.l 12(sp),a0
    6ce8:	|  |  |      move.l 20(a0),d1
    6cec:	|  |  |      move.l 36(sp),d0
    6cf0:	|  |  |      lsl.l #3,d0
    6cf2:	|  |  |      add.l d0,d1
    6cf4:	|  |  |      move.l 8(sp),d0
    6cf8:	|  |  |      move.l d1,-(sp)
    6cfa:	|  |  |      move.l d0,-(sp)
    6cfc:	|  |  |      jsr 14d3e <copyVariable>
    6d02:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6d04:	|  |  |      move.l 44(sp),-(sp)
    6d08:	|  |  |      jsr 15208 <trimStack>
    6d0e:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6d10:	|  \--|----> tst.l 36(sp)
    6d14:	|     \----- bne.s 6cbc <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6d16:	|            movea.l 12(sp),a0
    6d1a:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    6d1e:	|            movea.l 12(sp),a0
    6d22:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    6d26:	|            movea.l 12(sp),a0
    6d2a:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    6d30:	|            movea.l 12(sp),a0
    6d34:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    6d3a:	|            movea.l 12(sp),a0
    6d3e:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    6d42:	|            movea.l 12(sp),a0
    6d46:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    6d4a:	|            movea.l 12(sp),a0
    6d4e:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    6d52:	|            movea.l 12(sp),a0
    6d56:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6d5a:	|            movea.l 12(sp),a0
    6d5e:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6d62:	|            move.l 12(sp),-(sp)
    6d66:	|            jsr 69be <restartFunction>
    6d6c:	|            addq.l #4,sp
	return 1;
    6d6e:	|            moveq #1,d0
}
    6d70:	\----------> movea.l (sp)+,a6
    6d72:	             lea 24(sp),sp
    6d76:	             rts

00006d78 <unfreezeSubs>:

void unfreezeSubs () {
    6d78:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6d7a:	          move.l 1c95c <allRunningFunctions>,(sp)

	while (thisFunction) {
    6d80:	   /----- bra.s 6d9e <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6d82:	/--|----> movea.l (sp),a0
    6d84:	|  |      move.b 56(a0),d0
    6d88:	|  |  /-- beq.s 6d98 <unfreezeSubs+0x20>
    6d8a:	|  |  |   movea.l (sp),a0
    6d8c:	|  |  |   move.b 56(a0),d0
    6d90:	|  |  |   subq.b #1,d0
    6d92:	|  |  |   movea.l (sp),a0
    6d94:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6d98:	|  |  \-> movea.l (sp),a0
    6d9a:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6d9e:	|  \----> tst.l (sp)
    6da0:	\-------- bne.s 6d82 <unfreezeSubs+0xa>
	}
}
    6da2:	          nop
    6da4:	          nop
    6da6:	          addq.l #4,sp
    6da8:	          rts

00006daa <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6daa:	clr.w 1c348 <sliceBusy>
}
    6db0:	nop
    6db2:	rts

00006db4 <getNumberedString>:

char * getNumberedString (int value) {
    6db4:	       lea -56(sp),sp
    6db8:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6dbc:	       move.w 1c348 <sliceBusy>,d0
    6dc2:	   /-- beq.s 6e0c <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6dc4:	   |   move.l 1c9cc <DOSBase>,d0
    6dca:	   |   movea.l d0,a6
    6dcc:	   |   jsr -60(a6)
    6dd0:	   |   move.l d0,28(sp)
    6dd4:	   |   move.l 28(sp),d0
    6dd8:	   |   move.l d0,24(sp)
    6ddc:	   |   move.l #101628,20(sp)
    6de4:	   |   moveq #76,d0
    6de6:	   |   move.l d0,16(sp)
    6dea:	   |   move.l 1c9cc <DOSBase>,d0
    6df0:	   |   movea.l d0,a6
    6df2:	   |   move.l 24(sp),d1
    6df6:	   |   move.l 20(sp),d2
    6dfa:	   |   move.l 16(sp),d3
    6dfe:	   |   jsr -48(a6)
    6e02:	   |   move.l d0,12(sp)
		return NULL;
    6e06:	   |   moveq #0,d0
    6e08:	/--|-- bra.w 6ea8 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6e0c:	|  \-> move.l 1c9ac <bigDataFile>,64(sp)
    6e14:	|      move.l 72(sp),d0
    6e18:	|      add.l d0,d0
    6e1a:	|      add.l d0,d0
    6e1c:	|      move.l d0,d1
    6e1e:	|      move.l 1c9b8 <startOfTextIndex>,d0
    6e24:	|      add.l d1,d0
    6e26:	|      move.l d0,60(sp)
    6e2a:	|      moveq #-1,d0
    6e2c:	|      move.l d0,56(sp)
    6e30:	|      move.l 1c9cc <DOSBase>,d0
    6e36:	|      movea.l d0,a6
    6e38:	|      move.l 64(sp),d1
    6e3c:	|      move.l 60(sp),d2
    6e40:	|      move.l 56(sp),d3
    6e44:	|      jsr -66(a6)
    6e48:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    6e4c:	|      move.l 1c9ac <bigDataFile>,d0
    6e52:	|      move.l d0,-(sp)
    6e54:	|      jsr 718 <get4bytes>
    6e5a:	|      addq.l #4,sp
    6e5c:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6e60:	|      move.l 1c9ac <bigDataFile>,48(sp)
    6e68:	|      move.l 72(sp),44(sp)
    6e6e:	|      moveq #-1,d0
    6e70:	|      move.l d0,40(sp)
    6e74:	|      move.l 1c9cc <DOSBase>,d0
    6e7a:	|      movea.l d0,a6
    6e7c:	|      move.l 48(sp),d1
    6e80:	|      move.l 44(sp),d2
    6e84:	|      move.l 40(sp),d3
    6e88:	|      jsr -66(a6)
    6e8c:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6e90:	|      move.l 1c9ac <bigDataFile>,d0
    6e96:	|      move.l d0,-(sp)
    6e98:	|      jsr b02 <readString>
    6e9e:	|      addq.l #4,sp
    6ea0:	|      move.l d0,32(sp)
	
	return s;
    6ea4:	|      move.l 32(sp),d0
}
    6ea8:	\----> movem.l (sp)+,d2-d3/a6
    6eac:	       lea 56(sp),sp
    6eb0:	       rts

00006eb2 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6eb2:	       lea -32(sp),sp
    6eb6:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6eba:	       move.w 1c348 <sliceBusy>,d0
    6ec0:	   /-- beq.s 6edc <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6ec2:	   |   pea 18d49 <PutChar+0xfd7>
    6ec8:	   |   pea 18d67 <PutChar+0xff5>
    6ece:	   |   jsr 1729e <KPrintF>
    6ed4:	   |   addq.l #8,sp
		return 0;
    6ed6:	   |   moveq #0,d0
    6ed8:	/--|-- bra.w 6f70 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6edc:	|  \-> move.l 1c9ac <bigDataFile>,40(sp)
    6ee4:	|      move.l 48(sp),d0
    6ee8:	|      add.l d0,d0
    6eea:	|      add.l d0,d0
    6eec:	|      move.l d0,d1
    6eee:	|      move.l 1c9b4 <startOfDataIndex>,d0
    6ef4:	|      add.l d1,d0
    6ef6:	|      move.l d0,36(sp)
    6efa:	|      moveq #-1,d0
    6efc:	|      move.l d0,32(sp)
    6f00:	|      move.l 1c9cc <DOSBase>,d0
    6f06:	|      movea.l d0,a6
    6f08:	|      move.l 40(sp),d1
    6f0c:	|      move.l 36(sp),d2
    6f10:	|      move.l 32(sp),d3
    6f14:	|      jsr -66(a6)
    6f18:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6f1c:	|      move.l 1c9ac <bigDataFile>,24(sp)
    6f24:	|      move.l 1c9ac <bigDataFile>,d0
    6f2a:	|      move.l d0,-(sp)
    6f2c:	|      jsr 718 <get4bytes>
    6f32:	|      addq.l #4,sp
    6f34:	|      move.l d0,20(sp)
    6f38:	|      clr.l 16(sp)
    6f3c:	|      move.l 1c9cc <DOSBase>,d0
    6f42:	|      movea.l d0,a6
    6f44:	|      move.l 24(sp),d1
    6f48:	|      move.l 20(sp),d2
    6f4c:	|      move.l 16(sp),d3
    6f50:	|      jsr -66(a6)
    6f54:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6f58:	|      move.w #1,1c348 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6f60:	|      move.l 1c9ac <bigDataFile>,d0
    6f66:	|      move.l d0,-(sp)
    6f68:	|      jsr 718 <get4bytes>
    6f6e:	|      addq.l #4,sp
}
    6f70:	\----> movem.l (sp)+,d2-d3/a6
    6f74:	       lea 32(sp),sp
    6f78:	       rts

00006f7a <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6f7a:	       lea -32(sp),sp
    6f7e:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6f82:	       move.w 1c348 <sliceBusy>,d0
    6f88:	   /-- beq.s 6fa4 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6f8a:	   |   pea 18d49 <PutChar+0xfd7>
    6f90:	   |   pea 18d67 <PutChar+0xff5>
    6f96:	   |   jsr 1729e <KPrintF>
    6f9c:	   |   addq.l #8,sp
        return FALSE;
    6f9e:	   |   clr.w d0
    6fa0:	/--|-- bra.w 7030 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6fa4:	|  \-> move.l 1c9ac <bigDataFile>,40(sp)
    6fac:	|      move.l 48(sp),d0
    6fb0:	|      add.l d0,d0
    6fb2:	|      add.l d0,d0
    6fb4:	|      move.l d0,d1
    6fb6:	|      move.l 1c9c0 <startOfObjectIndex>,d0
    6fbc:	|      add.l d1,d0
    6fbe:	|      move.l d0,36(sp)
    6fc2:	|      moveq #-1,d0
    6fc4:	|      move.l d0,32(sp)
    6fc8:	|      move.l 1c9cc <DOSBase>,d0
    6fce:	|      movea.l d0,a6
    6fd0:	|      move.l 40(sp),d1
    6fd4:	|      move.l 36(sp),d2
    6fd8:	|      move.l 32(sp),d3
    6fdc:	|      jsr -66(a6)
    6fe0:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6fe4:	|      move.l 1c9ac <bigDataFile>,24(sp)
    6fec:	|      move.l 1c9ac <bigDataFile>,d0
    6ff2:	|      move.l d0,-(sp)
    6ff4:	|      jsr 718 <get4bytes>
    6ffa:	|      addq.l #4,sp
    6ffc:	|      move.l d0,20(sp)
    7000:	|      moveq #-1,d0
    7002:	|      move.l d0,16(sp)
    7006:	|      move.l 1c9cc <DOSBase>,d0
    700c:	|      movea.l d0,a6
    700e:	|      move.l 24(sp),d1
    7012:	|      move.l 20(sp),d2
    7016:	|      move.l 16(sp),d3
    701a:	|      jsr -66(a6)
    701e:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7022:	|      move.w #1,1c348 <sliceBusy>
    702a:	|      move.w 1c348 <sliceBusy>,d0
}
    7030:	\----> movem.l (sp)+,d2-d3/a6
    7034:	       lea 32(sp),sp
    7038:	       rts

0000703a <openSubSlice>:

BOOL openSubSlice (int num) {
    703a:	       lea -32(sp),sp
    703e:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7042:	       move.w 1c348 <sliceBusy>,d0
    7048:	   /-- beq.s 7064 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    704a:	   |   pea 18d49 <PutChar+0xfd7>
    7050:	   |   pea 18d67 <PutChar+0xff5>
    7056:	   |   jsr 1729e <KPrintF>
    705c:	   |   addq.l #8,sp
		return FALSE;
    705e:	   |   clr.w d0
    7060:	/--|-- bra.w 70f0 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7064:	|  \-> move.l 1c9ac <bigDataFile>,40(sp)
    706c:	|      move.l 48(sp),d0
    7070:	|      add.l d0,d0
    7072:	|      add.l d0,d0
    7074:	|      move.l d0,d1
    7076:	|      move.l 1c9bc <startOfSubIndex>,d0
    707c:	|      add.l d1,d0
    707e:	|      move.l d0,36(sp)
    7082:	|      moveq #-1,d0
    7084:	|      move.l d0,32(sp)
    7088:	|      move.l 1c9cc <DOSBase>,d0
    708e:	|      movea.l d0,a6
    7090:	|      move.l 40(sp),d1
    7094:	|      move.l 36(sp),d2
    7098:	|      move.l 32(sp),d3
    709c:	|      jsr -66(a6)
    70a0:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    70a4:	|      move.l 1c9ac <bigDataFile>,24(sp)
    70ac:	|      move.l 1c9ac <bigDataFile>,d0
    70b2:	|      move.l d0,-(sp)
    70b4:	|      jsr 718 <get4bytes>
    70ba:	|      addq.l #4,sp
    70bc:	|      move.l d0,20(sp)
    70c0:	|      moveq #-1,d0
    70c2:	|      move.l d0,16(sp)
    70c6:	|      move.l 1c9cc <DOSBase>,d0
    70cc:	|      movea.l d0,a6
    70ce:	|      move.l 24(sp),d1
    70d2:	|      move.l 20(sp),d2
    70d6:	|      move.l 16(sp),d3
    70da:	|      jsr -66(a6)
    70de:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    70e2:	|      move.w #1,1c348 <sliceBusy>
    70ea:	|      move.w 1c348 <sliceBusy>,d0
}
    70f0:	\----> movem.l (sp)+,d2-d3/a6
    70f4:	       lea 32(sp),sp
    70f8:	       rts

000070fa <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    70fa:	       lea -180(sp),sp
    70fe:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7102:	       tst.l 196(sp)
    7106:	/----- beq.s 7146 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7108:	|      move.l 196(sp),1c9ac <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7110:	|      move.l 196(sp),168(sp)
    7116:	|      clr.l 164(sp)
    711a:	|      clr.l 160(sp)
    711e:	|      move.l 1c9cc <DOSBase>,d0
    7124:	|      movea.l d0,a6
    7126:	|      move.l 168(sp),d1
    712a:	|      move.l 164(sp),d2
    712e:	|      move.l 160(sp),d3
    7132:	|      jsr -66(a6)
    7136:	|      move.l d0,156(sp)
    713a:	|      move.l 156(sp),d0
    713e:	|      move.l d0,1c9b0 <startIndex>
    7144:	|  /-- bra.s 7180 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7146:	\--|-> move.l 1c9ac <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    714e:	   |   move.l 196(sp),184(sp)
    7154:	   |   move.l 1c9b0 <startIndex>,d0
    715a:	   |   move.l d0,180(sp)
    715e:	   |   moveq #-1,d0
    7160:	   |   move.l d0,176(sp)
    7164:	   |   move.l 1c9cc <DOSBase>,d0
    716a:	   |   movea.l d0,a6
    716c:	   |   move.l 184(sp),d1
    7170:	   |   move.l 180(sp),d2
    7174:	   |   move.l 176(sp),d3
    7178:	   |   jsr -66(a6)
    717c:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    7180:	   \-> clr.w 1c348 <sliceBusy>

	if (skipBefore > numLanguages) {
    7186:	       move.l 204(sp),d0
    718a:	       cmp.l 200(sp),d0
    718e:	   /-- bls.s 71a2 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    7190:	   |   pea 18d81 <PutChar+0x100f>
    7196:	   |   jsr 1729e <KPrintF>
    719c:	   |   addq.l #4,sp
		skipBefore = 0;
    719e:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    71a2:	   \-> move.l 200(sp),d0
    71a6:	       sub.l 204(sp),d0
    71aa:	       move.l d0,188(sp)
	while (skipBefore) {
    71ae:	   /-- bra.s 71ec <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    71b0:	/--|-> move.l 196(sp),24(sp)
    71b6:	|  |   move.l 196(sp),-(sp)
    71ba:	|  |   jsr 718 <get4bytes>
    71c0:	|  |   addq.l #4,sp
    71c2:	|  |   move.l d0,20(sp)
    71c6:	|  |   moveq #-1,d0
    71c8:	|  |   move.l d0,16(sp)
    71cc:	|  |   move.l 1c9cc <DOSBase>,d0
    71d2:	|  |   movea.l d0,a6
    71d4:	|  |   move.l 24(sp),d1
    71d8:	|  |   move.l 20(sp),d2
    71dc:	|  |   move.l 16(sp),d3
    71e0:	|  |   jsr -66(a6)
    71e4:	|  |   move.l d0,12(sp)
		skipBefore --;
    71e8:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    71ec:	|  \-> tst.l 204(sp)
    71f0:	\----- bne.s 71b0 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    71f2:	       move.l 196(sp),152(sp)
    71f8:	       clr.l 148(sp)
    71fc:	       clr.l 144(sp)
    7200:	       move.l 1c9cc <DOSBase>,d0
    7206:	       movea.l d0,a6
    7208:	       move.l 152(sp),d1
    720c:	       move.l 148(sp),d2
    7210:	       move.l 144(sp),d3
    7214:	       jsr -66(a6)
    7218:	       move.l d0,140(sp)
    721c:	       move.l 140(sp),d0
    7220:	       addq.l #4,d0
    7222:	       move.l d0,1c9b8 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7228:	       move.l 196(sp),136(sp)
    722e:	       move.l 196(sp),-(sp)
    7232:	       jsr 718 <get4bytes>
    7238:	       addq.l #4,sp
    723a:	       move.l d0,132(sp)
    723e:	       moveq #-1,d0
    7240:	       move.l d0,128(sp)
    7244:	       move.l 1c9cc <DOSBase>,d0
    724a:	       movea.l d0,a6
    724c:	       move.l 136(sp),d1
    7250:	       move.l 132(sp),d2
    7254:	       move.l 128(sp),d3
    7258:	       jsr -66(a6)
    725c:	       move.l d0,124(sp)

	while (skipAfter) {
    7260:	   /-- bra.s 729e <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7262:	/--|-> move.l 196(sp),40(sp)
    7268:	|  |   move.l 196(sp),-(sp)
    726c:	|  |   jsr 718 <get4bytes>
    7272:	|  |   addq.l #4,sp
    7274:	|  |   move.l d0,36(sp)
    7278:	|  |   moveq #-1,d0
    727a:	|  |   move.l d0,32(sp)
    727e:	|  |   move.l 1c9cc <DOSBase>,d0
    7284:	|  |   movea.l d0,a6
    7286:	|  |   move.l 40(sp),d1
    728a:	|  |   move.l 36(sp),d2
    728e:	|  |   move.l 32(sp),d3
    7292:	|  |   jsr -66(a6)
    7296:	|  |   move.l d0,28(sp)
		skipAfter --;
    729a:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    729e:	|  \-> tst.l 188(sp)
    72a2:	\----- bne.s 7262 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    72a4:	       move.l 196(sp),120(sp)
    72aa:	       clr.l 116(sp)
    72ae:	       clr.l 112(sp)
    72b2:	       move.l 1c9cc <DOSBase>,d0
    72b8:	       movea.l d0,a6
    72ba:	       move.l 120(sp),d1
    72be:	       move.l 116(sp),d2
    72c2:	       move.l 112(sp),d3
    72c6:	       jsr -66(a6)
    72ca:	       move.l d0,108(sp)
    72ce:	       move.l 108(sp),d0
    72d2:	       addq.l #4,d0
    72d4:	       move.l d0,1c9bc <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    72da:	       move.l 196(sp),104(sp)
    72e0:	       move.l 196(sp),-(sp)
    72e4:	       jsr 718 <get4bytes>
    72ea:	       addq.l #4,sp
    72ec:	       move.l d0,100(sp)
    72f0:	       clr.l 96(sp)
    72f4:	       move.l 1c9cc <DOSBase>,d0
    72fa:	       movea.l d0,a6
    72fc:	       move.l 104(sp),d1
    7300:	       move.l 100(sp),d2
    7304:	       move.l 96(sp),d3
    7308:	       jsr -66(a6)
    730c:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7310:	       move.l 196(sp),88(sp)
    7316:	       clr.l 84(sp)
    731a:	       clr.l 80(sp)
    731e:	       move.l 1c9cc <DOSBase>,d0
    7324:	       movea.l d0,a6
    7326:	       move.l 88(sp),d1
    732a:	       move.l 84(sp),d2
    732e:	       move.l 80(sp),d3
    7332:	       jsr -66(a6)
    7336:	       move.l d0,76(sp)
    733a:	       move.l 76(sp),d0
    733e:	       addq.l #4,d0
    7340:	       move.l d0,1c9c0 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7346:	       move.l 196(sp),72(sp)
    734c:	       move.l 196(sp),-(sp)
    7350:	       jsr 718 <get4bytes>
    7356:	       addq.l #4,sp
    7358:	       move.l d0,68(sp)
    735c:	       clr.l 64(sp)
    7360:	       move.l 1c9cc <DOSBase>,d0
    7366:	       movea.l d0,a6
    7368:	       move.l 72(sp),d1
    736c:	       move.l 68(sp),d2
    7370:	       move.l 64(sp),d3
    7374:	       jsr -66(a6)
    7378:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    737c:	       move.l 196(sp),56(sp)
    7382:	       clr.l 52(sp)
    7386:	       clr.l 48(sp)
    738a:	       move.l 1c9cc <DOSBase>,d0
    7390:	       movea.l d0,a6
    7392:	       move.l 56(sp),d1
    7396:	       move.l 52(sp),d2
    739a:	       move.l 48(sp),d3
    739e:	       jsr -66(a6)
    73a2:	       move.l d0,44(sp)
    73a6:	       move.l 44(sp),d0
    73aa:	       move.l d0,1c9b4 <startOfDataIndex>
    73b0:	       nop
    73b2:	       movem.l (sp)+,d2-d3/a6
    73b6:	       lea 180(sp),sp
    73ba:	       rts

000073bc <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    73bc:	    lea -20(sp),sp
    73c0:	    move.l a6,-(sp)
    73c2:	    move.l d7,-(sp)
	APTR vbr = 0;
    73c4:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    73c8:	    move.w #20090,10(sp)
    73ce:	    move.w #2049,12(sp)
    73d4:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    73da:	    movea.l 1c9c4 <SysBase>,a0
    73e0:	    move.w 296(a0),d0
    73e4:	    move.w d0,d0
    73e6:	    andi.l #65535,d0
    73ec:	    moveq #1,d1
    73ee:	    and.l d1,d0
    73f0:	/-- beq.s 741e <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    73f2:	|   lea 28(sp),a0
    73f6:	|   lea -18(a0),a0
    73fa:	|   move.l a0,20(sp)
    73fe:	|   move.l 1c9c4 <SysBase>,d0
    7404:	|   movea.l d0,a6
    7406:	|   move.l 20(sp),d7
    740a:	|   exg d7,a5
    740c:	|   jsr -30(a6)
    7410:	|   exg d7,a5
    7412:	|   move.l d0,16(sp)
    7416:	|   move.l 16(sp),d0
    741a:	|   move.l d0,24(sp)

	return vbr;
    741e:	\-> move.l 24(sp),d0
}
    7422:	    move.l (sp)+,d7
    7424:	    movea.l (sp)+,a6
    7426:	    lea 20(sp),sp
    742a:	    rts

0000742c <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    742c:	movea.l 1c9ea <VBR>,a0
    7432:	lea 108(a0),a0
    7436:	move.l 4(sp),(a0)
}
    743a:	nop
    743c:	rts

0000743e <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    743e:	movea.l 1c9ea <VBR>,a0
    7444:	move.l 108(a0),d0
}
    7448:	rts

0000744a <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    744a:	       subq.l #8,sp
    744c:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    744e:	       pea 18dca <PutChar+0x1058>
    7454:	       jsr 1729e <KPrintF>
    745a:	       addq.l #4,sp
	Forbid();
    745c:	       move.l 1c9c4 <SysBase>,d0
    7462:	       movea.l d0,a6
    7464:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7468:	       pea 18de2 <PutChar+0x1070>
    746e:	       jsr 1729e <KPrintF>
    7474:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7476:	       movea.l 1c9c8 <custom>,a0
    747c:	       move.w 16(a0),d0
    7480:	       move.w d0,1c9e8 <SystemADKCON>
	SystemInts=custom->intenar;
    7486:	       movea.l 1c9c8 <custom>,a0
    748c:	       move.w 28(a0),d0
    7490:	       move.w d0,1c9e4 <SystemInts>
	SystemDMA=custom->dmaconr;
    7496:	       movea.l 1c9c8 <custom>,a0
    749c:	       move.w 2(a0),d0
    74a0:	       move.w d0,1c9e6 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    74a6:	       movea.l 1c9d0 <GfxBase>,a0
    74ac:	       move.l 34(a0),d0
    74b0:	       move.l d0,1c9f2 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    74b6:	       pea 18e00 <PutChar+0x108e>
    74bc:	       jsr 1729e <KPrintF>
    74c2:	       addq.l #4,sp
	LoadView(0);
    74c4:	       clr.l 4(sp)
    74c8:	       move.l 1c9d0 <GfxBase>,d0
    74ce:	       movea.l d0,a6
    74d0:	       movea.l 4(sp),a1
    74d4:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    74d8:	       pea 18e16 <PutChar+0x10a4>
    74de:	       jsr 1729e <KPrintF>
    74e4:	       addq.l #4,sp
	WaitTOF();
    74e6:	       move.l 1c9d0 <GfxBase>,d0
    74ec:	       movea.l d0,a6
    74ee:	       jsr -270(a6)
	WaitTOF();
    74f2:	       move.l 1c9d0 <GfxBase>,d0
    74f8:	       movea.l d0,a6
    74fa:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    74fe:	       pea 18e2b <PutChar+0x10b9>
    7504:	       jsr 1729e <KPrintF>
    750a:	       addq.l #4,sp
	WaitVbl();
    750c:	       jsr 171d2 <WaitVbl>
	WaitVbl();
    7512:	       jsr 171d2 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7518:	       pea 18e40 <PutChar+0x10ce>
    751e:	       jsr 1729e <KPrintF>
    7524:	       addq.l #4,sp
	OwnBlitter();
    7526:	       move.l 1c9d0 <GfxBase>,d0
    752c:	       movea.l d0,a6
    752e:	       jsr -456(a6)
	WaitBlit();	
    7532:	       move.l 1c9d0 <GfxBase>,d0
    7538:	       movea.l d0,a6
    753a:	       jsr -228(a6)
	Disable();
    753e:	       move.l 1c9c4 <SysBase>,d0
    7544:	       movea.l d0,a6
    7546:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    754a:	       pea 18e61 <PutChar+0x10ef>
    7550:	       jsr 1729e <KPrintF>
    7556:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7558:	       movea.l 1c9c8 <custom>,a0
    755e:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7564:	       pea 18e78 <PutChar+0x1106>
    756a:	       jsr 1729e <KPrintF>
    7570:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7572:	       clr.l 8(sp)
    7576:	   /-- bra.s 7594 <TakeSystem+0x14a>
		custom->color[a]=0;
    7578:	/--|-> movea.l 1c9c8 <custom>,a0
    757e:	|  |   move.l 8(sp),d0
    7582:	|  |   addi.l #192,d0
    7588:	|  |   add.l d0,d0
    758a:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7590:	|  |   addq.l #1,8(sp)
    7594:	|  \-> moveq #31,d0
    7596:	|      cmp.l 8(sp),d0
    759a:	\----- bge.s 7578 <TakeSystem+0x12e>

	WaitVbl();
    759c:	       jsr 171d2 <WaitVbl>
	WaitVbl();
    75a2:	       jsr 171d2 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    75a8:	       pea 18e9d <PutChar+0x112b>
    75ae:	       jsr 1729e <KPrintF>
    75b4:	       addq.l #4,sp
	VBR=GetVBR();
    75b6:	       jsr 73bc <GetVBR>
    75bc:	       move.l d0,1c9ea <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    75c2:	       jsr 743e <GetInterruptHandler>
    75c8:	       move.l d0,1c9ee <SystemIrq>
}
    75ce:	       nop
    75d0:	       movea.l (sp)+,a6
    75d2:	       addq.l #8,sp
    75d4:	       rts

000075d6 <FreeSystem>:

void FreeSystem() { 
    75d6:	subq.l #4,sp
    75d8:	move.l a6,-(sp)
	WaitVbl();
    75da:	jsr 171d2 <WaitVbl>
	WaitBlit();
    75e0:	move.l 1c9d0 <GfxBase>,d0
    75e6:	movea.l d0,a6
    75e8:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    75ec:	movea.l 1c9c8 <custom>,a0
    75f2:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    75f8:	movea.l 1c9c8 <custom>,a0
    75fe:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7604:	movea.l 1c9c8 <custom>,a0
    760a:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    7610:	move.l 1c9ee <SystemIrq>,d0
    7616:	move.l d0,-(sp)
    7618:	jsr 742c <SetInterruptHandler>
    761e:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    7620:	movea.l 1c9d0 <GfxBase>,a0
    7626:	move.l 38(a0),d0
    762a:	movea.l 1c9c8 <custom>,a0
    7630:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7634:	movea.l 1c9d0 <GfxBase>,a0
    763a:	move.l 50(a0),d0
    763e:	movea.l 1c9c8 <custom>,a0
    7644:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7648:	movea.l 1c9c8 <custom>,a0
    764e:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7654:	move.w 1c9e6 <SystemDMA>,d0
    765a:	movea.l 1c9c8 <custom>,a0
    7660:	ori.w #-32768,d0
    7664:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7668:	move.w 1c9e8 <SystemADKCON>,d0
    766e:	movea.l 1c9c8 <custom>,a0
    7674:	ori.w #-32768,d0
    7678:	move.w d0,158(a0)

	WaitBlit();	
    767c:	move.l 1c9d0 <GfxBase>,d0
    7682:	movea.l d0,a6
    7684:	jsr -228(a6)
	DisownBlitter();
    7688:	move.l 1c9d0 <GfxBase>,d0
    768e:	movea.l d0,a6
    7690:	jsr -462(a6)
	Enable();
    7694:	move.l 1c9c4 <SysBase>,d0
    769a:	movea.l d0,a6
    769c:	jsr -126(a6)

	LoadView(ActiView);
    76a0:	move.l 1c9f2 <ActiView>,4(sp)
    76a8:	move.l 1c9d0 <GfxBase>,d0
    76ae:	movea.l d0,a6
    76b0:	movea.l 4(sp),a1
    76b4:	jsr -222(a6)
	WaitTOF();
    76b8:	move.l 1c9d0 <GfxBase>,d0
    76be:	movea.l d0,a6
    76c0:	jsr -270(a6)
	WaitTOF();
    76c4:	move.l 1c9d0 <GfxBase>,d0
    76ca:	movea.l d0,a6
    76cc:	jsr -270(a6)

	Permit();
    76d0:	move.l 1c9c4 <SysBase>,d0
    76d6:	movea.l d0,a6
    76d8:	jsr -138(a6)
}
    76dc:	nop
    76de:	movea.l (sp)+,a6
    76e0:	addq.l #4,sp
    76e2:	rts

000076e4 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    76e4:	    lea -132(sp),sp
    76e8:	    movem.l d2-d3/a6,-(sp)

	int *bp = 0x200;
    76ec:	    move.l #512,140(sp)
  	*bp = 0;
    76f4:	    movea.l 140(sp),a0
    76f8:	    clr.l (a0)

	SysBase = *((struct ExecBase**)4UL);
    76fa:	    movea.w #4,a0
    76fe:	    move.l (a0),d0
    7700:	    move.l d0,1c9c4 <SysBase>
	custom = (struct Custom*)0xdff000;	
    7706:	    move.l #14675968,1c9c8 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    7710:	    move.l #102081,136(sp)
    7718:	    clr.l 132(sp)
    771c:	    move.l 1c9c4 <SysBase>,d0
    7722:	    movea.l d0,a6
    7724:	    movea.l 136(sp),a1
    7728:	    move.l 132(sp),d0
    772c:	    jsr -552(a6)
    7730:	    move.l d0,128(sp)
    7734:	    move.l 128(sp),d0
    7738:	    move.l d0,1c9d0 <GfxBase>
	if (!GfxBase)
    773e:	    move.l 1c9d0 <GfxBase>,d0
    7744:	/-- bne.s 775a <main+0x76>
		Exit(0);
    7746:	|   clr.l 124(sp)
    774a:	|   move.l 1c9cc <DOSBase>,d0
    7750:	|   movea.l d0,a6
    7752:	|   move.l 124(sp),d1
    7756:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    775a:	\-> move.l #102098,120(sp)
    7762:	    clr.l 116(sp)
    7766:	    move.l 1c9c4 <SysBase>,d0
    776c:	    movea.l d0,a6
    776e:	    movea.l 120(sp),a1
    7772:	    move.l 116(sp),d0
    7776:	    jsr -552(a6)
    777a:	    move.l d0,112(sp)
    777e:	    move.l 112(sp),d0
    7782:	    move.l d0,1c9cc <DOSBase>
	if (!DOSBase)
    7788:	    move.l 1c9cc <DOSBase>,d0
    778e:	/-- bne.s 77a4 <main+0xc0>
		Exit(0);
    7790:	|   clr.l 108(sp)
    7794:	|   move.l 1c9cc <DOSBase>,d0
    779a:	|   movea.l d0,a6
    779c:	|   move.l 108(sp),d1
    77a0:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    77a4:	\-> move.l #102110,104(sp)
    77ac:	    clr.l 100(sp)
    77b0:	    move.l 1c9c4 <SysBase>,d0
    77b6:	    movea.l d0,a6
    77b8:	    movea.l 104(sp),a1
    77bc:	    move.l 100(sp),d0
    77c0:	    jsr -552(a6)
    77c4:	    move.l d0,96(sp)
    77c8:	    move.l 96(sp),d0
    77cc:	    move.l d0,1c9d4 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    77d2:	    move.l 1c9d4 <MathIeeeSingBasBase>,d0
    77d8:	/-- bne.s 77ee <main+0x10a>
		Exit(0);	
    77da:	|   clr.l 92(sp)
    77de:	|   move.l 1c9cc <DOSBase>,d0
    77e4:	|   movea.l d0,a6
    77e6:	|   move.l 92(sp),d1
    77ea:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    77ee:	\-> move.l #102134,88(sp)
    77f6:	    clr.l 84(sp)
    77fa:	    move.l 1c9c4 <SysBase>,d0
    7800:	    movea.l d0,a6
    7802:	    movea.l 88(sp),a1
    7806:	    move.l 84(sp),d0
    780a:	    jsr -552(a6)
    780e:	    move.l d0,80(sp)
    7812:	    move.l 80(sp),d0
    7816:	    move.l d0,1c9d8 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    781c:	    move.l 1c9d8 <MathIeeeSingTransBase>,d0
    7822:	/-- bne.s 7838 <main+0x154>
		Exit(0);
    7824:	|   clr.l 76(sp)
    7828:	|   move.l 1c9cc <DOSBase>,d0
    782e:	|   movea.l d0,a6
    7830:	|   move.l 76(sp),d1
    7834:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    7838:	\-> move.l #102160,72(sp)
    7840:	    clr.l 68(sp)
    7844:	    move.l 1c9c4 <SysBase>,d0
    784a:	    movea.l d0,a6
    784c:	    movea.l 72(sp),a1
    7850:	    move.l 68(sp),d0
    7854:	    jsr -552(a6)
    7858:	    move.l d0,64(sp)
    785c:	    move.l 64(sp),d0
    7860:	    move.l d0,1c9e0 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    7866:	    move.l 1c9e0 <MathIeeeDoubTransBase>,d0
    786c:	/-- bne.s 7882 <main+0x19e>
		Exit(0);
    786e:	|   clr.l 60(sp)
    7872:	|   move.l 1c9cc <DOSBase>,d0
    7878:	|   movea.l d0,a6
    787a:	|   move.l 60(sp),d1
    787e:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    7882:	\-> move.l #102186,56(sp)
    788a:	    clr.l 52(sp)
    788e:	    move.l 1c9c4 <SysBase>,d0
    7894:	    movea.l d0,a6
    7896:	    movea.l 56(sp),a1
    789a:	    move.l 52(sp),d0
    789e:	    jsr -552(a6)
    78a2:	    move.l d0,48(sp)
    78a6:	    move.l 48(sp),d0
    78aa:	    move.l d0,1c9dc <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    78b0:	    move.l 1c9dc <MathIeeeDoubBasBase>,d0
    78b6:	/-- bne.s 78cc <main+0x1e8>
		Exit(0);
    78b8:	|   clr.l 44(sp)
    78bc:	|   move.l 1c9cc <DOSBase>,d0
    78c2:	|   movea.l d0,a6
    78c4:	|   move.l 44(sp),d1
    78c8:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 027!\n");
    78cc:	\-> pea 18f42 <PutChar+0x11d0>
    78d2:	    jsr 1729e <KPrintF>
    78d8:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 027!\n", 25);
    78da:	    move.l 1c9cc <DOSBase>,d0
    78e0:	    movea.l d0,a6
    78e2:	    jsr -60(a6)
    78e6:	    move.l d0,40(sp)
    78ea:	    move.l 40(sp),d0
    78ee:	    move.l d0,36(sp)
    78f2:	    move.l #102242,32(sp)
    78fa:	    moveq #25,d0
    78fc:	    move.l d0,28(sp)
    7900:	    move.l 1c9cc <DOSBase>,d0
    7906:	    movea.l d0,a6
    7908:	    move.l 36(sp),d1
    790c:	    move.l 32(sp),d2
    7910:	    move.l 28(sp),d3
    7914:	    jsr -48(a6)
    7918:	    move.l d0,24(sp)
	Delay(50);
    791c:	    moveq #50,d0
    791e:	    move.l d0,20(sp)
    7922:	    move.l 1c9cc <DOSBase>,d0
    7928:	    movea.l d0,a6
    792a:	    move.l 20(sp),d1
    792e:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    7932:	    pea 18f7b <PutChar+0x1209>
    7938:	    jsr 1729e <KPrintF>
    793e:	    addq.l #4,sp
	TakeSystem();
    7940:	    jsr 744a <TakeSystem>
	KPrintF("System Taken\n");
    7946:	    pea 18f8a <PutChar+0x1218>
    794c:	    jsr 1729e <KPrintF>
    7952:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    7954:	    movea.l 1c9c8 <custom>,a0
    795a:	    move.w #-30721,150(a0)
	WaitVbl();
    7960:	    jsr 171d2 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    7966:	    pea 18f98 <PutChar+0x1226>
    796c:	    jsr 1729e <KPrintF>
    7972:	    addq.l #4,sp
	main_sludge(argc, argv);	
    7974:	    move.l 152(sp),-(sp)
    7978:	    move.l 152(sp),-(sp)
    797c:	    jsr 4280 <main_sludge>
    7982:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    7984:	    jsr 75d6 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    798a:	    move.l 1c9cc <DOSBase>,16(sp)
    7992:	    move.l 1c9c4 <SysBase>,d0
    7998:	    movea.l d0,a6
    799a:	    movea.l 16(sp),a1
    799e:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    79a2:	    move.l 1c9d0 <GfxBase>,12(sp)
    79aa:	    move.l 1c9c4 <SysBase>,d0
    79b0:	    movea.l d0,a6
    79b2:	    movea.l 12(sp),a1
    79b6:	    jsr -414(a6)
    79ba:	    moveq #0,d0
}
    79bc:	    movem.l (sp)+,d2-d3/a6
    79c0:	    lea 132(sp),sp
    79c4:	    rts

000079c6 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    79c6:	    lea -16(sp),sp
    79ca:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    79cc:	    moveq #8,d0
    79ce:	    move.l d0,16(sp)
    79d2:	    clr.l 12(sp)
    79d6:	    move.l 1c9c4 <SysBase>,d0
    79dc:	    movea.l d0,a6
    79de:	    move.l 16(sp),d0
    79e2:	    move.l 12(sp),d1
    79e6:	    jsr -684(a6)
    79ea:	    move.l d0,8(sp)
    79ee:	    move.l 8(sp),d0
    79f2:	    move.l d0,4(sp)
	if (!newStat) {
    79f6:	/-- bne.s 7a26 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    79f8:	|   movea.l 1c34a <nowStatus>,a0
    79fe:	|   move.l (a0),d0
    7a00:	|   movea.l 4(sp),a0
    7a04:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    7a08:	|   pea 189ee <PutChar+0xc7c>
    7a0e:	|   jsr b8 <copyString>
    7a14:	|   addq.l #4,sp
    7a16:	|   movea.l 4(sp),a0
    7a1a:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    7a1c:	|   movea.l 1c34a <nowStatus>,a0
    7a22:	|   move.l 4(sp),(a0)
	}
}
    7a26:	\-> nop
    7a28:	    movea.l (sp)+,a6
    7a2a:	    lea 16(sp),sp
    7a2e:	    rts

00007a30 <clearStatusBar>:

void clearStatusBar () {
    7a30:	       lea -16(sp),sp
    7a34:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    7a36:	       movea.l 1c34a <nowStatus>,a0
    7a3c:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    7a40:	       movea.l 1c34a <nowStatus>,a0
    7a46:	       moveq #-1,d0
    7a48:	       move.l d0,6(a0)
	while (stat) {
    7a4c:	   /-- bra.s 7a8c <clearStatusBar+0x5c>
		kill = stat;
    7a4e:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    7a54:	|  |   movea.l 16(sp),a0
    7a58:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    7a5e:	|  |   movea.l 12(sp),a0
    7a62:	|  |   move.l (a0),8(sp)
    7a66:	|  |   move.l 1c9c4 <SysBase>,d0
    7a6c:	|  |   movea.l d0,a6
    7a6e:	|  |   movea.l 8(sp),a1
    7a72:	|  |   jsr -690(a6)
		FreeVec(kill);
    7a76:	|  |   move.l 12(sp),4(sp)
    7a7c:	|  |   move.l 1c9c4 <SysBase>,d0
    7a82:	|  |   movea.l d0,a6
    7a84:	|  |   movea.l 4(sp),a1
    7a88:	|  |   jsr -690(a6)
	while (stat) {
    7a8c:	|  \-> tst.l 16(sp)
    7a90:	\----- bne.s 7a4e <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    7a92:	       movea.l 1c34a <nowStatus>,a0
    7a98:	       clr.l (a0)
}
    7a9a:	       nop
    7a9c:	       movea.l (sp)+,a6
    7a9e:	       lea 16(sp),sp
    7aa2:	       rts

00007aa4 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    7aa4:	clr.l 1c9f6 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    7aaa:	move.w #-1,1c9fa <mainStatus+0x4>
	mainStatus.litStatus = -1;
    7ab2:	moveq #-1,d0
    7ab4:	move.l d0,1c9fc <mainStatus+0x6>
	mainStatus.statusX = 10;
    7aba:	moveq #10,d0
    7abc:	move.l d0,1ca00 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    7ac2:	movea.l 1c91c <winHeight>,a0
    7ac8:	lea -15(a0),a0
    7acc:	move.l a0,d0
    7ace:	move.l d0,1ca04 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    7ad4:	nop
    7ad6:	rts

00007ad8 <killLastStatus>:

void killLastStatus () {
    7ad8:	    lea -12(sp),sp
    7adc:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    7ade:	    movea.l 1c34a <nowStatus>,a0
    7ae4:	    move.l (a0),d0
    7ae6:	/-- beq.s 7b30 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    7ae8:	|   movea.l 1c34a <nowStatus>,a0
    7aee:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    7af2:	|   movea.l 1c34a <nowStatus>,a0
    7af8:	|   movea.l 12(sp),a1
    7afc:	|   move.l 4(a1),d0
    7b00:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    7b02:	|   movea.l 12(sp),a0
    7b06:	|   move.l (a0),8(sp)
    7b0a:	|   move.l 1c9c4 <SysBase>,d0
    7b10:	|   movea.l d0,a6
    7b12:	|   movea.l 8(sp),a1
    7b16:	|   jsr -690(a6)
		FreeVec(kill);
    7b1a:	|   move.l 12(sp),4(sp)
    7b20:	|   move.l 1c9c4 <SysBase>,d0
    7b26:	|   movea.l d0,a6
    7b28:	|   movea.l 4(sp),a1
    7b2c:	|   jsr -690(a6)
	}
}
    7b30:	\-> nop
    7b32:	    movea.l (sp)+,a6
    7b34:	    lea 12(sp),sp
    7b38:	    rts

00007b3a <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    7b3a:	movea.l 1c34a <nowStatus>,a0
    7b40:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    7b46:	movea.l 1c34a <nowStatus>,a0
    7b4c:	move.l 8(sp),14(a0)
}
    7b52:	nop
    7b54:	rts

00007b56 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    7b56:	       lea -100(sp),sp
    7b5a:	       move.l a6,-(sp)
    7b5c:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    7b5e:	       movea.l 1c34a <nowStatus>,a0
    7b64:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    7b68:	       movea.l 1c34a <nowStatus>,a0
    7b6e:	       move.w 4(a0),d0
    7b72:	       move.w d0,d0
    7b74:	       andi.l #65535,d0
    7b7a:	       move.l 112(sp),-(sp)
    7b7e:	       move.l d0,-(sp)
    7b80:	       jsr 8d0 <put2bytes>
    7b86:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    7b88:	       movea.l 1c34a <nowStatus>,a0
    7b8e:	       move.l 6(a0),d0
    7b92:	       move.l d0,d0
    7b94:	       movea.w d0,a0
    7b96:	       move.l 112(sp),-(sp)
    7b9a:	       move.l a0,-(sp)
    7b9c:	       jsr a9c <putSigned>
    7ba2:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7ba4:	       movea.l 1c34a <nowStatus>,a0
    7baa:	       move.l 10(a0),d0
    7bae:	       move.l 112(sp),-(sp)
    7bb2:	       move.l d0,-(sp)
    7bb4:	       jsr 8d0 <put2bytes>
    7bba:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7bbc:	       movea.l 1c34a <nowStatus>,a0
    7bc2:	       move.l 14(a0),d0
    7bc6:	       move.l 112(sp),-(sp)
    7bca:	       move.l d0,-(sp)
    7bcc:	       jsr 8d0 <put2bytes>
    7bd2:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7bd4:	       move.l 112(sp),100(sp)
    7bda:	       movea.l 1c34a <nowStatus>,a0
    7be0:	       move.l 18(a0),96(sp)
    7be6:	       move.l 1c9cc <DOSBase>,d0
    7bec:	       movea.l d0,a6
    7bee:	       move.l 100(sp),d1
    7bf2:	       move.l 96(sp),d2
    7bf6:	       jsr -312(a6)
    7bfa:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7bfe:	       move.l 112(sp),88(sp)
    7c04:	       movea.l 1c34a <nowStatus>,a0
    7c0a:	       move.l 22(a0),84(sp)
    7c10:	       move.l 1c9cc <DOSBase>,d0
    7c16:	       movea.l d0,a6
    7c18:	       move.l 88(sp),d1
    7c1c:	       move.l 84(sp),d2
    7c20:	       jsr -312(a6)
    7c24:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    7c28:	       move.l 112(sp),76(sp)
    7c2e:	       movea.l 1c34a <nowStatus>,a0
    7c34:	       move.l 26(a0),72(sp)
    7c3a:	       move.l 1c9cc <DOSBase>,d0
    7c40:	       movea.l d0,a6
    7c42:	       move.l 76(sp),d1
    7c46:	       move.l 72(sp),d2
    7c4a:	       jsr -312(a6)
    7c4e:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    7c52:	       move.l 112(sp),64(sp)
    7c58:	       movea.l 1c34a <nowStatus>,a0
    7c5e:	       move.l 30(a0),60(sp)
    7c64:	       move.l 1c9cc <DOSBase>,d0
    7c6a:	       movea.l d0,a6
    7c6c:	       move.l 64(sp),d1
    7c70:	       move.l 60(sp),d2
    7c74:	       jsr -312(a6)
    7c78:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7c7c:	       move.l 112(sp),52(sp)
    7c82:	       movea.l 1c34a <nowStatus>,a0
    7c88:	       move.l 34(a0),48(sp)
    7c8e:	       move.l 1c9cc <DOSBase>,d0
    7c94:	       movea.l d0,a6
    7c96:	       move.l 52(sp),d1
    7c9a:	       move.l 48(sp),d2
    7c9e:	       jsr -312(a6)
    7ca2:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    7ca6:	       move.l 112(sp),40(sp)
    7cac:	       movea.l 1c34a <nowStatus>,a0
    7cb2:	       move.l 38(a0),36(sp)
    7cb8:	       move.l 1c9cc <DOSBase>,d0
    7cbe:	       movea.l d0,a6
    7cc0:	       move.l 40(sp),d1
    7cc4:	       move.l 36(sp),d2
    7cc8:	       jsr -312(a6)
    7ccc:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7cd0:	   /-- bra.s 7d14 <saveStatusBars+0x1be>
		FPutC (fp,1);
    7cd2:	/--|-> move.l 112(sp),16(sp)
    7cd8:	|  |   moveq #1,d0
    7cda:	|  |   move.l d0,12(sp)
    7cde:	|  |   move.l 1c9cc <DOSBase>,d0
    7ce4:	|  |   movea.l d0,a6
    7ce6:	|  |   move.l 16(sp),d1
    7cea:	|  |   move.l 12(sp),d2
    7cee:	|  |   jsr -312(a6)
    7cf2:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7cf6:	|  |   movea.l 104(sp),a0
    7cfa:	|  |   move.l (a0),d0
    7cfc:	|  |   move.l 112(sp),-(sp)
    7d00:	|  |   move.l d0,-(sp)
    7d02:	|  |   jsr bd8 <writeString>
    7d08:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    7d0a:	|  |   movea.l 104(sp),a0
    7d0e:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7d14:	|  \-> tst.l 104(sp)
    7d18:	\----- bne.s 7cd2 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    7d1a:	       move.l 112(sp),28(sp)
    7d20:	       clr.l 24(sp)
    7d24:	       move.l 1c9cc <DOSBase>,d0
    7d2a:	       movea.l d0,a6
    7d2c:	       move.l 28(sp),d1
    7d30:	       move.l 24(sp),d2
    7d34:	       jsr -312(a6)
    7d38:	       move.l d0,20(sp)
}
    7d3c:	       nop
    7d3e:	       move.l (sp)+,d2
    7d40:	       movea.l (sp)+,a6
    7d42:	       lea 100(sp),sp
    7d46:	       rts

00007d48 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    7d48:	movea.l 1c34a <nowStatus>,a0
    7d4e:	move.l 4(sp),6(a0)
}
    7d54:	nop
    7d56:	rts

00007d58 <setStatusBar>:

void setStatusBar (char * txt) {
    7d58:	    subq.l #4,sp
    7d5a:	    move.l a6,-(sp)
    7d5c:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    7d5e:	    movea.l 1c34a <nowStatus>,a0
    7d64:	    move.l (a0),d0
    7d66:	/-- beq.s 7d9a <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7d68:	|   movea.l 1c34a <nowStatus>,a0
    7d6e:	|   movea.l (a0),a0
    7d70:	|   move.l (a0),8(sp)
    7d74:	|   move.l 1c9c4 <SysBase>,d0
    7d7a:	|   movea.l d0,a6
    7d7c:	|   movea.l 8(sp),a1
    7d80:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7d84:	|   movea.l 1c34a <nowStatus>,a0
    7d8a:	|   movea.l (a0),a2
    7d8c:	|   move.l 16(sp),-(sp)
    7d90:	|   jsr b8 <copyString>
    7d96:	|   addq.l #4,sp
    7d98:	|   move.l d0,(a2)
	}
}
    7d9a:	\-> nop
    7d9c:	    movea.l (sp)+,a2
    7d9e:	    movea.l (sp)+,a6
    7da0:	    addq.l #4,sp
    7da2:	    rts

00007da4 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7da4:	       movea.l 1c34a <nowStatus>,a0
    7daa:	       move.l (a0),d0
    7dac:	/----- beq.s 7dba <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7dae:	|      movea.l 1c34a <nowStatus>,a0
    7db4:	|      movea.l (a0),a0
    7db6:	|      move.l (a0),d0
    7db8:	|  /-- bra.s 7dc0 <statusBarText+0x1c>
	} else {
		return "";
    7dba:	\--|-> move.l #100846,d0
	}
    7dc0:	   \-> rts

00007dc2 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7dc2:	       lea -28(sp),sp
    7dc6:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7dca:	       move.l 52(sp),-(sp)
    7dce:	       jsr 15966 <stringWidth>
    7dd4:	       addq.l #4,sp
    7dd6:	       asr.l #1,d0
    7dd8:	       move.l d0,-(sp)
    7dda:	       jsr 176da <__floatsisf>
    7de0:	       addq.l #4,sp
    7de2:	       move.l d0,d1
    7de4:	       move.l 1c362 <cameraZoom>,d0
    7dea:	       move.l d0,-(sp)
    7dec:	       move.l d1,-(sp)
    7dee:	       jsr 17586 <__divsf3>
    7df4:	       addq.l #8,sp
    7df6:	       move.l d0,-(sp)
    7df8:	       jsr 17672 <__fixsfsi>
    7dfe:	       addq.l #4,sp
    7e00:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7e04:	       move.l 56(sp),d0
    7e08:	       sub.l 44(sp),d0
    7e0c:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7e10:	       move.l 56(sp),d0
    7e14:	       add.l 44(sp),d0
    7e18:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7e1c:	       moveq #12,d0
    7e1e:	       move.l d0,32(sp)
    7e22:	       clr.l 28(sp)
    7e26:	       move.l 1c9c4 <SysBase>,d0
    7e2c:	       movea.l d0,a6
    7e2e:	       move.l 32(sp),d0
    7e32:	       move.l 28(sp),d1
    7e36:	       jsr -684(a6)
    7e3a:	       move.l d0,24(sp)
    7e3e:	       move.l 24(sp),d0
    7e42:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7e46:	       movea.l 1ca20 <speech>,a0
    7e4c:	       move.l 4(a0),d0
    7e50:	       movea.l 20(sp),a0
    7e54:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    7e58:	       move.l 52(sp),-(sp)
    7e5c:	       jsr b8 <copyString>
    7e62:	       addq.l #4,sp
    7e64:	       movea.l 20(sp),a0
    7e68:	       move.l d0,(a0)
	newLine -> x = xx1;
    7e6a:	       movea.l 20(sp),a0
    7e6e:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    7e74:	       movea.l 1ca20 <speech>,a0
    7e7a:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7e80:	       moveq #4,d0
    7e82:	       cmp.l 40(sp),d0
    7e86:	   /-- blt.s 7ea8 <addSpeechLine+0xe6>
    7e88:	   |   movea.l 60(sp),a0
    7e8c:	   |   move.l (a0),d1
    7e8e:	   |   moveq #5,d0
    7e90:	   |   sub.l 40(sp),d0
    7e94:	   |   cmp.l d1,d0
    7e96:	   +-- ble.s 7ea8 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7e98:	   |   moveq #5,d0
    7e9a:	   |   sub.l 40(sp),d0
    7e9e:	   |   movea.l 60(sp),a0
    7ea2:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7ea4:	/--|-- bra.w 7fd4 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7ea8:	|  \-> move.l 36(sp),-(sp)
    7eac:	|      jsr 176da <__floatsisf>
    7eb2:	|      addq.l #4,sp
    7eb4:	|      move.l d0,d2
    7eb6:	|      move.l 1c918 <winWidth>,d0
    7ebc:	|      move.l d0,-(sp)
    7ebe:	|      jsr 17702 <__floatunsisf>
    7ec4:	|      addq.l #4,sp
    7ec6:	|      move.l d0,d1
    7ec8:	|      move.l 1c362 <cameraZoom>,d0
    7ece:	|      move.l d0,-(sp)
    7ed0:	|      move.l d1,-(sp)
    7ed2:	|      jsr 17586 <__divsf3>
    7ed8:	|      addq.l #8,sp
    7eda:	|      move.l #1084227584,-(sp)
    7ee0:	|      move.l d0,-(sp)
    7ee2:	|      jsr 179ce <__subsf3>
    7ee8:	|      addq.l #8,sp
    7eea:	|      move.l d0,-(sp)
    7eec:	|      move.l d2,-(sp)
    7eee:	|      jsr 177c2 <__gesf2>
    7ef4:	|      addq.l #8,sp
    7ef6:	|      tst.l d0
    7ef8:	|  /-- bge.s 7efe <addSpeechLine+0x13c>
}
    7efa:	+--|-- bra.w 7fd4 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7efe:	|  \-> movea.l 60(sp),a0
    7f02:	|      move.l (a0),d0
    7f04:	|      move.l d0,-(sp)
    7f06:	|      jsr 176da <__floatsisf>
    7f0c:	|      addq.l #4,sp
    7f0e:	|      move.l d0,-(sp)
    7f10:	|      jsr 175f2 <__extendsfdf2>
    7f16:	|      addq.l #4,sp
    7f18:	|      move.l d0,d4
    7f1a:	|      move.l d1,d5
    7f1c:	|      move.l 1c918 <winWidth>,d0
    7f22:	|      move.l d0,-(sp)
    7f24:	|      jsr 17702 <__floatunsisf>
    7f2a:	|      addq.l #4,sp
    7f2c:	|      move.l d0,d1
    7f2e:	|      move.l 1c362 <cameraZoom>,d0
    7f34:	|      move.l d0,-(sp)
    7f36:	|      move.l d1,-(sp)
    7f38:	|      jsr 17586 <__divsf3>
    7f3e:	|      addq.l #8,sp
    7f40:	|      move.l d0,-(sp)
    7f42:	|      jsr 175f2 <__extendsfdf2>
    7f48:	|      addq.l #4,sp
    7f4a:	|      clr.l -(sp)
    7f4c:	|      move.l #1075052544,-(sp)
    7f52:	|      move.l d1,-(sp)
    7f54:	|      move.l d0,-(sp)
    7f56:	|      jsr 1796c <__subdf3>
    7f5c:	|      lea 16(sp),sp
    7f60:	|      move.l d0,d2
    7f62:	|      move.l d1,d3
    7f64:	|      move.l 36(sp),-(sp)
    7f68:	|      jsr 1769a <__floatsidf>
    7f6e:	|      addq.l #4,sp
    7f70:	|      move.l d1,-(sp)
    7f72:	|      move.l d0,-(sp)
    7f74:	|      move.l d3,-(sp)
    7f76:	|      move.l d2,-(sp)
    7f78:	|      jsr 1796c <__subdf3>
    7f7e:	|      lea 16(sp),sp
    7f82:	|      move.l d1,-(sp)
    7f84:	|      move.l d0,-(sp)
    7f86:	|      move.l d5,-(sp)
    7f88:	|      move.l d4,-(sp)
    7f8a:	|      jsr 177f8 <__gtdf2>
    7f90:	|      lea 16(sp),sp
    7f94:	|      tst.l d0
    7f96:	|  /-- bgt.s 7f9a <addSpeechLine+0x1d8>
}
    7f98:	+--|-- bra.s 7fd4 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7f9a:	|  \-> move.l 1c918 <winWidth>,d0
    7fa0:	|      move.l d0,-(sp)
    7fa2:	|      jsr 17702 <__floatunsisf>
    7fa8:	|      addq.l #4,sp
    7faa:	|      move.l d0,d1
    7fac:	|      move.l 1c362 <cameraZoom>,d0
    7fb2:	|      move.l d0,-(sp)
    7fb4:	|      move.l d1,-(sp)
    7fb6:	|      jsr 17586 <__divsf3>
    7fbc:	|      addq.l #8,sp
    7fbe:	|      move.l d0,-(sp)
    7fc0:	|      jsr 17672 <__fixsfsi>
    7fc6:	|      addq.l #4,sp
    7fc8:	|      subq.l #5,d0
    7fca:	|      sub.l 36(sp),d0
    7fce:	|      movea.l 60(sp),a0
    7fd2:	|      move.l d0,(a0)
}
    7fd4:	\----> nop
    7fd6:	       movem.l (sp)+,d2-d5/a6
    7fda:	       lea 28(sp),sp
    7fde:	       rts

00007fe0 <initSpeech>:


void initSpeech () {
    7fe0:	       lea -12(sp),sp
    7fe4:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7fe6:	       moveq #20,d0
    7fe8:	       move.l d0,12(sp)
    7fec:	       clr.l 8(sp)
    7ff0:	       move.l 1c9c4 <SysBase>,d0
    7ff6:	       movea.l d0,a6
    7ff8:	       move.l 12(sp),d0
    7ffc:	       move.l 8(sp),d1
    8000:	       jsr -684(a6)
    8004:	       move.l d0,4(sp)
    8008:	       move.l 4(sp),d0
    800c:	       move.l d0,1ca20 <speech>
	if (speech) {
    8012:	       move.l 1ca20 <speech>,d0
    8018:	/----- beq.s 8044 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    801a:	|      movea.l 1ca20 <speech>,a0
    8020:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    8022:	|      movea.l 1ca20 <speech>,a0
    8028:	|      clr.l 4(a0)
		speech -> speechY = 0;
    802c:	|      movea.l 1ca20 <speech>,a0
    8032:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    8036:	|      movea.l 1ca20 <speech>,a0
    803c:	|      moveq #-1,d0
    803e:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    8042:	|  /-- bra.s 8052 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    8044:	\--|-> pea 18fd5 <PutChar+0x1263>
    804a:	   |   jsr 1729e <KPrintF>
    8050:	   |   addq.l #4,sp
}
    8052:	   \-> nop
    8054:	       movea.l (sp)+,a6
    8056:	       lea 12(sp),sp
    805a:	       rts

0000805c <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    805c:	       movea.l 1ca20 <speech>,a0
    8062:	       move.l 4(a0),d0
    8066:	/----- beq.s 8074 <isThereAnySpeechGoingOn+0x18>
    8068:	|      movea.l 1ca20 <speech>,a0
    806e:	|      move.l 16(a0),d0
    8072:	|  /-- bra.s 8076 <isThereAnySpeechGoingOn+0x1a>
    8074:	\--|-> moveq #-1,d0
}
    8076:	   \-> rts

00008078 <killAllSpeech>:

void killAllSpeech () {
    8078:	       lea -12(sp),sp
    807c:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    807e:	       movea.l 1ca20 <speech>,a0
    8084:	       move.l 12(a0),d0
    8088:	       moveq #-1,d1
    808a:	       cmp.l d0,d1
    808c:	   /-- beq.s 809a <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    808e:	   |   movea.l 1ca20 <speech>,a0
    8094:	   |   moveq #-1,d0
    8096:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    809a:	   \-> movea.l 1ca20 <speech>,a0
    80a0:	       move.l (a0),d0
    80a2:	/----- beq.w 812e <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    80a6:	|      movea.l 1ca20 <speech>,a0
    80ac:	|      move.l (a0),d1
    80ae:	|      lea -132(sp),sp
    80b2:	|      move.l sp,d0
    80b4:	|      movea.w #132,a0
    80b8:	|      move.l a0,-(sp)
    80ba:	|      move.l d1,-(sp)
    80bc:	|      move.l d0,-(sp)
    80be:	|      jsr 17252 <memcpy>
    80c4:	|      lea 12(sp),sp
    80c8:	|      jsr ac72 <makeSilent>
    80ce:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    80d2:	|      movea.l 1ca20 <speech>,a0
    80d8:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    80da:	+----- bra.s 812e <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    80dc:	|  /-> movea.l 1ca20 <speech>,a0
    80e2:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    80e8:	|  |   movea.l 1ca20 <speech>,a0
    80ee:	|  |   movea.l 4(a0),a1
    80f2:	|  |   movea.l 1ca20 <speech>,a0
    80f8:	|  |   move.l 4(a1),d0
    80fc:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    8100:	|  |   movea.l 12(sp),a0
    8104:	|  |   move.l (a0),8(sp)
    8108:	|  |   move.l 1c9c4 <SysBase>,d0
    810e:	|  |   movea.l d0,a6
    8110:	|  |   movea.l 8(sp),a1
    8114:	|  |   jsr -690(a6)
		FreeVec(killMe);
    8118:	|  |   move.l 12(sp),4(sp)
    811e:	|  |   move.l 1c9c4 <SysBase>,d0
    8124:	|  |   movea.l d0,a6
    8126:	|  |   movea.l 4(sp),a1
    812a:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    812e:	\--|-> movea.l 1ca20 <speech>,a0
    8134:	   |   move.l 4(a0),d0
    8138:	   \-- bne.s 80dc <killAllSpeech+0x64>
	}
}
    813a:	       nop
    813c:	       nop
    813e:	       movea.l (sp)+,a6
    8140:	       lea 12(sp),sp
    8144:	       rts

00008146 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    8146:	pea 2 <_start+0x2>
    814a:	move.l 8(sp),-(sp)
    814e:	jsr 82a6 <setFrames>
    8154:	addq.l #8,sp
}
    8156:	nop
    8158:	rts

0000815a <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    815a:	       lea -52(sp),sp
    815e:	       move.l a6,-(sp)
    8160:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    8162:	       movea.l 64(sp),a0
    8166:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    816c:	       move.l 1c34e <speechSpeed>,d0
    8172:	       move.l 68(sp),-(sp)
    8176:	       move.l d0,-(sp)
    8178:	       jsr a46 <putFloat>
    817e:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    8180:	       movea.l 64(sp),a0
    8184:	       move.l 8(a0),d0
    8188:	       move.l 68(sp),-(sp)
    818c:	       move.l d0,-(sp)
    818e:	       jsr 8d0 <put2bytes>
    8194:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    8196:	       movea.l 64(sp),a0
    819a:	       move.l 16(a0),d0
    819e:	       move.l 68(sp),-(sp)
    81a2:	       move.l d0,-(sp)
    81a4:	       jsr 8d0 <put2bytes>
    81aa:	       addq.l #8,sp
		if (sS -> currentTalker) {
    81ac:	       movea.l 64(sp),a0
    81b0:	       move.l (a0),d0
    81b2:	   /-- beq.s 81f6 <saveSpeech+0x9c>
			FPutC (fp, 1);
    81b4:	   |   move.l 68(sp),40(sp)
    81ba:	   |   moveq #1,d0
    81bc:	   |   move.l d0,36(sp)
    81c0:	   |   move.l 1c9cc <DOSBase>,d0
    81c6:	   |   movea.l d0,a6
    81c8:	   |   move.l 40(sp),d1
    81cc:	   |   move.l 36(sp),d2
    81d0:	   |   jsr -312(a6)
    81d4:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    81d8:	   |   movea.l 64(sp),a0
    81dc:	   |   movea.l (a0),a0
    81de:	   |   movea.l 114(a0),a0
    81e2:	   |   move.l 4(a0),d0
    81e6:	   |   move.l 68(sp),-(sp)
    81ea:	   |   move.l d0,-(sp)
    81ec:	   |   jsr 8d0 <put2bytes>
    81f2:	   |   addq.l #8,sp
    81f4:	/--|-- bra.s 8272 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    81f6:	|  \-> move.l 68(sp),52(sp)
    81fc:	|      clr.l 48(sp)
    8200:	|      move.l 1c9cc <DOSBase>,d0
    8206:	|      movea.l d0,a6
    8208:	|      move.l 52(sp),d1
    820c:	|      move.l 48(sp),d2
    8210:	|      jsr -312(a6)
    8214:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    8218:	+----- bra.s 8272 <saveSpeech+0x118>
			FPutC (fp, 1);
    821a:	|  /-> move.l 68(sp),16(sp)
    8220:	|  |   moveq #1,d0
    8222:	|  |   move.l d0,12(sp)
    8226:	|  |   move.l 1c9cc <DOSBase>,d0
    822c:	|  |   movea.l d0,a6
    822e:	|  |   move.l 16(sp),d1
    8232:	|  |   move.l 12(sp),d2
    8236:	|  |   jsr -312(a6)
    823a:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    823e:	|  |   movea.l 56(sp),a0
    8242:	|  |   move.l (a0),d0
    8244:	|  |   move.l 68(sp),-(sp)
    8248:	|  |   move.l d0,-(sp)
    824a:	|  |   jsr bd8 <writeString>
    8250:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    8252:	|  |   movea.l 56(sp),a0
    8256:	|  |   move.l 8(a0),d0
    825a:	|  |   move.l 68(sp),-(sp)
    825e:	|  |   move.l d0,-(sp)
    8260:	|  |   jsr 8d0 <put2bytes>
    8266:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    8268:	|  |   movea.l 56(sp),a0
    826c:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    8272:	\--|-> tst.l 56(sp)
    8276:	   \-- bne.s 821a <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    8278:	       move.l 68(sp),28(sp)
    827e:	       clr.l 24(sp)
    8282:	       move.l 1c9cc <DOSBase>,d0
    8288:	       movea.l d0,a6
    828a:	       move.l 28(sp),d1
    828e:	       move.l 24(sp),d2
    8292:	       jsr -312(a6)
    8296:	       move.l d0,20(sp)
}
    829a:	       nop
    829c:	       move.l (sp)+,d2
    829e:	       movea.l (sp)+,a6
    82a0:	       lea 52(sp),sp
    82a4:	       rts

000082a6 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    82a6:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    82a8:	movea.l 8(sp),a0
    82ac:	movea.l 80(a0),a0
    82b0:	move.l (a0),d2
    82b2:	movea.l 8(sp),a0
    82b6:	movea.l 80(a0),a0
    82ba:	move.l 4(a0),d0
    82be:	move.l 12(sp),-(sp)
    82c2:	move.l d0,-(sp)
    82c4:	jsr 17c5c <__mulsi3>
    82ca:	addq.l #8,sp
    82cc:	move.l d0,d1
    82ce:	movea.l 8(sp),a0
    82d2:	move.l 106(a0),d0
    82d6:	add.l d1,d0
    82d8:	add.l d0,d0
    82da:	add.l d0,d0
    82dc:	movea.l d2,a0
    82de:	adda.l d0,a0
    82e0:	move.l (a0),d0
    82e2:	movea.l 8(sp),a0
    82e6:	move.l d0,72(a0)
}
    82ea:	nop
    82ec:	move.l (sp)+,d2
    82ee:	rts

000082f0 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    82f0:	       lea -20(sp),sp
    82f4:	       move.l d2,-(sp)
    82f6:	       move.l 40(sp),d0
    82fa:	       move.w d0,d0
    82fc:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    8300:	       movea.l 1ca20 <speech>,a0
    8306:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    830c:	       move.l 32(sp),-(sp)
    8310:	       jsr a75c <findPerson>
    8316:	       addq.l #4,sp
    8318:	       move.l d0,16(sp)
    if (thisPerson) {
    831c:	   /-- beq.s 8342 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    831e:	   |   movea.w 6(sp),a0
    8322:	   |   move.l a0,-(sp)
    8324:	   |   move.l 40(sp),-(sp)
    8328:	   |   move.l 24(sp),-(sp)
    832c:	   |   move.l 40(sp),-(sp)
    8330:	   |   jsr 8408 <wrapSpeechPerson>
    8336:	   |   lea 16(sp),sp
    833a:	   |   move.l d0,20(sp)
    833e:	/--|-- bra.w 83fc <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    8342:	|  \-> move.l 32(sp),-(sp)
    8346:	|      jsr 15ac6 <getRegionForObject>
    834c:	|      addq.l #4,sp
    834e:	|      move.l d0,12(sp)
        if (thisRegion) {
    8352:	|  /-- beq.s 83be <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    8354:	|  |   movea.l 12(sp),a0
    8358:	|  |   movea.l 28(a0),a0
    835c:	|  |   move.l 28(a0),d0
    8360:	|  |   movea.l 12(sp),a0
    8364:	|  |   movea.l 4(a0),a1
    8368:	|  |   movea.l 12(sp),a0
    836c:	|  |   movea.l 28(a0),a0
    8370:	|  |   move.l 20(a0),d1
    8374:	|  |   movea.l a1,a0
    8376:	|  |   suba.l d1,a0
    8378:	|  |   move.l 1ca82 <cameraY>,d1
    837e:	|  |   movea.l a0,a1
    8380:	|  |   suba.l d1,a1
    8382:	|  |   movea.l 12(sp),a0
    8386:	|  |   move.l (a0),d2
    8388:	|  |   movea.l 12(sp),a0
    838c:	|  |   move.l 8(a0),d1
    8390:	|  |   add.l d2,d1
    8392:	|  |   move.l d1,d2
    8394:	|  |   asr.l #1,d2
    8396:	|  |   move.l 1ca7e <cameraX>,d1
    839c:	|  |   movea.l d2,a0
    839e:	|  |   suba.l d1,a0
    83a0:	|  |   move.l 36(sp),-(sp)
    83a4:	|  |   move.l d0,-(sp)
    83a6:	|  |   move.l a1,-(sp)
    83a8:	|  |   move.l a0,-(sp)
    83aa:	|  |   move.l 44(sp),-(sp)
    83ae:	|  |   jsr 8526 <wrapSpeechXY>
    83b4:	|  |   lea 20(sp),sp
    83b8:	|  |   move.l d0,20(sp)
    83bc:	+--|-- bra.s 83fc <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    83be:	|  \-> move.l 32(sp),-(sp)
    83c2:	|      jsr d5ce <findObjectType>
    83c8:	|      addq.l #4,sp
    83ca:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    83ce:	|      movea.l 8(sp),a0
    83d2:	|      move.l 28(a0),d1
    83d6:	|      move.l 1c918 <winWidth>,d0
    83dc:	|      lsr.l #1,d0
    83de:	|      move.l 36(sp),-(sp)
    83e2:	|      move.l d1,-(sp)
    83e4:	|      pea a <_start+0xa>
    83e8:	|      move.l d0,-(sp)
    83ea:	|      move.l 44(sp),-(sp)
    83ee:	|      jsr 8526 <wrapSpeechXY>
    83f4:	|      lea 20(sp),sp
    83f8:	|      move.l d0,20(sp)
        }
    }
    return i;
    83fc:	\----> move.l 20(sp),d0
}
    8400:	       move.l (sp)+,d2
    8402:	       lea 20(sp),sp
    8406:	       rts

00008408 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    8408:	    subq.l #8,sp
    840a:	    movem.l d2-d4,-(sp)
    840e:	    move.l 36(sp),d0
    8412:	    move.w d0,d0
    8414:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    8418:	    movea.l 28(sp),a0
    841c:	    movea.l 114(a0),a0
    8420:	    move.l 28(a0),d2
    8424:	    movea.l 28(sp),a0
    8428:	    move.l 4(a0),d3
    842c:	    move.l 1ca82 <cameraY>,d0
    8432:	    move.l d0,-(sp)
    8434:	    jsr 176da <__floatsisf>
    843a:	    addq.l #4,sp
    843c:	    move.l d0,-(sp)
    843e:	    move.l d3,-(sp)
    8440:	    jsr 179ce <__subsf3>
    8446:	    addq.l #8,sp
    8448:	    move.l d0,d3
    844a:	    movea.l 28(sp),a0
    844e:	    move.l 32(a0),d4
    8452:	    movea.l 28(sp),a0
    8456:	    move.l 20(a0),d1
    845a:	    movea.l 28(sp),a0
    845e:	    move.l 24(a0),d0
    8462:	    sub.l d0,d1
    8464:	    move.l d1,-(sp)
    8466:	    jsr 176da <__floatsisf>
    846c:	    addq.l #4,sp
    846e:	    move.l d0,-(sp)
    8470:	    move.l d4,-(sp)
    8472:	    jsr 1778c <__mulsf3>
    8478:	    addq.l #8,sp
    847a:	    move.l d0,-(sp)
    847c:	    move.l d3,-(sp)
    847e:	    jsr 179ce <__subsf3>
    8484:	    addq.l #8,sp
    8486:	    move.l d0,d3
    8488:	    movea.l 28(sp),a0
    848c:	    movea.l 114(a0),a0
    8490:	    move.l 20(a0),d0
    8494:	    move.l d0,-(sp)
    8496:	    jsr 176da <__floatsisf>
    849c:	    addq.l #4,sp
    849e:	    move.l d0,-(sp)
    84a0:	    move.l d3,-(sp)
    84a2:	    jsr 179ce <__subsf3>
    84a8:	    addq.l #8,sp
    84aa:	    move.l d0,-(sp)
    84ac:	    jsr 17672 <__fixsfsi>
    84b2:	    addq.l #4,sp
    84b4:	    move.l d0,d4
    84b6:	    movea.l 28(sp),a0
    84ba:	    move.l (a0),d3
    84bc:	    move.l 1ca7e <cameraX>,d0
    84c2:	    move.l d0,-(sp)
    84c4:	    jsr 176da <__floatsisf>
    84ca:	    addq.l #4,sp
    84cc:	    move.l d0,-(sp)
    84ce:	    move.l d3,-(sp)
    84d0:	    jsr 179ce <__subsf3>
    84d6:	    addq.l #8,sp
    84d8:	    move.l d0,-(sp)
    84da:	    jsr 17672 <__fixsfsi>
    84e0:	    addq.l #4,sp
    84e2:	    move.l 32(sp),-(sp)
    84e6:	    move.l d2,-(sp)
    84e8:	    move.l d4,-(sp)
    84ea:	    move.l d0,-(sp)
    84ec:	    move.l 40(sp),-(sp)
    84f0:	    jsr 8526 <wrapSpeechXY>
    84f6:	    lea 20(sp),sp
    84fa:	    move.l d0,16(sp)
	if (animPerson) {
    84fe:	    tst.w 14(sp)
    8502:	/-- beq.s 851a <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    8504:	|   move.l 28(sp),-(sp)
    8508:	|   jsr 8146 <makeTalker>
    850e:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    8510:	|   movea.l 1ca20 <speech>,a0
    8516:	|   move.l 28(sp),(a0)
	}
	return i;
    851a:	\-> move.l 16(sp),d0
}
    851e:	    movem.l (sp)+,d2-d4
    8522:	    addq.l #8,sp
    8524:	    rts

00008526 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    8526:	                   lea -16(sp),sp
    852a:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    852e:	                   clr.l 16(sp)
    killAllSpeech();
    8532:	                   jsr 8078 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    8538:	                   move.l 36(sp),-(sp)
    853c:	                   jsr 13d70 <strlen>
    8542:	                   addq.l #4,sp
    8544:	                   movea.l d0,a0
    8546:	                   lea 20(a0),a0
    854a:	                   move.l a0,-(sp)
    854c:	                   jsr 17702 <__floatunsisf>
    8552:	                   addq.l #4,sp
    8554:	                   move.l d0,d1
    8556:	                   move.l 1c34e <speechSpeed>,d0
    855c:	                   move.l d0,-(sp)
    855e:	                   move.l d1,-(sp)
    8560:	                   jsr 1778c <__mulsf3>
    8566:	                   addq.l #8,sp
    8568:	                   move.l d0,-(sp)
    856a:	                   jsr 17672 <__fixsfsi>
    8570:	                   addq.l #4,sp
    8572:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    8576:	               /-- bgt.s 857e <wrapSpeechXY+0x58>
    8578:	               |   moveq #1,d0
    857a:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    857e:	               \-> moveq #-1,d1
    8580:	                   cmp.l 52(sp),d1
    8584:	               /-- beq.s 85c4 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    8586:	               |   move.l 1ca92 <speechMode>,d0
    858c:	               +-- ble.s 85c4 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    858e:	               |   clr.l -(sp)
    8590:	               |   move.l 56(sp),-(sp)
    8594:	               |   jsr d298 <startSound>
    859a:	               |   addq.l #8,sp
    859c:	               |   tst.w d0
    859e:	               +-- beq.s 85c4 <wrapSpeechXY+0x9e>
                speechTime = -10;
    85a0:	               |   moveq #-10,d0
    85a2:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    85a6:	               |   movea.l 1ca20 <speech>,a0
    85ac:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    85b2:	               |   move.l 1ca92 <speechMode>,d0
    85b8:	               |   moveq #2,d1
    85ba:	               |   cmp.l d0,d1
    85bc:	               +-- bne.s 85c4 <wrapSpeechXY+0x9e>
    85be:	               |   moveq #-10,d0
    85c0:	/--------------|-- bra.w 884a <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    85c4:	|              \-> movea.l 1ca20 <speech>,a0
    85ca:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    85d0:	|     /----------- bra.w 8684 <wrapSpeechXY+0x15e>
        a = wrap;
    85d4:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    85da:	|  |  |        /-- bra.s 85ea <wrapSpeechXY+0xc4>
            a--;
    85dc:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    85e0:	|  |  |  |     +-- bne.s 85ea <wrapSpeechXY+0xc4>
                a = wrap;
    85e2:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    85e8:	|  |  |  |  /--|-- bra.s 85fc <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    85ea:	|  |  |  |  |  \-> move.l 28(sp),d0
    85ee:	|  |  |  |  |      movea.l 36(sp),a0
    85f2:	|  |  |  |  |      adda.l d0,a0
    85f4:	|  |  |  |  |      move.b (a0),d0
    85f6:	|  |  |  |  |      cmpi.b #32,d0
    85fa:	|  |  |  \--|----- bne.s 85dc <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    85fc:	|  |  |     \----> move.l 28(sp),d0
    8600:	|  |  |            movea.l 36(sp),a0
    8604:	|  |  |            adda.l d0,a0
    8606:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    8608:	|  |  |            lea 16(sp),a0
    860c:	|  |  |            move.l a0,-(sp)
    860e:	|  |  |            move.l 44(sp),-(sp)
    8612:	|  |  |            move.l 44(sp),-(sp)
    8616:	|  |  |            jsr 7dc2 <addSpeechLine>
    861c:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    8620:	|  |  |            move.l 28(sp),d0
    8624:	|  |  |            movea.l 36(sp),a0
    8628:	|  |  |            adda.l d0,a0
    862a:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    862e:	|  |  |            move.l 28(sp),d0
    8632:	|  |  |            addq.l #1,d0
    8634:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    8638:	|  |  |            move.l 44(sp),-(sp)
    863c:	|  |  |            jsr 176da <__floatsisf>
    8642:	|  |  |            addq.l #4,sp
    8644:	|  |  |            move.l d0,d2
    8646:	|  |  |            move.l 1cabc <fontHeight>,d0
    864c:	|  |  |            move.l d0,-(sp)
    864e:	|  |  |            jsr 176da <__floatsisf>
    8654:	|  |  |            addq.l #4,sp
    8656:	|  |  |            move.l d0,d1
    8658:	|  |  |            move.l 1c362 <cameraZoom>,d0
    865e:	|  |  |            move.l d0,-(sp)
    8660:	|  |  |            move.l d1,-(sp)
    8662:	|  |  |            jsr 17586 <__divsf3>
    8668:	|  |  |            addq.l #8,sp
    866a:	|  |  |            move.l d0,-(sp)
    866c:	|  |  |            move.l d2,-(sp)
    866e:	|  |  |            jsr 179ce <__subsf3>
    8674:	|  |  |            addq.l #8,sp
    8676:	|  |  |            move.l d0,-(sp)
    8678:	|  |  |            jsr 17672 <__fixsfsi>
    867e:	|  |  |            addq.l #4,sp
    8680:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    8684:	|  |  \----------> move.l 36(sp),-(sp)
    8688:	|  |               jsr 13d70 <strlen>
    868e:	|  |               addq.l #4,sp
    8690:	|  |               move.l d0,d1
    8692:	|  |               move.l 48(sp),d0
    8696:	|  |               cmp.l d1,d0
    8698:	|  \-------------- bcs.w 85d4 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    869c:	|                  lea 16(sp),a0
    86a0:	|                  move.l a0,-(sp)
    86a2:	|                  move.l 44(sp),-(sp)
    86a6:	|                  move.l 44(sp),-(sp)
    86aa:	|                  jsr 7dc2 <addSpeechLine>
    86b0:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    86b4:	|                  move.l 44(sp),-(sp)
    86b8:	|                  jsr 176da <__floatsisf>
    86be:	|                  addq.l #4,sp
    86c0:	|                  move.l d0,d2
    86c2:	|                  move.l 1cabc <fontHeight>,d0
    86c8:	|                  move.l d0,-(sp)
    86ca:	|                  jsr 176da <__floatsisf>
    86d0:	|                  addq.l #4,sp
    86d2:	|                  move.l d0,d1
    86d4:	|                  move.l 1c362 <cameraZoom>,d0
    86da:	|                  move.l d0,-(sp)
    86dc:	|                  move.l d1,-(sp)
    86de:	|                  jsr 17586 <__divsf3>
    86e4:	|                  addq.l #8,sp
    86e6:	|                  move.l d0,-(sp)
    86e8:	|                  move.l d2,-(sp)
    86ea:	|                  jsr 179ce <__subsf3>
    86f0:	|                  addq.l #8,sp
    86f2:	|                  move.l d0,-(sp)
    86f4:	|                  jsr 17672 <__fixsfsi>
    86fa:	|                  addq.l #4,sp
    86fc:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    8700:	|              /-- bpl.s 871e <wrapSpeechXY+0x1f8>
    8702:	|              |   movea.l 1ca20 <speech>,a0
    8708:	|              |   move.l 8(a0),d0
    870c:	|              |   movea.l 1ca20 <speech>,a0
    8712:	|              |   sub.l 44(sp),d0
    8716:	|              |   move.l d0,8(a0)
    871a:	|           /--|-- bra.w 880c <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    871e:	|           |  \-> movea.l 1ca20 <speech>,a0
    8724:	|           |      move.l 8(a0),d0
    8728:	|           |      move.l d0,-(sp)
    872a:	|           |      jsr 176da <__floatsisf>
    8730:	|           |      addq.l #4,sp
    8732:	|           |      move.l d0,d2
    8734:	|           |      move.l 1ca82 <cameraY>,d0
    873a:	|           |      move.l d0,-(sp)
    873c:	|           |      jsr 176da <__floatsisf>
    8742:	|           |      addq.l #4,sp
    8744:	|           |      move.l d0,d3
    8746:	|           |      move.l 1c91c <winHeight>,d4
    874c:	|           |      move.l 1cabc <fontHeight>,d0
    8752:	|           |      pea 3 <_start+0x3>
    8756:	|           |      move.l d0,-(sp)
    8758:	|           |      jsr 17cda <__divsi3>
    875e:	|           |      addq.l #8,sp
    8760:	|           |      move.l d4,d1
    8762:	|           |      sub.l d0,d1
    8764:	|           |      move.l d1,-(sp)
    8766:	|           |      jsr 17702 <__floatunsisf>
    876c:	|           |      addq.l #4,sp
    876e:	|           |      move.l d0,d1
    8770:	|           |      move.l 1c362 <cameraZoom>,d0
    8776:	|           |      move.l d0,-(sp)
    8778:	|           |      move.l d1,-(sp)
    877a:	|           |      jsr 17586 <__divsf3>
    8780:	|           |      addq.l #8,sp
    8782:	|           |      move.l d0,-(sp)
    8784:	|           |      move.l d3,-(sp)
    8786:	|           |      jsr 1748c <__addsf3>
    878c:	|           |      addq.l #8,sp
    878e:	|           |      move.l d0,-(sp)
    8790:	|           |      move.l d2,-(sp)
    8792:	|           |      jsr 17846 <__gtsf2>
    8798:	|           |      addq.l #8,sp
    879a:	|           |      tst.l d0
    879c:	|           +----- ble.s 880c <wrapSpeechXY+0x2e6>
    879e:	|           |      move.l 1ca82 <cameraY>,d0
    87a4:	|           |      move.l d0,-(sp)
    87a6:	|           |      jsr 176da <__floatsisf>
    87ac:	|           |      addq.l #4,sp
    87ae:	|           |      move.l d0,d2
    87b0:	|           |      move.l 1c91c <winHeight>,d3
    87b6:	|           |      move.l 1cabc <fontHeight>,d0
    87bc:	|           |      pea 3 <_start+0x3>
    87c0:	|           |      move.l d0,-(sp)
    87c2:	|           |      jsr 17cda <__divsi3>
    87c8:	|           |      addq.l #8,sp
    87ca:	|           |      move.l d3,d1
    87cc:	|           |      sub.l d0,d1
    87ce:	|           |      move.l d1,-(sp)
    87d0:	|           |      jsr 17702 <__floatunsisf>
    87d6:	|           |      addq.l #4,sp
    87d8:	|           |      move.l d0,d1
    87da:	|           |      move.l 1c362 <cameraZoom>,d0
    87e0:	|           |      move.l d0,-(sp)
    87e2:	|           |      move.l d1,-(sp)
    87e4:	|           |      jsr 17586 <__divsf3>
    87ea:	|           |      addq.l #8,sp
    87ec:	|           |      move.l d0,-(sp)
    87ee:	|           |      move.l d2,-(sp)
    87f0:	|           |      jsr 1748c <__addsf3>
    87f6:	|           |      addq.l #8,sp
    87f8:	|           |      movea.l 1ca20 <speech>,a2
    87fe:	|           |      move.l d0,-(sp)
    8800:	|           |      jsr 17672 <__fixsfsi>
    8806:	|           |      addq.l #4,sp
    8808:	|           |      move.l d0,8(a2)

    if (offset) {
    880c:	|           \----> move.l 16(sp),d0
    8810:	|        /-------- beq.s 8846 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    8812:	|        |         movea.l 1ca20 <speech>,a0
    8818:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    881e:	|        |     /-- bra.s 8840 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    8820:	|        |  /--|-> movea.l 20(sp),a0
    8824:	|        |  |  |   move.l 8(a0),d1
    8828:	|        |  |  |   move.l 16(sp),d0
    882c:	|        |  |  |   add.l d1,d0
    882e:	|        |  |  |   movea.l 20(sp),a0
    8832:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    8836:	|        |  |  |   movea.l 20(sp),a0
    883a:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    8840:	|        |  |  \-> tst.l 20(sp)
    8844:	|        |  \----- bne.s 8820 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    8846:	|        \-------> move.l 24(sp),d0
}
    884a:	\----------------> movem.l (sp)+,d2-d4/a2
    884e:	                   lea 16(sp),sp
    8852:	                   rts

00008854 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    8854:	       lea -12(sp),sp
    8858:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    885a:	       move.l 1ca24 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8862:	   /-- bra.s 888a <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8864:	/--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    886a:	|  |   movea.l 12(sp),a0
    886e:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8874:	|  |   move.l 8(sp),4(sp)
    887a:	|  |   move.l 1c9c4 <SysBase>,d0
    8880:	|  |   movea.l d0,a6
    8882:	|  |   movea.l 4(sp),a1
    8886:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    888a:	|  \-> tst.l 12(sp)
    888e:	\----- bne.s 8864 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8890:	       clr.l 1ca24 <zBuffer>
}
    8896:	       nop
    8898:	       movea.l (sp)+,a6
    889a:	       lea 12(sp),sp
    889e:	       rts

000088a0 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    88a0:	                lea -304(sp),sp
    88a4:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    88a8:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    88ac:	                jsr 8854 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    88b2:	                move.l 328(sp),d0
    88b6:	                move.l d0,-(sp)
    88b8:	                jsr 6eb2 <openFileFromNum>
    88be:	                addq.l #4,sp
    88c0:	                tst.l d0
    88c2:	            /-- bne.s 88ca <setZBuffer+0x2a>
    88c4:	            |   clr.w d0
    88c6:	/-----------|-- bra.w 8b88 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    88ca:	|           \-> move.l 1c9ac <bigDataFile>,310(sp)
    88d2:	|               move.l 1c9cc <DOSBase>,d0
    88d8:	|               movea.l d0,a6
    88da:	|               move.l 310(sp),d1
    88de:	|               jsr -306(a6)
    88e2:	|               move.l d0,306(sp)
    88e6:	|               move.l 306(sp),d0
    88ea:	|               moveq #97,d1
    88ec:	|               cmp.l d0,d1
    88ee:	|        /----- bne.s 8962 <setZBuffer+0xc2>
    88f0:	|        |      move.l 1c9ac <bigDataFile>,302(sp)
    88f8:	|        |      move.l 1c9cc <DOSBase>,d0
    88fe:	|        |      movea.l d0,a6
    8900:	|        |      move.l 302(sp),d1
    8904:	|        |      jsr -306(a6)
    8908:	|        |      move.l d0,298(sp)
    890c:	|        |      move.l 298(sp),d0
    8910:	|        |      moveq #115,d1
    8912:	|        |      cmp.l d0,d1
    8914:	|        +----- bne.s 8962 <setZBuffer+0xc2>
    8916:	|        |      move.l 1c9ac <bigDataFile>,294(sp)
    891e:	|        |      move.l 1c9cc <DOSBase>,d0
    8924:	|        |      movea.l d0,a6
    8926:	|        |      move.l 294(sp),d1
    892a:	|        |      jsr -306(a6)
    892e:	|        |      move.l d0,290(sp)
    8932:	|        |      move.l 290(sp),d0
    8936:	|        |      moveq #122,d1
    8938:	|        |      cmp.l d0,d1
    893a:	|        +----- bne.s 8962 <setZBuffer+0xc2>
    893c:	|        |      move.l 1c9ac <bigDataFile>,286(sp)
    8944:	|        |      move.l 1c9cc <DOSBase>,d0
    894a:	|        |      movea.l d0,a6
    894c:	|        |      move.l 286(sp),d1
    8950:	|        |      jsr -306(a6)
    8954:	|        |      move.l d0,282(sp)
    8958:	|        |      move.l 282(sp),d0
    895c:	|        |      moveq #98,d1
    895e:	|        |      cmp.l d0,d1
    8960:	|        |  /-- beq.s 8976 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8962:	|        \--|-> pea 19012 <PutChar+0x12a0>
    8968:	|           |   jsr 1729e <KPrintF>
    896e:	|           |   addq.l #4,sp
		 return FALSE;
    8970:	|           |   clr.w d0
    8972:	+-----------|-- bra.w 8b88 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8976:	|           \-> move.l 1c9ac <bigDataFile>,278(sp)
    897e:	|               move.l 1c9cc <DOSBase>,d0
    8984:	|               movea.l d0,a6
    8986:	|               move.l 278(sp),d1
    898a:	|               jsr -306(a6)
    898e:	|               move.l d0,274(sp)
    8992:	|               move.l 274(sp),d0
    8996:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    899a:	|               moveq #28,d0
    899c:	|               move.l d0,270(sp)
    89a0:	|               clr.l 266(sp)
    89a4:	|               move.l 1c9c4 <SysBase>,d0
    89aa:	|               movea.l d0,a6
    89ac:	|               move.l 270(sp),d0
    89b0:	|               move.l 266(sp),d1
    89b4:	|               jsr -684(a6)
    89b8:	|               move.l d0,262(sp)
    89bc:	|               move.l 262(sp),d0
    89c0:	|               move.l d0,1ca24 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    89c6:	|               move.l 1ca24 <zBuffer>,318(sp)

	while(numelements--)
    89ce:	|     /-------- bra.w 8b6e <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    89d2:	|  /--|-------> move.l 1c9ac <bigDataFile>,d0
    89d8:	|  |  |         move.l d0,-(sp)
    89da:	|  |  |         jsr 6bc <get2bytes>
    89e0:	|  |  |         addq.l #4,sp
    89e2:	|  |  |         movea.l 318(sp),a0
    89e6:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    89e8:	|  |  |         move.l 1c9ac <bigDataFile>,d0
    89ee:	|  |  |         move.l d0,-(sp)
    89f0:	|  |  |         jsr 6bc <get2bytes>
    89f6:	|  |  |         addq.l #4,sp
    89f8:	|  |  |         movea.l 318(sp),a0
    89fc:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8a00:	|  |  |         move.l 1c9ac <bigDataFile>,d0
    8a06:	|  |  |         move.l d0,-(sp)
    8a08:	|  |  |         jsr 6bc <get2bytes>
    8a0e:	|  |  |         addq.l #4,sp
    8a10:	|  |  |         movea.l 318(sp),a0
    8a14:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8a18:	|  |  |         move.l 1c9ac <bigDataFile>,d0
    8a1e:	|  |  |         move.l d0,-(sp)
    8a20:	|  |  |         jsr 6bc <get2bytes>
    8a26:	|  |  |         addq.l #4,sp
    8a28:	|  |  |         movea.l 318(sp),a0
    8a2c:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    8a30:	|  |  |         move.l 1c9ac <bigDataFile>,d0
    8a36:	|  |  |         move.l d0,-(sp)
    8a38:	|  |  |         jsr 6bc <get2bytes>
    8a3e:	|  |  |         addq.l #4,sp
    8a40:	|  |  |         movea.l 318(sp),a0
    8a44:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8a48:	|  |  |         movea.l 318(sp),a0
    8a4c:	|  |  |         move.l (a0),d0
    8a4e:	|  |  |         movea.l 318(sp),a0
    8a52:	|  |  |         move.l 4(a0),d1
    8a56:	|  |  |         move.l d1,-(sp)
    8a58:	|  |  |         move.l d0,-(sp)
    8a5a:	|  |  |         jsr 17c5c <__mulsi3>
    8a60:	|  |  |         addq.l #8,sp
    8a62:	|  |  |         tst.l d0
    8a64:	|  |  |     /-- bge.s 8a68 <setZBuffer+0x1c8>
    8a66:	|  |  |     |   addq.l #7,d0
    8a68:	|  |  |     \-> asr.l #3,d0
    8a6a:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8a6e:	|  |  |         moveq #0,d0
    8a70:	|  |  |         move.w 260(sp),d0
    8a74:	|  |  |         move.l d0,256(sp)
    8a78:	|  |  |         moveq #2,d1
    8a7a:	|  |  |         move.l d1,252(sp)
    8a7e:	|  |  |         move.l 1c9c4 <SysBase>,d0
    8a84:	|  |  |         movea.l d0,a6
    8a86:	|  |  |         move.l 256(sp),d0
    8a8a:	|  |  |         move.l 252(sp),d1
    8a8e:	|  |  |         jsr -684(a6)
    8a92:	|  |  |         move.l d0,248(sp)
    8a96:	|  |  |         move.l 248(sp),d0
    8a9a:	|  |  |         movea.l 318(sp),a0
    8a9e:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8aa2:	|  |  |         move.l 1c9ac <bigDataFile>,244(sp)
    8aaa:	|  |  |         movea.l 318(sp),a0
    8aae:	|  |  |         move.l 20(a0),240(sp)
    8ab4:	|  |  |         moveq #1,d0
    8ab6:	|  |  |         move.l d0,236(sp)
    8aba:	|  |  |         moveq #0,d0
    8abc:	|  |  |         move.w 260(sp),d0
    8ac0:	|  |  |         move.l d0,232(sp)
    8ac4:	|  |  |         move.l 1c9cc <DOSBase>,d0
    8aca:	|  |  |         movea.l d0,a6
    8acc:	|  |  |         move.l 244(sp),d1
    8ad0:	|  |  |         move.l 240(sp),d2
    8ad4:	|  |  |         move.l 236(sp),d3
    8ad8:	|  |  |         move.l 232(sp),d4
    8adc:	|  |  |         jsr -324(a6)
    8ae0:	|  |  |         move.l d0,228(sp)
    8ae4:	|  |  |         move.l 228(sp),d0
    8ae8:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8aec:	|  |  |         tst.w 322(sp)
    8af0:	|  |  |  /----- beq.s 8b2c <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8af2:	|  |  |  |      moveq #28,d1
    8af4:	|  |  |  |      move.l d1,222(sp)
    8af8:	|  |  |  |      clr.l 218(sp)
    8afc:	|  |  |  |      move.l 1c9c4 <SysBase>,d0
    8b02:	|  |  |  |      movea.l d0,a6
    8b04:	|  |  |  |      move.l 222(sp),d0
    8b08:	|  |  |  |      move.l 218(sp),d1
    8b0c:	|  |  |  |      jsr -684(a6)
    8b10:	|  |  |  |      move.l d0,214(sp)
    8b14:	|  |  |  |      move.l 214(sp),d0
    8b18:	|  |  |  |      movea.l 318(sp),a0
    8b1c:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8b20:	|  |  |  |      movea.l 318(sp),a0
    8b24:	|  |  |  |      move.l 24(a0),318(sp)
    8b2a:	|  |  |  |  /-- bra.s 8b34 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8b2c:	|  |  |  \--|-> movea.l 318(sp),a0
    8b30:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8b34:	|  |  |     \-> movea.l 318(sp),a0
    8b38:	|  |  |         move.l 4(a0),d0
    8b3c:	|  |  |         move.l d0,d0
    8b3e:	|  |  |         movea.w d0,a1
    8b40:	|  |  |         movea.l 318(sp),a0
    8b44:	|  |  |         move.l (a0),d0
    8b46:	|  |  |         move.l d0,d0
    8b48:	|  |  |         movea.w d0,a0
    8b4a:	|  |  |         movea.l 318(sp),a2
    8b4e:	|  |  |         move.l 20(a2),d0
    8b52:	|  |  |         clr.l -(sp)
    8b54:	|  |  |         pea 1 <_start+0x1>
    8b58:	|  |  |         move.l a1,-(sp)
    8b5a:	|  |  |         move.l a0,-(sp)
    8b5c:	|  |  |         pea 19026 <PutChar+0x12b4>
    8b62:	|  |  |         move.l d0,-(sp)
    8b64:	|  |  |         jsr 17386 <debug_register_bitmap>
    8b6a:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8b6e:	|  |  \-------> move.w 322(sp),d0
    8b72:	|  |            move.w d0,d1
    8b74:	|  |            subq.w #1,d1
    8b76:	|  |            move.w d1,322(sp)
    8b7a:	|  |            tst.w d0
    8b7c:	|  \----------- bne.w 89d2 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8b80:	|               jsr 6daa <finishAccess>
	
	return TRUE;
    8b86:	|               moveq #1,d0
}
    8b88:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    8b8c:	                lea 304(sp),sp
    8b90:	                rts

00008b92 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8b92:	          lea -32(sp),sp
    8b96:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8b98:	          move.l 40(sp),d0
    8b9c:	          addq.l #8,d0
    8b9e:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8ba2:	          clr.l 32(sp)
    8ba6:	   /----- bra.s 8bec <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8ba8:	/--|----> movea.l 24(sp),a0
    8bac:	|  |      movea.l 8(a0),a0
    8bb0:	|  |      move.l 32(sp),d1
    8bb4:	|  |      move.l d1,d0
    8bb6:	|  |      lsl.l #3,d0
    8bb8:	|  |      sub.l d1,d0
    8bba:	|  |      add.l d0,d0
    8bbc:	|  |      add.l d0,d0
    8bbe:	|  |      adda.l d0,a0
    8bc0:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8bc4:	|  |      movea.l 8(sp),a0
    8bc8:	|  |      move.l 24(a0),d0
    8bcc:	|  |  /-- beq.s 8be8 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8bce:	|  |  |   movea.l 8(sp),a0
    8bd2:	|  |  |   move.l 24(a0),4(sp)
    8bd8:	|  |  |   move.l 1c9c4 <SysBase>,d0
    8bde:	|  |  |   movea.l d0,a6
    8be0:	|  |  |   movea.l 4(sp),a1
    8be4:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8be8:	|  |  \-> addq.l #1,32(sp)
    8bec:	|  \----> movea.l 24(sp),a0
    8bf0:	|         move.l (a0),d0
    8bf2:	|         cmp.l 32(sp),d0
    8bf6:	\-------- bgt.s 8ba8 <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);	
    8bf8:	          movea.l 24(sp),a0
    8bfc:	          move.l 8(a0),20(sp)
    8c02:	          move.l 1c9c4 <SysBase>,d0
    8c08:	          movea.l d0,a6
    8c0a:	          movea.l 20(sp),a1
    8c0e:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8c12:	          move.l 1cadc <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8c1a:	      /-- bra.s 8c26 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8c1c:	   /--|-> movea.l 28(sp),a0
    8c20:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8c26:	   |  \-> movea.l 28(sp),a0
    8c2a:	   |      movea.l 22(a0),a0
    8c2e:	   |      move.l (a0),d1
    8c30:	   |      movea.l 40(sp),a0
    8c34:	   |      move.l (a0),d0
    8c36:	   |      cmp.l d1,d0
    8c38:	   |  /-- beq.s 8c40 <forgetSpriteBank+0xae>
    8c3a:	   |  |   tst.l 28(sp)
    8c3e:	   \--|-- bne.s 8c1c <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8c40:	      \-> tst.l 28(sp)
    8c44:	   /----- beq.s 8c6e <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8c46:	   |      movea.l 40(sp),a0
    8c4a:	   |      move.l 22(a0),d0
    8c4e:	   |      movea.l 28(sp),a0
    8c52:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8c56:	   |      move.l 40(sp),12(sp)
    8c5c:	   |      move.l 1c9c4 <SysBase>,d0
    8c62:	   |      movea.l d0,a6
    8c64:	   |      movea.l 12(sp),a1
    8c68:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8c6c:	   |  /-- bra.s 8c94 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8c6e:	   \--|-> movea.l 1cadc <allLoadedBanks>,a0
    8c74:	      |   move.l 22(a0),d0
    8c78:	      |   move.l d0,1cadc <allLoadedBanks>
		FreeVec( forgetme);
    8c7e:	      |   move.l 40(sp),16(sp)
    8c84:	      |   move.l 1c9c4 <SysBase>,d0
    8c8a:	      |   movea.l d0,a6
    8c8c:	      |   movea.l 16(sp),a1
    8c90:	      |   jsr -690(a6)
}
    8c94:	      \-> nop
    8c96:	          movea.l (sp)+,a6
    8c98:	          lea 32(sp),sp
    8c9c:	          rts

00008c9e <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8c9e:	                      lea -84(sp),sp
    8ca2:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8ca6:	                      pea 19032 <PutChar+0x12c0>
    8cac:	                      jsr 1729e <KPrintF>
    8cb2:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8cb4:	                      clr.l 94(sp)
    8cb8:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8cbc:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8cc0:	                      move.l 108(sp),-(sp)
    8cc4:	                      jsr 6eb2 <openFileFromNum>
    8cca:	                      addq.l #4,sp
    8ccc:	                      tst.l d0
    8cce:	                  /-- bne.s 8ce4 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8cd0:	                  |   pea 1904c <PutChar+0x12da>
    8cd6:	                  |   jsr 1729e <KPrintF>
    8cdc:	                  |   addq.l #4,sp
		return FALSE;
    8cde:	                  |   clr.w d0
    8ce0:	/-----------------|-- bra.w 90d8 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8ce4:	|                 \-> move.l 1c9ac <bigDataFile>,d0
    8cea:	|                     move.l d0,-(sp)
    8cec:	|                     jsr 6bc <get2bytes>
    8cf2:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8cf4:	|                     move.l 1c9ac <bigDataFile>,82(sp)
    8cfc:	|                     move.l 1c9cc <DOSBase>,d0
    8d02:	|                     movea.l d0,a6
    8d04:	|                     move.l 82(sp),d1
    8d08:	|                     jsr -306(a6)
    8d0c:	|                     move.l d0,78(sp)
    8d10:	|                     move.l 78(sp),d0
    8d14:	|                     movea.l 112(sp),a0
    8d18:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8d1c:	|                     move.l 1c9ac <bigDataFile>,d0
    8d22:	|                     move.l d0,-(sp)
    8d24:	|                     jsr 6bc <get2bytes>
    8d2a:	|                     addq.l #4,sp
    8d2c:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8d30:	|                 /-- bgt.s 8d46 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8d32:	|                 |   pea 1907a <PutChar+0x1308>
    8d38:	|                 |   jsr 1729e <KPrintF>
    8d3e:	|                 |   addq.l #4,sp
		return FALSE;
    8d40:	|                 |   clr.w d0
    8d42:	+-----------------|-- bra.w 90d8 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8d46:	|                 \-> movea.l 112(sp),a0
    8d4a:	|                     move.l 4(a0),d0
    8d4e:	|                     moveq #3,d1
    8d50:	|                     cmp.l d0,d1
    8d52:	|                 /-- bne.s 8d60 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8d54:	|                 |   movea.l 112(sp),a0
    8d58:	|                 |   move.w #1,12(a0)
    8d5e:	|              /--|-- bra.s 8d82 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8d60:	|              |  \-> movea.l 112(sp),a0
    8d64:	|              |      move.l 4(a0),d0
    8d68:	|              |      moveq #3,d1
    8d6a:	|              |      cmp.l d0,d1
    8d6c:	|              +----- bge.s 8d82 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8d6e:	|              |      pea 190ba <PutChar+0x1348>
    8d74:	|              |      jsr 1729e <KPrintF>
    8d7a:	|              |      addq.l #4,sp
		return FALSE;
    8d7c:	|              |      clr.w d0
    8d7e:	+--------------|----- bra.w 90d8 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8d82:	|              \----> movea.l 112(sp),a0
    8d86:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8d8a:	|                     move.l 74(sp),d1
    8d8e:	|                     move.l d1,d0
    8d90:	|                     lsl.l #3,d0
    8d92:	|                     sub.l d1,d0
    8d94:	|                     add.l d0,d0
    8d96:	|                     add.l d0,d0
    8d98:	|                     move.l d0,70(sp)
    8d9c:	|                     clr.l 66(sp)
    8da0:	|                     move.l 1c9c4 <SysBase>,d0
    8da6:	|                     movea.l d0,a6
    8da8:	|                     move.l 70(sp),d0
    8dac:	|                     move.l 66(sp),d1
    8db0:	|                     jsr -684(a6)
    8db4:	|                     move.l d0,62(sp)
    8db8:	|                     move.l 62(sp),d0
    8dbc:	|                     movea.l 112(sp),a0
    8dc0:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8dc4:	|                     movea.l 112(sp),a0
    8dc8:	|                     move.l 8(a0),d0
    8dcc:	|                 /-- bne.s 8dd4 <loadSpriteBank+0x136>
    8dce:	|                 |   clr.w d0
    8dd0:	+-----------------|-- bra.w 90d8 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8dd4:	|                 \-> moveq #1,d0
    8dd6:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8dda:	|                     clr.l 100(sp)
    8dde:	|     /-------------- bra.w 90b6 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8de2:	|  /--|-------------> move.l 1c9ac <bigDataFile>,d0
    8de8:	|  |  |               move.l d0,-(sp)
    8dea:	|  |  |               jsr 6bc <get2bytes>
    8df0:	|  |  |               addq.l #4,sp
    8df2:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8df6:	|  |  |               movea.l 112(sp),a0
    8dfa:	|  |  |               movea.l 8(a0),a0
    8dfe:	|  |  |               move.l 100(sp),d1
    8e02:	|  |  |               move.l d1,d0
    8e04:	|  |  |               lsl.l #3,d0
    8e06:	|  |  |               sub.l d1,d0
    8e08:	|  |  |               add.l d0,d0
    8e0a:	|  |  |               add.l d0,d0
    8e0c:	|  |  |               adda.l d0,a0
    8e0e:	|  |  |               moveq #0,d0
    8e10:	|  |  |               move.w 60(sp),d0
    8e14:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8e16:	|  |  |               movea.l 1c9ac <bigDataFile>,a1
    8e1c:	|  |  |               movea.l 112(sp),a0
    8e20:	|  |  |               movea.l 8(a0),a0
    8e24:	|  |  |               move.l 100(sp),d1
    8e28:	|  |  |               move.l d1,d0
    8e2a:	|  |  |               lsl.l #3,d0
    8e2c:	|  |  |               sub.l d1,d0
    8e2e:	|  |  |               add.l d0,d0
    8e30:	|  |  |               add.l d0,d0
    8e32:	|  |  |               lea (0,a0,d0.l),a2
    8e36:	|  |  |               move.l a1,-(sp)
    8e38:	|  |  |               jsr 6bc <get2bytes>
    8e3e:	|  |  |               addq.l #4,sp
    8e40:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8e44:	|  |  |               movea.l 1c9ac <bigDataFile>,a1
    8e4a:	|  |  |               movea.l 112(sp),a0
    8e4e:	|  |  |               movea.l 8(a0),a0
    8e52:	|  |  |               move.l 100(sp),d1
    8e56:	|  |  |               move.l d1,d0
    8e58:	|  |  |               lsl.l #3,d0
    8e5a:	|  |  |               sub.l d1,d0
    8e5c:	|  |  |               add.l d0,d0
    8e5e:	|  |  |               add.l d0,d0
    8e60:	|  |  |               lea (0,a0,d0.l),a2
    8e64:	|  |  |               move.l a1,-(sp)
    8e66:	|  |  |               jsr 6bc <get2bytes>
    8e6c:	|  |  |               addq.l #4,sp
    8e6e:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8e72:	|  |  |               movea.l 1c9ac <bigDataFile>,a1
    8e78:	|  |  |               movea.l 112(sp),a0
    8e7c:	|  |  |               movea.l 8(a0),a0
    8e80:	|  |  |               move.l 100(sp),d1
    8e84:	|  |  |               move.l d1,d0
    8e86:	|  |  |               lsl.l #3,d0
    8e88:	|  |  |               sub.l d1,d0
    8e8a:	|  |  |               add.l d0,d0
    8e8c:	|  |  |               add.l d0,d0
    8e8e:	|  |  |               lea (0,a0,d0.l),a2
    8e92:	|  |  |               move.l a1,-(sp)
    8e94:	|  |  |               jsr 6bc <get2bytes>
    8e9a:	|  |  |               addq.l #4,sp
    8e9c:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8ea0:	|  |  |               movea.l 112(sp),a0
    8ea4:	|  |  |               move.l 4(a0),d0
    8ea8:	|  |  |               moveq #3,d1
    8eaa:	|  |  |               cmp.l d0,d1
    8eac:	|  |  |     /-------- beq.w 8f48 <loadSpriteBank+0x2aa>
    8eb0:	|  |  |     |         moveq #3,d1
    8eb2:	|  |  |     |         cmp.l d0,d1
    8eb4:	|  |  |  /--|-------- blt.w 8fee <loadSpriteBank+0x350>
    8eb8:	|  |  |  |  |         moveq #1,d1
    8eba:	|  |  |  |  |         cmp.l d0,d1
    8ebc:	|  |  |  |  |     /-- beq.s 8ec8 <loadSpriteBank+0x22a>
    8ebe:	|  |  |  |  |     |   moveq #2,d1
    8ec0:	|  |  |  |  |     |   cmp.l d0,d1
    8ec2:	|  |  |  |  |  /--|-- beq.s 8ef4 <loadSpriteBank+0x256>
    8ec4:	|  |  |  +--|--|--|-- bra.w 8fee <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8ec8:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8ecc:	|  |  |  |  |  |      movea.l 8(a0),a0
    8ed0:	|  |  |  |  |  |      move.l 100(sp),d1
    8ed4:	|  |  |  |  |  |      move.l d1,d0
    8ed6:	|  |  |  |  |  |      lsl.l #3,d0
    8ed8:	|  |  |  |  |  |      sub.l d1,d0
    8eda:	|  |  |  |  |  |      add.l d0,d0
    8edc:	|  |  |  |  |  |      add.l d0,d0
    8ede:	|  |  |  |  |  |      adda.l d0,a0
    8ee0:	|  |  |  |  |  |      move.l 4(a0),d0
    8ee4:	|  |  |  |  |  |      addq.l #2,d0
    8ee6:	|  |  |  |  |  |      move.l d0,d0
    8ee8:	|  |  |  |  |  |      add.w d0,d0
    8eea:	|  |  |  |  |  |      add.w d0,d0
    8eec:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8ef0:	|  |  |  +--|--|----- bra.w 8fee <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8ef4:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8ef8:	|  |  |  |  |         movea.l 8(a0),a0
    8efc:	|  |  |  |  |         move.l 100(sp),d1
    8f00:	|  |  |  |  |         move.l d1,d0
    8f02:	|  |  |  |  |         lsl.l #3,d0
    8f04:	|  |  |  |  |         sub.l d1,d0
    8f06:	|  |  |  |  |         add.l d0,d0
    8f08:	|  |  |  |  |         add.l d0,d0
    8f0a:	|  |  |  |  |         adda.l d0,a0
    8f0c:	|  |  |  |  |         move.l (a0),d0
    8f0e:	|  |  |  |  |     /-- bpl.s 8f12 <loadSpriteBank+0x274>
    8f10:	|  |  |  |  |     |   addq.l #7,d0
    8f12:	|  |  |  |  |     \-> asr.l #3,d0
    8f14:	|  |  |  |  |         move.l d0,d2
    8f16:	|  |  |  |  |         movea.l 112(sp),a0
    8f1a:	|  |  |  |  |         movea.l 8(a0),a0
    8f1e:	|  |  |  |  |         move.l 100(sp),d1
    8f22:	|  |  |  |  |         move.l d1,d0
    8f24:	|  |  |  |  |         lsl.l #3,d0
    8f26:	|  |  |  |  |         sub.l d1,d0
    8f28:	|  |  |  |  |         add.l d0,d0
    8f2a:	|  |  |  |  |         add.l d0,d0
    8f2c:	|  |  |  |  |         adda.l d0,a0
    8f2e:	|  |  |  |  |         move.l 4(a0),d0
    8f32:	|  |  |  |  |         move.l d0,d0
    8f34:	|  |  |  |  |         move.w d2,d1
    8f36:	|  |  |  |  |         muls.w d0,d1
    8f38:	|  |  |  |  |         move.w d1,d0
    8f3a:	|  |  |  |  |         add.w d0,d0
    8f3c:	|  |  |  |  |         add.w d1,d0
    8f3e:	|  |  |  |  |         add.w d0,d0
    8f40:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8f44:	|  |  |  +--|-------- bra.w 8fee <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8f48:	|  |  |  |  \-------> movea.l 112(sp),a0
    8f4c:	|  |  |  |            movea.l 8(a0),a0
    8f50:	|  |  |  |            move.l 100(sp),d1
    8f54:	|  |  |  |            move.l d1,d0
    8f56:	|  |  |  |            lsl.l #3,d0
    8f58:	|  |  |  |            sub.l d1,d0
    8f5a:	|  |  |  |            add.l d0,d0
    8f5c:	|  |  |  |            add.l d0,d0
    8f5e:	|  |  |  |            adda.l d0,a0
    8f60:	|  |  |  |            move.l (a0),d0
    8f62:	|  |  |  |            andi.l #-2147483633,d0
    8f68:	|  |  |  |        /-- bpl.s 8f72 <loadSpriteBank+0x2d4>
    8f6a:	|  |  |  |        |   subq.l #1,d0
    8f6c:	|  |  |  |        |   moveq #-16,d1
    8f6e:	|  |  |  |        |   or.l d1,d0
    8f70:	|  |  |  |        |   addq.l #1,d0
    8f72:	|  |  |  |        \-> tst.l d0
    8f74:	|  |  |  |     /----- ble.s 8f7a <loadSpriteBank+0x2dc>
    8f76:	|  |  |  |     |      moveq #2,d0
    8f78:	|  |  |  |     |  /-- bra.s 8f7c <loadSpriteBank+0x2de>
    8f7a:	|  |  |  |     \--|-> clr.w d0
    8f7c:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8f80:	|  |  |  |            movea.l 112(sp),a0
    8f84:	|  |  |  |            movea.l 8(a0),a0
    8f88:	|  |  |  |            move.l 100(sp),d1
    8f8c:	|  |  |  |            move.l d1,d0
    8f8e:	|  |  |  |            lsl.l #3,d0
    8f90:	|  |  |  |            sub.l d1,d0
    8f92:	|  |  |  |            add.l d0,d0
    8f94:	|  |  |  |            add.l d0,d0
    8f96:	|  |  |  |            adda.l d0,a0
    8f98:	|  |  |  |            move.l (a0),d0
    8f9a:	|  |  |  |            movea.l d0,a0
    8f9c:	|  |  |  |            cmpa.w #0,a0
    8fa0:	|  |  |  |        /-- bge.s 8fa6 <loadSpriteBank+0x308>
    8fa2:	|  |  |  |        |   lea 15(a0),a0
    8fa6:	|  |  |  |        \-> move.l a0,d0
    8fa8:	|  |  |  |            asr.l #4,d0
    8faa:	|  |  |  |            add.l d0,d0
    8fac:	|  |  |  |            move.l d0,d1
    8fae:	|  |  |  |            moveq #0,d0
    8fb0:	|  |  |  |            move.w 58(sp),d0
    8fb4:	|  |  |  |            add.l d1,d0
    8fb6:	|  |  |  |            move.l d0,d2
    8fb8:	|  |  |  |            movea.l 112(sp),a0
    8fbc:	|  |  |  |            movea.l 8(a0),a0
    8fc0:	|  |  |  |            move.l 100(sp),d1
    8fc4:	|  |  |  |            move.l d1,d0
    8fc6:	|  |  |  |            lsl.l #3,d0
    8fc8:	|  |  |  |            sub.l d1,d0
    8fca:	|  |  |  |            add.l d0,d0
    8fcc:	|  |  |  |            add.l d0,d0
    8fce:	|  |  |  |            adda.l d0,a0
    8fd0:	|  |  |  |            move.l 4(a0),d0
    8fd4:	|  |  |  |            move.l d0,d0
    8fd6:	|  |  |  |            move.w d2,d1
    8fd8:	|  |  |  |            muls.w d0,d1
    8fda:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8fde:	|  |  |  |            cmpi.w #100,98(sp)
    8fe4:	|  |  |  |        /-- bls.s 8fec <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8fe6:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8fec:	|  |  |  |        \-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8fee:	|  |  |  \----------> moveq #0,d0
    8ff0:	|  |  |               move.w 98(sp),d0
    8ff4:	|  |  |               add.l d0,d0
    8ff6:	|  |  |               move.l d0,52(sp)
    8ffa:	|  |  |               moveq #2,d0
    8ffc:	|  |  |               move.l d0,48(sp)
    9000:	|  |  |               move.l 1c9c4 <SysBase>,d0
    9006:	|  |  |               movea.l d0,a6
    9008:	|  |  |               move.l 52(sp),d0
    900c:	|  |  |               move.l 48(sp),d1
    9010:	|  |  |               jsr -684(a6)
    9014:	|  |  |               move.l d0,44(sp)
    9018:	|  |  |               movea.l 44(sp),a1
    901c:	|  |  |               movea.l 112(sp),a0
    9020:	|  |  |               movea.l 8(a0),a0
    9024:	|  |  |               move.l 100(sp),d1
    9028:	|  |  |               move.l d1,d0
    902a:	|  |  |               lsl.l #3,d0
    902c:	|  |  |               sub.l d1,d0
    902e:	|  |  |               add.l d0,d0
    9030:	|  |  |               add.l d0,d0
    9032:	|  |  |               adda.l d0,a0
    9034:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    9038:	|  |  |               move.l 1c9ac <bigDataFile>,40(sp)
    9040:	|  |  |               movea.l 112(sp),a0
    9044:	|  |  |               movea.l 8(a0),a0
    9048:	|  |  |               move.l 100(sp),d1
    904c:	|  |  |               move.l d1,d0
    904e:	|  |  |               lsl.l #3,d0
    9050:	|  |  |               sub.l d1,d0
    9052:	|  |  |               add.l d0,d0
    9054:	|  |  |               add.l d0,d0
    9056:	|  |  |               adda.l d0,a0
    9058:	|  |  |               move.l 24(a0),36(sp)
    905e:	|  |  |               moveq #2,d1
    9060:	|  |  |               move.l d1,32(sp)
    9064:	|  |  |               move.w 98(sp),d0
    9068:	|  |  |               lsr.w #1,d0
    906a:	|  |  |               move.w d0,d0
    906c:	|  |  |               andi.l #65535,d0
    9072:	|  |  |               move.l d0,28(sp)
    9076:	|  |  |               move.l 1c9cc <DOSBase>,d0
    907c:	|  |  |               movea.l d0,a6
    907e:	|  |  |               move.l 40(sp),d1
    9082:	|  |  |               move.l 36(sp),d2
    9086:	|  |  |               move.l 32(sp),d3
    908a:	|  |  |               move.l 28(sp),d4
    908e:	|  |  |               jsr -324(a6)
    9092:	|  |  |               move.l d0,24(sp)
    9096:	|  |  |               move.l 24(sp),d0
    909a:	|  |  |               move.w d0,22(sp)
		if (!count) {
    909e:	|  |  |           /-- bne.s 90b2 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    90a0:	|  |  |           |   pea 190ef <PutChar+0x137d>
    90a6:	|  |  |           |   jsr 1729e <KPrintF>
    90ac:	|  |  |           |   addq.l #4,sp
			return FALSE;
    90ae:	|  |  |           |   clr.w d0
    90b0:	+--|--|-----------|-- bra.s 90d8 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    90b2:	|  |  |           \-> addq.l #1,100(sp)
    90b6:	|  |  \-------------> move.l 100(sp),d0
    90ba:	|  |                  cmp.l 74(sp),d0
    90be:	|  \----------------- blt.w 8de2 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    90c2:	|                     jsr 6daa <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    90c8:	|                     pea 19122 <PutChar+0x13b0>
    90ce:	|                     jsr 1729e <KPrintF>
    90d4:	|                     addq.l #4,sp
	return TRUE;
    90d6:	|                     moveq #1,d0
}
    90d8:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    90dc:	                      lea 84(sp),sp
    90e0:	                      rts

000090e2 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    90e2:	                   lea -16(sp),sp
    90e6:	                   move.l 28(sp),d0
    90ea:	                   move.w d0,d0
    90ec:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    90f0:	                   movea.l 24(sp),a0
    90f4:	                   move.l (a0),d0
    90f6:	                   move.l d0,-(sp)
    90f8:	                   jsr 17a3a <__fixunssfsi>
    90fe:	                   addq.l #4,sp
    9100:	                   move.l d0,d0
    9102:	                   movea.l 20(sp),a0
    9106:	                   move.l 8(a0),d1
    910a:	                   move.l d1,d1
    910c:	                   movea.w d0,a0
    910e:	                   suba.w d1,a0
    9110:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    9114:	                   movea.l 24(sp),a0
    9118:	                   move.l 4(a0),d0
    911c:	                   move.l d0,-(sp)
    911e:	                   jsr 17a3a <__fixunssfsi>
    9124:	                   addq.l #4,sp
    9126:	                   move.l d0,d0
    9128:	                   movea.l 20(sp),a0
    912c:	                   move.l 12(a0),d1
    9130:	                   move.l d1,d1
    9132:	                   movea.w d0,a0
    9134:	                   suba.w d1,a0
    9136:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    913a:	                   move.w 4(sp),d0
    913e:	                   movea.w d0,a1
    9140:	                   move.w 6(sp),d0
    9144:	                   movea.w d0,a0
    9146:	                   pea 1 <_start+0x1>
    914a:	                   move.l a1,-(sp)
    914c:	                   move.l a0,-(sp)
    914e:	                   move.l 36(sp),-(sp)
    9152:	                   move.l 36(sp),-(sp)
    9156:	                   jsr 2e6a <CstScaleSprite>
    915c:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    9160:	                   movea.l 24(sp),a0
    9164:	                   move.l 118(a0),d0
    9168:	                   moveq #8,d1
    916a:	                   and.l d1,d0
    916c:	   /-------------- beq.w 922e <scaleSprite+0x14c>
		if (single->xhot < 0)
    9170:	   |               movea.l 20(sp),a0
    9174:	   |               move.l 8(a0),d0
    9178:	   |  /----------- bpl.s 91b0 <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    917a:	   |  |            tst.w 2(sp)
    917e:	   |  |     /----- beq.s 9196 <scaleSprite+0xb4>
    9180:	   |  |     |      movea.l 20(sp),a0
    9184:	   |  |     |      move.l (a0),d0
    9186:	   |  |     |      move.l d0,d1
    9188:	   |  |     |      movea.l 20(sp),a0
    918c:	   |  |     |      move.l 8(a0),d0
    9190:	   |  |     |      move.l d0,d0
    9192:	   |  |     |      sub.w d0,d1
    9194:	   |  |     |  /-- bra.s 91a4 <scaleSprite+0xc2>
    9196:	   |  |     \--|-> movea.l 20(sp),a0
    919a:	   |  |        |   move.l 8(a0),d0
    919e:	   |  |        |   move.l d0,d0
    91a0:	   |  |        |   move.w d0,d1
    91a2:	   |  |        |   addq.w #1,d1
    91a4:	   |  |        \-> movea.w 6(sp),a0
    91a8:	   |  |            suba.w d1,a0
    91aa:	   |  |            move.w a0,14(sp)
    91ae:	   |  |  /-------- bra.s 91e4 <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    91b0:	   |  \--|-------> tst.w 2(sp)
    91b4:	   |     |  /----- beq.s 91d0 <scaleSprite+0xee>
    91b6:	   |     |  |      movea.l 20(sp),a0
    91ba:	   |     |  |      move.l (a0),d0
    91bc:	   |     |  |      move.l d0,d1
    91be:	   |     |  |      movea.l 20(sp),a0
    91c2:	   |     |  |      move.l 8(a0),d0
    91c6:	   |     |  |      move.l d0,d0
    91c8:	   |     |  |      sub.w d0,d1
    91ca:	   |     |  |      move.w d1,d0
    91cc:	   |     |  |      subq.w #1,d0
    91ce:	   |     |  |  /-- bra.s 91da <scaleSprite+0xf8>
    91d0:	   |     |  \--|-> movea.l 20(sp),a0
    91d4:	   |     |     |   move.l 8(a0),d0
    91d8:	   |     |     |   move.l d0,d0
    91da:	   |     |     \-> move.w 6(sp),d1
    91de:	   |     |         sub.w d0,d1
    91e0:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    91e4:	   |     \-------> movea.l 24(sp),a0
    91e8:	   |               move.l 24(a0),d0
    91ec:	   |               move.l d0,d1
    91ee:	   |               movea.l 20(sp),a0
    91f2:	   |               move.l 12(a0),d0
    91f6:	   |               move.l d0,d0
    91f8:	   |               sub.w d0,d1
    91fa:	   |               movea.w 4(sp),a0
    91fe:	   |               adda.w d1,a0
    9200:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    9204:	   |               movea.l 20(sp),a0
    9208:	   |               move.l (a0),d0
    920a:	   |               move.l d0,d0
    920c:	   |               move.w 14(sp),d1
    9210:	   |               add.w d0,d1
    9212:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    9216:	   |               movea.l 20(sp),a0
    921a:	   |               move.l 4(a0),d0
    921e:	   |               move.l d0,d0
    9220:	   |               movea.w 12(sp),a0
    9224:	   |               adda.w d0,a0
    9226:	   |               move.w a0,8(sp)
    922a:	/--|-------------- bra.w 9300 <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    922e:	|  \-------------> move.l 1ca7e <cameraX>,d0
    9234:	|                  move.l d0,d0
    9236:	|                  sub.w d0,6(sp)
		y -= cameraY;
    923a:	|                  move.l 1ca82 <cameraY>,d0
    9240:	|                  move.l d0,d0
    9242:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    9246:	|                  movea.l 20(sp),a0
    924a:	|                  move.l 8(a0),d0
    924e:	|     /----------- bpl.s 9286 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9250:	|     |            tst.w 2(sp)
    9254:	|     |     /----- beq.s 926c <scaleSprite+0x18a>
    9256:	|     |     |      movea.l 20(sp),a0
    925a:	|     |     |      move.l (a0),d0
    925c:	|     |     |      move.l d0,d1
    925e:	|     |     |      movea.l 20(sp),a0
    9262:	|     |     |      move.l 8(a0),d0
    9266:	|     |     |      move.l d0,d0
    9268:	|     |     |      sub.w d0,d1
    926a:	|     |     |  /-- bra.s 927a <scaleSprite+0x198>
    926c:	|     |     \--|-> movea.l 20(sp),a0
    9270:	|     |        |   move.l 8(a0),d0
    9274:	|     |        |   move.l d0,d0
    9276:	|     |        |   move.w d0,d1
    9278:	|     |        |   addq.w #1,d1
    927a:	|     |        \-> move.w 6(sp),d0
    927e:	|     |            sub.w d1,d0
    9280:	|     |            move.w d0,14(sp)
    9284:	|     |  /-------- bra.s 92ba <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9286:	|     \--|-------> tst.w 2(sp)
    928a:	|        |  /----- beq.s 92a6 <scaleSprite+0x1c4>
    928c:	|        |  |      movea.l 20(sp),a0
    9290:	|        |  |      move.l (a0),d0
    9292:	|        |  |      move.l d0,d1
    9294:	|        |  |      movea.l 20(sp),a0
    9298:	|        |  |      move.l 8(a0),d0
    929c:	|        |  |      move.l d0,d0
    929e:	|        |  |      sub.w d0,d1
    92a0:	|        |  |      move.w d1,d0
    92a2:	|        |  |      subq.w #1,d0
    92a4:	|        |  |  /-- bra.s 92b0 <scaleSprite+0x1ce>
    92a6:	|        |  \--|-> movea.l 20(sp),a0
    92aa:	|        |     |   move.l 8(a0),d0
    92ae:	|        |     |   move.l d0,d0
    92b0:	|        |     \-> move.w 6(sp),d1
    92b4:	|        |         sub.w d0,d1
    92b6:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    92ba:	|        \-------> movea.l 24(sp),a0
    92be:	|                  move.l 24(a0),d0
    92c2:	|                  move.l d0,d1
    92c4:	|                  movea.l 20(sp),a0
    92c8:	|                  move.l 12(a0),d0
    92cc:	|                  move.l d0,d0
    92ce:	|                  sub.w d0,d1
    92d0:	|                  movea.w 4(sp),a0
    92d4:	|                  adda.w d1,a0
    92d6:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    92da:	|                  movea.l 20(sp),a0
    92de:	|                  move.l (a0),d0
    92e0:	|                  move.l d0,d0
    92e2:	|                  move.w 14(sp),d1
    92e6:	|                  add.w d0,d1
    92e8:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    92ec:	|                  movea.l 20(sp),a0
    92f0:	|                  move.l 4(a0),d0
    92f4:	|                  move.l d0,d0
    92f6:	|                  movea.w 12(sp),a0
    92fa:	|                  adda.w d0,a0
    92fc:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9300:	\----------------> move.l 1c980 <input+0xa>,d1
    9306:	                   moveq #0,d0
    9308:	                   move.w 14(sp),d0
    930c:	                   cmp.l d1,d0
    930e:	            /----- bgt.s 9344 <scaleSprite+0x262>
    9310:	            |      move.l 1c980 <input+0xa>,d1
    9316:	            |      moveq #0,d0
    9318:	            |      move.w 10(sp),d0
    931c:	            |      cmp.l d1,d0
    931e:	            +----- blt.s 9344 <scaleSprite+0x262>
    9320:	            |      move.l 1c984 <input+0xe>,d1
    9326:	            |      moveq #0,d0
    9328:	            |      move.w 12(sp),d0
    932c:	            |      cmp.l d1,d0
    932e:	            +----- bgt.s 9344 <scaleSprite+0x262>
    9330:	            |      move.l 1c984 <input+0xe>,d1
    9336:	            |      moveq #0,d0
    9338:	            |      move.w 8(sp),d0
    933c:	            |      cmp.l d1,d0
    933e:	            +----- blt.s 9344 <scaleSprite+0x262>
		return TRUE;
    9340:	            |      moveq #1,d0
    9342:	            |  /-- bra.s 9346 <scaleSprite+0x264>
	}
	return FALSE;
    9344:	            \--|-> clr.w d0
    9346:	               \-> lea 16(sp),sp
    934a:	                   rts

0000934c <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    934c:	    move.l 4(sp),d0
    9350:	/-- bpl.s 9354 <TF_abs+0x8>
    9352:	|   neg.l d0
}
    9354:	\-> rts

00009356 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9356:	             lea -28(sp),sp
    935a:	             move.l a6,-(sp)
    935c:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    935e:	             move.l #132,28(sp)
    9366:	             clr.l 24(sp)
    936a:	             move.l 1c9c4 <SysBase>,d0
    9370:	             movea.l d0,a6
    9372:	             move.l 28(sp),d0
    9376:	             move.l 24(sp),d1
    937a:	             jsr -684(a6)
    937e:	             move.l d0,20(sp)
    9382:	             move.l 20(sp),d0
    9386:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    938a:	         /-- bne.s 9392 <addPerson+0x3c>
    938c:	         |   clr.w d0
    938e:	/--------|-- bra.w 95c2 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9392:	|        \-> move.l 48(sp),-(sp)
    9396:	|            jsr d6be <loadObjectType>
    939c:	|            addq.l #4,sp
    939e:	|            movea.l 16(sp),a0
    93a2:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    93a6:	|            movea.l 16(sp),a0
    93aa:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    93b2:	|            movea.l 16(sp),a0
    93b6:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    93ba:	|            movea.l 16(sp),a0
    93be:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    93c2:	|            move.l 44(sp),-(sp)
    93c6:	|            jsr 176da <__floatsisf>
    93cc:	|            addq.l #4,sp
    93ce:	|            move.l d0,d2
    93d0:	|            move.l 40(sp),-(sp)
    93d4:	|            jsr 176da <__floatsisf>
    93da:	|            addq.l #4,sp
    93dc:	|            move.l d2,-(sp)
    93de:	|            move.l d0,-(sp)
    93e0:	|            move.l 24(sp),-(sp)
    93e4:	|            jsr aea4 <moveAndScale>
    93ea:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    93ee:	|            movea.l 16(sp),a0
    93f2:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    93f6:	|            movea.l 16(sp),a0
    93fa:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9400:	|            movea.l 16(sp),a0
    9404:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    940a:	|            movea.l 16(sp),a0
    940e:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9412:	|            movea.l 16(sp),a0
    9416:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    941a:	|            movea.l 16(sp),a0
    941e:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9424:	|            movea.l 16(sp),a0
    9428:	|            clr.l 106(a0)
    newPerson->angle = 180;
    942c:	|            movea.l 16(sp),a0
    9430:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9438:	|            movea.l 16(sp),a0
    943c:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9444:	|            movea.l 16(sp),a0
    9448:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    944c:	|            movea.l 16(sp),a0
    9450:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9454:	|            movea.l 16(sp),a0
    9458:	|            movea.l 114(a0),a0
    945c:	|            move.l 24(a0),d0
    9460:	|            movea.l 16(sp),a0
    9464:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9468:	|            movea.l 16(sp),a0
    946c:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9470:	|            movea.l 16(sp),a0
    9474:	|            movea.l 114(a0),a0
    9478:	|            move.l 32(a0),d0
    947c:	|            movea.l 16(sp),a0
    9480:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9484:	|            movea.l 16(sp),a0
    9488:	|            clr.b 126(a0)
    newPerson->g = 0;
    948c:	|            movea.l 16(sp),a0
    9490:	|            clr.b 127(a0)
    newPerson->b = 0;
    9494:	|            movea.l 16(sp),a0
    9498:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    949c:	|            movea.l 16(sp),a0
    94a0:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    94a4:	|            movea.l 16(sp),a0
    94a8:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    94ac:	|            movea.l 16(sp),a0
    94b0:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    94b6:	|            clr.l -(sp)
    94b8:	|            move.l 20(sp),-(sp)
    94bc:	|            jsr 82a6 <setFrames>
    94c2:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    94c4:	|            movea.l 52(sp),a0
    94c8:	|            movea.l (a0),a0
    94ca:	|            movea.l (a0),a0
    94cc:	|            movea.l 4(a0),a0
    94d0:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    94d4:	|     /----- bpl.s 94de <addPerson+0x188>
    94d6:	|     |      move.l 12(sp),d0
    94da:	|     |      neg.l d0
    94dc:	|     |  /-- bra.s 94e0 <addPerson+0x18a>
    94de:	|     \--|-> moveq #1,d0
    94e0:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    94e4:	|            movea.l 52(sp),a0
    94e8:	|            movea.l (a0),a0
    94ea:	|            movea.l (a0),a0
    94ec:	|            movea.l (a0),a0
    94ee:	|            move.l 8(a0),d0
    94f2:	|            cmp.l 8(sp),d0
    94f6:	|     /----- bgt.s 9528 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    94f8:	|     |      tst.l 12(sp)
    94fc:	|     |  /-- bge.s 950a <addPerson+0x1b4>
            newPerson->height = 5;
    94fe:	|     |  |   movea.l 16(sp),a0
    9502:	|     |  |   moveq #5,d0
    9504:	|     |  |   move.l d0,20(a0)
    9508:	|  /--|--|-- bra.s 9554 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    950a:	|  |  |  \-> movea.l 52(sp),a0
    950e:	|  |  |      movea.l (a0),a0
    9510:	|  |  |      movea.l (a0),a0
    9512:	|  |  |      movea.l (a0),a0
    9514:	|  |  |      movea.l 16(a0),a0
    9518:	|  |  |      move.l 12(a0),d0
    951c:	|  |  |      addq.l #5,d0
    951e:	|  |  |      movea.l 16(sp),a0
    9522:	|  |  |      move.l d0,20(a0)
    9526:	|  +--|----- bra.s 9554 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9528:	|  |  \----> movea.l 52(sp),a0
    952c:	|  |         movea.l (a0),a0
    952e:	|  |         movea.l (a0),a0
    9530:	|  |         movea.l (a0),a0
    9532:	|  |         movea.l 16(a0),a0
    9536:	|  |         move.l 8(sp),d1
    953a:	|  |         move.l d1,d0
    953c:	|  |         lsl.l #3,d0
    953e:	|  |         sub.l d1,d0
    9540:	|  |         add.l d0,d0
    9542:	|  |         add.l d0,d0
    9544:	|  |         adda.l d0,a0
    9546:	|  |         move.l 12(a0),d0
    954a:	|  |         addq.l #5,d0
    954c:	|  |         movea.l 16(sp),a0
    9550:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9554:	|  \-------> move.l #117288,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    955c:	|        /-- bra.s 956c <addPerson+0x216>
        changethat = &((*changethat)->next);
    955e:	|     /--|-> movea.l 32(sp),a0
    9562:	|     |  |   move.l (a0),d0
    9564:	|     |  |   moveq #36,d1
    9566:	|     |  |   add.l d0,d1
    9568:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    956c:	|     |  \-> movea.l 32(sp),a0
    9570:	|     |      move.l (a0),d0
    9572:	|     |  /-- beq.s 959a <addPerson+0x244>
    9574:	|     |  |   movea.l 32(sp),a0
    9578:	|     |  |   movea.l (a0),a0
    957a:	|     |  |   move.l 4(a0),d2
    957e:	|     |  |   move.l 44(sp),-(sp)
    9582:	|     |  |   jsr 176da <__floatsisf>
    9588:	|     |  |   addq.l #4,sp
    958a:	|     |  |   move.l d0,-(sp)
    958c:	|     |  |   move.l d2,-(sp)
    958e:	|     |  |   jsr 17900 <__ltsf2>
    9594:	|     |  |   addq.l #8,sp
    9596:	|     |  |   tst.l d0
    9598:	|     \--|-- blt.s 955e <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    959a:	|        \-> movea.l 32(sp),a0
    959e:	|            move.l (a0),d0
    95a0:	|            movea.l 16(sp),a0
    95a4:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    95a8:	|            movea.l 32(sp),a0
    95ac:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    95b0:	|            movea.l 16(sp),a0
    95b4:	|            move.l 114(a0),d0
    95b8:	|            sne d0
    95ba:	|            neg.b d0
    95bc:	|            move.b d0,d0
    95be:	|            andi.w #255,d0
}
    95c2:	\----------> move.l (sp)+,d2
    95c4:	             movea.l (sp)+,a6
    95c6:	             lea 28(sp),sp
    95ca:	             rts

000095cc <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    95cc:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    95ce:	       move.l 8(sp),-(sp)
    95d2:	       jsr a75c <findPerson>
    95d8:	       addq.l #4,sp
    95da:	       move.l d0,(sp)
    if (moveMe) {
    95dc:	/----- beq.s 9610 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    95de:	|      movea.l (sp),a0
    95e0:	|      move.l 68(a0),d0
    95e4:	|  /-- beq.s 95f6 <animatePerson+0x2a>
    95e6:	|  |   movea.l (sp),a0
    95e8:	|  |   move.l 68(a0),d0
    95ec:	|  |   move.l d0,-(sp)
    95ee:	|  |   jsr 484e <abortFunction>
    95f4:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    95f6:	|  \-> movea.l (sp),a0
    95f8:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    95fc:	|      movea.l (sp),a0
    95fe:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9602:	|      movea.l (sp),a0
    9604:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9608:	|      movea.l (sp),a0
    960a:	|      move.l 12(sp),72(a0)
    }
}
    9610:	\----> nop
    9612:	       addq.l #4,sp
    9614:	       rts

00009616 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9616:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9618:	       move.l 8(sp),-(sp)
    961c:	       jsr a75c <findPerson>
    9622:	       addq.l #4,sp
    9624:	       move.l d0,(sp)
    if (moveMe) {
    9626:	/----- beq.s 9668 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9628:	|      movea.l (sp),a0
    962a:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    962e:	|      movea.l (sp),a0
    9630:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9636:	|      move.l (sp),-(sp)
    9638:	|      jsr b032 <rethinkAngle>
    963e:	|      addq.l #4,sp
        if (moveMe->walking) {
    9640:	|      movea.l (sp),a0
    9642:	|      move.w 64(a0),d0
    9646:	|  /-- beq.s 965a <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9648:	|  |   pea 1 <_start+0x1>
    964c:	|  |   move.l 4(sp),-(sp)
    9650:	|  |   jsr 82a6 <setFrames>
    9656:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9658:	+--|-- bra.s 9668 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    965a:	|  \-> clr.l -(sp)
    965c:	|      move.l 4(sp),-(sp)
    9660:	|      jsr 82a6 <setFrames>
    9666:	|      addq.l #8,sp
}
    9668:	\----> nop
    966a:	       addq.l #4,sp
    966c:	       rts

0000966e <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    966e:	             lea -36(sp),sp
    9672:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9674:	             movea.l 44(sp),a0
    9678:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    967e:	             moveq #12,d0
    9680:	             move.l d0,28(sp)
    9684:	             clr.l 24(sp)
    9688:	             move.l 1c9c4 <SysBase>,d0
    968e:	             movea.l d0,a6
    9690:	             move.l 28(sp),d0
    9694:	             move.l 24(sp),d1
    9698:	             jsr -684(a6)
    969c:	             move.l d0,20(sp)
    96a0:	             move.l 20(sp),d0
    96a4:	             move.l d0,16(sp)
	if (!(newAnim)) {
    96a8:	         /-- bne.s 96be <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    96aa:	         |   pea 1913c <PutChar+0x13ca>
    96b0:	         |   jsr 1729e <KPrintF>
    96b6:	         |   addq.l #4,sp
		return NULL;
    96b8:	         |   moveq #0,d0
    96ba:	/--------|-- bra.w 9810 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    96be:	|        \-> movea.l 44(sp),a0
    96c2:	|            move.l (a0),d0
    96c4:	|            movea.l 16(sp),a0
    96c8:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    96ca:	|            movea.l 16(sp),a0
    96ce:	|            movea.l (a0),a0
    96d0:	|            move.l 4(a0),d0
    96d4:	|            addq.l #1,d0
    96d6:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    96da:	|            movea.l 16(sp),a0
    96de:	|            move.l 32(sp),8(a0)

	if (num) {
    96e4:	|  /-------- beq.w 9804 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    96e8:	|  |         move.l 32(sp),d1
    96ec:	|  |         move.l d1,d0
    96ee:	|  |         add.l d0,d0
    96f0:	|  |         add.l d1,d0
    96f2:	|  |         add.l d0,d0
    96f4:	|  |         add.l d0,d0
    96f6:	|  |         move.l d0,12(sp)
    96fa:	|  |         clr.l 8(sp)
    96fe:	|  |         move.l 1c9c4 <SysBase>,d0
    9704:	|  |         movea.l d0,a6
    9706:	|  |         move.l 12(sp),d0
    970a:	|  |         move.l 8(sp),d1
    970e:	|  |         jsr -684(a6)
    9712:	|  |         move.l d0,4(sp)
    9716:	|  |         move.l 4(sp),d0
    971a:	|  |         movea.l 16(sp),a0
    971e:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9722:	|  |         movea.l 16(sp),a0
    9726:	|  |         move.l 4(a0),d0
    972a:	|  |     /-- bne.s 9740 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    972c:	|  |     |   pea 1913c <PutChar+0x13ca>
    9732:	|  |     |   jsr 1729e <KPrintF>
    9738:	|  |     |   addq.l #4,sp
			return NULL;
    973a:	|  |     |   moveq #0,d0
    973c:	+--|-----|-- bra.w 9810 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9740:	|  |     \-> clr.l 36(sp)
    9744:	|  |     /-- bra.w 97f6 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9748:	|  |  /--|-> movea.l 44(sp),a0
    974c:	|  |  |  |   movea.l 4(a0),a0
    9750:	|  |  |  |   move.l 36(sp),d1
    9754:	|  |  |  |   move.l d1,d0
    9756:	|  |  |  |   add.l d0,d0
    9758:	|  |  |  |   add.l d1,d0
    975a:	|  |  |  |   add.l d0,d0
    975c:	|  |  |  |   add.l d0,d0
    975e:	|  |  |  |   lea (0,a0,d0.l),a1
    9762:	|  |  |  |   movea.l 16(sp),a0
    9766:	|  |  |  |   movea.l 4(a0),a0
    976a:	|  |  |  |   move.l 36(sp),d1
    976e:	|  |  |  |   move.l d1,d0
    9770:	|  |  |  |   add.l d0,d0
    9772:	|  |  |  |   add.l d1,d0
    9774:	|  |  |  |   add.l d0,d0
    9776:	|  |  |  |   add.l d0,d0
    9778:	|  |  |  |   adda.l d0,a0
    977a:	|  |  |  |   move.l (a1),d0
    977c:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    977e:	|  |  |  |   movea.l 44(sp),a0
    9782:	|  |  |  |   movea.l 4(a0),a0
    9786:	|  |  |  |   move.l 36(sp),d1
    978a:	|  |  |  |   move.l d1,d0
    978c:	|  |  |  |   add.l d0,d0
    978e:	|  |  |  |   add.l d1,d0
    9790:	|  |  |  |   add.l d0,d0
    9792:	|  |  |  |   add.l d0,d0
    9794:	|  |  |  |   lea (0,a0,d0.l),a1
    9798:	|  |  |  |   movea.l 16(sp),a0
    979c:	|  |  |  |   movea.l 4(a0),a0
    97a0:	|  |  |  |   move.l 36(sp),d1
    97a4:	|  |  |  |   move.l d1,d0
    97a6:	|  |  |  |   add.l d0,d0
    97a8:	|  |  |  |   add.l d1,d0
    97aa:	|  |  |  |   add.l d0,d0
    97ac:	|  |  |  |   add.l d0,d0
    97ae:	|  |  |  |   adda.l d0,a0
    97b0:	|  |  |  |   move.l 4(a1),d0
    97b4:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    97b8:	|  |  |  |   movea.l 44(sp),a0
    97bc:	|  |  |  |   movea.l 4(a0),a0
    97c0:	|  |  |  |   move.l 36(sp),d1
    97c4:	|  |  |  |   move.l d1,d0
    97c6:	|  |  |  |   add.l d0,d0
    97c8:	|  |  |  |   add.l d1,d0
    97ca:	|  |  |  |   add.l d0,d0
    97cc:	|  |  |  |   add.l d0,d0
    97ce:	|  |  |  |   lea (0,a0,d0.l),a1
    97d2:	|  |  |  |   movea.l 16(sp),a0
    97d6:	|  |  |  |   movea.l 4(a0),a0
    97da:	|  |  |  |   move.l 36(sp),d1
    97de:	|  |  |  |   move.l d1,d0
    97e0:	|  |  |  |   add.l d0,d0
    97e2:	|  |  |  |   add.l d1,d0
    97e4:	|  |  |  |   add.l d0,d0
    97e6:	|  |  |  |   add.l d0,d0
    97e8:	|  |  |  |   adda.l d0,a0
    97ea:	|  |  |  |   move.l 8(a1),d0
    97ee:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    97f2:	|  |  |  |   addq.l #1,36(sp)
    97f6:	|  |  |  \-> move.l 36(sp),d0
    97fa:	|  |  |      cmp.l 32(sp),d0
    97fe:	|  |  \----- blt.w 9748 <copyAnim+0xda>
    9802:	|  |     /-- bra.s 980c <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    9804:	|  \-----|-> movea.l 16(sp),a0
    9808:	|        |   clr.l 4(a0)
	}

	return newAnim;
    980c:	|        \-> move.l 16(sp),d0
}
    9810:	\----------> movea.l (sp)+,a6
    9812:	             lea 36(sp),sp
    9816:	             rts

00009818 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9818:	                lea -44(sp),sp
    981c:	                move.l a6,-(sp)
    981e:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9820:	                moveq #12,d0
    9822:	                move.l d0,40(sp)
    9826:	                clr.l 36(sp)
    982a:	                move.l 1c9c4 <SysBase>,d0
    9830:	                movea.l d0,a6
    9832:	                move.l 40(sp),d0
    9836:	                move.l 36(sp),d1
    983a:	                jsr -684(a6)
    983e:	                move.l d0,32(sp)
    9842:	                move.l 32(sp),d0
    9846:	                move.l d0,28(sp)
	if( !newP) {
    984a:	            /-- bne.s 9860 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    984c:	            |   pea 1915d <PutChar+0x13eb>
    9852:	            |   jsr 1729e <KPrintF>
    9858:	            |   addq.l #4,sp
		return NULL;
    985a:	            |   moveq #0,d0
    985c:	/-----------|-- bra.w 9a30 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9860:	|           \-> movea.l 28(sp),a0
    9864:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    986a:	|               move.l 56(sp),d1
    986e:	|               move.l d1,d0
    9870:	|               add.l d0,d0
    9872:	|               add.l d1,d0
    9874:	|               add.l d0,d0
    9876:	|               add.l d0,d0
    9878:	|               move.l d0,24(sp)
    987c:	|               clr.l 20(sp)
    9880:	|               move.l 1c9c4 <SysBase>,d0
    9886:	|               movea.l d0,a6
    9888:	|               move.l 24(sp),d0
    988c:	|               move.l 20(sp),d1
    9890:	|               jsr -684(a6)
    9894:	|               move.l d0,16(sp)
    9898:	|               move.l 16(sp),d0
    989c:	|               movea.l 28(sp),a0
    98a0:	|               move.l d0,4(a0)
	if( !newP->frames) {
    98a4:	|               movea.l 28(sp),a0
    98a8:	|               move.l 4(a0),d0
    98ac:	|           /-- bne.s 98c2 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    98ae:	|           |   pea 1915d <PutChar+0x13eb>
    98b4:	|           |   jsr 1729e <KPrintF>
    98ba:	|           |   addq.l #4,sp
		return NULL;
    98bc:	|           |   moveq #0,d0
    98be:	+-----------|-- bra.w 9a30 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    98c2:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    98c8:	|               movea.l 60(sp),a0
    98cc:	|               move.l (a0),44(sp)
	while (a) {
    98d0:	|     /-------- bra.w 9a24 <createPersonaAnim+0x20c>
		a --;
    98d4:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    98d8:	|  |  |         movea.l 28(sp),a0
    98dc:	|  |  |         movea.l 4(a0),a0
    98e0:	|  |  |         move.l 48(sp),d1
    98e4:	|  |  |         move.l d1,d0
    98e6:	|  |  |         add.l d0,d0
    98e8:	|  |  |         add.l d1,d0
    98ea:	|  |  |         add.l d0,d0
    98ec:	|  |  |         add.l d0,d0
    98ee:	|  |  |         adda.l d0,a0
    98f0:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    98f4:	|  |  |         movea.l 44(sp),a0
    98f8:	|  |  |         move.l (a0),d0
    98fa:	|  |  |         moveq #5,d1
    98fc:	|  |  |         cmp.l d0,d1
    98fe:	|  |  |     /-- bne.s 992a <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9900:	|  |  |     |   movea.l 28(sp),a0
    9904:	|  |  |     |   movea.l 4(a0),a0
    9908:	|  |  |     |   move.l 48(sp),d1
    990c:	|  |  |     |   move.l d1,d0
    990e:	|  |  |     |   add.l d0,d0
    9910:	|  |  |     |   add.l d1,d0
    9912:	|  |  |     |   add.l d0,d0
    9914:	|  |  |     |   add.l d0,d0
    9916:	|  |  |     |   lea (0,a0,d0.l),a1
    991a:	|  |  |     |   movea.l 44(sp),a0
    991e:	|  |  |     |   move.l 4(a0),d0
    9922:	|  |  |     |   move.l d0,8(a1)
    9926:	|  |  |  /--|-- bra.w 99d2 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    992a:	|  |  |  |  \-> movea.l 44(sp),a0
    992e:	|  |  |  |      move.l (a0),d0
    9930:	|  |  |  |      moveq #2,d1
    9932:	|  |  |  |      cmp.l d0,d1
    9934:	|  |  |  |  /-- bne.s 9960 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9936:	|  |  |  |  |   movea.l 44(sp),a0
    993a:	|  |  |  |  |   move.l 4(a0),d2
    993e:	|  |  |  |  |   movea.l 28(sp),a0
    9942:	|  |  |  |  |   movea.l 4(a0),a0
    9946:	|  |  |  |  |   move.l 48(sp),d1
    994a:	|  |  |  |  |   move.l d1,d0
    994c:	|  |  |  |  |   add.l d0,d0
    994e:	|  |  |  |  |   add.l d1,d0
    9950:	|  |  |  |  |   add.l d0,d0
    9952:	|  |  |  |  |   add.l d0,d0
    9954:	|  |  |  |  |   adda.l d0,a0
    9956:	|  |  |  |  |   move.l d2,d0
    9958:	|  |  |  |  |   neg.l d0
    995a:	|  |  |  |  |   move.l d0,8(a0)
    995e:	|  |  |  +--|-- bra.s 99d2 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9960:	|  |  |  |  \-> movea.l 44(sp),a0
    9964:	|  |  |  |      move.l (a0),d0
    9966:	|  |  |  |      moveq #6,d1
    9968:	|  |  |  |      cmp.l d0,d1
    996a:	|  |  |  |  /-- bne.s 99b2 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    996c:	|  |  |  |  |   movea.l 44(sp),a0
    9970:	|  |  |  |  |   movea.l 4(a0),a0
    9974:	|  |  |  |  |   move.l (a0),d0
    9976:	|  |  |  |  |   move.l d0,-(sp)
    9978:	|  |  |  |  |   pea 1 <_start+0x1>
    997c:	|  |  |  |  |   lea 20(sp),a0
    9980:	|  |  |  |  |   move.l a0,-(sp)
    9982:	|  |  |  |  |   jsr 14884 <getValueType>
    9988:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    998c:	|  |  |  |  |   movea.l 44(sp),a0
    9990:	|  |  |  |  |   movea.l 4(a0),a0
    9994:	|  |  |  |  |   movea.l (a0),a0
    9996:	|  |  |  |  |   move.l 8(a0),d0
    999a:	|  |  |  |  |   move.l d0,-(sp)
    999c:	|  |  |  |  |   pea 1 <_start+0x1>
    99a0:	|  |  |  |  |   lea 16(sp),a0
    99a4:	|  |  |  |  |   move.l a0,-(sp)
    99a6:	|  |  |  |  |   jsr 14884 <getValueType>
    99ac:	|  |  |  |  |   lea 12(sp),sp
    99b0:	|  |  |  +--|-- bra.s 99d2 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    99b2:	|  |  |  |  \-> move.l 44(sp),d0
    99b6:	|  |  |  |      move.l d0,-(sp)
    99b8:	|  |  |  |      pea 1 <_start+0x1>
    99bc:	|  |  |  |      lea 20(sp),a0
    99c0:	|  |  |  |      move.l a0,-(sp)
    99c2:	|  |  |  |      jsr 14884 <getValueType>
    99c8:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    99cc:	|  |  |  |      moveq #1,d0
    99ce:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    99d2:	|  |  |  \----> move.l 60(sp),-(sp)
    99d6:	|  |  |         jsr 15208 <trimStack>
    99dc:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    99de:	|  |  |         movea.l 28(sp),a0
    99e2:	|  |  |         movea.l 4(a0),a0
    99e6:	|  |  |         move.l 48(sp),d1
    99ea:	|  |  |         move.l d1,d0
    99ec:	|  |  |         add.l d0,d0
    99ee:	|  |  |         add.l d1,d0
    99f0:	|  |  |         add.l d0,d0
    99f2:	|  |  |         add.l d0,d0
    99f4:	|  |  |         adda.l d0,a0
    99f6:	|  |  |         move.l 12(sp),d0
    99fa:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    99fc:	|  |  |         movea.l 28(sp),a0
    9a00:	|  |  |         movea.l 4(a0),a0
    9a04:	|  |  |         move.l 48(sp),d1
    9a08:	|  |  |         move.l d1,d0
    9a0a:	|  |  |         add.l d0,d0
    9a0c:	|  |  |         add.l d1,d0
    9a0e:	|  |  |         add.l d0,d0
    9a10:	|  |  |         add.l d0,d0
    9a12:	|  |  |         adda.l d0,a0
    9a14:	|  |  |         move.l 8(sp),d0
    9a18:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9a1c:	|  |  |         movea.l 60(sp),a0
    9a20:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9a24:	|  |  \-------> tst.l 48(sp)
    9a28:	|  \----------- bne.w 98d4 <createPersonaAnim+0xbc>
	}

	return newP;
    9a2c:	|               move.l 28(sp),d0
}
    9a30:	\-------------> move.l (sp)+,d2
    9a32:	                movea.l (sp)+,a6
    9a34:	                lea 44(sp),sp
    9a38:	                rts

00009a3a <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9a3a:	       lea -12(sp),sp
    9a3e:	       move.l a6,-(sp)

	if(orig->theSprites)
    9a40:	       movea.l 20(sp),a0
    9a44:	       move.l (a0),d0
    9a46:	   /-- beq.s 9a70 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9a48:	   |   movea.l 20(sp),a0
    9a4c:	   |   movea.l (a0),a0
    9a4e:	   |   move.l 4(a0),d0
    9a52:	   |   subq.l #1,d0
    9a54:	   |   move.l d0,4(a0)
    9a58:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9a5e:	   +-- bne.s 9a70 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9a60:	   |   movea.l 20(sp),a0
    9a64:	   |   move.l (a0),d0
    9a66:	   |   move.l d0,-(sp)
    9a68:	   |   jsr 8b92 <forgetSpriteBank>
    9a6e:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9a70:	   \-> tst.l 20(sp)
    9a74:	/----- beq.s 9ab4 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9a76:	|      movea.l 20(sp),a0
    9a7a:	|      move.l 8(a0),d0
    9a7e:	|  /-- beq.s 9a9a <deleteAnim+0x60>
			FreeVec( orig->frames);
    9a80:	|  |   movea.l 20(sp),a0
    9a84:	|  |   move.l 4(a0),8(sp)
    9a8a:	|  |   move.l 1c9c4 <SysBase>,d0
    9a90:	|  |   movea.l d0,a6
    9a92:	|  |   movea.l 8(sp),a1
    9a96:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9a9a:	|  \-> move.l 20(sp),4(sp)
    9aa0:	|      move.l 1c9c4 <SysBase>,d0
    9aa6:	|      movea.l d0,a6
    9aa8:	|      movea.l 4(sp),a1
    9aac:	|      jsr -690(a6)
		orig = NULL;
    9ab0:	|      clr.l 20(sp)
	}	
	
}
    9ab4:	\----> nop
    9ab6:	       movea.l (sp)+,a6
    9ab8:	       lea 12(sp),sp
    9abc:	       rts

00009abe <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9abe:	          lea -124(sp),sp
    9ac2:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9ac6:	          movea.l 152(sp),a0
    9aca:	          move.l 56(a0),d1
    9ace:	          movea.l 152(sp),a0
    9ad2:	          move.l 60(a0),d0
    9ad6:	          cmp.l d1,d0
    9ad8:	      /-- bne.s 9b08 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9ada:	      |   movea.l 152(sp),a0
    9ade:	      |   moveq #-1,d0
    9ae0:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9ae4:	      |   movea.l 152(sp),a0
    9ae8:	      |   move.l 40(a0),d0
    9aec:	      |   movea.l 152(sp),a0
    9af0:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9af4:	      |   movea.l 152(sp),a0
    9af8:	      |   move.l 44(a0),d0
    9afc:	      |   movea.l 152(sp),a0
    9b00:	      |   move.l d0,52(a0)
    9b04:	   /--|-- bra.w a06e <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9b08:	   |  \-> movea.l 1cae0 <currentFloor>,a0
    9b0e:	   |      move.l 16(a0),d1
    9b12:	   |      movea.l 152(sp),a0
    9b16:	   |      move.l 56(a0),d0
    9b1a:	   |      add.l d0,d0
    9b1c:	   |      add.l d0,d0
    9b1e:	   |      movea.l d1,a0
    9b20:	   |      adda.l d0,a0
    9b22:	   |      move.l (a0),d1
    9b24:	   |      movea.l 152(sp),a0
    9b28:	   |      move.l 60(a0),d0
    9b2c:	   |      add.l d0,d0
    9b2e:	   |      add.l d0,d0
    9b30:	   |      movea.l d1,a0
    9b32:	   |      adda.l d0,a0
    9b34:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9b38:	   |      moveq #-1,d0
    9b3a:	   |      cmp.l 144(sp),d0
    9b3e:	   |  /-- bne.s 9b46 <doBorderStuff+0x88>
    9b40:	   |  |   clr.w d0
    9b42:	/--|--|-- bra.w a16e <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9b46:	|  |  \-> movea.l 1cae0 <currentFloor>,a0
    9b4c:	|  |      move.l 12(a0),d1
    9b50:	|  |      move.l 144(sp),d0
    9b54:	|  |      lsl.l #3,d0
    9b56:	|  |      add.l d0,d1
    9b58:	|  |      movea.l 1cae0 <currentFloor>,a0
    9b5e:	|  |      movea.l 12(a0),a1
    9b62:	|  |      movea.l 152(sp),a0
    9b66:	|  |      move.l 56(a0),d0
    9b6a:	|  |      lsl.l #3,d0
    9b6c:	|  |      add.l a1,d0
    9b6e:	|  |      lea 40(sp),a0
    9b72:	|  |      move.l a0,-(sp)
    9b74:	|  |      lea 48(sp),a0
    9b78:	|  |      move.l a0,-(sp)
    9b7a:	|  |      move.l d1,-(sp)
    9b7c:	|  |      move.l d0,-(sp)
    9b7e:	|  |      jsr 16520 <getMatchingCorners>
    9b84:	|  |      lea 16(sp),sp
    9b88:	|  |      tst.w d0
    9b8a:	|  |  /-- bne.s 9ba0 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9b8c:	|  |  |   pea 19187 <PutChar+0x1415>
    9b92:	|  |  |   jsr 1729e <KPrintF>
    9b98:	|  |  |   addq.l #4,sp
            return FALSE;
    9b9a:	|  |  |   clr.w d0
    9b9c:	+--|--|-- bra.w a16e <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9ba0:	|  |  \-> movea.l 152(sp),a0
    9ba4:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9baa:	|  |      movea.l 152(sp),a0
    9bae:	|  |      move.l (a0),d0
    9bb0:	|  |      move.l d0,-(sp)
    9bb2:	|  |      jsr 17672 <__fixsfsi>
    9bb8:	|  |      addq.l #4,sp
    9bba:	|  |      move.l d0,140(sp)
    9bbe:	|  |      movea.l 152(sp),a0
    9bc2:	|  |      move.l 4(a0),d0
    9bc6:	|  |      move.l d0,-(sp)
    9bc8:	|  |      jsr 17672 <__fixsfsi>
    9bce:	|  |      addq.l #4,sp
    9bd0:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9bd4:	|  |      movea.l 152(sp),a0
    9bd8:	|  |      move.l 40(a0),132(sp)
    9bde:	|  |      movea.l 152(sp),a0
    9be2:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9be8:	|  |      movea.l 1cae0 <currentFloor>,a0
    9bee:	|  |      move.l 4(a0),d1
    9bf2:	|  |      move.l 44(sp),d0
    9bf6:	|  |      lsl.l #3,d0
    9bf8:	|  |      movea.l d1,a0
    9bfa:	|  |      adda.l d0,a0
    9bfc:	|  |      move.l (a0),124(sp)
    9c00:	|  |      movea.l 1cae0 <currentFloor>,a0
    9c06:	|  |      move.l 4(a0),d1
    9c0a:	|  |      move.l 44(sp),d0
    9c0e:	|  |      lsl.l #3,d0
    9c10:	|  |      movea.l d1,a0
    9c12:	|  |      adda.l d0,a0
    9c14:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9c1a:	|  |      movea.l 1cae0 <currentFloor>,a0
    9c20:	|  |      move.l 4(a0),d1
    9c24:	|  |      move.l 40(sp),d0
    9c28:	|  |      lsl.l #3,d0
    9c2a:	|  |      movea.l d1,a0
    9c2c:	|  |      adda.l d0,a0
    9c2e:	|  |      move.l (a0),116(sp)
    9c32:	|  |      movea.l 1cae0 <currentFloor>,a0
    9c38:	|  |      move.l 4(a0),d1
    9c3c:	|  |      move.l 40(sp),d0
    9c40:	|  |      lsl.l #3,d0
    9c42:	|  |      movea.l d1,a0
    9c44:	|  |      adda.l d0,a0
    9c46:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9c4c:	|  |      move.l 140(sp),d0
    9c50:	|  |      sub.l 132(sp),d0
    9c54:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9c58:	|  |      move.l 136(sp),d0
    9c5c:	|  |      sub.l 128(sp),d0
    9c60:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9c64:	|  |      move.l 116(sp),d0
    9c68:	|  |      sub.l 124(sp),d0
    9c6c:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9c70:	|  |      move.l 112(sp),d0
    9c74:	|  |      sub.l 120(sp),d0
    9c78:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9c7c:	|  |      move.l 124(sp),d0
    9c80:	|  |      sub.l 140(sp),d0
    9c84:	|  |      move.l 104(sp),-(sp)
    9c88:	|  |      move.l d0,-(sp)
    9c8a:	|  |      jsr 17c5c <__mulsi3>
    9c90:	|  |      addq.l #8,sp
    9c92:	|  |      move.l d0,d2
    9c94:	|  |      move.l 120(sp),d0
    9c98:	|  |      sub.l 136(sp),d0
    9c9c:	|  |      move.l 108(sp),-(sp)
    9ca0:	|  |      move.l d0,-(sp)
    9ca2:	|  |      jsr 17c5c <__mulsi3>
    9ca8:	|  |      addq.l #8,sp
    9caa:	|  |      move.l d2,d1
    9cac:	|  |      sub.l d0,d1
    9cae:	|  |      move.l d1,-(sp)
    9cb0:	|  |      jsr 1769a <__floatsidf>
    9cb6:	|  |      addq.l #4,sp
    9cb8:	|  |      move.l d0,32(sp)
    9cbc:	|  |      move.l d1,36(sp)
    9cc0:	|  |      move.l 32(sp),88(sp)
    9cc6:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9ccc:	|  |      move.l 96(sp),-(sp)
    9cd0:	|  |      move.l 112(sp),-(sp)
    9cd4:	|  |      jsr 17c5c <__mulsi3>
    9cda:	|  |      addq.l #8,sp
    9cdc:	|  |      move.l d0,d2
    9cde:	|  |      move.l 100(sp),-(sp)
    9ce2:	|  |      move.l 108(sp),-(sp)
    9ce6:	|  |      jsr 17c5c <__mulsi3>
    9cec:	|  |      addq.l #8,sp
    9cee:	|  |      move.l d2,d1
    9cf0:	|  |      sub.l d0,d1
    9cf2:	|  |      move.l d1,-(sp)
    9cf4:	|  |      jsr 1769a <__floatsidf>
    9cfa:	|  |      addq.l #4,sp
    9cfc:	|  |      move.l d1,-(sp)
    9cfe:	|  |      move.l d0,-(sp)
    9d00:	|  |      move.l 100(sp),-(sp)
    9d04:	|  |      move.l 100(sp),-(sp)
    9d08:	|  |      jsr 17524 <__divdf3>
    9d0e:	|  |      lea 16(sp),sp
    9d12:	|  |      move.l d0,24(sp)
    9d16:	|  |      move.l d1,28(sp)
    9d1a:	|  |      move.l 24(sp),88(sp)
    9d20:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9d26:	|  |      clr.l -(sp)
    9d28:	|  |      clr.l -(sp)
    9d2a:	|  |      move.l 100(sp),-(sp)
    9d2e:	|  |      move.l 100(sp),-(sp)
    9d32:	|  |      jsr 177f8 <__gtdf2>
    9d38:	|  |      lea 16(sp),sp
    9d3c:	|  |      tst.l d0
    9d3e:	|  |  /-- ble.w 9e16 <doBorderStuff+0x358>
    9d42:	|  |  |   clr.l -(sp)
    9d44:	|  |  |   move.l #1072693248,-(sp)
    9d4a:	|  |  |   move.l 100(sp),-(sp)
    9d4e:	|  |  |   move.l 100(sp),-(sp)
    9d52:	|  |  |   jsr 178b2 <__ltdf2>
    9d58:	|  |  |   lea 16(sp),sp
    9d5c:	|  |  |   tst.l d0
    9d5e:	|  |  +-- bge.w 9e16 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9d62:	|  |  |   move.l 124(sp),-(sp)
    9d66:	|  |  |   jsr 1769a <__floatsidf>
    9d6c:	|  |  |   addq.l #4,sp
    9d6e:	|  |  |   move.l d0,d2
    9d70:	|  |  |   move.l d1,d3
    9d72:	|  |  |   move.l 100(sp),-(sp)
    9d76:	|  |  |   jsr 1769a <__floatsidf>
    9d7c:	|  |  |   addq.l #4,sp
    9d7e:	|  |  |   move.l 92(sp),-(sp)
    9d82:	|  |  |   move.l 92(sp),-(sp)
    9d86:	|  |  |   move.l d1,-(sp)
    9d88:	|  |  |   move.l d0,-(sp)
    9d8a:	|  |  |   jsr 1772a <__muldf3>
    9d90:	|  |  |   lea 16(sp),sp
    9d94:	|  |  |   move.l d1,-(sp)
    9d96:	|  |  |   move.l d0,-(sp)
    9d98:	|  |  |   move.l d3,-(sp)
    9d9a:	|  |  |   move.l d2,-(sp)
    9d9c:	|  |  |   jsr 174c2 <__adddf3>
    9da2:	|  |  |   lea 16(sp),sp
    9da6:	|  |  |   move.l d1,-(sp)
    9da8:	|  |  |   move.l d0,-(sp)
    9daa:	|  |  |   jsr 17632 <__fixdfsi>
    9db0:	|  |  |   addq.l #8,sp
    9db2:	|  |  |   movea.l 152(sp),a0
    9db6:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9dba:	|  |  |   move.l 120(sp),-(sp)
    9dbe:	|  |  |   jsr 1769a <__floatsidf>
    9dc4:	|  |  |   addq.l #4,sp
    9dc6:	|  |  |   move.l d0,d2
    9dc8:	|  |  |   move.l d1,d3
    9dca:	|  |  |   move.l 96(sp),-(sp)
    9dce:	|  |  |   jsr 1769a <__floatsidf>
    9dd4:	|  |  |   addq.l #4,sp
    9dd6:	|  |  |   move.l 92(sp),-(sp)
    9dda:	|  |  |   move.l 92(sp),-(sp)
    9dde:	|  |  |   move.l d1,-(sp)
    9de0:	|  |  |   move.l d0,-(sp)
    9de2:	|  |  |   jsr 1772a <__muldf3>
    9de8:	|  |  |   lea 16(sp),sp
    9dec:	|  |  |   move.l d1,-(sp)
    9dee:	|  |  |   move.l d0,-(sp)
    9df0:	|  |  |   move.l d3,-(sp)
    9df2:	|  |  |   move.l d2,-(sp)
    9df4:	|  |  |   jsr 174c2 <__adddf3>
    9dfa:	|  |  |   lea 16(sp),sp
    9dfe:	|  |  |   move.l d1,-(sp)
    9e00:	|  |  |   move.l d0,-(sp)
    9e02:	|  |  |   jsr 17632 <__fixdfsi>
    9e08:	|  |  |   addq.l #8,sp
    9e0a:	|  |  |   movea.l 152(sp),a0
    9e0e:	|  |  |   move.l d0,52(a0)
    9e12:	|  +--|-- bra.w a06e <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9e16:	|  |  \-> move.l 140(sp),d0
    9e1a:	|  |      sub.l 124(sp),d0
    9e1e:	|  |      move.l d0,84(sp)
    9e22:	|  |      move.l 140(sp),d0
    9e26:	|  |      sub.l 116(sp),d0
    9e2a:	|  |      move.l d0,80(sp)
    9e2e:	|  |      move.l 132(sp),d0
    9e32:	|  |      sub.l 124(sp),d0
    9e36:	|  |      move.l d0,76(sp)
    9e3a:	|  |      move.l 132(sp),d0
    9e3e:	|  |      sub.l 116(sp),d0
    9e42:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9e46:	|  |      move.l 136(sp),d0
    9e4a:	|  |      sub.l 120(sp),d0
    9e4e:	|  |      move.l d0,68(sp)
    9e52:	|  |      move.l 136(sp),d0
    9e56:	|  |      sub.l 112(sp),d0
    9e5a:	|  |      move.l d0,64(sp)
    9e5e:	|  |      move.l 128(sp),d0
    9e62:	|  |      sub.l 120(sp),d0
    9e66:	|  |      move.l d0,60(sp)
    9e6a:	|  |      move.l 128(sp),d0
    9e6e:	|  |      sub.l 112(sp),d0
    9e72:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9e76:	|  |      move.l 84(sp),-(sp)
    9e7a:	|  |      move.l 88(sp),-(sp)
    9e7e:	|  |      jsr 17c5c <__mulsi3>
    9e84:	|  |      addq.l #8,sp
    9e86:	|  |      move.l d0,84(sp)
    9e8a:	|  |      move.l 80(sp),-(sp)
    9e8e:	|  |      move.l 84(sp),-(sp)
    9e92:	|  |      jsr 17c5c <__mulsi3>
    9e98:	|  |      addq.l #8,sp
    9e9a:	|  |      move.l d0,80(sp)
    9e9e:	|  |      move.l 76(sp),-(sp)
    9ea2:	|  |      move.l 80(sp),-(sp)
    9ea6:	|  |      jsr 17c5c <__mulsi3>
    9eac:	|  |      addq.l #8,sp
    9eae:	|  |      move.l d0,76(sp)
    9eb2:	|  |      move.l 72(sp),-(sp)
    9eb6:	|  |      move.l 76(sp),-(sp)
    9eba:	|  |      jsr 17c5c <__mulsi3>
    9ec0:	|  |      addq.l #8,sp
    9ec2:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9ec6:	|  |      move.l 68(sp),-(sp)
    9eca:	|  |      move.l 72(sp),-(sp)
    9ece:	|  |      jsr 17c5c <__mulsi3>
    9ed4:	|  |      addq.l #8,sp
    9ed6:	|  |      move.l d0,68(sp)
    9eda:	|  |      move.l 64(sp),-(sp)
    9ede:	|  |      move.l 68(sp),-(sp)
    9ee2:	|  |      jsr 17c5c <__mulsi3>
    9ee8:	|  |      addq.l #8,sp
    9eea:	|  |      move.l d0,64(sp)
    9eee:	|  |      move.l 60(sp),-(sp)
    9ef2:	|  |      move.l 64(sp),-(sp)
    9ef6:	|  |      jsr 17c5c <__mulsi3>
    9efc:	|  |      addq.l #8,sp
    9efe:	|  |      move.l d0,60(sp)
    9f02:	|  |      move.l 56(sp),-(sp)
    9f06:	|  |      move.l 60(sp),-(sp)
    9f0a:	|  |      jsr 17c5c <__mulsi3>
    9f10:	|  |      addq.l #8,sp
    9f12:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9f16:	|  |      move.l 84(sp),-(sp)
    9f1a:	|  |      jsr 1769a <__floatsidf>
    9f20:	|  |      addq.l #4,sp
    9f22:	|  |      move.l d0,d2
    9f24:	|  |      move.l d1,d3
    9f26:	|  |      move.l 68(sp),-(sp)
    9f2a:	|  |      jsr 1769a <__floatsidf>
    9f30:	|  |      addq.l #4,sp
    9f32:	|  |      move.l d1,-(sp)
    9f34:	|  |      move.l d0,-(sp)
    9f36:	|  |      move.l d3,-(sp)
    9f38:	|  |      move.l d2,-(sp)
    9f3a:	|  |      jsr 174c2 <__adddf3>
    9f40:	|  |      lea 16(sp),sp
    9f44:	|  |      move.l d1,-(sp)
    9f46:	|  |      move.l d0,-(sp)
    9f48:	|  |      jsr 17c12 <sqrt>
    9f4e:	|  |      addq.l #8,sp
    9f50:	|  |      move.l d0,d2
    9f52:	|  |      move.l d1,d3
    9f54:	|  |      move.l 76(sp),-(sp)
    9f58:	|  |      jsr 1769a <__floatsidf>
    9f5e:	|  |      addq.l #4,sp
    9f60:	|  |      move.l d0,d4
    9f62:	|  |      move.l d1,d5
    9f64:	|  |      move.l 60(sp),-(sp)
    9f68:	|  |      jsr 1769a <__floatsidf>
    9f6e:	|  |      addq.l #4,sp
    9f70:	|  |      move.l d1,-(sp)
    9f72:	|  |      move.l d0,-(sp)
    9f74:	|  |      move.l d5,-(sp)
    9f76:	|  |      move.l d4,-(sp)
    9f78:	|  |      jsr 174c2 <__adddf3>
    9f7e:	|  |      lea 16(sp),sp
    9f82:	|  |      move.l d1,-(sp)
    9f84:	|  |      move.l d0,-(sp)
    9f86:	|  |      jsr 17c12 <sqrt>
    9f8c:	|  |      addq.l #8,sp
    9f8e:	|  |      move.l d1,-(sp)
    9f90:	|  |      move.l d0,-(sp)
    9f92:	|  |      move.l d3,-(sp)
    9f94:	|  |      move.l d2,-(sp)
    9f96:	|  |      jsr 174c2 <__adddf3>
    9f9c:	|  |      lea 16(sp),sp
    9fa0:	|  |      move.l d0,d2
    9fa2:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9fa4:	|  |      move.l 80(sp),-(sp)
    9fa8:	|  |      jsr 1769a <__floatsidf>
    9fae:	|  |      addq.l #4,sp
    9fb0:	|  |      move.l d0,d4
    9fb2:	|  |      move.l d1,d5
    9fb4:	|  |      move.l 64(sp),-(sp)
    9fb8:	|  |      jsr 1769a <__floatsidf>
    9fbe:	|  |      addq.l #4,sp
    9fc0:	|  |      move.l d1,-(sp)
    9fc2:	|  |      move.l d0,-(sp)
    9fc4:	|  |      move.l d5,-(sp)
    9fc6:	|  |      move.l d4,-(sp)
    9fc8:	|  |      jsr 174c2 <__adddf3>
    9fce:	|  |      lea 16(sp),sp
    9fd2:	|  |      move.l d1,-(sp)
    9fd4:	|  |      move.l d0,-(sp)
    9fd6:	|  |      jsr 17c12 <sqrt>
    9fdc:	|  |      addq.l #8,sp
    9fde:	|  |      move.l d0,d4
    9fe0:	|  |      move.l d1,d5
    9fe2:	|  |      move.l 72(sp),-(sp)
    9fe6:	|  |      jsr 1769a <__floatsidf>
    9fec:	|  |      addq.l #4,sp
    9fee:	|  |      move.l d0,d6
    9ff0:	|  |      move.l d1,d7
    9ff2:	|  |      move.l 56(sp),-(sp)
    9ff6:	|  |      jsr 1769a <__floatsidf>
    9ffc:	|  |      addq.l #4,sp
    9ffe:	|  |      move.l d1,-(sp)
    a000:	|  |      move.l d0,-(sp)
    a002:	|  |      move.l d7,-(sp)
    a004:	|  |      move.l d6,-(sp)
    a006:	|  |      jsr 174c2 <__adddf3>
    a00c:	|  |      lea 16(sp),sp
    a010:	|  |      move.l d1,-(sp)
    a012:	|  |      move.l d0,-(sp)
    a014:	|  |      jsr 17c12 <sqrt>
    a01a:	|  |      addq.l #8,sp
    a01c:	|  |      move.l d1,-(sp)
    a01e:	|  |      move.l d0,-(sp)
    a020:	|  |      move.l d5,-(sp)
    a022:	|  |      move.l d4,-(sp)
    a024:	|  |      jsr 174c2 <__adddf3>
    a02a:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a02e:	|  |      move.l d1,-(sp)
    a030:	|  |      move.l d0,-(sp)
    a032:	|  |      move.l d3,-(sp)
    a034:	|  |      move.l d2,-(sp)
    a036:	|  |      jsr 178b2 <__ltdf2>
    a03c:	|  |      lea 16(sp),sp
    a040:	|  |      tst.l d0
    a042:	|  |  /-- bge.s a05a <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a044:	|  |  |   movea.l 152(sp),a0
    a048:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a04e:	|  |  |   movea.l 152(sp),a0
    a052:	|  |  |   move.l 120(sp),52(a0)
    a058:	|  +--|-- bra.s a06e <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a05a:	|  |  \-> movea.l 152(sp),a0
    a05e:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a064:	|  |      movea.l 152(sp),a0
    a068:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a06e:	|  \----> movea.l 152(sp),a0
    a072:	|         move.l 52(a0),d0
    a076:	|         move.l d0,-(sp)
    a078:	|         jsr 176da <__floatsisf>
    a07e:	|         addq.l #4,sp
    a080:	|         move.l d0,d1
    a082:	|         movea.l 152(sp),a0
    a086:	|         move.l 4(a0),d0
    a08a:	|         move.l d0,-(sp)
    a08c:	|         move.l d1,-(sp)
    a08e:	|         jsr 179ce <__subsf3>
    a094:	|         addq.l #8,sp
    a096:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a09a:	|         movea.l 152(sp),a0
    a09e:	|         move.l (a0),d2
    a0a0:	|         movea.l 152(sp),a0
    a0a4:	|         move.l 48(a0),d0
    a0a8:	|         move.l d0,-(sp)
    a0aa:	|         jsr 176da <__floatsisf>
    a0b0:	|         addq.l #4,sp
    a0b2:	|         move.l d0,-(sp)
    a0b4:	|         move.l d2,-(sp)
    a0b6:	|         jsr 179ce <__subsf3>
    a0bc:	|         addq.l #8,sp
    a0be:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a0c2:	|         clr.l -(sp)
    a0c4:	|         move.l 52(sp),-(sp)
    a0c8:	|         jsr 17936 <__nesf2>
    a0ce:	|         addq.l #8,sp
    a0d0:	|         tst.l d0
    a0d2:	|     /-- bne.s a0e6 <doBorderStuff+0x628>
    a0d4:	|     |   clr.l -(sp)
    a0d6:	|     |   move.l 56(sp),-(sp)
    a0da:	|     |   jsr 17936 <__nesf2>
    a0e0:	|     |   addq.l #8,sp
    a0e2:	|     |   tst.l d0
    a0e4:	|  /--|-- beq.s a15c <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a0e6:	|  |  \-> move.l 52(sp),d0
    a0ea:	|  |      move.l d0,-(sp)
    a0ec:	|  |      move.l d0,-(sp)
    a0ee:	|  |      jsr 1748c <__addsf3>
    a0f4:	|  |      addq.l #8,sp
    a0f6:	|  |      move.l d0,-(sp)
    a0f8:	|  |      move.l 52(sp),-(sp)
    a0fc:	|  |      jsr 17a62 <atan2f>
    a102:	|  |      addq.l #8,sp
    a104:	|  |      move.l d0,-(sp)
    a106:	|  |      jsr 175f2 <__extendsfdf2>
    a10c:	|  |      addq.l #4,sp
    a10e:	|  |      move.l #-1540411785,-(sp)
    a114:	|  |      move.l #1078765033,-(sp)
    a11a:	|  |      move.l d1,-(sp)
    a11c:	|  |      move.l d0,-(sp)
    a11e:	|  |      jsr 1772a <__muldf3>
    a124:	|  |      lea 16(sp),sp
    a128:	|  |      clr.l -(sp)
    a12a:	|  |      move.l #1080459264,-(sp)
    a130:	|  |      move.l d1,-(sp)
    a132:	|  |      move.l d0,-(sp)
    a134:	|  |      jsr 174c2 <__adddf3>
    a13a:	|  |      lea 16(sp),sp
    a13e:	|  |      move.l d1,-(sp)
    a140:	|  |      move.l d0,-(sp)
    a142:	|  |      jsr 17632 <__fixdfsi>
    a148:	|  |      addq.l #8,sp
    a14a:	|  |      movea.l 152(sp),a0
    a14e:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a152:	|  |      movea.l 152(sp),a0
    a156:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a15c:	|  \----> pea 1 <_start+0x1>
    a160:	|         move.l 156(sp),-(sp)
    a164:	|         jsr 82a6 <setFrames>
    a16a:	|         addq.l #8,sp
    return TRUE;
    a16c:	|         moveq #1,d0
}
    a16e:	\-------> movem.l (sp)+,d2-d7
    a172:	          lea 124(sp),sp
    a176:	          rts

0000a178 <drawPeople>:

void drawPeople () {
    a178:	                   lea -24(sp),sp
    a17c:	                   move.l d2,-(sp)

	shufflePeople ();
    a17e:	                   jsr bc14 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a184:	                   move.l 1ca28 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a18c:	                   clr.l 20(sp)
	overRegion = NULL;
    a190:	                   clr.l 1cad8 <overRegion>

	while (thisPerson) {
    a196:	   /-------------- bra.w a748 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a19a:	/--|-------------> movea.l 24(sp),a0
    a19e:	|  |               move.w 104(a0),d0
    a1a2:	|  |  /----------- beq.w a4fc <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a1a6:	|  |  |            movea.l 24(sp),a0
    a1aa:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a1b0:	|  |  |            movea.l 24(sp),a0
    a1b4:	|  |  |            move.l 76(a0),d0
    a1b8:	|  |  |            cmp.l 20(sp),d0
    a1bc:	|  |  |  /-------- beq.w a38a <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a1c0:	|  |  |  |         movea.l 24(sp),a0
    a1c4:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a1c8:	|  |  |  |         movea.l 24(sp),a0
    a1cc:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a1d2:	|  |  |  |         movea.l 24(sp),a0
    a1d6:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a1da:	|  |  |  |         movea.l 20(sp),a0
    a1de:	|  |  |  |         movea.l 4(a0),a0
    a1e2:	|  |  |  |         move.l 4(a0),d0
    a1e6:	|  |  |  |         movea.l 24(sp),a0
    a1ea:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a1ee:	|  |  |  |         movea.l 20(sp),a0
    a1f2:	|  |  |  |         movea.l 4(a0),a1
    a1f6:	|  |  |  |         movea.l 24(sp),a0
    a1fa:	|  |  |  |         move.l 84(a0),d0
    a1fe:	|  |  |  |         move.l d0,d1
    a200:	|  |  |  |         move.l d1,d0
    a202:	|  |  |  |         add.l d0,d0
    a204:	|  |  |  |         add.l d1,d0
    a206:	|  |  |  |         add.l d0,d0
    a208:	|  |  |  |         add.l d0,d0
    a20a:	|  |  |  |         lea (0,a1,d0.l),a0
    a20e:	|  |  |  |         move.l 8(a0),d0
    a212:	|  |  |  |     /-- ble.w a2b4 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a216:	|  |  |  |     |   movea.l 20(sp),a0
    a21a:	|  |  |  |     |   movea.l 4(a0),a1
    a21e:	|  |  |  |     |   movea.l 24(sp),a0
    a222:	|  |  |  |     |   move.l 84(a0),d0
    a226:	|  |  |  |     |   move.l d0,d1
    a228:	|  |  |  |     |   move.l d1,d0
    a22a:	|  |  |  |     |   add.l d0,d0
    a22c:	|  |  |  |     |   add.l d1,d0
    a22e:	|  |  |  |     |   add.l d0,d0
    a230:	|  |  |  |     |   add.l d0,d0
    a232:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a236:	|  |  |  |     |   move.l 8(a0),d0
    a23a:	|  |  |  |     |   clr.l -(sp)
    a23c:	|  |  |  |     |   move.l d0,-(sp)
    a23e:	|  |  |  |     |   jsr d298 <startSound>
    a244:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a246:	|  |  |  |     |   movea.l 24(sp),a0
    a24a:	|  |  |  |     |   move.l 84(a0),d0
    a24e:	|  |  |  |     |   addq.l #1,d0
    a250:	|  |  |  |     |   movea.l 24(sp),a0
    a254:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a258:	|  |  |  |     |   movea.l 24(sp),a0
    a25c:	|  |  |  |     |   move.l 84(a0),d0
    a260:	|  |  |  |     |   movea.l 24(sp),a0
    a264:	|  |  |  |     |   movea.l 72(a0),a0
    a268:	|  |  |  |     |   move.l 8(a0),d1
    a26c:	|  |  |  |     |   move.l d1,-(sp)
    a26e:	|  |  |  |     |   move.l d0,-(sp)
    a270:	|  |  |  |     |   jsr 17d08 <__modsi3>
    a276:	|  |  |  |     |   addq.l #8,sp
    a278:	|  |  |  |     |   movea.l 24(sp),a0
    a27c:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a280:	|  |  |  |     |   movea.l 24(sp),a0
    a284:	|  |  |  |     |   movea.l 72(a0),a0
    a288:	|  |  |  |     |   movea.l 4(a0),a1
    a28c:	|  |  |  |     |   movea.l 24(sp),a0
    a290:	|  |  |  |     |   move.l 84(a0),d0
    a294:	|  |  |  |     |   move.l d0,d1
    a296:	|  |  |  |     |   move.l d1,d0
    a298:	|  |  |  |     |   add.l d0,d0
    a29a:	|  |  |  |     |   add.l d1,d0
    a29c:	|  |  |  |     |   add.l d0,d0
    a29e:	|  |  |  |     |   add.l d0,d0
    a2a0:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a2a4:	|  |  |  |     |   move.l 4(a0),d0
    a2a8:	|  |  |  |     |   movea.l 24(sp),a0
    a2ac:	|  |  |  |     |   move.l d0,88(a0)
    a2b0:	|  |  |  |  /--|-- bra.w a3f2 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a2b4:	|  |  |  |  |  \-> movea.l 20(sp),a0
    a2b8:	|  |  |  |  |      movea.l 4(a0),a1
    a2bc:	|  |  |  |  |      movea.l 24(sp),a0
    a2c0:	|  |  |  |  |      move.l 84(a0),d0
    a2c4:	|  |  |  |  |      move.l d0,d1
    a2c6:	|  |  |  |  |      move.l d1,d0
    a2c8:	|  |  |  |  |      add.l d0,d0
    a2ca:	|  |  |  |  |      add.l d1,d0
    a2cc:	|  |  |  |  |      add.l d0,d0
    a2ce:	|  |  |  |  |      add.l d0,d0
    a2d0:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a2d4:	|  |  |  |  |      move.l 8(a0),d0
    a2d8:	|  |  |  |  +----- beq.w a3f2 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a2dc:	|  |  |  |  |      movea.l 1c994 <noStack>,a1
    a2e2:	|  |  |  |  |      movea.l 20(sp),a0
    a2e6:	|  |  |  |  |      move.l 4(a0),d2
    a2ea:	|  |  |  |  |      movea.l 24(sp),a0
    a2ee:	|  |  |  |  |      move.l 84(a0),d0
    a2f2:	|  |  |  |  |      move.l d0,d1
    a2f4:	|  |  |  |  |      move.l d1,d0
    a2f6:	|  |  |  |  |      add.l d0,d0
    a2f8:	|  |  |  |  |      add.l d1,d0
    a2fa:	|  |  |  |  |      add.l d0,d0
    a2fc:	|  |  |  |  |      add.l d0,d0
    a2fe:	|  |  |  |  |      movea.l d2,a0
    a300:	|  |  |  |  |      adda.l d0,a0
    a302:	|  |  |  |  |      move.l 8(a0),d0
    a306:	|  |  |  |  |      neg.l d0
    a308:	|  |  |  |  |      pea 1 <_start+0x1>
    a30c:	|  |  |  |  |      move.l a1,-(sp)
    a30e:	|  |  |  |  |      clr.l -(sp)
    a310:	|  |  |  |  |      clr.l -(sp)
    a312:	|  |  |  |  |      move.l d0,-(sp)
    a314:	|  |  |  |  |      jsr 6c0a <startNewFunctionNum>
    a31a:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a31e:	|  |  |  |  |      movea.l 24(sp),a0
    a322:	|  |  |  |  |      move.l 84(a0),d0
    a326:	|  |  |  |  |      addq.l #1,d0
    a328:	|  |  |  |  |      movea.l 24(sp),a0
    a32c:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a330:	|  |  |  |  |      movea.l 24(sp),a0
    a334:	|  |  |  |  |      move.l 84(a0),d0
    a338:	|  |  |  |  |      movea.l 24(sp),a0
    a33c:	|  |  |  |  |      movea.l 72(a0),a0
    a340:	|  |  |  |  |      move.l 8(a0),d1
    a344:	|  |  |  |  |      move.l d1,-(sp)
    a346:	|  |  |  |  |      move.l d0,-(sp)
    a348:	|  |  |  |  |      jsr 17d08 <__modsi3>
    a34e:	|  |  |  |  |      addq.l #8,sp
    a350:	|  |  |  |  |      movea.l 24(sp),a0
    a354:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a358:	|  |  |  |  |      movea.l 24(sp),a0
    a35c:	|  |  |  |  |      movea.l 72(a0),a0
    a360:	|  |  |  |  |      movea.l 4(a0),a1
    a364:	|  |  |  |  |      movea.l 24(sp),a0
    a368:	|  |  |  |  |      move.l 84(a0),d0
    a36c:	|  |  |  |  |      move.l d0,d1
    a36e:	|  |  |  |  |      move.l d1,d0
    a370:	|  |  |  |  |      add.l d0,d0
    a372:	|  |  |  |  |      add.l d1,d0
    a374:	|  |  |  |  |      add.l d0,d0
    a376:	|  |  |  |  |      add.l d0,d0
    a378:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a37c:	|  |  |  |  |      move.l 4(a0),d0
    a380:	|  |  |  |  |      movea.l 24(sp),a0
    a384:	|  |  |  |  |      move.l d0,88(a0)
    a388:	|  |  |  |  +----- bra.s a3f2 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a38a:	|  |  |  \--|----> movea.l 24(sp),a0
    a38e:	|  |  |     |      move.l (a0),d0
    a390:	|  |  |     |      movea.l 24(sp),a0
    a394:	|  |  |     |      move.l 8(a0),d1
    a398:	|  |  |     |      move.l d1,-(sp)
    a39a:	|  |  |     |      move.l d0,-(sp)
    a39c:	|  |  |     |      jsr 175bc <__eqsf2>
    a3a2:	|  |  |     |      addq.l #8,sp
    a3a4:	|  |  |     |      tst.l d0
    a3a6:	|  |  |     |  /-- bne.s a3ea <drawPeople+0x272>
    a3a8:	|  |  |     |  |   movea.l 24(sp),a0
    a3ac:	|  |  |     |  |   move.l 4(a0),d0
    a3b0:	|  |  |     |  |   movea.l 24(sp),a0
    a3b4:	|  |  |     |  |   move.l 12(a0),d1
    a3b8:	|  |  |     |  |   move.l d1,-(sp)
    a3ba:	|  |  |     |  |   move.l d0,-(sp)
    a3bc:	|  |  |     |  |   jsr 175bc <__eqsf2>
    a3c2:	|  |  |     |  |   addq.l #8,sp
    a3c4:	|  |  |     |  |   tst.l d0
    a3c6:	|  |  |     |  +-- bne.s a3ea <drawPeople+0x272>
    a3c8:	|  |  |     |  |   movea.l 20(sp),a0
    a3cc:	|  |  |     |  |   move.l 8(a0),d0
    a3d0:	|  |  |     |  |   moveq #1,d1
    a3d2:	|  |  |     |  |   cmp.l d0,d1
    a3d4:	|  |  |     |  +-- bne.s a3ea <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a3d6:	|  |  |     |  |   movea.l 24(sp),a0
    a3da:	|  |  |     |  |   move.l 16(a0),d0
    a3de:	|  |  |     |  |   addq.l #1,d0
    a3e0:	|  |  |     |  |   movea.l 24(sp),a0
    a3e4:	|  |  |     |  |   move.l d0,16(a0)
    a3e8:	|  |  |     +--|-- bra.s a3f2 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a3ea:	|  |  |     |  \-> movea.l 24(sp),a0
    a3ee:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a3f2:	|  |  |     \----> movea.l 24(sp),a0
    a3f6:	|  |  |            move.l (a0),d0
    a3f8:	|  |  |            movea.l 24(sp),a0
    a3fc:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a400:	|  |  |            movea.l 24(sp),a0
    a404:	|  |  |            move.l 4(a0),d0
    a408:	|  |  |            movea.l 24(sp),a0
    a40c:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a410:	|  |  |            movea.l 20(sp),a0
    a414:	|  |  |            movea.l 4(a0),a1
    a418:	|  |  |            movea.l 24(sp),a0
    a41c:	|  |  |            move.l 84(a0),d0
    a420:	|  |  |            move.l d0,d1
    a422:	|  |  |            move.l d1,d0
    a424:	|  |  |            add.l d0,d0
    a426:	|  |  |            add.l d1,d0
    a428:	|  |  |            add.l d0,d0
    a42a:	|  |  |            add.l d0,d0
    a42c:	|  |  |            lea (0,a1,d0.l),a0
    a430:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a434:	|  |  |            move.l 8(sp),d0
    a438:	|  |  |            add.l d0,d0
    a43a:	|  |  |            subx.l d0,d0
    a43c:	|  |  |            neg.l d0
    a43e:	|  |  |            move.b d0,d0
    a440:	|  |  |            move.b d0,d0
    a442:	|  |  |            andi.l #255,d0
    a448:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a44c:	|  |  |            move.l 8(sp),-(sp)
    a450:	|  |  |            jsr 934c <TF_abs>
    a456:	|  |  |            addq.l #4,sp
    a458:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a45c:	|  |  |            movea.l 20(sp),a0
    a460:	|  |  |            movea.l (a0),a0
    a462:	|  |  |            move.l 8(a0),d0
    a466:	|  |  |            cmp.l 12(sp),d0
    a46a:	|  |  |        /-- bgt.s a47a <drawPeople+0x302>
				fNum = 0;
    a46c:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a470:	|  |  |        |   moveq #2,d0
    a472:	|  |  |        |   sub.l 16(sp),d0
    a476:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a47a:	|  |  |        \-> moveq #2,d1
    a47c:	|  |  |            cmp.l 16(sp),d1
    a480:	|  |  +----------- beq.s a4fc <drawPeople+0x384>
				BOOL r = FALSE;
    a482:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a486:	|  |  |            move.l 16(sp),d0
    a48a:	|  |  |            movea.w d0,a0
    a48c:	|  |  |            movea.l 20(sp),a1
    a490:	|  |  |            movea.l (a1),a1
    a492:	|  |  |            movea.l 16(a1),a1
    a496:	|  |  |            move.l 12(sp),d1
    a49a:	|  |  |            move.l d1,d0
    a49c:	|  |  |            lsl.l #3,d0
    a49e:	|  |  |            sub.l d1,d0
    a4a0:	|  |  |            add.l d0,d0
    a4a2:	|  |  |            add.l d0,d0
    a4a4:	|  |  |            add.l a1,d0
    a4a6:	|  |  |            move.l a0,-(sp)
    a4a8:	|  |  |            move.l 28(sp),-(sp)
    a4ac:	|  |  |            move.l d0,-(sp)
    a4ae:	|  |  |            jsr 90e2 <scaleSprite>
    a4b4:	|  |  |            lea 12(sp),sp
    a4b8:	|  |  |            move.w d0,6(sp)
				if (r) {
    a4bc:	|  |  +----------- beq.s a4fc <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a4be:	|  |  |            movea.l 24(sp),a0
    a4c2:	|  |  |            movea.l 114(a0),a0
    a4c6:	|  |  |            movea.l (a0),a0
    a4c8:	|  |  |            move.b (a0),d0
    a4ca:	|  |  +----------- beq.s a4fc <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a4cc:	|  |  |            move.l 1ca48 <personRegion+0x1c>,d1
    a4d2:	|  |  |            movea.l 24(sp),a0
    a4d6:	|  |  |            move.l 114(a0),d0
    a4da:	|  |  |            cmp.l d1,d0
    a4dc:	|  |  |        /-- beq.s a4e4 <drawPeople+0x36c>
    a4de:	|  |  |        |   clr.l 1c98c <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a4e4:	|  |  |        \-> movea.l 24(sp),a0
    a4e8:	|  |  |            move.l 114(a0),d0
    a4ec:	|  |  |            move.l d0,1ca48 <personRegion+0x1c>
						overRegion = & personRegion;
    a4f2:	|  |  |            move.l #117292,1cad8 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a4fc:	|  |  \----------> movea.l 24(sp),a0
    a500:	|  |               move.l 88(a0),d0
    a504:	|  |               subq.l #1,d0
    a506:	|  |               movea.l 24(sp),a0
    a50a:	|  |               move.l d0,88(a0)
    a50e:	|  |               movea.l 24(sp),a0
    a512:	|  |               move.l 88(a0),d0
    a516:	|  |        /----- bne.w a73e <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a51a:	|  |        |      movea.l 24(sp),a0
    a51e:	|  |        |      move.l 84(a0),d0
    a522:	|  |        |      addq.l #1,d0
    a524:	|  |        |      movea.l 24(sp),a0
    a528:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a52c:	|  |        |      movea.l 24(sp),a0
    a530:	|  |        |      move.l 84(a0),d0
    a534:	|  |        |      movea.l 24(sp),a0
    a538:	|  |        |      movea.l 72(a0),a0
    a53c:	|  |        |      move.l 8(a0),d1
    a540:	|  |        |      move.l d1,-(sp)
    a542:	|  |        |      move.l d0,-(sp)
    a544:	|  |        |      jsr 17d08 <__modsi3>
    a54a:	|  |        |      addq.l #8,sp
    a54c:	|  |        |      movea.l 24(sp),a0
    a550:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a554:	|  |        |      movea.l 24(sp),a0
    a558:	|  |        |      movea.l 72(a0),a0
    a55c:	|  |        |      movea.l 4(a0),a1
    a560:	|  |        |      movea.l 24(sp),a0
    a564:	|  |        |      move.l 84(a0),d0
    a568:	|  |        |      move.l d0,d1
    a56a:	|  |        |      move.l d1,d0
    a56c:	|  |        |      add.l d0,d0
    a56e:	|  |        |      add.l d1,d0
    a570:	|  |        |      add.l d0,d0
    a572:	|  |        |      add.l d0,d0
    a574:	|  |        |      lea (0,a1,d0.l),a0
    a578:	|  |        |      move.l 4(a0),d0
    a57c:	|  |        |      movea.l 24(sp),a0
    a580:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a584:	|  |        |      movea.l 24(sp),a0
    a588:	|  |        |      move.w 104(a0),d0
    a58c:	|  |        +----- beq.w a73e <drawPeople+0x5c6>
    a590:	|  |        |      tst.l 20(sp)
    a594:	|  |        +----- beq.w a73e <drawPeople+0x5c6>
    a598:	|  |        |      movea.l 20(sp),a0
    a59c:	|  |        |      move.l 4(a0),d0
    a5a0:	|  |        +----- beq.w a73e <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a5a4:	|  |        |      movea.l 20(sp),a0
    a5a8:	|  |        |      movea.l 4(a0),a1
    a5ac:	|  |        |      movea.l 24(sp),a0
    a5b0:	|  |        |      move.l 84(a0),d0
    a5b4:	|  |        |      move.l d0,d1
    a5b6:	|  |        |      move.l d1,d0
    a5b8:	|  |        |      add.l d0,d0
    a5ba:	|  |        |      add.l d1,d0
    a5bc:	|  |        |      add.l d0,d0
    a5be:	|  |        |      add.l d0,d0
    a5c0:	|  |        |      lea (0,a1,d0.l),a0
    a5c4:	|  |        |      move.l 8(a0),d0
    a5c8:	|  |        |  /-- ble.w a66a <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a5cc:	|  |        |  |   movea.l 20(sp),a0
    a5d0:	|  |        |  |   movea.l 4(a0),a1
    a5d4:	|  |        |  |   movea.l 24(sp),a0
    a5d8:	|  |        |  |   move.l 84(a0),d0
    a5dc:	|  |        |  |   move.l d0,d1
    a5de:	|  |        |  |   move.l d1,d0
    a5e0:	|  |        |  |   add.l d0,d0
    a5e2:	|  |        |  |   add.l d1,d0
    a5e4:	|  |        |  |   add.l d0,d0
    a5e6:	|  |        |  |   add.l d0,d0
    a5e8:	|  |        |  |   lea (0,a1,d0.l),a0
    a5ec:	|  |        |  |   move.l 8(a0),d0
    a5f0:	|  |        |  |   clr.l -(sp)
    a5f2:	|  |        |  |   move.l d0,-(sp)
    a5f4:	|  |        |  |   jsr d298 <startSound>
    a5fa:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a5fc:	|  |        |  |   movea.l 24(sp),a0
    a600:	|  |        |  |   move.l 84(a0),d0
    a604:	|  |        |  |   addq.l #1,d0
    a606:	|  |        |  |   movea.l 24(sp),a0
    a60a:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a60e:	|  |        |  |   movea.l 24(sp),a0
    a612:	|  |        |  |   move.l 84(a0),d0
    a616:	|  |        |  |   movea.l 24(sp),a0
    a61a:	|  |        |  |   movea.l 72(a0),a0
    a61e:	|  |        |  |   move.l 8(a0),d1
    a622:	|  |        |  |   move.l d1,-(sp)
    a624:	|  |        |  |   move.l d0,-(sp)
    a626:	|  |        |  |   jsr 17d08 <__modsi3>
    a62c:	|  |        |  |   addq.l #8,sp
    a62e:	|  |        |  |   movea.l 24(sp),a0
    a632:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a636:	|  |        |  |   movea.l 24(sp),a0
    a63a:	|  |        |  |   movea.l 72(a0),a0
    a63e:	|  |        |  |   movea.l 4(a0),a1
    a642:	|  |        |  |   movea.l 24(sp),a0
    a646:	|  |        |  |   move.l 84(a0),d0
    a64a:	|  |        |  |   move.l d0,d1
    a64c:	|  |        |  |   move.l d1,d0
    a64e:	|  |        |  |   add.l d0,d0
    a650:	|  |        |  |   add.l d1,d0
    a652:	|  |        |  |   add.l d0,d0
    a654:	|  |        |  |   add.l d0,d0
    a656:	|  |        |  |   lea (0,a1,d0.l),a0
    a65a:	|  |        |  |   move.l 4(a0),d0
    a65e:	|  |        |  |   movea.l 24(sp),a0
    a662:	|  |        |  |   move.l d0,88(a0)
    a666:	|  |        +--|-- bra.w a73e <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a66a:	|  |        |  \-> movea.l 20(sp),a0
    a66e:	|  |        |      movea.l 4(a0),a1
    a672:	|  |        |      movea.l 24(sp),a0
    a676:	|  |        |      move.l 84(a0),d0
    a67a:	|  |        |      move.l d0,d1
    a67c:	|  |        |      move.l d1,d0
    a67e:	|  |        |      add.l d0,d0
    a680:	|  |        |      add.l d1,d0
    a682:	|  |        |      add.l d0,d0
    a684:	|  |        |      add.l d0,d0
    a686:	|  |        |      lea (0,a1,d0.l),a0
    a68a:	|  |        |      move.l 8(a0),d0
    a68e:	|  |        +----- beq.w a73e <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a692:	|  |        |      movea.l 1c994 <noStack>,a1
    a698:	|  |        |      movea.l 20(sp),a0
    a69c:	|  |        |      move.l 4(a0),d2
    a6a0:	|  |        |      movea.l 24(sp),a0
    a6a4:	|  |        |      move.l 84(a0),d0
    a6a8:	|  |        |      move.l d0,d1
    a6aa:	|  |        |      move.l d1,d0
    a6ac:	|  |        |      add.l d0,d0
    a6ae:	|  |        |      add.l d1,d0
    a6b0:	|  |        |      add.l d0,d0
    a6b2:	|  |        |      add.l d0,d0
    a6b4:	|  |        |      movea.l d2,a0
    a6b6:	|  |        |      adda.l d0,a0
    a6b8:	|  |        |      move.l 8(a0),d0
    a6bc:	|  |        |      neg.l d0
    a6be:	|  |        |      pea 1 <_start+0x1>
    a6c2:	|  |        |      move.l a1,-(sp)
    a6c4:	|  |        |      clr.l -(sp)
    a6c6:	|  |        |      clr.l -(sp)
    a6c8:	|  |        |      move.l d0,-(sp)
    a6ca:	|  |        |      jsr 6c0a <startNewFunctionNum>
    a6d0:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a6d4:	|  |        |      movea.l 24(sp),a0
    a6d8:	|  |        |      move.l 84(a0),d0
    a6dc:	|  |        |      addq.l #1,d0
    a6de:	|  |        |      movea.l 24(sp),a0
    a6e2:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a6e6:	|  |        |      movea.l 24(sp),a0
    a6ea:	|  |        |      move.l 84(a0),d0
    a6ee:	|  |        |      movea.l 24(sp),a0
    a6f2:	|  |        |      movea.l 72(a0),a0
    a6f6:	|  |        |      move.l 8(a0),d1
    a6fa:	|  |        |      move.l d1,-(sp)
    a6fc:	|  |        |      move.l d0,-(sp)
    a6fe:	|  |        |      jsr 17d08 <__modsi3>
    a704:	|  |        |      addq.l #8,sp
    a706:	|  |        |      movea.l 24(sp),a0
    a70a:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a70e:	|  |        |      movea.l 24(sp),a0
    a712:	|  |        |      movea.l 72(a0),a0
    a716:	|  |        |      movea.l 4(a0),a1
    a71a:	|  |        |      movea.l 24(sp),a0
    a71e:	|  |        |      move.l 84(a0),d0
    a722:	|  |        |      move.l d0,d1
    a724:	|  |        |      move.l d1,d0
    a726:	|  |        |      add.l d0,d0
    a728:	|  |        |      add.l d1,d0
    a72a:	|  |        |      add.l d0,d0
    a72c:	|  |        |      add.l d0,d0
    a72e:	|  |        |      lea (0,a1,d0.l),a0
    a732:	|  |        |      move.l 4(a0),d0
    a736:	|  |        |      movea.l 24(sp),a0
    a73a:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a73e:	|  |        \----> movea.l 24(sp),a0
    a742:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a748:	|  \-------------> tst.l 24(sp)
    a74c:	\----------------- bne.w a19a <drawPeople+0x22>
	}
}
    a750:	                   nop
    a752:	                   nop
    a754:	                   move.l (sp)+,d2
    a756:	                   lea 24(sp),sp
    a75a:	                   rts

0000a75c <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a75c:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a75e:	          move.l 1ca28 <allPeople>,(sp)
	while (thisPerson) {
    a764:	      /-- bra.s a77c <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a766:	/-----|-> movea.l (sp),a0
    a768:	|     |   movea.l 114(a0),a0
    a76c:	|     |   move.l 4(a0),d0
    a770:	|     |   cmp.l 8(sp),d0
    a774:	|  /--|-- beq.s a782 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a776:	|  |  |   movea.l (sp),a0
    a778:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a77c:	|  |  \-> tst.l (sp)
    a77e:	\--|----- bne.s a766 <findPerson+0xa>
    a780:	   |  /-- bra.s a784 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a782:	   \--|-> nop
	}
	return thisPerson;
    a784:	      \-> move.l (sp),d0
}
    a786:	          addq.l #4,sp
    a788:	          rts

0000a78a <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a78a:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a78c:	       move.l 12(sp),-(sp)
    a790:	       jsr a75c <findPerson>
    a796:	       addq.l #4,sp
    a798:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a79a:	   /-- bne.s a7a0 <floatCharacter+0x16>
    a79c:	   |   clr.w d0
    a79e:	/--|-- bra.s a7aa <floatCharacter+0x20>
	moveMe -> floaty = f;
    a7a0:	|  \-> movea.l (sp),a0
    a7a2:	|      move.l 8(sp),24(a0)
	return TRUE;
    a7a8:	|      moveq #1,d0
}
    a7aa:	\----> addq.l #4,sp
    a7ac:	       rts

0000a7ae <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a7ae:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a7b0:	          tst.l 8(sp)
    a7b4:	      /-- bne.s a7c2 <forceWalkingPerson+0x14>
    a7b6:	      |   tst.l 12(sp)
    a7ba:	      +-- bne.s a7c2 <forceWalkingPerson+0x14>
    a7bc:	      |   clr.w d0
    a7be:	/-----|-- bra.w a854 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a7c2:	|     \-> move.l 16(sp),-(sp)
    a7c6:	|         jsr a75c <findPerson>
    a7cc:	|         addq.l #4,sp
    a7ce:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a7d0:	|     /-- bne.s a7d6 <forceWalkingPerson+0x28>
    a7d2:	|     |   clr.w d0
    a7d4:	+-----|-- bra.s a854 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a7d6:	|     \-> movea.l (sp),a0
    a7d8:	|         move.l 68(a0),d0
    a7dc:	|     /-- beq.s a7ee <forceWalkingPerson+0x40>
    a7de:	|     |   movea.l (sp),a0
    a7e0:	|     |   move.l 68(a0),d0
    a7e4:	|     |   move.l d0,-(sp)
    a7e6:	|     |   jsr 484e <abortFunction>
    a7ec:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a7ee:	|     \-> movea.l (sp),a0
    a7f0:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a7f6:	|         movea.l (sp),a0
    a7f8:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a7fc:	|         movea.l (sp),a0
    a7fe:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a804:	|         movea.l (sp),a0
    a806:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a80c:	|         movea.l (sp),a0
    a80e:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a814:	|         movea.l (sp),a0
    a816:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a81a:	|         movea.l (sp),a0
    a81c:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a820:	|         move.l (sp),-(sp)
    a822:	|         jsr 9abe <doBorderStuff>
    a828:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a82a:	|         pea 1 <_start+0x1>
    a82e:	|         move.l 4(sp),-(sp)
    a832:	|         jsr c01e <walkMe>
    a838:	|         addq.l #8,sp
    a83a:	|         tst.w d0
    a83c:	|     /-- bne.s a846 <forceWalkingPerson+0x98>
    a83e:	|     |   movea.l (sp),a0
    a840:	|     |   move.w 66(a0),d0
    a844:	|  /--|-- beq.s a852 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a846:	|  |  \-> movea.l (sp),a0
    a848:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a84e:	|  |      moveq #1,d0
    a850:	+--|----- bra.s a854 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a852:	|  \----> clr.w d0
    }
}
    a854:	\-------> addq.l #4,sp
    a856:	          rts

0000a858 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a858:	                lea -56(sp),sp
    a85c:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a85e:	                move.l #320,56(sp)
    a866:	                move.l #200,52(sp)
    a86e:	                moveq #-1,d0
    a870:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a874:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a87c:	                clr.l 44(sp)
    a880:	   /----------- bra.w aa58 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a884:	/--|----------> movea.l 1cae0 <currentFloor>,a0
    a88a:	|  |            move.l 12(a0),d1
    a88e:	|  |            move.l 44(sp),d0
    a892:	|  |            lsl.l #3,d0
    a894:	|  |            movea.l d1,a0
    a896:	|  |            adda.l d0,a0
    a898:	|  |            move.l (a0),d0
    a89a:	|  |            move.l d0,d1
    a89c:	|  |            subq.l #1,d1
    a89e:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a8a2:	|  |            clr.l 40(sp)
    a8a6:	|  |     /----- bra.w aa36 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a8aa:	|  |  /--|----> movea.l 1cae0 <currentFloor>,a0
    a8b0:	|  |  |  |      move.l 4(a0),d1
    a8b4:	|  |  |  |      movea.l 1cae0 <currentFloor>,a0
    a8ba:	|  |  |  |      movea.l 12(a0),a0
    a8be:	|  |  |  |      move.l 44(sp),d0
    a8c2:	|  |  |  |      lsl.l #3,d0
    a8c4:	|  |  |  |      adda.l d0,a0
    a8c6:	|  |  |  |      movea.l 4(a0),a0
    a8ca:	|  |  |  |      move.l 40(sp),d0
    a8ce:	|  |  |  |      add.l d0,d0
    a8d0:	|  |  |  |      add.l d0,d0
    a8d2:	|  |  |  |      adda.l d0,a0
    a8d4:	|  |  |  |      move.l (a0),d0
    a8d6:	|  |  |  |      lsl.l #3,d0
    a8d8:	|  |  |  |      movea.l d1,a0
    a8da:	|  |  |  |      adda.l d0,a0
    a8dc:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a8e0:	|  |  |  |      movea.l 1cae0 <currentFloor>,a0
    a8e6:	|  |  |  |      move.l 4(a0),d1
    a8ea:	|  |  |  |      movea.l 1cae0 <currentFloor>,a0
    a8f0:	|  |  |  |      movea.l 12(a0),a0
    a8f4:	|  |  |  |      move.l 44(sp),d0
    a8f8:	|  |  |  |      lsl.l #3,d0
    a8fa:	|  |  |  |      adda.l d0,a0
    a8fc:	|  |  |  |      movea.l 4(a0),a0
    a900:	|  |  |  |      move.l 40(sp),d0
    a904:	|  |  |  |      add.l d0,d0
    a906:	|  |  |  |      add.l d0,d0
    a908:	|  |  |  |      adda.l d0,a0
    a90a:	|  |  |  |      move.l (a0),d0
    a90c:	|  |  |  |      lsl.l #3,d0
    a90e:	|  |  |  |      movea.l d1,a0
    a910:	|  |  |  |      adda.l d0,a0
    a912:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a918:	|  |  |  |      movea.l 1cae0 <currentFloor>,a0
    a91e:	|  |  |  |      move.l 4(a0),d1
    a922:	|  |  |  |      movea.l 1cae0 <currentFloor>,a0
    a928:	|  |  |  |      movea.l 12(a0),a0
    a92c:	|  |  |  |      move.l 44(sp),d0
    a930:	|  |  |  |      lsl.l #3,d0
    a932:	|  |  |  |      adda.l d0,a0
    a934:	|  |  |  |      movea.l 4(a0),a0
    a938:	|  |  |  |      move.l 36(sp),d0
    a93c:	|  |  |  |      add.l d0,d0
    a93e:	|  |  |  |      add.l d0,d0
    a940:	|  |  |  |      adda.l d0,a0
    a942:	|  |  |  |      move.l (a0),d0
    a944:	|  |  |  |      lsl.l #3,d0
    a946:	|  |  |  |      movea.l d1,a0
    a948:	|  |  |  |      adda.l d0,a0
    a94a:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a94e:	|  |  |  |      movea.l 1cae0 <currentFloor>,a0
    a954:	|  |  |  |      move.l 4(a0),d1
    a958:	|  |  |  |      movea.l 1cae0 <currentFloor>,a0
    a95e:	|  |  |  |      movea.l 12(a0),a0
    a962:	|  |  |  |      move.l 44(sp),d0
    a966:	|  |  |  |      lsl.l #3,d0
    a968:	|  |  |  |      adda.l d0,a0
    a96a:	|  |  |  |      movea.l 4(a0),a0
    a96e:	|  |  |  |      move.l 36(sp),d0
    a972:	|  |  |  |      add.l d0,d0
    a974:	|  |  |  |      add.l d0,d0
    a976:	|  |  |  |      adda.l d0,a0
    a978:	|  |  |  |      move.l (a0),d0
    a97a:	|  |  |  |      lsl.l #3,d0
    a97c:	|  |  |  |      movea.l d1,a0
    a97e:	|  |  |  |      adda.l d0,a0
    a980:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a986:	|  |  |  |      movea.l 68(sp),a0
    a98a:	|  |  |  |      move.l (a0),d1
    a98c:	|  |  |  |      movea.l 64(sp),a0
    a990:	|  |  |  |      move.l (a0),d0
    a992:	|  |  |  |      move.l d1,-(sp)
    a994:	|  |  |  |      move.l d0,-(sp)
    a996:	|  |  |  |      move.l 24(sp),-(sp)
    a99a:	|  |  |  |      move.l 32(sp),-(sp)
    a99e:	|  |  |  |      move.l 40(sp),-(sp)
    a9a2:	|  |  |  |      move.l 48(sp),-(sp)
    a9a6:	|  |  |  |      lea 28(sp),a0
    a9aa:	|  |  |  |      move.l a0,-(sp)
    a9ac:	|  |  |  |      lea 36(sp),a0
    a9b0:	|  |  |  |      move.l a0,-(sp)
    a9b2:	|  |  |  |      jsr 160fe <closestPointOnLine>
    a9b8:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a9bc:	|  |  |  |      movea.l 64(sp),a0
    a9c0:	|  |  |  |      move.l (a0),d0
    a9c2:	|  |  |  |      move.l 8(sp),d1
    a9c6:	|  |  |  |      move.l d0,d2
    a9c8:	|  |  |  |      sub.l d1,d2
    a9ca:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a9ce:	|  |  |  |      movea.l 68(sp),a0
    a9d2:	|  |  |  |      move.l (a0),d0
    a9d4:	|  |  |  |      move.l 4(sp),d1
    a9d8:	|  |  |  |      move.l d0,d2
    a9da:	|  |  |  |      sub.l d1,d2
    a9dc:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a9e0:	|  |  |  |      move.l 28(sp),-(sp)
    a9e4:	|  |  |  |      move.l 32(sp),-(sp)
    a9e8:	|  |  |  |      jsr 17c5c <__mulsi3>
    a9ee:	|  |  |  |      addq.l #8,sp
    a9f0:	|  |  |  |      move.l d0,d2
    a9f2:	|  |  |  |      move.l 24(sp),-(sp)
    a9f6:	|  |  |  |      move.l 28(sp),-(sp)
    a9fa:	|  |  |  |      jsr 17c5c <__mulsi3>
    aa00:	|  |  |  |      addq.l #8,sp
    aa02:	|  |  |  |      move.l d2,d1
    aa04:	|  |  |  |      add.l d0,d1
    aa06:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    aa0a:	|  |  |  |      move.l 12(sp),d2
    aa0e:	|  |  |  |      cmp.l 32(sp),d2
    aa12:	|  |  |  |  /-- bge.s aa2c <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    aa14:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    aa1a:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    aa20:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    aa26:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    aa2c:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    aa32:	|  |  |  |      addq.l #1,40(sp)
    aa36:	|  |  |  \----> movea.l 1cae0 <currentFloor>,a0
    aa3c:	|  |  |         move.l 12(a0),d1
    aa40:	|  |  |         move.l 44(sp),d0
    aa44:	|  |  |         lsl.l #3,d0
    aa46:	|  |  |         movea.l d1,a0
    aa48:	|  |  |         adda.l d0,a0
    aa4a:	|  |  |         move.l (a0),d0
    aa4c:	|  |  |         cmp.l 40(sp),d0
    aa50:	|  |  \-------- bgt.w a8aa <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    aa54:	|  |            addq.l #1,44(sp)
    aa58:	|  \----------> movea.l 1cae0 <currentFloor>,a0
    aa5e:	|               move.l 8(a0),d0
    aa62:	|               cmp.l 44(sp),d0
    aa66:	\-------------- bgt.w a884 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    aa6a:	                moveq #-1,d0
    aa6c:	                cmp.l 48(sp),d0
    aa70:	            /-- bne.s aa76 <handleClosestPoint+0x21e>
    aa72:	            |   clr.w d0
    aa74:	         /--|-- bra.s aa90 <handleClosestPoint+0x238>
	*setX = gotX;
    aa76:	         |  \-> movea.l 64(sp),a0
    aa7a:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    aa7e:	         |      movea.l 68(sp),a0
    aa82:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    aa86:	         |      movea.l 72(sp),a0
    aa8a:	         |      move.l 48(sp),(a0)

	return TRUE;
    aa8e:	         |      moveq #1,d0
}
    aa90:	         \----> move.l (sp)+,d2
    aa92:	                lea 56(sp),sp
    aa96:	                rts

0000aa98 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    aa98:	clr.l 1ca3c <personRegion+0x10>
	personRegion.sY = 0;
    aa9e:	clr.l 1ca40 <personRegion+0x14>
	personRegion.di = -1;
    aaa4:	moveq #-1,d0
    aaa6:	move.l d0,1ca44 <personRegion+0x18>
	allScreenRegions = NULL;
    aaac:	clr.l 1cad4 <allScreenRegions>

	return TRUE;
    aab2:	moveq #1,d0
}
    aab4:	rts

0000aab6 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    aab6:	          subq.l #4,sp
    aab8:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    aaba:	          tst.l 12(sp)
    aabe:	      /-- bne.s aac6 <jumpPerson+0x10>
    aac0:	      |   tst.l 16(sp)
    aac4:	/-----|-- beq.s ab3a <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    aac6:	|     \-> move.l 20(sp),-(sp)
    aaca:	|         jsr a75c <findPerson>
    aad0:	|         addq.l #4,sp
    aad2:	|         move.l d0,4(sp)
    if (!moveMe) return;
    aad6:	|  /----- beq.s ab3e <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    aad8:	|  |      movea.l 4(sp),a0
    aadc:	|  |      move.l 68(a0),d0
    aae0:	|  |  /-- beq.s aaf4 <jumpPerson+0x3e>
    aae2:	|  |  |   movea.l 4(sp),a0
    aae6:	|  |  |   move.l 68(a0),d0
    aaea:	|  |  |   move.l d0,-(sp)
    aaec:	|  |  |   jsr 484e <abortFunction>
    aaf2:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    aaf4:	|  |  \-> movea.l 4(sp),a0
    aaf8:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    aafc:	|  |      movea.l 4(sp),a0
    ab00:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    ab04:	|  |      movea.l 4(sp),a0
    ab08:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    ab0c:	|  |      move.l 16(sp),-(sp)
    ab10:	|  |      jsr 176da <__floatsisf>
    ab16:	|  |      addq.l #4,sp
    ab18:	|  |      move.l d0,d2
    ab1a:	|  |      move.l 12(sp),-(sp)
    ab1e:	|  |      jsr 176da <__floatsisf>
    ab24:	|  |      addq.l #4,sp
    ab26:	|  |      move.l d2,-(sp)
    ab28:	|  |      move.l d0,-(sp)
    ab2a:	|  |      move.l 12(sp),-(sp)
    ab2e:	|  |      jsr aea4 <moveAndScale>
    ab34:	|  |      lea 12(sp),sp
    ab38:	|  |  /-- bra.s ab40 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    ab3a:	\--|--|-> nop
    ab3c:	   |  +-- bra.s ab40 <jumpPerson+0x8a>
    if (!moveMe) return;
    ab3e:	   \--|-> nop
}
    ab40:	      \-> move.l (sp)+,d2
    ab42:	          addq.l #4,sp
    ab44:	          rts

0000ab46 <killAllPeople>:


void killAllPeople () {
    ab46:	          subq.l #8,sp
    ab48:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    ab4a:	   /----- bra.s abb6 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    ab4c:	/--|----> movea.l 1ca28 <allPeople>,a0
    ab52:	|  |      move.l 68(a0),d0
    ab56:	|  |  /-- beq.s ab6c <killAllPeople+0x26>
    ab58:	|  |  |   movea.l 1ca28 <allPeople>,a0
    ab5e:	|  |  |   move.l 68(a0),d0
    ab62:	|  |  |   move.l d0,-(sp)
    ab64:	|  |  |   jsr 484e <abortFunction>
    ab6a:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    ab6c:	|  |  \-> movea.l 1ca28 <allPeople>,a0
    ab72:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    ab76:	|  |      move.l 1ca28 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    ab7e:	|  |      movea.l 1ca28 <allPeople>,a0
    ab84:	|  |      move.l 36(a0),d0
    ab88:	|  |      move.l d0,1ca28 <allPeople>
		removeObjectType (killPeople -> thisType);
    ab8e:	|  |      movea.l 8(sp),a0
    ab92:	|  |      move.l 114(a0),d0
    ab96:	|  |      move.l d0,-(sp)
    ab98:	|  |      jsr d976 <removeObjectType>
    ab9e:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    aba0:	|  |      move.l 8(sp),4(sp)
    aba6:	|  |      move.l 1c9c4 <SysBase>,d0
    abac:	|  |      movea.l d0,a6
    abae:	|  |      movea.l 4(sp),a1
    abb2:	|  |      jsr -690(a6)
	while (allPeople) {
    abb6:	|  \----> move.l 1ca28 <allPeople>,d0
    abbc:	\-------- bne.s ab4c <killAllPeople+0x6>
	}
}
    abbe:	          nop
    abc0:	          nop
    abc2:	          movea.l (sp)+,a6
    abc4:	          addq.l #8,sp
    abc6:	          rts

0000abc8 <killMostPeople>:

void killMostPeople() {
    abc8:	          lea -12(sp),sp
    abcc:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    abce:	          move.l #117288,12(sp)

    while (*lookyHere) {
    abd6:	   /----- bra.w ac5c <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    abda:	/--|----> movea.l 12(sp),a0
    abde:	|  |      movea.l (a0),a0
    abe0:	|  |      move.l 118(a0),d0
    abe4:	|  |      moveq #32,d1
    abe6:	|  |      and.l d1,d0
    abe8:	|  |  /-- beq.s abfa <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    abea:	|  |  |   movea.l 12(sp),a0
    abee:	|  |  |   move.l (a0),d0
    abf0:	|  |  |   moveq #36,d1
    abf2:	|  |  |   add.l d0,d1
    abf4:	|  |  |   move.l d1,12(sp)
    abf8:	|  +--|-- bra.s ac5c <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    abfa:	|  |  \-> movea.l 12(sp),a0
    abfe:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    ac02:	|  |      movea.l 8(sp),a0
    ac06:	|  |      move.l 36(a0),d0
    ac0a:	|  |      movea.l 12(sp),a0
    ac0e:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    ac10:	|  |      movea.l 8(sp),a0
    ac14:	|  |      move.l 68(a0),d0
    ac18:	|  |  /-- beq.s ac2c <killMostPeople+0x64>
    ac1a:	|  |  |   movea.l 8(sp),a0
    ac1e:	|  |  |   move.l 68(a0),d0
    ac22:	|  |  |   move.l d0,-(sp)
    ac24:	|  |  |   jsr 484e <abortFunction>
    ac2a:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    ac2c:	|  |  \-> movea.l 8(sp),a0
    ac30:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ac34:	|  |      movea.l 8(sp),a0
    ac38:	|  |      move.l 114(a0),d0
    ac3c:	|  |      move.l d0,-(sp)
    ac3e:	|  |      jsr d976 <removeObjectType>
    ac44:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ac46:	|  |      move.l 8(sp),4(sp)
    ac4c:	|  |      move.l 1c9c4 <SysBase>,d0
    ac52:	|  |      movea.l d0,a6
    ac54:	|  |      movea.l 4(sp),a1
    ac58:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ac5c:	|  \----> movea.l 12(sp),a0
    ac60:	|         move.l (a0),d0
    ac62:	\-------- bne.w abda <killMostPeople+0x12>
        }
    }
}
    ac66:	          nop
    ac68:	          nop
    ac6a:	          movea.l (sp)+,a6
    ac6c:	          lea 12(sp),sp
    ac70:	          rts

0000ac72 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ac72:	clr.l -(sp)
    ac74:	move.l sp,d0
    ac76:	addq.l #8,d0
    ac78:	move.l d0,-(sp)
    ac7a:	jsr 82a6 <setFrames>
    ac80:	addq.l #8,sp
}
    ac82:	nop
    ac84:	rts

0000ac86 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ac86:	          lea -12(sp),sp
    ac8a:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    ac8c:	          tst.l 20(sp)
    ac90:	      /-- bne.s ac9e <makeWalkingPerson+0x18>
    ac92:	      |   tst.l 24(sp)
    ac96:	      +-- bne.s ac9e <makeWalkingPerson+0x18>
    ac98:	      |   clr.w d0
    ac9a:	/-----|-- bra.w ae36 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    ac9e:	|     \-> movea.l 1cae0 <currentFloor>,a0
    aca4:	|         move.l 8(a0),d0
    aca8:	|     /-- bne.s acb0 <makeWalkingPerson+0x2a>
    acaa:	|     |   clr.w d0
    acac:	+-----|-- bra.w ae36 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    acb0:	|     \-> move.l 28(sp),-(sp)
    acb4:	|         jsr a75c <findPerson>
    acba:	|         addq.l #4,sp
    acbc:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    acc0:	|     /-- bne.s acc8 <makeWalkingPerson+0x42>
    acc2:	|     |   clr.w d0
    acc4:	+-----|-- bra.w ae36 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    acc8:	|     \-> movea.l 12(sp),a0
    accc:	|         move.l 68(a0),d0
    acd0:	|     /-- beq.s ace4 <makeWalkingPerson+0x5e>
    acd2:	|     |   movea.l 12(sp),a0
    acd6:	|     |   move.l 68(a0),d0
    acda:	|     |   move.l d0,-(sp)
    acdc:	|     |   jsr 484e <abortFunction>
    ace2:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    ace4:	|     \-> movea.l 12(sp),a0
    ace8:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    acec:	|         movea.l 12(sp),a0
    acf0:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    acf6:	|         movea.l 12(sp),a0
    acfa:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    ad00:	|         movea.l 12(sp),a0
    ad04:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    ad0a:	|         movea.l 12(sp),a0
    ad0e:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    ad14:	|         move.l 24(sp),-(sp)
    ad18:	|         move.l 24(sp),-(sp)
    ad1c:	|         jsr 16600 <inFloor>
    ad22:	|         addq.l #8,sp
    ad24:	|         movea.l 12(sp),a0
    ad28:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    ad2c:	|         movea.l 12(sp),a0
    ad30:	|         move.l 60(a0),d0
    ad34:	|         moveq #-1,d1
    ad36:	|         cmp.l d0,d1
    ad38:	|     /-- bne.s ad68 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ad3a:	|     |   movea.w #60,a0
    ad3e:	|     |   adda.l 12(sp),a0
    ad42:	|     |   moveq #44,d1
    ad44:	|     |   add.l 12(sp),d1
    ad48:	|     |   moveq #40,d0
    ad4a:	|     |   add.l 12(sp),d0
    ad4e:	|     |   move.l a0,-(sp)
    ad50:	|     |   move.l d1,-(sp)
    ad52:	|     |   move.l d0,-(sp)
    ad54:	|     |   jsr a858 <handleClosestPoint>
    ad5a:	|     |   lea 12(sp),sp
    ad5e:	|     |   tst.w d0
    ad60:	|     +-- bne.s ad68 <makeWalkingPerson+0xe2>
    ad62:	|     |   clr.w d0
    ad64:	+-----|-- bra.w ae36 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ad68:	|     \-> movea.l 12(sp),a0
    ad6c:	|         move.l 4(a0),d0
    ad70:	|         move.l d0,-(sp)
    ad72:	|         jsr 17672 <__fixsfsi>
    ad78:	|         addq.l #4,sp
    ad7a:	|         move.l d0,d2
    ad7c:	|         movea.l 12(sp),a0
    ad80:	|         move.l (a0),d0
    ad82:	|         move.l d0,-(sp)
    ad84:	|         jsr 17672 <__fixsfsi>
    ad8a:	|         addq.l #4,sp
    ad8c:	|         move.l d2,-(sp)
    ad8e:	|         move.l d0,-(sp)
    ad90:	|         jsr 16600 <inFloor>
    ad96:	|         addq.l #8,sp
    ad98:	|         movea.l 12(sp),a0
    ad9c:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    ada0:	|         movea.l 12(sp),a0
    ada4:	|         move.l 56(a0),d0
    ada8:	|         moveq #-1,d1
    adaa:	|         cmp.l d0,d1
    adac:	|     /-- bne.s adfe <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    adae:	|     |   movea.l 12(sp),a0
    adb2:	|     |   move.l (a0),d0
    adb4:	|     |   move.l d0,-(sp)
    adb6:	|     |   jsr 17672 <__fixsfsi>
    adbc:	|     |   addq.l #4,sp
    adbe:	|     |   move.l d0,8(sp)
    adc2:	|     |   movea.l 12(sp),a0
    adc6:	|     |   move.l 4(a0),d0
    adca:	|     |   move.l d0,-(sp)
    adcc:	|     |   jsr 17672 <__fixsfsi>
    add2:	|     |   addq.l #4,sp
    add4:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    add8:	|     |   moveq #56,d0
    adda:	|     |   add.l 12(sp),d0
    adde:	|     |   move.l d0,-(sp)
    ade0:	|     |   lea 8(sp),a0
    ade4:	|     |   move.l a0,-(sp)
    ade6:	|     |   moveq #16,d0
    ade8:	|     |   add.l sp,d0
    adea:	|     |   move.l d0,-(sp)
    adec:	|     |   jsr a858 <handleClosestPoint>
    adf2:	|     |   lea 12(sp),sp
    adf6:	|     |   tst.w d0
    adf8:	|     +-- bne.s adfe <makeWalkingPerson+0x178>
    adfa:	|     |   clr.w d0
    adfc:	+-----|-- bra.s ae36 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    adfe:	|     \-> move.l 12(sp),-(sp)
    ae02:	|         jsr 9abe <doBorderStuff>
    ae08:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    ae0a:	|         clr.l -(sp)
    ae0c:	|         move.l 16(sp),-(sp)
    ae10:	|         jsr c01e <walkMe>
    ae16:	|         addq.l #8,sp
    ae18:	|         tst.w d0
    ae1a:	|     /-- bne.s ae26 <makeWalkingPerson+0x1a0>
    ae1c:	|     |   movea.l 12(sp),a0
    ae20:	|     |   move.w 66(a0),d0
    ae24:	|  /--|-- beq.s ae34 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    ae26:	|  |  \-> movea.l 12(sp),a0
    ae2a:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ae30:	|  |      moveq #1,d0
    ae32:	+--|----- bra.s ae36 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    ae34:	|  \----> clr.w d0
	}
}
    ae36:	\-------> move.l (sp)+,d2
    ae38:	          lea 12(sp),sp
    ae3c:	          rts

0000ae3e <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ae3e:	       lea -16(sp),sp
    ae42:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ae44:	       moveq #12,d0
    ae46:	       move.l d0,16(sp)
    ae4a:	       clr.l 12(sp)
    ae4e:	       move.l 1c9c4 <SysBase>,d0
    ae54:	       movea.l d0,a6
    ae56:	       move.l 16(sp),d0
    ae5a:	       move.l 12(sp),d1
    ae5e:	       jsr -684(a6)
    ae62:	       move.l d0,8(sp)
    ae66:	       move.l 8(sp),d0
    ae6a:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ae6e:	   /-- bne.s ae82 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ae70:	   |   pea 19207 <PutChar+0x1495>
    ae76:	   |   jsr 1729e <KPrintF>
    ae7c:	   |   addq.l #4,sp
        return NULL;    
    ae7e:	   |   moveq #0,d0
    ae80:	/--|-- bra.s ae9c <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ae82:	|  \-> movea.l 4(sp),a0
    ae86:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    ae88:	|      movea.l 4(sp),a0
    ae8c:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    ae90:	|      movea.l 4(sp),a0
    ae94:	|      clr.l 4(a0)
	return newAnim;
    ae98:	|      move.l 4(sp),d0
}
    ae9c:	\----> movea.l (sp)+,a6
    ae9e:	       lea 16(sp),sp
    aea2:	       rts

0000aea4 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    aea4:	    move.l d2,-(sp)
	me->x = x;
    aea6:	    movea.l 8(sp),a0
    aeaa:	    move.l 12(sp),(a0)
	me->y = y;
    aeae:	    movea.l 8(sp),a0
    aeb2:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    aeb8:	    movea.l 8(sp),a0
    aebc:	    clr.l 8(a0)
	me->oldy = 0;
    aec0:	    movea.l 8(sp),a0
    aec4:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    aec8:	    movea.l 8(sp),a0
    aecc:	    move.l 118(a0),d0
    aed0:	    moveq #2,d1
    aed2:	    and.l d1,d0
    aed4:	/-- bne.s af2c <moveAndScale+0x88>
    aed6:	|   move.w 1c358 <scaleDivide>,d0
    aedc:	+-- beq.s af2c <moveAndScale+0x88>
    aede:	|   movea.l 8(sp),a0
    aee2:	|   move.l 4(a0),d2
    aee6:	|   move.w 1c356 <scaleHorizon>,d0
    aeec:	|   movea.w d0,a0
    aeee:	|   move.l a0,-(sp)
    aef0:	|   jsr 176da <__floatsisf>
    aef6:	|   addq.l #4,sp
    aef8:	|   move.l d0,-(sp)
    aefa:	|   move.l d2,-(sp)
    aefc:	|   jsr 179ce <__subsf3>
    af02:	|   addq.l #8,sp
    af04:	|   move.l d0,d2
    af06:	|   move.w 1c358 <scaleDivide>,d0
    af0c:	|   movea.w d0,a0
    af0e:	|   move.l a0,-(sp)
    af10:	|   jsr 176da <__floatsisf>
    af16:	|   addq.l #4,sp
    af18:	|   move.l d0,-(sp)
    af1a:	|   move.l d2,-(sp)
    af1c:	|   jsr 17586 <__divsf3>
    af22:	|   addq.l #8,sp
    af24:	|   movea.l 8(sp),a0
    af28:	|   move.l d0,32(a0)
}
    af2c:	\-> nop
    af2e:	    move.l (sp)+,d2
    af30:	    rts

0000af32 <removeOneCharacter>:

void removeOneCharacter (int i) {
    af32:	          lea -16(sp),sp
    af36:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    af38:	          move.l 24(sp),-(sp)
    af3c:	          jsr a75c <findPerson>
    af42:	          addq.l #4,sp
    af44:	          move.l d0,8(sp)

    if (p) {
    af48:	/-------- beq.w b028 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    af4c:	|         move.l 1cad8 <overRegion>,d0
    af52:	|         cmpi.l #117292,d0
    af58:	|     /-- bne.s af76 <removeOneCharacter+0x44>
    af5a:	|     |   movea.l 1cad8 <overRegion>,a0
    af60:	|     |   move.l 28(a0),d1
    af64:	|     |   movea.l 8(sp),a0
    af68:	|     |   move.l 114(a0),d0
    af6c:	|     |   cmp.l d1,d0
    af6e:	|     +-- bne.s af76 <removeOneCharacter+0x44>
            overRegion = NULL;
    af70:	|     |   clr.l 1cad8 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    af76:	|     \-> movea.l 8(sp),a0
    af7a:	|         move.l 68(a0),d0
    af7e:	|     /-- beq.s af92 <removeOneCharacter+0x60>
    af80:	|     |   movea.l 8(sp),a0
    af84:	|     |   move.l 68(a0),d0
    af88:	|     |   move.l d0,-(sp)
    af8a:	|     |   jsr 484e <abortFunction>
    af90:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    af92:	|     \-> movea.l 8(sp),a0
    af96:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    af9a:	|         clr.l 12(sp)
    af9e:	|     /-- bra.s afc6 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    afa0:	|  /--|-> movea.l 8(sp),a0
    afa4:	|  |  |   movea.l 80(a0),a0
    afa8:	|  |  |   move.l (a0),d1
    afaa:	|  |  |   move.l 12(sp),d0
    afae:	|  |  |   add.l d0,d0
    afb0:	|  |  |   add.l d0,d0
    afb2:	|  |  |   movea.l d1,a0
    afb4:	|  |  |   adda.l d0,a0
    afb6:	|  |  |   move.l (a0),d0
    afb8:	|  |  |   move.l d0,-(sp)
    afba:	|  |  |   jsr 9a3a <deleteAnim>
    afc0:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    afc2:	|  |  |   addq.l #1,12(sp)
    afc6:	|  |  \-> moveq #2,d0
    afc8:	|  |      cmp.l 12(sp),d0
    afcc:	|  \----- bge.s afa0 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    afce:	|         move.l #117288,16(sp)
    afd6:	|     /-- bra.s afe6 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    afd8:	|  /--|-> movea.l 16(sp),a0
    afdc:	|  |  |   move.l (a0),d0
    afde:	|  |  |   moveq #36,d1
    afe0:	|  |  |   add.l d0,d1
    afe2:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    afe6:	|  |  \-> movea.l 16(sp),a0
    afea:	|  |      move.l (a0),d0
    afec:	|  |      cmp.l 8(sp),d0
    aff0:	|  \----- bne.s afd8 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    aff2:	|         movea.l 8(sp),a0
    aff6:	|         move.l 36(a0),d0
    affa:	|         movea.l 16(sp),a0
    affe:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b000:	|         movea.l 8(sp),a0
    b004:	|         move.l 114(a0),d0
    b008:	|         move.l d0,-(sp)
    b00a:	|         jsr d976 <removeObjectType>
    b010:	|         addq.l #4,sp
        FreeVec(p);
    b012:	|         move.l 8(sp),4(sp)
    b018:	|         move.l 1c9c4 <SysBase>,d0
    b01e:	|         movea.l d0,a6
    b020:	|         movea.l 4(sp),a1
    b024:	|         jsr -690(a6)
    }
}
    b028:	\-------> nop
    b02a:	          movea.l (sp)+,a6
    b02c:	          lea 16(sp),sp
    b030:	          rts

0000b032 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b032:	       subq.l #8,sp
    b034:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b036:	       movea.l 16(sp),a0
    b03a:	       movea.l 80(a0),a0
    b03e:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b044:	       movea.l 16(sp),a0
    b048:	       move.l 92(a0),d2
    b04c:	       move.l 4(sp),-(sp)
    b050:	       pea b4 <_start+0xb4>
    b054:	       jsr 17cda <__divsi3>
    b05a:	       addq.l #8,sp
    b05c:	       add.l d2,d0
    b05e:	       move.l d0,d1
    b060:	       addi.l #180,d1
    b066:	       movea.l 16(sp),a0
    b06a:	       move.l 100(a0),d0
    b06e:	       move.l d1,d2
    b070:	       add.l d0,d2
    b072:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b076:	   /-- bra.s b080 <rethinkAngle+0x4e>
    b078:	/--|-> addi.l #-360,8(sp)
    b080:	|  \-> cmpi.l #359,8(sp)
    b088:	\----- bgt.s b078 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b08a:	       move.l 4(sp),-(sp)
    b08e:	       move.l 12(sp),-(sp)
    b092:	       jsr 17c5c <__mulsi3>
    b098:	       addq.l #8,sp
    b09a:	       pea 168 <decodeFilename+0x50>
    b09e:	       move.l d0,-(sp)
    b0a0:	       jsr 17cda <__divsi3>
    b0a6:	       addq.l #8,sp
    b0a8:	       movea.l 16(sp),a0
    b0ac:	       move.l d0,106(a0)
}
    b0b0:	       nop
    b0b2:	       move.l (sp)+,d2
    b0b4:	       addq.l #8,sp
    b0b6:	       rts

0000b0b8 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b0b8:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b0ba:	          movea.l 8(sp),a0
    b0be:	          move.l 8(a0),d0
    b0c2:	          move.l 12(sp),-(sp)
    b0c6:	          move.l d0,-(sp)
    b0c8:	          jsr 8d0 <put2bytes>
    b0ce:	          addq.l #8,sp
	if (p -> numFrames) {
    b0d0:	          movea.l 8(sp),a0
    b0d4:	          move.l 8(a0),d0
    b0d8:	/-------- beq.w b17c <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b0dc:	|         movea.l 8(sp),a0
    b0e0:	|         movea.l (a0),a0
    b0e2:	|         move.l (a0),d0
    b0e4:	|         move.l 12(sp),-(sp)
    b0e8:	|         move.l d0,-(sp)
    b0ea:	|         jsr 958 <put4bytes>
    b0f0:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b0f2:	|         clr.l (sp)
    b0f4:	|     /-- bra.s b16e <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b0f6:	|  /--|-> movea.l 8(sp),a0
    b0fa:	|  |  |   movea.l 4(a0),a0
    b0fe:	|  |  |   move.l (sp),d1
    b100:	|  |  |   move.l d1,d0
    b102:	|  |  |   add.l d0,d0
    b104:	|  |  |   add.l d1,d0
    b106:	|  |  |   add.l d0,d0
    b108:	|  |  |   add.l d0,d0
    b10a:	|  |  |   adda.l d0,a0
    b10c:	|  |  |   move.l (a0),d0
    b10e:	|  |  |   move.l 12(sp),-(sp)
    b112:	|  |  |   move.l d0,-(sp)
    b114:	|  |  |   jsr 958 <put4bytes>
    b11a:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b11c:	|  |  |   movea.l 8(sp),a0
    b120:	|  |  |   movea.l 4(a0),a0
    b124:	|  |  |   move.l (sp),d1
    b126:	|  |  |   move.l d1,d0
    b128:	|  |  |   add.l d0,d0
    b12a:	|  |  |   add.l d1,d0
    b12c:	|  |  |   add.l d0,d0
    b12e:	|  |  |   add.l d0,d0
    b130:	|  |  |   adda.l d0,a0
    b132:	|  |  |   move.l 4(a0),d0
    b136:	|  |  |   move.l 12(sp),-(sp)
    b13a:	|  |  |   move.l d0,-(sp)
    b13c:	|  |  |   jsr 958 <put4bytes>
    b142:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b144:	|  |  |   movea.l 8(sp),a0
    b148:	|  |  |   movea.l 4(a0),a0
    b14c:	|  |  |   move.l (sp),d1
    b14e:	|  |  |   move.l d1,d0
    b150:	|  |  |   add.l d0,d0
    b152:	|  |  |   add.l d1,d0
    b154:	|  |  |   add.l d0,d0
    b156:	|  |  |   add.l d0,d0
    b158:	|  |  |   adda.l d0,a0
    b15a:	|  |  |   move.l 8(a0),d0
    b15e:	|  |  |   move.l 12(sp),-(sp)
    b162:	|  |  |   move.l d0,-(sp)
    b164:	|  |  |   jsr 958 <put4bytes>
    b16a:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b16c:	|  |  |   addq.l #1,(sp)
    b16e:	|  |  \-> movea.l 8(sp),a0
    b172:	|  |      move.l 8(a0),d0
    b176:	|  |      cmp.l (sp),d0
    b178:	|  \----- bgt.w b0f6 <saveAnim+0x3e>
		}
	}
	return TRUE;
    b17c:	\-------> moveq #1,d0
}
    b17e:	          addq.l #4,sp
    b180:	          rts

0000b182 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b182:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b184:	             movea.l 8(sp),a0
    b188:	             move.l 4(a0),d0
    b18c:	             move.l 12(sp),-(sp)
    b190:	             move.l d0,-(sp)
    b192:	             jsr 8d0 <put2bytes>
    b198:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b19a:	             clr.l (sp)
    b19c:	   /-------- bra.s b1c8 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b19e:	/--|-------> movea.l 8(sp),a0
    b1a2:	|  |         move.l (a0),d1
    b1a4:	|  |         move.l (sp),d0
    b1a6:	|  |         add.l d0,d0
    b1a8:	|  |         add.l d0,d0
    b1aa:	|  |         movea.l d1,a0
    b1ac:	|  |         adda.l d0,a0
    b1ae:	|  |         move.l (a0),d0
    b1b0:	|  |         move.l 12(sp),-(sp)
    b1b4:	|  |         move.l d0,-(sp)
    b1b6:	|  |         jsr b0b8 <saveAnim>
    b1bc:	|  |         addq.l #8,sp
    b1be:	|  |         tst.w d0
    b1c0:	|  |     /-- bne.s b1c6 <saveCostume+0x44>
    b1c2:	|  |     |   clr.w d0
    b1c4:	|  |  /--|-- bra.s b1dc <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b1c6:	|  |  |  \-> addq.l #1,(sp)
    b1c8:	|  \--|----> movea.l 8(sp),a0
    b1cc:	|     |      move.l 4(a0),d1
    b1d0:	|     |      move.l d1,d0
    b1d2:	|     |      add.l d0,d0
    b1d4:	|     |      add.l d1,d0
    b1d6:	|     |      cmp.l (sp),d0
    b1d8:	\-----|----- bgt.s b19e <saveCostume+0x1c>
	}

	return TRUE;
    b1da:	      |      moveq #1,d0
}
    b1dc:	      \----> addq.l #4,sp
    b1de:	             rts

0000b1e0 <savePeople>:

BOOL savePeople (BPTR fp) {
    b1e0:	             lea -144(sp),sp
    b1e4:	             move.l a6,-(sp)
    b1e6:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b1e8:	             move.l 1ca28 <allPeople>,148(sp)
	int countPeople = 0, a;
    b1f0:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b1f4:	             move.w 1c356 <scaleHorizon>,d0
    b1fa:	             movea.w d0,a0
    b1fc:	             move.l 156(sp),-(sp)
    b200:	             move.l a0,-(sp)
    b202:	             jsr a9c <putSigned>
    b208:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b20a:	             move.w 1c358 <scaleDivide>,d0
    b210:	             movea.w d0,a0
    b212:	             move.l 156(sp),-(sp)
    b216:	             move.l a0,-(sp)
    b218:	             jsr a9c <putSigned>
    b21e:	             addq.l #8,sp

	while (me) {
    b220:	         /-- bra.s b230 <savePeople+0x50>
		countPeople ++;
    b222:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    b226:	      |  |   movea.l 148(sp),a0
    b22a:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b230:	      |  \-> tst.l 148(sp)
    b234:	      \----- bne.s b222 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b236:	             move.l 156(sp),-(sp)
    b23a:	             move.l 148(sp),-(sp)
    b23e:	             jsr 8d0 <put2bytes>
    b244:	             addq.l #8,sp

	me = allPeople;
    b246:	             move.l 1ca28 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b24e:	             clr.l 140(sp)
    b252:	   /-------- bra.w b6aa <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b256:	/--|-------> movea.l 148(sp),a0
    b25a:	|  |         move.l (a0),d0
    b25c:	|  |         move.l 156(sp),-(sp)
    b260:	|  |         move.l d0,-(sp)
    b262:	|  |         jsr a46 <putFloat>
    b268:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b26a:	|  |         movea.l 148(sp),a0
    b26e:	|  |         move.l 4(a0),d0
    b272:	|  |         move.l 156(sp),-(sp)
    b276:	|  |         move.l d0,-(sp)
    b278:	|  |         jsr a46 <putFloat>
    b27e:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b280:	|  |         movea.l 148(sp),a0
    b284:	|  |         move.l 80(a0),d0
    b288:	|  |         move.l 156(sp),-(sp)
    b28c:	|  |         move.l d0,-(sp)
    b28e:	|  |         jsr b182 <saveCostume>
    b294:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b296:	|  |         movea.l 148(sp),a0
    b29a:	|  |         move.l 72(a0),d0
    b29e:	|  |         move.l 156(sp),-(sp)
    b2a2:	|  |         move.l d0,-(sp)
    b2a4:	|  |         jsr b0b8 <saveAnim>
    b2aa:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b2ac:	|  |         move.l 156(sp),136(sp)
    b2b2:	|  |         movea.l 148(sp),a0
    b2b6:	|  |         move.l 72(a0),d1
    b2ba:	|  |         movea.l 148(sp),a0
    b2be:	|  |         move.l 76(a0),d0
    b2c2:	|  |         cmp.l d1,d0
    b2c4:	|  |         seq d0
    b2c6:	|  |         neg.b d0
    b2c8:	|  |         move.b d0,d0
    b2ca:	|  |         andi.l #255,d0
    b2d0:	|  |         move.l d0,132(sp)
    b2d4:	|  |         move.l 1c9cc <DOSBase>,d0
    b2da:	|  |         movea.l d0,a6
    b2dc:	|  |         move.l 136(sp),d1
    b2e0:	|  |         move.l 132(sp),d2
    b2e4:	|  |         jsr -312(a6)
    b2e8:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b2ec:	|  |         movea.l 148(sp),a0
    b2f0:	|  |         move.l 32(a0),d0
    b2f4:	|  |         move.l 156(sp),-(sp)
    b2f8:	|  |         move.l d0,-(sp)
    b2fa:	|  |         jsr a46 <putFloat>
    b300:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b302:	|  |         movea.l 148(sp),a0
    b306:	|  |         move.l 118(a0),d0
    b30a:	|  |         move.l 156(sp),-(sp)
    b30e:	|  |         move.l d0,-(sp)
    b310:	|  |         jsr 8d0 <put2bytes>
    b316:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b318:	|  |         movea.l 148(sp),a0
    b31c:	|  |         move.l 20(a0),d0
    b320:	|  |         move.l 156(sp),-(sp)
    b324:	|  |         move.l d0,-(sp)
    b326:	|  |         jsr 8d0 <put2bytes>
    b32c:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b32e:	|  |         movea.l 148(sp),a0
    b332:	|  |         move.l 40(a0),d0
    b336:	|  |         move.l 156(sp),-(sp)
    b33a:	|  |         move.l d0,-(sp)
    b33c:	|  |         jsr 8d0 <put2bytes>
    b342:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b344:	|  |         movea.l 148(sp),a0
    b348:	|  |         move.l 44(a0),d0
    b34c:	|  |         move.l 156(sp),-(sp)
    b350:	|  |         move.l d0,-(sp)
    b352:	|  |         jsr 8d0 <put2bytes>
    b358:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b35a:	|  |         movea.l 148(sp),a0
    b35e:	|  |         move.l 48(a0),d0
    b362:	|  |         move.l 156(sp),-(sp)
    b366:	|  |         move.l d0,-(sp)
    b368:	|  |         jsr 8d0 <put2bytes>
    b36e:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b370:	|  |         movea.l 148(sp),a0
    b374:	|  |         move.l 52(a0),d0
    b378:	|  |         move.l 156(sp),-(sp)
    b37c:	|  |         move.l d0,-(sp)
    b37e:	|  |         jsr 8d0 <put2bytes>
    b384:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b386:	|  |         movea.l 148(sp),a0
    b38a:	|  |         move.l 84(a0),d0
    b38e:	|  |         move.l 156(sp),-(sp)
    b392:	|  |         move.l d0,-(sp)
    b394:	|  |         jsr 8d0 <put2bytes>
    b39a:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b39c:	|  |         movea.l 148(sp),a0
    b3a0:	|  |         move.l 88(a0),d0
    b3a4:	|  |         move.l 156(sp),-(sp)
    b3a8:	|  |         move.l d0,-(sp)
    b3aa:	|  |         jsr 8d0 <put2bytes>
    b3b0:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b3b2:	|  |         movea.l 148(sp),a0
    b3b6:	|  |         move.l 28(a0),d0
    b3ba:	|  |         move.l 156(sp),-(sp)
    b3be:	|  |         move.l d0,-(sp)
    b3c0:	|  |         jsr 8d0 <put2bytes>
    b3c6:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b3c8:	|  |         movea.l 148(sp),a0
    b3cc:	|  |         move.l 122(a0),d0
    b3d0:	|  |         move.l 156(sp),-(sp)
    b3d4:	|  |         move.l d0,-(sp)
    b3d6:	|  |         jsr 8d0 <put2bytes>
    b3dc:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b3de:	|  |         movea.l 148(sp),a0
    b3e2:	|  |         move.l 24(a0),d0
    b3e6:	|  |         move.l d0,d0
    b3e8:	|  |         movea.w d0,a0
    b3ea:	|  |         move.l 156(sp),-(sp)
    b3ee:	|  |         move.l a0,-(sp)
    b3f0:	|  |         jsr a9c <putSigned>
    b3f6:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b3f8:	|  |         move.l 156(sp),124(sp)
    b3fe:	|  |         movea.l 148(sp),a0
    b402:	|  |         move.w 104(a0),d0
    b406:	|  |         movea.w d0,a0
    b408:	|  |         move.l a0,120(sp)
    b40c:	|  |         move.l 1c9cc <DOSBase>,d0
    b412:	|  |         movea.l d0,a6
    b414:	|  |         move.l 124(sp),d1
    b418:	|  |         move.l 120(sp),d2
    b41c:	|  |         jsr -312(a6)
    b420:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b424:	|  |         move.l 156(sp),112(sp)
    b42a:	|  |         movea.l 148(sp),a0
    b42e:	|  |         move.w 64(a0),d0
    b432:	|  |         movea.w d0,a0
    b434:	|  |         move.l a0,108(sp)
    b438:	|  |         move.l 1c9cc <DOSBase>,d0
    b43e:	|  |         movea.l d0,a6
    b440:	|  |         move.l 112(sp),d1
    b444:	|  |         move.l 108(sp),d2
    b448:	|  |         jsr -312(a6)
    b44c:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b450:	|  |         move.l 156(sp),100(sp)
    b456:	|  |         movea.l 148(sp),a0
    b45a:	|  |         move.w 66(a0),d0
    b45e:	|  |         movea.w d0,a0
    b460:	|  |         move.l a0,96(sp)
    b464:	|  |         move.l 1c9cc <DOSBase>,d0
    b46a:	|  |         movea.l d0,a6
    b46c:	|  |         move.l 100(sp),d1
    b470:	|  |         move.l 96(sp),d2
    b474:	|  |         jsr -312(a6)
    b478:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b47c:	|  |         movea.l 148(sp),a0
    b480:	|  |         move.l 68(a0),d0
    b484:	|  |  /----- beq.s b4c2 <savePeople+0x2e2>
			FPutC (fp, 1);
    b486:	|  |  |      move.l 156(sp),76(sp)
    b48c:	|  |  |      moveq #1,d0
    b48e:	|  |  |      move.l d0,72(sp)
    b492:	|  |  |      move.l 1c9cc <DOSBase>,d0
    b498:	|  |  |      movea.l d0,a6
    b49a:	|  |  |      move.l 76(sp),d1
    b49e:	|  |  |      move.l 72(sp),d2
    b4a2:	|  |  |      jsr -312(a6)
    b4a6:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b4aa:	|  |  |      movea.l 148(sp),a0
    b4ae:	|  |  |      move.l 68(a0),d0
    b4b2:	|  |  |      move.l 156(sp),-(sp)
    b4b6:	|  |  |      move.l d0,-(sp)
    b4b8:	|  |  |      jsr c658 <saveFunction>
    b4be:	|  |  |      addq.l #8,sp
    b4c0:	|  |  |  /-- bra.s b4e6 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b4c2:	|  |  \--|-> move.l 156(sp),88(sp)
    b4c8:	|  |     |   moveq #1,d0
    b4ca:	|  |     |   move.l d0,84(sp)
    b4ce:	|  |     |   move.l 1c9cc <DOSBase>,d0
    b4d4:	|  |     |   movea.l d0,a6
    b4d6:	|  |     |   move.l 88(sp),d1
    b4da:	|  |     |   move.l 84(sp),d2
    b4de:	|  |     |   jsr -312(a6)
    b4e2:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b4e6:	|  |     \-> movea.l 148(sp),a0
    b4ea:	|  |         move.l 106(a0),d0
    b4ee:	|  |         move.l 156(sp),-(sp)
    b4f2:	|  |         move.l d0,-(sp)
    b4f4:	|  |         jsr 8d0 <put2bytes>
    b4fa:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b4fc:	|  |         movea.l 148(sp),a0
    b500:	|  |         move.l 92(a0),d0
    b504:	|  |         move.l 156(sp),-(sp)
    b508:	|  |         move.l d0,-(sp)
    b50a:	|  |         jsr 8d0 <put2bytes>
    b510:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b512:	|  |         movea.l 148(sp),a0
    b516:	|  |         move.l 100(a0),d0
    b51a:	|  |         move.l 156(sp),-(sp)
    b51e:	|  |         move.l d0,-(sp)
    b520:	|  |         jsr 8d0 <put2bytes>
    b526:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b528:	|  |         movea.l 148(sp),a0
    b52c:	|  |         move.l 96(a0),d0
    b530:	|  |         move.l 156(sp),-(sp)
    b534:	|  |         move.l d0,-(sp)
    b536:	|  |         jsr 8d0 <put2bytes>
    b53c:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b53e:	|  |         movea.l 148(sp),a0
    b542:	|  |         move.l 110(a0),d0
    b546:	|  |         move.l d0,d0
    b548:	|  |         movea.w d0,a0
    b54a:	|  |         move.l 156(sp),-(sp)
    b54e:	|  |         move.l a0,-(sp)
    b550:	|  |         jsr a9c <putSigned>
    b556:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b558:	|  |         movea.l 148(sp),a0
    b55c:	|  |         move.l 56(a0),d0
    b560:	|  |         move.l d0,d0
    b562:	|  |         movea.w d0,a0
    b564:	|  |         move.l 156(sp),-(sp)
    b568:	|  |         move.l a0,-(sp)
    b56a:	|  |         jsr a9c <putSigned>
    b570:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b572:	|  |         movea.l 148(sp),a0
    b576:	|  |         move.l 60(a0),d0
    b57a:	|  |         move.l d0,d0
    b57c:	|  |         movea.w d0,a0
    b57e:	|  |         move.l 156(sp),-(sp)
    b582:	|  |         move.l a0,-(sp)
    b584:	|  |         jsr a9c <putSigned>
    b58a:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b58c:	|  |         move.l 156(sp),64(sp)
    b592:	|  |         movea.l 148(sp),a0
    b596:	|  |         move.b 126(a0),d0
    b59a:	|  |         move.b d0,d0
    b59c:	|  |         andi.l #255,d0
    b5a2:	|  |         move.l d0,60(sp)
    b5a6:	|  |         move.l 1c9cc <DOSBase>,d0
    b5ac:	|  |         movea.l d0,a6
    b5ae:	|  |         move.l 64(sp),d1
    b5b2:	|  |         move.l 60(sp),d2
    b5b6:	|  |         jsr -312(a6)
    b5ba:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b5be:	|  |         move.l 156(sp),52(sp)
    b5c4:	|  |         movea.l 148(sp),a0
    b5c8:	|  |         move.b 127(a0),d0
    b5cc:	|  |         move.b d0,d0
    b5ce:	|  |         andi.l #255,d0
    b5d4:	|  |         move.l d0,48(sp)
    b5d8:	|  |         move.l 1c9cc <DOSBase>,d0
    b5de:	|  |         movea.l d0,a6
    b5e0:	|  |         move.l 52(sp),d1
    b5e4:	|  |         move.l 48(sp),d2
    b5e8:	|  |         jsr -312(a6)
    b5ec:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b5f0:	|  |         move.l 156(sp),40(sp)
    b5f6:	|  |         movea.l 148(sp),a0
    b5fa:	|  |         move.b 128(a0),d0
    b5fe:	|  |         move.b d0,d0
    b600:	|  |         andi.l #255,d0
    b606:	|  |         move.l d0,36(sp)
    b60a:	|  |         move.l 1c9cc <DOSBase>,d0
    b610:	|  |         movea.l d0,a6
    b612:	|  |         move.l 40(sp),d1
    b616:	|  |         move.l 36(sp),d2
    b61a:	|  |         jsr -312(a6)
    b61e:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b622:	|  |         move.l 156(sp),28(sp)
    b628:	|  |         movea.l 148(sp),a0
    b62c:	|  |         move.b 129(a0),d0
    b630:	|  |         move.b d0,d0
    b632:	|  |         andi.l #255,d0
    b638:	|  |         move.l d0,24(sp)
    b63c:	|  |         move.l 1c9cc <DOSBase>,d0
    b642:	|  |         movea.l d0,a6
    b644:	|  |         move.l 28(sp),d1
    b648:	|  |         move.l 24(sp),d2
    b64c:	|  |         jsr -312(a6)
    b650:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b654:	|  |         move.l 156(sp),16(sp)
    b65a:	|  |         movea.l 148(sp),a0
    b65e:	|  |         move.b 130(a0),d0
    b662:	|  |         move.b d0,d0
    b664:	|  |         andi.l #255,d0
    b66a:	|  |         move.l d0,12(sp)
    b66e:	|  |         move.l 1c9cc <DOSBase>,d0
    b674:	|  |         movea.l d0,a6
    b676:	|  |         move.l 16(sp),d1
    b67a:	|  |         move.l 12(sp),d2
    b67e:	|  |         jsr -312(a6)
    b682:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b686:	|  |         movea.l 148(sp),a0
    b68a:	|  |         move.l 114(a0),d0
    b68e:	|  |         move.l 156(sp),-(sp)
    b692:	|  |         move.l d0,-(sp)
    b694:	|  |         jsr da16 <saveObjectRef>
    b69a:	|  |         addq.l #8,sp

		me = me -> next;
    b69c:	|  |         movea.l 148(sp),a0
    b6a0:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b6a6:	|  |         addq.l #1,140(sp)
    b6aa:	|  \-------> movea.l 140(sp),a0
    b6ae:	|            cmpa.l 144(sp),a0
    b6b2:	\----------- blt.w b256 <savePeople+0x76>
	}
	return TRUE;
    b6b6:	             moveq #1,d0
}
    b6b8:	             move.l (sp)+,d2
    b6ba:	             movea.l (sp)+,a6
    b6bc:	             lea 144(sp),sp
    b6c0:	             rts

0000b6c2 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b6c2:	movea.l 4(sp),a0
    b6c6:	move.l 8(sp),(a0)
}
    b6ca:	nop
    b6cc:	rts

0000b6ce <setDrawMode>:


void setDrawMode (int h, int ob) {
    b6ce:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b6d0:	       move.l 12(sp),-(sp)
    b6d4:	       jsr a75c <findPerson>
    b6da:	       addq.l #4,sp
    b6dc:	       move.l d0,(sp)
	if (! moveMe) return;
    b6de:	/----- beq.s b6f2 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b6e0:	|      move.l 8(sp),-(sp)
    b6e4:	|      move.l 4(sp),-(sp)
    b6e8:	|      jsr b6f8 <setMyDrawMode>
    b6ee:	|      addq.l #8,sp
    b6f0:	|  /-- bra.s b6f4 <setDrawMode+0x26>
	if (! moveMe) return;
    b6f2:	\--|-> nop
}
    b6f4:	   \-> addq.l #4,sp
    b6f6:	       rts

0000b6f8 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b6f8:	       moveq #19,d0
    b6fa:	       cmp.l 8(sp),d0
    b6fe:	/----- bcs.w bbd6 <setMyDrawMode+0x4de>
    b702:	|      move.l 8(sp),d0
    b706:	|      add.l d0,d0
    b708:	|      movea.l d0,a0
    b70a:	|      adda.l #46870,a0
    b710:	|      move.w (a0),d0
    b712:	|      jmp (b716 <setMyDrawMode+0x1e>,pc,d0.w)
    b716:	|      .short 0x04c0
    b718:	|      ori.l #6684712,-(a4)
    b71e:	|      btst d0,-(a0)
    b720:	|      bchg d0,(a6)+
    b722:	|      bclr d0,(a4)+
    b724:	|      bset d0,(a2)+
    b726:	|      andi.b #84,(a6)
    b72a:	|      andi.l #55575312,(a2)
    b730:	|      .short 0x02d0
    b732:	|      bclr d1,(a0)
    b734:	|      .short 0x044a
    b736:	|      .short 0x040c
    b738:	|      movep.l d1,1158(a6)
    b73c:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b73e:	|      movea.l 4(sp),a0
    b742:	|      clr.b 128(a0)
    b746:	|      movea.l 4(sp),a0
    b74a:	|      move.b 128(a0),d0
    b74e:	|      movea.l 4(sp),a0
    b752:	|      move.b d0,127(a0)
    b756:	|      movea.l 4(sp),a0
    b75a:	|      move.b 127(a0),d0
    b75e:	|      movea.l 4(sp),a0
    b762:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b766:	|      movea.l 4(sp),a0
    b76a:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b76e:	|      movea.l 4(sp),a0
    b772:	|      move.b #64,130(a0)
			break;
    b778:	|  /-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b77c:	|  |   movea.l 4(sp),a0
    b780:	|  |   clr.b 128(a0)
    b784:	|  |   movea.l 4(sp),a0
    b788:	|  |   move.b 128(a0),d0
    b78c:	|  |   movea.l 4(sp),a0
    b790:	|  |   move.b d0,127(a0)
    b794:	|  |   movea.l 4(sp),a0
    b798:	|  |   move.b 127(a0),d0
    b79c:	|  |   movea.l 4(sp),a0
    b7a0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b7a4:	|  |   movea.l 4(sp),a0
    b7a8:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b7ac:	|  |   movea.l 4(sp),a0
    b7b0:	|  |   move.b #-128,130(a0)
			break;
    b7b6:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7ba:	|  |   movea.l 4(sp),a0
    b7be:	|  |   clr.b 128(a0)
    b7c2:	|  |   movea.l 4(sp),a0
    b7c6:	|  |   move.b 128(a0),d0
    b7ca:	|  |   movea.l 4(sp),a0
    b7ce:	|  |   move.b d0,127(a0)
    b7d2:	|  |   movea.l 4(sp),a0
    b7d6:	|  |   move.b 127(a0),d0
    b7da:	|  |   movea.l 4(sp),a0
    b7de:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b7e2:	|  |   movea.l 4(sp),a0
    b7e6:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b7ea:	|  |   movea.l 4(sp),a0
    b7ee:	|  |   move.b #-64,130(a0)
			break;
    b7f4:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7f8:	|  |   movea.l 4(sp),a0
    b7fc:	|  |   clr.b 128(a0)
    b800:	|  |   movea.l 4(sp),a0
    b804:	|  |   move.b 128(a0),d0
    b808:	|  |   movea.l 4(sp),a0
    b80c:	|  |   move.b d0,127(a0)
    b810:	|  |   movea.l 4(sp),a0
    b814:	|  |   move.b 127(a0),d0
    b818:	|  |   movea.l 4(sp),a0
    b81c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b820:	|  |   movea.l 4(sp),a0
    b824:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b828:	|  |   movea.l 4(sp),a0
    b82c:	|  |   move.b #-2,130(a0)
			break;
    b832:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b836:	|  |   movea.l 4(sp),a0
    b83a:	|  |   clr.b 128(a0)
    b83e:	|  |   movea.l 4(sp),a0
    b842:	|  |   move.b 128(a0),d0
    b846:	|  |   movea.l 4(sp),a0
    b84a:	|  |   move.b d0,127(a0)
    b84e:	|  |   movea.l 4(sp),a0
    b852:	|  |   move.b 127(a0),d0
    b856:	|  |   movea.l 4(sp),a0
    b85a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b85e:	|  |   movea.l 4(sp),a0
    b862:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b868:	|  |   movea.l 4(sp),a0
    b86c:	|  |   clr.b 130(a0)
			break;
    b870:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b874:	|  |   movea.l 4(sp),a0
    b878:	|  |   clr.b 128(a0)
    b87c:	|  |   movea.l 4(sp),a0
    b880:	|  |   move.b 128(a0),d0
    b884:	|  |   movea.l 4(sp),a0
    b888:	|  |   move.b d0,127(a0)
    b88c:	|  |   movea.l 4(sp),a0
    b890:	|  |   move.b 127(a0),d0
    b894:	|  |   movea.l 4(sp),a0
    b898:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b89c:	|  |   movea.l 4(sp),a0
    b8a0:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b8a6:	|  |   movea.l 4(sp),a0
    b8aa:	|  |   clr.b 130(a0)
			break;
    b8ae:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8b2:	|  |   movea.l 4(sp),a0
    b8b6:	|  |   clr.b 128(a0)
    b8ba:	|  |   movea.l 4(sp),a0
    b8be:	|  |   move.b 128(a0),d0
    b8c2:	|  |   movea.l 4(sp),a0
    b8c6:	|  |   move.b d0,127(a0)
    b8ca:	|  |   movea.l 4(sp),a0
    b8ce:	|  |   move.b 127(a0),d0
    b8d2:	|  |   movea.l 4(sp),a0
    b8d6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b8da:	|  |   movea.l 4(sp),a0
    b8de:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b8e4:	|  |   movea.l 4(sp),a0
    b8e8:	|  |   clr.b 130(a0)
			break;
    b8ec:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8f0:	|  |   movea.l 4(sp),a0
    b8f4:	|  |   clr.b 128(a0)
    b8f8:	|  |   movea.l 4(sp),a0
    b8fc:	|  |   move.b 128(a0),d0
    b900:	|  |   movea.l 4(sp),a0
    b904:	|  |   move.b d0,127(a0)
    b908:	|  |   movea.l 4(sp),a0
    b90c:	|  |   move.b 127(a0),d0
    b910:	|  |   movea.l 4(sp),a0
    b914:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b918:	|  |   movea.l 4(sp),a0
    b91c:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b920:	|  |   movea.l 4(sp),a0
    b924:	|  |   clr.b 130(a0)
			break;
    b928:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b92c:	|  |   movea.l 4(sp),a0
    b930:	|  |   clr.b 128(a0)
    b934:	|  |   movea.l 4(sp),a0
    b938:	|  |   move.b 128(a0),d0
    b93c:	|  |   movea.l 4(sp),a0
    b940:	|  |   move.b d0,127(a0)
    b944:	|  |   movea.l 4(sp),a0
    b948:	|  |   move.b 127(a0),d0
    b94c:	|  |   movea.l 4(sp),a0
    b950:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b954:	|  |   movea.l 4(sp),a0
    b958:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b95c:	|  |   movea.l 4(sp),a0
    b960:	|  |   move.b #64,130(a0)
			break;
    b966:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b96a:	|  |   movea.l 4(sp),a0
    b96e:	|  |   clr.b 128(a0)
    b972:	|  |   movea.l 4(sp),a0
    b976:	|  |   move.b 128(a0),d0
    b97a:	|  |   movea.l 4(sp),a0
    b97e:	|  |   move.b d0,127(a0)
    b982:	|  |   movea.l 4(sp),a0
    b986:	|  |   move.b 127(a0),d0
    b98a:	|  |   movea.l 4(sp),a0
    b98e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b992:	|  |   movea.l 4(sp),a0
    b996:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b99a:	|  |   movea.l 4(sp),a0
    b99e:	|  |   move.b #-128,130(a0)
			break;
    b9a4:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b9a8:	|  |   movea.l 4(sp),a0
    b9ac:	|  |   clr.b 128(a0)
    b9b0:	|  |   movea.l 4(sp),a0
    b9b4:	|  |   move.b 128(a0),d0
    b9b8:	|  |   movea.l 4(sp),a0
    b9bc:	|  |   move.b d0,127(a0)
    b9c0:	|  |   movea.l 4(sp),a0
    b9c4:	|  |   move.b 127(a0),d0
    b9c8:	|  |   movea.l 4(sp),a0
    b9cc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b9d0:	|  |   movea.l 4(sp),a0
    b9d4:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b9d8:	|  |   movea.l 4(sp),a0
    b9dc:	|  |   move.b #-64,130(a0)
			break;
    b9e2:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b9e6:	|  |   movea.l 4(sp),a0
    b9ea:	|  |   move.b #-128,128(a0)
    b9f0:	|  |   movea.l 4(sp),a0
    b9f4:	|  |   move.b 128(a0),d0
    b9f8:	|  |   movea.l 4(sp),a0
    b9fc:	|  |   move.b d0,127(a0)
    ba00:	|  |   movea.l 4(sp),a0
    ba04:	|  |   move.b 127(a0),d0
    ba08:	|  |   movea.l 4(sp),a0
    ba0c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    ba10:	|  |   movea.l 4(sp),a0
    ba14:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ba1a:	|  |   movea.l 4(sp),a0
    ba1e:	|  |   clr.b 130(a0)
			break;
    ba22:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    ba26:	|  |   movea.l 4(sp),a0
    ba2a:	|  |   move.b #-128,128(a0)
    ba30:	|  |   movea.l 4(sp),a0
    ba34:	|  |   move.b 128(a0),d0
    ba38:	|  |   movea.l 4(sp),a0
    ba3c:	|  |   move.b d0,127(a0)
    ba40:	|  |   movea.l 4(sp),a0
    ba44:	|  |   move.b 127(a0),d0
    ba48:	|  |   movea.l 4(sp),a0
    ba4c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ba50:	|  |   movea.l 4(sp),a0
    ba54:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ba5a:	|  |   movea.l 4(sp),a0
    ba5e:	|  |   clr.b 130(a0)
			break;
    ba62:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    ba66:	|  |   movea.l 4(sp),a0
    ba6a:	|  |   move.b #-128,128(a0)
    ba70:	|  |   movea.l 4(sp),a0
    ba74:	|  |   move.b 128(a0),d0
    ba78:	|  |   movea.l 4(sp),a0
    ba7c:	|  |   move.b d0,127(a0)
    ba80:	|  |   movea.l 4(sp),a0
    ba84:	|  |   move.b 127(a0),d0
    ba88:	|  |   movea.l 4(sp),a0
    ba8c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    ba90:	|  |   movea.l 4(sp),a0
    ba94:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    ba9a:	|  |   movea.l 4(sp),a0
    ba9e:	|  |   clr.b 130(a0)
			break;
    baa2:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    baa6:	|  |   movea.l 4(sp),a0
    baaa:	|  |   move.b #-128,128(a0)
    bab0:	|  |   movea.l 4(sp),a0
    bab4:	|  |   move.b 128(a0),d0
    bab8:	|  |   movea.l 4(sp),a0
    babc:	|  |   move.b d0,127(a0)
    bac0:	|  |   movea.l 4(sp),a0
    bac4:	|  |   move.b 127(a0),d0
    bac8:	|  |   movea.l 4(sp),a0
    bacc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bad0:	|  |   movea.l 4(sp),a0
    bad4:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bad8:	|  |   movea.l 4(sp),a0
    badc:	|  |   clr.b 130(a0)
			break;
    bae0:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bae4:	|  |   movea.l 4(sp),a0
    bae8:	|  |   st 128(a0)
    baec:	|  |   movea.l 4(sp),a0
    baf0:	|  |   move.b 128(a0),d0
    baf4:	|  |   movea.l 4(sp),a0
    baf8:	|  |   move.b d0,127(a0)
    bafc:	|  |   movea.l 4(sp),a0
    bb00:	|  |   move.b 127(a0),d0
    bb04:	|  |   movea.l 4(sp),a0
    bb08:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bb0c:	|  |   movea.l 4(sp),a0
    bb10:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bb16:	|  |   movea.l 4(sp),a0
    bb1a:	|  |   clr.b 130(a0)
			break;
    bb1e:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bb22:	|  |   movea.l 4(sp),a0
    bb26:	|  |   st 128(a0)
    bb2a:	|  |   movea.l 4(sp),a0
    bb2e:	|  |   move.b 128(a0),d0
    bb32:	|  |   movea.l 4(sp),a0
    bb36:	|  |   move.b d0,127(a0)
    bb3a:	|  |   movea.l 4(sp),a0
    bb3e:	|  |   move.b 127(a0),d0
    bb42:	|  |   movea.l 4(sp),a0
    bb46:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bb4a:	|  |   movea.l 4(sp),a0
    bb4e:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bb54:	|  |   movea.l 4(sp),a0
    bb58:	|  |   clr.b 130(a0)
			break;
    bb5c:	|  +-- bra.w bc10 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bb60:	|  |   movea.l 4(sp),a0
    bb64:	|  |   st 128(a0)
    bb68:	|  |   movea.l 4(sp),a0
    bb6c:	|  |   move.b 128(a0),d0
    bb70:	|  |   movea.l 4(sp),a0
    bb74:	|  |   move.b d0,127(a0)
    bb78:	|  |   movea.l 4(sp),a0
    bb7c:	|  |   move.b 127(a0),d0
    bb80:	|  |   movea.l 4(sp),a0
    bb84:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bb88:	|  |   movea.l 4(sp),a0
    bb8c:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bb92:	|  |   movea.l 4(sp),a0
    bb96:	|  |   clr.b 130(a0)
			break;
    bb9a:	|  +-- bra.s bc10 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bb9c:	|  |   movea.l 4(sp),a0
    bba0:	|  |   st 128(a0)
    bba4:	|  |   movea.l 4(sp),a0
    bba8:	|  |   move.b 128(a0),d0
    bbac:	|  |   movea.l 4(sp),a0
    bbb0:	|  |   move.b d0,127(a0)
    bbb4:	|  |   movea.l 4(sp),a0
    bbb8:	|  |   move.b 127(a0),d0
    bbbc:	|  |   movea.l 4(sp),a0
    bbc0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bbc4:	|  |   movea.l 4(sp),a0
    bbc8:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bbcc:	|  |   movea.l 4(sp),a0
    bbd0:	|  |   clr.b 130(a0)
			break;
    bbd4:	|  +-- bra.s bc10 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bbd6:	\--|-> movea.l 4(sp),a0
    bbda:	   |   clr.b 128(a0)
    bbde:	   |   movea.l 4(sp),a0
    bbe2:	   |   move.b 128(a0),d0
    bbe6:	   |   movea.l 4(sp),a0
    bbea:	   |   move.b d0,127(a0)
    bbee:	   |   movea.l 4(sp),a0
    bbf2:	   |   move.b 127(a0),d0
    bbf6:	   |   movea.l 4(sp),a0
    bbfa:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bbfe:	   |   movea.l 4(sp),a0
    bc02:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    bc06:	   |   movea.l 4(sp),a0
    bc0a:	   |   clr.b 130(a0)
			break;
    bc0e:	   |   nop
	}
}
    bc10:	   \-> nop
    bc12:	       rts

0000bc14 <shufflePeople>:

void shufflePeople () {
    bc14:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bc18:	             move.l #117288,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bc20:	             move.l 1ca28 <allPeople>,d0
    bc26:	/----------- beq.w bcfc <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bc2a:	|     /----- bra.w bcec <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bc2e:	|  /--|----> movea.l 16(sp),a0
    bc32:	|  |  |      movea.l (a0),a0
    bc34:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bc3a:	|  |  |      movea.l 16(sp),a0
    bc3e:	|  |  |      movea.l (a0),a0
    bc40:	|  |  |      move.l 118(a0),d0
    bc44:	|  |  |      moveq #1,d1
    bc46:	|  |  |      and.l d1,d0
    bc48:	|  |  |  /-- beq.s bc60 <shufflePeople+0x4c>
    bc4a:	|  |  |  |   move.l #1148846080,-(sp)
    bc50:	|  |  |  |   move.l 16(sp),-(sp)
    bc54:	|  |  |  |   jsr 1748c <__addsf3>
    bc5a:	|  |  |  |   addq.l #8,sp
    bc5c:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bc60:	|  |  |  \-> movea.l 16(sp),a0
    bc64:	|  |  |      movea.l (a0),a0
    bc66:	|  |  |      movea.l 36(a0),a0
    bc6a:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bc70:	|  |  |      movea.l 16(sp),a0
    bc74:	|  |  |      movea.l (a0),a0
    bc76:	|  |  |      movea.l 36(a0),a0
    bc7a:	|  |  |      move.l 118(a0),d0
    bc7e:	|  |  |      moveq #1,d1
    bc80:	|  |  |      and.l d1,d0
    bc82:	|  |  |  /-- beq.s bc9a <shufflePeople+0x86>
    bc84:	|  |  |  |   move.l #1148846080,-(sp)
    bc8a:	|  |  |  |   move.l 12(sp),-(sp)
    bc8e:	|  |  |  |   jsr 1748c <__addsf3>
    bc94:	|  |  |  |   addq.l #8,sp
    bc96:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bc9a:	|  |  |  \-> move.l 8(sp),-(sp)
    bc9e:	|  |  |      move.l 16(sp),-(sp)
    bca2:	|  |  |      jsr 17846 <__gtsf2>
    bca8:	|  |  |      addq.l #8,sp
    bcaa:	|  |  |      tst.l d0
    bcac:	|  |  |  /-- ble.s bcde <shufflePeople+0xca>
			A = (*thisReference);
    bcae:	|  |  |  |   movea.l 16(sp),a0
    bcb2:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bcb6:	|  |  |  |   movea.l 16(sp),a0
    bcba:	|  |  |  |   movea.l (a0),a0
    bcbc:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bcc0:	|  |  |  |   movea.l (sp),a0
    bcc2:	|  |  |  |   move.l 36(a0),d0
    bcc6:	|  |  |  |   movea.l 4(sp),a0
    bcca:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bcce:	|  |  |  |   movea.l (sp),a0
    bcd0:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bcd6:	|  |  |  |   movea.l 16(sp),a0
    bcda:	|  |  |  |   move.l (sp),(a0)
    bcdc:	|  |  +--|-- bra.s bcec <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bcde:	|  |  |  \-> movea.l 16(sp),a0
    bce2:	|  |  |      move.l (a0),d0
    bce4:	|  |  |      moveq #36,d1
    bce6:	|  |  |      add.l d0,d1
    bce8:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bcec:	|  |  \----> movea.l 16(sp),a0
    bcf0:	|  |         movea.l (a0),a0
    bcf2:	|  |         move.l 36(a0),d0
    bcf6:	|  \-------- bne.w bc2e <shufflePeople+0x1a>
    bcfa:	|        /-- bra.s bcfe <shufflePeople+0xea>
	if (!allPeople) return;
    bcfc:	\--------|-> nop
		}
	}
}
    bcfe:	         \-> lea 20(sp),sp
    bd02:	             rts

0000bd04 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bd04:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bd06:	       tst.l 8(sp)
    bd0a:	   /-- bgt.s bd10 <setCharacterWalkSpeed+0xc>
    bd0c:	   |   clr.w d0
    bd0e:	/--|-- bra.s bd2e <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bd10:	|  \-> move.l 12(sp),-(sp)
    bd14:	|      jsr a75c <findPerson>
    bd1a:	|      addq.l #4,sp
    bd1c:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bd1e:	|  /-- bne.s bd24 <setCharacterWalkSpeed+0x20>
    bd20:	|  |   clr.w d0
    bd22:	+--|-- bra.s bd2e <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bd24:	|  \-> movea.l (sp),a0
    bd26:	|      move.l 8(sp),28(a0)
	return TRUE;
    bd2c:	|      moveq #1,d0
}
    bd2e:	\----> addq.l #4,sp
    bd30:	       rts

0000bd32 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bd32:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bd34:	       move.l 8(sp),-(sp)
    bd38:	       jsr a75c <findPerson>
    bd3e:	       addq.l #4,sp
    bd40:	       move.l d0,(sp)
    if (thisPerson) {
    bd42:	/----- beq.s bd62 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bd44:	|      movea.l (sp),a0
    bd46:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bd4c:	|      moveq #2,d0
    bd4e:	|      and.l 12(sp),d0
    bd52:	|  /-- beq.s bd5e <setPersonExtra+0x2c>
    bd54:	|  |   movea.l (sp),a0
    bd56:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bd5e:	|  \-> moveq #1,d0
    bd60:	|  /-- bra.s bd64 <setPersonExtra+0x32>
    }
    return FALSE;
    bd62:	\--|-> clr.w d0
}
    bd64:	   \-> addq.l #4,sp
    bd66:	       rts

0000bd68 <setScale>:


void setScale (short int h, short int d) {
    bd68:	subq.l #4,sp
    bd6a:	move.l 8(sp),d1
    bd6e:	move.l 12(sp),d0
    bd72:	move.w d1,d1
    bd74:	move.w d1,2(sp)
    bd78:	move.w d0,d0
    bd7a:	move.w d0,(sp)
	scaleHorizon = h;
    bd7c:	move.w 2(sp),1c356 <scaleHorizon>
	scaleDivide = d;
    bd84:	move.w (sp),1c358 <scaleDivide>
}
    bd8a:	nop
    bd8c:	addq.l #4,sp
    bd8e:	rts

0000bd90 <setShown>:

void setShown (BOOL h, int ob) {
    bd90:	    subq.l #8,sp
    bd92:	    move.l 12(sp),d0
    bd96:	    move.w d0,d0
    bd98:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bd9c:	    move.l 16(sp),-(sp)
    bda0:	    jsr a75c <findPerson>
    bda6:	    addq.l #4,sp
    bda8:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bdac:	/-- beq.s bdb8 <setShown+0x28>
    bdae:	|   movea.l 4(sp),a0
    bdb2:	|   move.w 2(sp),104(a0)
}
    bdb8:	\-> nop
    bdba:	    addq.l #8,sp
    bdbc:	    rts

0000bdbe <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bdbe:	       subq.l #8,sp
    bdc0:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bdc2:	       movea.l 16(sp),a0
    bdc6:	       move.l 92(a0),d0
    bdca:	       move.l d0,d1
    bdcc:	       addi.l #360,d1
    bdd2:	       movea.l 16(sp),a0
    bdd6:	       move.l 96(a0),d0
    bdda:	       move.l d1,d2
    bddc:	       sub.l d0,d2
    bdde:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bde2:	       movea.l 16(sp),a0
    bde6:	       move.l 122(a0),d0
    bdea:	   /-- beq.s bdf6 <spinStep+0x38>
    bdec:	   |   movea.l 16(sp),a0
    bdf0:	   |   move.l 122(a0),d0
    bdf4:	/--|-- bra.s be10 <spinStep+0x52>
    bdf6:	|  \-> movea.l 16(sp),a0
    bdfa:	|      movea.l 80(a0),a0
    bdfe:	|      move.l 4(a0),d0
    be02:	|      move.l d0,-(sp)
    be04:	|      pea 168 <decodeFilename+0x50>
    be08:	|      jsr 17cda <__divsi3>
    be0e:	|      addq.l #8,sp
    be10:	\----> move.l d0,4(sp)
	while (diff > 180) {
    be14:	   /-- bra.s be1e <spinStep+0x60>
		diff -= 360;
    be16:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    be1e:	|  \-> cmpi.l #180,8(sp)
    be26:	\----- bgt.s be16 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    be28:	       move.l 8(sp),d0
    be2c:	       cmp.l 4(sp),d0
    be30:	   /-- blt.s be4e <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    be32:	   |   movea.l 16(sp),a0
    be36:	   |   move.l 92(a0),d0
    be3a:	   |   sub.l 4(sp),d0
    be3e:	   |   move.l d0,-(sp)
    be40:	   |   move.l 20(sp),-(sp)
    be44:	   |   jsr bf2e <turnMeAngle>
    be4a:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    be4c:	/--|-- bra.s be94 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    be4e:	|  \-> move.l 4(sp),d0
    be52:	|      neg.l d0
    be54:	|      cmp.l 8(sp),d0
    be58:	|  /-- blt.s be76 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    be5a:	|  |   movea.l 16(sp),a0
    be5e:	|  |   move.l 92(a0),d0
    be62:	|  |   add.l 4(sp),d0
    be66:	|  |   move.l d0,-(sp)
    be68:	|  |   move.l 20(sp),-(sp)
    be6c:	|  |   jsr bf2e <turnMeAngle>
    be72:	|  |   addq.l #8,sp
}
    be74:	+--|-- bra.s be94 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    be76:	|  \-> movea.l 16(sp),a0
    be7a:	|      move.l 96(a0),d0
    be7e:	|      move.l d0,-(sp)
    be80:	|      move.l 20(sp),-(sp)
    be84:	|      jsr bf2e <turnMeAngle>
    be8a:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    be8c:	|      movea.l 16(sp),a0
    be90:	|      clr.w 66(a0)
}
    be94:	\----> nop
    be96:	       move.l (sp)+,d2
    be98:	       addq.l #8,sp
    be9a:	       rts

0000be9c <stopPerson>:


BOOL stopPerson (int o) {
    be9c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    be9e:	       move.l 8(sp),-(sp)
    bea2:	       jsr a75c <findPerson>
    bea8:	       addq.l #4,sp
    beaa:	       move.l d0,(sp)
    if (moveMe)
    beac:	/----- beq.s beea <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    beae:	|      movea.l (sp),a0
    beb0:	|      move.l 68(a0),d0
    beb4:	+----- beq.s beea <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    beb6:	|      movea.l (sp),a0
    beb8:	|      move.l 68(a0),d0
    bebc:	|      move.l d0,-(sp)
    bebe:	|      jsr 484e <abortFunction>
    bec4:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bec6:	|      movea.l (sp),a0
    bec8:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    becc:	|      movea.l (sp),a0
    bece:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bed2:	|      movea.l (sp),a0
    bed4:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bed8:	|      clr.l -(sp)
    beda:	|      move.l 4(sp),-(sp)
    bede:	|      jsr 82a6 <setFrames>
    bee4:	|      addq.l #8,sp
            return TRUE;
    bee6:	|      moveq #1,d0
    bee8:	|  /-- bra.s beec <stopPerson+0x50>
        }
    return FALSE;
    beea:	\--|-> clr.w d0
}
    beec:	   \-> addq.l #4,sp
    beee:	       rts

0000bef0 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bef0:	       subq.l #8,sp
	int total = 0;
    bef2:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bef6:	       clr.l (sp)
    bef8:	   /-- bra.s bf1a <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    befa:	/--|-> movea.l 12(sp),a0
    befe:	|  |   movea.l 4(a0),a0
    bf02:	|  |   move.l (sp),d1
    bf04:	|  |   move.l d1,d0
    bf06:	|  |   add.l d0,d0
    bf08:	|  |   add.l d1,d0
    bf0a:	|  |   add.l d0,d0
    bf0c:	|  |   add.l d0,d0
    bf0e:	|  |   adda.l d0,a0
    bf10:	|  |   move.l 4(a0),d0
    bf14:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bf18:	|  |   addq.l #1,(sp)
    bf1a:	|  \-> movea.l 12(sp),a0
    bf1e:	|      move.l 8(a0),d0
    bf22:	|      cmp.l (sp),d0
    bf24:	\----- bgt.s befa <timeForAnim+0xa>
	}
	return total;
    bf26:	       move.l 4(sp),d0
}
    bf2a:	       addq.l #8,sp
    bf2c:	       rts

0000bf2e <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bf2e:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bf30:	       movea.l 8(sp),a0
    bf34:	       movea.l 80(a0),a0
    bf38:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bf3c:	       movea.l 8(sp),a0
    bf40:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bf46:	       move.l (sp),-(sp)
    bf48:	       pea b4 <_start+0xb4>
    bf4c:	       jsr 17cda <__divsi3>
    bf52:	       addq.l #8,sp
    bf54:	       move.l d0,d1
    bf56:	       addi.l #180,d1
    bf5c:	       movea.l 8(sp),a0
    bf60:	       move.l 100(a0),d0
    bf64:	       add.l d1,d0
    bf66:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bf6a:	   /-- bra.s bf74 <turnMeAngle+0x46>
    bf6c:	/--|-> addi.l #-360,12(sp)
    bf74:	|  \-> cmpi.l #359,12(sp)
    bf7c:	\----- bgt.s bf6c <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bf7e:	       move.l (sp),-(sp)
    bf80:	       move.l 16(sp),-(sp)
    bf84:	       jsr 17c5c <__mulsi3>
    bf8a:	       addq.l #8,sp
    bf8c:	       pea 168 <decodeFilename+0x50>
    bf90:	       move.l d0,-(sp)
    bf92:	       jsr 17cda <__divsi3>
    bf98:	       addq.l #8,sp
    bf9a:	       movea.l 8(sp),a0
    bf9e:	       move.l d0,106(a0)
}
    bfa2:	       nop
    bfa4:	       addq.l #4,sp
    bfa6:	       rts

0000bfa8 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bfa8:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bfaa:	          move.l 8(sp),-(sp)
    bfae:	          jsr a75c <findPerson>
    bfb4:	          addq.l #4,sp
    bfb6:	          move.l d0,(sp)
    if (thisPerson) {
    bfb8:	/-------- beq.s c018 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bfba:	|         movea.l (sp),a0
    bfbc:	|         move.l 68(a0),d0
    bfc0:	|     /-- beq.s bfd2 <turnPersonToFace+0x2a>
    bfc2:	|     |   movea.l (sp),a0
    bfc4:	|     |   move.l 68(a0),d0
    bfc8:	|     |   move.l d0,-(sp)
    bfca:	|     |   jsr 484e <abortFunction>
    bfd0:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bfd2:	|     \-> movea.l (sp),a0
    bfd4:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bfd8:	|         movea.l (sp),a0
    bfda:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bfde:	|         movea.l (sp),a0
    bfe0:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bfe4:	|         move.l 12(sp),-(sp)
    bfe8:	|         move.l 4(sp),-(sp)
    bfec:	|         jsr bf2e <turnMeAngle>
    bff2:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bff4:	|         movea.l 1ca20 <speech>,a0
    bffa:	|         move.l (a0),d0
    bffc:	|         cmp.l (sp),d0
    bffe:	|  /----- bne.s c004 <turnPersonToFace+0x5c>
    c000:	|  |      moveq #2,d0
    c002:	|  |  /-- bra.s c006 <turnPersonToFace+0x5e>
    c004:	|  \--|-> moveq #0,d0
    c006:	|     \-> move.l d0,-(sp)
    c008:	|         move.l 4(sp),-(sp)
    c00c:	|         jsr 82a6 <setFrames>
    c012:	|         addq.l #8,sp
        return TRUE;
    c014:	|         moveq #1,d0
    c016:	|     /-- bra.s c01a <turnPersonToFace+0x72>
    }
    return FALSE;
    c018:	\-----|-> clr.w d0
}
    c01a:	      \-> addq.l #4,sp
    c01c:	          rts

0000c01e <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c01e:	                lea -20(sp),sp
    c022:	                move.l d3,-(sp)
    c024:	                move.l d2,-(sp)
    c026:	                move.l 36(sp),d0
    c02a:	                move.w d0,d0
    c02c:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c030:	                cmpi.w #-1,10(sp)
    c036:	/-------------- bne.s c03e <walkMe+0x20>
    c038:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c03e:	>-------------> movea.l 32(sp),a0
    c042:	|               move.l 48(a0),d0
    c046:	|               move.l d0,-(sp)
    c048:	|               jsr 176da <__floatsisf>
    c04e:	|               addq.l #4,sp
    c050:	|               move.l d0,d1
    c052:	|               movea.l 32(sp),a0
    c056:	|               move.l (a0),d0
    c058:	|               move.l d0,-(sp)
    c05a:	|               move.l d1,-(sp)
    c05c:	|               jsr 179ce <__subsf3>
    c062:	|               addq.l #8,sp
    c064:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c068:	|               movea.l 32(sp),a0
    c06c:	|               move.l 52(a0),d0
    c070:	|               move.l d0,-(sp)
    c072:	|               jsr 176da <__floatsisf>
    c078:	|               addq.l #4,sp
    c07a:	|               move.l d0,d1
    c07c:	|               movea.l 32(sp),a0
    c080:	|               move.l 4(a0),d0
    c084:	|               move.l d0,-(sp)
    c086:	|               move.l d1,-(sp)
    c088:	|               jsr 179ce <__subsf3>
    c08e:	|               addq.l #8,sp
    c090:	|               move.l d0,-(sp)
    c092:	|               move.l d0,-(sp)
    c094:	|               jsr 1748c <__addsf3>
    c09a:	|               addq.l #8,sp
    c09c:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c0a0:	|               movea.l 32(sp),a0
    c0a4:	|               move.l 32(a0),d2
    c0a8:	|               movea.l 32(sp),a0
    c0ac:	|               move.l 28(a0),d0
    c0b0:	|               move.l d0,-(sp)
    c0b2:	|               jsr 176da <__floatsisf>
    c0b8:	|               addq.l #4,sp
    c0ba:	|               move.l d0,-(sp)
    c0bc:	|               move.l d2,-(sp)
    c0be:	|               jsr 1778c <__mulsf3>
    c0c4:	|               addq.l #8,sp
    c0c6:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c0ca:	|               move.l 24(sp),-(sp)
    c0ce:	|               jsr 175f2 <__extendsfdf2>
    c0d4:	|               addq.l #4,sp
    c0d6:	|               move.l #-1717986918,-(sp)
    c0dc:	|               move.l #1070176665,-(sp)
    c0e2:	|               move.l d1,-(sp)
    c0e4:	|               move.l d0,-(sp)
    c0e6:	|               jsr 178b2 <__ltdf2>
    c0ec:	|               lea 16(sp),sp
    c0f0:	|               tst.l d0
    c0f2:	|           /-- bge.s c0fc <walkMe+0xde>
    c0f4:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c0fc:	|           \-> move.l 20(sp),-(sp)
    c100:	|               jsr 17672 <__fixsfsi>
    c106:	|               addq.l #4,sp
    c108:	|               move.l d0,-(sp)
    c10a:	|               jsr 934c <TF_abs>
    c110:	|               addq.l #4,sp
    c112:	|               move.l d0,d2
    c114:	|               move.l 16(sp),-(sp)
    c118:	|               jsr 17672 <__fixsfsi>
    c11e:	|               addq.l #4,sp
    c120:	|               move.l d0,-(sp)
    c122:	|               jsr 934c <TF_abs>
    c128:	|               addq.l #4,sp
    c12a:	|               cmp.l d2,d0
    c12c:	|        /----- bgt.s c150 <walkMe+0x132>
    c12e:	|        |      move.l 20(sp),-(sp)
    c132:	|        |      jsr 17672 <__fixsfsi>
    c138:	|        |      addq.l #4,sp
    c13a:	|        |      move.l d0,-(sp)
    c13c:	|        |      jsr 934c <TF_abs>
    c142:	|        |      addq.l #4,sp
    c144:	|        |      move.l d0,-(sp)
    c146:	|        |      jsr 176da <__floatsisf>
    c14c:	|        |      addq.l #4,sp
    c14e:	|        |  /-- bra.s c170 <walkMe+0x152>
    c150:	|        \--|-> move.l 16(sp),-(sp)
    c154:	|           |   jsr 17672 <__fixsfsi>
    c15a:	|           |   addq.l #4,sp
    c15c:	|           |   move.l d0,-(sp)
    c15e:	|           |   jsr 934c <TF_abs>
    c164:	|           |   addq.l #4,sp
    c166:	|           |   move.l d0,-(sp)
    c168:	|           |   jsr 176da <__floatsisf>
    c16e:	|           |   addq.l #4,sp
    c170:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c174:	|               move.l 12(sp),-(sp)
    c178:	|               jsr 17672 <__fixsfsi>
    c17e:	|               addq.l #4,sp
    c180:	|               move.l d0,-(sp)
    c182:	|               jsr 934c <TF_abs>
    c188:	|               addq.l #4,sp
    c18a:	|               move.l d0,-(sp)
    c18c:	|               jsr 176da <__floatsisf>
    c192:	|               addq.l #4,sp
    c194:	|               move.l d0,-(sp)
    c196:	|               move.l 28(sp),-(sp)
    c19a:	|               jsr 17900 <__ltsf2>
    c1a0:	|               addq.l #8,sp
    c1a2:	|               tst.l d0
    c1a4:	|        /----- bge.w c256 <walkMe+0x238>
			if (thisPerson->spinning) {
    c1a8:	|        |      movea.l 32(sp),a0
    c1ac:	|        |      move.w 66(a0),d0
    c1b0:	|        |  /-- beq.s c1ce <walkMe+0x1b0>
				spinStep(thisPerson);
    c1b2:	|        |  |   move.l 32(sp),-(sp)
    c1b6:	|        |  |   jsr bdbe <spinStep>
    c1bc:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c1be:	|        |  |   pea 1 <_start+0x1>
    c1c2:	|        |  |   move.l 36(sp),-(sp)
    c1c6:	|        |  |   jsr 82a6 <setFrames>
    c1cc:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c1ce:	|        |  \-> move.l 24(sp),-(sp)
    c1d2:	|        |      move.l 16(sp),-(sp)
    c1d6:	|        |      jsr 17586 <__divsf3>
    c1dc:	|        |      addq.l #8,sp
    c1de:	|        |      move.l d0,24(sp)
			if (move)
    c1e2:	|        |      tst.w 10(sp)
    c1e6:	|        |  /-- beq.s c250 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c1e8:	|        |  |   movea.l 32(sp),a0
    c1ec:	|        |  |   move.l 4(a0),d2
    c1f0:	|        |  |   move.l 24(sp),d0
    c1f4:	|        |  |   move.l d0,-(sp)
    c1f6:	|        |  |   move.l d0,-(sp)
    c1f8:	|        |  |   jsr 1748c <__addsf3>
    c1fe:	|        |  |   addq.l #8,sp
    c200:	|        |  |   move.l d0,-(sp)
    c202:	|        |  |   move.l 20(sp),-(sp)
    c206:	|        |  |   jsr 17586 <__divsf3>
    c20c:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c20e:	|        |  |   move.l d0,-(sp)
    c210:	|        |  |   move.l d2,-(sp)
    c212:	|        |  |   jsr 1748c <__addsf3>
    c218:	|        |  |   addq.l #8,sp
    c21a:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c21c:	|        |  |   movea.l 32(sp),a0
    c220:	|        |  |   move.l (a0),d3
    c222:	|        |  |   move.l 24(sp),-(sp)
    c226:	|        |  |   move.l 24(sp),-(sp)
    c22a:	|        |  |   jsr 17586 <__divsf3>
    c230:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c232:	|        |  |   move.l d0,-(sp)
    c234:	|        |  |   move.l d3,-(sp)
    c236:	|        |  |   jsr 1748c <__addsf3>
    c23c:	|        |  |   addq.l #8,sp
    c23e:	|        |  |   move.l d2,-(sp)
    c240:	|        |  |   move.l d0,-(sp)
    c242:	|        |  |   move.l 40(sp),-(sp)
    c246:	|        |  |   jsr aea4 <moveAndScale>
    c24c:	|        |  |   lea 12(sp),sp
			return TRUE;
    c250:	|        |  \-> moveq #1,d0
    c252:	|  /-----|----- bra.w c304 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c256:	|  |     \----> movea.l 32(sp),a0
    c25a:	|  |            move.l 56(a0),d0
    c25e:	|  |            moveq #-1,d1
    c260:	|  |            cmp.l d0,d1
    c262:	|  |        /-- bne.s c29a <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c264:	|  |        |   movea.l 32(sp),a0
    c268:	|  |        |   move.l 110(a0),d0
    c26c:	|  |        |   moveq #-1,d1
    c26e:	|  |        |   cmp.l d0,d1
    c270:	|  |  /-----|-- beq.s c2ae <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c272:	|  |  |     |   movea.l 32(sp),a0
    c276:	|  |  |     |   move.l 110(a0),d0
    c27a:	|  |  |     |   movea.l 32(sp),a0
    c27e:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c282:	|  |  |     |   movea.l 32(sp),a0
    c286:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c28c:	|  |  |     |   move.l 32(sp),-(sp)
    c290:	|  |  |     |   jsr bdbe <spinStep>
    c296:	|  |  |     |   addq.l #4,sp
			}
			break;
    c298:	|  |  +-----|-- bra.s c2ae <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c29a:	|  |  |     \-> move.l 32(sp),-(sp)
    c29e:	|  |  |         jsr 9abe <doBorderStuff>
    c2a4:	|  |  |         addq.l #4,sp
    c2a6:	|  |  |         tst.w d0
    c2a8:	|  |  |  /----- beq.s c2b2 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c2aa:	\--|--|--|----- bra.w c03e <walkMe+0x20>
			break;
    c2ae:	   |  \--|----> nop
    c2b0:	   |     |  /-- bra.s c2b4 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c2b2:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    c2b4:	   |        \-> movea.l 32(sp),a0
    c2b8:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c2bc:	   |            clr.l -(sp)
    c2be:	   |            move.l 36(sp),-(sp)
    c2c2:	   |            jsr 82a6 <setFrames>
    c2c8:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c2ca:	   |            movea.l 32(sp),a0
    c2ce:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c2d2:	   |            move.l d0,-(sp)
    c2d4:	   |            jsr 176da <__floatsisf>
    c2da:	   |            addq.l #4,sp
    c2dc:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c2de:	   |            movea.l 32(sp),a0
    c2e2:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c2e6:	   |            move.l d0,-(sp)
    c2e8:	   |            jsr 176da <__floatsisf>
    c2ee:	   |            addq.l #4,sp
    c2f0:	   |            move.l d2,-(sp)
    c2f2:	   |            move.l d0,-(sp)
    c2f4:	   |            move.l 40(sp),-(sp)
    c2f8:	   |            jsr aea4 <moveAndScale>
    c2fe:	   |            lea 12(sp),sp
	return FALSE;
    c302:	   |            clr.w d0
}
    c304:	   \----------> move.l (sp)+,d2
    c306:	                move.l (sp)+,d3
    c308:	                lea 20(sp),sp
    c30c:	                rts

0000c30e <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c30e:	       subq.l #8,sp
    c310:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c312:	   /-- bra.s c342 <clearStackLib+0x34>
		k = stackLib;
    c314:	/--|-> move.l 1ca54 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c31c:	|  |   movea.l 1ca54 <stackLib>,a0
    c322:	|  |   move.l 4(a0),d0
    c326:	|  |   move.l d0,1ca54 <stackLib>
		FreeVec(k);
    c32c:	|  |   move.l 8(sp),4(sp)
    c332:	|  |   move.l 1c9c4 <SysBase>,d0
    c338:	|  |   movea.l d0,a6
    c33a:	|  |   movea.l 4(sp),a1
    c33e:	|  |   jsr -690(a6)
	while (stackLib) {
    c342:	|  \-> move.l 1ca54 <stackLib>,d0
    c348:	\----- bne.s c314 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c34a:	       clr.l 1ca50 <stackLibTotal>
}
    c350:	       nop
    c352:	       movea.l (sp)+,a6
    c354:	       addq.l #8,sp
    c356:	       rts

0000c358 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c358:	          lea -128(sp),sp
    c35c:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c360:	      /-- bra.s c372 <loadGame+0x1a>
    c362:	   /--|-> move.l 1c95c <allRunningFunctions>,d0
    c368:	   |  |   move.l d0,-(sp)
    c36a:	   |  |   jsr 5856 <finishFunction>
    c370:	   |  |   addq.l #4,sp
    c372:	   |  \-> move.l 1c95c <allRunningFunctions>,d0
    c378:	   \----- bne.s c362 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c37a:	          pea 1ca58 <ssgVersion>
    c380:	          pea 19250 <PutChar+0x14de>
    c386:	          pea 41 <_start+0x41>
    c38a:	          pea 53 <_start+0x53>
    c38e:	          move.l 160(sp),-(sp)
    c392:	          jsr 660c <openAndVerify>
    c398:	          lea 20(sp),sp
    c39c:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c3a0:	      /-- bne.s c3a8 <loadGame+0x50>
    c3a2:	      |   clr.w d0
    c3a4:	/-----|-- bra.w c64e <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c3a8:	|     \-> move.l 112(sp),108(sp)
    c3ae:	|         lea 140(sp),a0
    c3b2:	|         lea -126(a0),a0
    c3b6:	|         move.l a0,120(sp)
    c3ba:	|         moveq #8,d0
    c3bc:	|         move.l d0,116(sp)
    c3c0:	|         move.l 1c9cc <DOSBase>,d0
    c3c6:	|         movea.l d0,a6
    c3c8:	|         move.l 108(sp),d1
    c3cc:	|         move.l 120(sp),d2
    c3d0:	|         move.l 116(sp),d3
    c3d4:	|         jsr -42(a6)
    c3d8:	|         move.l d0,132(sp)
    c3dc:	|         move.l 132(sp),d0
    c3e0:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c3e4:	|         moveq #8,d0
    c3e6:	|         cmp.l 128(sp),d0
    c3ea:	|     /-- beq.s c3fa <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c3ec:	|     |   pea 19271 <PutChar+0x14ff>
    c3f2:	|     |   jsr 1729e <KPrintF>
    c3f8:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c3fa:	|     \-> move.l 14(sp),d1
    c3fe:	|         move.l 1c966 <fileTime>,d0
    c404:	|         cmp.l d1,d0
    c406:	|     /-- bne.s c416 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c408:	|     |   move.l 18(sp),d1
    c40c:	|     |   move.l 1c96a <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c412:	|     |   cmp.l d1,d0
    c414:	|  /--|-- beq.s c436 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c416:	|  |  \-> move.l 144(sp),-(sp)
    c41a:	|  |      pea 1928d <PutChar+0x151b>
    c420:	|  |      pea 19354 <PutChar+0x15e2>
    c426:	|  |      jsr 1729e <KPrintF>
    c42c:	|  |      lea 12(sp),sp
		return FALSE; 
    c430:	|  |      clr.w d0
    c432:	+--|----- bra.w c64e <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c436:	|  \----> move.l 112(sp),124(sp)
    c43c:	|         move.l 1c9cc <DOSBase>,d0
    c442:	|         movea.l d0,a6
    c444:	|         move.l 124(sp),d1
    c448:	|         jsr -306(a6)
    c44c:	|         move.l d0,136(sp)
    c450:	|         move.l 136(sp),d0
    c454:	|         move.l d0,d0
    c456:	|         move.w d0,1c220 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c45c:	|         move.l 112(sp),100(sp)
    c462:	|         move.l 1c9cc <DOSBase>,d0
    c468:	|         movea.l d0,a6
    c46a:	|         move.l 100(sp),d1
    c46e:	|         jsr -306(a6)
    c472:	|         move.l d0,96(sp)
    c476:	|         move.l 96(sp),d0
    c47a:	|         move.l d0,d0
    c47c:	|         move.w d0,1c964 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c482:	|         move.l 112(sp),92(sp)
    c488:	|         move.l 1c9cc <DOSBase>,d0
    c48e:	|         movea.l d0,a6
    c490:	|         move.l 92(sp),d1
    c494:	|         jsr -306(a6)
    c498:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c49c:	|         move.l 112(sp),84(sp)
    c4a2:	|         move.l 1c9cc <DOSBase>,d0
    c4a8:	|         movea.l d0,a6
    c4aa:	|         move.l 84(sp),d1
    c4ae:	|         jsr -306(a6)
    c4b2:	|         move.l d0,80(sp)
    c4b6:	|         move.l 80(sp),d0
    c4ba:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c4be:	|     /-- beq.s c4f2 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c4c0:	|     |   move.l 112(sp),-(sp)
    c4c4:	|     |   jsr 6bc <get2bytes>
    c4ca:	|     |   addq.l #4,sp
    c4cc:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c4d0:	|     |   move.l 112(sp),-(sp)
    c4d4:	|     |   jsr 6bc <get2bytes>
    c4da:	|     |   addq.l #4,sp
    c4dc:	|     |   move.l d0,1cabc <fontHeight>
		charOrder = readString(fp);		
    c4e2:	|     |   move.l 112(sp),-(sp)
    c4e6:	|     |   jsr b02 <readString>
    c4ec:	|     |   addq.l #4,sp
    c4ee:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c4f2:	|     \-> move.l 104(sp),70(sp)
    c4f8:	|         move.l 1c9c4 <SysBase>,d0
    c4fe:	|         movea.l d0,a6
    c500:	|         movea.l 70(sp),a1
    c504:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c508:	|         move.l 112(sp),-(sp)
    c50c:	|         jsr 854 <getSigned>
    c512:	|         addq.l #4,sp
    c514:	|         move.w d0,1c8c8 <fontSpace>

	killAllPeople ();
    c51a:	|         jsr ab46 <killAllPeople>
	killAllRegions ();
    c520:	|         jsr 15af4 <killAllRegions>

	int camerX = get2bytes (fp);
    c526:	|         move.l 112(sp),-(sp)
    c52a:	|         jsr 6bc <get2bytes>
    c530:	|         addq.l #4,sp
    c532:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c536:	|         move.l 112(sp),-(sp)
    c53a:	|         jsr 6bc <get2bytes>
    c540:	|         addq.l #4,sp
    c542:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c546:	|         move.l 112(sp),-(sp)
    c54a:	|         jsr 7d8 <getFloat>
    c550:	|         addq.l #4,sp
    c552:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c556:	|         move.l 112(sp),54(sp)
    c55c:	|         move.l 1c9cc <DOSBase>,d0
    c562:	|         movea.l d0,a6
    c564:	|         move.l 54(sp),d1
    c568:	|         jsr -306(a6)
    c56c:	|         move.l d0,50(sp)
    c570:	|         move.l 50(sp),d0
    c574:	|         move.l d0,d0
    c576:	|         move.b d0,1c33a <brightnessLevel>

	loadHandlers (fp);
    c57c:	|         move.l 112(sp),-(sp)
    c580:	|         jsr 656c <loadHandlers>
    c586:	|         addq.l #4,sp
	loadRegions (fp);
    c588:	|         move.l 112(sp),-(sp)
    c58c:	|         jsr 15b50 <loadRegions>
    c592:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c594:	|         moveq #12,d0
    c596:	|         move.l d0,46(sp)
    c59a:	|         clr.l 42(sp)
    c59e:	|         move.l 1c9c4 <SysBase>,d0
    c5a4:	|         movea.l d0,a6
    c5a6:	|         move.l 46(sp),d0
    c5aa:	|         move.l 42(sp),d1
    c5ae:	|         jsr -684(a6)
    c5b2:	|         move.l d0,38(sp)
    c5b6:	|         move.l 38(sp),d0
    c5ba:	|         move.l d0,1c8ca <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c5c0:	|         move.l 1c8ca <mouseCursorAnim>,d0
    c5c6:	|     /-- bne.s c5da <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c5c8:	|     |   pea 1935e <PutChar+0x15ec>
    c5ce:	|     |   jsr 1729e <KPrintF>
    c5d4:	|     |   addq.l #4,sp
		return FALSE;
    c5d6:	|     |   clr.w d0
    c5d8:	+-----|-- bra.s c64e <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c5da:	|     \-> jsr d468 <nosnapshot>
	if (FGetC (fp)) {
    c5e0:	|         move.l 112(sp),34(sp)
    c5e6:	|         move.l 1c9cc <DOSBase>,d0
    c5ec:	|         movea.l d0,a6
    c5ee:	|         move.l 34(sp),d1
    c5f2:	|         jsr -306(a6)
    c5f6:	|         move.l d0,30(sp)
    c5fa:	|         move.l 30(sp),d0
    c5fe:	|     /-- beq.s c614 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c600:	|     |   move.l 112(sp),-(sp)
    c604:	|     |   jsr d4e8 <restoreSnapshot>
    c60a:	|     |   addq.l #4,sp
    c60c:	|     |   tst.w d0
    c60e:	|     +-- bne.s c614 <loadGame+0x2bc>
    c610:	|     |   clr.w d0
    c612:	+-----|-- bra.s c64e <loadGame+0x2f6>
	}

	Close (fp);
    c614:	|     \-> move.l 112(sp),26(sp)
    c61a:	|         move.l 1c9cc <DOSBase>,d0
    c620:	|         movea.l d0,a6
    c622:	|         move.l 26(sp),d1
    c626:	|         jsr -36(a6)
    c62a:	|         move.l d0,22(sp)
	clearStackLib ();
    c62e:	|         jsr c30e <clearStackLib>

	cameraX = camerX;
    c634:	|         move.l 66(sp),1ca7e <cameraX>
	cameraY = camerY;
    c63c:	|         move.l 62(sp),1ca82 <cameraY>
	cameraZoom = camerZ;
    c644:	|         move.l 58(sp),1c362 <cameraZoom>

	return TRUE;
    c64c:	|         moveq #1,d0
}
    c64e:	\-------> movem.l (sp)+,d2-d3/a6
    c652:	          lea 128(sp),sp
    c656:	          rts

0000c658 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c658:	   /-> lea -64(sp),sp
    c65c:	   |   move.l a6,-(sp)
    c65e:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c660:	   |   movea.l 76(sp),a0
    c664:	   |   move.l (a0),d0
    c666:	   |   move.l 80(sp),-(sp)
    c66a:	   |   move.l d0,-(sp)
    c66c:	   |   jsr 8d0 <put2bytes>
    c672:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c674:	   |   movea.l 76(sp),a0
    c678:	   |   move.l 40(a0),d0
    c67c:	/--|-- beq.s c6b8 <saveFunction+0x60>
		FPutC (fp, 1);
    c67e:	|  |   move.l 80(sp),52(sp)
    c684:	|  |   moveq #1,d0
    c686:	|  |   move.l d0,48(sp)
    c68a:	|  |   move.l 1c9cc <DOSBase>,d0
    c690:	|  |   movea.l d0,a6
    c692:	|  |   move.l 52(sp),d1
    c696:	|  |   move.l 48(sp),d2
    c69a:	|  |   jsr -312(a6)
    c69e:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c6a2:	|  |   movea.l 76(sp),a0
    c6a6:	|  |   move.l 40(a0),d0
    c6aa:	|  |   move.l 80(sp),-(sp)
    c6ae:	|  |   move.l d0,-(sp)
    c6b0:	|  \-- jsr c658 <saveFunction>(pc)
    c6b4:	|      addq.l #8,sp
    c6b6:	|  /-- bra.s c6da <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c6b8:	\--|-> move.l 80(sp),64(sp)
    c6be:	   |   clr.l 60(sp)
    c6c2:	   |   move.l 1c9cc <DOSBase>,d0
    c6c8:	   |   movea.l d0,a6
    c6ca:	   |   move.l 64(sp),d1
    c6ce:	   |   move.l 60(sp),d2
    c6d2:	   |   jsr -312(a6)
    c6d6:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c6da:	   \-> movea.l 76(sp),a0
    c6de:	       move.l 12(a0),d0
    c6e2:	       move.l 80(sp),-(sp)
    c6e6:	       move.l d0,-(sp)
    c6e8:	       jsr 958 <put4bytes>
    c6ee:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c6f0:	       movea.l 76(sp),a0
    c6f4:	       move.l 36(a0),d0
    c6f8:	       move.l 80(sp),-(sp)
    c6fc:	       move.l d0,-(sp)
    c6fe:	       jsr 8d0 <put2bytes>
    c704:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c706:	       move.l 80(sp),40(sp)
    c70c:	       movea.l 76(sp),a0
    c710:	       move.w 54(a0),d0
    c714:	       movea.w d0,a0
    c716:	       move.l a0,36(sp)
    c71a:	       move.l 1c9cc <DOSBase>,d0
    c720:	       movea.l d0,a6
    c722:	       move.l 40(sp),d1
    c726:	       move.l 36(sp),d2
    c72a:	       jsr -312(a6)
    c72e:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c732:	       move.l 80(sp),28(sp)
    c738:	       movea.l 76(sp),a0
    c73c:	       move.w 48(a0),d0
    c740:	       movea.w d0,a0
    c742:	       move.l a0,24(sp)
    c746:	       move.l 1c9cc <DOSBase>,d0
    c74c:	       movea.l d0,a6
    c74e:	       move.l 28(sp),d1
    c752:	       move.l 24(sp),d2
    c756:	       jsr -312(a6)
    c75a:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c75e:	       move.l 80(sp),16(sp)
    c764:	       movea.l 76(sp),a0
    c768:	       move.w 50(a0),d0
    c76c:	       movea.w d0,a0
    c76e:	       move.l a0,12(sp)
    c772:	       move.l 1c9cc <DOSBase>,d0
    c778:	       movea.l d0,a6
    c77a:	       move.l 16(sp),d1
    c77e:	       move.l 12(sp),d2
    c782:	       jsr -312(a6)
    c786:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c78a:	       moveq #28,d0
    c78c:	       add.l 76(sp),d0
    c790:	       move.l 80(sp),-(sp)
    c794:	       move.l d0,-(sp)
    c796:	       jsr ceb0 <saveVariable>
    c79c:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c79e:	       movea.l 76(sp),a0
    c7a2:	       move.b 56(a0),d0
    c7a6:	   /-- beq.s c7b6 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c7a8:	   |   pea 1937f <PutChar+0x160d>
    c7ae:	   |   jsr 1729e <KPrintF>
    c7b4:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c7b6:	   \-> movea.l 76(sp),a0
    c7ba:	       move.l 24(a0),d0
    c7be:	       move.l 80(sp),-(sp)
    c7c2:	       move.l d0,-(sp)
    c7c4:	       jsr cd24 <saveStack>
    c7ca:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c7cc:	       clr.l 68(sp)
    c7d0:	   /-- bra.s c7f4 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c7d2:	/--|-> movea.l 76(sp),a0
    c7d6:	|  |   move.l 20(a0),d1
    c7da:	|  |   move.l 68(sp),d0
    c7de:	|  |   lsl.l #3,d0
    c7e0:	|  |   add.l d1,d0
    c7e2:	|  |   move.l 80(sp),-(sp)
    c7e6:	|  |   move.l d0,-(sp)
    c7e8:	|  |   jsr ceb0 <saveVariable>
    c7ee:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c7f0:	|  |   addq.l #1,68(sp)
    c7f4:	|  \-> movea.l 76(sp),a0
    c7f8:	|      move.l 8(a0),d0
    c7fc:	|      cmp.l 68(sp),d0
    c800:	\----- bgt.s c7d2 <saveFunction+0x17a>
	}
}
    c802:	       nop
    c804:	       nop
    c806:	       move.l (sp)+,d2
    c808:	       movea.l (sp)+,a6
    c80a:	       lea 64(sp),sp
    c80e:	       rts

0000c810 <saveGame>:

BOOL saveGame (char * fname) {
    c810:	          lea -248(sp),sp
    c814:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c818:	          move.l 264(sp),244(sp)
    c81e:	          move.l #1006,240(sp)
    c826:	          move.l 1c9cc <DOSBase>,d0
    c82c:	          movea.l d0,a6
    c82e:	          move.l 244(sp),d1
    c832:	          move.l 240(sp),d2
    c836:	          jsr -30(a6)
    c83a:	          move.l d0,236(sp)
    c83e:	          move.l 236(sp),d0
    c842:	          move.l d0,232(sp)
	if (fp == NULL) {
    c846:	      /-- bne.s c85c <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c848:	      |   pea 193a1 <PutChar+0x162f>
    c84e:	      |   jsr 1729e <KPrintF>
    c854:	      |   addq.l #4,sp
		return FALSE;
    c856:	      |   clr.w d0
    c858:	/-----|-- bra.w cd1a <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c85c:	|     \-> move.l 232(sp),228(sp)
    c862:	|         move.l #103358,224(sp)
    c86a:	|         moveq #6,d0
    c86c:	|         move.l d0,220(sp)
    c870:	|         move.l 1c9cc <DOSBase>,d0
    c876:	|         movea.l d0,a6
    c878:	|         move.l 228(sp),d1
    c87c:	|         move.l 224(sp),d2
    c880:	|         move.l 220(sp),d3
    c884:	|         jsr -48(a6)
    c888:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c88c:	|         move.l 232(sp),212(sp)
    c892:	|         clr.l 208(sp)
    c896:	|         move.l 1c9cc <DOSBase>,d0
    c89c:	|         movea.l d0,a6
    c89e:	|         move.l 212(sp),d1
    c8a2:	|         move.l 208(sp),d2
    c8a6:	|         jsr -312(a6)
    c8aa:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c8ae:	|         move.l 232(sp),200(sp)
    c8b4:	|         clr.l 196(sp)
    c8b8:	|         move.l 1c9cc <DOSBase>,d0
    c8be:	|         movea.l d0,a6
    c8c0:	|         move.l 200(sp),d1
    c8c4:	|         move.l 196(sp),d2
    c8c8:	|         jsr -312(a6)
    c8cc:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c8d0:	|         move.l 232(sp),188(sp)
    c8d6:	|         moveq #2,d0
    c8d8:	|         move.l d0,184(sp)
    c8dc:	|         move.l 1c9cc <DOSBase>,d0
    c8e2:	|         movea.l d0,a6
    c8e4:	|         move.l 188(sp),d1
    c8e8:	|         move.l 184(sp),d2
    c8ec:	|         jsr -312(a6)
    c8f0:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c8f4:	|         move.l 232(sp),176(sp)
    c8fa:	|         moveq #2,d0
    c8fc:	|         move.l d0,172(sp)
    c900:	|         move.l 1c9cc <DOSBase>,d0
    c906:	|         movea.l d0,a6
    c908:	|         move.l 176(sp),d1
    c90c:	|         move.l 172(sp),d2
    c910:	|         jsr -312(a6)
    c914:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c918:	|         move.l 232(sp),164(sp)
    c91e:	|         move.l #117094,160(sp)
    c926:	|         moveq #8,d0
    c928:	|         move.l d0,156(sp)
    c92c:	|         move.l 1c9cc <DOSBase>,d0
    c932:	|         movea.l d0,a6
    c934:	|         move.l 164(sp),d1
    c938:	|         move.l 160(sp),d2
    c93c:	|         move.l 156(sp),d3
    c940:	|         jsr -48(a6)
    c944:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c948:	|         move.l 232(sp),148(sp)
    c94e:	|         move.w 1c220 <allowAnyFilename>,d0
    c954:	|         movea.w d0,a0
    c956:	|         move.l a0,144(sp)
    c95a:	|         move.l 1c9cc <DOSBase>,d0
    c960:	|         movea.l d0,a6
    c962:	|         move.l 148(sp),d1
    c966:	|         move.l 144(sp),d2
    c96a:	|         jsr -312(a6)
    c96e:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c972:	|         move.l 232(sp),136(sp)
    c978:	|         move.w 1c964 <captureAllKeys>,d0
    c97e:	|         movea.w d0,a0
    c980:	|         move.l a0,132(sp)
    c984:	|         move.l 1c9cc <DOSBase>,d0
    c98a:	|         movea.l d0,a6
    c98c:	|         move.l 136(sp),d1
    c990:	|         move.l 132(sp),d2
    c994:	|         jsr -312(a6)
    c998:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c99c:	|         move.l 232(sp),124(sp)
    c9a2:	|         moveq #1,d0
    c9a4:	|         move.l d0,120(sp)
    c9a8:	|         move.l 1c9cc <DOSBase>,d0
    c9ae:	|         movea.l d0,a6
    c9b0:	|         move.l 124(sp),d1
    c9b4:	|         move.l 120(sp),d2
    c9b8:	|         jsr -312(a6)
    c9bc:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c9c0:	|         move.l 232(sp),112(sp)
    c9c6:	|         move.l 1cacc <fontTableSize>,d0
    c9cc:	|         sgt d0
    c9ce:	|         neg.b d0
    c9d0:	|         move.b d0,d0
    c9d2:	|         andi.l #255,d0
    c9d8:	|         move.l d0,108(sp)
    c9dc:	|         move.l 1c9cc <DOSBase>,d0
    c9e2:	|         movea.l d0,a6
    c9e4:	|         move.l 112(sp),d1
    c9e8:	|         move.l 108(sp),d2
    c9ec:	|         jsr -312(a6)
    c9f0:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c9f4:	|         move.l 1cacc <fontTableSize>,d0
    c9fa:	|     /-- ble.s ca38 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c9fc:	|     |   move.l 1cac0 <loadedFontNum>,d0
    ca02:	|     |   move.l 232(sp),-(sp)
    ca06:	|     |   move.l d0,-(sp)
    ca08:	|     |   jsr 8d0 <put2bytes>
    ca0e:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    ca10:	|     |   move.l 1cabc <fontHeight>,d0
    ca16:	|     |   move.l 232(sp),-(sp)
    ca1a:	|     |   move.l d0,-(sp)
    ca1c:	|     |   jsr 8d0 <put2bytes>
    ca22:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    ca24:	|     |   move.l 1cac4 <fontOrderString>,d0
    ca2a:	|     |   move.l 232(sp),-(sp)
    ca2e:	|     |   move.l d0,-(sp)
    ca30:	|     |   jsr bd8 <writeString>
    ca36:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    ca38:	|     \-> move.w 1c8c8 <fontSpace>,d0
    ca3e:	|         movea.w d0,a0
    ca40:	|         move.l 232(sp),-(sp)
    ca44:	|         move.l a0,-(sp)
    ca46:	|         jsr a9c <putSigned>
    ca4c:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    ca4e:	|         move.l 1ca7e <cameraX>,d0
    ca54:	|         move.l 232(sp),-(sp)
    ca58:	|         move.l d0,-(sp)
    ca5a:	|         jsr 8d0 <put2bytes>
    ca60:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    ca62:	|         move.l 1ca82 <cameraY>,d0
    ca68:	|         move.l 232(sp),-(sp)
    ca6c:	|         move.l d0,-(sp)
    ca6e:	|         jsr 8d0 <put2bytes>
    ca74:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    ca76:	|         move.l 1c362 <cameraZoom>,d0
    ca7c:	|         move.l 232(sp),-(sp)
    ca80:	|         move.l d0,-(sp)
    ca82:	|         jsr a46 <putFloat>
    ca88:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    ca8a:	|         move.l 232(sp),100(sp)
    ca90:	|         move.b 1c33a <brightnessLevel>,d0
    ca96:	|         move.b d0,d0
    ca98:	|         andi.l #255,d0
    ca9e:	|         move.l d0,96(sp)
    caa2:	|         move.l 1c9cc <DOSBase>,d0
    caa8:	|         movea.l d0,a6
    caaa:	|         move.l 100(sp),d1
    caae:	|         move.l 96(sp),d2
    cab2:	|         jsr -312(a6)
    cab6:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    caba:	|         move.l 232(sp),-(sp)
    cabe:	|         jsr 6af0 <saveHandlers>
    cac4:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    cac6:	|         move.l 232(sp),-(sp)
    caca:	|         jsr 15d0a <saveRegions>
    cad0:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    cad2:	|         move.l 1c8ca <mouseCursorAnim>,d0
    cad8:	|         move.l 232(sp),-(sp)
    cadc:	|         move.l d0,-(sp)
    cade:	|         jsr b0b8 <saveAnim>
    cae4:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    cae6:	|         move.l 1c8ce <mouseCursorFrameNum>,d0
    caec:	|         move.l 232(sp),-(sp)
    caf0:	|         move.l d0,-(sp)
    caf2:	|         jsr 8d0 <put2bytes>
    caf8:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    cafa:	|         move.l 1c95c <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    cb02:	|         clr.l 248(sp)
	while (thisFunction) {
    cb06:	|     /-- bra.s cb16 <saveGame+0x306>
		countFunctions ++;
    cb08:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    cb0c:	|  |  |   movea.l 252(sp),a0
    cb10:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cb16:	|  |  \-> tst.l 252(sp)
    cb1a:	|  \----- bne.s cb08 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    cb1c:	|         move.l 232(sp),-(sp)
    cb20:	|         move.l 252(sp),-(sp)
    cb24:	|         jsr 8d0 <put2bytes>
    cb2a:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    cb2c:	|         move.l 1c95c <allRunningFunctions>,252(sp)
	while (thisFunction) {
    cb34:	|     /-- bra.s cb50 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    cb36:	|  /--|-> move.l 232(sp),-(sp)
    cb3a:	|  |  |   move.l 256(sp),-(sp)
    cb3e:	|  |  |   jsr c658 <saveFunction>
    cb44:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    cb46:	|  |  |   movea.l 252(sp),a0
    cb4a:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cb50:	|  |  \-> tst.l 252(sp)
    cb54:	|  \----- bne.s cb36 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    cb56:	|         clr.l 256(sp)
    cb5a:	|     /-- bra.s cb7c <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    cb5c:	|  /--|-> move.l 1c972 <globalVars>,d1
    cb62:	|  |  |   move.l 256(sp),d0
    cb66:	|  |  |   lsl.l #3,d0
    cb68:	|  |  |   add.l d1,d0
    cb6a:	|  |  |   move.l 232(sp),-(sp)
    cb6e:	|  |  |   move.l d0,-(sp)
    cb70:	|  |  |   jsr ceb0 <saveVariable>
    cb76:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    cb78:	|  |  |   addq.l #1,256(sp)
    cb7c:	|  |  \-> move.l 1c99c <numGlobals>,d0
    cb82:	|  |      cmp.l 256(sp),d0
    cb86:	|  \----- bgt.s cb5c <saveGame+0x34c>
	}

	savePeople (fp);
    cb88:	|         move.l 232(sp),-(sp)
    cb8c:	|         jsr b1e0 <savePeople>
    cb92:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    cb94:	|         movea.l 1cae0 <currentFloor>,a0
    cb9a:	|         move.l 8(a0),d0
    cb9e:	|  /----- beq.s cbdc <saveGame+0x3cc>
		FPutC (fp, 1);
    cba0:	|  |      move.l 232(sp),76(sp)
    cba6:	|  |      moveq #1,d0
    cba8:	|  |      move.l d0,72(sp)
    cbac:	|  |      move.l 1c9cc <DOSBase>,d0
    cbb2:	|  |      movea.l d0,a6
    cbb4:	|  |      move.l 76(sp),d1
    cbb8:	|  |      move.l 72(sp),d2
    cbbc:	|  |      jsr -312(a6)
    cbc0:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cbc4:	|  |      movea.l 1cae0 <currentFloor>,a0
    cbca:	|  |      move.l (a0),d0
    cbcc:	|  |      move.l 232(sp),-(sp)
    cbd0:	|  |      move.l d0,-(sp)
    cbd2:	|  |      jsr 8d0 <put2bytes>
    cbd8:	|  |      addq.l #8,sp
    cbda:	|  |  /-- bra.s cbfe <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cbdc:	|  \--|-> move.l 232(sp),88(sp)
    cbe2:	|     |   clr.l 84(sp)
    cbe6:	|     |   move.l 1c9cc <DOSBase>,d0
    cbec:	|     |   movea.l d0,a6
    cbee:	|     |   move.l 88(sp),d1
    cbf2:	|     |   move.l 84(sp),d2
    cbf6:	|     |   jsr -312(a6)
    cbfa:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cbfe:	|     \-> move.l 232(sp),64(sp)
    cc04:	|         move.l 1ca92 <speechMode>,60(sp)
    cc0c:	|         move.l 1c9cc <DOSBase>,d0
    cc12:	|         movea.l d0,a6
    cc14:	|         move.l 64(sp),d1
    cc18:	|         move.l 60(sp),d2
    cc1c:	|         jsr -312(a6)
    cc20:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cc24:	|         move.b 1c89e <fadeMode>,d0
    cc2a:	|         move.b d0,d0
    cc2c:	|         andi.l #255,d0
    cc32:	|         move.l d0,52(sp)
    cc36:	|         move.l 232(sp),48(sp)
    cc3c:	|         move.l 1c9cc <DOSBase>,d0
    cc42:	|         movea.l d0,a6
    cc44:	|         move.l 52(sp),d1
    cc48:	|         move.l 48(sp),d2
    cc4c:	|         jsr -312(a6)
    cc50:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cc54:	|         move.l 1ca20 <speech>,d0
    cc5a:	|         move.l 232(sp),-(sp)
    cc5e:	|         move.l d0,-(sp)
    cc60:	|         jsr 815a <saveSpeech>
    cc66:	|         addq.l #8,sp
	saveStatusBars (fp);
    cc68:	|         move.l 232(sp),-(sp)
    cc6c:	|         jsr 7b56 <saveStatusBars>
    cc72:	|         addq.l #4,sp
	saveSounds (fp);
    cc74:	|         move.l 232(sp),-(sp)
    cc78:	|         jsr d216 <saveSounds>
    cc7e:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cc80:	|         move.w 1ca7c <saveEncoding>,d0
    cc86:	|         move.w d0,d0
    cc88:	|         andi.l #65535,d0
    cc8e:	|         move.l 232(sp),-(sp)
    cc92:	|         move.l d0,-(sp)
    cc94:	|         jsr 8d0 <put2bytes>
    cc9a:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cc9c:	|         move.l 1ca6e <parallaxStuff>,d0
    cca2:	|         move.l 232(sp),-(sp)
    cca6:	|         move.l d0,-(sp)
    cca8:	|         jsr d50e <saveParallaxRecursive>
    ccae:	|         addq.l #8,sp
	FPutC (fp, 0);
    ccb0:	|         move.l 232(sp),40(sp)
    ccb6:	|         clr.l 36(sp)
    ccba:	|         move.l 1c9cc <DOSBase>,d0
    ccc0:	|         movea.l d0,a6
    ccc2:	|         move.l 40(sp),d1
    ccc6:	|         move.l 36(sp),d2
    ccca:	|         jsr -312(a6)
    ccce:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    ccd2:	|         move.l 232(sp),28(sp)
    ccd8:	|         move.l 1c340 <languageNum>,24(sp)
    cce0:	|         move.l 1c9cc <DOSBase>,d0
    cce6:	|         movea.l d0,a6
    cce8:	|         move.l 28(sp),d1
    ccec:	|         move.l 24(sp),d2
    ccf0:	|         jsr -312(a6)
    ccf4:	|         move.l d0,20(sp)

	Close(fp);
    ccf8:	|         move.l 232(sp),16(sp)
    ccfe:	|         move.l 1c9cc <DOSBase>,d0
    cd04:	|         movea.l d0,a6
    cd06:	|         move.l 16(sp),d1
    cd0a:	|         jsr -36(a6)
    cd0e:	|         move.l d0,12(sp)
	clearStackLib ();
    cd12:	|         jsr c30e <clearStackLib>
	return TRUE;
    cd18:	|         moveq #1,d0
}
    cd1a:	\-------> movem.l (sp)+,d2-d3/a6
    cd1e:	          lea 248(sp),sp
    cd22:	          rts

0000cd24 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cd24:	       lea -12(sp),sp
	int elements = 0;
    cd28:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cd2c:	       move.l 16(sp),(sp)
	while (search) {
    cd30:	   /-- bra.s cd3c <saveStack+0x18>
		elements ++;
    cd32:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    cd36:	|  |   movea.l (sp),a0
    cd38:	|  |   move.l 8(a0),(sp)
	while (search) {
    cd3c:	|  \-> tst.l (sp)
    cd3e:	\----- bne.s cd32 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cd40:	       move.l 20(sp),-(sp)
    cd44:	       move.l 12(sp),-(sp)
    cd48:	       jsr 8d0 <put2bytes>
    cd4e:	       addq.l #8,sp
	search = vs;
    cd50:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cd54:	       clr.l 4(sp)
    cd58:	   /-- bra.s cd74 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cd5a:	/--|-> move.l (sp),d0
    cd5c:	|  |   move.l 20(sp),-(sp)
    cd60:	|  |   move.l d0,-(sp)
    cd62:	|  |   jsr ceb0 <saveVariable>
    cd68:	|  |   addq.l #8,sp
		search = search -> next;
    cd6a:	|  |   movea.l (sp),a0
    cd6c:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cd70:	|  |   addq.l #1,4(sp)
    cd74:	|  \-> move.l 4(sp),d0
    cd78:	|      cmp.l 8(sp),d0
    cd7c:	\----- blt.s cd5a <saveStack+0x36>
	}
}
    cd7e:	       nop
    cd80:	       nop
    cd82:	       lea 12(sp),sp
    cd86:	       rts

0000cd88 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    cd88:	             lea -44(sp),sp
    cd8c:	             move.l a6,-(sp)
    cd8e:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cd90:	             move.l 1ca54 <stackLib>,48(sp)
	int a = 0;
    cd98:	             clr.l 44(sp)
	while (s) {
    cd9c:	      /----- bra.s cdfa <saveStackRef+0x72>
		if (s -> stack == vs) {
    cd9e:	   /--|----> movea.l 48(sp),a0
    cda2:	   |  |      move.l (a0),d0
    cda4:	   |  |      cmp.l 56(sp),d0
    cda8:	   |  |  /-- bne.s cdec <saveStackRef+0x64>
			FPutC (fp, 1);
    cdaa:	   |  |  |   move.l 60(sp),16(sp)
    cdb0:	   |  |  |   moveq #1,d0
    cdb2:	   |  |  |   move.l d0,12(sp)
    cdb6:	   |  |  |   move.l 1c9cc <DOSBase>,d0
    cdbc:	   |  |  |   movea.l d0,a6
    cdbe:	   |  |  |   move.l 16(sp),d1
    cdc2:	   |  |  |   move.l 12(sp),d2
    cdc6:	   |  |  |   jsr -312(a6)
    cdca:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cdce:	   |  |  |   move.l 1ca50 <stackLibTotal>,d0
    cdd4:	   |  |  |   sub.l 44(sp),d0
    cdd8:	   |  |  |   move.l 60(sp),-(sp)
    cddc:	   |  |  |   move.l d0,-(sp)
    cdde:	   |  |  |   jsr 8d0 <put2bytes>
    cde4:	   |  |  |   addq.l #8,sp
			return TRUE;
    cde6:	   |  |  |   moveq #1,d0
    cde8:	/--|--|--|-- bra.w cea6 <saveStackRef+0x11e>
		}
		s = s -> next;
    cdec:	|  |  |  \-> movea.l 48(sp),a0
    cdf0:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cdf6:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cdfa:	|  |  \----> tst.l 48(sp)
    cdfe:	|  \-------- bne.s cd9e <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    ce00:	|            move.l 60(sp),40(sp)
    ce06:	|            clr.l 36(sp)
    ce0a:	|            move.l 1c9cc <DOSBase>,d0
    ce10:	|            movea.l d0,a6
    ce12:	|            move.l 40(sp),d1
    ce16:	|            move.l 36(sp),d2
    ce1a:	|            jsr -312(a6)
    ce1e:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    ce22:	|            movea.l 56(sp),a0
    ce26:	|            move.l (a0),d0
    ce28:	|            move.l 60(sp),-(sp)
    ce2c:	|            move.l d0,-(sp)
    ce2e:	|            jsr cd24 <saveStack>
    ce34:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    ce36:	|            moveq #8,d0
    ce38:	|            move.l d0,28(sp)
    ce3c:	|            clr.l 24(sp)
    ce40:	|            move.l 1c9c4 <SysBase>,d0
    ce46:	|            movea.l d0,a6
    ce48:	|            move.l 28(sp),d0
    ce4c:	|            move.l 24(sp),d1
    ce50:	|            jsr -684(a6)
    ce54:	|            move.l d0,20(sp)
    ce58:	|            move.l 20(sp),d0
    ce5c:	|            move.l d0,48(sp)
	stackLibTotal ++;
    ce60:	|            move.l 1ca50 <stackLibTotal>,d0
    ce66:	|            addq.l #1,d0
    ce68:	|            move.l d0,1ca50 <stackLibTotal>
	if (! s) {
    ce6e:	|            tst.l 48(sp)
    ce72:	|        /-- bne.s ce86 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    ce74:	|        |   pea 193ed <PutChar+0x167b>
    ce7a:	|        |   jsr 1729e <KPrintF>
    ce80:	|        |   addq.l #4,sp
		return FALSE;
    ce82:	|        |   clr.w d0
    ce84:	+--------|-- bra.s cea6 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    ce86:	|        \-> move.l 1ca54 <stackLib>,d0
    ce8c:	|            movea.l 48(sp),a0
    ce90:	|            move.l d0,4(a0)
	s -> stack = vs;
    ce94:	|            movea.l 48(sp),a0
    ce98:	|            move.l 56(sp),(a0)
	stackLib = s;
    ce9c:	|            move.l 48(sp),1ca54 <stackLib>
	return TRUE;
    cea4:	|            moveq #1,d0
}
    cea6:	\----------> move.l (sp)+,d2
    cea8:	             movea.l (sp)+,a6
    ceaa:	             lea 44(sp),sp
    ceae:	             rts

0000ceb0 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    ceb0:	          lea -12(sp),sp
    ceb4:	          move.l a6,-(sp)
    ceb6:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    ceb8:	          move.l 28(sp),16(sp)
    cebe:	          movea.l 24(sp),a0
    cec2:	          move.l (a0),d0
    cec4:	          move.l d0,12(sp)
    cec8:	          move.l 1c9cc <DOSBase>,d0
    cece:	          movea.l d0,a6
    ced0:	          move.l 16(sp),d1
    ced4:	          move.l 12(sp),d2
    ced8:	          jsr -312(a6)
    cedc:	          move.l d0,8(sp)
	switch (from -> varType) {
    cee0:	          movea.l 24(sp),a0
    cee4:	          move.l (a0),d0
    cee6:	          moveq #9,d1
    cee8:	          cmp.l d0,d1
    ceea:	      /-- bcs.w cf9a <saveVariable+0xea>
    ceee:	      |   add.l d0,d0
    cef0:	      |   movea.l d0,a0
    cef2:	      |   adda.l #52990,a0
    cef8:	      |   move.w (a0),d0
    cefa:	      |   jmp (cefe <saveVariable+0x4e>,pc,d0.w)
    cefe:	      |   ori.l #1310740,(a0)+
    cf04:	      |   ori.b #20,(20,a0,d0.w)
    cf0a:	      |   .short 0x004c
    cf0c:	      |   ori.b #126,(a4)
    cf10:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    cf14:	      |   ori.b #40,(a0)+
    cf18:	      |   ori.b #47,d4
    cf1c:	      |   ori.b #0,(a4)+
    cf20:	      |   jsr 958 <put4bytes>
    cf26:	      |   addq.l #8,sp
		return TRUE;
    cf28:	      |   moveq #1,d0
    cf2a:	/-----|-- bra.w cfd6 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    cf2e:	|     |   movea.l 24(sp),a0
    cf32:	|     |   move.l 4(a0),d0
    cf36:	|     |   move.l 28(sp),-(sp)
    cf3a:	|     |   move.l d0,-(sp)
    cf3c:	|     |   jsr bd8 <writeString>
    cf42:	|     |   addq.l #8,sp
		return TRUE;
    cf44:	|     |   moveq #1,d0
    cf46:	+-----|-- bra.w cfd6 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    cf4a:	|     |   movea.l 24(sp),a0
    cf4e:	|     |   move.l 4(a0),d0
    cf52:	|     |   move.l 28(sp),-(sp)
    cf56:	|     |   move.l d0,-(sp)
    cf58:	|     |   jsr cd88 <saveStackRef>
    cf5e:	|     |   addq.l #8,sp
    cf60:	+-----|-- bra.s cfd6 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    cf62:	|     |   movea.l 24(sp),a0
    cf66:	|     |   move.l 4(a0),d0
    cf6a:	|     |   move.l 28(sp),-(sp)
    cf6e:	|     |   move.l d0,-(sp)
    cf70:	|     |   jsr b182 <saveCostume>
    cf76:	|     |   addq.l #8,sp
		return FALSE;
    cf78:	|     |   clr.w d0
    cf7a:	+-----|-- bra.s cfd6 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cf7c:	|     |   movea.l 24(sp),a0
    cf80:	|     |   move.l 4(a0),d0
    cf84:	|     |   move.l 28(sp),-(sp)
    cf88:	|     |   move.l d0,-(sp)
    cf8a:	|     |   jsr b0b8 <saveAnim>
    cf90:	|     |   addq.l #8,sp
		return FALSE;
    cf92:	|     |   clr.w d0
    cf94:	+-----|-- bra.s cfd6 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cf96:	|     |   clr.w d0
    cf98:	+-----|-- bra.s cfd6 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cf9a:	|     \-> movea.l 24(sp),a0
    cf9e:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cfa0:	|         moveq #10,d1
    cfa2:	|         cmp.l d0,d1
    cfa4:	|  /----- bcs.s cfbe <saveVariable+0x10e>
						typeName[from->varType] :
    cfa6:	|  |      movea.l 24(sp),a0
    cfaa:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cfac:	|  |      add.l d0,d0
    cfae:	|  |      movea.l d0,a1
    cfb0:	|  |      adda.l d0,a1
    cfb2:	|  |      lea 1c8a0 <typeName>,a0
    cfb8:	|  |      move.l (0,a1,a0.l),d0
    cfbc:	|  |  /-- bra.s cfc4 <saveVariable+0x114>
    cfbe:	|  \--|-> move.l #103442,d0
    cfc4:	|     \-> move.l d0,-(sp)
    cfc6:	|         pea 19419 <PutChar+0x16a7>
    cfcc:	|         jsr 1729e <KPrintF>
    cfd2:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cfd4:	|         moveq #1,d0
    cfd6:	\-------> move.l (sp)+,d2
    cfd8:	          movea.l (sp)+,a6
    cfda:	          lea 12(sp),sp
    cfde:	          rts

0000cfe0 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cfe0:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cfe4:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cfec:	          movea.l 4(sp),a0
    cff0:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cff6:	          movea.l 4(sp),a0
    cffa:	          move.w 10(a0),d0
    cffe:	          lsr.w #8,d0
    d000:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d004:	          movea.l 4(sp),a0
    d008:	          move.w 10(a0),d0
    d00c:	          move.b d0,(sp)

    if(counterx_new)
    d00e:	/-------- beq.w d0b4 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d012:	|         clr.w d1
    d014:	|         move.b (sp),d1
    d016:	|         move.w 1ca5c <counterx_old>,d0
    d01c:	|         sub.w d0,d1
    d01e:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d022:	|         cmpi.w #128,10(sp)
    d028:	|     /-- blt.s d040 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d02a:	|     |   move.w #1,1c97a <input+0x4>
            counterx_diff -= 256;    
    d032:	|     |   move.w 10(sp),d0
    d036:	|     |   addi.w #-256,d0
    d03a:	|     |   move.w d0,10(sp)
    d03e:	|  /--|-- bra.s d06c <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d040:	|  |  \-> cmpi.w #-129,10(sp)
    d046:	|  |  /-- bgt.s d05e <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d048:	|  |  |   move.w 10(sp),d0
    d04c:	|  |  |   addi.w #256,d0
    d050:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d054:	|  |  |   move.w #1,1c97a <input+0x4>
    d05c:	|  +--|-- bra.s d06c <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d05e:	|  |  \-> tst.w 10(sp)
    d062:	|  +----- beq.s d06c <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d064:	|  |      move.w #1,1c97a <input+0x4>
        }

        input.mouseX += counterx_diff;
    d06c:	|  \----> move.l 1c980 <input+0xa>,d0
    d072:	|         movea.w 10(sp),a0
    d076:	|         add.l a0,d0
    d078:	|         move.l d0,1c980 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d07e:	|         move.l 1c980 <input+0xa>,d1
    d084:	|         move.l 1c918 <winWidth>,d0
    d08a:	|         cmp.l d1,d0
    d08c:	|     /-- bge.s d09c <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d08e:	|     |   move.l 1c918 <winWidth>,d0
    d094:	|     |   move.l d0,1c980 <input+0xa>
    d09a:	|  /--|-- bra.s d0aa <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d09c:	|  |  \-> move.l 1c980 <input+0xa>,d0
    d0a2:	|  +----- bpl.s d0aa <CsiCheckInput+0xca>
            input.mouseX = 0;
    d0a4:	|  |      clr.l 1c980 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d0aa:	|  \----> clr.w d0
    d0ac:	|         move.b (sp),d0
    d0ae:	|         move.w d0,1ca5c <counterx_old>
    }    

    if(countery_new)
    d0b4:	\-------> tst.b 1(sp)
    d0b8:	/-------- beq.w d162 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d0bc:	|         clr.w d1
    d0be:	|         move.b 1(sp),d1
    d0c2:	|         move.w 1ca5e <countery_old>,d0
    d0c8:	|         sub.w d0,d1
    d0ca:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d0ce:	|         cmpi.w #128,8(sp)
    d0d4:	|     /-- blt.s d0ec <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d0d6:	|     |   move.w #1,1c97a <input+0x4>
            countery_diff -= 256;    
    d0de:	|     |   move.w 8(sp),d0
    d0e2:	|     |   addi.w #-256,d0
    d0e6:	|     |   move.w d0,8(sp)
    d0ea:	|  /--|-- bra.s d118 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d0ec:	|  |  \-> cmpi.w #-129,8(sp)
    d0f2:	|  |  /-- bgt.s d10a <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d0f4:	|  |  |   move.w #1,1c97a <input+0x4>
            countery_diff += 256;
    d0fc:	|  |  |   move.w 8(sp),d0
    d100:	|  |  |   addi.w #256,d0
    d104:	|  |  |   move.w d0,8(sp)
    d108:	|  +--|-- bra.s d118 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d10a:	|  |  \-> tst.w 8(sp)
    d10e:	|  +----- beq.s d118 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d110:	|  |      move.w #1,1c97a <input+0x4>
        }

        input.mouseY += countery_diff;
    d118:	|  \----> move.l 1c984 <input+0xe>,d0
    d11e:	|         movea.w 8(sp),a0
    d122:	|         add.l a0,d0
    d124:	|         move.l d0,1c984 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d12a:	|         move.l 1c984 <input+0xe>,d1
    d130:	|         move.l 1c91c <winHeight>,d0
    d136:	|         cmp.l d1,d0
    d138:	|     /-- bge.s d148 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d13a:	|     |   move.l 1c91c <winHeight>,d0
    d140:	|     |   move.l d0,1c984 <input+0xe>
    d146:	|  /--|-- bra.s d156 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d148:	|  |  \-> move.l 1c984 <input+0xe>,d0
    d14e:	|  +----- bpl.s d156 <CsiCheckInput+0x176>
            input.mouseY = 0;
    d150:	|  |      clr.l 1c984 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d156:	|  \----> clr.w d0
    d158:	|         move.b 1(sp),d0
    d15c:	|         move.w d0,1ca5e <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d162:	\-------> move.w 1c976 <input>,d0
    d168:	      /-- beq.s d18e <CsiCheckInput+0x1ae>
    d16a:	      |   movea.l #12574721,a0
    d170:	      |   move.b (a0),d0
    d172:	      |   move.b d0,d0
    d174:	      |   andi.l #255,d0
    d17a:	      |   moveq #64,d1
    d17c:	      |   and.l d1,d0
    d17e:	      +-- beq.s d18e <CsiCheckInput+0x1ae>
    {
        input.leftClick = FALSE;
    d180:	      |   clr.w 1c976 <input>
        input.leftRelease = TRUE;
    d186:	      |   move.w #1,1c97c <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d18e:	      \-> move.w 1c978 <input+0x2>,d0
    d194:	      /-- beq.s d1bc <CsiCheckInput+0x1dc>
    d196:	      |   movea.l #14675990,a0
    d19c:	      |   move.w (a0),d0
    d19e:	      |   move.w d0,d0
    d1a0:	      |   andi.l #65535,d0
    d1a6:	      |   andi.l #1024,d0
    d1ac:	      +-- beq.s d1bc <CsiCheckInput+0x1dc>
    {
        input.rightClick = FALSE;
    d1ae:	      |   clr.w 1c978 <input+0x2>
        input.rightRelease = TRUE;
    d1b4:	      |   move.w #1,1c97e <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d1bc:	      \-> movea.l #12574721,a0
    d1c2:	          move.b (a0),d0
    d1c4:	          move.b d0,d0
    d1c6:	          andi.l #255,d0
    d1cc:	          moveq #64,d1
    d1ce:	          and.l d1,d0
    d1d0:	      /-- bne.s d1da <CsiCheckInput+0x1fa>
        input.leftClick = TRUE;        
    d1d2:	      |   move.w #1,1c976 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d1da:	      \-> movea.l #14675990,a0
    d1e0:	          move.w (a0),d0
    d1e2:	          move.w d0,d0
    d1e4:	          andi.l #65535,d0
    d1ea:	          andi.l #1024,d0
    d1f0:	      /-- bne.s d1fa <CsiCheckInput+0x21a>
        input.rightClick = TRUE;
    d1f2:	      |   move.w #1,1c978 <input+0x2>
    }

    d1fa:	      \-> nop
    d1fc:	          lea 12(sp),sp
    d200:	          rts

0000d202 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d202:	moveq #0,d0
}
    d204:	rts

0000d206 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d206:	nop
    d208:	rts

0000d20a <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d20a:	nop
    d20c:	rts

0000d20e <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d20e:	moveq #1,d0
}
    d210:	rts

0000d212 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d212:	nop
    d214:	rts

0000d216 <saveSounds>:

void saveSounds (BPTR fp) {
    d216:	lea -12(sp),sp
    d21a:	move.l a6,-(sp)
    d21c:	move.l d2,-(sp)
	FPutC (fp,0);
    d21e:	move.l 24(sp),16(sp)
    d224:	clr.l 12(sp)
    d228:	move.l 1c9cc <DOSBase>,d0
    d22e:	movea.l d0,a6
    d230:	move.l 16(sp),d1
    d234:	move.l 12(sp),d2
    d238:	jsr -312(a6)
    d23c:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d240:	move.l 1c35e <defSoundVol>,d0
    d246:	move.l 24(sp),-(sp)
    d24a:	move.l d0,-(sp)
    d24c:	jsr 8d0 <put2bytes>
    d252:	addq.l #8,sp
	put2bytes (defVol, fp);
    d254:	move.l 1c35a <defVol>,d0
    d25a:	move.l 24(sp),-(sp)
    d25e:	move.l d0,-(sp)
    d260:	jsr 8d0 <put2bytes>
    d266:	addq.l #8,sp
}
    d268:	nop
    d26a:	move.l (sp)+,d2
    d26c:	movea.l (sp)+,a6
    d26e:	lea 12(sp),sp
    d272:	rts

0000d274 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d274:	move.l 4(sp),1c35a <defVol>
}
    d27c:	nop
    d27e:	rts

0000d280 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d280:	move.l 4(sp),1c35e <defSoundVol>
}
    d288:	nop
    d28a:	rts

0000d28c <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d28c:	nop
    d28e:	rts

0000d290 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d290:	nop
    d292:	rts

0000d294 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d294:	nop
    d296:	rts

0000d298 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d298:	subq.l #4,sp
    d29a:	move.l 12(sp),d0
    d29e:	move.w d0,d0
    d2a0:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d2a4:	moveq #1,d0
}
    d2a6:	addq.l #4,sp
    d2a8:	rts

0000d2aa <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d2aa:	nop
    d2ac:	rts

0000d2ae <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d2ae:	move.l 16(sp),-(sp)
    d2b2:	move.l 16(sp),-(sp)
    d2b6:	jsr e0e <CstBlankScreen>
    d2bc:	addq.l #8,sp
}
    d2be:	nop
    d2c0:	rts

0000d2c2 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d2c2:	pea 1943c <PutChar+0x16ca>
    d2c8:	jsr 1729e <KPrintF>
    d2ce:	addq.l #4,sp
}
    d2d0:	nop
    d2d2:	rts

0000d2d4 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d2d4:	movea.l 8(sp),a1
    d2d8:	movea.l 12(sp),a0
    d2dc:	move.l 8(sp),d1
    d2e0:	move.l 4(sp),d0
    d2e4:	move.l a1,-(sp)
    d2e6:	move.l a0,-(sp)
    d2e8:	move.l d1,-(sp)
    d2ea:	move.l d0,-(sp)
    d2ec:	jsr 3fa4 <drawLine>
    d2f2:	lea 16(sp),sp
}
    d2f6:	nop
    d2f8:	rts

0000d2fa <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d2fa:	movea.l 12(sp),a1
    d2fe:	movea.l 4(sp),a0
    d302:	move.l 8(sp),d1
    d306:	move.l 4(sp),d0
    d30a:	move.l a1,-(sp)
    d30c:	move.l a0,-(sp)
    d30e:	move.l d1,-(sp)
    d310:	move.l d0,-(sp)
    d312:	jsr 3fa4 <drawLine>
    d318:	lea 16(sp),sp
}
    d31c:	nop
    d31e:	rts

0000d320 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d320:	pea 19475 <PutChar+0x1703>
    d326:	jsr 1729e <KPrintF>
    d32c:	addq.l #4,sp
}
    d32e:	nop
    d330:	rts

0000d332 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d332:	jsr 1d8e <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d338:	pea 1ca68 <backdropTextureName>
    d33e:	pea 1 <_start+0x1>
    d342:	jsr 4126 <deleteTextures>
    d348:	addq.l #8,sp
	backdropTextureName = 0;
    d34a:	clr.l 1ca68 <backdropTextureName>
	backdropExists = FALSE;
    d350:	clr.w 1ca6c <backdropExists>
}
    d356:	nop
    d358:	rts

0000d35a <killParallax>:

void killParallax () {
    d35a:	          lea -12(sp),sp
    d35e:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d360:	   /----- bra.s d3cc <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d362:	/--|----> move.l 1ca6e <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d36a:	|  |      movea.l 12(sp),a0
    d36e:	|  |      move.l 42(a0),d0
    d372:	|  |      move.l d0,1ca6e <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d378:	|  |      move.l 12(sp),d0
    d37c:	|  |      addq.l #4,d0
    d37e:	|  |      move.l d0,-(sp)
    d380:	|  |      pea 1 <_start+0x1>
    d384:	|  |      jsr 4126 <deleteTextures>
    d38a:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d38c:	|  |      movea.l 12(sp),a0
    d390:	|  |      move.l (a0),d0
    d392:	|  |  /-- beq.s d3ac <killParallax+0x52>
    d394:	|  |  |   movea.l 12(sp),a0
    d398:	|  |  |   move.l (a0),8(sp)
    d39c:	|  |  |   move.l 1c9c4 <SysBase>,d0
    d3a2:	|  |  |   movea.l d0,a6
    d3a4:	|  |  |   movea.l 8(sp),a1
    d3a8:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d3ac:	|  |  \-> tst.l 12(sp)
    d3b0:	|  |  /-- beq.s d3c8 <killParallax+0x6e>
    d3b2:	|  |  |   move.l 12(sp),4(sp)
    d3b8:	|  |  |   move.l 1c9c4 <SysBase>,d0
    d3be:	|  |  |   movea.l d0,a6
    d3c0:	|  |  |   movea.l 4(sp),a1
    d3c4:	|  |  |   jsr -690(a6)
		k = NULL;
    d3c8:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    d3cc:	|  \----> move.l 1ca6e <parallaxStuff>,d0
    d3d2:	\-------- bne.s d362 <killParallax+0x8>
	}
}
    d3d4:	          nop
    d3d6:	          nop
    d3d8:	          movea.l (sp)+,a6
    d3da:	          lea 12(sp),sp
    d3de:	          rts

0000d3e0 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d3e0:	       move.l 4(sp),-(sp)
    d3e4:	       jsr 6eb2 <openFileFromNum>
    d3ea:	       addq.l #4,sp
    d3ec:	       tst.l d0
    d3ee:	   /-- bne.s d400 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d3f0:	   |   pea 19496 <PutChar+0x1724>
    d3f6:	   |   jsr 1729e <KPrintF>
    d3fc:	   |   addq.l #4,sp
		return;
    d3fe:	/--|-- bra.s d420 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d400:	|  \-> move.l 1c9ac <bigDataFile>,d0
    d406:	|      move.l 12(sp),-(sp)
    d40a:	|      move.l 12(sp),-(sp)
    d40e:	|      move.l d0,-(sp)
    d410:	|      jsr 203c <CstLoadBackdrop>
    d416:	|      lea 12(sp),sp
	finishAccess ();
    d41a:	|      jsr 6daa <finishAccess>
	
}
    d420:	\----> rts

0000d422 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d422:	subq.l #8,sp
    d424:	movea.l 12(sp),a0
    d428:	move.l 16(sp),d1
    d42c:	move.l 20(sp),d0
    d430:	movea.w a0,a0
    d432:	move.w a0,6(sp)
    d436:	move.w d1,d1
    d438:	move.w d1,4(sp)
    d43c:	move.w d0,d0
    d43e:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d442:	pea 194e5 <PutChar+0x1773>
    d448:	jsr 1729e <KPrintF>
    d44e:	addq.l #4,sp

}
    d450:	nop
    d452:	addq.l #8,sp
    d454:	rts

0000d456 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d456:	pea 19508 <PutChar+0x1796>
    d45c:	jsr 1729e <KPrintF>
    d462:	addq.l #4,sp
}
    d464:	nop
    d466:	rts

0000d468 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d468:	pea 1ca72 <snapshotTextureName>
    d46e:	pea 1 <_start+0x1>
    d472:	jsr 4126 <deleteTextures>
    d478:	addq.l #8,sp
	snapshotTextureName = 0;
    d47a:	clr.l 1ca72 <snapshotTextureName>
}
    d480:	nop
    d482:	rts

0000d484 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d484:	clr.l 1ca7e <cameraX>
	cameraY = 0;
    d48a:	clr.l 1ca82 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d490:	move.l 1ca64 <sceneHeight>,d0
    d496:	move.l d0,d1
    d498:	move.l 1ca60 <sceneWidth>,d0
    d49e:	move.l d1,-(sp)
    d4a0:	move.l d0,-(sp)
    d4a2:	jsr 3aaa <CstReserveBackdrop>
    d4a8:	addq.l #8,sp
}
    d4aa:	rts

0000d4ac <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d4ac:	jsr d332 <killBackDrop>
	killParallax ();
    d4b2:	jsr d35a <killParallax>
	killZBuffer ();
    d4b8:	jsr 8854 <killZBuffer>
	sceneWidth = x;
    d4be:	move.l 4(sp),d0
    d4c2:	move.l d0,1ca60 <sceneWidth>
	sceneHeight = y;
    d4c8:	move.l 8(sp),d0
    d4cc:	move.l d0,1ca64 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d4d2:	pea 19541 <PutChar+0x17cf>
    d4d8:	jsr 1729e <KPrintF>
    d4de:	addq.l #4,sp
	return reserveBackdrop();
    d4e0:	jsr d484 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d4e6:	rts

0000d4e8 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d4e8:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d4ea:	move.l 12(sp),-(sp)
    d4ee:	jsr 6bc <get2bytes>
    d4f4:	addq.l #4,sp
    d4f6:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d4fa:	move.l 12(sp),-(sp)
    d4fe:	jsr 6bc <get2bytes>
    d504:	addq.l #4,sp
    d506:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d508:	moveq #1,d0
}
    d50a:	addq.l #8,sp
    d50c:	rts

0000d50e <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d50e:	   /-> lea -12(sp),sp
    d512:	   |   move.l a6,-(sp)
    d514:	   |   move.l d2,-(sp)
	if (me) {
    d516:	   |   tst.l 24(sp)
    d51a:	/--|-- beq.w d5b0 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d51e:	|  |   movea.l 24(sp),a0
    d522:	|  |   move.l 42(a0),d0
    d526:	|  |   move.l 28(sp),-(sp)
    d52a:	|  |   move.l d0,-(sp)
    d52c:	|  \-- jsr d50e <saveParallaxRecursive>(pc)
    d530:	|      addq.l #8,sp
		FPutC (fp, 1);
    d532:	|      move.l 28(sp),16(sp)
    d538:	|      moveq #1,d0
    d53a:	|      move.l d0,12(sp)
    d53e:	|      move.l 1c9cc <DOSBase>,d0
    d544:	|      movea.l d0,a6
    d546:	|      move.l 16(sp),d1
    d54a:	|      move.l 12(sp),d2
    d54e:	|      jsr -312(a6)
    d552:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d556:	|      movea.l 24(sp),a0
    d55a:	|      move.w 28(a0),d0
    d55e:	|      move.w d0,d0
    d560:	|      andi.l #65535,d0
    d566:	|      move.l 28(sp),-(sp)
    d56a:	|      move.l d0,-(sp)
    d56c:	|      jsr 8d0 <put2bytes>
    d572:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d574:	|      movea.l 24(sp),a0
    d578:	|      move.w 30(a0),d0
    d57c:	|      move.w d0,d0
    d57e:	|      andi.l #65535,d0
    d584:	|      move.l 28(sp),-(sp)
    d588:	|      move.l d0,-(sp)
    d58a:	|      jsr 8d0 <put2bytes>
    d590:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d592:	|      movea.l 24(sp),a0
    d596:	|      move.w 32(a0),d0
    d59a:	|      move.w d0,d0
    d59c:	|      andi.l #65535,d0
    d5a2:	|      move.l 28(sp),-(sp)
    d5a6:	|      move.l d0,-(sp)
    d5a8:	|      jsr 8d0 <put2bytes>
    d5ae:	|      addq.l #8,sp
	}
}
    d5b0:	\----> nop
    d5b2:	       move.l (sp)+,d2
    d5b4:	       movea.l (sp)+,a6
    d5b6:	       lea 12(sp),sp
    d5ba:	       rts

0000d5bc <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d5bc:	pea 19568 <PutChar+0x17f6>
    d5c2:	jsr 1729e <KPrintF>
    d5c8:	addq.l #4,sp
	return TRUE;
    d5ca:	moveq #1,d0
    d5cc:	rts

0000d5ce <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d5ce:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d5d0:	             move.l 1ca76 <allObjectTypes>,(sp)

	while (huntType) {
    d5d6:	      /----- bra.s d5ee <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d5d8:	   /--|----> movea.l (sp),a0
    d5da:	   |  |      move.l 4(a0),d0
    d5de:	   |  |      cmp.l 8(sp),d0
    d5e2:	   |  |  /-- bne.s d5e8 <findObjectType+0x1a>
    d5e4:	   |  |  |   move.l (sp),d0
    d5e6:	/--|--|--|-- bra.s d5fe <findObjectType+0x30>
		huntType = huntType -> next;
    d5e8:	|  |  |  \-> movea.l (sp),a0
    d5ea:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d5ee:	|  |  \----> tst.l (sp)
    d5f0:	|  \-------- bne.s d5d8 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d5f2:	|            move.l 8(sp),-(sp)
    d5f6:	|            jsr d6be <loadObjectType>
    d5fc:	|            addq.l #4,sp
}
    d5fe:	\----------> addq.l #4,sp
    d600:	             rts

0000d602 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d602:	             lea -12(sp),sp
	int i, num = 0;
    d606:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d60a:	             move.l 20(sp),-(sp)
    d60e:	             jsr d5ce <findObjectType>
    d614:	             addq.l #4,sp
    d616:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d618:	             clr.l 8(sp)
    d61c:	   /-------- bra.s d652 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d61e:	/--|-------> movea.l (sp),a0
    d620:	|  |         move.l 38(a0),d1
    d624:	|  |         move.l 8(sp),d0
    d628:	|  |         lsl.l #3,d0
    d62a:	|  |         movea.l d1,a0
    d62c:	|  |         adda.l d0,a0
    d62e:	|  |         move.l (a0),d0
    d630:	|  |         cmp.l 16(sp),d0
    d634:	|  |  /----- bne.s d64e <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d636:	|  |  |      movea.l (sp),a0
    d638:	|  |  |      move.l 38(a0),d1
    d63c:	|  |  |      move.l 8(sp),d0
    d640:	|  |  |      lsl.l #3,d0
    d642:	|  |  |      movea.l d1,a0
    d644:	|  |  |      adda.l d0,a0
    d646:	|  |  |      move.l 4(a0),4(sp)
			break;
    d64c:	|  |  |  /-- bra.s d65e <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d64e:	|  |  \--|-> addq.l #1,8(sp)
    d652:	|  \-----|-> movea.l (sp),a0
    d654:	|        |   move.l 16(a0),d0
    d658:	|        |   cmp.l 8(sp),d0
    d65c:	\--------|-- bgt.s d61e <getCombinationFunction+0x1c>
		}
	}

	return num;
    d65e:	         \-> move.l 4(sp),d0
}
    d662:	             lea 12(sp),sp
    d666:	             rts

0000d668 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d668:	moveq #1,d0
}
    d66a:	rts

0000d66c <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d66c:	subq.l #8,sp
    d66e:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d670:	move.l 16(sp),-(sp)
    d674:	jsr 6bc <get2bytes>
    d67a:	addq.l #4,sp
    d67c:	move.l d0,-(sp)
    d67e:	jsr d6be <loadObjectType>
    d684:	addq.l #4,sp
    d686:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d68a:	movea.l 8(sp),a0
    d68e:	move.l (a0),4(sp)
    d692:	move.l 1c9c4 <SysBase>,d0
    d698:	movea.l d0,a6
    d69a:	movea.l 4(sp),a1
    d69e:	jsr -690(a6)
	r -> screenName = readString (fp);
    d6a2:	move.l 16(sp),-(sp)
    d6a6:	jsr b02 <readString>
    d6ac:	addq.l #4,sp
    d6ae:	movea.l 8(sp),a0
    d6b2:	move.l d0,(a0)
	return r;
    d6b4:	move.l 8(sp),d0
}
    d6b8:	movea.l (sp)+,a6
    d6ba:	addq.l #8,sp
    d6bc:	rts

0000d6be <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d6be:	          lea -84(sp),sp
    d6c2:	          move.l a6,-(sp)
    d6c4:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d6c6:	          moveq #42,d0
    d6c8:	          move.l d0,84(sp)
    d6cc:	          clr.l 80(sp)
    d6d0:	          move.l 1c9c4 <SysBase>,d0
    d6d6:	          movea.l d0,a6
    d6d8:	          move.l 84(sp),d0
    d6dc:	          move.l 80(sp),d1
    d6e0:	          jsr -684(a6)
    d6e4:	          move.l d0,76(sp)
    d6e8:	          move.l 76(sp),d0
    d6ec:	          move.l d0,72(sp)

    if (newType) {
    d6f0:	/-------- beq.w d96a <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d6f4:	|         move.l 96(sp),-(sp)
    d6f8:	|         jsr 6f7a <openObjectSlice>
    d6fe:	|         addq.l #4,sp
    d700:	|         tst.w d0
    d702:	+-------- beq.w d96a <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d706:	|         move.l 1c9ac <bigDataFile>,d0
    d70c:	|         move.l d0,-(sp)
    d70e:	|         jsr 6bc <get2bytes>
    d714:	|         addq.l #4,sp
    d716:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d71a:	|         move.l 1c9ac <bigDataFile>,64(sp)
    d722:	|         move.l 1c9cc <DOSBase>,d0
    d728:	|         movea.l d0,a6
    d72a:	|         move.l 64(sp),d1
    d72e:	|         jsr -306(a6)
    d732:	|         move.l d0,60(sp)
    d736:	|         move.l 60(sp),d0
    d73a:	|         move.l d0,d0
    d73c:	|         movea.l 72(sp),a0
    d740:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d744:	|         move.l 1c9ac <bigDataFile>,56(sp)
    d74c:	|         move.l 1c9cc <DOSBase>,d0
    d752:	|         movea.l d0,a6
    d754:	|         move.l 56(sp),d1
    d758:	|         jsr -306(a6)
    d75c:	|         move.l d0,52(sp)
    d760:	|         move.l 52(sp),d0
    d764:	|         move.l d0,d0
    d766:	|         movea.l 72(sp),a0
    d76a:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d76e:	|         move.l 1c9ac <bigDataFile>,48(sp)
    d776:	|         move.l 1c9cc <DOSBase>,d0
    d77c:	|         movea.l d0,a6
    d77e:	|         move.l 48(sp),d1
    d782:	|         jsr -306(a6)
    d786:	|         move.l d0,44(sp)
    d78a:	|         move.l 44(sp),d0
    d78e:	|         move.l d0,d0
    d790:	|         movea.l 72(sp),a0
    d794:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d798:	|         move.l 1c9ac <bigDataFile>,40(sp)
    d7a0:	|         move.l 1c9cc <DOSBase>,d0
    d7a6:	|         movea.l d0,a6
    d7a8:	|         move.l 40(sp),d1
    d7ac:	|         jsr -306(a6)
    d7b0:	|         move.l d0,36(sp)
    d7b4:	|         move.l 36(sp),d0
    d7b8:	|         movea.l 72(sp),a0
    d7bc:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d7c0:	|         move.l 1c9ac <bigDataFile>,32(sp)
    d7c8:	|         move.l 1c9cc <DOSBase>,d0
    d7ce:	|         movea.l d0,a6
    d7d0:	|         move.l 32(sp),d1
    d7d4:	|         jsr -306(a6)
    d7d8:	|         move.l d0,28(sp)
    d7dc:	|         move.l 28(sp),d0
    d7e0:	|         movea.l 72(sp),a0
    d7e4:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d7e8:	|         move.l 1c9ac <bigDataFile>,d0
    d7ee:	|         move.l d0,-(sp)
    d7f0:	|         jsr 718 <get4bytes>
    d7f6:	|         addq.l #4,sp
    d7f8:	|         movea.l 72(sp),a0
    d7fc:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d800:	|         move.l 1c9ac <bigDataFile>,d0
    d806:	|         move.l d0,-(sp)
    d808:	|         jsr 6bc <get2bytes>
    d80e:	|         addq.l #4,sp
    d810:	|         movea.l 72(sp),a0
    d814:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d818:	|         move.l 1c9ac <bigDataFile>,24(sp)
    d820:	|         move.l 1c9cc <DOSBase>,d0
    d826:	|         movea.l d0,a6
    d828:	|         move.l 24(sp),d1
    d82c:	|         jsr -306(a6)
    d830:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d834:	|         move.l 1c9ac <bigDataFile>,d0
    d83a:	|         move.l d0,-(sp)
    d83c:	|         jsr 7d8 <getFloat>
    d842:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d844:	|         move.l 1c9ac <bigDataFile>,d0
    d84a:	|         move.l d0,-(sp)
    d84c:	|         jsr 7d8 <getFloat>
    d852:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d854:	|         move.l 1c9ac <bigDataFile>,d0
    d85a:	|         move.l d0,-(sp)
    d85c:	|         jsr 6bc <get2bytes>
    d862:	|         addq.l #4,sp
    d864:	|         move.l d0,d0
    d866:	|         movea.l 72(sp),a0
    d86a:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d86e:	|         move.l 1c9ac <bigDataFile>,d0
    d874:	|         move.l d0,-(sp)
    d876:	|         jsr 6bc <get2bytes>
    d87c:	|         addq.l #4,sp
    d87e:	|         movea.l 72(sp),a0
    d882:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d886:	|         movea.l 72(sp),a0
    d88a:	|         move.l 16(a0),d0
    d88e:	|  /----- beq.s d8c0 <loadObjectType+0x202>
    d890:	|  |      movea.l 72(sp),a0
    d894:	|  |      move.l 16(a0),d0
    d898:	|  |      lsl.l #3,d0
    d89a:	|  |      move.l d0,16(sp)
    d89e:	|  |      clr.l 12(sp)
    d8a2:	|  |      move.l 1c9c4 <SysBase>,d0
    d8a8:	|  |      movea.l d0,a6
    d8aa:	|  |      move.l 16(sp),d0
    d8ae:	|  |      move.l 12(sp),d1
    d8b2:	|  |      jsr -684(a6)
    d8b6:	|  |      move.l d0,8(sp)
    d8ba:	|  |      move.l 8(sp),d0
    d8be:	|  |  /-- bra.s d8c2 <loadObjectType+0x204>
    d8c0:	|  \--|-> moveq #0,d0
    d8c2:	|     \-> movea.l 72(sp),a0
    d8c6:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d8ca:	|         clr.l 88(sp)
    d8ce:	|     /-- bra.s d91e <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d8d0:	|  /--|-> move.l 1c9ac <bigDataFile>,d1
    d8d6:	|  |  |   movea.l 72(sp),a0
    d8da:	|  |  |   movea.l 38(a0),a0
    d8de:	|  |  |   move.l 88(sp),d0
    d8e2:	|  |  |   lsl.l #3,d0
    d8e4:	|  |  |   lea (0,a0,d0.l),a2
    d8e8:	|  |  |   move.l d1,-(sp)
    d8ea:	|  |  |   jsr 6bc <get2bytes>
    d8f0:	|  |  |   addq.l #4,sp
    d8f2:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d8f4:	|  |  |   move.l 1c9ac <bigDataFile>,d1
    d8fa:	|  |  |   movea.l 72(sp),a0
    d8fe:	|  |  |   movea.l 38(a0),a0
    d902:	|  |  |   move.l 88(sp),d0
    d906:	|  |  |   lsl.l #3,d0
    d908:	|  |  |   lea (0,a0,d0.l),a2
    d90c:	|  |  |   move.l d1,-(sp)
    d90e:	|  |  |   jsr 6bc <get2bytes>
    d914:	|  |  |   addq.l #4,sp
    d916:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d91a:	|  |  |   addq.l #1,88(sp)
    d91e:	|  |  \-> movea.l 72(sp),a0
    d922:	|  |      move.l 16(a0),d0
    d926:	|  |      cmp.l 88(sp),d0
    d92a:	|  \----- bgt.s d8d0 <loadObjectType+0x212>
            }
            finishAccess();
    d92c:	|         jsr 6daa <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d932:	|         move.l 68(sp),-(sp)
    d936:	|         jsr 6db4 <getNumberedString>
    d93c:	|         addq.l #4,sp
    d93e:	|         movea.l 72(sp),a0
    d942:	|         move.l d0,(a0)
            newType->objectNum = i;
    d944:	|         movea.l 72(sp),a0
    d948:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d94e:	|         move.l 1ca76 <allObjectTypes>,d0
    d954:	|         movea.l 72(sp),a0
    d958:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d95c:	|         move.l 72(sp),1ca76 <allObjectTypes>
            return newType;
    d964:	|         move.l 72(sp),d0
    d968:	|     /-- bra.s d96c <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d96a:	\-----|-> moveq #0,d0
}
    d96c:	      \-> movea.l (sp)+,a2
    d96e:	          movea.l (sp)+,a6
    d970:	          lea 84(sp),sp
    d974:	          rts

0000d976 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d976:	             lea -16(sp),sp
    d97a:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d97c:	             move.l #117366,16(sp)

	while (* huntRegion) {
    d984:	   /-------- bra.s d9f8 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d986:	/--|-------> movea.l 16(sp),a0
    d98a:	|  |         move.l (a0),d0
    d98c:	|  |         cmp.l 24(sp),d0
    d990:	|  |  /----- bne.s d9ea <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d992:	|  |  |      movea.l 24(sp),a0
    d996:	|  |  |      move.l 8(a0),d0
    d99a:	|  |  |      movea.l 16(sp),a0
    d99e:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d9a0:	|  |  |      movea.l 24(sp),a0
    d9a4:	|  |  |      move.l 38(a0),12(sp)
    d9aa:	|  |  |      move.l 1c9c4 <SysBase>,d0
    d9b0:	|  |  |      movea.l d0,a6
    d9b2:	|  |  |      movea.l 12(sp),a1
    d9b6:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d9ba:	|  |  |      movea.l 24(sp),a0
    d9be:	|  |  |      move.l (a0),8(sp)
    d9c2:	|  |  |      move.l 1c9c4 <SysBase>,d0
    d9c8:	|  |  |      movea.l d0,a6
    d9ca:	|  |  |      movea.l 8(sp),a1
    d9ce:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d9d2:	|  |  |      move.l 24(sp),4(sp)
    d9d8:	|  |  |      move.l 1c9c4 <SysBase>,d0
    d9de:	|  |  |      movea.l d0,a6
    d9e0:	|  |  |      movea.l 4(sp),a1
    d9e4:	|  |  |      jsr -690(a6)
			return;
    d9e8:	|  |  |  /-- bra.s da0e <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d9ea:	|  |  \--|-> movea.l 16(sp),a0
    d9ee:	|  |     |   move.l (a0),d0
    d9f0:	|  |     |   move.l d0,d1
    d9f2:	|  |     |   addq.l #8,d1
    d9f4:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d9f8:	|  \-----|-> movea.l 16(sp),a0
    d9fc:	|        |   move.l (a0),d0
    d9fe:	\--------|-- bne.s d986 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    da00:	         |   pea 1958f <PutChar+0x181d>
    da06:	         |   jsr 1729e <KPrintF>
    da0c:	         |   addq.l #4,sp
}
    da0e:	         \-> movea.l (sp)+,a6
    da10:	             lea 16(sp),sp
    da14:	             rts

0000da16 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    da16:	movea.l 4(sp),a0
    da1a:	move.l 4(a0),d0
    da1e:	move.l 8(sp),-(sp)
    da22:	move.l d0,-(sp)
    da24:	jsr 8d0 <put2bytes>
    da2a:	addq.l #8,sp
	writeString (r -> screenName, fp);
    da2c:	movea.l 4(sp),a0
    da30:	move.l (a0),d0
    da32:	move.l 8(sp),-(sp)
    da36:	move.l d0,-(sp)
    da38:	jsr bd8 <writeString>
    da3e:	addq.l #8,sp
    da40:	nop
    da42:	rts

0000da44 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    da44:	                         lea -112(sp),sp
    da48:	                         move.l a6,-(sp)
    da4a:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    da4c:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    da50:	                         move.w 1ca7c <saveEncoding>,d0
    da56:	                  /----- beq.s da60 <fileToStack+0x1c>
    da58:	                  |      move.l #103861,d0
    da5e:	                  |  /-- bra.s da66 <fileToStack+0x22>
    da60:	                  \--|-> move.l #103887,d0
    da66:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    da6a:	                         move.l 124(sp),112(sp)
    da70:	                         move.l #1005,108(sp)
    da78:	                         move.l 1c9cc <DOSBase>,d0
    da7e:	                         movea.l d0,a6
    da80:	                         move.l 112(sp),d1
    da84:	                         move.l 108(sp),d2
    da88:	                         jsr -30(a6)
    da8c:	                         move.l d0,104(sp)
    da90:	                         move.l 104(sp),d0
    da94:	                         move.l d0,100(sp)
    if (!fp) {
    da98:	                     /-- bne.s dab2 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    da9a:	                     |   move.l 124(sp),-(sp)
    da9e:	                     |   pea 195e6 <PutChar+0x1874>
    daa4:	                     |   jsr 1729e <KPrintF>
    daaa:	                     |   addq.l #8,sp
        return FALSE;
    daac:	                     |   clr.w d0
    daae:	/--------------------|-- bra.w dda8 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    dab2:	|                    \-> move.w 1ca7c <saveEncoding>,d0
    dab8:	|                        move.l d0,d0
    daba:	|                        move.b d0,1ca7a <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    dac0:	|                        move.w 1ca7c <saveEncoding>,d0
    dac6:	|                        lsr.w #8,d0
    dac8:	|                        move.l d0,d0
    daca:	|                        move.b d0,1ca7b <encode2>

    while (*checker) {
    dad0:	|                 /----- bra.s db34 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    dad2:	|              /--|----> move.l 100(sp),30(sp)
    dad8:	|              |  |      move.l 1c9cc <DOSBase>,d0
    dade:	|              |  |      movea.l d0,a6
    dae0:	|              |  |      move.l 30(sp),d1
    dae4:	|              |  |      jsr -306(a6)
    dae8:	|              |  |      move.l d0,26(sp)
    daec:	|              |  |      move.l 26(sp),d1
    daf0:	|              |  |      movea.l 116(sp),a0
    daf4:	|              |  |      move.b (a0),d0
    daf6:	|              |  |      ext.w d0
    daf8:	|              |  |      movea.w d0,a0
    dafa:	|              |  |      cmpa.l d1,a0
    dafc:	|              |  |  /-- beq.s db30 <fileToStack+0xec>
            Close(fp);
    dafe:	|              |  |  |   move.l 100(sp),22(sp)
    db04:	|              |  |  |   move.l 1c9cc <DOSBase>,d0
    db0a:	|              |  |  |   movea.l d0,a6
    db0c:	|              |  |  |   move.l 22(sp),d1
    db10:	|              |  |  |   jsr -36(a6)
    db14:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    db18:	|              |  |  |   move.l 124(sp),-(sp)
    db1c:	|              |  |  |   pea 195f3 <PutChar+0x1881>
    db22:	|              |  |  |   jsr 1729e <KPrintF>
    db28:	|              |  |  |   addq.l #8,sp
            return FALSE;
    db2a:	|              |  |  |   clr.w d0
    db2c:	+--------------|--|--|-- bra.w dda8 <fileToStack+0x364>
        }
        checker++;
    db30:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    db34:	|              |  \----> movea.l 116(sp),a0
    db38:	|              |         move.b (a0),d0
    db3a:	|              \-------- bne.s dad2 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    db3c:	|                        move.w 1ca7c <saveEncoding>,d0
    db42:	|  /-------------------- beq.s dbb6 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    db44:	|  |                     move.l 100(sp),-(sp)
    db48:	|  |                     jsr ddb2 <readStringEncoded>
    db4e:	|  |                     addq.l #4,sp
    db50:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    db54:	|  |                     pea 19634 <PutChar+0x18c2>
    db5a:	|  |                     move.l 100(sp),-(sp)
    db5e:	|  |                     jsr 13d30 <strcmp>
    db64:	|  |                     addq.l #8,sp
    db66:	|  |                     tst.l d0
    db68:	|  |                 /-- beq.s db9c <fileToStack+0x158>
            Close(fp);
    db6a:	|  |                 |   move.l 100(sp),88(sp)
    db70:	|  |                 |   move.l 1c9cc <DOSBase>,d0
    db76:	|  |                 |   movea.l d0,a6
    db78:	|  |                 |   move.l 88(sp),d1
    db7c:	|  |                 |   jsr -36(a6)
    db80:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    db84:	|  |                 |   move.l 124(sp),-(sp)
    db88:	|  |                 |   pea 19643 <PutChar+0x18d1>
    db8e:	|  |                 |   jsr 1729e <KPrintF>
    db94:	|  |                 |   addq.l #8,sp
            return FALSE;
    db96:	|  |                 |   clr.w d0
    db98:	+--|-----------------|-- bra.w dda8 <fileToStack+0x364>
        }
        FreeVec(checker);
    db9c:	|  |                 \-> move.l 96(sp),92(sp)
    dba2:	|  |                     move.l 1c9c4 <SysBase>,d0
    dba8:	|  |                     movea.l d0,a6
    dbaa:	|  |                     movea.l 92(sp),a1
    dbae:	|  |                     jsr -690(a6)
        checker = NULL;
    dbb2:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    dbb6:	|  >-------------------> move.w 1ca7c <saveEncoding>,d0
    dbbc:	|  |     /-------------- beq.w dcf0 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    dbc0:	|  |     |               move.l 100(sp),76(sp)
    dbc6:	|  |     |               move.l 1c9cc <DOSBase>,d0
    dbcc:	|  |     |               movea.l d0,a6
    dbce:	|  |     |               move.l 76(sp),d1
    dbd2:	|  |     |               jsr -306(a6)
    dbd6:	|  |     |               move.l d0,72(sp)
    dbda:	|  |     |               move.l 72(sp),d0
    dbde:	|  |     |               move.b 1ca7a <encode1>,d1
    dbe4:	|  |     |               ext.w d1
    dbe6:	|  |     |               ext.l d1
    dbe8:	|  |     |               move.l d0,d2
    dbea:	|  |     |               eor.l d1,d2
    dbec:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    dbf0:	|  |     |               moveq #-1,d0
    dbf2:	|  |     |               cmp.l 68(sp),d0
    dbf6:	|  |  /--|-------------- beq.w dd86 <fileToStack+0x342>

            char i = (char) tmp;
    dbfa:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    dc00:	|  |  |  |               move.b 67(sp),d0
    dc04:	|  |  |  |               ext.w d0
    dc06:	|  |  |  |               movea.w d0,a0
    dc08:	|  |  |  |               moveq #2,d2
    dc0a:	|  |  |  |               cmp.l a0,d2
    dc0c:	|  |  |  |     /-------- beq.s dc88 <fileToStack+0x244>
    dc0e:	|  |  |  |     |         moveq #2,d0
    dc10:	|  |  |  |     |         cmp.l a0,d0
    dc12:	|  |  |  |  /--|-------- blt.w dcbe <fileToStack+0x27a>
    dc16:	|  |  |  |  |  |         cmpa.w #0,a0
    dc1a:	|  |  |  |  |  |     /-- beq.s dc26 <fileToStack+0x1e2>
    dc1c:	|  |  |  |  |  |     |   moveq #1,d2
    dc1e:	|  |  |  |  |  |     |   cmp.l a0,d2
    dc20:	|  |  |  |  |  |  /--|-- beq.s dc62 <fileToStack+0x21e>
    dc22:	|  |  |  |  +--|--|--|-- bra.w dcbe <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    dc26:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    dc2a:	|  |  |  |  |  |  |      jsr ddb2 <readStringEncoded>
    dc30:	|  |  |  |  |  |  |      addq.l #4,sp
    dc32:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    dc36:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    dc3a:	|  |  |  |  |  |  |      lea 14(sp),a0
    dc3e:	|  |  |  |  |  |  |      move.l a0,-(sp)
    dc40:	|  |  |  |  |  |  |      jsr 14aa6 <makeTextVar>
    dc46:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    dc48:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    dc4e:	|  |  |  |  |  |  |      move.l 1c9c4 <SysBase>,d0
    dc54:	|  |  |  |  |  |  |      movea.l d0,a6
    dc56:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    dc5a:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    dc5e:	|  |  |  |  |  |  |  /-- bra.w dd16 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    dc62:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    dc66:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    dc6c:	|  |  |  |  |  |     |   addq.l #4,sp
    dc6e:	|  |  |  |  |  |     |   move.l d0,-(sp)
    dc70:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    dc74:	|  |  |  |  |  |     |   lea 18(sp),a0
    dc78:	|  |  |  |  |  |     |   move.l a0,-(sp)
    dc7a:	|  |  |  |  |  |     |   jsr 15176 <setVariable>
    dc80:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    dc84:	|  |  |  |  |  |     +-- bra.w dd16 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    dc88:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    dc8e:	|  |  |  |  |        |   move.l 1c9cc <DOSBase>,d0
    dc94:	|  |  |  |  |        |   movea.l d0,a6
    dc96:	|  |  |  |  |        |   move.l 62(sp),d1
    dc9a:	|  |  |  |  |        |   jsr -306(a6)
    dc9e:	|  |  |  |  |        |   move.l d0,58(sp)
    dca2:	|  |  |  |  |        |   move.l 58(sp),d0
    dca6:	|  |  |  |  |        |   move.l d0,-(sp)
    dca8:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dcac:	|  |  |  |  |        |   lea 18(sp),a0
    dcb0:	|  |  |  |  |        |   move.l a0,-(sp)
    dcb2:	|  |  |  |  |        |   jsr 15176 <setVariable>
    dcb8:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dcbc:	|  |  |  |  |        +-- bra.s dd16 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dcbe:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    dcc2:	|  |  |  |           |   pea 196c5 <PutChar+0x1953>
    dcc8:	|  |  |  |           |   jsr 1729e <KPrintF>
    dcce:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dcd0:	|  |  |  |           |   move.l 100(sp),46(sp)
    dcd6:	|  |  |  |           |   move.l 1c9cc <DOSBase>,d0
    dcdc:	|  |  |  |           |   movea.l d0,a6
    dcde:	|  |  |  |           |   move.l 46(sp),d1
    dce2:	|  |  |  |           |   jsr -36(a6)
    dce6:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dcea:	|  |  |  |           |   clr.w d0
    dcec:	+--|--|--|-----------|-- bra.w dda8 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dcf0:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    dcf4:	|  |  |              |   jsr de78 <readTextPlain>
    dcfa:	|  |  |              |   addq.l #4,sp
    dcfc:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dd00:	|  |  |        /-----|-- beq.w dd8a <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dd04:	|  |  |        |     |   move.l 80(sp),-(sp)
    dd08:	|  |  |        |     |   lea 14(sp),a0
    dd0c:	|  |  |        |     |   move.l a0,-(sp)
    dd0e:	|  |  |        |     |   jsr 14aa6 <makeTextVar>
    dd14:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dd16:	|  |  |        |     \-> movea.l 128(sp),a0
    dd1a:	|  |  |        |         move.l (a0),d0
    dd1c:	|  |  |        |  /----- bne.s dd4c <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dd1e:	|  |  |        |  |      move.l 128(sp),d0
    dd22:	|  |  |        |  |      move.l d0,-(sp)
    dd24:	|  |  |        |  |      lea 14(sp),a0
    dd28:	|  |  |        |  |      move.l a0,-(sp)
    dd2a:	|  |  |        |  |      jsr 14146 <addVarToStackQuick>
    dd30:	|  |  |        |  |      addq.l #8,sp
    dd32:	|  |  |        |  |      tst.w d0
    dd34:	|  |  |        |  |  /-- bne.s dd3a <fileToStack+0x2f6>
    dd36:	|  |  |        |  |  |   clr.w d0
    dd38:	+--|--|--------|--|--|-- bra.s dda8 <fileToStack+0x364>
            sH->last = sH->first;
    dd3a:	|  |  |        |  |  \-> movea.l 128(sp),a0
    dd3e:	|  |  |        |  |      move.l (a0),d0
    dd40:	|  |  |        |  |      movea.l 128(sp),a0
    dd44:	|  |  |        |  |      move.l d0,4(a0)
    dd48:	|  +--|--------|--|----- bra.w dbb6 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dd4c:	|  |  |        |  \----> movea.l 128(sp),a0
    dd50:	|  |  |        |         move.l 4(a0),d0
    dd54:	|  |  |        |         addq.l #8,d0
    dd56:	|  |  |        |         move.l d0,-(sp)
    dd58:	|  |  |        |         lea 14(sp),a0
    dd5c:	|  |  |        |         move.l a0,-(sp)
    dd5e:	|  |  |        |         jsr 14146 <addVarToStackQuick>
    dd64:	|  |  |        |         addq.l #8,sp
    dd66:	|  |  |        |         tst.w d0
    dd68:	|  |  |        |     /-- bne.s dd6e <fileToStack+0x32a>
    dd6a:	|  |  |        |     |   clr.w d0
    dd6c:	+--|--|--------|-----|-- bra.s dda8 <fileToStack+0x364>
            sH->last = sH->last->next;
    dd6e:	|  |  |        |     \-> movea.l 128(sp),a0
    dd72:	|  |  |        |         movea.l 4(a0),a0
    dd76:	|  |  |        |         move.l 8(a0),d0
    dd7a:	|  |  |        |         movea.l 128(sp),a0
    dd7e:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    dd82:	|  \--|--------|-------- bra.w dbb6 <fileToStack+0x172>
            if (tmp == -1) break;
    dd86:	|     \--------|-------> nop
    dd88:	|              |     /-- bra.s dd8c <fileToStack+0x348>
            if (!line) break;
    dd8a:	|              \-----|-> nop
        }
    }
    Close(fp);
    dd8c:	|                    \-> move.l 100(sp),38(sp)
    dd92:	|                        move.l 1c9cc <DOSBase>,d0
    dd98:	|                        movea.l d0,a6
    dd9a:	|                        move.l 38(sp),d1
    dd9e:	|                        jsr -36(a6)
    dda2:	|                        move.l d0,34(sp)
    return TRUE;
    dda6:	|                        moveq #1,d0
}
    dda8:	\----------------------> move.l (sp)+,d2
    ddaa:	                         movea.l (sp)+,a6
    ddac:	                         lea 112(sp),sp
    ddb0:	                         rts

0000ddb2 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    ddb2:	          lea -32(sp),sp
    ddb6:	          move.l a6,-(sp)
    ddb8:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    ddba:	          move.l 44(sp),-(sp)
    ddbe:	          jsr 6bc <get2bytes>
    ddc4:	          addq.l #4,sp
    ddc6:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    ddca:	          move.l 32(sp),d0
    ddce:	          addq.l #1,d0
    ddd0:	          move.l d0,28(sp)
    ddd4:	          clr.l 24(sp)
    ddd8:	          move.l 1c9c4 <SysBase>,d0
    ddde:	          movea.l d0,a6
    dde0:	          move.l 28(sp),d0
    dde4:	          move.l 24(sp),d1
    dde8:	          jsr -684(a6)
    ddec:	          move.l d0,20(sp)
    ddf0:	          move.l 20(sp),d0
    ddf4:	          move.l d0,16(sp)
    if (!s) return NULL;
    ddf8:	      /-- bne.s ddfe <readStringEncoded+0x4c>
    ddfa:	      |   moveq #0,d0
    ddfc:	/-----|-- bra.s de6e <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    ddfe:	|     \-> clr.l 36(sp)
    de02:	|     /-- bra.s de54 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    de04:	|  /--|-> move.l 44(sp),12(sp)
    de0a:	|  |  |   move.l 1c9cc <DOSBase>,d0
    de10:	|  |  |   movea.l d0,a6
    de12:	|  |  |   move.l 12(sp),d1
    de16:	|  |  |   jsr -306(a6)
    de1a:	|  |  |   move.l d0,8(sp)
    de1e:	|  |  |   move.l 8(sp),d0
    de22:	|  |  |   move.l d0,d1
    de24:	|  |  |   move.b 1ca7a <encode1>,d2
    de2a:	|  |  |   move.l 36(sp),d0
    de2e:	|  |  |   movea.l 16(sp),a0
    de32:	|  |  |   adda.l d0,a0
    de34:	|  |  |   move.b d1,d0
    de36:	|  |  |   eor.b d2,d0
    de38:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    de3a:	|  |  |   move.b 1ca7a <encode1>,d0
    de40:	|  |  |   move.b d0,d1
    de42:	|  |  |   move.b 1ca7b <encode2>,d0
    de48:	|  |  |   add.b d1,d0
    de4a:	|  |  |   move.b d0,1ca7a <encode1>
    for (a = 0; a < len; a++) {
    de50:	|  |  |   addq.l #1,36(sp)
    de54:	|  |  \-> move.l 36(sp),d0
    de58:	|  |      cmp.l 32(sp),d0
    de5c:	|  \----- blt.s de04 <readStringEncoded+0x52>
    }
    s[len] = 0;
    de5e:	|         move.l 32(sp),d0
    de62:	|         movea.l 16(sp),a0
    de66:	|         adda.l d0,a0
    de68:	|         clr.b (a0)
    return s;
    de6a:	|         move.l 16(sp),d0
}
    de6e:	\-------> move.l (sp)+,d2
    de70:	          movea.l (sp)+,a6
    de72:	          lea 32(sp),sp
    de76:	          rts

0000de78 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    de78:	             lea -104(sp),sp
    de7c:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    de80:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    de84:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    de8a:	             move.l 124(sp),106(sp)
    de90:	             clr.l 102(sp)
    de94:	             clr.l 98(sp)
    de98:	             move.l 1c9cc <DOSBase>,d0
    de9e:	             movea.l d0,a6
    dea0:	             move.l 106(sp),d1
    dea4:	             move.l 102(sp),d2
    dea8:	             move.l 98(sp),d3
    deac:	             jsr -66(a6)
    deb0:	             move.l d0,94(sp)
    deb4:	             move.l 94(sp),d0
    deb8:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    debc:	   /-------- bra.s df00 <readTextPlain+0x88>
        tmp = FGetC(fp);
    debe:	/--|-------> move.l 124(sp),22(sp)
    dec4:	|  |         move.l 1c9cc <DOSBase>,d0
    deca:	|  |         movea.l d0,a6
    decc:	|  |         move.l 22(sp),d1
    ded0:	|  |         jsr -306(a6)
    ded4:	|  |         move.l d0,18(sp)
    ded8:	|  |         move.l 18(sp),d0
    dedc:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    dee0:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    dee6:	|  |         cmpi.b #10,17(sp)
    deec:	|  |  /----- beq.s def6 <readTextPlain+0x7e>
    deee:	|  |  |      moveq #-1,d0
    def0:	|  |  |      cmp.l 110(sp),d0
    def4:	|  |  |  /-- bne.s defc <readTextPlain+0x84>
            keepGoing = FALSE;
    def6:	|  |  \--|-> clr.w 114(sp)
    defa:	|  +-----|-- bra.s df00 <readTextPlain+0x88>
        } else {
            stringSize++;
    defc:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    df00:	|  \-------> tst.w 114(sp)
    df04:	\----------- bne.s debe <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    df06:	             tst.l 116(sp)
    df0a:	         /-- bne.s df1a <readTextPlain+0xa2>
    df0c:	         |   moveq #-1,d0
    df0e:	         |   cmp.l 110(sp),d0
    df12:	         +-- bne.s df1a <readTextPlain+0xa2>
        return NULL;
    df14:	         |   moveq #0,d0
    df16:	      /--|-- bra.w e000 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    df1a:	      |  \-> move.l 124(sp),86(sp)
    df20:	      |      move.l 90(sp),82(sp)
    df26:	      |      moveq #-1,d0
    df28:	      |      move.l d0,78(sp)
    df2c:	      |      move.l 1c9cc <DOSBase>,d0
    df32:	      |      movea.l d0,a6
    df34:	      |      move.l 86(sp),d1
    df38:	      |      move.l 82(sp),d2
    df3c:	      |      move.l 78(sp),d3
    df40:	      |      jsr -66(a6)
    df44:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    df48:	      |      move.l 116(sp),d0
    df4c:	      |      addq.l #1,d0
    df4e:	      |      move.l d0,70(sp)
    df52:	      |      clr.l 66(sp)
    df56:	      |      move.l 1c9c4 <SysBase>,d0
    df5c:	      |      movea.l d0,a6
    df5e:	      |      move.l 70(sp),d0
    df62:	      |      move.l 66(sp),d1
    df66:	      |      jsr -684(a6)
    df6a:	      |      move.l d0,62(sp)
    df6e:	      |      move.l 62(sp),d0
    df72:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    df76:	      |  /-- bne.s df7e <readTextPlain+0x106>
    df78:	      |  |   moveq #0,d0
    df7a:	      +--|-- bra.w e000 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    df7e:	      |  \-> move.l 124(sp),54(sp)
    df84:	      |      move.l 58(sp),50(sp)
    df8a:	      |      moveq #1,d0
    df8c:	      |      move.l d0,46(sp)
    df90:	      |      move.l 116(sp),42(sp)
    df96:	      |      move.l 1c9cc <DOSBase>,d0
    df9c:	      |      movea.l d0,a6
    df9e:	      |      move.l 54(sp),d1
    dfa2:	      |      move.l 50(sp),d2
    dfa6:	      |      move.l 46(sp),d3
    dfaa:	      |      move.l 42(sp),d4
    dfae:	      |      jsr -324(a6)
    dfb2:	      |      move.l d0,38(sp)
    dfb6:	      |      move.l 38(sp),d0
    dfba:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dfbe:	      |      move.l 34(sp),d0
    dfc2:	      |      cmp.l 116(sp),d0
    dfc6:	      |  /-- beq.s dfd6 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    dfc8:	      |  |   pea 196fa <PutChar+0x1988>
    dfce:	      |  |   jsr 1729e <KPrintF>
    dfd4:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    dfd6:	      |  \-> move.l 124(sp),30(sp)
    dfdc:	      |      move.l 1c9cc <DOSBase>,d0
    dfe2:	      |      movea.l d0,a6
    dfe4:	      |      move.l 30(sp),d1
    dfe8:	      |      jsr -306(a6)
    dfec:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    dff0:	      |      move.l 116(sp),d0
    dff4:	      |      movea.l 58(sp),a0
    dff8:	      |      adda.l d0,a0
    dffa:	      |      clr.b (a0)
    }

    return reply;
    dffc:	      |      move.l 58(sp),d0
}
    e000:	      \----> movem.l (sp)+,d2-d4/a6
    e004:	             lea 104(sp),sp
    e008:	             rts

0000e00a <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e00a:	                      lea -144(sp),sp
    e00e:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e012:	                      move.l 160(sp),148(sp)
    e018:	                      move.l #1006,144(sp)
    e020:	                      move.l 1c9cc <DOSBase>,d0
    e026:	                      movea.l d0,a6
    e028:	                      move.l 148(sp),d1
    e02c:	                      move.l 144(sp),d2
    e030:	                      jsr -30(a6)
    e034:	                      move.l d0,140(sp)
    e038:	                      move.l 140(sp),d0
    e03c:	                      move.l d0,136(sp)

    if (!fp) {
    e040:	                  /-- bne.s e05a <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e042:	                  |   move.l 160(sp),-(sp)
    e046:	                  |   pea 1971b <PutChar+0x19a9>
    e04c:	                  |   jsr 1729e <KPrintF>
    e052:	                  |   addq.l #8,sp
        return FALSE;
    e054:	                  |   clr.w d0
    e056:	/-----------------|-- bra.w e316 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e05a:	|                 \-> movea.l 164(sp),a0
    e05e:	|                     movea.l 4(a0),a0
    e062:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e066:	|                     move.w 1ca7c <saveEncoding>,d0
    e06c:	|                     move.l d0,d0
    e06e:	|                     move.b d0,1ca7a <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e074:	|                     move.w 1ca7c <saveEncoding>,d0
    e07a:	|                     lsr.w #8,d0
    e07c:	|                     move.l d0,d0
    e07e:	|                     move.b d0,1ca7b <encode2>

    if (saveEncoding) {
    e084:	|                     move.w 1ca7c <saveEncoding>,d0
    e08a:	|                 /-- beq.s e0dc <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e08c:	|                 |   move.l 136(sp),116(sp)
    e092:	|                 |   move.l #103861,112(sp)
    e09a:	|                 |   moveq #99,d0
    e09c:	|                 |   not.b d0
    e09e:	|                 |   add.l sp,d0
    e0a0:	|                 |   addi.l #-144,d0
    e0a6:	|                 |   move.l d0,108(sp)
    e0aa:	|                 |   move.l 1c9cc <DOSBase>,d0
    e0b0:	|                 |   movea.l d0,a6
    e0b2:	|                 |   move.l 116(sp),d1
    e0b6:	|                 |   move.l 112(sp),d2
    e0ba:	|                 |   move.l 108(sp),d3
    e0be:	|                 |   jsr -354(a6)
    e0c2:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e0c6:	|                 |   move.l 136(sp),-(sp)
    e0ca:	|                 |   pea 19634 <PutChar+0x18c2>
    e0d0:	|                 |   jsr e320 <writeStringEncoded>
    e0d6:	|                 |   addq.l #8,sp
    e0d8:	|  /--------------|-- bra.w e2ee <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e0dc:	|  |              \-> move.l 136(sp),132(sp)
    e0e2:	|  |                  move.l #103887,128(sp)
    e0ea:	|  |                  moveq #99,d1
    e0ec:	|  |                  not.b d1
    e0ee:	|  |                  add.l sp,d1
    e0f0:	|  |                  addi.l #-144,d1
    e0f6:	|  |                  move.l d1,124(sp)
    e0fa:	|  |                  move.l 1c9cc <DOSBase>,d0
    e100:	|  |                  movea.l d0,a6
    e102:	|  |                  move.l 132(sp),d1
    e106:	|  |                  move.l 128(sp),d2
    e10a:	|  |                  move.l 124(sp),d3
    e10e:	|  |                  jsr -354(a6)
    e112:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e116:	|  +----------------- bra.w e2ee <stackToFile+0x2e4>
        if (saveEncoding) {
    e11a:	|  |  /-------------> move.w 1ca7c <saveEncoding>,d0
    e120:	|  |  |     /-------- beq.w e272 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e124:	|  |  |     |         movea.l 152(sp),a0
    e128:	|  |  |     |         move.l (a0),d0
    e12a:	|  |  |     |         moveq #1,d1
    e12c:	|  |  |     |         cmp.l d0,d1
    e12e:	|  |  |     |     /-- beq.s e17e <stackToFile+0x174>
    e130:	|  |  |     |     |   moveq #3,d1
    e132:	|  |  |     |     |   cmp.l d0,d1
    e134:	|  |  |     |  /--|-- bne.w e240 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e138:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e13e:	|  |  |     |  |  |   move.b 1ca7a <encode1>,d0
    e144:	|  |  |     |  |  |   ext.w d0
    e146:	|  |  |     |  |  |   movea.w d0,a0
    e148:	|  |  |     |  |  |   move.l a0,72(sp)
    e14c:	|  |  |     |  |  |   move.l 1c9cc <DOSBase>,d0
    e152:	|  |  |     |  |  |   movea.l d0,a6
    e154:	|  |  |     |  |  |   move.l 76(sp),d1
    e158:	|  |  |     |  |  |   move.l 72(sp),d2
    e15c:	|  |  |     |  |  |   jsr -312(a6)
    e160:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e164:	|  |  |     |  |  |   movea.l 152(sp),a0
    e168:	|  |  |     |  |  |   move.l 4(a0),d0
    e16c:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e170:	|  |  |     |  |  |   move.l d0,-(sp)
    e172:	|  |  |     |  |  |   jsr e320 <writeStringEncoded>
    e178:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e17a:	|  |  |  /--|--|--|-- bra.w e2e4 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e17e:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    e182:	|  |  |  |  |  |      move.l 4(a0),d0
    e186:	|  |  |  |  |  |  /-- bmi.s e1f6 <stackToFile+0x1ec>
    e188:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e18c:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e190:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e196:	|  |  |  |  |  |  +-- bgt.s e1f6 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e198:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e19e:	|  |  |  |  |  |  |   move.b 1ca7a <encode1>,d0
    e1a4:	|  |  |  |  |  |  |   eori.b #2,d0
    e1a8:	|  |  |  |  |  |  |   ext.w d0
    e1aa:	|  |  |  |  |  |  |   movea.w d0,a0
    e1ac:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e1b0:	|  |  |  |  |  |  |   move.l 1c9cc <DOSBase>,d0
    e1b6:	|  |  |  |  |  |  |   movea.l d0,a6
    e1b8:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e1bc:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e1c0:	|  |  |  |  |  |  |   jsr -312(a6)
    e1c4:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e1c8:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e1ce:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e1d2:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e1d8:	|  |  |  |  |  |  |   move.l 1c9cc <DOSBase>,d0
    e1de:	|  |  |  |  |  |  |   movea.l d0,a6
    e1e0:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e1e4:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e1e8:	|  |  |  |  |  |  |   jsr -312(a6)
    e1ec:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e1f0:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e1f2:	|  |  |  +--|--|--|-- bra.w e2e4 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e1f6:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    e1fc:	|  |  |  |  |  |      move.b 1ca7a <encode1>,d0
    e202:	|  |  |  |  |  |      eori.b #1,d0
    e206:	|  |  |  |  |  |      ext.w d0
    e208:	|  |  |  |  |  |      movea.w d0,a0
    e20a:	|  |  |  |  |  |      move.l a0,36(sp)
    e20e:	|  |  |  |  |  |      move.l 1c9cc <DOSBase>,d0
    e214:	|  |  |  |  |  |      movea.l d0,a6
    e216:	|  |  |  |  |  |      move.l 40(sp),d1
    e21a:	|  |  |  |  |  |      move.l 36(sp),d2
    e21e:	|  |  |  |  |  |      jsr -312(a6)
    e222:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e226:	|  |  |  |  |  |      movea.l 152(sp),a0
    e22a:	|  |  |  |  |  |      move.l 4(a0),d0
    e22e:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e232:	|  |  |  |  |  |      move.l d0,-(sp)
    e234:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e23a:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e23c:	|  |  |  +--|--|----- bra.w e2e4 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e240:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    e244:	|  |  |  |  |         pea 1972d <PutChar+0x19bb>
    e24a:	|  |  |  |  |         jsr 1729e <KPrintF>
    e250:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e252:	|  |  |  |  |         move.l 136(sp),28(sp)
    e258:	|  |  |  |  |         move.l 1c9cc <DOSBase>,d0
    e25e:	|  |  |  |  |         movea.l d0,a6
    e260:	|  |  |  |  |         move.l 28(sp),d1
    e264:	|  |  |  |  |         jsr -36(a6)
    e268:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e26c:	|  |  |  |  |         clr.w d0
    e26e:	+--|--|--|--|-------- bra.w e316 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e272:	|  |  |  |  \-------> move.l 152(sp),d0
    e276:	|  |  |  |            move.l d0,-(sp)
    e278:	|  |  |  |            jsr 14e5a <getTextFromAnyVar>
    e27e:	|  |  |  |            addq.l #4,sp
    e280:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e284:	|  |  |  |     /----- beq.s e2f8 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e286:	|  |  |  |     |      movea.l 100(sp),a0
    e28a:	|  |  |  |     |      move.b (a0),d0
    e28c:	|  |  |  |     |      ext.w d0
    e28e:	|  |  |  |     |      movea.w d0,a0
    e290:	|  |  |  |     |      move.l a0,12(sp)
    e294:	|  |  |  |     |      move.l 136(sp),96(sp)
    e29a:	|  |  |  |     |      move.l #104329,92(sp)
    e2a2:	|  |  |  |     |      moveq #99,d0
    e2a4:	|  |  |  |     |      not.b d0
    e2a6:	|  |  |  |     |      add.l sp,d0
    e2a8:	|  |  |  |     |      addi.l #-144,d0
    e2ae:	|  |  |  |     |      move.l d0,88(sp)
    e2b2:	|  |  |  |     |      move.l 1c9cc <DOSBase>,d0
    e2b8:	|  |  |  |     |      movea.l d0,a6
    e2ba:	|  |  |  |     |      move.l 96(sp),d1
    e2be:	|  |  |  |     |      move.l 92(sp),d2
    e2c2:	|  |  |  |     |      move.l 88(sp),d3
    e2c6:	|  |  |  |     |      jsr -354(a6)
    e2ca:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e2ce:	|  |  |  |     |      move.l 100(sp),80(sp)
    e2d4:	|  |  |  |     |      move.l 1c9c4 <SysBase>,d0
    e2da:	|  |  |  |     |      movea.l d0,a6
    e2dc:	|  |  |  |     |      movea.l 80(sp),a1
    e2e0:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e2e4:	|  |  |  \-----|----> movea.l 152(sp),a0
    e2e8:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e2ee:	|  \--|--------|----> tst.l 152(sp)
    e2f2:	|     \--------|----- bne.w e11a <stackToFile+0x110>
    e2f6:	|              |  /-- bra.s e2fa <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e2f8:	|              \--|-> nop
    }
    Close(fp);
    e2fa:	|                 \-> move.l 136(sp),20(sp)
    e300:	|                     move.l 1c9cc <DOSBase>,d0
    e306:	|                     movea.l d0,a6
    e308:	|                     move.l 20(sp),d1
    e30c:	|                     jsr -36(a6)
    e310:	|                     move.l d0,16(sp)
    return TRUE;
    e314:	|                     moveq #1,d0
}
    e316:	\-------------------> movem.l (sp)+,d2-d3/a6
    e31a:	                      lea 144(sp),sp
    e31e:	                      rts

0000e320 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e320:	       lea -20(sp),sp
    e324:	       move.l a6,-(sp)
    e326:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e328:	       move.l 32(sp),-(sp)
    e32c:	       jsr 13d70 <strlen>
    e332:	       addq.l #4,sp
    e334:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e338:	       move.l 36(sp),-(sp)
    e33c:	       move.l 24(sp),-(sp)
    e340:	       jsr 8d0 <put2bytes>
    e346:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e348:	       clr.l 24(sp)
    e34c:	   /-- bra.s e3a2 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e34e:	/--|-> move.l 36(sp),16(sp)
    e354:	|  |   move.l 24(sp),d0
    e358:	|  |   movea.l 32(sp),a0
    e35c:	|  |   adda.l d0,a0
    e35e:	|  |   move.b (a0),d1
    e360:	|  |   move.b 1ca7a <encode1>,d0
    e366:	|  |   eor.b d1,d0
    e368:	|  |   ext.w d0
    e36a:	|  |   movea.w d0,a0
    e36c:	|  |   move.l a0,12(sp)
    e370:	|  |   move.l 1c9cc <DOSBase>,d0
    e376:	|  |   movea.l d0,a6
    e378:	|  |   move.l 16(sp),d1
    e37c:	|  |   move.l 12(sp),d2
    e380:	|  |   jsr -312(a6)
    e384:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e388:	|  |   move.b 1ca7a <encode1>,d0
    e38e:	|  |   move.b d0,d1
    e390:	|  |   move.b 1ca7b <encode2>,d0
    e396:	|  |   add.b d1,d0
    e398:	|  |   move.b d0,1ca7a <encode1>
	for (a = 0; a < len; a ++) {
    e39e:	|  |   addq.l #1,24(sp)
    e3a2:	|  \-> move.l 24(sp),d0
    e3a6:	|      cmp.l 20(sp),d0
    e3aa:	\----- blt.s e34e <writeStringEncoded+0x2e>
	}
}
    e3ac:	       nop
    e3ae:	       nop
    e3b0:	       move.l (sp)+,d2
    e3b2:	       movea.l (sp)+,a6
    e3b4:	       lea 20(sp),sp
    e3b8:	       rts

0000e3ba <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e3ba:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e3bc:	                   tst.l 8(sp)
    e3c0:	               /-- bne.s e3c6 <failSecurityCheck+0xc>
    e3c2:	               |   moveq #1,d0
    e3c4:	/--------------|-- bra.s e444 <failSecurityCheck+0x8a>

	int a = 0;
    e3c6:	|              \-> clr.l (sp)

	while (fn[a]) {
    e3c8:	|     /----------- bra.s e436 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e3ca:	|  /--|----------> move.l (sp),d0
    e3cc:	|  |  |            movea.l 8(sp),a0
    e3d0:	|  |  |            adda.l d0,a0
    e3d2:	|  |  |            move.b (a0),d0
    e3d4:	|  |  |            ext.w d0
    e3d6:	|  |  |            movea.w d0,a0
    e3d8:	|  |  |            moveq #124,d0
    e3da:	|  |  |            cmp.l a0,d0
    e3dc:	|  |  |     /----- beq.s e41e <failSecurityCheck+0x64>
    e3de:	|  |  |     |      moveq #124,d1
    e3e0:	|  |  |     |      cmp.l a0,d1
    e3e2:	|  |  |  /--|----- blt.s e434 <failSecurityCheck+0x7a>
    e3e4:	|  |  |  |  |      moveq #92,d0
    e3e6:	|  |  |  |  |      cmp.l a0,d0
    e3e8:	|  |  |  |  +----- beq.s e41e <failSecurityCheck+0x64>
    e3ea:	|  |  |  |  |      moveq #92,d1
    e3ec:	|  |  |  |  |      cmp.l a0,d1
    e3ee:	|  |  |  +--|----- blt.s e434 <failSecurityCheck+0x7a>
    e3f0:	|  |  |  |  |      moveq #60,d0
    e3f2:	|  |  |  |  |      cmp.l a0,d0
    e3f4:	|  |  |  |  |  /-- blt.s e414 <failSecurityCheck+0x5a>
    e3f6:	|  |  |  |  |  |   moveq #34,d1
    e3f8:	|  |  |  |  |  |   cmp.l a0,d1
    e3fa:	|  |  |  +--|--|-- bgt.s e434 <failSecurityCheck+0x7a>
    e3fc:	|  |  |  |  |  |   moveq #-34,d1
    e3fe:	|  |  |  |  |  |   add.l a0,d1
    e400:	|  |  |  |  |  |   move.l #83894529,d0
    e406:	|  |  |  |  |  |   lsr.l d1,d0
    e408:	|  |  |  |  |  |   moveq #1,d1
    e40a:	|  |  |  |  |  |   and.l d1,d0
    e40c:	|  |  |  |  |  |   sne d0
    e40e:	|  |  |  |  |  |   neg.b d0
    e410:	|  |  |  |  +--|-- bne.s e41e <failSecurityCheck+0x64>
    e412:	|  |  |  +--|--|-- bra.s e434 <failSecurityCheck+0x7a>
    e414:	|  |  |  |  |  \-> lea -62(a0),a0
    e418:	|  |  |  |  |      moveq #1,d0
    e41a:	|  |  |  |  |      cmp.l a0,d0
    e41c:	|  |  |  +--|----- bcs.s e434 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e41e:	|  |  |  |  \----> move.l 8(sp),-(sp)
    e422:	|  |  |  |         pea 1978d <PutChar+0x1a1b>
    e428:	|  |  |  |         jsr 1729e <KPrintF>
    e42e:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e430:	|  |  |  |         moveq #1,d0
    e432:	+--|--|--|-------- bra.s e444 <failSecurityCheck+0x8a>
		}
		a++;
    e434:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    e436:	|  |  \----------> move.l (sp),d0
    e438:	|  |               movea.l 8(sp),a0
    e43c:	|  |               adda.l d0,a0
    e43e:	|  |               move.b (a0),d0
    e440:	|  \-------------- bne.s e3ca <failSecurityCheck+0x10>
	}
	return FALSE;
    e442:	|                  clr.w d0
}
    e444:	\----------------> addq.l #4,sp
    e446:	                   rts

0000e448 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e448:	             lea -24(sp),sp
    e44c:	             move.l a6,-(sp)
    e44e:	             move.l 40(sp),d0
    e452:	             move.w d0,d0
    e454:	             move.w d0,6(sp)
	int fileNum = -1;
    e458:	             moveq #-1,d0
    e45a:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e45e:	             jsr 6336 <killSpeechTimers>

	switch (numParams) {
    e464:	             moveq #2,d0
    e466:	             cmp.l 32(sp),d0
    e46a:	      /----- beq.s e4ae <sayCore+0x66>
    e46c:	      |      moveq #3,d0
    e46e:	      |      cmp.l 32(sp),d0
    e472:	/-----|----- bne.w e590 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e476:	|     |      movea.l 36(sp),a0
    e47a:	|     |      move.l 24(a0),d0
    e47e:	|     |      move.l d0,-(sp)
    e480:	|     |      pea 5 <_start+0x5>
    e484:	|     |      lea 20(sp),a0
    e488:	|     |      move.l a0,-(sp)
    e48a:	|     |      jsr 14884 <getValueType>
    e490:	|     |      lea 12(sp),sp
    e494:	|     |      tst.w d0
    e496:	|     |  /-- bne.s e49e <sayCore+0x56>
    e498:	|     |  |   moveq #1,d0
    e49a:	|  /--|--|-- bra.w e5a0 <sayCore+0x158>
			trimStack (&fun -> stack);
    e49e:	|  |  |  \-> moveq #24,d0
    e4a0:	|  |  |      add.l 36(sp),d0
    e4a4:	|  |  |      move.l d0,-(sp)
    e4a6:	|  |  |      jsr 15208 <trimStack>
    e4ac:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e4ae:	|  |  \----> movea.l 36(sp),a0
    e4b2:	|  |         move.l 24(a0),d0
    e4b6:	|  |         move.l d0,-(sp)
    e4b8:	|  |         jsr 14e5a <getTextFromAnyVar>
    e4be:	|  |         addq.l #4,sp
    e4c0:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e4c4:	|  |     /-- bne.s e4cc <sayCore+0x84>
    e4c6:	|  |     |   moveq #1,d0
    e4c8:	|  +-----|-- bra.w e5a0 <sayCore+0x158>
			trimStack (&fun -> stack);
    e4cc:	|  |     \-> moveq #24,d0
    e4ce:	|  |         add.l 36(sp),d0
    e4d2:	|  |         move.l d0,-(sp)
    e4d4:	|  |         jsr 15208 <trimStack>
    e4da:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e4dc:	|  |         movea.l 36(sp),a0
    e4e0:	|  |         move.l 24(a0),d0
    e4e4:	|  |         move.l d0,-(sp)
    e4e6:	|  |         pea 7 <_start+0x7>
    e4ea:	|  |         lea 16(sp),a0
    e4ee:	|  |         move.l a0,-(sp)
    e4f0:	|  |         jsr 14884 <getValueType>
    e4f6:	|  |         lea 12(sp),sp
    e4fa:	|  |         tst.w d0
    e4fc:	|  |     /-- bne.s e504 <sayCore+0xbc>
    e4fe:	|  |     |   moveq #1,d0
    e500:	|  +-----|-- bra.w e5a0 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e504:	|  |     \-> movea.l 36(sp),a0
    e508:	|  |         move.l 24(a0),d0
    e50c:	|  |         move.l d0,-(sp)
    e50e:	|  |         pea 7 <_start+0x7>
    e512:	|  |         lea 16(sp),a0
    e516:	|  |         move.l a0,-(sp)
    e518:	|  |         jsr 14884 <getValueType>
    e51e:	|  |         lea 12(sp),sp
    e522:	|  |         tst.w d0
    e524:	|  |     /-- bne.s e52a <sayCore+0xe2>
    e526:	|  |     |   moveq #1,d0
    e528:	|  +-----|-- bra.s e5a0 <sayCore+0x158>
			trimStack (&fun -> stack);
    e52a:	|  |     \-> moveq #24,d0
    e52c:	|  |         add.l 36(sp),d0
    e530:	|  |         move.l d0,-(sp)
    e532:	|  |         jsr 15208 <trimStack>
    e538:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e53a:	|  |         movea.w 6(sp),a0
    e53e:	|  |         move.l 12(sp),d1
    e542:	|  |         move.l 8(sp),d0
    e546:	|  |         move.l a0,-(sp)
    e548:	|  |         move.l d1,-(sp)
    e54a:	|  |         move.l d0,-(sp)
    e54c:	|  |         move.l 36(sp),-(sp)
    e550:	|  |         jsr 82f0 <wrapSpeech>
    e556:	|  |         lea 16(sp),sp
    e55a:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e55e:	|  |         movea.l 36(sp),a0
    e562:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e568:	|  |         movea.l 36(sp),a0
    e56c:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e572:	|  |         move.l 24(sp),16(sp)
    e578:	|  |         move.l 1c9c4 <SysBase>,d0
    e57e:	|  |         movea.l d0,a6
    e580:	|  |         movea.l 16(sp),a1
    e584:	|  |         jsr -690(a6)
			newText = NULL;
    e588:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e58c:	|  |         moveq #0,d0
    e58e:	|  +-------- bra.s e5a0 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e590:	\--|-------> pea 19813 <PutChar+0x1aa1>
    e596:	   |         jsr 1729e <KPrintF>
    e59c:	   |         addq.l #4,sp
	return BR_ERROR;
    e59e:	   |         moveq #1,d0
}
    e5a0:	   \-------> movea.l (sp)+,a6
    e5a2:	             lea 24(sp),sp
    e5a6:	             rts

0000e5a8 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e5a8:	pea 1 <_start+0x1>
    e5ac:	move.l 12(sp),-(sp)
    e5b0:	move.l 12(sp),-(sp)
    e5b4:	jsr e448 <sayCore>
    e5ba:	lea 12(sp),sp
}
    e5be:	rts

0000e5c0 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e5c0:	clr.l -(sp)
    e5c2:	move.l 12(sp),-(sp)
    e5c6:	move.l 12(sp),-(sp)
    e5ca:	jsr e448 <sayCore>
    e5d0:	lea 12(sp),sp
}
    e5d4:	rts

0000e5d6 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e5d6:	jsr 15250 <freeze>
	freezeSubs (); 
    e5dc:	jsr 5926 <freezeSubs>
	fun -> freezerLevel = 0;
    e5e2:	movea.l 8(sp),a0
    e5e6:	clr.b 56(a0)
	return BR_CONTINUE;
    e5ea:	moveq #2,d0
}
    e5ec:	rts

0000e5ee <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e5ee:	jsr 1544c <unfreeze>
	unfreezeSubs (); 
    e5f4:	jsr 6d78 <unfreezeSubs>
	return BR_CONTINUE;
    e5fa:	moveq #2,d0
}
    e5fc:	rts

0000e5fe <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e5fe:	jsr 15428 <howFrozen>
    e604:	move.l d0,d1
    e606:	moveq #28,d0
    e608:	add.l 8(sp),d0
    e60c:	move.l d1,-(sp)
    e60e:	pea 1 <_start+0x1>
    e612:	move.l d0,-(sp)
    e614:	jsr 15176 <setVariable>
    e61a:	lea 12(sp),sp
	return BR_CONTINUE; 
    e61e:	moveq #2,d0
}
    e620:	rts

0000e622 <builtIn_setCursor>:

builtIn(setCursor)
{
    e622:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e624:	movea.l 12(sp),a0
    e628:	move.l 24(a0),d0
    e62c:	move.l d0,-(sp)
    e62e:	jsr 14d5c <getAnimationFromVar>
    e634:	addq.l #4,sp
    e636:	move.l d0,(sp)
	pickAnimCursor (aa);
    e638:	move.l (sp),-(sp)
    e63a:	jsr d6c <pickAnimCursor>
    e640:	addq.l #4,sp
	trimStack (&fun -> stack);
    e642:	moveq #24,d0
    e644:	add.l 12(sp),d0
    e648:	move.l d0,-(sp)
    e64a:	jsr 15208 <trimStack>
    e650:	addq.l #4,sp
	return BR_CONTINUE;
    e652:	moveq #2,d0
}
    e654:	addq.l #4,sp
    e656:	rts

0000e658 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e658:	move.l 1c980 <input+0xa>,d1
    e65e:	move.l 1ca7e <cameraX>,d0
    e664:	add.l d0,d1
    e666:	moveq #28,d0
    e668:	add.l 8(sp),d0
    e66c:	move.l d1,-(sp)
    e66e:	pea 1 <_start+0x1>
    e672:	move.l d0,-(sp)
    e674:	jsr 15176 <setVariable>
    e67a:	lea 12(sp),sp
	return BR_CONTINUE;
    e67e:	moveq #2,d0
}
    e680:	rts

0000e682 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e682:	move.l 1c984 <input+0xe>,d1
    e688:	move.l 1ca82 <cameraY>,d0
    e68e:	add.l d0,d1
    e690:	moveq #28,d0
    e692:	add.l 8(sp),d0
    e696:	move.l d1,-(sp)
    e698:	pea 1 <_start+0x1>
    e69c:	move.l d0,-(sp)
    e69e:	jsr 15176 <setVariable>
    e6a4:	lea 12(sp),sp
	return BR_CONTINUE;
    e6a8:	moveq #2,d0
}
    e6aa:	rts

0000e6ac <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e6ac:	move.l 1c980 <input+0xa>,d0
    e6b2:	move.l d0,-(sp)
    e6b4:	jsr 176da <__floatsisf>
    e6ba:	addq.l #4,sp
    e6bc:	move.l d0,d1
    e6be:	move.l 1c362 <cameraZoom>,d0
    e6c4:	move.l d0,-(sp)
    e6c6:	move.l d1,-(sp)
    e6c8:	jsr 1778c <__mulsf3>
    e6ce:	addq.l #8,sp
    e6d0:	move.l d0,-(sp)
    e6d2:	jsr 17672 <__fixsfsi>
    e6d8:	addq.l #4,sp
    e6da:	move.l d0,d1
    e6dc:	moveq #28,d0
    e6de:	add.l 8(sp),d0
    e6e2:	move.l d1,-(sp)
    e6e4:	pea 1 <_start+0x1>
    e6e8:	move.l d0,-(sp)
    e6ea:	jsr 15176 <setVariable>
    e6f0:	lea 12(sp),sp
	return BR_CONTINUE;
    e6f4:	moveq #2,d0
}
    e6f6:	rts

0000e6f8 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e6f8:	move.l 1c984 <input+0xe>,d0
    e6fe:	move.l d0,-(sp)
    e700:	jsr 176da <__floatsisf>
    e706:	addq.l #4,sp
    e708:	move.l d0,d1
    e70a:	move.l 1c362 <cameraZoom>,d0
    e710:	move.l d0,-(sp)
    e712:	move.l d1,-(sp)
    e714:	jsr 1778c <__mulsf3>
    e71a:	addq.l #8,sp
    e71c:	move.l d0,-(sp)
    e71e:	jsr 17672 <__fixsfsi>
    e724:	addq.l #4,sp
    e726:	move.l d0,d1
    e728:	moveq #28,d0
    e72a:	add.l 8(sp),d0
    e72e:	move.l d1,-(sp)
    e730:	pea 1 <_start+0x1>
    e734:	move.l d0,-(sp)
    e736:	jsr 15176 <setVariable>
    e73c:	lea 12(sp),sp
	return BR_CONTINUE;
    e740:	moveq #2,d0
}
    e742:	rts

0000e744 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e744:	jsr 7da4 <statusBarText>
    e74a:	move.l d0,d1
    e74c:	moveq #28,d0
    e74e:	add.l 8(sp),d0
    e752:	move.l d1,-(sp)
    e754:	move.l d0,-(sp)
    e756:	jsr 14aa6 <makeTextVar>
    e75c:	addq.l #8,sp
	return BR_CONTINUE;
    e75e:	moveq #2,d0
}
    e760:	rts

0000e762 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e762:	       lea -20(sp),sp
    e766:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e768:	       movea.l 32(sp),a0
    e76c:	       move.l 24(a0),d0
    e770:	       move.l d0,-(sp)
    e772:	       jsr 14e5a <getTextFromAnyVar>
    e778:	       addq.l #4,sp
    e77a:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e77e:	   /-- bne.s e786 <builtIn_getMatchingFiles+0x24>
    e780:	   |   moveq #1,d0
    e782:	/--|-- bra.w e848 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e786:	|  \-> moveq #24,d0
    e788:	|      add.l 32(sp),d0
    e78c:	|      move.l d0,-(sp)
    e78e:	|      jsr 15208 <trimStack>
    e794:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e796:	|      moveq #28,d0
    e798:	|      add.l 32(sp),d0
    e79c:	|      move.l d0,-(sp)
    e79e:	|      jsr 14ad2 <unlinkVar>
    e7a4:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e7a6:	|      movea.l 32(sp),a0
    e7aa:	|      moveq #6,d0
    e7ac:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e7b0:	|      moveq #12,d0
    e7b2:	|      move.l d0,16(sp)
    e7b6:	|      clr.l 12(sp)
    e7ba:	|      move.l 1c9c4 <SysBase>,d0
    e7c0:	|      movea.l d0,a6
    e7c2:	|      move.l 16(sp),d0
    e7c6:	|      move.l 12(sp),d1
    e7ca:	|      jsr -684(a6)
    e7ce:	|      move.l d0,8(sp)
    e7d2:	|      move.l 8(sp),d0
    e7d6:	|      movea.l 32(sp),a0
    e7da:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e7de:	|      moveq #32,d0
    e7e0:	|      add.l 32(sp),d0
    e7e4:	|  /-- bne.s e7ea <builtIn_getMatchingFiles+0x88>
    e7e6:	|  |   moveq #1,d0
    e7e8:	+--|-- bra.s e848 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e7ea:	|  \-> movea.l 32(sp),a0
    e7ee:	|      movea.l 32(a0),a0
    e7f2:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e7f4:	|      movea.l 32(sp),a0
    e7f8:	|      movea.l 32(a0),a0
    e7fc:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e800:	|      movea.l 32(sp),a0
    e804:	|      movea.l 32(a0),a0
    e808:	|      moveq #1,d0
    e80a:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e80e:	|      movea.l 32(sp),a0
    e812:	|      move.l 32(a0),d0
    e816:	|      move.l 20(sp),-(sp)
    e81a:	|      move.l d0,-(sp)
    e81c:	|      jsr 14640 <getSavedGamesStack>
    e822:	|      addq.l #8,sp
    e824:	|      tst.w d0
    e826:	|  /-- bne.s e82c <builtIn_getMatchingFiles+0xca>
    e828:	|  |   moveq #1,d0
    e82a:	+--|-- bra.s e848 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e82c:	|  \-> move.l 20(sp),4(sp)
    e832:	|      move.l 1c9c4 <SysBase>,d0
    e838:	|      movea.l d0,a6
    e83a:	|      movea.l 4(sp),a1
    e83e:	|      jsr -690(a6)
	newText = NULL;
    e842:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e846:	|      moveq #2,d0
}
    e848:	\----> movea.l (sp)+,a6
    e84a:	       lea 20(sp),sp
    e84e:	       rts

0000e850 <builtIn_saveGame>:

builtIn(saveGame)
{
    e850:	       lea -12(sp),sp
    e854:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e856:	       movea.l 24(sp),a0
    e85a:	       move.l 24(a0),d0
    e85e:	       move.l d0,-(sp)
    e860:	       jsr 14e5a <getTextFromAnyVar>
    e866:	       addq.l #4,sp
    e868:	       move.l d0,1c990 <loadNow>
    trimStack(&fun->stack);
    e86e:	       moveq #24,d0
    e870:	       add.l 24(sp),d0
    e874:	       move.l d0,-(sp)
    e876:	       jsr 15208 <trimStack>
    e87c:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e87e:	       move.l 1c990 <loadNow>,d0
    e884:	       move.l d0,-(sp)
    e886:	       jsr 2fe <encodeFilename>
    e88c:	       addq.l #4,sp
    e88e:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e892:	       move.l 1c990 <loadNow>,8(sp)
    e89a:	       move.l 1c9c4 <SysBase>,d0
    e8a0:	       movea.l d0,a6
    e8a2:	       movea.l 8(sp),a1
    e8a6:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e8aa:	       move.l 12(sp),-(sp)
    e8ae:	       jsr e3ba <failSecurityCheck>
    e8b4:	       addq.l #4,sp
    e8b6:	       tst.w d0
    e8b8:	   /-- beq.s e8be <builtIn_saveGame+0x6e>
    e8ba:	   |   moveq #1,d0
    e8bc:	/--|-- bra.s e90e <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e8be:	|  \-> move.l 12(sp),-(sp)
    e8c2:	|      pea 19841 <PutChar+0x1acf>
    e8c8:	|      jsr 13db0 <joinStrings>
    e8ce:	|      addq.l #8,sp
    e8d0:	|      move.l d0,1c990 <loadNow>
    FreeVec(aaaaa);
    e8d6:	|      move.l 12(sp),4(sp)
    e8dc:	|      move.l 1c9c4 <SysBase>,d0
    e8e2:	|      movea.l d0,a6
    e8e4:	|      movea.l 4(sp),a1
    e8e8:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e8ec:	|      moveq #28,d0
    e8ee:	|      add.l 24(sp),d0
    e8f2:	|      clr.l -(sp)
    e8f4:	|      pea 1 <_start+0x1>
    e8f8:	|      move.l d0,-(sp)
    e8fa:	|      jsr 15176 <setVariable>
    e900:	|      lea 12(sp),sp
    saverFunc = fun;
    e904:	|      move.l 24(sp),1ca8e <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e90c:	|      moveq #0,d0
}
    e90e:	\----> movea.l (sp)+,a6
    e910:	       lea 12(sp),sp
    e914:	       rts

0000e916 <builtIn_fileExists>:

builtIn(fileExists)
{
    e916:	       lea -36(sp),sp
    e91a:	       move.l a6,-(sp)
    e91c:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e91e:	       movea.l 52(sp),a0
    e922:	       move.l 24(a0),d0
    e926:	       move.l d0,-(sp)
    e928:	       jsr 14e5a <getTextFromAnyVar>
    e92e:	       addq.l #4,sp
    e930:	       move.l d0,1c990 <loadNow>
    trimStack(&fun->stack);
    e936:	       moveq #24,d0
    e938:	       add.l 52(sp),d0
    e93c:	       move.l d0,-(sp)
    e93e:	       jsr 15208 <trimStack>
    e944:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e946:	       move.l 1c990 <loadNow>,d0
    e94c:	       move.l d0,-(sp)
    e94e:	       jsr 2fe <encodeFilename>
    e954:	       addq.l #4,sp
    e956:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e95a:	       move.l 1c990 <loadNow>,36(sp)
    e962:	       move.l 1c9c4 <SysBase>,d0
    e968:	       movea.l d0,a6
    e96a:	       movea.l 36(sp),a1
    e96e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e972:	       move.l 40(sp),-(sp)
    e976:	       jsr e3ba <failSecurityCheck>
    e97c:	       addq.l #4,sp
    e97e:	       tst.w d0
    e980:	   /-- beq.s e988 <builtIn_fileExists+0x72>
    e982:	   |   moveq #1,d0
    e984:	/--|-- bra.w ea28 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e988:	|  \-> move.l 40(sp),32(sp)
    e98e:	|      move.l #1005,28(sp)
    e996:	|      move.l 1c9cc <DOSBase>,d0
    e99c:	|      movea.l d0,a6
    e99e:	|      move.l 32(sp),d1
    e9a2:	|      move.l 28(sp),d2
    e9a6:	|      jsr -30(a6)
    e9aa:	|      move.l d0,24(sp)
    e9ae:	|      move.l 24(sp),d0
    e9b2:	|      move.l d0,20(sp)
    if (!fp) {        
    e9b6:	|  /-- bne.s e9c6 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e9b8:	|  |   pea 19843 <PutChar+0x1ad1>
    e9be:	|  |   jsr 1729e <KPrintF>
    e9c4:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e9c6:	|  \-> tst.l 20(sp)
    e9ca:	|      sne d0
    e9cc:	|      neg.b d0
    e9ce:	|      moveq #0,d1
    e9d0:	|      move.b d0,d1
    e9d2:	|      moveq #28,d0
    e9d4:	|      add.l 52(sp),d0
    e9d8:	|      move.l d1,-(sp)
    e9da:	|      pea 1 <_start+0x1>
    e9de:	|      move.l d0,-(sp)
    e9e0:	|      jsr 15176 <setVariable>
    e9e6:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e9ea:	|      tst.l 20(sp)
    e9ee:	|  /-- beq.s ea0a <builtIn_fileExists+0xf4>
    e9f0:	|  |   move.l 20(sp),16(sp)
    e9f6:	|  |   move.l 1c9cc <DOSBase>,d0
    e9fc:	|  |   movea.l d0,a6
    e9fe:	|  |   move.l 16(sp),d1
    ea02:	|  |   jsr -36(a6)
    ea06:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    ea0a:	|  \-> move.l 40(sp),8(sp)
    ea10:	|      move.l 1c9c4 <SysBase>,d0
    ea16:	|      movea.l d0,a6
    ea18:	|      movea.l 8(sp),a1
    ea1c:	|      jsr -690(a6)
    loadNow = NULL;
    ea20:	|      clr.l 1c990 <loadNow>
    return BR_CONTINUE;
    ea26:	|      moveq #2,d0
}
    ea28:	\----> move.l (sp)+,d2
    ea2a:	       movea.l (sp)+,a6
    ea2c:	       lea 36(sp),sp
    ea30:	       rts

0000ea32 <builtIn_loadGame>:

builtIn(loadGame)
{
    ea32:	       lea -36(sp),sp
    ea36:	       move.l a6,-(sp)
    ea38:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    ea3a:	       movea.l 52(sp),a0
    ea3e:	       move.l 24(a0),d0
    ea42:	       move.l d0,-(sp)
    ea44:	       jsr 14e5a <getTextFromAnyVar>
    ea4a:	       addq.l #4,sp
    ea4c:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    ea50:	       moveq #24,d0
    ea52:	       add.l 52(sp),d0
    ea56:	       move.l d0,-(sp)
    ea58:	       jsr 15208 <trimStack>
    ea5e:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    ea60:	       move.l 40(sp),-(sp)
    ea64:	       jsr 2fe <encodeFilename>
    ea6a:	       addq.l #4,sp
    ea6c:	       move.l d0,1c990 <loadNow>
    FreeVec(aaaaa);
    ea72:	       move.l 40(sp),36(sp)
    ea78:	       move.l 1c9c4 <SysBase>,d0
    ea7e:	       movea.l d0,a6
    ea80:	       movea.l 36(sp),a1
    ea84:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    ea88:	       move.l 1c990 <loadNow>,d0
    ea8e:	       move.l d0,-(sp)
    ea90:	       jsr e3ba <failSecurityCheck>
    ea96:	       addq.l #4,sp
    ea98:	       tst.w d0
    ea9a:	   /-- beq.s eaa0 <builtIn_loadGame+0x6e>
    ea9c:	   |   moveq #1,d0
    ea9e:	/--|-- bra.s eb10 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    eaa0:	|  \-> move.l 1c990 <loadNow>,32(sp)
    eaa8:	|      move.l #1005,28(sp)
    eab0:	|      move.l 1c9cc <DOSBase>,d0
    eab6:	|      movea.l d0,a6
    eab8:	|      move.l 32(sp),d1
    eabc:	|      move.l 28(sp),d2
    eac0:	|      jsr -30(a6)
    eac4:	|      move.l d0,24(sp)
    eac8:	|      move.l 24(sp),d0
    eacc:	|      move.l d0,20(sp)
    if (fp) {
    ead0:	|  /-- beq.s eaf0 <builtIn_loadGame+0xbe>
        Close(fp);
    ead2:	|  |   move.l 20(sp),12(sp)
    ead8:	|  |   move.l 1c9cc <DOSBase>,d0
    eade:	|  |   movea.l d0,a6
    eae0:	|  |   move.l 12(sp),d1
    eae4:	|  |   jsr -36(a6)
    eae8:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    eaec:	|  |   moveq #0,d0
    eaee:	+--|-- bra.s eb10 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    eaf0:	|  \-> move.l 1c990 <loadNow>,16(sp)
    eaf8:	|      move.l 1c9c4 <SysBase>,d0
    eafe:	|      movea.l d0,a6
    eb00:	|      movea.l 16(sp),a1
    eb04:	|      jsr -690(a6)
    loadNow = NULL;
    eb08:	|      clr.l 1c990 <loadNow>
    return BR_CONTINUE;
    eb0e:	|      moveq #2,d0
}
    eb10:	\----> move.l (sp)+,d2
    eb12:	       movea.l (sp)+,a6
    eb14:	       lea 36(sp),sp
    eb18:	       rts

0000eb1a <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    eb1a:	move.l 1ca64 <sceneHeight>,d0
    eb20:	move.l d0,d1
    eb22:	move.l 1ca60 <sceneWidth>,d0
    eb28:	move.l d1,-(sp)
    eb2a:	move.l d0,-(sp)
    eb2c:	clr.l -(sp)
    eb2e:	clr.l -(sp)
    eb30:	jsr d2ae <blankScreen>
    eb36:	lea 16(sp),sp
	return BR_CONTINUE;
    eb3a:	moveq #2,d0
}
    eb3c:	rts

0000eb3e <builtIn_blankArea>:

builtIn(blankArea)
{
    eb3e:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb42:	       movea.l 24(sp),a0
    eb46:	       move.l 24(a0),d0
    eb4a:	       move.l d0,-(sp)
    eb4c:	       pea 1 <_start+0x1>
    eb50:	       lea 8(sp),a0
    eb54:	       move.l a0,-(sp)
    eb56:	       jsr 14884 <getValueType>
    eb5c:	       lea 12(sp),sp
    eb60:	       tst.w d0
    eb62:	   /-- bne.s eb6a <builtIn_blankArea+0x2c>
    eb64:	   |   moveq #1,d0
    eb66:	/--|-- bra.w ec40 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb6a:	|  \-> moveq #24,d0
    eb6c:	|      add.l 24(sp),d0
    eb70:	|      move.l d0,-(sp)
    eb72:	|      jsr 15208 <trimStack>
    eb78:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb7a:	|      movea.l 24(sp),a0
    eb7e:	|      move.l 24(a0),d0
    eb82:	|      move.l d0,-(sp)
    eb84:	|      pea 1 <_start+0x1>
    eb88:	|      lea 12(sp),a0
    eb8c:	|      move.l a0,-(sp)
    eb8e:	|      jsr 14884 <getValueType>
    eb94:	|      lea 12(sp),sp
    eb98:	|      tst.w d0
    eb9a:	|  /-- bne.s eba2 <builtIn_blankArea+0x64>
    eb9c:	|  |   moveq #1,d0
    eb9e:	+--|-- bra.w ec40 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eba2:	|  \-> moveq #24,d0
    eba4:	|      add.l 24(sp),d0
    eba8:	|      move.l d0,-(sp)
    ebaa:	|      jsr 15208 <trimStack>
    ebb0:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ebb2:	|      movea.l 24(sp),a0
    ebb6:	|      move.l 24(a0),d0
    ebba:	|      move.l d0,-(sp)
    ebbc:	|      pea 1 <_start+0x1>
    ebc0:	|      moveq #16,d0
    ebc2:	|      add.l sp,d0
    ebc4:	|      move.l d0,-(sp)
    ebc6:	|      jsr 14884 <getValueType>
    ebcc:	|      lea 12(sp),sp
    ebd0:	|      tst.w d0
    ebd2:	|  /-- bne.s ebd8 <builtIn_blankArea+0x9a>
    ebd4:	|  |   moveq #1,d0
    ebd6:	+--|-- bra.s ec40 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ebd8:	|  \-> moveq #24,d0
    ebda:	|      add.l 24(sp),d0
    ebde:	|      move.l d0,-(sp)
    ebe0:	|      jsr 15208 <trimStack>
    ebe6:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ebe8:	|      movea.l 24(sp),a0
    ebec:	|      move.l 24(a0),d0
    ebf0:	|      move.l d0,-(sp)
    ebf2:	|      pea 1 <_start+0x1>
    ebf6:	|      moveq #20,d0
    ebf8:	|      add.l sp,d0
    ebfa:	|      move.l d0,-(sp)
    ebfc:	|      jsr 14884 <getValueType>
    ec02:	|      lea 12(sp),sp
    ec06:	|      tst.w d0
    ec08:	|  /-- bne.s ec0e <builtIn_blankArea+0xd0>
    ec0a:	|  |   moveq #1,d0
    ec0c:	+--|-- bra.s ec40 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ec0e:	|  \-> moveq #24,d0
    ec10:	|      add.l 24(sp),d0
    ec14:	|      move.l d0,-(sp)
    ec16:	|      jsr 15208 <trimStack>
    ec1c:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    ec1e:	|      movea.l (sp),a1
    ec20:	|      movea.l 4(sp),a0
    ec24:	|      move.l 8(sp),d1
    ec28:	|      move.l 12(sp),d0
    ec2c:	|      move.l a1,-(sp)
    ec2e:	|      move.l a0,-(sp)
    ec30:	|      move.l d1,-(sp)
    ec32:	|      move.l d0,-(sp)
    ec34:	|      jsr d2ae <blankScreen>
    ec3a:	|      lea 16(sp),sp
	return BR_CONTINUE;
    ec3e:	|      moveq #2,d0
}
    ec40:	\----> lea 16(sp),sp
    ec44:	       rts

0000ec46 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    ec46:	jsr d2c2 <darkScreen>
	return BR_CONTINUE;
    ec4c:	moveq #2,d0
}
    ec4e:	rts

0000ec50 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    ec50:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec54:	       movea.l 20(sp),a0
    ec58:	       move.l 24(a0),d0
    ec5c:	       move.l d0,-(sp)
    ec5e:	       pea 1 <_start+0x1>
    ec62:	       lea 8(sp),a0
    ec66:	       move.l a0,-(sp)
    ec68:	       jsr 14884 <getValueType>
    ec6e:	       lea 12(sp),sp
    ec72:	       tst.w d0
    ec74:	   /-- bne.s ec7c <builtIn_addOverlay+0x2c>
    ec76:	   |   moveq #1,d0
    ec78:	/--|-- bra.w ed14 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ec7c:	|  \-> moveq #24,d0
    ec7e:	|      add.l 20(sp),d0
    ec82:	|      move.l d0,-(sp)
    ec84:	|      jsr 15208 <trimStack>
    ec8a:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec8c:	|      movea.l 20(sp),a0
    ec90:	|      move.l 24(a0),d0
    ec94:	|      move.l d0,-(sp)
    ec96:	|      pea 1 <_start+0x1>
    ec9a:	|      moveq #12,d0
    ec9c:	|      add.l sp,d0
    ec9e:	|      move.l d0,-(sp)
    eca0:	|      jsr 14884 <getValueType>
    eca6:	|      lea 12(sp),sp
    ecaa:	|      tst.w d0
    ecac:	|  /-- bne.s ecb2 <builtIn_addOverlay+0x62>
    ecae:	|  |   moveq #1,d0
    ecb0:	+--|-- bra.s ed14 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ecb2:	|  \-> moveq #24,d0
    ecb4:	|      add.l 20(sp),d0
    ecb8:	|      move.l d0,-(sp)
    ecba:	|      jsr 15208 <trimStack>
    ecc0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ecc2:	|      movea.l 20(sp),a0
    ecc6:	|      move.l 24(a0),d0
    ecca:	|      move.l d0,-(sp)
    eccc:	|      pea 5 <_start+0x5>
    ecd0:	|      moveq #16,d0
    ecd2:	|      add.l sp,d0
    ecd4:	|      move.l d0,-(sp)
    ecd6:	|      jsr 14884 <getValueType>
    ecdc:	|      lea 12(sp),sp
    ece0:	|      tst.w d0
    ece2:	|  /-- bne.s ece8 <builtIn_addOverlay+0x98>
    ece4:	|  |   moveq #1,d0
    ece6:	+--|-- bra.s ed14 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ece8:	|  \-> moveq #24,d0
    ecea:	|      add.l 20(sp),d0
    ecee:	|      move.l d0,-(sp)
    ecf0:	|      jsr 15208 <trimStack>
    ecf6:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ecf8:	|      movea.l (sp),a0
    ecfa:	|      move.l 4(sp),d1
    ecfe:	|      move.l 8(sp),d0
    ed02:	|      move.l a0,-(sp)
    ed04:	|      move.l d1,-(sp)
    ed06:	|      move.l d0,-(sp)
    ed08:	|      jsr d3e0 <loadBackDrop>
    ed0e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed12:	|      moveq #2,d0
}
    ed14:	\----> lea 12(sp),sp
    ed18:	       rts

0000ed1a <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ed1a:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed1e:	       movea.l 20(sp),a0
    ed22:	       move.l 24(a0),d0
    ed26:	       move.l d0,-(sp)
    ed28:	       pea 1 <_start+0x1>
    ed2c:	       lea 8(sp),a0
    ed30:	       move.l a0,-(sp)
    ed32:	       jsr 14884 <getValueType>
    ed38:	       lea 12(sp),sp
    ed3c:	       tst.w d0
    ed3e:	   /-- bne.s ed46 <builtIn_mixOverlay+0x2c>
    ed40:	   |   moveq #1,d0
    ed42:	/--|-- bra.w edde <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ed46:	|  \-> moveq #24,d0
    ed48:	|      add.l 20(sp),d0
    ed4c:	|      move.l d0,-(sp)
    ed4e:	|      jsr 15208 <trimStack>
    ed54:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed56:	|      movea.l 20(sp),a0
    ed5a:	|      move.l 24(a0),d0
    ed5e:	|      move.l d0,-(sp)
    ed60:	|      pea 1 <_start+0x1>
    ed64:	|      moveq #12,d0
    ed66:	|      add.l sp,d0
    ed68:	|      move.l d0,-(sp)
    ed6a:	|      jsr 14884 <getValueType>
    ed70:	|      lea 12(sp),sp
    ed74:	|      tst.w d0
    ed76:	|  /-- bne.s ed7c <builtIn_mixOverlay+0x62>
    ed78:	|  |   moveq #1,d0
    ed7a:	+--|-- bra.s edde <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ed7c:	|  \-> moveq #24,d0
    ed7e:	|      add.l 20(sp),d0
    ed82:	|      move.l d0,-(sp)
    ed84:	|      jsr 15208 <trimStack>
    ed8a:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed8c:	|      movea.l 20(sp),a0
    ed90:	|      move.l 24(a0),d0
    ed94:	|      move.l d0,-(sp)
    ed96:	|      pea 5 <_start+0x5>
    ed9a:	|      moveq #16,d0
    ed9c:	|      add.l sp,d0
    ed9e:	|      move.l d0,-(sp)
    eda0:	|      jsr 14884 <getValueType>
    eda6:	|      lea 12(sp),sp
    edaa:	|      tst.w d0
    edac:	|  /-- bne.s edb2 <builtIn_mixOverlay+0x98>
    edae:	|  |   moveq #1,d0
    edb0:	+--|-- bra.s edde <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    edb2:	|  \-> moveq #24,d0
    edb4:	|      add.l 20(sp),d0
    edb8:	|      move.l d0,-(sp)
    edba:	|      jsr 15208 <trimStack>
    edc0:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    edc2:	|      movea.l (sp),a0
    edc4:	|      move.l 4(sp),d1
    edc8:	|      move.l 8(sp),d0
    edcc:	|      move.l a0,-(sp)
    edce:	|      move.l d1,-(sp)
    edd0:	|      move.l d0,-(sp)
    edd2:	|      jsr d456 <mixBackDrop>
    edd8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eddc:	|      moveq #2,d0
}
    edde:	\----> lea 12(sp),sp
    ede2:	       rts

0000ede4 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ede4:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    ede8:	       pea 19861 <PutChar+0x1aef>
    edee:	       jsr 1729e <KPrintF>
    edf4:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edf6:	       movea.l 20(sp),a0
    edfa:	       move.l 24(a0),d0
    edfe:	       move.l d0,-(sp)
    ee00:	       pea 1 <_start+0x1>
    ee04:	       lea 8(sp),a0
    ee08:	       move.l a0,-(sp)
    ee0a:	       jsr 14884 <getValueType>
    ee10:	       lea 12(sp),sp
    ee14:	       tst.w d0
    ee16:	   /-- bne.s ee1e <builtIn_pasteImage+0x3a>
    ee18:	   |   moveq #1,d0
    ee1a:	/--|-- bra.w eebc <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ee1e:	|  \-> moveq #24,d0
    ee20:	|      add.l 20(sp),d0
    ee24:	|      move.l d0,-(sp)
    ee26:	|      jsr 15208 <trimStack>
    ee2c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee2e:	|      movea.l 20(sp),a0
    ee32:	|      move.l 24(a0),d0
    ee36:	|      move.l d0,-(sp)
    ee38:	|      pea 1 <_start+0x1>
    ee3c:	|      moveq #12,d0
    ee3e:	|      add.l sp,d0
    ee40:	|      move.l d0,-(sp)
    ee42:	|      jsr 14884 <getValueType>
    ee48:	|      lea 12(sp),sp
    ee4c:	|      tst.w d0
    ee4e:	|  /-- bne.s ee54 <builtIn_pasteImage+0x70>
    ee50:	|  |   moveq #1,d0
    ee52:	+--|-- bra.s eebc <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ee54:	|  \-> moveq #24,d0
    ee56:	|      add.l 20(sp),d0
    ee5a:	|      move.l d0,-(sp)
    ee5c:	|      jsr 15208 <trimStack>
    ee62:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ee64:	|      movea.l 20(sp),a0
    ee68:	|      move.l 24(a0),d0
    ee6c:	|      move.l d0,-(sp)
    ee6e:	|      jsr 14d5c <getAnimationFromVar>
    ee74:	|      addq.l #4,sp
    ee76:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ee7a:	|      moveq #24,d0
    ee7c:	|      add.l 20(sp),d0
    ee80:	|      move.l d0,-(sp)
    ee82:	|      jsr 15208 <trimStack>
    ee88:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ee8a:	|      tst.l 8(sp)
    ee8e:	|  /-- bne.s ee94 <builtIn_pasteImage+0xb0>
    ee90:	|  |   moveq #2,d0
    ee92:	+--|-- bra.s eebc <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    ee94:	|  \-> move.l (sp),d1
    ee96:	|      move.l 4(sp),d0
    ee9a:	|      move.l 8(sp),-(sp)
    ee9e:	|      move.l d1,-(sp)
    eea0:	|      move.l d0,-(sp)
    eea2:	|      jsr d94 <pasteCursor>
    eea8:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    eeac:	|      pea 19876 <PutChar+0x1b04>
    eeb2:	|      jsr 1729e <KPrintF>
    eeb8:	|      addq.l #4,sp
	return BR_CONTINUE;	
    eeba:	|      moveq #2,d0
}
    eebc:	\----> lea 12(sp),sp
    eec0:	       rts

0000eec2 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    eec2:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eec4:	       movea.l 16(sp),a0
    eec8:	       move.l 24(a0),d0
    eecc:	       move.l d0,-(sp)
    eece:	       pea 1 <_start+0x1>
    eed2:	       move.l sp,d0
    eed4:	       addq.l #8,d0
    eed6:	       move.l d0,-(sp)
    eed8:	       jsr 14884 <getValueType>
    eede:	       lea 12(sp),sp
    eee2:	       tst.w d0
    eee4:	   /-- bne.s eeec <builtIn_setSceneDimensions+0x2a>
    eee6:	   |   moveq #1,d0
    eee8:	/--|-- bra.w ef74 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    eeec:	|  \-> moveq #24,d0
    eeee:	|      add.l 16(sp),d0
    eef2:	|      move.l d0,-(sp)
    eef4:	|      jsr 15208 <trimStack>
    eefa:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eefc:	|      movea.l 16(sp),a0
    ef00:	|      move.l 24(a0),d0
    ef04:	|      move.l d0,-(sp)
    ef06:	|      pea 1 <_start+0x1>
    ef0a:	|      moveq #12,d0
    ef0c:	|      add.l sp,d0
    ef0e:	|      move.l d0,-(sp)
    ef10:	|      jsr 14884 <getValueType>
    ef16:	|      lea 12(sp),sp
    ef1a:	|      tst.w d0
    ef1c:	|  /-- bne.s ef22 <builtIn_setSceneDimensions+0x60>
    ef1e:	|  |   moveq #1,d0
    ef20:	+--|-- bra.s ef74 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ef22:	|  \-> moveq #24,d0
    ef24:	|      add.l 16(sp),d0
    ef28:	|      move.l d0,-(sp)
    ef2a:	|      jsr 15208 <trimStack>
    ef30:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ef32:	|      move.l (sp),d1
    ef34:	|      move.l 4(sp),d0
    ef38:	|      move.l d1,-(sp)
    ef3a:	|      move.l d0,-(sp)
    ef3c:	|      jsr d4ac <resizeBackdrop>
    ef42:	|      addq.l #8,sp
    ef44:	|      tst.w d0
    ef46:	|  /-- beq.s ef64 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ef48:	|  |   move.l (sp),d1
    ef4a:	|  |   move.l 4(sp),d0
    ef4e:	|  |   move.l d1,-(sp)
    ef50:	|  |   move.l d0,-(sp)
    ef52:	|  |   clr.l -(sp)
    ef54:	|  |   clr.l -(sp)
    ef56:	|  |   jsr d2ae <blankScreen>
    ef5c:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ef60:	|  |   moveq #2,d0
    ef62:	+--|-- bra.s ef74 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ef64:	|  \-> pea 1988c <PutChar+0x1b1a>
    ef6a:	|      jsr 1729e <KPrintF>
    ef70:	|      addq.l #4,sp
	return BR_ERROR;
    ef72:	|      moveq #1,d0
}
    ef74:	\----> addq.l #8,sp
    ef76:	       rts

0000ef78 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ef78:	          move.l d3,-(sp)
    ef7a:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef7c:	          movea.l 16(sp),a0
    ef80:	          move.l 24(a0),d0
    ef84:	          move.l d0,-(sp)
    ef86:	          pea 1 <_start+0x1>
    ef8a:	          pea 1ca82 <cameraY>
    ef90:	          jsr 14884 <getValueType>
    ef96:	          lea 12(sp),sp
    ef9a:	          tst.w d0
    ef9c:	      /-- bne.s efa4 <builtIn_aimCamera+0x2c>
    ef9e:	      |   moveq #1,d0
    efa0:	/-----|-- bra.w f226 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    efa4:	|     \-> moveq #24,d0
    efa6:	|         add.l 16(sp),d0
    efaa:	|         move.l d0,-(sp)
    efac:	|         jsr 15208 <trimStack>
    efb2:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    efb4:	|         movea.l 16(sp),a0
    efb8:	|         move.l 24(a0),d0
    efbc:	|         move.l d0,-(sp)
    efbe:	|         pea 1 <_start+0x1>
    efc2:	|         pea 1ca7e <cameraX>
    efc8:	|         jsr 14884 <getValueType>
    efce:	|         lea 12(sp),sp
    efd2:	|         tst.w d0
    efd4:	|     /-- bne.s efdc <builtIn_aimCamera+0x64>
    efd6:	|     |   moveq #1,d0
    efd8:	+-----|-- bra.w f226 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    efdc:	|     \-> moveq #24,d0
    efde:	|         add.l 16(sp),d0
    efe2:	|         move.l d0,-(sp)
    efe4:	|         jsr 15208 <trimStack>
    efea:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    efec:	|         move.l 1ca7e <cameraX>,d0
    eff2:	|         move.l d0,-(sp)
    eff4:	|         jsr 176da <__floatsisf>
    effa:	|         addq.l #4,sp
    effc:	|         move.l d0,d2
    effe:	|         move.l 1c918 <winWidth>,d0
    f004:	|         lsr.l #1,d0
    f006:	|         move.l d0,-(sp)
    f008:	|         jsr 17702 <__floatunsisf>
    f00e:	|         addq.l #4,sp
    f010:	|         move.l d0,d1
    f012:	|         move.l 1c362 <cameraZoom>,d0
    f018:	|         move.l d0,-(sp)
    f01a:	|         move.l d1,-(sp)
    f01c:	|         jsr 17586 <__divsf3>
    f022:	|         addq.l #8,sp
    f024:	|         move.l d0,-(sp)
    f026:	|         move.l d2,-(sp)
    f028:	|         jsr 179ce <__subsf3>
    f02e:	|         addq.l #8,sp
    f030:	|         move.l d0,-(sp)
    f032:	|         jsr 17672 <__fixsfsi>
    f038:	|         addq.l #4,sp
    f03a:	|         move.l d0,1ca7e <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    f040:	|         move.l 1ca82 <cameraY>,d0
    f046:	|         move.l d0,-(sp)
    f048:	|         jsr 176da <__floatsisf>
    f04e:	|         addq.l #4,sp
    f050:	|         move.l d0,d2
    f052:	|         move.l 1c91c <winHeight>,d0
    f058:	|         lsr.l #1,d0
    f05a:	|         move.l d0,-(sp)
    f05c:	|         jsr 17702 <__floatunsisf>
    f062:	|         addq.l #4,sp
    f064:	|         move.l d0,d1
    f066:	|         move.l 1c362 <cameraZoom>,d0
    f06c:	|         move.l d0,-(sp)
    f06e:	|         move.l d1,-(sp)
    f070:	|         jsr 17586 <__divsf3>
    f076:	|         addq.l #8,sp
    f078:	|         move.l d0,-(sp)
    f07a:	|         move.l d2,-(sp)
    f07c:	|         jsr 179ce <__subsf3>
    f082:	|         addq.l #8,sp
    f084:	|         move.l d0,-(sp)
    f086:	|         jsr 17672 <__fixsfsi>
    f08c:	|         addq.l #4,sp
    f08e:	|         move.l d0,1ca82 <cameraY>

	if (cameraX < 0) cameraX = 0;
    f094:	|         move.l 1ca7e <cameraX>,d0
    f09a:	|     /-- bpl.s f0a6 <builtIn_aimCamera+0x12e>
    f09c:	|     |   clr.l 1ca7e <cameraX>
    f0a2:	|  /--|-- bra.w f15c <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f0a6:	|  |  \-> move.l 1ca7e <cameraX>,d0
    f0ac:	|  |      move.l d0,-(sp)
    f0ae:	|  |      jsr 176da <__floatsisf>
    f0b4:	|  |      addq.l #4,sp
    f0b6:	|  |      move.l d0,d2
    f0b8:	|  |      move.l 1ca60 <sceneWidth>,d0
    f0be:	|  |      move.l d0,-(sp)
    f0c0:	|  |      jsr 17702 <__floatunsisf>
    f0c6:	|  |      addq.l #4,sp
    f0c8:	|  |      move.l d0,d3
    f0ca:	|  |      move.l 1c918 <winWidth>,d0
    f0d0:	|  |      move.l d0,-(sp)
    f0d2:	|  |      jsr 17702 <__floatunsisf>
    f0d8:	|  |      addq.l #4,sp
    f0da:	|  |      move.l d0,d1
    f0dc:	|  |      move.l 1c362 <cameraZoom>,d0
    f0e2:	|  |      move.l d0,-(sp)
    f0e4:	|  |      move.l d1,-(sp)
    f0e6:	|  |      jsr 17586 <__divsf3>
    f0ec:	|  |      addq.l #8,sp
    f0ee:	|  |      move.l d0,-(sp)
    f0f0:	|  |      move.l d3,-(sp)
    f0f2:	|  |      jsr 179ce <__subsf3>
    f0f8:	|  |      addq.l #8,sp
    f0fa:	|  |      move.l d0,-(sp)
    f0fc:	|  |      move.l d2,-(sp)
    f0fe:	|  |      jsr 17846 <__gtsf2>
    f104:	|  |      addq.l #8,sp
    f106:	|  |      tst.l d0
    f108:	|  +----- ble.s f15c <builtIn_aimCamera+0x1e4>
    f10a:	|  |      move.l 1ca60 <sceneWidth>,d0
    f110:	|  |      move.l d0,-(sp)
    f112:	|  |      jsr 17702 <__floatunsisf>
    f118:	|  |      addq.l #4,sp
    f11a:	|  |      move.l d0,d2
    f11c:	|  |      move.l 1c918 <winWidth>,d0
    f122:	|  |      move.l d0,-(sp)
    f124:	|  |      jsr 17702 <__floatunsisf>
    f12a:	|  |      addq.l #4,sp
    f12c:	|  |      move.l d0,d1
    f12e:	|  |      move.l 1c362 <cameraZoom>,d0
    f134:	|  |      move.l d0,-(sp)
    f136:	|  |      move.l d1,-(sp)
    f138:	|  |      jsr 17586 <__divsf3>
    f13e:	|  |      addq.l #8,sp
    f140:	|  |      move.l d0,-(sp)
    f142:	|  |      move.l d2,-(sp)
    f144:	|  |      jsr 179ce <__subsf3>
    f14a:	|  |      addq.l #8,sp
    f14c:	|  |      move.l d0,-(sp)
    f14e:	|  |      jsr 17672 <__fixsfsi>
    f154:	|  |      addq.l #4,sp
    f156:	|  |      move.l d0,1ca7e <cameraX>
	if (cameraY < 0) cameraY = 0;
    f15c:	|  \----> move.l 1ca82 <cameraY>,d0
    f162:	|     /-- bpl.s f16e <builtIn_aimCamera+0x1f6>
    f164:	|     |   clr.l 1ca82 <cameraY>
    f16a:	|  /--|-- bra.w f224 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f16e:	|  |  \-> move.l 1ca82 <cameraY>,d0
    f174:	|  |      move.l d0,-(sp)
    f176:	|  |      jsr 176da <__floatsisf>
    f17c:	|  |      addq.l #4,sp
    f17e:	|  |      move.l d0,d2
    f180:	|  |      move.l 1ca64 <sceneHeight>,d0
    f186:	|  |      move.l d0,-(sp)
    f188:	|  |      jsr 17702 <__floatunsisf>
    f18e:	|  |      addq.l #4,sp
    f190:	|  |      move.l d0,d3
    f192:	|  |      move.l 1c91c <winHeight>,d0
    f198:	|  |      move.l d0,-(sp)
    f19a:	|  |      jsr 17702 <__floatunsisf>
    f1a0:	|  |      addq.l #4,sp
    f1a2:	|  |      move.l d0,d1
    f1a4:	|  |      move.l 1c362 <cameraZoom>,d0
    f1aa:	|  |      move.l d0,-(sp)
    f1ac:	|  |      move.l d1,-(sp)
    f1ae:	|  |      jsr 17586 <__divsf3>
    f1b4:	|  |      addq.l #8,sp
    f1b6:	|  |      move.l d0,-(sp)
    f1b8:	|  |      move.l d3,-(sp)
    f1ba:	|  |      jsr 179ce <__subsf3>
    f1c0:	|  |      addq.l #8,sp
    f1c2:	|  |      move.l d0,-(sp)
    f1c4:	|  |      move.l d2,-(sp)
    f1c6:	|  |      jsr 17846 <__gtsf2>
    f1cc:	|  |      addq.l #8,sp
    f1ce:	|  |      tst.l d0
    f1d0:	|  +----- ble.s f224 <builtIn_aimCamera+0x2ac>
    f1d2:	|  |      move.l 1ca64 <sceneHeight>,d0
    f1d8:	|  |      move.l d0,-(sp)
    f1da:	|  |      jsr 17702 <__floatunsisf>
    f1e0:	|  |      addq.l #4,sp
    f1e2:	|  |      move.l d0,d2
    f1e4:	|  |      move.l 1c91c <winHeight>,d0
    f1ea:	|  |      move.l d0,-(sp)
    f1ec:	|  |      jsr 17702 <__floatunsisf>
    f1f2:	|  |      addq.l #4,sp
    f1f4:	|  |      move.l d0,d1
    f1f6:	|  |      move.l 1c362 <cameraZoom>,d0
    f1fc:	|  |      move.l d0,-(sp)
    f1fe:	|  |      move.l d1,-(sp)
    f200:	|  |      jsr 17586 <__divsf3>
    f206:	|  |      addq.l #8,sp
    f208:	|  |      move.l d0,-(sp)
    f20a:	|  |      move.l d2,-(sp)
    f20c:	|  |      jsr 179ce <__subsf3>
    f212:	|  |      addq.l #8,sp
    f214:	|  |      move.l d0,-(sp)
    f216:	|  |      jsr 17672 <__fixsfsi>
    f21c:	|  |      addq.l #4,sp
    f21e:	|  |      move.l d0,1ca82 <cameraY>
	return BR_CONTINUE;
    f224:	|  \----> moveq #2,d0
}
    f226:	\-------> move.l (sp)+,d2
    f228:	          move.l (sp)+,d3
    f22a:	          rts

0000f22c <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f22c:	       subq.l #4,sp
    f22e:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f230:	       movea.l 16(sp),a0
    f234:	       move.l 24(a0),d0
    f238:	       move.l d0,-(sp)
    f23a:	       pea 1 <_start+0x1>
    f23e:	       moveq #12,d0
    f240:	       add.l sp,d0
    f242:	       move.l d0,-(sp)
    f244:	       jsr 14884 <getValueType>
    f24a:	       lea 12(sp),sp
    f24e:	       tst.w d0
    f250:	   /-- bne.s f258 <builtIn_zoomCamera+0x2c>
    f252:	   |   moveq #1,d0
    f254:	/--|-- bra.w f452 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f258:	|  \-> moveq #24,d0
    f25a:	|      add.l 16(sp),d0
    f25e:	|      move.l d0,-(sp)
    f260:	|      jsr 15208 <trimStack>
    f266:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f268:	|      move.l 1c980 <input+0xa>,d0
    f26e:	|      move.l d0,-(sp)
    f270:	|      jsr 176da <__floatsisf>
    f276:	|      addq.l #4,sp
    f278:	|      move.l d0,d1
    f27a:	|      move.l 1c362 <cameraZoom>,d0
    f280:	|      move.l d0,-(sp)
    f282:	|      move.l d1,-(sp)
    f284:	|      jsr 1778c <__mulsf3>
    f28a:	|      addq.l #8,sp
    f28c:	|      move.l d0,-(sp)
    f28e:	|      jsr 17672 <__fixsfsi>
    f294:	|      addq.l #4,sp
    f296:	|      move.l d0,1c980 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f29c:	|      move.l 1c984 <input+0xe>,d0
    f2a2:	|      move.l d0,-(sp)
    f2a4:	|      jsr 176da <__floatsisf>
    f2aa:	|      addq.l #4,sp
    f2ac:	|      move.l d0,d1
    f2ae:	|      move.l 1c362 <cameraZoom>,d0
    f2b4:	|      move.l d0,-(sp)
    f2b6:	|      move.l d1,-(sp)
    f2b8:	|      jsr 1778c <__mulsf3>
    f2be:	|      addq.l #8,sp
    f2c0:	|      move.l d0,-(sp)
    f2c2:	|      jsr 17672 <__fixsfsi>
    f2c8:	|      addq.l #4,sp
    f2ca:	|      move.l d0,1c984 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f2d0:	|      move.l 4(sp),d0
    f2d4:	|      move.l d0,-(sp)
    f2d6:	|      jsr 176da <__floatsisf>
    f2dc:	|      addq.l #4,sp
    f2de:	|      move.l #1008981770,-(sp)
    f2e4:	|      move.l d0,-(sp)
    f2e6:	|      jsr 1778c <__mulsf3>
    f2ec:	|      addq.l #8,sp
    f2ee:	|      move.l d0,1c362 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f2f4:	|      move.l 1c918 <winWidth>,d0
    f2fa:	|      move.l d0,-(sp)
    f2fc:	|      jsr 17702 <__floatunsisf>
    f302:	|      addq.l #4,sp
    f304:	|      move.l d0,d1
    f306:	|      move.l 1c362 <cameraZoom>,d0
    f30c:	|      move.l d0,-(sp)
    f30e:	|      move.l d1,-(sp)
    f310:	|      jsr 17586 <__divsf3>
    f316:	|      addq.l #8,sp
    f318:	|      move.l d0,d2
    f31a:	|      move.l 1ca60 <sceneWidth>,d0
    f320:	|      move.l d0,-(sp)
    f322:	|      jsr 17702 <__floatunsisf>
    f328:	|      addq.l #4,sp
    f32a:	|      move.l d0,-(sp)
    f32c:	|      move.l d2,-(sp)
    f32e:	|      jsr 17846 <__gtsf2>
    f334:	|      addq.l #8,sp
    f336:	|      tst.l d0
    f338:	|  /-- ble.s f36e <builtIn_zoomCamera+0x142>
    f33a:	|  |   move.l 1c918 <winWidth>,d0
    f340:	|  |   move.l d0,-(sp)
    f342:	|  |   jsr 17702 <__floatunsisf>
    f348:	|  |   addq.l #4,sp
    f34a:	|  |   move.l d0,d2
    f34c:	|  |   move.l 1ca60 <sceneWidth>,d0
    f352:	|  |   move.l d0,-(sp)
    f354:	|  |   jsr 17702 <__floatunsisf>
    f35a:	|  |   addq.l #4,sp
    f35c:	|  |   move.l d0,-(sp)
    f35e:	|  |   move.l d2,-(sp)
    f360:	|  |   jsr 17586 <__divsf3>
    f366:	|  |   addq.l #8,sp
    f368:	|  |   move.l d0,1c362 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f36e:	|  \-> move.l 1c91c <winHeight>,d0
    f374:	|      move.l d0,-(sp)
    f376:	|      jsr 17702 <__floatunsisf>
    f37c:	|      addq.l #4,sp
    f37e:	|      move.l d0,d1
    f380:	|      move.l 1c362 <cameraZoom>,d0
    f386:	|      move.l d0,-(sp)
    f388:	|      move.l d1,-(sp)
    f38a:	|      jsr 17586 <__divsf3>
    f390:	|      addq.l #8,sp
    f392:	|      move.l d0,d2
    f394:	|      move.l 1ca64 <sceneHeight>,d0
    f39a:	|      move.l d0,-(sp)
    f39c:	|      jsr 17702 <__floatunsisf>
    f3a2:	|      addq.l #4,sp
    f3a4:	|      move.l d0,-(sp)
    f3a6:	|      move.l d2,-(sp)
    f3a8:	|      jsr 17846 <__gtsf2>
    f3ae:	|      addq.l #8,sp
    f3b0:	|      tst.l d0
    f3b2:	|  /-- ble.s f3e8 <builtIn_zoomCamera+0x1bc>
    f3b4:	|  |   move.l 1c91c <winHeight>,d0
    f3ba:	|  |   move.l d0,-(sp)
    f3bc:	|  |   jsr 17702 <__floatunsisf>
    f3c2:	|  |   addq.l #4,sp
    f3c4:	|  |   move.l d0,d2
    f3c6:	|  |   move.l 1ca64 <sceneHeight>,d0
    f3cc:	|  |   move.l d0,-(sp)
    f3ce:	|  |   jsr 17702 <__floatunsisf>
    f3d4:	|  |   addq.l #4,sp
    f3d6:	|  |   move.l d0,-(sp)
    f3d8:	|  |   move.l d2,-(sp)
    f3da:	|  |   jsr 17586 <__divsf3>
    f3e0:	|  |   addq.l #8,sp
    f3e2:	|  |   move.l d0,1c362 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f3e8:	|  \-> move.l 1c980 <input+0xa>,d0
    f3ee:	|      move.l d0,-(sp)
    f3f0:	|      jsr 176da <__floatsisf>
    f3f6:	|      addq.l #4,sp
    f3f8:	|      move.l d0,d1
    f3fa:	|      move.l 1c362 <cameraZoom>,d0
    f400:	|      move.l d0,-(sp)
    f402:	|      move.l d1,-(sp)
    f404:	|      jsr 17586 <__divsf3>
    f40a:	|      addq.l #8,sp
    f40c:	|      move.l d0,-(sp)
    f40e:	|      jsr 17672 <__fixsfsi>
    f414:	|      addq.l #4,sp
    f416:	|      move.l d0,1c980 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f41c:	|      move.l 1c984 <input+0xe>,d0
    f422:	|      move.l d0,-(sp)
    f424:	|      jsr 176da <__floatsisf>
    f42a:	|      addq.l #4,sp
    f42c:	|      move.l d0,d1
    f42e:	|      move.l 1c362 <cameraZoom>,d0
    f434:	|      move.l d0,-(sp)
    f436:	|      move.l d1,-(sp)
    f438:	|      jsr 17586 <__divsf3>
    f43e:	|      addq.l #8,sp
    f440:	|      move.l d0,-(sp)
    f442:	|      jsr 17672 <__fixsfsi>
    f448:	|      addq.l #4,sp
    f44a:	|      move.l d0,1c984 <input+0xe>

	return BR_CONTINUE;
    f450:	|      moveq #2,d0
}
    f452:	\----> move.l (sp)+,d2
    f454:	       addq.l #4,sp
    f456:	       rts

0000f458 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f458:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f45a:	             tst.l 8(sp)
    f45e:	         /-- bne.s f472 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f460:	         |   pea 198b1 <PutChar+0x1b3f>
    f466:	         |   jsr 1729e <KPrintF>
    f46c:	         |   addq.l #4,sp
		return BR_ERROR;
    f46e:	         |   moveq #1,d0
    f470:	/--------|-- bra.s f4d2 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f472:	|        \-> jsr 15ea4 <rand>
    f478:	|            move.l d0,d1
    f47a:	|            move.l 8(sp),d0
    f47e:	|            move.l d0,-(sp)
    f480:	|            move.l d1,-(sp)
    f482:	|            jsr 17d36 <__umodsi3>
    f488:	|            addq.l #8,sp
    f48a:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f48c:	|     /----- bra.s f4c0 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f48e:	|  /--|----> move.l (sp),d0
    f490:	|  |  |      cmp.l 8(sp),d0
    f494:	|  |  |  /-- bne.s f4b0 <builtIn_pickOne+0x58>
    f496:	|  |  |  |   moveq #28,d0
    f498:	|  |  |  |   add.l 12(sp),d0
    f49c:	|  |  |  |   movea.l 12(sp),a0
    f4a0:	|  |  |  |   move.l 24(a0),d1
    f4a4:	|  |  |  |   move.l d0,-(sp)
    f4a6:	|  |  |  |   move.l d1,-(sp)
    f4a8:	|  |  |  |   jsr 14d3e <copyVariable>
    f4ae:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f4b0:	|  |  |  \-> moveq #24,d0
    f4b2:	|  |  |      add.l 12(sp),d0
    f4b6:	|  |  |      move.l d0,-(sp)
    f4b8:	|  |  |      jsr 15208 <trimStack>
    f4be:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f4c0:	|  |  \----> move.l 8(sp),d0
    f4c4:	|  |         move.l d0,d1
    f4c6:	|  |         subq.l #1,d1
    f4c8:	|  |         move.l d1,8(sp)
    f4cc:	|  |         tst.l d0
    f4ce:	|  \-------- bne.s f48e <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f4d0:	|            moveq #2,d0
}
    f4d2:	\----------> addq.l #4,sp
    f4d4:	             rts

0000f4d6 <builtIn_substring>:

builtIn(substring)
{
    f4d6:	       lea -40(sp),sp
    f4da:	       move.l a6,-(sp)
    f4dc:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f4de:	       movea.l 56(sp),a0
    f4e2:	       move.l 24(a0),d0
    f4e6:	       move.l d0,-(sp)
    f4e8:	       pea 1 <_start+0x1>
    f4ec:	       lea 16(sp),a0
    f4f0:	       move.l a0,-(sp)
    f4f2:	       jsr 14884 <getValueType>
    f4f8:	       lea 12(sp),sp
    f4fc:	       tst.w d0
    f4fe:	   /-- bne.s f506 <builtIn_substring+0x30>
    f500:	   |   moveq #1,d0
    f502:	/--|-- bra.w f67e <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f506:	|  \-> moveq #24,d0
    f508:	|      add.l 56(sp),d0
    f50c:	|      move.l d0,-(sp)
    f50e:	|      jsr 15208 <trimStack>
    f514:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f516:	|      movea.l 56(sp),a0
    f51a:	|      move.l 24(a0),d0
    f51e:	|      move.l d0,-(sp)
    f520:	|      pea 1 <_start+0x1>
    f524:	|      lea 20(sp),a0
    f528:	|      move.l a0,-(sp)
    f52a:	|      jsr 14884 <getValueType>
    f530:	|      lea 12(sp),sp
    f534:	|      tst.w d0
    f536:	|  /-- bne.s f53e <builtIn_substring+0x68>
    f538:	|  |   moveq #1,d0
    f53a:	+--|-- bra.w f67e <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f53e:	|  \-> moveq #24,d0
    f540:	|      add.l 56(sp),d0
    f544:	|      move.l d0,-(sp)
    f546:	|      jsr 15208 <trimStack>
    f54c:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f54e:	|      movea.l 56(sp),a0
    f552:	|      move.l 24(a0),d0
    f556:	|      move.l d0,-(sp)
    f558:	|      jsr 14e5a <getTextFromAnyVar>
    f55e:	|      addq.l #4,sp
    f560:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f564:	|      moveq #24,d0
    f566:	|      add.l 56(sp),d0
    f56a:	|      move.l d0,-(sp)
    f56c:	|      jsr 15208 <trimStack>
    f572:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f574:	|      move.l 44(sp),-(sp)
    f578:	|      jsr 13d70 <strlen>
    f57e:	|      addq.l #4,sp
    f580:	|      move.l d0,d1
    f582:	|      move.l 12(sp),d0
    f586:	|      movea.l d0,a0
    f588:	|      move.l 8(sp),d0
    f58c:	|      add.l a0,d0
    f58e:	|      cmp.l d1,d0
    f590:	|  /-- bls.s f5c6 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f592:	|  |   move.l 44(sp),-(sp)
    f596:	|  |   jsr 13d70 <strlen>
    f59c:	|  |   addq.l #4,sp
    f59e:	|  |   move.l d0,d1
    f5a0:	|  |   move.l 12(sp),d0
    f5a4:	|  |   sub.l d0,d1
    f5a6:	|  |   move.l d1,d0
    f5a8:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f5ac:	|  |   move.l 44(sp),-(sp)
    f5b0:	|  |   jsr 13d70 <strlen>
    f5b6:	|  |   addq.l #4,sp
    f5b8:	|  |   move.l d0,d1
    f5ba:	|  |   move.l 12(sp),d0
    f5be:	|  |   cmp.l d1,d0
    f5c0:	|  +-- bls.s f5c6 <builtIn_substring+0xf0>
            start = 0;
    f5c2:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f5c6:	|  \-> move.l 8(sp),d0
    f5ca:	|  /-- bpl.s f5d0 <builtIn_substring+0xfa>
        length = 0;
    f5cc:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f5d0:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f5d6:	|      move.l 12(sp),d1
    f5da:	|      move.l 8(sp),d0
    f5de:	|      move.l d1,d2
    f5e0:	|      add.l d0,d2
    f5e2:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f5e6:	|      move.l 36(sp),d0
    f5ea:	|      sub.l 40(sp),d0
    f5ee:	|      addq.l #1,d0
    f5f0:	|      move.l d0,32(sp)
    f5f4:	|      clr.l 28(sp)
    f5f8:	|      move.l 1c9c4 <SysBase>,d0
    f5fe:	|      movea.l d0,a6
    f600:	|      move.l 32(sp),d0
    f604:	|      move.l 28(sp),d1
    f608:	|      jsr -684(a6)
    f60c:	|      move.l d0,24(sp)
    f610:	|      move.l 24(sp),d0
    f614:	|      move.l d0,20(sp)
    if (!newString) {
    f618:	|  /-- bne.s f61e <builtIn_substring+0x148>
        return BR_ERROR;
    f61a:	|  |   moveq #1,d0
    f61c:	+--|-- bra.s f67e <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f61e:	|  \-> move.l 36(sp),d0
    f622:	|      sub.l 40(sp),d0
    f626:	|      move.l d0,d1
    f628:	|      move.l 40(sp),d0
    f62c:	|      add.l 44(sp),d0
    f630:	|      move.l d1,-(sp)
    f632:	|      move.l d0,-(sp)
    f634:	|      move.l 28(sp),-(sp)
    f638:	|      jsr 17252 <memcpy>
    f63e:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f642:	|      move.l 36(sp),d0
    f646:	|      sub.l 40(sp),d0
    f64a:	|      movea.l 20(sp),a0
    f64e:	|      adda.l d0,a0
    f650:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f652:	|      moveq #28,d0
    f654:	|      add.l 56(sp),d0
    f658:	|      move.l 20(sp),-(sp)
    f65c:	|      move.l d0,-(sp)
    f65e:	|      jsr 14aa6 <makeTextVar>
    f664:	|      addq.l #8,sp
    FreeVec(newString);
    f666:	|      move.l 20(sp),16(sp)
    f66c:	|      move.l 1c9c4 <SysBase>,d0
    f672:	|      movea.l d0,a6
    f674:	|      movea.l 16(sp),a1
    f678:	|      jsr -690(a6)
    return BR_CONTINUE;
    f67c:	|      moveq #2,d0
}
    f67e:	\----> move.l (sp)+,d2
    f680:	       movea.l (sp)+,a6
    f682:	       lea 40(sp),sp
    f686:	       rts

0000f688 <builtIn_stringLength>:

builtIn(stringLength)
{
    f688:	subq.l #8,sp
    f68a:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f68c:	movea.l 20(sp),a0
    f690:	move.l 24(a0),d0
    f694:	move.l d0,-(sp)
    f696:	jsr 14e5a <getTextFromAnyVar>
    f69c:	addq.l #4,sp
    f69e:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f6a2:	moveq #24,d0
    f6a4:	add.l 20(sp),d0
    f6a8:	move.l d0,-(sp)
    f6aa:	jsr 15208 <trimStack>
    f6b0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f6b2:	move.l 8(sp),-(sp)
    f6b6:	jsr 13d70 <strlen>
    f6bc:	addq.l #4,sp
    f6be:	move.l d0,d1
    f6c0:	moveq #28,d0
    f6c2:	add.l 20(sp),d0
    f6c6:	move.l d1,-(sp)
    f6c8:	pea 1 <_start+0x1>
    f6cc:	move.l d0,-(sp)
    f6ce:	jsr 15176 <setVariable>
    f6d4:	lea 12(sp),sp
	FreeVec(newText);
    f6d8:	move.l 8(sp),4(sp)
    f6de:	move.l 1c9c4 <SysBase>,d0
    f6e4:	movea.l d0,a6
    f6e6:	movea.l 4(sp),a1
    f6ea:	jsr -690(a6)
	return BR_CONTINUE;
    f6ee:	moveq #2,d0
}
    f6f0:	movea.l (sp)+,a6
    f6f2:	addq.l #8,sp
    f6f4:	rts

0000f6f6 <builtIn_newStack>:

builtIn(newStack)
{
    f6f6:	             lea -12(sp),sp
    f6fa:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f6fc:	             moveq #28,d0
    f6fe:	             add.l 24(sp),d0
    f702:	             move.l d0,-(sp)
    f704:	             jsr 14ad2 <unlinkVar>
    f70a:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f70c:	             movea.l 24(sp),a0
    f710:	             moveq #6,d0
    f712:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f716:	             moveq #12,d1
    f718:	             move.l d1,12(sp)
    f71c:	             clr.l 8(sp)
    f720:	             move.l 1c9c4 <SysBase>,d0
    f726:	             movea.l d0,a6
    f728:	             move.l 12(sp),d0
    f72c:	             move.l 8(sp),d1
    f730:	             jsr -684(a6)
    f734:	             move.l d0,4(sp)
    f738:	             move.l 4(sp),d0
    f73c:	             movea.l 24(sp),a0
    f740:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f744:	             movea.l 24(sp),a0
    f748:	             move.l 32(a0),d0
    f74c:	         /-- bne.s f754 <builtIn_newStack+0x5e>
    f74e:	         |   moveq #1,d0
    f750:	/--------|-- bra.w f7e6 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f754:	|        \-> movea.l 24(sp),a0
    f758:	|            movea.l 32(a0),a0
    f75c:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f75e:	|            movea.l 24(sp),a0
    f762:	|            movea.l 32(a0),a0
    f766:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f76a:	|            movea.l 24(sp),a0
    f76e:	|            movea.l 32(a0),a0
    f772:	|            moveq #1,d0
    f774:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f778:	|     /----- bra.s f7d4 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f77a:	|  /--|----> movea.l 24(sp),a0
    f77e:	|  |  |      move.l 32(a0),d0
    f782:	|  |  |      move.l d0,d1
    f784:	|  |  |      movea.l 24(sp),a0
    f788:	|  |  |      move.l 24(a0),d0
    f78c:	|  |  |      move.l d1,-(sp)
    f78e:	|  |  |      move.l d0,-(sp)
    f790:	|  |  |      jsr 140c0 <addVarToStack>
    f796:	|  |  |      addq.l #8,sp
    f798:	|  |  |      tst.w d0
    f79a:	|  |  |  /-- bne.s f7a0 <builtIn_newStack+0xaa>
    f79c:	|  |  |  |   moveq #1,d0
    f79e:	+--|--|--|-- bra.s f7e6 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f7a0:	|  |  |  \-> movea.l 24(sp),a0
    f7a4:	|  |  |      movea.l 32(a0),a0
    f7a8:	|  |  |      move.l 4(a0),d0
    f7ac:	|  |  |  /-- bne.s f7c4 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f7ae:	|  |  |  |   movea.l 24(sp),a0
    f7b2:	|  |  |  |   movea.l 32(a0),a1
    f7b6:	|  |  |  |   movea.l 24(sp),a0
    f7ba:	|  |  |  |   movea.l 32(a0),a0
    f7be:	|  |  |  |   move.l (a1),d0
    f7c0:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f7c4:	|  |  |  \-> moveq #24,d0
    f7c6:	|  |  |      add.l 24(sp),d0
    f7ca:	|  |  |      move.l d0,-(sp)
    f7cc:	|  |  |      jsr 15208 <trimStack>
    f7d2:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f7d4:	|  |  \----> move.l 20(sp),d0
    f7d8:	|  |         move.l d0,d1
    f7da:	|  |         subq.l #1,d1
    f7dc:	|  |         move.l d1,20(sp)
    f7e0:	|  |         tst.l d0
    f7e2:	|  \-------- bne.s f77a <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f7e4:	|            moveq #2,d0
}
    f7e6:	\----------> movea.l (sp)+,a6
    f7e8:	             lea 12(sp),sp
    f7ec:	             rts

0000f7ee <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f7ee:	          movea.l 8(sp),a0
    f7f2:	          movea.l 24(a0),a0
    f7f6:	          move.l (a0),d0
    f7f8:	          moveq #6,d1
    f7fa:	          cmp.l d0,d1
    f7fc:	      /-- beq.s f818 <builtIn_stackSize+0x2a>
    f7fe:	      |   moveq #10,d1
    f800:	      |   cmp.l d0,d1
    f802:	   /--|-- beq.s f85c <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f804:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f806:	   |  |   pea 198e4 <line.c.05397aaf+0x2c>
    f80c:	   |  |   jsr 1729e <KPrintF>
    f812:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f814:	   |  |   moveq #1,d0
    f816:	/--|--|-- bra.s f896 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f818:	|  |  \-> movea.l 8(sp),a0
    f81c:	|  |      movea.l 24(a0),a0
    f820:	|  |      move.l 4(a0),d0
    f824:	|  |      move.l d0,-(sp)
    f826:	|  |      jsr 151e4 <stackSize>
    f82c:	|  |      addq.l #4,sp
    f82e:	|  |      move.l d0,d1
    f830:	|  |      moveq #28,d0
    f832:	|  |      add.l 8(sp),d0
    f836:	|  |      move.l d1,-(sp)
    f838:	|  |      pea 1 <_start+0x1>
    f83c:	|  |      move.l d0,-(sp)
    f83e:	|  |      jsr 15176 <setVariable>
    f844:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f848:	|  |      moveq #24,d0
    f84a:	|  |      add.l 8(sp),d0
    f84e:	|  |      move.l d0,-(sp)
    f850:	|  |      jsr 15208 <trimStack>
    f856:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f858:	|  |      moveq #2,d0
    f85a:	+--|----- bra.s f896 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f85c:	|  \----> movea.l 8(sp),a0
    f860:	|         movea.l 24(a0),a0
    f864:	|         movea.l 4(a0),a0
    f868:	|         move.l 4(a0),d1
    f86c:	|         moveq #28,d0
    f86e:	|         add.l 8(sp),d0
    f872:	|         move.l d1,-(sp)
    f874:	|         pea 1 <_start+0x1>
    f878:	|         move.l d0,-(sp)
    f87a:	|         jsr 15176 <setVariable>
    f880:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f884:	|         moveq #24,d0
    f886:	|         add.l 8(sp),d0
    f88a:	|         move.l d0,-(sp)
    f88c:	|         jsr 15208 <trimStack>
    f892:	|         addq.l #4,sp
			return BR_CONTINUE;
    f894:	|         moveq #2,d0
}
    f896:	\-------> rts

0000f898 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f898:	       movea.l 8(sp),a0
    f89c:	       movea.l 24(a0),a0
    f8a0:	       move.l (a0),d0
    f8a2:	       moveq #6,d1
    f8a4:	       cmp.l d0,d1
    f8a6:	   /-- beq.s f8ba <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f8a8:	   |   pea 1990d <line.c.05397aaf+0x55>
    f8ae:	   |   jsr 1729e <KPrintF>
    f8b4:	   |   addq.l #4,sp
		return BR_ERROR;
    f8b6:	   |   moveq #1,d0
    f8b8:	/--|-- bra.s f8ee <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f8ba:	|  \-> moveq #28,d0
    f8bc:	|      add.l 8(sp),d0
    f8c0:	|      movea.l 8(sp),a0
    f8c4:	|      move.l 24(a0),d1
    f8c8:	|      move.l d0,-(sp)
    f8ca:	|      move.l d1,-(sp)
    f8cc:	|      jsr 1438a <copyStack>
    f8d2:	|      addq.l #8,sp
    f8d4:	|      tst.w d0
    f8d6:	|  /-- bne.s f8dc <builtIn_copyStack+0x44>
    f8d8:	|  |   moveq #1,d0
    f8da:	+--|-- bra.s f8ee <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f8dc:	|  \-> moveq #24,d0
    f8de:	|      add.l 8(sp),d0
    f8e2:	|      move.l d0,-(sp)
    f8e4:	|      jsr 15208 <trimStack>
    f8ea:	|      addq.l #4,sp
	return BR_CONTINUE;
    f8ec:	|      moveq #2,d0
}
    f8ee:	\----> rts

0000f8f0 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f8f0:	       movea.l 8(sp),a0
    f8f4:	       movea.l 24(a0),a0
    f8f8:	       movea.l 8(a0),a0
    f8fc:	       move.l (a0),d0
    f8fe:	       moveq #6,d1
    f900:	       cmp.l d0,d1
    f902:	   /-- beq.s f918 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f904:	   |   pea 19926 <line.c.05397aaf+0x6e>
    f90a:	   |   jsr 1729e <KPrintF>
    f910:	   |   addq.l #4,sp
		return BR_ERROR;
    f912:	   |   moveq #1,d0
    f914:	/--|-- bra.w f9a6 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f918:	|  \-> movea.l 8(sp),a0
    f91c:	|      movea.l 24(a0),a0
    f920:	|      movea.l 8(a0),a0
    f924:	|      move.l 4(a0),d0
    f928:	|      move.l d0,d1
    f92a:	|      movea.l 8(sp),a0
    f92e:	|      move.l 24(a0),d0
    f932:	|      move.l d1,-(sp)
    f934:	|      move.l d0,-(sp)
    f936:	|      jsr 140c0 <addVarToStack>
    f93c:	|      addq.l #8,sp
    f93e:	|      tst.w d0
    f940:	|  /-- bne.s f946 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f942:	|  |   moveq #1,d0
    f944:	+--|-- bra.s f9a6 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f946:	|  \-> movea.l 8(sp),a0
    f94a:	|      movea.l 24(a0),a0
    f94e:	|      movea.l 8(a0),a0
    f952:	|      movea.l 4(a0),a0
    f956:	|      movea.l (a0),a0
    f958:	|      move.l 8(a0),d0
    f95c:	|  /-- bne.s f984 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f95e:	|  |   movea.l 8(sp),a0
    f962:	|  |   movea.l 24(a0),a0
    f966:	|  |   movea.l 8(a0),a0
    f96a:	|  |   movea.l 4(a0),a1
    f96e:	|  |   movea.l 8(sp),a0
    f972:	|  |   movea.l 24(a0),a0
    f976:	|  |   movea.l 8(a0),a0
    f97a:	|  |   movea.l 4(a0),a0
    f97e:	|  |   move.l (a1),d0
    f980:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f984:	|  \-> moveq #24,d0
    f986:	|      add.l 8(sp),d0
    f98a:	|      move.l d0,-(sp)
    f98c:	|      jsr 15208 <trimStack>
    f992:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f994:	|      moveq #24,d0
    f996:	|      add.l 8(sp),d0
    f99a:	|      move.l d0,-(sp)
    f99c:	|      jsr 15208 <trimStack>
    f9a2:	|      addq.l #4,sp
	return BR_CONTINUE;
    f9a4:	|      moveq #2,d0
}
    f9a6:	\----> rts

0000f9a8 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f9a8:	             movea.l 8(sp),a0
    f9ac:	             movea.l 24(a0),a0
    f9b0:	             movea.l 8(a0),a0
    f9b4:	             move.l (a0),d0
    f9b6:	             moveq #6,d1
    f9b8:	             cmp.l d0,d1
    f9ba:	         /-- beq.s f9d0 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f9bc:	         |   pea 19926 <line.c.05397aaf+0x6e>
    f9c2:	         |   jsr 1729e <KPrintF>
    f9c8:	         |   addq.l #4,sp
		return BR_ERROR;
    f9ca:	         |   moveq #1,d0
    f9cc:	/--------|-- bra.w fabe <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f9d0:	|        \-> movea.l 8(sp),a0
    f9d4:	|            movea.l 24(a0),a0
    f9d8:	|            movea.l 8(a0),a0
    f9dc:	|            movea.l 4(a0),a0
    f9e0:	|            move.l (a0),d0
    f9e2:	|     /----- bne.s fa3c <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f9e4:	|     |      movea.l 8(sp),a0
    f9e8:	|     |      movea.l 24(a0),a0
    f9ec:	|     |      movea.l 8(a0),a0
    f9f0:	|     |      move.l 4(a0),d0
    f9f4:	|     |      move.l d0,d1
    f9f6:	|     |      movea.l 8(sp),a0
    f9fa:	|     |      move.l 24(a0),d0
    f9fe:	|     |      move.l d1,-(sp)
    fa00:	|     |      move.l d0,-(sp)
    fa02:	|     |      jsr 140c0 <addVarToStack>
    fa08:	|     |      addq.l #8,sp
    fa0a:	|     |      tst.w d0
    fa0c:	|     |  /-- bne.s fa14 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    fa0e:	|     |  |   moveq #1,d0
    fa10:	+-----|--|-- bra.w fabe <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fa14:	|     |  \-> movea.l 8(sp),a0
    fa18:	|     |      movea.l 24(a0),a0
    fa1c:	|     |      movea.l 8(a0),a0
    fa20:	|     |      movea.l 4(a0),a1
    fa24:	|     |      movea.l 8(sp),a0
    fa28:	|     |      movea.l 24(a0),a0
    fa2c:	|     |      movea.l 8(a0),a0
    fa30:	|     |      movea.l 4(a0),a0
    fa34:	|     |      move.l (a1),d0
    fa36:	|     |      move.l d0,4(a0)
    fa3a:	|  /--|----- bra.s fa9c <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    fa3c:	|  |  \----> movea.l 8(sp),a0
    fa40:	|  |         movea.l 24(a0),a0
    fa44:	|  |         movea.l 8(a0),a0
    fa48:	|  |         movea.l 4(a0),a0
    fa4c:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    fa50:	|  |         move.l d0,d1
    fa52:	|  |         addq.l #8,d1
    fa54:	|  |         movea.l 8(sp),a0
    fa58:	|  |         move.l 24(a0),d0
    fa5c:	|  |         move.l d1,-(sp)
    fa5e:	|  |         move.l d0,-(sp)
    fa60:	|  |         jsr 140c0 <addVarToStack>
    fa66:	|  |         addq.l #8,sp
    fa68:	|  |         tst.w d0
    fa6a:	|  |     /-- bne.s fa70 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    fa6c:	|  |     |   moveq #1,d0
    fa6e:	+--|-----|-- bra.s fabe <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    fa70:	|  |     \-> movea.l 8(sp),a0
    fa74:	|  |         movea.l 24(a0),a0
    fa78:	|  |         movea.l 8(a0),a0
    fa7c:	|  |         movea.l 4(a0),a0
    fa80:	|  |         movea.l 4(a0),a1
    fa84:	|  |         movea.l 8(sp),a0
    fa88:	|  |         movea.l 24(a0),a0
    fa8c:	|  |         movea.l 8(a0),a0
    fa90:	|  |         movea.l 4(a0),a0
    fa94:	|  |         move.l 8(a1),d0
    fa98:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    fa9c:	|  \-------> moveq #24,d0
    fa9e:	|            add.l 8(sp),d0
    faa2:	|            move.l d0,-(sp)
    faa4:	|            jsr 15208 <trimStack>
    faaa:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    faac:	|            moveq #24,d0
    faae:	|            add.l 8(sp),d0
    fab2:	|            move.l d0,-(sp)
    fab4:	|            jsr 15208 <trimStack>
    faba:	|            addq.l #4,sp
	return BR_CONTINUE;
    fabc:	|            moveq #2,d0
}
    fabe:	\----------> rts

0000fac0 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    fac0:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fac2:	       movea.l 12(sp),a0
    fac6:	       movea.l 24(a0),a0
    faca:	       movea.l 8(a0),a0
    face:	       move.l (a0),d0
    fad0:	       moveq #6,d1
    fad2:	       cmp.l d0,d1
    fad4:	   /-- beq.s faea <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fad6:	   |   pea 1990d <line.c.05397aaf+0x55>
    fadc:	   |   jsr 1729e <KPrintF>
    fae2:	   |   addq.l #4,sp
		return BR_ERROR;
    fae4:	   |   moveq #1,d0
    fae6:	/--|-- bra.w fb80 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    faea:	|  \-> movea.l 12(sp),a0
    faee:	|      movea.l 24(a0),a0
    faf2:	|      movea.l 8(a0),a0
    faf6:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fafa:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fafc:	|      movea.l 12(sp),a0
    fb00:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb04:	|      clr.l -(sp)
    fb06:	|      move.l d1,-(sp)
    fb08:	|      move.l d0,-(sp)
    fb0a:	|      jsr 14460 <deleteVarFromStack>
    fb10:	|      lea 12(sp),sp
    fb14:	|      move.l d0,d1
    fb16:	|      moveq #28,d0
    fb18:	|      add.l 12(sp),d0
    fb1c:	|      move.l d1,-(sp)
    fb1e:	|      pea 1 <_start+0x1>
    fb22:	|      move.l d0,-(sp)
    fb24:	|      jsr 15176 <setVariable>
    fb2a:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fb2e:	|      movea.l 12(sp),a0
    fb32:	|      movea.l 24(a0),a0
    fb36:	|      movea.l 8(a0),a0
    fb3a:	|      movea.l 4(a0),a0
    fb3e:	|      move.l (a0),d0
    fb40:	|      movea.l 12(sp),a0
    fb44:	|      movea.l 24(a0),a0
    fb48:	|      movea.l 8(a0),a0
    fb4c:	|      movea.l 4(a0),a2
    fb50:	|      move.l d0,-(sp)
    fb52:	|      jsr 151c0 <stackFindLast>
    fb58:	|      addq.l #4,sp
    fb5a:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fb5e:	|      moveq #24,d0
    fb60:	|      add.l 12(sp),d0
    fb64:	|      move.l d0,-(sp)
    fb66:	|      jsr 15208 <trimStack>
    fb6c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fb6e:	|      moveq #24,d0
    fb70:	|      add.l 12(sp),d0
    fb74:	|      move.l d0,-(sp)
    fb76:	|      jsr 15208 <trimStack>
    fb7c:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb7e:	|      moveq #2,d0
}
    fb80:	\----> movea.l (sp)+,a2
    fb82:	       rts

0000fb84 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fb84:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fb86:	       movea.l 12(sp),a0
    fb8a:	       movea.l 24(a0),a0
    fb8e:	       movea.l 8(a0),a0
    fb92:	       move.l (a0),d0
    fb94:	       moveq #6,d1
    fb96:	       cmp.l d0,d1
    fb98:	   /-- beq.s fbae <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fb9a:	   |   pea 1990d <line.c.05397aaf+0x55>
    fba0:	   |   jsr 1729e <KPrintF>
    fba6:	   |   addq.l #4,sp
		return BR_ERROR;
    fba8:	   |   moveq #1,d0
    fbaa:	/--|-- bra.w fc46 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fbae:	|  \-> movea.l 12(sp),a0
    fbb2:	|      movea.l 24(a0),a0
    fbb6:	|      movea.l 8(a0),a0
    fbba:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fbbe:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fbc0:	|      movea.l 12(sp),a0
    fbc4:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fbc8:	|      pea 1 <_start+0x1>
    fbcc:	|      move.l d1,-(sp)
    fbce:	|      move.l d0,-(sp)
    fbd0:	|      jsr 14460 <deleteVarFromStack>
    fbd6:	|      lea 12(sp),sp
    fbda:	|      move.l d0,d1
    fbdc:	|      moveq #28,d0
    fbde:	|      add.l 12(sp),d0
    fbe2:	|      move.l d1,-(sp)
    fbe4:	|      pea 1 <_start+0x1>
    fbe8:	|      move.l d0,-(sp)
    fbea:	|      jsr 15176 <setVariable>
    fbf0:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fbf4:	|      movea.l 12(sp),a0
    fbf8:	|      movea.l 24(a0),a0
    fbfc:	|      movea.l 8(a0),a0
    fc00:	|      movea.l 4(a0),a0
    fc04:	|      move.l (a0),d0
    fc06:	|      movea.l 12(sp),a0
    fc0a:	|      movea.l 24(a0),a0
    fc0e:	|      movea.l 8(a0),a0
    fc12:	|      movea.l 4(a0),a2
    fc16:	|      move.l d0,-(sp)
    fc18:	|      jsr 151c0 <stackFindLast>
    fc1e:	|      addq.l #4,sp
    fc20:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fc24:	|      moveq #24,d0
    fc26:	|      add.l 12(sp),d0
    fc2a:	|      move.l d0,-(sp)
    fc2c:	|      jsr 15208 <trimStack>
    fc32:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fc34:	|      moveq #24,d0
    fc36:	|      add.l 12(sp),d0
    fc3a:	|      move.l d0,-(sp)
    fc3c:	|      jsr 15208 <trimStack>
    fc42:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc44:	|      moveq #2,d0
}
    fc46:	\----> movea.l (sp)+,a2
    fc48:	       rts

0000fc4a <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc4a:	       movea.l 8(sp),a0
    fc4e:	       movea.l 24(a0),a0
    fc52:	       move.l (a0),d0
    fc54:	       moveq #6,d1
    fc56:	       cmp.l d0,d1
    fc58:	   /-- beq.s fc6c <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc5a:	   |   pea 1990d <line.c.05397aaf+0x55>
    fc60:	   |   jsr 1729e <KPrintF>
    fc66:	   |   addq.l #4,sp
		return BR_ERROR;
    fc68:	   |   moveq #1,d0
    fc6a:	/--|-- bra.s fcd6 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fc6c:	|  \-> movea.l 8(sp),a0
    fc70:	|      movea.l 24(a0),a0
    fc74:	|      movea.l 4(a0),a0
    fc78:	|      move.l (a0),d0
    fc7a:	|  /-- bne.s fc8e <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fc7c:	|  |   pea 1993e <line.c.05397aaf+0x86>
    fc82:	|  |   jsr 1729e <KPrintF>
    fc88:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc8a:	|  |   moveq #1,d0
    fc8c:	+--|-- bra.s fcd6 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fc8e:	|  \-> moveq #28,d0
    fc90:	|      add.l 8(sp),d0
    fc94:	|      movea.l 8(sp),a0
    fc98:	|      movea.l 24(a0),a0
    fc9c:	|      movea.l 4(a0),a0
    fca0:	|      move.l (a0),d1
    fca2:	|      move.l d0,-(sp)
    fca4:	|      move.l d1,-(sp)
    fca6:	|      jsr 14d3e <copyVariable>
    fcac:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fcae:	|      movea.l 8(sp),a0
    fcb2:	|      movea.l 24(a0),a0
    fcb6:	|      move.l 4(a0),d0
    fcba:	|      move.l d0,-(sp)
    fcbc:	|      jsr 15208 <trimStack>
    fcc2:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fcc4:	|      moveq #24,d0
    fcc6:	|      add.l 8(sp),d0
    fcca:	|      move.l d0,-(sp)
    fccc:	|      jsr 15208 <trimStack>
    fcd2:	|      addq.l #4,sp
	return BR_CONTINUE;
    fcd4:	|      moveq #2,d0
}
    fcd6:	\----> rts

0000fcd8 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fcd8:	       movea.l 8(sp),a0
    fcdc:	       movea.l 24(a0),a0
    fce0:	       move.l (a0),d0
    fce2:	       moveq #6,d1
    fce4:	       cmp.l d0,d1
    fce6:	   /-- beq.s fcfa <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fce8:	   |   pea 1990d <line.c.05397aaf+0x55>
    fcee:	   |   jsr 1729e <KPrintF>
    fcf4:	   |   addq.l #4,sp
		return BR_ERROR;
    fcf6:	   |   moveq #1,d0
    fcf8:	/--|-- bra.s fd4e <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fcfa:	|  \-> movea.l 8(sp),a0
    fcfe:	|      movea.l 24(a0),a0
    fd02:	|      movea.l 4(a0),a0
    fd06:	|      move.l (a0),d0
    fd08:	|  /-- bne.s fd1c <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fd0a:	|  |   pea 1993e <line.c.05397aaf+0x86>
    fd10:	|  |   jsr 1729e <KPrintF>
    fd16:	|  |   addq.l #4,sp
		return BR_ERROR;
    fd18:	|  |   moveq #1,d0
    fd1a:	+--|-- bra.s fd4e <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fd1c:	|  \-> moveq #28,d0
    fd1e:	|      add.l 8(sp),d0
    fd22:	|      movea.l 8(sp),a0
    fd26:	|      movea.l 24(a0),a0
    fd2a:	|      movea.l 4(a0),a0
    fd2e:	|      move.l (a0),d1
    fd30:	|      move.l d0,-(sp)
    fd32:	|      move.l d1,-(sp)
    fd34:	|      jsr 14d3e <copyVariable>
    fd3a:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fd3c:	|      moveq #24,d0
    fd3e:	|      add.l 8(sp),d0
    fd42:	|      move.l d0,-(sp)
    fd44:	|      jsr 15208 <trimStack>
    fd4a:	|      addq.l #4,sp
	return BR_CONTINUE;
    fd4c:	|      moveq #2,d0
}
    fd4e:	\----> rts

0000fd50 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fd50:	       movea.l 8(sp),a0
    fd54:	       movea.l 24(a0),a0
    fd58:	       move.l (a0),d0
    fd5a:	       moveq #6,d1
    fd5c:	       cmp.l d0,d1
    fd5e:	   /-- beq.s fd72 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fd60:	   |   pea 1990d <line.c.05397aaf+0x55>
    fd66:	   |   jsr 1729e <KPrintF>
    fd6c:	   |   addq.l #4,sp
		return BR_ERROR;
    fd6e:	   |   moveq #1,d0
    fd70:	/--|-- bra.s fdc8 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fd72:	|  \-> movea.l 8(sp),a0
    fd76:	|      movea.l 24(a0),a0
    fd7a:	|      movea.l 4(a0),a0
    fd7e:	|      move.l (a0),d0
    fd80:	|  /-- bne.s fd94 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fd82:	|  |   pea 1993e <line.c.05397aaf+0x86>
    fd88:	|  |   jsr 1729e <KPrintF>
    fd8e:	|  |   addq.l #4,sp
		return BR_ERROR;
    fd90:	|  |   moveq #1,d0
    fd92:	+--|-- bra.s fdc8 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fd94:	|  \-> moveq #28,d0
    fd96:	|      add.l 8(sp),d0
    fd9a:	|      movea.l 8(sp),a0
    fd9e:	|      movea.l 24(a0),a0
    fda2:	|      movea.l 4(a0),a0
    fda6:	|      move.l 4(a0),d1
    fdaa:	|      move.l d0,-(sp)
    fdac:	|      move.l d1,-(sp)
    fdae:	|      jsr 14d3e <copyVariable>
    fdb4:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fdb6:	|      moveq #24,d0
    fdb8:	|      add.l 8(sp),d0
    fdbc:	|      move.l d0,-(sp)
    fdbe:	|      jsr 15208 <trimStack>
    fdc4:	|      addq.l #4,sp
	return BR_CONTINUE;
    fdc6:	|      moveq #2,d0
}
    fdc8:	\----> rts

0000fdca <builtIn_random>:

builtIn(random)
{
    fdca:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fdcc:	       movea.l 12(sp),a0
    fdd0:	       move.l 24(a0),d0
    fdd4:	       move.l d0,-(sp)
    fdd6:	       pea 1 <_start+0x1>
    fdda:	       move.l sp,d0
    fddc:	       addq.l #8,d0
    fdde:	       move.l d0,-(sp)
    fde0:	       jsr 14884 <getValueType>
    fde6:	       lea 12(sp),sp
    fdea:	       tst.w d0
    fdec:	   /-- bne.s fdf2 <builtIn_random+0x28>
		return BR_ERROR;
    fdee:	   |   moveq #1,d0
    fdf0:	/--|-- bra.s fe3c <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fdf2:	|  \-> moveq #24,d0
    fdf4:	|      add.l 12(sp),d0
    fdf8:	|      move.l d0,-(sp)
    fdfa:	|      jsr 15208 <trimStack>
    fe00:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fe02:	|      move.l (sp),d0
    fe04:	|  /-- bgt.s fe0a <builtIn_random+0x40>
    fe06:	|  |   moveq #1,d0
    fe08:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fe0a:	|  \-> jsr 15ea4 <rand>
    fe10:	|      move.l d0,d1
    fe12:	|      move.l (sp),d0
    fe14:	|      move.l d0,-(sp)
    fe16:	|      move.l d1,-(sp)
    fe18:	|      jsr 17d36 <__umodsi3>
    fe1e:	|      addq.l #8,sp
    fe20:	|      move.l d0,d1
    fe22:	|      moveq #28,d0
    fe24:	|      add.l 12(sp),d0
    fe28:	|      move.l d1,-(sp)
    fe2a:	|      pea 1 <_start+0x1>
    fe2e:	|      move.l d0,-(sp)
    fe30:	|      jsr 15176 <setVariable>
    fe36:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fe3a:	|      moveq #2,d0
}
    fe3c:	\----> addq.l #4,sp
    fe3e:	       rts

0000fe40 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fe40:	nop
    fe42:	rts

0000fe44 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fe44:	moveq #2,d0
}
    fe46:	rts

0000fe48 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fe48:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fe4a:	       movea.l 12(sp),a0
    fe4e:	       move.l 24(a0),d0
    fe52:	       move.l d0,-(sp)
    fe54:	       pea 1 <_start+0x1>
    fe58:	       move.l sp,d0
    fe5a:	       addq.l #8,d0
    fe5c:	       move.l d0,-(sp)
    fe5e:	       jsr 14884 <getValueType>
    fe64:	       lea 12(sp),sp
    fe68:	       tst.w d0
    fe6a:	   /-- bne.s fe7e <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fe6c:	   |   pea 19951 <line.c.05397aaf+0x99>
    fe72:	   |   jsr 1729e <KPrintF>
    fe78:	   |   addq.l #4,sp
		return BR_ERROR;
    fe7a:	   |   moveq #1,d0
    fe7c:	/--|-- bra.s febe <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fe7e:	|  \-> moveq #24,d0
    fe80:	|      add.l 12(sp),d0
    fe84:	|      move.l d0,-(sp)
    fe86:	|      jsr 15208 <trimStack>
    fe8c:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fe8e:	|      move.l (sp),d0
    fe90:	|      move.l d0,d0
    fe92:	|      move.w d0,1c8de <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fe98:	|      move.w 1c8de <textPaletteIndex>,d0
    fe9e:	|      cmpi.w #31,d0
    fea2:	|  /-- bls.s febc <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fea4:	|  |   pea 19978 <line.c.05397aaf+0xc0>
    feaa:	|  |   jsr 1729e <KPrintF>
    feb0:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    feb2:	|  |   clr.w 1c8de <textPaletteIndex>
		return BR_ERROR;
    feb8:	|  |   moveq #1,d0
    feba:	+--|-- bra.s febe <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    febc:	|  \-> moveq #2,d0
}
    febe:	\----> addq.l #4,sp
    fec0:	       rts

0000fec2 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fec2:	moveq #2,d0
}
    fec4:	rts

0000fec6 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fec6:	moveq #2,d0
}
    fec8:	rts

0000feca <builtIn_setFont>:


builtIn(setFont)
{
    feca:	       lea -16(sp),sp
    fece:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fed0:	       movea.l 28(sp),a0
    fed4:	       move.l 24(a0),d0
    fed8:	       move.l d0,-(sp)
    feda:	       pea 1 <_start+0x1>
    fede:	       lea 12(sp),a0
    fee2:	       move.l a0,-(sp)
    fee4:	       jsr 14884 <getValueType>
    feea:	       lea 12(sp),sp
    feee:	       tst.w d0
    fef0:	   /-- bne.s fef8 <builtIn_setFont+0x2e>
    fef2:	   |   moveq #1,d0
    fef4:	/--|-- bra.w ffa6 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fef8:	|  \-> moveq #24,d0
    fefa:	|      add.l 28(sp),d0
    fefe:	|      move.l d0,-(sp)
    ff00:	|      jsr 15208 <trimStack>
    ff06:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ff08:	|      movea.l 28(sp),a0
    ff0c:	|      move.l 24(a0),d0
    ff10:	|      move.l d0,-(sp)
    ff12:	|      jsr 14e5a <getTextFromAnyVar>
    ff18:	|      addq.l #4,sp
    ff1a:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    ff1e:	|  /-- bne.s ff26 <builtIn_setFont+0x5c>
    ff20:	|  |   moveq #1,d0
    ff22:	+--|-- bra.w ffa6 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    ff26:	|  \-> moveq #24,d0
    ff28:	|      add.l 28(sp),d0
    ff2c:	|      move.l d0,-(sp)
    ff2e:	|      jsr 15208 <trimStack>
    ff34:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    ff36:	|      movea.l 28(sp),a0
    ff3a:	|      move.l 24(a0),d0
    ff3e:	|      move.l d0,-(sp)
    ff40:	|      pea 5 <_start+0x5>
    ff44:	|      lea 16(sp),a0
    ff48:	|      move.l a0,-(sp)
    ff4a:	|      jsr 14884 <getValueType>
    ff50:	|      lea 12(sp),sp
    ff54:	|      tst.w d0
    ff56:	|  /-- bne.s ff5c <builtIn_setFont+0x92>
    ff58:	|  |   moveq #1,d0
    ff5a:	+--|-- bra.s ffa6 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    ff5c:	|  \-> moveq #24,d0
    ff5e:	|      add.l 28(sp),d0
    ff62:	|      move.l d0,-(sp)
    ff64:	|      jsr 15208 <trimStack>
    ff6a:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    ff6c:	|      move.l 4(sp),d1
    ff70:	|      move.l 8(sp),d0
    ff74:	|      move.l d1,-(sp)
    ff76:	|      move.l 20(sp),-(sp)
    ff7a:	|      move.l d0,-(sp)
    ff7c:	|      jsr 156b4 <loadFont>
    ff82:	|      lea 12(sp),sp
    ff86:	|      tst.w d0
    ff88:	|  /-- bne.s ff8e <builtIn_setFont+0xc4>
    ff8a:	|  |   moveq #1,d0
    ff8c:	+--|-- bra.s ffa6 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    ff8e:	|  \-> move.l 16(sp),12(sp)
    ff94:	|      move.l 1c9c4 <SysBase>,d0
    ff9a:	|      movea.l d0,a6
    ff9c:	|      movea.l 12(sp),a1
    ffa0:	|      jsr -690(a6)

    return BR_CONTINUE;
    ffa4:	|      moveq #2,d0
}
    ffa6:	\----> movea.l (sp)+,a6
    ffa8:	       lea 16(sp),sp
    ffac:	       rts

0000ffae <builtIn_inFont>:

builtIn(inFont)
{
    ffae:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ffb0:	       movea.l 12(sp),a0
    ffb4:	       move.l 24(a0),d0
    ffb8:	       move.l d0,-(sp)
    ffba:	       jsr 14e5a <getTextFromAnyVar>
    ffc0:	       addq.l #4,sp
    ffc2:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    ffc4:	   /-- bne.s ffca <builtIn_inFont+0x1c>
    ffc6:	   |   moveq #1,d0
    ffc8:	/--|-- bra.s 10000 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    ffca:	|  \-> moveq #24,d0
    ffcc:	|      add.l 12(sp),d0
    ffd0:	|      move.l d0,-(sp)
    ffd2:	|      jsr 15208 <trimStack>
    ffd8:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    ffda:	|      move.l (sp),-(sp)
    ffdc:	|      jsr 156a2 <isInFont>
    ffe2:	|      addq.l #4,sp
    ffe4:	|      movea.w d0,a0
    ffe6:	|      moveq #28,d0
    ffe8:	|      add.l 12(sp),d0
    ffec:	|      move.l a0,-(sp)
    ffee:	|      pea 1 <_start+0x1>
    fff2:	|      move.l d0,-(sp)
    fff4:	|      jsr 15176 <setVariable>
    fffa:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fffe:	|      moveq #2,d0
}
   10000:	\----> addq.l #4,sp
   10002:	       rts

00010004 <builtIn_pasteString>:

builtIn(pasteString)
{
   10004:	       lea -16(sp),sp
   10008:	       move.l a6,-(sp)
   1000a:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   1000c:	       movea.l 32(sp),a0
   10010:	       move.l 24(a0),d0
   10014:	       move.l d0,-(sp)
   10016:	       jsr 14e5a <getTextFromAnyVar>
   1001c:	       addq.l #4,sp
   1001e:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   10022:	       moveq #24,d0
   10024:	       add.l 32(sp),d0
   10028:	       move.l d0,-(sp)
   1002a:	       jsr 15208 <trimStack>
   10030:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10032:	       movea.l 32(sp),a0
   10036:	       move.l 24(a0),d0
   1003a:	       move.l d0,-(sp)
   1003c:	       pea 1 <_start+0x1>
   10040:	       lea 20(sp),a0
   10044:	       move.l a0,-(sp)
   10046:	       jsr 14884 <getValueType>
   1004c:	       lea 12(sp),sp
   10050:	       tst.w d0
   10052:	   /-- bne.s 1005a <builtIn_pasteString+0x56>
   10054:	   |   moveq #1,d0
   10056:	/--|-- bra.w 100fc <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   1005a:	|  \-> moveq #24,d0
   1005c:	|      add.l 32(sp),d0
   10060:	|      move.l d0,-(sp)
   10062:	|      jsr 15208 <trimStack>
   10068:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   1006a:	|      movea.l 32(sp),a0
   1006e:	|      move.l 24(a0),d0
   10072:	|      move.l d0,-(sp)
   10074:	|      pea 1 <_start+0x1>
   10078:	|      lea 16(sp),a0
   1007c:	|      move.l a0,-(sp)
   1007e:	|      jsr 14884 <getValueType>
   10084:	|      lea 12(sp),sp
   10088:	|      tst.w d0
   1008a:	|  /-- bne.s 10090 <builtIn_pasteString+0x8c>
   1008c:	|  |   moveq #1,d0
   1008e:	+--|-- bra.s 100fc <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   10090:	|  \-> moveq #24,d0
   10092:	|      add.l 32(sp),d0
   10096:	|      move.l d0,-(sp)
   10098:	|      jsr 15208 <trimStack>
   1009e:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
   100a0:	|      move.l 8(sp),d0
   100a4:	|      cmpi.l #65535,d0
   100aa:	|  /-- bne.s 100ca <builtIn_pasteString+0xc6>
   100ac:	|  |   move.l 1c918 <winWidth>,d2
   100b2:	|  |   move.l 20(sp),-(sp)
   100b6:	|  |   jsr 15966 <stringWidth>
   100bc:	|  |   addq.l #4,sp
   100be:	|  |   move.l d2,d1
   100c0:	|  |   sub.l d0,d1
   100c2:	|  |   move.l d1,d0
   100c4:	|  |   lsr.l #1,d0
   100c6:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   100ca:	|  \-> move.l 12(sp),d1
   100ce:	|      move.l 8(sp),d0
   100d2:	|      move.l d1,-(sp)
   100d4:	|      move.l d0,-(sp)
   100d6:	|      move.l 28(sp),-(sp)
   100da:	|      jsr 15888 <pasteStringToBackdrop>
   100e0:	|      lea 12(sp),sp
    FreeVec(newText); 
   100e4:	|      move.l 20(sp),16(sp)
   100ea:	|      move.l 1c9c4 <SysBase>,d0
   100f0:	|      movea.l d0,a6
   100f2:	|      movea.l 16(sp),a1
   100f6:	|      jsr -690(a6)
    return BR_CONTINUE;
   100fa:	|      moveq #2,d0
}
   100fc:	\----> move.l (sp)+,d2
   100fe:	       movea.l (sp)+,a6
   10100:	       lea 16(sp),sp
   10104:	       rts

00010106 <builtIn_anim>:

builtIn(anim)
{
   10106:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   1010a:	       moveq #1,d0
   1010c:	       cmp.l 16(sp),d0
   10110:	   /-- blt.s 10126 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10112:	   |   pea 199a2 <line.c.05397aaf+0xea>
   10118:	   |   jsr 1729e <KPrintF>
   1011e:	   |   addq.l #4,sp
		return BR_ERROR;
   10120:	   |   moveq #1,d0
   10122:	/--|-- bra.w 101b4 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   10126:	|  \-> moveq #24,d1
   10128:	|      add.l 20(sp),d1
   1012c:	|      move.l 16(sp),d0
   10130:	|      subq.l #1,d0
   10132:	|      move.l d1,-(sp)
   10134:	|      move.l d0,-(sp)
   10136:	|      jsr 9818 <createPersonaAnim>
   1013c:	|      addq.l #8,sp
   1013e:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10142:	|      movea.l 20(sp),a0
   10146:	|      move.l 24(a0),d0
   1014a:	|      move.l d0,-(sp)
   1014c:	|      pea 5 <_start+0x5>
   10150:	|      lea 8(sp),a0
   10154:	|      move.l a0,-(sp)
   10156:	|      jsr 14884 <getValueType>
   1015c:	|      lea 12(sp),sp
   10160:	|      tst.w d0
   10162:	|  /-- bne.s 10168 <builtIn_anim+0x62>
   10164:	|  |   moveq #1,d0
   10166:	+--|-- bra.s 101b4 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   10168:	|  \-> moveq #24,d0
   1016a:	|      add.l 20(sp),d0
   1016e:	|      move.l d0,-(sp)
   10170:	|      jsr 15208 <trimStack>
   10176:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   10178:	|      move.l (sp),d0
   1017a:	|      move.l d0,-(sp)
   1017c:	|      jsr 16006 <loadBankForAnim>
   10182:	|      addq.l #4,sp
   10184:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   10188:	|  /-- bne.s 1018e <builtIn_anim+0x88>
   1018a:	|  |   moveq #1,d0
   1018c:	+--|-- bra.s 101b4 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   1018e:	|  \-> move.l 4(sp),-(sp)
   10192:	|      move.l 12(sp),-(sp)
   10196:	|      jsr b6c2 <setBankFile>
   1019c:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   1019e:	|      moveq #28,d0
   101a0:	|      add.l 20(sp),d0
   101a4:	|      move.l 8(sp),-(sp)
   101a8:	|      move.l d0,-(sp)
   101aa:	|      jsr 15132 <newAnimationVariable>
   101b0:	|      addq.l #8,sp
	return BR_CONTINUE;
   101b2:	|      moveq #2,d0
}
   101b4:	\----> lea 12(sp),sp
   101b8:	       rts

000101ba <builtIn_costume>:

builtIn(costume)
{
   101ba:	          lea -32(sp),sp
   101be:	          move.l a6,-(sp)
   101c0:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   101c2:	          moveq #8,d0
   101c4:	          move.l d0,32(sp)
   101c8:	          clr.l 28(sp)
   101cc:	          move.l 1c9c4 <SysBase>,d0
   101d2:	          movea.l d0,a6
   101d4:	          move.l 32(sp),d0
   101d8:	          move.l 28(sp),d1
   101dc:	          jsr -684(a6)
   101e0:	          move.l d0,24(sp)
   101e4:	          move.l 24(sp),d0
   101e8:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   101ec:	      /-- bne.s 101f4 <builtIn_costume+0x3a>
   101ee:	      |   moveq #1,d0
   101f0:	/-----|-- bra.w 102dc <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   101f4:	|     \-> move.l 44(sp),d0
   101f8:	|         pea 3 <_start+0x3>
   101fc:	|         move.l d0,-(sp)
   101fe:	|         jsr 17cda <__divsi3>
   10204:	|         addq.l #8,sp
   10206:	|         movea.l 20(sp),a0
   1020a:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   1020e:	|         tst.l 44(sp)
   10212:	|     /-- beq.s 10228 <builtIn_costume+0x6e>
   10214:	|     |   movea.l 20(sp),a0
   10218:	|     |   move.l 4(a0),d1
   1021c:	|     |   move.l d1,d0
   1021e:	|     |   add.l d0,d0
   10220:	|     |   add.l d1,d0
   10222:	|     |   cmp.l 44(sp),d0
   10226:	|  /--|-- beq.s 1023c <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   10228:	|  |  \-> pea 199dc <line.c.05397aaf+0x124>
   1022e:	|  |      jsr 1729e <KPrintF>
   10234:	|  |      addq.l #4,sp
        return BR_ERROR;
   10236:	|  |      moveq #1,d0
   10238:	+--|----- bra.w 102dc <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   1023c:	|  \----> move.l 44(sp),d0
   10240:	|         add.l d0,d0
   10242:	|         add.l d0,d0
   10244:	|         move.l d0,16(sp)
   10248:	|         clr.l 12(sp)
   1024c:	|         move.l 1c9c4 <SysBase>,d0
   10252:	|         movea.l d0,a6
   10254:	|         move.l 16(sp),d0
   10258:	|         move.l 12(sp),d1
   1025c:	|         jsr -684(a6)
   10260:	|         move.l d0,8(sp)
   10264:	|         move.l 8(sp),d0
   10268:	|         movea.l 20(sp),a0
   1026c:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   1026e:	|         movea.l 20(sp),a0
   10272:	|         move.l (a0),d0
   10274:	|     /-- bne.s 1027a <builtIn_costume+0xc0>
   10276:	|     |   moveq #1,d0
   10278:	+-----|-- bra.s 102dc <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   1027a:	|     \-> move.l 44(sp),d0
   1027e:	|         subq.l #1,d0
   10280:	|         move.l d0,36(sp)
   10284:	|     /-- bra.s 102c0 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10286:	|  /--|-> movea.l 48(sp),a0
   1028a:	|  |  |   move.l 24(a0),d0
   1028e:	|  |  |   movea.l 20(sp),a0
   10292:	|  |  |   movea.l (a0),a0
   10294:	|  |  |   move.l 36(sp),d1
   10298:	|  |  |   add.l d1,d1
   1029a:	|  |  |   add.l d1,d1
   1029c:	|  |  |   lea (0,a0,d1.l),a2
   102a0:	|  |  |   move.l d0,-(sp)
   102a2:	|  |  |   jsr 14d5c <getAnimationFromVar>
   102a8:	|  |  |   addq.l #4,sp
   102aa:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   102ac:	|  |  |   moveq #24,d0
   102ae:	|  |  |   add.l 48(sp),d0
   102b2:	|  |  |   move.l d0,-(sp)
   102b4:	|  |  |   jsr 15208 <trimStack>
   102ba:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   102bc:	|  |  |   subq.l #1,36(sp)
   102c0:	|  |  \-> tst.l 36(sp)
   102c4:	|  \----- bge.s 10286 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   102c6:	|         moveq #28,d0
   102c8:	|         add.l 48(sp),d0
   102cc:	|         move.l 20(sp),-(sp)
   102d0:	|         move.l d0,-(sp)
   102d2:	|         jsr 15154 <newCostumeVariable>
   102d8:	|         addq.l #8,sp
    return BR_CONTINUE;
   102da:	|         moveq #2,d0
}
   102dc:	\-------> movea.l (sp)+,a2
   102de:	          movea.l (sp)+,a6
   102e0:	          lea 32(sp),sp
   102e4:	          rts

000102e6 <builtIn_launch>:

builtIn(launch)
{
   102e6:	          lea -20(sp),sp
   102ea:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   102ec:	          movea.l 32(sp),a0
   102f0:	          move.l 24(a0),d0
   102f4:	          move.l d0,-(sp)
   102f6:	          jsr 14e5a <getTextFromAnyVar>
   102fc:	          addq.l #4,sp
   102fe:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   10302:	      /-- bne.s 1030a <builtIn_launch+0x24>
   10304:	      |   moveq #1,d0
   10306:	/-----|-- bra.w 10438 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   1030a:	|     \-> move.l 20(sp),-(sp)
   1030e:	|         jsr 2fe <encodeFilename>
   10314:	|         addq.l #4,sp
   10316:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   1031a:	|         moveq #24,d0
   1031c:	|         add.l 32(sp),d0
   10320:	|         move.l d0,-(sp)
   10322:	|         jsr 15208 <trimStack>
   10328:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   1032a:	|         movea.l 20(sp),a0
   1032e:	|         move.b (a0),d0
   10330:	|         cmpi.b #104,d0
   10334:	|  /----- bne.s 1039e <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   10336:	|  |      movea.l 20(sp),a0
   1033a:	|  |      addq.l #1,a0
   1033c:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   1033e:	|  |      cmpi.b #116,d0
   10342:	|  +----- bne.s 1039e <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   10344:	|  |      movea.l 20(sp),a0
   10348:	|  |      addq.l #2,a0
   1034a:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   1034c:	|  |      cmpi.b #116,d0
   10350:	|  +----- bne.s 1039e <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   10352:	|  |      movea.l 20(sp),a0
   10356:	|  |      addq.l #3,a0
   10358:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   1035a:	|  |      cmpi.b #112,d0
   1035e:	|  +----- bne.s 1039e <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10360:	|  |      movea.l 20(sp),a0
   10364:	|  |      addq.l #4,a0
   10366:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   10368:	|  |      cmpi.b #58,d0
   1036c:	|  |  /-- beq.s 1038a <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   1036e:	|  |  |   movea.l 20(sp),a0
   10372:	|  |  |   addq.l #4,a0
   10374:	|  |  |   move.b (a0),d0
   10376:	|  |  |   cmpi.b #115,d0
   1037a:	|  +--|-- bne.s 1039e <builtIn_launch+0xb8>
   1037c:	|  |  |   movea.l 20(sp),a0
   10380:	|  |  |   addq.l #5,a0
   10382:	|  |  |   move.b (a0),d0
   10384:	|  |  |   cmpi.b #58,d0
   10388:	|  +--|-- bne.s 1039e <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   1038a:	|  |  \-> move.l 20(sp),-(sp)
   1038e:	|  |      jsr b8 <copyString>
   10394:	|  |      addq.l #4,sp
   10396:	|  |      move.l d0,1ca86 <launchMe>
   1039c:	|  |  /-- bra.s 103f0 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   1039e:	|  \--|-> move.l 1c92c <gamePath>,d0
   103a4:	|     |   pea 19a27 <line.c.05397aaf+0x16f>
   103aa:	|     |   move.l d0,-(sp)
   103ac:	|     |   jsr 13db0 <joinStrings>
   103b2:	|     |   addq.l #8,sp
   103b4:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   103b8:	|     |   move.l 16(sp),-(sp)
   103bc:	|     |   move.l 16(sp),-(sp)
   103c0:	|     |   jsr 13db0 <joinStrings>
   103c6:	|     |   addq.l #8,sp
   103c8:	|     |   move.l d0,1ca86 <launchMe>
        FreeVec(newText);
   103ce:	|     |   move.l 16(sp),8(sp)
   103d4:	|     |   move.l 1c9c4 <SysBase>,d0
   103da:	|     |   movea.l d0,a6
   103dc:	|     |   movea.l 8(sp),a1
   103e0:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   103e4:	|     |   move.l 1ca86 <launchMe>,d0
   103ea:	|     +-- bne.s 103f0 <builtIn_launch+0x10a>
   103ec:	|     |   moveq #1,d0
   103ee:	+-----|-- bra.s 10438 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   103f0:	|     \-> move.l 20(sp),4(sp)
   103f6:	|         move.l 1c9c4 <SysBase>,d0
   103fc:	|         movea.l d0,a6
   103fe:	|         movea.l 4(sp),a1
   10402:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   10406:	|         clr.l -(sp)
   10408:	|         jsr 421a <setGraphicsWindow>
   1040e:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   10410:	|         moveq #28,d0
   10412:	|         add.l 32(sp),d0
   10416:	|         pea 1 <_start+0x1>
   1041a:	|         pea 1 <_start+0x1>
   1041e:	|         move.l d0,-(sp)
   10420:	|         jsr 15176 <setVariable>
   10426:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   1042a:	|         moveq #28,d0
   1042c:	|         add.l 32(sp),d0
   10430:	|         move.l d0,1ca8a <launchResult>

    return BR_KEEP_AND_PAUSE;
   10436:	|         moveq #0,d0
}
   10438:	\-------> movea.l (sp)+,a6
   1043a:	          lea 20(sp),sp
   1043e:	          rts

00010440 <builtIn_pause>:

builtIn(pause)
{
   10440:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10442:	       movea.l 12(sp),a0
   10446:	       move.l 24(a0),d0
   1044a:	       move.l d0,-(sp)
   1044c:	       pea 1 <_start+0x1>
   10450:	       move.l sp,d0
   10452:	       addq.l #8,d0
   10454:	       move.l d0,-(sp)
   10456:	       jsr 14884 <getValueType>
   1045c:	       lea 12(sp),sp
   10460:	       tst.w d0
   10462:	   /-- bne.s 10468 <builtIn_pause+0x28>
   10464:	   |   moveq #1,d0
   10466:	/--|-- bra.s 10496 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   10468:	|  \-> moveq #24,d0
   1046a:	|      add.l 12(sp),d0
   1046e:	|      move.l d0,-(sp)
   10470:	|      jsr 15208 <trimStack>
   10476:	|      addq.l #4,sp
	if (theTime > 0) {
   10478:	|      move.l (sp),d0
   1047a:	|  /-- ble.s 10494 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   1047c:	|  |   move.l (sp),d0
   1047e:	|  |   subq.l #1,d0
   10480:	|  |   movea.l 12(sp),a0
   10484:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   10488:	|  |   movea.l 12(sp),a0
   1048c:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10490:	|  |   moveq #0,d0
   10492:	+--|-- bra.s 10496 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10494:	|  \-> moveq #2,d0
}
   10496:	\----> addq.l #4,sp
   10498:	       rts

0001049a <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   1049a:	jsr 497c <completeTimers>
	return BR_CONTINUE;
   104a0:	moveq #2,d0
}
   104a2:	rts

000104a4 <builtIn_callEvent>:

builtIn(callEvent)
{
   104a4:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   104a8:	       movea.l 20(sp),a0
   104ac:	       move.l 24(a0),d0
   104b0:	       move.l d0,-(sp)
   104b2:	       pea 7 <_start+0x7>
   104b6:	       lea 8(sp),a0
   104ba:	       move.l a0,-(sp)
   104bc:	       jsr 14884 <getValueType>
   104c2:	       lea 12(sp),sp
   104c6:	       tst.w d0
   104c8:	   /-- bne.s 104d0 <builtIn_callEvent+0x2c>
   104ca:	   |   moveq #1,d0
   104cc:	/--|-- bra.w 10566 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   104d0:	|  \-> moveq #24,d0
   104d2:	|      add.l 20(sp),d0
   104d6:	|      move.l d0,-(sp)
   104d8:	|      jsr 15208 <trimStack>
   104de:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   104e0:	|      movea.l 20(sp),a0
   104e4:	|      move.l 24(a0),d0
   104e8:	|      move.l d0,-(sp)
   104ea:	|      pea 7 <_start+0x7>
   104ee:	|      moveq #12,d0
   104f0:	|      add.l sp,d0
   104f2:	|      move.l d0,-(sp)
   104f4:	|      jsr 14884 <getValueType>
   104fa:	|      lea 12(sp),sp
   104fe:	|      tst.w d0
   10500:	|  /-- bne.s 10506 <builtIn_callEvent+0x62>
   10502:	|  |   moveq #1,d0
   10504:	+--|-- bra.s 10566 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10506:	|  \-> moveq #24,d0
   10508:	|      add.l 20(sp),d0
   1050c:	|      move.l d0,-(sp)
   1050e:	|      jsr 15208 <trimStack>
   10514:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10516:	|      move.l (sp),d1
   10518:	|      move.l 4(sp),d0
   1051c:	|      move.l d1,-(sp)
   1051e:	|      move.l d0,-(sp)
   10520:	|      jsr d602 <getCombinationFunction>
   10526:	|      addq.l #8,sp
   10528:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   1052c:	|  /-- beq.s 1054c <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1052e:	|  |   moveq #28,d0
   10530:	|  |   add.l 20(sp),d0
   10534:	|  |   move.l 8(sp),-(sp)
   10538:	|  |   pea 2 <_start+0x2>
   1053c:	|  |   move.l d0,-(sp)
   1053e:	|  |   jsr 15176 <setVariable>
   10544:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   10548:	|  |   moveq #4,d0
   1054a:	+--|-- bra.s 10566 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   1054c:	|  \-> moveq #28,d0
   1054e:	|      add.l 20(sp),d0
   10552:	|      clr.l -(sp)
   10554:	|      pea 1 <_start+0x1>
   10558:	|      move.l d0,-(sp)
   1055a:	|      jsr 15176 <setVariable>
   10560:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10564:	|      moveq #2,d0
}
   10566:	\----> lea 12(sp),sp
   1056a:	       rts

0001056c <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   1056c:	move.w #1,1ca96 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   10574:	moveq #2,d0
}
   10576:	rts

00010578 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10578:	moveq #24,d0
   1057a:	add.l 8(sp),d0
   1057e:	move.l d0,-(sp)
   10580:	jsr 15208 <trimStack>
   10586:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   10588:	pea 19a29 <line.c.05397aaf+0x171>
   1058e:	jsr 1729e <KPrintF>
   10594:	addq.l #4,sp
	return BR_CONTINUE;
   10596:	moveq #2,d0
}
   10598:	rts

0001059a <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   1059a:	pea 19a29 <line.c.05397aaf+0x171>
   105a0:	jsr 1729e <KPrintF>
   105a6:	addq.l #4,sp
	return BR_CONTINUE;
   105a8:	moveq #2,d0
}
   105aa:	rts

000105ac <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   105ac:	pea 19a29 <line.c.05397aaf+0x171>
   105b2:	jsr 1729e <KPrintF>
   105b8:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   105ba:	moveq #2,d0
}
   105bc:	rts

000105be <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   105be:	pea 19a29 <line.c.05397aaf+0x171>
   105c4:	jsr 1729e <KPrintF>
   105ca:	addq.l #4,sp
	return BR_CONTINUE;
   105cc:	moveq #2,d0
}
   105ce:	rts

000105d0 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   105d0:	pea 19a29 <line.c.05397aaf+0x171>
   105d6:	jsr 1729e <KPrintF>
   105dc:	addq.l #4,sp
	return BR_CONTINUE;
   105de:	moveq #2,d0
}
   105e0:	rts

000105e2 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   105e2:	pea 19a29 <line.c.05397aaf+0x171>
   105e8:	jsr 1729e <KPrintF>
   105ee:	addq.l #4,sp
	return BR_CONTINUE;
   105f0:	moveq #2,d0
}
   105f2:	rts

000105f4 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   105f4:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105f8:	       movea.l 20(sp),a0
   105fc:	       move.l 24(a0),d0
   10600:	       move.l d0,-(sp)
   10602:	       pea 1 <_start+0x1>
   10606:	       moveq #16,d0
   10608:	       add.l sp,d0
   1060a:	       move.l d0,-(sp)
   1060c:	       jsr 14884 <getValueType>
   10612:	       lea 12(sp),sp
   10616:	       tst.w d0
   10618:	   /-- bne.s 10620 <builtIn_startMusic+0x2c>
   1061a:	   |   moveq #1,d0
   1061c:	/--|-- bra.w 106c0 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10620:	|  \-> moveq #24,d0
   10622:	|      add.l 20(sp),d0
   10626:	|      move.l d0,-(sp)
   10628:	|      jsr 15208 <trimStack>
   1062e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10630:	|      movea.l 20(sp),a0
   10634:	|      move.l 24(a0),d0
   10638:	|      move.l d0,-(sp)
   1063a:	|      pea 1 <_start+0x1>
   1063e:	|      moveq #12,d0
   10640:	|      add.l sp,d0
   10642:	|      move.l d0,-(sp)
   10644:	|      jsr 14884 <getValueType>
   1064a:	|      lea 12(sp),sp
   1064e:	|      tst.w d0
   10650:	|  /-- bne.s 10656 <builtIn_startMusic+0x62>
   10652:	|  |   moveq #1,d0
   10654:	+--|-- bra.s 106c0 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10656:	|  \-> moveq #24,d0
   10658:	|      add.l 20(sp),d0
   1065c:	|      move.l d0,-(sp)
   1065e:	|      jsr 15208 <trimStack>
   10664:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10666:	|      movea.l 20(sp),a0
   1066a:	|      move.l 24(a0),d0
   1066e:	|      move.l d0,-(sp)
   10670:	|      pea 5 <_start+0x5>
   10674:	|      lea 8(sp),a0
   10678:	|      move.l a0,-(sp)
   1067a:	|      jsr 14884 <getValueType>
   10680:	|      lea 12(sp),sp
   10684:	|      tst.w d0
   10686:	|  /-- bne.s 1068c <builtIn_startMusic+0x98>
   10688:	|  |   moveq #1,d0
   1068a:	+--|-- bra.s 106c0 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1068c:	|  \-> moveq #24,d0
   1068e:	|      add.l 20(sp),d0
   10692:	|      move.l d0,-(sp)
   10694:	|      jsr 15208 <trimStack>
   1069a:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   1069c:	|      movea.l 8(sp),a0
   106a0:	|      move.l 4(sp),d1
   106a4:	|      move.l (sp),d0
   106a6:	|      move.l a0,-(sp)
   106a8:	|      move.l d1,-(sp)
   106aa:	|      move.l d0,-(sp)
   106ac:	|      jsr d20e <playMOD>
   106b2:	|      lea 12(sp),sp
   106b6:	|      tst.w d0
   106b8:	|  /-- bne.s 106be <builtIn_startMusic+0xca>
   106ba:	|  |   moveq #2,d0
   106bc:	+--|-- bra.s 106c0 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   106be:	|  \-> moveq #2,d0
}
   106c0:	\----> lea 12(sp),sp
   106c4:	       rts

000106c6 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   106c6:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106c8:	       movea.l 12(sp),a0
   106cc:	       move.l 24(a0),d0
   106d0:	       move.l d0,-(sp)
   106d2:	       pea 1 <_start+0x1>
   106d6:	       move.l sp,d0
   106d8:	       addq.l #8,d0
   106da:	       move.l d0,-(sp)
   106dc:	       jsr 14884 <getValueType>
   106e2:	       lea 12(sp),sp
   106e6:	       tst.w d0
   106e8:	   /-- bne.s 106ee <builtIn_stopMusic+0x28>
   106ea:	   |   moveq #1,d0
   106ec:	/--|-- bra.s 1070c <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   106ee:	|  \-> moveq #24,d0
   106f0:	|      add.l 12(sp),d0
   106f4:	|      move.l d0,-(sp)
   106f6:	|      jsr 15208 <trimStack>
   106fc:	|      addq.l #4,sp
	stopMOD (v);
   106fe:	|      move.l (sp),d0
   10700:	|      move.l d0,-(sp)
   10702:	|      jsr d2aa <stopMOD>
   10708:	|      addq.l #4,sp
	return BR_CONTINUE;
   1070a:	|      moveq #2,d0
}
   1070c:	\----> addq.l #4,sp
   1070e:	       rts

00010710 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10710:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10712:	       movea.l 16(sp),a0
   10716:	       move.l 24(a0),d0
   1071a:	       move.l d0,-(sp)
   1071c:	       pea 1 <_start+0x1>
   10720:	       move.l sp,d0
   10722:	       addq.l #8,d0
   10724:	       move.l d0,-(sp)
   10726:	       jsr 14884 <getValueType>
   1072c:	       lea 12(sp),sp
   10730:	       tst.w d0
   10732:	   /-- bne.s 10738 <builtIn_setMusicVolume+0x28>
   10734:	   |   moveq #1,d0
   10736:	/--|-- bra.s 10792 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10738:	|  \-> moveq #24,d0
   1073a:	|      add.l 16(sp),d0
   1073e:	|      move.l d0,-(sp)
   10740:	|      jsr 15208 <trimStack>
   10746:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10748:	|      movea.l 16(sp),a0
   1074c:	|      move.l 24(a0),d0
   10750:	|      move.l d0,-(sp)
   10752:	|      pea 1 <_start+0x1>
   10756:	|      moveq #12,d0
   10758:	|      add.l sp,d0
   1075a:	|      move.l d0,-(sp)
   1075c:	|      jsr 14884 <getValueType>
   10762:	|      lea 12(sp),sp
   10766:	|      tst.w d0
   10768:	|  /-- bne.s 1076e <builtIn_setMusicVolume+0x5e>
   1076a:	|  |   moveq #1,d0
   1076c:	+--|-- bra.s 10792 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   1076e:	|  \-> moveq #24,d0
   10770:	|      add.l 16(sp),d0
   10774:	|      move.l d0,-(sp)
   10776:	|      jsr 15208 <trimStack>
   1077c:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   1077e:	|      move.l (sp),d1
   10780:	|      move.l 4(sp),d0
   10784:	|      move.l d1,-(sp)
   10786:	|      move.l d0,-(sp)
   10788:	|      jsr d290 <setMusicVolume>
   1078e:	|      addq.l #8,sp
	return BR_CONTINUE;
   10790:	|      moveq #2,d0
}
   10792:	\----> addq.l #8,sp
   10794:	       rts

00010796 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10796:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10798:	       movea.l 12(sp),a0
   1079c:	       move.l 24(a0),d0
   107a0:	       move.l d0,-(sp)
   107a2:	       pea 1 <_start+0x1>
   107a6:	       move.l sp,d0
   107a8:	       addq.l #8,d0
   107aa:	       move.l d0,-(sp)
   107ac:	       jsr 14884 <getValueType>
   107b2:	       lea 12(sp),sp
   107b6:	       tst.w d0
   107b8:	   /-- bne.s 107be <builtIn_setDefaultMusicVolume+0x28>
   107ba:	   |   moveq #1,d0
   107bc:	/--|-- bra.s 107dc <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   107be:	|  \-> moveq #24,d0
   107c0:	|      add.l 12(sp),d0
   107c4:	|      move.l d0,-(sp)
   107c6:	|      jsr 15208 <trimStack>
   107cc:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   107ce:	|      move.l (sp),d0
   107d0:	|      move.l d0,-(sp)
   107d2:	|      jsr d274 <setDefaultMusicVolume>
   107d8:	|      addq.l #4,sp
	return BR_CONTINUE;
   107da:	|      moveq #2,d0
}
   107dc:	\----> addq.l #4,sp
   107de:	       rts

000107e0 <builtIn_playSound>:

builtIn(playSound)
{
   107e0:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   107e2:	       movea.l 12(sp),a0
   107e6:	       move.l 24(a0),d0
   107ea:	       move.l d0,-(sp)
   107ec:	       pea 5 <_start+0x5>
   107f0:	       move.l sp,d0
   107f2:	       addq.l #8,d0
   107f4:	       move.l d0,-(sp)
   107f6:	       jsr 14884 <getValueType>
   107fc:	       lea 12(sp),sp
   10800:	       tst.w d0
   10802:	   /-- bne.s 10808 <builtIn_playSound+0x28>
   10804:	   |   moveq #1,d0
   10806:	/--|-- bra.s 10830 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10808:	|  \-> moveq #24,d0
   1080a:	|      add.l 12(sp),d0
   1080e:	|      move.l d0,-(sp)
   10810:	|      jsr 15208 <trimStack>
   10816:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10818:	|      move.l (sp),d0
   1081a:	|      clr.l -(sp)
   1081c:	|      move.l d0,-(sp)
   1081e:	|      jsr d298 <startSound>
   10824:	|      addq.l #8,sp
   10826:	|      tst.w d0
   10828:	|  /-- bne.s 1082e <builtIn_playSound+0x4e>
   1082a:	|  |   moveq #2,d0
   1082c:	+--|-- bra.s 10830 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   1082e:	|  \-> moveq #2,d0
}
   10830:	\----> addq.l #4,sp
   10832:	       rts

00010834 <builtIn_loopSound>:

builtIn(loopSound)
{
   10834:	             lea -28(sp),sp
   10838:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   1083a:	             tst.l 36(sp)
   1083e:	         /-- bgt.s 10854 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10840:	         |   pea 19a4c <line.c.05397aaf+0x194>
   10846:	         |   jsr 1729e <KPrintF>
   1084c:	         |   addq.l #4,sp
		return BR_ERROR;
   1084e:	         |   moveq #1,d0
   10850:	/--------|-- bra.w 10a10 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10854:	|        \-> moveq #1,d0
   10856:	|            cmp.l 36(sp),d0
   1085a:	|     /----- blt.s 108b6 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   1085c:	|     |      movea.l 40(sp),a0
   10860:	|     |      move.l 24(a0),d0
   10864:	|     |      move.l d0,-(sp)
   10866:	|     |      pea 5 <_start+0x5>
   1086a:	|     |      lea 16(sp),a0
   1086e:	|     |      move.l a0,-(sp)
   10870:	|     |      jsr 14884 <getValueType>
   10876:	|     |      lea 12(sp),sp
   1087a:	|     |      tst.w d0
   1087c:	|     |  /-- bne.s 10884 <builtIn_loopSound+0x50>
   1087e:	|     |  |   moveq #1,d0
   10880:	+-----|--|-- bra.w 10a10 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10884:	|     |  \-> moveq #24,d0
   10886:	|     |      add.l 40(sp),d0
   1088a:	|     |      move.l d0,-(sp)
   1088c:	|     |      jsr 15208 <trimStack>
   10892:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10894:	|     |      move.l 8(sp),d0
   10898:	|     |      pea 1 <_start+0x1>
   1089c:	|     |      move.l d0,-(sp)
   1089e:	|     |      jsr d298 <startSound>
   108a4:	|     |      addq.l #8,sp
   108a6:	|     |      tst.w d0
   108a8:	|     |  /-- bne.s 108b0 <builtIn_loopSound+0x7c>
   108aa:	|     |  |   moveq #2,d0
   108ac:	+-----|--|-- bra.w 10a10 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   108b0:	|     |  \-> moveq #2,d0
   108b2:	+-----|----- bra.w 10a10 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   108b6:	|     \----> moveq #2,d1
   108b8:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   108bc:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   108c0:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   108c4:	|            movea.l 40(sp),a0
   108c8:	|            movea.l 24(a0),a0
   108cc:	|            move.l (a0),d0
   108ce:	|            moveq #5,d1
   108d0:	|            cmp.l d0,d1
   108d2:	|  /-------- beq.w 109aa <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   108d6:	|  |         movea.l 40(sp),a0
   108da:	|  |         move.l 24(a0),d0
   108de:	|  |         move.l d0,-(sp)
   108e0:	|  |         pea 1 <_start+0x1>
   108e4:	|  |         lea 12(sp),a0
   108e8:	|  |         move.l a0,-(sp)
   108ea:	|  |         jsr 14884 <getValueType>
   108f0:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   108f4:	|  |         moveq #24,d0
   108f6:	|  |         add.l 40(sp),d0
   108fa:	|  |         move.l d0,-(sp)
   108fc:	|  |         jsr 15208 <trimStack>
   10902:	|  |         addq.l #4,sp
			numParams--;
   10904:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10908:	|  +-------- bra.w 109aa <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   1090c:	|  |  /----> movea.l 40(sp),a0
   10910:	|  |  |      move.l 24(a0),d0
   10914:	|  |  |      move.l d0,-(sp)
   10916:	|  |  |      pea 5 <_start+0x5>
   1091a:	|  |  |      lea 16(sp),a0
   1091e:	|  |  |      move.l a0,-(sp)
   10920:	|  |  |      jsr 14884 <getValueType>
   10926:	|  |  |      lea 12(sp),sp
   1092a:	|  |  |      tst.w d0
   1092c:	|  |  |  /-- bne.s 10942 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   1092e:	|  |  |  |   pea 19a8a <line.c.05397aaf+0x1d2>
   10934:	|  |  |  |   jsr 1729e <KPrintF>
   1093a:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   1093c:	|  |  |  |   moveq #1,d0
   1093e:	+--|--|--|-- bra.w 10a10 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10942:	|  |  |  \-> moveq #20,d0
   10944:	|  |  |      move.l d0,20(sp)
   10948:	|  |  |      clr.l 16(sp)
   1094c:	|  |  |      move.l 1c9c4 <SysBase>,d0
   10952:	|  |  |      movea.l d0,a6
   10954:	|  |  |      move.l 20(sp),d0
   10958:	|  |  |      move.l 16(sp),d1
   1095c:	|  |  |      jsr -684(a6)
   10960:	|  |  |      move.l d0,12(sp)
   10964:	|  |  |      move.l 12(sp),d0
   10968:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   1096c:	|  |  |  /-- bne.s 10974 <builtIn_loopSound+0x140>
   1096e:	|  |  |  |   moveq #1,d0
   10970:	+--|--|--|-- bra.w 10a10 <builtIn_loopSound+0x1dc>

			s->next = old;
   10974:	|  |  |  \-> movea.l 28(sp),a0
   10978:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   1097e:	|  |  |      movea.l 28(sp),a0
   10982:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10986:	|  |  |      move.l 8(sp),d0
   1098a:	|  |  |      movea.l 28(sp),a0
   1098e:	|  |  |      move.l d0,(a0)
			old = s;
   10990:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10996:	|  |  |      moveq #24,d0
   10998:	|  |  |      add.l 40(sp),d0
   1099c:	|  |  |      move.l d0,-(sp)
   1099e:	|  |  |      jsr 15208 <trimStack>
   109a4:	|  |  |      addq.l #4,sp
			numParams--;
   109a6:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   109aa:	|  \--|----> tst.l 36(sp)
   109ae:	|     \----- bne.w 1090c <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   109b2:	|        /-- bra.s 109be <builtIn_loopSound+0x18a>
   109b4:	|     /--|-> movea.l 28(sp),a0
   109b8:	|     |  |   move.l 4(a0),28(sp)
   109be:	|     |  \-> movea.l 28(sp),a0
   109c2:	|     |      move.l 4(a0),d0
   109c6:	|     \----- bne.s 109b4 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   109c8:	|            move.l 4(sp),d0
   109cc:	|            moveq #1,d1
   109ce:	|            cmp.l d0,d1
   109d0:	|     /----- bge.s 109e8 <builtIn_loopSound+0x1b4>
			s->next = old;
   109d2:	|     |      movea.l 28(sp),a0
   109d6:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   109dc:	|     |      movea.l 24(sp),a0
   109e0:	|     |      move.l 28(sp),8(a0)
   109e6:	|     |  /-- bra.s 109f8 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   109e8:	|     \--|-> move.l 4(sp),d0
   109ec:	|        +-- beq.s 109f8 <builtIn_loopSound+0x1c4>
			s->next = s;
   109ee:	|        |   movea.l 28(sp),a0
   109f2:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   109f8:	|        \-> movea.l 24(sp),a0
   109fc:	|            moveq #-1,d0
   109fe:	|            move.l d0,16(a0)
		playSoundList(old);
   10a02:	|            move.l 24(sp),-(sp)
   10a06:	|            jsr d212 <playSoundList>
   10a0c:	|            addq.l #4,sp
		return BR_CONTINUE;
   10a0e:	|            moveq #2,d0
	}
}
   10a10:	\----------> movea.l (sp)+,a6
   10a12:	             lea 28(sp),sp
   10a16:	             rts

00010a18 <builtIn_stopSound>:

builtIn(stopSound)
{
   10a18:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a1a:	       movea.l 12(sp),a0
   10a1e:	       move.l 24(a0),d0
   10a22:	       move.l d0,-(sp)
   10a24:	       pea 5 <_start+0x5>
   10a28:	       move.l sp,d0
   10a2a:	       addq.l #8,d0
   10a2c:	       move.l d0,-(sp)
   10a2e:	       jsr 14884 <getValueType>
   10a34:	       lea 12(sp),sp
   10a38:	       tst.w d0
   10a3a:	   /-- bne.s 10a40 <builtIn_stopSound+0x28>
   10a3c:	   |   moveq #1,d0
   10a3e:	/--|-- bra.s 10a5e <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10a40:	|  \-> moveq #24,d0
   10a42:	|      add.l 12(sp),d0
   10a46:	|      move.l d0,-(sp)
   10a48:	|      jsr 15208 <trimStack>
   10a4e:	|      addq.l #4,sp
	huntKillSound (v);
   10a50:	|      move.l (sp),d0
   10a52:	|      move.l d0,-(sp)
   10a54:	|      jsr d20a <huntKillSound>
   10a5a:	|      addq.l #4,sp
	return BR_CONTINUE;
   10a5c:	|      moveq #2,d0
}
   10a5e:	\----> addq.l #4,sp
   10a60:	       rts

00010a62 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10a62:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a64:	       movea.l 12(sp),a0
   10a68:	       move.l 24(a0),d0
   10a6c:	       move.l d0,-(sp)
   10a6e:	       pea 1 <_start+0x1>
   10a72:	       move.l sp,d0
   10a74:	       addq.l #8,d0
   10a76:	       move.l d0,-(sp)
   10a78:	       jsr 14884 <getValueType>
   10a7e:	       lea 12(sp),sp
   10a82:	       tst.w d0
   10a84:	   /-- bne.s 10a8a <builtIn_setDefaultSoundVolume+0x28>
   10a86:	   |   moveq #1,d0
   10a88:	/--|-- bra.s 10aa8 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10a8a:	|  \-> moveq #24,d0
   10a8c:	|      add.l 12(sp),d0
   10a90:	|      move.l d0,-(sp)
   10a92:	|      jsr 15208 <trimStack>
   10a98:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10a9a:	|      move.l (sp),d0
   10a9c:	|      move.l d0,-(sp)
   10a9e:	|      jsr d280 <setDefaultSoundVolume>
   10aa4:	|      addq.l #4,sp
	return BR_CONTINUE;
   10aa6:	|      moveq #2,d0
}
   10aa8:	\----> addq.l #4,sp
   10aaa:	       rts

00010aac <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10aac:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10aae:	       movea.l 16(sp),a0
   10ab2:	       move.l 24(a0),d0
   10ab6:	       move.l d0,-(sp)
   10ab8:	       pea 1 <_start+0x1>
   10abc:	       move.l sp,d0
   10abe:	       addq.l #8,d0
   10ac0:	       move.l d0,-(sp)
   10ac2:	       jsr 14884 <getValueType>
   10ac8:	       lea 12(sp),sp
   10acc:	       tst.w d0
   10ace:	   /-- bne.s 10ad4 <builtIn_setSoundVolume+0x28>
   10ad0:	   |   moveq #1,d0
   10ad2:	/--|-- bra.s 10b2e <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10ad4:	|  \-> moveq #24,d0
   10ad6:	|      add.l 16(sp),d0
   10ada:	|      move.l d0,-(sp)
   10adc:	|      jsr 15208 <trimStack>
   10ae2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ae4:	|      movea.l 16(sp),a0
   10ae8:	|      move.l 24(a0),d0
   10aec:	|      move.l d0,-(sp)
   10aee:	|      pea 5 <_start+0x5>
   10af2:	|      moveq #12,d0
   10af4:	|      add.l sp,d0
   10af6:	|      move.l d0,-(sp)
   10af8:	|      jsr 14884 <getValueType>
   10afe:	|      lea 12(sp),sp
   10b02:	|      tst.w d0
   10b04:	|  /-- bne.s 10b0a <builtIn_setSoundVolume+0x5e>
   10b06:	|  |   moveq #1,d0
   10b08:	+--|-- bra.s 10b2e <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10b0a:	|  \-> moveq #24,d0
   10b0c:	|      add.l 16(sp),d0
   10b10:	|      move.l d0,-(sp)
   10b12:	|      jsr 15208 <trimStack>
   10b18:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10b1a:	|      move.l (sp),d1
   10b1c:	|      move.l 4(sp),d0
   10b20:	|      move.l d1,-(sp)
   10b22:	|      move.l d0,-(sp)
   10b24:	|      jsr d294 <setSoundVolume>
   10b2a:	|      addq.l #8,sp
	return BR_CONTINUE;
   10b2c:	|      moveq #2,d0
}
   10b2e:	\----> addq.l #8,sp
   10b30:	       rts

00010b32 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10b32:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b36:	       movea.l 20(sp),a0
   10b3a:	       move.l 24(a0),d0
   10b3e:	       move.l d0,-(sp)
   10b40:	       pea 1 <_start+0x1>
   10b44:	       moveq #12,d0
   10b46:	       add.l sp,d0
   10b48:	       move.l d0,-(sp)
   10b4a:	       jsr 14884 <getValueType>
   10b50:	       lea 12(sp),sp
   10b54:	       tst.w d0
   10b56:	   /-- bne.s 10b5e <builtIn_setSoundLoopPoints+0x2c>
   10b58:	   |   moveq #1,d0
   10b5a:	/--|-- bra.w 10bf6 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10b5e:	|  \-> moveq #24,d0
   10b60:	|      add.l 20(sp),d0
   10b64:	|      move.l d0,-(sp)
   10b66:	|      jsr 15208 <trimStack>
   10b6c:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b6e:	|      movea.l 20(sp),a0
   10b72:	|      move.l 24(a0),d0
   10b76:	|      move.l d0,-(sp)
   10b78:	|      pea 1 <_start+0x1>
   10b7c:	|      lea 8(sp),a0
   10b80:	|      move.l a0,-(sp)
   10b82:	|      jsr 14884 <getValueType>
   10b88:	|      lea 12(sp),sp
   10b8c:	|      tst.w d0
   10b8e:	|  /-- bne.s 10b94 <builtIn_setSoundLoopPoints+0x62>
   10b90:	|  |   moveq #1,d0
   10b92:	+--|-- bra.s 10bf6 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10b94:	|  \-> moveq #24,d0
   10b96:	|      add.l 20(sp),d0
   10b9a:	|      move.l d0,-(sp)
   10b9c:	|      jsr 15208 <trimStack>
   10ba2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ba4:	|      movea.l 20(sp),a0
   10ba8:	|      move.l 24(a0),d0
   10bac:	|      move.l d0,-(sp)
   10bae:	|      pea 5 <_start+0x5>
   10bb2:	|      moveq #16,d0
   10bb4:	|      add.l sp,d0
   10bb6:	|      move.l d0,-(sp)
   10bb8:	|      jsr 14884 <getValueType>
   10bbe:	|      lea 12(sp),sp
   10bc2:	|      tst.w d0
   10bc4:	|  /-- bne.s 10bca <builtIn_setSoundLoopPoints+0x98>
   10bc6:	|  |   moveq #1,d0
   10bc8:	+--|-- bra.s 10bf6 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10bca:	|  \-> moveq #24,d0
   10bcc:	|      add.l 20(sp),d0
   10bd0:	|      move.l d0,-(sp)
   10bd2:	|      jsr 15208 <trimStack>
   10bd8:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10bda:	|      movea.l 4(sp),a0
   10bde:	|      move.l (sp),d1
   10be0:	|      move.l 8(sp),d0
   10be4:	|      move.l a0,-(sp)
   10be6:	|      move.l d1,-(sp)
   10be8:	|      move.l d0,-(sp)
   10bea:	|      jsr d28c <setSoundLoop>
   10bf0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10bf4:	|      moveq #2,d0
}
   10bf6:	\----> lea 12(sp),sp
   10bfa:	       rts

00010bfc <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10bfc:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10bfe:	          movea.l 12(sp),a0
   10c02:	          movea.l 24(a0),a0
   10c06:	          move.l (a0),d0
   10c08:	          moveq #5,d1
   10c0a:	          cmp.l d0,d1
   10c0c:	/-------- bne.s 10c50 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10c0e:	|         movea.l 12(sp),a0
   10c12:	|         move.l 24(a0),d0
   10c16:	|         move.l d0,-(sp)
   10c18:	|         pea 5 <_start+0x5>
   10c1c:	|         move.l sp,d0
   10c1e:	|         addq.l #8,d0
   10c20:	|         move.l d0,-(sp)
   10c22:	|         jsr 14884 <getValueType>
   10c28:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10c2c:	|         moveq #24,d0
   10c2e:	|         add.l 12(sp),d0
   10c32:	|         move.l d0,-(sp)
   10c34:	|         jsr 15208 <trimStack>
   10c3a:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10c3c:	|         move.l (sp),d0
   10c3e:	|         move.l d0,-(sp)
   10c40:	|         jsr 16a48 <setFloor>
   10c46:	|         addq.l #4,sp
   10c48:	|         tst.w d0
   10c4a:	|  /----- bne.s 10c66 <builtIn_setFloor+0x6a>
   10c4c:	|  |      moveq #1,d0
   10c4e:	|  |  /-- bra.s 10c68 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10c50:	\--|--|-> moveq #24,d0
   10c52:	   |  |   add.l 12(sp),d0
   10c56:	   |  |   move.l d0,-(sp)
   10c58:	   |  |   jsr 15208 <trimStack>
   10c5e:	   |  |   addq.l #4,sp
		setFloorNull ();
   10c60:	   |  |   jsr 171c2 <setFloorNull>
	}
	return BR_CONTINUE;
   10c66:	   \--|-> moveq #2,d0
}
   10c68:	      \-> addq.l #4,sp
   10c6a:	          rts

00010c6c <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10c6c:	jsr 162e0 <drawFloor>
	return BR_CONTINUE;
   10c72:	moveq #2,d0
}
   10c74:	rts

00010c76 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10c76:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10c78:	          movea.l 12(sp),a0
   10c7c:	          movea.l 24(a0),a0
   10c80:	          move.l (a0),d0
   10c82:	          moveq #5,d1
   10c84:	          cmp.l d0,d1
   10c86:	/-------- bne.s 10cca <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10c88:	|         movea.l 12(sp),a0
   10c8c:	|         move.l 24(a0),d0
   10c90:	|         move.l d0,-(sp)
   10c92:	|         pea 5 <_start+0x5>
   10c96:	|         move.l sp,d0
   10c98:	|         addq.l #8,d0
   10c9a:	|         move.l d0,-(sp)
   10c9c:	|         jsr 14884 <getValueType>
   10ca2:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10ca6:	|         moveq #24,d0
   10ca8:	|         add.l 12(sp),d0
   10cac:	|         move.l d0,-(sp)
   10cae:	|         jsr 15208 <trimStack>
   10cb4:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10cb6:	|         move.l (sp),d0
   10cb8:	|         move.l d0,-(sp)
   10cba:	|         jsr 88a0 <setZBuffer>
   10cc0:	|         addq.l #4,sp
   10cc2:	|         tst.w d0
   10cc4:	|  /----- bne.s 10ce0 <builtIn_setZBuffer+0x6a>
   10cc6:	|  |      moveq #1,d0
   10cc8:	|  |  /-- bra.s 10ce2 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10cca:	\--|--|-> moveq #24,d0
   10ccc:	   |  |   add.l 12(sp),d0
   10cd0:	   |  |   move.l d0,-(sp)
   10cd2:	   |  |   jsr 15208 <trimStack>
   10cd8:	   |  |   addq.l #4,sp
		killZBuffer ();
   10cda:	   |  |   jsr 8854 <killZBuffer>
	}
	return BR_CONTINUE;
   10ce0:	   \--|-> moveq #2,d0
}
   10ce2:	      \-> addq.l #4,sp
   10ce4:	          rts

00010ce6 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10ce6:	pea 19ac1 <line.c.05397aaf+0x209>
   10cec:	jsr 1729e <KPrintF>
   10cf2:	addq.l #4,sp
	return BR_CONTINUE;
   10cf4:	moveq #2,d0
}
   10cf6:	rts

00010cf8 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10cf8:	          movea.l 8(sp),a0
   10cfc:	          move.l 24(a0),d0
   10d00:	          move.l d0,-(sp)
   10d02:	          pea 1 <_start+0x1>
   10d06:	          pea 1ca92 <speechMode>
   10d0c:	          jsr 14884 <getValueType>
   10d12:	          lea 12(sp),sp
   10d16:	          tst.w d0
   10d18:	      /-- bne.s 10d1e <builtIn_setSpeechMode+0x26>
   10d1a:	      |   moveq #1,d0
   10d1c:	/-----|-- bra.s 10d56 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10d1e:	|     \-> moveq #24,d0
   10d20:	|         add.l 8(sp),d0
   10d24:	|         move.l d0,-(sp)
   10d26:	|         jsr 15208 <trimStack>
   10d2c:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10d2e:	|         move.l 1ca92 <speechMode>,d0
   10d34:	|     /-- bmi.s 10d42 <builtIn_setSpeechMode+0x4a>
   10d36:	|     |   move.l 1ca92 <speechMode>,d0
   10d3c:	|     |   moveq #2,d1
   10d3e:	|     |   cmp.l d0,d1
   10d40:	|  /--|-- bge.s 10d54 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10d42:	|  |  \-> pea 19ada <line.c.05397aaf+0x222>
   10d48:	|  |      jsr 1729e <KPrintF>
   10d4e:	|  |      addq.l #4,sp
		return BR_ERROR;
   10d50:	|  |      moveq #1,d0
   10d52:	+--|----- bra.s 10d56 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10d54:	|  \----> moveq #2,d0
}
   10d56:	\-------> rts

00010d58 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10d58:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10d5a:	       jsr 805c <isThereAnySpeechGoingOn>
   10d60:	       move.l d0,(sp)
	if (i == -1) {
   10d62:	       moveq #-1,d0
   10d64:	       cmp.l (sp),d0
   10d66:	/----- bne.s 10d82 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10d68:	|      moveq #28,d0
   10d6a:	|      add.l 12(sp),d0
   10d6e:	|      clr.l -(sp)
   10d70:	|      pea 1 <_start+0x1>
   10d74:	|      move.l d0,-(sp)
   10d76:	|      jsr 15176 <setVariable>
   10d7c:	|      lea 12(sp),sp
   10d80:	|  /-- bra.s 10d9a <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10d82:	\--|-> moveq #28,d0
   10d84:	   |   add.l 12(sp),d0
   10d88:	   |   move.l (sp),-(sp)
   10d8a:	   |   pea 7 <_start+0x7>
   10d8e:	   |   move.l d0,-(sp)
   10d90:	   |   jsr 15176 <setVariable>
   10d96:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10d9a:	   \-> moveq #2,d0
}
   10d9c:	       addq.l #4,sp
   10d9e:	       rts

00010da0 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10da0:	jsr 6336 <killSpeechTimers>
	return BR_CONTINUE;
   10da6:	moveq #2,d0
}
   10da8:	rts

00010daa <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10daa:	       move.l 1cad8 <overRegion>,d0
   10db0:	/----- beq.s 10dda <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10db2:	|      movea.l 1cad8 <overRegion>,a0
   10db8:	|      movea.l 28(a0),a0
   10dbc:	|      move.l 4(a0),d1
   10dc0:	|      moveq #28,d0
   10dc2:	|      add.l 8(sp),d0
   10dc6:	|      move.l d1,-(sp)
   10dc8:	|      pea 7 <_start+0x7>
   10dcc:	|      move.l d0,-(sp)
   10dce:	|      jsr 15176 <setVariable>
   10dd4:	|      lea 12(sp),sp
   10dd8:	|  /-- bra.s 10df2 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10dda:	\--|-> moveq #28,d0
   10ddc:	   |   add.l 8(sp),d0
   10de0:	   |   clr.l -(sp)
   10de2:	   |   pea 1 <_start+0x1>
   10de6:	   |   move.l d0,-(sp)
   10de8:	   |   jsr 15176 <setVariable>
   10dee:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10df2:	   \-> moveq #2,d0
}
   10df4:	       rts

00010df6 <builtIn_rename>:

builtIn(rename)
{
   10df6:	       lea -16(sp),sp
   10dfa:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10dfc:	       movea.l 28(sp),a0
   10e00:	       move.l 24(a0),d0
   10e04:	       move.l d0,-(sp)
   10e06:	       jsr 14e5a <getTextFromAnyVar>
   10e0c:	       addq.l #4,sp
   10e0e:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10e12:	   /-- bne.s 10e18 <builtIn_rename+0x22>
   10e14:	   |   moveq #1,d0
   10e16:	/--|-- bra.s 10e92 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10e18:	|  \-> moveq #24,d0
   10e1a:	|      add.l 28(sp),d0
   10e1e:	|      move.l d0,-(sp)
   10e20:	|      jsr 15208 <trimStack>
   10e26:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10e28:	|      movea.l 28(sp),a0
   10e2c:	|      move.l 24(a0),d0
   10e30:	|      move.l d0,-(sp)
   10e32:	|      pea 7 <_start+0x7>
   10e36:	|      lea 12(sp),a0
   10e3a:	|      move.l a0,-(sp)
   10e3c:	|      jsr 14884 <getValueType>
   10e42:	|      lea 12(sp),sp
   10e46:	|      tst.w d0
   10e48:	|  /-- bne.s 10e4e <builtIn_rename+0x58>
   10e4a:	|  |   moveq #1,d0
   10e4c:	+--|-- bra.s 10e92 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10e4e:	|  \-> moveq #24,d0
   10e50:	|      add.l 28(sp),d0
   10e54:	|      move.l d0,-(sp)
   10e56:	|      jsr 15208 <trimStack>
   10e5c:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10e5e:	|      move.l 4(sp),d0
   10e62:	|      move.l d0,-(sp)
   10e64:	|      jsr d5ce <findObjectType>
   10e6a:	|      addq.l #4,sp
   10e6c:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10e70:	|      movea.l 12(sp),a0
   10e74:	|      move.l (a0),8(sp)
   10e78:	|      move.l 1c9c4 <SysBase>,d0
   10e7e:	|      movea.l d0,a6
   10e80:	|      movea.l 8(sp),a1
   10e84:	|      jsr -690(a6)
	o->screenName = newText;
   10e88:	|      movea.l 12(sp),a0
   10e8c:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10e90:	|      moveq #2,d0
}
   10e92:	\----> movea.l (sp)+,a6
   10e94:	       lea 16(sp),sp
   10e98:	       rts

00010e9a <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10e9a:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e9e:	          movea.l 20(sp),a0
   10ea2:	          move.l 24(a0),d0
   10ea6:	          move.l d0,-(sp)
   10ea8:	          pea 7 <_start+0x7>
   10eac:	          lea 8(sp),a0
   10eb0:	          move.l a0,-(sp)
   10eb2:	          jsr 14884 <getValueType>
   10eb8:	          lea 12(sp),sp
   10ebc:	          tst.w d0
   10ebe:	      /-- bne.s 10ec6 <builtIn_getObjectX+0x2c>
   10ec0:	      |   moveq #1,d0
   10ec2:	/-----|-- bra.w 10f62 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10ec6:	|     \-> moveq #24,d0
   10ec8:	|         add.l 20(sp),d0
   10ecc:	|         move.l d0,-(sp)
   10ece:	|         jsr 15208 <trimStack>
   10ed4:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10ed6:	|         move.l (sp),d0
   10ed8:	|         move.l d0,-(sp)
   10eda:	|         jsr a75c <findPerson>
   10ee0:	|         addq.l #4,sp
   10ee2:	|         move.l d0,8(sp)
	if (pers) {
   10ee6:	|     /-- beq.s 10f14 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10ee8:	|     |   movea.l 8(sp),a0
   10eec:	|     |   move.l (a0),d0
   10eee:	|     |   move.l d0,-(sp)
   10ef0:	|     |   jsr 17672 <__fixsfsi>
   10ef6:	|     |   addq.l #4,sp
   10ef8:	|     |   move.l d0,d1
   10efa:	|     |   moveq #28,d0
   10efc:	|     |   add.l 20(sp),d0
   10f00:	|     |   move.l d1,-(sp)
   10f02:	|     |   pea 1 <_start+0x1>
   10f06:	|     |   move.l d0,-(sp)
   10f08:	|     |   jsr 15176 <setVariable>
   10f0e:	|     |   lea 12(sp),sp
   10f12:	|  /--|-- bra.s 10f60 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10f14:	|  |  \-> move.l (sp),d0
   10f16:	|  |      move.l d0,-(sp)
   10f18:	|  |      jsr 15ac6 <getRegionForObject>
   10f1e:	|  |      addq.l #4,sp
   10f20:	|  |      move.l d0,4(sp)
		if (la) {
   10f24:	|  |  /-- beq.s 10f48 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10f26:	|  |  |   movea.l 4(sp),a0
   10f2a:	|  |  |   move.l 16(a0),d1
   10f2e:	|  |  |   moveq #28,d0
   10f30:	|  |  |   add.l 20(sp),d0
   10f34:	|  |  |   move.l d1,-(sp)
   10f36:	|  |  |   pea 1 <_start+0x1>
   10f3a:	|  |  |   move.l d0,-(sp)
   10f3c:	|  |  |   jsr 15176 <setVariable>
   10f42:	|  |  |   lea 12(sp),sp
   10f46:	|  +--|-- bra.s 10f60 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10f48:	|  |  \-> moveq #28,d0
   10f4a:	|  |      add.l 20(sp),d0
   10f4e:	|  |      clr.l -(sp)
   10f50:	|  |      pea 1 <_start+0x1>
   10f54:	|  |      move.l d0,-(sp)
   10f56:	|  |      jsr 15176 <setVariable>
   10f5c:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10f60:	|  \----> moveq #2,d0
}
   10f62:	\-------> lea 12(sp),sp
   10f66:	          rts

00010f68 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10f68:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f6c:	          movea.l 20(sp),a0
   10f70:	          move.l 24(a0),d0
   10f74:	          move.l d0,-(sp)
   10f76:	          pea 7 <_start+0x7>
   10f7a:	          lea 8(sp),a0
   10f7e:	          move.l a0,-(sp)
   10f80:	          jsr 14884 <getValueType>
   10f86:	          lea 12(sp),sp
   10f8a:	          tst.w d0
   10f8c:	      /-- bne.s 10f94 <builtIn_getObjectY+0x2c>
   10f8e:	      |   moveq #1,d0
   10f90:	/-----|-- bra.w 11032 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10f94:	|     \-> moveq #24,d0
   10f96:	|         add.l 20(sp),d0
   10f9a:	|         move.l d0,-(sp)
   10f9c:	|         jsr 15208 <trimStack>
   10fa2:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10fa4:	|         move.l (sp),d0
   10fa6:	|         move.l d0,-(sp)
   10fa8:	|         jsr a75c <findPerson>
   10fae:	|         addq.l #4,sp
   10fb0:	|         move.l d0,8(sp)
	if (pers) {
   10fb4:	|     /-- beq.s 10fe4 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10fb6:	|     |   movea.l 8(sp),a0
   10fba:	|     |   move.l 4(a0),d0
   10fbe:	|     |   move.l d0,-(sp)
   10fc0:	|     |   jsr 17672 <__fixsfsi>
   10fc6:	|     |   addq.l #4,sp
   10fc8:	|     |   move.l d0,d1
   10fca:	|     |   moveq #28,d0
   10fcc:	|     |   add.l 20(sp),d0
   10fd0:	|     |   move.l d1,-(sp)
   10fd2:	|     |   pea 1 <_start+0x1>
   10fd6:	|     |   move.l d0,-(sp)
   10fd8:	|     |   jsr 15176 <setVariable>
   10fde:	|     |   lea 12(sp),sp
   10fe2:	|  /--|-- bra.s 11030 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10fe4:	|  |  \-> move.l (sp),d0
   10fe6:	|  |      move.l d0,-(sp)
   10fe8:	|  |      jsr 15ac6 <getRegionForObject>
   10fee:	|  |      addq.l #4,sp
   10ff0:	|  |      move.l d0,4(sp)
		if (la) {
   10ff4:	|  |  /-- beq.s 11018 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10ff6:	|  |  |   movea.l 4(sp),a0
   10ffa:	|  |  |   move.l 20(a0),d1
   10ffe:	|  |  |   moveq #28,d0
   11000:	|  |  |   add.l 20(sp),d0
   11004:	|  |  |   move.l d1,-(sp)
   11006:	|  |  |   pea 1 <_start+0x1>
   1100a:	|  |  |   move.l d0,-(sp)
   1100c:	|  |  |   jsr 15176 <setVariable>
   11012:	|  |  |   lea 12(sp),sp
   11016:	|  +--|-- bra.s 11030 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   11018:	|  |  \-> moveq #28,d0
   1101a:	|  |      add.l 20(sp),d0
   1101e:	|  |      clr.l -(sp)
   11020:	|  |      pea 1 <_start+0x1>
   11024:	|  |      move.l d0,-(sp)
   11026:	|  |      jsr 15176 <setVariable>
   1102c:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11030:	|  \----> moveq #2,d0
}
   11032:	\-------> lea 12(sp),sp
   11036:	          rts

00011038 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   11038:	       lea -32(sp),sp
   1103c:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11040:	       movea.l 56(sp),a0
   11044:	       move.l 24(a0),d0
   11048:	       move.l d0,-(sp)
   1104a:	       pea 1 <_start+0x1>
   1104e:	       lea 28(sp),a0
   11052:	       move.l a0,-(sp)
   11054:	       jsr 14884 <getValueType>
   1105a:	       lea 12(sp),sp
   1105e:	       tst.w d0
   11060:	   /-- bne.s 11068 <builtIn_addScreenRegion+0x30>
   11062:	   |   moveq #1,d0
   11064:	/--|-- bra.w 11242 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11068:	|  \-> moveq #24,d0
   1106a:	|      add.l 56(sp),d0
   1106e:	|      move.l d0,-(sp)
   11070:	|      jsr 15208 <trimStack>
   11076:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11078:	|      movea.l 56(sp),a0
   1107c:	|      move.l 24(a0),d0
   11080:	|      move.l d0,-(sp)
   11082:	|      pea 1 <_start+0x1>
   11086:	|      moveq #48,d0
   11088:	|      add.l sp,d0
   1108a:	|      move.l d0,-(sp)
   1108c:	|      jsr 14884 <getValueType>
   11092:	|      lea 12(sp),sp
   11096:	|      tst.w d0
   11098:	|  /-- bne.s 110a0 <builtIn_addScreenRegion+0x68>
   1109a:	|  |   moveq #1,d0
   1109c:	+--|-- bra.w 11242 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110a0:	|  \-> moveq #24,d0
   110a2:	|      add.l 56(sp),d0
   110a6:	|      move.l d0,-(sp)
   110a8:	|      jsr 15208 <trimStack>
   110ae:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110b0:	|      movea.l 56(sp),a0
   110b4:	|      move.l 24(a0),d0
   110b8:	|      move.l d0,-(sp)
   110ba:	|      pea 1 <_start+0x1>
   110be:	|      moveq #52,d0
   110c0:	|      add.l sp,d0
   110c2:	|      move.l d0,-(sp)
   110c4:	|      jsr 14884 <getValueType>
   110ca:	|      lea 12(sp),sp
   110ce:	|      tst.w d0
   110d0:	|  /-- bne.s 110d8 <builtIn_addScreenRegion+0xa0>
   110d2:	|  |   moveq #1,d0
   110d4:	+--|-- bra.w 11242 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110d8:	|  \-> moveq #24,d0
   110da:	|      add.l 56(sp),d0
   110de:	|      move.l d0,-(sp)
   110e0:	|      jsr 15208 <trimStack>
   110e6:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110e8:	|      movea.l 56(sp),a0
   110ec:	|      move.l 24(a0),d0
   110f0:	|      move.l d0,-(sp)
   110f2:	|      pea 1 <_start+0x1>
   110f6:	|      lea 32(sp),a0
   110fa:	|      move.l a0,-(sp)
   110fc:	|      jsr 14884 <getValueType>
   11102:	|      lea 12(sp),sp
   11106:	|      tst.w d0
   11108:	|  /-- bne.s 11110 <builtIn_addScreenRegion+0xd8>
   1110a:	|  |   moveq #1,d0
   1110c:	+--|-- bra.w 11242 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11110:	|  \-> moveq #24,d0
   11112:	|      add.l 56(sp),d0
   11116:	|      move.l d0,-(sp)
   11118:	|      jsr 15208 <trimStack>
   1111e:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11120:	|      movea.l 56(sp),a0
   11124:	|      move.l 24(a0),d0
   11128:	|      move.l d0,-(sp)
   1112a:	|      pea 1 <_start+0x1>
   1112e:	|      lea 36(sp),a0
   11132:	|      move.l a0,-(sp)
   11134:	|      jsr 14884 <getValueType>
   1113a:	|      lea 12(sp),sp
   1113e:	|      tst.w d0
   11140:	|  /-- bne.s 11148 <builtIn_addScreenRegion+0x110>
   11142:	|  |   moveq #1,d0
   11144:	+--|-- bra.w 11242 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11148:	|  \-> moveq #24,d0
   1114a:	|      add.l 56(sp),d0
   1114e:	|      move.l d0,-(sp)
   11150:	|      jsr 15208 <trimStack>
   11156:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11158:	|      movea.l 56(sp),a0
   1115c:	|      move.l 24(a0),d0
   11160:	|      move.l d0,-(sp)
   11162:	|      pea 1 <_start+0x1>
   11166:	|      lea 40(sp),a0
   1116a:	|      move.l a0,-(sp)
   1116c:	|      jsr 14884 <getValueType>
   11172:	|      lea 12(sp),sp
   11176:	|      tst.w d0
   11178:	|  /-- bne.s 11180 <builtIn_addScreenRegion+0x148>
   1117a:	|  |   moveq #1,d0
   1117c:	+--|-- bra.w 11242 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11180:	|  \-> moveq #24,d0
   11182:	|      add.l 56(sp),d0
   11186:	|      move.l d0,-(sp)
   11188:	|      jsr 15208 <trimStack>
   1118e:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11190:	|      movea.l 56(sp),a0
   11194:	|      move.l 24(a0),d0
   11198:	|      move.l d0,-(sp)
   1119a:	|      pea 1 <_start+0x1>
   1119e:	|      lea 44(sp),a0
   111a2:	|      move.l a0,-(sp)
   111a4:	|      jsr 14884 <getValueType>
   111aa:	|      lea 12(sp),sp
   111ae:	|      tst.w d0
   111b0:	|  /-- bne.s 111b8 <builtIn_addScreenRegion+0x180>
   111b2:	|  |   moveq #1,d0
   111b4:	+--|-- bra.w 11242 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   111b8:	|  \-> moveq #24,d0
   111ba:	|      add.l 56(sp),d0
   111be:	|      move.l d0,-(sp)
   111c0:	|      jsr 15208 <trimStack>
   111c6:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111c8:	|      movea.l 56(sp),a0
   111cc:	|      move.l 24(a0),d0
   111d0:	|      move.l d0,-(sp)
   111d2:	|      pea 7 <_start+0x7>
   111d6:	|      lea 24(sp),a0
   111da:	|      move.l a0,-(sp)
   111dc:	|      jsr 14884 <getValueType>
   111e2:	|      lea 12(sp),sp
   111e6:	|      tst.w d0
   111e8:	|  /-- bne.s 111ee <builtIn_addScreenRegion+0x1b6>
   111ea:	|  |   moveq #1,d0
   111ec:	+--|-- bra.s 11242 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   111ee:	|  \-> moveq #24,d0
   111f0:	|      add.l 56(sp),d0
   111f4:	|      move.l d0,-(sp)
   111f6:	|      jsr 15208 <trimStack>
   111fc:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   111fe:	|      move.l 16(sp),d5
   11202:	|      move.l 20(sp),d4
   11206:	|      move.l 40(sp),d3
   1120a:	|      move.l 44(sp),d2
   1120e:	|      movea.l 24(sp),a1
   11212:	|      movea.l 28(sp),a0
   11216:	|      move.l 32(sp),d1
   1121a:	|      move.l 36(sp),d0
   1121e:	|      move.l d5,-(sp)
   11220:	|      move.l d4,-(sp)
   11222:	|      move.l d3,-(sp)
   11224:	|      move.l d2,-(sp)
   11226:	|      move.l a1,-(sp)
   11228:	|      move.l a0,-(sp)
   1122a:	|      move.l d1,-(sp)
   1122c:	|      move.l d0,-(sp)
   1122e:	|      jsr 15980 <addScreenRegion>
   11234:	|      lea 32(sp),sp
   11238:	|      tst.w d0
   1123a:	|  /-- beq.s 11240 <builtIn_addScreenRegion+0x208>
   1123c:	|  |   moveq #2,d0
   1123e:	+--|-- bra.s 11242 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   11240:	|  \-> moveq #1,d0

}
   11242:	\----> movem.l (sp)+,d2-d5
   11246:	       lea 32(sp),sp
   1124a:	       rts

0001124c <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   1124c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1124e:	       movea.l 12(sp),a0
   11252:	       move.l 24(a0),d0
   11256:	       move.l d0,-(sp)
   11258:	       pea 7 <_start+0x7>
   1125c:	       move.l sp,d0
   1125e:	       addq.l #8,d0
   11260:	       move.l d0,-(sp)
   11262:	       jsr 14884 <getValueType>
   11268:	       lea 12(sp),sp
   1126c:	       tst.w d0
   1126e:	   /-- bne.s 11274 <builtIn_removeScreenRegion+0x28>
   11270:	   |   moveq #1,d0
   11272:	/--|-- bra.s 11292 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   11274:	|  \-> moveq #24,d0
   11276:	|      add.l 12(sp),d0
   1127a:	|      move.l d0,-(sp)
   1127c:	|      jsr 15208 <trimStack>
   11282:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   11284:	|      move.l (sp),d0
   11286:	|      move.l d0,-(sp)
   11288:	|      jsr 15c6e <removeScreenRegion>
   1128e:	|      addq.l #4,sp
	return BR_CONTINUE;
   11290:	|      moveq #2,d0
}
   11292:	\----> addq.l #4,sp
   11294:	       rts

00011296 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11296:	jsr 15df2 <showBoxes>
	return BR_CONTINUE;
   1129c:	moveq #2,d0
}
   1129e:	rts

000112a0 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   112a0:	jsr 15af4 <killAllRegions>
	return BR_CONTINUE;
   112a6:	moveq #2,d0
}
   112a8:	rts

000112aa <builtIn_addCharacter>:

builtIn(addCharacter)
{
   112aa:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   112ae:	       movea.l 24(sp),a0
   112b2:	       move.l 24(a0),d0
   112b6:	       move.l d0,-(sp)
   112b8:	       jsr 14530 <getCostumeFromVar>
   112be:	       addq.l #4,sp
   112c0:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   112c4:	   /-- bne.s 112cc <builtIn_addCharacter+0x22>
   112c6:	   |   moveq #1,d0
   112c8:	/--|-- bra.w 113a8 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   112cc:	|  \-> moveq #24,d0
   112ce:	|      add.l 24(sp),d0
   112d2:	|      move.l d0,-(sp)
   112d4:	|      jsr 15208 <trimStack>
   112da:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112dc:	|      movea.l 24(sp),a0
   112e0:	|      move.l 24(a0),d0
   112e4:	|      move.l d0,-(sp)
   112e6:	|      pea 1 <_start+0x1>
   112ea:	|      lea 12(sp),a0
   112ee:	|      move.l a0,-(sp)
   112f0:	|      jsr 14884 <getValueType>
   112f6:	|      lea 12(sp),sp
   112fa:	|      tst.w d0
   112fc:	|  /-- bne.s 11304 <builtIn_addCharacter+0x5a>
   112fe:	|  |   moveq #1,d0
   11300:	+--|-- bra.w 113a8 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11304:	|  \-> moveq #24,d0
   11306:	|      add.l 24(sp),d0
   1130a:	|      move.l d0,-(sp)
   1130c:	|      jsr 15208 <trimStack>
   11312:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11314:	|      movea.l 24(sp),a0
   11318:	|      move.l 24(a0),d0
   1131c:	|      move.l d0,-(sp)
   1131e:	|      pea 1 <_start+0x1>
   11322:	|      moveq #16,d0
   11324:	|      add.l sp,d0
   11326:	|      move.l d0,-(sp)
   11328:	|      jsr 14884 <getValueType>
   1132e:	|      lea 12(sp),sp
   11332:	|      tst.w d0
   11334:	|  /-- bne.s 1133a <builtIn_addCharacter+0x90>
   11336:	|  |   moveq #1,d0
   11338:	+--|-- bra.s 113a8 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1133a:	|  \-> moveq #24,d0
   1133c:	|      add.l 24(sp),d0
   11340:	|      move.l d0,-(sp)
   11342:	|      jsr 15208 <trimStack>
   11348:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1134a:	|      movea.l 24(sp),a0
   1134e:	|      move.l 24(a0),d0
   11352:	|      move.l d0,-(sp)
   11354:	|      pea 7 <_start+0x7>
   11358:	|      lea 8(sp),a0
   1135c:	|      move.l a0,-(sp)
   1135e:	|      jsr 14884 <getValueType>
   11364:	|      lea 12(sp),sp
   11368:	|      tst.w d0
   1136a:	|  /-- bne.s 11370 <builtIn_addCharacter+0xc6>
   1136c:	|  |   moveq #1,d0
   1136e:	+--|-- bra.s 113a8 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11370:	|  \-> moveq #24,d0
   11372:	|      add.l 24(sp),d0
   11376:	|      move.l d0,-(sp)
   11378:	|      jsr 15208 <trimStack>
   1137e:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11380:	|      movea.l (sp),a0
   11382:	|      move.l 4(sp),d1
   11386:	|      move.l 8(sp),d0
   1138a:	|      move.l 12(sp),-(sp)
   1138e:	|      move.l a0,-(sp)
   11390:	|      move.l d1,-(sp)
   11392:	|      move.l d0,-(sp)
   11394:	|      jsr 9356 <addPerson>
   1139a:	|      lea 16(sp),sp
   1139e:	|      tst.w d0
   113a0:	|  /-- beq.s 113a6 <builtIn_addCharacter+0xfc>
   113a2:	|  |   moveq #2,d0
   113a4:	+--|-- bra.s 113a8 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   113a6:	|  \-> moveq #1,d0
}
   113a8:	\----> lea 16(sp),sp
   113ac:	       rts

000113ae <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   113ae:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113b0:	       movea.l 12(sp),a0
   113b4:	       move.l 24(a0),d0
   113b8:	       move.l d0,-(sp)
   113ba:	       pea 7 <_start+0x7>
   113be:	       move.l sp,d0
   113c0:	       addq.l #8,d0
   113c2:	       move.l d0,-(sp)
   113c4:	       jsr 14884 <getValueType>
   113ca:	       lea 12(sp),sp
   113ce:	       tst.w d0
   113d0:	   /-- bne.s 113d6 <builtIn_hideCharacter+0x28>
   113d2:	   |   moveq #1,d0
   113d4:	/--|-- bra.s 113f6 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   113d6:	|  \-> moveq #24,d0
   113d8:	|      add.l 12(sp),d0
   113dc:	|      move.l d0,-(sp)
   113de:	|      jsr 15208 <trimStack>
   113e4:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   113e6:	|      move.l (sp),d0
   113e8:	|      move.l d0,-(sp)
   113ea:	|      clr.l -(sp)
   113ec:	|      jsr bd90 <setShown>
   113f2:	|      addq.l #8,sp
	return BR_CONTINUE;
   113f4:	|      moveq #2,d0
}
   113f6:	\----> addq.l #4,sp
   113f8:	       rts

000113fa <builtIn_showCharacter>:

builtIn(showCharacter)
{
   113fa:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113fc:	       movea.l 12(sp),a0
   11400:	       move.l 24(a0),d0
   11404:	       move.l d0,-(sp)
   11406:	       pea 7 <_start+0x7>
   1140a:	       move.l sp,d0
   1140c:	       addq.l #8,d0
   1140e:	       move.l d0,-(sp)
   11410:	       jsr 14884 <getValueType>
   11416:	       lea 12(sp),sp
   1141a:	       tst.w d0
   1141c:	   /-- bne.s 11422 <builtIn_showCharacter+0x28>
   1141e:	   |   moveq #1,d0
   11420:	/--|-- bra.s 11444 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   11422:	|  \-> moveq #24,d0
   11424:	|      add.l 12(sp),d0
   11428:	|      move.l d0,-(sp)
   1142a:	|      jsr 15208 <trimStack>
   11430:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   11432:	|      move.l (sp),d0
   11434:	|      move.l d0,-(sp)
   11436:	|      pea 1 <_start+0x1>
   1143a:	|      jsr bd90 <setShown>
   11440:	|      addq.l #8,sp
	return BR_CONTINUE;
   11442:	|      moveq #2,d0
}
   11444:	\----> addq.l #4,sp
   11446:	       rts

00011448 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   11448:	jsr 6336 <killSpeechTimers>
	killMostPeople ();
   1144e:	jsr abc8 <killMostPeople>
	return BR_CONTINUE;
   11454:	moveq #2,d0
}
   11456:	rts

00011458 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   11458:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1145a:	       movea.l 16(sp),a0
   1145e:	       move.l 24(a0),d0
   11462:	       move.l d0,-(sp)
   11464:	       pea 1 <_start+0x1>
   11468:	       move.l sp,d0
   1146a:	       addq.l #8,d0
   1146c:	       move.l d0,-(sp)
   1146e:	       jsr 14884 <getValueType>
   11474:	       lea 12(sp),sp
   11478:	       tst.w d0
   1147a:	   /-- bne.s 11480 <builtIn_setCharacterDrawMode+0x28>
   1147c:	   |   moveq #1,d0
   1147e:	/--|-- bra.s 114da <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11480:	|  \-> moveq #24,d0
   11482:	|      add.l 16(sp),d0
   11486:	|      move.l d0,-(sp)
   11488:	|      jsr 15208 <trimStack>
   1148e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11490:	|      movea.l 16(sp),a0
   11494:	|      move.l 24(a0),d0
   11498:	|      move.l d0,-(sp)
   1149a:	|      pea 7 <_start+0x7>
   1149e:	|      moveq #12,d0
   114a0:	|      add.l sp,d0
   114a2:	|      move.l d0,-(sp)
   114a4:	|      jsr 14884 <getValueType>
   114aa:	|      lea 12(sp),sp
   114ae:	|      tst.w d0
   114b0:	|  /-- bne.s 114b6 <builtIn_setCharacterDrawMode+0x5e>
   114b2:	|  |   moveq #1,d0
   114b4:	+--|-- bra.s 114da <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   114b6:	|  \-> moveq #24,d0
   114b8:	|      add.l 16(sp),d0
   114bc:	|      move.l d0,-(sp)
   114be:	|      jsr 15208 <trimStack>
   114c4:	|      addq.l #4,sp
	setDrawMode (di, obj);
   114c6:	|      move.l 4(sp),d1
   114ca:	|      move.l (sp),d0
   114cc:	|      move.l d1,-(sp)
   114ce:	|      move.l d0,-(sp)
   114d0:	|      jsr b6ce <setDrawMode>
   114d6:	|      addq.l #8,sp
	return BR_CONTINUE;
   114d8:	|      moveq #2,d0
}
   114da:	\----> addq.l #8,sp
   114dc:	       rts

000114de <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   114de:	pea 19b18 <graphics.c.1c13408a+0x4>
   114e4:	jsr 1729e <KPrintF>
   114ea:	addq.l #4,sp
	return BR_CONTINUE;
   114ec:	moveq #2,d0
}
   114ee:	rts

000114f0 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   114f0:	pea 19b4b <graphics.c.1c13408a+0x37>
   114f6:	jsr 1729e <KPrintF>
   114fc:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   114fe:	moveq #2,d0
}
   11500:	rts

00011502 <builtIn_setScale>:

builtIn(setScale)
{
   11502:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11504:	       movea.l 16(sp),a0
   11508:	       move.l 24(a0),d0
   1150c:	       move.l d0,-(sp)
   1150e:	       pea 1 <_start+0x1>
   11512:	       move.l sp,d0
   11514:	       addq.l #8,d0
   11516:	       move.l d0,-(sp)
   11518:	       jsr 14884 <getValueType>
   1151e:	       lea 12(sp),sp
   11522:	       tst.w d0
   11524:	   /-- bne.s 1152a <builtIn_setScale+0x28>
   11526:	   |   moveq #1,d0
   11528:	/--|-- bra.s 1158c <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1152a:	|  \-> moveq #24,d0
   1152c:	|      add.l 16(sp),d0
   11530:	|      move.l d0,-(sp)
   11532:	|      jsr 15208 <trimStack>
   11538:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1153a:	|      movea.l 16(sp),a0
   1153e:	|      move.l 24(a0),d0
   11542:	|      move.l d0,-(sp)
   11544:	|      pea 1 <_start+0x1>
   11548:	|      moveq #12,d0
   1154a:	|      add.l sp,d0
   1154c:	|      move.l d0,-(sp)
   1154e:	|      jsr 14884 <getValueType>
   11554:	|      lea 12(sp),sp
   11558:	|      tst.w d0
   1155a:	|  /-- bne.s 11560 <builtIn_setScale+0x5e>
   1155c:	|  |   moveq #1,d0
   1155e:	+--|-- bra.s 1158c <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11560:	|  \-> moveq #24,d0
   11562:	|      add.l 16(sp),d0
   11566:	|      move.l d0,-(sp)
   11568:	|      jsr 15208 <trimStack>
   1156e:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   11570:	|      move.l (sp),d0
   11572:	|      move.l d0,d0
   11574:	|      movea.w d0,a1
   11576:	|      move.l 4(sp),d0
   1157a:	|      move.l d0,d0
   1157c:	|      movea.w d0,a0
   1157e:	|      move.l a1,-(sp)
   11580:	|      move.l a0,-(sp)
   11582:	|      jsr bd68 <setScale>
   11588:	|      addq.l #8,sp
	return BR_CONTINUE;
   1158a:	|      moveq #2,d0
}
   1158c:	\----> addq.l #8,sp
   1158e:	       rts

00011590 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11590:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11592:	       movea.l 12(sp),a0
   11596:	       move.l 24(a0),d0
   1159a:	       move.l d0,-(sp)
   1159c:	       pea 7 <_start+0x7>
   115a0:	       move.l sp,d0
   115a2:	       addq.l #8,d0
   115a4:	       move.l d0,-(sp)
   115a6:	       jsr 14884 <getValueType>
   115ac:	       lea 12(sp),sp
   115b0:	       tst.w d0
   115b2:	   /-- bne.s 115b8 <builtIn_stopCharacter+0x28>
   115b4:	   |   moveq #1,d0
   115b6:	/--|-- bra.s 115f0 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   115b8:	|  \-> moveq #24,d0
   115ba:	|      add.l 12(sp),d0
   115be:	|      move.l d0,-(sp)
   115c0:	|      jsr 15208 <trimStack>
   115c6:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   115c8:	|      move.l (sp),d0
   115ca:	|      move.l d0,-(sp)
   115cc:	|      jsr be9c <stopPerson>
   115d2:	|      addq.l #4,sp
   115d4:	|      movea.w d0,a0
   115d6:	|      moveq #28,d0
   115d8:	|      add.l 12(sp),d0
   115dc:	|      move.l a0,-(sp)
   115de:	|      pea 1 <_start+0x1>
   115e2:	|      move.l d0,-(sp)
   115e4:	|      jsr 15176 <setVariable>
   115ea:	|      lea 12(sp),sp
	return BR_CONTINUE;
   115ee:	|      moveq #2,d0
}
   115f0:	\----> addq.l #4,sp
   115f2:	       rts

000115f4 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   115f4:	pea 19b85 <graphics.c.1c13408a+0x71>
   115fa:	jsr 1729e <KPrintF>
   11600:	addq.l #4,sp
	return BR_CONTINUE;
   11602:	moveq #2,d0
}
   11604:	rts

00011606 <builtIn_animate>:

builtIn(animate)
{
   11606:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11608:	       movea.l 16(sp),a0
   1160c:	       move.l 24(a0),d0
   11610:	       move.l d0,-(sp)
   11612:	       jsr 14d5c <getAnimationFromVar>
   11618:	       addq.l #4,sp
   1161a:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1161e:	   /-- bne.s 11624 <builtIn_animate+0x1e>
   11620:	   |   moveq #1,d0
   11622:	/--|-- bra.s 116a2 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11624:	|  \-> moveq #24,d0
   11626:	|      add.l 16(sp),d0
   1162a:	|      move.l d0,-(sp)
   1162c:	|      jsr 15208 <trimStack>
   11632:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11634:	|      movea.l 16(sp),a0
   11638:	|      move.l 24(a0),d0
   1163c:	|      move.l d0,-(sp)
   1163e:	|      pea 7 <_start+0x7>
   11642:	|      move.l sp,d0
   11644:	|      addq.l #8,d0
   11646:	|      move.l d0,-(sp)
   11648:	|      jsr 14884 <getValueType>
   1164e:	|      lea 12(sp),sp
   11652:	|      tst.w d0
   11654:	|  /-- bne.s 1165a <builtIn_animate+0x54>
   11656:	|  |   moveq #1,d0
   11658:	+--|-- bra.s 116a2 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1165a:	|  \-> moveq #24,d0
   1165c:	|      add.l 16(sp),d0
   11660:	|      move.l d0,-(sp)
   11662:	|      jsr 15208 <trimStack>
   11668:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1166a:	|      move.l (sp),d0
   1166c:	|      move.l 4(sp),-(sp)
   11670:	|      move.l d0,-(sp)
   11672:	|      jsr 95cc <animatePerson>
   11678:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   1167a:	|      move.l 4(sp),-(sp)
   1167e:	|      jsr bef0 <timeForAnim>
   11684:	|      addq.l #4,sp
   11686:	|      move.l d0,d1
   11688:	|      moveq #28,d0
   1168a:	|      add.l 16(sp),d0
   1168e:	|      move.l d1,-(sp)
   11690:	|      pea 1 <_start+0x1>
   11694:	|      move.l d0,-(sp)
   11696:	|      jsr 15176 <setVariable>
   1169c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   116a0:	|      moveq #2,d0
}
   116a2:	\----> addq.l #8,sp
   116a4:	       rts

000116a6 <builtIn_setCostume>:

builtIn(setCostume)
{
   116a6:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   116a8:	       movea.l 16(sp),a0
   116ac:	       move.l 24(a0),d0
   116b0:	       move.l d0,-(sp)
   116b2:	       jsr 14530 <getCostumeFromVar>
   116b8:	       addq.l #4,sp
   116ba:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   116be:	   /-- bne.s 116c4 <builtIn_setCostume+0x1e>
   116c0:	   |   moveq #1,d0
   116c2:	/--|-- bra.s 1171c <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   116c4:	|  \-> moveq #24,d0
   116c6:	|      add.l 16(sp),d0
   116ca:	|      move.l d0,-(sp)
   116cc:	|      jsr 15208 <trimStack>
   116d2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116d4:	|      movea.l 16(sp),a0
   116d8:	|      move.l 24(a0),d0
   116dc:	|      move.l d0,-(sp)
   116de:	|      pea 7 <_start+0x7>
   116e2:	|      move.l sp,d0
   116e4:	|      addq.l #8,d0
   116e6:	|      move.l d0,-(sp)
   116e8:	|      jsr 14884 <getValueType>
   116ee:	|      lea 12(sp),sp
   116f2:	|      tst.w d0
   116f4:	|  /-- bne.s 116fa <builtIn_setCostume+0x54>
   116f6:	|  |   moveq #1,d0
   116f8:	+--|-- bra.s 1171c <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   116fa:	|  \-> moveq #24,d0
   116fc:	|      add.l 16(sp),d0
   11700:	|      move.l d0,-(sp)
   11702:	|      jsr 15208 <trimStack>
   11708:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   1170a:	|      move.l (sp),d0
   1170c:	|      move.l 4(sp),-(sp)
   11710:	|      move.l d0,-(sp)
   11712:	|      jsr 9616 <animatePersonUsingPersona>
   11718:	|      addq.l #8,sp
	return BR_CONTINUE;
   1171a:	|      moveq #2,d0
}
   1171c:	\----> addq.l #8,sp
   1171e:	       rts

00011720 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11720:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11722:	       movea.l 16(sp),a0
   11726:	       move.l 24(a0),d0
   1172a:	       move.l d0,-(sp)
   1172c:	       pea 1 <_start+0x1>
   11730:	       move.l sp,d0
   11732:	       addq.l #8,d0
   11734:	       move.l d0,-(sp)
   11736:	       jsr 14884 <getValueType>
   1173c:	       lea 12(sp),sp
   11740:	       tst.w d0
   11742:	   /-- bne.s 11748 <builtIn_floatCharacter+0x28>
   11744:	   |   moveq #1,d0
   11746:	/--|-- bra.s 117bc <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11748:	|  \-> moveq #24,d0
   1174a:	|      add.l 16(sp),d0
   1174e:	|      move.l d0,-(sp)
   11750:	|      jsr 15208 <trimStack>
   11756:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11758:	|      movea.l 16(sp),a0
   1175c:	|      move.l 24(a0),d0
   11760:	|      move.l d0,-(sp)
   11762:	|      pea 7 <_start+0x7>
   11766:	|      moveq #12,d0
   11768:	|      add.l sp,d0
   1176a:	|      move.l d0,-(sp)
   1176c:	|      jsr 14884 <getValueType>
   11772:	|      lea 12(sp),sp
   11776:	|      tst.w d0
   11778:	|  /-- bne.s 1177e <builtIn_floatCharacter+0x5e>
   1177a:	|  |   moveq #1,d0
   1177c:	+--|-- bra.s 117bc <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1177e:	|  \-> moveq #24,d0
   11780:	|      add.l 16(sp),d0
   11784:	|      move.l d0,-(sp)
   11786:	|      jsr 15208 <trimStack>
   1178c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   1178e:	|      move.l 4(sp),d1
   11792:	|      move.l (sp),d0
   11794:	|      move.l d1,-(sp)
   11796:	|      move.l d0,-(sp)
   11798:	|      jsr a78a <floatCharacter>
   1179e:	|      addq.l #8,sp
   117a0:	|      movea.w d0,a0
   117a2:	|      moveq #28,d0
   117a4:	|      add.l 16(sp),d0
   117a8:	|      move.l a0,-(sp)
   117aa:	|      pea 1 <_start+0x1>
   117ae:	|      move.l d0,-(sp)
   117b0:	|      jsr 15176 <setVariable>
   117b6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   117ba:	|      moveq #2,d0
}
   117bc:	\----> addq.l #8,sp
   117be:	       rts

000117c0 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   117c0:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117c2:	       movea.l 16(sp),a0
   117c6:	       move.l 24(a0),d0
   117ca:	       move.l d0,-(sp)
   117cc:	       pea 1 <_start+0x1>
   117d0:	       move.l sp,d0
   117d2:	       addq.l #8,d0
   117d4:	       move.l d0,-(sp)
   117d6:	       jsr 14884 <getValueType>
   117dc:	       lea 12(sp),sp
   117e0:	       tst.w d0
   117e2:	   /-- bne.s 117e8 <builtIn_setCharacterWalkSpeed+0x28>
   117e4:	   |   moveq #1,d0
   117e6:	/--|-- bra.s 1185c <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   117e8:	|  \-> moveq #24,d0
   117ea:	|      add.l 16(sp),d0
   117ee:	|      move.l d0,-(sp)
   117f0:	|      jsr 15208 <trimStack>
   117f6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117f8:	|      movea.l 16(sp),a0
   117fc:	|      move.l 24(a0),d0
   11800:	|      move.l d0,-(sp)
   11802:	|      pea 7 <_start+0x7>
   11806:	|      moveq #12,d0
   11808:	|      add.l sp,d0
   1180a:	|      move.l d0,-(sp)
   1180c:	|      jsr 14884 <getValueType>
   11812:	|      lea 12(sp),sp
   11816:	|      tst.w d0
   11818:	|  /-- bne.s 1181e <builtIn_setCharacterWalkSpeed+0x5e>
   1181a:	|  |   moveq #1,d0
   1181c:	+--|-- bra.s 1185c <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1181e:	|  \-> moveq #24,d0
   11820:	|      add.l 16(sp),d0
   11824:	|      move.l d0,-(sp)
   11826:	|      jsr 15208 <trimStack>
   1182c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   1182e:	|      move.l 4(sp),d1
   11832:	|      move.l (sp),d0
   11834:	|      move.l d1,-(sp)
   11836:	|      move.l d0,-(sp)
   11838:	|      jsr bd04 <setCharacterWalkSpeed>
   1183e:	|      addq.l #8,sp
   11840:	|      movea.w d0,a0
   11842:	|      moveq #28,d0
   11844:	|      add.l 16(sp),d0
   11848:	|      move.l a0,-(sp)
   1184a:	|      pea 1 <_start+0x1>
   1184e:	|      move.l d0,-(sp)
   11850:	|      jsr 15176 <setVariable>
   11856:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1185a:	|      moveq #2,d0
}
   1185c:	\----> addq.l #8,sp
   1185e:	       rts

00011860 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11860:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11862:	       movea.l 16(sp),a0
   11866:	       move.l 24(a0),d0
   1186a:	       move.l d0,-(sp)
   1186c:	       pea 1 <_start+0x1>
   11870:	       move.l sp,d0
   11872:	       addq.l #8,d0
   11874:	       move.l d0,-(sp)
   11876:	       jsr 14884 <getValueType>
   1187c:	       lea 12(sp),sp
   11880:	       tst.w d0
   11882:	   /-- bne.s 11888 <builtIn_turnCharacter+0x28>
   11884:	   |   moveq #1,d0
   11886:	/--|-- bra.s 118fc <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11888:	|  \-> moveq #24,d0
   1188a:	|      add.l 16(sp),d0
   1188e:	|      move.l d0,-(sp)
   11890:	|      jsr 15208 <trimStack>
   11896:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11898:	|      movea.l 16(sp),a0
   1189c:	|      move.l 24(a0),d0
   118a0:	|      move.l d0,-(sp)
   118a2:	|      pea 7 <_start+0x7>
   118a6:	|      moveq #12,d0
   118a8:	|      add.l sp,d0
   118aa:	|      move.l d0,-(sp)
   118ac:	|      jsr 14884 <getValueType>
   118b2:	|      lea 12(sp),sp
   118b6:	|      tst.w d0
   118b8:	|  /-- bne.s 118be <builtIn_turnCharacter+0x5e>
   118ba:	|  |   moveq #1,d0
   118bc:	+--|-- bra.s 118fc <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   118be:	|  \-> moveq #24,d0
   118c0:	|      add.l 16(sp),d0
   118c4:	|      move.l d0,-(sp)
   118c6:	|      jsr 15208 <trimStack>
   118cc:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   118ce:	|      move.l (sp),d1
   118d0:	|      move.l 4(sp),d0
   118d4:	|      move.l d1,-(sp)
   118d6:	|      move.l d0,-(sp)
   118d8:	|      jsr bfa8 <turnPersonToFace>
   118de:	|      addq.l #8,sp
   118e0:	|      movea.w d0,a0
   118e2:	|      moveq #28,d0
   118e4:	|      add.l 16(sp),d0
   118e8:	|      move.l a0,-(sp)
   118ea:	|      pea 1 <_start+0x1>
   118ee:	|      move.l d0,-(sp)
   118f0:	|      jsr 15176 <setVariable>
   118f6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   118fa:	|      moveq #2,d0
}
   118fc:	\----> addq.l #8,sp
   118fe:	       rts

00011900 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11900:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11902:	       movea.l 16(sp),a0
   11906:	       move.l 24(a0),d0
   1190a:	       move.l d0,-(sp)
   1190c:	       pea 1 <_start+0x1>
   11910:	       move.l sp,d0
   11912:	       addq.l #8,d0
   11914:	       move.l d0,-(sp)
   11916:	       jsr 14884 <getValueType>
   1191c:	       lea 12(sp),sp
   11920:	       tst.w d0
   11922:	   /-- bne.s 11928 <builtIn_setCharacterExtra+0x28>
   11924:	   |   moveq #1,d0
   11926:	/--|-- bra.s 1199c <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11928:	|  \-> moveq #24,d0
   1192a:	|      add.l 16(sp),d0
   1192e:	|      move.l d0,-(sp)
   11930:	|      jsr 15208 <trimStack>
   11936:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11938:	|      movea.l 16(sp),a0
   1193c:	|      move.l 24(a0),d0
   11940:	|      move.l d0,-(sp)
   11942:	|      pea 7 <_start+0x7>
   11946:	|      moveq #12,d0
   11948:	|      add.l sp,d0
   1194a:	|      move.l d0,-(sp)
   1194c:	|      jsr 14884 <getValueType>
   11952:	|      lea 12(sp),sp
   11956:	|      tst.w d0
   11958:	|  /-- bne.s 1195e <builtIn_setCharacterExtra+0x5e>
   1195a:	|  |   moveq #1,d0
   1195c:	+--|-- bra.s 1199c <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   1195e:	|  \-> moveq #24,d0
   11960:	|      add.l 16(sp),d0
   11964:	|      move.l d0,-(sp)
   11966:	|      jsr 15208 <trimStack>
   1196c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   1196e:	|      move.l (sp),d1
   11970:	|      move.l 4(sp),d0
   11974:	|      move.l d1,-(sp)
   11976:	|      move.l d0,-(sp)
   11978:	|      jsr bd32 <setPersonExtra>
   1197e:	|      addq.l #8,sp
   11980:	|      movea.w d0,a0
   11982:	|      moveq #28,d0
   11984:	|      add.l 16(sp),d0
   11988:	|      move.l a0,-(sp)
   1198a:	|      pea 1 <_start+0x1>
   1198e:	|      move.l d0,-(sp)
   11990:	|      jsr 15176 <setVariable>
   11996:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1199a:	|      moveq #2,d0
}
   1199c:	\----> addq.l #8,sp
   1199e:	       rts

000119a0 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   119a0:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119a2:	       movea.l 12(sp),a0
   119a6:	       move.l 24(a0),d0
   119aa:	       move.l d0,-(sp)
   119ac:	       pea 7 <_start+0x7>
   119b0:	       move.l sp,d0
   119b2:	       addq.l #8,d0
   119b4:	       move.l d0,-(sp)
   119b6:	       jsr 14884 <getValueType>
   119bc:	       lea 12(sp),sp
   119c0:	       tst.w d0
   119c2:	   /-- bne.s 119c8 <builtIn_removeCharacter+0x28>
   119c4:	   |   moveq #1,d0
   119c6:	/--|-- bra.s 119e6 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   119c8:	|  \-> moveq #24,d0
   119ca:	|      add.l 12(sp),d0
   119ce:	|      move.l d0,-(sp)
   119d0:	|      jsr 15208 <trimStack>
   119d6:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   119d8:	|      move.l (sp),d0
   119da:	|      move.l d0,-(sp)
   119dc:	|      jsr af32 <removeOneCharacter>
   119e2:	|      addq.l #4,sp
	return BR_CONTINUE;
   119e4:	|      moveq #2,d0
}
   119e6:	\----> addq.l #4,sp
   119e8:	       rts

000119ea <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   119ea:	                lea -28(sp),sp
   119ee:	                move.l d2,-(sp)
   119f0:	                move.l 44(sp),d1
   119f4:	                move.l 48(sp),d0
   119f8:	                move.w d1,d1
   119fa:	                move.w d1,6(sp)
   119fe:	                move.w d0,d0
   11a00:	                move.w d0,4(sp)
	switch (numParams) {
   11a04:	                moveq #2,d0
   11a06:	                cmp.l 36(sp),d0
   11a0a:	      /-------- beq.w 11b4c <moveChr+0x162>
   11a0e:	      |         moveq #3,d0
   11a10:	      |         cmp.l 36(sp),d0
   11a14:	/-----|-------- bne.w 11c80 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a18:	|     |         movea.l 40(sp),a0
   11a1c:	|     |         move.l 24(a0),d0
   11a20:	|     |         move.l d0,-(sp)
   11a22:	|     |         pea 1 <_start+0x1>
   11a26:	|     |         lea 20(sp),a0
   11a2a:	|     |         move.l a0,-(sp)
   11a2c:	|     |         jsr 14884 <getValueType>
   11a32:	|     |         lea 12(sp),sp
   11a36:	|     |         tst.w d0
   11a38:	|     |     /-- bne.s 11a40 <moveChr+0x56>
   11a3a:	|     |     |   moveq #1,d0
   11a3c:	|  /--|-----|-- bra.w 11c90 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a40:	|  |  |     \-> moveq #24,d0
   11a42:	|  |  |         add.l 40(sp),d0
   11a46:	|  |  |         move.l d0,-(sp)
   11a48:	|  |  |         jsr 15208 <trimStack>
   11a4e:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a50:	|  |  |         movea.l 40(sp),a0
   11a54:	|  |  |         move.l 24(a0),d0
   11a58:	|  |  |         move.l d0,-(sp)
   11a5a:	|  |  |         pea 1 <_start+0x1>
   11a5e:	|  |  |         lea 24(sp),a0
   11a62:	|  |  |         move.l a0,-(sp)
   11a64:	|  |  |         jsr 14884 <getValueType>
   11a6a:	|  |  |         lea 12(sp),sp
   11a6e:	|  |  |         tst.w d0
   11a70:	|  |  |     /-- bne.s 11a78 <moveChr+0x8e>
   11a72:	|  |  |     |   moveq #1,d0
   11a74:	|  +--|-----|-- bra.w 11c90 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a78:	|  |  |     \-> moveq #24,d0
   11a7a:	|  |  |         add.l 40(sp),d0
   11a7e:	|  |  |         move.l d0,-(sp)
   11a80:	|  |  |         jsr 15208 <trimStack>
   11a86:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a88:	|  |  |         movea.l 40(sp),a0
   11a8c:	|  |  |         move.l 24(a0),d0
   11a90:	|  |  |         move.l d0,-(sp)
   11a92:	|  |  |         pea 7 <_start+0x7>
   11a96:	|  |  |         lea 16(sp),a0
   11a9a:	|  |  |         move.l a0,-(sp)
   11a9c:	|  |  |         jsr 14884 <getValueType>
   11aa2:	|  |  |         lea 12(sp),sp
   11aa6:	|  |  |         tst.w d0
   11aa8:	|  |  |     /-- bne.s 11ab0 <moveChr+0xc6>
   11aaa:	|  |  |     |   moveq #1,d0
   11aac:	|  +--|-----|-- bra.w 11c90 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ab0:	|  |  |     \-> moveq #24,d0
   11ab2:	|  |  |         add.l 40(sp),d0
   11ab6:	|  |  |         move.l d0,-(sp)
   11ab8:	|  |  |         jsr 15208 <trimStack>
   11abe:	|  |  |         addq.l #4,sp

			if (force) {
   11ac0:	|  |  |         tst.w 6(sp)
   11ac4:	|  |  |     /-- beq.s 11af4 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11ac6:	|  |  |     |   movea.l 8(sp),a0
   11aca:	|  |  |     |   move.l 12(sp),d1
   11ace:	|  |  |     |   move.l 16(sp),d0
   11ad2:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb4ed4>
   11ad6:	|  |  |     |   move.l 44(sp),-(sp)
   11ada:	|  |  |     |   move.l a0,-(sp)
   11adc:	|  |  |     |   move.l d1,-(sp)
   11ade:	|  |  |     |   move.l d0,-(sp)
   11ae0:	|  |  |     |   jsr a7ae <forceWalkingPerson>
   11ae6:	|  |  |     |   lea 20(sp),sp
   11aea:	|  |  |     |   tst.w d0
   11aec:	|  |  |  /--|-- beq.s 11b46 <moveChr+0x15c>
   11aee:	|  |  |  |  |   moveq #3,d0
   11af0:	|  +--|--|--|-- bra.w 11c90 <moveChr+0x2a6>
			} else if (immediate) {
   11af4:	|  |  |  |  \-> tst.w 4(sp)
   11af8:	|  |  |  |  /-- beq.s 11b18 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11afa:	|  |  |  |  |   movea.l 8(sp),a0
   11afe:	|  |  |  |  |   move.l 12(sp),d1
   11b02:	|  |  |  |  |   move.l 16(sp),d0
   11b06:	|  |  |  |  |   move.l a0,-(sp)
   11b08:	|  |  |  |  |   move.l d1,-(sp)
   11b0a:	|  |  |  |  |   move.l d0,-(sp)
   11b0c:	|  |  |  |  |   jsr aab6 <jumpPerson>
   11b12:	|  |  |  |  |   lea 12(sp),sp
   11b16:	|  |  |  +--|-- bra.s 11b46 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11b18:	|  |  |  |  \-> movea.l 8(sp),a0
   11b1c:	|  |  |  |      move.l 12(sp),d1
   11b20:	|  |  |  |      move.l 16(sp),d0
   11b24:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb4ed4>
   11b28:	|  |  |  |      move.l 44(sp),-(sp)
   11b2c:	|  |  |  |      move.l a0,-(sp)
   11b2e:	|  |  |  |      move.l d1,-(sp)
   11b30:	|  |  |  |      move.l d0,-(sp)
   11b32:	|  |  |  |      jsr ac86 <makeWalkingPerson>
   11b38:	|  |  |  |      lea 20(sp),sp
   11b3c:	|  |  |  |      tst.w d0
   11b3e:	|  |  |  +----- beq.s 11b46 <moveChr+0x15c>
   11b40:	|  |  |  |      moveq #3,d0
   11b42:	|  +--|--|----- bra.w 11c90 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11b46:	|  |  |  \----> moveq #2,d0
   11b48:	|  +--|-------- bra.w 11c90 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b4c:	|  |  \-------> movea.l 40(sp),a0
   11b50:	|  |            move.l 24(a0),d0
   11b54:	|  |            move.l d0,-(sp)
   11b56:	|  |            pea 7 <_start+0x7>
   11b5a:	|  |            moveq #32,d0
   11b5c:	|  |            add.l sp,d0
   11b5e:	|  |            move.l d0,-(sp)
   11b60:	|  |            jsr 14884 <getValueType>
   11b66:	|  |            lea 12(sp),sp
   11b6a:	|  |            tst.w d0
   11b6c:	|  |        /-- bne.s 11b74 <moveChr+0x18a>
   11b6e:	|  |        |   moveq #1,d0
   11b70:	|  +--------|-- bra.w 11c90 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11b74:	|  |        \-> moveq #24,d0
   11b76:	|  |            add.l 40(sp),d0
   11b7a:	|  |            move.l d0,-(sp)
   11b7c:	|  |            jsr 15208 <trimStack>
   11b82:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b84:	|  |            movea.l 40(sp),a0
   11b88:	|  |            move.l 24(a0),d0
   11b8c:	|  |            move.l d0,-(sp)
   11b8e:	|  |            pea 7 <_start+0x7>
   11b92:	|  |            lea 28(sp),a0
   11b96:	|  |            move.l a0,-(sp)
   11b98:	|  |            jsr 14884 <getValueType>
   11b9e:	|  |            lea 12(sp),sp
   11ba2:	|  |            tst.w d0
   11ba4:	|  |        /-- bne.s 11bac <moveChr+0x1c2>
   11ba6:	|  |        |   moveq #1,d0
   11ba8:	|  +--------|-- bra.w 11c90 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11bac:	|  |        \-> moveq #24,d0
   11bae:	|  |            add.l 40(sp),d0
   11bb2:	|  |            move.l d0,-(sp)
   11bb4:	|  |            jsr 15208 <trimStack>
   11bba:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11bbc:	|  |            move.l 24(sp),d0
   11bc0:	|  |            move.l d0,-(sp)
   11bc2:	|  |            jsr 15ac6 <getRegionForObject>
   11bc8:	|  |            addq.l #4,sp
   11bca:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11bce:	|  |        /-- bne.s 11bd6 <moveChr+0x1ec>
   11bd0:	|  |        |   moveq #2,d0
   11bd2:	|  +--------|-- bra.w 11c90 <moveChr+0x2a6>

			if (force)
   11bd6:	|  |        \-> tst.w 6(sp)
   11bda:	|  |        /-- beq.s 11c16 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11bdc:	|  |        |   movea.l 28(sp),a0
   11be0:	|  |        |   move.l 24(a0),d2
   11be4:	|  |        |   movea.l 20(sp),a1
   11be8:	|  |        |   movea.l 28(sp),a0
   11bec:	|  |        |   move.l 20(a0),d1
   11bf0:	|  |        |   movea.l 28(sp),a0
   11bf4:	|  |        |   move.l 16(a0),d0
   11bf8:	|  |        |   move.l d2,-(sp)
   11bfa:	|  |        |   move.l 44(sp),-(sp)
   11bfe:	|  |        |   move.l a1,-(sp)
   11c00:	|  |        |   move.l d1,-(sp)
   11c02:	|  |        |   move.l d0,-(sp)
   11c04:	|  |        |   jsr a7ae <forceWalkingPerson>
   11c0a:	|  |        |   lea 20(sp),sp
   11c0e:	|  |        |   tst.w d0
   11c10:	|  |     /--|-- beq.s 11c7c <moveChr+0x292>
   11c12:	|  |     |  |   moveq #3,d0
   11c14:	|  +-----|--|-- bra.s 11c90 <moveChr+0x2a6>
			}
			else if (immediate)
   11c16:	|  |     |  \-> tst.w 4(sp)
   11c1a:	|  |     |  /-- beq.s 11c42 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11c1c:	|  |     |  |   movea.l 20(sp),a1
   11c20:	|  |     |  |   movea.l 28(sp),a0
   11c24:	|  |     |  |   move.l 20(a0),d1
   11c28:	|  |     |  |   movea.l 28(sp),a0
   11c2c:	|  |     |  |   move.l 16(a0),d0
   11c30:	|  |     |  |   move.l a1,-(sp)
   11c32:	|  |     |  |   move.l d1,-(sp)
   11c34:	|  |     |  |   move.l d0,-(sp)
   11c36:	|  |     |  |   jsr aab6 <jumpPerson>
   11c3c:	|  |     |  |   lea 12(sp),sp
   11c40:	|  |     +--|-- bra.s 11c7c <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11c42:	|  |     |  \-> movea.l 28(sp),a0
   11c46:	|  |     |      move.l 24(a0),d2
   11c4a:	|  |     |      movea.l 20(sp),a1
   11c4e:	|  |     |      movea.l 28(sp),a0
   11c52:	|  |     |      move.l 20(a0),d1
   11c56:	|  |     |      movea.l 28(sp),a0
   11c5a:	|  |     |      move.l 16(a0),d0
   11c5e:	|  |     |      move.l d2,-(sp)
   11c60:	|  |     |      move.l 44(sp),-(sp)
   11c64:	|  |     |      move.l a1,-(sp)
   11c66:	|  |     |      move.l d1,-(sp)
   11c68:	|  |     |      move.l d0,-(sp)
   11c6a:	|  |     |      jsr ac86 <makeWalkingPerson>
   11c70:	|  |     |      lea 20(sp),sp
   11c74:	|  |     |      tst.w d0
   11c76:	|  |     +----- beq.s 11c7c <moveChr+0x292>
   11c78:	|  |     |      moveq #3,d0
   11c7a:	|  +-----|----- bra.s 11c90 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11c7c:	|  |     \----> moveq #2,d0
   11c7e:	|  +----------- bra.s 11c90 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11c80:	\--|----------> pea 19ba3 <graphics.c.1c13408a+0x8f>
   11c86:	   |            jsr 1729e <KPrintF>
   11c8c:	   |            addq.l #4,sp
			return BR_ERROR;
   11c8e:	   |            moveq #1,d0
	}
}
   11c90:	   \----------> move.l (sp)+,d2
   11c92:	                lea 28(sp),sp
   11c96:	                rts

00011c98 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11c98:	clr.l -(sp)
   11c9a:	clr.l -(sp)
   11c9c:	move.l 16(sp),-(sp)
   11ca0:	move.l 16(sp),-(sp)
   11ca4:	jsr 119ea <moveChr>
   11caa:	lea 16(sp),sp
}
   11cae:	rts

00011cb0 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11cb0:	clr.l -(sp)
   11cb2:	pea 1 <_start+0x1>
   11cb6:	move.l 16(sp),-(sp)
   11cba:	move.l 16(sp),-(sp)
   11cbe:	jsr 119ea <moveChr>
   11cc4:	lea 16(sp),sp
}
   11cc8:	rts

00011cca <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11cca:	pea 1 <_start+0x1>
   11cce:	clr.l -(sp)
   11cd0:	move.l 16(sp),-(sp)
   11cd4:	move.l 16(sp),-(sp)
   11cd8:	jsr 119ea <moveChr>
   11cde:	lea 16(sp),sp
}
   11ce2:	rts

00011ce4 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11ce4:	jsr 7a30 <clearStatusBar>
	return BR_CONTINUE;
   11cea:	moveq #2,d0
}
   11cec:	rts

00011cee <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11cee:	jsr 7ad8 <killLastStatus>
	return BR_CONTINUE;
   11cf4:	moveq #2,d0
}
   11cf6:	rts

00011cf8 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11cf8:	jsr 79c6 <addStatusBar>
	return BR_CONTINUE;
   11cfe:	moveq #2,d0
}
   11d00:	rts

00011d02 <builtIn_statusText>:

builtIn(statusText)
{
   11d02:	       subq.l #8,sp
   11d04:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11d06:	       movea.l 20(sp),a0
   11d0a:	       move.l 24(a0),d0
   11d0e:	       move.l d0,-(sp)
   11d10:	       jsr 14e5a <getTextFromAnyVar>
   11d16:	       addq.l #4,sp
   11d18:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11d1c:	   /-- bne.s 11d22 <builtIn_statusText+0x20>
   11d1e:	   |   moveq #1,d0
   11d20:	/--|-- bra.s 11d56 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11d22:	|  \-> moveq #24,d0
   11d24:	|      add.l 20(sp),d0
   11d28:	|      move.l d0,-(sp)
   11d2a:	|      jsr 15208 <trimStack>
   11d30:	|      addq.l #4,sp
	setStatusBar(newText);
   11d32:	|      move.l 8(sp),-(sp)
   11d36:	|      jsr 7d58 <setStatusBar>
   11d3c:	|      addq.l #4,sp
	FreeVec(newText);
   11d3e:	|      move.l 8(sp),4(sp)
   11d44:	|      move.l 1c9c4 <SysBase>,d0
   11d4a:	|      movea.l d0,a6
   11d4c:	|      movea.l 4(sp),a1
   11d50:	|      jsr -690(a6)
	return BR_CONTINUE;
   11d54:	|      moveq #2,d0
}
   11d56:	\----> movea.l (sp)+,a6
   11d58:	       addq.l #8,sp
   11d5a:	       rts

00011d5c <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11d5c:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d5e:	       movea.l 12(sp),a0
   11d62:	       move.l 24(a0),d0
   11d66:	       move.l d0,-(sp)
   11d68:	       pea 1 <_start+0x1>
   11d6c:	       move.l sp,d0
   11d6e:	       addq.l #8,d0
   11d70:	       move.l d0,-(sp)
   11d72:	       jsr 14884 <getValueType>
   11d78:	       lea 12(sp),sp
   11d7c:	       tst.w d0
   11d7e:	   /-- bne.s 11d84 <builtIn_lightStatus+0x28>
   11d80:	   |   moveq #1,d0
   11d82:	/--|-- bra.s 11da2 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11d84:	|  \-> moveq #24,d0
   11d86:	|      add.l 12(sp),d0
   11d8a:	|      move.l d0,-(sp)
   11d8c:	|      jsr 15208 <trimStack>
   11d92:	|      addq.l #4,sp
	setLitStatus (val);
   11d94:	|      move.l (sp),d0
   11d96:	|      move.l d0,-(sp)
   11d98:	|      jsr 7d48 <setLitStatus>
   11d9e:	|      addq.l #4,sp
	return BR_CONTINUE;
   11da0:	|      moveq #2,d0
}
   11da2:	\----> addq.l #4,sp
   11da4:	       rts

00011da6 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11da6:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11da8:	       movea.l 16(sp),a0
   11dac:	       move.l 24(a0),d0
   11db0:	       move.l d0,-(sp)
   11db2:	       pea 1 <_start+0x1>
   11db6:	       move.l sp,d0
   11db8:	       addq.l #8,d0
   11dba:	       move.l d0,-(sp)
   11dbc:	       jsr 14884 <getValueType>
   11dc2:	       lea 12(sp),sp
   11dc6:	       tst.w d0
   11dc8:	   /-- bne.s 11dce <builtIn_positionStatus+0x28>
   11dca:	   |   moveq #1,d0
   11dcc:	/--|-- bra.s 11e28 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11dce:	|  \-> moveq #24,d0
   11dd0:	|      add.l 16(sp),d0
   11dd4:	|      move.l d0,-(sp)
   11dd6:	|      jsr 15208 <trimStack>
   11ddc:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11dde:	|      movea.l 16(sp),a0
   11de2:	|      move.l 24(a0),d0
   11de6:	|      move.l d0,-(sp)
   11de8:	|      pea 1 <_start+0x1>
   11dec:	|      moveq #12,d0
   11dee:	|      add.l sp,d0
   11df0:	|      move.l d0,-(sp)
   11df2:	|      jsr 14884 <getValueType>
   11df8:	|      lea 12(sp),sp
   11dfc:	|      tst.w d0
   11dfe:	|  /-- bne.s 11e04 <builtIn_positionStatus+0x5e>
   11e00:	|  |   moveq #1,d0
   11e02:	+--|-- bra.s 11e28 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11e04:	|  \-> moveq #24,d0
   11e06:	|      add.l 16(sp),d0
   11e0a:	|      move.l d0,-(sp)
   11e0c:	|      jsr 15208 <trimStack>
   11e12:	|      addq.l #4,sp
	positionStatus (x, y);
   11e14:	|      move.l (sp),d1
   11e16:	|      move.l 4(sp),d0
   11e1a:	|      move.l d1,-(sp)
   11e1c:	|      move.l d0,-(sp)
   11e1e:	|      jsr 7b3a <positionStatus>
   11e24:	|      addq.l #8,sp
	return BR_CONTINUE;
   11e26:	|      moveq #2,d0
}
   11e28:	\----> addq.l #8,sp
   11e2a:	       rts

00011e2c <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11e2c:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e2e:	       movea.l 12(sp),a0
   11e32:	       move.l 24(a0),d0
   11e36:	       move.l d0,-(sp)
   11e38:	       pea 1 <_start+0x1>
   11e3c:	       move.l sp,d0
   11e3e:	       addq.l #8,d0
   11e40:	       move.l d0,-(sp)
   11e42:	       jsr 14884 <getValueType>
   11e48:	       lea 12(sp),sp
   11e4c:	       tst.w d0
   11e4e:	   /-- bne.s 11e54 <builtIn_alignStatus+0x28>
   11e50:	   |   moveq #1,d0
   11e52:	/--|-- bra.s 11e74 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11e54:	|  \-> moveq #24,d0
   11e56:	|      add.l 12(sp),d0
   11e5a:	|      move.l d0,-(sp)
   11e5c:	|      jsr 15208 <trimStack>
   11e62:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11e64:	|      move.l (sp),d0
   11e66:	|      movea.l 1c34a <nowStatus>,a0
   11e6c:	|      move.l d0,d0
   11e6e:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11e72:	|      moveq #2,d0
}
   11e74:	\----> addq.l #4,sp
   11e76:	       rts

00011e78 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11e78:	             tst.l 4(sp)
   11e7c:	      /----- beq.s 11e88 <getFuncNumForCallback+0x10>
   11e7e:	      |      moveq #1,d0
   11e80:	      |      cmp.l 4(sp),d0
   11e84:	      |  /-- beq.s 11e8e <getFuncNumForCallback+0x16>
   11e86:	   /--|--|-- bra.s 11ec4 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11e88:	   |  \--|-> clr.l 12(sp)
			break;
   11e8c:	/--|-----|-- bra.s 11ed6 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11e8e:	|  |     \-> movea.l 8(sp),a0
   11e92:	|  |         move.l 24(a0),d0
   11e96:	|  |         move.l d0,-(sp)
   11e98:	|  |         pea 2 <_start+0x2>
   11e9c:	|  |         move.l 20(sp),-(sp)
   11ea0:	|  |         jsr 14884 <getValueType>
   11ea6:	|  |         lea 12(sp),sp
   11eaa:	|  |         tst.w d0
   11eac:	|  |     /-- bne.s 11eb2 <getFuncNumForCallback+0x3a>
   11eae:	|  |     |   clr.w d0
   11eb0:	|  |  /--|-- bra.s 11ed8 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11eb2:	|  |  |  \-> moveq #24,d0
   11eb4:	|  |  |      add.l 8(sp),d0
   11eb8:	|  |  |      move.l d0,-(sp)
   11eba:	|  |  |      jsr 15208 <trimStack>
   11ec0:	|  |  |      addq.l #4,sp
			break;
   11ec2:	+--|--|----- bra.s 11ed6 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11ec4:	|  \--|----> pea 19bd9 <graphics.c.1c13408a+0xc5>
   11eca:	|     |      jsr 1729e <KPrintF>
   11ed0:	|     |      addq.l #4,sp
			return FALSE;
   11ed2:	|     |      clr.w d0
   11ed4:	|     +----- bra.s 11ed8 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11ed6:	\-----|----> moveq #1,d0
}
   11ed8:	      \----> rts

00011eda <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11eda:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11edc:	       move.l sp,d0
   11ede:	       move.l d0,-(sp)
   11ee0:	       move.l 16(sp),-(sp)
   11ee4:	       move.l 16(sp),-(sp)
   11ee8:	       jsr 11e78 <getFuncNumForCallback>
   11eee:	       lea 12(sp),sp
   11ef2:	       tst.w d0
   11ef4:	/----- beq.s 11f04 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11ef6:	|      movea.l 1c33c <currentEvents>,a0
   11efc:	|      move.l (sp),d0
   11efe:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11f00:	|      moveq #2,d0
   11f02:	|  /-- bra.s 11f06 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11f04:	\--|-> moveq #1,d0
}
   11f06:	   \-> addq.l #4,sp
   11f08:	       rts

00011f0a <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11f0a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f0c:	       move.l sp,d0
   11f0e:	       move.l d0,-(sp)
   11f10:	       move.l 16(sp),-(sp)
   11f14:	       move.l 16(sp),-(sp)
   11f18:	       jsr 11e78 <getFuncNumForCallback>
   11f1e:	       lea 12(sp),sp
   11f22:	       tst.w d0
   11f24:	/----- beq.s 11f36 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11f26:	|      movea.l 1c33c <currentEvents>,a0
   11f2c:	|      move.l (sp),d0
   11f2e:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11f32:	|      moveq #2,d0
   11f34:	|  /-- bra.s 11f38 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11f36:	\--|-> moveq #1,d0
}
   11f38:	   \-> addq.l #4,sp
   11f3a:	       rts

00011f3c <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11f3c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f3e:	       move.l sp,d0
   11f40:	       move.l d0,-(sp)
   11f42:	       move.l 16(sp),-(sp)
   11f46:	       move.l 16(sp),-(sp)
   11f4a:	       jsr 11e78 <getFuncNumForCallback>
   11f50:	       lea 12(sp),sp
   11f54:	       tst.w d0
   11f56:	/----- beq.s 11f68 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11f58:	|      movea.l 1c33c <currentEvents>,a0
   11f5e:	|      move.l (sp),d0
   11f60:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11f64:	|      moveq #2,d0
   11f66:	|  /-- bra.s 11f6a <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11f68:	\--|-> moveq #1,d0
}
   11f6a:	   \-> addq.l #4,sp
   11f6c:	       rts

00011f6e <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11f6e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f70:	       move.l sp,d0
   11f72:	       move.l d0,-(sp)
   11f74:	       move.l 16(sp),-(sp)
   11f78:	       move.l 16(sp),-(sp)
   11f7c:	       jsr 11e78 <getFuncNumForCallback>
   11f82:	       lea 12(sp),sp
   11f86:	       tst.w d0
   11f88:	/----- beq.s 11f9a <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11f8a:	|      movea.l 1c33c <currentEvents>,a0
   11f90:	|      move.l (sp),d0
   11f92:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11f96:	|      moveq #2,d0
   11f98:	|  /-- bra.s 11f9c <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11f9a:	\--|-> moveq #1,d0
}
   11f9c:	   \-> addq.l #4,sp
   11f9e:	       rts

00011fa0 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11fa0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fa2:	       move.l sp,d0
   11fa4:	       move.l d0,-(sp)
   11fa6:	       move.l 16(sp),-(sp)
   11faa:	       move.l 16(sp),-(sp)
   11fae:	       jsr 11e78 <getFuncNumForCallback>
   11fb4:	       lea 12(sp),sp
   11fb8:	       tst.w d0
   11fba:	/----- beq.s 11fcc <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11fbc:	|      movea.l 1c33c <currentEvents>,a0
   11fc2:	|      move.l (sp),d0
   11fc4:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11fc8:	|      moveq #2,d0
   11fca:	|  /-- bra.s 11fce <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11fcc:	\--|-> moveq #1,d0
}
   11fce:	   \-> addq.l #4,sp
   11fd0:	       rts

00011fd2 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11fd2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fd4:	       move.l sp,d0
   11fd6:	       move.l d0,-(sp)
   11fd8:	       move.l 16(sp),-(sp)
   11fdc:	       move.l 16(sp),-(sp)
   11fe0:	       jsr 11e78 <getFuncNumForCallback>
   11fe6:	       lea 12(sp),sp
   11fea:	       tst.w d0
   11fec:	/----- beq.s 11ffe <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11fee:	|      movea.l 1c33c <currentEvents>,a0
   11ff4:	|      move.l (sp),d0
   11ff6:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11ffa:	|      moveq #2,d0
   11ffc:	|  /-- bra.s 12000 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11ffe:	\--|-> moveq #1,d0
}
   12000:	   \-> addq.l #4,sp
   12002:	       rts

00012004 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   12004:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12006:	       move.l sp,d0
   12008:	       move.l d0,-(sp)
   1200a:	       move.l 16(sp),-(sp)
   1200e:	       move.l 16(sp),-(sp)
   12012:	       jsr 11e78 <getFuncNumForCallback>
   12018:	       lea 12(sp),sp
   1201c:	       tst.w d0
   1201e:	/----- beq.s 12030 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   12020:	|      movea.l 1c33c <currentEvents>,a0
   12026:	|      move.l (sp),d0
   12028:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   1202c:	|      moveq #2,d0
   1202e:	|  /-- bra.s 12032 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   12030:	\--|-> moveq #1,d0
}
   12032:	   \-> addq.l #4,sp
   12034:	       rts

00012036 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   12036:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12038:	          move.l sp,d0
   1203a:	          move.l d0,-(sp)
   1203c:	          move.l 16(sp),-(sp)
   12040:	          move.l 16(sp),-(sp)
   12044:	          jsr 11e78 <getFuncNumForCallback>
   1204a:	          lea 12(sp),sp
   1204e:	          tst.w d0
   12050:	/-------- beq.s 1207c <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   12052:	|         move.l 1c994 <noStack>,d1
   12058:	|         move.l (sp),d0
   1205a:	|         pea 1 <_start+0x1>
   1205e:	|         move.l d1,-(sp)
   12060:	|         clr.l -(sp)
   12062:	|         clr.l -(sp)
   12064:	|         move.l d0,-(sp)
   12066:	|         jsr 6c0a <startNewFunctionNum>
   1206c:	|         lea 20(sp),sp
   12070:	|         tst.l d0
   12072:	|     /-- bne.s 12078 <builtIn_spawnSub+0x42>
   12074:	|     |   moveq #1,d0
   12076:	|  /--|-- bra.s 1207e <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   12078:	|  |  \-> moveq #2,d0
   1207a:	|  +----- bra.s 1207e <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   1207c:	\--|----> moveq #1,d0
}
   1207e:	   \----> addq.l #4,sp
   12080:	          rts

00012082 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   12082:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12084:	          move.l sp,d0
   12086:	          addq.l #4,d0
   12088:	          move.l d0,-(sp)
   1208a:	          move.l 20(sp),-(sp)
   1208e:	          move.l 20(sp),-(sp)
   12092:	          jsr 11e78 <getFuncNumForCallback>
   12098:	          lea 12(sp),sp
   1209c:	          tst.w d0
   1209e:	/-------- beq.s 120d4 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   120a0:	|         move.l 4(sp),d1
   120a4:	|         move.l sp,d0
   120a6:	|         addq.l #2,d0
   120a8:	|         move.l d0,-(sp)
   120aa:	|         move.l 20(sp),-(sp)
   120ae:	|         move.l d1,-(sp)
   120b0:	|         jsr 4930 <cancelAFunction>
   120b6:	|         lea 12(sp),sp
		if (killedMyself) {
   120ba:	|         move.w 2(sp),d0
   120be:	|  /----- beq.s 120d0 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   120c0:	|  |      move.l 16(sp),-(sp)
   120c4:	|  |      jsr 484e <abortFunction>
   120ca:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   120cc:	|  |      moveq #5,d0
   120ce:	|  |  /-- bra.s 120d6 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   120d0:	|  \--|-> moveq #2,d0
   120d2:	|     +-- bra.s 120d6 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   120d4:	\-----|-> moveq #1,d0
}
   120d6:	      \-> addq.l #8,sp
   120d8:	          rts

000120da <builtIn_stringWidth>:

builtIn(stringWidth)
{
   120da:	       subq.l #8,sp
   120dc:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   120de:	       movea.l 20(sp),a0
   120e2:	       move.l 24(a0),d0
   120e6:	       move.l d0,-(sp)
   120e8:	       jsr 14e5a <getTextFromAnyVar>
   120ee:	       addq.l #4,sp
   120f0:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   120f4:	   /-- bne.s 120fa <builtIn_stringWidth+0x20>
   120f6:	   |   moveq #1,d0
   120f8:	/--|-- bra.s 12148 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   120fa:	|  \-> moveq #24,d0
   120fc:	|      add.l 20(sp),d0
   12100:	|      move.l d0,-(sp)
   12102:	|      jsr 15208 <trimStack>
   12108:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1210a:	|      move.l 8(sp),-(sp)
   1210e:	|      jsr 15966 <stringWidth>
   12114:	|      addq.l #4,sp
   12116:	|      move.l d0,d1
   12118:	|      moveq #28,d0
   1211a:	|      add.l 20(sp),d0
   1211e:	|      move.l d1,-(sp)
   12120:	|      pea 1 <_start+0x1>
   12124:	|      move.l d0,-(sp)
   12126:	|      jsr 15176 <setVariable>
   1212c:	|      lea 12(sp),sp
	FreeVec(theText);
   12130:	|      move.l 8(sp),4(sp)
   12136:	|      move.l 1c9c4 <SysBase>,d0
   1213c:	|      movea.l d0,a6
   1213e:	|      movea.l 4(sp),a1
   12142:	|      jsr -690(a6)
	return BR_CONTINUE;
   12146:	|      moveq #2,d0
}
   12148:	\----> movea.l (sp)+,a6
   1214a:	       addq.l #8,sp
   1214c:	       rts

0001214e <builtIn_hardScroll>:

builtIn(hardScroll)
{
   1214e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12150:	       movea.l 12(sp),a0
   12154:	       move.l 24(a0),d0
   12158:	       move.l d0,-(sp)
   1215a:	       pea 1 <_start+0x1>
   1215e:	       move.l sp,d0
   12160:	       addq.l #8,d0
   12162:	       move.l d0,-(sp)
   12164:	       jsr 14884 <getValueType>
   1216a:	       lea 12(sp),sp
   1216e:	       tst.w d0
   12170:	   /-- bne.s 12176 <builtIn_hardScroll+0x28>
   12172:	   |   moveq #1,d0
   12174:	/--|-- bra.s 12194 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   12176:	|  \-> moveq #24,d0
   12178:	|      add.l 12(sp),d0
   1217c:	|      move.l d0,-(sp)
   1217e:	|      jsr 15208 <trimStack>
   12184:	|      addq.l #4,sp
	hardScroll (v);
   12186:	|      move.l (sp),d0
   12188:	|      move.l d0,-(sp)
   1218a:	|      jsr d320 <hardScroll>
   12190:	|      addq.l #4,sp
	return BR_CONTINUE;
   12192:	|      moveq #2,d0
}
   12194:	\----> addq.l #4,sp
   12196:	       rts

00012198 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   12198:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1219a:	       movea.l 12(sp),a0
   1219e:	       move.l 24(a0),d0
   121a2:	       move.l d0,-(sp)
   121a4:	       pea 7 <_start+0x7>
   121a8:	       move.l sp,d0
   121aa:	       addq.l #8,d0
   121ac:	       move.l d0,-(sp)
   121ae:	       jsr 14884 <getValueType>
   121b4:	       lea 12(sp),sp
   121b8:	       tst.w d0
   121ba:	   /-- bne.s 121c0 <builtIn_isScreenRegion+0x28>
   121bc:	   |   moveq #1,d0
   121be:	/--|-- bra.s 12200 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   121c0:	|  \-> moveq #24,d0
   121c2:	|      add.l 12(sp),d0
   121c6:	|      move.l d0,-(sp)
   121c8:	|      jsr 15208 <trimStack>
   121ce:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   121d0:	|      move.l (sp),d0
   121d2:	|      move.l d0,-(sp)
   121d4:	|      jsr 15ac6 <getRegionForObject>
   121da:	|      addq.l #4,sp
   121dc:	|      tst.l d0
   121de:	|      sne d0
   121e0:	|      neg.b d0
   121e2:	|      moveq #0,d1
   121e4:	|      move.b d0,d1
   121e6:	|      moveq #28,d0
   121e8:	|      add.l 12(sp),d0
   121ec:	|      move.l d1,-(sp)
   121ee:	|      pea 1 <_start+0x1>
   121f2:	|      move.l d0,-(sp)
   121f4:	|      jsr 15176 <setVariable>
   121fa:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121fe:	|      moveq #2,d0
}
   12200:	\----> addq.l #4,sp
   12202:	       rts

00012204 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   12204:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12206:	       movea.l 12(sp),a0
   1220a:	       move.l 24(a0),d0
   1220e:	       move.l d0,-(sp)
   12210:	       pea 1 <_start+0x1>
   12214:	       move.l sp,d0
   12216:	       addq.l #8,d0
   12218:	       move.l d0,-(sp)
   1221a:	       jsr 14884 <getValueType>
   12220:	       lea 12(sp),sp
   12224:	       tst.w d0
   12226:	   /-- bne.s 1222c <builtIn_setSpeechSpeed+0x28>
   12228:	   |   moveq #1,d0
   1222a:	/--|-- bra.s 1227a <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   1222c:	|  \-> moveq #24,d0
   1222e:	|      add.l 12(sp),d0
   12232:	|      move.l d0,-(sp)
   12234:	|      jsr 15208 <trimStack>
   1223a:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   1223c:	|      move.l (sp),d0
   1223e:	|      move.l d0,-(sp)
   12240:	|      jsr 176da <__floatsisf>
   12246:	|      addq.l #4,sp
   12248:	|      move.l #1008981770,-(sp)
   1224e:	|      move.l d0,-(sp)
   12250:	|      jsr 1778c <__mulsf3>
   12256:	|      addq.l #8,sp
   12258:	|      move.l d0,1c34e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   1225e:	|      moveq #28,d0
   12260:	|      add.l 12(sp),d0
   12264:	|      pea 1 <_start+0x1>
   12268:	|      pea 1 <_start+0x1>
   1226c:	|      move.l d0,-(sp)
   1226e:	|      jsr 15176 <setVariable>
   12274:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12278:	|      moveq #2,d0
}
   1227a:	\----> addq.l #4,sp
   1227c:	       rts

0001227e <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   1227e:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12280:	       movea.l 12(sp),a0
   12284:	       move.l 24(a0),d0
   12288:	       move.l d0,-(sp)
   1228a:	       pea 1 <_start+0x1>
   1228e:	       move.l sp,d0
   12290:	       addq.l #8,d0
   12292:	       move.l d0,-(sp)
   12294:	       jsr 14884 <getValueType>
   1229a:	       lea 12(sp),sp
   1229e:	       tst.w d0
   122a0:	   /-- bne.s 122a6 <builtIn_setFontSpacing+0x28>
   122a2:	   |   moveq #1,d0
   122a4:	/--|-- bra.s 122dc <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   122a6:	|  \-> move.l (sp),d0
   122a8:	|      move.l d0,d0
   122aa:	|      move.w d0,1c8c8 <fontSpace>
	trimStack (&fun -> stack);
   122b0:	|      moveq #24,d0
   122b2:	|      add.l 12(sp),d0
   122b6:	|      move.l d0,-(sp)
   122b8:	|      jsr 15208 <trimStack>
   122be:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   122c0:	|      moveq #28,d0
   122c2:	|      add.l 12(sp),d0
   122c6:	|      pea 1 <_start+0x1>
   122ca:	|      pea 1 <_start+0x1>
   122ce:	|      move.l d0,-(sp)
   122d0:	|      jsr 15176 <setVariable>
   122d6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   122da:	|      moveq #2,d0
}
   122dc:	\----> addq.l #4,sp
   122de:	       rts

000122e0 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   122e0:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122e2:	          movea.l 12(sp),a0
   122e6:	          move.l 24(a0),d0
   122ea:	          move.l d0,-(sp)
   122ec:	          pea 1 <_start+0x1>
   122f0:	          move.l sp,d0
   122f2:	          addq.l #8,d0
   122f4:	          move.l d0,-(sp)
   122f6:	          jsr 14884 <getValueType>
   122fc:	          lea 12(sp),sp
   12300:	          tst.w d0
   12302:	      /-- bne.s 12308 <builtIn_transitionLevel+0x28>
   12304:	      |   moveq #1,d0
   12306:	/-----|-- bra.s 1235c <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   12308:	|     \-> moveq #24,d0
   1230a:	|         add.l 12(sp),d0
   1230e:	|         move.l d0,-(sp)
   12310:	|         jsr 15208 <trimStack>
   12316:	|         addq.l #4,sp

	if (number < 0)
   12318:	|         move.l (sp),d0
   1231a:	|     /-- bpl.s 12324 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   1231c:	|     |   clr.b 1c33a <brightnessLevel>
   12322:	|  /--|-- bra.s 12340 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12324:	|  |  \-> move.l (sp),d0
   12326:	|  |      cmpi.l #255,d0
   1232c:	|  |  /-- ble.s 12336 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   1232e:	|  |  |   st 1c33a <brightnessLevel>
   12334:	|  +--|-- bra.s 12340 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   12336:	|  |  \-> move.l (sp),d0
   12338:	|  |      move.l d0,d0
   1233a:	|  |      move.b d0,1c33a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12340:	|  \----> moveq #28,d0
   12342:	|         add.l 12(sp),d0
   12346:	|         pea 1 <_start+0x1>
   1234a:	|         pea 1 <_start+0x1>
   1234e:	|         move.l d0,-(sp)
   12350:	|         jsr 15176 <setVariable>
   12356:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1235a:	|         moveq #2,d0
}
   1235c:	\-------> addq.l #4,sp
   1235e:	          rts

00012360 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   12360:	movea.l 8(sp),a0
   12364:	move.l 24(a0),d0
   12368:	move.l d0,-(sp)
   1236a:	jsr 14dc4 <getBoolean>
   12370:	addq.l #4,sp
   12372:	move.w d0,1c964 <captureAllKeys>
	trimStack (&fun -> stack);
   12378:	moveq #24,d0
   1237a:	add.l 8(sp),d0
   1237e:	move.l d0,-(sp)
   12380:	jsr 15208 <trimStack>
   12386:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   12388:	move.w 1c964 <captureAllKeys>,d0
   1238e:	movea.w d0,a0
   12390:	moveq #28,d0
   12392:	add.l 8(sp),d0
   12396:	move.l a0,-(sp)
   12398:	pea 1 <_start+0x1>
   1239c:	move.l d0,-(sp)
   1239e:	jsr 15176 <setVariable>
   123a4:	lea 12(sp),sp
	return BR_CONTINUE;
   123a8:	moveq #2,d0
}
   123aa:	rts

000123ac <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   123ac:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123b0:	       movea.l 20(sp),a0
   123b4:	       move.l 24(a0),d0
   123b8:	       move.l d0,-(sp)
   123ba:	       pea 1 <_start+0x1>
   123be:	       moveq #12,d0
   123c0:	       add.l sp,d0
   123c2:	       move.l d0,-(sp)
   123c4:	       jsr 14884 <getValueType>
   123ca:	       lea 12(sp),sp
   123ce:	       tst.w d0
   123d0:	   /-- bne.s 123d8 <builtIn_spinCharacter+0x2c>
   123d2:	   |   moveq #1,d0
   123d4:	/--|-- bra.w 12488 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   123d8:	|  \-> moveq #24,d0
   123da:	|      add.l 20(sp),d0
   123de:	|      move.l d0,-(sp)
   123e0:	|      jsr 15208 <trimStack>
   123e6:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123e8:	|      movea.l 20(sp),a0
   123ec:	|      move.l 24(a0),d0
   123f0:	|      move.l d0,-(sp)
   123f2:	|      pea 7 <_start+0x7>
   123f6:	|      lea 8(sp),a0
   123fa:	|      move.l a0,-(sp)
   123fc:	|      jsr 14884 <getValueType>
   12402:	|      lea 12(sp),sp
   12406:	|      tst.w d0
   12408:	|  /-- bne.s 1240e <builtIn_spinCharacter+0x62>
   1240a:	|  |   moveq #1,d0
   1240c:	+--|-- bra.s 12488 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1240e:	|  \-> moveq #24,d0
   12410:	|      add.l 20(sp),d0
   12414:	|      move.l d0,-(sp)
   12416:	|      jsr 15208 <trimStack>
   1241c:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1241e:	|      move.l (sp),d0
   12420:	|      move.l d0,-(sp)
   12422:	|      jsr a75c <findPerson>
   12428:	|      addq.l #4,sp
   1242a:	|      move.l d0,8(sp)
	if (thisPerson) {
   1242e:	|  /-- beq.s 1246e <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   12430:	|  |   move.l 4(sp),d0
   12434:	|  |   movea.l 8(sp),a0
   12438:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   1243c:	|  |   movea.l 8(sp),a0
   12440:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   12446:	|  |   movea.l 8(sp),a0
   1244a:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12450:	|  |   moveq #28,d0
   12452:	|  |   add.l 20(sp),d0
   12456:	|  |   pea 1 <_start+0x1>
   1245a:	|  |   pea 1 <_start+0x1>
   1245e:	|  |   move.l d0,-(sp)
   12460:	|  |   jsr 15176 <setVariable>
   12466:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1246a:	|  |   moveq #3,d0
   1246c:	+--|-- bra.s 12488 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1246e:	|  \-> moveq #28,d0
   12470:	|      add.l 20(sp),d0
   12474:	|      clr.l -(sp)
   12476:	|      pea 1 <_start+0x1>
   1247a:	|      move.l d0,-(sp)
   1247c:	|      jsr 15176 <setVariable>
   12482:	|      lea 12(sp),sp
		return BR_CONTINUE;
   12486:	|      moveq #2,d0
	}
}
   12488:	\----> lea 12(sp),sp
   1248c:	       rts

0001248e <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   1248e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12490:	          movea.l 16(sp),a0
   12494:	          move.l 24(a0),d0
   12498:	          move.l d0,-(sp)
   1249a:	          pea 7 <_start+0x7>
   1249e:	          move.l sp,d0
   124a0:	          addq.l #8,d0
   124a2:	          move.l d0,-(sp)
   124a4:	          jsr 14884 <getValueType>
   124aa:	          lea 12(sp),sp
   124ae:	          tst.w d0
   124b0:	      /-- bne.s 124b6 <builtIn_getCharacterDirection+0x28>
   124b2:	      |   moveq #1,d0
   124b4:	/-----|-- bra.s 12514 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   124b6:	|     \-> moveq #24,d0
   124b8:	|         add.l 16(sp),d0
   124bc:	|         move.l d0,-(sp)
   124be:	|         jsr 15208 <trimStack>
   124c4:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   124c6:	|         move.l (sp),d0
   124c8:	|         move.l d0,-(sp)
   124ca:	|         jsr a75c <findPerson>
   124d0:	|         addq.l #4,sp
   124d2:	|         move.l d0,4(sp)
	if (thisPerson) {
   124d6:	|  /----- beq.s 124fa <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   124d8:	|  |      movea.l 4(sp),a0
   124dc:	|  |      move.l 106(a0),d1
   124e0:	|  |      moveq #28,d0
   124e2:	|  |      add.l 16(sp),d0
   124e6:	|  |      move.l d1,-(sp)
   124e8:	|  |      pea 1 <_start+0x1>
   124ec:	|  |      move.l d0,-(sp)
   124ee:	|  |      jsr 15176 <setVariable>
   124f4:	|  |      lea 12(sp),sp
   124f8:	|  |  /-- bra.s 12512 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   124fa:	|  \--|-> moveq #28,d0
   124fc:	|     |   add.l 16(sp),d0
   12500:	|     |   clr.l -(sp)
   12502:	|     |   pea 1 <_start+0x1>
   12506:	|     |   move.l d0,-(sp)
   12508:	|     |   jsr 15176 <setVariable>
   1250e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12512:	|     \-> moveq #2,d0
}
   12514:	\-------> addq.l #8,sp
   12516:	          rts

00012518 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   12518:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1251a:	       movea.l 16(sp),a0
   1251e:	       move.l 24(a0),d0
   12522:	       move.l d0,-(sp)
   12524:	       pea 7 <_start+0x7>
   12528:	       move.l sp,d0
   1252a:	       addq.l #8,d0
   1252c:	       move.l d0,-(sp)
   1252e:	       jsr 14884 <getValueType>
   12534:	       lea 12(sp),sp
   12538:	       tst.w d0
   1253a:	   /-- bne.s 12540 <builtIn_isCharacter+0x28>
   1253c:	   |   moveq #1,d0
   1253e:	/--|-- bra.s 12582 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12540:	|  \-> moveq #24,d0
   12542:	|      add.l 16(sp),d0
   12546:	|      move.l d0,-(sp)
   12548:	|      jsr 15208 <trimStack>
   1254e:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12550:	|      move.l (sp),d0
   12552:	|      move.l d0,-(sp)
   12554:	|      jsr a75c <findPerson>
   1255a:	|      addq.l #4,sp
   1255c:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   12560:	|      sne d0
   12562:	|      neg.b d0
   12564:	|      moveq #0,d1
   12566:	|      move.b d0,d1
   12568:	|      moveq #28,d0
   1256a:	|      add.l 16(sp),d0
   1256e:	|      move.l d1,-(sp)
   12570:	|      pea 1 <_start+0x1>
   12574:	|      move.l d0,-(sp)
   12576:	|      jsr 15176 <setVariable>
   1257c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12580:	|      moveq #2,d0
}
   12582:	\----> addq.l #8,sp
   12584:	       rts

00012586 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   12586:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12588:	          movea.l 16(sp),a0
   1258c:	          move.l 24(a0),d0
   12590:	          move.l d0,-(sp)
   12592:	          pea 7 <_start+0x7>
   12596:	          move.l sp,d0
   12598:	          addq.l #8,d0
   1259a:	          move.l d0,-(sp)
   1259c:	          jsr 14884 <getValueType>
   125a2:	          lea 12(sp),sp
   125a6:	          tst.w d0
   125a8:	      /-- bne.s 125ae <builtIn_normalCharacter+0x28>
   125aa:	      |   moveq #1,d0
   125ac:	/-----|-- bra.s 1262a <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   125ae:	|     \-> moveq #24,d0
   125b0:	|         add.l 16(sp),d0
   125b4:	|         move.l d0,-(sp)
   125b6:	|         jsr 15208 <trimStack>
   125bc:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   125be:	|         move.l (sp),d0
   125c0:	|         move.l d0,-(sp)
   125c2:	|         jsr a75c <findPerson>
   125c8:	|         addq.l #4,sp
   125ca:	|         move.l d0,4(sp)
	if (thisPerson)
   125ce:	|  /----- beq.s 12610 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   125d0:	|  |      movea.l 4(sp),a0
   125d4:	|  |      movea.l 80(a0),a0
   125d8:	|  |      move.l (a0),d1
   125da:	|  |      movea.l 4(sp),a0
   125de:	|  |      move.l 106(a0),d0
   125e2:	|  |      add.l d0,d0
   125e4:	|  |      add.l d0,d0
   125e6:	|  |      movea.l d1,a0
   125e8:	|  |      adda.l d0,a0
   125ea:	|  |      move.l (a0),d0
   125ec:	|  |      movea.l 4(sp),a0
   125f0:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   125f4:	|  |      moveq #28,d0
   125f6:	|  |      add.l 16(sp),d0
   125fa:	|  |      pea 1 <_start+0x1>
   125fe:	|  |      pea 1 <_start+0x1>
   12602:	|  |      move.l d0,-(sp)
   12604:	|  |      jsr 15176 <setVariable>
   1260a:	|  |      lea 12(sp),sp
   1260e:	|  |  /-- bra.s 12628 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12610:	|  \--|-> moveq #28,d0
   12612:	|     |   add.l 16(sp),d0
   12616:	|     |   clr.l -(sp)
   12618:	|     |   pea 1 <_start+0x1>
   1261c:	|     |   move.l d0,-(sp)
   1261e:	|     |   jsr 15176 <setVariable>
   12624:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12628:	|     \-> moveq #2,d0
}
   1262a:	\-------> addq.l #8,sp
   1262c:	          rts

0001262e <builtIn_isMoving>:

builtIn(isMoving)
{
   1262e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12630:	          movea.l 16(sp),a0
   12634:	          move.l 24(a0),d0
   12638:	          move.l d0,-(sp)
   1263a:	          pea 7 <_start+0x7>
   1263e:	          move.l sp,d0
   12640:	          addq.l #8,d0
   12642:	          move.l d0,-(sp)
   12644:	          jsr 14884 <getValueType>
   1264a:	          lea 12(sp),sp
   1264e:	          tst.w d0
   12650:	      /-- bne.s 12656 <builtIn_isMoving+0x28>
   12652:	      |   moveq #1,d0
   12654:	/-----|-- bra.s 126b6 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   12656:	|     \-> moveq #24,d0
   12658:	|         add.l 16(sp),d0
   1265c:	|         move.l d0,-(sp)
   1265e:	|         jsr 15208 <trimStack>
   12664:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12666:	|         move.l (sp),d0
   12668:	|         move.l d0,-(sp)
   1266a:	|         jsr a75c <findPerson>
   12670:	|         addq.l #4,sp
   12672:	|         move.l d0,4(sp)
	if (thisPerson)
   12676:	|  /----- beq.s 1269c <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   12678:	|  |      movea.l 4(sp),a0
   1267c:	|  |      move.w 64(a0),d0
   12680:	|  |      movea.w d0,a0
   12682:	|  |      moveq #28,d0
   12684:	|  |      add.l 16(sp),d0
   12688:	|  |      move.l a0,-(sp)
   1268a:	|  |      pea 1 <_start+0x1>
   1268e:	|  |      move.l d0,-(sp)
   12690:	|  |      jsr 15176 <setVariable>
   12696:	|  |      lea 12(sp),sp
   1269a:	|  |  /-- bra.s 126b4 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1269c:	|  \--|-> moveq #28,d0
   1269e:	|     |   add.l 16(sp),d0
   126a2:	|     |   clr.l -(sp)
   126a4:	|     |   pea 1 <_start+0x1>
   126a8:	|     |   move.l d0,-(sp)
   126aa:	|     |   jsr 15176 <setVariable>
   126b0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   126b4:	|     \-> moveq #2,d0
}
   126b6:	\-------> addq.l #8,sp
   126b8:	          rts

000126ba <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   126ba:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   126be:	          movea.l 20(sp),a0
   126c2:	          move.l 24(a0),d0
   126c6:	          move.l d0,-(sp)
   126c8:	          pea 7 <_start+0x7>
   126cc:	          lea 8(sp),a0
   126d0:	          move.l a0,-(sp)
   126d2:	          jsr 14884 <getValueType>
   126d8:	          lea 12(sp),sp
   126dc:	          tst.w d0
   126de:	      /-- bne.s 126e6 <builtIn_fetchEvent+0x2c>
   126e0:	      |   moveq #1,d0
   126e2:	/-----|-- bra.w 1277a <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   126e6:	|     \-> moveq #24,d0
   126e8:	|         add.l 20(sp),d0
   126ec:	|         move.l d0,-(sp)
   126ee:	|         jsr 15208 <trimStack>
   126f4:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   126f6:	|         movea.l 20(sp),a0
   126fa:	|         move.l 24(a0),d0
   126fe:	|         move.l d0,-(sp)
   12700:	|         pea 7 <_start+0x7>
   12704:	|         moveq #12,d0
   12706:	|         add.l sp,d0
   12708:	|         move.l d0,-(sp)
   1270a:	|         jsr 14884 <getValueType>
   12710:	|         lea 12(sp),sp
   12714:	|         tst.w d0
   12716:	|     /-- bne.s 1271c <builtIn_fetchEvent+0x62>
   12718:	|     |   moveq #1,d0
   1271a:	+-----|-- bra.s 1277a <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1271c:	|     \-> moveq #24,d0
   1271e:	|         add.l 20(sp),d0
   12722:	|         move.l d0,-(sp)
   12724:	|         jsr 15208 <trimStack>
   1272a:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1272c:	|         move.l (sp),d1
   1272e:	|         move.l 4(sp),d0
   12732:	|         move.l d1,-(sp)
   12734:	|         move.l d0,-(sp)
   12736:	|         jsr d602 <getCombinationFunction>
   1273c:	|         addq.l #8,sp
   1273e:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12742:	|  /----- beq.s 12760 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12744:	|  |      moveq #28,d0
   12746:	|  |      add.l 20(sp),d0
   1274a:	|  |      move.l 8(sp),-(sp)
   1274e:	|  |      pea 2 <_start+0x2>
   12752:	|  |      move.l d0,-(sp)
   12754:	|  |      jsr 15176 <setVariable>
   1275a:	|  |      lea 12(sp),sp
   1275e:	|  |  /-- bra.s 12778 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12760:	|  \--|-> moveq #28,d0
   12762:	|     |   add.l 20(sp),d0
   12766:	|     |   clr.l -(sp)
   12768:	|     |   pea 1 <_start+0x1>
   1276c:	|     |   move.l d0,-(sp)
   1276e:	|     |   jsr 15176 <setVariable>
   12774:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12778:	|     \-> moveq #2,d0
}
   1277a:	\-------> lea 12(sp),sp
   1277e:	          rts

00012780 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12780:	       lea -24(sp),sp
   12784:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12786:	       movea.l 36(sp),a0
   1278a:	       move.l 24(a0),d0
   1278e:	       move.l d0,-(sp)
   12790:	       jsr 14e5a <getTextFromAnyVar>
   12796:	       addq.l #4,sp
   12798:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   1279c:	       moveq #24,d0
   1279e:	       add.l 36(sp),d0
   127a2:	       move.l d0,-(sp)
   127a4:	       jsr 15208 <trimStack>
   127aa:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   127ac:	       move.l 24(sp),-(sp)
   127b0:	       jsr 2fe <encodeFilename>
   127b6:	       addq.l #4,sp
   127b8:	       move.l d0,20(sp)
    FreeVec(namNormal);
   127bc:	       move.l 24(sp),16(sp)
   127c2:	       move.l 1c9c4 <SysBase>,d0
   127c8:	       movea.l d0,a6
   127ca:	       movea.l 16(sp),a1
   127ce:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   127d2:	       move.l 20(sp),-(sp)
   127d6:	       jsr e3ba <failSecurityCheck>
   127dc:	       addq.l #4,sp
   127de:	       tst.w d0
   127e0:	   /-- beq.s 127e6 <builtIn_deleteFile+0x66>
   127e2:	   |   moveq #1,d0
   127e4:	/--|-- bra.s 12834 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   127e6:	|  \-> move.l 20(sp),12(sp)
   127ec:	|      move.l 1c9cc <DOSBase>,d0
   127f2:	|      movea.l d0,a6
   127f4:	|      move.l 12(sp),d1
   127f8:	|      jsr -72(a6)
   127fc:	|      move.l d0,8(sp)
   12800:	|      move.l 8(sp),d1
   12804:	|      moveq #28,d0
   12806:	|      add.l 36(sp),d0
   1280a:	|      move.l d1,-(sp)
   1280c:	|      pea 1 <_start+0x1>
   12810:	|      move.l d0,-(sp)
   12812:	|      jsr 15176 <setVariable>
   12818:	|      lea 12(sp),sp
    FreeVec(nam);
   1281c:	|      move.l 20(sp),4(sp)
   12822:	|      move.l 1c9c4 <SysBase>,d0
   12828:	|      movea.l d0,a6
   1282a:	|      movea.l 4(sp),a1
   1282e:	|      jsr -690(a6)

    return BR_CONTINUE;
   12832:	|      moveq #2,d0
}
   12834:	\----> movea.l (sp)+,a6
   12836:	       lea 24(sp),sp
   1283a:	       rts

0001283c <builtIn_renameFile>:

builtIn(renameFile)
{
   1283c:	       lea -40(sp),sp
   12840:	       move.l a6,-(sp)
   12842:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12844:	       movea.l 56(sp),a0
   12848:	       move.l 24(a0),d0
   1284c:	       move.l d0,-(sp)
   1284e:	       jsr 14e5a <getTextFromAnyVar>
   12854:	       addq.l #4,sp
   12856:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   1285a:	       move.l 44(sp),-(sp)
   1285e:	       jsr 2fe <encodeFilename>
   12864:	       addq.l #4,sp
   12866:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   1286a:	       moveq #24,d0
   1286c:	       add.l 56(sp),d0
   12870:	       move.l d0,-(sp)
   12872:	       jsr 15208 <trimStack>
   12878:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   1287a:	       move.l 40(sp),-(sp)
   1287e:	       jsr e3ba <failSecurityCheck>
   12884:	       addq.l #4,sp
   12886:	       tst.w d0
   12888:	   /-- beq.s 12890 <builtIn_renameFile+0x54>
   1288a:	   |   moveq #1,d0
   1288c:	/--|-- bra.w 12976 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12890:	|  \-> move.l 44(sp),36(sp)
   12896:	|      move.l 1c9c4 <SysBase>,d0
   1289c:	|      movea.l d0,a6
   1289e:	|      movea.l 36(sp),a1
   128a2:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   128a6:	|      movea.l 56(sp),a0
   128aa:	|      move.l 24(a0),d0
   128ae:	|      move.l d0,-(sp)
   128b0:	|      jsr 14e5a <getTextFromAnyVar>
   128b6:	|      addq.l #4,sp
   128b8:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   128bc:	|      move.l 44(sp),-(sp)
   128c0:	|      jsr 2fe <encodeFilename>
   128c6:	|      addq.l #4,sp
   128c8:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   128cc:	|      moveq #24,d0
   128ce:	|      add.l 56(sp),d0
   128d2:	|      move.l d0,-(sp)
   128d4:	|      jsr 15208 <trimStack>
   128da:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   128dc:	|      move.l 32(sp),-(sp)
   128e0:	|      jsr e3ba <failSecurityCheck>
   128e6:	|      addq.l #4,sp
   128e8:	|      tst.w d0
   128ea:	|  /-- beq.s 128f2 <builtIn_renameFile+0xb6>
   128ec:	|  |   moveq #1,d0
   128ee:	+--|-- bra.w 12976 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   128f2:	|  \-> move.l 44(sp),28(sp)
   128f8:	|      move.l 1c9c4 <SysBase>,d0
   128fe:	|      movea.l d0,a6
   12900:	|      movea.l 28(sp),a1
   12904:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12908:	|      move.l 32(sp),24(sp)
   1290e:	|      move.l 40(sp),20(sp)
   12914:	|      move.l 1c9cc <DOSBase>,d0
   1291a:	|      movea.l d0,a6
   1291c:	|      move.l 24(sp),d1
   12920:	|      move.l 20(sp),d2
   12924:	|      jsr -78(a6)
   12928:	|      move.l d0,16(sp)
   1292c:	|      move.l 16(sp),d1
   12930:	|      moveq #28,d0
   12932:	|      add.l 56(sp),d0
   12936:	|      move.l d1,-(sp)
   12938:	|      pea 1 <_start+0x1>
   1293c:	|      move.l d0,-(sp)
   1293e:	|      jsr 15176 <setVariable>
   12944:	|      lea 12(sp),sp
	FreeVec(nam);
   12948:	|      move.l 32(sp),12(sp)
   1294e:	|      move.l 1c9c4 <SysBase>,d0
   12954:	|      movea.l d0,a6
   12956:	|      movea.l 12(sp),a1
   1295a:	|      jsr -690(a6)
	FreeVec(newnam);
   1295e:	|      move.l 40(sp),8(sp)
   12964:	|      move.l 1c9c4 <SysBase>,d0
   1296a:	|      movea.l d0,a6
   1296c:	|      movea.l 8(sp),a1
   12970:	|      jsr -690(a6)

	return BR_CONTINUE;
   12974:	|      moveq #2,d0
}
   12976:	\----> move.l (sp)+,d2
   12978:	       movea.l (sp)+,a6
   1297a:	       lea 40(sp),sp
   1297e:	       rts

00012980 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12980:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12982:	       movea.l 12(sp),a0
   12986:	       move.l 24(a0),d0
   1298a:	       move.l d0,-(sp)
   1298c:	       pea 5 <_start+0x5>
   12990:	       move.l sp,d0
   12992:	       addq.l #8,d0
   12994:	       move.l d0,-(sp)
   12996:	       jsr 14884 <getValueType>
   1299c:	       lea 12(sp),sp
   129a0:	       tst.w d0
   129a2:	   /-- bne.s 129a8 <builtIn_cacheSound+0x28>
   129a4:	   |   moveq #1,d0
   129a6:	/--|-- bra.s 129d0 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   129a8:	|  \-> moveq #24,d0
   129aa:	|      add.l 12(sp),d0
   129ae:	|      move.l d0,-(sp)
   129b0:	|      jsr 15208 <trimStack>
   129b6:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   129b8:	|      move.l (sp),d0
   129ba:	|      move.l d0,-(sp)
   129bc:	|      jsr d202 <cacheSound>
   129c2:	|      addq.l #4,sp
   129c4:	|      moveq #-1,d1
   129c6:	|      cmp.l d0,d1
   129c8:	|  /-- bne.s 129ce <builtIn_cacheSound+0x4e>
   129ca:	|  |   moveq #1,d0
   129cc:	+--|-- bra.s 129d0 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   129ce:	|  \-> moveq #2,d0
}
   129d0:	\----> addq.l #4,sp
   129d2:	       rts

000129d4 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   129d4:	pea 19bee <graphics.c.1c13408a+0xda>
   129da:	jsr 1729e <KPrintF>
   129e0:	addq.l #4,sp
	return BR_CONTINUE;
   129e2:	moveq #2,d0
}
   129e4:	rts

000129e6 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   129e6:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   129ea:	          movea.l 20(sp),a0
   129ee:	          move.l 24(a0),d0
   129f2:	          move.l d0,-(sp)
   129f4:	          pea 1 <_start+0x1>
   129f8:	          moveq #12,d0
   129fa:	          add.l sp,d0
   129fc:	          move.l d0,-(sp)
   129fe:	          jsr 14884 <getValueType>
   12a04:	          lea 12(sp),sp
   12a08:	          tst.w d0
   12a0a:	      /-- bne.s 12a12 <builtIn_setCharacterSpinSpeed+0x2c>
   12a0c:	      |   moveq #1,d0
   12a0e:	/-----|-- bra.w 12aac <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12a12:	|     \-> moveq #24,d0
   12a14:	|         add.l 20(sp),d0
   12a18:	|         move.l d0,-(sp)
   12a1a:	|         jsr 15208 <trimStack>
   12a20:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a22:	|         movea.l 20(sp),a0
   12a26:	|         move.l 24(a0),d0
   12a2a:	|         move.l d0,-(sp)
   12a2c:	|         pea 7 <_start+0x7>
   12a30:	|         lea 8(sp),a0
   12a34:	|         move.l a0,-(sp)
   12a36:	|         jsr 14884 <getValueType>
   12a3c:	|         lea 12(sp),sp
   12a40:	|         tst.w d0
   12a42:	|     /-- bne.s 12a48 <builtIn_setCharacterSpinSpeed+0x62>
   12a44:	|     |   moveq #1,d0
   12a46:	+-----|-- bra.s 12aac <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12a48:	|     \-> moveq #24,d0
   12a4a:	|         add.l 20(sp),d0
   12a4e:	|         move.l d0,-(sp)
   12a50:	|         jsr 15208 <trimStack>
   12a56:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12a58:	|         move.l (sp),d0
   12a5a:	|         move.l d0,-(sp)
   12a5c:	|         jsr a75c <findPerson>
   12a62:	|         addq.l #4,sp
   12a64:	|         move.l d0,8(sp)

	if (thisPerson) {
   12a68:	|  /----- beq.s 12a92 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12a6a:	|  |      move.l 4(sp),d0
   12a6e:	|  |      movea.l 8(sp),a0
   12a72:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12a76:	|  |      moveq #28,d0
   12a78:	|  |      add.l 20(sp),d0
   12a7c:	|  |      pea 1 <_start+0x1>
   12a80:	|  |      pea 1 <_start+0x1>
   12a84:	|  |      move.l d0,-(sp)
   12a86:	|  |      jsr 15176 <setVariable>
   12a8c:	|  |      lea 12(sp),sp
   12a90:	|  |  /-- bra.s 12aaa <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a92:	|  \--|-> moveq #28,d0
   12a94:	|     |   add.l 20(sp),d0
   12a98:	|     |   clr.l -(sp)
   12a9a:	|     |   pea 1 <_start+0x1>
   12a9e:	|     |   move.l d0,-(sp)
   12aa0:	|     |   jsr 15176 <setVariable>
   12aa6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12aaa:	|     \-> moveq #2,d0
}
   12aac:	\-------> lea 12(sp),sp
   12ab0:	          rts

00012ab2 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12ab2:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12ab6:	          movea.l 20(sp),a0
   12aba:	          move.l 24(a0),d0
   12abe:	          move.l d0,-(sp)
   12ac0:	          pea 1 <_start+0x1>
   12ac4:	          moveq #12,d0
   12ac6:	          add.l sp,d0
   12ac8:	          move.l d0,-(sp)
   12aca:	          jsr 14884 <getValueType>
   12ad0:	          lea 12(sp),sp
   12ad4:	          tst.w d0
   12ad6:	      /-- bne.s 12ade <builtIn_setCharacterAngleOffset+0x2c>
   12ad8:	      |   moveq #1,d0
   12ada:	/-----|-- bra.w 12b78 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12ade:	|     \-> moveq #24,d0
   12ae0:	|         add.l 20(sp),d0
   12ae4:	|         move.l d0,-(sp)
   12ae6:	|         jsr 15208 <trimStack>
   12aec:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12aee:	|         movea.l 20(sp),a0
   12af2:	|         move.l 24(a0),d0
   12af6:	|         move.l d0,-(sp)
   12af8:	|         pea 7 <_start+0x7>
   12afc:	|         lea 8(sp),a0
   12b00:	|         move.l a0,-(sp)
   12b02:	|         jsr 14884 <getValueType>
   12b08:	|         lea 12(sp),sp
   12b0c:	|         tst.w d0
   12b0e:	|     /-- bne.s 12b14 <builtIn_setCharacterAngleOffset+0x62>
   12b10:	|     |   moveq #1,d0
   12b12:	+-----|-- bra.s 12b78 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12b14:	|     \-> moveq #24,d0
   12b16:	|         add.l 20(sp),d0
   12b1a:	|         move.l d0,-(sp)
   12b1c:	|         jsr 15208 <trimStack>
   12b22:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12b24:	|         move.l (sp),d0
   12b26:	|         move.l d0,-(sp)
   12b28:	|         jsr a75c <findPerson>
   12b2e:	|         addq.l #4,sp
   12b30:	|         move.l d0,8(sp)

	if (thisPerson) {
   12b34:	|  /----- beq.s 12b5e <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12b36:	|  |      move.l 4(sp),d0
   12b3a:	|  |      movea.l 8(sp),a0
   12b3e:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12b42:	|  |      moveq #28,d0
   12b44:	|  |      add.l 20(sp),d0
   12b48:	|  |      pea 1 <_start+0x1>
   12b4c:	|  |      pea 1 <_start+0x1>
   12b50:	|  |      move.l d0,-(sp)
   12b52:	|  |      jsr 15176 <setVariable>
   12b58:	|  |      lea 12(sp),sp
   12b5c:	|  |  /-- bra.s 12b76 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12b5e:	|  \--|-> moveq #28,d0
   12b60:	|     |   add.l 20(sp),d0
   12b64:	|     |   clr.l -(sp)
   12b66:	|     |   pea 1 <_start+0x1>
   12b6a:	|     |   move.l d0,-(sp)
   12b6c:	|     |   jsr 15176 <setVariable>
   12b72:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12b76:	|     \-> moveq #2,d0
}
   12b78:	\-------> lea 12(sp),sp
   12b7c:	          rts

00012b7e <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12b7e:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b80:	       movea.l 12(sp),a0
   12b84:	       move.l 24(a0),d0
   12b88:	       move.l d0,-(sp)
   12b8a:	       pea 1 <_start+0x1>
   12b8e:	       move.l sp,d0
   12b90:	       addq.l #8,d0
   12b92:	       move.l d0,-(sp)
   12b94:	       jsr 14884 <getValueType>
   12b9a:	       lea 12(sp),sp
   12b9e:	       tst.w d0
   12ba0:	   /-- bne.s 12ba6 <builtIn_transitionMode+0x28>
   12ba2:	   |   moveq #1,d0
   12ba4:	/--|-- bra.s 12bdc <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12ba6:	|  \-> move.l (sp),d0
   12ba8:	|      move.l d0,d0
   12baa:	|      move.b d0,1c89e <fadeMode>
	trimStack (&fun -> stack);
   12bb0:	|      moveq #24,d0
   12bb2:	|      add.l 12(sp),d0
   12bb6:	|      move.l d0,-(sp)
   12bb8:	|      jsr 15208 <trimStack>
   12bbe:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12bc0:	|      moveq #28,d0
   12bc2:	|      add.l 12(sp),d0
   12bc6:	|      pea 1 <_start+0x1>
   12bca:	|      pea 1 <_start+0x1>
   12bce:	|      move.l d0,-(sp)
   12bd0:	|      jsr 15176 <setVariable>
   12bd6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12bda:	|      moveq #2,d0
}
   12bdc:	\----> addq.l #4,sp
   12bde:	       rts

00012be0 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12be0:	moveq #24,d0
   12be2:	add.l 8(sp),d0
   12be6:	move.l d0,-(sp)
   12be8:	jsr 15208 <trimStack>
   12bee:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12bf0:	moveq #28,d0
   12bf2:	add.l 8(sp),d0
   12bf6:	pea 1 <_start+0x1>
   12bfa:	pea 1 <_start+0x1>
   12bfe:	move.l d0,-(sp)
   12c00:	jsr 15176 <setVariable>
   12c06:	lea 12(sp),sp
	return BR_CONTINUE;
   12c0a:	moveq #2,d0
}
   12c0c:	rts

00012c0e <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12c0e:	pea 19c18 <graphics.c.1c13408a+0x104>
   12c14:	jsr 1729e <KPrintF>
   12c1a:	addq.l #4,sp
	return BR_CONTINUE;
   12c1c:	moveq #2,d0
}
   12c1e:	rts

00012c20 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12c20:	       lea -16(sp),sp
   12c24:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12c26:	       movea.l 28(sp),a0
   12c2a:	       move.l 24(a0),d0
   12c2e:	       move.l d0,-(sp)
   12c30:	       jsr 14e5a <getTextFromAnyVar>
   12c36:	       addq.l #4,sp
   12c38:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12c3c:	   /-- bne.s 12c44 <builtIn_saveCustomData+0x24>
   12c3e:	   |   moveq #1,d0
   12c40:	/--|-- bra.w 12cf6 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12c44:	|  \-> move.l 16(sp),-(sp)
   12c48:	|      jsr 2fe <encodeFilename>
   12c4e:	|      addq.l #4,sp
   12c50:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12c54:	|      move.l 16(sp),8(sp)
   12c5a:	|      move.l 1c9c4 <SysBase>,d0
   12c60:	|      movea.l d0,a6
   12c62:	|      movea.l 8(sp),a1
   12c66:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12c6a:	|      move.l 12(sp),-(sp)
   12c6e:	|      jsr e3ba <failSecurityCheck>
   12c74:	|      addq.l #4,sp
   12c76:	|      tst.w d0
   12c78:	|  /-- beq.s 12c7e <builtIn_saveCustomData+0x5e>
   12c7a:	|  |   moveq #1,d0
   12c7c:	+--|-- bra.s 12cf6 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12c7e:	|  \-> moveq #24,d0
   12c80:	|      add.l 28(sp),d0
   12c84:	|      move.l d0,-(sp)
   12c86:	|      jsr 15208 <trimStack>
   12c8c:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12c8e:	|      movea.l 28(sp),a0
   12c92:	|      movea.l 24(a0),a0
   12c96:	|      move.l (a0),d0
   12c98:	|      moveq #6,d1
   12c9a:	|      cmp.l d0,d1
   12c9c:	|  /-- beq.s 12cb0 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12c9e:	|  |   pea 19c45 <graphics.c.1c13408a+0x131>
   12ca4:	|  |   jsr 1729e <KPrintF>
   12caa:	|  |   addq.l #4,sp
		return BR_ERROR;
   12cac:	|  |   moveq #1,d0
   12cae:	+--|-- bra.s 12cf6 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12cb0:	|  \-> movea.l 28(sp),a0
   12cb4:	|      move.l 24(a0),d0
   12cb8:	|      move.l d0,-(sp)
   12cba:	|      move.l 16(sp),-(sp)
   12cbe:	|      jsr e00a <stackToFile>
   12cc4:	|      addq.l #8,sp
   12cc6:	|      tst.w d0
   12cc8:	|  /-- bne.s 12cce <builtIn_saveCustomData+0xae>
   12cca:	|  |   moveq #1,d0
   12ccc:	+--|-- bra.s 12cf6 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12cce:	|  \-> moveq #24,d0
   12cd0:	|      add.l 28(sp),d0
   12cd4:	|      move.l d0,-(sp)
   12cd6:	|      jsr 15208 <trimStack>
   12cdc:	|      addq.l #4,sp
	FreeVec(fileName);
   12cde:	|      move.l 12(sp),4(sp)
   12ce4:	|      move.l 1c9c4 <SysBase>,d0
   12cea:	|      movea.l d0,a6
   12cec:	|      movea.l 4(sp),a1
   12cf0:	|      jsr -690(a6)
	return BR_CONTINUE;
   12cf4:	|      moveq #2,d0
}
   12cf6:	\----> movea.l (sp)+,a6
   12cf8:	       lea 16(sp),sp
   12cfc:	       rts

00012cfe <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12cfe:	       lea -28(sp),sp
   12d02:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12d04:	       movea.l 40(sp),a0
   12d08:	       move.l 24(a0),d0
   12d0c:	       move.l d0,-(sp)
   12d0e:	       jsr 14e5a <getTextFromAnyVar>
   12d14:	       addq.l #4,sp
   12d16:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12d1a:	   /-- bne.s 12d22 <builtIn_loadCustomData+0x24>
   12d1c:	   |   moveq #1,d0
   12d1e:	/--|-- bra.w 12e1e <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12d22:	|  \-> move.l 28(sp),-(sp)
   12d26:	|      jsr 2fe <encodeFilename>
   12d2c:	|      addq.l #4,sp
   12d2e:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12d32:	|      move.l 28(sp),20(sp)
   12d38:	|      move.l 1c9c4 <SysBase>,d0
   12d3e:	|      movea.l d0,a6
   12d40:	|      movea.l 20(sp),a1
   12d44:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12d48:	|      move.l 24(sp),-(sp)
   12d4c:	|      jsr e3ba <failSecurityCheck>
   12d52:	|      addq.l #4,sp
   12d54:	|      tst.w d0
   12d56:	|  /-- beq.s 12d5e <builtIn_loadCustomData+0x60>
   12d58:	|  |   moveq #1,d0
   12d5a:	+--|-- bra.w 12e1e <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12d5e:	|  \-> moveq #24,d0
   12d60:	|      add.l 40(sp),d0
   12d64:	|      move.l d0,-(sp)
   12d66:	|      jsr 15208 <trimStack>
   12d6c:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12d6e:	|      moveq #28,d0
   12d70:	|      add.l 40(sp),d0
   12d74:	|      move.l d0,-(sp)
   12d76:	|      jsr 14ad2 <unlinkVar>
   12d7c:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12d7e:	|      movea.l 40(sp),a0
   12d82:	|      moveq #6,d0
   12d84:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12d88:	|      moveq #12,d0
   12d8a:	|      move.l d0,16(sp)
   12d8e:	|      clr.l 12(sp)
   12d92:	|      move.l 1c9c4 <SysBase>,d0
   12d98:	|      movea.l d0,a6
   12d9a:	|      move.l 16(sp),d0
   12d9e:	|      move.l 12(sp),d1
   12da2:	|      jsr -684(a6)
   12da6:	|      move.l d0,8(sp)
   12daa:	|      move.l 8(sp),d0
   12dae:	|      movea.l 40(sp),a0
   12db2:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12db6:	|      movea.l 40(sp),a0
   12dba:	|      move.l 32(a0),d0
   12dbe:	|  /-- bne.s 12dc4 <builtIn_loadCustomData+0xc6>
   12dc0:	|  |   moveq #1,d0
   12dc2:	+--|-- bra.s 12e1e <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12dc4:	|  \-> movea.l 40(sp),a0
   12dc8:	|      movea.l 32(a0),a0
   12dcc:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12dce:	|      movea.l 40(sp),a0
   12dd2:	|      movea.l 32(a0),a0
   12dd6:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12dda:	|      movea.l 40(sp),a0
   12dde:	|      movea.l 32(a0),a0
   12de2:	|      moveq #1,d0
   12de4:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12de8:	|      movea.l 40(sp),a0
   12dec:	|      move.l 32(a0),d0
   12df0:	|      move.l d0,-(sp)
   12df2:	|      move.l 28(sp),-(sp)
   12df6:	|      jsr da44 <fileToStack>
   12dfc:	|      addq.l #8,sp
   12dfe:	|      tst.w d0
   12e00:	|  /-- bne.s 12e06 <builtIn_loadCustomData+0x108>
   12e02:	|  |   moveq #1,d0
   12e04:	+--|-- bra.s 12e1e <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12e06:	|  \-> move.l 24(sp),4(sp)
   12e0c:	|      move.l 1c9c4 <SysBase>,d0
   12e12:	|      movea.l d0,a6
   12e14:	|      movea.l 4(sp),a1
   12e18:	|      jsr -690(a6)
	return BR_CONTINUE;
   12e1c:	|      moveq #2,d0
}
   12e1e:	\----> movea.l (sp)+,a6
   12e20:	       lea 28(sp),sp
   12e24:	       rts

00012e26 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12e26:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e28:	       movea.l 12(sp),a0
   12e2c:	       move.l 24(a0),d0
   12e30:	       move.l d0,-(sp)
   12e32:	       pea 1 <_start+0x1>
   12e36:	       move.l sp,d0
   12e38:	       addq.l #8,d0
   12e3a:	       move.l d0,-(sp)
   12e3c:	       jsr 14884 <getValueType>
   12e42:	       lea 12(sp),sp
   12e46:	       tst.w d0
   12e48:	   /-- bne.s 12e4e <builtIn_setCustomEncoding+0x28>
   12e4a:	   |   moveq #1,d0
   12e4c:	/--|-- bra.s 12e84 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12e4e:	|  \-> move.l (sp),d0
   12e50:	|      move.l d0,d0
   12e52:	|      move.w d0,1ca7c <saveEncoding>
	trimStack (&fun -> stack);
   12e58:	|      moveq #24,d0
   12e5a:	|      add.l 12(sp),d0
   12e5e:	|      move.l d0,-(sp)
   12e60:	|      jsr 15208 <trimStack>
   12e66:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12e68:	|      moveq #28,d0
   12e6a:	|      add.l 12(sp),d0
   12e6e:	|      pea 1 <_start+0x1>
   12e72:	|      pea 1 <_start+0x1>
   12e76:	|      move.l d0,-(sp)
   12e78:	|      jsr 15176 <setVariable>
   12e7e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12e82:	|      moveq #2,d0
}
   12e84:	\----> addq.l #4,sp
   12e86:	       rts

00012e88 <builtIn_freeSound>:

builtIn(freeSound)
{
   12e88:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e8a:	       movea.l 12(sp),a0
   12e8e:	       move.l 24(a0),d0
   12e92:	       move.l d0,-(sp)
   12e94:	       pea 5 <_start+0x5>
   12e98:	       move.l sp,d0
   12e9a:	       addq.l #8,d0
   12e9c:	       move.l d0,-(sp)
   12e9e:	       jsr 14884 <getValueType>
   12ea4:	       lea 12(sp),sp
   12ea8:	       tst.w d0
   12eaa:	   /-- bne.s 12eb0 <builtIn_freeSound+0x28>
   12eac:	   |   moveq #1,d0
   12eae:	/--|-- bra.s 12ece <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12eb0:	|  \-> moveq #24,d0
   12eb2:	|      add.l 12(sp),d0
   12eb6:	|      move.l d0,-(sp)
   12eb8:	|      jsr 15208 <trimStack>
   12ebe:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12ec0:	|      move.l (sp),d0
   12ec2:	|      move.l d0,-(sp)
   12ec4:	|      jsr d206 <huntKillFreeSound>
   12eca:	|      addq.l #4,sp
	return BR_CONTINUE;
   12ecc:	|      moveq #2,d0
}
   12ece:	\----> addq.l #4,sp
   12ed0:	       rts

00012ed2 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12ed2:	       lea -12(sp),sp
   12ed6:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12ed8:	       movea.l 24(sp),a0
   12edc:	       move.l 24(a0),d0
   12ee0:	       move.l d0,-(sp)
   12ee2:	       pea 1 <_start+0x1>
   12ee6:	       moveq #16,d0
   12ee8:	       add.l sp,d0
   12eea:	       move.l d0,-(sp)
   12eec:	       jsr 14884 <getValueType>
   12ef2:	       lea 12(sp),sp
   12ef6:	       tst.w d0
   12ef8:	   /-- bne.s 12f00 <builtIn_parallaxAdd+0x2e>
   12efa:	   |   moveq #1,d0
   12efc:	/--|-- bra.w 12fd4 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12f00:	|  \-> moveq #24,d0
   12f02:	|      add.l 24(sp),d0
   12f06:	|      move.l d0,-(sp)
   12f08:	|      jsr 15208 <trimStack>
   12f0e:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f10:	|      movea.l 24(sp),a0
   12f14:	|      move.l 24(a0),d0
   12f18:	|      move.l d0,-(sp)
   12f1a:	|      pea 1 <_start+0x1>
   12f1e:	|      moveq #20,d0
   12f20:	|      add.l sp,d0
   12f22:	|      move.l d0,-(sp)
   12f24:	|      jsr 14884 <getValueType>
   12f2a:	|      lea 12(sp),sp
   12f2e:	|      tst.w d0
   12f30:	|  /-- bne.s 12f38 <builtIn_parallaxAdd+0x66>
   12f32:	|  |   moveq #1,d0
   12f34:	+--|-- bra.w 12fd4 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12f38:	|  \-> moveq #24,d0
   12f3a:	|      add.l 24(sp),d0
   12f3e:	|      move.l d0,-(sp)
   12f40:	|      jsr 15208 <trimStack>
   12f46:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f48:	|      movea.l 24(sp),a0
   12f4c:	|      move.l 24(a0),d0
   12f50:	|      move.l d0,-(sp)
   12f52:	|      pea 5 <_start+0x5>
   12f56:	|      lea 12(sp),a0
   12f5a:	|      move.l a0,-(sp)
   12f5c:	|      jsr 14884 <getValueType>
   12f62:	|      lea 12(sp),sp
   12f66:	|      tst.w d0
   12f68:	|  /-- bne.s 12f6e <builtIn_parallaxAdd+0x9c>
   12f6a:	|  |   moveq #1,d0
   12f6c:	+--|-- bra.s 12fd4 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12f6e:	|  \-> moveq #24,d0
   12f70:	|      add.l 24(sp),d0
   12f74:	|      move.l d0,-(sp)
   12f76:	|      jsr 15208 <trimStack>
   12f7c:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12f7e:	|      move.l 8(sp),d0
   12f82:	|      move.l d0,d0
   12f84:	|      moveq #0,d2
   12f86:	|      move.w d0,d2
   12f88:	|      move.l 12(sp),d0
   12f8c:	|      move.l d0,d0
   12f8e:	|      moveq #0,d1
   12f90:	|      move.w d0,d1
   12f92:	|      move.l 4(sp),d0
   12f96:	|      move.l d0,d0
   12f98:	|      move.w d0,d0
   12f9a:	|      andi.l #65535,d0
   12fa0:	|      move.l d2,-(sp)
   12fa2:	|      move.l d1,-(sp)
   12fa4:	|      move.l d0,-(sp)
   12fa6:	|      jsr d422 <loadParallax>
   12fac:	|      lea 12(sp),sp
   12fb0:	|      tst.w d0
   12fb2:	|  /-- bne.s 12fb8 <builtIn_parallaxAdd+0xe6>
   12fb4:	|  |   moveq #1,d0
   12fb6:	+--|-- bra.s 12fd4 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12fb8:	|  \-> moveq #28,d0
   12fba:	|      add.l 24(sp),d0
   12fbe:	|      pea 1 <_start+0x1>
   12fc2:	|      pea 1 <_start+0x1>
   12fc6:	|      move.l d0,-(sp)
   12fc8:	|      jsr 15176 <setVariable>
   12fce:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12fd2:	|      moveq #2,d0
}
   12fd4:	\----> move.l (sp)+,d2
   12fd6:	       lea 12(sp),sp
   12fda:	       rts

00012fdc <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12fdc:	jsr d35a <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12fe2:	moveq #28,d0
   12fe4:	add.l 8(sp),d0
   12fe8:	pea 1 <_start+0x1>
   12fec:	pea 1 <_start+0x1>
   12ff0:	move.l d0,-(sp)
   12ff2:	jsr 15176 <setVariable>
   12ff8:	lea 12(sp),sp
	return BR_CONTINUE;
   12ffc:	moveq #2,d0
}
   12ffe:	rts

00013000 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   13000:	pea 19c63 <graphics.c.1c13408a+0x14f>
   13006:	jsr 1729e <KPrintF>
   1300c:	addq.l #4,sp

	return BR_CONTINUE;
   1300e:	moveq #2,d0
}
   13010:	rts

00013012 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   13012:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   13014:	             movea.l 16(sp),a0
   13018:	             movea.l 24(a0),a0
   1301c:	             move.l (a0),d0
   1301e:	             moveq #1,d1
   13020:	             cmp.l d0,d1
   13022:	      /----- beq.s 1306a <builtIn_makeFastArray+0x58>
   13024:	      |      moveq #6,d1
   13026:	      |      cmp.l d0,d1
   13028:	/-----|----- bne.s 130a8 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   1302a:	|     |      movea.l 16(sp),a0
   1302e:	|     |      movea.l 24(a0),a0
   13032:	|     |      move.l 4(a0),d1
   13036:	|     |      moveq #28,d0
   13038:	|     |      add.l 16(sp),d0
   1303c:	|     |      move.l d1,-(sp)
   1303e:	|     |      move.l d0,-(sp)
   13040:	|     |      jsr 14936 <makeFastArrayFromStack>
   13046:	|     |      addq.l #8,sp
   13048:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   1304c:	|     |      moveq #24,d0
   1304e:	|     |      add.l 16(sp),d0
   13052:	|     |      move.l d0,-(sp)
   13054:	|     |      jsr 15208 <trimStack>
   1305a:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   1305c:	|     |      tst.w 6(sp)
   13060:	|     |  /-- beq.s 13066 <builtIn_makeFastArray+0x54>
   13062:	|     |  |   moveq #2,d0
   13064:	|  /--|--|-- bra.s 130ba <builtIn_makeFastArray+0xa8>
   13066:	|  |  |  \-> moveq #1,d0
   13068:	|  +--|----- bra.s 130ba <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   1306a:	|  |  \----> movea.l 16(sp),a0
   1306e:	|  |         movea.l 24(a0),a0
   13072:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   13078:	|  |         moveq #24,d0
   1307a:	|  |         add.l 16(sp),d0
   1307e:	|  |         move.l d0,-(sp)
   13080:	|  |         jsr 15208 <trimStack>
   13086:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   13088:	|  |         moveq #28,d0
   1308a:	|  |         add.l 16(sp),d0
   1308e:	|  |         move.l 2(sp),-(sp)
   13092:	|  |         move.l d0,-(sp)
   13094:	|  |         jsr 149a0 <makeFastArraySize>
   1309a:	|  |         addq.l #8,sp
   1309c:	|  |         tst.w d0
   1309e:	|  |     /-- beq.s 130a4 <builtIn_makeFastArray+0x92>
   130a0:	|  |     |   moveq #2,d0
   130a2:	|  +-----|-- bra.s 130ba <builtIn_makeFastArray+0xa8>
   130a4:	|  |     \-> moveq #1,d0
   130a6:	|  +-------- bra.s 130ba <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   130a8:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   130aa:	   |         pea 19c8c <graphics.c.1c13408a+0x178>
   130b0:	   |         jsr 1729e <KPrintF>
   130b6:	   |         addq.l #4,sp
	return BR_ERROR;
   130b8:	   |         moveq #1,d0
}
   130ba:	   \-------> addq.l #8,sp
   130bc:	             rts

000130be <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   130be:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   130c0:	          movea.l 16(sp),a0
   130c4:	          move.l 24(a0),d0
   130c8:	          move.l d0,-(sp)
   130ca:	          pea 7 <_start+0x7>
   130ce:	          move.l sp,d0
   130d0:	          addq.l #8,d0
   130d2:	          move.l d0,-(sp)
   130d4:	          jsr 14884 <getValueType>
   130da:	          lea 12(sp),sp
   130de:	          tst.w d0
   130e0:	      /-- bne.s 130e6 <builtIn_getCharacterScale+0x28>
   130e2:	      |   moveq #1,d0
   130e4:	/-----|-- bra.s 13160 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   130e6:	|     \-> moveq #24,d0
   130e8:	|         add.l 16(sp),d0
   130ec:	|         move.l d0,-(sp)
   130ee:	|         jsr 15208 <trimStack>
   130f4:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   130f6:	|         move.l (sp),d0
   130f8:	|         move.l d0,-(sp)
   130fa:	|         jsr a75c <findPerson>
   13100:	|         addq.l #4,sp
   13102:	|         move.l d0,4(sp)
	if (pers) {
   13106:	|  /----- beq.s 13146 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   13108:	|  |      movea.l 4(sp),a0
   1310c:	|  |      move.l 32(a0),d0
   13110:	|  |      move.l #1120403456,-(sp)
   13116:	|  |      move.l d0,-(sp)
   13118:	|  |      jsr 1778c <__mulsf3>
   1311e:	|  |      addq.l #8,sp
   13120:	|  |      move.l d0,-(sp)
   13122:	|  |      jsr 17672 <__fixsfsi>
   13128:	|  |      addq.l #4,sp
   1312a:	|  |      move.l d0,d1
   1312c:	|  |      moveq #28,d0
   1312e:	|  |      add.l 16(sp),d0
   13132:	|  |      move.l d1,-(sp)
   13134:	|  |      pea 1 <_start+0x1>
   13138:	|  |      move.l d0,-(sp)
   1313a:	|  |      jsr 15176 <setVariable>
   13140:	|  |      lea 12(sp),sp
   13144:	|  |  /-- bra.s 1315e <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13146:	|  \--|-> moveq #28,d0
   13148:	|     |   add.l 16(sp),d0
   1314c:	|     |   clr.l -(sp)
   1314e:	|     |   pea 1 <_start+0x1>
   13152:	|     |   move.l d0,-(sp)
   13154:	|     |   jsr 15176 <setVariable>
   1315a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1315e:	|     \-> moveq #2,d0
}
   13160:	\-------> addq.l #8,sp
   13162:	          rts

00013164 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   13164:	move.l 1caa0 <gameSettings>,d0
   1316a:	move.l d0,d1
   1316c:	moveq #28,d0
   1316e:	add.l 8(sp),d0
   13172:	move.l d1,-(sp)
   13174:	pea 1 <_start+0x1>
   13178:	move.l d0,-(sp)
   1317a:	jsr 15176 <setVariable>
   13180:	lea 12(sp),sp
	return BR_CONTINUE;
   13184:	moveq #2,d0
}
   13186:	rts

00013188 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13188:	moveq #24,d0
   1318a:	add.l 8(sp),d0
   1318e:	move.l d0,-(sp)
   13190:	jsr 15208 <trimStack>
   13196:	addq.l #4,sp
	trimStack (&fun -> stack);
   13198:	moveq #24,d0
   1319a:	add.l 8(sp),d0
   1319e:	move.l d0,-(sp)
   131a0:	jsr 15208 <trimStack>
   131a6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   131a8:	moveq #28,d0
   131aa:	add.l 8(sp),d0
   131ae:	clr.l -(sp)
   131b0:	pea 1 <_start+0x1>
   131b4:	move.l d0,-(sp)
   131b6:	jsr 15176 <setVariable>
   131bc:	lea 12(sp),sp

	return BR_CONTINUE;
   131c0:	moveq #2,d0

}
   131c2:	rts

000131c4 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   131c4:	move.l 1c344 <lastFramesPerSecond>,d1
   131ca:	moveq #28,d0
   131cc:	add.l 8(sp),d0
   131d0:	move.l d1,-(sp)
   131d2:	pea 1 <_start+0x1>
   131d6:	move.l d0,-(sp)
   131d8:	jsr 15176 <setVariable>
   131de:	lea 12(sp),sp
	return BR_CONTINUE;
   131e2:	moveq #2,d0
}
   131e4:	rts

000131e6 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   131e6:	moveq #2,d0
}
   131e8:	rts

000131ea <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   131ea:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   131ee:	          movea.l 60(sp),a0
   131f2:	          move.l 24(a0),d0
   131f6:	          move.l d0,-(sp)
   131f8:	          pea 1 <_start+0x1>
   131fc:	          pea 1c8da <thumbHeight>
   13202:	          jsr 14884 <getValueType>
   13208:	          lea 12(sp),sp
   1320c:	          tst.w d0
   1320e:	      /-- bne.s 13216 <builtIn_setThumbnailSize+0x2c>
   13210:	      |   moveq #1,d0
   13212:	/-----|-- bra.w 132d2 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13216:	|     \-> moveq #24,d0
   13218:	|         add.l 60(sp),d0
   1321c:	|         move.l d0,-(sp)
   1321e:	|         jsr 15208 <trimStack>
   13224:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13226:	|         movea.l 60(sp),a0
   1322a:	|         move.l 24(a0),d0
   1322e:	|         move.l d0,-(sp)
   13230:	|         pea 1 <_start+0x1>
   13234:	|         pea 1c8d6 <thumbWidth>
   1323a:	|         jsr 14884 <getValueType>
   13240:	|         lea 12(sp),sp
   13244:	|         tst.w d0
   13246:	|     /-- bne.s 1324e <builtIn_setThumbnailSize+0x64>
   13248:	|     |   moveq #1,d0
   1324a:	+-----|-- bra.w 132d2 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1324e:	|     \-> moveq #24,d0
   13250:	|         add.l 60(sp),d0
   13254:	|         move.l d0,-(sp)
   13256:	|         jsr 15208 <trimStack>
   1325c:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   1325e:	|         move.l 1c8d6 <thumbWidth>,d0
   13264:	|     /-- bmi.s 13292 <builtIn_setThumbnailSize+0xa8>
   13266:	|     |   move.l 1c8da <thumbHeight>,d0
   1326c:	|     +-- bmi.s 13292 <builtIn_setThumbnailSize+0xa8>
   1326e:	|     |   move.l 1c8d6 <thumbWidth>,d0
   13274:	|     |   move.l d0,d1
   13276:	|     |   move.l 1c918 <winWidth>,d0
   1327c:	|     |   cmp.l d1,d0
   1327e:	|     +-- bcs.s 13292 <builtIn_setThumbnailSize+0xa8>
   13280:	|     |   move.l 1c8da <thumbHeight>,d0
   13286:	|     |   move.l d0,d1
   13288:	|     |   move.l 1c91c <winHeight>,d0
   1328e:	|     |   cmp.l d1,d0
   13290:	|  /--|-- bcc.s 132d0 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   13292:	|  |  \-> move.l 1c8da <thumbHeight>,d1
   13298:	|  |      move.l 1c8d6 <thumbWidth>,d0
   1329e:	|  |      move.l d1,-(sp)
   132a0:	|  |      move.l d0,-(sp)
   132a2:	|  |      pea 19cb3 <graphics.c.1c13408a+0x19f>
   132a8:	|  |      lea 14(sp),a0
   132ac:	|  |      move.l a0,-(sp)
   132ae:	|  |      jsr 1408e <sprintf>
   132b4:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   132b8:	|  |      lea 2(sp),a0
   132bc:	|  |      move.l a0,-(sp)
   132be:	|  |      pea 19cbb <graphics.c.1c13408a+0x1a7>
   132c4:	|  |      jsr 1729e <KPrintF>
   132ca:	|  |      addq.l #8,sp
		return BR_ERROR;
   132cc:	|  |      moveq #1,d0
   132ce:	+--|----- bra.s 132d2 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   132d0:	|  \----> moveq #2,d0
}
   132d2:	\-------> lea 52(sp),sp
   132d6:	          rts

000132d8 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   132d8:	       lea -12(sp),sp
   132dc:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   132de:	       movea.l 24(sp),a0
   132e2:	       move.l 24(a0),d0
   132e6:	       move.l d0,-(sp)
   132e8:	       pea 1 <_start+0x1>
   132ec:	       lea 12(sp),a0
   132f0:	       move.l a0,-(sp)
   132f2:	       jsr 14884 <getValueType>
   132f8:	       lea 12(sp),sp
   132fc:	       tst.w d0
   132fe:	   /-- bne.s 13306 <builtIn_hasFlag+0x2e>
   13300:	   |   moveq #1,d0
   13302:	/--|-- bra.w 13396 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13306:	|  \-> moveq #24,d0
   13308:	|      add.l 24(sp),d0
   1330c:	|      move.l d0,-(sp)
   1330e:	|      jsr 15208 <trimStack>
   13314:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13316:	|      movea.l 24(sp),a0
   1331a:	|      move.l 24(a0),d0
   1331e:	|      move.l d0,-(sp)
   13320:	|      pea 7 <_start+0x7>
   13324:	|      moveq #16,d0
   13326:	|      add.l sp,d0
   13328:	|      move.l d0,-(sp)
   1332a:	|      jsr 14884 <getValueType>
   13330:	|      lea 12(sp),sp
   13334:	|      tst.w d0
   13336:	|  /-- bne.s 1333c <builtIn_hasFlag+0x64>
   13338:	|  |   moveq #1,d0
   1333a:	+--|-- bra.s 13396 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1333c:	|  \-> moveq #24,d0
   1333e:	|      add.l 24(sp),d0
   13342:	|      move.l d0,-(sp)
   13344:	|      jsr 15208 <trimStack>
   1334a:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   1334c:	|      move.l 8(sp),d0
   13350:	|      move.l d0,-(sp)
   13352:	|      jsr d5ce <findObjectType>
   13358:	|      addq.l #4,sp
   1335a:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   1335e:	|  /-- bne.s 13364 <builtIn_hasFlag+0x8c>
   13360:	|  |   moveq #1,d0
   13362:	+--|-- bra.s 13396 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   13364:	|  \-> movea.l 12(sp),a0
   13368:	|      move.w 36(a0),d0
   1336c:	|      moveq #0,d2
   1336e:	|      move.w d0,d2
   13370:	|      move.l 4(sp),d1
   13374:	|      moveq #1,d0
   13376:	|      lsl.l d1,d0
   13378:	|      move.l d2,d1
   1337a:	|      and.l d0,d1
   1337c:	|      moveq #28,d0
   1337e:	|      add.l 24(sp),d0
   13382:	|      move.l d1,-(sp)
   13384:	|      pea 1 <_start+0x1>
   13388:	|      move.l d0,-(sp)
   1338a:	|      jsr 15176 <setVariable>
   13390:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13394:	|      moveq #2,d0
}
   13396:	\----> move.l (sp)+,d2
   13398:	       lea 12(sp),sp
   1339c:	       rts

0001339e <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   1339e:	       jsr d5bc <snapshot>
   133a4:	       tst.w d0
   133a6:	/----- beq.s 133ac <builtIn_snapshotGrab+0xe>
   133a8:	|      moveq #2,d0
   133aa:	|  /-- bra.s 133ae <builtIn_snapshotGrab+0x10>
   133ac:	\--|-> moveq #1,d0
}
   133ae:	   \-> rts

000133b0 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   133b0:	jsr d468 <nosnapshot>
	return BR_CONTINUE;
   133b6:	moveq #2,d0
}
   133b8:	rts

000133ba <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   133ba:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   133bc:	move.w 1c220 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   133c4:	movea.l 12(sp),a0
   133c8:	move.l 24(a0),d0
   133cc:	move.l d0,-(sp)
   133ce:	jsr 14dc4 <getBoolean>
   133d4:	addq.l #4,sp
   133d6:	move.w d0,1c220 <allowAnyFilename>
	trimStack (&fun -> stack);
   133dc:	moveq #24,d0
   133de:	add.l 12(sp),d0
   133e2:	move.l d0,-(sp)
   133e4:	jsr 15208 <trimStack>
   133ea:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   133ec:	movea.w 2(sp),a0
   133f0:	moveq #28,d0
   133f2:	add.l 12(sp),d0
   133f6:	move.l a0,-(sp)
   133f8:	pea 1 <_start+0x1>
   133fc:	move.l d0,-(sp)
   133fe:	jsr 15176 <setVariable>
   13404:	lea 12(sp),sp
	return BR_CONTINUE;
   13408:	moveq #2,d0
}
   1340a:	addq.l #4,sp
   1340c:	rts

0001340e <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1340e:	moveq #24,d0
   13410:	add.l 8(sp),d0
   13414:	move.l d0,-(sp)
   13416:	jsr 15208 <trimStack>
   1341c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1341e:	moveq #24,d0
   13420:	add.l 8(sp),d0
   13424:	move.l d0,-(sp)
   13426:	jsr 15208 <trimStack>
   1342c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   1342e:	moveq #28,d0
   13430:	add.l 8(sp),d0
   13434:	clr.l -(sp)
   13436:	pea 1 <_start+0x1>
   1343a:	move.l d0,-(sp)
   1343c:	jsr 15176 <setVariable>
   13442:	lea 12(sp),sp

	return BR_CONTINUE;
   13446:	moveq #2,d0
}
   13448:	rts

0001344a <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   1344a:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   1344c:	movea.l 12(sp),a0
   13450:	move.l 24(a0),d0
   13454:	move.l d0,-(sp)
   13456:	jsr 14e5a <getTextFromAnyVar>
   1345c:	addq.l #4,sp
   1345e:	move.l d0,(sp)
	trimStack (&fun -> stack);
   13460:	moveq #24,d0
   13462:	add.l 12(sp),d0
   13466:	move.l d0,-(sp)
   13468:	jsr 15208 <trimStack>
   1346e:	addq.l #4,sp
	KPrintF (mess);
   13470:	move.l (sp),-(sp)
   13472:	jsr 1729e <KPrintF>
   13478:	addq.l #4,sp
	return BR_ERROR;
   1347a:	moveq #1,d0
}
   1347c:	addq.l #4,sp
   1347e:	rts

00013480 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13480:	moveq #24,d0
   13482:	add.l 8(sp),d0
   13486:	move.l d0,-(sp)
   13488:	jsr 15208 <trimStack>
   1348e:	addq.l #4,sp
	trimStack (&fun -> stack);
   13490:	moveq #24,d0
   13492:	add.l 8(sp),d0
   13496:	move.l d0,-(sp)
   13498:	jsr 15208 <trimStack>
   1349e:	addq.l #4,sp
	trimStack (&fun -> stack);
   134a0:	moveq #24,d0
   134a2:	add.l 8(sp),d0
   134a6:	move.l d0,-(sp)
   134a8:	jsr 15208 <trimStack>
   134ae:	addq.l #4,sp
	trimStack (&fun -> stack);
   134b0:	moveq #24,d0
   134b2:	add.l 8(sp),d0
   134b6:	move.l d0,-(sp)
   134b8:	jsr 15208 <trimStack>
   134be:	addq.l #4,sp

	return BR_CONTINUE;
   134c0:	moveq #2,d0
}
   134c2:	rts

000134c4 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   134c4:	moveq #24,d0
   134c6:	add.l 8(sp),d0
   134ca:	move.l d0,-(sp)
   134cc:	jsr 15208 <trimStack>
   134d2:	addq.l #4,sp
	trimStack (&fun -> stack);
   134d4:	moveq #24,d0
   134d6:	add.l 8(sp),d0
   134da:	move.l d0,-(sp)
   134dc:	jsr 15208 <trimStack>
   134e2:	addq.l #4,sp
	trimStack (&fun -> stack);
   134e4:	moveq #24,d0
   134e6:	add.l 8(sp),d0
   134ea:	move.l d0,-(sp)
   134ec:	jsr 15208 <trimStack>
   134f2:	addq.l #4,sp

	return BR_CONTINUE;
   134f4:	moveq #2,d0

}
   134f6:	rts

000134f8 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   134f8:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   134fa:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13500:	sne d0
   13502:	neg.b d0
   13504:	moveq #0,d1
   13506:	move.b d0,d1
   13508:	moveq #28,d0
   1350a:	add.l 12(sp),d0
   1350e:	move.l d1,-(sp)
   13510:	pea 1 <_start+0x1>
   13514:	move.l d0,-(sp)
   13516:	jsr 15176 <setVariable>
   1351c:	lea 12(sp),sp
	return BR_CONTINUE;
   13520:	moveq #2,d0
}
   13522:	addq.l #4,sp
   13524:	rts

00013526 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13526:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13528:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   1352e:	pea 19cd2 <graphics.c.1c13408a+0x1be>
   13534:	jsr 1729e <KPrintF>
   1353a:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1353c:	tst.w 2(sp)
   13540:	sne d0
   13542:	neg.b d0
   13544:	moveq #0,d1
   13546:	move.b d0,d1
   13548:	moveq #28,d0
   1354a:	add.l 12(sp),d0
   1354e:	move.l d1,-(sp)
   13550:	pea 1 <_start+0x1>
   13554:	move.l d0,-(sp)
   13556:	jsr 15176 <setVariable>
   1355c:	lea 12(sp),sp
	return BR_CONTINUE;
   13560:	moveq #2,d0
}
   13562:	addq.l #4,sp
   13564:	rts

00013566 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   13566:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   1356a:	             move.l 104(sp),d0
   1356e:	             cmpi.l #166,d0
   13574:	/----------- bhi.w 13656 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   13578:	|            move.l 104(sp),d0
   1357c:	|            add.l d0,d0
   1357e:	|            movea.l d0,a1
   13580:	|            adda.l d0,a1
   13582:	|            lea 1c366 <paramNum>,a0
   13588:	|            move.l (0,a1,a0.l),d0
   1358c:	|            moveq #-1,d1
   1358e:	|            cmp.l d0,d1
   13590:	|  /-------- beq.w 1361e <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13594:	|  |         move.l 104(sp),d0
   13598:	|  |         add.l d0,d0
   1359a:	|  |         movea.l d0,a1
   1359c:	|  |         adda.l d0,a1
   1359e:	|  |         lea 1c366 <paramNum>,a0
   135a4:	|  |         move.l (0,a1,a0.l),d0
   135a8:	|  |         cmp.l 108(sp),d0
   135ac:	|  +-------- beq.s 1361e <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   135ae:	|  |         move.l 104(sp),d0
   135b2:	|  |         add.l d0,d0
   135b4:	|  |         movea.l d0,a1
   135b6:	|  |         adda.l d0,a1
   135b8:	|  |         lea 1c366 <paramNum>,a0
   135be:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   135c2:	|  |         moveq #1,d1
   135c4:	|  |         cmp.l d0,d1
   135c6:	|  |  /----- bne.s 135d0 <callBuiltIn+0x6a>
   135c8:	|  |  |      move.l #100846,d0
   135ce:	|  |  |  /-- bra.s 135d6 <callBuiltIn+0x70>
   135d0:	|  |  \--|-> move.l #105736,d0
   135d6:	|  |     \-> move.l 104(sp),d1
   135da:	|  |         add.l d1,d1
   135dc:	|  |         movea.l d1,a1
   135de:	|  |         adda.l d1,a1
   135e0:	|  |         lea 1c366 <paramNum>,a0
   135e6:	|  |         move.l (0,a1,a0.l),d1
   135ea:	|  |         move.l d0,-(sp)
   135ec:	|  |         move.l d1,-(sp)
   135ee:	|  |         pea 19d0a <graphics.c.1c13408a+0x1f6>
   135f4:	|  |         lea 12(sp),a0
   135f8:	|  |         move.l a0,-(sp)
   135fa:	|  |         jsr 1408e <sprintf>
   13600:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13604:	|  |         movea.l sp,a0
   13606:	|  |         move.l a0,-(sp)
   13608:	|  |         jsr b8 <copyString>
   1360e:	|  |         addq.l #4,sp
   13610:	|  |         move.l d0,-(sp)
   13612:	|  |         jsr 1729e <KPrintF>
   13618:	|  |         addq.l #4,sp
				return BR_ERROR;
   1361a:	|  |         moveq #1,d0
   1361c:	|  |     /-- bra.s 13666 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   1361e:	|  \-----|-> move.l 104(sp),d0
   13622:	|        |   add.l d0,d0
   13624:	|        |   movea.l d0,a1
   13626:	|        |   adda.l d0,a1
   13628:	|        |   lea 1c602 <builtInFunctionArray>,a0
   1362e:	|        |   move.l (0,a1,a0.l),d0
   13632:	+--------|-- beq.s 13656 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13634:	|        |   move.l 104(sp),d0
   13638:	|        |   add.l d0,d0
   1363a:	|        |   movea.l d0,a1
   1363c:	|        |   adda.l d0,a1
   1363e:	|        |   lea 1c602 <builtInFunctionArray>,a0
   13644:	|        |   movea.l (0,a1,a0.l),a0
   13648:	|        |   move.l 112(sp),-(sp)
   1364c:	|        |   move.l 112(sp),-(sp)
   13650:	|        |   jsr (a0)
   13652:	|        |   addq.l #8,sp
   13654:	|        +-- bra.s 13666 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   13656:	\--------|-> pea 19d35 <graphics.c.1c13408a+0x221>
   1365c:	         |   jsr 1729e <KPrintF>
   13662:	         |   addq.l #4,sp
	return BR_ERROR;
   13664:	         |   moveq #1,d0
}
   13666:	         \-> lea 100(sp),sp
   1366a:	             rts

0001366c <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   1366c:	          subq.l #8,sp
	int indexNum = -1;
   1366e:	          moveq #-1,d0
   13670:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13674:	          clr.l (sp)
   13676:	   /----- bra.s 1369c <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   13678:	/--|----> move.l 1ca98 <languageTable>,d1
   1367e:	|  |      move.l (sp),d0
   13680:	|  |      add.l d0,d0
   13682:	|  |      add.l d0,d0
   13684:	|  |      movea.l d1,a0
   13686:	|  |      adda.l d0,a0
   13688:	|  |      move.l (a0),d0
   1368a:	|  |      move.l d0,d1
   1368c:	|  |      move.l 1caa0 <gameSettings>,d0
   13692:	|  |      cmp.l d1,d0
   13694:	|  |  /-- bne.s 1369a <getLanguageForFileB+0x2e>
   13696:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1369a:	|  |  \-> addq.l #1,(sp)
   1369c:	|  \----> move.l 1caa4 <gameSettings+0x4>,d0
   136a2:	|         cmp.l (sp),d0
   136a4:	\-------- bcc.s 13678 <getLanguageForFileB+0xc>
	}

	return indexNum;
   136a6:	          move.l 4(sp),d0
}
   136aa:	          addq.l #8,sp
   136ac:	          rts

000136ae <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   136ae:	          lea -20(sp),sp
   136b2:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   136b4:	          move.l 28(sp),-(sp)
   136b8:	          jsr 13d70 <strlen>
   136be:	          addq.l #4,sp
   136c0:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   136c4:	          moveq #4,d0
   136c6:	          cmp.l 12(sp),d0
   136ca:	      /-- bge.s 136ee <getPrefsFilename+0x40>
   136cc:	      |   move.l 12(sp),d0
   136d0:	      |   subq.l #4,d0
   136d2:	      |   movea.l 28(sp),a0
   136d6:	      |   adda.l d0,a0
   136d8:	      |   move.b (a0),d0
   136da:	      |   cmpi.b #46,d0
   136de:	      +-- bne.s 136ee <getPrefsFilename+0x40>
		filename[n-4] = 0;
   136e0:	      |   move.l 12(sp),d0
   136e4:	      |   subq.l #4,d0
   136e6:	      |   movea.l 28(sp),a0
   136ea:	      |   adda.l d0,a0
   136ec:	      |   clr.b (a0)
	}

	char * f = filename;
   136ee:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   136f4:	          clr.l 20(sp)
   136f8:	   /----- bra.s 13720 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   136fa:	/--|----> move.l 20(sp),d0
   136fe:	|  |      movea.l 28(sp),a0
   13702:	|  |      adda.l d0,a0
   13704:	|  |      move.b (a0),d0
   13706:	|  |      cmpi.b #47,d0
   1370a:	|  |  /-- bne.s 1371c <getPrefsFilename+0x6e>
   1370c:	|  |  |   move.l 20(sp),d0
   13710:	|  |  |   addq.l #1,d0
   13712:	|  |  |   move.l 28(sp),d1
   13716:	|  |  |   add.l d0,d1
   13718:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   1371c:	|  |  \-> addq.l #1,20(sp)
   13720:	|  \----> move.l 20(sp),d0
   13724:	|         cmp.l 12(sp),d0
   13728:	\-------- blt.s 136fa <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   1372a:	          pea 19d60 <graphics.c.1c13408a+0x24c>
   13730:	          move.l 20(sp),-(sp)
   13734:	          jsr 13db0 <joinStrings>
   1373a:	          addq.l #8,sp
   1373c:	          move.l d0,8(sp)

	FreeVec(filename);
   13740:	          move.l 28(sp),4(sp)
   13746:	          move.l 1c9c4 <SysBase>,d0
   1374c:	          movea.l d0,a6
   1374e:	          movea.l 4(sp),a1
   13752:	          jsr -690(a6)
	filename = NULL;
   13756:	          clr.l 28(sp)
	return joined;
   1375a:	          move.l 8(sp),d0
}
   1375e:	          movea.l (sp)+,a6
   13760:	          lea 20(sp),sp
   13764:	          rts

00013766 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   13766:	             lea -28(sp),sp
   1376a:	             move.l a6,-(sp)
   1376c:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1376e:	             move.l 1caa4 <gameSettings+0x4>,d0
   13774:	             move.l d0,d1
   13776:	             addq.l #1,d1
   13778:	             move.l d1,28(sp)
   1377c:	             clr.l 24(sp)
   13780:	             move.l 1c9c4 <SysBase>,d0
   13786:	             movea.l d0,a6
   13788:	             move.l 28(sp),d0
   1378c:	             move.l 24(sp),d1
   13790:	             jsr -684(a6)
   13794:	             move.l d0,20(sp)
   13798:	             move.l 20(sp),d0
   1379c:	             move.l d0,1ca98 <languageTable>
    if( languageTable == 0) {
   137a2:	             move.l 1ca98 <languageTable>,d0
   137a8:	         /-- bne.s 137b8 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   137aa:	         |   pea 19d65 <graphics.c.1c13408a+0x251>
   137b0:	         |   jsr 1729e <KPrintF>
   137b6:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   137b8:	         \-> move.l 1caa4 <gameSettings+0x4>,d0
   137be:	             move.l d0,d1
   137c0:	             addq.l #1,d1
   137c2:	             move.l d1,16(sp)
   137c6:	             clr.l 12(sp)
   137ca:	             move.l 1c9c4 <SysBase>,d0
   137d0:	             movea.l d0,a6
   137d2:	             move.l 16(sp),d0
   137d6:	             move.l 12(sp),d1
   137da:	             jsr -684(a6)
   137de:	             move.l d0,8(sp)
   137e2:	             move.l 8(sp),d0
   137e6:	             move.l d0,1ca9c <languageName>
	if( languageName == 0) {
   137ec:	             move.l 1ca9c <languageName>,d0
   137f2:	         /-- bne.s 13802 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   137f4:	         |   pea 19d9b <graphics.c.1c13408a+0x287>
   137fa:	         |   jsr 1729e <KPrintF>
   13800:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13802:	         \-> clr.l 32(sp)
   13806:	   /-------- bra.s 1387e <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13808:	/--|-------> tst.l 32(sp)
   1380c:	|  |  /----- beq.s 1381c <makeLanguageTable+0xb6>
   1380e:	|  |  |      move.l 40(sp),-(sp)
   13812:	|  |  |      jsr 6bc <get2bytes>
   13818:	|  |  |      addq.l #4,sp
   1381a:	|  |  |  /-- bra.s 1381e <makeLanguageTable+0xb8>
   1381c:	|  |  \--|-> moveq #0,d0
   1381e:	|  |     \-> movea.l 1ca98 <languageTable>,a0
   13824:	|  |         move.l 32(sp),d1
   13828:	|  |         add.l d1,d1
   1382a:	|  |         add.l d1,d1
   1382c:	|  |         adda.l d1,a0
   1382e:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13830:	|  |         move.l 1ca9c <languageName>,d1
   13836:	|  |         move.l 32(sp),d0
   1383a:	|  |         add.l d0,d0
   1383c:	|  |         add.l d0,d0
   1383e:	|  |         movea.l d1,a0
   13840:	|  |         adda.l d0,a0
   13842:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13844:	|  |         move.l 1c96e <gameVersion>,d0
   1384a:	|  |         cmpi.l #511,d0
   13850:	|  |     /-- ble.s 1387a <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   13852:	|  |     |   move.l 1caa4 <gameSettings+0x4>,d0
   13858:	|  |     +-- beq.s 1387a <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   1385a:	|  |     |   move.l 1ca9c <languageName>,d1
   13860:	|  |     |   move.l 32(sp),d0
   13864:	|  |     |   add.l d0,d0
   13866:	|  |     |   add.l d0,d0
   13868:	|  |     |   movea.l d1,a2
   1386a:	|  |     |   adda.l d0,a2
   1386c:	|  |     |   move.l 40(sp),-(sp)
   13870:	|  |     |   jsr b02 <readString>
   13876:	|  |     |   addq.l #4,sp
   13878:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1387a:	|  |     \-> addq.l #1,32(sp)
   1387e:	|  \-------> move.l 1caa4 <gameSettings+0x4>,d0
   13884:	|            cmp.l 32(sp),d0
   13888:	\----------- bcc.w 13808 <makeLanguageTable+0xa2>
		}
	}
}
   1388c:	             nop
   1388e:	             nop
   13890:	             movea.l (sp)+,a2
   13892:	             movea.l (sp)+,a6
   13894:	             lea 28(sp),sp
   13898:	             rts

0001389a <readIniFile>:

void readIniFile (char * filename) {
   1389a:	                      lea -564(sp),sp
   1389e:	                      move.l a6,-(sp)
   138a0:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   138a2:	                      move.l 576(sp),-(sp)
   138a6:	                      jsr b8 <copyString>
   138ac:	                      addq.l #4,sp
   138ae:	                      move.l d0,-(sp)
   138b0:	                      jsr 136ae <getPrefsFilename>
   138b6:	                      addq.l #4,sp
   138b8:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   138bc:	                      move.l 562(sp),558(sp)
   138c2:	                      move.l #1005,554(sp)
   138ca:	                      move.l 1c9cc <DOSBase>,d0
   138d0:	                      movea.l d0,a6
   138d2:	                      move.l 558(sp),d1
   138d6:	                      move.l 554(sp),d2
   138da:	                      jsr -30(a6)
   138de:	                      move.l d0,550(sp)
   138e2:	                      move.l 550(sp),d0
   138e6:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   138ea:	                      clr.l 1caa0 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   138f0:	                      move.w #1,1caa8 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   138f8:	                      clr.l 1caaa <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   138fe:	                      moveq #1,d0
   13900:	                      move.l d0,1caae <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13906:	                      clr.w 1cab2 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   1390c:	                      clr.w 1cab4 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13912:	                      clr.w 1cab6 <gameSettings+0x16>

	FreeVec(langName);
   13918:	                      move.l 562(sp),542(sp)
   1391e:	                      move.l 1c9c4 <SysBase>,d0
   13924:	                      movea.l d0,a6
   13926:	                      movea.l 542(sp),a1
   1392a:	                      jsr -690(a6)
	langName = NULL;
   1392e:	                      clr.l 562(sp)

	if (fp) {
   13932:	                      tst.l 546(sp)
   13936:	/-------------------- beq.w 13c14 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   1393a:	|                     move.l sp,d0
   1393c:	|                     addi.l #265,d0
   13942:	|                     move.l #257,d1
   13948:	|                     move.l d1,-(sp)
   1394a:	|                     clr.l -(sp)
   1394c:	|                     move.l d0,-(sp)
   1394e:	|                     jsr 17222 <memset>
   13954:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13958:	|                     move.l sp,d0
   1395a:	|                     addq.l #8,d0
   1395c:	|                     move.l #257,d1
   13962:	|                     move.l d1,-(sp)
   13964:	|                     clr.l -(sp)
   13966:	|                     move.l d0,-(sp)
   13968:	|                     jsr 17222 <memset>
   1396e:	|                     lea 12(sp),sp
		unsigned char here = 0;
   13972:	|                     clr.b 571(sp)
		char readChar = ' ';
   13976:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   1397c:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   13982:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13986:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   1398a:	|  /----------------> move.l 546(sp),534(sp)
   13990:	|  |                  move.l 1c9cc <DOSBase>,d0
   13996:	|  |                  movea.l d0,a6
   13998:	|  |                  move.l 534(sp),d1
   1399c:	|  |                  jsr -306(a6)
   139a0:	|  |                  move.l d0,530(sp)
   139a4:	|  |                  move.l 530(sp),d0
   139a8:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   139ac:	|  |                  moveq #-1,d1
   139ae:	|  |                  cmp.l 538(sp),d1
   139b2:	|  |           /----- bne.s 139c0 <readIniFile+0x126>
				readChar = '\n';
   139b4:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   139ba:	|  |           |      clr.w 568(sp)
   139be:	|  |           |  /-- bra.s 139c6 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   139c0:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   139c6:	|  |              \-> move.b 570(sp),d0
   139ca:	|  |                  ext.w d0
   139cc:	|  |                  movea.w d0,a0
   139ce:	|  |                  moveq #61,d0
   139d0:	|  |                  cmp.l a0,d0
   139d2:	|  |     /----------- beq.w 13b7c <readIniFile+0x2e2>
   139d6:	|  |     |            moveq #61,d1
   139d8:	|  |     |            cmp.l a0,d1
   139da:	|  |  /--|----------- blt.w 13b88 <readIniFile+0x2ee>
   139de:	|  |  |  |            moveq #10,d0
   139e0:	|  |  |  |            cmp.l a0,d0
   139e2:	|  |  |  |        /-- beq.s 139ec <readIniFile+0x152>
   139e4:	|  |  |  |        |   moveq #13,d1
   139e6:	|  |  |  |        |   cmp.l a0,d1
   139e8:	|  |  +--|--------|-- bne.w 13b88 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   139ec:	|  |  |  |        \-> tst.w 566(sp)
   139f0:	|  |  |  |     /----- beq.w 13b6a <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   139f4:	|  |  |  |     |      pea 19dcf <graphics.c.1c13408a+0x2bb>
   139fa:	|  |  |  |     |      move.l sp,d0
   139fc:	|  |  |  |     |      addi.l #269,d0
   13a02:	|  |  |  |     |      move.l d0,-(sp)
   13a04:	|  |  |  |     |      jsr 13d30 <strcmp>
   13a0a:	|  |  |  |     |      addq.l #8,sp
   13a0c:	|  |  |  |     |      tst.l d0
   13a0e:	|  |  |  |     |  /-- bne.s 13a28 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13a10:	|  |  |  |     |  |   move.l sp,d0
   13a12:	|  |  |  |     |  |   addq.l #8,d0
   13a14:	|  |  |  |     |  |   move.l d0,-(sp)
   13a16:	|  |  |  |     |  |   jsr 13c20 <stringToInt>
   13a1c:	|  |  |  |     |  |   addq.l #4,sp
   13a1e:	|  |  |  |     |  |   move.l d0,1caa0 <gameSettings>
   13a24:	|  |  |  |     +--|-- bra.w 13b6a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13a28:	|  |  |  |     |  \-> pea 19dd8 <graphics.c.1c13408a+0x2c4>
   13a2e:	|  |  |  |     |      move.l sp,d0
   13a30:	|  |  |  |     |      addi.l #269,d0
   13a36:	|  |  |  |     |      move.l d0,-(sp)
   13a38:	|  |  |  |     |      jsr 13d30 <strcmp>
   13a3e:	|  |  |  |     |      addq.l #8,sp
   13a40:	|  |  |  |     |      tst.l d0
   13a42:	|  |  |  |     |  /-- bne.s 13a68 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13a44:	|  |  |  |     |  |   move.l sp,d0
   13a46:	|  |  |  |     |  |   addq.l #8,d0
   13a48:	|  |  |  |     |  |   move.l d0,-(sp)
   13a4a:	|  |  |  |     |  |   jsr 13c20 <stringToInt>
   13a50:	|  |  |  |     |  |   addq.l #4,sp
   13a52:	|  |  |  |     |  |   tst.l d0
   13a54:	|  |  |  |     |  |   seq d0
   13a56:	|  |  |  |     |  |   neg.b d0
   13a58:	|  |  |  |     |  |   move.b d0,d0
   13a5a:	|  |  |  |     |  |   andi.w #255,d0
   13a5e:	|  |  |  |     |  |   move.w d0,1caa8 <gameSettings+0x8>
   13a64:	|  |  |  |     +--|-- bra.w 13b6a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13a68:	|  |  |  |     |  \-> pea 19ddf <graphics.c.1c13408a+0x2cb>
   13a6e:	|  |  |  |     |      move.l sp,d0
   13a70:	|  |  |  |     |      addi.l #269,d0
   13a76:	|  |  |  |     |      move.l d0,-(sp)
   13a78:	|  |  |  |     |      jsr 13d30 <strcmp>
   13a7e:	|  |  |  |     |      addq.l #8,sp
   13a80:	|  |  |  |     |      tst.l d0
   13a82:	|  |  |  |     |  /-- bne.s 13a9c <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13a84:	|  |  |  |     |  |   move.l sp,d0
   13a86:	|  |  |  |     |  |   addq.l #8,d0
   13a88:	|  |  |  |     |  |   move.l d0,-(sp)
   13a8a:	|  |  |  |     |  |   jsr 13c20 <stringToInt>
   13a90:	|  |  |  |     |  |   addq.l #4,sp
   13a92:	|  |  |  |     |  |   move.l d0,1caaa <gameSettings+0xa>
   13a98:	|  |  |  |     +--|-- bra.w 13b6a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13a9c:	|  |  |  |     |  \-> pea 19de7 <graphics.c.1c13408a+0x2d3>
   13aa2:	|  |  |  |     |      move.l sp,d0
   13aa4:	|  |  |  |     |      addi.l #269,d0
   13aaa:	|  |  |  |     |      move.l d0,-(sp)
   13aac:	|  |  |  |     |      jsr 13d30 <strcmp>
   13ab2:	|  |  |  |     |      addq.l #8,sp
   13ab4:	|  |  |  |     |      tst.l d0
   13ab6:	|  |  |  |     |  /-- bne.s 13ad0 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13ab8:	|  |  |  |     |  |   move.l sp,d0
   13aba:	|  |  |  |     |  |   addq.l #8,d0
   13abc:	|  |  |  |     |  |   move.l d0,-(sp)
   13abe:	|  |  |  |     |  |   jsr 13c20 <stringToInt>
   13ac4:	|  |  |  |     |  |   addq.l #4,sp
   13ac6:	|  |  |  |     |  |   move.l d0,1caae <gameSettings+0xe>
   13acc:	|  |  |  |     +--|-- bra.w 13b6a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13ad0:	|  |  |  |     |  \-> pea 19df1 <graphics.c.1c13408a+0x2dd>
   13ad6:	|  |  |  |     |      move.l sp,d0
   13ad8:	|  |  |  |     |      addi.l #269,d0
   13ade:	|  |  |  |     |      move.l d0,-(sp)
   13ae0:	|  |  |  |     |      jsr 13d30 <strcmp>
   13ae6:	|  |  |  |     |      addq.l #8,sp
   13ae8:	|  |  |  |     |      tst.l d0
   13aea:	|  |  |  |     |  /-- bne.s 13b04 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13aec:	|  |  |  |     |  |   move.l sp,d0
   13aee:	|  |  |  |     |  |   addq.l #8,d0
   13af0:	|  |  |  |     |  |   move.l d0,-(sp)
   13af2:	|  |  |  |     |  |   jsr 13c20 <stringToInt>
   13af8:	|  |  |  |     |  |   addq.l #4,sp
   13afa:	|  |  |  |     |  |   move.l d0,d0
   13afc:	|  |  |  |     |  |   move.w d0,1cab2 <gameSettings+0x12>
   13b02:	|  |  |  |     +--|-- bra.s 13b6a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13b04:	|  |  |  |     |  \-> pea 19dfd <graphics.c.1c13408a+0x2e9>
   13b0a:	|  |  |  |     |      move.l sp,d0
   13b0c:	|  |  |  |     |      addi.l #269,d0
   13b12:	|  |  |  |     |      move.l d0,-(sp)
   13b14:	|  |  |  |     |      jsr 13d30 <strcmp>
   13b1a:	|  |  |  |     |      addq.l #8,sp
   13b1c:	|  |  |  |     |      tst.l d0
   13b1e:	|  |  |  |     |  /-- bne.s 13b38 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13b20:	|  |  |  |     |  |   move.l sp,d0
   13b22:	|  |  |  |     |  |   addq.l #8,d0
   13b24:	|  |  |  |     |  |   move.l d0,-(sp)
   13b26:	|  |  |  |     |  |   jsr 13c20 <stringToInt>
   13b2c:	|  |  |  |     |  |   addq.l #4,sp
   13b2e:	|  |  |  |     |  |   move.l d0,d0
   13b30:	|  |  |  |     |  |   move.w d0,1cab4 <gameSettings+0x14>
   13b36:	|  |  |  |     +--|-- bra.s 13b6a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13b38:	|  |  |  |     |  \-> pea 19e0b <graphics.c.1c13408a+0x2f7>
   13b3e:	|  |  |  |     |      move.l sp,d0
   13b40:	|  |  |  |     |      addi.l #269,d0
   13b46:	|  |  |  |     |      move.l d0,-(sp)
   13b48:	|  |  |  |     |      jsr 13d30 <strcmp>
   13b4e:	|  |  |  |     |      addq.l #8,sp
   13b50:	|  |  |  |     |      tst.l d0
   13b52:	|  |  |  |     +----- bne.s 13b6a <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13b54:	|  |  |  |     |      move.l sp,d0
   13b56:	|  |  |  |     |      addq.l #8,d0
   13b58:	|  |  |  |     |      move.l d0,-(sp)
   13b5a:	|  |  |  |     |      jsr 13c20 <stringToInt>
   13b60:	|  |  |  |     |      addq.l #4,sp
   13b62:	|  |  |  |     |      move.l d0,d0
   13b64:	|  |  |  |     |      move.w d0,1cab6 <gameSettings+0x16>
					}
				}
				here = 0;
   13b6a:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   13b6e:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13b72:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13b76:	|  |  |  |            clr.b 8(sp)
				break;
   13b7a:	|  |  |  |  /-------- bra.s 13bf2 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13b7c:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   13b82:	|  |  |     |         clr.b 571(sp)
				break;
   13b86:	|  |  |     +-------- bra.s 13bf2 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13b88:	|  |  \-----|-------> tst.w 566(sp)
   13b8c:	|  |        |  /----- beq.s 13bc0 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13b8e:	|  |        |  |      move.b 571(sp),d0
   13b92:	|  |        |  |      move.b d0,d1
   13b94:	|  |        |  |      addq.b #1,d1
   13b96:	|  |        |  |      move.b d1,571(sp)
   13b9a:	|  |        |  |      move.b d0,d0
   13b9c:	|  |        |  |      andi.l #255,d0
   13ba2:	|  |        |  |      lea 572(sp),a0
   13ba6:	|  |        |  |      adda.l d0,a0
   13ba8:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13bae:	|  |        |  |      moveq #0,d0
   13bb0:	|  |        |  |      move.b 571(sp),d0
   13bb4:	|  |        |  |      lea 572(sp),a0
   13bb8:	|  |        |  |      adda.l d0,a0
   13bba:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13bbe:	|  |        |  |  /-- bra.s 13bf0 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13bc0:	|  |        |  \--|-> move.b 571(sp),d0
   13bc4:	|  |        |     |   move.b d0,d1
   13bc6:	|  |        |     |   addq.b #1,d1
   13bc8:	|  |        |     |   move.b d1,571(sp)
   13bcc:	|  |        |     |   move.b d0,d0
   13bce:	|  |        |     |   andi.l #255,d0
   13bd4:	|  |        |     |   lea 572(sp),a0
   13bd8:	|  |        |     |   adda.l d0,a0
   13bda:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13be0:	|  |        |     |   moveq #0,d0
   13be2:	|  |        |     |   move.b 571(sp),d0
   13be6:	|  |        |     |   lea 572(sp),a0
   13bea:	|  |        |     |   adda.l d0,a0
   13bec:	|  |        |     |   clr.b -307(a0)
				break;
   13bf0:	|  |        |     \-> nop
			}
		} while (keepGoing);
   13bf2:	|  |        \-------> tst.w 568(sp)
   13bf6:	|  \----------------- bne.w 1398a <readIniFile+0xf0>

		Close(fp);
   13bfa:	|                     move.l 546(sp),526(sp)
   13c00:	|                     move.l 1c9cc <DOSBase>,d0
   13c06:	|                     movea.l d0,a6
   13c08:	|                     move.l 526(sp),d1
   13c0c:	|                     jsr -36(a6)
   13c10:	|                     move.l d0,522(sp)
	}
}
   13c14:	\-------------------> nop
   13c16:	                      move.l (sp)+,d2
   13c18:	                      movea.l (sp)+,a6
   13c1a:	                      lea 564(sp),sp
   13c1e:	                      rts

00013c20 <stringToInt>:

unsigned int stringToInt (char * s) {
   13c20:	             subq.l #8,sp
	int i = 0;
   13c22:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13c26:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13c2a:	/----------> movea.l 12(sp),a0
   13c2e:	|            move.b (a0),d0
   13c30:	|            cmpi.b #47,d0
   13c34:	|        /-- ble.s 13c6c <stringToInt+0x4c>
   13c36:	|        |   movea.l 12(sp),a0
   13c3a:	|        |   move.b (a0),d0
   13c3c:	|        |   cmpi.b #57,d0
   13c40:	|        +-- bgt.s 13c6c <stringToInt+0x4c>
			i *= 10;
   13c42:	|        |   move.l 4(sp),d1
   13c46:	|        |   move.l d1,d0
   13c48:	|        |   add.l d0,d0
   13c4a:	|        |   add.l d0,d0
   13c4c:	|        |   add.l d1,d0
   13c4e:	|        |   add.l d0,d0
   13c50:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13c54:	|        |   movea.l 12(sp),a0
   13c58:	|        |   move.b (a0),d0
   13c5a:	|        |   ext.w d0
   13c5c:	|        |   movea.w d0,a0
   13c5e:	|        |   moveq #-48,d0
   13c60:	|        |   add.l a0,d0
   13c62:	|        |   add.l d0,4(sp)
			s ++;
   13c66:	|        |   addq.l #1,12(sp)
   13c6a:	|  /-----|-- bra.s 13ca4 <stringToInt+0x84>
		} else if (*s == '-') {
   13c6c:	|  |     \-> movea.l 12(sp),a0
   13c70:	|  |         move.b (a0),d0
   13c72:	|  |         cmpi.b #45,d0
   13c76:	|  |     /-- bne.s 13c90 <stringToInt+0x70>
			negative = ! negative;
   13c78:	|  |     |   tst.w 2(sp)
   13c7c:	|  |     |   seq d0
   13c7e:	|  |     |   neg.b d0
   13c80:	|  |     |   move.b d0,d0
   13c82:	|  |     |   andi.w #255,d0
   13c86:	|  |     |   move.w d0,2(sp)
			s++;
   13c8a:	|  |     |   addq.l #1,12(sp)
   13c8e:	+--|-----|-- bra.s 13c2a <stringToInt+0xa>
		} else {
			if (negative)
   13c90:	|  |     \-> tst.w 2(sp)
   13c94:	|  |     /-- beq.s 13c9e <stringToInt+0x7e>
				return -i;
   13c96:	|  |     |   move.l 4(sp),d0
   13c9a:	|  |     |   neg.l d0
   13c9c:	|  |  /--|-- bra.s 13ca6 <stringToInt+0x86>
			return i;
   13c9e:	|  |  |  \-> move.l 4(sp),d0
   13ca2:	|  |  +----- bra.s 13ca6 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13ca4:	\--\--|----X bra.s 13c2a <stringToInt+0xa>
		}
	}
   13ca6:	      \----> addq.l #8,sp
   13ca8:	             rts

00013caa <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13caa:	    lea -28(sp),sp
   13cae:	    move.l a6,-(sp)
   13cb0:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13cb2:	    pea 19e15 <graphics.c.1c13408a+0x301>
   13cb8:	    jsr 1729e <KPrintF>
   13cbe:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13cc0:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13cc4:	    move.l 40(sp),30(sp)
   13cca:	    move.l #1005,26(sp)
   13cd2:	    move.l 1c9cc <DOSBase>,d0
   13cd8:	    movea.l d0,a6
   13cda:	    move.l 30(sp),d1
   13cde:	    move.l 26(sp),d2
   13ce2:	    jsr -30(a6)
   13ce6:	    move.l d0,22(sp)
   13cea:	    move.l 22(sp),d0
   13cee:	    move.l d0,18(sp)
	if (tester) {
   13cf2:	/-- beq.s 13d22 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13cf4:	|   pea 19e2f <graphics.c.1c13408a+0x31b>
   13cfa:	|   jsr 1729e <KPrintF>
   13d00:	|   addq.l #4,sp
		retval = 1;
   13d02:	|   move.b #1,35(sp)
		Close(tester);
   13d08:	|   move.l 18(sp),14(sp)
   13d0e:	|   move.l 1c9cc <DOSBase>,d0
   13d14:	|   movea.l d0,a6
   13d16:	|   move.l 14(sp),d1
   13d1a:	|   jsr -36(a6)
   13d1e:	|   move.l d0,10(sp)
	}
	return retval;
   13d22:	\-> move.b 35(sp),d0
   13d26:	    move.l (sp)+,d2
   13d28:	    movea.l (sp)+,a6
   13d2a:	    lea 28(sp),sp
   13d2e:	    rts

00013d30 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13d30:	   /-- bra.s 13d3a <strcmp+0xa>
    {
        s1++;
   13d32:	/--|-> addq.l #1,4(sp)
        s2++;
   13d36:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13d3a:	|  \-> movea.l 4(sp),a0
   13d3e:	|      move.b (a0),d0
   13d40:	|  /-- beq.s 13d52 <strcmp+0x22>
   13d42:	|  |   movea.l 4(sp),a0
   13d46:	|  |   move.b (a0),d1
   13d48:	|  |   movea.l 8(sp),a0
   13d4c:	|  |   move.b (a0),d0
   13d4e:	|  |   cmp.b d1,d0
   13d50:	\--|-- beq.s 13d32 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13d52:	   \-> movea.l 4(sp),a0
   13d56:	       move.b (a0),d0
   13d58:	       moveq #0,d1
   13d5a:	       move.b d0,d1
   13d5c:	       movea.l 8(sp),a0
   13d60:	       move.b (a0),d0
   13d62:	       move.b d0,d0
   13d64:	       andi.l #255,d0
   13d6a:	       sub.l d0,d1
   13d6c:	       move.l d1,d0
}
   13d6e:	       rts

00013d70 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13d70:	       subq.l #4,sp
	long unsigned int i = 0;
   13d72:	       clr.l (sp)
	while(s[i]) i++; 
   13d74:	   /-- bra.s 13d78 <strlen+0x8>
   13d76:	/--|-> addq.l #1,(sp)
   13d78:	|  \-> movea.l 8(sp),a0
   13d7c:	|      adda.l (sp),a0
   13d7e:	|      move.b (a0),d0
   13d80:	\----- bne.s 13d76 <strlen+0x6>
	return(i);
   13d82:	       move.l (sp),d0
}
   13d84:	       addq.l #4,sp
   13d86:	       rts

00013d88 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13d88:	    nop
   13d8a:	/-> move.l 8(sp),d0
   13d8e:	|   move.l d0,d1
   13d90:	|   addq.l #1,d1
   13d92:	|   move.l d1,8(sp)
   13d96:	|   movea.l 4(sp),a0
   13d9a:	|   lea 1(a0),a1
   13d9e:	|   move.l a1,4(sp)
   13da2:	|   movea.l d0,a1
   13da4:	|   move.b (a1),d0
   13da6:	|   move.b d0,(a0)
   13da8:	|   move.b (a0),d0
   13daa:	\-- bne.s 13d8a <strcpy+0x2>
}
   13dac:	    nop
   13dae:	    rts

00013db0 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13db0:	    lea -20(sp),sp
   13db4:	    move.l a6,-(sp)
   13db6:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13db8:	    move.l 32(sp),-(sp)
   13dbc:	    jsr 13d70 <strlen>
   13dc2:	    addq.l #4,sp
   13dc4:	    move.l d0,d2
   13dc6:	    move.l 36(sp),-(sp)
   13dca:	    jsr 13d70 <strlen>
   13dd0:	    addq.l #4,sp
   13dd2:	    add.l d2,d0
   13dd4:	    move.l d0,d1
   13dd6:	    addq.l #1,d1
   13dd8:	    move.l d1,20(sp)
   13ddc:	    clr.l 16(sp)
   13de0:	    move.l 1c9c4 <SysBase>,d0
   13de6:	    movea.l d0,a6
   13de8:	    move.l 20(sp),d0
   13dec:	    move.l 16(sp),d1
   13df0:	    jsr -684(a6)
   13df4:	    move.l d0,12(sp)
   13df8:	    move.l 12(sp),d0
   13dfc:	    move.l d0,8(sp)
	char * t = newString;
   13e00:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13e06:	    nop
   13e08:	/-> move.l 32(sp),d0
   13e0c:	|   move.l d0,d1
   13e0e:	|   addq.l #1,d1
   13e10:	|   move.l d1,32(sp)
   13e14:	|   movea.l 24(sp),a0
   13e18:	|   lea 1(a0),a1
   13e1c:	|   move.l a1,24(sp)
   13e20:	|   movea.l d0,a1
   13e22:	|   move.b (a1),d0
   13e24:	|   move.b d0,(a0)
   13e26:	|   move.b (a0),d0
   13e28:	\-- bne.s 13e08 <joinStrings+0x58>
	t--;
   13e2a:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13e2e:	    nop
   13e30:	/-> move.l 36(sp),d0
   13e34:	|   move.l d0,d1
   13e36:	|   addq.l #1,d1
   13e38:	|   move.l d1,36(sp)
   13e3c:	|   movea.l 24(sp),a0
   13e40:	|   lea 1(a0),a1
   13e44:	|   move.l a1,24(sp)
   13e48:	|   movea.l d0,a1
   13e4a:	|   move.b (a1),d0
   13e4c:	|   move.b d0,(a0)
   13e4e:	|   move.b (a0),d0
   13e50:	\-- bne.s 13e30 <joinStrings+0x80>

	return newString;
   13e52:	    move.l 8(sp),d0
}
   13e56:	    move.l (sp)+,d2
   13e58:	    movea.l (sp)+,a6
   13e5a:	    lea 20(sp),sp
   13e5e:	    rts

00013e60 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13e60:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13e64:	       moveq #10,d0
   13e66:	       cmp.l 28(sp),d0
   13e6a:	   /-- bne.s 13e88 <itoa+0x28>
   13e6c:	   |   tst.l 20(sp)
   13e70:	   +-- bge.s 13e88 <itoa+0x28>
        *str++ = '-';
   13e72:	   |   move.l 24(sp),d0
   13e76:	   |   move.l d0,d1
   13e78:	   |   addq.l #1,d1
   13e7a:	   |   move.l d1,24(sp)
   13e7e:	   |   movea.l d0,a0
   13e80:	   |   move.b #45,(a0)
        value *= -1;
   13e84:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13e88:	   \-> move.l 24(sp),12(sp)
   13e8e:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13e94:	   /-> move.l 20(sp),d0
   13e98:	   |   move.l 28(sp),-(sp)
   13e9c:	   |   move.l d0,-(sp)
   13e9e:	   |   jsr 17d08 <__modsi3>
   13ea4:	   |   addq.l #8,sp
   13ea6:	   |   movea.l d0,a1
   13ea8:	   |   move.l 12(sp),d0
   13eac:	   |   move.l d0,d1
   13eae:	   |   addq.l #1,d1
   13eb0:	   |   move.l d1,12(sp)
   13eb4:	   |   lea 19e47 <graphics.c.1c13408a+0x333>,a0
   13eba:	   |   move.b (0,a1,a0.l),d1
   13ebe:	   |   movea.l d0,a0
   13ec0:	   |   move.b d1,(a0)
        value /= base;
   13ec2:	   |   move.l 28(sp),-(sp)
   13ec6:	   |   move.l 24(sp),-(sp)
   13eca:	   |   jsr 17cda <__divsi3>
   13ed0:	   |   addq.l #8,sp
   13ed2:	   |   move.l d0,20(sp)
    } while (value);
   13ed6:	   \-- bne.s 13e94 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13ed8:	       move.l 12(sp),d0
   13edc:	       move.l d0,d1
   13ede:	       subq.l #1,d1
   13ee0:	       move.l d1,12(sp)
   13ee4:	       movea.l d0,a0
   13ee6:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13ee8:	       move.l 4(sp),8(sp)
   13eee:	   /-- bra.s 13f14 <itoa+0xb4>
        char temp = *low;
   13ef0:	/--|-> movea.l 8(sp),a0
   13ef4:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13ef8:	|  |   movea.l 12(sp),a0
   13efc:	|  |   move.b (a0),d0
   13efe:	|  |   movea.l 8(sp),a0
   13f02:	|  |   move.b d0,(a0)
        *ptr = temp;
   13f04:	|  |   movea.l 12(sp),a0
   13f08:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13f0c:	|  |   addq.l #1,8(sp)
   13f10:	|  |   subq.l #1,12(sp)
   13f14:	|  \-> move.l 8(sp),d0
   13f18:	|      cmp.l 12(sp),d0
   13f1c:	\----- bcs.s 13ef0 <itoa+0x90>
    }
    return rc;
   13f1e:	       move.l 4(sp),d0
}
   13f22:	       lea 16(sp),sp
   13f26:	       rts

00013f28 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13f28:	                            lea -40(sp),sp
   13f2c:	                            move.l d2,-(sp)
    char* s = str;
   13f2e:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13f34:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13f3a:	   /----------------------- bra.w 1406e <vsprintf2+0x146>
        if (*p == '%') {
   13f3e:	/--|----------------------> movea.l 36(sp),a0
   13f42:	|  |                        move.b (a0),d0
   13f44:	|  |                        cmpi.b #37,d0
   13f48:	|  |  /-------------------- bne.w 14054 <vsprintf2+0x12c>
            switch (*++p) {
   13f4c:	|  |  |                     addq.l #1,36(sp)
   13f50:	|  |  |                     movea.l 36(sp),a0
   13f54:	|  |  |                     move.b (a0),d0
   13f56:	|  |  |                     ext.w d0
   13f58:	|  |  |                     movea.w d0,a0
   13f5a:	|  |  |                     moveq #115,d0
   13f5c:	|  |  |                     cmp.l a0,d0
   13f5e:	|  |  |           /-------- beq.s 13fd6 <vsprintf2+0xae>
   13f60:	|  |  |           |         moveq #115,d1
   13f62:	|  |  |           |         cmp.l a0,d1
   13f64:	|  |  |  /--------|-------- blt.w 1403c <vsprintf2+0x114>
   13f68:	|  |  |  |        |         moveq #99,d2
   13f6a:	|  |  |  |        |         cmp.l a0,d2
   13f6c:	|  |  |  |  /-----|-------- beq.w 14014 <vsprintf2+0xec>
   13f70:	|  |  |  |  |     |         moveq #100,d0
   13f72:	|  |  |  |  |     |         cmp.l a0,d0
   13f74:	|  |  |  +--|-----|-------- bne.w 1403c <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13f78:	|  |  |  |  |     |         addq.l #4,56(sp)
   13f7c:	|  |  |  |  |     |         movea.l 56(sp),a0
   13f80:	|  |  |  |  |     |         move.l (a0),d0
   13f82:	|  |  |  |  |     |         move.l d0,d1
   13f84:	|  |  |  |  |     |         subq.l #1,d1
   13f86:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13f8a:	|  |  |  |  |     |         pea a <_start+0xa>
   13f8e:	|  |  |  |  |     |         lea 8(sp),a0
   13f92:	|  |  |  |  |     |         move.l a0,-(sp)
   13f94:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13f98:	|  |  |  |  |     |         jsr 13e60 <itoa>
   13f9e:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13fa2:	|  |  |  |  |     |         lea 44(sp),a0
   13fa6:	|  |  |  |  |     |         lea -40(a0),a0
   13faa:	|  |  |  |  |     |         move.l a0,28(sp)
   13fae:	|  |  |  |  |     |     /-- bra.s 13fca <vsprintf2+0xa2>
                        *s++ = *b;
   13fb0:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   13fb4:	|  |  |  |  |     |  |  |   move.l d0,d1
   13fb6:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13fb8:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13fbc:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13fc0:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13fc2:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13fc4:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13fc6:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13fca:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   13fce:	|  |  |  |  |     |  |      move.b (a0),d0
   13fd0:	|  |  |  |  |     |  \----- bne.s 13fb0 <vsprintf2+0x88>
                    }
                    break;
   13fd2:	|  |  |  |  |  /--|-------- bra.w 1406a <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13fd6:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   13fda:	|  |  |  |  |  |            movea.l 56(sp),a0
   13fde:	|  |  |  |  |  |            move.l (a0),d0
   13fe0:	|  |  |  |  |  |            move.l d0,d1
   13fe2:	|  |  |  |  |  |            subq.l #1,d1
   13fe4:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13fe8:	|  |  |  |  |  |        /-- bra.s 1400a <vsprintf2+0xe2>
                        *s++ = *sval++;
   13fea:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   13fee:	|  |  |  |  |  |     |  |   move.l d1,d2
   13ff0:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13ff2:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13ff6:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13ffa:	|  |  |  |  |  |     |  |   move.l d0,d2
   13ffc:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13ffe:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   14002:	|  |  |  |  |  |     |  |   movea.l d1,a0
   14004:	|  |  |  |  |  |     |  |   move.b (a0),d1
   14006:	|  |  |  |  |  |     |  |   movea.l d0,a0
   14008:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   1400a:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   1400e:	|  |  |  |  |  |     |      move.b (a0),d0
   14010:	|  |  |  |  |  |     \----- bne.s 13fea <vsprintf2+0xc2>
                    }
                    break;
   14012:	|  |  |  |  |  +----------- bra.s 1406a <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   14014:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   14018:	|  |  |  |     |            movea.l 56(sp),a0
   1401c:	|  |  |  |     |            move.l (a0),d0
   1401e:	|  |  |  |     |            move.l d0,d1
   14020:	|  |  |  |     |            subq.l #1,d1
   14022:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   14026:	|  |  |  |     |            move.l 40(sp),d0
   1402a:	|  |  |  |     |            move.l d0,d2
   1402c:	|  |  |  |     |            addq.l #1,d2
   1402e:	|  |  |  |     |            move.l d2,40(sp)
   14032:	|  |  |  |     |            move.l 24(sp),d1
   14036:	|  |  |  |     |            movea.l d0,a0
   14038:	|  |  |  |     |            move.b d1,(a0)
                    break;
   1403a:	|  |  |  |     +----------- bra.s 1406a <vsprintf2+0x142>
                default:
                    *s++ = *p;
   1403c:	|  |  |  \-----|----------> move.l 40(sp),d0
   14040:	|  |  |        |            move.l d0,d1
   14042:	|  |  |        |            addq.l #1,d1
   14044:	|  |  |        |            move.l d1,40(sp)
   14048:	|  |  |        |            movea.l 36(sp),a0
   1404c:	|  |  |        |            move.b (a0),d1
   1404e:	|  |  |        |            movea.l d0,a0
   14050:	|  |  |        |            move.b d1,(a0)
                    break;
   14052:	|  |  |        +----------- bra.s 1406a <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   14054:	|  |  \--------|----------> move.l 40(sp),d0
   14058:	|  |           |            move.l d0,d1
   1405a:	|  |           |            addq.l #1,d1
   1405c:	|  |           |            move.l d1,40(sp)
   14060:	|  |           |            movea.l 36(sp),a0
   14064:	|  |           |            move.b (a0),d1
   14066:	|  |           |            movea.l d0,a0
   14068:	|  |           |            move.b d1,(a0)
        }
        p++;
   1406a:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   1406e:	|  \----------------------> movea.l 36(sp),a0
   14072:	|                           move.b (a0),d0
   14074:	\-------------------------- bne.w 13f3e <vsprintf2+0x16>
    }
    *s = '\0';
   14078:	                            movea.l 40(sp),a0
   1407c:	                            clr.b (a0)
    return s - str;
   1407e:	                            move.l 40(sp),d0
   14082:	                            sub.l 48(sp),d0
}
   14086:	                            move.l (sp)+,d2
   14088:	                            lea 40(sp),sp
   1408c:	                            rts

0001408e <sprintf>:

int sprintf(char* str, const char* format, ...) {
   1408e:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   14090:	moveq #16,d0
   14092:	add.l sp,d0
   14094:	move.l d0,d1
   14096:	addq.l #4,d1
   14098:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   1409c:	move.l 16(sp),d0
   140a0:	move.l 4(sp),-(sp)
   140a4:	move.l d0,-(sp)
   140a6:	move.l 20(sp),-(sp)
   140aa:	jsr 13f28 <vsprintf2>
   140b0:	lea 12(sp),sp
   140b4:	move.l d0,(sp)
    va_end(args);
   140b6:	clr.l 4(sp)

    return done;
   140ba:	move.l (sp),d0
}
   140bc:	addq.l #8,sp
   140be:	rts

000140c0 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   140c0:	       lea -20(sp),sp
   140c4:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   140c6:	       moveq #12,d0
   140c8:	       move.l d0,20(sp)
   140cc:	       clr.l 16(sp)
   140d0:	       move.l 1c9c4 <SysBase>,d0
   140d6:	       movea.l d0,a6
   140d8:	       move.l 20(sp),d0
   140dc:	       move.l 16(sp),d1
   140e0:	       jsr -684(a6)
   140e4:	       move.l d0,12(sp)
   140e8:	       move.l 12(sp),d0
   140ec:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   140f0:	   /-- bne.s 140f6 <addVarToStack+0x36>
   140f2:	   |   clr.w d0
   140f4:	/--|-- bra.s 1413e <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   140f6:	|  \-> move.l 8(sp),d0
   140fa:	|      move.l d0,-(sp)
   140fc:	|      move.l 32(sp),-(sp)
   14100:	|      jsr 14c22 <copyMain>
   14106:	|      addq.l #8,sp
   14108:	|      tst.w d0
   1410a:	|  /-- bne.s 14126 <addVarToStack+0x66>
        FreeVec(newStack);
   1410c:	|  |   move.l 8(sp),4(sp)
   14112:	|  |   move.l 1c9c4 <SysBase>,d0
   14118:	|  |   movea.l d0,a6
   1411a:	|  |   movea.l 4(sp),a1
   1411e:	|  |   jsr -690(a6)
        return FALSE;
   14122:	|  |   clr.w d0
   14124:	+--|-- bra.s 1413e <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   14126:	|  \-> movea.l 32(sp),a0
   1412a:	|      move.l (a0),d0
   1412c:	|      movea.l 8(sp),a0
   14130:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14134:	|      movea.l 32(sp),a0
   14138:	|      move.l 8(sp),(a0)
    return TRUE;
   1413c:	|      moveq #1,d0
}
   1413e:	\----> movea.l (sp)+,a6
   14140:	       lea 20(sp),sp
   14144:	       rts

00014146 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   14146:	       lea -16(sp),sp
   1414a:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1414c:	       moveq #12,d0
   1414e:	       move.l d0,16(sp)
   14152:	       clr.l 12(sp)
   14156:	       move.l 1c9c4 <SysBase>,d0
   1415c:	       movea.l d0,a6
   1415e:	       move.l 16(sp),d0
   14162:	       move.l 12(sp),d1
   14166:	       jsr -684(a6)
   1416a:	       move.l d0,8(sp)
   1416e:	       move.l 8(sp),d0
   14172:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   14176:	   /-- bne.s 1417c <addVarToStackQuick+0x36>
   14178:	   |   clr.w d0
   1417a:	/--|-- bra.s 141b2 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   1417c:	|  \-> move.l 4(sp),d0
   14180:	|      pea 8 <_start+0x8>
   14184:	|      move.l 28(sp),-(sp)
   14188:	|      move.l d0,-(sp)
   1418a:	|      jsr 17252 <memcpy>
   14190:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   14194:	|      movea.l 24(sp),a0
   14198:	|      clr.l (a0)

    newStack->next = *thisStack;
   1419a:	|      movea.l 28(sp),a0
   1419e:	|      move.l (a0),d0
   141a0:	|      movea.l 4(sp),a0
   141a4:	|      move.l d0,8(a0)
    *thisStack = newStack;
   141a8:	|      movea.l 28(sp),a0
   141ac:	|      move.l 4(sp),(a0)
    return TRUE;
   141b0:	|      moveq #1,d0
}
   141b2:	\----> movea.l (sp)+,a6
   141b4:	       lea 16(sp),sp
   141b8:	       rts

000141ba <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   141ba:	       lea -16(sp),sp
   141be:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   141c0:	       movea.l 24(sp),a0
   141c4:	       move.l (a0),d0
   141c6:	       moveq #1,d1
   141c8:	       cmp.l d0,d1
   141ca:	   /-- bne.s 141f4 <addVariablesInSecond+0x3a>
   141cc:	   |   movea.l 28(sp),a0
   141d0:	   |   move.l (a0),d0
   141d2:	   |   moveq #1,d1
   141d4:	   |   cmp.l d0,d1
   141d6:	   +-- bne.s 141f4 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   141d8:	   |   movea.l 28(sp),a0
   141dc:	   |   move.l 4(a0),d1
   141e0:	   |   movea.l 24(sp),a0
   141e4:	   |   move.l 4(a0),d0
   141e8:	   |   add.l d1,d0
   141ea:	   |   movea.l 28(sp),a0
   141ee:	   |   move.l d0,4(a0)
   141f2:	/--|-- bra.s 1426e <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   141f4:	|  \-> move.l 24(sp),-(sp)
   141f8:	|      jsr 14e5a <getTextFromAnyVar>
   141fe:	|      addq.l #4,sp
   14200:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   14204:	|      move.l 28(sp),-(sp)
   14208:	|      jsr 14e5a <getTextFromAnyVar>
   1420e:	|      addq.l #4,sp
   14210:	|      move.l d0,12(sp)

		unlinkVar(var2);
   14214:	|      move.l 28(sp),-(sp)
   14218:	|      jsr 14ad2 <unlinkVar>
   1421e:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   14220:	|      move.l 12(sp),-(sp)
   14224:	|      move.l 20(sp),-(sp)
   14228:	|      jsr 13db0 <joinStrings>
   1422e:	|      addq.l #8,sp
   14230:	|      movea.l 28(sp),a0
   14234:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   14238:	|      movea.l 28(sp),a0
   1423c:	|      moveq #3,d0
   1423e:	|      move.l d0,(a0)
		FreeVec(string1);
   14240:	|      move.l 16(sp),8(sp)
   14246:	|      move.l 1c9c4 <SysBase>,d0
   1424c:	|      movea.l d0,a6
   1424e:	|      movea.l 8(sp),a1
   14252:	|      jsr -690(a6)
		FreeVec(string2);
   14256:	|      move.l 12(sp),4(sp)
   1425c:	|      move.l 1c9c4 <SysBase>,d0
   14262:	|      movea.l d0,a6
   14264:	|      movea.l 4(sp),a1
   14268:	|      jsr -690(a6)
	}
}
   1426c:	|      nop
   1426e:	\----> nop
   14270:	       movea.l (sp)+,a6
   14272:	       lea 16(sp),sp
   14276:	       rts

00014278 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   14278:	movea.l 8(sp),a0
   1427c:	move.l 4(a0),-(sp)
   14280:	move.l (a0),-(sp)
   14282:	movea.l 12(sp),a0
   14286:	move.l 4(a0),-(sp)
   1428a:	move.l (a0),-(sp)
   1428c:	jsr 142ae <compareVars>
   14292:	lea 16(sp),sp
   14296:	move.l d0,-(sp)
   14298:	pea 1 <_start+0x1>
   1429c:	move.l 16(sp),-(sp)
   142a0:	jsr 15176 <setVariable>
   142a6:	lea 12(sp),sp
}
   142aa:	nop
   142ac:	rts

000142ae <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   142ae:	       subq.l #4,sp
	int re = 0;
   142b0:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   142b2:	       move.l 8(sp),d1
   142b6:	       move.l 16(sp),d0
   142ba:	       cmp.l d1,d0
   142bc:	/----- bne.w 14384 <compareVars+0xd6>
		switch (var1.varType) {
   142c0:	|      move.l 8(sp),d0
   142c4:	|      moveq #9,d1
   142c6:	|      cmp.l d0,d1
   142c8:	|  /-- bcs.w 1436c <compareVars+0xbe>
   142cc:	|  |   add.l d0,d0
   142ce:	|  |   movea.l d0,a0
   142d0:	|  |   adda.l #82652,a0
   142d6:	|  |   move.w (a0),d0
   142d8:	|  |   jmp (142dc <compareVars+0x2e>,pc,d0.w)
   142dc:	|  |   ori.b #-112,(a4)
   142e0:	|  |   ori.l #5243024,(a0)
   142e6:	|  |   ori.l #7733392,(a0)
   142ec:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   142f2:	|  |   move.l d0,(sp)
			break;
   142f4:	+--|-- bra.w 14384 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   142f8:	|  |   move.l 12(sp),d1
   142fc:	|  |   move.l 20(sp),d0
   14300:	|  |   cmp.l d1,d0
   14302:	|  |   seq d0
   14304:	|  |   neg.b d0
   14306:	|  |   move.b d0,d0
   14308:	|  |   andi.l #255,d0
   1430e:	|  |   move.l d0,(sp)
			break;
   14310:	+--|-- bra.s 14384 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14312:	|  |   move.l 12(sp),d1
   14316:	|  |   move.l 20(sp),d0
   1431a:	|  |   cmp.l d1,d0
   1431c:	|  |   seq d0
   1431e:	|  |   neg.b d0
   14320:	|  |   move.b d0,d0
   14322:	|  |   andi.l #255,d0
   14328:	|  |   move.l d0,(sp)
			break;
   1432a:	+--|-- bra.s 14384 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   1432c:	|  |   move.l 20(sp),d1
   14330:	|  |   move.l 12(sp),d0
   14334:	|  |   move.l d1,-(sp)
   14336:	|  |   move.l d0,-(sp)
   14338:	|  |   jsr 13d30 <strcmp>
   1433e:	|  |   addq.l #8,sp
   14340:	|  |   tst.l d0
   14342:	|  |   seq d0
   14344:	|  |   neg.b d0
   14346:	|  |   move.b d0,d0
   14348:	|  |   andi.l #255,d0
   1434e:	|  |   move.l d0,(sp)
			break;
   14350:	+--|-- bra.s 14384 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   14352:	|  |   move.l 12(sp),d1
   14356:	|  |   move.l 20(sp),d0
   1435a:	|  |   cmp.l d1,d0
   1435c:	|  |   seq d0
   1435e:	|  |   neg.b d0
   14360:	|  |   move.b d0,d0
   14362:	|  |   andi.l #255,d0
   14368:	|  |   move.l d0,(sp)
			break;
   1436a:	+--|-- bra.s 14384 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   1436c:	|  \-> move.l 12(sp),d1
   14370:	|      move.l 20(sp),d0
   14374:	|      cmp.l d1,d0
   14376:	|      seq d0
   14378:	|      neg.b d0
   1437a:	|      move.b d0,d0
   1437c:	|      andi.l #255,d0
   14382:	|      move.l d0,(sp)
		}
	}
	return re;
   14384:	\----> move.l (sp),d0
}
   14386:	       addq.l #4,sp
   14388:	       rts

0001438a <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1438a:	             lea -16(sp),sp
   1438e:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   14390:	             movea.l 28(sp),a0
   14394:	             moveq #6,d0
   14396:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   14398:	             moveq #12,d0
   1439a:	             move.l d0,12(sp)
   1439e:	             clr.l 8(sp)
   143a2:	             move.l 1c9c4 <SysBase>,d0
   143a8:	             movea.l d0,a6
   143aa:	             move.l 12(sp),d0
   143ae:	             move.l 8(sp),d1
   143b2:	             jsr -684(a6)
   143b6:	             move.l d0,4(sp)
   143ba:	             move.l 4(sp),d0
   143be:	             movea.l 28(sp),a0
   143c2:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   143c6:	             movea.l 28(sp),a0
   143ca:	             move.l 4(a0),d0
   143ce:	         /-- bne.s 143d6 <copyStack+0x4c>
   143d0:	         |   clr.w d0
   143d2:	/--------|-- bra.w 14458 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   143d6:	|        \-> movea.l 28(sp),a0
   143da:	|            movea.l 4(a0),a0
   143de:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   143e0:	|            movea.l 28(sp),a0
   143e4:	|            movea.l 4(a0),a0
   143e8:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   143ec:	|            movea.l 28(sp),a0
   143f0:	|            movea.l 4(a0),a0
   143f4:	|            moveq #1,d0
   143f6:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   143fa:	|            movea.l 24(sp),a0
   143fe:	|            movea.l 4(a0),a0
   14402:	|            move.l (a0),16(sp)

	while (a) {
   14406:	|     /----- bra.s 14450 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   14408:	|  /--|----> movea.l 28(sp),a0
   1440c:	|  |  |      move.l 4(a0),d0
   14410:	|  |  |      move.l d0,d1
   14412:	|  |  |      move.l 16(sp),d0
   14416:	|  |  |      move.l d1,-(sp)
   14418:	|  |  |      move.l d0,-(sp)
   1441a:	|  |  |      jsr 140c0 <addVarToStack>
   14420:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14422:	|  |  |      movea.l 28(sp),a0
   14426:	|  |  |      movea.l 4(a0),a0
   1442a:	|  |  |      move.l 4(a0),d0
   1442e:	|  |  |  /-- bne.s 14446 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   14430:	|  |  |  |   movea.l 28(sp),a0
   14434:	|  |  |  |   movea.l 4(a0),a1
   14438:	|  |  |  |   movea.l 28(sp),a0
   1443c:	|  |  |  |   movea.l 4(a0),a0
   14440:	|  |  |  |   move.l (a1),d0
   14442:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   14446:	|  |  |  \-> movea.l 16(sp),a0
   1444a:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   14450:	|  |  \----> tst.l 16(sp)
   14454:	|  \-------- bne.s 14408 <copyStack+0x7e>
	}

	return TRUE;
   14456:	|            moveq #1,d0
}
   14458:	\----------> movea.l (sp)+,a6
   1445a:	             lea 16(sp),sp
   1445e:	             rts

00014460 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   14460:	                lea -20(sp),sp
   14464:	                move.l a6,-(sp)
   14466:	                move.l 36(sp),d0
   1446a:	                move.w d0,d0
   1446c:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   14470:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   14476:	                clr.l 16(sp)

    while (*huntVar) {
   1447a:	   /----------- bra.s 144f8 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   1447c:	/--|----------> movea.l 20(sp),a0
   14480:	|  |            movea.l (a0),a0
   14482:	|  |            movea.l 28(sp),a1
   14486:	|  |            move.l 4(a1),-(sp)
   1448a:	|  |            move.l (a1),-(sp)
   1448c:	|  |            move.l 4(a0),-(sp)
   14490:	|  |            move.l (a0),-(sp)
   14492:	|  |            jsr 142ae <compareVars>
   14498:	|  |            lea 16(sp),sp
   1449c:	|  |            tst.l d0
   1449e:	|  |  /-------- beq.s 144ea <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   144a0:	|  |  |         movea.l 20(sp),a0
   144a4:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   144a8:	|  |  |         movea.l 12(sp),a0
   144ac:	|  |  |         move.l 8(a0),d0
   144b0:	|  |  |         movea.l 20(sp),a0
   144b4:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   144b6:	|  |  |         move.l 12(sp),d0
   144ba:	|  |  |         move.l d0,-(sp)
   144bc:	|  |  |         jsr 14ad2 <unlinkVar>
   144c2:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   144c4:	|  |  |         move.l 12(sp),8(sp)
   144ca:	|  |  |         move.l 1c9c4 <SysBase>,d0
   144d0:	|  |  |         movea.l d0,a6
   144d2:	|  |  |         movea.l 8(sp),a1
   144d6:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   144da:	|  |  |         tst.w 6(sp)
   144de:	|  |  |     /-- bne.s 144e4 <deleteVarFromStack+0x84>
   144e0:	|  |  |     |   moveq #1,d0
   144e2:	|  |  |  /--|-- bra.s 14506 <deleteVarFromStack+0xa6>
            reply++;
   144e4:	|  |  |  |  \-> addq.l #1,16(sp)
   144e8:	|  +--|--|----- bra.s 144f8 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   144ea:	|  |  \--|----> movea.l 20(sp),a0
   144ee:	|  |     |      move.l (a0),d0
   144f0:	|  |     |      move.l d0,d1
   144f2:	|  |     |      addq.l #8,d1
   144f4:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   144f8:	|  \-----|----> movea.l 20(sp),a0
   144fc:	|        |      move.l (a0),d0
   144fe:	\--------|----- bne.w 1447c <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14502:	         |      move.l 16(sp),d0
}
   14506:	         \----> movea.l (sp)+,a6
   14508:	                lea 20(sp),sp
   1450c:	                rts

0001450e <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   1450e:	       movea.l 4(sp),a0
   14512:	       move.l 4(a0),d0
   14516:	       cmp.l 8(sp),d0
   1451a:	   /-- bhi.s 14520 <fastArrayGetByIndex+0x12>
   1451c:	   |   moveq #0,d0
   1451e:	/--|-- bra.s 1452e <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14520:	|  \-> movea.l 4(sp),a0
   14524:	|      move.l (a0),d1
   14526:	|      move.l 8(sp),d0
   1452a:	|      lsl.l #3,d0
   1452c:	|      add.l d1,d0
}
   1452e:	\----> rts

00014530 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   14530:	                lea -32(sp),sp
   14534:	                move.l a6,-(sp)
   14536:	                move.l a2,-(sp)
    struct persona *p = NULL;
   14538:	                clr.l 36(sp)

    switch (thisVar->varType) {
   1453c:	                movea.l 44(sp),a0
   14540:	                move.l (a0),d0
   14542:	                moveq #8,d1
   14544:	                cmp.l d0,d1
   14546:	            /-- beq.s 14554 <getCostumeFromVar+0x24>
   14548:	            |   moveq #9,d1
   1454a:	            |   cmp.l d0,d1
   1454c:	   /--------|-- beq.w 14602 <getCostumeFromVar+0xd2>
   14550:	/--|--------|-- bra.w 1460c <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   14554:	|  |        \-> moveq #8,d0
   14556:	|  |            move.l d0,28(sp)
   1455a:	|  |            clr.l 24(sp)
   1455e:	|  |            move.l 1c9c4 <SysBase>,d0
   14564:	|  |            movea.l d0,a6
   14566:	|  |            move.l 28(sp),d0
   1456a:	|  |            move.l 24(sp),d1
   1456e:	|  |            jsr -684(a6)
   14572:	|  |            move.l d0,20(sp)
   14576:	|  |            move.l 20(sp),d0
   1457a:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   1457e:	|  |        /-- bne.s 14586 <getCostumeFromVar+0x56>
   14580:	|  |        |   moveq #0,d0
   14582:	|  |  /-----|-- bra.w 14636 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   14586:	|  |  |     \-> movea.l 36(sp),a0
   1458a:	|  |  |         moveq #1,d1
   1458c:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   14590:	|  |  |         moveq #12,d0
   14592:	|  |  |         move.l d0,16(sp)
   14596:	|  |  |         clr.l 12(sp)
   1459a:	|  |  |         move.l 1c9c4 <SysBase>,d0
   145a0:	|  |  |         movea.l d0,a6
   145a2:	|  |  |         move.l 16(sp),d0
   145a6:	|  |  |         move.l 12(sp),d1
   145aa:	|  |  |         jsr -684(a6)
   145ae:	|  |  |         move.l d0,8(sp)
   145b2:	|  |  |         move.l 8(sp),d0
   145b6:	|  |  |         movea.l 36(sp),a0
   145ba:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   145bc:	|  |  |         movea.l 36(sp),a0
   145c0:	|  |  |         move.l (a0),d0
   145c2:	|  |  |     /-- bne.s 145c8 <getCostumeFromVar+0x98>
   145c4:	|  |  |     |   moveq #0,d0
   145c6:	|  |  +-----|-- bra.s 14636 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   145c8:	|  |  |     \-> clr.l 32(sp)
   145cc:	|  |  |     /-- bra.s 145f8 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   145ce:	|  |  |  /--|-> movea.l 44(sp),a0
   145d2:	|  |  |  |  |   move.l 4(a0),d0
   145d6:	|  |  |  |  |   movea.l 36(sp),a0
   145da:	|  |  |  |  |   movea.l (a0),a0
   145dc:	|  |  |  |  |   move.l 32(sp),d1
   145e0:	|  |  |  |  |   add.l d1,d1
   145e2:	|  |  |  |  |   add.l d1,d1
   145e4:	|  |  |  |  |   lea (0,a0,d1.l),a2
   145e8:	|  |  |  |  |   move.l d0,-(sp)
   145ea:	|  |  |  |  |   jsr 966e <copyAnim>
   145f0:	|  |  |  |  |   addq.l #4,sp
   145f2:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   145f4:	|  |  |  |  |   addq.l #1,32(sp)
   145f8:	|  |  |  |  \-> moveq #2,d1
   145fa:	|  |  |  |      cmp.l 32(sp),d1
   145fe:	|  |  |  \----- bge.s 145ce <getCostumeFromVar+0x9e>
            }
            break;
   14600:	|  |  |     /-- bra.s 14632 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14602:	|  \--|-----|-> movea.l 44(sp),a0
   14606:	|     |     |   move.l 4(a0),d0
   1460a:	|     +-----|-- bra.s 14636 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   1460c:	\-----|-----|-> movea.l 44(sp),a0
   14610:	      |     |   move.l (a0),d0
   14612:	      |     |   add.l d0,d0
   14614:	      |     |   movea.l d0,a1
   14616:	      |     |   adda.l d0,a1
   14618:	      |     |   lea 1c8a0 <typeName>,a0
   1461e:	      |     |   move.l (0,a1,a0.l),d0
   14622:	      |     |   move.l d0,-(sp)
   14624:	      |     |   pea 19eb9 <graphics.c.1c13408a+0x3a5>
   1462a:	      |     |   jsr 1729e <KPrintF>
   14630:	      |     |   addq.l #8,sp
    }

    return p;
   14632:	      |     \-> move.l 36(sp),d0
}
   14636:	      \-------> movea.l (sp)+,a2
   14638:	                movea.l (sp)+,a6
   1463a:	                lea 32(sp),sp
   1463e:	                rts

00014640 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14640:	                lea -96(sp),sp
   14644:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14648:	                move.l 116(sp),-(sp)
   1464c:	                pea 19ef1 <graphics.c.1c13408a+0x3dd>
   14652:	                jsr 13db0 <joinStrings>
   14658:	                addq.l #8,sp
   1465a:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   1465e:	            /-- bne.s 14666 <getSavedGamesStack+0x26>
   14660:	            |   clr.w d0
   14662:	/-----------|-- bra.w 1487a <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   14666:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   1466a:	|               move.l #106227,98(sp)
   14672:	|               moveq #-2,d0
   14674:	|               move.l d0,94(sp)
   14678:	|               move.l 1c9cc <DOSBase>,d0
   1467e:	|               movea.l d0,a6
   14680:	|               move.l 98(sp),d1
   14684:	|               move.l 94(sp),d2
   14688:	|               jsr -84(a6)
   1468c:	|               move.l d0,90(sp)
   14690:	|               move.l 90(sp),d0
   14694:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14698:	|           /-- bne.s 146a0 <getSavedGamesStack+0x60>
   1469a:	|           |   clr.w d0
   1469c:	+-----------|-- bra.w 1487a <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   146a0:	|           \-> move.l #260,82(sp)
   146a8:	|               move.l #65536,78(sp)
   146b0:	|               move.l 1c9c4 <SysBase>,d0
   146b6:	|               movea.l d0,a6
   146b8:	|               move.l 82(sp),d0
   146bc:	|               move.l 78(sp),d1
   146c0:	|               jsr -684(a6)
   146c4:	|               move.l d0,74(sp)
   146c8:	|               move.l 74(sp),d0
   146cc:	|               move.l d0,70(sp)
	if (!fib) {
   146d0:	|           /-- bne.s 146ee <getSavedGamesStack+0xae>
		UnLock(dirLock);
   146d2:	|           |   move.l 86(sp),22(sp)
   146d8:	|           |   move.l 1c9cc <DOSBase>,d0
   146de:	|           |   movea.l d0,a6
   146e0:	|           |   move.l 22(sp),d1
   146e4:	|           |   jsr -90(a6)
		return FALSE;
   146e8:	|           |   clr.w d0
   146ea:	+-----------|-- bra.w 1487a <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   146ee:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   146f2:	|               move.l 86(sp),66(sp)
   146f8:	|               move.l 70(sp),62(sp)
   146fe:	|               move.l 1c9cc <DOSBase>,d0
   14704:	|               movea.l d0,a6
   14706:	|               move.l 66(sp),d1
   1470a:	|               move.l 62(sp),d2
   1470e:	|               jsr -102(a6)
   14712:	|               move.l d0,58(sp)
   14716:	|               move.l 58(sp),d0
   1471a:	|  /----------- beq.w 1482e <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   1471e:	|  |        /-- bra.w 147fa <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14722:	|  |  /-----|-> move.l 70(sp),d2
   14726:	|  |  |     |   addq.l #8,d2
   14728:	|  |  |     |   move.l 70(sp),d0
   1472c:	|  |  |     |   addq.l #8,d0
   1472e:	|  |  |     |   move.l d0,-(sp)
   14730:	|  |  |     |   jsr 13d70 <strlen>
   14736:	|  |  |     |   addq.l #4,sp
   14738:	|  |  |     |   move.l d0,d3
   1473a:	|  |  |     |   move.l 116(sp),-(sp)
   1473e:	|  |  |     |   jsr 13d70 <strlen>
   14744:	|  |  |     |   addq.l #4,sp
   14746:	|  |  |     |   move.l d3,d1
   14748:	|  |  |     |   sub.l d0,d1
   1474a:	|  |  |     |   move.l d2,d0
   1474c:	|  |  |     |   add.l d1,d0
   1474e:	|  |  |     |   move.l 116(sp),-(sp)
   14752:	|  |  |     |   move.l d0,-(sp)
   14754:	|  |  |     |   jsr 13d30 <strcmp>
   1475a:	|  |  |     |   addq.l #8,sp
   1475c:	|  |  |     |   tst.l d0
   1475e:	|  |  |     +-- bne.w 147fa <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   14762:	|  |  |     |   move.l 70(sp),d0
   14766:	|  |  |     |   addq.l #8,d0
   14768:	|  |  |     |   move.l d0,-(sp)
   1476a:	|  |  |     |   jsr 13d70 <strlen>
   14770:	|  |  |     |   addq.l #4,sp
   14772:	|  |  |     |   move.l d0,d2
   14774:	|  |  |     |   move.l 116(sp),-(sp)
   14778:	|  |  |     |   jsr 13d70 <strlen>
   1477e:	|  |  |     |   addq.l #4,sp
   14780:	|  |  |     |   move.l d0,d1
   14782:	|  |  |     |   move.l d2,d0
   14784:	|  |  |     |   sub.l d1,d0
   14786:	|  |  |     |   movea.l 70(sp),a0
   1478a:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   1478e:	|  |  |     |   move.l 70(sp),d0
   14792:	|  |  |     |   addq.l #8,d0
   14794:	|  |  |     |   move.l d0,-(sp)
   14796:	|  |  |     |   jsr 118 <decodeFilename>
   1479c:	|  |  |     |   addq.l #4,sp
   1479e:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   147a2:	|  |  |     |   move.l 42(sp),-(sp)
   147a6:	|  |  |     |   lea 18(sp),a0
   147aa:	|  |  |     |   move.l a0,-(sp)
   147ac:	|  |  |     |   jsr 14aa6 <makeTextVar>
   147b2:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   147b4:	|  |  |     |   move.l 42(sp),38(sp)
   147ba:	|  |  |     |   move.l 1c9c4 <SysBase>,d0
   147c0:	|  |  |     |   movea.l d0,a6
   147c2:	|  |  |     |   movea.l 38(sp),a1
   147c6:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   147ca:	|  |  |     |   move.l 112(sp),d0
   147ce:	|  |  |     |   move.l d0,-(sp)
   147d0:	|  |  |     |   lea 18(sp),a0
   147d4:	|  |  |     |   move.l a0,-(sp)
   147d6:	|  |  |     |   jsr 140c0 <addVarToStack>
   147dc:	|  |  |     |   addq.l #8,sp
   147de:	|  |  |     |   tst.w d0
   147e0:	|  |  |  /--|-- beq.s 14832 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   147e2:	|  |  |  |  |   movea.l 112(sp),a0
   147e6:	|  |  |  |  |   move.l 4(a0),d0
   147ea:	|  |  |  |  +-- bne.s 147fa <getSavedGamesStack+0x1ba>
   147ec:	|  |  |  |  |   movea.l 112(sp),a0
   147f0:	|  |  |  |  |   move.l (a0),d0
   147f2:	|  |  |  |  |   movea.l 112(sp),a0
   147f6:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   147fa:	|  |  |  |  \-> move.l 86(sp),54(sp)
   14800:	|  |  |  |      move.l 70(sp),50(sp)
   14806:	|  |  |  |      move.l 1c9cc <DOSBase>,d0
   1480c:	|  |  |  |      movea.l d0,a6
   1480e:	|  |  |  |      move.l 54(sp),d1
   14812:	|  |  |  |      move.l 50(sp),d2
   14816:	|  |  |  |      jsr -108(a6)
   1481a:	|  |  |  |      move.l d0,46(sp)
   1481e:	|  |  |  |      move.l 46(sp),d0
   14822:	|  |  \--|----- bne.w 14722 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14826:	|  |     |      move.w #1,106(sp)
   1482c:	|  |     |  /-- bra.s 14834 <getSavedGamesStack+0x1f4>
	}

cleanup:
   1482e:	|  \-----|--|-> nop
   14830:	|        |  +-- bra.s 14834 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14832:	|        \--|-> nop
	FreeVec(fib);
   14834:	|           \-> move.l 70(sp),34(sp)
   1483a:	|               move.l 1c9c4 <SysBase>,d0
   14840:	|               movea.l d0,a6
   14842:	|               movea.l 34(sp),a1
   14846:	|               jsr -690(a6)
	UnLock(dirLock);
   1484a:	|               move.l 86(sp),30(sp)
   14850:	|               move.l 1c9cc <DOSBase>,d0
   14856:	|               movea.l d0,a6
   14858:	|               move.l 30(sp),d1
   1485c:	|               jsr -90(a6)
	FreeVec(pattern);
   14860:	|               move.l 102(sp),26(sp)
   14866:	|               move.l 1c9c4 <SysBase>,d0
   1486c:	|               movea.l d0,a6
   1486e:	|               movea.l 26(sp),a1
   14872:	|               jsr -690(a6)
	return result;
   14876:	|               move.w 106(sp),d0
}
   1487a:	\-------------> movem.l (sp)+,d2-d3/a6
   1487e:	                lea 96(sp),sp
   14882:	                rts

00014884 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14884:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14886:	       movea.l 20(sp),a0
   1488a:	       move.l (a0),d0
   1488c:	       cmp.l 16(sp),d0
   14890:	/----- beq.s 148f4 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14892:	|      move.l 16(sp),d0
   14896:	|      add.l d0,d0
   14898:	|      movea.l d0,a1
   1489a:	|      adda.l d0,a1
   1489c:	|      lea 1c8a0 <typeName>,a0
   148a2:	|      move.l (0,a1,a0.l),d0
   148a6:	|      move.l d0,-(sp)
   148a8:	|      pea 19ef5 <graphics.c.1c13408a+0x3e1>
   148ae:	|      jsr 13db0 <joinStrings>
   148b4:	|      addq.l #8,sp
   148b6:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   148ba:	|      movea.l 20(sp),a0
   148be:	|      move.l (a0),d0
   148c0:	|      add.l d0,d0
   148c2:	|      movea.l d0,a1
   148c4:	|      adda.l d0,a1
   148c6:	|      lea 1c8a0 <typeName>,a0
   148cc:	|      move.l (0,a1,a0.l),d0
   148d0:	|      move.l d0,-(sp)
   148d2:	|      pea 19f37 <newfatal.c.307beca7+0x23>
   148d8:	|      jsr 13db0 <joinStrings>
   148de:	|      addq.l #8,sp
   148e0:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   148e2:	|      move.l (sp),-(sp)
   148e4:	|      move.l 8(sp),-(sp)
   148e8:	|      jsr 1729e <KPrintF>
   148ee:	|      addq.l #8,sp

		return FALSE;
   148f0:	|      clr.w d0
   148f2:	|  /-- bra.s 14904 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   148f4:	\--|-> movea.l 20(sp),a0
   148f8:	   |   move.l 4(a0),d0
   148fc:	   |   movea.l 12(sp),a0
   14900:	   |   move.l d0,(a0)
	return TRUE;
   14902:	   |   moveq #1,d0
}
   14904:	   \-> addq.l #8,sp
   14906:	       rts

00014908 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14908:	move.l 8(sp),-(sp)
   1490c:	jsr 6db4 <getNumberedString>
   14912:	addq.l #4,sp
   14914:	move.l d0,-(sp)
   14916:	move.l 8(sp),-(sp)
   1491a:	jsr 14aa6 <makeTextVar>
   14920:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14922:	movea.l 4(sp),a0
   14926:	move.l 4(a0),d0
   1492a:	sne d0
   1492c:	neg.b d0
   1492e:	move.b d0,d0
   14930:	andi.w #255,d0
}
   14934:	rts

00014936 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14936:	          subq.l #8,sp
    int size = stackSize(stacky);
   14938:	          move.l 16(sp),-(sp)
   1493c:	          jsr 151e4 <stackSize>
   14942:	          addq.l #4,sp
   14944:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14948:	          move.l 4(sp),-(sp)
   1494c:	          move.l 16(sp),-(sp)
   14950:	          jsr 149a0 <makeFastArraySize>
   14956:	          addq.l #8,sp
   14958:	          tst.w d0
   1495a:	      /-- bne.s 14960 <makeFastArrayFromStack+0x2a>
   1495c:	      |   clr.w d0
   1495e:	/-----|-- bra.s 1499c <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14960:	|     \-> movea.l 16(sp),a0
   14964:	|         move.l (a0),(sp)
    size = 0;
   14966:	|         clr.l 4(sp)
    while (allV) {
   1496a:	|     /-- bra.s 14996 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   1496c:	|  /--|-> movea.l 12(sp),a0
   14970:	|  |  |   movea.l 4(a0),a0
   14974:	|  |  |   move.l (a0),d1
   14976:	|  |  |   move.l 4(sp),d0
   1497a:	|  |  |   lsl.l #3,d0
   1497c:	|  |  |   add.l d0,d1
   1497e:	|  |  |   move.l (sp),d0
   14980:	|  |  |   move.l d1,-(sp)
   14982:	|  |  |   move.l d0,-(sp)
   14984:	|  |  |   jsr 14c22 <copyMain>
   1498a:	|  |  |   addq.l #8,sp
        size++;
   1498c:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14990:	|  |  |   movea.l (sp),a0
   14992:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14996:	|  |  \-> tst.l (sp)
   14998:	|  \----- bne.s 1496c <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   1499a:	|         moveq #1,d0
}
   1499c:	\-------> addq.l #8,sp
   1499e:	          rts

000149a0 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   149a0:	          lea -28(sp),sp
   149a4:	          move.l a6,-(sp)
    if (size < 0) {
   149a6:	          tst.l 40(sp)
   149aa:	      /-- bge.s 149c0 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   149ac:	      |   pea 19f7c <newfatal.c.307beca7+0x68>
   149b2:	      |   jsr 1729e <KPrintF>
   149b8:	      |   addq.l #4,sp
		return FALSE;
   149ba:	      |   clr.w d0
   149bc:	/-----|-- bra.w 14a9e <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   149c0:	|     \-> move.l 36(sp),-(sp)
   149c4:	|         jsr 14ad2 <unlinkVar>
   149ca:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   149cc:	|         movea.l 36(sp),a0
   149d0:	|         moveq #10,d0
   149d2:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   149d4:	|         moveq #12,d0
   149d6:	|         move.l d0,24(sp)
   149da:	|         clr.l 20(sp)
   149de:	|         move.l 1c9c4 <SysBase>,d0
   149e4:	|         movea.l d0,a6
   149e6:	|         move.l 24(sp),d0
   149ea:	|         move.l 20(sp),d1
   149ee:	|         jsr -684(a6)
   149f2:	|         move.l d0,16(sp)
   149f6:	|         move.l 16(sp),d0
   149fa:	|         movea.l 36(sp),a0
   149fe:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14a02:	|         movea.l 36(sp),a0
   14a06:	|         move.l 4(a0),d0
   14a0a:	|     /-- bne.s 14a12 <makeFastArraySize+0x72>
   14a0c:	|     |   clr.w d0
   14a0e:	+-----|-- bra.w 14a9e <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14a12:	|     \-> move.l 40(sp),d0
   14a16:	|         lsl.l #3,d0
   14a18:	|         move.l d0,12(sp)
   14a1c:	|         clr.l 8(sp)
   14a20:	|         move.l 1c9c4 <SysBase>,d0
   14a26:	|         movea.l d0,a6
   14a28:	|         move.l 12(sp),d0
   14a2c:	|         move.l 8(sp),d1
   14a30:	|         jsr -684(a6)
   14a34:	|         move.l d0,4(sp)
   14a38:	|         move.l 4(sp),d0
   14a3c:	|         movea.l 36(sp),a0
   14a40:	|         movea.l 4(a0),a0
   14a44:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14a46:	|         movea.l 36(sp),a0
   14a4a:	|         movea.l 4(a0),a0
   14a4e:	|         move.l (a0),d0
   14a50:	|     /-- bne.s 14a56 <makeFastArraySize+0xb6>
   14a52:	|     |   clr.w d0
   14a54:	+-----|-- bra.s 14a9e <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14a56:	|     \-> clr.l 28(sp)
   14a5a:	|     /-- bra.s 14a76 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14a5c:	|  /--|-> movea.l 36(sp),a0
   14a60:	|  |  |   movea.l 4(a0),a0
   14a64:	|  |  |   move.l (a0),d1
   14a66:	|  |  |   move.l 28(sp),d0
   14a6a:	|  |  |   lsl.l #3,d0
   14a6c:	|  |  |   movea.l d1,a0
   14a6e:	|  |  |   adda.l d0,a0
   14a70:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14a72:	|  |  |   addq.l #1,28(sp)
   14a76:	|  |  \-> move.l 28(sp),d0
   14a7a:	|  |      cmp.l 40(sp),d0
   14a7e:	|  \----- blt.s 14a5c <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14a80:	|         movea.l 36(sp),a0
   14a84:	|         movea.l 4(a0),a0
   14a88:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14a8e:	|         movea.l 36(sp),a0
   14a92:	|         movea.l 4(a0),a0
   14a96:	|         moveq #1,d0
   14a98:	|         move.l d0,8(a0)
    return TRUE;
   14a9c:	|         moveq #1,d0
}
   14a9e:	\-------> movea.l (sp)+,a6
   14aa0:	          lea 28(sp),sp
   14aa4:	          rts

00014aa6 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14aa6:	move.l 4(sp),-(sp)
   14aaa:	jsr 14ad2 <unlinkVar>
   14ab0:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14ab2:	movea.l 4(sp),a0
   14ab6:	moveq #3,d0
   14ab8:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14aba:	move.l 8(sp),-(sp)
   14abe:	jsr b8 <copyString>
   14ac4:	addq.l #4,sp
   14ac6:	movea.l 4(sp),a0
   14aca:	move.l d0,4(a0)
}
   14ace:	nop
   14ad0:	rts

00014ad2 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14ad2:	                      lea -16(sp),sp
   14ad6:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14ad8:	                      movea.l 24(sp),a0
   14adc:	                      move.l (a0),d0
   14ade:	                      moveq #10,d1
   14ae0:	                      cmp.l d0,d1
   14ae2:	            /-------- beq.w 14b9a <unlinkVar+0xc8>
   14ae6:	            |         moveq #10,d1
   14ae8:	            |         cmp.l d0,d1
   14aea:	/-----------|-------- bcs.w 14c0e <unlinkVar+0x13c>
   14aee:	|           |         moveq #8,d1
   14af0:	|           |         cmp.l d0,d1
   14af2:	|  /--------|-------- beq.w 14bfa <unlinkVar+0x128>
   14af6:	|  |        |         moveq #8,d1
   14af8:	|  |        |         cmp.l d0,d1
   14afa:	+--|--------|-------- bcs.w 14c0e <unlinkVar+0x13c>
   14afe:	|  |        |         moveq #3,d1
   14b00:	|  |        |         cmp.l d0,d1
   14b02:	|  |        |     /-- beq.s 14b0e <unlinkVar+0x3c>
   14b04:	|  |        |     |   moveq #6,d1
   14b06:	|  |        |     |   cmp.l d0,d1
   14b08:	|  |        |  /--|-- beq.s 14b34 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14b0a:	+--|--------|--|--|-- bra.w 14c0e <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14b0e:	|  |        |  |  \-> movea.l 24(sp),a0
   14b12:	|  |        |  |      move.l 4(a0),4(sp)
   14b18:	|  |        |  |      move.l 1c9c4 <SysBase>,d0
   14b1e:	|  |        |  |      movea.l d0,a6
   14b20:	|  |        |  |      movea.l 4(sp),a1
   14b24:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14b28:	|  |        |  |      movea.l 24(sp),a0
   14b2c:	|  |        |  |      clr.l 4(a0)
		break;
   14b30:	|  |  /-----|--|----- bra.w 14c18 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14b34:	|  |  |     |  \----> movea.l 24(sp),a0
   14b38:	|  |  |     |         movea.l 4(a0),a0
   14b3c:	|  |  |     |         move.l 8(a0),d0
   14b40:	|  |  |     |         subq.l #1,d0
   14b42:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14b46:	|  |  |     |         movea.l 24(sp),a0
   14b4a:	|  |  |     |         movea.l 4(a0),a0
   14b4e:	|  |  |     |         move.l 8(a0),d0
   14b52:	|  |  |  /--|-------- bgt.w 14c12 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14b56:	|  |  |  |  |     /-- bra.s 14b6a <unlinkVar+0x98>
   14b58:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   14b5c:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14b60:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14b62:	|  |  |  |  |  |  |   jsr 15208 <trimStack>
   14b68:	|  |  |  |  |  |  |   addq.l #4,sp
   14b6a:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   14b6e:	|  |  |  |  |  |      movea.l 4(a0),a0
   14b72:	|  |  |  |  |  |      move.l (a0),d0
   14b74:	|  |  |  |  |  \----- bne.s 14b58 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14b76:	|  |  |  |  |         movea.l 24(sp),a0
   14b7a:	|  |  |  |  |         move.l 4(a0),8(sp)
   14b80:	|  |  |  |  |         move.l 1c9c4 <SysBase>,d0
   14b86:	|  |  |  |  |         movea.l d0,a6
   14b88:	|  |  |  |  |         movea.l 8(sp),a1
   14b8c:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14b90:	|  |  |  |  |         movea.l 24(sp),a0
   14b94:	|  |  |  |  |         clr.l 4(a0)
		break;
   14b98:	|  |  |  +--|-------- bra.s 14c12 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14b9a:	|  |  |  |  \-------> movea.l 24(sp),a0
   14b9e:	|  |  |  |            movea.l 4(a0),a0
   14ba2:	|  |  |  |            move.l 8(a0),d0
   14ba6:	|  |  |  |            subq.l #1,d0
   14ba8:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14bac:	|  |  |  |            movea.l 24(sp),a0
   14bb0:	|  |  |  |            movea.l 4(a0),a0
   14bb4:	|  |  |  |            move.l 8(a0),d0
   14bb8:	|  |  |  |        /-- bgt.s 14c16 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14bba:	|  |  |  |        |   movea.l 24(sp),a0
   14bbe:	|  |  |  |        |   movea.l 4(a0),a0
   14bc2:	|  |  |  |        |   move.l (a0),16(sp)
   14bc6:	|  |  |  |        |   move.l 1c9c4 <SysBase>,d0
   14bcc:	|  |  |  |        |   movea.l d0,a6
   14bce:	|  |  |  |        |   movea.l 16(sp),a1
   14bd2:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14bd6:	|  |  |  |        |   movea.l 24(sp),a0
   14bda:	|  |  |  |        |   move.l 4(a0),12(sp)
   14be0:	|  |  |  |        |   move.l 1c9c4 <SysBase>,d0
   14be6:	|  |  |  |        |   movea.l d0,a6
   14be8:	|  |  |  |        |   movea.l 12(sp),a1
   14bec:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14bf0:	|  |  |  |        |   movea.l 24(sp),a0
   14bf4:	|  |  |  |        |   clr.l 4(a0)
		break;
   14bf8:	|  |  |  |        +-- bra.s 14c16 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14bfa:	|  \--|--|--------|-> movea.l 24(sp),a0
   14bfe:	|     |  |        |   move.l 4(a0),d0
   14c02:	|     |  |        |   move.l d0,-(sp)
   14c04:	|     |  |        |   jsr 9a3a <deleteAnim>
   14c0a:	|     |  |        |   addq.l #4,sp
		break;
   14c0c:	|     +--|--------|-- bra.s 14c18 <unlinkVar+0x146>
		break;
   14c0e:	\-----|--|--------|-> nop
   14c10:	      +--|--------|-- bra.s 14c18 <unlinkVar+0x146>
		break;
   14c12:	      |  \--------|-> nop
   14c14:	      +-----------|-- bra.s 14c18 <unlinkVar+0x146>
		break;
   14c16:	      |           \-> nop
	}
}
   14c18:	      \-------------> nop
   14c1a:	                      movea.l (sp)+,a6
   14c1c:	                      lea 16(sp),sp
   14c20:	                      rts

00014c22 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14c22:	       movea.l 4(sp),a0
   14c26:	       move.l (a0),d0
   14c28:	       movea.l 8(sp),a0
   14c2c:	       move.l d0,(a0)
	switch (to->varType) {
   14c2e:	       movea.l 8(sp),a0
   14c32:	       move.l (a0),d0
   14c34:	       moveq #10,d1
   14c36:	       cmp.l d0,d1
   14c38:	/----- bcs.w 14d2a <copyMain+0x108>
   14c3c:	|      add.l d0,d0
   14c3e:	|      movea.l d0,a0
   14c40:	|      adda.l #85068,a0
   14c46:	|      move.w (a0),d0
   14c48:	|      jmp (14c4c <copyMain+0x2a>,pc,d0.w)
   14c4c:	|      .short 0x00da
   14c4e:	|      ori.b #22,(a6)
   14c52:	|      ori.w #22,(a4)
   14c56:	|      ori.b #-126,(a6)
   14c5a:	|      ori.b #-68,(a6)
   14c5e:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14c66:	|      move.l 4(a0),d0
   14c6a:	|      movea.l 8(sp),a0
   14c6e:	|      move.l d0,4(a0)
		return TRUE;
   14c72:	|      moveq #1,d0
   14c74:	|  /-- bra.w 14d3c <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14c78:	|  |   movea.l 4(sp),a0
   14c7c:	|  |   move.l 4(a0),d0
   14c80:	|  |   movea.l 8(sp),a0
   14c84:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14c88:	|  |   movea.l 8(sp),a0
   14c8c:	|  |   movea.l 4(a0),a0
   14c90:	|  |   move.l 8(a0),d0
   14c94:	|  |   addq.l #1,d0
   14c96:	|  |   move.l d0,8(a0)
		return TRUE;
   14c9a:	|  |   moveq #1,d0
   14c9c:	|  +-- bra.w 14d3c <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14ca0:	|  |   movea.l 4(sp),a0
   14ca4:	|  |   move.l 4(a0),d0
   14ca8:	|  |   move.l d0,-(sp)
   14caa:	|  |   jsr b8 <copyString>
   14cb0:	|  |   addq.l #4,sp
   14cb2:	|  |   movea.l 8(sp),a0
   14cb6:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14cba:	|  |   movea.l 8(sp),a0
   14cbe:	|  |   move.l 4(a0),d0
   14cc2:	|  |   sne d0
   14cc4:	|  |   neg.b d0
   14cc6:	|  |   move.b d0,d0
   14cc8:	|  |   andi.w #255,d0
   14ccc:	|  +-- bra.s 14d3c <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14cce:	|  |   movea.l 4(sp),a0
   14cd2:	|  |   move.l 4(a0),d0
   14cd6:	|  |   movea.l 8(sp),a0
   14cda:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14cde:	|  |   movea.l 8(sp),a0
   14ce2:	|  |   movea.l 4(a0),a0
   14ce6:	|  |   move.l 8(a0),d0
   14cea:	|  |   addq.l #1,d0
   14cec:	|  |   move.l d0,8(a0)
		return TRUE;
   14cf0:	|  |   moveq #1,d0
   14cf2:	|  +-- bra.s 14d3c <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14cf4:	|  |   movea.l 4(sp),a0
   14cf8:	|  |   move.l 4(a0),d0
   14cfc:	|  |   movea.l 8(sp),a0
   14d00:	|  |   move.l d0,4(a0)
		return TRUE;
   14d04:	|  |   moveq #1,d0
   14d06:	|  +-- bra.s 14d3c <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14d08:	|  |   movea.l 4(sp),a0
   14d0c:	|  |   move.l 4(a0),d0
   14d10:	|  |   move.l d0,-(sp)
   14d12:	|  |   jsr 966e <copyAnim>
   14d18:	|  |   addq.l #4,sp
   14d1a:	|  |   movea.l 8(sp),a0
   14d1e:	|  |   move.l d0,4(a0)
		return TRUE;
   14d22:	|  |   moveq #1,d0
   14d24:	|  +-- bra.s 14d3c <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14d26:	|  |   moveq #1,d0
   14d28:	|  +-- bra.s 14d3c <copyMain+0x11a>

		default:
		break;
   14d2a:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14d2c:	   |   pea 19fcd <newfatal.c.307beca7+0xb9>
   14d32:	   |   jsr 1729e <KPrintF>
   14d38:	   |   addq.l #4,sp
	return FALSE;
   14d3a:	   |   clr.w d0
}
   14d3c:	   \-> rts

00014d3e <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14d3e:	move.l 8(sp),-(sp)
   14d42:	jsr 14ad2 <unlinkVar>
   14d48:	addq.l #4,sp
	return copyMain(from, to);
   14d4a:	move.l 8(sp),-(sp)
   14d4e:	move.l 8(sp),-(sp)
   14d52:	jsr 14c22 <copyMain>
   14d58:	addq.l #8,sp
}
   14d5a:	rts

00014d5c <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14d5c:	       movea.l 4(sp),a0
   14d60:	       move.l (a0),d0
   14d62:	       moveq #8,d1
   14d64:	       cmp.l d0,d1
   14d66:	   /-- bne.s 14d7c <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14d68:	   |   movea.l 4(sp),a0
   14d6c:	   |   move.l 4(a0),d0
   14d70:	   |   move.l d0,-(sp)
   14d72:	   |   jsr 966e <copyAnim>
   14d78:	   |   addq.l #4,sp
   14d7a:	/--|-- bra.s 14dc2 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14d7c:	|  \-> movea.l 4(sp),a0
   14d80:	|      move.l (a0),d0
   14d82:	|      moveq #1,d1
   14d84:	|      cmp.l d0,d1
   14d86:	|  /-- bne.s 14d9a <getAnimationFromVar+0x3e>
   14d88:	|  |   movea.l 4(sp),a0
   14d8c:	|  |   move.l 4(a0),d0
   14d90:	|  +-- bne.s 14d9a <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14d92:	|  |   jsr ae3e <makeNullAnim>
   14d98:	+--|-- bra.s 14dc2 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14d9a:	|  \-> movea.l 4(sp),a0
   14d9e:	|      move.l (a0),d0
   14da0:	|      add.l d0,d0
   14da2:	|      movea.l d0,a1
   14da4:	|      adda.l d0,a1
   14da6:	|      lea 1c8a0 <typeName>,a0
   14dac:	|      move.l (0,a1,a0.l),d0
   14db0:	|      move.l d0,-(sp)
   14db2:	|      pea 19eb9 <graphics.c.1c13408a+0x3a5>
   14db8:	|      jsr 1729e <KPrintF>
   14dbe:	|      addq.l #8,sp
	return NULL;
   14dc0:	|      moveq #0,d0
}
   14dc2:	\----> rts

00014dc4 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14dc4:	       movea.l 4(sp),a0
   14dc8:	       move.l (a0),d0
   14dca:	       moveq #10,d1
   14dcc:	       cmp.l d0,d1
   14dce:	/----- bcs.w 14e54 <getBoolean+0x90>
   14dd2:	|      add.l d0,d0
   14dd4:	|      movea.l d0,a0
   14dd6:	|      adda.l #85474,a0
   14ddc:	|      move.w (a0),d0
   14dde:	|      jmp (14de2 <getBoolean+0x1e>,pc,d0.w)
   14de2:	|      ori.b #26,(a6)
   14de6:	|      ori.w #68,(114,a2,d0.w)
   14dec:	|      ori.w #46,(114,a2,d0.w)
   14df2:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14df8:	|      clr.w d0
   14dfa:	|  /-- bra.s 14e58 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14dfc:	|  |   movea.l 4(sp),a0
   14e00:	|  |   move.l 4(a0),d0
   14e04:	|  |   sne d0
   14e06:	|  |   neg.b d0
   14e08:	|  |   move.b d0,d0
   14e0a:	|  |   andi.w #255,d0
   14e0e:	|  +-- bra.s 14e58 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14e10:	|  |   movea.l 4(sp),a0
   14e14:	|  |   movea.l 4(a0),a0
   14e18:	|  |   move.l (a0),d0
   14e1a:	|  |   sne d0
   14e1c:	|  |   neg.b d0
   14e1e:	|  |   move.b d0,d0
   14e20:	|  |   andi.w #255,d0
   14e24:	|  +-- bra.s 14e58 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14e26:	|  |   movea.l 4(sp),a0
   14e2a:	|  |   movea.l 4(a0),a0
   14e2e:	|  |   move.b (a0),d0
   14e30:	|  |   sne d0
   14e32:	|  |   neg.b d0
   14e34:	|  |   move.b d0,d0
   14e36:	|  |   andi.w #255,d0
   14e3a:	|  +-- bra.s 14e58 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14e3c:	|  |   movea.l 4(sp),a0
   14e40:	|  |   movea.l 4(a0),a0
   14e44:	|  |   move.l 4(a0),d0
   14e48:	|  |   sne d0
   14e4a:	|  |   neg.b d0
   14e4c:	|  |   move.b d0,d0
   14e4e:	|  |   andi.w #255,d0
   14e52:	|  +-- bra.s 14e58 <getBoolean+0x94>

		default:
		break;
   14e54:	\--|-> nop
	}
	return TRUE;
   14e56:	   |   moveq #1,d0
}
   14e58:	   \-> rts

00014e5a <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14e5a:	      /----------> lea -76(sp),sp
   14e5e:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14e60:	      |            movea.l 84(sp),a0
   14e64:	      |            move.l (a0),d0
   14e66:	      |            moveq #10,d1
   14e68:	      |            cmp.l d0,d1
   14e6a:	/-----|----------- bcs.w 15108 <getTextFromAnyVar+0x2ae>
   14e6e:	|     |            add.l d0,d0
   14e70:	|     |            movea.l d0,a0
   14e72:	|     |            adda.l #85630,a0
   14e78:	|     |            move.w (a0),d0
   14e7a:	|     |            jmp (14e7e <getTextFromAnyVar+0x24>,pc,d0.w)
   14e7e:	|     |            .short 0x028a
   14e80:	|     |            bset d0,(a0)+
   14e82:	|     |            .short 0x028a
   14e84:	|     |            ori.b #-118,(a6)
   14e88:	|     |            andi.b #8,ccr
   14e8c:	|     |            andi.w #650,-(a0)
   14e90:	|     |            .short 0x028a
   14e92:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14e98:	|     |            move.l 4(a0),d0
   14e9c:	|     |            move.l d0,-(sp)
   14e9e:	|     |            jsr b8 <copyString>
   14ea4:	|     |            addq.l #4,sp
   14ea6:	|  /--|----------- bra.w 1512a <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14eaa:	|  |  |            pea 19fe0 <newfatal.c.307beca7+0xcc>
   14eb0:	|  |  |            jsr b8 <copyString>
   14eb6:	|  |  |            addq.l #4,sp
   14eb8:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14ebc:	|  |  |            clr.l 72(sp)
   14ec0:	|  |  |     /----- bra.w 14f6a <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14ec4:	|  |  |  /--|----> pea 19fe6 <newfatal.c.307beca7+0xd2>
   14eca:	|  |  |  |  |      move.l 80(sp),-(sp)
   14ece:	|  |  |  |  |      jsr 13db0 <joinStrings>
   14ed4:	|  |  |  |  |      addq.l #8,sp
   14ed6:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14eda:	|  |  |  |  |  /-- bne.s 14ee2 <getTextFromAnyVar+0x88>
   14edc:	|  |  |  |  |  |   moveq #0,d0
   14ede:	|  +--|--|--|--|-- bra.w 1512a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14ee2:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14ee8:	|  |  |  |  |      move.l 1c9c4 <SysBase>,d0
   14eee:	|  |  |  |  |      movea.l d0,a6
   14ef0:	|  |  |  |  |      movea.l 56(sp),a1
   14ef4:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14ef8:	|  |  |  |  |      movea.l 84(sp),a0
   14efc:	|  |  |  |  |      movea.l 4(a0),a0
   14f00:	|  |  |  |  |      move.l (a0),d1
   14f02:	|  |  |  |  |      move.l 72(sp),d0
   14f06:	|  |  |  |  |      lsl.l #3,d0
   14f08:	|  |  |  |  |      add.l d1,d0
   14f0a:	|  |  |  |  |      move.l d0,-(sp)
   14f0c:	|  |  +--|--|----- jsr 14e5a <getTextFromAnyVar>(pc)
   14f10:	|  |  |  |  |      addq.l #4,sp
   14f12:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14f16:	|  |  |  |  |      move.l 52(sp),-(sp)
   14f1a:	|  |  |  |  |      move.l 64(sp),-(sp)
   14f1e:	|  |  |  |  |      jsr 13db0 <joinStrings>
   14f24:	|  |  |  |  |      addq.l #8,sp
   14f26:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14f2a:	|  |  |  |  |  /-- bne.s 14f32 <getTextFromAnyVar+0xd8>
   14f2c:	|  |  |  |  |  |   moveq #0,d0
   14f2e:	|  +--|--|--|--|-- bra.w 1512a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14f32:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14f38:	|  |  |  |  |      move.l 1c9c4 <SysBase>,d0
   14f3e:	|  |  |  |  |      movea.l d0,a6
   14f40:	|  |  |  |  |      movea.l 48(sp),a1
   14f44:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14f48:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14f4c:	|  |  |  |  |      move.l 60(sp),44(sp)
   14f52:	|  |  |  |  |      move.l 1c9c4 <SysBase>,d0
   14f58:	|  |  |  |  |      movea.l d0,a6
   14f5a:	|  |  |  |  |      movea.l 44(sp),a1
   14f5e:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14f62:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14f66:	|  |  |  |  |      addq.l #1,72(sp)
   14f6a:	|  |  |  |  \----> movea.l 84(sp),a0
   14f6e:	|  |  |  |         movea.l 4(a0),a0
   14f72:	|  |  |  |         move.l 4(a0),d0
   14f76:	|  |  |  |         cmp.l 72(sp),d0
   14f7a:	|  |  |  \-------- bgt.w 14ec4 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14f7e:	|  |  |            move.l 76(sp),d0
   14f82:	|  +--|----------- bra.w 1512a <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14f86:	|  |  |            pea 19fe8 <newfatal.c.307beca7+0xd4>
   14f8c:	|  |  |            jsr b8 <copyString>
   14f92:	|  |  |            addq.l #4,sp
   14f94:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14f98:	|  |  |            movea.l 84(sp),a0
   14f9c:	|  |  |            movea.l 4(a0),a0
   14fa0:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14fa4:	|  |  |     /----- bra.w 15046 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14fa8:	|  |  |  /--|----> pea 19fe6 <newfatal.c.307beca7+0xd2>
   14fae:	|  |  |  |  |      move.l 72(sp),-(sp)
   14fb2:	|  |  |  |  |      jsr 13db0 <joinStrings>
   14fb8:	|  |  |  |  |      addq.l #8,sp
   14fba:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14fbe:	|  |  |  |  |  /-- bne.s 14fc6 <getTextFromAnyVar+0x16c>
   14fc0:	|  |  |  |  |  |   moveq #0,d0
   14fc2:	|  +--|--|--|--|-- bra.w 1512a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14fc6:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   14fcc:	|  |  |  |  |      move.l 1c9c4 <SysBase>,d0
   14fd2:	|  |  |  |  |      movea.l d0,a6
   14fd4:	|  |  |  |  |      movea.l 32(sp),a1
   14fd8:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14fdc:	|  |  |  |  |      move.l 64(sp),d0
   14fe0:	|  |  |  |  |      move.l d0,-(sp)
   14fe2:	|  |  \--|--|----- jsr 14e5a <getTextFromAnyVar>(pc)
   14fe6:	|  |     |  |      addq.l #4,sp
   14fe8:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14fec:	|  |     |  |      move.l 28(sp),-(sp)
   14ff0:	|  |     |  |      move.l 40(sp),-(sp)
   14ff4:	|  |     |  |      jsr 13db0 <joinStrings>
   14ffa:	|  |     |  |      addq.l #8,sp
   14ffc:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   15000:	|  |     |  |  /-- bne.s 15008 <getTextFromAnyVar+0x1ae>
   15002:	|  |     |  |  |   moveq #0,d0
   15004:	|  +-----|--|--|-- bra.w 1512a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   15008:	|  |     |  |  \-> move.l 28(sp),24(sp)
   1500e:	|  |     |  |      move.l 1c9c4 <SysBase>,d0
   15014:	|  |     |  |      movea.l d0,a6
   15016:	|  |     |  |      movea.l 24(sp),a1
   1501a:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   1501e:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   15022:	|  |     |  |      move.l 36(sp),20(sp)
   15028:	|  |     |  |      move.l 1c9c4 <SysBase>,d0
   1502e:	|  |     |  |      movea.l d0,a6
   15030:	|  |     |  |      movea.l 20(sp),a1
   15034:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   15038:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   1503c:	|  |     |  |      movea.l 64(sp),a0
   15040:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   15046:	|  |     |  \----> tst.l 64(sp)
   1504a:	|  |     \-------- bne.w 14fa8 <getTextFromAnyVar+0x14e>
			}
			return builder;
   1504e:	|  |               move.l 68(sp),d0
   15052:	|  +-------------- bra.w 1512a <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   15056:	|  |               moveq #10,d0
   15058:	|  |               move.l d0,16(sp)
   1505c:	|  |               clr.l 12(sp)
   15060:	|  |               move.l 1c9c4 <SysBase>,d0
   15066:	|  |               movea.l d0,a6
   15068:	|  |               move.l 16(sp),d0
   1506c:	|  |               move.l 12(sp),d1
   15070:	|  |               jsr -684(a6)
   15074:	|  |               move.l d0,8(sp)
   15078:	|  |               move.l 8(sp),d0
   1507c:	|  |               move.l d0,4(sp)
			if (! buff) {
   15080:	|  |           /-- bne.s 15096 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   15082:	|  |           |   pea 19fef <newfatal.c.307beca7+0xdb>
   15088:	|  |           |   jsr 1729e <KPrintF>
   1508e:	|  |           |   addq.l #4,sp
				return NULL;
   15090:	|  |           |   moveq #0,d0
   15092:	|  +-----------|-- bra.w 1512a <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   15096:	|  |           \-> movea.l 84(sp),a0
   1509a:	|  |               move.l 4(a0),d0
   1509e:	|  |               move.l d0,-(sp)
   150a0:	|  |               pea 1a019 <newfatal.c.307beca7+0x105>
   150a6:	|  |               move.l 12(sp),-(sp)
   150aa:	|  |               jsr 1408e <sprintf>
   150b0:	|  |               lea 12(sp),sp
			return buff;
   150b4:	|  |               move.l 4(sp),d0
   150b8:	|  +-------------- bra.s 1512a <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   150ba:	|  |               movea.l 84(sp),a0
   150be:	|  |               move.l 4(a0),d0
   150c2:	|  |               move.l d0,-(sp)
   150c4:	|  |               jsr 423a <resourceNameFromNum>
   150ca:	|  |               addq.l #4,sp
   150cc:	|  |               move.l d0,-(sp)
   150ce:	|  |               pea 189ee <PutChar+0xc7c>
   150d4:	|  |               jsr 13db0 <joinStrings>
   150da:	|  |               addq.l #8,sp
   150dc:	|  +-------------- bra.s 1512a <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   150de:	|  |               movea.l 84(sp),a0
   150e2:	|  |               move.l 4(a0),d0
   150e6:	|  |               move.l d0,-(sp)
   150e8:	|  |               jsr d5ce <findObjectType>
   150ee:	|  |               addq.l #4,sp
   150f0:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   150f4:	+--|-------------- beq.s 15108 <getTextFromAnyVar+0x2ae>
   150f6:	|  |               movea.l 40(sp),a0
   150fa:	|  |               move.l (a0),d0
   150fc:	|  |               move.l d0,-(sp)
   150fe:	|  |               jsr b8 <copyString>
   15104:	|  |               addq.l #4,sp
   15106:	|  +-------------- bra.s 1512a <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   15108:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1510a:	   |               movea.l 84(sp),a0
   1510e:	   |               move.l (a0),d0
   15110:	   |               add.l d0,d0
   15112:	   |               movea.l d0,a1
   15114:	   |               adda.l d0,a1
   15116:	   |               lea 1c8a0 <typeName>,a0
   1511c:	   |               move.l (0,a1,a0.l),d0
   15120:	   |               move.l d0,-(sp)
   15122:	   |               jsr b8 <copyString>
   15128:	   |               addq.l #4,sp
}
   1512a:	   \-------------> movea.l (sp)+,a6
   1512c:	                   lea 76(sp),sp
   15130:	                   rts

00015132 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   15132:	move.l 4(sp),-(sp)
   15136:	jsr 14ad2 <unlinkVar>
   1513c:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1513e:	movea.l 4(sp),a0
   15142:	moveq #8,d0
   15144:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   15146:	movea.l 4(sp),a0
   1514a:	move.l 8(sp),4(a0)
}
   15150:	nop
   15152:	rts

00015154 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   15154:	move.l 4(sp),-(sp)
   15158:	jsr 14ad2 <unlinkVar>
   1515e:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   15160:	movea.l 4(sp),a0
   15164:	moveq #9,d0
   15166:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   15168:	movea.l 4(sp),a0
   1516c:	move.l 8(sp),4(a0)
}
   15172:	nop
   15174:	rts

00015176 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   15176:	move.l 4(sp),-(sp)
   1517a:	jsr 14ad2 <unlinkVar>
   15180:	addq.l #4,sp
	thisVar->varType = vT;
   15182:	movea.l 4(sp),a0
   15186:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   1518a:	movea.l 4(sp),a0
   1518e:	move.l 12(sp),4(a0)
}
   15194:	nop
   15196:	rts

00015198 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   15198:	      /-- bra.s 151aa <stackGetByIndex+0x12>
        vS = vS->next;
   1519a:	/-----|-> movea.l 4(sp),a0
   1519e:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   151a4:	|     +-- bne.s 151aa <stackGetByIndex+0x12>
            return NULL;
   151a6:	|     |   moveq #0,d0
   151a8:	|  /--|-- bra.s 151be <stackGetByIndex+0x26>
    while (theIndex--) {
   151aa:	|  |  \-> move.l 8(sp),d0
   151ae:	|  |      move.l d0,d1
   151b0:	|  |      subq.l #1,d1
   151b2:	|  |      move.l d1,8(sp)
   151b6:	|  |      tst.l d0
   151b8:	\--|----- bne.s 1519a <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   151ba:	   |      move.l 4(sp),d0
}
   151be:	   \----> rts

000151c0 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   151c0:	          tst.l 4(sp)
   151c4:	      /-- bne.s 151d4 <stackFindLast+0x14>
		return NULL;
   151c6:	      |   moveq #0,d0
   151c8:	/-----|-- bra.s 151e2 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   151ca:	|  /--|-> movea.l 4(sp),a0
   151ce:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   151d4:	|  |  \-> movea.l 4(sp),a0
   151d8:	|  |      move.l 8(a0),d0
   151dc:	|  \----- bne.s 151ca <stackFindLast+0xa>

	return hunt;
   151de:	|         move.l 4(sp),d0
}
   151e2:	\-------> rts

000151e4 <stackSize>:

int stackSize (const struct stackHandler * me) {
   151e4:	       subq.l #8,sp
	int r = 0;
   151e6:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   151ea:	       movea.l 12(sp),a0
   151ee:	       move.l (a0),(sp)
	while (a) {
   151f0:	   /-- bra.s 151fc <stackSize+0x18>
		r ++;
   151f2:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   151f6:	|  |   movea.l (sp),a0
   151f8:	|  |   move.l 8(a0),(sp)
	while (a) {
   151fc:	|  \-> tst.l (sp)
   151fe:	\----- bne.s 151f2 <stackSize+0xe>
	}
	return r;
   15200:	       move.l 4(sp),d0
}
   15204:	       addq.l #8,sp
   15206:	       rts

00015208 <trimStack>:

void trimStack (struct variableStack ** stack) {
   15208:	subq.l #8,sp
   1520a:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   1520c:	movea.l 16(sp),a0
   15210:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   15214:	movea.l 16(sp),a0
   15218:	movea.l (a0),a0
   1521a:	move.l 8(a0),d0
   1521e:	movea.l 16(sp),a0
   15222:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   15224:	move.l 8(sp),d0
   15228:	move.l d0,-(sp)
   1522a:	jsr 14ad2 <unlinkVar>
   15230:	addq.l #4,sp
	FreeVec(killMe);
   15232:	move.l 8(sp),4(sp)
   15238:	move.l 1c9c4 <SysBase>,d0
   1523e:	movea.l d0,a6
   15240:	movea.l 4(sp),a1
   15244:	jsr -690(a6)
   15248:	nop
   1524a:	movea.l (sp)+,a6
   1524c:	addq.l #8,sp
   1524e:	rts

00015250 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   15250:	       lea -52(sp),sp
   15254:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   15256:	       pea 1a01c <newfatal.c.307beca7+0x108>
   1525c:	       jsr 1729e <KPrintF>
   15262:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   15264:	       moveq #68,d0
   15266:	       move.l d0,52(sp)
   1526a:	       clr.l 48(sp)
   1526e:	       move.l 1c9c4 <SysBase>,d0
   15274:	       movea.l d0,a6
   15276:	       move.l 52(sp),d0
   1527a:	       move.l 48(sp),d1
   1527e:	       jsr -684(a6)
   15282:	       move.l d0,44(sp)
   15286:	       move.l 44(sp),d0
   1528a:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   1528e:	   /-- bne.s 15296 <freeze+0x46>
   15290:	   |   clr.w d0
   15292:	/--|-- bra.w 15420 <freeze+0x1d0>

	CstFreeze();
   15296:	|  \-> jsr 1e56 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   1529c:	|      move.l 1ca60 <sceneWidth>,d0
   152a2:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   152a6:	|      move.l 1ca64 <sceneHeight>,d0
   152ac:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   152b0:	|      move.l 1ca60 <sceneWidth>,d0
   152b6:	|      movea.l 40(sp),a0
   152ba:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   152be:	|      move.l 1ca64 <sceneHeight>,d0
   152c4:	|      movea.l 40(sp),a0
   152c8:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   152cc:	|      move.l 1ca7e <cameraX>,d0
   152d2:	|      movea.l 40(sp),a0
   152d6:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   152da:	|      move.l 1ca82 <cameraY>,d0
   152e0:	|      movea.l 40(sp),a0
   152e4:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   152e8:	|      move.l 1c362 <cameraZoom>,d0
   152ee:	|      movea.l 40(sp),a0
   152f2:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   152f6:	|      move.w #1,1ca6c <backdropExists>

	newFreezer -> allPeople = allPeople;
   152fe:	|      move.l 1ca28 <allPeople>,d0
   15304:	|      movea.l 40(sp),a0
   15308:	|      move.l d0,(a0)
	allPeople = NULL;
   1530a:	|      clr.l 1ca28 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15310:	|      moveq #42,d0
   15312:	|      move.l d0,28(sp)
   15316:	|      clr.l 24(sp)
   1531a:	|      move.l 1c9c4 <SysBase>,d0
   15320:	|      movea.l d0,a6
   15322:	|      move.l 28(sp),d0
   15326:	|      move.l 24(sp),d1
   1532a:	|      jsr -684(a6)
   1532e:	|      move.l d0,20(sp)
   15332:	|      move.l 20(sp),d0
   15336:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   1533a:	|  /-- bne.s 15342 <freeze+0xf2>
   1533c:	|  |   clr.w d0
   1533e:	+--|-- bra.w 15420 <freeze+0x1d0>

	newFreezer -> allScreenRegions = allScreenRegions;
   15342:	|  \-> move.l 1cad4 <allScreenRegions>,d0
   15348:	|      movea.l 40(sp),a0
   1534c:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   15350:	|      clr.l 1cad4 <allScreenRegions>
	overRegion = NULL;
   15356:	|      clr.l 1cad8 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   1535c:	|      move.l 1c8ca <mouseCursorAnim>,d0
   15362:	|      movea.l 40(sp),a0
   15366:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   1536a:	|      move.l 1c8ce <mouseCursorFrameNum>,d0
   15370:	|      movea.l 40(sp),a0
   15374:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   15378:	|      jsr ae3e <makeNullAnim>
   1537e:	|      move.l d0,1c8ca <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   15384:	|      clr.l 1c8ce <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   1538a:	|      move.l 1ca24 <zBuffer>,d0
   15390:	|      movea.l 40(sp),a0
   15394:	|      move.l d0,60(a0)
	zBuffer = NULL;
   15398:	|      clr.l 1ca24 <zBuffer>

	newFreezer -> speech = speech;
   1539e:	|      move.l 1ca20 <speech>,d0
   153a4:	|      movea.l 40(sp),a0
   153a8:	|      move.l d0,20(a0)
	initSpeech ();
   153ac:	|      jsr 7fe0 <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   153b2:	|      moveq #28,d0
   153b4:	|      move.l d0,12(sp)
   153b8:	|      clr.l 8(sp)
   153bc:	|      move.l 1c9c4 <SysBase>,d0
   153c2:	|      movea.l d0,a6
   153c4:	|      move.l 12(sp),d0
   153c8:	|      move.l 8(sp),d1
   153cc:	|      jsr -684(a6)
   153d0:	|      move.l d0,4(sp)
   153d4:	|      move.l 4(sp),d0
   153d8:	|      movea.l 40(sp),a0
   153dc:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   153e0:	|      movea.l 40(sp),a0
   153e4:	|      move.l 28(a0),d0
   153e8:	|  /-- bne.s 153ee <freeze+0x19e>
   153ea:	|  |   clr.w d0
   153ec:	+--|-- bra.s 15420 <freeze+0x1d0>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   153ee:	|  \-> movea.l 40(sp),a0
   153f2:	|      move.l 28(a0),d0
   153f6:	|      pea 1c <_start+0x1c>
   153fa:	|      clr.l -(sp)
   153fc:	|      move.l d0,-(sp)
   153fe:	|      jsr 17222 <memset>
   15404:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   15408:	|      move.l 1cab8 <frozenStuff>,d0
   1540e:	|      movea.l 40(sp),a0
   15412:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15416:	|      move.l 40(sp),1cab8 <frozenStuff>

	return TRUE;
   1541e:	|      moveq #1,d0
}
   15420:	\----> movea.l (sp)+,a6
   15422:	       lea 52(sp),sp
   15426:	       rts

00015428 <howFrozen>:

int howFrozen () {
   15428:	       subq.l #8,sp
	int a = 0;
   1542a:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   1542e:	       move.l 1cab8 <frozenStuff>,(sp)
	while (f) {
   15434:	   /-- bra.s 15440 <howFrozen+0x18>
		a ++;
   15436:	/--|-> addq.l #1,4(sp)
		f = f -> next;
   1543a:	|  |   movea.l (sp),a0
   1543c:	|  |   move.l 64(a0),(sp)
	while (f) {
   15440:	|  \-> tst.l (sp)
   15442:	\----- bne.s 15436 <howFrozen+0xe>
	}
	return a;
   15444:	       move.l 4(sp),d0
}
   15448:	       addq.l #8,sp
   1544a:	       rts

0001544c <unfreeze>:

void unfreeze () {
   1544c:	       lea -16(sp),sp
   15450:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   15452:	       move.l 1cab8 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   1545a:	       move.l 1cab8 <frozenStuff>,d0
   15460:	/----- beq.w 15698 <unfreeze+0x24c>

	CstUnfreeze();
   15464:	|      jsr 3e32 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   1546a:	|      movea.l 1cab8 <frozenStuff>,a0
   15470:	|      move.l 48(a0),d0
   15474:	|      move.l d0,1ca60 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   1547a:	|      movea.l 1cab8 <frozenStuff>,a0
   15480:	|      move.l 52(a0),d0
   15484:	|      move.l d0,1ca64 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   1548a:	|      movea.l 1cab8 <frozenStuff>,a0
   15490:	|      move.l 40(a0),d0
   15494:	|      move.l d0,1ca7e <cameraX>
	cameraY = frozenStuff -> cameraY;
   1549a:	|      movea.l 1cab8 <frozenStuff>,a0
   154a0:	|      move.l 44(a0),d0
   154a4:	|      move.l d0,1ca82 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   154aa:	|      move.l 1c980 <input+0xa>,d0
   154b0:	|      move.l d0,-(sp)
   154b2:	|      jsr 176da <__floatsisf>
   154b8:	|      addq.l #4,sp
   154ba:	|      move.l d0,d1
   154bc:	|      move.l 1c362 <cameraZoom>,d0
   154c2:	|      move.l d0,-(sp)
   154c4:	|      move.l d1,-(sp)
   154c6:	|      jsr 1778c <__mulsf3>
   154cc:	|      addq.l #8,sp
   154ce:	|      move.l d0,-(sp)
   154d0:	|      jsr 17672 <__fixsfsi>
   154d6:	|      addq.l #4,sp
   154d8:	|      move.l d0,1c980 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   154de:	|      move.l 1c984 <input+0xe>,d0
   154e4:	|      move.l d0,-(sp)
   154e6:	|      jsr 176da <__floatsisf>
   154ec:	|      addq.l #4,sp
   154ee:	|      move.l d0,d1
   154f0:	|      move.l 1c362 <cameraZoom>,d0
   154f6:	|      move.l d0,-(sp)
   154f8:	|      move.l d1,-(sp)
   154fa:	|      jsr 1778c <__mulsf3>
   15500:	|      addq.l #8,sp
   15502:	|      move.l d0,-(sp)
   15504:	|      jsr 17672 <__fixsfsi>
   1550a:	|      addq.l #4,sp
   1550c:	|      move.l d0,1c984 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15512:	|      movea.l 1cab8 <frozenStuff>,a0
   15518:	|      move.l 56(a0),d0
   1551c:	|      move.l d0,1c362 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15522:	|      move.l 1c980 <input+0xa>,d0
   15528:	|      move.l d0,-(sp)
   1552a:	|      jsr 176da <__floatsisf>
   15530:	|      addq.l #4,sp
   15532:	|      move.l d0,d1
   15534:	|      move.l 1c362 <cameraZoom>,d0
   1553a:	|      move.l d0,-(sp)
   1553c:	|      move.l d1,-(sp)
   1553e:	|      jsr 17586 <__divsf3>
   15544:	|      addq.l #8,sp
   15546:	|      move.l d0,-(sp)
   15548:	|      jsr 17672 <__fixsfsi>
   1554e:	|      addq.l #4,sp
   15550:	|      move.l d0,1c980 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   15556:	|      move.l 1c984 <input+0xe>,d0
   1555c:	|      move.l d0,-(sp)
   1555e:	|      jsr 176da <__floatsisf>
   15564:	|      addq.l #4,sp
   15566:	|      move.l d0,d1
   15568:	|      move.l 1c362 <cameraZoom>,d0
   1556e:	|      move.l d0,-(sp)
   15570:	|      move.l d1,-(sp)
   15572:	|      jsr 17586 <__divsf3>
   15578:	|      addq.l #8,sp
   1557a:	|      move.l d0,-(sp)
   1557c:	|      jsr 17672 <__fixsfsi>
   15582:	|      addq.l #4,sp
   15584:	|      move.l d0,1c984 <input+0xe>

	killAllPeople ();
   1558a:	|      jsr ab46 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15590:	|      movea.l 1cab8 <frozenStuff>,a0
   15596:	|      move.l (a0),d0
   15598:	|      move.l d0,1ca28 <allPeople>

	killAllRegions ();
   1559e:	|      jsr 15af4 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   155a4:	|      movea.l 1cab8 <frozenStuff>,a0
   155aa:	|      move.l 4(a0),d0
   155ae:	|      move.l d0,1cad4 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   155b4:	|      move.l 1c8ca <mouseCursorAnim>,d0
   155ba:	|      move.l d0,-(sp)
   155bc:	|      jsr 9a3a <deleteAnim>
   155c2:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   155c4:	|      movea.l 1cab8 <frozenStuff>,a0
   155ca:	|      move.l 32(a0),d0
   155ce:	|      move.l d0,1c8ca <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   155d4:	|      movea.l 1cab8 <frozenStuff>,a0
   155da:	|      move.l 36(a0),d0
   155de:	|      move.l d0,1c8ce <mouseCursorFrameNum>

	killZBuffer ();
   155e4:	|      jsr 8854 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   155ea:	|      movea.l 1cab8 <frozenStuff>,a0
   155f0:	|      move.l 60(a0),d0
   155f4:	|      move.l d0,1ca24 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   155fa:	|      move.l 1c33c <currentEvents>,d0
   15600:	|  /-- beq.s 1561a <unfreeze+0x1ce>
   15602:	|  |   move.l 1c33c <currentEvents>,12(sp)
   1560a:	|  |   move.l 1c9c4 <SysBase>,d0
   15610:	|  |   movea.l d0,a6
   15612:	|  |   movea.l 12(sp),a1
   15616:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   1561a:	|  \-> movea.l 1cab8 <frozenStuff>,a0
   15620:	|      move.l 28(a0),d0
   15624:	|      move.l d0,1c33c <currentEvents>

	killAllSpeech ();
   1562a:	|      jsr 8078 <killAllSpeech>
	if (speech) FreeVec(speech);
   15630:	|      move.l 1ca20 <speech>,d0
   15636:	|  /-- beq.s 15650 <unfreeze+0x204>
   15638:	|  |   move.l 1ca20 <speech>,8(sp)
   15640:	|  |   move.l 1c9c4 <SysBase>,d0
   15646:	|  |   movea.l d0,a6
   15648:	|  |   movea.l 8(sp),a1
   1564c:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   15650:	|  \-> movea.l 1cab8 <frozenStuff>,a0
   15656:	|      move.l 20(a0),d0
   1565a:	|      move.l d0,1ca20 <speech>

	frozenStuff = frozenStuff -> next;
   15660:	|      movea.l 1cab8 <frozenStuff>,a0
   15666:	|      move.l 64(a0),d0
   1566a:	|      move.l d0,1cab8 <frozenStuff>

	overRegion = NULL;
   15670:	|      clr.l 1cad8 <overRegion>
	if (killMe) FreeVec(killMe);
   15676:	|      tst.l 16(sp)
   1567a:	|  /-- beq.s 15692 <unfreeze+0x246>
   1567c:	|  |   move.l 16(sp),4(sp)
   15682:	|  |   move.l 1c9c4 <SysBase>,d0
   15688:	|  |   movea.l d0,a6
   1568a:	|  |   movea.l 4(sp),a1
   1568e:	|  |   jsr -690(a6)
	killMe = NULL;
   15692:	|  \-> clr.l 16(sp)
   15696:	|  /-- bra.s 1569a <unfreeze+0x24e>
	if (! frozenStuff) return;
   15698:	\--|-> nop
}
   1569a:	   \-> movea.l (sp)+,a6
   1569c:	       lea 16(sp),sp
   156a0:	       rts

000156a2 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   156a2:	pea 1a02e <newfatal.c.307beca7+0x11a>
   156a8:	jsr 1729e <KPrintF>
   156ae:	addq.l #4,sp
	return FALSE;
   156b0:	clr.w d0
}
   156b2:	rts

000156b4 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   156b4:	          lea -32(sp),sp
   156b8:	          move.l a6,-(sp)
   156ba:	          move.l d2,-(sp)
	unsigned int a = 0;
   156bc:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   156c0:	          move.l 1cac4 <fontOrderString>,d0
   156c6:	      /-- beq.s 156e0 <loadFont+0x2c>
   156c8:	      |   move.l 1cac4 <fontOrderString>,24(sp)
   156d0:	      |   move.l 1c9c4 <SysBase>,d0
   156d6:	      |   movea.l d0,a6
   156d8:	      |   movea.l 24(sp),a1
   156dc:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   156e0:	      \-> move.l 48(sp),-(sp)
   156e4:	          jsr b8 <copyString>
   156ea:	          addq.l #4,sp
   156ec:	          move.l d0,1cac4 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   156f2:	          move.l 1cad0 <theFont>,d0
   156f8:	      /-- beq.s 1570a <loadFont+0x56>
   156fa:	      |   move.l 1cad0 <theFont>,d0
   15700:	      |   move.l d0,-(sp)
   15702:	      |   jsr 8b92 <forgetSpriteBank>
   15708:	      |   addq.l #4,sp
	theFont = NULL;
   1570a:	      \-> clr.l 1cad0 <theFont>

	loadedFontNum = filenum;
   15710:	          move.l 44(sp),1cac0 <loadedFontNum>

	fontTableSize = 0;
   15718:	          clr.l 1cacc <fontTableSize>
	char *tmp = charOrder;
   1571e:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15724:	   /----- bra.s 15760 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15726:	/--|----> movea.l 32(sp),a0
   1572a:	|  |      move.b (a0),d0
   1572c:	|  |      ext.w d0
   1572e:	|  |      movea.w d0,a0
   15730:	|  |      move.l 1cacc <fontTableSize>,d0
   15736:	|  |      move.l d0,d0
   15738:	|  |      move.b d0,d0
   1573a:	|  |      andi.l #255,d0
   15740:	|  |      cmp.l a0,d0
   15742:	|  |  /-- bge.s 15754 <loadFont+0xa0>
   15744:	|  |  |   movea.l 32(sp),a0
   15748:	|  |  |   move.b (a0),d0
   1574a:	|  |  |   ext.w d0
   1574c:	|  |  |   movea.w d0,a0
   1574e:	|  |  |   move.l a0,1cacc <fontTableSize>
		*tmp++;
   15754:	|  |  \-> move.l 32(sp),d0
   15758:	|  |      move.l d0,d1
   1575a:	|  |      addq.l #1,d1
   1575c:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   15760:	|  \----> movea.l 32(sp),a0
   15764:	|         move.b (a0),d0
   15766:	\-------- bne.s 15726 <loadFont+0x72>
	}
	fontTableSize++;
   15768:	          move.l 1cacc <fontTableSize>,d0
   1576e:	          addq.l #1,d0
   15770:	          move.l d0,1cacc <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15776:	          move.l 1cac8 <fontTable>,d0
   1577c:	      /-- beq.s 15796 <loadFont+0xe2>
   1577e:	      |   move.l 1cac8 <fontTable>,20(sp)
   15786:	      |   move.l 1c9c4 <SysBase>,d0
   1578c:	      |   movea.l d0,a6
   1578e:	      |   movea.l 20(sp),a1
   15792:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15796:	      \-> move.l 1cacc <fontTableSize>,d0
   1579c:	          add.l d0,d0
   1579e:	          add.l d0,d0
   157a0:	          move.l d0,16(sp)
   157a4:	          clr.l 12(sp)
   157a8:	          move.l 1c9c4 <SysBase>,d0
   157ae:	          movea.l d0,a6
   157b0:	          move.l 16(sp),d0
   157b4:	          move.l 12(sp),d1
   157b8:	          jsr -684(a6)
   157bc:	          move.l d0,8(sp)
   157c0:	          move.l 8(sp),d0
   157c4:	          move.l d0,1cac8 <fontTable>
	if (!fontTable) return FALSE;
   157ca:	          move.l 1cac8 <fontTable>,d0
   157d0:	      /-- bne.s 157d8 <loadFont+0x124>
   157d2:	      |   clr.w d0
   157d4:	/-----|-- bra.w 1587e <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   157d8:	|     \-> clr.l 36(sp)
   157dc:	|     /-- bra.s 157f6 <loadFont+0x142>
		fontTable[a] = 0;
   157de:	|  /--|-> move.l 1cac8 <fontTable>,d1
   157e4:	|  |  |   move.l 36(sp),d0
   157e8:	|  |  |   add.l d0,d0
   157ea:	|  |  |   add.l d0,d0
   157ec:	|  |  |   movea.l d1,a0
   157ee:	|  |  |   adda.l d0,a0
   157f0:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   157f2:	|  |  |   addq.l #1,36(sp)
   157f6:	|  |  \-> move.l 1cacc <fontTableSize>,d0
   157fc:	|  |      cmp.l 36(sp),d0
   15800:	|  \----- bhi.s 157de <loadFont+0x12a>
	}
	a = 0;
   15802:	|         clr.l 36(sp)
	int i = 0;
   15806:	|         clr.l 28(sp)
	tmp = charOrder;
   1580a:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15810:	|     /-- bra.s 15840 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15812:	|  /--|-> move.l 1cac8 <fontTable>,d1
   15818:	|  |  |   move.l 32(sp),d0
   1581c:	|  |  |   move.l d0,d2
   1581e:	|  |  |   addq.l #1,d2
   15820:	|  |  |   move.l d2,32(sp)
   15824:	|  |  |   movea.l d0,a0
   15826:	|  |  |   move.b (a0),d0
   15828:	|  |  |   ext.w d0
   1582a:	|  |  |   movea.w d0,a0
   1582c:	|  |  |   move.l a0,d0
   1582e:	|  |  |   add.l a0,d0
   15830:	|  |  |   add.l d0,d0
   15832:	|  |  |   movea.l d1,a0
   15834:	|  |  |   adda.l d0,a0
   15836:	|  |  |   move.l 28(sp),d0
   1583a:	|  |  |   move.l d0,(a0)
		i++;
   1583c:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   15840:	|  |  \-> movea.l 32(sp),a0
   15844:	|  |      move.b (a0),d0
   15846:	|  \----- bne.s 15812 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15848:	|         move.l 44(sp),-(sp)
   1584c:	|         jsr 16006 <loadBankForAnim>
   15852:	|         addq.l #4,sp
   15854:	|         move.l d0,1cad0 <theFont>
	if (!theFont) {
   1585a:	|         move.l 1cad0 <theFont>,d0
   15860:	|     /-- bne.s 15874 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   15862:	|     |   pea 1a055 <newfatal.c.307beca7+0x141>
   15868:	|     |   jsr 1729e <KPrintF>
   1586e:	|     |   addq.l #4,sp
		return FALSE;
   15870:	|     |   clr.w d0
   15872:	+-----|-- bra.s 1587e <loadFont+0x1ca>
	}
	fontHeight = h;
   15874:	|     \-> move.l 52(sp),1cabc <fontHeight>
	return TRUE;
   1587c:	|         moveq #1,d0
}
   1587e:	\-------> move.l (sp)+,d2
   15880:	          movea.l (sp)+,a6
   15882:	          lea 32(sp),sp
   15886:	          rts

00015888 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15888:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   1588c:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15890:	                move.l 1cacc <fontTableSize>,d0
   15896:	/-------------- beq.w 1595e <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   1589a:	|               move.w 1c8c8 <fontSpace>,d0
   158a0:	|               asr.w #1,d0
   158a2:	|               ext.l d0
   158a4:	|               add.l d0,20(sp)
	char *tmp = theText;
   158a8:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   158ae:	|     /-------- bra.w 15952 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   158b2:	|  /--|-------> movea.l 1cad0 <theFont>,a0
   158b8:	|  |  |         movea.l 16(a0),a0
   158bc:	|  |  |         movea.l 8(sp),a1
   158c0:	|  |  |         move.b (a1),d0
   158c2:	|  |  |         move.b d0,d0
   158c4:	|  |  |         andi.l #255,d0
   158ca:	|  |  |         move.l 1cacc <fontTableSize>,d1
   158d0:	|  |  |         cmp.l d0,d1
   158d2:	|  |  |  /----- bls.s 158fe <pasteStringToBackdrop+0x76>
   158d4:	|  |  |  |      move.l 1cac8 <fontTable>,d1
   158da:	|  |  |  |      movea.l 8(sp),a1
   158de:	|  |  |  |      move.b (a1),d0
   158e0:	|  |  |  |      move.b d0,d0
   158e2:	|  |  |  |      andi.l #255,d0
   158e8:	|  |  |  |      add.l d0,d0
   158ea:	|  |  |  |      add.l d0,d0
   158ec:	|  |  |  |      movea.l d1,a1
   158ee:	|  |  |  |      adda.l d0,a1
   158f0:	|  |  |  |      move.l (a1),d1
   158f2:	|  |  |  |      move.l d1,d0
   158f4:	|  |  |  |      lsl.l #3,d0
   158f6:	|  |  |  |      sub.l d1,d0
   158f8:	|  |  |  |      add.l d0,d0
   158fa:	|  |  |  |      add.l d0,d0
   158fc:	|  |  |  |  /-- bra.s 15900 <pasteStringToBackdrop+0x78>
   158fe:	|  |  |  \--|-> moveq #0,d0
   15900:	|  |  |     \-> adda.l d0,a0
   15902:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15904:	|  |  |         move.l 24(sp),d1
   15908:	|  |  |         movea.l (sp),a0
   1590a:	|  |  |         move.l 12(a0),d0
   1590e:	|  |  |         move.l d0,d0
   15910:	|  |  |         sub.w d0,d1
   15912:	|  |  |         move.w d1,d0
   15914:	|  |  |         movea.w d0,a1
   15916:	|  |  |         move.l 20(sp),d1
   1591a:	|  |  |         movea.l (sp),a0
   1591c:	|  |  |         move.l 8(a0),d0
   15920:	|  |  |         move.l d0,d0
   15922:	|  |  |         sub.w d0,d1
   15924:	|  |  |         move.w d1,d0
   15926:	|  |  |         movea.w d0,a0
   15928:	|  |  |         move.l a1,-(sp)
   1592a:	|  |  |         move.l a0,-(sp)
   1592c:	|  |  |         move.l 8(sp),-(sp)
   15930:	|  |  |         jsr 24f8 <CstPasteChar>
   15936:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   1593a:	|  |  |         movea.l (sp),a0
   1593c:	|  |  |         move.l (a0),d1
   1593e:	|  |  |         move.w 1c8c8 <fontSpace>,d0
   15944:	|  |  |         movea.w d0,a0
   15946:	|  |  |         move.l d1,d0
   15948:	|  |  |         add.l a0,d0
   1594a:	|  |  |         add.l d0,20(sp)
		tmp++;
   1594e:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   15952:	|  |  \-------> movea.l 8(sp),a0
   15956:	|  |            move.b (a0),d0
   15958:	|  \----------- bne.w 158b2 <pasteStringToBackdrop+0x2a>
   1595c:	|           /-- bra.s 15960 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   1595e:	\-----------|-> nop
    }
}
   15960:	            \-> lea 12(sp),sp
   15964:	                rts

00015966 <stringWidth>:


int stringWidth (char * theText) {
   15966:	       subq.l #8,sp
	int a = 0;
   15968:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   1596c:	       clr.l (sp)

	if (! fontTableSize) return 0;
   1596e:	       move.l 1cacc <fontTableSize>,d0
   15974:	/----- bne.s 1597a <stringWidth+0x14>
   15976:	|      moveq #0,d0
   15978:	|  /-- bra.s 1597c <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   1597a:	\--|-> move.l (sp),d0
}
   1597c:	   \-> addq.l #8,sp
   1597e:	       rts

00015980 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15980:	       lea -16(sp),sp
   15984:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15986:	       moveq #36,d0
   15988:	       move.l d0,16(sp)
   1598c:	       clr.l 12(sp)
   15990:	       move.l 1c9c4 <SysBase>,d0
   15996:	       movea.l d0,a6
   15998:	       move.l 16(sp),d0
   1599c:	       move.l 12(sp),d1
   159a0:	       jsr -684(a6)
   159a4:	       move.l d0,8(sp)
   159a8:	       move.l 8(sp),d0
   159ac:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   159b0:	   /-- bne.s 159b8 <addScreenRegion+0x38>
   159b2:	   |   clr.w d0
   159b4:	/--|-- bra.w 15a38 <addScreenRegion+0xb8>
    newRegion->di = di;
   159b8:	|  \-> movea.l 4(sp),a0
   159bc:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   159c2:	|      movea.l 4(sp),a0
   159c6:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   159ca:	|      movea.l 4(sp),a0
   159ce:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   159d4:	|      movea.l 4(sp),a0
   159d8:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   159de:	|      movea.l 4(sp),a0
   159e2:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   159e8:	|      movea.l 4(sp),a0
   159ec:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   159f2:	|      movea.l 4(sp),a0
   159f6:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   159fc:	|      move.l 52(sp),-(sp)
   15a00:	|      jsr d6be <loadObjectType>
   15a06:	|      addq.l #4,sp
   15a08:	|      movea.l 4(sp),a0
   15a0c:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15a10:	|      move.l 1cad4 <allScreenRegions>,d0
   15a16:	|      movea.l 4(sp),a0
   15a1a:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15a1e:	|      move.l 4(sp),1cad4 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15a26:	|      movea.l 4(sp),a0
   15a2a:	|      move.l 28(a0),d0
   15a2e:	|      sne d0
   15a30:	|      neg.b d0
   15a32:	|      move.b d0,d0
   15a34:	|      andi.w #255,d0
}
   15a38:	\----> movea.l (sp)+,a6
   15a3a:	       lea 16(sp),sp
   15a3e:	       rts

00015a40 <getOverRegion>:

void getOverRegion () {
   15a40:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15a42:	             move.l 1cad4 <allScreenRegions>,(sp)
	while (thisRegion) {
   15a48:	   /-------- bra.s 15ab6 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15a4a:	/--|-------> move.l 1c980 <input+0xa>,d0
   15a50:	|  |         movea.l (sp),a0
   15a52:	|  |         movea.l (a0),a0
   15a54:	|  |         move.l 1ca7e <cameraX>,d1
   15a5a:	|  |         suba.l d1,a0
   15a5c:	|  |         cmpa.l d0,a0
   15a5e:	|  |  /----- bgt.s 15ab0 <getOverRegion+0x70>
   15a60:	|  |  |      move.l 1c984 <input+0xe>,d0
   15a66:	|  |  |      movea.l (sp),a0
   15a68:	|  |  |      movea.l 4(a0),a0
   15a6c:	|  |  |      move.l 1ca82 <cameraY>,d1
   15a72:	|  |  |      suba.l d1,a0
   15a74:	|  |  |      cmpa.l d0,a0
   15a76:	|  |  +----- bgt.s 15ab0 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15a78:	|  |  |      move.l 1c980 <input+0xa>,d0
   15a7e:	|  |  |      movea.l (sp),a0
   15a80:	|  |  |      movea.l 8(a0),a0
   15a84:	|  |  |      move.l 1ca7e <cameraX>,d1
   15a8a:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15a8c:	|  |  |      cmpa.l d0,a0
   15a8e:	|  |  +----- blt.s 15ab0 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15a90:	|  |  |      move.l 1c984 <input+0xe>,d0
   15a96:	|  |  |      movea.l (sp),a0
   15a98:	|  |  |      movea.l 12(a0),a0
   15a9c:	|  |  |      move.l 1ca82 <cameraY>,d1
   15aa2:	|  |  |      suba.l d1,a0
   15aa4:	|  |  |      cmpa.l d0,a0
   15aa6:	|  |  +----- blt.s 15ab0 <getOverRegion+0x70>
			overRegion = thisRegion;
   15aa8:	|  |  |      move.l (sp),1cad8 <overRegion>
			return;
   15aae:	|  |  |  /-- bra.s 15ac2 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15ab0:	|  |  \--|-> movea.l (sp),a0
   15ab2:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15ab6:	|  \-----|-> tst.l (sp)
   15ab8:	\--------|-- bne.s 15a4a <getOverRegion+0xa>
	}
	overRegion = NULL;
   15aba:	         |   clr.l 1cad8 <overRegion>
	return;
   15ac0:	         |   nop
}
   15ac2:	         \-> addq.l #4,sp
   15ac4:	             rts

00015ac6 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15ac6:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15ac8:	             move.l 1cad4 <allScreenRegions>,(sp)

	while (thisRegion) {
   15ace:	   /-------- bra.s 15aea <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15ad0:	/--|-------> movea.l (sp),a0
   15ad2:	|  |         movea.l 28(a0),a0
   15ad6:	|  |         move.l 4(a0),d0
   15ada:	|  |         cmp.l 8(sp),d0
   15ade:	|  |     /-- bne.s 15ae4 <getRegionForObject+0x1e>
			return thisRegion;
   15ae0:	|  |     |   move.l (sp),d0
   15ae2:	|  |  /--|-- bra.s 15af0 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15ae4:	|  |  |  \-> movea.l (sp),a0
   15ae6:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15aea:	|  \--|----> tst.l (sp)
   15aec:	\-----|----- bne.s 15ad0 <getRegionForObject+0xa>
	}

	return NULL;
   15aee:	      |      moveq #0,d0
}
   15af0:	      \----> addq.l #4,sp
   15af2:	             rts

00015af4 <killAllRegions>:

void killAllRegions () {
   15af4:	       subq.l #8,sp
   15af6:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15af8:	   /-- bra.s 15b3a <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15afa:	/--|-> move.l 1cad4 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15b02:	|  |   movea.l 1cad4 <allScreenRegions>,a0
   15b08:	|  |   move.l 32(a0),d0
   15b0c:	|  |   move.l d0,1cad4 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15b12:	|  |   movea.l 8(sp),a0
   15b16:	|  |   move.l 28(a0),d0
   15b1a:	|  |   move.l d0,-(sp)
   15b1c:	|  |   jsr d976 <removeObjectType>
   15b22:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15b24:	|  |   move.l 8(sp),4(sp)
   15b2a:	|  |   move.l 1c9c4 <SysBase>,d0
   15b30:	|  |   movea.l d0,a6
   15b32:	|  |   movea.l 4(sp),a1
   15b36:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15b3a:	|  \-> move.l 1cad4 <allScreenRegions>,d0
   15b40:	\----- bne.s 15afa <killAllRegions+0x6>
	}
	overRegion = NULL;
   15b42:	       clr.l 1cad8 <overRegion>
}
   15b48:	       nop
   15b4a:	       movea.l (sp)+,a6
   15b4c:	       addq.l #8,sp
   15b4e:	       rts

00015b50 <loadRegions>:

void loadRegions (BPTR fp) {
   15b50:	       lea -24(sp),sp
   15b54:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15b56:	       move.l 32(sp),-(sp)
   15b5a:	       jsr 6bc <get2bytes>
   15b60:	       addq.l #4,sp
   15b62:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15b66:	       move.l #117460,20(sp)

	while (numRegions --) {
   15b6e:	   /-- bra.w 15c4c <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15b72:	/--|-> moveq #36,d0
   15b74:	|  |   move.l d0,16(sp)
   15b78:	|  |   clr.l 12(sp)
   15b7c:	|  |   move.l 1c9c4 <SysBase>,d0
   15b82:	|  |   movea.l d0,a6
   15b84:	|  |   move.l 16(sp),d0
   15b88:	|  |   move.l 12(sp),d1
   15b8c:	|  |   jsr -684(a6)
   15b90:	|  |   move.l d0,8(sp)
   15b94:	|  |   move.l 8(sp),d0
   15b98:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15b9c:	|  |   movea.l 20(sp),a0
   15ba0:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15ba4:	|  |   moveq #32,d1
   15ba6:	|  |   add.l 4(sp),d1
   15baa:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15bae:	|  |   move.l 32(sp),-(sp)
   15bb2:	|  |   jsr 6bc <get2bytes>
   15bb8:	|  |   addq.l #4,sp
   15bba:	|  |   movea.l 4(sp),a0
   15bbe:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15bc0:	|  |   move.l 32(sp),-(sp)
   15bc4:	|  |   jsr 6bc <get2bytes>
   15bca:	|  |   addq.l #4,sp
   15bcc:	|  |   movea.l 4(sp),a0
   15bd0:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15bd4:	|  |   move.l 32(sp),-(sp)
   15bd8:	|  |   jsr 6bc <get2bytes>
   15bde:	|  |   addq.l #4,sp
   15be0:	|  |   movea.l 4(sp),a0
   15be4:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15be8:	|  |   move.l 32(sp),-(sp)
   15bec:	|  |   jsr 6bc <get2bytes>
   15bf2:	|  |   addq.l #4,sp
   15bf4:	|  |   movea.l 4(sp),a0
   15bf8:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15bfc:	|  |   move.l 32(sp),-(sp)
   15c00:	|  |   jsr 6bc <get2bytes>
   15c06:	|  |   addq.l #4,sp
   15c08:	|  |   movea.l 4(sp),a0
   15c0c:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15c10:	|  |   move.l 32(sp),-(sp)
   15c14:	|  |   jsr 6bc <get2bytes>
   15c1a:	|  |   addq.l #4,sp
   15c1c:	|  |   movea.l 4(sp),a0
   15c20:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15c24:	|  |   move.l 32(sp),-(sp)
   15c28:	|  |   jsr 6bc <get2bytes>
   15c2e:	|  |   addq.l #4,sp
   15c30:	|  |   movea.l 4(sp),a0
   15c34:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15c38:	|  |   move.l 32(sp),-(sp)
   15c3c:	|  |   jsr d66c <loadObjectRef>
   15c42:	|  |   addq.l #4,sp
   15c44:	|  |   movea.l 4(sp),a0
   15c48:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15c4c:	|  \-> move.l 24(sp),d0
   15c50:	|      move.l d0,d1
   15c52:	|      subq.l #1,d1
   15c54:	|      move.l d1,24(sp)
   15c58:	|      tst.l d0
   15c5a:	\----- bne.w 15b72 <loadRegions+0x22>
	}
	* pointy = NULL;
   15c5e:	       movea.l 20(sp),a0
   15c62:	       clr.l (a0)
}
   15c64:	       nop
   15c66:	       movea.l (sp)+,a6
   15c68:	       lea 24(sp),sp
   15c6c:	       rts

00015c6e <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15c6e:	             lea -12(sp),sp
   15c72:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15c74:	             move.l #117460,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15c7c:	   /-------- bra.s 15cf6 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15c7e:	/--|-------> movea.l 12(sp),a0
   15c82:	|  |         movea.l (a0),a0
   15c84:	|  |         movea.l 28(a0),a0
   15c88:	|  |         move.l 4(a0),d0
   15c8c:	|  |         cmp.l 20(sp),d0
   15c90:	|  |  /----- bne.s 15ce8 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15c92:	|  |  |      movea.l 12(sp),a0
   15c96:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15c9a:	|  |  |      movea.l 8(sp),a0
   15c9e:	|  |  |      move.l 32(a0),d0
   15ca2:	|  |  |      movea.l 12(sp),a0
   15ca6:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15ca8:	|  |  |      movea.l 8(sp),a0
   15cac:	|  |  |      move.l 28(a0),d0
   15cb0:	|  |  |      move.l d0,-(sp)
   15cb2:	|  |  |      jsr d976 <removeObjectType>
   15cb8:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15cba:	|  |  |      move.l 1cad8 <overRegion>,d0
   15cc0:	|  |  |      cmp.l 8(sp),d0
   15cc4:	|  |  |  /-- bne.s 15ccc <removeScreenRegion+0x5e>
   15cc6:	|  |  |  |   clr.l 1cad8 <overRegion>
            FreeVec(killMe);
   15ccc:	|  |  |  \-> move.l 8(sp),4(sp)
   15cd2:	|  |  |      move.l 1c9c4 <SysBase>,d0
   15cd8:	|  |  |      movea.l d0,a6
   15cda:	|  |  |      movea.l 4(sp),a1
   15cde:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15ce2:	|  |  |      clr.l 8(sp)
   15ce6:	|  +--|----- bra.s 15cf6 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15ce8:	|  |  \----> movea.l 12(sp),a0
   15cec:	|  |         move.l (a0),d0
   15cee:	|  |         moveq #32,d1
   15cf0:	|  |         add.l d0,d1
   15cf2:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15cf6:	|  \-------> movea.l 12(sp),a0
   15cfa:	|            move.l (a0),d0
   15cfc:	\----------- bne.s 15c7e <removeScreenRegion+0x10>
        }
    }
}
   15cfe:	             nop
   15d00:	             nop
   15d02:	             movea.l (sp)+,a6
   15d04:	             lea 12(sp),sp
   15d08:	             rts

00015d0a <saveRegions>:

void saveRegions (BPTR fp) {
   15d0a:	       subq.l #8,sp
	int numRegions = 0;
   15d0c:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15d10:	       move.l 1cad4 <allScreenRegions>,(sp)
	while (thisRegion) {
   15d16:	   /-- bra.s 15d22 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15d18:	/--|-> movea.l (sp),a0
   15d1a:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15d1e:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15d22:	|  \-> tst.l (sp)
   15d24:	\----- bne.s 15d18 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15d26:	       move.l 12(sp),-(sp)
   15d2a:	       move.l 8(sp),-(sp)
   15d2e:	       jsr 8d0 <put2bytes>
   15d34:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15d36:	       move.l 1cad4 <allScreenRegions>,(sp)
	while (thisRegion) {
   15d3c:	/----- bra.w 15de4 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15d40:	|  /-> movea.l (sp),a0
   15d42:	|  |   move.l (a0),d0
   15d44:	|  |   move.l 12(sp),-(sp)
   15d48:	|  |   move.l d0,-(sp)
   15d4a:	|  |   jsr 8d0 <put2bytes>
   15d50:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15d52:	|  |   movea.l (sp),a0
   15d54:	|  |   move.l 4(a0),d0
   15d58:	|  |   move.l 12(sp),-(sp)
   15d5c:	|  |   move.l d0,-(sp)
   15d5e:	|  |   jsr 8d0 <put2bytes>
   15d64:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15d66:	|  |   movea.l (sp),a0
   15d68:	|  |   move.l 8(a0),d0
   15d6c:	|  |   move.l 12(sp),-(sp)
   15d70:	|  |   move.l d0,-(sp)
   15d72:	|  |   jsr 8d0 <put2bytes>
   15d78:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15d7a:	|  |   movea.l (sp),a0
   15d7c:	|  |   move.l 12(a0),d0
   15d80:	|  |   move.l 12(sp),-(sp)
   15d84:	|  |   move.l d0,-(sp)
   15d86:	|  |   jsr 8d0 <put2bytes>
   15d8c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15d8e:	|  |   movea.l (sp),a0
   15d90:	|  |   move.l 16(a0),d0
   15d94:	|  |   move.l 12(sp),-(sp)
   15d98:	|  |   move.l d0,-(sp)
   15d9a:	|  |   jsr 8d0 <put2bytes>
   15da0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15da2:	|  |   movea.l (sp),a0
   15da4:	|  |   move.l 20(a0),d0
   15da8:	|  |   move.l 12(sp),-(sp)
   15dac:	|  |   move.l d0,-(sp)
   15dae:	|  |   jsr 8d0 <put2bytes>
   15db4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15db6:	|  |   movea.l (sp),a0
   15db8:	|  |   move.l 24(a0),d0
   15dbc:	|  |   move.l 12(sp),-(sp)
   15dc0:	|  |   move.l d0,-(sp)
   15dc2:	|  |   jsr 8d0 <put2bytes>
   15dc8:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15dca:	|  |   movea.l (sp),a0
   15dcc:	|  |   move.l 28(a0),d0
   15dd0:	|  |   move.l 12(sp),-(sp)
   15dd4:	|  |   move.l d0,-(sp)
   15dd6:	|  |   jsr da16 <saveObjectRef>
   15ddc:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15dde:	|  |   movea.l (sp),a0
   15de0:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15de4:	\--|-> tst.l (sp)
   15de6:	   \-- bne.w 15d40 <saveRegions+0x36>
	}
}
   15dea:	       nop
   15dec:	       nop
   15dee:	       addq.l #8,sp
   15df0:	       rts

00015df2 <showBoxes>:

void showBoxes () {
   15df2:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15df4:	       move.l 1cad4 <allScreenRegions>,(sp)

	while (huntRegion) {
   15dfa:	/----- bra.w 15e96 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15dfe:	|  /-> movea.l (sp),a0
   15e00:	|  |   move.l 12(a0),d0
   15e04:	|  |   movea.l d0,a1
   15e06:	|  |   movea.l (sp),a0
   15e08:	|  |   move.l 4(a0),d0
   15e0c:	|  |   move.l d0,d1
   15e0e:	|  |   movea.l (sp),a0
   15e10:	|  |   move.l (a0),d0
   15e12:	|  |   move.l a1,-(sp)
   15e14:	|  |   move.l d1,-(sp)
   15e16:	|  |   move.l d0,-(sp)
   15e18:	|  |   jsr d2fa <drawVerticalLine>
   15e1e:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15e22:	|  |   movea.l (sp),a0
   15e24:	|  |   move.l 12(a0),d0
   15e28:	|  |   movea.l d0,a1
   15e2a:	|  |   movea.l (sp),a0
   15e2c:	|  |   move.l 4(a0),d0
   15e30:	|  |   move.l d0,d1
   15e32:	|  |   movea.l (sp),a0
   15e34:	|  |   move.l 8(a0),d0
   15e38:	|  |   move.l a1,-(sp)
   15e3a:	|  |   move.l d1,-(sp)
   15e3c:	|  |   move.l d0,-(sp)
   15e3e:	|  |   jsr d2fa <drawVerticalLine>
   15e44:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15e48:	|  |   movea.l (sp),a0
   15e4a:	|  |   move.l 8(a0),d0
   15e4e:	|  |   movea.l d0,a1
   15e50:	|  |   movea.l (sp),a0
   15e52:	|  |   move.l 4(a0),d0
   15e56:	|  |   move.l d0,d1
   15e58:	|  |   movea.l (sp),a0
   15e5a:	|  |   move.l (a0),d0
   15e5c:	|  |   move.l a1,-(sp)
   15e5e:	|  |   move.l d1,-(sp)
   15e60:	|  |   move.l d0,-(sp)
   15e62:	|  |   jsr d2d4 <drawHorizontalLine>
   15e68:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15e6c:	|  |   movea.l (sp),a0
   15e6e:	|  |   move.l 8(a0),d0
   15e72:	|  |   movea.l d0,a1
   15e74:	|  |   movea.l (sp),a0
   15e76:	|  |   move.l 12(a0),d0
   15e7a:	|  |   move.l d0,d1
   15e7c:	|  |   movea.l (sp),a0
   15e7e:	|  |   move.l (a0),d0
   15e80:	|  |   move.l a1,-(sp)
   15e82:	|  |   move.l d1,-(sp)
   15e84:	|  |   move.l d0,-(sp)
   15e86:	|  |   jsr d2d4 <drawHorizontalLine>
   15e8c:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15e90:	|  |   movea.l (sp),a0
   15e92:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15e96:	\--|-> tst.l (sp)
   15e98:	   \-- bne.w 15dfe <showBoxes+0xc>
	}
   15e9c:	       nop
   15e9e:	       nop
   15ea0:	       addq.l #4,sp
   15ea2:	       rts

00015ea4 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15ea4:	       lea -88(sp),sp
   15ea8:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15eaa:	       move.l 1c9c4 <SysBase>,d0
   15eb0:	       movea.l d0,a6
   15eb2:	       jsr -666(a6)
   15eb6:	       move.l d0,88(sp)
   15eba:	       move.l 88(sp),d0
   15ebe:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15ec2:	       move.l 84(sp),80(sp)
   15ec8:	       moveq #40,d0
   15eca:	       move.l d0,76(sp)
   15ece:	       move.l 1c9c4 <SysBase>,d0
   15ed4:	       movea.l d0,a6
   15ed6:	       movea.l 80(sp),a0
   15eda:	       move.l 76(sp),d0
   15ede:	       jsr -654(a6)
   15ee2:	       move.l d0,72(sp)
   15ee6:	       move.l 72(sp),d0
   15eea:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15eee:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15ef4:	       move.l #106607,60(sp)
   15efc:	       clr.l 56(sp)
   15f00:	       move.l 64(sp),52(sp)
   15f06:	       clr.l 48(sp)
   15f0a:	       move.l 1c9c4 <SysBase>,d0
   15f10:	       movea.l d0,a6
   15f12:	       movea.l 60(sp),a0
   15f16:	       move.l 56(sp),d0
   15f1a:	       movea.l 52(sp),a1
   15f1e:	       move.l 48(sp),d1
   15f22:	       jsr -444(a6)
   15f26:	       move.b d0,47(sp)
   15f2a:	       move.b 47(sp),d0
   15f2e:	   /-- beq.s 15f44 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15f30:	   |   pea 1a07c <newfatal.c.307beca7+0x168>
   15f36:	   |   jsr 1729e <KPrintF>
   15f3c:	   |   addq.l #4,sp
        return 0;
   15f3e:	   |   moveq #0,d0
   15f40:	/--|-- bra.w 15ffe <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15f44:	|  \-> movea.l 64(sp),a0
   15f48:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15f4e:	|      lea 92(sp),a0
   15f52:	|      lea -86(a0),a0
   15f56:	|      move.l a0,38(sp)
   15f5a:	|      movea.l 42(sp),a6
   15f5e:	|      movea.l 38(sp),a0
   15f62:	|      jsr -60(a6)
   15f66:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15f6a:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15f70:	|      move.l #1103515245,-(sp)
   15f76:	|      move.l 34(sp),-(sp)
   15f7a:	|      jsr 17c5c <__mulsi3>
   15f80:	|      addq.l #8,sp
   15f82:	|      addi.l #12345,d0
   15f88:	|      move.l d0,d1
   15f8a:	|      bclr #31,d1
   15f8e:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15f92:	|      move.l 30(sp),d0
   15f96:	|      pea 64 <_start+0x64>
   15f9a:	|      move.l d0,-(sp)
   15f9c:	|      jsr 17d36 <__umodsi3>
   15fa2:	|      addq.l #8,sp
   15fa4:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15fa8:	|      move.l 26(sp),-(sp)
   15fac:	|      pea 1a099 <newfatal.c.307beca7+0x185>
   15fb2:	|      jsr 1729e <KPrintF>
   15fb8:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15fba:	|      move.l 64(sp),22(sp)
   15fc0:	|      move.l 1c9c4 <SysBase>,d0
   15fc6:	|      movea.l d0,a6
   15fc8:	|      movea.l 22(sp),a1
   15fcc:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15fd0:	|      move.l 64(sp),18(sp)
   15fd6:	|      move.l 1c9c4 <SysBase>,d0
   15fdc:	|      movea.l d0,a6
   15fde:	|      movea.l 18(sp),a0
   15fe2:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15fe6:	|      move.l 84(sp),14(sp)
   15fec:	|      move.l 1c9c4 <SysBase>,d0
   15ff2:	|      movea.l d0,a6
   15ff4:	|      movea.l 14(sp),a0
   15ff8:	|      jsr -672(a6)
    return 0;
   15ffc:	|      moveq #0,d0
   15ffe:	\----> movea.l (sp)+,a6
   16000:	       lea 88(sp),sp
   16004:	       rts

00016006 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   16006:	             lea -20(sp),sp
   1600a:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   1600c:	             move.l 1cadc <allLoadedBanks>,20(sp)
	while (returnMe) {
   16014:	      /----- bra.s 16046 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   16016:	   /--|----> movea.l 20(sp),a0
   1601a:	   |  |      move.l (a0),d0
   1601c:	   |  |      cmp.l 28(sp),d0
   16020:	   |  |  /-- bne.s 1603c <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   16022:	   |  |  |   movea.l 20(sp),a0
   16026:	   |  |  |   move.l 4(a0),d0
   1602a:	   |  |  |   addq.l #1,d0
   1602c:	   |  |  |   movea.l 20(sp),a0
   16030:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   16034:	   |  |  |   move.l 20(sp),d0
   16038:	/--|--|--|-- bra.w 160f6 <loadBankForAnim+0xf0>
		}		
		returnMe = returnMe->next;
   1603c:	|  |  |  \-> movea.l 20(sp),a0
   16040:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   16046:	|  |  \----> tst.l 20(sp)
   1604a:	|  \-------- bne.s 16016 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   1604c:	|            moveq #26,d0
   1604e:	|            move.l d0,16(sp)
   16052:	|            clr.l 12(sp)
   16056:	|            move.l 1c9c4 <SysBase>,d0
   1605c:	|            movea.l d0,a6
   1605e:	|            move.l 16(sp),d0
   16062:	|            move.l 12(sp),d1
   16066:	|            jsr -684(a6)
   1606a:	|            move.l d0,8(sp)
   1606e:	|            move.l 8(sp),d0
   16072:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   16076:	|     /----- beq.s 160f4 <loadBankForAnim+0xee>
		returnMe->ID = ID;
   16078:	|     |      movea.l 20(sp),a0
   1607c:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank)) {
   16080:	|     |      move.l 20(sp),d0
   16084:	|     |      addq.l #8,d0
   16086:	|     |      move.l d0,-(sp)
   16088:	|     |      move.l 32(sp),-(sp)
   1608c:	|     |      jsr 8c9e <loadSpriteBank>
   16092:	|     |      addq.l #8,sp
   16094:	|     |      tst.w d0
   16096:	|     |  /-- beq.s 160cc <loadBankForAnim+0xc6>
			returnMe->timesUsed = 1;
   16098:	|     |  |   movea.l 20(sp),a0
   1609c:	|     |  |   moveq #1,d0
   1609e:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   160a2:	|     |  |   move.l 1cadc <allLoadedBanks>,d0
   160a8:	|     |  |   movea.l 20(sp),a0
   160ac:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   160b0:	|     |  |   move.l 20(sp),1cadc <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   160b8:	|     |  |   pea 1a0ac <newfatal.c.307beca7+0x198>
   160be:	|     |  |   jsr 1729e <KPrintF>
   160c4:	|     |  |   addq.l #4,sp
			return returnMe;
   160c6:	|     |  |   move.l 20(sp),d0
   160ca:	+-----|--|-- bra.s 160f6 <loadBankForAnim+0xf0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   160cc:	|     |  \-> pea 1a0d9 <newfatal.c.307beca7+0x1c5>
   160d2:	|     |      jsr 1729e <KPrintF>
   160d8:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   160da:	|     |      move.l 20(sp),4(sp)
   160e0:	|     |      move.l 1c9c4 <SysBase>,d0
   160e6:	|     |      movea.l d0,a6
   160e8:	|     |      movea.l 4(sp),a1
   160ec:	|     |      jsr -690(a6)
			return NULL;
   160f0:	|     |      moveq #0,d0
   160f2:	+-----|----- bra.s 160f6 <loadBankForAnim+0xf0>
		}
	} else return NULL;
   160f4:	|     \----> moveq #0,d0
}
   160f6:	\----------> movea.l (sp)+,a6
   160f8:	             lea 20(sp),sp
   160fc:	             rts

000160fe <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   160fe:	       lea -32(sp),sp
   16102:	       move.l d3,-(sp)
   16104:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   16106:	       move.l 60(sp),d0
   1610a:	       sub.l 52(sp),d0
   1610e:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   16112:	       move.l 64(sp),d0
   16116:	       sub.l 56(sp),d0
   1611a:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   1611e:	       move.l 68(sp),d0
   16122:	       sub.l 52(sp),d0
   16126:	       move.l 36(sp),-(sp)
   1612a:	       move.l d0,-(sp)
   1612c:	       jsr 17c5c <__mulsi3>
   16132:	       addq.l #8,sp
   16134:	       move.l d0,d2
   16136:	       move.l 72(sp),d0
   1613a:	       sub.l 56(sp),d0
   1613e:	       move.l 32(sp),-(sp)
   16142:	       move.l d0,-(sp)
   16144:	       jsr 17c5c <__mulsi3>
   1614a:	       addq.l #8,sp
   1614c:	       add.l d2,d0
   1614e:	       move.l d0,-(sp)
   16150:	       jsr 1769a <__floatsidf>
   16156:	       addq.l #4,sp
   16158:	       move.l d0,16(sp)
   1615c:	       move.l d1,20(sp)
   16160:	       move.l 16(sp),24(sp)
   16166:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   1616c:	       move.l 36(sp),-(sp)
   16170:	       move.l 40(sp),-(sp)
   16174:	       jsr 17c5c <__mulsi3>
   1617a:	       addq.l #8,sp
   1617c:	       move.l d0,d2
   1617e:	       move.l 32(sp),-(sp)
   16182:	       move.l 36(sp),-(sp)
   16186:	       jsr 17c5c <__mulsi3>
   1618c:	       addq.l #8,sp
   1618e:	       add.l d2,d0
   16190:	       move.l d0,-(sp)
   16192:	       jsr 1769a <__floatsidf>
   16198:	       addq.l #4,sp
   1619a:	       move.l d1,-(sp)
   1619c:	       move.l d0,-(sp)
   1619e:	       move.l 36(sp),-(sp)
   161a2:	       move.l 36(sp),-(sp)
   161a6:	       jsr 17524 <__divdf3>
   161ac:	       lea 16(sp),sp
   161b0:	       move.l d0,8(sp)
   161b4:	       move.l d1,12(sp)
   161b8:	       move.l 8(sp),24(sp)
   161be:	       move.l 12(sp),28(sp)

	if (m < 0) {
   161c4:	       clr.l -(sp)
   161c6:	       clr.l -(sp)
   161c8:	       move.l 36(sp),-(sp)
   161cc:	       move.l 36(sp),-(sp)
   161d0:	       jsr 178b2 <__ltdf2>
   161d6:	       lea 16(sp),sp
   161da:	       tst.l d0
   161dc:	   /-- bge.s 161f2 <closestPointOnLine+0xf4>
		*closestX = x1;
   161de:	   |   movea.l 44(sp),a0
   161e2:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   161e6:	   |   movea.l 48(sp),a0
   161ea:	   |   move.l 56(sp),(a0)
   161ee:	/--|-- bra.w 162d4 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   161f2:	|  \-> clr.l -(sp)
   161f4:	|      move.l #1072693248,-(sp)
   161fa:	|      move.l 36(sp),-(sp)
   161fe:	|      move.l 36(sp),-(sp)
   16202:	|      jsr 177f8 <__gtdf2>
   16208:	|      lea 16(sp),sp
   1620c:	|      tst.l d0
   1620e:	|  /-- ble.s 16224 <closestPointOnLine+0x126>
		*closestX = x2;
   16210:	|  |   movea.l 44(sp),a0
   16214:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   16218:	|  |   movea.l 48(sp),a0
   1621c:	|  |   move.l 64(sp),(a0)
   16220:	+--|-- bra.w 162d4 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   16224:	|  \-> move.l 52(sp),-(sp)
   16228:	|      jsr 1769a <__floatsidf>
   1622e:	|      addq.l #4,sp
   16230:	|      move.l d0,d2
   16232:	|      move.l d1,d3
   16234:	|      move.l 36(sp),-(sp)
   16238:	|      jsr 1769a <__floatsidf>
   1623e:	|      addq.l #4,sp
   16240:	|      move.l 28(sp),-(sp)
   16244:	|      move.l 28(sp),-(sp)
   16248:	|      move.l d1,-(sp)
   1624a:	|      move.l d0,-(sp)
   1624c:	|      jsr 1772a <__muldf3>
   16252:	|      lea 16(sp),sp
   16256:	|      move.l d1,-(sp)
   16258:	|      move.l d0,-(sp)
   1625a:	|      move.l d3,-(sp)
   1625c:	|      move.l d2,-(sp)
   1625e:	|      jsr 174c2 <__adddf3>
   16264:	|      lea 16(sp),sp
   16268:	|      move.l d1,-(sp)
   1626a:	|      move.l d0,-(sp)
   1626c:	|      jsr 17632 <__fixdfsi>
   16272:	|      addq.l #8,sp
   16274:	|      movea.l 44(sp),a0
   16278:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   1627a:	|      move.l 56(sp),-(sp)
   1627e:	|      jsr 1769a <__floatsidf>
   16284:	|      addq.l #4,sp
   16286:	|      move.l d0,d2
   16288:	|      move.l d1,d3
   1628a:	|      move.l 32(sp),-(sp)
   1628e:	|      jsr 1769a <__floatsidf>
   16294:	|      addq.l #4,sp
   16296:	|      move.l 28(sp),-(sp)
   1629a:	|      move.l 28(sp),-(sp)
   1629e:	|      move.l d1,-(sp)
   162a0:	|      move.l d0,-(sp)
   162a2:	|      jsr 1772a <__muldf3>
   162a8:	|      lea 16(sp),sp
   162ac:	|      move.l d1,-(sp)
   162ae:	|      move.l d0,-(sp)
   162b0:	|      move.l d3,-(sp)
   162b2:	|      move.l d2,-(sp)
   162b4:	|      jsr 174c2 <__adddf3>
   162ba:	|      lea 16(sp),sp
   162be:	|      move.l d1,-(sp)
   162c0:	|      move.l d0,-(sp)
   162c2:	|      jsr 17632 <__fixdfsi>
   162c8:	|      addq.l #8,sp
   162ca:	|      movea.l 48(sp),a0
   162ce:	|      move.l d0,(a0)
		return TRUE;
   162d0:	|      moveq #1,d0
   162d2:	|  /-- bra.s 162d6 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   162d4:	\--|-> clr.w d0
}
   162d6:	   \-> move.l (sp)+,d2
   162d8:	       move.l (sp)+,d3
   162da:	       lea 32(sp),sp
   162de:	       rts

000162e0 <drawFloor>:

void drawFloor() {
   162e0:	                lea -12(sp),sp
   162e4:	                move.l d3,-(sp)
   162e6:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   162e8:	                clr.l 16(sp)
   162ec:	   /----------- bra.w 16500 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   162f0:	/--|----------> movea.l 1cae0 <currentFloor>,a0
   162f6:	|  |            move.l 12(a0),d1
   162fa:	|  |            move.l 16(sp),d0
   162fe:	|  |            lsl.l #3,d0
   16300:	|  |            movea.l d1,a0
   16302:	|  |            adda.l d0,a0
   16304:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   16308:	|  |            moveq #1,d0
   1630a:	|  |            cmp.l 8(sp),d0
   1630e:	|  |  /-------- bge.w 164fc <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16312:	|  |  |         moveq #1,d0
   16314:	|  |  |         move.l d0,12(sp)
   16318:	|  |  |     /-- bra.w 16412 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   1631c:	|  |  |  /--|-> movea.l 1cae0 <currentFloor>,a0
   16322:	|  |  |  |  |   move.l 4(a0),d1
   16326:	|  |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   1632c:	|  |  |  |  |   movea.l 12(a0),a0
   16330:	|  |  |  |  |   move.l 16(sp),d0
   16334:	|  |  |  |  |   lsl.l #3,d0
   16336:	|  |  |  |  |   adda.l d0,a0
   16338:	|  |  |  |  |   movea.l 4(a0),a0
   1633c:	|  |  |  |  |   move.l 12(sp),d0
   16340:	|  |  |  |  |   add.l d0,d0
   16342:	|  |  |  |  |   add.l d0,d0
   16344:	|  |  |  |  |   adda.l d0,a0
   16346:	|  |  |  |  |   move.l (a0),d0
   16348:	|  |  |  |  |   lsl.l #3,d0
   1634a:	|  |  |  |  |   movea.l d1,a0
   1634c:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1634e:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   16352:	|  |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   16358:	|  |  |  |  |   move.l 4(a0),d1
   1635c:	|  |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   16362:	|  |  |  |  |   movea.l 12(a0),a0
   16366:	|  |  |  |  |   move.l 16(sp),d0
   1636a:	|  |  |  |  |   lsl.l #3,d0
   1636c:	|  |  |  |  |   adda.l d0,a0
   1636e:	|  |  |  |  |   movea.l 4(a0),a0
   16372:	|  |  |  |  |   move.l 12(sp),d0
   16376:	|  |  |  |  |   add.l d0,d0
   16378:	|  |  |  |  |   add.l d0,d0
   1637a:	|  |  |  |  |   adda.l d0,a0
   1637c:	|  |  |  |  |   move.l (a0),d0
   1637e:	|  |  |  |  |   lsl.l #3,d0
   16380:	|  |  |  |  |   movea.l d1,a0
   16382:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16384:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16386:	|  |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   1638c:	|  |  |  |  |   move.l 4(a0),d1
   16390:	|  |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   16396:	|  |  |  |  |   movea.l 12(a0),a0
   1639a:	|  |  |  |  |   move.l 16(sp),d0
   1639e:	|  |  |  |  |   lsl.l #3,d0
   163a0:	|  |  |  |  |   adda.l d0,a0
   163a2:	|  |  |  |  |   movea.l 4(a0),a0
   163a6:	|  |  |  |  |   move.l 12(sp),d0
   163aa:	|  |  |  |  |   addi.l #1073741823,d0
   163b0:	|  |  |  |  |   add.l d0,d0
   163b2:	|  |  |  |  |   add.l d0,d0
   163b4:	|  |  |  |  |   adda.l d0,a0
   163b6:	|  |  |  |  |   move.l (a0),d0
   163b8:	|  |  |  |  |   lsl.l #3,d0
   163ba:	|  |  |  |  |   movea.l d1,a0
   163bc:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   163be:	|  |  |  |  |   move.l 4(a0),d1
   163c2:	|  |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   163c8:	|  |  |  |  |   move.l 4(a0),d3
   163cc:	|  |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   163d2:	|  |  |  |  |   movea.l 12(a0),a0
   163d6:	|  |  |  |  |   move.l 16(sp),d0
   163da:	|  |  |  |  |   lsl.l #3,d0
   163dc:	|  |  |  |  |   adda.l d0,a0
   163de:	|  |  |  |  |   movea.l 4(a0),a0
   163e2:	|  |  |  |  |   move.l 12(sp),d0
   163e6:	|  |  |  |  |   addi.l #1073741823,d0
   163ec:	|  |  |  |  |   add.l d0,d0
   163ee:	|  |  |  |  |   add.l d0,d0
   163f0:	|  |  |  |  |   adda.l d0,a0
   163f2:	|  |  |  |  |   move.l (a0),d0
   163f4:	|  |  |  |  |   lsl.l #3,d0
   163f6:	|  |  |  |  |   movea.l d3,a0
   163f8:	|  |  |  |  |   adda.l d0,a0
   163fa:	|  |  |  |  |   move.l (a0),d0
   163fc:	|  |  |  |  |   move.l d2,-(sp)
   163fe:	|  |  |  |  |   move.l a1,-(sp)
   16400:	|  |  |  |  |   move.l d1,-(sp)
   16402:	|  |  |  |  |   move.l d0,-(sp)
   16404:	|  |  |  |  |   jsr 3fa4 <drawLine>
   1640a:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   1640e:	|  |  |  |  |   addq.l #1,12(sp)
   16412:	|  |  |  |  \-> move.l 12(sp),d0
   16416:	|  |  |  |      cmp.l 8(sp),d0
   1641a:	|  |  |  \----- blt.w 1631c <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   1641e:	|  |  |         movea.l 1cae0 <currentFloor>,a0
   16424:	|  |  |         move.l 4(a0),d1
   16428:	|  |  |         movea.l 1cae0 <currentFloor>,a0
   1642e:	|  |  |         movea.l 12(a0),a0
   16432:	|  |  |         move.l 16(sp),d0
   16436:	|  |  |         lsl.l #3,d0
   16438:	|  |  |         adda.l d0,a0
   1643a:	|  |  |         movea.l 4(a0),a0
   1643e:	|  |  |         move.l 8(sp),d0
   16442:	|  |  |         addi.l #1073741823,d0
   16448:	|  |  |         add.l d0,d0
   1644a:	|  |  |         add.l d0,d0
   1644c:	|  |  |         adda.l d0,a0
   1644e:	|  |  |         move.l (a0),d0
   16450:	|  |  |         lsl.l #3,d0
   16452:	|  |  |         movea.l d1,a0
   16454:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16456:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   1645a:	|  |  |         movea.l 1cae0 <currentFloor>,a0
   16460:	|  |  |         move.l 4(a0),d1
   16464:	|  |  |         movea.l 1cae0 <currentFloor>,a0
   1646a:	|  |  |         movea.l 12(a0),a0
   1646e:	|  |  |         move.l 16(sp),d0
   16472:	|  |  |         lsl.l #3,d0
   16474:	|  |  |         adda.l d0,a0
   16476:	|  |  |         movea.l 4(a0),a0
   1647a:	|  |  |         move.l 8(sp),d0
   1647e:	|  |  |         addi.l #1073741823,d0
   16484:	|  |  |         add.l d0,d0
   16486:	|  |  |         add.l d0,d0
   16488:	|  |  |         adda.l d0,a0
   1648a:	|  |  |         move.l (a0),d0
   1648c:	|  |  |         lsl.l #3,d0
   1648e:	|  |  |         movea.l d1,a0
   16490:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16492:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16494:	|  |  |         movea.l 1cae0 <currentFloor>,a0
   1649a:	|  |  |         move.l 4(a0),d1
   1649e:	|  |  |         movea.l 1cae0 <currentFloor>,a0
   164a4:	|  |  |         movea.l 12(a0),a0
   164a8:	|  |  |         move.l 16(sp),d0
   164ac:	|  |  |         lsl.l #3,d0
   164ae:	|  |  |         adda.l d0,a0
   164b0:	|  |  |         movea.l 4(a0),a0
   164b4:	|  |  |         move.l (a0),d0
   164b6:	|  |  |         lsl.l #3,d0
   164b8:	|  |  |         movea.l d1,a0
   164ba:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   164bc:	|  |  |         move.l 4(a0),d1
   164c0:	|  |  |         movea.l 1cae0 <currentFloor>,a0
   164c6:	|  |  |         move.l 4(a0),d3
   164ca:	|  |  |         movea.l 1cae0 <currentFloor>,a0
   164d0:	|  |  |         movea.l 12(a0),a0
   164d4:	|  |  |         move.l 16(sp),d0
   164d8:	|  |  |         lsl.l #3,d0
   164da:	|  |  |         adda.l d0,a0
   164dc:	|  |  |         movea.l 4(a0),a0
   164e0:	|  |  |         move.l (a0),d0
   164e2:	|  |  |         lsl.l #3,d0
   164e4:	|  |  |         movea.l d3,a0
   164e6:	|  |  |         adda.l d0,a0
   164e8:	|  |  |         move.l (a0),d0
   164ea:	|  |  |         move.l d2,-(sp)
   164ec:	|  |  |         move.l a1,-(sp)
   164ee:	|  |  |         move.l d1,-(sp)
   164f0:	|  |  |         move.l d0,-(sp)
   164f2:	|  |  |         jsr 3fa4 <drawLine>
   164f8:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   164fc:	|  |  \-------> addq.l #1,16(sp)
   16500:	|  \----------> movea.l 1cae0 <currentFloor>,a0
   16506:	|               move.l 8(a0),d0
   1650a:	|               cmp.l 16(sp),d0
   1650e:	\-------------- bgt.w 162f0 <drawFloor+0x10>
        }
    }
}
   16512:	                nop
   16514:	                nop
   16516:	                move.l (sp)+,d2
   16518:	                move.l (sp)+,d3
   1651a:	                lea 12(sp),sp
   1651e:	                rts

00016520 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   16520:	                      lea -12(sp),sp
    int sharedVertices = 0;
   16524:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   16528:	                      clr.l 4(sp)
   1652c:	   /----------------- bra.w 165be <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   16530:	/--|----------------> clr.l (sp)
   16532:	|  |     /----------- bra.s 165ae <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   16534:	|  |  /--|----------> movea.l 16(sp),a0
   16538:	|  |  |  |            move.l 4(a0),d1
   1653c:	|  |  |  |            move.l 4(sp),d0
   16540:	|  |  |  |            add.l d0,d0
   16542:	|  |  |  |            add.l d0,d0
   16544:	|  |  |  |            movea.l d1,a0
   16546:	|  |  |  |            adda.l d0,a0
   16548:	|  |  |  |            move.l (a0),d1
   1654a:	|  |  |  |            movea.l 20(sp),a0
   1654e:	|  |  |  |            movea.l 4(a0),a0
   16552:	|  |  |  |            move.l (sp),d0
   16554:	|  |  |  |            add.l d0,d0
   16556:	|  |  |  |            add.l d0,d0
   16558:	|  |  |  |            adda.l d0,a0
   1655a:	|  |  |  |            move.l (a0),d0
   1655c:	|  |  |  |            cmp.l d1,d0
   1655e:	|  |  |  |  /-------- bne.s 165ac <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16560:	|  |  |  |  |         move.l 8(sp),d0
   16564:	|  |  |  |  |         move.l d0,d1
   16566:	|  |  |  |  |         addq.l #1,d1
   16568:	|  |  |  |  |         move.l d1,8(sp)
   1656c:	|  |  |  |  |         tst.l d0
   1656e:	|  |  |  |  |     /-- beq.s 16590 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16570:	|  |  |  |  |     |   movea.l 16(sp),a0
   16574:	|  |  |  |  |     |   move.l 4(a0),d1
   16578:	|  |  |  |  |     |   move.l 4(sp),d0
   1657c:	|  |  |  |  |     |   add.l d0,d0
   1657e:	|  |  |  |  |     |   add.l d0,d0
   16580:	|  |  |  |  |     |   movea.l d1,a0
   16582:	|  |  |  |  |     |   adda.l d0,a0
   16584:	|  |  |  |  |     |   move.l (a0),d0
   16586:	|  |  |  |  |     |   movea.l 28(sp),a0
   1658a:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   1658c:	|  |  |  |  |     |   moveq #1,d0
   1658e:	|  |  |  |  |  /--|-- bra.s 165ce <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16590:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   16594:	|  |  |  |  |  |      move.l 4(a0),d1
   16598:	|  |  |  |  |  |      move.l 4(sp),d0
   1659c:	|  |  |  |  |  |      add.l d0,d0
   1659e:	|  |  |  |  |  |      add.l d0,d0
   165a0:	|  |  |  |  |  |      movea.l d1,a0
   165a2:	|  |  |  |  |  |      adda.l d0,a0
   165a4:	|  |  |  |  |  |      move.l (a0),d0
   165a6:	|  |  |  |  |  |      movea.l 24(sp),a0
   165aa:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   165ac:	|  |  |  |  \--|----> addq.l #1,(sp)
   165ae:	|  |  |  \-----|----> movea.l 20(sp),a0
   165b2:	|  |  |        |      move.l (a0),d0
   165b4:	|  |  |        |      cmp.l (sp),d0
   165b6:	|  |  \--------|----- bgt.w 16534 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   165ba:	|  |           |      addq.l #1,4(sp)
   165be:	|  \-----------|----> movea.l 16(sp),a0
   165c2:	|              |      move.l (a0),d0
   165c4:	|              |      cmp.l 4(sp),d0
   165c8:	\--------------|----- bgt.w 16530 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   165cc:	               |      clr.w d0
}
   165ce:	               \----> lea 12(sp),sp
   165d2:	                      rts

000165d4 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   165d4:	movea.l 1cae0 <currentFloor>,a0
   165da:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   165de:	movea.l 1cae0 <currentFloor>,a0
   165e4:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   165e8:	movea.l 1cae0 <currentFloor>,a0
   165ee:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   165f2:	movea.l 1cae0 <currentFloor>,a0
   165f8:	clr.l 16(a0)
}
   165fc:	nop
   165fe:	rts

00016600 <inFloor>:

int inFloor (int x, int y) {
   16600:	          subq.l #8,sp
	int i, r = -1;
   16602:	          moveq #-1,d0
   16604:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16606:	          clr.l 4(sp)
   1660a:	   /----- bra.s 1663e <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   1660c:	/--|----> movea.l 1cae0 <currentFloor>,a0
   16612:	|  |      move.l 12(a0),d1
   16616:	|  |      move.l 4(sp),d0
   1661a:	|  |      lsl.l #3,d0
   1661c:	|  |      add.l d1,d0
   1661e:	|  |      move.l 16(sp),-(sp)
   16622:	|  |      move.l 16(sp),-(sp)
   16626:	|  |      move.l d0,-(sp)
   16628:	|  |      jsr 1680a <pointInFloorPolygon>
   1662e:	|  |      lea 12(sp),sp
   16632:	|  |      tst.w d0
   16634:	|  |  /-- beq.s 1663a <inFloor+0x3a>
			r = i;
   16636:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1663a:	|  |  \-> addq.l #1,4(sp)
   1663e:	|  \----> movea.l 1cae0 <currentFloor>,a0
   16644:	|         move.l 8(a0),d0
   16648:	|         cmp.l 4(sp),d0
   1664c:	\-------- bgt.s 1660c <inFloor+0xc>

	return r;
   1664e:	          move.l (sp),d0
}
   16650:	          addq.l #8,sp
   16652:	          rts

00016654 <initFloor>:

BOOL initFloor () {
   16654:	       lea -12(sp),sp
   16658:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   1665a:	       moveq #20,d0
   1665c:	       move.l d0,12(sp)
   16660:	       clr.l 8(sp)
   16664:	       move.l 1c9c4 <SysBase>,d0
   1666a:	       movea.l d0,a6
   1666c:	       move.l 12(sp),d0
   16670:	       move.l 8(sp),d1
   16674:	       jsr -684(a6)
   16678:	       move.l d0,4(sp)
   1667c:	       move.l 4(sp),d0
   16680:	       move.l d0,1cae0 <currentFloor>

    if(currentFloor == 0) {
   16686:	       move.l 1cae0 <currentFloor>,d0
   1668c:	/----- bne.s 166a0 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   1668e:	|      pea 1a112 <main_sludge.c.0270f7ba>
   16694:	|      jsr 1729e <KPrintF>
   1669a:	|      addq.l #4,sp
        return FALSE;
   1669c:	|      clr.w d0
   1669e:	|  /-- bra.s 166a8 <initFloor+0x54>
    }

	noFloor ();
   166a0:	\--|-> jsr 165d4 <noFloor>
	return TRUE;
   166a6:	   |   moveq #1,d0
}
   166a8:	   \-> movea.l (sp)+,a6
   166aa:	       lea 12(sp),sp
   166ae:	       rts

000166b0 <killFloor>:

void killFloor () {
   166b0:	       lea -24(sp),sp
   166b4:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   166b6:	       clr.l 24(sp)
   166ba:	   /-- bra.s 16714 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   166bc:	/--|-> movea.l 1cae0 <currentFloor>,a0
   166c2:	|  |   move.l 12(a0),d1
   166c6:	|  |   move.l 24(sp),d0
   166ca:	|  |   lsl.l #3,d0
   166cc:	|  |   movea.l d1,a0
   166ce:	|  |   adda.l d0,a0
   166d0:	|  |   move.l 4(a0),8(sp)
   166d6:	|  |   move.l 1c9c4 <SysBase>,d0
   166dc:	|  |   movea.l d0,a6
   166de:	|  |   movea.l 8(sp),a1
   166e2:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   166e6:	|  |   movea.l 1cae0 <currentFloor>,a0
   166ec:	|  |   move.l 16(a0),d1
   166f0:	|  |   move.l 24(sp),d0
   166f4:	|  |   add.l d0,d0
   166f6:	|  |   add.l d0,d0
   166f8:	|  |   movea.l d1,a0
   166fa:	|  |   adda.l d0,a0
   166fc:	|  |   move.l (a0),4(sp)
   16700:	|  |   move.l 1c9c4 <SysBase>,d0
   16706:	|  |   movea.l d0,a6
   16708:	|  |   movea.l 4(sp),a1
   1670c:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16710:	|  |   addq.l #1,24(sp)
   16714:	|  \-> movea.l 1cae0 <currentFloor>,a0
   1671a:	|      move.l 8(a0),d0
   1671e:	|      cmp.l 24(sp),d0
   16722:	\----- bgt.s 166bc <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   16724:	       movea.l 1cae0 <currentFloor>,a0
   1672a:	       move.l 12(a0),20(sp)
   16730:	       move.l 1c9c4 <SysBase>,d0
   16736:	       movea.l d0,a6
   16738:	       movea.l 20(sp),a1
   1673c:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16740:	       movea.l 1cae0 <currentFloor>,a0
   16746:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   1674a:	       movea.l 1cae0 <currentFloor>,a0
   16750:	       move.l 4(a0),16(sp)
   16756:	       move.l 1c9c4 <SysBase>,d0
   1675c:	       movea.l d0,a6
   1675e:	       movea.l 16(sp),a1
   16762:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16766:	       movea.l 1cae0 <currentFloor>,a0
   1676c:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16770:	       movea.l 1cae0 <currentFloor>,a0
   16776:	       move.l 16(a0),12(sp)
   1677c:	       move.l 1c9c4 <SysBase>,d0
   16782:	       movea.l d0,a6
   16784:	       movea.l 12(sp),a1
   16788:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   1678c:	       movea.l 1cae0 <currentFloor>,a0
   16792:	       clr.l 16(a0)
}
   16796:	       nop
   16798:	       movea.l (sp)+,a6
   1679a:	       lea 24(sp),sp
   1679e:	       rts

000167a0 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   167a0:	                   lea -12(sp),sp
	int sharedVertices = 0;
   167a4:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   167a8:	                   clr.l 4(sp)
   167ac:	   /-------------- bra.s 167f8 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   167ae:	/--|-------------> clr.l (sp)
   167b0:	|  |     /-------- bra.s 167ec <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   167b2:	|  |  /--|-------> move.l 20(sp),d1
   167b6:	|  |  |  |         move.l 4(sp),d0
   167ba:	|  |  |  |         add.l d0,d0
   167bc:	|  |  |  |         add.l d0,d0
   167be:	|  |  |  |         movea.l d1,a0
   167c0:	|  |  |  |         adda.l d0,a0
   167c2:	|  |  |  |         move.l (a0),d1
   167c4:	|  |  |  |         movea.l 28(sp),a0
   167c8:	|  |  |  |         move.l (sp),d0
   167ca:	|  |  |  |         add.l d0,d0
   167cc:	|  |  |  |         add.l d0,d0
   167ce:	|  |  |  |         adda.l d0,a0
   167d0:	|  |  |  |         move.l (a0),d0
   167d2:	|  |  |  |         cmp.l d1,d0
   167d4:	|  |  |  |     /-- bne.s 167ea <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   167d6:	|  |  |  |     |   move.l 8(sp),d0
   167da:	|  |  |  |     |   move.l d0,d1
   167dc:	|  |  |  |     |   addq.l #1,d1
   167de:	|  |  |  |     |   move.l d1,8(sp)
   167e2:	|  |  |  |     |   tst.l d0
   167e4:	|  |  |  |     +-- beq.s 167ea <polysShareSide+0x4a>
   167e6:	|  |  |  |     |   moveq #1,d0
   167e8:	|  |  |  |  /--|-- bra.s 16804 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   167ea:	|  |  |  |  |  \-> addq.l #1,(sp)
   167ec:	|  |  |  \--|----> move.l 24(sp),d0
   167f0:	|  |  |     |      cmp.l (sp),d0
   167f2:	|  |  \-----|----- bgt.s 167b2 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   167f4:	|  |        |      addq.l #1,4(sp)
   167f8:	|  \--------|----> move.l 16(sp),d0
   167fc:	|           |      cmp.l 4(sp),d0
   16800:	\-----------|----- bgt.s 167ae <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16802:	            |      clr.w d0
}
   16804:	            \----> lea 12(sp),sp
   16808:	                   rts

0001680a <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   1680a:	             lea -28(sp),sp
   1680e:	             move.l d3,-(sp)
   16810:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16812:	             clr.l 32(sp)
   16816:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1681a:	             movea.l 40(sp),a0
   1681e:	             move.l (a0),d0
   16820:	             move.l d0,d1
   16822:	             subq.l #1,d1
   16824:	             move.l d1,28(sp)
   16828:	   /-------- bra.w 16a22 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   1682c:	/--|-------> movea.l 1cae0 <currentFloor>,a0
   16832:	|  |         move.l 4(a0),d1
   16836:	|  |         movea.l 40(sp),a0
   1683a:	|  |         movea.l 4(a0),a0
   1683e:	|  |         move.l 32(sp),d0
   16842:	|  |         add.l d0,d0
   16844:	|  |         add.l d0,d0
   16846:	|  |         adda.l d0,a0
   16848:	|  |         move.l (a0),d0
   1684a:	|  |         lsl.l #3,d0
   1684c:	|  |         movea.l d1,a0
   1684e:	|  |         adda.l d0,a0
   16850:	|  |         move.l (a0),d0
   16852:	|  |         move.l d0,-(sp)
   16854:	|  |         jsr 176da <__floatsisf>
   1685a:	|  |         addq.l #4,sp
   1685c:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16860:	|  |         movea.l 1cae0 <currentFloor>,a0
   16866:	|  |         move.l 4(a0),d1
   1686a:	|  |         movea.l 40(sp),a0
   1686e:	|  |         movea.l 4(a0),a0
   16872:	|  |         move.l 32(sp),d0
   16876:	|  |         add.l d0,d0
   16878:	|  |         add.l d0,d0
   1687a:	|  |         adda.l d0,a0
   1687c:	|  |         move.l (a0),d0
   1687e:	|  |         lsl.l #3,d0
   16880:	|  |         movea.l d1,a0
   16882:	|  |         adda.l d0,a0
   16884:	|  |         move.l 4(a0),d0
   16888:	|  |         move.l d0,-(sp)
   1688a:	|  |         jsr 176da <__floatsisf>
   16890:	|  |         addq.l #4,sp
   16892:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16896:	|  |         movea.l 1cae0 <currentFloor>,a0
   1689c:	|  |         move.l 4(a0),d1
   168a0:	|  |         movea.l 40(sp),a0
   168a4:	|  |         movea.l 4(a0),a0
   168a8:	|  |         move.l 28(sp),d0
   168ac:	|  |         add.l d0,d0
   168ae:	|  |         add.l d0,d0
   168b0:	|  |         adda.l d0,a0
   168b2:	|  |         move.l (a0),d0
   168b4:	|  |         lsl.l #3,d0
   168b6:	|  |         movea.l d1,a0
   168b8:	|  |         adda.l d0,a0
   168ba:	|  |         move.l (a0),d0
   168bc:	|  |         move.l d0,-(sp)
   168be:	|  |         jsr 176da <__floatsisf>
   168c4:	|  |         addq.l #4,sp
   168c6:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   168ca:	|  |         movea.l 1cae0 <currentFloor>,a0
   168d0:	|  |         move.l 4(a0),d1
   168d4:	|  |         movea.l 40(sp),a0
   168d8:	|  |         movea.l 4(a0),a0
   168dc:	|  |         move.l 28(sp),d0
   168e0:	|  |         add.l d0,d0
   168e2:	|  |         add.l d0,d0
   168e4:	|  |         adda.l d0,a0
   168e6:	|  |         move.l (a0),d0
   168e8:	|  |         lsl.l #3,d0
   168ea:	|  |         movea.l d1,a0
   168ec:	|  |         adda.l d0,a0
   168ee:	|  |         move.l 4(a0),d0
   168f2:	|  |         move.l d0,-(sp)
   168f4:	|  |         jsr 176da <__floatsisf>
   168fa:	|  |         addq.l #4,sp
   168fc:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16900:	|  |         move.l 48(sp),-(sp)
   16904:	|  |         jsr 176da <__floatsisf>
   1690a:	|  |         addq.l #4,sp
   1690c:	|  |         move.l d0,-(sp)
   1690e:	|  |         move.l 20(sp),-(sp)
   16912:	|  |         jsr 1787c <__lesf2>
   16918:	|  |         addq.l #8,sp
   1691a:	|  |         tst.l d0
   1691c:	|  |     /-- bgt.s 1693c <pointInFloorPolygon+0x132>
   1691e:	|  |     |   move.l 48(sp),-(sp)
   16922:	|  |     |   jsr 176da <__floatsisf>
   16928:	|  |     |   addq.l #4,sp
   1692a:	|  |     |   move.l d0,-(sp)
   1692c:	|  |     |   move.l 12(sp),-(sp)
   16930:	|  |     |   jsr 17846 <__gtsf2>
   16936:	|  |     |   addq.l #8,sp
   16938:	|  |     |   tst.l d0
   1693a:	|  |  /--|-- bgt.s 1697c <pointInFloorPolygon+0x172>
   1693c:	|  |  |  \-> move.l 48(sp),-(sp)
   16940:	|  |  |      jsr 176da <__floatsisf>
   16946:	|  |  |      addq.l #4,sp
   16948:	|  |  |      move.l d0,-(sp)
   1694a:	|  |  |      move.l 12(sp),-(sp)
   1694e:	|  |  |      jsr 1787c <__lesf2>
   16954:	|  |  |      addq.l #8,sp
   16956:	|  |  |      tst.l d0
   16958:	|  |  |  /-- bgt.w 16a12 <pointInFloorPolygon+0x208>
   1695c:	|  |  |  |   move.l 48(sp),-(sp)
   16960:	|  |  |  |   jsr 176da <__floatsisf>
   16966:	|  |  |  |   addq.l #4,sp
   16968:	|  |  |  |   move.l d0,-(sp)
   1696a:	|  |  |  |   move.l 20(sp),-(sp)
   1696e:	|  |  |  |   jsr 17846 <__gtsf2>
   16974:	|  |  |  |   addq.l #8,sp
   16976:	|  |  |  |   tst.l d0
   16978:	|  |  |  +-- ble.w 16a12 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   1697c:	|  |  \--|-> move.l 44(sp),-(sp)
   16980:	|  |     |   jsr 176da <__floatsisf>
   16986:	|  |     |   addq.l #4,sp
   16988:	|  |     |   move.l d0,d3
   1698a:	|  |     |   move.l 20(sp),-(sp)
   1698e:	|  |     |   move.l 16(sp),-(sp)
   16992:	|  |     |   jsr 179ce <__subsf3>
   16998:	|  |     |   addq.l #8,sp
   1699a:	|  |     |   move.l d0,d2
   1699c:	|  |     |   move.l 48(sp),-(sp)
   169a0:	|  |     |   jsr 176da <__floatsisf>
   169a6:	|  |     |   addq.l #4,sp
   169a8:	|  |     |   move.l 16(sp),-(sp)
   169ac:	|  |     |   move.l d0,-(sp)
   169ae:	|  |     |   jsr 179ce <__subsf3>
   169b4:	|  |     |   addq.l #8,sp
   169b6:	|  |     |   move.l d0,-(sp)
   169b8:	|  |     |   move.l d2,-(sp)
   169ba:	|  |     |   jsr 1778c <__mulsf3>
   169c0:	|  |     |   addq.l #8,sp
   169c2:	|  |     |   move.l d0,d2
   169c4:	|  |     |   move.l 16(sp),-(sp)
   169c8:	|  |     |   move.l 12(sp),-(sp)
   169cc:	|  |     |   jsr 179ce <__subsf3>
   169d2:	|  |     |   addq.l #8,sp
   169d4:	|  |     |   move.l d0,-(sp)
   169d6:	|  |     |   move.l d2,-(sp)
   169d8:	|  |     |   jsr 17586 <__divsf3>
   169de:	|  |     |   addq.l #8,sp
   169e0:	|  |     |   move.l 20(sp),-(sp)
   169e4:	|  |     |   move.l d0,-(sp)
   169e6:	|  |     |   jsr 1748c <__addsf3>
   169ec:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   169ee:	|  |     |   move.l d0,-(sp)
   169f0:	|  |     |   move.l d3,-(sp)
   169f2:	|  |     |   jsr 17900 <__ltsf2>
   169f8:	|  |     |   addq.l #8,sp
   169fa:	|  |     |   tst.l d0
   169fc:	|  |     +-- bge.s 16a12 <pointInFloorPolygon+0x208>

			c = !c;
   169fe:	|  |     |   tst.l 24(sp)
   16a02:	|  |     |   seq d0
   16a04:	|  |     |   neg.b d0
   16a06:	|  |     |   move.b d0,d0
   16a08:	|  |     |   andi.l #255,d0
   16a0e:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16a12:	|  |     \-> move.l 32(sp),d0
   16a16:	|  |         move.l d0,d1
   16a18:	|  |         addq.l #1,d1
   16a1a:	|  |         move.l d1,32(sp)
   16a1e:	|  |         move.l d0,28(sp)
   16a22:	|  \-------> movea.l 40(sp),a0
   16a26:	|            move.l (a0),d0
   16a28:	|            cmp.l 32(sp),d0
   16a2c:	\----------- bgt.w 1682c <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16a30:	             tst.l 24(sp)
   16a34:	             sne d0
   16a36:	             neg.b d0
   16a38:	             move.b d0,d0
   16a3a:	             andi.w #255,d0
}
   16a3e:	             move.l (sp)+,d2
   16a40:	             move.l (sp)+,d3
   16a42:	             lea 28(sp),sp
   16a46:	             rts

00016a48 <setFloor>:

BOOL setFloor (int fileNum) {
   16a48:	                               lea -132(sp),sp
   16a4c:	                               move.l a6,-(sp)
   16a4e:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16a50:	                               jsr 166b0 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16a56:	                               move.l 144(sp),-(sp)
   16a5a:	                               jsr 6eb2 <openFileFromNum>
   16a60:	                               addq.l #4,sp
   16a62:	                               tst.l d0
   16a64:	                           /-- bne.s 16a6c <setFloor+0x24>
   16a66:	                           |   clr.w d0
   16a68:	/--------------------------|-- bra.w 171b8 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16a6c:	|                          \-> movea.l 1cae0 <currentFloor>,a0
   16a72:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16a76:	|                              move.l 1c9ac <bigDataFile>,118(sp)
   16a7e:	|                              move.l 1c9cc <DOSBase>,d0
   16a84:	|                              movea.l d0,a6
   16a86:	|                              move.l 118(sp),d1
   16a8a:	|                              jsr -306(a6)
   16a8e:	|                              move.l d0,114(sp)
   16a92:	|                              move.l 114(sp),d0
   16a96:	|                              movea.l 1cae0 <currentFloor>,a0
   16a9c:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16aa0:	|                              movea.l 1cae0 <currentFloor>,a0
   16aa6:	|                              move.l 8(a0),d0
   16aaa:	|                              lsl.l #3,d0
   16aac:	|                              move.l d0,110(sp)
   16ab0:	|                              clr.l 106(sp)
   16ab4:	|                              move.l 1c9c4 <SysBase>,d0
   16aba:	|                              movea.l d0,a6
   16abc:	|                              move.l 110(sp),d0
   16ac0:	|                              move.l 106(sp),d1
   16ac4:	|                              jsr -684(a6)
   16ac8:	|                              move.l d0,102(sp)
   16acc:	|                              move.l 102(sp),d0
   16ad0:	|                              movea.l 1cae0 <currentFloor>,a0
   16ad6:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16ada:	|                              movea.l 1cae0 <currentFloor>,a0
   16ae0:	|                              move.l 12(a0),d0
   16ae4:	|                          /-- bne.s 16afa <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16ae6:	|                          |   pea 1a136 <main_sludge.c.0270f7ba+0x24>
   16aec:	|                          |   jsr 1729e <KPrintF>
   16af2:	|                          |   addq.l #4,sp
		return FALSE;
   16af4:	|                          |   clr.w d0
   16af6:	+--------------------------|-- bra.w 171b8 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16afa:	|                          \-> clr.l 136(sp)
   16afe:	|                    /-------- bra.w 16c16 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16b02:	|                 /--|-------> move.l 1c9ac <bigDataFile>,26(sp)
   16b0a:	|                 |  |         move.l 1c9cc <DOSBase>,d0
   16b10:	|                 |  |         movea.l d0,a6
   16b12:	|                 |  |         move.l 26(sp),d1
   16b16:	|                 |  |         jsr -306(a6)
   16b1a:	|                 |  |         move.l d0,22(sp)
   16b1e:	|                 |  |         move.l 22(sp),d1
   16b22:	|                 |  |         movea.l 1cae0 <currentFloor>,a0
   16b28:	|                 |  |         movea.l 12(a0),a0
   16b2c:	|                 |  |         move.l 136(sp),d0
   16b30:	|                 |  |         lsl.l #3,d0
   16b32:	|                 |  |         adda.l d0,a0
   16b34:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16b36:	|                 |  |         movea.l 1cae0 <currentFloor>,a0
   16b3c:	|                 |  |         move.l 12(a0),d1
   16b40:	|                 |  |         move.l 136(sp),d0
   16b44:	|                 |  |         lsl.l #3,d0
   16b46:	|                 |  |         movea.l d1,a0
   16b48:	|                 |  |         adda.l d0,a0
   16b4a:	|                 |  |         move.l (a0),d0
   16b4c:	|                 |  |         add.l d0,d0
   16b4e:	|                 |  |         add.l d0,d0
   16b50:	|                 |  |         move.l d0,18(sp)
   16b54:	|                 |  |         clr.l 14(sp)
   16b58:	|                 |  |         move.l 1c9c4 <SysBase>,d0
   16b5e:	|                 |  |         movea.l d0,a6
   16b60:	|                 |  |         move.l 18(sp),d0
   16b64:	|                 |  |         move.l 14(sp),d1
   16b68:	|                 |  |         jsr -684(a6)
   16b6c:	|                 |  |         move.l d0,10(sp)
   16b70:	|                 |  |         move.l 10(sp),d1
   16b74:	|                 |  |         movea.l 1cae0 <currentFloor>,a0
   16b7a:	|                 |  |         movea.l 12(a0),a0
   16b7e:	|                 |  |         move.l 136(sp),d0
   16b82:	|                 |  |         lsl.l #3,d0
   16b84:	|                 |  |         adda.l d0,a0
   16b86:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16b8a:	|                 |  |         movea.l 1cae0 <currentFloor>,a0
   16b90:	|                 |  |         move.l 12(a0),d1
   16b94:	|                 |  |         move.l 136(sp),d0
   16b98:	|                 |  |         lsl.l #3,d0
   16b9a:	|                 |  |         movea.l d1,a0
   16b9c:	|                 |  |         adda.l d0,a0
   16b9e:	|                 |  |         move.l 4(a0),d0
   16ba2:	|                 |  |     /-- bne.s 16bb8 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16ba4:	|                 |  |     |   pea 1a136 <main_sludge.c.0270f7ba+0x24>
   16baa:	|                 |  |     |   jsr 1729e <KPrintF>
   16bb0:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16bb2:	|                 |  |     |   clr.w d0
   16bb4:	+-----------------|--|-----|-- bra.w 171b8 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16bb8:	|                 |  |     \-> clr.l 132(sp)
   16bbc:	|                 |  |     /-- bra.s 16bf6 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16bbe:	|                 |  |  /--|-> move.l 1c9ac <bigDataFile>,d1
   16bc4:	|                 |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   16bca:	|                 |  |  |  |   movea.l 12(a0),a0
   16bce:	|                 |  |  |  |   move.l 136(sp),d0
   16bd2:	|                 |  |  |  |   lsl.l #3,d0
   16bd4:	|                 |  |  |  |   adda.l d0,a0
   16bd6:	|                 |  |  |  |   movea.l 4(a0),a0
   16bda:	|                 |  |  |  |   move.l 132(sp),d0
   16bde:	|                 |  |  |  |   add.l d0,d0
   16be0:	|                 |  |  |  |   add.l d0,d0
   16be2:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16be6:	|                 |  |  |  |   move.l d1,-(sp)
   16be8:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16bee:	|                 |  |  |  |   addq.l #4,sp
   16bf0:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16bf2:	|                 |  |  |  |   addq.l #1,132(sp)
   16bf6:	|                 |  |  |  \-> movea.l 1cae0 <currentFloor>,a0
   16bfc:	|                 |  |  |      move.l 12(a0),d1
   16c00:	|                 |  |  |      move.l 136(sp),d0
   16c04:	|                 |  |  |      lsl.l #3,d0
   16c06:	|                 |  |  |      movea.l d1,a0
   16c08:	|                 |  |  |      adda.l d0,a0
   16c0a:	|                 |  |  |      move.l (a0),d0
   16c0c:	|                 |  |  |      cmp.l 132(sp),d0
   16c10:	|                 |  |  \----- bgt.s 16bbe <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c12:	|                 |  |         addq.l #1,136(sp)
   16c16:	|                 |  \-------> movea.l 1cae0 <currentFloor>,a0
   16c1c:	|                 |            move.l 8(a0),d0
   16c20:	|                 |            cmp.l 136(sp),d0
   16c24:	|                 \----------- bgt.w 16b02 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16c28:	|                              move.l 1c9ac <bigDataFile>,d0
   16c2e:	|                              move.l d0,-(sp)
   16c30:	|                              jsr 6bc <get2bytes>
   16c36:	|                              addq.l #4,sp
   16c38:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16c3c:	|                              move.l 136(sp),d0
   16c40:	|                              lsl.l #3,d0
   16c42:	|                              move.l d0,98(sp)
   16c46:	|                              clr.l 94(sp)
   16c4a:	|                              move.l 1c9c4 <SysBase>,d0
   16c50:	|                              movea.l d0,a6
   16c52:	|                              move.l 98(sp),d0
   16c56:	|                              move.l 94(sp),d1
   16c5a:	|                              jsr -684(a6)
   16c5e:	|                              move.l d0,90(sp)
   16c62:	|                              move.l 90(sp),d0
   16c66:	|                              movea.l 1cae0 <currentFloor>,a0
   16c6c:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16c70:	|                              movea.l 1cae0 <currentFloor>,a0
   16c76:	|                              move.l 4(a0),d0
   16c7a:	|                          /-- bne.s 16c90 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16c7c:	|                          |   pea 1a136 <main_sludge.c.0270f7ba+0x24>
   16c82:	|                          |   jsr 1729e <KPrintF>
   16c88:	|                          |   addq.l #4,sp
		return FALSE;
   16c8a:	|                          |   clr.w d0
   16c8c:	+--------------------------|-- bra.w 171b8 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16c90:	|                          \-> clr.l 132(sp)
   16c94:	|                          /-- bra.s 16ce8 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16c96:	|                       /--|-> move.l 1c9ac <bigDataFile>,d1
   16c9c:	|                       |  |   movea.l 1cae0 <currentFloor>,a0
   16ca2:	|                       |  |   movea.l 4(a0),a0
   16ca6:	|                       |  |   move.l 132(sp),d0
   16caa:	|                       |  |   lsl.l #3,d0
   16cac:	|                       |  |   lea (0,a0,d0.l),a2
   16cb0:	|                       |  |   move.l d1,-(sp)
   16cb2:	|                       |  |   jsr 6bc <get2bytes>
   16cb8:	|                       |  |   addq.l #4,sp
   16cba:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16cbc:	|                       |  |   move.l 1c9ac <bigDataFile>,d1
   16cc2:	|                       |  |   movea.l 1cae0 <currentFloor>,a0
   16cc8:	|                       |  |   movea.l 4(a0),a0
   16ccc:	|                       |  |   move.l 132(sp),d0
   16cd0:	|                       |  |   lsl.l #3,d0
   16cd2:	|                       |  |   lea (0,a0,d0.l),a2
   16cd6:	|                       |  |   move.l d1,-(sp)
   16cd8:	|                       |  |   jsr 6bc <get2bytes>
   16cde:	|                       |  |   addq.l #4,sp
   16ce0:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16ce4:	|                       |  |   addq.l #1,132(sp)
   16ce8:	|                       |  \-> move.l 132(sp),d0
   16cec:	|                       |      cmp.l 136(sp),d0
   16cf0:	|                       \----- blt.s 16c96 <setFloor+0x24e>
	}

	finishAccess ();
   16cf2:	|                              jsr 6daa <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16cf8:	|                              movea.l 1cae0 <currentFloor>,a0
   16cfe:	|                              move.l 8(a0),d0
   16d02:	|                              add.l d0,d0
   16d04:	|                              add.l d0,d0
   16d06:	|                              move.l d0,86(sp)
   16d0a:	|                              clr.l 82(sp)
   16d0e:	|                              move.l 1c9c4 <SysBase>,d0
   16d14:	|                              movea.l d0,a6
   16d16:	|                              move.l 86(sp),d0
   16d1a:	|                              move.l 82(sp),d1
   16d1e:	|                              jsr -684(a6)
   16d22:	|                              move.l d0,78(sp)
   16d26:	|                              move.l 78(sp),d0
   16d2a:	|                              movea.l 1cae0 <currentFloor>,a0
   16d30:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16d34:	|                              movea.l 1cae0 <currentFloor>,a0
   16d3a:	|                              move.l 8(a0),d0
   16d3e:	|                              add.l d0,d0
   16d40:	|                              add.l d0,d0
   16d42:	|                              move.l d0,74(sp)
   16d46:	|                              clr.l 70(sp)
   16d4a:	|                              move.l 1c9c4 <SysBase>,d0
   16d50:	|                              movea.l d0,a6
   16d52:	|                              move.l 74(sp),d0
   16d56:	|                              move.l 70(sp),d1
   16d5a:	|                              jsr -684(a6)
   16d5e:	|                              move.l d0,66(sp)
   16d62:	|                              move.l 66(sp),d0
   16d66:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16d6a:	|                              movea.l 1cae0 <currentFloor>,a0
   16d70:	|                              move.l 16(a0),d0
   16d74:	|                          /-- bne.s 16d8a <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16d76:	|                          |   pea 1a136 <main_sludge.c.0270f7ba+0x24>
   16d7c:	|                          |   jsr 1729e <KPrintF>
   16d82:	|                          |   addq.l #4,sp
		return FALSE;
   16d84:	|                          |   clr.w d0
   16d86:	+--------------------------|-- bra.w 171b8 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d8a:	|                          \-> clr.l 136(sp)
   16d8e:	|                    /-------- bra.w 16eb2 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16d92:	|                 /--|-------> movea.l 1cae0 <currentFloor>,a0
   16d98:	|                 |  |         move.l 8(a0),d0
   16d9c:	|                 |  |         add.l d0,d0
   16d9e:	|                 |  |         add.l d0,d0
   16da0:	|                 |  |         move.l d0,50(sp)
   16da4:	|                 |  |         clr.l 46(sp)
   16da8:	|                 |  |         move.l 1c9c4 <SysBase>,d0
   16dae:	|                 |  |         movea.l d0,a6
   16db0:	|                 |  |         move.l 50(sp),d0
   16db4:	|                 |  |         move.l 46(sp),d1
   16db8:	|                 |  |         jsr -684(a6)
   16dbc:	|                 |  |         move.l d0,42(sp)
   16dc0:	|                 |  |         move.l 42(sp),d0
   16dc4:	|                 |  |         movea.l 1cae0 <currentFloor>,a0
   16dca:	|                 |  |         movea.l 16(a0),a0
   16dce:	|                 |  |         move.l 136(sp),d1
   16dd2:	|                 |  |         add.l d1,d1
   16dd4:	|                 |  |         add.l d1,d1
   16dd6:	|                 |  |         adda.l d1,a0
   16dd8:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16dda:	|                 |  |         movea.l 1cae0 <currentFloor>,a0
   16de0:	|                 |  |         move.l 8(a0),d0
   16de4:	|                 |  |         add.l d0,d0
   16de6:	|                 |  |         add.l d0,d0
   16de8:	|                 |  |         move.l d0,38(sp)
   16dec:	|                 |  |         clr.l 34(sp)
   16df0:	|                 |  |         move.l 1c9c4 <SysBase>,d0
   16df6:	|                 |  |         movea.l d0,a6
   16df8:	|                 |  |         move.l 38(sp),d0
   16dfc:	|                 |  |         move.l 34(sp),d1
   16e00:	|                 |  |         jsr -684(a6)
   16e04:	|                 |  |         move.l d0,30(sp)
   16e08:	|                 |  |         move.l 30(sp),d1
   16e0c:	|                 |  |         move.l 136(sp),d0
   16e10:	|                 |  |         add.l d0,d0
   16e12:	|                 |  |         add.l d0,d0
   16e14:	|                 |  |         movea.l 62(sp),a0
   16e18:	|                 |  |         adda.l d0,a0
   16e1a:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16e1c:	|                 |  |         movea.l 1cae0 <currentFloor>,a0
   16e22:	|                 |  |         move.l 16(a0),d1
   16e26:	|                 |  |         move.l 136(sp),d0
   16e2a:	|                 |  |         add.l d0,d0
   16e2c:	|                 |  |         add.l d0,d0
   16e2e:	|                 |  |         movea.l d1,a0
   16e30:	|                 |  |         adda.l d0,a0
   16e32:	|                 |  |         move.l (a0),d0
   16e34:	|                 |  |     /-- bne.s 16e4a <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16e36:	|                 |  |     |   pea 1a136 <main_sludge.c.0270f7ba+0x24>
   16e3c:	|                 |  |     |   jsr 1729e <KPrintF>
   16e42:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16e44:	|                 |  |     |   clr.w d0
   16e46:	+-----------------|--|-----|-- bra.w 171b8 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e4a:	|                 |  |     \-> clr.l 132(sp)
   16e4e:	|                 |  |     /-- bra.s 16e9e <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16e50:	|                 |  |  /--|-> movea.l 1cae0 <currentFloor>,a0
   16e56:	|                 |  |  |  |   move.l 16(a0),d1
   16e5a:	|                 |  |  |  |   move.l 136(sp),d0
   16e5e:	|                 |  |  |  |   add.l d0,d0
   16e60:	|                 |  |  |  |   add.l d0,d0
   16e62:	|                 |  |  |  |   movea.l d1,a0
   16e64:	|                 |  |  |  |   adda.l d0,a0
   16e66:	|                 |  |  |  |   move.l (a0),d1
   16e68:	|                 |  |  |  |   move.l 132(sp),d0
   16e6c:	|                 |  |  |  |   add.l d0,d0
   16e6e:	|                 |  |  |  |   add.l d0,d0
   16e70:	|                 |  |  |  |   movea.l d1,a0
   16e72:	|                 |  |  |  |   adda.l d0,a0
   16e74:	|                 |  |  |  |   moveq #-1,d1
   16e76:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16e78:	|                 |  |  |  |   move.l 136(sp),d0
   16e7c:	|                 |  |  |  |   add.l d0,d0
   16e7e:	|                 |  |  |  |   add.l d0,d0
   16e80:	|                 |  |  |  |   movea.l 62(sp),a0
   16e84:	|                 |  |  |  |   adda.l d0,a0
   16e86:	|                 |  |  |  |   move.l (a0),d1
   16e88:	|                 |  |  |  |   move.l 132(sp),d0
   16e8c:	|                 |  |  |  |   add.l d0,d0
   16e8e:	|                 |  |  |  |   add.l d0,d0
   16e90:	|                 |  |  |  |   movea.l d1,a0
   16e92:	|                 |  |  |  |   adda.l d0,a0
   16e94:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e9a:	|                 |  |  |  |   addq.l #1,132(sp)
   16e9e:	|                 |  |  |  \-> movea.l 1cae0 <currentFloor>,a0
   16ea4:	|                 |  |  |      move.l 8(a0),d0
   16ea8:	|                 |  |  |      cmp.l 132(sp),d0
   16eac:	|                 |  |  \----- bgt.s 16e50 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16eae:	|                 |  |         addq.l #1,136(sp)
   16eb2:	|                 |  \-------> movea.l 1cae0 <currentFloor>,a0
   16eb8:	|                 |            move.l 8(a0),d0
   16ebc:	|                 |            cmp.l 136(sp),d0
   16ec0:	|                 \----------- bgt.w 16d92 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ec4:	|                              clr.l 136(sp)
   16ec8:	|              /-------------- bra.w 16fce <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ecc:	|           /--|-------------> clr.l 132(sp)
   16ed0:	|           |  |     /-------- bra.w 16fb8 <setFloor+0x570>
			if (i != j) {
   16ed4:	|           |  |  /--|-------> move.l 136(sp),d0
   16ed8:	|           |  |  |  |         cmp.l 132(sp),d0
   16edc:	|           |  |  |  |     /-- beq.w 16f6e <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16ee0:	|           |  |  |  |     |   movea.l 1cae0 <currentFloor>,a0
   16ee6:	|           |  |  |  |     |   move.l 12(a0),d1
   16eea:	|           |  |  |  |     |   move.l 132(sp),d0
   16eee:	|           |  |  |  |     |   lsl.l #3,d0
   16ef0:	|           |  |  |  |     |   movea.l d1,a1
   16ef2:	|           |  |  |  |     |   adda.l d0,a1
   16ef4:	|           |  |  |  |     |   movea.l 1cae0 <currentFloor>,a0
   16efa:	|           |  |  |  |     |   move.l 12(a0),d1
   16efe:	|           |  |  |  |     |   move.l 136(sp),d0
   16f02:	|           |  |  |  |     |   lsl.l #3,d0
   16f04:	|           |  |  |  |     |   movea.l d1,a0
   16f06:	|           |  |  |  |     |   adda.l d0,a0
   16f08:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16f0c:	|           |  |  |  |     |   move.l (a1),-(sp)
   16f0e:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16f12:	|           |  |  |  |     |   move.l (a0),-(sp)
   16f14:	|           |  |  |  |     |   jsr 167a0 <polysShareSide>
   16f1a:	|           |  |  |  |     |   lea 16(sp),sp
   16f1e:	|           |  |  |  |     |   tst.w d0
   16f20:	|           |  |  |  |  /--|-- beq.w 16fb4 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16f24:	|           |  |  |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   16f2a:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16f2e:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16f32:	|           |  |  |  |  |  |   add.l d0,d0
   16f34:	|           |  |  |  |  |  |   add.l d0,d0
   16f36:	|           |  |  |  |  |  |   movea.l d1,a0
   16f38:	|           |  |  |  |  |  |   adda.l d0,a0
   16f3a:	|           |  |  |  |  |  |   move.l (a0),d1
   16f3c:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16f40:	|           |  |  |  |  |  |   add.l d0,d0
   16f42:	|           |  |  |  |  |  |   add.l d0,d0
   16f44:	|           |  |  |  |  |  |   movea.l d1,a0
   16f46:	|           |  |  |  |  |  |   adda.l d0,a0
   16f48:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16f4c:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16f50:	|           |  |  |  |  |  |   add.l d0,d0
   16f52:	|           |  |  |  |  |  |   add.l d0,d0
   16f54:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16f58:	|           |  |  |  |  |  |   adda.l d0,a0
   16f5a:	|           |  |  |  |  |  |   move.l (a0),d1
   16f5c:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16f60:	|           |  |  |  |  |  |   add.l d0,d0
   16f62:	|           |  |  |  |  |  |   add.l d0,d0
   16f64:	|           |  |  |  |  |  |   movea.l d1,a0
   16f66:	|           |  |  |  |  |  |   adda.l d0,a0
   16f68:	|           |  |  |  |  |  |   moveq #1,d1
   16f6a:	|           |  |  |  |  |  |   move.l d1,(a0)
   16f6c:	|           |  |  |  |  +--|-- bra.s 16fb4 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16f6e:	|           |  |  |  |  |  \-> movea.l 1cae0 <currentFloor>,a0
   16f74:	|           |  |  |  |  |      move.l 16(a0),d1
   16f78:	|           |  |  |  |  |      move.l 136(sp),d0
   16f7c:	|           |  |  |  |  |      add.l d0,d0
   16f7e:	|           |  |  |  |  |      add.l d0,d0
   16f80:	|           |  |  |  |  |      movea.l d1,a0
   16f82:	|           |  |  |  |  |      adda.l d0,a0
   16f84:	|           |  |  |  |  |      move.l (a0),d1
   16f86:	|           |  |  |  |  |      move.l 132(sp),d0
   16f8a:	|           |  |  |  |  |      add.l d0,d0
   16f8c:	|           |  |  |  |  |      add.l d0,d0
   16f8e:	|           |  |  |  |  |      movea.l d1,a0
   16f90:	|           |  |  |  |  |      adda.l d0,a0
   16f92:	|           |  |  |  |  |      moveq #-2,d0
   16f94:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16f96:	|           |  |  |  |  |      move.l 136(sp),d0
   16f9a:	|           |  |  |  |  |      add.l d0,d0
   16f9c:	|           |  |  |  |  |      add.l d0,d0
   16f9e:	|           |  |  |  |  |      movea.l 62(sp),a0
   16fa2:	|           |  |  |  |  |      adda.l d0,a0
   16fa4:	|           |  |  |  |  |      move.l (a0),d1
   16fa6:	|           |  |  |  |  |      move.l 132(sp),d0
   16faa:	|           |  |  |  |  |      add.l d0,d0
   16fac:	|           |  |  |  |  |      add.l d0,d0
   16fae:	|           |  |  |  |  |      movea.l d1,a0
   16fb0:	|           |  |  |  |  |      adda.l d0,a0
   16fb2:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16fb4:	|           |  |  |  |  \----> addq.l #1,132(sp)
   16fb8:	|           |  |  |  \-------> movea.l 1cae0 <currentFloor>,a0
   16fbe:	|           |  |  |            move.l 8(a0),d0
   16fc2:	|           |  |  |            cmp.l 132(sp),d0
   16fc6:	|           |  |  \----------- bgt.w 16ed4 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16fca:	|           |  |               addq.l #1,136(sp)
   16fce:	|           |  \-------------> movea.l 1cae0 <currentFloor>,a0
   16fd4:	|           |                  move.l 8(a0),d0
   16fd8:	|           |                  cmp.l 136(sp),d0
   16fdc:	|           \----------------- bgt.w 16ecc <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16fe0:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16fe4:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16fe8:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16fec:	|  |                           clr.l 136(sp)
   16ff0:	|  |     /-------------------- bra.w 17146 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ff4:	|  |  /--|-------------------> clr.l 132(sp)
   16ff8:	|  |  |  |     /-------------- bra.w 17130 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16ffc:	|  |  |  |  /--|-------------> movea.l 1cae0 <currentFloor>,a0
   17002:	|  |  |  |  |  |               move.l 16(a0),d1
   17006:	|  |  |  |  |  |               move.l 136(sp),d0
   1700a:	|  |  |  |  |  |               add.l d0,d0
   1700c:	|  |  |  |  |  |               add.l d0,d0
   1700e:	|  |  |  |  |  |               movea.l d1,a0
   17010:	|  |  |  |  |  |               adda.l d0,a0
   17012:	|  |  |  |  |  |               move.l (a0),d1
   17014:	|  |  |  |  |  |               move.l 132(sp),d0
   17018:	|  |  |  |  |  |               add.l d0,d0
   1701a:	|  |  |  |  |  |               add.l d0,d0
   1701c:	|  |  |  |  |  |               movea.l d1,a0
   1701e:	|  |  |  |  |  |               adda.l d0,a0
   17020:	|  |  |  |  |  |               move.l (a0),d0
   17022:	|  |  |  |  |  |               moveq #-1,d1
   17024:	|  |  |  |  |  |               cmp.l d0,d1
   17026:	|  |  |  |  |  |  /----------- bne.w 1712c <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1702a:	|  |  |  |  |  |  |            clr.l 122(sp)
   1702e:	|  |  |  |  |  |  |     /----- bra.w 1711a <setFloor+0x6d2>
						if (d != i && d != j) {
   17032:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   17036:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   1703a:	|  |  |  |  |  |  |  |  |  /-- beq.w 17116 <setFloor+0x6ce>
   1703e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   17042:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   17046:	|  |  |  |  |  |  |  |  |  +-- beq.w 17116 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   1704a:	|  |  |  |  |  |  |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   17050:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17054:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17058:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1705a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1705c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1705e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17060:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17062:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17066:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17068:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1706a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1706c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1706e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   17070:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   17074:	|  |  |  |  |  |  |  |  |  +-- bne.w 17116 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   17078:	|  |  |  |  |  |  |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   1707e:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17082:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17086:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17088:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1708a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1708c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1708e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17090:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17094:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17096:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17098:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1709a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1709c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   1709e:	|  |  |  |  |  |  |  |  |  +-- bmi.s 17116 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   170a0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   170a4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170a6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170a8:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   170ac:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170ae:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   170b0:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   170b4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170b6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170b8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170ba:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170bc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   170be:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   170c2:	|  |  |  |  |  |  |  |  |  +-- bgt.s 17116 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   170c4:	|  |  |  |  |  |  |  |  |  |   movea.l 1cae0 <currentFloor>,a0
   170ca:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   170ce:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   170d2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170d4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170d6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170d8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170da:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   170dc:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   170e0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170e2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170e4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170e6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170e8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   170ec:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   170f0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170f2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170f4:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   170f8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170fa:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   170fc:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17100:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17102:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17104:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17106:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17108:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   1710c:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   1710e:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   17110:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   17116:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   1711a:	|  |  |  |  |  |  |  |  \----> movea.l 1cae0 <currentFloor>,a0
   17120:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   17124:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   17128:	|  |  |  |  |  |  |  \-------- bgt.w 17032 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1712c:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   17130:	|  |  |  |  |  \-------------> movea.l 1cae0 <currentFloor>,a0
   17136:	|  |  |  |  |                  move.l 8(a0),d0
   1713a:	|  |  |  |  |                  cmp.l 132(sp),d0
   1713e:	|  |  |  |  \----------------- bgt.w 16ffc <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17142:	|  |  |  |                     addq.l #1,136(sp)
   17146:	|  |  |  \-------------------> movea.l 1cae0 <currentFloor>,a0
   1714c:	|  |  |                        move.l 8(a0),d0
   17150:	|  |  |                        cmp.l 136(sp),d0
   17154:	|  |  \----------------------- bgt.w 16ff4 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   17158:	|  |                           tst.w 130(sp)
   1715c:	|  \-------------------------- bne.w 16fe4 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17160:	|                              clr.l 136(sp)
   17164:	|                          /-- bra.s 1718c <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   17166:	|                       /--|-> move.l 136(sp),d0
   1716a:	|                       |  |   add.l d0,d0
   1716c:	|                       |  |   add.l d0,d0
   1716e:	|                       |  |   movea.l 62(sp),a0
   17172:	|                       |  |   adda.l d0,a0
   17174:	|                       |  |   move.l (a0),54(sp)
   17178:	|                       |  |   move.l 1c9c4 <SysBase>,d0
   1717e:	|                       |  |   movea.l d0,a6
   17180:	|                       |  |   movea.l 54(sp),a1
   17184:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17188:	|                       |  |   addq.l #1,136(sp)
   1718c:	|                       |  \-> movea.l 1cae0 <currentFloor>,a0
   17192:	|                       |      move.l 8(a0),d0
   17196:	|                       |      cmp.l 136(sp),d0
   1719a:	|                       \----- bgt.s 17166 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   1719c:	|                              move.l 62(sp),58(sp)
   171a2:	|                              move.l 1c9c4 <SysBase>,d0
   171a8:	|                              movea.l d0,a6
   171aa:	|                              movea.l 58(sp),a1
   171ae:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   171b2:	|                              clr.l 62(sp)

	return TRUE;
   171b6:	|                              moveq #1,d0
}
   171b8:	\----------------------------> movea.l (sp)+,a2
   171ba:	                               movea.l (sp)+,a6
   171bc:	                               lea 132(sp),sp
   171c0:	                               rts

000171c2 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   171c2:	jsr 166b0 <killFloor>
	noFloor ();
   171c8:	jsr 165d4 <noFloor>
   171ce:	nop
   171d0:	rts

000171d2 <WaitVbl>:
void WaitVbl() {
   171d2:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   171d4:	   /-> movea.l #14675972,a0
   171da:	   |   move.l (a0),d0
   171dc:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   171de:	   |   move.l (sp),d0
   171e0:	   |   andi.l #130816,d0
   171e6:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   171e8:	   |   move.l (sp),d0
   171ea:	   |   cmpi.l #76800,d0
   171f0:	   \-- beq.s 171d4 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   171f2:	/----> movea.l #14675972,a0
   171f8:	|      move.l (a0),d0
   171fa:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   171fe:	|      move.l 4(sp),d0
   17202:	|      andi.l #130816,d0
   17208:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   1720c:	|      move.l 4(sp),d0
   17210:	|      cmpi.l #76800,d0
   17216:	|  /-- beq.s 1721a <WaitVbl+0x48>
	while (1) {
   17218:	\--|-- bra.s 171f2 <WaitVbl+0x20>
			break;
   1721a:	   \-> nop
}
   1721c:	       nop
   1721e:	       addq.l #8,sp
   17220:	       rts

00017222 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   17222:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   17224:	       move.l 8(sp),(sp)
	while(len-- > 0)
   17228:	   /-- bra.s 1723a <memset+0x18>
		*ptr++ = val;
   1722a:	/--|-> move.l (sp),d0
   1722c:	|  |   move.l d0,d1
   1722e:	|  |   addq.l #1,d1
   17230:	|  |   move.l d1,(sp)
   17232:	|  |   move.l 12(sp),d1
   17236:	|  |   movea.l d0,a0
   17238:	|  |   move.b d1,(a0)
	while(len-- > 0)
   1723a:	|  \-> move.l 16(sp),d0
   1723e:	|      move.l d0,d1
   17240:	|      subq.l #1,d1
   17242:	|      move.l d1,16(sp)
   17246:	|      tst.l d0
   17248:	\----- bne.s 1722a <memset+0x8>
	return dest;
   1724a:	       move.l 8(sp),d0
}
   1724e:	       addq.l #4,sp
   17250:	       rts

00017252 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   17252:	       subq.l #8,sp
   17254:	       move.l d2,-(sp)
	char *d = (char *)dest;
   17256:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   1725c:	       move.l 20(sp),4(sp)
	while(len--)
   17262:	   /-- bra.s 17284 <memcpy+0x32>
		*d++ = *s++;
   17264:	/--|-> move.l 4(sp),d1
   17268:	|  |   move.l d1,d0
   1726a:	|  |   addq.l #1,d0
   1726c:	|  |   move.l d0,4(sp)
   17270:	|  |   move.l 8(sp),d0
   17274:	|  |   move.l d0,d2
   17276:	|  |   addq.l #1,d2
   17278:	|  |   move.l d2,8(sp)
   1727c:	|  |   movea.l d1,a0
   1727e:	|  |   move.b (a0),d1
   17280:	|  |   movea.l d0,a0
   17282:	|  |   move.b d1,(a0)
	while(len--)
   17284:	|  \-> move.l 24(sp),d0
   17288:	|      move.l d0,d1
   1728a:	|      subq.l #1,d1
   1728c:	|      move.l d1,24(sp)
   17290:	|      tst.l d0
   17292:	\----- bne.s 17264 <memcpy+0x12>
	return dest;
   17294:	       move.l 16(sp),d0
}
   17298:	       move.l (sp)+,d2
   1729a:	       addq.l #8,sp
   1729c:	       rts

0001729e <KPrintF>:
void KPrintF(const char* fmt, ...) {
   1729e:	       lea -128(sp),sp
   172a2:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   172a6:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec4e35>,d0
   172ac:	       cmpi.w #20153,d0
   172b0:	   /-- beq.s 172d4 <KPrintF+0x36>
   172b2:	   |   cmpi.w #-24562,d0
   172b6:	   +-- beq.s 172d4 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   172b8:	   |   movea.l 1c9c4 <SysBase>,a6
   172be:	   |   movea.l 144(sp),a0
   172c2:	   |   lea 148(sp),a1
   172c6:	   |   lea 17d64 <KPutCharX>,a2
   172cc:	   |   suba.l a3,a3
   172ce:	   |   jsr -522(a6)
}
   172d2:	/--|-- bra.s 172fe <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   172d4:	|  \-> movea.l 1c9c4 <SysBase>,a6
   172da:	|      movea.l 144(sp),a0
   172de:	|      lea 148(sp),a1
   172e2:	|      lea 17d72 <PutChar>,a2
   172e8:	|      lea 12(sp),a3
   172ec:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   172f0:	|      move.l a3,-(sp)
   172f2:	|      pea 56 <_start+0x56>
   172f6:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec4e35>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   172fc:	|      addq.l #8,sp
}
   172fe:	\----> movem.l (sp)+,a2-a3/a6
   17302:	       lea 128(sp),sp
   17306:	       rts

00017308 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   17308:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   1730a:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   17310:	       movea.l (sp),a0
   17312:	       move.w (a0),d0
   17314:	       cmpi.w #20153,d0
   17318:	   /-- beq.s 17324 <debug_cmd+0x1c>
   1731a:	   |   movea.l (sp),a0
   1731c:	   |   move.w (a0),d0
   1731e:	   |   cmpi.w #-24562,d0
   17322:	/--|-- bne.s 17342 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   17324:	|  \-> move.l 20(sp),-(sp)
   17328:	|      move.l 20(sp),-(sp)
   1732c:	|      move.l 20(sp),-(sp)
   17330:	|      move.l 20(sp),-(sp)
   17334:	|      pea 58 <_start+0x58>
   17338:	|      movea.l 20(sp),a0
   1733c:	|      jsr (a0)
   1733e:	|      lea 20(sp),sp
	}
}
   17342:	\----> nop
   17344:	       addq.l #4,sp
   17346:	       rts

00017348 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   17348:	       move.l d2,-(sp)
	while(*source && --num > 0)
   1734a:	   /-- bra.s 1736c <my_strncpy+0x24>
		*destination++ = *source++;
   1734c:	/--|-> move.l 12(sp),d1
   17350:	|  |   move.l d1,d0
   17352:	|  |   addq.l #1,d0
   17354:	|  |   move.l d0,12(sp)
   17358:	|  |   move.l 8(sp),d0
   1735c:	|  |   move.l d0,d2
   1735e:	|  |   addq.l #1,d2
   17360:	|  |   move.l d2,8(sp)
   17364:	|  |   movea.l d1,a0
   17366:	|  |   move.b (a0),d1
   17368:	|  |   movea.l d0,a0
   1736a:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   1736c:	|  \-> movea.l 12(sp),a0
   17370:	|      move.b (a0),d0
   17372:	|  /-- beq.s 1737a <my_strncpy+0x32>
   17374:	|  |   subq.l #1,16(sp)
   17378:	\--|-- bne.s 1734c <my_strncpy+0x4>
	*destination = '\0';
   1737a:	   \-> movea.l 8(sp),a0
   1737e:	       clr.b (a0)
}
   17380:	       nop
   17382:	       move.l (sp)+,d2
   17384:	       rts

00017386 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17386:	    lea -60(sp),sp
   1738a:	    movea.l 72(sp),a1
   1738e:	    movea.l 76(sp),a0
   17392:	    move.l 80(sp),d1
   17396:	    move.l 84(sp),d0
   1739a:	    movea.w a1,a1
   1739c:	    move.w a1,8(sp)
   173a0:	    movea.w a0,a0
   173a2:	    move.w a0,6(sp)
   173a6:	    move.w d1,d1
   173a8:	    move.w d1,4(sp)
   173ac:	    move.w d0,d0
   173ae:	    move.w d0,2(sp)
	struct debug_resource resource = {
   173b2:	    lea 10(sp),a0
   173b6:	    clr.l (a0)
   173b8:	    addq.l #4,a0
   173ba:	    clr.l (a0)
   173bc:	    addq.l #4,a0
   173be:	    clr.l (a0)
   173c0:	    addq.l #4,a0
   173c2:	    clr.l (a0)
   173c4:	    addq.l #4,a0
   173c6:	    clr.l (a0)
   173c8:	    addq.l #4,a0
   173ca:	    clr.l (a0)
   173cc:	    addq.l #4,a0
   173ce:	    clr.l (a0)
   173d0:	    addq.l #4,a0
   173d2:	    clr.l (a0)
   173d4:	    addq.l #4,a0
   173d6:	    clr.l (a0)
   173d8:	    addq.l #4,a0
   173da:	    clr.l (a0)
   173dc:	    addq.l #4,a0
   173de:	    clr.l (a0)
   173e0:	    addq.l #4,a0
   173e2:	    clr.l (a0)
   173e4:	    addq.l #4,a0
   173e6:	    clr.w (a0)
   173e8:	    addq.l #2,a0
		.address = (unsigned int)addr,
   173ea:	    move.l 64(sp),d0
	struct debug_resource resource = {
   173ee:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   173f2:	    move.w 8(sp),d0
   173f6:	/-- bpl.s 173fa <debug_register_bitmap+0x74>
   173f8:	|   addq.w #7,d0
   173fa:	\-> asr.w #3,d0
   173fc:	    movea.w d0,a0
   173fe:	    movea.w 6(sp),a1
   17402:	    move.l a1,-(sp)
   17404:	    move.l a0,-(sp)
   17406:	    jsr 17c5c <__mulsi3>
   1740c:	    addq.l #8,sp
   1740e:	    movea.w 4(sp),a0
   17412:	    move.l a0,-(sp)
   17414:	    move.l d0,-(sp)
   17416:	    jsr 17c5c <__mulsi3>
   1741c:	    addq.l #8,sp
	struct debug_resource resource = {
   1741e:	    move.l d0,14(sp)
   17422:	    move.w 2(sp),52(sp)
   17428:	    move.w 8(sp),54(sp)
   1742e:	    move.w 6(sp),56(sp)
   17434:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   1743a:	    moveq #0,d0
   1743c:	    move.w 2(sp),d0
   17440:	    moveq #2,d1
   17442:	    and.l d1,d0
   17444:	/-- beq.s 17450 <debug_register_bitmap+0xca>
		resource.size *= 2;
   17446:	|   move.l 14(sp),d0
   1744a:	|   add.l d0,d0
   1744c:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17450:	\-> pea 20 <_start+0x20>
   17454:	    move.l 72(sp),-(sp)
   17458:	    lea 18(sp),a0
   1745c:	    move.l a0,d0
   1745e:	    addq.l #8,d0
   17460:	    move.l d0,-(sp)
   17462:	    jsr 17348 <my_strncpy>
   17468:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   1746c:	    lea 10(sp),a0
   17470:	    clr.l -(sp)
   17472:	    clr.l -(sp)
   17474:	    move.l a0,-(sp)
   17476:	    pea 4 <_start+0x4>
   1747a:	    jsr 17308 <debug_cmd>
   17480:	    lea 16(sp),sp
}
   17484:	    nop
   17486:	    lea 60(sp),sp
   1748a:	    rts

0001748c <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   1748c:	lea -12(sp),sp
   17490:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   17492:	move.l 20(sp),12(sp)
   17498:	move.l 24(sp),8(sp)
   1749e:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   174a4:	movea.l d0,a6
   174a6:	move.l 12(sp),d0
   174aa:	move.l 8(sp),d1
   174ae:	jsr -66(a6)
   174b2:	move.l d0,4(sp)
   174b6:	move.l 4(sp),d0
}
   174ba:	movea.l (sp)+,a6
   174bc:	lea 12(sp),sp
   174c0:	rts

000174c2 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   174c2:	lea -32(sp),sp
   174c6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   174ca:	move.l 48(sp),36(sp)
   174d0:	move.l 52(sp),40(sp)
   174d6:	move.l 56(sp),28(sp)
   174dc:	move.l 60(sp),32(sp)
   174e2:	move.l 1c9dc <MathIeeeDoubBasBase>,d0
   174e8:	movea.l d0,a6
   174ea:	move.l 36(sp),d0
   174ee:	move.l 40(sp),d1
   174f2:	move.l 28(sp),d2
   174f6:	move.l 32(sp),d3
   174fa:	jsr -66(a6)
   174fe:	move.l d0,12(sp)
   17502:	move.l d1,16(sp)
   17506:	move.l 12(sp),20(sp)
   1750c:	move.l 16(sp),24(sp)
   17512:	move.l 20(sp),d0
   17516:	move.l 24(sp),d1
}
   1751a:	movem.l (sp)+,d2-d3/a6
   1751e:	lea 32(sp),sp
   17522:	rts

00017524 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   17524:	lea -32(sp),sp
   17528:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   1752c:	move.l 48(sp),36(sp)
   17532:	move.l 52(sp),40(sp)
   17538:	move.l 56(sp),28(sp)
   1753e:	move.l 60(sp),32(sp)
   17544:	move.l 1c9dc <MathIeeeDoubBasBase>,d0
   1754a:	movea.l d0,a6
   1754c:	move.l 36(sp),d0
   17550:	move.l 40(sp),d1
   17554:	move.l 28(sp),d2
   17558:	move.l 32(sp),d3
   1755c:	jsr -84(a6)
   17560:	move.l d0,12(sp)
   17564:	move.l d1,16(sp)
   17568:	move.l 12(sp),20(sp)
   1756e:	move.l 16(sp),24(sp)
   17574:	move.l 20(sp),d0
   17578:	move.l 24(sp),d1
}
   1757c:	movem.l (sp)+,d2-d3/a6
   17580:	lea 32(sp),sp
   17584:	rts

00017586 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17586:	lea -12(sp),sp
   1758a:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   1758c:	move.l 20(sp),12(sp)
   17592:	move.l 24(sp),8(sp)
   17598:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   1759e:	movea.l d0,a6
   175a0:	move.l 12(sp),d0
   175a4:	move.l 8(sp),d1
   175a8:	jsr -84(a6)
   175ac:	move.l d0,4(sp)
   175b0:	move.l 4(sp),d0
}
   175b4:	movea.l (sp)+,a6
   175b6:	lea 12(sp),sp
   175ba:	rts

000175bc <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   175bc:	lea -12(sp),sp
   175c0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   175c2:	move.l 20(sp),12(sp)
   175c8:	move.l 24(sp),8(sp)
   175ce:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   175d4:	movea.l d0,a6
   175d6:	move.l 12(sp),d0
   175da:	move.l 8(sp),d1
   175de:	jsr -42(a6)
   175e2:	move.l d0,4(sp)
   175e6:	move.l 4(sp),d0
}
   175ea:	movea.l (sp)+,a6
   175ec:	lea 12(sp),sp
   175f0:	rts

000175f2 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   175f2:	lea -20(sp),sp
   175f6:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   175f8:	move.l 28(sp),20(sp)
   175fe:	move.l 1c9e0 <MathIeeeDoubTransBase>,d0
   17604:	movea.l d0,a6
   17606:	move.l 20(sp),d0
   1760a:	jsr -108(a6)
   1760e:	move.l d0,4(sp)
   17612:	move.l d1,8(sp)
   17616:	move.l 4(sp),12(sp)
   1761c:	move.l 8(sp),16(sp)
   17622:	move.l 12(sp),d0
   17626:	move.l 16(sp),d1
}
   1762a:	movea.l (sp)+,a6
   1762c:	lea 20(sp),sp
   17630:	rts

00017632 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   17632:	lea -12(sp),sp
   17636:	move.l a6,-(sp)
	return IEEEDPFix(value);
   17638:	move.l 20(sp),8(sp)
   1763e:	move.l 24(sp),12(sp)
   17644:	move.l 1c9dc <MathIeeeDoubBasBase>,d0
   1764a:	movea.l d0,a6
   1764c:	move.l 8(sp),d0
   17650:	move.l 12(sp),d1
   17654:	jsr -30(a6)
   17658:	move.l d0,4(sp)
   1765c:	move.l 4(sp),d0
   17660:	move.l d0,-(sp)
   17662:	jsr 1769a <__floatsidf>
   17668:	addq.l #4,sp
}
   1766a:	movea.l (sp)+,a6
   1766c:	lea 12(sp),sp
   17670:	rts

00017672 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17672:	subq.l #8,sp
   17674:	move.l a6,-(sp)
	return IEEESPFix(value);
   17676:	move.l 16(sp),8(sp)
   1767c:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   17682:	movea.l d0,a6
   17684:	move.l 8(sp),d0
   17688:	jsr -30(a6)
   1768c:	move.l d0,4(sp)
   17690:	move.l 4(sp),d0
}
   17694:	movea.l (sp)+,a6
   17696:	addq.l #8,sp
   17698:	rts

0001769a <__floatsidf>:


DOUBLE __floatsidf (int i) {
   1769a:	lea -20(sp),sp
   1769e:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   176a0:	move.l 28(sp),20(sp)
   176a6:	move.l 1c9dc <MathIeeeDoubBasBase>,d0
   176ac:	movea.l d0,a6
   176ae:	move.l 20(sp),d0
   176b2:	jsr -36(a6)
   176b6:	move.l d0,4(sp)
   176ba:	move.l d1,8(sp)
   176be:	move.l 4(sp),12(sp)
   176c4:	move.l 8(sp),16(sp)
   176ca:	move.l 12(sp),d0
   176ce:	move.l 16(sp),d1
}
   176d2:	movea.l (sp)+,a6
   176d4:	lea 20(sp),sp
   176d8:	rts

000176da <__floatsisf>:

FLOAT __floatsisf(int i) {
   176da:	subq.l #8,sp
   176dc:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   176de:	move.l 16(sp),8(sp)
   176e4:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   176ea:	movea.l d0,a6
   176ec:	move.l 8(sp),d0
   176f0:	jsr -36(a6)
   176f4:	move.l d0,4(sp)
   176f8:	move.l 4(sp),d0
}
   176fc:	movea.l (sp)+,a6
   176fe:	addq.l #8,sp
   17700:	rts

00017702 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17702:	subq.l #8,sp
   17704:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17706:	move.l 16(sp),8(sp)
   1770c:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   17712:	movea.l d0,a6
   17714:	move.l 8(sp),d0
   17718:	jsr -36(a6)
   1771c:	move.l d0,4(sp)
   17720:	move.l 4(sp),d0
}
   17724:	movea.l (sp)+,a6
   17726:	addq.l #8,sp
   17728:	rts

0001772a <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   1772a:	lea -32(sp),sp
   1772e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17732:	move.l 48(sp),36(sp)
   17738:	move.l 52(sp),40(sp)
   1773e:	move.l 56(sp),28(sp)
   17744:	move.l 60(sp),32(sp)
   1774a:	move.l 1c9dc <MathIeeeDoubBasBase>,d0
   17750:	movea.l d0,a6
   17752:	move.l 36(sp),d0
   17756:	move.l 40(sp),d1
   1775a:	move.l 28(sp),d2
   1775e:	move.l 32(sp),d3
   17762:	jsr -78(a6)
   17766:	move.l d0,12(sp)
   1776a:	move.l d1,16(sp)
   1776e:	move.l 12(sp),20(sp)
   17774:	move.l 16(sp),24(sp)
   1777a:	move.l 20(sp),d0
   1777e:	move.l 24(sp),d1
}
   17782:	movem.l (sp)+,d2-d3/a6
   17786:	lea 32(sp),sp
   1778a:	rts

0001778c <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1778c:	lea -12(sp),sp
   17790:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17792:	move.l 20(sp),12(sp)
   17798:	move.l 24(sp),8(sp)
   1779e:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   177a4:	movea.l d0,a6
   177a6:	move.l 12(sp),d0
   177aa:	move.l 8(sp),d1
   177ae:	jsr -78(a6)
   177b2:	move.l d0,4(sp)
   177b6:	move.l 4(sp),d0
}
   177ba:	movea.l (sp)+,a6
   177bc:	lea 12(sp),sp
   177c0:	rts

000177c2 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   177c2:	lea -12(sp),sp
   177c6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   177c8:	move.l 20(sp),12(sp)
   177ce:	move.l 24(sp),8(sp)
   177d4:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   177da:	movea.l d0,a6
   177dc:	move.l 12(sp),d0
   177e0:	move.l 8(sp),d1
   177e4:	jsr -42(a6)
   177e8:	move.l d0,4(sp)
   177ec:	move.l 4(sp),d0
}
   177f0:	movea.l (sp)+,a6
   177f2:	lea 12(sp),sp
   177f6:	rts

000177f8 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   177f8:	lea -20(sp),sp
   177fc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17800:	move.l 36(sp),24(sp)
   17806:	move.l 40(sp),28(sp)
   1780c:	move.l 44(sp),16(sp)
   17812:	move.l 48(sp),20(sp)
   17818:	move.l 1c9dc <MathIeeeDoubBasBase>,d0
   1781e:	movea.l d0,a6
   17820:	move.l 24(sp),d0
   17824:	move.l 28(sp),d1
   17828:	move.l 16(sp),d2
   1782c:	move.l 20(sp),d3
   17830:	jsr -42(a6)
   17834:	move.l d0,12(sp)
   17838:	move.l 12(sp),d0
}
   1783c:	movem.l (sp)+,d2-d3/a6
   17840:	lea 20(sp),sp
   17844:	rts

00017846 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17846:	lea -12(sp),sp
   1784a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1784c:	move.l 20(sp),12(sp)
   17852:	move.l 24(sp),8(sp)
   17858:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   1785e:	movea.l d0,a6
   17860:	move.l 12(sp),d0
   17864:	move.l 8(sp),d1
   17868:	jsr -42(a6)
   1786c:	move.l d0,4(sp)
   17870:	move.l 4(sp),d0
}
   17874:	movea.l (sp)+,a6
   17876:	lea 12(sp),sp
   1787a:	rts

0001787c <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1787c:	lea -12(sp),sp
   17880:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17882:	move.l 20(sp),12(sp)
   17888:	move.l 24(sp),8(sp)
   1788e:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   17894:	movea.l d0,a6
   17896:	move.l 12(sp),d0
   1789a:	move.l 8(sp),d1
   1789e:	jsr -42(a6)
   178a2:	move.l d0,4(sp)
   178a6:	move.l 4(sp),d0
}
   178aa:	movea.l (sp)+,a6
   178ac:	lea 12(sp),sp
   178b0:	rts

000178b2 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   178b2:	lea -20(sp),sp
   178b6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   178ba:	move.l 36(sp),24(sp)
   178c0:	move.l 40(sp),28(sp)
   178c6:	move.l 44(sp),16(sp)
   178cc:	move.l 48(sp),20(sp)
   178d2:	move.l 1c9dc <MathIeeeDoubBasBase>,d0
   178d8:	movea.l d0,a6
   178da:	move.l 24(sp),d0
   178de:	move.l 28(sp),d1
   178e2:	move.l 16(sp),d2
   178e6:	move.l 20(sp),d3
   178ea:	jsr -42(a6)
   178ee:	move.l d0,12(sp)
   178f2:	move.l 12(sp),d0
}
   178f6:	movem.l (sp)+,d2-d3/a6
   178fa:	lea 20(sp),sp
   178fe:	rts

00017900 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17900:	lea -12(sp),sp
   17904:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17906:	move.l 20(sp),12(sp)
   1790c:	move.l 24(sp),8(sp)
   17912:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   17918:	movea.l d0,a6
   1791a:	move.l 12(sp),d0
   1791e:	move.l 8(sp),d1
   17922:	jsr -42(a6)
   17926:	move.l d0,4(sp)
   1792a:	move.l 4(sp),d0
}
   1792e:	movea.l (sp)+,a6
   17930:	lea 12(sp),sp
   17934:	rts

00017936 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17936:	lea -12(sp),sp
   1793a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1793c:	move.l 20(sp),12(sp)
   17942:	move.l 24(sp),8(sp)
   17948:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   1794e:	movea.l d0,a6
   17950:	move.l 12(sp),d0
   17954:	move.l 8(sp),d1
   17958:	jsr -42(a6)
   1795c:	move.l d0,4(sp)
   17960:	move.l 4(sp),d0
}
   17964:	movea.l (sp)+,a6
   17966:	lea 12(sp),sp
   1796a:	rts

0001796c <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   1796c:	lea -32(sp),sp
   17970:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17974:	move.l 48(sp),36(sp)
   1797a:	move.l 52(sp),40(sp)
   17980:	move.l 56(sp),28(sp)
   17986:	move.l 60(sp),32(sp)
   1798c:	move.l 1c9dc <MathIeeeDoubBasBase>,d0
   17992:	movea.l d0,a6
   17994:	move.l 36(sp),d0
   17998:	move.l 40(sp),d1
   1799c:	move.l 28(sp),d2
   179a0:	move.l 32(sp),d3
   179a4:	jsr -72(a6)
   179a8:	move.l d0,12(sp)
   179ac:	move.l d1,16(sp)
   179b0:	move.l 12(sp),20(sp)
   179b6:	move.l 16(sp),24(sp)
   179bc:	move.l 20(sp),d0
   179c0:	move.l 24(sp),d1
}
   179c4:	movem.l (sp)+,d2-d3/a6
   179c8:	lea 32(sp),sp
   179cc:	rts

000179ce <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   179ce:	lea -12(sp),sp
   179d2:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   179d4:	move.l 20(sp),12(sp)
   179da:	move.l 24(sp),8(sp)
   179e0:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   179e6:	movea.l d0,a6
   179e8:	move.l 12(sp),d0
   179ec:	move.l 8(sp),d1
   179f0:	jsr -72(a6)
   179f4:	move.l d0,4(sp)
   179f8:	move.l 4(sp),d0
}
   179fc:	movea.l (sp)+,a6
   179fe:	lea 12(sp),sp
   17a02:	rts

00017a04 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17a04:	lea -12(sp),sp
   17a08:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17a0a:	move.l 20(sp),8(sp)
   17a10:	move.l 24(sp),12(sp)
   17a16:	move.l 1c9e0 <MathIeeeDoubTransBase>,d0
   17a1c:	movea.l d0,a6
   17a1e:	move.l 8(sp),d0
   17a22:	move.l 12(sp),d1
   17a26:	jsr -102(a6)
   17a2a:	move.l d0,4(sp)
   17a2e:	move.l 4(sp),d0
}
   17a32:	movea.l (sp)+,a6
   17a34:	lea 12(sp),sp
   17a38:	rts

00017a3a <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   17a3a:	subq.l #8,sp
   17a3c:	move.l a6,-(sp)
	return IEEESPFix(a);
   17a3e:	move.l 16(sp),8(sp)
   17a44:	move.l 1c9d4 <MathIeeeSingBasBase>,d0
   17a4a:	movea.l d0,a6
   17a4c:	move.l 8(sp),d0
   17a50:	jsr -30(a6)
   17a54:	move.l d0,4(sp)
   17a58:	move.l 4(sp),d0
}
   17a5c:	movea.l (sp)+,a6
   17a5e:	addq.l #8,sp
   17a60:	rts

00017a62 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   17a62:	       lea -24(sp),sp
   17a66:	       move.l a6,-(sp)
    if (x > 0) {
   17a68:	       clr.l -(sp)
   17a6a:	       move.l 40(sp),-(sp)
   17a6e:	       jsr 17846 <__gtsf2>
   17a74:	       addq.l #8,sp
   17a76:	       tst.l d0
   17a78:	   /-- ble.s 17aaa <atan2f+0x48>
        return IEEESPAtan(y / x);
   17a7a:	   |   move.l 36(sp),-(sp)
   17a7e:	   |   move.l 36(sp),-(sp)
   17a82:	   |   jsr 17586 <__divsf3>
   17a88:	   |   addq.l #8,sp
   17a8a:	   |   move.l d0,8(sp)
   17a8e:	   |   move.l 1c9d8 <MathIeeeSingTransBase>,d0
   17a94:	   |   movea.l d0,a6
   17a96:	   |   move.l 8(sp),d0
   17a9a:	   |   jsr -30(a6)
   17a9e:	   |   move.l d0,4(sp)
   17aa2:	   |   move.l 4(sp),d0
   17aa6:	/--|-- bra.w 17c0a <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17aaa:	|  \-> clr.l -(sp)
   17aac:	|      move.l 40(sp),-(sp)
   17ab0:	|      jsr 17900 <__ltsf2>
   17ab6:	|      addq.l #8,sp
   17ab8:	|      tst.l d0
   17aba:	|  /-- bge.s 17b2e <atan2f+0xcc>
   17abc:	|  |   clr.l -(sp)
   17abe:	|  |   move.l 36(sp),-(sp)
   17ac2:	|  |   jsr 177c2 <__gesf2>
   17ac8:	|  |   addq.l #8,sp
   17aca:	|  |   tst.l d0
   17acc:	|  +-- blt.s 17b2e <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17ace:	|  |   move.l 36(sp),-(sp)
   17ad2:	|  |   move.l 36(sp),-(sp)
   17ad6:	|  |   jsr 17586 <__divsf3>
   17adc:	|  |   addq.l #8,sp
   17ade:	|  |   move.l d0,24(sp)
   17ae2:	|  |   move.l 1c9d8 <MathIeeeSingTransBase>,d0
   17ae8:	|  |   movea.l d0,a6
   17aea:	|  |   move.l 24(sp),d0
   17aee:	|  |   jsr -30(a6)
   17af2:	|  |   move.l d0,20(sp)
   17af6:	|  |   move.l 20(sp),d0
   17afa:	|  |   move.l d0,-(sp)
   17afc:	|  |   jsr 175f2 <__extendsfdf2>
   17b02:	|  |   addq.l #4,sp
   17b04:	|  |   move.l #1413754136,-(sp)
   17b0a:	|  |   move.l #1074340347,-(sp)
   17b10:	|  |   move.l d1,-(sp)
   17b12:	|  |   move.l d0,-(sp)
   17b14:	|  |   jsr 174c2 <__adddf3>
   17b1a:	|  |   lea 16(sp),sp
   17b1e:	|  |   move.l d1,-(sp)
   17b20:	|  |   move.l d0,-(sp)
   17b22:	|  |   jsr 17a04 <__truncdfsf2>
   17b28:	|  |   addq.l #8,sp
   17b2a:	+--|-- bra.w 17c0a <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17b2e:	|  \-> clr.l -(sp)
   17b30:	|      move.l 40(sp),-(sp)
   17b34:	|      jsr 17900 <__ltsf2>
   17b3a:	|      addq.l #8,sp
   17b3c:	|      tst.l d0
   17b3e:	|  /-- bge.s 17bb0 <atan2f+0x14e>
   17b40:	|  |   clr.l -(sp)
   17b42:	|  |   move.l 36(sp),-(sp)
   17b46:	|  |   jsr 17900 <__ltsf2>
   17b4c:	|  |   addq.l #8,sp
   17b4e:	|  |   tst.l d0
   17b50:	|  +-- bge.s 17bb0 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17b52:	|  |   move.l 36(sp),-(sp)
   17b56:	|  |   move.l 36(sp),-(sp)
   17b5a:	|  |   jsr 17586 <__divsf3>
   17b60:	|  |   addq.l #8,sp
   17b62:	|  |   move.l d0,16(sp)
   17b66:	|  |   move.l 1c9d8 <MathIeeeSingTransBase>,d0
   17b6c:	|  |   movea.l d0,a6
   17b6e:	|  |   move.l 16(sp),d0
   17b72:	|  |   jsr -30(a6)
   17b76:	|  |   move.l d0,12(sp)
   17b7a:	|  |   move.l 12(sp),d0
   17b7e:	|  |   move.l d0,-(sp)
   17b80:	|  |   jsr 175f2 <__extendsfdf2>
   17b86:	|  |   addq.l #4,sp
   17b88:	|  |   move.l #1413754136,-(sp)
   17b8e:	|  |   move.l #1074340347,-(sp)
   17b94:	|  |   move.l d1,-(sp)
   17b96:	|  |   move.l d0,-(sp)
   17b98:	|  |   jsr 1796c <__subdf3>
   17b9e:	|  |   lea 16(sp),sp
   17ba2:	|  |   move.l d1,-(sp)
   17ba4:	|  |   move.l d0,-(sp)
   17ba6:	|  |   jsr 17a04 <__truncdfsf2>
   17bac:	|  |   addq.l #8,sp
   17bae:	+--|-- bra.s 17c0a <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17bb0:	|  \-> clr.l -(sp)
   17bb2:	|      move.l 40(sp),-(sp)
   17bb6:	|      jsr 175bc <__eqsf2>
   17bbc:	|      addq.l #8,sp
   17bbe:	|      tst.l d0
   17bc0:	|  /-- bne.s 17bdc <atan2f+0x17a>
   17bc2:	|  |   clr.l -(sp)
   17bc4:	|  |   move.l 36(sp),-(sp)
   17bc8:	|  |   jsr 17846 <__gtsf2>
   17bce:	|  |   addq.l #8,sp
   17bd0:	|  |   tst.l d0
   17bd2:	|  +-- ble.s 17bdc <atan2f+0x17a>
        return PI / 2;
   17bd4:	|  |   move.l #1070141403,d0
   17bda:	+--|-- bra.s 17c0a <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17bdc:	|  \-> clr.l -(sp)
   17bde:	|      move.l 40(sp),-(sp)
   17be2:	|      jsr 175bc <__eqsf2>
   17be8:	|      addq.l #8,sp
   17bea:	|      tst.l d0
   17bec:	|  /-- bne.s 17c08 <atan2f+0x1a6>
   17bee:	|  |   clr.l -(sp)
   17bf0:	|  |   move.l 36(sp),-(sp)
   17bf4:	|  |   jsr 17900 <__ltsf2>
   17bfa:	|  |   addq.l #8,sp
   17bfc:	|  |   tst.l d0
   17bfe:	|  +-- bge.s 17c08 <atan2f+0x1a6>
        return -PI / 2;
   17c00:	|  |   move.l #-1077342245,d0
   17c06:	+--|-- bra.s 17c0a <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17c08:	|  \-> moveq #0,d0
    }
}
   17c0a:	\----> movea.l (sp)+,a6
   17c0c:	       lea 24(sp),sp
   17c10:	       rts

00017c12 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17c12:	lea -24(sp),sp
   17c16:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17c18:	move.l 32(sp),20(sp)
   17c1e:	move.l 36(sp),24(sp)
   17c24:	move.l 1c9e0 <MathIeeeDoubTransBase>,d0
   17c2a:	movea.l d0,a6
   17c2c:	move.l 20(sp),d0
   17c30:	move.l 24(sp),d1
   17c34:	jsr -96(a6)
   17c38:	move.l d0,4(sp)
   17c3c:	move.l d1,8(sp)
   17c40:	move.l 4(sp),12(sp)
   17c46:	move.l 8(sp),16(sp)
   17c4c:	move.l 12(sp),d0
   17c50:	move.l 16(sp),d1
}
   17c54:	movea.l (sp)+,a6
   17c56:	lea 24(sp),sp
   17c5a:	rts

00017c5c <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17c5c:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17c60:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17c64:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17c68:	mulu.w 8(sp),d1
	addw	d1, d0
   17c6c:	add.w d1,d0
	swap	d0
   17c6e:	swap d0
	clrw	d0
   17c70:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17c72:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17c76:	mulu.w 10(sp),d1
	addl	d1, d0
   17c7a:	add.l d1,d0
	rts
   17c7c:	rts

00017c7e <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17c7e:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17c80:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17c84:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17c88:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17c8e:	   /-- bcc.s 17ca6 <__udivsi3+0x28>
	movel	d0, d2
   17c90:	   |   move.l d0,d2
	clrw	d2
   17c92:	   |   clr.w d2
	swap	d2
   17c94:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17c96:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17c98:	   |   move.w d2,d0
	swap	d0
   17c9a:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17c9c:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17ca0:	   |   divu.w d1,d2
	movew	d2, d0
   17ca2:	   |   move.w d2,d0
	jra	6f
   17ca4:	/--|-- bra.s 17cd6 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17ca6:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17ca8:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17caa:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17cac:	|  |   cmpi.l #65536,d1
	jcc	4b
   17cb2:	|  \-- bcc.s 17ca8 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17cb4:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17cb6:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17cbc:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17cbe:	|      mulu.w d0,d1
	swap	d2
   17cc0:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17cc2:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17cc4:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17cc6:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17cc8:	|  /-- bne.s 17cd4 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17cca:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17ccc:	|  +-- bcs.s 17cd4 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17cce:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17cd2:	+--|-- bls.s 17cd6 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17cd4:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17cd6:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17cd8:	       rts

00017cda <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17cda:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17cdc:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17cde:	    move.l 12(sp),d1
	jpl	1f
   17ce2:	/-- bpl.s 17ce8 <__divsi3+0xe>
	negl	d1
   17ce4:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17ce6:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17ce8:	\-> move.l 8(sp),d0
	jpl	2f
   17cec:	/-- bpl.s 17cf2 <__divsi3+0x18>
	negl	d0
   17cee:	|   neg.l d0
	negb	d2
   17cf0:	|   neg.b d2

2:	movel	d1, sp@-
   17cf2:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17cf4:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17cf6:	    jsr 17c7e <__udivsi3>
	addql	#8, sp
   17cfc:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17cfe:	    tst.b d2
	jpl	3f
   17d00:	/-- bpl.s 17d04 <__divsi3+0x2a>
	negl	d0
   17d02:	|   neg.l d0

3:	movel	sp@+, d2
   17d04:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17d06:	    rts

00017d08 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17d08:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17d0c:	move.l 4(sp),d0
	movel	d1, sp@-
   17d10:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d12:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17d14:	jsr 17cda <__divsi3>
	addql	#8, sp
   17d1a:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17d1c:	move.l 8(sp),d1
	movel	d1, sp@-
   17d20:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d22:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17d24:	jsr 17c5c <__mulsi3>
	addql	#8, sp
   17d2a:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17d2c:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17d30:	sub.l d0,d1
	movel	d1, d0
   17d32:	move.l d1,d0
	rts
   17d34:	rts

00017d36 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17d36:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17d3a:	move.l 4(sp),d0
	movel	d1, sp@-
   17d3e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d40:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17d42:	jsr 17c7e <__udivsi3>
	addql	#8, sp
   17d48:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17d4a:	move.l 8(sp),d1
	movel	d1, sp@-
   17d4e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d50:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17d52:	jsr 17c5c <__mulsi3>
	addql	#8, sp
   17d58:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17d5a:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17d5e:	sub.l d0,d1
	movel	d1, d0
   17d60:	move.l d1,d0
	rts
   17d62:	rts

00017d64 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17d64:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17d66:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17d6a:	jsr -516(a6)
    move.l (sp)+, a6
   17d6e:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17d70:	rts

00017d72 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17d72:	move.b d0,(a3)+
	rts
   17d74:	rts
