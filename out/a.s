
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #98304,d0
       8:	       subi.l #98304,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 18000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #98304,d0
      40:	       subi.l #98304,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 18000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 5c72 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #98304,d0
      7e:	       subi.l #98304,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 18000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 11fc6 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 187a2 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 11fde <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 18000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 11fc6 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 187a2 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 18000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 11fc6 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 187a2 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 155fa <PutChar+0x4>
     35c:	|  |              |   jsr 14b22 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 187aa <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 187aa <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 187aa <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 187aa <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 187aa <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 187aa <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 187aa <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 15624 <PutChar+0x2e>
     834:	|   jsr 14b22 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 187aa <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 15640 <PutChar+0x4a>
     8a6:	|   jsr 14b22 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 187aa <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 187aa <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 187aa <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 187aa <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 187aa <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 187aa <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 187aa <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 187aa <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 187a2 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 187aa <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 11fc6 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 187aa <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 187a2 <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 187a2 <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #87656,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 187a2 <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 15675 <PutChar+0x7f>
     cea:	   |   jsr 14b22 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 154e0 <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 155ba <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 15692 <PutChar+0x9c>
     d66:	|      jsr 14b22 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 187a2 <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 187a2 <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 187a2 <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 186aa <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 7ef0 <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),186aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 186ae <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 186b2 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     de2:	subq.l #8,sp
	
	struct sprite *spritetouse = c->theSprites->bank.sprites;
     de4:	movea.l 20(sp),a0
     de8:	movea.l (a0),a0
     dea:	move.l 16(a0),4(sp)

	UWORD absx =  x - spritetouse->xhot;
     df0:	move.l 12(sp),d0
     df4:	movea.l 4(sp),a0
     df8:	move.l 8(a0),d1
     dfc:	move.l d1,d1
     dfe:	movea.w d0,a0
     e00:	suba.w d1,a0
     e02:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     e06:	move.l 16(sp),d0
     e0a:	movea.l 4(sp),a0
     e0e:	move.l 12(a0),d1
     e12:	move.l d1,d1
     e14:	movea.w d0,a0
     e16:	suba.w d1,a0
     e18:	move.w a0,(sp)

	CstScaleSprite( spritetouse, absx, absy, BACKDROP);
     e1a:	move.w (sp),d0
     e1c:	movea.w d0,a1
     e1e:	move.w 2(sp),d0
     e22:	movea.w d0,a0
     e24:	pea 2 <_start+0x2>
     e28:	move.l a1,-(sp)
     e2a:	move.l a0,-(sp)
     e2c:	move.l 16(sp),-(sp)
     e30:	jsr 198a <CstScaleSprite>
     e36:	lea 16(sp),sp
     e3a:	nop
     e3c:	addq.l #8,sp
     e3e:	rts

00000e40 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e40:	             lea -24(sp),sp
     e44:	             move.l a6,-(sp)

  if(CstPalette) FreeVec(CstPalette);
     e46:	             move.l 186f2 <CstPalette>,d0
     e4c:	         /-- beq.s e66 <CstBlankScreen+0x26>
     e4e:	         |   move.l 186f2 <CstPalette>,12(sp)
     e56:	         |   move.l 187a2 <SysBase>,d0
     e5c:	         |   movea.l d0,a6
     e5e:	         |   movea.l 12(sp),a1
     e62:	         |   jsr -690(a6)
  CstPaletteLoaded = 0;
     e66:	         \-> clr.w 186be <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e6c:	             move.l #14675968,8(sp)

  width /= 16;
     e74:	             move.l 32(sp),d0
     e78:	             movea.l d0,a0
     e7a:	             cmpa.w #0,a0
     e7e:	         /-- bge.s e84 <CstBlankScreen+0x44>
     e80:	         |   lea 15(a0),a0
     e84:	         \-> move.l a0,d0
     e86:	             asr.l #4,d0
     e88:	             move.l d0,32(sp)

  WaitBlit();
     e8c:	             move.l 187ae <GfxBase>,d0
     e92:	             movea.l d0,a6
     e94:	             jsr -228(a6)

  //Both Buffers need to be done
  for(int i=0;i<2;i++) {
     e98:	             clr.l 24(sp)
     e9c:	   /-------- bra.w f76 <CstBlankScreen+0x136>
    custom->bltafwm = 0xffff;
     ea0:	/--|-------> movea.l 8(sp),a0
     ea4:	|  |         move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
     eaa:	|  |         movea.l 8(sp),a0
     eae:	|  |         move.w #-1,70(a0)
    custom->bltamod = 0;
     eb4:	|  |         movea.l 8(sp),a0
     eb8:	|  |         move.w #0,100(a0)
    custom->bltbmod = 0;
     ebe:	|  |         movea.l 8(sp),a0
     ec2:	|  |         move.w #0,98(a0)
    custom->bltcmod = 0;
     ec8:	|  |         movea.l 8(sp),a0
     ecc:	|  |         move.w #0,96(a0)
    custom->bltdmod = 0;
     ed2:	|  |         movea.l 8(sp),a0
     ed6:	|  |         move.w #0,102(a0)
    custom->bltcon1 = 0;
     edc:	|  |         movea.l 8(sp),a0
     ee0:	|  |         move.w #0,66(a0)
    custom->bltcon0 = 0x0100;
     ee6:	|  |         movea.l 8(sp),a0
     eea:	|  |         move.w #256,64(a0)
    ULONG bltdpt = (ULONG) CstDrawBuffer;
     ef0:	|  |         move.l 186da <CstDrawBuffer>,d0
     ef6:	|  |         move.l d0,20(sp)
    UWORD bltsize = height*64+width;    
     efa:	|  |         move.l 36(sp),d0
     efe:	|  |         lsl.w #6,d0
     f00:	|  |         move.l 32(sp),d1
     f04:	|  |         movea.w d0,a0
     f06:	|  |         adda.w d1,a0
     f08:	|  |         move.w a0,6(sp)
    UWORD blitsize = width*height*2;
     f0c:	|  |         move.l 32(sp),d1
     f10:	|  |         move.l 36(sp),d0
     f14:	|  |         muls.w d1,d0
     f16:	|  |         add.w d0,d0
     f18:	|  |         move.w d0,4(sp)
    for(int i2=0;i2<5;i2++)
     f1c:	|  |         clr.l 16(sp)
     f20:	|  |     /-- bra.s f52 <CstBlankScreen+0x112>
    {            
      custom->bltdpt = (APTR) bltdpt;
     f22:	|  |  /--|-> move.l 20(sp),d0
     f26:	|  |  |  |   movea.l 8(sp),a0
     f2a:	|  |  |  |   move.l d0,84(a0)
      custom->bltsize = bltsize;            
     f2e:	|  |  |  |   movea.l 8(sp),a0
     f32:	|  |  |  |   move.w 6(sp),88(a0)
      WaitBlit();
     f38:	|  |  |  |   move.l 187ae <GfxBase>,d0
     f3e:	|  |  |  |   movea.l d0,a6
     f40:	|  |  |  |   jsr -228(a6)
      bltdpt += blitsize;
     f44:	|  |  |  |   moveq #0,d0
     f46:	|  |  |  |   move.w 4(sp),d0
     f4a:	|  |  |  |   add.l d0,20(sp)
    for(int i2=0;i2<5;i2++)
     f4e:	|  |  |  |   addq.l #1,16(sp)
     f52:	|  |  |  \-> moveq #4,d0
     f54:	|  |  |      cmp.l 16(sp),d0
     f58:	|  |  \----- bge.s f22 <CstBlankScreen+0xe2>
    }

    WaitBlit();
     f5a:	|  |         move.l 187ae <GfxBase>,d0
     f60:	|  |         movea.l d0,a6
     f62:	|  |         jsr -228(a6)
    WaitVbl();
     f66:	|  |         jsr 14a56 <WaitVbl>
    CstSwapBuffer();
     f6c:	|  |         jsr 22ca <CstSwapBuffer>
  for(int i=0;i<2;i++) {
     f72:	|  |         addq.l #1,24(sp)
     f76:	|  \-------> moveq #1,d0
     f78:	|            cmp.l 24(sp),d0
     f7c:	\----------- bge.w ea0 <CstBlankScreen+0x60>
  }

}
     f80:	             nop
     f82:	             nop
     f84:	             movea.l (sp)+,a6
     f86:	             lea 24(sp),sp
     f8a:	             rts

00000f8c <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     f8c:	       lea -52(sp),sp
     f90:	       move.l a6,-(sp)
     f92:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     f94:	       move.l #400,32(sp)
     f9c:	       moveq #2,d0
     f9e:	       move.l d0,28(sp)
     fa2:	       move.l 187a2 <SysBase>,d0
     fa8:	       movea.l d0,a6
     faa:	       move.l 32(sp),d0
     fae:	       move.l 28(sp),d1
     fb2:	       jsr -198(a6)
     fb6:	       move.l d0,24(sp)
     fba:	       move.l 24(sp),d0
     fbe:	       move.l d0,20(sp)
  
  if( retval == 0) {
     fc2:	   /-- bne.s fec <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     fc4:	   |   pea 28 <_start+0x28>
     fc8:	   |   pea 156a5 <PutChar+0xaf>
     fce:	   |   jsr 14b22 <KPrintF>
     fd4:	   |   addq.l #8,sp
    Exit(1);
     fd6:	   |   moveq #1,d1
     fd8:	   |   move.l d1,16(sp)
     fdc:	   |   move.l 187aa <DOSBase>,d0
     fe2:	   |   movea.l d0,a6
     fe4:	   |   move.l 16(sp),d1
     fe8:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     fec:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     ff2:	       move.l #98306,52(sp)
  for(int i=0; i<16;i++)
     ffa:	       clr.l 48(sp)
     ffe:	   /-- bra.s 1024 <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
    1000:	/--|-> move.l 52(sp),d1
    1004:	|  |   move.l d1,d2
    1006:	|  |   addq.l #4,d2
    1008:	|  |   move.l d2,52(sp)
    100c:	|  |   move.l 56(sp),d0
    1010:	|  |   move.l d0,d2
    1012:	|  |   addq.l #4,d2
    1014:	|  |   move.l d2,56(sp)
    1018:	|  |   movea.l d1,a0
    101a:	|  |   move.l (a0),d1
    101c:	|  |   movea.l d0,a0
    101e:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1020:	|  |   addq.l #1,48(sp)
    1024:	|  \-> moveq #15,d0
    1026:	|      cmp.l 48(sp),d0
    102a:	\----- bge.s 1000 <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
    102c:	       move.l #98370,52(sp)

  for(int i=0; i<12;i++)
    1034:	       clr.l 44(sp)
    1038:	   /-- bra.s 105e <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
    103a:	/--|-> move.l 52(sp),d1
    103e:	|  |   move.l d1,d2
    1040:	|  |   addq.l #4,d2
    1042:	|  |   move.l d2,52(sp)
    1046:	|  |   move.l 56(sp),d0
    104a:	|  |   move.l d0,d2
    104c:	|  |   addq.l #4,d2
    104e:	|  |   move.l d2,56(sp)
    1052:	|  |   movea.l d1,a0
    1054:	|  |   move.l (a0),d1
    1056:	|  |   movea.l d0,a0
    1058:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    105a:	|  |   addq.l #1,44(sp)
    105e:	|  \-> moveq #11,d0
    1060:	|      cmp.l 44(sp),d0
    1064:	\----- bge.s 103a <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
    1066:	       move.l #98418,52(sp)
  for(int i=0; i<10;i++)
    106e:	       clr.l 40(sp)
    1072:	   /-- bra.s 1098 <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
    1074:	/--|-> move.l 52(sp),d1
    1078:	|  |   move.l d1,d2
    107a:	|  |   addq.l #4,d2
    107c:	|  |   move.l d2,52(sp)
    1080:	|  |   move.l 56(sp),d0
    1084:	|  |   move.l d0,d2
    1086:	|  |   addq.l #4,d2
    1088:	|  |   move.l d2,56(sp)
    108c:	|  |   movea.l d1,a0
    108e:	|  |   move.l (a0),d1
    1090:	|  |   movea.l d0,a0
    1092:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1094:	|  |   addq.l #1,40(sp)
    1098:	|  \-> moveq #9,d0
    109a:	|      cmp.l 40(sp),d0
    109e:	\----- bge.s 1074 <CstCreateCopperlist+0xe8>

  
  clpartinstruction = CstClColorTemplate;
    10a0:	       move.l #98458,52(sp)
  CstClColor = (UWORD *) cl;
    10a8:	       move.l 56(sp),186ee <CstClColor>
  for(int i=0; i<32;i++)
    10b0:	       clr.l 36(sp)
    10b4:	   /-- bra.s 10da <CstCreateCopperlist+0x14e>
    *cl++ = *clpartinstruction++;        
    10b6:	/--|-> move.l 52(sp),d1
    10ba:	|  |   move.l d1,d2
    10bc:	|  |   addq.l #4,d2
    10be:	|  |   move.l d2,52(sp)
    10c2:	|  |   move.l 56(sp),d0
    10c6:	|  |   move.l d0,d2
    10c8:	|  |   addq.l #4,d2
    10ca:	|  |   move.l d2,56(sp)
    10ce:	|  |   movea.l d1,a0
    10d0:	|  |   move.l (a0),d1
    10d2:	|  |   movea.l d0,a0
    10d4:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    10d6:	|  |   addq.l #1,36(sp)
    10da:	|  \-> moveq #31,d0
    10dc:	|      cmp.l 36(sp),d0
    10e0:	\----- bge.s 10b6 <CstCreateCopperlist+0x12a>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    10e2:	       moveq #40,d1
    10e4:	       cmp.l 64(sp),d1
    10e8:	   /-- bge.s 1146 <CstCreateCopperlist+0x1ba>
    int tmp = width - 40;
    10ea:	   |   moveq #-40,d2
    10ec:	   |   add.l 64(sp),d2
    10f0:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    10f4:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    10fa:	   |   move.l 8(sp),d0
    10fe:	   |   move.l d0,d1
    1100:	   |   addq.l #2,d1
    1102:	   |   move.l d1,8(sp)
    1106:	   |   movea.l d0,a0
    1108:	   |   move.w #264,(a0)
    *cw++ = tmp;
    110c:	   |   move.l 8(sp),d0
    1110:	   |   move.l d0,d1
    1112:	   |   addq.l #2,d1
    1114:	   |   move.l d1,8(sp)
    1118:	   |   move.l 12(sp),d1
    111c:	   |   movea.l d0,a0
    111e:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1120:	   |   move.l 8(sp),d0
    1124:	   |   move.l d0,d1
    1126:	   |   addq.l #2,d1
    1128:	   |   move.l d1,8(sp)
    112c:	   |   movea.l d0,a0
    112e:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    1132:	   |   move.l 8(sp),d0
    1136:	   |   move.l d0,d1
    1138:	   |   addq.l #2,d1
    113a:	   |   move.l d1,8(sp)
    113e:	   |   move.l 12(sp),d1
    1142:	   |   movea.l d0,a0
    1144:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1146:	   \-> move.l 56(sp),d0
    114a:	       move.l d0,d1
    114c:	       addq.l #4,d1
    114e:	       move.l d1,56(sp)
    1152:	       moveq #-2,d2
    1154:	       movea.l d0,a0
    1156:	       move.l d2,(a0)
  return (UWORD *) retval;  
    1158:	       move.l 20(sp),d0
}
    115c:	       move.l (sp)+,d2
    115e:	       movea.l (sp)+,a6
    1160:	       lea 52(sp),sp
    1164:	       rts

00001166 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    1166:	       lea -36(sp),sp
    116a:	       move.l a6,-(sp)
    116c:	       move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    116e:	       move.l #14675968,16(sp)

  APTR bltapt = (APTR) CstBackDrop + CstBackDropStartYWrite*winWidth/8+CstBackDropStartXWrite;
    1176:	       move.l 186c4 <CstBackDrop>,d2
    117c:	       move.w 186d0 <CstBackDropStartYWrite>,d0
    1182:	       move.w d0,d0
    1184:	       andi.l #65535,d0
    118a:	       move.l 186f6 <winWidth>,d1
    1190:	       move.l d1,-(sp)
    1192:	       move.l d0,-(sp)
    1194:	       jsr 154e0 <__mulsi3>
    119a:	       addq.l #8,sp
    119c:	       move.l d0,d1
    119e:	       lsr.l #3,d1
    11a0:	       move.w 186ce <CstBackDropStartXWrite>,d0
    11a6:	       move.w d0,d0
    11a8:	       andi.l #65535,d0
    11ae:	       add.l d1,d0
    11b0:	       move.l d2,d1
    11b2:	       add.l d0,d1
    11b4:	       move.l d1,40(sp)
  APTR bltdpt = (APTR) CstDrawBuffer + CstBackDropStartYWrite*winWidth/8+CstBackDropStartXWrite;
    11b8:	       move.l 186da <CstDrawBuffer>,d2
    11be:	       move.w 186d0 <CstBackDropStartYWrite>,d0
    11c4:	       move.w d0,d0
    11c6:	       andi.l #65535,d0
    11cc:	       move.l 186f6 <winWidth>,d1
    11d2:	       move.l d1,-(sp)
    11d4:	       move.l d0,-(sp)
    11d6:	       jsr 154e0 <__mulsi3>
    11dc:	       addq.l #8,sp
    11de:	       move.l d0,d1
    11e0:	       lsr.l #3,d1
    11e2:	       move.w 186ce <CstBackDropStartXWrite>,d0
    11e8:	       move.w d0,d0
    11ea:	       andi.l #65535,d0
    11f0:	       add.l d1,d0
    11f2:	       move.l d2,d1
    11f4:	       add.l d0,d1
    11f6:	       move.l d1,36(sp)
  ULONG planesize = CstBackdropSizePlane;
    11fa:	       move.w 186c2 <CstBackdropSizePlane>,d0
    1200:	       move.w d0,d0
    1202:	       andi.l #65535,d0
    1208:	       move.l d0,12(sp)

  WaitBlit();
    120c:	       move.l 187ae <GfxBase>,d0
    1212:	       movea.l d0,a6
    1214:	       jsr -228(a6)

  //Simple A to D Blit of Backdop or part of the Backdrop to the display Buffer
  custom->bltafwm = 0xffff;
    1218:	       movea.l 16(sp),a0
    121c:	       move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1222:	       movea.l 16(sp),a0
    1226:	       move.w #-1,70(a0)

  custom->bltamod = winWidth/8 - CstBackDropWidthWrite;
    122c:	       move.l 186f6 <winWidth>,d0
    1232:	       lsr.l #3,d0
    1234:	       move.l d0,d1
    1236:	       move.w 186d2 <CstBackDropWidthWrite>,d0
    123c:	       sub.w d0,d1
    123e:	       movea.l 16(sp),a0
    1242:	       move.w d1,100(a0)
  custom->bltdmod = winWidth/8 - CstBackDropWidthWrite;
    1246:	       move.l 186f6 <winWidth>,d0
    124c:	       lsr.l #3,d0
    124e:	       move.l d0,d1
    1250:	       move.w 186d2 <CstBackDropWidthWrite>,d0
    1256:	       sub.w d0,d1
    1258:	       movea.l 16(sp),a0
    125c:	       move.w d1,102(a0)
  custom->bltcon0 = 0x9f0;
    1260:	       movea.l 16(sp),a0
    1264:	       move.w #2544,64(a0)
  custom->bltcon1 = 0;
    126a:	       movea.l 16(sp),a0
    126e:	       move.w #0,66(a0)

  for(int i=0;i<5;i++)
    1274:	       clr.l 32(sp)
    1278:	   /-- bra.s 12ca <CstDisplayBackDrop+0x164>
  {
    custom->bltapt = bltapt;
    127a:	/--|-> movea.l 16(sp),a0
    127e:	|  |   move.l 40(sp),80(a0)
    custom->bltdpt = bltdpt;
    1284:	|  |   movea.l 16(sp),a0
    1288:	|  |   move.l 36(sp),84(a0)
    custom->bltsize = (CstBackDropHeightWrite<<6)+CstBackDropWidthWrite/2;
    128e:	|  |   move.w 186d4 <CstBackDropHeightWrite>,d0
    1294:	|  |   move.w d0,d1
    1296:	|  |   lsl.w #6,d1
    1298:	|  |   move.w 186d2 <CstBackDropWidthWrite>,d0
    129e:	|  |   lsr.w #1,d0
    12a0:	|  |   add.w d1,d0
    12a2:	|  |   movea.l 16(sp),a0
    12a6:	|  |   move.w d0,88(a0)
    bltapt += planesize;
    12aa:	|  |   move.l 12(sp),d2
    12ae:	|  |   add.l d2,40(sp)
    bltdpt += planesize;
    12b2:	|  |   move.l 12(sp),d0
    12b6:	|  |   add.l d0,36(sp)
    WaitBlit();
    12ba:	|  |   move.l 187ae <GfxBase>,d0
    12c0:	|  |   movea.l d0,a6
    12c2:	|  |   jsr -228(a6)
  for(int i=0;i<5;i++)
    12c6:	|  |   addq.l #1,32(sp)
    12ca:	|  \-> moveq #4,d1
    12cc:	|      cmp.l 32(sp),d1
    12d0:	\----- bge.s 127a <CstDisplayBackDrop+0x114>
    
  }  

  UWORD *tmp = CstClColor;
    12d2:	       move.l 186ee <CstClColor>,28(sp)
  UWORD reg = 0x180;
    12da:	       move.w #384,10(sp)
  UWORD *colorpos = CstPalette;
    12e0:	       move.l 186f2 <CstPalette>,24(sp)
  
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    12e8:	       clr.l 20(sp)
    12ec:	   /-- bra.s 131e <CstDisplayBackDrop+0x1b8>
    *tmp++;
    12ee:	/--|-> move.l 28(sp),d0
    12f2:	|  |   move.l d0,d2
    12f4:	|  |   addq.l #2,d2
    12f6:	|  |   move.l d2,28(sp)
    *tmp++ = *colorpos++;
    12fa:	|  |   move.l 24(sp),d1
    12fe:	|  |   move.l d1,d0
    1300:	|  |   addq.l #2,d0
    1302:	|  |   move.l d0,24(sp)
    1306:	|  |   move.l 28(sp),d0
    130a:	|  |   move.l d0,d2
    130c:	|  |   addq.l #2,d2
    130e:	|  |   move.l d2,28(sp)
    1312:	|  |   movea.l d1,a0
    1314:	|  |   move.w (a0),d1
    1316:	|  |   movea.l d0,a0
    1318:	|  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    131a:	|  |   addq.l #1,20(sp)
    131e:	|  \-> moveq #31,d0
    1320:	|      cmp.l 20(sp),d0
    1324:	\----- bge.s 12ee <CstDisplayBackDrop+0x188>
  }
}
    1326:	       nop
    1328:	       nop
    132a:	       move.l (sp)+,d2
    132c:	       movea.l (sp)+,a6
    132e:	       lea 36(sp),sp
    1332:	       rts

00001334 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    1334:	    move.w 186cc <CstApplyBackDropCounter>,d0
    133a:	/-- beq.s 1350 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    133c:	|   jsr 1166 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    1342:	|   move.w 186cc <CstApplyBackDropCounter>,d0
    1348:	|   subq.w #1,d0
    134a:	|   move.w d0,186cc <CstApplyBackDropCounter>
  }    
}
    1350:	\-> nop
    1352:	    rts

00001354 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1354:	             lea -140(sp),sp
    1358:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    135c:	             pea 156e0 <PutChar+0xea>
    1362:	             jsr 14b22 <KPrintF>
    1368:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    136a:	             move.l 160(sp),-(sp)
    136e:	             jsr 6bc <get2bytes>
    1374:	             addq.l #4,sp
    1376:	             move.w d0,130(sp)
  UWORD height = get2bytes(fp);  
    137a:	             move.l 160(sp),-(sp)
    137e:	             jsr 6bc <get2bytes>
    1384:	             addq.l #4,sp
    1386:	             move.w d0,128(sp)

  UWORD widthbyteslayer = width/8;
    138a:	             move.w 130(sp),d0
    138e:	             lsr.w #3,d0
    1390:	             move.w d0,126(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1394:	             move.w 126(sp),d0
    1398:	             lsr.w #1,d0
    139a:	             move.w d0,124(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    139e:	             move.l 186f6 <winWidth>,d0
    13a4:	             lsr.l #3,d0
    13a6:	             move.w d0,122(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    13aa:	             move.w 126(sp),d0
    13ae:	             muls.w 128(sp),d0
    13b2:	             move.w d0,120(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    13b6:	             move.w 120(sp),d1
    13ba:	             move.w d1,d0
    13bc:	             add.w d0,d0
    13be:	             add.w d0,d0
    13c0:	             move.w d0,d2
    13c2:	             add.w d1,d2
    13c4:	             move.w d2,118(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    13c8:	             move.w 186be <CstPaletteLoaded>,d0
    13ce:	/----------- bne.s 1446 <CstLoadBackdrop+0xf2>
  {    
    UWORD reg = 0x180;
    13d0:	|            move.w #384,116(sp)
    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    13d6:	|            moveq #64,d0
    13d8:	|            move.l d0,112(sp)
    13dc:	|            clr.l 108(sp)
    13e0:	|            move.l 187a2 <SysBase>,d0
    13e6:	|            movea.l d0,a6
    13e8:	|            move.l 112(sp),d0
    13ec:	|            move.l 108(sp),d1
    13f0:	|            jsr -684(a6)
    13f4:	|            move.l d0,104(sp)
    13f8:	|            move.l 104(sp),d0
    13fc:	|            move.l d0,186f2 <CstPalette>
    CstPaletteLoaded = 1;
    1402:	|            move.w #1,186be <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    140a:	|            move.l 186f2 <CstPalette>,152(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1412:	|            clr.l 148(sp)
    1416:	|        /-- bra.s 143c <CstLoadBackdrop+0xe8>
      *tmp++ = get2bytes(fp);
    1418:	|     /--|-> move.l 160(sp),-(sp)
    141c:	|     |  |   jsr 6bc <get2bytes>
    1422:	|     |  |   addq.l #4,sp
    1424:	|     |  |   move.l d0,d1
    1426:	|     |  |   move.l 152(sp),d0
    142a:	|     |  |   move.l d0,d2
    142c:	|     |  |   addq.l #2,d2
    142e:	|     |  |   move.l d2,152(sp)
    1432:	|     |  |   move.l d1,d1
    1434:	|     |  |   movea.l d0,a0
    1436:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1438:	|     |  |   addq.l #1,148(sp)
    143c:	|     |  \-> moveq #31,d0
    143e:	|     |      cmp.l 148(sp),d0
    1442:	|     \----- bge.s 1418 <CstLoadBackdrop+0xc4>
    1444:	|  /-------- bra.s 1464 <CstLoadBackdrop+0x110>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1446:	\--|-------> clr.l 144(sp)
    144a:	   |     /-- bra.s 145c <CstLoadBackdrop+0x108>
      get2bytes(fp);
    144c:	   |  /--|-> move.l 160(sp),-(sp)
    1450:	   |  |  |   jsr 6bc <get2bytes>
    1456:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1458:	   |  |  |   addq.l #1,144(sp)
    145c:	   |  |  \-> moveq #31,d2
    145e:	   |  |      cmp.l 144(sp),d2
    1462:	   |  \----- bge.s 144c <CstLoadBackdrop+0xf8>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1464:	   \-------> moveq #0,d0
    1466:	             move.w 118(sp),d0
    146a:	             move.l d0,100(sp)
    146e:	             moveq #2,d0
    1470:	             move.l d0,96(sp)
    1474:	             move.l 187a2 <SysBase>,d0
    147a:	             movea.l d0,a6
    147c:	             move.l 100(sp),d0
    1480:	             move.l 96(sp),d1
    1484:	             jsr -684(a6)
    1488:	             move.l d0,92(sp)
    148c:	             move.l 92(sp),d0
    1490:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1494:	         /-- bne.s 14a4 <CstLoadBackdrop+0x150>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1496:	         |   pea 1570f <PutChar+0x119>
    149c:	         |   jsr 14b22 <KPrintF>
    14a2:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    14a4:	         \-> moveq #0,d0
    14a6:	             move.w 120(sp),d0
    14aa:	             move.l d0,84(sp)
    14ae:	             moveq #2,d2
    14b0:	             move.l d2,80(sp)
    14b4:	             move.l 187a2 <SysBase>,d0
    14ba:	             movea.l d0,a6
    14bc:	             move.l 84(sp),d0
    14c0:	             move.l 80(sp),d1
    14c4:	             jsr -684(a6)
    14c8:	             move.l d0,76(sp)
    14cc:	             move.l 76(sp),d0
    14d0:	             move.l d0,72(sp)
  if( !tmpmask)
    14d4:	         /-- bne.s 14e4 <CstLoadBackdrop+0x190>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    14d6:	         |   pea 15745 <PutChar+0x14f>
    14dc:	         |   jsr 14b22 <KPrintF>
    14e2:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    14e4:	         \-> move.w 128(sp),d0
    14e8:	             movea.w d0,a1
    14ea:	             move.w 130(sp),d0
    14ee:	             movea.w d0,a0
    14f0:	             clr.l -(sp)
    14f2:	             pea 5 <_start+0x5>
    14f6:	             move.l a1,-(sp)
    14f8:	             move.l a0,-(sp)
    14fa:	             pea 15779 <PutChar+0x183>
    1500:	             move.l 108(sp),-(sp)
    1504:	             jsr 14c0a <debug_register_bitmap>
    150a:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    150e:	             move.w 128(sp),d0
    1512:	             movea.w d0,a1
    1514:	             move.w 130(sp),d0
    1518:	             movea.w d0,a0
    151a:	             clr.l -(sp)
    151c:	             pea 1 <_start+0x1>
    1520:	             move.l a1,-(sp)
    1522:	             move.l a0,-(sp)
    1524:	             pea 15787 <PutChar+0x191>
    152a:	             move.l 108(sp),-(sp)
    152e:	             jsr 14c0a <debug_register_bitmap>
    1534:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1538:	             move.l 160(sp),68(sp)
    153e:	             move.l 88(sp),64(sp)
    1544:	             moveq #2,d0
    1546:	             move.l d0,60(sp)
    154a:	             move.w 118(sp),d0
    154e:	             lsr.w #1,d0
    1550:	             move.w d0,d0
    1552:	             andi.l #65535,d0
    1558:	             move.l d0,56(sp)
    155c:	             move.l 187aa <DOSBase>,d0
    1562:	             movea.l d0,a6
    1564:	             move.l 68(sp),d1
    1568:	             move.l 64(sp),d2
    156c:	             move.l 60(sp),d3
    1570:	             move.l 56(sp),d4
    1574:	             jsr -324(a6)
    1578:	             move.l d0,52(sp)
    157c:	             move.l 52(sp),d0
    1580:	             move.w d0,50(sp)
  if(!count) {
    1584:	         /-- bne.s 1598 <CstLoadBackdrop+0x244>
    KPrintF("Error while reading stream");
    1586:	         |   pea 15793 <PutChar+0x19d>
    158c:	         |   jsr 14b22 <KPrintF>
    1592:	         |   addq.l #4,sp
    return;
    1594:	   /-----|-- bra.w 17a2 <CstLoadBackdrop+0x44e>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1598:	   |     \-> move.l 160(sp),46(sp)
    159e:	   |         move.l 72(sp),42(sp)
    15a4:	   |         moveq #2,d2
    15a6:	   |         move.l d2,38(sp)
    15aa:	   |         move.w 120(sp),d0
    15ae:	   |         lsr.w #1,d0
    15b0:	   |         move.w d0,d0
    15b2:	   |         andi.l #65535,d0
    15b8:	   |         move.l d0,34(sp)
    15bc:	   |         move.l 187aa <DOSBase>,d0
    15c2:	   |         movea.l d0,a6
    15c4:	   |         move.l 46(sp),d1
    15c8:	   |         move.l 42(sp),d2
    15cc:	   |         move.l 38(sp),d3
    15d0:	   |         move.l 34(sp),d4
    15d4:	   |         jsr -324(a6)
    15d8:	   |         move.l d0,30(sp)
    15dc:	   |         move.l 30(sp),d0
    15e0:	   |         move.w d0,50(sp)
   

  if(!count) {
    15e4:	   |     /-- bne.s 15f8 <CstLoadBackdrop+0x2a4>
    KPrintF("Error while reading stream");
    15e6:	   |     |   pea 15793 <PutChar+0x19d>
    15ec:	   |     |   jsr 14b22 <KPrintF>
    15f2:	   |     |   addq.l #4,sp
    return;
    15f4:	   +-----|-- bra.w 17a2 <CstLoadBackdrop+0x44e>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    15f8:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1600:	   |         move.l 186c4 <CstBackDrop>,d0
    1606:	   |         move.l d0,140(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    160a:	   |         move.l 168(sp),d0
    160e:	   |         move.w d0,d1
    1610:	   |         muls.w 122(sp),d1
    1614:	   |         move.l 164(sp),d0
    1618:	   |     /-- bpl.s 161c <CstLoadBackdrop+0x2c8>
    161a:	   |     |   addq.l #7,d0
    161c:	   |     \-> asr.l #3,d0
    161e:	   |         move.l d0,d0
    1620:	   |         movea.w d1,a0
    1622:	   |         adda.w d0,a0
    1624:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1628:	   |         moveq #0,d0
    162a:	   |         move.w 24(sp),d0
    162e:	   |         add.l d0,140(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    1632:	   |         pea 157ae <PutChar+0x1b8>
    1638:	   |         jsr 14b22 <KPrintF>
    163e:	   |         addq.l #4,sp


  WaitBlit();
    1640:	   |         move.l 187ae <GfxBase>,d0
    1646:	   |         movea.l d0,a6
    1648:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    164c:	   |         movea.l 26(sp),a0
    1650:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1656:	   |         movea.l 26(sp),a0
    165a:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    1660:	   |         movea.l 26(sp),a0
    1664:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    166a:	   |         movea.l 26(sp),a0
    166e:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    1674:	   |         move.w 122(sp),d0
    1678:	   |         sub.w 126(sp),d0
    167c:	   |         movea.l 26(sp),a0
    1680:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    1684:	   |         move.w 122(sp),d0
    1688:	   |         sub.w 126(sp),d0
    168c:	   |         movea.l 26(sp),a0
    1690:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    1694:	   |         movea.l 26(sp),a0
    1698:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    169e:	   |         movea.l 26(sp),a0
    16a2:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    16a8:	   |         move.l 88(sp),136(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    16ae:	   |         clr.l 132(sp)
    16b2:	   |     /-- bra.s 1714 <CstLoadBackdrop+0x3c0>
  {    
    custom->bltapt = (APTR) tmpmask;
    16b4:	   |  /--|-> movea.l 26(sp),a0
    16b8:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    16be:	   |  |  |   move.l 136(sp),d0
    16c2:	   |  |  |   movea.l 26(sp),a0
    16c6:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    16ca:	   |  |  |   move.l 140(sp),d0
    16ce:	   |  |  |   movea.l 26(sp),a0
    16d2:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    16d6:	   |  |  |   move.l 140(sp),d0
    16da:	   |  |  |   movea.l 26(sp),a0
    16de:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    16e2:	   |  |  |   move.w 128(sp),d0
    16e6:	   |  |  |   lsl.w #6,d0
    16e8:	   |  |  |   add.w 124(sp),d0
    16ec:	   |  |  |   movea.l 26(sp),a0
    16f0:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    16f4:	   |  |  |   moveq #0,d0
    16f6:	   |  |  |   move.w 120(sp),d0
    16fa:	   |  |  |   add.l d0,136(sp)
    backdropcursor += CstBackdropSizePlane;
    16fe:	   |  |  |   move.w 186c2 <CstBackdropSizePlane>,d0
    1704:	   |  |  |   move.w d0,d0
    1706:	   |  |  |   andi.l #65535,d0
    170c:	   |  |  |   add.l d0,140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1710:	   |  |  |   addq.l #1,132(sp)
    1714:	   |  |  \-> moveq #4,d0
    1716:	   |  |      cmp.l 132(sp),d0
    171a:	   |  \----- bge.s 16b4 <CstLoadBackdrop+0x360>
  }    

  WaitBlit();
    171c:	   |         move.l 187ae <GfxBase>,d0
    1722:	   |         movea.l d0,a6
    1724:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    1728:	   |         pea 157cd <PutChar+0x1d7>
    172e:	   |         jsr 14b22 <KPrintF>
    1734:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1736:	   |         move.l 88(sp),20(sp)
    173c:	   |         move.l 187a2 <SysBase>,d0
    1742:	   |         movea.l d0,a6
    1744:	   |         movea.l 20(sp),a1
    1748:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    174c:	   |         move.l 72(sp),16(sp)
    1752:	   |         move.l 187a2 <SysBase>,d0
    1758:	   |         movea.l d0,a6
    175a:	   |         movea.l 16(sp),a1
    175e:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1762:	   |         move.w #2,186cc <CstApplyBackDropCounter>
  CstBackDropHeightWrite = winHeight;
    176a:	   |         move.l 186fa <winHeight>,d0
    1770:	   |         move.l d0,d0
    1772:	   |         move.w d0,186d4 <CstBackDropHeightWrite>
  CstBackDropWidthWrite = winWidth/8;
    1778:	   |         move.l 186f6 <winWidth>,d0
    177e:	   |         lsr.l #3,d0
    1780:	   |         move.l d0,d0
    1782:	   |         move.w d0,186d2 <CstBackDropWidthWrite>
  CstBackDropStartXWrite = 0;
    1788:	   |         clr.w 186ce <CstBackDropStartXWrite>
  CstBackDropStartYWrite = 0;
    178e:	   |         clr.w 186d0 <CstBackDropStartYWrite>

  KPrintF("CstLoadBackDrop: Finished");
    1794:	   |         pea 157ed <PutChar+0x1f7>
    179a:	   |         jsr 14b22 <KPrintF>
    17a0:	   |         addq.l #4,sp

}
    17a2:	   \-------> movem.l (sp)+,d2-d4/a6
    17a6:	             lea 140(sp),sp
    17aa:	             rts

000017ac <CstRestoreScreen>:

ULONG test = 0;

void CstRestoreScreen()
{
    17ac:	                lea -28(sp),sp
    17b0:	                move.l a6,-(sp)
    17b2:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    17b4:	                move.l #14675968,16(sp)

  UWORD *cursor = CstDrawBufferCleanupCursor;
    17bc:	                move.l 186e2 <CstDrawBufferCleanupCursor>,32(sp)
  if(!*cursor || !CstDrawBuffer) {
    17c4:	                movea.l 32(sp),a0
    17c8:	                move.w (a0),d0
    17ca:	/-------------- beq.w 197e <CstRestoreScreen+0x1d2>
    17ce:	|               move.l 186da <CstDrawBuffer>,d0
    17d4:	+-------------- beq.w 197e <CstRestoreScreen+0x1d2>
    return;
  } 

  WaitBlit();
    17d8:	|               move.l 187ae <GfxBase>,d0
    17de:	|               movea.l d0,a6
    17e0:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    17e4:	|               movea.l 16(sp),a0
    17e8:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    17ee:	|               movea.l 16(sp),a0
    17f2:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    17f8:	|               movea.l 16(sp),a0
    17fc:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1802:	|     /-------- bra.w 196a <CstRestoreScreen+0x1be>
  {    
    UWORD width = *cursor++;
    1806:	|  /--|-------> move.l 32(sp),d0
    180a:	|  |  |         move.l d0,d1
    180c:	|  |  |         addq.l #2,d1
    180e:	|  |  |         move.l d1,32(sp)
    1812:	|  |  |         movea.l d0,a0
    1814:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1818:	|  |  |         move.l 32(sp),d0
    181c:	|  |  |         move.l d0,d1
    181e:	|  |  |         addq.l #2,d1
    1820:	|  |  |         move.l d1,32(sp)
    1824:	|  |  |         movea.l d0,a0
    1826:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    182a:	|  |  |         move.l 32(sp),d0
    182e:	|  |  |         move.l d0,d1
    1830:	|  |  |         addq.l #2,d1
    1832:	|  |  |         move.l d1,32(sp)
    1836:	|  |  |         movea.l d0,a0
    1838:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    183c:	|  |  |         move.l 32(sp),d0
    1840:	|  |  |         move.l d0,d1
    1842:	|  |  |         addq.l #2,d1
    1844:	|  |  |         move.l d1,32(sp)
    1848:	|  |  |         movea.l d0,a0
    184a:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    184e:	|  |  |         move.l 186f6 <winWidth>,d0
    1854:	|  |  |         lsr.l #3,d0
    1856:	|  |  |         move.l d0,d1
    1858:	|  |  |         move.w 14(sp),d0
    185c:	|  |  |         add.w d0,d0
    185e:	|  |  |         sub.w d0,d1
    1860:	|  |  |         movea.l 16(sp),a0
    1864:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1868:	|  |  |         move.l 186f6 <winWidth>,d0
    186e:	|  |  |         lsr.l #3,d0
    1870:	|  |  |         move.l d0,d1
    1872:	|  |  |         move.w 14(sp),d0
    1876:	|  |  |         add.w d0,d0
    1878:	|  |  |         sub.w d0,d1
    187a:	|  |  |         movea.l 16(sp),a0
    187e:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    1882:	|  |  |         moveq #0,d0
    1884:	|  |  |         move.w 8(sp),d0
    1888:	|  |  |         move.l 186f6 <winWidth>,d1
    188e:	|  |  |         move.l d1,-(sp)
    1890:	|  |  |         move.l d0,-(sp)
    1892:	|  |  |         jsr 154e0 <__mulsi3>
    1898:	|  |  |         addq.l #8,sp
    189a:	|  |  |         move.l d0,d1
    189c:	|  |  |         lsr.l #3,d1
    189e:	|  |  |         move.l 186c4 <CstBackDrop>,d0
    18a4:	|  |  |         add.l d0,d1
    18a6:	|  |  |         moveq #0,d0
    18a8:	|  |  |         move.w 10(sp),d0
    18ac:	|  |  |         move.l d1,d2
    18ae:	|  |  |         add.l d0,d2
    18b0:	|  |  |         move.l d2,28(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    18b4:	|  |  |         moveq #0,d0
    18b6:	|  |  |         move.w 8(sp),d0
    18ba:	|  |  |         move.l 186f6 <winWidth>,d1
    18c0:	|  |  |         move.l d1,-(sp)
    18c2:	|  |  |         move.l d0,-(sp)
    18c4:	|  |  |         jsr 154e0 <__mulsi3>
    18ca:	|  |  |         addq.l #8,sp
    18cc:	|  |  |         move.l d0,d1
    18ce:	|  |  |         lsr.l #3,d1
    18d0:	|  |  |         move.l 186da <CstDrawBuffer>,d0
    18d6:	|  |  |         add.l d0,d1
    18d8:	|  |  |         moveq #0,d0
    18da:	|  |  |         move.w 10(sp),d0
    18de:	|  |  |         move.l d1,d2
    18e0:	|  |  |         add.l d0,d2
    18e2:	|  |  |         move.l d2,24(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    18e6:	|  |  |         clr.l 20(sp)
    18ea:	|  |  |     /-- bra.s 1962 <CstRestoreScreen+0x1b6>
    {
      custom->bltapt = (APTR) bltapt;
    18ec:	|  |  |  /--|-> move.l 28(sp),d0
    18f0:	|  |  |  |  |   movea.l 16(sp),a0
    18f4:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    18f8:	|  |  |  |  |   move.l 24(sp),d0
    18fc:	|  |  |  |  |   movea.l 16(sp),a0
    1900:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1904:	|  |  |  |  |   move.w 12(sp),d0
    1908:	|  |  |  |  |   lsl.w #6,d0
    190a:	|  |  |  |  |   add.w 14(sp),d0
    190e:	|  |  |  |  |   movea.l 16(sp),a0
    1912:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1916:	|  |  |  |  |   move.l 186f6 <winWidth>,d0
    191c:	|  |  |  |  |   lsr.l #3,d0
    191e:	|  |  |  |  |   move.l 186fa <winHeight>,d1
    1924:	|  |  |  |  |   move.l d1,-(sp)
    1926:	|  |  |  |  |   move.l d0,-(sp)
    1928:	|  |  |  |  |   jsr 154e0 <__mulsi3>
    192e:	|  |  |  |  |   addq.l #8,sp
    1930:	|  |  |  |  |   add.l d0,28(sp)
      bltdpt += winWidth/8*winHeight;
    1934:	|  |  |  |  |   move.l 186f6 <winWidth>,d0
    193a:	|  |  |  |  |   lsr.l #3,d0
    193c:	|  |  |  |  |   move.l 186fa <winHeight>,d1
    1942:	|  |  |  |  |   move.l d1,-(sp)
    1944:	|  |  |  |  |   move.l d0,-(sp)
    1946:	|  |  |  |  |   jsr 154e0 <__mulsi3>
    194c:	|  |  |  |  |   addq.l #8,sp
    194e:	|  |  |  |  |   add.l d0,24(sp)
      WaitBlit();
    1952:	|  |  |  |  |   move.l 187ae <GfxBase>,d0
    1958:	|  |  |  |  |   movea.l d0,a6
    195a:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    195e:	|  |  |  |  |   addq.l #1,20(sp)
    1962:	|  |  |  |  \-> moveq #4,d0
    1964:	|  |  |  |      cmp.l 20(sp),d0
    1968:	|  |  |  \----- bge.s 18ec <CstRestoreScreen+0x140>
  while(*cursor)
    196a:	|  |  \-------> movea.l 32(sp),a0
    196e:	|  |            move.w (a0),d0
    1970:	|  \----------- bne.w 1806 <CstRestoreScreen+0x5a>
    }  
  }
  *CstDrawBufferCleanupCursor = 0;
    1974:	|               movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    197a:	|               clr.w (a0)
    197c:	|           /-- bra.s 1980 <CstRestoreScreen+0x1d4>
    return;
    197e:	\-----------|-> nop
}
    1980:	            \-> move.l (sp)+,d2
    1982:	                movea.l (sp)+,a6
    1984:	                lea 28(sp),sp
    1988:	                rts

0000198a <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, WORD x, WORD y, UWORD destinationtype)
{
    198a:	             lea -72(sp),sp
    198e:	             movem.l d2-d3/a6,-(sp)
    1992:	             movea.l 92(sp),a0
    1996:	             move.l 96(sp),d1
    199a:	             move.l 100(sp),d0
    199e:	             movea.w a0,a0
    19a0:	             move.w a0,16(sp)
    19a4:	             move.w d1,d1
    19a6:	             move.w d1,14(sp)
    19aa:	             move.w d0,d0
    19ac:	             move.w d0,12(sp)

  UWORD *destination;
  switch(destinationtype)
    19b0:	             moveq #0,d0
    19b2:	             move.w 12(sp),d0
    19b6:	             moveq #1,d1
    19b8:	             cmp.l d0,d1
    19ba:	         /-- beq.s 19c4 <CstScaleSprite+0x3a>
    19bc:	         |   moveq #2,d2
    19be:	         |   cmp.l d0,d2
    19c0:	      /--|-- beq.s 19ce <CstScaleSprite+0x44>
    19c2:	   /--|--|-- bra.s 1a24 <CstScaleSprite+0x9a>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    19c4:	   |  |  \-> move.l 186da <CstDrawBuffer>,80(sp)
      break;
    19cc:	   +--|----- bra.s 1a24 <CstScaleSprite+0x9a>
    case BACKDROP:
      CstApplyBackDropCounter = 2;
    19ce:	   |  \----> move.w #2,186cc <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;
    19d6:	   |         move.l 186c4 <CstBackDrop>,80(sp)
      CstBackDropStartXWrite = (x / 16) * 2;
    19de:	   |         move.w 16(sp),d0
    19e2:	   |     /-- bpl.s 19e8 <CstScaleSprite+0x5e>
    19e4:	   |     |   addi.w #15,d0
    19e8:	   |     \-> asr.w #4,d0
    19ea:	   |         add.w d0,d0
    19ec:	   |         move.w d0,186ce <CstBackDropStartXWrite>
      CstBackDropStartYWrite = y;
    19f2:	   |         move.w 14(sp),d0
    19f6:	   |         move.w d0,186d0 <CstBackDropStartYWrite>
      CstBackDropHeightWrite = single->height;
    19fc:	   |         movea.l 88(sp),a0
    1a00:	   |         move.l 4(a0),d0
    1a04:	   |         move.l d0,d0
    1a06:	   |         move.w d0,186d4 <CstBackDropHeightWrite>
      CstBackDropWidthWrite = single->width/8+2; //Some extra width in case the write operation is shifted
    1a0c:	   |         movea.l 88(sp),a0
    1a10:	   |         move.l (a0),d0
    1a12:	   |     /-- bpl.s 1a16 <CstScaleSprite+0x8c>
    1a14:	   |     |   addq.l #7,d0
    1a16:	   |     \-> asr.l #3,d0
    1a18:	   |         move.l d0,d0
    1a1a:	   |         addq.w #2,d0
    1a1c:	   |         move.w d0,186d2 <CstBackDropWidthWrite>
      break;
    1a22:	   |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    1a24:	   \-------> tst.w 14(sp)
    1a28:	      /----- bge.s 1a70 <CstScaleSprite+0xe6>
    if(y + single->height < 0) {
    1a2a:	      |      movea.w 14(sp),a1
    1a2e:	      |      movea.l 88(sp),a0
    1a32:	      |      move.l 4(a0),d0
    1a36:	      |      add.l a1,d0
    1a38:	      |  /-- bpl.s 1a4c <CstScaleSprite+0xc2>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1a3a:	      |  |   pea 15807 <PutChar+0x211>
    1a40:	      |  |   jsr 14b22 <KPrintF>
    1a46:	      |  |   addq.l #4,sp
      return;
    1a48:	/-----|--|-- bra.w 22a8 <CstScaleSprite+0x91e>
    }
    ystartdst = 0;
    1a4c:	|     |  \-> clr.l 44(sp)
    ystartsrc = y*-1;
    1a50:	|     |      move.w 14(sp),d0
    1a54:	|     |      ext.l d0
    1a56:	|     |      neg.l d0
    1a58:	|     |      move.l d0,40(sp)
    blitheight = single->height+y;
    1a5c:	|     |      movea.l 88(sp),a0
    1a60:	|     |      move.l 4(a0),d0
    1a64:	|     |      movea.w 14(sp),a0
    1a68:	|     |      add.l a0,d0
    1a6a:	|     |      move.l d0,36(sp)
    1a6e:	|  /--|----- bra.s 1ae2 <CstScaleSprite+0x158>
  } else if(y+single->height > (int) winHeight) {
    1a70:	|  |  \----> movea.w 14(sp),a1
    1a74:	|  |         movea.l 88(sp),a0
    1a78:	|  |         move.l 4(a0),d0
    1a7c:	|  |         move.l a1,d1
    1a7e:	|  |         add.l d0,d1
    1a80:	|  |         move.l 186fa <winHeight>,d0
    1a86:	|  |         cmp.l d1,d0
    1a88:	|  |  /----- bge.s 1aca <CstScaleSprite+0x140>
    if(y  > (int) winHeight) {
    1a8a:	|  |  |      movea.w 14(sp),a0
    1a8e:	|  |  |      move.l 186fa <winHeight>,d0
    1a94:	|  |  |      cmp.l a0,d0
    1a96:	|  |  |  /-- bge.s 1aaa <CstScaleSprite+0x120>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1a98:	|  |  |  |   pea 15807 <PutChar+0x211>
    1a9e:	|  |  |  |   jsr 14b22 <KPrintF>
    1aa4:	|  |  |  |   addq.l #4,sp
      return;
    1aa6:	+--|--|--|-- bra.w 22a8 <CstScaleSprite+0x91e>
    }
    ystartdst = y;
    1aaa:	|  |  |  \-> movea.w 14(sp),a0
    1aae:	|  |  |      move.l a0,44(sp)
    ystartsrc = 0;
    1ab2:	|  |  |      clr.l 40(sp)
    blitheight = winHeight-y;
    1ab6:	|  |  |      move.l 186fa <winHeight>,d0
    1abc:	|  |  |      movea.w 14(sp),a0
    1ac0:	|  |  |      move.l d0,d1
    1ac2:	|  |  |      sub.l a0,d1
    1ac4:	|  |  |      move.l d1,36(sp)
    1ac8:	|  +--|----- bra.s 1ae2 <CstScaleSprite+0x158>
  } else {
    ystartdst = y;
    1aca:	|  |  \----> movea.w 14(sp),a0
    1ace:	|  |         move.l a0,44(sp)
    ystartsrc = 0;
    1ad2:	|  |         clr.l 40(sp)
    blitheight = single->height;
    1ad6:	|  |         movea.l 88(sp),a0
    1ada:	|  |         move.l 4(a0),d0
    1ade:	|  |         move.l d0,36(sp)
  }

  if( x < 0) { //Leftmost part outside screen
    1ae2:	|  \-------> tst.w 16(sp)
    1ae6:	|     /----- bge.w 1cd2 <CstScaleSprite+0x348>
    if(x + single->width < 0) {
    1aea:	|     |      movea.w 16(sp),a1
    1aee:	|     |      movea.l 88(sp),a0
    1af2:	|     |      move.l (a0),d0
    1af4:	|     |      add.l a1,d0
    1af6:	|     |  /-- bpl.s 1b0a <CstScaleSprite+0x180>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1af8:	|     |  |   pea 15807 <PutChar+0x211>
    1afe:	|     |  |   jsr 14b22 <KPrintF>
    1b04:	|     |  |   addq.l #4,sp
      return;
    1b06:	+-----|--|-- bra.w 22a8 <CstScaleSprite+0x91e>
    }
    extrawords = 1;
    1b0a:	|     |  \-> move.w #1,78(sp)
    cutwordssource = (x*-1)/16; 
    1b10:	|     |      move.w 16(sp),d0
    1b14:	|     |  /-- bpl.s 1b1a <CstScaleSprite+0x190>
    1b16:	|     |  |   addi.w #15,d0
    1b1a:	|     |  \-> asr.w #4,d0
    1b1c:	|     |      neg.w d0
    1b1e:	|     |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    1b22:	|     |      move.w 16(sp),d0
    1b26:	|     |      ext.l d0
    1b28:	|     |      neg.l d0
    1b2a:	|     |      andi.l #-2147483633,d0
    1b30:	|     |  /-- bpl.s 1b3a <CstScaleSprite+0x1b0>
    1b32:	|     |  |   subq.l #1,d0
    1b34:	|     |  |   moveq #-16,d1
    1b36:	|     |  |   or.l d1,d0
    1b38:	|     |  |   addq.l #1,d0
    1b3a:	|     |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1b3e:	|     |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    1b42:	|     |      movea.l 88(sp),a0
    1b46:	|     |      move.l 24(a0),d0
    1b4a:	|     |      move.l d0,d2
    1b4c:	|     |      moveq #0,d0
    1b4e:	|     |      move.w 76(sp),d0
    1b52:	|     |      add.l d0,d0
    1b54:	|     |      move.l d0,d3
    1b56:	|     |      movea.l 88(sp),a0
    1b5a:	|     |      move.l (a0),d0
    1b5c:	|     |  /-- bpl.s 1b60 <CstScaleSprite+0x1d6>
    1b5e:	|     |  |   addq.l #7,d0
    1b60:	|     |  \-> asr.l #3,d0
    1b62:	|     |      movea.l 88(sp),a0
    1b66:	|     |      move.l 4(a0),d1
    1b6a:	|     |      move.l d1,-(sp)
    1b6c:	|     |      move.l d0,-(sp)
    1b6e:	|     |      jsr 154e0 <__mulsi3>
    1b74:	|     |      addq.l #8,sp
    1b76:	|     |      move.l d0,d1
    1b78:	|     |      move.l d1,d0
    1b7a:	|     |      add.l d0,d0
    1b7c:	|     |      add.l d0,d0
    1b7e:	|     |      add.l d1,d0
    1b80:	|     |      add.l d3,d0
    1b82:	|     |      add.l d0,d2
    1b84:	|     |      movea.l 88(sp),a0
    1b88:	|     |      move.l (a0),d0
    1b8a:	|     |      move.l 40(sp),-(sp)
    1b8e:	|     |      move.l d0,-(sp)
    1b90:	|     |      jsr 154e0 <__mulsi3>
    1b96:	|     |      addq.l #8,sp
    1b98:	|     |      lsr.l #3,d0
    1b9a:	|     |      move.l d2,d1
    1b9c:	|     |      add.l d0,d1
    1b9e:	|     |      move.l d1,68(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    1ba2:	|     |      movea.l 88(sp),a0
    1ba6:	|     |      move.l 24(a0),d0
    1baa:	|     |      move.l d0,d1
    1bac:	|     |      moveq #0,d0
    1bae:	|     |      move.w 76(sp),d0
    1bb2:	|     |      add.l d0,d0
    1bb4:	|     |      move.l d1,d2
    1bb6:	|     |      add.l d0,d2
    1bb8:	|     |      movea.l 88(sp),a0
    1bbc:	|     |      move.l (a0),d0
    1bbe:	|     |      move.l 40(sp),-(sp)
    1bc2:	|     |      move.l d0,-(sp)
    1bc4:	|     |      jsr 154e0 <__mulsi3>
    1bca:	|     |      addq.l #8,sp
    1bcc:	|     |      lsr.l #3,d0
    1bce:	|     |      move.l d2,d1
    1bd0:	|     |      add.l d0,d1
    1bd2:	|     |      move.l d1,64(sp)
    bltcpt = ((ULONG) CstBackDrop) + ystartdst*winWidth/8 - 2;
    1bd6:	|     |      move.l 186f6 <winWidth>,d0
    1bdc:	|     |      move.l 44(sp),-(sp)
    1be0:	|     |      move.l d0,-(sp)
    1be2:	|     |      jsr 154e0 <__mulsi3>
    1be8:	|     |      addq.l #8,sp
    1bea:	|     |      move.l d0,d1
    1bec:	|     |      lsr.l #3,d1
    1bee:	|     |      move.l 186c4 <CstBackDrop>,d0
    1bf4:	|     |      add.l d1,d0
    1bf6:	|     |      move.l d0,d2
    1bf8:	|     |      subq.l #2,d2
    1bfa:	|     |      move.l d2,60(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1bfe:	|     |      move.l 186f6 <winWidth>,d0
    1c04:	|     |      move.l 44(sp),-(sp)
    1c08:	|     |      move.l d0,-(sp)
    1c0a:	|     |      jsr 154e0 <__mulsi3>
    1c10:	|     |      addq.l #8,sp
    1c12:	|     |      lsr.l #3,d0
    1c14:	|     |      move.l 80(sp),d1
    1c18:	|     |      add.l d1,d0
    1c1a:	|     |      move.l d0,d1
    1c1c:	|     |      subq.l #2,d1
    1c1e:	|     |      move.l d1,56(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    1c22:	|     |      moveq #0,d0
    1c24:	|     |      move.w 74(sp),d0
    1c28:	|     |      moveq #16,d1
    1c2a:	|     |      sub.l d0,d1
    1c2c:	|     |      move.l d1,d0
    1c2e:	|     |      moveq #12,d2
    1c30:	|     |      lsl.l d2,d0
    1c32:	|     |      addi.l #4042,d0
    1c38:	|     |      move.l d0,52(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    1c3c:	|     |      moveq #0,d0
    1c3e:	|     |      move.w 74(sp),d0
    1c42:	|     |      moveq #16,d1
    1c44:	|     |      sub.l d0,d1
    1c46:	|     |      move.l d1,d0
    1c48:	|     |      moveq #12,d1
    1c4a:	|     |      lsl.l d1,d0
    1c4c:	|     |      move.l d0,48(sp)
    if( destinationtype == SCREEN)
    1c50:	|     |      cmpi.w #1,12(sp)
    1c56:	|  /--|----- bne.w 20c8 <CstScaleSprite+0x73e>
    {
      *CstDrawBufferCleanupCursor++ = single->width/16+cutwordssource; //Width in X Bytes
    1c5a:	|  |  |      movea.l 88(sp),a0
    1c5e:	|  |  |      move.l (a0),d0
    1c60:	|  |  |      movea.l d0,a0
    1c62:	|  |  |      cmpa.w #0,a0
    1c66:	|  |  |  /-- bge.s 1c6c <CstScaleSprite+0x2e2>
    1c68:	|  |  |  |   lea 15(a0),a0
    1c6c:	|  |  |  \-> move.l a0,d0
    1c6e:	|  |  |      asr.l #4,d0
    1c70:	|  |  |      move.l d0,d0
    1c72:	|  |  |      movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    1c78:	|  |  |      move.l a0,d1
    1c7a:	|  |  |      addq.l #2,d1
    1c7c:	|  |  |      move.l d1,186e2 <CstDrawBufferCleanupCursor>
    1c82:	|  |  |      add.w 76(sp),d0
    1c86:	|  |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = blitheight; //Height
    1c88:	|  |  |      movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    1c8e:	|  |  |      move.l a0,d0
    1c90:	|  |  |      addq.l #2,d0
    1c92:	|  |  |      move.l d0,186e2 <CstDrawBufferCleanupCursor>
    1c98:	|  |  |      move.l 36(sp),d0
    1c9c:	|  |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = 0; //X Start in Bytes
    1c9e:	|  |  |      movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    1ca4:	|  |  |      move.l a0,d0
    1ca6:	|  |  |      addq.l #2,d0
    1ca8:	|  |  |      move.l d0,186e2 <CstDrawBufferCleanupCursor>
    1cae:	|  |  |      clr.w (a0)
      *CstDrawBufferCleanupCursor++ = ystartdst; //Y Start    
    1cb0:	|  |  |      movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    1cb6:	|  |  |      move.l a0,d0
    1cb8:	|  |  |      addq.l #2,d0
    1cba:	|  |  |      move.l d0,186e2 <CstDrawBufferCleanupCursor>
    1cc0:	|  |  |      move.l 44(sp),d0
    1cc4:	|  |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor = 0;
    1cc6:	|  |  |      movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    1ccc:	|  |  |      clr.w (a0)
    1cce:	|  +--|----- bra.w 20c8 <CstScaleSprite+0x73e>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen
    1cd2:	|  |  \----> movea.w 16(sp),a1
    1cd6:	|  |         movea.l 88(sp),a0
    1cda:	|  |         move.l (a0),d0
    1cdc:	|  |         move.l a1,d1
    1cde:	|  |         add.l d0,d1
    1ce0:	|  |         move.l 186f6 <winWidth>,d0
    1ce6:	|  |         cmp.l d1,d0
    1ce8:	|  |  /----- bge.w 1f00 <CstScaleSprite+0x576>
    if(x - single->width > (int) winWidth)
    1cec:	|  |  |      movea.w 16(sp),a1
    1cf0:	|  |  |      movea.l 88(sp),a0
    1cf4:	|  |  |      move.l (a0),d0
    1cf6:	|  |  |      move.l a1,d1
    1cf8:	|  |  |      sub.l d0,d1
    1cfa:	|  |  |      move.l 186f6 <winWidth>,d0
    1d00:	|  |  |      cmp.l d1,d0
    1d02:	|  |  |  /-- bge.s 1d16 <CstScaleSprite+0x38c>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1d04:	|  |  |  |   pea 15807 <PutChar+0x211>
    1d0a:	|  |  |  |   jsr 14b22 <KPrintF>
    1d10:	|  |  |  |   addq.l #4,sp
      return;
    1d12:	+--|--|--|-- bra.w 22a8 <CstScaleSprite+0x91e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    1d16:	|  |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    1d1a:	|  |  |      movea.w 16(sp),a1
    1d1e:	|  |  |      movea.l 88(sp),a0
    1d22:	|  |  |      move.l (a0),d0
    1d24:	|  |  |      add.l a1,d0
    1d26:	|  |  |      move.l d0,d1
    1d28:	|  |  |      move.l 186f6 <winWidth>,d0
    1d2e:	|  |  |      sub.l d0,d1
    1d30:	|  |  |      move.l d1,d0
    1d32:	|  |  |      lsr.l #4,d0
    1d34:	|  |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    1d38:	|  |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    1d3c:	|  |  |      move.w #-1,72(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    1d42:	|  |  |      movea.l 88(sp),a0
    1d46:	|  |  |      move.l 24(a0),d0
    1d4a:	|  |  |      move.l d0,d2
    1d4c:	|  |  |      movea.l 88(sp),a0
    1d50:	|  |  |      move.l (a0),d0
    1d52:	|  |  |  /-- bpl.s 1d56 <CstScaleSprite+0x3cc>
    1d54:	|  |  |  |   addq.l #7,d0
    1d56:	|  |  |  \-> asr.l #3,d0
    1d58:	|  |  |      movea.l 88(sp),a0
    1d5c:	|  |  |      move.l 4(a0),d1
    1d60:	|  |  |      move.l d1,-(sp)
    1d62:	|  |  |      move.l d0,-(sp)
    1d64:	|  |  |      jsr 154e0 <__mulsi3>
    1d6a:	|  |  |      addq.l #8,sp
    1d6c:	|  |  |      move.l d0,d1
    1d6e:	|  |  |      move.l d1,d0
    1d70:	|  |  |      add.l d0,d0
    1d72:	|  |  |      add.l d0,d0
    1d74:	|  |  |      add.l d1,d0
    1d76:	|  |  |      add.l d0,d2
    1d78:	|  |  |      movea.l 88(sp),a0
    1d7c:	|  |  |      move.l (a0),d0
    1d7e:	|  |  |      move.l 40(sp),-(sp)
    1d82:	|  |  |      move.l d0,-(sp)
    1d84:	|  |  |      jsr 154e0 <__mulsi3>
    1d8a:	|  |  |      addq.l #8,sp
    1d8c:	|  |  |      lsr.l #3,d0
    1d8e:	|  |  |      move.l d2,d1
    1d90:	|  |  |      add.l d0,d1
    1d92:	|  |  |      move.l d1,68(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    1d96:	|  |  |      movea.l 88(sp),a0
    1d9a:	|  |  |      move.l 24(a0),d0
    1d9e:	|  |  |      move.l d0,d2
    1da0:	|  |  |      movea.l 88(sp),a0
    1da4:	|  |  |      move.l (a0),d0
    1da6:	|  |  |      move.l 40(sp),-(sp)
    1daa:	|  |  |      move.l d0,-(sp)
    1dac:	|  |  |      jsr 154e0 <__mulsi3>
    1db2:	|  |  |      addq.l #8,sp
    1db4:	|  |  |      lsr.l #3,d0
    1db6:	|  |  |      move.l d2,d1
    1db8:	|  |  |      add.l d0,d1
    1dba:	|  |  |      move.l d1,64(sp)
    bltcpt = ((ULONG) CstBackDrop) + ystartdst*winWidth/8 + (x/16)*2;
    1dbe:	|  |  |      move.l 186f6 <winWidth>,d0
    1dc4:	|  |  |      move.l 44(sp),-(sp)
    1dc8:	|  |  |      move.l d0,-(sp)
    1dca:	|  |  |      jsr 154e0 <__mulsi3>
    1dd0:	|  |  |      addq.l #8,sp
    1dd2:	|  |  |      move.l d0,d1
    1dd4:	|  |  |      lsr.l #3,d1
    1dd6:	|  |  |      move.l 186c4 <CstBackDrop>,d0
    1ddc:	|  |  |      add.l d0,d1
    1dde:	|  |  |      move.w 16(sp),d0
    1de2:	|  |  |  /-- bpl.s 1de8 <CstScaleSprite+0x45e>
    1de4:	|  |  |  |   addi.w #15,d0
    1de8:	|  |  |  \-> asr.w #4,d0
    1dea:	|  |  |      movea.w d0,a0
    1dec:	|  |  |      move.l a0,d0
    1dee:	|  |  |      add.l a0,d0
    1df0:	|  |  |      move.l d1,d2
    1df2:	|  |  |      add.l d0,d2
    1df4:	|  |  |      move.l d2,60(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    1df8:	|  |  |      move.l 186f6 <winWidth>,d0
    1dfe:	|  |  |      move.l 44(sp),-(sp)
    1e02:	|  |  |      move.l d0,-(sp)
    1e04:	|  |  |      jsr 154e0 <__mulsi3>
    1e0a:	|  |  |      addq.l #8,sp
    1e0c:	|  |  |      lsr.l #3,d0
    1e0e:	|  |  |      move.l 80(sp),d1
    1e12:	|  |  |      add.l d0,d1
    1e14:	|  |  |      move.w 16(sp),d0
    1e18:	|  |  |  /-- bpl.s 1e1e <CstScaleSprite+0x494>
    1e1a:	|  |  |  |   addi.w #15,d0
    1e1e:	|  |  |  \-> asr.w #4,d0
    1e20:	|  |  |      movea.w d0,a0
    1e22:	|  |  |      move.l a0,d0
    1e24:	|  |  |      add.l a0,d0
    1e26:	|  |  |      move.l d1,d2
    1e28:	|  |  |      add.l d0,d2
    1e2a:	|  |  |      move.l d2,56(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    1e2e:	|  |  |      movea.l 88(sp),a0
    1e32:	|  |  |      move.l (a0),d0
    1e34:	|  |  |      andi.l #-2147483633,d0
    1e3a:	|  |  |  /-- bpl.s 1e44 <CstScaleSprite+0x4ba>
    1e3c:	|  |  |  |   subq.l #1,d0
    1e3e:	|  |  |  |   moveq #-16,d1
    1e40:	|  |  |  |   or.l d1,d0
    1e42:	|  |  |  |   addq.l #1,d0
    1e44:	|  |  |  \-> moveq #12,d2
    1e46:	|  |  |      lsl.l d2,d0
    1e48:	|  |  |      addi.l #4042,d0
    1e4e:	|  |  |      move.l d0,52(sp)
    bltcon1 = ((single->width%16) << 12);
    1e52:	|  |  |      movea.l 88(sp),a0
    1e56:	|  |  |      move.l (a0),d0
    1e58:	|  |  |      andi.l #-2147483633,d0
    1e5e:	|  |  |  /-- bpl.s 1e68 <CstScaleSprite+0x4de>
    1e60:	|  |  |  |   subq.l #1,d0
    1e62:	|  |  |  |   moveq #-16,d1
    1e64:	|  |  |  |   or.l d1,d0
    1e66:	|  |  |  |   addq.l #1,d0
    1e68:	|  |  |  \-> moveq #12,d2
    1e6a:	|  |  |      lsl.l d2,d0
    1e6c:	|  |  |      move.l d0,48(sp)
    if( destinationtype == SCREEN)
    1e70:	|  |  |      cmpi.w #1,12(sp)
    1e76:	|  +--|----- bne.w 20c8 <CstScaleSprite+0x73e>
    {
      *CstDrawBufferCleanupCursor++ = single->width/16+cutwordssource; //Width in X Bytes
    1e7a:	|  |  |      movea.l 88(sp),a0
    1e7e:	|  |  |      move.l (a0),d0
    1e80:	|  |  |      movea.l d0,a0
    1e82:	|  |  |      cmpa.w #0,a0
    1e86:	|  |  |  /-- bge.s 1e8c <CstScaleSprite+0x502>
    1e88:	|  |  |  |   lea 15(a0),a0
    1e8c:	|  |  |  \-> move.l a0,d0
    1e8e:	|  |  |      asr.l #4,d0
    1e90:	|  |  |      move.l d0,d0
    1e92:	|  |  |      movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    1e98:	|  |  |      move.l a0,d1
    1e9a:	|  |  |      addq.l #2,d1
    1e9c:	|  |  |      move.l d1,186e2 <CstDrawBufferCleanupCursor>
    1ea2:	|  |  |      add.w 76(sp),d0
    1ea6:	|  |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = blitheight; //Height
    1ea8:	|  |  |      movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    1eae:	|  |  |      move.l a0,d0
    1eb0:	|  |  |      addq.l #2,d0
    1eb2:	|  |  |      move.l d0,186e2 <CstDrawBufferCleanupCursor>
    1eb8:	|  |  |      move.l 36(sp),d0
    1ebc:	|  |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = (x/16)*2; //X Start in Bytes
    1ebe:	|  |  |      move.w 16(sp),d0
    1ec2:	|  |  |  /-- bpl.s 1ec8 <CstScaleSprite+0x53e>
    1ec4:	|  |  |  |   addi.w #15,d0
    1ec8:	|  |  |  \-> asr.w #4,d0
    1eca:	|  |  |      movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    1ed0:	|  |  |      move.l a0,d1
    1ed2:	|  |  |      addq.l #2,d1
    1ed4:	|  |  |      move.l d1,186e2 <CstDrawBufferCleanupCursor>
    1eda:	|  |  |      add.w d0,d0
    1edc:	|  |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = ystartdst; //Y Start  
    1ede:	|  |  |      movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    1ee4:	|  |  |      move.l a0,d0
    1ee6:	|  |  |      addq.l #2,d0
    1ee8:	|  |  |      move.l d0,186e2 <CstDrawBufferCleanupCursor>
    1eee:	|  |  |      move.l 44(sp),d0
    1ef2:	|  |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor = 0;  
    1ef4:	|  |  |      movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    1efa:	|  |  |      clr.w (a0)
    1efc:	|  +--|----- bra.w 20c8 <CstScaleSprite+0x73e>
    }
  } else { //Whole Sprite on Screen
    extrawords = 1;
    1f00:	|  |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    1f06:	|  |         clr.w 76(sp)
    cutmaskpixel = 0;
    1f0a:	|  |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1f0e:	|  |         clr.w 72(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    1f12:	|  |         movea.l 88(sp),a0
    1f16:	|  |         move.l 24(a0),d0
    1f1a:	|  |         move.l d0,d2
    1f1c:	|  |         movea.l 88(sp),a0
    1f20:	|  |         move.l (a0),d0
    1f22:	|  |     /-- bpl.s 1f26 <CstScaleSprite+0x59c>
    1f24:	|  |     |   addq.l #7,d0
    1f26:	|  |     \-> asr.l #3,d0
    1f28:	|  |         movea.l 88(sp),a0
    1f2c:	|  |         move.l 4(a0),d1
    1f30:	|  |         move.l d1,-(sp)
    1f32:	|  |         move.l d0,-(sp)
    1f34:	|  |         jsr 154e0 <__mulsi3>
    1f3a:	|  |         addq.l #8,sp
    1f3c:	|  |         move.l d0,d1
    1f3e:	|  |         move.l d1,d0
    1f40:	|  |         add.l d0,d0
    1f42:	|  |         add.l d0,d0
    1f44:	|  |         add.l d1,d0
    1f46:	|  |         add.l d0,d2
    1f48:	|  |         movea.l 88(sp),a0
    1f4c:	|  |         move.l (a0),d0
    1f4e:	|  |         move.l 40(sp),-(sp)
    1f52:	|  |         move.l d0,-(sp)
    1f54:	|  |         jsr 154e0 <__mulsi3>
    1f5a:	|  |         addq.l #8,sp
    1f5c:	|  |         lsr.l #3,d0
    1f5e:	|  |         move.l d2,d1
    1f60:	|  |         add.l d0,d1
    1f62:	|  |         move.l d1,68(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    1f66:	|  |         movea.l 88(sp),a0
    1f6a:	|  |         move.l 24(a0),d0
    1f6e:	|  |         move.l d0,d2
    1f70:	|  |         movea.l 88(sp),a0
    1f74:	|  |         move.l (a0),d0
    1f76:	|  |         move.l 40(sp),-(sp)
    1f7a:	|  |         move.l d0,-(sp)
    1f7c:	|  |         jsr 154e0 <__mulsi3>
    1f82:	|  |         addq.l #8,sp
    1f84:	|  |         lsr.l #3,d0
    1f86:	|  |         move.l d2,d1
    1f88:	|  |         add.l d0,d1
    1f8a:	|  |         move.l d1,64(sp)
    bltcpt = ((ULONG) CstBackDrop) + ystartdst*winWidth/8 + (x/16)*2;
    1f8e:	|  |         move.l 186f6 <winWidth>,d0
    1f94:	|  |         move.l 44(sp),-(sp)
    1f98:	|  |         move.l d0,-(sp)
    1f9a:	|  |         jsr 154e0 <__mulsi3>
    1fa0:	|  |         addq.l #8,sp
    1fa2:	|  |         move.l d0,d1
    1fa4:	|  |         lsr.l #3,d1
    1fa6:	|  |         move.l 186c4 <CstBackDrop>,d0
    1fac:	|  |         add.l d0,d1
    1fae:	|  |         move.w 16(sp),d0
    1fb2:	|  |     /-- bpl.s 1fb8 <CstScaleSprite+0x62e>
    1fb4:	|  |     |   addi.w #15,d0
    1fb8:	|  |     \-> asr.w #4,d0
    1fba:	|  |         movea.w d0,a0
    1fbc:	|  |         move.l a0,d0
    1fbe:	|  |         add.l a0,d0
    1fc0:	|  |         move.l d1,d2
    1fc2:	|  |         add.l d0,d2
    1fc4:	|  |         move.l d2,60(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    1fc8:	|  |         move.l 186f6 <winWidth>,d0
    1fce:	|  |         move.l 44(sp),-(sp)
    1fd2:	|  |         move.l d0,-(sp)
    1fd4:	|  |         jsr 154e0 <__mulsi3>
    1fda:	|  |         addq.l #8,sp
    1fdc:	|  |         lsr.l #3,d0
    1fde:	|  |         move.l 80(sp),d1
    1fe2:	|  |         add.l d0,d1
    1fe4:	|  |         move.w 16(sp),d0
    1fe8:	|  |     /-- bpl.s 1fee <CstScaleSprite+0x664>
    1fea:	|  |     |   addi.w #15,d0
    1fee:	|  |     \-> asr.w #4,d0
    1ff0:	|  |         movea.w d0,a0
    1ff2:	|  |         move.l a0,d0
    1ff4:	|  |         add.l a0,d0
    1ff6:	|  |         move.l d1,d2
    1ff8:	|  |         add.l d0,d2
    1ffa:	|  |         move.l d2,56(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    1ffe:	|  |         move.w 16(sp),d0
    2002:	|  |         andi.w #-32753,d0
    2006:	|  |     /-- bpl.s 2010 <CstScaleSprite+0x686>
    2008:	|  |     |   subq.w #1,d0
    200a:	|  |     |   ori.w #-16,d0
    200e:	|  |     |   addq.w #1,d0
    2010:	|  |     \-> ext.l d0
    2012:	|  |         moveq #12,d1
    2014:	|  |         lsl.l d1,d0
    2016:	|  |         addi.l #4042,d0
    201c:	|  |         move.l d0,52(sp)
    bltcon1 = ((x%16) << 12);
    2020:	|  |         move.w 16(sp),d0
    2024:	|  |         andi.w #-32753,d0
    2028:	|  |     /-- bpl.s 2032 <CstScaleSprite+0x6a8>
    202a:	|  |     |   subq.w #1,d0
    202c:	|  |     |   ori.w #-16,d0
    2030:	|  |     |   addq.w #1,d0
    2032:	|  |     \-> ext.l d0
    2034:	|  |         moveq #12,d2
    2036:	|  |         lsl.l d2,d0
    2038:	|  |         move.l d0,48(sp)
    if( destinationtype == SCREEN)
    203c:	|  |         cmpi.w #1,12(sp)
    2042:	|  +-------- bne.w 20c8 <CstScaleSprite+0x73e>
    {
      *CstDrawBufferCleanupCursor++ = single->width/16+cutwordssource; //Width in X Bytes
    2046:	|  |         movea.l 88(sp),a0
    204a:	|  |         move.l (a0),d0
    204c:	|  |         movea.l d0,a0
    204e:	|  |         cmpa.w #0,a0
    2052:	|  |     /-- bge.s 2058 <CstScaleSprite+0x6ce>
    2054:	|  |     |   lea 15(a0),a0
    2058:	|  |     \-> move.l a0,d0
    205a:	|  |         asr.l #4,d0
    205c:	|  |         move.l d0,d0
    205e:	|  |         movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    2064:	|  |         move.l a0,d1
    2066:	|  |         addq.l #2,d1
    2068:	|  |         move.l d1,186e2 <CstDrawBufferCleanupCursor>
    206e:	|  |         add.w 76(sp),d0
    2072:	|  |         move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = blitheight; //Height
    2074:	|  |         movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    207a:	|  |         move.l a0,d0
    207c:	|  |         addq.l #2,d0
    207e:	|  |         move.l d0,186e2 <CstDrawBufferCleanupCursor>
    2084:	|  |         move.l 36(sp),d0
    2088:	|  |         move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = (x/16)*2; //X Start in Bytes
    208a:	|  |         move.w 16(sp),d0
    208e:	|  |     /-- bpl.s 2094 <CstScaleSprite+0x70a>
    2090:	|  |     |   addi.w #15,d0
    2094:	|  |     \-> asr.w #4,d0
    2096:	|  |         movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    209c:	|  |         move.l a0,d1
    209e:	|  |         addq.l #2,d1
    20a0:	|  |         move.l d1,186e2 <CstDrawBufferCleanupCursor>
    20a6:	|  |         add.w d0,d0
    20a8:	|  |         move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = ystartdst; //Y Start    
    20aa:	|  |         movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    20b0:	|  |         move.l a0,d0
    20b2:	|  |         addq.l #2,d0
    20b4:	|  |         move.l d0,186e2 <CstDrawBufferCleanupCursor>
    20ba:	|  |         move.l 44(sp),d0
    20be:	|  |         move.w d0,(a0)
      *CstDrawBufferCleanupCursor = 0;
    20c0:	|  |         movea.l 186e2 <CstDrawBufferCleanupCursor>,a0
    20c6:	|  |         clr.w (a0)
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    20c8:	|  \-------> moveq #0,d0
    20ca:	|            move.w 74(sp),d0
    20ce:	|            moveq #0,d1
    20d0:	|            not.w d1
    20d2:	|            asr.l d0,d1
    20d4:	|            move.w d1,30(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    20d8:	|            moveq #0,d1
    20da:	|            move.w 76(sp),d1
    20de:	|            moveq #0,d0
    20e0:	|            move.w 78(sp),d0
    20e4:	|            sub.l d0,d1
    20e6:	|            move.l d1,d0
    20e8:	|            add.w d0,d0
    20ea:	|            move.w d0,28(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    20ee:	|            moveq #0,d1
    20f0:	|            move.w 76(sp),d1
    20f4:	|            moveq #0,d0
    20f6:	|            move.w 78(sp),d0
    20fa:	|            sub.l d0,d1
    20fc:	|            move.l d1,d0
    20fe:	|            add.w d0,d0
    2100:	|            move.w d0,26(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2104:	|            move.l 186f6 <winWidth>,d0
    210a:	|            lsr.l #3,d0
    210c:	|            move.l d0,d1
    210e:	|            movea.l 88(sp),a0
    2112:	|            move.l (a0),d0
    2114:	|        /-- bpl.s 2118 <CstScaleSprite+0x78e>
    2116:	|        |   addq.l #7,d0
    2118:	|        \-> asr.l #3,d0
    211a:	|            move.l d0,d0
    211c:	|            sub.w d0,d1
    211e:	|            move.w 76(sp),d0
    2122:	|            sub.w 78(sp),d0
    2126:	|            add.w d0,d0
    2128:	|            add.w d1,d0
    212a:	|            move.w d0,24(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    212e:	|            move.l 186f6 <winWidth>,d0
    2134:	|            lsr.l #3,d0
    2136:	|            move.l d0,d1
    2138:	|            movea.l 88(sp),a0
    213c:	|            move.l (a0),d0
    213e:	|        /-- bpl.s 2142 <CstScaleSprite+0x7b8>
    2140:	|        |   addq.l #7,d0
    2142:	|        \-> asr.l #3,d0
    2144:	|            move.l d0,d0
    2146:	|            sub.w d0,d1
    2148:	|            move.w 76(sp),d0
    214c:	|            sub.w 78(sp),d0
    2150:	|            add.w d0,d0
    2152:	|            add.w d1,d0
    2154:	|            move.w d0,22(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2158:	|            move.l #14675968,18(sp)
  WaitBlit();
    2160:	|            move.l 187ae <GfxBase>,d0
    2166:	|            movea.l d0,a6
    2168:	|            jsr -228(a6)

  custom->bltafwm = bltafwm;
    216c:	|            movea.l 18(sp),a0
    2170:	|            move.w 30(sp),68(a0)
  custom->bltalwm = bltalwm;
    2176:	|            movea.l 18(sp),a0
    217a:	|            move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2180:	|            move.w 28(sp),d0
    2184:	|            movea.l 18(sp),a0
    2188:	|            move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    218c:	|            move.w 26(sp),d0
    2190:	|            movea.l 18(sp),a0
    2194:	|            move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    2198:	|            move.w 24(sp),d0
    219c:	|            movea.l 18(sp),a0
    21a0:	|            move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    21a4:	|            move.w 22(sp),d0
    21a8:	|            movea.l 18(sp),a0
    21ac:	|            move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    21b0:	|            move.l 52(sp),d0
    21b4:	|            movea.l 18(sp),a0
    21b8:	|            move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    21bc:	|            move.l 48(sp),d0
    21c0:	|            movea.l 18(sp),a0
    21c4:	|            move.w d0,66(a0)

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    21c8:	|            clr.l 32(sp)
    21cc:	|     /----- bra.w 229e <CstScaleSprite+0x914>
  {
    custom->bltapt = (APTR) bltapt;
    21d0:	|  /--|----> move.l 68(sp),d0
    21d4:	|  |  |      movea.l 18(sp),a0
    21d8:	|  |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    21dc:	|  |  |      move.l 64(sp),d0
    21e0:	|  |  |      movea.l 18(sp),a0
    21e4:	|  |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    21e8:	|  |  |      move.l 60(sp),d0
    21ec:	|  |  |      movea.l 18(sp),a0
    21f0:	|  |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    21f4:	|  |  |      move.l 56(sp),d0
    21f8:	|  |  |      movea.l 18(sp),a0
    21fc:	|  |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2200:	|  |  |      move.l 36(sp),d0
    2204:	|  |  |      move.w d0,d1
    2206:	|  |  |      lsl.w #6,d1
    2208:	|  |  |      movea.l 88(sp),a0
    220c:	|  |  |      move.l (a0),d0
    220e:	|  |  |      movea.l d0,a0
    2210:	|  |  |      cmpa.w #0,a0
    2214:	|  |  |  /-- bge.s 221a <CstScaleSprite+0x890>
    2216:	|  |  |  |   lea 15(a0),a0
    221a:	|  |  |  \-> move.l a0,d0
    221c:	|  |  |      asr.l #4,d0
    221e:	|  |  |      move.l d0,d0
    2220:	|  |  |      add.w d1,d0
    2222:	|  |  |      sub.w 76(sp),d0
    2226:	|  |  |      add.w 78(sp),d0
    222a:	|  |  |      movea.l 18(sp),a0
    222e:	|  |  |      move.w d0,88(a0)
    bltbpt += (single->width >> 3)*single->height;
    2232:	|  |  |      movea.l 88(sp),a0
    2236:	|  |  |      move.l (a0),d0
    2238:	|  |  |      asr.l #3,d0
    223a:	|  |  |      movea.l 88(sp),a0
    223e:	|  |  |      move.l 4(a0),d1
    2242:	|  |  |      move.l d1,-(sp)
    2244:	|  |  |      move.l d0,-(sp)
    2246:	|  |  |      jsr 154e0 <__mulsi3>
    224c:	|  |  |      addq.l #8,sp
    224e:	|  |  |      add.l d0,64(sp)
    bltcpt += winWidth/8*winHeight;
    2252:	|  |  |      move.l 186f6 <winWidth>,d0
    2258:	|  |  |      lsr.l #3,d0
    225a:	|  |  |      move.l 186fa <winHeight>,d1
    2260:	|  |  |      move.l d1,-(sp)
    2262:	|  |  |      move.l d0,-(sp)
    2264:	|  |  |      jsr 154e0 <__mulsi3>
    226a:	|  |  |      addq.l #8,sp
    226c:	|  |  |      add.l d0,60(sp)
    bltdpt += winWidth/8*winHeight;
    2270:	|  |  |      move.l 186f6 <winWidth>,d0
    2276:	|  |  |      lsr.l #3,d0
    2278:	|  |  |      move.l 186fa <winHeight>,d1
    227e:	|  |  |      move.l d1,-(sp)
    2280:	|  |  |      move.l d0,-(sp)
    2282:	|  |  |      jsr 154e0 <__mulsi3>
    2288:	|  |  |      addq.l #8,sp
    228a:	|  |  |      add.l d0,56(sp)
    WaitBlit();
    228e:	|  |  |      move.l 187ae <GfxBase>,d0
    2294:	|  |  |      movea.l d0,a6
    2296:	|  |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    229a:	|  |  |      addq.l #1,32(sp)
    229e:	|  |  \----> moveq #4,d0
    22a0:	|  |         cmp.l 32(sp),d0
    22a4:	|  \-------- bge.w 21d0 <CstScaleSprite+0x846>
  }   
}
    22a8:	\----------> movem.l (sp)+,d2-d3/a6
    22ac:	             lea 72(sp),sp
    22b0:	             rts

000022b2 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    22b2:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    22b4:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    22ba:	move.l 8(sp),d0
    22be:	movea.l (sp),a0
    22c0:	move.l d0,128(a0)
}
    22c4:	nop
    22c6:	addq.l #4,sp
    22c8:	rts

000022ca <CstSwapBuffer>:

void CstSwapBuffer( ) {
    22ca:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    22ce:	move.l 186d6 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    22d6:	move.l 186da <CstDrawBuffer>,d0
    22dc:	move.l d0,186d6 <CstViewBuffer>
  CstDrawBuffer = tmp;
    22e2:	move.l 16(sp),186da <CstDrawBuffer>

  UWORD *tmp2 = CstViewBufferCleanupStart;
    22ea:	move.l 186e6 <CstViewBufferCleanupStart>,12(sp)
  CstViewBufferCleanupStart = CstDrawBufferCleanupStart;
    22f2:	move.l 186de <CstDrawBufferCleanupStart>,d0
    22f8:	move.l d0,186e6 <CstViewBufferCleanupStart>
  CstDrawBufferCleanupStart = tmp2;
    22fe:	move.l 12(sp),186de <CstDrawBufferCleanupStart>
  CstViewBufferCleanupCursor = CstViewBufferCleanupStart;
    2306:	move.l 186e6 <CstViewBufferCleanupStart>,d0
    230c:	move.l d0,186ea <CstViewBufferCleanupCursor>
  CstDrawBufferCleanupCursor = CstDrawBufferCleanupStart;
    2312:	move.l 186de <CstDrawBufferCleanupStart>,d0
    2318:	move.l d0,186e2 <CstDrawBufferCleanupCursor>

  UWORD *copword = CstCopperList;
    231e:	move.l 186c8 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    2326:	move.l 186d6 <CstViewBuffer>,d0
    232c:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    2330:	move.l 4(sp),d0
    2334:	clr.w d0
    2336:	swap d0
    2338:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    233c:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    2340:	movea.w #118,a0
    2344:	adda.l 8(sp),a0
    2348:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    234a:	movea.w #114,a0
    234e:	adda.l 8(sp),a0
    2352:	move.w 2(sp),(a0)

  ptr +=  40*256;
    2356:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    235e:	move.l 4(sp),d0
    2362:	clr.w d0
    2364:	swap d0
    2366:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    236a:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    236e:	movea.w #126,a0
    2372:	adda.l 8(sp),a0
    2376:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    2378:	movea.w #122,a0
    237c:	adda.l 8(sp),a0
    2380:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    2384:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    238c:	move.l 4(sp),d0
    2390:	clr.w d0
    2392:	swap d0
    2394:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2398:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    239c:	movea.l 8(sp),a0
    23a0:	lea 134(a0),a0
    23a4:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    23a6:	movea.l 8(sp),a0
    23aa:	lea 130(a0),a0
    23ae:	move.w 2(sp),(a0)

  ptr +=  40*256;
    23b2:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    23ba:	move.l 4(sp),d0
    23be:	clr.w d0
    23c0:	swap d0
    23c2:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    23c6:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    23ca:	movea.l 8(sp),a0
    23ce:	lea 142(a0),a0
    23d2:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    23d4:	movea.l 8(sp),a0
    23d8:	lea 138(a0),a0
    23dc:	move.w 2(sp),(a0)

  ptr +=  40*256;
    23e0:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    23e8:	move.l 4(sp),d0
    23ec:	clr.w d0
    23ee:	swap d0
    23f0:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    23f4:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    23f8:	movea.l 8(sp),a0
    23fc:	lea 150(a0),a0
    2400:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    2402:	movea.l 8(sp),a0
    2406:	lea 146(a0),a0
    240a:	move.w 2(sp),(a0)

}
    240e:	nop
    2410:	lea 20(sp),sp
    2414:	rts

00002416 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    2416:	          lea -68(sp),sp
    241a:	          move.l a6,-(sp)

  width = width / 8;
    241c:	          move.l 76(sp),d0
    2420:	      /-- bpl.s 2424 <CstReserveBackdrop+0xe>
    2422:	      |   addq.l #7,d0
    2424:	      \-> asr.l #3,d0
    2426:	          move.l d0,76(sp)

  if( width < 40) 
    242a:	          moveq #39,d0
    242c:	          cmp.l 76(sp),d0
    2430:	      /-- blt.s 2446 <CstReserveBackdrop+0x30>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    2432:	      |   pea 1583a <PutChar+0x244>
    2438:	      |   jsr 14b22 <KPrintF>
    243e:	      |   addq.l #4,sp
    return FALSE;
    2440:	      |   clr.w d0
    2442:	/-----|-- bra.w 277c <CstReserveBackdrop+0x366>
  }  

  CstCopperList = CstCreateCopperlist( width);
    2446:	|     \-> move.l 76(sp),-(sp)
    244a:	|         jsr f8c <CstCreateCopperlist>
    2450:	|         addq.l #4,sp
    2452:	|         move.l d0,186c8 <CstCopperList>
  CstBackdropSizePlane = width*height;
    2458:	|         move.l 76(sp),d1
    245c:	|         move.l 80(sp),d0
    2460:	|         muls.w d1,d0
    2462:	|         move.w d0,186c2 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    2468:	|         move.w 186c2 <CstBackdropSizePlane>,d1
    246e:	|         move.w d1,d0
    2470:	|         add.w d0,d0
    2472:	|         add.w d0,d0
    2474:	|         add.w d1,d0
    2476:	|         move.w d0,186c0 <CstBackdropSize>

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    247c:	|         move.w 186c0 <CstBackdropSize>,d0
    2482:	|         move.w d0,d0
    2484:	|         andi.l #65535,d0
    248a:	|         move.l d0,60(sp)
    248e:	|         moveq #2,d1
    2490:	|         move.l d1,56(sp)
    2494:	|         move.l 187a2 <SysBase>,d0
    249a:	|         movea.l d0,a6
    249c:	|         move.l 60(sp),d0
    24a0:	|         move.l 56(sp),d1
    24a4:	|         jsr -684(a6)
    24a8:	|         move.l d0,52(sp)
    24ac:	|         move.l 52(sp),d0
    24b0:	|         move.l d0,186c4 <CstBackDrop>
  if( !CstBackDrop)
    24b6:	|         move.l 186c4 <CstBackDrop>,d0
    24bc:	|     /-- bne.s 24d2 <CstReserveBackdrop+0xbc>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    24be:	|     |   pea 15878 <PutChar+0x282>
    24c4:	|     |   jsr 14b22 <KPrintF>
    24ca:	|     |   addq.l #4,sp
    return FALSE;  
    24cc:	|     |   clr.w d0
    24ce:	+-----|-- bra.w 277c <CstReserveBackdrop+0x366>
  }

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    24d2:	|     \-> move.l 186c4 <CstBackDrop>,68(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    24da:	|         clr.l 64(sp)
    24de:	|     /-- bra.s 24f4 <CstReserveBackdrop+0xde>
  {
    *cursor++ = 0;
    24e0:	|  /--|-> move.l 68(sp),d0
    24e4:	|  |  |   move.l d0,d1
    24e6:	|  |  |   addq.l #4,d1
    24e8:	|  |  |   move.l d1,68(sp)
    24ec:	|  |  |   movea.l d0,a0
    24ee:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    24f0:	|  |  |   addq.l #1,64(sp)
    24f4:	|  |  \-> move.w 186c0 <CstBackdropSize>,d0
    24fa:	|  |      lsr.w #2,d0
    24fc:	|  |      move.w d0,d0
    24fe:	|  |      andi.l #65535,d0
    2504:	|  |      cmp.l 64(sp),d0
    2508:	|  \----- bgt.s 24e0 <CstReserveBackdrop+0xca>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    250a:	|         move.w 186c0 <CstBackdropSize>,d0
    2510:	|         move.w d0,d0
    2512:	|         andi.l #65535,d0
    2518:	|         move.l 76(sp),d1
    251c:	|         add.l d1,d1
    251e:	|         add.l d1,d0
    2520:	|         move.l d0,48(sp)
    2524:	|         moveq #2,d0
    2526:	|         move.l d0,44(sp)
    252a:	|         move.l 187a2 <SysBase>,d0
    2530:	|         movea.l d0,a6
    2532:	|         move.l 48(sp),d0
    2536:	|         move.l 44(sp),d1
    253a:	|         jsr -684(a6)
    253e:	|         move.l d0,40(sp)
    2542:	|         move.l 40(sp),d0
    2546:	|         move.l d0,186da <CstDrawBuffer>
  if( !CstDrawBuffer)
    254c:	|         move.l 186da <CstDrawBuffer>,d0
    2552:	|     /-- bne.s 2568 <CstReserveBackdrop+0x152>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    2554:	|     |   pea 158b0 <PutChar+0x2ba>
    255a:	|     |   jsr 14b22 <KPrintF>
    2560:	|     |   addq.l #4,sp
    return FALSE;  
    2562:	|     |   clr.w d0
    2564:	+-----|-- bra.w 277c <CstReserveBackdrop+0x366>
  }
  CstDrawBufferCleanupStart = AllocVec( 100*3*2,MEMF_ANY);
    2568:	|     \-> move.l #600,36(sp)
    2570:	|         clr.l 32(sp)
    2574:	|         move.l 187a2 <SysBase>,d0
    257a:	|         movea.l d0,a6
    257c:	|         move.l 36(sp),d0
    2580:	|         move.l 32(sp),d1
    2584:	|         jsr -684(a6)
    2588:	|         move.l d0,28(sp)
    258c:	|         move.l 28(sp),d0
    2590:	|         move.l d0,186de <CstDrawBufferCleanupStart>
  if( !CstDrawBufferCleanupStart)
    2596:	|         move.l 186de <CstDrawBufferCleanupStart>,d0
    259c:	|     /-- bne.s 25b2 <CstReserveBackdrop+0x19c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstDrawBufferCleanupStart");
    259e:	|     |   pea 158ea <PutChar+0x2f4>
    25a4:	|     |   jsr 14b22 <KPrintF>
    25aa:	|     |   addq.l #4,sp
    return FALSE;  
    25ac:	|     |   clr.w d0
    25ae:	+-----|-- bra.w 277c <CstReserveBackdrop+0x366>
  }
  CstDrawBufferCleanupCursor = CstDrawBufferCleanupStart;
    25b2:	|     \-> move.l 186de <CstDrawBufferCleanupStart>,d0
    25b8:	|         move.l d0,186e2 <CstDrawBufferCleanupCursor>
  *CstDrawBufferCleanupStart = 0;
    25be:	|         movea.l 186de <CstDrawBufferCleanupStart>,a0
    25c4:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    25c6:	|         move.w 186c0 <CstBackdropSize>,d0
    25cc:	|         move.w d0,d0
    25ce:	|         andi.l #65535,d0
    25d4:	|         move.l 76(sp),d1
    25d8:	|         add.l d1,d1
    25da:	|         add.l d1,d0
    25dc:	|         move.l d0,24(sp)
    25e0:	|         moveq #2,d1
    25e2:	|         move.l d1,20(sp)
    25e6:	|         move.l 187a2 <SysBase>,d0
    25ec:	|         movea.l d0,a6
    25ee:	|         move.l 24(sp),d0
    25f2:	|         move.l 20(sp),d1
    25f6:	|         jsr -684(a6)
    25fa:	|         move.l d0,16(sp)
    25fe:	|         move.l 16(sp),d0
    2602:	|         move.l d0,186d6 <CstViewBuffer>
  if( !CstViewBuffer)
    2608:	|         move.l 186d6 <CstViewBuffer>,d0
    260e:	|     /-- bne.s 2624 <CstReserveBackdrop+0x20e>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    2610:	|     |   pea 15933 <PutChar+0x33d>
    2616:	|     |   jsr 14b22 <KPrintF>
    261c:	|     |   addq.l #4,sp
    return FALSE;  
    261e:	|     |   clr.w d0
    2620:	+-----|-- bra.w 277c <CstReserveBackdrop+0x366>
  }
  CstViewBufferCleanupStart = AllocVec( 100*3*2,MEMF_ANY);
    2624:	|     \-> move.l #600,12(sp)
    262c:	|         clr.l 8(sp)
    2630:	|         move.l 187a2 <SysBase>,d0
    2636:	|         movea.l d0,a6
    2638:	|         move.l 12(sp),d0
    263c:	|         move.l 8(sp),d1
    2640:	|         jsr -684(a6)
    2644:	|         move.l d0,4(sp)
    2648:	|         move.l 4(sp),d0
    264c:	|         move.l d0,186e6 <CstViewBufferCleanupStart>
  if( !CstViewBufferCleanupStart)
    2652:	|         move.l 186e6 <CstViewBufferCleanupStart>,d0
    2658:	|     /-- bne.s 266e <CstReserveBackdrop+0x258>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstViewBufferCleanupStart");
    265a:	|     |   pea 1596d <PutChar+0x377>
    2660:	|     |   jsr 14b22 <KPrintF>
    2666:	|     |   addq.l #4,sp
    return FALSE;  
    2668:	|     |   clr.w d0
    266a:	+-----|-- bra.w 277c <CstReserveBackdrop+0x366>
  }
  *CstViewBufferCleanupStart = 0;
    266e:	|     \-> movea.l 186e6 <CstViewBufferCleanupStart>,a0
    2674:	|         clr.w (a0)
  CstViewBufferCleanupCursor = CstViewBufferCleanupStart;
    2676:	|         move.l 186e6 <CstViewBufferCleanupStart>,d0
    267c:	|         move.l d0,186ea <CstViewBufferCleanupCursor>
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    2682:	|         move.l 186da <CstDrawBuffer>,d1
    2688:	|         move.l 76(sp),d0
    268c:	|     /-- bpl.s 2690 <CstReserveBackdrop+0x27a>
    268e:	|     |   addq.l #3,d0
    2690:	|     \-> asr.l #2,d0
    2692:	|         add.l d0,d0
    2694:	|         add.l d0,d0
    2696:	|         add.l d1,d0
    2698:	|         move.l d0,186da <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    269e:	|         move.l 186d6 <CstViewBuffer>,d1
    26a4:	|         move.l 76(sp),d0
    26a8:	|     /-- bpl.s 26ac <CstReserveBackdrop+0x296>
    26aa:	|     |   addq.l #3,d0
    26ac:	|     \-> asr.l #2,d0
    26ae:	|         add.l d0,d0
    26b0:	|         add.l d0,d0
    26b2:	|         add.l d1,d0
    26b4:	|         move.l d0,186d6 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    26ba:	|         move.l 186c4 <CstBackDrop>,d0
    26c0:	|         clr.l -(sp)
    26c2:	|         pea 5 <_start+0x5>
    26c6:	|         pea 100 <copyString+0x48>
    26ca:	|         pea 140 <decodeFilename+0x28>
    26ce:	|         pea 159b6 <PutChar+0x3c0>
    26d4:	|         move.l d0,-(sp)
    26d6:	|         jsr 14c0a <debug_register_bitmap>
    26dc:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    26e0:	|         move.l 80(sp),d0
    26e4:	|         movea.w d0,a1
    26e6:	|         move.l 76(sp),d0
    26ea:	|         lsl.w #3,d0
    26ec:	|         movea.w d0,a0
    26ee:	|         move.l 186da <CstDrawBuffer>,d0
    26f4:	|         clr.l -(sp)
    26f6:	|         pea 5 <_start+0x5>
    26fa:	|         move.l a1,-(sp)
    26fc:	|         move.l a0,-(sp)
    26fe:	|         pea 159c6 <PutChar+0x3d0>
    2704:	|         move.l d0,-(sp)
    2706:	|         jsr 14c0a <debug_register_bitmap>
    270c:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    2710:	|         move.l 80(sp),d0
    2714:	|         movea.w d0,a1
    2716:	|         move.l 76(sp),d0
    271a:	|         lsl.w #3,d0
    271c:	|         movea.w d0,a0
    271e:	|         move.l 186d6 <CstViewBuffer>,d0
    2724:	|         clr.l -(sp)
    2726:	|         pea 5 <_start+0x5>
    272a:	|         move.l a1,-(sp)
    272c:	|         move.l a0,-(sp)
    272e:	|         pea 159d5 <PutChar+0x3df>
    2734:	|         move.l d0,-(sp)
    2736:	|         jsr 14c0a <debug_register_bitmap>
    273c:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    2740:	|         move.l 186c8 <CstCopperList>,d0
    2746:	|     /-- beq.s 2758 <CstReserveBackdrop+0x342>
    2748:	|     |   move.l 186da <CstDrawBuffer>,d0
    274e:	|     +-- beq.s 2758 <CstReserveBackdrop+0x342>
    2750:	|     |   move.l 186d6 <CstViewBuffer>,d0
    2756:	|  /--|-- bne.s 276a <CstReserveBackdrop+0x354>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    2758:	|  |  \-> pea 159e4 <PutChar+0x3ee>
    275e:	|  |      jsr 14b22 <KPrintF>
    2764:	|  |      addq.l #4,sp
    return FALSE;
    2766:	|  |      clr.w d0
    2768:	+--|----- bra.s 277c <CstReserveBackdrop+0x366>
  }

  CstSetCl( CstCopperList);
    276a:	|  \----> move.l 186c8 <CstCopperList>,d0
    2770:	|         move.l d0,-(sp)
    2772:	|         jsr 22b2 <CstSetCl>
    2778:	|         addq.l #4,sp
  return TRUE;
    277a:	|         moveq #1,d0

}
    277c:	\-------> movea.l (sp)+,a6
    277e:	          lea 68(sp),sp
    2782:	          rts

00002784 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    2784:	    lea -12(sp),sp
    2788:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    278a:	    move.l 186da <CstDrawBuffer>,d0
    2790:	/-- beq.s 27aa <CstFreeBuffer+0x26>
    2792:	|   move.l 186da <CstDrawBuffer>,12(sp)
    279a:	|   move.l 187a2 <SysBase>,d0
    27a0:	|   movea.l d0,a6
    27a2:	|   movea.l 12(sp),a1
    27a6:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    27aa:	\-> move.l 186d6 <CstViewBuffer>,d0
    27b0:	/-- beq.s 27ca <CstFreeBuffer+0x46>
    27b2:	|   move.l 186d6 <CstViewBuffer>,8(sp)
    27ba:	|   move.l 187a2 <SysBase>,d0
    27c0:	|   movea.l d0,a6
    27c2:	|   movea.l 8(sp),a1
    27c6:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    27ca:	\-> move.l 186c8 <CstCopperList>,d0
    27d0:	/-- beq.s 27ea <CstFreeBuffer+0x66>
    27d2:	|   move.l 186c8 <CstCopperList>,4(sp)
    27da:	|   move.l 187a2 <SysBase>,d0
    27e0:	|   movea.l d0,a6
    27e2:	|   movea.l 4(sp),a1
    27e6:	|   jsr -690(a6)
}
    27ea:	\-> nop
    27ec:	    movea.l (sp)+,a6
    27ee:	    lea 12(sp),sp
    27f2:	    rts

000027f4 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    27f4:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    27f8:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    27fc:	       tst.l 24(sp)
    2800:	   /-- bge.s 2806 <drawLine+0x12>
    2802:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    2806:	   \-> tst.l 28(sp)
    280a:	   /-- bge.s 2810 <drawLine+0x1c>
    280c:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    2810:	   \-> tst.l 32(sp)
    2814:	   /-- bge.s 281a <drawLine+0x26>
    2816:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    281a:	   \-> tst.l 36(sp)
    281e:	   /-- bge.s 2824 <drawLine+0x30>
    2820:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    2824:	   \-> move.l 18892 <sceneWidth>,d0
    282a:	       cmp.l 24(sp),d0
    282e:	   /-- bge.s 283e <drawLine+0x4a>
    2830:	   |   move.l 18892 <sceneWidth>,d0
    2836:	   |   move.l d0,d1
    2838:	   |   subq.l #1,d1
    283a:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    283e:	   \-> move.l 18892 <sceneWidth>,d0
    2844:	       cmp.l 32(sp),d0
    2848:	   /-- bge.s 2858 <drawLine+0x64>
    284a:	   |   move.l 18892 <sceneWidth>,d0
    2850:	   |   move.l d0,d1
    2852:	   |   subq.l #1,d1
    2854:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    2858:	   \-> move.l 18896 <sceneHeight>,d0
    285e:	       cmp.l 28(sp),d0
    2862:	   /-- bge.s 2872 <drawLine+0x7e>
    2864:	   |   move.l 18896 <sceneHeight>,d0
    286a:	   |   move.l d0,d1
    286c:	   |   subq.l #1,d1
    286e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    2872:	   \-> move.l 18896 <sceneHeight>,d0
    2878:	       cmp.l 36(sp),d0
    287c:	   /-- bge.s 288c <drawLine+0x98>
    287e:	   |   move.l 18896 <sceneHeight>,d0
    2884:	   |   move.l d0,d1
    2886:	   |   subq.l #1,d1
    2888:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    288c:	   \-> move.l 24(sp),d0
    2890:	       cmp.l 32(sp),d0
    2894:	/----- ble.s 28b0 <drawLine+0xbc>
		x = x2; 
    2896:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    289c:	|      tst.w 10(sp)
    28a0:	|      seq d0
    28a2:	|      neg.b d0
    28a4:	|      move.b d0,d0
    28a6:	|      andi.w #255,d0
    28aa:	|      move.w d0,10(sp)
    28ae:	|  /-- bra.s 28b6 <drawLine+0xc2>
	} else x = x1;
    28b0:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    28b6:	   \-> move.l 28(sp),d1
    28ba:	       cmp.l 36(sp),d1
    28be:	/----- ble.s 28da <drawLine+0xe6>
		y = y2; 
    28c0:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    28c6:	|      tst.w 10(sp)
    28ca:	|      seq d0
    28cc:	|      neg.b d0
    28ce:	|      move.b d0,d0
    28d0:	|      andi.w #255,d0
    28d4:	|      move.w d0,10(sp)
    28d8:	|  /-- bra.s 28e0 <drawLine+0xec>
	} else y = y1;	
    28da:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    28e0:	   \-> move.l 32(sp),d0
    28e4:	       sub.l 24(sp),d0
    28e8:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    28ec:	       move.l 6(sp),d0
    28f0:	   /-- bpl.s 28f4 <drawLine+0x100>
    28f2:	   |   neg.l d0
    28f4:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    28f8:	       move.l 36(sp),d1
    28fc:	       sub.l 28(sp),d1
    2900:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    2904:	       move.l 2(sp),d0
    2908:	   /-- bpl.s 290c <drawLine+0x118>
    290a:	   |   neg.l d0
    290c:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    2910:	       tst.l 6(sp)
    2914:	   /-- bne.s 2938 <drawLine+0x144>
		diffX = 1;
    2916:	   |   moveq #1,d0
    2918:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    291c:	   |   move.l 18892 <sceneWidth>,d0
    2922:	   |   subq.l #1,d0
    2924:	   |   cmp.l 16(sp),d0
    2928:	   +-- bne.s 2938 <drawLine+0x144>
    292a:	   |   move.l 18892 <sceneWidth>,d0
    2930:	   |   move.l d0,d1
    2932:	   |   subq.l #2,d1
    2934:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    2938:	   \-> tst.l 2(sp)
    293c:	   /-- bne.s 2960 <drawLine+0x16c>
		diffY = 1;
    293e:	   |   moveq #1,d0
    2940:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    2944:	   |   move.l 18896 <sceneHeight>,d0
    294a:	   |   subq.l #1,d0
    294c:	   |   cmp.l 12(sp),d0
    2950:	   +-- bne.s 2960 <drawLine+0x16c>
    2952:	   |   move.l 18896 <sceneHeight>,d0
    2958:	   |   move.l d0,d1
    295a:	   |   subq.l #2,d1
    295c:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    2960:	   \-> pea 15a11 <PutChar+0x41b>
    2966:	       jsr 14b22 <KPrintF>
    296c:	       addq.l #4,sp
	
}
    296e:	       nop
    2970:	       lea 20(sp),sp
    2974:	       rts

00002976 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    2976:	                      lea -24(sp),sp
    297a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    297c:	                      move.l 186fe <firstTexture>,d0
    2982:	/-------------------- beq.w 2a60 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    2986:	|                     clr.l 24(sp)
    298a:	|     /-------------- bra.w 2a54 <deleteTextures+0xde>
			BOOL found = FALSE;
    298e:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    2992:	|  |  |               move.l 186fe <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    299a:	|  |  |               movea.l 20(sp),a0
    299e:	|  |  |               move.l (a0),d1
    29a0:	|  |  |               move.l 24(sp),d0
    29a4:	|  |  |               add.l d0,d0
    29a6:	|  |  |               add.l d0,d0
    29a8:	|  |  |               movea.l 36(sp),a0
    29ac:	|  |  |               adda.l d0,a0
    29ae:	|  |  |               move.l (a0),d0
    29b0:	|  |  |               cmp.l d1,d0
    29b2:	|  |  |  /----------- bne.w 2a46 <deleteTextures+0xd0>
				found = TRUE;
    29b6:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    29bc:	|  |  |  |            movea.l 20(sp),a0
    29c0:	|  |  |  |            move.l 12(a0),d0
    29c4:	|  |  |  |            move.l d0,186fe <firstTexture>
				FreeVec(list);
    29ca:	|  |  |  |            move.l 20(sp),6(sp)
    29d0:	|  |  |  |            move.l 187a2 <SysBase>,d0
    29d6:	|  |  |  |            movea.l d0,a6
    29d8:	|  |  |  |            movea.l 6(sp),a1
    29dc:	|  |  |  |            jsr -690(a6)
				continue;
    29e0:	|  |  |  |  /-------- bra.s 2a50 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    29e2:	|  |  |  |  |  /----> movea.l 20(sp),a0
    29e6:	|  |  |  |  |  |      movea.l 12(a0),a0
    29ea:	|  |  |  |  |  |      move.l (a0),d1
    29ec:	|  |  |  |  |  |      move.l 24(sp),d0
    29f0:	|  |  |  |  |  |      add.l d0,d0
    29f2:	|  |  |  |  |  |      add.l d0,d0
    29f4:	|  |  |  |  |  |      movea.l 36(sp),a0
    29f8:	|  |  |  |  |  |      adda.l d0,a0
    29fa:	|  |  |  |  |  |      move.l (a0),d0
    29fc:	|  |  |  |  |  |      cmp.l d1,d0
    29fe:	|  |  |  |  |  |  /-- bne.s 2a3c <deleteTextures+0xc6>
					found = TRUE;
    2a00:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    2a06:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2a0a:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    2a10:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2a14:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    2a18:	|  |  |  |  |  |  |   move.l 12(a0),d0
    2a1c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2a20:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    2a24:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    2a2a:	|  |  |  |  |  |  |   move.l 187a2 <SysBase>,d0
    2a30:	|  |  |  |  |  |  |   movea.l d0,a6
    2a32:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    2a36:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    2a3a:	|  |  |  |  +--|--|-- bra.s 2a50 <deleteTextures+0xda>
				}
				list = list->next;
    2a3c:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    2a40:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    2a46:	|  |  |  \--|--|----> movea.l 20(sp),a0
    2a4a:	|  |  |     |  |      move.l 12(a0),d0
    2a4e:	|  |  |     |  \----- bne.s 29e2 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    2a50:	|  |  |     \-------> addq.l #1,24(sp)
    2a54:	|  |  \-------------> move.l 24(sp),d0
    2a58:	|  |                  cmp.l 32(sp),d0
    2a5c:	|  \----------------- bcs.w 298e <deleteTextures+0x18>
			}
		}
	}
}
    2a60:	\-------------------> nop
    2a62:	                      movea.l (sp)+,a6
    2a64:	                      lea 24(sp),sp
    2a68:	                      rts

00002a6a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    2a6a:	subq.l #4,sp
    2a6c:	move.l 8(sp),d0
    2a70:	move.w d0,d0
    2a72:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    2a76:	pea 15a34 <PutChar+0x43e>
    2a7c:	jsr 14b22 <KPrintF>
    2a82:	addq.l #4,sp
}
    2a84:	nop
    2a86:	addq.l #4,sp
    2a88:	rts

00002a8a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    2a8a:	       moveq #-1,d0
    2a8c:	       cmp.l 4(sp),d0
    2a90:	   /-- bne.s 2a96 <resourceNameFromNum+0xc>
    2a92:	   |   moveq #0,d0
    2a94:	/--|-- bra.s 2ace <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    2a96:	|  \-> move.l 1877e <numResourceNames>,d0
    2a9c:	|  /-- bne.s 2aa6 <resourceNameFromNum+0x1c>
    2a9e:	|  |   move.l #88676,d0
    2aa4:	+--|-- bra.s 2ace <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    2aa6:	|  \-> move.l 1877e <numResourceNames>,d0
    2aac:	|      cmp.l 4(sp),d0
    2ab0:	|  /-- ble.s 2ac8 <resourceNameFromNum+0x3e>
    2ab2:	|  |   move.l 18736 <allResourceNames>,d1
    2ab8:	|  |   move.l 4(sp),d0
    2abc:	|  |   add.l d0,d0
    2abe:	|  |   add.l d0,d0
    2ac0:	|  |   movea.l d1,a0
    2ac2:	|  |   adda.l d0,a0
    2ac4:	|  |   move.l (a0),d0
    2ac6:	+--|-- bra.s 2ace <resourceNameFromNum+0x44>
	return "Unknown resource";
    2ac8:	|  \-> move.l #88685,d0
    2ace:	\----> rts

00002ad0 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    2ad0:	          lea -40(sp),sp
    2ad4:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    2ad8:	          move.l #320,186f6 <winWidth>
    winHeight = 256;
    2ae2:	          move.l #256,186fa <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    2aec:	          tst.l 56(sp)
    2af0:	      /-- bne.s 2b08 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    2af2:	      |   pea 15a7e <PutChar+0x488>
    2af8:	      |   jsr b8 <copyString>
    2afe:	      |   addq.l #4,sp
    2b00:	      |   move.l d0,1870e <bundleFolder>
    2b06:	   /--|-- bra.s 2b1e <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    2b08:	   |  \-> movea.l 60(sp),a0
    2b0c:	   |      move.l (a0),d0
    2b0e:	   |      move.l d0,-(sp)
    2b10:	   |      jsr b8 <copyString>
    2b16:	   |      addq.l #4,sp
    2b18:	   |      move.l d0,1870e <bundleFolder>
	}
    
	int lastSlash = -1;
    2b1e:	   \----> moveq #-1,d0
    2b20:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    2b24:	          clr.l 40(sp)
    2b28:	   /----- bra.s 2b4a <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    2b2a:	/--|----> move.l 1870e <bundleFolder>,d1
    2b30:	|  |      move.l 40(sp),d0
    2b34:	|  |      movea.l d1,a0
    2b36:	|  |      adda.l d0,a0
    2b38:	|  |      move.b (a0),d0
    2b3a:	|  |      cmpi.b #47,d0
    2b3e:	|  |  /-- bne.s 2b46 <main_sludge+0x76>
    2b40:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    2b46:	|  |  \-> addq.l #1,40(sp)
    2b4a:	|  \----> move.l 1870e <bundleFolder>,d1
    2b50:	|         move.l 40(sp),d0
    2b54:	|         movea.l d1,a0
    2b56:	|         adda.l d0,a0
    2b58:	|         move.b (a0),d0
    2b5a:	\-------- bne.s 2b2a <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    2b5c:	          move.l 1870e <bundleFolder>,d0
    2b62:	          move.l 44(sp),d1
    2b66:	          addq.l #1,d1
    2b68:	          movea.l d0,a0
    2b6a:	          adda.l d1,a0
    2b6c:	          clr.b (a0)

	if (argc > 1) {
    2b6e:	          moveq #1,d0
    2b70:	          cmp.l 56(sp),d0
    2b74:	      /-- bge.s 2b90 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    2b76:	      |   move.l 56(sp),d0
    2b7a:	      |   addi.l #1073741823,d0
    2b80:	      |   add.l d0,d0
    2b82:	      |   add.l d0,d0
    2b84:	      |   movea.l 60(sp),a0
    2b88:	      |   adda.l d0,a0
    2b8a:	      |   move.l (a0),48(sp)
    2b8e:	   /--|-- bra.s 2bea <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    2b90:	   |  \-> move.l 1870e <bundleFolder>,d0
    2b96:	   |      pea 15a84 <PutChar+0x48e>
    2b9c:	   |      move.l d0,-(sp)
    2b9e:	   |      jsr 12006 <joinStrings>
    2ba4:	   |      addq.l #8,sp
    2ba6:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    2baa:	   |      move.l 48(sp),-(sp)
    2bae:	   |      jsr 11f00 <fileExists>
    2bb4:	   |      addq.l #4,sp
    2bb6:	   |      tst.b d0
    2bb8:	   +----- bne.s 2bea <main_sludge+0x11a>
			FreeVec(sludgeFile);
    2bba:	   |      move.l 48(sp),36(sp)
    2bc0:	   |      move.l 187a2 <SysBase>,d0
    2bc6:	   |      movea.l d0,a6
    2bc8:	   |      movea.l 36(sp),a1
    2bcc:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    2bd0:	   |      move.l 1870e <bundleFolder>,d0
    2bd6:	   |      pea 15a91 <PutChar+0x49b>
    2bdc:	   |      move.l d0,-(sp)
    2bde:	   |      jsr 12006 <joinStrings>
    2be4:	   |      addq.l #8,sp
    2be6:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    2bea:	   \----> pea 15a9a <PutChar+0x4a4>
    2bf0:	          jsr 14b22 <KPrintF>
    2bf6:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    2bf8:	          move.l 48(sp),-(sp)
    2bfc:	          jsr 11f00 <fileExists>
    2c02:	          addq.l #4,sp
    2c04:	          tst.b d0
    2c06:	      /-- bne.s 2c5e <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    2c08:	      |   move.l 187aa <DOSBase>,d0
    2c0e:	      |   movea.l d0,a6
    2c10:	      |   jsr -60(a6)
    2c14:	      |   move.l d0,28(sp)
    2c18:	      |   move.l 28(sp),d0
    2c1c:	      |   move.l d0,24(sp)
    2c20:	      |   move.l #88730,20(sp)
    2c28:	      |   moveq #21,d0
    2c2a:	      |   move.l d0,16(sp)
    2c2e:	      |   move.l 187aa <DOSBase>,d0
    2c34:	      |   movea.l d0,a6
    2c36:	      |   move.l 24(sp),d1
    2c3a:	      |   move.l 20(sp),d2
    2c3e:	      |   move.l 16(sp),d3
    2c42:	      |   jsr -48(a6)
    2c46:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    2c4a:	      |   pea 15a9a <PutChar+0x4a4>
    2c50:	      |   jsr 14b22 <KPrintF>
    2c56:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    2c58:	      |   moveq #0,d0
    2c5a:	/-----|-- bra.w 2e48 <main_sludge+0x378>
	}

	KPrintF("Setgamefilepath\n");
    2c5e:	|     \-> pea 15ab0 <PutChar+0x4ba>
    2c64:	|         jsr 14b22 <KPrintF>
    2c6a:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    2c6c:	|         move.l 48(sp),-(sp)
    2c70:	|         jsr 2e52 <setGameFilePath>
    2c76:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    2c78:	|         move.l 48(sp),-(sp)
    2c7c:	|         jsr 4186 <initSludge>
    2c82:	|         addq.l #4,sp
    2c84:	|         tst.w d0
    2c86:	|     /-- bne.s 2c8e <main_sludge+0x1be>
    2c88:	|     |   moveq #0,d0
    2c8a:	+-----|-- bra.w 2e48 <main_sludge+0x378>
	
	if( winWidth != 320 || winHeight != 256) {
    2c8e:	|     \-> move.l 186f6 <winWidth>,d0
    2c94:	|         cmpi.l #320,d0
    2c9a:	|     /-- bne.s 2caa <main_sludge+0x1da>
    2c9c:	|     |   move.l 186fa <winHeight>,d0
    2ca2:	|     |   cmpi.l #256,d0
    2ca8:	|  /--|-- beq.s 2ccc <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    2caa:	|  |  \-> pea 15ac1 <PutChar+0x4cb>
    2cb0:	|  |      jsr 14b22 <KPrintF>
    2cb6:	|  |      addq.l #4,sp
		winWidth = 320;
    2cb8:	|  |      move.l #320,186f6 <winWidth>
		winHeight = 256;
    2cc2:	|  |      move.l #256,186fa <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    2ccc:	|  \----> pea 15b3e <PutChar+0x548>
    2cd2:	|         jsr 14b22 <KPrintF>
    2cd8:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    2cda:	|         move.l 186fa <winHeight>,d0
    2ce0:	|         move.l d0,d1
    2ce2:	|         move.l 186f6 <winWidth>,d0
    2ce8:	|         move.l d1,-(sp)
    2cea:	|         move.l d0,-(sp)
    2cec:	|         jsr b7ee <resizeBackdrop>
    2cf2:	|         addq.l #8,sp
    2cf4:	|         tst.w d0
    2cf6:	|     /-- bne.s 2d0c <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    2cf8:	|     |   pea 15b51 <PutChar+0x55b>
    2cfe:	|     |   jsr 14b22 <KPrintF>
    2d04:	|     |   addq.l #4,sp
		return FALSE;
    2d06:	|     |   moveq #0,d0
    2d08:	+-----|-- bra.w 2e48 <main_sludge+0x378>
	}

	KPrintF("Init People\n");
    2d0c:	|     \-> pea 15b77 <PutChar+0x581>
    2d12:	|         jsr 14b22 <KPrintF>
    2d18:	|         addq.l #4,sp
	if (! initPeople ())
    2d1a:	|         jsr 8eb6 <initPeople>
    2d20:	|         tst.w d0
    2d22:	|     /-- bne.s 2d38 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    2d24:	|     |   pea 15b84 <PutChar+0x58e>
    2d2a:	|     |   jsr 14b22 <KPrintF>
    2d30:	|     |   addq.l #4,sp
		return FALSE;
    2d32:	|     |   moveq #0,d0
    2d34:	+-----|-- bra.w 2e48 <main_sludge+0x378>
	}

	KPrintF("Init Floor\n");
    2d38:	|     \-> pea 15ba5 <PutChar+0x5af>
    2d3e:	|         jsr 14b22 <KPrintF>
    2d44:	|         addq.l #4,sp
	if (! initFloor ())
    2d46:	|         jsr 13ed8 <initFloor>
    2d4c:	|         tst.w d0
    2d4e:	|     /-- bne.s 2d64 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    2d50:	|     |   pea 15bb1 <PutChar+0x5bb>
    2d56:	|     |   jsr 14b22 <KPrintF>
    2d5c:	|     |   addq.l #4,sp
		
		return FALSE;
    2d5e:	|     |   moveq #0,d0
    2d60:	+-----|-- bra.w 2e48 <main_sludge+0x378>
	}

	KPrintF("Init Objecttype\n");
    2d64:	|     \-> pea 15bd1 <PutChar+0x5db>
    2d6a:	|         jsr 14b22 <KPrintF>
    2d70:	|         addq.l #4,sp
	if (! initObjectTypes ())
    2d72:	|         jsr b9aa <initObjectTypes>
    2d78:	|         tst.w d0
    2d7a:	|     /-- bne.s 2d90 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    2d7c:	|     |   pea 15be2 <PutChar+0x5ec>
    2d82:	|     |   jsr 14b22 <KPrintF>
    2d88:	|     |   addq.l #4,sp
		return FALSE;
    2d8a:	|     |   moveq #0,d0
    2d8c:	+-----|-- bra.w 2e48 <main_sludge+0x378>
	}

	KPrintF("Init speech\n");
    2d90:	|     \-> pea 15c08 <PutChar+0x612>
    2d96:	|         jsr 14b22 <KPrintF>
    2d9c:	|         addq.l #4,sp
	initSpeech ();
    2d9e:	|         jsr 6560 <initSpeech>
	KPrintF("Init status bar\n");
    2da4:	|         pea 15c15 <PutChar+0x61f>
    2daa:	|         jsr 14b22 <KPrintF>
    2db0:	|         addq.l #4,sp
	initStatusBar ();
    2db2:	|         jsr 6024 <initStatusBar>

	KPrintF("Get numbered string\n");
    2db8:	|         pea 15c26 <PutChar+0x630>
    2dbe:	|         jsr 14b22 <KPrintF>
    2dc4:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    2dc6:	|         pea 1 <_start+0x1>
    2dca:	|         jsr 5342 <getNumberedString>
    2dd0:	|         addq.l #4,sp
    2dd2:	|         move.l d0,18706 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    2dd8:	|         pea 15c3b <PutChar+0x645>
    2dde:	|         jsr 14b22 <KPrintF>
    2de4:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    2de6:	|         move.l 18772 <noStack>,d0
    2dec:	|         pea 1 <_start+0x1>
    2df0:	|         move.l d0,-(sp)
    2df2:	|         clr.l -(sp)
    2df4:	|         clr.l -(sp)
    2df6:	|         clr.l -(sp)
    2df8:	|         jsr 51ca <startNewFunctionNum>
    2dfe:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    2e02:	|         pea 15c53 <PutChar+0x65d>
    2e08:	|         jsr 14b22 <KPrintF>
    2e0e:	|         addq.l #4,sp

	weAreDoneSoQuit = 0;
    2e10:	|         clr.l 18712 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {				
    2e16:	|     /-- bra.s 2e2a <main_sludge+0x35a>
		sludgeDisplay ();
    2e18:	|  /--|-> jsr 5160 <sludgeDisplay>
		handleInput();
    2e1e:	|  |  |   jsr 417e <handleInput>
		WaitVbl();
    2e24:	|  |  |   jsr 14a56 <WaitVbl>
	while ( !weAreDoneSoQuit ) {				
    2e2a:	|  |  \-> move.l 18712 <weAreDoneSoQuit>,d0
    2e30:	|  \----- beq.s 2e18 <main_sludge+0x348>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    2e32:	|         move.l 48(sp),32(sp)
    2e38:	|         move.l 187a2 <SysBase>,d0
    2e3e:	|         movea.l d0,a6
    2e40:	|         movea.l 32(sp),a1
    2e44:	|         jsr -690(a6)
}
    2e48:	\-------> movem.l (sp)+,d2-d3/a6
    2e4c:	          lea 40(sp),sp
    2e50:	          rts

00002e52 <setGameFilePath>:

void setGameFilePath (char * f) {
    2e52:	          lea -1104(sp),sp
    2e56:	          move.l a6,-(sp)
    2e58:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    2e5a:	          move.l #1112,d0
    2e60:	          add.l sp,d0
    2e62:	          addi.l #-1102,d0
    2e68:	          move.l d0,1100(sp)
    2e6c:	          move.l #998,1096(sp)
    2e74:	          move.l 187aa <DOSBase>,d0
    2e7a:	          movea.l d0,a6
    2e7c:	          move.l 1100(sp),d1
    2e80:	          move.l 1096(sp),d2
    2e84:	          jsr -564(a6)
    2e88:	          move.w d0,1094(sp)
    2e8c:	          move.w 1094(sp),d0
    2e90:	      /-- bne.s 2ea0 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    2e92:	      |   pea 15c66 <PutChar+0x670>
    2e98:	      |   jsr 14b22 <KPrintF>
    2e9e:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    2ea0:	      \-> moveq #-1,d0
    2ea2:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    2ea6:	          clr.l 1104(sp)
    2eaa:	   /----- bra.s 2ec8 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    2eac:	/--|----> move.l 1104(sp),d0
    2eb0:	|  |      movea.l 1116(sp),a0
    2eb4:	|  |      adda.l d0,a0
    2eb6:	|  |      move.b (a0),d0
    2eb8:	|  |      cmpi.b #47,d0
    2ebc:	|  |  /-- bne.s 2ec4 <setGameFilePath+0x72>
    2ebe:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    2ec4:	|  |  \-> addq.l #1,1104(sp)
    2ec8:	|  \----> move.l 1104(sp),d0
    2ecc:	|         movea.l 1116(sp),a0
    2ed0:	|         adda.l d0,a0
    2ed2:	|         move.b (a0),d0
    2ed4:	\-------- bne.s 2eac <setGameFilePath+0x5a>
	}

	if (got != -1) {
    2ed6:	          moveq #-1,d0
    2ed8:	          cmp.l 1108(sp),d0
    2edc:	   /----- beq.s 2f56 <setGameFilePath+0x104>
		f[got] = 0;	
    2ede:	   |      move.l 1108(sp),d0
    2ee2:	   |      movea.l 1116(sp),a0
    2ee6:	   |      adda.l d0,a0
    2ee8:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    2eea:	   |      move.l 1116(sp),1090(sp)
    2ef0:	   |      moveq #-2,d0
    2ef2:	   |      move.l d0,1086(sp)
    2ef6:	   |      move.l 187aa <DOSBase>,d0
    2efc:	   |      movea.l d0,a6
    2efe:	   |      move.l 1090(sp),d1
    2f02:	   |      move.l 1086(sp),d2
    2f06:	   |      jsr -84(a6)
    2f0a:	   |      move.l d0,1082(sp)
    2f0e:	   |      move.l 1082(sp),d0
    2f12:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    2f16:	   |      move.l 1078(sp),1074(sp)
    2f1c:	   |      move.l 187aa <DOSBase>,d0
    2f22:	   |      movea.l d0,a6
    2f24:	   |      move.l 1074(sp),d1
    2f28:	   |      jsr -126(a6)
    2f2c:	   |      move.l d0,1070(sp)
    2f30:	   |      move.l 1070(sp),d0
    2f34:	   |  /-- bne.s 2f48 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    2f36:	   |  |   move.l 1116(sp),-(sp)
    2f3a:	   |  |   pea 15c8c <PutChar+0x696>
    2f40:	   |  |   jsr 14b22 <KPrintF>
    2f46:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    2f48:	   |  \-> move.l 1108(sp),d0
    2f4c:	   |      movea.l 1116(sp),a0
    2f50:	   |      adda.l d0,a0
    2f52:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    2f56:	   \----> move.l #400,1066(sp)
    2f5e:	          clr.l 1062(sp)
    2f62:	          move.l 187a2 <SysBase>,d0
    2f68:	          movea.l d0,a6
    2f6a:	          move.l 1066(sp),d0
    2f6e:	          move.l 1062(sp),d1
    2f72:	          jsr -684(a6)
    2f76:	          move.l d0,1058(sp)
    2f7a:	          move.l 1058(sp),d0
    2f7e:	          move.l d0,1870a <gamePath>
	if (gamePath==0) {
    2f84:	          move.l 1870a <gamePath>,d0
    2f8a:	      /-- bne.s 2f9e <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    2f8c:	      |   pea 15cbf <PutChar+0x6c9>
    2f92:	      |   jsr 14b22 <KPrintF>
    2f98:	      |   addq.l #4,sp
    2f9a:	   /--|-- bra.w 3086 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    2f9e:	   |  \-> move.l 1870a <gamePath>,1054(sp)
    2fa6:	   |      moveq #-2,d0
    2fa8:	   |      move.l d0,1050(sp)
    2fac:	   |      move.l 187aa <DOSBase>,d0
    2fb2:	   |      movea.l d0,a6
    2fb4:	   |      move.l 1054(sp),d1
    2fb8:	   |      move.l 1050(sp),d2
    2fbc:	   |      jsr -84(a6)
    2fc0:	   |      move.l d0,1046(sp)
    2fc4:	   |      move.l 1046(sp),d0
    2fc8:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    2fcc:	   |      move.l 1042(sp),1038(sp)
    2fd2:	   |      move.l 187aa <DOSBase>,d0
    2fd8:	   |      movea.l d0,a6
    2fda:	   |      move.l 1038(sp),d1
    2fde:	   |      jsr -126(a6)
    2fe2:	   |      move.l d0,1034(sp)
    2fe6:	   |      move.l 1034(sp),d0
    2fea:	   |  /-- bne.s 2ffa <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    2fec:	   |  |   pea 15cfa <PutChar+0x704>
    2ff2:	   |  |   jsr 14b22 <KPrintF>
    2ff8:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    2ffa:	   |  \-> move.l #1112,d0
    3000:	   |      add.l sp,d0
    3002:	   |      addi.l #-1102,d0
    3008:	   |      move.l d0,1030(sp)
    300c:	   |      moveq #-2,d0
    300e:	   |      move.l d0,1026(sp)
    3012:	   |      move.l 187aa <DOSBase>,d0
    3018:	   |      movea.l d0,a6
    301a:	   |      move.l 1030(sp),d1
    301e:	   |      move.l 1026(sp),d2
    3022:	   |      jsr -84(a6)
    3026:	   |      move.l d0,1022(sp)
    302a:	   |      move.l 1022(sp),d0
    302e:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    3032:	   |      move.l 1042(sp),1018(sp)
    3038:	   |      move.l 187aa <DOSBase>,d0
    303e:	   |      movea.l d0,a6
    3040:	   |      move.l 1018(sp),d1
    3044:	   |      jsr -126(a6)
    3048:	   |      move.l d0,1014(sp)
    304c:	   |      move.l 1014(sp),d0
    3050:	   |  /-- bne.s 3066 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    3052:	   |  |   moveq #10,d0
    3054:	   |  |   add.l sp,d0
    3056:	   |  |   move.l d0,-(sp)
    3058:	   |  |   pea 15d26 <PutChar+0x730>
    305e:	   |  |   jsr 14b22 <KPrintF>
    3064:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    3066:	   |  \-> move.l 1870a <gamePath>,d0
    306c:	   +----- beq.s 3086 <setGameFilePath+0x234>
    306e:	   |      move.l 1870a <gamePath>,1010(sp)
    3076:	   |      move.l 187a2 <SysBase>,d0
    307c:	   |      movea.l d0,a6
    307e:	   |      movea.l 1010(sp),a1
    3082:	   |      jsr -690(a6)
}
    3086:	   \----> move.l (sp)+,d2
    3088:	          movea.l (sp)+,a6
    308a:	          lea 1104(sp),sp
    308e:	          rts

00003090 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    3090:	/-------> lea -16(sp),sp
    3094:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    3096:	|         move.l 24(sp),-(sp)
    309a:	|         jsr 4f42 <pauseFunction>
    30a0:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    30a2:	|     /-- bra.s 30b4 <abortFunction+0x24>
    30a4:	|  /--|-> moveq #24,d0
    30a6:	|  |  |   add.l 24(sp),d0
    30aa:	|  |  |   move.l d0,-(sp)
    30ac:	|  |  |   jsr 1345e <trimStack>
    30b2:	|  |  |   addq.l #4,sp
    30b4:	|  |  \-> movea.l 24(sp),a0
    30b8:	|  |      move.l 24(a0),d0
    30bc:	|  \----- bne.s 30a4 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    30be:	|         movea.l 24(sp),a0
    30c2:	|         move.l 4(a0),12(sp)
    30c8:	|         move.l 187a2 <SysBase>,d0
    30ce:	|         movea.l d0,a6
    30d0:	|         movea.l 12(sp),a1
    30d4:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    30d8:	|         clr.l 16(sp)
    30dc:	|     /-- bra.s 30fc <abortFunction+0x6c>
    30de:	|  /--|-> movea.l 24(sp),a0
    30e2:	|  |  |   move.l 20(a0),d1
    30e6:	|  |  |   move.l 16(sp),d0
    30ea:	|  |  |   lsl.l #3,d0
    30ec:	|  |  |   add.l d1,d0
    30ee:	|  |  |   move.l d0,-(sp)
    30f0:	|  |  |   jsr 12d28 <unlinkVar>
    30f6:	|  |  |   addq.l #4,sp
    30f8:	|  |  |   addq.l #1,16(sp)
    30fc:	|  |  \-> movea.l 24(sp),a0
    3100:	|  |      move.l 8(a0),d0
    3104:	|  |      cmp.l 16(sp),d0
    3108:	|  \----- bgt.s 30de <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    310a:	|         movea.l 24(sp),a0
    310e:	|         move.l 20(a0),8(sp)
    3114:	|         move.l 187a2 <SysBase>,d0
    311a:	|         movea.l d0,a6
    311c:	|         movea.l 8(sp),a1
    3120:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    3124:	|         moveq #28,d0
    3126:	|         add.l 24(sp),d0
    312a:	|         move.l d0,-(sp)
    312c:	|         jsr 12d28 <unlinkVar>
    3132:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    3134:	|         movea.l 24(sp),a0
    3138:	|         move.l 40(a0),d0
    313c:	|     /-- beq.s 314e <abortFunction+0xbe>
    313e:	|     |   movea.l 24(sp),a0
    3142:	|     |   move.l 40(a0),d0
    3146:	|     |   move.l d0,-(sp)
    3148:	\-----|-- jsr 3090 <abortFunction>(pc)
    314c:	      |   addq.l #4,sp
	FreeVec(fun);
    314e:	      \-> move.l 24(sp),4(sp)
    3154:	          move.l 187a2 <SysBase>,d0
    315a:	          movea.l d0,a6
    315c:	          movea.l 4(sp),a1
    3160:	          jsr -690(a6)
	fun = NULL;
    3164:	          clr.l 24(sp)
}
    3168:	          nop
    316a:	          movea.l (sp)+,a6
    316c:	          lea 16(sp),sp
    3170:	          rts

00003172 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    3172:	          subq.l #8,sp
	int n = 0;
    3174:	          clr.l 4(sp)
	*killedMyself = FALSE;
    3178:	          movea.l 20(sp),a0
    317c:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    317e:	          move.l 1873a <allRunningFunctions>,(sp)
	while (fun) {
    3184:	   /----- bra.s 31b2 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    3186:	/--|----> movea.l (sp),a0
    3188:	|  |      move.l (a0),d0
    318a:	|  |      cmp.l 12(sp),d0
    318e:	|  |  /-- bne.s 31ac <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    3190:	|  |  |   movea.l (sp),a0
    3192:	|  |  |   move.w #1,54(a0)
			n++;
    3198:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    319c:	|  |  |   move.l (sp),d0
    319e:	|  |  |   cmp.l 16(sp),d0
    31a2:	|  |  +-- bne.s 31ac <cancelAFunction+0x3a>
    31a4:	|  |  |   movea.l 20(sp),a0
    31a8:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    31ac:	|  |  \-> movea.l (sp),a0
    31ae:	|  |      move.l 44(a0),(sp)
	while (fun) {
    31b2:	|  \----> tst.l (sp)
    31b4:	\-------- bne.s 3186 <cancelAFunction+0x14>
	}
	return n;
    31b6:	          move.l 4(sp),d0
}
    31ba:	          addq.l #8,sp
    31bc:	          rts

000031be <completeTimers>:


void completeTimers () {
    31be:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    31c0:	          move.l 1873a <allRunningFunctions>,(sp)

	while (thisFunction) {
    31c6:	   /----- bra.s 31dc <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    31c8:	/--|----> movea.l (sp),a0
    31ca:	|  |      move.b 56(a0),d0
    31ce:	|  |  /-- bne.s 31d6 <completeTimers+0x18>
    31d0:	|  |  |   movea.l (sp),a0
    31d2:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    31d6:	|  |  \-> movea.l (sp),a0
    31d8:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    31dc:	|  \----> tst.l (sp)
    31de:	\-------- bne.s 31c8 <completeTimers+0xa>
	}
}
    31e0:	          nop
    31e2:	          nop
    31e4:	          addq.l #4,sp
    31e6:	          rts

000031e8 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    31e8:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    31ec:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    31f2:	                                                             movea.l 80(sp),a0
    31f6:	                                                             move.w 54(a0),d0
    31fa:	/----------------------------------------------------------- beq.w 409a <continueFunction+0xeb2>
		abortFunction (fun);
    31fe:	|                                                            move.l 80(sp),-(sp)
    3202:	|                                                            jsr 3090 <abortFunction>
    3208:	|                                                            addq.l #4,sp
		return TRUE;
    320a:	|                                                            moveq #1,d0
    320c:	|  /-------------------------------------------------------- bra.w 40a4 <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    3210:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    3216:	|  |  |                                                      movea.l 80(sp),a0
    321a:	|  |  |                                                      move.l 4(a0),d1
    321e:	|  |  |                                                      movea.l 80(sp),a0
    3222:	|  |  |                                                      move.l 36(a0),d0
    3226:	|  |  |                                                      lsl.l #3,d0
    3228:	|  |  |                                                      movea.l d1,a0
    322a:	|  |  |                                                      adda.l d0,a0
    322c:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    3232:	|  |  |                                                      movea.l 80(sp),a0
    3236:	|  |  |                                                      move.l 4(a0),d1
    323a:	|  |  |                                                      movea.l 80(sp),a0
    323e:	|  |  |                                                      move.l 36(a0),d0
    3242:	|  |  |                                                      lsl.l #3,d0
    3244:	|  |  |                                                      movea.l d1,a0
    3246:	|  |  |                                                      adda.l d0,a0
    3248:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    324c:	|  |  |                                                      move.l 64(sp),-(sp)
    3250:	|  |  |                                                      pea 15e2e <PutChar+0x838>
    3256:	|  |  |                                                      jsr 14b22 <KPrintF>
    325c:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    325e:	|  |  |                                                      moveq #41,d0
    3260:	|  |  |                                                      cmp.l 64(sp),d0
    3264:	|  |  |  /-------------------------------------------------- bcs.w 404e <continueFunction+0xe66>
    3268:	|  |  |  |                                                   move.l 64(sp),d0
    326c:	|  |  |  |                                                   add.l d0,d0
    326e:	|  |  |  |                                                   movea.l d0,a0
    3270:	|  |  |  |                                                   adda.l #12924,a0
    3276:	|  |  |  |                                                   move.w (a0),d0
    3278:	|  |  |  |                                                   jmp (327c <continueFunction+0x94>,pc,d0.w)
    327c:	|  |  |  |                                                   bset d6,(a2)
    327e:	|  |  |  |                                                   ori.w #2670,(a4)
    3282:	|  |  |  |                                                   eori.w #2416,d6
    3286:	|  |  |  |                                                   bchg d4,d2
    3288:	|  |  |  |                                                   bclr d4,(a4)+
    328a:	|  |  |  |                                                   andi.l #181013194,d4
    3290:	|  |  |  |                                                   .short 0x0aca
    3292:	|  |  |  |                                                   .short 0x0aca
    3294:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    329c:	|  |  |  |                                                   .short 0x0aca
    329e:	|  |  |  |                                                   andi.w #906,-(a4)
    32a2:	|  |  |  |                                                   bchg d1,196(a2)
    32a6:	|  |  |  |                                                   bset d1,580(a4)
    32aa:	|  |  |  |                                                   bclr d1,2576(a2)
    32ae:	|  |  |  |                                                   andi.b #-56,2762(a2)
    32b4:	|  |  |  |                                                   .short 0x0aca
    32b6:	|  |  |  |                                                   eori.l #63572682,d0
    32bc:	|  |  |  |                                                   .short 0x0aca
    32be:	|  |  |  |                                                   bchg d3,-(a2)
    32c0:	|  |  |  |                                                   bchg #-36,(a2)
    32c4:	|  |  |  |                                                   .short 0x08cc
    32c6:	|  |  |  |                                                   addi.b #14,1038(a0)
    32cc:	|  |  |  |                                                   .short 0x040e
    32ce:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    32d2:	|  |  |  |                                                   ori.w #8232,(a0)
    32d6:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    32dc:	|  |  |  |                                                   ori.w #12136,(a0)
    32e0:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    32e6:	|  |  |  |                                                   ori.w #12328,(a0)
    32ea:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    32f0:	|  |  |  |                                                   add.l 44(sp),d1
    32f4:	|  |  |  |                                                   moveq #28,d0
    32f6:	|  |  |  |                                                   add.l 80(sp),d0
    32fa:	|  |  |  |                                                   move.l d1,-(sp)
    32fc:	|  |  |  |                                                   move.l d0,-(sp)
    32fe:	|  |  |  |                                                   jsr 12f94 <copyVariable>
    3304:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    3306:	|  |  |  |                                                   move.l 80(sp),-(sp)
    330a:	|  |  |  |                                                   jsr 40aa <finishFunction>
    3310:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    3312:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    3318:	|  |  |  |                                                   move.l 80(sp),-(sp)
    331c:	|  |  |  |                                                   jsr 4f84 <restartFunction>
    3322:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    3324:	|  |  |  |  /----------------------------------------------- bra.w 4082 <continueFunction+0xe9a>
				finishFunction (fun);
    3328:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    332c:	|  |  |  |  |                                                jsr 40aa <finishFunction>
    3332:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    3334:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    3338:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    333c:	|  |  |  |  +----------------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    3340:	|  |  |  |  |                                                movea.l 80(sp),a0
    3344:	|  |  |  |  |                                                move.l 28(a0),d0
    3348:	|  |  |  |  |                                                moveq #2,d1
    334a:	|  |  |  |  |                                                cmp.l d0,d1
    334c:	|  |  |  |  |                                            /-- beq.s 3358 <continueFunction+0x170>
    334e:	|  |  |  |  |                                            |   moveq #4,d1
    3350:	|  |  |  |  |                                            |   cmp.l d0,d1
    3352:	|  |  |  |  |                                         /--|-- beq.s 33a6 <continueFunction+0x1be>
    3354:	|  |  |  |  |                                /--------|--|-- bra.w 348e <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    3358:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    335c:	|  |  |  |  |                                |        |      jsr 4f42 <pauseFunction>
    3362:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    3364:	|  |  |  |  |                                |        |      moveq #24,d0
    3366:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    336a:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    336e:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    3372:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    3376:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    3378:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    337c:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    3380:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    3382:	|  |  |  |  |                                |        |      jsr 51ca <startNewFunctionNum>
    3388:	|  |  |  |  |                                |        |      lea 20(sp),sp
    338c:	|  |  |  |  |                                |        |      tst.l d0
    338e:	|  |  |  |  |                                |        |  /-- bne.s 3396 <continueFunction+0x1ae>
    3390:	|  |  |  |  |                                |        |  |   clr.w d0
    3392:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 40a4 <continueFunction+0xebc>
				fun = allRunningFunctions;
    3396:	|  |  |  |  |                                |        |  \-> move.l 1873a <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    339e:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    33a2:	|  |  |  |  |                                |  /-----|----- bra.w 34a2 <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    33a6:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    33aa:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    33ae:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    33b2:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    33b6:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    33b8:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    33ba:	|  |  |  |  |                                |  |            jsr 117bc <callBuiltIn>
    33c0:	|  |  |  |  |                                |  |            lea 12(sp),sp
    33c4:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    33c8:	|  |  |  |  |                                |  |            moveq #5,d0
    33ca:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    33ce:	|  |  |  |  |                                |  |  /-------- bcs.w 348a <continueFunction+0x2a2>
    33d2:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    33d6:	|  |  |  |  |                                |  |  |         add.l d0,d0
    33d8:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    33da:	|  |  |  |  |                                |  |  |         adda.l #13286,a0
    33e0:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    33e2:	|  |  |  |  |                                |  |  |         jmp (33e6 <continueFunction+0x1fe>,pc,d0.w)
    33e6:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    33ec:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    33f0:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    33f6:	|  |  |  |  |                                |  |  |         addq.w #7,d2
    33f8:	|  |  |  |  |                                |  |  |         jsr 14b22 <KPrintF>
    33fe:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    3400:	|  |  |  |  |                                |  |  |         clr.w d0
    3402:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 40a4 <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    3406:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    340a:	|  |  |  |  |                                |  |  |         jsr 4f42 <pauseFunction>
    3410:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    3412:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    3416:	|  |  |  |  |                                |  |  |  /----- bra.s 348c <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    3418:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    341c:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    3420:	|  |  |  |  |                                |  |  |  +----- bra.s 348c <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    3422:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    3426:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    342c:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    342e:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    3432:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    3436:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    343a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    343c:	|  |  |  |  |                                |  |  |  |      jsr 133cc <setVariable>
    3442:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    3446:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    344a:	|  |  |  |  |                                |  |  |  |      jsr 4f42 <pauseFunction>
    3450:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    3452:	|  |  |  |  |                                |  |  |  |      move.l 18772 <noStack>,d1
    3458:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    345c:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    345e:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    3460:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    3464:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    3466:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    3468:	|  |  |  |  |                                |  |  |  |      jsr 51ca <startNewFunctionNum>
    346e:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    3472:	|  |  |  |  |                                |  |  |  |      tst.l d0
    3474:	|  |  |  |  |                                |  |  |  |  /-- bne.s 347c <continueFunction+0x294>
    3476:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    3478:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 40a4 <continueFunction+0xebc>
							fun = allRunningFunctions;
    347c:	|  |  |  |  |                                |  |  |  |  \-> move.l 1873a <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    3484:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    3488:	|  |  |  |  |                                |  |  |  +----- bra.s 348c <continueFunction+0x2a4>

						default:
						break;
    348a:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    348c:	|  |  |  |  |                                |  +-----\----X bra.s 34a2 <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    348e:	|  |  |  |  |                                \--|----------> pea 15e8d <PutChar+0x897>
    3494:	|  |  |  |  |                                   |            jsr 14b22 <KPrintF>
    349a:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    349c:	|  |  |  |  |                                   |            clr.w d0
    349e:	|  +--|--|--|-----------------------------------|----------- bra.w 40a4 <continueFunction+0xebc>
			}
			break;
    34a2:	|  |  |  |  +-----------------------------------\----------X bra.w 4082 <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    34a6:	|  |  |  |  |                                                moveq #28,d0
    34a8:	|  |  |  |  |                                                add.l 80(sp),d0
    34ac:	|  |  |  |  |                                                clr.l -(sp)
    34ae:	|  |  |  |  |                                                clr.l -(sp)
    34b0:	|  |  |  |  |                                                move.l d0,-(sp)
    34b2:	|  |  |  |  |                                                jsr 133cc <setVariable>
    34b8:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    34bc:	|  |  |  |  +----------------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    34c0:	|  |  |  |  |                                                move.l 68(sp),d1
    34c4:	|  |  |  |  |                                                moveq #28,d0
    34c6:	|  |  |  |  |                                                add.l 80(sp),d0
    34ca:	|  |  |  |  |                                                move.l d1,-(sp)
    34cc:	|  |  |  |  |                                                pea 5 <_start+0x5>
    34d0:	|  |  |  |  |                                                move.l d0,-(sp)
    34d2:	|  |  |  |  |                                                jsr 133cc <setVariable>
    34d8:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    34dc:	|  |  |  |  +----------------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    34e0:	|  |  |  |  |                                                move.l 68(sp),d1
    34e4:	|  |  |  |  |                                                moveq #28,d0
    34e6:	|  |  |  |  |                                                add.l 80(sp),d0
    34ea:	|  |  |  |  |                                                move.l d1,-(sp)
    34ec:	|  |  |  |  |                                                pea 1 <_start+0x1>
    34f0:	|  |  |  |  |                                                move.l d0,-(sp)
    34f2:	|  |  |  |  |                                                jsr 133cc <setVariable>
    34f8:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    34fc:	|  |  |  |  +----------------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    3500:	|  |  |  |  |                                                moveq #28,d0
    3502:	|  |  |  |  |                                                add.l 80(sp),d0
    3506:	|  |  |  |  |                                                movea.l 80(sp),a0
    350a:	|  |  |  |  |                                                movea.l 20(a0),a0
    350e:	|  |  |  |  |                                                move.l 68(sp),d1
    3512:	|  |  |  |  |                                                lsl.l #3,d1
    3514:	|  |  |  |  |                                                add.l a0,d1
    3516:	|  |  |  |  |                                                move.l d0,-(sp)
    3518:	|  |  |  |  |                                                move.l d1,-(sp)
    351a:	|  |  |  |  |                                                jsr 12f94 <copyVariable>
    3520:	|  |  |  |  |                                                addq.l #8,sp
    3522:	|  |  |  |  |                                                tst.w d0
    3524:	|  |  |  |  |  /-------------------------------------------- bne.w 4060 <continueFunction+0xe78>
    3528:	|  |  |  |  |  |                                             clr.w d0
    352a:	|  +--|--|--|--|-------------------------------------------- bra.w 40a4 <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    352e:	|  |  |  |  |  |                                             moveq #28,d0
    3530:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3534:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3536:	|  |  |  |  |  |                                             jsr 1301a <getBoolean>
    353c:	|  |  |  |  |  |                                             addq.l #4,sp
    353e:	|  |  |  |  |  |                                             tst.w d0
    3540:	|  |  |  |  |  |                                      /----- beq.s 355c <continueFunction+0x374>
    3542:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    3546:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    354a:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    354c:	|  |  |  |  |  |                                      |      jsr 1301a <getBoolean>
    3552:	|  |  |  |  |  |                                      |      addq.l #4,sp
    3554:	|  |  |  |  |  |                                      |      tst.w d0
    3556:	|  |  |  |  |  |                                      +----- beq.s 355c <continueFunction+0x374>
    3558:	|  |  |  |  |  |                                      |      moveq #1,d0
    355a:	|  |  |  |  |  |                                      |  /-- bra.s 355e <continueFunction+0x376>
    355c:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    355e:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3560:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3564:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3566:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    356a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    356c:	|  |  |  |  |  |                                             jsr 133cc <setVariable>
    3572:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3576:	|  |  |  |  |  |                                             moveq #24,d0
    3578:	|  |  |  |  |  |                                             add.l 80(sp),d0
    357c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    357e:	|  |  |  |  |  |                                             jsr 1345e <trimStack>
    3584:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3586:	|  |  |  |  +--|-------------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    358a:	|  |  |  |  |  |                                             moveq #28,d0
    358c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3590:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3592:	|  |  |  |  |  |                                             jsr 1301a <getBoolean>
    3598:	|  |  |  |  |  |                                             addq.l #4,sp
    359a:	|  |  |  |  |  |                                             tst.w d0
    359c:	|  |  |  |  |  |                                         /-- bne.s 35b4 <continueFunction+0x3cc>
    359e:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    35a2:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    35a6:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    35a8:	|  |  |  |  |  |                                         |   jsr 1301a <getBoolean>
    35ae:	|  |  |  |  |  |                                         |   addq.l #4,sp
    35b0:	|  |  |  |  |  |                                         |   tst.w d0
    35b2:	|  |  |  |  |  |                                      /--|-- beq.s 35b8 <continueFunction+0x3d0>
    35b4:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    35b6:	|  |  |  |  |  |                                      |  /-- bra.s 35ba <continueFunction+0x3d2>
    35b8:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    35ba:	|  |  |  |  |  |                                         \-> moveq #28,d1
    35bc:	|  |  |  |  |  |                                             add.l 80(sp),d1
    35c0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    35c2:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    35c6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    35c8:	|  |  |  |  |  |                                             jsr 133cc <setVariable>
    35ce:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    35d2:	|  |  |  |  |  |                                             moveq #24,d0
    35d4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    35d8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    35da:	|  |  |  |  |  |                                             jsr 1345e <trimStack>
    35e0:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    35e2:	|  |  |  |  +--|-------------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    35e6:	|  |  |  |  |  |                                             move.l 68(sp),d1
    35ea:	|  |  |  |  |  |                                             moveq #28,d0
    35ec:	|  |  |  |  |  |                                             add.l 80(sp),d0
    35f0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    35f2:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    35f6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    35f8:	|  |  |  |  |  |                                             jsr 133cc <setVariable>
    35fe:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3602:	|  |  |  |  +--|-------------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    3606:	|  |  |  |  |  |                                             move.l 68(sp),d1
    360a:	|  |  |  |  |  |                                             moveq #28,d0
    360c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3610:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3612:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    3616:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3618:	|  |  |  |  |  |                                             jsr 133cc <setVariable>
    361e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3622:	|  |  |  |  +--|-------------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    3626:	|  |  |  |  |  |                                             move.l 68(sp),d1
    362a:	|  |  |  |  |  |                                             moveq #28,d0
    362c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3630:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3632:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    3636:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3638:	|  |  |  |  |  |                                             jsr 133cc <setVariable>
    363e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3642:	|  |  |  |  +--|-------------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    3646:	|  |  |  |  |  |                                             move.l 18702 <dialogValue>,d0
    364c:	|  |  |  |  |  |                                             moveq #1,d1
    364e:	|  |  |  |  |  |                                             cmp.l d0,d1
    3650:	|  |  |  |  |  |  /----------------------------------------- beq.w 4064 <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    3654:	|  |  |  |  |  |  |                                          pea 15ea2 <PutChar+0x8ac>
    365a:	|  |  |  |  |  |  |                                          jsr 14b22 <KPrintF>
    3660:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    3662:	|  |  |  |  |  |  |                                          clr.w d0
    3664:	|  +--|--|--|--|--|----------------------------------------- bra.w 40a4 <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    3668:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    366c:	|  |  |  |  |  |  |                                          moveq #28,d0
    366e:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    3672:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    3674:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    3676:	|  |  |  |  |  |  |                                          jsr 12b5e <loadStringToVar>
    367c:	|  |  |  |  |  |  |                                          addq.l #8,sp
    367e:	|  |  |  |  |  |  |                                          tst.w d0
    3680:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 4068 <continueFunction+0xe80>
					return FALSE;
    3684:	|  |  |  |  |  |  |  |                                       clr.w d0
    3686:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 40a4 <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    368a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    368e:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3692:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3694:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    3696:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3698:	|  |  |  |  |  |  |  |                                /----- beq.s 36f6 <continueFunction+0x50e>
    369a:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    369c:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    369e:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 388a <continueFunction+0x6a2>
    36a2:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    36a4:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 36b0 <continueFunction+0x4c8>
    36a6:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    36a8:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    36aa:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 36f6 <continueFunction+0x50e>
    36ac:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 388a <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    36b0:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    36b2:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    36b6:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 36e2 <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    36b8:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    36ba:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    36be:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    36c0:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    36c2:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    36c4:	|  |  |  |  |  |  |  |              |                 |  |   jsr 133cc <setVariable>
    36ca:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    36ce:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    36d0:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    36d4:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    36d6:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1345e <trimStack>
    36dc:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    36de:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 38a0 <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    36e2:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 15ee3 <PutChar+0x8ed>
    36e8:	|  |  |  |  |  |  |  |              |  |              |      jsr 14b22 <KPrintF>
    36ee:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    36f0:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    36f2:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 40a4 <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    36f6:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    36fa:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    36fe:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    3702:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    3704:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 371a <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    3706:	|  |  |  |  |  |  |  |              |  |                 |   pea 15f1f <PutChar+0x929>
    370c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14b22 <KPrintF>
    3712:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    3714:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3716:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 40a4 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    371a:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    371c:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3720:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3722:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    3726:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    372a:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    372c:	|  |  |  |  |  |  |  |              |  |                     jsr 12ada <getValueType>
    3732:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    3736:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    3738:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3740 <continueFunction+0x558>
    373a:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    373c:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 40a4 <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3740:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    3744:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3748:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    374a:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    374c:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    374e:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3770 <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    3750:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    3754:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    3756:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    375a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    375e:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    3762:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    3764:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3766:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12764 <fastArrayGetByIndex>
    376c:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    376e:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 3790 <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    3770:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    3774:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    3776:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    377a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    377e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    3782:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    3784:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    3786:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    3788:	|  |  |  |  |  |  |  |              |  |              |      jsr 133ee <stackGetByIndex>
    378e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3790:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    3794:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    3796:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    379a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    379c:	|  |  |  |  |  |  |  |              |  |                     jsr 1345e <trimStack>
    37a2:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    37a4:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    37a8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 37c4 <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    37aa:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    37ac:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    37b0:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    37b2:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    37b4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    37b6:	|  |  |  |  |  |  |  |              |  |                 |   jsr 133cc <setVariable>
    37bc:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    37c0:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 389e <continueFunction+0x6b6>
    37c4:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    37c6:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    37ca:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 37d8 <continueFunction+0x5f0>
    37cc:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    37ce:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    37d2:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 3822 <continueFunction+0x63a>
    37d4:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 386a <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    37d8:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    37dc:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    37e0:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    37e4:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    37e6:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 12ada <getValueType>
    37ec:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    37f0:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    37f2:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 37fa <continueFunction+0x612>
    37f4:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    37f6:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 3884 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    37fa:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    37fc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    37fe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    3802:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    3804:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    3808:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    380a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 133cc <setVariable>
    3810:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    3814:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    3816:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    3818:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    381c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    3820:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 3888 <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3822:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    3826:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    382a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    382e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    3830:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 12ada <getValueType>
    3836:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    383a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    383c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 3842 <continueFunction+0x65a>
    383e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    3840:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 3884 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    3842:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    3844:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    3846:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    384a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    384c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3850:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    3852:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 133cc <setVariable>
    3858:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    385c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    385e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    3860:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    3864:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    3868:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 3888 <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    386a:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    386c:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    3870:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    3872:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    3876:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 12f94 <copyVariable>
    387c:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    387e:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    3880:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 389e <continueFunction+0x6b6>
    3882:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3884:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 40a4 <continueFunction+0xebc>
				break;
    3888:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 389e <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    388a:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 15f3d <PutChar+0x947>
    3890:	|  |  |  |  |  |  |  |                 |  |                  jsr 14b22 <KPrintF>
    3896:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    3898:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    389a:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 40a4 <continueFunction+0xebc>
				break;
    389e:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    38a0:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 4082 <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    38a4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    38a8:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    38ac:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    38ae:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    38b0:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    38b2:	|  |  |  |  |  |  |  |                                   /-- beq.s 38c0 <continueFunction+0x6d8>
    38b4:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    38b6:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    38b8:	|  |  |  |  |  |  |  |                                /--|-- beq.w 396c <continueFunction+0x784>
    38bc:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 39ca <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    38c0:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    38c4:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    38c8:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    38cc:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    38ce:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 38e4 <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    38d0:	|  |  |  |  |  |  |  |                             |  |  |   pea 15f1f <PutChar+0x929>
    38d6:	|  |  |  |  |  |  |  |                             |  |  |   jsr 14b22 <KPrintF>
    38dc:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    38de:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    38e0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 40a4 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    38e4:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    38e6:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    38ea:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    38ec:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    38f0:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    38f4:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    38f6:	|  |  |  |  |  |  |  |                             |  |      jsr 12ada <getValueType>
    38fc:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3900:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3902:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 390a <continueFunction+0x722>
    3904:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3906:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 40a4 <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    390a:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    390e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3912:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    3916:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    3918:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    391c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    391e:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    3922:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3926:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    392a:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    392c:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    392e:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    3930:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3932:	|  |  |  |  |  |  |  |                             |  |      jsr 5186 <stackSetByIndex>
    3938:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    393c:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    393e:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3946 <continueFunction+0x75e>
						return FALSE;
    3940:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3942:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 40a4 <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    3946:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    3948:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    394c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    394e:	|  |  |  |  |  |  |  |                             |  |      jsr 1345e <trimStack>
    3954:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    3956:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    3958:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    395c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    395e:	|  |  |  |  |  |  |  |                             |  |      jsr 1345e <trimStack>
    3964:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    3966:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    3968:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 4082 <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    396c:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    396e:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    3972:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    3974:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    3978:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    397c:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    397e:	|  |  |  |  |  |  |  |                             |         jsr 12ada <getValueType>
    3984:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    3988:	|  |  |  |  |  |  |  |                             |         tst.w d0
    398a:	|  |  |  |  |  |  |  |                             |     /-- bne.s 3992 <continueFunction+0x7aa>
    398c:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    398e:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 40a4 <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    3992:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    3996:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    3998:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    399c:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    39a0:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    39a4:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    39a6:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    39a8:	|  |  |  |  |  |  |  |                             |         jsr 12764 <fastArrayGetByIndex>
    39ae:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    39b0:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    39b4:	|  |  |  |  |  |  |  |                             |     /-- bne.s 39c4 <continueFunction+0x7dc>
    39b6:	|  |  |  |  |  |  |  |                             |     |   pea 15f61 <PutChar+0x96b>
    39bc:	|  |  |  |  |  |  |  |                             |     |   jsr 14b22 <KPrintF>
    39c2:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    39c4:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    39c6:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 40a4 <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    39ca:	|  |  |  |  |  |  |  |                             \-------> pea 15f3d <PutChar+0x947>
    39d0:	|  |  |  |  |  |  |  |                                       jsr 14b22 <KPrintF>
    39d6:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    39d8:	|  |  |  |  |  |  |  |                                       clr.w d0
    39da:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 40a4 <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    39de:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    39e2:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    39e6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    39ea:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    39ec:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    39ee:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    39f0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    39f4:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    39f8:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    39fa:	|  |  |  |  |  |  |  |                                       jsr 12ada <getValueType>
    3a00:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3a04:	|  |  |  |  |  |  |  |                                       tst.w d0
    3a06:	|  |  |  |  |  |  |  |                                   /-- bne.s 3a0e <continueFunction+0x826>
    3a08:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3a0a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 40a4 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    3a0e:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    3a12:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3a14:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3a18:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3a1a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3a1e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3a20:	|  |  |  |  |  |  |  |                                       jsr 133cc <setVariable>
    3a26:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    3a2a:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    3a2e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3a30:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    3a32:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3a36:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    3a3a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3a3e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3a40:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3a42:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3a44:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3a48:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3a4a:	|  |  |  |  |  |  |  |                                       jsr 133cc <setVariable>
    3a50:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3a54:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    3a58:	|  |  |  |  |  |  |  |                                       move.l 18750 <globalVars>,d1
    3a5e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3a62:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3a64:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    3a66:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3a68:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3a6c:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    3a70:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3a72:	|  |  |  |  |  |  |  |                                       jsr 12ada <getValueType>
    3a78:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3a7c:	|  |  |  |  |  |  |  |                                       tst.w d0
    3a7e:	|  |  |  |  |  |  |  |                                   /-- bne.s 3a86 <continueFunction+0x89e>
    3a80:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3a82:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 40a4 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    3a86:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    3a8a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3a8c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3a90:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3a92:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3a96:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3a98:	|  |  |  |  |  |  |  |                                       jsr 133cc <setVariable>
    3a9e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    3aa2:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    3aa6:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3aa8:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    3aaa:	|  |  |  |  |  |  |  |                                       movea.l 18750 <globalVars>,a0
    3ab0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3ab4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3ab6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3ab8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3aba:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3abe:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3ac0:	|  |  |  |  |  |  |  |                                       jsr 133cc <setVariable>
    3ac6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3aca:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    3ace:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3ad2:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    3ad6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3ada:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3adc:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    3ade:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3ae0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3ae4:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    3ae8:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3aea:	|  |  |  |  |  |  |  |                                       jsr 12ada <getValueType>
    3af0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3af4:	|  |  |  |  |  |  |  |                                       tst.w d0
    3af6:	|  |  |  |  |  |  |  |                                   /-- bne.s 3afe <continueFunction+0x916>
    3af8:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3afa:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 40a4 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    3afe:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    3b02:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3b04:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3b08:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3b0a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3b0e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3b10:	|  |  |  |  |  |  |  |                                       jsr 133cc <setVariable>
    3b16:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    3b1a:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    3b1e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3b20:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    3b22:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3b26:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    3b2a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3b2e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3b30:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3b32:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3b34:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3b38:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3b3a:	|  |  |  |  |  |  |  |                                       jsr 133cc <setVariable>
    3b40:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3b44:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    3b48:	|  |  |  |  |  |  |  |                                       move.l 18750 <globalVars>,d1
    3b4e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3b52:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3b54:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    3b56:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3b58:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3b5c:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    3b60:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3b62:	|  |  |  |  |  |  |  |                                       jsr 12ada <getValueType>
    3b68:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3b6c:	|  |  |  |  |  |  |  |                                       tst.w d0
    3b6e:	|  |  |  |  |  |  |  |                                   /-- bne.s 3b76 <continueFunction+0x98e>
    3b70:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3b72:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 40a4 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    3b76:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    3b7a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3b7c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3b80:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3b82:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3b86:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3b88:	|  |  |  |  |  |  |  |                                       jsr 133cc <setVariable>
    3b8e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    3b92:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    3b96:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3b98:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    3b9a:	|  |  |  |  |  |  |  |                                       movea.l 18750 <globalVars>,a0
    3ba0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3ba4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3ba6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3ba8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3baa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3bae:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3bb0:	|  |  |  |  |  |  |  |                                       jsr 133cc <setVariable>
    3bb6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3bba:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    3bbe:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3bc2:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    3bc6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3bca:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3bcc:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    3bce:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3bd0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3bd4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3bd6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3bd8:	|  |  |  |  |  |  |  |                                       jsr 12f94 <copyVariable>
    3bde:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    3be0:	|  |  |  |  |  |  |  |                                       tst.w d0
    3be2:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 406c <continueFunction+0xe84>
    3be6:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    3be8:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 40a4 <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    3bec:	|  |  |  |  |  |  |  |  |                                    move.l 18750 <globalVars>,d1
    3bf2:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    3bf6:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    3bf8:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    3bfa:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    3bfc:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    3c00:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    3c02:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    3c04:	|  |  |  |  |  |  |  |  |                                    jsr 12f94 <copyVariable>
    3c0a:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    3c0c:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    3c0e:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 4070 <continueFunction+0xe88>
    3c12:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    3c14:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 40a4 <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    3c18:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    3c1a:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    3c1e:	|  |  |  |  |  |  |  |  |  |                                 movea.l 18750 <globalVars>,a0
    3c24:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    3c28:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    3c2a:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    3c2c:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    3c2e:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    3c30:	|  |  |  |  |  |  |  |  |  |                                 jsr 12f94 <copyVariable>
    3c36:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    3c38:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    3c3a:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 4074 <continueFunction+0xe8c>
    3c3e:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    3c40:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 40a4 <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    3c44:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    3c46:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    3c4a:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    3c4c:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    3c50:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    3c52:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    3c54:	|  |  |  |  |  |  |  |  |  |  |                              jsr 12316 <addVarToStack>
    3c5a:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    3c5c:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    3c5e:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 4078 <continueFunction+0xe90>
    3c62:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    3c64:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 40a4 <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    3c68:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    3c6a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    3c6e:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    3c70:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    3c74:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    3c76:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    3c78:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 1239c <addVarToStackQuick>
    3c7e:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    3c80:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    3c82:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 407c <continueFunction+0xe94>
    3c86:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    3c88:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 40a4 <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    3c8c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    3c8e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3c92:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    3c94:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1301a <getBoolean>
    3c9a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    3c9c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    3c9e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    3ca0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    3ca2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    3ca4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    3ca6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    3ca8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3cac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    3cae:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    3cb2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    3cb4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 133cc <setVariable>
    3cba:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    3cbe:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    3cc2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    3cc4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3cc8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    3cca:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1301a <getBoolean>
    3cd0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    3cd2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    3cd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 4080 <continueFunction+0xe98>
				advanceNow = FALSE;
    3cd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    3cdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    3ce0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    3ce6:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 4080 <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    3cea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    3cee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    3cf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    3cf8:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4082 <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    3cfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    3cfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    3d02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    3d04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    3d08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    3d0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    3d0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 12ada <getValueType>
    3d14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    3d18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    3d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 3d22 <continueFunction+0xb3a>
    3d1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    3d1e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 40a4 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    3d22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    3d26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    3d28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    3d2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    3d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    3d30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    3d32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    3d36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    3d38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 133cc <setVariable>
    3d3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    3d42:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4082 <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    3d46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    3d4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    3d4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 4038 <continueFunction+0xe50>
    3d52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    3d54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    3d58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 3dd4 <continueFunction+0xbec>
    3d5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    3d5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    3d60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 3e1e <continueFunction+0xc36>
    3d64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    3d66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    3d6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 3d78 <continueFunction+0xb90>
    3d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    3d6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    3d72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 3da6 <continueFunction+0xbbe>
    3d74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 3e1e <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    3d78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    3d7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    3d7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    3d82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    3d86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    3d88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    3d8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 12410 <addVariablesInSecond>
    3d90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    3d92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    3d94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    3d98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    3d9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1345e <trimStack>
    3da0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    3da2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 404c <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    3da6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    3da8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    3dac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    3db0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    3db4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    3db6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    3db8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 124ce <compareVariablesInSecond>
    3dbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    3dc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    3dc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    3dc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    3dc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1345e <trimStack>
    3dce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    3dd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 404c <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    3dd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    3dd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    3dda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3dde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    3de2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    3de4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    3de6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 124ce <compareVariablesInSecond>
    3dec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    3dee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    3df0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    3df4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    3df6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1345e <trimStack>
    3dfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    3dfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3e02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    3e06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    3e08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    3e0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    3e0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    3e12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3e16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    3e1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 404c <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    3e1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    3e22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    3e26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    3e28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    3e2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    3e30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    3e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 12ada <getValueType>
    3e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    3e3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    3e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 3e46 <continueFunction+0xc5e>
    3e40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    3e42:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 40a4 <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    3e46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    3e48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    3e4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    3e4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    3e52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    3e56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    3e58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 12ada <getValueType>
    3e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    3e62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    3e64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 3e6c <continueFunction+0xc84>
    3e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    3e68:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 40a4 <continueFunction+0xebc>
					trimStack (&fun -> stack);
    3e6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    3e6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    3e72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    3e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1345e <trimStack>
    3e7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    3e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    3e7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    3e82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    3e84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    3e86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 404a <continueFunction+0xe62>
    3e8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    3e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    3e8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #16026,a0
    3e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    3e96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (3e9a <continueFunction+0xcb2>,pc,d0.w)
    3e9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    3e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    3ea0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    3eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3eb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    3ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    3eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3ece:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3ed4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 154e0 <__mulsi3>
    3edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3ede:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3ee2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3eee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 133cc <setVariable>
    3ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 404c <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    3efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    3f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3f08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3f0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 133cc <setVariable>
    3f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 404c <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    3f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3f2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3f2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1558c <__modsi3>
    3f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3f38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3f46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 133cc <setVariable>
    3f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 404c <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    3f54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3f60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1555e <__divsi3>
    3f66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3f68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3f70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3f78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 133cc <setVariable>
    3f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3f82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 404c <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    3f86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3f8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    3f92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3f96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3f9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3fa6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 133cc <setVariable>
    3fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 404c <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    3fb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    3fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3fc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 133cc <setVariable>
    3fda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 404c <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    3fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3fea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    3fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3ff2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3ff4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3ffa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3ffe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4000:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 133cc <setVariable>
    4006:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    400a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 404c <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    400c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4010:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4014:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    4018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    401a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    401c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    401e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4020:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    402a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    402c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 133cc <setVariable>
    4032:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 404c <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    4038:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 15f82 <PutChar+0x98c>
    403e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 14b22 <KPrintF>
    4044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    4046:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    4048:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 40a4 <continueFunction+0xebc>
						break;
    404a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    404c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 4082 <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    404e:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 15f9a <PutChar+0x9a4>
    4054:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 14b22 <KPrintF>
    405a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    405c:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    405e:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 40a4 <continueFunction+0xebc>
			break;
    4060:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    4062:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 4082 <continueFunction+0xe9a>
			break;
    4064:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    4066:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 4082 <continueFunction+0xe9a>
			break;
    4068:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    406a:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 4082 <continueFunction+0xe9a>
			break;
    406c:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    406e:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 4082 <continueFunction+0xe9a>
			break;
    4070:	|  |  |     |              \--|--|--|--|-------------------> nop
    4072:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 4082 <continueFunction+0xe9a>
			break;
    4074:	|  |  |     |                 \--|--|--|-------------------> nop
    4076:	|  |  |     +--------------------|--|--|-------------------- bra.s 4082 <continueFunction+0xe9a>
			break;
    4078:	|  |  |     |                    \--|--|-------------------> nop
    407a:	|  |  |     +-----------------------|--|-------------------- bra.s 4082 <continueFunction+0xe9a>
			break;
    407c:	|  |  |     |                       \--|-------------------> nop
    407e:	|  |  |     +--------------------------|-------------------- bra.s 4082 <continueFunction+0xe9a>
			break;
    4080:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    4082:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    4086:	+--|--|----------------------------------------------------- beq.s 409a <continueFunction+0xeb2>
    4088:	|  |  |                                                      movea.l 80(sp),a0
    408c:	|  |  |                                                      move.l 36(a0),d0
    4090:	|  |  |                                                      addq.l #1,d0
    4092:	|  |  |                                                      movea.l 80(sp),a0
    4096:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    409a:	\--|--|----------------------------------------------------> tst.w 74(sp)
    409e:	   |  \----------------------------------------------------- bne.w 3210 <continueFunction+0x28>

	}
	return TRUE;
    40a2:	   |                                                         moveq #1,d0
}
    40a4:	   \-------------------------------------------------------> lea 76(sp),sp
    40a8:	                                                             rts

000040aa <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    40aa:	       lea -16(sp),sp
    40ae:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    40b0:	       move.l 24(sp),-(sp)
    40b4:	       jsr 4f42 <pauseFunction>
    40ba:	       addq.l #4,sp
	if (fun -> stack) 
    40bc:	       movea.l 24(sp),a0
    40c0:	       move.l 24(a0),d0
    40c4:	   /-- beq.s 40da <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    40c6:	   |   pea 15fc6 <PutChar+0x9d0>
    40cc:	   |   pea 15ff3 <PutChar+0x9fd>
    40d2:	   |   jsr 14b22 <KPrintF>
    40d8:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    40da:	   \-> movea.l 24(sp),a0
    40de:	       move.l 4(a0),12(sp)
    40e4:	       move.l 187a2 <SysBase>,d0
    40ea:	       movea.l d0,a6
    40ec:	       movea.l 12(sp),a1
    40f0:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    40f4:	       clr.l 16(sp)
    40f8:	   /-- bra.s 4118 <finishFunction+0x6e>
    40fa:	/--|-> movea.l 24(sp),a0
    40fe:	|  |   move.l 20(a0),d1
    4102:	|  |   move.l 16(sp),d0
    4106:	|  |   lsl.l #3,d0
    4108:	|  |   add.l d1,d0
    410a:	|  |   move.l d0,-(sp)
    410c:	|  |   jsr 12d28 <unlinkVar>
    4112:	|  |   addq.l #4,sp
    4114:	|  |   addq.l #1,16(sp)
    4118:	|  \-> movea.l 24(sp),a0
    411c:	|      move.l 8(a0),d0
    4120:	|      cmp.l 16(sp),d0
    4124:	\----- bgt.s 40fa <finishFunction+0x50>
	if( fun->numLocals > 0) {
    4126:	       movea.l 24(sp),a0
    412a:	       move.l 8(a0),d0
    412e:	   /-- ble.s 414a <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    4130:	   |   movea.l 24(sp),a0
    4134:	   |   move.l 20(a0),8(sp)
    413a:	   |   move.l 187a2 <SysBase>,d0
    4140:	   |   movea.l d0,a6
    4142:	   |   movea.l 8(sp),a1
    4146:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    414a:	   \-> moveq #28,d0
    414c:	       add.l 24(sp),d0
    4150:	       move.l d0,-(sp)
    4152:	       jsr 12d28 <unlinkVar>
    4158:	       addq.l #4,sp
	FreeVec(fun);
    415a:	       move.l 24(sp),4(sp)
    4160:	       move.l 187a2 <SysBase>,d0
    4166:	       movea.l d0,a6
    4168:	       movea.l 4(sp),a1
    416c:	       jsr -690(a6)
	fun = NULL;
    4170:	       clr.l 24(sp)
}
    4174:	       nop
    4176:	       movea.l (sp)+,a6
    4178:	       lea 16(sp),sp
    417c:	       rts

0000417e <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    417e:	jsr 4f9e <runSludge>
}
    4184:	rts

00004186 <initSludge>:

BOOL initSludge (char * filename) {
    4186:	             lea -296(sp),sp
    418a:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    418e:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    4192:	             jsr 925c <makeNullAnim>
    4198:	             move.l d0,186aa <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    419e:	             pea 1874c <gameVersion>
    41a4:	             pea 16003 <PutChar+0xa0d>
    41aa:	             pea 45 <_start+0x45>
    41ae:	             pea 47 <_start+0x47>
    41b2:	             move.l 336(sp),-(sp)
    41b6:	             jsr 4bd2 <openAndVerify>
    41bc:	             lea 20(sp),sp
    41c0:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    41c4:	         /-- bne.s 41cc <initSludge+0x46>
    41c6:	         |   clr.w d0
    41c8:	/--------|-- bra.w 48f2 <initSludge+0x76c>
	if (FGetC (fp)) {
    41cc:	|        \-> move.l 292(sp),288(sp)
    41d2:	|            move.l 187aa <DOSBase>,d0
    41d8:	|            movea.l d0,a6
    41da:	|            move.l 288(sp),d1
    41de:	|            jsr -306(a6)
    41e2:	|            move.l d0,284(sp)
    41e6:	|            move.l 284(sp),d0
    41ea:	|  /-------- beq.w 4390 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    41ee:	|  |         move.l 292(sp),-(sp)
    41f2:	|  |         jsr 6bc <get2bytes>
    41f8:	|  |         addq.l #4,sp
    41fa:	|  |         move.l d0,18776 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    4200:	|  |         move.l 18776 <numBIFNames>,d0
    4206:	|  |         move.l d0,280(sp)
    420a:	|  |         clr.l 276(sp)
    420e:	|  |         move.l 187a2 <SysBase>,d0
    4214:	|  |         movea.l d0,a6
    4216:	|  |         move.l 280(sp),d0
    421a:	|  |         move.l 276(sp),d1
    421e:	|  |         jsr -684(a6)
    4222:	|  |         move.l d0,272(sp)
    4226:	|  |         move.l 272(sp),d0
    422a:	|  |         move.l d0,18732 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    4230:	|  |         move.l 18732 <allBIFNames>,d0
    4236:	|  |     /-- bne.s 423e <initSludge+0xb8>
    4238:	|  |     |   clr.w d0
    423a:	+--|-----|-- bra.w 48f2 <initSludge+0x76c>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    423e:	|  |     \-> clr.l 308(sp)
    4242:	|  |     /-- bra.s 4268 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    4244:	|  |  /--|-> move.l 18732 <allBIFNames>,d1
    424a:	|  |  |  |   move.l 308(sp),d0
    424e:	|  |  |  |   add.l d0,d0
    4250:	|  |  |  |   add.l d0,d0
    4252:	|  |  |  |   movea.l d1,a2
    4254:	|  |  |  |   adda.l d0,a2
    4256:	|  |  |  |   move.l 292(sp),-(sp)
    425a:	|  |  |  |   jsr b02 <readString>
    4260:	|  |  |  |   addq.l #4,sp
    4262:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    4264:	|  |  |  |   addq.l #1,308(sp)
    4268:	|  |  |  \-> move.l 18776 <numBIFNames>,d0
    426e:	|  |  |      cmp.l 308(sp),d0
    4272:	|  |  \----- bgt.s 4244 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    4274:	|  |         move.l 292(sp),-(sp)
    4278:	|  |         jsr 6bc <get2bytes>
    427e:	|  |         addq.l #4,sp
    4280:	|  |         move.l d0,18782 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    4286:	|  |         move.l 18782 <numUserFunc>,d0
    428c:	|  |         move.l d0,268(sp)
    4290:	|  |         clr.l 264(sp)
    4294:	|  |         move.l 187a2 <SysBase>,d0
    429a:	|  |         movea.l d0,a6
    429c:	|  |         move.l 268(sp),d0
    42a0:	|  |         move.l 264(sp),d1
    42a4:	|  |         jsr -684(a6)
    42a8:	|  |         move.l d0,260(sp)
    42ac:	|  |         move.l 260(sp),d0
    42b0:	|  |         move.l d0,1873e <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    42b6:	|  |         move.l 1873e <allUserFunc>,d0
    42bc:	|  |     /-- bne.s 42c4 <initSludge+0x13e>
    42be:	|  |     |   clr.w d0
    42c0:	+--|-----|-- bra.w 48f2 <initSludge+0x76c>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    42c4:	|  |     \-> clr.l 304(sp)
    42c8:	|  |     /-- bra.s 42ee <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    42ca:	|  |  /--|-> move.l 1873e <allUserFunc>,d1
    42d0:	|  |  |  |   move.l 304(sp),d0
    42d4:	|  |  |  |   add.l d0,d0
    42d6:	|  |  |  |   add.l d0,d0
    42d8:	|  |  |  |   movea.l d1,a2
    42da:	|  |  |  |   adda.l d0,a2
    42dc:	|  |  |  |   move.l 292(sp),-(sp)
    42e0:	|  |  |  |   jsr b02 <readString>
    42e6:	|  |  |  |   addq.l #4,sp
    42e8:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    42ea:	|  |  |  |   addq.l #1,304(sp)
    42ee:	|  |  |  \-> move.l 18782 <numUserFunc>,d0
    42f4:	|  |  |      cmp.l 304(sp),d0
    42f8:	|  |  \----- bgt.s 42ca <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    42fa:	|  |         move.l 1874c <gameVersion>,d0
    4300:	|  |         cmpi.l #258,d0
    4306:	|  +-------- ble.w 4390 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    430a:	|  |         move.l 292(sp),-(sp)
    430e:	|  |         jsr 6bc <get2bytes>
    4314:	|  |         addq.l #4,sp
    4316:	|  |         move.l d0,1877e <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    431c:	|  |         move.l 1877e <numResourceNames>,d0
    4322:	|  |         move.l d0,256(sp)
    4326:	|  |         clr.l 252(sp)
    432a:	|  |         move.l 187a2 <SysBase>,d0
    4330:	|  |         movea.l d0,a6
    4332:	|  |         move.l 256(sp),d0
    4336:	|  |         move.l 252(sp),d1
    433a:	|  |         jsr -684(a6)
    433e:	|  |         move.l d0,248(sp)
    4342:	|  |         move.l 248(sp),d0
    4346:	|  |         move.l d0,18736 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    434c:	|  |         move.l 18736 <allResourceNames>,d0
    4352:	|  |     /-- bne.s 435a <initSludge+0x1d4>
    4354:	|  |     |   clr.w d0
    4356:	+--|-----|-- bra.w 48f2 <initSludge+0x76c>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    435a:	|  |     \-> clr.l 300(sp)
    435e:	|  |     /-- bra.s 4384 <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    4360:	|  |  /--|-> move.l 18736 <allResourceNames>,d1
    4366:	|  |  |  |   move.l 300(sp),d0
    436a:	|  |  |  |   add.l d0,d0
    436c:	|  |  |  |   add.l d0,d0
    436e:	|  |  |  |   movea.l d1,a2
    4370:	|  |  |  |   adda.l d0,a2
    4372:	|  |  |  |   move.l 292(sp),-(sp)
    4376:	|  |  |  |   jsr b02 <readString>
    437c:	|  |  |  |   addq.l #4,sp
    437e:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    4380:	|  |  |  |   addq.l #1,300(sp)
    4384:	|  |  |  \-> move.l 1877e <numResourceNames>,d0
    438a:	|  |  |      cmp.l 300(sp),d0
    438e:	|  |  \----- bgt.s 4360 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    4390:	|  \-------> move.l 292(sp),-(sp)
    4394:	|            jsr 6bc <get2bytes>
    439a:	|            addq.l #4,sp
    439c:	|            move.l d0,186f6 <winWidth>
	winHeight = get2bytes (fp);
    43a2:	|            move.l 292(sp),-(sp)
    43a6:	|            jsr 6bc <get2bytes>
    43ac:	|            addq.l #4,sp
    43ae:	|            move.l d0,186fa <winHeight>
	specialSettings = FGetC (fp);
    43b4:	|            move.l 292(sp),244(sp)
    43ba:	|            move.l 187aa <DOSBase>,d0
    43c0:	|            movea.l d0,a6
    43c2:	|            move.l 244(sp),d1
    43c6:	|            jsr -306(a6)
    43ca:	|            move.l d0,240(sp)
    43ce:	|            move.l 240(sp),d0
    43d2:	|            move.l d0,18786 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    43d8:	|            move.l 292(sp),236(sp)
    43de:	|            move.l 187aa <DOSBase>,d0
    43e4:	|            movea.l d0,a6
    43e6:	|            move.l 236(sp),d1
    43ea:	|            jsr -306(a6)
    43ee:	|            move.l d0,232(sp)
    43f2:	|            move.l 232(sp),d0
    43f6:	|            move.l d0,-(sp)
    43f8:	|            pea 3e8 <encodeFilename+0xea>
    43fc:	|            jsr 1555e <__divsi3>
    4402:	|            addq.l #8,sp
    4404:	|            move.l d0,18132 <desiredfps>

	FreeVec(readString (fp));
    440a:	|            move.l 292(sp),-(sp)
    440e:	|            jsr b02 <readString>
    4414:	|            addq.l #4,sp
    4416:	|            move.l d0,228(sp)
    441a:	|            move.l 187a2 <SysBase>,d0
    4420:	|            movea.l d0,a6
    4422:	|            movea.l 228(sp),a1
    4426:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    442a:	|            move.l 292(sp),224(sp)
    4430:	|            move.l #100164,220(sp)
    4438:	|            moveq #8,d0
    443a:	|            move.l d0,216(sp)
    443e:	|            moveq #1,d1
    4440:	|            move.l d1,212(sp)
    4444:	|            move.l 187aa <DOSBase>,d0
    444a:	|            movea.l d0,a6
    444c:	|            move.l 224(sp),d1
    4450:	|            move.l 220(sp),d2
    4454:	|            move.l 216(sp),d3
    4458:	|            move.l 212(sp),d4
    445c:	|            jsr -324(a6)
    4460:	|            move.l d0,208(sp)
    4464:	|            move.l 208(sp),d0
    4468:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    446c:	|            moveq #1,d0
    446e:	|            cmp.l 204(sp),d0
    4472:	|        /-- beq.s 4482 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    4474:	|        |   pea 1603c <PutChar+0xa46>
    447a:	|        |   jsr 14b22 <KPrintF>
    4480:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    4482:	|        \-> move.l 1874c <gameVersion>,d0
    4488:	|            cmpi.l #258,d0
    448e:	|        /-- ble.s 449e <initSludge+0x318>
    4490:	|        |   move.l 292(sp),-(sp)
    4494:	|        |   jsr b02 <readString>
    449a:	|        |   addq.l #4,sp
    449c:	|     /--|-- bra.s 44b2 <initSludge+0x32c>
    449e:	|     |  \-> pea 1605a <PutChar+0xa64>
    44a4:	|     |      pea 1605a <PutChar+0xa64>
    44aa:	|     |      jsr 12006 <joinStrings>
    44b0:	|     |      addq.l #8,sp
    44b2:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    44b6:	|            move.l 1874c <gameVersion>,d0
    44bc:	|            cmpi.l #258,d0
    44c2:	|     /----- ble.s 44e4 <initSludge+0x35e>
    44c4:	|     |      move.l 292(sp),196(sp)
    44ca:	|     |      move.l 187aa <DOSBase>,d0
    44d0:	|     |      movea.l d0,a6
    44d2:	|     |      move.l 196(sp),d1
    44d6:	|     |      jsr -306(a6)
    44da:	|     |      move.l d0,192(sp)
    44de:	|     |      move.l 192(sp),d0
    44e2:	|     |  /-- bra.s 44e6 <initSludge+0x360>
    44e4:	|     \--|-> moveq #0,d0
    44e6:	|        \-> move.l d0,188d6 <gameSettings+0x4>
	makeLanguageTable (fp);
    44ec:	|            move.l 292(sp),-(sp)
    44f0:	|            jsr 119bc <makeLanguageTable>
    44f6:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    44f8:	|            move.l 1874c <gameVersion>,d0
    44fe:	|            cmpi.l #261,d0
    4504:	|        /-- ble.s 4552 <initSludge+0x3cc>
	{
		FGetC(fp);
    4506:	|        |   move.l 292(sp),188(sp)
    450c:	|        |   move.l 187aa <DOSBase>,d0
    4512:	|        |   movea.l d0,a6
    4514:	|        |   move.l 188(sp),d1
    4518:	|        |   jsr -306(a6)
    451c:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    4520:	|        |   move.l 292(sp),180(sp)
    4526:	|        |   move.l 187aa <DOSBase>,d0
    452c:	|        |   movea.l d0,a6
    452e:	|        |   move.l 180(sp),d1
    4532:	|        |   jsr -306(a6)
    4536:	|        |   move.l d0,176(sp)
		getFloat (fp);
    453a:	|        |   move.l 292(sp),-(sp)
    453e:	|        |   jsr 7d8 <getFloat>
    4544:	|        |   addq.l #4,sp
		getFloat (fp);
    4546:	|        |   move.l 292(sp),-(sp)
    454a:	|        |   jsr 7d8 <getFloat>
    4550:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    4552:	|        \-> move.l 292(sp),-(sp)
    4556:	|            jsr b02 <readString>
    455c:	|            addq.l #4,sp
    455e:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    4562:	|            pea 1605b <PutChar+0xa65>
    4568:	|            move.l 176(sp),-(sp)
    456c:	|            jsr 11f86 <strcmp>
    4572:	|            addq.l #8,sp
    4574:	|            tst.l d0
    4576:	|        /-- beq.s 457e <initSludge+0x3f8>
		return FALSE;
    4578:	|        |   clr.w d0
    457a:	+--------|-- bra.w 48f2 <initSludge+0x76c>
	}
	FreeVec( checker);
    457e:	|        \-> move.l 172(sp),168(sp)
    4584:	|            move.l 187a2 <SysBase>,d0
    458a:	|            movea.l d0,a6
    458c:	|            movea.l 168(sp),a1
    4590:	|            jsr -690(a6)
	checker = NULL;
    4594:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    4598:	|            move.l 292(sp),164(sp)
    459e:	|            move.l 187aa <DOSBase>,d0
    45a4:	|            movea.l d0,a6
    45a6:	|            move.l 164(sp),d1
    45aa:	|            jsr -306(a6)
    45ae:	|            move.l d0,160(sp)
    45b2:	|            move.l 160(sp),d0
    45b6:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    45ba:	|            moveq #0,d0
    45bc:	|            move.b 159(sp),d0
    45c0:	|            moveq #1,d1
    45c2:	|            and.l d1,d0
    45c4:	|        /-- beq.s 461c <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    45c6:	|        |   move.l 187aa <DOSBase>,d0
    45cc:	|        |   movea.l d0,a6
    45ce:	|        |   jsr -60(a6)
    45d2:	|        |   move.l d0,38(sp)
    45d6:	|        |   move.l 38(sp),d0
    45da:	|        |   move.l d0,34(sp)
    45de:	|        |   move.l #90211,30(sp)
    45e6:	|        |   moveq #54,d0
    45e8:	|        |   move.l d0,26(sp)
    45ec:	|        |   move.l 187aa <DOSBase>,d0
    45f2:	|        |   movea.l d0,a6
    45f4:	|        |   move.l 34(sp),d1
    45f8:	|        |   move.l 30(sp),d2
    45fc:	|        |   move.l 26(sp),d3
    4600:	|        |   jsr -48(a6)
    4604:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    4608:	|        |   pea 1609a <PutChar+0xaa4>
    460e:	|        |   jsr 14b22 <KPrintF>
    4614:	|        |   addq.l #4,sp
		return FALSE;
    4616:	|        |   clr.w d0
    4618:	+--------|-- bra.w 48f2 <initSludge+0x76c>
	}

	numGlobals = get2bytes (fp);
    461c:	|        \-> move.l 292(sp),-(sp)
    4620:	|            jsr 6bc <get2bytes>
    4626:	|            addq.l #4,sp
    4628:	|            move.l d0,1877a <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    462e:	|            move.l 1877a <numGlobals>,d0
    4634:	|            lsl.l #3,d0
    4636:	|            move.l d0,154(sp)
    463a:	|            clr.l 150(sp)
    463e:	|            move.l 187a2 <SysBase>,d0
    4644:	|            movea.l d0,a6
    4646:	|            move.l 154(sp),d0
    464a:	|            move.l 150(sp),d1
    464e:	|            jsr -684(a6)
    4652:	|            move.l d0,146(sp)
    4656:	|            move.l 146(sp),d0
    465a:	|            move.l d0,18750 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    4660:	|            move.l 18750 <globalVars>,d0
    4666:	|        /-- bne.s 4684 <initSludge+0x4fe>
    4668:	|        |   move.l 1877a <numGlobals>,d0
    466e:	|        +-- ble.s 4684 <initSludge+0x4fe>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    4670:	|        |   pea 160d2 <PutChar+0xadc>
    4676:	|        |   jsr 14b22 <KPrintF>
    467c:	|        |   addq.l #4,sp
		return FALSE;
    467e:	|        |   clr.w d0
    4680:	+--------|-- bra.w 48f2 <initSludge+0x76c>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    4684:	|        \-> clr.l 312(sp)
    4688:	|        /-- bra.s 46a0 <initSludge+0x51a>
    468a:	|     /--|-> move.l 18750 <globalVars>,d1
    4690:	|     |  |   move.l 312(sp),d0
    4694:	|     |  |   lsl.l #3,d0
    4696:	|     |  |   movea.l d1,a0
    4698:	|     |  |   adda.l d0,a0
    469a:	|     |  |   clr.l (a0)
    469c:	|     |  |   addq.l #1,312(sp)
    46a0:	|     |  \-> move.l 1877a <numGlobals>,d0
    46a6:	|     |      cmp.l 312(sp),d0
    46aa:	|     \----- bgt.s 468a <initSludge+0x504>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    46ac:	|            move.l 188d6 <gameSettings+0x4>,d0
    46b2:	|            clr.l -(sp)
    46b4:	|            move.l d0,-(sp)
    46b6:	|            move.l 300(sp),-(sp)
    46ba:	|            jsr 5688 <setFileIndices>
    46c0:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    46c4:	|            pea 1 <_start+0x1>
    46c8:	|            jsr 5342 <getNumberedString>
    46ce:	|            addq.l #4,sp
    46d0:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    46d4:	|            move.l 142(sp),-(sp)
    46d8:	|            jsr 2fe <encodeFilename>
    46de:	|            addq.l #4,sp
    46e0:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    46e4:	|            move.l 142(sp),134(sp)
    46ea:	|            move.l 187a2 <SysBase>,d0
    46f0:	|            movea.l d0,a6
    46f2:	|            movea.l 134(sp),a1
    46f6:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    46fa:	|            move.l 138(sp),130(sp)
    4700:	|            move.l 187aa <DOSBase>,d0
    4706:	|            movea.l d0,a6
    4708:	|            move.l 130(sp),d1
    470c:	|            jsr -120(a6)
    4710:	|            move.l d0,126(sp)
    4714:	|            move.l 126(sp),d0
    4718:	|            move.l d0,296(sp)
	if(lock == 0) {
    471c:	|        /-- bne.s 474a <initSludge+0x5c4>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    471e:	|        |   move.l 138(sp),122(sp)
    4724:	|        |   moveq #-2,d1
    4726:	|        |   move.l d1,118(sp)
    472a:	|        |   move.l 187aa <DOSBase>,d0
    4730:	|        |   movea.l d0,a6
    4732:	|        |   move.l 122(sp),d1
    4736:	|        |   move.l 118(sp),d2
    473a:	|        |   jsr -84(a6)
    473e:	|        |   move.l d0,114(sp)
    4742:	|        |   move.l 114(sp),d0
    4746:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    474a:	|        \-> move.l 296(sp),110(sp)
    4750:	|            move.l 187aa <DOSBase>,d0
    4756:	|            movea.l d0,a6
    4758:	|            move.l 110(sp),d1
    475c:	|            jsr -126(a6)
    4760:	|            move.l d0,106(sp)
    4764:	|            move.l 106(sp),d0
    4768:	|        /-- bne.s 47c4 <initSludge+0x63e>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    476a:	|        |   move.l 138(sp),-(sp)
    476e:	|        |   pea 16105 <PutChar+0xb0f>
    4774:	|        |   jsr 14b22 <KPrintF>
    477a:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    477c:	|        |   move.l 187aa <DOSBase>,d0
    4782:	|        |   movea.l d0,a6
    4784:	|        |   jsr -60(a6)
    4788:	|        |   move.l d0,58(sp)
    478c:	|        |   move.l 58(sp),d0
    4790:	|        |   move.l d0,54(sp)
    4794:	|        |   move.l #90418,50(sp)
    479c:	|        |   moveq #40,d0
    479e:	|        |   move.l d0,46(sp)
    47a2:	|        |   move.l 187aa <DOSBase>,d0
    47a8:	|        |   movea.l d0,a6
    47aa:	|        |   move.l 54(sp),d1
    47ae:	|        |   move.l 50(sp),d2
    47b2:	|        |   move.l 46(sp),d3
    47b6:	|        |   jsr -48(a6)
    47ba:	|        |   move.l d0,42(sp)
		return FALSE;
    47be:	|        |   clr.w d0
    47c0:	+--------|-- bra.w 48f2 <initSludge+0x76c>
	}

	FreeVec(gameName);
    47c4:	|        \-> move.l 138(sp),102(sp)
    47ca:	|            move.l 187a2 <SysBase>,d0
    47d0:	|            movea.l d0,a6
    47d2:	|            movea.l 102(sp),a1
    47d6:	|            jsr -690(a6)

	readIniFile (filename);
    47da:	|            move.l 320(sp),-(sp)
    47de:	|            jsr 11af0 <readIniFile>
    47e4:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    47e6:	|            jsr 118c2 <getLanguageForFileB>
    47ec:	|            move.l d0,18120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    47f2:	|            move.l 18120 <languageNum>,d0
    47f8:	|        /-- bpl.s 4808 <initSludge+0x682>
    47fa:	|        |   pea 1615b <PutChar+0xb65>
    4800:	|        |   jsr 14b22 <KPrintF>
    4806:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    4808:	|        \-> move.l 18120 <languageNum>,d0
    480e:	|            move.l d0,d1
    4810:	|            move.l 188d6 <gameSettings+0x4>,d0
    4816:	|            move.l d1,-(sp)
    4818:	|            move.l d0,-(sp)
    481a:	|            clr.l -(sp)
    481c:	|            jsr 5688 <setFileIndices>
    4822:	|            lea 12(sp),sp

	if (dataFol[0]) {
    4826:	|            movea.l 200(sp),a0
    482a:	|            move.b (a0),d0
    482c:	|     /----- beq.w 48d6 <initSludge+0x750>
		char *dataFolder = encodeFilename(dataFol);
    4830:	|     |      move.l 200(sp),-(sp)
    4834:	|     |      jsr 2fe <encodeFilename>
    483a:	|     |      addq.l #4,sp
    483c:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    4840:	|     |      move.l 98(sp),94(sp)
    4846:	|     |      move.l 187aa <DOSBase>,d0
    484c:	|     |      movea.l d0,a6
    484e:	|     |      move.l 94(sp),d1
    4852:	|     |      jsr -120(a6)
    4856:	|     |      move.l d0,90(sp)
    485a:	|     |      move.l 90(sp),d0
    485e:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    4862:	|     |  /-- bne.s 4890 <initSludge+0x70a>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    4864:	|     |  |   move.l 98(sp),86(sp)
    486a:	|     |  |   moveq #-2,d1
    486c:	|     |  |   move.l d1,82(sp)
    4870:	|     |  |   move.l 187aa <DOSBase>,d0
    4876:	|     |  |   movea.l d0,a6
    4878:	|     |  |   move.l 86(sp),d1
    487c:	|     |  |   move.l 82(sp),d2
    4880:	|     |  |   jsr -84(a6)
    4884:	|     |  |   move.l d0,78(sp)
    4888:	|     |  |   move.l 78(sp),d0
    488c:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    4890:	|     |  \-> move.l 296(sp),74(sp)
    4896:	|     |      move.l 187aa <DOSBase>,d0
    489c:	|     |      movea.l d0,a6
    489e:	|     |      move.l 74(sp),d1
    48a2:	|     |      jsr -126(a6)
    48a6:	|     |      move.l d0,70(sp)
    48aa:	|     |      move.l 70(sp),d0
    48ae:	|     |  /-- bne.s 48c0 <initSludge+0x73a>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    48b0:	|     |  |   move.l 187aa <DOSBase>,d0
    48b6:	|     |  |   movea.l d0,a6
    48b8:	|     |  |   jsr -60(a6)
    48bc:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    48c0:	|     |  \-> move.l 98(sp),62(sp)
    48c6:	|     |      move.l 187a2 <SysBase>,d0
    48cc:	|     |      movea.l d0,a6
    48ce:	|     |      movea.l 62(sp),a1
    48d2:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    48d6:	|     \----> movea.l 186fa <winHeight>,a0
    48dc:	|            lea -15(a0),a0
    48e0:	|            move.l a0,d0
    48e2:	|            move.l d0,-(sp)
    48e4:	|            pea a <_start+0xa>
    48e8:	|            jsr 60ba <positionStatus>
    48ee:	|            addq.l #8,sp

	return TRUE;
    48f0:	|            moveq #1,d0
}
    48f2:	\----------> movem.l (sp)+,d2-d4/a2/a6
    48f6:	             lea 296(sp),sp
    48fa:	             rts

000048fc <killSpeechTimers>:

void killSpeechTimers () {
    48fc:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    48fe:	          move.l 1873a <allRunningFunctions>,(sp)

	while (thisFunction) {
    4904:	   /----- bra.s 4930 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    4906:	/--|----> movea.l (sp),a0
    4908:	|  |      move.b 56(a0),d0
    490c:	|  |  /-- bne.s 492a <killSpeechTimers+0x2e>
    490e:	|  |  |   movea.l (sp),a0
    4910:	|  |  |   move.w 50(a0),d0
    4914:	|  |  +-- beq.s 492a <killSpeechTimers+0x2e>
    4916:	|  |  |   movea.l (sp),a0
    4918:	|  |  |   move.l 12(a0),d0
    491c:	|  |  +-- beq.s 492a <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    491e:	|  |  |   movea.l (sp),a0
    4920:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    4924:	|  |  |   movea.l (sp),a0
    4926:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    492a:	|  |  \-> movea.l (sp),a0
    492c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4930:	|  \----> tst.l (sp)
    4932:	\-------- bne.s 4906 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    4934:	          jsr 65f8 <killAllSpeech>
}
    493a:	          nop
    493c:	          addq.l #4,sp
    493e:	          rts

00004940 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    4940:	             lea -52(sp),sp
    4944:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    4946:	             movea.l 60(sp),a0
    494a:	             move.l (a0),d0
    494c:	             move.l d0,-(sp)
    494e:	             jsr 55c8 <openSubSlice>
    4954:	             addq.l #4,sp
    4956:	             tst.w d0
    4958:	         /-- bne.s 4960 <loadFunctionCode+0x20>
    495a:	         |   clr.w d0
    495c:	/--------|-- bra.w 4b2a <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    4960:	|        \-> move.l 1878a <bigDataFile>,44(sp)
    4968:	|            move.l 187aa <DOSBase>,d0
    496e:	|            movea.l d0,a6
    4970:	|            move.l 44(sp),d1
    4974:	|            jsr -306(a6)
    4978:	|            move.l d0,40(sp)
    497c:	|            move.l 40(sp),d0
    4980:	|            move.l d0,d0
    4982:	|            movea.l 60(sp),a0
    4986:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    498a:	|            move.l 1878a <bigDataFile>,d0
    4990:	|            move.l d0,-(sp)
    4992:	|            jsr 6bc <get2bytes>
    4998:	|            addq.l #4,sp
    499a:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    499e:	|            move.l 1878a <bigDataFile>,d0
    49a4:	|            move.l d0,-(sp)
    49a6:	|            jsr 6bc <get2bytes>
    49ac:	|            addq.l #4,sp
    49ae:	|            movea.l 60(sp),a0
    49b2:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    49b6:	|            move.l 1878a <bigDataFile>,d0
    49bc:	|            move.l d0,-(sp)
    49be:	|            jsr 6bc <get2bytes>
    49c4:	|            addq.l #4,sp
    49c6:	|            movea.l 60(sp),a0
    49ca:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    49ce:	|            move.l 36(sp),d0
    49d2:	|            lsl.l #3,d0
    49d4:	|            move.l d0,32(sp)
    49d8:	|            clr.l 28(sp)
    49dc:	|            move.l 187a2 <SysBase>,d0
    49e2:	|            movea.l d0,a6
    49e4:	|            move.l 32(sp),d0
    49e8:	|            move.l 28(sp),d1
    49ec:	|            jsr -684(a6)
    49f0:	|            move.l d0,24(sp)
    49f4:	|            move.l 24(sp),d0
    49f8:	|            movea.l 60(sp),a0
    49fc:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    4a00:	|            movea.l 60(sp),a0
    4a04:	|            move.l 4(a0),d0
    4a08:	|        /-- bne.s 4a1e <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    4a0a:	|        |   pea 16186 <PutChar+0xb90>
    4a10:	|        |   jsr 14b22 <KPrintF>
    4a16:	|        |   addq.l #4,sp
		return FALSE;
    4a18:	|        |   clr.w d0
    4a1a:	+--------|-- bra.w 4b2a <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    4a1e:	|        \-> clr.l 52(sp)
    4a22:	|        /-- bra.s 4a84 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    4a24:	|     /--|-> move.l 1878a <bigDataFile>,8(sp)
    4a2c:	|     |  |   move.l 187aa <DOSBase>,d0
    4a32:	|     |  |   movea.l d0,a6
    4a34:	|     |  |   move.l 8(sp),d1
    4a38:	|     |  |   jsr -306(a6)
    4a3c:	|     |  |   move.l d0,4(sp)
    4a40:	|     |  |   move.l 4(sp),d1
    4a44:	|     |  |   movea.l 60(sp),a0
    4a48:	|     |  |   movea.l 4(a0),a0
    4a4c:	|     |  |   move.l 52(sp),d0
    4a50:	|     |  |   lsl.l #3,d0
    4a52:	|     |  |   adda.l d0,a0
    4a54:	|     |  |   move.l d1,d0
    4a56:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    4a58:	|     |  |   move.l 1878a <bigDataFile>,d0
    4a5e:	|     |  |   move.l d0,-(sp)
    4a60:	|     |  |   jsr 6bc <get2bytes>
    4a66:	|     |  |   addq.l #4,sp
    4a68:	|     |  |   move.l d0,d1
    4a6a:	|     |  |   movea.l 60(sp),a0
    4a6e:	|     |  |   movea.l 4(a0),a0
    4a72:	|     |  |   move.l 52(sp),d0
    4a76:	|     |  |   lsl.l #3,d0
    4a78:	|     |  |   adda.l d0,a0
    4a7a:	|     |  |   move.l d1,d0
    4a7c:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    4a80:	|     |  |   addq.l #1,52(sp)
    4a84:	|     |  \-> move.l 52(sp),d0
    4a88:	|     |      cmp.l 36(sp),d0
    4a8c:	|     \----- bcs.s 4a24 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    4a8e:	|            jsr 5338 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    4a94:	|            movea.l 60(sp),a0
    4a98:	|            move.l 8(a0),d0
    4a9c:	|  /-------- ble.w 4b20 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    4aa0:	|  |         movea.l 60(sp),a0
    4aa4:	|  |         move.l 8(a0),d0
    4aa8:	|  |         lsl.l #3,d0
    4aaa:	|  |         move.l d0,20(sp)
    4aae:	|  |         clr.l 16(sp)
    4ab2:	|  |         move.l 187a2 <SysBase>,d0
    4ab8:	|  |         movea.l d0,a6
    4aba:	|  |         move.l 20(sp),d0
    4abe:	|  |         move.l 16(sp),d1
    4ac2:	|  |         jsr -684(a6)
    4ac6:	|  |         move.l d0,12(sp)
    4aca:	|  |         move.l 12(sp),d0
    4ace:	|  |         movea.l 60(sp),a0
    4ad2:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    4ad6:	|  |         movea.l 60(sp),a0
    4ada:	|  |         move.l 20(a0),d0
    4ade:	|  |     /-- bne.s 4af2 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    4ae0:	|  |     |   pea 16186 <PutChar+0xb90>
    4ae6:	|  |     |   jsr 14b22 <KPrintF>
    4aec:	|  |     |   addq.l #4,sp
			return FALSE;
    4aee:	|  |     |   clr.w d0
    4af0:	+--|-----|-- bra.s 4b2a <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    4af2:	|  |     \-> clr.l 48(sp)
    4af6:	|  |     /-- bra.s 4b10 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    4af8:	|  |  /--|-> movea.l 60(sp),a0
    4afc:	|  |  |  |   move.l 20(a0),d1
    4b00:	|  |  |  |   move.l 48(sp),d0
    4b04:	|  |  |  |   lsl.l #3,d0
    4b06:	|  |  |  |   movea.l d1,a0
    4b08:	|  |  |  |   adda.l d0,a0
    4b0a:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    4b0c:	|  |  |  |   addq.l #1,48(sp)
    4b10:	|  |  |  \-> movea.l 60(sp),a0
    4b14:	|  |  |      move.l 8(a0),d0
    4b18:	|  |  |      cmp.l 48(sp),d0
    4b1c:	|  |  \----- bgt.s 4af8 <loadFunctionCode+0x1b8>
    4b1e:	|  |     /-- bra.s 4b28 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    4b20:	|  \-----|-> movea.l 60(sp),a0
    4b24:	|        |   clr.l 8(a0)
	}
	return TRUE;
    4b28:	|        \-> moveq #1,d0
}
    4b2a:	\----------> movea.l (sp)+,a6
    4b2c:	             lea 52(sp),sp
    4b30:	             rts

00004b32 <loadHandlers>:

void loadHandlers (BPTR fp) {
    4b32:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    4b34:	movea.l 1811c <currentEvents>,a2
    4b3a:	move.l 8(sp),-(sp)
    4b3e:	jsr 6bc <get2bytes>
    4b44:	addq.l #4,sp
    4b46:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    4b48:	movea.l 1811c <currentEvents>,a2
    4b4e:	move.l 8(sp),-(sp)
    4b52:	jsr 6bc <get2bytes>
    4b58:	addq.l #4,sp
    4b5a:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    4b5e:	movea.l 1811c <currentEvents>,a2
    4b64:	move.l 8(sp),-(sp)
    4b68:	jsr 6bc <get2bytes>
    4b6e:	addq.l #4,sp
    4b70:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    4b74:	movea.l 1811c <currentEvents>,a2
    4b7a:	move.l 8(sp),-(sp)
    4b7e:	jsr 6bc <get2bytes>
    4b84:	addq.l #4,sp
    4b86:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    4b8a:	movea.l 1811c <currentEvents>,a2
    4b90:	move.l 8(sp),-(sp)
    4b94:	jsr 6bc <get2bytes>
    4b9a:	addq.l #4,sp
    4b9c:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    4ba0:	movea.l 1811c <currentEvents>,a2
    4ba6:	move.l 8(sp),-(sp)
    4baa:	jsr 6bc <get2bytes>
    4bb0:	addq.l #4,sp
    4bb2:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    4bb6:	movea.l 1811c <currentEvents>,a2
    4bbc:	move.l 8(sp),-(sp)
    4bc0:	jsr 6bc <get2bytes>
    4bc6:	addq.l #4,sp
    4bc8:	move.l d0,24(a2)
}
    4bcc:	nop
    4bce:	movea.l (sp)+,a2
    4bd0:	rts

00004bd2 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    4bd2:	       lea -312(sp),sp
    4bd6:	       movem.l d2-d3/a6,-(sp)
    4bda:	       move.l 332(sp),d1
    4bde:	       move.l 336(sp),d0
    4be2:	       move.b d1,d1
    4be4:	       move.b d1,16(sp)
    4be8:	       move.b d0,d0
    4bea:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    4bee:	       move.l 328(sp),318(sp)
    4bf4:	       move.l #1005,314(sp)
    4bfc:	       move.l 187aa <DOSBase>,d0
    4c02:	       movea.l d0,a6
    4c04:	       move.l 318(sp),d1
    4c08:	       move.l 314(sp),d2
    4c0c:	       jsr -30(a6)
    4c10:	       move.l d0,310(sp)
    4c14:	       move.l 310(sp),d0
    4c18:	       move.l d0,306(sp)

	if (! fp) {
    4c1c:	   /-- bne.s 4c78 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    4c1e:	   |   move.l 187aa <DOSBase>,d0
    4c24:	   |   movea.l d0,a6
    4c26:	   |   jsr -60(a6)
    4c2a:	   |   move.l d0,154(sp)
    4c2e:	   |   move.l 154(sp),d0
    4c32:	   |   move.l d0,150(sp)
    4c36:	   |   move.l #90543,146(sp)
    4c3e:	   |   moveq #31,d0
    4c40:	   |   move.l d0,142(sp)
    4c44:	   |   move.l 187aa <DOSBase>,d0
    4c4a:	   |   movea.l d0,a6
    4c4c:	   |   move.l 150(sp),d1
    4c50:	   |   move.l 146(sp),d2
    4c54:	   |   move.l 142(sp),d3
    4c58:	   |   jsr -48(a6)
    4c5c:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    4c60:	   |   move.l 328(sp),-(sp)
    4c64:	   |   pea 161cf <PutChar+0xbd9>
    4c6a:	   |   jsr 14b22 <KPrintF>
    4c70:	   |   addq.l #8,sp
		return NULL;
    4c72:	   |   moveq #0,d0
    4c74:	/--|-- bra.w 4f38 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    4c78:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    4c7c:	|      move.l 306(sp),302(sp)
    4c82:	|      move.l 187aa <DOSBase>,d0
    4c88:	|      movea.l d0,a6
    4c8a:	|      move.l 302(sp),d1
    4c8e:	|      jsr -306(a6)
    4c92:	|      move.l d0,298(sp)
    4c96:	|      move.l 298(sp),d0
    4c9a:	|      moveq #83,d1
    4c9c:	|      cmp.l d0,d1
    4c9e:	|  /-- beq.s 4ca6 <openAndVerify+0xd4>
    4ca0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    4ca6:	|  \-> move.l 306(sp),294(sp)
    4cac:	|      move.l 187aa <DOSBase>,d0
    4cb2:	|      movea.l d0,a6
    4cb4:	|      move.l 294(sp),d1
    4cb8:	|      jsr -306(a6)
    4cbc:	|      move.l d0,290(sp)
    4cc0:	|      move.l 290(sp),d0
    4cc4:	|      moveq #76,d1
    4cc6:	|      cmp.l d0,d1
    4cc8:	|  /-- beq.s 4cd0 <openAndVerify+0xfe>
    4cca:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    4cd0:	|  \-> move.l 306(sp),286(sp)
    4cd6:	|      move.l 187aa <DOSBase>,d0
    4cdc:	|      movea.l d0,a6
    4cde:	|      move.l 286(sp),d1
    4ce2:	|      jsr -306(a6)
    4ce6:	|      move.l d0,282(sp)
    4cea:	|      move.l 282(sp),d0
    4cee:	|      moveq #85,d1
    4cf0:	|      cmp.l d0,d1
    4cf2:	|  /-- beq.s 4cfa <openAndVerify+0x128>
    4cf4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    4cfa:	|  \-> move.l 306(sp),278(sp)
    4d00:	|      move.l 187aa <DOSBase>,d0
    4d06:	|      movea.l d0,a6
    4d08:	|      move.l 278(sp),d1
    4d0c:	|      jsr -306(a6)
    4d10:	|      move.l d0,274(sp)
    4d14:	|      move.l 274(sp),d0
    4d18:	|      moveq #68,d1
    4d1a:	|      cmp.l d0,d1
    4d1c:	|  /-- beq.s 4d24 <openAndVerify+0x152>
    4d1e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    4d24:	|  \-> move.l 306(sp),270(sp)
    4d2a:	|      move.l 187aa <DOSBase>,d0
    4d30:	|      movea.l d0,a6
    4d32:	|      move.l 270(sp),d1
    4d36:	|      jsr -306(a6)
    4d3a:	|      move.l d0,266(sp)
    4d3e:	|      move.l 266(sp),d1
    4d42:	|      move.b 16(sp),d0
    4d46:	|      ext.w d0
    4d48:	|      movea.w d0,a0
    4d4a:	|      cmpa.l d1,a0
    4d4c:	|  /-- beq.s 4d54 <openAndVerify+0x182>
    4d4e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    4d54:	|  \-> move.l 306(sp),262(sp)
    4d5a:	|      move.l 187aa <DOSBase>,d0
    4d60:	|      movea.l d0,a6
    4d62:	|      move.l 262(sp),d1
    4d66:	|      jsr -306(a6)
    4d6a:	|      move.l d0,258(sp)
    4d6e:	|      move.l 258(sp),d1
    4d72:	|      move.b 14(sp),d0
    4d76:	|      ext.w d0
    4d78:	|      movea.w d0,a0
    4d7a:	|      cmpa.l d1,a0
    4d7c:	|  /-- beq.s 4d84 <openAndVerify+0x1b2>
    4d7e:	|  |   move.w #1,322(sp)
	if (headerBad) {
    4d84:	|  \-> tst.w 322(sp)
    4d88:	|  /-- beq.s 4de0 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    4d8a:	|  |   move.l 187aa <DOSBase>,d0
    4d90:	|  |   movea.l d0,a6
    4d92:	|  |   jsr -60(a6)
    4d96:	|  |   move.l d0,174(sp)
    4d9a:	|  |   move.l 174(sp),d0
    4d9e:	|  |   move.l d0,170(sp)
    4da2:	|  |   move.l #90606,166(sp)
    4daa:	|  |   moveq #31,d0
    4dac:	|  |   move.l d0,162(sp)
    4db0:	|  |   move.l 187aa <DOSBase>,d0
    4db6:	|  |   movea.l d0,a6
    4db8:	|  |   move.l 170(sp),d1
    4dbc:	|  |   move.l 166(sp),d2
    4dc0:	|  |   move.l 162(sp),d3
    4dc4:	|  |   jsr -48(a6)
    4dc8:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    4dcc:	|  |   pea 161ee <PutChar+0xbf8>
    4dd2:	|  |   jsr 14b22 <KPrintF>
    4dd8:	|  |   addq.l #4,sp
		return NULL;
    4dda:	|  |   moveq #0,d0
    4ddc:	+--|-- bra.w 4f38 <openAndVerify+0x366>
	}
	FGetC (fp);
    4de0:	|  \-> move.l 306(sp),254(sp)
    4de6:	|      move.l 187aa <DOSBase>,d0
    4dec:	|      movea.l d0,a6
    4dee:	|      move.l 254(sp),d1
    4df2:	|      jsr -306(a6)
    4df6:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    4dfa:	|      nop
    4dfc:	|  /-> move.l 306(sp),246(sp)
    4e02:	|  |   move.l 187aa <DOSBase>,d0
    4e08:	|  |   movea.l d0,a6
    4e0a:	|  |   move.l 246(sp),d1
    4e0e:	|  |   jsr -306(a6)
    4e12:	|  |   move.l d0,242(sp)
    4e16:	|  |   move.l 242(sp),d0
    4e1a:	|  \-- bne.s 4dfc <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    4e1c:	|      move.l 306(sp),238(sp)
    4e22:	|      move.l 187aa <DOSBase>,d0
    4e28:	|      movea.l d0,a6
    4e2a:	|      move.l 238(sp),d1
    4e2e:	|      jsr -306(a6)
    4e32:	|      move.l d0,234(sp)
    4e36:	|      move.l 234(sp),d0
    4e3a:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    4e3e:	|      move.l 306(sp),226(sp)
    4e44:	|      move.l 187aa <DOSBase>,d0
    4e4a:	|      movea.l d0,a6
    4e4c:	|      move.l 226(sp),d1
    4e50:	|      jsr -306(a6)
    4e54:	|      move.l d0,222(sp)
    4e58:	|      move.l 222(sp),d0
    4e5c:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    4e60:	|      move.l 230(sp),d0
    4e64:	|      lsl.l #8,d0
    4e66:	|      add.l 218(sp),d0
    4e6a:	|      movea.l 344(sp),a0
    4e6e:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    4e70:	|      movea.l 344(sp),a0
    4e74:	|      move.l (a0),d0
    4e76:	|      cmpi.l #514,d0
    4e7c:	|  /-- ble.s 4ed2 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    4e7e:	|  |   move.l 187aa <DOSBase>,d0
    4e84:	|  |   movea.l d0,a6
    4e86:	|  |   jsr -60(a6)
    4e8a:	|  |   move.l d0,194(sp)
    4e8e:	|  |   move.l 194(sp),d0
    4e92:	|  |   move.l d0,190(sp)
    4e96:	|  |   move.l #90633,186(sp)
    4e9e:	|  |   moveq #100,d1
    4ea0:	|  |   move.l d1,182(sp)
    4ea4:	|  |   move.l 187aa <DOSBase>,d0
    4eaa:	|  |   movea.l d0,a6
    4eac:	|  |   move.l 190(sp),d1
    4eb0:	|  |   move.l 186(sp),d2
    4eb4:	|  |   move.l 182(sp),d3
    4eb8:	|  |   jsr -48(a6)
    4ebc:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    4ec0:	|  |   pea 16209 <PutChar+0xc13>
    4ec6:	|  |   jsr 14b22 <KPrintF>
    4ecc:	|  |   addq.l #4,sp
		return NULL;
    4ece:	|  |   moveq #0,d0
    4ed0:	+--|-- bra.s 4f38 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    4ed2:	|  \-> movea.l 344(sp),a0
    4ed6:	|      move.l (a0),d0
    4ed8:	|      cmpi.l #257,d0
    4ede:	|  /-- bgt.s 4f34 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    4ee0:	|  |   move.l 187aa <DOSBase>,d0
    4ee6:	|  |   movea.l d0,a6
    4ee8:	|  |   jsr -60(a6)
    4eec:	|  |   move.l d0,214(sp)
    4ef0:	|  |   move.l 214(sp),d0
    4ef4:	|  |   move.l d0,210(sp)
    4ef8:	|  |   move.l #90702,206(sp)
    4f00:	|  |   moveq #100,d0
    4f02:	|  |   move.l d0,202(sp)
    4f06:	|  |   move.l 187aa <DOSBase>,d0
    4f0c:	|  |   movea.l d0,a6
    4f0e:	|  |   move.l 210(sp),d1
    4f12:	|  |   move.l 206(sp),d2
    4f16:	|  |   move.l 202(sp),d3
    4f1a:	|  |   jsr -48(a6)
    4f1e:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    4f22:	|  |   pea 1624e <PutChar+0xc58>
    4f28:	|  |   jsr 14b22 <KPrintF>
    4f2e:	|  |   addq.l #4,sp
		return NULL;
    4f30:	|  |   moveq #0,d0
    4f32:	+--|-- bra.s 4f38 <openAndVerify+0x366>
	}
	return fp;
    4f34:	|  \-> move.l 306(sp),d0
}
    4f38:	\----> movem.l (sp)+,d2-d3/a6
    4f3c:	       lea 312(sp),sp
    4f40:	       rts

00004f42 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    4f42:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    4f44:	          move.l #100154,(sp)
	while (* huntAndDestroy) {
    4f4a:	   /----- bra.s 4f76 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    4f4c:	/--|----> movea.l (sp),a0
    4f4e:	|  |      move.l (a0),d0
    4f50:	|  |      cmp.l 8(sp),d0
    4f54:	|  |  /-- bne.s 4f6c <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    4f56:	|  |  |   movea.l (sp),a0
    4f58:	|  |  |   movea.l (a0),a0
    4f5a:	|  |  |   move.l 44(a0),d0
    4f5e:	|  |  |   movea.l (sp),a0
    4f60:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    4f62:	|  |  |   movea.l 8(sp),a0
    4f66:	|  |  |   clr.l 44(a0)
    4f6a:	|  +--|-- bra.s 4f76 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    4f6c:	|  |  \-> movea.l (sp),a0
    4f6e:	|  |      move.l (a0),d0
    4f70:	|  |      moveq #44,d1
    4f72:	|  |      add.l d0,d1
    4f74:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    4f76:	|  \----> movea.l (sp),a0
    4f78:	|         move.l (a0),d0
    4f7a:	\-------- bne.s 4f4c <pauseFunction+0xa>
		}
	}
}
    4f7c:	          nop
    4f7e:	          nop
    4f80:	          addq.l #4,sp
    4f82:	          rts

00004f84 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    4f84:	move.l 1873a <allRunningFunctions>,d0
    4f8a:	movea.l 4(sp),a0
    4f8e:	move.l d0,44(a0)
	allRunningFunctions = fun;
    4f92:	move.l 4(sp),1873a <allRunningFunctions>
}
    4f9a:	nop
    4f9c:	rts

00004f9e <runSludge>:

BOOL runSludge () {
    4f9e:	                   lea -12(sp),sp
    4fa2:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    4fa4:	                   move.l 1873a <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    4fac:	      /----------- bra.s 5028 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    4fae:	   /--|----------> movea.l 12(sp),a0
    4fb2:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    4fb8:	   |  |            movea.l 12(sp),a0
    4fbc:	   |  |            move.b 56(a0),d0
    4fc0:	   |  |  /-------- bne.s 5022 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    4fc2:	   |  |  |         movea.l 12(sp),a0
    4fc6:	   |  |  |         move.l 12(a0),d0
    4fca:	   |  |  |  /----- beq.s 4ff4 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    4fcc:	   |  |  |  |      movea.l 12(sp),a0
    4fd0:	   |  |  |  |      move.l 12(a0),d0
    4fd4:	   |  |  |  |  /-- bpl.s 4fe0 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    4fd6:	   |  |  |  |  |   movea.l 12(sp),a0
    4fda:	   |  |  |  |  |   clr.l 12(a0)
    4fde:	   |  |  +--|--|-- bra.s 5022 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    4fe0:	   |  |  |  |  \-> movea.l 12(sp),a0
    4fe4:	   |  |  |  |      move.l 12(a0),d0
    4fe8:	   |  |  |  |      subq.l #1,d0
    4fea:	   |  |  |  |      movea.l 12(sp),a0
    4fee:	   |  |  |  |      move.l d0,12(a0)
    4ff2:	   |  |  +--|----- bra.s 5022 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    4ff4:	   |  |  |  \----> movea.l 12(sp),a0
    4ff8:	   |  |  |         move.w 50(a0),d0
    4ffc:	   |  |  |     /-- beq.s 500c <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    4ffe:	   |  |  |     |   movea.l 12(sp),a0
    5002:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    5006:	   |  |  |     |   jsr 65f8 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    500c:	   |  |  |     \-> move.l 12(sp),-(sp)
    5010:	   |  |  |         jsr 31e8 <continueFunction>
    5016:	   |  |  |         addq.l #4,sp
    5018:	   |  |  |         tst.w d0
    501a:	   |  |  +-------- bne.s 5022 <runSludge+0x84>
					return FALSE;
    501c:	   |  |  |         clr.w d0
    501e:	/--|--|--|-------- bra.w 50ae <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    5022:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    5028:	|  |  \----------> tst.l 12(sp)
    502c:	|  \-------------- bne.s 4fae <runSludge+0x10>
	}

	if (loadNow) {
    502e:	|                  move.l 1876e <loadNow>,d0
    5034:	|        /-------- beq.s 50ac <runSludge+0x10e>
		if (loadNow[0] == ':') {
    5036:	|        |         movea.l 1876e <loadNow>,a0
    503c:	|        |         move.b (a0),d0
    503e:	|        |         cmpi.b #58,d0
    5042:	|        |  /----- bne.s 5076 <runSludge+0xd8>
			saveGame (loadNow + 1);
    5044:	|        |  |      move.l 1876e <loadNow>,d0
    504a:	|        |  |      addq.l #1,d0
    504c:	|        |  |      move.l d0,-(sp)
    504e:	|        |  |      jsr ad1c <saveGame>
    5054:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    5056:	|        |  |      movea.l 188c0 <saverFunc>,a0
    505c:	|        |  |      lea 28(a0),a0
    5060:	|        |  |      pea 1 <_start+0x1>
    5064:	|        |  |      pea 1 <_start+0x1>
    5068:	|        |  |      move.l a0,-(sp)
    506a:	|        |  |      jsr 133cc <setVariable>
    5070:	|        |  |      lea 12(sp),sp
    5074:	|        |  |  /-- bra.s 508e <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    5076:	|        |  \--|-> move.l 1876e <loadNow>,d0
    507c:	|        |     |   move.l d0,-(sp)
    507e:	|        |     |   jsr a864 <loadGame>
    5084:	|        |     |   addq.l #4,sp
    5086:	|        |     |   tst.w d0
    5088:	|        |     +-- bne.s 508e <runSludge+0xf0>
    508a:	|        |     |   clr.w d0
    508c:	+--------|-----|-- bra.s 50ae <runSludge+0x110>
		}
		FreeVec(loadNow);
    508e:	|        |     \-> move.l 1876e <loadNow>,8(sp)
    5096:	|        |         move.l 187a2 <SysBase>,d0
    509c:	|        |         movea.l d0,a6
    509e:	|        |         movea.l 8(sp),a1
    50a2:	|        |         jsr -690(a6)
		loadNow = NULL;
    50a6:	|        |         clr.l 1876e <loadNow>
	}

	return TRUE;
    50ac:	|        \-------> moveq #1,d0
}
    50ae:	\----------------> movea.l (sp)+,a6
    50b0:	                   lea 12(sp),sp
    50b4:	                   rts

000050b6 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    50b6:	movea.l 1811c <currentEvents>,a0
    50bc:	move.l (a0),d0
    50be:	move.l 4(sp),-(sp)
    50c2:	move.l d0,-(sp)
    50c4:	jsr 8d0 <put2bytes>
    50ca:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    50cc:	movea.l 1811c <currentEvents>,a0
    50d2:	move.l 4(a0),d0
    50d6:	move.l 4(sp),-(sp)
    50da:	move.l d0,-(sp)
    50dc:	jsr 8d0 <put2bytes>
    50e2:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    50e4:	movea.l 1811c <currentEvents>,a0
    50ea:	move.l 8(a0),d0
    50ee:	move.l 4(sp),-(sp)
    50f2:	move.l d0,-(sp)
    50f4:	jsr 8d0 <put2bytes>
    50fa:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    50fc:	movea.l 1811c <currentEvents>,a0
    5102:	move.l 12(a0),d0
    5106:	move.l 4(sp),-(sp)
    510a:	move.l d0,-(sp)
    510c:	jsr 8d0 <put2bytes>
    5112:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    5114:	movea.l 1811c <currentEvents>,a0
    511a:	move.l 16(a0),d0
    511e:	move.l 4(sp),-(sp)
    5122:	move.l d0,-(sp)
    5124:	jsr 8d0 <put2bytes>
    512a:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    512c:	movea.l 1811c <currentEvents>,a0
    5132:	move.l 20(a0),d0
    5136:	move.l 4(sp),-(sp)
    513a:	move.l d0,-(sp)
    513c:	jsr 8d0 <put2bytes>
    5142:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    5144:	movea.l 1811c <currentEvents>,a0
    514a:	move.l 24(a0),d0
    514e:	move.l 4(sp),-(sp)
    5152:	move.l d0,-(sp)
    5154:	jsr 8d0 <put2bytes>
    515a:	addq.l #8,sp
}
    515c:	nop
    515e:	rts

00005160 <sludgeDisplay>:

void sludgeDisplay () {					
    5160:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    5162:	move.l #14675968,(sp)
	//custom->color[0] = 0xf00;
	CstDrawBackdrop();
    5168:	jsr 1334 <CstDrawBackdrop>
	CstRestoreScreen();
    516e:	jsr 17ac <CstRestoreScreen>
	drawPeople();
    5174:	jsr 8626 <drawPeople>
	CstSwapBuffer();
    517a:	jsr 22ca <CstSwapBuffer>
	//custom->color[0] = 0x000;
}
    5180:	nop
    5182:	addq.l #4,sp
    5184:	rts

00005186 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    5186:	      /-- bra.s 51a6 <stackSetByIndex+0x20>
		vS = vS->next;
    5188:	/-----|-> movea.l 4(sp),a0
    518c:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    5192:	|     +-- bne.s 51a6 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    5194:	|     |   pea 16295 <PutChar+0xc9f>
    519a:	|     |   jsr 14b22 <KPrintF>
    51a0:	|     |   addq.l #4,sp
			return FALSE;
    51a2:	|     |   clr.w d0
    51a4:	|  /--|-- bra.s 51c8 <stackSetByIndex+0x42>
	while (theIndex--) {
    51a6:	|  |  \-> move.l 8(sp),d0
    51aa:	|  |      move.l d0,d1
    51ac:	|  |      subq.l #1,d1
    51ae:	|  |      move.l d1,8(sp)
    51b2:	|  |      tst.l d0
    51b4:	\--|----- bne.s 5188 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    51b6:	   |      move.l 4(sp),d0
    51ba:	   |      move.l d0,-(sp)
    51bc:	   |      move.l 16(sp),-(sp)
    51c0:	   |      jsr 12f94 <copyVariable>
    51c6:	   |      addq.l #8,sp
}
    51c8:	   \----> rts

000051ca <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    51ca:	             lea -24(sp),sp
    51ce:	             move.l a6,-(sp)
    51d0:	             move.l 48(sp),d0
    51d4:	             move.w d0,d0
    51d6:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    51da:	             moveq #58,d0
    51dc:	             move.l d0,24(sp)
    51e0:	             clr.l 20(sp)
    51e4:	             move.l 187a2 <SysBase>,d0
    51ea:	             movea.l d0,a6
    51ec:	             move.l 24(sp),d0
    51f0:	             move.l 20(sp),d1
    51f4:	             jsr -684(a6)
    51f8:	             move.l d0,16(sp)
    51fc:	             move.l 16(sp),d0
    5200:	             move.l d0,12(sp)
	if(!newFunc) {
    5204:	         /-- bne.s 521a <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    5206:	         |   pea 162ae <PutChar+0xcb8>
    520c:	         |   jsr 14b22 <KPrintF>
    5212:	         |   addq.l #4,sp
		return 0;
    5214:	         |   moveq #0,d0
    5216:	/--------|-- bra.w 5330 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    521a:	|        \-> move.l 32(sp),d0
    521e:	|            movea.l 12(sp),a0
    5222:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    5224:	|            move.l 12(sp),-(sp)
    5228:	|            jsr 4940 <loadFunctionCode>
    522e:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    5230:	|            movea.l 12(sp),a0
    5234:	|            move.l 16(a0),d1
    5238:	|            move.l 36(sp),d0
    523c:	|            cmp.l d1,d0
    523e:	|        /-- beq.s 5254 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    5240:	|        |   pea 162d7 <PutChar+0xce1>
    5246:	|        |   jsr 14b22 <KPrintF>
    524c:	|        |   addq.l #4,sp
		return NULL; 
    524e:	|        |   moveq #0,d0
    5250:	+--------|-- bra.w 5330 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    5254:	|        \-> movea.l 12(sp),a0
    5258:	|            move.l 16(a0),d1
    525c:	|            movea.l 12(sp),a0
    5260:	|            move.l 8(a0),d0
    5264:	|            cmp.l d1,d0
    5266:	|  /-------- bge.s 52d0 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    5268:	|  |         pea 162f3 <PutChar+0xcfd>
    526e:	|  |         jsr 14b22 <KPrintF>
    5274:	|  |         addq.l #4,sp
		return NULL; 
    5276:	|  |         moveq #0,d0
    5278:	+--|-------- bra.w 5330 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    527c:	|  |  /----> movea.l 44(sp),a0
    5280:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    5284:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    5288:	|  |  |      movea.l 44(sp),a0
    528c:	|  |  |      move.l (a0),d0
    528e:	|  |  |  /-- bne.s 52a4 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    5290:	|  |  |  |   pea 1631d <PutChar+0xd27>
    5296:	|  |  |  |   jsr 14b22 <KPrintF>
    529c:	|  |  |  |   addq.l #4,sp
			return NULL;
    529e:	|  |  |  |   moveq #0,d0
    52a0:	+--|--|--|-- bra.w 5330 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    52a4:	|  |  |  \-> movea.l 12(sp),a0
    52a8:	|  |  |      move.l 20(a0),d1
    52ac:	|  |  |      move.l 36(sp),d0
    52b0:	|  |  |      lsl.l #3,d0
    52b2:	|  |  |      add.l d0,d1
    52b4:	|  |  |      move.l 8(sp),d0
    52b8:	|  |  |      move.l d1,-(sp)
    52ba:	|  |  |      move.l d0,-(sp)
    52bc:	|  |  |      jsr 12f94 <copyVariable>
    52c2:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    52c4:	|  |  |      move.l 44(sp),-(sp)
    52c8:	|  |  |      jsr 1345e <trimStack>
    52ce:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    52d0:	|  \--|----> tst.l 36(sp)
    52d4:	|     \----- bne.s 527c <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    52d6:	|            movea.l 12(sp),a0
    52da:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    52de:	|            movea.l 12(sp),a0
    52e2:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    52e6:	|            movea.l 12(sp),a0
    52ea:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    52f0:	|            movea.l 12(sp),a0
    52f4:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    52fa:	|            movea.l 12(sp),a0
    52fe:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    5302:	|            movea.l 12(sp),a0
    5306:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    530a:	|            movea.l 12(sp),a0
    530e:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    5312:	|            movea.l 12(sp),a0
    5316:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    531a:	|            movea.l 12(sp),a0
    531e:	|            clr.l 28(a0)

	restartFunction (newFunc);
    5322:	|            move.l 12(sp),-(sp)
    5326:	|            jsr 4f84 <restartFunction>
    532c:	|            addq.l #4,sp
	return 1;
    532e:	|            moveq #1,d0
}
    5330:	\----------> movea.l (sp)+,a6
    5332:	             lea 24(sp),sp
    5336:	             rts

00005338 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    5338:	clr.w 18128 <sliceBusy>
}
    533e:	nop
    5340:	rts

00005342 <getNumberedString>:

char * getNumberedString (int value) {
    5342:	       lea -56(sp),sp
    5346:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    534a:	       move.w 18128 <sliceBusy>,d0
    5350:	   /-- beq.s 539a <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    5352:	   |   move.l 187aa <DOSBase>,d0
    5358:	   |   movea.l d0,a6
    535a:	   |   jsr -60(a6)
    535e:	   |   move.l d0,28(sp)
    5362:	   |   move.l 28(sp),d0
    5366:	   |   move.l d0,24(sp)
    536a:	   |   move.l #90984,20(sp)
    5372:	   |   moveq #76,d0
    5374:	   |   move.l d0,16(sp)
    5378:	   |   move.l 187aa <DOSBase>,d0
    537e:	   |   movea.l d0,a6
    5380:	   |   move.l 24(sp),d1
    5384:	   |   move.l 20(sp),d2
    5388:	   |   move.l 16(sp),d3
    538c:	   |   jsr -48(a6)
    5390:	   |   move.l d0,12(sp)
		return NULL;
    5394:	   |   moveq #0,d0
    5396:	/--|-- bra.w 5436 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    539a:	|  \-> move.l 1878a <bigDataFile>,64(sp)
    53a2:	|      move.l 72(sp),d0
    53a6:	|      add.l d0,d0
    53a8:	|      add.l d0,d0
    53aa:	|      move.l d0,d1
    53ac:	|      move.l 18796 <startOfTextIndex>,d0
    53b2:	|      add.l d1,d0
    53b4:	|      move.l d0,60(sp)
    53b8:	|      moveq #-1,d0
    53ba:	|      move.l d0,56(sp)
    53be:	|      move.l 187aa <DOSBase>,d0
    53c4:	|      movea.l d0,a6
    53c6:	|      move.l 64(sp),d1
    53ca:	|      move.l 60(sp),d2
    53ce:	|      move.l 56(sp),d3
    53d2:	|      jsr -66(a6)
    53d6:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    53da:	|      move.l 1878a <bigDataFile>,d0
    53e0:	|      move.l d0,-(sp)
    53e2:	|      jsr 718 <get4bytes>
    53e8:	|      addq.l #4,sp
    53ea:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    53ee:	|      move.l 1878a <bigDataFile>,48(sp)
    53f6:	|      move.l 72(sp),44(sp)
    53fc:	|      moveq #-1,d0
    53fe:	|      move.l d0,40(sp)
    5402:	|      move.l 187aa <DOSBase>,d0
    5408:	|      movea.l d0,a6
    540a:	|      move.l 48(sp),d1
    540e:	|      move.l 44(sp),d2
    5412:	|      move.l 40(sp),d3
    5416:	|      jsr -66(a6)
    541a:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    541e:	|      move.l 1878a <bigDataFile>,d0
    5424:	|      move.l d0,-(sp)
    5426:	|      jsr b02 <readString>
    542c:	|      addq.l #4,sp
    542e:	|      move.l d0,32(sp)
	
	return s;
    5432:	|      move.l 32(sp),d0
}
    5436:	\----> movem.l (sp)+,d2-d3/a6
    543a:	       lea 56(sp),sp
    543e:	       rts

00005440 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    5440:	       lea -32(sp),sp
    5444:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    5448:	       move.w 18128 <sliceBusy>,d0
    544e:	   /-- beq.s 546a <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5450:	   |   pea 163b5 <PutChar+0xdbf>
    5456:	   |   pea 163d3 <PutChar+0xddd>
    545c:	   |   jsr 14b22 <KPrintF>
    5462:	   |   addq.l #8,sp
		return 0;
    5464:	   |   moveq #0,d0
    5466:	/--|-- bra.w 54fe <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    546a:	|  \-> move.l 1878a <bigDataFile>,40(sp)
    5472:	|      move.l 48(sp),d0
    5476:	|      add.l d0,d0
    5478:	|      add.l d0,d0
    547a:	|      move.l d0,d1
    547c:	|      move.l 18792 <startOfDataIndex>,d0
    5482:	|      add.l d1,d0
    5484:	|      move.l d0,36(sp)
    5488:	|      moveq #-1,d0
    548a:	|      move.l d0,32(sp)
    548e:	|      move.l 187aa <DOSBase>,d0
    5494:	|      movea.l d0,a6
    5496:	|      move.l 40(sp),d1
    549a:	|      move.l 36(sp),d2
    549e:	|      move.l 32(sp),d3
    54a2:	|      jsr -66(a6)
    54a6:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    54aa:	|      move.l 1878a <bigDataFile>,24(sp)
    54b2:	|      move.l 1878a <bigDataFile>,d0
    54b8:	|      move.l d0,-(sp)
    54ba:	|      jsr 718 <get4bytes>
    54c0:	|      addq.l #4,sp
    54c2:	|      move.l d0,20(sp)
    54c6:	|      clr.l 16(sp)
    54ca:	|      move.l 187aa <DOSBase>,d0
    54d0:	|      movea.l d0,a6
    54d2:	|      move.l 24(sp),d1
    54d6:	|      move.l 20(sp),d2
    54da:	|      move.l 16(sp),d3
    54de:	|      jsr -66(a6)
    54e2:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    54e6:	|      move.w #1,18128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    54ee:	|      move.l 1878a <bigDataFile>,d0
    54f4:	|      move.l d0,-(sp)
    54f6:	|      jsr 718 <get4bytes>
    54fc:	|      addq.l #4,sp
}
    54fe:	\----> movem.l (sp)+,d2-d3/a6
    5502:	       lea 32(sp),sp
    5506:	       rts

00005508 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    5508:	       lea -32(sp),sp
    550c:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    5510:	       move.w 18128 <sliceBusy>,d0
    5516:	   /-- beq.s 5532 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    5518:	   |   pea 163b5 <PutChar+0xdbf>
    551e:	   |   pea 163d3 <PutChar+0xddd>
    5524:	   |   jsr 14b22 <KPrintF>
    552a:	   |   addq.l #8,sp
        return FALSE;
    552c:	   |   clr.w d0
    552e:	/--|-- bra.w 55be <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    5532:	|  \-> move.l 1878a <bigDataFile>,40(sp)
    553a:	|      move.l 48(sp),d0
    553e:	|      add.l d0,d0
    5540:	|      add.l d0,d0
    5542:	|      move.l d0,d1
    5544:	|      move.l 1879e <startOfObjectIndex>,d0
    554a:	|      add.l d1,d0
    554c:	|      move.l d0,36(sp)
    5550:	|      moveq #-1,d0
    5552:	|      move.l d0,32(sp)
    5556:	|      move.l 187aa <DOSBase>,d0
    555c:	|      movea.l d0,a6
    555e:	|      move.l 40(sp),d1
    5562:	|      move.l 36(sp),d2
    5566:	|      move.l 32(sp),d3
    556a:	|      jsr -66(a6)
    556e:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    5572:	|      move.l 1878a <bigDataFile>,24(sp)
    557a:	|      move.l 1878a <bigDataFile>,d0
    5580:	|      move.l d0,-(sp)
    5582:	|      jsr 718 <get4bytes>
    5588:	|      addq.l #4,sp
    558a:	|      move.l d0,20(sp)
    558e:	|      moveq #-1,d0
    5590:	|      move.l d0,16(sp)
    5594:	|      move.l 187aa <DOSBase>,d0
    559a:	|      movea.l d0,a6
    559c:	|      move.l 24(sp),d1
    55a0:	|      move.l 20(sp),d2
    55a4:	|      move.l 16(sp),d3
    55a8:	|      jsr -66(a6)
    55ac:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    55b0:	|      move.w #1,18128 <sliceBusy>
    55b8:	|      move.w 18128 <sliceBusy>,d0
}
    55be:	\----> movem.l (sp)+,d2-d3/a6
    55c2:	       lea 32(sp),sp
    55c6:	       rts

000055c8 <openSubSlice>:

BOOL openSubSlice (int num) {
    55c8:	       lea -32(sp),sp
    55cc:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    55d0:	       move.w 18128 <sliceBusy>,d0
    55d6:	   /-- beq.s 55f2 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    55d8:	   |   pea 163b5 <PutChar+0xdbf>
    55de:	   |   pea 163d3 <PutChar+0xddd>
    55e4:	   |   jsr 14b22 <KPrintF>
    55ea:	   |   addq.l #8,sp
		return FALSE;
    55ec:	   |   clr.w d0
    55ee:	/--|-- bra.w 567e <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    55f2:	|  \-> move.l 1878a <bigDataFile>,40(sp)
    55fa:	|      move.l 48(sp),d0
    55fe:	|      add.l d0,d0
    5600:	|      add.l d0,d0
    5602:	|      move.l d0,d1
    5604:	|      move.l 1879a <startOfSubIndex>,d0
    560a:	|      add.l d1,d0
    560c:	|      move.l d0,36(sp)
    5610:	|      moveq #-1,d0
    5612:	|      move.l d0,32(sp)
    5616:	|      move.l 187aa <DOSBase>,d0
    561c:	|      movea.l d0,a6
    561e:	|      move.l 40(sp),d1
    5622:	|      move.l 36(sp),d2
    5626:	|      move.l 32(sp),d3
    562a:	|      jsr -66(a6)
    562e:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    5632:	|      move.l 1878a <bigDataFile>,24(sp)
    563a:	|      move.l 1878a <bigDataFile>,d0
    5640:	|      move.l d0,-(sp)
    5642:	|      jsr 718 <get4bytes>
    5648:	|      addq.l #4,sp
    564a:	|      move.l d0,20(sp)
    564e:	|      moveq #-1,d0
    5650:	|      move.l d0,16(sp)
    5654:	|      move.l 187aa <DOSBase>,d0
    565a:	|      movea.l d0,a6
    565c:	|      move.l 24(sp),d1
    5660:	|      move.l 20(sp),d2
    5664:	|      move.l 16(sp),d3
    5668:	|      jsr -66(a6)
    566c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    5670:	|      move.w #1,18128 <sliceBusy>
    5678:	|      move.w 18128 <sliceBusy>,d0
}
    567e:	\----> movem.l (sp)+,d2-d3/a6
    5682:	       lea 32(sp),sp
    5686:	       rts

00005688 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    5688:	       lea -180(sp),sp
    568c:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    5690:	       tst.l 196(sp)
    5694:	/----- beq.s 56d4 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    5696:	|      move.l 196(sp),1878a <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    569e:	|      move.l 196(sp),168(sp)
    56a4:	|      clr.l 164(sp)
    56a8:	|      clr.l 160(sp)
    56ac:	|      move.l 187aa <DOSBase>,d0
    56b2:	|      movea.l d0,a6
    56b4:	|      move.l 168(sp),d1
    56b8:	|      move.l 164(sp),d2
    56bc:	|      move.l 160(sp),d3
    56c0:	|      jsr -66(a6)
    56c4:	|      move.l d0,156(sp)
    56c8:	|      move.l 156(sp),d0
    56cc:	|      move.l d0,1878e <startIndex>
    56d2:	|  /-- bra.s 570e <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    56d4:	\--|-> move.l 1878a <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    56dc:	   |   move.l 196(sp),184(sp)
    56e2:	   |   move.l 1878e <startIndex>,d0
    56e8:	   |   move.l d0,180(sp)
    56ec:	   |   moveq #-1,d0
    56ee:	   |   move.l d0,176(sp)
    56f2:	   |   move.l 187aa <DOSBase>,d0
    56f8:	   |   movea.l d0,a6
    56fa:	   |   move.l 184(sp),d1
    56fe:	   |   move.l 180(sp),d2
    5702:	   |   move.l 176(sp),d3
    5706:	   |   jsr -66(a6)
    570a:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    570e:	   \-> clr.w 18128 <sliceBusy>

	if (skipBefore > numLanguages) {
    5714:	       move.l 204(sp),d0
    5718:	       cmp.l 200(sp),d0
    571c:	   /-- bls.s 5730 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    571e:	   |   pea 163ed <PutChar+0xdf7>
    5724:	   |   jsr 14b22 <KPrintF>
    572a:	   |   addq.l #4,sp
		skipBefore = 0;
    572c:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    5730:	   \-> move.l 200(sp),d0
    5734:	       sub.l 204(sp),d0
    5738:	       move.l d0,188(sp)
	while (skipBefore) {
    573c:	   /-- bra.s 577a <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    573e:	/--|-> move.l 196(sp),24(sp)
    5744:	|  |   move.l 196(sp),-(sp)
    5748:	|  |   jsr 718 <get4bytes>
    574e:	|  |   addq.l #4,sp
    5750:	|  |   move.l d0,20(sp)
    5754:	|  |   moveq #-1,d0
    5756:	|  |   move.l d0,16(sp)
    575a:	|  |   move.l 187aa <DOSBase>,d0
    5760:	|  |   movea.l d0,a6
    5762:	|  |   move.l 24(sp),d1
    5766:	|  |   move.l 20(sp),d2
    576a:	|  |   move.l 16(sp),d3
    576e:	|  |   jsr -66(a6)
    5772:	|  |   move.l d0,12(sp)
		skipBefore --;
    5776:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    577a:	|  \-> tst.l 204(sp)
    577e:	\----- bne.s 573e <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    5780:	       move.l 196(sp),152(sp)
    5786:	       clr.l 148(sp)
    578a:	       clr.l 144(sp)
    578e:	       move.l 187aa <DOSBase>,d0
    5794:	       movea.l d0,a6
    5796:	       move.l 152(sp),d1
    579a:	       move.l 148(sp),d2
    579e:	       move.l 144(sp),d3
    57a2:	       jsr -66(a6)
    57a6:	       move.l d0,140(sp)
    57aa:	       move.l 140(sp),d0
    57ae:	       addq.l #4,d0
    57b0:	       move.l d0,18796 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    57b6:	       move.l 196(sp),136(sp)
    57bc:	       move.l 196(sp),-(sp)
    57c0:	       jsr 718 <get4bytes>
    57c6:	       addq.l #4,sp
    57c8:	       move.l d0,132(sp)
    57cc:	       moveq #-1,d0
    57ce:	       move.l d0,128(sp)
    57d2:	       move.l 187aa <DOSBase>,d0
    57d8:	       movea.l d0,a6
    57da:	       move.l 136(sp),d1
    57de:	       move.l 132(sp),d2
    57e2:	       move.l 128(sp),d3
    57e6:	       jsr -66(a6)
    57ea:	       move.l d0,124(sp)

	while (skipAfter) {
    57ee:	   /-- bra.s 582c <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    57f0:	/--|-> move.l 196(sp),40(sp)
    57f6:	|  |   move.l 196(sp),-(sp)
    57fa:	|  |   jsr 718 <get4bytes>
    5800:	|  |   addq.l #4,sp
    5802:	|  |   move.l d0,36(sp)
    5806:	|  |   moveq #-1,d0
    5808:	|  |   move.l d0,32(sp)
    580c:	|  |   move.l 187aa <DOSBase>,d0
    5812:	|  |   movea.l d0,a6
    5814:	|  |   move.l 40(sp),d1
    5818:	|  |   move.l 36(sp),d2
    581c:	|  |   move.l 32(sp),d3
    5820:	|  |   jsr -66(a6)
    5824:	|  |   move.l d0,28(sp)
		skipAfter --;
    5828:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    582c:	|  \-> tst.l 188(sp)
    5830:	\----- bne.s 57f0 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    5832:	       move.l 196(sp),120(sp)
    5838:	       clr.l 116(sp)
    583c:	       clr.l 112(sp)
    5840:	       move.l 187aa <DOSBase>,d0
    5846:	       movea.l d0,a6
    5848:	       move.l 120(sp),d1
    584c:	       move.l 116(sp),d2
    5850:	       move.l 112(sp),d3
    5854:	       jsr -66(a6)
    5858:	       move.l d0,108(sp)
    585c:	       move.l 108(sp),d0
    5860:	       addq.l #4,d0
    5862:	       move.l d0,1879a <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    5868:	       move.l 196(sp),104(sp)
    586e:	       move.l 196(sp),-(sp)
    5872:	       jsr 718 <get4bytes>
    5878:	       addq.l #4,sp
    587a:	       move.l d0,100(sp)
    587e:	       clr.l 96(sp)
    5882:	       move.l 187aa <DOSBase>,d0
    5888:	       movea.l d0,a6
    588a:	       move.l 104(sp),d1
    588e:	       move.l 100(sp),d2
    5892:	       move.l 96(sp),d3
    5896:	       jsr -66(a6)
    589a:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    589e:	       move.l 196(sp),88(sp)
    58a4:	       clr.l 84(sp)
    58a8:	       clr.l 80(sp)
    58ac:	       move.l 187aa <DOSBase>,d0
    58b2:	       movea.l d0,a6
    58b4:	       move.l 88(sp),d1
    58b8:	       move.l 84(sp),d2
    58bc:	       move.l 80(sp),d3
    58c0:	       jsr -66(a6)
    58c4:	       move.l d0,76(sp)
    58c8:	       move.l 76(sp),d0
    58cc:	       addq.l #4,d0
    58ce:	       move.l d0,1879e <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    58d4:	       move.l 196(sp),72(sp)
    58da:	       move.l 196(sp),-(sp)
    58de:	       jsr 718 <get4bytes>
    58e4:	       addq.l #4,sp
    58e6:	       move.l d0,68(sp)
    58ea:	       clr.l 64(sp)
    58ee:	       move.l 187aa <DOSBase>,d0
    58f4:	       movea.l d0,a6
    58f6:	       move.l 72(sp),d1
    58fa:	       move.l 68(sp),d2
    58fe:	       move.l 64(sp),d3
    5902:	       jsr -66(a6)
    5906:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    590a:	       move.l 196(sp),56(sp)
    5910:	       clr.l 52(sp)
    5914:	       clr.l 48(sp)
    5918:	       move.l 187aa <DOSBase>,d0
    591e:	       movea.l d0,a6
    5920:	       move.l 56(sp),d1
    5924:	       move.l 52(sp),d2
    5928:	       move.l 48(sp),d3
    592c:	       jsr -66(a6)
    5930:	       move.l d0,44(sp)
    5934:	       move.l 44(sp),d0
    5938:	       move.l d0,18792 <startOfDataIndex>
    593e:	       nop
    5940:	       movem.l (sp)+,d2-d3/a6
    5944:	       lea 180(sp),sp
    5948:	       rts

0000594a <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    594a:	    lea -20(sp),sp
    594e:	    move.l a6,-(sp)
    5950:	    move.l d7,-(sp)
	APTR vbr = 0;
    5952:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    5956:	    move.w #20090,10(sp)
    595c:	    move.w #2049,12(sp)
    5962:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    5968:	    movea.l 187a2 <SysBase>,a0
    596e:	    move.w 296(a0),d0
    5972:	    move.w d0,d0
    5974:	    andi.l #65535,d0
    597a:	    moveq #1,d1
    597c:	    and.l d1,d0
    597e:	/-- beq.s 59ac <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    5980:	|   lea 28(sp),a0
    5984:	|   lea -18(a0),a0
    5988:	|   move.l a0,20(sp)
    598c:	|   move.l 187a2 <SysBase>,d0
    5992:	|   movea.l d0,a6
    5994:	|   move.l 20(sp),d7
    5998:	|   exg d7,a5
    599a:	|   jsr -30(a6)
    599e:	|   exg d7,a5
    59a0:	|   move.l d0,16(sp)
    59a4:	|   move.l 16(sp),d0
    59a8:	|   move.l d0,24(sp)

	return vbr;
    59ac:	\-> move.l 24(sp),d0
}
    59b0:	    move.l (sp)+,d7
    59b2:	    movea.l (sp)+,a6
    59b4:	    lea 20(sp),sp
    59b8:	    rts

000059ba <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    59ba:	movea.l 187c8 <VBR>,a0
    59c0:	lea 108(a0),a0
    59c4:	move.l 4(sp),(a0)
}
    59c8:	nop
    59ca:	rts

000059cc <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    59cc:	movea.l 187c8 <VBR>,a0
    59d2:	move.l 108(a0),d0
}
    59d6:	rts

000059d8 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    59d8:	       subq.l #8,sp
    59da:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    59dc:	       pea 16436 <PutChar+0xe40>
    59e2:	       jsr 14b22 <KPrintF>
    59e8:	       addq.l #4,sp
	Forbid();
    59ea:	       move.l 187a2 <SysBase>,d0
    59f0:	       movea.l d0,a6
    59f2:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    59f6:	       pea 1644e <PutChar+0xe58>
    59fc:	       jsr 14b22 <KPrintF>
    5a02:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    5a04:	       movea.l 187a6 <custom>,a0
    5a0a:	       move.w 16(a0),d0
    5a0e:	       move.w d0,187c6 <SystemADKCON>
	SystemInts=custom->intenar;
    5a14:	       movea.l 187a6 <custom>,a0
    5a1a:	       move.w 28(a0),d0
    5a1e:	       move.w d0,187c2 <SystemInts>
	SystemDMA=custom->dmaconr;
    5a24:	       movea.l 187a6 <custom>,a0
    5a2a:	       move.w 2(a0),d0
    5a2e:	       move.w d0,187c4 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    5a34:	       movea.l 187ae <GfxBase>,a0
    5a3a:	       move.l 34(a0),d0
    5a3e:	       move.l d0,187d0 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    5a44:	       pea 1646c <PutChar+0xe76>
    5a4a:	       jsr 14b22 <KPrintF>
    5a50:	       addq.l #4,sp
	LoadView(0);
    5a52:	       clr.l 4(sp)
    5a56:	       move.l 187ae <GfxBase>,d0
    5a5c:	       movea.l d0,a6
    5a5e:	       movea.l 4(sp),a1
    5a62:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    5a66:	       pea 16482 <PutChar+0xe8c>
    5a6c:	       jsr 14b22 <KPrintF>
    5a72:	       addq.l #4,sp
	WaitTOF();
    5a74:	       move.l 187ae <GfxBase>,d0
    5a7a:	       movea.l d0,a6
    5a7c:	       jsr -270(a6)
	WaitTOF();
    5a80:	       move.l 187ae <GfxBase>,d0
    5a86:	       movea.l d0,a6
    5a88:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    5a8c:	       pea 16497 <PutChar+0xea1>
    5a92:	       jsr 14b22 <KPrintF>
    5a98:	       addq.l #4,sp
	WaitVbl();
    5a9a:	       jsr 14a56 <WaitVbl>
	WaitVbl();
    5aa0:	       jsr 14a56 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    5aa6:	       pea 164ac <PutChar+0xeb6>
    5aac:	       jsr 14b22 <KPrintF>
    5ab2:	       addq.l #4,sp
	OwnBlitter();
    5ab4:	       move.l 187ae <GfxBase>,d0
    5aba:	       movea.l d0,a6
    5abc:	       jsr -456(a6)
	WaitBlit();	
    5ac0:	       move.l 187ae <GfxBase>,d0
    5ac6:	       movea.l d0,a6
    5ac8:	       jsr -228(a6)
	Disable();
    5acc:	       move.l 187a2 <SysBase>,d0
    5ad2:	       movea.l d0,a6
    5ad4:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    5ad8:	       pea 164cd <PutChar+0xed7>
    5ade:	       jsr 14b22 <KPrintF>
    5ae4:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    5ae6:	       movea.l 187a6 <custom>,a0
    5aec:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    5af2:	       pea 164e4 <PutChar+0xeee>
    5af8:	       jsr 14b22 <KPrintF>
    5afe:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    5b00:	       clr.l 8(sp)
    5b04:	   /-- bra.s 5b22 <TakeSystem+0x14a>
		custom->color[a]=0;
    5b06:	/--|-> movea.l 187a6 <custom>,a0
    5b0c:	|  |   move.l 8(sp),d0
    5b10:	|  |   addi.l #192,d0
    5b16:	|  |   add.l d0,d0
    5b18:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    5b1e:	|  |   addq.l #1,8(sp)
    5b22:	|  \-> moveq #31,d0
    5b24:	|      cmp.l 8(sp),d0
    5b28:	\----- bge.s 5b06 <TakeSystem+0x12e>

	WaitVbl();
    5b2a:	       jsr 14a56 <WaitVbl>
	WaitVbl();
    5b30:	       jsr 14a56 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    5b36:	       pea 16509 <PutChar+0xf13>
    5b3c:	       jsr 14b22 <KPrintF>
    5b42:	       addq.l #4,sp
	VBR=GetVBR();
    5b44:	       jsr 594a <GetVBR>
    5b4a:	       move.l d0,187c8 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    5b50:	       jsr 59cc <GetInterruptHandler>
    5b56:	       move.l d0,187cc <SystemIrq>
}
    5b5c:	       nop
    5b5e:	       movea.l (sp)+,a6
    5b60:	       addq.l #8,sp
    5b62:	       rts

00005b64 <FreeSystem>:

void FreeSystem() { 
    5b64:	subq.l #4,sp
    5b66:	move.l a6,-(sp)
	WaitVbl();
    5b68:	jsr 14a56 <WaitVbl>
	WaitBlit();
    5b6e:	move.l 187ae <GfxBase>,d0
    5b74:	movea.l d0,a6
    5b76:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    5b7a:	movea.l 187a6 <custom>,a0
    5b80:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    5b86:	movea.l 187a6 <custom>,a0
    5b8c:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    5b92:	movea.l 187a6 <custom>,a0
    5b98:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    5b9e:	move.l 187cc <SystemIrq>,d0
    5ba4:	move.l d0,-(sp)
    5ba6:	jsr 59ba <SetInterruptHandler>
    5bac:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    5bae:	movea.l 187ae <GfxBase>,a0
    5bb4:	move.l 38(a0),d0
    5bb8:	movea.l 187a6 <custom>,a0
    5bbe:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    5bc2:	movea.l 187ae <GfxBase>,a0
    5bc8:	move.l 50(a0),d0
    5bcc:	movea.l 187a6 <custom>,a0
    5bd2:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    5bd6:	movea.l 187a6 <custom>,a0
    5bdc:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    5be2:	move.w 187c4 <SystemDMA>,d0
    5be8:	movea.l 187a6 <custom>,a0
    5bee:	ori.w #-32768,d0
    5bf2:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    5bf6:	move.w 187c6 <SystemADKCON>,d0
    5bfc:	movea.l 187a6 <custom>,a0
    5c02:	ori.w #-32768,d0
    5c06:	move.w d0,158(a0)

	WaitBlit();	
    5c0a:	move.l 187ae <GfxBase>,d0
    5c10:	movea.l d0,a6
    5c12:	jsr -228(a6)
	DisownBlitter();
    5c16:	move.l 187ae <GfxBase>,d0
    5c1c:	movea.l d0,a6
    5c1e:	jsr -462(a6)
	Enable();
    5c22:	move.l 187a2 <SysBase>,d0
    5c28:	movea.l d0,a6
    5c2a:	jsr -126(a6)

	LoadView(ActiView);
    5c2e:	move.l 187d0 <ActiView>,4(sp)
    5c36:	move.l 187ae <GfxBase>,d0
    5c3c:	movea.l d0,a6
    5c3e:	movea.l 4(sp),a1
    5c42:	jsr -222(a6)
	WaitTOF();
    5c46:	move.l 187ae <GfxBase>,d0
    5c4c:	movea.l d0,a6
    5c4e:	jsr -270(a6)
	WaitTOF();
    5c52:	move.l 187ae <GfxBase>,d0
    5c58:	movea.l d0,a6
    5c5a:	jsr -270(a6)

	Permit();
    5c5e:	move.l 187a2 <SysBase>,d0
    5c64:	movea.l d0,a6
    5c66:	jsr -138(a6)
}
    5c6a:	nop
    5c6c:	movea.l (sp)+,a6
    5c6e:	addq.l #4,sp
    5c70:	rts

00005c72 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    5c72:	    lea -128(sp),sp
    5c76:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    5c7a:	    movea.w #4,a0
    5c7e:	    move.l (a0),d0
    5c80:	    move.l d0,187a2 <SysBase>
	custom = (struct Custom*)0xdff000;	
    5c86:	    move.l #14675968,187a6 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    5c90:	    move.l #91437,136(sp)
    5c98:	    clr.l 132(sp)
    5c9c:	    move.l 187a2 <SysBase>,d0
    5ca2:	    movea.l d0,a6
    5ca4:	    movea.l 136(sp),a1
    5ca8:	    move.l 132(sp),d0
    5cac:	    jsr -552(a6)
    5cb0:	    move.l d0,128(sp)
    5cb4:	    move.l 128(sp),d0
    5cb8:	    move.l d0,187ae <GfxBase>
	if (!GfxBase)
    5cbe:	    move.l 187ae <GfxBase>,d0
    5cc4:	/-- bne.s 5cda <main+0x68>
		Exit(0);
    5cc6:	|   clr.l 124(sp)
    5cca:	|   move.l 187aa <DOSBase>,d0
    5cd0:	|   movea.l d0,a6
    5cd2:	|   move.l 124(sp),d1
    5cd6:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    5cda:	\-> move.l #91454,120(sp)
    5ce2:	    clr.l 116(sp)
    5ce6:	    move.l 187a2 <SysBase>,d0
    5cec:	    movea.l d0,a6
    5cee:	    movea.l 120(sp),a1
    5cf2:	    move.l 116(sp),d0
    5cf6:	    jsr -552(a6)
    5cfa:	    move.l d0,112(sp)
    5cfe:	    move.l 112(sp),d0
    5d02:	    move.l d0,187aa <DOSBase>
	if (!DOSBase)
    5d08:	    move.l 187aa <DOSBase>,d0
    5d0e:	/-- bne.s 5d24 <main+0xb2>
		Exit(0);
    5d10:	|   clr.l 108(sp)
    5d14:	|   move.l 187aa <DOSBase>,d0
    5d1a:	|   movea.l d0,a6
    5d1c:	|   move.l 108(sp),d1
    5d20:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    5d24:	\-> move.l #91466,104(sp)
    5d2c:	    clr.l 100(sp)
    5d30:	    move.l 187a2 <SysBase>,d0
    5d36:	    movea.l d0,a6
    5d38:	    movea.l 104(sp),a1
    5d3c:	    move.l 100(sp),d0
    5d40:	    jsr -552(a6)
    5d44:	    move.l d0,96(sp)
    5d48:	    move.l 96(sp),d0
    5d4c:	    move.l d0,187b2 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    5d52:	    move.l 187b2 <MathIeeeSingBasBase>,d0
    5d58:	/-- bne.s 5d6e <main+0xfc>
		Exit(0);	
    5d5a:	|   clr.l 92(sp)
    5d5e:	|   move.l 187aa <DOSBase>,d0
    5d64:	|   movea.l d0,a6
    5d66:	|   move.l 92(sp),d1
    5d6a:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    5d6e:	\-> move.l #91490,88(sp)
    5d76:	    clr.l 84(sp)
    5d7a:	    move.l 187a2 <SysBase>,d0
    5d80:	    movea.l d0,a6
    5d82:	    movea.l 88(sp),a1
    5d86:	    move.l 84(sp),d0
    5d8a:	    jsr -552(a6)
    5d8e:	    move.l d0,80(sp)
    5d92:	    move.l 80(sp),d0
    5d96:	    move.l d0,187b6 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    5d9c:	    move.l 187b6 <MathIeeeSingTransBase>,d0
    5da2:	/-- bne.s 5db8 <main+0x146>
		Exit(0);
    5da4:	|   clr.l 76(sp)
    5da8:	|   move.l 187aa <DOSBase>,d0
    5dae:	|   movea.l d0,a6
    5db0:	|   move.l 76(sp),d1
    5db4:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    5db8:	\-> move.l #91516,72(sp)
    5dc0:	    clr.l 68(sp)
    5dc4:	    move.l 187a2 <SysBase>,d0
    5dca:	    movea.l d0,a6
    5dcc:	    movea.l 72(sp),a1
    5dd0:	    move.l 68(sp),d0
    5dd4:	    jsr -552(a6)
    5dd8:	    move.l d0,64(sp)
    5ddc:	    move.l 64(sp),d0
    5de0:	    move.l d0,187be <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    5de6:	    move.l 187be <MathIeeeDoubTransBase>,d0
    5dec:	/-- bne.s 5e02 <main+0x190>
		Exit(0);
    5dee:	|   clr.l 60(sp)
    5df2:	|   move.l 187aa <DOSBase>,d0
    5df8:	|   movea.l d0,a6
    5dfa:	|   move.l 60(sp),d1
    5dfe:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    5e02:	\-> move.l #91542,56(sp)
    5e0a:	    clr.l 52(sp)
    5e0e:	    move.l 187a2 <SysBase>,d0
    5e14:	    movea.l d0,a6
    5e16:	    movea.l 56(sp),a1
    5e1a:	    move.l 52(sp),d0
    5e1e:	    jsr -552(a6)
    5e22:	    move.l d0,48(sp)
    5e26:	    move.l 48(sp),d0
    5e2a:	    move.l d0,187ba <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    5e30:	    move.l 187ba <MathIeeeDoubBasBase>,d0
    5e36:	/-- bne.s 5e4c <main+0x1da>
		Exit(0);
    5e38:	|   clr.l 44(sp)
    5e3c:	|   move.l 187aa <DOSBase>,d0
    5e42:	|   movea.l d0,a6
    5e44:	|   move.l 44(sp),d1
    5e48:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 001!\n");
    5e4c:	\-> pea 165ae <PutChar+0xfb8>
    5e52:	    jsr 14b22 <KPrintF>
    5e58:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    5e5a:	    move.l 187aa <DOSBase>,d0
    5e60:	    movea.l d0,a6
    5e62:	    jsr -60(a6)
    5e66:	    move.l d0,40(sp)
    5e6a:	    move.l 40(sp),d0
    5e6e:	    move.l d0,36(sp)
    5e72:	    move.l #91598,32(sp)
    5e7a:	    moveq #15,d0
    5e7c:	    move.l d0,28(sp)
    5e80:	    move.l 187aa <DOSBase>,d0
    5e86:	    movea.l d0,a6
    5e88:	    move.l 36(sp),d1
    5e8c:	    move.l 32(sp),d2
    5e90:	    move.l 28(sp),d3
    5e94:	    jsr -48(a6)
    5e98:	    move.l d0,24(sp)
	Delay(50);
    5e9c:	    moveq #50,d0
    5e9e:	    move.l d0,20(sp)
    5ea2:	    move.l 187aa <DOSBase>,d0
    5ea8:	    movea.l d0,a6
    5eaa:	    move.l 20(sp),d1
    5eae:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    5eb2:	    pea 165de <PutChar+0xfe8>
    5eb8:	    jsr 14b22 <KPrintF>
    5ebe:	    addq.l #4,sp
	TakeSystem();
    5ec0:	    jsr 59d8 <TakeSystem>
	KPrintF("System Taken\n");
    5ec6:	    pea 165ed <PutChar+0xff7>
    5ecc:	    jsr 14b22 <KPrintF>
    5ed2:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    5ed4:	    movea.l 187a6 <custom>,a0
    5eda:	    move.w #-30721,150(a0)
	WaitVbl();
    5ee0:	    jsr 14a56 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    5ee6:	    pea 165fb <PutChar+0x1005>
    5eec:	    jsr 14b22 <KPrintF>
    5ef2:	    addq.l #4,sp
	main_sludge(argc, argv);	
    5ef4:	    move.l 148(sp),-(sp)
    5ef8:	    move.l 148(sp),-(sp)
    5efc:	    jsr 2ad0 <main_sludge>
    5f02:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    5f04:	    jsr 5b64 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    5f0a:	    move.l 187aa <DOSBase>,16(sp)
    5f12:	    move.l 187a2 <SysBase>,d0
    5f18:	    movea.l d0,a6
    5f1a:	    movea.l 16(sp),a1
    5f1e:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    5f22:	    move.l 187ae <GfxBase>,12(sp)
    5f2a:	    move.l 187a2 <SysBase>,d0
    5f30:	    movea.l d0,a6
    5f32:	    movea.l 12(sp),a1
    5f36:	    jsr -414(a6)
    5f3a:	    moveq #0,d0
}
    5f3c:	    movem.l (sp)+,d2-d3/a6
    5f40:	    lea 128(sp),sp
    5f44:	    rts

00005f46 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    5f46:	    lea -16(sp),sp
    5f4a:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    5f4c:	    moveq #8,d0
    5f4e:	    move.l d0,16(sp)
    5f52:	    clr.l 12(sp)
    5f56:	    move.l 187a2 <SysBase>,d0
    5f5c:	    movea.l d0,a6
    5f5e:	    move.l 16(sp),d0
    5f62:	    move.l 12(sp),d1
    5f66:	    jsr -684(a6)
    5f6a:	    move.l d0,8(sp)
    5f6e:	    move.l 8(sp),d0
    5f72:	    move.l d0,4(sp)
	if (!newStat) {
    5f76:	/-- bne.s 5fa6 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    5f78:	|   movea.l 1812a <nowStatus>,a0
    5f7e:	|   move.l (a0),d0
    5f80:	|   movea.l 4(sp),a0
    5f84:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    5f88:	|   pea 1605a <PutChar+0xa64>
    5f8e:	|   jsr b8 <copyString>
    5f94:	|   addq.l #4,sp
    5f96:	|   movea.l 4(sp),a0
    5f9a:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    5f9c:	|   movea.l 1812a <nowStatus>,a0
    5fa2:	|   move.l 4(sp),(a0)
	}
}
    5fa6:	\-> nop
    5fa8:	    movea.l (sp)+,a6
    5faa:	    lea 16(sp),sp
    5fae:	    rts

00005fb0 <clearStatusBar>:

void clearStatusBar () {
    5fb0:	       lea -16(sp),sp
    5fb4:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    5fb6:	       movea.l 1812a <nowStatus>,a0
    5fbc:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    5fc0:	       movea.l 1812a <nowStatus>,a0
    5fc6:	       moveq #-1,d0
    5fc8:	       move.l d0,6(a0)
	while (stat) {
    5fcc:	   /-- bra.s 600c <clearStatusBar+0x5c>
		kill = stat;
    5fce:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    5fd4:	|  |   movea.l 16(sp),a0
    5fd8:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    5fde:	|  |   movea.l 12(sp),a0
    5fe2:	|  |   move.l (a0),8(sp)
    5fe6:	|  |   move.l 187a2 <SysBase>,d0
    5fec:	|  |   movea.l d0,a6
    5fee:	|  |   movea.l 8(sp),a1
    5ff2:	|  |   jsr -690(a6)
		FreeVec(kill);
    5ff6:	|  |   move.l 12(sp),4(sp)
    5ffc:	|  |   move.l 187a2 <SysBase>,d0
    6002:	|  |   movea.l d0,a6
    6004:	|  |   movea.l 4(sp),a1
    6008:	|  |   jsr -690(a6)
	while (stat) {
    600c:	|  \-> tst.l 16(sp)
    6010:	\----- bne.s 5fce <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    6012:	       movea.l 1812a <nowStatus>,a0
    6018:	       clr.l (a0)
}
    601a:	       nop
    601c:	       movea.l (sp)+,a6
    601e:	       lea 16(sp),sp
    6022:	       rts

00006024 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    6024:	clr.l 187d4 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    602a:	move.w #-1,187d8 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    6032:	moveq #-1,d0
    6034:	move.l d0,187da <mainStatus+0x6>
	mainStatus.statusX = 10;
    603a:	moveq #10,d0
    603c:	move.l d0,187de <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    6042:	movea.l 186fa <winHeight>,a0
    6048:	lea -15(a0),a0
    604c:	move.l a0,d0
    604e:	move.l d0,187e2 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    6054:	nop
    6056:	rts

00006058 <killLastStatus>:

void killLastStatus () {
    6058:	    lea -12(sp),sp
    605c:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    605e:	    movea.l 1812a <nowStatus>,a0
    6064:	    move.l (a0),d0
    6066:	/-- beq.s 60b0 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    6068:	|   movea.l 1812a <nowStatus>,a0
    606e:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    6072:	|   movea.l 1812a <nowStatus>,a0
    6078:	|   movea.l 12(sp),a1
    607c:	|   move.l 4(a1),d0
    6080:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    6082:	|   movea.l 12(sp),a0
    6086:	|   move.l (a0),8(sp)
    608a:	|   move.l 187a2 <SysBase>,d0
    6090:	|   movea.l d0,a6
    6092:	|   movea.l 8(sp),a1
    6096:	|   jsr -690(a6)
		FreeVec(kill);
    609a:	|   move.l 12(sp),4(sp)
    60a0:	|   move.l 187a2 <SysBase>,d0
    60a6:	|   movea.l d0,a6
    60a8:	|   movea.l 4(sp),a1
    60ac:	|   jsr -690(a6)
	}
}
    60b0:	\-> nop
    60b2:	    movea.l (sp)+,a6
    60b4:	    lea 12(sp),sp
    60b8:	    rts

000060ba <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    60ba:	movea.l 1812a <nowStatus>,a0
    60c0:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    60c6:	movea.l 1812a <nowStatus>,a0
    60cc:	move.l 8(sp),14(a0)
}
    60d2:	nop
    60d4:	rts

000060d6 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    60d6:	       lea -100(sp),sp
    60da:	       move.l a6,-(sp)
    60dc:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    60de:	       movea.l 1812a <nowStatus>,a0
    60e4:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    60e8:	       movea.l 1812a <nowStatus>,a0
    60ee:	       move.w 4(a0),d0
    60f2:	       move.w d0,d0
    60f4:	       andi.l #65535,d0
    60fa:	       move.l 112(sp),-(sp)
    60fe:	       move.l d0,-(sp)
    6100:	       jsr 8d0 <put2bytes>
    6106:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    6108:	       movea.l 1812a <nowStatus>,a0
    610e:	       move.l 6(a0),d0
    6112:	       move.l d0,d0
    6114:	       movea.w d0,a0
    6116:	       move.l 112(sp),-(sp)
    611a:	       move.l a0,-(sp)
    611c:	       jsr a9c <putSigned>
    6122:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    6124:	       movea.l 1812a <nowStatus>,a0
    612a:	       move.l 10(a0),d0
    612e:	       move.l 112(sp),-(sp)
    6132:	       move.l d0,-(sp)
    6134:	       jsr 8d0 <put2bytes>
    613a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    613c:	       movea.l 1812a <nowStatus>,a0
    6142:	       move.l 14(a0),d0
    6146:	       move.l 112(sp),-(sp)
    614a:	       move.l d0,-(sp)
    614c:	       jsr 8d0 <put2bytes>
    6152:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    6154:	       move.l 112(sp),100(sp)
    615a:	       movea.l 1812a <nowStatus>,a0
    6160:	       move.l 18(a0),96(sp)
    6166:	       move.l 187aa <DOSBase>,d0
    616c:	       movea.l d0,a6
    616e:	       move.l 100(sp),d1
    6172:	       move.l 96(sp),d2
    6176:	       jsr -312(a6)
    617a:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    617e:	       move.l 112(sp),88(sp)
    6184:	       movea.l 1812a <nowStatus>,a0
    618a:	       move.l 22(a0),84(sp)
    6190:	       move.l 187aa <DOSBase>,d0
    6196:	       movea.l d0,a6
    6198:	       move.l 88(sp),d1
    619c:	       move.l 84(sp),d2
    61a0:	       jsr -312(a6)
    61a4:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    61a8:	       move.l 112(sp),76(sp)
    61ae:	       movea.l 1812a <nowStatus>,a0
    61b4:	       move.l 26(a0),72(sp)
    61ba:	       move.l 187aa <DOSBase>,d0
    61c0:	       movea.l d0,a6
    61c2:	       move.l 76(sp),d1
    61c6:	       move.l 72(sp),d2
    61ca:	       jsr -312(a6)
    61ce:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    61d2:	       move.l 112(sp),64(sp)
    61d8:	       movea.l 1812a <nowStatus>,a0
    61de:	       move.l 30(a0),60(sp)
    61e4:	       move.l 187aa <DOSBase>,d0
    61ea:	       movea.l d0,a6
    61ec:	       move.l 64(sp),d1
    61f0:	       move.l 60(sp),d2
    61f4:	       jsr -312(a6)
    61f8:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    61fc:	       move.l 112(sp),52(sp)
    6202:	       movea.l 1812a <nowStatus>,a0
    6208:	       move.l 34(a0),48(sp)
    620e:	       move.l 187aa <DOSBase>,d0
    6214:	       movea.l d0,a6
    6216:	       move.l 52(sp),d1
    621a:	       move.l 48(sp),d2
    621e:	       jsr -312(a6)
    6222:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    6226:	       move.l 112(sp),40(sp)
    622c:	       movea.l 1812a <nowStatus>,a0
    6232:	       move.l 38(a0),36(sp)
    6238:	       move.l 187aa <DOSBase>,d0
    623e:	       movea.l d0,a6
    6240:	       move.l 40(sp),d1
    6244:	       move.l 36(sp),d2
    6248:	       jsr -312(a6)
    624c:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    6250:	   /-- bra.s 6294 <saveStatusBars+0x1be>
		FPutC (fp,1);
    6252:	/--|-> move.l 112(sp),16(sp)
    6258:	|  |   moveq #1,d0
    625a:	|  |   move.l d0,12(sp)
    625e:	|  |   move.l 187aa <DOSBase>,d0
    6264:	|  |   movea.l d0,a6
    6266:	|  |   move.l 16(sp),d1
    626a:	|  |   move.l 12(sp),d2
    626e:	|  |   jsr -312(a6)
    6272:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    6276:	|  |   movea.l 104(sp),a0
    627a:	|  |   move.l (a0),d0
    627c:	|  |   move.l 112(sp),-(sp)
    6280:	|  |   move.l d0,-(sp)
    6282:	|  |   jsr bd8 <writeString>
    6288:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    628a:	|  |   movea.l 104(sp),a0
    628e:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    6294:	|  \-> tst.l 104(sp)
    6298:	\----- bne.s 6252 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    629a:	       move.l 112(sp),28(sp)
    62a0:	       clr.l 24(sp)
    62a4:	       move.l 187aa <DOSBase>,d0
    62aa:	       movea.l d0,a6
    62ac:	       move.l 28(sp),d1
    62b0:	       move.l 24(sp),d2
    62b4:	       jsr -312(a6)
    62b8:	       move.l d0,20(sp)
}
    62bc:	       nop
    62be:	       move.l (sp)+,d2
    62c0:	       movea.l (sp)+,a6
    62c2:	       lea 100(sp),sp
    62c6:	       rts

000062c8 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    62c8:	movea.l 1812a <nowStatus>,a0
    62ce:	move.l 4(sp),6(a0)
}
    62d4:	nop
    62d6:	rts

000062d8 <setStatusBar>:

void setStatusBar (char * txt) {
    62d8:	    subq.l #4,sp
    62da:	    move.l a6,-(sp)
    62dc:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    62de:	    movea.l 1812a <nowStatus>,a0
    62e4:	    move.l (a0),d0
    62e6:	/-- beq.s 631a <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    62e8:	|   movea.l 1812a <nowStatus>,a0
    62ee:	|   movea.l (a0),a0
    62f0:	|   move.l (a0),8(sp)
    62f4:	|   move.l 187a2 <SysBase>,d0
    62fa:	|   movea.l d0,a6
    62fc:	|   movea.l 8(sp),a1
    6300:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    6304:	|   movea.l 1812a <nowStatus>,a0
    630a:	|   movea.l (a0),a2
    630c:	|   move.l 16(sp),-(sp)
    6310:	|   jsr b8 <copyString>
    6316:	|   addq.l #4,sp
    6318:	|   move.l d0,(a2)
	}
}
    631a:	\-> nop
    631c:	    movea.l (sp)+,a2
    631e:	    movea.l (sp)+,a6
    6320:	    addq.l #4,sp
    6322:	    rts

00006324 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    6324:	       movea.l 1812a <nowStatus>,a0
    632a:	       move.l (a0),d0
    632c:	/----- beq.s 633a <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    632e:	|      movea.l 1812a <nowStatus>,a0
    6334:	|      movea.l (a0),a0
    6336:	|      move.l (a0),d0
    6338:	|  /-- bra.s 6340 <statusBarText+0x1c>
	} else {
		return "";
    633a:	\--|-> move.l #90202,d0
	}
    6340:	   \-> rts

00006342 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    6342:	       lea -28(sp),sp
    6346:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    634a:	       move.l 52(sp),-(sp)
    634e:	       jsr 134b8 <stringWidth>
    6354:	       addq.l #4,sp
    6356:	       asr.l #1,d0
    6358:	       move.l d0,-(sp)
    635a:	       jsr 14f5e <__floatsisf>
    6360:	       addq.l #4,sp
    6362:	       move.l d0,d1
    6364:	       move.l 18142 <cameraZoom>,d0
    636a:	       move.l d0,-(sp)
    636c:	       move.l d1,-(sp)
    636e:	       jsr 14e0a <__divsf3>
    6374:	       addq.l #8,sp
    6376:	       move.l d0,-(sp)
    6378:	       jsr 14ef6 <__fixsfsi>
    637e:	       addq.l #4,sp
    6380:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    6384:	       move.l 56(sp),d0
    6388:	       sub.l 44(sp),d0
    638c:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    6390:	       move.l 56(sp),d0
    6394:	       add.l 44(sp),d0
    6398:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    639c:	       moveq #12,d0
    639e:	       move.l d0,32(sp)
    63a2:	       clr.l 28(sp)
    63a6:	       move.l 187a2 <SysBase>,d0
    63ac:	       movea.l d0,a6
    63ae:	       move.l 32(sp),d0
    63b2:	       move.l 28(sp),d1
    63b6:	       jsr -684(a6)
    63ba:	       move.l d0,24(sp)
    63be:	       move.l 24(sp),d0
    63c2:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    63c6:	       movea.l 187fe <speech>,a0
    63cc:	       move.l 4(a0),d0
    63d0:	       movea.l 20(sp),a0
    63d4:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    63d8:	       move.l 52(sp),-(sp)
    63dc:	       jsr b8 <copyString>
    63e2:	       addq.l #4,sp
    63e4:	       movea.l 20(sp),a0
    63e8:	       move.l d0,(a0)
	newLine -> x = xx1;
    63ea:	       movea.l 20(sp),a0
    63ee:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    63f4:	       movea.l 187fe <speech>,a0
    63fa:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    6400:	       moveq #4,d0
    6402:	       cmp.l 40(sp),d0
    6406:	   /-- blt.s 6428 <addSpeechLine+0xe6>
    6408:	   |   movea.l 60(sp),a0
    640c:	   |   move.l (a0),d1
    640e:	   |   moveq #5,d0
    6410:	   |   sub.l 40(sp),d0
    6414:	   |   cmp.l d1,d0
    6416:	   +-- ble.s 6428 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    6418:	   |   moveq #5,d0
    641a:	   |   sub.l 40(sp),d0
    641e:	   |   movea.l 60(sp),a0
    6422:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    6424:	/--|-- bra.w 6554 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6428:	|  \-> move.l 36(sp),-(sp)
    642c:	|      jsr 14f5e <__floatsisf>
    6432:	|      addq.l #4,sp
    6434:	|      move.l d0,d2
    6436:	|      move.l 186f6 <winWidth>,d0
    643c:	|      move.l d0,-(sp)
    643e:	|      jsr 14f86 <__floatunsisf>
    6444:	|      addq.l #4,sp
    6446:	|      move.l d0,d1
    6448:	|      move.l 18142 <cameraZoom>,d0
    644e:	|      move.l d0,-(sp)
    6450:	|      move.l d1,-(sp)
    6452:	|      jsr 14e0a <__divsf3>
    6458:	|      addq.l #8,sp
    645a:	|      move.l #1084227584,-(sp)
    6460:	|      move.l d0,-(sp)
    6462:	|      jsr 15252 <__subsf3>
    6468:	|      addq.l #8,sp
    646a:	|      move.l d0,-(sp)
    646c:	|      move.l d2,-(sp)
    646e:	|      jsr 15046 <__gesf2>
    6474:	|      addq.l #8,sp
    6476:	|      tst.l d0
    6478:	|  /-- bge.s 647e <addSpeechLine+0x13c>
}
    647a:	+--|-- bra.w 6554 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    647e:	|  \-> movea.l 60(sp),a0
    6482:	|      move.l (a0),d0
    6484:	|      move.l d0,-(sp)
    6486:	|      jsr 14f5e <__floatsisf>
    648c:	|      addq.l #4,sp
    648e:	|      move.l d0,-(sp)
    6490:	|      jsr 14e76 <__extendsfdf2>
    6496:	|      addq.l #4,sp
    6498:	|      move.l d0,d4
    649a:	|      move.l d1,d5
    649c:	|      move.l 186f6 <winWidth>,d0
    64a2:	|      move.l d0,-(sp)
    64a4:	|      jsr 14f86 <__floatunsisf>
    64aa:	|      addq.l #4,sp
    64ac:	|      move.l d0,d1
    64ae:	|      move.l 18142 <cameraZoom>,d0
    64b4:	|      move.l d0,-(sp)
    64b6:	|      move.l d1,-(sp)
    64b8:	|      jsr 14e0a <__divsf3>
    64be:	|      addq.l #8,sp
    64c0:	|      move.l d0,-(sp)
    64c2:	|      jsr 14e76 <__extendsfdf2>
    64c8:	|      addq.l #4,sp
    64ca:	|      clr.l -(sp)
    64cc:	|      move.l #1075052544,-(sp)
    64d2:	|      move.l d1,-(sp)
    64d4:	|      move.l d0,-(sp)
    64d6:	|      jsr 151f0 <__subdf3>
    64dc:	|      lea 16(sp),sp
    64e0:	|      move.l d0,d2
    64e2:	|      move.l d1,d3
    64e4:	|      move.l 36(sp),-(sp)
    64e8:	|      jsr 14f1e <__floatsidf>
    64ee:	|      addq.l #4,sp
    64f0:	|      move.l d1,-(sp)
    64f2:	|      move.l d0,-(sp)
    64f4:	|      move.l d3,-(sp)
    64f6:	|      move.l d2,-(sp)
    64f8:	|      jsr 151f0 <__subdf3>
    64fe:	|      lea 16(sp),sp
    6502:	|      move.l d1,-(sp)
    6504:	|      move.l d0,-(sp)
    6506:	|      move.l d5,-(sp)
    6508:	|      move.l d4,-(sp)
    650a:	|      jsr 1507c <__gtdf2>
    6510:	|      lea 16(sp),sp
    6514:	|      tst.l d0
    6516:	|  /-- bgt.s 651a <addSpeechLine+0x1d8>
}
    6518:	+--|-- bra.s 6554 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    651a:	|  \-> move.l 186f6 <winWidth>,d0
    6520:	|      move.l d0,-(sp)
    6522:	|      jsr 14f86 <__floatunsisf>
    6528:	|      addq.l #4,sp
    652a:	|      move.l d0,d1
    652c:	|      move.l 18142 <cameraZoom>,d0
    6532:	|      move.l d0,-(sp)
    6534:	|      move.l d1,-(sp)
    6536:	|      jsr 14e0a <__divsf3>
    653c:	|      addq.l #8,sp
    653e:	|      move.l d0,-(sp)
    6540:	|      jsr 14ef6 <__fixsfsi>
    6546:	|      addq.l #4,sp
    6548:	|      subq.l #5,d0
    654a:	|      sub.l 36(sp),d0
    654e:	|      movea.l 60(sp),a0
    6552:	|      move.l d0,(a0)
}
    6554:	\----> nop
    6556:	       movem.l (sp)+,d2-d5/a6
    655a:	       lea 28(sp),sp
    655e:	       rts

00006560 <initSpeech>:


void initSpeech () {
    6560:	       lea -12(sp),sp
    6564:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    6566:	       moveq #20,d0
    6568:	       move.l d0,12(sp)
    656c:	       clr.l 8(sp)
    6570:	       move.l 187a2 <SysBase>,d0
    6576:	       movea.l d0,a6
    6578:	       move.l 12(sp),d0
    657c:	       move.l 8(sp),d1
    6580:	       jsr -684(a6)
    6584:	       move.l d0,4(sp)
    6588:	       move.l 4(sp),d0
    658c:	       move.l d0,187fe <speech>
	if (speech) {
    6592:	       move.l 187fe <speech>,d0
    6598:	/----- beq.s 65c4 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    659a:	|      movea.l 187fe <speech>,a0
    65a0:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    65a2:	|      movea.l 187fe <speech>,a0
    65a8:	|      clr.l 4(a0)
		speech -> speechY = 0;
    65ac:	|      movea.l 187fe <speech>,a0
    65b2:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    65b6:	|      movea.l 187fe <speech>,a0
    65bc:	|      moveq #-1,d0
    65be:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    65c2:	|  /-- bra.s 65d2 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    65c4:	\--|-> pea 16638 <PutChar+0x1042>
    65ca:	   |   jsr 14b22 <KPrintF>
    65d0:	   |   addq.l #4,sp
}
    65d2:	   \-> nop
    65d4:	       movea.l (sp)+,a6
    65d6:	       lea 12(sp),sp
    65da:	       rts

000065dc <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    65dc:	       movea.l 187fe <speech>,a0
    65e2:	       move.l 4(a0),d0
    65e6:	/----- beq.s 65f4 <isThereAnySpeechGoingOn+0x18>
    65e8:	|      movea.l 187fe <speech>,a0
    65ee:	|      move.l 16(a0),d0
    65f2:	|  /-- bra.s 65f6 <isThereAnySpeechGoingOn+0x1a>
    65f4:	\--|-> moveq #-1,d0
}
    65f6:	   \-> rts

000065f8 <killAllSpeech>:

void killAllSpeech () {
    65f8:	       lea -12(sp),sp
    65fc:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    65fe:	       movea.l 187fe <speech>,a0
    6604:	       move.l 12(a0),d0
    6608:	       moveq #-1,d1
    660a:	       cmp.l d0,d1
    660c:	   /-- beq.s 661a <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    660e:	   |   movea.l 187fe <speech>,a0
    6614:	   |   moveq #-1,d0
    6616:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    661a:	   \-> movea.l 187fe <speech>,a0
    6620:	       move.l (a0),d0
    6622:	/----- beq.w 66ae <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    6626:	|      movea.l 187fe <speech>,a0
    662c:	|      move.l (a0),d0
    662e:	|      lea -120(sp),sp
    6632:	|      move.l sp,d1
    6634:	|      movea.l d0,a0
    6636:	|      moveq #120,d0
    6638:	|      move.l d0,-(sp)
    663a:	|      move.l a0,-(sp)
    663c:	|      move.l d1,-(sp)
    663e:	|      jsr 14ad6 <memcpy>
    6644:	|      lea 12(sp),sp
    6648:	|      jsr 9090 <makeSilent>
    664e:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    6652:	|      movea.l 187fe <speech>,a0
    6658:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    665a:	+----- bra.s 66ae <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    665c:	|  /-> movea.l 187fe <speech>,a0
    6662:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    6668:	|  |   movea.l 187fe <speech>,a0
    666e:	|  |   movea.l 4(a0),a1
    6672:	|  |   movea.l 187fe <speech>,a0
    6678:	|  |   move.l 4(a1),d0
    667c:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    6680:	|  |   movea.l 12(sp),a0
    6684:	|  |   move.l (a0),8(sp)
    6688:	|  |   move.l 187a2 <SysBase>,d0
    668e:	|  |   movea.l d0,a6
    6690:	|  |   movea.l 8(sp),a1
    6694:	|  |   jsr -690(a6)
		FreeVec(killMe);
    6698:	|  |   move.l 12(sp),4(sp)
    669e:	|  |   move.l 187a2 <SysBase>,d0
    66a4:	|  |   movea.l d0,a6
    66a6:	|  |   movea.l 4(sp),a1
    66aa:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    66ae:	\--|-> movea.l 187fe <speech>,a0
    66b4:	   |   move.l 4(a0),d0
    66b8:	   \-- bne.s 665c <killAllSpeech+0x64>
	}
}
    66ba:	       nop
    66bc:	       nop
    66be:	       movea.l (sp)+,a6
    66c0:	       lea 12(sp),sp
    66c4:	       rts

000066c6 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    66c6:	pea 2 <_start+0x2>
    66ca:	move.l 8(sp),-(sp)
    66ce:	jsr 6826 <setFrames>
    66d4:	addq.l #8,sp
}
    66d6:	nop
    66d8:	rts

000066da <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    66da:	       lea -52(sp),sp
    66de:	       move.l a6,-(sp)
    66e0:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    66e2:	       movea.l 64(sp),a0
    66e6:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    66ec:	       move.l 1812e <speechSpeed>,d0
    66f2:	       move.l 68(sp),-(sp)
    66f6:	       move.l d0,-(sp)
    66f8:	       jsr a46 <putFloat>
    66fe:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    6700:	       movea.l 64(sp),a0
    6704:	       move.l 8(a0),d0
    6708:	       move.l 68(sp),-(sp)
    670c:	       move.l d0,-(sp)
    670e:	       jsr 8d0 <put2bytes>
    6714:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    6716:	       movea.l 64(sp),a0
    671a:	       move.l 16(a0),d0
    671e:	       move.l 68(sp),-(sp)
    6722:	       move.l d0,-(sp)
    6724:	       jsr 8d0 <put2bytes>
    672a:	       addq.l #8,sp
		if (sS -> currentTalker) {
    672c:	       movea.l 64(sp),a0
    6730:	       move.l (a0),d0
    6732:	   /-- beq.s 6776 <saveSpeech+0x9c>
			FPutC (fp, 1);
    6734:	   |   move.l 68(sp),40(sp)
    673a:	   |   moveq #1,d0
    673c:	   |   move.l d0,36(sp)
    6740:	   |   move.l 187aa <DOSBase>,d0
    6746:	   |   movea.l d0,a6
    6748:	   |   move.l 40(sp),d1
    674c:	   |   move.l 36(sp),d2
    6750:	   |   jsr -312(a6)
    6754:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    6758:	   |   movea.l 64(sp),a0
    675c:	   |   movea.l (a0),a0
    675e:	   |   movea.l 102(a0),a0
    6762:	   |   move.l 4(a0),d0
    6766:	   |   move.l 68(sp),-(sp)
    676a:	   |   move.l d0,-(sp)
    676c:	   |   jsr 8d0 <put2bytes>
    6772:	   |   addq.l #8,sp
    6774:	/--|-- bra.s 67f2 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    6776:	|  \-> move.l 68(sp),52(sp)
    677c:	|      clr.l 48(sp)
    6780:	|      move.l 187aa <DOSBase>,d0
    6786:	|      movea.l d0,a6
    6788:	|      move.l 52(sp),d1
    678c:	|      move.l 48(sp),d2
    6790:	|      jsr -312(a6)
    6794:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    6798:	+----- bra.s 67f2 <saveSpeech+0x118>
			FPutC (fp, 1);
    679a:	|  /-> move.l 68(sp),16(sp)
    67a0:	|  |   moveq #1,d0
    67a2:	|  |   move.l d0,12(sp)
    67a6:	|  |   move.l 187aa <DOSBase>,d0
    67ac:	|  |   movea.l d0,a6
    67ae:	|  |   move.l 16(sp),d1
    67b2:	|  |   move.l 12(sp),d2
    67b6:	|  |   jsr -312(a6)
    67ba:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    67be:	|  |   movea.l 56(sp),a0
    67c2:	|  |   move.l (a0),d0
    67c4:	|  |   move.l 68(sp),-(sp)
    67c8:	|  |   move.l d0,-(sp)
    67ca:	|  |   jsr bd8 <writeString>
    67d0:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    67d2:	|  |   movea.l 56(sp),a0
    67d6:	|  |   move.l 8(a0),d0
    67da:	|  |   move.l 68(sp),-(sp)
    67de:	|  |   move.l d0,-(sp)
    67e0:	|  |   jsr 8d0 <put2bytes>
    67e6:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    67e8:	|  |   movea.l 56(sp),a0
    67ec:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    67f2:	\--|-> tst.l 56(sp)
    67f6:	   \-- bne.s 679a <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    67f8:	       move.l 68(sp),28(sp)
    67fe:	       clr.l 24(sp)
    6802:	       move.l 187aa <DOSBase>,d0
    6808:	       movea.l d0,a6
    680a:	       move.l 28(sp),d1
    680e:	       move.l 24(sp),d2
    6812:	       jsr -312(a6)
    6816:	       move.l d0,20(sp)
}
    681a:	       nop
    681c:	       move.l (sp)+,d2
    681e:	       movea.l (sp)+,a6
    6820:	       lea 52(sp),sp
    6824:	       rts

00006826 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    6826:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    6828:	movea.l 8(sp),a0
    682c:	movea.l 68(a0),a0
    6830:	move.l (a0),d2
    6832:	movea.l 8(sp),a0
    6836:	movea.l 68(a0),a0
    683a:	move.l 4(a0),d0
    683e:	move.l 12(sp),-(sp)
    6842:	move.l d0,-(sp)
    6844:	jsr 154e0 <__mulsi3>
    684a:	addq.l #8,sp
    684c:	move.l d0,d1
    684e:	movea.l 8(sp),a0
    6852:	move.l 94(a0),d0
    6856:	add.l d1,d0
    6858:	add.l d0,d0
    685a:	add.l d0,d0
    685c:	movea.l d2,a0
    685e:	adda.l d0,a0
    6860:	move.l (a0),d0
    6862:	movea.l 8(sp),a0
    6866:	move.l d0,60(a0)
}
    686a:	nop
    686c:	move.l (sp)+,d2
    686e:	rts

00006870 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    6870:	       lea -20(sp),sp
    6874:	       move.l d2,-(sp)
    6876:	       move.l 40(sp),d0
    687a:	       move.w d0,d0
    687c:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    6880:	       movea.l 187fe <speech>,a0
    6886:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    688c:	       move.l 32(sp),-(sp)
    6890:	       jsr 8b7a <findPerson>
    6896:	       addq.l #4,sp
    6898:	       move.l d0,16(sp)
    if (thisPerson) {
    689c:	   /-- beq.s 68c2 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    689e:	   |   movea.w 6(sp),a0
    68a2:	   |   move.l a0,-(sp)
    68a4:	   |   move.l 40(sp),-(sp)
    68a8:	   |   move.l 24(sp),-(sp)
    68ac:	   |   move.l 40(sp),-(sp)
    68b0:	   |   jsr 6988 <wrapSpeechPerson>
    68b6:	   |   lea 16(sp),sp
    68ba:	   |   move.l d0,20(sp)
    68be:	/--|-- bra.w 697c <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    68c2:	|  \-> move.l 32(sp),-(sp)
    68c6:	|      jsr 135a4 <getRegionForObject>
    68cc:	|      addq.l #4,sp
    68ce:	|      move.l d0,12(sp)
        if (thisRegion) {
    68d2:	|  /-- beq.s 693e <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    68d4:	|  |   movea.l 12(sp),a0
    68d8:	|  |   movea.l 28(a0),a0
    68dc:	|  |   move.l 28(a0),d0
    68e0:	|  |   movea.l 12(sp),a0
    68e4:	|  |   movea.l 4(a0),a1
    68e8:	|  |   movea.l 12(sp),a0
    68ec:	|  |   movea.l 28(a0),a0
    68f0:	|  |   move.l 20(a0),d1
    68f4:	|  |   movea.l a1,a0
    68f6:	|  |   suba.l d1,a0
    68f8:	|  |   move.l 188b4 <cameraY>,d1
    68fe:	|  |   movea.l a0,a1
    6900:	|  |   suba.l d1,a1
    6902:	|  |   movea.l 12(sp),a0
    6906:	|  |   move.l (a0),d2
    6908:	|  |   movea.l 12(sp),a0
    690c:	|  |   move.l 8(a0),d1
    6910:	|  |   add.l d2,d1
    6912:	|  |   move.l d1,d2
    6914:	|  |   asr.l #1,d2
    6916:	|  |   move.l 188b0 <cameraX>,d1
    691c:	|  |   movea.l d2,a0
    691e:	|  |   suba.l d1,a0
    6920:	|  |   move.l 36(sp),-(sp)
    6924:	|  |   move.l d0,-(sp)
    6926:	|  |   move.l a1,-(sp)
    6928:	|  |   move.l a0,-(sp)
    692a:	|  |   move.l 44(sp),-(sp)
    692e:	|  |   jsr 6aa6 <wrapSpeechXY>
    6934:	|  |   lea 20(sp),sp
    6938:	|  |   move.l d0,20(sp)
    693c:	+--|-- bra.s 697c <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    693e:	|  \-> move.l 32(sp),-(sp)
    6942:	|      jsr b910 <findObjectType>
    6948:	|      addq.l #4,sp
    694a:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    694e:	|      movea.l 8(sp),a0
    6952:	|      move.l 28(a0),d1
    6956:	|      move.l 186f6 <winWidth>,d0
    695c:	|      lsr.l #1,d0
    695e:	|      move.l 36(sp),-(sp)
    6962:	|      move.l d1,-(sp)
    6964:	|      pea a <_start+0xa>
    6968:	|      move.l d0,-(sp)
    696a:	|      move.l 44(sp),-(sp)
    696e:	|      jsr 6aa6 <wrapSpeechXY>
    6974:	|      lea 20(sp),sp
    6978:	|      move.l d0,20(sp)
        }
    }
    return i;
    697c:	\----> move.l 20(sp),d0
}
    6980:	       move.l (sp)+,d2
    6982:	       lea 20(sp),sp
    6986:	       rts

00006988 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    6988:	    subq.l #8,sp
    698a:	    movem.l d2-d4,-(sp)
    698e:	    move.l 36(sp),d0
    6992:	    move.w d0,d0
    6994:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    6998:	    movea.l 28(sp),a0
    699c:	    movea.l 102(a0),a0
    69a0:	    move.l 28(a0),d2
    69a4:	    movea.l 28(sp),a0
    69a8:	    move.l 4(a0),d3
    69ac:	    move.l 188b4 <cameraY>,d0
    69b2:	    move.l d0,-(sp)
    69b4:	    jsr 14f5e <__floatsisf>
    69ba:	    addq.l #4,sp
    69bc:	    move.l d0,-(sp)
    69be:	    move.l d3,-(sp)
    69c0:	    jsr 15252 <__subsf3>
    69c6:	    addq.l #8,sp
    69c8:	    move.l d0,d3
    69ca:	    movea.l 28(sp),a0
    69ce:	    move.l 20(a0),d4
    69d2:	    movea.l 28(sp),a0
    69d6:	    move.l 8(a0),d1
    69da:	    movea.l 28(sp),a0
    69de:	    move.l 12(a0),d0
    69e2:	    sub.l d0,d1
    69e4:	    move.l d1,-(sp)
    69e6:	    jsr 14f5e <__floatsisf>
    69ec:	    addq.l #4,sp
    69ee:	    move.l d0,-(sp)
    69f0:	    move.l d4,-(sp)
    69f2:	    jsr 15010 <__mulsf3>
    69f8:	    addq.l #8,sp
    69fa:	    move.l d0,-(sp)
    69fc:	    move.l d3,-(sp)
    69fe:	    jsr 15252 <__subsf3>
    6a04:	    addq.l #8,sp
    6a06:	    move.l d0,d3
    6a08:	    movea.l 28(sp),a0
    6a0c:	    movea.l 102(a0),a0
    6a10:	    move.l 20(a0),d0
    6a14:	    move.l d0,-(sp)
    6a16:	    jsr 14f5e <__floatsisf>
    6a1c:	    addq.l #4,sp
    6a1e:	    move.l d0,-(sp)
    6a20:	    move.l d3,-(sp)
    6a22:	    jsr 15252 <__subsf3>
    6a28:	    addq.l #8,sp
    6a2a:	    move.l d0,-(sp)
    6a2c:	    jsr 14ef6 <__fixsfsi>
    6a32:	    addq.l #4,sp
    6a34:	    move.l d0,d4
    6a36:	    movea.l 28(sp),a0
    6a3a:	    move.l (a0),d3
    6a3c:	    move.l 188b0 <cameraX>,d0
    6a42:	    move.l d0,-(sp)
    6a44:	    jsr 14f5e <__floatsisf>
    6a4a:	    addq.l #4,sp
    6a4c:	    move.l d0,-(sp)
    6a4e:	    move.l d3,-(sp)
    6a50:	    jsr 15252 <__subsf3>
    6a56:	    addq.l #8,sp
    6a58:	    move.l d0,-(sp)
    6a5a:	    jsr 14ef6 <__fixsfsi>
    6a60:	    addq.l #4,sp
    6a62:	    move.l 32(sp),-(sp)
    6a66:	    move.l d2,-(sp)
    6a68:	    move.l d4,-(sp)
    6a6a:	    move.l d0,-(sp)
    6a6c:	    move.l 40(sp),-(sp)
    6a70:	    jsr 6aa6 <wrapSpeechXY>
    6a76:	    lea 20(sp),sp
    6a7a:	    move.l d0,16(sp)
	if (animPerson) {
    6a7e:	    tst.w 14(sp)
    6a82:	/-- beq.s 6a9a <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    6a84:	|   move.l 28(sp),-(sp)
    6a88:	|   jsr 66c6 <makeTalker>
    6a8e:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    6a90:	|   movea.l 187fe <speech>,a0
    6a96:	|   move.l 28(sp),(a0)
	}
	return i;
    6a9a:	\-> move.l 16(sp),d0
}
    6a9e:	    movem.l (sp)+,d2-d4
    6aa2:	    addq.l #8,sp
    6aa4:	    rts

00006aa6 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    6aa6:	                   lea -16(sp),sp
    6aaa:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    6aae:	                   clr.l 16(sp)
    killAllSpeech();
    6ab2:	                   jsr 65f8 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    6ab8:	                   move.l 36(sp),-(sp)
    6abc:	                   jsr 11fc6 <strlen>
    6ac2:	                   addq.l #4,sp
    6ac4:	                   movea.l d0,a0
    6ac6:	                   lea 20(a0),a0
    6aca:	                   move.l a0,-(sp)
    6acc:	                   jsr 14f86 <__floatunsisf>
    6ad2:	                   addq.l #4,sp
    6ad4:	                   move.l d0,d1
    6ad6:	                   move.l 1812e <speechSpeed>,d0
    6adc:	                   move.l d0,-(sp)
    6ade:	                   move.l d1,-(sp)
    6ae0:	                   jsr 15010 <__mulsf3>
    6ae6:	                   addq.l #8,sp
    6ae8:	                   move.l d0,-(sp)
    6aea:	                   jsr 14ef6 <__fixsfsi>
    6af0:	                   addq.l #4,sp
    6af2:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    6af6:	               /-- bgt.s 6afe <wrapSpeechXY+0x58>
    6af8:	               |   moveq #1,d0
    6afa:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    6afe:	               \-> moveq #-1,d1
    6b00:	                   cmp.l 52(sp),d1
    6b04:	               /-- beq.s 6b44 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    6b06:	               |   move.l 188c4 <speechMode>,d0
    6b0c:	               +-- ble.s 6b44 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    6b0e:	               |   clr.l -(sp)
    6b10:	               |   move.l 56(sp),-(sp)
    6b14:	               |   jsr b5e6 <startSound>
    6b1a:	               |   addq.l #8,sp
    6b1c:	               |   tst.w d0
    6b1e:	               +-- beq.s 6b44 <wrapSpeechXY+0x9e>
                speechTime = -10;
    6b20:	               |   moveq #-10,d0
    6b22:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    6b26:	               |   movea.l 187fe <speech>,a0
    6b2c:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    6b32:	               |   move.l 188c4 <speechMode>,d0
    6b38:	               |   moveq #2,d1
    6b3a:	               |   cmp.l d0,d1
    6b3c:	               +-- bne.s 6b44 <wrapSpeechXY+0x9e>
    6b3e:	               |   moveq #-10,d0
    6b40:	/--------------|-- bra.w 6dca <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    6b44:	|              \-> movea.l 187fe <speech>,a0
    6b4a:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    6b50:	|     /----------- bra.w 6c04 <wrapSpeechXY+0x15e>
        a = wrap;
    6b54:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    6b5a:	|  |  |        /-- bra.s 6b6a <wrapSpeechXY+0xc4>
            a--;
    6b5c:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    6b60:	|  |  |  |     +-- bne.s 6b6a <wrapSpeechXY+0xc4>
                a = wrap;
    6b62:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    6b68:	|  |  |  |  /--|-- bra.s 6b7c <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    6b6a:	|  |  |  |  |  \-> move.l 28(sp),d0
    6b6e:	|  |  |  |  |      movea.l 36(sp),a0
    6b72:	|  |  |  |  |      adda.l d0,a0
    6b74:	|  |  |  |  |      move.b (a0),d0
    6b76:	|  |  |  |  |      cmpi.b #32,d0
    6b7a:	|  |  |  \--|----- bne.s 6b5c <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    6b7c:	|  |  |     \----> move.l 28(sp),d0
    6b80:	|  |  |            movea.l 36(sp),a0
    6b84:	|  |  |            adda.l d0,a0
    6b86:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    6b88:	|  |  |            lea 16(sp),a0
    6b8c:	|  |  |            move.l a0,-(sp)
    6b8e:	|  |  |            move.l 44(sp),-(sp)
    6b92:	|  |  |            move.l 44(sp),-(sp)
    6b96:	|  |  |            jsr 6342 <addSpeechLine>
    6b9c:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    6ba0:	|  |  |            move.l 28(sp),d0
    6ba4:	|  |  |            movea.l 36(sp),a0
    6ba8:	|  |  |            adda.l d0,a0
    6baa:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    6bae:	|  |  |            move.l 28(sp),d0
    6bb2:	|  |  |            addq.l #1,d0
    6bb4:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    6bb8:	|  |  |            move.l 44(sp),-(sp)
    6bbc:	|  |  |            jsr 14f5e <__floatsisf>
    6bc2:	|  |  |            addq.l #4,sp
    6bc4:	|  |  |            move.l d0,d2
    6bc6:	|  |  |            move.l 188ea <fontHeight>,d0
    6bcc:	|  |  |            move.l d0,-(sp)
    6bce:	|  |  |            jsr 14f5e <__floatsisf>
    6bd4:	|  |  |            addq.l #4,sp
    6bd6:	|  |  |            move.l d0,d1
    6bd8:	|  |  |            move.l 18142 <cameraZoom>,d0
    6bde:	|  |  |            move.l d0,-(sp)
    6be0:	|  |  |            move.l d1,-(sp)
    6be2:	|  |  |            jsr 14e0a <__divsf3>
    6be8:	|  |  |            addq.l #8,sp
    6bea:	|  |  |            move.l d0,-(sp)
    6bec:	|  |  |            move.l d2,-(sp)
    6bee:	|  |  |            jsr 15252 <__subsf3>
    6bf4:	|  |  |            addq.l #8,sp
    6bf6:	|  |  |            move.l d0,-(sp)
    6bf8:	|  |  |            jsr 14ef6 <__fixsfsi>
    6bfe:	|  |  |            addq.l #4,sp
    6c00:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    6c04:	|  |  \----------> move.l 36(sp),-(sp)
    6c08:	|  |               jsr 11fc6 <strlen>
    6c0e:	|  |               addq.l #4,sp
    6c10:	|  |               move.l d0,d1
    6c12:	|  |               move.l 48(sp),d0
    6c16:	|  |               cmp.l d1,d0
    6c18:	|  \-------------- bcs.w 6b54 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    6c1c:	|                  lea 16(sp),a0
    6c20:	|                  move.l a0,-(sp)
    6c22:	|                  move.l 44(sp),-(sp)
    6c26:	|                  move.l 44(sp),-(sp)
    6c2a:	|                  jsr 6342 <addSpeechLine>
    6c30:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    6c34:	|                  move.l 44(sp),-(sp)
    6c38:	|                  jsr 14f5e <__floatsisf>
    6c3e:	|                  addq.l #4,sp
    6c40:	|                  move.l d0,d2
    6c42:	|                  move.l 188ea <fontHeight>,d0
    6c48:	|                  move.l d0,-(sp)
    6c4a:	|                  jsr 14f5e <__floatsisf>
    6c50:	|                  addq.l #4,sp
    6c52:	|                  move.l d0,d1
    6c54:	|                  move.l 18142 <cameraZoom>,d0
    6c5a:	|                  move.l d0,-(sp)
    6c5c:	|                  move.l d1,-(sp)
    6c5e:	|                  jsr 14e0a <__divsf3>
    6c64:	|                  addq.l #8,sp
    6c66:	|                  move.l d0,-(sp)
    6c68:	|                  move.l d2,-(sp)
    6c6a:	|                  jsr 15252 <__subsf3>
    6c70:	|                  addq.l #8,sp
    6c72:	|                  move.l d0,-(sp)
    6c74:	|                  jsr 14ef6 <__fixsfsi>
    6c7a:	|                  addq.l #4,sp
    6c7c:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    6c80:	|              /-- bpl.s 6c9e <wrapSpeechXY+0x1f8>
    6c82:	|              |   movea.l 187fe <speech>,a0
    6c88:	|              |   move.l 8(a0),d0
    6c8c:	|              |   movea.l 187fe <speech>,a0
    6c92:	|              |   sub.l 44(sp),d0
    6c96:	|              |   move.l d0,8(a0)
    6c9a:	|           /--|-- bra.w 6d8c <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    6c9e:	|           |  \-> movea.l 187fe <speech>,a0
    6ca4:	|           |      move.l 8(a0),d0
    6ca8:	|           |      move.l d0,-(sp)
    6caa:	|           |      jsr 14f5e <__floatsisf>
    6cb0:	|           |      addq.l #4,sp
    6cb2:	|           |      move.l d0,d2
    6cb4:	|           |      move.l 188b4 <cameraY>,d0
    6cba:	|           |      move.l d0,-(sp)
    6cbc:	|           |      jsr 14f5e <__floatsisf>
    6cc2:	|           |      addq.l #4,sp
    6cc4:	|           |      move.l d0,d3
    6cc6:	|           |      move.l 186fa <winHeight>,d4
    6ccc:	|           |      move.l 188ea <fontHeight>,d0
    6cd2:	|           |      pea 3 <_start+0x3>
    6cd6:	|           |      move.l d0,-(sp)
    6cd8:	|           |      jsr 1555e <__divsi3>
    6cde:	|           |      addq.l #8,sp
    6ce0:	|           |      move.l d4,d1
    6ce2:	|           |      sub.l d0,d1
    6ce4:	|           |      move.l d1,-(sp)
    6ce6:	|           |      jsr 14f86 <__floatunsisf>
    6cec:	|           |      addq.l #4,sp
    6cee:	|           |      move.l d0,d1
    6cf0:	|           |      move.l 18142 <cameraZoom>,d0
    6cf6:	|           |      move.l d0,-(sp)
    6cf8:	|           |      move.l d1,-(sp)
    6cfa:	|           |      jsr 14e0a <__divsf3>
    6d00:	|           |      addq.l #8,sp
    6d02:	|           |      move.l d0,-(sp)
    6d04:	|           |      move.l d3,-(sp)
    6d06:	|           |      jsr 14d10 <__addsf3>
    6d0c:	|           |      addq.l #8,sp
    6d0e:	|           |      move.l d0,-(sp)
    6d10:	|           |      move.l d2,-(sp)
    6d12:	|           |      jsr 150ca <__gtsf2>
    6d18:	|           |      addq.l #8,sp
    6d1a:	|           |      tst.l d0
    6d1c:	|           +----- ble.s 6d8c <wrapSpeechXY+0x2e6>
    6d1e:	|           |      move.l 188b4 <cameraY>,d0
    6d24:	|           |      move.l d0,-(sp)
    6d26:	|           |      jsr 14f5e <__floatsisf>
    6d2c:	|           |      addq.l #4,sp
    6d2e:	|           |      move.l d0,d2
    6d30:	|           |      move.l 186fa <winHeight>,d3
    6d36:	|           |      move.l 188ea <fontHeight>,d0
    6d3c:	|           |      pea 3 <_start+0x3>
    6d40:	|           |      move.l d0,-(sp)
    6d42:	|           |      jsr 1555e <__divsi3>
    6d48:	|           |      addq.l #8,sp
    6d4a:	|           |      move.l d3,d1
    6d4c:	|           |      sub.l d0,d1
    6d4e:	|           |      move.l d1,-(sp)
    6d50:	|           |      jsr 14f86 <__floatunsisf>
    6d56:	|           |      addq.l #4,sp
    6d58:	|           |      move.l d0,d1
    6d5a:	|           |      move.l 18142 <cameraZoom>,d0
    6d60:	|           |      move.l d0,-(sp)
    6d62:	|           |      move.l d1,-(sp)
    6d64:	|           |      jsr 14e0a <__divsf3>
    6d6a:	|           |      addq.l #8,sp
    6d6c:	|           |      move.l d0,-(sp)
    6d6e:	|           |      move.l d2,-(sp)
    6d70:	|           |      jsr 14d10 <__addsf3>
    6d76:	|           |      addq.l #8,sp
    6d78:	|           |      movea.l 187fe <speech>,a2
    6d7e:	|           |      move.l d0,-(sp)
    6d80:	|           |      jsr 14ef6 <__fixsfsi>
    6d86:	|           |      addq.l #4,sp
    6d88:	|           |      move.l d0,8(a2)

    if (offset) {
    6d8c:	|           \----> move.l 16(sp),d0
    6d90:	|        /-------- beq.s 6dc6 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    6d92:	|        |         movea.l 187fe <speech>,a0
    6d98:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    6d9e:	|        |     /-- bra.s 6dc0 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    6da0:	|        |  /--|-> movea.l 20(sp),a0
    6da4:	|        |  |  |   move.l 8(a0),d1
    6da8:	|        |  |  |   move.l 16(sp),d0
    6dac:	|        |  |  |   add.l d1,d0
    6dae:	|        |  |  |   movea.l 20(sp),a0
    6db2:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    6db6:	|        |  |  |   movea.l 20(sp),a0
    6dba:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    6dc0:	|        |  |  \-> tst.l 20(sp)
    6dc4:	|        |  \----- bne.s 6da0 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    6dc6:	|        \-------> move.l 24(sp),d0
}
    6dca:	\----------------> movem.l (sp)+,d2-d4/a2
    6dce:	                   lea 16(sp),sp
    6dd2:	                   rts

00006dd4 <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    6dd4:	    subq.l #4,sp
    6dd6:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    6dd8:	    move.l 18852 <zBuffer+0x50>,d0
    6dde:	/-- beq.s 6e16 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    6de0:	|   pea 18856 <zBuffer+0x54>
    6de6:	|   pea 1 <_start+0x1>
    6dea:	|   jsr 2976 <deleteTextures>
    6df0:	|   addq.l #8,sp
		zBuffer.texName = 0;
    6df2:	|   clr.l 18856 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    6df8:	|   move.l 18852 <zBuffer+0x50>,4(sp)
    6e00:	|   move.l 187a2 <SysBase>,d0
    6e06:	|   movea.l d0,a6
    6e08:	|   movea.l 4(sp),a1
    6e0c:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    6e10:	|   clr.l 18852 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    6e16:	\-> clr.l 1880a <zBuffer+0x8>
	zBuffer.originalNum =0;
    6e1c:	    clr.l 1884e <zBuffer+0x4c>
}
    6e22:	    nop
    6e24:	    movea.l (sp)+,a6
    6e26:	    addq.l #4,sp
    6e28:	    rts

00006e2a <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    6e2a:	                         lea -528(sp),sp
    6e2e:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    6e32:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    6e36:	                         jsr 6dd4 <killZBuffer>

	zBuffer.originalNum = y;
    6e3c:	                         move.l 544(sp),d0
    6e40:	                         move.l d0,1884e <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    6e46:	                         move.l 544(sp),d0
    6e4a:	                         move.l d0,-(sp)
    6e4c:	                         jsr 5440 <openFileFromNum>
    6e52:	                         addq.l #4,sp
    6e54:	                         tst.l d0
    6e56:	                     /-- bne.s 6e5e <setZBuffer+0x34>
    6e58:	                     |   clr.w d0
    6e5a:	/--------------------|-- bra.w 723c <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    6e5e:	|                    \-> move.l 1878a <bigDataFile>,524(sp)
    6e66:	|                        move.l 187aa <DOSBase>,d0
    6e6c:	|                        movea.l d0,a6
    6e6e:	|                        move.l 524(sp),d1
    6e72:	|                        jsr -306(a6)
    6e76:	|                        move.l d0,520(sp)
    6e7a:	|                        move.l 520(sp),d0
    6e7e:	|                        moveq #83,d1
    6e80:	|                        cmp.l d0,d1
    6e82:	|                    /-- beq.s 6ee4 <setZBuffer+0xba>
    6e84:	|                    |   move.l 1878a <bigDataFile>,516(sp)
    6e8c:	|                    |   move.l 187aa <DOSBase>,d0
    6e92:	|                    |   movea.l d0,a6
    6e94:	|                    |   move.l 516(sp),d1
    6e98:	|                    |   jsr -306(a6)
    6e9c:	|                    |   move.l d0,512(sp)
    6ea0:	|                    |   move.l 512(sp),d0
    6ea4:	|                    |   moveq #122,d1
    6ea6:	|                    |   cmp.l d0,d1
    6ea8:	|                    +-- beq.s 6ee4 <setZBuffer+0xba>
    6eaa:	|                    |   move.l 1878a <bigDataFile>,508(sp)
    6eb2:	|                    |   move.l 187aa <DOSBase>,d0
    6eb8:	|                    |   movea.l d0,a6
    6eba:	|                    |   move.l 508(sp),d1
    6ebe:	|                    |   jsr -306(a6)
    6ec2:	|                    |   move.l d0,504(sp)
    6ec6:	|                    |   move.l 504(sp),d0
    6eca:	|                    |   moveq #98,d1
    6ecc:	|                    |   cmp.l d0,d1
    6ece:	|                    +-- beq.s 6ee4 <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    6ed0:	|                    |   pea 16675 <PutChar+0x107f>
    6ed6:	|                    |   jsr 14b22 <KPrintF>
    6edc:	|                    |   addq.l #4,sp
		 return FALSE;
    6ede:	|                    |   clr.w d0
    6ee0:	+--------------------|-- bra.w 723c <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    6ee4:	|                    \-> move.l 1878a <bigDataFile>,500(sp)
    6eec:	|                        move.l 187aa <DOSBase>,d0
    6ef2:	|                        movea.l d0,a6
    6ef4:	|                        move.l 500(sp),d1
    6ef8:	|                        jsr -306(a6)
    6efc:	|                        move.l d0,496(sp)
    6f00:	|                        move.l 496(sp),d0
    6f04:	|                    /-- beq.s 6f0e <setZBuffer+0xe4>
    6f06:	|                    |   moveq #1,d1
    6f08:	|                    |   cmp.l d0,d1
    6f0a:	|                 /--|-- beq.s 6f24 <setZBuffer+0xfa>
    6f0c:	|              /--|--|-- bra.s 6f52 <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    6f0e:	|              |  |  \-> move.l #640,18802 <zBuffer>
		zBuffer.height = 480;
    6f18:	|              |  |      move.l #480,18806 <zBuffer+0x4>
		break;
    6f22:	|              |  |  /-- bra.s 6f66 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    6f24:	|              |  \--|-> move.l 1878a <bigDataFile>,d0
    6f2a:	|              |     |   move.l d0,-(sp)
    6f2c:	|              |     |   jsr 6bc <get2bytes>
    6f32:	|              |     |   addq.l #4,sp
    6f34:	|              |     |   move.l d0,18802 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    6f3a:	|              |     |   move.l 1878a <bigDataFile>,d0
    6f40:	|              |     |   move.l d0,-(sp)
    6f42:	|              |     |   jsr 6bc <get2bytes>
    6f48:	|              |     |   addq.l #4,sp
    6f4a:	|              |     |   move.l d0,18806 <zBuffer+0x4>
		break;
    6f50:	|              |     +-- bra.s 6f66 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    6f52:	|              \-----|-> pea 16689 <PutChar+0x1093>
    6f58:	|                    |   jsr 14b22 <KPrintF>
    6f5e:	|                    |   addq.l #4,sp
		return FALSE;
    6f60:	|                    |   clr.w d0
    6f62:	+--------------------|-- bra.w 723c <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    6f66:	|                    \-> move.l 18802 <zBuffer>,d0
    6f6c:	|                        move.l d0,d1
    6f6e:	|                        move.l 18892 <sceneWidth>,d0
    6f74:	|                        cmp.l d1,d0
    6f76:	|                    /-- bne.s 6f8a <setZBuffer+0x160>
    6f78:	|                    |   move.l 18806 <zBuffer+0x4>,d0
    6f7e:	|                    |   move.l d0,d1
    6f80:	|                    |   move.l 18896 <sceneHeight>,d0
    6f86:	|                    |   cmp.l d1,d0
    6f88:	|                 /--|-- beq.s 6fda <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    6f8a:	|                 |  \-> movea.l 18896 <sceneHeight>,a1
    6f90:	|                 |      movea.l 18892 <sceneWidth>,a0
    6f96:	|                 |      move.l 18806 <zBuffer+0x4>,d1
    6f9c:	|                 |      move.l 18802 <zBuffer>,d0
    6fa2:	|                 |      move.l a1,-(sp)
    6fa4:	|                 |      move.l a0,-(sp)
    6fa6:	|                 |      move.l d1,-(sp)
    6fa8:	|                 |      move.l d0,-(sp)
    6faa:	|                 |      pea 166d5 <PutChar+0x10df>
    6fb0:	|                 |      moveq #32,d0
    6fb2:	|                 |      add.l sp,d0
    6fb4:	|                 |      move.l d0,-(sp)
    6fb6:	|                 |      jsr 122e4 <sprintf>
    6fbc:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    6fc0:	|                 |      moveq #12,d0
    6fc2:	|                 |      add.l sp,d0
    6fc4:	|                 |      move.l d0,-(sp)
    6fc6:	|                 |      pea 166f0 <PutChar+0x10fa>
    6fcc:	|                 |      jsr 14b22 <KPrintF>
    6fd2:	|                 |      addq.l #8,sp
		return FALSE;
    6fd4:	|                 |      clr.w d0
    6fd6:	+-----------------|----- bra.w 723c <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    6fda:	|                 \----> move.l 1878a <bigDataFile>,492(sp)
    6fe2:	|                        move.l 187aa <DOSBase>,d0
    6fe8:	|                        movea.l d0,a6
    6fea:	|                        move.l 492(sp),d1
    6fee:	|                        jsr -306(a6)
    6ff2:	|                        move.l d0,488(sp)
    6ff6:	|                        move.l 488(sp),d0
    6ffa:	|                        move.l d0,1880a <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7000:	|                        clr.l 544(sp)
    7004:	|                    /-- bra.s 7030 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    7006:	|                 /--|-> move.l 1878a <bigDataFile>,d0
    700c:	|                 |  |   move.l d0,-(sp)
    700e:	|                 |  |   jsr 6bc <get2bytes>
    7014:	|                 |  |   addq.l #4,sp
    7016:	|                 |  |   move.l 544(sp),d1
    701a:	|                 |  |   add.l d1,d1
    701c:	|                 |  |   add.l d1,d1
    701e:	|                 |  |   lea 540(sp),a0
    7022:	|                 |  |   add.l a0,d1
    7024:	|                 |  |   movea.l d1,a0
    7026:	|                 |  |   lea -144(a0),a0
    702a:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    702c:	|                 |  |   addq.l #1,544(sp)
    7030:	|                 |  \-> move.l 1880a <zBuffer+0x8>,d0
    7036:	|                 |      cmp.l 544(sp),d0
    703a:	|                 \----- bhi.s 7006 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    703c:	|                        move.l 1880a <zBuffer+0x8>,d0
    7042:	|                        move.l d0,-(sp)
    7044:	|                        move.l sp,d0
    7046:	|                        addi.l #336,d0
    704c:	|                        move.l d0,-(sp)
    704e:	|                        move.l sp,d0
    7050:	|                        addi.l #404,d0
    7056:	|                        move.l d0,-(sp)
    7058:	|                        jsr 7246 <sortZPal>
    705e:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7062:	|                        clr.l 544(sp)
    7066:	|                    /-- bra.s 70de <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    7068:	|                 /--|-> move.l 544(sp),d0
    706c:	|                 |  |   add.l d0,d0
    706e:	|                 |  |   add.l d0,d0
    7070:	|                 |  |   move.l #540,d1
    7076:	|                 |  |   add.l sp,d1
    7078:	|                 |  |   add.l d1,d0
    707a:	|                 |  |   movea.l d0,a0
    707c:	|                 |  |   lea -208(a0),a0
    7080:	|                 |  |   move.l (a0),d0
    7082:	|                 |  |   add.l d0,d0
    7084:	|                 |  |   add.l d0,d0
    7086:	|                 |  |   lea 540(sp),a0
    708a:	|                 |  |   add.l a0,d0
    708c:	|                 |  |   movea.l d0,a0
    708e:	|                 |  |   lea -144(a0),a0
    7092:	|                 |  |   move.l (a0),d0
    7094:	|                 |  |   move.l 544(sp),d1
    7098:	|                 |  |   addq.l #3,d1
    709a:	|                 |  |   add.l d1,d1
    709c:	|                 |  |   movea.l d1,a1
    709e:	|                 |  |   adda.l d1,a1
    70a0:	|                 |  |   lea 18802 <zBuffer>,a0
    70a6:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    70aa:	|                 |  |   move.l 544(sp),d0
    70ae:	|                 |  |   add.l d0,d0
    70b0:	|                 |  |   add.l d0,d0
    70b2:	|                 |  |   move.l #540,d1
    70b8:	|                 |  |   add.l sp,d1
    70ba:	|                 |  |   add.l d1,d0
    70bc:	|                 |  |   movea.l d0,a0
    70be:	|                 |  |   lea -208(a0),a0
    70c2:	|                 |  |   move.l (a0),d1
    70c4:	|                 |  |   move.l 544(sp),d0
    70c8:	|                 |  |   add.l d1,d1
    70ca:	|                 |  |   add.l d1,d1
    70cc:	|                 |  |   lea 540(sp),a0
    70d0:	|                 |  |   add.l a0,d1
    70d2:	|                 |  |   movea.l d1,a0
    70d4:	|                 |  |   lea -272(a0),a0
    70d8:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    70da:	|                 |  |   addq.l #1,544(sp)
    70de:	|                 |  \-> move.l 1880a <zBuffer+0x8>,d0
    70e4:	|                 |      cmp.l 544(sp),d0
    70e8:	|                 \----- bhi.w 7068 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    70ec:	|                        move.l 18892 <sceneWidth>,d0
    70f2:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    70f6:	|                        move.l 18896 <sceneHeight>,d0
    70fc:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    7100:	|                        move.l 484(sp),-(sp)
    7104:	|                        move.l 484(sp),-(sp)
    7108:	|                        jsr 154e0 <__mulsi3>
    710e:	|                        addq.l #8,sp
    7110:	|                        move.l d0,476(sp)
    7114:	|                        clr.l 472(sp)
    7118:	|                        move.l 187a2 <SysBase>,d0
    711e:	|                        movea.l d0,a6
    7120:	|                        move.l 476(sp),d0
    7124:	|                        move.l 472(sp),d1
    7128:	|                        jsr -684(a6)
    712c:	|                        move.l d0,468(sp)
    7130:	|                        move.l 468(sp),d0
    7134:	|                        move.l d0,18852 <zBuffer+0x50>
	if (!zBuffer.tex) {
    713a:	|                        move.l 18852 <zBuffer+0x50>,d0
    7140:	|                    /-- bne.s 7156 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    7142:	|                    |   pea 1672d <PutChar+0x1137>
    7148:	|                    |   jsr 14b22 <KPrintF>
    714e:	|                    |   addq.l #4,sp
		return FALSE;
    7150:	|                    |   clr.w d0
    7152:	+--------------------|-- bra.w 723c <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    7156:	|                    \-> clr.l 544(sp)
    715a:	|     /----------------- bra.w 7226 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    715e:	|  /--|----------------> clr.l 536(sp)
    7162:	|  |  |     /----------- bra.w 7212 <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    7166:	|  |  |  /--|----------> tst.l 528(sp)
    716a:	|  |  |  |  |  /-------- bne.s 71c8 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    716c:	|  |  |  |  |  |         move.l 1878a <bigDataFile>,464(sp)
    7174:	|  |  |  |  |  |         move.l 187aa <DOSBase>,d0
    717a:	|  |  |  |  |  |         movea.l d0,a6
    717c:	|  |  |  |  |  |         move.l 464(sp),d1
    7180:	|  |  |  |  |  |         jsr -306(a6)
    7184:	|  |  |  |  |  |         move.l d0,460(sp)
    7188:	|  |  |  |  |  |         move.l 460(sp),d0
    718c:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    7190:	|  |  |  |  |  |         move.l 532(sp),d0
    7194:	|  |  |  |  |  |         asr.l #4,d0
    7196:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    719a:	|  |  |  |  |  |         moveq #15,d0
    719c:	|  |  |  |  |  |         cmp.l 528(sp),d0
    71a0:	|  |  |  |  |  |  /----- bne.s 71be <setZBuffer+0x394>
    71a2:	|  |  |  |  |  |  |      move.l 1878a <bigDataFile>,d0
    71a8:	|  |  |  |  |  |  |      move.l d0,-(sp)
    71aa:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    71b0:	|  |  |  |  |  |  |      addq.l #4,sp
    71b2:	|  |  |  |  |  |  |      movea.l d0,a0
    71b4:	|  |  |  |  |  |  |      lea 16(a0),a0
    71b8:	|  |  |  |  |  |  |      move.l a0,528(sp)
    71bc:	|  |  |  |  |  |  |  /-- bra.s 71c2 <setZBuffer+0x398>
				else stillToGo ++;
    71be:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    71c2:	|  |  |  |  |  |     \-> moveq #15,d1
    71c4:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    71c8:	|  |  |  |  |  \-------> move.l 532(sp),d0
    71cc:	|  |  |  |  |            add.l d0,d0
    71ce:	|  |  |  |  |            add.l d0,d0
    71d0:	|  |  |  |  |            lea 540(sp),a0
    71d4:	|  |  |  |  |            add.l a0,d0
    71d6:	|  |  |  |  |            movea.l d0,a0
    71d8:	|  |  |  |  |            lea -272(a0),a0
    71dc:	|  |  |  |  |            move.l (a0),d0
    71de:	|  |  |  |  |            move.l d0,d2
    71e0:	|  |  |  |  |            move.l 18852 <zBuffer+0x50>,d3
    71e6:	|  |  |  |  |            move.l 484(sp),d0
    71ea:	|  |  |  |  |            move.l 544(sp),-(sp)
    71ee:	|  |  |  |  |            move.l d0,-(sp)
    71f0:	|  |  |  |  |            jsr 154e0 <__mulsi3>
    71f6:	|  |  |  |  |            addq.l #8,sp
    71f8:	|  |  |  |  |            move.l d0,d1
    71fa:	|  |  |  |  |            move.l 536(sp),d0
    71fe:	|  |  |  |  |            add.l d1,d0
    7200:	|  |  |  |  |            movea.l d3,a0
    7202:	|  |  |  |  |            adda.l d0,a0
    7204:	|  |  |  |  |            move.b d2,d0
    7206:	|  |  |  |  |            lsl.b #4,d0
    7208:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    720a:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    720e:	|  |  |  |  |            addq.l #1,536(sp)
    7212:	|  |  |  |  \----------> move.l 536(sp),d1
    7216:	|  |  |  |               move.l 18892 <sceneWidth>,d0
    721c:	|  |  |  |               cmp.l d1,d0
    721e:	|  |  |  \-------------- bhi.w 7166 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    7222:	|  |  |                  addq.l #1,544(sp)
    7226:	|  |  \----------------> move.l 18896 <sceneHeight>,d0
    722c:	|  |                     cmp.l 544(sp),d0
    7230:	|  \-------------------- bhi.w 715e <setZBuffer+0x334>
		}
	}

	finishAccess ();
    7234:	|                        jsr 5338 <finishAccess>
	
	return TRUE;
    723a:	|                        moveq #1,d0
}
    723c:	\----------------------> movem.l (sp)+,d2-d3/a6
    7240:	                         lea 528(sp),sp
    7244:	                         rts

00007246 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    7246:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    7248:	             clr.l 4(sp)
    724c:	         /-- bra.s 7264 <sortZPal+0x1e>
		newpal[i] = i;
    724e:	      /--|-> move.l 4(sp),d0
    7252:	      |  |   add.l d0,d0
    7254:	      |  |   add.l d0,d0
    7256:	      |  |   movea.l 16(sp),a0
    725a:	      |  |   adda.l d0,a0
    725c:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    7260:	      |  |   addq.l #1,4(sp)
    7264:	      |  \-> move.l 4(sp),d0
    7268:	      |      cmp.l 20(sp),d0
    726c:	      \----- blt.s 724e <sortZPal+0x8>
	}

	if (size < 2) return;		
    726e:	             moveq #1,d0
    7270:	             cmp.l 20(sp),d0
    7274:	/----------- bge.w 7326 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    7278:	|            moveq #1,d0
    727a:	|            move.l d0,4(sp)
    727e:	|     /----- bra.w 7318 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    7282:	|  /--|----> move.l 4(sp),d0
    7286:	|  |  |      add.l d0,d0
    7288:	|  |  |      add.l d0,d0
    728a:	|  |  |      movea.l 16(sp),a0
    728e:	|  |  |      adda.l d0,a0
    7290:	|  |  |      move.l (a0),d0
    7292:	|  |  |      add.l d0,d0
    7294:	|  |  |      add.l d0,d0
    7296:	|  |  |      movea.l 12(sp),a0
    729a:	|  |  |      adda.l d0,a0
    729c:	|  |  |      move.l (a0),d1
    729e:	|  |  |      move.l 4(sp),d0
    72a2:	|  |  |      addi.l #1073741823,d0
    72a8:	|  |  |      add.l d0,d0
    72aa:	|  |  |      add.l d0,d0
    72ac:	|  |  |      movea.l 16(sp),a0
    72b0:	|  |  |      adda.l d0,a0
    72b2:	|  |  |      move.l (a0),d0
    72b4:	|  |  |      add.l d0,d0
    72b6:	|  |  |      add.l d0,d0
    72b8:	|  |  |      movea.l 12(sp),a0
    72bc:	|  |  |      adda.l d0,a0
    72be:	|  |  |      move.l (a0),d0
    72c0:	|  |  |      cmp.l d1,d0
    72c2:	|  |  |  /-- ble.s 7314 <sortZPal+0xce>
			tmp = newpal[i];
    72c4:	|  |  |  |   move.l 4(sp),d0
    72c8:	|  |  |  |   add.l d0,d0
    72ca:	|  |  |  |   add.l d0,d0
    72cc:	|  |  |  |   movea.l 16(sp),a0
    72d0:	|  |  |  |   adda.l d0,a0
    72d2:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    72d4:	|  |  |  |   move.l 4(sp),d0
    72d8:	|  |  |  |   addi.l #1073741823,d0
    72de:	|  |  |  |   add.l d0,d0
    72e0:	|  |  |  |   add.l d0,d0
    72e2:	|  |  |  |   movea.l 16(sp),a1
    72e6:	|  |  |  |   adda.l d0,a1
    72e8:	|  |  |  |   move.l 4(sp),d0
    72ec:	|  |  |  |   add.l d0,d0
    72ee:	|  |  |  |   add.l d0,d0
    72f0:	|  |  |  |   movea.l 16(sp),a0
    72f4:	|  |  |  |   adda.l d0,a0
    72f6:	|  |  |  |   move.l (a1),d0
    72f8:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    72fa:	|  |  |  |   move.l 4(sp),d0
    72fe:	|  |  |  |   addi.l #1073741823,d0
    7304:	|  |  |  |   add.l d0,d0
    7306:	|  |  |  |   add.l d0,d0
    7308:	|  |  |  |   movea.l 16(sp),a0
    730c:	|  |  |  |   adda.l d0,a0
    730e:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    7310:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    7314:	|  |  |  \-> addq.l #1,4(sp)
    7318:	|  |  \----> move.l 4(sp),d0
    731c:	|  |         cmp.l 20(sp),d0
    7320:	|  \-------- blt.w 7282 <sortZPal+0x3c>
    7324:	|        /-- bra.s 7328 <sortZPal+0xe2>
	if (size < 2) return;		
    7326:	\--------|-> nop
		}
	}
    7328:	         \-> addq.l #8,sp
    732a:	             rts

0000732c <forgetSpriteBank>:
#include "moreio.h"
#include "support/gcc8_c_support.h"


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    732c:	          lea -36(sp),sp
    7330:	          move.l a6,-(sp)

	struct spriteBank *spritebanktoforget = &forgetme->bank;
    7332:	          move.l 44(sp),d0
    7336:	          addq.l #8,d0
    7338:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    733c:	          clr.l 36(sp)
    7340:	   /----- bra.s 7386 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    7342:	/--|----> movea.l 28(sp),a0
    7346:	|  |      movea.l 8(a0),a0
    734a:	|  |      move.l 36(sp),d1
    734e:	|  |      move.l d1,d0
    7350:	|  |      lsl.l #3,d0
    7352:	|  |      sub.l d1,d0
    7354:	|  |      add.l d0,d0
    7356:	|  |      add.l d0,d0
    7358:	|  |      adda.l d0,a0
    735a:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    735e:	|  |      movea.l 8(sp),a0
    7362:	|  |      move.l 24(a0),d0
    7366:	|  |  /-- beq.s 7382 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    7368:	|  |  |   movea.l 8(sp),a0
    736c:	|  |  |   move.l 24(a0),4(sp)
    7372:	|  |  |   move.l 187a2 <SysBase>,d0
    7378:	|  |  |   movea.l d0,a6
    737a:	|  |  |   movea.l 4(sp),a1
    737e:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7382:	|  |  \-> addq.l #1,36(sp)
    7386:	|  \----> movea.l 28(sp),a0
    738a:	|         move.l (a0),d0
    738c:	|         cmp.l 36(sp),d0
    7390:	\-------- bgt.s 7342 <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    7392:	          movea.l 28(sp),a0
    7396:	          move.l 8(a0),24(sp)
    739c:	          move.l 187a2 <SysBase>,d0
    73a2:	          movea.l d0,a6
    73a4:	          movea.l 24(sp),a1
    73a8:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    73ac:	          move.l 28(sp),20(sp)
    73b2:	          move.l 187a2 <SysBase>,d0
    73b8:	          movea.l d0,a6
    73ba:	          movea.l 20(sp),a1
    73be:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    73c2:	          move.l 18882 <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    73ca:	      /-- bra.s 73d6 <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    73cc:	   /--|-> movea.l 32(sp),a0
    73d0:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    73d6:	   |  \-> movea.l 32(sp),a0
    73da:	   |      movea.l 22(a0),a0
    73de:	   |      move.l (a0),d1
    73e0:	   |      movea.l 44(sp),a0
    73e4:	   |      move.l (a0),d0
    73e6:	   |      cmp.l d1,d0
    73e8:	   |  /-- beq.s 73f0 <forgetSpriteBank+0xc4>
    73ea:	   |  |   tst.l 32(sp)
    73ee:	   \--|-- bne.s 73cc <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    73f0:	      \-> tst.l 32(sp)
    73f4:	   /----- beq.s 741e <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    73f6:	   |      movea.l 44(sp),a0
    73fa:	   |      move.l 22(a0),d0
    73fe:	   |      movea.l 32(sp),a0
    7402:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    7406:	   |      move.l 44(sp),12(sp)
    740c:	   |      move.l 187a2 <SysBase>,d0
    7412:	   |      movea.l d0,a6
    7414:	   |      movea.l 12(sp),a1
    7418:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    741c:	   |  /-- bra.s 7444 <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    741e:	   \--|-> movea.l 18882 <allLoadedBanks>,a0
    7424:	      |   move.l 22(a0),d0
    7428:	      |   move.l d0,18882 <allLoadedBanks>
		FreeVec( forgetme);
    742e:	      |   move.l 44(sp),16(sp)
    7434:	      |   move.l 187a2 <SysBase>,d0
    743a:	      |   movea.l d0,a6
    743c:	      |   movea.l 16(sp),a1
    7440:	      |   jsr -690(a6)
}
    7444:	      \-> nop
    7446:	          movea.l (sp)+,a6
    7448:	          lea 36(sp),sp
    744c:	          rts

0000744e <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    744e:	             lea -84(sp),sp
    7452:	             movem.l d2-d4/a2/a6,-(sp)
    7456:	             move.l 116(sp),d0
    745a:	             move.w d0,d0
    745c:	             move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, spriteBankVersion = 0, howmany = 0, startIndex = 0;
    7460:	             clr.l 96(sp)
    7464:	             clr.l 92(sp)
    7468:	             clr.l 88(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    746c:	             clr.l 84(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    7470:	             move.l 108(sp),-(sp)
    7474:	             jsr 5440 <openFileFromNum>
    747a:	             addq.l #4,sp
    747c:	             tst.l d0
    747e:	         /-- bne.s 7494 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    7480:	         |   pea 16750 <PutChar+0x115a>
    7486:	         |   jsr 14b22 <KPrintF>
    748c:	         |   addq.l #4,sp
		return FALSE;
    748e:	         |   clr.w d0
    7490:	/--------|-- bra.w 775a <loadSpriteBank+0x30c>
	}

	loadhere->isFont = isFont;
    7494:	|        \-> movea.l 112(sp),a0
    7498:	|            move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    749e:	|            move.l 1878a <bigDataFile>,d0
    74a4:	|            move.l d0,-(sp)
    74a6:	|            jsr 6bc <get2bytes>
    74ac:	|            addq.l #4,sp
	spriteBankVersion = FGetC(bigDataFile);
    74ae:	|            move.l 1878a <bigDataFile>,80(sp)
    74b6:	|            move.l 187aa <DOSBase>,d0
    74bc:	|            movea.l d0,a6
    74be:	|            move.l 80(sp),d1
    74c2:	|            jsr -306(a6)
    74c6:	|            move.l d0,76(sp)
    74ca:	|            move.l 76(sp),d0
    74ce:	|            move.l d0,96(sp)
	total = get2bytes(bigDataFile);
    74d2:	|            move.l 1878a <bigDataFile>,d0
    74d8:	|            move.l d0,-(sp)
    74da:	|            jsr 6bc <get2bytes>
    74e0:	|            addq.l #4,sp
    74e2:	|            move.l d0,72(sp)

	if (total <= 0) {
    74e6:	|        /-- bgt.s 74fc <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    74e8:	|        |   pea 1677e <PutChar+0x1188>
    74ee:	|        |   jsr 14b22 <KPrintF>
    74f4:	|        |   addq.l #4,sp
		return FALSE;
    74f6:	|        |   clr.w d0
    74f8:	+--------|-- bra.w 775a <loadSpriteBank+0x30c>
	}
	if (spriteBankVersion > 3) {
    74fc:	|        \-> moveq #3,d0
    74fe:	|            cmp.l 96(sp),d0
    7502:	|        /-- bge.s 7518 <loadSpriteBank+0xca>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    7504:	|        |   pea 167be <PutChar+0x11c8>
    750a:	|        |   jsr 14b22 <KPrintF>
    7510:	|        |   addq.l #4,sp
		return FALSE;
    7512:	|        |   clr.w d0
    7514:	+--------|-- bra.w 775a <loadSpriteBank+0x30c>
	}

	loadhere->total = total;
    7518:	|        \-> movea.l 112(sp),a0
    751c:	|            move.l 72(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    7520:	|            move.l 72(sp),d1
    7524:	|            move.l d1,d0
    7526:	|            lsl.l #3,d0
    7528:	|            sub.l d1,d0
    752a:	|            add.l d0,d0
    752c:	|            add.l d0,d0
    752e:	|            move.l d0,68(sp)
    7532:	|            clr.l 64(sp)
    7536:	|            move.l 187a2 <SysBase>,d0
    753c:	|            movea.l d0,a6
    753e:	|            move.l 68(sp),d0
    7542:	|            move.l 64(sp),d1
    7546:	|            jsr -684(a6)
    754a:	|            move.l d0,60(sp)
    754e:	|            move.l 60(sp),d0
    7552:	|            movea.l 112(sp),a0
    7556:	|            move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    755a:	|            movea.l 112(sp),a0
    755e:	|            move.l 8(a0),d0
    7562:	|        /-- bne.s 756a <loadSpriteBank+0x11c>
    7564:	|        |   clr.w d0
    7566:	+--------|-- bra.w 775a <loadSpriteBank+0x30c>
	
	startIndex = 1;
    756a:	|        \-> moveq #1,d0
    756c:	|            move.l d0,88(sp)

	for (i = 0; i < total; i++) {
    7570:	|            clr.l 100(sp)
    7574:	|     /----- bra.w 7746 <loadSpriteBank+0x2f8>
		loadhere->sprites[i].width = get2bytes(bigDataFile);
    7578:	|  /--|----> movea.l 1878a <bigDataFile>,a1
    757e:	|  |  |      movea.l 112(sp),a0
    7582:	|  |  |      movea.l 8(a0),a0
    7586:	|  |  |      move.l 100(sp),d1
    758a:	|  |  |      move.l d1,d0
    758c:	|  |  |      lsl.l #3,d0
    758e:	|  |  |      sub.l d1,d0
    7590:	|  |  |      add.l d0,d0
    7592:	|  |  |      add.l d0,d0
    7594:	|  |  |      lea (0,a0,d0.l),a2
    7598:	|  |  |      move.l a1,-(sp)
    759a:	|  |  |      jsr 6bc <get2bytes>
    75a0:	|  |  |      addq.l #4,sp
    75a2:	|  |  |      move.l d0,(a2)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    75a4:	|  |  |      movea.l 1878a <bigDataFile>,a1
    75aa:	|  |  |      movea.l 112(sp),a0
    75ae:	|  |  |      movea.l 8(a0),a0
    75b2:	|  |  |      move.l 100(sp),d1
    75b6:	|  |  |      move.l d1,d0
    75b8:	|  |  |      lsl.l #3,d0
    75ba:	|  |  |      sub.l d1,d0
    75bc:	|  |  |      add.l d0,d0
    75be:	|  |  |      add.l d0,d0
    75c0:	|  |  |      lea (0,a0,d0.l),a2
    75c4:	|  |  |      move.l a1,-(sp)
    75c6:	|  |  |      jsr 6bc <get2bytes>
    75cc:	|  |  |      addq.l #4,sp
    75ce:	|  |  |      move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    75d2:	|  |  |      movea.l 1878a <bigDataFile>,a1
    75d8:	|  |  |      movea.l 112(sp),a0
    75dc:	|  |  |      movea.l 8(a0),a0
    75e0:	|  |  |      move.l 100(sp),d1
    75e4:	|  |  |      move.l d1,d0
    75e6:	|  |  |      lsl.l #3,d0
    75e8:	|  |  |      sub.l d1,d0
    75ea:	|  |  |      add.l d0,d0
    75ec:	|  |  |      add.l d0,d0
    75ee:	|  |  |      lea (0,a0,d0.l),a2
    75f2:	|  |  |      move.l a1,-(sp)
    75f4:	|  |  |      jsr 6bc <get2bytes>
    75fa:	|  |  |      addq.l #4,sp
    75fc:	|  |  |      move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    7600:	|  |  |      movea.l 1878a <bigDataFile>,a1
    7606:	|  |  |      movea.l 112(sp),a0
    760a:	|  |  |      movea.l 8(a0),a0
    760e:	|  |  |      move.l 100(sp),d1
    7612:	|  |  |      move.l d1,d0
    7614:	|  |  |      lsl.l #3,d0
    7616:	|  |  |      sub.l d1,d0
    7618:	|  |  |      add.l d0,d0
    761a:	|  |  |      add.l d0,d0
    761c:	|  |  |      lea (0,a0,d0.l),a2
    7620:	|  |  |      move.l a1,-(sp)
    7622:	|  |  |      jsr 6bc <get2bytes>
    7628:	|  |  |      addq.l #4,sp
    762a:	|  |  |      move.l d0,12(a2)

		// ToDo Load Data
		UWORD size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    762e:	|  |  |      movea.l 112(sp),a0
    7632:	|  |  |      movea.l 8(a0),a0
    7636:	|  |  |      move.l 100(sp),d1
    763a:	|  |  |      move.l d1,d0
    763c:	|  |  |      lsl.l #3,d0
    763e:	|  |  |      sub.l d1,d0
    7640:	|  |  |      add.l d0,d0
    7642:	|  |  |      add.l d0,d0
    7644:	|  |  |      adda.l d0,a0
    7646:	|  |  |      move.l (a0),d0
    7648:	|  |  |  /-- bpl.s 764c <loadSpriteBank+0x1fe>
    764a:	|  |  |  |   addq.l #7,d0
    764c:	|  |  |  \-> asr.l #3,d0
    764e:	|  |  |      move.l d0,d2
    7650:	|  |  |      movea.l 112(sp),a0
    7654:	|  |  |      movea.l 8(a0),a0
    7658:	|  |  |      move.l 100(sp),d1
    765c:	|  |  |      move.l d1,d0
    765e:	|  |  |      lsl.l #3,d0
    7660:	|  |  |      sub.l d1,d0
    7662:	|  |  |      add.l d0,d0
    7664:	|  |  |      add.l d0,d0
    7666:	|  |  |      adda.l d0,a0
    7668:	|  |  |      move.l 4(a0),d0
    766c:	|  |  |      move.l d0,d0
    766e:	|  |  |      move.w d2,d1
    7670:	|  |  |      muls.w d0,d1
    7672:	|  |  |      move.w d1,d0
    7674:	|  |  |      add.w d0,d0
    7676:	|  |  |      add.w d1,d0
    7678:	|  |  |      add.w d0,d0
    767a:	|  |  |      move.w d0,58(sp)
		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    767e:	|  |  |      moveq #0,d0
    7680:	|  |  |      move.w 58(sp),d0
    7684:	|  |  |      add.l d0,d0
    7686:	|  |  |      move.l d0,54(sp)
    768a:	|  |  |      moveq #2,d0
    768c:	|  |  |      move.l d0,50(sp)
    7690:	|  |  |      move.l 187a2 <SysBase>,d0
    7696:	|  |  |      movea.l d0,a6
    7698:	|  |  |      move.l 54(sp),d0
    769c:	|  |  |      move.l 50(sp),d1
    76a0:	|  |  |      jsr -684(a6)
    76a4:	|  |  |      move.l d0,46(sp)
    76a8:	|  |  |      movea.l 46(sp),a1
    76ac:	|  |  |      movea.l 112(sp),a0
    76b0:	|  |  |      movea.l 8(a0),a0
    76b4:	|  |  |      move.l 100(sp),d1
    76b8:	|  |  |      move.l d1,d0
    76ba:	|  |  |      lsl.l #3,d0
    76bc:	|  |  |      sub.l d1,d0
    76be:	|  |  |      add.l d0,d0
    76c0:	|  |  |      add.l d0,d0
    76c2:	|  |  |      adda.l d0,a0
    76c4:	|  |  |      move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    76c8:	|  |  |      move.l 1878a <bigDataFile>,42(sp)
    76d0:	|  |  |      movea.l 112(sp),a0
    76d4:	|  |  |      movea.l 8(a0),a0
    76d8:	|  |  |      move.l 100(sp),d1
    76dc:	|  |  |      move.l d1,d0
    76de:	|  |  |      lsl.l #3,d0
    76e0:	|  |  |      sub.l d1,d0
    76e2:	|  |  |      add.l d0,d0
    76e4:	|  |  |      add.l d0,d0
    76e6:	|  |  |      adda.l d0,a0
    76e8:	|  |  |      move.l 24(a0),38(sp)
    76ee:	|  |  |      moveq #2,d0
    76f0:	|  |  |      move.l d0,34(sp)
    76f4:	|  |  |      move.w 58(sp),d0
    76f8:	|  |  |      lsr.w #1,d0
    76fa:	|  |  |      move.w d0,d0
    76fc:	|  |  |      andi.l #65535,d0
    7702:	|  |  |      move.l d0,30(sp)
    7706:	|  |  |      move.l 187aa <DOSBase>,d0
    770c:	|  |  |      movea.l d0,a6
    770e:	|  |  |      move.l 42(sp),d1
    7712:	|  |  |      move.l 38(sp),d2
    7716:	|  |  |      move.l 34(sp),d3
    771a:	|  |  |      move.l 30(sp),d4
    771e:	|  |  |      jsr -324(a6)
    7722:	|  |  |      move.l d0,26(sp)
    7726:	|  |  |      move.l 26(sp),d0
    772a:	|  |  |      move.w d0,24(sp)
		if (!count) {
    772e:	|  |  |  /-- bne.s 7742 <loadSpriteBank+0x2f4>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    7730:	|  |  |  |   pea 167f3 <PutChar+0x11fd>
    7736:	|  |  |  |   jsr 14b22 <KPrintF>
    773c:	|  |  |  |   addq.l #4,sp
			return FALSE;
    773e:	|  |  |  |   clr.w d0
    7740:	+--|--|--|-- bra.s 775a <loadSpriteBank+0x30c>
	for (i = 0; i < total; i++) {
    7742:	|  |  |  \-> addq.l #1,100(sp)
    7746:	|  |  \----> move.l 100(sp),d0
    774a:	|  |         cmp.l 72(sp),d0
    774e:	|  \-------- blt.w 7578 <loadSpriteBank+0x12a>
		}
	}

	finishAccess ();
    7752:	|            jsr 5338 <finishAccess>

	return TRUE;
    7758:	|            moveq #1,d0
}
    775a:	\----------> movem.l (sp)+,d2-d4/a2/a6
    775e:	             lea 84(sp),sp
    7762:	             rts

00007764 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    7764:	subq.l #8,sp
    7766:	move.l a2,-(sp)
    7768:	move.l 24(sp),d0
    776c:	move.w d0,d0
    776e:	move.w d0,6(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    7772:	movea.l 20(sp),a0
    7776:	move.l (a0),d0
    7778:	move.l d0,-(sp)
    777a:	jsr 152be <__fixunssfsi>
    7780:	addq.l #4,sp
    7782:	move.l d0,d0
    7784:	movea.l 16(sp),a0
    7788:	move.l 8(a0),d1
    778c:	move.l d1,d1
    778e:	movea.w d0,a0
    7790:	suba.w d1,a0
    7792:	move.w a0,10(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;
    7796:	movea.l 20(sp),a0
    779a:	move.l 4(a0),d0
    779e:	move.l d0,-(sp)
    77a0:	jsr 152be <__fixunssfsi>
    77a6:	addq.l #4,sp
    77a8:	move.l d0,d0
    77aa:	movea.l 16(sp),a0
    77ae:	move.l 12(a0),d1
    77b2:	move.l d1,d1
    77b4:	movea.w d0,a0
    77b6:	suba.w d1,a0
    77b8:	move.w a0,8(sp)

	CstScaleSprite( single, (WORD) thisPerson->x, (WORD) thisPerson->y,SCREEN);
    77bc:	movea.l 20(sp),a0
    77c0:	move.l 4(a0),d0
    77c4:	move.l d0,-(sp)
    77c6:	jsr 14ef6 <__fixsfsi>
    77cc:	addq.l #4,sp
    77ce:	move.l d0,d0
    77d0:	movea.w d0,a2
    77d2:	movea.l 20(sp),a0
    77d6:	move.l (a0),d0
    77d8:	move.l d0,-(sp)
    77da:	jsr 14ef6 <__fixsfsi>
    77e0:	addq.l #4,sp
    77e2:	move.l d0,d0
    77e4:	movea.w d0,a0
    77e6:	pea 1 <_start+0x1>
    77ea:	move.l a2,-(sp)
    77ec:	move.l a0,-(sp)
    77ee:	move.l 28(sp),-(sp)
    77f2:	jsr 198a <CstScaleSprite>
    77f8:	lea 16(sp),sp
	//KPrintF("scaleSprite: This function is not implemented yet");
    77fc:	nop
    77fe:	movea.l (sp)+,a2
    7800:	addq.l #8,sp
    7802:	rts

00007804 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    7804:	    move.l 4(sp),d0
    7808:	/-- bpl.s 780c <TF_abs+0x8>
    780a:	|   neg.l d0
}
    780c:	\-> rts

0000780e <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    780e:	             lea -28(sp),sp
    7812:	             move.l a6,-(sp)
    7814:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    7816:	             moveq #120,d0
    7818:	             move.l d0,28(sp)
    781c:	             clr.l 24(sp)
    7820:	             move.l 187a2 <SysBase>,d0
    7826:	             movea.l d0,a6
    7828:	             move.l 28(sp),d0
    782c:	             move.l 24(sp),d1
    7830:	             jsr -684(a6)
    7834:	             move.l d0,20(sp)
    7838:	             move.l 20(sp),d0
    783c:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    7840:	         /-- bne.s 7848 <addPerson+0x3a>
    7842:	         |   clr.w d0
    7844:	/--------|-- bra.w 7a78 <addPerson+0x26a>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    7848:	|        \-> move.l 48(sp),-(sp)
    784c:	|            jsr ba00 <loadObjectType>
    7852:	|            addq.l #4,sp
    7854:	|            movea.l 16(sp),a0
    7858:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    785c:	|            movea.l 16(sp),a0
    7860:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    7868:	|            movea.l 16(sp),a0
    786c:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    7870:	|            movea.l 16(sp),a0
    7874:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    7878:	|            move.l 44(sp),-(sp)
    787c:	|            jsr 14f5e <__floatsisf>
    7882:	|            addq.l #4,sp
    7884:	|            move.l d0,d2
    7886:	|            move.l 40(sp),-(sp)
    788a:	|            jsr 14f5e <__floatsisf>
    7890:	|            addq.l #4,sp
    7892:	|            move.l d2,-(sp)
    7894:	|            move.l d0,-(sp)
    7896:	|            move.l 24(sp),-(sp)
    789a:	|            jsr 92c2 <moveAndScale>
    78a0:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    78a4:	|            movea.l 16(sp),a0
    78a8:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    78ac:	|            movea.l 16(sp),a0
    78b0:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    78b6:	|            movea.l 16(sp),a0
    78ba:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    78c0:	|            movea.l 16(sp),a0
    78c4:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    78c8:	|            movea.l 16(sp),a0
    78cc:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    78d0:	|            movea.l 16(sp),a0
    78d4:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    78da:	|            movea.l 16(sp),a0
    78de:	|            clr.l 94(a0)
    newPerson->angle = 180;
    78e2:	|            movea.l 16(sp),a0
    78e6:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    78ee:	|            movea.l 16(sp),a0
    78f2:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    78fa:	|            movea.l 16(sp),a0
    78fe:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    7902:	|            movea.l 16(sp),a0
    7906:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    790a:	|            movea.l 16(sp),a0
    790e:	|            movea.l 102(a0),a0
    7912:	|            move.l 24(a0),d0
    7916:	|            movea.l 16(sp),a0
    791a:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    791e:	|            movea.l 16(sp),a0
    7922:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    7926:	|            movea.l 16(sp),a0
    792a:	|            movea.l 102(a0),a0
    792e:	|            move.l 32(a0),d0
    7932:	|            movea.l 16(sp),a0
    7936:	|            move.l d0,110(a0)
    newPerson->r = 0;
    793a:	|            movea.l 16(sp),a0
    793e:	|            clr.b 114(a0)
    newPerson->g = 0;
    7942:	|            movea.l 16(sp),a0
    7946:	|            clr.b 115(a0)
    newPerson->b = 0;
    794a:	|            movea.l 16(sp),a0
    794e:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    7952:	|            movea.l 16(sp),a0
    7956:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    795a:	|            movea.l 16(sp),a0
    795e:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    7962:	|            movea.l 16(sp),a0
    7966:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    796c:	|            clr.l -(sp)
    796e:	|            move.l 20(sp),-(sp)
    7972:	|            jsr 6826 <setFrames>
    7978:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    797a:	|            movea.l 52(sp),a0
    797e:	|            movea.l (a0),a0
    7980:	|            movea.l (a0),a0
    7982:	|            movea.l 4(a0),a0
    7986:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    798a:	|     /----- bpl.s 7994 <addPerson+0x186>
    798c:	|     |      move.l 12(sp),d0
    7990:	|     |      neg.l d0
    7992:	|     |  /-- bra.s 7996 <addPerson+0x188>
    7994:	|     \--|-> moveq #1,d0
    7996:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    799a:	|            movea.l 52(sp),a0
    799e:	|            movea.l (a0),a0
    79a0:	|            movea.l (a0),a0
    79a2:	|            movea.l (a0),a0
    79a4:	|            move.l 8(a0),d0
    79a8:	|            cmp.l 8(sp),d0
    79ac:	|     /----- bgt.s 79de <addPerson+0x1d0>
        if (fNumSigned < 0) {
    79ae:	|     |      tst.l 12(sp)
    79b2:	|     |  /-- bge.s 79c0 <addPerson+0x1b2>
            newPerson->height = 5;
    79b4:	|     |  |   movea.l 16(sp),a0
    79b8:	|     |  |   moveq #5,d1
    79ba:	|     |  |   move.l d1,8(a0)
    79be:	|  /--|--|-- bra.s 7a0a <addPerson+0x1fc>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    79c0:	|  |  |  \-> movea.l 52(sp),a0
    79c4:	|  |  |      movea.l (a0),a0
    79c6:	|  |  |      movea.l (a0),a0
    79c8:	|  |  |      movea.l (a0),a0
    79ca:	|  |  |      movea.l 16(a0),a0
    79ce:	|  |  |      move.l 12(a0),d0
    79d2:	|  |  |      addq.l #5,d0
    79d4:	|  |  |      movea.l 16(sp),a0
    79d8:	|  |  |      move.l d0,8(a0)
    79dc:	|  +--|----- bra.s 7a0a <addPerson+0x1fc>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    79de:	|  |  \----> movea.l 52(sp),a0
    79e2:	|  |         movea.l (a0),a0
    79e4:	|  |         movea.l (a0),a0
    79e6:	|  |         movea.l (a0),a0
    79e8:	|  |         movea.l 16(a0),a0
    79ec:	|  |         move.l 8(sp),d1
    79f0:	|  |         move.l d1,d0
    79f2:	|  |         lsl.l #3,d0
    79f4:	|  |         sub.l d1,d0
    79f6:	|  |         add.l d0,d0
    79f8:	|  |         add.l d0,d0
    79fa:	|  |         adda.l d0,a0
    79fc:	|  |         move.l 12(a0),d0
    7a00:	|  |         addq.l #5,d0
    7a02:	|  |         movea.l 16(sp),a0
    7a06:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    7a0a:	|  \-------> move.l #100442,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    7a12:	|        /-- bra.s 7a22 <addPerson+0x214>
        changethat = &((*changethat)->next);
    7a14:	|     /--|-> movea.l 32(sp),a0
    7a18:	|     |  |   move.l (a0),d0
    7a1a:	|     |  |   moveq #24,d1
    7a1c:	|     |  |   add.l d0,d1
    7a1e:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    7a22:	|     |  \-> movea.l 32(sp),a0
    7a26:	|     |      move.l (a0),d0
    7a28:	|     |  /-- beq.s 7a50 <addPerson+0x242>
    7a2a:	|     |  |   movea.l 32(sp),a0
    7a2e:	|     |  |   movea.l (a0),a0
    7a30:	|     |  |   move.l 4(a0),d2
    7a34:	|     |  |   move.l 44(sp),-(sp)
    7a38:	|     |  |   jsr 14f5e <__floatsisf>
    7a3e:	|     |  |   addq.l #4,sp
    7a40:	|     |  |   move.l d0,-(sp)
    7a42:	|     |  |   move.l d2,-(sp)
    7a44:	|     |  |   jsr 15184 <__ltsf2>
    7a4a:	|     |  |   addq.l #8,sp
    7a4c:	|     |  |   tst.l d0
    7a4e:	|     \--|-- blt.s 7a14 <addPerson+0x206>
    }

    newPerson->next = (*changethat);
    7a50:	|        \-> movea.l 32(sp),a0
    7a54:	|            move.l (a0),d0
    7a56:	|            movea.l 16(sp),a0
    7a5a:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    7a5e:	|            movea.l 32(sp),a0
    7a62:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    7a66:	|            movea.l 16(sp),a0
    7a6a:	|            move.l 102(a0),d0
    7a6e:	|            sne d0
    7a70:	|            neg.b d0
    7a72:	|            move.b d0,d0
    7a74:	|            andi.w #255,d0
}
    7a78:	\----------> move.l (sp)+,d2
    7a7a:	             movea.l (sp)+,a6
    7a7c:	             lea 28(sp),sp
    7a80:	             rts

00007a82 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    7a82:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    7a84:	       move.l 8(sp),-(sp)
    7a88:	       jsr 8b7a <findPerson>
    7a8e:	       addq.l #4,sp
    7a90:	       move.l d0,(sp)
    if (moveMe) {
    7a92:	/----- beq.s 7ac6 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    7a94:	|      movea.l (sp),a0
    7a96:	|      move.l 56(a0),d0
    7a9a:	|  /-- beq.s 7aac <animatePerson+0x2a>
    7a9c:	|  |   movea.l (sp),a0
    7a9e:	|  |   move.l 56(a0),d0
    7aa2:	|  |   move.l d0,-(sp)
    7aa4:	|  |   jsr 3090 <abortFunction>
    7aaa:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    7aac:	|  \-> movea.l (sp),a0
    7aae:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    7ab2:	|      movea.l (sp),a0
    7ab4:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    7ab8:	|      movea.l (sp),a0
    7aba:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    7abe:	|      movea.l (sp),a0
    7ac0:	|      move.l 12(sp),60(a0)
    }
}
    7ac6:	\----> nop
    7ac8:	       addq.l #4,sp
    7aca:	       rts

00007acc <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    7acc:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    7ace:	       move.l 8(sp),-(sp)
    7ad2:	       jsr 8b7a <findPerson>
    7ad8:	       addq.l #4,sp
    7ada:	       move.l d0,(sp)
    if (moveMe) {
    7adc:	/----- beq.s 7b1e <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    7ade:	|      movea.l (sp),a0
    7ae0:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    7ae4:	|      movea.l (sp),a0
    7ae6:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    7aec:	|      move.l (sp),-(sp)
    7aee:	|      jsr 9440 <rethinkAngle>
    7af4:	|      addq.l #4,sp
        if (moveMe->walking) {
    7af6:	|      movea.l (sp),a0
    7af8:	|      move.w 52(a0),d0
    7afc:	|  /-- beq.s 7b10 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    7afe:	|  |   pea 1 <_start+0x1>
    7b02:	|  |   move.l 4(sp),-(sp)
    7b06:	|  |   jsr 6826 <setFrames>
    7b0c:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    7b0e:	+--|-- bra.s 7b1e <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    7b10:	|  \-> clr.l -(sp)
    7b12:	|      move.l 4(sp),-(sp)
    7b16:	|      jsr 6826 <setFrames>
    7b1c:	|      addq.l #8,sp
}
    7b1e:	\----> nop
    7b20:	       addq.l #4,sp
    7b22:	       rts

00007b24 <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    7b24:	             lea -36(sp),sp
    7b28:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    7b2a:	             movea.l 44(sp),a0
    7b2e:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    7b34:	             moveq #12,d0
    7b36:	             move.l d0,28(sp)
    7b3a:	             clr.l 24(sp)
    7b3e:	             move.l 187a2 <SysBase>,d0
    7b44:	             movea.l d0,a6
    7b46:	             move.l 28(sp),d0
    7b4a:	             move.l 24(sp),d1
    7b4e:	             jsr -684(a6)
    7b52:	             move.l d0,20(sp)
    7b56:	             move.l 20(sp),d0
    7b5a:	             move.l d0,16(sp)
	if (!(newAnim)) {
    7b5e:	         /-- bne.s 7b74 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    7b60:	         |   pea 16826 <PutChar+0x1230>
    7b66:	         |   jsr 14b22 <KPrintF>
    7b6c:	         |   addq.l #4,sp
		return NULL;
    7b6e:	         |   moveq #0,d0
    7b70:	/--------|-- bra.w 7cc6 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    7b74:	|        \-> movea.l 44(sp),a0
    7b78:	|            move.l (a0),d0
    7b7a:	|            movea.l 16(sp),a0
    7b7e:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    7b80:	|            movea.l 16(sp),a0
    7b84:	|            movea.l (a0),a0
    7b86:	|            move.l 4(a0),d0
    7b8a:	|            addq.l #1,d0
    7b8c:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    7b90:	|            movea.l 16(sp),a0
    7b94:	|            move.l 32(sp),8(a0)

	if (num) {
    7b9a:	|  /-------- beq.w 7cba <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    7b9e:	|  |         move.l 32(sp),d1
    7ba2:	|  |         move.l d1,d0
    7ba4:	|  |         add.l d0,d0
    7ba6:	|  |         add.l d1,d0
    7ba8:	|  |         add.l d0,d0
    7baa:	|  |         add.l d0,d0
    7bac:	|  |         move.l d0,12(sp)
    7bb0:	|  |         clr.l 8(sp)
    7bb4:	|  |         move.l 187a2 <SysBase>,d0
    7bba:	|  |         movea.l d0,a6
    7bbc:	|  |         move.l 12(sp),d0
    7bc0:	|  |         move.l 8(sp),d1
    7bc4:	|  |         jsr -684(a6)
    7bc8:	|  |         move.l d0,4(sp)
    7bcc:	|  |         move.l 4(sp),d0
    7bd0:	|  |         movea.l 16(sp),a0
    7bd4:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    7bd8:	|  |         movea.l 16(sp),a0
    7bdc:	|  |         move.l 4(a0),d0
    7be0:	|  |     /-- bne.s 7bf6 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    7be2:	|  |     |   pea 16826 <PutChar+0x1230>
    7be8:	|  |     |   jsr 14b22 <KPrintF>
    7bee:	|  |     |   addq.l #4,sp
			return NULL;
    7bf0:	|  |     |   moveq #0,d0
    7bf2:	+--|-----|-- bra.w 7cc6 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    7bf6:	|  |     \-> clr.l 36(sp)
    7bfa:	|  |     /-- bra.w 7cac <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    7bfe:	|  |  /--|-> movea.l 44(sp),a0
    7c02:	|  |  |  |   movea.l 4(a0),a0
    7c06:	|  |  |  |   move.l 36(sp),d1
    7c0a:	|  |  |  |   move.l d1,d0
    7c0c:	|  |  |  |   add.l d0,d0
    7c0e:	|  |  |  |   add.l d1,d0
    7c10:	|  |  |  |   add.l d0,d0
    7c12:	|  |  |  |   add.l d0,d0
    7c14:	|  |  |  |   lea (0,a0,d0.l),a1
    7c18:	|  |  |  |   movea.l 16(sp),a0
    7c1c:	|  |  |  |   movea.l 4(a0),a0
    7c20:	|  |  |  |   move.l 36(sp),d1
    7c24:	|  |  |  |   move.l d1,d0
    7c26:	|  |  |  |   add.l d0,d0
    7c28:	|  |  |  |   add.l d1,d0
    7c2a:	|  |  |  |   add.l d0,d0
    7c2c:	|  |  |  |   add.l d0,d0
    7c2e:	|  |  |  |   adda.l d0,a0
    7c30:	|  |  |  |   move.l (a1),d0
    7c32:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    7c34:	|  |  |  |   movea.l 44(sp),a0
    7c38:	|  |  |  |   movea.l 4(a0),a0
    7c3c:	|  |  |  |   move.l 36(sp),d1
    7c40:	|  |  |  |   move.l d1,d0
    7c42:	|  |  |  |   add.l d0,d0
    7c44:	|  |  |  |   add.l d1,d0
    7c46:	|  |  |  |   add.l d0,d0
    7c48:	|  |  |  |   add.l d0,d0
    7c4a:	|  |  |  |   lea (0,a0,d0.l),a1
    7c4e:	|  |  |  |   movea.l 16(sp),a0
    7c52:	|  |  |  |   movea.l 4(a0),a0
    7c56:	|  |  |  |   move.l 36(sp),d1
    7c5a:	|  |  |  |   move.l d1,d0
    7c5c:	|  |  |  |   add.l d0,d0
    7c5e:	|  |  |  |   add.l d1,d0
    7c60:	|  |  |  |   add.l d0,d0
    7c62:	|  |  |  |   add.l d0,d0
    7c64:	|  |  |  |   adda.l d0,a0
    7c66:	|  |  |  |   move.l 4(a1),d0
    7c6a:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    7c6e:	|  |  |  |   movea.l 44(sp),a0
    7c72:	|  |  |  |   movea.l 4(a0),a0
    7c76:	|  |  |  |   move.l 36(sp),d1
    7c7a:	|  |  |  |   move.l d1,d0
    7c7c:	|  |  |  |   add.l d0,d0
    7c7e:	|  |  |  |   add.l d1,d0
    7c80:	|  |  |  |   add.l d0,d0
    7c82:	|  |  |  |   add.l d0,d0
    7c84:	|  |  |  |   lea (0,a0,d0.l),a1
    7c88:	|  |  |  |   movea.l 16(sp),a0
    7c8c:	|  |  |  |   movea.l 4(a0),a0
    7c90:	|  |  |  |   move.l 36(sp),d1
    7c94:	|  |  |  |   move.l d1,d0
    7c96:	|  |  |  |   add.l d0,d0
    7c98:	|  |  |  |   add.l d1,d0
    7c9a:	|  |  |  |   add.l d0,d0
    7c9c:	|  |  |  |   add.l d0,d0
    7c9e:	|  |  |  |   adda.l d0,a0
    7ca0:	|  |  |  |   move.l 8(a1),d0
    7ca4:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    7ca8:	|  |  |  |   addq.l #1,36(sp)
    7cac:	|  |  |  \-> move.l 36(sp),d0
    7cb0:	|  |  |      cmp.l 32(sp),d0
    7cb4:	|  |  \----- blt.w 7bfe <copyAnim+0xda>
    7cb8:	|  |     /-- bra.s 7cc2 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    7cba:	|  \-----|-> movea.l 16(sp),a0
    7cbe:	|        |   clr.l 4(a0)
	}

	return newAnim;
    7cc2:	|        \-> move.l 16(sp),d0
}
    7cc6:	\----------> movea.l (sp)+,a6
    7cc8:	             lea 36(sp),sp
    7ccc:	             rts

00007cce <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    7cce:	                lea -44(sp),sp
    7cd2:	                move.l a6,-(sp)
    7cd4:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    7cd6:	                moveq #12,d0
    7cd8:	                move.l d0,40(sp)
    7cdc:	                clr.l 36(sp)
    7ce0:	                move.l 187a2 <SysBase>,d0
    7ce6:	                movea.l d0,a6
    7ce8:	                move.l 40(sp),d0
    7cec:	                move.l 36(sp),d1
    7cf0:	                jsr -684(a6)
    7cf4:	                move.l d0,32(sp)
    7cf8:	                move.l 32(sp),d0
    7cfc:	                move.l d0,28(sp)
	if( !newP) {
    7d00:	            /-- bne.s 7d16 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    7d02:	            |   pea 16847 <PutChar+0x1251>
    7d08:	            |   jsr 14b22 <KPrintF>
    7d0e:	            |   addq.l #4,sp
		return NULL;
    7d10:	            |   moveq #0,d0
    7d12:	/-----------|-- bra.w 7ee6 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    7d16:	|           \-> movea.l 28(sp),a0
    7d1a:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    7d20:	|               move.l 56(sp),d1
    7d24:	|               move.l d1,d0
    7d26:	|               add.l d0,d0
    7d28:	|               add.l d1,d0
    7d2a:	|               add.l d0,d0
    7d2c:	|               add.l d0,d0
    7d2e:	|               move.l d0,24(sp)
    7d32:	|               clr.l 20(sp)
    7d36:	|               move.l 187a2 <SysBase>,d0
    7d3c:	|               movea.l d0,a6
    7d3e:	|               move.l 24(sp),d0
    7d42:	|               move.l 20(sp),d1
    7d46:	|               jsr -684(a6)
    7d4a:	|               move.l d0,16(sp)
    7d4e:	|               move.l 16(sp),d0
    7d52:	|               movea.l 28(sp),a0
    7d56:	|               move.l d0,4(a0)
	if( !newP->frames) {
    7d5a:	|               movea.l 28(sp),a0
    7d5e:	|               move.l 4(a0),d0
    7d62:	|           /-- bne.s 7d78 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    7d64:	|           |   pea 16847 <PutChar+0x1251>
    7d6a:	|           |   jsr 14b22 <KPrintF>
    7d70:	|           |   addq.l #4,sp
		return NULL;
    7d72:	|           |   moveq #0,d0
    7d74:	+-----------|-- bra.w 7ee6 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    7d78:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    7d7e:	|               movea.l 60(sp),a0
    7d82:	|               move.l (a0),44(sp)
	while (a) {
    7d86:	|     /-------- bra.w 7eda <createPersonaAnim+0x20c>
		a --;
    7d8a:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    7d8e:	|  |  |         movea.l 28(sp),a0
    7d92:	|  |  |         movea.l 4(a0),a0
    7d96:	|  |  |         move.l 48(sp),d1
    7d9a:	|  |  |         move.l d1,d0
    7d9c:	|  |  |         add.l d0,d0
    7d9e:	|  |  |         add.l d1,d0
    7da0:	|  |  |         add.l d0,d0
    7da2:	|  |  |         add.l d0,d0
    7da4:	|  |  |         adda.l d0,a0
    7da6:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    7daa:	|  |  |         movea.l 44(sp),a0
    7dae:	|  |  |         move.l (a0),d0
    7db0:	|  |  |         moveq #5,d1
    7db2:	|  |  |         cmp.l d0,d1
    7db4:	|  |  |     /-- bne.s 7de0 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    7db6:	|  |  |     |   movea.l 28(sp),a0
    7dba:	|  |  |     |   movea.l 4(a0),a0
    7dbe:	|  |  |     |   move.l 48(sp),d1
    7dc2:	|  |  |     |   move.l d1,d0
    7dc4:	|  |  |     |   add.l d0,d0
    7dc6:	|  |  |     |   add.l d1,d0
    7dc8:	|  |  |     |   add.l d0,d0
    7dca:	|  |  |     |   add.l d0,d0
    7dcc:	|  |  |     |   lea (0,a0,d0.l),a1
    7dd0:	|  |  |     |   movea.l 44(sp),a0
    7dd4:	|  |  |     |   move.l 4(a0),d0
    7dd8:	|  |  |     |   move.l d0,8(a1)
    7ddc:	|  |  |  /--|-- bra.w 7e88 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    7de0:	|  |  |  |  \-> movea.l 44(sp),a0
    7de4:	|  |  |  |      move.l (a0),d0
    7de6:	|  |  |  |      moveq #2,d1
    7de8:	|  |  |  |      cmp.l d0,d1
    7dea:	|  |  |  |  /-- bne.s 7e16 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    7dec:	|  |  |  |  |   movea.l 44(sp),a0
    7df0:	|  |  |  |  |   move.l 4(a0),d2
    7df4:	|  |  |  |  |   movea.l 28(sp),a0
    7df8:	|  |  |  |  |   movea.l 4(a0),a0
    7dfc:	|  |  |  |  |   move.l 48(sp),d1
    7e00:	|  |  |  |  |   move.l d1,d0
    7e02:	|  |  |  |  |   add.l d0,d0
    7e04:	|  |  |  |  |   add.l d1,d0
    7e06:	|  |  |  |  |   add.l d0,d0
    7e08:	|  |  |  |  |   add.l d0,d0
    7e0a:	|  |  |  |  |   adda.l d0,a0
    7e0c:	|  |  |  |  |   move.l d2,d0
    7e0e:	|  |  |  |  |   neg.l d0
    7e10:	|  |  |  |  |   move.l d0,8(a0)
    7e14:	|  |  |  +--|-- bra.s 7e88 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    7e16:	|  |  |  |  \-> movea.l 44(sp),a0
    7e1a:	|  |  |  |      move.l (a0),d0
    7e1c:	|  |  |  |      moveq #6,d1
    7e1e:	|  |  |  |      cmp.l d0,d1
    7e20:	|  |  |  |  /-- bne.s 7e68 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    7e22:	|  |  |  |  |   movea.l 44(sp),a0
    7e26:	|  |  |  |  |   movea.l 4(a0),a0
    7e2a:	|  |  |  |  |   move.l (a0),d0
    7e2c:	|  |  |  |  |   move.l d0,-(sp)
    7e2e:	|  |  |  |  |   pea 1 <_start+0x1>
    7e32:	|  |  |  |  |   lea 20(sp),a0
    7e36:	|  |  |  |  |   move.l a0,-(sp)
    7e38:	|  |  |  |  |   jsr 12ada <getValueType>
    7e3e:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    7e42:	|  |  |  |  |   movea.l 44(sp),a0
    7e46:	|  |  |  |  |   movea.l 4(a0),a0
    7e4a:	|  |  |  |  |   movea.l (a0),a0
    7e4c:	|  |  |  |  |   move.l 8(a0),d0
    7e50:	|  |  |  |  |   move.l d0,-(sp)
    7e52:	|  |  |  |  |   pea 1 <_start+0x1>
    7e56:	|  |  |  |  |   lea 16(sp),a0
    7e5a:	|  |  |  |  |   move.l a0,-(sp)
    7e5c:	|  |  |  |  |   jsr 12ada <getValueType>
    7e62:	|  |  |  |  |   lea 12(sp),sp
    7e66:	|  |  |  +--|-- bra.s 7e88 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    7e68:	|  |  |  |  \-> move.l 44(sp),d0
    7e6c:	|  |  |  |      move.l d0,-(sp)
    7e6e:	|  |  |  |      pea 1 <_start+0x1>
    7e72:	|  |  |  |      lea 20(sp),a0
    7e76:	|  |  |  |      move.l a0,-(sp)
    7e78:	|  |  |  |      jsr 12ada <getValueType>
    7e7e:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    7e82:	|  |  |  |      moveq #1,d0
    7e84:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    7e88:	|  |  |  \----> move.l 60(sp),-(sp)
    7e8c:	|  |  |         jsr 1345e <trimStack>
    7e92:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    7e94:	|  |  |         movea.l 28(sp),a0
    7e98:	|  |  |         movea.l 4(a0),a0
    7e9c:	|  |  |         move.l 48(sp),d1
    7ea0:	|  |  |         move.l d1,d0
    7ea2:	|  |  |         add.l d0,d0
    7ea4:	|  |  |         add.l d1,d0
    7ea6:	|  |  |         add.l d0,d0
    7ea8:	|  |  |         add.l d0,d0
    7eaa:	|  |  |         adda.l d0,a0
    7eac:	|  |  |         move.l 12(sp),d0
    7eb0:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    7eb2:	|  |  |         movea.l 28(sp),a0
    7eb6:	|  |  |         movea.l 4(a0),a0
    7eba:	|  |  |         move.l 48(sp),d1
    7ebe:	|  |  |         move.l d1,d0
    7ec0:	|  |  |         add.l d0,d0
    7ec2:	|  |  |         add.l d1,d0
    7ec4:	|  |  |         add.l d0,d0
    7ec6:	|  |  |         add.l d0,d0
    7ec8:	|  |  |         adda.l d0,a0
    7eca:	|  |  |         move.l 8(sp),d0
    7ece:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    7ed2:	|  |  |         movea.l 60(sp),a0
    7ed6:	|  |  |         move.l (a0),44(sp)
	while (a) {
    7eda:	|  |  \-------> tst.l 48(sp)
    7ede:	|  \----------- bne.w 7d8a <createPersonaAnim+0xbc>
	}

	return newP;
    7ee2:	|               move.l 28(sp),d0
}
    7ee6:	\-------------> move.l (sp)+,d2
    7ee8:	                movea.l (sp)+,a6
    7eea:	                lea 44(sp),sp
    7eee:	                rts

00007ef0 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    7ef0:	       lea -12(sp),sp
    7ef4:	       move.l a6,-(sp)
	int timesused = --orig->theSprites->timesUsed;
    7ef6:	       movea.l 20(sp),a0
    7efa:	       movea.l (a0),a0
    7efc:	       move.l 4(a0),d0
    7f00:	       subq.l #1,d0
    7f02:	       move.l d0,4(a0)
    7f06:	       move.l 4(a0),12(sp)
	
	if(!timesused)
    7f0c:	   /-- bne.s 7f1e <deleteAnim+0x2e>
	{
		forgetSpriteBank( orig->theSprites);
    7f0e:	   |   movea.l 20(sp),a0
    7f12:	   |   move.l (a0),d0
    7f14:	   |   move.l d0,-(sp)
    7f16:	   |   jsr 732c <forgetSpriteBank>
    7f1c:	   |   addq.l #4,sp
	}
	
	if (orig)
    7f1e:	   \-> tst.l 20(sp)
    7f22:	/----- beq.s 7f62 <deleteAnim+0x72>
	{
		if (orig -> numFrames) {
    7f24:	|      movea.l 20(sp),a0
    7f28:	|      move.l 8(a0),d0
    7f2c:	|  /-- beq.s 7f48 <deleteAnim+0x58>
			FreeVec( orig->frames);
    7f2e:	|  |   movea.l 20(sp),a0
    7f32:	|  |   move.l 4(a0),8(sp)
    7f38:	|  |   move.l 187a2 <SysBase>,d0
    7f3e:	|  |   movea.l d0,a6
    7f40:	|  |   movea.l 8(sp),a1
    7f44:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    7f48:	|  \-> move.l 20(sp),4(sp)
    7f4e:	|      move.l 187a2 <SysBase>,d0
    7f54:	|      movea.l d0,a6
    7f56:	|      movea.l 4(sp),a1
    7f5a:	|      jsr -690(a6)
		orig = NULL;
    7f5e:	|      clr.l 20(sp)
	}	
	
}
    7f62:	\----> nop
    7f64:	       movea.l (sp)+,a6
    7f66:	       lea 12(sp),sp
    7f6a:	       rts

00007f6c <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    7f6c:	          lea -124(sp),sp
    7f70:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    7f74:	          movea.l 152(sp),a0
    7f78:	          move.l 44(a0),d1
    7f7c:	          movea.l 152(sp),a0
    7f80:	          move.l 48(a0),d0
    7f84:	          cmp.l d1,d0
    7f86:	      /-- bne.s 7fb6 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    7f88:	      |   movea.l 152(sp),a0
    7f8c:	      |   moveq #-1,d0
    7f8e:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    7f92:	      |   movea.l 152(sp),a0
    7f96:	      |   move.l 28(a0),d0
    7f9a:	      |   movea.l 152(sp),a0
    7f9e:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    7fa2:	      |   movea.l 152(sp),a0
    7fa6:	      |   move.l 32(a0),d0
    7faa:	      |   movea.l 152(sp),a0
    7fae:	      |   move.l d0,40(a0)
    7fb2:	   /--|-- bra.w 851c <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    7fb6:	   |  \-> movea.l 18902 <currentFloor>,a0
    7fbc:	   |      move.l 16(a0),d1
    7fc0:	   |      movea.l 152(sp),a0
    7fc4:	   |      move.l 44(a0),d0
    7fc8:	   |      add.l d0,d0
    7fca:	   |      add.l d0,d0
    7fcc:	   |      movea.l d1,a0
    7fce:	   |      adda.l d0,a0
    7fd0:	   |      move.l (a0),d1
    7fd2:	   |      movea.l 152(sp),a0
    7fd6:	   |      move.l 48(a0),d0
    7fda:	   |      add.l d0,d0
    7fdc:	   |      add.l d0,d0
    7fde:	   |      movea.l d1,a0
    7fe0:	   |      adda.l d0,a0
    7fe2:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    7fe6:	   |      moveq #-1,d0
    7fe8:	   |      cmp.l 144(sp),d0
    7fec:	   |  /-- bne.s 7ff4 <doBorderStuff+0x88>
    7fee:	   |  |   clr.w d0
    7ff0:	/--|--|-- bra.w 861c <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    7ff4:	|  |  \-> movea.l 18902 <currentFloor>,a0
    7ffa:	|  |      move.l 12(a0),d1
    7ffe:	|  |      move.l 144(sp),d0
    8002:	|  |      lsl.l #3,d0
    8004:	|  |      add.l d0,d1
    8006:	|  |      movea.l 18902 <currentFloor>,a0
    800c:	|  |      movea.l 12(a0),a1
    8010:	|  |      movea.l 152(sp),a0
    8014:	|  |      move.l 44(a0),d0
    8018:	|  |      lsl.l #3,d0
    801a:	|  |      add.l a1,d0
    801c:	|  |      lea 40(sp),a0
    8020:	|  |      move.l a0,-(sp)
    8022:	|  |      lea 48(sp),a0
    8026:	|  |      move.l a0,-(sp)
    8028:	|  |      move.l d1,-(sp)
    802a:	|  |      move.l d0,-(sp)
    802c:	|  |      jsr 13da4 <getMatchingCorners>
    8032:	|  |      lea 16(sp),sp
    8036:	|  |      tst.w d0
    8038:	|  |  /-- bne.s 804e <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    803a:	|  |  |   pea 16871 <PutChar+0x127b>
    8040:	|  |  |   jsr 14b22 <KPrintF>
    8046:	|  |  |   addq.l #4,sp
            return FALSE;
    8048:	|  |  |   clr.w d0
    804a:	+--|--|-- bra.w 861c <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    804e:	|  |  \-> movea.l 152(sp),a0
    8052:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    8058:	|  |      movea.l 152(sp),a0
    805c:	|  |      move.l (a0),d0
    805e:	|  |      move.l d0,-(sp)
    8060:	|  |      jsr 14ef6 <__fixsfsi>
    8066:	|  |      addq.l #4,sp
    8068:	|  |      move.l d0,140(sp)
    806c:	|  |      movea.l 152(sp),a0
    8070:	|  |      move.l 4(a0),d0
    8074:	|  |      move.l d0,-(sp)
    8076:	|  |      jsr 14ef6 <__fixsfsi>
    807c:	|  |      addq.l #4,sp
    807e:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    8082:	|  |      movea.l 152(sp),a0
    8086:	|  |      move.l 28(a0),132(sp)
    808c:	|  |      movea.l 152(sp),a0
    8090:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    8096:	|  |      movea.l 18902 <currentFloor>,a0
    809c:	|  |      move.l 4(a0),d1
    80a0:	|  |      move.l 44(sp),d0
    80a4:	|  |      lsl.l #3,d0
    80a6:	|  |      movea.l d1,a0
    80a8:	|  |      adda.l d0,a0
    80aa:	|  |      move.l (a0),124(sp)
    80ae:	|  |      movea.l 18902 <currentFloor>,a0
    80b4:	|  |      move.l 4(a0),d1
    80b8:	|  |      move.l 44(sp),d0
    80bc:	|  |      lsl.l #3,d0
    80be:	|  |      movea.l d1,a0
    80c0:	|  |      adda.l d0,a0
    80c2:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    80c8:	|  |      movea.l 18902 <currentFloor>,a0
    80ce:	|  |      move.l 4(a0),d1
    80d2:	|  |      move.l 40(sp),d0
    80d6:	|  |      lsl.l #3,d0
    80d8:	|  |      movea.l d1,a0
    80da:	|  |      adda.l d0,a0
    80dc:	|  |      move.l (a0),116(sp)
    80e0:	|  |      movea.l 18902 <currentFloor>,a0
    80e6:	|  |      move.l 4(a0),d1
    80ea:	|  |      move.l 40(sp),d0
    80ee:	|  |      lsl.l #3,d0
    80f0:	|  |      movea.l d1,a0
    80f2:	|  |      adda.l d0,a0
    80f4:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    80fa:	|  |      move.l 140(sp),d0
    80fe:	|  |      sub.l 132(sp),d0
    8102:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    8106:	|  |      move.l 136(sp),d0
    810a:	|  |      sub.l 128(sp),d0
    810e:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    8112:	|  |      move.l 116(sp),d0
    8116:	|  |      sub.l 124(sp),d0
    811a:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    811e:	|  |      move.l 112(sp),d0
    8122:	|  |      sub.l 120(sp),d0
    8126:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    812a:	|  |      move.l 124(sp),d0
    812e:	|  |      sub.l 140(sp),d0
    8132:	|  |      move.l 104(sp),-(sp)
    8136:	|  |      move.l d0,-(sp)
    8138:	|  |      jsr 154e0 <__mulsi3>
    813e:	|  |      addq.l #8,sp
    8140:	|  |      move.l d0,d2
    8142:	|  |      move.l 120(sp),d0
    8146:	|  |      sub.l 136(sp),d0
    814a:	|  |      move.l 108(sp),-(sp)
    814e:	|  |      move.l d0,-(sp)
    8150:	|  |      jsr 154e0 <__mulsi3>
    8156:	|  |      addq.l #8,sp
    8158:	|  |      move.l d2,d1
    815a:	|  |      sub.l d0,d1
    815c:	|  |      move.l d1,-(sp)
    815e:	|  |      jsr 14f1e <__floatsidf>
    8164:	|  |      addq.l #4,sp
    8166:	|  |      move.l d0,32(sp)
    816a:	|  |      move.l d1,36(sp)
    816e:	|  |      move.l 32(sp),88(sp)
    8174:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    817a:	|  |      move.l 96(sp),-(sp)
    817e:	|  |      move.l 112(sp),-(sp)
    8182:	|  |      jsr 154e0 <__mulsi3>
    8188:	|  |      addq.l #8,sp
    818a:	|  |      move.l d0,d2
    818c:	|  |      move.l 100(sp),-(sp)
    8190:	|  |      move.l 108(sp),-(sp)
    8194:	|  |      jsr 154e0 <__mulsi3>
    819a:	|  |      addq.l #8,sp
    819c:	|  |      move.l d2,d1
    819e:	|  |      sub.l d0,d1
    81a0:	|  |      move.l d1,-(sp)
    81a2:	|  |      jsr 14f1e <__floatsidf>
    81a8:	|  |      addq.l #4,sp
    81aa:	|  |      move.l d1,-(sp)
    81ac:	|  |      move.l d0,-(sp)
    81ae:	|  |      move.l 100(sp),-(sp)
    81b2:	|  |      move.l 100(sp),-(sp)
    81b6:	|  |      jsr 14da8 <__divdf3>
    81bc:	|  |      lea 16(sp),sp
    81c0:	|  |      move.l d0,24(sp)
    81c4:	|  |      move.l d1,28(sp)
    81c8:	|  |      move.l 24(sp),88(sp)
    81ce:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    81d4:	|  |      clr.l -(sp)
    81d6:	|  |      clr.l -(sp)
    81d8:	|  |      move.l 100(sp),-(sp)
    81dc:	|  |      move.l 100(sp),-(sp)
    81e0:	|  |      jsr 1507c <__gtdf2>
    81e6:	|  |      lea 16(sp),sp
    81ea:	|  |      tst.l d0
    81ec:	|  |  /-- ble.w 82c4 <doBorderStuff+0x358>
    81f0:	|  |  |   clr.l -(sp)
    81f2:	|  |  |   move.l #1072693248,-(sp)
    81f8:	|  |  |   move.l 100(sp),-(sp)
    81fc:	|  |  |   move.l 100(sp),-(sp)
    8200:	|  |  |   jsr 15136 <__ltdf2>
    8206:	|  |  |   lea 16(sp),sp
    820a:	|  |  |   tst.l d0
    820c:	|  |  +-- bge.w 82c4 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    8210:	|  |  |   move.l 124(sp),-(sp)
    8214:	|  |  |   jsr 14f1e <__floatsidf>
    821a:	|  |  |   addq.l #4,sp
    821c:	|  |  |   move.l d0,d2
    821e:	|  |  |   move.l d1,d3
    8220:	|  |  |   move.l 100(sp),-(sp)
    8224:	|  |  |   jsr 14f1e <__floatsidf>
    822a:	|  |  |   addq.l #4,sp
    822c:	|  |  |   move.l 92(sp),-(sp)
    8230:	|  |  |   move.l 92(sp),-(sp)
    8234:	|  |  |   move.l d1,-(sp)
    8236:	|  |  |   move.l d0,-(sp)
    8238:	|  |  |   jsr 14fae <__muldf3>
    823e:	|  |  |   lea 16(sp),sp
    8242:	|  |  |   move.l d1,-(sp)
    8244:	|  |  |   move.l d0,-(sp)
    8246:	|  |  |   move.l d3,-(sp)
    8248:	|  |  |   move.l d2,-(sp)
    824a:	|  |  |   jsr 14d46 <__adddf3>
    8250:	|  |  |   lea 16(sp),sp
    8254:	|  |  |   move.l d1,-(sp)
    8256:	|  |  |   move.l d0,-(sp)
    8258:	|  |  |   jsr 14eb6 <__fixdfsi>
    825e:	|  |  |   addq.l #8,sp
    8260:	|  |  |   movea.l 152(sp),a0
    8264:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    8268:	|  |  |   move.l 120(sp),-(sp)
    826c:	|  |  |   jsr 14f1e <__floatsidf>
    8272:	|  |  |   addq.l #4,sp
    8274:	|  |  |   move.l d0,d2
    8276:	|  |  |   move.l d1,d3
    8278:	|  |  |   move.l 96(sp),-(sp)
    827c:	|  |  |   jsr 14f1e <__floatsidf>
    8282:	|  |  |   addq.l #4,sp
    8284:	|  |  |   move.l 92(sp),-(sp)
    8288:	|  |  |   move.l 92(sp),-(sp)
    828c:	|  |  |   move.l d1,-(sp)
    828e:	|  |  |   move.l d0,-(sp)
    8290:	|  |  |   jsr 14fae <__muldf3>
    8296:	|  |  |   lea 16(sp),sp
    829a:	|  |  |   move.l d1,-(sp)
    829c:	|  |  |   move.l d0,-(sp)
    829e:	|  |  |   move.l d3,-(sp)
    82a0:	|  |  |   move.l d2,-(sp)
    82a2:	|  |  |   jsr 14d46 <__adddf3>
    82a8:	|  |  |   lea 16(sp),sp
    82ac:	|  |  |   move.l d1,-(sp)
    82ae:	|  |  |   move.l d0,-(sp)
    82b0:	|  |  |   jsr 14eb6 <__fixdfsi>
    82b6:	|  |  |   addq.l #8,sp
    82b8:	|  |  |   movea.l 152(sp),a0
    82bc:	|  |  |   move.l d0,40(a0)
    82c0:	|  +--|-- bra.w 851c <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    82c4:	|  |  \-> move.l 140(sp),d0
    82c8:	|  |      sub.l 124(sp),d0
    82cc:	|  |      move.l d0,84(sp)
    82d0:	|  |      move.l 140(sp),d0
    82d4:	|  |      sub.l 116(sp),d0
    82d8:	|  |      move.l d0,80(sp)
    82dc:	|  |      move.l 132(sp),d0
    82e0:	|  |      sub.l 124(sp),d0
    82e4:	|  |      move.l d0,76(sp)
    82e8:	|  |      move.l 132(sp),d0
    82ec:	|  |      sub.l 116(sp),d0
    82f0:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    82f4:	|  |      move.l 136(sp),d0
    82f8:	|  |      sub.l 120(sp),d0
    82fc:	|  |      move.l d0,68(sp)
    8300:	|  |      move.l 136(sp),d0
    8304:	|  |      sub.l 112(sp),d0
    8308:	|  |      move.l d0,64(sp)
    830c:	|  |      move.l 128(sp),d0
    8310:	|  |      sub.l 120(sp),d0
    8314:	|  |      move.l d0,60(sp)
    8318:	|  |      move.l 128(sp),d0
    831c:	|  |      sub.l 112(sp),d0
    8320:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    8324:	|  |      move.l 84(sp),-(sp)
    8328:	|  |      move.l 88(sp),-(sp)
    832c:	|  |      jsr 154e0 <__mulsi3>
    8332:	|  |      addq.l #8,sp
    8334:	|  |      move.l d0,84(sp)
    8338:	|  |      move.l 80(sp),-(sp)
    833c:	|  |      move.l 84(sp),-(sp)
    8340:	|  |      jsr 154e0 <__mulsi3>
    8346:	|  |      addq.l #8,sp
    8348:	|  |      move.l d0,80(sp)
    834c:	|  |      move.l 76(sp),-(sp)
    8350:	|  |      move.l 80(sp),-(sp)
    8354:	|  |      jsr 154e0 <__mulsi3>
    835a:	|  |      addq.l #8,sp
    835c:	|  |      move.l d0,76(sp)
    8360:	|  |      move.l 72(sp),-(sp)
    8364:	|  |      move.l 76(sp),-(sp)
    8368:	|  |      jsr 154e0 <__mulsi3>
    836e:	|  |      addq.l #8,sp
    8370:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    8374:	|  |      move.l 68(sp),-(sp)
    8378:	|  |      move.l 72(sp),-(sp)
    837c:	|  |      jsr 154e0 <__mulsi3>
    8382:	|  |      addq.l #8,sp
    8384:	|  |      move.l d0,68(sp)
    8388:	|  |      move.l 64(sp),-(sp)
    838c:	|  |      move.l 68(sp),-(sp)
    8390:	|  |      jsr 154e0 <__mulsi3>
    8396:	|  |      addq.l #8,sp
    8398:	|  |      move.l d0,64(sp)
    839c:	|  |      move.l 60(sp),-(sp)
    83a0:	|  |      move.l 64(sp),-(sp)
    83a4:	|  |      jsr 154e0 <__mulsi3>
    83aa:	|  |      addq.l #8,sp
    83ac:	|  |      move.l d0,60(sp)
    83b0:	|  |      move.l 56(sp),-(sp)
    83b4:	|  |      move.l 60(sp),-(sp)
    83b8:	|  |      jsr 154e0 <__mulsi3>
    83be:	|  |      addq.l #8,sp
    83c0:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    83c4:	|  |      move.l 84(sp),-(sp)
    83c8:	|  |      jsr 14f1e <__floatsidf>
    83ce:	|  |      addq.l #4,sp
    83d0:	|  |      move.l d0,d2
    83d2:	|  |      move.l d1,d3
    83d4:	|  |      move.l 68(sp),-(sp)
    83d8:	|  |      jsr 14f1e <__floatsidf>
    83de:	|  |      addq.l #4,sp
    83e0:	|  |      move.l d1,-(sp)
    83e2:	|  |      move.l d0,-(sp)
    83e4:	|  |      move.l d3,-(sp)
    83e6:	|  |      move.l d2,-(sp)
    83e8:	|  |      jsr 14d46 <__adddf3>
    83ee:	|  |      lea 16(sp),sp
    83f2:	|  |      move.l d1,-(sp)
    83f4:	|  |      move.l d0,-(sp)
    83f6:	|  |      jsr 15496 <sqrt>
    83fc:	|  |      addq.l #8,sp
    83fe:	|  |      move.l d0,d2
    8400:	|  |      move.l d1,d3
    8402:	|  |      move.l 76(sp),-(sp)
    8406:	|  |      jsr 14f1e <__floatsidf>
    840c:	|  |      addq.l #4,sp
    840e:	|  |      move.l d0,d4
    8410:	|  |      move.l d1,d5
    8412:	|  |      move.l 60(sp),-(sp)
    8416:	|  |      jsr 14f1e <__floatsidf>
    841c:	|  |      addq.l #4,sp
    841e:	|  |      move.l d1,-(sp)
    8420:	|  |      move.l d0,-(sp)
    8422:	|  |      move.l d5,-(sp)
    8424:	|  |      move.l d4,-(sp)
    8426:	|  |      jsr 14d46 <__adddf3>
    842c:	|  |      lea 16(sp),sp
    8430:	|  |      move.l d1,-(sp)
    8432:	|  |      move.l d0,-(sp)
    8434:	|  |      jsr 15496 <sqrt>
    843a:	|  |      addq.l #8,sp
    843c:	|  |      move.l d1,-(sp)
    843e:	|  |      move.l d0,-(sp)
    8440:	|  |      move.l d3,-(sp)
    8442:	|  |      move.l d2,-(sp)
    8444:	|  |      jsr 14d46 <__adddf3>
    844a:	|  |      lea 16(sp),sp
    844e:	|  |      move.l d0,d2
    8450:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    8452:	|  |      move.l 80(sp),-(sp)
    8456:	|  |      jsr 14f1e <__floatsidf>
    845c:	|  |      addq.l #4,sp
    845e:	|  |      move.l d0,d4
    8460:	|  |      move.l d1,d5
    8462:	|  |      move.l 64(sp),-(sp)
    8466:	|  |      jsr 14f1e <__floatsidf>
    846c:	|  |      addq.l #4,sp
    846e:	|  |      move.l d1,-(sp)
    8470:	|  |      move.l d0,-(sp)
    8472:	|  |      move.l d5,-(sp)
    8474:	|  |      move.l d4,-(sp)
    8476:	|  |      jsr 14d46 <__adddf3>
    847c:	|  |      lea 16(sp),sp
    8480:	|  |      move.l d1,-(sp)
    8482:	|  |      move.l d0,-(sp)
    8484:	|  |      jsr 15496 <sqrt>
    848a:	|  |      addq.l #8,sp
    848c:	|  |      move.l d0,d4
    848e:	|  |      move.l d1,d5
    8490:	|  |      move.l 72(sp),-(sp)
    8494:	|  |      jsr 14f1e <__floatsidf>
    849a:	|  |      addq.l #4,sp
    849c:	|  |      move.l d0,d6
    849e:	|  |      move.l d1,d7
    84a0:	|  |      move.l 56(sp),-(sp)
    84a4:	|  |      jsr 14f1e <__floatsidf>
    84aa:	|  |      addq.l #4,sp
    84ac:	|  |      move.l d1,-(sp)
    84ae:	|  |      move.l d0,-(sp)
    84b0:	|  |      move.l d7,-(sp)
    84b2:	|  |      move.l d6,-(sp)
    84b4:	|  |      jsr 14d46 <__adddf3>
    84ba:	|  |      lea 16(sp),sp
    84be:	|  |      move.l d1,-(sp)
    84c0:	|  |      move.l d0,-(sp)
    84c2:	|  |      jsr 15496 <sqrt>
    84c8:	|  |      addq.l #8,sp
    84ca:	|  |      move.l d1,-(sp)
    84cc:	|  |      move.l d0,-(sp)
    84ce:	|  |      move.l d5,-(sp)
    84d0:	|  |      move.l d4,-(sp)
    84d2:	|  |      jsr 14d46 <__adddf3>
    84d8:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    84dc:	|  |      move.l d1,-(sp)
    84de:	|  |      move.l d0,-(sp)
    84e0:	|  |      move.l d3,-(sp)
    84e2:	|  |      move.l d2,-(sp)
    84e4:	|  |      jsr 15136 <__ltdf2>
    84ea:	|  |      lea 16(sp),sp
    84ee:	|  |      tst.l d0
    84f0:	|  |  /-- bge.s 8508 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    84f2:	|  |  |   movea.l 152(sp),a0
    84f6:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    84fc:	|  |  |   movea.l 152(sp),a0
    8500:	|  |  |   move.l 120(sp),40(a0)
    8506:	|  +--|-- bra.s 851c <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    8508:	|  |  \-> movea.l 152(sp),a0
    850c:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    8512:	|  |      movea.l 152(sp),a0
    8516:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    851c:	|  \----> movea.l 152(sp),a0
    8520:	|         move.l 40(a0),d0
    8524:	|         move.l d0,-(sp)
    8526:	|         jsr 14f5e <__floatsisf>
    852c:	|         addq.l #4,sp
    852e:	|         move.l d0,d1
    8530:	|         movea.l 152(sp),a0
    8534:	|         move.l 4(a0),d0
    8538:	|         move.l d0,-(sp)
    853a:	|         move.l d1,-(sp)
    853c:	|         jsr 15252 <__subsf3>
    8542:	|         addq.l #8,sp
    8544:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    8548:	|         movea.l 152(sp),a0
    854c:	|         move.l (a0),d2
    854e:	|         movea.l 152(sp),a0
    8552:	|         move.l 36(a0),d0
    8556:	|         move.l d0,-(sp)
    8558:	|         jsr 14f5e <__floatsisf>
    855e:	|         addq.l #4,sp
    8560:	|         move.l d0,-(sp)
    8562:	|         move.l d2,-(sp)
    8564:	|         jsr 15252 <__subsf3>
    856a:	|         addq.l #8,sp
    856c:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    8570:	|         clr.l -(sp)
    8572:	|         move.l 52(sp),-(sp)
    8576:	|         jsr 151ba <__nesf2>
    857c:	|         addq.l #8,sp
    857e:	|         tst.l d0
    8580:	|     /-- bne.s 8594 <doBorderStuff+0x628>
    8582:	|     |   clr.l -(sp)
    8584:	|     |   move.l 56(sp),-(sp)
    8588:	|     |   jsr 151ba <__nesf2>
    858e:	|     |   addq.l #8,sp
    8590:	|     |   tst.l d0
    8592:	|  /--|-- beq.s 860a <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    8594:	|  |  \-> move.l 52(sp),d0
    8598:	|  |      move.l d0,-(sp)
    859a:	|  |      move.l d0,-(sp)
    859c:	|  |      jsr 14d10 <__addsf3>
    85a2:	|  |      addq.l #8,sp
    85a4:	|  |      move.l d0,-(sp)
    85a6:	|  |      move.l 52(sp),-(sp)
    85aa:	|  |      jsr 152e6 <atan2f>
    85b0:	|  |      addq.l #8,sp
    85b2:	|  |      move.l d0,-(sp)
    85b4:	|  |      jsr 14e76 <__extendsfdf2>
    85ba:	|  |      addq.l #4,sp
    85bc:	|  |      move.l #-1540411785,-(sp)
    85c2:	|  |      move.l #1078765033,-(sp)
    85c8:	|  |      move.l d1,-(sp)
    85ca:	|  |      move.l d0,-(sp)
    85cc:	|  |      jsr 14fae <__muldf3>
    85d2:	|  |      lea 16(sp),sp
    85d6:	|  |      clr.l -(sp)
    85d8:	|  |      move.l #1080459264,-(sp)
    85de:	|  |      move.l d1,-(sp)
    85e0:	|  |      move.l d0,-(sp)
    85e2:	|  |      jsr 14d46 <__adddf3>
    85e8:	|  |      lea 16(sp),sp
    85ec:	|  |      move.l d1,-(sp)
    85ee:	|  |      move.l d0,-(sp)
    85f0:	|  |      jsr 14eb6 <__fixdfsi>
    85f6:	|  |      addq.l #8,sp
    85f8:	|  |      movea.l 152(sp),a0
    85fc:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    8600:	|  |      movea.l 152(sp),a0
    8604:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    860a:	|  \----> pea 1 <_start+0x1>
    860e:	|         move.l 156(sp),-(sp)
    8612:	|         jsr 6826 <setFrames>
    8618:	|         addq.l #8,sp
    return TRUE;
    861a:	|         moveq #1,d0
}
    861c:	\-------> movem.l (sp)+,d2-d7
    8620:	          lea 124(sp),sp
    8624:	          rts

00008626 <drawPeople>:

void drawPeople () {
    8626:	                lea -24(sp),sp
    862a:	                move.l d2,-(sp)
	shufflePeople ();
    862c:	                jsr a022 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    8632:	                move.l 1885a <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    863a:	                clr.l 20(sp)
	overRegion = NULL;
    863e:	                clr.l 188fe <overRegion>

	while (thisPerson) {
    8644:	   /----------- bra.w 8b66 <drawPeople+0x540>
		if (thisPerson -> show) {
    8648:	/--|----------> movea.l 24(sp),a0
    864c:	|  |            move.w 92(a0),d0
    8650:	|  |  /-------- beq.w 891a <drawPeople+0x2f4>
			myAnim = thisPerson -> myAnim;
    8654:	|  |  |         movea.l 24(sp),a0
    8658:	|  |  |         move.l 60(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    865e:	|  |  |         movea.l 24(sp),a0
    8662:	|  |  |         move.l 64(a0),d0
    8666:	|  |  |         cmp.l 20(sp),d0
    866a:	|  |  |  /----- beq.w 882e <drawPeople+0x208>
				thisPerson -> lastUsedAnim = myAnim;
    866e:	|  |  |  |      movea.l 24(sp),a0
    8672:	|  |  |  |      move.l 20(sp),64(a0)
				thisPerson -> frameNum = 0;
    8678:	|  |  |  |      movea.l 24(sp),a0
    867c:	|  |  |  |      clr.l 72(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    8680:	|  |  |  |      movea.l 20(sp),a0
    8684:	|  |  |  |      movea.l 4(a0),a0
    8688:	|  |  |  |      move.l 4(a0),d0
    868c:	|  |  |  |      movea.l 24(sp),a0
    8690:	|  |  |  |      move.l d0,76(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    8694:	|  |  |  |      movea.l 20(sp),a0
    8698:	|  |  |  |      movea.l 4(a0),a1
    869c:	|  |  |  |      movea.l 24(sp),a0
    86a0:	|  |  |  |      move.l 72(a0),d0
    86a4:	|  |  |  |      move.l d0,d1
    86a6:	|  |  |  |      move.l d1,d0
    86a8:	|  |  |  |      add.l d0,d0
    86aa:	|  |  |  |      add.l d1,d0
    86ac:	|  |  |  |      add.l d0,d0
    86ae:	|  |  |  |      add.l d0,d0
    86b0:	|  |  |  |      lea (0,a1,d0.l),a0
    86b4:	|  |  |  |      move.l 8(a0),d0
    86b8:	|  |  |  |  /-- ble.w 875a <drawPeople+0x134>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    86bc:	|  |  |  |  |   movea.l 20(sp),a0
    86c0:	|  |  |  |  |   movea.l 4(a0),a1
    86c4:	|  |  |  |  |   movea.l 24(sp),a0
    86c8:	|  |  |  |  |   move.l 72(a0),d0
    86cc:	|  |  |  |  |   move.l d0,d1
    86ce:	|  |  |  |  |   move.l d1,d0
    86d0:	|  |  |  |  |   add.l d0,d0
    86d2:	|  |  |  |  |   add.l d1,d0
    86d4:	|  |  |  |  |   add.l d0,d0
    86d6:	|  |  |  |  |   add.l d0,d0
    86d8:	|  |  |  |  |   lea (0,a1,d0.l),a0
    86dc:	|  |  |  |  |   move.l 8(a0),d0
    86e0:	|  |  |  |  |   clr.l -(sp)
    86e2:	|  |  |  |  |   move.l d0,-(sp)
    86e4:	|  |  |  |  |   jsr b5e6 <startSound>
    86ea:	|  |  |  |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    86ec:	|  |  |  |  |   movea.l 24(sp),a0
    86f0:	|  |  |  |  |   move.l 72(a0),d0
    86f4:	|  |  |  |  |   addq.l #1,d0
    86f6:	|  |  |  |  |   movea.l 24(sp),a0
    86fa:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    86fe:	|  |  |  |  |   movea.l 24(sp),a0
    8702:	|  |  |  |  |   move.l 72(a0),d0
    8706:	|  |  |  |  |   movea.l 24(sp),a0
    870a:	|  |  |  |  |   movea.l 60(a0),a0
    870e:	|  |  |  |  |   move.l 8(a0),d1
    8712:	|  |  |  |  |   move.l d1,-(sp)
    8714:	|  |  |  |  |   move.l d0,-(sp)
    8716:	|  |  |  |  |   jsr 1558c <__modsi3>
    871c:	|  |  |  |  |   addq.l #8,sp
    871e:	|  |  |  |  |   movea.l 24(sp),a0
    8722:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    8726:	|  |  |  |  |   movea.l 24(sp),a0
    872a:	|  |  |  |  |   movea.l 60(a0),a0
    872e:	|  |  |  |  |   movea.l 4(a0),a1
    8732:	|  |  |  |  |   movea.l 24(sp),a0
    8736:	|  |  |  |  |   move.l 72(a0),d0
    873a:	|  |  |  |  |   move.l d0,d1
    873c:	|  |  |  |  |   move.l d1,d0
    873e:	|  |  |  |  |   add.l d0,d0
    8740:	|  |  |  |  |   add.l d1,d0
    8742:	|  |  |  |  |   add.l d0,d0
    8744:	|  |  |  |  |   add.l d0,d0
    8746:	|  |  |  |  |   lea (0,a1,d0.l),a0
    874a:	|  |  |  |  |   move.l 4(a0),d0
    874e:	|  |  |  |  |   movea.l 24(sp),a0
    8752:	|  |  |  |  |   move.l d0,76(a0)
    8756:	|  |  |  +--|-- bra.w 882e <drawPeople+0x208>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    875a:	|  |  |  |  \-> movea.l 20(sp),a0
    875e:	|  |  |  |      movea.l 4(a0),a1
    8762:	|  |  |  |      movea.l 24(sp),a0
    8766:	|  |  |  |      move.l 72(a0),d0
    876a:	|  |  |  |      move.l d0,d1
    876c:	|  |  |  |      move.l d1,d0
    876e:	|  |  |  |      add.l d0,d0
    8770:	|  |  |  |      add.l d1,d0
    8772:	|  |  |  |      add.l d0,d0
    8774:	|  |  |  |      add.l d0,d0
    8776:	|  |  |  |      lea (0,a1,d0.l),a0
    877a:	|  |  |  |      move.l 8(a0),d0
    877e:	|  |  |  +----- beq.w 882e <drawPeople+0x208>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    8782:	|  |  |  |      movea.l 18772 <noStack>,a1
    8788:	|  |  |  |      movea.l 20(sp),a0
    878c:	|  |  |  |      move.l 4(a0),d2
    8790:	|  |  |  |      movea.l 24(sp),a0
    8794:	|  |  |  |      move.l 72(a0),d0
    8798:	|  |  |  |      move.l d0,d1
    879a:	|  |  |  |      move.l d1,d0
    879c:	|  |  |  |      add.l d0,d0
    879e:	|  |  |  |      add.l d1,d0
    87a0:	|  |  |  |      add.l d0,d0
    87a2:	|  |  |  |      add.l d0,d0
    87a4:	|  |  |  |      movea.l d2,a0
    87a6:	|  |  |  |      adda.l d0,a0
    87a8:	|  |  |  |      move.l 8(a0),d0
    87ac:	|  |  |  |      neg.l d0
    87ae:	|  |  |  |      pea 1 <_start+0x1>
    87b2:	|  |  |  |      move.l a1,-(sp)
    87b4:	|  |  |  |      clr.l -(sp)
    87b6:	|  |  |  |      clr.l -(sp)
    87b8:	|  |  |  |      move.l d0,-(sp)
    87ba:	|  |  |  |      jsr 51ca <startNewFunctionNum>
    87c0:	|  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    87c4:	|  |  |  |      movea.l 24(sp),a0
    87c8:	|  |  |  |      move.l 72(a0),d0
    87cc:	|  |  |  |      addq.l #1,d0
    87ce:	|  |  |  |      movea.l 24(sp),a0
    87d2:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    87d6:	|  |  |  |      movea.l 24(sp),a0
    87da:	|  |  |  |      move.l 72(a0),d0
    87de:	|  |  |  |      movea.l 24(sp),a0
    87e2:	|  |  |  |      movea.l 60(a0),a0
    87e6:	|  |  |  |      move.l 8(a0),d1
    87ea:	|  |  |  |      move.l d1,-(sp)
    87ec:	|  |  |  |      move.l d0,-(sp)
    87ee:	|  |  |  |      jsr 1558c <__modsi3>
    87f4:	|  |  |  |      addq.l #8,sp
    87f6:	|  |  |  |      movea.l 24(sp),a0
    87fa:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    87fe:	|  |  |  |      movea.l 24(sp),a0
    8802:	|  |  |  |      movea.l 60(a0),a0
    8806:	|  |  |  |      movea.l 4(a0),a1
    880a:	|  |  |  |      movea.l 24(sp),a0
    880e:	|  |  |  |      move.l 72(a0),d0
    8812:	|  |  |  |      move.l d0,d1
    8814:	|  |  |  |      move.l d1,d0
    8816:	|  |  |  |      add.l d0,d0
    8818:	|  |  |  |      add.l d1,d0
    881a:	|  |  |  |      add.l d0,d0
    881c:	|  |  |  |      add.l d0,d0
    881e:	|  |  |  |      lea (0,a1,d0.l),a0
    8822:	|  |  |  |      move.l 4(a0),d0
    8826:	|  |  |  |      movea.l 24(sp),a0
    882a:	|  |  |  |      move.l d0,76(a0)
				}
			}
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    882e:	|  |  |  \----> movea.l 20(sp),a0
    8832:	|  |  |         movea.l 4(a0),a1
    8836:	|  |  |         movea.l 24(sp),a0
    883a:	|  |  |         move.l 72(a0),d0
    883e:	|  |  |         move.l d0,d1
    8840:	|  |  |         move.l d1,d0
    8842:	|  |  |         add.l d0,d0
    8844:	|  |  |         add.l d1,d0
    8846:	|  |  |         add.l d0,d0
    8848:	|  |  |         add.l d0,d0
    884a:	|  |  |         lea (0,a1,d0.l),a0
    884e:	|  |  |         move.l (a0),8(sp)
			int m = fNumSign < 0;
    8852:	|  |  |         move.l 8(sp),d0
    8856:	|  |  |         add.l d0,d0
    8858:	|  |  |         subx.l d0,d0
    885a:	|  |  |         neg.l d0
    885c:	|  |  |         move.b d0,d0
    885e:	|  |  |         move.b d0,d0
    8860:	|  |  |         andi.l #255,d0
    8866:	|  |  |         move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    886a:	|  |  |         move.l 8(sp),-(sp)
    886e:	|  |  |         jsr 7804 <TF_abs>
    8874:	|  |  |         addq.l #4,sp
    8876:	|  |  |         move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    887a:	|  |  |         movea.l 20(sp),a0
    887e:	|  |  |         movea.l (a0),a0
    8880:	|  |  |         move.l 8(a0),d0
    8884:	|  |  |         cmp.l 12(sp),d0
    8888:	|  |  |     /-- bgt.s 8898 <drawPeople+0x272>
				fNum = 0;
    888a:	|  |  |     |   clr.l 12(sp)
				m = 2 - m;
    888e:	|  |  |     |   moveq #2,d0
    8890:	|  |  |     |   sub.l 16(sp),d0
    8894:	|  |  |     |   move.l d0,16(sp)
			}
			if (m != 2) {
    8898:	|  |  |     \-> moveq #2,d0
    889a:	|  |  |         cmp.l 16(sp),d0
    889e:	|  |  +-------- beq.s 891a <drawPeople+0x2f4>
				BOOL r = FALSE;
    88a0:	|  |  |         clr.w 6(sp)
				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    88a4:	|  |  |         move.l 16(sp),d0
    88a8:	|  |  |         movea.w d0,a0
    88aa:	|  |  |         movea.l 20(sp),a1
    88ae:	|  |  |         movea.l (a1),a1
    88b0:	|  |  |         movea.l 16(a1),a1
    88b4:	|  |  |         move.l 12(sp),d1
    88b8:	|  |  |         move.l d1,d0
    88ba:	|  |  |         lsl.l #3,d0
    88bc:	|  |  |         sub.l d1,d0
    88be:	|  |  |         add.l d0,d0
    88c0:	|  |  |         add.l d0,d0
    88c2:	|  |  |         add.l a1,d0
    88c4:	|  |  |         move.l a0,-(sp)
    88c6:	|  |  |         move.l 28(sp),-(sp)
    88ca:	|  |  |         move.l d0,-(sp)
    88cc:	|  |  |         jsr 7764 <scaleSprite>
    88d2:	|  |  |         lea 12(sp),sp
    88d6:	|  |  |         move.w d0,6(sp)
				if (r) {
    88da:	|  |  +-------- beq.s 891a <drawPeople+0x2f4>
					if (thisPerson -> thisType -> screenName[0]) {
    88dc:	|  |  |         movea.l 24(sp),a0
    88e0:	|  |  |         movea.l 102(a0),a0
    88e4:	|  |  |         movea.l (a0),a0
    88e6:	|  |  |         move.b (a0),d0
    88e8:	|  |  +-------- beq.s 891a <drawPeople+0x2f4>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    88ea:	|  |  |         move.l 1887a <personRegion+0x1c>,d1
    88f0:	|  |  |         movea.l 24(sp),a0
    88f4:	|  |  |         move.l 102(a0),d0
    88f8:	|  |  |         cmp.l d1,d0
    88fa:	|  |  |     /-- beq.s 8902 <drawPeople+0x2dc>
    88fc:	|  |  |     |   clr.l 1876a <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    8902:	|  |  |     \-> movea.l 24(sp),a0
    8906:	|  |  |         move.l 102(a0),d0
    890a:	|  |  |         move.l d0,1887a <personRegion+0x1c>
						overRegion = & personRegion;
    8910:	|  |  |         move.l #100446,188fe <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    891a:	|  |  \-------> movea.l 24(sp),a0
    891e:	|  |            move.l 76(a0),d0
    8922:	|  |            subq.l #1,d0
    8924:	|  |            movea.l 24(sp),a0
    8928:	|  |            move.l d0,76(a0)
    892c:	|  |            movea.l 24(sp),a0
    8930:	|  |            move.l 76(a0),d0
    8934:	|  |     /----- bne.w 8b5c <drawPeople+0x536>
			thisPerson -> frameNum ++;
    8938:	|  |     |      movea.l 24(sp),a0
    893c:	|  |     |      move.l 72(a0),d0
    8940:	|  |     |      addq.l #1,d0
    8942:	|  |     |      movea.l 24(sp),a0
    8946:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    894a:	|  |     |      movea.l 24(sp),a0
    894e:	|  |     |      move.l 72(a0),d0
    8952:	|  |     |      movea.l 24(sp),a0
    8956:	|  |     |      movea.l 60(a0),a0
    895a:	|  |     |      move.l 8(a0),d1
    895e:	|  |     |      move.l d1,-(sp)
    8960:	|  |     |      move.l d0,-(sp)
    8962:	|  |     |      jsr 1558c <__modsi3>
    8968:	|  |     |      addq.l #8,sp
    896a:	|  |     |      movea.l 24(sp),a0
    896e:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    8972:	|  |     |      movea.l 24(sp),a0
    8976:	|  |     |      movea.l 60(a0),a0
    897a:	|  |     |      movea.l 4(a0),a1
    897e:	|  |     |      movea.l 24(sp),a0
    8982:	|  |     |      move.l 72(a0),d0
    8986:	|  |     |      move.l d0,d1
    8988:	|  |     |      move.l d1,d0
    898a:	|  |     |      add.l d0,d0
    898c:	|  |     |      add.l d1,d0
    898e:	|  |     |      add.l d0,d0
    8990:	|  |     |      add.l d0,d0
    8992:	|  |     |      lea (0,a1,d0.l),a0
    8996:	|  |     |      move.l 4(a0),d0
    899a:	|  |     |      movea.l 24(sp),a0
    899e:	|  |     |      move.l d0,76(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    89a2:	|  |     |      movea.l 24(sp),a0
    89a6:	|  |     |      move.w 92(a0),d0
    89aa:	|  |     +----- beq.w 8b5c <drawPeople+0x536>
    89ae:	|  |     |      tst.l 20(sp)
    89b2:	|  |     +----- beq.w 8b5c <drawPeople+0x536>
    89b6:	|  |     |      movea.l 20(sp),a0
    89ba:	|  |     |      move.l 4(a0),d0
    89be:	|  |     +----- beq.w 8b5c <drawPeople+0x536>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    89c2:	|  |     |      movea.l 20(sp),a0
    89c6:	|  |     |      movea.l 4(a0),a1
    89ca:	|  |     |      movea.l 24(sp),a0
    89ce:	|  |     |      move.l 72(a0),d0
    89d2:	|  |     |      move.l d0,d1
    89d4:	|  |     |      move.l d1,d0
    89d6:	|  |     |      add.l d0,d0
    89d8:	|  |     |      add.l d1,d0
    89da:	|  |     |      add.l d0,d0
    89dc:	|  |     |      add.l d0,d0
    89de:	|  |     |      lea (0,a1,d0.l),a0
    89e2:	|  |     |      move.l 8(a0),d0
    89e6:	|  |     |  /-- ble.w 8a88 <drawPeople+0x462>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    89ea:	|  |     |  |   movea.l 20(sp),a0
    89ee:	|  |     |  |   movea.l 4(a0),a1
    89f2:	|  |     |  |   movea.l 24(sp),a0
    89f6:	|  |     |  |   move.l 72(a0),d0
    89fa:	|  |     |  |   move.l d0,d1
    89fc:	|  |     |  |   move.l d1,d0
    89fe:	|  |     |  |   add.l d0,d0
    8a00:	|  |     |  |   add.l d1,d0
    8a02:	|  |     |  |   add.l d0,d0
    8a04:	|  |     |  |   add.l d0,d0
    8a06:	|  |     |  |   lea (0,a1,d0.l),a0
    8a0a:	|  |     |  |   move.l 8(a0),d0
    8a0e:	|  |     |  |   clr.l -(sp)
    8a10:	|  |     |  |   move.l d0,-(sp)
    8a12:	|  |     |  |   jsr b5e6 <startSound>
    8a18:	|  |     |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    8a1a:	|  |     |  |   movea.l 24(sp),a0
    8a1e:	|  |     |  |   move.l 72(a0),d0
    8a22:	|  |     |  |   addq.l #1,d0
    8a24:	|  |     |  |   movea.l 24(sp),a0
    8a28:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    8a2c:	|  |     |  |   movea.l 24(sp),a0
    8a30:	|  |     |  |   move.l 72(a0),d0
    8a34:	|  |     |  |   movea.l 24(sp),a0
    8a38:	|  |     |  |   movea.l 60(a0),a0
    8a3c:	|  |     |  |   move.l 8(a0),d1
    8a40:	|  |     |  |   move.l d1,-(sp)
    8a42:	|  |     |  |   move.l d0,-(sp)
    8a44:	|  |     |  |   jsr 1558c <__modsi3>
    8a4a:	|  |     |  |   addq.l #8,sp
    8a4c:	|  |     |  |   movea.l 24(sp),a0
    8a50:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    8a54:	|  |     |  |   movea.l 24(sp),a0
    8a58:	|  |     |  |   movea.l 60(a0),a0
    8a5c:	|  |     |  |   movea.l 4(a0),a1
    8a60:	|  |     |  |   movea.l 24(sp),a0
    8a64:	|  |     |  |   move.l 72(a0),d0
    8a68:	|  |     |  |   move.l d0,d1
    8a6a:	|  |     |  |   move.l d1,d0
    8a6c:	|  |     |  |   add.l d0,d0
    8a6e:	|  |     |  |   add.l d1,d0
    8a70:	|  |     |  |   add.l d0,d0
    8a72:	|  |     |  |   add.l d0,d0
    8a74:	|  |     |  |   lea (0,a1,d0.l),a0
    8a78:	|  |     |  |   move.l 4(a0),d0
    8a7c:	|  |     |  |   movea.l 24(sp),a0
    8a80:	|  |     |  |   move.l d0,76(a0)
    8a84:	|  |     +--|-- bra.w 8b5c <drawPeople+0x536>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    8a88:	|  |     |  \-> movea.l 20(sp),a0
    8a8c:	|  |     |      movea.l 4(a0),a1
    8a90:	|  |     |      movea.l 24(sp),a0
    8a94:	|  |     |      move.l 72(a0),d0
    8a98:	|  |     |      move.l d0,d1
    8a9a:	|  |     |      move.l d1,d0
    8a9c:	|  |     |      add.l d0,d0
    8a9e:	|  |     |      add.l d1,d0
    8aa0:	|  |     |      add.l d0,d0
    8aa2:	|  |     |      add.l d0,d0
    8aa4:	|  |     |      lea (0,a1,d0.l),a0
    8aa8:	|  |     |      move.l 8(a0),d0
    8aac:	|  |     +----- beq.w 8b5c <drawPeople+0x536>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    8ab0:	|  |     |      movea.l 18772 <noStack>,a1
    8ab6:	|  |     |      movea.l 20(sp),a0
    8aba:	|  |     |      move.l 4(a0),d2
    8abe:	|  |     |      movea.l 24(sp),a0
    8ac2:	|  |     |      move.l 72(a0),d0
    8ac6:	|  |     |      move.l d0,d1
    8ac8:	|  |     |      move.l d1,d0
    8aca:	|  |     |      add.l d0,d0
    8acc:	|  |     |      add.l d1,d0
    8ace:	|  |     |      add.l d0,d0
    8ad0:	|  |     |      add.l d0,d0
    8ad2:	|  |     |      movea.l d2,a0
    8ad4:	|  |     |      adda.l d0,a0
    8ad6:	|  |     |      move.l 8(a0),d0
    8ada:	|  |     |      neg.l d0
    8adc:	|  |     |      pea 1 <_start+0x1>
    8ae0:	|  |     |      move.l a1,-(sp)
    8ae2:	|  |     |      clr.l -(sp)
    8ae4:	|  |     |      clr.l -(sp)
    8ae6:	|  |     |      move.l d0,-(sp)
    8ae8:	|  |     |      jsr 51ca <startNewFunctionNum>
    8aee:	|  |     |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    8af2:	|  |     |      movea.l 24(sp),a0
    8af6:	|  |     |      move.l 72(a0),d0
    8afa:	|  |     |      addq.l #1,d0
    8afc:	|  |     |      movea.l 24(sp),a0
    8b00:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    8b04:	|  |     |      movea.l 24(sp),a0
    8b08:	|  |     |      move.l 72(a0),d0
    8b0c:	|  |     |      movea.l 24(sp),a0
    8b10:	|  |     |      movea.l 60(a0),a0
    8b14:	|  |     |      move.l 8(a0),d1
    8b18:	|  |     |      move.l d1,-(sp)
    8b1a:	|  |     |      move.l d0,-(sp)
    8b1c:	|  |     |      jsr 1558c <__modsi3>
    8b22:	|  |     |      addq.l #8,sp
    8b24:	|  |     |      movea.l 24(sp),a0
    8b28:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    8b2c:	|  |     |      movea.l 24(sp),a0
    8b30:	|  |     |      movea.l 60(a0),a0
    8b34:	|  |     |      movea.l 4(a0),a1
    8b38:	|  |     |      movea.l 24(sp),a0
    8b3c:	|  |     |      move.l 72(a0),d0
    8b40:	|  |     |      move.l d0,d1
    8b42:	|  |     |      move.l d1,d0
    8b44:	|  |     |      add.l d0,d0
    8b46:	|  |     |      add.l d1,d0
    8b48:	|  |     |      add.l d0,d0
    8b4a:	|  |     |      add.l d0,d0
    8b4c:	|  |     |      lea (0,a1,d0.l),a0
    8b50:	|  |     |      move.l 4(a0),d0
    8b54:	|  |     |      movea.l 24(sp),a0
    8b58:	|  |     |      move.l d0,76(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    8b5c:	|  |     \----> movea.l 24(sp),a0
    8b60:	|  |            move.l 24(a0),24(sp)
	while (thisPerson) {
    8b66:	|  \----------> tst.l 24(sp)
    8b6a:	\-------------- bne.w 8648 <drawPeople+0x22>
	}
}
    8b6e:	                nop
    8b70:	                nop
    8b72:	                move.l (sp)+,d2
    8b74:	                lea 24(sp),sp
    8b78:	                rts

00008b7a <findPerson>:


struct onScreenPerson * findPerson (int v) {
    8b7a:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    8b7c:	          move.l 1885a <allPeople>,(sp)
	while (thisPerson) {
    8b82:	      /-- bra.s 8b9a <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    8b84:	/-----|-> movea.l (sp),a0
    8b86:	|     |   movea.l 102(a0),a0
    8b8a:	|     |   move.l 4(a0),d0
    8b8e:	|     |   cmp.l 8(sp),d0
    8b92:	|  /--|-- beq.s 8ba0 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    8b94:	|  |  |   movea.l (sp),a0
    8b96:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    8b9a:	|  |  \-> tst.l (sp)
    8b9c:	\--|----- bne.s 8b84 <findPerson+0xa>
    8b9e:	   |  /-- bra.s 8ba2 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    8ba0:	   \--|-> nop
	}
	return thisPerson;
    8ba2:	      \-> move.l (sp),d0
}
    8ba4:	          addq.l #4,sp
    8ba6:	          rts

00008ba8 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    8ba8:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    8baa:	       move.l 12(sp),-(sp)
    8bae:	       jsr 8b7a <findPerson>
    8bb4:	       addq.l #4,sp
    8bb6:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    8bb8:	   /-- bne.s 8bbe <floatCharacter+0x16>
    8bba:	   |   clr.w d0
    8bbc:	/--|-- bra.s 8bc8 <floatCharacter+0x20>
	moveMe -> floaty = f;
    8bbe:	|  \-> movea.l (sp),a0
    8bc0:	|      move.l 8(sp),12(a0)
	return TRUE;
    8bc6:	|      moveq #1,d0
}
    8bc8:	\----> addq.l #4,sp
    8bca:	       rts

00008bcc <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    8bcc:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    8bce:	          tst.l 8(sp)
    8bd2:	      /-- bne.s 8be0 <forceWalkingPerson+0x14>
    8bd4:	      |   tst.l 12(sp)
    8bd8:	      +-- bne.s 8be0 <forceWalkingPerson+0x14>
    8bda:	      |   clr.w d0
    8bdc:	/-----|-- bra.w 8c72 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    8be0:	|     \-> move.l 16(sp),-(sp)
    8be4:	|         jsr 8b7a <findPerson>
    8bea:	|         addq.l #4,sp
    8bec:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    8bee:	|     /-- bne.s 8bf4 <forceWalkingPerson+0x28>
    8bf0:	|     |   clr.w d0
    8bf2:	+-----|-- bra.s 8c72 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    8bf4:	|     \-> movea.l (sp),a0
    8bf6:	|         move.l 56(a0),d0
    8bfa:	|     /-- beq.s 8c0c <forceWalkingPerson+0x40>
    8bfc:	|     |   movea.l (sp),a0
    8bfe:	|     |   move.l 56(a0),d0
    8c02:	|     |   move.l d0,-(sp)
    8c04:	|     |   jsr 3090 <abortFunction>
    8c0a:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    8c0c:	|     \-> movea.l (sp),a0
    8c0e:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    8c14:	|         movea.l (sp),a0
    8c16:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    8c1a:	|         movea.l (sp),a0
    8c1c:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    8c22:	|         movea.l (sp),a0
    8c24:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    8c2a:	|         movea.l (sp),a0
    8c2c:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    8c32:	|         movea.l (sp),a0
    8c34:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    8c38:	|         movea.l (sp),a0
    8c3a:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    8c3e:	|         move.l (sp),-(sp)
    8c40:	|         jsr 7f6c <doBorderStuff>
    8c46:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    8c48:	|         pea 1 <_start+0x1>
    8c4c:	|         move.l 4(sp),-(sp)
    8c50:	|         jsr a42c <walkMe>
    8c56:	|         addq.l #8,sp
    8c58:	|         tst.w d0
    8c5a:	|     /-- bne.s 8c64 <forceWalkingPerson+0x98>
    8c5c:	|     |   movea.l (sp),a0
    8c5e:	|     |   move.w 54(a0),d0
    8c62:	|  /--|-- beq.s 8c70 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    8c64:	|  |  \-> movea.l (sp),a0
    8c66:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    8c6c:	|  |      moveq #1,d0
    8c6e:	+--|----- bra.s 8c72 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    8c70:	|  \----> clr.w d0
    }
}
    8c72:	\-------> addq.l #4,sp
    8c74:	          rts

00008c76 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    8c76:	                lea -56(sp),sp
    8c7a:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    8c7c:	                move.l #320,56(sp)
    8c84:	                move.l #200,52(sp)
    8c8c:	                moveq #-1,d0
    8c8e:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    8c92:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    8c9a:	                clr.l 44(sp)
    8c9e:	   /----------- bra.w 8e76 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    8ca2:	/--|----------> movea.l 18902 <currentFloor>,a0
    8ca8:	|  |            move.l 12(a0),d1
    8cac:	|  |            move.l 44(sp),d0
    8cb0:	|  |            lsl.l #3,d0
    8cb2:	|  |            movea.l d1,a0
    8cb4:	|  |            adda.l d0,a0
    8cb6:	|  |            move.l (a0),d0
    8cb8:	|  |            move.l d0,d1
    8cba:	|  |            subq.l #1,d1
    8cbc:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    8cc0:	|  |            clr.l 40(sp)
    8cc4:	|  |     /----- bra.w 8e54 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    8cc8:	|  |  /--|----> movea.l 18902 <currentFloor>,a0
    8cce:	|  |  |  |      move.l 4(a0),d1
    8cd2:	|  |  |  |      movea.l 18902 <currentFloor>,a0
    8cd8:	|  |  |  |      movea.l 12(a0),a0
    8cdc:	|  |  |  |      move.l 44(sp),d0
    8ce0:	|  |  |  |      lsl.l #3,d0
    8ce2:	|  |  |  |      adda.l d0,a0
    8ce4:	|  |  |  |      movea.l 4(a0),a0
    8ce8:	|  |  |  |      move.l 40(sp),d0
    8cec:	|  |  |  |      add.l d0,d0
    8cee:	|  |  |  |      add.l d0,d0
    8cf0:	|  |  |  |      adda.l d0,a0
    8cf2:	|  |  |  |      move.l (a0),d0
    8cf4:	|  |  |  |      lsl.l #3,d0
    8cf6:	|  |  |  |      movea.l d1,a0
    8cf8:	|  |  |  |      adda.l d0,a0
    8cfa:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    8cfe:	|  |  |  |      movea.l 18902 <currentFloor>,a0
    8d04:	|  |  |  |      move.l 4(a0),d1
    8d08:	|  |  |  |      movea.l 18902 <currentFloor>,a0
    8d0e:	|  |  |  |      movea.l 12(a0),a0
    8d12:	|  |  |  |      move.l 44(sp),d0
    8d16:	|  |  |  |      lsl.l #3,d0
    8d18:	|  |  |  |      adda.l d0,a0
    8d1a:	|  |  |  |      movea.l 4(a0),a0
    8d1e:	|  |  |  |      move.l 40(sp),d0
    8d22:	|  |  |  |      add.l d0,d0
    8d24:	|  |  |  |      add.l d0,d0
    8d26:	|  |  |  |      adda.l d0,a0
    8d28:	|  |  |  |      move.l (a0),d0
    8d2a:	|  |  |  |      lsl.l #3,d0
    8d2c:	|  |  |  |      movea.l d1,a0
    8d2e:	|  |  |  |      adda.l d0,a0
    8d30:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    8d36:	|  |  |  |      movea.l 18902 <currentFloor>,a0
    8d3c:	|  |  |  |      move.l 4(a0),d1
    8d40:	|  |  |  |      movea.l 18902 <currentFloor>,a0
    8d46:	|  |  |  |      movea.l 12(a0),a0
    8d4a:	|  |  |  |      move.l 44(sp),d0
    8d4e:	|  |  |  |      lsl.l #3,d0
    8d50:	|  |  |  |      adda.l d0,a0
    8d52:	|  |  |  |      movea.l 4(a0),a0
    8d56:	|  |  |  |      move.l 36(sp),d0
    8d5a:	|  |  |  |      add.l d0,d0
    8d5c:	|  |  |  |      add.l d0,d0
    8d5e:	|  |  |  |      adda.l d0,a0
    8d60:	|  |  |  |      move.l (a0),d0
    8d62:	|  |  |  |      lsl.l #3,d0
    8d64:	|  |  |  |      movea.l d1,a0
    8d66:	|  |  |  |      adda.l d0,a0
    8d68:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    8d6c:	|  |  |  |      movea.l 18902 <currentFloor>,a0
    8d72:	|  |  |  |      move.l 4(a0),d1
    8d76:	|  |  |  |      movea.l 18902 <currentFloor>,a0
    8d7c:	|  |  |  |      movea.l 12(a0),a0
    8d80:	|  |  |  |      move.l 44(sp),d0
    8d84:	|  |  |  |      lsl.l #3,d0
    8d86:	|  |  |  |      adda.l d0,a0
    8d88:	|  |  |  |      movea.l 4(a0),a0
    8d8c:	|  |  |  |      move.l 36(sp),d0
    8d90:	|  |  |  |      add.l d0,d0
    8d92:	|  |  |  |      add.l d0,d0
    8d94:	|  |  |  |      adda.l d0,a0
    8d96:	|  |  |  |      move.l (a0),d0
    8d98:	|  |  |  |      lsl.l #3,d0
    8d9a:	|  |  |  |      movea.l d1,a0
    8d9c:	|  |  |  |      adda.l d0,a0
    8d9e:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    8da4:	|  |  |  |      movea.l 68(sp),a0
    8da8:	|  |  |  |      move.l (a0),d1
    8daa:	|  |  |  |      movea.l 64(sp),a0
    8dae:	|  |  |  |      move.l (a0),d0
    8db0:	|  |  |  |      move.l d1,-(sp)
    8db2:	|  |  |  |      move.l d0,-(sp)
    8db4:	|  |  |  |      move.l 24(sp),-(sp)
    8db8:	|  |  |  |      move.l 32(sp),-(sp)
    8dbc:	|  |  |  |      move.l 40(sp),-(sp)
    8dc0:	|  |  |  |      move.l 48(sp),-(sp)
    8dc4:	|  |  |  |      lea 28(sp),a0
    8dc8:	|  |  |  |      move.l a0,-(sp)
    8dca:	|  |  |  |      lea 36(sp),a0
    8dce:	|  |  |  |      move.l a0,-(sp)
    8dd0:	|  |  |  |      jsr 13982 <closestPointOnLine>
    8dd6:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    8dda:	|  |  |  |      movea.l 64(sp),a0
    8dde:	|  |  |  |      move.l (a0),d0
    8de0:	|  |  |  |      move.l 8(sp),d1
    8de4:	|  |  |  |      move.l d0,d2
    8de6:	|  |  |  |      sub.l d1,d2
    8de8:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    8dec:	|  |  |  |      movea.l 68(sp),a0
    8df0:	|  |  |  |      move.l (a0),d0
    8df2:	|  |  |  |      move.l 4(sp),d1
    8df6:	|  |  |  |      move.l d0,d2
    8df8:	|  |  |  |      sub.l d1,d2
    8dfa:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    8dfe:	|  |  |  |      move.l 28(sp),-(sp)
    8e02:	|  |  |  |      move.l 32(sp),-(sp)
    8e06:	|  |  |  |      jsr 154e0 <__mulsi3>
    8e0c:	|  |  |  |      addq.l #8,sp
    8e0e:	|  |  |  |      move.l d0,d2
    8e10:	|  |  |  |      move.l 24(sp),-(sp)
    8e14:	|  |  |  |      move.l 28(sp),-(sp)
    8e18:	|  |  |  |      jsr 154e0 <__mulsi3>
    8e1e:	|  |  |  |      addq.l #8,sp
    8e20:	|  |  |  |      move.l d2,d1
    8e22:	|  |  |  |      add.l d0,d1
    8e24:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    8e28:	|  |  |  |      move.l 12(sp),d2
    8e2c:	|  |  |  |      cmp.l 32(sp),d2
    8e30:	|  |  |  |  /-- bge.s 8e4a <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    8e32:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    8e38:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    8e3e:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    8e44:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    8e4a:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    8e50:	|  |  |  |      addq.l #1,40(sp)
    8e54:	|  |  |  \----> movea.l 18902 <currentFloor>,a0
    8e5a:	|  |  |         move.l 12(a0),d1
    8e5e:	|  |  |         move.l 44(sp),d0
    8e62:	|  |  |         lsl.l #3,d0
    8e64:	|  |  |         movea.l d1,a0
    8e66:	|  |  |         adda.l d0,a0
    8e68:	|  |  |         move.l (a0),d0
    8e6a:	|  |  |         cmp.l 40(sp),d0
    8e6e:	|  |  \-------- bgt.w 8cc8 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    8e72:	|  |            addq.l #1,44(sp)
    8e76:	|  \----------> movea.l 18902 <currentFloor>,a0
    8e7c:	|               move.l 8(a0),d0
    8e80:	|               cmp.l 44(sp),d0
    8e84:	\-------------- bgt.w 8ca2 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    8e88:	                moveq #-1,d0
    8e8a:	                cmp.l 48(sp),d0
    8e8e:	            /-- bne.s 8e94 <handleClosestPoint+0x21e>
    8e90:	            |   clr.w d0
    8e92:	         /--|-- bra.s 8eae <handleClosestPoint+0x238>
	*setX = gotX;
    8e94:	         |  \-> movea.l 64(sp),a0
    8e98:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    8e9c:	         |      movea.l 68(sp),a0
    8ea0:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    8ea4:	         |      movea.l 72(sp),a0
    8ea8:	         |      move.l 48(sp),(a0)

	return TRUE;
    8eac:	         |      moveq #1,d0
}
    8eae:	         \----> move.l (sp)+,d2
    8eb0:	                lea 56(sp),sp
    8eb4:	                rts

00008eb6 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    8eb6:	clr.l 1886e <personRegion+0x10>
	personRegion.sY = 0;
    8ebc:	clr.l 18872 <personRegion+0x14>
	personRegion.di = -1;
    8ec2:	moveq #-1,d0
    8ec4:	move.l d0,18876 <personRegion+0x18>
	allScreenRegions = NULL;
    8eca:	clr.l 188fa <allScreenRegions>

	return TRUE;
    8ed0:	moveq #1,d0
}
    8ed2:	rts

00008ed4 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    8ed4:	          subq.l #4,sp
    8ed6:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    8ed8:	          tst.l 12(sp)
    8edc:	      /-- bne.s 8ee4 <jumpPerson+0x10>
    8ede:	      |   tst.l 16(sp)
    8ee2:	/-----|-- beq.s 8f58 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    8ee4:	|     \-> move.l 20(sp),-(sp)
    8ee8:	|         jsr 8b7a <findPerson>
    8eee:	|         addq.l #4,sp
    8ef0:	|         move.l d0,4(sp)
    if (!moveMe) return;
    8ef4:	|  /----- beq.s 8f5c <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    8ef6:	|  |      movea.l 4(sp),a0
    8efa:	|  |      move.l 56(a0),d0
    8efe:	|  |  /-- beq.s 8f12 <jumpPerson+0x3e>
    8f00:	|  |  |   movea.l 4(sp),a0
    8f04:	|  |  |   move.l 56(a0),d0
    8f08:	|  |  |   move.l d0,-(sp)
    8f0a:	|  |  |   jsr 3090 <abortFunction>
    8f10:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    8f12:	|  |  \-> movea.l 4(sp),a0
    8f16:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    8f1a:	|  |      movea.l 4(sp),a0
    8f1e:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    8f22:	|  |      movea.l 4(sp),a0
    8f26:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    8f2a:	|  |      move.l 16(sp),-(sp)
    8f2e:	|  |      jsr 14f5e <__floatsisf>
    8f34:	|  |      addq.l #4,sp
    8f36:	|  |      move.l d0,d2
    8f38:	|  |      move.l 12(sp),-(sp)
    8f3c:	|  |      jsr 14f5e <__floatsisf>
    8f42:	|  |      addq.l #4,sp
    8f44:	|  |      move.l d2,-(sp)
    8f46:	|  |      move.l d0,-(sp)
    8f48:	|  |      move.l 12(sp),-(sp)
    8f4c:	|  |      jsr 92c2 <moveAndScale>
    8f52:	|  |      lea 12(sp),sp
    8f56:	|  |  /-- bra.s 8f5e <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    8f58:	\--|--|-> nop
    8f5a:	   |  +-- bra.s 8f5e <jumpPerson+0x8a>
    if (!moveMe) return;
    8f5c:	   \--|-> nop
}
    8f5e:	      \-> move.l (sp)+,d2
    8f60:	          addq.l #4,sp
    8f62:	          rts

00008f64 <killAllPeople>:


void killAllPeople () {
    8f64:	          subq.l #8,sp
    8f66:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    8f68:	   /----- bra.s 8fd4 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    8f6a:	/--|----> movea.l 1885a <allPeople>,a0
    8f70:	|  |      move.l 56(a0),d0
    8f74:	|  |  /-- beq.s 8f8a <killAllPeople+0x26>
    8f76:	|  |  |   movea.l 1885a <allPeople>,a0
    8f7c:	|  |  |   move.l 56(a0),d0
    8f80:	|  |  |   move.l d0,-(sp)
    8f82:	|  |  |   jsr 3090 <abortFunction>
    8f88:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    8f8a:	|  |  \-> movea.l 1885a <allPeople>,a0
    8f90:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    8f94:	|  |      move.l 1885a <allPeople>,8(sp)
		allPeople = allPeople -> next;
    8f9c:	|  |      movea.l 1885a <allPeople>,a0
    8fa2:	|  |      move.l 24(a0),d0
    8fa6:	|  |      move.l d0,1885a <allPeople>
		removeObjectType (killPeople -> thisType);
    8fac:	|  |      movea.l 8(sp),a0
    8fb0:	|  |      move.l 102(a0),d0
    8fb4:	|  |      move.l d0,-(sp)
    8fb6:	|  |      jsr bcb8 <removeObjectType>
    8fbc:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    8fbe:	|  |      move.l 8(sp),4(sp)
    8fc4:	|  |      move.l 187a2 <SysBase>,d0
    8fca:	|  |      movea.l d0,a6
    8fcc:	|  |      movea.l 4(sp),a1
    8fd0:	|  |      jsr -690(a6)
	while (allPeople) {
    8fd4:	|  \----> move.l 1885a <allPeople>,d0
    8fda:	\-------- bne.s 8f6a <killAllPeople+0x6>
	}
}
    8fdc:	          nop
    8fde:	          nop
    8fe0:	          movea.l (sp)+,a6
    8fe2:	          addq.l #8,sp
    8fe4:	          rts

00008fe6 <killMostPeople>:

void killMostPeople() {
    8fe6:	          lea -12(sp),sp
    8fea:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    8fec:	          move.l #100442,12(sp)

    while (*lookyHere) {
    8ff4:	   /----- bra.w 907a <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    8ff8:	/--|----> movea.l 12(sp),a0
    8ffc:	|  |      movea.l (a0),a0
    8ffe:	|  |      move.l 106(a0),d0
    9002:	|  |      moveq #32,d1
    9004:	|  |      and.l d1,d0
    9006:	|  |  /-- beq.s 9018 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    9008:	|  |  |   movea.l 12(sp),a0
    900c:	|  |  |   move.l (a0),d0
    900e:	|  |  |   moveq #24,d1
    9010:	|  |  |   add.l d0,d1
    9012:	|  |  |   move.l d1,12(sp)
    9016:	|  +--|-- bra.s 907a <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    9018:	|  |  \-> movea.l 12(sp),a0
    901c:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    9020:	|  |      movea.l 8(sp),a0
    9024:	|  |      move.l 24(a0),d0
    9028:	|  |      movea.l 12(sp),a0
    902c:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    902e:	|  |      movea.l 8(sp),a0
    9032:	|  |      move.l 56(a0),d0
    9036:	|  |  /-- beq.s 904a <killMostPeople+0x64>
    9038:	|  |  |   movea.l 8(sp),a0
    903c:	|  |  |   move.l 56(a0),d0
    9040:	|  |  |   move.l d0,-(sp)
    9042:	|  |  |   jsr 3090 <abortFunction>
    9048:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    904a:	|  |  \-> movea.l 8(sp),a0
    904e:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    9052:	|  |      movea.l 8(sp),a0
    9056:	|  |      move.l 102(a0),d0
    905a:	|  |      move.l d0,-(sp)
    905c:	|  |      jsr bcb8 <removeObjectType>
    9062:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    9064:	|  |      move.l 8(sp),4(sp)
    906a:	|  |      move.l 187a2 <SysBase>,d0
    9070:	|  |      movea.l d0,a6
    9072:	|  |      movea.l 4(sp),a1
    9076:	|  |      jsr -690(a6)
    while (*lookyHere) {
    907a:	|  \----> movea.l 12(sp),a0
    907e:	|         move.l (a0),d0
    9080:	\-------- bne.w 8ff8 <killMostPeople+0x12>
        }
    }
}
    9084:	          nop
    9086:	          nop
    9088:	          movea.l (sp)+,a6
    908a:	          lea 12(sp),sp
    908e:	          rts

00009090 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    9090:	clr.l -(sp)
    9092:	move.l sp,d0
    9094:	addq.l #8,d0
    9096:	move.l d0,-(sp)
    9098:	jsr 6826 <setFrames>
    909e:	addq.l #8,sp
}
    90a0:	nop
    90a2:	rts

000090a4 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    90a4:	          lea -12(sp),sp
    90a8:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    90aa:	          tst.l 20(sp)
    90ae:	      /-- bne.s 90bc <makeWalkingPerson+0x18>
    90b0:	      |   tst.l 24(sp)
    90b4:	      +-- bne.s 90bc <makeWalkingPerson+0x18>
    90b6:	      |   clr.w d0
    90b8:	/-----|-- bra.w 9254 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    90bc:	|     \-> movea.l 18902 <currentFloor>,a0
    90c2:	|         move.l 8(a0),d0
    90c6:	|     /-- bne.s 90ce <makeWalkingPerson+0x2a>
    90c8:	|     |   clr.w d0
    90ca:	+-----|-- bra.w 9254 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    90ce:	|     \-> move.l 28(sp),-(sp)
    90d2:	|         jsr 8b7a <findPerson>
    90d8:	|         addq.l #4,sp
    90da:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    90de:	|     /-- bne.s 90e6 <makeWalkingPerson+0x42>
    90e0:	|     |   clr.w d0
    90e2:	+-----|-- bra.w 9254 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    90e6:	|     \-> movea.l 12(sp),a0
    90ea:	|         move.l 56(a0),d0
    90ee:	|     /-- beq.s 9102 <makeWalkingPerson+0x5e>
    90f0:	|     |   movea.l 12(sp),a0
    90f4:	|     |   move.l 56(a0),d0
    90f8:	|     |   move.l d0,-(sp)
    90fa:	|     |   jsr 3090 <abortFunction>
    9100:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    9102:	|     \-> movea.l 12(sp),a0
    9106:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    910a:	|         movea.l 12(sp),a0
    910e:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    9114:	|         movea.l 12(sp),a0
    9118:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    911e:	|         movea.l 12(sp),a0
    9122:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    9128:	|         movea.l 12(sp),a0
    912c:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    9132:	|         move.l 24(sp),-(sp)
    9136:	|         move.l 24(sp),-(sp)
    913a:	|         jsr 13e84 <inFloor>
    9140:	|         addq.l #8,sp
    9142:	|         movea.l 12(sp),a0
    9146:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    914a:	|         movea.l 12(sp),a0
    914e:	|         move.l 48(a0),d0
    9152:	|         moveq #-1,d1
    9154:	|         cmp.l d0,d1
    9156:	|     /-- bne.s 9186 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    9158:	|     |   movea.w #48,a0
    915c:	|     |   adda.l 12(sp),a0
    9160:	|     |   moveq #32,d1
    9162:	|     |   add.l 12(sp),d1
    9166:	|     |   moveq #28,d0
    9168:	|     |   add.l 12(sp),d0
    916c:	|     |   move.l a0,-(sp)
    916e:	|     |   move.l d1,-(sp)
    9170:	|     |   move.l d0,-(sp)
    9172:	|     |   jsr 8c76 <handleClosestPoint>
    9178:	|     |   lea 12(sp),sp
    917c:	|     |   tst.w d0
    917e:	|     +-- bne.s 9186 <makeWalkingPerson+0xe2>
    9180:	|     |   clr.w d0
    9182:	+-----|-- bra.w 9254 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    9186:	|     \-> movea.l 12(sp),a0
    918a:	|         move.l 4(a0),d0
    918e:	|         move.l d0,-(sp)
    9190:	|         jsr 14ef6 <__fixsfsi>
    9196:	|         addq.l #4,sp
    9198:	|         move.l d0,d2
    919a:	|         movea.l 12(sp),a0
    919e:	|         move.l (a0),d0
    91a0:	|         move.l d0,-(sp)
    91a2:	|         jsr 14ef6 <__fixsfsi>
    91a8:	|         addq.l #4,sp
    91aa:	|         move.l d2,-(sp)
    91ac:	|         move.l d0,-(sp)
    91ae:	|         jsr 13e84 <inFloor>
    91b4:	|         addq.l #8,sp
    91b6:	|         movea.l 12(sp),a0
    91ba:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    91be:	|         movea.l 12(sp),a0
    91c2:	|         move.l 44(a0),d0
    91c6:	|         moveq #-1,d1
    91c8:	|         cmp.l d0,d1
    91ca:	|     /-- bne.s 921c <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    91cc:	|     |   movea.l 12(sp),a0
    91d0:	|     |   move.l (a0),d0
    91d2:	|     |   move.l d0,-(sp)
    91d4:	|     |   jsr 14ef6 <__fixsfsi>
    91da:	|     |   addq.l #4,sp
    91dc:	|     |   move.l d0,8(sp)
    91e0:	|     |   movea.l 12(sp),a0
    91e4:	|     |   move.l 4(a0),d0
    91e8:	|     |   move.l d0,-(sp)
    91ea:	|     |   jsr 14ef6 <__fixsfsi>
    91f0:	|     |   addq.l #4,sp
    91f2:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    91f6:	|     |   moveq #44,d0
    91f8:	|     |   add.l 12(sp),d0
    91fc:	|     |   move.l d0,-(sp)
    91fe:	|     |   lea 8(sp),a0
    9202:	|     |   move.l a0,-(sp)
    9204:	|     |   moveq #16,d0
    9206:	|     |   add.l sp,d0
    9208:	|     |   move.l d0,-(sp)
    920a:	|     |   jsr 8c76 <handleClosestPoint>
    9210:	|     |   lea 12(sp),sp
    9214:	|     |   tst.w d0
    9216:	|     +-- bne.s 921c <makeWalkingPerson+0x178>
    9218:	|     |   clr.w d0
    921a:	+-----|-- bra.s 9254 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    921c:	|     \-> move.l 12(sp),-(sp)
    9220:	|         jsr 7f6c <doBorderStuff>
    9226:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    9228:	|         clr.l -(sp)
    922a:	|         move.l 16(sp),-(sp)
    922e:	|         jsr a42c <walkMe>
    9234:	|         addq.l #8,sp
    9236:	|         tst.w d0
    9238:	|     /-- bne.s 9244 <makeWalkingPerson+0x1a0>
    923a:	|     |   movea.l 12(sp),a0
    923e:	|     |   move.w 54(a0),d0
    9242:	|  /--|-- beq.s 9252 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    9244:	|  |  \-> movea.l 12(sp),a0
    9248:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    924e:	|  |      moveq #1,d0
    9250:	+--|----- bra.s 9254 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    9252:	|  \----> clr.w d0
	}
}
    9254:	\-------> move.l (sp)+,d2
    9256:	          lea 12(sp),sp
    925a:	          rts

0000925c <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    925c:	       lea -16(sp),sp
    9260:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    9262:	       moveq #12,d0
    9264:	       move.l d0,16(sp)
    9268:	       clr.l 12(sp)
    926c:	       move.l 187a2 <SysBase>,d0
    9272:	       movea.l d0,a6
    9274:	       move.l 16(sp),d0
    9278:	       move.l 12(sp),d1
    927c:	       jsr -684(a6)
    9280:	       move.l d0,8(sp)
    9284:	       move.l 8(sp),d0
    9288:	       move.l d0,4(sp)
    if(newAnim == 0) {
    928c:	   /-- bne.s 92a0 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    928e:	   |   pea 168f1 <PutChar+0x12fb>
    9294:	   |   jsr 14b22 <KPrintF>
    929a:	   |   addq.l #4,sp
        return NULL;    
    929c:	   |   moveq #0,d0
    929e:	/--|-- bra.s 92ba <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    92a0:	|  \-> movea.l 4(sp),a0
    92a4:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    92a6:	|      movea.l 4(sp),a0
    92aa:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    92ae:	|      movea.l 4(sp),a0
    92b2:	|      clr.l 4(a0)
	return newAnim;
    92b6:	|      move.l 4(sp),d0
}
    92ba:	\----> movea.l (sp)+,a6
    92bc:	       lea 16(sp),sp
    92c0:	       rts

000092c2 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    92c2:	    move.l d2,-(sp)
	me->x = x;
    92c4:	    movea.l 8(sp),a0
    92c8:	    move.l 12(sp),(a0)
	me->y = y;
    92cc:	    movea.l 8(sp),a0
    92d0:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    92d6:	    movea.l 8(sp),a0
    92da:	    move.l 106(a0),d0
    92de:	    moveq #2,d1
    92e0:	    and.l d1,d0
    92e2:	/-- bne.s 933a <moveAndScale+0x78>
    92e4:	|   move.w 18138 <scaleDivide>,d0
    92ea:	+-- beq.s 933a <moveAndScale+0x78>
    92ec:	|   movea.l 8(sp),a0
    92f0:	|   move.l 4(a0),d2
    92f4:	|   move.w 18136 <scaleHorizon>,d0
    92fa:	|   movea.w d0,a0
    92fc:	|   move.l a0,-(sp)
    92fe:	|   jsr 14f5e <__floatsisf>
    9304:	|   addq.l #4,sp
    9306:	|   move.l d0,-(sp)
    9308:	|   move.l d2,-(sp)
    930a:	|   jsr 15252 <__subsf3>
    9310:	|   addq.l #8,sp
    9312:	|   move.l d0,d2
    9314:	|   move.w 18138 <scaleDivide>,d0
    931a:	|   movea.w d0,a0
    931c:	|   move.l a0,-(sp)
    931e:	|   jsr 14f5e <__floatsisf>
    9324:	|   addq.l #4,sp
    9326:	|   move.l d0,-(sp)
    9328:	|   move.l d2,-(sp)
    932a:	|   jsr 14e0a <__divsf3>
    9330:	|   addq.l #8,sp
    9332:	|   movea.l 8(sp),a0
    9336:	|   move.l d0,20(a0)
}
    933a:	\-> nop
    933c:	    move.l (sp)+,d2
    933e:	    rts

00009340 <removeOneCharacter>:

void removeOneCharacter (int i) {
    9340:	          lea -16(sp),sp
    9344:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    9346:	          move.l 24(sp),-(sp)
    934a:	          jsr 8b7a <findPerson>
    9350:	          addq.l #4,sp
    9352:	          move.l d0,8(sp)

    if (p) {
    9356:	/-------- beq.w 9436 <removeOneCharacter+0xf6>
		
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    935a:	|         move.l 188fe <overRegion>,d0
    9360:	|         cmpi.l #100446,d0
    9366:	|     /-- bne.s 9384 <removeOneCharacter+0x44>
    9368:	|     |   movea.l 188fe <overRegion>,a0
    936e:	|     |   move.l 28(a0),d1
    9372:	|     |   movea.l 8(sp),a0
    9376:	|     |   move.l 102(a0),d0
    937a:	|     |   cmp.l d1,d0
    937c:	|     +-- bne.s 9384 <removeOneCharacter+0x44>
            overRegion = NULL;
    937e:	|     |   clr.l 188fe <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    9384:	|     \-> movea.l 8(sp),a0
    9388:	|         move.l 56(a0),d0
    938c:	|     /-- beq.s 93a0 <removeOneCharacter+0x60>
    938e:	|     |   movea.l 8(sp),a0
    9392:	|     |   move.l 56(a0),d0
    9396:	|     |   move.l d0,-(sp)
    9398:	|     |   jsr 3090 <abortFunction>
    939e:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    93a0:	|     \-> movea.l 8(sp),a0
    93a4:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    93a8:	|         clr.l 12(sp)
    93ac:	|     /-- bra.s 93d4 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    93ae:	|  /--|-> movea.l 8(sp),a0
    93b2:	|  |  |   movea.l 68(a0),a0
    93b6:	|  |  |   move.l (a0),d1
    93b8:	|  |  |   move.l 12(sp),d0
    93bc:	|  |  |   add.l d0,d0
    93be:	|  |  |   add.l d0,d0
    93c0:	|  |  |   movea.l d1,a0
    93c2:	|  |  |   adda.l d0,a0
    93c4:	|  |  |   move.l (a0),d0
    93c6:	|  |  |   move.l d0,-(sp)
    93c8:	|  |  |   jsr 7ef0 <deleteAnim>
    93ce:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    93d0:	|  |  |   addq.l #1,12(sp)
    93d4:	|  |  \-> moveq #2,d0
    93d6:	|  |      cmp.l 12(sp),d0
    93da:	|  \----- bge.s 93ae <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    93dc:	|         move.l #100442,16(sp)
    93e4:	|     /-- bra.s 93f4 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    93e6:	|  /--|-> movea.l 16(sp),a0
    93ea:	|  |  |   move.l (a0),d0
    93ec:	|  |  |   moveq #24,d1
    93ee:	|  |  |   add.l d0,d1
    93f0:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    93f4:	|  |  \-> movea.l 16(sp),a0
    93f8:	|  |      move.l (a0),d0
    93fa:	|  |      cmp.l 8(sp),d0
    93fe:	|  \----- bne.s 93e6 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    9400:	|         movea.l 8(sp),a0
    9404:	|         move.l 24(a0),d0
    9408:	|         movea.l 16(sp),a0
    940c:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    940e:	|         movea.l 8(sp),a0
    9412:	|         move.l 102(a0),d0
    9416:	|         move.l d0,-(sp)
    9418:	|         jsr bcb8 <removeObjectType>
    941e:	|         addq.l #4,sp
        FreeVec(p);
    9420:	|         move.l 8(sp),4(sp)
    9426:	|         move.l 187a2 <SysBase>,d0
    942c:	|         movea.l d0,a6
    942e:	|         movea.l 4(sp),a1
    9432:	|         jsr -690(a6)
    }
}
    9436:	\-------> nop
    9438:	          movea.l (sp)+,a6
    943a:	          lea 16(sp),sp
    943e:	          rts

00009440 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    9440:	       subq.l #8,sp
    9442:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    9444:	       movea.l 16(sp),a0
    9448:	       movea.l 68(a0),a0
    944c:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    9452:	       movea.l 16(sp),a0
    9456:	       move.l 80(a0),d2
    945a:	       move.l 4(sp),-(sp)
    945e:	       pea b4 <_start+0xb4>
    9462:	       jsr 1555e <__divsi3>
    9468:	       addq.l #8,sp
    946a:	       add.l d2,d0
    946c:	       move.l d0,d1
    946e:	       addi.l #180,d1
    9474:	       movea.l 16(sp),a0
    9478:	       move.l 88(a0),d0
    947c:	       move.l d1,d2
    947e:	       add.l d0,d2
    9480:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    9484:	   /-- bra.s 948e <rethinkAngle+0x4e>
    9486:	/--|-> addi.l #-360,8(sp)
    948e:	|  \-> cmpi.l #359,8(sp)
    9496:	\----- bgt.s 9486 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    9498:	       move.l 4(sp),-(sp)
    949c:	       move.l 12(sp),-(sp)
    94a0:	       jsr 154e0 <__mulsi3>
    94a6:	       addq.l #8,sp
    94a8:	       pea 168 <decodeFilename+0x50>
    94ac:	       move.l d0,-(sp)
    94ae:	       jsr 1555e <__divsi3>
    94b4:	       addq.l #8,sp
    94b6:	       movea.l 16(sp),a0
    94ba:	       move.l d0,94(a0)
}
    94be:	       nop
    94c0:	       move.l (sp)+,d2
    94c2:	       addq.l #8,sp
    94c4:	       rts

000094c6 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    94c6:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    94c8:	          movea.l 8(sp),a0
    94cc:	          move.l 8(a0),d0
    94d0:	          move.l 12(sp),-(sp)
    94d4:	          move.l d0,-(sp)
    94d6:	          jsr 8d0 <put2bytes>
    94dc:	          addq.l #8,sp
	if (p -> numFrames) {
    94de:	          movea.l 8(sp),a0
    94e2:	          move.l 8(a0),d0
    94e6:	/-------- beq.w 958a <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    94ea:	|         movea.l 8(sp),a0
    94ee:	|         movea.l (a0),a0
    94f0:	|         move.l (a0),d0
    94f2:	|         move.l 12(sp),-(sp)
    94f6:	|         move.l d0,-(sp)
    94f8:	|         jsr 958 <put4bytes>
    94fe:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    9500:	|         clr.l (sp)
    9502:	|     /-- bra.s 957c <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    9504:	|  /--|-> movea.l 8(sp),a0
    9508:	|  |  |   movea.l 4(a0),a0
    950c:	|  |  |   move.l (sp),d1
    950e:	|  |  |   move.l d1,d0
    9510:	|  |  |   add.l d0,d0
    9512:	|  |  |   add.l d1,d0
    9514:	|  |  |   add.l d0,d0
    9516:	|  |  |   add.l d0,d0
    9518:	|  |  |   adda.l d0,a0
    951a:	|  |  |   move.l (a0),d0
    951c:	|  |  |   move.l 12(sp),-(sp)
    9520:	|  |  |   move.l d0,-(sp)
    9522:	|  |  |   jsr 958 <put4bytes>
    9528:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    952a:	|  |  |   movea.l 8(sp),a0
    952e:	|  |  |   movea.l 4(a0),a0
    9532:	|  |  |   move.l (sp),d1
    9534:	|  |  |   move.l d1,d0
    9536:	|  |  |   add.l d0,d0
    9538:	|  |  |   add.l d1,d0
    953a:	|  |  |   add.l d0,d0
    953c:	|  |  |   add.l d0,d0
    953e:	|  |  |   adda.l d0,a0
    9540:	|  |  |   move.l 4(a0),d0
    9544:	|  |  |   move.l 12(sp),-(sp)
    9548:	|  |  |   move.l d0,-(sp)
    954a:	|  |  |   jsr 958 <put4bytes>
    9550:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    9552:	|  |  |   movea.l 8(sp),a0
    9556:	|  |  |   movea.l 4(a0),a0
    955a:	|  |  |   move.l (sp),d1
    955c:	|  |  |   move.l d1,d0
    955e:	|  |  |   add.l d0,d0
    9560:	|  |  |   add.l d1,d0
    9562:	|  |  |   add.l d0,d0
    9564:	|  |  |   add.l d0,d0
    9566:	|  |  |   adda.l d0,a0
    9568:	|  |  |   move.l 8(a0),d0
    956c:	|  |  |   move.l 12(sp),-(sp)
    9570:	|  |  |   move.l d0,-(sp)
    9572:	|  |  |   jsr 958 <put4bytes>
    9578:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    957a:	|  |  |   addq.l #1,(sp)
    957c:	|  |  \-> movea.l 8(sp),a0
    9580:	|  |      move.l 8(a0),d0
    9584:	|  |      cmp.l (sp),d0
    9586:	|  \----- bgt.w 9504 <saveAnim+0x3e>
		}
	}
	return TRUE;
    958a:	\-------> moveq #1,d0
}
    958c:	          addq.l #4,sp
    958e:	          rts

00009590 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    9590:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    9592:	             movea.l 8(sp),a0
    9596:	             move.l 4(a0),d0
    959a:	             move.l 12(sp),-(sp)
    959e:	             move.l d0,-(sp)
    95a0:	             jsr 8d0 <put2bytes>
    95a6:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    95a8:	             clr.l (sp)
    95aa:	   /-------- bra.s 95d6 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    95ac:	/--|-------> movea.l 8(sp),a0
    95b0:	|  |         move.l (a0),d1
    95b2:	|  |         move.l (sp),d0
    95b4:	|  |         add.l d0,d0
    95b6:	|  |         add.l d0,d0
    95b8:	|  |         movea.l d1,a0
    95ba:	|  |         adda.l d0,a0
    95bc:	|  |         move.l (a0),d0
    95be:	|  |         move.l 12(sp),-(sp)
    95c2:	|  |         move.l d0,-(sp)
    95c4:	|  |         jsr 94c6 <saveAnim>
    95ca:	|  |         addq.l #8,sp
    95cc:	|  |         tst.w d0
    95ce:	|  |     /-- bne.s 95d4 <saveCostume+0x44>
    95d0:	|  |     |   clr.w d0
    95d2:	|  |  /--|-- bra.s 95ea <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    95d4:	|  |  |  \-> addq.l #1,(sp)
    95d6:	|  \--|----> movea.l 8(sp),a0
    95da:	|     |      move.l 4(a0),d1
    95de:	|     |      move.l d1,d0
    95e0:	|     |      add.l d0,d0
    95e2:	|     |      add.l d1,d0
    95e4:	|     |      cmp.l (sp),d0
    95e6:	\-----|----- bgt.s 95ac <saveCostume+0x1c>
	}

	return TRUE;
    95e8:	      |      moveq #1,d0
}
    95ea:	      \----> addq.l #4,sp
    95ec:	             rts

000095ee <savePeople>:

BOOL savePeople (BPTR fp) {
    95ee:	             lea -144(sp),sp
    95f2:	             move.l a6,-(sp)
    95f4:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    95f6:	             move.l 1885a <allPeople>,148(sp)
	int countPeople = 0, a;
    95fe:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    9602:	             move.w 18136 <scaleHorizon>,d0
    9608:	             movea.w d0,a0
    960a:	             move.l 156(sp),-(sp)
    960e:	             move.l a0,-(sp)
    9610:	             jsr a9c <putSigned>
    9616:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    9618:	             move.w 18138 <scaleDivide>,d0
    961e:	             movea.w d0,a0
    9620:	             move.l 156(sp),-(sp)
    9624:	             move.l a0,-(sp)
    9626:	             jsr a9c <putSigned>
    962c:	             addq.l #8,sp

	while (me) {
    962e:	         /-- bra.s 963e <savePeople+0x50>
		countPeople ++;
    9630:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    9634:	      |  |   movea.l 148(sp),a0
    9638:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    963e:	      |  \-> tst.l 148(sp)
    9642:	      \----- bne.s 9630 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    9644:	             move.l 156(sp),-(sp)
    9648:	             move.l 148(sp),-(sp)
    964c:	             jsr 8d0 <put2bytes>
    9652:	             addq.l #8,sp

	me = allPeople;
    9654:	             move.l 1885a <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    965c:	             clr.l 140(sp)
    9660:	   /-------- bra.w 9ab8 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    9664:	/--|-------> movea.l 148(sp),a0
    9668:	|  |         move.l (a0),d0
    966a:	|  |         move.l 156(sp),-(sp)
    966e:	|  |         move.l d0,-(sp)
    9670:	|  |         jsr a46 <putFloat>
    9676:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    9678:	|  |         movea.l 148(sp),a0
    967c:	|  |         move.l 4(a0),d0
    9680:	|  |         move.l 156(sp),-(sp)
    9684:	|  |         move.l d0,-(sp)
    9686:	|  |         jsr a46 <putFloat>
    968c:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    968e:	|  |         movea.l 148(sp),a0
    9692:	|  |         move.l 68(a0),d0
    9696:	|  |         move.l 156(sp),-(sp)
    969a:	|  |         move.l d0,-(sp)
    969c:	|  |         jsr 9590 <saveCostume>
    96a2:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    96a4:	|  |         movea.l 148(sp),a0
    96a8:	|  |         move.l 60(a0),d0
    96ac:	|  |         move.l 156(sp),-(sp)
    96b0:	|  |         move.l d0,-(sp)
    96b2:	|  |         jsr 94c6 <saveAnim>
    96b8:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    96ba:	|  |         move.l 156(sp),136(sp)
    96c0:	|  |         movea.l 148(sp),a0
    96c4:	|  |         move.l 60(a0),d1
    96c8:	|  |         movea.l 148(sp),a0
    96cc:	|  |         move.l 64(a0),d0
    96d0:	|  |         cmp.l d1,d0
    96d2:	|  |         seq d0
    96d4:	|  |         neg.b d0
    96d6:	|  |         move.b d0,d0
    96d8:	|  |         andi.l #255,d0
    96de:	|  |         move.l d0,132(sp)
    96e2:	|  |         move.l 187aa <DOSBase>,d0
    96e8:	|  |         movea.l d0,a6
    96ea:	|  |         move.l 136(sp),d1
    96ee:	|  |         move.l 132(sp),d2
    96f2:	|  |         jsr -312(a6)
    96f6:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    96fa:	|  |         movea.l 148(sp),a0
    96fe:	|  |         move.l 20(a0),d0
    9702:	|  |         move.l 156(sp),-(sp)
    9706:	|  |         move.l d0,-(sp)
    9708:	|  |         jsr a46 <putFloat>
    970e:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    9710:	|  |         movea.l 148(sp),a0
    9714:	|  |         move.l 106(a0),d0
    9718:	|  |         move.l 156(sp),-(sp)
    971c:	|  |         move.l d0,-(sp)
    971e:	|  |         jsr 8d0 <put2bytes>
    9724:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    9726:	|  |         movea.l 148(sp),a0
    972a:	|  |         move.l 8(a0),d0
    972e:	|  |         move.l 156(sp),-(sp)
    9732:	|  |         move.l d0,-(sp)
    9734:	|  |         jsr 8d0 <put2bytes>
    973a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    973c:	|  |         movea.l 148(sp),a0
    9740:	|  |         move.l 28(a0),d0
    9744:	|  |         move.l 156(sp),-(sp)
    9748:	|  |         move.l d0,-(sp)
    974a:	|  |         jsr 8d0 <put2bytes>
    9750:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    9752:	|  |         movea.l 148(sp),a0
    9756:	|  |         move.l 32(a0),d0
    975a:	|  |         move.l 156(sp),-(sp)
    975e:	|  |         move.l d0,-(sp)
    9760:	|  |         jsr 8d0 <put2bytes>
    9766:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    9768:	|  |         movea.l 148(sp),a0
    976c:	|  |         move.l 36(a0),d0
    9770:	|  |         move.l 156(sp),-(sp)
    9774:	|  |         move.l d0,-(sp)
    9776:	|  |         jsr 8d0 <put2bytes>
    977c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    977e:	|  |         movea.l 148(sp),a0
    9782:	|  |         move.l 40(a0),d0
    9786:	|  |         move.l 156(sp),-(sp)
    978a:	|  |         move.l d0,-(sp)
    978c:	|  |         jsr 8d0 <put2bytes>
    9792:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    9794:	|  |         movea.l 148(sp),a0
    9798:	|  |         move.l 72(a0),d0
    979c:	|  |         move.l 156(sp),-(sp)
    97a0:	|  |         move.l d0,-(sp)
    97a2:	|  |         jsr 8d0 <put2bytes>
    97a8:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    97aa:	|  |         movea.l 148(sp),a0
    97ae:	|  |         move.l 76(a0),d0
    97b2:	|  |         move.l 156(sp),-(sp)
    97b6:	|  |         move.l d0,-(sp)
    97b8:	|  |         jsr 8d0 <put2bytes>
    97be:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    97c0:	|  |         movea.l 148(sp),a0
    97c4:	|  |         move.l 16(a0),d0
    97c8:	|  |         move.l 156(sp),-(sp)
    97cc:	|  |         move.l d0,-(sp)
    97ce:	|  |         jsr 8d0 <put2bytes>
    97d4:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    97d6:	|  |         movea.l 148(sp),a0
    97da:	|  |         move.l 110(a0),d0
    97de:	|  |         move.l 156(sp),-(sp)
    97e2:	|  |         move.l d0,-(sp)
    97e4:	|  |         jsr 8d0 <put2bytes>
    97ea:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    97ec:	|  |         movea.l 148(sp),a0
    97f0:	|  |         move.l 12(a0),d0
    97f4:	|  |         move.l d0,d0
    97f6:	|  |         movea.w d0,a0
    97f8:	|  |         move.l 156(sp),-(sp)
    97fc:	|  |         move.l a0,-(sp)
    97fe:	|  |         jsr a9c <putSigned>
    9804:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    9806:	|  |         move.l 156(sp),124(sp)
    980c:	|  |         movea.l 148(sp),a0
    9810:	|  |         move.w 92(a0),d0
    9814:	|  |         movea.w d0,a0
    9816:	|  |         move.l a0,120(sp)
    981a:	|  |         move.l 187aa <DOSBase>,d0
    9820:	|  |         movea.l d0,a6
    9822:	|  |         move.l 124(sp),d1
    9826:	|  |         move.l 120(sp),d2
    982a:	|  |         jsr -312(a6)
    982e:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    9832:	|  |         move.l 156(sp),112(sp)
    9838:	|  |         movea.l 148(sp),a0
    983c:	|  |         move.w 52(a0),d0
    9840:	|  |         movea.w d0,a0
    9842:	|  |         move.l a0,108(sp)
    9846:	|  |         move.l 187aa <DOSBase>,d0
    984c:	|  |         movea.l d0,a6
    984e:	|  |         move.l 112(sp),d1
    9852:	|  |         move.l 108(sp),d2
    9856:	|  |         jsr -312(a6)
    985a:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    985e:	|  |         move.l 156(sp),100(sp)
    9864:	|  |         movea.l 148(sp),a0
    9868:	|  |         move.w 54(a0),d0
    986c:	|  |         movea.w d0,a0
    986e:	|  |         move.l a0,96(sp)
    9872:	|  |         move.l 187aa <DOSBase>,d0
    9878:	|  |         movea.l d0,a6
    987a:	|  |         move.l 100(sp),d1
    987e:	|  |         move.l 96(sp),d2
    9882:	|  |         jsr -312(a6)
    9886:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    988a:	|  |         movea.l 148(sp),a0
    988e:	|  |         move.l 56(a0),d0
    9892:	|  |  /----- beq.s 98d0 <savePeople+0x2e2>
			FPutC (fp, 1);
    9894:	|  |  |      move.l 156(sp),76(sp)
    989a:	|  |  |      moveq #1,d0
    989c:	|  |  |      move.l d0,72(sp)
    98a0:	|  |  |      move.l 187aa <DOSBase>,d0
    98a6:	|  |  |      movea.l d0,a6
    98a8:	|  |  |      move.l 76(sp),d1
    98ac:	|  |  |      move.l 72(sp),d2
    98b0:	|  |  |      jsr -312(a6)
    98b4:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    98b8:	|  |  |      movea.l 148(sp),a0
    98bc:	|  |  |      move.l 56(a0),d0
    98c0:	|  |  |      move.l 156(sp),-(sp)
    98c4:	|  |  |      move.l d0,-(sp)
    98c6:	|  |  |      jsr ab64 <saveFunction>
    98cc:	|  |  |      addq.l #8,sp
    98ce:	|  |  |  /-- bra.s 98f4 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    98d0:	|  |  \--|-> move.l 156(sp),88(sp)
    98d6:	|  |     |   moveq #1,d0
    98d8:	|  |     |   move.l d0,84(sp)
    98dc:	|  |     |   move.l 187aa <DOSBase>,d0
    98e2:	|  |     |   movea.l d0,a6
    98e4:	|  |     |   move.l 88(sp),d1
    98e8:	|  |     |   move.l 84(sp),d2
    98ec:	|  |     |   jsr -312(a6)
    98f0:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    98f4:	|  |     \-> movea.l 148(sp),a0
    98f8:	|  |         move.l 94(a0),d0
    98fc:	|  |         move.l 156(sp),-(sp)
    9900:	|  |         move.l d0,-(sp)
    9902:	|  |         jsr 8d0 <put2bytes>
    9908:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    990a:	|  |         movea.l 148(sp),a0
    990e:	|  |         move.l 80(a0),d0
    9912:	|  |         move.l 156(sp),-(sp)
    9916:	|  |         move.l d0,-(sp)
    9918:	|  |         jsr 8d0 <put2bytes>
    991e:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    9920:	|  |         movea.l 148(sp),a0
    9924:	|  |         move.l 88(a0),d0
    9928:	|  |         move.l 156(sp),-(sp)
    992c:	|  |         move.l d0,-(sp)
    992e:	|  |         jsr 8d0 <put2bytes>
    9934:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    9936:	|  |         movea.l 148(sp),a0
    993a:	|  |         move.l 84(a0),d0
    993e:	|  |         move.l 156(sp),-(sp)
    9942:	|  |         move.l d0,-(sp)
    9944:	|  |         jsr 8d0 <put2bytes>
    994a:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    994c:	|  |         movea.l 148(sp),a0
    9950:	|  |         move.l 98(a0),d0
    9954:	|  |         move.l d0,d0
    9956:	|  |         movea.w d0,a0
    9958:	|  |         move.l 156(sp),-(sp)
    995c:	|  |         move.l a0,-(sp)
    995e:	|  |         jsr a9c <putSigned>
    9964:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    9966:	|  |         movea.l 148(sp),a0
    996a:	|  |         move.l 44(a0),d0
    996e:	|  |         move.l d0,d0
    9970:	|  |         movea.w d0,a0
    9972:	|  |         move.l 156(sp),-(sp)
    9976:	|  |         move.l a0,-(sp)
    9978:	|  |         jsr a9c <putSigned>
    997e:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    9980:	|  |         movea.l 148(sp),a0
    9984:	|  |         move.l 48(a0),d0
    9988:	|  |         move.l d0,d0
    998a:	|  |         movea.w d0,a0
    998c:	|  |         move.l 156(sp),-(sp)
    9990:	|  |         move.l a0,-(sp)
    9992:	|  |         jsr a9c <putSigned>
    9998:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    999a:	|  |         move.l 156(sp),64(sp)
    99a0:	|  |         movea.l 148(sp),a0
    99a4:	|  |         move.b 114(a0),d0
    99a8:	|  |         move.b d0,d0
    99aa:	|  |         andi.l #255,d0
    99b0:	|  |         move.l d0,60(sp)
    99b4:	|  |         move.l 187aa <DOSBase>,d0
    99ba:	|  |         movea.l d0,a6
    99bc:	|  |         move.l 64(sp),d1
    99c0:	|  |         move.l 60(sp),d2
    99c4:	|  |         jsr -312(a6)
    99c8:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    99cc:	|  |         move.l 156(sp),52(sp)
    99d2:	|  |         movea.l 148(sp),a0
    99d6:	|  |         move.b 115(a0),d0
    99da:	|  |         move.b d0,d0
    99dc:	|  |         andi.l #255,d0
    99e2:	|  |         move.l d0,48(sp)
    99e6:	|  |         move.l 187aa <DOSBase>,d0
    99ec:	|  |         movea.l d0,a6
    99ee:	|  |         move.l 52(sp),d1
    99f2:	|  |         move.l 48(sp),d2
    99f6:	|  |         jsr -312(a6)
    99fa:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    99fe:	|  |         move.l 156(sp),40(sp)
    9a04:	|  |         movea.l 148(sp),a0
    9a08:	|  |         move.b 116(a0),d0
    9a0c:	|  |         move.b d0,d0
    9a0e:	|  |         andi.l #255,d0
    9a14:	|  |         move.l d0,36(sp)
    9a18:	|  |         move.l 187aa <DOSBase>,d0
    9a1e:	|  |         movea.l d0,a6
    9a20:	|  |         move.l 40(sp),d1
    9a24:	|  |         move.l 36(sp),d2
    9a28:	|  |         jsr -312(a6)
    9a2c:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    9a30:	|  |         move.l 156(sp),28(sp)
    9a36:	|  |         movea.l 148(sp),a0
    9a3a:	|  |         move.b 117(a0),d0
    9a3e:	|  |         move.b d0,d0
    9a40:	|  |         andi.l #255,d0
    9a46:	|  |         move.l d0,24(sp)
    9a4a:	|  |         move.l 187aa <DOSBase>,d0
    9a50:	|  |         movea.l d0,a6
    9a52:	|  |         move.l 28(sp),d1
    9a56:	|  |         move.l 24(sp),d2
    9a5a:	|  |         jsr -312(a6)
    9a5e:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    9a62:	|  |         move.l 156(sp),16(sp)
    9a68:	|  |         movea.l 148(sp),a0
    9a6c:	|  |         move.b 118(a0),d0
    9a70:	|  |         move.b d0,d0
    9a72:	|  |         andi.l #255,d0
    9a78:	|  |         move.l d0,12(sp)
    9a7c:	|  |         move.l 187aa <DOSBase>,d0
    9a82:	|  |         movea.l d0,a6
    9a84:	|  |         move.l 16(sp),d1
    9a88:	|  |         move.l 12(sp),d2
    9a8c:	|  |         jsr -312(a6)
    9a90:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    9a94:	|  |         movea.l 148(sp),a0
    9a98:	|  |         move.l 102(a0),d0
    9a9c:	|  |         move.l 156(sp),-(sp)
    9aa0:	|  |         move.l d0,-(sp)
    9aa2:	|  |         jsr bd58 <saveObjectRef>
    9aa8:	|  |         addq.l #8,sp

		me = me -> next;
    9aaa:	|  |         movea.l 148(sp),a0
    9aae:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    9ab4:	|  |         addq.l #1,140(sp)
    9ab8:	|  \-------> movea.l 140(sp),a0
    9abc:	|            cmpa.l 144(sp),a0
    9ac0:	\----------- blt.w 9664 <savePeople+0x76>
	}
	return TRUE;
    9ac4:	             moveq #1,d0
}
    9ac6:	             move.l (sp)+,d2
    9ac8:	             movea.l (sp)+,a6
    9aca:	             lea 144(sp),sp
    9ace:	             rts

00009ad0 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    9ad0:	movea.l 4(sp),a0
    9ad4:	move.l 8(sp),(a0)
}
    9ad8:	nop
    9ada:	rts

00009adc <setDrawMode>:


void setDrawMode (int h, int ob) {
    9adc:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    9ade:	       move.l 12(sp),-(sp)
    9ae2:	       jsr 8b7a <findPerson>
    9ae8:	       addq.l #4,sp
    9aea:	       move.l d0,(sp)
	if (! moveMe) return;
    9aec:	/----- beq.s 9b00 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    9aee:	|      move.l 8(sp),-(sp)
    9af2:	|      move.l 4(sp),-(sp)
    9af6:	|      jsr 9b06 <setMyDrawMode>
    9afc:	|      addq.l #8,sp
    9afe:	|  /-- bra.s 9b02 <setDrawMode+0x26>
	if (! moveMe) return;
    9b00:	\--|-> nop
}
    9b02:	   \-> addq.l #4,sp
    9b04:	       rts

00009b06 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    9b06:	       moveq #19,d0
    9b08:	       cmp.l 8(sp),d0
    9b0c:	/----- bcs.w 9fe4 <setMyDrawMode+0x4de>
    9b10:	|      move.l 8(sp),d0
    9b14:	|      add.l d0,d0
    9b16:	|      movea.l d0,a0
    9b18:	|      adda.l #39716,a0
    9b1e:	|      move.w (a0),d0
    9b20:	|      jmp (9b24 <setMyDrawMode+0x1e>,pc,d0.w)
    9b24:	|      .short 0x04c0
    9b26:	|      ori.l #6684712,-(a4)
    9b2c:	|      btst d0,-(a0)
    9b2e:	|      bchg d0,(a6)+
    9b30:	|      bclr d0,(a4)+
    9b32:	|      bset d0,(a2)+
    9b34:	|      andi.b #84,(a6)
    9b38:	|      andi.l #55575312,(a2)
    9b3e:	|      .short 0x02d0
    9b40:	|      bclr d1,(a0)
    9b42:	|      .short 0x044a
    9b44:	|      .short 0x040c
    9b46:	|      movep.l d1,1158(a6)
    9b4a:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9b4c:	|      movea.l 4(sp),a0
    9b50:	|      clr.b 116(a0)
    9b54:	|      movea.l 4(sp),a0
    9b58:	|      move.b 116(a0),d0
    9b5c:	|      movea.l 4(sp),a0
    9b60:	|      move.b d0,115(a0)
    9b64:	|      movea.l 4(sp),a0
    9b68:	|      move.b 115(a0),d0
    9b6c:	|      movea.l 4(sp),a0
    9b70:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    9b74:	|      movea.l 4(sp),a0
    9b78:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    9b7c:	|      movea.l 4(sp),a0
    9b80:	|      move.b #64,118(a0)
			break;
    9b86:	|  /-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9b8a:	|  |   movea.l 4(sp),a0
    9b8e:	|  |   clr.b 116(a0)
    9b92:	|  |   movea.l 4(sp),a0
    9b96:	|  |   move.b 116(a0),d0
    9b9a:	|  |   movea.l 4(sp),a0
    9b9e:	|  |   move.b d0,115(a0)
    9ba2:	|  |   movea.l 4(sp),a0
    9ba6:	|  |   move.b 115(a0),d0
    9baa:	|  |   movea.l 4(sp),a0
    9bae:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    9bb2:	|  |   movea.l 4(sp),a0
    9bb6:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    9bba:	|  |   movea.l 4(sp),a0
    9bbe:	|  |   move.b #-128,118(a0)
			break;
    9bc4:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9bc8:	|  |   movea.l 4(sp),a0
    9bcc:	|  |   clr.b 116(a0)
    9bd0:	|  |   movea.l 4(sp),a0
    9bd4:	|  |   move.b 116(a0),d0
    9bd8:	|  |   movea.l 4(sp),a0
    9bdc:	|  |   move.b d0,115(a0)
    9be0:	|  |   movea.l 4(sp),a0
    9be4:	|  |   move.b 115(a0),d0
    9be8:	|  |   movea.l 4(sp),a0
    9bec:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    9bf0:	|  |   movea.l 4(sp),a0
    9bf4:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    9bf8:	|  |   movea.l 4(sp),a0
    9bfc:	|  |   move.b #-64,118(a0)
			break;
    9c02:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9c06:	|  |   movea.l 4(sp),a0
    9c0a:	|  |   clr.b 116(a0)
    9c0e:	|  |   movea.l 4(sp),a0
    9c12:	|  |   move.b 116(a0),d0
    9c16:	|  |   movea.l 4(sp),a0
    9c1a:	|  |   move.b d0,115(a0)
    9c1e:	|  |   movea.l 4(sp),a0
    9c22:	|  |   move.b 115(a0),d0
    9c26:	|  |   movea.l 4(sp),a0
    9c2a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    9c2e:	|  |   movea.l 4(sp),a0
    9c32:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    9c36:	|  |   movea.l 4(sp),a0
    9c3a:	|  |   move.b #-2,118(a0)
			break;
    9c40:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9c44:	|  |   movea.l 4(sp),a0
    9c48:	|  |   clr.b 116(a0)
    9c4c:	|  |   movea.l 4(sp),a0
    9c50:	|  |   move.b 116(a0),d0
    9c54:	|  |   movea.l 4(sp),a0
    9c58:	|  |   move.b d0,115(a0)
    9c5c:	|  |   movea.l 4(sp),a0
    9c60:	|  |   move.b 115(a0),d0
    9c64:	|  |   movea.l 4(sp),a0
    9c68:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    9c6c:	|  |   movea.l 4(sp),a0
    9c70:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    9c76:	|  |   movea.l 4(sp),a0
    9c7a:	|  |   clr.b 118(a0)
			break;
    9c7e:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9c82:	|  |   movea.l 4(sp),a0
    9c86:	|  |   clr.b 116(a0)
    9c8a:	|  |   movea.l 4(sp),a0
    9c8e:	|  |   move.b 116(a0),d0
    9c92:	|  |   movea.l 4(sp),a0
    9c96:	|  |   move.b d0,115(a0)
    9c9a:	|  |   movea.l 4(sp),a0
    9c9e:	|  |   move.b 115(a0),d0
    9ca2:	|  |   movea.l 4(sp),a0
    9ca6:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    9caa:	|  |   movea.l 4(sp),a0
    9cae:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    9cb4:	|  |   movea.l 4(sp),a0
    9cb8:	|  |   clr.b 118(a0)
			break;
    9cbc:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9cc0:	|  |   movea.l 4(sp),a0
    9cc4:	|  |   clr.b 116(a0)
    9cc8:	|  |   movea.l 4(sp),a0
    9ccc:	|  |   move.b 116(a0),d0
    9cd0:	|  |   movea.l 4(sp),a0
    9cd4:	|  |   move.b d0,115(a0)
    9cd8:	|  |   movea.l 4(sp),a0
    9cdc:	|  |   move.b 115(a0),d0
    9ce0:	|  |   movea.l 4(sp),a0
    9ce4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    9ce8:	|  |   movea.l 4(sp),a0
    9cec:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    9cf2:	|  |   movea.l 4(sp),a0
    9cf6:	|  |   clr.b 118(a0)
			break;
    9cfa:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9cfe:	|  |   movea.l 4(sp),a0
    9d02:	|  |   clr.b 116(a0)
    9d06:	|  |   movea.l 4(sp),a0
    9d0a:	|  |   move.b 116(a0),d0
    9d0e:	|  |   movea.l 4(sp),a0
    9d12:	|  |   move.b d0,115(a0)
    9d16:	|  |   movea.l 4(sp),a0
    9d1a:	|  |   move.b 115(a0),d0
    9d1e:	|  |   movea.l 4(sp),a0
    9d22:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9d26:	|  |   movea.l 4(sp),a0
    9d2a:	|  |   st 117(a0)
			moveMe->transparency = 0;
    9d2e:	|  |   movea.l 4(sp),a0
    9d32:	|  |   clr.b 118(a0)
			break;
    9d36:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9d3a:	|  |   movea.l 4(sp),a0
    9d3e:	|  |   clr.b 116(a0)
    9d42:	|  |   movea.l 4(sp),a0
    9d46:	|  |   move.b 116(a0),d0
    9d4a:	|  |   movea.l 4(sp),a0
    9d4e:	|  |   move.b d0,115(a0)
    9d52:	|  |   movea.l 4(sp),a0
    9d56:	|  |   move.b 115(a0),d0
    9d5a:	|  |   movea.l 4(sp),a0
    9d5e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9d62:	|  |   movea.l 4(sp),a0
    9d66:	|  |   st 117(a0)
			moveMe->transparency = 64;
    9d6a:	|  |   movea.l 4(sp),a0
    9d6e:	|  |   move.b #64,118(a0)
			break;
    9d74:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9d78:	|  |   movea.l 4(sp),a0
    9d7c:	|  |   clr.b 116(a0)
    9d80:	|  |   movea.l 4(sp),a0
    9d84:	|  |   move.b 116(a0),d0
    9d88:	|  |   movea.l 4(sp),a0
    9d8c:	|  |   move.b d0,115(a0)
    9d90:	|  |   movea.l 4(sp),a0
    9d94:	|  |   move.b 115(a0),d0
    9d98:	|  |   movea.l 4(sp),a0
    9d9c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9da0:	|  |   movea.l 4(sp),a0
    9da4:	|  |   st 117(a0)
			moveMe->transparency = 128;
    9da8:	|  |   movea.l 4(sp),a0
    9dac:	|  |   move.b #-128,118(a0)
			break;
    9db2:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9db6:	|  |   movea.l 4(sp),a0
    9dba:	|  |   clr.b 116(a0)
    9dbe:	|  |   movea.l 4(sp),a0
    9dc2:	|  |   move.b 116(a0),d0
    9dc6:	|  |   movea.l 4(sp),a0
    9dca:	|  |   move.b d0,115(a0)
    9dce:	|  |   movea.l 4(sp),a0
    9dd2:	|  |   move.b 115(a0),d0
    9dd6:	|  |   movea.l 4(sp),a0
    9dda:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9dde:	|  |   movea.l 4(sp),a0
    9de2:	|  |   st 117(a0)
			moveMe->transparency = 192;
    9de6:	|  |   movea.l 4(sp),a0
    9dea:	|  |   move.b #-64,118(a0)
			break;
    9df0:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    9df4:	|  |   movea.l 4(sp),a0
    9df8:	|  |   move.b #-128,116(a0)
    9dfe:	|  |   movea.l 4(sp),a0
    9e02:	|  |   move.b 116(a0),d0
    9e06:	|  |   movea.l 4(sp),a0
    9e0a:	|  |   move.b d0,115(a0)
    9e0e:	|  |   movea.l 4(sp),a0
    9e12:	|  |   move.b 115(a0),d0
    9e16:	|  |   movea.l 4(sp),a0
    9e1a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    9e1e:	|  |   movea.l 4(sp),a0
    9e22:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    9e28:	|  |   movea.l 4(sp),a0
    9e2c:	|  |   clr.b 118(a0)
			break;
    9e30:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    9e34:	|  |   movea.l 4(sp),a0
    9e38:	|  |   move.b #-128,116(a0)
    9e3e:	|  |   movea.l 4(sp),a0
    9e42:	|  |   move.b 116(a0),d0
    9e46:	|  |   movea.l 4(sp),a0
    9e4a:	|  |   move.b d0,115(a0)
    9e4e:	|  |   movea.l 4(sp),a0
    9e52:	|  |   move.b 115(a0),d0
    9e56:	|  |   movea.l 4(sp),a0
    9e5a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    9e5e:	|  |   movea.l 4(sp),a0
    9e62:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    9e68:	|  |   movea.l 4(sp),a0
    9e6c:	|  |   clr.b 118(a0)
			break;
    9e70:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    9e74:	|  |   movea.l 4(sp),a0
    9e78:	|  |   move.b #-128,116(a0)
    9e7e:	|  |   movea.l 4(sp),a0
    9e82:	|  |   move.b 116(a0),d0
    9e86:	|  |   movea.l 4(sp),a0
    9e8a:	|  |   move.b d0,115(a0)
    9e8e:	|  |   movea.l 4(sp),a0
    9e92:	|  |   move.b 115(a0),d0
    9e96:	|  |   movea.l 4(sp),a0
    9e9a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    9e9e:	|  |   movea.l 4(sp),a0
    9ea2:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    9ea8:	|  |   movea.l 4(sp),a0
    9eac:	|  |   clr.b 118(a0)
			break;
    9eb0:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    9eb4:	|  |   movea.l 4(sp),a0
    9eb8:	|  |   move.b #-128,116(a0)
    9ebe:	|  |   movea.l 4(sp),a0
    9ec2:	|  |   move.b 116(a0),d0
    9ec6:	|  |   movea.l 4(sp),a0
    9eca:	|  |   move.b d0,115(a0)
    9ece:	|  |   movea.l 4(sp),a0
    9ed2:	|  |   move.b 115(a0),d0
    9ed6:	|  |   movea.l 4(sp),a0
    9eda:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9ede:	|  |   movea.l 4(sp),a0
    9ee2:	|  |   st 117(a0)
			moveMe->transparency = 0;
    9ee6:	|  |   movea.l 4(sp),a0
    9eea:	|  |   clr.b 118(a0)
			break;
    9eee:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9ef2:	|  |   movea.l 4(sp),a0
    9ef6:	|  |   st 116(a0)
    9efa:	|  |   movea.l 4(sp),a0
    9efe:	|  |   move.b 116(a0),d0
    9f02:	|  |   movea.l 4(sp),a0
    9f06:	|  |   move.b d0,115(a0)
    9f0a:	|  |   movea.l 4(sp),a0
    9f0e:	|  |   move.b 115(a0),d0
    9f12:	|  |   movea.l 4(sp),a0
    9f16:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    9f1a:	|  |   movea.l 4(sp),a0
    9f1e:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    9f24:	|  |   movea.l 4(sp),a0
    9f28:	|  |   clr.b 118(a0)
			break;
    9f2c:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9f30:	|  |   movea.l 4(sp),a0
    9f34:	|  |   st 116(a0)
    9f38:	|  |   movea.l 4(sp),a0
    9f3c:	|  |   move.b 116(a0),d0
    9f40:	|  |   movea.l 4(sp),a0
    9f44:	|  |   move.b d0,115(a0)
    9f48:	|  |   movea.l 4(sp),a0
    9f4c:	|  |   move.b 115(a0),d0
    9f50:	|  |   movea.l 4(sp),a0
    9f54:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    9f58:	|  |   movea.l 4(sp),a0
    9f5c:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    9f62:	|  |   movea.l 4(sp),a0
    9f66:	|  |   clr.b 118(a0)
			break;
    9f6a:	|  +-- bra.w a01e <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9f6e:	|  |   movea.l 4(sp),a0
    9f72:	|  |   st 116(a0)
    9f76:	|  |   movea.l 4(sp),a0
    9f7a:	|  |   move.b 116(a0),d0
    9f7e:	|  |   movea.l 4(sp),a0
    9f82:	|  |   move.b d0,115(a0)
    9f86:	|  |   movea.l 4(sp),a0
    9f8a:	|  |   move.b 115(a0),d0
    9f8e:	|  |   movea.l 4(sp),a0
    9f92:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    9f96:	|  |   movea.l 4(sp),a0
    9f9a:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    9fa0:	|  |   movea.l 4(sp),a0
    9fa4:	|  |   clr.b 118(a0)
			break;
    9fa8:	|  +-- bra.s a01e <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    9faa:	|  |   movea.l 4(sp),a0
    9fae:	|  |   st 116(a0)
    9fb2:	|  |   movea.l 4(sp),a0
    9fb6:	|  |   move.b 116(a0),d0
    9fba:	|  |   movea.l 4(sp),a0
    9fbe:	|  |   move.b d0,115(a0)
    9fc2:	|  |   movea.l 4(sp),a0
    9fc6:	|  |   move.b 115(a0),d0
    9fca:	|  |   movea.l 4(sp),a0
    9fce:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    9fd2:	|  |   movea.l 4(sp),a0
    9fd6:	|  |   st 117(a0)
			moveMe->transparency = 0;
    9fda:	|  |   movea.l 4(sp),a0
    9fde:	|  |   clr.b 118(a0)
			break;
    9fe2:	|  +-- bra.s a01e <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    9fe4:	\--|-> movea.l 4(sp),a0
    9fe8:	   |   clr.b 116(a0)
    9fec:	   |   movea.l 4(sp),a0
    9ff0:	   |   move.b 116(a0),d0
    9ff4:	   |   movea.l 4(sp),a0
    9ff8:	   |   move.b d0,115(a0)
    9ffc:	   |   movea.l 4(sp),a0
    a000:	   |   move.b 115(a0),d0
    a004:	   |   movea.l 4(sp),a0
    a008:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    a00c:	   |   movea.l 4(sp),a0
    a010:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    a014:	   |   movea.l 4(sp),a0
    a018:	   |   clr.b 118(a0)
			break;
    a01c:	   |   nop
	}
}
    a01e:	   \-> nop
    a020:	       rts

0000a022 <shufflePeople>:

void shufflePeople () {
    a022:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    a026:	             move.l #100442,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    a02e:	             move.l 1885a <allPeople>,d0
    a034:	/----------- beq.w a10a <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    a038:	|     /----- bra.w a0fa <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    a03c:	|  /--|----> movea.l 16(sp),a0
    a040:	|  |  |      movea.l (a0),a0
    a042:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    a048:	|  |  |      movea.l 16(sp),a0
    a04c:	|  |  |      movea.l (a0),a0
    a04e:	|  |  |      move.l 106(a0),d0
    a052:	|  |  |      moveq #1,d1
    a054:	|  |  |      and.l d1,d0
    a056:	|  |  |  /-- beq.s a06e <shufflePeople+0x4c>
    a058:	|  |  |  |   move.l #1148846080,-(sp)
    a05e:	|  |  |  |   move.l 16(sp),-(sp)
    a062:	|  |  |  |   jsr 14d10 <__addsf3>
    a068:	|  |  |  |   addq.l #8,sp
    a06a:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    a06e:	|  |  |  \-> movea.l 16(sp),a0
    a072:	|  |  |      movea.l (a0),a0
    a074:	|  |  |      movea.l 24(a0),a0
    a078:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    a07e:	|  |  |      movea.l 16(sp),a0
    a082:	|  |  |      movea.l (a0),a0
    a084:	|  |  |      movea.l 24(a0),a0
    a088:	|  |  |      move.l 106(a0),d0
    a08c:	|  |  |      moveq #1,d1
    a08e:	|  |  |      and.l d1,d0
    a090:	|  |  |  /-- beq.s a0a8 <shufflePeople+0x86>
    a092:	|  |  |  |   move.l #1148846080,-(sp)
    a098:	|  |  |  |   move.l 12(sp),-(sp)
    a09c:	|  |  |  |   jsr 14d10 <__addsf3>
    a0a2:	|  |  |  |   addq.l #8,sp
    a0a4:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    a0a8:	|  |  |  \-> move.l 8(sp),-(sp)
    a0ac:	|  |  |      move.l 16(sp),-(sp)
    a0b0:	|  |  |      jsr 150ca <__gtsf2>
    a0b6:	|  |  |      addq.l #8,sp
    a0b8:	|  |  |      tst.l d0
    a0ba:	|  |  |  /-- ble.s a0ec <shufflePeople+0xca>
			A = (*thisReference);
    a0bc:	|  |  |  |   movea.l 16(sp),a0
    a0c0:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    a0c4:	|  |  |  |   movea.l 16(sp),a0
    a0c8:	|  |  |  |   movea.l (a0),a0
    a0ca:	|  |  |  |   move.l 24(a0),(sp)
			A->next = B->next;
    a0ce:	|  |  |  |   movea.l (sp),a0
    a0d0:	|  |  |  |   move.l 24(a0),d0
    a0d4:	|  |  |  |   movea.l 4(sp),a0
    a0d8:	|  |  |  |   move.l d0,24(a0)
			B->next = A;
    a0dc:	|  |  |  |   movea.l (sp),a0
    a0de:	|  |  |  |   move.l 4(sp),24(a0)
			(*thisReference) = B;
    a0e4:	|  |  |  |   movea.l 16(sp),a0
    a0e8:	|  |  |  |   move.l (sp),(a0)
    a0ea:	|  |  +--|-- bra.s a0fa <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    a0ec:	|  |  |  \-> movea.l 16(sp),a0
    a0f0:	|  |  |      move.l (a0),d0
    a0f2:	|  |  |      moveq #24,d1
    a0f4:	|  |  |      add.l d0,d1
    a0f6:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    a0fa:	|  |  \----> movea.l 16(sp),a0
    a0fe:	|  |         movea.l (a0),a0
    a100:	|  |         move.l 24(a0),d0
    a104:	|  \-------- bne.w a03c <shufflePeople+0x1a>
    a108:	|        /-- bra.s a10c <shufflePeople+0xea>
	if (!allPeople) return;
    a10a:	\--------|-> nop
		}
	}
}
    a10c:	         \-> lea 20(sp),sp
    a110:	             rts

0000a112 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    a112:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    a114:	       tst.l 8(sp)
    a118:	   /-- bgt.s a11e <setCharacterWalkSpeed+0xc>
    a11a:	   |   clr.w d0
    a11c:	/--|-- bra.s a13c <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    a11e:	|  \-> move.l 12(sp),-(sp)
    a122:	|      jsr 8b7a <findPerson>
    a128:	|      addq.l #4,sp
    a12a:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    a12c:	|  /-- bne.s a132 <setCharacterWalkSpeed+0x20>
    a12e:	|  |   clr.w d0
    a130:	+--|-- bra.s a13c <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    a132:	|  \-> movea.l (sp),a0
    a134:	|      move.l 8(sp),16(a0)
	return TRUE;
    a13a:	|      moveq #1,d0
}
    a13c:	\----> addq.l #4,sp
    a13e:	       rts

0000a140 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    a140:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    a142:	       move.l 8(sp),-(sp)
    a146:	       jsr 8b7a <findPerson>
    a14c:	       addq.l #4,sp
    a14e:	       move.l d0,(sp)
    if (thisPerson) {
    a150:	/----- beq.s a170 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    a152:	|      movea.l (sp),a0
    a154:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    a15a:	|      moveq #2,d0
    a15c:	|      and.l 12(sp),d0
    a160:	|  /-- beq.s a16c <setPersonExtra+0x2c>
    a162:	|  |   movea.l (sp),a0
    a164:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    a16c:	|  \-> moveq #1,d0
    a16e:	|  /-- bra.s a172 <setPersonExtra+0x32>
    }
    return FALSE;
    a170:	\--|-> clr.w d0
}
    a172:	   \-> addq.l #4,sp
    a174:	       rts

0000a176 <setScale>:


void setScale (short int h, short int d) {
    a176:	subq.l #4,sp
    a178:	move.l 8(sp),d1
    a17c:	move.l 12(sp),d0
    a180:	move.w d1,d1
    a182:	move.w d1,2(sp)
    a186:	move.w d0,d0
    a188:	move.w d0,(sp)
	scaleHorizon = h;
    a18a:	move.w 2(sp),18136 <scaleHorizon>
	scaleDivide = d;
    a192:	move.w (sp),18138 <scaleDivide>
}
    a198:	nop
    a19a:	addq.l #4,sp
    a19c:	rts

0000a19e <setShown>:

void setShown (BOOL h, int ob) {
    a19e:	    subq.l #8,sp
    a1a0:	    move.l 12(sp),d0
    a1a4:	    move.w d0,d0
    a1a6:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    a1aa:	    move.l 16(sp),-(sp)
    a1ae:	    jsr 8b7a <findPerson>
    a1b4:	    addq.l #4,sp
    a1b6:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    a1ba:	/-- beq.s a1c6 <setShown+0x28>
    a1bc:	|   movea.l 4(sp),a0
    a1c0:	|   move.w 2(sp),92(a0)
}
    a1c6:	\-> nop
    a1c8:	    addq.l #8,sp
    a1ca:	    rts

0000a1cc <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    a1cc:	       subq.l #8,sp
    a1ce:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    a1d0:	       movea.l 16(sp),a0
    a1d4:	       move.l 80(a0),d0
    a1d8:	       move.l d0,d1
    a1da:	       addi.l #360,d1
    a1e0:	       movea.l 16(sp),a0
    a1e4:	       move.l 84(a0),d0
    a1e8:	       move.l d1,d2
    a1ea:	       sub.l d0,d2
    a1ec:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    a1f0:	       movea.l 16(sp),a0
    a1f4:	       move.l 110(a0),d0
    a1f8:	   /-- beq.s a204 <spinStep+0x38>
    a1fa:	   |   movea.l 16(sp),a0
    a1fe:	   |   move.l 110(a0),d0
    a202:	/--|-- bra.s a21e <spinStep+0x52>
    a204:	|  \-> movea.l 16(sp),a0
    a208:	|      movea.l 68(a0),a0
    a20c:	|      move.l 4(a0),d0
    a210:	|      move.l d0,-(sp)
    a212:	|      pea 168 <decodeFilename+0x50>
    a216:	|      jsr 1555e <__divsi3>
    a21c:	|      addq.l #8,sp
    a21e:	\----> move.l d0,4(sp)
	while (diff > 180) {
    a222:	   /-- bra.s a22c <spinStep+0x60>
		diff -= 360;
    a224:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    a22c:	|  \-> cmpi.l #180,8(sp)
    a234:	\----- bgt.s a224 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    a236:	       move.l 8(sp),d0
    a23a:	       cmp.l 4(sp),d0
    a23e:	   /-- blt.s a25c <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    a240:	   |   movea.l 16(sp),a0
    a244:	   |   move.l 80(a0),d0
    a248:	   |   sub.l 4(sp),d0
    a24c:	   |   move.l d0,-(sp)
    a24e:	   |   move.l 20(sp),-(sp)
    a252:	   |   jsr a33c <turnMeAngle>
    a258:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    a25a:	/--|-- bra.s a2a2 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    a25c:	|  \-> move.l 4(sp),d0
    a260:	|      neg.l d0
    a262:	|      cmp.l 8(sp),d0
    a266:	|  /-- blt.s a284 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    a268:	|  |   movea.l 16(sp),a0
    a26c:	|  |   move.l 80(a0),d0
    a270:	|  |   add.l 4(sp),d0
    a274:	|  |   move.l d0,-(sp)
    a276:	|  |   move.l 20(sp),-(sp)
    a27a:	|  |   jsr a33c <turnMeAngle>
    a280:	|  |   addq.l #8,sp
}
    a282:	+--|-- bra.s a2a2 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    a284:	|  \-> movea.l 16(sp),a0
    a288:	|      move.l 84(a0),d0
    a28c:	|      move.l d0,-(sp)
    a28e:	|      move.l 20(sp),-(sp)
    a292:	|      jsr a33c <turnMeAngle>
    a298:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    a29a:	|      movea.l 16(sp),a0
    a29e:	|      clr.w 54(a0)
}
    a2a2:	\----> nop
    a2a4:	       move.l (sp)+,d2
    a2a6:	       addq.l #8,sp
    a2a8:	       rts

0000a2aa <stopPerson>:


BOOL stopPerson (int o) {
    a2aa:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    a2ac:	       move.l 8(sp),-(sp)
    a2b0:	       jsr 8b7a <findPerson>
    a2b6:	       addq.l #4,sp
    a2b8:	       move.l d0,(sp)
    if (moveMe)
    a2ba:	/----- beq.s a2f8 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    a2bc:	|      movea.l (sp),a0
    a2be:	|      move.l 56(a0),d0
    a2c2:	+----- beq.s a2f8 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    a2c4:	|      movea.l (sp),a0
    a2c6:	|      move.l 56(a0),d0
    a2ca:	|      move.l d0,-(sp)
    a2cc:	|      jsr 3090 <abortFunction>
    a2d2:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    a2d4:	|      movea.l (sp),a0
    a2d6:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    a2da:	|      movea.l (sp),a0
    a2dc:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    a2e0:	|      movea.l (sp),a0
    a2e2:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    a2e6:	|      clr.l -(sp)
    a2e8:	|      move.l 4(sp),-(sp)
    a2ec:	|      jsr 6826 <setFrames>
    a2f2:	|      addq.l #8,sp
            return TRUE;
    a2f4:	|      moveq #1,d0
    a2f6:	|  /-- bra.s a2fa <stopPerson+0x50>
        }
    return FALSE;
    a2f8:	\--|-> clr.w d0
}
    a2fa:	   \-> addq.l #4,sp
    a2fc:	       rts

0000a2fe <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    a2fe:	       subq.l #8,sp
	int total = 0;
    a300:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    a304:	       clr.l (sp)
    a306:	   /-- bra.s a328 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    a308:	/--|-> movea.l 12(sp),a0
    a30c:	|  |   movea.l 4(a0),a0
    a310:	|  |   move.l (sp),d1
    a312:	|  |   move.l d1,d0
    a314:	|  |   add.l d0,d0
    a316:	|  |   add.l d1,d0
    a318:	|  |   add.l d0,d0
    a31a:	|  |   add.l d0,d0
    a31c:	|  |   adda.l d0,a0
    a31e:	|  |   move.l 4(a0),d0
    a322:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    a326:	|  |   addq.l #1,(sp)
    a328:	|  \-> movea.l 12(sp),a0
    a32c:	|      move.l 8(a0),d0
    a330:	|      cmp.l (sp),d0
    a332:	\----- bgt.s a308 <timeForAnim+0xa>
	}
	return total;
    a334:	       move.l 4(sp),d0
}
    a338:	       addq.l #8,sp
    a33a:	       rts

0000a33c <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    a33c:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    a33e:	       movea.l 8(sp),a0
    a342:	       movea.l 68(a0),a0
    a346:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    a34a:	       movea.l 8(sp),a0
    a34e:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    a354:	       move.l (sp),-(sp)
    a356:	       pea b4 <_start+0xb4>
    a35a:	       jsr 1555e <__divsi3>
    a360:	       addq.l #8,sp
    a362:	       move.l d0,d1
    a364:	       addi.l #180,d1
    a36a:	       movea.l 8(sp),a0
    a36e:	       move.l 88(a0),d0
    a372:	       add.l d1,d0
    a374:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    a378:	   /-- bra.s a382 <turnMeAngle+0x46>
    a37a:	/--|-> addi.l #-360,12(sp)
    a382:	|  \-> cmpi.l #359,12(sp)
    a38a:	\----- bgt.s a37a <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    a38c:	       move.l (sp),-(sp)
    a38e:	       move.l 16(sp),-(sp)
    a392:	       jsr 154e0 <__mulsi3>
    a398:	       addq.l #8,sp
    a39a:	       pea 168 <decodeFilename+0x50>
    a39e:	       move.l d0,-(sp)
    a3a0:	       jsr 1555e <__divsi3>
    a3a6:	       addq.l #8,sp
    a3a8:	       movea.l 8(sp),a0
    a3ac:	       move.l d0,94(a0)
}
    a3b0:	       nop
    a3b2:	       addq.l #4,sp
    a3b4:	       rts

0000a3b6 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    a3b6:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    a3b8:	          move.l 8(sp),-(sp)
    a3bc:	          jsr 8b7a <findPerson>
    a3c2:	          addq.l #4,sp
    a3c4:	          move.l d0,(sp)
    if (thisPerson) {
    a3c6:	/-------- beq.s a426 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    a3c8:	|         movea.l (sp),a0
    a3ca:	|         move.l 56(a0),d0
    a3ce:	|     /-- beq.s a3e0 <turnPersonToFace+0x2a>
    a3d0:	|     |   movea.l (sp),a0
    a3d2:	|     |   move.l 56(a0),d0
    a3d6:	|     |   move.l d0,-(sp)
    a3d8:	|     |   jsr 3090 <abortFunction>
    a3de:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    a3e0:	|     \-> movea.l (sp),a0
    a3e2:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    a3e6:	|         movea.l (sp),a0
    a3e8:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    a3ec:	|         movea.l (sp),a0
    a3ee:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    a3f2:	|         move.l 12(sp),-(sp)
    a3f6:	|         move.l 4(sp),-(sp)
    a3fa:	|         jsr a33c <turnMeAngle>
    a400:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    a402:	|         movea.l 187fe <speech>,a0
    a408:	|         move.l (a0),d0
    a40a:	|         cmp.l (sp),d0
    a40c:	|  /----- bne.s a412 <turnPersonToFace+0x5c>
    a40e:	|  |      moveq #2,d0
    a410:	|  |  /-- bra.s a414 <turnPersonToFace+0x5e>
    a412:	|  \--|-> moveq #0,d0
    a414:	|     \-> move.l d0,-(sp)
    a416:	|         move.l 4(sp),-(sp)
    a41a:	|         jsr 6826 <setFrames>
    a420:	|         addq.l #8,sp
        return TRUE;
    a422:	|         moveq #1,d0
    a424:	|     /-- bra.s a428 <turnPersonToFace+0x72>
    }
    return FALSE;
    a426:	\-----|-> clr.w d0
}
    a428:	      \-> addq.l #4,sp
    a42a:	          rts

0000a42c <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    a42c:	                lea -20(sp),sp
    a430:	                move.l d3,-(sp)
    a432:	                move.l d2,-(sp)
    a434:	                move.l 36(sp),d0
    a438:	                move.w d0,d0
    a43a:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    a43e:	                cmpi.w #-1,10(sp)
    a444:	/-------------- bne.s a44c <walkMe+0x20>
    a446:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    a44c:	>-------------> movea.l 32(sp),a0
    a450:	|               move.l 36(a0),d0
    a454:	|               move.l d0,-(sp)
    a456:	|               jsr 14f5e <__floatsisf>
    a45c:	|               addq.l #4,sp
    a45e:	|               move.l d0,d1
    a460:	|               movea.l 32(sp),a0
    a464:	|               move.l (a0),d0
    a466:	|               move.l d0,-(sp)
    a468:	|               move.l d1,-(sp)
    a46a:	|               jsr 15252 <__subsf3>
    a470:	|               addq.l #8,sp
    a472:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    a476:	|               movea.l 32(sp),a0
    a47a:	|               move.l 40(a0),d0
    a47e:	|               move.l d0,-(sp)
    a480:	|               jsr 14f5e <__floatsisf>
    a486:	|               addq.l #4,sp
    a488:	|               move.l d0,d1
    a48a:	|               movea.l 32(sp),a0
    a48e:	|               move.l 4(a0),d0
    a492:	|               move.l d0,-(sp)
    a494:	|               move.l d1,-(sp)
    a496:	|               jsr 15252 <__subsf3>
    a49c:	|               addq.l #8,sp
    a49e:	|               move.l d0,-(sp)
    a4a0:	|               move.l d0,-(sp)
    a4a2:	|               jsr 14d10 <__addsf3>
    a4a8:	|               addq.l #8,sp
    a4aa:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    a4ae:	|               movea.l 32(sp),a0
    a4b2:	|               move.l 20(a0),d2
    a4b6:	|               movea.l 32(sp),a0
    a4ba:	|               move.l 16(a0),d0
    a4be:	|               move.l d0,-(sp)
    a4c0:	|               jsr 14f5e <__floatsisf>
    a4c6:	|               addq.l #4,sp
    a4c8:	|               move.l d0,-(sp)
    a4ca:	|               move.l d2,-(sp)
    a4cc:	|               jsr 15010 <__mulsf3>
    a4d2:	|               addq.l #8,sp
    a4d4:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    a4d8:	|               move.l 24(sp),-(sp)
    a4dc:	|               jsr 14e76 <__extendsfdf2>
    a4e2:	|               addq.l #4,sp
    a4e4:	|               move.l #-1717986918,-(sp)
    a4ea:	|               move.l #1070176665,-(sp)
    a4f0:	|               move.l d1,-(sp)
    a4f2:	|               move.l d0,-(sp)
    a4f4:	|               jsr 15136 <__ltdf2>
    a4fa:	|               lea 16(sp),sp
    a4fe:	|               tst.l d0
    a500:	|           /-- bge.s a50a <walkMe+0xde>
    a502:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    a50a:	|           \-> move.l 20(sp),-(sp)
    a50e:	|               jsr 14ef6 <__fixsfsi>
    a514:	|               addq.l #4,sp
    a516:	|               move.l d0,-(sp)
    a518:	|               jsr 7804 <TF_abs>
    a51e:	|               addq.l #4,sp
    a520:	|               move.l d0,d2
    a522:	|               move.l 16(sp),-(sp)
    a526:	|               jsr 14ef6 <__fixsfsi>
    a52c:	|               addq.l #4,sp
    a52e:	|               move.l d0,-(sp)
    a530:	|               jsr 7804 <TF_abs>
    a536:	|               addq.l #4,sp
    a538:	|               cmp.l d2,d0
    a53a:	|        /----- bgt.s a55e <walkMe+0x132>
    a53c:	|        |      move.l 20(sp),-(sp)
    a540:	|        |      jsr 14ef6 <__fixsfsi>
    a546:	|        |      addq.l #4,sp
    a548:	|        |      move.l d0,-(sp)
    a54a:	|        |      jsr 7804 <TF_abs>
    a550:	|        |      addq.l #4,sp
    a552:	|        |      move.l d0,-(sp)
    a554:	|        |      jsr 14f5e <__floatsisf>
    a55a:	|        |      addq.l #4,sp
    a55c:	|        |  /-- bra.s a57e <walkMe+0x152>
    a55e:	|        \--|-> move.l 16(sp),-(sp)
    a562:	|           |   jsr 14ef6 <__fixsfsi>
    a568:	|           |   addq.l #4,sp
    a56a:	|           |   move.l d0,-(sp)
    a56c:	|           |   jsr 7804 <TF_abs>
    a572:	|           |   addq.l #4,sp
    a574:	|           |   move.l d0,-(sp)
    a576:	|           |   jsr 14f5e <__floatsisf>
    a57c:	|           |   addq.l #4,sp
    a57e:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    a582:	|               move.l 12(sp),-(sp)
    a586:	|               jsr 14ef6 <__fixsfsi>
    a58c:	|               addq.l #4,sp
    a58e:	|               move.l d0,-(sp)
    a590:	|               jsr 7804 <TF_abs>
    a596:	|               addq.l #4,sp
    a598:	|               move.l d0,-(sp)
    a59a:	|               jsr 14f5e <__floatsisf>
    a5a0:	|               addq.l #4,sp
    a5a2:	|               move.l d0,-(sp)
    a5a4:	|               move.l 28(sp),-(sp)
    a5a8:	|               jsr 15184 <__ltsf2>
    a5ae:	|               addq.l #8,sp
    a5b0:	|               tst.l d0
    a5b2:	|        /----- bge.w a664 <walkMe+0x238>
			if (thisPerson->spinning) {
    a5b6:	|        |      movea.l 32(sp),a0
    a5ba:	|        |      move.w 54(a0),d0
    a5be:	|        |  /-- beq.s a5dc <walkMe+0x1b0>
				spinStep(thisPerson);
    a5c0:	|        |  |   move.l 32(sp),-(sp)
    a5c4:	|        |  |   jsr a1cc <spinStep>
    a5ca:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    a5cc:	|        |  |   pea 1 <_start+0x1>
    a5d0:	|        |  |   move.l 36(sp),-(sp)
    a5d4:	|        |  |   jsr 6826 <setFrames>
    a5da:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    a5dc:	|        |  \-> move.l 24(sp),-(sp)
    a5e0:	|        |      move.l 16(sp),-(sp)
    a5e4:	|        |      jsr 14e0a <__divsf3>
    a5ea:	|        |      addq.l #8,sp
    a5ec:	|        |      move.l d0,24(sp)
			if (move)
    a5f0:	|        |      tst.w 10(sp)
    a5f4:	|        |  /-- beq.s a65e <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    a5f6:	|        |  |   movea.l 32(sp),a0
    a5fa:	|        |  |   move.l 4(a0),d2
    a5fe:	|        |  |   move.l 24(sp),d0
    a602:	|        |  |   move.l d0,-(sp)
    a604:	|        |  |   move.l d0,-(sp)
    a606:	|        |  |   jsr 14d10 <__addsf3>
    a60c:	|        |  |   addq.l #8,sp
    a60e:	|        |  |   move.l d0,-(sp)
    a610:	|        |  |   move.l 20(sp),-(sp)
    a614:	|        |  |   jsr 14e0a <__divsf3>
    a61a:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    a61c:	|        |  |   move.l d0,-(sp)
    a61e:	|        |  |   move.l d2,-(sp)
    a620:	|        |  |   jsr 14d10 <__addsf3>
    a626:	|        |  |   addq.l #8,sp
    a628:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    a62a:	|        |  |   movea.l 32(sp),a0
    a62e:	|        |  |   move.l (a0),d3
    a630:	|        |  |   move.l 24(sp),-(sp)
    a634:	|        |  |   move.l 24(sp),-(sp)
    a638:	|        |  |   jsr 14e0a <__divsf3>
    a63e:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    a640:	|        |  |   move.l d0,-(sp)
    a642:	|        |  |   move.l d3,-(sp)
    a644:	|        |  |   jsr 14d10 <__addsf3>
    a64a:	|        |  |   addq.l #8,sp
    a64c:	|        |  |   move.l d2,-(sp)
    a64e:	|        |  |   move.l d0,-(sp)
    a650:	|        |  |   move.l 40(sp),-(sp)
    a654:	|        |  |   jsr 92c2 <moveAndScale>
    a65a:	|        |  |   lea 12(sp),sp
			return TRUE;
    a65e:	|        |  \-> moveq #1,d0
    a660:	|  /-----|----- bra.w a712 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    a664:	|  |     \----> movea.l 32(sp),a0
    a668:	|  |            move.l 44(a0),d0
    a66c:	|  |            moveq #-1,d1
    a66e:	|  |            cmp.l d0,d1
    a670:	|  |        /-- bne.s a6a8 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    a672:	|  |        |   movea.l 32(sp),a0
    a676:	|  |        |   move.l 98(a0),d0
    a67a:	|  |        |   moveq #-1,d1
    a67c:	|  |        |   cmp.l d0,d1
    a67e:	|  |  /-----|-- beq.s a6bc <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    a680:	|  |  |     |   movea.l 32(sp),a0
    a684:	|  |  |     |   move.l 98(a0),d0
    a688:	|  |  |     |   movea.l 32(sp),a0
    a68c:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    a690:	|  |  |     |   movea.l 32(sp),a0
    a694:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    a69a:	|  |  |     |   move.l 32(sp),-(sp)
    a69e:	|  |  |     |   jsr a1cc <spinStep>
    a6a4:	|  |  |     |   addq.l #4,sp
			}
			break;
    a6a6:	|  |  +-----|-- bra.s a6bc <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    a6a8:	|  |  |     \-> move.l 32(sp),-(sp)
    a6ac:	|  |  |         jsr 7f6c <doBorderStuff>
    a6b2:	|  |  |         addq.l #4,sp
    a6b4:	|  |  |         tst.w d0
    a6b6:	|  |  |  /----- beq.s a6c0 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    a6b8:	\--|--|--|----- bra.w a44c <walkMe+0x20>
			break;
    a6bc:	   |  \--|----> nop
    a6be:	   |     |  /-- bra.s a6c2 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    a6c0:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    a6c2:	   |        \-> movea.l 32(sp),a0
    a6c6:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    a6ca:	   |            clr.l -(sp)
    a6cc:	   |            move.l 36(sp),-(sp)
    a6d0:	   |            jsr 6826 <setFrames>
    a6d6:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    a6d8:	   |            movea.l 32(sp),a0
    a6dc:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    a6e0:	   |            move.l d0,-(sp)
    a6e2:	   |            jsr 14f5e <__floatsisf>
    a6e8:	   |            addq.l #4,sp
    a6ea:	   |            move.l d0,d2
				 thisPerson->walkToX,
    a6ec:	   |            movea.l 32(sp),a0
    a6f0:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    a6f4:	   |            move.l d0,-(sp)
    a6f6:	   |            jsr 14f5e <__floatsisf>
    a6fc:	   |            addq.l #4,sp
    a6fe:	   |            move.l d2,-(sp)
    a700:	   |            move.l d0,-(sp)
    a702:	   |            move.l 40(sp),-(sp)
    a706:	   |            jsr 92c2 <moveAndScale>
    a70c:	   |            lea 12(sp),sp
	return FALSE;
    a710:	   |            clr.w d0
}
    a712:	   \----------> move.l (sp)+,d2
    a714:	                move.l (sp)+,d3
    a716:	                lea 20(sp),sp
    a71a:	                rts

0000a71c <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    a71c:	             lea -20(sp),sp
    a720:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    a722:	             move.l 18882 <allLoadedBanks>,20(sp)
	while (returnMe) {
    a72a:	      /----- bra.s a75c <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
    a72c:	   /--|----> movea.l 20(sp),a0
    a730:	   |  |      move.l (a0),d0
    a732:	   |  |      cmp.l 28(sp),d0
    a736:	   |  |  /-- bne.s a752 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
    a738:	   |  |  |   movea.l 20(sp),a0
    a73c:	   |  |  |   move.l 4(a0),d0
    a740:	   |  |  |   addq.l #1,d0
    a742:	   |  |  |   movea.l 20(sp),a0
    a746:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
    a74a:	   |  |  |   move.l 20(sp),d0
    a74e:	/--|--|--|-- bra.w a812 <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
    a752:	|  |  |  \-> movea.l 20(sp),a0
    a756:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    a75c:	|  |  \----> tst.l 20(sp)
    a760:	|  \-------- bne.s a72c <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    a762:	|            moveq #26,d0
    a764:	|            move.l d0,16(sp)
    a768:	|            clr.l 12(sp)
    a76c:	|            move.l 187a2 <SysBase>,d0
    a772:	|            movea.l d0,a6
    a774:	|            move.l 16(sp),d0
    a778:	|            move.l 12(sp),d1
    a77c:	|            jsr -684(a6)
    a780:	|            move.l d0,8(sp)
    a784:	|            move.l 8(sp),d0
    a788:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    a78c:	|     /----- beq.w a810 <loadBankForAnim+0xf4>
		returnMe->ID = ID;
    a790:	|     |      movea.l 20(sp),a0
    a794:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &(returnMe->bank), FALSE)) {
    a798:	|     |      move.l 20(sp),d0
    a79c:	|     |      addq.l #8,d0
    a79e:	|     |      clr.l -(sp)
    a7a0:	|     |      move.l d0,-(sp)
    a7a2:	|     |      move.l 36(sp),-(sp)
    a7a6:	|     |      jsr 744e <loadSpriteBank>
    a7ac:	|     |      lea 12(sp),sp
    a7b0:	|     |      tst.w d0
    a7b2:	|     |  /-- beq.s a7e8 <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
    a7b4:	|     |  |   movea.l 20(sp),a0
    a7b8:	|     |  |   moveq #1,d0
    a7ba:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
    a7be:	|     |  |   move.l 18882 <allLoadedBanks>,d0
    a7c4:	|     |  |   movea.l 20(sp),a0
    a7c8:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    a7cc:	|     |  |   move.l 20(sp),18882 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    a7d4:	|     |  |   pea 16915 <PutChar+0x131f>
    a7da:	|     |  |   jsr 14b22 <KPrintF>
    a7e0:	|     |  |   addq.l #4,sp
			return returnMe;
    a7e2:	|     |  |   move.l 20(sp),d0
    a7e6:	+-----|--|-- bra.s a812 <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    a7e8:	|     |  \-> pea 16942 <PutChar+0x134c>
    a7ee:	|     |      jsr 14b22 <KPrintF>
    a7f4:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    a7f6:	|     |      move.l 20(sp),4(sp)
    a7fc:	|     |      move.l 187a2 <SysBase>,d0
    a802:	|     |      movea.l d0,a6
    a804:	|     |      movea.l 4(sp),a1
    a808:	|     |      jsr -690(a6)
			return NULL;
    a80c:	|     |      moveq #0,d0
    a80e:	+-----|----- bra.s a812 <loadBankForAnim+0xf6>
		}
	} else return NULL;
    a810:	|     \----> moveq #0,d0
}
    a812:	\----------> movea.l (sp)+,a6
    a814:	             lea 20(sp),sp
    a818:	             rts

0000a81a <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    a81a:	       subq.l #8,sp
    a81c:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    a81e:	   /-- bra.s a84e <clearStackLib+0x34>
		k = stackLib;
    a820:	/--|-> move.l 1888a <stackLib>,8(sp)
		stackLib = stackLib -> next;
    a828:	|  |   movea.l 1888a <stackLib>,a0
    a82e:	|  |   move.l 4(a0),d0
    a832:	|  |   move.l d0,1888a <stackLib>
		FreeVec(k);
    a838:	|  |   move.l 8(sp),4(sp)
    a83e:	|  |   move.l 187a2 <SysBase>,d0
    a844:	|  |   movea.l d0,a6
    a846:	|  |   movea.l 4(sp),a1
    a84a:	|  |   jsr -690(a6)
	while (stackLib) {
    a84e:	|  \-> move.l 1888a <stackLib>,d0
    a854:	\----- bne.s a820 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    a856:	       clr.l 18886 <stackLibTotal>
}
    a85c:	       nop
    a85e:	       movea.l (sp)+,a6
    a860:	       addq.l #8,sp
    a862:	       rts

0000a864 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    a864:	          lea -128(sp),sp
    a868:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    a86c:	      /-- bra.s a87e <loadGame+0x1a>
    a86e:	   /--|-> move.l 1873a <allRunningFunctions>,d0
    a874:	   |  |   move.l d0,-(sp)
    a876:	   |  |   jsr 40aa <finishFunction>
    a87c:	   |  |   addq.l #4,sp
    a87e:	   |  \-> move.l 1873a <allRunningFunctions>,d0
    a884:	   \----- bne.s a86e <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    a886:	          pea 1888e <ssgVersion>
    a88c:	          pea 169a0 <PutChar+0x13aa>
    a892:	          pea 41 <_start+0x41>
    a896:	          pea 53 <_start+0x53>
    a89a:	          move.l 160(sp),-(sp)
    a89e:	          jsr 4bd2 <openAndVerify>
    a8a4:	          lea 20(sp),sp
    a8a8:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    a8ac:	      /-- bne.s a8b4 <loadGame+0x50>
    a8ae:	      |   clr.w d0
    a8b0:	/-----|-- bra.w ab5a <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    a8b4:	|     \-> move.l 112(sp),108(sp)
    a8ba:	|         lea 140(sp),a0
    a8be:	|         lea -126(a0),a0
    a8c2:	|         move.l a0,120(sp)
    a8c6:	|         moveq #8,d0
    a8c8:	|         move.l d0,116(sp)
    a8cc:	|         move.l 187aa <DOSBase>,d0
    a8d2:	|         movea.l d0,a6
    a8d4:	|         move.l 108(sp),d1
    a8d8:	|         move.l 120(sp),d2
    a8dc:	|         move.l 116(sp),d3
    a8e0:	|         jsr -42(a6)
    a8e4:	|         move.l d0,132(sp)
    a8e8:	|         move.l 132(sp),d0
    a8ec:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    a8f0:	|         moveq #8,d0
    a8f2:	|         cmp.l 128(sp),d0
    a8f6:	|     /-- beq.s a906 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    a8f8:	|     |   pea 169c1 <PutChar+0x13cb>
    a8fe:	|     |   jsr 14b22 <KPrintF>
    a904:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    a906:	|     \-> move.l 14(sp),d1
    a90a:	|         move.l 18744 <fileTime>,d0
    a910:	|         cmp.l d1,d0
    a912:	|     /-- bne.s a922 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    a914:	|     |   move.l 18(sp),d1
    a918:	|     |   move.l 18748 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    a91e:	|     |   cmp.l d1,d0
    a920:	|  /--|-- beq.s a942 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    a922:	|  |  \-> move.l 144(sp),-(sp)
    a926:	|  |      pea 169dd <PutChar+0x13e7>
    a92c:	|  |      pea 16aa4 <PutChar+0x14ae>
    a932:	|  |      jsr 14b22 <KPrintF>
    a938:	|  |      lea 12(sp),sp
		return FALSE; 
    a93c:	|  |      clr.w d0
    a93e:	+--|----- bra.w ab5a <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    a942:	|  \----> move.l 112(sp),124(sp)
    a948:	|         move.l 187aa <DOSBase>,d0
    a94e:	|         movea.l d0,a6
    a950:	|         move.l 124(sp),d1
    a954:	|         jsr -306(a6)
    a958:	|         move.l d0,136(sp)
    a95c:	|         move.l 136(sp),d0
    a960:	|         move.l d0,d0
    a962:	|         move.w d0,18000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    a968:	|         move.l 112(sp),100(sp)
    a96e:	|         move.l 187aa <DOSBase>,d0
    a974:	|         movea.l d0,a6
    a976:	|         move.l 100(sp),d1
    a97a:	|         jsr -306(a6)
    a97e:	|         move.l d0,96(sp)
    a982:	|         move.l 96(sp),d0
    a986:	|         move.l d0,d0
    a988:	|         move.w d0,18742 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    a98e:	|         move.l 112(sp),92(sp)
    a994:	|         move.l 187aa <DOSBase>,d0
    a99a:	|         movea.l d0,a6
    a99c:	|         move.l 92(sp),d1
    a9a0:	|         jsr -306(a6)
    a9a4:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    a9a8:	|         move.l 112(sp),84(sp)
    a9ae:	|         move.l 187aa <DOSBase>,d0
    a9b4:	|         movea.l d0,a6
    a9b6:	|         move.l 84(sp),d1
    a9ba:	|         jsr -306(a6)
    a9be:	|         move.l d0,80(sp)
    a9c2:	|         move.l 80(sp),d0
    a9c6:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    a9ca:	|     /-- beq.s a9fe <loadGame+0x19a>
		fontNum = get2bytes (fp);
    a9cc:	|     |   move.l 112(sp),-(sp)
    a9d0:	|     |   jsr 6bc <get2bytes>
    a9d6:	|     |   addq.l #4,sp
    a9d8:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    a9dc:	|     |   move.l 112(sp),-(sp)
    a9e0:	|     |   jsr 6bc <get2bytes>
    a9e6:	|     |   addq.l #4,sp
    a9e8:	|     |   move.l d0,188ea <fontHeight>
		charOrder = readString(fp);		
    a9ee:	|     |   move.l 112(sp),-(sp)
    a9f2:	|     |   jsr b02 <readString>
    a9f8:	|     |   addq.l #4,sp
    a9fa:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    a9fe:	|     \-> move.l 104(sp),70(sp)
    aa04:	|         move.l 187a2 <SysBase>,d0
    aa0a:	|         movea.l d0,a6
    aa0c:	|         movea.l 70(sp),a1
    aa10:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    aa14:	|         move.l 112(sp),-(sp)
    aa18:	|         jsr 854 <getSigned>
    aa1e:	|         addq.l #4,sp
    aa20:	|         move.w d0,186a8 <fontSpace>

	killAllPeople ();
    aa26:	|         jsr 8f64 <killAllPeople>
	killAllRegions ();
    aa2c:	|         jsr 135d2 <killAllRegions>

	int camerX = get2bytes (fp);
    aa32:	|         move.l 112(sp),-(sp)
    aa36:	|         jsr 6bc <get2bytes>
    aa3c:	|         addq.l #4,sp
    aa3e:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    aa42:	|         move.l 112(sp),-(sp)
    aa46:	|         jsr 6bc <get2bytes>
    aa4c:	|         addq.l #4,sp
    aa4e:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    aa52:	|         move.l 112(sp),-(sp)
    aa56:	|         jsr 7d8 <getFloat>
    aa5c:	|         addq.l #4,sp
    aa5e:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    aa62:	|         move.l 112(sp),54(sp)
    aa68:	|         move.l 187aa <DOSBase>,d0
    aa6e:	|         movea.l d0,a6
    aa70:	|         move.l 54(sp),d1
    aa74:	|         jsr -306(a6)
    aa78:	|         move.l d0,50(sp)
    aa7c:	|         move.l 50(sp),d0
    aa80:	|         move.l d0,d0
    aa82:	|         move.b d0,1811a <brightnessLevel>

	loadHandlers (fp);
    aa88:	|         move.l 112(sp),-(sp)
    aa8c:	|         jsr 4b32 <loadHandlers>
    aa92:	|         addq.l #4,sp
	loadRegions (fp);
    aa94:	|         move.l 112(sp),-(sp)
    aa98:	|         jsr 1362e <loadRegions>
    aa9e:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    aaa0:	|         moveq #12,d0
    aaa2:	|         move.l d0,46(sp)
    aaa6:	|         clr.l 42(sp)
    aaaa:	|         move.l 187a2 <SysBase>,d0
    aab0:	|         movea.l d0,a6
    aab2:	|         move.l 46(sp),d0
    aab6:	|         move.l 42(sp),d1
    aaba:	|         jsr -684(a6)
    aabe:	|         move.l d0,38(sp)
    aac2:	|         move.l 38(sp),d0
    aac6:	|         move.l d0,186aa <mouseCursorAnim>
	if (! mouseCursorAnim) {
    aacc:	|         move.l 186aa <mouseCursorAnim>,d0
    aad2:	|     /-- bne.s aae6 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    aad4:	|     |   pea 16aae <PutChar+0x14b8>
    aada:	|     |   jsr 14b22 <KPrintF>
    aae0:	|     |   addq.l #4,sp
		return FALSE;
    aae2:	|     |   clr.w d0
    aae4:	+-----|-- bra.s ab5a <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    aae6:	|     \-> jsr b7b6 <nosnapshot>
	if (FGetC (fp)) {
    aaec:	|         move.l 112(sp),34(sp)
    aaf2:	|         move.l 187aa <DOSBase>,d0
    aaf8:	|         movea.l d0,a6
    aafa:	|         move.l 34(sp),d1
    aafe:	|         jsr -306(a6)
    ab02:	|         move.l d0,30(sp)
    ab06:	|         move.l 30(sp),d0
    ab0a:	|     /-- beq.s ab20 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    ab0c:	|     |   move.l 112(sp),-(sp)
    ab10:	|     |   jsr b82a <restoreSnapshot>
    ab16:	|     |   addq.l #4,sp
    ab18:	|     |   tst.w d0
    ab1a:	|     +-- bne.s ab20 <loadGame+0x2bc>
    ab1c:	|     |   clr.w d0
    ab1e:	+-----|-- bra.s ab5a <loadGame+0x2f6>
	}

	Close (fp);
    ab20:	|     \-> move.l 112(sp),26(sp)
    ab26:	|         move.l 187aa <DOSBase>,d0
    ab2c:	|         movea.l d0,a6
    ab2e:	|         move.l 26(sp),d1
    ab32:	|         jsr -36(a6)
    ab36:	|         move.l d0,22(sp)
	clearStackLib ();
    ab3a:	|         jsr a81a <clearStackLib>

	cameraX = camerX;
    ab40:	|         move.l 66(sp),188b0 <cameraX>
	cameraY = camerY;
    ab48:	|         move.l 62(sp),188b4 <cameraY>
	cameraZoom = camerZ;
    ab50:	|         move.l 58(sp),18142 <cameraZoom>

	return TRUE;
    ab58:	|         moveq #1,d0
}
    ab5a:	\-------> movem.l (sp)+,d2-d3/a6
    ab5e:	          lea 128(sp),sp
    ab62:	          rts

0000ab64 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    ab64:	   /-> lea -64(sp),sp
    ab68:	   |   move.l a6,-(sp)
    ab6a:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    ab6c:	   |   movea.l 76(sp),a0
    ab70:	   |   move.l (a0),d0
    ab72:	   |   move.l 80(sp),-(sp)
    ab76:	   |   move.l d0,-(sp)
    ab78:	   |   jsr 8d0 <put2bytes>
    ab7e:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    ab80:	   |   movea.l 76(sp),a0
    ab84:	   |   move.l 40(a0),d0
    ab88:	/--|-- beq.s abc4 <saveFunction+0x60>
		FPutC (fp, 1);
    ab8a:	|  |   move.l 80(sp),52(sp)
    ab90:	|  |   moveq #1,d0
    ab92:	|  |   move.l d0,48(sp)
    ab96:	|  |   move.l 187aa <DOSBase>,d0
    ab9c:	|  |   movea.l d0,a6
    ab9e:	|  |   move.l 52(sp),d1
    aba2:	|  |   move.l 48(sp),d2
    aba6:	|  |   jsr -312(a6)
    abaa:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    abae:	|  |   movea.l 76(sp),a0
    abb2:	|  |   move.l 40(a0),d0
    abb6:	|  |   move.l 80(sp),-(sp)
    abba:	|  |   move.l d0,-(sp)
    abbc:	|  \-- jsr ab64 <saveFunction>(pc)
    abc0:	|      addq.l #8,sp
    abc2:	|  /-- bra.s abe6 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    abc4:	\--|-> move.l 80(sp),64(sp)
    abca:	   |   clr.l 60(sp)
    abce:	   |   move.l 187aa <DOSBase>,d0
    abd4:	   |   movea.l d0,a6
    abd6:	   |   move.l 64(sp),d1
    abda:	   |   move.l 60(sp),d2
    abde:	   |   jsr -312(a6)
    abe2:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    abe6:	   \-> movea.l 76(sp),a0
    abea:	       move.l 12(a0),d0
    abee:	       move.l 80(sp),-(sp)
    abf2:	       move.l d0,-(sp)
    abf4:	       jsr 958 <put4bytes>
    abfa:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    abfc:	       movea.l 76(sp),a0
    ac00:	       move.l 36(a0),d0
    ac04:	       move.l 80(sp),-(sp)
    ac08:	       move.l d0,-(sp)
    ac0a:	       jsr 8d0 <put2bytes>
    ac10:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    ac12:	       move.l 80(sp),40(sp)
    ac18:	       movea.l 76(sp),a0
    ac1c:	       move.w 54(a0),d0
    ac20:	       movea.w d0,a0
    ac22:	       move.l a0,36(sp)
    ac26:	       move.l 187aa <DOSBase>,d0
    ac2c:	       movea.l d0,a6
    ac2e:	       move.l 40(sp),d1
    ac32:	       move.l 36(sp),d2
    ac36:	       jsr -312(a6)
    ac3a:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    ac3e:	       move.l 80(sp),28(sp)
    ac44:	       movea.l 76(sp),a0
    ac48:	       move.w 48(a0),d0
    ac4c:	       movea.w d0,a0
    ac4e:	       move.l a0,24(sp)
    ac52:	       move.l 187aa <DOSBase>,d0
    ac58:	       movea.l d0,a6
    ac5a:	       move.l 28(sp),d1
    ac5e:	       move.l 24(sp),d2
    ac62:	       jsr -312(a6)
    ac66:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    ac6a:	       move.l 80(sp),16(sp)
    ac70:	       movea.l 76(sp),a0
    ac74:	       move.w 50(a0),d0
    ac78:	       movea.w d0,a0
    ac7a:	       move.l a0,12(sp)
    ac7e:	       move.l 187aa <DOSBase>,d0
    ac84:	       movea.l d0,a6
    ac86:	       move.l 16(sp),d1
    ac8a:	       move.l 12(sp),d2
    ac8e:	       jsr -312(a6)
    ac92:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    ac96:	       moveq #28,d0
    ac98:	       add.l 76(sp),d0
    ac9c:	       move.l 80(sp),-(sp)
    aca0:	       move.l d0,-(sp)
    aca2:	       jsr b420 <saveVariable>
    aca8:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    acaa:	       movea.l 76(sp),a0
    acae:	       move.b 56(a0),d0
    acb2:	   /-- beq.s acc2 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    acb4:	   |   pea 16acf <PutChar+0x14d9>
    acba:	   |   jsr 14b22 <KPrintF>
    acc0:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    acc2:	   \-> movea.l 76(sp),a0
    acc6:	       move.l 24(a0),d0
    acca:	       move.l 80(sp),-(sp)
    acce:	       move.l d0,-(sp)
    acd0:	       jsr b294 <saveStack>
    acd6:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    acd8:	       clr.l 68(sp)
    acdc:	   /-- bra.s ad00 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    acde:	/--|-> movea.l 76(sp),a0
    ace2:	|  |   move.l 20(a0),d1
    ace6:	|  |   move.l 68(sp),d0
    acea:	|  |   lsl.l #3,d0
    acec:	|  |   add.l d1,d0
    acee:	|  |   move.l 80(sp),-(sp)
    acf2:	|  |   move.l d0,-(sp)
    acf4:	|  |   jsr b420 <saveVariable>
    acfa:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    acfc:	|  |   addq.l #1,68(sp)
    ad00:	|  \-> movea.l 76(sp),a0
    ad04:	|      move.l 8(a0),d0
    ad08:	|      cmp.l 68(sp),d0
    ad0c:	\----- bgt.s acde <saveFunction+0x17a>
	}
}
    ad0e:	       nop
    ad10:	       nop
    ad12:	       move.l (sp)+,d2
    ad14:	       movea.l (sp)+,a6
    ad16:	       lea 64(sp),sp
    ad1a:	       rts

0000ad1c <saveGame>:

BOOL saveGame (char * fname) {
    ad1c:	          lea -272(sp),sp
    ad20:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    ad24:	          move.l 288(sp),268(sp)
    ad2a:	          move.l #1006,264(sp)
    ad32:	          move.l 187aa <DOSBase>,d0
    ad38:	          movea.l d0,a6
    ad3a:	          move.l 268(sp),d1
    ad3e:	          move.l 264(sp),d2
    ad42:	          jsr -30(a6)
    ad46:	          move.l d0,260(sp)
    ad4a:	          move.l 260(sp),d0
    ad4e:	          move.l d0,256(sp)
	if (fp == NULL) {
    ad52:	      /-- bne.s ad68 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    ad54:	      |   pea 16af1 <PutChar+0x14fb>
    ad5a:	      |   jsr 14b22 <KPrintF>
    ad60:	      |   addq.l #4,sp
		return FALSE;
    ad62:	      |   clr.w d0
    ad64:	/-----|-- bra.w b28a <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    ad68:	|     \-> move.l 256(sp),252(sp)
    ad6e:	|         move.l #92942,248(sp)
    ad76:	|         moveq #6,d0
    ad78:	|         move.l d0,244(sp)
    ad7c:	|         move.l 187aa <DOSBase>,d0
    ad82:	|         movea.l d0,a6
    ad84:	|         move.l 252(sp),d1
    ad88:	|         move.l 248(sp),d2
    ad8c:	|         move.l 244(sp),d3
    ad90:	|         jsr -48(a6)
    ad94:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    ad98:	|         move.l 256(sp),236(sp)
    ad9e:	|         clr.l 232(sp)
    ada2:	|         move.l 187aa <DOSBase>,d0
    ada8:	|         movea.l d0,a6
    adaa:	|         move.l 236(sp),d1
    adae:	|         move.l 232(sp),d2
    adb2:	|         jsr -312(a6)
    adb6:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    adba:	|         move.l 256(sp),224(sp)
    adc0:	|         clr.l 220(sp)
    adc4:	|         move.l 187aa <DOSBase>,d0
    adca:	|         movea.l d0,a6
    adcc:	|         move.l 224(sp),d1
    add0:	|         move.l 220(sp),d2
    add4:	|         jsr -312(a6)
    add8:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    addc:	|         move.l 256(sp),212(sp)
    ade2:	|         moveq #2,d0
    ade4:	|         move.l d0,208(sp)
    ade8:	|         move.l 187aa <DOSBase>,d0
    adee:	|         movea.l d0,a6
    adf0:	|         move.l 212(sp),d1
    adf4:	|         move.l 208(sp),d2
    adf8:	|         jsr -312(a6)
    adfc:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    ae00:	|         move.l 256(sp),200(sp)
    ae06:	|         moveq #2,d0
    ae08:	|         move.l d0,196(sp)
    ae0c:	|         move.l 187aa <DOSBase>,d0
    ae12:	|         movea.l d0,a6
    ae14:	|         move.l 200(sp),d1
    ae18:	|         move.l 196(sp),d2
    ae1c:	|         jsr -312(a6)
    ae20:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    ae24:	|         move.l 256(sp),188(sp)
    ae2a:	|         move.l #100164,184(sp)
    ae32:	|         moveq #8,d0
    ae34:	|         move.l d0,180(sp)
    ae38:	|         move.l 187aa <DOSBase>,d0
    ae3e:	|         movea.l d0,a6
    ae40:	|         move.l 188(sp),d1
    ae44:	|         move.l 184(sp),d2
    ae48:	|         move.l 180(sp),d3
    ae4c:	|         jsr -48(a6)
    ae50:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    ae54:	|         move.l 256(sp),172(sp)
    ae5a:	|         move.w 18000 <allowAnyFilename>,d0
    ae60:	|         movea.w d0,a0
    ae62:	|         move.l a0,168(sp)
    ae66:	|         move.l 187aa <DOSBase>,d0
    ae6c:	|         movea.l d0,a6
    ae6e:	|         move.l 172(sp),d1
    ae72:	|         move.l 168(sp),d2
    ae76:	|         jsr -312(a6)
    ae7a:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    ae7e:	|         move.l 256(sp),160(sp)
    ae84:	|         move.w 18742 <captureAllKeys>,d0
    ae8a:	|         movea.w d0,a0
    ae8c:	|         move.l a0,156(sp)
    ae90:	|         move.l 187aa <DOSBase>,d0
    ae96:	|         movea.l d0,a6
    ae98:	|         move.l 160(sp),d1
    ae9c:	|         move.l 156(sp),d2
    aea0:	|         jsr -312(a6)
    aea4:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    aea8:	|         move.l 256(sp),148(sp)
    aeae:	|         moveq #1,d0
    aeb0:	|         move.l d0,144(sp)
    aeb4:	|         move.l 187aa <DOSBase>,d0
    aeba:	|         movea.l d0,a6
    aebc:	|         move.l 148(sp),d1
    aec0:	|         move.l 144(sp),d2
    aec4:	|         jsr -312(a6)
    aec8:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    aecc:	|         move.l 256(sp),136(sp)
    aed2:	|         move.l 188f6 <fontTableSize>,d0
    aed8:	|         sgt d0
    aeda:	|         neg.b d0
    aedc:	|         move.b d0,d0
    aede:	|         andi.l #255,d0
    aee4:	|         move.l d0,132(sp)
    aee8:	|         move.l 187aa <DOSBase>,d0
    aeee:	|         movea.l d0,a6
    aef0:	|         move.l 136(sp),d1
    aef4:	|         move.l 132(sp),d2
    aef8:	|         jsr -312(a6)
    aefc:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    af00:	|         move.l 188f6 <fontTableSize>,d0
    af06:	|     /-- ble.s af44 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    af08:	|     |   move.l 188ee <loadedFontNum>,d0
    af0e:	|     |   move.l 256(sp),-(sp)
    af12:	|     |   move.l d0,-(sp)
    af14:	|     |   jsr 8d0 <put2bytes>
    af1a:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    af1c:	|     |   move.l 188ea <fontHeight>,d0
    af22:	|     |   move.l 256(sp),-(sp)
    af26:	|     |   move.l d0,-(sp)
    af28:	|     |   jsr 8d0 <put2bytes>
    af2e:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    af30:	|     |   move.l 188f2 <fontOrderString>,d0
    af36:	|     |   move.l 256(sp),-(sp)
    af3a:	|     |   move.l d0,-(sp)
    af3c:	|     |   jsr bd8 <writeString>
    af42:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    af44:	|     \-> move.w 186a8 <fontSpace>,d0
    af4a:	|         movea.w d0,a0
    af4c:	|         move.l 256(sp),-(sp)
    af50:	|         move.l a0,-(sp)
    af52:	|         jsr a9c <putSigned>
    af58:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    af5a:	|         move.l 188b0 <cameraX>,d0
    af60:	|         move.l 256(sp),-(sp)
    af64:	|         move.l d0,-(sp)
    af66:	|         jsr 8d0 <put2bytes>
    af6c:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    af6e:	|         move.l 188b4 <cameraY>,d0
    af74:	|         move.l 256(sp),-(sp)
    af78:	|         move.l d0,-(sp)
    af7a:	|         jsr 8d0 <put2bytes>
    af80:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    af82:	|         move.l 18142 <cameraZoom>,d0
    af88:	|         move.l 256(sp),-(sp)
    af8c:	|         move.l d0,-(sp)
    af8e:	|         jsr a46 <putFloat>
    af94:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    af96:	|         move.l 256(sp),124(sp)
    af9c:	|         move.b 1811a <brightnessLevel>,d0
    afa2:	|         move.b d0,d0
    afa4:	|         andi.l #255,d0
    afaa:	|         move.l d0,120(sp)
    afae:	|         move.l 187aa <DOSBase>,d0
    afb4:	|         movea.l d0,a6
    afb6:	|         move.l 124(sp),d1
    afba:	|         move.l 120(sp),d2
    afbe:	|         jsr -312(a6)
    afc2:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    afc6:	|         move.l 256(sp),-(sp)
    afca:	|         jsr 50b6 <saveHandlers>
    afd0:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    afd2:	|         move.l 256(sp),-(sp)
    afd6:	|         jsr 137e8 <saveRegions>
    afdc:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    afde:	|         move.l 186aa <mouseCursorAnim>,d0
    afe4:	|         move.l 256(sp),-(sp)
    afe8:	|         move.l d0,-(sp)
    afea:	|         jsr 94c6 <saveAnim>
    aff0:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    aff2:	|         move.l 186ae <mouseCursorFrameNum>,d0
    aff8:	|         move.l 256(sp),-(sp)
    affc:	|         move.l d0,-(sp)
    affe:	|         jsr 8d0 <put2bytes>
    b004:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    b006:	|         move.l 1873a <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    b00e:	|         clr.l 272(sp)
	while (thisFunction) {
    b012:	|     /-- bra.s b022 <saveGame+0x306>
		countFunctions ++;
    b014:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    b018:	|  |  |   movea.l 276(sp),a0
    b01c:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    b022:	|  |  \-> tst.l 276(sp)
    b026:	|  \----- bne.s b014 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    b028:	|         move.l 256(sp),-(sp)
    b02c:	|         move.l 276(sp),-(sp)
    b030:	|         jsr 8d0 <put2bytes>
    b036:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    b038:	|         move.l 1873a <allRunningFunctions>,276(sp)
	while (thisFunction) {
    b040:	|     /-- bra.s b05c <saveGame+0x340>
		saveFunction (thisFunction, fp);
    b042:	|  /--|-> move.l 256(sp),-(sp)
    b046:	|  |  |   move.l 280(sp),-(sp)
    b04a:	|  |  |   jsr ab64 <saveFunction>
    b050:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    b052:	|  |  |   movea.l 276(sp),a0
    b056:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    b05c:	|  |  \-> tst.l 276(sp)
    b060:	|  \----- bne.s b042 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    b062:	|         clr.l 280(sp)
    b066:	|     /-- bra.s b088 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    b068:	|  /--|-> move.l 18750 <globalVars>,d1
    b06e:	|  |  |   move.l 280(sp),d0
    b072:	|  |  |   lsl.l #3,d0
    b074:	|  |  |   add.l d1,d0
    b076:	|  |  |   move.l 256(sp),-(sp)
    b07a:	|  |  |   move.l d0,-(sp)
    b07c:	|  |  |   jsr b420 <saveVariable>
    b082:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    b084:	|  |  |   addq.l #1,280(sp)
    b088:	|  |  \-> move.l 1877a <numGlobals>,d0
    b08e:	|  |      cmp.l 280(sp),d0
    b092:	|  \----- bgt.s b068 <saveGame+0x34c>
	}

	savePeople (fp);
    b094:	|         move.l 256(sp),-(sp)
    b098:	|         jsr 95ee <savePeople>
    b09e:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    b0a0:	|         movea.l 18902 <currentFloor>,a0
    b0a6:	|         move.l 8(a0),d0
    b0aa:	|  /----- beq.s b0e8 <saveGame+0x3cc>
		FPutC (fp, 1);
    b0ac:	|  |      move.l 256(sp),100(sp)
    b0b2:	|  |      moveq #1,d0
    b0b4:	|  |      move.l d0,96(sp)
    b0b8:	|  |      move.l 187aa <DOSBase>,d0
    b0be:	|  |      movea.l d0,a6
    b0c0:	|  |      move.l 100(sp),d1
    b0c4:	|  |      move.l 96(sp),d2
    b0c8:	|  |      jsr -312(a6)
    b0cc:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    b0d0:	|  |      movea.l 18902 <currentFloor>,a0
    b0d6:	|  |      move.l (a0),d0
    b0d8:	|  |      move.l 256(sp),-(sp)
    b0dc:	|  |      move.l d0,-(sp)
    b0de:	|  |      jsr 8d0 <put2bytes>
    b0e4:	|  |      addq.l #8,sp
    b0e6:	|  |  /-- bra.s b10a <saveGame+0x3ee>
	} else FPutC (fp, 0);
    b0e8:	|  \--|-> move.l 256(sp),112(sp)
    b0ee:	|     |   clr.l 108(sp)
    b0f2:	|     |   move.l 187aa <DOSBase>,d0
    b0f8:	|     |   movea.l d0,a6
    b0fa:	|     |   move.l 112(sp),d1
    b0fe:	|     |   move.l 108(sp),d2
    b102:	|     |   jsr -312(a6)
    b106:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    b10a:	|     \-> move.l 18852 <zBuffer+0x50>,d0
    b110:	|  /----- beq.s b14c <saveGame+0x430>
		FPutC (fp, 1);
    b112:	|  |      move.l 256(sp),76(sp)
    b118:	|  |      moveq #1,d0
    b11a:	|  |      move.l d0,72(sp)
    b11e:	|  |      move.l 187aa <DOSBase>,d0
    b124:	|  |      movea.l d0,a6
    b126:	|  |      move.l 76(sp),d1
    b12a:	|  |      move.l 72(sp),d2
    b12e:	|  |      jsr -312(a6)
    b132:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    b136:	|  |      move.l 1884e <zBuffer+0x4c>,d0
    b13c:	|  |      move.l 256(sp),-(sp)
    b140:	|  |      move.l d0,-(sp)
    b142:	|  |      jsr 8d0 <put2bytes>
    b148:	|  |      addq.l #8,sp
    b14a:	|  |  /-- bra.s b16e <saveGame+0x452>
	} else FPutC (fp,0);
    b14c:	|  \--|-> move.l 256(sp),88(sp)
    b152:	|     |   clr.l 84(sp)
    b156:	|     |   move.l 187aa <DOSBase>,d0
    b15c:	|     |   movea.l d0,a6
    b15e:	|     |   move.l 88(sp),d1
    b162:	|     |   move.l 84(sp),d2
    b166:	|     |   jsr -312(a6)
    b16a:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    b16e:	|     \-> move.l 256(sp),64(sp)
    b174:	|         move.l 188c4 <speechMode>,60(sp)
    b17c:	|         move.l 187aa <DOSBase>,d0
    b182:	|         movea.l d0,a6
    b184:	|         move.l 64(sp),d1
    b188:	|         move.l 60(sp),d2
    b18c:	|         jsr -312(a6)
    b190:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    b194:	|         move.b 1867e <fadeMode>,d0
    b19a:	|         move.b d0,d0
    b19c:	|         andi.l #255,d0
    b1a2:	|         move.l d0,52(sp)
    b1a6:	|         move.l 256(sp),48(sp)
    b1ac:	|         move.l 187aa <DOSBase>,d0
    b1b2:	|         movea.l d0,a6
    b1b4:	|         move.l 52(sp),d1
    b1b8:	|         move.l 48(sp),d2
    b1bc:	|         jsr -312(a6)
    b1c0:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    b1c4:	|         move.l 187fe <speech>,d0
    b1ca:	|         move.l 256(sp),-(sp)
    b1ce:	|         move.l d0,-(sp)
    b1d0:	|         jsr 66da <saveSpeech>
    b1d6:	|         addq.l #8,sp
	saveStatusBars (fp);
    b1d8:	|         move.l 256(sp),-(sp)
    b1dc:	|         jsr 60d6 <saveStatusBars>
    b1e2:	|         addq.l #4,sp
	saveSounds (fp);
    b1e4:	|         move.l 256(sp),-(sp)
    b1e8:	|         jsr b564 <saveSounds>
    b1ee:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    b1f0:	|         move.w 188ae <saveEncoding>,d0
    b1f6:	|         move.w d0,d0
    b1f8:	|         andi.l #65535,d0
    b1fe:	|         move.l 256(sp),-(sp)
    b202:	|         move.l d0,-(sp)
    b204:	|         jsr 8d0 <put2bytes>
    b20a:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    b20c:	|         move.l 188a0 <parallaxStuff>,d0
    b212:	|         move.l 256(sp),-(sp)
    b216:	|         move.l d0,-(sp)
    b218:	|         jsr b850 <saveParallaxRecursive>
    b21e:	|         addq.l #8,sp
	FPutC (fp, 0);
    b220:	|         move.l 256(sp),40(sp)
    b226:	|         clr.l 36(sp)
    b22a:	|         move.l 187aa <DOSBase>,d0
    b230:	|         movea.l d0,a6
    b232:	|         move.l 40(sp),d1
    b236:	|         move.l 36(sp),d2
    b23a:	|         jsr -312(a6)
    b23e:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    b242:	|         move.l 256(sp),28(sp)
    b248:	|         move.l 18120 <languageNum>,24(sp)
    b250:	|         move.l 187aa <DOSBase>,d0
    b256:	|         movea.l d0,a6
    b258:	|         move.l 28(sp),d1
    b25c:	|         move.l 24(sp),d2
    b260:	|         jsr -312(a6)
    b264:	|         move.l d0,20(sp)

	Close(fp);
    b268:	|         move.l 256(sp),16(sp)
    b26e:	|         move.l 187aa <DOSBase>,d0
    b274:	|         movea.l d0,a6
    b276:	|         move.l 16(sp),d1
    b27a:	|         jsr -36(a6)
    b27e:	|         move.l d0,12(sp)
	clearStackLib ();
    b282:	|         jsr a81a <clearStackLib>
	return TRUE;
    b288:	|         moveq #1,d0
}
    b28a:	\-------> movem.l (sp)+,d2-d3/a6
    b28e:	          lea 272(sp),sp
    b292:	          rts

0000b294 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    b294:	       lea -12(sp),sp
	int elements = 0;
    b298:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    b29c:	       move.l 16(sp),(sp)
	while (search) {
    b2a0:	   /-- bra.s b2ac <saveStack+0x18>
		elements ++;
    b2a2:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    b2a6:	|  |   movea.l (sp),a0
    b2a8:	|  |   move.l 8(a0),(sp)
	while (search) {
    b2ac:	|  \-> tst.l (sp)
    b2ae:	\----- bne.s b2a2 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    b2b0:	       move.l 20(sp),-(sp)
    b2b4:	       move.l 12(sp),-(sp)
    b2b8:	       jsr 8d0 <put2bytes>
    b2be:	       addq.l #8,sp
	search = vs;
    b2c0:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    b2c4:	       clr.l 4(sp)
    b2c8:	   /-- bra.s b2e4 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    b2ca:	/--|-> move.l (sp),d0
    b2cc:	|  |   move.l 20(sp),-(sp)
    b2d0:	|  |   move.l d0,-(sp)
    b2d2:	|  |   jsr b420 <saveVariable>
    b2d8:	|  |   addq.l #8,sp
		search = search -> next;
    b2da:	|  |   movea.l (sp),a0
    b2dc:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    b2e0:	|  |   addq.l #1,4(sp)
    b2e4:	|  \-> move.l 4(sp),d0
    b2e8:	|      cmp.l 8(sp),d0
    b2ec:	\----- blt.s b2ca <saveStack+0x36>
	}
}
    b2ee:	       nop
    b2f0:	       nop
    b2f2:	       lea 12(sp),sp
    b2f6:	       rts

0000b2f8 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    b2f8:	             lea -44(sp),sp
    b2fc:	             move.l a6,-(sp)
    b2fe:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    b300:	             move.l 1888a <stackLib>,48(sp)
	int a = 0;
    b308:	             clr.l 44(sp)
	while (s) {
    b30c:	      /----- bra.s b36a <saveStackRef+0x72>
		if (s -> stack == vs) {
    b30e:	   /--|----> movea.l 48(sp),a0
    b312:	   |  |      move.l (a0),d0
    b314:	   |  |      cmp.l 56(sp),d0
    b318:	   |  |  /-- bne.s b35c <saveStackRef+0x64>
			FPutC (fp, 1);
    b31a:	   |  |  |   move.l 60(sp),16(sp)
    b320:	   |  |  |   moveq #1,d0
    b322:	   |  |  |   move.l d0,12(sp)
    b326:	   |  |  |   move.l 187aa <DOSBase>,d0
    b32c:	   |  |  |   movea.l d0,a6
    b32e:	   |  |  |   move.l 16(sp),d1
    b332:	   |  |  |   move.l 12(sp),d2
    b336:	   |  |  |   jsr -312(a6)
    b33a:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    b33e:	   |  |  |   move.l 18886 <stackLibTotal>,d0
    b344:	   |  |  |   sub.l 44(sp),d0
    b348:	   |  |  |   move.l 60(sp),-(sp)
    b34c:	   |  |  |   move.l d0,-(sp)
    b34e:	   |  |  |   jsr 8d0 <put2bytes>
    b354:	   |  |  |   addq.l #8,sp
			return TRUE;
    b356:	   |  |  |   moveq #1,d0
    b358:	/--|--|--|-- bra.w b416 <saveStackRef+0x11e>
		}
		s = s -> next;
    b35c:	|  |  |  \-> movea.l 48(sp),a0
    b360:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    b366:	|  |  |      addq.l #1,44(sp)
	while (s) {
    b36a:	|  |  \----> tst.l 48(sp)
    b36e:	|  \-------- bne.s b30e <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    b370:	|            move.l 60(sp),40(sp)
    b376:	|            clr.l 36(sp)
    b37a:	|            move.l 187aa <DOSBase>,d0
    b380:	|            movea.l d0,a6
    b382:	|            move.l 40(sp),d1
    b386:	|            move.l 36(sp),d2
    b38a:	|            jsr -312(a6)
    b38e:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    b392:	|            movea.l 56(sp),a0
    b396:	|            move.l (a0),d0
    b398:	|            move.l 60(sp),-(sp)
    b39c:	|            move.l d0,-(sp)
    b39e:	|            jsr b294 <saveStack>
    b3a4:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    b3a6:	|            moveq #8,d0
    b3a8:	|            move.l d0,28(sp)
    b3ac:	|            clr.l 24(sp)
    b3b0:	|            move.l 187a2 <SysBase>,d0
    b3b6:	|            movea.l d0,a6
    b3b8:	|            move.l 28(sp),d0
    b3bc:	|            move.l 24(sp),d1
    b3c0:	|            jsr -684(a6)
    b3c4:	|            move.l d0,20(sp)
    b3c8:	|            move.l 20(sp),d0
    b3cc:	|            move.l d0,48(sp)
	stackLibTotal ++;
    b3d0:	|            move.l 18886 <stackLibTotal>,d0
    b3d6:	|            addq.l #1,d0
    b3d8:	|            move.l d0,18886 <stackLibTotal>
	if (! s) {
    b3de:	|            tst.l 48(sp)
    b3e2:	|        /-- bne.s b3f6 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    b3e4:	|        |   pea 16b3d <PutChar+0x1547>
    b3ea:	|        |   jsr 14b22 <KPrintF>
    b3f0:	|        |   addq.l #4,sp
		return FALSE;
    b3f2:	|        |   clr.w d0
    b3f4:	+--------|-- bra.s b416 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    b3f6:	|        \-> move.l 1888a <stackLib>,d0
    b3fc:	|            movea.l 48(sp),a0
    b400:	|            move.l d0,4(a0)
	s -> stack = vs;
    b404:	|            movea.l 48(sp),a0
    b408:	|            move.l 56(sp),(a0)
	stackLib = s;
    b40c:	|            move.l 48(sp),1888a <stackLib>
	return TRUE;
    b414:	|            moveq #1,d0
}
    b416:	\----------> move.l (sp)+,d2
    b418:	             movea.l (sp)+,a6
    b41a:	             lea 44(sp),sp
    b41e:	             rts

0000b420 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    b420:	          lea -12(sp),sp
    b424:	          move.l a6,-(sp)
    b426:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    b428:	          move.l 28(sp),16(sp)
    b42e:	          movea.l 24(sp),a0
    b432:	          move.l (a0),d0
    b434:	          move.l d0,12(sp)
    b438:	          move.l 187aa <DOSBase>,d0
    b43e:	          movea.l d0,a6
    b440:	          move.l 16(sp),d1
    b444:	          move.l 12(sp),d2
    b448:	          jsr -312(a6)
    b44c:	          move.l d0,8(sp)
	switch (from -> varType) {
    b450:	          movea.l 24(sp),a0
    b454:	          move.l (a0),d0
    b456:	          moveq #9,d1
    b458:	          cmp.l d0,d1
    b45a:	      /-- bcs.w b50a <saveVariable+0xea>
    b45e:	      |   add.l d0,d0
    b460:	      |   movea.l d0,a0
    b462:	      |   adda.l #46190,a0
    b468:	      |   move.w (a0),d0
    b46a:	      |   jmp (b46e <saveVariable+0x4e>,pc,d0.w)
    b46e:	      |   ori.l #1310740,(a0)+
    b474:	      |   ori.b #20,(20,a0,d0.w)
    b47a:	      |   .short 0x004c
    b47c:	      |   ori.b #126,(a4)
    b480:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    b484:	      |   ori.b #40,(a0)+
    b488:	      |   ori.b #47,d4
    b48c:	      |   ori.b #0,(a4)+
    b490:	      |   jsr 958 <put4bytes>
    b496:	      |   addq.l #8,sp
		return TRUE;
    b498:	      |   moveq #1,d0
    b49a:	/-----|-- bra.w b546 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    b49e:	|     |   movea.l 24(sp),a0
    b4a2:	|     |   move.l 4(a0),d0
    b4a6:	|     |   move.l 28(sp),-(sp)
    b4aa:	|     |   move.l d0,-(sp)
    b4ac:	|     |   jsr bd8 <writeString>
    b4b2:	|     |   addq.l #8,sp
		return TRUE;
    b4b4:	|     |   moveq #1,d0
    b4b6:	+-----|-- bra.w b546 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    b4ba:	|     |   movea.l 24(sp),a0
    b4be:	|     |   move.l 4(a0),d0
    b4c2:	|     |   move.l 28(sp),-(sp)
    b4c6:	|     |   move.l d0,-(sp)
    b4c8:	|     |   jsr b2f8 <saveStackRef>
    b4ce:	|     |   addq.l #8,sp
    b4d0:	+-----|-- bra.s b546 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    b4d2:	|     |   movea.l 24(sp),a0
    b4d6:	|     |   move.l 4(a0),d0
    b4da:	|     |   move.l 28(sp),-(sp)
    b4de:	|     |   move.l d0,-(sp)
    b4e0:	|     |   jsr 9590 <saveCostume>
    b4e6:	|     |   addq.l #8,sp
		return FALSE;
    b4e8:	|     |   clr.w d0
    b4ea:	+-----|-- bra.s b546 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    b4ec:	|     |   movea.l 24(sp),a0
    b4f0:	|     |   move.l 4(a0),d0
    b4f4:	|     |   move.l 28(sp),-(sp)
    b4f8:	|     |   move.l d0,-(sp)
    b4fa:	|     |   jsr 94c6 <saveAnim>
    b500:	|     |   addq.l #8,sp
		return FALSE;
    b502:	|     |   clr.w d0
    b504:	+-----|-- bra.s b546 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    b506:	|     |   clr.w d0
    b508:	+-----|-- bra.s b546 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    b50a:	|     \-> movea.l 24(sp),a0
    b50e:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    b510:	|         moveq #10,d1
    b512:	|         cmp.l d0,d1
    b514:	|  /----- bcs.s b52e <saveVariable+0x10e>
						typeName[from->varType] :
    b516:	|  |      movea.l 24(sp),a0
    b51a:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    b51c:	|  |      add.l d0,d0
    b51e:	|  |      movea.l d0,a1
    b520:	|  |      adda.l d0,a1
    b522:	|  |      lea 18680 <typeName>,a0
    b528:	|  |      move.l (0,a1,a0.l),d0
    b52c:	|  |  /-- bra.s b534 <saveVariable+0x114>
    b52e:	|  \--|-> move.l #93026,d0
    b534:	|     \-> move.l d0,-(sp)
    b536:	|         pea 16b69 <PutChar+0x1573>
    b53c:	|         jsr 14b22 <KPrintF>
    b542:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    b544:	|         moveq #1,d0
    b546:	\-------> move.l (sp)+,d2
    b548:	          movea.l (sp)+,a6
    b54a:	          lea 12(sp),sp
    b54e:	          rts

0000b550 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    b550:	moveq #0,d0
}
    b552:	rts

0000b554 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    b554:	nop
    b556:	rts

0000b558 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    b558:	nop
    b55a:	rts

0000b55c <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    b55c:	moveq #1,d0
}
    b55e:	rts

0000b560 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    b560:	nop
    b562:	rts

0000b564 <saveSounds>:

void saveSounds (BPTR fp) {
    b564:	lea -12(sp),sp
    b568:	move.l a6,-(sp)
    b56a:	move.l d2,-(sp)
	FPutC (fp,0);
    b56c:	move.l 24(sp),16(sp)
    b572:	clr.l 12(sp)
    b576:	move.l 187aa <DOSBase>,d0
    b57c:	movea.l d0,a6
    b57e:	move.l 16(sp),d1
    b582:	move.l 12(sp),d2
    b586:	jsr -312(a6)
    b58a:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    b58e:	move.l 1813e <defSoundVol>,d0
    b594:	move.l 24(sp),-(sp)
    b598:	move.l d0,-(sp)
    b59a:	jsr 8d0 <put2bytes>
    b5a0:	addq.l #8,sp
	put2bytes (defVol, fp);
    b5a2:	move.l 1813a <defVol>,d0
    b5a8:	move.l 24(sp),-(sp)
    b5ac:	move.l d0,-(sp)
    b5ae:	jsr 8d0 <put2bytes>
    b5b4:	addq.l #8,sp
}
    b5b6:	nop
    b5b8:	move.l (sp)+,d2
    b5ba:	movea.l (sp)+,a6
    b5bc:	lea 12(sp),sp
    b5c0:	rts

0000b5c2 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    b5c2:	move.l 4(sp),1813a <defVol>
}
    b5ca:	nop
    b5cc:	rts

0000b5ce <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    b5ce:	move.l 4(sp),1813e <defSoundVol>
}
    b5d6:	nop
    b5d8:	rts

0000b5da <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    b5da:	nop
    b5dc:	rts

0000b5de <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    b5de:	nop
    b5e0:	rts

0000b5e2 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    b5e2:	nop
    b5e4:	rts

0000b5e6 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    b5e6:	subq.l #4,sp
    b5e8:	move.l 12(sp),d0
    b5ec:	move.w d0,d0
    b5ee:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    b5f2:	moveq #1,d0
}
    b5f4:	addq.l #4,sp
    b5f6:	rts

0000b5f8 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    b5f8:	nop
    b5fa:	rts

0000b5fc <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    b5fc:	move.l 16(sp),-(sp)
    b600:	move.l 16(sp),-(sp)
    b604:	jsr e40 <CstBlankScreen>
    b60a:	addq.l #8,sp
}
    b60c:	nop
    b60e:	rts

0000b610 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    b610:	pea 16b8c <PutChar+0x1596>
    b616:	jsr 14b22 <KPrintF>
    b61c:	addq.l #4,sp
}
    b61e:	nop
    b620:	rts

0000b622 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    b622:	movea.l 8(sp),a1
    b626:	movea.l 12(sp),a0
    b62a:	move.l 8(sp),d1
    b62e:	move.l 4(sp),d0
    b632:	move.l a1,-(sp)
    b634:	move.l a0,-(sp)
    b636:	move.l d1,-(sp)
    b638:	move.l d0,-(sp)
    b63a:	jsr 27f4 <drawLine>
    b640:	lea 16(sp),sp
}
    b644:	nop
    b646:	rts

0000b648 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    b648:	movea.l 12(sp),a1
    b64c:	movea.l 4(sp),a0
    b650:	move.l 8(sp),d1
    b654:	move.l 4(sp),d0
    b658:	move.l a1,-(sp)
    b65a:	move.l a0,-(sp)
    b65c:	move.l d1,-(sp)
    b65e:	move.l d0,-(sp)
    b660:	jsr 27f4 <drawLine>
    b666:	lea 16(sp),sp
}
    b66a:	nop
    b66c:	rts

0000b66e <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    b66e:	pea 16bc5 <PutChar+0x15cf>
    b674:	jsr 14b22 <KPrintF>
    b67a:	addq.l #4,sp
}
    b67c:	nop
    b67e:	rts

0000b680 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    b680:	jsr 2784 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    b686:	pea 1889a <backdropTextureName>
    b68c:	pea 1 <_start+0x1>
    b690:	jsr 2976 <deleteTextures>
    b696:	addq.l #8,sp
	backdropTextureName = 0;
    b698:	clr.l 1889a <backdropTextureName>
	backdropExists = FALSE;
    b69e:	clr.w 1889e <backdropExists>
}
    b6a4:	nop
    b6a6:	rts

0000b6a8 <killParallax>:

void killParallax () {
    b6a8:	          lea -12(sp),sp
    b6ac:	          move.l a6,-(sp)
	while (parallaxStuff) {
    b6ae:	   /----- bra.s b71a <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    b6b0:	/--|----> move.l 188a0 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    b6b8:	|  |      movea.l 12(sp),a0
    b6bc:	|  |      move.l 42(a0),d0
    b6c0:	|  |      move.l d0,188a0 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    b6c6:	|  |      move.l 12(sp),d0
    b6ca:	|  |      addq.l #4,d0
    b6cc:	|  |      move.l d0,-(sp)
    b6ce:	|  |      pea 1 <_start+0x1>
    b6d2:	|  |      jsr 2976 <deleteTextures>
    b6d8:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    b6da:	|  |      movea.l 12(sp),a0
    b6de:	|  |      move.l (a0),d0
    b6e0:	|  |  /-- beq.s b6fa <killParallax+0x52>
    b6e2:	|  |  |   movea.l 12(sp),a0
    b6e6:	|  |  |   move.l (a0),8(sp)
    b6ea:	|  |  |   move.l 187a2 <SysBase>,d0
    b6f0:	|  |  |   movea.l d0,a6
    b6f2:	|  |  |   movea.l 8(sp),a1
    b6f6:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    b6fa:	|  |  \-> tst.l 12(sp)
    b6fe:	|  |  /-- beq.s b716 <killParallax+0x6e>
    b700:	|  |  |   move.l 12(sp),4(sp)
    b706:	|  |  |   move.l 187a2 <SysBase>,d0
    b70c:	|  |  |   movea.l d0,a6
    b70e:	|  |  |   movea.l 4(sp),a1
    b712:	|  |  |   jsr -690(a6)
		k = NULL;
    b716:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    b71a:	|  \----> move.l 188a0 <parallaxStuff>,d0
    b720:	\-------- bne.s b6b0 <killParallax+0x8>
	}
}
    b722:	          nop
    b724:	          nop
    b726:	          movea.l (sp)+,a6
    b728:	          lea 12(sp),sp
    b72c:	          rts

0000b72e <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    b72e:	       move.l 4(sp),-(sp)
    b732:	       jsr 5440 <openFileFromNum>
    b738:	       addq.l #4,sp
    b73a:	       tst.l d0
    b73c:	   /-- bne.s b74e <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    b73e:	   |   pea 16be6 <PutChar+0x15f0>
    b744:	   |   jsr 14b22 <KPrintF>
    b74a:	   |   addq.l #4,sp
		return;
    b74c:	/--|-- bra.s b76e <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    b74e:	|  \-> move.l 1878a <bigDataFile>,d0
    b754:	|      move.l 12(sp),-(sp)
    b758:	|      move.l 12(sp),-(sp)
    b75c:	|      move.l d0,-(sp)
    b75e:	|      jsr 1354 <CstLoadBackdrop>
    b764:	|      lea 12(sp),sp
	finishAccess ();
    b768:	|      jsr 5338 <finishAccess>
	
}
    b76e:	\----> rts

0000b770 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    b770:	subq.l #8,sp
    b772:	movea.l 12(sp),a0
    b776:	move.l 16(sp),d1
    b77a:	move.l 20(sp),d0
    b77e:	movea.w a0,a0
    b780:	move.w a0,6(sp)
    b784:	move.w d1,d1
    b786:	move.w d1,4(sp)
    b78a:	move.w d0,d0
    b78c:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    b790:	pea 16c35 <PutChar+0x163f>
    b796:	jsr 14b22 <KPrintF>
    b79c:	addq.l #4,sp

}
    b79e:	nop
    b7a0:	addq.l #8,sp
    b7a2:	rts

0000b7a4 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    b7a4:	pea 16c58 <PutChar+0x1662>
    b7aa:	jsr 14b22 <KPrintF>
    b7b0:	addq.l #4,sp
}
    b7b2:	nop
    b7b4:	rts

0000b7b6 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    b7b6:	pea 188a4 <snapshotTextureName>
    b7bc:	pea 1 <_start+0x1>
    b7c0:	jsr 2976 <deleteTextures>
    b7c6:	addq.l #8,sp
	snapshotTextureName = 0;
    b7c8:	clr.l 188a4 <snapshotTextureName>
}
    b7ce:	nop
    b7d0:	rts

0000b7d2 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    b7d2:	move.l 18896 <sceneHeight>,d0
    b7d8:	move.l d0,d1
    b7da:	move.l 18892 <sceneWidth>,d0
    b7e0:	move.l d1,-(sp)
    b7e2:	move.l d0,-(sp)
    b7e4:	jsr 2416 <CstReserveBackdrop>
    b7ea:	addq.l #8,sp
}
    b7ec:	rts

0000b7ee <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    b7ee:	jsr b680 <killBackDrop>
	killParallax ();
    b7f4:	jsr b6a8 <killParallax>
	killZBuffer ();
    b7fa:	jsr 6dd4 <killZBuffer>
	sceneWidth = x;
    b800:	move.l 4(sp),d0
    b804:	move.l d0,18892 <sceneWidth>
	sceneHeight = y;
    b80a:	move.l 8(sp),d0
    b80e:	move.l d0,18896 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    b814:	pea 16c91 <PutChar+0x169b>
    b81a:	jsr 14b22 <KPrintF>
    b820:	addq.l #4,sp
	return reserveBackdrop();
    b822:	jsr b7d2 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    b828:	rts

0000b82a <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    b82a:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    b82c:	move.l 12(sp),-(sp)
    b830:	jsr 6bc <get2bytes>
    b836:	addq.l #4,sp
    b838:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    b83c:	move.l 12(sp),-(sp)
    b840:	jsr 6bc <get2bytes>
    b846:	addq.l #4,sp
    b848:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    b84a:	moveq #1,d0
}
    b84c:	addq.l #8,sp
    b84e:	rts

0000b850 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    b850:	   /-> lea -12(sp),sp
    b854:	   |   move.l a6,-(sp)
    b856:	   |   move.l d2,-(sp)
	if (me) {
    b858:	   |   tst.l 24(sp)
    b85c:	/--|-- beq.w b8f2 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    b860:	|  |   movea.l 24(sp),a0
    b864:	|  |   move.l 42(a0),d0
    b868:	|  |   move.l 28(sp),-(sp)
    b86c:	|  |   move.l d0,-(sp)
    b86e:	|  \-- jsr b850 <saveParallaxRecursive>(pc)
    b872:	|      addq.l #8,sp
		FPutC (fp, 1);
    b874:	|      move.l 28(sp),16(sp)
    b87a:	|      moveq #1,d0
    b87c:	|      move.l d0,12(sp)
    b880:	|      move.l 187aa <DOSBase>,d0
    b886:	|      movea.l d0,a6
    b888:	|      move.l 16(sp),d1
    b88c:	|      move.l 12(sp),d2
    b890:	|      jsr -312(a6)
    b894:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    b898:	|      movea.l 24(sp),a0
    b89c:	|      move.w 28(a0),d0
    b8a0:	|      move.w d0,d0
    b8a2:	|      andi.l #65535,d0
    b8a8:	|      move.l 28(sp),-(sp)
    b8ac:	|      move.l d0,-(sp)
    b8ae:	|      jsr 8d0 <put2bytes>
    b8b4:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    b8b6:	|      movea.l 24(sp),a0
    b8ba:	|      move.w 30(a0),d0
    b8be:	|      move.w d0,d0
    b8c0:	|      andi.l #65535,d0
    b8c6:	|      move.l 28(sp),-(sp)
    b8ca:	|      move.l d0,-(sp)
    b8cc:	|      jsr 8d0 <put2bytes>
    b8d2:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    b8d4:	|      movea.l 24(sp),a0
    b8d8:	|      move.w 32(a0),d0
    b8dc:	|      move.w d0,d0
    b8de:	|      andi.l #65535,d0
    b8e4:	|      move.l 28(sp),-(sp)
    b8e8:	|      move.l d0,-(sp)
    b8ea:	|      jsr 8d0 <put2bytes>
    b8f0:	|      addq.l #8,sp
	}
}
    b8f2:	\----> nop
    b8f4:	       move.l (sp)+,d2
    b8f6:	       movea.l (sp)+,a6
    b8f8:	       lea 12(sp),sp
    b8fc:	       rts

0000b8fe <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    b8fe:	pea 16cb8 <PutChar+0x16c2>
    b904:	jsr 14b22 <KPrintF>
    b90a:	addq.l #4,sp
	return TRUE;
    b90c:	moveq #1,d0
    b90e:	rts

0000b910 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    b910:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    b912:	             move.l 188a8 <allObjectTypes>,(sp)

	while (huntType) {
    b918:	      /----- bra.s b930 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    b91a:	   /--|----> movea.l (sp),a0
    b91c:	   |  |      move.l 4(a0),d0
    b920:	   |  |      cmp.l 8(sp),d0
    b924:	   |  |  /-- bne.s b92a <findObjectType+0x1a>
    b926:	   |  |  |   move.l (sp),d0
    b928:	/--|--|--|-- bra.s b940 <findObjectType+0x30>
		huntType = huntType -> next;
    b92a:	|  |  |  \-> movea.l (sp),a0
    b92c:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    b930:	|  |  \----> tst.l (sp)
    b932:	|  \-------- bne.s b91a <findObjectType+0xa>
	}

	return loadObjectType (i);
    b934:	|            move.l 8(sp),-(sp)
    b938:	|            jsr ba00 <loadObjectType>
    b93e:	|            addq.l #4,sp
}
    b940:	\----------> addq.l #4,sp
    b942:	             rts

0000b944 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    b944:	             lea -12(sp),sp
	int i, num = 0;
    b948:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    b94c:	             move.l 20(sp),-(sp)
    b950:	             jsr b910 <findObjectType>
    b956:	             addq.l #4,sp
    b958:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    b95a:	             clr.l 8(sp)
    b95e:	   /-------- bra.s b994 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    b960:	/--|-------> movea.l (sp),a0
    b962:	|  |         move.l 38(a0),d1
    b966:	|  |         move.l 8(sp),d0
    b96a:	|  |         lsl.l #3,d0
    b96c:	|  |         movea.l d1,a0
    b96e:	|  |         adda.l d0,a0
    b970:	|  |         move.l (a0),d0
    b972:	|  |         cmp.l 16(sp),d0
    b976:	|  |  /----- bne.s b990 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    b978:	|  |  |      movea.l (sp),a0
    b97a:	|  |  |      move.l 38(a0),d1
    b97e:	|  |  |      move.l 8(sp),d0
    b982:	|  |  |      lsl.l #3,d0
    b984:	|  |  |      movea.l d1,a0
    b986:	|  |  |      adda.l d0,a0
    b988:	|  |  |      move.l 4(a0),4(sp)
			break;
    b98e:	|  |  |  /-- bra.s b9a0 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    b990:	|  |  \--|-> addq.l #1,8(sp)
    b994:	|  \-----|-> movea.l (sp),a0
    b996:	|        |   move.l 16(a0),d0
    b99a:	|        |   cmp.l 8(sp),d0
    b99e:	\--------|-- bgt.s b960 <getCombinationFunction+0x1c>
		}
	}

	return num;
    b9a0:	         \-> move.l 4(sp),d0
}
    b9a4:	             lea 12(sp),sp
    b9a8:	             rts

0000b9aa <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    b9aa:	moveq #1,d0
}
    b9ac:	rts

0000b9ae <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    b9ae:	subq.l #8,sp
    b9b0:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    b9b2:	move.l 16(sp),-(sp)
    b9b6:	jsr 6bc <get2bytes>
    b9bc:	addq.l #4,sp
    b9be:	move.l d0,-(sp)
    b9c0:	jsr ba00 <loadObjectType>
    b9c6:	addq.l #4,sp
    b9c8:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    b9cc:	movea.l 8(sp),a0
    b9d0:	move.l (a0),4(sp)
    b9d4:	move.l 187a2 <SysBase>,d0
    b9da:	movea.l d0,a6
    b9dc:	movea.l 4(sp),a1
    b9e0:	jsr -690(a6)
	r -> screenName = readString (fp);
    b9e4:	move.l 16(sp),-(sp)
    b9e8:	jsr b02 <readString>
    b9ee:	addq.l #4,sp
    b9f0:	movea.l 8(sp),a0
    b9f4:	move.l d0,(a0)
	return r;
    b9f6:	move.l 8(sp),d0
}
    b9fa:	movea.l (sp)+,a6
    b9fc:	addq.l #8,sp
    b9fe:	rts

0000ba00 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    ba00:	          lea -84(sp),sp
    ba04:	          move.l a6,-(sp)
    ba06:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    ba08:	          moveq #42,d0
    ba0a:	          move.l d0,84(sp)
    ba0e:	          clr.l 80(sp)
    ba12:	          move.l 187a2 <SysBase>,d0
    ba18:	          movea.l d0,a6
    ba1a:	          move.l 84(sp),d0
    ba1e:	          move.l 80(sp),d1
    ba22:	          jsr -684(a6)
    ba26:	          move.l d0,76(sp)
    ba2a:	          move.l 76(sp),d0
    ba2e:	          move.l d0,72(sp)

    if (newType) {
    ba32:	/-------- beq.w bcac <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    ba36:	|         move.l 96(sp),-(sp)
    ba3a:	|         jsr 5508 <openObjectSlice>
    ba40:	|         addq.l #4,sp
    ba42:	|         tst.w d0
    ba44:	+-------- beq.w bcac <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    ba48:	|         move.l 1878a <bigDataFile>,d0
    ba4e:	|         move.l d0,-(sp)
    ba50:	|         jsr 6bc <get2bytes>
    ba56:	|         addq.l #4,sp
    ba58:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    ba5c:	|         move.l 1878a <bigDataFile>,64(sp)
    ba64:	|         move.l 187aa <DOSBase>,d0
    ba6a:	|         movea.l d0,a6
    ba6c:	|         move.l 64(sp),d1
    ba70:	|         jsr -306(a6)
    ba74:	|         move.l d0,60(sp)
    ba78:	|         move.l 60(sp),d0
    ba7c:	|         move.l d0,d0
    ba7e:	|         movea.l 72(sp),a0
    ba82:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    ba86:	|         move.l 1878a <bigDataFile>,56(sp)
    ba8e:	|         move.l 187aa <DOSBase>,d0
    ba94:	|         movea.l d0,a6
    ba96:	|         move.l 56(sp),d1
    ba9a:	|         jsr -306(a6)
    ba9e:	|         move.l d0,52(sp)
    baa2:	|         move.l 52(sp),d0
    baa6:	|         move.l d0,d0
    baa8:	|         movea.l 72(sp),a0
    baac:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    bab0:	|         move.l 1878a <bigDataFile>,48(sp)
    bab8:	|         move.l 187aa <DOSBase>,d0
    babe:	|         movea.l d0,a6
    bac0:	|         move.l 48(sp),d1
    bac4:	|         jsr -306(a6)
    bac8:	|         move.l d0,44(sp)
    bacc:	|         move.l 44(sp),d0
    bad0:	|         move.l d0,d0
    bad2:	|         movea.l 72(sp),a0
    bad6:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    bada:	|         move.l 1878a <bigDataFile>,40(sp)
    bae2:	|         move.l 187aa <DOSBase>,d0
    bae8:	|         movea.l d0,a6
    baea:	|         move.l 40(sp),d1
    baee:	|         jsr -306(a6)
    baf2:	|         move.l d0,36(sp)
    baf6:	|         move.l 36(sp),d0
    bafa:	|         movea.l 72(sp),a0
    bafe:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    bb02:	|         move.l 1878a <bigDataFile>,32(sp)
    bb0a:	|         move.l 187aa <DOSBase>,d0
    bb10:	|         movea.l d0,a6
    bb12:	|         move.l 32(sp),d1
    bb16:	|         jsr -306(a6)
    bb1a:	|         move.l d0,28(sp)
    bb1e:	|         move.l 28(sp),d0
    bb22:	|         movea.l 72(sp),a0
    bb26:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    bb2a:	|         move.l 1878a <bigDataFile>,d0
    bb30:	|         move.l d0,-(sp)
    bb32:	|         jsr 718 <get4bytes>
    bb38:	|         addq.l #4,sp
    bb3a:	|         movea.l 72(sp),a0
    bb3e:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    bb42:	|         move.l 1878a <bigDataFile>,d0
    bb48:	|         move.l d0,-(sp)
    bb4a:	|         jsr 6bc <get2bytes>
    bb50:	|         addq.l #4,sp
    bb52:	|         movea.l 72(sp),a0
    bb56:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    bb5a:	|         move.l 1878a <bigDataFile>,24(sp)
    bb62:	|         move.l 187aa <DOSBase>,d0
    bb68:	|         movea.l d0,a6
    bb6a:	|         move.l 24(sp),d1
    bb6e:	|         jsr -306(a6)
    bb72:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    bb76:	|         move.l 1878a <bigDataFile>,d0
    bb7c:	|         move.l d0,-(sp)
    bb7e:	|         jsr 7d8 <getFloat>
    bb84:	|         addq.l #4,sp
            getFloat(bigDataFile);
    bb86:	|         move.l 1878a <bigDataFile>,d0
    bb8c:	|         move.l d0,-(sp)
    bb8e:	|         jsr 7d8 <getFloat>
    bb94:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    bb96:	|         move.l 1878a <bigDataFile>,d0
    bb9c:	|         move.l d0,-(sp)
    bb9e:	|         jsr 6bc <get2bytes>
    bba4:	|         addq.l #4,sp
    bba6:	|         move.l d0,d0
    bba8:	|         movea.l 72(sp),a0
    bbac:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    bbb0:	|         move.l 1878a <bigDataFile>,d0
    bbb6:	|         move.l d0,-(sp)
    bbb8:	|         jsr 6bc <get2bytes>
    bbbe:	|         addq.l #4,sp
    bbc0:	|         movea.l 72(sp),a0
    bbc4:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    bbc8:	|         movea.l 72(sp),a0
    bbcc:	|         move.l 16(a0),d0
    bbd0:	|  /----- beq.s bc02 <loadObjectType+0x202>
    bbd2:	|  |      movea.l 72(sp),a0
    bbd6:	|  |      move.l 16(a0),d0
    bbda:	|  |      lsl.l #3,d0
    bbdc:	|  |      move.l d0,16(sp)
    bbe0:	|  |      clr.l 12(sp)
    bbe4:	|  |      move.l 187a2 <SysBase>,d0
    bbea:	|  |      movea.l d0,a6
    bbec:	|  |      move.l 16(sp),d0
    bbf0:	|  |      move.l 12(sp),d1
    bbf4:	|  |      jsr -684(a6)
    bbf8:	|  |      move.l d0,8(sp)
    bbfc:	|  |      move.l 8(sp),d0
    bc00:	|  |  /-- bra.s bc04 <loadObjectType+0x204>
    bc02:	|  \--|-> moveq #0,d0
    bc04:	|     \-> movea.l 72(sp),a0
    bc08:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    bc0c:	|         clr.l 88(sp)
    bc10:	|     /-- bra.s bc60 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    bc12:	|  /--|-> move.l 1878a <bigDataFile>,d1
    bc18:	|  |  |   movea.l 72(sp),a0
    bc1c:	|  |  |   movea.l 38(a0),a0
    bc20:	|  |  |   move.l 88(sp),d0
    bc24:	|  |  |   lsl.l #3,d0
    bc26:	|  |  |   lea (0,a0,d0.l),a2
    bc2a:	|  |  |   move.l d1,-(sp)
    bc2c:	|  |  |   jsr 6bc <get2bytes>
    bc32:	|  |  |   addq.l #4,sp
    bc34:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    bc36:	|  |  |   move.l 1878a <bigDataFile>,d1
    bc3c:	|  |  |   movea.l 72(sp),a0
    bc40:	|  |  |   movea.l 38(a0),a0
    bc44:	|  |  |   move.l 88(sp),d0
    bc48:	|  |  |   lsl.l #3,d0
    bc4a:	|  |  |   lea (0,a0,d0.l),a2
    bc4e:	|  |  |   move.l d1,-(sp)
    bc50:	|  |  |   jsr 6bc <get2bytes>
    bc56:	|  |  |   addq.l #4,sp
    bc58:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    bc5c:	|  |  |   addq.l #1,88(sp)
    bc60:	|  |  \-> movea.l 72(sp),a0
    bc64:	|  |      move.l 16(a0),d0
    bc68:	|  |      cmp.l 88(sp),d0
    bc6c:	|  \----- bgt.s bc12 <loadObjectType+0x212>
            }
            finishAccess();
    bc6e:	|         jsr 5338 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    bc74:	|         move.l 68(sp),-(sp)
    bc78:	|         jsr 5342 <getNumberedString>
    bc7e:	|         addq.l #4,sp
    bc80:	|         movea.l 72(sp),a0
    bc84:	|         move.l d0,(a0)
            newType->objectNum = i;
    bc86:	|         movea.l 72(sp),a0
    bc8a:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    bc90:	|         move.l 188a8 <allObjectTypes>,d0
    bc96:	|         movea.l 72(sp),a0
    bc9a:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    bc9e:	|         move.l 72(sp),188a8 <allObjectTypes>
            return newType;
    bca6:	|         move.l 72(sp),d0
    bcaa:	|     /-- bra.s bcae <loadObjectType+0x2ae>
        }
    }
    return NULL;
    bcac:	\-----|-> moveq #0,d0
}
    bcae:	      \-> movea.l (sp)+,a2
    bcb0:	          movea.l (sp)+,a6
    bcb2:	          lea 84(sp),sp
    bcb6:	          rts

0000bcb8 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    bcb8:	             lea -16(sp),sp
    bcbc:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    bcbe:	             move.l #100520,16(sp)

	while (* huntRegion) {
    bcc6:	   /-------- bra.s bd3a <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    bcc8:	/--|-------> movea.l 16(sp),a0
    bccc:	|  |         move.l (a0),d0
    bcce:	|  |         cmp.l 24(sp),d0
    bcd2:	|  |  /----- bne.s bd2c <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    bcd4:	|  |  |      movea.l 24(sp),a0
    bcd8:	|  |  |      move.l 8(a0),d0
    bcdc:	|  |  |      movea.l 16(sp),a0
    bce0:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    bce2:	|  |  |      movea.l 24(sp),a0
    bce6:	|  |  |      move.l 38(a0),12(sp)
    bcec:	|  |  |      move.l 187a2 <SysBase>,d0
    bcf2:	|  |  |      movea.l d0,a6
    bcf4:	|  |  |      movea.l 12(sp),a1
    bcf8:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    bcfc:	|  |  |      movea.l 24(sp),a0
    bd00:	|  |  |      move.l (a0),8(sp)
    bd04:	|  |  |      move.l 187a2 <SysBase>,d0
    bd0a:	|  |  |      movea.l d0,a6
    bd0c:	|  |  |      movea.l 8(sp),a1
    bd10:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    bd14:	|  |  |      move.l 24(sp),4(sp)
    bd1a:	|  |  |      move.l 187a2 <SysBase>,d0
    bd20:	|  |  |      movea.l d0,a6
    bd22:	|  |  |      movea.l 4(sp),a1
    bd26:	|  |  |      jsr -690(a6)
			return;
    bd2a:	|  |  |  /-- bra.s bd50 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    bd2c:	|  |  \--|-> movea.l 16(sp),a0
    bd30:	|  |     |   move.l (a0),d0
    bd32:	|  |     |   move.l d0,d1
    bd34:	|  |     |   addq.l #8,d1
    bd36:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    bd3a:	|  \-----|-> movea.l 16(sp),a0
    bd3e:	|        |   move.l (a0),d0
    bd40:	\--------|-- bne.s bcc8 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    bd42:	         |   pea 16cdf <PutChar+0x16e9>
    bd48:	         |   jsr 14b22 <KPrintF>
    bd4e:	         |   addq.l #4,sp
}
    bd50:	         \-> movea.l (sp)+,a6
    bd52:	             lea 16(sp),sp
    bd56:	             rts

0000bd58 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    bd58:	movea.l 4(sp),a0
    bd5c:	move.l 4(a0),d0
    bd60:	move.l 8(sp),-(sp)
    bd64:	move.l d0,-(sp)
    bd66:	jsr 8d0 <put2bytes>
    bd6c:	addq.l #8,sp
	writeString (r -> screenName, fp);
    bd6e:	movea.l 4(sp),a0
    bd72:	move.l (a0),d0
    bd74:	move.l 8(sp),-(sp)
    bd78:	move.l d0,-(sp)
    bd7a:	jsr bd8 <writeString>
    bd80:	addq.l #8,sp
    bd82:	nop
    bd84:	rts

0000bd86 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    bd86:	                         lea -112(sp),sp
    bd8a:	                         move.l a6,-(sp)
    bd8c:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    bd8e:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    bd92:	                         move.w 188ae <saveEncoding>,d0
    bd98:	                  /----- beq.s bda2 <fileToStack+0x1c>
    bd9a:	                  |      move.l #93445,d0
    bda0:	                  |  /-- bra.s bda8 <fileToStack+0x22>
    bda2:	                  \--|-> move.l #93471,d0
    bda8:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    bdac:	                         move.l 124(sp),112(sp)
    bdb2:	                         move.l #1005,108(sp)
    bdba:	                         move.l 187aa <DOSBase>,d0
    bdc0:	                         movea.l d0,a6
    bdc2:	                         move.l 112(sp),d1
    bdc6:	                         move.l 108(sp),d2
    bdca:	                         jsr -30(a6)
    bdce:	                         move.l d0,104(sp)
    bdd2:	                         move.l 104(sp),d0
    bdd6:	                         move.l d0,100(sp)
    if (!fp) {
    bdda:	                     /-- bne.s bdf4 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    bddc:	                     |   move.l 124(sp),-(sp)
    bde0:	                     |   pea 16d36 <PutChar+0x1740>
    bde6:	                     |   jsr 14b22 <KPrintF>
    bdec:	                     |   addq.l #8,sp
        return FALSE;
    bdee:	                     |   clr.w d0
    bdf0:	/--------------------|-- bra.w c0ea <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    bdf4:	|                    \-> move.w 188ae <saveEncoding>,d0
    bdfa:	|                        move.l d0,d0
    bdfc:	|                        move.b d0,188ac <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    be02:	|                        move.w 188ae <saveEncoding>,d0
    be08:	|                        lsr.w #8,d0
    be0a:	|                        move.l d0,d0
    be0c:	|                        move.b d0,188ad <encode2>

    while (*checker) {
    be12:	|                 /----- bra.s be76 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    be14:	|              /--|----> move.l 100(sp),30(sp)
    be1a:	|              |  |      move.l 187aa <DOSBase>,d0
    be20:	|              |  |      movea.l d0,a6
    be22:	|              |  |      move.l 30(sp),d1
    be26:	|              |  |      jsr -306(a6)
    be2a:	|              |  |      move.l d0,26(sp)
    be2e:	|              |  |      move.l 26(sp),d1
    be32:	|              |  |      movea.l 116(sp),a0
    be36:	|              |  |      move.b (a0),d0
    be38:	|              |  |      ext.w d0
    be3a:	|              |  |      movea.w d0,a0
    be3c:	|              |  |      cmpa.l d1,a0
    be3e:	|              |  |  /-- beq.s be72 <fileToStack+0xec>
            Close(fp);
    be40:	|              |  |  |   move.l 100(sp),22(sp)
    be46:	|              |  |  |   move.l 187aa <DOSBase>,d0
    be4c:	|              |  |  |   movea.l d0,a6
    be4e:	|              |  |  |   move.l 22(sp),d1
    be52:	|              |  |  |   jsr -36(a6)
    be56:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    be5a:	|              |  |  |   move.l 124(sp),-(sp)
    be5e:	|              |  |  |   pea 16d43 <PutChar+0x174d>
    be64:	|              |  |  |   jsr 14b22 <KPrintF>
    be6a:	|              |  |  |   addq.l #8,sp
            return FALSE;
    be6c:	|              |  |  |   clr.w d0
    be6e:	+--------------|--|--|-- bra.w c0ea <fileToStack+0x364>
        }
        checker++;
    be72:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    be76:	|              |  \----> movea.l 116(sp),a0
    be7a:	|              |         move.b (a0),d0
    be7c:	|              \-------- bne.s be14 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    be7e:	|                        move.w 188ae <saveEncoding>,d0
    be84:	|  /-------------------- beq.s bef8 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    be86:	|  |                     move.l 100(sp),-(sp)
    be8a:	|  |                     jsr c0f4 <readStringEncoded>
    be90:	|  |                     addq.l #4,sp
    be92:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    be96:	|  |                     pea 16d84 <PutChar+0x178e>
    be9c:	|  |                     move.l 100(sp),-(sp)
    bea0:	|  |                     jsr 11f86 <strcmp>
    bea6:	|  |                     addq.l #8,sp
    bea8:	|  |                     tst.l d0
    beaa:	|  |                 /-- beq.s bede <fileToStack+0x158>
            Close(fp);
    beac:	|  |                 |   move.l 100(sp),88(sp)
    beb2:	|  |                 |   move.l 187aa <DOSBase>,d0
    beb8:	|  |                 |   movea.l d0,a6
    beba:	|  |                 |   move.l 88(sp),d1
    bebe:	|  |                 |   jsr -36(a6)
    bec2:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    bec6:	|  |                 |   move.l 124(sp),-(sp)
    beca:	|  |                 |   pea 16d93 <PutChar+0x179d>
    bed0:	|  |                 |   jsr 14b22 <KPrintF>
    bed6:	|  |                 |   addq.l #8,sp
            return FALSE;
    bed8:	|  |                 |   clr.w d0
    beda:	+--|-----------------|-- bra.w c0ea <fileToStack+0x364>
        }
        FreeVec(checker);
    bede:	|  |                 \-> move.l 96(sp),92(sp)
    bee4:	|  |                     move.l 187a2 <SysBase>,d0
    beea:	|  |                     movea.l d0,a6
    beec:	|  |                     movea.l 92(sp),a1
    bef0:	|  |                     jsr -690(a6)
        checker = NULL;
    bef4:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    bef8:	|  >-------------------> move.w 188ae <saveEncoding>,d0
    befe:	|  |     /-------------- beq.w c032 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    bf02:	|  |     |               move.l 100(sp),76(sp)
    bf08:	|  |     |               move.l 187aa <DOSBase>,d0
    bf0e:	|  |     |               movea.l d0,a6
    bf10:	|  |     |               move.l 76(sp),d1
    bf14:	|  |     |               jsr -306(a6)
    bf18:	|  |     |               move.l d0,72(sp)
    bf1c:	|  |     |               move.l 72(sp),d0
    bf20:	|  |     |               move.b 188ac <encode1>,d1
    bf26:	|  |     |               ext.w d1
    bf28:	|  |     |               ext.l d1
    bf2a:	|  |     |               move.l d0,d2
    bf2c:	|  |     |               eor.l d1,d2
    bf2e:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    bf32:	|  |     |               moveq #-1,d0
    bf34:	|  |     |               cmp.l 68(sp),d0
    bf38:	|  |  /--|-------------- beq.w c0c8 <fileToStack+0x342>

            char i = (char) tmp;
    bf3c:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    bf42:	|  |  |  |               move.b 67(sp),d0
    bf46:	|  |  |  |               ext.w d0
    bf48:	|  |  |  |               movea.w d0,a0
    bf4a:	|  |  |  |               moveq #2,d2
    bf4c:	|  |  |  |               cmp.l a0,d2
    bf4e:	|  |  |  |     /-------- beq.s bfca <fileToStack+0x244>
    bf50:	|  |  |  |     |         moveq #2,d0
    bf52:	|  |  |  |     |         cmp.l a0,d0
    bf54:	|  |  |  |  /--|-------- blt.w c000 <fileToStack+0x27a>
    bf58:	|  |  |  |  |  |         cmpa.w #0,a0
    bf5c:	|  |  |  |  |  |     /-- beq.s bf68 <fileToStack+0x1e2>
    bf5e:	|  |  |  |  |  |     |   moveq #1,d2
    bf60:	|  |  |  |  |  |     |   cmp.l a0,d2
    bf62:	|  |  |  |  |  |  /--|-- beq.s bfa4 <fileToStack+0x21e>
    bf64:	|  |  |  |  +--|--|--|-- bra.w c000 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    bf68:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    bf6c:	|  |  |  |  |  |  |      jsr c0f4 <readStringEncoded>
    bf72:	|  |  |  |  |  |  |      addq.l #4,sp
    bf74:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    bf78:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    bf7c:	|  |  |  |  |  |  |      lea 14(sp),a0
    bf80:	|  |  |  |  |  |  |      move.l a0,-(sp)
    bf82:	|  |  |  |  |  |  |      jsr 12cfc <makeTextVar>
    bf88:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    bf8a:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    bf90:	|  |  |  |  |  |  |      move.l 187a2 <SysBase>,d0
    bf96:	|  |  |  |  |  |  |      movea.l d0,a6
    bf98:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    bf9c:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    bfa0:	|  |  |  |  |  |  |  /-- bra.w c058 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    bfa4:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    bfa8:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    bfae:	|  |  |  |  |  |     |   addq.l #4,sp
    bfb0:	|  |  |  |  |  |     |   move.l d0,-(sp)
    bfb2:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    bfb6:	|  |  |  |  |  |     |   lea 18(sp),a0
    bfba:	|  |  |  |  |  |     |   move.l a0,-(sp)
    bfbc:	|  |  |  |  |  |     |   jsr 133cc <setVariable>
    bfc2:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    bfc6:	|  |  |  |  |  |     +-- bra.w c058 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    bfca:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    bfd0:	|  |  |  |  |        |   move.l 187aa <DOSBase>,d0
    bfd6:	|  |  |  |  |        |   movea.l d0,a6
    bfd8:	|  |  |  |  |        |   move.l 62(sp),d1
    bfdc:	|  |  |  |  |        |   jsr -306(a6)
    bfe0:	|  |  |  |  |        |   move.l d0,58(sp)
    bfe4:	|  |  |  |  |        |   move.l 58(sp),d0
    bfe8:	|  |  |  |  |        |   move.l d0,-(sp)
    bfea:	|  |  |  |  |        |   pea 1 <_start+0x1>
    bfee:	|  |  |  |  |        |   lea 18(sp),a0
    bff2:	|  |  |  |  |        |   move.l a0,-(sp)
    bff4:	|  |  |  |  |        |   jsr 133cc <setVariable>
    bffa:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    bffe:	|  |  |  |  |        +-- bra.s c058 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    c000:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    c004:	|  |  |  |           |   pea 16e15 <PutChar+0x181f>
    c00a:	|  |  |  |           |   jsr 14b22 <KPrintF>
    c010:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    c012:	|  |  |  |           |   move.l 100(sp),46(sp)
    c018:	|  |  |  |           |   move.l 187aa <DOSBase>,d0
    c01e:	|  |  |  |           |   movea.l d0,a6
    c020:	|  |  |  |           |   move.l 46(sp),d1
    c024:	|  |  |  |           |   jsr -36(a6)
    c028:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    c02c:	|  |  |  |           |   clr.w d0
    c02e:	+--|--|--|-----------|-- bra.w c0ea <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    c032:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    c036:	|  |  |              |   jsr c1ba <readTextPlain>
    c03c:	|  |  |              |   addq.l #4,sp
    c03e:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    c042:	|  |  |        /-----|-- beq.w c0cc <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    c046:	|  |  |        |     |   move.l 80(sp),-(sp)
    c04a:	|  |  |        |     |   lea 14(sp),a0
    c04e:	|  |  |        |     |   move.l a0,-(sp)
    c050:	|  |  |        |     |   jsr 12cfc <makeTextVar>
    c056:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    c058:	|  |  |        |     \-> movea.l 128(sp),a0
    c05c:	|  |  |        |         move.l (a0),d0
    c05e:	|  |  |        |  /----- bne.s c08e <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    c060:	|  |  |        |  |      move.l 128(sp),d0
    c064:	|  |  |        |  |      move.l d0,-(sp)
    c066:	|  |  |        |  |      lea 14(sp),a0
    c06a:	|  |  |        |  |      move.l a0,-(sp)
    c06c:	|  |  |        |  |      jsr 1239c <addVarToStackQuick>
    c072:	|  |  |        |  |      addq.l #8,sp
    c074:	|  |  |        |  |      tst.w d0
    c076:	|  |  |        |  |  /-- bne.s c07c <fileToStack+0x2f6>
    c078:	|  |  |        |  |  |   clr.w d0
    c07a:	+--|--|--------|--|--|-- bra.s c0ea <fileToStack+0x364>
            sH->last = sH->first;
    c07c:	|  |  |        |  |  \-> movea.l 128(sp),a0
    c080:	|  |  |        |  |      move.l (a0),d0
    c082:	|  |  |        |  |      movea.l 128(sp),a0
    c086:	|  |  |        |  |      move.l d0,4(a0)
    c08a:	|  +--|--------|--|----- bra.w bef8 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    c08e:	|  |  |        |  \----> movea.l 128(sp),a0
    c092:	|  |  |        |         move.l 4(a0),d0
    c096:	|  |  |        |         addq.l #8,d0
    c098:	|  |  |        |         move.l d0,-(sp)
    c09a:	|  |  |        |         lea 14(sp),a0
    c09e:	|  |  |        |         move.l a0,-(sp)
    c0a0:	|  |  |        |         jsr 1239c <addVarToStackQuick>
    c0a6:	|  |  |        |         addq.l #8,sp
    c0a8:	|  |  |        |         tst.w d0
    c0aa:	|  |  |        |     /-- bne.s c0b0 <fileToStack+0x32a>
    c0ac:	|  |  |        |     |   clr.w d0
    c0ae:	+--|--|--------|-----|-- bra.s c0ea <fileToStack+0x364>
            sH->last = sH->last->next;
    c0b0:	|  |  |        |     \-> movea.l 128(sp),a0
    c0b4:	|  |  |        |         movea.l 4(a0),a0
    c0b8:	|  |  |        |         move.l 8(a0),d0
    c0bc:	|  |  |        |         movea.l 128(sp),a0
    c0c0:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    c0c4:	|  \--|--------|-------- bra.w bef8 <fileToStack+0x172>
            if (tmp == -1) break;
    c0c8:	|     \--------|-------> nop
    c0ca:	|              |     /-- bra.s c0ce <fileToStack+0x348>
            if (!line) break;
    c0cc:	|              \-----|-> nop
        }
    }
    Close(fp);
    c0ce:	|                    \-> move.l 100(sp),38(sp)
    c0d4:	|                        move.l 187aa <DOSBase>,d0
    c0da:	|                        movea.l d0,a6
    c0dc:	|                        move.l 38(sp),d1
    c0e0:	|                        jsr -36(a6)
    c0e4:	|                        move.l d0,34(sp)
    return TRUE;
    c0e8:	|                        moveq #1,d0
}
    c0ea:	\----------------------> move.l (sp)+,d2
    c0ec:	                         movea.l (sp)+,a6
    c0ee:	                         lea 112(sp),sp
    c0f2:	                         rts

0000c0f4 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    c0f4:	          lea -32(sp),sp
    c0f8:	          move.l a6,-(sp)
    c0fa:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    c0fc:	          move.l 44(sp),-(sp)
    c100:	          jsr 6bc <get2bytes>
    c106:	          addq.l #4,sp
    c108:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    c10c:	          move.l 32(sp),d0
    c110:	          addq.l #1,d0
    c112:	          move.l d0,28(sp)
    c116:	          clr.l 24(sp)
    c11a:	          move.l 187a2 <SysBase>,d0
    c120:	          movea.l d0,a6
    c122:	          move.l 28(sp),d0
    c126:	          move.l 24(sp),d1
    c12a:	          jsr -684(a6)
    c12e:	          move.l d0,20(sp)
    c132:	          move.l 20(sp),d0
    c136:	          move.l d0,16(sp)
    if (!s) return NULL;
    c13a:	      /-- bne.s c140 <readStringEncoded+0x4c>
    c13c:	      |   moveq #0,d0
    c13e:	/-----|-- bra.s c1b0 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    c140:	|     \-> clr.l 36(sp)
    c144:	|     /-- bra.s c196 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    c146:	|  /--|-> move.l 44(sp),12(sp)
    c14c:	|  |  |   move.l 187aa <DOSBase>,d0
    c152:	|  |  |   movea.l d0,a6
    c154:	|  |  |   move.l 12(sp),d1
    c158:	|  |  |   jsr -306(a6)
    c15c:	|  |  |   move.l d0,8(sp)
    c160:	|  |  |   move.l 8(sp),d0
    c164:	|  |  |   move.l d0,d1
    c166:	|  |  |   move.b 188ac <encode1>,d2
    c16c:	|  |  |   move.l 36(sp),d0
    c170:	|  |  |   movea.l 16(sp),a0
    c174:	|  |  |   adda.l d0,a0
    c176:	|  |  |   move.b d1,d0
    c178:	|  |  |   eor.b d2,d0
    c17a:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    c17c:	|  |  |   move.b 188ac <encode1>,d0
    c182:	|  |  |   move.b d0,d1
    c184:	|  |  |   move.b 188ad <encode2>,d0
    c18a:	|  |  |   add.b d1,d0
    c18c:	|  |  |   move.b d0,188ac <encode1>
    for (a = 0; a < len; a++) {
    c192:	|  |  |   addq.l #1,36(sp)
    c196:	|  |  \-> move.l 36(sp),d0
    c19a:	|  |      cmp.l 32(sp),d0
    c19e:	|  \----- blt.s c146 <readStringEncoded+0x52>
    }
    s[len] = 0;
    c1a0:	|         move.l 32(sp),d0
    c1a4:	|         movea.l 16(sp),a0
    c1a8:	|         adda.l d0,a0
    c1aa:	|         clr.b (a0)
    return s;
    c1ac:	|         move.l 16(sp),d0
}
    c1b0:	\-------> move.l (sp)+,d2
    c1b2:	          movea.l (sp)+,a6
    c1b4:	          lea 32(sp),sp
    c1b8:	          rts

0000c1ba <readTextPlain>:

char *readTextPlain(BPTR fp) {
    c1ba:	             lea -104(sp),sp
    c1be:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    c1c2:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    c1c6:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    c1cc:	             move.l 124(sp),106(sp)
    c1d2:	             clr.l 102(sp)
    c1d6:	             clr.l 98(sp)
    c1da:	             move.l 187aa <DOSBase>,d0
    c1e0:	             movea.l d0,a6
    c1e2:	             move.l 106(sp),d1
    c1e6:	             move.l 102(sp),d2
    c1ea:	             move.l 98(sp),d3
    c1ee:	             jsr -66(a6)
    c1f2:	             move.l d0,94(sp)
    c1f6:	             move.l 94(sp),d0
    c1fa:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    c1fe:	   /-------- bra.s c242 <readTextPlain+0x88>
        tmp = FGetC(fp);
    c200:	/--|-------> move.l 124(sp),22(sp)
    c206:	|  |         move.l 187aa <DOSBase>,d0
    c20c:	|  |         movea.l d0,a6
    c20e:	|  |         move.l 22(sp),d1
    c212:	|  |         jsr -306(a6)
    c216:	|  |         move.l d0,18(sp)
    c21a:	|  |         move.l 18(sp),d0
    c21e:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    c222:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    c228:	|  |         cmpi.b #10,17(sp)
    c22e:	|  |  /----- beq.s c238 <readTextPlain+0x7e>
    c230:	|  |  |      moveq #-1,d0
    c232:	|  |  |      cmp.l 110(sp),d0
    c236:	|  |  |  /-- bne.s c23e <readTextPlain+0x84>
            keepGoing = FALSE;
    c238:	|  |  \--|-> clr.w 114(sp)
    c23c:	|  +-----|-- bra.s c242 <readTextPlain+0x88>
        } else {
            stringSize++;
    c23e:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    c242:	|  \-------> tst.w 114(sp)
    c246:	\----------- bne.s c200 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    c248:	             tst.l 116(sp)
    c24c:	         /-- bne.s c25c <readTextPlain+0xa2>
    c24e:	         |   moveq #-1,d0
    c250:	         |   cmp.l 110(sp),d0
    c254:	         +-- bne.s c25c <readTextPlain+0xa2>
        return NULL;
    c256:	         |   moveq #0,d0
    c258:	      /--|-- bra.w c342 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    c25c:	      |  \-> move.l 124(sp),86(sp)
    c262:	      |      move.l 90(sp),82(sp)
    c268:	      |      moveq #-1,d0
    c26a:	      |      move.l d0,78(sp)
    c26e:	      |      move.l 187aa <DOSBase>,d0
    c274:	      |      movea.l d0,a6
    c276:	      |      move.l 86(sp),d1
    c27a:	      |      move.l 82(sp),d2
    c27e:	      |      move.l 78(sp),d3
    c282:	      |      jsr -66(a6)
    c286:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    c28a:	      |      move.l 116(sp),d0
    c28e:	      |      addq.l #1,d0
    c290:	      |      move.l d0,70(sp)
    c294:	      |      clr.l 66(sp)
    c298:	      |      move.l 187a2 <SysBase>,d0
    c29e:	      |      movea.l d0,a6
    c2a0:	      |      move.l 70(sp),d0
    c2a4:	      |      move.l 66(sp),d1
    c2a8:	      |      jsr -684(a6)
    c2ac:	      |      move.l d0,62(sp)
    c2b0:	      |      move.l 62(sp),d0
    c2b4:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    c2b8:	      |  /-- bne.s c2c0 <readTextPlain+0x106>
    c2ba:	      |  |   moveq #0,d0
    c2bc:	      +--|-- bra.w c342 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    c2c0:	      |  \-> move.l 124(sp),54(sp)
    c2c6:	      |      move.l 58(sp),50(sp)
    c2cc:	      |      moveq #1,d0
    c2ce:	      |      move.l d0,46(sp)
    c2d2:	      |      move.l 116(sp),42(sp)
    c2d8:	      |      move.l 187aa <DOSBase>,d0
    c2de:	      |      movea.l d0,a6
    c2e0:	      |      move.l 54(sp),d1
    c2e4:	      |      move.l 50(sp),d2
    c2e8:	      |      move.l 46(sp),d3
    c2ec:	      |      move.l 42(sp),d4
    c2f0:	      |      jsr -324(a6)
    c2f4:	      |      move.l d0,38(sp)
    c2f8:	      |      move.l 38(sp),d0
    c2fc:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    c300:	      |      move.l 34(sp),d0
    c304:	      |      cmp.l 116(sp),d0
    c308:	      |  /-- beq.s c318 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    c30a:	      |  |   pea 16e4a <PutChar+0x1854>
    c310:	      |  |   jsr 14b22 <KPrintF>
    c316:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    c318:	      |  \-> move.l 124(sp),30(sp)
    c31e:	      |      move.l 187aa <DOSBase>,d0
    c324:	      |      movea.l d0,a6
    c326:	      |      move.l 30(sp),d1
    c32a:	      |      jsr -306(a6)
    c32e:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    c332:	      |      move.l 116(sp),d0
    c336:	      |      movea.l 58(sp),a0
    c33a:	      |      adda.l d0,a0
    c33c:	      |      clr.b (a0)
    }

    return reply;
    c33e:	      |      move.l 58(sp),d0
}
    c342:	      \----> movem.l (sp)+,d2-d4/a6
    c346:	             lea 104(sp),sp
    c34a:	             rts

0000c34c <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    c34c:	                      lea -144(sp),sp
    c350:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    c354:	                      move.l 160(sp),148(sp)
    c35a:	                      move.l #1006,144(sp)
    c362:	                      move.l 187aa <DOSBase>,d0
    c368:	                      movea.l d0,a6
    c36a:	                      move.l 148(sp),d1
    c36e:	                      move.l 144(sp),d2
    c372:	                      jsr -30(a6)
    c376:	                      move.l d0,140(sp)
    c37a:	                      move.l 140(sp),d0
    c37e:	                      move.l d0,136(sp)

    if (!fp) {
    c382:	                  /-- bne.s c39c <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    c384:	                  |   move.l 160(sp),-(sp)
    c388:	                  |   pea 16e6b <PutChar+0x1875>
    c38e:	                  |   jsr 14b22 <KPrintF>
    c394:	                  |   addq.l #8,sp
        return FALSE;
    c396:	                  |   clr.w d0
    c398:	/-----------------|-- bra.w c658 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    c39c:	|                 \-> movea.l 164(sp),a0
    c3a0:	|                     movea.l 4(a0),a0
    c3a4:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    c3a8:	|                     move.w 188ae <saveEncoding>,d0
    c3ae:	|                     move.l d0,d0
    c3b0:	|                     move.b d0,188ac <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    c3b6:	|                     move.w 188ae <saveEncoding>,d0
    c3bc:	|                     lsr.w #8,d0
    c3be:	|                     move.l d0,d0
    c3c0:	|                     move.b d0,188ad <encode2>

    if (saveEncoding) {
    c3c6:	|                     move.w 188ae <saveEncoding>,d0
    c3cc:	|                 /-- beq.s c41e <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    c3ce:	|                 |   move.l 136(sp),116(sp)
    c3d4:	|                 |   move.l #93445,112(sp)
    c3dc:	|                 |   moveq #99,d0
    c3de:	|                 |   not.b d0
    c3e0:	|                 |   add.l sp,d0
    c3e2:	|                 |   addi.l #-144,d0
    c3e8:	|                 |   move.l d0,108(sp)
    c3ec:	|                 |   move.l 187aa <DOSBase>,d0
    c3f2:	|                 |   movea.l d0,a6
    c3f4:	|                 |   move.l 116(sp),d1
    c3f8:	|                 |   move.l 112(sp),d2
    c3fc:	|                 |   move.l 108(sp),d3
    c400:	|                 |   jsr -354(a6)
    c404:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    c408:	|                 |   move.l 136(sp),-(sp)
    c40c:	|                 |   pea 16d84 <PutChar+0x178e>
    c412:	|                 |   jsr c662 <writeStringEncoded>
    c418:	|                 |   addq.l #8,sp
    c41a:	|  /--------------|-- bra.w c630 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    c41e:	|  |              \-> move.l 136(sp),132(sp)
    c424:	|  |                  move.l #93471,128(sp)
    c42c:	|  |                  moveq #99,d1
    c42e:	|  |                  not.b d1
    c430:	|  |                  add.l sp,d1
    c432:	|  |                  addi.l #-144,d1
    c438:	|  |                  move.l d1,124(sp)
    c43c:	|  |                  move.l 187aa <DOSBase>,d0
    c442:	|  |                  movea.l d0,a6
    c444:	|  |                  move.l 132(sp),d1
    c448:	|  |                  move.l 128(sp),d2
    c44c:	|  |                  move.l 124(sp),d3
    c450:	|  |                  jsr -354(a6)
    c454:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    c458:	|  +----------------- bra.w c630 <stackToFile+0x2e4>
        if (saveEncoding) {
    c45c:	|  |  /-------------> move.w 188ae <saveEncoding>,d0
    c462:	|  |  |     /-------- beq.w c5b4 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    c466:	|  |  |     |         movea.l 152(sp),a0
    c46a:	|  |  |     |         move.l (a0),d0
    c46c:	|  |  |     |         moveq #1,d1
    c46e:	|  |  |     |         cmp.l d0,d1
    c470:	|  |  |     |     /-- beq.s c4c0 <stackToFile+0x174>
    c472:	|  |  |     |     |   moveq #3,d1
    c474:	|  |  |     |     |   cmp.l d0,d1
    c476:	|  |  |     |  /--|-- bne.w c582 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    c47a:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    c480:	|  |  |     |  |  |   move.b 188ac <encode1>,d0
    c486:	|  |  |     |  |  |   ext.w d0
    c488:	|  |  |     |  |  |   movea.w d0,a0
    c48a:	|  |  |     |  |  |   move.l a0,72(sp)
    c48e:	|  |  |     |  |  |   move.l 187aa <DOSBase>,d0
    c494:	|  |  |     |  |  |   movea.l d0,a6
    c496:	|  |  |     |  |  |   move.l 76(sp),d1
    c49a:	|  |  |     |  |  |   move.l 72(sp),d2
    c49e:	|  |  |     |  |  |   jsr -312(a6)
    c4a2:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    c4a6:	|  |  |     |  |  |   movea.l 152(sp),a0
    c4aa:	|  |  |     |  |  |   move.l 4(a0),d0
    c4ae:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    c4b2:	|  |  |     |  |  |   move.l d0,-(sp)
    c4b4:	|  |  |     |  |  |   jsr c662 <writeStringEncoded>
    c4ba:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    c4bc:	|  |  |  /--|--|--|-- bra.w c626 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    c4c0:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    c4c4:	|  |  |  |  |  |      move.l 4(a0),d0
    c4c8:	|  |  |  |  |  |  /-- bmi.s c538 <stackToFile+0x1ec>
    c4ca:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    c4ce:	|  |  |  |  |  |  |   move.l 4(a0),d0
    c4d2:	|  |  |  |  |  |  |   cmpi.l #255,d0
    c4d8:	|  |  |  |  |  |  +-- bgt.s c538 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    c4da:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    c4e0:	|  |  |  |  |  |  |   move.b 188ac <encode1>,d0
    c4e6:	|  |  |  |  |  |  |   eori.b #2,d0
    c4ea:	|  |  |  |  |  |  |   ext.w d0
    c4ec:	|  |  |  |  |  |  |   movea.w d0,a0
    c4ee:	|  |  |  |  |  |  |   move.l a0,60(sp)
    c4f2:	|  |  |  |  |  |  |   move.l 187aa <DOSBase>,d0
    c4f8:	|  |  |  |  |  |  |   movea.l d0,a6
    c4fa:	|  |  |  |  |  |  |   move.l 64(sp),d1
    c4fe:	|  |  |  |  |  |  |   move.l 60(sp),d2
    c502:	|  |  |  |  |  |  |   jsr -312(a6)
    c506:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    c50a:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    c510:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    c514:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    c51a:	|  |  |  |  |  |  |   move.l 187aa <DOSBase>,d0
    c520:	|  |  |  |  |  |  |   movea.l d0,a6
    c522:	|  |  |  |  |  |  |   move.l 52(sp),d1
    c526:	|  |  |  |  |  |  |   move.l 48(sp),d2
    c52a:	|  |  |  |  |  |  |   jsr -312(a6)
    c52e:	|  |  |  |  |  |  |   move.l d0,44(sp)
    c532:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    c534:	|  |  |  +--|--|--|-- bra.w c626 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    c538:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    c53e:	|  |  |  |  |  |      move.b 188ac <encode1>,d0
    c544:	|  |  |  |  |  |      eori.b #1,d0
    c548:	|  |  |  |  |  |      ext.w d0
    c54a:	|  |  |  |  |  |      movea.w d0,a0
    c54c:	|  |  |  |  |  |      move.l a0,36(sp)
    c550:	|  |  |  |  |  |      move.l 187aa <DOSBase>,d0
    c556:	|  |  |  |  |  |      movea.l d0,a6
    c558:	|  |  |  |  |  |      move.l 40(sp),d1
    c55c:	|  |  |  |  |  |      move.l 36(sp),d2
    c560:	|  |  |  |  |  |      jsr -312(a6)
    c564:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    c568:	|  |  |  |  |  |      movea.l 152(sp),a0
    c56c:	|  |  |  |  |  |      move.l 4(a0),d0
    c570:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    c574:	|  |  |  |  |  |      move.l d0,-(sp)
    c576:	|  |  |  |  |  |      jsr 958 <put4bytes>
    c57c:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    c57e:	|  |  |  +--|--|----- bra.w c626 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    c582:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    c586:	|  |  |  |  |         pea 16e7d <PutChar+0x1887>
    c58c:	|  |  |  |  |         jsr 14b22 <KPrintF>
    c592:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    c594:	|  |  |  |  |         move.l 136(sp),28(sp)
    c59a:	|  |  |  |  |         move.l 187aa <DOSBase>,d0
    c5a0:	|  |  |  |  |         movea.l d0,a6
    c5a2:	|  |  |  |  |         move.l 28(sp),d1
    c5a6:	|  |  |  |  |         jsr -36(a6)
    c5aa:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    c5ae:	|  |  |  |  |         clr.w d0
    c5b0:	+--|--|--|--|-------- bra.w c658 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    c5b4:	|  |  |  |  \-------> move.l 152(sp),d0
    c5b8:	|  |  |  |            move.l d0,-(sp)
    c5ba:	|  |  |  |            jsr 130b0 <getTextFromAnyVar>
    c5c0:	|  |  |  |            addq.l #4,sp
    c5c2:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    c5c6:	|  |  |  |     /----- beq.s c63a <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    c5c8:	|  |  |  |     |      movea.l 100(sp),a0
    c5cc:	|  |  |  |     |      move.b (a0),d0
    c5ce:	|  |  |  |     |      ext.w d0
    c5d0:	|  |  |  |     |      movea.w d0,a0
    c5d2:	|  |  |  |     |      move.l a0,12(sp)
    c5d6:	|  |  |  |     |      move.l 136(sp),96(sp)
    c5dc:	|  |  |  |     |      move.l #93913,92(sp)
    c5e4:	|  |  |  |     |      moveq #99,d0
    c5e6:	|  |  |  |     |      not.b d0
    c5e8:	|  |  |  |     |      add.l sp,d0
    c5ea:	|  |  |  |     |      addi.l #-144,d0
    c5f0:	|  |  |  |     |      move.l d0,88(sp)
    c5f4:	|  |  |  |     |      move.l 187aa <DOSBase>,d0
    c5fa:	|  |  |  |     |      movea.l d0,a6
    c5fc:	|  |  |  |     |      move.l 96(sp),d1
    c600:	|  |  |  |     |      move.l 92(sp),d2
    c604:	|  |  |  |     |      move.l 88(sp),d3
    c608:	|  |  |  |     |      jsr -354(a6)
    c60c:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    c610:	|  |  |  |     |      move.l 100(sp),80(sp)
    c616:	|  |  |  |     |      move.l 187a2 <SysBase>,d0
    c61c:	|  |  |  |     |      movea.l d0,a6
    c61e:	|  |  |  |     |      movea.l 80(sp),a1
    c622:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    c626:	|  |  |  \-----|----> movea.l 152(sp),a0
    c62a:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    c630:	|  \--|--------|----> tst.l 152(sp)
    c634:	|     \--------|----- bne.w c45c <stackToFile+0x110>
    c638:	|              |  /-- bra.s c63c <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    c63a:	|              \--|-> nop
    }
    Close(fp);
    c63c:	|                 \-> move.l 136(sp),20(sp)
    c642:	|                     move.l 187aa <DOSBase>,d0
    c648:	|                     movea.l d0,a6
    c64a:	|                     move.l 20(sp),d1
    c64e:	|                     jsr -36(a6)
    c652:	|                     move.l d0,16(sp)
    return TRUE;
    c656:	|                     moveq #1,d0
}
    c658:	\-------------------> movem.l (sp)+,d2-d3/a6
    c65c:	                      lea 144(sp),sp
    c660:	                      rts

0000c662 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    c662:	       lea -20(sp),sp
    c666:	       move.l a6,-(sp)
    c668:	       move.l d2,-(sp)
	int a, len = strlen (s);
    c66a:	       move.l 32(sp),-(sp)
    c66e:	       jsr 11fc6 <strlen>
    c674:	       addq.l #4,sp
    c676:	       move.l d0,20(sp)

	put2bytes (len, fp);
    c67a:	       move.l 36(sp),-(sp)
    c67e:	       move.l 24(sp),-(sp)
    c682:	       jsr 8d0 <put2bytes>
    c688:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    c68a:	       clr.l 24(sp)
    c68e:	   /-- bra.s c6e4 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    c690:	/--|-> move.l 36(sp),16(sp)
    c696:	|  |   move.l 24(sp),d0
    c69a:	|  |   movea.l 32(sp),a0
    c69e:	|  |   adda.l d0,a0
    c6a0:	|  |   move.b (a0),d1
    c6a2:	|  |   move.b 188ac <encode1>,d0
    c6a8:	|  |   eor.b d1,d0
    c6aa:	|  |   ext.w d0
    c6ac:	|  |   movea.w d0,a0
    c6ae:	|  |   move.l a0,12(sp)
    c6b2:	|  |   move.l 187aa <DOSBase>,d0
    c6b8:	|  |   movea.l d0,a6
    c6ba:	|  |   move.l 16(sp),d1
    c6be:	|  |   move.l 12(sp),d2
    c6c2:	|  |   jsr -312(a6)
    c6c6:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    c6ca:	|  |   move.b 188ac <encode1>,d0
    c6d0:	|  |   move.b d0,d1
    c6d2:	|  |   move.b 188ad <encode2>,d0
    c6d8:	|  |   add.b d1,d0
    c6da:	|  |   move.b d0,188ac <encode1>
	for (a = 0; a < len; a ++) {
    c6e0:	|  |   addq.l #1,24(sp)
    c6e4:	|  \-> move.l 24(sp),d0
    c6e8:	|      cmp.l 20(sp),d0
    c6ec:	\----- blt.s c690 <writeStringEncoded+0x2e>
	}
}
    c6ee:	       nop
    c6f0:	       nop
    c6f2:	       move.l (sp)+,d2
    c6f4:	       movea.l (sp)+,a6
    c6f6:	       lea 20(sp),sp
    c6fa:	       rts

0000c6fc <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    c6fc:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    c6fe:	                   tst.l 8(sp)
    c702:	               /-- bne.s c708 <failSecurityCheck+0xc>
    c704:	               |   moveq #1,d0
    c706:	/--------------|-- bra.s c786 <failSecurityCheck+0x8a>

	int a = 0;
    c708:	|              \-> clr.l (sp)

	while (fn[a]) {
    c70a:	|     /----------- bra.s c778 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    c70c:	|  /--|----------> move.l (sp),d0
    c70e:	|  |  |            movea.l 8(sp),a0
    c712:	|  |  |            adda.l d0,a0
    c714:	|  |  |            move.b (a0),d0
    c716:	|  |  |            ext.w d0
    c718:	|  |  |            movea.w d0,a0
    c71a:	|  |  |            moveq #124,d0
    c71c:	|  |  |            cmp.l a0,d0
    c71e:	|  |  |     /----- beq.s c760 <failSecurityCheck+0x64>
    c720:	|  |  |     |      moveq #124,d1
    c722:	|  |  |     |      cmp.l a0,d1
    c724:	|  |  |  /--|----- blt.s c776 <failSecurityCheck+0x7a>
    c726:	|  |  |  |  |      moveq #92,d0
    c728:	|  |  |  |  |      cmp.l a0,d0
    c72a:	|  |  |  |  +----- beq.s c760 <failSecurityCheck+0x64>
    c72c:	|  |  |  |  |      moveq #92,d1
    c72e:	|  |  |  |  |      cmp.l a0,d1
    c730:	|  |  |  +--|----- blt.s c776 <failSecurityCheck+0x7a>
    c732:	|  |  |  |  |      moveq #60,d0
    c734:	|  |  |  |  |      cmp.l a0,d0
    c736:	|  |  |  |  |  /-- blt.s c756 <failSecurityCheck+0x5a>
    c738:	|  |  |  |  |  |   moveq #34,d1
    c73a:	|  |  |  |  |  |   cmp.l a0,d1
    c73c:	|  |  |  +--|--|-- bgt.s c776 <failSecurityCheck+0x7a>
    c73e:	|  |  |  |  |  |   moveq #-34,d1
    c740:	|  |  |  |  |  |   add.l a0,d1
    c742:	|  |  |  |  |  |   move.l #83894529,d0
    c748:	|  |  |  |  |  |   lsr.l d1,d0
    c74a:	|  |  |  |  |  |   moveq #1,d1
    c74c:	|  |  |  |  |  |   and.l d1,d0
    c74e:	|  |  |  |  |  |   sne d0
    c750:	|  |  |  |  |  |   neg.b d0
    c752:	|  |  |  |  +--|-- bne.s c760 <failSecurityCheck+0x64>
    c754:	|  |  |  +--|--|-- bra.s c776 <failSecurityCheck+0x7a>
    c756:	|  |  |  |  |  \-> lea -62(a0),a0
    c75a:	|  |  |  |  |      moveq #1,d0
    c75c:	|  |  |  |  |      cmp.l a0,d0
    c75e:	|  |  |  +--|----- bcs.s c776 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    c760:	|  |  |  |  \----> move.l 8(sp),-(sp)
    c764:	|  |  |  |         pea 16edd <PutChar+0x18e7>
    c76a:	|  |  |  |         jsr 14b22 <KPrintF>
    c770:	|  |  |  |         addq.l #8,sp
				return TRUE;
    c772:	|  |  |  |         moveq #1,d0
    c774:	+--|--|--|-------- bra.s c786 <failSecurityCheck+0x8a>
		}
		a++;
    c776:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    c778:	|  |  \----------> move.l (sp),d0
    c77a:	|  |               movea.l 8(sp),a0
    c77e:	|  |               adda.l d0,a0
    c780:	|  |               move.b (a0),d0
    c782:	|  \-------------- bne.s c70c <failSecurityCheck+0x10>
	}
	return FALSE;
    c784:	|                  clr.w d0
}
    c786:	\----------------> addq.l #4,sp
    c788:	                   rts

0000c78a <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    c78a:	             lea -24(sp),sp
    c78e:	             move.l a6,-(sp)
    c790:	             move.l 40(sp),d0
    c794:	             move.w d0,d0
    c796:	             move.w d0,6(sp)
	int fileNum = -1;
    c79a:	             moveq #-1,d0
    c79c:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    c7a0:	             jsr 48fc <killSpeechTimers>

	switch (numParams) {
    c7a6:	             moveq #2,d0
    c7a8:	             cmp.l 32(sp),d0
    c7ac:	      /----- beq.s c7f0 <sayCore+0x66>
    c7ae:	      |      moveq #3,d0
    c7b0:	      |      cmp.l 32(sp),d0
    c7b4:	/-----|----- bne.w c8d2 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    c7b8:	|     |      movea.l 36(sp),a0
    c7bc:	|     |      move.l 24(a0),d0
    c7c0:	|     |      move.l d0,-(sp)
    c7c2:	|     |      pea 5 <_start+0x5>
    c7c6:	|     |      lea 20(sp),a0
    c7ca:	|     |      move.l a0,-(sp)
    c7cc:	|     |      jsr 12ada <getValueType>
    c7d2:	|     |      lea 12(sp),sp
    c7d6:	|     |      tst.w d0
    c7d8:	|     |  /-- bne.s c7e0 <sayCore+0x56>
    c7da:	|     |  |   moveq #1,d0
    c7dc:	|  /--|--|-- bra.w c8e2 <sayCore+0x158>
			trimStack (&fun -> stack);
    c7e0:	|  |  |  \-> moveq #24,d0
    c7e2:	|  |  |      add.l 36(sp),d0
    c7e6:	|  |  |      move.l d0,-(sp)
    c7e8:	|  |  |      jsr 1345e <trimStack>
    c7ee:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    c7f0:	|  |  \----> movea.l 36(sp),a0
    c7f4:	|  |         move.l 24(a0),d0
    c7f8:	|  |         move.l d0,-(sp)
    c7fa:	|  |         jsr 130b0 <getTextFromAnyVar>
    c800:	|  |         addq.l #4,sp
    c802:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    c806:	|  |     /-- bne.s c80e <sayCore+0x84>
    c808:	|  |     |   moveq #1,d0
    c80a:	|  +-----|-- bra.w c8e2 <sayCore+0x158>
			trimStack (&fun -> stack);
    c80e:	|  |     \-> moveq #24,d0
    c810:	|  |         add.l 36(sp),d0
    c814:	|  |         move.l d0,-(sp)
    c816:	|  |         jsr 1345e <trimStack>
    c81c:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c81e:	|  |         movea.l 36(sp),a0
    c822:	|  |         move.l 24(a0),d0
    c826:	|  |         move.l d0,-(sp)
    c828:	|  |         pea 7 <_start+0x7>
    c82c:	|  |         lea 16(sp),a0
    c830:	|  |         move.l a0,-(sp)
    c832:	|  |         jsr 12ada <getValueType>
    c838:	|  |         lea 12(sp),sp
    c83c:	|  |         tst.w d0
    c83e:	|  |     /-- bne.s c846 <sayCore+0xbc>
    c840:	|  |     |   moveq #1,d0
    c842:	|  +-----|-- bra.w c8e2 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c846:	|  |     \-> movea.l 36(sp),a0
    c84a:	|  |         move.l 24(a0),d0
    c84e:	|  |         move.l d0,-(sp)
    c850:	|  |         pea 7 <_start+0x7>
    c854:	|  |         lea 16(sp),a0
    c858:	|  |         move.l a0,-(sp)
    c85a:	|  |         jsr 12ada <getValueType>
    c860:	|  |         lea 12(sp),sp
    c864:	|  |         tst.w d0
    c866:	|  |     /-- bne.s c86c <sayCore+0xe2>
    c868:	|  |     |   moveq #1,d0
    c86a:	|  +-----|-- bra.s c8e2 <sayCore+0x158>
			trimStack (&fun -> stack);
    c86c:	|  |     \-> moveq #24,d0
    c86e:	|  |         add.l 36(sp),d0
    c872:	|  |         move.l d0,-(sp)
    c874:	|  |         jsr 1345e <trimStack>
    c87a:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    c87c:	|  |         movea.w 6(sp),a0
    c880:	|  |         move.l 12(sp),d1
    c884:	|  |         move.l 8(sp),d0
    c888:	|  |         move.l a0,-(sp)
    c88a:	|  |         move.l d1,-(sp)
    c88c:	|  |         move.l d0,-(sp)
    c88e:	|  |         move.l 36(sp),-(sp)
    c892:	|  |         jsr 6870 <wrapSpeech>
    c898:	|  |         lea 16(sp),sp
    c89c:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    c8a0:	|  |         movea.l 36(sp),a0
    c8a4:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    c8aa:	|  |         movea.l 36(sp),a0
    c8ae:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    c8b4:	|  |         move.l 24(sp),16(sp)
    c8ba:	|  |         move.l 187a2 <SysBase>,d0
    c8c0:	|  |         movea.l d0,a6
    c8c2:	|  |         movea.l 16(sp),a1
    c8c6:	|  |         jsr -690(a6)
			newText = NULL;
    c8ca:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    c8ce:	|  |         moveq #0,d0
    c8d0:	|  +-------- bra.s c8e2 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    c8d2:	\--|-------> pea 16f63 <PutChar+0x196d>
    c8d8:	   |         jsr 14b22 <KPrintF>
    c8de:	   |         addq.l #4,sp
	return BR_ERROR;
    c8e0:	   |         moveq #1,d0
}
    c8e2:	   \-------> movea.l (sp)+,a6
    c8e4:	             lea 24(sp),sp
    c8e8:	             rts

0000c8ea <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    c8ea:	pea 1 <_start+0x1>
    c8ee:	move.l 12(sp),-(sp)
    c8f2:	move.l 12(sp),-(sp)
    c8f6:	jsr c78a <sayCore>
    c8fc:	lea 12(sp),sp
}
    c900:	rts

0000c902 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    c902:	clr.l -(sp)
    c904:	move.l 12(sp),-(sp)
    c908:	move.l 12(sp),-(sp)
    c90c:	jsr c78a <sayCore>
    c912:	lea 12(sp),sp
}
    c916:	rts

0000c918 <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    c918:	moveq #2,d0
}
    c91a:	rts

0000c91c <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    c91c:	moveq #2,d0
}
    c91e:	rts

0000c920 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    c920:	nop
    c922:	rts

0000c924 <builtIn_setCursor>:

builtIn(setCursor)
{
    c924:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    c926:	movea.l 12(sp),a0
    c92a:	move.l 24(a0),d0
    c92e:	move.l d0,-(sp)
    c930:	jsr 12fb2 <getAnimationFromVar>
    c936:	addq.l #4,sp
    c938:	move.l d0,(sp)
	pickAnimCursor (aa);
    c93a:	move.l (sp),-(sp)
    c93c:	jsr dba <pickAnimCursor>
    c942:	addq.l #4,sp
	trimStack (&fun -> stack);
    c944:	moveq #24,d0
    c946:	add.l 12(sp),d0
    c94a:	move.l d0,-(sp)
    c94c:	jsr 1345e <trimStack>
    c952:	addq.l #4,sp
	return BR_CONTINUE;
    c954:	moveq #2,d0
}
    c956:	addq.l #4,sp
    c958:	rts

0000c95a <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    c95a:	move.l 1875e <input+0xa>,d1
    c960:	move.l 188b0 <cameraX>,d0
    c966:	add.l d0,d1
    c968:	moveq #28,d0
    c96a:	add.l 8(sp),d0
    c96e:	move.l d1,-(sp)
    c970:	pea 1 <_start+0x1>
    c974:	move.l d0,-(sp)
    c976:	jsr 133cc <setVariable>
    c97c:	lea 12(sp),sp
	return BR_CONTINUE;
    c980:	moveq #2,d0
}
    c982:	rts

0000c984 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    c984:	move.l 18762 <input+0xe>,d1
    c98a:	move.l 188b4 <cameraY>,d0
    c990:	add.l d0,d1
    c992:	moveq #28,d0
    c994:	add.l 8(sp),d0
    c998:	move.l d1,-(sp)
    c99a:	pea 1 <_start+0x1>
    c99e:	move.l d0,-(sp)
    c9a0:	jsr 133cc <setVariable>
    c9a6:	lea 12(sp),sp
	return BR_CONTINUE;
    c9aa:	moveq #2,d0
}
    c9ac:	rts

0000c9ae <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    c9ae:	move.l 1875e <input+0xa>,d0
    c9b4:	move.l d0,-(sp)
    c9b6:	jsr 14f5e <__floatsisf>
    c9bc:	addq.l #4,sp
    c9be:	move.l d0,d1
    c9c0:	move.l 18142 <cameraZoom>,d0
    c9c6:	move.l d0,-(sp)
    c9c8:	move.l d1,-(sp)
    c9ca:	jsr 15010 <__mulsf3>
    c9d0:	addq.l #8,sp
    c9d2:	move.l d0,-(sp)
    c9d4:	jsr 14ef6 <__fixsfsi>
    c9da:	addq.l #4,sp
    c9dc:	move.l d0,d1
    c9de:	moveq #28,d0
    c9e0:	add.l 8(sp),d0
    c9e4:	move.l d1,-(sp)
    c9e6:	pea 1 <_start+0x1>
    c9ea:	move.l d0,-(sp)
    c9ec:	jsr 133cc <setVariable>
    c9f2:	lea 12(sp),sp
	return BR_CONTINUE;
    c9f6:	moveq #2,d0
}
    c9f8:	rts

0000c9fa <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    c9fa:	move.l 18762 <input+0xe>,d0
    ca00:	move.l d0,-(sp)
    ca02:	jsr 14f5e <__floatsisf>
    ca08:	addq.l #4,sp
    ca0a:	move.l d0,d1
    ca0c:	move.l 18142 <cameraZoom>,d0
    ca12:	move.l d0,-(sp)
    ca14:	move.l d1,-(sp)
    ca16:	jsr 15010 <__mulsf3>
    ca1c:	addq.l #8,sp
    ca1e:	move.l d0,-(sp)
    ca20:	jsr 14ef6 <__fixsfsi>
    ca26:	addq.l #4,sp
    ca28:	move.l d0,d1
    ca2a:	moveq #28,d0
    ca2c:	add.l 8(sp),d0
    ca30:	move.l d1,-(sp)
    ca32:	pea 1 <_start+0x1>
    ca36:	move.l d0,-(sp)
    ca38:	jsr 133cc <setVariable>
    ca3e:	lea 12(sp),sp
	return BR_CONTINUE;
    ca42:	moveq #2,d0
}
    ca44:	rts

0000ca46 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    ca46:	jsr 6324 <statusBarText>
    ca4c:	move.l d0,d1
    ca4e:	moveq #28,d0
    ca50:	add.l 8(sp),d0
    ca54:	move.l d1,-(sp)
    ca56:	move.l d0,-(sp)
    ca58:	jsr 12cfc <makeTextVar>
    ca5e:	addq.l #8,sp
	return BR_CONTINUE;
    ca60:	moveq #2,d0
}
    ca62:	rts

0000ca64 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    ca64:	       lea -20(sp),sp
    ca68:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ca6a:	       movea.l 32(sp),a0
    ca6e:	       move.l 24(a0),d0
    ca72:	       move.l d0,-(sp)
    ca74:	       jsr 130b0 <getTextFromAnyVar>
    ca7a:	       addq.l #4,sp
    ca7c:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    ca80:	   /-- bne.s ca88 <builtIn_getMatchingFiles+0x24>
    ca82:	   |   moveq #1,d0
    ca84:	/--|-- bra.w cb4a <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    ca88:	|  \-> moveq #24,d0
    ca8a:	|      add.l 32(sp),d0
    ca8e:	|      move.l d0,-(sp)
    ca90:	|      jsr 1345e <trimStack>
    ca96:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    ca98:	|      moveq #28,d0
    ca9a:	|      add.l 32(sp),d0
    ca9e:	|      move.l d0,-(sp)
    caa0:	|      jsr 12d28 <unlinkVar>
    caa6:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    caa8:	|      movea.l 32(sp),a0
    caac:	|      moveq #6,d0
    caae:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    cab2:	|      moveq #12,d0
    cab4:	|      move.l d0,16(sp)
    cab8:	|      clr.l 12(sp)
    cabc:	|      move.l 187a2 <SysBase>,d0
    cac2:	|      movea.l d0,a6
    cac4:	|      move.l 16(sp),d0
    cac8:	|      move.l 12(sp),d1
    cacc:	|      jsr -684(a6)
    cad0:	|      move.l d0,8(sp)
    cad4:	|      move.l 8(sp),d0
    cad8:	|      movea.l 32(sp),a0
    cadc:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    cae0:	|      moveq #32,d0
    cae2:	|      add.l 32(sp),d0
    cae6:	|  /-- bne.s caec <builtIn_getMatchingFiles+0x88>
    cae8:	|  |   moveq #1,d0
    caea:	+--|-- bra.s cb4a <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    caec:	|  \-> movea.l 32(sp),a0
    caf0:	|      movea.l 32(a0),a0
    caf4:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    caf6:	|      movea.l 32(sp),a0
    cafa:	|      movea.l 32(a0),a0
    cafe:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    cb02:	|      movea.l 32(sp),a0
    cb06:	|      movea.l 32(a0),a0
    cb0a:	|      moveq #1,d0
    cb0c:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    cb10:	|      movea.l 32(sp),a0
    cb14:	|      move.l 32(a0),d0
    cb18:	|      move.l 20(sp),-(sp)
    cb1c:	|      move.l d0,-(sp)
    cb1e:	|      jsr 12896 <getSavedGamesStack>
    cb24:	|      addq.l #8,sp
    cb26:	|      tst.w d0
    cb28:	|  /-- bne.s cb2e <builtIn_getMatchingFiles+0xca>
    cb2a:	|  |   moveq #1,d0
    cb2c:	+--|-- bra.s cb4a <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    cb2e:	|  \-> move.l 20(sp),4(sp)
    cb34:	|      move.l 187a2 <SysBase>,d0
    cb3a:	|      movea.l d0,a6
    cb3c:	|      movea.l 4(sp),a1
    cb40:	|      jsr -690(a6)
	newText = NULL;
    cb44:	|      clr.l 20(sp)
	return BR_CONTINUE;
    cb48:	|      moveq #2,d0
}
    cb4a:	\----> movea.l (sp)+,a6
    cb4c:	       lea 20(sp),sp
    cb50:	       rts

0000cb52 <builtIn_saveGame>:

builtIn(saveGame)
{
    cb52:	       lea -12(sp),sp
    cb56:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    cb58:	       movea.l 24(sp),a0
    cb5c:	       move.l 24(a0),d0
    cb60:	       move.l d0,-(sp)
    cb62:	       jsr 130b0 <getTextFromAnyVar>
    cb68:	       addq.l #4,sp
    cb6a:	       move.l d0,1876e <loadNow>
    trimStack(&fun->stack);
    cb70:	       moveq #24,d0
    cb72:	       add.l 24(sp),d0
    cb76:	       move.l d0,-(sp)
    cb78:	       jsr 1345e <trimStack>
    cb7e:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    cb80:	       move.l 1876e <loadNow>,d0
    cb86:	       move.l d0,-(sp)
    cb88:	       jsr 2fe <encodeFilename>
    cb8e:	       addq.l #4,sp
    cb90:	       move.l d0,12(sp)
    FreeVec(loadNow);
    cb94:	       move.l 1876e <loadNow>,8(sp)
    cb9c:	       move.l 187a2 <SysBase>,d0
    cba2:	       movea.l d0,a6
    cba4:	       movea.l 8(sp),a1
    cba8:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    cbac:	       move.l 12(sp),-(sp)
    cbb0:	       jsr c6fc <failSecurityCheck>
    cbb6:	       addq.l #4,sp
    cbb8:	       tst.w d0
    cbba:	   /-- beq.s cbc0 <builtIn_saveGame+0x6e>
    cbbc:	   |   moveq #1,d0
    cbbe:	/--|-- bra.s cc10 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    cbc0:	|  \-> move.l 12(sp),-(sp)
    cbc4:	|      pea 16f91 <PutChar+0x199b>
    cbca:	|      jsr 12006 <joinStrings>
    cbd0:	|      addq.l #8,sp
    cbd2:	|      move.l d0,1876e <loadNow>
    FreeVec(aaaaa);
    cbd8:	|      move.l 12(sp),4(sp)
    cbde:	|      move.l 187a2 <SysBase>,d0
    cbe4:	|      movea.l d0,a6
    cbe6:	|      movea.l 4(sp),a1
    cbea:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    cbee:	|      moveq #28,d0
    cbf0:	|      add.l 24(sp),d0
    cbf4:	|      clr.l -(sp)
    cbf6:	|      pea 1 <_start+0x1>
    cbfa:	|      move.l d0,-(sp)
    cbfc:	|      jsr 133cc <setVariable>
    cc02:	|      lea 12(sp),sp
    saverFunc = fun;
    cc06:	|      move.l 24(sp),188c0 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    cc0e:	|      moveq #0,d0
}
    cc10:	\----> movea.l (sp)+,a6
    cc12:	       lea 12(sp),sp
    cc16:	       rts

0000cc18 <builtIn_fileExists>:

builtIn(fileExists)
{
    cc18:	       lea -36(sp),sp
    cc1c:	       move.l a6,-(sp)
    cc1e:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    cc20:	       movea.l 52(sp),a0
    cc24:	       move.l 24(a0),d0
    cc28:	       move.l d0,-(sp)
    cc2a:	       jsr 130b0 <getTextFromAnyVar>
    cc30:	       addq.l #4,sp
    cc32:	       move.l d0,1876e <loadNow>
    trimStack(&fun->stack);
    cc38:	       moveq #24,d0
    cc3a:	       add.l 52(sp),d0
    cc3e:	       move.l d0,-(sp)
    cc40:	       jsr 1345e <trimStack>
    cc46:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    cc48:	       move.l 1876e <loadNow>,d0
    cc4e:	       move.l d0,-(sp)
    cc50:	       jsr 2fe <encodeFilename>
    cc56:	       addq.l #4,sp
    cc58:	       move.l d0,40(sp)
    FreeVec(loadNow);
    cc5c:	       move.l 1876e <loadNow>,36(sp)
    cc64:	       move.l 187a2 <SysBase>,d0
    cc6a:	       movea.l d0,a6
    cc6c:	       movea.l 36(sp),a1
    cc70:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    cc74:	       move.l 40(sp),-(sp)
    cc78:	       jsr c6fc <failSecurityCheck>
    cc7e:	       addq.l #4,sp
    cc80:	       tst.w d0
    cc82:	   /-- beq.s cc8a <builtIn_fileExists+0x72>
    cc84:	   |   moveq #1,d0
    cc86:	/--|-- bra.w cd2a <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    cc8a:	|  \-> move.l 40(sp),32(sp)
    cc90:	|      move.l #1005,28(sp)
    cc98:	|      move.l 187aa <DOSBase>,d0
    cc9e:	|      movea.l d0,a6
    cca0:	|      move.l 32(sp),d1
    cca4:	|      move.l 28(sp),d2
    cca8:	|      jsr -30(a6)
    ccac:	|      move.l d0,24(sp)
    ccb0:	|      move.l 24(sp),d0
    ccb4:	|      move.l d0,20(sp)
    if (!fp) {        
    ccb8:	|  /-- bne.s ccc8 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    ccba:	|  |   pea 16f93 <PutChar+0x199d>
    ccc0:	|  |   jsr 14b22 <KPrintF>
    ccc6:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    ccc8:	|  \-> tst.l 20(sp)
    cccc:	|      sne d0
    ccce:	|      neg.b d0
    ccd0:	|      moveq #0,d1
    ccd2:	|      move.b d0,d1
    ccd4:	|      moveq #28,d0
    ccd6:	|      add.l 52(sp),d0
    ccda:	|      move.l d1,-(sp)
    ccdc:	|      pea 1 <_start+0x1>
    cce0:	|      move.l d0,-(sp)
    cce2:	|      jsr 133cc <setVariable>
    cce8:	|      lea 12(sp),sp
    if (fp) Close(fp);
    ccec:	|      tst.l 20(sp)
    ccf0:	|  /-- beq.s cd0c <builtIn_fileExists+0xf4>
    ccf2:	|  |   move.l 20(sp),16(sp)
    ccf8:	|  |   move.l 187aa <DOSBase>,d0
    ccfe:	|  |   movea.l d0,a6
    cd00:	|  |   move.l 16(sp),d1
    cd04:	|  |   jsr -36(a6)
    cd08:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    cd0c:	|  \-> move.l 40(sp),8(sp)
    cd12:	|      move.l 187a2 <SysBase>,d0
    cd18:	|      movea.l d0,a6
    cd1a:	|      movea.l 8(sp),a1
    cd1e:	|      jsr -690(a6)
    loadNow = NULL;
    cd22:	|      clr.l 1876e <loadNow>
    return BR_CONTINUE;
    cd28:	|      moveq #2,d0
}
    cd2a:	\----> move.l (sp)+,d2
    cd2c:	       movea.l (sp)+,a6
    cd2e:	       lea 36(sp),sp
    cd32:	       rts

0000cd34 <builtIn_loadGame>:

builtIn(loadGame)
{
    cd34:	       lea -36(sp),sp
    cd38:	       move.l a6,-(sp)
    cd3a:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    cd3c:	       movea.l 52(sp),a0
    cd40:	       move.l 24(a0),d0
    cd44:	       move.l d0,-(sp)
    cd46:	       jsr 130b0 <getTextFromAnyVar>
    cd4c:	       addq.l #4,sp
    cd4e:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    cd52:	       moveq #24,d0
    cd54:	       add.l 52(sp),d0
    cd58:	       move.l d0,-(sp)
    cd5a:	       jsr 1345e <trimStack>
    cd60:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    cd62:	       move.l 40(sp),-(sp)
    cd66:	       jsr 2fe <encodeFilename>
    cd6c:	       addq.l #4,sp
    cd6e:	       move.l d0,1876e <loadNow>
    FreeVec(aaaaa);
    cd74:	       move.l 40(sp),36(sp)
    cd7a:	       move.l 187a2 <SysBase>,d0
    cd80:	       movea.l d0,a6
    cd82:	       movea.l 36(sp),a1
    cd86:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    cd8a:	       move.l 1876e <loadNow>,d0
    cd90:	       move.l d0,-(sp)
    cd92:	       jsr c6fc <failSecurityCheck>
    cd98:	       addq.l #4,sp
    cd9a:	       tst.w d0
    cd9c:	   /-- beq.s cda2 <builtIn_loadGame+0x6e>
    cd9e:	   |   moveq #1,d0
    cda0:	/--|-- bra.s ce12 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    cda2:	|  \-> move.l 1876e <loadNow>,32(sp)
    cdaa:	|      move.l #1005,28(sp)
    cdb2:	|      move.l 187aa <DOSBase>,d0
    cdb8:	|      movea.l d0,a6
    cdba:	|      move.l 32(sp),d1
    cdbe:	|      move.l 28(sp),d2
    cdc2:	|      jsr -30(a6)
    cdc6:	|      move.l d0,24(sp)
    cdca:	|      move.l 24(sp),d0
    cdce:	|      move.l d0,20(sp)
    if (fp) {
    cdd2:	|  /-- beq.s cdf2 <builtIn_loadGame+0xbe>
        Close(fp);
    cdd4:	|  |   move.l 20(sp),12(sp)
    cdda:	|  |   move.l 187aa <DOSBase>,d0
    cde0:	|  |   movea.l d0,a6
    cde2:	|  |   move.l 12(sp),d1
    cde6:	|  |   jsr -36(a6)
    cdea:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    cdee:	|  |   moveq #0,d0
    cdf0:	+--|-- bra.s ce12 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    cdf2:	|  \-> move.l 1876e <loadNow>,16(sp)
    cdfa:	|      move.l 187a2 <SysBase>,d0
    ce00:	|      movea.l d0,a6
    ce02:	|      movea.l 16(sp),a1
    ce06:	|      jsr -690(a6)
    loadNow = NULL;
    ce0a:	|      clr.l 1876e <loadNow>
    return BR_CONTINUE;
    ce10:	|      moveq #2,d0
}
    ce12:	\----> move.l (sp)+,d2
    ce14:	       movea.l (sp)+,a6
    ce16:	       lea 36(sp),sp
    ce1a:	       rts

0000ce1c <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ce1c:	move.l 18896 <sceneHeight>,d0
    ce22:	move.l d0,d1
    ce24:	move.l 18892 <sceneWidth>,d0
    ce2a:	move.l d1,-(sp)
    ce2c:	move.l d0,-(sp)
    ce2e:	clr.l -(sp)
    ce30:	clr.l -(sp)
    ce32:	jsr b5fc <blankScreen>
    ce38:	lea 16(sp),sp
	return BR_CONTINUE;
    ce3c:	moveq #2,d0
}
    ce3e:	rts

0000ce40 <builtIn_blankArea>:

builtIn(blankArea)
{
    ce40:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ce44:	       movea.l 24(sp),a0
    ce48:	       move.l 24(a0),d0
    ce4c:	       move.l d0,-(sp)
    ce4e:	       pea 1 <_start+0x1>
    ce52:	       lea 8(sp),a0
    ce56:	       move.l a0,-(sp)
    ce58:	       jsr 12ada <getValueType>
    ce5e:	       lea 12(sp),sp
    ce62:	       tst.w d0
    ce64:	   /-- bne.s ce6c <builtIn_blankArea+0x2c>
    ce66:	   |   moveq #1,d0
    ce68:	/--|-- bra.w cf42 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ce6c:	|  \-> moveq #24,d0
    ce6e:	|      add.l 24(sp),d0
    ce72:	|      move.l d0,-(sp)
    ce74:	|      jsr 1345e <trimStack>
    ce7a:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ce7c:	|      movea.l 24(sp),a0
    ce80:	|      move.l 24(a0),d0
    ce84:	|      move.l d0,-(sp)
    ce86:	|      pea 1 <_start+0x1>
    ce8a:	|      lea 12(sp),a0
    ce8e:	|      move.l a0,-(sp)
    ce90:	|      jsr 12ada <getValueType>
    ce96:	|      lea 12(sp),sp
    ce9a:	|      tst.w d0
    ce9c:	|  /-- bne.s cea4 <builtIn_blankArea+0x64>
    ce9e:	|  |   moveq #1,d0
    cea0:	+--|-- bra.w cf42 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    cea4:	|  \-> moveq #24,d0
    cea6:	|      add.l 24(sp),d0
    ceaa:	|      move.l d0,-(sp)
    ceac:	|      jsr 1345e <trimStack>
    ceb2:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ceb4:	|      movea.l 24(sp),a0
    ceb8:	|      move.l 24(a0),d0
    cebc:	|      move.l d0,-(sp)
    cebe:	|      pea 1 <_start+0x1>
    cec2:	|      moveq #16,d0
    cec4:	|      add.l sp,d0
    cec6:	|      move.l d0,-(sp)
    cec8:	|      jsr 12ada <getValueType>
    cece:	|      lea 12(sp),sp
    ced2:	|      tst.w d0
    ced4:	|  /-- bne.s ceda <builtIn_blankArea+0x9a>
    ced6:	|  |   moveq #1,d0
    ced8:	+--|-- bra.s cf42 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ceda:	|  \-> moveq #24,d0
    cedc:	|      add.l 24(sp),d0
    cee0:	|      move.l d0,-(sp)
    cee2:	|      jsr 1345e <trimStack>
    cee8:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ceea:	|      movea.l 24(sp),a0
    ceee:	|      move.l 24(a0),d0
    cef2:	|      move.l d0,-(sp)
    cef4:	|      pea 1 <_start+0x1>
    cef8:	|      moveq #20,d0
    cefa:	|      add.l sp,d0
    cefc:	|      move.l d0,-(sp)
    cefe:	|      jsr 12ada <getValueType>
    cf04:	|      lea 12(sp),sp
    cf08:	|      tst.w d0
    cf0a:	|  /-- bne.s cf10 <builtIn_blankArea+0xd0>
    cf0c:	|  |   moveq #1,d0
    cf0e:	+--|-- bra.s cf42 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    cf10:	|  \-> moveq #24,d0
    cf12:	|      add.l 24(sp),d0
    cf16:	|      move.l d0,-(sp)
    cf18:	|      jsr 1345e <trimStack>
    cf1e:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    cf20:	|      movea.l (sp),a1
    cf22:	|      movea.l 4(sp),a0
    cf26:	|      move.l 8(sp),d1
    cf2a:	|      move.l 12(sp),d0
    cf2e:	|      move.l a1,-(sp)
    cf30:	|      move.l a0,-(sp)
    cf32:	|      move.l d1,-(sp)
    cf34:	|      move.l d0,-(sp)
    cf36:	|      jsr b5fc <blankScreen>
    cf3c:	|      lea 16(sp),sp
	return BR_CONTINUE;
    cf40:	|      moveq #2,d0
}
    cf42:	\----> lea 16(sp),sp
    cf46:	       rts

0000cf48 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    cf48:	jsr b610 <darkScreen>
	return BR_CONTINUE;
    cf4e:	moveq #2,d0
}
    cf50:	rts

0000cf52 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    cf52:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf56:	       movea.l 20(sp),a0
    cf5a:	       move.l 24(a0),d0
    cf5e:	       move.l d0,-(sp)
    cf60:	       pea 1 <_start+0x1>
    cf64:	       lea 8(sp),a0
    cf68:	       move.l a0,-(sp)
    cf6a:	       jsr 12ada <getValueType>
    cf70:	       lea 12(sp),sp
    cf74:	       tst.w d0
    cf76:	   /-- bne.s cf7e <builtIn_addOverlay+0x2c>
    cf78:	   |   moveq #1,d0
    cf7a:	/--|-- bra.w d016 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    cf7e:	|  \-> moveq #24,d0
    cf80:	|      add.l 20(sp),d0
    cf84:	|      move.l d0,-(sp)
    cf86:	|      jsr 1345e <trimStack>
    cf8c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf8e:	|      movea.l 20(sp),a0
    cf92:	|      move.l 24(a0),d0
    cf96:	|      move.l d0,-(sp)
    cf98:	|      pea 1 <_start+0x1>
    cf9c:	|      moveq #12,d0
    cf9e:	|      add.l sp,d0
    cfa0:	|      move.l d0,-(sp)
    cfa2:	|      jsr 12ada <getValueType>
    cfa8:	|      lea 12(sp),sp
    cfac:	|      tst.w d0
    cfae:	|  /-- bne.s cfb4 <builtIn_addOverlay+0x62>
    cfb0:	|  |   moveq #1,d0
    cfb2:	+--|-- bra.s d016 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    cfb4:	|  \-> moveq #24,d0
    cfb6:	|      add.l 20(sp),d0
    cfba:	|      move.l d0,-(sp)
    cfbc:	|      jsr 1345e <trimStack>
    cfc2:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    cfc4:	|      movea.l 20(sp),a0
    cfc8:	|      move.l 24(a0),d0
    cfcc:	|      move.l d0,-(sp)
    cfce:	|      pea 5 <_start+0x5>
    cfd2:	|      moveq #16,d0
    cfd4:	|      add.l sp,d0
    cfd6:	|      move.l d0,-(sp)
    cfd8:	|      jsr 12ada <getValueType>
    cfde:	|      lea 12(sp),sp
    cfe2:	|      tst.w d0
    cfe4:	|  /-- bne.s cfea <builtIn_addOverlay+0x98>
    cfe6:	|  |   moveq #1,d0
    cfe8:	+--|-- bra.s d016 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    cfea:	|  \-> moveq #24,d0
    cfec:	|      add.l 20(sp),d0
    cff0:	|      move.l d0,-(sp)
    cff2:	|      jsr 1345e <trimStack>
    cff8:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    cffa:	|      movea.l (sp),a0
    cffc:	|      move.l 4(sp),d1
    d000:	|      move.l 8(sp),d0
    d004:	|      move.l a0,-(sp)
    d006:	|      move.l d1,-(sp)
    d008:	|      move.l d0,-(sp)
    d00a:	|      jsr b72e <loadBackDrop>
    d010:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d014:	|      moveq #2,d0
}
    d016:	\----> lea 12(sp),sp
    d01a:	       rts

0000d01c <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    d01c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d020:	       movea.l 20(sp),a0
    d024:	       move.l 24(a0),d0
    d028:	       move.l d0,-(sp)
    d02a:	       pea 1 <_start+0x1>
    d02e:	       lea 8(sp),a0
    d032:	       move.l a0,-(sp)
    d034:	       jsr 12ada <getValueType>
    d03a:	       lea 12(sp),sp
    d03e:	       tst.w d0
    d040:	   /-- bne.s d048 <builtIn_mixOverlay+0x2c>
    d042:	   |   moveq #1,d0
    d044:	/--|-- bra.w d0e0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    d048:	|  \-> moveq #24,d0
    d04a:	|      add.l 20(sp),d0
    d04e:	|      move.l d0,-(sp)
    d050:	|      jsr 1345e <trimStack>
    d056:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d058:	|      movea.l 20(sp),a0
    d05c:	|      move.l 24(a0),d0
    d060:	|      move.l d0,-(sp)
    d062:	|      pea 1 <_start+0x1>
    d066:	|      moveq #12,d0
    d068:	|      add.l sp,d0
    d06a:	|      move.l d0,-(sp)
    d06c:	|      jsr 12ada <getValueType>
    d072:	|      lea 12(sp),sp
    d076:	|      tst.w d0
    d078:	|  /-- bne.s d07e <builtIn_mixOverlay+0x62>
    d07a:	|  |   moveq #1,d0
    d07c:	+--|-- bra.s d0e0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    d07e:	|  \-> moveq #24,d0
    d080:	|      add.l 20(sp),d0
    d084:	|      move.l d0,-(sp)
    d086:	|      jsr 1345e <trimStack>
    d08c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d08e:	|      movea.l 20(sp),a0
    d092:	|      move.l 24(a0),d0
    d096:	|      move.l d0,-(sp)
    d098:	|      pea 5 <_start+0x5>
    d09c:	|      moveq #16,d0
    d09e:	|      add.l sp,d0
    d0a0:	|      move.l d0,-(sp)
    d0a2:	|      jsr 12ada <getValueType>
    d0a8:	|      lea 12(sp),sp
    d0ac:	|      tst.w d0
    d0ae:	|  /-- bne.s d0b4 <builtIn_mixOverlay+0x98>
    d0b0:	|  |   moveq #1,d0
    d0b2:	+--|-- bra.s d0e0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    d0b4:	|  \-> moveq #24,d0
    d0b6:	|      add.l 20(sp),d0
    d0ba:	|      move.l d0,-(sp)
    d0bc:	|      jsr 1345e <trimStack>
    d0c2:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    d0c4:	|      movea.l (sp),a0
    d0c6:	|      move.l 4(sp),d1
    d0ca:	|      move.l 8(sp),d0
    d0ce:	|      move.l a0,-(sp)
    d0d0:	|      move.l d1,-(sp)
    d0d2:	|      move.l d0,-(sp)
    d0d4:	|      jsr b7a4 <mixBackDrop>
    d0da:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d0de:	|      moveq #2,d0
}
    d0e0:	\----> lea 12(sp),sp
    d0e4:	       rts

0000d0e6 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    d0e6:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d0ea:	       movea.l 20(sp),a0
    d0ee:	       move.l 24(a0),d0
    d0f2:	       move.l d0,-(sp)
    d0f4:	       pea 1 <_start+0x1>
    d0f8:	       lea 8(sp),a0
    d0fc:	       move.l a0,-(sp)
    d0fe:	       jsr 12ada <getValueType>
    d104:	       lea 12(sp),sp
    d108:	       tst.w d0
    d10a:	   /-- bne.s d112 <builtIn_pasteImage+0x2c>
    d10c:	   |   moveq #1,d0
    d10e:	/--|-- bra.w d1a2 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    d112:	|  \-> moveq #24,d0
    d114:	|      add.l 20(sp),d0
    d118:	|      move.l d0,-(sp)
    d11a:	|      jsr 1345e <trimStack>
    d120:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d122:	|      movea.l 20(sp),a0
    d126:	|      move.l 24(a0),d0
    d12a:	|      move.l d0,-(sp)
    d12c:	|      pea 1 <_start+0x1>
    d130:	|      moveq #12,d0
    d132:	|      add.l sp,d0
    d134:	|      move.l d0,-(sp)
    d136:	|      jsr 12ada <getValueType>
    d13c:	|      lea 12(sp),sp
    d140:	|      tst.w d0
    d142:	|  /-- bne.s d148 <builtIn_pasteImage+0x62>
    d144:	|  |   moveq #1,d0
    d146:	+--|-- bra.s d1a2 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    d148:	|  \-> moveq #24,d0
    d14a:	|      add.l 20(sp),d0
    d14e:	|      move.l d0,-(sp)
    d150:	|      jsr 1345e <trimStack>
    d156:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    d158:	|      movea.l 20(sp),a0
    d15c:	|      move.l 24(a0),d0
    d160:	|      move.l d0,-(sp)
    d162:	|      jsr 12fb2 <getAnimationFromVar>
    d168:	|      addq.l #4,sp
    d16a:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    d16e:	|      moveq #24,d0
    d170:	|      add.l 20(sp),d0
    d174:	|      move.l d0,-(sp)
    d176:	|      jsr 1345e <trimStack>
    d17c:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    d17e:	|      tst.l 8(sp)
    d182:	|  /-- bne.s d188 <builtIn_pasteImage+0xa2>
    d184:	|  |   moveq #2,d0
    d186:	+--|-- bra.s d1a2 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    d188:	|  \-> move.l (sp),d1
    d18a:	|      move.l 4(sp),d0
    d18e:	|      move.l 8(sp),-(sp)
    d192:	|      move.l d1,-(sp)
    d194:	|      move.l d0,-(sp)
    d196:	|      jsr de2 <pasteCursor>
    d19c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d1a0:	|      moveq #2,d0
}
    d1a2:	\----> lea 12(sp),sp
    d1a6:	       rts

0000d1a8 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    d1a8:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d1aa:	       movea.l 16(sp),a0
    d1ae:	       move.l 24(a0),d0
    d1b2:	       move.l d0,-(sp)
    d1b4:	       pea 1 <_start+0x1>
    d1b8:	       move.l sp,d0
    d1ba:	       addq.l #8,d0
    d1bc:	       move.l d0,-(sp)
    d1be:	       jsr 12ada <getValueType>
    d1c4:	       lea 12(sp),sp
    d1c8:	       tst.w d0
    d1ca:	   /-- bne.s d1d2 <builtIn_setSceneDimensions+0x2a>
    d1cc:	   |   moveq #1,d0
    d1ce:	/--|-- bra.w d25a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    d1d2:	|  \-> moveq #24,d0
    d1d4:	|      add.l 16(sp),d0
    d1d8:	|      move.l d0,-(sp)
    d1da:	|      jsr 1345e <trimStack>
    d1e0:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d1e2:	|      movea.l 16(sp),a0
    d1e6:	|      move.l 24(a0),d0
    d1ea:	|      move.l d0,-(sp)
    d1ec:	|      pea 1 <_start+0x1>
    d1f0:	|      moveq #12,d0
    d1f2:	|      add.l sp,d0
    d1f4:	|      move.l d0,-(sp)
    d1f6:	|      jsr 12ada <getValueType>
    d1fc:	|      lea 12(sp),sp
    d200:	|      tst.w d0
    d202:	|  /-- bne.s d208 <builtIn_setSceneDimensions+0x60>
    d204:	|  |   moveq #1,d0
    d206:	+--|-- bra.s d25a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    d208:	|  \-> moveq #24,d0
    d20a:	|      add.l 16(sp),d0
    d20e:	|      move.l d0,-(sp)
    d210:	|      jsr 1345e <trimStack>
    d216:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    d218:	|      move.l (sp),d1
    d21a:	|      move.l 4(sp),d0
    d21e:	|      move.l d1,-(sp)
    d220:	|      move.l d0,-(sp)
    d222:	|      jsr b7ee <resizeBackdrop>
    d228:	|      addq.l #8,sp
    d22a:	|      tst.w d0
    d22c:	|  /-- beq.s d24a <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    d22e:	|  |   move.l (sp),d1
    d230:	|  |   move.l 4(sp),d0
    d234:	|  |   move.l d1,-(sp)
    d236:	|  |   move.l d0,-(sp)
    d238:	|  |   clr.l -(sp)
    d23a:	|  |   clr.l -(sp)
    d23c:	|  |   jsr b5fc <blankScreen>
    d242:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    d246:	|  |   moveq #2,d0
    d248:	+--|-- bra.s d25a <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    d24a:	|  \-> pea 16fb1 <PutChar+0x19bb>
    d250:	|      jsr 14b22 <KPrintF>
    d256:	|      addq.l #4,sp
	return BR_ERROR;
    d258:	|      moveq #1,d0
}
    d25a:	\----> addq.l #8,sp
    d25c:	       rts

0000d25e <builtIn_aimCamera>:

builtIn(aimCamera)
{
    d25e:	          move.l d3,-(sp)
    d260:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d262:	          movea.l 16(sp),a0
    d266:	          move.l 24(a0),d0
    d26a:	          move.l d0,-(sp)
    d26c:	          pea 1 <_start+0x1>
    d270:	          pea 188b4 <cameraY>
    d276:	          jsr 12ada <getValueType>
    d27c:	          lea 12(sp),sp
    d280:	          tst.w d0
    d282:	      /-- bne.s d28a <builtIn_aimCamera+0x2c>
    d284:	      |   moveq #1,d0
    d286:	/-----|-- bra.w d50c <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    d28a:	|     \-> moveq #24,d0
    d28c:	|         add.l 16(sp),d0
    d290:	|         move.l d0,-(sp)
    d292:	|         jsr 1345e <trimStack>
    d298:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d29a:	|         movea.l 16(sp),a0
    d29e:	|         move.l 24(a0),d0
    d2a2:	|         move.l d0,-(sp)
    d2a4:	|         pea 1 <_start+0x1>
    d2a8:	|         pea 188b0 <cameraX>
    d2ae:	|         jsr 12ada <getValueType>
    d2b4:	|         lea 12(sp),sp
    d2b8:	|         tst.w d0
    d2ba:	|     /-- bne.s d2c2 <builtIn_aimCamera+0x64>
    d2bc:	|     |   moveq #1,d0
    d2be:	+-----|-- bra.w d50c <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    d2c2:	|     \-> moveq #24,d0
    d2c4:	|         add.l 16(sp),d0
    d2c8:	|         move.l d0,-(sp)
    d2ca:	|         jsr 1345e <trimStack>
    d2d0:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    d2d2:	|         move.l 188b0 <cameraX>,d0
    d2d8:	|         move.l d0,-(sp)
    d2da:	|         jsr 14f5e <__floatsisf>
    d2e0:	|         addq.l #4,sp
    d2e2:	|         move.l d0,d2
    d2e4:	|         move.l 186f6 <winWidth>,d0
    d2ea:	|         lsr.l #1,d0
    d2ec:	|         move.l d0,-(sp)
    d2ee:	|         jsr 14f86 <__floatunsisf>
    d2f4:	|         addq.l #4,sp
    d2f6:	|         move.l d0,d1
    d2f8:	|         move.l 18142 <cameraZoom>,d0
    d2fe:	|         move.l d0,-(sp)
    d300:	|         move.l d1,-(sp)
    d302:	|         jsr 14e0a <__divsf3>
    d308:	|         addq.l #8,sp
    d30a:	|         move.l d0,-(sp)
    d30c:	|         move.l d2,-(sp)
    d30e:	|         jsr 15252 <__subsf3>
    d314:	|         addq.l #8,sp
    d316:	|         move.l d0,-(sp)
    d318:	|         jsr 14ef6 <__fixsfsi>
    d31e:	|         addq.l #4,sp
    d320:	|         move.l d0,188b0 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    d326:	|         move.l 188b4 <cameraY>,d0
    d32c:	|         move.l d0,-(sp)
    d32e:	|         jsr 14f5e <__floatsisf>
    d334:	|         addq.l #4,sp
    d336:	|         move.l d0,d2
    d338:	|         move.l 186fa <winHeight>,d0
    d33e:	|         lsr.l #1,d0
    d340:	|         move.l d0,-(sp)
    d342:	|         jsr 14f86 <__floatunsisf>
    d348:	|         addq.l #4,sp
    d34a:	|         move.l d0,d1
    d34c:	|         move.l 18142 <cameraZoom>,d0
    d352:	|         move.l d0,-(sp)
    d354:	|         move.l d1,-(sp)
    d356:	|         jsr 14e0a <__divsf3>
    d35c:	|         addq.l #8,sp
    d35e:	|         move.l d0,-(sp)
    d360:	|         move.l d2,-(sp)
    d362:	|         jsr 15252 <__subsf3>
    d368:	|         addq.l #8,sp
    d36a:	|         move.l d0,-(sp)
    d36c:	|         jsr 14ef6 <__fixsfsi>
    d372:	|         addq.l #4,sp
    d374:	|         move.l d0,188b4 <cameraY>

	if (cameraX < 0) cameraX = 0;
    d37a:	|         move.l 188b0 <cameraX>,d0
    d380:	|     /-- bpl.s d38c <builtIn_aimCamera+0x12e>
    d382:	|     |   clr.l 188b0 <cameraX>
    d388:	|  /--|-- bra.w d442 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    d38c:	|  |  \-> move.l 188b0 <cameraX>,d0
    d392:	|  |      move.l d0,-(sp)
    d394:	|  |      jsr 14f5e <__floatsisf>
    d39a:	|  |      addq.l #4,sp
    d39c:	|  |      move.l d0,d2
    d39e:	|  |      move.l 18892 <sceneWidth>,d0
    d3a4:	|  |      move.l d0,-(sp)
    d3a6:	|  |      jsr 14f86 <__floatunsisf>
    d3ac:	|  |      addq.l #4,sp
    d3ae:	|  |      move.l d0,d3
    d3b0:	|  |      move.l 186f6 <winWidth>,d0
    d3b6:	|  |      move.l d0,-(sp)
    d3b8:	|  |      jsr 14f86 <__floatunsisf>
    d3be:	|  |      addq.l #4,sp
    d3c0:	|  |      move.l d0,d1
    d3c2:	|  |      move.l 18142 <cameraZoom>,d0
    d3c8:	|  |      move.l d0,-(sp)
    d3ca:	|  |      move.l d1,-(sp)
    d3cc:	|  |      jsr 14e0a <__divsf3>
    d3d2:	|  |      addq.l #8,sp
    d3d4:	|  |      move.l d0,-(sp)
    d3d6:	|  |      move.l d3,-(sp)
    d3d8:	|  |      jsr 15252 <__subsf3>
    d3de:	|  |      addq.l #8,sp
    d3e0:	|  |      move.l d0,-(sp)
    d3e2:	|  |      move.l d2,-(sp)
    d3e4:	|  |      jsr 150ca <__gtsf2>
    d3ea:	|  |      addq.l #8,sp
    d3ec:	|  |      tst.l d0
    d3ee:	|  +----- ble.s d442 <builtIn_aimCamera+0x1e4>
    d3f0:	|  |      move.l 18892 <sceneWidth>,d0
    d3f6:	|  |      move.l d0,-(sp)
    d3f8:	|  |      jsr 14f86 <__floatunsisf>
    d3fe:	|  |      addq.l #4,sp
    d400:	|  |      move.l d0,d2
    d402:	|  |      move.l 186f6 <winWidth>,d0
    d408:	|  |      move.l d0,-(sp)
    d40a:	|  |      jsr 14f86 <__floatunsisf>
    d410:	|  |      addq.l #4,sp
    d412:	|  |      move.l d0,d1
    d414:	|  |      move.l 18142 <cameraZoom>,d0
    d41a:	|  |      move.l d0,-(sp)
    d41c:	|  |      move.l d1,-(sp)
    d41e:	|  |      jsr 14e0a <__divsf3>
    d424:	|  |      addq.l #8,sp
    d426:	|  |      move.l d0,-(sp)
    d428:	|  |      move.l d2,-(sp)
    d42a:	|  |      jsr 15252 <__subsf3>
    d430:	|  |      addq.l #8,sp
    d432:	|  |      move.l d0,-(sp)
    d434:	|  |      jsr 14ef6 <__fixsfsi>
    d43a:	|  |      addq.l #4,sp
    d43c:	|  |      move.l d0,188b0 <cameraX>
	if (cameraY < 0) cameraY = 0;
    d442:	|  \----> move.l 188b4 <cameraY>,d0
    d448:	|     /-- bpl.s d454 <builtIn_aimCamera+0x1f6>
    d44a:	|     |   clr.l 188b4 <cameraY>
    d450:	|  /--|-- bra.w d50a <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    d454:	|  |  \-> move.l 188b4 <cameraY>,d0
    d45a:	|  |      move.l d0,-(sp)
    d45c:	|  |      jsr 14f5e <__floatsisf>
    d462:	|  |      addq.l #4,sp
    d464:	|  |      move.l d0,d2
    d466:	|  |      move.l 18896 <sceneHeight>,d0
    d46c:	|  |      move.l d0,-(sp)
    d46e:	|  |      jsr 14f86 <__floatunsisf>
    d474:	|  |      addq.l #4,sp
    d476:	|  |      move.l d0,d3
    d478:	|  |      move.l 186fa <winHeight>,d0
    d47e:	|  |      move.l d0,-(sp)
    d480:	|  |      jsr 14f86 <__floatunsisf>
    d486:	|  |      addq.l #4,sp
    d488:	|  |      move.l d0,d1
    d48a:	|  |      move.l 18142 <cameraZoom>,d0
    d490:	|  |      move.l d0,-(sp)
    d492:	|  |      move.l d1,-(sp)
    d494:	|  |      jsr 14e0a <__divsf3>
    d49a:	|  |      addq.l #8,sp
    d49c:	|  |      move.l d0,-(sp)
    d49e:	|  |      move.l d3,-(sp)
    d4a0:	|  |      jsr 15252 <__subsf3>
    d4a6:	|  |      addq.l #8,sp
    d4a8:	|  |      move.l d0,-(sp)
    d4aa:	|  |      move.l d2,-(sp)
    d4ac:	|  |      jsr 150ca <__gtsf2>
    d4b2:	|  |      addq.l #8,sp
    d4b4:	|  |      tst.l d0
    d4b6:	|  +----- ble.s d50a <builtIn_aimCamera+0x2ac>
    d4b8:	|  |      move.l 18896 <sceneHeight>,d0
    d4be:	|  |      move.l d0,-(sp)
    d4c0:	|  |      jsr 14f86 <__floatunsisf>
    d4c6:	|  |      addq.l #4,sp
    d4c8:	|  |      move.l d0,d2
    d4ca:	|  |      move.l 186fa <winHeight>,d0
    d4d0:	|  |      move.l d0,-(sp)
    d4d2:	|  |      jsr 14f86 <__floatunsisf>
    d4d8:	|  |      addq.l #4,sp
    d4da:	|  |      move.l d0,d1
    d4dc:	|  |      move.l 18142 <cameraZoom>,d0
    d4e2:	|  |      move.l d0,-(sp)
    d4e4:	|  |      move.l d1,-(sp)
    d4e6:	|  |      jsr 14e0a <__divsf3>
    d4ec:	|  |      addq.l #8,sp
    d4ee:	|  |      move.l d0,-(sp)
    d4f0:	|  |      move.l d2,-(sp)
    d4f2:	|  |      jsr 15252 <__subsf3>
    d4f8:	|  |      addq.l #8,sp
    d4fa:	|  |      move.l d0,-(sp)
    d4fc:	|  |      jsr 14ef6 <__fixsfsi>
    d502:	|  |      addq.l #4,sp
    d504:	|  |      move.l d0,188b4 <cameraY>
	return BR_CONTINUE;
    d50a:	|  \----> moveq #2,d0
}
    d50c:	\-------> move.l (sp)+,d2
    d50e:	          move.l (sp)+,d3
    d510:	          rts

0000d512 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    d512:	       subq.l #4,sp
    d514:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d516:	       movea.l 16(sp),a0
    d51a:	       move.l 24(a0),d0
    d51e:	       move.l d0,-(sp)
    d520:	       pea 1 <_start+0x1>
    d524:	       moveq #12,d0
    d526:	       add.l sp,d0
    d528:	       move.l d0,-(sp)
    d52a:	       jsr 12ada <getValueType>
    d530:	       lea 12(sp),sp
    d534:	       tst.w d0
    d536:	   /-- bne.s d53e <builtIn_zoomCamera+0x2c>
    d538:	   |   moveq #1,d0
    d53a:	/--|-- bra.w d738 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    d53e:	|  \-> moveq #24,d0
    d540:	|      add.l 16(sp),d0
    d544:	|      move.l d0,-(sp)
    d546:	|      jsr 1345e <trimStack>
    d54c:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    d54e:	|      move.l 1875e <input+0xa>,d0
    d554:	|      move.l d0,-(sp)
    d556:	|      jsr 14f5e <__floatsisf>
    d55c:	|      addq.l #4,sp
    d55e:	|      move.l d0,d1
    d560:	|      move.l 18142 <cameraZoom>,d0
    d566:	|      move.l d0,-(sp)
    d568:	|      move.l d1,-(sp)
    d56a:	|      jsr 15010 <__mulsf3>
    d570:	|      addq.l #8,sp
    d572:	|      move.l d0,-(sp)
    d574:	|      jsr 14ef6 <__fixsfsi>
    d57a:	|      addq.l #4,sp
    d57c:	|      move.l d0,1875e <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    d582:	|      move.l 18762 <input+0xe>,d0
    d588:	|      move.l d0,-(sp)
    d58a:	|      jsr 14f5e <__floatsisf>
    d590:	|      addq.l #4,sp
    d592:	|      move.l d0,d1
    d594:	|      move.l 18142 <cameraZoom>,d0
    d59a:	|      move.l d0,-(sp)
    d59c:	|      move.l d1,-(sp)
    d59e:	|      jsr 15010 <__mulsf3>
    d5a4:	|      addq.l #8,sp
    d5a6:	|      move.l d0,-(sp)
    d5a8:	|      jsr 14ef6 <__fixsfsi>
    d5ae:	|      addq.l #4,sp
    d5b0:	|      move.l d0,18762 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    d5b6:	|      move.l 4(sp),d0
    d5ba:	|      move.l d0,-(sp)
    d5bc:	|      jsr 14f5e <__floatsisf>
    d5c2:	|      addq.l #4,sp
    d5c4:	|      move.l #1008981770,-(sp)
    d5ca:	|      move.l d0,-(sp)
    d5cc:	|      jsr 15010 <__mulsf3>
    d5d2:	|      addq.l #8,sp
    d5d4:	|      move.l d0,18142 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    d5da:	|      move.l 186f6 <winWidth>,d0
    d5e0:	|      move.l d0,-(sp)
    d5e2:	|      jsr 14f86 <__floatunsisf>
    d5e8:	|      addq.l #4,sp
    d5ea:	|      move.l d0,d1
    d5ec:	|      move.l 18142 <cameraZoom>,d0
    d5f2:	|      move.l d0,-(sp)
    d5f4:	|      move.l d1,-(sp)
    d5f6:	|      jsr 14e0a <__divsf3>
    d5fc:	|      addq.l #8,sp
    d5fe:	|      move.l d0,d2
    d600:	|      move.l 18892 <sceneWidth>,d0
    d606:	|      move.l d0,-(sp)
    d608:	|      jsr 14f86 <__floatunsisf>
    d60e:	|      addq.l #4,sp
    d610:	|      move.l d0,-(sp)
    d612:	|      move.l d2,-(sp)
    d614:	|      jsr 150ca <__gtsf2>
    d61a:	|      addq.l #8,sp
    d61c:	|      tst.l d0
    d61e:	|  /-- ble.s d654 <builtIn_zoomCamera+0x142>
    d620:	|  |   move.l 186f6 <winWidth>,d0
    d626:	|  |   move.l d0,-(sp)
    d628:	|  |   jsr 14f86 <__floatunsisf>
    d62e:	|  |   addq.l #4,sp
    d630:	|  |   move.l d0,d2
    d632:	|  |   move.l 18892 <sceneWidth>,d0
    d638:	|  |   move.l d0,-(sp)
    d63a:	|  |   jsr 14f86 <__floatunsisf>
    d640:	|  |   addq.l #4,sp
    d642:	|  |   move.l d0,-(sp)
    d644:	|  |   move.l d2,-(sp)
    d646:	|  |   jsr 14e0a <__divsf3>
    d64c:	|  |   addq.l #8,sp
    d64e:	|  |   move.l d0,18142 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    d654:	|  \-> move.l 186fa <winHeight>,d0
    d65a:	|      move.l d0,-(sp)
    d65c:	|      jsr 14f86 <__floatunsisf>
    d662:	|      addq.l #4,sp
    d664:	|      move.l d0,d1
    d666:	|      move.l 18142 <cameraZoom>,d0
    d66c:	|      move.l d0,-(sp)
    d66e:	|      move.l d1,-(sp)
    d670:	|      jsr 14e0a <__divsf3>
    d676:	|      addq.l #8,sp
    d678:	|      move.l d0,d2
    d67a:	|      move.l 18896 <sceneHeight>,d0
    d680:	|      move.l d0,-(sp)
    d682:	|      jsr 14f86 <__floatunsisf>
    d688:	|      addq.l #4,sp
    d68a:	|      move.l d0,-(sp)
    d68c:	|      move.l d2,-(sp)
    d68e:	|      jsr 150ca <__gtsf2>
    d694:	|      addq.l #8,sp
    d696:	|      tst.l d0
    d698:	|  /-- ble.s d6ce <builtIn_zoomCamera+0x1bc>
    d69a:	|  |   move.l 186fa <winHeight>,d0
    d6a0:	|  |   move.l d0,-(sp)
    d6a2:	|  |   jsr 14f86 <__floatunsisf>
    d6a8:	|  |   addq.l #4,sp
    d6aa:	|  |   move.l d0,d2
    d6ac:	|  |   move.l 18896 <sceneHeight>,d0
    d6b2:	|  |   move.l d0,-(sp)
    d6b4:	|  |   jsr 14f86 <__floatunsisf>
    d6ba:	|  |   addq.l #4,sp
    d6bc:	|  |   move.l d0,-(sp)
    d6be:	|  |   move.l d2,-(sp)
    d6c0:	|  |   jsr 14e0a <__divsf3>
    d6c6:	|  |   addq.l #8,sp
    d6c8:	|  |   move.l d0,18142 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    d6ce:	|  \-> move.l 1875e <input+0xa>,d0
    d6d4:	|      move.l d0,-(sp)
    d6d6:	|      jsr 14f5e <__floatsisf>
    d6dc:	|      addq.l #4,sp
    d6de:	|      move.l d0,d1
    d6e0:	|      move.l 18142 <cameraZoom>,d0
    d6e6:	|      move.l d0,-(sp)
    d6e8:	|      move.l d1,-(sp)
    d6ea:	|      jsr 14e0a <__divsf3>
    d6f0:	|      addq.l #8,sp
    d6f2:	|      move.l d0,-(sp)
    d6f4:	|      jsr 14ef6 <__fixsfsi>
    d6fa:	|      addq.l #4,sp
    d6fc:	|      move.l d0,1875e <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    d702:	|      move.l 18762 <input+0xe>,d0
    d708:	|      move.l d0,-(sp)
    d70a:	|      jsr 14f5e <__floatsisf>
    d710:	|      addq.l #4,sp
    d712:	|      move.l d0,d1
    d714:	|      move.l 18142 <cameraZoom>,d0
    d71a:	|      move.l d0,-(sp)
    d71c:	|      move.l d1,-(sp)
    d71e:	|      jsr 14e0a <__divsf3>
    d724:	|      addq.l #8,sp
    d726:	|      move.l d0,-(sp)
    d728:	|      jsr 14ef6 <__fixsfsi>
    d72e:	|      addq.l #4,sp
    d730:	|      move.l d0,18762 <input+0xe>

	return BR_CONTINUE;
    d736:	|      moveq #2,d0
}
    d738:	\----> move.l (sp)+,d2
    d73a:	       addq.l #4,sp
    d73c:	       rts

0000d73e <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    d73e:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    d740:	             tst.l 8(sp)
    d744:	         /-- bne.s d758 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    d746:	         |   pea 16fd6 <PutChar+0x19e0>
    d74c:	         |   jsr 14b22 <KPrintF>
    d752:	         |   addq.l #4,sp
		return BR_ERROR;
    d754:	         |   moveq #1,d0
    d756:	/--------|-- bra.s d7b8 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    d758:	|        \-> jsr c58 <rand>
    d75e:	|            move.l d0,d1
    d760:	|            move.l 8(sp),d0
    d764:	|            move.l d0,-(sp)
    d766:	|            move.l d1,-(sp)
    d768:	|            jsr 155ba <__umodsi3>
    d76e:	|            addq.l #8,sp
    d770:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    d772:	|     /----- bra.s d7a6 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    d774:	|  /--|----> move.l (sp),d0
    d776:	|  |  |      cmp.l 8(sp),d0
    d77a:	|  |  |  /-- bne.s d796 <builtIn_pickOne+0x58>
    d77c:	|  |  |  |   moveq #28,d0
    d77e:	|  |  |  |   add.l 12(sp),d0
    d782:	|  |  |  |   movea.l 12(sp),a0
    d786:	|  |  |  |   move.l 24(a0),d1
    d78a:	|  |  |  |   move.l d0,-(sp)
    d78c:	|  |  |  |   move.l d1,-(sp)
    d78e:	|  |  |  |   jsr 12f94 <copyVariable>
    d794:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    d796:	|  |  |  \-> moveq #24,d0
    d798:	|  |  |      add.l 12(sp),d0
    d79c:	|  |  |      move.l d0,-(sp)
    d79e:	|  |  |      jsr 1345e <trimStack>
    d7a4:	|  |  |      addq.l #4,sp
	while (numParams --) {
    d7a6:	|  |  \----> move.l 8(sp),d0
    d7aa:	|  |         move.l d0,d1
    d7ac:	|  |         subq.l #1,d1
    d7ae:	|  |         move.l d1,8(sp)
    d7b2:	|  |         tst.l d0
    d7b4:	|  \-------- bne.s d774 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    d7b6:	|            moveq #2,d0
}
    d7b8:	\----------> addq.l #4,sp
    d7ba:	             rts

0000d7bc <builtIn_substring>:

builtIn(substring)
{
    d7bc:	       lea -40(sp),sp
    d7c0:	       move.l a6,-(sp)
    d7c2:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d7c4:	       movea.l 56(sp),a0
    d7c8:	       move.l 24(a0),d0
    d7cc:	       move.l d0,-(sp)
    d7ce:	       pea 1 <_start+0x1>
    d7d2:	       lea 16(sp),a0
    d7d6:	       move.l a0,-(sp)
    d7d8:	       jsr 12ada <getValueType>
    d7de:	       lea 12(sp),sp
    d7e2:	       tst.w d0
    d7e4:	   /-- bne.s d7ec <builtIn_substring+0x30>
    d7e6:	   |   moveq #1,d0
    d7e8:	/--|-- bra.w d964 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    d7ec:	|  \-> moveq #24,d0
    d7ee:	|      add.l 56(sp),d0
    d7f2:	|      move.l d0,-(sp)
    d7f4:	|      jsr 1345e <trimStack>
    d7fa:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    d7fc:	|      movea.l 56(sp),a0
    d800:	|      move.l 24(a0),d0
    d804:	|      move.l d0,-(sp)
    d806:	|      pea 1 <_start+0x1>
    d80a:	|      lea 20(sp),a0
    d80e:	|      move.l a0,-(sp)
    d810:	|      jsr 12ada <getValueType>
    d816:	|      lea 12(sp),sp
    d81a:	|      tst.w d0
    d81c:	|  /-- bne.s d824 <builtIn_substring+0x68>
    d81e:	|  |   moveq #1,d0
    d820:	+--|-- bra.w d964 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    d824:	|  \-> moveq #24,d0
    d826:	|      add.l 56(sp),d0
    d82a:	|      move.l d0,-(sp)
    d82c:	|      jsr 1345e <trimStack>
    d832:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    d834:	|      movea.l 56(sp),a0
    d838:	|      move.l 24(a0),d0
    d83c:	|      move.l d0,-(sp)
    d83e:	|      jsr 130b0 <getTextFromAnyVar>
    d844:	|      addq.l #4,sp
    d846:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    d84a:	|      moveq #24,d0
    d84c:	|      add.l 56(sp),d0
    d850:	|      move.l d0,-(sp)
    d852:	|      jsr 1345e <trimStack>
    d858:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    d85a:	|      move.l 44(sp),-(sp)
    d85e:	|      jsr 11fc6 <strlen>
    d864:	|      addq.l #4,sp
    d866:	|      move.l d0,d1
    d868:	|      move.l 12(sp),d0
    d86c:	|      movea.l d0,a0
    d86e:	|      move.l 8(sp),d0
    d872:	|      add.l a0,d0
    d874:	|      cmp.l d1,d0
    d876:	|  /-- bls.s d8ac <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    d878:	|  |   move.l 44(sp),-(sp)
    d87c:	|  |   jsr 11fc6 <strlen>
    d882:	|  |   addq.l #4,sp
    d884:	|  |   move.l d0,d1
    d886:	|  |   move.l 12(sp),d0
    d88a:	|  |   sub.l d0,d1
    d88c:	|  |   move.l d1,d0
    d88e:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    d892:	|  |   move.l 44(sp),-(sp)
    d896:	|  |   jsr 11fc6 <strlen>
    d89c:	|  |   addq.l #4,sp
    d89e:	|  |   move.l d0,d1
    d8a0:	|  |   move.l 12(sp),d0
    d8a4:	|  |   cmp.l d1,d0
    d8a6:	|  +-- bls.s d8ac <builtIn_substring+0xf0>
            start = 0;
    d8a8:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    d8ac:	|  \-> move.l 8(sp),d0
    d8b0:	|  /-- bpl.s d8b6 <builtIn_substring+0xfa>
        length = 0;
    d8b2:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    d8b6:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    d8bc:	|      move.l 12(sp),d1
    d8c0:	|      move.l 8(sp),d0
    d8c4:	|      move.l d1,d2
    d8c6:	|      add.l d0,d2
    d8c8:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    d8cc:	|      move.l 36(sp),d0
    d8d0:	|      sub.l 40(sp),d0
    d8d4:	|      addq.l #1,d0
    d8d6:	|      move.l d0,32(sp)
    d8da:	|      clr.l 28(sp)
    d8de:	|      move.l 187a2 <SysBase>,d0
    d8e4:	|      movea.l d0,a6
    d8e6:	|      move.l 32(sp),d0
    d8ea:	|      move.l 28(sp),d1
    d8ee:	|      jsr -684(a6)
    d8f2:	|      move.l d0,24(sp)
    d8f6:	|      move.l 24(sp),d0
    d8fa:	|      move.l d0,20(sp)
    if (!newString) {
    d8fe:	|  /-- bne.s d904 <builtIn_substring+0x148>
        return BR_ERROR;
    d900:	|  |   moveq #1,d0
    d902:	+--|-- bra.s d964 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    d904:	|  \-> move.l 36(sp),d0
    d908:	|      sub.l 40(sp),d0
    d90c:	|      move.l d0,d1
    d90e:	|      move.l 40(sp),d0
    d912:	|      add.l 44(sp),d0
    d916:	|      move.l d1,-(sp)
    d918:	|      move.l d0,-(sp)
    d91a:	|      move.l 28(sp),-(sp)
    d91e:	|      jsr 14ad6 <memcpy>
    d924:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    d928:	|      move.l 36(sp),d0
    d92c:	|      sub.l 40(sp),d0
    d930:	|      movea.l 20(sp),a0
    d934:	|      adda.l d0,a0
    d936:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    d938:	|      moveq #28,d0
    d93a:	|      add.l 56(sp),d0
    d93e:	|      move.l 20(sp),-(sp)
    d942:	|      move.l d0,-(sp)
    d944:	|      jsr 12cfc <makeTextVar>
    d94a:	|      addq.l #8,sp
    FreeVec(newString);
    d94c:	|      move.l 20(sp),16(sp)
    d952:	|      move.l 187a2 <SysBase>,d0
    d958:	|      movea.l d0,a6
    d95a:	|      movea.l 16(sp),a1
    d95e:	|      jsr -690(a6)
    return BR_CONTINUE;
    d962:	|      moveq #2,d0
}
    d964:	\----> move.l (sp)+,d2
    d966:	       movea.l (sp)+,a6
    d968:	       lea 40(sp),sp
    d96c:	       rts

0000d96e <builtIn_stringLength>:

builtIn(stringLength)
{
    d96e:	subq.l #8,sp
    d970:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d972:	movea.l 20(sp),a0
    d976:	move.l 24(a0),d0
    d97a:	move.l d0,-(sp)
    d97c:	jsr 130b0 <getTextFromAnyVar>
    d982:	addq.l #4,sp
    d984:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    d988:	moveq #24,d0
    d98a:	add.l 20(sp),d0
    d98e:	move.l d0,-(sp)
    d990:	jsr 1345e <trimStack>
    d996:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    d998:	move.l 8(sp),-(sp)
    d99c:	jsr 11fc6 <strlen>
    d9a2:	addq.l #4,sp
    d9a4:	move.l d0,d1
    d9a6:	moveq #28,d0
    d9a8:	add.l 20(sp),d0
    d9ac:	move.l d1,-(sp)
    d9ae:	pea 1 <_start+0x1>
    d9b2:	move.l d0,-(sp)
    d9b4:	jsr 133cc <setVariable>
    d9ba:	lea 12(sp),sp
	FreeVec(newText);
    d9be:	move.l 8(sp),4(sp)
    d9c4:	move.l 187a2 <SysBase>,d0
    d9ca:	movea.l d0,a6
    d9cc:	movea.l 4(sp),a1
    d9d0:	jsr -690(a6)
	return BR_CONTINUE;
    d9d4:	moveq #2,d0
}
    d9d6:	movea.l (sp)+,a6
    d9d8:	addq.l #8,sp
    d9da:	rts

0000d9dc <builtIn_newStack>:

builtIn(newStack)
{
    d9dc:	             lea -12(sp),sp
    d9e0:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    d9e2:	             moveq #28,d0
    d9e4:	             add.l 24(sp),d0
    d9e8:	             move.l d0,-(sp)
    d9ea:	             jsr 12d28 <unlinkVar>
    d9f0:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    d9f2:	             movea.l 24(sp),a0
    d9f6:	             moveq #6,d0
    d9f8:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    d9fc:	             moveq #12,d1
    d9fe:	             move.l d1,12(sp)
    da02:	             clr.l 8(sp)
    da06:	             move.l 187a2 <SysBase>,d0
    da0c:	             movea.l d0,a6
    da0e:	             move.l 12(sp),d0
    da12:	             move.l 8(sp),d1
    da16:	             jsr -684(a6)
    da1a:	             move.l d0,4(sp)
    da1e:	             move.l 4(sp),d0
    da22:	             movea.l 24(sp),a0
    da26:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    da2a:	             movea.l 24(sp),a0
    da2e:	             move.l 32(a0),d0
    da32:	         /-- bne.s da3a <builtIn_newStack+0x5e>
    da34:	         |   moveq #1,d0
    da36:	/--------|-- bra.w dacc <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    da3a:	|        \-> movea.l 24(sp),a0
    da3e:	|            movea.l 32(a0),a0
    da42:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    da44:	|            movea.l 24(sp),a0
    da48:	|            movea.l 32(a0),a0
    da4c:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    da50:	|            movea.l 24(sp),a0
    da54:	|            movea.l 32(a0),a0
    da58:	|            moveq #1,d0
    da5a:	|            move.l d0,8(a0)
    
    while (numParams--) {
    da5e:	|     /----- bra.s daba <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    da60:	|  /--|----> movea.l 24(sp),a0
    da64:	|  |  |      move.l 32(a0),d0
    da68:	|  |  |      move.l d0,d1
    da6a:	|  |  |      movea.l 24(sp),a0
    da6e:	|  |  |      move.l 24(a0),d0
    da72:	|  |  |      move.l d1,-(sp)
    da74:	|  |  |      move.l d0,-(sp)
    da76:	|  |  |      jsr 12316 <addVarToStack>
    da7c:	|  |  |      addq.l #8,sp
    da7e:	|  |  |      tst.w d0
    da80:	|  |  |  /-- bne.s da86 <builtIn_newStack+0xaa>
    da82:	|  |  |  |   moveq #1,d0
    da84:	+--|--|--|-- bra.s dacc <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    da86:	|  |  |  \-> movea.l 24(sp),a0
    da8a:	|  |  |      movea.l 32(a0),a0
    da8e:	|  |  |      move.l 4(a0),d0
    da92:	|  |  |  /-- bne.s daaa <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    da94:	|  |  |  |   movea.l 24(sp),a0
    da98:	|  |  |  |   movea.l 32(a0),a1
    da9c:	|  |  |  |   movea.l 24(sp),a0
    daa0:	|  |  |  |   movea.l 32(a0),a0
    daa4:	|  |  |  |   move.l (a1),d0
    daa6:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    daaa:	|  |  |  \-> moveq #24,d0
    daac:	|  |  |      add.l 24(sp),d0
    dab0:	|  |  |      move.l d0,-(sp)
    dab2:	|  |  |      jsr 1345e <trimStack>
    dab8:	|  |  |      addq.l #4,sp
    while (numParams--) {
    daba:	|  |  \----> move.l 20(sp),d0
    dabe:	|  |         move.l d0,d1
    dac0:	|  |         subq.l #1,d1
    dac2:	|  |         move.l d1,20(sp)
    dac6:	|  |         tst.l d0
    dac8:	|  \-------- bne.s da60 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    daca:	|            moveq #2,d0
}
    dacc:	\----------> movea.l (sp)+,a6
    dace:	             lea 12(sp),sp
    dad2:	             rts

0000dad4 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    dad4:	          movea.l 8(sp),a0
    dad8:	          movea.l 24(a0),a0
    dadc:	          move.l (a0),d0
    dade:	          moveq #6,d1
    dae0:	          cmp.l d0,d1
    dae2:	      /-- beq.s dafe <builtIn_stackSize+0x2a>
    dae4:	      |   moveq #10,d1
    dae6:	      |   cmp.l d0,d1
    dae8:	   /--|-- beq.s db42 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    daea:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    daec:	   |  |   pea 17009 <PutChar+0x1a13>
    daf2:	   |  |   jsr 14b22 <KPrintF>
    daf8:	   |  |   addq.l #4,sp
	return BR_ERROR;
    dafa:	   |  |   moveq #1,d0
    dafc:	/--|--|-- bra.s db7c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    dafe:	|  |  \-> movea.l 8(sp),a0
    db02:	|  |      movea.l 24(a0),a0
    db06:	|  |      move.l 4(a0),d0
    db0a:	|  |      move.l d0,-(sp)
    db0c:	|  |      jsr 1343a <stackSize>
    db12:	|  |      addq.l #4,sp
    db14:	|  |      move.l d0,d1
    db16:	|  |      moveq #28,d0
    db18:	|  |      add.l 8(sp),d0
    db1c:	|  |      move.l d1,-(sp)
    db1e:	|  |      pea 1 <_start+0x1>
    db22:	|  |      move.l d0,-(sp)
    db24:	|  |      jsr 133cc <setVariable>
    db2a:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    db2e:	|  |      moveq #24,d0
    db30:	|  |      add.l 8(sp),d0
    db34:	|  |      move.l d0,-(sp)
    db36:	|  |      jsr 1345e <trimStack>
    db3c:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    db3e:	|  |      moveq #2,d0
    db40:	+--|----- bra.s db7c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    db42:	|  \----> movea.l 8(sp),a0
    db46:	|         movea.l 24(a0),a0
    db4a:	|         movea.l 4(a0),a0
    db4e:	|         move.l 4(a0),d1
    db52:	|         moveq #28,d0
    db54:	|         add.l 8(sp),d0
    db58:	|         move.l d1,-(sp)
    db5a:	|         pea 1 <_start+0x1>
    db5e:	|         move.l d0,-(sp)
    db60:	|         jsr 133cc <setVariable>
    db66:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    db6a:	|         moveq #24,d0
    db6c:	|         add.l 8(sp),d0
    db70:	|         move.l d0,-(sp)
    db72:	|         jsr 1345e <trimStack>
    db78:	|         addq.l #4,sp
			return BR_CONTINUE;
    db7a:	|         moveq #2,d0
}
    db7c:	\-------> rts

0000db7e <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    db7e:	       movea.l 8(sp),a0
    db82:	       movea.l 24(a0),a0
    db86:	       move.l (a0),d0
    db88:	       moveq #6,d1
    db8a:	       cmp.l d0,d1
    db8c:	   /-- beq.s dba0 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    db8e:	   |   pea 17032 <PutChar+0x1a3c>
    db94:	   |   jsr 14b22 <KPrintF>
    db9a:	   |   addq.l #4,sp
		return BR_ERROR;
    db9c:	   |   moveq #1,d0
    db9e:	/--|-- bra.s dbd4 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    dba0:	|  \-> moveq #28,d0
    dba2:	|      add.l 8(sp),d0
    dba6:	|      movea.l 8(sp),a0
    dbaa:	|      move.l 24(a0),d1
    dbae:	|      move.l d0,-(sp)
    dbb0:	|      move.l d1,-(sp)
    dbb2:	|      jsr 125e0 <copyStack>
    dbb8:	|      addq.l #8,sp
    dbba:	|      tst.w d0
    dbbc:	|  /-- bne.s dbc2 <builtIn_copyStack+0x44>
    dbbe:	|  |   moveq #1,d0
    dbc0:	+--|-- bra.s dbd4 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    dbc2:	|  \-> moveq #24,d0
    dbc4:	|      add.l 8(sp),d0
    dbc8:	|      move.l d0,-(sp)
    dbca:	|      jsr 1345e <trimStack>
    dbd0:	|      addq.l #4,sp
	return BR_CONTINUE;
    dbd2:	|      moveq #2,d0
}
    dbd4:	\----> rts

0000dbd6 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    dbd6:	       movea.l 8(sp),a0
    dbda:	       movea.l 24(a0),a0
    dbde:	       movea.l 8(a0),a0
    dbe2:	       move.l (a0),d0
    dbe4:	       moveq #6,d1
    dbe6:	       cmp.l d0,d1
    dbe8:	   /-- beq.s dbfe <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    dbea:	   |   pea 1704b <PutChar+0x1a55>
    dbf0:	   |   jsr 14b22 <KPrintF>
    dbf6:	   |   addq.l #4,sp
		return BR_ERROR;
    dbf8:	   |   moveq #1,d0
    dbfa:	/--|-- bra.w dc8c <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    dbfe:	|  \-> movea.l 8(sp),a0
    dc02:	|      movea.l 24(a0),a0
    dc06:	|      movea.l 8(a0),a0
    dc0a:	|      move.l 4(a0),d0
    dc0e:	|      move.l d0,d1
    dc10:	|      movea.l 8(sp),a0
    dc14:	|      move.l 24(a0),d0
    dc18:	|      move.l d1,-(sp)
    dc1a:	|      move.l d0,-(sp)
    dc1c:	|      jsr 12316 <addVarToStack>
    dc22:	|      addq.l #8,sp
    dc24:	|      tst.w d0
    dc26:	|  /-- bne.s dc2c <builtIn_pushToStack+0x56>
		return BR_ERROR;
    dc28:	|  |   moveq #1,d0
    dc2a:	+--|-- bra.s dc8c <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    dc2c:	|  \-> movea.l 8(sp),a0
    dc30:	|      movea.l 24(a0),a0
    dc34:	|      movea.l 8(a0),a0
    dc38:	|      movea.l 4(a0),a0
    dc3c:	|      movea.l (a0),a0
    dc3e:	|      move.l 8(a0),d0
    dc42:	|  /-- bne.s dc6a <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    dc44:	|  |   movea.l 8(sp),a0
    dc48:	|  |   movea.l 24(a0),a0
    dc4c:	|  |   movea.l 8(a0),a0
    dc50:	|  |   movea.l 4(a0),a1
    dc54:	|  |   movea.l 8(sp),a0
    dc58:	|  |   movea.l 24(a0),a0
    dc5c:	|  |   movea.l 8(a0),a0
    dc60:	|  |   movea.l 4(a0),a0
    dc64:	|  |   move.l (a1),d0
    dc66:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    dc6a:	|  \-> moveq #24,d0
    dc6c:	|      add.l 8(sp),d0
    dc70:	|      move.l d0,-(sp)
    dc72:	|      jsr 1345e <trimStack>
    dc78:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    dc7a:	|      moveq #24,d0
    dc7c:	|      add.l 8(sp),d0
    dc80:	|      move.l d0,-(sp)
    dc82:	|      jsr 1345e <trimStack>
    dc88:	|      addq.l #4,sp
	return BR_CONTINUE;
    dc8a:	|      moveq #2,d0
}
    dc8c:	\----> rts

0000dc8e <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    dc8e:	             movea.l 8(sp),a0
    dc92:	             movea.l 24(a0),a0
    dc96:	             movea.l 8(a0),a0
    dc9a:	             move.l (a0),d0
    dc9c:	             moveq #6,d1
    dc9e:	             cmp.l d0,d1
    dca0:	         /-- beq.s dcb6 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    dca2:	         |   pea 1704b <PutChar+0x1a55>
    dca8:	         |   jsr 14b22 <KPrintF>
    dcae:	         |   addq.l #4,sp
		return BR_ERROR;
    dcb0:	         |   moveq #1,d0
    dcb2:	/--------|-- bra.w dda4 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    dcb6:	|        \-> movea.l 8(sp),a0
    dcba:	|            movea.l 24(a0),a0
    dcbe:	|            movea.l 8(a0),a0
    dcc2:	|            movea.l 4(a0),a0
    dcc6:	|            move.l (a0),d0
    dcc8:	|     /----- bne.s dd22 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    dcca:	|     |      movea.l 8(sp),a0
    dcce:	|     |      movea.l 24(a0),a0
    dcd2:	|     |      movea.l 8(a0),a0
    dcd6:	|     |      move.l 4(a0),d0
    dcda:	|     |      move.l d0,d1
    dcdc:	|     |      movea.l 8(sp),a0
    dce0:	|     |      move.l 24(a0),d0
    dce4:	|     |      move.l d1,-(sp)
    dce6:	|     |      move.l d0,-(sp)
    dce8:	|     |      jsr 12316 <addVarToStack>
    dcee:	|     |      addq.l #8,sp
    dcf0:	|     |      tst.w d0
    dcf2:	|     |  /-- bne.s dcfa <builtIn_enqueue+0x6c>
			return BR_ERROR;
    dcf4:	|     |  |   moveq #1,d0
    dcf6:	+-----|--|-- bra.w dda4 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    dcfa:	|     |  \-> movea.l 8(sp),a0
    dcfe:	|     |      movea.l 24(a0),a0
    dd02:	|     |      movea.l 8(a0),a0
    dd06:	|     |      movea.l 4(a0),a1
    dd0a:	|     |      movea.l 8(sp),a0
    dd0e:	|     |      movea.l 24(a0),a0
    dd12:	|     |      movea.l 8(a0),a0
    dd16:	|     |      movea.l 4(a0),a0
    dd1a:	|     |      move.l (a1),d0
    dd1c:	|     |      move.l d0,4(a0)
    dd20:	|  /--|----- bra.s dd82 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    dd22:	|  |  \----> movea.l 8(sp),a0
    dd26:	|  |         movea.l 24(a0),a0
    dd2a:	|  |         movea.l 8(a0),a0
    dd2e:	|  |         movea.l 4(a0),a0
    dd32:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    dd36:	|  |         move.l d0,d1
    dd38:	|  |         addq.l #8,d1
    dd3a:	|  |         movea.l 8(sp),a0
    dd3e:	|  |         move.l 24(a0),d0
    dd42:	|  |         move.l d1,-(sp)
    dd44:	|  |         move.l d0,-(sp)
    dd46:	|  |         jsr 12316 <addVarToStack>
    dd4c:	|  |         addq.l #8,sp
    dd4e:	|  |         tst.w d0
    dd50:	|  |     /-- bne.s dd56 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    dd52:	|  |     |   moveq #1,d0
    dd54:	+--|-----|-- bra.s dda4 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    dd56:	|  |     \-> movea.l 8(sp),a0
    dd5a:	|  |         movea.l 24(a0),a0
    dd5e:	|  |         movea.l 8(a0),a0
    dd62:	|  |         movea.l 4(a0),a0
    dd66:	|  |         movea.l 4(a0),a1
    dd6a:	|  |         movea.l 8(sp),a0
    dd6e:	|  |         movea.l 24(a0),a0
    dd72:	|  |         movea.l 8(a0),a0
    dd76:	|  |         movea.l 4(a0),a0
    dd7a:	|  |         move.l 8(a1),d0
    dd7e:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    dd82:	|  \-------> moveq #24,d0
    dd84:	|            add.l 8(sp),d0
    dd88:	|            move.l d0,-(sp)
    dd8a:	|            jsr 1345e <trimStack>
    dd90:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    dd92:	|            moveq #24,d0
    dd94:	|            add.l 8(sp),d0
    dd98:	|            move.l d0,-(sp)
    dd9a:	|            jsr 1345e <trimStack>
    dda0:	|            addq.l #4,sp
	return BR_CONTINUE;
    dda2:	|            moveq #2,d0
}
    dda4:	\----------> rts

0000dda6 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    dda6:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    dda8:	       movea.l 12(sp),a0
    ddac:	       movea.l 24(a0),a0
    ddb0:	       movea.l 8(a0),a0
    ddb4:	       move.l (a0),d0
    ddb6:	       moveq #6,d1
    ddb8:	       cmp.l d0,d1
    ddba:	   /-- beq.s ddd0 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    ddbc:	   |   pea 17032 <PutChar+0x1a3c>
    ddc2:	   |   jsr 14b22 <KPrintF>
    ddc8:	   |   addq.l #4,sp
		return BR_ERROR;
    ddca:	   |   moveq #1,d0
    ddcc:	/--|-- bra.w de66 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    ddd0:	|  \-> movea.l 12(sp),a0
    ddd4:	|      movea.l 24(a0),a0
    ddd8:	|      movea.l 8(a0),a0
    dddc:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    dde0:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    dde2:	|      movea.l 12(sp),a0
    dde6:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ddea:	|      clr.l -(sp)
    ddec:	|      move.l d1,-(sp)
    ddee:	|      move.l d0,-(sp)
    ddf0:	|      jsr 126b6 <deleteVarFromStack>
    ddf6:	|      lea 12(sp),sp
    ddfa:	|      move.l d0,d1
    ddfc:	|      moveq #28,d0
    ddfe:	|      add.l 12(sp),d0
    de02:	|      move.l d1,-(sp)
    de04:	|      pea 1 <_start+0x1>
    de08:	|      move.l d0,-(sp)
    de0a:	|      jsr 133cc <setVariable>
    de10:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    de14:	|      movea.l 12(sp),a0
    de18:	|      movea.l 24(a0),a0
    de1c:	|      movea.l 8(a0),a0
    de20:	|      movea.l 4(a0),a0
    de24:	|      move.l (a0),d0
    de26:	|      movea.l 12(sp),a0
    de2a:	|      movea.l 24(a0),a0
    de2e:	|      movea.l 8(a0),a0
    de32:	|      movea.l 4(a0),a2
    de36:	|      move.l d0,-(sp)
    de38:	|      jsr 13416 <stackFindLast>
    de3e:	|      addq.l #4,sp
    de40:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    de44:	|      moveq #24,d0
    de46:	|      add.l 12(sp),d0
    de4a:	|      move.l d0,-(sp)
    de4c:	|      jsr 1345e <trimStack>
    de52:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    de54:	|      moveq #24,d0
    de56:	|      add.l 12(sp),d0
    de5a:	|      move.l d0,-(sp)
    de5c:	|      jsr 1345e <trimStack>
    de62:	|      addq.l #4,sp
	return BR_CONTINUE;
    de64:	|      moveq #2,d0
}
    de66:	\----> movea.l (sp)+,a2
    de68:	       rts

0000de6a <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    de6a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    de6c:	       movea.l 12(sp),a0
    de70:	       movea.l 24(a0),a0
    de74:	       movea.l 8(a0),a0
    de78:	       move.l (a0),d0
    de7a:	       moveq #6,d1
    de7c:	       cmp.l d0,d1
    de7e:	   /-- beq.s de94 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    de80:	   |   pea 17032 <PutChar+0x1a3c>
    de86:	   |   jsr 14b22 <KPrintF>
    de8c:	   |   addq.l #4,sp
		return BR_ERROR;
    de8e:	   |   moveq #1,d0
    de90:	/--|-- bra.w df2c <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    de94:	|  \-> movea.l 12(sp),a0
    de98:	|      movea.l 24(a0),a0
    de9c:	|      movea.l 8(a0),a0
    dea0:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    dea4:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    dea6:	|      movea.l 12(sp),a0
    deaa:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    deae:	|      pea 1 <_start+0x1>
    deb2:	|      move.l d1,-(sp)
    deb4:	|      move.l d0,-(sp)
    deb6:	|      jsr 126b6 <deleteVarFromStack>
    debc:	|      lea 12(sp),sp
    dec0:	|      move.l d0,d1
    dec2:	|      moveq #28,d0
    dec4:	|      add.l 12(sp),d0
    dec8:	|      move.l d1,-(sp)
    deca:	|      pea 1 <_start+0x1>
    dece:	|      move.l d0,-(sp)
    ded0:	|      jsr 133cc <setVariable>
    ded6:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    deda:	|      movea.l 12(sp),a0
    dede:	|      movea.l 24(a0),a0
    dee2:	|      movea.l 8(a0),a0
    dee6:	|      movea.l 4(a0),a0
    deea:	|      move.l (a0),d0
    deec:	|      movea.l 12(sp),a0
    def0:	|      movea.l 24(a0),a0
    def4:	|      movea.l 8(a0),a0
    def8:	|      movea.l 4(a0),a2
    defc:	|      move.l d0,-(sp)
    defe:	|      jsr 13416 <stackFindLast>
    df04:	|      addq.l #4,sp
    df06:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    df0a:	|      moveq #24,d0
    df0c:	|      add.l 12(sp),d0
    df10:	|      move.l d0,-(sp)
    df12:	|      jsr 1345e <trimStack>
    df18:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    df1a:	|      moveq #24,d0
    df1c:	|      add.l 12(sp),d0
    df20:	|      move.l d0,-(sp)
    df22:	|      jsr 1345e <trimStack>
    df28:	|      addq.l #4,sp
	return BR_CONTINUE;
    df2a:	|      moveq #2,d0
}
    df2c:	\----> movea.l (sp)+,a2
    df2e:	       rts

0000df30 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    df30:	       movea.l 8(sp),a0
    df34:	       movea.l 24(a0),a0
    df38:	       move.l (a0),d0
    df3a:	       moveq #6,d1
    df3c:	       cmp.l d0,d1
    df3e:	   /-- beq.s df52 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    df40:	   |   pea 17032 <PutChar+0x1a3c>
    df46:	   |   jsr 14b22 <KPrintF>
    df4c:	   |   addq.l #4,sp
		return BR_ERROR;
    df4e:	   |   moveq #1,d0
    df50:	/--|-- bra.s dfbc <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    df52:	|  \-> movea.l 8(sp),a0
    df56:	|      movea.l 24(a0),a0
    df5a:	|      movea.l 4(a0),a0
    df5e:	|      move.l (a0),d0
    df60:	|  /-- bne.s df74 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    df62:	|  |   pea 17063 <PutChar+0x1a6d>
    df68:	|  |   jsr 14b22 <KPrintF>
    df6e:	|  |   addq.l #4,sp
		return BR_ERROR;
    df70:	|  |   moveq #1,d0
    df72:	+--|-- bra.s dfbc <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    df74:	|  \-> moveq #28,d0
    df76:	|      add.l 8(sp),d0
    df7a:	|      movea.l 8(sp),a0
    df7e:	|      movea.l 24(a0),a0
    df82:	|      movea.l 4(a0),a0
    df86:	|      move.l (a0),d1
    df88:	|      move.l d0,-(sp)
    df8a:	|      move.l d1,-(sp)
    df8c:	|      jsr 12f94 <copyVariable>
    df92:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    df94:	|      movea.l 8(sp),a0
    df98:	|      movea.l 24(a0),a0
    df9c:	|      move.l 4(a0),d0
    dfa0:	|      move.l d0,-(sp)
    dfa2:	|      jsr 1345e <trimStack>
    dfa8:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    dfaa:	|      moveq #24,d0
    dfac:	|      add.l 8(sp),d0
    dfb0:	|      move.l d0,-(sp)
    dfb2:	|      jsr 1345e <trimStack>
    dfb8:	|      addq.l #4,sp
	return BR_CONTINUE;
    dfba:	|      moveq #2,d0
}
    dfbc:	\----> rts

0000dfbe <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    dfbe:	       movea.l 8(sp),a0
    dfc2:	       movea.l 24(a0),a0
    dfc6:	       move.l (a0),d0
    dfc8:	       moveq #6,d1
    dfca:	       cmp.l d0,d1
    dfcc:	   /-- beq.s dfe0 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    dfce:	   |   pea 17032 <PutChar+0x1a3c>
    dfd4:	   |   jsr 14b22 <KPrintF>
    dfda:	   |   addq.l #4,sp
		return BR_ERROR;
    dfdc:	   |   moveq #1,d0
    dfde:	/--|-- bra.s e034 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    dfe0:	|  \-> movea.l 8(sp),a0
    dfe4:	|      movea.l 24(a0),a0
    dfe8:	|      movea.l 4(a0),a0
    dfec:	|      move.l (a0),d0
    dfee:	|  /-- bne.s e002 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    dff0:	|  |   pea 17063 <PutChar+0x1a6d>
    dff6:	|  |   jsr 14b22 <KPrintF>
    dffc:	|  |   addq.l #4,sp
		return BR_ERROR;
    dffe:	|  |   moveq #1,d0
    e000:	+--|-- bra.s e034 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    e002:	|  \-> moveq #28,d0
    e004:	|      add.l 8(sp),d0
    e008:	|      movea.l 8(sp),a0
    e00c:	|      movea.l 24(a0),a0
    e010:	|      movea.l 4(a0),a0
    e014:	|      move.l (a0),d1
    e016:	|      move.l d0,-(sp)
    e018:	|      move.l d1,-(sp)
    e01a:	|      jsr 12f94 <copyVariable>
    e020:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    e022:	|      moveq #24,d0
    e024:	|      add.l 8(sp),d0
    e028:	|      move.l d0,-(sp)
    e02a:	|      jsr 1345e <trimStack>
    e030:	|      addq.l #4,sp
	return BR_CONTINUE;
    e032:	|      moveq #2,d0
}
    e034:	\----> rts

0000e036 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    e036:	       movea.l 8(sp),a0
    e03a:	       movea.l 24(a0),a0
    e03e:	       move.l (a0),d0
    e040:	       moveq #6,d1
    e042:	       cmp.l d0,d1
    e044:	   /-- beq.s e058 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    e046:	   |   pea 17032 <PutChar+0x1a3c>
    e04c:	   |   jsr 14b22 <KPrintF>
    e052:	   |   addq.l #4,sp
		return BR_ERROR;
    e054:	   |   moveq #1,d0
    e056:	/--|-- bra.s e0ae <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    e058:	|  \-> movea.l 8(sp),a0
    e05c:	|      movea.l 24(a0),a0
    e060:	|      movea.l 4(a0),a0
    e064:	|      move.l (a0),d0
    e066:	|  /-- bne.s e07a <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    e068:	|  |   pea 17063 <PutChar+0x1a6d>
    e06e:	|  |   jsr 14b22 <KPrintF>
    e074:	|  |   addq.l #4,sp
		return BR_ERROR;
    e076:	|  |   moveq #1,d0
    e078:	+--|-- bra.s e0ae <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    e07a:	|  \-> moveq #28,d0
    e07c:	|      add.l 8(sp),d0
    e080:	|      movea.l 8(sp),a0
    e084:	|      movea.l 24(a0),a0
    e088:	|      movea.l 4(a0),a0
    e08c:	|      move.l 4(a0),d1
    e090:	|      move.l d0,-(sp)
    e092:	|      move.l d1,-(sp)
    e094:	|      jsr 12f94 <copyVariable>
    e09a:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    e09c:	|      moveq #24,d0
    e09e:	|      add.l 8(sp),d0
    e0a2:	|      move.l d0,-(sp)
    e0a4:	|      jsr 1345e <trimStack>
    e0aa:	|      addq.l #4,sp
	return BR_CONTINUE;
    e0ac:	|      moveq #2,d0
}
    e0ae:	\----> rts

0000e0b0 <builtIn_random>:

builtIn(random)
{
    e0b0:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    e0b2:	       movea.l 12(sp),a0
    e0b6:	       move.l 24(a0),d0
    e0ba:	       move.l d0,-(sp)
    e0bc:	       pea 1 <_start+0x1>
    e0c0:	       move.l sp,d0
    e0c2:	       addq.l #8,d0
    e0c4:	       move.l d0,-(sp)
    e0c6:	       jsr 12ada <getValueType>
    e0cc:	       lea 12(sp),sp
    e0d0:	       tst.w d0
    e0d2:	   /-- bne.s e0d8 <builtIn_random+0x28>
		return BR_ERROR;
    e0d4:	   |   moveq #1,d0
    e0d6:	/--|-- bra.s e122 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    e0d8:	|  \-> moveq #24,d0
    e0da:	|      add.l 12(sp),d0
    e0de:	|      move.l d0,-(sp)
    e0e0:	|      jsr 1345e <trimStack>
    e0e6:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    e0e8:	|      move.l (sp),d0
    e0ea:	|  /-- bgt.s e0f0 <builtIn_random+0x40>
    e0ec:	|  |   moveq #1,d0
    e0ee:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    e0f0:	|  \-> jsr c58 <rand>
    e0f6:	|      move.l d0,d1
    e0f8:	|      move.l (sp),d0
    e0fa:	|      move.l d0,-(sp)
    e0fc:	|      move.l d1,-(sp)
    e0fe:	|      jsr 155ba <__umodsi3>
    e104:	|      addq.l #8,sp
    e106:	|      move.l d0,d1
    e108:	|      moveq #28,d0
    e10a:	|      add.l 12(sp),d0
    e10e:	|      move.l d1,-(sp)
    e110:	|      pea 1 <_start+0x1>
    e114:	|      move.l d0,-(sp)
    e116:	|      jsr 133cc <setVariable>
    e11c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e120:	|      moveq #2,d0
}
    e122:	\----> addq.l #4,sp
    e124:	       rts

0000e126 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    e126:	nop
    e128:	rts

0000e12a <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    e12a:	moveq #2,d0
}
    e12c:	rts

0000e12e <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    e12e:	moveq #2,d0
}
    e130:	rts

0000e132 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    e132:	moveq #2,d0
}
    e134:	rts

0000e136 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    e136:	moveq #2,d0
}
    e138:	rts

0000e13a <builtIn_setFont>:


builtIn(setFont)
{
    e13a:	       lea -16(sp),sp
    e13e:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e140:	       movea.l 28(sp),a0
    e144:	       move.l 24(a0),d0
    e148:	       move.l d0,-(sp)
    e14a:	       pea 1 <_start+0x1>
    e14e:	       lea 12(sp),a0
    e152:	       move.l a0,-(sp)
    e154:	       jsr 12ada <getValueType>
    e15a:	       lea 12(sp),sp
    e15e:	       tst.w d0
    e160:	   /-- bne.s e168 <builtIn_setFont+0x2e>
    e162:	   |   moveq #1,d0
    e164:	/--|-- bra.w e216 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    e168:	|  \-> moveq #24,d0
    e16a:	|      add.l 28(sp),d0
    e16e:	|      move.l d0,-(sp)
    e170:	|      jsr 1345e <trimStack>
    e176:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    e178:	|      movea.l 28(sp),a0
    e17c:	|      move.l 24(a0),d0
    e180:	|      move.l d0,-(sp)
    e182:	|      jsr 130b0 <getTextFromAnyVar>
    e188:	|      addq.l #4,sp
    e18a:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    e18e:	|  /-- bne.s e196 <builtIn_setFont+0x5c>
    e190:	|  |   moveq #1,d0
    e192:	+--|-- bra.w e216 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    e196:	|  \-> moveq #24,d0
    e198:	|      add.l 28(sp),d0
    e19c:	|      move.l d0,-(sp)
    e19e:	|      jsr 1345e <trimStack>
    e1a4:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    e1a6:	|      movea.l 28(sp),a0
    e1aa:	|      move.l 24(a0),d0
    e1ae:	|      move.l d0,-(sp)
    e1b0:	|      pea 5 <_start+0x5>
    e1b4:	|      lea 16(sp),a0
    e1b8:	|      move.l a0,-(sp)
    e1ba:	|      jsr 12ada <getValueType>
    e1c0:	|      lea 12(sp),sp
    e1c4:	|      tst.w d0
    e1c6:	|  /-- bne.s e1cc <builtIn_setFont+0x92>
    e1c8:	|  |   moveq #1,d0
    e1ca:	+--|-- bra.s e216 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    e1cc:	|  \-> moveq #24,d0
    e1ce:	|      add.l 28(sp),d0
    e1d2:	|      move.l d0,-(sp)
    e1d4:	|      jsr 1345e <trimStack>
    e1da:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    e1dc:	|      move.l 4(sp),d1
    e1e0:	|      move.l 8(sp),d0
    e1e4:	|      move.l d1,-(sp)
    e1e6:	|      move.l 20(sp),-(sp)
    e1ea:	|      move.l d0,-(sp)
    e1ec:	|      jsr 134d2 <loadFont>
    e1f2:	|      lea 12(sp),sp
    e1f6:	|      tst.w d0
    e1f8:	|  /-- bne.s e1fe <builtIn_setFont+0xc4>
    e1fa:	|  |   moveq #1,d0
    e1fc:	+--|-- bra.s e216 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    e1fe:	|  \-> move.l 16(sp),12(sp)
    e204:	|      move.l 187a2 <SysBase>,d0
    e20a:	|      movea.l d0,a6
    e20c:	|      movea.l 12(sp),a1
    e210:	|      jsr -690(a6)

    return BR_CONTINUE;
    e214:	|      moveq #2,d0
}
    e216:	\----> movea.l (sp)+,a6
    e218:	       lea 16(sp),sp
    e21c:	       rts

0000e21e <builtIn_inFont>:

builtIn(inFont)
{
    e21e:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e220:	       movea.l 12(sp),a0
    e224:	       move.l 24(a0),d0
    e228:	       move.l d0,-(sp)
    e22a:	       jsr 130b0 <getTextFromAnyVar>
    e230:	       addq.l #4,sp
    e232:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    e234:	   /-- bne.s e23a <builtIn_inFont+0x1c>
    e236:	   |   moveq #1,d0
    e238:	/--|-- bra.s e270 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    e23a:	|  \-> moveq #24,d0
    e23c:	|      add.l 12(sp),d0
    e240:	|      move.l d0,-(sp)
    e242:	|      jsr 1345e <trimStack>
    e248:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    e24a:	|      move.l (sp),-(sp)
    e24c:	|      jsr 134a6 <isInFont>
    e252:	|      addq.l #4,sp
    e254:	|      movea.w d0,a0
    e256:	|      moveq #28,d0
    e258:	|      add.l 12(sp),d0
    e25c:	|      move.l a0,-(sp)
    e25e:	|      pea 1 <_start+0x1>
    e262:	|      move.l d0,-(sp)
    e264:	|      jsr 133cc <setVariable>
    e26a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e26e:	|      moveq #2,d0
}
    e270:	\----> addq.l #4,sp
    e272:	       rts

0000e274 <builtIn_pasteString>:

builtIn(pasteString)
{
    e274:	       lea -16(sp),sp
    e278:	       move.l a6,-(sp)
    e27a:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    e27c:	       movea.l 32(sp),a0
    e280:	       move.l 24(a0),d0
    e284:	       move.l d0,-(sp)
    e286:	       jsr 130b0 <getTextFromAnyVar>
    e28c:	       addq.l #4,sp
    e28e:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    e292:	       moveq #24,d0
    e294:	       add.l 32(sp),d0
    e298:	       move.l d0,-(sp)
    e29a:	       jsr 1345e <trimStack>
    e2a0:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e2a2:	       movea.l 32(sp),a0
    e2a6:	       move.l 24(a0),d0
    e2aa:	       move.l d0,-(sp)
    e2ac:	       pea 1 <_start+0x1>
    e2b0:	       lea 20(sp),a0
    e2b4:	       move.l a0,-(sp)
    e2b6:	       jsr 12ada <getValueType>
    e2bc:	       lea 12(sp),sp
    e2c0:	       tst.w d0
    e2c2:	   /-- bne.s e2ca <builtIn_pasteString+0x56>
    e2c4:	   |   moveq #1,d0
    e2c6:	/--|-- bra.w e352 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    e2ca:	|  \-> moveq #24,d0
    e2cc:	|      add.l 32(sp),d0
    e2d0:	|      move.l d0,-(sp)
    e2d2:	|      jsr 1345e <trimStack>
    e2d8:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e2da:	|      movea.l 32(sp),a0
    e2de:	|      move.l 24(a0),d0
    e2e2:	|      move.l d0,-(sp)
    e2e4:	|      pea 1 <_start+0x1>
    e2e8:	|      lea 16(sp),a0
    e2ec:	|      move.l a0,-(sp)
    e2ee:	|      jsr 12ada <getValueType>
    e2f4:	|      lea 12(sp),sp
    e2f8:	|      tst.w d0
    e2fa:	|  /-- bne.s e300 <builtIn_pasteString+0x8c>
    e2fc:	|  |   moveq #1,d0
    e2fe:	+--|-- bra.s e352 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    e300:	|  \-> moveq #24,d0
    e302:	|      add.l 32(sp),d0
    e306:	|      move.l d0,-(sp)
    e308:	|      jsr 1345e <trimStack>
    e30e:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    e310:	|      move.l 8(sp),d0
    e314:	|      cmpi.l #65535,d0
    e31a:	|  /-- bne.s e33a <builtIn_pasteString+0xc6>
    e31c:	|  |   move.l 186f6 <winWidth>,d2
    e322:	|  |   move.l 20(sp),-(sp)
    e326:	|  |   jsr 134b8 <stringWidth>
    e32c:	|  |   addq.l #4,sp
    e32e:	|  |   move.l d2,d1
    e330:	|  |   sub.l d0,d1
    e332:	|  |   move.l d1,d0
    e334:	|  |   lsr.l #1,d0
    e336:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    e33a:	|  \-> move.l 20(sp),16(sp)
    e340:	|      move.l 187a2 <SysBase>,d0
    e346:	|      movea.l d0,a6
    e348:	|      movea.l 16(sp),a1
    e34c:	|      jsr -690(a6)
    return BR_CONTINUE;
    e350:	|      moveq #2,d0
}
    e352:	\----> move.l (sp)+,d2
    e354:	       movea.l (sp)+,a6
    e356:	       lea 16(sp),sp
    e35a:	       rts

0000e35c <builtIn_anim>:

builtIn(anim)
{
    e35c:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    e360:	       moveq #1,d0
    e362:	       cmp.l 16(sp),d0
    e366:	   /-- blt.s e37c <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    e368:	   |   pea 17076 <PutChar+0x1a80>
    e36e:	   |   jsr 14b22 <KPrintF>
    e374:	   |   addq.l #4,sp
		return BR_ERROR;
    e376:	   |   moveq #1,d0
    e378:	/--|-- bra.w e40a <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    e37c:	|  \-> moveq #24,d1
    e37e:	|      add.l 20(sp),d1
    e382:	|      move.l 16(sp),d0
    e386:	|      subq.l #1,d0
    e388:	|      move.l d1,-(sp)
    e38a:	|      move.l d0,-(sp)
    e38c:	|      jsr 7cce <createPersonaAnim>
    e392:	|      addq.l #8,sp
    e394:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e398:	|      movea.l 20(sp),a0
    e39c:	|      move.l 24(a0),d0
    e3a0:	|      move.l d0,-(sp)
    e3a2:	|      pea 5 <_start+0x5>
    e3a6:	|      lea 8(sp),a0
    e3aa:	|      move.l a0,-(sp)
    e3ac:	|      jsr 12ada <getValueType>
    e3b2:	|      lea 12(sp),sp
    e3b6:	|      tst.w d0
    e3b8:	|  /-- bne.s e3be <builtIn_anim+0x62>
    e3ba:	|  |   moveq #1,d0
    e3bc:	+--|-- bra.s e40a <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    e3be:	|  \-> moveq #24,d0
    e3c0:	|      add.l 20(sp),d0
    e3c4:	|      move.l d0,-(sp)
    e3c6:	|      jsr 1345e <trimStack>
    e3cc:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    e3ce:	|      move.l (sp),d0
    e3d0:	|      move.l d0,-(sp)
    e3d2:	|      jsr a71c <loadBankForAnim>
    e3d8:	|      addq.l #4,sp
    e3da:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    e3de:	|  /-- bne.s e3e4 <builtIn_anim+0x88>
    e3e0:	|  |   moveq #1,d0
    e3e2:	+--|-- bra.s e40a <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    e3e4:	|  \-> move.l 4(sp),-(sp)
    e3e8:	|      move.l 12(sp),-(sp)
    e3ec:	|      jsr 9ad0 <setBankFile>
    e3f2:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    e3f4:	|      moveq #28,d0
    e3f6:	|      add.l 20(sp),d0
    e3fa:	|      move.l 8(sp),-(sp)
    e3fe:	|      move.l d0,-(sp)
    e400:	|      jsr 13388 <newAnimationVariable>
    e406:	|      addq.l #8,sp
	return BR_CONTINUE;
    e408:	|      moveq #2,d0
}
    e40a:	\----> lea 12(sp),sp
    e40e:	       rts

0000e410 <builtIn_costume>:

builtIn(costume)
{
    e410:	          lea -32(sp),sp
    e414:	          move.l a6,-(sp)
    e416:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    e418:	          moveq #8,d0
    e41a:	          move.l d0,32(sp)
    e41e:	          clr.l 28(sp)
    e422:	          move.l 187a2 <SysBase>,d0
    e428:	          movea.l d0,a6
    e42a:	          move.l 32(sp),d0
    e42e:	          move.l 28(sp),d1
    e432:	          jsr -684(a6)
    e436:	          move.l d0,24(sp)
    e43a:	          move.l 24(sp),d0
    e43e:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    e442:	      /-- bne.s e44a <builtIn_costume+0x3a>
    e444:	      |   moveq #1,d0
    e446:	/-----|-- bra.w e532 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    e44a:	|     \-> move.l 44(sp),d0
    e44e:	|         pea 3 <_start+0x3>
    e452:	|         move.l d0,-(sp)
    e454:	|         jsr 1555e <__divsi3>
    e45a:	|         addq.l #8,sp
    e45c:	|         movea.l 20(sp),a0
    e460:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    e464:	|         tst.l 44(sp)
    e468:	|     /-- beq.s e47e <builtIn_costume+0x6e>
    e46a:	|     |   movea.l 20(sp),a0
    e46e:	|     |   move.l 4(a0),d1
    e472:	|     |   move.l d1,d0
    e474:	|     |   add.l d0,d0
    e476:	|     |   add.l d1,d0
    e478:	|     |   cmp.l 44(sp),d0
    e47c:	|  /--|-- beq.s e492 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    e47e:	|  |  \-> pea 170b0 <PutChar+0x1aba>
    e484:	|  |      jsr 14b22 <KPrintF>
    e48a:	|  |      addq.l #4,sp
        return BR_ERROR;
    e48c:	|  |      moveq #1,d0
    e48e:	+--|----- bra.w e532 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    e492:	|  \----> move.l 44(sp),d0
    e496:	|         add.l d0,d0
    e498:	|         add.l d0,d0
    e49a:	|         move.l d0,16(sp)
    e49e:	|         clr.l 12(sp)
    e4a2:	|         move.l 187a2 <SysBase>,d0
    e4a8:	|         movea.l d0,a6
    e4aa:	|         move.l 16(sp),d0
    e4ae:	|         move.l 12(sp),d1
    e4b2:	|         jsr -684(a6)
    e4b6:	|         move.l d0,8(sp)
    e4ba:	|         move.l 8(sp),d0
    e4be:	|         movea.l 20(sp),a0
    e4c2:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    e4c4:	|         movea.l 20(sp),a0
    e4c8:	|         move.l (a0),d0
    e4ca:	|     /-- bne.s e4d0 <builtIn_costume+0xc0>
    e4cc:	|     |   moveq #1,d0
    e4ce:	+-----|-- bra.s e532 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    e4d0:	|     \-> move.l 44(sp),d0
    e4d4:	|         subq.l #1,d0
    e4d6:	|         move.l d0,36(sp)
    e4da:	|     /-- bra.s e516 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    e4dc:	|  /--|-> movea.l 48(sp),a0
    e4e0:	|  |  |   move.l 24(a0),d0
    e4e4:	|  |  |   movea.l 20(sp),a0
    e4e8:	|  |  |   movea.l (a0),a0
    e4ea:	|  |  |   move.l 36(sp),d1
    e4ee:	|  |  |   add.l d1,d1
    e4f0:	|  |  |   add.l d1,d1
    e4f2:	|  |  |   lea (0,a0,d1.l),a2
    e4f6:	|  |  |   move.l d0,-(sp)
    e4f8:	|  |  |   jsr 12fb2 <getAnimationFromVar>
    e4fe:	|  |  |   addq.l #4,sp
    e500:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    e502:	|  |  |   moveq #24,d0
    e504:	|  |  |   add.l 48(sp),d0
    e508:	|  |  |   move.l d0,-(sp)
    e50a:	|  |  |   jsr 1345e <trimStack>
    e510:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    e512:	|  |  |   subq.l #1,36(sp)
    e516:	|  |  \-> tst.l 36(sp)
    e51a:	|  \----- bge.s e4dc <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    e51c:	|         moveq #28,d0
    e51e:	|         add.l 48(sp),d0
    e522:	|         move.l 20(sp),-(sp)
    e526:	|         move.l d0,-(sp)
    e528:	|         jsr 133aa <newCostumeVariable>
    e52e:	|         addq.l #8,sp
    return BR_CONTINUE;
    e530:	|         moveq #2,d0
}
    e532:	\-------> movea.l (sp)+,a2
    e534:	          movea.l (sp)+,a6
    e536:	          lea 32(sp),sp
    e53a:	          rts

0000e53c <builtIn_launch>:

builtIn(launch)
{
    e53c:	          lea -20(sp),sp
    e540:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    e542:	          movea.l 32(sp),a0
    e546:	          move.l 24(a0),d0
    e54a:	          move.l d0,-(sp)
    e54c:	          jsr 130b0 <getTextFromAnyVar>
    e552:	          addq.l #4,sp
    e554:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    e558:	      /-- bne.s e560 <builtIn_launch+0x24>
    e55a:	      |   moveq #1,d0
    e55c:	/-----|-- bra.w e68e <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    e560:	|     \-> move.l 20(sp),-(sp)
    e564:	|         jsr 2fe <encodeFilename>
    e56a:	|         addq.l #4,sp
    e56c:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    e570:	|         moveq #24,d0
    e572:	|         add.l 32(sp),d0
    e576:	|         move.l d0,-(sp)
    e578:	|         jsr 1345e <trimStack>
    e57e:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    e580:	|         movea.l 20(sp),a0
    e584:	|         move.b (a0),d0
    e586:	|         cmpi.b #104,d0
    e58a:	|  /----- bne.s e5f4 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    e58c:	|  |      movea.l 20(sp),a0
    e590:	|  |      addq.l #1,a0
    e592:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    e594:	|  |      cmpi.b #116,d0
    e598:	|  +----- bne.s e5f4 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    e59a:	|  |      movea.l 20(sp),a0
    e59e:	|  |      addq.l #2,a0
    e5a0:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    e5a2:	|  |      cmpi.b #116,d0
    e5a6:	|  +----- bne.s e5f4 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    e5a8:	|  |      movea.l 20(sp),a0
    e5ac:	|  |      addq.l #3,a0
    e5ae:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    e5b0:	|  |      cmpi.b #112,d0
    e5b4:	|  +----- bne.s e5f4 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    e5b6:	|  |      movea.l 20(sp),a0
    e5ba:	|  |      addq.l #4,a0
    e5bc:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    e5be:	|  |      cmpi.b #58,d0
    e5c2:	|  |  /-- beq.s e5e0 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    e5c4:	|  |  |   movea.l 20(sp),a0
    e5c8:	|  |  |   addq.l #4,a0
    e5ca:	|  |  |   move.b (a0),d0
    e5cc:	|  |  |   cmpi.b #115,d0
    e5d0:	|  +--|-- bne.s e5f4 <builtIn_launch+0xb8>
    e5d2:	|  |  |   movea.l 20(sp),a0
    e5d6:	|  |  |   addq.l #5,a0
    e5d8:	|  |  |   move.b (a0),d0
    e5da:	|  |  |   cmpi.b #58,d0
    e5de:	|  +--|-- bne.s e5f4 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    e5e0:	|  |  \-> move.l 20(sp),-(sp)
    e5e4:	|  |      jsr b8 <copyString>
    e5ea:	|  |      addq.l #4,sp
    e5ec:	|  |      move.l d0,188b8 <launchMe>
    e5f2:	|  |  /-- bra.s e646 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    e5f4:	|  \--|-> move.l 1870a <gamePath>,d0
    e5fa:	|     |   pea 170fb <PutChar+0x1b05>
    e600:	|     |   move.l d0,-(sp)
    e602:	|     |   jsr 12006 <joinStrings>
    e608:	|     |   addq.l #8,sp
    e60a:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    e60e:	|     |   move.l 16(sp),-(sp)
    e612:	|     |   move.l 16(sp),-(sp)
    e616:	|     |   jsr 12006 <joinStrings>
    e61c:	|     |   addq.l #8,sp
    e61e:	|     |   move.l d0,188b8 <launchMe>
        FreeVec(newText);
    e624:	|     |   move.l 16(sp),8(sp)
    e62a:	|     |   move.l 187a2 <SysBase>,d0
    e630:	|     |   movea.l d0,a6
    e632:	|     |   movea.l 8(sp),a1
    e636:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    e63a:	|     |   move.l 188b8 <launchMe>,d0
    e640:	|     +-- bne.s e646 <builtIn_launch+0x10a>
    e642:	|     |   moveq #1,d0
    e644:	+-----|-- bra.s e68e <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    e646:	|     \-> move.l 20(sp),4(sp)
    e64c:	|         move.l 187a2 <SysBase>,d0
    e652:	|         movea.l d0,a6
    e654:	|         movea.l 4(sp),a1
    e658:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    e65c:	|         clr.l -(sp)
    e65e:	|         jsr 2a6a <setGraphicsWindow>
    e664:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    e666:	|         moveq #28,d0
    e668:	|         add.l 32(sp),d0
    e66c:	|         pea 1 <_start+0x1>
    e670:	|         pea 1 <_start+0x1>
    e674:	|         move.l d0,-(sp)
    e676:	|         jsr 133cc <setVariable>
    e67c:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    e680:	|         moveq #28,d0
    e682:	|         add.l 32(sp),d0
    e686:	|         move.l d0,188bc <launchResult>

    return BR_KEEP_AND_PAUSE;
    e68c:	|         moveq #0,d0
}
    e68e:	\-------> movea.l (sp)+,a6
    e690:	          lea 20(sp),sp
    e694:	          rts

0000e696 <builtIn_pause>:

builtIn(pause)
{
    e696:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e698:	       movea.l 12(sp),a0
    e69c:	       move.l 24(a0),d0
    e6a0:	       move.l d0,-(sp)
    e6a2:	       pea 1 <_start+0x1>
    e6a6:	       move.l sp,d0
    e6a8:	       addq.l #8,d0
    e6aa:	       move.l d0,-(sp)
    e6ac:	       jsr 12ada <getValueType>
    e6b2:	       lea 12(sp),sp
    e6b6:	       tst.w d0
    e6b8:	   /-- bne.s e6be <builtIn_pause+0x28>
    e6ba:	   |   moveq #1,d0
    e6bc:	/--|-- bra.s e6ec <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    e6be:	|  \-> moveq #24,d0
    e6c0:	|      add.l 12(sp),d0
    e6c4:	|      move.l d0,-(sp)
    e6c6:	|      jsr 1345e <trimStack>
    e6cc:	|      addq.l #4,sp
	if (theTime > 0) {
    e6ce:	|      move.l (sp),d0
    e6d0:	|  /-- ble.s e6ea <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    e6d2:	|  |   move.l (sp),d0
    e6d4:	|  |   subq.l #1,d0
    e6d6:	|  |   movea.l 12(sp),a0
    e6da:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    e6de:	|  |   movea.l 12(sp),a0
    e6e2:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    e6e6:	|  |   moveq #0,d0
    e6e8:	+--|-- bra.s e6ec <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    e6ea:	|  \-> moveq #2,d0
}
    e6ec:	\----> addq.l #4,sp
    e6ee:	       rts

0000e6f0 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    e6f0:	jsr 31be <completeTimers>
	return BR_CONTINUE;
    e6f6:	moveq #2,d0
}
    e6f8:	rts

0000e6fa <builtIn_callEvent>:

builtIn(callEvent)
{
    e6fa:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e6fe:	       movea.l 20(sp),a0
    e702:	       move.l 24(a0),d0
    e706:	       move.l d0,-(sp)
    e708:	       pea 7 <_start+0x7>
    e70c:	       lea 8(sp),a0
    e710:	       move.l a0,-(sp)
    e712:	       jsr 12ada <getValueType>
    e718:	       lea 12(sp),sp
    e71c:	       tst.w d0
    e71e:	   /-- bne.s e726 <builtIn_callEvent+0x2c>
    e720:	   |   moveq #1,d0
    e722:	/--|-- bra.w e7bc <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    e726:	|  \-> moveq #24,d0
    e728:	|      add.l 20(sp),d0
    e72c:	|      move.l d0,-(sp)
    e72e:	|      jsr 1345e <trimStack>
    e734:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e736:	|      movea.l 20(sp),a0
    e73a:	|      move.l 24(a0),d0
    e73e:	|      move.l d0,-(sp)
    e740:	|      pea 7 <_start+0x7>
    e744:	|      moveq #12,d0
    e746:	|      add.l sp,d0
    e748:	|      move.l d0,-(sp)
    e74a:	|      jsr 12ada <getValueType>
    e750:	|      lea 12(sp),sp
    e754:	|      tst.w d0
    e756:	|  /-- bne.s e75c <builtIn_callEvent+0x62>
    e758:	|  |   moveq #1,d0
    e75a:	+--|-- bra.s e7bc <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    e75c:	|  \-> moveq #24,d0
    e75e:	|      add.l 20(sp),d0
    e762:	|      move.l d0,-(sp)
    e764:	|      jsr 1345e <trimStack>
    e76a:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    e76c:	|      move.l (sp),d1
    e76e:	|      move.l 4(sp),d0
    e772:	|      move.l d1,-(sp)
    e774:	|      move.l d0,-(sp)
    e776:	|      jsr b944 <getCombinationFunction>
    e77c:	|      addq.l #8,sp
    e77e:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    e782:	|  /-- beq.s e7a2 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    e784:	|  |   moveq #28,d0
    e786:	|  |   add.l 20(sp),d0
    e78a:	|  |   move.l 8(sp),-(sp)
    e78e:	|  |   pea 2 <_start+0x2>
    e792:	|  |   move.l d0,-(sp)
    e794:	|  |   jsr 133cc <setVariable>
    e79a:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    e79e:	|  |   moveq #4,d0
    e7a0:	+--|-- bra.s e7bc <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    e7a2:	|  \-> moveq #28,d0
    e7a4:	|      add.l 20(sp),d0
    e7a8:	|      clr.l -(sp)
    e7aa:	|      pea 1 <_start+0x1>
    e7ae:	|      move.l d0,-(sp)
    e7b0:	|      jsr 133cc <setVariable>
    e7b6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e7ba:	|      moveq #2,d0
}
    e7bc:	\----> lea 12(sp),sp
    e7c0:	       rts

0000e7c2 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    e7c2:	move.w #1,188c8 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    e7ca:	moveq #2,d0
}
    e7cc:	rts

0000e7ce <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    e7ce:	moveq #24,d0
    e7d0:	add.l 8(sp),d0
    e7d4:	move.l d0,-(sp)
    e7d6:	jsr 1345e <trimStack>
    e7dc:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    e7de:	pea 170fd <PutChar+0x1b07>
    e7e4:	jsr 14b22 <KPrintF>
    e7ea:	addq.l #4,sp
	return BR_CONTINUE;
    e7ec:	moveq #2,d0
}
    e7ee:	rts

0000e7f0 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    e7f0:	pea 170fd <PutChar+0x1b07>
    e7f6:	jsr 14b22 <KPrintF>
    e7fc:	addq.l #4,sp
	return BR_CONTINUE;
    e7fe:	moveq #2,d0
}
    e800:	rts

0000e802 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    e802:	pea 170fd <PutChar+0x1b07>
    e808:	jsr 14b22 <KPrintF>
    e80e:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    e810:	moveq #2,d0
}
    e812:	rts

0000e814 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    e814:	pea 170fd <PutChar+0x1b07>
    e81a:	jsr 14b22 <KPrintF>
    e820:	addq.l #4,sp
	return BR_CONTINUE;
    e822:	moveq #2,d0
}
    e824:	rts

0000e826 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    e826:	pea 170fd <PutChar+0x1b07>
    e82c:	jsr 14b22 <KPrintF>
    e832:	addq.l #4,sp
	return BR_CONTINUE;
    e834:	moveq #2,d0
}
    e836:	rts

0000e838 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    e838:	pea 170fd <PutChar+0x1b07>
    e83e:	jsr 14b22 <KPrintF>
    e844:	addq.l #4,sp
	return BR_CONTINUE;
    e846:	moveq #2,d0
}
    e848:	rts

0000e84a <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    e84a:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e84e:	       movea.l 20(sp),a0
    e852:	       move.l 24(a0),d0
    e856:	       move.l d0,-(sp)
    e858:	       pea 1 <_start+0x1>
    e85c:	       moveq #16,d0
    e85e:	       add.l sp,d0
    e860:	       move.l d0,-(sp)
    e862:	       jsr 12ada <getValueType>
    e868:	       lea 12(sp),sp
    e86c:	       tst.w d0
    e86e:	   /-- bne.s e876 <builtIn_startMusic+0x2c>
    e870:	   |   moveq #1,d0
    e872:	/--|-- bra.w e916 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    e876:	|  \-> moveq #24,d0
    e878:	|      add.l 20(sp),d0
    e87c:	|      move.l d0,-(sp)
    e87e:	|      jsr 1345e <trimStack>
    e884:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e886:	|      movea.l 20(sp),a0
    e88a:	|      move.l 24(a0),d0
    e88e:	|      move.l d0,-(sp)
    e890:	|      pea 1 <_start+0x1>
    e894:	|      moveq #12,d0
    e896:	|      add.l sp,d0
    e898:	|      move.l d0,-(sp)
    e89a:	|      jsr 12ada <getValueType>
    e8a0:	|      lea 12(sp),sp
    e8a4:	|      tst.w d0
    e8a6:	|  /-- bne.s e8ac <builtIn_startMusic+0x62>
    e8a8:	|  |   moveq #1,d0
    e8aa:	+--|-- bra.s e916 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    e8ac:	|  \-> moveq #24,d0
    e8ae:	|      add.l 20(sp),d0
    e8b2:	|      move.l d0,-(sp)
    e8b4:	|      jsr 1345e <trimStack>
    e8ba:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e8bc:	|      movea.l 20(sp),a0
    e8c0:	|      move.l 24(a0),d0
    e8c4:	|      move.l d0,-(sp)
    e8c6:	|      pea 5 <_start+0x5>
    e8ca:	|      lea 8(sp),a0
    e8ce:	|      move.l a0,-(sp)
    e8d0:	|      jsr 12ada <getValueType>
    e8d6:	|      lea 12(sp),sp
    e8da:	|      tst.w d0
    e8dc:	|  /-- bne.s e8e2 <builtIn_startMusic+0x98>
    e8de:	|  |   moveq #1,d0
    e8e0:	+--|-- bra.s e916 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    e8e2:	|  \-> moveq #24,d0
    e8e4:	|      add.l 20(sp),d0
    e8e8:	|      move.l d0,-(sp)
    e8ea:	|      jsr 1345e <trimStack>
    e8f0:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    e8f2:	|      movea.l 8(sp),a0
    e8f6:	|      move.l 4(sp),d1
    e8fa:	|      move.l (sp),d0
    e8fc:	|      move.l a0,-(sp)
    e8fe:	|      move.l d1,-(sp)
    e900:	|      move.l d0,-(sp)
    e902:	|      jsr b55c <playMOD>
    e908:	|      lea 12(sp),sp
    e90c:	|      tst.w d0
    e90e:	|  /-- bne.s e914 <builtIn_startMusic+0xca>
    e910:	|  |   moveq #2,d0
    e912:	+--|-- bra.s e916 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    e914:	|  \-> moveq #2,d0
}
    e916:	\----> lea 12(sp),sp
    e91a:	       rts

0000e91c <builtIn_stopMusic>:

builtIn(stopMusic)
{
    e91c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e91e:	       movea.l 12(sp),a0
    e922:	       move.l 24(a0),d0
    e926:	       move.l d0,-(sp)
    e928:	       pea 1 <_start+0x1>
    e92c:	       move.l sp,d0
    e92e:	       addq.l #8,d0
    e930:	       move.l d0,-(sp)
    e932:	       jsr 12ada <getValueType>
    e938:	       lea 12(sp),sp
    e93c:	       tst.w d0
    e93e:	   /-- bne.s e944 <builtIn_stopMusic+0x28>
    e940:	   |   moveq #1,d0
    e942:	/--|-- bra.s e962 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    e944:	|  \-> moveq #24,d0
    e946:	|      add.l 12(sp),d0
    e94a:	|      move.l d0,-(sp)
    e94c:	|      jsr 1345e <trimStack>
    e952:	|      addq.l #4,sp
	stopMOD (v);
    e954:	|      move.l (sp),d0
    e956:	|      move.l d0,-(sp)
    e958:	|      jsr b5f8 <stopMOD>
    e95e:	|      addq.l #4,sp
	return BR_CONTINUE;
    e960:	|      moveq #2,d0
}
    e962:	\----> addq.l #4,sp
    e964:	       rts

0000e966 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    e966:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e968:	       movea.l 16(sp),a0
    e96c:	       move.l 24(a0),d0
    e970:	       move.l d0,-(sp)
    e972:	       pea 1 <_start+0x1>
    e976:	       move.l sp,d0
    e978:	       addq.l #8,d0
    e97a:	       move.l d0,-(sp)
    e97c:	       jsr 12ada <getValueType>
    e982:	       lea 12(sp),sp
    e986:	       tst.w d0
    e988:	   /-- bne.s e98e <builtIn_setMusicVolume+0x28>
    e98a:	   |   moveq #1,d0
    e98c:	/--|-- bra.s e9e8 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    e98e:	|  \-> moveq #24,d0
    e990:	|      add.l 16(sp),d0
    e994:	|      move.l d0,-(sp)
    e996:	|      jsr 1345e <trimStack>
    e99c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e99e:	|      movea.l 16(sp),a0
    e9a2:	|      move.l 24(a0),d0
    e9a6:	|      move.l d0,-(sp)
    e9a8:	|      pea 1 <_start+0x1>
    e9ac:	|      moveq #12,d0
    e9ae:	|      add.l sp,d0
    e9b0:	|      move.l d0,-(sp)
    e9b2:	|      jsr 12ada <getValueType>
    e9b8:	|      lea 12(sp),sp
    e9bc:	|      tst.w d0
    e9be:	|  /-- bne.s e9c4 <builtIn_setMusicVolume+0x5e>
    e9c0:	|  |   moveq #1,d0
    e9c2:	+--|-- bra.s e9e8 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    e9c4:	|  \-> moveq #24,d0
    e9c6:	|      add.l 16(sp),d0
    e9ca:	|      move.l d0,-(sp)
    e9cc:	|      jsr 1345e <trimStack>
    e9d2:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    e9d4:	|      move.l (sp),d1
    e9d6:	|      move.l 4(sp),d0
    e9da:	|      move.l d1,-(sp)
    e9dc:	|      move.l d0,-(sp)
    e9de:	|      jsr b5de <setMusicVolume>
    e9e4:	|      addq.l #8,sp
	return BR_CONTINUE;
    e9e6:	|      moveq #2,d0
}
    e9e8:	\----> addq.l #8,sp
    e9ea:	       rts

0000e9ec <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    e9ec:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9ee:	       movea.l 12(sp),a0
    e9f2:	       move.l 24(a0),d0
    e9f6:	       move.l d0,-(sp)
    e9f8:	       pea 1 <_start+0x1>
    e9fc:	       move.l sp,d0
    e9fe:	       addq.l #8,d0
    ea00:	       move.l d0,-(sp)
    ea02:	       jsr 12ada <getValueType>
    ea08:	       lea 12(sp),sp
    ea0c:	       tst.w d0
    ea0e:	   /-- bne.s ea14 <builtIn_setDefaultMusicVolume+0x28>
    ea10:	   |   moveq #1,d0
    ea12:	/--|-- bra.s ea32 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    ea14:	|  \-> moveq #24,d0
    ea16:	|      add.l 12(sp),d0
    ea1a:	|      move.l d0,-(sp)
    ea1c:	|      jsr 1345e <trimStack>
    ea22:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    ea24:	|      move.l (sp),d0
    ea26:	|      move.l d0,-(sp)
    ea28:	|      jsr b5c2 <setDefaultMusicVolume>
    ea2e:	|      addq.l #4,sp
	return BR_CONTINUE;
    ea30:	|      moveq #2,d0
}
    ea32:	\----> addq.l #4,sp
    ea34:	       rts

0000ea36 <builtIn_playSound>:

builtIn(playSound)
{
    ea36:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea38:	       movea.l 12(sp),a0
    ea3c:	       move.l 24(a0),d0
    ea40:	       move.l d0,-(sp)
    ea42:	       pea 5 <_start+0x5>
    ea46:	       move.l sp,d0
    ea48:	       addq.l #8,d0
    ea4a:	       move.l d0,-(sp)
    ea4c:	       jsr 12ada <getValueType>
    ea52:	       lea 12(sp),sp
    ea56:	       tst.w d0
    ea58:	   /-- bne.s ea5e <builtIn_playSound+0x28>
    ea5a:	   |   moveq #1,d0
    ea5c:	/--|-- bra.s ea86 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    ea5e:	|  \-> moveq #24,d0
    ea60:	|      add.l 12(sp),d0
    ea64:	|      move.l d0,-(sp)
    ea66:	|      jsr 1345e <trimStack>
    ea6c:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    ea6e:	|      move.l (sp),d0
    ea70:	|      clr.l -(sp)
    ea72:	|      move.l d0,-(sp)
    ea74:	|      jsr b5e6 <startSound>
    ea7a:	|      addq.l #8,sp
    ea7c:	|      tst.w d0
    ea7e:	|  /-- bne.s ea84 <builtIn_playSound+0x4e>
    ea80:	|  |   moveq #2,d0
    ea82:	+--|-- bra.s ea86 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    ea84:	|  \-> moveq #2,d0
}
    ea86:	\----> addq.l #4,sp
    ea88:	       rts

0000ea8a <builtIn_loopSound>:

builtIn(loopSound)
{
    ea8a:	             lea -28(sp),sp
    ea8e:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    ea90:	             tst.l 36(sp)
    ea94:	         /-- bgt.s eaaa <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    ea96:	         |   pea 17120 <PutChar+0x1b2a>
    ea9c:	         |   jsr 14b22 <KPrintF>
    eaa2:	         |   addq.l #4,sp
		return BR_ERROR;
    eaa4:	         |   moveq #1,d0
    eaa6:	/--------|-- bra.w ec66 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    eaaa:	|        \-> moveq #1,d0
    eaac:	|            cmp.l 36(sp),d0
    eab0:	|     /----- blt.s eb0c <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    eab2:	|     |      movea.l 40(sp),a0
    eab6:	|     |      move.l 24(a0),d0
    eaba:	|     |      move.l d0,-(sp)
    eabc:	|     |      pea 5 <_start+0x5>
    eac0:	|     |      lea 16(sp),a0
    eac4:	|     |      move.l a0,-(sp)
    eac6:	|     |      jsr 12ada <getValueType>
    eacc:	|     |      lea 12(sp),sp
    ead0:	|     |      tst.w d0
    ead2:	|     |  /-- bne.s eada <builtIn_loopSound+0x50>
    ead4:	|     |  |   moveq #1,d0
    ead6:	+-----|--|-- bra.w ec66 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    eada:	|     |  \-> moveq #24,d0
    eadc:	|     |      add.l 40(sp),d0
    eae0:	|     |      move.l d0,-(sp)
    eae2:	|     |      jsr 1345e <trimStack>
    eae8:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    eaea:	|     |      move.l 8(sp),d0
    eaee:	|     |      pea 1 <_start+0x1>
    eaf2:	|     |      move.l d0,-(sp)
    eaf4:	|     |      jsr b5e6 <startSound>
    eafa:	|     |      addq.l #8,sp
    eafc:	|     |      tst.w d0
    eafe:	|     |  /-- bne.s eb06 <builtIn_loopSound+0x7c>
    eb00:	|     |  |   moveq #2,d0
    eb02:	+-----|--|-- bra.w ec66 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    eb06:	|     |  \-> moveq #2,d0
    eb08:	+-----|----- bra.w ec66 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    eb0c:	|     \----> moveq #2,d1
    eb0e:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    eb12:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    eb16:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    eb1a:	|            movea.l 40(sp),a0
    eb1e:	|            movea.l 24(a0),a0
    eb22:	|            move.l (a0),d0
    eb24:	|            moveq #5,d1
    eb26:	|            cmp.l d0,d1
    eb28:	|  /-------- beq.w ec00 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    eb2c:	|  |         movea.l 40(sp),a0
    eb30:	|  |         move.l 24(a0),d0
    eb34:	|  |         move.l d0,-(sp)
    eb36:	|  |         pea 1 <_start+0x1>
    eb3a:	|  |         lea 12(sp),a0
    eb3e:	|  |         move.l a0,-(sp)
    eb40:	|  |         jsr 12ada <getValueType>
    eb46:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    eb4a:	|  |         moveq #24,d0
    eb4c:	|  |         add.l 40(sp),d0
    eb50:	|  |         move.l d0,-(sp)
    eb52:	|  |         jsr 1345e <trimStack>
    eb58:	|  |         addq.l #4,sp
			numParams--;
    eb5a:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    eb5e:	|  +-------- bra.w ec00 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    eb62:	|  |  /----> movea.l 40(sp),a0
    eb66:	|  |  |      move.l 24(a0),d0
    eb6a:	|  |  |      move.l d0,-(sp)
    eb6c:	|  |  |      pea 5 <_start+0x5>
    eb70:	|  |  |      lea 16(sp),a0
    eb74:	|  |  |      move.l a0,-(sp)
    eb76:	|  |  |      jsr 12ada <getValueType>
    eb7c:	|  |  |      lea 12(sp),sp
    eb80:	|  |  |      tst.w d0
    eb82:	|  |  |  /-- bne.s eb98 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    eb84:	|  |  |  |   pea 1715e <PutChar+0x1b68>
    eb8a:	|  |  |  |   jsr 14b22 <KPrintF>
    eb90:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    eb92:	|  |  |  |   moveq #1,d0
    eb94:	+--|--|--|-- bra.w ec66 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    eb98:	|  |  |  \-> moveq #20,d0
    eb9a:	|  |  |      move.l d0,20(sp)
    eb9e:	|  |  |      clr.l 16(sp)
    eba2:	|  |  |      move.l 187a2 <SysBase>,d0
    eba8:	|  |  |      movea.l d0,a6
    ebaa:	|  |  |      move.l 20(sp),d0
    ebae:	|  |  |      move.l 16(sp),d1
    ebb2:	|  |  |      jsr -684(a6)
    ebb6:	|  |  |      move.l d0,12(sp)
    ebba:	|  |  |      move.l 12(sp),d0
    ebbe:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    ebc2:	|  |  |  /-- bne.s ebca <builtIn_loopSound+0x140>
    ebc4:	|  |  |  |   moveq #1,d0
    ebc6:	+--|--|--|-- bra.w ec66 <builtIn_loopSound+0x1dc>

			s->next = old;
    ebca:	|  |  |  \-> movea.l 28(sp),a0
    ebce:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    ebd4:	|  |  |      movea.l 28(sp),a0
    ebd8:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    ebdc:	|  |  |      move.l 8(sp),d0
    ebe0:	|  |  |      movea.l 28(sp),a0
    ebe4:	|  |  |      move.l d0,(a0)
			old = s;
    ebe6:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    ebec:	|  |  |      moveq #24,d0
    ebee:	|  |  |      add.l 40(sp),d0
    ebf2:	|  |  |      move.l d0,-(sp)
    ebf4:	|  |  |      jsr 1345e <trimStack>
    ebfa:	|  |  |      addq.l #4,sp
			numParams--;
    ebfc:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    ec00:	|  \--|----> tst.l 36(sp)
    ec04:	|     \----- bne.w eb62 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    ec08:	|        /-- bra.s ec14 <builtIn_loopSound+0x18a>
    ec0a:	|     /--|-> movea.l 28(sp),a0
    ec0e:	|     |  |   move.l 4(a0),28(sp)
    ec14:	|     |  \-> movea.l 28(sp),a0
    ec18:	|     |      move.l 4(a0),d0
    ec1c:	|     \----- bne.s ec0a <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    ec1e:	|            move.l 4(sp),d0
    ec22:	|            moveq #1,d1
    ec24:	|            cmp.l d0,d1
    ec26:	|     /----- bge.s ec3e <builtIn_loopSound+0x1b4>
			s->next = old;
    ec28:	|     |      movea.l 28(sp),a0
    ec2c:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    ec32:	|     |      movea.l 24(sp),a0
    ec36:	|     |      move.l 28(sp),8(a0)
    ec3c:	|     |  /-- bra.s ec4e <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    ec3e:	|     \--|-> move.l 4(sp),d0
    ec42:	|        +-- beq.s ec4e <builtIn_loopSound+0x1c4>
			s->next = s;
    ec44:	|        |   movea.l 28(sp),a0
    ec48:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    ec4e:	|        \-> movea.l 24(sp),a0
    ec52:	|            moveq #-1,d0
    ec54:	|            move.l d0,16(a0)
		playSoundList(old);
    ec58:	|            move.l 24(sp),-(sp)
    ec5c:	|            jsr b560 <playSoundList>
    ec62:	|            addq.l #4,sp
		return BR_CONTINUE;
    ec64:	|            moveq #2,d0
	}
}
    ec66:	\----------> movea.l (sp)+,a6
    ec68:	             lea 28(sp),sp
    ec6c:	             rts

0000ec6e <builtIn_stopSound>:

builtIn(stopSound)
{
    ec6e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec70:	       movea.l 12(sp),a0
    ec74:	       move.l 24(a0),d0
    ec78:	       move.l d0,-(sp)
    ec7a:	       pea 5 <_start+0x5>
    ec7e:	       move.l sp,d0
    ec80:	       addq.l #8,d0
    ec82:	       move.l d0,-(sp)
    ec84:	       jsr 12ada <getValueType>
    ec8a:	       lea 12(sp),sp
    ec8e:	       tst.w d0
    ec90:	   /-- bne.s ec96 <builtIn_stopSound+0x28>
    ec92:	   |   moveq #1,d0
    ec94:	/--|-- bra.s ecb4 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    ec96:	|  \-> moveq #24,d0
    ec98:	|      add.l 12(sp),d0
    ec9c:	|      move.l d0,-(sp)
    ec9e:	|      jsr 1345e <trimStack>
    eca4:	|      addq.l #4,sp
	huntKillSound (v);
    eca6:	|      move.l (sp),d0
    eca8:	|      move.l d0,-(sp)
    ecaa:	|      jsr b558 <huntKillSound>
    ecb0:	|      addq.l #4,sp
	return BR_CONTINUE;
    ecb2:	|      moveq #2,d0
}
    ecb4:	\----> addq.l #4,sp
    ecb6:	       rts

0000ecb8 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    ecb8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecba:	       movea.l 12(sp),a0
    ecbe:	       move.l 24(a0),d0
    ecc2:	       move.l d0,-(sp)
    ecc4:	       pea 1 <_start+0x1>
    ecc8:	       move.l sp,d0
    ecca:	       addq.l #8,d0
    eccc:	       move.l d0,-(sp)
    ecce:	       jsr 12ada <getValueType>
    ecd4:	       lea 12(sp),sp
    ecd8:	       tst.w d0
    ecda:	   /-- bne.s ece0 <builtIn_setDefaultSoundVolume+0x28>
    ecdc:	   |   moveq #1,d0
    ecde:	/--|-- bra.s ecfe <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    ece0:	|  \-> moveq #24,d0
    ece2:	|      add.l 12(sp),d0
    ece6:	|      move.l d0,-(sp)
    ece8:	|      jsr 1345e <trimStack>
    ecee:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    ecf0:	|      move.l (sp),d0
    ecf2:	|      move.l d0,-(sp)
    ecf4:	|      jsr b5ce <setDefaultSoundVolume>
    ecfa:	|      addq.l #4,sp
	return BR_CONTINUE;
    ecfc:	|      moveq #2,d0
}
    ecfe:	\----> addq.l #4,sp
    ed00:	       rts

0000ed02 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    ed02:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed04:	       movea.l 16(sp),a0
    ed08:	       move.l 24(a0),d0
    ed0c:	       move.l d0,-(sp)
    ed0e:	       pea 1 <_start+0x1>
    ed12:	       move.l sp,d0
    ed14:	       addq.l #8,d0
    ed16:	       move.l d0,-(sp)
    ed18:	       jsr 12ada <getValueType>
    ed1e:	       lea 12(sp),sp
    ed22:	       tst.w d0
    ed24:	   /-- bne.s ed2a <builtIn_setSoundVolume+0x28>
    ed26:	   |   moveq #1,d0
    ed28:	/--|-- bra.s ed84 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    ed2a:	|  \-> moveq #24,d0
    ed2c:	|      add.l 16(sp),d0
    ed30:	|      move.l d0,-(sp)
    ed32:	|      jsr 1345e <trimStack>
    ed38:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed3a:	|      movea.l 16(sp),a0
    ed3e:	|      move.l 24(a0),d0
    ed42:	|      move.l d0,-(sp)
    ed44:	|      pea 5 <_start+0x5>
    ed48:	|      moveq #12,d0
    ed4a:	|      add.l sp,d0
    ed4c:	|      move.l d0,-(sp)
    ed4e:	|      jsr 12ada <getValueType>
    ed54:	|      lea 12(sp),sp
    ed58:	|      tst.w d0
    ed5a:	|  /-- bne.s ed60 <builtIn_setSoundVolume+0x5e>
    ed5c:	|  |   moveq #1,d0
    ed5e:	+--|-- bra.s ed84 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    ed60:	|  \-> moveq #24,d0
    ed62:	|      add.l 16(sp),d0
    ed66:	|      move.l d0,-(sp)
    ed68:	|      jsr 1345e <trimStack>
    ed6e:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    ed70:	|      move.l (sp),d1
    ed72:	|      move.l 4(sp),d0
    ed76:	|      move.l d1,-(sp)
    ed78:	|      move.l d0,-(sp)
    ed7a:	|      jsr b5e2 <setSoundVolume>
    ed80:	|      addq.l #8,sp
	return BR_CONTINUE;
    ed82:	|      moveq #2,d0
}
    ed84:	\----> addq.l #8,sp
    ed86:	       rts

0000ed88 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    ed88:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed8c:	       movea.l 20(sp),a0
    ed90:	       move.l 24(a0),d0
    ed94:	       move.l d0,-(sp)
    ed96:	       pea 1 <_start+0x1>
    ed9a:	       moveq #12,d0
    ed9c:	       add.l sp,d0
    ed9e:	       move.l d0,-(sp)
    eda0:	       jsr 12ada <getValueType>
    eda6:	       lea 12(sp),sp
    edaa:	       tst.w d0
    edac:	   /-- bne.s edb4 <builtIn_setSoundLoopPoints+0x2c>
    edae:	   |   moveq #1,d0
    edb0:	/--|-- bra.w ee4c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    edb4:	|  \-> moveq #24,d0
    edb6:	|      add.l 20(sp),d0
    edba:	|      move.l d0,-(sp)
    edbc:	|      jsr 1345e <trimStack>
    edc2:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edc4:	|      movea.l 20(sp),a0
    edc8:	|      move.l 24(a0),d0
    edcc:	|      move.l d0,-(sp)
    edce:	|      pea 1 <_start+0x1>
    edd2:	|      lea 8(sp),a0
    edd6:	|      move.l a0,-(sp)
    edd8:	|      jsr 12ada <getValueType>
    edde:	|      lea 12(sp),sp
    ede2:	|      tst.w d0
    ede4:	|  /-- bne.s edea <builtIn_setSoundLoopPoints+0x62>
    ede6:	|  |   moveq #1,d0
    ede8:	+--|-- bra.s ee4c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    edea:	|  \-> moveq #24,d0
    edec:	|      add.l 20(sp),d0
    edf0:	|      move.l d0,-(sp)
    edf2:	|      jsr 1345e <trimStack>
    edf8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    edfa:	|      movea.l 20(sp),a0
    edfe:	|      move.l 24(a0),d0
    ee02:	|      move.l d0,-(sp)
    ee04:	|      pea 5 <_start+0x5>
    ee08:	|      moveq #16,d0
    ee0a:	|      add.l sp,d0
    ee0c:	|      move.l d0,-(sp)
    ee0e:	|      jsr 12ada <getValueType>
    ee14:	|      lea 12(sp),sp
    ee18:	|      tst.w d0
    ee1a:	|  /-- bne.s ee20 <builtIn_setSoundLoopPoints+0x98>
    ee1c:	|  |   moveq #1,d0
    ee1e:	+--|-- bra.s ee4c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    ee20:	|  \-> moveq #24,d0
    ee22:	|      add.l 20(sp),d0
    ee26:	|      move.l d0,-(sp)
    ee28:	|      jsr 1345e <trimStack>
    ee2e:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    ee30:	|      movea.l 4(sp),a0
    ee34:	|      move.l (sp),d1
    ee36:	|      move.l 8(sp),d0
    ee3a:	|      move.l a0,-(sp)
    ee3c:	|      move.l d1,-(sp)
    ee3e:	|      move.l d0,-(sp)
    ee40:	|      jsr b5da <setSoundLoop>
    ee46:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ee4a:	|      moveq #2,d0
}
    ee4c:	\----> lea 12(sp),sp
    ee50:	       rts

0000ee52 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    ee52:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    ee54:	          movea.l 12(sp),a0
    ee58:	          movea.l 24(a0),a0
    ee5c:	          move.l (a0),d0
    ee5e:	          moveq #5,d1
    ee60:	          cmp.l d0,d1
    ee62:	/-------- bne.s eea6 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    ee64:	|         movea.l 12(sp),a0
    ee68:	|         move.l 24(a0),d0
    ee6c:	|         move.l d0,-(sp)
    ee6e:	|         pea 5 <_start+0x5>
    ee72:	|         move.l sp,d0
    ee74:	|         addq.l #8,d0
    ee76:	|         move.l d0,-(sp)
    ee78:	|         jsr 12ada <getValueType>
    ee7e:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    ee82:	|         moveq #24,d0
    ee84:	|         add.l 12(sp),d0
    ee88:	|         move.l d0,-(sp)
    ee8a:	|         jsr 1345e <trimStack>
    ee90:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    ee92:	|         move.l (sp),d0
    ee94:	|         move.l d0,-(sp)
    ee96:	|         jsr 142cc <setFloor>
    ee9c:	|         addq.l #4,sp
    ee9e:	|         tst.w d0
    eea0:	|  /----- bne.s eebc <builtIn_setFloor+0x6a>
    eea2:	|  |      moveq #1,d0
    eea4:	|  |  /-- bra.s eebe <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    eea6:	\--|--|-> moveq #24,d0
    eea8:	   |  |   add.l 12(sp),d0
    eeac:	   |  |   move.l d0,-(sp)
    eeae:	   |  |   jsr 1345e <trimStack>
    eeb4:	   |  |   addq.l #4,sp
		setFloorNull ();
    eeb6:	   |  |   jsr 14a46 <setFloorNull>
	}
	return BR_CONTINUE;
    eebc:	   \--|-> moveq #2,d0
}
    eebe:	      \-> addq.l #4,sp
    eec0:	          rts

0000eec2 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    eec2:	jsr 13b64 <drawFloor>
	return BR_CONTINUE;
    eec8:	moveq #2,d0
}
    eeca:	rts

0000eecc <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    eecc:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    eece:	          movea.l 12(sp),a0
    eed2:	          movea.l 24(a0),a0
    eed6:	          move.l (a0),d0
    eed8:	          moveq #5,d1
    eeda:	          cmp.l d0,d1
    eedc:	/-------- bne.s ef20 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    eede:	|         movea.l 12(sp),a0
    eee2:	|         move.l 24(a0),d0
    eee6:	|         move.l d0,-(sp)
    eee8:	|         pea 5 <_start+0x5>
    eeec:	|         move.l sp,d0
    eeee:	|         addq.l #8,d0
    eef0:	|         move.l d0,-(sp)
    eef2:	|         jsr 12ada <getValueType>
    eef8:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    eefc:	|         moveq #24,d0
    eefe:	|         add.l 12(sp),d0
    ef02:	|         move.l d0,-(sp)
    ef04:	|         jsr 1345e <trimStack>
    ef0a:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    ef0c:	|         move.l (sp),d0
    ef0e:	|         move.l d0,-(sp)
    ef10:	|         jsr 6e2a <setZBuffer>
    ef16:	|         addq.l #4,sp
    ef18:	|         tst.w d0
    ef1a:	|  /----- bne.s ef36 <builtIn_setZBuffer+0x6a>
    ef1c:	|  |      moveq #1,d0
    ef1e:	|  |  /-- bra.s ef38 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    ef20:	\--|--|-> moveq #24,d0
    ef22:	   |  |   add.l 12(sp),d0
    ef26:	   |  |   move.l d0,-(sp)
    ef28:	   |  |   jsr 1345e <trimStack>
    ef2e:	   |  |   addq.l #4,sp
		killZBuffer ();
    ef30:	   |  |   jsr 6dd4 <killZBuffer>
	}
	return BR_CONTINUE;
    ef36:	   \--|-> moveq #2,d0
}
    ef38:	      \-> addq.l #4,sp
    ef3a:	          rts

0000ef3c <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    ef3c:	pea 17195 <PutChar+0x1b9f>
    ef42:	jsr 14b22 <KPrintF>
    ef48:	addq.l #4,sp
	return BR_CONTINUE;
    ef4a:	moveq #2,d0
}
    ef4c:	rts

0000ef4e <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef4e:	          movea.l 8(sp),a0
    ef52:	          move.l 24(a0),d0
    ef56:	          move.l d0,-(sp)
    ef58:	          pea 1 <_start+0x1>
    ef5c:	          pea 188c4 <speechMode>
    ef62:	          jsr 12ada <getValueType>
    ef68:	          lea 12(sp),sp
    ef6c:	          tst.w d0
    ef6e:	      /-- bne.s ef74 <builtIn_setSpeechMode+0x26>
    ef70:	      |   moveq #1,d0
    ef72:	/-----|-- bra.s efac <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    ef74:	|     \-> moveq #24,d0
    ef76:	|         add.l 8(sp),d0
    ef7a:	|         move.l d0,-(sp)
    ef7c:	|         jsr 1345e <trimStack>
    ef82:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    ef84:	|         move.l 188c4 <speechMode>,d0
    ef8a:	|     /-- bmi.s ef98 <builtIn_setSpeechMode+0x4a>
    ef8c:	|     |   move.l 188c4 <speechMode>,d0
    ef92:	|     |   moveq #2,d1
    ef94:	|     |   cmp.l d0,d1
    ef96:	|  /--|-- bge.s efaa <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    ef98:	|  |  \-> pea 171ae <PutChar+0x1bb8>
    ef9e:	|  |      jsr 14b22 <KPrintF>
    efa4:	|  |      addq.l #4,sp
		return BR_ERROR;
    efa6:	|  |      moveq #1,d0
    efa8:	+--|----- bra.s efac <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    efaa:	|  \----> moveq #2,d0
}
    efac:	\-------> rts

0000efae <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    efae:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    efb0:	       jsr 65dc <isThereAnySpeechGoingOn>
    efb6:	       move.l d0,(sp)
	if (i == -1) {
    efb8:	       moveq #-1,d0
    efba:	       cmp.l (sp),d0
    efbc:	/----- bne.s efd8 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    efbe:	|      moveq #28,d0
    efc0:	|      add.l 12(sp),d0
    efc4:	|      clr.l -(sp)
    efc6:	|      pea 1 <_start+0x1>
    efca:	|      move.l d0,-(sp)
    efcc:	|      jsr 133cc <setVariable>
    efd2:	|      lea 12(sp),sp
    efd6:	|  /-- bra.s eff0 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    efd8:	\--|-> moveq #28,d0
    efda:	   |   add.l 12(sp),d0
    efde:	   |   move.l (sp),-(sp)
    efe0:	   |   pea 7 <_start+0x7>
    efe4:	   |   move.l d0,-(sp)
    efe6:	   |   jsr 133cc <setVariable>
    efec:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    eff0:	   \-> moveq #2,d0
}
    eff2:	       addq.l #4,sp
    eff4:	       rts

0000eff6 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    eff6:	jsr 48fc <killSpeechTimers>
	return BR_CONTINUE;
    effc:	moveq #2,d0
}
    effe:	rts

0000f000 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    f000:	       move.l 188fe <overRegion>,d0
    f006:	/----- beq.s f030 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    f008:	|      movea.l 188fe <overRegion>,a0
    f00e:	|      movea.l 28(a0),a0
    f012:	|      move.l 4(a0),d1
    f016:	|      moveq #28,d0
    f018:	|      add.l 8(sp),d0
    f01c:	|      move.l d1,-(sp)
    f01e:	|      pea 7 <_start+0x7>
    f022:	|      move.l d0,-(sp)
    f024:	|      jsr 133cc <setVariable>
    f02a:	|      lea 12(sp),sp
    f02e:	|  /-- bra.s f048 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    f030:	\--|-> moveq #28,d0
    f032:	   |   add.l 8(sp),d0
    f036:	   |   clr.l -(sp)
    f038:	   |   pea 1 <_start+0x1>
    f03c:	   |   move.l d0,-(sp)
    f03e:	   |   jsr 133cc <setVariable>
    f044:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    f048:	   \-> moveq #2,d0
}
    f04a:	       rts

0000f04c <builtIn_rename>:

builtIn(rename)
{
    f04c:	       lea -16(sp),sp
    f050:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f052:	       movea.l 28(sp),a0
    f056:	       move.l 24(a0),d0
    f05a:	       move.l d0,-(sp)
    f05c:	       jsr 130b0 <getTextFromAnyVar>
    f062:	       addq.l #4,sp
    f064:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    f068:	   /-- bne.s f06e <builtIn_rename+0x22>
    f06a:	   |   moveq #1,d0
    f06c:	/--|-- bra.s f0e8 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    f06e:	|  \-> moveq #24,d0
    f070:	|      add.l 28(sp),d0
    f074:	|      move.l d0,-(sp)
    f076:	|      jsr 1345e <trimStack>
    f07c:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    f07e:	|      movea.l 28(sp),a0
    f082:	|      move.l 24(a0),d0
    f086:	|      move.l d0,-(sp)
    f088:	|      pea 7 <_start+0x7>
    f08c:	|      lea 12(sp),a0
    f090:	|      move.l a0,-(sp)
    f092:	|      jsr 12ada <getValueType>
    f098:	|      lea 12(sp),sp
    f09c:	|      tst.w d0
    f09e:	|  /-- bne.s f0a4 <builtIn_rename+0x58>
    f0a0:	|  |   moveq #1,d0
    f0a2:	+--|-- bra.s f0e8 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    f0a4:	|  \-> moveq #24,d0
    f0a6:	|      add.l 28(sp),d0
    f0aa:	|      move.l d0,-(sp)
    f0ac:	|      jsr 1345e <trimStack>
    f0b2:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    f0b4:	|      move.l 4(sp),d0
    f0b8:	|      move.l d0,-(sp)
    f0ba:	|      jsr b910 <findObjectType>
    f0c0:	|      addq.l #4,sp
    f0c2:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    f0c6:	|      movea.l 12(sp),a0
    f0ca:	|      move.l (a0),8(sp)
    f0ce:	|      move.l 187a2 <SysBase>,d0
    f0d4:	|      movea.l d0,a6
    f0d6:	|      movea.l 8(sp),a1
    f0da:	|      jsr -690(a6)
	o->screenName = newText;
    f0de:	|      movea.l 12(sp),a0
    f0e2:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    f0e6:	|      moveq #2,d0
}
    f0e8:	\----> movea.l (sp)+,a6
    f0ea:	       lea 16(sp),sp
    f0ee:	       rts

0000f0f0 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    f0f0:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f0f4:	          movea.l 20(sp),a0
    f0f8:	          move.l 24(a0),d0
    f0fc:	          move.l d0,-(sp)
    f0fe:	          pea 7 <_start+0x7>
    f102:	          lea 8(sp),a0
    f106:	          move.l a0,-(sp)
    f108:	          jsr 12ada <getValueType>
    f10e:	          lea 12(sp),sp
    f112:	          tst.w d0
    f114:	      /-- bne.s f11c <builtIn_getObjectX+0x2c>
    f116:	      |   moveq #1,d0
    f118:	/-----|-- bra.w f1b8 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    f11c:	|     \-> moveq #24,d0
    f11e:	|         add.l 20(sp),d0
    f122:	|         move.l d0,-(sp)
    f124:	|         jsr 1345e <trimStack>
    f12a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    f12c:	|         move.l (sp),d0
    f12e:	|         move.l d0,-(sp)
    f130:	|         jsr 8b7a <findPerson>
    f136:	|         addq.l #4,sp
    f138:	|         move.l d0,8(sp)
	if (pers) {
    f13c:	|     /-- beq.s f16a <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    f13e:	|     |   movea.l 8(sp),a0
    f142:	|     |   move.l (a0),d0
    f144:	|     |   move.l d0,-(sp)
    f146:	|     |   jsr 14ef6 <__fixsfsi>
    f14c:	|     |   addq.l #4,sp
    f14e:	|     |   move.l d0,d1
    f150:	|     |   moveq #28,d0
    f152:	|     |   add.l 20(sp),d0
    f156:	|     |   move.l d1,-(sp)
    f158:	|     |   pea 1 <_start+0x1>
    f15c:	|     |   move.l d0,-(sp)
    f15e:	|     |   jsr 133cc <setVariable>
    f164:	|     |   lea 12(sp),sp
    f168:	|  /--|-- bra.s f1b6 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    f16a:	|  |  \-> move.l (sp),d0
    f16c:	|  |      move.l d0,-(sp)
    f16e:	|  |      jsr 135a4 <getRegionForObject>
    f174:	|  |      addq.l #4,sp
    f176:	|  |      move.l d0,4(sp)
		if (la) {
    f17a:	|  |  /-- beq.s f19e <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    f17c:	|  |  |   movea.l 4(sp),a0
    f180:	|  |  |   move.l 16(a0),d1
    f184:	|  |  |   moveq #28,d0
    f186:	|  |  |   add.l 20(sp),d0
    f18a:	|  |  |   move.l d1,-(sp)
    f18c:	|  |  |   pea 1 <_start+0x1>
    f190:	|  |  |   move.l d0,-(sp)
    f192:	|  |  |   jsr 133cc <setVariable>
    f198:	|  |  |   lea 12(sp),sp
    f19c:	|  +--|-- bra.s f1b6 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    f19e:	|  |  \-> moveq #28,d0
    f1a0:	|  |      add.l 20(sp),d0
    f1a4:	|  |      clr.l -(sp)
    f1a6:	|  |      pea 1 <_start+0x1>
    f1aa:	|  |      move.l d0,-(sp)
    f1ac:	|  |      jsr 133cc <setVariable>
    f1b2:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    f1b6:	|  \----> moveq #2,d0
}
    f1b8:	\-------> lea 12(sp),sp
    f1bc:	          rts

0000f1be <builtIn_getObjectY>:

builtIn (getObjectY)
{
    f1be:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f1c2:	          movea.l 20(sp),a0
    f1c6:	          move.l 24(a0),d0
    f1ca:	          move.l d0,-(sp)
    f1cc:	          pea 7 <_start+0x7>
    f1d0:	          lea 8(sp),a0
    f1d4:	          move.l a0,-(sp)
    f1d6:	          jsr 12ada <getValueType>
    f1dc:	          lea 12(sp),sp
    f1e0:	          tst.w d0
    f1e2:	      /-- bne.s f1ea <builtIn_getObjectY+0x2c>
    f1e4:	      |   moveq #1,d0
    f1e6:	/-----|-- bra.w f288 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    f1ea:	|     \-> moveq #24,d0
    f1ec:	|         add.l 20(sp),d0
    f1f0:	|         move.l d0,-(sp)
    f1f2:	|         jsr 1345e <trimStack>
    f1f8:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    f1fa:	|         move.l (sp),d0
    f1fc:	|         move.l d0,-(sp)
    f1fe:	|         jsr 8b7a <findPerson>
    f204:	|         addq.l #4,sp
    f206:	|         move.l d0,8(sp)
	if (pers) {
    f20a:	|     /-- beq.s f23a <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    f20c:	|     |   movea.l 8(sp),a0
    f210:	|     |   move.l 4(a0),d0
    f214:	|     |   move.l d0,-(sp)
    f216:	|     |   jsr 14ef6 <__fixsfsi>
    f21c:	|     |   addq.l #4,sp
    f21e:	|     |   move.l d0,d1
    f220:	|     |   moveq #28,d0
    f222:	|     |   add.l 20(sp),d0
    f226:	|     |   move.l d1,-(sp)
    f228:	|     |   pea 1 <_start+0x1>
    f22c:	|     |   move.l d0,-(sp)
    f22e:	|     |   jsr 133cc <setVariable>
    f234:	|     |   lea 12(sp),sp
    f238:	|  /--|-- bra.s f286 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    f23a:	|  |  \-> move.l (sp),d0
    f23c:	|  |      move.l d0,-(sp)
    f23e:	|  |      jsr 135a4 <getRegionForObject>
    f244:	|  |      addq.l #4,sp
    f246:	|  |      move.l d0,4(sp)
		if (la) {
    f24a:	|  |  /-- beq.s f26e <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    f24c:	|  |  |   movea.l 4(sp),a0
    f250:	|  |  |   move.l 20(a0),d1
    f254:	|  |  |   moveq #28,d0
    f256:	|  |  |   add.l 20(sp),d0
    f25a:	|  |  |   move.l d1,-(sp)
    f25c:	|  |  |   pea 1 <_start+0x1>
    f260:	|  |  |   move.l d0,-(sp)
    f262:	|  |  |   jsr 133cc <setVariable>
    f268:	|  |  |   lea 12(sp),sp
    f26c:	|  +--|-- bra.s f286 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    f26e:	|  |  \-> moveq #28,d0
    f270:	|  |      add.l 20(sp),d0
    f274:	|  |      clr.l -(sp)
    f276:	|  |      pea 1 <_start+0x1>
    f27a:	|  |      move.l d0,-(sp)
    f27c:	|  |      jsr 133cc <setVariable>
    f282:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    f286:	|  \----> moveq #2,d0
}
    f288:	\-------> lea 12(sp),sp
    f28c:	          rts

0000f28e <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    f28e:	       lea -32(sp),sp
    f292:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f296:	       movea.l 56(sp),a0
    f29a:	       move.l 24(a0),d0
    f29e:	       move.l d0,-(sp)
    f2a0:	       pea 1 <_start+0x1>
    f2a4:	       lea 28(sp),a0
    f2a8:	       move.l a0,-(sp)
    f2aa:	       jsr 12ada <getValueType>
    f2b0:	       lea 12(sp),sp
    f2b4:	       tst.w d0
    f2b6:	   /-- bne.s f2be <builtIn_addScreenRegion+0x30>
    f2b8:	   |   moveq #1,d0
    f2ba:	/--|-- bra.w f498 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f2be:	|  \-> moveq #24,d0
    f2c0:	|      add.l 56(sp),d0
    f2c4:	|      move.l d0,-(sp)
    f2c6:	|      jsr 1345e <trimStack>
    f2cc:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2ce:	|      movea.l 56(sp),a0
    f2d2:	|      move.l 24(a0),d0
    f2d6:	|      move.l d0,-(sp)
    f2d8:	|      pea 1 <_start+0x1>
    f2dc:	|      moveq #48,d0
    f2de:	|      add.l sp,d0
    f2e0:	|      move.l d0,-(sp)
    f2e2:	|      jsr 12ada <getValueType>
    f2e8:	|      lea 12(sp),sp
    f2ec:	|      tst.w d0
    f2ee:	|  /-- bne.s f2f6 <builtIn_addScreenRegion+0x68>
    f2f0:	|  |   moveq #1,d0
    f2f2:	+--|-- bra.w f498 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f2f6:	|  \-> moveq #24,d0
    f2f8:	|      add.l 56(sp),d0
    f2fc:	|      move.l d0,-(sp)
    f2fe:	|      jsr 1345e <trimStack>
    f304:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f306:	|      movea.l 56(sp),a0
    f30a:	|      move.l 24(a0),d0
    f30e:	|      move.l d0,-(sp)
    f310:	|      pea 1 <_start+0x1>
    f314:	|      moveq #52,d0
    f316:	|      add.l sp,d0
    f318:	|      move.l d0,-(sp)
    f31a:	|      jsr 12ada <getValueType>
    f320:	|      lea 12(sp),sp
    f324:	|      tst.w d0
    f326:	|  /-- bne.s f32e <builtIn_addScreenRegion+0xa0>
    f328:	|  |   moveq #1,d0
    f32a:	+--|-- bra.w f498 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f32e:	|  \-> moveq #24,d0
    f330:	|      add.l 56(sp),d0
    f334:	|      move.l d0,-(sp)
    f336:	|      jsr 1345e <trimStack>
    f33c:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f33e:	|      movea.l 56(sp),a0
    f342:	|      move.l 24(a0),d0
    f346:	|      move.l d0,-(sp)
    f348:	|      pea 1 <_start+0x1>
    f34c:	|      lea 32(sp),a0
    f350:	|      move.l a0,-(sp)
    f352:	|      jsr 12ada <getValueType>
    f358:	|      lea 12(sp),sp
    f35c:	|      tst.w d0
    f35e:	|  /-- bne.s f366 <builtIn_addScreenRegion+0xd8>
    f360:	|  |   moveq #1,d0
    f362:	+--|-- bra.w f498 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f366:	|  \-> moveq #24,d0
    f368:	|      add.l 56(sp),d0
    f36c:	|      move.l d0,-(sp)
    f36e:	|      jsr 1345e <trimStack>
    f374:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f376:	|      movea.l 56(sp),a0
    f37a:	|      move.l 24(a0),d0
    f37e:	|      move.l d0,-(sp)
    f380:	|      pea 1 <_start+0x1>
    f384:	|      lea 36(sp),a0
    f388:	|      move.l a0,-(sp)
    f38a:	|      jsr 12ada <getValueType>
    f390:	|      lea 12(sp),sp
    f394:	|      tst.w d0
    f396:	|  /-- bne.s f39e <builtIn_addScreenRegion+0x110>
    f398:	|  |   moveq #1,d0
    f39a:	+--|-- bra.w f498 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f39e:	|  \-> moveq #24,d0
    f3a0:	|      add.l 56(sp),d0
    f3a4:	|      move.l d0,-(sp)
    f3a6:	|      jsr 1345e <trimStack>
    f3ac:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f3ae:	|      movea.l 56(sp),a0
    f3b2:	|      move.l 24(a0),d0
    f3b6:	|      move.l d0,-(sp)
    f3b8:	|      pea 1 <_start+0x1>
    f3bc:	|      lea 40(sp),a0
    f3c0:	|      move.l a0,-(sp)
    f3c2:	|      jsr 12ada <getValueType>
    f3c8:	|      lea 12(sp),sp
    f3cc:	|      tst.w d0
    f3ce:	|  /-- bne.s f3d6 <builtIn_addScreenRegion+0x148>
    f3d0:	|  |   moveq #1,d0
    f3d2:	+--|-- bra.w f498 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f3d6:	|  \-> moveq #24,d0
    f3d8:	|      add.l 56(sp),d0
    f3dc:	|      move.l d0,-(sp)
    f3de:	|      jsr 1345e <trimStack>
    f3e4:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f3e6:	|      movea.l 56(sp),a0
    f3ea:	|      move.l 24(a0),d0
    f3ee:	|      move.l d0,-(sp)
    f3f0:	|      pea 1 <_start+0x1>
    f3f4:	|      lea 44(sp),a0
    f3f8:	|      move.l a0,-(sp)
    f3fa:	|      jsr 12ada <getValueType>
    f400:	|      lea 12(sp),sp
    f404:	|      tst.w d0
    f406:	|  /-- bne.s f40e <builtIn_addScreenRegion+0x180>
    f408:	|  |   moveq #1,d0
    f40a:	+--|-- bra.w f498 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f40e:	|  \-> moveq #24,d0
    f410:	|      add.l 56(sp),d0
    f414:	|      move.l d0,-(sp)
    f416:	|      jsr 1345e <trimStack>
    f41c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f41e:	|      movea.l 56(sp),a0
    f422:	|      move.l 24(a0),d0
    f426:	|      move.l d0,-(sp)
    f428:	|      pea 7 <_start+0x7>
    f42c:	|      lea 24(sp),a0
    f430:	|      move.l a0,-(sp)
    f432:	|      jsr 12ada <getValueType>
    f438:	|      lea 12(sp),sp
    f43c:	|      tst.w d0
    f43e:	|  /-- bne.s f444 <builtIn_addScreenRegion+0x1b6>
    f440:	|  |   moveq #1,d0
    f442:	+--|-- bra.s f498 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    f444:	|  \-> moveq #24,d0
    f446:	|      add.l 56(sp),d0
    f44a:	|      move.l d0,-(sp)
    f44c:	|      jsr 1345e <trimStack>
    f452:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    f454:	|      move.l 16(sp),d5
    f458:	|      move.l 20(sp),d4
    f45c:	|      move.l 40(sp),d3
    f460:	|      move.l 44(sp),d2
    f464:	|      movea.l 24(sp),a1
    f468:	|      movea.l 28(sp),a0
    f46c:	|      move.l 32(sp),d1
    f470:	|      move.l 36(sp),d0
    f474:	|      move.l d5,-(sp)
    f476:	|      move.l d4,-(sp)
    f478:	|      move.l d3,-(sp)
    f47a:	|      move.l d2,-(sp)
    f47c:	|      move.l a1,-(sp)
    f47e:	|      move.l a0,-(sp)
    f480:	|      move.l d1,-(sp)
    f482:	|      move.l d0,-(sp)
    f484:	|      jsr 134e4 <addScreenRegion>
    f48a:	|      lea 32(sp),sp
    f48e:	|      tst.w d0
    f490:	|  /-- beq.s f496 <builtIn_addScreenRegion+0x208>
    f492:	|  |   moveq #2,d0
    f494:	+--|-- bra.s f498 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    f496:	|  \-> moveq #1,d0

}
    f498:	\----> movem.l (sp)+,d2-d5
    f49c:	       lea 32(sp),sp
    f4a0:	       rts

0000f4a2 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    f4a2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f4a4:	       movea.l 12(sp),a0
    f4a8:	       move.l 24(a0),d0
    f4ac:	       move.l d0,-(sp)
    f4ae:	       pea 7 <_start+0x7>
    f4b2:	       move.l sp,d0
    f4b4:	       addq.l #8,d0
    f4b6:	       move.l d0,-(sp)
    f4b8:	       jsr 12ada <getValueType>
    f4be:	       lea 12(sp),sp
    f4c2:	       tst.w d0
    f4c4:	   /-- bne.s f4ca <builtIn_removeScreenRegion+0x28>
    f4c6:	   |   moveq #1,d0
    f4c8:	/--|-- bra.s f4e8 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    f4ca:	|  \-> moveq #24,d0
    f4cc:	|      add.l 12(sp),d0
    f4d0:	|      move.l d0,-(sp)
    f4d2:	|      jsr 1345e <trimStack>
    f4d8:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    f4da:	|      move.l (sp),d0
    f4dc:	|      move.l d0,-(sp)
    f4de:	|      jsr 1374c <removeScreenRegion>
    f4e4:	|      addq.l #4,sp
	return BR_CONTINUE;
    f4e6:	|      moveq #2,d0
}
    f4e8:	\----> addq.l #4,sp
    f4ea:	       rts

0000f4ec <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    f4ec:	jsr 138d0 <showBoxes>
	return BR_CONTINUE;
    f4f2:	moveq #2,d0
}
    f4f4:	rts

0000f4f6 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    f4f6:	jsr 135d2 <killAllRegions>
	return BR_CONTINUE;
    f4fc:	moveq #2,d0
}
    f4fe:	rts

0000f500 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    f500:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    f504:	       movea.l 24(sp),a0
    f508:	       move.l 24(a0),d0
    f50c:	       move.l d0,-(sp)
    f50e:	       jsr 12786 <getCostumeFromVar>
    f514:	       addq.l #4,sp
    f516:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    f51a:	   /-- bne.s f522 <builtIn_addCharacter+0x22>
    f51c:	   |   moveq #1,d0
    f51e:	/--|-- bra.w f5fe <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    f522:	|  \-> moveq #24,d0
    f524:	|      add.l 24(sp),d0
    f528:	|      move.l d0,-(sp)
    f52a:	|      jsr 1345e <trimStack>
    f530:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f532:	|      movea.l 24(sp),a0
    f536:	|      move.l 24(a0),d0
    f53a:	|      move.l d0,-(sp)
    f53c:	|      pea 1 <_start+0x1>
    f540:	|      lea 12(sp),a0
    f544:	|      move.l a0,-(sp)
    f546:	|      jsr 12ada <getValueType>
    f54c:	|      lea 12(sp),sp
    f550:	|      tst.w d0
    f552:	|  /-- bne.s f55a <builtIn_addCharacter+0x5a>
    f554:	|  |   moveq #1,d0
    f556:	+--|-- bra.w f5fe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    f55a:	|  \-> moveq #24,d0
    f55c:	|      add.l 24(sp),d0
    f560:	|      move.l d0,-(sp)
    f562:	|      jsr 1345e <trimStack>
    f568:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f56a:	|      movea.l 24(sp),a0
    f56e:	|      move.l 24(a0),d0
    f572:	|      move.l d0,-(sp)
    f574:	|      pea 1 <_start+0x1>
    f578:	|      moveq #16,d0
    f57a:	|      add.l sp,d0
    f57c:	|      move.l d0,-(sp)
    f57e:	|      jsr 12ada <getValueType>
    f584:	|      lea 12(sp),sp
    f588:	|      tst.w d0
    f58a:	|  /-- bne.s f590 <builtIn_addCharacter+0x90>
    f58c:	|  |   moveq #1,d0
    f58e:	+--|-- bra.s f5fe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    f590:	|  \-> moveq #24,d0
    f592:	|      add.l 24(sp),d0
    f596:	|      move.l d0,-(sp)
    f598:	|      jsr 1345e <trimStack>
    f59e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f5a0:	|      movea.l 24(sp),a0
    f5a4:	|      move.l 24(a0),d0
    f5a8:	|      move.l d0,-(sp)
    f5aa:	|      pea 7 <_start+0x7>
    f5ae:	|      lea 8(sp),a0
    f5b2:	|      move.l a0,-(sp)
    f5b4:	|      jsr 12ada <getValueType>
    f5ba:	|      lea 12(sp),sp
    f5be:	|      tst.w d0
    f5c0:	|  /-- bne.s f5c6 <builtIn_addCharacter+0xc6>
    f5c2:	|  |   moveq #1,d0
    f5c4:	+--|-- bra.s f5fe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    f5c6:	|  \-> moveq #24,d0
    f5c8:	|      add.l 24(sp),d0
    f5cc:	|      move.l d0,-(sp)
    f5ce:	|      jsr 1345e <trimStack>
    f5d4:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    f5d6:	|      movea.l (sp),a0
    f5d8:	|      move.l 4(sp),d1
    f5dc:	|      move.l 8(sp),d0
    f5e0:	|      move.l 12(sp),-(sp)
    f5e4:	|      move.l a0,-(sp)
    f5e6:	|      move.l d1,-(sp)
    f5e8:	|      move.l d0,-(sp)
    f5ea:	|      jsr 780e <addPerson>
    f5f0:	|      lea 16(sp),sp
    f5f4:	|      tst.w d0
    f5f6:	|  /-- beq.s f5fc <builtIn_addCharacter+0xfc>
    f5f8:	|  |   moveq #2,d0
    f5fa:	+--|-- bra.s f5fe <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    f5fc:	|  \-> moveq #1,d0
}
    f5fe:	\----> lea 16(sp),sp
    f602:	       rts

0000f604 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    f604:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f606:	       movea.l 12(sp),a0
    f60a:	       move.l 24(a0),d0
    f60e:	       move.l d0,-(sp)
    f610:	       pea 7 <_start+0x7>
    f614:	       move.l sp,d0
    f616:	       addq.l #8,d0
    f618:	       move.l d0,-(sp)
    f61a:	       jsr 12ada <getValueType>
    f620:	       lea 12(sp),sp
    f624:	       tst.w d0
    f626:	   /-- bne.s f62c <builtIn_hideCharacter+0x28>
    f628:	   |   moveq #1,d0
    f62a:	/--|-- bra.s f64c <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    f62c:	|  \-> moveq #24,d0
    f62e:	|      add.l 12(sp),d0
    f632:	|      move.l d0,-(sp)
    f634:	|      jsr 1345e <trimStack>
    f63a:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    f63c:	|      move.l (sp),d0
    f63e:	|      move.l d0,-(sp)
    f640:	|      clr.l -(sp)
    f642:	|      jsr a19e <setShown>
    f648:	|      addq.l #8,sp
	return BR_CONTINUE;
    f64a:	|      moveq #2,d0
}
    f64c:	\----> addq.l #4,sp
    f64e:	       rts

0000f650 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    f650:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f652:	       movea.l 12(sp),a0
    f656:	       move.l 24(a0),d0
    f65a:	       move.l d0,-(sp)
    f65c:	       pea 7 <_start+0x7>
    f660:	       move.l sp,d0
    f662:	       addq.l #8,d0
    f664:	       move.l d0,-(sp)
    f666:	       jsr 12ada <getValueType>
    f66c:	       lea 12(sp),sp
    f670:	       tst.w d0
    f672:	   /-- bne.s f678 <builtIn_showCharacter+0x28>
    f674:	   |   moveq #1,d0
    f676:	/--|-- bra.s f69a <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    f678:	|  \-> moveq #24,d0
    f67a:	|      add.l 12(sp),d0
    f67e:	|      move.l d0,-(sp)
    f680:	|      jsr 1345e <trimStack>
    f686:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    f688:	|      move.l (sp),d0
    f68a:	|      move.l d0,-(sp)
    f68c:	|      pea 1 <_start+0x1>
    f690:	|      jsr a19e <setShown>
    f696:	|      addq.l #8,sp
	return BR_CONTINUE;
    f698:	|      moveq #2,d0
}
    f69a:	\----> addq.l #4,sp
    f69c:	       rts

0000f69e <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    f69e:	jsr 48fc <killSpeechTimers>
	killMostPeople ();
    f6a4:	jsr 8fe6 <killMostPeople>
	return BR_CONTINUE;
    f6aa:	moveq #2,d0
}
    f6ac:	rts

0000f6ae <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    f6ae:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6b0:	       movea.l 16(sp),a0
    f6b4:	       move.l 24(a0),d0
    f6b8:	       move.l d0,-(sp)
    f6ba:	       pea 1 <_start+0x1>
    f6be:	       move.l sp,d0
    f6c0:	       addq.l #8,d0
    f6c2:	       move.l d0,-(sp)
    f6c4:	       jsr 12ada <getValueType>
    f6ca:	       lea 12(sp),sp
    f6ce:	       tst.w d0
    f6d0:	   /-- bne.s f6d6 <builtIn_setCharacterDrawMode+0x28>
    f6d2:	   |   moveq #1,d0
    f6d4:	/--|-- bra.s f730 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    f6d6:	|  \-> moveq #24,d0
    f6d8:	|      add.l 16(sp),d0
    f6dc:	|      move.l d0,-(sp)
    f6de:	|      jsr 1345e <trimStack>
    f6e4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f6e6:	|      movea.l 16(sp),a0
    f6ea:	|      move.l 24(a0),d0
    f6ee:	|      move.l d0,-(sp)
    f6f0:	|      pea 7 <_start+0x7>
    f6f4:	|      moveq #12,d0
    f6f6:	|      add.l sp,d0
    f6f8:	|      move.l d0,-(sp)
    f6fa:	|      jsr 12ada <getValueType>
    f700:	|      lea 12(sp),sp
    f704:	|      tst.w d0
    f706:	|  /-- bne.s f70c <builtIn_setCharacterDrawMode+0x5e>
    f708:	|  |   moveq #1,d0
    f70a:	+--|-- bra.s f730 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    f70c:	|  \-> moveq #24,d0
    f70e:	|      add.l 16(sp),d0
    f712:	|      move.l d0,-(sp)
    f714:	|      jsr 1345e <trimStack>
    f71a:	|      addq.l #4,sp
	setDrawMode (di, obj);
    f71c:	|      move.l 4(sp),d1
    f720:	|      move.l (sp),d0
    f722:	|      move.l d1,-(sp)
    f724:	|      move.l d0,-(sp)
    f726:	|      jsr 9adc <setDrawMode>
    f72c:	|      addq.l #8,sp
	return BR_CONTINUE;
    f72e:	|      moveq #2,d0
}
    f730:	\----> addq.l #8,sp
    f732:	       rts

0000f734 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    f734:	pea 171ec <PutChar+0x1bf6>
    f73a:	jsr 14b22 <KPrintF>
    f740:	addq.l #4,sp
	return BR_CONTINUE;
    f742:	moveq #2,d0
}
    f744:	rts

0000f746 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    f746:	pea 1721f <PutChar+0x1c29>
    f74c:	jsr 14b22 <KPrintF>
    f752:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    f754:	moveq #2,d0
}
    f756:	rts

0000f758 <builtIn_setScale>:

builtIn(setScale)
{
    f758:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f75a:	       movea.l 16(sp),a0
    f75e:	       move.l 24(a0),d0
    f762:	       move.l d0,-(sp)
    f764:	       pea 1 <_start+0x1>
    f768:	       move.l sp,d0
    f76a:	       addq.l #8,d0
    f76c:	       move.l d0,-(sp)
    f76e:	       jsr 12ada <getValueType>
    f774:	       lea 12(sp),sp
    f778:	       tst.w d0
    f77a:	   /-- bne.s f780 <builtIn_setScale+0x28>
    f77c:	   |   moveq #1,d0
    f77e:	/--|-- bra.s f7e2 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    f780:	|  \-> moveq #24,d0
    f782:	|      add.l 16(sp),d0
    f786:	|      move.l d0,-(sp)
    f788:	|      jsr 1345e <trimStack>
    f78e:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f790:	|      movea.l 16(sp),a0
    f794:	|      move.l 24(a0),d0
    f798:	|      move.l d0,-(sp)
    f79a:	|      pea 1 <_start+0x1>
    f79e:	|      moveq #12,d0
    f7a0:	|      add.l sp,d0
    f7a2:	|      move.l d0,-(sp)
    f7a4:	|      jsr 12ada <getValueType>
    f7aa:	|      lea 12(sp),sp
    f7ae:	|      tst.w d0
    f7b0:	|  /-- bne.s f7b6 <builtIn_setScale+0x5e>
    f7b2:	|  |   moveq #1,d0
    f7b4:	+--|-- bra.s f7e2 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    f7b6:	|  \-> moveq #24,d0
    f7b8:	|      add.l 16(sp),d0
    f7bc:	|      move.l d0,-(sp)
    f7be:	|      jsr 1345e <trimStack>
    f7c4:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    f7c6:	|      move.l (sp),d0
    f7c8:	|      move.l d0,d0
    f7ca:	|      movea.w d0,a1
    f7cc:	|      move.l 4(sp),d0
    f7d0:	|      move.l d0,d0
    f7d2:	|      movea.w d0,a0
    f7d4:	|      move.l a1,-(sp)
    f7d6:	|      move.l a0,-(sp)
    f7d8:	|      jsr a176 <setScale>
    f7de:	|      addq.l #8,sp
	return BR_CONTINUE;
    f7e0:	|      moveq #2,d0
}
    f7e2:	\----> addq.l #8,sp
    f7e4:	       rts

0000f7e6 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    f7e6:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f7e8:	       movea.l 12(sp),a0
    f7ec:	       move.l 24(a0),d0
    f7f0:	       move.l d0,-(sp)
    f7f2:	       pea 7 <_start+0x7>
    f7f6:	       move.l sp,d0
    f7f8:	       addq.l #8,d0
    f7fa:	       move.l d0,-(sp)
    f7fc:	       jsr 12ada <getValueType>
    f802:	       lea 12(sp),sp
    f806:	       tst.w d0
    f808:	   /-- bne.s f80e <builtIn_stopCharacter+0x28>
    f80a:	   |   moveq #1,d0
    f80c:	/--|-- bra.s f846 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    f80e:	|  \-> moveq #24,d0
    f810:	|      add.l 12(sp),d0
    f814:	|      move.l d0,-(sp)
    f816:	|      jsr 1345e <trimStack>
    f81c:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    f81e:	|      move.l (sp),d0
    f820:	|      move.l d0,-(sp)
    f822:	|      jsr a2aa <stopPerson>
    f828:	|      addq.l #4,sp
    f82a:	|      movea.w d0,a0
    f82c:	|      moveq #28,d0
    f82e:	|      add.l 12(sp),d0
    f832:	|      move.l a0,-(sp)
    f834:	|      pea 1 <_start+0x1>
    f838:	|      move.l d0,-(sp)
    f83a:	|      jsr 133cc <setVariable>
    f840:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f844:	|      moveq #2,d0
}
    f846:	\----> addq.l #4,sp
    f848:	       rts

0000f84a <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    f84a:	pea 17259 <PutChar+0x1c63>
    f850:	jsr 14b22 <KPrintF>
    f856:	addq.l #4,sp
	return BR_CONTINUE;
    f858:	moveq #2,d0
}
    f85a:	rts

0000f85c <builtIn_animate>:

builtIn(animate)
{
    f85c:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    f85e:	       movea.l 16(sp),a0
    f862:	       move.l 24(a0),d0
    f866:	       move.l d0,-(sp)
    f868:	       jsr 12fb2 <getAnimationFromVar>
    f86e:	       addq.l #4,sp
    f870:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    f874:	   /-- bne.s f87a <builtIn_animate+0x1e>
    f876:	   |   moveq #1,d0
    f878:	/--|-- bra.s f8f8 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    f87a:	|  \-> moveq #24,d0
    f87c:	|      add.l 16(sp),d0
    f880:	|      move.l d0,-(sp)
    f882:	|      jsr 1345e <trimStack>
    f888:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f88a:	|      movea.l 16(sp),a0
    f88e:	|      move.l 24(a0),d0
    f892:	|      move.l d0,-(sp)
    f894:	|      pea 7 <_start+0x7>
    f898:	|      move.l sp,d0
    f89a:	|      addq.l #8,d0
    f89c:	|      move.l d0,-(sp)
    f89e:	|      jsr 12ada <getValueType>
    f8a4:	|      lea 12(sp),sp
    f8a8:	|      tst.w d0
    f8aa:	|  /-- bne.s f8b0 <builtIn_animate+0x54>
    f8ac:	|  |   moveq #1,d0
    f8ae:	+--|-- bra.s f8f8 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    f8b0:	|  \-> moveq #24,d0
    f8b2:	|      add.l 16(sp),d0
    f8b6:	|      move.l d0,-(sp)
    f8b8:	|      jsr 1345e <trimStack>
    f8be:	|      addq.l #4,sp
	animatePerson (obj, pp);
    f8c0:	|      move.l (sp),d0
    f8c2:	|      move.l 4(sp),-(sp)
    f8c6:	|      move.l d0,-(sp)
    f8c8:	|      jsr 7a82 <animatePerson>
    f8ce:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    f8d0:	|      move.l 4(sp),-(sp)
    f8d4:	|      jsr a2fe <timeForAnim>
    f8da:	|      addq.l #4,sp
    f8dc:	|      move.l d0,d1
    f8de:	|      moveq #28,d0
    f8e0:	|      add.l 16(sp),d0
    f8e4:	|      move.l d1,-(sp)
    f8e6:	|      pea 1 <_start+0x1>
    f8ea:	|      move.l d0,-(sp)
    f8ec:	|      jsr 133cc <setVariable>
    f8f2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f8f6:	|      moveq #2,d0
}
    f8f8:	\----> addq.l #8,sp
    f8fa:	       rts

0000f8fc <builtIn_setCostume>:

builtIn(setCostume)
{
    f8fc:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    f8fe:	       movea.l 16(sp),a0
    f902:	       move.l 24(a0),d0
    f906:	       move.l d0,-(sp)
    f908:	       jsr 12786 <getCostumeFromVar>
    f90e:	       addq.l #4,sp
    f910:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    f914:	   /-- bne.s f91a <builtIn_setCostume+0x1e>
    f916:	   |   moveq #1,d0
    f918:	/--|-- bra.s f972 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    f91a:	|  \-> moveq #24,d0
    f91c:	|      add.l 16(sp),d0
    f920:	|      move.l d0,-(sp)
    f922:	|      jsr 1345e <trimStack>
    f928:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f92a:	|      movea.l 16(sp),a0
    f92e:	|      move.l 24(a0),d0
    f932:	|      move.l d0,-(sp)
    f934:	|      pea 7 <_start+0x7>
    f938:	|      move.l sp,d0
    f93a:	|      addq.l #8,d0
    f93c:	|      move.l d0,-(sp)
    f93e:	|      jsr 12ada <getValueType>
    f944:	|      lea 12(sp),sp
    f948:	|      tst.w d0
    f94a:	|  /-- bne.s f950 <builtIn_setCostume+0x54>
    f94c:	|  |   moveq #1,d0
    f94e:	+--|-- bra.s f972 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    f950:	|  \-> moveq #24,d0
    f952:	|      add.l 16(sp),d0
    f956:	|      move.l d0,-(sp)
    f958:	|      jsr 1345e <trimStack>
    f95e:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    f960:	|      move.l (sp),d0
    f962:	|      move.l 4(sp),-(sp)
    f966:	|      move.l d0,-(sp)
    f968:	|      jsr 7acc <animatePersonUsingPersona>
    f96e:	|      addq.l #8,sp
	return BR_CONTINUE;
    f970:	|      moveq #2,d0
}
    f972:	\----> addq.l #8,sp
    f974:	       rts

0000f976 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    f976:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f978:	       movea.l 16(sp),a0
    f97c:	       move.l 24(a0),d0
    f980:	       move.l d0,-(sp)
    f982:	       pea 1 <_start+0x1>
    f986:	       move.l sp,d0
    f988:	       addq.l #8,d0
    f98a:	       move.l d0,-(sp)
    f98c:	       jsr 12ada <getValueType>
    f992:	       lea 12(sp),sp
    f996:	       tst.w d0
    f998:	   /-- bne.s f99e <builtIn_floatCharacter+0x28>
    f99a:	   |   moveq #1,d0
    f99c:	/--|-- bra.s fa12 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    f99e:	|  \-> moveq #24,d0
    f9a0:	|      add.l 16(sp),d0
    f9a4:	|      move.l d0,-(sp)
    f9a6:	|      jsr 1345e <trimStack>
    f9ac:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f9ae:	|      movea.l 16(sp),a0
    f9b2:	|      move.l 24(a0),d0
    f9b6:	|      move.l d0,-(sp)
    f9b8:	|      pea 7 <_start+0x7>
    f9bc:	|      moveq #12,d0
    f9be:	|      add.l sp,d0
    f9c0:	|      move.l d0,-(sp)
    f9c2:	|      jsr 12ada <getValueType>
    f9c8:	|      lea 12(sp),sp
    f9cc:	|      tst.w d0
    f9ce:	|  /-- bne.s f9d4 <builtIn_floatCharacter+0x5e>
    f9d0:	|  |   moveq #1,d0
    f9d2:	+--|-- bra.s fa12 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    f9d4:	|  \-> moveq #24,d0
    f9d6:	|      add.l 16(sp),d0
    f9da:	|      move.l d0,-(sp)
    f9dc:	|      jsr 1345e <trimStack>
    f9e2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    f9e4:	|      move.l 4(sp),d1
    f9e8:	|      move.l (sp),d0
    f9ea:	|      move.l d1,-(sp)
    f9ec:	|      move.l d0,-(sp)
    f9ee:	|      jsr 8ba8 <floatCharacter>
    f9f4:	|      addq.l #8,sp
    f9f6:	|      movea.w d0,a0
    f9f8:	|      moveq #28,d0
    f9fa:	|      add.l 16(sp),d0
    f9fe:	|      move.l a0,-(sp)
    fa00:	|      pea 1 <_start+0x1>
    fa04:	|      move.l d0,-(sp)
    fa06:	|      jsr 133cc <setVariable>
    fa0c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fa10:	|      moveq #2,d0
}
    fa12:	\----> addq.l #8,sp
    fa14:	       rts

0000fa16 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    fa16:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa18:	       movea.l 16(sp),a0
    fa1c:	       move.l 24(a0),d0
    fa20:	       move.l d0,-(sp)
    fa22:	       pea 1 <_start+0x1>
    fa26:	       move.l sp,d0
    fa28:	       addq.l #8,d0
    fa2a:	       move.l d0,-(sp)
    fa2c:	       jsr 12ada <getValueType>
    fa32:	       lea 12(sp),sp
    fa36:	       tst.w d0
    fa38:	   /-- bne.s fa3e <builtIn_setCharacterWalkSpeed+0x28>
    fa3a:	   |   moveq #1,d0
    fa3c:	/--|-- bra.s fab2 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    fa3e:	|  \-> moveq #24,d0
    fa40:	|      add.l 16(sp),d0
    fa44:	|      move.l d0,-(sp)
    fa46:	|      jsr 1345e <trimStack>
    fa4c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fa4e:	|      movea.l 16(sp),a0
    fa52:	|      move.l 24(a0),d0
    fa56:	|      move.l d0,-(sp)
    fa58:	|      pea 7 <_start+0x7>
    fa5c:	|      moveq #12,d0
    fa5e:	|      add.l sp,d0
    fa60:	|      move.l d0,-(sp)
    fa62:	|      jsr 12ada <getValueType>
    fa68:	|      lea 12(sp),sp
    fa6c:	|      tst.w d0
    fa6e:	|  /-- bne.s fa74 <builtIn_setCharacterWalkSpeed+0x5e>
    fa70:	|  |   moveq #1,d0
    fa72:	+--|-- bra.s fab2 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    fa74:	|  \-> moveq #24,d0
    fa76:	|      add.l 16(sp),d0
    fa7a:	|      move.l d0,-(sp)
    fa7c:	|      jsr 1345e <trimStack>
    fa82:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    fa84:	|      move.l 4(sp),d1
    fa88:	|      move.l (sp),d0
    fa8a:	|      move.l d1,-(sp)
    fa8c:	|      move.l d0,-(sp)
    fa8e:	|      jsr a112 <setCharacterWalkSpeed>
    fa94:	|      addq.l #8,sp
    fa96:	|      movea.w d0,a0
    fa98:	|      moveq #28,d0
    fa9a:	|      add.l 16(sp),d0
    fa9e:	|      move.l a0,-(sp)
    faa0:	|      pea 1 <_start+0x1>
    faa4:	|      move.l d0,-(sp)
    faa6:	|      jsr 133cc <setVariable>
    faac:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fab0:	|      moveq #2,d0
}
    fab2:	\----> addq.l #8,sp
    fab4:	       rts

0000fab6 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    fab6:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fab8:	       movea.l 16(sp),a0
    fabc:	       move.l 24(a0),d0
    fac0:	       move.l d0,-(sp)
    fac2:	       pea 1 <_start+0x1>
    fac6:	       move.l sp,d0
    fac8:	       addq.l #8,d0
    faca:	       move.l d0,-(sp)
    facc:	       jsr 12ada <getValueType>
    fad2:	       lea 12(sp),sp
    fad6:	       tst.w d0
    fad8:	   /-- bne.s fade <builtIn_turnCharacter+0x28>
    fada:	   |   moveq #1,d0
    fadc:	/--|-- bra.s fb52 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    fade:	|  \-> moveq #24,d0
    fae0:	|      add.l 16(sp),d0
    fae4:	|      move.l d0,-(sp)
    fae6:	|      jsr 1345e <trimStack>
    faec:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    faee:	|      movea.l 16(sp),a0
    faf2:	|      move.l 24(a0),d0
    faf6:	|      move.l d0,-(sp)
    faf8:	|      pea 7 <_start+0x7>
    fafc:	|      moveq #12,d0
    fafe:	|      add.l sp,d0
    fb00:	|      move.l d0,-(sp)
    fb02:	|      jsr 12ada <getValueType>
    fb08:	|      lea 12(sp),sp
    fb0c:	|      tst.w d0
    fb0e:	|  /-- bne.s fb14 <builtIn_turnCharacter+0x5e>
    fb10:	|  |   moveq #1,d0
    fb12:	+--|-- bra.s fb52 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    fb14:	|  \-> moveq #24,d0
    fb16:	|      add.l 16(sp),d0
    fb1a:	|      move.l d0,-(sp)
    fb1c:	|      jsr 1345e <trimStack>
    fb22:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    fb24:	|      move.l (sp),d1
    fb26:	|      move.l 4(sp),d0
    fb2a:	|      move.l d1,-(sp)
    fb2c:	|      move.l d0,-(sp)
    fb2e:	|      jsr a3b6 <turnPersonToFace>
    fb34:	|      addq.l #8,sp
    fb36:	|      movea.w d0,a0
    fb38:	|      moveq #28,d0
    fb3a:	|      add.l 16(sp),d0
    fb3e:	|      move.l a0,-(sp)
    fb40:	|      pea 1 <_start+0x1>
    fb44:	|      move.l d0,-(sp)
    fb46:	|      jsr 133cc <setVariable>
    fb4c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fb50:	|      moveq #2,d0
}
    fb52:	\----> addq.l #8,sp
    fb54:	       rts

0000fb56 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    fb56:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb58:	       movea.l 16(sp),a0
    fb5c:	       move.l 24(a0),d0
    fb60:	       move.l d0,-(sp)
    fb62:	       pea 1 <_start+0x1>
    fb66:	       move.l sp,d0
    fb68:	       addq.l #8,d0
    fb6a:	       move.l d0,-(sp)
    fb6c:	       jsr 12ada <getValueType>
    fb72:	       lea 12(sp),sp
    fb76:	       tst.w d0
    fb78:	   /-- bne.s fb7e <builtIn_setCharacterExtra+0x28>
    fb7a:	   |   moveq #1,d0
    fb7c:	/--|-- bra.s fbf2 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    fb7e:	|  \-> moveq #24,d0
    fb80:	|      add.l 16(sp),d0
    fb84:	|      move.l d0,-(sp)
    fb86:	|      jsr 1345e <trimStack>
    fb8c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fb8e:	|      movea.l 16(sp),a0
    fb92:	|      move.l 24(a0),d0
    fb96:	|      move.l d0,-(sp)
    fb98:	|      pea 7 <_start+0x7>
    fb9c:	|      moveq #12,d0
    fb9e:	|      add.l sp,d0
    fba0:	|      move.l d0,-(sp)
    fba2:	|      jsr 12ada <getValueType>
    fba8:	|      lea 12(sp),sp
    fbac:	|      tst.w d0
    fbae:	|  /-- bne.s fbb4 <builtIn_setCharacterExtra+0x5e>
    fbb0:	|  |   moveq #1,d0
    fbb2:	+--|-- bra.s fbf2 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    fbb4:	|  \-> moveq #24,d0
    fbb6:	|      add.l 16(sp),d0
    fbba:	|      move.l d0,-(sp)
    fbbc:	|      jsr 1345e <trimStack>
    fbc2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    fbc4:	|      move.l (sp),d1
    fbc6:	|      move.l 4(sp),d0
    fbca:	|      move.l d1,-(sp)
    fbcc:	|      move.l d0,-(sp)
    fbce:	|      jsr a140 <setPersonExtra>
    fbd4:	|      addq.l #8,sp
    fbd6:	|      movea.w d0,a0
    fbd8:	|      moveq #28,d0
    fbda:	|      add.l 16(sp),d0
    fbde:	|      move.l a0,-(sp)
    fbe0:	|      pea 1 <_start+0x1>
    fbe4:	|      move.l d0,-(sp)
    fbe6:	|      jsr 133cc <setVariable>
    fbec:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fbf0:	|      moveq #2,d0
}
    fbf2:	\----> addq.l #8,sp
    fbf4:	       rts

0000fbf6 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
    fbf6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fbf8:	       movea.l 12(sp),a0
    fbfc:	       move.l 24(a0),d0
    fc00:	       move.l d0,-(sp)
    fc02:	       pea 7 <_start+0x7>
    fc06:	       move.l sp,d0
    fc08:	       addq.l #8,d0
    fc0a:	       move.l d0,-(sp)
    fc0c:	       jsr 12ada <getValueType>
    fc12:	       lea 12(sp),sp
    fc16:	       tst.w d0
    fc18:	   /-- bne.s fc1e <builtIn_removeCharacter+0x28>
    fc1a:	   |   moveq #1,d0
    fc1c:	/--|-- bra.s fc3c <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    fc1e:	|  \-> moveq #24,d0
    fc20:	|      add.l 12(sp),d0
    fc24:	|      move.l d0,-(sp)
    fc26:	|      jsr 1345e <trimStack>
    fc2c:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    fc2e:	|      move.l (sp),d0
    fc30:	|      move.l d0,-(sp)
    fc32:	|      jsr 9340 <removeOneCharacter>
    fc38:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc3a:	|      moveq #2,d0
}
    fc3c:	\----> addq.l #4,sp
    fc3e:	       rts

0000fc40 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    fc40:	                lea -28(sp),sp
    fc44:	                move.l d2,-(sp)
    fc46:	                move.l 44(sp),d1
    fc4a:	                move.l 48(sp),d0
    fc4e:	                move.w d1,d1
    fc50:	                move.w d1,6(sp)
    fc54:	                move.w d0,d0
    fc56:	                move.w d0,4(sp)
	switch (numParams) {
    fc5a:	                moveq #2,d0
    fc5c:	                cmp.l 36(sp),d0
    fc60:	      /-------- beq.w fda2 <moveChr+0x162>
    fc64:	      |         moveq #3,d0
    fc66:	      |         cmp.l 36(sp),d0
    fc6a:	/-----|-------- bne.w fed6 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fc6e:	|     |         movea.l 40(sp),a0
    fc72:	|     |         move.l 24(a0),d0
    fc76:	|     |         move.l d0,-(sp)
    fc78:	|     |         pea 1 <_start+0x1>
    fc7c:	|     |         lea 20(sp),a0
    fc80:	|     |         move.l a0,-(sp)
    fc82:	|     |         jsr 12ada <getValueType>
    fc88:	|     |         lea 12(sp),sp
    fc8c:	|     |         tst.w d0
    fc8e:	|     |     /-- bne.s fc96 <moveChr+0x56>
    fc90:	|     |     |   moveq #1,d0
    fc92:	|  /--|-----|-- bra.w fee6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    fc96:	|  |  |     \-> moveq #24,d0
    fc98:	|  |  |         add.l 40(sp),d0
    fc9c:	|  |  |         move.l d0,-(sp)
    fc9e:	|  |  |         jsr 1345e <trimStack>
    fca4:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fca6:	|  |  |         movea.l 40(sp),a0
    fcaa:	|  |  |         move.l 24(a0),d0
    fcae:	|  |  |         move.l d0,-(sp)
    fcb0:	|  |  |         pea 1 <_start+0x1>
    fcb4:	|  |  |         lea 24(sp),a0
    fcb8:	|  |  |         move.l a0,-(sp)
    fcba:	|  |  |         jsr 12ada <getValueType>
    fcc0:	|  |  |         lea 12(sp),sp
    fcc4:	|  |  |         tst.w d0
    fcc6:	|  |  |     /-- bne.s fcce <moveChr+0x8e>
    fcc8:	|  |  |     |   moveq #1,d0
    fcca:	|  +--|-----|-- bra.w fee6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    fcce:	|  |  |     \-> moveq #24,d0
    fcd0:	|  |  |         add.l 40(sp),d0
    fcd4:	|  |  |         move.l d0,-(sp)
    fcd6:	|  |  |         jsr 1345e <trimStack>
    fcdc:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fcde:	|  |  |         movea.l 40(sp),a0
    fce2:	|  |  |         move.l 24(a0),d0
    fce6:	|  |  |         move.l d0,-(sp)
    fce8:	|  |  |         pea 7 <_start+0x7>
    fcec:	|  |  |         lea 16(sp),a0
    fcf0:	|  |  |         move.l a0,-(sp)
    fcf2:	|  |  |         jsr 12ada <getValueType>
    fcf8:	|  |  |         lea 12(sp),sp
    fcfc:	|  |  |         tst.w d0
    fcfe:	|  |  |     /-- bne.s fd06 <moveChr+0xc6>
    fd00:	|  |  |     |   moveq #1,d0
    fd02:	|  +--|-----|-- bra.w fee6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    fd06:	|  |  |     \-> moveq #24,d0
    fd08:	|  |  |         add.l 40(sp),d0
    fd0c:	|  |  |         move.l d0,-(sp)
    fd0e:	|  |  |         jsr 1345e <trimStack>
    fd14:	|  |  |         addq.l #4,sp

			if (force) {
    fd16:	|  |  |         tst.w 6(sp)
    fd1a:	|  |  |     /-- beq.s fd4a <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    fd1c:	|  |  |     |   movea.l 8(sp),a0
    fd20:	|  |  |     |   move.l 12(sp),d1
    fd24:	|  |  |     |   move.l 16(sp),d0
    fd28:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbb6e4>
    fd2c:	|  |  |     |   move.l 44(sp),-(sp)
    fd30:	|  |  |     |   move.l a0,-(sp)
    fd32:	|  |  |     |   move.l d1,-(sp)
    fd34:	|  |  |     |   move.l d0,-(sp)
    fd36:	|  |  |     |   jsr 8bcc <forceWalkingPerson>
    fd3c:	|  |  |     |   lea 20(sp),sp
    fd40:	|  |  |     |   tst.w d0
    fd42:	|  |  |  /--|-- beq.s fd9c <moveChr+0x15c>
    fd44:	|  |  |  |  |   moveq #3,d0
    fd46:	|  +--|--|--|-- bra.w fee6 <moveChr+0x2a6>
			} else if (immediate) {
    fd4a:	|  |  |  |  \-> tst.w 4(sp)
    fd4e:	|  |  |  |  /-- beq.s fd6e <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    fd50:	|  |  |  |  |   movea.l 8(sp),a0
    fd54:	|  |  |  |  |   move.l 12(sp),d1
    fd58:	|  |  |  |  |   move.l 16(sp),d0
    fd5c:	|  |  |  |  |   move.l a0,-(sp)
    fd5e:	|  |  |  |  |   move.l d1,-(sp)
    fd60:	|  |  |  |  |   move.l d0,-(sp)
    fd62:	|  |  |  |  |   jsr 8ed4 <jumpPerson>
    fd68:	|  |  |  |  |   lea 12(sp),sp
    fd6c:	|  |  |  +--|-- bra.s fd9c <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    fd6e:	|  |  |  |  \-> movea.l 8(sp),a0
    fd72:	|  |  |  |      move.l 12(sp),d1
    fd76:	|  |  |  |      move.l 16(sp),d0
    fd7a:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffbb6e4>
    fd7e:	|  |  |  |      move.l 44(sp),-(sp)
    fd82:	|  |  |  |      move.l a0,-(sp)
    fd84:	|  |  |  |      move.l d1,-(sp)
    fd86:	|  |  |  |      move.l d0,-(sp)
    fd88:	|  |  |  |      jsr 90a4 <makeWalkingPerson>
    fd8e:	|  |  |  |      lea 20(sp),sp
    fd92:	|  |  |  |      tst.w d0
    fd94:	|  |  |  +----- beq.s fd9c <moveChr+0x15c>
    fd96:	|  |  |  |      moveq #3,d0
    fd98:	|  +--|--|----- bra.w fee6 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    fd9c:	|  |  |  \----> moveq #2,d0
    fd9e:	|  +--|-------- bra.w fee6 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fda2:	|  |  \-------> movea.l 40(sp),a0
    fda6:	|  |            move.l 24(a0),d0
    fdaa:	|  |            move.l d0,-(sp)
    fdac:	|  |            pea 7 <_start+0x7>
    fdb0:	|  |            moveq #32,d0
    fdb2:	|  |            add.l sp,d0
    fdb4:	|  |            move.l d0,-(sp)
    fdb6:	|  |            jsr 12ada <getValueType>
    fdbc:	|  |            lea 12(sp),sp
    fdc0:	|  |            tst.w d0
    fdc2:	|  |        /-- bne.s fdca <moveChr+0x18a>
    fdc4:	|  |        |   moveq #1,d0
    fdc6:	|  +--------|-- bra.w fee6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    fdca:	|  |        \-> moveq #24,d0
    fdcc:	|  |            add.l 40(sp),d0
    fdd0:	|  |            move.l d0,-(sp)
    fdd2:	|  |            jsr 1345e <trimStack>
    fdd8:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fdda:	|  |            movea.l 40(sp),a0
    fdde:	|  |            move.l 24(a0),d0
    fde2:	|  |            move.l d0,-(sp)
    fde4:	|  |            pea 7 <_start+0x7>
    fde8:	|  |            lea 28(sp),a0
    fdec:	|  |            move.l a0,-(sp)
    fdee:	|  |            jsr 12ada <getValueType>
    fdf4:	|  |            lea 12(sp),sp
    fdf8:	|  |            tst.w d0
    fdfa:	|  |        /-- bne.s fe02 <moveChr+0x1c2>
    fdfc:	|  |        |   moveq #1,d0
    fdfe:	|  +--------|-- bra.w fee6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    fe02:	|  |        \-> moveq #24,d0
    fe04:	|  |            add.l 40(sp),d0
    fe08:	|  |            move.l d0,-(sp)
    fe0a:	|  |            jsr 1345e <trimStack>
    fe10:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    fe12:	|  |            move.l 24(sp),d0
    fe16:	|  |            move.l d0,-(sp)
    fe18:	|  |            jsr 135a4 <getRegionForObject>
    fe1e:	|  |            addq.l #4,sp
    fe20:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    fe24:	|  |        /-- bne.s fe2c <moveChr+0x1ec>
    fe26:	|  |        |   moveq #2,d0
    fe28:	|  +--------|-- bra.w fee6 <moveChr+0x2a6>

			if (force)
    fe2c:	|  |        \-> tst.w 6(sp)
    fe30:	|  |        /-- beq.s fe6c <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    fe32:	|  |        |   movea.l 28(sp),a0
    fe36:	|  |        |   move.l 24(a0),d2
    fe3a:	|  |        |   movea.l 20(sp),a1
    fe3e:	|  |        |   movea.l 28(sp),a0
    fe42:	|  |        |   move.l 20(a0),d1
    fe46:	|  |        |   movea.l 28(sp),a0
    fe4a:	|  |        |   move.l 16(a0),d0
    fe4e:	|  |        |   move.l d2,-(sp)
    fe50:	|  |        |   move.l 44(sp),-(sp)
    fe54:	|  |        |   move.l a1,-(sp)
    fe56:	|  |        |   move.l d1,-(sp)
    fe58:	|  |        |   move.l d0,-(sp)
    fe5a:	|  |        |   jsr 8bcc <forceWalkingPerson>
    fe60:	|  |        |   lea 20(sp),sp
    fe64:	|  |        |   tst.w d0
    fe66:	|  |     /--|-- beq.s fed2 <moveChr+0x292>
    fe68:	|  |     |  |   moveq #3,d0
    fe6a:	|  +-----|--|-- bra.s fee6 <moveChr+0x2a6>
			}
			else if (immediate)
    fe6c:	|  |     |  \-> tst.w 4(sp)
    fe70:	|  |     |  /-- beq.s fe98 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    fe72:	|  |     |  |   movea.l 20(sp),a1
    fe76:	|  |     |  |   movea.l 28(sp),a0
    fe7a:	|  |     |  |   move.l 20(a0),d1
    fe7e:	|  |     |  |   movea.l 28(sp),a0
    fe82:	|  |     |  |   move.l 16(a0),d0
    fe86:	|  |     |  |   move.l a1,-(sp)
    fe88:	|  |     |  |   move.l d1,-(sp)
    fe8a:	|  |     |  |   move.l d0,-(sp)
    fe8c:	|  |     |  |   jsr 8ed4 <jumpPerson>
    fe92:	|  |     |  |   lea 12(sp),sp
    fe96:	|  |     +--|-- bra.s fed2 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    fe98:	|  |     |  \-> movea.l 28(sp),a0
    fe9c:	|  |     |      move.l 24(a0),d2
    fea0:	|  |     |      movea.l 20(sp),a1
    fea4:	|  |     |      movea.l 28(sp),a0
    fea8:	|  |     |      move.l 20(a0),d1
    feac:	|  |     |      movea.l 28(sp),a0
    feb0:	|  |     |      move.l 16(a0),d0
    feb4:	|  |     |      move.l d2,-(sp)
    feb6:	|  |     |      move.l 44(sp),-(sp)
    feba:	|  |     |      move.l a1,-(sp)
    febc:	|  |     |      move.l d1,-(sp)
    febe:	|  |     |      move.l d0,-(sp)
    fec0:	|  |     |      jsr 90a4 <makeWalkingPerson>
    fec6:	|  |     |      lea 20(sp),sp
    feca:	|  |     |      tst.w d0
    fecc:	|  |     +----- beq.s fed2 <moveChr+0x292>
    fece:	|  |     |      moveq #3,d0
    fed0:	|  +-----|----- bra.s fee6 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    fed2:	|  |     \----> moveq #2,d0
    fed4:	|  +----------- bra.s fee6 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    fed6:	\--|----------> pea 17277 <PutChar+0x1c81>
    fedc:	   |            jsr 14b22 <KPrintF>
    fee2:	   |            addq.l #4,sp
			return BR_ERROR;
    fee4:	   |            moveq #1,d0
	}
}
    fee6:	   \----------> move.l (sp)+,d2
    fee8:	                lea 28(sp),sp
    feec:	                rts

0000feee <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    feee:	clr.l -(sp)
    fef0:	clr.l -(sp)
    fef2:	move.l 16(sp),-(sp)
    fef6:	move.l 16(sp),-(sp)
    fefa:	jsr fc40 <moveChr>
    ff00:	lea 16(sp),sp
}
    ff04:	rts

0000ff06 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    ff06:	clr.l -(sp)
    ff08:	pea 1 <_start+0x1>
    ff0c:	move.l 16(sp),-(sp)
    ff10:	move.l 16(sp),-(sp)
    ff14:	jsr fc40 <moveChr>
    ff1a:	lea 16(sp),sp
}
    ff1e:	rts

0000ff20 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    ff20:	pea 1 <_start+0x1>
    ff24:	clr.l -(sp)
    ff26:	move.l 16(sp),-(sp)
    ff2a:	move.l 16(sp),-(sp)
    ff2e:	jsr fc40 <moveChr>
    ff34:	lea 16(sp),sp
}
    ff38:	rts

0000ff3a <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    ff3a:	jsr 5fb0 <clearStatusBar>
	return BR_CONTINUE;
    ff40:	moveq #2,d0
}
    ff42:	rts

0000ff44 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    ff44:	jsr 6058 <killLastStatus>
	return BR_CONTINUE;
    ff4a:	moveq #2,d0
}
    ff4c:	rts

0000ff4e <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    ff4e:	jsr 5f46 <addStatusBar>
	return BR_CONTINUE;
    ff54:	moveq #2,d0
}
    ff56:	rts

0000ff58 <builtIn_statusText>:

builtIn(statusText)
{
    ff58:	       subq.l #8,sp
    ff5a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ff5c:	       movea.l 20(sp),a0
    ff60:	       move.l 24(a0),d0
    ff64:	       move.l d0,-(sp)
    ff66:	       jsr 130b0 <getTextFromAnyVar>
    ff6c:	       addq.l #4,sp
    ff6e:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    ff72:	   /-- bne.s ff78 <builtIn_statusText+0x20>
    ff74:	   |   moveq #1,d0
    ff76:	/--|-- bra.s ffac <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    ff78:	|  \-> moveq #24,d0
    ff7a:	|      add.l 20(sp),d0
    ff7e:	|      move.l d0,-(sp)
    ff80:	|      jsr 1345e <trimStack>
    ff86:	|      addq.l #4,sp
	setStatusBar(newText);
    ff88:	|      move.l 8(sp),-(sp)
    ff8c:	|      jsr 62d8 <setStatusBar>
    ff92:	|      addq.l #4,sp
	FreeVec(newText);
    ff94:	|      move.l 8(sp),4(sp)
    ff9a:	|      move.l 187a2 <SysBase>,d0
    ffa0:	|      movea.l d0,a6
    ffa2:	|      movea.l 4(sp),a1
    ffa6:	|      jsr -690(a6)
	return BR_CONTINUE;
    ffaa:	|      moveq #2,d0
}
    ffac:	\----> movea.l (sp)+,a6
    ffae:	       addq.l #8,sp
    ffb0:	       rts

0000ffb2 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    ffb2:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ffb4:	       movea.l 12(sp),a0
    ffb8:	       move.l 24(a0),d0
    ffbc:	       move.l d0,-(sp)
    ffbe:	       pea 1 <_start+0x1>
    ffc2:	       move.l sp,d0
    ffc4:	       addq.l #8,d0
    ffc6:	       move.l d0,-(sp)
    ffc8:	       jsr 12ada <getValueType>
    ffce:	       lea 12(sp),sp
    ffd2:	       tst.w d0
    ffd4:	   /-- bne.s ffda <builtIn_lightStatus+0x28>
    ffd6:	   |   moveq #1,d0
    ffd8:	/--|-- bra.s fff8 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    ffda:	|  \-> moveq #24,d0
    ffdc:	|      add.l 12(sp),d0
    ffe0:	|      move.l d0,-(sp)
    ffe2:	|      jsr 1345e <trimStack>
    ffe8:	|      addq.l #4,sp
	setLitStatus (val);
    ffea:	|      move.l (sp),d0
    ffec:	|      move.l d0,-(sp)
    ffee:	|      jsr 62c8 <setLitStatus>
    fff4:	|      addq.l #4,sp
	return BR_CONTINUE;
    fff6:	|      moveq #2,d0
}
    fff8:	\----> addq.l #4,sp
    fffa:	       rts

0000fffc <builtIn_positionStatus>:

builtIn(positionStatus)
{
    fffc:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fffe:	       movea.l 16(sp),a0
   10002:	       move.l 24(a0),d0
   10006:	       move.l d0,-(sp)
   10008:	       pea 1 <_start+0x1>
   1000c:	       move.l sp,d0
   1000e:	       addq.l #8,d0
   10010:	       move.l d0,-(sp)
   10012:	       jsr 12ada <getValueType>
   10018:	       lea 12(sp),sp
   1001c:	       tst.w d0
   1001e:	   /-- bne.s 10024 <builtIn_positionStatus+0x28>
   10020:	   |   moveq #1,d0
   10022:	/--|-- bra.s 1007e <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10024:	|  \-> moveq #24,d0
   10026:	|      add.l 16(sp),d0
   1002a:	|      move.l d0,-(sp)
   1002c:	|      jsr 1345e <trimStack>
   10032:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10034:	|      movea.l 16(sp),a0
   10038:	|      move.l 24(a0),d0
   1003c:	|      move.l d0,-(sp)
   1003e:	|      pea 1 <_start+0x1>
   10042:	|      moveq #12,d0
   10044:	|      add.l sp,d0
   10046:	|      move.l d0,-(sp)
   10048:	|      jsr 12ada <getValueType>
   1004e:	|      lea 12(sp),sp
   10052:	|      tst.w d0
   10054:	|  /-- bne.s 1005a <builtIn_positionStatus+0x5e>
   10056:	|  |   moveq #1,d0
   10058:	+--|-- bra.s 1007e <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   1005a:	|  \-> moveq #24,d0
   1005c:	|      add.l 16(sp),d0
   10060:	|      move.l d0,-(sp)
   10062:	|      jsr 1345e <trimStack>
   10068:	|      addq.l #4,sp
	positionStatus (x, y);
   1006a:	|      move.l (sp),d1
   1006c:	|      move.l 4(sp),d0
   10070:	|      move.l d1,-(sp)
   10072:	|      move.l d0,-(sp)
   10074:	|      jsr 60ba <positionStatus>
   1007a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1007c:	|      moveq #2,d0
}
   1007e:	\----> addq.l #8,sp
   10080:	       rts

00010082 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   10082:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10084:	       movea.l 12(sp),a0
   10088:	       move.l 24(a0),d0
   1008c:	       move.l d0,-(sp)
   1008e:	       pea 1 <_start+0x1>
   10092:	       move.l sp,d0
   10094:	       addq.l #8,d0
   10096:	       move.l d0,-(sp)
   10098:	       jsr 12ada <getValueType>
   1009e:	       lea 12(sp),sp
   100a2:	       tst.w d0
   100a4:	   /-- bne.s 100aa <builtIn_alignStatus+0x28>
   100a6:	   |   moveq #1,d0
   100a8:	/--|-- bra.s 100ca <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   100aa:	|  \-> moveq #24,d0
   100ac:	|      add.l 12(sp),d0
   100b0:	|      move.l d0,-(sp)
   100b2:	|      jsr 1345e <trimStack>
   100b8:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   100ba:	|      move.l (sp),d0
   100bc:	|      movea.l 1812a <nowStatus>,a0
   100c2:	|      move.l d0,d0
   100c4:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   100c8:	|      moveq #2,d0
}
   100ca:	\----> addq.l #4,sp
   100cc:	       rts

000100ce <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   100ce:	             tst.l 4(sp)
   100d2:	      /----- beq.s 100de <getFuncNumForCallback+0x10>
   100d4:	      |      moveq #1,d0
   100d6:	      |      cmp.l 4(sp),d0
   100da:	      |  /-- beq.s 100e4 <getFuncNumForCallback+0x16>
   100dc:	   /--|--|-- bra.s 1011a <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   100de:	   |  \--|-> clr.l 12(sp)
			break;
   100e2:	/--|-----|-- bra.s 1012c <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   100e4:	|  |     \-> movea.l 8(sp),a0
   100e8:	|  |         move.l 24(a0),d0
   100ec:	|  |         move.l d0,-(sp)
   100ee:	|  |         pea 2 <_start+0x2>
   100f2:	|  |         move.l 20(sp),-(sp)
   100f6:	|  |         jsr 12ada <getValueType>
   100fc:	|  |         lea 12(sp),sp
   10100:	|  |         tst.w d0
   10102:	|  |     /-- bne.s 10108 <getFuncNumForCallback+0x3a>
   10104:	|  |     |   clr.w d0
   10106:	|  |  /--|-- bra.s 1012e <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   10108:	|  |  |  \-> moveq #24,d0
   1010a:	|  |  |      add.l 8(sp),d0
   1010e:	|  |  |      move.l d0,-(sp)
   10110:	|  |  |      jsr 1345e <trimStack>
   10116:	|  |  |      addq.l #4,sp
			break;
   10118:	+--|--|----- bra.s 1012c <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   1011a:	|  \--|----> pea 172ad <PutChar+0x1cb7>
   10120:	|     |      jsr 14b22 <KPrintF>
   10126:	|     |      addq.l #4,sp
			return FALSE;
   10128:	|     |      clr.w d0
   1012a:	|     +----- bra.s 1012e <getFuncNumForCallback+0x60>
	}
	return TRUE;
   1012c:	\-----|----> moveq #1,d0
}
   1012e:	      \----> rts

00010130 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   10130:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10132:	       move.l sp,d0
   10134:	       move.l d0,-(sp)
   10136:	       move.l 16(sp),-(sp)
   1013a:	       move.l 16(sp),-(sp)
   1013e:	       jsr 100ce <getFuncNumForCallback>
   10144:	       lea 12(sp),sp
   10148:	       tst.w d0
   1014a:	/----- beq.s 1015a <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   1014c:	|      movea.l 1811c <currentEvents>,a0
   10152:	|      move.l (sp),d0
   10154:	|      move.l d0,(a0)
		return BR_CONTINUE;
   10156:	|      moveq #2,d0
   10158:	|  /-- bra.s 1015c <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   1015a:	\--|-> moveq #1,d0
}
   1015c:	   \-> addq.l #4,sp
   1015e:	       rts

00010160 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   10160:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10162:	       move.l sp,d0
   10164:	       move.l d0,-(sp)
   10166:	       move.l 16(sp),-(sp)
   1016a:	       move.l 16(sp),-(sp)
   1016e:	       jsr 100ce <getFuncNumForCallback>
   10174:	       lea 12(sp),sp
   10178:	       tst.w d0
   1017a:	/----- beq.s 1018c <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   1017c:	|      movea.l 1811c <currentEvents>,a0
   10182:	|      move.l (sp),d0
   10184:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   10188:	|      moveq #2,d0
   1018a:	|  /-- bra.s 1018e <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   1018c:	\--|-> moveq #1,d0
}
   1018e:	   \-> addq.l #4,sp
   10190:	       rts

00010192 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   10192:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10194:	       move.l sp,d0
   10196:	       move.l d0,-(sp)
   10198:	       move.l 16(sp),-(sp)
   1019c:	       move.l 16(sp),-(sp)
   101a0:	       jsr 100ce <getFuncNumForCallback>
   101a6:	       lea 12(sp),sp
   101aa:	       tst.w d0
   101ac:	/----- beq.s 101be <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   101ae:	|      movea.l 1811c <currentEvents>,a0
   101b4:	|      move.l (sp),d0
   101b6:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   101ba:	|      moveq #2,d0
   101bc:	|  /-- bra.s 101c0 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   101be:	\--|-> moveq #1,d0
}
   101c0:	   \-> addq.l #4,sp
   101c2:	       rts

000101c4 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   101c4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   101c6:	       move.l sp,d0
   101c8:	       move.l d0,-(sp)
   101ca:	       move.l 16(sp),-(sp)
   101ce:	       move.l 16(sp),-(sp)
   101d2:	       jsr 100ce <getFuncNumForCallback>
   101d8:	       lea 12(sp),sp
   101dc:	       tst.w d0
   101de:	/----- beq.s 101f0 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   101e0:	|      movea.l 1811c <currentEvents>,a0
   101e6:	|      move.l (sp),d0
   101e8:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   101ec:	|      moveq #2,d0
   101ee:	|  /-- bra.s 101f2 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   101f0:	\--|-> moveq #1,d0
}
   101f2:	   \-> addq.l #4,sp
   101f4:	       rts

000101f6 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   101f6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   101f8:	       move.l sp,d0
   101fa:	       move.l d0,-(sp)
   101fc:	       move.l 16(sp),-(sp)
   10200:	       move.l 16(sp),-(sp)
   10204:	       jsr 100ce <getFuncNumForCallback>
   1020a:	       lea 12(sp),sp
   1020e:	       tst.w d0
   10210:	/----- beq.s 10222 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   10212:	|      movea.l 1811c <currentEvents>,a0
   10218:	|      move.l (sp),d0
   1021a:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   1021e:	|      moveq #2,d0
   10220:	|  /-- bra.s 10224 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   10222:	\--|-> moveq #1,d0
}
   10224:	   \-> addq.l #4,sp
   10226:	       rts

00010228 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   10228:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1022a:	       move.l sp,d0
   1022c:	       move.l d0,-(sp)
   1022e:	       move.l 16(sp),-(sp)
   10232:	       move.l 16(sp),-(sp)
   10236:	       jsr 100ce <getFuncNumForCallback>
   1023c:	       lea 12(sp),sp
   10240:	       tst.w d0
   10242:	/----- beq.s 10254 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   10244:	|      movea.l 1811c <currentEvents>,a0
   1024a:	|      move.l (sp),d0
   1024c:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   10250:	|      moveq #2,d0
   10252:	|  /-- bra.s 10256 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   10254:	\--|-> moveq #1,d0
}
   10256:	   \-> addq.l #4,sp
   10258:	       rts

0001025a <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   1025a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1025c:	       move.l sp,d0
   1025e:	       move.l d0,-(sp)
   10260:	       move.l 16(sp),-(sp)
   10264:	       move.l 16(sp),-(sp)
   10268:	       jsr 100ce <getFuncNumForCallback>
   1026e:	       lea 12(sp),sp
   10272:	       tst.w d0
   10274:	/----- beq.s 10286 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   10276:	|      movea.l 1811c <currentEvents>,a0
   1027c:	|      move.l (sp),d0
   1027e:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   10282:	|      moveq #2,d0
   10284:	|  /-- bra.s 10288 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   10286:	\--|-> moveq #1,d0
}
   10288:	   \-> addq.l #4,sp
   1028a:	       rts

0001028c <builtIn_spawnSub>:

builtIn (spawnSub)
{
   1028c:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1028e:	          move.l sp,d0
   10290:	          move.l d0,-(sp)
   10292:	          move.l 16(sp),-(sp)
   10296:	          move.l 16(sp),-(sp)
   1029a:	          jsr 100ce <getFuncNumForCallback>
   102a0:	          lea 12(sp),sp
   102a4:	          tst.w d0
   102a6:	/-------- beq.s 102d2 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   102a8:	|         move.l 18772 <noStack>,d1
   102ae:	|         move.l (sp),d0
   102b0:	|         pea 1 <_start+0x1>
   102b4:	|         move.l d1,-(sp)
   102b6:	|         clr.l -(sp)
   102b8:	|         clr.l -(sp)
   102ba:	|         move.l d0,-(sp)
   102bc:	|         jsr 51ca <startNewFunctionNum>
   102c2:	|         lea 20(sp),sp
   102c6:	|         tst.l d0
   102c8:	|     /-- bne.s 102ce <builtIn_spawnSub+0x42>
   102ca:	|     |   moveq #1,d0
   102cc:	|  /--|-- bra.s 102d4 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   102ce:	|  |  \-> moveq #2,d0
   102d0:	|  +----- bra.s 102d4 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   102d2:	\--|----> moveq #1,d0
}
   102d4:	   \----> addq.l #4,sp
   102d6:	          rts

000102d8 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   102d8:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   102da:	          move.l sp,d0
   102dc:	          addq.l #4,d0
   102de:	          move.l d0,-(sp)
   102e0:	          move.l 20(sp),-(sp)
   102e4:	          move.l 20(sp),-(sp)
   102e8:	          jsr 100ce <getFuncNumForCallback>
   102ee:	          lea 12(sp),sp
   102f2:	          tst.w d0
   102f4:	/-------- beq.s 1032a <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   102f6:	|         move.l 4(sp),d1
   102fa:	|         move.l sp,d0
   102fc:	|         addq.l #2,d0
   102fe:	|         move.l d0,-(sp)
   10300:	|         move.l 20(sp),-(sp)
   10304:	|         move.l d1,-(sp)
   10306:	|         jsr 3172 <cancelAFunction>
   1030c:	|         lea 12(sp),sp
		if (killedMyself) {
   10310:	|         move.w 2(sp),d0
   10314:	|  /----- beq.s 10326 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   10316:	|  |      move.l 16(sp),-(sp)
   1031a:	|  |      jsr 3090 <abortFunction>
   10320:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   10322:	|  |      moveq #5,d0
   10324:	|  |  /-- bra.s 1032c <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   10326:	|  \--|-> moveq #2,d0
   10328:	|     +-- bra.s 1032c <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   1032a:	\-----|-> moveq #1,d0
}
   1032c:	      \-> addq.l #8,sp
   1032e:	          rts

00010330 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   10330:	       subq.l #8,sp
   10332:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   10334:	       movea.l 20(sp),a0
   10338:	       move.l 24(a0),d0
   1033c:	       move.l d0,-(sp)
   1033e:	       jsr 130b0 <getTextFromAnyVar>
   10344:	       addq.l #4,sp
   10346:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   1034a:	   /-- bne.s 10350 <builtIn_stringWidth+0x20>
   1034c:	   |   moveq #1,d0
   1034e:	/--|-- bra.s 1039e <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   10350:	|  \-> moveq #24,d0
   10352:	|      add.l 20(sp),d0
   10356:	|      move.l d0,-(sp)
   10358:	|      jsr 1345e <trimStack>
   1035e:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   10360:	|      move.l 8(sp),-(sp)
   10364:	|      jsr 134b8 <stringWidth>
   1036a:	|      addq.l #4,sp
   1036c:	|      move.l d0,d1
   1036e:	|      moveq #28,d0
   10370:	|      add.l 20(sp),d0
   10374:	|      move.l d1,-(sp)
   10376:	|      pea 1 <_start+0x1>
   1037a:	|      move.l d0,-(sp)
   1037c:	|      jsr 133cc <setVariable>
   10382:	|      lea 12(sp),sp
	FreeVec(theText);
   10386:	|      move.l 8(sp),4(sp)
   1038c:	|      move.l 187a2 <SysBase>,d0
   10392:	|      movea.l d0,a6
   10394:	|      movea.l 4(sp),a1
   10398:	|      jsr -690(a6)
	return BR_CONTINUE;
   1039c:	|      moveq #2,d0
}
   1039e:	\----> movea.l (sp)+,a6
   103a0:	       addq.l #8,sp
   103a2:	       rts

000103a4 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   103a4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103a6:	       movea.l 12(sp),a0
   103aa:	       move.l 24(a0),d0
   103ae:	       move.l d0,-(sp)
   103b0:	       pea 1 <_start+0x1>
   103b4:	       move.l sp,d0
   103b6:	       addq.l #8,d0
   103b8:	       move.l d0,-(sp)
   103ba:	       jsr 12ada <getValueType>
   103c0:	       lea 12(sp),sp
   103c4:	       tst.w d0
   103c6:	   /-- bne.s 103cc <builtIn_hardScroll+0x28>
   103c8:	   |   moveq #1,d0
   103ca:	/--|-- bra.s 103ea <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   103cc:	|  \-> moveq #24,d0
   103ce:	|      add.l 12(sp),d0
   103d2:	|      move.l d0,-(sp)
   103d4:	|      jsr 1345e <trimStack>
   103da:	|      addq.l #4,sp
	hardScroll (v);
   103dc:	|      move.l (sp),d0
   103de:	|      move.l d0,-(sp)
   103e0:	|      jsr b66e <hardScroll>
   103e6:	|      addq.l #4,sp
	return BR_CONTINUE;
   103e8:	|      moveq #2,d0
}
   103ea:	\----> addq.l #4,sp
   103ec:	       rts

000103ee <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   103ee:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   103f0:	       movea.l 12(sp),a0
   103f4:	       move.l 24(a0),d0
   103f8:	       move.l d0,-(sp)
   103fa:	       pea 7 <_start+0x7>
   103fe:	       move.l sp,d0
   10400:	       addq.l #8,d0
   10402:	       move.l d0,-(sp)
   10404:	       jsr 12ada <getValueType>
   1040a:	       lea 12(sp),sp
   1040e:	       tst.w d0
   10410:	   /-- bne.s 10416 <builtIn_isScreenRegion+0x28>
   10412:	   |   moveq #1,d0
   10414:	/--|-- bra.s 10456 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   10416:	|  \-> moveq #24,d0
   10418:	|      add.l 12(sp),d0
   1041c:	|      move.l d0,-(sp)
   1041e:	|      jsr 1345e <trimStack>
   10424:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   10426:	|      move.l (sp),d0
   10428:	|      move.l d0,-(sp)
   1042a:	|      jsr 135a4 <getRegionForObject>
   10430:	|      addq.l #4,sp
   10432:	|      tst.l d0
   10434:	|      sne d0
   10436:	|      neg.b d0
   10438:	|      moveq #0,d1
   1043a:	|      move.b d0,d1
   1043c:	|      moveq #28,d0
   1043e:	|      add.l 12(sp),d0
   10442:	|      move.l d1,-(sp)
   10444:	|      pea 1 <_start+0x1>
   10448:	|      move.l d0,-(sp)
   1044a:	|      jsr 133cc <setVariable>
   10450:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10454:	|      moveq #2,d0
}
   10456:	\----> addq.l #4,sp
   10458:	       rts

0001045a <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   1045a:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1045c:	       movea.l 12(sp),a0
   10460:	       move.l 24(a0),d0
   10464:	       move.l d0,-(sp)
   10466:	       pea 1 <_start+0x1>
   1046a:	       move.l sp,d0
   1046c:	       addq.l #8,d0
   1046e:	       move.l d0,-(sp)
   10470:	       jsr 12ada <getValueType>
   10476:	       lea 12(sp),sp
   1047a:	       tst.w d0
   1047c:	   /-- bne.s 10482 <builtIn_setSpeechSpeed+0x28>
   1047e:	   |   moveq #1,d0
   10480:	/--|-- bra.s 104d0 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   10482:	|  \-> moveq #24,d0
   10484:	|      add.l 12(sp),d0
   10488:	|      move.l d0,-(sp)
   1048a:	|      jsr 1345e <trimStack>
   10490:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   10492:	|      move.l (sp),d0
   10494:	|      move.l d0,-(sp)
   10496:	|      jsr 14f5e <__floatsisf>
   1049c:	|      addq.l #4,sp
   1049e:	|      move.l #1008981770,-(sp)
   104a4:	|      move.l d0,-(sp)
   104a6:	|      jsr 15010 <__mulsf3>
   104ac:	|      addq.l #8,sp
   104ae:	|      move.l d0,1812e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   104b4:	|      moveq #28,d0
   104b6:	|      add.l 12(sp),d0
   104ba:	|      pea 1 <_start+0x1>
   104be:	|      pea 1 <_start+0x1>
   104c2:	|      move.l d0,-(sp)
   104c4:	|      jsr 133cc <setVariable>
   104ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
   104ce:	|      moveq #2,d0
}
   104d0:	\----> addq.l #4,sp
   104d2:	       rts

000104d4 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   104d4:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104d6:	       movea.l 12(sp),a0
   104da:	       move.l 24(a0),d0
   104de:	       move.l d0,-(sp)
   104e0:	       pea 1 <_start+0x1>
   104e4:	       move.l sp,d0
   104e6:	       addq.l #8,d0
   104e8:	       move.l d0,-(sp)
   104ea:	       jsr 12ada <getValueType>
   104f0:	       lea 12(sp),sp
   104f4:	       tst.w d0
   104f6:	   /-- bne.s 104fc <builtIn_setFontSpacing+0x28>
   104f8:	   |   moveq #1,d0
   104fa:	/--|-- bra.s 10532 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   104fc:	|  \-> move.l (sp),d0
   104fe:	|      move.l d0,d0
   10500:	|      move.w d0,186a8 <fontSpace>
	trimStack (&fun -> stack);
   10506:	|      moveq #24,d0
   10508:	|      add.l 12(sp),d0
   1050c:	|      move.l d0,-(sp)
   1050e:	|      jsr 1345e <trimStack>
   10514:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   10516:	|      moveq #28,d0
   10518:	|      add.l 12(sp),d0
   1051c:	|      pea 1 <_start+0x1>
   10520:	|      pea 1 <_start+0x1>
   10524:	|      move.l d0,-(sp)
   10526:	|      jsr 133cc <setVariable>
   1052c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10530:	|      moveq #2,d0
}
   10532:	\----> addq.l #4,sp
   10534:	       rts

00010536 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   10536:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10538:	          movea.l 12(sp),a0
   1053c:	          move.l 24(a0),d0
   10540:	          move.l d0,-(sp)
   10542:	          pea 1 <_start+0x1>
   10546:	          move.l sp,d0
   10548:	          addq.l #8,d0
   1054a:	          move.l d0,-(sp)
   1054c:	          jsr 12ada <getValueType>
   10552:	          lea 12(sp),sp
   10556:	          tst.w d0
   10558:	      /-- bne.s 1055e <builtIn_transitionLevel+0x28>
   1055a:	      |   moveq #1,d0
   1055c:	/-----|-- bra.s 105b2 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1055e:	|     \-> moveq #24,d0
   10560:	|         add.l 12(sp),d0
   10564:	|         move.l d0,-(sp)
   10566:	|         jsr 1345e <trimStack>
   1056c:	|         addq.l #4,sp

	if (number < 0)
   1056e:	|         move.l (sp),d0
   10570:	|     /-- bpl.s 1057a <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   10572:	|     |   clr.b 1811a <brightnessLevel>
   10578:	|  /--|-- bra.s 10596 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   1057a:	|  |  \-> move.l (sp),d0
   1057c:	|  |      cmpi.l #255,d0
   10582:	|  |  /-- ble.s 1058c <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   10584:	|  |  |   st 1811a <brightnessLevel>
   1058a:	|  +--|-- bra.s 10596 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   1058c:	|  |  \-> move.l (sp),d0
   1058e:	|  |      move.l d0,d0
   10590:	|  |      move.b d0,1811a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   10596:	|  \----> moveq #28,d0
   10598:	|         add.l 12(sp),d0
   1059c:	|         pea 1 <_start+0x1>
   105a0:	|         pea 1 <_start+0x1>
   105a4:	|         move.l d0,-(sp)
   105a6:	|         jsr 133cc <setVariable>
   105ac:	|         lea 12(sp),sp
	return BR_CONTINUE;
   105b0:	|         moveq #2,d0
}
   105b2:	\-------> addq.l #4,sp
   105b4:	          rts

000105b6 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   105b6:	movea.l 8(sp),a0
   105ba:	move.l 24(a0),d0
   105be:	move.l d0,-(sp)
   105c0:	jsr 1301a <getBoolean>
   105c6:	addq.l #4,sp
   105c8:	move.w d0,18742 <captureAllKeys>
	trimStack (&fun -> stack);
   105ce:	moveq #24,d0
   105d0:	add.l 8(sp),d0
   105d4:	move.l d0,-(sp)
   105d6:	jsr 1345e <trimStack>
   105dc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   105de:	move.w 18742 <captureAllKeys>,d0
   105e4:	movea.w d0,a0
   105e6:	moveq #28,d0
   105e8:	add.l 8(sp),d0
   105ec:	move.l a0,-(sp)
   105ee:	pea 1 <_start+0x1>
   105f2:	move.l d0,-(sp)
   105f4:	jsr 133cc <setVariable>
   105fa:	lea 12(sp),sp
	return BR_CONTINUE;
   105fe:	moveq #2,d0
}
   10600:	rts

00010602 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   10602:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10606:	       movea.l 20(sp),a0
   1060a:	       move.l 24(a0),d0
   1060e:	       move.l d0,-(sp)
   10610:	       pea 1 <_start+0x1>
   10614:	       moveq #12,d0
   10616:	       add.l sp,d0
   10618:	       move.l d0,-(sp)
   1061a:	       jsr 12ada <getValueType>
   10620:	       lea 12(sp),sp
   10624:	       tst.w d0
   10626:	   /-- bne.s 1062e <builtIn_spinCharacter+0x2c>
   10628:	   |   moveq #1,d0
   1062a:	/--|-- bra.w 106de <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1062e:	|  \-> moveq #24,d0
   10630:	|      add.l 20(sp),d0
   10634:	|      move.l d0,-(sp)
   10636:	|      jsr 1345e <trimStack>
   1063c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1063e:	|      movea.l 20(sp),a0
   10642:	|      move.l 24(a0),d0
   10646:	|      move.l d0,-(sp)
   10648:	|      pea 7 <_start+0x7>
   1064c:	|      lea 8(sp),a0
   10650:	|      move.l a0,-(sp)
   10652:	|      jsr 12ada <getValueType>
   10658:	|      lea 12(sp),sp
   1065c:	|      tst.w d0
   1065e:	|  /-- bne.s 10664 <builtIn_spinCharacter+0x62>
   10660:	|  |   moveq #1,d0
   10662:	+--|-- bra.s 106de <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   10664:	|  \-> moveq #24,d0
   10666:	|      add.l 20(sp),d0
   1066a:	|      move.l d0,-(sp)
   1066c:	|      jsr 1345e <trimStack>
   10672:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   10674:	|      move.l (sp),d0
   10676:	|      move.l d0,-(sp)
   10678:	|      jsr 8b7a <findPerson>
   1067e:	|      addq.l #4,sp
   10680:	|      move.l d0,8(sp)
	if (thisPerson) {
   10684:	|  /-- beq.s 106c4 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   10686:	|  |   move.l 4(sp),d0
   1068a:	|  |   movea.l 8(sp),a0
   1068e:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
   10692:	|  |   movea.l 8(sp),a0
   10696:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
   1069c:	|  |   movea.l 8(sp),a0
   106a0:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   106a6:	|  |   moveq #28,d0
   106a8:	|  |   add.l 20(sp),d0
   106ac:	|  |   pea 1 <_start+0x1>
   106b0:	|  |   pea 1 <_start+0x1>
   106b4:	|  |   move.l d0,-(sp)
   106b6:	|  |   jsr 133cc <setVariable>
   106bc:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   106c0:	|  |   moveq #3,d0
   106c2:	+--|-- bra.s 106de <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   106c4:	|  \-> moveq #28,d0
   106c6:	|      add.l 20(sp),d0
   106ca:	|      clr.l -(sp)
   106cc:	|      pea 1 <_start+0x1>
   106d0:	|      move.l d0,-(sp)
   106d2:	|      jsr 133cc <setVariable>
   106d8:	|      lea 12(sp),sp
		return BR_CONTINUE;
   106dc:	|      moveq #2,d0
	}
}
   106de:	\----> lea 12(sp),sp
   106e2:	       rts

000106e4 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   106e4:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   106e6:	          movea.l 16(sp),a0
   106ea:	          move.l 24(a0),d0
   106ee:	          move.l d0,-(sp)
   106f0:	          pea 7 <_start+0x7>
   106f4:	          move.l sp,d0
   106f6:	          addq.l #8,d0
   106f8:	          move.l d0,-(sp)
   106fa:	          jsr 12ada <getValueType>
   10700:	          lea 12(sp),sp
   10704:	          tst.w d0
   10706:	      /-- bne.s 1070c <builtIn_getCharacterDirection+0x28>
   10708:	      |   moveq #1,d0
   1070a:	/-----|-- bra.s 1076a <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   1070c:	|     \-> moveq #24,d0
   1070e:	|         add.l 16(sp),d0
   10712:	|         move.l d0,-(sp)
   10714:	|         jsr 1345e <trimStack>
   1071a:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1071c:	|         move.l (sp),d0
   1071e:	|         move.l d0,-(sp)
   10720:	|         jsr 8b7a <findPerson>
   10726:	|         addq.l #4,sp
   10728:	|         move.l d0,4(sp)
	if (thisPerson) {
   1072c:	|  /----- beq.s 10750 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1072e:	|  |      movea.l 4(sp),a0
   10732:	|  |      move.l 94(a0),d1
   10736:	|  |      moveq #28,d0
   10738:	|  |      add.l 16(sp),d0
   1073c:	|  |      move.l d1,-(sp)
   1073e:	|  |      pea 1 <_start+0x1>
   10742:	|  |      move.l d0,-(sp)
   10744:	|  |      jsr 133cc <setVariable>
   1074a:	|  |      lea 12(sp),sp
   1074e:	|  |  /-- bra.s 10768 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10750:	|  \--|-> moveq #28,d0
   10752:	|     |   add.l 16(sp),d0
   10756:	|     |   clr.l -(sp)
   10758:	|     |   pea 1 <_start+0x1>
   1075c:	|     |   move.l d0,-(sp)
   1075e:	|     |   jsr 133cc <setVariable>
   10764:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10768:	|     \-> moveq #2,d0
}
   1076a:	\-------> addq.l #8,sp
   1076c:	          rts

0001076e <builtIn_isCharacter>:

builtIn(isCharacter)
{
   1076e:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10770:	       movea.l 16(sp),a0
   10774:	       move.l 24(a0),d0
   10778:	       move.l d0,-(sp)
   1077a:	       pea 7 <_start+0x7>
   1077e:	       move.l sp,d0
   10780:	       addq.l #8,d0
   10782:	       move.l d0,-(sp)
   10784:	       jsr 12ada <getValueType>
   1078a:	       lea 12(sp),sp
   1078e:	       tst.w d0
   10790:	   /-- bne.s 10796 <builtIn_isCharacter+0x28>
   10792:	   |   moveq #1,d0
   10794:	/--|-- bra.s 107d8 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   10796:	|  \-> moveq #24,d0
   10798:	|      add.l 16(sp),d0
   1079c:	|      move.l d0,-(sp)
   1079e:	|      jsr 1345e <trimStack>
   107a4:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   107a6:	|      move.l (sp),d0
   107a8:	|      move.l d0,-(sp)
   107aa:	|      jsr 8b7a <findPerson>
   107b0:	|      addq.l #4,sp
   107b2:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   107b6:	|      sne d0
   107b8:	|      neg.b d0
   107ba:	|      moveq #0,d1
   107bc:	|      move.b d0,d1
   107be:	|      moveq #28,d0
   107c0:	|      add.l 16(sp),d0
   107c4:	|      move.l d1,-(sp)
   107c6:	|      pea 1 <_start+0x1>
   107ca:	|      move.l d0,-(sp)
   107cc:	|      jsr 133cc <setVariable>
   107d2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   107d6:	|      moveq #2,d0
}
   107d8:	\----> addq.l #8,sp
   107da:	       rts

000107dc <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   107dc:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   107de:	          movea.l 16(sp),a0
   107e2:	          move.l 24(a0),d0
   107e6:	          move.l d0,-(sp)
   107e8:	          pea 7 <_start+0x7>
   107ec:	          move.l sp,d0
   107ee:	          addq.l #8,d0
   107f0:	          move.l d0,-(sp)
   107f2:	          jsr 12ada <getValueType>
   107f8:	          lea 12(sp),sp
   107fc:	          tst.w d0
   107fe:	      /-- bne.s 10804 <builtIn_normalCharacter+0x28>
   10800:	      |   moveq #1,d0
   10802:	/-----|-- bra.s 10880 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   10804:	|     \-> moveq #24,d0
   10806:	|         add.l 16(sp),d0
   1080a:	|         move.l d0,-(sp)
   1080c:	|         jsr 1345e <trimStack>
   10812:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   10814:	|         move.l (sp),d0
   10816:	|         move.l d0,-(sp)
   10818:	|         jsr 8b7a <findPerson>
   1081e:	|         addq.l #4,sp
   10820:	|         move.l d0,4(sp)
	if (thisPerson)
   10824:	|  /----- beq.s 10866 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   10826:	|  |      movea.l 4(sp),a0
   1082a:	|  |      movea.l 68(a0),a0
   1082e:	|  |      move.l (a0),d1
   10830:	|  |      movea.l 4(sp),a0
   10834:	|  |      move.l 94(a0),d0
   10838:	|  |      add.l d0,d0
   1083a:	|  |      add.l d0,d0
   1083c:	|  |      movea.l d1,a0
   1083e:	|  |      adda.l d0,a0
   10840:	|  |      move.l (a0),d0
   10842:	|  |      movea.l 4(sp),a0
   10846:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1084a:	|  |      moveq #28,d0
   1084c:	|  |      add.l 16(sp),d0
   10850:	|  |      pea 1 <_start+0x1>
   10854:	|  |      pea 1 <_start+0x1>
   10858:	|  |      move.l d0,-(sp)
   1085a:	|  |      jsr 133cc <setVariable>
   10860:	|  |      lea 12(sp),sp
   10864:	|  |  /-- bra.s 1087e <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10866:	|  \--|-> moveq #28,d0
   10868:	|     |   add.l 16(sp),d0
   1086c:	|     |   clr.l -(sp)
   1086e:	|     |   pea 1 <_start+0x1>
   10872:	|     |   move.l d0,-(sp)
   10874:	|     |   jsr 133cc <setVariable>
   1087a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1087e:	|     \-> moveq #2,d0
}
   10880:	\-------> addq.l #8,sp
   10882:	          rts

00010884 <builtIn_isMoving>:

builtIn(isMoving)
{
   10884:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10886:	          movea.l 16(sp),a0
   1088a:	          move.l 24(a0),d0
   1088e:	          move.l d0,-(sp)
   10890:	          pea 7 <_start+0x7>
   10894:	          move.l sp,d0
   10896:	          addq.l #8,d0
   10898:	          move.l d0,-(sp)
   1089a:	          jsr 12ada <getValueType>
   108a0:	          lea 12(sp),sp
   108a4:	          tst.w d0
   108a6:	      /-- bne.s 108ac <builtIn_isMoving+0x28>
   108a8:	      |   moveq #1,d0
   108aa:	/-----|-- bra.s 1090c <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   108ac:	|     \-> moveq #24,d0
   108ae:	|         add.l 16(sp),d0
   108b2:	|         move.l d0,-(sp)
   108b4:	|         jsr 1345e <trimStack>
   108ba:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   108bc:	|         move.l (sp),d0
   108be:	|         move.l d0,-(sp)
   108c0:	|         jsr 8b7a <findPerson>
   108c6:	|         addq.l #4,sp
   108c8:	|         move.l d0,4(sp)
	if (thisPerson)
   108cc:	|  /----- beq.s 108f2 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   108ce:	|  |      movea.l 4(sp),a0
   108d2:	|  |      move.w 52(a0),d0
   108d6:	|  |      movea.w d0,a0
   108d8:	|  |      moveq #28,d0
   108da:	|  |      add.l 16(sp),d0
   108de:	|  |      move.l a0,-(sp)
   108e0:	|  |      pea 1 <_start+0x1>
   108e4:	|  |      move.l d0,-(sp)
   108e6:	|  |      jsr 133cc <setVariable>
   108ec:	|  |      lea 12(sp),sp
   108f0:	|  |  /-- bra.s 1090a <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   108f2:	|  \--|-> moveq #28,d0
   108f4:	|     |   add.l 16(sp),d0
   108f8:	|     |   clr.l -(sp)
   108fa:	|     |   pea 1 <_start+0x1>
   108fe:	|     |   move.l d0,-(sp)
   10900:	|     |   jsr 133cc <setVariable>
   10906:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1090a:	|     \-> moveq #2,d0
}
   1090c:	\-------> addq.l #8,sp
   1090e:	          rts

00010910 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   10910:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10914:	          movea.l 20(sp),a0
   10918:	          move.l 24(a0),d0
   1091c:	          move.l d0,-(sp)
   1091e:	          pea 7 <_start+0x7>
   10922:	          lea 8(sp),a0
   10926:	          move.l a0,-(sp)
   10928:	          jsr 12ada <getValueType>
   1092e:	          lea 12(sp),sp
   10932:	          tst.w d0
   10934:	      /-- bne.s 1093c <builtIn_fetchEvent+0x2c>
   10936:	      |   moveq #1,d0
   10938:	/-----|-- bra.w 109d0 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1093c:	|     \-> moveq #24,d0
   1093e:	|         add.l 20(sp),d0
   10942:	|         move.l d0,-(sp)
   10944:	|         jsr 1345e <trimStack>
   1094a:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1094c:	|         movea.l 20(sp),a0
   10950:	|         move.l 24(a0),d0
   10954:	|         move.l d0,-(sp)
   10956:	|         pea 7 <_start+0x7>
   1095a:	|         moveq #12,d0
   1095c:	|         add.l sp,d0
   1095e:	|         move.l d0,-(sp)
   10960:	|         jsr 12ada <getValueType>
   10966:	|         lea 12(sp),sp
   1096a:	|         tst.w d0
   1096c:	|     /-- bne.s 10972 <builtIn_fetchEvent+0x62>
   1096e:	|     |   moveq #1,d0
   10970:	+-----|-- bra.s 109d0 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   10972:	|     \-> moveq #24,d0
   10974:	|         add.l 20(sp),d0
   10978:	|         move.l d0,-(sp)
   1097a:	|         jsr 1345e <trimStack>
   10980:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10982:	|         move.l (sp),d1
   10984:	|         move.l 4(sp),d0
   10988:	|         move.l d1,-(sp)
   1098a:	|         move.l d0,-(sp)
   1098c:	|         jsr b944 <getCombinationFunction>
   10992:	|         addq.l #8,sp
   10994:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   10998:	|  /----- beq.s 109b6 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1099a:	|  |      moveq #28,d0
   1099c:	|  |      add.l 20(sp),d0
   109a0:	|  |      move.l 8(sp),-(sp)
   109a4:	|  |      pea 2 <_start+0x2>
   109a8:	|  |      move.l d0,-(sp)
   109aa:	|  |      jsr 133cc <setVariable>
   109b0:	|  |      lea 12(sp),sp
   109b4:	|  |  /-- bra.s 109ce <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   109b6:	|  \--|-> moveq #28,d0
   109b8:	|     |   add.l 20(sp),d0
   109bc:	|     |   clr.l -(sp)
   109be:	|     |   pea 1 <_start+0x1>
   109c2:	|     |   move.l d0,-(sp)
   109c4:	|     |   jsr 133cc <setVariable>
   109ca:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   109ce:	|     \-> moveq #2,d0
}
   109d0:	\-------> lea 12(sp),sp
   109d4:	          rts

000109d6 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   109d6:	       lea -24(sp),sp
   109da:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   109dc:	       movea.l 36(sp),a0
   109e0:	       move.l 24(a0),d0
   109e4:	       move.l d0,-(sp)
   109e6:	       jsr 130b0 <getTextFromAnyVar>
   109ec:	       addq.l #4,sp
   109ee:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   109f2:	       moveq #24,d0
   109f4:	       add.l 36(sp),d0
   109f8:	       move.l d0,-(sp)
   109fa:	       jsr 1345e <trimStack>
   10a00:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   10a02:	       move.l 24(sp),-(sp)
   10a06:	       jsr 2fe <encodeFilename>
   10a0c:	       addq.l #4,sp
   10a0e:	       move.l d0,20(sp)
    FreeVec(namNormal);
   10a12:	       move.l 24(sp),16(sp)
   10a18:	       move.l 187a2 <SysBase>,d0
   10a1e:	       movea.l d0,a6
   10a20:	       movea.l 16(sp),a1
   10a24:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   10a28:	       move.l 20(sp),-(sp)
   10a2c:	       jsr c6fc <failSecurityCheck>
   10a32:	       addq.l #4,sp
   10a34:	       tst.w d0
   10a36:	   /-- beq.s 10a3c <builtIn_deleteFile+0x66>
   10a38:	   |   moveq #1,d0
   10a3a:	/--|-- bra.s 10a8a <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   10a3c:	|  \-> move.l 20(sp),12(sp)
   10a42:	|      move.l 187aa <DOSBase>,d0
   10a48:	|      movea.l d0,a6
   10a4a:	|      move.l 12(sp),d1
   10a4e:	|      jsr -72(a6)
   10a52:	|      move.l d0,8(sp)
   10a56:	|      move.l 8(sp),d1
   10a5a:	|      moveq #28,d0
   10a5c:	|      add.l 36(sp),d0
   10a60:	|      move.l d1,-(sp)
   10a62:	|      pea 1 <_start+0x1>
   10a66:	|      move.l d0,-(sp)
   10a68:	|      jsr 133cc <setVariable>
   10a6e:	|      lea 12(sp),sp
    FreeVec(nam);
   10a72:	|      move.l 20(sp),4(sp)
   10a78:	|      move.l 187a2 <SysBase>,d0
   10a7e:	|      movea.l d0,a6
   10a80:	|      movea.l 4(sp),a1
   10a84:	|      jsr -690(a6)

    return BR_CONTINUE;
   10a88:	|      moveq #2,d0
}
   10a8a:	\----> movea.l (sp)+,a6
   10a8c:	       lea 24(sp),sp
   10a90:	       rts

00010a92 <builtIn_renameFile>:

builtIn(renameFile)
{
   10a92:	       lea -40(sp),sp
   10a96:	       move.l a6,-(sp)
   10a98:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   10a9a:	       movea.l 56(sp),a0
   10a9e:	       move.l 24(a0),d0
   10aa2:	       move.l d0,-(sp)
   10aa4:	       jsr 130b0 <getTextFromAnyVar>
   10aaa:	       addq.l #4,sp
   10aac:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   10ab0:	       move.l 44(sp),-(sp)
   10ab4:	       jsr 2fe <encodeFilename>
   10aba:	       addq.l #4,sp
   10abc:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   10ac0:	       moveq #24,d0
   10ac2:	       add.l 56(sp),d0
   10ac6:	       move.l d0,-(sp)
   10ac8:	       jsr 1345e <trimStack>
   10ace:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   10ad0:	       move.l 40(sp),-(sp)
   10ad4:	       jsr c6fc <failSecurityCheck>
   10ada:	       addq.l #4,sp
   10adc:	       tst.w d0
   10ade:	   /-- beq.s 10ae6 <builtIn_renameFile+0x54>
   10ae0:	   |   moveq #1,d0
   10ae2:	/--|-- bra.w 10bcc <builtIn_renameFile+0x13a>
	FreeVec(temp);
   10ae6:	|  \-> move.l 44(sp),36(sp)
   10aec:	|      move.l 187a2 <SysBase>,d0
   10af2:	|      movea.l d0,a6
   10af4:	|      movea.l 36(sp),a1
   10af8:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   10afc:	|      movea.l 56(sp),a0
   10b00:	|      move.l 24(a0),d0
   10b04:	|      move.l d0,-(sp)
   10b06:	|      jsr 130b0 <getTextFromAnyVar>
   10b0c:	|      addq.l #4,sp
   10b0e:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   10b12:	|      move.l 44(sp),-(sp)
   10b16:	|      jsr 2fe <encodeFilename>
   10b1c:	|      addq.l #4,sp
   10b1e:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   10b22:	|      moveq #24,d0
   10b24:	|      add.l 56(sp),d0
   10b28:	|      move.l d0,-(sp)
   10b2a:	|      jsr 1345e <trimStack>
   10b30:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   10b32:	|      move.l 32(sp),-(sp)
   10b36:	|      jsr c6fc <failSecurityCheck>
   10b3c:	|      addq.l #4,sp
   10b3e:	|      tst.w d0
   10b40:	|  /-- beq.s 10b48 <builtIn_renameFile+0xb6>
   10b42:	|  |   moveq #1,d0
   10b44:	+--|-- bra.w 10bcc <builtIn_renameFile+0x13a>
	FreeVec(temp);
   10b48:	|  \-> move.l 44(sp),28(sp)
   10b4e:	|      move.l 187a2 <SysBase>,d0
   10b54:	|      movea.l d0,a6
   10b56:	|      movea.l 28(sp),a1
   10b5a:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   10b5e:	|      move.l 32(sp),24(sp)
   10b64:	|      move.l 40(sp),20(sp)
   10b6a:	|      move.l 187aa <DOSBase>,d0
   10b70:	|      movea.l d0,a6
   10b72:	|      move.l 24(sp),d1
   10b76:	|      move.l 20(sp),d2
   10b7a:	|      jsr -78(a6)
   10b7e:	|      move.l d0,16(sp)
   10b82:	|      move.l 16(sp),d1
   10b86:	|      moveq #28,d0
   10b88:	|      add.l 56(sp),d0
   10b8c:	|      move.l d1,-(sp)
   10b8e:	|      pea 1 <_start+0x1>
   10b92:	|      move.l d0,-(sp)
   10b94:	|      jsr 133cc <setVariable>
   10b9a:	|      lea 12(sp),sp
	FreeVec(nam);
   10b9e:	|      move.l 32(sp),12(sp)
   10ba4:	|      move.l 187a2 <SysBase>,d0
   10baa:	|      movea.l d0,a6
   10bac:	|      movea.l 12(sp),a1
   10bb0:	|      jsr -690(a6)
	FreeVec(newnam);
   10bb4:	|      move.l 40(sp),8(sp)
   10bba:	|      move.l 187a2 <SysBase>,d0
   10bc0:	|      movea.l d0,a6
   10bc2:	|      movea.l 8(sp),a1
   10bc6:	|      jsr -690(a6)

	return BR_CONTINUE;
   10bca:	|      moveq #2,d0
}
   10bcc:	\----> move.l (sp)+,d2
   10bce:	       movea.l (sp)+,a6
   10bd0:	       lea 40(sp),sp
   10bd4:	       rts

00010bd6 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   10bd6:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10bd8:	       movea.l 12(sp),a0
   10bdc:	       move.l 24(a0),d0
   10be0:	       move.l d0,-(sp)
   10be2:	       pea 5 <_start+0x5>
   10be6:	       move.l sp,d0
   10be8:	       addq.l #8,d0
   10bea:	       move.l d0,-(sp)
   10bec:	       jsr 12ada <getValueType>
   10bf2:	       lea 12(sp),sp
   10bf6:	       tst.w d0
   10bf8:	   /-- bne.s 10bfe <builtIn_cacheSound+0x28>
   10bfa:	   |   moveq #1,d0
   10bfc:	/--|-- bra.s 10c26 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   10bfe:	|  \-> moveq #24,d0
   10c00:	|      add.l 12(sp),d0
   10c04:	|      move.l d0,-(sp)
   10c06:	|      jsr 1345e <trimStack>
   10c0c:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   10c0e:	|      move.l (sp),d0
   10c10:	|      move.l d0,-(sp)
   10c12:	|      jsr b550 <cacheSound>
   10c18:	|      addq.l #4,sp
   10c1a:	|      moveq #-1,d1
   10c1c:	|      cmp.l d0,d1
   10c1e:	|  /-- bne.s 10c24 <builtIn_cacheSound+0x4e>
   10c20:	|  |   moveq #1,d0
   10c22:	+--|-- bra.s 10c26 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   10c24:	|  \-> moveq #2,d0
}
   10c26:	\----> addq.l #4,sp
   10c28:	       rts

00010c2a <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   10c2a:	pea 172c2 <PutChar+0x1ccc>
   10c30:	jsr 14b22 <KPrintF>
   10c36:	addq.l #4,sp
	return BR_CONTINUE;
   10c38:	moveq #2,d0
}
   10c3a:	rts

00010c3c <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   10c3c:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c40:	          movea.l 20(sp),a0
   10c44:	          move.l 24(a0),d0
   10c48:	          move.l d0,-(sp)
   10c4a:	          pea 1 <_start+0x1>
   10c4e:	          moveq #12,d0
   10c50:	          add.l sp,d0
   10c52:	          move.l d0,-(sp)
   10c54:	          jsr 12ada <getValueType>
   10c5a:	          lea 12(sp),sp
   10c5e:	          tst.w d0
   10c60:	      /-- bne.s 10c68 <builtIn_setCharacterSpinSpeed+0x2c>
   10c62:	      |   moveq #1,d0
   10c64:	/-----|-- bra.w 10d02 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   10c68:	|     \-> moveq #24,d0
   10c6a:	|         add.l 20(sp),d0
   10c6e:	|         move.l d0,-(sp)
   10c70:	|         jsr 1345e <trimStack>
   10c76:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c78:	|         movea.l 20(sp),a0
   10c7c:	|         move.l 24(a0),d0
   10c80:	|         move.l d0,-(sp)
   10c82:	|         pea 7 <_start+0x7>
   10c86:	|         lea 8(sp),a0
   10c8a:	|         move.l a0,-(sp)
   10c8c:	|         jsr 12ada <getValueType>
   10c92:	|         lea 12(sp),sp
   10c96:	|         tst.w d0
   10c98:	|     /-- bne.s 10c9e <builtIn_setCharacterSpinSpeed+0x62>
   10c9a:	|     |   moveq #1,d0
   10c9c:	+-----|-- bra.s 10d02 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   10c9e:	|     \-> moveq #24,d0
   10ca0:	|         add.l 20(sp),d0
   10ca4:	|         move.l d0,-(sp)
   10ca6:	|         jsr 1345e <trimStack>
   10cac:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   10cae:	|         move.l (sp),d0
   10cb0:	|         move.l d0,-(sp)
   10cb2:	|         jsr 8b7a <findPerson>
   10cb8:	|         addq.l #4,sp
   10cba:	|         move.l d0,8(sp)

	if (thisPerson) {
   10cbe:	|  /----- beq.s 10ce8 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   10cc0:	|  |      move.l 4(sp),d0
   10cc4:	|  |      movea.l 8(sp),a0
   10cc8:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   10ccc:	|  |      moveq #28,d0
   10cce:	|  |      add.l 20(sp),d0
   10cd2:	|  |      pea 1 <_start+0x1>
   10cd6:	|  |      pea 1 <_start+0x1>
   10cda:	|  |      move.l d0,-(sp)
   10cdc:	|  |      jsr 133cc <setVariable>
   10ce2:	|  |      lea 12(sp),sp
   10ce6:	|  |  /-- bra.s 10d00 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10ce8:	|  \--|-> moveq #28,d0
   10cea:	|     |   add.l 20(sp),d0
   10cee:	|     |   clr.l -(sp)
   10cf0:	|     |   pea 1 <_start+0x1>
   10cf4:	|     |   move.l d0,-(sp)
   10cf6:	|     |   jsr 133cc <setVariable>
   10cfc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10d00:	|     \-> moveq #2,d0
}
   10d02:	\-------> lea 12(sp),sp
   10d06:	          rts

00010d08 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   10d08:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d0c:	          movea.l 20(sp),a0
   10d10:	          move.l 24(a0),d0
   10d14:	          move.l d0,-(sp)
   10d16:	          pea 1 <_start+0x1>
   10d1a:	          moveq #12,d0
   10d1c:	          add.l sp,d0
   10d1e:	          move.l d0,-(sp)
   10d20:	          jsr 12ada <getValueType>
   10d26:	          lea 12(sp),sp
   10d2a:	          tst.w d0
   10d2c:	      /-- bne.s 10d34 <builtIn_setCharacterAngleOffset+0x2c>
   10d2e:	      |   moveq #1,d0
   10d30:	/-----|-- bra.w 10dce <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   10d34:	|     \-> moveq #24,d0
   10d36:	|         add.l 20(sp),d0
   10d3a:	|         move.l d0,-(sp)
   10d3c:	|         jsr 1345e <trimStack>
   10d42:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d44:	|         movea.l 20(sp),a0
   10d48:	|         move.l 24(a0),d0
   10d4c:	|         move.l d0,-(sp)
   10d4e:	|         pea 7 <_start+0x7>
   10d52:	|         lea 8(sp),a0
   10d56:	|         move.l a0,-(sp)
   10d58:	|         jsr 12ada <getValueType>
   10d5e:	|         lea 12(sp),sp
   10d62:	|         tst.w d0
   10d64:	|     /-- bne.s 10d6a <builtIn_setCharacterAngleOffset+0x62>
   10d66:	|     |   moveq #1,d0
   10d68:	+-----|-- bra.s 10dce <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   10d6a:	|     \-> moveq #24,d0
   10d6c:	|         add.l 20(sp),d0
   10d70:	|         move.l d0,-(sp)
   10d72:	|         jsr 1345e <trimStack>
   10d78:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   10d7a:	|         move.l (sp),d0
   10d7c:	|         move.l d0,-(sp)
   10d7e:	|         jsr 8b7a <findPerson>
   10d84:	|         addq.l #4,sp
   10d86:	|         move.l d0,8(sp)

	if (thisPerson) {
   10d8a:	|  /----- beq.s 10db4 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   10d8c:	|  |      move.l 4(sp),d0
   10d90:	|  |      movea.l 8(sp),a0
   10d94:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   10d98:	|  |      moveq #28,d0
   10d9a:	|  |      add.l 20(sp),d0
   10d9e:	|  |      pea 1 <_start+0x1>
   10da2:	|  |      pea 1 <_start+0x1>
   10da6:	|  |      move.l d0,-(sp)
   10da8:	|  |      jsr 133cc <setVariable>
   10dae:	|  |      lea 12(sp),sp
   10db2:	|  |  /-- bra.s 10dcc <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   10db4:	|  \--|-> moveq #28,d0
   10db6:	|     |   add.l 20(sp),d0
   10dba:	|     |   clr.l -(sp)
   10dbc:	|     |   pea 1 <_start+0x1>
   10dc0:	|     |   move.l d0,-(sp)
   10dc2:	|     |   jsr 133cc <setVariable>
   10dc8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10dcc:	|     \-> moveq #2,d0
}
   10dce:	\-------> lea 12(sp),sp
   10dd2:	          rts

00010dd4 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   10dd4:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10dd6:	       movea.l 12(sp),a0
   10dda:	       move.l 24(a0),d0
   10dde:	       move.l d0,-(sp)
   10de0:	       pea 1 <_start+0x1>
   10de4:	       move.l sp,d0
   10de6:	       addq.l #8,d0
   10de8:	       move.l d0,-(sp)
   10dea:	       jsr 12ada <getValueType>
   10df0:	       lea 12(sp),sp
   10df4:	       tst.w d0
   10df6:	   /-- bne.s 10dfc <builtIn_transitionMode+0x28>
   10df8:	   |   moveq #1,d0
   10dfa:	/--|-- bra.s 10e32 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   10dfc:	|  \-> move.l (sp),d0
   10dfe:	|      move.l d0,d0
   10e00:	|      move.b d0,1867e <fadeMode>
	trimStack (&fun -> stack);
   10e06:	|      moveq #24,d0
   10e08:	|      add.l 12(sp),d0
   10e0c:	|      move.l d0,-(sp)
   10e0e:	|      jsr 1345e <trimStack>
   10e14:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   10e16:	|      moveq #28,d0
   10e18:	|      add.l 12(sp),d0
   10e1c:	|      pea 1 <_start+0x1>
   10e20:	|      pea 1 <_start+0x1>
   10e24:	|      move.l d0,-(sp)
   10e26:	|      jsr 133cc <setVariable>
   10e2c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10e30:	|      moveq #2,d0
}
   10e32:	\----> addq.l #4,sp
   10e34:	       rts

00010e36 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10e36:	moveq #24,d0
   10e38:	add.l 8(sp),d0
   10e3c:	move.l d0,-(sp)
   10e3e:	jsr 1345e <trimStack>
   10e44:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   10e46:	moveq #28,d0
   10e48:	add.l 8(sp),d0
   10e4c:	pea 1 <_start+0x1>
   10e50:	pea 1 <_start+0x1>
   10e54:	move.l d0,-(sp)
   10e56:	jsr 133cc <setVariable>
   10e5c:	lea 12(sp),sp
	return BR_CONTINUE;
   10e60:	moveq #2,d0
}
   10e62:	rts

00010e64 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   10e64:	pea 172ec <PutChar+0x1cf6>
   10e6a:	jsr 14b22 <KPrintF>
   10e70:	addq.l #4,sp
	return BR_CONTINUE;
   10e72:	moveq #2,d0
}
   10e74:	rts

00010e76 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   10e76:	       lea -16(sp),sp
   10e7a:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   10e7c:	       movea.l 28(sp),a0
   10e80:	       move.l 24(a0),d0
   10e84:	       move.l d0,-(sp)
   10e86:	       jsr 130b0 <getTextFromAnyVar>
   10e8c:	       addq.l #4,sp
   10e8e:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   10e92:	   /-- bne.s 10e9a <builtIn_saveCustomData+0x24>
   10e94:	   |   moveq #1,d0
   10e96:	/--|-- bra.w 10f4c <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   10e9a:	|  \-> move.l 16(sp),-(sp)
   10e9e:	|      jsr 2fe <encodeFilename>
   10ea4:	|      addq.l #4,sp
   10ea6:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   10eaa:	|      move.l 16(sp),8(sp)
   10eb0:	|      move.l 187a2 <SysBase>,d0
   10eb6:	|      movea.l d0,a6
   10eb8:	|      movea.l 8(sp),a1
   10ebc:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   10ec0:	|      move.l 12(sp),-(sp)
   10ec4:	|      jsr c6fc <failSecurityCheck>
   10eca:	|      addq.l #4,sp
   10ecc:	|      tst.w d0
   10ece:	|  /-- beq.s 10ed4 <builtIn_saveCustomData+0x5e>
   10ed0:	|  |   moveq #1,d0
   10ed2:	+--|-- bra.s 10f4c <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   10ed4:	|  \-> moveq #24,d0
   10ed6:	|      add.l 28(sp),d0
   10eda:	|      move.l d0,-(sp)
   10edc:	|      jsr 1345e <trimStack>
   10ee2:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   10ee4:	|      movea.l 28(sp),a0
   10ee8:	|      movea.l 24(a0),a0
   10eec:	|      move.l (a0),d0
   10eee:	|      moveq #6,d1
   10ef0:	|      cmp.l d0,d1
   10ef2:	|  /-- beq.s 10f06 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   10ef4:	|  |   pea 17319 <PutChar+0x1d23>
   10efa:	|  |   jsr 14b22 <KPrintF>
   10f00:	|  |   addq.l #4,sp
		return BR_ERROR;
   10f02:	|  |   moveq #1,d0
   10f04:	+--|-- bra.s 10f4c <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   10f06:	|  \-> movea.l 28(sp),a0
   10f0a:	|      move.l 24(a0),d0
   10f0e:	|      move.l d0,-(sp)
   10f10:	|      move.l 16(sp),-(sp)
   10f14:	|      jsr c34c <stackToFile>
   10f1a:	|      addq.l #8,sp
   10f1c:	|      tst.w d0
   10f1e:	|  /-- bne.s 10f24 <builtIn_saveCustomData+0xae>
   10f20:	|  |   moveq #1,d0
   10f22:	+--|-- bra.s 10f4c <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   10f24:	|  \-> moveq #24,d0
   10f26:	|      add.l 28(sp),d0
   10f2a:	|      move.l d0,-(sp)
   10f2c:	|      jsr 1345e <trimStack>
   10f32:	|      addq.l #4,sp
	FreeVec(fileName);
   10f34:	|      move.l 12(sp),4(sp)
   10f3a:	|      move.l 187a2 <SysBase>,d0
   10f40:	|      movea.l d0,a6
   10f42:	|      movea.l 4(sp),a1
   10f46:	|      jsr -690(a6)
	return BR_CONTINUE;
   10f4a:	|      moveq #2,d0
}
   10f4c:	\----> movea.l (sp)+,a6
   10f4e:	       lea 16(sp),sp
   10f52:	       rts

00010f54 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   10f54:	       lea -28(sp),sp
   10f58:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10f5a:	       movea.l 40(sp),a0
   10f5e:	       move.l 24(a0),d0
   10f62:	       move.l d0,-(sp)
   10f64:	       jsr 130b0 <getTextFromAnyVar>
   10f6a:	       addq.l #4,sp
   10f6c:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   10f70:	   /-- bne.s 10f78 <builtIn_loadCustomData+0x24>
   10f72:	   |   moveq #1,d0
   10f74:	/--|-- bra.w 11074 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   10f78:	|  \-> move.l 28(sp),-(sp)
   10f7c:	|      jsr 2fe <encodeFilename>
   10f82:	|      addq.l #4,sp
   10f84:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   10f88:	|      move.l 28(sp),20(sp)
   10f8e:	|      move.l 187a2 <SysBase>,d0
   10f94:	|      movea.l d0,a6
   10f96:	|      movea.l 20(sp),a1
   10f9a:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   10f9e:	|      move.l 24(sp),-(sp)
   10fa2:	|      jsr c6fc <failSecurityCheck>
   10fa8:	|      addq.l #4,sp
   10faa:	|      tst.w d0
   10fac:	|  /-- beq.s 10fb4 <builtIn_loadCustomData+0x60>
   10fae:	|  |   moveq #1,d0
   10fb0:	+--|-- bra.w 11074 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   10fb4:	|  \-> moveq #24,d0
   10fb6:	|      add.l 40(sp),d0
   10fba:	|      move.l d0,-(sp)
   10fbc:	|      jsr 1345e <trimStack>
   10fc2:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   10fc4:	|      moveq #28,d0
   10fc6:	|      add.l 40(sp),d0
   10fca:	|      move.l d0,-(sp)
   10fcc:	|      jsr 12d28 <unlinkVar>
   10fd2:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   10fd4:	|      movea.l 40(sp),a0
   10fd8:	|      moveq #6,d0
   10fda:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   10fde:	|      moveq #12,d0
   10fe0:	|      move.l d0,16(sp)
   10fe4:	|      clr.l 12(sp)
   10fe8:	|      move.l 187a2 <SysBase>,d0
   10fee:	|      movea.l d0,a6
   10ff0:	|      move.l 16(sp),d0
   10ff4:	|      move.l 12(sp),d1
   10ff8:	|      jsr -684(a6)
   10ffc:	|      move.l d0,8(sp)
   11000:	|      move.l 8(sp),d0
   11004:	|      movea.l 40(sp),a0
   11008:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   1100c:	|      movea.l 40(sp),a0
   11010:	|      move.l 32(a0),d0
   11014:	|  /-- bne.s 1101a <builtIn_loadCustomData+0xc6>
   11016:	|  |   moveq #1,d0
   11018:	+--|-- bra.s 11074 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   1101a:	|  \-> movea.l 40(sp),a0
   1101e:	|      movea.l 32(a0),a0
   11022:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   11024:	|      movea.l 40(sp),a0
   11028:	|      movea.l 32(a0),a0
   1102c:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   11030:	|      movea.l 40(sp),a0
   11034:	|      movea.l 32(a0),a0
   11038:	|      moveq #1,d0
   1103a:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   1103e:	|      movea.l 40(sp),a0
   11042:	|      move.l 32(a0),d0
   11046:	|      move.l d0,-(sp)
   11048:	|      move.l 28(sp),-(sp)
   1104c:	|      jsr bd86 <fileToStack>
   11052:	|      addq.l #8,sp
   11054:	|      tst.w d0
   11056:	|  /-- bne.s 1105c <builtIn_loadCustomData+0x108>
   11058:	|  |   moveq #1,d0
   1105a:	+--|-- bra.s 11074 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   1105c:	|  \-> move.l 24(sp),4(sp)
   11062:	|      move.l 187a2 <SysBase>,d0
   11068:	|      movea.l d0,a6
   1106a:	|      movea.l 4(sp),a1
   1106e:	|      jsr -690(a6)
	return BR_CONTINUE;
   11072:	|      moveq #2,d0
}
   11074:	\----> movea.l (sp)+,a6
   11076:	       lea 28(sp),sp
   1107a:	       rts

0001107c <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   1107c:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1107e:	       movea.l 12(sp),a0
   11082:	       move.l 24(a0),d0
   11086:	       move.l d0,-(sp)
   11088:	       pea 1 <_start+0x1>
   1108c:	       move.l sp,d0
   1108e:	       addq.l #8,d0
   11090:	       move.l d0,-(sp)
   11092:	       jsr 12ada <getValueType>
   11098:	       lea 12(sp),sp
   1109c:	       tst.w d0
   1109e:	   /-- bne.s 110a4 <builtIn_setCustomEncoding+0x28>
   110a0:	   |   moveq #1,d0
   110a2:	/--|-- bra.s 110da <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   110a4:	|  \-> move.l (sp),d0
   110a6:	|      move.l d0,d0
   110a8:	|      move.w d0,188ae <saveEncoding>
	trimStack (&fun -> stack);
   110ae:	|      moveq #24,d0
   110b0:	|      add.l 12(sp),d0
   110b4:	|      move.l d0,-(sp)
   110b6:	|      jsr 1345e <trimStack>
   110bc:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   110be:	|      moveq #28,d0
   110c0:	|      add.l 12(sp),d0
   110c4:	|      pea 1 <_start+0x1>
   110c8:	|      pea 1 <_start+0x1>
   110cc:	|      move.l d0,-(sp)
   110ce:	|      jsr 133cc <setVariable>
   110d4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   110d8:	|      moveq #2,d0
}
   110da:	\----> addq.l #4,sp
   110dc:	       rts

000110de <builtIn_freeSound>:

builtIn(freeSound)
{
   110de:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   110e0:	       movea.l 12(sp),a0
   110e4:	       move.l 24(a0),d0
   110e8:	       move.l d0,-(sp)
   110ea:	       pea 5 <_start+0x5>
   110ee:	       move.l sp,d0
   110f0:	       addq.l #8,d0
   110f2:	       move.l d0,-(sp)
   110f4:	       jsr 12ada <getValueType>
   110fa:	       lea 12(sp),sp
   110fe:	       tst.w d0
   11100:	   /-- bne.s 11106 <builtIn_freeSound+0x28>
   11102:	   |   moveq #1,d0
   11104:	/--|-- bra.s 11124 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   11106:	|  \-> moveq #24,d0
   11108:	|      add.l 12(sp),d0
   1110c:	|      move.l d0,-(sp)
   1110e:	|      jsr 1345e <trimStack>
   11114:	|      addq.l #4,sp
	huntKillFreeSound (v);
   11116:	|      move.l (sp),d0
   11118:	|      move.l d0,-(sp)
   1111a:	|      jsr b554 <huntKillFreeSound>
   11120:	|      addq.l #4,sp
	return BR_CONTINUE;
   11122:	|      moveq #2,d0
}
   11124:	\----> addq.l #4,sp
   11126:	       rts

00011128 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   11128:	       lea -12(sp),sp
   1112c:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1112e:	       movea.l 24(sp),a0
   11132:	       move.l 24(a0),d0
   11136:	       move.l d0,-(sp)
   11138:	       pea 1 <_start+0x1>
   1113c:	       moveq #16,d0
   1113e:	       add.l sp,d0
   11140:	       move.l d0,-(sp)
   11142:	       jsr 12ada <getValueType>
   11148:	       lea 12(sp),sp
   1114c:	       tst.w d0
   1114e:	   /-- bne.s 11156 <builtIn_parallaxAdd+0x2e>
   11150:	   |   moveq #1,d0
   11152:	/--|-- bra.w 1122a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11156:	|  \-> moveq #24,d0
   11158:	|      add.l 24(sp),d0
   1115c:	|      move.l d0,-(sp)
   1115e:	|      jsr 1345e <trimStack>
   11164:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11166:	|      movea.l 24(sp),a0
   1116a:	|      move.l 24(a0),d0
   1116e:	|      move.l d0,-(sp)
   11170:	|      pea 1 <_start+0x1>
   11174:	|      moveq #20,d0
   11176:	|      add.l sp,d0
   11178:	|      move.l d0,-(sp)
   1117a:	|      jsr 12ada <getValueType>
   11180:	|      lea 12(sp),sp
   11184:	|      tst.w d0
   11186:	|  /-- bne.s 1118e <builtIn_parallaxAdd+0x66>
   11188:	|  |   moveq #1,d0
   1118a:	+--|-- bra.w 1122a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1118e:	|  \-> moveq #24,d0
   11190:	|      add.l 24(sp),d0
   11194:	|      move.l d0,-(sp)
   11196:	|      jsr 1345e <trimStack>
   1119c:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1119e:	|      movea.l 24(sp),a0
   111a2:	|      move.l 24(a0),d0
   111a6:	|      move.l d0,-(sp)
   111a8:	|      pea 5 <_start+0x5>
   111ac:	|      lea 12(sp),a0
   111b0:	|      move.l a0,-(sp)
   111b2:	|      jsr 12ada <getValueType>
   111b8:	|      lea 12(sp),sp
   111bc:	|      tst.w d0
   111be:	|  /-- bne.s 111c4 <builtIn_parallaxAdd+0x9c>
   111c0:	|  |   moveq #1,d0
   111c2:	+--|-- bra.s 1122a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   111c4:	|  \-> moveq #24,d0
   111c6:	|      add.l 24(sp),d0
   111ca:	|      move.l d0,-(sp)
   111cc:	|      jsr 1345e <trimStack>
   111d2:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   111d4:	|      move.l 8(sp),d0
   111d8:	|      move.l d0,d0
   111da:	|      moveq #0,d2
   111dc:	|      move.w d0,d2
   111de:	|      move.l 12(sp),d0
   111e2:	|      move.l d0,d0
   111e4:	|      moveq #0,d1
   111e6:	|      move.w d0,d1
   111e8:	|      move.l 4(sp),d0
   111ec:	|      move.l d0,d0
   111ee:	|      move.w d0,d0
   111f0:	|      andi.l #65535,d0
   111f6:	|      move.l d2,-(sp)
   111f8:	|      move.l d1,-(sp)
   111fa:	|      move.l d0,-(sp)
   111fc:	|      jsr b770 <loadParallax>
   11202:	|      lea 12(sp),sp
   11206:	|      tst.w d0
   11208:	|  /-- bne.s 1120e <builtIn_parallaxAdd+0xe6>
   1120a:	|  |   moveq #1,d0
   1120c:	+--|-- bra.s 1122a <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   1120e:	|  \-> moveq #28,d0
   11210:	|      add.l 24(sp),d0
   11214:	|      pea 1 <_start+0x1>
   11218:	|      pea 1 <_start+0x1>
   1121c:	|      move.l d0,-(sp)
   1121e:	|      jsr 133cc <setVariable>
   11224:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   11228:	|      moveq #2,d0
}
   1122a:	\----> move.l (sp)+,d2
   1122c:	       lea 12(sp),sp
   11230:	       rts

00011232 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   11232:	jsr b6a8 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   11238:	moveq #28,d0
   1123a:	add.l 8(sp),d0
   1123e:	pea 1 <_start+0x1>
   11242:	pea 1 <_start+0x1>
   11246:	move.l d0,-(sp)
   11248:	jsr 133cc <setVariable>
   1124e:	lea 12(sp),sp
	return BR_CONTINUE;
   11252:	moveq #2,d0
}
   11254:	rts

00011256 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   11256:	pea 17337 <PutChar+0x1d41>
   1125c:	jsr 14b22 <KPrintF>
   11262:	addq.l #4,sp

	return BR_CONTINUE;
   11264:	moveq #2,d0
}
   11266:	rts

00011268 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   11268:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   1126a:	             movea.l 16(sp),a0
   1126e:	             movea.l 24(a0),a0
   11272:	             move.l (a0),d0
   11274:	             moveq #1,d1
   11276:	             cmp.l d0,d1
   11278:	      /----- beq.s 112c0 <builtIn_makeFastArray+0x58>
   1127a:	      |      moveq #6,d1
   1127c:	      |      cmp.l d0,d1
   1127e:	/-----|----- bne.s 112fe <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   11280:	|     |      movea.l 16(sp),a0
   11284:	|     |      movea.l 24(a0),a0
   11288:	|     |      move.l 4(a0),d1
   1128c:	|     |      moveq #28,d0
   1128e:	|     |      add.l 16(sp),d0
   11292:	|     |      move.l d1,-(sp)
   11294:	|     |      move.l d0,-(sp)
   11296:	|     |      jsr 12b8c <makeFastArrayFromStack>
   1129c:	|     |      addq.l #8,sp
   1129e:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   112a2:	|     |      moveq #24,d0
   112a4:	|     |      add.l 16(sp),d0
   112a8:	|     |      move.l d0,-(sp)
   112aa:	|     |      jsr 1345e <trimStack>
   112b0:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   112b2:	|     |      tst.w 6(sp)
   112b6:	|     |  /-- beq.s 112bc <builtIn_makeFastArray+0x54>
   112b8:	|     |  |   moveq #2,d0
   112ba:	|  /--|--|-- bra.s 11310 <builtIn_makeFastArray+0xa8>
   112bc:	|  |  |  \-> moveq #1,d0
   112be:	|  +--|----- bra.s 11310 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   112c0:	|  |  \----> movea.l 16(sp),a0
   112c4:	|  |         movea.l 24(a0),a0
   112c8:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   112ce:	|  |         moveq #24,d0
   112d0:	|  |         add.l 16(sp),d0
   112d4:	|  |         move.l d0,-(sp)
   112d6:	|  |         jsr 1345e <trimStack>
   112dc:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   112de:	|  |         moveq #28,d0
   112e0:	|  |         add.l 16(sp),d0
   112e4:	|  |         move.l 2(sp),-(sp)
   112e8:	|  |         move.l d0,-(sp)
   112ea:	|  |         jsr 12bf6 <makeFastArraySize>
   112f0:	|  |         addq.l #8,sp
   112f2:	|  |         tst.w d0
   112f4:	|  |     /-- beq.s 112fa <builtIn_makeFastArray+0x92>
   112f6:	|  |     |   moveq #2,d0
   112f8:	|  +-----|-- bra.s 11310 <builtIn_makeFastArray+0xa8>
   112fa:	|  |     \-> moveq #1,d0
   112fc:	|  +-------- bra.s 11310 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   112fe:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   11300:	   |         pea 17360 <PutChar+0x1d6a>
   11306:	   |         jsr 14b22 <KPrintF>
   1130c:	   |         addq.l #4,sp
	return BR_ERROR;
   1130e:	   |         moveq #1,d0
}
   11310:	   \-------> addq.l #8,sp
   11312:	             rts

00011314 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   11314:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11316:	          movea.l 16(sp),a0
   1131a:	          move.l 24(a0),d0
   1131e:	          move.l d0,-(sp)
   11320:	          pea 7 <_start+0x7>
   11324:	          move.l sp,d0
   11326:	          addq.l #8,d0
   11328:	          move.l d0,-(sp)
   1132a:	          jsr 12ada <getValueType>
   11330:	          lea 12(sp),sp
   11334:	          tst.w d0
   11336:	      /-- bne.s 1133c <builtIn_getCharacterScale+0x28>
   11338:	      |   moveq #1,d0
   1133a:	/-----|-- bra.s 113b6 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   1133c:	|     \-> moveq #24,d0
   1133e:	|         add.l 16(sp),d0
   11342:	|         move.l d0,-(sp)
   11344:	|         jsr 1345e <trimStack>
   1134a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1134c:	|         move.l (sp),d0
   1134e:	|         move.l d0,-(sp)
   11350:	|         jsr 8b7a <findPerson>
   11356:	|         addq.l #4,sp
   11358:	|         move.l d0,4(sp)
	if (pers) {
   1135c:	|  /----- beq.s 1139c <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1135e:	|  |      movea.l 4(sp),a0
   11362:	|  |      move.l 20(a0),d0
   11366:	|  |      move.l #1120403456,-(sp)
   1136c:	|  |      move.l d0,-(sp)
   1136e:	|  |      jsr 15010 <__mulsf3>
   11374:	|  |      addq.l #8,sp
   11376:	|  |      move.l d0,-(sp)
   11378:	|  |      jsr 14ef6 <__fixsfsi>
   1137e:	|  |      addq.l #4,sp
   11380:	|  |      move.l d0,d1
   11382:	|  |      moveq #28,d0
   11384:	|  |      add.l 16(sp),d0
   11388:	|  |      move.l d1,-(sp)
   1138a:	|  |      pea 1 <_start+0x1>
   1138e:	|  |      move.l d0,-(sp)
   11390:	|  |      jsr 133cc <setVariable>
   11396:	|  |      lea 12(sp),sp
   1139a:	|  |  /-- bra.s 113b4 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1139c:	|  \--|-> moveq #28,d0
   1139e:	|     |   add.l 16(sp),d0
   113a2:	|     |   clr.l -(sp)
   113a4:	|     |   pea 1 <_start+0x1>
   113a8:	|     |   move.l d0,-(sp)
   113aa:	|     |   jsr 133cc <setVariable>
   113b0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   113b4:	|     \-> moveq #2,d0
}
   113b6:	\-------> addq.l #8,sp
   113b8:	          rts

000113ba <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   113ba:	move.l 188d2 <gameSettings>,d0
   113c0:	move.l d0,d1
   113c2:	moveq #28,d0
   113c4:	add.l 8(sp),d0
   113c8:	move.l d1,-(sp)
   113ca:	pea 1 <_start+0x1>
   113ce:	move.l d0,-(sp)
   113d0:	jsr 133cc <setVariable>
   113d6:	lea 12(sp),sp
	return BR_CONTINUE;
   113da:	moveq #2,d0
}
   113dc:	rts

000113de <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   113de:	moveq #24,d0
   113e0:	add.l 8(sp),d0
   113e4:	move.l d0,-(sp)
   113e6:	jsr 1345e <trimStack>
   113ec:	addq.l #4,sp
	trimStack (&fun -> stack);
   113ee:	moveq #24,d0
   113f0:	add.l 8(sp),d0
   113f4:	move.l d0,-(sp)
   113f6:	jsr 1345e <trimStack>
   113fc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   113fe:	moveq #28,d0
   11400:	add.l 8(sp),d0
   11404:	clr.l -(sp)
   11406:	pea 1 <_start+0x1>
   1140a:	move.l d0,-(sp)
   1140c:	jsr 133cc <setVariable>
   11412:	lea 12(sp),sp

	return BR_CONTINUE;
   11416:	moveq #2,d0

}
   11418:	rts

0001141a <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   1141a:	move.l 18124 <lastFramesPerSecond>,d1
   11420:	moveq #28,d0
   11422:	add.l 8(sp),d0
   11426:	move.l d1,-(sp)
   11428:	pea 1 <_start+0x1>
   1142c:	move.l d0,-(sp)
   1142e:	jsr 133cc <setVariable>
   11434:	lea 12(sp),sp
	return BR_CONTINUE;
   11438:	moveq #2,d0
}
   1143a:	rts

0001143c <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   1143c:	moveq #2,d0
}
   1143e:	rts

00011440 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   11440:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11444:	          movea.l 60(sp),a0
   11448:	          move.l 24(a0),d0
   1144c:	          move.l d0,-(sp)
   1144e:	          pea 1 <_start+0x1>
   11452:	          pea 186ba <thumbHeight>
   11458:	          jsr 12ada <getValueType>
   1145e:	          lea 12(sp),sp
   11462:	          tst.w d0
   11464:	      /-- bne.s 1146c <builtIn_setThumbnailSize+0x2c>
   11466:	      |   moveq #1,d0
   11468:	/-----|-- bra.w 11528 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1146c:	|     \-> moveq #24,d0
   1146e:	|         add.l 60(sp),d0
   11472:	|         move.l d0,-(sp)
   11474:	|         jsr 1345e <trimStack>
   1147a:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1147c:	|         movea.l 60(sp),a0
   11480:	|         move.l 24(a0),d0
   11484:	|         move.l d0,-(sp)
   11486:	|         pea 1 <_start+0x1>
   1148a:	|         pea 186b6 <thumbWidth>
   11490:	|         jsr 12ada <getValueType>
   11496:	|         lea 12(sp),sp
   1149a:	|         tst.w d0
   1149c:	|     /-- bne.s 114a4 <builtIn_setThumbnailSize+0x64>
   1149e:	|     |   moveq #1,d0
   114a0:	+-----|-- bra.w 11528 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   114a4:	|     \-> moveq #24,d0
   114a6:	|         add.l 60(sp),d0
   114aa:	|         move.l d0,-(sp)
   114ac:	|         jsr 1345e <trimStack>
   114b2:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   114b4:	|         move.l 186b6 <thumbWidth>,d0
   114ba:	|     /-- bmi.s 114e8 <builtIn_setThumbnailSize+0xa8>
   114bc:	|     |   move.l 186ba <thumbHeight>,d0
   114c2:	|     +-- bmi.s 114e8 <builtIn_setThumbnailSize+0xa8>
   114c4:	|     |   move.l 186b6 <thumbWidth>,d0
   114ca:	|     |   move.l d0,d1
   114cc:	|     |   move.l 186f6 <winWidth>,d0
   114d2:	|     |   cmp.l d1,d0
   114d4:	|     +-- bcs.s 114e8 <builtIn_setThumbnailSize+0xa8>
   114d6:	|     |   move.l 186ba <thumbHeight>,d0
   114dc:	|     |   move.l d0,d1
   114de:	|     |   move.l 186fa <winHeight>,d0
   114e4:	|     |   cmp.l d1,d0
   114e6:	|  /--|-- bcc.s 11526 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   114e8:	|  |  \-> move.l 186ba <thumbHeight>,d1
   114ee:	|  |      move.l 186b6 <thumbWidth>,d0
   114f4:	|  |      move.l d1,-(sp)
   114f6:	|  |      move.l d0,-(sp)
   114f8:	|  |      pea 17387 <PutChar+0x1d91>
   114fe:	|  |      lea 14(sp),a0
   11502:	|  |      move.l a0,-(sp)
   11504:	|  |      jsr 122e4 <sprintf>
   1150a:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   1150e:	|  |      lea 2(sp),a0
   11512:	|  |      move.l a0,-(sp)
   11514:	|  |      pea 1738f <PutChar+0x1d99>
   1151a:	|  |      jsr 14b22 <KPrintF>
   11520:	|  |      addq.l #8,sp
		return BR_ERROR;
   11522:	|  |      moveq #1,d0
   11524:	+--|----- bra.s 11528 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   11526:	|  \----> moveq #2,d0
}
   11528:	\-------> lea 52(sp),sp
   1152c:	          rts

0001152e <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1152e:	       lea -12(sp),sp
   11532:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11534:	       movea.l 24(sp),a0
   11538:	       move.l 24(a0),d0
   1153c:	       move.l d0,-(sp)
   1153e:	       pea 1 <_start+0x1>
   11542:	       lea 12(sp),a0
   11546:	       move.l a0,-(sp)
   11548:	       jsr 12ada <getValueType>
   1154e:	       lea 12(sp),sp
   11552:	       tst.w d0
   11554:	   /-- bne.s 1155c <builtIn_hasFlag+0x2e>
   11556:	   |   moveq #1,d0
   11558:	/--|-- bra.w 115ec <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1155c:	|  \-> moveq #24,d0
   1155e:	|      add.l 24(sp),d0
   11562:	|      move.l d0,-(sp)
   11564:	|      jsr 1345e <trimStack>
   1156a:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1156c:	|      movea.l 24(sp),a0
   11570:	|      move.l 24(a0),d0
   11574:	|      move.l d0,-(sp)
   11576:	|      pea 7 <_start+0x7>
   1157a:	|      moveq #16,d0
   1157c:	|      add.l sp,d0
   1157e:	|      move.l d0,-(sp)
   11580:	|      jsr 12ada <getValueType>
   11586:	|      lea 12(sp),sp
   1158a:	|      tst.w d0
   1158c:	|  /-- bne.s 11592 <builtIn_hasFlag+0x64>
   1158e:	|  |   moveq #1,d0
   11590:	+--|-- bra.s 115ec <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   11592:	|  \-> moveq #24,d0
   11594:	|      add.l 24(sp),d0
   11598:	|      move.l d0,-(sp)
   1159a:	|      jsr 1345e <trimStack>
   115a0:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   115a2:	|      move.l 8(sp),d0
   115a6:	|      move.l d0,-(sp)
   115a8:	|      jsr b910 <findObjectType>
   115ae:	|      addq.l #4,sp
   115b0:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   115b4:	|  /-- bne.s 115ba <builtIn_hasFlag+0x8c>
   115b6:	|  |   moveq #1,d0
   115b8:	+--|-- bra.s 115ec <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   115ba:	|  \-> movea.l 12(sp),a0
   115be:	|      move.w 36(a0),d0
   115c2:	|      moveq #0,d2
   115c4:	|      move.w d0,d2
   115c6:	|      move.l 4(sp),d1
   115ca:	|      moveq #1,d0
   115cc:	|      lsl.l d1,d0
   115ce:	|      move.l d2,d1
   115d0:	|      and.l d0,d1
   115d2:	|      moveq #28,d0
   115d4:	|      add.l 24(sp),d0
   115d8:	|      move.l d1,-(sp)
   115da:	|      pea 1 <_start+0x1>
   115de:	|      move.l d0,-(sp)
   115e0:	|      jsr 133cc <setVariable>
   115e6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   115ea:	|      moveq #2,d0
}
   115ec:	\----> move.l (sp)+,d2
   115ee:	       lea 12(sp),sp
   115f2:	       rts

000115f4 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   115f4:	       jsr b8fe <snapshot>
   115fa:	       tst.w d0
   115fc:	/----- beq.s 11602 <builtIn_snapshotGrab+0xe>
   115fe:	|      moveq #2,d0
   11600:	|  /-- bra.s 11604 <builtIn_snapshotGrab+0x10>
   11602:	\--|-> moveq #1,d0
}
   11604:	   \-> rts

00011606 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   11606:	jsr b7b6 <nosnapshot>
	return BR_CONTINUE;
   1160c:	moveq #2,d0
}
   1160e:	rts

00011610 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   11610:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   11612:	move.w 18000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1161a:	movea.l 12(sp),a0
   1161e:	move.l 24(a0),d0
   11622:	move.l d0,-(sp)
   11624:	jsr 1301a <getBoolean>
   1162a:	addq.l #4,sp
   1162c:	move.w d0,18000 <allowAnyFilename>
	trimStack (&fun -> stack);
   11632:	moveq #24,d0
   11634:	add.l 12(sp),d0
   11638:	move.l d0,-(sp)
   1163a:	jsr 1345e <trimStack>
   11640:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   11642:	movea.w 2(sp),a0
   11646:	moveq #28,d0
   11648:	add.l 12(sp),d0
   1164c:	move.l a0,-(sp)
   1164e:	pea 1 <_start+0x1>
   11652:	move.l d0,-(sp)
   11654:	jsr 133cc <setVariable>
   1165a:	lea 12(sp),sp
	return BR_CONTINUE;
   1165e:	moveq #2,d0
}
   11660:	addq.l #4,sp
   11662:	rts

00011664 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   11664:	moveq #24,d0
   11666:	add.l 8(sp),d0
   1166a:	move.l d0,-(sp)
   1166c:	jsr 1345e <trimStack>
   11672:	addq.l #4,sp
	trimStack (&fun -> stack);
   11674:	moveq #24,d0
   11676:	add.l 8(sp),d0
   1167a:	move.l d0,-(sp)
   1167c:	jsr 1345e <trimStack>
   11682:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   11684:	moveq #28,d0
   11686:	add.l 8(sp),d0
   1168a:	clr.l -(sp)
   1168c:	pea 1 <_start+0x1>
   11690:	move.l d0,-(sp)
   11692:	jsr 133cc <setVariable>
   11698:	lea 12(sp),sp

	return BR_CONTINUE;
   1169c:	moveq #2,d0
}
   1169e:	rts

000116a0 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   116a0:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   116a2:	movea.l 12(sp),a0
   116a6:	move.l 24(a0),d0
   116aa:	move.l d0,-(sp)
   116ac:	jsr 130b0 <getTextFromAnyVar>
   116b2:	addq.l #4,sp
   116b4:	move.l d0,(sp)
	trimStack (&fun -> stack);
   116b6:	moveq #24,d0
   116b8:	add.l 12(sp),d0
   116bc:	move.l d0,-(sp)
   116be:	jsr 1345e <trimStack>
   116c4:	addq.l #4,sp
	KPrintF (mess);
   116c6:	move.l (sp),-(sp)
   116c8:	jsr 14b22 <KPrintF>
   116ce:	addq.l #4,sp
	return BR_ERROR;
   116d0:	moveq #1,d0
}
   116d2:	addq.l #4,sp
   116d4:	rts

000116d6 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   116d6:	moveq #24,d0
   116d8:	add.l 8(sp),d0
   116dc:	move.l d0,-(sp)
   116de:	jsr 1345e <trimStack>
   116e4:	addq.l #4,sp
	trimStack (&fun -> stack);
   116e6:	moveq #24,d0
   116e8:	add.l 8(sp),d0
   116ec:	move.l d0,-(sp)
   116ee:	jsr 1345e <trimStack>
   116f4:	addq.l #4,sp
	trimStack (&fun -> stack);
   116f6:	moveq #24,d0
   116f8:	add.l 8(sp),d0
   116fc:	move.l d0,-(sp)
   116fe:	jsr 1345e <trimStack>
   11704:	addq.l #4,sp
	trimStack (&fun -> stack);
   11706:	moveq #24,d0
   11708:	add.l 8(sp),d0
   1170c:	move.l d0,-(sp)
   1170e:	jsr 1345e <trimStack>
   11714:	addq.l #4,sp

	return BR_CONTINUE;
   11716:	moveq #2,d0
}
   11718:	rts

0001171a <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1171a:	moveq #24,d0
   1171c:	add.l 8(sp),d0
   11720:	move.l d0,-(sp)
   11722:	jsr 1345e <trimStack>
   11728:	addq.l #4,sp
	trimStack (&fun -> stack);
   1172a:	moveq #24,d0
   1172c:	add.l 8(sp),d0
   11730:	move.l d0,-(sp)
   11732:	jsr 1345e <trimStack>
   11738:	addq.l #4,sp
	trimStack (&fun -> stack);
   1173a:	moveq #24,d0
   1173c:	add.l 8(sp),d0
   11740:	move.l d0,-(sp)
   11742:	jsr 1345e <trimStack>
   11748:	addq.l #4,sp

	return BR_CONTINUE;
   1174a:	moveq #2,d0

}
   1174c:	rts

0001174e <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   1174e:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   11750:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   11756:	sne d0
   11758:	neg.b d0
   1175a:	moveq #0,d1
   1175c:	move.b d0,d1
   1175e:	moveq #28,d0
   11760:	add.l 12(sp),d0
   11764:	move.l d1,-(sp)
   11766:	pea 1 <_start+0x1>
   1176a:	move.l d0,-(sp)
   1176c:	jsr 133cc <setVariable>
   11772:	lea 12(sp),sp
	return BR_CONTINUE;
   11776:	moveq #2,d0
}
   11778:	addq.l #4,sp
   1177a:	rts

0001177c <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   1177c:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   1177e:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   11784:	pea 173a6 <PutChar+0x1db0>
   1178a:	jsr 14b22 <KPrintF>
   11790:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   11792:	tst.w 2(sp)
   11796:	sne d0
   11798:	neg.b d0
   1179a:	moveq #0,d1
   1179c:	move.b d0,d1
   1179e:	moveq #28,d0
   117a0:	add.l 12(sp),d0
   117a4:	move.l d1,-(sp)
   117a6:	pea 1 <_start+0x1>
   117aa:	move.l d0,-(sp)
   117ac:	jsr 133cc <setVariable>
   117b2:	lea 12(sp),sp
	return BR_CONTINUE;
   117b6:	moveq #2,d0
}
   117b8:	addq.l #4,sp
   117ba:	rts

000117bc <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   117bc:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   117c0:	             move.l 104(sp),d0
   117c4:	             cmpi.l #166,d0
   117ca:	/----------- bhi.w 118ac <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   117ce:	|            move.l 104(sp),d0
   117d2:	|            add.l d0,d0
   117d4:	|            movea.l d0,a1
   117d6:	|            adda.l d0,a1
   117d8:	|            lea 18146 <paramNum>,a0
   117de:	|            move.l (0,a1,a0.l),d0
   117e2:	|            moveq #-1,d1
   117e4:	|            cmp.l d0,d1
   117e6:	|  /-------- beq.w 11874 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   117ea:	|  |         move.l 104(sp),d0
   117ee:	|  |         add.l d0,d0
   117f0:	|  |         movea.l d0,a1
   117f2:	|  |         adda.l d0,a1
   117f4:	|  |         lea 18146 <paramNum>,a0
   117fa:	|  |         move.l (0,a1,a0.l),d0
   117fe:	|  |         cmp.l 108(sp),d0
   11802:	|  +-------- beq.s 11874 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   11804:	|  |         move.l 104(sp),d0
   11808:	|  |         add.l d0,d0
   1180a:	|  |         movea.l d0,a1
   1180c:	|  |         adda.l d0,a1
   1180e:	|  |         lea 18146 <paramNum>,a0
   11814:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   11818:	|  |         moveq #1,d1
   1181a:	|  |         cmp.l d0,d1
   1181c:	|  |  /----- bne.s 11826 <callBuiltIn+0x6a>
   1181e:	|  |  |      move.l #90202,d0
   11824:	|  |  |  /-- bra.s 1182c <callBuiltIn+0x70>
   11826:	|  |  \--|-> move.l #95196,d0
   1182c:	|  |     \-> move.l 104(sp),d1
   11830:	|  |         add.l d1,d1
   11832:	|  |         movea.l d1,a1
   11834:	|  |         adda.l d1,a1
   11836:	|  |         lea 18146 <paramNum>,a0
   1183c:	|  |         move.l (0,a1,a0.l),d1
   11840:	|  |         move.l d0,-(sp)
   11842:	|  |         move.l d1,-(sp)
   11844:	|  |         pea 173de <PutChar+0x1de8>
   1184a:	|  |         lea 12(sp),a0
   1184e:	|  |         move.l a0,-(sp)
   11850:	|  |         jsr 122e4 <sprintf>
   11856:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   1185a:	|  |         movea.l sp,a0
   1185c:	|  |         move.l a0,-(sp)
   1185e:	|  |         jsr b8 <copyString>
   11864:	|  |         addq.l #4,sp
   11866:	|  |         move.l d0,-(sp)
   11868:	|  |         jsr 14b22 <KPrintF>
   1186e:	|  |         addq.l #4,sp
				return BR_ERROR;
   11870:	|  |         moveq #1,d0
   11872:	|  |     /-- bra.s 118bc <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   11874:	|  \-----|-> move.l 104(sp),d0
   11878:	|        |   add.l d0,d0
   1187a:	|        |   movea.l d0,a1
   1187c:	|        |   adda.l d0,a1
   1187e:	|        |   lea 183e2 <builtInFunctionArray>,a0
   11884:	|        |   move.l (0,a1,a0.l),d0
   11888:	+--------|-- beq.s 118ac <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   1188a:	|        |   move.l 104(sp),d0
   1188e:	|        |   add.l d0,d0
   11890:	|        |   movea.l d0,a1
   11892:	|        |   adda.l d0,a1
   11894:	|        |   lea 183e2 <builtInFunctionArray>,a0
   1189a:	|        |   movea.l (0,a1,a0.l),a0
   1189e:	|        |   move.l 112(sp),-(sp)
   118a2:	|        |   move.l 112(sp),-(sp)
   118a6:	|        |   jsr (a0)
   118a8:	|        |   addq.l #8,sp
   118aa:	|        +-- bra.s 118bc <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   118ac:	\--------|-> pea 17409 <PutChar+0x1e13>
   118b2:	         |   jsr 14b22 <KPrintF>
   118b8:	         |   addq.l #4,sp
	return BR_ERROR;
   118ba:	         |   moveq #1,d0
}
   118bc:	         \-> lea 100(sp),sp
   118c0:	             rts

000118c2 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   118c2:	          subq.l #8,sp
	int indexNum = -1;
   118c4:	          moveq #-1,d0
   118c6:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   118ca:	          clr.l (sp)
   118cc:	   /----- bra.s 118f2 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   118ce:	/--|----> move.l 188ca <languageTable>,d1
   118d4:	|  |      move.l (sp),d0
   118d6:	|  |      add.l d0,d0
   118d8:	|  |      add.l d0,d0
   118da:	|  |      movea.l d1,a0
   118dc:	|  |      adda.l d0,a0
   118de:	|  |      move.l (a0),d0
   118e0:	|  |      move.l d0,d1
   118e2:	|  |      move.l 188d2 <gameSettings>,d0
   118e8:	|  |      cmp.l d1,d0
   118ea:	|  |  /-- bne.s 118f0 <getLanguageForFileB+0x2e>
   118ec:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   118f0:	|  |  \-> addq.l #1,(sp)
   118f2:	|  \----> move.l 188d6 <gameSettings+0x4>,d0
   118f8:	|         cmp.l (sp),d0
   118fa:	\-------- bcc.s 118ce <getLanguageForFileB+0xc>
	}

	return indexNum;
   118fc:	          move.l 4(sp),d0
}
   11900:	          addq.l #8,sp
   11902:	          rts

00011904 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   11904:	          lea -20(sp),sp
   11908:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1190a:	          move.l 28(sp),-(sp)
   1190e:	          jsr 11fc6 <strlen>
   11914:	          addq.l #4,sp
   11916:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1191a:	          moveq #4,d0
   1191c:	          cmp.l 12(sp),d0
   11920:	      /-- bge.s 11944 <getPrefsFilename+0x40>
   11922:	      |   move.l 12(sp),d0
   11926:	      |   subq.l #4,d0
   11928:	      |   movea.l 28(sp),a0
   1192c:	      |   adda.l d0,a0
   1192e:	      |   move.b (a0),d0
   11930:	      |   cmpi.b #46,d0
   11934:	      +-- bne.s 11944 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   11936:	      |   move.l 12(sp),d0
   1193a:	      |   subq.l #4,d0
   1193c:	      |   movea.l 28(sp),a0
   11940:	      |   adda.l d0,a0
   11942:	      |   clr.b (a0)
	}

	char * f = filename;
   11944:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1194a:	          clr.l 20(sp)
   1194e:	   /----- bra.s 11976 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   11950:	/--|----> move.l 20(sp),d0
   11954:	|  |      movea.l 28(sp),a0
   11958:	|  |      adda.l d0,a0
   1195a:	|  |      move.b (a0),d0
   1195c:	|  |      cmpi.b #47,d0
   11960:	|  |  /-- bne.s 11972 <getPrefsFilename+0x6e>
   11962:	|  |  |   move.l 20(sp),d0
   11966:	|  |  |   addq.l #1,d0
   11968:	|  |  |   move.l 28(sp),d1
   1196c:	|  |  |   add.l d0,d1
   1196e:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   11972:	|  |  \-> addq.l #1,20(sp)
   11976:	|  \----> move.l 20(sp),d0
   1197a:	|         cmp.l 12(sp),d0
   1197e:	\-------- blt.s 11950 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   11980:	          pea 17434 <PutChar+0x1e3e>
   11986:	          move.l 20(sp),-(sp)
   1198a:	          jsr 12006 <joinStrings>
   11990:	          addq.l #8,sp
   11992:	          move.l d0,8(sp)

	FreeVec(filename);
   11996:	          move.l 28(sp),4(sp)
   1199c:	          move.l 187a2 <SysBase>,d0
   119a2:	          movea.l d0,a6
   119a4:	          movea.l 4(sp),a1
   119a8:	          jsr -690(a6)
	filename = NULL;
   119ac:	          clr.l 28(sp)
	return joined;
   119b0:	          move.l 8(sp),d0
}
   119b4:	          movea.l (sp)+,a6
   119b6:	          lea 20(sp),sp
   119ba:	          rts

000119bc <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   119bc:	             lea -28(sp),sp
   119c0:	             move.l a6,-(sp)
   119c2:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   119c4:	             move.l 188d6 <gameSettings+0x4>,d0
   119ca:	             move.l d0,d1
   119cc:	             addq.l #1,d1
   119ce:	             move.l d1,28(sp)
   119d2:	             clr.l 24(sp)
   119d6:	             move.l 187a2 <SysBase>,d0
   119dc:	             movea.l d0,a6
   119de:	             move.l 28(sp),d0
   119e2:	             move.l 24(sp),d1
   119e6:	             jsr -684(a6)
   119ea:	             move.l d0,20(sp)
   119ee:	             move.l 20(sp),d0
   119f2:	             move.l d0,188ca <languageTable>
    if( languageTable == 0) {
   119f8:	             move.l 188ca <languageTable>,d0
   119fe:	         /-- bne.s 11a0e <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   11a00:	         |   pea 17439 <PutChar+0x1e43>
   11a06:	         |   jsr 14b22 <KPrintF>
   11a0c:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   11a0e:	         \-> move.l 188d6 <gameSettings+0x4>,d0
   11a14:	             move.l d0,d1
   11a16:	             addq.l #1,d1
   11a18:	             move.l d1,16(sp)
   11a1c:	             clr.l 12(sp)
   11a20:	             move.l 187a2 <SysBase>,d0
   11a26:	             movea.l d0,a6
   11a28:	             move.l 16(sp),d0
   11a2c:	             move.l 12(sp),d1
   11a30:	             jsr -684(a6)
   11a34:	             move.l d0,8(sp)
   11a38:	             move.l 8(sp),d0
   11a3c:	             move.l d0,188ce <languageName>
	if( languageName == 0) {
   11a42:	             move.l 188ce <languageName>,d0
   11a48:	         /-- bne.s 11a58 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   11a4a:	         |   pea 1746f <PutChar+0x1e79>
   11a50:	         |   jsr 14b22 <KPrintF>
   11a56:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   11a58:	         \-> clr.l 32(sp)
   11a5c:	   /-------- bra.s 11ad4 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   11a5e:	/--|-------> tst.l 32(sp)
   11a62:	|  |  /----- beq.s 11a72 <makeLanguageTable+0xb6>
   11a64:	|  |  |      move.l 40(sp),-(sp)
   11a68:	|  |  |      jsr 6bc <get2bytes>
   11a6e:	|  |  |      addq.l #4,sp
   11a70:	|  |  |  /-- bra.s 11a74 <makeLanguageTable+0xb8>
   11a72:	|  |  \--|-> moveq #0,d0
   11a74:	|  |     \-> movea.l 188ca <languageTable>,a0
   11a7a:	|  |         move.l 32(sp),d1
   11a7e:	|  |         add.l d1,d1
   11a80:	|  |         add.l d1,d1
   11a82:	|  |         adda.l d1,a0
   11a84:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   11a86:	|  |         move.l 188ce <languageName>,d1
   11a8c:	|  |         move.l 32(sp),d0
   11a90:	|  |         add.l d0,d0
   11a92:	|  |         add.l d0,d0
   11a94:	|  |         movea.l d1,a0
   11a96:	|  |         adda.l d0,a0
   11a98:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   11a9a:	|  |         move.l 1874c <gameVersion>,d0
   11aa0:	|  |         cmpi.l #511,d0
   11aa6:	|  |     /-- ble.s 11ad0 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   11aa8:	|  |     |   move.l 188d6 <gameSettings+0x4>,d0
   11aae:	|  |     +-- beq.s 11ad0 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   11ab0:	|  |     |   move.l 188ce <languageName>,d1
   11ab6:	|  |     |   move.l 32(sp),d0
   11aba:	|  |     |   add.l d0,d0
   11abc:	|  |     |   add.l d0,d0
   11abe:	|  |     |   movea.l d1,a2
   11ac0:	|  |     |   adda.l d0,a2
   11ac2:	|  |     |   move.l 40(sp),-(sp)
   11ac6:	|  |     |   jsr b02 <readString>
   11acc:	|  |     |   addq.l #4,sp
   11ace:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   11ad0:	|  |     \-> addq.l #1,32(sp)
   11ad4:	|  \-------> move.l 188d6 <gameSettings+0x4>,d0
   11ada:	|            cmp.l 32(sp),d0
   11ade:	\----------- bcc.w 11a5e <makeLanguageTable+0xa2>
		}
	}
}
   11ae2:	             nop
   11ae4:	             nop
   11ae6:	             movea.l (sp)+,a2
   11ae8:	             movea.l (sp)+,a6
   11aea:	             lea 28(sp),sp
   11aee:	             rts

00011af0 <readIniFile>:

void readIniFile (char * filename) {
   11af0:	                      lea -564(sp),sp
   11af4:	                      move.l a6,-(sp)
   11af6:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   11af8:	                      move.l 576(sp),-(sp)
   11afc:	                      jsr b8 <copyString>
   11b02:	                      addq.l #4,sp
   11b04:	                      move.l d0,-(sp)
   11b06:	                      jsr 11904 <getPrefsFilename>
   11b0c:	                      addq.l #4,sp
   11b0e:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   11b12:	                      move.l 562(sp),558(sp)
   11b18:	                      move.l #1005,554(sp)
   11b20:	                      move.l 187aa <DOSBase>,d0
   11b26:	                      movea.l d0,a6
   11b28:	                      move.l 558(sp),d1
   11b2c:	                      move.l 554(sp),d2
   11b30:	                      jsr -30(a6)
   11b34:	                      move.l d0,550(sp)
   11b38:	                      move.l 550(sp),d0
   11b3c:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   11b40:	                      clr.l 188d2 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   11b46:	                      move.w #1,188da <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   11b4e:	                      clr.l 188dc <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   11b54:	                      moveq #1,d0
   11b56:	                      move.l d0,188e0 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   11b5c:	                      clr.w 188e4 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   11b62:	                      clr.w 188e6 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   11b68:	                      clr.w 188e8 <gameSettings+0x16>

	FreeVec(langName);
   11b6e:	                      move.l 562(sp),542(sp)
   11b74:	                      move.l 187a2 <SysBase>,d0
   11b7a:	                      movea.l d0,a6
   11b7c:	                      movea.l 542(sp),a1
   11b80:	                      jsr -690(a6)
	langName = NULL;
   11b84:	                      clr.l 562(sp)

	if (fp) {
   11b88:	                      tst.l 546(sp)
   11b8c:	/-------------------- beq.w 11e6a <readIniFile+0x37a>
		char lineSoFar[257] = "";
   11b90:	|                     move.l sp,d0
   11b92:	|                     addi.l #265,d0
   11b98:	|                     move.l #257,d1
   11b9e:	|                     move.l d1,-(sp)
   11ba0:	|                     clr.l -(sp)
   11ba2:	|                     move.l d0,-(sp)
   11ba4:	|                     jsr 14aa6 <memset>
   11baa:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   11bae:	|                     move.l sp,d0
   11bb0:	|                     addq.l #8,d0
   11bb2:	|                     move.l #257,d1
   11bb8:	|                     move.l d1,-(sp)
   11bba:	|                     clr.l -(sp)
   11bbc:	|                     move.l d0,-(sp)
   11bbe:	|                     jsr 14aa6 <memset>
   11bc4:	|                     lea 12(sp),sp
		unsigned char here = 0;
   11bc8:	|                     clr.b 571(sp)
		char readChar = ' ';
   11bcc:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   11bd2:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   11bd8:	|                     clr.w 566(sp)
		LONG tmp = 0;
   11bdc:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   11be0:	|  /----------------> move.l 546(sp),534(sp)
   11be6:	|  |                  move.l 187aa <DOSBase>,d0
   11bec:	|  |                  movea.l d0,a6
   11bee:	|  |                  move.l 534(sp),d1
   11bf2:	|  |                  jsr -306(a6)
   11bf6:	|  |                  move.l d0,530(sp)
   11bfa:	|  |                  move.l 530(sp),d0
   11bfe:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   11c02:	|  |                  moveq #-1,d1
   11c04:	|  |                  cmp.l 538(sp),d1
   11c08:	|  |           /----- bne.s 11c16 <readIniFile+0x126>
				readChar = '\n';
   11c0a:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   11c10:	|  |           |      clr.w 568(sp)
   11c14:	|  |           |  /-- bra.s 11c1c <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   11c16:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   11c1c:	|  |              \-> move.b 570(sp),d0
   11c20:	|  |                  ext.w d0
   11c22:	|  |                  movea.w d0,a0
   11c24:	|  |                  moveq #61,d0
   11c26:	|  |                  cmp.l a0,d0
   11c28:	|  |     /----------- beq.w 11dd2 <readIniFile+0x2e2>
   11c2c:	|  |     |            moveq #61,d1
   11c2e:	|  |     |            cmp.l a0,d1
   11c30:	|  |  /--|----------- blt.w 11dde <readIniFile+0x2ee>
   11c34:	|  |  |  |            moveq #10,d0
   11c36:	|  |  |  |            cmp.l a0,d0
   11c38:	|  |  |  |        /-- beq.s 11c42 <readIniFile+0x152>
   11c3a:	|  |  |  |        |   moveq #13,d1
   11c3c:	|  |  |  |        |   cmp.l a0,d1
   11c3e:	|  |  +--|--------|-- bne.w 11dde <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   11c42:	|  |  |  |        \-> tst.w 566(sp)
   11c46:	|  |  |  |     /----- beq.w 11dc0 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   11c4a:	|  |  |  |     |      pea 174a3 <PutChar+0x1ead>
   11c50:	|  |  |  |     |      move.l sp,d0
   11c52:	|  |  |  |     |      addi.l #269,d0
   11c58:	|  |  |  |     |      move.l d0,-(sp)
   11c5a:	|  |  |  |     |      jsr 11f86 <strcmp>
   11c60:	|  |  |  |     |      addq.l #8,sp
   11c62:	|  |  |  |     |      tst.l d0
   11c64:	|  |  |  |     |  /-- bne.s 11c7e <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   11c66:	|  |  |  |     |  |   move.l sp,d0
   11c68:	|  |  |  |     |  |   addq.l #8,d0
   11c6a:	|  |  |  |     |  |   move.l d0,-(sp)
   11c6c:	|  |  |  |     |  |   jsr 11e76 <stringToInt>
   11c72:	|  |  |  |     |  |   addq.l #4,sp
   11c74:	|  |  |  |     |  |   move.l d0,188d2 <gameSettings>
   11c7a:	|  |  |  |     +--|-- bra.w 11dc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   11c7e:	|  |  |  |     |  \-> pea 174ac <PutChar+0x1eb6>
   11c84:	|  |  |  |     |      move.l sp,d0
   11c86:	|  |  |  |     |      addi.l #269,d0
   11c8c:	|  |  |  |     |      move.l d0,-(sp)
   11c8e:	|  |  |  |     |      jsr 11f86 <strcmp>
   11c94:	|  |  |  |     |      addq.l #8,sp
   11c96:	|  |  |  |     |      tst.l d0
   11c98:	|  |  |  |     |  /-- bne.s 11cbe <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   11c9a:	|  |  |  |     |  |   move.l sp,d0
   11c9c:	|  |  |  |     |  |   addq.l #8,d0
   11c9e:	|  |  |  |     |  |   move.l d0,-(sp)
   11ca0:	|  |  |  |     |  |   jsr 11e76 <stringToInt>
   11ca6:	|  |  |  |     |  |   addq.l #4,sp
   11ca8:	|  |  |  |     |  |   tst.l d0
   11caa:	|  |  |  |     |  |   seq d0
   11cac:	|  |  |  |     |  |   neg.b d0
   11cae:	|  |  |  |     |  |   move.b d0,d0
   11cb0:	|  |  |  |     |  |   andi.w #255,d0
   11cb4:	|  |  |  |     |  |   move.w d0,188da <gameSettings+0x8>
   11cba:	|  |  |  |     +--|-- bra.w 11dc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   11cbe:	|  |  |  |     |  \-> pea 174b3 <PutChar+0x1ebd>
   11cc4:	|  |  |  |     |      move.l sp,d0
   11cc6:	|  |  |  |     |      addi.l #269,d0
   11ccc:	|  |  |  |     |      move.l d0,-(sp)
   11cce:	|  |  |  |     |      jsr 11f86 <strcmp>
   11cd4:	|  |  |  |     |      addq.l #8,sp
   11cd6:	|  |  |  |     |      tst.l d0
   11cd8:	|  |  |  |     |  /-- bne.s 11cf2 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   11cda:	|  |  |  |     |  |   move.l sp,d0
   11cdc:	|  |  |  |     |  |   addq.l #8,d0
   11cde:	|  |  |  |     |  |   move.l d0,-(sp)
   11ce0:	|  |  |  |     |  |   jsr 11e76 <stringToInt>
   11ce6:	|  |  |  |     |  |   addq.l #4,sp
   11ce8:	|  |  |  |     |  |   move.l d0,188dc <gameSettings+0xa>
   11cee:	|  |  |  |     +--|-- bra.w 11dc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   11cf2:	|  |  |  |     |  \-> pea 174bb <PutChar+0x1ec5>
   11cf8:	|  |  |  |     |      move.l sp,d0
   11cfa:	|  |  |  |     |      addi.l #269,d0
   11d00:	|  |  |  |     |      move.l d0,-(sp)
   11d02:	|  |  |  |     |      jsr 11f86 <strcmp>
   11d08:	|  |  |  |     |      addq.l #8,sp
   11d0a:	|  |  |  |     |      tst.l d0
   11d0c:	|  |  |  |     |  /-- bne.s 11d26 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   11d0e:	|  |  |  |     |  |   move.l sp,d0
   11d10:	|  |  |  |     |  |   addq.l #8,d0
   11d12:	|  |  |  |     |  |   move.l d0,-(sp)
   11d14:	|  |  |  |     |  |   jsr 11e76 <stringToInt>
   11d1a:	|  |  |  |     |  |   addq.l #4,sp
   11d1c:	|  |  |  |     |  |   move.l d0,188e0 <gameSettings+0xe>
   11d22:	|  |  |  |     +--|-- bra.w 11dc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   11d26:	|  |  |  |     |  \-> pea 174c5 <PutChar+0x1ecf>
   11d2c:	|  |  |  |     |      move.l sp,d0
   11d2e:	|  |  |  |     |      addi.l #269,d0
   11d34:	|  |  |  |     |      move.l d0,-(sp)
   11d36:	|  |  |  |     |      jsr 11f86 <strcmp>
   11d3c:	|  |  |  |     |      addq.l #8,sp
   11d3e:	|  |  |  |     |      tst.l d0
   11d40:	|  |  |  |     |  /-- bne.s 11d5a <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   11d42:	|  |  |  |     |  |   move.l sp,d0
   11d44:	|  |  |  |     |  |   addq.l #8,d0
   11d46:	|  |  |  |     |  |   move.l d0,-(sp)
   11d48:	|  |  |  |     |  |   jsr 11e76 <stringToInt>
   11d4e:	|  |  |  |     |  |   addq.l #4,sp
   11d50:	|  |  |  |     |  |   move.l d0,d0
   11d52:	|  |  |  |     |  |   move.w d0,188e4 <gameSettings+0x12>
   11d58:	|  |  |  |     +--|-- bra.s 11dc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   11d5a:	|  |  |  |     |  \-> pea 174d1 <PutChar+0x1edb>
   11d60:	|  |  |  |     |      move.l sp,d0
   11d62:	|  |  |  |     |      addi.l #269,d0
   11d68:	|  |  |  |     |      move.l d0,-(sp)
   11d6a:	|  |  |  |     |      jsr 11f86 <strcmp>
   11d70:	|  |  |  |     |      addq.l #8,sp
   11d72:	|  |  |  |     |      tst.l d0
   11d74:	|  |  |  |     |  /-- bne.s 11d8e <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   11d76:	|  |  |  |     |  |   move.l sp,d0
   11d78:	|  |  |  |     |  |   addq.l #8,d0
   11d7a:	|  |  |  |     |  |   move.l d0,-(sp)
   11d7c:	|  |  |  |     |  |   jsr 11e76 <stringToInt>
   11d82:	|  |  |  |     |  |   addq.l #4,sp
   11d84:	|  |  |  |     |  |   move.l d0,d0
   11d86:	|  |  |  |     |  |   move.w d0,188e6 <gameSettings+0x14>
   11d8c:	|  |  |  |     +--|-- bra.s 11dc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   11d8e:	|  |  |  |     |  \-> pea 174df <PutChar+0x1ee9>
   11d94:	|  |  |  |     |      move.l sp,d0
   11d96:	|  |  |  |     |      addi.l #269,d0
   11d9c:	|  |  |  |     |      move.l d0,-(sp)
   11d9e:	|  |  |  |     |      jsr 11f86 <strcmp>
   11da4:	|  |  |  |     |      addq.l #8,sp
   11da6:	|  |  |  |     |      tst.l d0
   11da8:	|  |  |  |     +----- bne.s 11dc0 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   11daa:	|  |  |  |     |      move.l sp,d0
   11dac:	|  |  |  |     |      addq.l #8,d0
   11dae:	|  |  |  |     |      move.l d0,-(sp)
   11db0:	|  |  |  |     |      jsr 11e76 <stringToInt>
   11db6:	|  |  |  |     |      addq.l #4,sp
   11db8:	|  |  |  |     |      move.l d0,d0
   11dba:	|  |  |  |     |      move.w d0,188e8 <gameSettings+0x16>
					}
				}
				here = 0;
   11dc0:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   11dc4:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   11dc8:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   11dcc:	|  |  |  |            clr.b 8(sp)
				break;
   11dd0:	|  |  |  |  /-------- bra.s 11e48 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   11dd2:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   11dd8:	|  |  |     |         clr.b 571(sp)
				break;
   11ddc:	|  |  |     +-------- bra.s 11e48 <readIniFile+0x358>

				default:
				if (doingSecond) {
   11dde:	|  |  \-----|-------> tst.w 566(sp)
   11de2:	|  |        |  /----- beq.s 11e16 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   11de4:	|  |        |  |      move.b 571(sp),d0
   11de8:	|  |        |  |      move.b d0,d1
   11dea:	|  |        |  |      addq.b #1,d1
   11dec:	|  |        |  |      move.b d1,571(sp)
   11df0:	|  |        |  |      move.b d0,d0
   11df2:	|  |        |  |      andi.l #255,d0
   11df8:	|  |        |  |      lea 572(sp),a0
   11dfc:	|  |        |  |      adda.l d0,a0
   11dfe:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   11e04:	|  |        |  |      moveq #0,d0
   11e06:	|  |        |  |      move.b 571(sp),d0
   11e0a:	|  |        |  |      lea 572(sp),a0
   11e0e:	|  |        |  |      adda.l d0,a0
   11e10:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   11e14:	|  |        |  |  /-- bra.s 11e46 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   11e16:	|  |        |  \--|-> move.b 571(sp),d0
   11e1a:	|  |        |     |   move.b d0,d1
   11e1c:	|  |        |     |   addq.b #1,d1
   11e1e:	|  |        |     |   move.b d1,571(sp)
   11e22:	|  |        |     |   move.b d0,d0
   11e24:	|  |        |     |   andi.l #255,d0
   11e2a:	|  |        |     |   lea 572(sp),a0
   11e2e:	|  |        |     |   adda.l d0,a0
   11e30:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   11e36:	|  |        |     |   moveq #0,d0
   11e38:	|  |        |     |   move.b 571(sp),d0
   11e3c:	|  |        |     |   lea 572(sp),a0
   11e40:	|  |        |     |   adda.l d0,a0
   11e42:	|  |        |     |   clr.b -307(a0)
				break;
   11e46:	|  |        |     \-> nop
			}
		} while (keepGoing);
   11e48:	|  |        \-------> tst.w 568(sp)
   11e4c:	|  \----------------- bne.w 11be0 <readIniFile+0xf0>

		Close(fp);
   11e50:	|                     move.l 546(sp),526(sp)
   11e56:	|                     move.l 187aa <DOSBase>,d0
   11e5c:	|                     movea.l d0,a6
   11e5e:	|                     move.l 526(sp),d1
   11e62:	|                     jsr -36(a6)
   11e66:	|                     move.l d0,522(sp)
	}
}
   11e6a:	\-------------------> nop
   11e6c:	                      move.l (sp)+,d2
   11e6e:	                      movea.l (sp)+,a6
   11e70:	                      lea 564(sp),sp
   11e74:	                      rts

00011e76 <stringToInt>:

unsigned int stringToInt (char * s) {
   11e76:	             subq.l #8,sp
	int i = 0;
   11e78:	             clr.l 4(sp)
	BOOL negative = FALSE;
   11e7c:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   11e80:	/----------> movea.l 12(sp),a0
   11e84:	|            move.b (a0),d0
   11e86:	|            cmpi.b #47,d0
   11e8a:	|        /-- ble.s 11ec2 <stringToInt+0x4c>
   11e8c:	|        |   movea.l 12(sp),a0
   11e90:	|        |   move.b (a0),d0
   11e92:	|        |   cmpi.b #57,d0
   11e96:	|        +-- bgt.s 11ec2 <stringToInt+0x4c>
			i *= 10;
   11e98:	|        |   move.l 4(sp),d1
   11e9c:	|        |   move.l d1,d0
   11e9e:	|        |   add.l d0,d0
   11ea0:	|        |   add.l d0,d0
   11ea2:	|        |   add.l d1,d0
   11ea4:	|        |   add.l d0,d0
   11ea6:	|        |   move.l d0,4(sp)
			i += *s - '0';
   11eaa:	|        |   movea.l 12(sp),a0
   11eae:	|        |   move.b (a0),d0
   11eb0:	|        |   ext.w d0
   11eb2:	|        |   movea.w d0,a0
   11eb4:	|        |   moveq #-48,d0
   11eb6:	|        |   add.l a0,d0
   11eb8:	|        |   add.l d0,4(sp)
			s ++;
   11ebc:	|        |   addq.l #1,12(sp)
   11ec0:	|  /-----|-- bra.s 11efa <stringToInt+0x84>
		} else if (*s == '-') {
   11ec2:	|  |     \-> movea.l 12(sp),a0
   11ec6:	|  |         move.b (a0),d0
   11ec8:	|  |         cmpi.b #45,d0
   11ecc:	|  |     /-- bne.s 11ee6 <stringToInt+0x70>
			negative = ! negative;
   11ece:	|  |     |   tst.w 2(sp)
   11ed2:	|  |     |   seq d0
   11ed4:	|  |     |   neg.b d0
   11ed6:	|  |     |   move.b d0,d0
   11ed8:	|  |     |   andi.w #255,d0
   11edc:	|  |     |   move.w d0,2(sp)
			s++;
   11ee0:	|  |     |   addq.l #1,12(sp)
   11ee4:	+--|-----|-- bra.s 11e80 <stringToInt+0xa>
		} else {
			if (negative)
   11ee6:	|  |     \-> tst.w 2(sp)
   11eea:	|  |     /-- beq.s 11ef4 <stringToInt+0x7e>
				return -i;
   11eec:	|  |     |   move.l 4(sp),d0
   11ef0:	|  |     |   neg.l d0
   11ef2:	|  |  /--|-- bra.s 11efc <stringToInt+0x86>
			return i;
   11ef4:	|  |  |  \-> move.l 4(sp),d0
   11ef8:	|  |  +----- bra.s 11efc <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   11efa:	\--\--|----X bra.s 11e80 <stringToInt+0xa>
		}
	}
   11efc:	      \----> addq.l #8,sp
   11efe:	             rts

00011f00 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
   11f00:	    lea -28(sp),sp
   11f04:	    move.l a6,-(sp)
   11f06:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   11f08:	    pea 174e9 <PutChar+0x1ef3>
   11f0e:	    jsr 14b22 <KPrintF>
   11f14:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   11f16:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   11f1a:	    move.l 40(sp),30(sp)
   11f20:	    move.l #1005,26(sp)
   11f28:	    move.l 187aa <DOSBase>,d0
   11f2e:	    movea.l d0,a6
   11f30:	    move.l 30(sp),d1
   11f34:	    move.l 26(sp),d2
   11f38:	    jsr -30(a6)
   11f3c:	    move.l d0,22(sp)
   11f40:	    move.l 22(sp),d0
   11f44:	    move.l d0,18(sp)
	if (tester) {
   11f48:	/-- beq.s 11f78 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   11f4a:	|   pea 17503 <PutChar+0x1f0d>
   11f50:	|   jsr 14b22 <KPrintF>
   11f56:	|   addq.l #4,sp
		retval = 1;
   11f58:	|   move.b #1,35(sp)
		Close(tester);
   11f5e:	|   move.l 18(sp),14(sp)
   11f64:	|   move.l 187aa <DOSBase>,d0
   11f6a:	|   movea.l d0,a6
   11f6c:	|   move.l 14(sp),d1
   11f70:	|   jsr -36(a6)
   11f74:	|   move.l d0,10(sp)
	}
	return retval;
   11f78:	\-> move.b 35(sp),d0
   11f7c:	    move.l (sp)+,d2
   11f7e:	    movea.l (sp)+,a6
   11f80:	    lea 28(sp),sp
   11f84:	    rts

00011f86 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   11f86:	   /-- bra.s 11f90 <strcmp+0xa>
    {
        s1++;
   11f88:	/--|-> addq.l #1,4(sp)
        s2++;
   11f8c:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   11f90:	|  \-> movea.l 4(sp),a0
   11f94:	|      move.b (a0),d0
   11f96:	|  /-- beq.s 11fa8 <strcmp+0x22>
   11f98:	|  |   movea.l 4(sp),a0
   11f9c:	|  |   move.b (a0),d1
   11f9e:	|  |   movea.l 8(sp),a0
   11fa2:	|  |   move.b (a0),d0
   11fa4:	|  |   cmp.b d1,d0
   11fa6:	\--|-- beq.s 11f88 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   11fa8:	   \-> movea.l 4(sp),a0
   11fac:	       move.b (a0),d0
   11fae:	       moveq #0,d1
   11fb0:	       move.b d0,d1
   11fb2:	       movea.l 8(sp),a0
   11fb6:	       move.b (a0),d0
   11fb8:	       move.b d0,d0
   11fba:	       andi.l #255,d0
   11fc0:	       sub.l d0,d1
   11fc2:	       move.l d1,d0
}
   11fc4:	       rts

00011fc6 <strlen>:

long unsigned int strlen (const char *s) 
{  
   11fc6:	       subq.l #4,sp
	long unsigned int i = 0;
   11fc8:	       clr.l (sp)
	while(s[i]) i++; 
   11fca:	   /-- bra.s 11fce <strlen+0x8>
   11fcc:	/--|-> addq.l #1,(sp)
   11fce:	|  \-> movea.l 8(sp),a0
   11fd2:	|      adda.l (sp),a0
   11fd4:	|      move.b (a0),d0
   11fd6:	\----- bne.s 11fcc <strlen+0x6>
	return(i);
   11fd8:	       move.l (sp),d0
}
   11fda:	       addq.l #4,sp
   11fdc:	       rts

00011fde <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   11fde:	    nop
   11fe0:	/-> move.l 8(sp),d0
   11fe4:	|   move.l d0,d1
   11fe6:	|   addq.l #1,d1
   11fe8:	|   move.l d1,8(sp)
   11fec:	|   movea.l 4(sp),a0
   11ff0:	|   lea 1(a0),a1
   11ff4:	|   move.l a1,4(sp)
   11ff8:	|   movea.l d0,a1
   11ffa:	|   move.b (a1),d0
   11ffc:	|   move.b d0,(a0)
   11ffe:	|   move.b (a0),d0
   12000:	\-- bne.s 11fe0 <strcpy+0x2>
}
   12002:	    nop
   12004:	    rts

00012006 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   12006:	    lea -20(sp),sp
   1200a:	    move.l a6,-(sp)
   1200c:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   1200e:	    move.l 32(sp),-(sp)
   12012:	    jsr 11fc6 <strlen>
   12018:	    addq.l #4,sp
   1201a:	    move.l d0,d2
   1201c:	    move.l 36(sp),-(sp)
   12020:	    jsr 11fc6 <strlen>
   12026:	    addq.l #4,sp
   12028:	    add.l d2,d0
   1202a:	    move.l d0,d1
   1202c:	    addq.l #1,d1
   1202e:	    move.l d1,20(sp)
   12032:	    clr.l 16(sp)
   12036:	    move.l 187a2 <SysBase>,d0
   1203c:	    movea.l d0,a6
   1203e:	    move.l 20(sp),d0
   12042:	    move.l 16(sp),d1
   12046:	    jsr -684(a6)
   1204a:	    move.l d0,12(sp)
   1204e:	    move.l 12(sp),d0
   12052:	    move.l d0,8(sp)
	char * t = newString;
   12056:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   1205c:	    nop
   1205e:	/-> move.l 32(sp),d0
   12062:	|   move.l d0,d1
   12064:	|   addq.l #1,d1
   12066:	|   move.l d1,32(sp)
   1206a:	|   movea.l 24(sp),a0
   1206e:	|   lea 1(a0),a1
   12072:	|   move.l a1,24(sp)
   12076:	|   movea.l d0,a1
   12078:	|   move.b (a1),d0
   1207a:	|   move.b d0,(a0)
   1207c:	|   move.b (a0),d0
   1207e:	\-- bne.s 1205e <joinStrings+0x58>
	t--;
   12080:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   12084:	    nop
   12086:	/-> move.l 36(sp),d0
   1208a:	|   move.l d0,d1
   1208c:	|   addq.l #1,d1
   1208e:	|   move.l d1,36(sp)
   12092:	|   movea.l 24(sp),a0
   12096:	|   lea 1(a0),a1
   1209a:	|   move.l a1,24(sp)
   1209e:	|   movea.l d0,a1
   120a0:	|   move.b (a1),d0
   120a2:	|   move.b d0,(a0)
   120a4:	|   move.b (a0),d0
   120a6:	\-- bne.s 12086 <joinStrings+0x80>

	return newString;
   120a8:	    move.l 8(sp),d0
}
   120ac:	    move.l (sp)+,d2
   120ae:	    movea.l (sp)+,a6
   120b0:	    lea 20(sp),sp
   120b4:	    rts

000120b6 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   120b6:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   120ba:	       moveq #10,d0
   120bc:	       cmp.l 28(sp),d0
   120c0:	   /-- bne.s 120de <itoa+0x28>
   120c2:	   |   tst.l 20(sp)
   120c6:	   +-- bge.s 120de <itoa+0x28>
        *str++ = '-';
   120c8:	   |   move.l 24(sp),d0
   120cc:	   |   move.l d0,d1
   120ce:	   |   addq.l #1,d1
   120d0:	   |   move.l d1,24(sp)
   120d4:	   |   movea.l d0,a0
   120d6:	   |   move.b #45,(a0)
        value *= -1;
   120da:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   120de:	   \-> move.l 24(sp),12(sp)
   120e4:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   120ea:	   /-> move.l 20(sp),d0
   120ee:	   |   move.l 28(sp),-(sp)
   120f2:	   |   move.l d0,-(sp)
   120f4:	   |   jsr 1558c <__modsi3>
   120fa:	   |   addq.l #8,sp
   120fc:	   |   movea.l d0,a1
   120fe:	   |   move.l 12(sp),d0
   12102:	   |   move.l d0,d1
   12104:	   |   addq.l #1,d1
   12106:	   |   move.l d1,12(sp)
   1210a:	   |   lea 1751b <PutChar+0x1f25>,a0
   12110:	   |   move.b (0,a1,a0.l),d1
   12114:	   |   movea.l d0,a0
   12116:	   |   move.b d1,(a0)
        value /= base;
   12118:	   |   move.l 28(sp),-(sp)
   1211c:	   |   move.l 24(sp),-(sp)
   12120:	   |   jsr 1555e <__divsi3>
   12126:	   |   addq.l #8,sp
   12128:	   |   move.l d0,20(sp)
    } while (value);
   1212c:	   \-- bne.s 120ea <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   1212e:	       move.l 12(sp),d0
   12132:	       move.l d0,d1
   12134:	       subq.l #1,d1
   12136:	       move.l d1,12(sp)
   1213a:	       movea.l d0,a0
   1213c:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   1213e:	       move.l 4(sp),8(sp)
   12144:	   /-- bra.s 1216a <itoa+0xb4>
        char temp = *low;
   12146:	/--|-> movea.l 8(sp),a0
   1214a:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   1214e:	|  |   movea.l 12(sp),a0
   12152:	|  |   move.b (a0),d0
   12154:	|  |   movea.l 8(sp),a0
   12158:	|  |   move.b d0,(a0)
        *ptr = temp;
   1215a:	|  |   movea.l 12(sp),a0
   1215e:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   12162:	|  |   addq.l #1,8(sp)
   12166:	|  |   subq.l #1,12(sp)
   1216a:	|  \-> move.l 8(sp),d0
   1216e:	|      cmp.l 12(sp),d0
   12172:	\----- bcs.s 12146 <itoa+0x90>
    }
    return rc;
   12174:	       move.l 4(sp),d0
}
   12178:	       lea 16(sp),sp
   1217c:	       rts

0001217e <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   1217e:	                            lea -40(sp),sp
   12182:	                            move.l d2,-(sp)
    char* s = str;
   12184:	                            move.l 48(sp),40(sp)
    const char* p = format;
   1218a:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   12190:	   /----------------------- bra.w 122c4 <vsprintf2+0x146>
        if (*p == '%') {
   12194:	/--|----------------------> movea.l 36(sp),a0
   12198:	|  |                        move.b (a0),d0
   1219a:	|  |                        cmpi.b #37,d0
   1219e:	|  |  /-------------------- bne.w 122aa <vsprintf2+0x12c>
            switch (*++p) {
   121a2:	|  |  |                     addq.l #1,36(sp)
   121a6:	|  |  |                     movea.l 36(sp),a0
   121aa:	|  |  |                     move.b (a0),d0
   121ac:	|  |  |                     ext.w d0
   121ae:	|  |  |                     movea.w d0,a0
   121b0:	|  |  |                     moveq #115,d0
   121b2:	|  |  |                     cmp.l a0,d0
   121b4:	|  |  |           /-------- beq.s 1222c <vsprintf2+0xae>
   121b6:	|  |  |           |         moveq #115,d1
   121b8:	|  |  |           |         cmp.l a0,d1
   121ba:	|  |  |  /--------|-------- blt.w 12292 <vsprintf2+0x114>
   121be:	|  |  |  |        |         moveq #99,d2
   121c0:	|  |  |  |        |         cmp.l a0,d2
   121c2:	|  |  |  |  /-----|-------- beq.w 1226a <vsprintf2+0xec>
   121c6:	|  |  |  |  |     |         moveq #100,d0
   121c8:	|  |  |  |  |     |         cmp.l a0,d0
   121ca:	|  |  |  +--|-----|-------- bne.w 12292 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   121ce:	|  |  |  |  |     |         addq.l #4,56(sp)
   121d2:	|  |  |  |  |     |         movea.l 56(sp),a0
   121d6:	|  |  |  |  |     |         move.l (a0),d0
   121d8:	|  |  |  |  |     |         move.l d0,d1
   121da:	|  |  |  |  |     |         subq.l #1,d1
   121dc:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   121e0:	|  |  |  |  |     |         pea a <_start+0xa>
   121e4:	|  |  |  |  |     |         lea 8(sp),a0
   121e8:	|  |  |  |  |     |         move.l a0,-(sp)
   121ea:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   121ee:	|  |  |  |  |     |         jsr 120b6 <itoa>
   121f4:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   121f8:	|  |  |  |  |     |         lea 44(sp),a0
   121fc:	|  |  |  |  |     |         lea -40(a0),a0
   12200:	|  |  |  |  |     |         move.l a0,28(sp)
   12204:	|  |  |  |  |     |     /-- bra.s 12220 <vsprintf2+0xa2>
                        *s++ = *b;
   12206:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   1220a:	|  |  |  |  |     |  |  |   move.l d0,d1
   1220c:	|  |  |  |  |     |  |  |   addq.l #1,d1
   1220e:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   12212:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   12216:	|  |  |  |  |     |  |  |   move.b (a0),d1
   12218:	|  |  |  |  |     |  |  |   movea.l d0,a0
   1221a:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   1221c:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   12220:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   12224:	|  |  |  |  |     |  |      move.b (a0),d0
   12226:	|  |  |  |  |     |  \----- bne.s 12206 <vsprintf2+0x88>
                    }
                    break;
   12228:	|  |  |  |  |  /--|-------- bra.w 122c0 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   1222c:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   12230:	|  |  |  |  |  |            movea.l 56(sp),a0
   12234:	|  |  |  |  |  |            move.l (a0),d0
   12236:	|  |  |  |  |  |            move.l d0,d1
   12238:	|  |  |  |  |  |            subq.l #1,d1
   1223a:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   1223e:	|  |  |  |  |  |        /-- bra.s 12260 <vsprintf2+0xe2>
                        *s++ = *sval++;
   12240:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   12244:	|  |  |  |  |  |     |  |   move.l d1,d2
   12246:	|  |  |  |  |  |     |  |   addq.l #1,d2
   12248:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   1224c:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   12250:	|  |  |  |  |  |     |  |   move.l d0,d2
   12252:	|  |  |  |  |  |     |  |   addq.l #1,d2
   12254:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   12258:	|  |  |  |  |  |     |  |   movea.l d1,a0
   1225a:	|  |  |  |  |  |     |  |   move.b (a0),d1
   1225c:	|  |  |  |  |  |     |  |   movea.l d0,a0
   1225e:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   12260:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   12264:	|  |  |  |  |  |     |      move.b (a0),d0
   12266:	|  |  |  |  |  |     \----- bne.s 12240 <vsprintf2+0xc2>
                    }
                    break;
   12268:	|  |  |  |  |  +----------- bra.s 122c0 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   1226a:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   1226e:	|  |  |  |     |            movea.l 56(sp),a0
   12272:	|  |  |  |     |            move.l (a0),d0
   12274:	|  |  |  |     |            move.l d0,d1
   12276:	|  |  |  |     |            subq.l #1,d1
   12278:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   1227c:	|  |  |  |     |            move.l 40(sp),d0
   12280:	|  |  |  |     |            move.l d0,d2
   12282:	|  |  |  |     |            addq.l #1,d2
   12284:	|  |  |  |     |            move.l d2,40(sp)
   12288:	|  |  |  |     |            move.l 24(sp),d1
   1228c:	|  |  |  |     |            movea.l d0,a0
   1228e:	|  |  |  |     |            move.b d1,(a0)
                    break;
   12290:	|  |  |  |     +----------- bra.s 122c0 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   12292:	|  |  |  \-----|----------> move.l 40(sp),d0
   12296:	|  |  |        |            move.l d0,d1
   12298:	|  |  |        |            addq.l #1,d1
   1229a:	|  |  |        |            move.l d1,40(sp)
   1229e:	|  |  |        |            movea.l 36(sp),a0
   122a2:	|  |  |        |            move.b (a0),d1
   122a4:	|  |  |        |            movea.l d0,a0
   122a6:	|  |  |        |            move.b d1,(a0)
                    break;
   122a8:	|  |  |        +----------- bra.s 122c0 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   122aa:	|  |  \--------|----------> move.l 40(sp),d0
   122ae:	|  |           |            move.l d0,d1
   122b0:	|  |           |            addq.l #1,d1
   122b2:	|  |           |            move.l d1,40(sp)
   122b6:	|  |           |            movea.l 36(sp),a0
   122ba:	|  |           |            move.b (a0),d1
   122bc:	|  |           |            movea.l d0,a0
   122be:	|  |           |            move.b d1,(a0)
        }
        p++;
   122c0:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   122c4:	|  \----------------------> movea.l 36(sp),a0
   122c8:	|                           move.b (a0),d0
   122ca:	\-------------------------- bne.w 12194 <vsprintf2+0x16>
    }
    *s = '\0';
   122ce:	                            movea.l 40(sp),a0
   122d2:	                            clr.b (a0)
    return s - str;
   122d4:	                            move.l 40(sp),d0
   122d8:	                            sub.l 48(sp),d0
}
   122dc:	                            move.l (sp)+,d2
   122de:	                            lea 40(sp),sp
   122e2:	                            rts

000122e4 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   122e4:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   122e6:	moveq #16,d0
   122e8:	add.l sp,d0
   122ea:	move.l d0,d1
   122ec:	addq.l #4,d1
   122ee:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   122f2:	move.l 16(sp),d0
   122f6:	move.l 4(sp),-(sp)
   122fa:	move.l d0,-(sp)
   122fc:	move.l 20(sp),-(sp)
   12300:	jsr 1217e <vsprintf2>
   12306:	lea 12(sp),sp
   1230a:	move.l d0,(sp)
    va_end(args);
   1230c:	clr.l 4(sp)

    return done;
   12310:	move.l (sp),d0
}
   12312:	addq.l #8,sp
   12314:	rts

00012316 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   12316:	       lea -20(sp),sp
   1231a:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1231c:	       moveq #12,d0
   1231e:	       move.l d0,20(sp)
   12322:	       clr.l 16(sp)
   12326:	       move.l 187a2 <SysBase>,d0
   1232c:	       movea.l d0,a6
   1232e:	       move.l 20(sp),d0
   12332:	       move.l 16(sp),d1
   12336:	       jsr -684(a6)
   1233a:	       move.l d0,12(sp)
   1233e:	       move.l 12(sp),d0
   12342:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   12346:	   /-- bne.s 1234c <addVarToStack+0x36>
   12348:	   |   clr.w d0
   1234a:	/--|-- bra.s 12394 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   1234c:	|  \-> move.l 8(sp),d0
   12350:	|      move.l d0,-(sp)
   12352:	|      move.l 32(sp),-(sp)
   12356:	|      jsr 12e78 <copyMain>
   1235c:	|      addq.l #8,sp
   1235e:	|      tst.w d0
   12360:	|  /-- bne.s 1237c <addVarToStack+0x66>
        FreeVec(newStack);
   12362:	|  |   move.l 8(sp),4(sp)
   12368:	|  |   move.l 187a2 <SysBase>,d0
   1236e:	|  |   movea.l d0,a6
   12370:	|  |   movea.l 4(sp),a1
   12374:	|  |   jsr -690(a6)
        return FALSE;
   12378:	|  |   clr.w d0
   1237a:	+--|-- bra.s 12394 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   1237c:	|  \-> movea.l 32(sp),a0
   12380:	|      move.l (a0),d0
   12382:	|      movea.l 8(sp),a0
   12386:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1238a:	|      movea.l 32(sp),a0
   1238e:	|      move.l 8(sp),(a0)
    return TRUE;
   12392:	|      moveq #1,d0
}
   12394:	\----> movea.l (sp)+,a6
   12396:	       lea 20(sp),sp
   1239a:	       rts

0001239c <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   1239c:	       lea -16(sp),sp
   123a0:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   123a2:	       moveq #12,d0
   123a4:	       move.l d0,16(sp)
   123a8:	       clr.l 12(sp)
   123ac:	       move.l 187a2 <SysBase>,d0
   123b2:	       movea.l d0,a6
   123b4:	       move.l 16(sp),d0
   123b8:	       move.l 12(sp),d1
   123bc:	       jsr -684(a6)
   123c0:	       move.l d0,8(sp)
   123c4:	       move.l 8(sp),d0
   123c8:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   123cc:	   /-- bne.s 123d2 <addVarToStackQuick+0x36>
   123ce:	   |   clr.w d0
   123d0:	/--|-- bra.s 12408 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   123d2:	|  \-> move.l 4(sp),d0
   123d6:	|      pea 8 <_start+0x8>
   123da:	|      move.l 28(sp),-(sp)
   123de:	|      move.l d0,-(sp)
   123e0:	|      jsr 14ad6 <memcpy>
   123e6:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   123ea:	|      movea.l 24(sp),a0
   123ee:	|      clr.l (a0)

    newStack->next = *thisStack;
   123f0:	|      movea.l 28(sp),a0
   123f4:	|      move.l (a0),d0
   123f6:	|      movea.l 4(sp),a0
   123fa:	|      move.l d0,8(a0)
    *thisStack = newStack;
   123fe:	|      movea.l 28(sp),a0
   12402:	|      move.l 4(sp),(a0)
    return TRUE;
   12406:	|      moveq #1,d0
}
   12408:	\----> movea.l (sp)+,a6
   1240a:	       lea 16(sp),sp
   1240e:	       rts

00012410 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   12410:	       lea -16(sp),sp
   12414:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   12416:	       movea.l 24(sp),a0
   1241a:	       move.l (a0),d0
   1241c:	       moveq #1,d1
   1241e:	       cmp.l d0,d1
   12420:	   /-- bne.s 1244a <addVariablesInSecond+0x3a>
   12422:	   |   movea.l 28(sp),a0
   12426:	   |   move.l (a0),d0
   12428:	   |   moveq #1,d1
   1242a:	   |   cmp.l d0,d1
   1242c:	   +-- bne.s 1244a <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   1242e:	   |   movea.l 28(sp),a0
   12432:	   |   move.l 4(a0),d1
   12436:	   |   movea.l 24(sp),a0
   1243a:	   |   move.l 4(a0),d0
   1243e:	   |   add.l d1,d0
   12440:	   |   movea.l 28(sp),a0
   12444:	   |   move.l d0,4(a0)
   12448:	/--|-- bra.s 124c4 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   1244a:	|  \-> move.l 24(sp),-(sp)
   1244e:	|      jsr 130b0 <getTextFromAnyVar>
   12454:	|      addq.l #4,sp
   12456:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   1245a:	|      move.l 28(sp),-(sp)
   1245e:	|      jsr 130b0 <getTextFromAnyVar>
   12464:	|      addq.l #4,sp
   12466:	|      move.l d0,12(sp)

		unlinkVar(var2);
   1246a:	|      move.l 28(sp),-(sp)
   1246e:	|      jsr 12d28 <unlinkVar>
   12474:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   12476:	|      move.l 12(sp),-(sp)
   1247a:	|      move.l 20(sp),-(sp)
   1247e:	|      jsr 12006 <joinStrings>
   12484:	|      addq.l #8,sp
   12486:	|      movea.l 28(sp),a0
   1248a:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   1248e:	|      movea.l 28(sp),a0
   12492:	|      moveq #3,d0
   12494:	|      move.l d0,(a0)
		FreeVec(string1);
   12496:	|      move.l 16(sp),8(sp)
   1249c:	|      move.l 187a2 <SysBase>,d0
   124a2:	|      movea.l d0,a6
   124a4:	|      movea.l 8(sp),a1
   124a8:	|      jsr -690(a6)
		FreeVec(string2);
   124ac:	|      move.l 12(sp),4(sp)
   124b2:	|      move.l 187a2 <SysBase>,d0
   124b8:	|      movea.l d0,a6
   124ba:	|      movea.l 4(sp),a1
   124be:	|      jsr -690(a6)
	}
}
   124c2:	|      nop
   124c4:	\----> nop
   124c6:	       movea.l (sp)+,a6
   124c8:	       lea 16(sp),sp
   124cc:	       rts

000124ce <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   124ce:	movea.l 8(sp),a0
   124d2:	move.l 4(a0),-(sp)
   124d6:	move.l (a0),-(sp)
   124d8:	movea.l 12(sp),a0
   124dc:	move.l 4(a0),-(sp)
   124e0:	move.l (a0),-(sp)
   124e2:	jsr 12504 <compareVars>
   124e8:	lea 16(sp),sp
   124ec:	move.l d0,-(sp)
   124ee:	pea 1 <_start+0x1>
   124f2:	move.l 16(sp),-(sp)
   124f6:	jsr 133cc <setVariable>
   124fc:	lea 12(sp),sp
}
   12500:	nop
   12502:	rts

00012504 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   12504:	       subq.l #4,sp
	int re = 0;
   12506:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   12508:	       move.l 8(sp),d1
   1250c:	       move.l 16(sp),d0
   12510:	       cmp.l d1,d0
   12512:	/----- bne.w 125da <compareVars+0xd6>
		switch (var1.varType) {
   12516:	|      move.l 8(sp),d0
   1251a:	|      moveq #9,d1
   1251c:	|      cmp.l d0,d1
   1251e:	|  /-- bcs.w 125c2 <compareVars+0xbe>
   12522:	|  |   add.l d0,d0
   12524:	|  |   movea.l d0,a0
   12526:	|  |   adda.l #75058,a0
   1252c:	|  |   move.w (a0),d0
   1252e:	|  |   jmp (12532 <compareVars+0x2e>,pc,d0.w)
   12532:	|  |   ori.b #-112,(a4)
   12536:	|  |   ori.l #5243024,(a0)
   1253c:	|  |   ori.l #7733392,(a0)
   12542:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   12548:	|  |   move.l d0,(sp)
			break;
   1254a:	+--|-- bra.w 125da <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   1254e:	|  |   move.l 12(sp),d1
   12552:	|  |   move.l 20(sp),d0
   12556:	|  |   cmp.l d1,d0
   12558:	|  |   seq d0
   1255a:	|  |   neg.b d0
   1255c:	|  |   move.b d0,d0
   1255e:	|  |   andi.l #255,d0
   12564:	|  |   move.l d0,(sp)
			break;
   12566:	+--|-- bra.s 125da <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   12568:	|  |   move.l 12(sp),d1
   1256c:	|  |   move.l 20(sp),d0
   12570:	|  |   cmp.l d1,d0
   12572:	|  |   seq d0
   12574:	|  |   neg.b d0
   12576:	|  |   move.b d0,d0
   12578:	|  |   andi.l #255,d0
   1257e:	|  |   move.l d0,(sp)
			break;
   12580:	+--|-- bra.s 125da <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   12582:	|  |   move.l 20(sp),d1
   12586:	|  |   move.l 12(sp),d0
   1258a:	|  |   move.l d1,-(sp)
   1258c:	|  |   move.l d0,-(sp)
   1258e:	|  |   jsr 11f86 <strcmp>
   12594:	|  |   addq.l #8,sp
   12596:	|  |   tst.l d0
   12598:	|  |   seq d0
   1259a:	|  |   neg.b d0
   1259c:	|  |   move.b d0,d0
   1259e:	|  |   andi.l #255,d0
   125a4:	|  |   move.l d0,(sp)
			break;
   125a6:	+--|-- bra.s 125da <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   125a8:	|  |   move.l 12(sp),d1
   125ac:	|  |   move.l 20(sp),d0
   125b0:	|  |   cmp.l d1,d0
   125b2:	|  |   seq d0
   125b4:	|  |   neg.b d0
   125b6:	|  |   move.b d0,d0
   125b8:	|  |   andi.l #255,d0
   125be:	|  |   move.l d0,(sp)
			break;
   125c0:	+--|-- bra.s 125da <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   125c2:	|  \-> move.l 12(sp),d1
   125c6:	|      move.l 20(sp),d0
   125ca:	|      cmp.l d1,d0
   125cc:	|      seq d0
   125ce:	|      neg.b d0
   125d0:	|      move.b d0,d0
   125d2:	|      andi.l #255,d0
   125d8:	|      move.l d0,(sp)
		}
	}
	return re;
   125da:	\----> move.l (sp),d0
}
   125dc:	       addq.l #4,sp
   125de:	       rts

000125e0 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   125e0:	             lea -16(sp),sp
   125e4:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   125e6:	             movea.l 28(sp),a0
   125ea:	             moveq #6,d0
   125ec:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   125ee:	             moveq #12,d0
   125f0:	             move.l d0,12(sp)
   125f4:	             clr.l 8(sp)
   125f8:	             move.l 187a2 <SysBase>,d0
   125fe:	             movea.l d0,a6
   12600:	             move.l 12(sp),d0
   12604:	             move.l 8(sp),d1
   12608:	             jsr -684(a6)
   1260c:	             move.l d0,4(sp)
   12610:	             move.l 4(sp),d0
   12614:	             movea.l 28(sp),a0
   12618:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1261c:	             movea.l 28(sp),a0
   12620:	             move.l 4(a0),d0
   12624:	         /-- bne.s 1262c <copyStack+0x4c>
   12626:	         |   clr.w d0
   12628:	/--------|-- bra.w 126ae <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1262c:	|        \-> movea.l 28(sp),a0
   12630:	|            movea.l 4(a0),a0
   12634:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   12636:	|            movea.l 28(sp),a0
   1263a:	|            movea.l 4(a0),a0
   1263e:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   12642:	|            movea.l 28(sp),a0
   12646:	|            movea.l 4(a0),a0
   1264a:	|            moveq #1,d0
   1264c:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   12650:	|            movea.l 24(sp),a0
   12654:	|            movea.l 4(a0),a0
   12658:	|            move.l (a0),16(sp)

	while (a) {
   1265c:	|     /----- bra.s 126a6 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   1265e:	|  /--|----> movea.l 28(sp),a0
   12662:	|  |  |      move.l 4(a0),d0
   12666:	|  |  |      move.l d0,d1
   12668:	|  |  |      move.l 16(sp),d0
   1266c:	|  |  |      move.l d1,-(sp)
   1266e:	|  |  |      move.l d0,-(sp)
   12670:	|  |  |      jsr 12316 <addVarToStack>
   12676:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   12678:	|  |  |      movea.l 28(sp),a0
   1267c:	|  |  |      movea.l 4(a0),a0
   12680:	|  |  |      move.l 4(a0),d0
   12684:	|  |  |  /-- bne.s 1269c <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   12686:	|  |  |  |   movea.l 28(sp),a0
   1268a:	|  |  |  |   movea.l 4(a0),a1
   1268e:	|  |  |  |   movea.l 28(sp),a0
   12692:	|  |  |  |   movea.l 4(a0),a0
   12696:	|  |  |  |   move.l (a1),d0
   12698:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   1269c:	|  |  |  \-> movea.l 16(sp),a0
   126a0:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   126a6:	|  |  \----> tst.l 16(sp)
   126aa:	|  \-------- bne.s 1265e <copyStack+0x7e>
	}

	return TRUE;
   126ac:	|            moveq #1,d0
}
   126ae:	\----------> movea.l (sp)+,a6
   126b0:	             lea 16(sp),sp
   126b4:	             rts

000126b6 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   126b6:	                lea -20(sp),sp
   126ba:	                move.l a6,-(sp)
   126bc:	                move.l 36(sp),d0
   126c0:	                move.w d0,d0
   126c2:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   126c6:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   126cc:	                clr.l 16(sp)

    while (*huntVar) {
   126d0:	   /----------- bra.s 1274e <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   126d2:	/--|----------> movea.l 20(sp),a0
   126d6:	|  |            movea.l (a0),a0
   126d8:	|  |            movea.l 28(sp),a1
   126dc:	|  |            move.l 4(a1),-(sp)
   126e0:	|  |            move.l (a1),-(sp)
   126e2:	|  |            move.l 4(a0),-(sp)
   126e6:	|  |            move.l (a0),-(sp)
   126e8:	|  |            jsr 12504 <compareVars>
   126ee:	|  |            lea 16(sp),sp
   126f2:	|  |            tst.l d0
   126f4:	|  |  /-------- beq.s 12740 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   126f6:	|  |  |         movea.l 20(sp),a0
   126fa:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   126fe:	|  |  |         movea.l 12(sp),a0
   12702:	|  |  |         move.l 8(a0),d0
   12706:	|  |  |         movea.l 20(sp),a0
   1270a:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   1270c:	|  |  |         move.l 12(sp),d0
   12710:	|  |  |         move.l d0,-(sp)
   12712:	|  |  |         jsr 12d28 <unlinkVar>
   12718:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1271a:	|  |  |         move.l 12(sp),8(sp)
   12720:	|  |  |         move.l 187a2 <SysBase>,d0
   12726:	|  |  |         movea.l d0,a6
   12728:	|  |  |         movea.l 8(sp),a1
   1272c:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   12730:	|  |  |         tst.w 6(sp)
   12734:	|  |  |     /-- bne.s 1273a <deleteVarFromStack+0x84>
   12736:	|  |  |     |   moveq #1,d0
   12738:	|  |  |  /--|-- bra.s 1275c <deleteVarFromStack+0xa6>
            reply++;
   1273a:	|  |  |  |  \-> addq.l #1,16(sp)
   1273e:	|  +--|--|----- bra.s 1274e <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   12740:	|  |  \--|----> movea.l 20(sp),a0
   12744:	|  |     |      move.l (a0),d0
   12746:	|  |     |      move.l d0,d1
   12748:	|  |     |      addq.l #8,d1
   1274a:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   1274e:	|  \-----|----> movea.l 20(sp),a0
   12752:	|        |      move.l (a0),d0
   12754:	\--------|----- bne.w 126d2 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   12758:	         |      move.l 16(sp),d0
}
   1275c:	         \----> movea.l (sp)+,a6
   1275e:	                lea 20(sp),sp
   12762:	                rts

00012764 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   12764:	       movea.l 4(sp),a0
   12768:	       move.l 4(a0),d0
   1276c:	       cmp.l 8(sp),d0
   12770:	   /-- bhi.s 12776 <fastArrayGetByIndex+0x12>
   12772:	   |   moveq #0,d0
   12774:	/--|-- bra.s 12784 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   12776:	|  \-> movea.l 4(sp),a0
   1277a:	|      move.l (a0),d1
   1277c:	|      move.l 8(sp),d0
   12780:	|      lsl.l #3,d0
   12782:	|      add.l d1,d0
}
   12784:	\----> rts

00012786 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   12786:	                lea -32(sp),sp
   1278a:	                move.l a6,-(sp)
   1278c:	                move.l a2,-(sp)
    struct persona *p = NULL;
   1278e:	                clr.l 36(sp)

    switch (thisVar->varType) {
   12792:	                movea.l 44(sp),a0
   12796:	                move.l (a0),d0
   12798:	                moveq #8,d1
   1279a:	                cmp.l d0,d1
   1279c:	            /-- beq.s 127aa <getCostumeFromVar+0x24>
   1279e:	            |   moveq #9,d1
   127a0:	            |   cmp.l d0,d1
   127a2:	   /--------|-- beq.w 12858 <getCostumeFromVar+0xd2>
   127a6:	/--|--------|-- bra.w 12862 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   127aa:	|  |        \-> moveq #8,d0
   127ac:	|  |            move.l d0,28(sp)
   127b0:	|  |            clr.l 24(sp)
   127b4:	|  |            move.l 187a2 <SysBase>,d0
   127ba:	|  |            movea.l d0,a6
   127bc:	|  |            move.l 28(sp),d0
   127c0:	|  |            move.l 24(sp),d1
   127c4:	|  |            jsr -684(a6)
   127c8:	|  |            move.l d0,20(sp)
   127cc:	|  |            move.l 20(sp),d0
   127d0:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   127d4:	|  |        /-- bne.s 127dc <getCostumeFromVar+0x56>
   127d6:	|  |        |   moveq #0,d0
   127d8:	|  |  /-----|-- bra.w 1288c <getCostumeFromVar+0x106>
            p->numDirections = 1;
   127dc:	|  |  |     \-> movea.l 36(sp),a0
   127e0:	|  |  |         moveq #1,d1
   127e2:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   127e6:	|  |  |         moveq #12,d0
   127e8:	|  |  |         move.l d0,16(sp)
   127ec:	|  |  |         clr.l 12(sp)
   127f0:	|  |  |         move.l 187a2 <SysBase>,d0
   127f6:	|  |  |         movea.l d0,a6
   127f8:	|  |  |         move.l 16(sp),d0
   127fc:	|  |  |         move.l 12(sp),d1
   12800:	|  |  |         jsr -684(a6)
   12804:	|  |  |         move.l d0,8(sp)
   12808:	|  |  |         move.l 8(sp),d0
   1280c:	|  |  |         movea.l 36(sp),a0
   12810:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   12812:	|  |  |         movea.l 36(sp),a0
   12816:	|  |  |         move.l (a0),d0
   12818:	|  |  |     /-- bne.s 1281e <getCostumeFromVar+0x98>
   1281a:	|  |  |     |   moveq #0,d0
   1281c:	|  |  +-----|-- bra.s 1288c <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   1281e:	|  |  |     \-> clr.l 32(sp)
   12822:	|  |  |     /-- bra.s 1284e <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   12824:	|  |  |  /--|-> movea.l 44(sp),a0
   12828:	|  |  |  |  |   move.l 4(a0),d0
   1282c:	|  |  |  |  |   movea.l 36(sp),a0
   12830:	|  |  |  |  |   movea.l (a0),a0
   12832:	|  |  |  |  |   move.l 32(sp),d1
   12836:	|  |  |  |  |   add.l d1,d1
   12838:	|  |  |  |  |   add.l d1,d1
   1283a:	|  |  |  |  |   lea (0,a0,d1.l),a2
   1283e:	|  |  |  |  |   move.l d0,-(sp)
   12840:	|  |  |  |  |   jsr 7b24 <copyAnim>
   12846:	|  |  |  |  |   addq.l #4,sp
   12848:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1284a:	|  |  |  |  |   addq.l #1,32(sp)
   1284e:	|  |  |  |  \-> moveq #2,d1
   12850:	|  |  |  |      cmp.l 32(sp),d1
   12854:	|  |  |  \----- bge.s 12824 <getCostumeFromVar+0x9e>
            }
            break;
   12856:	|  |  |     /-- bra.s 12888 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   12858:	|  \--|-----|-> movea.l 44(sp),a0
   1285c:	|     |     |   move.l 4(a0),d0
   12860:	|     +-----|-- bra.s 1288c <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   12862:	\-----|-----|-> movea.l 44(sp),a0
   12866:	      |     |   move.l (a0),d0
   12868:	      |     |   add.l d0,d0
   1286a:	      |     |   movea.l d0,a1
   1286c:	      |     |   adda.l d0,a1
   1286e:	      |     |   lea 18680 <typeName>,a0
   12874:	      |     |   move.l (0,a1,a0.l),d0
   12878:	      |     |   move.l d0,-(sp)
   1287a:	      |     |   pea 1758d <PutChar+0x1f97>
   12880:	      |     |   jsr 14b22 <KPrintF>
   12886:	      |     |   addq.l #8,sp
    }

    return p;
   12888:	      |     \-> move.l 36(sp),d0
}
   1288c:	      \-------> movea.l (sp)+,a2
   1288e:	                movea.l (sp)+,a6
   12890:	                lea 32(sp),sp
   12894:	                rts

00012896 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   12896:	                lea -96(sp),sp
   1289a:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   1289e:	                move.l 116(sp),-(sp)
   128a2:	                pea 175c5 <PutChar+0x1fcf>
   128a8:	                jsr 12006 <joinStrings>
   128ae:	                addq.l #8,sp
   128b0:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   128b4:	            /-- bne.s 128bc <getSavedGamesStack+0x26>
   128b6:	            |   clr.w d0
   128b8:	/-----------|-- bra.w 12ad0 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   128bc:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   128c0:	|               move.l #95687,98(sp)
   128c8:	|               moveq #-2,d0
   128ca:	|               move.l d0,94(sp)
   128ce:	|               move.l 187aa <DOSBase>,d0
   128d4:	|               movea.l d0,a6
   128d6:	|               move.l 98(sp),d1
   128da:	|               move.l 94(sp),d2
   128de:	|               jsr -84(a6)
   128e2:	|               move.l d0,90(sp)
   128e6:	|               move.l 90(sp),d0
   128ea:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   128ee:	|           /-- bne.s 128f6 <getSavedGamesStack+0x60>
   128f0:	|           |   clr.w d0
   128f2:	+-----------|-- bra.w 12ad0 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   128f6:	|           \-> move.l #260,82(sp)
   128fe:	|               move.l #65536,78(sp)
   12906:	|               move.l 187a2 <SysBase>,d0
   1290c:	|               movea.l d0,a6
   1290e:	|               move.l 82(sp),d0
   12912:	|               move.l 78(sp),d1
   12916:	|               jsr -684(a6)
   1291a:	|               move.l d0,74(sp)
   1291e:	|               move.l 74(sp),d0
   12922:	|               move.l d0,70(sp)
	if (!fib) {
   12926:	|           /-- bne.s 12944 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   12928:	|           |   move.l 86(sp),22(sp)
   1292e:	|           |   move.l 187aa <DOSBase>,d0
   12934:	|           |   movea.l d0,a6
   12936:	|           |   move.l 22(sp),d1
   1293a:	|           |   jsr -90(a6)
		return FALSE;
   1293e:	|           |   clr.w d0
   12940:	+-----------|-- bra.w 12ad0 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   12944:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   12948:	|               move.l 86(sp),66(sp)
   1294e:	|               move.l 70(sp),62(sp)
   12954:	|               move.l 187aa <DOSBase>,d0
   1295a:	|               movea.l d0,a6
   1295c:	|               move.l 66(sp),d1
   12960:	|               move.l 62(sp),d2
   12964:	|               jsr -102(a6)
   12968:	|               move.l d0,58(sp)
   1296c:	|               move.l 58(sp),d0
   12970:	|  /----------- beq.w 12a84 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   12974:	|  |        /-- bra.w 12a50 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   12978:	|  |  /-----|-> move.l 70(sp),d2
   1297c:	|  |  |     |   addq.l #8,d2
   1297e:	|  |  |     |   move.l 70(sp),d0
   12982:	|  |  |     |   addq.l #8,d0
   12984:	|  |  |     |   move.l d0,-(sp)
   12986:	|  |  |     |   jsr 11fc6 <strlen>
   1298c:	|  |  |     |   addq.l #4,sp
   1298e:	|  |  |     |   move.l d0,d3
   12990:	|  |  |     |   move.l 116(sp),-(sp)
   12994:	|  |  |     |   jsr 11fc6 <strlen>
   1299a:	|  |  |     |   addq.l #4,sp
   1299c:	|  |  |     |   move.l d3,d1
   1299e:	|  |  |     |   sub.l d0,d1
   129a0:	|  |  |     |   move.l d2,d0
   129a2:	|  |  |     |   add.l d1,d0
   129a4:	|  |  |     |   move.l 116(sp),-(sp)
   129a8:	|  |  |     |   move.l d0,-(sp)
   129aa:	|  |  |     |   jsr 11f86 <strcmp>
   129b0:	|  |  |     |   addq.l #8,sp
   129b2:	|  |  |     |   tst.l d0
   129b4:	|  |  |     +-- bne.w 12a50 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   129b8:	|  |  |     |   move.l 70(sp),d0
   129bc:	|  |  |     |   addq.l #8,d0
   129be:	|  |  |     |   move.l d0,-(sp)
   129c0:	|  |  |     |   jsr 11fc6 <strlen>
   129c6:	|  |  |     |   addq.l #4,sp
   129c8:	|  |  |     |   move.l d0,d2
   129ca:	|  |  |     |   move.l 116(sp),-(sp)
   129ce:	|  |  |     |   jsr 11fc6 <strlen>
   129d4:	|  |  |     |   addq.l #4,sp
   129d6:	|  |  |     |   move.l d0,d1
   129d8:	|  |  |     |   move.l d2,d0
   129da:	|  |  |     |   sub.l d1,d0
   129dc:	|  |  |     |   movea.l 70(sp),a0
   129e0:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   129e4:	|  |  |     |   move.l 70(sp),d0
   129e8:	|  |  |     |   addq.l #8,d0
   129ea:	|  |  |     |   move.l d0,-(sp)
   129ec:	|  |  |     |   jsr 118 <decodeFilename>
   129f2:	|  |  |     |   addq.l #4,sp
   129f4:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   129f8:	|  |  |     |   move.l 42(sp),-(sp)
   129fc:	|  |  |     |   lea 18(sp),a0
   12a00:	|  |  |     |   move.l a0,-(sp)
   12a02:	|  |  |     |   jsr 12cfc <makeTextVar>
   12a08:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   12a0a:	|  |  |     |   move.l 42(sp),38(sp)
   12a10:	|  |  |     |   move.l 187a2 <SysBase>,d0
   12a16:	|  |  |     |   movea.l d0,a6
   12a18:	|  |  |     |   movea.l 38(sp),a1
   12a1c:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   12a20:	|  |  |     |   move.l 112(sp),d0
   12a24:	|  |  |     |   move.l d0,-(sp)
   12a26:	|  |  |     |   lea 18(sp),a0
   12a2a:	|  |  |     |   move.l a0,-(sp)
   12a2c:	|  |  |     |   jsr 12316 <addVarToStack>
   12a32:	|  |  |     |   addq.l #8,sp
   12a34:	|  |  |     |   tst.w d0
   12a36:	|  |  |  /--|-- beq.s 12a88 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   12a38:	|  |  |  |  |   movea.l 112(sp),a0
   12a3c:	|  |  |  |  |   move.l 4(a0),d0
   12a40:	|  |  |  |  +-- bne.s 12a50 <getSavedGamesStack+0x1ba>
   12a42:	|  |  |  |  |   movea.l 112(sp),a0
   12a46:	|  |  |  |  |   move.l (a0),d0
   12a48:	|  |  |  |  |   movea.l 112(sp),a0
   12a4c:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   12a50:	|  |  |  |  \-> move.l 86(sp),54(sp)
   12a56:	|  |  |  |      move.l 70(sp),50(sp)
   12a5c:	|  |  |  |      move.l 187aa <DOSBase>,d0
   12a62:	|  |  |  |      movea.l d0,a6
   12a64:	|  |  |  |      move.l 54(sp),d1
   12a68:	|  |  |  |      move.l 50(sp),d2
   12a6c:	|  |  |  |      jsr -108(a6)
   12a70:	|  |  |  |      move.l d0,46(sp)
   12a74:	|  |  |  |      move.l 46(sp),d0
   12a78:	|  |  \--|----- bne.w 12978 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   12a7c:	|  |     |      move.w #1,106(sp)
   12a82:	|  |     |  /-- bra.s 12a8a <getSavedGamesStack+0x1f4>
	}

cleanup:
   12a84:	|  \-----|--|-> nop
   12a86:	|        |  +-- bra.s 12a8a <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   12a88:	|        \--|-> nop
	FreeVec(fib);
   12a8a:	|           \-> move.l 70(sp),34(sp)
   12a90:	|               move.l 187a2 <SysBase>,d0
   12a96:	|               movea.l d0,a6
   12a98:	|               movea.l 34(sp),a1
   12a9c:	|               jsr -690(a6)
	UnLock(dirLock);
   12aa0:	|               move.l 86(sp),30(sp)
   12aa6:	|               move.l 187aa <DOSBase>,d0
   12aac:	|               movea.l d0,a6
   12aae:	|               move.l 30(sp),d1
   12ab2:	|               jsr -90(a6)
	FreeVec(pattern);
   12ab6:	|               move.l 102(sp),26(sp)
   12abc:	|               move.l 187a2 <SysBase>,d0
   12ac2:	|               movea.l d0,a6
   12ac4:	|               movea.l 26(sp),a1
   12ac8:	|               jsr -690(a6)
	return result;
   12acc:	|               move.w 106(sp),d0
}
   12ad0:	\-------------> movem.l (sp)+,d2-d3/a6
   12ad4:	                lea 96(sp),sp
   12ad8:	                rts

00012ada <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   12ada:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   12adc:	       movea.l 20(sp),a0
   12ae0:	       move.l (a0),d0
   12ae2:	       cmp.l 16(sp),d0
   12ae6:	/----- beq.s 12b4a <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   12ae8:	|      move.l 16(sp),d0
   12aec:	|      add.l d0,d0
   12aee:	|      movea.l d0,a1
   12af0:	|      adda.l d0,a1
   12af2:	|      lea 18680 <typeName>,a0
   12af8:	|      move.l (0,a1,a0.l),d0
   12afc:	|      move.l d0,-(sp)
   12afe:	|      pea 175c9 <PutChar+0x1fd3>
   12b04:	|      jsr 12006 <joinStrings>
   12b0a:	|      addq.l #8,sp
   12b0c:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   12b10:	|      movea.l 20(sp),a0
   12b14:	|      move.l (a0),d0
   12b16:	|      add.l d0,d0
   12b18:	|      movea.l d0,a1
   12b1a:	|      adda.l d0,a1
   12b1c:	|      lea 18680 <typeName>,a0
   12b22:	|      move.l (0,a1,a0.l),d0
   12b26:	|      move.l d0,-(sp)
   12b28:	|      pea 1760b <PutChar+0x2015>
   12b2e:	|      jsr 12006 <joinStrings>
   12b34:	|      addq.l #8,sp
   12b36:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   12b38:	|      move.l (sp),-(sp)
   12b3a:	|      move.l 8(sp),-(sp)
   12b3e:	|      jsr 14b22 <KPrintF>
   12b44:	|      addq.l #8,sp

		return FALSE;
   12b46:	|      clr.w d0
   12b48:	|  /-- bra.s 12b5a <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   12b4a:	\--|-> movea.l 20(sp),a0
   12b4e:	   |   move.l 4(a0),d0
   12b52:	   |   movea.l 12(sp),a0
   12b56:	   |   move.l d0,(a0)
	return TRUE;
   12b58:	   |   moveq #1,d0
}
   12b5a:	   \-> addq.l #8,sp
   12b5c:	       rts

00012b5e <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   12b5e:	move.l 8(sp),-(sp)
   12b62:	jsr 5342 <getNumberedString>
   12b68:	addq.l #4,sp
   12b6a:	move.l d0,-(sp)
   12b6c:	move.l 8(sp),-(sp)
   12b70:	jsr 12cfc <makeTextVar>
   12b76:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   12b78:	movea.l 4(sp),a0
   12b7c:	move.l 4(a0),d0
   12b80:	sne d0
   12b82:	neg.b d0
   12b84:	move.b d0,d0
   12b86:	andi.w #255,d0
}
   12b8a:	rts

00012b8c <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   12b8c:	          subq.l #8,sp
    int size = stackSize(stacky);
   12b8e:	          move.l 16(sp),-(sp)
   12b92:	          jsr 1343a <stackSize>
   12b98:	          addq.l #4,sp
   12b9a:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   12b9e:	          move.l 4(sp),-(sp)
   12ba2:	          move.l 16(sp),-(sp)
   12ba6:	          jsr 12bf6 <makeFastArraySize>
   12bac:	          addq.l #8,sp
   12bae:	          tst.w d0
   12bb0:	      /-- bne.s 12bb6 <makeFastArrayFromStack+0x2a>
   12bb2:	      |   clr.w d0
   12bb4:	/-----|-- bra.s 12bf2 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   12bb6:	|     \-> movea.l 16(sp),a0
   12bba:	|         move.l (a0),(sp)
    size = 0;
   12bbc:	|         clr.l 4(sp)
    while (allV) {
   12bc0:	|     /-- bra.s 12bec <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   12bc2:	|  /--|-> movea.l 12(sp),a0
   12bc6:	|  |  |   movea.l 4(a0),a0
   12bca:	|  |  |   move.l (a0),d1
   12bcc:	|  |  |   move.l 4(sp),d0
   12bd0:	|  |  |   lsl.l #3,d0
   12bd2:	|  |  |   add.l d0,d1
   12bd4:	|  |  |   move.l (sp),d0
   12bd6:	|  |  |   move.l d1,-(sp)
   12bd8:	|  |  |   move.l d0,-(sp)
   12bda:	|  |  |   jsr 12e78 <copyMain>
   12be0:	|  |  |   addq.l #8,sp
        size++;
   12be2:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   12be6:	|  |  |   movea.l (sp),a0
   12be8:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   12bec:	|  |  \-> tst.l (sp)
   12bee:	|  \----- bne.s 12bc2 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   12bf0:	|         moveq #1,d0
}
   12bf2:	\-------> addq.l #8,sp
   12bf4:	          rts

00012bf6 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   12bf6:	          lea -28(sp),sp
   12bfa:	          move.l a6,-(sp)
    if (size < 0) {
   12bfc:	          tst.l 40(sp)
   12c00:	      /-- bge.s 12c16 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   12c02:	      |   pea 17650 <PutChar+0x205a>
   12c08:	      |   jsr 14b22 <KPrintF>
   12c0e:	      |   addq.l #4,sp
		return FALSE;
   12c10:	      |   clr.w d0
   12c12:	/-----|-- bra.w 12cf4 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   12c16:	|     \-> move.l 36(sp),-(sp)
   12c1a:	|         jsr 12d28 <unlinkVar>
   12c20:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   12c22:	|         movea.l 36(sp),a0
   12c26:	|         moveq #10,d0
   12c28:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   12c2a:	|         moveq #12,d0
   12c2c:	|         move.l d0,24(sp)
   12c30:	|         clr.l 20(sp)
   12c34:	|         move.l 187a2 <SysBase>,d0
   12c3a:	|         movea.l d0,a6
   12c3c:	|         move.l 24(sp),d0
   12c40:	|         move.l 20(sp),d1
   12c44:	|         jsr -684(a6)
   12c48:	|         move.l d0,16(sp)
   12c4c:	|         move.l 16(sp),d0
   12c50:	|         movea.l 36(sp),a0
   12c54:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   12c58:	|         movea.l 36(sp),a0
   12c5c:	|         move.l 4(a0),d0
   12c60:	|     /-- bne.s 12c68 <makeFastArraySize+0x72>
   12c62:	|     |   clr.w d0
   12c64:	+-----|-- bra.w 12cf4 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   12c68:	|     \-> move.l 40(sp),d0
   12c6c:	|         lsl.l #3,d0
   12c6e:	|         move.l d0,12(sp)
   12c72:	|         clr.l 8(sp)
   12c76:	|         move.l 187a2 <SysBase>,d0
   12c7c:	|         movea.l d0,a6
   12c7e:	|         move.l 12(sp),d0
   12c82:	|         move.l 8(sp),d1
   12c86:	|         jsr -684(a6)
   12c8a:	|         move.l d0,4(sp)
   12c8e:	|         move.l 4(sp),d0
   12c92:	|         movea.l 36(sp),a0
   12c96:	|         movea.l 4(a0),a0
   12c9a:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   12c9c:	|         movea.l 36(sp),a0
   12ca0:	|         movea.l 4(a0),a0
   12ca4:	|         move.l (a0),d0
   12ca6:	|     /-- bne.s 12cac <makeFastArraySize+0xb6>
   12ca8:	|     |   clr.w d0
   12caa:	+-----|-- bra.s 12cf4 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   12cac:	|     \-> clr.l 28(sp)
   12cb0:	|     /-- bra.s 12ccc <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   12cb2:	|  /--|-> movea.l 36(sp),a0
   12cb6:	|  |  |   movea.l 4(a0),a0
   12cba:	|  |  |   move.l (a0),d1
   12cbc:	|  |  |   move.l 28(sp),d0
   12cc0:	|  |  |   lsl.l #3,d0
   12cc2:	|  |  |   movea.l d1,a0
   12cc4:	|  |  |   adda.l d0,a0
   12cc6:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   12cc8:	|  |  |   addq.l #1,28(sp)
   12ccc:	|  |  \-> move.l 28(sp),d0
   12cd0:	|  |      cmp.l 40(sp),d0
   12cd4:	|  \----- blt.s 12cb2 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   12cd6:	|         movea.l 36(sp),a0
   12cda:	|         movea.l 4(a0),a0
   12cde:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   12ce4:	|         movea.l 36(sp),a0
   12ce8:	|         movea.l 4(a0),a0
   12cec:	|         moveq #1,d0
   12cee:	|         move.l d0,8(a0)
    return TRUE;
   12cf2:	|         moveq #1,d0
}
   12cf4:	\-------> movea.l (sp)+,a6
   12cf6:	          lea 28(sp),sp
   12cfa:	          rts

00012cfc <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   12cfc:	move.l 4(sp),-(sp)
   12d00:	jsr 12d28 <unlinkVar>
   12d06:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   12d08:	movea.l 4(sp),a0
   12d0c:	moveq #3,d0
   12d0e:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   12d10:	move.l 8(sp),-(sp)
   12d14:	jsr b8 <copyString>
   12d1a:	addq.l #4,sp
   12d1c:	movea.l 4(sp),a0
   12d20:	move.l d0,4(a0)
}
   12d24:	nop
   12d26:	rts

00012d28 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   12d28:	                      lea -16(sp),sp
   12d2c:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   12d2e:	                      movea.l 24(sp),a0
   12d32:	                      move.l (a0),d0
   12d34:	                      moveq #10,d1
   12d36:	                      cmp.l d0,d1
   12d38:	            /-------- beq.w 12df0 <unlinkVar+0xc8>
   12d3c:	            |         moveq #10,d1
   12d3e:	            |         cmp.l d0,d1
   12d40:	/-----------|-------- bcs.w 12e64 <unlinkVar+0x13c>
   12d44:	|           |         moveq #8,d1
   12d46:	|           |         cmp.l d0,d1
   12d48:	|  /--------|-------- beq.w 12e50 <unlinkVar+0x128>
   12d4c:	|  |        |         moveq #8,d1
   12d4e:	|  |        |         cmp.l d0,d1
   12d50:	+--|--------|-------- bcs.w 12e64 <unlinkVar+0x13c>
   12d54:	|  |        |         moveq #3,d1
   12d56:	|  |        |         cmp.l d0,d1
   12d58:	|  |        |     /-- beq.s 12d64 <unlinkVar+0x3c>
   12d5a:	|  |        |     |   moveq #6,d1
   12d5c:	|  |        |     |   cmp.l d0,d1
   12d5e:	|  |        |  /--|-- beq.s 12d8a <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   12d60:	+--|--------|--|--|-- bra.w 12e64 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   12d64:	|  |        |  |  \-> movea.l 24(sp),a0
   12d68:	|  |        |  |      move.l 4(a0),4(sp)
   12d6e:	|  |        |  |      move.l 187a2 <SysBase>,d0
   12d74:	|  |        |  |      movea.l d0,a6
   12d76:	|  |        |  |      movea.l 4(sp),a1
   12d7a:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   12d7e:	|  |        |  |      movea.l 24(sp),a0
   12d82:	|  |        |  |      clr.l 4(a0)
		break;
   12d86:	|  |  /-----|--|----- bra.w 12e6e <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   12d8a:	|  |  |     |  \----> movea.l 24(sp),a0
   12d8e:	|  |  |     |         movea.l 4(a0),a0
   12d92:	|  |  |     |         move.l 8(a0),d0
   12d96:	|  |  |     |         subq.l #1,d0
   12d98:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   12d9c:	|  |  |     |         movea.l 24(sp),a0
   12da0:	|  |  |     |         movea.l 4(a0),a0
   12da4:	|  |  |     |         move.l 8(a0),d0
   12da8:	|  |  |  /--|-------- bgt.w 12e68 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   12dac:	|  |  |  |  |     /-- bra.s 12dc0 <unlinkVar+0x98>
   12dae:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   12db2:	|  |  |  |  |  |  |   move.l 4(a0),d0
   12db6:	|  |  |  |  |  |  |   move.l d0,-(sp)
   12db8:	|  |  |  |  |  |  |   jsr 1345e <trimStack>
   12dbe:	|  |  |  |  |  |  |   addq.l #4,sp
   12dc0:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   12dc4:	|  |  |  |  |  |      movea.l 4(a0),a0
   12dc8:	|  |  |  |  |  |      move.l (a0),d0
   12dca:	|  |  |  |  |  \----- bne.s 12dae <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   12dcc:	|  |  |  |  |         movea.l 24(sp),a0
   12dd0:	|  |  |  |  |         move.l 4(a0),8(sp)
   12dd6:	|  |  |  |  |         move.l 187a2 <SysBase>,d0
   12ddc:	|  |  |  |  |         movea.l d0,a6
   12dde:	|  |  |  |  |         movea.l 8(sp),a1
   12de2:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   12de6:	|  |  |  |  |         movea.l 24(sp),a0
   12dea:	|  |  |  |  |         clr.l 4(a0)
		break;
   12dee:	|  |  |  +--|-------- bra.s 12e68 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   12df0:	|  |  |  |  \-------> movea.l 24(sp),a0
   12df4:	|  |  |  |            movea.l 4(a0),a0
   12df8:	|  |  |  |            move.l 8(a0),d0
   12dfc:	|  |  |  |            subq.l #1,d0
   12dfe:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   12e02:	|  |  |  |            movea.l 24(sp),a0
   12e06:	|  |  |  |            movea.l 4(a0),a0
   12e0a:	|  |  |  |            move.l 8(a0),d0
   12e0e:	|  |  |  |        /-- bgt.s 12e6c <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   12e10:	|  |  |  |        |   movea.l 24(sp),a0
   12e14:	|  |  |  |        |   movea.l 4(a0),a0
   12e18:	|  |  |  |        |   move.l (a0),16(sp)
   12e1c:	|  |  |  |        |   move.l 187a2 <SysBase>,d0
   12e22:	|  |  |  |        |   movea.l d0,a6
   12e24:	|  |  |  |        |   movea.l 16(sp),a1
   12e28:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   12e2c:	|  |  |  |        |   movea.l 24(sp),a0
   12e30:	|  |  |  |        |   move.l 4(a0),12(sp)
   12e36:	|  |  |  |        |   move.l 187a2 <SysBase>,d0
   12e3c:	|  |  |  |        |   movea.l d0,a6
   12e3e:	|  |  |  |        |   movea.l 12(sp),a1
   12e42:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   12e46:	|  |  |  |        |   movea.l 24(sp),a0
   12e4a:	|  |  |  |        |   clr.l 4(a0)
		break;
   12e4e:	|  |  |  |        +-- bra.s 12e6c <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   12e50:	|  \--|--|--------|-> movea.l 24(sp),a0
   12e54:	|     |  |        |   move.l 4(a0),d0
   12e58:	|     |  |        |   move.l d0,-(sp)
   12e5a:	|     |  |        |   jsr 7ef0 <deleteAnim>
   12e60:	|     |  |        |   addq.l #4,sp
		break;
   12e62:	|     +--|--------|-- bra.s 12e6e <unlinkVar+0x146>
		break;
   12e64:	\-----|--|--------|-> nop
   12e66:	      +--|--------|-- bra.s 12e6e <unlinkVar+0x146>
		break;
   12e68:	      |  \--------|-> nop
   12e6a:	      +-----------|-- bra.s 12e6e <unlinkVar+0x146>
		break;
   12e6c:	      |           \-> nop
	}
}
   12e6e:	      \-------------> nop
   12e70:	                      movea.l (sp)+,a6
   12e72:	                      lea 16(sp),sp
   12e76:	                      rts

00012e78 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   12e78:	       movea.l 4(sp),a0
   12e7c:	       move.l (a0),d0
   12e7e:	       movea.l 8(sp),a0
   12e82:	       move.l d0,(a0)
	switch (to->varType) {
   12e84:	       movea.l 8(sp),a0
   12e88:	       move.l (a0),d0
   12e8a:	       moveq #10,d1
   12e8c:	       cmp.l d0,d1
   12e8e:	/----- bcs.w 12f80 <copyMain+0x108>
   12e92:	|      add.l d0,d0
   12e94:	|      movea.l d0,a0
   12e96:	|      adda.l #77474,a0
   12e9c:	|      move.w (a0),d0
   12e9e:	|      jmp (12ea2 <copyMain+0x2a>,pc,d0.w)
   12ea2:	|      .short 0x00da
   12ea4:	|      ori.b #22,(a6)
   12ea8:	|      ori.w #22,(a4)
   12eac:	|      ori.b #-126,(a6)
   12eb0:	|      ori.b #-68,(a6)
   12eb4:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   12ebc:	|      move.l 4(a0),d0
   12ec0:	|      movea.l 8(sp),a0
   12ec4:	|      move.l d0,4(a0)
		return TRUE;
   12ec8:	|      moveq #1,d0
   12eca:	|  /-- bra.w 12f92 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   12ece:	|  |   movea.l 4(sp),a0
   12ed2:	|  |   move.l 4(a0),d0
   12ed6:	|  |   movea.l 8(sp),a0
   12eda:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   12ede:	|  |   movea.l 8(sp),a0
   12ee2:	|  |   movea.l 4(a0),a0
   12ee6:	|  |   move.l 8(a0),d0
   12eea:	|  |   addq.l #1,d0
   12eec:	|  |   move.l d0,8(a0)
		return TRUE;
   12ef0:	|  |   moveq #1,d0
   12ef2:	|  +-- bra.w 12f92 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   12ef6:	|  |   movea.l 4(sp),a0
   12efa:	|  |   move.l 4(a0),d0
   12efe:	|  |   move.l d0,-(sp)
   12f00:	|  |   jsr b8 <copyString>
   12f06:	|  |   addq.l #4,sp
   12f08:	|  |   movea.l 8(sp),a0
   12f0c:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   12f10:	|  |   movea.l 8(sp),a0
   12f14:	|  |   move.l 4(a0),d0
   12f18:	|  |   sne d0
   12f1a:	|  |   neg.b d0
   12f1c:	|  |   move.b d0,d0
   12f1e:	|  |   andi.w #255,d0
   12f22:	|  +-- bra.s 12f92 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   12f24:	|  |   movea.l 4(sp),a0
   12f28:	|  |   move.l 4(a0),d0
   12f2c:	|  |   movea.l 8(sp),a0
   12f30:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   12f34:	|  |   movea.l 8(sp),a0
   12f38:	|  |   movea.l 4(a0),a0
   12f3c:	|  |   move.l 8(a0),d0
   12f40:	|  |   addq.l #1,d0
   12f42:	|  |   move.l d0,8(a0)
		return TRUE;
   12f46:	|  |   moveq #1,d0
   12f48:	|  +-- bra.s 12f92 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   12f4a:	|  |   movea.l 4(sp),a0
   12f4e:	|  |   move.l 4(a0),d0
   12f52:	|  |   movea.l 8(sp),a0
   12f56:	|  |   move.l d0,4(a0)
		return TRUE;
   12f5a:	|  |   moveq #1,d0
   12f5c:	|  +-- bra.s 12f92 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   12f5e:	|  |   movea.l 4(sp),a0
   12f62:	|  |   move.l 4(a0),d0
   12f66:	|  |   move.l d0,-(sp)
   12f68:	|  |   jsr 7b24 <copyAnim>
   12f6e:	|  |   addq.l #4,sp
   12f70:	|  |   movea.l 8(sp),a0
   12f74:	|  |   move.l d0,4(a0)
		return TRUE;
   12f78:	|  |   moveq #1,d0
   12f7a:	|  +-- bra.s 12f92 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   12f7c:	|  |   moveq #1,d0
   12f7e:	|  +-- bra.s 12f92 <copyMain+0x11a>

		default:
		break;
   12f80:	\--|-> nop
	}
	KPrintF("Unknown value type");
   12f82:	   |   pea 176a1 <PutChar+0x20ab>
   12f88:	   |   jsr 14b22 <KPrintF>
   12f8e:	   |   addq.l #4,sp
	return FALSE;
   12f90:	   |   clr.w d0
}
   12f92:	   \-> rts

00012f94 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   12f94:	move.l 8(sp),-(sp)
   12f98:	jsr 12d28 <unlinkVar>
   12f9e:	addq.l #4,sp
	return copyMain(from, to);
   12fa0:	move.l 8(sp),-(sp)
   12fa4:	move.l 8(sp),-(sp)
   12fa8:	jsr 12e78 <copyMain>
   12fae:	addq.l #8,sp
}
   12fb0:	rts

00012fb2 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   12fb2:	       movea.l 4(sp),a0
   12fb6:	       move.l (a0),d0
   12fb8:	       moveq #8,d1
   12fba:	       cmp.l d0,d1
   12fbc:	   /-- bne.s 12fd2 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   12fbe:	   |   movea.l 4(sp),a0
   12fc2:	   |   move.l 4(a0),d0
   12fc6:	   |   move.l d0,-(sp)
   12fc8:	   |   jsr 7b24 <copyAnim>
   12fce:	   |   addq.l #4,sp
   12fd0:	/--|-- bra.s 13018 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   12fd2:	|  \-> movea.l 4(sp),a0
   12fd6:	|      move.l (a0),d0
   12fd8:	|      moveq #1,d1
   12fda:	|      cmp.l d0,d1
   12fdc:	|  /-- bne.s 12ff0 <getAnimationFromVar+0x3e>
   12fde:	|  |   movea.l 4(sp),a0
   12fe2:	|  |   move.l 4(a0),d0
   12fe6:	|  +-- bne.s 12ff0 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   12fe8:	|  |   jsr 925c <makeNullAnim>
   12fee:	+--|-- bra.s 13018 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   12ff0:	|  \-> movea.l 4(sp),a0
   12ff4:	|      move.l (a0),d0
   12ff6:	|      add.l d0,d0
   12ff8:	|      movea.l d0,a1
   12ffa:	|      adda.l d0,a1
   12ffc:	|      lea 18680 <typeName>,a0
   13002:	|      move.l (0,a1,a0.l),d0
   13006:	|      move.l d0,-(sp)
   13008:	|      pea 1758d <PutChar+0x1f97>
   1300e:	|      jsr 14b22 <KPrintF>
   13014:	|      addq.l #8,sp
	return NULL;
   13016:	|      moveq #0,d0
}
   13018:	\----> rts

0001301a <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   1301a:	       movea.l 4(sp),a0
   1301e:	       move.l (a0),d0
   13020:	       moveq #10,d1
   13022:	       cmp.l d0,d1
   13024:	/----- bcs.w 130aa <getBoolean+0x90>
   13028:	|      add.l d0,d0
   1302a:	|      movea.l d0,a0
   1302c:	|      adda.l #77880,a0
   13032:	|      move.w (a0),d0
   13034:	|      jmp (13038 <getBoolean+0x1e>,pc,d0.w)
   13038:	|      ori.b #26,(a6)
   1303c:	|      ori.w #68,(114,a2,d0.w)
   13042:	|      ori.w #46,(114,a2,d0.w)
   13048:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   1304e:	|      clr.w d0
   13050:	|  /-- bra.s 130ae <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   13052:	|  |   movea.l 4(sp),a0
   13056:	|  |   move.l 4(a0),d0
   1305a:	|  |   sne d0
   1305c:	|  |   neg.b d0
   1305e:	|  |   move.b d0,d0
   13060:	|  |   andi.w #255,d0
   13064:	|  +-- bra.s 130ae <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   13066:	|  |   movea.l 4(sp),a0
   1306a:	|  |   movea.l 4(a0),a0
   1306e:	|  |   move.l (a0),d0
   13070:	|  |   sne d0
   13072:	|  |   neg.b d0
   13074:	|  |   move.b d0,d0
   13076:	|  |   andi.w #255,d0
   1307a:	|  +-- bra.s 130ae <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   1307c:	|  |   movea.l 4(sp),a0
   13080:	|  |   movea.l 4(a0),a0
   13084:	|  |   move.b (a0),d0
   13086:	|  |   sne d0
   13088:	|  |   neg.b d0
   1308a:	|  |   move.b d0,d0
   1308c:	|  |   andi.w #255,d0
   13090:	|  +-- bra.s 130ae <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   13092:	|  |   movea.l 4(sp),a0
   13096:	|  |   movea.l 4(a0),a0
   1309a:	|  |   move.l 4(a0),d0
   1309e:	|  |   sne d0
   130a0:	|  |   neg.b d0
   130a2:	|  |   move.b d0,d0
   130a4:	|  |   andi.w #255,d0
   130a8:	|  +-- bra.s 130ae <getBoolean+0x94>

		default:
		break;
   130aa:	\--|-> nop
	}
	return TRUE;
   130ac:	   |   moveq #1,d0
}
   130ae:	   \-> rts

000130b0 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   130b0:	      /----------> lea -76(sp),sp
   130b4:	      |            move.l a6,-(sp)
	switch (from->varType) {
   130b6:	      |            movea.l 84(sp),a0
   130ba:	      |            move.l (a0),d0
   130bc:	      |            moveq #10,d1
   130be:	      |            cmp.l d0,d1
   130c0:	/-----|----------- bcs.w 1335e <getTextFromAnyVar+0x2ae>
   130c4:	|     |            add.l d0,d0
   130c6:	|     |            movea.l d0,a0
   130c8:	|     |            adda.l #78036,a0
   130ce:	|     |            move.w (a0),d0
   130d0:	|     |            jmp (130d4 <getTextFromAnyVar+0x24>,pc,d0.w)
   130d4:	|     |            .short 0x028a
   130d6:	|     |            bset d0,(a0)+
   130d8:	|     |            .short 0x028a
   130da:	|     |            ori.b #-118,(a6)
   130de:	|     |            andi.b #8,ccr
   130e2:	|     |            andi.w #650,-(a0)
   130e6:	|     |            .short 0x028a
   130e8:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   130ee:	|     |            move.l 4(a0),d0
   130f2:	|     |            move.l d0,-(sp)
   130f4:	|     |            jsr b8 <copyString>
   130fa:	|     |            addq.l #4,sp
   130fc:	|  /--|----------- bra.w 13380 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   13100:	|  |  |            pea 176b4 <PutChar+0x20be>
   13106:	|  |  |            jsr b8 <copyString>
   1310c:	|  |  |            addq.l #4,sp
   1310e:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13112:	|  |  |            clr.l 72(sp)
   13116:	|  |  |     /----- bra.w 131c0 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   1311a:	|  |  |  /--|----> pea 176ba <PutChar+0x20c4>
   13120:	|  |  |  |  |      move.l 80(sp),-(sp)
   13124:	|  |  |  |  |      jsr 12006 <joinStrings>
   1312a:	|  |  |  |  |      addq.l #8,sp
   1312c:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   13130:	|  |  |  |  |  /-- bne.s 13138 <getTextFromAnyVar+0x88>
   13132:	|  |  |  |  |  |   moveq #0,d0
   13134:	|  +--|--|--|--|-- bra.w 13380 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13138:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   1313e:	|  |  |  |  |      move.l 187a2 <SysBase>,d0
   13144:	|  |  |  |  |      movea.l d0,a6
   13146:	|  |  |  |  |      movea.l 56(sp),a1
   1314a:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   1314e:	|  |  |  |  |      movea.l 84(sp),a0
   13152:	|  |  |  |  |      movea.l 4(a0),a0
   13156:	|  |  |  |  |      move.l (a0),d1
   13158:	|  |  |  |  |      move.l 72(sp),d0
   1315c:	|  |  |  |  |      lsl.l #3,d0
   1315e:	|  |  |  |  |      add.l d1,d0
   13160:	|  |  |  |  |      move.l d0,-(sp)
   13162:	|  |  +--|--|----- jsr 130b0 <getTextFromAnyVar>(pc)
   13166:	|  |  |  |  |      addq.l #4,sp
   13168:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   1316c:	|  |  |  |  |      move.l 52(sp),-(sp)
   13170:	|  |  |  |  |      move.l 64(sp),-(sp)
   13174:	|  |  |  |  |      jsr 12006 <joinStrings>
   1317a:	|  |  |  |  |      addq.l #8,sp
   1317c:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   13180:	|  |  |  |  |  /-- bne.s 13188 <getTextFromAnyVar+0xd8>
   13182:	|  |  |  |  |  |   moveq #0,d0
   13184:	|  +--|--|--|--|-- bra.w 13380 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   13188:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   1318e:	|  |  |  |  |      move.l 187a2 <SysBase>,d0
   13194:	|  |  |  |  |      movea.l d0,a6
   13196:	|  |  |  |  |      movea.l 48(sp),a1
   1319a:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   1319e:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   131a2:	|  |  |  |  |      move.l 60(sp),44(sp)
   131a8:	|  |  |  |  |      move.l 187a2 <SysBase>,d0
   131ae:	|  |  |  |  |      movea.l d0,a6
   131b0:	|  |  |  |  |      movea.l 44(sp),a1
   131b4:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   131b8:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   131bc:	|  |  |  |  |      addq.l #1,72(sp)
   131c0:	|  |  |  |  \----> movea.l 84(sp),a0
   131c4:	|  |  |  |         movea.l 4(a0),a0
   131c8:	|  |  |  |         move.l 4(a0),d0
   131cc:	|  |  |  |         cmp.l 72(sp),d0
   131d0:	|  |  |  \-------- bgt.w 1311a <getTextFromAnyVar+0x6a>
			}
			return builder;
   131d4:	|  |  |            move.l 76(sp),d0
   131d8:	|  +--|----------- bra.w 13380 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   131dc:	|  |  |            pea 176bc <PutChar+0x20c6>
   131e2:	|  |  |            jsr b8 <copyString>
   131e8:	|  |  |            addq.l #4,sp
   131ea:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   131ee:	|  |  |            movea.l 84(sp),a0
   131f2:	|  |  |            movea.l 4(a0),a0
   131f6:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   131fa:	|  |  |     /----- bra.w 1329c <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   131fe:	|  |  |  /--|----> pea 176ba <PutChar+0x20c4>
   13204:	|  |  |  |  |      move.l 72(sp),-(sp)
   13208:	|  |  |  |  |      jsr 12006 <joinStrings>
   1320e:	|  |  |  |  |      addq.l #8,sp
   13210:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   13214:	|  |  |  |  |  /-- bne.s 1321c <getTextFromAnyVar+0x16c>
   13216:	|  |  |  |  |  |   moveq #0,d0
   13218:	|  +--|--|--|--|-- bra.w 13380 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1321c:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   13222:	|  |  |  |  |      move.l 187a2 <SysBase>,d0
   13228:	|  |  |  |  |      movea.l d0,a6
   1322a:	|  |  |  |  |      movea.l 32(sp),a1
   1322e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   13232:	|  |  |  |  |      move.l 64(sp),d0
   13236:	|  |  |  |  |      move.l d0,-(sp)
   13238:	|  |  \--|--|----- jsr 130b0 <getTextFromAnyVar>(pc)
   1323c:	|  |     |  |      addq.l #4,sp
   1323e:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   13242:	|  |     |  |      move.l 28(sp),-(sp)
   13246:	|  |     |  |      move.l 40(sp),-(sp)
   1324a:	|  |     |  |      jsr 12006 <joinStrings>
   13250:	|  |     |  |      addq.l #8,sp
   13252:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   13256:	|  |     |  |  /-- bne.s 1325e <getTextFromAnyVar+0x1ae>
   13258:	|  |     |  |  |   moveq #0,d0
   1325a:	|  +-----|--|--|-- bra.w 13380 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1325e:	|  |     |  |  \-> move.l 28(sp),24(sp)
   13264:	|  |     |  |      move.l 187a2 <SysBase>,d0
   1326a:	|  |     |  |      movea.l d0,a6
   1326c:	|  |     |  |      movea.l 24(sp),a1
   13270:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   13274:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   13278:	|  |     |  |      move.l 36(sp),20(sp)
   1327e:	|  |     |  |      move.l 187a2 <SysBase>,d0
   13284:	|  |     |  |      movea.l d0,a6
   13286:	|  |     |  |      movea.l 20(sp),a1
   1328a:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   1328e:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   13292:	|  |     |  |      movea.l 64(sp),a0
   13296:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   1329c:	|  |     |  \----> tst.l 64(sp)
   132a0:	|  |     \-------- bne.w 131fe <getTextFromAnyVar+0x14e>
			}
			return builder;
   132a4:	|  |               move.l 68(sp),d0
   132a8:	|  +-------------- bra.w 13380 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   132ac:	|  |               moveq #10,d0
   132ae:	|  |               move.l d0,16(sp)
   132b2:	|  |               clr.l 12(sp)
   132b6:	|  |               move.l 187a2 <SysBase>,d0
   132bc:	|  |               movea.l d0,a6
   132be:	|  |               move.l 16(sp),d0
   132c2:	|  |               move.l 12(sp),d1
   132c6:	|  |               jsr -684(a6)
   132ca:	|  |               move.l d0,8(sp)
   132ce:	|  |               move.l 8(sp),d0
   132d2:	|  |               move.l d0,4(sp)
			if (! buff) {
   132d6:	|  |           /-- bne.s 132ec <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   132d8:	|  |           |   pea 176c3 <PutChar+0x20cd>
   132de:	|  |           |   jsr 14b22 <KPrintF>
   132e4:	|  |           |   addq.l #4,sp
				return NULL;
   132e6:	|  |           |   moveq #0,d0
   132e8:	|  +-----------|-- bra.w 13380 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   132ec:	|  |           \-> movea.l 84(sp),a0
   132f0:	|  |               move.l 4(a0),d0
   132f4:	|  |               move.l d0,-(sp)
   132f6:	|  |               pea 176ed <PutChar+0x20f7>
   132fc:	|  |               move.l 12(sp),-(sp)
   13300:	|  |               jsr 122e4 <sprintf>
   13306:	|  |               lea 12(sp),sp
			return buff;
   1330a:	|  |               move.l 4(sp),d0
   1330e:	|  +-------------- bra.s 13380 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   13310:	|  |               movea.l 84(sp),a0
   13314:	|  |               move.l 4(a0),d0
   13318:	|  |               move.l d0,-(sp)
   1331a:	|  |               jsr 2a8a <resourceNameFromNum>
   13320:	|  |               addq.l #4,sp
   13322:	|  |               move.l d0,-(sp)
   13324:	|  |               pea 1605a <PutChar+0xa64>
   1332a:	|  |               jsr 12006 <joinStrings>
   13330:	|  |               addq.l #8,sp
   13332:	|  +-------------- bra.s 13380 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   13334:	|  |               movea.l 84(sp),a0
   13338:	|  |               move.l 4(a0),d0
   1333c:	|  |               move.l d0,-(sp)
   1333e:	|  |               jsr b910 <findObjectType>
   13344:	|  |               addq.l #4,sp
   13346:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   1334a:	+--|-------------- beq.s 1335e <getTextFromAnyVar+0x2ae>
   1334c:	|  |               movea.l 40(sp),a0
   13350:	|  |               move.l (a0),d0
   13352:	|  |               move.l d0,-(sp)
   13354:	|  |               jsr b8 <copyString>
   1335a:	|  |               addq.l #4,sp
   1335c:	|  +-------------- bra.s 13380 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   1335e:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   13360:	   |               movea.l 84(sp),a0
   13364:	   |               move.l (a0),d0
   13366:	   |               add.l d0,d0
   13368:	   |               movea.l d0,a1
   1336a:	   |               adda.l d0,a1
   1336c:	   |               lea 18680 <typeName>,a0
   13372:	   |               move.l (0,a1,a0.l),d0
   13376:	   |               move.l d0,-(sp)
   13378:	   |               jsr b8 <copyString>
   1337e:	   |               addq.l #4,sp
}
   13380:	   \-------------> movea.l (sp)+,a6
   13382:	                   lea 76(sp),sp
   13386:	                   rts

00013388 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   13388:	move.l 4(sp),-(sp)
   1338c:	jsr 12d28 <unlinkVar>
   13392:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   13394:	movea.l 4(sp),a0
   13398:	moveq #8,d0
   1339a:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   1339c:	movea.l 4(sp),a0
   133a0:	move.l 8(sp),4(a0)
}
   133a6:	nop
   133a8:	rts

000133aa <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   133aa:	move.l 4(sp),-(sp)
   133ae:	jsr 12d28 <unlinkVar>
   133b4:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   133b6:	movea.l 4(sp),a0
   133ba:	moveq #9,d0
   133bc:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   133be:	movea.l 4(sp),a0
   133c2:	move.l 8(sp),4(a0)
}
   133c8:	nop
   133ca:	rts

000133cc <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   133cc:	move.l 4(sp),-(sp)
   133d0:	jsr 12d28 <unlinkVar>
   133d6:	addq.l #4,sp
	thisVar->varType = vT;
   133d8:	movea.l 4(sp),a0
   133dc:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   133e0:	movea.l 4(sp),a0
   133e4:	move.l 12(sp),4(a0)
}
   133ea:	nop
   133ec:	rts

000133ee <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   133ee:	      /-- bra.s 13400 <stackGetByIndex+0x12>
        vS = vS->next;
   133f0:	/-----|-> movea.l 4(sp),a0
   133f4:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   133fa:	|     +-- bne.s 13400 <stackGetByIndex+0x12>
            return NULL;
   133fc:	|     |   moveq #0,d0
   133fe:	|  /--|-- bra.s 13414 <stackGetByIndex+0x26>
    while (theIndex--) {
   13400:	|  |  \-> move.l 8(sp),d0
   13404:	|  |      move.l d0,d1
   13406:	|  |      subq.l #1,d1
   13408:	|  |      move.l d1,8(sp)
   1340c:	|  |      tst.l d0
   1340e:	\--|----- bne.s 133f0 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   13410:	   |      move.l 4(sp),d0
}
   13414:	   \----> rts

00013416 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   13416:	          tst.l 4(sp)
   1341a:	      /-- bne.s 1342a <stackFindLast+0x14>
		return NULL;
   1341c:	      |   moveq #0,d0
   1341e:	/-----|-- bra.s 13438 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   13420:	|  /--|-> movea.l 4(sp),a0
   13424:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   1342a:	|  |  \-> movea.l 4(sp),a0
   1342e:	|  |      move.l 8(a0),d0
   13432:	|  \----- bne.s 13420 <stackFindLast+0xa>

	return hunt;
   13434:	|         move.l 4(sp),d0
}
   13438:	\-------> rts

0001343a <stackSize>:

int stackSize (const struct stackHandler * me) {
   1343a:	       subq.l #8,sp
	int r = 0;
   1343c:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   13440:	       movea.l 12(sp),a0
   13444:	       move.l (a0),(sp)
	while (a) {
   13446:	   /-- bra.s 13452 <stackSize+0x18>
		r ++;
   13448:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   1344c:	|  |   movea.l (sp),a0
   1344e:	|  |   move.l 8(a0),(sp)
	while (a) {
   13452:	|  \-> tst.l (sp)
   13454:	\----- bne.s 13448 <stackSize+0xe>
	}
	return r;
   13456:	       move.l 4(sp),d0
}
   1345a:	       addq.l #8,sp
   1345c:	       rts

0001345e <trimStack>:

void trimStack (struct variableStack ** stack) {
   1345e:	subq.l #8,sp
   13460:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   13462:	movea.l 16(sp),a0
   13466:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   1346a:	movea.l 16(sp),a0
   1346e:	movea.l (a0),a0
   13470:	move.l 8(a0),d0
   13474:	movea.l 16(sp),a0
   13478:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   1347a:	move.l 8(sp),d0
   1347e:	move.l d0,-(sp)
   13480:	jsr 12d28 <unlinkVar>
   13486:	addq.l #4,sp
	FreeVec(killMe);
   13488:	move.l 8(sp),4(sp)
   1348e:	move.l 187a2 <SysBase>,d0
   13494:	movea.l d0,a6
   13496:	movea.l 4(sp),a1
   1349a:	jsr -690(a6)
   1349e:	nop
   134a0:	movea.l (sp)+,a6
   134a2:	addq.l #8,sp
   134a4:	rts

000134a6 <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   134a6:	pea 176f0 <PutChar+0x20fa>
   134ac:	jsr 14b22 <KPrintF>
   134b2:	addq.l #4,sp
	return FALSE;
   134b4:	clr.w d0
}
   134b6:	rts

000134b8 <stringWidth>:

int stringWidth (char * theText) {
   134b8:	       subq.l #8,sp
	int a = 0;
   134ba:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   134be:	       clr.l (sp)

	if (! fontTableSize) return 0;
   134c0:	       move.l 188f6 <fontTableSize>,d0
   134c6:	/----- bne.s 134cc <stringWidth+0x14>
   134c8:	|      moveq #0,d0
   134ca:	|  /-- bra.s 134ce <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   134cc:	\--|-> move.l (sp),d0
}
   134ce:	   \-> addq.l #8,sp
   134d0:	       rts

000134d2 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   134d2:	pea 17717 <PutChar+0x2121>
   134d8:	jsr 14b22 <KPrintF>
   134de:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   134e0:	moveq #1,d0
}
   134e2:	rts

000134e4 <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   134e4:	       lea -16(sp),sp
   134e8:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   134ea:	       moveq #36,d0
   134ec:	       move.l d0,16(sp)
   134f0:	       clr.l 12(sp)
   134f4:	       move.l 187a2 <SysBase>,d0
   134fa:	       movea.l d0,a6
   134fc:	       move.l 16(sp),d0
   13500:	       move.l 12(sp),d1
   13504:	       jsr -684(a6)
   13508:	       move.l d0,8(sp)
   1350c:	       move.l 8(sp),d0
   13510:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   13514:	   /-- bne.s 1351c <addScreenRegion+0x38>
   13516:	   |   clr.w d0
   13518:	/--|-- bra.w 1359c <addScreenRegion+0xb8>
    newRegion->di = di;
   1351c:	|  \-> movea.l 4(sp),a0
   13520:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   13526:	|      movea.l 4(sp),a0
   1352a:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1352e:	|      movea.l 4(sp),a0
   13532:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   13538:	|      movea.l 4(sp),a0
   1353c:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   13542:	|      movea.l 4(sp),a0
   13546:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1354c:	|      movea.l 4(sp),a0
   13550:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   13556:	|      movea.l 4(sp),a0
   1355a:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   13560:	|      move.l 52(sp),-(sp)
   13564:	|      jsr ba00 <loadObjectType>
   1356a:	|      addq.l #4,sp
   1356c:	|      movea.l 4(sp),a0
   13570:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   13574:	|      move.l 188fa <allScreenRegions>,d0
   1357a:	|      movea.l 4(sp),a0
   1357e:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   13582:	|      move.l 4(sp),188fa <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   1358a:	|      movea.l 4(sp),a0
   1358e:	|      move.l 28(a0),d0
   13592:	|      sne d0
   13594:	|      neg.b d0
   13596:	|      move.b d0,d0
   13598:	|      andi.w #255,d0
}
   1359c:	\----> movea.l (sp)+,a6
   1359e:	       lea 16(sp),sp
   135a2:	       rts

000135a4 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   135a4:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   135a6:	             move.l 188fa <allScreenRegions>,(sp)

	while (thisRegion) {
   135ac:	   /-------- bra.s 135c8 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   135ae:	/--|-------> movea.l (sp),a0
   135b0:	|  |         movea.l 28(a0),a0
   135b4:	|  |         move.l 4(a0),d0
   135b8:	|  |         cmp.l 8(sp),d0
   135bc:	|  |     /-- bne.s 135c2 <getRegionForObject+0x1e>
			return thisRegion;
   135be:	|  |     |   move.l (sp),d0
   135c0:	|  |  /--|-- bra.s 135ce <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   135c2:	|  |  |  \-> movea.l (sp),a0
   135c4:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   135c8:	|  \--|----> tst.l (sp)
   135ca:	\-----|----- bne.s 135ae <getRegionForObject+0xa>
	}

	return NULL;
   135cc:	      |      moveq #0,d0
}
   135ce:	      \----> addq.l #4,sp
   135d0:	             rts

000135d2 <killAllRegions>:

void killAllRegions () {
   135d2:	       subq.l #8,sp
   135d4:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   135d6:	   /-- bra.s 13618 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   135d8:	/--|-> move.l 188fa <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   135e0:	|  |   movea.l 188fa <allScreenRegions>,a0
   135e6:	|  |   move.l 32(a0),d0
   135ea:	|  |   move.l d0,188fa <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   135f0:	|  |   movea.l 8(sp),a0
   135f4:	|  |   move.l 28(a0),d0
   135f8:	|  |   move.l d0,-(sp)
   135fa:	|  |   jsr bcb8 <removeObjectType>
   13600:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   13602:	|  |   move.l 8(sp),4(sp)
   13608:	|  |   move.l 187a2 <SysBase>,d0
   1360e:	|  |   movea.l d0,a6
   13610:	|  |   movea.l 4(sp),a1
   13614:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   13618:	|  \-> move.l 188fa <allScreenRegions>,d0
   1361e:	\----- bne.s 135d8 <killAllRegions+0x6>
	}
	overRegion = NULL;
   13620:	       clr.l 188fe <overRegion>
}
   13626:	       nop
   13628:	       movea.l (sp)+,a6
   1362a:	       addq.l #8,sp
   1362c:	       rts

0001362e <loadRegions>:

void loadRegions (BPTR fp) {
   1362e:	       lea -24(sp),sp
   13632:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   13634:	       move.l 32(sp),-(sp)
   13638:	       jsr 6bc <get2bytes>
   1363e:	       addq.l #4,sp
   13640:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   13644:	       move.l #100602,20(sp)

	while (numRegions --) {
   1364c:	   /-- bra.w 1372a <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   13650:	/--|-> moveq #36,d0
   13652:	|  |   move.l d0,16(sp)
   13656:	|  |   clr.l 12(sp)
   1365a:	|  |   move.l 187a2 <SysBase>,d0
   13660:	|  |   movea.l d0,a6
   13662:	|  |   move.l 16(sp),d0
   13666:	|  |   move.l 12(sp),d1
   1366a:	|  |   jsr -684(a6)
   1366e:	|  |   move.l d0,8(sp)
   13672:	|  |   move.l 8(sp),d0
   13676:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   1367a:	|  |   movea.l 20(sp),a0
   1367e:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   13682:	|  |   moveq #32,d1
   13684:	|  |   add.l 4(sp),d1
   13688:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   1368c:	|  |   move.l 32(sp),-(sp)
   13690:	|  |   jsr 6bc <get2bytes>
   13696:	|  |   addq.l #4,sp
   13698:	|  |   movea.l 4(sp),a0
   1369c:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   1369e:	|  |   move.l 32(sp),-(sp)
   136a2:	|  |   jsr 6bc <get2bytes>
   136a8:	|  |   addq.l #4,sp
   136aa:	|  |   movea.l 4(sp),a0
   136ae:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   136b2:	|  |   move.l 32(sp),-(sp)
   136b6:	|  |   jsr 6bc <get2bytes>
   136bc:	|  |   addq.l #4,sp
   136be:	|  |   movea.l 4(sp),a0
   136c2:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   136c6:	|  |   move.l 32(sp),-(sp)
   136ca:	|  |   jsr 6bc <get2bytes>
   136d0:	|  |   addq.l #4,sp
   136d2:	|  |   movea.l 4(sp),a0
   136d6:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   136da:	|  |   move.l 32(sp),-(sp)
   136de:	|  |   jsr 6bc <get2bytes>
   136e4:	|  |   addq.l #4,sp
   136e6:	|  |   movea.l 4(sp),a0
   136ea:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   136ee:	|  |   move.l 32(sp),-(sp)
   136f2:	|  |   jsr 6bc <get2bytes>
   136f8:	|  |   addq.l #4,sp
   136fa:	|  |   movea.l 4(sp),a0
   136fe:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   13702:	|  |   move.l 32(sp),-(sp)
   13706:	|  |   jsr 6bc <get2bytes>
   1370c:	|  |   addq.l #4,sp
   1370e:	|  |   movea.l 4(sp),a0
   13712:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   13716:	|  |   move.l 32(sp),-(sp)
   1371a:	|  |   jsr b9ae <loadObjectRef>
   13720:	|  |   addq.l #4,sp
   13722:	|  |   movea.l 4(sp),a0
   13726:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   1372a:	|  \-> move.l 24(sp),d0
   1372e:	|      move.l d0,d1
   13730:	|      subq.l #1,d1
   13732:	|      move.l d1,24(sp)
   13736:	|      tst.l d0
   13738:	\----- bne.w 13650 <loadRegions+0x22>
	}
	* pointy = NULL;
   1373c:	       movea.l 20(sp),a0
   13740:	       clr.l (a0)
}
   13742:	       nop
   13744:	       movea.l (sp)+,a6
   13746:	       lea 24(sp),sp
   1374a:	       rts

0001374c <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   1374c:	             lea -12(sp),sp
   13750:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   13752:	             move.l #100602,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   1375a:	   /-------- bra.s 137d4 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   1375c:	/--|-------> movea.l 12(sp),a0
   13760:	|  |         movea.l (a0),a0
   13762:	|  |         movea.l 28(a0),a0
   13766:	|  |         move.l 4(a0),d0
   1376a:	|  |         cmp.l 20(sp),d0
   1376e:	|  |  /----- bne.s 137c6 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   13770:	|  |  |      movea.l 12(sp),a0
   13774:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   13778:	|  |  |      movea.l 8(sp),a0
   1377c:	|  |  |      move.l 32(a0),d0
   13780:	|  |  |      movea.l 12(sp),a0
   13784:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   13786:	|  |  |      movea.l 8(sp),a0
   1378a:	|  |  |      move.l 28(a0),d0
   1378e:	|  |  |      move.l d0,-(sp)
   13790:	|  |  |      jsr bcb8 <removeObjectType>
   13796:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   13798:	|  |  |      move.l 188fe <overRegion>,d0
   1379e:	|  |  |      cmp.l 8(sp),d0
   137a2:	|  |  |  /-- bne.s 137aa <removeScreenRegion+0x5e>
   137a4:	|  |  |  |   clr.l 188fe <overRegion>
            FreeVec(killMe);
   137aa:	|  |  |  \-> move.l 8(sp),4(sp)
   137b0:	|  |  |      move.l 187a2 <SysBase>,d0
   137b6:	|  |  |      movea.l d0,a6
   137b8:	|  |  |      movea.l 4(sp),a1
   137bc:	|  |  |      jsr -690(a6)
            killMe = NULL;
   137c0:	|  |  |      clr.l 8(sp)
   137c4:	|  +--|----- bra.s 137d4 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   137c6:	|  |  \----> movea.l 12(sp),a0
   137ca:	|  |         move.l (a0),d0
   137cc:	|  |         moveq #32,d1
   137ce:	|  |         add.l d0,d1
   137d0:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   137d4:	|  \-------> movea.l 12(sp),a0
   137d8:	|            move.l (a0),d0
   137da:	\----------- bne.s 1375c <removeScreenRegion+0x10>
        }
    }
}
   137dc:	             nop
   137de:	             nop
   137e0:	             movea.l (sp)+,a6
   137e2:	             lea 12(sp),sp
   137e6:	             rts

000137e8 <saveRegions>:

void saveRegions (BPTR fp) {
   137e8:	       subq.l #8,sp
	int numRegions = 0;
   137ea:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   137ee:	       move.l 188fa <allScreenRegions>,(sp)
	while (thisRegion) {
   137f4:	   /-- bra.s 13800 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   137f6:	/--|-> movea.l (sp),a0
   137f8:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   137fc:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   13800:	|  \-> tst.l (sp)
   13802:	\----- bne.s 137f6 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   13804:	       move.l 12(sp),-(sp)
   13808:	       move.l 8(sp),-(sp)
   1380c:	       jsr 8d0 <put2bytes>
   13812:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   13814:	       move.l 188fa <allScreenRegions>,(sp)
	while (thisRegion) {
   1381a:	/----- bra.w 138c2 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   1381e:	|  /-> movea.l (sp),a0
   13820:	|  |   move.l (a0),d0
   13822:	|  |   move.l 12(sp),-(sp)
   13826:	|  |   move.l d0,-(sp)
   13828:	|  |   jsr 8d0 <put2bytes>
   1382e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   13830:	|  |   movea.l (sp),a0
   13832:	|  |   move.l 4(a0),d0
   13836:	|  |   move.l 12(sp),-(sp)
   1383a:	|  |   move.l d0,-(sp)
   1383c:	|  |   jsr 8d0 <put2bytes>
   13842:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   13844:	|  |   movea.l (sp),a0
   13846:	|  |   move.l 8(a0),d0
   1384a:	|  |   move.l 12(sp),-(sp)
   1384e:	|  |   move.l d0,-(sp)
   13850:	|  |   jsr 8d0 <put2bytes>
   13856:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   13858:	|  |   movea.l (sp),a0
   1385a:	|  |   move.l 12(a0),d0
   1385e:	|  |   move.l 12(sp),-(sp)
   13862:	|  |   move.l d0,-(sp)
   13864:	|  |   jsr 8d0 <put2bytes>
   1386a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   1386c:	|  |   movea.l (sp),a0
   1386e:	|  |   move.l 16(a0),d0
   13872:	|  |   move.l 12(sp),-(sp)
   13876:	|  |   move.l d0,-(sp)
   13878:	|  |   jsr 8d0 <put2bytes>
   1387e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   13880:	|  |   movea.l (sp),a0
   13882:	|  |   move.l 20(a0),d0
   13886:	|  |   move.l 12(sp),-(sp)
   1388a:	|  |   move.l d0,-(sp)
   1388c:	|  |   jsr 8d0 <put2bytes>
   13892:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   13894:	|  |   movea.l (sp),a0
   13896:	|  |   move.l 24(a0),d0
   1389a:	|  |   move.l 12(sp),-(sp)
   1389e:	|  |   move.l d0,-(sp)
   138a0:	|  |   jsr 8d0 <put2bytes>
   138a6:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   138a8:	|  |   movea.l (sp),a0
   138aa:	|  |   move.l 28(a0),d0
   138ae:	|  |   move.l 12(sp),-(sp)
   138b2:	|  |   move.l d0,-(sp)
   138b4:	|  |   jsr bd58 <saveObjectRef>
   138ba:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   138bc:	|  |   movea.l (sp),a0
   138be:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   138c2:	\--|-> tst.l (sp)
   138c4:	   \-- bne.w 1381e <saveRegions+0x36>
	}
}
   138c8:	       nop
   138ca:	       nop
   138cc:	       addq.l #8,sp
   138ce:	       rts

000138d0 <showBoxes>:

void showBoxes () {
   138d0:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   138d2:	       move.l 188fa <allScreenRegions>,(sp)

	while (huntRegion) {
   138d8:	/----- bra.w 13974 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   138dc:	|  /-> movea.l (sp),a0
   138de:	|  |   move.l 12(a0),d0
   138e2:	|  |   movea.l d0,a1
   138e4:	|  |   movea.l (sp),a0
   138e6:	|  |   move.l 4(a0),d0
   138ea:	|  |   move.l d0,d1
   138ec:	|  |   movea.l (sp),a0
   138ee:	|  |   move.l (a0),d0
   138f0:	|  |   move.l a1,-(sp)
   138f2:	|  |   move.l d1,-(sp)
   138f4:	|  |   move.l d0,-(sp)
   138f6:	|  |   jsr b648 <drawVerticalLine>
   138fc:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   13900:	|  |   movea.l (sp),a0
   13902:	|  |   move.l 12(a0),d0
   13906:	|  |   movea.l d0,a1
   13908:	|  |   movea.l (sp),a0
   1390a:	|  |   move.l 4(a0),d0
   1390e:	|  |   move.l d0,d1
   13910:	|  |   movea.l (sp),a0
   13912:	|  |   move.l 8(a0),d0
   13916:	|  |   move.l a1,-(sp)
   13918:	|  |   move.l d1,-(sp)
   1391a:	|  |   move.l d0,-(sp)
   1391c:	|  |   jsr b648 <drawVerticalLine>
   13922:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   13926:	|  |   movea.l (sp),a0
   13928:	|  |   move.l 8(a0),d0
   1392c:	|  |   movea.l d0,a1
   1392e:	|  |   movea.l (sp),a0
   13930:	|  |   move.l 4(a0),d0
   13934:	|  |   move.l d0,d1
   13936:	|  |   movea.l (sp),a0
   13938:	|  |   move.l (a0),d0
   1393a:	|  |   move.l a1,-(sp)
   1393c:	|  |   move.l d1,-(sp)
   1393e:	|  |   move.l d0,-(sp)
   13940:	|  |   jsr b622 <drawHorizontalLine>
   13946:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   1394a:	|  |   movea.l (sp),a0
   1394c:	|  |   move.l 8(a0),d0
   13950:	|  |   movea.l d0,a1
   13952:	|  |   movea.l (sp),a0
   13954:	|  |   move.l 12(a0),d0
   13958:	|  |   move.l d0,d1
   1395a:	|  |   movea.l (sp),a0
   1395c:	|  |   move.l (a0),d0
   1395e:	|  |   move.l a1,-(sp)
   13960:	|  |   move.l d1,-(sp)
   13962:	|  |   move.l d0,-(sp)
   13964:	|  |   jsr b622 <drawHorizontalLine>
   1396a:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   1396e:	|  |   movea.l (sp),a0
   13970:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   13974:	\--|-> tst.l (sp)
   13976:	   \-- bne.w 138dc <showBoxes+0xc>
	}
   1397a:	       nop
   1397c:	       nop
   1397e:	       addq.l #4,sp
   13980:	       rts

00013982 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   13982:	       lea -32(sp),sp
   13986:	       move.l d3,-(sp)
   13988:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   1398a:	       move.l 60(sp),d0
   1398e:	       sub.l 52(sp),d0
   13992:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   13996:	       move.l 64(sp),d0
   1399a:	       sub.l 56(sp),d0
   1399e:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   139a2:	       move.l 68(sp),d0
   139a6:	       sub.l 52(sp),d0
   139aa:	       move.l 36(sp),-(sp)
   139ae:	       move.l d0,-(sp)
   139b0:	       jsr 154e0 <__mulsi3>
   139b6:	       addq.l #8,sp
   139b8:	       move.l d0,d2
   139ba:	       move.l 72(sp),d0
   139be:	       sub.l 56(sp),d0
   139c2:	       move.l 32(sp),-(sp)
   139c6:	       move.l d0,-(sp)
   139c8:	       jsr 154e0 <__mulsi3>
   139ce:	       addq.l #8,sp
   139d0:	       add.l d2,d0
   139d2:	       move.l d0,-(sp)
   139d4:	       jsr 14f1e <__floatsidf>
   139da:	       addq.l #4,sp
   139dc:	       move.l d0,16(sp)
   139e0:	       move.l d1,20(sp)
   139e4:	       move.l 16(sp),24(sp)
   139ea:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   139f0:	       move.l 36(sp),-(sp)
   139f4:	       move.l 40(sp),-(sp)
   139f8:	       jsr 154e0 <__mulsi3>
   139fe:	       addq.l #8,sp
   13a00:	       move.l d0,d2
   13a02:	       move.l 32(sp),-(sp)
   13a06:	       move.l 36(sp),-(sp)
   13a0a:	       jsr 154e0 <__mulsi3>
   13a10:	       addq.l #8,sp
   13a12:	       add.l d2,d0
   13a14:	       move.l d0,-(sp)
   13a16:	       jsr 14f1e <__floatsidf>
   13a1c:	       addq.l #4,sp
   13a1e:	       move.l d1,-(sp)
   13a20:	       move.l d0,-(sp)
   13a22:	       move.l 36(sp),-(sp)
   13a26:	       move.l 36(sp),-(sp)
   13a2a:	       jsr 14da8 <__divdf3>
   13a30:	       lea 16(sp),sp
   13a34:	       move.l d0,8(sp)
   13a38:	       move.l d1,12(sp)
   13a3c:	       move.l 8(sp),24(sp)
   13a42:	       move.l 12(sp),28(sp)

	if (m < 0) {
   13a48:	       clr.l -(sp)
   13a4a:	       clr.l -(sp)
   13a4c:	       move.l 36(sp),-(sp)
   13a50:	       move.l 36(sp),-(sp)
   13a54:	       jsr 15136 <__ltdf2>
   13a5a:	       lea 16(sp),sp
   13a5e:	       tst.l d0
   13a60:	   /-- bge.s 13a76 <closestPointOnLine+0xf4>
		*closestX = x1;
   13a62:	   |   movea.l 44(sp),a0
   13a66:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   13a6a:	   |   movea.l 48(sp),a0
   13a6e:	   |   move.l 56(sp),(a0)
   13a72:	/--|-- bra.w 13b58 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   13a76:	|  \-> clr.l -(sp)
   13a78:	|      move.l #1072693248,-(sp)
   13a7e:	|      move.l 36(sp),-(sp)
   13a82:	|      move.l 36(sp),-(sp)
   13a86:	|      jsr 1507c <__gtdf2>
   13a8c:	|      lea 16(sp),sp
   13a90:	|      tst.l d0
   13a92:	|  /-- ble.s 13aa8 <closestPointOnLine+0x126>
		*closestX = x2;
   13a94:	|  |   movea.l 44(sp),a0
   13a98:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   13a9c:	|  |   movea.l 48(sp),a0
   13aa0:	|  |   move.l 64(sp),(a0)
   13aa4:	+--|-- bra.w 13b58 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   13aa8:	|  \-> move.l 52(sp),-(sp)
   13aac:	|      jsr 14f1e <__floatsidf>
   13ab2:	|      addq.l #4,sp
   13ab4:	|      move.l d0,d2
   13ab6:	|      move.l d1,d3
   13ab8:	|      move.l 36(sp),-(sp)
   13abc:	|      jsr 14f1e <__floatsidf>
   13ac2:	|      addq.l #4,sp
   13ac4:	|      move.l 28(sp),-(sp)
   13ac8:	|      move.l 28(sp),-(sp)
   13acc:	|      move.l d1,-(sp)
   13ace:	|      move.l d0,-(sp)
   13ad0:	|      jsr 14fae <__muldf3>
   13ad6:	|      lea 16(sp),sp
   13ada:	|      move.l d1,-(sp)
   13adc:	|      move.l d0,-(sp)
   13ade:	|      move.l d3,-(sp)
   13ae0:	|      move.l d2,-(sp)
   13ae2:	|      jsr 14d46 <__adddf3>
   13ae8:	|      lea 16(sp),sp
   13aec:	|      move.l d1,-(sp)
   13aee:	|      move.l d0,-(sp)
   13af0:	|      jsr 14eb6 <__fixdfsi>
   13af6:	|      addq.l #8,sp
   13af8:	|      movea.l 44(sp),a0
   13afc:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   13afe:	|      move.l 56(sp),-(sp)
   13b02:	|      jsr 14f1e <__floatsidf>
   13b08:	|      addq.l #4,sp
   13b0a:	|      move.l d0,d2
   13b0c:	|      move.l d1,d3
   13b0e:	|      move.l 32(sp),-(sp)
   13b12:	|      jsr 14f1e <__floatsidf>
   13b18:	|      addq.l #4,sp
   13b1a:	|      move.l 28(sp),-(sp)
   13b1e:	|      move.l 28(sp),-(sp)
   13b22:	|      move.l d1,-(sp)
   13b24:	|      move.l d0,-(sp)
   13b26:	|      jsr 14fae <__muldf3>
   13b2c:	|      lea 16(sp),sp
   13b30:	|      move.l d1,-(sp)
   13b32:	|      move.l d0,-(sp)
   13b34:	|      move.l d3,-(sp)
   13b36:	|      move.l d2,-(sp)
   13b38:	|      jsr 14d46 <__adddf3>
   13b3e:	|      lea 16(sp),sp
   13b42:	|      move.l d1,-(sp)
   13b44:	|      move.l d0,-(sp)
   13b46:	|      jsr 14eb6 <__fixdfsi>
   13b4c:	|      addq.l #8,sp
   13b4e:	|      movea.l 48(sp),a0
   13b52:	|      move.l d0,(a0)
		return TRUE;
   13b54:	|      moveq #1,d0
   13b56:	|  /-- bra.s 13b5a <closestPointOnLine+0x1d8>
	}
	return FALSE;
   13b58:	\--|-> clr.w d0
}
   13b5a:	   \-> move.l (sp)+,d2
   13b5c:	       move.l (sp)+,d3
   13b5e:	       lea 32(sp),sp
   13b62:	       rts

00013b64 <drawFloor>:

void drawFloor() {
   13b64:	                lea -12(sp),sp
   13b68:	                move.l d3,-(sp)
   13b6a:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   13b6c:	                clr.l 16(sp)
   13b70:	   /----------- bra.w 13d84 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   13b74:	/--|----------> movea.l 18902 <currentFloor>,a0
   13b7a:	|  |            move.l 12(a0),d1
   13b7e:	|  |            move.l 16(sp),d0
   13b82:	|  |            lsl.l #3,d0
   13b84:	|  |            movea.l d1,a0
   13b86:	|  |            adda.l d0,a0
   13b88:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   13b8c:	|  |            moveq #1,d0
   13b8e:	|  |            cmp.l 8(sp),d0
   13b92:	|  |  /-------- bge.w 13d80 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   13b96:	|  |  |         moveq #1,d0
   13b98:	|  |  |         move.l d0,12(sp)
   13b9c:	|  |  |     /-- bra.w 13c96 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   13ba0:	|  |  |  /--|-> movea.l 18902 <currentFloor>,a0
   13ba6:	|  |  |  |  |   move.l 4(a0),d1
   13baa:	|  |  |  |  |   movea.l 18902 <currentFloor>,a0
   13bb0:	|  |  |  |  |   movea.l 12(a0),a0
   13bb4:	|  |  |  |  |   move.l 16(sp),d0
   13bb8:	|  |  |  |  |   lsl.l #3,d0
   13bba:	|  |  |  |  |   adda.l d0,a0
   13bbc:	|  |  |  |  |   movea.l 4(a0),a0
   13bc0:	|  |  |  |  |   move.l 12(sp),d0
   13bc4:	|  |  |  |  |   add.l d0,d0
   13bc6:	|  |  |  |  |   add.l d0,d0
   13bc8:	|  |  |  |  |   adda.l d0,a0
   13bca:	|  |  |  |  |   move.l (a0),d0
   13bcc:	|  |  |  |  |   lsl.l #3,d0
   13bce:	|  |  |  |  |   movea.l d1,a0
   13bd0:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   13bd2:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   13bd6:	|  |  |  |  |   movea.l 18902 <currentFloor>,a0
   13bdc:	|  |  |  |  |   move.l 4(a0),d1
   13be0:	|  |  |  |  |   movea.l 18902 <currentFloor>,a0
   13be6:	|  |  |  |  |   movea.l 12(a0),a0
   13bea:	|  |  |  |  |   move.l 16(sp),d0
   13bee:	|  |  |  |  |   lsl.l #3,d0
   13bf0:	|  |  |  |  |   adda.l d0,a0
   13bf2:	|  |  |  |  |   movea.l 4(a0),a0
   13bf6:	|  |  |  |  |   move.l 12(sp),d0
   13bfa:	|  |  |  |  |   add.l d0,d0
   13bfc:	|  |  |  |  |   add.l d0,d0
   13bfe:	|  |  |  |  |   adda.l d0,a0
   13c00:	|  |  |  |  |   move.l (a0),d0
   13c02:	|  |  |  |  |   lsl.l #3,d0
   13c04:	|  |  |  |  |   movea.l d1,a0
   13c06:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   13c08:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   13c0a:	|  |  |  |  |   movea.l 18902 <currentFloor>,a0
   13c10:	|  |  |  |  |   move.l 4(a0),d1
   13c14:	|  |  |  |  |   movea.l 18902 <currentFloor>,a0
   13c1a:	|  |  |  |  |   movea.l 12(a0),a0
   13c1e:	|  |  |  |  |   move.l 16(sp),d0
   13c22:	|  |  |  |  |   lsl.l #3,d0
   13c24:	|  |  |  |  |   adda.l d0,a0
   13c26:	|  |  |  |  |   movea.l 4(a0),a0
   13c2a:	|  |  |  |  |   move.l 12(sp),d0
   13c2e:	|  |  |  |  |   addi.l #1073741823,d0
   13c34:	|  |  |  |  |   add.l d0,d0
   13c36:	|  |  |  |  |   add.l d0,d0
   13c38:	|  |  |  |  |   adda.l d0,a0
   13c3a:	|  |  |  |  |   move.l (a0),d0
   13c3c:	|  |  |  |  |   lsl.l #3,d0
   13c3e:	|  |  |  |  |   movea.l d1,a0
   13c40:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   13c42:	|  |  |  |  |   move.l 4(a0),d1
   13c46:	|  |  |  |  |   movea.l 18902 <currentFloor>,a0
   13c4c:	|  |  |  |  |   move.l 4(a0),d3
   13c50:	|  |  |  |  |   movea.l 18902 <currentFloor>,a0
   13c56:	|  |  |  |  |   movea.l 12(a0),a0
   13c5a:	|  |  |  |  |   move.l 16(sp),d0
   13c5e:	|  |  |  |  |   lsl.l #3,d0
   13c60:	|  |  |  |  |   adda.l d0,a0
   13c62:	|  |  |  |  |   movea.l 4(a0),a0
   13c66:	|  |  |  |  |   move.l 12(sp),d0
   13c6a:	|  |  |  |  |   addi.l #1073741823,d0
   13c70:	|  |  |  |  |   add.l d0,d0
   13c72:	|  |  |  |  |   add.l d0,d0
   13c74:	|  |  |  |  |   adda.l d0,a0
   13c76:	|  |  |  |  |   move.l (a0),d0
   13c78:	|  |  |  |  |   lsl.l #3,d0
   13c7a:	|  |  |  |  |   movea.l d3,a0
   13c7c:	|  |  |  |  |   adda.l d0,a0
   13c7e:	|  |  |  |  |   move.l (a0),d0
   13c80:	|  |  |  |  |   move.l d2,-(sp)
   13c82:	|  |  |  |  |   move.l a1,-(sp)
   13c84:	|  |  |  |  |   move.l d1,-(sp)
   13c86:	|  |  |  |  |   move.l d0,-(sp)
   13c88:	|  |  |  |  |   jsr 27f4 <drawLine>
   13c8e:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   13c92:	|  |  |  |  |   addq.l #1,12(sp)
   13c96:	|  |  |  |  \-> move.l 12(sp),d0
   13c9a:	|  |  |  |      cmp.l 8(sp),d0
   13c9e:	|  |  |  \----- blt.w 13ba0 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   13ca2:	|  |  |         movea.l 18902 <currentFloor>,a0
   13ca8:	|  |  |         move.l 4(a0),d1
   13cac:	|  |  |         movea.l 18902 <currentFloor>,a0
   13cb2:	|  |  |         movea.l 12(a0),a0
   13cb6:	|  |  |         move.l 16(sp),d0
   13cba:	|  |  |         lsl.l #3,d0
   13cbc:	|  |  |         adda.l d0,a0
   13cbe:	|  |  |         movea.l 4(a0),a0
   13cc2:	|  |  |         move.l 8(sp),d0
   13cc6:	|  |  |         addi.l #1073741823,d0
   13ccc:	|  |  |         add.l d0,d0
   13cce:	|  |  |         add.l d0,d0
   13cd0:	|  |  |         adda.l d0,a0
   13cd2:	|  |  |         move.l (a0),d0
   13cd4:	|  |  |         lsl.l #3,d0
   13cd6:	|  |  |         movea.l d1,a0
   13cd8:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   13cda:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   13cde:	|  |  |         movea.l 18902 <currentFloor>,a0
   13ce4:	|  |  |         move.l 4(a0),d1
   13ce8:	|  |  |         movea.l 18902 <currentFloor>,a0
   13cee:	|  |  |         movea.l 12(a0),a0
   13cf2:	|  |  |         move.l 16(sp),d0
   13cf6:	|  |  |         lsl.l #3,d0
   13cf8:	|  |  |         adda.l d0,a0
   13cfa:	|  |  |         movea.l 4(a0),a0
   13cfe:	|  |  |         move.l 8(sp),d0
   13d02:	|  |  |         addi.l #1073741823,d0
   13d08:	|  |  |         add.l d0,d0
   13d0a:	|  |  |         add.l d0,d0
   13d0c:	|  |  |         adda.l d0,a0
   13d0e:	|  |  |         move.l (a0),d0
   13d10:	|  |  |         lsl.l #3,d0
   13d12:	|  |  |         movea.l d1,a0
   13d14:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   13d16:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   13d18:	|  |  |         movea.l 18902 <currentFloor>,a0
   13d1e:	|  |  |         move.l 4(a0),d1
   13d22:	|  |  |         movea.l 18902 <currentFloor>,a0
   13d28:	|  |  |         movea.l 12(a0),a0
   13d2c:	|  |  |         move.l 16(sp),d0
   13d30:	|  |  |         lsl.l #3,d0
   13d32:	|  |  |         adda.l d0,a0
   13d34:	|  |  |         movea.l 4(a0),a0
   13d38:	|  |  |         move.l (a0),d0
   13d3a:	|  |  |         lsl.l #3,d0
   13d3c:	|  |  |         movea.l d1,a0
   13d3e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   13d40:	|  |  |         move.l 4(a0),d1
   13d44:	|  |  |         movea.l 18902 <currentFloor>,a0
   13d4a:	|  |  |         move.l 4(a0),d3
   13d4e:	|  |  |         movea.l 18902 <currentFloor>,a0
   13d54:	|  |  |         movea.l 12(a0),a0
   13d58:	|  |  |         move.l 16(sp),d0
   13d5c:	|  |  |         lsl.l #3,d0
   13d5e:	|  |  |         adda.l d0,a0
   13d60:	|  |  |         movea.l 4(a0),a0
   13d64:	|  |  |         move.l (a0),d0
   13d66:	|  |  |         lsl.l #3,d0
   13d68:	|  |  |         movea.l d3,a0
   13d6a:	|  |  |         adda.l d0,a0
   13d6c:	|  |  |         move.l (a0),d0
   13d6e:	|  |  |         move.l d2,-(sp)
   13d70:	|  |  |         move.l a1,-(sp)
   13d72:	|  |  |         move.l d1,-(sp)
   13d74:	|  |  |         move.l d0,-(sp)
   13d76:	|  |  |         jsr 27f4 <drawLine>
   13d7c:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   13d80:	|  |  \-------> addq.l #1,16(sp)
   13d84:	|  \----------> movea.l 18902 <currentFloor>,a0
   13d8a:	|               move.l 8(a0),d0
   13d8e:	|               cmp.l 16(sp),d0
   13d92:	\-------------- bgt.w 13b74 <drawFloor+0x10>
        }
    }
}
   13d96:	                nop
   13d98:	                nop
   13d9a:	                move.l (sp)+,d2
   13d9c:	                move.l (sp)+,d3
   13d9e:	                lea 12(sp),sp
   13da2:	                rts

00013da4 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   13da4:	                      lea -12(sp),sp
    int sharedVertices = 0;
   13da8:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   13dac:	                      clr.l 4(sp)
   13db0:	   /----------------- bra.w 13e42 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   13db4:	/--|----------------> clr.l (sp)
   13db6:	|  |     /----------- bra.s 13e32 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   13db8:	|  |  /--|----------> movea.l 16(sp),a0
   13dbc:	|  |  |  |            move.l 4(a0),d1
   13dc0:	|  |  |  |            move.l 4(sp),d0
   13dc4:	|  |  |  |            add.l d0,d0
   13dc6:	|  |  |  |            add.l d0,d0
   13dc8:	|  |  |  |            movea.l d1,a0
   13dca:	|  |  |  |            adda.l d0,a0
   13dcc:	|  |  |  |            move.l (a0),d1
   13dce:	|  |  |  |            movea.l 20(sp),a0
   13dd2:	|  |  |  |            movea.l 4(a0),a0
   13dd6:	|  |  |  |            move.l (sp),d0
   13dd8:	|  |  |  |            add.l d0,d0
   13dda:	|  |  |  |            add.l d0,d0
   13ddc:	|  |  |  |            adda.l d0,a0
   13dde:	|  |  |  |            move.l (a0),d0
   13de0:	|  |  |  |            cmp.l d1,d0
   13de2:	|  |  |  |  /-------- bne.s 13e30 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   13de4:	|  |  |  |  |         move.l 8(sp),d0
   13de8:	|  |  |  |  |         move.l d0,d1
   13dea:	|  |  |  |  |         addq.l #1,d1
   13dec:	|  |  |  |  |         move.l d1,8(sp)
   13df0:	|  |  |  |  |         tst.l d0
   13df2:	|  |  |  |  |     /-- beq.s 13e14 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   13df4:	|  |  |  |  |     |   movea.l 16(sp),a0
   13df8:	|  |  |  |  |     |   move.l 4(a0),d1
   13dfc:	|  |  |  |  |     |   move.l 4(sp),d0
   13e00:	|  |  |  |  |     |   add.l d0,d0
   13e02:	|  |  |  |  |     |   add.l d0,d0
   13e04:	|  |  |  |  |     |   movea.l d1,a0
   13e06:	|  |  |  |  |     |   adda.l d0,a0
   13e08:	|  |  |  |  |     |   move.l (a0),d0
   13e0a:	|  |  |  |  |     |   movea.l 28(sp),a0
   13e0e:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   13e10:	|  |  |  |  |     |   moveq #1,d0
   13e12:	|  |  |  |  |  /--|-- bra.s 13e52 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   13e14:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   13e18:	|  |  |  |  |  |      move.l 4(a0),d1
   13e1c:	|  |  |  |  |  |      move.l 4(sp),d0
   13e20:	|  |  |  |  |  |      add.l d0,d0
   13e22:	|  |  |  |  |  |      add.l d0,d0
   13e24:	|  |  |  |  |  |      movea.l d1,a0
   13e26:	|  |  |  |  |  |      adda.l d0,a0
   13e28:	|  |  |  |  |  |      move.l (a0),d0
   13e2a:	|  |  |  |  |  |      movea.l 24(sp),a0
   13e2e:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   13e30:	|  |  |  |  \--|----> addq.l #1,(sp)
   13e32:	|  |  |  \-----|----> movea.l 20(sp),a0
   13e36:	|  |  |        |      move.l (a0),d0
   13e38:	|  |  |        |      cmp.l (sp),d0
   13e3a:	|  |  \--------|----- bgt.w 13db8 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   13e3e:	|  |           |      addq.l #1,4(sp)
   13e42:	|  \-----------|----> movea.l 16(sp),a0
   13e46:	|              |      move.l (a0),d0
   13e48:	|              |      cmp.l 4(sp),d0
   13e4c:	\--------------|----- bgt.w 13db4 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   13e50:	               |      clr.w d0
}
   13e52:	               \----> lea 12(sp),sp
   13e56:	                      rts

00013e58 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   13e58:	movea.l 18902 <currentFloor>,a0
   13e5e:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   13e62:	movea.l 18902 <currentFloor>,a0
   13e68:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   13e6c:	movea.l 18902 <currentFloor>,a0
   13e72:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   13e76:	movea.l 18902 <currentFloor>,a0
   13e7c:	clr.l 16(a0)
}
   13e80:	nop
   13e82:	rts

00013e84 <inFloor>:

int inFloor (int x, int y) {
   13e84:	          subq.l #8,sp
	int i, r = -1;
   13e86:	          moveq #-1,d0
   13e88:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   13e8a:	          clr.l 4(sp)
   13e8e:	   /----- bra.s 13ec2 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   13e90:	/--|----> movea.l 18902 <currentFloor>,a0
   13e96:	|  |      move.l 12(a0),d1
   13e9a:	|  |      move.l 4(sp),d0
   13e9e:	|  |      lsl.l #3,d0
   13ea0:	|  |      add.l d1,d0
   13ea2:	|  |      move.l 16(sp),-(sp)
   13ea6:	|  |      move.l 16(sp),-(sp)
   13eaa:	|  |      move.l d0,-(sp)
   13eac:	|  |      jsr 1408e <pointInFloorPolygon>
   13eb2:	|  |      lea 12(sp),sp
   13eb6:	|  |      tst.w d0
   13eb8:	|  |  /-- beq.s 13ebe <inFloor+0x3a>
			r = i;
   13eba:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   13ebe:	|  |  \-> addq.l #1,4(sp)
   13ec2:	|  \----> movea.l 18902 <currentFloor>,a0
   13ec8:	|         move.l 8(a0),d0
   13ecc:	|         cmp.l 4(sp),d0
   13ed0:	\-------- bgt.s 13e90 <inFloor+0xc>

	return r;
   13ed2:	          move.l (sp),d0
}
   13ed4:	          addq.l #8,sp
   13ed6:	          rts

00013ed8 <initFloor>:

BOOL initFloor () {
   13ed8:	       lea -12(sp),sp
   13edc:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   13ede:	       moveq #20,d0
   13ee0:	       move.l d0,12(sp)
   13ee4:	       clr.l 8(sp)
   13ee8:	       move.l 187a2 <SysBase>,d0
   13eee:	       movea.l d0,a6
   13ef0:	       move.l 12(sp),d0
   13ef4:	       move.l 8(sp),d1
   13ef8:	       jsr -684(a6)
   13efc:	       move.l d0,4(sp)
   13f00:	       move.l 4(sp),d0
   13f04:	       move.l d0,18902 <currentFloor>

    if(currentFloor == 0) {
   13f0a:	       move.l 18902 <currentFloor>,d0
   13f10:	/----- bne.s 13f24 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   13f12:	|      pea 1773a <PutChar+0x2144>
   13f18:	|      jsr 14b22 <KPrintF>
   13f1e:	|      addq.l #4,sp
        return FALSE;
   13f20:	|      clr.w d0
   13f22:	|  /-- bra.s 13f2c <initFloor+0x54>
    }

	noFloor ();
   13f24:	\--|-> jsr 13e58 <noFloor>
	return TRUE;
   13f2a:	   |   moveq #1,d0
}
   13f2c:	   \-> movea.l (sp)+,a6
   13f2e:	       lea 12(sp),sp
   13f32:	       rts

00013f34 <killFloor>:

void killFloor () {
   13f34:	       lea -24(sp),sp
   13f38:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   13f3a:	       clr.l 24(sp)
   13f3e:	   /-- bra.s 13f98 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   13f40:	/--|-> movea.l 18902 <currentFloor>,a0
   13f46:	|  |   move.l 12(a0),d1
   13f4a:	|  |   move.l 24(sp),d0
   13f4e:	|  |   lsl.l #3,d0
   13f50:	|  |   movea.l d1,a0
   13f52:	|  |   adda.l d0,a0
   13f54:	|  |   move.l 4(a0),8(sp)
   13f5a:	|  |   move.l 187a2 <SysBase>,d0
   13f60:	|  |   movea.l d0,a6
   13f62:	|  |   movea.l 8(sp),a1
   13f66:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   13f6a:	|  |   movea.l 18902 <currentFloor>,a0
   13f70:	|  |   move.l 16(a0),d1
   13f74:	|  |   move.l 24(sp),d0
   13f78:	|  |   add.l d0,d0
   13f7a:	|  |   add.l d0,d0
   13f7c:	|  |   movea.l d1,a0
   13f7e:	|  |   adda.l d0,a0
   13f80:	|  |   move.l (a0),4(sp)
   13f84:	|  |   move.l 187a2 <SysBase>,d0
   13f8a:	|  |   movea.l d0,a6
   13f8c:	|  |   movea.l 4(sp),a1
   13f90:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   13f94:	|  |   addq.l #1,24(sp)
   13f98:	|  \-> movea.l 18902 <currentFloor>,a0
   13f9e:	|      move.l 8(a0),d0
   13fa2:	|      cmp.l 24(sp),d0
   13fa6:	\----- bgt.s 13f40 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   13fa8:	       movea.l 18902 <currentFloor>,a0
   13fae:	       move.l 12(a0),20(sp)
   13fb4:	       move.l 187a2 <SysBase>,d0
   13fba:	       movea.l d0,a6
   13fbc:	       movea.l 20(sp),a1
   13fc0:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   13fc4:	       movea.l 18902 <currentFloor>,a0
   13fca:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   13fce:	       movea.l 18902 <currentFloor>,a0
   13fd4:	       move.l 4(a0),16(sp)
   13fda:	       move.l 187a2 <SysBase>,d0
   13fe0:	       movea.l d0,a6
   13fe2:	       movea.l 16(sp),a1
   13fe6:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   13fea:	       movea.l 18902 <currentFloor>,a0
   13ff0:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   13ff4:	       movea.l 18902 <currentFloor>,a0
   13ffa:	       move.l 16(a0),12(sp)
   14000:	       move.l 187a2 <SysBase>,d0
   14006:	       movea.l d0,a6
   14008:	       movea.l 12(sp),a1
   1400c:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   14010:	       movea.l 18902 <currentFloor>,a0
   14016:	       clr.l 16(a0)
}
   1401a:	       nop
   1401c:	       movea.l (sp)+,a6
   1401e:	       lea 24(sp),sp
   14022:	       rts

00014024 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   14024:	                   lea -12(sp),sp
	int sharedVertices = 0;
   14028:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   1402c:	                   clr.l 4(sp)
   14030:	   /-------------- bra.s 1407c <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   14032:	/--|-------------> clr.l (sp)
   14034:	|  |     /-------- bra.s 14070 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   14036:	|  |  /--|-------> move.l 20(sp),d1
   1403a:	|  |  |  |         move.l 4(sp),d0
   1403e:	|  |  |  |         add.l d0,d0
   14040:	|  |  |  |         add.l d0,d0
   14042:	|  |  |  |         movea.l d1,a0
   14044:	|  |  |  |         adda.l d0,a0
   14046:	|  |  |  |         move.l (a0),d1
   14048:	|  |  |  |         movea.l 28(sp),a0
   1404c:	|  |  |  |         move.l (sp),d0
   1404e:	|  |  |  |         add.l d0,d0
   14050:	|  |  |  |         add.l d0,d0
   14052:	|  |  |  |         adda.l d0,a0
   14054:	|  |  |  |         move.l (a0),d0
   14056:	|  |  |  |         cmp.l d1,d0
   14058:	|  |  |  |     /-- bne.s 1406e <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   1405a:	|  |  |  |     |   move.l 8(sp),d0
   1405e:	|  |  |  |     |   move.l d0,d1
   14060:	|  |  |  |     |   addq.l #1,d1
   14062:	|  |  |  |     |   move.l d1,8(sp)
   14066:	|  |  |  |     |   tst.l d0
   14068:	|  |  |  |     +-- beq.s 1406e <polysShareSide+0x4a>
   1406a:	|  |  |  |     |   moveq #1,d0
   1406c:	|  |  |  |  /--|-- bra.s 14088 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   1406e:	|  |  |  |  |  \-> addq.l #1,(sp)
   14070:	|  |  |  \--|----> move.l 24(sp),d0
   14074:	|  |  |     |      cmp.l (sp),d0
   14076:	|  |  \-----|----- bgt.s 14036 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   14078:	|  |        |      addq.l #1,4(sp)
   1407c:	|  \--------|----> move.l 16(sp),d0
   14080:	|           |      cmp.l 4(sp),d0
   14084:	\-----------|----- bgt.s 14032 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   14086:	            |      clr.w d0
}
   14088:	            \----> lea 12(sp),sp
   1408c:	                   rts

0001408e <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   1408e:	             lea -28(sp),sp
   14092:	             move.l d3,-(sp)
   14094:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   14096:	             clr.l 32(sp)
   1409a:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1409e:	             movea.l 40(sp),a0
   140a2:	             move.l (a0),d0
   140a4:	             move.l d0,d1
   140a6:	             subq.l #1,d1
   140a8:	             move.l d1,28(sp)
   140ac:	   /-------- bra.w 142a6 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   140b0:	/--|-------> movea.l 18902 <currentFloor>,a0
   140b6:	|  |         move.l 4(a0),d1
   140ba:	|  |         movea.l 40(sp),a0
   140be:	|  |         movea.l 4(a0),a0
   140c2:	|  |         move.l 32(sp),d0
   140c6:	|  |         add.l d0,d0
   140c8:	|  |         add.l d0,d0
   140ca:	|  |         adda.l d0,a0
   140cc:	|  |         move.l (a0),d0
   140ce:	|  |         lsl.l #3,d0
   140d0:	|  |         movea.l d1,a0
   140d2:	|  |         adda.l d0,a0
   140d4:	|  |         move.l (a0),d0
   140d6:	|  |         move.l d0,-(sp)
   140d8:	|  |         jsr 14f5e <__floatsisf>
   140de:	|  |         addq.l #4,sp
   140e0:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   140e4:	|  |         movea.l 18902 <currentFloor>,a0
   140ea:	|  |         move.l 4(a0),d1
   140ee:	|  |         movea.l 40(sp),a0
   140f2:	|  |         movea.l 4(a0),a0
   140f6:	|  |         move.l 32(sp),d0
   140fa:	|  |         add.l d0,d0
   140fc:	|  |         add.l d0,d0
   140fe:	|  |         adda.l d0,a0
   14100:	|  |         move.l (a0),d0
   14102:	|  |         lsl.l #3,d0
   14104:	|  |         movea.l d1,a0
   14106:	|  |         adda.l d0,a0
   14108:	|  |         move.l 4(a0),d0
   1410c:	|  |         move.l d0,-(sp)
   1410e:	|  |         jsr 14f5e <__floatsisf>
   14114:	|  |         addq.l #4,sp
   14116:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1411a:	|  |         movea.l 18902 <currentFloor>,a0
   14120:	|  |         move.l 4(a0),d1
   14124:	|  |         movea.l 40(sp),a0
   14128:	|  |         movea.l 4(a0),a0
   1412c:	|  |         move.l 28(sp),d0
   14130:	|  |         add.l d0,d0
   14132:	|  |         add.l d0,d0
   14134:	|  |         adda.l d0,a0
   14136:	|  |         move.l (a0),d0
   14138:	|  |         lsl.l #3,d0
   1413a:	|  |         movea.l d1,a0
   1413c:	|  |         adda.l d0,a0
   1413e:	|  |         move.l (a0),d0
   14140:	|  |         move.l d0,-(sp)
   14142:	|  |         jsr 14f5e <__floatsisf>
   14148:	|  |         addq.l #4,sp
   1414a:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   1414e:	|  |         movea.l 18902 <currentFloor>,a0
   14154:	|  |         move.l 4(a0),d1
   14158:	|  |         movea.l 40(sp),a0
   1415c:	|  |         movea.l 4(a0),a0
   14160:	|  |         move.l 28(sp),d0
   14164:	|  |         add.l d0,d0
   14166:	|  |         add.l d0,d0
   14168:	|  |         adda.l d0,a0
   1416a:	|  |         move.l (a0),d0
   1416c:	|  |         lsl.l #3,d0
   1416e:	|  |         movea.l d1,a0
   14170:	|  |         adda.l d0,a0
   14172:	|  |         move.l 4(a0),d0
   14176:	|  |         move.l d0,-(sp)
   14178:	|  |         jsr 14f5e <__floatsisf>
   1417e:	|  |         addq.l #4,sp
   14180:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   14184:	|  |         move.l 48(sp),-(sp)
   14188:	|  |         jsr 14f5e <__floatsisf>
   1418e:	|  |         addq.l #4,sp
   14190:	|  |         move.l d0,-(sp)
   14192:	|  |         move.l 20(sp),-(sp)
   14196:	|  |         jsr 15100 <__lesf2>
   1419c:	|  |         addq.l #8,sp
   1419e:	|  |         tst.l d0
   141a0:	|  |     /-- bgt.s 141c0 <pointInFloorPolygon+0x132>
   141a2:	|  |     |   move.l 48(sp),-(sp)
   141a6:	|  |     |   jsr 14f5e <__floatsisf>
   141ac:	|  |     |   addq.l #4,sp
   141ae:	|  |     |   move.l d0,-(sp)
   141b0:	|  |     |   move.l 12(sp),-(sp)
   141b4:	|  |     |   jsr 150ca <__gtsf2>
   141ba:	|  |     |   addq.l #8,sp
   141bc:	|  |     |   tst.l d0
   141be:	|  |  /--|-- bgt.s 14200 <pointInFloorPolygon+0x172>
   141c0:	|  |  |  \-> move.l 48(sp),-(sp)
   141c4:	|  |  |      jsr 14f5e <__floatsisf>
   141ca:	|  |  |      addq.l #4,sp
   141cc:	|  |  |      move.l d0,-(sp)
   141ce:	|  |  |      move.l 12(sp),-(sp)
   141d2:	|  |  |      jsr 15100 <__lesf2>
   141d8:	|  |  |      addq.l #8,sp
   141da:	|  |  |      tst.l d0
   141dc:	|  |  |  /-- bgt.w 14296 <pointInFloorPolygon+0x208>
   141e0:	|  |  |  |   move.l 48(sp),-(sp)
   141e4:	|  |  |  |   jsr 14f5e <__floatsisf>
   141ea:	|  |  |  |   addq.l #4,sp
   141ec:	|  |  |  |   move.l d0,-(sp)
   141ee:	|  |  |  |   move.l 20(sp),-(sp)
   141f2:	|  |  |  |   jsr 150ca <__gtsf2>
   141f8:	|  |  |  |   addq.l #8,sp
   141fa:	|  |  |  |   tst.l d0
   141fc:	|  |  |  +-- ble.w 14296 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   14200:	|  |  \--|-> move.l 44(sp),-(sp)
   14204:	|  |     |   jsr 14f5e <__floatsisf>
   1420a:	|  |     |   addq.l #4,sp
   1420c:	|  |     |   move.l d0,d3
   1420e:	|  |     |   move.l 20(sp),-(sp)
   14212:	|  |     |   move.l 16(sp),-(sp)
   14216:	|  |     |   jsr 15252 <__subsf3>
   1421c:	|  |     |   addq.l #8,sp
   1421e:	|  |     |   move.l d0,d2
   14220:	|  |     |   move.l 48(sp),-(sp)
   14224:	|  |     |   jsr 14f5e <__floatsisf>
   1422a:	|  |     |   addq.l #4,sp
   1422c:	|  |     |   move.l 16(sp),-(sp)
   14230:	|  |     |   move.l d0,-(sp)
   14232:	|  |     |   jsr 15252 <__subsf3>
   14238:	|  |     |   addq.l #8,sp
   1423a:	|  |     |   move.l d0,-(sp)
   1423c:	|  |     |   move.l d2,-(sp)
   1423e:	|  |     |   jsr 15010 <__mulsf3>
   14244:	|  |     |   addq.l #8,sp
   14246:	|  |     |   move.l d0,d2
   14248:	|  |     |   move.l 16(sp),-(sp)
   1424c:	|  |     |   move.l 12(sp),-(sp)
   14250:	|  |     |   jsr 15252 <__subsf3>
   14256:	|  |     |   addq.l #8,sp
   14258:	|  |     |   move.l d0,-(sp)
   1425a:	|  |     |   move.l d2,-(sp)
   1425c:	|  |     |   jsr 14e0a <__divsf3>
   14262:	|  |     |   addq.l #8,sp
   14264:	|  |     |   move.l 20(sp),-(sp)
   14268:	|  |     |   move.l d0,-(sp)
   1426a:	|  |     |   jsr 14d10 <__addsf3>
   14270:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   14272:	|  |     |   move.l d0,-(sp)
   14274:	|  |     |   move.l d3,-(sp)
   14276:	|  |     |   jsr 15184 <__ltsf2>
   1427c:	|  |     |   addq.l #8,sp
   1427e:	|  |     |   tst.l d0
   14280:	|  |     +-- bge.s 14296 <pointInFloorPolygon+0x208>

			c = !c;
   14282:	|  |     |   tst.l 24(sp)
   14286:	|  |     |   seq d0
   14288:	|  |     |   neg.b d0
   1428a:	|  |     |   move.b d0,d0
   1428c:	|  |     |   andi.l #255,d0
   14292:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   14296:	|  |     \-> move.l 32(sp),d0
   1429a:	|  |         move.l d0,d1
   1429c:	|  |         addq.l #1,d1
   1429e:	|  |         move.l d1,32(sp)
   142a2:	|  |         move.l d0,28(sp)
   142a6:	|  \-------> movea.l 40(sp),a0
   142aa:	|            move.l (a0),d0
   142ac:	|            cmp.l 32(sp),d0
   142b0:	\----------- bgt.w 140b0 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   142b4:	             tst.l 24(sp)
   142b8:	             sne d0
   142ba:	             neg.b d0
   142bc:	             move.b d0,d0
   142be:	             andi.w #255,d0
}
   142c2:	             move.l (sp)+,d2
   142c4:	             move.l (sp)+,d3
   142c6:	             lea 28(sp),sp
   142ca:	             rts

000142cc <setFloor>:

BOOL setFloor (int fileNum) {
   142cc:	                               lea -132(sp),sp
   142d0:	                               move.l a6,-(sp)
   142d2:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   142d4:	                               jsr 13f34 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   142da:	                               move.l 144(sp),-(sp)
   142de:	                               jsr 5440 <openFileFromNum>
   142e4:	                               addq.l #4,sp
   142e6:	                               tst.l d0
   142e8:	                           /-- bne.s 142f0 <setFloor+0x24>
   142ea:	                           |   clr.w d0
   142ec:	/--------------------------|-- bra.w 14a3c <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   142f0:	|                          \-> movea.l 18902 <currentFloor>,a0
   142f6:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   142fa:	|                              move.l 1878a <bigDataFile>,118(sp)
   14302:	|                              move.l 187aa <DOSBase>,d0
   14308:	|                              movea.l d0,a6
   1430a:	|                              move.l 118(sp),d1
   1430e:	|                              jsr -306(a6)
   14312:	|                              move.l d0,114(sp)
   14316:	|                              move.l 114(sp),d0
   1431a:	|                              movea.l 18902 <currentFloor>,a0
   14320:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   14324:	|                              movea.l 18902 <currentFloor>,a0
   1432a:	|                              move.l 8(a0),d0
   1432e:	|                              lsl.l #3,d0
   14330:	|                              move.l d0,110(sp)
   14334:	|                              clr.l 106(sp)
   14338:	|                              move.l 187a2 <SysBase>,d0
   1433e:	|                              movea.l d0,a6
   14340:	|                              move.l 110(sp),d0
   14344:	|                              move.l 106(sp),d1
   14348:	|                              jsr -684(a6)
   1434c:	|                              move.l d0,102(sp)
   14350:	|                              move.l 102(sp),d0
   14354:	|                              movea.l 18902 <currentFloor>,a0
   1435a:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   1435e:	|                              movea.l 18902 <currentFloor>,a0
   14364:	|                              move.l 12(a0),d0
   14368:	|                          /-- bne.s 1437e <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   1436a:	|                          |   pea 1775e <PutChar+0x2168>
   14370:	|                          |   jsr 14b22 <KPrintF>
   14376:	|                          |   addq.l #4,sp
		return FALSE;
   14378:	|                          |   clr.w d0
   1437a:	+--------------------------|-- bra.w 14a3c <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1437e:	|                          \-> clr.l 136(sp)
   14382:	|                    /-------- bra.w 1449a <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   14386:	|                 /--|-------> move.l 1878a <bigDataFile>,26(sp)
   1438e:	|                 |  |         move.l 187aa <DOSBase>,d0
   14394:	|                 |  |         movea.l d0,a6
   14396:	|                 |  |         move.l 26(sp),d1
   1439a:	|                 |  |         jsr -306(a6)
   1439e:	|                 |  |         move.l d0,22(sp)
   143a2:	|                 |  |         move.l 22(sp),d1
   143a6:	|                 |  |         movea.l 18902 <currentFloor>,a0
   143ac:	|                 |  |         movea.l 12(a0),a0
   143b0:	|                 |  |         move.l 136(sp),d0
   143b4:	|                 |  |         lsl.l #3,d0
   143b6:	|                 |  |         adda.l d0,a0
   143b8:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   143ba:	|                 |  |         movea.l 18902 <currentFloor>,a0
   143c0:	|                 |  |         move.l 12(a0),d1
   143c4:	|                 |  |         move.l 136(sp),d0
   143c8:	|                 |  |         lsl.l #3,d0
   143ca:	|                 |  |         movea.l d1,a0
   143cc:	|                 |  |         adda.l d0,a0
   143ce:	|                 |  |         move.l (a0),d0
   143d0:	|                 |  |         add.l d0,d0
   143d2:	|                 |  |         add.l d0,d0
   143d4:	|                 |  |         move.l d0,18(sp)
   143d8:	|                 |  |         clr.l 14(sp)
   143dc:	|                 |  |         move.l 187a2 <SysBase>,d0
   143e2:	|                 |  |         movea.l d0,a6
   143e4:	|                 |  |         move.l 18(sp),d0
   143e8:	|                 |  |         move.l 14(sp),d1
   143ec:	|                 |  |         jsr -684(a6)
   143f0:	|                 |  |         move.l d0,10(sp)
   143f4:	|                 |  |         move.l 10(sp),d1
   143f8:	|                 |  |         movea.l 18902 <currentFloor>,a0
   143fe:	|                 |  |         movea.l 12(a0),a0
   14402:	|                 |  |         move.l 136(sp),d0
   14406:	|                 |  |         lsl.l #3,d0
   14408:	|                 |  |         adda.l d0,a0
   1440a:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   1440e:	|                 |  |         movea.l 18902 <currentFloor>,a0
   14414:	|                 |  |         move.l 12(a0),d1
   14418:	|                 |  |         move.l 136(sp),d0
   1441c:	|                 |  |         lsl.l #3,d0
   1441e:	|                 |  |         movea.l d1,a0
   14420:	|                 |  |         adda.l d0,a0
   14422:	|                 |  |         move.l 4(a0),d0
   14426:	|                 |  |     /-- bne.s 1443c <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   14428:	|                 |  |     |   pea 1775e <PutChar+0x2168>
   1442e:	|                 |  |     |   jsr 14b22 <KPrintF>
   14434:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   14436:	|                 |  |     |   clr.w d0
   14438:	+-----------------|--|-----|-- bra.w 14a3c <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1443c:	|                 |  |     \-> clr.l 132(sp)
   14440:	|                 |  |     /-- bra.s 1447a <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   14442:	|                 |  |  /--|-> move.l 1878a <bigDataFile>,d1
   14448:	|                 |  |  |  |   movea.l 18902 <currentFloor>,a0
   1444e:	|                 |  |  |  |   movea.l 12(a0),a0
   14452:	|                 |  |  |  |   move.l 136(sp),d0
   14456:	|                 |  |  |  |   lsl.l #3,d0
   14458:	|                 |  |  |  |   adda.l d0,a0
   1445a:	|                 |  |  |  |   movea.l 4(a0),a0
   1445e:	|                 |  |  |  |   move.l 132(sp),d0
   14462:	|                 |  |  |  |   add.l d0,d0
   14464:	|                 |  |  |  |   add.l d0,d0
   14466:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   1446a:	|                 |  |  |  |   move.l d1,-(sp)
   1446c:	|                 |  |  |  |   jsr 6bc <get2bytes>
   14472:	|                 |  |  |  |   addq.l #4,sp
   14474:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   14476:	|                 |  |  |  |   addq.l #1,132(sp)
   1447a:	|                 |  |  |  \-> movea.l 18902 <currentFloor>,a0
   14480:	|                 |  |  |      move.l 12(a0),d1
   14484:	|                 |  |  |      move.l 136(sp),d0
   14488:	|                 |  |  |      lsl.l #3,d0
   1448a:	|                 |  |  |      movea.l d1,a0
   1448c:	|                 |  |  |      adda.l d0,a0
   1448e:	|                 |  |  |      move.l (a0),d0
   14490:	|                 |  |  |      cmp.l 132(sp),d0
   14494:	|                 |  |  \----- bgt.s 14442 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   14496:	|                 |  |         addq.l #1,136(sp)
   1449a:	|                 |  \-------> movea.l 18902 <currentFloor>,a0
   144a0:	|                 |            move.l 8(a0),d0
   144a4:	|                 |            cmp.l 136(sp),d0
   144a8:	|                 \----------- bgt.w 14386 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   144ac:	|                              move.l 1878a <bigDataFile>,d0
   144b2:	|                              move.l d0,-(sp)
   144b4:	|                              jsr 6bc <get2bytes>
   144ba:	|                              addq.l #4,sp
   144bc:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   144c0:	|                              move.l 136(sp),d0
   144c4:	|                              lsl.l #3,d0
   144c6:	|                              move.l d0,98(sp)
   144ca:	|                              clr.l 94(sp)
   144ce:	|                              move.l 187a2 <SysBase>,d0
   144d4:	|                              movea.l d0,a6
   144d6:	|                              move.l 98(sp),d0
   144da:	|                              move.l 94(sp),d1
   144de:	|                              jsr -684(a6)
   144e2:	|                              move.l d0,90(sp)
   144e6:	|                              move.l 90(sp),d0
   144ea:	|                              movea.l 18902 <currentFloor>,a0
   144f0:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   144f4:	|                              movea.l 18902 <currentFloor>,a0
   144fa:	|                              move.l 4(a0),d0
   144fe:	|                          /-- bne.s 14514 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   14500:	|                          |   pea 1775e <PutChar+0x2168>
   14506:	|                          |   jsr 14b22 <KPrintF>
   1450c:	|                          |   addq.l #4,sp
		return FALSE;
   1450e:	|                          |   clr.w d0
   14510:	+--------------------------|-- bra.w 14a3c <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   14514:	|                          \-> clr.l 132(sp)
   14518:	|                          /-- bra.s 1456c <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   1451a:	|                       /--|-> move.l 1878a <bigDataFile>,d1
   14520:	|                       |  |   movea.l 18902 <currentFloor>,a0
   14526:	|                       |  |   movea.l 4(a0),a0
   1452a:	|                       |  |   move.l 132(sp),d0
   1452e:	|                       |  |   lsl.l #3,d0
   14530:	|                       |  |   lea (0,a0,d0.l),a2
   14534:	|                       |  |   move.l d1,-(sp)
   14536:	|                       |  |   jsr 6bc <get2bytes>
   1453c:	|                       |  |   addq.l #4,sp
   1453e:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   14540:	|                       |  |   move.l 1878a <bigDataFile>,d1
   14546:	|                       |  |   movea.l 18902 <currentFloor>,a0
   1454c:	|                       |  |   movea.l 4(a0),a0
   14550:	|                       |  |   move.l 132(sp),d0
   14554:	|                       |  |   lsl.l #3,d0
   14556:	|                       |  |   lea (0,a0,d0.l),a2
   1455a:	|                       |  |   move.l d1,-(sp)
   1455c:	|                       |  |   jsr 6bc <get2bytes>
   14562:	|                       |  |   addq.l #4,sp
   14564:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   14568:	|                       |  |   addq.l #1,132(sp)
   1456c:	|                       |  \-> move.l 132(sp),d0
   14570:	|                       |      cmp.l 136(sp),d0
   14574:	|                       \----- blt.s 1451a <setFloor+0x24e>
	}

	finishAccess ();
   14576:	|                              jsr 5338 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1457c:	|                              movea.l 18902 <currentFloor>,a0
   14582:	|                              move.l 8(a0),d0
   14586:	|                              add.l d0,d0
   14588:	|                              add.l d0,d0
   1458a:	|                              move.l d0,86(sp)
   1458e:	|                              clr.l 82(sp)
   14592:	|                              move.l 187a2 <SysBase>,d0
   14598:	|                              movea.l d0,a6
   1459a:	|                              move.l 86(sp),d0
   1459e:	|                              move.l 82(sp),d1
   145a2:	|                              jsr -684(a6)
   145a6:	|                              move.l d0,78(sp)
   145aa:	|                              move.l 78(sp),d0
   145ae:	|                              movea.l 18902 <currentFloor>,a0
   145b4:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   145b8:	|                              movea.l 18902 <currentFloor>,a0
   145be:	|                              move.l 8(a0),d0
   145c2:	|                              add.l d0,d0
   145c4:	|                              add.l d0,d0
   145c6:	|                              move.l d0,74(sp)
   145ca:	|                              clr.l 70(sp)
   145ce:	|                              move.l 187a2 <SysBase>,d0
   145d4:	|                              movea.l d0,a6
   145d6:	|                              move.l 74(sp),d0
   145da:	|                              move.l 70(sp),d1
   145de:	|                              jsr -684(a6)
   145e2:	|                              move.l d0,66(sp)
   145e6:	|                              move.l 66(sp),d0
   145ea:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   145ee:	|                              movea.l 18902 <currentFloor>,a0
   145f4:	|                              move.l 16(a0),d0
   145f8:	|                          /-- bne.s 1460e <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   145fa:	|                          |   pea 1775e <PutChar+0x2168>
   14600:	|                          |   jsr 14b22 <KPrintF>
   14606:	|                          |   addq.l #4,sp
		return FALSE;
   14608:	|                          |   clr.w d0
   1460a:	+--------------------------|-- bra.w 14a3c <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1460e:	|                          \-> clr.l 136(sp)
   14612:	|                    /-------- bra.w 14736 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   14616:	|                 /--|-------> movea.l 18902 <currentFloor>,a0
   1461c:	|                 |  |         move.l 8(a0),d0
   14620:	|                 |  |         add.l d0,d0
   14622:	|                 |  |         add.l d0,d0
   14624:	|                 |  |         move.l d0,50(sp)
   14628:	|                 |  |         clr.l 46(sp)
   1462c:	|                 |  |         move.l 187a2 <SysBase>,d0
   14632:	|                 |  |         movea.l d0,a6
   14634:	|                 |  |         move.l 50(sp),d0
   14638:	|                 |  |         move.l 46(sp),d1
   1463c:	|                 |  |         jsr -684(a6)
   14640:	|                 |  |         move.l d0,42(sp)
   14644:	|                 |  |         move.l 42(sp),d0
   14648:	|                 |  |         movea.l 18902 <currentFloor>,a0
   1464e:	|                 |  |         movea.l 16(a0),a0
   14652:	|                 |  |         move.l 136(sp),d1
   14656:	|                 |  |         add.l d1,d1
   14658:	|                 |  |         add.l d1,d1
   1465a:	|                 |  |         adda.l d1,a0
   1465c:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1465e:	|                 |  |         movea.l 18902 <currentFloor>,a0
   14664:	|                 |  |         move.l 8(a0),d0
   14668:	|                 |  |         add.l d0,d0
   1466a:	|                 |  |         add.l d0,d0
   1466c:	|                 |  |         move.l d0,38(sp)
   14670:	|                 |  |         clr.l 34(sp)
   14674:	|                 |  |         move.l 187a2 <SysBase>,d0
   1467a:	|                 |  |         movea.l d0,a6
   1467c:	|                 |  |         move.l 38(sp),d0
   14680:	|                 |  |         move.l 34(sp),d1
   14684:	|                 |  |         jsr -684(a6)
   14688:	|                 |  |         move.l d0,30(sp)
   1468c:	|                 |  |         move.l 30(sp),d1
   14690:	|                 |  |         move.l 136(sp),d0
   14694:	|                 |  |         add.l d0,d0
   14696:	|                 |  |         add.l d0,d0
   14698:	|                 |  |         movea.l 62(sp),a0
   1469c:	|                 |  |         adda.l d0,a0
   1469e:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   146a0:	|                 |  |         movea.l 18902 <currentFloor>,a0
   146a6:	|                 |  |         move.l 16(a0),d1
   146aa:	|                 |  |         move.l 136(sp),d0
   146ae:	|                 |  |         add.l d0,d0
   146b0:	|                 |  |         add.l d0,d0
   146b2:	|                 |  |         movea.l d1,a0
   146b4:	|                 |  |         adda.l d0,a0
   146b6:	|                 |  |         move.l (a0),d0
   146b8:	|                 |  |     /-- bne.s 146ce <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   146ba:	|                 |  |     |   pea 1775e <PutChar+0x2168>
   146c0:	|                 |  |     |   jsr 14b22 <KPrintF>
   146c6:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   146c8:	|                 |  |     |   clr.w d0
   146ca:	+-----------------|--|-----|-- bra.w 14a3c <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   146ce:	|                 |  |     \-> clr.l 132(sp)
   146d2:	|                 |  |     /-- bra.s 14722 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   146d4:	|                 |  |  /--|-> movea.l 18902 <currentFloor>,a0
   146da:	|                 |  |  |  |   move.l 16(a0),d1
   146de:	|                 |  |  |  |   move.l 136(sp),d0
   146e2:	|                 |  |  |  |   add.l d0,d0
   146e4:	|                 |  |  |  |   add.l d0,d0
   146e6:	|                 |  |  |  |   movea.l d1,a0
   146e8:	|                 |  |  |  |   adda.l d0,a0
   146ea:	|                 |  |  |  |   move.l (a0),d1
   146ec:	|                 |  |  |  |   move.l 132(sp),d0
   146f0:	|                 |  |  |  |   add.l d0,d0
   146f2:	|                 |  |  |  |   add.l d0,d0
   146f4:	|                 |  |  |  |   movea.l d1,a0
   146f6:	|                 |  |  |  |   adda.l d0,a0
   146f8:	|                 |  |  |  |   moveq #-1,d1
   146fa:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   146fc:	|                 |  |  |  |   move.l 136(sp),d0
   14700:	|                 |  |  |  |   add.l d0,d0
   14702:	|                 |  |  |  |   add.l d0,d0
   14704:	|                 |  |  |  |   movea.l 62(sp),a0
   14708:	|                 |  |  |  |   adda.l d0,a0
   1470a:	|                 |  |  |  |   move.l (a0),d1
   1470c:	|                 |  |  |  |   move.l 132(sp),d0
   14710:	|                 |  |  |  |   add.l d0,d0
   14712:	|                 |  |  |  |   add.l d0,d0
   14714:	|                 |  |  |  |   movea.l d1,a0
   14716:	|                 |  |  |  |   adda.l d0,a0
   14718:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1471e:	|                 |  |  |  |   addq.l #1,132(sp)
   14722:	|                 |  |  |  \-> movea.l 18902 <currentFloor>,a0
   14728:	|                 |  |  |      move.l 8(a0),d0
   1472c:	|                 |  |  |      cmp.l 132(sp),d0
   14730:	|                 |  |  \----- bgt.s 146d4 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   14732:	|                 |  |         addq.l #1,136(sp)
   14736:	|                 |  \-------> movea.l 18902 <currentFloor>,a0
   1473c:	|                 |            move.l 8(a0),d0
   14740:	|                 |            cmp.l 136(sp),d0
   14744:	|                 \----------- bgt.w 14616 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   14748:	|                              clr.l 136(sp)
   1474c:	|              /-------------- bra.w 14852 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   14750:	|           /--|-------------> clr.l 132(sp)
   14754:	|           |  |     /-------- bra.w 1483c <setFloor+0x570>
			if (i != j) {
   14758:	|           |  |  /--|-------> move.l 136(sp),d0
   1475c:	|           |  |  |  |         cmp.l 132(sp),d0
   14760:	|           |  |  |  |     /-- beq.w 147f2 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   14764:	|           |  |  |  |     |   movea.l 18902 <currentFloor>,a0
   1476a:	|           |  |  |  |     |   move.l 12(a0),d1
   1476e:	|           |  |  |  |     |   move.l 132(sp),d0
   14772:	|           |  |  |  |     |   lsl.l #3,d0
   14774:	|           |  |  |  |     |   movea.l d1,a1
   14776:	|           |  |  |  |     |   adda.l d0,a1
   14778:	|           |  |  |  |     |   movea.l 18902 <currentFloor>,a0
   1477e:	|           |  |  |  |     |   move.l 12(a0),d1
   14782:	|           |  |  |  |     |   move.l 136(sp),d0
   14786:	|           |  |  |  |     |   lsl.l #3,d0
   14788:	|           |  |  |  |     |   movea.l d1,a0
   1478a:	|           |  |  |  |     |   adda.l d0,a0
   1478c:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   14790:	|           |  |  |  |     |   move.l (a1),-(sp)
   14792:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   14796:	|           |  |  |  |     |   move.l (a0),-(sp)
   14798:	|           |  |  |  |     |   jsr 14024 <polysShareSide>
   1479e:	|           |  |  |  |     |   lea 16(sp),sp
   147a2:	|           |  |  |  |     |   tst.w d0
   147a4:	|           |  |  |  |  /--|-- beq.w 14838 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   147a8:	|           |  |  |  |  |  |   movea.l 18902 <currentFloor>,a0
   147ae:	|           |  |  |  |  |  |   move.l 16(a0),d1
   147b2:	|           |  |  |  |  |  |   move.l 136(sp),d0
   147b6:	|           |  |  |  |  |  |   add.l d0,d0
   147b8:	|           |  |  |  |  |  |   add.l d0,d0
   147ba:	|           |  |  |  |  |  |   movea.l d1,a0
   147bc:	|           |  |  |  |  |  |   adda.l d0,a0
   147be:	|           |  |  |  |  |  |   move.l (a0),d1
   147c0:	|           |  |  |  |  |  |   move.l 132(sp),d0
   147c4:	|           |  |  |  |  |  |   add.l d0,d0
   147c6:	|           |  |  |  |  |  |   add.l d0,d0
   147c8:	|           |  |  |  |  |  |   movea.l d1,a0
   147ca:	|           |  |  |  |  |  |   adda.l d0,a0
   147cc:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   147d0:	|           |  |  |  |  |  |   move.l 136(sp),d0
   147d4:	|           |  |  |  |  |  |   add.l d0,d0
   147d6:	|           |  |  |  |  |  |   add.l d0,d0
   147d8:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   147dc:	|           |  |  |  |  |  |   adda.l d0,a0
   147de:	|           |  |  |  |  |  |   move.l (a0),d1
   147e0:	|           |  |  |  |  |  |   move.l 132(sp),d0
   147e4:	|           |  |  |  |  |  |   add.l d0,d0
   147e6:	|           |  |  |  |  |  |   add.l d0,d0
   147e8:	|           |  |  |  |  |  |   movea.l d1,a0
   147ea:	|           |  |  |  |  |  |   adda.l d0,a0
   147ec:	|           |  |  |  |  |  |   moveq #1,d1
   147ee:	|           |  |  |  |  |  |   move.l d1,(a0)
   147f0:	|           |  |  |  |  +--|-- bra.s 14838 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   147f2:	|           |  |  |  |  |  \-> movea.l 18902 <currentFloor>,a0
   147f8:	|           |  |  |  |  |      move.l 16(a0),d1
   147fc:	|           |  |  |  |  |      move.l 136(sp),d0
   14800:	|           |  |  |  |  |      add.l d0,d0
   14802:	|           |  |  |  |  |      add.l d0,d0
   14804:	|           |  |  |  |  |      movea.l d1,a0
   14806:	|           |  |  |  |  |      adda.l d0,a0
   14808:	|           |  |  |  |  |      move.l (a0),d1
   1480a:	|           |  |  |  |  |      move.l 132(sp),d0
   1480e:	|           |  |  |  |  |      add.l d0,d0
   14810:	|           |  |  |  |  |      add.l d0,d0
   14812:	|           |  |  |  |  |      movea.l d1,a0
   14814:	|           |  |  |  |  |      adda.l d0,a0
   14816:	|           |  |  |  |  |      moveq #-2,d0
   14818:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   1481a:	|           |  |  |  |  |      move.l 136(sp),d0
   1481e:	|           |  |  |  |  |      add.l d0,d0
   14820:	|           |  |  |  |  |      add.l d0,d0
   14822:	|           |  |  |  |  |      movea.l 62(sp),a0
   14826:	|           |  |  |  |  |      adda.l d0,a0
   14828:	|           |  |  |  |  |      move.l (a0),d1
   1482a:	|           |  |  |  |  |      move.l 132(sp),d0
   1482e:	|           |  |  |  |  |      add.l d0,d0
   14830:	|           |  |  |  |  |      add.l d0,d0
   14832:	|           |  |  |  |  |      movea.l d1,a0
   14834:	|           |  |  |  |  |      adda.l d0,a0
   14836:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   14838:	|           |  |  |  |  \----> addq.l #1,132(sp)
   1483c:	|           |  |  |  \-------> movea.l 18902 <currentFloor>,a0
   14842:	|           |  |  |            move.l 8(a0),d0
   14846:	|           |  |  |            cmp.l 132(sp),d0
   1484a:	|           |  |  \----------- bgt.w 14758 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1484e:	|           |  |               addq.l #1,136(sp)
   14852:	|           |  \-------------> movea.l 18902 <currentFloor>,a0
   14858:	|           |                  move.l 8(a0),d0
   1485c:	|           |                  cmp.l 136(sp),d0
   14860:	|           \----------------- bgt.w 14750 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   14864:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   14868:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   1486c:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   14870:	|  |                           clr.l 136(sp)
   14874:	|  |     /-------------------- bra.w 149ca <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   14878:	|  |  /--|-------------------> clr.l 132(sp)
   1487c:	|  |  |  |     /-------------- bra.w 149b4 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   14880:	|  |  |  |  /--|-------------> movea.l 18902 <currentFloor>,a0
   14886:	|  |  |  |  |  |               move.l 16(a0),d1
   1488a:	|  |  |  |  |  |               move.l 136(sp),d0
   1488e:	|  |  |  |  |  |               add.l d0,d0
   14890:	|  |  |  |  |  |               add.l d0,d0
   14892:	|  |  |  |  |  |               movea.l d1,a0
   14894:	|  |  |  |  |  |               adda.l d0,a0
   14896:	|  |  |  |  |  |               move.l (a0),d1
   14898:	|  |  |  |  |  |               move.l 132(sp),d0
   1489c:	|  |  |  |  |  |               add.l d0,d0
   1489e:	|  |  |  |  |  |               add.l d0,d0
   148a0:	|  |  |  |  |  |               movea.l d1,a0
   148a2:	|  |  |  |  |  |               adda.l d0,a0
   148a4:	|  |  |  |  |  |               move.l (a0),d0
   148a6:	|  |  |  |  |  |               moveq #-1,d1
   148a8:	|  |  |  |  |  |               cmp.l d0,d1
   148aa:	|  |  |  |  |  |  /----------- bne.w 149b0 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   148ae:	|  |  |  |  |  |  |            clr.l 122(sp)
   148b2:	|  |  |  |  |  |  |     /----- bra.w 1499e <setFloor+0x6d2>
						if (d != i && d != j) {
   148b6:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   148ba:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   148be:	|  |  |  |  |  |  |  |  |  /-- beq.w 1499a <setFloor+0x6ce>
   148c2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   148c6:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   148ca:	|  |  |  |  |  |  |  |  |  +-- beq.w 1499a <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   148ce:	|  |  |  |  |  |  |  |  |  |   movea.l 18902 <currentFloor>,a0
   148d4:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   148d8:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   148dc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   148de:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   148e0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   148e2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   148e4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   148e6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   148ea:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   148ec:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   148ee:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   148f0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   148f2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   148f4:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   148f8:	|  |  |  |  |  |  |  |  |  +-- bne.w 1499a <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   148fc:	|  |  |  |  |  |  |  |  |  |   movea.l 18902 <currentFloor>,a0
   14902:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   14906:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1490a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1490c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1490e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   14910:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   14912:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   14914:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   14918:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1491a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1491c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1491e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   14920:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   14922:	|  |  |  |  |  |  |  |  |  +-- bmi.s 1499a <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   14924:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   14928:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1492a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1492c:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   14930:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   14932:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   14934:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   14938:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1493a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1493c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1493e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   14940:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   14942:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   14946:	|  |  |  |  |  |  |  |  |  +-- bgt.s 1499a <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   14948:	|  |  |  |  |  |  |  |  |  |   movea.l 18902 <currentFloor>,a0
   1494e:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   14952:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   14956:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14958:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1495a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1495c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1495e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   14960:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   14964:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14966:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14968:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1496a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1496c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   14970:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   14974:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14976:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14978:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1497c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1497e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   14980:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   14984:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14986:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   14988:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1498a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1498c:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   14990:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   14992:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   14994:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1499a:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   1499e:	|  |  |  |  |  |  |  |  \----> movea.l 18902 <currentFloor>,a0
   149a4:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   149a8:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   149ac:	|  |  |  |  |  |  |  \-------- bgt.w 148b6 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   149b0:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   149b4:	|  |  |  |  |  \-------------> movea.l 18902 <currentFloor>,a0
   149ba:	|  |  |  |  |                  move.l 8(a0),d0
   149be:	|  |  |  |  |                  cmp.l 132(sp),d0
   149c2:	|  |  |  |  \----------------- bgt.w 14880 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   149c6:	|  |  |  |                     addq.l #1,136(sp)
   149ca:	|  |  |  \-------------------> movea.l 18902 <currentFloor>,a0
   149d0:	|  |  |                        move.l 8(a0),d0
   149d4:	|  |  |                        cmp.l 136(sp),d0
   149d8:	|  |  \----------------------- bgt.w 14878 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   149dc:	|  |                           tst.w 130(sp)
   149e0:	|  \-------------------------- bne.w 14868 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   149e4:	|                              clr.l 136(sp)
   149e8:	|                          /-- bra.s 14a10 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   149ea:	|                       /--|-> move.l 136(sp),d0
   149ee:	|                       |  |   add.l d0,d0
   149f0:	|                       |  |   add.l d0,d0
   149f2:	|                       |  |   movea.l 62(sp),a0
   149f6:	|                       |  |   adda.l d0,a0
   149f8:	|                       |  |   move.l (a0),54(sp)
   149fc:	|                       |  |   move.l 187a2 <SysBase>,d0
   14a02:	|                       |  |   movea.l d0,a6
   14a04:	|                       |  |   movea.l 54(sp),a1
   14a08:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   14a0c:	|                       |  |   addq.l #1,136(sp)
   14a10:	|                       |  \-> movea.l 18902 <currentFloor>,a0
   14a16:	|                       |      move.l 8(a0),d0
   14a1a:	|                       |      cmp.l 136(sp),d0
   14a1e:	|                       \----- bgt.s 149ea <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   14a20:	|                              move.l 62(sp),58(sp)
   14a26:	|                              move.l 187a2 <SysBase>,d0
   14a2c:	|                              movea.l d0,a6
   14a2e:	|                              movea.l 58(sp),a1
   14a32:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   14a36:	|                              clr.l 62(sp)

	return TRUE;
   14a3a:	|                              moveq #1,d0
}
   14a3c:	\----------------------------> movea.l (sp)+,a2
   14a3e:	                               movea.l (sp)+,a6
   14a40:	                               lea 132(sp),sp
   14a44:	                               rts

00014a46 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   14a46:	jsr 13f34 <killFloor>
	noFloor ();
   14a4c:	jsr 13e58 <noFloor>
   14a52:	nop
   14a54:	rts

00014a56 <WaitVbl>:
void WaitVbl() {
   14a56:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   14a58:	   /-> movea.l #14675972,a0
   14a5e:	   |   move.l (a0),d0
   14a60:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   14a62:	   |   move.l (sp),d0
   14a64:	   |   andi.l #130816,d0
   14a6a:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   14a6c:	   |   move.l (sp),d0
   14a6e:	   |   cmpi.l #76800,d0
   14a74:	   \-- beq.s 14a58 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   14a76:	/----> movea.l #14675972,a0
   14a7c:	|      move.l (a0),d0
   14a7e:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   14a82:	|      move.l 4(sp),d0
   14a86:	|      andi.l #130816,d0
   14a8c:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   14a90:	|      move.l 4(sp),d0
   14a94:	|      cmpi.l #76800,d0
   14a9a:	|  /-- beq.s 14a9e <WaitVbl+0x48>
	while (1) {
   14a9c:	\--|-- bra.s 14a76 <WaitVbl+0x20>
			break;
   14a9e:	   \-> nop
}
   14aa0:	       nop
   14aa2:	       addq.l #8,sp
   14aa4:	       rts

00014aa6 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   14aa6:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   14aa8:	       move.l 8(sp),(sp)
	while(len-- > 0)
   14aac:	   /-- bra.s 14abe <memset+0x18>
		*ptr++ = val;
   14aae:	/--|-> move.l (sp),d0
   14ab0:	|  |   move.l d0,d1
   14ab2:	|  |   addq.l #1,d1
   14ab4:	|  |   move.l d1,(sp)
   14ab6:	|  |   move.l 12(sp),d1
   14aba:	|  |   movea.l d0,a0
   14abc:	|  |   move.b d1,(a0)
	while(len-- > 0)
   14abe:	|  \-> move.l 16(sp),d0
   14ac2:	|      move.l d0,d1
   14ac4:	|      subq.l #1,d1
   14ac6:	|      move.l d1,16(sp)
   14aca:	|      tst.l d0
   14acc:	\----- bne.s 14aae <memset+0x8>
	return dest;
   14ace:	       move.l 8(sp),d0
}
   14ad2:	       addq.l #4,sp
   14ad4:	       rts

00014ad6 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   14ad6:	       subq.l #8,sp
   14ad8:	       move.l d2,-(sp)
	char *d = (char *)dest;
   14ada:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   14ae0:	       move.l 20(sp),4(sp)
	while(len--)
   14ae6:	   /-- bra.s 14b08 <memcpy+0x32>
		*d++ = *s++;
   14ae8:	/--|-> move.l 4(sp),d1
   14aec:	|  |   move.l d1,d0
   14aee:	|  |   addq.l #1,d0
   14af0:	|  |   move.l d0,4(sp)
   14af4:	|  |   move.l 8(sp),d0
   14af8:	|  |   move.l d0,d2
   14afa:	|  |   addq.l #1,d2
   14afc:	|  |   move.l d2,8(sp)
   14b00:	|  |   movea.l d1,a0
   14b02:	|  |   move.b (a0),d1
   14b04:	|  |   movea.l d0,a0
   14b06:	|  |   move.b d1,(a0)
	while(len--)
   14b08:	|  \-> move.l 24(sp),d0
   14b0c:	|      move.l d0,d1
   14b0e:	|      subq.l #1,d1
   14b10:	|      move.l d1,24(sp)
   14b14:	|      tst.l d0
   14b16:	\----- bne.s 14ae8 <memcpy+0x12>
	return dest;
   14b18:	       move.l 16(sp),d0
}
   14b1c:	       move.l (sp)+,d2
   14b1e:	       addq.l #8,sp
   14b20:	       rts

00014b22 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   14b22:	       lea -128(sp),sp
   14b26:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   14b2a:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xecb645>,d0
   14b30:	       cmpi.w #20153,d0
   14b34:	   /-- beq.s 14b58 <KPrintF+0x36>
   14b36:	   |   cmpi.w #-24562,d0
   14b3a:	   +-- beq.s 14b58 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   14b3c:	   |   movea.l 187a2 <SysBase>,a6
   14b42:	   |   movea.l 144(sp),a0
   14b46:	   |   lea 148(sp),a1
   14b4a:	   |   lea 155e8 <KPutCharX>,a2
   14b50:	   |   suba.l a3,a3
   14b52:	   |   jsr -522(a6)
}
   14b56:	/--|-- bra.s 14b82 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   14b58:	|  \-> movea.l 187a2 <SysBase>,a6
   14b5e:	|      movea.l 144(sp),a0
   14b62:	|      lea 148(sp),a1
   14b66:	|      lea 155f6 <PutChar>,a2
   14b6c:	|      lea 12(sp),a3
   14b70:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   14b74:	|      move.l a3,-(sp)
   14b76:	|      pea 56 <_start+0x56>
   14b7a:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xecb645>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   14b80:	|      addq.l #8,sp
}
   14b82:	\----> movem.l (sp)+,a2-a3/a6
   14b86:	       lea 128(sp),sp
   14b8a:	       rts

00014b8c <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   14b8c:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   14b8e:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   14b94:	       movea.l (sp),a0
   14b96:	       move.w (a0),d0
   14b98:	       cmpi.w #20153,d0
   14b9c:	   /-- beq.s 14ba8 <debug_cmd+0x1c>
   14b9e:	   |   movea.l (sp),a0
   14ba0:	   |   move.w (a0),d0
   14ba2:	   |   cmpi.w #-24562,d0
   14ba6:	/--|-- bne.s 14bc6 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   14ba8:	|  \-> move.l 20(sp),-(sp)
   14bac:	|      move.l 20(sp),-(sp)
   14bb0:	|      move.l 20(sp),-(sp)
   14bb4:	|      move.l 20(sp),-(sp)
   14bb8:	|      pea 58 <_start+0x58>
   14bbc:	|      movea.l 20(sp),a0
   14bc0:	|      jsr (a0)
   14bc2:	|      lea 20(sp),sp
	}
}
   14bc6:	\----> nop
   14bc8:	       addq.l #4,sp
   14bca:	       rts

00014bcc <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   14bcc:	       move.l d2,-(sp)
	while(*source && --num > 0)
   14bce:	   /-- bra.s 14bf0 <my_strncpy+0x24>
		*destination++ = *source++;
   14bd0:	/--|-> move.l 12(sp),d1
   14bd4:	|  |   move.l d1,d0
   14bd6:	|  |   addq.l #1,d0
   14bd8:	|  |   move.l d0,12(sp)
   14bdc:	|  |   move.l 8(sp),d0
   14be0:	|  |   move.l d0,d2
   14be2:	|  |   addq.l #1,d2
   14be4:	|  |   move.l d2,8(sp)
   14be8:	|  |   movea.l d1,a0
   14bea:	|  |   move.b (a0),d1
   14bec:	|  |   movea.l d0,a0
   14bee:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   14bf0:	|  \-> movea.l 12(sp),a0
   14bf4:	|      move.b (a0),d0
   14bf6:	|  /-- beq.s 14bfe <my_strncpy+0x32>
   14bf8:	|  |   subq.l #1,16(sp)
   14bfc:	\--|-- bne.s 14bd0 <my_strncpy+0x4>
	*destination = '\0';
   14bfe:	   \-> movea.l 8(sp),a0
   14c02:	       clr.b (a0)
}
   14c04:	       nop
   14c06:	       move.l (sp)+,d2
   14c08:	       rts

00014c0a <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   14c0a:	    lea -60(sp),sp
   14c0e:	    movea.l 72(sp),a1
   14c12:	    movea.l 76(sp),a0
   14c16:	    move.l 80(sp),d1
   14c1a:	    move.l 84(sp),d0
   14c1e:	    movea.w a1,a1
   14c20:	    move.w a1,8(sp)
   14c24:	    movea.w a0,a0
   14c26:	    move.w a0,6(sp)
   14c2a:	    move.w d1,d1
   14c2c:	    move.w d1,4(sp)
   14c30:	    move.w d0,d0
   14c32:	    move.w d0,2(sp)
	struct debug_resource resource = {
   14c36:	    lea 10(sp),a0
   14c3a:	    clr.l (a0)
   14c3c:	    addq.l #4,a0
   14c3e:	    clr.l (a0)
   14c40:	    addq.l #4,a0
   14c42:	    clr.l (a0)
   14c44:	    addq.l #4,a0
   14c46:	    clr.l (a0)
   14c48:	    addq.l #4,a0
   14c4a:	    clr.l (a0)
   14c4c:	    addq.l #4,a0
   14c4e:	    clr.l (a0)
   14c50:	    addq.l #4,a0
   14c52:	    clr.l (a0)
   14c54:	    addq.l #4,a0
   14c56:	    clr.l (a0)
   14c58:	    addq.l #4,a0
   14c5a:	    clr.l (a0)
   14c5c:	    addq.l #4,a0
   14c5e:	    clr.l (a0)
   14c60:	    addq.l #4,a0
   14c62:	    clr.l (a0)
   14c64:	    addq.l #4,a0
   14c66:	    clr.l (a0)
   14c68:	    addq.l #4,a0
   14c6a:	    clr.w (a0)
   14c6c:	    addq.l #2,a0
		.address = (unsigned int)addr,
   14c6e:	    move.l 64(sp),d0
	struct debug_resource resource = {
   14c72:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   14c76:	    move.w 8(sp),d0
   14c7a:	/-- bpl.s 14c7e <debug_register_bitmap+0x74>
   14c7c:	|   addq.w #7,d0
   14c7e:	\-> asr.w #3,d0
   14c80:	    movea.w d0,a0
   14c82:	    movea.w 6(sp),a1
   14c86:	    move.l a1,-(sp)
   14c88:	    move.l a0,-(sp)
   14c8a:	    jsr 154e0 <__mulsi3>
   14c90:	    addq.l #8,sp
   14c92:	    movea.w 4(sp),a0
   14c96:	    move.l a0,-(sp)
   14c98:	    move.l d0,-(sp)
   14c9a:	    jsr 154e0 <__mulsi3>
   14ca0:	    addq.l #8,sp
	struct debug_resource resource = {
   14ca2:	    move.l d0,14(sp)
   14ca6:	    move.w 2(sp),52(sp)
   14cac:	    move.w 8(sp),54(sp)
   14cb2:	    move.w 6(sp),56(sp)
   14cb8:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   14cbe:	    moveq #0,d0
   14cc0:	    move.w 2(sp),d0
   14cc4:	    moveq #2,d1
   14cc6:	    and.l d1,d0
   14cc8:	/-- beq.s 14cd4 <debug_register_bitmap+0xca>
		resource.size *= 2;
   14cca:	|   move.l 14(sp),d0
   14cce:	|   add.l d0,d0
   14cd0:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   14cd4:	\-> pea 20 <_start+0x20>
   14cd8:	    move.l 72(sp),-(sp)
   14cdc:	    lea 18(sp),a0
   14ce0:	    move.l a0,d0
   14ce2:	    addq.l #8,d0
   14ce4:	    move.l d0,-(sp)
   14ce6:	    jsr 14bcc <my_strncpy>
   14cec:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   14cf0:	    lea 10(sp),a0
   14cf4:	    clr.l -(sp)
   14cf6:	    clr.l -(sp)
   14cf8:	    move.l a0,-(sp)
   14cfa:	    pea 4 <_start+0x4>
   14cfe:	    jsr 14b8c <debug_cmd>
   14d04:	    lea 16(sp),sp
}
   14d08:	    nop
   14d0a:	    lea 60(sp),sp
   14d0e:	    rts

00014d10 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   14d10:	lea -12(sp),sp
   14d14:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   14d16:	move.l 20(sp),12(sp)
   14d1c:	move.l 24(sp),8(sp)
   14d22:	move.l 187b2 <MathIeeeSingBasBase>,d0
   14d28:	movea.l d0,a6
   14d2a:	move.l 12(sp),d0
   14d2e:	move.l 8(sp),d1
   14d32:	jsr -66(a6)
   14d36:	move.l d0,4(sp)
   14d3a:	move.l 4(sp),d0
}
   14d3e:	movea.l (sp)+,a6
   14d40:	lea 12(sp),sp
   14d44:	rts

00014d46 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   14d46:	lea -32(sp),sp
   14d4a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   14d4e:	move.l 48(sp),36(sp)
   14d54:	move.l 52(sp),40(sp)
   14d5a:	move.l 56(sp),28(sp)
   14d60:	move.l 60(sp),32(sp)
   14d66:	move.l 187ba <MathIeeeDoubBasBase>,d0
   14d6c:	movea.l d0,a6
   14d6e:	move.l 36(sp),d0
   14d72:	move.l 40(sp),d1
   14d76:	move.l 28(sp),d2
   14d7a:	move.l 32(sp),d3
   14d7e:	jsr -66(a6)
   14d82:	move.l d0,12(sp)
   14d86:	move.l d1,16(sp)
   14d8a:	move.l 12(sp),20(sp)
   14d90:	move.l 16(sp),24(sp)
   14d96:	move.l 20(sp),d0
   14d9a:	move.l 24(sp),d1
}
   14d9e:	movem.l (sp)+,d2-d3/a6
   14da2:	lea 32(sp),sp
   14da6:	rts

00014da8 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   14da8:	lea -32(sp),sp
   14dac:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   14db0:	move.l 48(sp),36(sp)
   14db6:	move.l 52(sp),40(sp)
   14dbc:	move.l 56(sp),28(sp)
   14dc2:	move.l 60(sp),32(sp)
   14dc8:	move.l 187ba <MathIeeeDoubBasBase>,d0
   14dce:	movea.l d0,a6
   14dd0:	move.l 36(sp),d0
   14dd4:	move.l 40(sp),d1
   14dd8:	move.l 28(sp),d2
   14ddc:	move.l 32(sp),d3
   14de0:	jsr -84(a6)
   14de4:	move.l d0,12(sp)
   14de8:	move.l d1,16(sp)
   14dec:	move.l 12(sp),20(sp)
   14df2:	move.l 16(sp),24(sp)
   14df8:	move.l 20(sp),d0
   14dfc:	move.l 24(sp),d1
}
   14e00:	movem.l (sp)+,d2-d3/a6
   14e04:	lea 32(sp),sp
   14e08:	rts

00014e0a <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   14e0a:	lea -12(sp),sp
   14e0e:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   14e10:	move.l 20(sp),12(sp)
   14e16:	move.l 24(sp),8(sp)
   14e1c:	move.l 187b2 <MathIeeeSingBasBase>,d0
   14e22:	movea.l d0,a6
   14e24:	move.l 12(sp),d0
   14e28:	move.l 8(sp),d1
   14e2c:	jsr -84(a6)
   14e30:	move.l d0,4(sp)
   14e34:	move.l 4(sp),d0
}
   14e38:	movea.l (sp)+,a6
   14e3a:	lea 12(sp),sp
   14e3e:	rts

00014e40 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   14e40:	lea -12(sp),sp
   14e44:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   14e46:	move.l 20(sp),12(sp)
   14e4c:	move.l 24(sp),8(sp)
   14e52:	move.l 187b2 <MathIeeeSingBasBase>,d0
   14e58:	movea.l d0,a6
   14e5a:	move.l 12(sp),d0
   14e5e:	move.l 8(sp),d1
   14e62:	jsr -42(a6)
   14e66:	move.l d0,4(sp)
   14e6a:	move.l 4(sp),d0
}
   14e6e:	movea.l (sp)+,a6
   14e70:	lea 12(sp),sp
   14e74:	rts

00014e76 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   14e76:	lea -20(sp),sp
   14e7a:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   14e7c:	move.l 28(sp),20(sp)
   14e82:	move.l 187be <MathIeeeDoubTransBase>,d0
   14e88:	movea.l d0,a6
   14e8a:	move.l 20(sp),d0
   14e8e:	jsr -108(a6)
   14e92:	move.l d0,4(sp)
   14e96:	move.l d1,8(sp)
   14e9a:	move.l 4(sp),12(sp)
   14ea0:	move.l 8(sp),16(sp)
   14ea6:	move.l 12(sp),d0
   14eaa:	move.l 16(sp),d1
}
   14eae:	movea.l (sp)+,a6
   14eb0:	lea 20(sp),sp
   14eb4:	rts

00014eb6 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   14eb6:	lea -12(sp),sp
   14eba:	move.l a6,-(sp)
	return IEEEDPFix(value);
   14ebc:	move.l 20(sp),8(sp)
   14ec2:	move.l 24(sp),12(sp)
   14ec8:	move.l 187ba <MathIeeeDoubBasBase>,d0
   14ece:	movea.l d0,a6
   14ed0:	move.l 8(sp),d0
   14ed4:	move.l 12(sp),d1
   14ed8:	jsr -30(a6)
   14edc:	move.l d0,4(sp)
   14ee0:	move.l 4(sp),d0
   14ee4:	move.l d0,-(sp)
   14ee6:	jsr 14f1e <__floatsidf>
   14eec:	addq.l #4,sp
}
   14eee:	movea.l (sp)+,a6
   14ef0:	lea 12(sp),sp
   14ef4:	rts

00014ef6 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   14ef6:	subq.l #8,sp
   14ef8:	move.l a6,-(sp)
	return IEEESPFix(value);
   14efa:	move.l 16(sp),8(sp)
   14f00:	move.l 187b2 <MathIeeeSingBasBase>,d0
   14f06:	movea.l d0,a6
   14f08:	move.l 8(sp),d0
   14f0c:	jsr -30(a6)
   14f10:	move.l d0,4(sp)
   14f14:	move.l 4(sp),d0
}
   14f18:	movea.l (sp)+,a6
   14f1a:	addq.l #8,sp
   14f1c:	rts

00014f1e <__floatsidf>:


DOUBLE __floatsidf (int i) {
   14f1e:	lea -20(sp),sp
   14f22:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   14f24:	move.l 28(sp),20(sp)
   14f2a:	move.l 187ba <MathIeeeDoubBasBase>,d0
   14f30:	movea.l d0,a6
   14f32:	move.l 20(sp),d0
   14f36:	jsr -36(a6)
   14f3a:	move.l d0,4(sp)
   14f3e:	move.l d1,8(sp)
   14f42:	move.l 4(sp),12(sp)
   14f48:	move.l 8(sp),16(sp)
   14f4e:	move.l 12(sp),d0
   14f52:	move.l 16(sp),d1
}
   14f56:	movea.l (sp)+,a6
   14f58:	lea 20(sp),sp
   14f5c:	rts

00014f5e <__floatsisf>:

FLOAT __floatsisf(int i) {
   14f5e:	subq.l #8,sp
   14f60:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   14f62:	move.l 16(sp),8(sp)
   14f68:	move.l 187b2 <MathIeeeSingBasBase>,d0
   14f6e:	movea.l d0,a6
   14f70:	move.l 8(sp),d0
   14f74:	jsr -36(a6)
   14f78:	move.l d0,4(sp)
   14f7c:	move.l 4(sp),d0
}
   14f80:	movea.l (sp)+,a6
   14f82:	addq.l #8,sp
   14f84:	rts

00014f86 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   14f86:	subq.l #8,sp
   14f88:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   14f8a:	move.l 16(sp),8(sp)
   14f90:	move.l 187b2 <MathIeeeSingBasBase>,d0
   14f96:	movea.l d0,a6
   14f98:	move.l 8(sp),d0
   14f9c:	jsr -36(a6)
   14fa0:	move.l d0,4(sp)
   14fa4:	move.l 4(sp),d0
}
   14fa8:	movea.l (sp)+,a6
   14faa:	addq.l #8,sp
   14fac:	rts

00014fae <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   14fae:	lea -32(sp),sp
   14fb2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   14fb6:	move.l 48(sp),36(sp)
   14fbc:	move.l 52(sp),40(sp)
   14fc2:	move.l 56(sp),28(sp)
   14fc8:	move.l 60(sp),32(sp)
   14fce:	move.l 187ba <MathIeeeDoubBasBase>,d0
   14fd4:	movea.l d0,a6
   14fd6:	move.l 36(sp),d0
   14fda:	move.l 40(sp),d1
   14fde:	move.l 28(sp),d2
   14fe2:	move.l 32(sp),d3
   14fe6:	jsr -78(a6)
   14fea:	move.l d0,12(sp)
   14fee:	move.l d1,16(sp)
   14ff2:	move.l 12(sp),20(sp)
   14ff8:	move.l 16(sp),24(sp)
   14ffe:	move.l 20(sp),d0
   15002:	move.l 24(sp),d1
}
   15006:	movem.l (sp)+,d2-d3/a6
   1500a:	lea 32(sp),sp
   1500e:	rts

00015010 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   15010:	lea -12(sp),sp
   15014:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   15016:	move.l 20(sp),12(sp)
   1501c:	move.l 24(sp),8(sp)
   15022:	move.l 187b2 <MathIeeeSingBasBase>,d0
   15028:	movea.l d0,a6
   1502a:	move.l 12(sp),d0
   1502e:	move.l 8(sp),d1
   15032:	jsr -78(a6)
   15036:	move.l d0,4(sp)
   1503a:	move.l 4(sp),d0
}
   1503e:	movea.l (sp)+,a6
   15040:	lea 12(sp),sp
   15044:	rts

00015046 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   15046:	lea -12(sp),sp
   1504a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1504c:	move.l 20(sp),12(sp)
   15052:	move.l 24(sp),8(sp)
   15058:	move.l 187b2 <MathIeeeSingBasBase>,d0
   1505e:	movea.l d0,a6
   15060:	move.l 12(sp),d0
   15064:	move.l 8(sp),d1
   15068:	jsr -42(a6)
   1506c:	move.l d0,4(sp)
   15070:	move.l 4(sp),d0
}
   15074:	movea.l (sp)+,a6
   15076:	lea 12(sp),sp
   1507a:	rts

0001507c <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1507c:	lea -20(sp),sp
   15080:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   15084:	move.l 36(sp),24(sp)
   1508a:	move.l 40(sp),28(sp)
   15090:	move.l 44(sp),16(sp)
   15096:	move.l 48(sp),20(sp)
   1509c:	move.l 187ba <MathIeeeDoubBasBase>,d0
   150a2:	movea.l d0,a6
   150a4:	move.l 24(sp),d0
   150a8:	move.l 28(sp),d1
   150ac:	move.l 16(sp),d2
   150b0:	move.l 20(sp),d3
   150b4:	jsr -42(a6)
   150b8:	move.l d0,12(sp)
   150bc:	move.l 12(sp),d0
}
   150c0:	movem.l (sp)+,d2-d3/a6
   150c4:	lea 20(sp),sp
   150c8:	rts

000150ca <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   150ca:	lea -12(sp),sp
   150ce:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   150d0:	move.l 20(sp),12(sp)
   150d6:	move.l 24(sp),8(sp)
   150dc:	move.l 187b2 <MathIeeeSingBasBase>,d0
   150e2:	movea.l d0,a6
   150e4:	move.l 12(sp),d0
   150e8:	move.l 8(sp),d1
   150ec:	jsr -42(a6)
   150f0:	move.l d0,4(sp)
   150f4:	move.l 4(sp),d0
}
   150f8:	movea.l (sp)+,a6
   150fa:	lea 12(sp),sp
   150fe:	rts

00015100 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   15100:	lea -12(sp),sp
   15104:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15106:	move.l 20(sp),12(sp)
   1510c:	move.l 24(sp),8(sp)
   15112:	move.l 187b2 <MathIeeeSingBasBase>,d0
   15118:	movea.l d0,a6
   1511a:	move.l 12(sp),d0
   1511e:	move.l 8(sp),d1
   15122:	jsr -42(a6)
   15126:	move.l d0,4(sp)
   1512a:	move.l 4(sp),d0
}
   1512e:	movea.l (sp)+,a6
   15130:	lea 12(sp),sp
   15134:	rts

00015136 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   15136:	lea -20(sp),sp
   1513a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1513e:	move.l 36(sp),24(sp)
   15144:	move.l 40(sp),28(sp)
   1514a:	move.l 44(sp),16(sp)
   15150:	move.l 48(sp),20(sp)
   15156:	move.l 187ba <MathIeeeDoubBasBase>,d0
   1515c:	movea.l d0,a6
   1515e:	move.l 24(sp),d0
   15162:	move.l 28(sp),d1
   15166:	move.l 16(sp),d2
   1516a:	move.l 20(sp),d3
   1516e:	jsr -42(a6)
   15172:	move.l d0,12(sp)
   15176:	move.l 12(sp),d0
}
   1517a:	movem.l (sp)+,d2-d3/a6
   1517e:	lea 20(sp),sp
   15182:	rts

00015184 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   15184:	lea -12(sp),sp
   15188:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1518a:	move.l 20(sp),12(sp)
   15190:	move.l 24(sp),8(sp)
   15196:	move.l 187b2 <MathIeeeSingBasBase>,d0
   1519c:	movea.l d0,a6
   1519e:	move.l 12(sp),d0
   151a2:	move.l 8(sp),d1
   151a6:	jsr -42(a6)
   151aa:	move.l d0,4(sp)
   151ae:	move.l 4(sp),d0
}
   151b2:	movea.l (sp)+,a6
   151b4:	lea 12(sp),sp
   151b8:	rts

000151ba <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   151ba:	lea -12(sp),sp
   151be:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   151c0:	move.l 20(sp),12(sp)
   151c6:	move.l 24(sp),8(sp)
   151cc:	move.l 187b2 <MathIeeeSingBasBase>,d0
   151d2:	movea.l d0,a6
   151d4:	move.l 12(sp),d0
   151d8:	move.l 8(sp),d1
   151dc:	jsr -42(a6)
   151e0:	move.l d0,4(sp)
   151e4:	move.l 4(sp),d0
}
   151e8:	movea.l (sp)+,a6
   151ea:	lea 12(sp),sp
   151ee:	rts

000151f0 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   151f0:	lea -32(sp),sp
   151f4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   151f8:	move.l 48(sp),36(sp)
   151fe:	move.l 52(sp),40(sp)
   15204:	move.l 56(sp),28(sp)
   1520a:	move.l 60(sp),32(sp)
   15210:	move.l 187ba <MathIeeeDoubBasBase>,d0
   15216:	movea.l d0,a6
   15218:	move.l 36(sp),d0
   1521c:	move.l 40(sp),d1
   15220:	move.l 28(sp),d2
   15224:	move.l 32(sp),d3
   15228:	jsr -72(a6)
   1522c:	move.l d0,12(sp)
   15230:	move.l d1,16(sp)
   15234:	move.l 12(sp),20(sp)
   1523a:	move.l 16(sp),24(sp)
   15240:	move.l 20(sp),d0
   15244:	move.l 24(sp),d1
}
   15248:	movem.l (sp)+,d2-d3/a6
   1524c:	lea 32(sp),sp
   15250:	rts

00015252 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   15252:	lea -12(sp),sp
   15256:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   15258:	move.l 20(sp),12(sp)
   1525e:	move.l 24(sp),8(sp)
   15264:	move.l 187b2 <MathIeeeSingBasBase>,d0
   1526a:	movea.l d0,a6
   1526c:	move.l 12(sp),d0
   15270:	move.l 8(sp),d1
   15274:	jsr -72(a6)
   15278:	move.l d0,4(sp)
   1527c:	move.l 4(sp),d0
}
   15280:	movea.l (sp)+,a6
   15282:	lea 12(sp),sp
   15286:	rts

00015288 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   15288:	lea -12(sp),sp
   1528c:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1528e:	move.l 20(sp),8(sp)
   15294:	move.l 24(sp),12(sp)
   1529a:	move.l 187be <MathIeeeDoubTransBase>,d0
   152a0:	movea.l d0,a6
   152a2:	move.l 8(sp),d0
   152a6:	move.l 12(sp),d1
   152aa:	jsr -102(a6)
   152ae:	move.l d0,4(sp)
   152b2:	move.l 4(sp),d0
}
   152b6:	movea.l (sp)+,a6
   152b8:	lea 12(sp),sp
   152bc:	rts

000152be <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   152be:	subq.l #8,sp
   152c0:	move.l a6,-(sp)
	return IEEESPFix(a);
   152c2:	move.l 16(sp),8(sp)
   152c8:	move.l 187b2 <MathIeeeSingBasBase>,d0
   152ce:	movea.l d0,a6
   152d0:	move.l 8(sp),d0
   152d4:	jsr -30(a6)
   152d8:	move.l d0,4(sp)
   152dc:	move.l 4(sp),d0
}
   152e0:	movea.l (sp)+,a6
   152e2:	addq.l #8,sp
   152e4:	rts

000152e6 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   152e6:	       lea -24(sp),sp
   152ea:	       move.l a6,-(sp)
    if (x > 0) {
   152ec:	       clr.l -(sp)
   152ee:	       move.l 40(sp),-(sp)
   152f2:	       jsr 150ca <__gtsf2>
   152f8:	       addq.l #8,sp
   152fa:	       tst.l d0
   152fc:	   /-- ble.s 1532e <atan2f+0x48>
        return IEEESPAtan(y / x);
   152fe:	   |   move.l 36(sp),-(sp)
   15302:	   |   move.l 36(sp),-(sp)
   15306:	   |   jsr 14e0a <__divsf3>
   1530c:	   |   addq.l #8,sp
   1530e:	   |   move.l d0,8(sp)
   15312:	   |   move.l 187b6 <MathIeeeSingTransBase>,d0
   15318:	   |   movea.l d0,a6
   1531a:	   |   move.l 8(sp),d0
   1531e:	   |   jsr -30(a6)
   15322:	   |   move.l d0,4(sp)
   15326:	   |   move.l 4(sp),d0
   1532a:	/--|-- bra.w 1548e <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   1532e:	|  \-> clr.l -(sp)
   15330:	|      move.l 40(sp),-(sp)
   15334:	|      jsr 15184 <__ltsf2>
   1533a:	|      addq.l #8,sp
   1533c:	|      tst.l d0
   1533e:	|  /-- bge.s 153b2 <atan2f+0xcc>
   15340:	|  |   clr.l -(sp)
   15342:	|  |   move.l 36(sp),-(sp)
   15346:	|  |   jsr 15046 <__gesf2>
   1534c:	|  |   addq.l #8,sp
   1534e:	|  |   tst.l d0
   15350:	|  +-- blt.s 153b2 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   15352:	|  |   move.l 36(sp),-(sp)
   15356:	|  |   move.l 36(sp),-(sp)
   1535a:	|  |   jsr 14e0a <__divsf3>
   15360:	|  |   addq.l #8,sp
   15362:	|  |   move.l d0,24(sp)
   15366:	|  |   move.l 187b6 <MathIeeeSingTransBase>,d0
   1536c:	|  |   movea.l d0,a6
   1536e:	|  |   move.l 24(sp),d0
   15372:	|  |   jsr -30(a6)
   15376:	|  |   move.l d0,20(sp)
   1537a:	|  |   move.l 20(sp),d0
   1537e:	|  |   move.l d0,-(sp)
   15380:	|  |   jsr 14e76 <__extendsfdf2>
   15386:	|  |   addq.l #4,sp
   15388:	|  |   move.l #1413754136,-(sp)
   1538e:	|  |   move.l #1074340347,-(sp)
   15394:	|  |   move.l d1,-(sp)
   15396:	|  |   move.l d0,-(sp)
   15398:	|  |   jsr 14d46 <__adddf3>
   1539e:	|  |   lea 16(sp),sp
   153a2:	|  |   move.l d1,-(sp)
   153a4:	|  |   move.l d0,-(sp)
   153a6:	|  |   jsr 15288 <__truncdfsf2>
   153ac:	|  |   addq.l #8,sp
   153ae:	+--|-- bra.w 1548e <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   153b2:	|  \-> clr.l -(sp)
   153b4:	|      move.l 40(sp),-(sp)
   153b8:	|      jsr 15184 <__ltsf2>
   153be:	|      addq.l #8,sp
   153c0:	|      tst.l d0
   153c2:	|  /-- bge.s 15434 <atan2f+0x14e>
   153c4:	|  |   clr.l -(sp)
   153c6:	|  |   move.l 36(sp),-(sp)
   153ca:	|  |   jsr 15184 <__ltsf2>
   153d0:	|  |   addq.l #8,sp
   153d2:	|  |   tst.l d0
   153d4:	|  +-- bge.s 15434 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   153d6:	|  |   move.l 36(sp),-(sp)
   153da:	|  |   move.l 36(sp),-(sp)
   153de:	|  |   jsr 14e0a <__divsf3>
   153e4:	|  |   addq.l #8,sp
   153e6:	|  |   move.l d0,16(sp)
   153ea:	|  |   move.l 187b6 <MathIeeeSingTransBase>,d0
   153f0:	|  |   movea.l d0,a6
   153f2:	|  |   move.l 16(sp),d0
   153f6:	|  |   jsr -30(a6)
   153fa:	|  |   move.l d0,12(sp)
   153fe:	|  |   move.l 12(sp),d0
   15402:	|  |   move.l d0,-(sp)
   15404:	|  |   jsr 14e76 <__extendsfdf2>
   1540a:	|  |   addq.l #4,sp
   1540c:	|  |   move.l #1413754136,-(sp)
   15412:	|  |   move.l #1074340347,-(sp)
   15418:	|  |   move.l d1,-(sp)
   1541a:	|  |   move.l d0,-(sp)
   1541c:	|  |   jsr 151f0 <__subdf3>
   15422:	|  |   lea 16(sp),sp
   15426:	|  |   move.l d1,-(sp)
   15428:	|  |   move.l d0,-(sp)
   1542a:	|  |   jsr 15288 <__truncdfsf2>
   15430:	|  |   addq.l #8,sp
   15432:	+--|-- bra.s 1548e <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   15434:	|  \-> clr.l -(sp)
   15436:	|      move.l 40(sp),-(sp)
   1543a:	|      jsr 14e40 <__eqsf2>
   15440:	|      addq.l #8,sp
   15442:	|      tst.l d0
   15444:	|  /-- bne.s 15460 <atan2f+0x17a>
   15446:	|  |   clr.l -(sp)
   15448:	|  |   move.l 36(sp),-(sp)
   1544c:	|  |   jsr 150ca <__gtsf2>
   15452:	|  |   addq.l #8,sp
   15454:	|  |   tst.l d0
   15456:	|  +-- ble.s 15460 <atan2f+0x17a>
        return PI / 2;
   15458:	|  |   move.l #1070141403,d0
   1545e:	+--|-- bra.s 1548e <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   15460:	|  \-> clr.l -(sp)
   15462:	|      move.l 40(sp),-(sp)
   15466:	|      jsr 14e40 <__eqsf2>
   1546c:	|      addq.l #8,sp
   1546e:	|      tst.l d0
   15470:	|  /-- bne.s 1548c <atan2f+0x1a6>
   15472:	|  |   clr.l -(sp)
   15474:	|  |   move.l 36(sp),-(sp)
   15478:	|  |   jsr 15184 <__ltsf2>
   1547e:	|  |   addq.l #8,sp
   15480:	|  |   tst.l d0
   15482:	|  +-- bge.s 1548c <atan2f+0x1a6>
        return -PI / 2;
   15484:	|  |   move.l #-1077342245,d0
   1548a:	+--|-- bra.s 1548e <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   1548c:	|  \-> moveq #0,d0
    }
}
   1548e:	\----> movea.l (sp)+,a6
   15490:	       lea 24(sp),sp
   15494:	       rts

00015496 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   15496:	lea -24(sp),sp
   1549a:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   1549c:	move.l 32(sp),20(sp)
   154a2:	move.l 36(sp),24(sp)
   154a8:	move.l 187be <MathIeeeDoubTransBase>,d0
   154ae:	movea.l d0,a6
   154b0:	move.l 20(sp),d0
   154b4:	move.l 24(sp),d1
   154b8:	jsr -96(a6)
   154bc:	move.l d0,4(sp)
   154c0:	move.l d1,8(sp)
   154c4:	move.l 4(sp),12(sp)
   154ca:	move.l 8(sp),16(sp)
   154d0:	move.l 12(sp),d0
   154d4:	move.l 16(sp),d1
}
   154d8:	movea.l (sp)+,a6
   154da:	lea 24(sp),sp
   154de:	rts

000154e0 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   154e0:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   154e4:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   154e8:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   154ec:	mulu.w 8(sp),d1
	addw	d1, d0
   154f0:	add.w d1,d0
	swap	d0
   154f2:	swap d0
	clrw	d0
   154f4:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   154f6:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   154fa:	mulu.w 10(sp),d1
	addl	d1, d0
   154fe:	add.l d1,d0
	rts
   15500:	rts

00015502 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   15502:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   15504:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   15508:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   1550c:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   15512:	   /-- bcc.s 1552a <__udivsi3+0x28>
	movel	d0, d2
   15514:	   |   move.l d0,d2
	clrw	d2
   15516:	   |   clr.w d2
	swap	d2
   15518:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   1551a:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   1551c:	   |   move.w d2,d0
	swap	d0
   1551e:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   15520:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   15524:	   |   divu.w d1,d2
	movew	d2, d0
   15526:	   |   move.w d2,d0
	jra	6f
   15528:	/--|-- bra.s 1555a <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   1552a:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   1552c:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   1552e:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   15530:	|  |   cmpi.l #65536,d1
	jcc	4b
   15536:	|  \-- bcc.s 1552c <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   15538:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   1553a:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   15540:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   15542:	|      mulu.w d0,d1
	swap	d2
   15544:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   15546:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   15548:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   1554a:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   1554c:	|  /-- bne.s 15558 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   1554e:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   15550:	|  +-- bcs.s 15558 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   15552:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   15556:	+--|-- bls.s 1555a <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   15558:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   1555a:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   1555c:	       rts

0001555e <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   1555e:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   15560:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   15562:	    move.l 12(sp),d1
	jpl	1f
   15566:	/-- bpl.s 1556c <__divsi3+0xe>
	negl	d1
   15568:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   1556a:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   1556c:	\-> move.l 8(sp),d0
	jpl	2f
   15570:	/-- bpl.s 15576 <__divsi3+0x18>
	negl	d0
   15572:	|   neg.l d0
	negb	d2
   15574:	|   neg.b d2

2:	movel	d1, sp@-
   15576:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   15578:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   1557a:	    jsr 15502 <__udivsi3>
	addql	#8, sp
   15580:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   15582:	    tst.b d2
	jpl	3f
   15584:	/-- bpl.s 15588 <__divsi3+0x2a>
	negl	d0
   15586:	|   neg.l d0

3:	movel	sp@+, d2
   15588:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   1558a:	    rts

0001558c <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   1558c:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   15590:	move.l 4(sp),d0
	movel	d1, sp@-
   15594:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   15596:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   15598:	jsr 1555e <__divsi3>
	addql	#8, sp
   1559e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   155a0:	move.l 8(sp),d1
	movel	d1, sp@-
   155a4:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   155a6:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   155a8:	jsr 154e0 <__mulsi3>
	addql	#8, sp
   155ae:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   155b0:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   155b4:	sub.l d0,d1
	movel	d1, d0
   155b6:	move.l d1,d0
	rts
   155b8:	rts

000155ba <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   155ba:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   155be:	move.l 4(sp),d0
	movel	d1, sp@-
   155c2:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   155c4:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   155c6:	jsr 15502 <__udivsi3>
	addql	#8, sp
   155cc:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   155ce:	move.l 8(sp),d1
	movel	d1, sp@-
   155d2:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   155d4:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   155d6:	jsr 154e0 <__mulsi3>
	addql	#8, sp
   155dc:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   155de:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   155e2:	sub.l d0,d1
	movel	d1, d0
   155e4:	move.l d1,d0
	rts
   155e6:	rts

000155e8 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   155e8:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   155ea:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   155ee:	jsr -516(a6)
    move.l (sp)+, a6
   155f2:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   155f4:	rts

000155f6 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   155f6:	move.b d0,(a3)+
	rts
   155f8:	rts
