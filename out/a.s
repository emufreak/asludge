
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #98304,d0
       8:	       subi.l #98304,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 18000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #98304,d0
      40:	       subi.l #98304,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 18000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 4fcc <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #98304,d0
      7e:	       subi.l #98304,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 18000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 102a0 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 19c5a <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 102b8 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 18000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 102a0 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 19c5a <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 18000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 102a0 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 19c5a <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 13a18 <PutChar+0x4>
     35c:	|  |              |   jsr 12e08 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 19c62 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 19c62 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 19c62 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 19c62 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 19c62 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 19c62 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 19c62 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 13a42 <PutChar+0x2e>
     834:	|   jsr 12e08 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 19c62 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 13a5e <PutChar+0x4a>
     8a6:	|   jsr 12e08 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 19c62 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 19c62 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 19c62 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 19c62 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 19c62 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 19c62 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 19c62 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 19c62 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 19c5a <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 19c62 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 102a0 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 19c62 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 19c5a <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 19c5a <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #80518,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 19c5a <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 13a93 <PutChar+0x7f>
     cea:	   |   jsr 12e08 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 138fe <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 139d8 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 13ab0 <PutChar+0x9c>
     d66:	|      jsr 12e08 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 19c5a <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 19c5a <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 19c5a <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 19b2c <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 683c <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),19b2c <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 19b30 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 19b34 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 13ac3 <PutChar+0xaf>
     de8:	jsr 12e08 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     df4:	             lea -20(sp),sp
     df8:	             move.l a6,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
     dfa:	             move.l #14675968,8(sp)

  width /= 16;
     e02:	             move.l 28(sp),d0
     e06:	             movea.l d0,a0
     e08:	             cmpa.w #0,a0
     e0c:	         /-- bge.s e12 <CstBlankScreen+0x1e>
     e0e:	         |   lea 15(a0),a0
     e12:	         \-> move.l a0,d0
     e14:	             asr.l #4,d0
     e16:	             move.l d0,28(sp)

  WaitBlit();
     e1a:	             move.l 19c66 <GfxBase>,d0
     e20:	             movea.l d0,a6
     e22:	             jsr -228(a6)

  //Both Buffers need to be done
  for(int i=0;i<2;i++) {
     e26:	             clr.l 20(sp)
     e2a:	   /-------- bra.w f04 <CstBlankScreen+0x110>
    custom->bltafwm = 0xffff;
     e2e:	/--|-------> movea.l 8(sp),a0
     e32:	|  |         move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
     e38:	|  |         movea.l 8(sp),a0
     e3c:	|  |         move.w #-1,70(a0)
    custom->bltamod = 0;
     e42:	|  |         movea.l 8(sp),a0
     e46:	|  |         move.w #0,100(a0)
    custom->bltbmod = 0;
     e4c:	|  |         movea.l 8(sp),a0
     e50:	|  |         move.w #0,98(a0)
    custom->bltcmod = 0;
     e56:	|  |         movea.l 8(sp),a0
     e5a:	|  |         move.w #0,96(a0)
    custom->bltdmod = 0;
     e60:	|  |         movea.l 8(sp),a0
     e64:	|  |         move.w #0,102(a0)
    custom->bltcon1 = 0;
     e6a:	|  |         movea.l 8(sp),a0
     e6e:	|  |         move.w #0,66(a0)
    custom->bltcon0 = 0x0100;
     e74:	|  |         movea.l 8(sp),a0
     e78:	|  |         move.w #256,64(a0)
    ULONG bltdpt = (ULONG) CstDrawBuffer;
     e7e:	|  |         move.l 19b52 <CstDrawBuffer>,d0
     e84:	|  |         move.l d0,16(sp)
    UWORD bltsize = height*64+width;    
     e88:	|  |         move.l 32(sp),d0
     e8c:	|  |         lsl.w #6,d0
     e8e:	|  |         move.l 28(sp),d1
     e92:	|  |         movea.w d0,a0
     e94:	|  |         adda.w d1,a0
     e96:	|  |         move.w a0,6(sp)
    UWORD blitsize = width*height*2;
     e9a:	|  |         move.l 28(sp),d1
     e9e:	|  |         move.l 32(sp),d0
     ea2:	|  |         muls.w d1,d0
     ea4:	|  |         add.w d0,d0
     ea6:	|  |         move.w d0,4(sp)
    for(int i2=0;i2<5;i2++)
     eaa:	|  |         clr.l 12(sp)
     eae:	|  |     /-- bra.s ee0 <CstBlankScreen+0xec>
    {            
      custom->bltdpt = (APTR) bltdpt;
     eb0:	|  |  /--|-> move.l 16(sp),d0
     eb4:	|  |  |  |   movea.l 8(sp),a0
     eb8:	|  |  |  |   move.l d0,84(a0)
      custom->bltsize = bltsize;            
     ebc:	|  |  |  |   movea.l 8(sp),a0
     ec0:	|  |  |  |   move.w 6(sp),88(a0)
      WaitBlit();
     ec6:	|  |  |  |   move.l 19c66 <GfxBase>,d0
     ecc:	|  |  |  |   movea.l d0,a6
     ece:	|  |  |  |   jsr -228(a6)
      bltdpt += blitsize;
     ed2:	|  |  |  |   moveq #0,d0
     ed4:	|  |  |  |   move.w 4(sp),d0
     ed8:	|  |  |  |   add.l d0,16(sp)
    for(int i2=0;i2<5;i2++)
     edc:	|  |  |  |   addq.l #1,12(sp)
     ee0:	|  |  |  \-> moveq #4,d0
     ee2:	|  |  |      cmp.l 12(sp),d0
     ee6:	|  |  \----- bge.s eb0 <CstBlankScreen+0xbc>
    }

    WaitBlit();
     ee8:	|  |         move.l 19c66 <GfxBase>,d0
     eee:	|  |         movea.l d0,a6
     ef0:	|  |         jsr -228(a6)
    WaitVbl();
     ef4:	|  |         jsr 12d30 <WaitVbl>
    CstSwapGraphics();
     efa:	|  |         jsr 13ea <CstSwapGraphics>
  for(int i=0;i<2;i++) {
     f00:	|  |         addq.l #1,20(sp)
     f04:	|  \-------> moveq #1,d0
     f06:	|            cmp.l 20(sp),d0
     f0a:	\----------- bge.w e2e <CstBlankScreen+0x3a>
  }

}
     f0e:	             nop
     f10:	             nop
     f12:	             movea.l (sp)+,a6
     f14:	             lea 20(sp),sp
     f18:	             rts

00000f1a <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     f1a:	       lea -52(sp),sp
     f1e:	       move.l a6,-(sp)
     f20:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     f22:	       move.l #400,32(sp)
     f2a:	       moveq #2,d0
     f2c:	       move.l d0,28(sp)
     f30:	       move.l 19c5a <SysBase>,d0
     f36:	       movea.l d0,a6
     f38:	       move.l 32(sp),d0
     f3c:	       move.l 28(sp),d1
     f40:	       jsr -198(a6)
     f44:	       move.l d0,24(sp)
     f48:	       move.l 24(sp),d0
     f4c:	       move.l d0,20(sp)
  
  if( retval == 0) {
     f50:	   /-- bne.s f7a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     f52:	   |   pea 28 <_start+0x28>
     f56:	   |   pea 13afc <PutChar+0xe8>
     f5c:	   |   jsr 12e08 <KPrintF>
     f62:	   |   addq.l #8,sp
    Exit(1);
     f64:	   |   moveq #1,d1
     f66:	   |   move.l d1,16(sp)
     f6a:	   |   move.l 19c62 <DOSBase>,d0
     f70:	   |   movea.l d0,a6
     f72:	   |   move.l 16(sp),d1
     f76:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     f7a:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     f80:	       move.l #98306,52(sp)
  for(int i=0; i<16;i++)
     f88:	       clr.l 48(sp)
     f8c:	   /-- bra.s fb2 <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
     f8e:	/--|-> move.l 52(sp),d1
     f92:	|  |   move.l d1,d2
     f94:	|  |   addq.l #4,d2
     f96:	|  |   move.l d2,52(sp)
     f9a:	|  |   move.l 56(sp),d0
     f9e:	|  |   move.l d0,d2
     fa0:	|  |   addq.l #4,d2
     fa2:	|  |   move.l d2,56(sp)
     fa6:	|  |   movea.l d1,a0
     fa8:	|  |   move.l (a0),d1
     faa:	|  |   movea.l d0,a0
     fac:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
     fae:	|  |   addq.l #1,48(sp)
     fb2:	|  \-> moveq #15,d0
     fb4:	|      cmp.l 48(sp),d0
     fb8:	\----- bge.s f8e <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
     fba:	       move.l #98370,52(sp)

  for(int i=0; i<12;i++)
     fc2:	       clr.l 44(sp)
     fc6:	   /-- bra.s fec <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
     fc8:	/--|-> move.l 52(sp),d1
     fcc:	|  |   move.l d1,d2
     fce:	|  |   addq.l #4,d2
     fd0:	|  |   move.l d2,52(sp)
     fd4:	|  |   move.l 56(sp),d0
     fd8:	|  |   move.l d0,d2
     fda:	|  |   addq.l #4,d2
     fdc:	|  |   move.l d2,56(sp)
     fe0:	|  |   movea.l d1,a0
     fe2:	|  |   move.l (a0),d1
     fe4:	|  |   movea.l d0,a0
     fe6:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
     fe8:	|  |   addq.l #1,44(sp)
     fec:	|  \-> moveq #11,d0
     fee:	|      cmp.l 44(sp),d0
     ff2:	\----- bge.s fc8 <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
     ff4:	       move.l #98418,52(sp)
  for(int i=0; i<10;i++)
     ffc:	       clr.l 40(sp)
    1000:	   /-- bra.s 1026 <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
    1002:	/--|-> move.l 52(sp),d1
    1006:	|  |   move.l d1,d2
    1008:	|  |   addq.l #4,d2
    100a:	|  |   move.l d2,52(sp)
    100e:	|  |   move.l 56(sp),d0
    1012:	|  |   move.l d0,d2
    1014:	|  |   addq.l #4,d2
    1016:	|  |   move.l d2,56(sp)
    101a:	|  |   movea.l d1,a0
    101c:	|  |   move.l (a0),d1
    101e:	|  |   movea.l d0,a0
    1020:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1022:	|  |   addq.l #1,40(sp)
    1026:	|  \-> moveq #9,d0
    1028:	|      cmp.l 40(sp),d0
    102c:	\----- bge.s 1002 <CstCreateCopperlist+0xe8>

  
  clpartinstruction = CstClColorTemplate;
    102e:	       move.l #98458,52(sp)
  CstClColor = (UWORD *) cl;
    1036:	       move.l 56(sp),19b56 <CstClColor>
  for(int i=0; i<32;i++)
    103e:	       clr.l 36(sp)
    1042:	   /-- bra.s 1068 <CstCreateCopperlist+0x14e>
    *cl++ = *clpartinstruction++;        
    1044:	/--|-> move.l 52(sp),d1
    1048:	|  |   move.l d1,d2
    104a:	|  |   addq.l #4,d2
    104c:	|  |   move.l d2,52(sp)
    1050:	|  |   move.l 56(sp),d0
    1054:	|  |   move.l d0,d2
    1056:	|  |   addq.l #4,d2
    1058:	|  |   move.l d2,56(sp)
    105c:	|  |   movea.l d1,a0
    105e:	|  |   move.l (a0),d1
    1060:	|  |   movea.l d0,a0
    1062:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1064:	|  |   addq.l #1,36(sp)
    1068:	|  \-> moveq #31,d0
    106a:	|      cmp.l 36(sp),d0
    106e:	\----- bge.s 1044 <CstCreateCopperlist+0x12a>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1070:	       moveq #40,d1
    1072:	       cmp.l 64(sp),d1
    1076:	   /-- bge.s 10d4 <CstCreateCopperlist+0x1ba>
    int tmp = width - 40;
    1078:	   |   moveq #-40,d2
    107a:	   |   add.l 64(sp),d2
    107e:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    1082:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1088:	   |   move.l 8(sp),d0
    108c:	   |   move.l d0,d1
    108e:	   |   addq.l #2,d1
    1090:	   |   move.l d1,8(sp)
    1094:	   |   movea.l d0,a0
    1096:	   |   move.w #264,(a0)
    *cw++ = tmp;
    109a:	   |   move.l 8(sp),d0
    109e:	   |   move.l d0,d1
    10a0:	   |   addq.l #2,d1
    10a2:	   |   move.l d1,8(sp)
    10a6:	   |   move.l 12(sp),d1
    10aa:	   |   movea.l d0,a0
    10ac:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    10ae:	   |   move.l 8(sp),d0
    10b2:	   |   move.l d0,d1
    10b4:	   |   addq.l #2,d1
    10b6:	   |   move.l d1,8(sp)
    10ba:	   |   movea.l d0,a0
    10bc:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    10c0:	   |   move.l 8(sp),d0
    10c4:	   |   move.l d0,d1
    10c6:	   |   addq.l #2,d1
    10c8:	   |   move.l d1,8(sp)
    10cc:	   |   move.l 12(sp),d1
    10d0:	   |   movea.l d0,a0
    10d2:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    10d4:	   \-> move.l 56(sp),d0
    10d8:	       move.l d0,d1
    10da:	       addq.l #4,d1
    10dc:	       move.l d1,56(sp)
    10e0:	       moveq #-2,d2
    10e2:	       movea.l d0,a0
    10e4:	       move.l d2,(a0)
  return (UWORD *) retval;  
    10e6:	       move.l 20(sp),d0
}
    10ea:	       move.l (sp)+,d2
    10ec:	       movea.l (sp)+,a6
    10ee:	       lea 52(sp),sp
    10f2:	       rts

000010f4 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    10f4:	       lea -12(sp),sp
    10f8:	       move.l d2,-(sp)
  ULONG *bplcursorsrc = CstBackDrop;
    10fa:	       move.l 19b44 <CstBackDrop>,12(sp)
  ULONG *bplcursordst = CstDrawBuffer;
    1102:	       move.l 19b52 <CstDrawBuffer>,8(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    110a:	       clr.l 4(sp)
    110e:	   /-- bra.s 1134 <CstDisplayBackDrop+0x40>
  {
    *bplcursordst++ = *bplcursorsrc++;
    1110:	/--|-> move.l 12(sp),d1
    1114:	|  |   move.l d1,d0
    1116:	|  |   addq.l #4,d0
    1118:	|  |   move.l d0,12(sp)
    111c:	|  |   move.l 8(sp),d0
    1120:	|  |   move.l d0,d2
    1122:	|  |   addq.l #4,d2
    1124:	|  |   move.l d2,8(sp)
    1128:	|  |   movea.l d1,a0
    112a:	|  |   move.l (a0),d1
    112c:	|  |   movea.l d0,a0
    112e:	|  |   move.l d1,(a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    1130:	|  |   addq.l #1,4(sp)
    1134:	|  \-> move.w 19b40 <CstBackdropSize>,d0
    113a:	|      lsr.w #2,d0
    113c:	|      move.w d0,d0
    113e:	|      andi.l #65535,d0
    1144:	|      cmp.l 4(sp),d0
    1148:	\----- bgt.s 1110 <CstDisplayBackDrop+0x1c>
  }
}
    114a:	       nop
    114c:	       nop
    114e:	       move.l (sp)+,d2
    1150:	       lea 12(sp),sp
    1154:	       rts

00001156 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1156:	                      lea -84(sp),sp
    115a:	                      movem.l d2-d4/a6,-(sp)
  UWORD width = get2bytes(fp);
    115e:	                      move.l 104(sp),-(sp)
    1162:	                      jsr 6bc <get2bytes>
    1168:	                      addq.l #4,sp
    116a:	                      move.w d0,68(sp)
  UWORD height = get2bytes(fp);  
    116e:	                      move.l 104(sp),-(sp)
    1172:	                      jsr 6bc <get2bytes>
    1178:	                      addq.l #4,sp
    117a:	                      move.w d0,66(sp)

  UWORD widthbytes = width/8;
    117e:	                      move.w 68(sp),d0
    1182:	                      lsr.w #3,d0
    1184:	                      move.w d0,64(sp)
  UWORD widthwords = widthbytes/2;  
    1188:	                      move.w 64(sp),d0
    118c:	                      lsr.w #1,d0
    118e:	                      move.w d0,62(sp)
  UWORD size = widthbytes*height*5; //Todo other number of bitplanes
    1192:	                      move.w 64(sp),d1
    1196:	                      muls.w 66(sp),d1
    119a:	                      move.w d1,d0
    119c:	                      add.w d0,d0
    119e:	                      add.w d0,d0
    11a0:	                      move.w d0,d2
    11a2:	                      add.w d1,d2
    11a4:	                      move.w d2,60(sp)

  //Load Palette to Copper
  UWORD reg = 0x180;
    11a8:	                      move.w #384,98(sp)
  UWORD *tmp = CstClColor;
    11ae:	                      move.l 19b56 <CstClColor>,94(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    11b6:	                      clr.l 90(sp)
    11ba:	                  /-- bra.s 11f6 <CstLoadBackdrop+0xa0>
    *tmp++ = reg;
    11bc:	               /--|-> move.l 94(sp),d0
    11c0:	               |  |   move.l d0,d1
    11c2:	               |  |   addq.l #2,d1
    11c4:	               |  |   move.l d1,94(sp)
    11c8:	               |  |   movea.l d0,a0
    11ca:	               |  |   move.w 98(sp),(a0)
    reg +=2;
    11ce:	               |  |   addq.w #2,98(sp)
    *tmp++ = get2bytes(fp);
    11d2:	               |  |   move.l 104(sp),-(sp)
    11d6:	               |  |   jsr 6bc <get2bytes>
    11dc:	               |  |   addq.l #4,sp
    11de:	               |  |   move.l d0,d1
    11e0:	               |  |   move.l 94(sp),d0
    11e4:	               |  |   move.l d0,d2
    11e6:	               |  |   addq.l #2,d2
    11e8:	               |  |   move.l d2,94(sp)
    11ec:	               |  |   move.l d1,d1
    11ee:	               |  |   movea.l d0,a0
    11f0:	               |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    11f2:	               |  |   addq.l #1,90(sp)
    11f6:	               |  \-> moveq #31,d0
    11f8:	               |      cmp.l 90(sp),d0
    11fc:	               \----- bge.s 11bc <CstLoadBackdrop+0x66>
  }

  UWORD *tmpbuffer = AllocVec(size, MEMF_ANY); //Todo other number of bitplanes
    11fe:	                      moveq #0,d0
    1200:	                      move.w 60(sp),d0
    1204:	                      move.l d0,56(sp)
    1208:	                      clr.l 52(sp)
    120c:	                      move.l 19c5a <SysBase>,d0
    1212:	                      movea.l d0,a6
    1214:	                      move.l 56(sp),d0
    1218:	                      move.l 52(sp),d1
    121c:	                      jsr -684(a6)
    1220:	                      move.l d0,48(sp)
    1224:	                      move.l 48(sp),d0
    1228:	                      move.l d0,44(sp)
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    122c:	                      move.w 66(sp),d0
    1230:	                      movea.w d0,a1
    1232:	                      move.w 68(sp),d0
    1236:	                      movea.w d0,a0
    1238:	                      clr.l -(sp)
    123a:	                      pea 5 <_start+0x5>
    123e:	                      move.l a1,-(sp)
    1240:	                      move.l a0,-(sp)
    1242:	                      pea 13b37 <PutChar+0x123>
    1248:	                      move.l 64(sp),-(sp)
    124c:	                      jsr 13050 <debug_register_bitmap>
    1252:	                      lea 24(sp),sp
  UWORD *tmpbuffercursor = tmpbuffer;
    1256:	                      move.l 44(sp),86(sp)
  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    125c:	                      move.l 104(sp),40(sp)
    1262:	                      move.l 44(sp),36(sp)
    1268:	                      moveq #2,d1
    126a:	                      move.l d1,32(sp)
    126e:	                      move.w 60(sp),d0
    1272:	                      lsr.w #1,d0
    1274:	                      move.w d0,d0
    1276:	                      andi.l #65535,d0
    127c:	                      move.l d0,28(sp)
    1280:	                      move.l 19c62 <DOSBase>,d0
    1286:	                      movea.l d0,a6
    1288:	                      move.l 40(sp),d1
    128c:	                      move.l 36(sp),d2
    1290:	                      move.l 32(sp),d3
    1294:	                      move.l 28(sp),d4
    1298:	                      jsr -324(a6)
    129c:	                      move.l d0,24(sp)
    12a0:	                      move.l 24(sp),d0
    12a4:	                      move.w d0,22(sp)
  
  if(!count) {
    12a8:	                  /-- bne.s 12bc <CstLoadBackdrop+0x166>
    KPrintF("Errow while reading stream");
    12aa:	                  |   pea 13b45 <PutChar+0x131>
    12b0:	                  |   jsr 12e08 <KPrintF>
    12b6:	                  |   addq.l #4,sp
    return;
    12b8:	/-----------------|-- bra.w 13a2 <CstLoadBackdrop+0x24c>
  }
  

  tmp = CstBackDrop; //+ widthwords*y/2 + x / 16;
    12bc:	|                 \-> move.l 19b44 <CstBackDrop>,94(sp)
  UWORD offset = widthwords*y + x / 16;
    12c4:	|                     move.l 112(sp),d0
    12c8:	|                     muls.w 62(sp),d0
    12cc:	|                     move.l 108(sp),d1
    12d0:	|                     movea.l d1,a0
    12d2:	|                     cmpa.w #0,a0
    12d6:	|                 /-- bge.s 12dc <CstLoadBackdrop+0x186>
    12d8:	|                 |   lea 15(a0),a0
    12dc:	|                 \-> move.l a0,d1
    12de:	|                     asr.l #4,d1
    12e0:	|                     move.l d1,d1
    12e2:	|                     move.w d0,d2
    12e4:	|                     add.w d1,d2
    12e6:	|                     move.w d2,20(sp)
  tmp += offset;
    12ea:	|                     moveq #0,d0
    12ec:	|                     move.w 20(sp),d0
    12f0:	|                     add.l d0,d0
    12f2:	|                     add.l d0,94(sp)

  for(int i3=0;i3<5;i3++) //ToDo other number of bitplanes
    12f6:	|                     clr.l 82(sp)
    12fa:	|     /-------------- bra.s 137a <CstLoadBackdrop+0x224>
  {    
    UWORD *tmp2 = tmp;
    12fc:	|  /--|-------------> move.l 94(sp),78(sp)
    for(int i2=0;i2<height;i2++)
    1302:	|  |  |               clr.l 74(sp)
    1306:	|  |  |     /-------- bra.s 1354 <CstLoadBackdrop+0x1fe>
    {
      for(int i=0;i<widthwords;i++)
    1308:	|  |  |  /--|-------> clr.l 70(sp)
    130c:	|  |  |  |  |     /-- bra.s 1332 <CstLoadBackdrop+0x1dc>
        *tmp2++ = *tmpbuffercursor++;
    130e:	|  |  |  |  |  /--|-> move.l 86(sp),d1
    1312:	|  |  |  |  |  |  |   move.l d1,d0
    1314:	|  |  |  |  |  |  |   addq.l #2,d0
    1316:	|  |  |  |  |  |  |   move.l d0,86(sp)
    131a:	|  |  |  |  |  |  |   move.l 78(sp),d0
    131e:	|  |  |  |  |  |  |   move.l d0,d2
    1320:	|  |  |  |  |  |  |   addq.l #2,d2
    1322:	|  |  |  |  |  |  |   move.l d2,78(sp)
    1326:	|  |  |  |  |  |  |   movea.l d1,a0
    1328:	|  |  |  |  |  |  |   move.w (a0),d1
    132a:	|  |  |  |  |  |  |   movea.l d0,a0
    132c:	|  |  |  |  |  |  |   move.w d1,(a0)
      for(int i=0;i<widthwords;i++)
    132e:	|  |  |  |  |  |  |   addq.l #1,70(sp)
    1332:	|  |  |  |  |  |  \-> moveq #0,d0
    1334:	|  |  |  |  |  |      move.w 62(sp),d0
    1338:	|  |  |  |  |  |      cmp.l 70(sp),d0
    133c:	|  |  |  |  |  \----- bgt.s 130e <CstLoadBackdrop+0x1b8>
      tmp2 += 20-widthwords;
    133e:	|  |  |  |  |         moveq #0,d0
    1340:	|  |  |  |  |         move.w 62(sp),d0
    1344:	|  |  |  |  |         moveq #20,d1
    1346:	|  |  |  |  |         sub.l d0,d1
    1348:	|  |  |  |  |         move.l d1,d0
    134a:	|  |  |  |  |         add.l d0,d0
    134c:	|  |  |  |  |         add.l d0,78(sp)
    for(int i2=0;i2<height;i2++)
    1350:	|  |  |  |  |         addq.l #1,74(sp)
    1354:	|  |  |  |  \-------> moveq #0,d0
    1356:	|  |  |  |            move.w 66(sp),d0
    135a:	|  |  |  |            cmp.l 74(sp),d0
    135e:	|  |  |  \----------- bgt.s 1308 <CstLoadBackdrop+0x1b2>
    }
    tmp += CstBackdropSizePlane / 2;
    1360:	|  |  |               move.w 19b42 <CstBackdropSizePlane>,d0
    1366:	|  |  |               lsr.w #1,d0
    1368:	|  |  |               move.w d0,d0
    136a:	|  |  |               andi.l #65535,d0
    1370:	|  |  |               add.l d0,d0
    1372:	|  |  |               add.l d0,94(sp)
  for(int i3=0;i3<5;i3++) //ToDo other number of bitplanes
    1376:	|  |  |               addq.l #1,82(sp)
    137a:	|  |  \-------------> moveq #4,d0
    137c:	|  |                  cmp.l 82(sp),d0
    1380:	|  \----------------- bge.w 12fc <CstLoadBackdrop+0x1a6>
  }

  FreeVec(tmpbuffer);
    1384:	|                     move.l 44(sp),16(sp)
    138a:	|                     move.l 19c5a <SysBase>,d0
    1390:	|                     movea.l d0,a6
    1392:	|                     movea.l 16(sp),a1
    1396:	|                     jsr -690(a6)

  CstApplyBackDropCounter = 2;
    139a:	|                     move.w #2,19b4c <CstApplyBackDropCounter>

}
    13a2:	\-------------------> movem.l (sp)+,d2-d4/a6
    13a6:	                      lea 84(sp),sp
    13aa:	                      rts

000013ac <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    13ac:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    13ae:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    13b4:	move.l 8(sp),d0
    13b8:	movea.l (sp),a0
    13ba:	move.l d0,128(a0)
}
    13be:	nop
    13c0:	addq.l #4,sp
    13c2:	rts

000013c4 <CstSludgeDisplay>:

void CstSludgeDisplay() {  
  if(CstApplyBackDropCounter > 0) 
    13c4:	    move.w 19b4c <CstApplyBackDropCounter>,d0
    13ca:	/-- ble.s 13e0 <CstSludgeDisplay+0x1c>
  {
    CstDisplayBackDrop();
    13cc:	|   jsr 10f4 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    13d2:	|   move.w 19b4c <CstApplyBackDropCounter>,d0
    13d8:	|   subq.w #1,d0
    13da:	|   move.w d0,19b4c <CstApplyBackDropCounter>
  }
  CstSwapGraphics();
    13e0:	\-> jsr 13ea <CstSwapGraphics>
}
    13e6:	    nop
    13e8:	    rts

000013ea <CstSwapGraphics>:

void CstSwapGraphics( ) {
    13ea:	lea -16(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    13ee:	move.l 19b4e <CstViewBuffer>,12(sp)
  CstViewBuffer = CstDrawBuffer;
    13f6:	move.l 19b52 <CstDrawBuffer>,d0
    13fc:	move.l d0,19b4e <CstViewBuffer>
  CstDrawBuffer = tmp;
    1402:	move.l 12(sp),19b52 <CstDrawBuffer>

  UWORD *copword = CstCopperList;
    140a:	move.l 19b48 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    1412:	move.l 19b4e <CstViewBuffer>,d0
    1418:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    141c:	move.l 4(sp),d0
    1420:	clr.w d0
    1422:	swap d0
    1424:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    1428:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    142c:	movea.w #118,a0
    1430:	adda.l 8(sp),a0
    1434:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    1436:	movea.w #114,a0
    143a:	adda.l 8(sp),a0
    143e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1442:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    144a:	move.l 4(sp),d0
    144e:	clr.w d0
    1450:	swap d0
    1452:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1456:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    145a:	movea.w #126,a0
    145e:	adda.l 8(sp),a0
    1462:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    1464:	movea.w #122,a0
    1468:	adda.l 8(sp),a0
    146c:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    1470:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1478:	move.l 4(sp),d0
    147c:	clr.w d0
    147e:	swap d0
    1480:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1484:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    1488:	movea.l 8(sp),a0
    148c:	lea 134(a0),a0
    1490:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    1492:	movea.l 8(sp),a0
    1496:	lea 130(a0),a0
    149a:	move.w 2(sp),(a0)

  ptr +=  40*256;
    149e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    14a6:	move.l 4(sp),d0
    14aa:	clr.w d0
    14ac:	swap d0
    14ae:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    14b2:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    14b6:	movea.l 8(sp),a0
    14ba:	lea 142(a0),a0
    14be:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    14c0:	movea.l 8(sp),a0
    14c4:	lea 138(a0),a0
    14c8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    14cc:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    14d4:	move.l 4(sp),d0
    14d8:	clr.w d0
    14da:	swap d0
    14dc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    14e0:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    14e4:	movea.l 8(sp),a0
    14e8:	lea 150(a0),a0
    14ec:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    14ee:	movea.l 8(sp),a0
    14f2:	lea 146(a0),a0
    14f6:	move.w 2(sp),(a0)

}
    14fa:	nop
    14fc:	lea 16(sp),sp
    1500:	rts

00001502 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    1502:	          lea -36(sp),sp
    1506:	          move.l a6,-(sp)

  width = width / 8;
    1508:	          move.l 44(sp),d0
    150c:	      /-- bpl.s 1510 <CstReserveBackdrop+0xe>
    150e:	      |   addq.l #7,d0
    1510:	      \-> asr.l #3,d0
    1512:	          move.l d0,44(sp)

  if( width < 40) 
    1516:	          moveq #39,d0
    1518:	          cmp.l 44(sp),d0
    151c:	      /-- blt.s 1532 <CstReserveBackdrop+0x30>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    151e:	      |   pea 13b60 <PutChar+0x14c>
    1524:	      |   jsr 12e08 <KPrintF>
    152a:	      |   addq.l #4,sp
    return FALSE;
    152c:	      |   clr.w d0
    152e:	/-----|-- bra.w 1678 <CstReserveBackdrop+0x176>
  }  

  CstCopperList = CstCreateCopperlist( width);
    1532:	|     \-> move.l 44(sp),-(sp)
    1536:	|         jsr f1a <CstCreateCopperlist>
    153c:	|         addq.l #4,sp
    153e:	|         move.l d0,19b48 <CstCopperList>
  CstBackdropSizePlane = width*height;
    1544:	|         move.l 44(sp),d1
    1548:	|         move.l 48(sp),d0
    154c:	|         muls.w d1,d0
    154e:	|         move.w d0,19b42 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;
    1554:	|         move.w 19b42 <CstBackdropSizePlane>,d1
    155a:	|         move.w d1,d0
    155c:	|         add.w d0,d0
    155e:	|         add.w d0,d0
    1560:	|         add.w d1,d0
    1562:	|         move.w d0,19b40 <CstBackdropSize>

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    1568:	|         move.w 19b40 <CstBackdropSize>,d0
    156e:	|         move.w d0,d0
    1570:	|         andi.l #65535,d0
    1576:	|         move.l d0,36(sp)
    157a:	|         moveq #2,d0
    157c:	|         move.l d0,32(sp)
    1580:	|         move.l 19c5a <SysBase>,d0
    1586:	|         movea.l d0,a6
    1588:	|         move.l 36(sp),d0
    158c:	|         move.l 32(sp),d1
    1590:	|         jsr -684(a6)
    1594:	|         move.l d0,28(sp)
    1598:	|         move.l 28(sp),d0
    159c:	|         move.l d0,19b44 <CstBackDrop>
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    15a2:	|         move.l 19b44 <CstBackDrop>,d0
    15a8:	|         clr.l -(sp)
    15aa:	|         pea 5 <_start+0x5>
    15ae:	|         pea 100 <copyString+0x48>
    15b2:	|         pea 140 <decodeFilename+0x28>
    15b6:	|         pea 13b9e <PutChar+0x18a>
    15bc:	|         move.l d0,-(sp)
    15be:	|         jsr 13050 <debug_register_bitmap>
    15c4:	|         lea 24(sp),sp

  CstDrawBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    15c8:	|         move.w 19b40 <CstBackdropSize>,d0
    15ce:	|         move.w d0,d0
    15d0:	|         andi.l #65535,d0
    15d6:	|         move.l d0,24(sp)
    15da:	|         moveq #2,d0
    15dc:	|         move.l d0,20(sp)
    15e0:	|         move.l 19c5a <SysBase>,d0
    15e6:	|         movea.l d0,a6
    15e8:	|         move.l 24(sp),d0
    15ec:	|         move.l 20(sp),d1
    15f0:	|         jsr -684(a6)
    15f4:	|         move.l d0,16(sp)
    15f8:	|         move.l 16(sp),d0
    15fc:	|         move.l d0,19b52 <CstDrawBuffer>
  CstViewBuffer = AllocVec(CstBackdropSize,MEMF_CHIP);
    1602:	|         move.w 19b40 <CstBackdropSize>,d0
    1608:	|         move.w d0,d0
    160a:	|         andi.l #65535,d0
    1610:	|         move.l d0,12(sp)
    1614:	|         moveq #2,d0
    1616:	|         move.l d0,8(sp)
    161a:	|         move.l 19c5a <SysBase>,d0
    1620:	|         movea.l d0,a6
    1622:	|         move.l 12(sp),d0
    1626:	|         move.l 8(sp),d1
    162a:	|         jsr -684(a6)
    162e:	|         move.l d0,4(sp)
    1632:	|         move.l 4(sp),d0
    1636:	|         move.l d0,19b4e <CstViewBuffer>
  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    163c:	|         move.l 19b48 <CstCopperList>,d0
    1642:	|     /-- beq.s 1654 <CstReserveBackdrop+0x152>
    1644:	|     |   move.l 19b52 <CstDrawBuffer>,d0
    164a:	|     +-- beq.s 1654 <CstReserveBackdrop+0x152>
    164c:	|     |   move.l 19b4e <CstViewBuffer>,d0
    1652:	|  /--|-- bne.s 1666 <CstReserveBackdrop+0x164>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    1654:	|  |  \-> pea 13bae <PutChar+0x19a>
    165a:	|  |      jsr 12e08 <KPrintF>
    1660:	|  |      addq.l #4,sp
    return FALSE;
    1662:	|  |      clr.w d0
    1664:	+--|----- bra.s 1678 <CstReserveBackdrop+0x176>
  }

  CstSetCl( CstCopperList);
    1666:	|  \----> move.l 19b48 <CstCopperList>,d0
    166c:	|         move.l d0,-(sp)
    166e:	|         jsr 13ac <CstSetCl>
    1674:	|         addq.l #4,sp
  return TRUE;
    1676:	|         moveq #1,d0

}
    1678:	\-------> movea.l (sp)+,a6
    167a:	          lea 36(sp),sp
    167e:	          rts

00001680 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1680:	    lea -12(sp),sp
    1684:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1686:	    move.l 19b52 <CstDrawBuffer>,d0
    168c:	/-- beq.s 16a6 <CstFreeBuffer+0x26>
    168e:	|   move.l 19b52 <CstDrawBuffer>,12(sp)
    1696:	|   move.l 19c5a <SysBase>,d0
    169c:	|   movea.l d0,a6
    169e:	|   movea.l 12(sp),a1
    16a2:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    16a6:	\-> move.l 19b4e <CstViewBuffer>,d0
    16ac:	/-- beq.s 16c6 <CstFreeBuffer+0x46>
    16ae:	|   move.l 19b4e <CstViewBuffer>,8(sp)
    16b6:	|   move.l 19c5a <SysBase>,d0
    16bc:	|   movea.l d0,a6
    16be:	|   movea.l 8(sp),a1
    16c2:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    16c6:	\-> move.l 19b48 <CstCopperList>,d0
    16cc:	/-- beq.s 16e6 <CstFreeBuffer+0x66>
    16ce:	|   move.l 19b48 <CstCopperList>,4(sp)
    16d6:	|   move.l 19c5a <SysBase>,d0
    16dc:	|   movea.l d0,a6
    16de:	|   movea.l 4(sp),a1
    16e2:	|   jsr -690(a6)
}
    16e6:	\-> nop
    16e8:	    movea.l (sp)+,a6
    16ea:	    lea 12(sp),sp
    16ee:	    rts

000016f0 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    16f0:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    16f4:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    16f8:	       tst.l 24(sp)
    16fc:	   /-- bge.s 1702 <drawLine+0x12>
    16fe:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    1702:	   \-> tst.l 28(sp)
    1706:	   /-- bge.s 170c <drawLine+0x1c>
    1708:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    170c:	   \-> tst.l 32(sp)
    1710:	   /-- bge.s 1716 <drawLine+0x26>
    1712:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    1716:	   \-> tst.l 36(sp)
    171a:	   /-- bge.s 1720 <drawLine+0x30>
    171c:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    1720:	   \-> move.l 19cf6 <sceneWidth>,d0
    1726:	       cmp.l 24(sp),d0
    172a:	   /-- bge.s 173a <drawLine+0x4a>
    172c:	   |   move.l 19cf6 <sceneWidth>,d0
    1732:	   |   move.l d0,d1
    1734:	   |   subq.l #1,d1
    1736:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    173a:	   \-> move.l 19cf6 <sceneWidth>,d0
    1740:	       cmp.l 32(sp),d0
    1744:	   /-- bge.s 1754 <drawLine+0x64>
    1746:	   |   move.l 19cf6 <sceneWidth>,d0
    174c:	   |   move.l d0,d1
    174e:	   |   subq.l #1,d1
    1750:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    1754:	   \-> move.l 19cfa <sceneHeight>,d0
    175a:	       cmp.l 28(sp),d0
    175e:	   /-- bge.s 176e <drawLine+0x7e>
    1760:	   |   move.l 19cfa <sceneHeight>,d0
    1766:	   |   move.l d0,d1
    1768:	   |   subq.l #1,d1
    176a:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    176e:	   \-> move.l 19cfa <sceneHeight>,d0
    1774:	       cmp.l 36(sp),d0
    1778:	   /-- bge.s 1788 <drawLine+0x98>
    177a:	   |   move.l 19cfa <sceneHeight>,d0
    1780:	   |   move.l d0,d1
    1782:	   |   subq.l #1,d1
    1784:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    1788:	   \-> move.l 24(sp),d0
    178c:	       cmp.l 32(sp),d0
    1790:	/----- ble.s 17ac <drawLine+0xbc>
		x = x2; 
    1792:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    1798:	|      tst.w 10(sp)
    179c:	|      seq d0
    179e:	|      neg.b d0
    17a0:	|      move.b d0,d0
    17a2:	|      andi.w #255,d0
    17a6:	|      move.w d0,10(sp)
    17aa:	|  /-- bra.s 17b2 <drawLine+0xc2>
	} else x = x1;
    17ac:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    17b2:	   \-> move.l 28(sp),d1
    17b6:	       cmp.l 36(sp),d1
    17ba:	/----- ble.s 17d6 <drawLine+0xe6>
		y = y2; 
    17bc:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    17c2:	|      tst.w 10(sp)
    17c6:	|      seq d0
    17c8:	|      neg.b d0
    17ca:	|      move.b d0,d0
    17cc:	|      andi.w #255,d0
    17d0:	|      move.w d0,10(sp)
    17d4:	|  /-- bra.s 17dc <drawLine+0xec>
	} else y = y1;	
    17d6:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    17dc:	   \-> move.l 32(sp),d0
    17e0:	       sub.l 24(sp),d0
    17e4:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    17e8:	       move.l 6(sp),d0
    17ec:	   /-- bpl.s 17f0 <drawLine+0x100>
    17ee:	   |   neg.l d0
    17f0:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    17f4:	       move.l 36(sp),d1
    17f8:	       sub.l 28(sp),d1
    17fc:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    1800:	       move.l 2(sp),d0
    1804:	   /-- bpl.s 1808 <drawLine+0x118>
    1806:	   |   neg.l d0
    1808:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    180c:	       tst.l 6(sp)
    1810:	   /-- bne.s 1834 <drawLine+0x144>
		diffX = 1;
    1812:	   |   moveq #1,d0
    1814:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    1818:	   |   move.l 19cf6 <sceneWidth>,d0
    181e:	   |   subq.l #1,d0
    1820:	   |   cmp.l 16(sp),d0
    1824:	   +-- bne.s 1834 <drawLine+0x144>
    1826:	   |   move.l 19cf6 <sceneWidth>,d0
    182c:	   |   move.l d0,d1
    182e:	   |   subq.l #2,d1
    1830:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    1834:	   \-> tst.l 2(sp)
    1838:	   /-- bne.s 185c <drawLine+0x16c>
		diffY = 1;
    183a:	   |   moveq #1,d0
    183c:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    1840:	   |   move.l 19cfa <sceneHeight>,d0
    1846:	   |   subq.l #1,d0
    1848:	   |   cmp.l 12(sp),d0
    184c:	   +-- bne.s 185c <drawLine+0x16c>
    184e:	   |   move.l 19cfa <sceneHeight>,d0
    1854:	   |   move.l d0,d1
    1856:	   |   subq.l #2,d1
    1858:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    185c:	   \-> pea 13bdb <PutChar+0x1c7>
    1862:	       jsr 12e08 <KPrintF>
    1868:	       addq.l #4,sp
	
}
    186a:	       nop
    186c:	       lea 20(sp),sp
    1870:	       rts

00001872 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    1872:	                      lea -24(sp),sp
    1876:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    1878:	                      move.l 19b62 <firstTexture>,d0
    187e:	/-------------------- beq.w 195c <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    1882:	|                     clr.l 24(sp)
    1886:	|     /-------------- bra.w 1950 <deleteTextures+0xde>
			BOOL found = FALSE;
    188a:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    188e:	|  |  |               move.l 19b62 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    1896:	|  |  |               movea.l 20(sp),a0
    189a:	|  |  |               move.l (a0),d1
    189c:	|  |  |               move.l 24(sp),d0
    18a0:	|  |  |               add.l d0,d0
    18a2:	|  |  |               add.l d0,d0
    18a4:	|  |  |               movea.l 36(sp),a0
    18a8:	|  |  |               adda.l d0,a0
    18aa:	|  |  |               move.l (a0),d0
    18ac:	|  |  |               cmp.l d1,d0
    18ae:	|  |  |  /----------- bne.w 1942 <deleteTextures+0xd0>
				found = TRUE;
    18b2:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    18b8:	|  |  |  |            movea.l 20(sp),a0
    18bc:	|  |  |  |            move.l 12(a0),d0
    18c0:	|  |  |  |            move.l d0,19b62 <firstTexture>
				FreeVec(list);
    18c6:	|  |  |  |            move.l 20(sp),6(sp)
    18cc:	|  |  |  |            move.l 19c5a <SysBase>,d0
    18d2:	|  |  |  |            movea.l d0,a6
    18d4:	|  |  |  |            movea.l 6(sp),a1
    18d8:	|  |  |  |            jsr -690(a6)
				continue;
    18dc:	|  |  |  |  /-------- bra.s 194c <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    18de:	|  |  |  |  |  /----> movea.l 20(sp),a0
    18e2:	|  |  |  |  |  |      movea.l 12(a0),a0
    18e6:	|  |  |  |  |  |      move.l (a0),d1
    18e8:	|  |  |  |  |  |      move.l 24(sp),d0
    18ec:	|  |  |  |  |  |      add.l d0,d0
    18ee:	|  |  |  |  |  |      add.l d0,d0
    18f0:	|  |  |  |  |  |      movea.l 36(sp),a0
    18f4:	|  |  |  |  |  |      adda.l d0,a0
    18f6:	|  |  |  |  |  |      move.l (a0),d0
    18f8:	|  |  |  |  |  |      cmp.l d1,d0
    18fa:	|  |  |  |  |  |  /-- bne.s 1938 <deleteTextures+0xc6>
					found = TRUE;
    18fc:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    1902:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1906:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    190c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1910:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    1914:	|  |  |  |  |  |  |   move.l 12(a0),d0
    1918:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    191c:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    1920:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    1926:	|  |  |  |  |  |  |   move.l 19c5a <SysBase>,d0
    192c:	|  |  |  |  |  |  |   movea.l d0,a6
    192e:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    1932:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    1936:	|  |  |  |  +--|--|-- bra.s 194c <deleteTextures+0xda>
				}
				list = list->next;
    1938:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    193c:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    1942:	|  |  |  \--|--|----> movea.l 20(sp),a0
    1946:	|  |  |     |  |      move.l 12(a0),d0
    194a:	|  |  |     |  \----- bne.s 18de <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    194c:	|  |  |     \-------> addq.l #1,24(sp)
    1950:	|  |  \-------------> move.l 24(sp),d0
    1954:	|  |                  cmp.l 32(sp),d0
    1958:	|  \----------------- bcs.w 188a <deleteTextures+0x18>
			}
		}
	}
}
    195c:	\-------------------> nop
    195e:	                      movea.l (sp)+,a6
    1960:	                      lea 24(sp),sp
    1964:	                      rts

00001966 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    1966:	subq.l #4,sp
    1968:	move.l 8(sp),d0
    196c:	move.w d0,d0
    196e:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1972:	pea 13bfe <PutChar+0x1ea>
    1978:	jsr 12e08 <KPrintF>
    197e:	addq.l #4,sp
}
    1980:	nop
    1982:	addq.l #4,sp
    1984:	rts

00001986 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    1986:	       moveq #-1,d0
    1988:	       cmp.l 4(sp),d0
    198c:	   /-- bne.s 1992 <resourceNameFromNum+0xc>
    198e:	   |   moveq #0,d0
    1990:	/--|-- bra.s 19ca <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1992:	|  \-> move.l 19c36 <numResourceNames>,d0
    1998:	|  /-- bne.s 19a2 <resourceNameFromNum+0x1c>
    199a:	|  |   move.l #80942,d0
    19a0:	+--|-- bra.s 19ca <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    19a2:	|  \-> move.l 19c36 <numResourceNames>,d0
    19a8:	|      cmp.l 4(sp),d0
    19ac:	|  /-- ble.s 19c4 <resourceNameFromNum+0x3e>
    19ae:	|  |   move.l 19bf2 <allResourceNames>,d1
    19b4:	|  |   move.l 4(sp),d0
    19b8:	|  |   add.l d0,d0
    19ba:	|  |   add.l d0,d0
    19bc:	|  |   movea.l d1,a0
    19be:	|  |   adda.l d0,a0
    19c0:	|  |   move.l (a0),d0
    19c2:	+--|-- bra.s 19ca <resourceNameFromNum+0x44>
	return "Unknown resource";
    19c4:	|  \-> move.l #80951,d0
    19ca:	\----> rts

000019cc <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    19cc:	          lea -40(sp),sp
    19d0:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    19d4:	          move.l #320,19b5a <winWidth>
    winHeight = 256;
    19de:	          move.l #256,19b5e <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    19e8:	          tst.l 56(sp)
    19ec:	      /-- bne.s 1a04 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    19ee:	      |   pea 13c48 <PutChar+0x234>
    19f4:	      |   jsr b8 <copyString>
    19fa:	      |   addq.l #4,sp
    19fc:	      |   move.l d0,19b72 <bundleFolder>
    1a02:	   /--|-- bra.s 1a1a <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    1a04:	   |  \-> movea.l 60(sp),a0
    1a08:	   |      move.l (a0),d0
    1a0a:	   |      move.l d0,-(sp)
    1a0c:	   |      jsr b8 <copyString>
    1a12:	   |      addq.l #4,sp
    1a14:	   |      move.l d0,19b72 <bundleFolder>
	}
    
	int lastSlash = -1;
    1a1a:	   \----> moveq #-1,d0
    1a1c:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1a20:	          clr.l 40(sp)
    1a24:	   /----- bra.s 1a46 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    1a26:	/--|----> move.l 19b72 <bundleFolder>,d1
    1a2c:	|  |      move.l 40(sp),d0
    1a30:	|  |      movea.l d1,a0
    1a32:	|  |      adda.l d0,a0
    1a34:	|  |      move.b (a0),d0
    1a36:	|  |      cmpi.b #47,d0
    1a3a:	|  |  /-- bne.s 1a42 <main_sludge+0x76>
    1a3c:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1a42:	|  |  \-> addq.l #1,40(sp)
    1a46:	|  \----> move.l 19b72 <bundleFolder>,d1
    1a4c:	|         move.l 40(sp),d0
    1a50:	|         movea.l d1,a0
    1a52:	|         adda.l d0,a0
    1a54:	|         move.b (a0),d0
    1a56:	\-------- bne.s 1a26 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    1a58:	          move.l 19b72 <bundleFolder>,d0
    1a5e:	          move.l 44(sp),d1
    1a62:	          addq.l #1,d1
    1a64:	          movea.l d0,a0
    1a66:	          adda.l d1,a0
    1a68:	          clr.b (a0)

	if (argc > 1) {
    1a6a:	          moveq #1,d0
    1a6c:	          cmp.l 56(sp),d0
    1a70:	      /-- bge.s 1a8c <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1a72:	      |   move.l 56(sp),d0
    1a76:	      |   addi.l #1073741823,d0
    1a7c:	      |   add.l d0,d0
    1a7e:	      |   add.l d0,d0
    1a80:	      |   movea.l 60(sp),a0
    1a84:	      |   adda.l d0,a0
    1a86:	      |   move.l (a0),48(sp)
    1a8a:	   /--|-- bra.s 1ae6 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1a8c:	   |  \-> move.l 19b72 <bundleFolder>,d0
    1a92:	   |      pea 13c4e <PutChar+0x23a>
    1a98:	   |      move.l d0,-(sp)
    1a9a:	   |      jsr 102e0 <joinStrings>
    1aa0:	   |      addq.l #8,sp
    1aa2:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    1aa6:	   |      move.l 48(sp),-(sp)
    1aaa:	   |      jsr 101f6 <fileExists>
    1ab0:	   |      addq.l #4,sp
    1ab2:	   |      tst.b d0
    1ab4:	   +----- bne.s 1ae6 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    1ab6:	   |      move.l 48(sp),36(sp)
    1abc:	   |      move.l 19c5a <SysBase>,d0
    1ac2:	   |      movea.l d0,a6
    1ac4:	   |      movea.l 36(sp),a1
    1ac8:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    1acc:	   |      move.l 19b72 <bundleFolder>,d0
    1ad2:	   |      pea 13c5b <PutChar+0x247>
    1ad8:	   |      move.l d0,-(sp)
    1ada:	   |      jsr 102e0 <joinStrings>
    1ae0:	   |      addq.l #8,sp
    1ae2:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    1ae6:	   \----> move.l 48(sp),-(sp)
    1aea:	          jsr 101f6 <fileExists>
    1af0:	          addq.l #4,sp
    1af2:	          tst.b d0
    1af4:	      /-- bne.s 1b3e <main_sludge+0x172>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    1af6:	      |   move.l 19c62 <DOSBase>,d0
    1afc:	      |   movea.l d0,a6
    1afe:	      |   jsr -60(a6)
    1b02:	      |   move.l d0,28(sp)
    1b06:	      |   move.l 28(sp),d0
    1b0a:	      |   move.l d0,24(sp)
    1b0e:	      |   move.l #80996,20(sp)
    1b16:	      |   moveq #21,d0
    1b18:	      |   move.l d0,16(sp)
    1b1c:	      |   move.l 19c62 <DOSBase>,d0
    1b22:	      |   movea.l d0,a6
    1b24:	      |   move.l 24(sp),d1
    1b28:	      |   move.l 20(sp),d2
    1b2c:	      |   move.l 16(sp),d3
    1b30:	      |   jsr -48(a6)
    1b34:	      |   move.l d0,12(sp)
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    1b38:	      |   moveq #0,d0
    1b3a:	/-----|-- bra.w 1c9a <main_sludge+0x2ce>
	}

	setGameFilePath (sludgeFile);	
    1b3e:	|     \-> move.l 48(sp),-(sp)
    1b42:	|         jsr 1ca4 <setGameFilePath>
    1b48:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    1b4a:	|         move.l 48(sp),-(sp)
    1b4e:	|         jsr 3530 <initSludge>
    1b54:	|         addq.l #4,sp
    1b56:	|         tst.w d0
    1b58:	|     /-- bne.s 1b60 <main_sludge+0x194>
    1b5a:	|     |   moveq #0,d0
    1b5c:	+-----|-- bra.w 1c9a <main_sludge+0x2ce>
	
	if( winWidth != 320 || winHeight != 256) {
    1b60:	|     \-> move.l 19b5a <winWidth>,d0
    1b66:	|         cmpi.l #320,d0
    1b6c:	|     /-- bne.s 1b7c <main_sludge+0x1b0>
    1b6e:	|     |   move.l 19b5e <winHeight>,d0
    1b74:	|     |   cmpi.l #256,d0
    1b7a:	|  /--|-- beq.s 1b9e <main_sludge+0x1d2>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    1b7c:	|  |  \-> pea 13c7a <PutChar+0x266>
    1b82:	|  |      jsr 12e08 <KPrintF>
    1b88:	|  |      addq.l #4,sp
		winWidth = 320;
    1b8a:	|  |      move.l #320,19b5a <winWidth>
		winHeight = 256;
    1b94:	|  |      move.l #256,19b5e <winHeight>
	}

	if (! resizeBackdrop (winWidth, winHeight)) {
    1b9e:	|  \----> move.l 19b5e <winHeight>,d0
    1ba4:	|         move.l d0,d1
    1ba6:	|         move.l 19b5a <winWidth>,d0
    1bac:	|         move.l d1,-(sp)
    1bae:	|         move.l d0,-(sp)
    1bb0:	|         jsr 9af2 <resizeBackdrop>
    1bb6:	|         addq.l #8,sp
    1bb8:	|         tst.w d0
    1bba:	|     /-- bne.s 1bd0 <main_sludge+0x204>
		KPrintF("Couldn't allocate memory for backdrop");
    1bbc:	|     |   pea 13cf7 <PutChar+0x2e3>
    1bc2:	|     |   jsr 12e08 <KPrintF>
    1bc8:	|     |   addq.l #4,sp
		return FALSE;
    1bca:	|     |   moveq #0,d0
    1bcc:	+-----|-- bra.w 1c9a <main_sludge+0x2ce>
	}

	if (! initPeople ())
    1bd0:	|     \-> jsr 7282 <initPeople>
    1bd6:	|         tst.w d0
    1bd8:	|     /-- bne.s 1bee <main_sludge+0x222>
	{
		KPrintF("Couldn't initialise people stuff");
    1bda:	|     |   pea 13d1d <PutChar+0x309>
    1be0:	|     |   jsr 12e08 <KPrintF>
    1be6:	|     |   addq.l #4,sp
		return FALSE;
    1be8:	|     |   moveq #0,d0
    1bea:	+-----|-- bra.w 1c9a <main_sludge+0x2ce>
	}

	if (! initFloor ())
    1bee:	|     \-> jsr 121b2 <initFloor>
    1bf4:	|         tst.w d0
    1bf6:	|     /-- bne.s 1c0c <main_sludge+0x240>
	{
		KPrintF("Couldn't initialise floor stuff");
    1bf8:	|     |   pea 13d3e <PutChar+0x32a>
    1bfe:	|     |   jsr 12e08 <KPrintF>
    1c04:	|     |   addq.l #4,sp
		
		return FALSE;
    1c06:	|     |   moveq #0,d0
    1c08:	+-----|-- bra.w 1c9a <main_sludge+0x2ce>
	}

	if (! initObjectTypes ())
    1c0c:	|     \-> jsr 9ca0 <initObjectTypes>
    1c12:	|         tst.w d0
    1c14:	|     /-- bne.s 1c28 <main_sludge+0x25c>
	{
		KPrintF("Couldn't initialise object type stuff");
    1c16:	|     |   pea 13d5e <PutChar+0x34a>
    1c1c:	|     |   jsr 12e08 <KPrintF>
    1c22:	|     |   addq.l #4,sp
		return FALSE;
    1c24:	|     |   moveq #0,d0
    1c26:	+-----|-- bra.s 1c9a <main_sludge+0x2ce>
	}

	initSpeech ();
    1c28:	|     \-> jsr 58ce <initSpeech>
	initStatusBar ();
    1c2e:	|         jsr 5392 <initStatusBar>

	gameName = getNumberedString(1);
    1c34:	|         pea 1 <_start+0x1>
    1c38:	|         jsr 46d0 <getNumberedString>
    1c3e:	|         addq.l #4,sp
    1c40:	|         move.l d0,19b6a <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    1c46:	|         move.l 19c2a <noStack>,d0
    1c4c:	|         pea 1 <_start+0x1>
    1c50:	|         move.l d0,-(sp)
    1c52:	|         clr.l -(sp)
    1c54:	|         clr.l -(sp)
    1c56:	|         clr.l -(sp)
    1c58:	|         jsr 4558 <startNewFunctionNum>
    1c5e:	|         lea 20(sp),sp

	weAreDoneSoQuit = 0;
    1c62:	|         clr.l 19b76 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {		
    1c68:	|     /-- bra.s 1c7c <main_sludge+0x2b0>
		handleInput();
    1c6a:	|  /--|-> jsr 3528 <handleInput>
		sludgeDisplay ();
    1c70:	|  |  |   jsr 450a <sludgeDisplay>
		WaitVbl();
    1c76:	|  |  |   jsr 12d30 <WaitVbl>
	while ( !weAreDoneSoQuit ) {		
    1c7c:	|  |  \-> move.l 19b76 <weAreDoneSoQuit>,d0
    1c82:	|  \----- beq.s 1c6a <main_sludge+0x29e>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    1c84:	|         move.l 48(sp),32(sp)
    1c8a:	|         move.l 19c5a <SysBase>,d0
    1c90:	|         movea.l d0,a6
    1c92:	|         movea.l 32(sp),a1
    1c96:	|         jsr -690(a6)
}
    1c9a:	\-------> movem.l (sp)+,d2-d3/a6
    1c9e:	          lea 40(sp),sp
    1ca2:	          rts

00001ca4 <setGameFilePath>:

void setGameFilePath (char * f) {
    1ca4:	          lea -1104(sp),sp
    1ca8:	          move.l a6,-(sp)
    1caa:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    1cac:	          move.l #1112,d0
    1cb2:	          add.l sp,d0
    1cb4:	          addi.l #-1102,d0
    1cba:	          move.l d0,1100(sp)
    1cbe:	          move.l #998,1096(sp)
    1cc6:	          move.l 19c62 <DOSBase>,d0
    1ccc:	          movea.l d0,a6
    1cce:	          move.l 1100(sp),d1
    1cd2:	          move.l 1096(sp),d2
    1cd6:	          jsr -564(a6)
    1cda:	          move.w d0,1094(sp)
    1cde:	          move.w 1094(sp),d0
    1ce2:	      /-- bne.s 1cf2 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    1ce4:	      |   pea 13d84 <PutChar+0x370>
    1cea:	      |   jsr 12e08 <KPrintF>
    1cf0:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    1cf2:	      \-> moveq #-1,d0
    1cf4:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    1cf8:	          clr.l 1104(sp)
    1cfc:	   /----- bra.s 1d1a <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    1cfe:	/--|----> move.l 1104(sp),d0
    1d02:	|  |      movea.l 1116(sp),a0
    1d06:	|  |      adda.l d0,a0
    1d08:	|  |      move.b (a0),d0
    1d0a:	|  |      cmpi.b #47,d0
    1d0e:	|  |  /-- bne.s 1d16 <setGameFilePath+0x72>
    1d10:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    1d16:	|  |  \-> addq.l #1,1104(sp)
    1d1a:	|  \----> move.l 1104(sp),d0
    1d1e:	|         movea.l 1116(sp),a0
    1d22:	|         adda.l d0,a0
    1d24:	|         move.b (a0),d0
    1d26:	\-------- bne.s 1cfe <setGameFilePath+0x5a>
	}

	if (got != -1) {
    1d28:	          moveq #-1,d0
    1d2a:	          cmp.l 1108(sp),d0
    1d2e:	   /----- beq.s 1da8 <setGameFilePath+0x104>
		f[got] = 0;	
    1d30:	   |      move.l 1108(sp),d0
    1d34:	   |      movea.l 1116(sp),a0
    1d38:	   |      adda.l d0,a0
    1d3a:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    1d3c:	   |      move.l 1116(sp),1090(sp)
    1d42:	   |      moveq #-2,d0
    1d44:	   |      move.l d0,1086(sp)
    1d48:	   |      move.l 19c62 <DOSBase>,d0
    1d4e:	   |      movea.l d0,a6
    1d50:	   |      move.l 1090(sp),d1
    1d54:	   |      move.l 1086(sp),d2
    1d58:	   |      jsr -84(a6)
    1d5c:	   |      move.l d0,1082(sp)
    1d60:	   |      move.l 1082(sp),d0
    1d64:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    1d68:	   |      move.l 1078(sp),1074(sp)
    1d6e:	   |      move.l 19c62 <DOSBase>,d0
    1d74:	   |      movea.l d0,a6
    1d76:	   |      move.l 1074(sp),d1
    1d7a:	   |      jsr -126(a6)
    1d7e:	   |      move.l d0,1070(sp)
    1d82:	   |      move.l 1070(sp),d0
    1d86:	   |  /-- bne.s 1d9a <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    1d88:	   |  |   move.l 1116(sp),-(sp)
    1d8c:	   |  |   pea 13daa <PutChar+0x396>
    1d92:	   |  |   jsr 12e08 <KPrintF>
    1d98:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    1d9a:	   |  \-> move.l 1108(sp),d0
    1d9e:	   |      movea.l 1116(sp),a0
    1da2:	   |      adda.l d0,a0
    1da4:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    1da8:	   \----> move.l #400,1066(sp)
    1db0:	          clr.l 1062(sp)
    1db4:	          move.l 19c5a <SysBase>,d0
    1dba:	          movea.l d0,a6
    1dbc:	          move.l 1066(sp),d0
    1dc0:	          move.l 1062(sp),d1
    1dc4:	          jsr -684(a6)
    1dc8:	          move.l d0,1058(sp)
    1dcc:	          move.l 1058(sp),d0
    1dd0:	          move.l d0,19b6e <gamePath>
	if (gamePath==0) {
    1dd6:	          move.l 19b6e <gamePath>,d0
    1ddc:	      /-- bne.s 1df0 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    1dde:	      |   pea 13ddd <PutChar+0x3c9>
    1de4:	      |   jsr 12e08 <KPrintF>
    1dea:	      |   addq.l #4,sp
    1dec:	   /--|-- bra.w 1ed8 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    1df0:	   |  \-> move.l 19b6e <gamePath>,1054(sp)
    1df8:	   |      moveq #-2,d0
    1dfa:	   |      move.l d0,1050(sp)
    1dfe:	   |      move.l 19c62 <DOSBase>,d0
    1e04:	   |      movea.l d0,a6
    1e06:	   |      move.l 1054(sp),d1
    1e0a:	   |      move.l 1050(sp),d2
    1e0e:	   |      jsr -84(a6)
    1e12:	   |      move.l d0,1046(sp)
    1e16:	   |      move.l 1046(sp),d0
    1e1a:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    1e1e:	   |      move.l 1042(sp),1038(sp)
    1e24:	   |      move.l 19c62 <DOSBase>,d0
    1e2a:	   |      movea.l d0,a6
    1e2c:	   |      move.l 1038(sp),d1
    1e30:	   |      jsr -126(a6)
    1e34:	   |      move.l d0,1034(sp)
    1e38:	   |      move.l 1034(sp),d0
    1e3c:	   |  /-- bne.s 1e4c <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    1e3e:	   |  |   pea 13e18 <PutChar+0x404>
    1e44:	   |  |   jsr 12e08 <KPrintF>
    1e4a:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    1e4c:	   |  \-> move.l #1112,d0
    1e52:	   |      add.l sp,d0
    1e54:	   |      addi.l #-1102,d0
    1e5a:	   |      move.l d0,1030(sp)
    1e5e:	   |      moveq #-2,d0
    1e60:	   |      move.l d0,1026(sp)
    1e64:	   |      move.l 19c62 <DOSBase>,d0
    1e6a:	   |      movea.l d0,a6
    1e6c:	   |      move.l 1030(sp),d1
    1e70:	   |      move.l 1026(sp),d2
    1e74:	   |      jsr -84(a6)
    1e78:	   |      move.l d0,1022(sp)
    1e7c:	   |      move.l 1022(sp),d0
    1e80:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    1e84:	   |      move.l 1042(sp),1018(sp)
    1e8a:	   |      move.l 19c62 <DOSBase>,d0
    1e90:	   |      movea.l d0,a6
    1e92:	   |      move.l 1018(sp),d1
    1e96:	   |      jsr -126(a6)
    1e9a:	   |      move.l d0,1014(sp)
    1e9e:	   |      move.l 1014(sp),d0
    1ea2:	   |  /-- bne.s 1eb8 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    1ea4:	   |  |   moveq #10,d0
    1ea6:	   |  |   add.l sp,d0
    1ea8:	   |  |   move.l d0,-(sp)
    1eaa:	   |  |   pea 13e44 <PutChar+0x430>
    1eb0:	   |  |   jsr 12e08 <KPrintF>
    1eb6:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    1eb8:	   |  \-> move.l 19b6e <gamePath>,d0
    1ebe:	   +----- beq.s 1ed8 <setGameFilePath+0x234>
    1ec0:	   |      move.l 19b6e <gamePath>,1010(sp)
    1ec8:	   |      move.l 19c5a <SysBase>,d0
    1ece:	   |      movea.l d0,a6
    1ed0:	   |      movea.l 1010(sp),a1
    1ed4:	   |      jsr -690(a6)
}
    1ed8:	   \----> move.l (sp)+,d2
    1eda:	          movea.l (sp)+,a6
    1edc:	          lea 1104(sp),sp
    1ee0:	          rts

00001ee2 <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    1ee2:	    subq.l #4,sp
    1ee4:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    1ee6:	    move.l 19bca <zBuffer+0x50>,d0
    1eec:	/-- beq.s 1f24 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    1eee:	|   pea 19bce <zBuffer+0x54>
    1ef4:	|   pea 1 <_start+0x1>
    1ef8:	|   jsr 1872 <deleteTextures>
    1efe:	|   addq.l #8,sp
		zBuffer.texName = 0;
    1f00:	|   clr.l 19bce <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    1f06:	|   move.l 19bca <zBuffer+0x50>,4(sp)
    1f0e:	|   move.l 19c5a <SysBase>,d0
    1f14:	|   movea.l d0,a6
    1f16:	|   movea.l 4(sp),a1
    1f1a:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    1f1e:	|   clr.l 19bca <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    1f24:	\-> clr.l 19b82 <zBuffer+0x8>
	zBuffer.originalNum =0;
    1f2a:	    clr.l 19bc6 <zBuffer+0x4c>
}
    1f30:	    nop
    1f32:	    movea.l (sp)+,a6
    1f34:	    addq.l #4,sp
    1f36:	    rts

00001f38 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    1f38:	                         lea -528(sp),sp
    1f3c:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    1f40:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    1f44:	                         jsr 1ee2 <killZBuffer>

	zBuffer.originalNum = y;
    1f4a:	                         move.l 544(sp),d0
    1f4e:	                         move.l d0,19bc6 <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    1f54:	                         move.l 544(sp),d0
    1f58:	                         move.l d0,-(sp)
    1f5a:	                         jsr 47ce <openFileFromNum>
    1f60:	                         addq.l #4,sp
    1f62:	                         tst.l d0
    1f64:	                     /-- bne.s 1f6c <setZBuffer+0x34>
    1f66:	                     |   clr.w d0
    1f68:	/--------------------|-- bra.w 234a <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    1f6c:	|                    \-> move.l 19c42 <bigDataFile>,524(sp)
    1f74:	|                        move.l 19c62 <DOSBase>,d0
    1f7a:	|                        movea.l d0,a6
    1f7c:	|                        move.l 524(sp),d1
    1f80:	|                        jsr -306(a6)
    1f84:	|                        move.l d0,520(sp)
    1f88:	|                        move.l 520(sp),d0
    1f8c:	|                        moveq #83,d1
    1f8e:	|                        cmp.l d0,d1
    1f90:	|                    /-- beq.s 1ff2 <setZBuffer+0xba>
    1f92:	|                    |   move.l 19c42 <bigDataFile>,516(sp)
    1f9a:	|                    |   move.l 19c62 <DOSBase>,d0
    1fa0:	|                    |   movea.l d0,a6
    1fa2:	|                    |   move.l 516(sp),d1
    1fa6:	|                    |   jsr -306(a6)
    1faa:	|                    |   move.l d0,512(sp)
    1fae:	|                    |   move.l 512(sp),d0
    1fb2:	|                    |   moveq #122,d1
    1fb4:	|                    |   cmp.l d0,d1
    1fb6:	|                    +-- beq.s 1ff2 <setZBuffer+0xba>
    1fb8:	|                    |   move.l 19c42 <bigDataFile>,508(sp)
    1fc0:	|                    |   move.l 19c62 <DOSBase>,d0
    1fc6:	|                    |   movea.l d0,a6
    1fc8:	|                    |   move.l 508(sp),d1
    1fcc:	|                    |   jsr -306(a6)
    1fd0:	|                    |   move.l d0,504(sp)
    1fd4:	|                    |   move.l 504(sp),d0
    1fd8:	|                    |   moveq #98,d1
    1fda:	|                    |   cmp.l d0,d1
    1fdc:	|                    +-- beq.s 1ff2 <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    1fde:	|                    |   pea 13e76 <PutChar+0x462>
    1fe4:	|                    |   jsr 12e08 <KPrintF>
    1fea:	|                    |   addq.l #4,sp
		 return FALSE;
    1fec:	|                    |   clr.w d0
    1fee:	+--------------------|-- bra.w 234a <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    1ff2:	|                    \-> move.l 19c42 <bigDataFile>,500(sp)
    1ffa:	|                        move.l 19c62 <DOSBase>,d0
    2000:	|                        movea.l d0,a6
    2002:	|                        move.l 500(sp),d1
    2006:	|                        jsr -306(a6)
    200a:	|                        move.l d0,496(sp)
    200e:	|                        move.l 496(sp),d0
    2012:	|                    /-- beq.s 201c <setZBuffer+0xe4>
    2014:	|                    |   moveq #1,d1
    2016:	|                    |   cmp.l d0,d1
    2018:	|                 /--|-- beq.s 2032 <setZBuffer+0xfa>
    201a:	|              /--|--|-- bra.s 2060 <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    201c:	|              |  |  \-> move.l #640,19b7a <zBuffer>
		zBuffer.height = 480;
    2026:	|              |  |      move.l #480,19b7e <zBuffer+0x4>
		break;
    2030:	|              |  |  /-- bra.s 2074 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    2032:	|              |  \--|-> move.l 19c42 <bigDataFile>,d0
    2038:	|              |     |   move.l d0,-(sp)
    203a:	|              |     |   jsr 6bc <get2bytes>
    2040:	|              |     |   addq.l #4,sp
    2042:	|              |     |   move.l d0,19b7a <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    2048:	|              |     |   move.l 19c42 <bigDataFile>,d0
    204e:	|              |     |   move.l d0,-(sp)
    2050:	|              |     |   jsr 6bc <get2bytes>
    2056:	|              |     |   addq.l #4,sp
    2058:	|              |     |   move.l d0,19b7e <zBuffer+0x4>
		break;
    205e:	|              |     +-- bra.s 2074 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    2060:	|              \-----|-> pea 13e8a <PutChar+0x476>
    2066:	|                    |   jsr 12e08 <KPrintF>
    206c:	|                    |   addq.l #4,sp
		return FALSE;
    206e:	|                    |   clr.w d0
    2070:	+--------------------|-- bra.w 234a <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    2074:	|                    \-> move.l 19b7a <zBuffer>,d0
    207a:	|                        move.l d0,d1
    207c:	|                        move.l 19cf6 <sceneWidth>,d0
    2082:	|                        cmp.l d1,d0
    2084:	|                    /-- bne.s 2098 <setZBuffer+0x160>
    2086:	|                    |   move.l 19b7e <zBuffer+0x4>,d0
    208c:	|                    |   move.l d0,d1
    208e:	|                    |   move.l 19cfa <sceneHeight>,d0
    2094:	|                    |   cmp.l d1,d0
    2096:	|                 /--|-- beq.s 20e8 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    2098:	|                 |  \-> movea.l 19cfa <sceneHeight>,a1
    209e:	|                 |      movea.l 19cf6 <sceneWidth>,a0
    20a4:	|                 |      move.l 19b7e <zBuffer+0x4>,d1
    20aa:	|                 |      move.l 19b7a <zBuffer>,d0
    20b0:	|                 |      move.l a1,-(sp)
    20b2:	|                 |      move.l a0,-(sp)
    20b4:	|                 |      move.l d1,-(sp)
    20b6:	|                 |      move.l d0,-(sp)
    20b8:	|                 |      pea 13ed6 <PutChar+0x4c2>
    20be:	|                 |      moveq #32,d0
    20c0:	|                 |      add.l sp,d0
    20c2:	|                 |      move.l d0,-(sp)
    20c4:	|                 |      jsr 105be <sprintf>
    20ca:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    20ce:	|                 |      moveq #12,d0
    20d0:	|                 |      add.l sp,d0
    20d2:	|                 |      move.l d0,-(sp)
    20d4:	|                 |      pea 13ef1 <PutChar+0x4dd>
    20da:	|                 |      jsr 12e08 <KPrintF>
    20e0:	|                 |      addq.l #8,sp
		return FALSE;
    20e2:	|                 |      clr.w d0
    20e4:	+-----------------|----- bra.w 234a <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    20e8:	|                 \----> move.l 19c42 <bigDataFile>,492(sp)
    20f0:	|                        move.l 19c62 <DOSBase>,d0
    20f6:	|                        movea.l d0,a6
    20f8:	|                        move.l 492(sp),d1
    20fc:	|                        jsr -306(a6)
    2100:	|                        move.l d0,488(sp)
    2104:	|                        move.l 488(sp),d0
    2108:	|                        move.l d0,19b82 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    210e:	|                        clr.l 544(sp)
    2112:	|                    /-- bra.s 213e <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    2114:	|                 /--|-> move.l 19c42 <bigDataFile>,d0
    211a:	|                 |  |   move.l d0,-(sp)
    211c:	|                 |  |   jsr 6bc <get2bytes>
    2122:	|                 |  |   addq.l #4,sp
    2124:	|                 |  |   move.l 544(sp),d1
    2128:	|                 |  |   add.l d1,d1
    212a:	|                 |  |   add.l d1,d1
    212c:	|                 |  |   lea 540(sp),a0
    2130:	|                 |  |   add.l a0,d1
    2132:	|                 |  |   movea.l d1,a0
    2134:	|                 |  |   lea -144(a0),a0
    2138:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    213a:	|                 |  |   addq.l #1,544(sp)
    213e:	|                 |  \-> move.l 19b82 <zBuffer+0x8>,d0
    2144:	|                 |      cmp.l 544(sp),d0
    2148:	|                 \----- bhi.s 2114 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    214a:	|                        move.l 19b82 <zBuffer+0x8>,d0
    2150:	|                        move.l d0,-(sp)
    2152:	|                        move.l sp,d0
    2154:	|                        addi.l #336,d0
    215a:	|                        move.l d0,-(sp)
    215c:	|                        move.l sp,d0
    215e:	|                        addi.l #404,d0
    2164:	|                        move.l d0,-(sp)
    2166:	|                        jsr 2354 <sortZPal>
    216c:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    2170:	|                        clr.l 544(sp)
    2174:	|                    /-- bra.s 21ec <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    2176:	|                 /--|-> move.l 544(sp),d0
    217a:	|                 |  |   add.l d0,d0
    217c:	|                 |  |   add.l d0,d0
    217e:	|                 |  |   move.l #540,d1
    2184:	|                 |  |   add.l sp,d1
    2186:	|                 |  |   add.l d1,d0
    2188:	|                 |  |   movea.l d0,a0
    218a:	|                 |  |   lea -208(a0),a0
    218e:	|                 |  |   move.l (a0),d0
    2190:	|                 |  |   add.l d0,d0
    2192:	|                 |  |   add.l d0,d0
    2194:	|                 |  |   lea 540(sp),a0
    2198:	|                 |  |   add.l a0,d0
    219a:	|                 |  |   movea.l d0,a0
    219c:	|                 |  |   lea -144(a0),a0
    21a0:	|                 |  |   move.l (a0),d0
    21a2:	|                 |  |   move.l 544(sp),d1
    21a6:	|                 |  |   addq.l #3,d1
    21a8:	|                 |  |   add.l d1,d1
    21aa:	|                 |  |   movea.l d1,a1
    21ac:	|                 |  |   adda.l d1,a1
    21ae:	|                 |  |   lea 19b7a <zBuffer>,a0
    21b4:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    21b8:	|                 |  |   move.l 544(sp),d0
    21bc:	|                 |  |   add.l d0,d0
    21be:	|                 |  |   add.l d0,d0
    21c0:	|                 |  |   move.l #540,d1
    21c6:	|                 |  |   add.l sp,d1
    21c8:	|                 |  |   add.l d1,d0
    21ca:	|                 |  |   movea.l d0,a0
    21cc:	|                 |  |   lea -208(a0),a0
    21d0:	|                 |  |   move.l (a0),d1
    21d2:	|                 |  |   move.l 544(sp),d0
    21d6:	|                 |  |   add.l d1,d1
    21d8:	|                 |  |   add.l d1,d1
    21da:	|                 |  |   lea 540(sp),a0
    21de:	|                 |  |   add.l a0,d1
    21e0:	|                 |  |   movea.l d1,a0
    21e2:	|                 |  |   lea -272(a0),a0
    21e6:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    21e8:	|                 |  |   addq.l #1,544(sp)
    21ec:	|                 |  \-> move.l 19b82 <zBuffer+0x8>,d0
    21f2:	|                 |      cmp.l 544(sp),d0
    21f6:	|                 \----- bhi.w 2176 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    21fa:	|                        move.l 19cf6 <sceneWidth>,d0
    2200:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    2204:	|                        move.l 19cfa <sceneHeight>,d0
    220a:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    220e:	|                        move.l 484(sp),-(sp)
    2212:	|                        move.l 484(sp),-(sp)
    2216:	|                        jsr 138fe <__mulsi3>
    221c:	|                        addq.l #8,sp
    221e:	|                        move.l d0,476(sp)
    2222:	|                        clr.l 472(sp)
    2226:	|                        move.l 19c5a <SysBase>,d0
    222c:	|                        movea.l d0,a6
    222e:	|                        move.l 476(sp),d0
    2232:	|                        move.l 472(sp),d1
    2236:	|                        jsr -684(a6)
    223a:	|                        move.l d0,468(sp)
    223e:	|                        move.l 468(sp),d0
    2242:	|                        move.l d0,19bca <zBuffer+0x50>
	if (!zBuffer.tex) {
    2248:	|                        move.l 19bca <zBuffer+0x50>,d0
    224e:	|                    /-- bne.s 2264 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    2250:	|                    |   pea 13f2e <PutChar+0x51a>
    2256:	|                    |   jsr 12e08 <KPrintF>
    225c:	|                    |   addq.l #4,sp
		return FALSE;
    225e:	|                    |   clr.w d0
    2260:	+--------------------|-- bra.w 234a <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    2264:	|                    \-> clr.l 544(sp)
    2268:	|     /----------------- bra.w 2334 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    226c:	|  /--|----------------> clr.l 536(sp)
    2270:	|  |  |     /----------- bra.w 2320 <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    2274:	|  |  |  /--|----------> tst.l 528(sp)
    2278:	|  |  |  |  |  /-------- bne.s 22d6 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    227a:	|  |  |  |  |  |         move.l 19c42 <bigDataFile>,464(sp)
    2282:	|  |  |  |  |  |         move.l 19c62 <DOSBase>,d0
    2288:	|  |  |  |  |  |         movea.l d0,a6
    228a:	|  |  |  |  |  |         move.l 464(sp),d1
    228e:	|  |  |  |  |  |         jsr -306(a6)
    2292:	|  |  |  |  |  |         move.l d0,460(sp)
    2296:	|  |  |  |  |  |         move.l 460(sp),d0
    229a:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    229e:	|  |  |  |  |  |         move.l 532(sp),d0
    22a2:	|  |  |  |  |  |         asr.l #4,d0
    22a4:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    22a8:	|  |  |  |  |  |         moveq #15,d0
    22aa:	|  |  |  |  |  |         cmp.l 528(sp),d0
    22ae:	|  |  |  |  |  |  /----- bne.s 22cc <setZBuffer+0x394>
    22b0:	|  |  |  |  |  |  |      move.l 19c42 <bigDataFile>,d0
    22b6:	|  |  |  |  |  |  |      move.l d0,-(sp)
    22b8:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    22be:	|  |  |  |  |  |  |      addq.l #4,sp
    22c0:	|  |  |  |  |  |  |      movea.l d0,a0
    22c2:	|  |  |  |  |  |  |      lea 16(a0),a0
    22c6:	|  |  |  |  |  |  |      move.l a0,528(sp)
    22ca:	|  |  |  |  |  |  |  /-- bra.s 22d0 <setZBuffer+0x398>
				else stillToGo ++;
    22cc:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    22d0:	|  |  |  |  |  |     \-> moveq #15,d1
    22d2:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    22d6:	|  |  |  |  |  \-------> move.l 532(sp),d0
    22da:	|  |  |  |  |            add.l d0,d0
    22dc:	|  |  |  |  |            add.l d0,d0
    22de:	|  |  |  |  |            lea 540(sp),a0
    22e2:	|  |  |  |  |            add.l a0,d0
    22e4:	|  |  |  |  |            movea.l d0,a0
    22e6:	|  |  |  |  |            lea -272(a0),a0
    22ea:	|  |  |  |  |            move.l (a0),d0
    22ec:	|  |  |  |  |            move.l d0,d2
    22ee:	|  |  |  |  |            move.l 19bca <zBuffer+0x50>,d3
    22f4:	|  |  |  |  |            move.l 484(sp),d0
    22f8:	|  |  |  |  |            move.l 544(sp),-(sp)
    22fc:	|  |  |  |  |            move.l d0,-(sp)
    22fe:	|  |  |  |  |            jsr 138fe <__mulsi3>
    2304:	|  |  |  |  |            addq.l #8,sp
    2306:	|  |  |  |  |            move.l d0,d1
    2308:	|  |  |  |  |            move.l 536(sp),d0
    230c:	|  |  |  |  |            add.l d1,d0
    230e:	|  |  |  |  |            movea.l d3,a0
    2310:	|  |  |  |  |            adda.l d0,a0
    2312:	|  |  |  |  |            move.b d2,d0
    2314:	|  |  |  |  |            lsl.b #4,d0
    2316:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    2318:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    231c:	|  |  |  |  |            addq.l #1,536(sp)
    2320:	|  |  |  |  \----------> move.l 536(sp),d1
    2324:	|  |  |  |               move.l 19cf6 <sceneWidth>,d0
    232a:	|  |  |  |               cmp.l d1,d0
    232c:	|  |  |  \-------------- bhi.w 2274 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    2330:	|  |  |                  addq.l #1,544(sp)
    2334:	|  |  \----------------> move.l 19cfa <sceneHeight>,d0
    233a:	|  |                     cmp.l 544(sp),d0
    233e:	|  \-------------------- bhi.w 226c <setZBuffer+0x334>
		}
	}

	finishAccess ();
    2342:	|                        jsr 46c6 <finishAccess>
	
	return TRUE;
    2348:	|                        moveq #1,d0
}
    234a:	\----------------------> movem.l (sp)+,d2-d3/a6
    234e:	                         lea 528(sp),sp
    2352:	                         rts

00002354 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    2354:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    2356:	             clr.l 4(sp)
    235a:	         /-- bra.s 2372 <sortZPal+0x1e>
		newpal[i] = i;
    235c:	      /--|-> move.l 4(sp),d0
    2360:	      |  |   add.l d0,d0
    2362:	      |  |   add.l d0,d0
    2364:	      |  |   movea.l 16(sp),a0
    2368:	      |  |   adda.l d0,a0
    236a:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    236e:	      |  |   addq.l #1,4(sp)
    2372:	      |  \-> move.l 4(sp),d0
    2376:	      |      cmp.l 20(sp),d0
    237a:	      \----- blt.s 235c <sortZPal+0x8>
	}

	if (size < 2) return;		
    237c:	             moveq #1,d0
    237e:	             cmp.l 20(sp),d0
    2382:	/----------- bge.w 2434 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    2386:	|            moveq #1,d0
    2388:	|            move.l d0,4(sp)
    238c:	|     /----- bra.w 2426 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    2390:	|  /--|----> move.l 4(sp),d0
    2394:	|  |  |      add.l d0,d0
    2396:	|  |  |      add.l d0,d0
    2398:	|  |  |      movea.l 16(sp),a0
    239c:	|  |  |      adda.l d0,a0
    239e:	|  |  |      move.l (a0),d0
    23a0:	|  |  |      add.l d0,d0
    23a2:	|  |  |      add.l d0,d0
    23a4:	|  |  |      movea.l 12(sp),a0
    23a8:	|  |  |      adda.l d0,a0
    23aa:	|  |  |      move.l (a0),d1
    23ac:	|  |  |      move.l 4(sp),d0
    23b0:	|  |  |      addi.l #1073741823,d0
    23b6:	|  |  |      add.l d0,d0
    23b8:	|  |  |      add.l d0,d0
    23ba:	|  |  |      movea.l 16(sp),a0
    23be:	|  |  |      adda.l d0,a0
    23c0:	|  |  |      move.l (a0),d0
    23c2:	|  |  |      add.l d0,d0
    23c4:	|  |  |      add.l d0,d0
    23c6:	|  |  |      movea.l 12(sp),a0
    23ca:	|  |  |      adda.l d0,a0
    23cc:	|  |  |      move.l (a0),d0
    23ce:	|  |  |      cmp.l d1,d0
    23d0:	|  |  |  /-- ble.s 2422 <sortZPal+0xce>
			tmp = newpal[i];
    23d2:	|  |  |  |   move.l 4(sp),d0
    23d6:	|  |  |  |   add.l d0,d0
    23d8:	|  |  |  |   add.l d0,d0
    23da:	|  |  |  |   movea.l 16(sp),a0
    23de:	|  |  |  |   adda.l d0,a0
    23e0:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    23e2:	|  |  |  |   move.l 4(sp),d0
    23e6:	|  |  |  |   addi.l #1073741823,d0
    23ec:	|  |  |  |   add.l d0,d0
    23ee:	|  |  |  |   add.l d0,d0
    23f0:	|  |  |  |   movea.l 16(sp),a1
    23f4:	|  |  |  |   adda.l d0,a1
    23f6:	|  |  |  |   move.l 4(sp),d0
    23fa:	|  |  |  |   add.l d0,d0
    23fc:	|  |  |  |   add.l d0,d0
    23fe:	|  |  |  |   movea.l 16(sp),a0
    2402:	|  |  |  |   adda.l d0,a0
    2404:	|  |  |  |   move.l (a1),d0
    2406:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    2408:	|  |  |  |   move.l 4(sp),d0
    240c:	|  |  |  |   addi.l #1073741823,d0
    2412:	|  |  |  |   add.l d0,d0
    2414:	|  |  |  |   add.l d0,d0
    2416:	|  |  |  |   movea.l 16(sp),a0
    241a:	|  |  |  |   adda.l d0,a0
    241c:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    241e:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    2422:	|  |  |  \-> addq.l #1,4(sp)
    2426:	|  |  \----> move.l 4(sp),d0
    242a:	|  |         cmp.l 20(sp),d0
    242e:	|  \-------- blt.w 2390 <sortZPal+0x3c>
    2432:	|        /-- bra.s 2436 <sortZPal+0xe2>
	if (size < 2) return;		
    2434:	\--------|-> nop
		}
	}
    2436:	         \-> addq.l #8,sp
    2438:	             rts

0000243a <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    243a:	/-------> lea -16(sp),sp
    243e:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    2440:	|         move.l 24(sp),-(sp)
    2444:	|         jsr 42ec <pauseFunction>
    244a:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    244c:	|     /-- bra.s 245e <abortFunction+0x24>
    244e:	|  /--|-> moveq #24,d0
    2450:	|  |  |   add.l 24(sp),d0
    2454:	|  |  |   move.l d0,-(sp)
    2456:	|  |  |   jsr 11738 <trimStack>
    245c:	|  |  |   addq.l #4,sp
    245e:	|  |  \-> movea.l 24(sp),a0
    2462:	|  |      move.l 24(a0),d0
    2466:	|  \----- bne.s 244e <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    2468:	|         movea.l 24(sp),a0
    246c:	|         move.l 4(a0),12(sp)
    2472:	|         move.l 19c5a <SysBase>,d0
    2478:	|         movea.l d0,a6
    247a:	|         movea.l 12(sp),a1
    247e:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2482:	|         clr.l 16(sp)
    2486:	|     /-- bra.s 24a6 <abortFunction+0x6c>
    2488:	|  /--|-> movea.l 24(sp),a0
    248c:	|  |  |   move.l 20(a0),d1
    2490:	|  |  |   move.l 16(sp),d0
    2494:	|  |  |   lsl.l #3,d0
    2496:	|  |  |   add.l d1,d0
    2498:	|  |  |   move.l d0,-(sp)
    249a:	|  |  |   jsr 11002 <unlinkVar>
    24a0:	|  |  |   addq.l #4,sp
    24a2:	|  |  |   addq.l #1,16(sp)
    24a6:	|  |  \-> movea.l 24(sp),a0
    24aa:	|  |      move.l 8(a0),d0
    24ae:	|  |      cmp.l 16(sp),d0
    24b2:	|  \----- bgt.s 2488 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    24b4:	|         movea.l 24(sp),a0
    24b8:	|         move.l 20(a0),8(sp)
    24be:	|         move.l 19c5a <SysBase>,d0
    24c4:	|         movea.l d0,a6
    24c6:	|         movea.l 8(sp),a1
    24ca:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    24ce:	|         moveq #28,d0
    24d0:	|         add.l 24(sp),d0
    24d4:	|         move.l d0,-(sp)
    24d6:	|         jsr 11002 <unlinkVar>
    24dc:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    24de:	|         movea.l 24(sp),a0
    24e2:	|         move.l 40(a0),d0
    24e6:	|     /-- beq.s 24f8 <abortFunction+0xbe>
    24e8:	|     |   movea.l 24(sp),a0
    24ec:	|     |   move.l 40(a0),d0
    24f0:	|     |   move.l d0,-(sp)
    24f2:	\-----|-- jsr 243a <abortFunction>(pc)
    24f6:	      |   addq.l #4,sp
	FreeVec(fun);
    24f8:	      \-> move.l 24(sp),4(sp)
    24fe:	          move.l 19c5a <SysBase>,d0
    2504:	          movea.l d0,a6
    2506:	          movea.l 4(sp),a1
    250a:	          jsr -690(a6)
	fun = NULL;
    250e:	          clr.l 24(sp)
}
    2512:	          nop
    2514:	          movea.l (sp)+,a6
    2516:	          lea 16(sp),sp
    251a:	          rts

0000251c <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    251c:	          subq.l #8,sp
	int n = 0;
    251e:	          clr.l 4(sp)
	*killedMyself = FALSE;
    2522:	          movea.l 20(sp),a0
    2526:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    2528:	          move.l 19bf6 <allRunningFunctions>,(sp)
	while (fun) {
    252e:	   /----- bra.s 255c <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    2530:	/--|----> movea.l (sp),a0
    2532:	|  |      move.l (a0),d0
    2534:	|  |      cmp.l 12(sp),d0
    2538:	|  |  /-- bne.s 2556 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    253a:	|  |  |   movea.l (sp),a0
    253c:	|  |  |   move.w #1,54(a0)
			n++;
    2542:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    2546:	|  |  |   move.l (sp),d0
    2548:	|  |  |   cmp.l 16(sp),d0
    254c:	|  |  +-- bne.s 2556 <cancelAFunction+0x3a>
    254e:	|  |  |   movea.l 20(sp),a0
    2552:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    2556:	|  |  \-> movea.l (sp),a0
    2558:	|  |      move.l 44(a0),(sp)
	while (fun) {
    255c:	|  \----> tst.l (sp)
    255e:	\-------- bne.s 2530 <cancelAFunction+0x14>
	}
	return n;
    2560:	          move.l 4(sp),d0
}
    2564:	          addq.l #8,sp
    2566:	          rts

00002568 <completeTimers>:


void completeTimers () {
    2568:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    256a:	          move.l 19bf6 <allRunningFunctions>,(sp)

	while (thisFunction) {
    2570:	   /----- bra.s 2586 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    2572:	/--|----> movea.l (sp),a0
    2574:	|  |      move.b 56(a0),d0
    2578:	|  |  /-- bne.s 2580 <completeTimers+0x18>
    257a:	|  |  |   movea.l (sp),a0
    257c:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    2580:	|  |  \-> movea.l (sp),a0
    2582:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    2586:	|  \----> tst.l (sp)
    2588:	\-------- bne.s 2572 <completeTimers+0xa>
	}
}
    258a:	          nop
    258c:	          nop
    258e:	          addq.l #4,sp
    2590:	          rts

00002592 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    2592:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    2596:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    259c:	                                                             movea.l 80(sp),a0
    25a0:	                                                             move.w 54(a0),d0
    25a4:	/----------------------------------------------------------- beq.w 3444 <continueFunction+0xeb2>
		abortFunction (fun);
    25a8:	|                                                            move.l 80(sp),-(sp)
    25ac:	|                                                            jsr 243a <abortFunction>
    25b2:	|                                                            addq.l #4,sp
		return TRUE;
    25b4:	|                                                            moveq #1,d0
    25b6:	|  /-------------------------------------------------------- bra.w 344e <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    25ba:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    25c0:	|  |  |                                                      movea.l 80(sp),a0
    25c4:	|  |  |                                                      move.l 4(a0),d1
    25c8:	|  |  |                                                      movea.l 80(sp),a0
    25cc:	|  |  |                                                      move.l 36(a0),d0
    25d0:	|  |  |                                                      lsl.l #3,d0
    25d2:	|  |  |                                                      movea.l d1,a0
    25d4:	|  |  |                                                      adda.l d0,a0
    25d6:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    25dc:	|  |  |                                                      movea.l 80(sp),a0
    25e0:	|  |  |                                                      move.l 4(a0),d1
    25e4:	|  |  |                                                      movea.l 80(sp),a0
    25e8:	|  |  |                                                      move.l 36(a0),d0
    25ec:	|  |  |                                                      lsl.l #3,d0
    25ee:	|  |  |                                                      movea.l d1,a0
    25f0:	|  |  |                                                      adda.l d0,a0
    25f2:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    25f6:	|  |  |                                                      move.l 64(sp),-(sp)
    25fa:	|  |  |                                                      pea 14027 <PutChar+0x613>
    2600:	|  |  |                                                      jsr 12e08 <KPrintF>
    2606:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    2608:	|  |  |                                                      moveq #41,d0
    260a:	|  |  |                                                      cmp.l 64(sp),d0
    260e:	|  |  |  /-------------------------------------------------- bcs.w 33f8 <continueFunction+0xe66>
    2612:	|  |  |  |                                                   move.l 64(sp),d0
    2616:	|  |  |  |                                                   add.l d0,d0
    2618:	|  |  |  |                                                   movea.l d0,a0
    261a:	|  |  |  |                                                   adda.l #9766,a0
    2620:	|  |  |  |                                                   move.w (a0),d0
    2622:	|  |  |  |                                                   jmp (2626 <continueFunction+0x94>,pc,d0.w)
    2626:	|  |  |  |                                                   bset d6,(a2)
    2628:	|  |  |  |                                                   ori.w #2670,(a4)
    262c:	|  |  |  |                                                   eori.w #2416,d6
    2630:	|  |  |  |                                                   bchg d4,d2
    2632:	|  |  |  |                                                   bclr d4,(a4)+
    2634:	|  |  |  |                                                   andi.l #181013194,d4
    263a:	|  |  |  |                                                   .short 0x0aca
    263c:	|  |  |  |                                                   .short 0x0aca
    263e:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    2646:	|  |  |  |                                                   .short 0x0aca
    2648:	|  |  |  |                                                   andi.w #906,-(a4)
    264c:	|  |  |  |                                                   bchg d1,196(a2)
    2650:	|  |  |  |                                                   bset d1,580(a4)
    2654:	|  |  |  |                                                   bclr d1,2576(a2)
    2658:	|  |  |  |                                                   andi.b #-56,2762(a2)
    265e:	|  |  |  |                                                   .short 0x0aca
    2660:	|  |  |  |                                                   eori.l #63572682,d0
    2666:	|  |  |  |                                                   .short 0x0aca
    2668:	|  |  |  |                                                   bchg d3,-(a2)
    266a:	|  |  |  |                                                   bchg #-36,(a2)
    266e:	|  |  |  |                                                   .short 0x08cc
    2670:	|  |  |  |                                                   addi.b #14,1038(a0)
    2676:	|  |  |  |                                                   .short 0x040e
    2678:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    267c:	|  |  |  |                                                   ori.w #8232,(a0)
    2680:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    2686:	|  |  |  |                                                   ori.w #12136,(a0)
    268a:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    2690:	|  |  |  |                                                   ori.w #12328,(a0)
    2694:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    269a:	|  |  |  |                                                   add.l 44(sp),d1
    269e:	|  |  |  |                                                   moveq #28,d0
    26a0:	|  |  |  |                                                   add.l 80(sp),d0
    26a4:	|  |  |  |                                                   move.l d1,-(sp)
    26a6:	|  |  |  |                                                   move.l d0,-(sp)
    26a8:	|  |  |  |                                                   jsr 1126e <copyVariable>
    26ae:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    26b0:	|  |  |  |                                                   move.l 80(sp),-(sp)
    26b4:	|  |  |  |                                                   jsr 3454 <finishFunction>
    26ba:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    26bc:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    26c2:	|  |  |  |                                                   move.l 80(sp),-(sp)
    26c6:	|  |  |  |                                                   jsr 432e <restartFunction>
    26cc:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    26ce:	|  |  |  |  /----------------------------------------------- bra.w 342c <continueFunction+0xe9a>
				finishFunction (fun);
    26d2:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    26d6:	|  |  |  |  |                                                jsr 3454 <finishFunction>
    26dc:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    26de:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    26e2:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    26e6:	|  |  |  |  +----------------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    26ea:	|  |  |  |  |                                                movea.l 80(sp),a0
    26ee:	|  |  |  |  |                                                move.l 28(a0),d0
    26f2:	|  |  |  |  |                                                moveq #2,d1
    26f4:	|  |  |  |  |                                                cmp.l d0,d1
    26f6:	|  |  |  |  |                                            /-- beq.s 2702 <continueFunction+0x170>
    26f8:	|  |  |  |  |                                            |   moveq #4,d1
    26fa:	|  |  |  |  |                                            |   cmp.l d0,d1
    26fc:	|  |  |  |  |                                         /--|-- beq.s 2750 <continueFunction+0x1be>
    26fe:	|  |  |  |  |                                /--------|--|-- bra.w 2838 <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    2702:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    2706:	|  |  |  |  |                                |        |      jsr 42ec <pauseFunction>
    270c:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    270e:	|  |  |  |  |                                |        |      moveq #24,d0
    2710:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    2714:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    2718:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    271c:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    2720:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    2722:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    2726:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    272a:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    272c:	|  |  |  |  |                                |        |      jsr 4558 <startNewFunctionNum>
    2732:	|  |  |  |  |                                |        |      lea 20(sp),sp
    2736:	|  |  |  |  |                                |        |      tst.l d0
    2738:	|  |  |  |  |                                |        |  /-- bne.s 2740 <continueFunction+0x1ae>
    273a:	|  |  |  |  |                                |        |  |   clr.w d0
    273c:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 344e <continueFunction+0xebc>
				fun = allRunningFunctions;
    2740:	|  |  |  |  |                                |        |  \-> move.l 19bf6 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    2748:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    274c:	|  |  |  |  |                                |  /-----|----- bra.w 284c <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    2750:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    2754:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    2758:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    275c:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    2760:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    2762:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    2764:	|  |  |  |  |                                |  |            jsr fab2 <callBuiltIn>
    276a:	|  |  |  |  |                                |  |            lea 12(sp),sp
    276e:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    2772:	|  |  |  |  |                                |  |            moveq #5,d0
    2774:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    2778:	|  |  |  |  |                                |  |  /-------- bcs.w 2834 <continueFunction+0x2a2>
    277c:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    2780:	|  |  |  |  |                                |  |  |         add.l d0,d0
    2782:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    2784:	|  |  |  |  |                                |  |  |         adda.l #10128,a0
    278a:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    278c:	|  |  |  |  |                                |  |  |         jmp (2790 <continueFunction+0x1fe>,pc,d0.w)
    2790:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    2796:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    279a:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    27a0:	|  |  |  |  |                                |  |  |         .short 0x403b
    27a2:	|  |  |  |  |                                |  |  |         jsr 12e08 <KPrintF>
    27a8:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    27aa:	|  |  |  |  |                                |  |  |         clr.w d0
    27ac:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 344e <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    27b0:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    27b4:	|  |  |  |  |                                |  |  |         jsr 42ec <pauseFunction>
    27ba:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    27bc:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    27c0:	|  |  |  |  |                                |  |  |  /----- bra.s 2836 <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    27c2:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    27c6:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    27ca:	|  |  |  |  |                                |  |  |  +----- bra.s 2836 <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    27cc:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    27d0:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    27d6:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    27d8:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    27dc:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    27e0:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    27e4:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    27e6:	|  |  |  |  |                                |  |  |  |      jsr 116a6 <setVariable>
    27ec:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    27f0:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    27f4:	|  |  |  |  |                                |  |  |  |      jsr 42ec <pauseFunction>
    27fa:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    27fc:	|  |  |  |  |                                |  |  |  |      move.l 19c2a <noStack>,d1
    2802:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    2806:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    2808:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    280a:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    280e:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    2810:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    2812:	|  |  |  |  |                                |  |  |  |      jsr 4558 <startNewFunctionNum>
    2818:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    281c:	|  |  |  |  |                                |  |  |  |      tst.l d0
    281e:	|  |  |  |  |                                |  |  |  |  /-- bne.s 2826 <continueFunction+0x294>
    2820:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    2822:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 344e <continueFunction+0xebc>
							fun = allRunningFunctions;
    2826:	|  |  |  |  |                                |  |  |  |  \-> move.l 19bf6 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    282e:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    2832:	|  |  |  |  |                                |  |  |  +----- bra.s 2836 <continueFunction+0x2a4>

						default:
						break;
    2834:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    2836:	|  |  |  |  |                                |  +-----\----X bra.s 284c <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    2838:	|  |  |  |  |                                \--|----------> pea 14086 <PutChar+0x672>
    283e:	|  |  |  |  |                                   |            jsr 12e08 <KPrintF>
    2844:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    2846:	|  |  |  |  |                                   |            clr.w d0
    2848:	|  +--|--|--|-----------------------------------|----------- bra.w 344e <continueFunction+0xebc>
			}
			break;
    284c:	|  |  |  |  +-----------------------------------\----------X bra.w 342c <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    2850:	|  |  |  |  |                                                moveq #28,d0
    2852:	|  |  |  |  |                                                add.l 80(sp),d0
    2856:	|  |  |  |  |                                                clr.l -(sp)
    2858:	|  |  |  |  |                                                clr.l -(sp)
    285a:	|  |  |  |  |                                                move.l d0,-(sp)
    285c:	|  |  |  |  |                                                jsr 116a6 <setVariable>
    2862:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2866:	|  |  |  |  +----------------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    286a:	|  |  |  |  |                                                move.l 68(sp),d1
    286e:	|  |  |  |  |                                                moveq #28,d0
    2870:	|  |  |  |  |                                                add.l 80(sp),d0
    2874:	|  |  |  |  |                                                move.l d1,-(sp)
    2876:	|  |  |  |  |                                                pea 5 <_start+0x5>
    287a:	|  |  |  |  |                                                move.l d0,-(sp)
    287c:	|  |  |  |  |                                                jsr 116a6 <setVariable>
    2882:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    2886:	|  |  |  |  +----------------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    288a:	|  |  |  |  |                                                move.l 68(sp),d1
    288e:	|  |  |  |  |                                                moveq #28,d0
    2890:	|  |  |  |  |                                                add.l 80(sp),d0
    2894:	|  |  |  |  |                                                move.l d1,-(sp)
    2896:	|  |  |  |  |                                                pea 1 <_start+0x1>
    289a:	|  |  |  |  |                                                move.l d0,-(sp)
    289c:	|  |  |  |  |                                                jsr 116a6 <setVariable>
    28a2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    28a6:	|  |  |  |  +----------------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    28aa:	|  |  |  |  |                                                moveq #28,d0
    28ac:	|  |  |  |  |                                                add.l 80(sp),d0
    28b0:	|  |  |  |  |                                                movea.l 80(sp),a0
    28b4:	|  |  |  |  |                                                movea.l 20(a0),a0
    28b8:	|  |  |  |  |                                                move.l 68(sp),d1
    28bc:	|  |  |  |  |                                                lsl.l #3,d1
    28be:	|  |  |  |  |                                                add.l a0,d1
    28c0:	|  |  |  |  |                                                move.l d0,-(sp)
    28c2:	|  |  |  |  |                                                move.l d1,-(sp)
    28c4:	|  |  |  |  |                                                jsr 1126e <copyVariable>
    28ca:	|  |  |  |  |                                                addq.l #8,sp
    28cc:	|  |  |  |  |                                                tst.w d0
    28ce:	|  |  |  |  |  /-------------------------------------------- bne.w 340a <continueFunction+0xe78>
    28d2:	|  |  |  |  |  |                                             clr.w d0
    28d4:	|  +--|--|--|--|-------------------------------------------- bra.w 344e <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    28d8:	|  |  |  |  |  |                                             moveq #28,d0
    28da:	|  |  |  |  |  |                                             add.l 80(sp),d0
    28de:	|  |  |  |  |  |                                             move.l d0,-(sp)
    28e0:	|  |  |  |  |  |                                             jsr 112f4 <getBoolean>
    28e6:	|  |  |  |  |  |                                             addq.l #4,sp
    28e8:	|  |  |  |  |  |                                             tst.w d0
    28ea:	|  |  |  |  |  |                                      /----- beq.s 2906 <continueFunction+0x374>
    28ec:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    28f0:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    28f4:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    28f6:	|  |  |  |  |  |                                      |      jsr 112f4 <getBoolean>
    28fc:	|  |  |  |  |  |                                      |      addq.l #4,sp
    28fe:	|  |  |  |  |  |                                      |      tst.w d0
    2900:	|  |  |  |  |  |                                      +----- beq.s 2906 <continueFunction+0x374>
    2902:	|  |  |  |  |  |                                      |      moveq #1,d0
    2904:	|  |  |  |  |  |                                      |  /-- bra.s 2908 <continueFunction+0x376>
    2906:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2908:	|  |  |  |  |  |                                         \-> moveq #28,d1
    290a:	|  |  |  |  |  |                                             add.l 80(sp),d1
    290e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2910:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2914:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2916:	|  |  |  |  |  |                                             jsr 116a6 <setVariable>
    291c:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2920:	|  |  |  |  |  |                                             moveq #24,d0
    2922:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2926:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2928:	|  |  |  |  |  |                                             jsr 11738 <trimStack>
    292e:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2930:	|  |  |  |  +--|-------------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    2934:	|  |  |  |  |  |                                             moveq #28,d0
    2936:	|  |  |  |  |  |                                             add.l 80(sp),d0
    293a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    293c:	|  |  |  |  |  |                                             jsr 112f4 <getBoolean>
    2942:	|  |  |  |  |  |                                             addq.l #4,sp
    2944:	|  |  |  |  |  |                                             tst.w d0
    2946:	|  |  |  |  |  |                                         /-- bne.s 295e <continueFunction+0x3cc>
    2948:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    294c:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    2950:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    2952:	|  |  |  |  |  |                                         |   jsr 112f4 <getBoolean>
    2958:	|  |  |  |  |  |                                         |   addq.l #4,sp
    295a:	|  |  |  |  |  |                                         |   tst.w d0
    295c:	|  |  |  |  |  |                                      /--|-- beq.s 2962 <continueFunction+0x3d0>
    295e:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    2960:	|  |  |  |  |  |                                      |  /-- bra.s 2964 <continueFunction+0x3d2>
    2962:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2964:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2966:	|  |  |  |  |  |                                             add.l 80(sp),d1
    296a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    296c:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2970:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2972:	|  |  |  |  |  |                                             jsr 116a6 <setVariable>
    2978:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    297c:	|  |  |  |  |  |                                             moveq #24,d0
    297e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2982:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2984:	|  |  |  |  |  |                                             jsr 11738 <trimStack>
    298a:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    298c:	|  |  |  |  +--|-------------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    2990:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2994:	|  |  |  |  |  |                                             moveq #28,d0
    2996:	|  |  |  |  |  |                                             add.l 80(sp),d0
    299a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    299c:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    29a0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    29a2:	|  |  |  |  |  |                                             jsr 116a6 <setVariable>
    29a8:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    29ac:	|  |  |  |  +--|-------------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    29b0:	|  |  |  |  |  |                                             move.l 68(sp),d1
    29b4:	|  |  |  |  |  |                                             moveq #28,d0
    29b6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    29ba:	|  |  |  |  |  |                                             move.l d1,-(sp)
    29bc:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    29c0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    29c2:	|  |  |  |  |  |                                             jsr 116a6 <setVariable>
    29c8:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    29cc:	|  |  |  |  +--|-------------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    29d0:	|  |  |  |  |  |                                             move.l 68(sp),d1
    29d4:	|  |  |  |  |  |                                             moveq #28,d0
    29d6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    29da:	|  |  |  |  |  |                                             move.l d1,-(sp)
    29dc:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    29e0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    29e2:	|  |  |  |  |  |                                             jsr 116a6 <setVariable>
    29e8:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    29ec:	|  |  |  |  +--|-------------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    29f0:	|  |  |  |  |  |                                             move.l 19b66 <dialogValue>,d0
    29f6:	|  |  |  |  |  |                                             moveq #1,d1
    29f8:	|  |  |  |  |  |                                             cmp.l d0,d1
    29fa:	|  |  |  |  |  |  /----------------------------------------- beq.w 340e <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    29fe:	|  |  |  |  |  |  |                                          pea 1409b <PutChar+0x687>
    2a04:	|  |  |  |  |  |  |                                          jsr 12e08 <KPrintF>
    2a0a:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    2a0c:	|  |  |  |  |  |  |                                          clr.w d0
    2a0e:	|  +--|--|--|--|--|----------------------------------------- bra.w 344e <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    2a12:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    2a16:	|  |  |  |  |  |  |                                          moveq #28,d0
    2a18:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    2a1c:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    2a1e:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    2a20:	|  |  |  |  |  |  |                                          jsr 10e38 <loadStringToVar>
    2a26:	|  |  |  |  |  |  |                                          addq.l #8,sp
    2a28:	|  |  |  |  |  |  |                                          tst.w d0
    2a2a:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 3412 <continueFunction+0xe80>
					return FALSE;
    2a2e:	|  |  |  |  |  |  |  |                                       clr.w d0
    2a30:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 344e <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    2a34:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2a38:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2a3c:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2a3e:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    2a40:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2a42:	|  |  |  |  |  |  |  |                                /----- beq.s 2aa0 <continueFunction+0x50e>
    2a44:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    2a46:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    2a48:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 2c34 <continueFunction+0x6a2>
    2a4c:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    2a4e:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 2a5a <continueFunction+0x4c8>
    2a50:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    2a52:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    2a54:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 2aa0 <continueFunction+0x50e>
    2a56:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 2c34 <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    2a5a:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    2a5c:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    2a60:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 2a8c <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    2a62:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    2a64:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2a68:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2a6a:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2a6c:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2a6e:	|  |  |  |  |  |  |  |              |                 |  |   jsr 116a6 <setVariable>
    2a74:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    2a78:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    2a7a:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2a7e:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2a80:	|  |  |  |  |  |  |  |              |                 |  |   jsr 11738 <trimStack>
    2a86:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    2a88:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 2c4a <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    2a8c:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 140dc <PutChar+0x6c8>
    2a92:	|  |  |  |  |  |  |  |              |  |              |      jsr 12e08 <KPrintF>
    2a98:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    2a9a:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    2a9c:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 344e <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2aa0:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    2aa4:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2aa8:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    2aac:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2aae:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2ac4 <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    2ab0:	|  |  |  |  |  |  |  |              |  |                 |   pea 14118 <PutChar+0x704>
    2ab6:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12e08 <KPrintF>
    2abc:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    2abe:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2ac0:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 344e <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2ac4:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    2ac6:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2aca:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2acc:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    2ad0:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    2ad4:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    2ad6:	|  |  |  |  |  |  |  |              |  |                     jsr 10db4 <getValueType>
    2adc:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    2ae0:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    2ae2:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2aea <continueFunction+0x558>
    2ae4:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2ae6:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 344e <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2aea:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    2aee:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2af2:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    2af4:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    2af6:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    2af8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2b1a <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    2afa:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    2afe:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    2b00:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    2b04:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    2b08:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    2b0c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    2b0e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2b10:	|  |  |  |  |  |  |  |              |  |                 |   jsr 10a3e <fastArrayGetByIndex>
    2b16:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    2b18:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 2b3a <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    2b1a:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    2b1e:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    2b20:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    2b24:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    2b28:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    2b2c:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    2b2e:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    2b30:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    2b32:	|  |  |  |  |  |  |  |              |  |              |      jsr 116c8 <stackGetByIndex>
    2b38:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2b3a:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    2b3e:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    2b40:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2b44:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2b46:	|  |  |  |  |  |  |  |              |  |                     jsr 11738 <trimStack>
    2b4c:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    2b4e:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    2b52:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2b6e <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    2b54:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    2b56:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    2b5a:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2b5c:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2b5e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2b60:	|  |  |  |  |  |  |  |              |  |                 |   jsr 116a6 <setVariable>
    2b66:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    2b6a:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 2c48 <continueFunction+0x6b6>
    2b6e:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    2b70:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    2b74:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 2b82 <continueFunction+0x5f0>
    2b76:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    2b78:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    2b7c:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 2bcc <continueFunction+0x63a>
    2b7e:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 2c14 <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2b82:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    2b86:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    2b8a:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    2b8e:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    2b90:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 10db4 <getValueType>
    2b96:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    2b9a:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    2b9c:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 2ba4 <continueFunction+0x612>
    2b9e:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    2ba0:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 2c2e <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2ba4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    2ba6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    2ba8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    2bac:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    2bae:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    2bb2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    2bb4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 116a6 <setVariable>
    2bba:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    2bbe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    2bc0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    2bc2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    2bc6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    2bca:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 2c32 <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2bcc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    2bd0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2bd4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    2bd8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    2bda:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 10db4 <getValueType>
    2be0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    2be4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    2be6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 2bec <continueFunction+0x65a>
    2be8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    2bea:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 2c2e <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2bec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    2bee:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    2bf0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    2bf4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    2bf6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2bfa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    2bfc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 116a6 <setVariable>
    2c02:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    2c06:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    2c08:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    2c0a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    2c0e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    2c12:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 2c32 <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    2c14:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    2c16:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    2c1a:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    2c1c:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    2c20:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 1126e <copyVariable>
    2c26:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    2c28:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    2c2a:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 2c48 <continueFunction+0x6b6>
    2c2c:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2c2e:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 344e <continueFunction+0xebc>
				break;
    2c32:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 2c48 <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    2c34:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 14136 <PutChar+0x722>
    2c3a:	|  |  |  |  |  |  |  |                 |  |                  jsr 12e08 <KPrintF>
    2c40:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    2c42:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    2c44:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 344e <continueFunction+0xebc>
				break;
    2c48:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    2c4a:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 342c <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    2c4e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2c52:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2c56:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2c58:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    2c5a:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2c5c:	|  |  |  |  |  |  |  |                                   /-- beq.s 2c6a <continueFunction+0x6d8>
    2c5e:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    2c60:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    2c62:	|  |  |  |  |  |  |  |                                /--|-- beq.w 2d16 <continueFunction+0x784>
    2c66:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 2d74 <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2c6a:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2c6e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2c72:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2c76:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2c78:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2c8e <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    2c7a:	|  |  |  |  |  |  |  |                             |  |  |   pea 14118 <PutChar+0x704>
    2c80:	|  |  |  |  |  |  |  |                             |  |  |   jsr 12e08 <KPrintF>
    2c86:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    2c88:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2c8a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 344e <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2c8e:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    2c90:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2c94:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2c96:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    2c9a:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    2c9e:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    2ca0:	|  |  |  |  |  |  |  |                             |  |      jsr 10db4 <getValueType>
    2ca6:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2caa:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2cac:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2cb4 <continueFunction+0x722>
    2cae:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2cb0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 344e <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    2cb4:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2cb8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2cbc:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    2cc0:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    2cc2:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    2cc6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    2cc8:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    2ccc:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2cd0:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2cd4:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    2cd6:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    2cd8:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    2cda:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2cdc:	|  |  |  |  |  |  |  |                             |  |      jsr 4514 <stackSetByIndex>
    2ce2:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2ce6:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2ce8:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2cf0 <continueFunction+0x75e>
						return FALSE;
    2cea:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2cec:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 344e <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    2cf0:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    2cf2:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2cf6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2cf8:	|  |  |  |  |  |  |  |                             |  |      jsr 11738 <trimStack>
    2cfe:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    2d00:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    2d02:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2d06:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2d08:	|  |  |  |  |  |  |  |                             |  |      jsr 11738 <trimStack>
    2d0e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    2d10:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    2d12:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 342c <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    2d16:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    2d18:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    2d1c:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2d1e:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    2d22:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    2d26:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    2d28:	|  |  |  |  |  |  |  |                             |         jsr 10db4 <getValueType>
    2d2e:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    2d32:	|  |  |  |  |  |  |  |                             |         tst.w d0
    2d34:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2d3c <continueFunction+0x7aa>
    2d36:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    2d38:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 344e <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    2d3c:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    2d40:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    2d42:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    2d46:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    2d4a:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    2d4e:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    2d50:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2d52:	|  |  |  |  |  |  |  |                             |         jsr 10a3e <fastArrayGetByIndex>
    2d58:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2d5a:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2d5e:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2d6e <continueFunction+0x7dc>
    2d60:	|  |  |  |  |  |  |  |                             |     |   pea 1415a <PutChar+0x746>
    2d66:	|  |  |  |  |  |  |  |                             |     |   jsr 12e08 <KPrintF>
    2d6c:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2d6e:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    2d70:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 344e <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    2d74:	|  |  |  |  |  |  |  |                             \-------> pea 14136 <PutChar+0x722>
    2d7a:	|  |  |  |  |  |  |  |                                       jsr 12e08 <KPrintF>
    2d80:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    2d82:	|  |  |  |  |  |  |  |                                       clr.w d0
    2d84:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 344e <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2d88:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2d8c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2d90:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2d94:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2d96:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2d98:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2d9a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2d9e:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    2da2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2da4:	|  |  |  |  |  |  |  |                                       jsr 10db4 <getValueType>
    2daa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2dae:	|  |  |  |  |  |  |  |                                       tst.w d0
    2db0:	|  |  |  |  |  |  |  |                                   /-- bne.s 2db8 <continueFunction+0x826>
    2db2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2db4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 344e <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2db8:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    2dbc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2dbe:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2dc2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2dc4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2dc8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2dca:	|  |  |  |  |  |  |  |                                       jsr 116a6 <setVariable>
    2dd0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    2dd4:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    2dd8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2dda:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2ddc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2de0:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2de4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2de8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2dea:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2dec:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2dee:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2df2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2df4:	|  |  |  |  |  |  |  |                                       jsr 116a6 <setVariable>
    2dfa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2dfe:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2e02:	|  |  |  |  |  |  |  |                                       move.l 19c0c <globalVars>,d1
    2e08:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2e0c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2e0e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2e10:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2e12:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2e16:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    2e1a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2e1c:	|  |  |  |  |  |  |  |                                       jsr 10db4 <getValueType>
    2e22:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2e26:	|  |  |  |  |  |  |  |                                       tst.w d0
    2e28:	|  |  |  |  |  |  |  |                                   /-- bne.s 2e30 <continueFunction+0x89e>
    2e2a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2e2c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 344e <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2e30:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    2e34:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2e36:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2e3a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2e3c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2e40:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2e42:	|  |  |  |  |  |  |  |                                       jsr 116a6 <setVariable>
    2e48:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2e4c:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    2e50:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2e52:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2e54:	|  |  |  |  |  |  |  |                                       movea.l 19c0c <globalVars>,a0
    2e5a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2e5e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2e60:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2e62:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2e64:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2e68:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2e6a:	|  |  |  |  |  |  |  |                                       jsr 116a6 <setVariable>
    2e70:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2e74:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2e78:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2e7c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2e80:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2e84:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2e86:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2e88:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2e8a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2e8e:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    2e92:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2e94:	|  |  |  |  |  |  |  |                                       jsr 10db4 <getValueType>
    2e9a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2e9e:	|  |  |  |  |  |  |  |                                       tst.w d0
    2ea0:	|  |  |  |  |  |  |  |                                   /-- bne.s 2ea8 <continueFunction+0x916>
    2ea2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2ea4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 344e <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2ea8:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2eac:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2eae:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2eb2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2eb4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2eb8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2eba:	|  |  |  |  |  |  |  |                                       jsr 116a6 <setVariable>
    2ec0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    2ec4:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    2ec8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2eca:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2ecc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2ed0:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2ed4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2ed8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2eda:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2edc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2ede:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ee2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ee4:	|  |  |  |  |  |  |  |                                       jsr 116a6 <setVariable>
    2eea:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2eee:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2ef2:	|  |  |  |  |  |  |  |                                       move.l 19c0c <globalVars>,d1
    2ef8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2efc:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2efe:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2f00:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f02:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f06:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    2f0a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2f0c:	|  |  |  |  |  |  |  |                                       jsr 10db4 <getValueType>
    2f12:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2f16:	|  |  |  |  |  |  |  |                                       tst.w d0
    2f18:	|  |  |  |  |  |  |  |                                   /-- bne.s 2f20 <continueFunction+0x98e>
    2f1a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2f1c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 344e <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2f20:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    2f24:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2f26:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2f2a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2f2c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f30:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f32:	|  |  |  |  |  |  |  |                                       jsr 116a6 <setVariable>
    2f38:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    2f3c:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    2f40:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2f42:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2f44:	|  |  |  |  |  |  |  |                                       movea.l 19c0c <globalVars>,a0
    2f4a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2f4e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f50:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2f52:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2f54:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2f58:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f5a:	|  |  |  |  |  |  |  |                                       jsr 116a6 <setVariable>
    2f60:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2f64:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    2f68:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2f6c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2f70:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2f74:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2f76:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    2f78:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2f7a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2f7e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2f80:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2f82:	|  |  |  |  |  |  |  |                                       jsr 1126e <copyVariable>
    2f88:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    2f8a:	|  |  |  |  |  |  |  |                                       tst.w d0
    2f8c:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 3416 <continueFunction+0xe84>
    2f90:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    2f92:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 344e <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    2f96:	|  |  |  |  |  |  |  |  |                                    move.l 19c0c <globalVars>,d1
    2f9c:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    2fa0:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    2fa2:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    2fa4:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    2fa6:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    2faa:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    2fac:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    2fae:	|  |  |  |  |  |  |  |  |                                    jsr 1126e <copyVariable>
    2fb4:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    2fb6:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    2fb8:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 341a <continueFunction+0xe88>
    2fbc:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    2fbe:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 344e <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    2fc2:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    2fc4:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    2fc8:	|  |  |  |  |  |  |  |  |  |                                 movea.l 19c0c <globalVars>,a0
    2fce:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    2fd2:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    2fd4:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    2fd6:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    2fd8:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    2fda:	|  |  |  |  |  |  |  |  |  |                                 jsr 1126e <copyVariable>
    2fe0:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    2fe2:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    2fe4:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 341e <continueFunction+0xe8c>
    2fe8:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    2fea:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 344e <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    2fee:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    2ff0:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    2ff4:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    2ff6:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    2ffa:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    2ffc:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    2ffe:	|  |  |  |  |  |  |  |  |  |  |                              jsr 105f0 <addVarToStack>
    3004:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    3006:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    3008:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 3422 <continueFunction+0xe90>
    300c:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    300e:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 344e <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    3012:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    3014:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    3018:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    301a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    301e:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    3020:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    3022:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 10676 <addVarToStackQuick>
    3028:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    302a:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    302c:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 3426 <continueFunction+0xe94>
    3030:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    3032:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 344e <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    3036:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    3038:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    303c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    303e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 112f4 <getBoolean>
    3044:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    3046:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    3048:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    304a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    304c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    304e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    3052:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3056:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    3058:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    305c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    305e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 116a6 <setVariable>
    3064:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    3068:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    306c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    306e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    3072:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    3074:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 112f4 <getBoolean>
    307a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    307c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    307e:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 342a <continueFunction+0xe98>
				advanceNow = FALSE;
    3082:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    3086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    308a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    3090:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 342a <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    3094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    3098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    309c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    30a2:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 342c <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    30a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    30a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    30ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    30b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    30b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 10db4 <getValueType>
    30be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    30c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    30c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 30cc <continueFunction+0xb3a>
    30c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    30c8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 344e <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    30d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    30d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    30d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    30d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    30da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    30dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    30e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    30e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 116a6 <setVariable>
    30e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    30ec:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 342c <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    30f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    30f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    30f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 33e2 <continueFunction+0xe50>
    30fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    30fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    3102:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 317e <continueFunction+0xbec>
    3104:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    3106:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    310a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 31c8 <continueFunction+0xc36>
    310e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    3110:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    3114:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 3122 <continueFunction+0xb90>
    3116:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    3118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    311c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 3150 <continueFunction+0xbbe>
    311e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 31c8 <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    3122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    3124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    3128:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    312c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    3130:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    3132:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    3134:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 106ea <addVariablesInSecond>
    313a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    313c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    313e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    3142:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    3144:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 11738 <trimStack>
    314a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    314c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 33f6 <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    3150:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    3152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    3156:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    315a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    315e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    3160:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    3162:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 107a8 <compareVariablesInSecond>
    3168:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    316a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    316c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    3170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    3172:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 11738 <trimStack>
    3178:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    317a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 33f6 <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    317e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    3180:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    3184:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    3188:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    318c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    318e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    3190:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 107a8 <compareVariablesInSecond>
    3196:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    3198:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    319a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    319e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    31a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 11738 <trimStack>
    31a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    31a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    31ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    31b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    31b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    31b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    31b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    31bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    31c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    31c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 33f6 <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    31c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    31cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    31d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    31d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    31d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    31da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    31dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10db4 <getValueType>
    31e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    31e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    31e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 31f0 <continueFunction+0xc5e>
    31ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    31ec:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 344e <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    31f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    31f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    31f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    31f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    31fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    3200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    3202:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10db4 <getValueType>
    3208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    320c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    320e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 3216 <continueFunction+0xc84>
    3210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    3212:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 344e <continueFunction+0xebc>
					trimStack (&fun -> stack);
    3216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    3218:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    321c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    321e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 11738 <trimStack>
    3224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    3226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    3228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    322c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    322e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    3230:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 33f4 <continueFunction+0xe62>
    3234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    3236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    3238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #12868,a0
    323e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    3240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (3244 <continueFunction+0xcb2>,pc,d0.w)
    3244:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    3248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    324a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    3254:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    325c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    3264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    326c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    3274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    327c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    327e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 138fe <__mulsi3>
    3286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    328a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    328c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 116a6 <setVariable>
    329e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    32a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 33f6 <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    32a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    32aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    32ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    32b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    32b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    32b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    32b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    32bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    32be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 116a6 <setVariable>
    32c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    32c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 33f6 <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    32cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    32d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    32d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    32d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    32d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 139aa <__modsi3>
    32de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    32e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    32e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    32e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    32e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    32ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    32ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    32f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 116a6 <setVariable>
    32f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    32fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 33f6 <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    32fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    3302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    3306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    330a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1397c <__divsi3>
    3310:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    3312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    3314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    331a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    331c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 116a6 <setVariable>
    3328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    332c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 33f6 <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    3330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    333a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    333c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    333e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    334a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    334e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3350:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 116a6 <setVariable>
    3356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    335a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 33f6 <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    335e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3368:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    336a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    336c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    336e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3370:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    337c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    337e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 116a6 <setVariable>
    3384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 33f6 <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    338a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    338e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    3396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    339a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    339c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    339e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    33a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    33a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    33a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    33aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 116a6 <setVariable>
    33b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    33b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 33f6 <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    33b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    33ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    33be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    33c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    33c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    33c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    33c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    33c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    33ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    33ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    33d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    33d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    33d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 116a6 <setVariable>
    33dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    33e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 33f6 <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    33e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 1417b <PutChar+0x767>
    33e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 12e08 <KPrintF>
    33ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    33f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    33f2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 344e <continueFunction+0xebc>
						break;
    33f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    33f6:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 342c <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    33f8:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 14193 <PutChar+0x77f>
    33fe:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 12e08 <KPrintF>
    3404:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    3406:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    3408:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 344e <continueFunction+0xebc>
			break;
    340a:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    340c:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 342c <continueFunction+0xe9a>
			break;
    340e:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    3410:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 342c <continueFunction+0xe9a>
			break;
    3412:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    3414:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 342c <continueFunction+0xe9a>
			break;
    3416:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    3418:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 342c <continueFunction+0xe9a>
			break;
    341a:	|  |  |     |              \--|--|--|--|-------------------> nop
    341c:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 342c <continueFunction+0xe9a>
			break;
    341e:	|  |  |     |                 \--|--|--|-------------------> nop
    3420:	|  |  |     +--------------------|--|--|-------------------- bra.s 342c <continueFunction+0xe9a>
			break;
    3422:	|  |  |     |                    \--|--|-------------------> nop
    3424:	|  |  |     +-----------------------|--|-------------------- bra.s 342c <continueFunction+0xe9a>
			break;
    3426:	|  |  |     |                       \--|-------------------> nop
    3428:	|  |  |     +--------------------------|-------------------- bra.s 342c <continueFunction+0xe9a>
			break;
    342a:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    342c:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    3430:	+--|--|----------------------------------------------------- beq.s 3444 <continueFunction+0xeb2>
    3432:	|  |  |                                                      movea.l 80(sp),a0
    3436:	|  |  |                                                      move.l 36(a0),d0
    343a:	|  |  |                                                      addq.l #1,d0
    343c:	|  |  |                                                      movea.l 80(sp),a0
    3440:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    3444:	\--|--|----------------------------------------------------> tst.w 74(sp)
    3448:	   |  \----------------------------------------------------- bne.w 25ba <continueFunction+0x28>

	}
	return TRUE;
    344c:	   |                                                         moveq #1,d0
}
    344e:	   \-------------------------------------------------------> lea 76(sp),sp
    3452:	                                                             rts

00003454 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    3454:	       lea -16(sp),sp
    3458:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    345a:	       move.l 24(sp),-(sp)
    345e:	       jsr 42ec <pauseFunction>
    3464:	       addq.l #4,sp
	if (fun -> stack) 
    3466:	       movea.l 24(sp),a0
    346a:	       move.l 24(a0),d0
    346e:	   /-- beq.s 3484 <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    3470:	   |   pea 141bf <PutChar+0x7ab>
    3476:	   |   pea 141ec <PutChar+0x7d8>
    347c:	   |   jsr 12e08 <KPrintF>
    3482:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    3484:	   \-> movea.l 24(sp),a0
    3488:	       move.l 4(a0),12(sp)
    348e:	       move.l 19c5a <SysBase>,d0
    3494:	       movea.l d0,a6
    3496:	       movea.l 12(sp),a1
    349a:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    349e:	       clr.l 16(sp)
    34a2:	   /-- bra.s 34c2 <finishFunction+0x6e>
    34a4:	/--|-> movea.l 24(sp),a0
    34a8:	|  |   move.l 20(a0),d1
    34ac:	|  |   move.l 16(sp),d0
    34b0:	|  |   lsl.l #3,d0
    34b2:	|  |   add.l d1,d0
    34b4:	|  |   move.l d0,-(sp)
    34b6:	|  |   jsr 11002 <unlinkVar>
    34bc:	|  |   addq.l #4,sp
    34be:	|  |   addq.l #1,16(sp)
    34c2:	|  \-> movea.l 24(sp),a0
    34c6:	|      move.l 8(a0),d0
    34ca:	|      cmp.l 16(sp),d0
    34ce:	\----- bgt.s 34a4 <finishFunction+0x50>
	if( fun->numLocals > 0) {
    34d0:	       movea.l 24(sp),a0
    34d4:	       move.l 8(a0),d0
    34d8:	   /-- ble.s 34f4 <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    34da:	   |   movea.l 24(sp),a0
    34de:	   |   move.l 20(a0),8(sp)
    34e4:	   |   move.l 19c5a <SysBase>,d0
    34ea:	   |   movea.l d0,a6
    34ec:	   |   movea.l 8(sp),a1
    34f0:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    34f4:	   \-> moveq #28,d0
    34f6:	       add.l 24(sp),d0
    34fa:	       move.l d0,-(sp)
    34fc:	       jsr 11002 <unlinkVar>
    3502:	       addq.l #4,sp
	FreeVec(fun);
    3504:	       move.l 24(sp),4(sp)
    350a:	       move.l 19c5a <SysBase>,d0
    3510:	       movea.l d0,a6
    3512:	       movea.l 4(sp),a1
    3516:	       jsr -690(a6)
	fun = NULL;
    351a:	       clr.l 24(sp)
}
    351e:	       nop
    3520:	       movea.l (sp)+,a6
    3522:	       lea 16(sp),sp
    3526:	       rts

00003528 <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    3528:	jsr 4348 <runSludge>
}
    352e:	rts

00003530 <initSludge>:

BOOL initSludge (char * filename) {
    3530:	             lea -296(sp),sp
    3534:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    3538:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    353c:	             jsr 7628 <makeNullAnim>
    3542:	             move.l d0,19b2c <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    3548:	             pea 19c08 <gameVersion>
    354e:	             pea 141fc <PutChar+0x7e8>
    3554:	             pea 45 <_start+0x45>
    3558:	             pea 47 <_start+0x47>
    355c:	             move.l 336(sp),-(sp)
    3560:	             jsr 3f7c <openAndVerify>
    3566:	             lea 20(sp),sp
    356a:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    356e:	         /-- bne.s 3576 <initSludge+0x46>
    3570:	         |   clr.w d0
    3572:	/--------|-- bra.w 3c9c <initSludge+0x76c>
	if (FGetC (fp)) {
    3576:	|        \-> move.l 292(sp),288(sp)
    357c:	|            move.l 19c62 <DOSBase>,d0
    3582:	|            movea.l d0,a6
    3584:	|            move.l 288(sp),d1
    3588:	|            jsr -306(a6)
    358c:	|            move.l d0,284(sp)
    3590:	|            move.l 284(sp),d0
    3594:	|  /-------- beq.w 373a <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    3598:	|  |         move.l 292(sp),-(sp)
    359c:	|  |         jsr 6bc <get2bytes>
    35a2:	|  |         addq.l #4,sp
    35a4:	|  |         move.l d0,19c2e <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    35aa:	|  |         move.l 19c2e <numBIFNames>,d0
    35b0:	|  |         move.l d0,280(sp)
    35b4:	|  |         clr.l 276(sp)
    35b8:	|  |         move.l 19c5a <SysBase>,d0
    35be:	|  |         movea.l d0,a6
    35c0:	|  |         move.l 280(sp),d0
    35c4:	|  |         move.l 276(sp),d1
    35c8:	|  |         jsr -684(a6)
    35cc:	|  |         move.l d0,272(sp)
    35d0:	|  |         move.l 272(sp),d0
    35d4:	|  |         move.l d0,19bee <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    35da:	|  |         move.l 19bee <allBIFNames>,d0
    35e0:	|  |     /-- bne.s 35e8 <initSludge+0xb8>
    35e2:	|  |     |   clr.w d0
    35e4:	+--|-----|-- bra.w 3c9c <initSludge+0x76c>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    35e8:	|  |     \-> clr.l 308(sp)
    35ec:	|  |     /-- bra.s 3612 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    35ee:	|  |  /--|-> move.l 19bee <allBIFNames>,d1
    35f4:	|  |  |  |   move.l 308(sp),d0
    35f8:	|  |  |  |   add.l d0,d0
    35fa:	|  |  |  |   add.l d0,d0
    35fc:	|  |  |  |   movea.l d1,a2
    35fe:	|  |  |  |   adda.l d0,a2
    3600:	|  |  |  |   move.l 292(sp),-(sp)
    3604:	|  |  |  |   jsr b02 <readString>
    360a:	|  |  |  |   addq.l #4,sp
    360c:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    360e:	|  |  |  |   addq.l #1,308(sp)
    3612:	|  |  |  \-> move.l 19c2e <numBIFNames>,d0
    3618:	|  |  |      cmp.l 308(sp),d0
    361c:	|  |  \----- bgt.s 35ee <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    361e:	|  |         move.l 292(sp),-(sp)
    3622:	|  |         jsr 6bc <get2bytes>
    3628:	|  |         addq.l #4,sp
    362a:	|  |         move.l d0,19c3a <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    3630:	|  |         move.l 19c3a <numUserFunc>,d0
    3636:	|  |         move.l d0,268(sp)
    363a:	|  |         clr.l 264(sp)
    363e:	|  |         move.l 19c5a <SysBase>,d0
    3644:	|  |         movea.l d0,a6
    3646:	|  |         move.l 268(sp),d0
    364a:	|  |         move.l 264(sp),d1
    364e:	|  |         jsr -684(a6)
    3652:	|  |         move.l d0,260(sp)
    3656:	|  |         move.l 260(sp),d0
    365a:	|  |         move.l d0,19bfa <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    3660:	|  |         move.l 19bfa <allUserFunc>,d0
    3666:	|  |     /-- bne.s 366e <initSludge+0x13e>
    3668:	|  |     |   clr.w d0
    366a:	+--|-----|-- bra.w 3c9c <initSludge+0x76c>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    366e:	|  |     \-> clr.l 304(sp)
    3672:	|  |     /-- bra.s 3698 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    3674:	|  |  /--|-> move.l 19bfa <allUserFunc>,d1
    367a:	|  |  |  |   move.l 304(sp),d0
    367e:	|  |  |  |   add.l d0,d0
    3680:	|  |  |  |   add.l d0,d0
    3682:	|  |  |  |   movea.l d1,a2
    3684:	|  |  |  |   adda.l d0,a2
    3686:	|  |  |  |   move.l 292(sp),-(sp)
    368a:	|  |  |  |   jsr b02 <readString>
    3690:	|  |  |  |   addq.l #4,sp
    3692:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    3694:	|  |  |  |   addq.l #1,304(sp)
    3698:	|  |  |  \-> move.l 19c3a <numUserFunc>,d0
    369e:	|  |  |      cmp.l 304(sp),d0
    36a2:	|  |  \----- bgt.s 3674 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    36a4:	|  |         move.l 19c08 <gameVersion>,d0
    36aa:	|  |         cmpi.l #258,d0
    36b0:	|  +-------- ble.w 373a <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    36b4:	|  |         move.l 292(sp),-(sp)
    36b8:	|  |         jsr 6bc <get2bytes>
    36be:	|  |         addq.l #4,sp
    36c0:	|  |         move.l d0,19c36 <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    36c6:	|  |         move.l 19c36 <numResourceNames>,d0
    36cc:	|  |         move.l d0,256(sp)
    36d0:	|  |         clr.l 252(sp)
    36d4:	|  |         move.l 19c5a <SysBase>,d0
    36da:	|  |         movea.l d0,a6
    36dc:	|  |         move.l 256(sp),d0
    36e0:	|  |         move.l 252(sp),d1
    36e4:	|  |         jsr -684(a6)
    36e8:	|  |         move.l d0,248(sp)
    36ec:	|  |         move.l 248(sp),d0
    36f0:	|  |         move.l d0,19bf2 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    36f6:	|  |         move.l 19bf2 <allResourceNames>,d0
    36fc:	|  |     /-- bne.s 3704 <initSludge+0x1d4>
    36fe:	|  |     |   clr.w d0
    3700:	+--|-----|-- bra.w 3c9c <initSludge+0x76c>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    3704:	|  |     \-> clr.l 300(sp)
    3708:	|  |     /-- bra.s 372e <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    370a:	|  |  /--|-> move.l 19bf2 <allResourceNames>,d1
    3710:	|  |  |  |   move.l 300(sp),d0
    3714:	|  |  |  |   add.l d0,d0
    3716:	|  |  |  |   add.l d0,d0
    3718:	|  |  |  |   movea.l d1,a2
    371a:	|  |  |  |   adda.l d0,a2
    371c:	|  |  |  |   move.l 292(sp),-(sp)
    3720:	|  |  |  |   jsr b02 <readString>
    3726:	|  |  |  |   addq.l #4,sp
    3728:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    372a:	|  |  |  |   addq.l #1,300(sp)
    372e:	|  |  |  \-> move.l 19c36 <numResourceNames>,d0
    3734:	|  |  |      cmp.l 300(sp),d0
    3738:	|  |  \----- bgt.s 370a <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    373a:	|  \-------> move.l 292(sp),-(sp)
    373e:	|            jsr 6bc <get2bytes>
    3744:	|            addq.l #4,sp
    3746:	|            move.l d0,19b5a <winWidth>
	winHeight = get2bytes (fp);
    374c:	|            move.l 292(sp),-(sp)
    3750:	|            jsr 6bc <get2bytes>
    3756:	|            addq.l #4,sp
    3758:	|            move.l d0,19b5e <winHeight>
	specialSettings = FGetC (fp);
    375e:	|            move.l 292(sp),244(sp)
    3764:	|            move.l 19c62 <DOSBase>,d0
    376a:	|            movea.l d0,a6
    376c:	|            move.l 244(sp),d1
    3770:	|            jsr -306(a6)
    3774:	|            move.l d0,240(sp)
    3778:	|            move.l 240(sp),d0
    377c:	|            move.l d0,19c3e <specialSettings>

	desiredfps = 1000/FGetC (fp);
    3782:	|            move.l 292(sp),236(sp)
    3788:	|            move.l 19c62 <DOSBase>,d0
    378e:	|            movea.l d0,a6
    3790:	|            move.l 236(sp),d1
    3794:	|            jsr -306(a6)
    3798:	|            move.l d0,232(sp)
    379c:	|            move.l 232(sp),d0
    37a0:	|            move.l d0,-(sp)
    37a2:	|            pea 3e8 <encodeFilename+0xea>
    37a6:	|            jsr 1397c <__divsi3>
    37ac:	|            addq.l #8,sp
    37ae:	|            move.l d0,1813a <desiredfps>

	FreeVec(readString (fp));
    37b4:	|            move.l 292(sp),-(sp)
    37b8:	|            jsr b02 <readString>
    37be:	|            addq.l #4,sp
    37c0:	|            move.l d0,228(sp)
    37c4:	|            move.l 19c5a <SysBase>,d0
    37ca:	|            movea.l d0,a6
    37cc:	|            movea.l 228(sp),a1
    37d0:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    37d4:	|            move.l 292(sp),224(sp)
    37da:	|            move.l #105472,220(sp)
    37e2:	|            moveq #8,d0
    37e4:	|            move.l d0,216(sp)
    37e8:	|            moveq #1,d1
    37ea:	|            move.l d1,212(sp)
    37ee:	|            move.l 19c62 <DOSBase>,d0
    37f4:	|            movea.l d0,a6
    37f6:	|            move.l 224(sp),d1
    37fa:	|            move.l 220(sp),d2
    37fe:	|            move.l 216(sp),d3
    3802:	|            move.l 212(sp),d4
    3806:	|            jsr -324(a6)
    380a:	|            move.l d0,208(sp)
    380e:	|            move.l 208(sp),d0
    3812:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    3816:	|            moveq #1,d0
    3818:	|            cmp.l 204(sp),d0
    381c:	|        /-- beq.s 382c <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    381e:	|        |   pea 14235 <PutChar+0x821>
    3824:	|        |   jsr 12e08 <KPrintF>
    382a:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    382c:	|        \-> move.l 19c08 <gameVersion>,d0
    3832:	|            cmpi.l #258,d0
    3838:	|        /-- ble.s 3848 <initSludge+0x318>
    383a:	|        |   move.l 292(sp),-(sp)
    383e:	|        |   jsr b02 <readString>
    3844:	|        |   addq.l #4,sp
    3846:	|     /--|-- bra.s 385c <initSludge+0x32c>
    3848:	|     |  \-> pea 14253 <PutChar+0x83f>
    384e:	|     |      pea 14253 <PutChar+0x83f>
    3854:	|     |      jsr 102e0 <joinStrings>
    385a:	|     |      addq.l #8,sp
    385c:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    3860:	|            move.l 19c08 <gameVersion>,d0
    3866:	|            cmpi.l #258,d0
    386c:	|     /----- ble.s 388e <initSludge+0x35e>
    386e:	|     |      move.l 292(sp),196(sp)
    3874:	|     |      move.l 19c62 <DOSBase>,d0
    387a:	|     |      movea.l d0,a6
    387c:	|     |      move.l 196(sp),d1
    3880:	|     |      jsr -306(a6)
    3884:	|     |      move.l d0,192(sp)
    3888:	|     |      move.l 192(sp),d0
    388c:	|     |  /-- bra.s 3890 <initSludge+0x360>
    388e:	|     \--|-> moveq #0,d0
    3890:	|        \-> move.l d0,19d3a <gameSettings+0x4>
	makeLanguageTable (fp);
    3896:	|            move.l 292(sp),-(sp)
    389a:	|            jsr fcb2 <makeLanguageTable>
    38a0:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    38a2:	|            move.l 19c08 <gameVersion>,d0
    38a8:	|            cmpi.l #261,d0
    38ae:	|        /-- ble.s 38fc <initSludge+0x3cc>
	{
		FGetC(fp);
    38b0:	|        |   move.l 292(sp),188(sp)
    38b6:	|        |   move.l 19c62 <DOSBase>,d0
    38bc:	|        |   movea.l d0,a6
    38be:	|        |   move.l 188(sp),d1
    38c2:	|        |   jsr -306(a6)
    38c6:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    38ca:	|        |   move.l 292(sp),180(sp)
    38d0:	|        |   move.l 19c62 <DOSBase>,d0
    38d6:	|        |   movea.l d0,a6
    38d8:	|        |   move.l 180(sp),d1
    38dc:	|        |   jsr -306(a6)
    38e0:	|        |   move.l d0,176(sp)
		getFloat (fp);
    38e4:	|        |   move.l 292(sp),-(sp)
    38e8:	|        |   jsr 7d8 <getFloat>
    38ee:	|        |   addq.l #4,sp
		getFloat (fp);
    38f0:	|        |   move.l 292(sp),-(sp)
    38f4:	|        |   jsr 7d8 <getFloat>
    38fa:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    38fc:	|        \-> move.l 292(sp),-(sp)
    3900:	|            jsr b02 <readString>
    3906:	|            addq.l #4,sp
    3908:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    390c:	|            pea 14254 <PutChar+0x840>
    3912:	|            move.l 176(sp),-(sp)
    3916:	|            jsr 10260 <strcmp>
    391c:	|            addq.l #8,sp
    391e:	|            tst.l d0
    3920:	|        /-- beq.s 3928 <initSludge+0x3f8>
		return FALSE;
    3922:	|        |   clr.w d0
    3924:	+--------|-- bra.w 3c9c <initSludge+0x76c>
	}
	FreeVec( checker);
    3928:	|        \-> move.l 172(sp),168(sp)
    392e:	|            move.l 19c5a <SysBase>,d0
    3934:	|            movea.l d0,a6
    3936:	|            movea.l 168(sp),a1
    393a:	|            jsr -690(a6)
	checker = NULL;
    393e:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    3942:	|            move.l 292(sp),164(sp)
    3948:	|            move.l 19c62 <DOSBase>,d0
    394e:	|            movea.l d0,a6
    3950:	|            move.l 164(sp),d1
    3954:	|            jsr -306(a6)
    3958:	|            move.l d0,160(sp)
    395c:	|            move.l 160(sp),d0
    3960:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    3964:	|            moveq #0,d0
    3966:	|            move.b 159(sp),d0
    396a:	|            moveq #1,d1
    396c:	|            and.l d1,d0
    396e:	|        /-- beq.s 39c6 <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    3970:	|        |   move.l 19c62 <DOSBase>,d0
    3976:	|        |   movea.l d0,a6
    3978:	|        |   jsr -60(a6)
    397c:	|        |   move.l d0,38(sp)
    3980:	|        |   move.l 38(sp),d0
    3984:	|        |   move.l d0,34(sp)
    3988:	|        |   move.l #82524,30(sp)
    3990:	|        |   moveq #54,d0
    3992:	|        |   move.l d0,26(sp)
    3996:	|        |   move.l 19c62 <DOSBase>,d0
    399c:	|        |   movea.l d0,a6
    399e:	|        |   move.l 34(sp),d1
    39a2:	|        |   move.l 30(sp),d2
    39a6:	|        |   move.l 26(sp),d3
    39aa:	|        |   jsr -48(a6)
    39ae:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    39b2:	|        |   pea 14293 <cursors.c.412ac4f3+0x3e>
    39b8:	|        |   jsr 12e08 <KPrintF>
    39be:	|        |   addq.l #4,sp
		return FALSE;
    39c0:	|        |   clr.w d0
    39c2:	+--------|-- bra.w 3c9c <initSludge+0x76c>
	}

	numGlobals = get2bytes (fp);
    39c6:	|        \-> move.l 292(sp),-(sp)
    39ca:	|            jsr 6bc <get2bytes>
    39d0:	|            addq.l #4,sp
    39d2:	|            move.l d0,19c32 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    39d8:	|            move.l 19c32 <numGlobals>,d0
    39de:	|            lsl.l #3,d0
    39e0:	|            move.l d0,154(sp)
    39e4:	|            clr.l 150(sp)
    39e8:	|            move.l 19c5a <SysBase>,d0
    39ee:	|            movea.l d0,a6
    39f0:	|            move.l 154(sp),d0
    39f4:	|            move.l 150(sp),d1
    39f8:	|            jsr -684(a6)
    39fc:	|            move.l d0,146(sp)
    3a00:	|            move.l 146(sp),d0
    3a04:	|            move.l d0,19c0c <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    3a0a:	|            move.l 19c0c <globalVars>,d0
    3a10:	|        /-- bne.s 3a2e <initSludge+0x4fe>
    3a12:	|        |   move.l 19c32 <numGlobals>,d0
    3a18:	|        +-- ble.s 3a2e <initSludge+0x4fe>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    3a1a:	|        |   pea 142cb <cursors.c.412ac4f3+0x76>
    3a20:	|        |   jsr 12e08 <KPrintF>
    3a26:	|        |   addq.l #4,sp
		return FALSE;
    3a28:	|        |   clr.w d0
    3a2a:	+--------|-- bra.w 3c9c <initSludge+0x76c>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    3a2e:	|        \-> clr.l 312(sp)
    3a32:	|        /-- bra.s 3a4a <initSludge+0x51a>
    3a34:	|     /--|-> move.l 19c0c <globalVars>,d1
    3a3a:	|     |  |   move.l 312(sp),d0
    3a3e:	|     |  |   lsl.l #3,d0
    3a40:	|     |  |   movea.l d1,a0
    3a42:	|     |  |   adda.l d0,a0
    3a44:	|     |  |   clr.l (a0)
    3a46:	|     |  |   addq.l #1,312(sp)
    3a4a:	|     |  \-> move.l 19c32 <numGlobals>,d0
    3a50:	|     |      cmp.l 312(sp),d0
    3a54:	|     \----- bgt.s 3a34 <initSludge+0x504>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    3a56:	|            move.l 19d3a <gameSettings+0x4>,d0
    3a5c:	|            clr.l -(sp)
    3a5e:	|            move.l d0,-(sp)
    3a60:	|            move.l 300(sp),-(sp)
    3a64:	|            jsr 4a16 <setFileIndices>
    3a6a:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    3a6e:	|            pea 1 <_start+0x1>
    3a72:	|            jsr 46d0 <getNumberedString>
    3a78:	|            addq.l #4,sp
    3a7a:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    3a7e:	|            move.l 142(sp),-(sp)
    3a82:	|            jsr 2fe <encodeFilename>
    3a88:	|            addq.l #4,sp
    3a8a:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    3a8e:	|            move.l 142(sp),134(sp)
    3a94:	|            move.l 19c5a <SysBase>,d0
    3a9a:	|            movea.l d0,a6
    3a9c:	|            movea.l 134(sp),a1
    3aa0:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    3aa4:	|            move.l 138(sp),130(sp)
    3aaa:	|            move.l 19c62 <DOSBase>,d0
    3ab0:	|            movea.l d0,a6
    3ab2:	|            move.l 130(sp),d1
    3ab6:	|            jsr -120(a6)
    3aba:	|            move.l d0,126(sp)
    3abe:	|            move.l 126(sp),d0
    3ac2:	|            move.l d0,296(sp)
	if(lock == 0) {
    3ac6:	|        /-- bne.s 3af4 <initSludge+0x5c4>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    3ac8:	|        |   move.l 138(sp),122(sp)
    3ace:	|        |   moveq #-2,d1
    3ad0:	|        |   move.l d1,118(sp)
    3ad4:	|        |   move.l 19c62 <DOSBase>,d0
    3ada:	|        |   movea.l d0,a6
    3adc:	|        |   move.l 122(sp),d1
    3ae0:	|        |   move.l 118(sp),d2
    3ae4:	|        |   jsr -84(a6)
    3ae8:	|        |   move.l d0,114(sp)
    3aec:	|        |   move.l 114(sp),d0
    3af0:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    3af4:	|        \-> move.l 296(sp),110(sp)
    3afa:	|            move.l 19c62 <DOSBase>,d0
    3b00:	|            movea.l d0,a6
    3b02:	|            move.l 110(sp),d1
    3b06:	|            jsr -126(a6)
    3b0a:	|            move.l d0,106(sp)
    3b0e:	|            move.l 106(sp),d0
    3b12:	|        /-- bne.s 3b6e <initSludge+0x63e>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    3b14:	|        |   move.l 138(sp),-(sp)
    3b18:	|        |   pea 142fe <cursors.c.412ac4f3+0xa9>
    3b1e:	|        |   jsr 12e08 <KPrintF>
    3b24:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    3b26:	|        |   move.l 19c62 <DOSBase>,d0
    3b2c:	|        |   movea.l d0,a6
    3b2e:	|        |   jsr -60(a6)
    3b32:	|        |   move.l d0,58(sp)
    3b36:	|        |   move.l 58(sp),d0
    3b3a:	|        |   move.l d0,54(sp)
    3b3e:	|        |   move.l #82731,50(sp)
    3b46:	|        |   moveq #40,d0
    3b48:	|        |   move.l d0,46(sp)
    3b4c:	|        |   move.l 19c62 <DOSBase>,d0
    3b52:	|        |   movea.l d0,a6
    3b54:	|        |   move.l 54(sp),d1
    3b58:	|        |   move.l 50(sp),d2
    3b5c:	|        |   move.l 46(sp),d3
    3b60:	|        |   jsr -48(a6)
    3b64:	|        |   move.l d0,42(sp)
		return FALSE;
    3b68:	|        |   clr.w d0
    3b6a:	+--------|-- bra.w 3c9c <initSludge+0x76c>
	}

	FreeVec(gameName);
    3b6e:	|        \-> move.l 138(sp),102(sp)
    3b74:	|            move.l 19c5a <SysBase>,d0
    3b7a:	|            movea.l d0,a6
    3b7c:	|            movea.l 102(sp),a1
    3b80:	|            jsr -690(a6)

	readIniFile (filename);
    3b84:	|            move.l 320(sp),-(sp)
    3b88:	|            jsr fde6 <readIniFile>
    3b8e:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    3b90:	|            jsr fbb8 <getLanguageForFileB>
    3b96:	|            move.l d0,18120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    3b9c:	|            move.l 18120 <languageNum>,d0
    3ba2:	|        /-- bpl.s 3bb2 <initSludge+0x682>
    3ba4:	|        |   pea 14354 <cursors.c.412ac4f3+0xff>
    3baa:	|        |   jsr 12e08 <KPrintF>
    3bb0:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    3bb2:	|        \-> move.l 18120 <languageNum>,d0
    3bb8:	|            move.l d0,d1
    3bba:	|            move.l 19d3a <gameSettings+0x4>,d0
    3bc0:	|            move.l d1,-(sp)
    3bc2:	|            move.l d0,-(sp)
    3bc4:	|            clr.l -(sp)
    3bc6:	|            jsr 4a16 <setFileIndices>
    3bcc:	|            lea 12(sp),sp

	if (dataFol[0]) {
    3bd0:	|            movea.l 200(sp),a0
    3bd4:	|            move.b (a0),d0
    3bd6:	|     /----- beq.w 3c80 <initSludge+0x750>
		char *dataFolder = encodeFilename(dataFol);
    3bda:	|     |      move.l 200(sp),-(sp)
    3bde:	|     |      jsr 2fe <encodeFilename>
    3be4:	|     |      addq.l #4,sp
    3be6:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    3bea:	|     |      move.l 98(sp),94(sp)
    3bf0:	|     |      move.l 19c62 <DOSBase>,d0
    3bf6:	|     |      movea.l d0,a6
    3bf8:	|     |      move.l 94(sp),d1
    3bfc:	|     |      jsr -120(a6)
    3c00:	|     |      move.l d0,90(sp)
    3c04:	|     |      move.l 90(sp),d0
    3c08:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    3c0c:	|     |  /-- bne.s 3c3a <initSludge+0x70a>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    3c0e:	|     |  |   move.l 98(sp),86(sp)
    3c14:	|     |  |   moveq #-2,d1
    3c16:	|     |  |   move.l d1,82(sp)
    3c1a:	|     |  |   move.l 19c62 <DOSBase>,d0
    3c20:	|     |  |   movea.l d0,a6
    3c22:	|     |  |   move.l 86(sp),d1
    3c26:	|     |  |   move.l 82(sp),d2
    3c2a:	|     |  |   jsr -84(a6)
    3c2e:	|     |  |   move.l d0,78(sp)
    3c32:	|     |  |   move.l 78(sp),d0
    3c36:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    3c3a:	|     |  \-> move.l 296(sp),74(sp)
    3c40:	|     |      move.l 19c62 <DOSBase>,d0
    3c46:	|     |      movea.l d0,a6
    3c48:	|     |      move.l 74(sp),d1
    3c4c:	|     |      jsr -126(a6)
    3c50:	|     |      move.l d0,70(sp)
    3c54:	|     |      move.l 70(sp),d0
    3c58:	|     |  /-- bne.s 3c6a <initSludge+0x73a>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    3c5a:	|     |  |   move.l 19c62 <DOSBase>,d0
    3c60:	|     |  |   movea.l d0,a6
    3c62:	|     |  |   jsr -60(a6)
    3c66:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    3c6a:	|     |  \-> move.l 98(sp),62(sp)
    3c70:	|     |      move.l 19c5a <SysBase>,d0
    3c76:	|     |      movea.l d0,a6
    3c78:	|     |      movea.l 62(sp),a1
    3c7c:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    3c80:	|     \----> movea.l 19b5e <winHeight>,a0
    3c86:	|            lea -15(a0),a0
    3c8a:	|            move.l a0,d0
    3c8c:	|            move.l d0,-(sp)
    3c8e:	|            pea a <_start+0xa>
    3c92:	|            jsr 5428 <positionStatus>
    3c98:	|            addq.l #8,sp

	return TRUE;
    3c9a:	|            moveq #1,d0
}
    3c9c:	\----------> movem.l (sp)+,d2-d4/a2/a6
    3ca0:	             lea 296(sp),sp
    3ca4:	             rts

00003ca6 <killSpeechTimers>:

void killSpeechTimers () {
    3ca6:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    3ca8:	          move.l 19bf6 <allRunningFunctions>,(sp)

	while (thisFunction) {
    3cae:	   /----- bra.s 3cda <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    3cb0:	/--|----> movea.l (sp),a0
    3cb2:	|  |      move.b 56(a0),d0
    3cb6:	|  |  /-- bne.s 3cd4 <killSpeechTimers+0x2e>
    3cb8:	|  |  |   movea.l (sp),a0
    3cba:	|  |  |   move.w 50(a0),d0
    3cbe:	|  |  +-- beq.s 3cd4 <killSpeechTimers+0x2e>
    3cc0:	|  |  |   movea.l (sp),a0
    3cc2:	|  |  |   move.l 12(a0),d0
    3cc6:	|  |  +-- beq.s 3cd4 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    3cc8:	|  |  |   movea.l (sp),a0
    3cca:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    3cce:	|  |  |   movea.l (sp),a0
    3cd0:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    3cd4:	|  |  \-> movea.l (sp),a0
    3cd6:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    3cda:	|  \----> tst.l (sp)
    3cdc:	\-------- bne.s 3cb0 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    3cde:	          jsr 5966 <killAllSpeech>
}
    3ce4:	          nop
    3ce6:	          addq.l #4,sp
    3ce8:	          rts

00003cea <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    3cea:	             lea -52(sp),sp
    3cee:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    3cf0:	             movea.l 60(sp),a0
    3cf4:	             move.l (a0),d0
    3cf6:	             move.l d0,-(sp)
    3cf8:	             jsr 4956 <openSubSlice>
    3cfe:	             addq.l #4,sp
    3d00:	             tst.w d0
    3d02:	         /-- bne.s 3d0a <loadFunctionCode+0x20>
    3d04:	         |   clr.w d0
    3d06:	/--------|-- bra.w 3ed4 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    3d0a:	|        \-> move.l 19c42 <bigDataFile>,44(sp)
    3d12:	|            move.l 19c62 <DOSBase>,d0
    3d18:	|            movea.l d0,a6
    3d1a:	|            move.l 44(sp),d1
    3d1e:	|            jsr -306(a6)
    3d22:	|            move.l d0,40(sp)
    3d26:	|            move.l 40(sp),d0
    3d2a:	|            move.l d0,d0
    3d2c:	|            movea.l 60(sp),a0
    3d30:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    3d34:	|            move.l 19c42 <bigDataFile>,d0
    3d3a:	|            move.l d0,-(sp)
    3d3c:	|            jsr 6bc <get2bytes>
    3d42:	|            addq.l #4,sp
    3d44:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    3d48:	|            move.l 19c42 <bigDataFile>,d0
    3d4e:	|            move.l d0,-(sp)
    3d50:	|            jsr 6bc <get2bytes>
    3d56:	|            addq.l #4,sp
    3d58:	|            movea.l 60(sp),a0
    3d5c:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    3d60:	|            move.l 19c42 <bigDataFile>,d0
    3d66:	|            move.l d0,-(sp)
    3d68:	|            jsr 6bc <get2bytes>
    3d6e:	|            addq.l #4,sp
    3d70:	|            movea.l 60(sp),a0
    3d74:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    3d78:	|            move.l 36(sp),d0
    3d7c:	|            lsl.l #3,d0
    3d7e:	|            move.l d0,32(sp)
    3d82:	|            clr.l 28(sp)
    3d86:	|            move.l 19c5a <SysBase>,d0
    3d8c:	|            movea.l d0,a6
    3d8e:	|            move.l 32(sp),d0
    3d92:	|            move.l 28(sp),d1
    3d96:	|            jsr -684(a6)
    3d9a:	|            move.l d0,24(sp)
    3d9e:	|            move.l 24(sp),d0
    3da2:	|            movea.l 60(sp),a0
    3da6:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    3daa:	|            movea.l 60(sp),a0
    3dae:	|            move.l 4(a0),d0
    3db2:	|        /-- bne.s 3dc8 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3db4:	|        |   pea 1437f <cursors.c.412ac4f3+0x12a>
    3dba:	|        |   jsr 12e08 <KPrintF>
    3dc0:	|        |   addq.l #4,sp
		return FALSE;
    3dc2:	|        |   clr.w d0
    3dc4:	+--------|-- bra.w 3ed4 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3dc8:	|        \-> clr.l 52(sp)
    3dcc:	|        /-- bra.s 3e2e <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    3dce:	|     /--|-> move.l 19c42 <bigDataFile>,8(sp)
    3dd6:	|     |  |   move.l 19c62 <DOSBase>,d0
    3ddc:	|     |  |   movea.l d0,a6
    3dde:	|     |  |   move.l 8(sp),d1
    3de2:	|     |  |   jsr -306(a6)
    3de6:	|     |  |   move.l d0,4(sp)
    3dea:	|     |  |   move.l 4(sp),d1
    3dee:	|     |  |   movea.l 60(sp),a0
    3df2:	|     |  |   movea.l 4(a0),a0
    3df6:	|     |  |   move.l 52(sp),d0
    3dfa:	|     |  |   lsl.l #3,d0
    3dfc:	|     |  |   adda.l d0,a0
    3dfe:	|     |  |   move.l d1,d0
    3e00:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    3e02:	|     |  |   move.l 19c42 <bigDataFile>,d0
    3e08:	|     |  |   move.l d0,-(sp)
    3e0a:	|     |  |   jsr 6bc <get2bytes>
    3e10:	|     |  |   addq.l #4,sp
    3e12:	|     |  |   move.l d0,d1
    3e14:	|     |  |   movea.l 60(sp),a0
    3e18:	|     |  |   movea.l 4(a0),a0
    3e1c:	|     |  |   move.l 52(sp),d0
    3e20:	|     |  |   lsl.l #3,d0
    3e22:	|     |  |   adda.l d0,a0
    3e24:	|     |  |   move.l d1,d0
    3e26:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3e2a:	|     |  |   addq.l #1,52(sp)
    3e2e:	|     |  \-> move.l 52(sp),d0
    3e32:	|     |      cmp.l 36(sp),d0
    3e36:	|     \----- bcs.s 3dce <loadFunctionCode+0xe4>
	}

	finishAccess ();
    3e38:	|            jsr 46c6 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    3e3e:	|            movea.l 60(sp),a0
    3e42:	|            move.l 8(a0),d0
    3e46:	|  /-------- ble.w 3eca <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    3e4a:	|  |         movea.l 60(sp),a0
    3e4e:	|  |         move.l 8(a0),d0
    3e52:	|  |         lsl.l #3,d0
    3e54:	|  |         move.l d0,20(sp)
    3e58:	|  |         clr.l 16(sp)
    3e5c:	|  |         move.l 19c5a <SysBase>,d0
    3e62:	|  |         movea.l d0,a6
    3e64:	|  |         move.l 20(sp),d0
    3e68:	|  |         move.l 16(sp),d1
    3e6c:	|  |         jsr -684(a6)
    3e70:	|  |         move.l d0,12(sp)
    3e74:	|  |         move.l 12(sp),d0
    3e78:	|  |         movea.l 60(sp),a0
    3e7c:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    3e80:	|  |         movea.l 60(sp),a0
    3e84:	|  |         move.l 20(a0),d0
    3e88:	|  |     /-- bne.s 3e9c <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    3e8a:	|  |     |   pea 1437f <cursors.c.412ac4f3+0x12a>
    3e90:	|  |     |   jsr 12e08 <KPrintF>
    3e96:	|  |     |   addq.l #4,sp
			return FALSE;
    3e98:	|  |     |   clr.w d0
    3e9a:	+--|-----|-- bra.s 3ed4 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    3e9c:	|  |     \-> clr.l 48(sp)
    3ea0:	|  |     /-- bra.s 3eba <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    3ea2:	|  |  /--|-> movea.l 60(sp),a0
    3ea6:	|  |  |  |   move.l 20(a0),d1
    3eaa:	|  |  |  |   move.l 48(sp),d0
    3eae:	|  |  |  |   lsl.l #3,d0
    3eb0:	|  |  |  |   movea.l d1,a0
    3eb2:	|  |  |  |   adda.l d0,a0
    3eb4:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3eb6:	|  |  |  |   addq.l #1,48(sp)
    3eba:	|  |  |  \-> movea.l 60(sp),a0
    3ebe:	|  |  |      move.l 8(a0),d0
    3ec2:	|  |  |      cmp.l 48(sp),d0
    3ec6:	|  |  \----- bgt.s 3ea2 <loadFunctionCode+0x1b8>
    3ec8:	|  |     /-- bra.s 3ed2 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    3eca:	|  \-----|-> movea.l 60(sp),a0
    3ece:	|        |   clr.l 8(a0)
	}
	return TRUE;
    3ed2:	|        \-> moveq #1,d0
}
    3ed4:	\----------> movea.l (sp)+,a6
    3ed6:	             lea 52(sp),sp
    3eda:	             rts

00003edc <loadHandlers>:

void loadHandlers (BPTR fp) {
    3edc:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    3ede:	movea.l 1811c <currentEvents>,a2
    3ee4:	move.l 8(sp),-(sp)
    3ee8:	jsr 6bc <get2bytes>
    3eee:	addq.l #4,sp
    3ef0:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    3ef2:	movea.l 1811c <currentEvents>,a2
    3ef8:	move.l 8(sp),-(sp)
    3efc:	jsr 6bc <get2bytes>
    3f02:	addq.l #4,sp
    3f04:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    3f08:	movea.l 1811c <currentEvents>,a2
    3f0e:	move.l 8(sp),-(sp)
    3f12:	jsr 6bc <get2bytes>
    3f18:	addq.l #4,sp
    3f1a:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    3f1e:	movea.l 1811c <currentEvents>,a2
    3f24:	move.l 8(sp),-(sp)
    3f28:	jsr 6bc <get2bytes>
    3f2e:	addq.l #4,sp
    3f30:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    3f34:	movea.l 1811c <currentEvents>,a2
    3f3a:	move.l 8(sp),-(sp)
    3f3e:	jsr 6bc <get2bytes>
    3f44:	addq.l #4,sp
    3f46:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    3f4a:	movea.l 1811c <currentEvents>,a2
    3f50:	move.l 8(sp),-(sp)
    3f54:	jsr 6bc <get2bytes>
    3f5a:	addq.l #4,sp
    3f5c:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    3f60:	movea.l 1811c <currentEvents>,a2
    3f66:	move.l 8(sp),-(sp)
    3f6a:	jsr 6bc <get2bytes>
    3f70:	addq.l #4,sp
    3f72:	move.l d0,24(a2)
}
    3f76:	nop
    3f78:	movea.l (sp)+,a2
    3f7a:	rts

00003f7c <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    3f7c:	       lea -312(sp),sp
    3f80:	       movem.l d2-d3/a6,-(sp)
    3f84:	       move.l 332(sp),d1
    3f88:	       move.l 336(sp),d0
    3f8c:	       move.b d1,d1
    3f8e:	       move.b d1,16(sp)
    3f92:	       move.b d0,d0
    3f94:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    3f98:	       move.l 328(sp),318(sp)
    3f9e:	       move.l #1005,314(sp)
    3fa6:	       move.l 19c62 <DOSBase>,d0
    3fac:	       movea.l d0,a6
    3fae:	       move.l 318(sp),d1
    3fb2:	       move.l 314(sp),d2
    3fb6:	       jsr -30(a6)
    3fba:	       move.l d0,310(sp)
    3fbe:	       move.l 310(sp),d0
    3fc2:	       move.l d0,306(sp)

	if (! fp) {
    3fc6:	   /-- bne.s 4022 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    3fc8:	   |   move.l 19c62 <DOSBase>,d0
    3fce:	   |   movea.l d0,a6
    3fd0:	   |   jsr -60(a6)
    3fd4:	   |   move.l d0,154(sp)
    3fd8:	   |   move.l 154(sp),d0
    3fdc:	   |   move.l d0,150(sp)
    3fe0:	   |   move.l #82856,146(sp)
    3fe8:	   |   moveq #31,d0
    3fea:	   |   move.l d0,142(sp)
    3fee:	   |   move.l 19c62 <DOSBase>,d0
    3ff4:	   |   movea.l d0,a6
    3ff6:	   |   move.l 150(sp),d1
    3ffa:	   |   move.l 146(sp),d2
    3ffe:	   |   move.l 142(sp),d3
    4002:	   |   jsr -48(a6)
    4006:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    400a:	   |   move.l 328(sp),-(sp)
    400e:	   |   pea 143c8 <cursors.c.412ac4f3+0x173>
    4014:	   |   jsr 12e08 <KPrintF>
    401a:	   |   addq.l #8,sp
		return NULL;
    401c:	   |   moveq #0,d0
    401e:	/--|-- bra.w 42e2 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    4022:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    4026:	|      move.l 306(sp),302(sp)
    402c:	|      move.l 19c62 <DOSBase>,d0
    4032:	|      movea.l d0,a6
    4034:	|      move.l 302(sp),d1
    4038:	|      jsr -306(a6)
    403c:	|      move.l d0,298(sp)
    4040:	|      move.l 298(sp),d0
    4044:	|      moveq #83,d1
    4046:	|      cmp.l d0,d1
    4048:	|  /-- beq.s 4050 <openAndVerify+0xd4>
    404a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    4050:	|  \-> move.l 306(sp),294(sp)
    4056:	|      move.l 19c62 <DOSBase>,d0
    405c:	|      movea.l d0,a6
    405e:	|      move.l 294(sp),d1
    4062:	|      jsr -306(a6)
    4066:	|      move.l d0,290(sp)
    406a:	|      move.l 290(sp),d0
    406e:	|      moveq #76,d1
    4070:	|      cmp.l d0,d1
    4072:	|  /-- beq.s 407a <openAndVerify+0xfe>
    4074:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    407a:	|  \-> move.l 306(sp),286(sp)
    4080:	|      move.l 19c62 <DOSBase>,d0
    4086:	|      movea.l d0,a6
    4088:	|      move.l 286(sp),d1
    408c:	|      jsr -306(a6)
    4090:	|      move.l d0,282(sp)
    4094:	|      move.l 282(sp),d0
    4098:	|      moveq #85,d1
    409a:	|      cmp.l d0,d1
    409c:	|  /-- beq.s 40a4 <openAndVerify+0x128>
    409e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    40a4:	|  \-> move.l 306(sp),278(sp)
    40aa:	|      move.l 19c62 <DOSBase>,d0
    40b0:	|      movea.l d0,a6
    40b2:	|      move.l 278(sp),d1
    40b6:	|      jsr -306(a6)
    40ba:	|      move.l d0,274(sp)
    40be:	|      move.l 274(sp),d0
    40c2:	|      moveq #68,d1
    40c4:	|      cmp.l d0,d1
    40c6:	|  /-- beq.s 40ce <openAndVerify+0x152>
    40c8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    40ce:	|  \-> move.l 306(sp),270(sp)
    40d4:	|      move.l 19c62 <DOSBase>,d0
    40da:	|      movea.l d0,a6
    40dc:	|      move.l 270(sp),d1
    40e0:	|      jsr -306(a6)
    40e4:	|      move.l d0,266(sp)
    40e8:	|      move.l 266(sp),d1
    40ec:	|      move.b 16(sp),d0
    40f0:	|      ext.w d0
    40f2:	|      movea.w d0,a0
    40f4:	|      cmpa.l d1,a0
    40f6:	|  /-- beq.s 40fe <openAndVerify+0x182>
    40f8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    40fe:	|  \-> move.l 306(sp),262(sp)
    4104:	|      move.l 19c62 <DOSBase>,d0
    410a:	|      movea.l d0,a6
    410c:	|      move.l 262(sp),d1
    4110:	|      jsr -306(a6)
    4114:	|      move.l d0,258(sp)
    4118:	|      move.l 258(sp),d1
    411c:	|      move.b 14(sp),d0
    4120:	|      ext.w d0
    4122:	|      movea.w d0,a0
    4124:	|      cmpa.l d1,a0
    4126:	|  /-- beq.s 412e <openAndVerify+0x1b2>
    4128:	|  |   move.w #1,322(sp)
	if (headerBad) {
    412e:	|  \-> tst.w 322(sp)
    4132:	|  /-- beq.s 418a <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    4134:	|  |   move.l 19c62 <DOSBase>,d0
    413a:	|  |   movea.l d0,a6
    413c:	|  |   jsr -60(a6)
    4140:	|  |   move.l d0,174(sp)
    4144:	|  |   move.l 174(sp),d0
    4148:	|  |   move.l d0,170(sp)
    414c:	|  |   move.l #82919,166(sp)
    4154:	|  |   moveq #31,d0
    4156:	|  |   move.l d0,162(sp)
    415a:	|  |   move.l 19c62 <DOSBase>,d0
    4160:	|  |   movea.l d0,a6
    4162:	|  |   move.l 170(sp),d1
    4166:	|  |   move.l 166(sp),d2
    416a:	|  |   move.l 162(sp),d3
    416e:	|  |   jsr -48(a6)
    4172:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    4176:	|  |   pea 143e7 <cursors.c.412ac4f3+0x192>
    417c:	|  |   jsr 12e08 <KPrintF>
    4182:	|  |   addq.l #4,sp
		return NULL;
    4184:	|  |   moveq #0,d0
    4186:	+--|-- bra.w 42e2 <openAndVerify+0x366>
	}
	FGetC (fp);
    418a:	|  \-> move.l 306(sp),254(sp)
    4190:	|      move.l 19c62 <DOSBase>,d0
    4196:	|      movea.l d0,a6
    4198:	|      move.l 254(sp),d1
    419c:	|      jsr -306(a6)
    41a0:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    41a4:	|      nop
    41a6:	|  /-> move.l 306(sp),246(sp)
    41ac:	|  |   move.l 19c62 <DOSBase>,d0
    41b2:	|  |   movea.l d0,a6
    41b4:	|  |   move.l 246(sp),d1
    41b8:	|  |   jsr -306(a6)
    41bc:	|  |   move.l d0,242(sp)
    41c0:	|  |   move.l 242(sp),d0
    41c4:	|  \-- bne.s 41a6 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    41c6:	|      move.l 306(sp),238(sp)
    41cc:	|      move.l 19c62 <DOSBase>,d0
    41d2:	|      movea.l d0,a6
    41d4:	|      move.l 238(sp),d1
    41d8:	|      jsr -306(a6)
    41dc:	|      move.l d0,234(sp)
    41e0:	|      move.l 234(sp),d0
    41e4:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    41e8:	|      move.l 306(sp),226(sp)
    41ee:	|      move.l 19c62 <DOSBase>,d0
    41f4:	|      movea.l d0,a6
    41f6:	|      move.l 226(sp),d1
    41fa:	|      jsr -306(a6)
    41fe:	|      move.l d0,222(sp)
    4202:	|      move.l 222(sp),d0
    4206:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    420a:	|      move.l 230(sp),d0
    420e:	|      lsl.l #8,d0
    4210:	|      add.l 218(sp),d0
    4214:	|      movea.l 344(sp),a0
    4218:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    421a:	|      movea.l 344(sp),a0
    421e:	|      move.l (a0),d0
    4220:	|      cmpi.l #514,d0
    4226:	|  /-- ble.s 427c <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    4228:	|  |   move.l 19c62 <DOSBase>,d0
    422e:	|  |   movea.l d0,a6
    4230:	|  |   jsr -60(a6)
    4234:	|  |   move.l d0,194(sp)
    4238:	|  |   move.l 194(sp),d0
    423c:	|  |   move.l d0,190(sp)
    4240:	|  |   move.l #82946,186(sp)
    4248:	|  |   moveq #100,d1
    424a:	|  |   move.l d1,182(sp)
    424e:	|  |   move.l 19c62 <DOSBase>,d0
    4254:	|  |   movea.l d0,a6
    4256:	|  |   move.l 190(sp),d1
    425a:	|  |   move.l 186(sp),d2
    425e:	|  |   move.l 182(sp),d3
    4262:	|  |   jsr -48(a6)
    4266:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    426a:	|  |   pea 14402 <cursors.c.412ac4f3+0x1ad>
    4270:	|  |   jsr 12e08 <KPrintF>
    4276:	|  |   addq.l #4,sp
		return NULL;
    4278:	|  |   moveq #0,d0
    427a:	+--|-- bra.s 42e2 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    427c:	|  \-> movea.l 344(sp),a0
    4280:	|      move.l (a0),d0
    4282:	|      cmpi.l #257,d0
    4288:	|  /-- bgt.s 42de <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    428a:	|  |   move.l 19c62 <DOSBase>,d0
    4290:	|  |   movea.l d0,a6
    4292:	|  |   jsr -60(a6)
    4296:	|  |   move.l d0,214(sp)
    429a:	|  |   move.l 214(sp),d0
    429e:	|  |   move.l d0,210(sp)
    42a2:	|  |   move.l #83015,206(sp)
    42aa:	|  |   moveq #100,d0
    42ac:	|  |   move.l d0,202(sp)
    42b0:	|  |   move.l 19c62 <DOSBase>,d0
    42b6:	|  |   movea.l d0,a6
    42b8:	|  |   move.l 210(sp),d1
    42bc:	|  |   move.l 206(sp),d2
    42c0:	|  |   move.l 202(sp),d3
    42c4:	|  |   jsr -48(a6)
    42c8:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    42cc:	|  |   pea 14447 <cursors.c.412ac4f3+0x1f2>
    42d2:	|  |   jsr 12e08 <KPrintF>
    42d8:	|  |   addq.l #4,sp
		return NULL;
    42da:	|  |   moveq #0,d0
    42dc:	+--|-- bra.s 42e2 <openAndVerify+0x366>
	}
	return fp;
    42de:	|  \-> move.l 306(sp),d0
}
    42e2:	\----> movem.l (sp)+,d2-d3/a6
    42e6:	       lea 312(sp),sp
    42ea:	       rts

000042ec <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    42ec:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    42ee:	          move.l #105462,(sp)
	while (* huntAndDestroy) {
    42f4:	   /----- bra.s 4320 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    42f6:	/--|----> movea.l (sp),a0
    42f8:	|  |      move.l (a0),d0
    42fa:	|  |      cmp.l 8(sp),d0
    42fe:	|  |  /-- bne.s 4316 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    4300:	|  |  |   movea.l (sp),a0
    4302:	|  |  |   movea.l (a0),a0
    4304:	|  |  |   move.l 44(a0),d0
    4308:	|  |  |   movea.l (sp),a0
    430a:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    430c:	|  |  |   movea.l 8(sp),a0
    4310:	|  |  |   clr.l 44(a0)
    4314:	|  +--|-- bra.s 4320 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    4316:	|  |  \-> movea.l (sp),a0
    4318:	|  |      move.l (a0),d0
    431a:	|  |      moveq #44,d1
    431c:	|  |      add.l d0,d1
    431e:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    4320:	|  \----> movea.l (sp),a0
    4322:	|         move.l (a0),d0
    4324:	\-------- bne.s 42f6 <pauseFunction+0xa>
		}
	}
}
    4326:	          nop
    4328:	          nop
    432a:	          addq.l #4,sp
    432c:	          rts

0000432e <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    432e:	move.l 19bf6 <allRunningFunctions>,d0
    4334:	movea.l 4(sp),a0
    4338:	move.l d0,44(a0)
	allRunningFunctions = fun;
    433c:	move.l 4(sp),19bf6 <allRunningFunctions>
}
    4344:	nop
    4346:	rts

00004348 <runSludge>:

BOOL runSludge () {
    4348:	                   lea -12(sp),sp
    434c:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    434e:	                   move.l 19bf6 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    4356:	      /----------- bra.s 43d2 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    4358:	   /--|----------> movea.l 12(sp),a0
    435c:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    4362:	   |  |            movea.l 12(sp),a0
    4366:	   |  |            move.b 56(a0),d0
    436a:	   |  |  /-------- bne.s 43cc <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    436c:	   |  |  |         movea.l 12(sp),a0
    4370:	   |  |  |         move.l 12(a0),d0
    4374:	   |  |  |  /----- beq.s 439e <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    4376:	   |  |  |  |      movea.l 12(sp),a0
    437a:	   |  |  |  |      move.l 12(a0),d0
    437e:	   |  |  |  |  /-- bpl.s 438a <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    4380:	   |  |  |  |  |   movea.l 12(sp),a0
    4384:	   |  |  |  |  |   clr.l 12(a0)
    4388:	   |  |  +--|--|-- bra.s 43cc <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    438a:	   |  |  |  |  \-> movea.l 12(sp),a0
    438e:	   |  |  |  |      move.l 12(a0),d0
    4392:	   |  |  |  |      subq.l #1,d0
    4394:	   |  |  |  |      movea.l 12(sp),a0
    4398:	   |  |  |  |      move.l d0,12(a0)
    439c:	   |  |  +--|----- bra.s 43cc <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    439e:	   |  |  |  \----> movea.l 12(sp),a0
    43a2:	   |  |  |         move.w 50(a0),d0
    43a6:	   |  |  |     /-- beq.s 43b6 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    43a8:	   |  |  |     |   movea.l 12(sp),a0
    43ac:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    43b0:	   |  |  |     |   jsr 5966 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    43b6:	   |  |  |     \-> move.l 12(sp),-(sp)
    43ba:	   |  |  |         jsr 2592 <continueFunction>
    43c0:	   |  |  |         addq.l #4,sp
    43c2:	   |  |  |         tst.w d0
    43c4:	   |  |  +-------- bne.s 43cc <runSludge+0x84>
					return FALSE;
    43c6:	   |  |  |         clr.w d0
    43c8:	/--|--|--|-------- bra.w 4458 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    43cc:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    43d2:	|  |  \----------> tst.l 12(sp)
    43d6:	|  \-------------- bne.s 4358 <runSludge+0x10>
	}

	if (loadNow) {
    43d8:	|                  move.l 19c26 <loadNow>,d0
    43de:	|        /-------- beq.s 4456 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    43e0:	|        |         movea.l 19c26 <loadNow>,a0
    43e6:	|        |         move.b (a0),d0
    43e8:	|        |         cmpi.b #58,d0
    43ec:	|        |  /----- bne.s 4420 <runSludge+0xd8>
			saveGame (loadNow + 1);
    43ee:	|        |  |      move.l 19c26 <loadNow>,d0
    43f4:	|        |  |      addq.l #1,d0
    43f6:	|        |  |      move.l d0,-(sp)
    43f8:	|        |  |      jsr 8fae <saveGame>
    43fe:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    4400:	|        |  |      movea.l 19d24 <saverFunc>,a0
    4406:	|        |  |      lea 28(a0),a0
    440a:	|        |  |      pea 1 <_start+0x1>
    440e:	|        |  |      pea 1 <_start+0x1>
    4412:	|        |  |      move.l a0,-(sp)
    4414:	|        |  |      jsr 116a6 <setVariable>
    441a:	|        |  |      lea 12(sp),sp
    441e:	|        |  |  /-- bra.s 4438 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    4420:	|        |  \--|-> move.l 19c26 <loadNow>,d0
    4426:	|        |     |   move.l d0,-(sp)
    4428:	|        |     |   jsr 8af6 <loadGame>
    442e:	|        |     |   addq.l #4,sp
    4430:	|        |     |   tst.w d0
    4432:	|        |     +-- bne.s 4438 <runSludge+0xf0>
    4434:	|        |     |   clr.w d0
    4436:	+--------|-----|-- bra.s 4458 <runSludge+0x110>
		}
		FreeVec(loadNow);
    4438:	|        |     \-> move.l 19c26 <loadNow>,8(sp)
    4440:	|        |         move.l 19c5a <SysBase>,d0
    4446:	|        |         movea.l d0,a6
    4448:	|        |         movea.l 8(sp),a1
    444c:	|        |         jsr -690(a6)
		loadNow = NULL;
    4450:	|        |         clr.l 19c26 <loadNow>
	}

	return TRUE;
    4456:	|        \-------> moveq #1,d0
}
    4458:	\----------------> movea.l (sp)+,a6
    445a:	                   lea 12(sp),sp
    445e:	                   rts

00004460 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    4460:	movea.l 1811c <currentEvents>,a0
    4466:	move.l (a0),d0
    4468:	move.l 4(sp),-(sp)
    446c:	move.l d0,-(sp)
    446e:	jsr 8d0 <put2bytes>
    4474:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    4476:	movea.l 1811c <currentEvents>,a0
    447c:	move.l 4(a0),d0
    4480:	move.l 4(sp),-(sp)
    4484:	move.l d0,-(sp)
    4486:	jsr 8d0 <put2bytes>
    448c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    448e:	movea.l 1811c <currentEvents>,a0
    4494:	move.l 8(a0),d0
    4498:	move.l 4(sp),-(sp)
    449c:	move.l d0,-(sp)
    449e:	jsr 8d0 <put2bytes>
    44a4:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    44a6:	movea.l 1811c <currentEvents>,a0
    44ac:	move.l 12(a0),d0
    44b0:	move.l 4(sp),-(sp)
    44b4:	move.l d0,-(sp)
    44b6:	jsr 8d0 <put2bytes>
    44bc:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    44be:	movea.l 1811c <currentEvents>,a0
    44c4:	move.l 16(a0),d0
    44c8:	move.l 4(sp),-(sp)
    44cc:	move.l d0,-(sp)
    44ce:	jsr 8d0 <put2bytes>
    44d4:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    44d6:	movea.l 1811c <currentEvents>,a0
    44dc:	move.l 20(a0),d0
    44e0:	move.l 4(sp),-(sp)
    44e4:	move.l d0,-(sp)
    44e6:	jsr 8d0 <put2bytes>
    44ec:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    44ee:	movea.l 1811c <currentEvents>,a0
    44f4:	move.l 24(a0),d0
    44f8:	move.l 4(sp),-(sp)
    44fc:	move.l d0,-(sp)
    44fe:	jsr 8d0 <put2bytes>
    4504:	addq.l #8,sp
}
    4506:	nop
    4508:	rts

0000450a <sludgeDisplay>:

void sludgeDisplay () {
	CstSludgeDisplay();
    450a:	jsr 13c4 <CstSludgeDisplay>
}
    4510:	nop
    4512:	rts

00004514 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    4514:	      /-- bra.s 4534 <stackSetByIndex+0x20>
		vS = vS->next;
    4516:	/-----|-> movea.l 4(sp),a0
    451a:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    4520:	|     +-- bne.s 4534 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    4522:	|     |   pea 1448e <cursors.c.412ac4f3+0x239>
    4528:	|     |   jsr 12e08 <KPrintF>
    452e:	|     |   addq.l #4,sp
			return FALSE;
    4530:	|     |   clr.w d0
    4532:	|  /--|-- bra.s 4556 <stackSetByIndex+0x42>
	while (theIndex--) {
    4534:	|  |  \-> move.l 8(sp),d0
    4538:	|  |      move.l d0,d1
    453a:	|  |      subq.l #1,d1
    453c:	|  |      move.l d1,8(sp)
    4540:	|  |      tst.l d0
    4542:	\--|----- bne.s 4516 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    4544:	   |      move.l 4(sp),d0
    4548:	   |      move.l d0,-(sp)
    454a:	   |      move.l 16(sp),-(sp)
    454e:	   |      jsr 1126e <copyVariable>
    4554:	   |      addq.l #8,sp
}
    4556:	   \----> rts

00004558 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    4558:	             lea -24(sp),sp
    455c:	             move.l a6,-(sp)
    455e:	             move.l 48(sp),d0
    4562:	             move.w d0,d0
    4564:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    4568:	             moveq #58,d0
    456a:	             move.l d0,24(sp)
    456e:	             clr.l 20(sp)
    4572:	             move.l 19c5a <SysBase>,d0
    4578:	             movea.l d0,a6
    457a:	             move.l 24(sp),d0
    457e:	             move.l 20(sp),d1
    4582:	             jsr -684(a6)
    4586:	             move.l d0,16(sp)
    458a:	             move.l 16(sp),d0
    458e:	             move.l d0,12(sp)
	if(!newFunc) {
    4592:	         /-- bne.s 45a8 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    4594:	         |   pea 144a7 <cursors.c.412ac4f3+0x252>
    459a:	         |   jsr 12e08 <KPrintF>
    45a0:	         |   addq.l #4,sp
		return 0;
    45a2:	         |   moveq #0,d0
    45a4:	/--------|-- bra.w 46be <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    45a8:	|        \-> move.l 32(sp),d0
    45ac:	|            movea.l 12(sp),a0
    45b0:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    45b2:	|            move.l 12(sp),-(sp)
    45b6:	|            jsr 3cea <loadFunctionCode>
    45bc:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    45be:	|            movea.l 12(sp),a0
    45c2:	|            move.l 16(a0),d1
    45c6:	|            move.l 36(sp),d0
    45ca:	|            cmp.l d1,d0
    45cc:	|        /-- beq.s 45e2 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    45ce:	|        |   pea 144d0 <cursors.c.412ac4f3+0x27b>
    45d4:	|        |   jsr 12e08 <KPrintF>
    45da:	|        |   addq.l #4,sp
		return NULL; 
    45dc:	|        |   moveq #0,d0
    45de:	+--------|-- bra.w 46be <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    45e2:	|        \-> movea.l 12(sp),a0
    45e6:	|            move.l 16(a0),d1
    45ea:	|            movea.l 12(sp),a0
    45ee:	|            move.l 8(a0),d0
    45f2:	|            cmp.l d1,d0
    45f4:	|  /-------- bge.s 465e <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    45f6:	|  |         pea 144ec <cursors.c.412ac4f3+0x297>
    45fc:	|  |         jsr 12e08 <KPrintF>
    4602:	|  |         addq.l #4,sp
		return NULL; 
    4604:	|  |         moveq #0,d0
    4606:	+--|-------- bra.w 46be <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    460a:	|  |  /----> movea.l 44(sp),a0
    460e:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    4612:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    4616:	|  |  |      movea.l 44(sp),a0
    461a:	|  |  |      move.l (a0),d0
    461c:	|  |  |  /-- bne.s 4632 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    461e:	|  |  |  |   pea 14516 <cursors.c.412ac4f3+0x2c1>
    4624:	|  |  |  |   jsr 12e08 <KPrintF>
    462a:	|  |  |  |   addq.l #4,sp
			return NULL;
    462c:	|  |  |  |   moveq #0,d0
    462e:	+--|--|--|-- bra.w 46be <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    4632:	|  |  |  \-> movea.l 12(sp),a0
    4636:	|  |  |      move.l 20(a0),d1
    463a:	|  |  |      move.l 36(sp),d0
    463e:	|  |  |      lsl.l #3,d0
    4640:	|  |  |      add.l d0,d1
    4642:	|  |  |      move.l 8(sp),d0
    4646:	|  |  |      move.l d1,-(sp)
    4648:	|  |  |      move.l d0,-(sp)
    464a:	|  |  |      jsr 1126e <copyVariable>
    4650:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    4652:	|  |  |      move.l 44(sp),-(sp)
    4656:	|  |  |      jsr 11738 <trimStack>
    465c:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    465e:	|  \--|----> tst.l 36(sp)
    4662:	|     \----- bne.s 460a <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    4664:	|            movea.l 12(sp),a0
    4668:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    466c:	|            movea.l 12(sp),a0
    4670:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    4674:	|            movea.l 12(sp),a0
    4678:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    467e:	|            movea.l 12(sp),a0
    4682:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    4688:	|            movea.l 12(sp),a0
    468c:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    4690:	|            movea.l 12(sp),a0
    4694:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    4698:	|            movea.l 12(sp),a0
    469c:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    46a0:	|            movea.l 12(sp),a0
    46a4:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    46a8:	|            movea.l 12(sp),a0
    46ac:	|            clr.l 28(a0)

	restartFunction (newFunc);
    46b0:	|            move.l 12(sp),-(sp)
    46b4:	|            jsr 432e <restartFunction>
    46ba:	|            addq.l #4,sp
	return 1;
    46bc:	|            moveq #1,d0
}
    46be:	\----------> movea.l (sp)+,a6
    46c0:	             lea 24(sp),sp
    46c4:	             rts

000046c6 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    46c6:	clr.w 18128 <sliceBusy>
}
    46cc:	nop
    46ce:	rts

000046d0 <getNumberedString>:

char * getNumberedString (int value) {
    46d0:	       lea -56(sp),sp
    46d4:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    46d8:	       move.w 18128 <sliceBusy>,d0
    46de:	   /-- beq.s 4728 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    46e0:	   |   move.l 19c62 <DOSBase>,d0
    46e6:	   |   movea.l d0,a6
    46e8:	   |   jsr -60(a6)
    46ec:	   |   move.l d0,28(sp)
    46f0:	   |   move.l 28(sp),d0
    46f4:	   |   move.l d0,24(sp)
    46f8:	   |   move.l #83297,20(sp)
    4700:	   |   moveq #76,d0
    4702:	   |   move.l d0,16(sp)
    4706:	   |   move.l 19c62 <DOSBase>,d0
    470c:	   |   movea.l d0,a6
    470e:	   |   move.l 24(sp),d1
    4712:	   |   move.l 20(sp),d2
    4716:	   |   move.l 16(sp),d3
    471a:	   |   jsr -48(a6)
    471e:	   |   move.l d0,12(sp)
		return NULL;
    4722:	   |   moveq #0,d0
    4724:	/--|-- bra.w 47c4 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    4728:	|  \-> move.l 19c42 <bigDataFile>,64(sp)
    4730:	|      move.l 72(sp),d0
    4734:	|      add.l d0,d0
    4736:	|      add.l d0,d0
    4738:	|      move.l d0,d1
    473a:	|      move.l 19c4e <startOfTextIndex>,d0
    4740:	|      add.l d1,d0
    4742:	|      move.l d0,60(sp)
    4746:	|      moveq #-1,d0
    4748:	|      move.l d0,56(sp)
    474c:	|      move.l 19c62 <DOSBase>,d0
    4752:	|      movea.l d0,a6
    4754:	|      move.l 64(sp),d1
    4758:	|      move.l 60(sp),d2
    475c:	|      move.l 56(sp),d3
    4760:	|      jsr -66(a6)
    4764:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    4768:	|      move.l 19c42 <bigDataFile>,d0
    476e:	|      move.l d0,-(sp)
    4770:	|      jsr 718 <get4bytes>
    4776:	|      addq.l #4,sp
    4778:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    477c:	|      move.l 19c42 <bigDataFile>,48(sp)
    4784:	|      move.l 72(sp),44(sp)
    478a:	|      moveq #-1,d0
    478c:	|      move.l d0,40(sp)
    4790:	|      move.l 19c62 <DOSBase>,d0
    4796:	|      movea.l d0,a6
    4798:	|      move.l 48(sp),d1
    479c:	|      move.l 44(sp),d2
    47a0:	|      move.l 40(sp),d3
    47a4:	|      jsr -66(a6)
    47a8:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    47ac:	|      move.l 19c42 <bigDataFile>,d0
    47b2:	|      move.l d0,-(sp)
    47b4:	|      jsr b02 <readString>
    47ba:	|      addq.l #4,sp
    47bc:	|      move.l d0,32(sp)
	
	return s;
    47c0:	|      move.l 32(sp),d0
}
    47c4:	\----> movem.l (sp)+,d2-d3/a6
    47c8:	       lea 56(sp),sp
    47cc:	       rts

000047ce <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    47ce:	       lea -32(sp),sp
    47d2:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    47d6:	       move.w 18128 <sliceBusy>,d0
    47dc:	   /-- beq.s 47f8 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    47de:	   |   pea 145ae <thumbnail.c.7eb31449+0x3c>
    47e4:	   |   pea 145cc <thumbnail.c.7eb31449+0x5a>
    47ea:	   |   jsr 12e08 <KPrintF>
    47f0:	   |   addq.l #8,sp
		return 0;
    47f2:	   |   moveq #0,d0
    47f4:	/--|-- bra.w 488c <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    47f8:	|  \-> move.l 19c42 <bigDataFile>,40(sp)
    4800:	|      move.l 48(sp),d0
    4804:	|      add.l d0,d0
    4806:	|      add.l d0,d0
    4808:	|      move.l d0,d1
    480a:	|      move.l 19c4a <startOfDataIndex>,d0
    4810:	|      add.l d1,d0
    4812:	|      move.l d0,36(sp)
    4816:	|      moveq #-1,d0
    4818:	|      move.l d0,32(sp)
    481c:	|      move.l 19c62 <DOSBase>,d0
    4822:	|      movea.l d0,a6
    4824:	|      move.l 40(sp),d1
    4828:	|      move.l 36(sp),d2
    482c:	|      move.l 32(sp),d3
    4830:	|      jsr -66(a6)
    4834:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    4838:	|      move.l 19c42 <bigDataFile>,24(sp)
    4840:	|      move.l 19c42 <bigDataFile>,d0
    4846:	|      move.l d0,-(sp)
    4848:	|      jsr 718 <get4bytes>
    484e:	|      addq.l #4,sp
    4850:	|      move.l d0,20(sp)
    4854:	|      clr.l 16(sp)
    4858:	|      move.l 19c62 <DOSBase>,d0
    485e:	|      movea.l d0,a6
    4860:	|      move.l 24(sp),d1
    4864:	|      move.l 20(sp),d2
    4868:	|      move.l 16(sp),d3
    486c:	|      jsr -66(a6)
    4870:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    4874:	|      move.w #1,18128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    487c:	|      move.l 19c42 <bigDataFile>,d0
    4882:	|      move.l d0,-(sp)
    4884:	|      jsr 718 <get4bytes>
    488a:	|      addq.l #4,sp
}
    488c:	\----> movem.l (sp)+,d2-d3/a6
    4890:	       lea 32(sp),sp
    4894:	       rts

00004896 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    4896:	       lea -32(sp),sp
    489a:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    489e:	       move.w 18128 <sliceBusy>,d0
    48a4:	   /-- beq.s 48c0 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    48a6:	   |   pea 145ae <thumbnail.c.7eb31449+0x3c>
    48ac:	   |   pea 145cc <thumbnail.c.7eb31449+0x5a>
    48b2:	   |   jsr 12e08 <KPrintF>
    48b8:	   |   addq.l #8,sp
        return FALSE;
    48ba:	   |   clr.w d0
    48bc:	/--|-- bra.w 494c <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    48c0:	|  \-> move.l 19c42 <bigDataFile>,40(sp)
    48c8:	|      move.l 48(sp),d0
    48cc:	|      add.l d0,d0
    48ce:	|      add.l d0,d0
    48d0:	|      move.l d0,d1
    48d2:	|      move.l 19c56 <startOfObjectIndex>,d0
    48d8:	|      add.l d1,d0
    48da:	|      move.l d0,36(sp)
    48de:	|      moveq #-1,d0
    48e0:	|      move.l d0,32(sp)
    48e4:	|      move.l 19c62 <DOSBase>,d0
    48ea:	|      movea.l d0,a6
    48ec:	|      move.l 40(sp),d1
    48f0:	|      move.l 36(sp),d2
    48f4:	|      move.l 32(sp),d3
    48f8:	|      jsr -66(a6)
    48fc:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    4900:	|      move.l 19c42 <bigDataFile>,24(sp)
    4908:	|      move.l 19c42 <bigDataFile>,d0
    490e:	|      move.l d0,-(sp)
    4910:	|      jsr 718 <get4bytes>
    4916:	|      addq.l #4,sp
    4918:	|      move.l d0,20(sp)
    491c:	|      moveq #-1,d0
    491e:	|      move.l d0,16(sp)
    4922:	|      move.l 19c62 <DOSBase>,d0
    4928:	|      movea.l d0,a6
    492a:	|      move.l 24(sp),d1
    492e:	|      move.l 20(sp),d2
    4932:	|      move.l 16(sp),d3
    4936:	|      jsr -66(a6)
    493a:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    493e:	|      move.w #1,18128 <sliceBusy>
    4946:	|      move.w 18128 <sliceBusy>,d0
}
    494c:	\----> movem.l (sp)+,d2-d3/a6
    4950:	       lea 32(sp),sp
    4954:	       rts

00004956 <openSubSlice>:

BOOL openSubSlice (int num) {
    4956:	       lea -32(sp),sp
    495a:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    495e:	       move.w 18128 <sliceBusy>,d0
    4964:	   /-- beq.s 4980 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    4966:	   |   pea 145ae <thumbnail.c.7eb31449+0x3c>
    496c:	   |   pea 145cc <thumbnail.c.7eb31449+0x5a>
    4972:	   |   jsr 12e08 <KPrintF>
    4978:	   |   addq.l #8,sp
		return FALSE;
    497a:	   |   clr.w d0
    497c:	/--|-- bra.w 4a0c <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    4980:	|  \-> move.l 19c42 <bigDataFile>,40(sp)
    4988:	|      move.l 48(sp),d0
    498c:	|      add.l d0,d0
    498e:	|      add.l d0,d0
    4990:	|      move.l d0,d1
    4992:	|      move.l 19c52 <startOfSubIndex>,d0
    4998:	|      add.l d1,d0
    499a:	|      move.l d0,36(sp)
    499e:	|      moveq #-1,d0
    49a0:	|      move.l d0,32(sp)
    49a4:	|      move.l 19c62 <DOSBase>,d0
    49aa:	|      movea.l d0,a6
    49ac:	|      move.l 40(sp),d1
    49b0:	|      move.l 36(sp),d2
    49b4:	|      move.l 32(sp),d3
    49b8:	|      jsr -66(a6)
    49bc:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    49c0:	|      move.l 19c42 <bigDataFile>,24(sp)
    49c8:	|      move.l 19c42 <bigDataFile>,d0
    49ce:	|      move.l d0,-(sp)
    49d0:	|      jsr 718 <get4bytes>
    49d6:	|      addq.l #4,sp
    49d8:	|      move.l d0,20(sp)
    49dc:	|      moveq #-1,d0
    49de:	|      move.l d0,16(sp)
    49e2:	|      move.l 19c62 <DOSBase>,d0
    49e8:	|      movea.l d0,a6
    49ea:	|      move.l 24(sp),d1
    49ee:	|      move.l 20(sp),d2
    49f2:	|      move.l 16(sp),d3
    49f6:	|      jsr -66(a6)
    49fa:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    49fe:	|      move.w #1,18128 <sliceBusy>
    4a06:	|      move.w 18128 <sliceBusy>,d0
}
    4a0c:	\----> movem.l (sp)+,d2-d3/a6
    4a10:	       lea 32(sp),sp
    4a14:	       rts

00004a16 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    4a16:	       lea -180(sp),sp
    4a1a:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    4a1e:	       tst.l 196(sp)
    4a22:	/----- beq.s 4a62 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    4a24:	|      move.l 196(sp),19c42 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    4a2c:	|      move.l 196(sp),168(sp)
    4a32:	|      clr.l 164(sp)
    4a36:	|      clr.l 160(sp)
    4a3a:	|      move.l 19c62 <DOSBase>,d0
    4a40:	|      movea.l d0,a6
    4a42:	|      move.l 168(sp),d1
    4a46:	|      move.l 164(sp),d2
    4a4a:	|      move.l 160(sp),d3
    4a4e:	|      jsr -66(a6)
    4a52:	|      move.l d0,156(sp)
    4a56:	|      move.l 156(sp),d0
    4a5a:	|      move.l d0,19c46 <startIndex>
    4a60:	|  /-- bra.s 4a9c <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    4a62:	\--|-> move.l 19c42 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    4a6a:	   |   move.l 196(sp),184(sp)
    4a70:	   |   move.l 19c46 <startIndex>,d0
    4a76:	   |   move.l d0,180(sp)
    4a7a:	   |   moveq #-1,d0
    4a7c:	   |   move.l d0,176(sp)
    4a80:	   |   move.l 19c62 <DOSBase>,d0
    4a86:	   |   movea.l d0,a6
    4a88:	   |   move.l 184(sp),d1
    4a8c:	   |   move.l 180(sp),d2
    4a90:	   |   move.l 176(sp),d3
    4a94:	   |   jsr -66(a6)
    4a98:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    4a9c:	   \-> clr.w 18128 <sliceBusy>

	if (skipBefore > numLanguages) {
    4aa2:	       move.l 204(sp),d0
    4aa6:	       cmp.l 200(sp),d0
    4aaa:	   /-- bls.s 4abe <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    4aac:	   |   pea 145e6 <thumbnail.c.7eb31449+0x74>
    4ab2:	   |   jsr 12e08 <KPrintF>
    4ab8:	   |   addq.l #4,sp
		skipBefore = 0;
    4aba:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    4abe:	   \-> move.l 200(sp),d0
    4ac2:	       sub.l 204(sp),d0
    4ac6:	       move.l d0,188(sp)
	while (skipBefore) {
    4aca:	   /-- bra.s 4b08 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    4acc:	/--|-> move.l 196(sp),24(sp)
    4ad2:	|  |   move.l 196(sp),-(sp)
    4ad6:	|  |   jsr 718 <get4bytes>
    4adc:	|  |   addq.l #4,sp
    4ade:	|  |   move.l d0,20(sp)
    4ae2:	|  |   moveq #-1,d0
    4ae4:	|  |   move.l d0,16(sp)
    4ae8:	|  |   move.l 19c62 <DOSBase>,d0
    4aee:	|  |   movea.l d0,a6
    4af0:	|  |   move.l 24(sp),d1
    4af4:	|  |   move.l 20(sp),d2
    4af8:	|  |   move.l 16(sp),d3
    4afc:	|  |   jsr -66(a6)
    4b00:	|  |   move.l d0,12(sp)
		skipBefore --;
    4b04:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    4b08:	|  \-> tst.l 204(sp)
    4b0c:	\----- bne.s 4acc <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4b0e:	       move.l 196(sp),152(sp)
    4b14:	       clr.l 148(sp)
    4b18:	       clr.l 144(sp)
    4b1c:	       move.l 19c62 <DOSBase>,d0
    4b22:	       movea.l d0,a6
    4b24:	       move.l 152(sp),d1
    4b28:	       move.l 148(sp),d2
    4b2c:	       move.l 144(sp),d3
    4b30:	       jsr -66(a6)
    4b34:	       move.l d0,140(sp)
    4b38:	       move.l 140(sp),d0
    4b3c:	       addq.l #4,d0
    4b3e:	       move.l d0,19c4e <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    4b44:	       move.l 196(sp),136(sp)
    4b4a:	       move.l 196(sp),-(sp)
    4b4e:	       jsr 718 <get4bytes>
    4b54:	       addq.l #4,sp
    4b56:	       move.l d0,132(sp)
    4b5a:	       moveq #-1,d0
    4b5c:	       move.l d0,128(sp)
    4b60:	       move.l 19c62 <DOSBase>,d0
    4b66:	       movea.l d0,a6
    4b68:	       move.l 136(sp),d1
    4b6c:	       move.l 132(sp),d2
    4b70:	       move.l 128(sp),d3
    4b74:	       jsr -66(a6)
    4b78:	       move.l d0,124(sp)

	while (skipAfter) {
    4b7c:	   /-- bra.s 4bba <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    4b7e:	/--|-> move.l 196(sp),40(sp)
    4b84:	|  |   move.l 196(sp),-(sp)
    4b88:	|  |   jsr 718 <get4bytes>
    4b8e:	|  |   addq.l #4,sp
    4b90:	|  |   move.l d0,36(sp)
    4b94:	|  |   moveq #-1,d0
    4b96:	|  |   move.l d0,32(sp)
    4b9a:	|  |   move.l 19c62 <DOSBase>,d0
    4ba0:	|  |   movea.l d0,a6
    4ba2:	|  |   move.l 40(sp),d1
    4ba6:	|  |   move.l 36(sp),d2
    4baa:	|  |   move.l 32(sp),d3
    4bae:	|  |   jsr -66(a6)
    4bb2:	|  |   move.l d0,28(sp)
		skipAfter --;
    4bb6:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    4bba:	|  \-> tst.l 188(sp)
    4bbe:	\----- bne.s 4b7e <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4bc0:	       move.l 196(sp),120(sp)
    4bc6:	       clr.l 116(sp)
    4bca:	       clr.l 112(sp)
    4bce:	       move.l 19c62 <DOSBase>,d0
    4bd4:	       movea.l d0,a6
    4bd6:	       move.l 120(sp),d1
    4bda:	       move.l 116(sp),d2
    4bde:	       move.l 112(sp),d3
    4be2:	       jsr -66(a6)
    4be6:	       move.l d0,108(sp)
    4bea:	       move.l 108(sp),d0
    4bee:	       addq.l #4,d0
    4bf0:	       move.l d0,19c52 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    4bf6:	       move.l 196(sp),104(sp)
    4bfc:	       move.l 196(sp),-(sp)
    4c00:	       jsr 718 <get4bytes>
    4c06:	       addq.l #4,sp
    4c08:	       move.l d0,100(sp)
    4c0c:	       clr.l 96(sp)
    4c10:	       move.l 19c62 <DOSBase>,d0
    4c16:	       movea.l d0,a6
    4c18:	       move.l 104(sp),d1
    4c1c:	       move.l 100(sp),d2
    4c20:	       move.l 96(sp),d3
    4c24:	       jsr -66(a6)
    4c28:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4c2c:	       move.l 196(sp),88(sp)
    4c32:	       clr.l 84(sp)
    4c36:	       clr.l 80(sp)
    4c3a:	       move.l 19c62 <DOSBase>,d0
    4c40:	       movea.l d0,a6
    4c42:	       move.l 88(sp),d1
    4c46:	       move.l 84(sp),d2
    4c4a:	       move.l 80(sp),d3
    4c4e:	       jsr -66(a6)
    4c52:	       move.l d0,76(sp)
    4c56:	       move.l 76(sp),d0
    4c5a:	       addq.l #4,d0
    4c5c:	       move.l d0,19c56 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    4c62:	       move.l 196(sp),72(sp)
    4c68:	       move.l 196(sp),-(sp)
    4c6c:	       jsr 718 <get4bytes>
    4c72:	       addq.l #4,sp
    4c74:	       move.l d0,68(sp)
    4c78:	       clr.l 64(sp)
    4c7c:	       move.l 19c62 <DOSBase>,d0
    4c82:	       movea.l d0,a6
    4c84:	       move.l 72(sp),d1
    4c88:	       move.l 68(sp),d2
    4c8c:	       move.l 64(sp),d3
    4c90:	       jsr -66(a6)
    4c94:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    4c98:	       move.l 196(sp),56(sp)
    4c9e:	       clr.l 52(sp)
    4ca2:	       clr.l 48(sp)
    4ca6:	       move.l 19c62 <DOSBase>,d0
    4cac:	       movea.l d0,a6
    4cae:	       move.l 56(sp),d1
    4cb2:	       move.l 52(sp),d2
    4cb6:	       move.l 48(sp),d3
    4cba:	       jsr -66(a6)
    4cbe:	       move.l d0,44(sp)
    4cc2:	       move.l 44(sp),d0
    4cc6:	       move.l d0,19c4a <startOfDataIndex>
    4ccc:	       nop
    4cce:	       movem.l (sp)+,d2-d3/a6
    4cd2:	       lea 180(sp),sp
    4cd6:	       rts

00004cd8 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    4cd8:	    lea -20(sp),sp
    4cdc:	    move.l a6,-(sp)
    4cde:	    move.l d7,-(sp)
	APTR vbr = 0;
    4ce0:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    4ce4:	    move.w #20090,10(sp)
    4cea:	    move.w #2049,12(sp)
    4cf0:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    4cf6:	    movea.l 19c5a <SysBase>,a0
    4cfc:	    move.w 296(a0),d0
    4d00:	    move.w d0,d0
    4d02:	    andi.l #65535,d0
    4d08:	    moveq #1,d1
    4d0a:	    and.l d1,d0
    4d0c:	/-- beq.s 4d3a <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    4d0e:	|   lea 28(sp),a0
    4d12:	|   lea -18(a0),a0
    4d16:	|   move.l a0,20(sp)
    4d1a:	|   move.l 19c5a <SysBase>,d0
    4d20:	|   movea.l d0,a6
    4d22:	|   move.l 20(sp),d7
    4d26:	|   exg d7,a5
    4d28:	|   jsr -30(a6)
    4d2c:	|   exg d7,a5
    4d2e:	|   move.l d0,16(sp)
    4d32:	|   move.l 16(sp),d0
    4d36:	|   move.l d0,24(sp)

	return vbr;
    4d3a:	\-> move.l 24(sp),d0
}
    4d3e:	    move.l (sp)+,d7
    4d40:	    movea.l (sp)+,a6
    4d42:	    lea 20(sp),sp
    4d46:	    rts

00004d48 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    4d48:	movea.l 19c80 <VBR>,a0
    4d4e:	lea 108(a0),a0
    4d52:	move.l 4(sp),(a0)
}
    4d56:	nop
    4d58:	rts

00004d5a <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    4d5a:	movea.l 19c80 <VBR>,a0
    4d60:	move.l 108(a0),d0
}
    4d64:	rts

00004d66 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    4d66:	       subq.l #8,sp
    4d68:	       move.l a6,-(sp)
	Forbid();
    4d6a:	       move.l 19c5a <SysBase>,d0
    4d70:	       movea.l d0,a6
    4d72:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	SystemADKCON=custom->adkconr;
    4d76:	       movea.l 19c5e <custom>,a0
    4d7c:	       move.w 16(a0),d0
    4d80:	       move.w d0,19c7e <SystemADKCON>
	SystemInts=custom->intenar;
    4d86:	       movea.l 19c5e <custom>,a0
    4d8c:	       move.w 28(a0),d0
    4d90:	       move.w d0,19c7a <SystemInts>
	SystemDMA=custom->dmaconr;
    4d96:	       movea.l 19c5e <custom>,a0
    4d9c:	       move.w 2(a0),d0
    4da0:	       move.w d0,19c7c <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    4da6:	       movea.l 19c66 <GfxBase>,a0
    4dac:	       move.l 34(a0),d0
    4db0:	       move.l d0,19c88 <ActiView>

	LoadView(0);
    4db6:	       clr.l 4(sp)
    4dba:	       move.l 19c66 <GfxBase>,d0
    4dc0:	       movea.l d0,a6
    4dc2:	       movea.l 4(sp),a1
    4dc6:	       jsr -222(a6)
	WaitTOF();
    4dca:	       move.l 19c66 <GfxBase>,d0
    4dd0:	       movea.l d0,a6
    4dd2:	       jsr -270(a6)
	WaitTOF();
    4dd6:	       move.l 19c66 <GfxBase>,d0
    4ddc:	       movea.l d0,a6
    4dde:	       jsr -270(a6)

	WaitVbl();
    4de2:	       jsr 12d30 <WaitVbl>
	WaitVbl();
    4de8:	       jsr 12d30 <WaitVbl>

	OwnBlitter();
    4dee:	       move.l 19c66 <GfxBase>,d0
    4df4:	       movea.l d0,a6
    4df6:	       jsr -456(a6)
	WaitBlit();	
    4dfa:	       move.l 19c66 <GfxBase>,d0
    4e00:	       movea.l d0,a6
    4e02:	       jsr -228(a6)
	Disable();
    4e06:	       move.l 19c5a <SysBase>,d0
    4e0c:	       movea.l d0,a6
    4e0e:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	custom->dmacon=0x7fff;//Clear all DMA channels
    4e12:	       movea.l 19c5e <custom>,a0
    4e18:	       move.w #32767,150(a0)

	//set all colors black
	for(int a=0;a<32;a++)
    4e1e:	       clr.l 8(sp)
    4e22:	   /-- bra.s 4e40 <TakeSystem+0xda>
		custom->color[a]=0;
    4e24:	/--|-> movea.l 19c5e <custom>,a0
    4e2a:	|  |   move.l 8(sp),d0
    4e2e:	|  |   addi.l #192,d0
    4e34:	|  |   add.l d0,d0
    4e36:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    4e3c:	|  |   addq.l #1,8(sp)
    4e40:	|  \-> moveq #31,d0
    4e42:	|      cmp.l 8(sp),d0
    4e46:	\----- bge.s 4e24 <TakeSystem+0xbe>

	WaitVbl();
    4e48:	       jsr 12d30 <WaitVbl>
	WaitVbl();
    4e4e:	       jsr 12d30 <WaitVbl>

	VBR=GetVBR();
    4e54:	       jsr 4cd8 <GetVBR>
    4e5a:	       move.l d0,19c80 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    4e60:	       jsr 4d5a <GetInterruptHandler>
    4e66:	       move.l d0,19c84 <SystemIrq>
}
    4e6c:	       nop
    4e6e:	       movea.l (sp)+,a6
    4e70:	       addq.l #8,sp
    4e72:	       rts

00004e74 <FreeSystem>:

void FreeSystem() { 
    4e74:	subq.l #4,sp
    4e76:	move.l a6,-(sp)
	WaitVbl();
    4e78:	jsr 12d30 <WaitVbl>
	WaitBlit();
    4e7e:	move.l 19c66 <GfxBase>,d0
    4e84:	movea.l d0,a6
    4e86:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    4e8a:	movea.l 19c5e <custom>,a0
    4e90:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    4e96:	movea.l 19c5e <custom>,a0
    4e9c:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    4ea2:	movea.l 19c5e <custom>,a0
    4ea8:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    4eae:	move.l 19c84 <SystemIrq>,d0
    4eb4:	move.l d0,-(sp)
    4eb6:	jsr 4d48 <SetInterruptHandler>
    4ebc:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    4ebe:	movea.l 19c66 <GfxBase>,a0
    4ec4:	move.l 38(a0),d0
    4ec8:	movea.l 19c5e <custom>,a0
    4ece:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    4ed2:	movea.l 19c66 <GfxBase>,a0
    4ed8:	move.l 50(a0),d0
    4edc:	movea.l 19c5e <custom>,a0
    4ee2:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    4ee6:	movea.l 19c5e <custom>,a0
    4eec:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    4ef2:	move.w 19c7c <SystemDMA>,d0
    4ef8:	movea.l 19c5e <custom>,a0
    4efe:	ori.w #-32768,d0
    4f02:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    4f06:	move.w 19c7e <SystemADKCON>,d0
    4f0c:	movea.l 19c5e <custom>,a0
    4f12:	ori.w #-32768,d0
    4f16:	move.w d0,158(a0)

	WaitBlit();	
    4f1a:	move.l 19c66 <GfxBase>,d0
    4f20:	movea.l d0,a6
    4f22:	jsr -228(a6)
	DisownBlitter();
    4f26:	move.l 19c66 <GfxBase>,d0
    4f2c:	movea.l d0,a6
    4f2e:	jsr -462(a6)
	Enable();
    4f32:	move.l 19c5a <SysBase>,d0
    4f38:	movea.l d0,a6
    4f3a:	jsr -126(a6)

	LoadView(ActiView);
    4f3e:	move.l 19c88 <ActiView>,4(sp)
    4f46:	move.l 19c66 <GfxBase>,d0
    4f4c:	movea.l d0,a6
    4f4e:	movea.l 4(sp),a1
    4f52:	jsr -222(a6)
	WaitTOF();
    4f56:	move.l 19c66 <GfxBase>,d0
    4f5c:	movea.l d0,a6
    4f5e:	jsr -270(a6)
	WaitTOF();
    4f62:	move.l 19c66 <GfxBase>,d0
    4f68:	movea.l d0,a6
    4f6a:	jsr -270(a6)

	Permit();
    4f6e:	move.l 19c5a <SysBase>,d0
    4f74:	movea.l d0,a6
    4f76:	jsr -138(a6)
}
    4f7a:	nop
    4f7c:	movea.l (sp)+,a6
    4f7e:	addq.l #4,sp
    4f80:	rts

00004f82 <p61Init>:
	// The Player® 6.1A: Copyright © 1992-95 Jarno Paananen
	// P61.testmod - Module by Skylord/Sector 7 
	INCBIN(player, "player610.6.no_cia.bin")
	INCBIN_CHIP(module, "testmod.p61")

	int p61Init(const void* module) { // returns 0 if success, non-zero otherwise
    4f82:	move.l a3,-(sp)
    4f84:	move.l a2,-(sp)
		register volatile const void* _a0 ASM("a0") = module;
    4f86:	movea.l 12(sp),a0
		register volatile const void* _a1 ASM("a1") = NULL;
    4f8a:	suba.l a1,a1
		register volatile const void* _a2 ASM("a2") = NULL;
    4f8c:	suba.l a2,a2
		register volatile const void* _a3 ASM("a3") = player;
    4f8e:	move.l 1812a <player>,d0
    4f94:	movea.l d0,a3
		register                int   _d0 ASM("d0"); // return value
		__asm volatile (
    4f96:	movem.l d1-d7/a4-a6,-(sp)
    4f9a:	jsr (a3)
    4f9c:	movem.l (sp)+,d1-d7/a4-a6
			"movem.l (%%sp)+,%%d1-%%d7/%%a4-%%a6"
		: "=r" (_d0), "+rf"(_a0), "+rf"(_a1), "+rf"(_a2), "+rf"(_a3)
		:
		: "cc", "memory");
		return _d0;
	}
    4fa0:	movea.l (sp)+,a2
    4fa2:	movea.l (sp)+,a3
    4fa4:	rts

00004fa6 <p61End>:
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}

	void p61End() {
    4fa6:	move.l a6,-(sp)
    4fa8:	move.l a3,-(sp)
		register volatile const void* _a3 ASM("a3") = player;
    4faa:	move.l 1812a <player>,d0
    4fb0:	movea.l d0,a3
		register volatile const void* _a6 ASM("a6") = (void*)0xdff000;
    4fb2:	movea.l #14675968,a6
		__asm volatile (
    4fb8:	movem.l d0-d1/a0-a1,-(sp)
    4fbc:	jsr 8(a3)
    4fc0:	movem.l (sp)+,d0-d1/a0-a1
			"jsr 8(%%a3)\n"
			"movem.l (%%sp)+,%%d0-%%d1/%%a0-%%a1"
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}
    4fc4:	nop
    4fc6:	movea.l (sp)+,a3
    4fc8:	movea.l (sp)+,a6
    4fca:	rts

00004fcc <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    4fcc:	    lea -128(sp),sp
    4fd0:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    4fd4:	    movea.w #4,a0
    4fd8:	    move.l (a0),d0
    4fda:	    move.l d0,19c5a <SysBase>
	custom = (struct Custom*)0xdff000;	
    4fe0:	    move.l #14675968,19c5e <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    4fea:	    move.l #90007,136(sp)
    4ff2:	    clr.l 132(sp)
    4ff6:	    move.l 19c5a <SysBase>,d0
    4ffc:	    movea.l d0,a6
    4ffe:	    movea.l 136(sp),a1
    5002:	    move.l 132(sp),d0
    5006:	    jsr -552(a6)
    500a:	    move.l d0,128(sp)
    500e:	    move.l 128(sp),d0
    5012:	    move.l d0,19c66 <GfxBase>
	if (!GfxBase)
    5018:	    move.l 19c66 <GfxBase>,d0
    501e:	/-- bne.s 5034 <main+0x68>
		Exit(0);
    5020:	|   clr.l 124(sp)
    5024:	|   move.l 19c62 <DOSBase>,d0
    502a:	|   movea.l d0,a6
    502c:	|   move.l 124(sp),d1
    5030:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    5034:	\-> move.l #90024,120(sp)
    503c:	    clr.l 116(sp)
    5040:	    move.l 19c5a <SysBase>,d0
    5046:	    movea.l d0,a6
    5048:	    movea.l 120(sp),a1
    504c:	    move.l 116(sp),d0
    5050:	    jsr -552(a6)
    5054:	    move.l d0,112(sp)
    5058:	    move.l 112(sp),d0
    505c:	    move.l d0,19c62 <DOSBase>
	if (!DOSBase)
    5062:	    move.l 19c62 <DOSBase>,d0
    5068:	/-- bne.s 507e <main+0xb2>
		Exit(0);
    506a:	|   clr.l 108(sp)
    506e:	|   move.l 19c62 <DOSBase>,d0
    5074:	|   movea.l d0,a6
    5076:	|   move.l 108(sp),d1
    507a:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    507e:	\-> move.l #90036,104(sp)
    5086:	    clr.l 100(sp)
    508a:	    move.l 19c5a <SysBase>,d0
    5090:	    movea.l d0,a6
    5092:	    movea.l 104(sp),a1
    5096:	    move.l 100(sp),d0
    509a:	    jsr -552(a6)
    509e:	    move.l d0,96(sp)
    50a2:	    move.l 96(sp),d0
    50a6:	    move.l d0,19c6a <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    50ac:	    move.l 19c6a <MathIeeeSingBasBase>,d0
    50b2:	/-- bne.s 50c8 <main+0xfc>
		Exit(0);	
    50b4:	|   clr.l 92(sp)
    50b8:	|   move.l 19c62 <DOSBase>,d0
    50be:	|   movea.l d0,a6
    50c0:	|   move.l 92(sp),d1
    50c4:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    50c8:	\-> move.l #90060,88(sp)
    50d0:	    clr.l 84(sp)
    50d4:	    move.l 19c5a <SysBase>,d0
    50da:	    movea.l d0,a6
    50dc:	    movea.l 88(sp),a1
    50e0:	    move.l 84(sp),d0
    50e4:	    jsr -552(a6)
    50e8:	    move.l d0,80(sp)
    50ec:	    move.l 80(sp),d0
    50f0:	    move.l d0,19c6e <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    50f6:	    move.l 19c6e <MathIeeeSingTransBase>,d0
    50fc:	/-- bne.s 5112 <main+0x146>
		Exit(0);
    50fe:	|   clr.l 76(sp)
    5102:	|   move.l 19c62 <DOSBase>,d0
    5108:	|   movea.l d0,a6
    510a:	|   move.l 76(sp),d1
    510e:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    5112:	\-> move.l #90086,72(sp)
    511a:	    clr.l 68(sp)
    511e:	    move.l 19c5a <SysBase>,d0
    5124:	    movea.l d0,a6
    5126:	    movea.l 72(sp),a1
    512a:	    move.l 68(sp),d0
    512e:	    jsr -552(a6)
    5132:	    move.l d0,64(sp)
    5136:	    move.l 64(sp),d0
    513a:	    move.l d0,19c76 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    5140:	    move.l 19c76 <MathIeeeDoubTransBase>,d0
    5146:	/-- bne.s 515c <main+0x190>
		Exit(0);
    5148:	|   clr.l 60(sp)
    514c:	|   move.l 19c62 <DOSBase>,d0
    5152:	|   movea.l d0,a6
    5154:	|   move.l 60(sp),d1
    5158:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    515c:	\-> move.l #90112,56(sp)
    5164:	    clr.l 52(sp)
    5168:	    move.l 19c5a <SysBase>,d0
    516e:	    movea.l d0,a6
    5170:	    movea.l 56(sp),a1
    5174:	    move.l 52(sp),d0
    5178:	    jsr -552(a6)
    517c:	    move.l d0,48(sp)
    5180:	    move.l 48(sp),d0
    5184:	    move.l d0,19c72 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    518a:	    move.l 19c72 <MathIeeeDoubBasBase>,d0
    5190:	/-- bne.s 51a6 <main+0x1da>
		Exit(0);
    5192:	|   clr.l 44(sp)
    5196:	|   move.l 19c62 <DOSBase>,d0
    519c:	|   movea.l d0,a6
    519e:	|   move.l 44(sp),d1
    51a2:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    51a6:	\-> pea 16018 <incbin_player_end+0x82>
    51ac:	    jsr 12e08 <KPrintF>
    51b2:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    51b4:	    move.l 19c62 <DOSBase>,d0
    51ba:	    movea.l d0,a6
    51bc:	    jsr -60(a6)
    51c0:	    move.l d0,40(sp)
    51c4:	    move.l 40(sp),d0
    51c8:	    move.l d0,36(sp)
    51cc:	    move.l #90164,32(sp)
    51d4:	    moveq #15,d0
    51d6:	    move.l d0,28(sp)
    51da:	    move.l 19c62 <DOSBase>,d0
    51e0:	    movea.l d0,a6
    51e2:	    move.l 36(sp),d1
    51e6:	    move.l 32(sp),d2
    51ea:	    move.l 28(sp),d3
    51ee:	    jsr -48(a6)
    51f2:	    move.l d0,24(sp)
	Delay(50);
    51f6:	    moveq #50,d0
    51f8:	    move.l d0,20(sp)
    51fc:	    move.l 19c62 <DOSBase>,d0
    5202:	    movea.l d0,a6
    5204:	    move.l 20(sp),d1
    5208:	    jsr -198(a6)

	warpmode(1);
    520c:	    pea 1 <_start+0x1>
    5210:	    jsr 12e72 <warpmode>
    5216:	    addq.l #4,sp
	// TODO: precalc stuff here
#ifdef MUSIC
	if(p61Init(module) != 0)
    5218:	    move.l 1812e <module>,d0
    521e:	    move.l d0,-(sp)
    5220:	    jsr 4f82 <p61Init>
    5226:	    addq.l #4,sp
    5228:	    tst.l d0
    522a:	/-- beq.s 523a <main+0x26e>
		KPrintF("p61Init failed!\n");
    522c:	|   pea 16044 <incbin_player_end+0xae>
    5232:	|   jsr 12e08 <KPrintF>
    5238:	|   addq.l #4,sp
#endif
	warpmode(0);
    523a:	\-> clr.l -(sp)
    523c:	    jsr 12e72 <warpmode>
    5242:	    addq.l #4,sp

	TakeSystem();
    5244:	    jsr 4d66 <TakeSystem>

	custom->dmacon = 0x87ff;
    524a:	    movea.l 19c5e <custom>,a0
    5250:	    move.w #-30721,150(a0)
	WaitVbl();
    5256:	    jsr 12d30 <WaitVbl>

	main_sludge(argc, argv);
    525c:	    move.l 148(sp),-(sp)
    5260:	    move.l 148(sp),-(sp)
    5264:	    jsr 19cc <main_sludge>
    526a:	    addq.l #8,sp
	debug_register_palette(colors, "image.pal", 32, 0);
	debug_register_copperlist(copper1, "copper1", 1024, 0);
	debug_register_copperlist(copper2, "copper2", sizeof(copper2), 0);*/

#ifdef MUSIC
	p61End();
    526c:	    jsr 4fa6 <p61End>
#endif

	// END
	FreeSystem();
    5272:	    jsr 4e74 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    5278:	    move.l 19c62 <DOSBase>,16(sp)
    5280:	    move.l 19c5a <SysBase>,d0
    5286:	    movea.l d0,a6
    5288:	    movea.l 16(sp),a1
    528c:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    5290:	    move.l 19c66 <GfxBase>,12(sp)
    5298:	    move.l 19c5a <SysBase>,d0
    529e:	    movea.l d0,a6
    52a0:	    movea.l 12(sp),a1
    52a4:	    jsr -414(a6)
    52a8:	    moveq #0,d0
}
    52aa:	    movem.l (sp)+,d2-d3/a6
    52ae:	    lea 128(sp),sp
    52b2:	    rts

000052b4 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    52b4:	    lea -16(sp),sp
    52b8:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    52ba:	    moveq #8,d0
    52bc:	    move.l d0,16(sp)
    52c0:	    clr.l 12(sp)
    52c4:	    move.l 19c5a <SysBase>,d0
    52ca:	    movea.l d0,a6
    52cc:	    move.l 16(sp),d0
    52d0:	    move.l 12(sp),d1
    52d4:	    jsr -684(a6)
    52d8:	    move.l d0,8(sp)
    52dc:	    move.l 8(sp),d0
    52e0:	    move.l d0,4(sp)
	if (!newStat) {
    52e4:	/-- bne.s 5314 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    52e6:	|   movea.l 18132 <nowStatus>,a0
    52ec:	|   move.l (a0),d0
    52ee:	|   movea.l 4(sp),a0
    52f2:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    52f6:	|   pea 14253 <PutChar+0x83f>
    52fc:	|   jsr b8 <copyString>
    5302:	|   addq.l #4,sp
    5304:	|   movea.l 4(sp),a0
    5308:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    530a:	|   movea.l 18132 <nowStatus>,a0
    5310:	|   move.l 4(sp),(a0)
	}
}
    5314:	\-> nop
    5316:	    movea.l (sp)+,a6
    5318:	    lea 16(sp),sp
    531c:	    rts

0000531e <clearStatusBar>:

void clearStatusBar () {
    531e:	       lea -16(sp),sp
    5322:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    5324:	       movea.l 18132 <nowStatus>,a0
    532a:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    532e:	       movea.l 18132 <nowStatus>,a0
    5334:	       moveq #-1,d0
    5336:	       move.l d0,6(a0)
	while (stat) {
    533a:	   /-- bra.s 537a <clearStatusBar+0x5c>
		kill = stat;
    533c:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    5342:	|  |   movea.l 16(sp),a0
    5346:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    534c:	|  |   movea.l 12(sp),a0
    5350:	|  |   move.l (a0),8(sp)
    5354:	|  |   move.l 19c5a <SysBase>,d0
    535a:	|  |   movea.l d0,a6
    535c:	|  |   movea.l 8(sp),a1
    5360:	|  |   jsr -690(a6)
		FreeVec(kill);
    5364:	|  |   move.l 12(sp),4(sp)
    536a:	|  |   move.l 19c5a <SysBase>,d0
    5370:	|  |   movea.l d0,a6
    5372:	|  |   movea.l 4(sp),a1
    5376:	|  |   jsr -690(a6)
	while (stat) {
    537a:	|  \-> tst.l 16(sp)
    537e:	\----- bne.s 533c <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    5380:	       movea.l 18132 <nowStatus>,a0
    5386:	       clr.l (a0)
}
    5388:	       nop
    538a:	       movea.l (sp)+,a6
    538c:	       lea 16(sp),sp
    5390:	       rts

00005392 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    5392:	clr.l 19c8c <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    5398:	move.w #-1,19c90 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    53a0:	moveq #-1,d0
    53a2:	move.l d0,19c92 <mainStatus+0x6>
	mainStatus.statusX = 10;
    53a8:	moveq #10,d0
    53aa:	move.l d0,19c96 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    53b0:	movea.l 19b5e <winHeight>,a0
    53b6:	lea -15(a0),a0
    53ba:	move.l a0,d0
    53bc:	move.l d0,19c9a <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    53c2:	nop
    53c4:	rts

000053c6 <killLastStatus>:

void killLastStatus () {
    53c6:	    lea -12(sp),sp
    53ca:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    53cc:	    movea.l 18132 <nowStatus>,a0
    53d2:	    move.l (a0),d0
    53d4:	/-- beq.s 541e <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    53d6:	|   movea.l 18132 <nowStatus>,a0
    53dc:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    53e0:	|   movea.l 18132 <nowStatus>,a0
    53e6:	|   movea.l 12(sp),a1
    53ea:	|   move.l 4(a1),d0
    53ee:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    53f0:	|   movea.l 12(sp),a0
    53f4:	|   move.l (a0),8(sp)
    53f8:	|   move.l 19c5a <SysBase>,d0
    53fe:	|   movea.l d0,a6
    5400:	|   movea.l 8(sp),a1
    5404:	|   jsr -690(a6)
		FreeVec(kill);
    5408:	|   move.l 12(sp),4(sp)
    540e:	|   move.l 19c5a <SysBase>,d0
    5414:	|   movea.l d0,a6
    5416:	|   movea.l 4(sp),a1
    541a:	|   jsr -690(a6)
	}
}
    541e:	\-> nop
    5420:	    movea.l (sp)+,a6
    5422:	    lea 12(sp),sp
    5426:	    rts

00005428 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    5428:	movea.l 18132 <nowStatus>,a0
    542e:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    5434:	movea.l 18132 <nowStatus>,a0
    543a:	move.l 8(sp),14(a0)
}
    5440:	nop
    5442:	rts

00005444 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    5444:	       lea -100(sp),sp
    5448:	       move.l a6,-(sp)
    544a:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    544c:	       movea.l 18132 <nowStatus>,a0
    5452:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    5456:	       movea.l 18132 <nowStatus>,a0
    545c:	       move.w 4(a0),d0
    5460:	       move.w d0,d0
    5462:	       andi.l #65535,d0
    5468:	       move.l 112(sp),-(sp)
    546c:	       move.l d0,-(sp)
    546e:	       jsr 8d0 <put2bytes>
    5474:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    5476:	       movea.l 18132 <nowStatus>,a0
    547c:	       move.l 6(a0),d0
    5480:	       move.l d0,d0
    5482:	       movea.w d0,a0
    5484:	       move.l 112(sp),-(sp)
    5488:	       move.l a0,-(sp)
    548a:	       jsr a9c <putSigned>
    5490:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    5492:	       movea.l 18132 <nowStatus>,a0
    5498:	       move.l 10(a0),d0
    549c:	       move.l 112(sp),-(sp)
    54a0:	       move.l d0,-(sp)
    54a2:	       jsr 8d0 <put2bytes>
    54a8:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    54aa:	       movea.l 18132 <nowStatus>,a0
    54b0:	       move.l 14(a0),d0
    54b4:	       move.l 112(sp),-(sp)
    54b8:	       move.l d0,-(sp)
    54ba:	       jsr 8d0 <put2bytes>
    54c0:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    54c2:	       move.l 112(sp),100(sp)
    54c8:	       movea.l 18132 <nowStatus>,a0
    54ce:	       move.l 18(a0),96(sp)
    54d4:	       move.l 19c62 <DOSBase>,d0
    54da:	       movea.l d0,a6
    54dc:	       move.l 100(sp),d1
    54e0:	       move.l 96(sp),d2
    54e4:	       jsr -312(a6)
    54e8:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    54ec:	       move.l 112(sp),88(sp)
    54f2:	       movea.l 18132 <nowStatus>,a0
    54f8:	       move.l 22(a0),84(sp)
    54fe:	       move.l 19c62 <DOSBase>,d0
    5504:	       movea.l d0,a6
    5506:	       move.l 88(sp),d1
    550a:	       move.l 84(sp),d2
    550e:	       jsr -312(a6)
    5512:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    5516:	       move.l 112(sp),76(sp)
    551c:	       movea.l 18132 <nowStatus>,a0
    5522:	       move.l 26(a0),72(sp)
    5528:	       move.l 19c62 <DOSBase>,d0
    552e:	       movea.l d0,a6
    5530:	       move.l 76(sp),d1
    5534:	       move.l 72(sp),d2
    5538:	       jsr -312(a6)
    553c:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    5540:	       move.l 112(sp),64(sp)
    5546:	       movea.l 18132 <nowStatus>,a0
    554c:	       move.l 30(a0),60(sp)
    5552:	       move.l 19c62 <DOSBase>,d0
    5558:	       movea.l d0,a6
    555a:	       move.l 64(sp),d1
    555e:	       move.l 60(sp),d2
    5562:	       jsr -312(a6)
    5566:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    556a:	       move.l 112(sp),52(sp)
    5570:	       movea.l 18132 <nowStatus>,a0
    5576:	       move.l 34(a0),48(sp)
    557c:	       move.l 19c62 <DOSBase>,d0
    5582:	       movea.l d0,a6
    5584:	       move.l 52(sp),d1
    5588:	       move.l 48(sp),d2
    558c:	       jsr -312(a6)
    5590:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    5594:	       move.l 112(sp),40(sp)
    559a:	       movea.l 18132 <nowStatus>,a0
    55a0:	       move.l 38(a0),36(sp)
    55a6:	       move.l 19c62 <DOSBase>,d0
    55ac:	       movea.l d0,a6
    55ae:	       move.l 40(sp),d1
    55b2:	       move.l 36(sp),d2
    55b6:	       jsr -312(a6)
    55ba:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    55be:	   /-- bra.s 5602 <saveStatusBars+0x1be>
		FPutC (fp,1);
    55c0:	/--|-> move.l 112(sp),16(sp)
    55c6:	|  |   moveq #1,d0
    55c8:	|  |   move.l d0,12(sp)
    55cc:	|  |   move.l 19c62 <DOSBase>,d0
    55d2:	|  |   movea.l d0,a6
    55d4:	|  |   move.l 16(sp),d1
    55d8:	|  |   move.l 12(sp),d2
    55dc:	|  |   jsr -312(a6)
    55e0:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    55e4:	|  |   movea.l 104(sp),a0
    55e8:	|  |   move.l (a0),d0
    55ea:	|  |   move.l 112(sp),-(sp)
    55ee:	|  |   move.l d0,-(sp)
    55f0:	|  |   jsr bd8 <writeString>
    55f6:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    55f8:	|  |   movea.l 104(sp),a0
    55fc:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    5602:	|  \-> tst.l 104(sp)
    5606:	\----- bne.s 55c0 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    5608:	       move.l 112(sp),28(sp)
    560e:	       clr.l 24(sp)
    5612:	       move.l 19c62 <DOSBase>,d0
    5618:	       movea.l d0,a6
    561a:	       move.l 28(sp),d1
    561e:	       move.l 24(sp),d2
    5622:	       jsr -312(a6)
    5626:	       move.l d0,20(sp)
}
    562a:	       nop
    562c:	       move.l (sp)+,d2
    562e:	       movea.l (sp)+,a6
    5630:	       lea 100(sp),sp
    5634:	       rts

00005636 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    5636:	movea.l 18132 <nowStatus>,a0
    563c:	move.l 4(sp),6(a0)
}
    5642:	nop
    5644:	rts

00005646 <setStatusBar>:

void setStatusBar (char * txt) {
    5646:	    subq.l #4,sp
    5648:	    move.l a6,-(sp)
    564a:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    564c:	    movea.l 18132 <nowStatus>,a0
    5652:	    move.l (a0),d0
    5654:	/-- beq.s 5688 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    5656:	|   movea.l 18132 <nowStatus>,a0
    565c:	|   movea.l (a0),a0
    565e:	|   move.l (a0),8(sp)
    5662:	|   move.l 19c5a <SysBase>,d0
    5668:	|   movea.l d0,a6
    566a:	|   movea.l 8(sp),a1
    566e:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    5672:	|   movea.l 18132 <nowStatus>,a0
    5678:	|   movea.l (a0),a2
    567a:	|   move.l 16(sp),-(sp)
    567e:	|   jsr b8 <copyString>
    5684:	|   addq.l #4,sp
    5686:	|   move.l d0,(a2)
	}
}
    5688:	\-> nop
    568a:	    movea.l (sp)+,a2
    568c:	    movea.l (sp)+,a6
    568e:	    addq.l #4,sp
    5690:	    rts

00005692 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    5692:	       movea.l 18132 <nowStatus>,a0
    5698:	       move.l (a0),d0
    569a:	/----- beq.s 56a8 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    569c:	|      movea.l 18132 <nowStatus>,a0
    56a2:	|      movea.l (a0),a0
    56a4:	|      move.l (a0),d0
    56a6:	|  /-- bra.s 56ae <statusBarText+0x1c>
	} else {
		return "";
    56a8:	\--|-> move.l #82515,d0
	}
    56ae:	   \-> rts

000056b0 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    56b0:	       lea -28(sp),sp
    56b4:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    56b8:	       move.l 52(sp),-(sp)
    56bc:	       jsr 11792 <stringWidth>
    56c2:	       addq.l #4,sp
    56c4:	       asr.l #1,d0
    56c6:	       move.l d0,-(sp)
    56c8:	       jsr 133a4 <__floatsisf>
    56ce:	       addq.l #4,sp
    56d0:	       move.l d0,d1
    56d2:	       move.l 1814a <cameraZoom>,d0
    56d8:	       move.l d0,-(sp)
    56da:	       move.l d1,-(sp)
    56dc:	       jsr 13250 <__divsf3>
    56e2:	       addq.l #8,sp
    56e4:	       move.l d0,-(sp)
    56e6:	       jsr 1333c <__fixsfsi>
    56ec:	       addq.l #4,sp
    56ee:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    56f2:	       move.l 56(sp),d0
    56f6:	       sub.l 44(sp),d0
    56fa:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    56fe:	       move.l 56(sp),d0
    5702:	       add.l 44(sp),d0
    5706:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    570a:	       moveq #12,d0
    570c:	       move.l d0,32(sp)
    5710:	       clr.l 28(sp)
    5714:	       move.l 19c5a <SysBase>,d0
    571a:	       movea.l d0,a6
    571c:	       move.l 32(sp),d0
    5720:	       move.l 28(sp),d1
    5724:	       jsr -684(a6)
    5728:	       move.l d0,24(sp)
    572c:	       move.l 24(sp),d0
    5730:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    5734:	       movea.l 19cb6 <speech>,a0
    573a:	       move.l 4(a0),d0
    573e:	       movea.l 20(sp),a0
    5742:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    5746:	       move.l 52(sp),-(sp)
    574a:	       jsr b8 <copyString>
    5750:	       addq.l #4,sp
    5752:	       movea.l 20(sp),a0
    5756:	       move.l d0,(a0)
	newLine -> x = xx1;
    5758:	       movea.l 20(sp),a0
    575c:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    5762:	       movea.l 19cb6 <speech>,a0
    5768:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    576e:	       moveq #4,d0
    5770:	       cmp.l 40(sp),d0
    5774:	   /-- blt.s 5796 <addSpeechLine+0xe6>
    5776:	   |   movea.l 60(sp),a0
    577a:	   |   move.l (a0),d1
    577c:	   |   moveq #5,d0
    577e:	   |   sub.l 40(sp),d0
    5782:	   |   cmp.l d1,d0
    5784:	   +-- ble.s 5796 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    5786:	   |   moveq #5,d0
    5788:	   |   sub.l 40(sp),d0
    578c:	   |   movea.l 60(sp),a0
    5790:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    5792:	/--|-- bra.w 58c2 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    5796:	|  \-> move.l 36(sp),-(sp)
    579a:	|      jsr 133a4 <__floatsisf>
    57a0:	|      addq.l #4,sp
    57a2:	|      move.l d0,d2
    57a4:	|      move.l 19b5a <winWidth>,d0
    57aa:	|      move.l d0,-(sp)
    57ac:	|      jsr 133cc <__floatunsisf>
    57b2:	|      addq.l #4,sp
    57b4:	|      move.l d0,d1
    57b6:	|      move.l 1814a <cameraZoom>,d0
    57bc:	|      move.l d0,-(sp)
    57be:	|      move.l d1,-(sp)
    57c0:	|      jsr 13250 <__divsf3>
    57c6:	|      addq.l #8,sp
    57c8:	|      move.l #1084227584,-(sp)
    57ce:	|      move.l d0,-(sp)
    57d0:	|      jsr 13698 <__subsf3>
    57d6:	|      addq.l #8,sp
    57d8:	|      move.l d0,-(sp)
    57da:	|      move.l d2,-(sp)
    57dc:	|      jsr 1348c <__gesf2>
    57e2:	|      addq.l #8,sp
    57e4:	|      tst.l d0
    57e6:	|  /-- bge.s 57ec <addSpeechLine+0x13c>
}
    57e8:	+--|-- bra.w 58c2 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    57ec:	|  \-> movea.l 60(sp),a0
    57f0:	|      move.l (a0),d0
    57f2:	|      move.l d0,-(sp)
    57f4:	|      jsr 133a4 <__floatsisf>
    57fa:	|      addq.l #4,sp
    57fc:	|      move.l d0,-(sp)
    57fe:	|      jsr 132bc <__extendsfdf2>
    5804:	|      addq.l #4,sp
    5806:	|      move.l d0,d4
    5808:	|      move.l d1,d5
    580a:	|      move.l 19b5a <winWidth>,d0
    5810:	|      move.l d0,-(sp)
    5812:	|      jsr 133cc <__floatunsisf>
    5818:	|      addq.l #4,sp
    581a:	|      move.l d0,d1
    581c:	|      move.l 1814a <cameraZoom>,d0
    5822:	|      move.l d0,-(sp)
    5824:	|      move.l d1,-(sp)
    5826:	|      jsr 13250 <__divsf3>
    582c:	|      addq.l #8,sp
    582e:	|      move.l d0,-(sp)
    5830:	|      jsr 132bc <__extendsfdf2>
    5836:	|      addq.l #4,sp
    5838:	|      clr.l -(sp)
    583a:	|      move.l #1075052544,-(sp)
    5840:	|      move.l d1,-(sp)
    5842:	|      move.l d0,-(sp)
    5844:	|      jsr 13636 <__subdf3>
    584a:	|      lea 16(sp),sp
    584e:	|      move.l d0,d2
    5850:	|      move.l d1,d3
    5852:	|      move.l 36(sp),-(sp)
    5856:	|      jsr 13364 <__floatsidf>
    585c:	|      addq.l #4,sp
    585e:	|      move.l d1,-(sp)
    5860:	|      move.l d0,-(sp)
    5862:	|      move.l d3,-(sp)
    5864:	|      move.l d2,-(sp)
    5866:	|      jsr 13636 <__subdf3>
    586c:	|      lea 16(sp),sp
    5870:	|      move.l d1,-(sp)
    5872:	|      move.l d0,-(sp)
    5874:	|      move.l d5,-(sp)
    5876:	|      move.l d4,-(sp)
    5878:	|      jsr 134c2 <__gtdf2>
    587e:	|      lea 16(sp),sp
    5882:	|      tst.l d0
    5884:	|  /-- bgt.s 5888 <addSpeechLine+0x1d8>
}
    5886:	+--|-- bra.s 58c2 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    5888:	|  \-> move.l 19b5a <winWidth>,d0
    588e:	|      move.l d0,-(sp)
    5890:	|      jsr 133cc <__floatunsisf>
    5896:	|      addq.l #4,sp
    5898:	|      move.l d0,d1
    589a:	|      move.l 1814a <cameraZoom>,d0
    58a0:	|      move.l d0,-(sp)
    58a2:	|      move.l d1,-(sp)
    58a4:	|      jsr 13250 <__divsf3>
    58aa:	|      addq.l #8,sp
    58ac:	|      move.l d0,-(sp)
    58ae:	|      jsr 1333c <__fixsfsi>
    58b4:	|      addq.l #4,sp
    58b6:	|      subq.l #5,d0
    58b8:	|      sub.l 36(sp),d0
    58bc:	|      movea.l 60(sp),a0
    58c0:	|      move.l d0,(a0)
}
    58c2:	\----> nop
    58c4:	       movem.l (sp)+,d2-d5/a6
    58c8:	       lea 28(sp),sp
    58cc:	       rts

000058ce <initSpeech>:


void initSpeech () {
    58ce:	       lea -12(sp),sp
    58d2:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    58d4:	       moveq #20,d0
    58d6:	       move.l d0,12(sp)
    58da:	       clr.l 8(sp)
    58de:	       move.l 19c5a <SysBase>,d0
    58e4:	       movea.l d0,a6
    58e6:	       move.l 12(sp),d0
    58ea:	       move.l 8(sp),d1
    58ee:	       jsr -684(a6)
    58f2:	       move.l d0,4(sp)
    58f6:	       move.l 4(sp),d0
    58fa:	       move.l d0,19cb6 <speech>
	if (speech) {
    5900:	       move.l 19cb6 <speech>,d0
    5906:	/----- beq.s 5932 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    5908:	|      movea.l 19cb6 <speech>,a0
    590e:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    5910:	|      movea.l 19cb6 <speech>,a0
    5916:	|      clr.l 4(a0)
		speech -> speechY = 0;
    591a:	|      movea.l 19cb6 <speech>,a0
    5920:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    5924:	|      movea.l 19cb6 <speech>,a0
    592a:	|      moveq #-1,d0
    592c:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    5930:	|  /-- bra.s 5940 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    5932:	\--|-> pea 1607c <incbin_player_end+0xe6>
    5938:	   |   jsr 12e08 <KPrintF>
    593e:	   |   addq.l #4,sp
}
    5940:	   \-> nop
    5942:	       movea.l (sp)+,a6
    5944:	       lea 12(sp),sp
    5948:	       rts

0000594a <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    594a:	       movea.l 19cb6 <speech>,a0
    5950:	       move.l 4(a0),d0
    5954:	/----- beq.s 5962 <isThereAnySpeechGoingOn+0x18>
    5956:	|      movea.l 19cb6 <speech>,a0
    595c:	|      move.l 16(a0),d0
    5960:	|  /-- bra.s 5964 <isThereAnySpeechGoingOn+0x1a>
    5962:	\--|-> moveq #-1,d0
}
    5964:	   \-> rts

00005966 <killAllSpeech>:

void killAllSpeech () {
    5966:	       lea -12(sp),sp
    596a:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    596c:	       movea.l 19cb6 <speech>,a0
    5972:	       move.l 12(a0),d0
    5976:	       moveq #-1,d1
    5978:	       cmp.l d0,d1
    597a:	   /-- beq.s 5988 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    597c:	   |   movea.l 19cb6 <speech>,a0
    5982:	   |   moveq #-1,d0
    5984:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    5988:	   \-> movea.l 19cb6 <speech>,a0
    598e:	       move.l (a0),d0
    5990:	/----- beq.w 5a1c <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    5994:	|      movea.l 19cb6 <speech>,a0
    599a:	|      move.l (a0),d0
    599c:	|      lea -120(sp),sp
    59a0:	|      move.l sp,d1
    59a2:	|      movea.l d0,a0
    59a4:	|      moveq #120,d0
    59a6:	|      move.l d0,-(sp)
    59a8:	|      move.l a0,-(sp)
    59aa:	|      move.l d1,-(sp)
    59ac:	|      jsr 12dbc <memcpy>
    59b2:	|      lea 12(sp),sp
    59b6:	|      jsr 745c <makeSilent>
    59bc:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    59c0:	|      movea.l 19cb6 <speech>,a0
    59c6:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    59c8:	+----- bra.s 5a1c <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    59ca:	|  /-> movea.l 19cb6 <speech>,a0
    59d0:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    59d6:	|  |   movea.l 19cb6 <speech>,a0
    59dc:	|  |   movea.l 4(a0),a1
    59e0:	|  |   movea.l 19cb6 <speech>,a0
    59e6:	|  |   move.l 4(a1),d0
    59ea:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    59ee:	|  |   movea.l 12(sp),a0
    59f2:	|  |   move.l (a0),8(sp)
    59f6:	|  |   move.l 19c5a <SysBase>,d0
    59fc:	|  |   movea.l d0,a6
    59fe:	|  |   movea.l 8(sp),a1
    5a02:	|  |   jsr -690(a6)
		FreeVec(killMe);
    5a06:	|  |   move.l 12(sp),4(sp)
    5a0c:	|  |   move.l 19c5a <SysBase>,d0
    5a12:	|  |   movea.l d0,a6
    5a14:	|  |   movea.l 4(sp),a1
    5a18:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    5a1c:	\--|-> movea.l 19cb6 <speech>,a0
    5a22:	   |   move.l 4(a0),d0
    5a26:	   \-- bne.s 59ca <killAllSpeech+0x64>
	}
}
    5a28:	       nop
    5a2a:	       nop
    5a2c:	       movea.l (sp)+,a6
    5a2e:	       lea 12(sp),sp
    5a32:	       rts

00005a34 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    5a34:	pea 2 <_start+0x2>
    5a38:	move.l 8(sp),-(sp)
    5a3c:	jsr 5b94 <setFrames>
    5a42:	addq.l #8,sp
}
    5a44:	nop
    5a46:	rts

00005a48 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    5a48:	       lea -52(sp),sp
    5a4c:	       move.l a6,-(sp)
    5a4e:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    5a50:	       movea.l 64(sp),a0
    5a54:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    5a5a:	       move.l 18136 <speechSpeed>,d0
    5a60:	       move.l 68(sp),-(sp)
    5a64:	       move.l d0,-(sp)
    5a66:	       jsr a46 <putFloat>
    5a6c:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    5a6e:	       movea.l 64(sp),a0
    5a72:	       move.l 8(a0),d0
    5a76:	       move.l 68(sp),-(sp)
    5a7a:	       move.l d0,-(sp)
    5a7c:	       jsr 8d0 <put2bytes>
    5a82:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    5a84:	       movea.l 64(sp),a0
    5a88:	       move.l 16(a0),d0
    5a8c:	       move.l 68(sp),-(sp)
    5a90:	       move.l d0,-(sp)
    5a92:	       jsr 8d0 <put2bytes>
    5a98:	       addq.l #8,sp
		if (sS -> currentTalker) {
    5a9a:	       movea.l 64(sp),a0
    5a9e:	       move.l (a0),d0
    5aa0:	   /-- beq.s 5ae4 <saveSpeech+0x9c>
			FPutC (fp, 1);
    5aa2:	   |   move.l 68(sp),40(sp)
    5aa8:	   |   moveq #1,d0
    5aaa:	   |   move.l d0,36(sp)
    5aae:	   |   move.l 19c62 <DOSBase>,d0
    5ab4:	   |   movea.l d0,a6
    5ab6:	   |   move.l 40(sp),d1
    5aba:	   |   move.l 36(sp),d2
    5abe:	   |   jsr -312(a6)
    5ac2:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    5ac6:	   |   movea.l 64(sp),a0
    5aca:	   |   movea.l (a0),a0
    5acc:	   |   movea.l 102(a0),a0
    5ad0:	   |   move.l 4(a0),d0
    5ad4:	   |   move.l 68(sp),-(sp)
    5ad8:	   |   move.l d0,-(sp)
    5ada:	   |   jsr 8d0 <put2bytes>
    5ae0:	   |   addq.l #8,sp
    5ae2:	/--|-- bra.s 5b60 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    5ae4:	|  \-> move.l 68(sp),52(sp)
    5aea:	|      clr.l 48(sp)
    5aee:	|      move.l 19c62 <DOSBase>,d0
    5af4:	|      movea.l d0,a6
    5af6:	|      move.l 52(sp),d1
    5afa:	|      move.l 48(sp),d2
    5afe:	|      jsr -312(a6)
    5b02:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    5b06:	+----- bra.s 5b60 <saveSpeech+0x118>
			FPutC (fp, 1);
    5b08:	|  /-> move.l 68(sp),16(sp)
    5b0e:	|  |   moveq #1,d0
    5b10:	|  |   move.l d0,12(sp)
    5b14:	|  |   move.l 19c62 <DOSBase>,d0
    5b1a:	|  |   movea.l d0,a6
    5b1c:	|  |   move.l 16(sp),d1
    5b20:	|  |   move.l 12(sp),d2
    5b24:	|  |   jsr -312(a6)
    5b28:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    5b2c:	|  |   movea.l 56(sp),a0
    5b30:	|  |   move.l (a0),d0
    5b32:	|  |   move.l 68(sp),-(sp)
    5b36:	|  |   move.l d0,-(sp)
    5b38:	|  |   jsr bd8 <writeString>
    5b3e:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    5b40:	|  |   movea.l 56(sp),a0
    5b44:	|  |   move.l 8(a0),d0
    5b48:	|  |   move.l 68(sp),-(sp)
    5b4c:	|  |   move.l d0,-(sp)
    5b4e:	|  |   jsr 8d0 <put2bytes>
    5b54:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    5b56:	|  |   movea.l 56(sp),a0
    5b5a:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    5b60:	\--|-> tst.l 56(sp)
    5b64:	   \-- bne.s 5b08 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    5b66:	       move.l 68(sp),28(sp)
    5b6c:	       clr.l 24(sp)
    5b70:	       move.l 19c62 <DOSBase>,d0
    5b76:	       movea.l d0,a6
    5b78:	       move.l 28(sp),d1
    5b7c:	       move.l 24(sp),d2
    5b80:	       jsr -312(a6)
    5b84:	       move.l d0,20(sp)
}
    5b88:	       nop
    5b8a:	       move.l (sp)+,d2
    5b8c:	       movea.l (sp)+,a6
    5b8e:	       lea 52(sp),sp
    5b92:	       rts

00005b94 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    5b94:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    5b96:	movea.l 8(sp),a0
    5b9a:	movea.l 68(a0),a0
    5b9e:	move.l (a0),d2
    5ba0:	movea.l 8(sp),a0
    5ba4:	movea.l 68(a0),a0
    5ba8:	move.l 4(a0),d0
    5bac:	move.l 12(sp),-(sp)
    5bb0:	move.l d0,-(sp)
    5bb2:	jsr 138fe <__mulsi3>
    5bb8:	addq.l #8,sp
    5bba:	move.l d0,d1
    5bbc:	movea.l 8(sp),a0
    5bc0:	move.l 94(a0),d0
    5bc4:	add.l d1,d0
    5bc6:	add.l d0,d0
    5bc8:	add.l d0,d0
    5bca:	movea.l d2,a0
    5bcc:	adda.l d0,a0
    5bce:	move.l (a0),d0
    5bd0:	movea.l 8(sp),a0
    5bd4:	move.l d0,60(a0)
}
    5bd8:	nop
    5bda:	move.l (sp)+,d2
    5bdc:	rts

00005bde <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    5bde:	       lea -20(sp),sp
    5be2:	       move.l d2,-(sp)
    5be4:	       move.l 40(sp),d0
    5be8:	       move.w d0,d0
    5bea:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    5bee:	       movea.l 19cb6 <speech>,a0
    5bf4:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    5bfa:	       move.l 32(sp),-(sp)
    5bfe:	       jsr 6f46 <findPerson>
    5c04:	       addq.l #4,sp
    5c06:	       move.l d0,16(sp)
    if (thisPerson) {
    5c0a:	   /-- beq.s 5c30 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    5c0c:	   |   movea.w 6(sp),a0
    5c10:	   |   move.l a0,-(sp)
    5c12:	   |   move.l 40(sp),-(sp)
    5c16:	   |   move.l 24(sp),-(sp)
    5c1a:	   |   move.l 40(sp),-(sp)
    5c1e:	   |   jsr 5cf6 <wrapSpeechPerson>
    5c24:	   |   lea 16(sp),sp
    5c28:	   |   move.l d0,20(sp)
    5c2c:	/--|-- bra.w 5cea <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    5c30:	|  \-> move.l 32(sp),-(sp)
    5c34:	|      jsr 1187e <getRegionForObject>
    5c3a:	|      addq.l #4,sp
    5c3c:	|      move.l d0,12(sp)
        if (thisRegion) {
    5c40:	|  /-- beq.s 5cac <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    5c42:	|  |   movea.l 12(sp),a0
    5c46:	|  |   movea.l 28(a0),a0
    5c4a:	|  |   move.l 28(a0),d0
    5c4e:	|  |   movea.l 12(sp),a0
    5c52:	|  |   movea.l 4(a0),a1
    5c56:	|  |   movea.l 12(sp),a0
    5c5a:	|  |   movea.l 28(a0),a0
    5c5e:	|  |   move.l 20(a0),d1
    5c62:	|  |   movea.l a1,a0
    5c64:	|  |   suba.l d1,a0
    5c66:	|  |   move.l 19d18 <cameraY>,d1
    5c6c:	|  |   movea.l a0,a1
    5c6e:	|  |   suba.l d1,a1
    5c70:	|  |   movea.l 12(sp),a0
    5c74:	|  |   move.l (a0),d2
    5c76:	|  |   movea.l 12(sp),a0
    5c7a:	|  |   move.l 8(a0),d1
    5c7e:	|  |   add.l d2,d1
    5c80:	|  |   move.l d1,d2
    5c82:	|  |   asr.l #1,d2
    5c84:	|  |   move.l 19d14 <cameraX>,d1
    5c8a:	|  |   movea.l d2,a0
    5c8c:	|  |   suba.l d1,a0
    5c8e:	|  |   move.l 36(sp),-(sp)
    5c92:	|  |   move.l d0,-(sp)
    5c94:	|  |   move.l a1,-(sp)
    5c96:	|  |   move.l a0,-(sp)
    5c98:	|  |   move.l 44(sp),-(sp)
    5c9c:	|  |   jsr 5e14 <wrapSpeechXY>
    5ca2:	|  |   lea 20(sp),sp
    5ca6:	|  |   move.l d0,20(sp)
    5caa:	+--|-- bra.s 5cea <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    5cac:	|  \-> move.l 32(sp),-(sp)
    5cb0:	|      jsr 9c06 <findObjectType>
    5cb6:	|      addq.l #4,sp
    5cb8:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    5cbc:	|      movea.l 8(sp),a0
    5cc0:	|      move.l 28(a0),d1
    5cc4:	|      move.l 19b5a <winWidth>,d0
    5cca:	|      lsr.l #1,d0
    5ccc:	|      move.l 36(sp),-(sp)
    5cd0:	|      move.l d1,-(sp)
    5cd2:	|      pea a <_start+0xa>
    5cd6:	|      move.l d0,-(sp)
    5cd8:	|      move.l 44(sp),-(sp)
    5cdc:	|      jsr 5e14 <wrapSpeechXY>
    5ce2:	|      lea 20(sp),sp
    5ce6:	|      move.l d0,20(sp)
        }
    }
    return i;
    5cea:	\----> move.l 20(sp),d0
}
    5cee:	       move.l (sp)+,d2
    5cf0:	       lea 20(sp),sp
    5cf4:	       rts

00005cf6 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    5cf6:	    subq.l #8,sp
    5cf8:	    movem.l d2-d4,-(sp)
    5cfc:	    move.l 36(sp),d0
    5d00:	    move.w d0,d0
    5d02:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    5d06:	    movea.l 28(sp),a0
    5d0a:	    movea.l 102(a0),a0
    5d0e:	    move.l 28(a0),d2
    5d12:	    movea.l 28(sp),a0
    5d16:	    move.l 4(a0),d3
    5d1a:	    move.l 19d18 <cameraY>,d0
    5d20:	    move.l d0,-(sp)
    5d22:	    jsr 133a4 <__floatsisf>
    5d28:	    addq.l #4,sp
    5d2a:	    move.l d0,-(sp)
    5d2c:	    move.l d3,-(sp)
    5d2e:	    jsr 13698 <__subsf3>
    5d34:	    addq.l #8,sp
    5d36:	    move.l d0,d3
    5d38:	    movea.l 28(sp),a0
    5d3c:	    move.l 20(a0),d4
    5d40:	    movea.l 28(sp),a0
    5d44:	    move.l 8(a0),d1
    5d48:	    movea.l 28(sp),a0
    5d4c:	    move.l 12(a0),d0
    5d50:	    sub.l d0,d1
    5d52:	    move.l d1,-(sp)
    5d54:	    jsr 133a4 <__floatsisf>
    5d5a:	    addq.l #4,sp
    5d5c:	    move.l d0,-(sp)
    5d5e:	    move.l d4,-(sp)
    5d60:	    jsr 13456 <__mulsf3>
    5d66:	    addq.l #8,sp
    5d68:	    move.l d0,-(sp)
    5d6a:	    move.l d3,-(sp)
    5d6c:	    jsr 13698 <__subsf3>
    5d72:	    addq.l #8,sp
    5d74:	    move.l d0,d3
    5d76:	    movea.l 28(sp),a0
    5d7a:	    movea.l 102(a0),a0
    5d7e:	    move.l 20(a0),d0
    5d82:	    move.l d0,-(sp)
    5d84:	    jsr 133a4 <__floatsisf>
    5d8a:	    addq.l #4,sp
    5d8c:	    move.l d0,-(sp)
    5d8e:	    move.l d3,-(sp)
    5d90:	    jsr 13698 <__subsf3>
    5d96:	    addq.l #8,sp
    5d98:	    move.l d0,-(sp)
    5d9a:	    jsr 1333c <__fixsfsi>
    5da0:	    addq.l #4,sp
    5da2:	    move.l d0,d4
    5da4:	    movea.l 28(sp),a0
    5da8:	    move.l (a0),d3
    5daa:	    move.l 19d14 <cameraX>,d0
    5db0:	    move.l d0,-(sp)
    5db2:	    jsr 133a4 <__floatsisf>
    5db8:	    addq.l #4,sp
    5dba:	    move.l d0,-(sp)
    5dbc:	    move.l d3,-(sp)
    5dbe:	    jsr 13698 <__subsf3>
    5dc4:	    addq.l #8,sp
    5dc6:	    move.l d0,-(sp)
    5dc8:	    jsr 1333c <__fixsfsi>
    5dce:	    addq.l #4,sp
    5dd0:	    move.l 32(sp),-(sp)
    5dd4:	    move.l d2,-(sp)
    5dd6:	    move.l d4,-(sp)
    5dd8:	    move.l d0,-(sp)
    5dda:	    move.l 40(sp),-(sp)
    5dde:	    jsr 5e14 <wrapSpeechXY>
    5de4:	    lea 20(sp),sp
    5de8:	    move.l d0,16(sp)
	if (animPerson) {
    5dec:	    tst.w 14(sp)
    5df0:	/-- beq.s 5e08 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    5df2:	|   move.l 28(sp),-(sp)
    5df6:	|   jsr 5a34 <makeTalker>
    5dfc:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    5dfe:	|   movea.l 19cb6 <speech>,a0
    5e04:	|   move.l 28(sp),(a0)
	}
	return i;
    5e08:	\-> move.l 16(sp),d0
}
    5e0c:	    movem.l (sp)+,d2-d4
    5e10:	    addq.l #8,sp
    5e12:	    rts

00005e14 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    5e14:	                   lea -16(sp),sp
    5e18:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    5e1c:	                   clr.l 16(sp)
    killAllSpeech();
    5e20:	                   jsr 5966 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    5e26:	                   move.l 36(sp),-(sp)
    5e2a:	                   jsr 102a0 <strlen>
    5e30:	                   addq.l #4,sp
    5e32:	                   movea.l d0,a0
    5e34:	                   lea 20(a0),a0
    5e38:	                   move.l a0,-(sp)
    5e3a:	                   jsr 133cc <__floatunsisf>
    5e40:	                   addq.l #4,sp
    5e42:	                   move.l d0,d1
    5e44:	                   move.l 18136 <speechSpeed>,d0
    5e4a:	                   move.l d0,-(sp)
    5e4c:	                   move.l d1,-(sp)
    5e4e:	                   jsr 13456 <__mulsf3>
    5e54:	                   addq.l #8,sp
    5e56:	                   move.l d0,-(sp)
    5e58:	                   jsr 1333c <__fixsfsi>
    5e5e:	                   addq.l #4,sp
    5e60:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    5e64:	               /-- bgt.s 5e6c <wrapSpeechXY+0x58>
    5e66:	               |   moveq #1,d0
    5e68:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    5e6c:	               \-> moveq #-1,d1
    5e6e:	                   cmp.l 52(sp),d1
    5e72:	               /-- beq.s 5eb2 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    5e74:	               |   move.l 19d28 <speechMode>,d0
    5e7a:	               +-- ble.s 5eb2 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    5e7c:	               |   clr.l -(sp)
    5e7e:	               |   move.l 56(sp),-(sp)
    5e82:	               |   jsr 9878 <startSound>
    5e88:	               |   addq.l #8,sp
    5e8a:	               |   tst.w d0
    5e8c:	               +-- beq.s 5eb2 <wrapSpeechXY+0x9e>
                speechTime = -10;
    5e8e:	               |   moveq #-10,d0
    5e90:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    5e94:	               |   movea.l 19cb6 <speech>,a0
    5e9a:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    5ea0:	               |   move.l 19d28 <speechMode>,d0
    5ea6:	               |   moveq #2,d1
    5ea8:	               |   cmp.l d0,d1
    5eaa:	               +-- bne.s 5eb2 <wrapSpeechXY+0x9e>
    5eac:	               |   moveq #-10,d0
    5eae:	/--------------|-- bra.w 6138 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    5eb2:	|              \-> movea.l 19cb6 <speech>,a0
    5eb8:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    5ebe:	|     /----------- bra.w 5f72 <wrapSpeechXY+0x15e>
        a = wrap;
    5ec2:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    5ec8:	|  |  |        /-- bra.s 5ed8 <wrapSpeechXY+0xc4>
            a--;
    5eca:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    5ece:	|  |  |  |     +-- bne.s 5ed8 <wrapSpeechXY+0xc4>
                a = wrap;
    5ed0:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    5ed6:	|  |  |  |  /--|-- bra.s 5eea <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    5ed8:	|  |  |  |  |  \-> move.l 28(sp),d0
    5edc:	|  |  |  |  |      movea.l 36(sp),a0
    5ee0:	|  |  |  |  |      adda.l d0,a0
    5ee2:	|  |  |  |  |      move.b (a0),d0
    5ee4:	|  |  |  |  |      cmpi.b #32,d0
    5ee8:	|  |  |  \--|----- bne.s 5eca <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    5eea:	|  |  |     \----> move.l 28(sp),d0
    5eee:	|  |  |            movea.l 36(sp),a0
    5ef2:	|  |  |            adda.l d0,a0
    5ef4:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    5ef6:	|  |  |            lea 16(sp),a0
    5efa:	|  |  |            move.l a0,-(sp)
    5efc:	|  |  |            move.l 44(sp),-(sp)
    5f00:	|  |  |            move.l 44(sp),-(sp)
    5f04:	|  |  |            jsr 56b0 <addSpeechLine>
    5f0a:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    5f0e:	|  |  |            move.l 28(sp),d0
    5f12:	|  |  |            movea.l 36(sp),a0
    5f16:	|  |  |            adda.l d0,a0
    5f18:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    5f1c:	|  |  |            move.l 28(sp),d0
    5f20:	|  |  |            addq.l #1,d0
    5f22:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    5f26:	|  |  |            move.l 44(sp),-(sp)
    5f2a:	|  |  |            jsr 133a4 <__floatsisf>
    5f30:	|  |  |            addq.l #4,sp
    5f32:	|  |  |            move.l d0,d2
    5f34:	|  |  |            move.l 19d4e <fontHeight>,d0
    5f3a:	|  |  |            move.l d0,-(sp)
    5f3c:	|  |  |            jsr 133a4 <__floatsisf>
    5f42:	|  |  |            addq.l #4,sp
    5f44:	|  |  |            move.l d0,d1
    5f46:	|  |  |            move.l 1814a <cameraZoom>,d0
    5f4c:	|  |  |            move.l d0,-(sp)
    5f4e:	|  |  |            move.l d1,-(sp)
    5f50:	|  |  |            jsr 13250 <__divsf3>
    5f56:	|  |  |            addq.l #8,sp
    5f58:	|  |  |            move.l d0,-(sp)
    5f5a:	|  |  |            move.l d2,-(sp)
    5f5c:	|  |  |            jsr 13698 <__subsf3>
    5f62:	|  |  |            addq.l #8,sp
    5f64:	|  |  |            move.l d0,-(sp)
    5f66:	|  |  |            jsr 1333c <__fixsfsi>
    5f6c:	|  |  |            addq.l #4,sp
    5f6e:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    5f72:	|  |  \----------> move.l 36(sp),-(sp)
    5f76:	|  |               jsr 102a0 <strlen>
    5f7c:	|  |               addq.l #4,sp
    5f7e:	|  |               move.l d0,d1
    5f80:	|  |               move.l 48(sp),d0
    5f84:	|  |               cmp.l d1,d0
    5f86:	|  \-------------- bcs.w 5ec2 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    5f8a:	|                  lea 16(sp),a0
    5f8e:	|                  move.l a0,-(sp)
    5f90:	|                  move.l 44(sp),-(sp)
    5f94:	|                  move.l 44(sp),-(sp)
    5f98:	|                  jsr 56b0 <addSpeechLine>
    5f9e:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    5fa2:	|                  move.l 44(sp),-(sp)
    5fa6:	|                  jsr 133a4 <__floatsisf>
    5fac:	|                  addq.l #4,sp
    5fae:	|                  move.l d0,d2
    5fb0:	|                  move.l 19d4e <fontHeight>,d0
    5fb6:	|                  move.l d0,-(sp)
    5fb8:	|                  jsr 133a4 <__floatsisf>
    5fbe:	|                  addq.l #4,sp
    5fc0:	|                  move.l d0,d1
    5fc2:	|                  move.l 1814a <cameraZoom>,d0
    5fc8:	|                  move.l d0,-(sp)
    5fca:	|                  move.l d1,-(sp)
    5fcc:	|                  jsr 13250 <__divsf3>
    5fd2:	|                  addq.l #8,sp
    5fd4:	|                  move.l d0,-(sp)
    5fd6:	|                  move.l d2,-(sp)
    5fd8:	|                  jsr 13698 <__subsf3>
    5fde:	|                  addq.l #8,sp
    5fe0:	|                  move.l d0,-(sp)
    5fe2:	|                  jsr 1333c <__fixsfsi>
    5fe8:	|                  addq.l #4,sp
    5fea:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    5fee:	|              /-- bpl.s 600c <wrapSpeechXY+0x1f8>
    5ff0:	|              |   movea.l 19cb6 <speech>,a0
    5ff6:	|              |   move.l 8(a0),d0
    5ffa:	|              |   movea.l 19cb6 <speech>,a0
    6000:	|              |   sub.l 44(sp),d0
    6004:	|              |   move.l d0,8(a0)
    6008:	|           /--|-- bra.w 60fa <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    600c:	|           |  \-> movea.l 19cb6 <speech>,a0
    6012:	|           |      move.l 8(a0),d0
    6016:	|           |      move.l d0,-(sp)
    6018:	|           |      jsr 133a4 <__floatsisf>
    601e:	|           |      addq.l #4,sp
    6020:	|           |      move.l d0,d2
    6022:	|           |      move.l 19d18 <cameraY>,d0
    6028:	|           |      move.l d0,-(sp)
    602a:	|           |      jsr 133a4 <__floatsisf>
    6030:	|           |      addq.l #4,sp
    6032:	|           |      move.l d0,d3
    6034:	|           |      move.l 19b5e <winHeight>,d4
    603a:	|           |      move.l 19d4e <fontHeight>,d0
    6040:	|           |      pea 3 <_start+0x3>
    6044:	|           |      move.l d0,-(sp)
    6046:	|           |      jsr 1397c <__divsi3>
    604c:	|           |      addq.l #8,sp
    604e:	|           |      move.l d4,d1
    6050:	|           |      sub.l d0,d1
    6052:	|           |      move.l d1,-(sp)
    6054:	|           |      jsr 133cc <__floatunsisf>
    605a:	|           |      addq.l #4,sp
    605c:	|           |      move.l d0,d1
    605e:	|           |      move.l 1814a <cameraZoom>,d0
    6064:	|           |      move.l d0,-(sp)
    6066:	|           |      move.l d1,-(sp)
    6068:	|           |      jsr 13250 <__divsf3>
    606e:	|           |      addq.l #8,sp
    6070:	|           |      move.l d0,-(sp)
    6072:	|           |      move.l d3,-(sp)
    6074:	|           |      jsr 13156 <__addsf3>
    607a:	|           |      addq.l #8,sp
    607c:	|           |      move.l d0,-(sp)
    607e:	|           |      move.l d2,-(sp)
    6080:	|           |      jsr 13510 <__gtsf2>
    6086:	|           |      addq.l #8,sp
    6088:	|           |      tst.l d0
    608a:	|           +----- ble.s 60fa <wrapSpeechXY+0x2e6>
    608c:	|           |      move.l 19d18 <cameraY>,d0
    6092:	|           |      move.l d0,-(sp)
    6094:	|           |      jsr 133a4 <__floatsisf>
    609a:	|           |      addq.l #4,sp
    609c:	|           |      move.l d0,d2
    609e:	|           |      move.l 19b5e <winHeight>,d3
    60a4:	|           |      move.l 19d4e <fontHeight>,d0
    60aa:	|           |      pea 3 <_start+0x3>
    60ae:	|           |      move.l d0,-(sp)
    60b0:	|           |      jsr 1397c <__divsi3>
    60b6:	|           |      addq.l #8,sp
    60b8:	|           |      move.l d3,d1
    60ba:	|           |      sub.l d0,d1
    60bc:	|           |      move.l d1,-(sp)
    60be:	|           |      jsr 133cc <__floatunsisf>
    60c4:	|           |      addq.l #4,sp
    60c6:	|           |      move.l d0,d1
    60c8:	|           |      move.l 1814a <cameraZoom>,d0
    60ce:	|           |      move.l d0,-(sp)
    60d0:	|           |      move.l d1,-(sp)
    60d2:	|           |      jsr 13250 <__divsf3>
    60d8:	|           |      addq.l #8,sp
    60da:	|           |      move.l d0,-(sp)
    60dc:	|           |      move.l d2,-(sp)
    60de:	|           |      jsr 13156 <__addsf3>
    60e4:	|           |      addq.l #8,sp
    60e6:	|           |      movea.l 19cb6 <speech>,a2
    60ec:	|           |      move.l d0,-(sp)
    60ee:	|           |      jsr 1333c <__fixsfsi>
    60f4:	|           |      addq.l #4,sp
    60f6:	|           |      move.l d0,8(a2)

    if (offset) {
    60fa:	|           \----> move.l 16(sp),d0
    60fe:	|        /-------- beq.s 6134 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    6100:	|        |         movea.l 19cb6 <speech>,a0
    6106:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    610c:	|        |     /-- bra.s 612e <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    610e:	|        |  /--|-> movea.l 20(sp),a0
    6112:	|        |  |  |   move.l 8(a0),d1
    6116:	|        |  |  |   move.l 16(sp),d0
    611a:	|        |  |  |   add.l d1,d0
    611c:	|        |  |  |   movea.l 20(sp),a0
    6120:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    6124:	|        |  |  |   movea.l 20(sp),a0
    6128:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    612e:	|        |  |  \-> tst.l 20(sp)
    6132:	|        |  \----- bne.s 610e <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    6134:	|        \-------> move.l 24(sp),d0
}
    6138:	\----------------> movem.l (sp)+,d2-d4/a2
    613c:	                   lea 16(sp),sp
    6140:	                   rts

00006142 <loadSpriteBank>:
#include <exec/types.h>

#include "sprites.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    6142:	subq.l #4,sp
    6144:	move.l 16(sp),d0
    6148:	move.w d0,d0
    614a:	move.w d0,2(sp)
    KPrintF("loadSpriteBank: Not implemented"); //Amiga Todo
    614e:	pea 160b9 <incbin_player_end+0x123>
    6154:	jsr 12e08 <KPrintF>
    615a:	addq.l #4,sp
    return TRUE;
    615c:	moveq #1,d0
}    
    615e:	addq.l #4,sp
    6160:	rts

00006162 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    6162:	    move.l 4(sp),d0
    6166:	/-- bpl.s 616a <TF_abs+0x8>
    6168:	|   neg.l d0
}
    616a:	\-> rts

0000616c <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    616c:	             lea -28(sp),sp
    6170:	             move.l a6,-(sp)
    6172:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    6174:	             moveq #120,d0
    6176:	             move.l d0,28(sp)
    617a:	             clr.l 24(sp)
    617e:	             move.l 19c5a <SysBase>,d0
    6184:	             movea.l d0,a6
    6186:	             move.l 28(sp),d0
    618a:	             move.l 24(sp),d1
    618e:	             jsr -684(a6)
    6192:	             move.l d0,20(sp)
    6196:	             move.l 20(sp),d0
    619a:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    619e:	         /-- bne.s 61a6 <addPerson+0x3a>
    61a0:	         |   clr.w d0
    61a2:	/--------|-- bra.w 63d4 <addPerson+0x268>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    61a6:	|        \-> move.l 48(sp),-(sp)
    61aa:	|            jsr 9cf6 <loadObjectType>
    61b0:	|            addq.l #4,sp
    61b2:	|            movea.l 16(sp),a0
    61b6:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    61ba:	|            movea.l 16(sp),a0
    61be:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    61c6:	|            movea.l 16(sp),a0
    61ca:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    61ce:	|            movea.l 16(sp),a0
    61d2:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    61d6:	|            move.l 44(sp),-(sp)
    61da:	|            jsr 133a4 <__floatsisf>
    61e0:	|            addq.l #4,sp
    61e2:	|            move.l d0,d2
    61e4:	|            move.l 40(sp),-(sp)
    61e8:	|            jsr 133a4 <__floatsisf>
    61ee:	|            addq.l #4,sp
    61f0:	|            move.l d2,-(sp)
    61f2:	|            move.l d0,-(sp)
    61f4:	|            move.l 24(sp),-(sp)
    61f8:	|            jsr 768e <moveAndScale>
    61fe:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    6202:	|            movea.l 16(sp),a0
    6206:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    620a:	|            movea.l 16(sp),a0
    620e:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    6214:	|            movea.l 16(sp),a0
    6218:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    621e:	|            movea.l 16(sp),a0
    6222:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    6226:	|            movea.l 16(sp),a0
    622a:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    622e:	|            movea.l 16(sp),a0
    6232:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    6238:	|            movea.l 16(sp),a0
    623c:	|            clr.l 94(a0)
    newPerson->angle = 180;
    6240:	|            movea.l 16(sp),a0
    6244:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    624c:	|            movea.l 16(sp),a0
    6250:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    6258:	|            movea.l 16(sp),a0
    625c:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    6260:	|            movea.l 16(sp),a0
    6264:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    6268:	|            movea.l 16(sp),a0
    626c:	|            movea.l 102(a0),a0
    6270:	|            move.l 24(a0),d0
    6274:	|            movea.l 16(sp),a0
    6278:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    627c:	|            movea.l 16(sp),a0
    6280:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    6284:	|            movea.l 16(sp),a0
    6288:	|            movea.l 102(a0),a0
    628c:	|            move.l 32(a0),d0
    6290:	|            movea.l 16(sp),a0
    6294:	|            move.l d0,110(a0)
    newPerson->r = 0;
    6298:	|            movea.l 16(sp),a0
    629c:	|            clr.b 114(a0)
    newPerson->g = 0;
    62a0:	|            movea.l 16(sp),a0
    62a4:	|            clr.b 115(a0)
    newPerson->b = 0;
    62a8:	|            movea.l 16(sp),a0
    62ac:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    62b0:	|            movea.l 16(sp),a0
    62b4:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    62b8:	|            movea.l 16(sp),a0
    62bc:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    62c0:	|            movea.l 16(sp),a0
    62c4:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    62ca:	|            clr.l -(sp)
    62cc:	|            move.l 20(sp),-(sp)
    62d0:	|            jsr 5b94 <setFrames>
    62d6:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    62d8:	|            movea.l 52(sp),a0
    62dc:	|            movea.l (a0),a0
    62de:	|            movea.l (a0),a0
    62e0:	|            movea.l 4(a0),a0
    62e4:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    62e8:	|     /----- bpl.s 62f2 <addPerson+0x186>
    62ea:	|     |      move.l 12(sp),d0
    62ee:	|     |      neg.l d0
    62f0:	|     |  /-- bra.s 62f4 <addPerson+0x188>
    62f2:	|     \--|-> moveq #1,d0
    62f4:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    62f8:	|            movea.l 52(sp),a0
    62fc:	|            movea.l (a0),a0
    62fe:	|            movea.l (a0),a0
    6300:	|            movea.l (a0),a0
    6302:	|            move.l 8(a0),d0
    6306:	|            cmp.l 8(sp),d0
    630a:	|     /----- bgt.s 633c <addPerson+0x1d0>
        if (fNumSigned < 0) {
    630c:	|     |      tst.l 12(sp)
    6310:	|     |  /-- bge.s 631e <addPerson+0x1b2>
            newPerson->height = 5;
    6312:	|     |  |   movea.l 16(sp),a0
    6316:	|     |  |   moveq #5,d1
    6318:	|     |  |   move.l d1,8(a0)
    631c:	|  /--|--|-- bra.s 6366 <addPerson+0x1fa>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    631e:	|  |  |  \-> movea.l 52(sp),a0
    6322:	|  |  |      movea.l (a0),a0
    6324:	|  |  |      movea.l (a0),a0
    6326:	|  |  |      movea.l (a0),a0
    6328:	|  |  |      movea.l 16(a0),a0
    632c:	|  |  |      move.l 12(a0),d0
    6330:	|  |  |      addq.l #5,d0
    6332:	|  |  |      movea.l 16(sp),a0
    6336:	|  |  |      move.l d0,8(a0)
    633a:	|  +--|----- bra.s 6366 <addPerson+0x1fa>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    633c:	|  |  \----> movea.l 52(sp),a0
    6340:	|  |         movea.l (a0),a0
    6342:	|  |         movea.l (a0),a0
    6344:	|  |         movea.l (a0),a0
    6346:	|  |         movea.l 16(a0),a0
    634a:	|  |         move.l 8(sp),d1
    634e:	|  |         move.l d1,d0
    6350:	|  |         add.l d0,d0
    6352:	|  |         add.l d1,d0
    6354:	|  |         lsl.l #3,d0
    6356:	|  |         adda.l d0,a0
    6358:	|  |         move.l 12(a0),d0
    635c:	|  |         addq.l #5,d0
    635e:	|  |         movea.l 16(sp),a0
    6362:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    6366:	|  \-------> move.l #105658,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    636e:	|        /-- bra.s 637e <addPerson+0x212>
        changethat = &((*changethat)->next);
    6370:	|     /--|-> movea.l 32(sp),a0
    6374:	|     |  |   move.l (a0),d0
    6376:	|     |  |   moveq #24,d1
    6378:	|     |  |   add.l d0,d1
    637a:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    637e:	|     |  \-> movea.l 32(sp),a0
    6382:	|     |      move.l (a0),d0
    6384:	|     |  /-- beq.s 63ac <addPerson+0x240>
    6386:	|     |  |   movea.l 32(sp),a0
    638a:	|     |  |   movea.l (a0),a0
    638c:	|     |  |   move.l 4(a0),d2
    6390:	|     |  |   move.l 44(sp),-(sp)
    6394:	|     |  |   jsr 133a4 <__floatsisf>
    639a:	|     |  |   addq.l #4,sp
    639c:	|     |  |   move.l d0,-(sp)
    639e:	|     |  |   move.l d2,-(sp)
    63a0:	|     |  |   jsr 135ca <__ltsf2>
    63a6:	|     |  |   addq.l #8,sp
    63a8:	|     |  |   tst.l d0
    63aa:	|     \--|-- blt.s 6370 <addPerson+0x204>
    }

    newPerson->next = (*changethat);
    63ac:	|        \-> movea.l 32(sp),a0
    63b0:	|            move.l (a0),d0
    63b2:	|            movea.l 16(sp),a0
    63b6:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    63ba:	|            movea.l 32(sp),a0
    63be:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    63c2:	|            movea.l 16(sp),a0
    63c6:	|            move.l 102(a0),d0
    63ca:	|            sne d0
    63cc:	|            neg.b d0
    63ce:	|            move.b d0,d0
    63d0:	|            andi.w #255,d0
}
    63d4:	\----------> move.l (sp)+,d2
    63d6:	             movea.l (sp)+,a6
    63d8:	             lea 28(sp),sp
    63dc:	             rts

000063de <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    63de:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    63e0:	       move.l 8(sp),-(sp)
    63e4:	       jsr 6f46 <findPerson>
    63ea:	       addq.l #4,sp
    63ec:	       move.l d0,(sp)
    if (moveMe) {
    63ee:	/----- beq.s 6422 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    63f0:	|      movea.l (sp),a0
    63f2:	|      move.l 56(a0),d0
    63f6:	|  /-- beq.s 6408 <animatePerson+0x2a>
    63f8:	|  |   movea.l (sp),a0
    63fa:	|  |   move.l 56(a0),d0
    63fe:	|  |   move.l d0,-(sp)
    6400:	|  |   jsr 243a <abortFunction>
    6406:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    6408:	|  \-> movea.l (sp),a0
    640a:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    640e:	|      movea.l (sp),a0
    6410:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    6414:	|      movea.l (sp),a0
    6416:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    641a:	|      movea.l (sp),a0
    641c:	|      move.l 12(sp),60(a0)
    }
}
    6422:	\----> nop
    6424:	       addq.l #4,sp
    6426:	       rts

00006428 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    6428:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    642a:	       move.l 8(sp),-(sp)
    642e:	       jsr 6f46 <findPerson>
    6434:	       addq.l #4,sp
    6436:	       move.l d0,(sp)
    if (moveMe) {
    6438:	/----- beq.s 647a <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    643a:	|      movea.l (sp),a0
    643c:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    6440:	|      movea.l (sp),a0
    6442:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    6448:	|      move.l (sp),-(sp)
    644a:	|      jsr 77d8 <rethinkAngle>
    6450:	|      addq.l #4,sp
        if (moveMe->walking) {
    6452:	|      movea.l (sp),a0
    6454:	|      move.w 52(a0),d0
    6458:	|  /-- beq.s 646c <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    645a:	|  |   pea 1 <_start+0x1>
    645e:	|  |   move.l 4(sp),-(sp)
    6462:	|  |   jsr 5b94 <setFrames>
    6468:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    646a:	+--|-- bra.s 647a <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    646c:	|  \-> clr.l -(sp)
    646e:	|      move.l 4(sp),-(sp)
    6472:	|      jsr 5b94 <setFrames>
    6478:	|      addq.l #8,sp
}
    647a:	\----> nop
    647c:	       addq.l #4,sp
    647e:	       rts

00006480 <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    6480:	             lea -36(sp),sp
    6484:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    6486:	             movea.l 44(sp),a0
    648a:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    6490:	             moveq #12,d0
    6492:	             move.l d0,28(sp)
    6496:	             clr.l 24(sp)
    649a:	             move.l 19c5a <SysBase>,d0
    64a0:	             movea.l d0,a6
    64a2:	             move.l 28(sp),d0
    64a6:	             move.l 24(sp),d1
    64aa:	             jsr -684(a6)
    64ae:	             move.l d0,20(sp)
    64b2:	             move.l 20(sp),d0
    64b6:	             move.l d0,16(sp)
	if (!(newAnim)) {
    64ba:	         /-- bne.s 64d0 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    64bc:	         |   pea 160d9 <incbin_player_end+0x143>
    64c2:	         |   jsr 12e08 <KPrintF>
    64c8:	         |   addq.l #4,sp
		return NULL;
    64ca:	         |   moveq #0,d0
    64cc:	/--------|-- bra.w 6612 <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    64d0:	|        \-> movea.l 44(sp),a0
    64d4:	|            move.l (a0),d0
    64d6:	|            movea.l 16(sp),a0
    64da:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    64dc:	|            movea.l 16(sp),a0
    64e0:	|            move.l 32(sp),8(a0)

	if (num) {
    64e6:	|  /-------- beq.w 6606 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    64ea:	|  |         move.l 32(sp),d1
    64ee:	|  |         move.l d1,d0
    64f0:	|  |         add.l d0,d0
    64f2:	|  |         add.l d1,d0
    64f4:	|  |         add.l d0,d0
    64f6:	|  |         add.l d0,d0
    64f8:	|  |         move.l d0,12(sp)
    64fc:	|  |         clr.l 8(sp)
    6500:	|  |         move.l 19c5a <SysBase>,d0
    6506:	|  |         movea.l d0,a6
    6508:	|  |         move.l 12(sp),d0
    650c:	|  |         move.l 8(sp),d1
    6510:	|  |         jsr -684(a6)
    6514:	|  |         move.l d0,4(sp)
    6518:	|  |         move.l 4(sp),d0
    651c:	|  |         movea.l 16(sp),a0
    6520:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    6524:	|  |         movea.l 16(sp),a0
    6528:	|  |         move.l 4(a0),d0
    652c:	|  |     /-- bne.s 6542 <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    652e:	|  |     |   pea 160d9 <incbin_player_end+0x143>
    6534:	|  |     |   jsr 12e08 <KPrintF>
    653a:	|  |     |   addq.l #4,sp
			return NULL;
    653c:	|  |     |   moveq #0,d0
    653e:	+--|-----|-- bra.w 6612 <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    6542:	|  |     \-> clr.l 36(sp)
    6546:	|  |     /-- bra.w 65f8 <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    654a:	|  |  /--|-> movea.l 44(sp),a0
    654e:	|  |  |  |   movea.l 4(a0),a0
    6552:	|  |  |  |   move.l 36(sp),d1
    6556:	|  |  |  |   move.l d1,d0
    6558:	|  |  |  |   add.l d0,d0
    655a:	|  |  |  |   add.l d1,d0
    655c:	|  |  |  |   add.l d0,d0
    655e:	|  |  |  |   add.l d0,d0
    6560:	|  |  |  |   lea (0,a0,d0.l),a1
    6564:	|  |  |  |   movea.l 16(sp),a0
    6568:	|  |  |  |   movea.l 4(a0),a0
    656c:	|  |  |  |   move.l 36(sp),d1
    6570:	|  |  |  |   move.l d1,d0
    6572:	|  |  |  |   add.l d0,d0
    6574:	|  |  |  |   add.l d1,d0
    6576:	|  |  |  |   add.l d0,d0
    6578:	|  |  |  |   add.l d0,d0
    657a:	|  |  |  |   adda.l d0,a0
    657c:	|  |  |  |   move.l (a1),d0
    657e:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    6580:	|  |  |  |   movea.l 44(sp),a0
    6584:	|  |  |  |   movea.l 4(a0),a0
    6588:	|  |  |  |   move.l 36(sp),d1
    658c:	|  |  |  |   move.l d1,d0
    658e:	|  |  |  |   add.l d0,d0
    6590:	|  |  |  |   add.l d1,d0
    6592:	|  |  |  |   add.l d0,d0
    6594:	|  |  |  |   add.l d0,d0
    6596:	|  |  |  |   lea (0,a0,d0.l),a1
    659a:	|  |  |  |   movea.l 16(sp),a0
    659e:	|  |  |  |   movea.l 4(a0),a0
    65a2:	|  |  |  |   move.l 36(sp),d1
    65a6:	|  |  |  |   move.l d1,d0
    65a8:	|  |  |  |   add.l d0,d0
    65aa:	|  |  |  |   add.l d1,d0
    65ac:	|  |  |  |   add.l d0,d0
    65ae:	|  |  |  |   add.l d0,d0
    65b0:	|  |  |  |   adda.l d0,a0
    65b2:	|  |  |  |   move.l 4(a1),d0
    65b6:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    65ba:	|  |  |  |   movea.l 44(sp),a0
    65be:	|  |  |  |   movea.l 4(a0),a0
    65c2:	|  |  |  |   move.l 36(sp),d1
    65c6:	|  |  |  |   move.l d1,d0
    65c8:	|  |  |  |   add.l d0,d0
    65ca:	|  |  |  |   add.l d1,d0
    65cc:	|  |  |  |   add.l d0,d0
    65ce:	|  |  |  |   add.l d0,d0
    65d0:	|  |  |  |   lea (0,a0,d0.l),a1
    65d4:	|  |  |  |   movea.l 16(sp),a0
    65d8:	|  |  |  |   movea.l 4(a0),a0
    65dc:	|  |  |  |   move.l 36(sp),d1
    65e0:	|  |  |  |   move.l d1,d0
    65e2:	|  |  |  |   add.l d0,d0
    65e4:	|  |  |  |   add.l d1,d0
    65e6:	|  |  |  |   add.l d0,d0
    65e8:	|  |  |  |   add.l d0,d0
    65ea:	|  |  |  |   adda.l d0,a0
    65ec:	|  |  |  |   move.l 8(a1),d0
    65f0:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    65f4:	|  |  |  |   addq.l #1,36(sp)
    65f8:	|  |  |  \-> move.l 36(sp),d0
    65fc:	|  |  |      cmp.l 32(sp),d0
    6600:	|  |  \----- blt.w 654a <copyAnim+0xca>
    6604:	|  |     /-- bra.s 660e <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    6606:	|  \-----|-> movea.l 16(sp),a0
    660a:	|        |   clr.l 4(a0)
	}

	return newAnim;
    660e:	|        \-> move.l 16(sp),d0
}
    6612:	\----------> movea.l (sp)+,a6
    6614:	             lea 36(sp),sp
    6618:	             rts

0000661a <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    661a:	                lea -44(sp),sp
    661e:	                move.l a6,-(sp)
    6620:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    6622:	                moveq #12,d0
    6624:	                move.l d0,40(sp)
    6628:	                clr.l 36(sp)
    662c:	                move.l 19c5a <SysBase>,d0
    6632:	                movea.l d0,a6
    6634:	                move.l 40(sp),d0
    6638:	                move.l 36(sp),d1
    663c:	                jsr -684(a6)
    6640:	                move.l d0,32(sp)
    6644:	                move.l 32(sp),d0
    6648:	                move.l d0,28(sp)
	if( !newP) {
    664c:	            /-- bne.s 6662 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    664e:	            |   pea 160fa <incbin_player_end+0x164>
    6654:	            |   jsr 12e08 <KPrintF>
    665a:	            |   addq.l #4,sp
		return NULL;
    665c:	            |   moveq #0,d0
    665e:	/-----------|-- bra.w 6832 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    6662:	|           \-> movea.l 28(sp),a0
    6666:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    666c:	|               move.l 56(sp),d1
    6670:	|               move.l d1,d0
    6672:	|               add.l d0,d0
    6674:	|               add.l d1,d0
    6676:	|               add.l d0,d0
    6678:	|               add.l d0,d0
    667a:	|               move.l d0,24(sp)
    667e:	|               clr.l 20(sp)
    6682:	|               move.l 19c5a <SysBase>,d0
    6688:	|               movea.l d0,a6
    668a:	|               move.l 24(sp),d0
    668e:	|               move.l 20(sp),d1
    6692:	|               jsr -684(a6)
    6696:	|               move.l d0,16(sp)
    669a:	|               move.l 16(sp),d0
    669e:	|               movea.l 28(sp),a0
    66a2:	|               move.l d0,4(a0)
	if( !newP->frames) {
    66a6:	|               movea.l 28(sp),a0
    66aa:	|               move.l 4(a0),d0
    66ae:	|           /-- bne.s 66c4 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    66b0:	|           |   pea 160fa <incbin_player_end+0x164>
    66b6:	|           |   jsr 12e08 <KPrintF>
    66bc:	|           |   addq.l #4,sp
		return NULL;
    66be:	|           |   moveq #0,d0
    66c0:	+-----------|-- bra.w 6832 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    66c4:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    66ca:	|               movea.l 60(sp),a0
    66ce:	|               move.l (a0),44(sp)
	while (a) {
    66d2:	|     /-------- bra.w 6826 <createPersonaAnim+0x20c>
		a --;
    66d6:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    66da:	|  |  |         movea.l 28(sp),a0
    66de:	|  |  |         movea.l 4(a0),a0
    66e2:	|  |  |         move.l 48(sp),d1
    66e6:	|  |  |         move.l d1,d0
    66e8:	|  |  |         add.l d0,d0
    66ea:	|  |  |         add.l d1,d0
    66ec:	|  |  |         add.l d0,d0
    66ee:	|  |  |         add.l d0,d0
    66f0:	|  |  |         adda.l d0,a0
    66f2:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    66f6:	|  |  |         movea.l 44(sp),a0
    66fa:	|  |  |         move.l (a0),d0
    66fc:	|  |  |         moveq #5,d1
    66fe:	|  |  |         cmp.l d0,d1
    6700:	|  |  |     /-- bne.s 672c <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    6702:	|  |  |     |   movea.l 28(sp),a0
    6706:	|  |  |     |   movea.l 4(a0),a0
    670a:	|  |  |     |   move.l 48(sp),d1
    670e:	|  |  |     |   move.l d1,d0
    6710:	|  |  |     |   add.l d0,d0
    6712:	|  |  |     |   add.l d1,d0
    6714:	|  |  |     |   add.l d0,d0
    6716:	|  |  |     |   add.l d0,d0
    6718:	|  |  |     |   lea (0,a0,d0.l),a1
    671c:	|  |  |     |   movea.l 44(sp),a0
    6720:	|  |  |     |   move.l 4(a0),d0
    6724:	|  |  |     |   move.l d0,8(a1)
    6728:	|  |  |  /--|-- bra.w 67d4 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    672c:	|  |  |  |  \-> movea.l 44(sp),a0
    6730:	|  |  |  |      move.l (a0),d0
    6732:	|  |  |  |      moveq #2,d1
    6734:	|  |  |  |      cmp.l d0,d1
    6736:	|  |  |  |  /-- bne.s 6762 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    6738:	|  |  |  |  |   movea.l 44(sp),a0
    673c:	|  |  |  |  |   move.l 4(a0),d2
    6740:	|  |  |  |  |   movea.l 28(sp),a0
    6744:	|  |  |  |  |   movea.l 4(a0),a0
    6748:	|  |  |  |  |   move.l 48(sp),d1
    674c:	|  |  |  |  |   move.l d1,d0
    674e:	|  |  |  |  |   add.l d0,d0
    6750:	|  |  |  |  |   add.l d1,d0
    6752:	|  |  |  |  |   add.l d0,d0
    6754:	|  |  |  |  |   add.l d0,d0
    6756:	|  |  |  |  |   adda.l d0,a0
    6758:	|  |  |  |  |   move.l d2,d0
    675a:	|  |  |  |  |   neg.l d0
    675c:	|  |  |  |  |   move.l d0,8(a0)
    6760:	|  |  |  +--|-- bra.s 67d4 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    6762:	|  |  |  |  \-> movea.l 44(sp),a0
    6766:	|  |  |  |      move.l (a0),d0
    6768:	|  |  |  |      moveq #6,d1
    676a:	|  |  |  |      cmp.l d0,d1
    676c:	|  |  |  |  /-- bne.s 67b4 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    676e:	|  |  |  |  |   movea.l 44(sp),a0
    6772:	|  |  |  |  |   movea.l 4(a0),a0
    6776:	|  |  |  |  |   move.l (a0),d0
    6778:	|  |  |  |  |   move.l d0,-(sp)
    677a:	|  |  |  |  |   pea 1 <_start+0x1>
    677e:	|  |  |  |  |   lea 20(sp),a0
    6782:	|  |  |  |  |   move.l a0,-(sp)
    6784:	|  |  |  |  |   jsr 10db4 <getValueType>
    678a:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    678e:	|  |  |  |  |   movea.l 44(sp),a0
    6792:	|  |  |  |  |   movea.l 4(a0),a0
    6796:	|  |  |  |  |   movea.l (a0),a0
    6798:	|  |  |  |  |   move.l 8(a0),d0
    679c:	|  |  |  |  |   move.l d0,-(sp)
    679e:	|  |  |  |  |   pea 1 <_start+0x1>
    67a2:	|  |  |  |  |   lea 16(sp),a0
    67a6:	|  |  |  |  |   move.l a0,-(sp)
    67a8:	|  |  |  |  |   jsr 10db4 <getValueType>
    67ae:	|  |  |  |  |   lea 12(sp),sp
    67b2:	|  |  |  +--|-- bra.s 67d4 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    67b4:	|  |  |  |  \-> move.l 44(sp),d0
    67b8:	|  |  |  |      move.l d0,-(sp)
    67ba:	|  |  |  |      pea 1 <_start+0x1>
    67be:	|  |  |  |      lea 20(sp),a0
    67c2:	|  |  |  |      move.l a0,-(sp)
    67c4:	|  |  |  |      jsr 10db4 <getValueType>
    67ca:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    67ce:	|  |  |  |      moveq #1,d0
    67d0:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    67d4:	|  |  |  \----> move.l 60(sp),-(sp)
    67d8:	|  |  |         jsr 11738 <trimStack>
    67de:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    67e0:	|  |  |         movea.l 28(sp),a0
    67e4:	|  |  |         movea.l 4(a0),a0
    67e8:	|  |  |         move.l 48(sp),d1
    67ec:	|  |  |         move.l d1,d0
    67ee:	|  |  |         add.l d0,d0
    67f0:	|  |  |         add.l d1,d0
    67f2:	|  |  |         add.l d0,d0
    67f4:	|  |  |         add.l d0,d0
    67f6:	|  |  |         adda.l d0,a0
    67f8:	|  |  |         move.l 12(sp),d0
    67fc:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    67fe:	|  |  |         movea.l 28(sp),a0
    6802:	|  |  |         movea.l 4(a0),a0
    6806:	|  |  |         move.l 48(sp),d1
    680a:	|  |  |         move.l d1,d0
    680c:	|  |  |         add.l d0,d0
    680e:	|  |  |         add.l d1,d0
    6810:	|  |  |         add.l d0,d0
    6812:	|  |  |         add.l d0,d0
    6814:	|  |  |         adda.l d0,a0
    6816:	|  |  |         move.l 8(sp),d0
    681a:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    681e:	|  |  |         movea.l 60(sp),a0
    6822:	|  |  |         move.l (a0),44(sp)
	while (a) {
    6826:	|  |  \-------> tst.l 48(sp)
    682a:	|  \----------- bne.w 66d6 <createPersonaAnim+0xbc>
	}

	return newP;
    682e:	|               move.l 28(sp),d0
}
    6832:	\-------------> move.l (sp)+,d2
    6834:	                movea.l (sp)+,a6
    6836:	                lea 44(sp),sp
    683a:	                rts

0000683c <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    683c:	       subq.l #8,sp
    683e:	       move.l a6,-(sp)

	if (orig)
    6840:	       tst.l 16(sp)
    6844:	/----- beq.s 6884 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    6846:	|      movea.l 16(sp),a0
    684a:	|      move.l 8(a0),d0
    684e:	|  /-- beq.s 686a <deleteAnim+0x2e>
			FreeVec( orig->frames);
    6850:	|  |   movea.l 16(sp),a0
    6854:	|  |   move.l 4(a0),8(sp)
    685a:	|  |   move.l 19c5a <SysBase>,d0
    6860:	|  |   movea.l d0,a6
    6862:	|  |   movea.l 8(sp),a1
    6866:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    686a:	|  \-> move.l 16(sp),4(sp)
    6870:	|      move.l 19c5a <SysBase>,d0
    6876:	|      movea.l d0,a6
    6878:	|      movea.l 4(sp),a1
    687c:	|      jsr -690(a6)
		orig = NULL;
    6880:	|      clr.l 16(sp)
	}
}
    6884:	\----> nop
    6886:	       movea.l (sp)+,a6
    6888:	       addq.l #8,sp
    688a:	       rts

0000688c <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    688c:	          lea -124(sp),sp
    6890:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    6894:	          movea.l 152(sp),a0
    6898:	          move.l 44(a0),d1
    689c:	          movea.l 152(sp),a0
    68a0:	          move.l 48(a0),d0
    68a4:	          cmp.l d1,d0
    68a6:	      /-- bne.s 68d6 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    68a8:	      |   movea.l 152(sp),a0
    68ac:	      |   moveq #-1,d0
    68ae:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    68b2:	      |   movea.l 152(sp),a0
    68b6:	      |   move.l 28(a0),d0
    68ba:	      |   movea.l 152(sp),a0
    68be:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    68c2:	      |   movea.l 152(sp),a0
    68c6:	      |   move.l 32(a0),d0
    68ca:	      |   movea.l 152(sp),a0
    68ce:	      |   move.l d0,40(a0)
    68d2:	   /--|-- bra.w 6e3c <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    68d6:	   |  \-> movea.l 19d66 <currentFloor>,a0
    68dc:	   |      move.l 16(a0),d1
    68e0:	   |      movea.l 152(sp),a0
    68e4:	   |      move.l 44(a0),d0
    68e8:	   |      add.l d0,d0
    68ea:	   |      add.l d0,d0
    68ec:	   |      movea.l d1,a0
    68ee:	   |      adda.l d0,a0
    68f0:	   |      move.l (a0),d1
    68f2:	   |      movea.l 152(sp),a0
    68f6:	   |      move.l 48(a0),d0
    68fa:	   |      add.l d0,d0
    68fc:	   |      add.l d0,d0
    68fe:	   |      movea.l d1,a0
    6900:	   |      adda.l d0,a0
    6902:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    6906:	   |      moveq #-1,d0
    6908:	   |      cmp.l 144(sp),d0
    690c:	   |  /-- bne.s 6914 <doBorderStuff+0x88>
    690e:	   |  |   clr.w d0
    6910:	/--|--|-- bra.w 6f3c <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    6914:	|  |  \-> movea.l 19d66 <currentFloor>,a0
    691a:	|  |      move.l 12(a0),d1
    691e:	|  |      move.l 144(sp),d0
    6922:	|  |      lsl.l #3,d0
    6924:	|  |      add.l d0,d1
    6926:	|  |      movea.l 19d66 <currentFloor>,a0
    692c:	|  |      movea.l 12(a0),a1
    6930:	|  |      movea.l 152(sp),a0
    6934:	|  |      move.l 44(a0),d0
    6938:	|  |      lsl.l #3,d0
    693a:	|  |      add.l a1,d0
    693c:	|  |      lea 40(sp),a0
    6940:	|  |      move.l a0,-(sp)
    6942:	|  |      lea 48(sp),a0
    6946:	|  |      move.l a0,-(sp)
    6948:	|  |      move.l d1,-(sp)
    694a:	|  |      move.l d0,-(sp)
    694c:	|  |      jsr 1207e <getMatchingCorners>
    6952:	|  |      lea 16(sp),sp
    6956:	|  |      tst.w d0
    6958:	|  |  /-- bne.s 696e <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    695a:	|  |  |   pea 16124 <incbin_player_end+0x18e>
    6960:	|  |  |   jsr 12e08 <KPrintF>
    6966:	|  |  |   addq.l #4,sp
            return FALSE;
    6968:	|  |  |   clr.w d0
    696a:	+--|--|-- bra.w 6f3c <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    696e:	|  |  \-> movea.l 152(sp),a0
    6972:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    6978:	|  |      movea.l 152(sp),a0
    697c:	|  |      move.l (a0),d0
    697e:	|  |      move.l d0,-(sp)
    6980:	|  |      jsr 1333c <__fixsfsi>
    6986:	|  |      addq.l #4,sp
    6988:	|  |      move.l d0,140(sp)
    698c:	|  |      movea.l 152(sp),a0
    6990:	|  |      move.l 4(a0),d0
    6994:	|  |      move.l d0,-(sp)
    6996:	|  |      jsr 1333c <__fixsfsi>
    699c:	|  |      addq.l #4,sp
    699e:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    69a2:	|  |      movea.l 152(sp),a0
    69a6:	|  |      move.l 28(a0),132(sp)
    69ac:	|  |      movea.l 152(sp),a0
    69b0:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    69b6:	|  |      movea.l 19d66 <currentFloor>,a0
    69bc:	|  |      move.l 4(a0),d1
    69c0:	|  |      move.l 44(sp),d0
    69c4:	|  |      lsl.l #3,d0
    69c6:	|  |      movea.l d1,a0
    69c8:	|  |      adda.l d0,a0
    69ca:	|  |      move.l (a0),124(sp)
    69ce:	|  |      movea.l 19d66 <currentFloor>,a0
    69d4:	|  |      move.l 4(a0),d1
    69d8:	|  |      move.l 44(sp),d0
    69dc:	|  |      lsl.l #3,d0
    69de:	|  |      movea.l d1,a0
    69e0:	|  |      adda.l d0,a0
    69e2:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    69e8:	|  |      movea.l 19d66 <currentFloor>,a0
    69ee:	|  |      move.l 4(a0),d1
    69f2:	|  |      move.l 40(sp),d0
    69f6:	|  |      lsl.l #3,d0
    69f8:	|  |      movea.l d1,a0
    69fa:	|  |      adda.l d0,a0
    69fc:	|  |      move.l (a0),116(sp)
    6a00:	|  |      movea.l 19d66 <currentFloor>,a0
    6a06:	|  |      move.l 4(a0),d1
    6a0a:	|  |      move.l 40(sp),d0
    6a0e:	|  |      lsl.l #3,d0
    6a10:	|  |      movea.l d1,a0
    6a12:	|  |      adda.l d0,a0
    6a14:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    6a1a:	|  |      move.l 140(sp),d0
    6a1e:	|  |      sub.l 132(sp),d0
    6a22:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    6a26:	|  |      move.l 136(sp),d0
    6a2a:	|  |      sub.l 128(sp),d0
    6a2e:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    6a32:	|  |      move.l 116(sp),d0
    6a36:	|  |      sub.l 124(sp),d0
    6a3a:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    6a3e:	|  |      move.l 112(sp),d0
    6a42:	|  |      sub.l 120(sp),d0
    6a46:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    6a4a:	|  |      move.l 124(sp),d0
    6a4e:	|  |      sub.l 140(sp),d0
    6a52:	|  |      move.l 104(sp),-(sp)
    6a56:	|  |      move.l d0,-(sp)
    6a58:	|  |      jsr 138fe <__mulsi3>
    6a5e:	|  |      addq.l #8,sp
    6a60:	|  |      move.l d0,d2
    6a62:	|  |      move.l 120(sp),d0
    6a66:	|  |      sub.l 136(sp),d0
    6a6a:	|  |      move.l 108(sp),-(sp)
    6a6e:	|  |      move.l d0,-(sp)
    6a70:	|  |      jsr 138fe <__mulsi3>
    6a76:	|  |      addq.l #8,sp
    6a78:	|  |      move.l d2,d1
    6a7a:	|  |      sub.l d0,d1
    6a7c:	|  |      move.l d1,-(sp)
    6a7e:	|  |      jsr 13364 <__floatsidf>
    6a84:	|  |      addq.l #4,sp
    6a86:	|  |      move.l d0,32(sp)
    6a8a:	|  |      move.l d1,36(sp)
    6a8e:	|  |      move.l 32(sp),88(sp)
    6a94:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    6a9a:	|  |      move.l 96(sp),-(sp)
    6a9e:	|  |      move.l 112(sp),-(sp)
    6aa2:	|  |      jsr 138fe <__mulsi3>
    6aa8:	|  |      addq.l #8,sp
    6aaa:	|  |      move.l d0,d2
    6aac:	|  |      move.l 100(sp),-(sp)
    6ab0:	|  |      move.l 108(sp),-(sp)
    6ab4:	|  |      jsr 138fe <__mulsi3>
    6aba:	|  |      addq.l #8,sp
    6abc:	|  |      move.l d2,d1
    6abe:	|  |      sub.l d0,d1
    6ac0:	|  |      move.l d1,-(sp)
    6ac2:	|  |      jsr 13364 <__floatsidf>
    6ac8:	|  |      addq.l #4,sp
    6aca:	|  |      move.l d1,-(sp)
    6acc:	|  |      move.l d0,-(sp)
    6ace:	|  |      move.l 100(sp),-(sp)
    6ad2:	|  |      move.l 100(sp),-(sp)
    6ad6:	|  |      jsr 131ee <__divdf3>
    6adc:	|  |      lea 16(sp),sp
    6ae0:	|  |      move.l d0,24(sp)
    6ae4:	|  |      move.l d1,28(sp)
    6ae8:	|  |      move.l 24(sp),88(sp)
    6aee:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    6af4:	|  |      clr.l -(sp)
    6af6:	|  |      clr.l -(sp)
    6af8:	|  |      move.l 100(sp),-(sp)
    6afc:	|  |      move.l 100(sp),-(sp)
    6b00:	|  |      jsr 134c2 <__gtdf2>
    6b06:	|  |      lea 16(sp),sp
    6b0a:	|  |      tst.l d0
    6b0c:	|  |  /-- ble.w 6be4 <doBorderStuff+0x358>
    6b10:	|  |  |   clr.l -(sp)
    6b12:	|  |  |   move.l #1072693248,-(sp)
    6b18:	|  |  |   move.l 100(sp),-(sp)
    6b1c:	|  |  |   move.l 100(sp),-(sp)
    6b20:	|  |  |   jsr 1357c <__ltdf2>
    6b26:	|  |  |   lea 16(sp),sp
    6b2a:	|  |  |   tst.l d0
    6b2c:	|  |  +-- bge.w 6be4 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    6b30:	|  |  |   move.l 124(sp),-(sp)
    6b34:	|  |  |   jsr 13364 <__floatsidf>
    6b3a:	|  |  |   addq.l #4,sp
    6b3c:	|  |  |   move.l d0,d2
    6b3e:	|  |  |   move.l d1,d3
    6b40:	|  |  |   move.l 100(sp),-(sp)
    6b44:	|  |  |   jsr 13364 <__floatsidf>
    6b4a:	|  |  |   addq.l #4,sp
    6b4c:	|  |  |   move.l 92(sp),-(sp)
    6b50:	|  |  |   move.l 92(sp),-(sp)
    6b54:	|  |  |   move.l d1,-(sp)
    6b56:	|  |  |   move.l d0,-(sp)
    6b58:	|  |  |   jsr 133f4 <__muldf3>
    6b5e:	|  |  |   lea 16(sp),sp
    6b62:	|  |  |   move.l d1,-(sp)
    6b64:	|  |  |   move.l d0,-(sp)
    6b66:	|  |  |   move.l d3,-(sp)
    6b68:	|  |  |   move.l d2,-(sp)
    6b6a:	|  |  |   jsr 1318c <__adddf3>
    6b70:	|  |  |   lea 16(sp),sp
    6b74:	|  |  |   move.l d1,-(sp)
    6b76:	|  |  |   move.l d0,-(sp)
    6b78:	|  |  |   jsr 132fc <__fixdfsi>
    6b7e:	|  |  |   addq.l #8,sp
    6b80:	|  |  |   movea.l 152(sp),a0
    6b84:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    6b88:	|  |  |   move.l 120(sp),-(sp)
    6b8c:	|  |  |   jsr 13364 <__floatsidf>
    6b92:	|  |  |   addq.l #4,sp
    6b94:	|  |  |   move.l d0,d2
    6b96:	|  |  |   move.l d1,d3
    6b98:	|  |  |   move.l 96(sp),-(sp)
    6b9c:	|  |  |   jsr 13364 <__floatsidf>
    6ba2:	|  |  |   addq.l #4,sp
    6ba4:	|  |  |   move.l 92(sp),-(sp)
    6ba8:	|  |  |   move.l 92(sp),-(sp)
    6bac:	|  |  |   move.l d1,-(sp)
    6bae:	|  |  |   move.l d0,-(sp)
    6bb0:	|  |  |   jsr 133f4 <__muldf3>
    6bb6:	|  |  |   lea 16(sp),sp
    6bba:	|  |  |   move.l d1,-(sp)
    6bbc:	|  |  |   move.l d0,-(sp)
    6bbe:	|  |  |   move.l d3,-(sp)
    6bc0:	|  |  |   move.l d2,-(sp)
    6bc2:	|  |  |   jsr 1318c <__adddf3>
    6bc8:	|  |  |   lea 16(sp),sp
    6bcc:	|  |  |   move.l d1,-(sp)
    6bce:	|  |  |   move.l d0,-(sp)
    6bd0:	|  |  |   jsr 132fc <__fixdfsi>
    6bd6:	|  |  |   addq.l #8,sp
    6bd8:	|  |  |   movea.l 152(sp),a0
    6bdc:	|  |  |   move.l d0,40(a0)
    6be0:	|  +--|-- bra.w 6e3c <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    6be4:	|  |  \-> move.l 140(sp),d0
    6be8:	|  |      sub.l 124(sp),d0
    6bec:	|  |      move.l d0,84(sp)
    6bf0:	|  |      move.l 140(sp),d0
    6bf4:	|  |      sub.l 116(sp),d0
    6bf8:	|  |      move.l d0,80(sp)
    6bfc:	|  |      move.l 132(sp),d0
    6c00:	|  |      sub.l 124(sp),d0
    6c04:	|  |      move.l d0,76(sp)
    6c08:	|  |      move.l 132(sp),d0
    6c0c:	|  |      sub.l 116(sp),d0
    6c10:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    6c14:	|  |      move.l 136(sp),d0
    6c18:	|  |      sub.l 120(sp),d0
    6c1c:	|  |      move.l d0,68(sp)
    6c20:	|  |      move.l 136(sp),d0
    6c24:	|  |      sub.l 112(sp),d0
    6c28:	|  |      move.l d0,64(sp)
    6c2c:	|  |      move.l 128(sp),d0
    6c30:	|  |      sub.l 120(sp),d0
    6c34:	|  |      move.l d0,60(sp)
    6c38:	|  |      move.l 128(sp),d0
    6c3c:	|  |      sub.l 112(sp),d0
    6c40:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    6c44:	|  |      move.l 84(sp),-(sp)
    6c48:	|  |      move.l 88(sp),-(sp)
    6c4c:	|  |      jsr 138fe <__mulsi3>
    6c52:	|  |      addq.l #8,sp
    6c54:	|  |      move.l d0,84(sp)
    6c58:	|  |      move.l 80(sp),-(sp)
    6c5c:	|  |      move.l 84(sp),-(sp)
    6c60:	|  |      jsr 138fe <__mulsi3>
    6c66:	|  |      addq.l #8,sp
    6c68:	|  |      move.l d0,80(sp)
    6c6c:	|  |      move.l 76(sp),-(sp)
    6c70:	|  |      move.l 80(sp),-(sp)
    6c74:	|  |      jsr 138fe <__mulsi3>
    6c7a:	|  |      addq.l #8,sp
    6c7c:	|  |      move.l d0,76(sp)
    6c80:	|  |      move.l 72(sp),-(sp)
    6c84:	|  |      move.l 76(sp),-(sp)
    6c88:	|  |      jsr 138fe <__mulsi3>
    6c8e:	|  |      addq.l #8,sp
    6c90:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    6c94:	|  |      move.l 68(sp),-(sp)
    6c98:	|  |      move.l 72(sp),-(sp)
    6c9c:	|  |      jsr 138fe <__mulsi3>
    6ca2:	|  |      addq.l #8,sp
    6ca4:	|  |      move.l d0,68(sp)
    6ca8:	|  |      move.l 64(sp),-(sp)
    6cac:	|  |      move.l 68(sp),-(sp)
    6cb0:	|  |      jsr 138fe <__mulsi3>
    6cb6:	|  |      addq.l #8,sp
    6cb8:	|  |      move.l d0,64(sp)
    6cbc:	|  |      move.l 60(sp),-(sp)
    6cc0:	|  |      move.l 64(sp),-(sp)
    6cc4:	|  |      jsr 138fe <__mulsi3>
    6cca:	|  |      addq.l #8,sp
    6ccc:	|  |      move.l d0,60(sp)
    6cd0:	|  |      move.l 56(sp),-(sp)
    6cd4:	|  |      move.l 60(sp),-(sp)
    6cd8:	|  |      jsr 138fe <__mulsi3>
    6cde:	|  |      addq.l #8,sp
    6ce0:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    6ce4:	|  |      move.l 84(sp),-(sp)
    6ce8:	|  |      jsr 13364 <__floatsidf>
    6cee:	|  |      addq.l #4,sp
    6cf0:	|  |      move.l d0,d2
    6cf2:	|  |      move.l d1,d3
    6cf4:	|  |      move.l 68(sp),-(sp)
    6cf8:	|  |      jsr 13364 <__floatsidf>
    6cfe:	|  |      addq.l #4,sp
    6d00:	|  |      move.l d1,-(sp)
    6d02:	|  |      move.l d0,-(sp)
    6d04:	|  |      move.l d3,-(sp)
    6d06:	|  |      move.l d2,-(sp)
    6d08:	|  |      jsr 1318c <__adddf3>
    6d0e:	|  |      lea 16(sp),sp
    6d12:	|  |      move.l d1,-(sp)
    6d14:	|  |      move.l d0,-(sp)
    6d16:	|  |      jsr 138b4 <sqrt>
    6d1c:	|  |      addq.l #8,sp
    6d1e:	|  |      move.l d0,d2
    6d20:	|  |      move.l d1,d3
    6d22:	|  |      move.l 76(sp),-(sp)
    6d26:	|  |      jsr 13364 <__floatsidf>
    6d2c:	|  |      addq.l #4,sp
    6d2e:	|  |      move.l d0,d4
    6d30:	|  |      move.l d1,d5
    6d32:	|  |      move.l 60(sp),-(sp)
    6d36:	|  |      jsr 13364 <__floatsidf>
    6d3c:	|  |      addq.l #4,sp
    6d3e:	|  |      move.l d1,-(sp)
    6d40:	|  |      move.l d0,-(sp)
    6d42:	|  |      move.l d5,-(sp)
    6d44:	|  |      move.l d4,-(sp)
    6d46:	|  |      jsr 1318c <__adddf3>
    6d4c:	|  |      lea 16(sp),sp
    6d50:	|  |      move.l d1,-(sp)
    6d52:	|  |      move.l d0,-(sp)
    6d54:	|  |      jsr 138b4 <sqrt>
    6d5a:	|  |      addq.l #8,sp
    6d5c:	|  |      move.l d1,-(sp)
    6d5e:	|  |      move.l d0,-(sp)
    6d60:	|  |      move.l d3,-(sp)
    6d62:	|  |      move.l d2,-(sp)
    6d64:	|  |      jsr 1318c <__adddf3>
    6d6a:	|  |      lea 16(sp),sp
    6d6e:	|  |      move.l d0,d2
    6d70:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    6d72:	|  |      move.l 80(sp),-(sp)
    6d76:	|  |      jsr 13364 <__floatsidf>
    6d7c:	|  |      addq.l #4,sp
    6d7e:	|  |      move.l d0,d4
    6d80:	|  |      move.l d1,d5
    6d82:	|  |      move.l 64(sp),-(sp)
    6d86:	|  |      jsr 13364 <__floatsidf>
    6d8c:	|  |      addq.l #4,sp
    6d8e:	|  |      move.l d1,-(sp)
    6d90:	|  |      move.l d0,-(sp)
    6d92:	|  |      move.l d5,-(sp)
    6d94:	|  |      move.l d4,-(sp)
    6d96:	|  |      jsr 1318c <__adddf3>
    6d9c:	|  |      lea 16(sp),sp
    6da0:	|  |      move.l d1,-(sp)
    6da2:	|  |      move.l d0,-(sp)
    6da4:	|  |      jsr 138b4 <sqrt>
    6daa:	|  |      addq.l #8,sp
    6dac:	|  |      move.l d0,d4
    6dae:	|  |      move.l d1,d5
    6db0:	|  |      move.l 72(sp),-(sp)
    6db4:	|  |      jsr 13364 <__floatsidf>
    6dba:	|  |      addq.l #4,sp
    6dbc:	|  |      move.l d0,d6
    6dbe:	|  |      move.l d1,d7
    6dc0:	|  |      move.l 56(sp),-(sp)
    6dc4:	|  |      jsr 13364 <__floatsidf>
    6dca:	|  |      addq.l #4,sp
    6dcc:	|  |      move.l d1,-(sp)
    6dce:	|  |      move.l d0,-(sp)
    6dd0:	|  |      move.l d7,-(sp)
    6dd2:	|  |      move.l d6,-(sp)
    6dd4:	|  |      jsr 1318c <__adddf3>
    6dda:	|  |      lea 16(sp),sp
    6dde:	|  |      move.l d1,-(sp)
    6de0:	|  |      move.l d0,-(sp)
    6de2:	|  |      jsr 138b4 <sqrt>
    6de8:	|  |      addq.l #8,sp
    6dea:	|  |      move.l d1,-(sp)
    6dec:	|  |      move.l d0,-(sp)
    6dee:	|  |      move.l d5,-(sp)
    6df0:	|  |      move.l d4,-(sp)
    6df2:	|  |      jsr 1318c <__adddf3>
    6df8:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    6dfc:	|  |      move.l d1,-(sp)
    6dfe:	|  |      move.l d0,-(sp)
    6e00:	|  |      move.l d3,-(sp)
    6e02:	|  |      move.l d2,-(sp)
    6e04:	|  |      jsr 1357c <__ltdf2>
    6e0a:	|  |      lea 16(sp),sp
    6e0e:	|  |      tst.l d0
    6e10:	|  |  /-- bge.s 6e28 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    6e12:	|  |  |   movea.l 152(sp),a0
    6e16:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    6e1c:	|  |  |   movea.l 152(sp),a0
    6e20:	|  |  |   move.l 120(sp),40(a0)
    6e26:	|  +--|-- bra.s 6e3c <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    6e28:	|  |  \-> movea.l 152(sp),a0
    6e2c:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    6e32:	|  |      movea.l 152(sp),a0
    6e36:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    6e3c:	|  \----> movea.l 152(sp),a0
    6e40:	|         move.l 40(a0),d0
    6e44:	|         move.l d0,-(sp)
    6e46:	|         jsr 133a4 <__floatsisf>
    6e4c:	|         addq.l #4,sp
    6e4e:	|         move.l d0,d1
    6e50:	|         movea.l 152(sp),a0
    6e54:	|         move.l 4(a0),d0
    6e58:	|         move.l d0,-(sp)
    6e5a:	|         move.l d1,-(sp)
    6e5c:	|         jsr 13698 <__subsf3>
    6e62:	|         addq.l #8,sp
    6e64:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    6e68:	|         movea.l 152(sp),a0
    6e6c:	|         move.l (a0),d2
    6e6e:	|         movea.l 152(sp),a0
    6e72:	|         move.l 36(a0),d0
    6e76:	|         move.l d0,-(sp)
    6e78:	|         jsr 133a4 <__floatsisf>
    6e7e:	|         addq.l #4,sp
    6e80:	|         move.l d0,-(sp)
    6e82:	|         move.l d2,-(sp)
    6e84:	|         jsr 13698 <__subsf3>
    6e8a:	|         addq.l #8,sp
    6e8c:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    6e90:	|         clr.l -(sp)
    6e92:	|         move.l 52(sp),-(sp)
    6e96:	|         jsr 13600 <__nesf2>
    6e9c:	|         addq.l #8,sp
    6e9e:	|         tst.l d0
    6ea0:	|     /-- bne.s 6eb4 <doBorderStuff+0x628>
    6ea2:	|     |   clr.l -(sp)
    6ea4:	|     |   move.l 56(sp),-(sp)
    6ea8:	|     |   jsr 13600 <__nesf2>
    6eae:	|     |   addq.l #8,sp
    6eb0:	|     |   tst.l d0
    6eb2:	|  /--|-- beq.s 6f2a <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    6eb4:	|  |  \-> move.l 52(sp),d0
    6eb8:	|  |      move.l d0,-(sp)
    6eba:	|  |      move.l d0,-(sp)
    6ebc:	|  |      jsr 13156 <__addsf3>
    6ec2:	|  |      addq.l #8,sp
    6ec4:	|  |      move.l d0,-(sp)
    6ec6:	|  |      move.l 52(sp),-(sp)
    6eca:	|  |      jsr 13704 <atan2f>
    6ed0:	|  |      addq.l #8,sp
    6ed2:	|  |      move.l d0,-(sp)
    6ed4:	|  |      jsr 132bc <__extendsfdf2>
    6eda:	|  |      addq.l #4,sp
    6edc:	|  |      move.l #-1540411785,-(sp)
    6ee2:	|  |      move.l #1078765033,-(sp)
    6ee8:	|  |      move.l d1,-(sp)
    6eea:	|  |      move.l d0,-(sp)
    6eec:	|  |      jsr 133f4 <__muldf3>
    6ef2:	|  |      lea 16(sp),sp
    6ef6:	|  |      clr.l -(sp)
    6ef8:	|  |      move.l #1080459264,-(sp)
    6efe:	|  |      move.l d1,-(sp)
    6f00:	|  |      move.l d0,-(sp)
    6f02:	|  |      jsr 1318c <__adddf3>
    6f08:	|  |      lea 16(sp),sp
    6f0c:	|  |      move.l d1,-(sp)
    6f0e:	|  |      move.l d0,-(sp)
    6f10:	|  |      jsr 132fc <__fixdfsi>
    6f16:	|  |      addq.l #8,sp
    6f18:	|  |      movea.l 152(sp),a0
    6f1c:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    6f20:	|  |      movea.l 152(sp),a0
    6f24:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    6f2a:	|  \----> pea 1 <_start+0x1>
    6f2e:	|         move.l 156(sp),-(sp)
    6f32:	|         jsr 5b94 <setFrames>
    6f38:	|         addq.l #8,sp
    return TRUE;
    6f3a:	|         moveq #1,d0
}
    6f3c:	\-------> movem.l (sp)+,d2-d7
    6f40:	          lea 124(sp),sp
    6f44:	          rts

00006f46 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    6f46:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    6f48:	          move.l 19cba <allPeople>,(sp)
	while (thisPerson) {
    6f4e:	      /-- bra.s 6f66 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    6f50:	/-----|-> movea.l (sp),a0
    6f52:	|     |   movea.l 102(a0),a0
    6f56:	|     |   move.l 4(a0),d0
    6f5a:	|     |   cmp.l 8(sp),d0
    6f5e:	|  /--|-- beq.s 6f6c <findPerson+0x26>
		thisPerson = thisPerson -> next;
    6f60:	|  |  |   movea.l (sp),a0
    6f62:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    6f66:	|  |  \-> tst.l (sp)
    6f68:	\--|----- bne.s 6f50 <findPerson+0xa>
    6f6a:	   |  /-- bra.s 6f6e <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    6f6c:	   \--|-> nop
	}
	return thisPerson;
    6f6e:	      \-> move.l (sp),d0
}
    6f70:	          addq.l #4,sp
    6f72:	          rts

00006f74 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    6f74:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    6f76:	       move.l 12(sp),-(sp)
    6f7a:	       jsr 6f46 <findPerson>
    6f80:	       addq.l #4,sp
    6f82:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    6f84:	   /-- bne.s 6f8a <floatCharacter+0x16>
    6f86:	   |   clr.w d0
    6f88:	/--|-- bra.s 6f94 <floatCharacter+0x20>
	moveMe -> floaty = f;
    6f8a:	|  \-> movea.l (sp),a0
    6f8c:	|      move.l 8(sp),12(a0)
	return TRUE;
    6f92:	|      moveq #1,d0
}
    6f94:	\----> addq.l #4,sp
    6f96:	       rts

00006f98 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    6f98:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    6f9a:	          tst.l 8(sp)
    6f9e:	      /-- bne.s 6fac <forceWalkingPerson+0x14>
    6fa0:	      |   tst.l 12(sp)
    6fa4:	      +-- bne.s 6fac <forceWalkingPerson+0x14>
    6fa6:	      |   clr.w d0
    6fa8:	/-----|-- bra.w 703e <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    6fac:	|     \-> move.l 16(sp),-(sp)
    6fb0:	|         jsr 6f46 <findPerson>
    6fb6:	|         addq.l #4,sp
    6fb8:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    6fba:	|     /-- bne.s 6fc0 <forceWalkingPerson+0x28>
    6fbc:	|     |   clr.w d0
    6fbe:	+-----|-- bra.s 703e <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    6fc0:	|     \-> movea.l (sp),a0
    6fc2:	|         move.l 56(a0),d0
    6fc6:	|     /-- beq.s 6fd8 <forceWalkingPerson+0x40>
    6fc8:	|     |   movea.l (sp),a0
    6fca:	|     |   move.l 56(a0),d0
    6fce:	|     |   move.l d0,-(sp)
    6fd0:	|     |   jsr 243a <abortFunction>
    6fd6:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    6fd8:	|     \-> movea.l (sp),a0
    6fda:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    6fe0:	|         movea.l (sp),a0
    6fe2:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    6fe6:	|         movea.l (sp),a0
    6fe8:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    6fee:	|         movea.l (sp),a0
    6ff0:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    6ff6:	|         movea.l (sp),a0
    6ff8:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    6ffe:	|         movea.l (sp),a0
    7000:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    7004:	|         movea.l (sp),a0
    7006:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    700a:	|         move.l (sp),-(sp)
    700c:	|         jsr 688c <doBorderStuff>
    7012:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    7014:	|         pea 1 <_start+0x1>
    7018:	|         move.l 4(sp),-(sp)
    701c:	|         jsr 86d4 <walkMe>
    7022:	|         addq.l #8,sp
    7024:	|         tst.w d0
    7026:	|     /-- bne.s 7030 <forceWalkingPerson+0x98>
    7028:	|     |   movea.l (sp),a0
    702a:	|     |   move.w 54(a0),d0
    702e:	|  /--|-- beq.s 703c <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    7030:	|  |  \-> movea.l (sp),a0
    7032:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    7038:	|  |      moveq #1,d0
    703a:	+--|----- bra.s 703e <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    703c:	|  \----> clr.w d0
    }
}
    703e:	\-------> addq.l #4,sp
    7040:	          rts

00007042 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    7042:	                lea -56(sp),sp
    7046:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    7048:	                move.l #320,56(sp)
    7050:	                move.l #200,52(sp)
    7058:	                moveq #-1,d0
    705a:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    705e:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    7066:	                clr.l 44(sp)
    706a:	   /----------- bra.w 7242 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    706e:	/--|----------> movea.l 19d66 <currentFloor>,a0
    7074:	|  |            move.l 12(a0),d1
    7078:	|  |            move.l 44(sp),d0
    707c:	|  |            lsl.l #3,d0
    707e:	|  |            movea.l d1,a0
    7080:	|  |            adda.l d0,a0
    7082:	|  |            move.l (a0),d0
    7084:	|  |            move.l d0,d1
    7086:	|  |            subq.l #1,d1
    7088:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    708c:	|  |            clr.l 40(sp)
    7090:	|  |     /----- bra.w 7220 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    7094:	|  |  /--|----> movea.l 19d66 <currentFloor>,a0
    709a:	|  |  |  |      move.l 4(a0),d1
    709e:	|  |  |  |      movea.l 19d66 <currentFloor>,a0
    70a4:	|  |  |  |      movea.l 12(a0),a0
    70a8:	|  |  |  |      move.l 44(sp),d0
    70ac:	|  |  |  |      lsl.l #3,d0
    70ae:	|  |  |  |      adda.l d0,a0
    70b0:	|  |  |  |      movea.l 4(a0),a0
    70b4:	|  |  |  |      move.l 40(sp),d0
    70b8:	|  |  |  |      add.l d0,d0
    70ba:	|  |  |  |      add.l d0,d0
    70bc:	|  |  |  |      adda.l d0,a0
    70be:	|  |  |  |      move.l (a0),d0
    70c0:	|  |  |  |      lsl.l #3,d0
    70c2:	|  |  |  |      movea.l d1,a0
    70c4:	|  |  |  |      adda.l d0,a0
    70c6:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    70ca:	|  |  |  |      movea.l 19d66 <currentFloor>,a0
    70d0:	|  |  |  |      move.l 4(a0),d1
    70d4:	|  |  |  |      movea.l 19d66 <currentFloor>,a0
    70da:	|  |  |  |      movea.l 12(a0),a0
    70de:	|  |  |  |      move.l 44(sp),d0
    70e2:	|  |  |  |      lsl.l #3,d0
    70e4:	|  |  |  |      adda.l d0,a0
    70e6:	|  |  |  |      movea.l 4(a0),a0
    70ea:	|  |  |  |      move.l 40(sp),d0
    70ee:	|  |  |  |      add.l d0,d0
    70f0:	|  |  |  |      add.l d0,d0
    70f2:	|  |  |  |      adda.l d0,a0
    70f4:	|  |  |  |      move.l (a0),d0
    70f6:	|  |  |  |      lsl.l #3,d0
    70f8:	|  |  |  |      movea.l d1,a0
    70fa:	|  |  |  |      adda.l d0,a0
    70fc:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    7102:	|  |  |  |      movea.l 19d66 <currentFloor>,a0
    7108:	|  |  |  |      move.l 4(a0),d1
    710c:	|  |  |  |      movea.l 19d66 <currentFloor>,a0
    7112:	|  |  |  |      movea.l 12(a0),a0
    7116:	|  |  |  |      move.l 44(sp),d0
    711a:	|  |  |  |      lsl.l #3,d0
    711c:	|  |  |  |      adda.l d0,a0
    711e:	|  |  |  |      movea.l 4(a0),a0
    7122:	|  |  |  |      move.l 36(sp),d0
    7126:	|  |  |  |      add.l d0,d0
    7128:	|  |  |  |      add.l d0,d0
    712a:	|  |  |  |      adda.l d0,a0
    712c:	|  |  |  |      move.l (a0),d0
    712e:	|  |  |  |      lsl.l #3,d0
    7130:	|  |  |  |      movea.l d1,a0
    7132:	|  |  |  |      adda.l d0,a0
    7134:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    7138:	|  |  |  |      movea.l 19d66 <currentFloor>,a0
    713e:	|  |  |  |      move.l 4(a0),d1
    7142:	|  |  |  |      movea.l 19d66 <currentFloor>,a0
    7148:	|  |  |  |      movea.l 12(a0),a0
    714c:	|  |  |  |      move.l 44(sp),d0
    7150:	|  |  |  |      lsl.l #3,d0
    7152:	|  |  |  |      adda.l d0,a0
    7154:	|  |  |  |      movea.l 4(a0),a0
    7158:	|  |  |  |      move.l 36(sp),d0
    715c:	|  |  |  |      add.l d0,d0
    715e:	|  |  |  |      add.l d0,d0
    7160:	|  |  |  |      adda.l d0,a0
    7162:	|  |  |  |      move.l (a0),d0
    7164:	|  |  |  |      lsl.l #3,d0
    7166:	|  |  |  |      movea.l d1,a0
    7168:	|  |  |  |      adda.l d0,a0
    716a:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    7170:	|  |  |  |      movea.l 68(sp),a0
    7174:	|  |  |  |      move.l (a0),d1
    7176:	|  |  |  |      movea.l 64(sp),a0
    717a:	|  |  |  |      move.l (a0),d0
    717c:	|  |  |  |      move.l d1,-(sp)
    717e:	|  |  |  |      move.l d0,-(sp)
    7180:	|  |  |  |      move.l 24(sp),-(sp)
    7184:	|  |  |  |      move.l 32(sp),-(sp)
    7188:	|  |  |  |      move.l 40(sp),-(sp)
    718c:	|  |  |  |      move.l 48(sp),-(sp)
    7190:	|  |  |  |      lea 28(sp),a0
    7194:	|  |  |  |      move.l a0,-(sp)
    7196:	|  |  |  |      lea 36(sp),a0
    719a:	|  |  |  |      move.l a0,-(sp)
    719c:	|  |  |  |      jsr 11c5c <closestPointOnLine>
    71a2:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    71a6:	|  |  |  |      movea.l 64(sp),a0
    71aa:	|  |  |  |      move.l (a0),d0
    71ac:	|  |  |  |      move.l 8(sp),d1
    71b0:	|  |  |  |      move.l d0,d2
    71b2:	|  |  |  |      sub.l d1,d2
    71b4:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    71b8:	|  |  |  |      movea.l 68(sp),a0
    71bc:	|  |  |  |      move.l (a0),d0
    71be:	|  |  |  |      move.l 4(sp),d1
    71c2:	|  |  |  |      move.l d0,d2
    71c4:	|  |  |  |      sub.l d1,d2
    71c6:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    71ca:	|  |  |  |      move.l 28(sp),-(sp)
    71ce:	|  |  |  |      move.l 32(sp),-(sp)
    71d2:	|  |  |  |      jsr 138fe <__mulsi3>
    71d8:	|  |  |  |      addq.l #8,sp
    71da:	|  |  |  |      move.l d0,d2
    71dc:	|  |  |  |      move.l 24(sp),-(sp)
    71e0:	|  |  |  |      move.l 28(sp),-(sp)
    71e4:	|  |  |  |      jsr 138fe <__mulsi3>
    71ea:	|  |  |  |      addq.l #8,sp
    71ec:	|  |  |  |      move.l d2,d1
    71ee:	|  |  |  |      add.l d0,d1
    71f0:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    71f4:	|  |  |  |      move.l 12(sp),d2
    71f8:	|  |  |  |      cmp.l 32(sp),d2
    71fc:	|  |  |  |  /-- bge.s 7216 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    71fe:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    7204:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    720a:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    7210:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    7216:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    721c:	|  |  |  |      addq.l #1,40(sp)
    7220:	|  |  |  \----> movea.l 19d66 <currentFloor>,a0
    7226:	|  |  |         move.l 12(a0),d1
    722a:	|  |  |         move.l 44(sp),d0
    722e:	|  |  |         lsl.l #3,d0
    7230:	|  |  |         movea.l d1,a0
    7232:	|  |  |         adda.l d0,a0
    7234:	|  |  |         move.l (a0),d0
    7236:	|  |  |         cmp.l 40(sp),d0
    723a:	|  |  \-------- bgt.w 7094 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    723e:	|  |            addq.l #1,44(sp)
    7242:	|  \----------> movea.l 19d66 <currentFloor>,a0
    7248:	|               move.l 8(a0),d0
    724c:	|               cmp.l 44(sp),d0
    7250:	\-------------- bgt.w 706e <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    7254:	                moveq #-1,d0
    7256:	                cmp.l 48(sp),d0
    725a:	            /-- bne.s 7260 <handleClosestPoint+0x21e>
    725c:	            |   clr.w d0
    725e:	         /--|-- bra.s 727a <handleClosestPoint+0x238>
	*setX = gotX;
    7260:	         |  \-> movea.l 64(sp),a0
    7264:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    7268:	         |      movea.l 68(sp),a0
    726c:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    7270:	         |      movea.l 72(sp),a0
    7274:	         |      move.l 48(sp),(a0)

	return TRUE;
    7278:	         |      moveq #1,d0
}
    727a:	         \----> move.l (sp)+,d2
    727c:	                lea 56(sp),sp
    7280:	                rts

00007282 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    7282:	clr.l 19cce <personRegion+0x10>
	personRegion.sY = 0;
    7288:	clr.l 19cd2 <personRegion+0x14>
	personRegion.di = -1;
    728e:	moveq #-1,d0
    7290:	move.l d0,19cd6 <personRegion+0x18>
	allScreenRegions = NULL;
    7296:	clr.l 19d5e <allScreenRegions>

	return TRUE;
    729c:	moveq #1,d0
}
    729e:	rts

000072a0 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    72a0:	          subq.l #4,sp
    72a2:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    72a4:	          tst.l 12(sp)
    72a8:	      /-- bne.s 72b0 <jumpPerson+0x10>
    72aa:	      |   tst.l 16(sp)
    72ae:	/-----|-- beq.s 7324 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    72b0:	|     \-> move.l 20(sp),-(sp)
    72b4:	|         jsr 6f46 <findPerson>
    72ba:	|         addq.l #4,sp
    72bc:	|         move.l d0,4(sp)
    if (!moveMe) return;
    72c0:	|  /----- beq.s 7328 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    72c2:	|  |      movea.l 4(sp),a0
    72c6:	|  |      move.l 56(a0),d0
    72ca:	|  |  /-- beq.s 72de <jumpPerson+0x3e>
    72cc:	|  |  |   movea.l 4(sp),a0
    72d0:	|  |  |   move.l 56(a0),d0
    72d4:	|  |  |   move.l d0,-(sp)
    72d6:	|  |  |   jsr 243a <abortFunction>
    72dc:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    72de:	|  |  \-> movea.l 4(sp),a0
    72e2:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    72e6:	|  |      movea.l 4(sp),a0
    72ea:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    72ee:	|  |      movea.l 4(sp),a0
    72f2:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    72f6:	|  |      move.l 16(sp),-(sp)
    72fa:	|  |      jsr 133a4 <__floatsisf>
    7300:	|  |      addq.l #4,sp
    7302:	|  |      move.l d0,d2
    7304:	|  |      move.l 12(sp),-(sp)
    7308:	|  |      jsr 133a4 <__floatsisf>
    730e:	|  |      addq.l #4,sp
    7310:	|  |      move.l d2,-(sp)
    7312:	|  |      move.l d0,-(sp)
    7314:	|  |      move.l 12(sp),-(sp)
    7318:	|  |      jsr 768e <moveAndScale>
    731e:	|  |      lea 12(sp),sp
    7322:	|  |  /-- bra.s 732a <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    7324:	\--|--|-> nop
    7326:	   |  +-- bra.s 732a <jumpPerson+0x8a>
    if (!moveMe) return;
    7328:	   \--|-> nop
}
    732a:	      \-> move.l (sp)+,d2
    732c:	          addq.l #4,sp
    732e:	          rts

00007330 <killAllPeople>:


void killAllPeople () {
    7330:	          subq.l #8,sp
    7332:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    7334:	   /----- bra.s 73a0 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    7336:	/--|----> movea.l 19cba <allPeople>,a0
    733c:	|  |      move.l 56(a0),d0
    7340:	|  |  /-- beq.s 7356 <killAllPeople+0x26>
    7342:	|  |  |   movea.l 19cba <allPeople>,a0
    7348:	|  |  |   move.l 56(a0),d0
    734c:	|  |  |   move.l d0,-(sp)
    734e:	|  |  |   jsr 243a <abortFunction>
    7354:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    7356:	|  |  \-> movea.l 19cba <allPeople>,a0
    735c:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    7360:	|  |      move.l 19cba <allPeople>,8(sp)
		allPeople = allPeople -> next;
    7368:	|  |      movea.l 19cba <allPeople>,a0
    736e:	|  |      move.l 24(a0),d0
    7372:	|  |      move.l d0,19cba <allPeople>
		removeObjectType (killPeople -> thisType);
    7378:	|  |      movea.l 8(sp),a0
    737c:	|  |      move.l 102(a0),d0
    7380:	|  |      move.l d0,-(sp)
    7382:	|  |      jsr 9fae <removeObjectType>
    7388:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    738a:	|  |      move.l 8(sp),4(sp)
    7390:	|  |      move.l 19c5a <SysBase>,d0
    7396:	|  |      movea.l d0,a6
    7398:	|  |      movea.l 4(sp),a1
    739c:	|  |      jsr -690(a6)
	while (allPeople) {
    73a0:	|  \----> move.l 19cba <allPeople>,d0
    73a6:	\-------- bne.s 7336 <killAllPeople+0x6>
	}
}
    73a8:	          nop
    73aa:	          nop
    73ac:	          movea.l (sp)+,a6
    73ae:	          addq.l #8,sp
    73b0:	          rts

000073b2 <killMostPeople>:

void killMostPeople() {
    73b2:	          lea -12(sp),sp
    73b6:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    73b8:	          move.l #105658,12(sp)

    while (*lookyHere) {
    73c0:	   /----- bra.w 7446 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    73c4:	/--|----> movea.l 12(sp),a0
    73c8:	|  |      movea.l (a0),a0
    73ca:	|  |      move.l 106(a0),d0
    73ce:	|  |      moveq #32,d1
    73d0:	|  |      and.l d1,d0
    73d2:	|  |  /-- beq.s 73e4 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    73d4:	|  |  |   movea.l 12(sp),a0
    73d8:	|  |  |   move.l (a0),d0
    73da:	|  |  |   moveq #24,d1
    73dc:	|  |  |   add.l d0,d1
    73de:	|  |  |   move.l d1,12(sp)
    73e2:	|  +--|-- bra.s 7446 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    73e4:	|  |  \-> movea.l 12(sp),a0
    73e8:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    73ec:	|  |      movea.l 8(sp),a0
    73f0:	|  |      move.l 24(a0),d0
    73f4:	|  |      movea.l 12(sp),a0
    73f8:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    73fa:	|  |      movea.l 8(sp),a0
    73fe:	|  |      move.l 56(a0),d0
    7402:	|  |  /-- beq.s 7416 <killMostPeople+0x64>
    7404:	|  |  |   movea.l 8(sp),a0
    7408:	|  |  |   move.l 56(a0),d0
    740c:	|  |  |   move.l d0,-(sp)
    740e:	|  |  |   jsr 243a <abortFunction>
    7414:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    7416:	|  |  \-> movea.l 8(sp),a0
    741a:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    741e:	|  |      movea.l 8(sp),a0
    7422:	|  |      move.l 102(a0),d0
    7426:	|  |      move.l d0,-(sp)
    7428:	|  |      jsr 9fae <removeObjectType>
    742e:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    7430:	|  |      move.l 8(sp),4(sp)
    7436:	|  |      move.l 19c5a <SysBase>,d0
    743c:	|  |      movea.l d0,a6
    743e:	|  |      movea.l 4(sp),a1
    7442:	|  |      jsr -690(a6)
    while (*lookyHere) {
    7446:	|  \----> movea.l 12(sp),a0
    744a:	|         move.l (a0),d0
    744c:	\-------- bne.w 73c4 <killMostPeople+0x12>
        }
    }
}
    7450:	          nop
    7452:	          nop
    7454:	          movea.l (sp)+,a6
    7456:	          lea 12(sp),sp
    745a:	          rts

0000745c <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    745c:	clr.l -(sp)
    745e:	move.l sp,d0
    7460:	addq.l #8,d0
    7462:	move.l d0,-(sp)
    7464:	jsr 5b94 <setFrames>
    746a:	addq.l #8,sp
}
    746c:	nop
    746e:	rts

00007470 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    7470:	          lea -12(sp),sp
    7474:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    7476:	          tst.l 20(sp)
    747a:	      /-- bne.s 7488 <makeWalkingPerson+0x18>
    747c:	      |   tst.l 24(sp)
    7480:	      +-- bne.s 7488 <makeWalkingPerson+0x18>
    7482:	      |   clr.w d0
    7484:	/-----|-- bra.w 7620 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    7488:	|     \-> movea.l 19d66 <currentFloor>,a0
    748e:	|         move.l 8(a0),d0
    7492:	|     /-- bne.s 749a <makeWalkingPerson+0x2a>
    7494:	|     |   clr.w d0
    7496:	+-----|-- bra.w 7620 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    749a:	|     \-> move.l 28(sp),-(sp)
    749e:	|         jsr 6f46 <findPerson>
    74a4:	|         addq.l #4,sp
    74a6:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    74aa:	|     /-- bne.s 74b2 <makeWalkingPerson+0x42>
    74ac:	|     |   clr.w d0
    74ae:	+-----|-- bra.w 7620 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    74b2:	|     \-> movea.l 12(sp),a0
    74b6:	|         move.l 56(a0),d0
    74ba:	|     /-- beq.s 74ce <makeWalkingPerson+0x5e>
    74bc:	|     |   movea.l 12(sp),a0
    74c0:	|     |   move.l 56(a0),d0
    74c4:	|     |   move.l d0,-(sp)
    74c6:	|     |   jsr 243a <abortFunction>
    74cc:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    74ce:	|     \-> movea.l 12(sp),a0
    74d2:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    74d6:	|         movea.l 12(sp),a0
    74da:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    74e0:	|         movea.l 12(sp),a0
    74e4:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    74ea:	|         movea.l 12(sp),a0
    74ee:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    74f4:	|         movea.l 12(sp),a0
    74f8:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    74fe:	|         move.l 24(sp),-(sp)
    7502:	|         move.l 24(sp),-(sp)
    7506:	|         jsr 1215e <inFloor>
    750c:	|         addq.l #8,sp
    750e:	|         movea.l 12(sp),a0
    7512:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    7516:	|         movea.l 12(sp),a0
    751a:	|         move.l 48(a0),d0
    751e:	|         moveq #-1,d1
    7520:	|         cmp.l d0,d1
    7522:	|     /-- bne.s 7552 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    7524:	|     |   movea.w #48,a0
    7528:	|     |   adda.l 12(sp),a0
    752c:	|     |   moveq #32,d1
    752e:	|     |   add.l 12(sp),d1
    7532:	|     |   moveq #28,d0
    7534:	|     |   add.l 12(sp),d0
    7538:	|     |   move.l a0,-(sp)
    753a:	|     |   move.l d1,-(sp)
    753c:	|     |   move.l d0,-(sp)
    753e:	|     |   jsr 7042 <handleClosestPoint>
    7544:	|     |   lea 12(sp),sp
    7548:	|     |   tst.w d0
    754a:	|     +-- bne.s 7552 <makeWalkingPerson+0xe2>
    754c:	|     |   clr.w d0
    754e:	+-----|-- bra.w 7620 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    7552:	|     \-> movea.l 12(sp),a0
    7556:	|         move.l 4(a0),d0
    755a:	|         move.l d0,-(sp)
    755c:	|         jsr 1333c <__fixsfsi>
    7562:	|         addq.l #4,sp
    7564:	|         move.l d0,d2
    7566:	|         movea.l 12(sp),a0
    756a:	|         move.l (a0),d0
    756c:	|         move.l d0,-(sp)
    756e:	|         jsr 1333c <__fixsfsi>
    7574:	|         addq.l #4,sp
    7576:	|         move.l d2,-(sp)
    7578:	|         move.l d0,-(sp)
    757a:	|         jsr 1215e <inFloor>
    7580:	|         addq.l #8,sp
    7582:	|         movea.l 12(sp),a0
    7586:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    758a:	|         movea.l 12(sp),a0
    758e:	|         move.l 44(a0),d0
    7592:	|         moveq #-1,d1
    7594:	|         cmp.l d0,d1
    7596:	|     /-- bne.s 75e8 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    7598:	|     |   movea.l 12(sp),a0
    759c:	|     |   move.l (a0),d0
    759e:	|     |   move.l d0,-(sp)
    75a0:	|     |   jsr 1333c <__fixsfsi>
    75a6:	|     |   addq.l #4,sp
    75a8:	|     |   move.l d0,8(sp)
    75ac:	|     |   movea.l 12(sp),a0
    75b0:	|     |   move.l 4(a0),d0
    75b4:	|     |   move.l d0,-(sp)
    75b6:	|     |   jsr 1333c <__fixsfsi>
    75bc:	|     |   addq.l #4,sp
    75be:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    75c2:	|     |   moveq #44,d0
    75c4:	|     |   add.l 12(sp),d0
    75c8:	|     |   move.l d0,-(sp)
    75ca:	|     |   lea 8(sp),a0
    75ce:	|     |   move.l a0,-(sp)
    75d0:	|     |   moveq #16,d0
    75d2:	|     |   add.l sp,d0
    75d4:	|     |   move.l d0,-(sp)
    75d6:	|     |   jsr 7042 <handleClosestPoint>
    75dc:	|     |   lea 12(sp),sp
    75e0:	|     |   tst.w d0
    75e2:	|     +-- bne.s 75e8 <makeWalkingPerson+0x178>
    75e4:	|     |   clr.w d0
    75e6:	+-----|-- bra.s 7620 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    75e8:	|     \-> move.l 12(sp),-(sp)
    75ec:	|         jsr 688c <doBorderStuff>
    75f2:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    75f4:	|         clr.l -(sp)
    75f6:	|         move.l 16(sp),-(sp)
    75fa:	|         jsr 86d4 <walkMe>
    7600:	|         addq.l #8,sp
    7602:	|         tst.w d0
    7604:	|     /-- bne.s 7610 <makeWalkingPerson+0x1a0>
    7606:	|     |   movea.l 12(sp),a0
    760a:	|     |   move.w 54(a0),d0
    760e:	|  /--|-- beq.s 761e <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    7610:	|  |  \-> movea.l 12(sp),a0
    7614:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    761a:	|  |      moveq #1,d0
    761c:	+--|----- bra.s 7620 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    761e:	|  \----> clr.w d0
	}
}
    7620:	\-------> move.l (sp)+,d2
    7622:	          lea 12(sp),sp
    7626:	          rts

00007628 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    7628:	       lea -16(sp),sp
    762c:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    762e:	       moveq #12,d0
    7630:	       move.l d0,16(sp)
    7634:	       clr.l 12(sp)
    7638:	       move.l 19c5a <SysBase>,d0
    763e:	       movea.l d0,a6
    7640:	       move.l 16(sp),d0
    7644:	       move.l 12(sp),d1
    7648:	       jsr -684(a6)
    764c:	       move.l d0,8(sp)
    7650:	       move.l 8(sp),d0
    7654:	       move.l d0,4(sp)
    if(newAnim == 0) {
    7658:	   /-- bne.s 766c <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    765a:	   |   pea 161a4 <incbin_player_end+0x20e>
    7660:	   |   jsr 12e08 <KPrintF>
    7666:	   |   addq.l #4,sp
        return NULL;    
    7668:	   |   moveq #0,d0
    766a:	/--|-- bra.s 7686 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    766c:	|  \-> movea.l 4(sp),a0
    7670:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    7672:	|      movea.l 4(sp),a0
    7676:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    767a:	|      movea.l 4(sp),a0
    767e:	|      clr.l 4(a0)
	return newAnim;
    7682:	|      move.l 4(sp),d0
}
    7686:	\----> movea.l (sp)+,a6
    7688:	       lea 16(sp),sp
    768c:	       rts

0000768e <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    768e:	    move.l d2,-(sp)
	me->x = x;
    7690:	    movea.l 8(sp),a0
    7694:	    move.l 12(sp),(a0)
	me->y = y;
    7698:	    movea.l 8(sp),a0
    769c:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    76a2:	    movea.l 8(sp),a0
    76a6:	    move.l 106(a0),d0
    76aa:	    moveq #2,d1
    76ac:	    and.l d1,d0
    76ae:	/-- bne.s 7706 <moveAndScale+0x78>
    76b0:	|   move.w 18140 <scaleDivide>,d0
    76b6:	+-- beq.s 7706 <moveAndScale+0x78>
    76b8:	|   movea.l 8(sp),a0
    76bc:	|   move.l 4(a0),d2
    76c0:	|   move.w 1813e <scaleHorizon>,d0
    76c6:	|   movea.w d0,a0
    76c8:	|   move.l a0,-(sp)
    76ca:	|   jsr 133a4 <__floatsisf>
    76d0:	|   addq.l #4,sp
    76d2:	|   move.l d0,-(sp)
    76d4:	|   move.l d2,-(sp)
    76d6:	|   jsr 13698 <__subsf3>
    76dc:	|   addq.l #8,sp
    76de:	|   move.l d0,d2
    76e0:	|   move.w 18140 <scaleDivide>,d0
    76e6:	|   movea.w d0,a0
    76e8:	|   move.l a0,-(sp)
    76ea:	|   jsr 133a4 <__floatsisf>
    76f0:	|   addq.l #4,sp
    76f2:	|   move.l d0,-(sp)
    76f4:	|   move.l d2,-(sp)
    76f6:	|   jsr 13250 <__divsf3>
    76fc:	|   addq.l #8,sp
    76fe:	|   movea.l 8(sp),a0
    7702:	|   move.l d0,20(a0)
}
    7706:	\-> nop
    7708:	    move.l (sp)+,d2
    770a:	    rts

0000770c <removeOneCharacter>:

void removeOneCharacter (int i) {
    770c:	          lea -12(sp),sp
    7710:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    7712:	          move.l 20(sp),-(sp)
    7716:	          jsr 6f46 <findPerson>
    771c:	          addq.l #4,sp
    771e:	          move.l d0,8(sp)

    if (p) {
    7722:	/-------- beq.w 77ce <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    7726:	|         move.l 19d62 <overRegion>,d0
    772c:	|         cmpi.l #105662,d0
    7732:	|     /-- bne.s 7750 <removeOneCharacter+0x44>
    7734:	|     |   movea.l 19d62 <overRegion>,a0
    773a:	|     |   move.l 28(a0),d1
    773e:	|     |   movea.l 8(sp),a0
    7742:	|     |   move.l 102(a0),d0
    7746:	|     |   cmp.l d1,d0
    7748:	|     +-- bne.s 7750 <removeOneCharacter+0x44>
            overRegion = NULL;
    774a:	|     |   clr.l 19d62 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    7750:	|     \-> movea.l 8(sp),a0
    7754:	|         move.l 56(a0),d0
    7758:	|     /-- beq.s 776c <removeOneCharacter+0x60>
    775a:	|     |   movea.l 8(sp),a0
    775e:	|     |   move.l 56(a0),d0
    7762:	|     |   move.l d0,-(sp)
    7764:	|     |   jsr 243a <abortFunction>
    776a:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    776c:	|     \-> movea.l 8(sp),a0
    7770:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    7774:	|         move.l #105658,12(sp)
    777c:	|     /-- bra.s 778c <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    777e:	|  /--|-> movea.l 12(sp),a0
    7782:	|  |  |   move.l (a0),d0
    7784:	|  |  |   moveq #24,d1
    7786:	|  |  |   add.l d0,d1
    7788:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    778c:	|  |  \-> movea.l 12(sp),a0
    7790:	|  |      move.l (a0),d0
    7792:	|  |      cmp.l 8(sp),d0
    7796:	|  \----- bne.s 777e <removeOneCharacter+0x72>

        *killPeople = p->next;
    7798:	|         movea.l 8(sp),a0
    779c:	|         move.l 24(a0),d0
    77a0:	|         movea.l 12(sp),a0
    77a4:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    77a6:	|         movea.l 8(sp),a0
    77aa:	|         move.l 102(a0),d0
    77ae:	|         move.l d0,-(sp)
    77b0:	|         jsr 9fae <removeObjectType>
    77b6:	|         addq.l #4,sp
        FreeVec(p);
    77b8:	|         move.l 8(sp),4(sp)
    77be:	|         move.l 19c5a <SysBase>,d0
    77c4:	|         movea.l d0,a6
    77c6:	|         movea.l 4(sp),a1
    77ca:	|         jsr -690(a6)
    }
}
    77ce:	\-------> nop
    77d0:	          movea.l (sp)+,a6
    77d2:	          lea 12(sp),sp
    77d6:	          rts

000077d8 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    77d8:	       subq.l #8,sp
    77da:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    77dc:	       movea.l 16(sp),a0
    77e0:	       movea.l 68(a0),a0
    77e4:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    77ea:	       movea.l 16(sp),a0
    77ee:	       move.l 80(a0),d2
    77f2:	       move.l 4(sp),-(sp)
    77f6:	       pea b4 <_start+0xb4>
    77fa:	       jsr 1397c <__divsi3>
    7800:	       addq.l #8,sp
    7802:	       add.l d2,d0
    7804:	       move.l d0,d1
    7806:	       addi.l #180,d1
    780c:	       movea.l 16(sp),a0
    7810:	       move.l 88(a0),d0
    7814:	       move.l d1,d2
    7816:	       add.l d0,d2
    7818:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    781c:	   /-- bra.s 7826 <rethinkAngle+0x4e>
    781e:	/--|-> addi.l #-360,8(sp)
    7826:	|  \-> cmpi.l #359,8(sp)
    782e:	\----- bgt.s 781e <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    7830:	       move.l 4(sp),-(sp)
    7834:	       move.l 12(sp),-(sp)
    7838:	       jsr 138fe <__mulsi3>
    783e:	       addq.l #8,sp
    7840:	       pea 168 <decodeFilename+0x50>
    7844:	       move.l d0,-(sp)
    7846:	       jsr 1397c <__divsi3>
    784c:	       addq.l #8,sp
    784e:	       movea.l 16(sp),a0
    7852:	       move.l d0,94(a0)
}
    7856:	       nop
    7858:	       move.l (sp)+,d2
    785a:	       addq.l #8,sp
    785c:	       rts

0000785e <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    785e:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    7860:	          movea.l 8(sp),a0
    7864:	          move.l 8(a0),d0
    7868:	          move.l 12(sp),-(sp)
    786c:	          move.l d0,-(sp)
    786e:	          jsr 8d0 <put2bytes>
    7874:	          addq.l #8,sp
	if (p -> numFrames) {
    7876:	          movea.l 8(sp),a0
    787a:	          move.l 8(a0),d0
    787e:	/-------- beq.w 7922 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    7882:	|         movea.l 8(sp),a0
    7886:	|         movea.l (a0),a0
    7888:	|         move.l (a0),d0
    788a:	|         move.l 12(sp),-(sp)
    788e:	|         move.l d0,-(sp)
    7890:	|         jsr 958 <put4bytes>
    7896:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    7898:	|         clr.l (sp)
    789a:	|     /-- bra.s 7914 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    789c:	|  /--|-> movea.l 8(sp),a0
    78a0:	|  |  |   movea.l 4(a0),a0
    78a4:	|  |  |   move.l (sp),d1
    78a6:	|  |  |   move.l d1,d0
    78a8:	|  |  |   add.l d0,d0
    78aa:	|  |  |   add.l d1,d0
    78ac:	|  |  |   add.l d0,d0
    78ae:	|  |  |   add.l d0,d0
    78b0:	|  |  |   adda.l d0,a0
    78b2:	|  |  |   move.l (a0),d0
    78b4:	|  |  |   move.l 12(sp),-(sp)
    78b8:	|  |  |   move.l d0,-(sp)
    78ba:	|  |  |   jsr 958 <put4bytes>
    78c0:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    78c2:	|  |  |   movea.l 8(sp),a0
    78c6:	|  |  |   movea.l 4(a0),a0
    78ca:	|  |  |   move.l (sp),d1
    78cc:	|  |  |   move.l d1,d0
    78ce:	|  |  |   add.l d0,d0
    78d0:	|  |  |   add.l d1,d0
    78d2:	|  |  |   add.l d0,d0
    78d4:	|  |  |   add.l d0,d0
    78d6:	|  |  |   adda.l d0,a0
    78d8:	|  |  |   move.l 4(a0),d0
    78dc:	|  |  |   move.l 12(sp),-(sp)
    78e0:	|  |  |   move.l d0,-(sp)
    78e2:	|  |  |   jsr 958 <put4bytes>
    78e8:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    78ea:	|  |  |   movea.l 8(sp),a0
    78ee:	|  |  |   movea.l 4(a0),a0
    78f2:	|  |  |   move.l (sp),d1
    78f4:	|  |  |   move.l d1,d0
    78f6:	|  |  |   add.l d0,d0
    78f8:	|  |  |   add.l d1,d0
    78fa:	|  |  |   add.l d0,d0
    78fc:	|  |  |   add.l d0,d0
    78fe:	|  |  |   adda.l d0,a0
    7900:	|  |  |   move.l 8(a0),d0
    7904:	|  |  |   move.l 12(sp),-(sp)
    7908:	|  |  |   move.l d0,-(sp)
    790a:	|  |  |   jsr 958 <put4bytes>
    7910:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    7912:	|  |  |   addq.l #1,(sp)
    7914:	|  |  \-> movea.l 8(sp),a0
    7918:	|  |      move.l 8(a0),d0
    791c:	|  |      cmp.l (sp),d0
    791e:	|  \----- bgt.w 789c <saveAnim+0x3e>
		}
	}
	return TRUE;
    7922:	\-------> moveq #1,d0
}
    7924:	          addq.l #4,sp
    7926:	          rts

00007928 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    7928:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    792a:	             movea.l 8(sp),a0
    792e:	             move.l 4(a0),d0
    7932:	             move.l 12(sp),-(sp)
    7936:	             move.l d0,-(sp)
    7938:	             jsr 8d0 <put2bytes>
    793e:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    7940:	             clr.l (sp)
    7942:	   /-------- bra.s 796e <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    7944:	/--|-------> movea.l 8(sp),a0
    7948:	|  |         move.l (a0),d1
    794a:	|  |         move.l (sp),d0
    794c:	|  |         add.l d0,d0
    794e:	|  |         add.l d0,d0
    7950:	|  |         movea.l d1,a0
    7952:	|  |         adda.l d0,a0
    7954:	|  |         move.l (a0),d0
    7956:	|  |         move.l 12(sp),-(sp)
    795a:	|  |         move.l d0,-(sp)
    795c:	|  |         jsr 785e <saveAnim>
    7962:	|  |         addq.l #8,sp
    7964:	|  |         tst.w d0
    7966:	|  |     /-- bne.s 796c <saveCostume+0x44>
    7968:	|  |     |   clr.w d0
    796a:	|  |  /--|-- bra.s 7982 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    796c:	|  |  |  \-> addq.l #1,(sp)
    796e:	|  \--|----> movea.l 8(sp),a0
    7972:	|     |      move.l 4(a0),d1
    7976:	|     |      move.l d1,d0
    7978:	|     |      add.l d0,d0
    797a:	|     |      add.l d1,d0
    797c:	|     |      cmp.l (sp),d0
    797e:	\-----|----- bgt.s 7944 <saveCostume+0x1c>
	}

	return TRUE;
    7980:	      |      moveq #1,d0
}
    7982:	      \----> addq.l #4,sp
    7984:	             rts

00007986 <savePeople>:

BOOL savePeople (BPTR fp) {
    7986:	             lea -144(sp),sp
    798a:	             move.l a6,-(sp)
    798c:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    798e:	             move.l 19cba <allPeople>,148(sp)
	int countPeople = 0, a;
    7996:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    799a:	             move.w 1813e <scaleHorizon>,d0
    79a0:	             movea.w d0,a0
    79a2:	             move.l 156(sp),-(sp)
    79a6:	             move.l a0,-(sp)
    79a8:	             jsr a9c <putSigned>
    79ae:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    79b0:	             move.w 18140 <scaleDivide>,d0
    79b6:	             movea.w d0,a0
    79b8:	             move.l 156(sp),-(sp)
    79bc:	             move.l a0,-(sp)
    79be:	             jsr a9c <putSigned>
    79c4:	             addq.l #8,sp

	while (me) {
    79c6:	         /-- bra.s 79d6 <savePeople+0x50>
		countPeople ++;
    79c8:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    79cc:	      |  |   movea.l 148(sp),a0
    79d0:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    79d6:	      |  \-> tst.l 148(sp)
    79da:	      \----- bne.s 79c8 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    79dc:	             move.l 156(sp),-(sp)
    79e0:	             move.l 148(sp),-(sp)
    79e4:	             jsr 8d0 <put2bytes>
    79ea:	             addq.l #8,sp

	me = allPeople;
    79ec:	             move.l 19cba <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    79f4:	             clr.l 140(sp)
    79f8:	   /-------- bra.w 7e50 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    79fc:	/--|-------> movea.l 148(sp),a0
    7a00:	|  |         move.l (a0),d0
    7a02:	|  |         move.l 156(sp),-(sp)
    7a06:	|  |         move.l d0,-(sp)
    7a08:	|  |         jsr a46 <putFloat>
    7a0e:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    7a10:	|  |         movea.l 148(sp),a0
    7a14:	|  |         move.l 4(a0),d0
    7a18:	|  |         move.l 156(sp),-(sp)
    7a1c:	|  |         move.l d0,-(sp)
    7a1e:	|  |         jsr a46 <putFloat>
    7a24:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    7a26:	|  |         movea.l 148(sp),a0
    7a2a:	|  |         move.l 68(a0),d0
    7a2e:	|  |         move.l 156(sp),-(sp)
    7a32:	|  |         move.l d0,-(sp)
    7a34:	|  |         jsr 7928 <saveCostume>
    7a3a:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    7a3c:	|  |         movea.l 148(sp),a0
    7a40:	|  |         move.l 60(a0),d0
    7a44:	|  |         move.l 156(sp),-(sp)
    7a48:	|  |         move.l d0,-(sp)
    7a4a:	|  |         jsr 785e <saveAnim>
    7a50:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    7a52:	|  |         move.l 156(sp),136(sp)
    7a58:	|  |         movea.l 148(sp),a0
    7a5c:	|  |         move.l 60(a0),d1
    7a60:	|  |         movea.l 148(sp),a0
    7a64:	|  |         move.l 64(a0),d0
    7a68:	|  |         cmp.l d1,d0
    7a6a:	|  |         seq d0
    7a6c:	|  |         neg.b d0
    7a6e:	|  |         move.b d0,d0
    7a70:	|  |         andi.l #255,d0
    7a76:	|  |         move.l d0,132(sp)
    7a7a:	|  |         move.l 19c62 <DOSBase>,d0
    7a80:	|  |         movea.l d0,a6
    7a82:	|  |         move.l 136(sp),d1
    7a86:	|  |         move.l 132(sp),d2
    7a8a:	|  |         jsr -312(a6)
    7a8e:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    7a92:	|  |         movea.l 148(sp),a0
    7a96:	|  |         move.l 20(a0),d0
    7a9a:	|  |         move.l 156(sp),-(sp)
    7a9e:	|  |         move.l d0,-(sp)
    7aa0:	|  |         jsr a46 <putFloat>
    7aa6:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    7aa8:	|  |         movea.l 148(sp),a0
    7aac:	|  |         move.l 106(a0),d0
    7ab0:	|  |         move.l 156(sp),-(sp)
    7ab4:	|  |         move.l d0,-(sp)
    7ab6:	|  |         jsr 8d0 <put2bytes>
    7abc:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    7abe:	|  |         movea.l 148(sp),a0
    7ac2:	|  |         move.l 8(a0),d0
    7ac6:	|  |         move.l 156(sp),-(sp)
    7aca:	|  |         move.l d0,-(sp)
    7acc:	|  |         jsr 8d0 <put2bytes>
    7ad2:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    7ad4:	|  |         movea.l 148(sp),a0
    7ad8:	|  |         move.l 28(a0),d0
    7adc:	|  |         move.l 156(sp),-(sp)
    7ae0:	|  |         move.l d0,-(sp)
    7ae2:	|  |         jsr 8d0 <put2bytes>
    7ae8:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    7aea:	|  |         movea.l 148(sp),a0
    7aee:	|  |         move.l 32(a0),d0
    7af2:	|  |         move.l 156(sp),-(sp)
    7af6:	|  |         move.l d0,-(sp)
    7af8:	|  |         jsr 8d0 <put2bytes>
    7afe:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    7b00:	|  |         movea.l 148(sp),a0
    7b04:	|  |         move.l 36(a0),d0
    7b08:	|  |         move.l 156(sp),-(sp)
    7b0c:	|  |         move.l d0,-(sp)
    7b0e:	|  |         jsr 8d0 <put2bytes>
    7b14:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    7b16:	|  |         movea.l 148(sp),a0
    7b1a:	|  |         move.l 40(a0),d0
    7b1e:	|  |         move.l 156(sp),-(sp)
    7b22:	|  |         move.l d0,-(sp)
    7b24:	|  |         jsr 8d0 <put2bytes>
    7b2a:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    7b2c:	|  |         movea.l 148(sp),a0
    7b30:	|  |         move.l 72(a0),d0
    7b34:	|  |         move.l 156(sp),-(sp)
    7b38:	|  |         move.l d0,-(sp)
    7b3a:	|  |         jsr 8d0 <put2bytes>
    7b40:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    7b42:	|  |         movea.l 148(sp),a0
    7b46:	|  |         move.l 76(a0),d0
    7b4a:	|  |         move.l 156(sp),-(sp)
    7b4e:	|  |         move.l d0,-(sp)
    7b50:	|  |         jsr 8d0 <put2bytes>
    7b56:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    7b58:	|  |         movea.l 148(sp),a0
    7b5c:	|  |         move.l 16(a0),d0
    7b60:	|  |         move.l 156(sp),-(sp)
    7b64:	|  |         move.l d0,-(sp)
    7b66:	|  |         jsr 8d0 <put2bytes>
    7b6c:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    7b6e:	|  |         movea.l 148(sp),a0
    7b72:	|  |         move.l 110(a0),d0
    7b76:	|  |         move.l 156(sp),-(sp)
    7b7a:	|  |         move.l d0,-(sp)
    7b7c:	|  |         jsr 8d0 <put2bytes>
    7b82:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    7b84:	|  |         movea.l 148(sp),a0
    7b88:	|  |         move.l 12(a0),d0
    7b8c:	|  |         move.l d0,d0
    7b8e:	|  |         movea.w d0,a0
    7b90:	|  |         move.l 156(sp),-(sp)
    7b94:	|  |         move.l a0,-(sp)
    7b96:	|  |         jsr a9c <putSigned>
    7b9c:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    7b9e:	|  |         move.l 156(sp),124(sp)
    7ba4:	|  |         movea.l 148(sp),a0
    7ba8:	|  |         move.w 92(a0),d0
    7bac:	|  |         movea.w d0,a0
    7bae:	|  |         move.l a0,120(sp)
    7bb2:	|  |         move.l 19c62 <DOSBase>,d0
    7bb8:	|  |         movea.l d0,a6
    7bba:	|  |         move.l 124(sp),d1
    7bbe:	|  |         move.l 120(sp),d2
    7bc2:	|  |         jsr -312(a6)
    7bc6:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    7bca:	|  |         move.l 156(sp),112(sp)
    7bd0:	|  |         movea.l 148(sp),a0
    7bd4:	|  |         move.w 52(a0),d0
    7bd8:	|  |         movea.w d0,a0
    7bda:	|  |         move.l a0,108(sp)
    7bde:	|  |         move.l 19c62 <DOSBase>,d0
    7be4:	|  |         movea.l d0,a6
    7be6:	|  |         move.l 112(sp),d1
    7bea:	|  |         move.l 108(sp),d2
    7bee:	|  |         jsr -312(a6)
    7bf2:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    7bf6:	|  |         move.l 156(sp),100(sp)
    7bfc:	|  |         movea.l 148(sp),a0
    7c00:	|  |         move.w 54(a0),d0
    7c04:	|  |         movea.w d0,a0
    7c06:	|  |         move.l a0,96(sp)
    7c0a:	|  |         move.l 19c62 <DOSBase>,d0
    7c10:	|  |         movea.l d0,a6
    7c12:	|  |         move.l 100(sp),d1
    7c16:	|  |         move.l 96(sp),d2
    7c1a:	|  |         jsr -312(a6)
    7c1e:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    7c22:	|  |         movea.l 148(sp),a0
    7c26:	|  |         move.l 56(a0),d0
    7c2a:	|  |  /----- beq.s 7c68 <savePeople+0x2e2>
			FPutC (fp, 1);
    7c2c:	|  |  |      move.l 156(sp),76(sp)
    7c32:	|  |  |      moveq #1,d0
    7c34:	|  |  |      move.l d0,72(sp)
    7c38:	|  |  |      move.l 19c62 <DOSBase>,d0
    7c3e:	|  |  |      movea.l d0,a6
    7c40:	|  |  |      move.l 76(sp),d1
    7c44:	|  |  |      move.l 72(sp),d2
    7c48:	|  |  |      jsr -312(a6)
    7c4c:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    7c50:	|  |  |      movea.l 148(sp),a0
    7c54:	|  |  |      move.l 56(a0),d0
    7c58:	|  |  |      move.l 156(sp),-(sp)
    7c5c:	|  |  |      move.l d0,-(sp)
    7c5e:	|  |  |      jsr 8df6 <saveFunction>
    7c64:	|  |  |      addq.l #8,sp
    7c66:	|  |  |  /-- bra.s 7c8c <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    7c68:	|  |  \--|-> move.l 156(sp),88(sp)
    7c6e:	|  |     |   moveq #1,d0
    7c70:	|  |     |   move.l d0,84(sp)
    7c74:	|  |     |   move.l 19c62 <DOSBase>,d0
    7c7a:	|  |     |   movea.l d0,a6
    7c7c:	|  |     |   move.l 88(sp),d1
    7c80:	|  |     |   move.l 84(sp),d2
    7c84:	|  |     |   jsr -312(a6)
    7c88:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    7c8c:	|  |     \-> movea.l 148(sp),a0
    7c90:	|  |         move.l 94(a0),d0
    7c94:	|  |         move.l 156(sp),-(sp)
    7c98:	|  |         move.l d0,-(sp)
    7c9a:	|  |         jsr 8d0 <put2bytes>
    7ca0:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    7ca2:	|  |         movea.l 148(sp),a0
    7ca6:	|  |         move.l 80(a0),d0
    7caa:	|  |         move.l 156(sp),-(sp)
    7cae:	|  |         move.l d0,-(sp)
    7cb0:	|  |         jsr 8d0 <put2bytes>
    7cb6:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    7cb8:	|  |         movea.l 148(sp),a0
    7cbc:	|  |         move.l 88(a0),d0
    7cc0:	|  |         move.l 156(sp),-(sp)
    7cc4:	|  |         move.l d0,-(sp)
    7cc6:	|  |         jsr 8d0 <put2bytes>
    7ccc:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    7cce:	|  |         movea.l 148(sp),a0
    7cd2:	|  |         move.l 84(a0),d0
    7cd6:	|  |         move.l 156(sp),-(sp)
    7cda:	|  |         move.l d0,-(sp)
    7cdc:	|  |         jsr 8d0 <put2bytes>
    7ce2:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    7ce4:	|  |         movea.l 148(sp),a0
    7ce8:	|  |         move.l 98(a0),d0
    7cec:	|  |         move.l d0,d0
    7cee:	|  |         movea.w d0,a0
    7cf0:	|  |         move.l 156(sp),-(sp)
    7cf4:	|  |         move.l a0,-(sp)
    7cf6:	|  |         jsr a9c <putSigned>
    7cfc:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    7cfe:	|  |         movea.l 148(sp),a0
    7d02:	|  |         move.l 44(a0),d0
    7d06:	|  |         move.l d0,d0
    7d08:	|  |         movea.w d0,a0
    7d0a:	|  |         move.l 156(sp),-(sp)
    7d0e:	|  |         move.l a0,-(sp)
    7d10:	|  |         jsr a9c <putSigned>
    7d16:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    7d18:	|  |         movea.l 148(sp),a0
    7d1c:	|  |         move.l 48(a0),d0
    7d20:	|  |         move.l d0,d0
    7d22:	|  |         movea.w d0,a0
    7d24:	|  |         move.l 156(sp),-(sp)
    7d28:	|  |         move.l a0,-(sp)
    7d2a:	|  |         jsr a9c <putSigned>
    7d30:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    7d32:	|  |         move.l 156(sp),64(sp)
    7d38:	|  |         movea.l 148(sp),a0
    7d3c:	|  |         move.b 114(a0),d0
    7d40:	|  |         move.b d0,d0
    7d42:	|  |         andi.l #255,d0
    7d48:	|  |         move.l d0,60(sp)
    7d4c:	|  |         move.l 19c62 <DOSBase>,d0
    7d52:	|  |         movea.l d0,a6
    7d54:	|  |         move.l 64(sp),d1
    7d58:	|  |         move.l 60(sp),d2
    7d5c:	|  |         jsr -312(a6)
    7d60:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    7d64:	|  |         move.l 156(sp),52(sp)
    7d6a:	|  |         movea.l 148(sp),a0
    7d6e:	|  |         move.b 115(a0),d0
    7d72:	|  |         move.b d0,d0
    7d74:	|  |         andi.l #255,d0
    7d7a:	|  |         move.l d0,48(sp)
    7d7e:	|  |         move.l 19c62 <DOSBase>,d0
    7d84:	|  |         movea.l d0,a6
    7d86:	|  |         move.l 52(sp),d1
    7d8a:	|  |         move.l 48(sp),d2
    7d8e:	|  |         jsr -312(a6)
    7d92:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    7d96:	|  |         move.l 156(sp),40(sp)
    7d9c:	|  |         movea.l 148(sp),a0
    7da0:	|  |         move.b 116(a0),d0
    7da4:	|  |         move.b d0,d0
    7da6:	|  |         andi.l #255,d0
    7dac:	|  |         move.l d0,36(sp)
    7db0:	|  |         move.l 19c62 <DOSBase>,d0
    7db6:	|  |         movea.l d0,a6
    7db8:	|  |         move.l 40(sp),d1
    7dbc:	|  |         move.l 36(sp),d2
    7dc0:	|  |         jsr -312(a6)
    7dc4:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    7dc8:	|  |         move.l 156(sp),28(sp)
    7dce:	|  |         movea.l 148(sp),a0
    7dd2:	|  |         move.b 117(a0),d0
    7dd6:	|  |         move.b d0,d0
    7dd8:	|  |         andi.l #255,d0
    7dde:	|  |         move.l d0,24(sp)
    7de2:	|  |         move.l 19c62 <DOSBase>,d0
    7de8:	|  |         movea.l d0,a6
    7dea:	|  |         move.l 28(sp),d1
    7dee:	|  |         move.l 24(sp),d2
    7df2:	|  |         jsr -312(a6)
    7df6:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    7dfa:	|  |         move.l 156(sp),16(sp)
    7e00:	|  |         movea.l 148(sp),a0
    7e04:	|  |         move.b 118(a0),d0
    7e08:	|  |         move.b d0,d0
    7e0a:	|  |         andi.l #255,d0
    7e10:	|  |         move.l d0,12(sp)
    7e14:	|  |         move.l 19c62 <DOSBase>,d0
    7e1a:	|  |         movea.l d0,a6
    7e1c:	|  |         move.l 16(sp),d1
    7e20:	|  |         move.l 12(sp),d2
    7e24:	|  |         jsr -312(a6)
    7e28:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    7e2c:	|  |         movea.l 148(sp),a0
    7e30:	|  |         move.l 102(a0),d0
    7e34:	|  |         move.l 156(sp),-(sp)
    7e38:	|  |         move.l d0,-(sp)
    7e3a:	|  |         jsr a04e <saveObjectRef>
    7e40:	|  |         addq.l #8,sp

		me = me -> next;
    7e42:	|  |         movea.l 148(sp),a0
    7e46:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    7e4c:	|  |         addq.l #1,140(sp)
    7e50:	|  \-------> movea.l 140(sp),a0
    7e54:	|            cmpa.l 144(sp),a0
    7e58:	\----------- blt.w 79fc <savePeople+0x76>
	}
	return TRUE;
    7e5c:	             moveq #1,d0
}
    7e5e:	             move.l (sp)+,d2
    7e60:	             movea.l (sp)+,a6
    7e62:	             lea 144(sp),sp
    7e66:	             rts

00007e68 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    7e68:	movea.l 4(sp),a0
    7e6c:	move.l 8(sp),(a0)
}
    7e70:	nop
    7e72:	rts

00007e74 <setDrawMode>:


void setDrawMode (int h, int ob) {
    7e74:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    7e76:	       move.l 12(sp),-(sp)
    7e7a:	       jsr 6f46 <findPerson>
    7e80:	       addq.l #4,sp
    7e82:	       move.l d0,(sp)
	if (! moveMe) return;
    7e84:	/----- beq.s 7e98 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    7e86:	|      move.l 8(sp),-(sp)
    7e8a:	|      move.l 4(sp),-(sp)
    7e8e:	|      jsr 7e9e <setMyDrawMode>
    7e94:	|      addq.l #8,sp
    7e96:	|  /-- bra.s 7e9a <setDrawMode+0x26>
	if (! moveMe) return;
    7e98:	\--|-> nop
}
    7e9a:	   \-> addq.l #4,sp
    7e9c:	       rts

00007e9e <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    7e9e:	       moveq #19,d0
    7ea0:	       cmp.l 8(sp),d0
    7ea4:	/----- bcs.w 837c <setMyDrawMode+0x4de>
    7ea8:	|      move.l 8(sp),d0
    7eac:	|      add.l d0,d0
    7eae:	|      movea.l d0,a0
    7eb0:	|      adda.l #32444,a0
    7eb6:	|      move.w (a0),d0
    7eb8:	|      jmp (7ebc <setMyDrawMode+0x1e>,pc,d0.w)
    7ebc:	|      .short 0x04c0
    7ebe:	|      ori.l #6684712,-(a4)
    7ec4:	|      btst d0,-(a0)
    7ec6:	|      bchg d0,(a6)+
    7ec8:	|      bclr d0,(a4)+
    7eca:	|      bset d0,(a2)+
    7ecc:	|      andi.b #84,(a6)
    7ed0:	|      andi.l #55575312,(a2)
    7ed6:	|      .short 0x02d0
    7ed8:	|      bclr d1,(a0)
    7eda:	|      .short 0x044a
    7edc:	|      .short 0x040c
    7ede:	|      movep.l d1,1158(a6)
    7ee2:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7ee4:	|      movea.l 4(sp),a0
    7ee8:	|      clr.b 116(a0)
    7eec:	|      movea.l 4(sp),a0
    7ef0:	|      move.b 116(a0),d0
    7ef4:	|      movea.l 4(sp),a0
    7ef8:	|      move.b d0,115(a0)
    7efc:	|      movea.l 4(sp),a0
    7f00:	|      move.b 115(a0),d0
    7f04:	|      movea.l 4(sp),a0
    7f08:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    7f0c:	|      movea.l 4(sp),a0
    7f10:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    7f14:	|      movea.l 4(sp),a0
    7f18:	|      move.b #64,118(a0)
			break;
    7f1e:	|  /-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7f22:	|  |   movea.l 4(sp),a0
    7f26:	|  |   clr.b 116(a0)
    7f2a:	|  |   movea.l 4(sp),a0
    7f2e:	|  |   move.b 116(a0),d0
    7f32:	|  |   movea.l 4(sp),a0
    7f36:	|  |   move.b d0,115(a0)
    7f3a:	|  |   movea.l 4(sp),a0
    7f3e:	|  |   move.b 115(a0),d0
    7f42:	|  |   movea.l 4(sp),a0
    7f46:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7f4a:	|  |   movea.l 4(sp),a0
    7f4e:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    7f52:	|  |   movea.l 4(sp),a0
    7f56:	|  |   move.b #-128,118(a0)
			break;
    7f5c:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7f60:	|  |   movea.l 4(sp),a0
    7f64:	|  |   clr.b 116(a0)
    7f68:	|  |   movea.l 4(sp),a0
    7f6c:	|  |   move.b 116(a0),d0
    7f70:	|  |   movea.l 4(sp),a0
    7f74:	|  |   move.b d0,115(a0)
    7f78:	|  |   movea.l 4(sp),a0
    7f7c:	|  |   move.b 115(a0),d0
    7f80:	|  |   movea.l 4(sp),a0
    7f84:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7f88:	|  |   movea.l 4(sp),a0
    7f8c:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    7f90:	|  |   movea.l 4(sp),a0
    7f94:	|  |   move.b #-64,118(a0)
			break;
    7f9a:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7f9e:	|  |   movea.l 4(sp),a0
    7fa2:	|  |   clr.b 116(a0)
    7fa6:	|  |   movea.l 4(sp),a0
    7faa:	|  |   move.b 116(a0),d0
    7fae:	|  |   movea.l 4(sp),a0
    7fb2:	|  |   move.b d0,115(a0)
    7fb6:	|  |   movea.l 4(sp),a0
    7fba:	|  |   move.b 115(a0),d0
    7fbe:	|  |   movea.l 4(sp),a0
    7fc2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7fc6:	|  |   movea.l 4(sp),a0
    7fca:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    7fce:	|  |   movea.l 4(sp),a0
    7fd2:	|  |   move.b #-2,118(a0)
			break;
    7fd8:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7fdc:	|  |   movea.l 4(sp),a0
    7fe0:	|  |   clr.b 116(a0)
    7fe4:	|  |   movea.l 4(sp),a0
    7fe8:	|  |   move.b 116(a0),d0
    7fec:	|  |   movea.l 4(sp),a0
    7ff0:	|  |   move.b d0,115(a0)
    7ff4:	|  |   movea.l 4(sp),a0
    7ff8:	|  |   move.b 115(a0),d0
    7ffc:	|  |   movea.l 4(sp),a0
    8000:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    8004:	|  |   movea.l 4(sp),a0
    8008:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    800e:	|  |   movea.l 4(sp),a0
    8012:	|  |   clr.b 118(a0)
			break;
    8016:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    801a:	|  |   movea.l 4(sp),a0
    801e:	|  |   clr.b 116(a0)
    8022:	|  |   movea.l 4(sp),a0
    8026:	|  |   move.b 116(a0),d0
    802a:	|  |   movea.l 4(sp),a0
    802e:	|  |   move.b d0,115(a0)
    8032:	|  |   movea.l 4(sp),a0
    8036:	|  |   move.b 115(a0),d0
    803a:	|  |   movea.l 4(sp),a0
    803e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    8042:	|  |   movea.l 4(sp),a0
    8046:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    804c:	|  |   movea.l 4(sp),a0
    8050:	|  |   clr.b 118(a0)
			break;
    8054:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8058:	|  |   movea.l 4(sp),a0
    805c:	|  |   clr.b 116(a0)
    8060:	|  |   movea.l 4(sp),a0
    8064:	|  |   move.b 116(a0),d0
    8068:	|  |   movea.l 4(sp),a0
    806c:	|  |   move.b d0,115(a0)
    8070:	|  |   movea.l 4(sp),a0
    8074:	|  |   move.b 115(a0),d0
    8078:	|  |   movea.l 4(sp),a0
    807c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    8080:	|  |   movea.l 4(sp),a0
    8084:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    808a:	|  |   movea.l 4(sp),a0
    808e:	|  |   clr.b 118(a0)
			break;
    8092:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8096:	|  |   movea.l 4(sp),a0
    809a:	|  |   clr.b 116(a0)
    809e:	|  |   movea.l 4(sp),a0
    80a2:	|  |   move.b 116(a0),d0
    80a6:	|  |   movea.l 4(sp),a0
    80aa:	|  |   move.b d0,115(a0)
    80ae:	|  |   movea.l 4(sp),a0
    80b2:	|  |   move.b 115(a0),d0
    80b6:	|  |   movea.l 4(sp),a0
    80ba:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    80be:	|  |   movea.l 4(sp),a0
    80c2:	|  |   st 117(a0)
			moveMe->transparency = 0;
    80c6:	|  |   movea.l 4(sp),a0
    80ca:	|  |   clr.b 118(a0)
			break;
    80ce:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    80d2:	|  |   movea.l 4(sp),a0
    80d6:	|  |   clr.b 116(a0)
    80da:	|  |   movea.l 4(sp),a0
    80de:	|  |   move.b 116(a0),d0
    80e2:	|  |   movea.l 4(sp),a0
    80e6:	|  |   move.b d0,115(a0)
    80ea:	|  |   movea.l 4(sp),a0
    80ee:	|  |   move.b 115(a0),d0
    80f2:	|  |   movea.l 4(sp),a0
    80f6:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    80fa:	|  |   movea.l 4(sp),a0
    80fe:	|  |   st 117(a0)
			moveMe->transparency = 64;
    8102:	|  |   movea.l 4(sp),a0
    8106:	|  |   move.b #64,118(a0)
			break;
    810c:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    8110:	|  |   movea.l 4(sp),a0
    8114:	|  |   clr.b 116(a0)
    8118:	|  |   movea.l 4(sp),a0
    811c:	|  |   move.b 116(a0),d0
    8120:	|  |   movea.l 4(sp),a0
    8124:	|  |   move.b d0,115(a0)
    8128:	|  |   movea.l 4(sp),a0
    812c:	|  |   move.b 115(a0),d0
    8130:	|  |   movea.l 4(sp),a0
    8134:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8138:	|  |   movea.l 4(sp),a0
    813c:	|  |   st 117(a0)
			moveMe->transparency = 128;
    8140:	|  |   movea.l 4(sp),a0
    8144:	|  |   move.b #-128,118(a0)
			break;
    814a:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    814e:	|  |   movea.l 4(sp),a0
    8152:	|  |   clr.b 116(a0)
    8156:	|  |   movea.l 4(sp),a0
    815a:	|  |   move.b 116(a0),d0
    815e:	|  |   movea.l 4(sp),a0
    8162:	|  |   move.b d0,115(a0)
    8166:	|  |   movea.l 4(sp),a0
    816a:	|  |   move.b 115(a0),d0
    816e:	|  |   movea.l 4(sp),a0
    8172:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8176:	|  |   movea.l 4(sp),a0
    817a:	|  |   st 117(a0)
			moveMe->transparency = 192;
    817e:	|  |   movea.l 4(sp),a0
    8182:	|  |   move.b #-64,118(a0)
			break;
    8188:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    818c:	|  |   movea.l 4(sp),a0
    8190:	|  |   move.b #-128,116(a0)
    8196:	|  |   movea.l 4(sp),a0
    819a:	|  |   move.b 116(a0),d0
    819e:	|  |   movea.l 4(sp),a0
    81a2:	|  |   move.b d0,115(a0)
    81a6:	|  |   movea.l 4(sp),a0
    81aa:	|  |   move.b 115(a0),d0
    81ae:	|  |   movea.l 4(sp),a0
    81b2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    81b6:	|  |   movea.l 4(sp),a0
    81ba:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    81c0:	|  |   movea.l 4(sp),a0
    81c4:	|  |   clr.b 118(a0)
			break;
    81c8:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    81cc:	|  |   movea.l 4(sp),a0
    81d0:	|  |   move.b #-128,116(a0)
    81d6:	|  |   movea.l 4(sp),a0
    81da:	|  |   move.b 116(a0),d0
    81de:	|  |   movea.l 4(sp),a0
    81e2:	|  |   move.b d0,115(a0)
    81e6:	|  |   movea.l 4(sp),a0
    81ea:	|  |   move.b 115(a0),d0
    81ee:	|  |   movea.l 4(sp),a0
    81f2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    81f6:	|  |   movea.l 4(sp),a0
    81fa:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    8200:	|  |   movea.l 4(sp),a0
    8204:	|  |   clr.b 118(a0)
			break;
    8208:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    820c:	|  |   movea.l 4(sp),a0
    8210:	|  |   move.b #-128,116(a0)
    8216:	|  |   movea.l 4(sp),a0
    821a:	|  |   move.b 116(a0),d0
    821e:	|  |   movea.l 4(sp),a0
    8222:	|  |   move.b d0,115(a0)
    8226:	|  |   movea.l 4(sp),a0
    822a:	|  |   move.b 115(a0),d0
    822e:	|  |   movea.l 4(sp),a0
    8232:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    8236:	|  |   movea.l 4(sp),a0
    823a:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    8240:	|  |   movea.l 4(sp),a0
    8244:	|  |   clr.b 118(a0)
			break;
    8248:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    824c:	|  |   movea.l 4(sp),a0
    8250:	|  |   move.b #-128,116(a0)
    8256:	|  |   movea.l 4(sp),a0
    825a:	|  |   move.b 116(a0),d0
    825e:	|  |   movea.l 4(sp),a0
    8262:	|  |   move.b d0,115(a0)
    8266:	|  |   movea.l 4(sp),a0
    826a:	|  |   move.b 115(a0),d0
    826e:	|  |   movea.l 4(sp),a0
    8272:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8276:	|  |   movea.l 4(sp),a0
    827a:	|  |   st 117(a0)
			moveMe->transparency = 0;
    827e:	|  |   movea.l 4(sp),a0
    8282:	|  |   clr.b 118(a0)
			break;
    8286:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    828a:	|  |   movea.l 4(sp),a0
    828e:	|  |   st 116(a0)
    8292:	|  |   movea.l 4(sp),a0
    8296:	|  |   move.b 116(a0),d0
    829a:	|  |   movea.l 4(sp),a0
    829e:	|  |   move.b d0,115(a0)
    82a2:	|  |   movea.l 4(sp),a0
    82a6:	|  |   move.b 115(a0),d0
    82aa:	|  |   movea.l 4(sp),a0
    82ae:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    82b2:	|  |   movea.l 4(sp),a0
    82b6:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    82bc:	|  |   movea.l 4(sp),a0
    82c0:	|  |   clr.b 118(a0)
			break;
    82c4:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    82c8:	|  |   movea.l 4(sp),a0
    82cc:	|  |   st 116(a0)
    82d0:	|  |   movea.l 4(sp),a0
    82d4:	|  |   move.b 116(a0),d0
    82d8:	|  |   movea.l 4(sp),a0
    82dc:	|  |   move.b d0,115(a0)
    82e0:	|  |   movea.l 4(sp),a0
    82e4:	|  |   move.b 115(a0),d0
    82e8:	|  |   movea.l 4(sp),a0
    82ec:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    82f0:	|  |   movea.l 4(sp),a0
    82f4:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    82fa:	|  |   movea.l 4(sp),a0
    82fe:	|  |   clr.b 118(a0)
			break;
    8302:	|  +-- bra.w 83b6 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    8306:	|  |   movea.l 4(sp),a0
    830a:	|  |   st 116(a0)
    830e:	|  |   movea.l 4(sp),a0
    8312:	|  |   move.b 116(a0),d0
    8316:	|  |   movea.l 4(sp),a0
    831a:	|  |   move.b d0,115(a0)
    831e:	|  |   movea.l 4(sp),a0
    8322:	|  |   move.b 115(a0),d0
    8326:	|  |   movea.l 4(sp),a0
    832a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    832e:	|  |   movea.l 4(sp),a0
    8332:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    8338:	|  |   movea.l 4(sp),a0
    833c:	|  |   clr.b 118(a0)
			break;
    8340:	|  +-- bra.s 83b6 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    8342:	|  |   movea.l 4(sp),a0
    8346:	|  |   st 116(a0)
    834a:	|  |   movea.l 4(sp),a0
    834e:	|  |   move.b 116(a0),d0
    8352:	|  |   movea.l 4(sp),a0
    8356:	|  |   move.b d0,115(a0)
    835a:	|  |   movea.l 4(sp),a0
    835e:	|  |   move.b 115(a0),d0
    8362:	|  |   movea.l 4(sp),a0
    8366:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    836a:	|  |   movea.l 4(sp),a0
    836e:	|  |   st 117(a0)
			moveMe->transparency = 0;
    8372:	|  |   movea.l 4(sp),a0
    8376:	|  |   clr.b 118(a0)
			break;
    837a:	|  +-- bra.s 83b6 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    837c:	\--|-> movea.l 4(sp),a0
    8380:	   |   clr.b 116(a0)
    8384:	   |   movea.l 4(sp),a0
    8388:	   |   move.b 116(a0),d0
    838c:	   |   movea.l 4(sp),a0
    8390:	   |   move.b d0,115(a0)
    8394:	   |   movea.l 4(sp),a0
    8398:	   |   move.b 115(a0),d0
    839c:	   |   movea.l 4(sp),a0
    83a0:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    83a4:	   |   movea.l 4(sp),a0
    83a8:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    83ac:	   |   movea.l 4(sp),a0
    83b0:	   |   clr.b 118(a0)
			break;
    83b4:	   |   nop
	}
}
    83b6:	   \-> nop
    83b8:	       rts

000083ba <setCharacterWalkSpeed>:



BOOL setCharacterWalkSpeed (int f, int objNum) {
    83ba:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    83bc:	       tst.l 8(sp)
    83c0:	   /-- bgt.s 83c6 <setCharacterWalkSpeed+0xc>
    83c2:	   |   clr.w d0
    83c4:	/--|-- bra.s 83e4 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    83c6:	|  \-> move.l 12(sp),-(sp)
    83ca:	|      jsr 6f46 <findPerson>
    83d0:	|      addq.l #4,sp
    83d2:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    83d4:	|  /-- bne.s 83da <setCharacterWalkSpeed+0x20>
    83d6:	|  |   clr.w d0
    83d8:	+--|-- bra.s 83e4 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    83da:	|  \-> movea.l (sp),a0
    83dc:	|      move.l 8(sp),16(a0)
	return TRUE;
    83e2:	|      moveq #1,d0
}
    83e4:	\----> addq.l #4,sp
    83e6:	       rts

000083e8 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    83e8:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    83ea:	       move.l 8(sp),-(sp)
    83ee:	       jsr 6f46 <findPerson>
    83f4:	       addq.l #4,sp
    83f6:	       move.l d0,(sp)
    if (thisPerson) {
    83f8:	/----- beq.s 8418 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    83fa:	|      movea.l (sp),a0
    83fc:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    8402:	|      moveq #2,d0
    8404:	|      and.l 12(sp),d0
    8408:	|  /-- beq.s 8414 <setPersonExtra+0x2c>
    840a:	|  |   movea.l (sp),a0
    840c:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    8414:	|  \-> moveq #1,d0
    8416:	|  /-- bra.s 841a <setPersonExtra+0x32>
    }
    return FALSE;
    8418:	\--|-> clr.w d0
}
    841a:	   \-> addq.l #4,sp
    841c:	       rts

0000841e <setScale>:


void setScale (short int h, short int d) {
    841e:	subq.l #4,sp
    8420:	move.l 8(sp),d1
    8424:	move.l 12(sp),d0
    8428:	move.w d1,d1
    842a:	move.w d1,2(sp)
    842e:	move.w d0,d0
    8430:	move.w d0,(sp)
	scaleHorizon = h;
    8432:	move.w 2(sp),1813e <scaleHorizon>
	scaleDivide = d;
    843a:	move.w (sp),18140 <scaleDivide>
}
    8440:	nop
    8442:	addq.l #4,sp
    8444:	rts

00008446 <setShown>:

void setShown (BOOL h, int ob) {
    8446:	    subq.l #8,sp
    8448:	    move.l 12(sp),d0
    844c:	    move.w d0,d0
    844e:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    8452:	    move.l 16(sp),-(sp)
    8456:	    jsr 6f46 <findPerson>
    845c:	    addq.l #4,sp
    845e:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    8462:	/-- beq.s 846e <setShown+0x28>
    8464:	|   movea.l 4(sp),a0
    8468:	|   move.w 2(sp),92(a0)
}
    846e:	\-> nop
    8470:	    addq.l #8,sp
    8472:	    rts

00008474 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    8474:	       subq.l #8,sp
    8476:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    8478:	       movea.l 16(sp),a0
    847c:	       move.l 80(a0),d0
    8480:	       move.l d0,d1
    8482:	       addi.l #360,d1
    8488:	       movea.l 16(sp),a0
    848c:	       move.l 84(a0),d0
    8490:	       move.l d1,d2
    8492:	       sub.l d0,d2
    8494:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    8498:	       movea.l 16(sp),a0
    849c:	       move.l 110(a0),d0
    84a0:	   /-- beq.s 84ac <spinStep+0x38>
    84a2:	   |   movea.l 16(sp),a0
    84a6:	   |   move.l 110(a0),d0
    84aa:	/--|-- bra.s 84c6 <spinStep+0x52>
    84ac:	|  \-> movea.l 16(sp),a0
    84b0:	|      movea.l 68(a0),a0
    84b4:	|      move.l 4(a0),d0
    84b8:	|      move.l d0,-(sp)
    84ba:	|      pea 168 <decodeFilename+0x50>
    84be:	|      jsr 1397c <__divsi3>
    84c4:	|      addq.l #8,sp
    84c6:	\----> move.l d0,4(sp)
	while (diff > 180) {
    84ca:	   /-- bra.s 84d4 <spinStep+0x60>
		diff -= 360;
    84cc:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    84d4:	|  \-> cmpi.l #180,8(sp)
    84dc:	\----- bgt.s 84cc <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    84de:	       move.l 8(sp),d0
    84e2:	       cmp.l 4(sp),d0
    84e6:	   /-- blt.s 8504 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    84e8:	   |   movea.l 16(sp),a0
    84ec:	   |   move.l 80(a0),d0
    84f0:	   |   sub.l 4(sp),d0
    84f4:	   |   move.l d0,-(sp)
    84f6:	   |   move.l 20(sp),-(sp)
    84fa:	   |   jsr 85e4 <turnMeAngle>
    8500:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    8502:	/--|-- bra.s 854a <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    8504:	|  \-> move.l 4(sp),d0
    8508:	|      neg.l d0
    850a:	|      cmp.l 8(sp),d0
    850e:	|  /-- blt.s 852c <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    8510:	|  |   movea.l 16(sp),a0
    8514:	|  |   move.l 80(a0),d0
    8518:	|  |   add.l 4(sp),d0
    851c:	|  |   move.l d0,-(sp)
    851e:	|  |   move.l 20(sp),-(sp)
    8522:	|  |   jsr 85e4 <turnMeAngle>
    8528:	|  |   addq.l #8,sp
}
    852a:	+--|-- bra.s 854a <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    852c:	|  \-> movea.l 16(sp),a0
    8530:	|      move.l 84(a0),d0
    8534:	|      move.l d0,-(sp)
    8536:	|      move.l 20(sp),-(sp)
    853a:	|      jsr 85e4 <turnMeAngle>
    8540:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    8542:	|      movea.l 16(sp),a0
    8546:	|      clr.w 54(a0)
}
    854a:	\----> nop
    854c:	       move.l (sp)+,d2
    854e:	       addq.l #8,sp
    8550:	       rts

00008552 <stopPerson>:


BOOL stopPerson (int o) {
    8552:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    8554:	       move.l 8(sp),-(sp)
    8558:	       jsr 6f46 <findPerson>
    855e:	       addq.l #4,sp
    8560:	       move.l d0,(sp)
    if (moveMe)
    8562:	/----- beq.s 85a0 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    8564:	|      movea.l (sp),a0
    8566:	|      move.l 56(a0),d0
    856a:	+----- beq.s 85a0 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    856c:	|      movea.l (sp),a0
    856e:	|      move.l 56(a0),d0
    8572:	|      move.l d0,-(sp)
    8574:	|      jsr 243a <abortFunction>
    857a:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    857c:	|      movea.l (sp),a0
    857e:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    8582:	|      movea.l (sp),a0
    8584:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    8588:	|      movea.l (sp),a0
    858a:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    858e:	|      clr.l -(sp)
    8590:	|      move.l 4(sp),-(sp)
    8594:	|      jsr 5b94 <setFrames>
    859a:	|      addq.l #8,sp
            return TRUE;
    859c:	|      moveq #1,d0
    859e:	|  /-- bra.s 85a2 <stopPerson+0x50>
        }
    return FALSE;
    85a0:	\--|-> clr.w d0
}
    85a2:	   \-> addq.l #4,sp
    85a4:	       rts

000085a6 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    85a6:	       subq.l #8,sp
	int total = 0;
    85a8:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    85ac:	       clr.l (sp)
    85ae:	   /-- bra.s 85d0 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    85b0:	/--|-> movea.l 12(sp),a0
    85b4:	|  |   movea.l 4(a0),a0
    85b8:	|  |   move.l (sp),d1
    85ba:	|  |   move.l d1,d0
    85bc:	|  |   add.l d0,d0
    85be:	|  |   add.l d1,d0
    85c0:	|  |   add.l d0,d0
    85c2:	|  |   add.l d0,d0
    85c4:	|  |   adda.l d0,a0
    85c6:	|  |   move.l 4(a0),d0
    85ca:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    85ce:	|  |   addq.l #1,(sp)
    85d0:	|  \-> movea.l 12(sp),a0
    85d4:	|      move.l 8(a0),d0
    85d8:	|      cmp.l (sp),d0
    85da:	\----- bgt.s 85b0 <timeForAnim+0xa>
	}
	return total;
    85dc:	       move.l 4(sp),d0
}
    85e0:	       addq.l #8,sp
    85e2:	       rts

000085e4 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    85e4:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    85e6:	       movea.l 8(sp),a0
    85ea:	       movea.l 68(a0),a0
    85ee:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    85f2:	       movea.l 8(sp),a0
    85f6:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    85fc:	       move.l (sp),-(sp)
    85fe:	       pea b4 <_start+0xb4>
    8602:	       jsr 1397c <__divsi3>
    8608:	       addq.l #8,sp
    860a:	       move.l d0,d1
    860c:	       addi.l #180,d1
    8612:	       movea.l 8(sp),a0
    8616:	       move.l 88(a0),d0
    861a:	       add.l d1,d0
    861c:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    8620:	   /-- bra.s 862a <turnMeAngle+0x46>
    8622:	/--|-> addi.l #-360,12(sp)
    862a:	|  \-> cmpi.l #359,12(sp)
    8632:	\----- bgt.s 8622 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    8634:	       move.l (sp),-(sp)
    8636:	       move.l 16(sp),-(sp)
    863a:	       jsr 138fe <__mulsi3>
    8640:	       addq.l #8,sp
    8642:	       pea 168 <decodeFilename+0x50>
    8646:	       move.l d0,-(sp)
    8648:	       jsr 1397c <__divsi3>
    864e:	       addq.l #8,sp
    8650:	       movea.l 8(sp),a0
    8654:	       move.l d0,94(a0)
}
    8658:	       nop
    865a:	       addq.l #4,sp
    865c:	       rts

0000865e <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    865e:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    8660:	          move.l 8(sp),-(sp)
    8664:	          jsr 6f46 <findPerson>
    866a:	          addq.l #4,sp
    866c:	          move.l d0,(sp)
    if (thisPerson) {
    866e:	/-------- beq.s 86ce <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    8670:	|         movea.l (sp),a0
    8672:	|         move.l 56(a0),d0
    8676:	|     /-- beq.s 8688 <turnPersonToFace+0x2a>
    8678:	|     |   movea.l (sp),a0
    867a:	|     |   move.l 56(a0),d0
    867e:	|     |   move.l d0,-(sp)
    8680:	|     |   jsr 243a <abortFunction>
    8686:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    8688:	|     \-> movea.l (sp),a0
    868a:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    868e:	|         movea.l (sp),a0
    8690:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    8694:	|         movea.l (sp),a0
    8696:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    869a:	|         move.l 12(sp),-(sp)
    869e:	|         move.l 4(sp),-(sp)
    86a2:	|         jsr 85e4 <turnMeAngle>
    86a8:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    86aa:	|         movea.l 19cb6 <speech>,a0
    86b0:	|         move.l (a0),d0
    86b2:	|         cmp.l (sp),d0
    86b4:	|  /----- bne.s 86ba <turnPersonToFace+0x5c>
    86b6:	|  |      moveq #2,d0
    86b8:	|  |  /-- bra.s 86bc <turnPersonToFace+0x5e>
    86ba:	|  \--|-> moveq #0,d0
    86bc:	|     \-> move.l d0,-(sp)
    86be:	|         move.l 4(sp),-(sp)
    86c2:	|         jsr 5b94 <setFrames>
    86c8:	|         addq.l #8,sp
        return TRUE;
    86ca:	|         moveq #1,d0
    86cc:	|     /-- bra.s 86d0 <turnPersonToFace+0x72>
    }
    return FALSE;
    86ce:	\-----|-> clr.w d0
}
    86d0:	      \-> addq.l #4,sp
    86d2:	          rts

000086d4 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    86d4:	                lea -20(sp),sp
    86d8:	                move.l d3,-(sp)
    86da:	                move.l d2,-(sp)
    86dc:	                move.l 36(sp),d0
    86e0:	                move.w d0,d0
    86e2:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    86e6:	                cmpi.w #-1,10(sp)
    86ec:	/-------------- bne.s 86f4 <walkMe+0x20>
    86ee:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    86f4:	>-------------> movea.l 32(sp),a0
    86f8:	|               move.l 36(a0),d0
    86fc:	|               move.l d0,-(sp)
    86fe:	|               jsr 133a4 <__floatsisf>
    8704:	|               addq.l #4,sp
    8706:	|               move.l d0,d1
    8708:	|               movea.l 32(sp),a0
    870c:	|               move.l (a0),d0
    870e:	|               move.l d0,-(sp)
    8710:	|               move.l d1,-(sp)
    8712:	|               jsr 13698 <__subsf3>
    8718:	|               addq.l #8,sp
    871a:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    871e:	|               movea.l 32(sp),a0
    8722:	|               move.l 40(a0),d0
    8726:	|               move.l d0,-(sp)
    8728:	|               jsr 133a4 <__floatsisf>
    872e:	|               addq.l #4,sp
    8730:	|               move.l d0,d1
    8732:	|               movea.l 32(sp),a0
    8736:	|               move.l 4(a0),d0
    873a:	|               move.l d0,-(sp)
    873c:	|               move.l d1,-(sp)
    873e:	|               jsr 13698 <__subsf3>
    8744:	|               addq.l #8,sp
    8746:	|               move.l d0,-(sp)
    8748:	|               move.l d0,-(sp)
    874a:	|               jsr 13156 <__addsf3>
    8750:	|               addq.l #8,sp
    8752:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    8756:	|               movea.l 32(sp),a0
    875a:	|               move.l 20(a0),d2
    875e:	|               movea.l 32(sp),a0
    8762:	|               move.l 16(a0),d0
    8766:	|               move.l d0,-(sp)
    8768:	|               jsr 133a4 <__floatsisf>
    876e:	|               addq.l #4,sp
    8770:	|               move.l d0,-(sp)
    8772:	|               move.l d2,-(sp)
    8774:	|               jsr 13456 <__mulsf3>
    877a:	|               addq.l #8,sp
    877c:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    8780:	|               move.l 24(sp),-(sp)
    8784:	|               jsr 132bc <__extendsfdf2>
    878a:	|               addq.l #4,sp
    878c:	|               move.l #-1717986918,-(sp)
    8792:	|               move.l #1070176665,-(sp)
    8798:	|               move.l d1,-(sp)
    879a:	|               move.l d0,-(sp)
    879c:	|               jsr 1357c <__ltdf2>
    87a2:	|               lea 16(sp),sp
    87a6:	|               tst.l d0
    87a8:	|           /-- bge.s 87b2 <walkMe+0xde>
    87aa:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    87b2:	|           \-> move.l 20(sp),-(sp)
    87b6:	|               jsr 1333c <__fixsfsi>
    87bc:	|               addq.l #4,sp
    87be:	|               move.l d0,-(sp)
    87c0:	|               jsr 6162 <TF_abs>
    87c6:	|               addq.l #4,sp
    87c8:	|               move.l d0,d2
    87ca:	|               move.l 16(sp),-(sp)
    87ce:	|               jsr 1333c <__fixsfsi>
    87d4:	|               addq.l #4,sp
    87d6:	|               move.l d0,-(sp)
    87d8:	|               jsr 6162 <TF_abs>
    87de:	|               addq.l #4,sp
    87e0:	|               cmp.l d2,d0
    87e2:	|        /----- bgt.s 8806 <walkMe+0x132>
    87e4:	|        |      move.l 20(sp),-(sp)
    87e8:	|        |      jsr 1333c <__fixsfsi>
    87ee:	|        |      addq.l #4,sp
    87f0:	|        |      move.l d0,-(sp)
    87f2:	|        |      jsr 6162 <TF_abs>
    87f8:	|        |      addq.l #4,sp
    87fa:	|        |      move.l d0,-(sp)
    87fc:	|        |      jsr 133a4 <__floatsisf>
    8802:	|        |      addq.l #4,sp
    8804:	|        |  /-- bra.s 8826 <walkMe+0x152>
    8806:	|        \--|-> move.l 16(sp),-(sp)
    880a:	|           |   jsr 1333c <__fixsfsi>
    8810:	|           |   addq.l #4,sp
    8812:	|           |   move.l d0,-(sp)
    8814:	|           |   jsr 6162 <TF_abs>
    881a:	|           |   addq.l #4,sp
    881c:	|           |   move.l d0,-(sp)
    881e:	|           |   jsr 133a4 <__floatsisf>
    8824:	|           |   addq.l #4,sp
    8826:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    882a:	|               move.l 12(sp),-(sp)
    882e:	|               jsr 1333c <__fixsfsi>
    8834:	|               addq.l #4,sp
    8836:	|               move.l d0,-(sp)
    8838:	|               jsr 6162 <TF_abs>
    883e:	|               addq.l #4,sp
    8840:	|               move.l d0,-(sp)
    8842:	|               jsr 133a4 <__floatsisf>
    8848:	|               addq.l #4,sp
    884a:	|               move.l d0,-(sp)
    884c:	|               move.l 28(sp),-(sp)
    8850:	|               jsr 135ca <__ltsf2>
    8856:	|               addq.l #8,sp
    8858:	|               tst.l d0
    885a:	|        /----- bge.w 890c <walkMe+0x238>
			if (thisPerson->spinning) {
    885e:	|        |      movea.l 32(sp),a0
    8862:	|        |      move.w 54(a0),d0
    8866:	|        |  /-- beq.s 8884 <walkMe+0x1b0>
				spinStep(thisPerson);
    8868:	|        |  |   move.l 32(sp),-(sp)
    886c:	|        |  |   jsr 8474 <spinStep>
    8872:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    8874:	|        |  |   pea 1 <_start+0x1>
    8878:	|        |  |   move.l 36(sp),-(sp)
    887c:	|        |  |   jsr 5b94 <setFrames>
    8882:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    8884:	|        |  \-> move.l 24(sp),-(sp)
    8888:	|        |      move.l 16(sp),-(sp)
    888c:	|        |      jsr 13250 <__divsf3>
    8892:	|        |      addq.l #8,sp
    8894:	|        |      move.l d0,24(sp)
			if (move)
    8898:	|        |      tst.w 10(sp)
    889c:	|        |  /-- beq.s 8906 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    889e:	|        |  |   movea.l 32(sp),a0
    88a2:	|        |  |   move.l 4(a0),d2
    88a6:	|        |  |   move.l 24(sp),d0
    88aa:	|        |  |   move.l d0,-(sp)
    88ac:	|        |  |   move.l d0,-(sp)
    88ae:	|        |  |   jsr 13156 <__addsf3>
    88b4:	|        |  |   addq.l #8,sp
    88b6:	|        |  |   move.l d0,-(sp)
    88b8:	|        |  |   move.l 20(sp),-(sp)
    88bc:	|        |  |   jsr 13250 <__divsf3>
    88c2:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    88c4:	|        |  |   move.l d0,-(sp)
    88c6:	|        |  |   move.l d2,-(sp)
    88c8:	|        |  |   jsr 13156 <__addsf3>
    88ce:	|        |  |   addq.l #8,sp
    88d0:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    88d2:	|        |  |   movea.l 32(sp),a0
    88d6:	|        |  |   move.l (a0),d3
    88d8:	|        |  |   move.l 24(sp),-(sp)
    88dc:	|        |  |   move.l 24(sp),-(sp)
    88e0:	|        |  |   jsr 13250 <__divsf3>
    88e6:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    88e8:	|        |  |   move.l d0,-(sp)
    88ea:	|        |  |   move.l d3,-(sp)
    88ec:	|        |  |   jsr 13156 <__addsf3>
    88f2:	|        |  |   addq.l #8,sp
    88f4:	|        |  |   move.l d2,-(sp)
    88f6:	|        |  |   move.l d0,-(sp)
    88f8:	|        |  |   move.l 40(sp),-(sp)
    88fc:	|        |  |   jsr 768e <moveAndScale>
    8902:	|        |  |   lea 12(sp),sp
			return TRUE;
    8906:	|        |  \-> moveq #1,d0
    8908:	|  /-----|----- bra.w 89ba <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    890c:	|  |     \----> movea.l 32(sp),a0
    8910:	|  |            move.l 44(a0),d0
    8914:	|  |            moveq #-1,d1
    8916:	|  |            cmp.l d0,d1
    8918:	|  |        /-- bne.s 8950 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    891a:	|  |        |   movea.l 32(sp),a0
    891e:	|  |        |   move.l 98(a0),d0
    8922:	|  |        |   moveq #-1,d1
    8924:	|  |        |   cmp.l d0,d1
    8926:	|  |  /-----|-- beq.s 8964 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    8928:	|  |  |     |   movea.l 32(sp),a0
    892c:	|  |  |     |   move.l 98(a0),d0
    8930:	|  |  |     |   movea.l 32(sp),a0
    8934:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    8938:	|  |  |     |   movea.l 32(sp),a0
    893c:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    8942:	|  |  |     |   move.l 32(sp),-(sp)
    8946:	|  |  |     |   jsr 8474 <spinStep>
    894c:	|  |  |     |   addq.l #4,sp
			}
			break;
    894e:	|  |  +-----|-- bra.s 8964 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    8950:	|  |  |     \-> move.l 32(sp),-(sp)
    8954:	|  |  |         jsr 688c <doBorderStuff>
    895a:	|  |  |         addq.l #4,sp
    895c:	|  |  |         tst.w d0
    895e:	|  |  |  /----- beq.s 8968 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    8960:	\--|--|--|----- bra.w 86f4 <walkMe+0x20>
			break;
    8964:	   |  \--|----> nop
    8966:	   |     |  /-- bra.s 896a <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    8968:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    896a:	   |        \-> movea.l 32(sp),a0
    896e:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    8972:	   |            clr.l -(sp)
    8974:	   |            move.l 36(sp),-(sp)
    8978:	   |            jsr 5b94 <setFrames>
    897e:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    8980:	   |            movea.l 32(sp),a0
    8984:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    8988:	   |            move.l d0,-(sp)
    898a:	   |            jsr 133a4 <__floatsisf>
    8990:	   |            addq.l #4,sp
    8992:	   |            move.l d0,d2
				 thisPerson->walkToX,
    8994:	   |            movea.l 32(sp),a0
    8998:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    899c:	   |            move.l d0,-(sp)
    899e:	   |            jsr 133a4 <__floatsisf>
    89a4:	   |            addq.l #4,sp
    89a6:	   |            move.l d2,-(sp)
    89a8:	   |            move.l d0,-(sp)
    89aa:	   |            move.l 40(sp),-(sp)
    89ae:	   |            jsr 768e <moveAndScale>
    89b4:	   |            lea 12(sp),sp
	return FALSE;
    89b8:	   |            clr.w d0
}
    89ba:	   \----------> move.l (sp)+,d2
    89bc:	                move.l (sp)+,d3
    89be:	                lea 20(sp),sp
    89c2:	                rts

000089c4 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    89c4:	             lea -20(sp),sp
    89c8:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    89ca:	             move.l 19ce2 <allLoadedBanks>,20(sp)
	while (returnMe) {
    89d2:	      /----- bra.s 89f2 <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    89d4:	   /--|----> movea.l 20(sp),a0
    89d8:	   |  |      move.l (a0),d0
    89da:	   |  |      cmp.l 28(sp),d0
    89de:	   |  |  /-- bne.s 89e8 <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    89e0:	   |  |  |   move.l 20(sp),d0
    89e4:	/--|--|--|-- bra.w 8aa4 <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    89e8:	|  |  |  \-> movea.l 20(sp),a0
    89ec:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    89f2:	|  |  \----> tst.l 20(sp)
    89f6:	|  \-------- bne.s 89d4 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    89f8:	|            moveq #26,d0
    89fa:	|            move.l d0,16(sp)
    89fe:	|            clr.l 12(sp)
    8a02:	|            move.l 19c5a <SysBase>,d0
    8a08:	|            movea.l d0,a6
    8a0a:	|            move.l 16(sp),d0
    8a0e:	|            move.l 12(sp),d1
    8a12:	|            jsr -684(a6)
    8a16:	|            move.l d0,8(sp)
    8a1a:	|            move.l 8(sp),d0
    8a1e:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    8a22:	|     /----- beq.s 8aa2 <loadBankForAnim+0xde>
		returnMe->ID = ID;
    8a24:	|     |      movea.l 20(sp),a0
    8a28:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    8a2c:	|     |      move.l 20(sp),d0
    8a30:	|     |      addq.l #8,d0
    8a32:	|     |      clr.l -(sp)
    8a34:	|     |      move.l d0,-(sp)
    8a36:	|     |      move.l 36(sp),-(sp)
    8a3a:	|     |      jsr 6142 <loadSpriteBank>
    8a40:	|     |      lea 12(sp),sp
    8a44:	|     |      tst.w d0
    8a46:	|     |  /-- beq.s 8a7a <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    8a48:	|     |  |   movea.l 20(sp),a0
    8a4c:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    8a50:	|     |  |   move.l 19ce2 <allLoadedBanks>,d0
    8a56:	|     |  |   movea.l 20(sp),a0
    8a5a:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    8a5e:	|     |  |   move.l 20(sp),19ce2 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    8a66:	|     |  |   pea 161c8 <incbin_player_end+0x232>
    8a6c:	|     |  |   jsr 12e08 <KPrintF>
    8a72:	|     |  |   addq.l #4,sp
			return returnMe;
    8a74:	|     |  |   move.l 20(sp),d0
    8a78:	+-----|--|-- bra.s 8aa4 <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    8a7a:	|     |  \-> pea 161f5 <incbin_player_end+0x25f>
    8a80:	|     |      jsr 12e08 <KPrintF>
    8a86:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    8a88:	|     |      move.l 20(sp),4(sp)
    8a8e:	|     |      move.l 19c5a <SysBase>,d0
    8a94:	|     |      movea.l d0,a6
    8a96:	|     |      movea.l 4(sp),a1
    8a9a:	|     |      jsr -690(a6)
			return NULL;
    8a9e:	|     |      moveq #0,d0
    8aa0:	+-----|----- bra.s 8aa4 <loadBankForAnim+0xe0>
		}
	} else return NULL;
    8aa2:	|     \----> moveq #0,d0
}
    8aa4:	\----------> movea.l (sp)+,a6
    8aa6:	             lea 20(sp),sp
    8aaa:	             rts

00008aac <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    8aac:	       subq.l #8,sp
    8aae:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    8ab0:	   /-- bra.s 8ae0 <clearStackLib+0x34>
		k = stackLib;
    8ab2:	/--|-> move.l 19cea <stackLib>,8(sp)
		stackLib = stackLib -> next;
    8aba:	|  |   movea.l 19cea <stackLib>,a0
    8ac0:	|  |   move.l 4(a0),d0
    8ac4:	|  |   move.l d0,19cea <stackLib>
		FreeVec(k);
    8aca:	|  |   move.l 8(sp),4(sp)
    8ad0:	|  |   move.l 19c5a <SysBase>,d0
    8ad6:	|  |   movea.l d0,a6
    8ad8:	|  |   movea.l 4(sp),a1
    8adc:	|  |   jsr -690(a6)
	while (stackLib) {
    8ae0:	|  \-> move.l 19cea <stackLib>,d0
    8ae6:	\----- bne.s 8ab2 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    8ae8:	       clr.l 19ce6 <stackLibTotal>
}
    8aee:	       nop
    8af0:	       movea.l (sp)+,a6
    8af2:	       addq.l #8,sp
    8af4:	       rts

00008af6 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    8af6:	          lea -128(sp),sp
    8afa:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    8afe:	      /-- bra.s 8b10 <loadGame+0x1a>
    8b00:	   /--|-> move.l 19bf6 <allRunningFunctions>,d0
    8b06:	   |  |   move.l d0,-(sp)
    8b08:	   |  |   jsr 3454 <finishFunction>
    8b0e:	   |  |   addq.l #4,sp
    8b10:	   |  \-> move.l 19bf6 <allRunningFunctions>,d0
    8b16:	   \----- bne.s 8b00 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    8b18:	          pea 19cee <ssgVersion>
    8b1e:	          pea 16253 <incbin_player_end+0x2bd>
    8b24:	          pea 41 <_start+0x41>
    8b28:	          pea 53 <_start+0x53>
    8b2c:	          move.l 160(sp),-(sp)
    8b30:	          jsr 3f7c <openAndVerify>
    8b36:	          lea 20(sp),sp
    8b3a:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    8b3e:	      /-- bne.s 8b46 <loadGame+0x50>
    8b40:	      |   clr.w d0
    8b42:	/-----|-- bra.w 8dec <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    8b46:	|     \-> move.l 112(sp),108(sp)
    8b4c:	|         lea 140(sp),a0
    8b50:	|         lea -126(a0),a0
    8b54:	|         move.l a0,120(sp)
    8b58:	|         moveq #8,d0
    8b5a:	|         move.l d0,116(sp)
    8b5e:	|         move.l 19c62 <DOSBase>,d0
    8b64:	|         movea.l d0,a6
    8b66:	|         move.l 108(sp),d1
    8b6a:	|         move.l 120(sp),d2
    8b6e:	|         move.l 116(sp),d3
    8b72:	|         jsr -42(a6)
    8b76:	|         move.l d0,132(sp)
    8b7a:	|         move.l 132(sp),d0
    8b7e:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    8b82:	|         moveq #8,d0
    8b84:	|         cmp.l 128(sp),d0
    8b88:	|     /-- beq.s 8b98 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    8b8a:	|     |   pea 16274 <incbin_player_end+0x2de>
    8b90:	|     |   jsr 12e08 <KPrintF>
    8b96:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    8b98:	|     \-> move.l 14(sp),d1
    8b9c:	|         move.l 19c00 <fileTime>,d0
    8ba2:	|         cmp.l d1,d0
    8ba4:	|     /-- bne.s 8bb4 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    8ba6:	|     |   move.l 18(sp),d1
    8baa:	|     |   move.l 19c04 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    8bb0:	|     |   cmp.l d1,d0
    8bb2:	|  /--|-- beq.s 8bd4 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    8bb4:	|  |  \-> move.l 144(sp),-(sp)
    8bb8:	|  |      pea 16290 <incbin_player_end+0x2fa>
    8bbe:	|  |      pea 16357 <incbin_player_end+0x3c1>
    8bc4:	|  |      jsr 12e08 <KPrintF>
    8bca:	|  |      lea 12(sp),sp
		return FALSE; 
    8bce:	|  |      clr.w d0
    8bd0:	+--|----- bra.w 8dec <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    8bd4:	|  \----> move.l 112(sp),124(sp)
    8bda:	|         move.l 19c62 <DOSBase>,d0
    8be0:	|         movea.l d0,a6
    8be2:	|         move.l 124(sp),d1
    8be6:	|         jsr -306(a6)
    8bea:	|         move.l d0,136(sp)
    8bee:	|         move.l 136(sp),d0
    8bf2:	|         move.l d0,d0
    8bf4:	|         move.w d0,18000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    8bfa:	|         move.l 112(sp),100(sp)
    8c00:	|         move.l 19c62 <DOSBase>,d0
    8c06:	|         movea.l d0,a6
    8c08:	|         move.l 100(sp),d1
    8c0c:	|         jsr -306(a6)
    8c10:	|         move.l d0,96(sp)
    8c14:	|         move.l 96(sp),d0
    8c18:	|         move.l d0,d0
    8c1a:	|         move.w d0,19bfe <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    8c20:	|         move.l 112(sp),92(sp)
    8c26:	|         move.l 19c62 <DOSBase>,d0
    8c2c:	|         movea.l d0,a6
    8c2e:	|         move.l 92(sp),d1
    8c32:	|         jsr -306(a6)
    8c36:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    8c3a:	|         move.l 112(sp),84(sp)
    8c40:	|         move.l 19c62 <DOSBase>,d0
    8c46:	|         movea.l d0,a6
    8c48:	|         move.l 84(sp),d1
    8c4c:	|         jsr -306(a6)
    8c50:	|         move.l d0,80(sp)
    8c54:	|         move.l 80(sp),d0
    8c58:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    8c5c:	|     /-- beq.s 8c90 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    8c5e:	|     |   move.l 112(sp),-(sp)
    8c62:	|     |   jsr 6bc <get2bytes>
    8c68:	|     |   addq.l #4,sp
    8c6a:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    8c6e:	|     |   move.l 112(sp),-(sp)
    8c72:	|     |   jsr 6bc <get2bytes>
    8c78:	|     |   addq.l #4,sp
    8c7a:	|     |   move.l d0,19d4e <fontHeight>
		charOrder = readString(fp);		
    8c80:	|     |   move.l 112(sp),-(sp)
    8c84:	|     |   jsr b02 <readString>
    8c8a:	|     |   addq.l #4,sp
    8c8c:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    8c90:	|     \-> move.l 104(sp),70(sp)
    8c96:	|         move.l 19c5a <SysBase>,d0
    8c9c:	|         movea.l d0,a6
    8c9e:	|         movea.l 70(sp),a1
    8ca2:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    8ca6:	|         move.l 112(sp),-(sp)
    8caa:	|         jsr 854 <getSigned>
    8cb0:	|         addq.l #4,sp
    8cb2:	|         move.w d0,186b0 <fontSpace>

	killAllPeople ();
    8cb8:	|         jsr 7330 <killAllPeople>
	killAllRegions ();
    8cbe:	|         jsr 118ac <killAllRegions>

	int camerX = get2bytes (fp);
    8cc4:	|         move.l 112(sp),-(sp)
    8cc8:	|         jsr 6bc <get2bytes>
    8cce:	|         addq.l #4,sp
    8cd0:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    8cd4:	|         move.l 112(sp),-(sp)
    8cd8:	|         jsr 6bc <get2bytes>
    8cde:	|         addq.l #4,sp
    8ce0:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    8ce4:	|         move.l 112(sp),-(sp)
    8ce8:	|         jsr 7d8 <getFloat>
    8cee:	|         addq.l #4,sp
    8cf0:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    8cf4:	|         move.l 112(sp),54(sp)
    8cfa:	|         move.l 19c62 <DOSBase>,d0
    8d00:	|         movea.l d0,a6
    8d02:	|         move.l 54(sp),d1
    8d06:	|         jsr -306(a6)
    8d0a:	|         move.l d0,50(sp)
    8d0e:	|         move.l 50(sp),d0
    8d12:	|         move.l d0,d0
    8d14:	|         move.b d0,1811a <brightnessLevel>

	loadHandlers (fp);
    8d1a:	|         move.l 112(sp),-(sp)
    8d1e:	|         jsr 3edc <loadHandlers>
    8d24:	|         addq.l #4,sp
	loadRegions (fp);
    8d26:	|         move.l 112(sp),-(sp)
    8d2a:	|         jsr 11908 <loadRegions>
    8d30:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    8d32:	|         moveq #12,d0
    8d34:	|         move.l d0,46(sp)
    8d38:	|         clr.l 42(sp)
    8d3c:	|         move.l 19c5a <SysBase>,d0
    8d42:	|         movea.l d0,a6
    8d44:	|         move.l 46(sp),d0
    8d48:	|         move.l 42(sp),d1
    8d4c:	|         jsr -684(a6)
    8d50:	|         move.l d0,38(sp)
    8d54:	|         move.l 38(sp),d0
    8d58:	|         move.l d0,19b2c <mouseCursorAnim>
	if (! mouseCursorAnim) {
    8d5e:	|         move.l 19b2c <mouseCursorAnim>,d0
    8d64:	|     /-- bne.s 8d78 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    8d66:	|     |   pea 16361 <incbin_player_end+0x3cb>
    8d6c:	|     |   jsr 12e08 <KPrintF>
    8d72:	|     |   addq.l #4,sp
		return FALSE;
    8d74:	|     |   clr.w d0
    8d76:	+-----|-- bra.s 8dec <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    8d78:	|     \-> jsr 9a48 <nosnapshot>
	if (FGetC (fp)) {
    8d7e:	|         move.l 112(sp),34(sp)
    8d84:	|         move.l 19c62 <DOSBase>,d0
    8d8a:	|         movea.l d0,a6
    8d8c:	|         move.l 34(sp),d1
    8d90:	|         jsr -306(a6)
    8d94:	|         move.l d0,30(sp)
    8d98:	|         move.l 30(sp),d0
    8d9c:	|     /-- beq.s 8db2 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    8d9e:	|     |   move.l 112(sp),-(sp)
    8da2:	|     |   jsr 9b20 <restoreSnapshot>
    8da8:	|     |   addq.l #4,sp
    8daa:	|     |   tst.w d0
    8dac:	|     +-- bne.s 8db2 <loadGame+0x2bc>
    8dae:	|     |   clr.w d0
    8db0:	+-----|-- bra.s 8dec <loadGame+0x2f6>
	}

	Close (fp);
    8db2:	|     \-> move.l 112(sp),26(sp)
    8db8:	|         move.l 19c62 <DOSBase>,d0
    8dbe:	|         movea.l d0,a6
    8dc0:	|         move.l 26(sp),d1
    8dc4:	|         jsr -36(a6)
    8dc8:	|         move.l d0,22(sp)
	clearStackLib ();
    8dcc:	|         jsr 8aac <clearStackLib>

	cameraX = camerX;
    8dd2:	|         move.l 66(sp),19d14 <cameraX>
	cameraY = camerY;
    8dda:	|         move.l 62(sp),19d18 <cameraY>
	cameraZoom = camerZ;
    8de2:	|         move.l 58(sp),1814a <cameraZoom>

	return TRUE;
    8dea:	|         moveq #1,d0
}
    8dec:	\-------> movem.l (sp)+,d2-d3/a6
    8df0:	          lea 128(sp),sp
    8df4:	          rts

00008df6 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    8df6:	   /-> lea -64(sp),sp
    8dfa:	   |   move.l a6,-(sp)
    8dfc:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    8dfe:	   |   movea.l 76(sp),a0
    8e02:	   |   move.l (a0),d0
    8e04:	   |   move.l 80(sp),-(sp)
    8e08:	   |   move.l d0,-(sp)
    8e0a:	   |   jsr 8d0 <put2bytes>
    8e10:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    8e12:	   |   movea.l 76(sp),a0
    8e16:	   |   move.l 40(a0),d0
    8e1a:	/--|-- beq.s 8e56 <saveFunction+0x60>
		FPutC (fp, 1);
    8e1c:	|  |   move.l 80(sp),52(sp)
    8e22:	|  |   moveq #1,d0
    8e24:	|  |   move.l d0,48(sp)
    8e28:	|  |   move.l 19c62 <DOSBase>,d0
    8e2e:	|  |   movea.l d0,a6
    8e30:	|  |   move.l 52(sp),d1
    8e34:	|  |   move.l 48(sp),d2
    8e38:	|  |   jsr -312(a6)
    8e3c:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    8e40:	|  |   movea.l 76(sp),a0
    8e44:	|  |   move.l 40(a0),d0
    8e48:	|  |   move.l 80(sp),-(sp)
    8e4c:	|  |   move.l d0,-(sp)
    8e4e:	|  \-- jsr 8df6 <saveFunction>(pc)
    8e52:	|      addq.l #8,sp
    8e54:	|  /-- bra.s 8e78 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    8e56:	\--|-> move.l 80(sp),64(sp)
    8e5c:	   |   clr.l 60(sp)
    8e60:	   |   move.l 19c62 <DOSBase>,d0
    8e66:	   |   movea.l d0,a6
    8e68:	   |   move.l 64(sp),d1
    8e6c:	   |   move.l 60(sp),d2
    8e70:	   |   jsr -312(a6)
    8e74:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    8e78:	   \-> movea.l 76(sp),a0
    8e7c:	       move.l 12(a0),d0
    8e80:	       move.l 80(sp),-(sp)
    8e84:	       move.l d0,-(sp)
    8e86:	       jsr 958 <put4bytes>
    8e8c:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    8e8e:	       movea.l 76(sp),a0
    8e92:	       move.l 36(a0),d0
    8e96:	       move.l 80(sp),-(sp)
    8e9a:	       move.l d0,-(sp)
    8e9c:	       jsr 8d0 <put2bytes>
    8ea2:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    8ea4:	       move.l 80(sp),40(sp)
    8eaa:	       movea.l 76(sp),a0
    8eae:	       move.w 54(a0),d0
    8eb2:	       movea.w d0,a0
    8eb4:	       move.l a0,36(sp)
    8eb8:	       move.l 19c62 <DOSBase>,d0
    8ebe:	       movea.l d0,a6
    8ec0:	       move.l 40(sp),d1
    8ec4:	       move.l 36(sp),d2
    8ec8:	       jsr -312(a6)
    8ecc:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    8ed0:	       move.l 80(sp),28(sp)
    8ed6:	       movea.l 76(sp),a0
    8eda:	       move.w 48(a0),d0
    8ede:	       movea.w d0,a0
    8ee0:	       move.l a0,24(sp)
    8ee4:	       move.l 19c62 <DOSBase>,d0
    8eea:	       movea.l d0,a6
    8eec:	       move.l 28(sp),d1
    8ef0:	       move.l 24(sp),d2
    8ef4:	       jsr -312(a6)
    8ef8:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    8efc:	       move.l 80(sp),16(sp)
    8f02:	       movea.l 76(sp),a0
    8f06:	       move.w 50(a0),d0
    8f0a:	       movea.w d0,a0
    8f0c:	       move.l a0,12(sp)
    8f10:	       move.l 19c62 <DOSBase>,d0
    8f16:	       movea.l d0,a6
    8f18:	       move.l 16(sp),d1
    8f1c:	       move.l 12(sp),d2
    8f20:	       jsr -312(a6)
    8f24:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    8f28:	       moveq #28,d0
    8f2a:	       add.l 76(sp),d0
    8f2e:	       move.l 80(sp),-(sp)
    8f32:	       move.l d0,-(sp)
    8f34:	       jsr 96b2 <saveVariable>
    8f3a:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    8f3c:	       movea.l 76(sp),a0
    8f40:	       move.b 56(a0),d0
    8f44:	   /-- beq.s 8f54 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    8f46:	   |   pea 16382 <incbin_player_end+0x3ec>
    8f4c:	   |   jsr 12e08 <KPrintF>
    8f52:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    8f54:	   \-> movea.l 76(sp),a0
    8f58:	       move.l 24(a0),d0
    8f5c:	       move.l 80(sp),-(sp)
    8f60:	       move.l d0,-(sp)
    8f62:	       jsr 9526 <saveStack>
    8f68:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    8f6a:	       clr.l 68(sp)
    8f6e:	   /-- bra.s 8f92 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    8f70:	/--|-> movea.l 76(sp),a0
    8f74:	|  |   move.l 20(a0),d1
    8f78:	|  |   move.l 68(sp),d0
    8f7c:	|  |   lsl.l #3,d0
    8f7e:	|  |   add.l d1,d0
    8f80:	|  |   move.l 80(sp),-(sp)
    8f84:	|  |   move.l d0,-(sp)
    8f86:	|  |   jsr 96b2 <saveVariable>
    8f8c:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    8f8e:	|  |   addq.l #1,68(sp)
    8f92:	|  \-> movea.l 76(sp),a0
    8f96:	|      move.l 8(a0),d0
    8f9a:	|      cmp.l 68(sp),d0
    8f9e:	\----- bgt.s 8f70 <saveFunction+0x17a>
	}
}
    8fa0:	       nop
    8fa2:	       nop
    8fa4:	       move.l (sp)+,d2
    8fa6:	       movea.l (sp)+,a6
    8fa8:	       lea 64(sp),sp
    8fac:	       rts

00008fae <saveGame>:

BOOL saveGame (char * fname) {
    8fae:	          lea -272(sp),sp
    8fb2:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    8fb6:	          move.l 288(sp),268(sp)
    8fbc:	          move.l #1006,264(sp)
    8fc4:	          move.l 19c62 <DOSBase>,d0
    8fca:	          movea.l d0,a6
    8fcc:	          move.l 268(sp),d1
    8fd0:	          move.l 264(sp),d2
    8fd4:	          jsr -30(a6)
    8fd8:	          move.l d0,260(sp)
    8fdc:	          move.l 260(sp),d0
    8fe0:	          move.l d0,256(sp)
	if (fp == NULL) {
    8fe4:	      /-- bne.s 8ffa <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    8fe6:	      |   pea 163a4 <incbin_player_end+0x40e>
    8fec:	      |   jsr 12e08 <KPrintF>
    8ff2:	      |   addq.l #4,sp
		return FALSE;
    8ff4:	      |   clr.w d0
    8ff6:	/-----|-- bra.w 951c <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    8ffa:	|     \-> move.l 256(sp),252(sp)
    9000:	|         move.l #91073,248(sp)
    9008:	|         moveq #6,d0
    900a:	|         move.l d0,244(sp)
    900e:	|         move.l 19c62 <DOSBase>,d0
    9014:	|         movea.l d0,a6
    9016:	|         move.l 252(sp),d1
    901a:	|         move.l 248(sp),d2
    901e:	|         move.l 244(sp),d3
    9022:	|         jsr -48(a6)
    9026:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    902a:	|         move.l 256(sp),236(sp)
    9030:	|         clr.l 232(sp)
    9034:	|         move.l 19c62 <DOSBase>,d0
    903a:	|         movea.l d0,a6
    903c:	|         move.l 236(sp),d1
    9040:	|         move.l 232(sp),d2
    9044:	|         jsr -312(a6)
    9048:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    904c:	|         move.l 256(sp),224(sp)
    9052:	|         clr.l 220(sp)
    9056:	|         move.l 19c62 <DOSBase>,d0
    905c:	|         movea.l d0,a6
    905e:	|         move.l 224(sp),d1
    9062:	|         move.l 220(sp),d2
    9066:	|         jsr -312(a6)
    906a:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    906e:	|         move.l 256(sp),212(sp)
    9074:	|         moveq #2,d0
    9076:	|         move.l d0,208(sp)
    907a:	|         move.l 19c62 <DOSBase>,d0
    9080:	|         movea.l d0,a6
    9082:	|         move.l 212(sp),d1
    9086:	|         move.l 208(sp),d2
    908a:	|         jsr -312(a6)
    908e:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    9092:	|         move.l 256(sp),200(sp)
    9098:	|         moveq #2,d0
    909a:	|         move.l d0,196(sp)
    909e:	|         move.l 19c62 <DOSBase>,d0
    90a4:	|         movea.l d0,a6
    90a6:	|         move.l 200(sp),d1
    90aa:	|         move.l 196(sp),d2
    90ae:	|         jsr -312(a6)
    90b2:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    90b6:	|         move.l 256(sp),188(sp)
    90bc:	|         move.l #105472,184(sp)
    90c4:	|         moveq #8,d0
    90c6:	|         move.l d0,180(sp)
    90ca:	|         move.l 19c62 <DOSBase>,d0
    90d0:	|         movea.l d0,a6
    90d2:	|         move.l 188(sp),d1
    90d6:	|         move.l 184(sp),d2
    90da:	|         move.l 180(sp),d3
    90de:	|         jsr -48(a6)
    90e2:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    90e6:	|         move.l 256(sp),172(sp)
    90ec:	|         move.w 18000 <allowAnyFilename>,d0
    90f2:	|         movea.w d0,a0
    90f4:	|         move.l a0,168(sp)
    90f8:	|         move.l 19c62 <DOSBase>,d0
    90fe:	|         movea.l d0,a6
    9100:	|         move.l 172(sp),d1
    9104:	|         move.l 168(sp),d2
    9108:	|         jsr -312(a6)
    910c:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    9110:	|         move.l 256(sp),160(sp)
    9116:	|         move.w 19bfe <captureAllKeys>,d0
    911c:	|         movea.w d0,a0
    911e:	|         move.l a0,156(sp)
    9122:	|         move.l 19c62 <DOSBase>,d0
    9128:	|         movea.l d0,a6
    912a:	|         move.l 160(sp),d1
    912e:	|         move.l 156(sp),d2
    9132:	|         jsr -312(a6)
    9136:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    913a:	|         move.l 256(sp),148(sp)
    9140:	|         moveq #1,d0
    9142:	|         move.l d0,144(sp)
    9146:	|         move.l 19c62 <DOSBase>,d0
    914c:	|         movea.l d0,a6
    914e:	|         move.l 148(sp),d1
    9152:	|         move.l 144(sp),d2
    9156:	|         jsr -312(a6)
    915a:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    915e:	|         move.l 256(sp),136(sp)
    9164:	|         move.l 19d5a <fontTableSize>,d0
    916a:	|         sgt d0
    916c:	|         neg.b d0
    916e:	|         move.b d0,d0
    9170:	|         andi.l #255,d0
    9176:	|         move.l d0,132(sp)
    917a:	|         move.l 19c62 <DOSBase>,d0
    9180:	|         movea.l d0,a6
    9182:	|         move.l 136(sp),d1
    9186:	|         move.l 132(sp),d2
    918a:	|         jsr -312(a6)
    918e:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    9192:	|         move.l 19d5a <fontTableSize>,d0
    9198:	|     /-- ble.s 91d6 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    919a:	|     |   move.l 19d52 <loadedFontNum>,d0
    91a0:	|     |   move.l 256(sp),-(sp)
    91a4:	|     |   move.l d0,-(sp)
    91a6:	|     |   jsr 8d0 <put2bytes>
    91ac:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    91ae:	|     |   move.l 19d4e <fontHeight>,d0
    91b4:	|     |   move.l 256(sp),-(sp)
    91b8:	|     |   move.l d0,-(sp)
    91ba:	|     |   jsr 8d0 <put2bytes>
    91c0:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    91c2:	|     |   move.l 19d56 <fontOrderString>,d0
    91c8:	|     |   move.l 256(sp),-(sp)
    91cc:	|     |   move.l d0,-(sp)
    91ce:	|     |   jsr bd8 <writeString>
    91d4:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    91d6:	|     \-> move.w 186b0 <fontSpace>,d0
    91dc:	|         movea.w d0,a0
    91de:	|         move.l 256(sp),-(sp)
    91e2:	|         move.l a0,-(sp)
    91e4:	|         jsr a9c <putSigned>
    91ea:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    91ec:	|         move.l 19d14 <cameraX>,d0
    91f2:	|         move.l 256(sp),-(sp)
    91f6:	|         move.l d0,-(sp)
    91f8:	|         jsr 8d0 <put2bytes>
    91fe:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    9200:	|         move.l 19d18 <cameraY>,d0
    9206:	|         move.l 256(sp),-(sp)
    920a:	|         move.l d0,-(sp)
    920c:	|         jsr 8d0 <put2bytes>
    9212:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    9214:	|         move.l 1814a <cameraZoom>,d0
    921a:	|         move.l 256(sp),-(sp)
    921e:	|         move.l d0,-(sp)
    9220:	|         jsr a46 <putFloat>
    9226:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    9228:	|         move.l 256(sp),124(sp)
    922e:	|         move.b 1811a <brightnessLevel>,d0
    9234:	|         move.b d0,d0
    9236:	|         andi.l #255,d0
    923c:	|         move.l d0,120(sp)
    9240:	|         move.l 19c62 <DOSBase>,d0
    9246:	|         movea.l d0,a6
    9248:	|         move.l 124(sp),d1
    924c:	|         move.l 120(sp),d2
    9250:	|         jsr -312(a6)
    9254:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    9258:	|         move.l 256(sp),-(sp)
    925c:	|         jsr 4460 <saveHandlers>
    9262:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    9264:	|         move.l 256(sp),-(sp)
    9268:	|         jsr 11ac2 <saveRegions>
    926e:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    9270:	|         move.l 19b2c <mouseCursorAnim>,d0
    9276:	|         move.l 256(sp),-(sp)
    927a:	|         move.l d0,-(sp)
    927c:	|         jsr 785e <saveAnim>
    9282:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    9284:	|         move.l 19b30 <mouseCursorFrameNum>,d0
    928a:	|         move.l 256(sp),-(sp)
    928e:	|         move.l d0,-(sp)
    9290:	|         jsr 8d0 <put2bytes>
    9296:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    9298:	|         move.l 19bf6 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    92a0:	|         clr.l 272(sp)
	while (thisFunction) {
    92a4:	|     /-- bra.s 92b4 <saveGame+0x306>
		countFunctions ++;
    92a6:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    92aa:	|  |  |   movea.l 276(sp),a0
    92ae:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    92b4:	|  |  \-> tst.l 276(sp)
    92b8:	|  \----- bne.s 92a6 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    92ba:	|         move.l 256(sp),-(sp)
    92be:	|         move.l 276(sp),-(sp)
    92c2:	|         jsr 8d0 <put2bytes>
    92c8:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    92ca:	|         move.l 19bf6 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    92d2:	|     /-- bra.s 92ee <saveGame+0x340>
		saveFunction (thisFunction, fp);
    92d4:	|  /--|-> move.l 256(sp),-(sp)
    92d8:	|  |  |   move.l 280(sp),-(sp)
    92dc:	|  |  |   jsr 8df6 <saveFunction>
    92e2:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    92e4:	|  |  |   movea.l 276(sp),a0
    92e8:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    92ee:	|  |  \-> tst.l 276(sp)
    92f2:	|  \----- bne.s 92d4 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    92f4:	|         clr.l 280(sp)
    92f8:	|     /-- bra.s 931a <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    92fa:	|  /--|-> move.l 19c0c <globalVars>,d1
    9300:	|  |  |   move.l 280(sp),d0
    9304:	|  |  |   lsl.l #3,d0
    9306:	|  |  |   add.l d1,d0
    9308:	|  |  |   move.l 256(sp),-(sp)
    930c:	|  |  |   move.l d0,-(sp)
    930e:	|  |  |   jsr 96b2 <saveVariable>
    9314:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    9316:	|  |  |   addq.l #1,280(sp)
    931a:	|  |  \-> move.l 19c32 <numGlobals>,d0
    9320:	|  |      cmp.l 280(sp),d0
    9324:	|  \----- bgt.s 92fa <saveGame+0x34c>
	}

	savePeople (fp);
    9326:	|         move.l 256(sp),-(sp)
    932a:	|         jsr 7986 <savePeople>
    9330:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    9332:	|         movea.l 19d66 <currentFloor>,a0
    9338:	|         move.l 8(a0),d0
    933c:	|  /----- beq.s 937a <saveGame+0x3cc>
		FPutC (fp, 1);
    933e:	|  |      move.l 256(sp),100(sp)
    9344:	|  |      moveq #1,d0
    9346:	|  |      move.l d0,96(sp)
    934a:	|  |      move.l 19c62 <DOSBase>,d0
    9350:	|  |      movea.l d0,a6
    9352:	|  |      move.l 100(sp),d1
    9356:	|  |      move.l 96(sp),d2
    935a:	|  |      jsr -312(a6)
    935e:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    9362:	|  |      movea.l 19d66 <currentFloor>,a0
    9368:	|  |      move.l (a0),d0
    936a:	|  |      move.l 256(sp),-(sp)
    936e:	|  |      move.l d0,-(sp)
    9370:	|  |      jsr 8d0 <put2bytes>
    9376:	|  |      addq.l #8,sp
    9378:	|  |  /-- bra.s 939c <saveGame+0x3ee>
	} else FPutC (fp, 0);
    937a:	|  \--|-> move.l 256(sp),112(sp)
    9380:	|     |   clr.l 108(sp)
    9384:	|     |   move.l 19c62 <DOSBase>,d0
    938a:	|     |   movea.l d0,a6
    938c:	|     |   move.l 112(sp),d1
    9390:	|     |   move.l 108(sp),d2
    9394:	|     |   jsr -312(a6)
    9398:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    939c:	|     \-> move.l 19bca <zBuffer+0x50>,d0
    93a2:	|  /----- beq.s 93de <saveGame+0x430>
		FPutC (fp, 1);
    93a4:	|  |      move.l 256(sp),76(sp)
    93aa:	|  |      moveq #1,d0
    93ac:	|  |      move.l d0,72(sp)
    93b0:	|  |      move.l 19c62 <DOSBase>,d0
    93b6:	|  |      movea.l d0,a6
    93b8:	|  |      move.l 76(sp),d1
    93bc:	|  |      move.l 72(sp),d2
    93c0:	|  |      jsr -312(a6)
    93c4:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    93c8:	|  |      move.l 19bc6 <zBuffer+0x4c>,d0
    93ce:	|  |      move.l 256(sp),-(sp)
    93d2:	|  |      move.l d0,-(sp)
    93d4:	|  |      jsr 8d0 <put2bytes>
    93da:	|  |      addq.l #8,sp
    93dc:	|  |  /-- bra.s 9400 <saveGame+0x452>
	} else FPutC (fp,0);
    93de:	|  \--|-> move.l 256(sp),88(sp)
    93e4:	|     |   clr.l 84(sp)
    93e8:	|     |   move.l 19c62 <DOSBase>,d0
    93ee:	|     |   movea.l d0,a6
    93f0:	|     |   move.l 88(sp),d1
    93f4:	|     |   move.l 84(sp),d2
    93f8:	|     |   jsr -312(a6)
    93fc:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    9400:	|     \-> move.l 256(sp),64(sp)
    9406:	|         move.l 19d28 <speechMode>,60(sp)
    940e:	|         move.l 19c62 <DOSBase>,d0
    9414:	|         movea.l d0,a6
    9416:	|         move.l 64(sp),d1
    941a:	|         move.l 60(sp),d2
    941e:	|         jsr -312(a6)
    9422:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    9426:	|         move.b 18686 <fadeMode>,d0
    942c:	|         move.b d0,d0
    942e:	|         andi.l #255,d0
    9434:	|         move.l d0,52(sp)
    9438:	|         move.l 256(sp),48(sp)
    943e:	|         move.l 19c62 <DOSBase>,d0
    9444:	|         movea.l d0,a6
    9446:	|         move.l 52(sp),d1
    944a:	|         move.l 48(sp),d2
    944e:	|         jsr -312(a6)
    9452:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    9456:	|         move.l 19cb6 <speech>,d0
    945c:	|         move.l 256(sp),-(sp)
    9460:	|         move.l d0,-(sp)
    9462:	|         jsr 5a48 <saveSpeech>
    9468:	|         addq.l #8,sp
	saveStatusBars (fp);
    946a:	|         move.l 256(sp),-(sp)
    946e:	|         jsr 5444 <saveStatusBars>
    9474:	|         addq.l #4,sp
	saveSounds (fp);
    9476:	|         move.l 256(sp),-(sp)
    947a:	|         jsr 97f6 <saveSounds>
    9480:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    9482:	|         move.w 19d12 <saveEncoding>,d0
    9488:	|         move.w d0,d0
    948a:	|         andi.l #65535,d0
    9490:	|         move.l 256(sp),-(sp)
    9494:	|         move.l d0,-(sp)
    9496:	|         jsr 8d0 <put2bytes>
    949c:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    949e:	|         move.l 19d04 <parallaxStuff>,d0
    94a4:	|         move.l 256(sp),-(sp)
    94a8:	|         move.l d0,-(sp)
    94aa:	|         jsr 9b46 <saveParallaxRecursive>
    94b0:	|         addq.l #8,sp
	FPutC (fp, 0);
    94b2:	|         move.l 256(sp),40(sp)
    94b8:	|         clr.l 36(sp)
    94bc:	|         move.l 19c62 <DOSBase>,d0
    94c2:	|         movea.l d0,a6
    94c4:	|         move.l 40(sp),d1
    94c8:	|         move.l 36(sp),d2
    94cc:	|         jsr -312(a6)
    94d0:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    94d4:	|         move.l 256(sp),28(sp)
    94da:	|         move.l 18120 <languageNum>,24(sp)
    94e2:	|         move.l 19c62 <DOSBase>,d0
    94e8:	|         movea.l d0,a6
    94ea:	|         move.l 28(sp),d1
    94ee:	|         move.l 24(sp),d2
    94f2:	|         jsr -312(a6)
    94f6:	|         move.l d0,20(sp)

	Close(fp);
    94fa:	|         move.l 256(sp),16(sp)
    9500:	|         move.l 19c62 <DOSBase>,d0
    9506:	|         movea.l d0,a6
    9508:	|         move.l 16(sp),d1
    950c:	|         jsr -36(a6)
    9510:	|         move.l d0,12(sp)
	clearStackLib ();
    9514:	|         jsr 8aac <clearStackLib>
	return TRUE;
    951a:	|         moveq #1,d0
}
    951c:	\-------> movem.l (sp)+,d2-d3/a6
    9520:	          lea 272(sp),sp
    9524:	          rts

00009526 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    9526:	       lea -12(sp),sp
	int elements = 0;
    952a:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    952e:	       move.l 16(sp),(sp)
	while (search) {
    9532:	   /-- bra.s 953e <saveStack+0x18>
		elements ++;
    9534:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    9538:	|  |   movea.l (sp),a0
    953a:	|  |   move.l 8(a0),(sp)
	while (search) {
    953e:	|  \-> tst.l (sp)
    9540:	\----- bne.s 9534 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    9542:	       move.l 20(sp),-(sp)
    9546:	       move.l 12(sp),-(sp)
    954a:	       jsr 8d0 <put2bytes>
    9550:	       addq.l #8,sp
	search = vs;
    9552:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    9556:	       clr.l 4(sp)
    955a:	   /-- bra.s 9576 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    955c:	/--|-> move.l (sp),d0
    955e:	|  |   move.l 20(sp),-(sp)
    9562:	|  |   move.l d0,-(sp)
    9564:	|  |   jsr 96b2 <saveVariable>
    956a:	|  |   addq.l #8,sp
		search = search -> next;
    956c:	|  |   movea.l (sp),a0
    956e:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    9572:	|  |   addq.l #1,4(sp)
    9576:	|  \-> move.l 4(sp),d0
    957a:	|      cmp.l 8(sp),d0
    957e:	\----- blt.s 955c <saveStack+0x36>
	}
}
    9580:	       nop
    9582:	       nop
    9584:	       lea 12(sp),sp
    9588:	       rts

0000958a <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    958a:	             lea -44(sp),sp
    958e:	             move.l a6,-(sp)
    9590:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    9592:	             move.l 19cea <stackLib>,48(sp)
	int a = 0;
    959a:	             clr.l 44(sp)
	while (s) {
    959e:	      /----- bra.s 95fc <saveStackRef+0x72>
		if (s -> stack == vs) {
    95a0:	   /--|----> movea.l 48(sp),a0
    95a4:	   |  |      move.l (a0),d0
    95a6:	   |  |      cmp.l 56(sp),d0
    95aa:	   |  |  /-- bne.s 95ee <saveStackRef+0x64>
			FPutC (fp, 1);
    95ac:	   |  |  |   move.l 60(sp),16(sp)
    95b2:	   |  |  |   moveq #1,d0
    95b4:	   |  |  |   move.l d0,12(sp)
    95b8:	   |  |  |   move.l 19c62 <DOSBase>,d0
    95be:	   |  |  |   movea.l d0,a6
    95c0:	   |  |  |   move.l 16(sp),d1
    95c4:	   |  |  |   move.l 12(sp),d2
    95c8:	   |  |  |   jsr -312(a6)
    95cc:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    95d0:	   |  |  |   move.l 19ce6 <stackLibTotal>,d0
    95d6:	   |  |  |   sub.l 44(sp),d0
    95da:	   |  |  |   move.l 60(sp),-(sp)
    95de:	   |  |  |   move.l d0,-(sp)
    95e0:	   |  |  |   jsr 8d0 <put2bytes>
    95e6:	   |  |  |   addq.l #8,sp
			return TRUE;
    95e8:	   |  |  |   moveq #1,d0
    95ea:	/--|--|--|-- bra.w 96a8 <saveStackRef+0x11e>
		}
		s = s -> next;
    95ee:	|  |  |  \-> movea.l 48(sp),a0
    95f2:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    95f8:	|  |  |      addq.l #1,44(sp)
	while (s) {
    95fc:	|  |  \----> tst.l 48(sp)
    9600:	|  \-------- bne.s 95a0 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    9602:	|            move.l 60(sp),40(sp)
    9608:	|            clr.l 36(sp)
    960c:	|            move.l 19c62 <DOSBase>,d0
    9612:	|            movea.l d0,a6
    9614:	|            move.l 40(sp),d1
    9618:	|            move.l 36(sp),d2
    961c:	|            jsr -312(a6)
    9620:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    9624:	|            movea.l 56(sp),a0
    9628:	|            move.l (a0),d0
    962a:	|            move.l 60(sp),-(sp)
    962e:	|            move.l d0,-(sp)
    9630:	|            jsr 9526 <saveStack>
    9636:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    9638:	|            moveq #8,d0
    963a:	|            move.l d0,28(sp)
    963e:	|            clr.l 24(sp)
    9642:	|            move.l 19c5a <SysBase>,d0
    9648:	|            movea.l d0,a6
    964a:	|            move.l 28(sp),d0
    964e:	|            move.l 24(sp),d1
    9652:	|            jsr -684(a6)
    9656:	|            move.l d0,20(sp)
    965a:	|            move.l 20(sp),d0
    965e:	|            move.l d0,48(sp)
	stackLibTotal ++;
    9662:	|            move.l 19ce6 <stackLibTotal>,d0
    9668:	|            addq.l #1,d0
    966a:	|            move.l d0,19ce6 <stackLibTotal>
	if (! s) {
    9670:	|            tst.l 48(sp)
    9674:	|        /-- bne.s 9688 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    9676:	|        |   pea 163f0 <incbin_player_end+0x45a>
    967c:	|        |   jsr 12e08 <KPrintF>
    9682:	|        |   addq.l #4,sp
		return FALSE;
    9684:	|        |   clr.w d0
    9686:	+--------|-- bra.s 96a8 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    9688:	|        \-> move.l 19cea <stackLib>,d0
    968e:	|            movea.l 48(sp),a0
    9692:	|            move.l d0,4(a0)
	s -> stack = vs;
    9696:	|            movea.l 48(sp),a0
    969a:	|            move.l 56(sp),(a0)
	stackLib = s;
    969e:	|            move.l 48(sp),19cea <stackLib>
	return TRUE;
    96a6:	|            moveq #1,d0
}
    96a8:	\----------> move.l (sp)+,d2
    96aa:	             movea.l (sp)+,a6
    96ac:	             lea 44(sp),sp
    96b0:	             rts

000096b2 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    96b2:	          lea -12(sp),sp
    96b6:	          move.l a6,-(sp)
    96b8:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    96ba:	          move.l 28(sp),16(sp)
    96c0:	          movea.l 24(sp),a0
    96c4:	          move.l (a0),d0
    96c6:	          move.l d0,12(sp)
    96ca:	          move.l 19c62 <DOSBase>,d0
    96d0:	          movea.l d0,a6
    96d2:	          move.l 16(sp),d1
    96d6:	          move.l 12(sp),d2
    96da:	          jsr -312(a6)
    96de:	          move.l d0,8(sp)
	switch (from -> varType) {
    96e2:	          movea.l 24(sp),a0
    96e6:	          move.l (a0),d0
    96e8:	          moveq #9,d1
    96ea:	          cmp.l d0,d1
    96ec:	      /-- bcs.w 979c <saveVariable+0xea>
    96f0:	      |   add.l d0,d0
    96f2:	      |   movea.l d0,a0
    96f4:	      |   adda.l #38656,a0
    96fa:	      |   move.w (a0),d0
    96fc:	      |   jmp (9700 <saveVariable+0x4e>,pc,d0.w)
    9700:	      |   ori.l #1310740,(a0)+
    9706:	      |   ori.b #20,(20,a0,d0.w)
    970c:	      |   .short 0x004c
    970e:	      |   ori.b #126,(a4)
    9712:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    9716:	      |   ori.b #40,(a0)+
    971a:	      |   ori.b #47,d4
    971e:	      |   ori.b #0,(a4)+
    9722:	      |   jsr 958 <put4bytes>
    9728:	      |   addq.l #8,sp
		return TRUE;
    972a:	      |   moveq #1,d0
    972c:	/-----|-- bra.w 97d8 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    9730:	|     |   movea.l 24(sp),a0
    9734:	|     |   move.l 4(a0),d0
    9738:	|     |   move.l 28(sp),-(sp)
    973c:	|     |   move.l d0,-(sp)
    973e:	|     |   jsr bd8 <writeString>
    9744:	|     |   addq.l #8,sp
		return TRUE;
    9746:	|     |   moveq #1,d0
    9748:	+-----|-- bra.w 97d8 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    974c:	|     |   movea.l 24(sp),a0
    9750:	|     |   move.l 4(a0),d0
    9754:	|     |   move.l 28(sp),-(sp)
    9758:	|     |   move.l d0,-(sp)
    975a:	|     |   jsr 958a <saveStackRef>
    9760:	|     |   addq.l #8,sp
    9762:	+-----|-- bra.s 97d8 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    9764:	|     |   movea.l 24(sp),a0
    9768:	|     |   move.l 4(a0),d0
    976c:	|     |   move.l 28(sp),-(sp)
    9770:	|     |   move.l d0,-(sp)
    9772:	|     |   jsr 7928 <saveCostume>
    9778:	|     |   addq.l #8,sp
		return FALSE;
    977a:	|     |   clr.w d0
    977c:	+-----|-- bra.s 97d8 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    977e:	|     |   movea.l 24(sp),a0
    9782:	|     |   move.l 4(a0),d0
    9786:	|     |   move.l 28(sp),-(sp)
    978a:	|     |   move.l d0,-(sp)
    978c:	|     |   jsr 785e <saveAnim>
    9792:	|     |   addq.l #8,sp
		return FALSE;
    9794:	|     |   clr.w d0
    9796:	+-----|-- bra.s 97d8 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    9798:	|     |   clr.w d0
    979a:	+-----|-- bra.s 97d8 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    979c:	|     \-> movea.l 24(sp),a0
    97a0:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    97a2:	|         moveq #10,d1
    97a4:	|         cmp.l d0,d1
    97a6:	|  /----- bcs.s 97c0 <saveVariable+0x10e>
						typeName[from->varType] :
    97a8:	|  |      movea.l 24(sp),a0
    97ac:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    97ae:	|  |      add.l d0,d0
    97b0:	|  |      movea.l d0,a1
    97b2:	|  |      adda.l d0,a1
    97b4:	|  |      lea 18688 <typeName>,a0
    97ba:	|  |      move.l (0,a1,a0.l),d0
    97be:	|  |  /-- bra.s 97c6 <saveVariable+0x114>
    97c0:	|  \--|-> move.l #91157,d0
    97c6:	|     \-> move.l d0,-(sp)
    97c8:	|         pea 1641c <incbin_player_end+0x486>
    97ce:	|         jsr 12e08 <KPrintF>
    97d4:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    97d6:	|         moveq #1,d0
    97d8:	\-------> move.l (sp)+,d2
    97da:	          movea.l (sp)+,a6
    97dc:	          lea 12(sp),sp
    97e0:	          rts

000097e2 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    97e2:	moveq #0,d0
}
    97e4:	rts

000097e6 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    97e6:	nop
    97e8:	rts

000097ea <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    97ea:	nop
    97ec:	rts

000097ee <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    97ee:	moveq #1,d0
}
    97f0:	rts

000097f2 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    97f2:	nop
    97f4:	rts

000097f6 <saveSounds>:

void saveSounds (BPTR fp) {
    97f6:	lea -12(sp),sp
    97fa:	move.l a6,-(sp)
    97fc:	move.l d2,-(sp)
	FPutC (fp,0);
    97fe:	move.l 24(sp),16(sp)
    9804:	clr.l 12(sp)
    9808:	move.l 19c62 <DOSBase>,d0
    980e:	movea.l d0,a6
    9810:	move.l 16(sp),d1
    9814:	move.l 12(sp),d2
    9818:	jsr -312(a6)
    981c:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    9820:	move.l 18146 <defSoundVol>,d0
    9826:	move.l 24(sp),-(sp)
    982a:	move.l d0,-(sp)
    982c:	jsr 8d0 <put2bytes>
    9832:	addq.l #8,sp
	put2bytes (defVol, fp);
    9834:	move.l 18142 <defVol>,d0
    983a:	move.l 24(sp),-(sp)
    983e:	move.l d0,-(sp)
    9840:	jsr 8d0 <put2bytes>
    9846:	addq.l #8,sp
}
    9848:	nop
    984a:	move.l (sp)+,d2
    984c:	movea.l (sp)+,a6
    984e:	lea 12(sp),sp
    9852:	rts

00009854 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    9854:	move.l 4(sp),18142 <defVol>
}
    985c:	nop
    985e:	rts

00009860 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    9860:	move.l 4(sp),18146 <defSoundVol>
}
    9868:	nop
    986a:	rts

0000986c <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    986c:	nop
    986e:	rts

00009870 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    9870:	nop
    9872:	rts

00009874 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    9874:	nop
    9876:	rts

00009878 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    9878:	subq.l #4,sp
    987a:	move.l 12(sp),d0
    987e:	move.w d0,d0
    9880:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    9884:	moveq #1,d0
}
    9886:	addq.l #4,sp
    9888:	rts

0000988a <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    988a:	nop
    988c:	rts

0000988e <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    988e:	move.l 16(sp),-(sp)
    9892:	move.l 16(sp),-(sp)
    9896:	jsr df4 <CstBlankScreen>
    989c:	addq.l #8,sp
}
    989e:	nop
    98a0:	rts

000098a2 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    98a2:	pea 1643f <incbin_player_end+0x4a9>
    98a8:	jsr 12e08 <KPrintF>
    98ae:	addq.l #4,sp
}
    98b0:	nop
    98b2:	rts

000098b4 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    98b4:	movea.l 8(sp),a1
    98b8:	movea.l 12(sp),a0
    98bc:	move.l 8(sp),d1
    98c0:	move.l 4(sp),d0
    98c4:	move.l a1,-(sp)
    98c6:	move.l a0,-(sp)
    98c8:	move.l d1,-(sp)
    98ca:	move.l d0,-(sp)
    98cc:	jsr 16f0 <drawLine>
    98d2:	lea 16(sp),sp
}
    98d6:	nop
    98d8:	rts

000098da <drawVerticalLine>:

void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    98da:	movea.l 12(sp),a1
    98de:	movea.l 4(sp),a0
    98e2:	move.l 8(sp),d1
    98e6:	move.l 4(sp),d0
    98ea:	move.l a1,-(sp)
    98ec:	move.l a0,-(sp)
    98ee:	move.l d1,-(sp)
    98f0:	move.l d0,-(sp)
    98f2:	jsr 16f0 <drawLine>
    98f8:	lea 16(sp),sp
}
    98fc:	nop
    98fe:	rts

00009900 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    9900:	pea 16478 <line.c.05397aaf+0x18>
    9906:	jsr 12e08 <KPrintF>
    990c:	addq.l #4,sp
}
    990e:	nop
    9910:	rts

00009912 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    9912:	jsr 1680 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    9918:	pea 19cfe <backdropTextureName>
    991e:	pea 1 <_start+0x1>
    9922:	jsr 1872 <deleteTextures>
    9928:	addq.l #8,sp
	backdropTextureName = 0;
    992a:	clr.l 19cfe <backdropTextureName>
	backdropExists = FALSE;
    9930:	clr.w 19d02 <backdropExists>
}
    9936:	nop
    9938:	rts

0000993a <killParallax>:

void killParallax () {
    993a:	          lea -12(sp),sp
    993e:	          move.l a6,-(sp)
	while (parallaxStuff) {
    9940:	   /----- bra.s 99ac <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    9942:	/--|----> move.l 19d04 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    994a:	|  |      movea.l 12(sp),a0
    994e:	|  |      move.l 42(a0),d0
    9952:	|  |      move.l d0,19d04 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    9958:	|  |      move.l 12(sp),d0
    995c:	|  |      addq.l #4,d0
    995e:	|  |      move.l d0,-(sp)
    9960:	|  |      pea 1 <_start+0x1>
    9964:	|  |      jsr 1872 <deleteTextures>
    996a:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    996c:	|  |      movea.l 12(sp),a0
    9970:	|  |      move.l (a0),d0
    9972:	|  |  /-- beq.s 998c <killParallax+0x52>
    9974:	|  |  |   movea.l 12(sp),a0
    9978:	|  |  |   move.l (a0),8(sp)
    997c:	|  |  |   move.l 19c5a <SysBase>,d0
    9982:	|  |  |   movea.l d0,a6
    9984:	|  |  |   movea.l 8(sp),a1
    9988:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    998c:	|  |  \-> tst.l 12(sp)
    9990:	|  |  /-- beq.s 99a8 <killParallax+0x6e>
    9992:	|  |  |   move.l 12(sp),4(sp)
    9998:	|  |  |   move.l 19c5a <SysBase>,d0
    999e:	|  |  |   movea.l d0,a6
    99a0:	|  |  |   movea.l 4(sp),a1
    99a4:	|  |  |   jsr -690(a6)
		k = NULL;
    99a8:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    99ac:	|  \----> move.l 19d04 <parallaxStuff>,d0
    99b2:	\-------- bne.s 9942 <killParallax+0x8>
	}
}
    99b4:	          nop
    99b6:	          nop
    99b8:	          movea.l (sp)+,a6
    99ba:	          lea 12(sp),sp
    99be:	          rts

000099c0 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    99c0:	       move.l 4(sp),-(sp)
    99c4:	       jsr 47ce <openFileFromNum>
    99ca:	       addq.l #4,sp
    99cc:	       tst.l d0
    99ce:	   /-- bne.s 99e0 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    99d0:	   |   pea 16499 <line.c.05397aaf+0x39>
    99d6:	   |   jsr 12e08 <KPrintF>
    99dc:	   |   addq.l #4,sp
		return;
    99de:	/--|-- bra.s 9a00 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    99e0:	|  \-> move.l 19c42 <bigDataFile>,d0
    99e6:	|      move.l 12(sp),-(sp)
    99ea:	|      move.l 12(sp),-(sp)
    99ee:	|      move.l d0,-(sp)
    99f0:	|      jsr 1156 <CstLoadBackdrop>
    99f6:	|      lea 12(sp),sp
	finishAccess ();
    99fa:	|      jsr 46c6 <finishAccess>
	
}
    9a00:	\----> rts

00009a02 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    9a02:	subq.l #8,sp
    9a04:	movea.l 12(sp),a0
    9a08:	move.l 16(sp),d1
    9a0c:	move.l 20(sp),d0
    9a10:	movea.w a0,a0
    9a12:	move.w a0,6(sp)
    9a16:	move.w d1,d1
    9a18:	move.w d1,4(sp)
    9a1c:	move.w d0,d0
    9a1e:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    9a22:	pea 164e8 <line.c.05397aaf+0x88>
    9a28:	jsr 12e08 <KPrintF>
    9a2e:	addq.l #4,sp

}
    9a30:	nop
    9a32:	addq.l #8,sp
    9a34:	rts

00009a36 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    9a36:	pea 1650b <line.c.05397aaf+0xab>
    9a3c:	jsr 12e08 <KPrintF>
    9a42:	addq.l #4,sp
}
    9a44:	nop
    9a46:	rts

00009a48 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    9a48:	pea 19d08 <snapshotTextureName>
    9a4e:	pea 1 <_start+0x1>
    9a52:	jsr 1872 <deleteTextures>
    9a58:	addq.l #8,sp
	snapshotTextureName = 0;
    9a5a:	clr.l 19d08 <snapshotTextureName>
}
    9a60:	nop
    9a62:	rts

00009a64 <reserveBackdrop>:

BOOL reserveBackdrop () {
    9a64:	    lea -16(sp),sp
    9a68:	    move.l a6,-(sp)
	if(backdropTexture) FreeVec(backdropTexture);
    9a6a:	    move.l 19cf2 <backdropTexture>,d0
    9a70:	/-- beq.s 9a8a <reserveBackdrop+0x26>
    9a72:	|   move.l 19cf2 <backdropTexture>,16(sp)
    9a7a:	|   move.l 19c5a <SysBase>,d0
    9a80:	|   movea.l d0,a6
    9a82:	|   movea.l 16(sp),a1
    9a86:	|   jsr -690(a6)
	backdropTexture = AllocVec( sceneWidth*sceneHeight*4, MEMF_ANY );
    9a8a:	\-> move.l 19cf6 <sceneWidth>,d0
    9a90:	    move.l 19cfa <sceneHeight>,d1
    9a96:	    move.l d1,-(sp)
    9a98:	    move.l d0,-(sp)
    9a9a:	    jsr 138fe <__mulsi3>
    9aa0:	    addq.l #8,sp
    9aa2:	    add.l d0,d0
    9aa4:	    add.l d0,d0
    9aa6:	    move.l d0,12(sp)
    9aaa:	    clr.l 8(sp)
    9aae:	    move.l 19c5a <SysBase>,d0
    9ab4:	    movea.l d0,a6
    9ab6:	    move.l 12(sp),d0
    9aba:	    move.l 8(sp),d1
    9abe:	    jsr -684(a6)
    9ac2:	    move.l d0,4(sp)
    9ac6:	    move.l 4(sp),d0
    9aca:	    move.l d0,19cf2 <backdropTexture>

	return CstReserveBackdrop(sceneWidth, sceneHeight);
    9ad0:	    move.l 19cfa <sceneHeight>,d0
    9ad6:	    move.l d0,d1
    9ad8:	    move.l 19cf6 <sceneWidth>,d0
    9ade:	    move.l d1,-(sp)
    9ae0:	    move.l d0,-(sp)
    9ae2:	    jsr 1502 <CstReserveBackdrop>
    9ae8:	    addq.l #8,sp
}
    9aea:	    movea.l (sp)+,a6
    9aec:	    lea 16(sp),sp
    9af0:	    rts

00009af2 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    9af2:	jsr 9912 <killBackDrop>
	killParallax ();
    9af8:	jsr 993a <killParallax>
	killZBuffer ();
    9afe:	jsr 1ee2 <killZBuffer>
	sceneWidth = x;
    9b04:	move.l 4(sp),d0
    9b08:	move.l d0,19cf6 <sceneWidth>
	sceneHeight = y;	
    9b0e:	move.l 8(sp),d0
    9b12:	move.l d0,19cfa <sceneHeight>
	return reserveBackdrop();
    9b18:	jsr 9a64 <reserveBackdrop>
}
    9b1e:	rts

00009b20 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    9b20:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    9b22:	move.l 12(sp),-(sp)
    9b26:	jsr 6bc <get2bytes>
    9b2c:	addq.l #4,sp
    9b2e:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    9b32:	move.l 12(sp),-(sp)
    9b36:	jsr 6bc <get2bytes>
    9b3c:	addq.l #4,sp
    9b3e:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    9b40:	moveq #1,d0
}
    9b42:	addq.l #8,sp
    9b44:	rts

00009b46 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    9b46:	   /-> lea -12(sp),sp
    9b4a:	   |   move.l a6,-(sp)
    9b4c:	   |   move.l d2,-(sp)
	if (me) {
    9b4e:	   |   tst.l 24(sp)
    9b52:	/--|-- beq.w 9be8 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    9b56:	|  |   movea.l 24(sp),a0
    9b5a:	|  |   move.l 42(a0),d0
    9b5e:	|  |   move.l 28(sp),-(sp)
    9b62:	|  |   move.l d0,-(sp)
    9b64:	|  \-- jsr 9b46 <saveParallaxRecursive>(pc)
    9b68:	|      addq.l #8,sp
		FPutC (fp, 1);
    9b6a:	|      move.l 28(sp),16(sp)
    9b70:	|      moveq #1,d0
    9b72:	|      move.l d0,12(sp)
    9b76:	|      move.l 19c62 <DOSBase>,d0
    9b7c:	|      movea.l d0,a6
    9b7e:	|      move.l 16(sp),d1
    9b82:	|      move.l 12(sp),d2
    9b86:	|      jsr -312(a6)
    9b8a:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    9b8e:	|      movea.l 24(sp),a0
    9b92:	|      move.w 28(a0),d0
    9b96:	|      move.w d0,d0
    9b98:	|      andi.l #65535,d0
    9b9e:	|      move.l 28(sp),-(sp)
    9ba2:	|      move.l d0,-(sp)
    9ba4:	|      jsr 8d0 <put2bytes>
    9baa:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    9bac:	|      movea.l 24(sp),a0
    9bb0:	|      move.w 30(a0),d0
    9bb4:	|      move.w d0,d0
    9bb6:	|      andi.l #65535,d0
    9bbc:	|      move.l 28(sp),-(sp)
    9bc0:	|      move.l d0,-(sp)
    9bc2:	|      jsr 8d0 <put2bytes>
    9bc8:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    9bca:	|      movea.l 24(sp),a0
    9bce:	|      move.w 32(a0),d0
    9bd2:	|      move.w d0,d0
    9bd4:	|      andi.l #65535,d0
    9bda:	|      move.l 28(sp),-(sp)
    9bde:	|      move.l d0,-(sp)
    9be0:	|      jsr 8d0 <put2bytes>
    9be6:	|      addq.l #8,sp
	}
}
    9be8:	\----> nop
    9bea:	       move.l (sp)+,d2
    9bec:	       movea.l (sp)+,a6
    9bee:	       lea 12(sp),sp
    9bf2:	       rts

00009bf4 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    9bf4:	pea 16544 <line.c.05397aaf+0xe4>
    9bfa:	jsr 12e08 <KPrintF>
    9c00:	addq.l #4,sp
	return TRUE;
    9c02:	moveq #1,d0
    9c04:	rts

00009c06 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    9c06:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    9c08:	             move.l 19d0c <allObjectTypes>,(sp)

	while (huntType) {
    9c0e:	      /----- bra.s 9c26 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    9c10:	   /--|----> movea.l (sp),a0
    9c12:	   |  |      move.l 4(a0),d0
    9c16:	   |  |      cmp.l 8(sp),d0
    9c1a:	   |  |  /-- bne.s 9c20 <findObjectType+0x1a>
    9c1c:	   |  |  |   move.l (sp),d0
    9c1e:	/--|--|--|-- bra.s 9c36 <findObjectType+0x30>
		huntType = huntType -> next;
    9c20:	|  |  |  \-> movea.l (sp),a0
    9c22:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    9c26:	|  |  \----> tst.l (sp)
    9c28:	|  \-------- bne.s 9c10 <findObjectType+0xa>
	}

	return loadObjectType (i);
    9c2a:	|            move.l 8(sp),-(sp)
    9c2e:	|            jsr 9cf6 <loadObjectType>
    9c34:	|            addq.l #4,sp
}
    9c36:	\----------> addq.l #4,sp
    9c38:	             rts

00009c3a <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    9c3a:	             lea -12(sp),sp
	int i, num = 0;
    9c3e:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    9c42:	             move.l 20(sp),-(sp)
    9c46:	             jsr 9c06 <findObjectType>
    9c4c:	             addq.l #4,sp
    9c4e:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    9c50:	             clr.l 8(sp)
    9c54:	   /-------- bra.s 9c8a <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    9c56:	/--|-------> movea.l (sp),a0
    9c58:	|  |         move.l 38(a0),d1
    9c5c:	|  |         move.l 8(sp),d0
    9c60:	|  |         lsl.l #3,d0
    9c62:	|  |         movea.l d1,a0
    9c64:	|  |         adda.l d0,a0
    9c66:	|  |         move.l (a0),d0
    9c68:	|  |         cmp.l 16(sp),d0
    9c6c:	|  |  /----- bne.s 9c86 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    9c6e:	|  |  |      movea.l (sp),a0
    9c70:	|  |  |      move.l 38(a0),d1
    9c74:	|  |  |      move.l 8(sp),d0
    9c78:	|  |  |      lsl.l #3,d0
    9c7a:	|  |  |      movea.l d1,a0
    9c7c:	|  |  |      adda.l d0,a0
    9c7e:	|  |  |      move.l 4(a0),4(sp)
			break;
    9c84:	|  |  |  /-- bra.s 9c96 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    9c86:	|  |  \--|-> addq.l #1,8(sp)
    9c8a:	|  \-----|-> movea.l (sp),a0
    9c8c:	|        |   move.l 16(a0),d0
    9c90:	|        |   cmp.l 8(sp),d0
    9c94:	\--------|-- bgt.s 9c56 <getCombinationFunction+0x1c>
		}
	}

	return num;
    9c96:	         \-> move.l 4(sp),d0
}
    9c9a:	             lea 12(sp),sp
    9c9e:	             rts

00009ca0 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    9ca0:	moveq #1,d0
}
    9ca2:	rts

00009ca4 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    9ca4:	subq.l #8,sp
    9ca6:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    9ca8:	move.l 16(sp),-(sp)
    9cac:	jsr 6bc <get2bytes>
    9cb2:	addq.l #4,sp
    9cb4:	move.l d0,-(sp)
    9cb6:	jsr 9cf6 <loadObjectType>
    9cbc:	addq.l #4,sp
    9cbe:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    9cc2:	movea.l 8(sp),a0
    9cc6:	move.l (a0),4(sp)
    9cca:	move.l 19c5a <SysBase>,d0
    9cd0:	movea.l d0,a6
    9cd2:	movea.l 4(sp),a1
    9cd6:	jsr -690(a6)
	r -> screenName = readString (fp);
    9cda:	move.l 16(sp),-(sp)
    9cde:	jsr b02 <readString>
    9ce4:	addq.l #4,sp
    9ce6:	movea.l 8(sp),a0
    9cea:	move.l d0,(a0)
	return r;
    9cec:	move.l 8(sp),d0
}
    9cf0:	movea.l (sp)+,a6
    9cf2:	addq.l #8,sp
    9cf4:	rts

00009cf6 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    9cf6:	          lea -84(sp),sp
    9cfa:	          move.l a6,-(sp)
    9cfc:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    9cfe:	          moveq #42,d0
    9d00:	          move.l d0,84(sp)
    9d04:	          clr.l 80(sp)
    9d08:	          move.l 19c5a <SysBase>,d0
    9d0e:	          movea.l d0,a6
    9d10:	          move.l 84(sp),d0
    9d14:	          move.l 80(sp),d1
    9d18:	          jsr -684(a6)
    9d1c:	          move.l d0,76(sp)
    9d20:	          move.l 76(sp),d0
    9d24:	          move.l d0,72(sp)

    if (newType) {
    9d28:	/-------- beq.w 9fa2 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    9d2c:	|         move.l 96(sp),-(sp)
    9d30:	|         jsr 4896 <openObjectSlice>
    9d36:	|         addq.l #4,sp
    9d38:	|         tst.w d0
    9d3a:	+-------- beq.w 9fa2 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    9d3e:	|         move.l 19c42 <bigDataFile>,d0
    9d44:	|         move.l d0,-(sp)
    9d46:	|         jsr 6bc <get2bytes>
    9d4c:	|         addq.l #4,sp
    9d4e:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    9d52:	|         move.l 19c42 <bigDataFile>,64(sp)
    9d5a:	|         move.l 19c62 <DOSBase>,d0
    9d60:	|         movea.l d0,a6
    9d62:	|         move.l 64(sp),d1
    9d66:	|         jsr -306(a6)
    9d6a:	|         move.l d0,60(sp)
    9d6e:	|         move.l 60(sp),d0
    9d72:	|         move.l d0,d0
    9d74:	|         movea.l 72(sp),a0
    9d78:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    9d7c:	|         move.l 19c42 <bigDataFile>,56(sp)
    9d84:	|         move.l 19c62 <DOSBase>,d0
    9d8a:	|         movea.l d0,a6
    9d8c:	|         move.l 56(sp),d1
    9d90:	|         jsr -306(a6)
    9d94:	|         move.l d0,52(sp)
    9d98:	|         move.l 52(sp),d0
    9d9c:	|         move.l d0,d0
    9d9e:	|         movea.l 72(sp),a0
    9da2:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    9da6:	|         move.l 19c42 <bigDataFile>,48(sp)
    9dae:	|         move.l 19c62 <DOSBase>,d0
    9db4:	|         movea.l d0,a6
    9db6:	|         move.l 48(sp),d1
    9dba:	|         jsr -306(a6)
    9dbe:	|         move.l d0,44(sp)
    9dc2:	|         move.l 44(sp),d0
    9dc6:	|         move.l d0,d0
    9dc8:	|         movea.l 72(sp),a0
    9dcc:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    9dd0:	|         move.l 19c42 <bigDataFile>,40(sp)
    9dd8:	|         move.l 19c62 <DOSBase>,d0
    9dde:	|         movea.l d0,a6
    9de0:	|         move.l 40(sp),d1
    9de4:	|         jsr -306(a6)
    9de8:	|         move.l d0,36(sp)
    9dec:	|         move.l 36(sp),d0
    9df0:	|         movea.l 72(sp),a0
    9df4:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    9df8:	|         move.l 19c42 <bigDataFile>,32(sp)
    9e00:	|         move.l 19c62 <DOSBase>,d0
    9e06:	|         movea.l d0,a6
    9e08:	|         move.l 32(sp),d1
    9e0c:	|         jsr -306(a6)
    9e10:	|         move.l d0,28(sp)
    9e14:	|         move.l 28(sp),d0
    9e18:	|         movea.l 72(sp),a0
    9e1c:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    9e20:	|         move.l 19c42 <bigDataFile>,d0
    9e26:	|         move.l d0,-(sp)
    9e28:	|         jsr 718 <get4bytes>
    9e2e:	|         addq.l #4,sp
    9e30:	|         movea.l 72(sp),a0
    9e34:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    9e38:	|         move.l 19c42 <bigDataFile>,d0
    9e3e:	|         move.l d0,-(sp)
    9e40:	|         jsr 6bc <get2bytes>
    9e46:	|         addq.l #4,sp
    9e48:	|         movea.l 72(sp),a0
    9e4c:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    9e50:	|         move.l 19c42 <bigDataFile>,24(sp)
    9e58:	|         move.l 19c62 <DOSBase>,d0
    9e5e:	|         movea.l d0,a6
    9e60:	|         move.l 24(sp),d1
    9e64:	|         jsr -306(a6)
    9e68:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    9e6c:	|         move.l 19c42 <bigDataFile>,d0
    9e72:	|         move.l d0,-(sp)
    9e74:	|         jsr 7d8 <getFloat>
    9e7a:	|         addq.l #4,sp
            getFloat(bigDataFile);
    9e7c:	|         move.l 19c42 <bigDataFile>,d0
    9e82:	|         move.l d0,-(sp)
    9e84:	|         jsr 7d8 <getFloat>
    9e8a:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    9e8c:	|         move.l 19c42 <bigDataFile>,d0
    9e92:	|         move.l d0,-(sp)
    9e94:	|         jsr 6bc <get2bytes>
    9e9a:	|         addq.l #4,sp
    9e9c:	|         move.l d0,d0
    9e9e:	|         movea.l 72(sp),a0
    9ea2:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    9ea6:	|         move.l 19c42 <bigDataFile>,d0
    9eac:	|         move.l d0,-(sp)
    9eae:	|         jsr 6bc <get2bytes>
    9eb4:	|         addq.l #4,sp
    9eb6:	|         movea.l 72(sp),a0
    9eba:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    9ebe:	|         movea.l 72(sp),a0
    9ec2:	|         move.l 16(a0),d0
    9ec6:	|  /----- beq.s 9ef8 <loadObjectType+0x202>
    9ec8:	|  |      movea.l 72(sp),a0
    9ecc:	|  |      move.l 16(a0),d0
    9ed0:	|  |      lsl.l #3,d0
    9ed2:	|  |      move.l d0,16(sp)
    9ed6:	|  |      clr.l 12(sp)
    9eda:	|  |      move.l 19c5a <SysBase>,d0
    9ee0:	|  |      movea.l d0,a6
    9ee2:	|  |      move.l 16(sp),d0
    9ee6:	|  |      move.l 12(sp),d1
    9eea:	|  |      jsr -684(a6)
    9eee:	|  |      move.l d0,8(sp)
    9ef2:	|  |      move.l 8(sp),d0
    9ef6:	|  |  /-- bra.s 9efa <loadObjectType+0x204>
    9ef8:	|  \--|-> moveq #0,d0
    9efa:	|     \-> movea.l 72(sp),a0
    9efe:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    9f02:	|         clr.l 88(sp)
    9f06:	|     /-- bra.s 9f56 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    9f08:	|  /--|-> move.l 19c42 <bigDataFile>,d1
    9f0e:	|  |  |   movea.l 72(sp),a0
    9f12:	|  |  |   movea.l 38(a0),a0
    9f16:	|  |  |   move.l 88(sp),d0
    9f1a:	|  |  |   lsl.l #3,d0
    9f1c:	|  |  |   lea (0,a0,d0.l),a2
    9f20:	|  |  |   move.l d1,-(sp)
    9f22:	|  |  |   jsr 6bc <get2bytes>
    9f28:	|  |  |   addq.l #4,sp
    9f2a:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    9f2c:	|  |  |   move.l 19c42 <bigDataFile>,d1
    9f32:	|  |  |   movea.l 72(sp),a0
    9f36:	|  |  |   movea.l 38(a0),a0
    9f3a:	|  |  |   move.l 88(sp),d0
    9f3e:	|  |  |   lsl.l #3,d0
    9f40:	|  |  |   lea (0,a0,d0.l),a2
    9f44:	|  |  |   move.l d1,-(sp)
    9f46:	|  |  |   jsr 6bc <get2bytes>
    9f4c:	|  |  |   addq.l #4,sp
    9f4e:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    9f52:	|  |  |   addq.l #1,88(sp)
    9f56:	|  |  \-> movea.l 72(sp),a0
    9f5a:	|  |      move.l 16(a0),d0
    9f5e:	|  |      cmp.l 88(sp),d0
    9f62:	|  \----- bgt.s 9f08 <loadObjectType+0x212>
            }
            finishAccess();
    9f64:	|         jsr 46c6 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    9f6a:	|         move.l 68(sp),-(sp)
    9f6e:	|         jsr 46d0 <getNumberedString>
    9f74:	|         addq.l #4,sp
    9f76:	|         movea.l 72(sp),a0
    9f7a:	|         move.l d0,(a0)
            newType->objectNum = i;
    9f7c:	|         movea.l 72(sp),a0
    9f80:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    9f86:	|         move.l 19d0c <allObjectTypes>,d0
    9f8c:	|         movea.l 72(sp),a0
    9f90:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    9f94:	|         move.l 72(sp),19d0c <allObjectTypes>
            return newType;
    9f9c:	|         move.l 72(sp),d0
    9fa0:	|     /-- bra.s 9fa4 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    9fa2:	\-----|-> moveq #0,d0
}
    9fa4:	      \-> movea.l (sp)+,a2
    9fa6:	          movea.l (sp)+,a6
    9fa8:	          lea 84(sp),sp
    9fac:	          rts

00009fae <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    9fae:	             lea -16(sp),sp
    9fb2:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    9fb4:	             move.l #105740,16(sp)

	while (* huntRegion) {
    9fbc:	   /-------- bra.s a030 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    9fbe:	/--|-------> movea.l 16(sp),a0
    9fc2:	|  |         move.l (a0),d0
    9fc4:	|  |         cmp.l 24(sp),d0
    9fc8:	|  |  /----- bne.s a022 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    9fca:	|  |  |      movea.l 24(sp),a0
    9fce:	|  |  |      move.l 8(a0),d0
    9fd2:	|  |  |      movea.l 16(sp),a0
    9fd6:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    9fd8:	|  |  |      movea.l 24(sp),a0
    9fdc:	|  |  |      move.l 38(a0),12(sp)
    9fe2:	|  |  |      move.l 19c5a <SysBase>,d0
    9fe8:	|  |  |      movea.l d0,a6
    9fea:	|  |  |      movea.l 12(sp),a1
    9fee:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    9ff2:	|  |  |      movea.l 24(sp),a0
    9ff6:	|  |  |      move.l (a0),8(sp)
    9ffa:	|  |  |      move.l 19c5a <SysBase>,d0
    a000:	|  |  |      movea.l d0,a6
    a002:	|  |  |      movea.l 8(sp),a1
    a006:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    a00a:	|  |  |      move.l 24(sp),4(sp)
    a010:	|  |  |      move.l 19c5a <SysBase>,d0
    a016:	|  |  |      movea.l d0,a6
    a018:	|  |  |      movea.l 4(sp),a1
    a01c:	|  |  |      jsr -690(a6)
			return;
    a020:	|  |  |  /-- bra.s a046 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    a022:	|  |  \--|-> movea.l 16(sp),a0
    a026:	|  |     |   move.l (a0),d0
    a028:	|  |     |   move.l d0,d1
    a02a:	|  |     |   addq.l #8,d1
    a02c:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    a030:	|  \-----|-> movea.l 16(sp),a0
    a034:	|        |   move.l (a0),d0
    a036:	\--------|-- bne.s 9fbe <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    a038:	         |   pea 1656b <line.c.05397aaf+0x10b>
    a03e:	         |   jsr 12e08 <KPrintF>
    a044:	         |   addq.l #4,sp
}
    a046:	         \-> movea.l (sp)+,a6
    a048:	             lea 16(sp),sp
    a04c:	             rts

0000a04e <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    a04e:	movea.l 4(sp),a0
    a052:	move.l 4(a0),d0
    a056:	move.l 8(sp),-(sp)
    a05a:	move.l d0,-(sp)
    a05c:	jsr 8d0 <put2bytes>
    a062:	addq.l #8,sp
	writeString (r -> screenName, fp);
    a064:	movea.l 4(sp),a0
    a068:	move.l (a0),d0
    a06a:	move.l 8(sp),-(sp)
    a06e:	move.l d0,-(sp)
    a070:	jsr bd8 <writeString>
    a076:	addq.l #8,sp
    a078:	nop
    a07a:	rts

0000a07c <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    a07c:	                         lea -112(sp),sp
    a080:	                         move.l a6,-(sp)
    a082:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    a084:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    a088:	                         move.w 19d12 <saveEncoding>,d0
    a08e:	                  /----- beq.s a098 <fileToStack+0x1c>
    a090:	                  |      move.l #91537,d0
    a096:	                  |  /-- bra.s a09e <fileToStack+0x22>
    a098:	                  \--|-> move.l #91563,d0
    a09e:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    a0a2:	                         move.l 124(sp),112(sp)
    a0a8:	                         move.l #1005,108(sp)
    a0b0:	                         move.l 19c62 <DOSBase>,d0
    a0b6:	                         movea.l d0,a6
    a0b8:	                         move.l 112(sp),d1
    a0bc:	                         move.l 108(sp),d2
    a0c0:	                         jsr -30(a6)
    a0c4:	                         move.l d0,104(sp)
    a0c8:	                         move.l 104(sp),d0
    a0cc:	                         move.l d0,100(sp)
    if (!fp) {
    a0d0:	                     /-- bne.s a0ea <fileToStack+0x6e>
        KPrintF("No such file", filename);
    a0d2:	                     |   move.l 124(sp),-(sp)
    a0d6:	                     |   pea 165c2 <line.c.05397aaf+0x162>
    a0dc:	                     |   jsr 12e08 <KPrintF>
    a0e2:	                     |   addq.l #8,sp
        return FALSE;
    a0e4:	                     |   clr.w d0
    a0e6:	/--------------------|-- bra.w a3e0 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    a0ea:	|                    \-> move.w 19d12 <saveEncoding>,d0
    a0f0:	|                        move.l d0,d0
    a0f2:	|                        move.b d0,19d10 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    a0f8:	|                        move.w 19d12 <saveEncoding>,d0
    a0fe:	|                        lsr.w #8,d0
    a100:	|                        move.l d0,d0
    a102:	|                        move.b d0,19d11 <encode2>

    while (*checker) {
    a108:	|                 /----- bra.s a16c <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    a10a:	|              /--|----> move.l 100(sp),30(sp)
    a110:	|              |  |      move.l 19c62 <DOSBase>,d0
    a116:	|              |  |      movea.l d0,a6
    a118:	|              |  |      move.l 30(sp),d1
    a11c:	|              |  |      jsr -306(a6)
    a120:	|              |  |      move.l d0,26(sp)
    a124:	|              |  |      move.l 26(sp),d1
    a128:	|              |  |      movea.l 116(sp),a0
    a12c:	|              |  |      move.b (a0),d0
    a12e:	|              |  |      ext.w d0
    a130:	|              |  |      movea.w d0,a0
    a132:	|              |  |      cmpa.l d1,a0
    a134:	|              |  |  /-- beq.s a168 <fileToStack+0xec>
            Close(fp);
    a136:	|              |  |  |   move.l 100(sp),22(sp)
    a13c:	|              |  |  |   move.l 19c62 <DOSBase>,d0
    a142:	|              |  |  |   movea.l d0,a6
    a144:	|              |  |  |   move.l 22(sp),d1
    a148:	|              |  |  |   jsr -36(a6)
    a14c:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    a150:	|              |  |  |   move.l 124(sp),-(sp)
    a154:	|              |  |  |   pea 165cf <line.c.05397aaf+0x16f>
    a15a:	|              |  |  |   jsr 12e08 <KPrintF>
    a160:	|              |  |  |   addq.l #8,sp
            return FALSE;
    a162:	|              |  |  |   clr.w d0
    a164:	+--------------|--|--|-- bra.w a3e0 <fileToStack+0x364>
        }
        checker++;
    a168:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    a16c:	|              |  \----> movea.l 116(sp),a0
    a170:	|              |         move.b (a0),d0
    a172:	|              \-------- bne.s a10a <fileToStack+0x8e>
    }

    if (saveEncoding) {
    a174:	|                        move.w 19d12 <saveEncoding>,d0
    a17a:	|  /-------------------- beq.s a1ee <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    a17c:	|  |                     move.l 100(sp),-(sp)
    a180:	|  |                     jsr a3ea <readStringEncoded>
    a186:	|  |                     addq.l #4,sp
    a188:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    a18c:	|  |                     pea 16610 <line.c.05397aaf+0x1b0>
    a192:	|  |                     move.l 100(sp),-(sp)
    a196:	|  |                     jsr 10260 <strcmp>
    a19c:	|  |                     addq.l #8,sp
    a19e:	|  |                     tst.l d0
    a1a0:	|  |                 /-- beq.s a1d4 <fileToStack+0x158>
            Close(fp);
    a1a2:	|  |                 |   move.l 100(sp),88(sp)
    a1a8:	|  |                 |   move.l 19c62 <DOSBase>,d0
    a1ae:	|  |                 |   movea.l d0,a6
    a1b0:	|  |                 |   move.l 88(sp),d1
    a1b4:	|  |                 |   jsr -36(a6)
    a1b8:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    a1bc:	|  |                 |   move.l 124(sp),-(sp)
    a1c0:	|  |                 |   pea 1661f <line.c.05397aaf+0x1bf>
    a1c6:	|  |                 |   jsr 12e08 <KPrintF>
    a1cc:	|  |                 |   addq.l #8,sp
            return FALSE;
    a1ce:	|  |                 |   clr.w d0
    a1d0:	+--|-----------------|-- bra.w a3e0 <fileToStack+0x364>
        }
        FreeVec(checker);
    a1d4:	|  |                 \-> move.l 96(sp),92(sp)
    a1da:	|  |                     move.l 19c5a <SysBase>,d0
    a1e0:	|  |                     movea.l d0,a6
    a1e2:	|  |                     movea.l 92(sp),a1
    a1e6:	|  |                     jsr -690(a6)
        checker = NULL;
    a1ea:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    a1ee:	|  >-------------------> move.w 19d12 <saveEncoding>,d0
    a1f4:	|  |     /-------------- beq.w a328 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    a1f8:	|  |     |               move.l 100(sp),76(sp)
    a1fe:	|  |     |               move.l 19c62 <DOSBase>,d0
    a204:	|  |     |               movea.l d0,a6
    a206:	|  |     |               move.l 76(sp),d1
    a20a:	|  |     |               jsr -306(a6)
    a20e:	|  |     |               move.l d0,72(sp)
    a212:	|  |     |               move.l 72(sp),d0
    a216:	|  |     |               move.b 19d10 <encode1>,d1
    a21c:	|  |     |               ext.w d1
    a21e:	|  |     |               ext.l d1
    a220:	|  |     |               move.l d0,d2
    a222:	|  |     |               eor.l d1,d2
    a224:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    a228:	|  |     |               moveq #-1,d0
    a22a:	|  |     |               cmp.l 68(sp),d0
    a22e:	|  |  /--|-------------- beq.w a3be <fileToStack+0x342>

            char i = (char) tmp;
    a232:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    a238:	|  |  |  |               move.b 67(sp),d0
    a23c:	|  |  |  |               ext.w d0
    a23e:	|  |  |  |               movea.w d0,a0
    a240:	|  |  |  |               moveq #2,d2
    a242:	|  |  |  |               cmp.l a0,d2
    a244:	|  |  |  |     /-------- beq.s a2c0 <fileToStack+0x244>
    a246:	|  |  |  |     |         moveq #2,d0
    a248:	|  |  |  |     |         cmp.l a0,d0
    a24a:	|  |  |  |  /--|-------- blt.w a2f6 <fileToStack+0x27a>
    a24e:	|  |  |  |  |  |         cmpa.w #0,a0
    a252:	|  |  |  |  |  |     /-- beq.s a25e <fileToStack+0x1e2>
    a254:	|  |  |  |  |  |     |   moveq #1,d2
    a256:	|  |  |  |  |  |     |   cmp.l a0,d2
    a258:	|  |  |  |  |  |  /--|-- beq.s a29a <fileToStack+0x21e>
    a25a:	|  |  |  |  +--|--|--|-- bra.w a2f6 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    a25e:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    a262:	|  |  |  |  |  |  |      jsr a3ea <readStringEncoded>
    a268:	|  |  |  |  |  |  |      addq.l #4,sp
    a26a:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    a26e:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    a272:	|  |  |  |  |  |  |      lea 14(sp),a0
    a276:	|  |  |  |  |  |  |      move.l a0,-(sp)
    a278:	|  |  |  |  |  |  |      jsr 10fd6 <makeTextVar>
    a27e:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    a280:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    a286:	|  |  |  |  |  |  |      move.l 19c5a <SysBase>,d0
    a28c:	|  |  |  |  |  |  |      movea.l d0,a6
    a28e:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    a292:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    a296:	|  |  |  |  |  |  |  /-- bra.w a34e <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    a29a:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    a29e:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    a2a4:	|  |  |  |  |  |     |   addq.l #4,sp
    a2a6:	|  |  |  |  |  |     |   move.l d0,-(sp)
    a2a8:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    a2ac:	|  |  |  |  |  |     |   lea 18(sp),a0
    a2b0:	|  |  |  |  |  |     |   move.l a0,-(sp)
    a2b2:	|  |  |  |  |  |     |   jsr 116a6 <setVariable>
    a2b8:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    a2bc:	|  |  |  |  |  |     +-- bra.w a34e <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    a2c0:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    a2c6:	|  |  |  |  |        |   move.l 19c62 <DOSBase>,d0
    a2cc:	|  |  |  |  |        |   movea.l d0,a6
    a2ce:	|  |  |  |  |        |   move.l 62(sp),d1
    a2d2:	|  |  |  |  |        |   jsr -306(a6)
    a2d6:	|  |  |  |  |        |   move.l d0,58(sp)
    a2da:	|  |  |  |  |        |   move.l 58(sp),d0
    a2de:	|  |  |  |  |        |   move.l d0,-(sp)
    a2e0:	|  |  |  |  |        |   pea 1 <_start+0x1>
    a2e4:	|  |  |  |  |        |   lea 18(sp),a0
    a2e8:	|  |  |  |  |        |   move.l a0,-(sp)
    a2ea:	|  |  |  |  |        |   jsr 116a6 <setVariable>
    a2f0:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    a2f4:	|  |  |  |  |        +-- bra.s a34e <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    a2f6:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    a2fa:	|  |  |  |           |   pea 166a1 <line.c.05397aaf+0x241>
    a300:	|  |  |  |           |   jsr 12e08 <KPrintF>
    a306:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    a308:	|  |  |  |           |   move.l 100(sp),46(sp)
    a30e:	|  |  |  |           |   move.l 19c62 <DOSBase>,d0
    a314:	|  |  |  |           |   movea.l d0,a6
    a316:	|  |  |  |           |   move.l 46(sp),d1
    a31a:	|  |  |  |           |   jsr -36(a6)
    a31e:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    a322:	|  |  |  |           |   clr.w d0
    a324:	+--|--|--|-----------|-- bra.w a3e0 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    a328:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    a32c:	|  |  |              |   jsr a4b0 <readTextPlain>
    a332:	|  |  |              |   addq.l #4,sp
    a334:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    a338:	|  |  |        /-----|-- beq.w a3c2 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    a33c:	|  |  |        |     |   move.l 80(sp),-(sp)
    a340:	|  |  |        |     |   lea 14(sp),a0
    a344:	|  |  |        |     |   move.l a0,-(sp)
    a346:	|  |  |        |     |   jsr 10fd6 <makeTextVar>
    a34c:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    a34e:	|  |  |        |     \-> movea.l 128(sp),a0
    a352:	|  |  |        |         move.l (a0),d0
    a354:	|  |  |        |  /----- bne.s a384 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    a356:	|  |  |        |  |      move.l 128(sp),d0
    a35a:	|  |  |        |  |      move.l d0,-(sp)
    a35c:	|  |  |        |  |      lea 14(sp),a0
    a360:	|  |  |        |  |      move.l a0,-(sp)
    a362:	|  |  |        |  |      jsr 10676 <addVarToStackQuick>
    a368:	|  |  |        |  |      addq.l #8,sp
    a36a:	|  |  |        |  |      tst.w d0
    a36c:	|  |  |        |  |  /-- bne.s a372 <fileToStack+0x2f6>
    a36e:	|  |  |        |  |  |   clr.w d0
    a370:	+--|--|--------|--|--|-- bra.s a3e0 <fileToStack+0x364>
            sH->last = sH->first;
    a372:	|  |  |        |  |  \-> movea.l 128(sp),a0
    a376:	|  |  |        |  |      move.l (a0),d0
    a378:	|  |  |        |  |      movea.l 128(sp),a0
    a37c:	|  |  |        |  |      move.l d0,4(a0)
    a380:	|  +--|--------|--|----- bra.w a1ee <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    a384:	|  |  |        |  \----> movea.l 128(sp),a0
    a388:	|  |  |        |         move.l 4(a0),d0
    a38c:	|  |  |        |         addq.l #8,d0
    a38e:	|  |  |        |         move.l d0,-(sp)
    a390:	|  |  |        |         lea 14(sp),a0
    a394:	|  |  |        |         move.l a0,-(sp)
    a396:	|  |  |        |         jsr 10676 <addVarToStackQuick>
    a39c:	|  |  |        |         addq.l #8,sp
    a39e:	|  |  |        |         tst.w d0
    a3a0:	|  |  |        |     /-- bne.s a3a6 <fileToStack+0x32a>
    a3a2:	|  |  |        |     |   clr.w d0
    a3a4:	+--|--|--------|-----|-- bra.s a3e0 <fileToStack+0x364>
            sH->last = sH->last->next;
    a3a6:	|  |  |        |     \-> movea.l 128(sp),a0
    a3aa:	|  |  |        |         movea.l 4(a0),a0
    a3ae:	|  |  |        |         move.l 8(a0),d0
    a3b2:	|  |  |        |         movea.l 128(sp),a0
    a3b6:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    a3ba:	|  \--|--------|-------- bra.w a1ee <fileToStack+0x172>
            if (tmp == -1) break;
    a3be:	|     \--------|-------> nop
    a3c0:	|              |     /-- bra.s a3c4 <fileToStack+0x348>
            if (!line) break;
    a3c2:	|              \-----|-> nop
        }
    }
    Close(fp);
    a3c4:	|                    \-> move.l 100(sp),38(sp)
    a3ca:	|                        move.l 19c62 <DOSBase>,d0
    a3d0:	|                        movea.l d0,a6
    a3d2:	|                        move.l 38(sp),d1
    a3d6:	|                        jsr -36(a6)
    a3da:	|                        move.l d0,34(sp)
    return TRUE;
    a3de:	|                        moveq #1,d0
}
    a3e0:	\----------------------> move.l (sp)+,d2
    a3e2:	                         movea.l (sp)+,a6
    a3e4:	                         lea 112(sp),sp
    a3e8:	                         rts

0000a3ea <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    a3ea:	          lea -32(sp),sp
    a3ee:	          move.l a6,-(sp)
    a3f0:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    a3f2:	          move.l 44(sp),-(sp)
    a3f6:	          jsr 6bc <get2bytes>
    a3fc:	          addq.l #4,sp
    a3fe:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    a402:	          move.l 32(sp),d0
    a406:	          addq.l #1,d0
    a408:	          move.l d0,28(sp)
    a40c:	          clr.l 24(sp)
    a410:	          move.l 19c5a <SysBase>,d0
    a416:	          movea.l d0,a6
    a418:	          move.l 28(sp),d0
    a41c:	          move.l 24(sp),d1
    a420:	          jsr -684(a6)
    a424:	          move.l d0,20(sp)
    a428:	          move.l 20(sp),d0
    a42c:	          move.l d0,16(sp)
    if (!s) return NULL;
    a430:	      /-- bne.s a436 <readStringEncoded+0x4c>
    a432:	      |   moveq #0,d0
    a434:	/-----|-- bra.s a4a6 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    a436:	|     \-> clr.l 36(sp)
    a43a:	|     /-- bra.s a48c <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    a43c:	|  /--|-> move.l 44(sp),12(sp)
    a442:	|  |  |   move.l 19c62 <DOSBase>,d0
    a448:	|  |  |   movea.l d0,a6
    a44a:	|  |  |   move.l 12(sp),d1
    a44e:	|  |  |   jsr -306(a6)
    a452:	|  |  |   move.l d0,8(sp)
    a456:	|  |  |   move.l 8(sp),d0
    a45a:	|  |  |   move.l d0,d1
    a45c:	|  |  |   move.b 19d10 <encode1>,d2
    a462:	|  |  |   move.l 36(sp),d0
    a466:	|  |  |   movea.l 16(sp),a0
    a46a:	|  |  |   adda.l d0,a0
    a46c:	|  |  |   move.b d1,d0
    a46e:	|  |  |   eor.b d2,d0
    a470:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    a472:	|  |  |   move.b 19d10 <encode1>,d0
    a478:	|  |  |   move.b d0,d1
    a47a:	|  |  |   move.b 19d11 <encode2>,d0
    a480:	|  |  |   add.b d1,d0
    a482:	|  |  |   move.b d0,19d10 <encode1>
    for (a = 0; a < len; a++) {
    a488:	|  |  |   addq.l #1,36(sp)
    a48c:	|  |  \-> move.l 36(sp),d0
    a490:	|  |      cmp.l 32(sp),d0
    a494:	|  \----- blt.s a43c <readStringEncoded+0x52>
    }
    s[len] = 0;
    a496:	|         move.l 32(sp),d0
    a49a:	|         movea.l 16(sp),a0
    a49e:	|         adda.l d0,a0
    a4a0:	|         clr.b (a0)
    return s;
    a4a2:	|         move.l 16(sp),d0
}
    a4a6:	\-------> move.l (sp)+,d2
    a4a8:	          movea.l (sp)+,a6
    a4aa:	          lea 32(sp),sp
    a4ae:	          rts

0000a4b0 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    a4b0:	             lea -104(sp),sp
    a4b4:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    a4b8:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    a4bc:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    a4c2:	             move.l 124(sp),106(sp)
    a4c8:	             clr.l 102(sp)
    a4cc:	             clr.l 98(sp)
    a4d0:	             move.l 19c62 <DOSBase>,d0
    a4d6:	             movea.l d0,a6
    a4d8:	             move.l 106(sp),d1
    a4dc:	             move.l 102(sp),d2
    a4e0:	             move.l 98(sp),d3
    a4e4:	             jsr -66(a6)
    a4e8:	             move.l d0,94(sp)
    a4ec:	             move.l 94(sp),d0
    a4f0:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    a4f4:	   /-------- bra.s a538 <readTextPlain+0x88>
        tmp = FGetC(fp);
    a4f6:	/--|-------> move.l 124(sp),22(sp)
    a4fc:	|  |         move.l 19c62 <DOSBase>,d0
    a502:	|  |         movea.l d0,a6
    a504:	|  |         move.l 22(sp),d1
    a508:	|  |         jsr -306(a6)
    a50c:	|  |         move.l d0,18(sp)
    a510:	|  |         move.l 18(sp),d0
    a514:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    a518:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    a51e:	|  |         cmpi.b #10,17(sp)
    a524:	|  |  /----- beq.s a52e <readTextPlain+0x7e>
    a526:	|  |  |      moveq #-1,d0
    a528:	|  |  |      cmp.l 110(sp),d0
    a52c:	|  |  |  /-- bne.s a534 <readTextPlain+0x84>
            keepGoing = FALSE;
    a52e:	|  |  \--|-> clr.w 114(sp)
    a532:	|  +-----|-- bra.s a538 <readTextPlain+0x88>
        } else {
            stringSize++;
    a534:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    a538:	|  \-------> tst.w 114(sp)
    a53c:	\----------- bne.s a4f6 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    a53e:	             tst.l 116(sp)
    a542:	         /-- bne.s a552 <readTextPlain+0xa2>
    a544:	         |   moveq #-1,d0
    a546:	         |   cmp.l 110(sp),d0
    a54a:	         +-- bne.s a552 <readTextPlain+0xa2>
        return NULL;
    a54c:	         |   moveq #0,d0
    a54e:	      /--|-- bra.w a638 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    a552:	      |  \-> move.l 124(sp),86(sp)
    a558:	      |      move.l 90(sp),82(sp)
    a55e:	      |      moveq #-1,d0
    a560:	      |      move.l d0,78(sp)
    a564:	      |      move.l 19c62 <DOSBase>,d0
    a56a:	      |      movea.l d0,a6
    a56c:	      |      move.l 86(sp),d1
    a570:	      |      move.l 82(sp),d2
    a574:	      |      move.l 78(sp),d3
    a578:	      |      jsr -66(a6)
    a57c:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    a580:	      |      move.l 116(sp),d0
    a584:	      |      addq.l #1,d0
    a586:	      |      move.l d0,70(sp)
    a58a:	      |      clr.l 66(sp)
    a58e:	      |      move.l 19c5a <SysBase>,d0
    a594:	      |      movea.l d0,a6
    a596:	      |      move.l 70(sp),d0
    a59a:	      |      move.l 66(sp),d1
    a59e:	      |      jsr -684(a6)
    a5a2:	      |      move.l d0,62(sp)
    a5a6:	      |      move.l 62(sp),d0
    a5aa:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    a5ae:	      |  /-- bne.s a5b6 <readTextPlain+0x106>
    a5b0:	      |  |   moveq #0,d0
    a5b2:	      +--|-- bra.w a638 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    a5b6:	      |  \-> move.l 124(sp),54(sp)
    a5bc:	      |      move.l 58(sp),50(sp)
    a5c2:	      |      moveq #1,d0
    a5c4:	      |      move.l d0,46(sp)
    a5c8:	      |      move.l 116(sp),42(sp)
    a5ce:	      |      move.l 19c62 <DOSBase>,d0
    a5d4:	      |      movea.l d0,a6
    a5d6:	      |      move.l 54(sp),d1
    a5da:	      |      move.l 50(sp),d2
    a5de:	      |      move.l 46(sp),d3
    a5e2:	      |      move.l 42(sp),d4
    a5e6:	      |      jsr -324(a6)
    a5ea:	      |      move.l d0,38(sp)
    a5ee:	      |      move.l 38(sp),d0
    a5f2:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    a5f6:	      |      move.l 34(sp),d0
    a5fa:	      |      cmp.l 116(sp),d0
    a5fe:	      |  /-- beq.s a60e <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    a600:	      |  |   pea 166d6 <graphics.c.1c13408a+0x1a>
    a606:	      |  |   jsr 12e08 <KPrintF>
    a60c:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    a60e:	      |  \-> move.l 124(sp),30(sp)
    a614:	      |      move.l 19c62 <DOSBase>,d0
    a61a:	      |      movea.l d0,a6
    a61c:	      |      move.l 30(sp),d1
    a620:	      |      jsr -306(a6)
    a624:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    a628:	      |      move.l 116(sp),d0
    a62c:	      |      movea.l 58(sp),a0
    a630:	      |      adda.l d0,a0
    a632:	      |      clr.b (a0)
    }

    return reply;
    a634:	      |      move.l 58(sp),d0
}
    a638:	      \----> movem.l (sp)+,d2-d4/a6
    a63c:	             lea 104(sp),sp
    a640:	             rts

0000a642 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    a642:	                      lea -144(sp),sp
    a646:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    a64a:	                      move.l 160(sp),148(sp)
    a650:	                      move.l #1006,144(sp)
    a658:	                      move.l 19c62 <DOSBase>,d0
    a65e:	                      movea.l d0,a6
    a660:	                      move.l 148(sp),d1
    a664:	                      move.l 144(sp),d2
    a668:	                      jsr -30(a6)
    a66c:	                      move.l d0,140(sp)
    a670:	                      move.l 140(sp),d0
    a674:	                      move.l d0,136(sp)

    if (!fp) {
    a678:	                  /-- bne.s a692 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    a67a:	                  |   move.l 160(sp),-(sp)
    a67e:	                  |   pea 166f7 <graphics.c.1c13408a+0x3b>
    a684:	                  |   jsr 12e08 <KPrintF>
    a68a:	                  |   addq.l #8,sp
        return FALSE;
    a68c:	                  |   clr.w d0
    a68e:	/-----------------|-- bra.w a94e <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    a692:	|                 \-> movea.l 164(sp),a0
    a696:	|                     movea.l 4(a0),a0
    a69a:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    a69e:	|                     move.w 19d12 <saveEncoding>,d0
    a6a4:	|                     move.l d0,d0
    a6a6:	|                     move.b d0,19d10 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    a6ac:	|                     move.w 19d12 <saveEncoding>,d0
    a6b2:	|                     lsr.w #8,d0
    a6b4:	|                     move.l d0,d0
    a6b6:	|                     move.b d0,19d11 <encode2>

    if (saveEncoding) {
    a6bc:	|                     move.w 19d12 <saveEncoding>,d0
    a6c2:	|                 /-- beq.s a714 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    a6c4:	|                 |   move.l 136(sp),116(sp)
    a6ca:	|                 |   move.l #91537,112(sp)
    a6d2:	|                 |   moveq #99,d0
    a6d4:	|                 |   not.b d0
    a6d6:	|                 |   add.l sp,d0
    a6d8:	|                 |   addi.l #-144,d0
    a6de:	|                 |   move.l d0,108(sp)
    a6e2:	|                 |   move.l 19c62 <DOSBase>,d0
    a6e8:	|                 |   movea.l d0,a6
    a6ea:	|                 |   move.l 116(sp),d1
    a6ee:	|                 |   move.l 112(sp),d2
    a6f2:	|                 |   move.l 108(sp),d3
    a6f6:	|                 |   jsr -354(a6)
    a6fa:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    a6fe:	|                 |   move.l 136(sp),-(sp)
    a702:	|                 |   pea 16610 <line.c.05397aaf+0x1b0>
    a708:	|                 |   jsr a958 <writeStringEncoded>
    a70e:	|                 |   addq.l #8,sp
    a710:	|  /--------------|-- bra.w a926 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    a714:	|  |              \-> move.l 136(sp),132(sp)
    a71a:	|  |                  move.l #91563,128(sp)
    a722:	|  |                  moveq #99,d1
    a724:	|  |                  not.b d1
    a726:	|  |                  add.l sp,d1
    a728:	|  |                  addi.l #-144,d1
    a72e:	|  |                  move.l d1,124(sp)
    a732:	|  |                  move.l 19c62 <DOSBase>,d0
    a738:	|  |                  movea.l d0,a6
    a73a:	|  |                  move.l 132(sp),d1
    a73e:	|  |                  move.l 128(sp),d2
    a742:	|  |                  move.l 124(sp),d3
    a746:	|  |                  jsr -354(a6)
    a74a:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    a74e:	|  +----------------- bra.w a926 <stackToFile+0x2e4>
        if (saveEncoding) {
    a752:	|  |  /-------------> move.w 19d12 <saveEncoding>,d0
    a758:	|  |  |     /-------- beq.w a8aa <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    a75c:	|  |  |     |         movea.l 152(sp),a0
    a760:	|  |  |     |         move.l (a0),d0
    a762:	|  |  |     |         moveq #1,d1
    a764:	|  |  |     |         cmp.l d0,d1
    a766:	|  |  |     |     /-- beq.s a7b6 <stackToFile+0x174>
    a768:	|  |  |     |     |   moveq #3,d1
    a76a:	|  |  |     |     |   cmp.l d0,d1
    a76c:	|  |  |     |  /--|-- bne.w a878 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    a770:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    a776:	|  |  |     |  |  |   move.b 19d10 <encode1>,d0
    a77c:	|  |  |     |  |  |   ext.w d0
    a77e:	|  |  |     |  |  |   movea.w d0,a0
    a780:	|  |  |     |  |  |   move.l a0,72(sp)
    a784:	|  |  |     |  |  |   move.l 19c62 <DOSBase>,d0
    a78a:	|  |  |     |  |  |   movea.l d0,a6
    a78c:	|  |  |     |  |  |   move.l 76(sp),d1
    a790:	|  |  |     |  |  |   move.l 72(sp),d2
    a794:	|  |  |     |  |  |   jsr -312(a6)
    a798:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    a79c:	|  |  |     |  |  |   movea.l 152(sp),a0
    a7a0:	|  |  |     |  |  |   move.l 4(a0),d0
    a7a4:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    a7a8:	|  |  |     |  |  |   move.l d0,-(sp)
    a7aa:	|  |  |     |  |  |   jsr a958 <writeStringEncoded>
    a7b0:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    a7b2:	|  |  |  /--|--|--|-- bra.w a91c <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    a7b6:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    a7ba:	|  |  |  |  |  |      move.l 4(a0),d0
    a7be:	|  |  |  |  |  |  /-- bmi.s a82e <stackToFile+0x1ec>
    a7c0:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    a7c4:	|  |  |  |  |  |  |   move.l 4(a0),d0
    a7c8:	|  |  |  |  |  |  |   cmpi.l #255,d0
    a7ce:	|  |  |  |  |  |  +-- bgt.s a82e <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    a7d0:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    a7d6:	|  |  |  |  |  |  |   move.b 19d10 <encode1>,d0
    a7dc:	|  |  |  |  |  |  |   eori.b #2,d0
    a7e0:	|  |  |  |  |  |  |   ext.w d0
    a7e2:	|  |  |  |  |  |  |   movea.w d0,a0
    a7e4:	|  |  |  |  |  |  |   move.l a0,60(sp)
    a7e8:	|  |  |  |  |  |  |   move.l 19c62 <DOSBase>,d0
    a7ee:	|  |  |  |  |  |  |   movea.l d0,a6
    a7f0:	|  |  |  |  |  |  |   move.l 64(sp),d1
    a7f4:	|  |  |  |  |  |  |   move.l 60(sp),d2
    a7f8:	|  |  |  |  |  |  |   jsr -312(a6)
    a7fc:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    a800:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    a806:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    a80a:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    a810:	|  |  |  |  |  |  |   move.l 19c62 <DOSBase>,d0
    a816:	|  |  |  |  |  |  |   movea.l d0,a6
    a818:	|  |  |  |  |  |  |   move.l 52(sp),d1
    a81c:	|  |  |  |  |  |  |   move.l 48(sp),d2
    a820:	|  |  |  |  |  |  |   jsr -312(a6)
    a824:	|  |  |  |  |  |  |   move.l d0,44(sp)
    a828:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    a82a:	|  |  |  +--|--|--|-- bra.w a91c <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    a82e:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    a834:	|  |  |  |  |  |      move.b 19d10 <encode1>,d0
    a83a:	|  |  |  |  |  |      eori.b #1,d0
    a83e:	|  |  |  |  |  |      ext.w d0
    a840:	|  |  |  |  |  |      movea.w d0,a0
    a842:	|  |  |  |  |  |      move.l a0,36(sp)
    a846:	|  |  |  |  |  |      move.l 19c62 <DOSBase>,d0
    a84c:	|  |  |  |  |  |      movea.l d0,a6
    a84e:	|  |  |  |  |  |      move.l 40(sp),d1
    a852:	|  |  |  |  |  |      move.l 36(sp),d2
    a856:	|  |  |  |  |  |      jsr -312(a6)
    a85a:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    a85e:	|  |  |  |  |  |      movea.l 152(sp),a0
    a862:	|  |  |  |  |  |      move.l 4(a0),d0
    a866:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    a86a:	|  |  |  |  |  |      move.l d0,-(sp)
    a86c:	|  |  |  |  |  |      jsr 958 <put4bytes>
    a872:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    a874:	|  |  |  +--|--|----- bra.w a91c <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    a878:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    a87c:	|  |  |  |  |         pea 16709 <graphics.c.1c13408a+0x4d>
    a882:	|  |  |  |  |         jsr 12e08 <KPrintF>
    a888:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    a88a:	|  |  |  |  |         move.l 136(sp),28(sp)
    a890:	|  |  |  |  |         move.l 19c62 <DOSBase>,d0
    a896:	|  |  |  |  |         movea.l d0,a6
    a898:	|  |  |  |  |         move.l 28(sp),d1
    a89c:	|  |  |  |  |         jsr -36(a6)
    a8a0:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    a8a4:	|  |  |  |  |         clr.w d0
    a8a6:	+--|--|--|--|-------- bra.w a94e <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    a8aa:	|  |  |  |  \-------> move.l 152(sp),d0
    a8ae:	|  |  |  |            move.l d0,-(sp)
    a8b0:	|  |  |  |            jsr 1138a <getTextFromAnyVar>
    a8b6:	|  |  |  |            addq.l #4,sp
    a8b8:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    a8bc:	|  |  |  |     /----- beq.s a930 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    a8be:	|  |  |  |     |      movea.l 100(sp),a0
    a8c2:	|  |  |  |     |      move.b (a0),d0
    a8c4:	|  |  |  |     |      ext.w d0
    a8c6:	|  |  |  |     |      movea.w d0,a0
    a8c8:	|  |  |  |     |      move.l a0,12(sp)
    a8cc:	|  |  |  |     |      move.l 136(sp),96(sp)
    a8d2:	|  |  |  |     |      move.l #92005,92(sp)
    a8da:	|  |  |  |     |      moveq #99,d0
    a8dc:	|  |  |  |     |      not.b d0
    a8de:	|  |  |  |     |      add.l sp,d0
    a8e0:	|  |  |  |     |      addi.l #-144,d0
    a8e6:	|  |  |  |     |      move.l d0,88(sp)
    a8ea:	|  |  |  |     |      move.l 19c62 <DOSBase>,d0
    a8f0:	|  |  |  |     |      movea.l d0,a6
    a8f2:	|  |  |  |     |      move.l 96(sp),d1
    a8f6:	|  |  |  |     |      move.l 92(sp),d2
    a8fa:	|  |  |  |     |      move.l 88(sp),d3
    a8fe:	|  |  |  |     |      jsr -354(a6)
    a902:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    a906:	|  |  |  |     |      move.l 100(sp),80(sp)
    a90c:	|  |  |  |     |      move.l 19c5a <SysBase>,d0
    a912:	|  |  |  |     |      movea.l d0,a6
    a914:	|  |  |  |     |      movea.l 80(sp),a1
    a918:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    a91c:	|  |  |  \-----|----> movea.l 152(sp),a0
    a920:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    a926:	|  \--|--------|----> tst.l 152(sp)
    a92a:	|     \--------|----- bne.w a752 <stackToFile+0x110>
    a92e:	|              |  /-- bra.s a932 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    a930:	|              \--|-> nop
    }
    Close(fp);
    a932:	|                 \-> move.l 136(sp),20(sp)
    a938:	|                     move.l 19c62 <DOSBase>,d0
    a93e:	|                     movea.l d0,a6
    a940:	|                     move.l 20(sp),d1
    a944:	|                     jsr -36(a6)
    a948:	|                     move.l d0,16(sp)
    return TRUE;
    a94c:	|                     moveq #1,d0
}
    a94e:	\-------------------> movem.l (sp)+,d2-d3/a6
    a952:	                      lea 144(sp),sp
    a956:	                      rts

0000a958 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    a958:	       lea -20(sp),sp
    a95c:	       move.l a6,-(sp)
    a95e:	       move.l d2,-(sp)
	int a, len = strlen (s);
    a960:	       move.l 32(sp),-(sp)
    a964:	       jsr 102a0 <strlen>
    a96a:	       addq.l #4,sp
    a96c:	       move.l d0,20(sp)

	put2bytes (len, fp);
    a970:	       move.l 36(sp),-(sp)
    a974:	       move.l 24(sp),-(sp)
    a978:	       jsr 8d0 <put2bytes>
    a97e:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    a980:	       clr.l 24(sp)
    a984:	   /-- bra.s a9da <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    a986:	/--|-> move.l 36(sp),16(sp)
    a98c:	|  |   move.l 24(sp),d0
    a990:	|  |   movea.l 32(sp),a0
    a994:	|  |   adda.l d0,a0
    a996:	|  |   move.b (a0),d1
    a998:	|  |   move.b 19d10 <encode1>,d0
    a99e:	|  |   eor.b d1,d0
    a9a0:	|  |   ext.w d0
    a9a2:	|  |   movea.w d0,a0
    a9a4:	|  |   move.l a0,12(sp)
    a9a8:	|  |   move.l 19c62 <DOSBase>,d0
    a9ae:	|  |   movea.l d0,a6
    a9b0:	|  |   move.l 16(sp),d1
    a9b4:	|  |   move.l 12(sp),d2
    a9b8:	|  |   jsr -312(a6)
    a9bc:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    a9c0:	|  |   move.b 19d10 <encode1>,d0
    a9c6:	|  |   move.b d0,d1
    a9c8:	|  |   move.b 19d11 <encode2>,d0
    a9ce:	|  |   add.b d1,d0
    a9d0:	|  |   move.b d0,19d10 <encode1>
	for (a = 0; a < len; a ++) {
    a9d6:	|  |   addq.l #1,24(sp)
    a9da:	|  \-> move.l 24(sp),d0
    a9de:	|      cmp.l 20(sp),d0
    a9e2:	\----- blt.s a986 <writeStringEncoded+0x2e>
	}
}
    a9e4:	       nop
    a9e6:	       nop
    a9e8:	       move.l (sp)+,d2
    a9ea:	       movea.l (sp)+,a6
    a9ec:	       lea 20(sp),sp
    a9f0:	       rts

0000a9f2 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    a9f2:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    a9f4:	                   tst.l 8(sp)
    a9f8:	               /-- bne.s a9fe <failSecurityCheck+0xc>
    a9fa:	               |   moveq #1,d0
    a9fc:	/--------------|-- bra.s aa7c <failSecurityCheck+0x8a>

	int a = 0;
    a9fe:	|              \-> clr.l (sp)

	while (fn[a]) {
    aa00:	|     /----------- bra.s aa6e <failSecurityCheck+0x7c>
		switch (fn[a]) {
    aa02:	|  /--|----------> move.l (sp),d0
    aa04:	|  |  |            movea.l 8(sp),a0
    aa08:	|  |  |            adda.l d0,a0
    aa0a:	|  |  |            move.b (a0),d0
    aa0c:	|  |  |            ext.w d0
    aa0e:	|  |  |            movea.w d0,a0
    aa10:	|  |  |            moveq #124,d0
    aa12:	|  |  |            cmp.l a0,d0
    aa14:	|  |  |     /----- beq.s aa56 <failSecurityCheck+0x64>
    aa16:	|  |  |     |      moveq #124,d1
    aa18:	|  |  |     |      cmp.l a0,d1
    aa1a:	|  |  |  /--|----- blt.s aa6c <failSecurityCheck+0x7a>
    aa1c:	|  |  |  |  |      moveq #92,d0
    aa1e:	|  |  |  |  |      cmp.l a0,d0
    aa20:	|  |  |  |  +----- beq.s aa56 <failSecurityCheck+0x64>
    aa22:	|  |  |  |  |      moveq #92,d1
    aa24:	|  |  |  |  |      cmp.l a0,d1
    aa26:	|  |  |  +--|----- blt.s aa6c <failSecurityCheck+0x7a>
    aa28:	|  |  |  |  |      moveq #60,d0
    aa2a:	|  |  |  |  |      cmp.l a0,d0
    aa2c:	|  |  |  |  |  /-- blt.s aa4c <failSecurityCheck+0x5a>
    aa2e:	|  |  |  |  |  |   moveq #34,d1
    aa30:	|  |  |  |  |  |   cmp.l a0,d1
    aa32:	|  |  |  +--|--|-- bgt.s aa6c <failSecurityCheck+0x7a>
    aa34:	|  |  |  |  |  |   moveq #-34,d1
    aa36:	|  |  |  |  |  |   add.l a0,d1
    aa38:	|  |  |  |  |  |   move.l #83894529,d0
    aa3e:	|  |  |  |  |  |   lsr.l d1,d0
    aa40:	|  |  |  |  |  |   moveq #1,d1
    aa42:	|  |  |  |  |  |   and.l d1,d0
    aa44:	|  |  |  |  |  |   sne d0
    aa46:	|  |  |  |  |  |   neg.b d0
    aa48:	|  |  |  |  +--|-- bne.s aa56 <failSecurityCheck+0x64>
    aa4a:	|  |  |  +--|--|-- bra.s aa6c <failSecurityCheck+0x7a>
    aa4c:	|  |  |  |  |  \-> lea -62(a0),a0
    aa50:	|  |  |  |  |      moveq #1,d0
    aa52:	|  |  |  |  |      cmp.l a0,d0
    aa54:	|  |  |  +--|----- bcs.s aa6c <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    aa56:	|  |  |  |  \----> move.l 8(sp),-(sp)
    aa5a:	|  |  |  |         pea 16769 <graphics.c.1c13408a+0xad>
    aa60:	|  |  |  |         jsr 12e08 <KPrintF>
    aa66:	|  |  |  |         addq.l #8,sp
				return TRUE;
    aa68:	|  |  |  |         moveq #1,d0
    aa6a:	+--|--|--|-------- bra.s aa7c <failSecurityCheck+0x8a>
		}
		a++;
    aa6c:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    aa6e:	|  |  \----------> move.l (sp),d0
    aa70:	|  |               movea.l 8(sp),a0
    aa74:	|  |               adda.l d0,a0
    aa76:	|  |               move.b (a0),d0
    aa78:	|  \-------------- bne.s aa02 <failSecurityCheck+0x10>
	}
	return FALSE;
    aa7a:	|                  clr.w d0
}
    aa7c:	\----------------> addq.l #4,sp
    aa7e:	                   rts

0000aa80 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    aa80:	             lea -24(sp),sp
    aa84:	             move.l a6,-(sp)
    aa86:	             move.l 40(sp),d0
    aa8a:	             move.w d0,d0
    aa8c:	             move.w d0,6(sp)
	int fileNum = -1;
    aa90:	             moveq #-1,d0
    aa92:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    aa96:	             jsr 3ca6 <killSpeechTimers>

	switch (numParams) {
    aa9c:	             moveq #2,d0
    aa9e:	             cmp.l 32(sp),d0
    aaa2:	      /----- beq.s aae6 <sayCore+0x66>
    aaa4:	      |      moveq #3,d0
    aaa6:	      |      cmp.l 32(sp),d0
    aaaa:	/-----|----- bne.w abc8 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    aaae:	|     |      movea.l 36(sp),a0
    aab2:	|     |      move.l 24(a0),d0
    aab6:	|     |      move.l d0,-(sp)
    aab8:	|     |      pea 5 <_start+0x5>
    aabc:	|     |      lea 20(sp),a0
    aac0:	|     |      move.l a0,-(sp)
    aac2:	|     |      jsr 10db4 <getValueType>
    aac8:	|     |      lea 12(sp),sp
    aacc:	|     |      tst.w d0
    aace:	|     |  /-- bne.s aad6 <sayCore+0x56>
    aad0:	|     |  |   moveq #1,d0
    aad2:	|  /--|--|-- bra.w abd8 <sayCore+0x158>
			trimStack (&fun -> stack);
    aad6:	|  |  |  \-> moveq #24,d0
    aad8:	|  |  |      add.l 36(sp),d0
    aadc:	|  |  |      move.l d0,-(sp)
    aade:	|  |  |      jsr 11738 <trimStack>
    aae4:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    aae6:	|  |  \----> movea.l 36(sp),a0
    aaea:	|  |         move.l 24(a0),d0
    aaee:	|  |         move.l d0,-(sp)
    aaf0:	|  |         jsr 1138a <getTextFromAnyVar>
    aaf6:	|  |         addq.l #4,sp
    aaf8:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    aafc:	|  |     /-- bne.s ab04 <sayCore+0x84>
    aafe:	|  |     |   moveq #1,d0
    ab00:	|  +-----|-- bra.w abd8 <sayCore+0x158>
			trimStack (&fun -> stack);
    ab04:	|  |     \-> moveq #24,d0
    ab06:	|  |         add.l 36(sp),d0
    ab0a:	|  |         move.l d0,-(sp)
    ab0c:	|  |         jsr 11738 <trimStack>
    ab12:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ab14:	|  |         movea.l 36(sp),a0
    ab18:	|  |         move.l 24(a0),d0
    ab1c:	|  |         move.l d0,-(sp)
    ab1e:	|  |         pea 7 <_start+0x7>
    ab22:	|  |         lea 16(sp),a0
    ab26:	|  |         move.l a0,-(sp)
    ab28:	|  |         jsr 10db4 <getValueType>
    ab2e:	|  |         lea 12(sp),sp
    ab32:	|  |         tst.w d0
    ab34:	|  |     /-- bne.s ab3c <sayCore+0xbc>
    ab36:	|  |     |   moveq #1,d0
    ab38:	|  +-----|-- bra.w abd8 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ab3c:	|  |     \-> movea.l 36(sp),a0
    ab40:	|  |         move.l 24(a0),d0
    ab44:	|  |         move.l d0,-(sp)
    ab46:	|  |         pea 7 <_start+0x7>
    ab4a:	|  |         lea 16(sp),a0
    ab4e:	|  |         move.l a0,-(sp)
    ab50:	|  |         jsr 10db4 <getValueType>
    ab56:	|  |         lea 12(sp),sp
    ab5a:	|  |         tst.w d0
    ab5c:	|  |     /-- bne.s ab62 <sayCore+0xe2>
    ab5e:	|  |     |   moveq #1,d0
    ab60:	|  +-----|-- bra.s abd8 <sayCore+0x158>
			trimStack (&fun -> stack);
    ab62:	|  |     \-> moveq #24,d0
    ab64:	|  |         add.l 36(sp),d0
    ab68:	|  |         move.l d0,-(sp)
    ab6a:	|  |         jsr 11738 <trimStack>
    ab70:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    ab72:	|  |         movea.w 6(sp),a0
    ab76:	|  |         move.l 12(sp),d1
    ab7a:	|  |         move.l 8(sp),d0
    ab7e:	|  |         move.l a0,-(sp)
    ab80:	|  |         move.l d1,-(sp)
    ab82:	|  |         move.l d0,-(sp)
    ab84:	|  |         move.l 36(sp),-(sp)
    ab88:	|  |         jsr 5bde <wrapSpeech>
    ab8e:	|  |         lea 16(sp),sp
    ab92:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    ab96:	|  |         movea.l 36(sp),a0
    ab9a:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    aba0:	|  |         movea.l 36(sp),a0
    aba4:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    abaa:	|  |         move.l 24(sp),16(sp)
    abb0:	|  |         move.l 19c5a <SysBase>,d0
    abb6:	|  |         movea.l d0,a6
    abb8:	|  |         movea.l 16(sp),a1
    abbc:	|  |         jsr -690(a6)
			newText = NULL;
    abc0:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    abc4:	|  |         moveq #0,d0
    abc6:	|  +-------- bra.s abd8 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    abc8:	\--|-------> pea 167ef <graphics.c.1c13408a+0x133>
    abce:	   |         jsr 12e08 <KPrintF>
    abd4:	   |         addq.l #4,sp
	return BR_ERROR;
    abd6:	   |         moveq #1,d0
}
    abd8:	   \-------> movea.l (sp)+,a6
    abda:	             lea 24(sp),sp
    abde:	             rts

0000abe0 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    abe0:	pea 1 <_start+0x1>
    abe4:	move.l 12(sp),-(sp)
    abe8:	move.l 12(sp),-(sp)
    abec:	jsr aa80 <sayCore>
    abf2:	lea 12(sp),sp
}
    abf6:	rts

0000abf8 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    abf8:	clr.l -(sp)
    abfa:	move.l 12(sp),-(sp)
    abfe:	move.l 12(sp),-(sp)
    ac02:	jsr aa80 <sayCore>
    ac08:	lea 12(sp),sp
}
    ac0c:	rts

0000ac0e <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    ac0e:	moveq #2,d0
}
    ac10:	rts

0000ac12 <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    ac12:	moveq #2,d0
}
    ac14:	rts

0000ac16 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    ac16:	nop
    ac18:	rts

0000ac1a <builtIn_setCursor>:

builtIn(setCursor)
{
    ac1a:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    ac1c:	movea.l 12(sp),a0
    ac20:	move.l 24(a0),d0
    ac24:	move.l d0,-(sp)
    ac26:	jsr 1128c <getAnimationFromVar>
    ac2c:	addq.l #4,sp
    ac2e:	move.l d0,(sp)
	pickAnimCursor (aa);
    ac30:	move.l (sp),-(sp)
    ac32:	jsr dba <pickAnimCursor>
    ac38:	addq.l #4,sp
	trimStack (&fun -> stack);
    ac3a:	moveq #24,d0
    ac3c:	add.l 12(sp),d0
    ac40:	move.l d0,-(sp)
    ac42:	jsr 11738 <trimStack>
    ac48:	addq.l #4,sp
	return BR_CONTINUE;
    ac4a:	moveq #2,d0
}
    ac4c:	addq.l #4,sp
    ac4e:	rts

0000ac50 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    ac50:	move.l 19c1a <input+0xa>,d1
    ac56:	move.l 19d14 <cameraX>,d0
    ac5c:	add.l d0,d1
    ac5e:	moveq #28,d0
    ac60:	add.l 8(sp),d0
    ac64:	move.l d1,-(sp)
    ac66:	pea 1 <_start+0x1>
    ac6a:	move.l d0,-(sp)
    ac6c:	jsr 116a6 <setVariable>
    ac72:	lea 12(sp),sp
	return BR_CONTINUE;
    ac76:	moveq #2,d0
}
    ac78:	rts

0000ac7a <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    ac7a:	move.l 19c1e <input+0xe>,d1
    ac80:	move.l 19d18 <cameraY>,d0
    ac86:	add.l d0,d1
    ac88:	moveq #28,d0
    ac8a:	add.l 8(sp),d0
    ac8e:	move.l d1,-(sp)
    ac90:	pea 1 <_start+0x1>
    ac94:	move.l d0,-(sp)
    ac96:	jsr 116a6 <setVariable>
    ac9c:	lea 12(sp),sp
	return BR_CONTINUE;
    aca0:	moveq #2,d0
}
    aca2:	rts

0000aca4 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    aca4:	move.l 19c1a <input+0xa>,d0
    acaa:	move.l d0,-(sp)
    acac:	jsr 133a4 <__floatsisf>
    acb2:	addq.l #4,sp
    acb4:	move.l d0,d1
    acb6:	move.l 1814a <cameraZoom>,d0
    acbc:	move.l d0,-(sp)
    acbe:	move.l d1,-(sp)
    acc0:	jsr 13456 <__mulsf3>
    acc6:	addq.l #8,sp
    acc8:	move.l d0,-(sp)
    acca:	jsr 1333c <__fixsfsi>
    acd0:	addq.l #4,sp
    acd2:	move.l d0,d1
    acd4:	moveq #28,d0
    acd6:	add.l 8(sp),d0
    acda:	move.l d1,-(sp)
    acdc:	pea 1 <_start+0x1>
    ace0:	move.l d0,-(sp)
    ace2:	jsr 116a6 <setVariable>
    ace8:	lea 12(sp),sp
	return BR_CONTINUE;
    acec:	moveq #2,d0
}
    acee:	rts

0000acf0 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    acf0:	move.l 19c1e <input+0xe>,d0
    acf6:	move.l d0,-(sp)
    acf8:	jsr 133a4 <__floatsisf>
    acfe:	addq.l #4,sp
    ad00:	move.l d0,d1
    ad02:	move.l 1814a <cameraZoom>,d0
    ad08:	move.l d0,-(sp)
    ad0a:	move.l d1,-(sp)
    ad0c:	jsr 13456 <__mulsf3>
    ad12:	addq.l #8,sp
    ad14:	move.l d0,-(sp)
    ad16:	jsr 1333c <__fixsfsi>
    ad1c:	addq.l #4,sp
    ad1e:	move.l d0,d1
    ad20:	moveq #28,d0
    ad22:	add.l 8(sp),d0
    ad26:	move.l d1,-(sp)
    ad28:	pea 1 <_start+0x1>
    ad2c:	move.l d0,-(sp)
    ad2e:	jsr 116a6 <setVariable>
    ad34:	lea 12(sp),sp
	return BR_CONTINUE;
    ad38:	moveq #2,d0
}
    ad3a:	rts

0000ad3c <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    ad3c:	jsr 5692 <statusBarText>
    ad42:	move.l d0,d1
    ad44:	moveq #28,d0
    ad46:	add.l 8(sp),d0
    ad4a:	move.l d1,-(sp)
    ad4c:	move.l d0,-(sp)
    ad4e:	jsr 10fd6 <makeTextVar>
    ad54:	addq.l #8,sp
	return BR_CONTINUE;
    ad56:	moveq #2,d0
}
    ad58:	rts

0000ad5a <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    ad5a:	       lea -20(sp),sp
    ad5e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ad60:	       movea.l 32(sp),a0
    ad64:	       move.l 24(a0),d0
    ad68:	       move.l d0,-(sp)
    ad6a:	       jsr 1138a <getTextFromAnyVar>
    ad70:	       addq.l #4,sp
    ad72:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    ad76:	   /-- bne.s ad7e <builtIn_getMatchingFiles+0x24>
    ad78:	   |   moveq #1,d0
    ad7a:	/--|-- bra.w ae40 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    ad7e:	|  \-> moveq #24,d0
    ad80:	|      add.l 32(sp),d0
    ad84:	|      move.l d0,-(sp)
    ad86:	|      jsr 11738 <trimStack>
    ad8c:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    ad8e:	|      moveq #28,d0
    ad90:	|      add.l 32(sp),d0
    ad94:	|      move.l d0,-(sp)
    ad96:	|      jsr 11002 <unlinkVar>
    ad9c:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    ad9e:	|      movea.l 32(sp),a0
    ada2:	|      moveq #6,d0
    ada4:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    ada8:	|      moveq #12,d0
    adaa:	|      move.l d0,16(sp)
    adae:	|      clr.l 12(sp)
    adb2:	|      move.l 19c5a <SysBase>,d0
    adb8:	|      movea.l d0,a6
    adba:	|      move.l 16(sp),d0
    adbe:	|      move.l 12(sp),d1
    adc2:	|      jsr -684(a6)
    adc6:	|      move.l d0,8(sp)
    adca:	|      move.l 8(sp),d0
    adce:	|      movea.l 32(sp),a0
    add2:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    add6:	|      moveq #32,d0
    add8:	|      add.l 32(sp),d0
    addc:	|  /-- bne.s ade2 <builtIn_getMatchingFiles+0x88>
    adde:	|  |   moveq #1,d0
    ade0:	+--|-- bra.s ae40 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    ade2:	|  \-> movea.l 32(sp),a0
    ade6:	|      movea.l 32(a0),a0
    adea:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    adec:	|      movea.l 32(sp),a0
    adf0:	|      movea.l 32(a0),a0
    adf4:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    adf8:	|      movea.l 32(sp),a0
    adfc:	|      movea.l 32(a0),a0
    ae00:	|      moveq #1,d0
    ae02:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    ae06:	|      movea.l 32(sp),a0
    ae0a:	|      move.l 32(a0),d0
    ae0e:	|      move.l 20(sp),-(sp)
    ae12:	|      move.l d0,-(sp)
    ae14:	|      jsr 10b70 <getSavedGamesStack>
    ae1a:	|      addq.l #8,sp
    ae1c:	|      tst.w d0
    ae1e:	|  /-- bne.s ae24 <builtIn_getMatchingFiles+0xca>
    ae20:	|  |   moveq #1,d0
    ae22:	+--|-- bra.s ae40 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    ae24:	|  \-> move.l 20(sp),4(sp)
    ae2a:	|      move.l 19c5a <SysBase>,d0
    ae30:	|      movea.l d0,a6
    ae32:	|      movea.l 4(sp),a1
    ae36:	|      jsr -690(a6)
	newText = NULL;
    ae3a:	|      clr.l 20(sp)
	return BR_CONTINUE;
    ae3e:	|      moveq #2,d0
}
    ae40:	\----> movea.l (sp)+,a6
    ae42:	       lea 20(sp),sp
    ae46:	       rts

0000ae48 <builtIn_saveGame>:

builtIn(saveGame)
{
    ae48:	       lea -12(sp),sp
    ae4c:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    ae4e:	       movea.l 24(sp),a0
    ae52:	       move.l 24(a0),d0
    ae56:	       move.l d0,-(sp)
    ae58:	       jsr 1138a <getTextFromAnyVar>
    ae5e:	       addq.l #4,sp
    ae60:	       move.l d0,19c26 <loadNow>
    trimStack(&fun->stack);
    ae66:	       moveq #24,d0
    ae68:	       add.l 24(sp),d0
    ae6c:	       move.l d0,-(sp)
    ae6e:	       jsr 11738 <trimStack>
    ae74:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    ae76:	       move.l 19c26 <loadNow>,d0
    ae7c:	       move.l d0,-(sp)
    ae7e:	       jsr 2fe <encodeFilename>
    ae84:	       addq.l #4,sp
    ae86:	       move.l d0,12(sp)
    FreeVec(loadNow);
    ae8a:	       move.l 19c26 <loadNow>,8(sp)
    ae92:	       move.l 19c5a <SysBase>,d0
    ae98:	       movea.l d0,a6
    ae9a:	       movea.l 8(sp),a1
    ae9e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    aea2:	       move.l 12(sp),-(sp)
    aea6:	       jsr a9f2 <failSecurityCheck>
    aeac:	       addq.l #4,sp
    aeae:	       tst.w d0
    aeb0:	   /-- beq.s aeb6 <builtIn_saveGame+0x6e>
    aeb2:	   |   moveq #1,d0
    aeb4:	/--|-- bra.s af06 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    aeb6:	|  \-> move.l 12(sp),-(sp)
    aeba:	|      pea 1681d <graphics.c.1c13408a+0x161>
    aec0:	|      jsr 102e0 <joinStrings>
    aec6:	|      addq.l #8,sp
    aec8:	|      move.l d0,19c26 <loadNow>
    FreeVec(aaaaa);
    aece:	|      move.l 12(sp),4(sp)
    aed4:	|      move.l 19c5a <SysBase>,d0
    aeda:	|      movea.l d0,a6
    aedc:	|      movea.l 4(sp),a1
    aee0:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    aee4:	|      moveq #28,d0
    aee6:	|      add.l 24(sp),d0
    aeea:	|      clr.l -(sp)
    aeec:	|      pea 1 <_start+0x1>
    aef0:	|      move.l d0,-(sp)
    aef2:	|      jsr 116a6 <setVariable>
    aef8:	|      lea 12(sp),sp
    saverFunc = fun;
    aefc:	|      move.l 24(sp),19d24 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    af04:	|      moveq #0,d0
}
    af06:	\----> movea.l (sp)+,a6
    af08:	       lea 12(sp),sp
    af0c:	       rts

0000af0e <builtIn_fileExists>:

builtIn(fileExists)
{
    af0e:	       lea -36(sp),sp
    af12:	       move.l a6,-(sp)
    af14:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    af16:	       movea.l 52(sp),a0
    af1a:	       move.l 24(a0),d0
    af1e:	       move.l d0,-(sp)
    af20:	       jsr 1138a <getTextFromAnyVar>
    af26:	       addq.l #4,sp
    af28:	       move.l d0,19c26 <loadNow>
    trimStack(&fun->stack);
    af2e:	       moveq #24,d0
    af30:	       add.l 52(sp),d0
    af34:	       move.l d0,-(sp)
    af36:	       jsr 11738 <trimStack>
    af3c:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    af3e:	       move.l 19c26 <loadNow>,d0
    af44:	       move.l d0,-(sp)
    af46:	       jsr 2fe <encodeFilename>
    af4c:	       addq.l #4,sp
    af4e:	       move.l d0,40(sp)
    FreeVec(loadNow);
    af52:	       move.l 19c26 <loadNow>,36(sp)
    af5a:	       move.l 19c5a <SysBase>,d0
    af60:	       movea.l d0,a6
    af62:	       movea.l 36(sp),a1
    af66:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    af6a:	       move.l 40(sp),-(sp)
    af6e:	       jsr a9f2 <failSecurityCheck>
    af74:	       addq.l #4,sp
    af76:	       tst.w d0
    af78:	   /-- beq.s af80 <builtIn_fileExists+0x72>
    af7a:	   |   moveq #1,d0
    af7c:	/--|-- bra.w b020 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    af80:	|  \-> move.l 40(sp),32(sp)
    af86:	|      move.l #1005,28(sp)
    af8e:	|      move.l 19c62 <DOSBase>,d0
    af94:	|      movea.l d0,a6
    af96:	|      move.l 32(sp),d1
    af9a:	|      move.l 28(sp),d2
    af9e:	|      jsr -30(a6)
    afa2:	|      move.l d0,24(sp)
    afa6:	|      move.l 24(sp),d0
    afaa:	|      move.l d0,20(sp)
    if (!fp) {        
    afae:	|  /-- bne.s afbe <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    afb0:	|  |   pea 1681f <graphics.c.1c13408a+0x163>
    afb6:	|  |   jsr 12e08 <KPrintF>
    afbc:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    afbe:	|  \-> tst.l 20(sp)
    afc2:	|      sne d0
    afc4:	|      neg.b d0
    afc6:	|      moveq #0,d1
    afc8:	|      move.b d0,d1
    afca:	|      moveq #28,d0
    afcc:	|      add.l 52(sp),d0
    afd0:	|      move.l d1,-(sp)
    afd2:	|      pea 1 <_start+0x1>
    afd6:	|      move.l d0,-(sp)
    afd8:	|      jsr 116a6 <setVariable>
    afde:	|      lea 12(sp),sp
    if (fp) Close(fp);
    afe2:	|      tst.l 20(sp)
    afe6:	|  /-- beq.s b002 <builtIn_fileExists+0xf4>
    afe8:	|  |   move.l 20(sp),16(sp)
    afee:	|  |   move.l 19c62 <DOSBase>,d0
    aff4:	|  |   movea.l d0,a6
    aff6:	|  |   move.l 16(sp),d1
    affa:	|  |   jsr -36(a6)
    affe:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    b002:	|  \-> move.l 40(sp),8(sp)
    b008:	|      move.l 19c5a <SysBase>,d0
    b00e:	|      movea.l d0,a6
    b010:	|      movea.l 8(sp),a1
    b014:	|      jsr -690(a6)
    loadNow = NULL;
    b018:	|      clr.l 19c26 <loadNow>
    return BR_CONTINUE;
    b01e:	|      moveq #2,d0
}
    b020:	\----> move.l (sp)+,d2
    b022:	       movea.l (sp)+,a6
    b024:	       lea 36(sp),sp
    b028:	       rts

0000b02a <builtIn_loadGame>:

builtIn(loadGame)
{
    b02a:	       lea -36(sp),sp
    b02e:	       move.l a6,-(sp)
    b030:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    b032:	       movea.l 52(sp),a0
    b036:	       move.l 24(a0),d0
    b03a:	       move.l d0,-(sp)
    b03c:	       jsr 1138a <getTextFromAnyVar>
    b042:	       addq.l #4,sp
    b044:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    b048:	       moveq #24,d0
    b04a:	       add.l 52(sp),d0
    b04e:	       move.l d0,-(sp)
    b050:	       jsr 11738 <trimStack>
    b056:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    b058:	       move.l 40(sp),-(sp)
    b05c:	       jsr 2fe <encodeFilename>
    b062:	       addq.l #4,sp
    b064:	       move.l d0,19c26 <loadNow>
    FreeVec(aaaaa);
    b06a:	       move.l 40(sp),36(sp)
    b070:	       move.l 19c5a <SysBase>,d0
    b076:	       movea.l d0,a6
    b078:	       movea.l 36(sp),a1
    b07c:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    b080:	       move.l 19c26 <loadNow>,d0
    b086:	       move.l d0,-(sp)
    b088:	       jsr a9f2 <failSecurityCheck>
    b08e:	       addq.l #4,sp
    b090:	       tst.w d0
    b092:	   /-- beq.s b098 <builtIn_loadGame+0x6e>
    b094:	   |   moveq #1,d0
    b096:	/--|-- bra.s b108 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    b098:	|  \-> move.l 19c26 <loadNow>,32(sp)
    b0a0:	|      move.l #1005,28(sp)
    b0a8:	|      move.l 19c62 <DOSBase>,d0
    b0ae:	|      movea.l d0,a6
    b0b0:	|      move.l 32(sp),d1
    b0b4:	|      move.l 28(sp),d2
    b0b8:	|      jsr -30(a6)
    b0bc:	|      move.l d0,24(sp)
    b0c0:	|      move.l 24(sp),d0
    b0c4:	|      move.l d0,20(sp)
    if (fp) {
    b0c8:	|  /-- beq.s b0e8 <builtIn_loadGame+0xbe>
        Close(fp);
    b0ca:	|  |   move.l 20(sp),12(sp)
    b0d0:	|  |   move.l 19c62 <DOSBase>,d0
    b0d6:	|  |   movea.l d0,a6
    b0d8:	|  |   move.l 12(sp),d1
    b0dc:	|  |   jsr -36(a6)
    b0e0:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    b0e4:	|  |   moveq #0,d0
    b0e6:	+--|-- bra.s b108 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    b0e8:	|  \-> move.l 19c26 <loadNow>,16(sp)
    b0f0:	|      move.l 19c5a <SysBase>,d0
    b0f6:	|      movea.l d0,a6
    b0f8:	|      movea.l 16(sp),a1
    b0fc:	|      jsr -690(a6)
    loadNow = NULL;
    b100:	|      clr.l 19c26 <loadNow>
    return BR_CONTINUE;
    b106:	|      moveq #2,d0
}
    b108:	\----> move.l (sp)+,d2
    b10a:	       movea.l (sp)+,a6
    b10c:	       lea 36(sp),sp
    b110:	       rts

0000b112 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    b112:	move.l 19cfa <sceneHeight>,d0
    b118:	move.l d0,d1
    b11a:	move.l 19cf6 <sceneWidth>,d0
    b120:	move.l d1,-(sp)
    b122:	move.l d0,-(sp)
    b124:	clr.l -(sp)
    b126:	clr.l -(sp)
    b128:	jsr 988e <blankScreen>
    b12e:	lea 16(sp),sp
	return BR_CONTINUE;
    b132:	moveq #2,d0
}
    b134:	rts

0000b136 <builtIn_blankArea>:

builtIn(blankArea)
{
    b136:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b13a:	       movea.l 24(sp),a0
    b13e:	       move.l 24(a0),d0
    b142:	       move.l d0,-(sp)
    b144:	       pea 1 <_start+0x1>
    b148:	       lea 8(sp),a0
    b14c:	       move.l a0,-(sp)
    b14e:	       jsr 10db4 <getValueType>
    b154:	       lea 12(sp),sp
    b158:	       tst.w d0
    b15a:	   /-- bne.s b162 <builtIn_blankArea+0x2c>
    b15c:	   |   moveq #1,d0
    b15e:	/--|-- bra.w b238 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b162:	|  \-> moveq #24,d0
    b164:	|      add.l 24(sp),d0
    b168:	|      move.l d0,-(sp)
    b16a:	|      jsr 11738 <trimStack>
    b170:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b172:	|      movea.l 24(sp),a0
    b176:	|      move.l 24(a0),d0
    b17a:	|      move.l d0,-(sp)
    b17c:	|      pea 1 <_start+0x1>
    b180:	|      lea 12(sp),a0
    b184:	|      move.l a0,-(sp)
    b186:	|      jsr 10db4 <getValueType>
    b18c:	|      lea 12(sp),sp
    b190:	|      tst.w d0
    b192:	|  /-- bne.s b19a <builtIn_blankArea+0x64>
    b194:	|  |   moveq #1,d0
    b196:	+--|-- bra.w b238 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b19a:	|  \-> moveq #24,d0
    b19c:	|      add.l 24(sp),d0
    b1a0:	|      move.l d0,-(sp)
    b1a2:	|      jsr 11738 <trimStack>
    b1a8:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b1aa:	|      movea.l 24(sp),a0
    b1ae:	|      move.l 24(a0),d0
    b1b2:	|      move.l d0,-(sp)
    b1b4:	|      pea 1 <_start+0x1>
    b1b8:	|      moveq #16,d0
    b1ba:	|      add.l sp,d0
    b1bc:	|      move.l d0,-(sp)
    b1be:	|      jsr 10db4 <getValueType>
    b1c4:	|      lea 12(sp),sp
    b1c8:	|      tst.w d0
    b1ca:	|  /-- bne.s b1d0 <builtIn_blankArea+0x9a>
    b1cc:	|  |   moveq #1,d0
    b1ce:	+--|-- bra.s b238 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b1d0:	|  \-> moveq #24,d0
    b1d2:	|      add.l 24(sp),d0
    b1d6:	|      move.l d0,-(sp)
    b1d8:	|      jsr 11738 <trimStack>
    b1de:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    b1e0:	|      movea.l 24(sp),a0
    b1e4:	|      move.l 24(a0),d0
    b1e8:	|      move.l d0,-(sp)
    b1ea:	|      pea 1 <_start+0x1>
    b1ee:	|      moveq #20,d0
    b1f0:	|      add.l sp,d0
    b1f2:	|      move.l d0,-(sp)
    b1f4:	|      jsr 10db4 <getValueType>
    b1fa:	|      lea 12(sp),sp
    b1fe:	|      tst.w d0
    b200:	|  /-- bne.s b206 <builtIn_blankArea+0xd0>
    b202:	|  |   moveq #1,d0
    b204:	+--|-- bra.s b238 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    b206:	|  \-> moveq #24,d0
    b208:	|      add.l 24(sp),d0
    b20c:	|      move.l d0,-(sp)
    b20e:	|      jsr 11738 <trimStack>
    b214:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    b216:	|      movea.l (sp),a1
    b218:	|      movea.l 4(sp),a0
    b21c:	|      move.l 8(sp),d1
    b220:	|      move.l 12(sp),d0
    b224:	|      move.l a1,-(sp)
    b226:	|      move.l a0,-(sp)
    b228:	|      move.l d1,-(sp)
    b22a:	|      move.l d0,-(sp)
    b22c:	|      jsr 988e <blankScreen>
    b232:	|      lea 16(sp),sp
	return BR_CONTINUE;
    b236:	|      moveq #2,d0
}
    b238:	\----> lea 16(sp),sp
    b23c:	       rts

0000b23e <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    b23e:	jsr 98a2 <darkScreen>
	return BR_CONTINUE;
    b244:	moveq #2,d0
}
    b246:	rts

0000b248 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    b248:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b24c:	       movea.l 20(sp),a0
    b250:	       move.l 24(a0),d0
    b254:	       move.l d0,-(sp)
    b256:	       pea 1 <_start+0x1>
    b25a:	       lea 8(sp),a0
    b25e:	       move.l a0,-(sp)
    b260:	       jsr 10db4 <getValueType>
    b266:	       lea 12(sp),sp
    b26a:	       tst.w d0
    b26c:	   /-- bne.s b274 <builtIn_addOverlay+0x2c>
    b26e:	   |   moveq #1,d0
    b270:	/--|-- bra.w b30c <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b274:	|  \-> moveq #24,d0
    b276:	|      add.l 20(sp),d0
    b27a:	|      move.l d0,-(sp)
    b27c:	|      jsr 11738 <trimStack>
    b282:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b284:	|      movea.l 20(sp),a0
    b288:	|      move.l 24(a0),d0
    b28c:	|      move.l d0,-(sp)
    b28e:	|      pea 1 <_start+0x1>
    b292:	|      moveq #12,d0
    b294:	|      add.l sp,d0
    b296:	|      move.l d0,-(sp)
    b298:	|      jsr 10db4 <getValueType>
    b29e:	|      lea 12(sp),sp
    b2a2:	|      tst.w d0
    b2a4:	|  /-- bne.s b2aa <builtIn_addOverlay+0x62>
    b2a6:	|  |   moveq #1,d0
    b2a8:	+--|-- bra.s b30c <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b2aa:	|  \-> moveq #24,d0
    b2ac:	|      add.l 20(sp),d0
    b2b0:	|      move.l d0,-(sp)
    b2b2:	|      jsr 11738 <trimStack>
    b2b8:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    b2ba:	|      movea.l 20(sp),a0
    b2be:	|      move.l 24(a0),d0
    b2c2:	|      move.l d0,-(sp)
    b2c4:	|      pea 5 <_start+0x5>
    b2c8:	|      moveq #16,d0
    b2ca:	|      add.l sp,d0
    b2cc:	|      move.l d0,-(sp)
    b2ce:	|      jsr 10db4 <getValueType>
    b2d4:	|      lea 12(sp),sp
    b2d8:	|      tst.w d0
    b2da:	|  /-- bne.s b2e0 <builtIn_addOverlay+0x98>
    b2dc:	|  |   moveq #1,d0
    b2de:	+--|-- bra.s b30c <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    b2e0:	|  \-> moveq #24,d0
    b2e2:	|      add.l 20(sp),d0
    b2e6:	|      move.l d0,-(sp)
    b2e8:	|      jsr 11738 <trimStack>
    b2ee:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    b2f0:	|      movea.l (sp),a0
    b2f2:	|      move.l 4(sp),d1
    b2f6:	|      move.l 8(sp),d0
    b2fa:	|      move.l a0,-(sp)
    b2fc:	|      move.l d1,-(sp)
    b2fe:	|      move.l d0,-(sp)
    b300:	|      jsr 99c0 <loadBackDrop>
    b306:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b30a:	|      moveq #2,d0
}
    b30c:	\----> lea 12(sp),sp
    b310:	       rts

0000b312 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    b312:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b316:	       movea.l 20(sp),a0
    b31a:	       move.l 24(a0),d0
    b31e:	       move.l d0,-(sp)
    b320:	       pea 1 <_start+0x1>
    b324:	       lea 8(sp),a0
    b328:	       move.l a0,-(sp)
    b32a:	       jsr 10db4 <getValueType>
    b330:	       lea 12(sp),sp
    b334:	       tst.w d0
    b336:	   /-- bne.s b33e <builtIn_mixOverlay+0x2c>
    b338:	   |   moveq #1,d0
    b33a:	/--|-- bra.w b3d6 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b33e:	|  \-> moveq #24,d0
    b340:	|      add.l 20(sp),d0
    b344:	|      move.l d0,-(sp)
    b346:	|      jsr 11738 <trimStack>
    b34c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b34e:	|      movea.l 20(sp),a0
    b352:	|      move.l 24(a0),d0
    b356:	|      move.l d0,-(sp)
    b358:	|      pea 1 <_start+0x1>
    b35c:	|      moveq #12,d0
    b35e:	|      add.l sp,d0
    b360:	|      move.l d0,-(sp)
    b362:	|      jsr 10db4 <getValueType>
    b368:	|      lea 12(sp),sp
    b36c:	|      tst.w d0
    b36e:	|  /-- bne.s b374 <builtIn_mixOverlay+0x62>
    b370:	|  |   moveq #1,d0
    b372:	+--|-- bra.s b3d6 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b374:	|  \-> moveq #24,d0
    b376:	|      add.l 20(sp),d0
    b37a:	|      move.l d0,-(sp)
    b37c:	|      jsr 11738 <trimStack>
    b382:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    b384:	|      movea.l 20(sp),a0
    b388:	|      move.l 24(a0),d0
    b38c:	|      move.l d0,-(sp)
    b38e:	|      pea 5 <_start+0x5>
    b392:	|      moveq #16,d0
    b394:	|      add.l sp,d0
    b396:	|      move.l d0,-(sp)
    b398:	|      jsr 10db4 <getValueType>
    b39e:	|      lea 12(sp),sp
    b3a2:	|      tst.w d0
    b3a4:	|  /-- bne.s b3aa <builtIn_mixOverlay+0x98>
    b3a6:	|  |   moveq #1,d0
    b3a8:	+--|-- bra.s b3d6 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    b3aa:	|  \-> moveq #24,d0
    b3ac:	|      add.l 20(sp),d0
    b3b0:	|      move.l d0,-(sp)
    b3b2:	|      jsr 11738 <trimStack>
    b3b8:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    b3ba:	|      movea.l (sp),a0
    b3bc:	|      move.l 4(sp),d1
    b3c0:	|      move.l 8(sp),d0
    b3c4:	|      move.l a0,-(sp)
    b3c6:	|      move.l d1,-(sp)
    b3c8:	|      move.l d0,-(sp)
    b3ca:	|      jsr 9a36 <mixBackDrop>
    b3d0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b3d4:	|      moveq #2,d0
}
    b3d6:	\----> lea 12(sp),sp
    b3da:	       rts

0000b3dc <builtIn_pasteImage>:

builtIn(pasteImage)
{
    b3dc:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b3e0:	       movea.l 20(sp),a0
    b3e4:	       move.l 24(a0),d0
    b3e8:	       move.l d0,-(sp)
    b3ea:	       pea 1 <_start+0x1>
    b3ee:	       lea 8(sp),a0
    b3f2:	       move.l a0,-(sp)
    b3f4:	       jsr 10db4 <getValueType>
    b3fa:	       lea 12(sp),sp
    b3fe:	       tst.w d0
    b400:	   /-- bne.s b408 <builtIn_pasteImage+0x2c>
    b402:	   |   moveq #1,d0
    b404:	/--|-- bra.w b498 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    b408:	|  \-> moveq #24,d0
    b40a:	|      add.l 20(sp),d0
    b40e:	|      move.l d0,-(sp)
    b410:	|      jsr 11738 <trimStack>
    b416:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b418:	|      movea.l 20(sp),a0
    b41c:	|      move.l 24(a0),d0
    b420:	|      move.l d0,-(sp)
    b422:	|      pea 1 <_start+0x1>
    b426:	|      moveq #12,d0
    b428:	|      add.l sp,d0
    b42a:	|      move.l d0,-(sp)
    b42c:	|      jsr 10db4 <getValueType>
    b432:	|      lea 12(sp),sp
    b436:	|      tst.w d0
    b438:	|  /-- bne.s b43e <builtIn_pasteImage+0x62>
    b43a:	|  |   moveq #1,d0
    b43c:	+--|-- bra.s b498 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    b43e:	|  \-> moveq #24,d0
    b440:	|      add.l 20(sp),d0
    b444:	|      move.l d0,-(sp)
    b446:	|      jsr 11738 <trimStack>
    b44c:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    b44e:	|      movea.l 20(sp),a0
    b452:	|      move.l 24(a0),d0
    b456:	|      move.l d0,-(sp)
    b458:	|      jsr 1128c <getAnimationFromVar>
    b45e:	|      addq.l #4,sp
    b460:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    b464:	|      moveq #24,d0
    b466:	|      add.l 20(sp),d0
    b46a:	|      move.l d0,-(sp)
    b46c:	|      jsr 11738 <trimStack>
    b472:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    b474:	|      tst.l 8(sp)
    b478:	|  /-- bne.s b47e <builtIn_pasteImage+0xa2>
    b47a:	|  |   moveq #2,d0
    b47c:	+--|-- bra.s b498 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    b47e:	|  \-> move.l (sp),d1
    b480:	|      move.l 4(sp),d0
    b484:	|      move.l 8(sp),-(sp)
    b488:	|      move.l d1,-(sp)
    b48a:	|      move.l d0,-(sp)
    b48c:	|      jsr de2 <pasteCursor>
    b492:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b496:	|      moveq #2,d0
}
    b498:	\----> lea 12(sp),sp
    b49c:	       rts

0000b49e <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    b49e:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b4a0:	       movea.l 16(sp),a0
    b4a4:	       move.l 24(a0),d0
    b4a8:	       move.l d0,-(sp)
    b4aa:	       pea 1 <_start+0x1>
    b4ae:	       move.l sp,d0
    b4b0:	       addq.l #8,d0
    b4b2:	       move.l d0,-(sp)
    b4b4:	       jsr 10db4 <getValueType>
    b4ba:	       lea 12(sp),sp
    b4be:	       tst.w d0
    b4c0:	   /-- bne.s b4c8 <builtIn_setSceneDimensions+0x2a>
    b4c2:	   |   moveq #1,d0
    b4c4:	/--|-- bra.w b550 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    b4c8:	|  \-> moveq #24,d0
    b4ca:	|      add.l 16(sp),d0
    b4ce:	|      move.l d0,-(sp)
    b4d0:	|      jsr 11738 <trimStack>
    b4d6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b4d8:	|      movea.l 16(sp),a0
    b4dc:	|      move.l 24(a0),d0
    b4e0:	|      move.l d0,-(sp)
    b4e2:	|      pea 1 <_start+0x1>
    b4e6:	|      moveq #12,d0
    b4e8:	|      add.l sp,d0
    b4ea:	|      move.l d0,-(sp)
    b4ec:	|      jsr 10db4 <getValueType>
    b4f2:	|      lea 12(sp),sp
    b4f6:	|      tst.w d0
    b4f8:	|  /-- bne.s b4fe <builtIn_setSceneDimensions+0x60>
    b4fa:	|  |   moveq #1,d0
    b4fc:	+--|-- bra.s b550 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    b4fe:	|  \-> moveq #24,d0
    b500:	|      add.l 16(sp),d0
    b504:	|      move.l d0,-(sp)
    b506:	|      jsr 11738 <trimStack>
    b50c:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    b50e:	|      move.l (sp),d1
    b510:	|      move.l 4(sp),d0
    b514:	|      move.l d1,-(sp)
    b516:	|      move.l d0,-(sp)
    b518:	|      jsr 9af2 <resizeBackdrop>
    b51e:	|      addq.l #8,sp
    b520:	|      tst.w d0
    b522:	|  /-- beq.s b540 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    b524:	|  |   move.l (sp),d1
    b526:	|  |   move.l 4(sp),d0
    b52a:	|  |   move.l d1,-(sp)
    b52c:	|  |   move.l d0,-(sp)
    b52e:	|  |   clr.l -(sp)
    b530:	|  |   clr.l -(sp)
    b532:	|  |   jsr 988e <blankScreen>
    b538:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    b53c:	|  |   moveq #2,d0
    b53e:	+--|-- bra.s b550 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    b540:	|  \-> pea 1683d <graphics.c.1c13408a+0x181>
    b546:	|      jsr 12e08 <KPrintF>
    b54c:	|      addq.l #4,sp
	return BR_ERROR;
    b54e:	|      moveq #1,d0
}
    b550:	\----> addq.l #8,sp
    b552:	       rts

0000b554 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    b554:	          move.l d3,-(sp)
    b556:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b558:	          movea.l 16(sp),a0
    b55c:	          move.l 24(a0),d0
    b560:	          move.l d0,-(sp)
    b562:	          pea 1 <_start+0x1>
    b566:	          pea 19d18 <cameraY>
    b56c:	          jsr 10db4 <getValueType>
    b572:	          lea 12(sp),sp
    b576:	          tst.w d0
    b578:	      /-- bne.s b580 <builtIn_aimCamera+0x2c>
    b57a:	      |   moveq #1,d0
    b57c:	/-----|-- bra.w b802 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    b580:	|     \-> moveq #24,d0
    b582:	|         add.l 16(sp),d0
    b586:	|         move.l d0,-(sp)
    b588:	|         jsr 11738 <trimStack>
    b58e:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b590:	|         movea.l 16(sp),a0
    b594:	|         move.l 24(a0),d0
    b598:	|         move.l d0,-(sp)
    b59a:	|         pea 1 <_start+0x1>
    b59e:	|         pea 19d14 <cameraX>
    b5a4:	|         jsr 10db4 <getValueType>
    b5aa:	|         lea 12(sp),sp
    b5ae:	|         tst.w d0
    b5b0:	|     /-- bne.s b5b8 <builtIn_aimCamera+0x64>
    b5b2:	|     |   moveq #1,d0
    b5b4:	+-----|-- bra.w b802 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    b5b8:	|     \-> moveq #24,d0
    b5ba:	|         add.l 16(sp),d0
    b5be:	|         move.l d0,-(sp)
    b5c0:	|         jsr 11738 <trimStack>
    b5c6:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    b5c8:	|         move.l 19d14 <cameraX>,d0
    b5ce:	|         move.l d0,-(sp)
    b5d0:	|         jsr 133a4 <__floatsisf>
    b5d6:	|         addq.l #4,sp
    b5d8:	|         move.l d0,d2
    b5da:	|         move.l 19b5a <winWidth>,d0
    b5e0:	|         lsr.l #1,d0
    b5e2:	|         move.l d0,-(sp)
    b5e4:	|         jsr 133cc <__floatunsisf>
    b5ea:	|         addq.l #4,sp
    b5ec:	|         move.l d0,d1
    b5ee:	|         move.l 1814a <cameraZoom>,d0
    b5f4:	|         move.l d0,-(sp)
    b5f6:	|         move.l d1,-(sp)
    b5f8:	|         jsr 13250 <__divsf3>
    b5fe:	|         addq.l #8,sp
    b600:	|         move.l d0,-(sp)
    b602:	|         move.l d2,-(sp)
    b604:	|         jsr 13698 <__subsf3>
    b60a:	|         addq.l #8,sp
    b60c:	|         move.l d0,-(sp)
    b60e:	|         jsr 1333c <__fixsfsi>
    b614:	|         addq.l #4,sp
    b616:	|         move.l d0,19d14 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    b61c:	|         move.l 19d18 <cameraY>,d0
    b622:	|         move.l d0,-(sp)
    b624:	|         jsr 133a4 <__floatsisf>
    b62a:	|         addq.l #4,sp
    b62c:	|         move.l d0,d2
    b62e:	|         move.l 19b5e <winHeight>,d0
    b634:	|         lsr.l #1,d0
    b636:	|         move.l d0,-(sp)
    b638:	|         jsr 133cc <__floatunsisf>
    b63e:	|         addq.l #4,sp
    b640:	|         move.l d0,d1
    b642:	|         move.l 1814a <cameraZoom>,d0
    b648:	|         move.l d0,-(sp)
    b64a:	|         move.l d1,-(sp)
    b64c:	|         jsr 13250 <__divsf3>
    b652:	|         addq.l #8,sp
    b654:	|         move.l d0,-(sp)
    b656:	|         move.l d2,-(sp)
    b658:	|         jsr 13698 <__subsf3>
    b65e:	|         addq.l #8,sp
    b660:	|         move.l d0,-(sp)
    b662:	|         jsr 1333c <__fixsfsi>
    b668:	|         addq.l #4,sp
    b66a:	|         move.l d0,19d18 <cameraY>

	if (cameraX < 0) cameraX = 0;
    b670:	|         move.l 19d14 <cameraX>,d0
    b676:	|     /-- bpl.s b682 <builtIn_aimCamera+0x12e>
    b678:	|     |   clr.l 19d14 <cameraX>
    b67e:	|  /--|-- bra.w b738 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    b682:	|  |  \-> move.l 19d14 <cameraX>,d0
    b688:	|  |      move.l d0,-(sp)
    b68a:	|  |      jsr 133a4 <__floatsisf>
    b690:	|  |      addq.l #4,sp
    b692:	|  |      move.l d0,d2
    b694:	|  |      move.l 19cf6 <sceneWidth>,d0
    b69a:	|  |      move.l d0,-(sp)
    b69c:	|  |      jsr 133cc <__floatunsisf>
    b6a2:	|  |      addq.l #4,sp
    b6a4:	|  |      move.l d0,d3
    b6a6:	|  |      move.l 19b5a <winWidth>,d0
    b6ac:	|  |      move.l d0,-(sp)
    b6ae:	|  |      jsr 133cc <__floatunsisf>
    b6b4:	|  |      addq.l #4,sp
    b6b6:	|  |      move.l d0,d1
    b6b8:	|  |      move.l 1814a <cameraZoom>,d0
    b6be:	|  |      move.l d0,-(sp)
    b6c0:	|  |      move.l d1,-(sp)
    b6c2:	|  |      jsr 13250 <__divsf3>
    b6c8:	|  |      addq.l #8,sp
    b6ca:	|  |      move.l d0,-(sp)
    b6cc:	|  |      move.l d3,-(sp)
    b6ce:	|  |      jsr 13698 <__subsf3>
    b6d4:	|  |      addq.l #8,sp
    b6d6:	|  |      move.l d0,-(sp)
    b6d8:	|  |      move.l d2,-(sp)
    b6da:	|  |      jsr 13510 <__gtsf2>
    b6e0:	|  |      addq.l #8,sp
    b6e2:	|  |      tst.l d0
    b6e4:	|  +----- ble.s b738 <builtIn_aimCamera+0x1e4>
    b6e6:	|  |      move.l 19cf6 <sceneWidth>,d0
    b6ec:	|  |      move.l d0,-(sp)
    b6ee:	|  |      jsr 133cc <__floatunsisf>
    b6f4:	|  |      addq.l #4,sp
    b6f6:	|  |      move.l d0,d2
    b6f8:	|  |      move.l 19b5a <winWidth>,d0
    b6fe:	|  |      move.l d0,-(sp)
    b700:	|  |      jsr 133cc <__floatunsisf>
    b706:	|  |      addq.l #4,sp
    b708:	|  |      move.l d0,d1
    b70a:	|  |      move.l 1814a <cameraZoom>,d0
    b710:	|  |      move.l d0,-(sp)
    b712:	|  |      move.l d1,-(sp)
    b714:	|  |      jsr 13250 <__divsf3>
    b71a:	|  |      addq.l #8,sp
    b71c:	|  |      move.l d0,-(sp)
    b71e:	|  |      move.l d2,-(sp)
    b720:	|  |      jsr 13698 <__subsf3>
    b726:	|  |      addq.l #8,sp
    b728:	|  |      move.l d0,-(sp)
    b72a:	|  |      jsr 1333c <__fixsfsi>
    b730:	|  |      addq.l #4,sp
    b732:	|  |      move.l d0,19d14 <cameraX>
	if (cameraY < 0) cameraY = 0;
    b738:	|  \----> move.l 19d18 <cameraY>,d0
    b73e:	|     /-- bpl.s b74a <builtIn_aimCamera+0x1f6>
    b740:	|     |   clr.l 19d18 <cameraY>
    b746:	|  /--|-- bra.w b800 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    b74a:	|  |  \-> move.l 19d18 <cameraY>,d0
    b750:	|  |      move.l d0,-(sp)
    b752:	|  |      jsr 133a4 <__floatsisf>
    b758:	|  |      addq.l #4,sp
    b75a:	|  |      move.l d0,d2
    b75c:	|  |      move.l 19cfa <sceneHeight>,d0
    b762:	|  |      move.l d0,-(sp)
    b764:	|  |      jsr 133cc <__floatunsisf>
    b76a:	|  |      addq.l #4,sp
    b76c:	|  |      move.l d0,d3
    b76e:	|  |      move.l 19b5e <winHeight>,d0
    b774:	|  |      move.l d0,-(sp)
    b776:	|  |      jsr 133cc <__floatunsisf>
    b77c:	|  |      addq.l #4,sp
    b77e:	|  |      move.l d0,d1
    b780:	|  |      move.l 1814a <cameraZoom>,d0
    b786:	|  |      move.l d0,-(sp)
    b788:	|  |      move.l d1,-(sp)
    b78a:	|  |      jsr 13250 <__divsf3>
    b790:	|  |      addq.l #8,sp
    b792:	|  |      move.l d0,-(sp)
    b794:	|  |      move.l d3,-(sp)
    b796:	|  |      jsr 13698 <__subsf3>
    b79c:	|  |      addq.l #8,sp
    b79e:	|  |      move.l d0,-(sp)
    b7a0:	|  |      move.l d2,-(sp)
    b7a2:	|  |      jsr 13510 <__gtsf2>
    b7a8:	|  |      addq.l #8,sp
    b7aa:	|  |      tst.l d0
    b7ac:	|  +----- ble.s b800 <builtIn_aimCamera+0x2ac>
    b7ae:	|  |      move.l 19cfa <sceneHeight>,d0
    b7b4:	|  |      move.l d0,-(sp)
    b7b6:	|  |      jsr 133cc <__floatunsisf>
    b7bc:	|  |      addq.l #4,sp
    b7be:	|  |      move.l d0,d2
    b7c0:	|  |      move.l 19b5e <winHeight>,d0
    b7c6:	|  |      move.l d0,-(sp)
    b7c8:	|  |      jsr 133cc <__floatunsisf>
    b7ce:	|  |      addq.l #4,sp
    b7d0:	|  |      move.l d0,d1
    b7d2:	|  |      move.l 1814a <cameraZoom>,d0
    b7d8:	|  |      move.l d0,-(sp)
    b7da:	|  |      move.l d1,-(sp)
    b7dc:	|  |      jsr 13250 <__divsf3>
    b7e2:	|  |      addq.l #8,sp
    b7e4:	|  |      move.l d0,-(sp)
    b7e6:	|  |      move.l d2,-(sp)
    b7e8:	|  |      jsr 13698 <__subsf3>
    b7ee:	|  |      addq.l #8,sp
    b7f0:	|  |      move.l d0,-(sp)
    b7f2:	|  |      jsr 1333c <__fixsfsi>
    b7f8:	|  |      addq.l #4,sp
    b7fa:	|  |      move.l d0,19d18 <cameraY>
	return BR_CONTINUE;
    b800:	|  \----> moveq #2,d0
}
    b802:	\-------> move.l (sp)+,d2
    b804:	          move.l (sp)+,d3
    b806:	          rts

0000b808 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    b808:	       subq.l #4,sp
    b80a:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b80c:	       movea.l 16(sp),a0
    b810:	       move.l 24(a0),d0
    b814:	       move.l d0,-(sp)
    b816:	       pea 1 <_start+0x1>
    b81a:	       moveq #12,d0
    b81c:	       add.l sp,d0
    b81e:	       move.l d0,-(sp)
    b820:	       jsr 10db4 <getValueType>
    b826:	       lea 12(sp),sp
    b82a:	       tst.w d0
    b82c:	   /-- bne.s b834 <builtIn_zoomCamera+0x2c>
    b82e:	   |   moveq #1,d0
    b830:	/--|-- bra.w ba2e <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    b834:	|  \-> moveq #24,d0
    b836:	|      add.l 16(sp),d0
    b83a:	|      move.l d0,-(sp)
    b83c:	|      jsr 11738 <trimStack>
    b842:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    b844:	|      move.l 19c1a <input+0xa>,d0
    b84a:	|      move.l d0,-(sp)
    b84c:	|      jsr 133a4 <__floatsisf>
    b852:	|      addq.l #4,sp
    b854:	|      move.l d0,d1
    b856:	|      move.l 1814a <cameraZoom>,d0
    b85c:	|      move.l d0,-(sp)
    b85e:	|      move.l d1,-(sp)
    b860:	|      jsr 13456 <__mulsf3>
    b866:	|      addq.l #8,sp
    b868:	|      move.l d0,-(sp)
    b86a:	|      jsr 1333c <__fixsfsi>
    b870:	|      addq.l #4,sp
    b872:	|      move.l d0,19c1a <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    b878:	|      move.l 19c1e <input+0xe>,d0
    b87e:	|      move.l d0,-(sp)
    b880:	|      jsr 133a4 <__floatsisf>
    b886:	|      addq.l #4,sp
    b888:	|      move.l d0,d1
    b88a:	|      move.l 1814a <cameraZoom>,d0
    b890:	|      move.l d0,-(sp)
    b892:	|      move.l d1,-(sp)
    b894:	|      jsr 13456 <__mulsf3>
    b89a:	|      addq.l #8,sp
    b89c:	|      move.l d0,-(sp)
    b89e:	|      jsr 1333c <__fixsfsi>
    b8a4:	|      addq.l #4,sp
    b8a6:	|      move.l d0,19c1e <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    b8ac:	|      move.l 4(sp),d0
    b8b0:	|      move.l d0,-(sp)
    b8b2:	|      jsr 133a4 <__floatsisf>
    b8b8:	|      addq.l #4,sp
    b8ba:	|      move.l #1008981770,-(sp)
    b8c0:	|      move.l d0,-(sp)
    b8c2:	|      jsr 13456 <__mulsf3>
    b8c8:	|      addq.l #8,sp
    b8ca:	|      move.l d0,1814a <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    b8d0:	|      move.l 19b5a <winWidth>,d0
    b8d6:	|      move.l d0,-(sp)
    b8d8:	|      jsr 133cc <__floatunsisf>
    b8de:	|      addq.l #4,sp
    b8e0:	|      move.l d0,d1
    b8e2:	|      move.l 1814a <cameraZoom>,d0
    b8e8:	|      move.l d0,-(sp)
    b8ea:	|      move.l d1,-(sp)
    b8ec:	|      jsr 13250 <__divsf3>
    b8f2:	|      addq.l #8,sp
    b8f4:	|      move.l d0,d2
    b8f6:	|      move.l 19cf6 <sceneWidth>,d0
    b8fc:	|      move.l d0,-(sp)
    b8fe:	|      jsr 133cc <__floatunsisf>
    b904:	|      addq.l #4,sp
    b906:	|      move.l d0,-(sp)
    b908:	|      move.l d2,-(sp)
    b90a:	|      jsr 13510 <__gtsf2>
    b910:	|      addq.l #8,sp
    b912:	|      tst.l d0
    b914:	|  /-- ble.s b94a <builtIn_zoomCamera+0x142>
    b916:	|  |   move.l 19b5a <winWidth>,d0
    b91c:	|  |   move.l d0,-(sp)
    b91e:	|  |   jsr 133cc <__floatunsisf>
    b924:	|  |   addq.l #4,sp
    b926:	|  |   move.l d0,d2
    b928:	|  |   move.l 19cf6 <sceneWidth>,d0
    b92e:	|  |   move.l d0,-(sp)
    b930:	|  |   jsr 133cc <__floatunsisf>
    b936:	|  |   addq.l #4,sp
    b938:	|  |   move.l d0,-(sp)
    b93a:	|  |   move.l d2,-(sp)
    b93c:	|  |   jsr 13250 <__divsf3>
    b942:	|  |   addq.l #8,sp
    b944:	|  |   move.l d0,1814a <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    b94a:	|  \-> move.l 19b5e <winHeight>,d0
    b950:	|      move.l d0,-(sp)
    b952:	|      jsr 133cc <__floatunsisf>
    b958:	|      addq.l #4,sp
    b95a:	|      move.l d0,d1
    b95c:	|      move.l 1814a <cameraZoom>,d0
    b962:	|      move.l d0,-(sp)
    b964:	|      move.l d1,-(sp)
    b966:	|      jsr 13250 <__divsf3>
    b96c:	|      addq.l #8,sp
    b96e:	|      move.l d0,d2
    b970:	|      move.l 19cfa <sceneHeight>,d0
    b976:	|      move.l d0,-(sp)
    b978:	|      jsr 133cc <__floatunsisf>
    b97e:	|      addq.l #4,sp
    b980:	|      move.l d0,-(sp)
    b982:	|      move.l d2,-(sp)
    b984:	|      jsr 13510 <__gtsf2>
    b98a:	|      addq.l #8,sp
    b98c:	|      tst.l d0
    b98e:	|  /-- ble.s b9c4 <builtIn_zoomCamera+0x1bc>
    b990:	|  |   move.l 19b5e <winHeight>,d0
    b996:	|  |   move.l d0,-(sp)
    b998:	|  |   jsr 133cc <__floatunsisf>
    b99e:	|  |   addq.l #4,sp
    b9a0:	|  |   move.l d0,d2
    b9a2:	|  |   move.l 19cfa <sceneHeight>,d0
    b9a8:	|  |   move.l d0,-(sp)
    b9aa:	|  |   jsr 133cc <__floatunsisf>
    b9b0:	|  |   addq.l #4,sp
    b9b2:	|  |   move.l d0,-(sp)
    b9b4:	|  |   move.l d2,-(sp)
    b9b6:	|  |   jsr 13250 <__divsf3>
    b9bc:	|  |   addq.l #8,sp
    b9be:	|  |   move.l d0,1814a <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    b9c4:	|  \-> move.l 19c1a <input+0xa>,d0
    b9ca:	|      move.l d0,-(sp)
    b9cc:	|      jsr 133a4 <__floatsisf>
    b9d2:	|      addq.l #4,sp
    b9d4:	|      move.l d0,d1
    b9d6:	|      move.l 1814a <cameraZoom>,d0
    b9dc:	|      move.l d0,-(sp)
    b9de:	|      move.l d1,-(sp)
    b9e0:	|      jsr 13250 <__divsf3>
    b9e6:	|      addq.l #8,sp
    b9e8:	|      move.l d0,-(sp)
    b9ea:	|      jsr 1333c <__fixsfsi>
    b9f0:	|      addq.l #4,sp
    b9f2:	|      move.l d0,19c1a <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    b9f8:	|      move.l 19c1e <input+0xe>,d0
    b9fe:	|      move.l d0,-(sp)
    ba00:	|      jsr 133a4 <__floatsisf>
    ba06:	|      addq.l #4,sp
    ba08:	|      move.l d0,d1
    ba0a:	|      move.l 1814a <cameraZoom>,d0
    ba10:	|      move.l d0,-(sp)
    ba12:	|      move.l d1,-(sp)
    ba14:	|      jsr 13250 <__divsf3>
    ba1a:	|      addq.l #8,sp
    ba1c:	|      move.l d0,-(sp)
    ba1e:	|      jsr 1333c <__fixsfsi>
    ba24:	|      addq.l #4,sp
    ba26:	|      move.l d0,19c1e <input+0xe>

	return BR_CONTINUE;
    ba2c:	|      moveq #2,d0
}
    ba2e:	\----> move.l (sp)+,d2
    ba30:	       addq.l #4,sp
    ba32:	       rts

0000ba34 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    ba34:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    ba36:	             tst.l 8(sp)
    ba3a:	         /-- bne.s ba4e <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    ba3c:	         |   pea 16862 <graphics.c.1c13408a+0x1a6>
    ba42:	         |   jsr 12e08 <KPrintF>
    ba48:	         |   addq.l #4,sp
		return BR_ERROR;
    ba4a:	         |   moveq #1,d0
    ba4c:	/--------|-- bra.s baae <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    ba4e:	|        \-> jsr c58 <rand>
    ba54:	|            move.l d0,d1
    ba56:	|            move.l 8(sp),d0
    ba5a:	|            move.l d0,-(sp)
    ba5c:	|            move.l d1,-(sp)
    ba5e:	|            jsr 139d8 <__umodsi3>
    ba64:	|            addq.l #8,sp
    ba66:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    ba68:	|     /----- bra.s ba9c <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    ba6a:	|  /--|----> move.l (sp),d0
    ba6c:	|  |  |      cmp.l 8(sp),d0
    ba70:	|  |  |  /-- bne.s ba8c <builtIn_pickOne+0x58>
    ba72:	|  |  |  |   moveq #28,d0
    ba74:	|  |  |  |   add.l 12(sp),d0
    ba78:	|  |  |  |   movea.l 12(sp),a0
    ba7c:	|  |  |  |   move.l 24(a0),d1
    ba80:	|  |  |  |   move.l d0,-(sp)
    ba82:	|  |  |  |   move.l d1,-(sp)
    ba84:	|  |  |  |   jsr 1126e <copyVariable>
    ba8a:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    ba8c:	|  |  |  \-> moveq #24,d0
    ba8e:	|  |  |      add.l 12(sp),d0
    ba92:	|  |  |      move.l d0,-(sp)
    ba94:	|  |  |      jsr 11738 <trimStack>
    ba9a:	|  |  |      addq.l #4,sp
	while (numParams --) {
    ba9c:	|  |  \----> move.l 8(sp),d0
    baa0:	|  |         move.l d0,d1
    baa2:	|  |         subq.l #1,d1
    baa4:	|  |         move.l d1,8(sp)
    baa8:	|  |         tst.l d0
    baaa:	|  \-------- bne.s ba6a <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    baac:	|            moveq #2,d0
}
    baae:	\----------> addq.l #4,sp
    bab0:	             rts

0000bab2 <builtIn_substring>:

builtIn(substring)
{
    bab2:	       lea -40(sp),sp
    bab6:	       move.l a6,-(sp)
    bab8:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    baba:	       movea.l 56(sp),a0
    babe:	       move.l 24(a0),d0
    bac2:	       move.l d0,-(sp)
    bac4:	       pea 1 <_start+0x1>
    bac8:	       lea 16(sp),a0
    bacc:	       move.l a0,-(sp)
    bace:	       jsr 10db4 <getValueType>
    bad4:	       lea 12(sp),sp
    bad8:	       tst.w d0
    bada:	   /-- bne.s bae2 <builtIn_substring+0x30>
    badc:	   |   moveq #1,d0
    bade:	/--|-- bra.w bc5a <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    bae2:	|  \-> moveq #24,d0
    bae4:	|      add.l 56(sp),d0
    bae8:	|      move.l d0,-(sp)
    baea:	|      jsr 11738 <trimStack>
    baf0:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    baf2:	|      movea.l 56(sp),a0
    baf6:	|      move.l 24(a0),d0
    bafa:	|      move.l d0,-(sp)
    bafc:	|      pea 1 <_start+0x1>
    bb00:	|      lea 20(sp),a0
    bb04:	|      move.l a0,-(sp)
    bb06:	|      jsr 10db4 <getValueType>
    bb0c:	|      lea 12(sp),sp
    bb10:	|      tst.w d0
    bb12:	|  /-- bne.s bb1a <builtIn_substring+0x68>
    bb14:	|  |   moveq #1,d0
    bb16:	+--|-- bra.w bc5a <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    bb1a:	|  \-> moveq #24,d0
    bb1c:	|      add.l 56(sp),d0
    bb20:	|      move.l d0,-(sp)
    bb22:	|      jsr 11738 <trimStack>
    bb28:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    bb2a:	|      movea.l 56(sp),a0
    bb2e:	|      move.l 24(a0),d0
    bb32:	|      move.l d0,-(sp)
    bb34:	|      jsr 1138a <getTextFromAnyVar>
    bb3a:	|      addq.l #4,sp
    bb3c:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    bb40:	|      moveq #24,d0
    bb42:	|      add.l 56(sp),d0
    bb46:	|      move.l d0,-(sp)
    bb48:	|      jsr 11738 <trimStack>
    bb4e:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    bb50:	|      move.l 44(sp),-(sp)
    bb54:	|      jsr 102a0 <strlen>
    bb5a:	|      addq.l #4,sp
    bb5c:	|      move.l d0,d1
    bb5e:	|      move.l 12(sp),d0
    bb62:	|      movea.l d0,a0
    bb64:	|      move.l 8(sp),d0
    bb68:	|      add.l a0,d0
    bb6a:	|      cmp.l d1,d0
    bb6c:	|  /-- bls.s bba2 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    bb6e:	|  |   move.l 44(sp),-(sp)
    bb72:	|  |   jsr 102a0 <strlen>
    bb78:	|  |   addq.l #4,sp
    bb7a:	|  |   move.l d0,d1
    bb7c:	|  |   move.l 12(sp),d0
    bb80:	|  |   sub.l d0,d1
    bb82:	|  |   move.l d1,d0
    bb84:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    bb88:	|  |   move.l 44(sp),-(sp)
    bb8c:	|  |   jsr 102a0 <strlen>
    bb92:	|  |   addq.l #4,sp
    bb94:	|  |   move.l d0,d1
    bb96:	|  |   move.l 12(sp),d0
    bb9a:	|  |   cmp.l d1,d0
    bb9c:	|  +-- bls.s bba2 <builtIn_substring+0xf0>
            start = 0;
    bb9e:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    bba2:	|  \-> move.l 8(sp),d0
    bba6:	|  /-- bpl.s bbac <builtIn_substring+0xfa>
        length = 0;
    bba8:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    bbac:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    bbb2:	|      move.l 12(sp),d1
    bbb6:	|      move.l 8(sp),d0
    bbba:	|      move.l d1,d2
    bbbc:	|      add.l d0,d2
    bbbe:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    bbc2:	|      move.l 36(sp),d0
    bbc6:	|      sub.l 40(sp),d0
    bbca:	|      addq.l #1,d0
    bbcc:	|      move.l d0,32(sp)
    bbd0:	|      clr.l 28(sp)
    bbd4:	|      move.l 19c5a <SysBase>,d0
    bbda:	|      movea.l d0,a6
    bbdc:	|      move.l 32(sp),d0
    bbe0:	|      move.l 28(sp),d1
    bbe4:	|      jsr -684(a6)
    bbe8:	|      move.l d0,24(sp)
    bbec:	|      move.l 24(sp),d0
    bbf0:	|      move.l d0,20(sp)
    if (!newString) {
    bbf4:	|  /-- bne.s bbfa <builtIn_substring+0x148>
        return BR_ERROR;
    bbf6:	|  |   moveq #1,d0
    bbf8:	+--|-- bra.s bc5a <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    bbfa:	|  \-> move.l 36(sp),d0
    bbfe:	|      sub.l 40(sp),d0
    bc02:	|      move.l d0,d1
    bc04:	|      move.l 40(sp),d0
    bc08:	|      add.l 44(sp),d0
    bc0c:	|      move.l d1,-(sp)
    bc0e:	|      move.l d0,-(sp)
    bc10:	|      move.l 28(sp),-(sp)
    bc14:	|      jsr 12dbc <memcpy>
    bc1a:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    bc1e:	|      move.l 36(sp),d0
    bc22:	|      sub.l 40(sp),d0
    bc26:	|      movea.l 20(sp),a0
    bc2a:	|      adda.l d0,a0
    bc2c:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    bc2e:	|      moveq #28,d0
    bc30:	|      add.l 56(sp),d0
    bc34:	|      move.l 20(sp),-(sp)
    bc38:	|      move.l d0,-(sp)
    bc3a:	|      jsr 10fd6 <makeTextVar>
    bc40:	|      addq.l #8,sp
    FreeVec(newString);
    bc42:	|      move.l 20(sp),16(sp)
    bc48:	|      move.l 19c5a <SysBase>,d0
    bc4e:	|      movea.l d0,a6
    bc50:	|      movea.l 16(sp),a1
    bc54:	|      jsr -690(a6)
    return BR_CONTINUE;
    bc58:	|      moveq #2,d0
}
    bc5a:	\----> move.l (sp)+,d2
    bc5c:	       movea.l (sp)+,a6
    bc5e:	       lea 40(sp),sp
    bc62:	       rts

0000bc64 <builtIn_stringLength>:

builtIn(stringLength)
{
    bc64:	subq.l #8,sp
    bc66:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    bc68:	movea.l 20(sp),a0
    bc6c:	move.l 24(a0),d0
    bc70:	move.l d0,-(sp)
    bc72:	jsr 1138a <getTextFromAnyVar>
    bc78:	addq.l #4,sp
    bc7a:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    bc7e:	moveq #24,d0
    bc80:	add.l 20(sp),d0
    bc84:	move.l d0,-(sp)
    bc86:	jsr 11738 <trimStack>
    bc8c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    bc8e:	move.l 8(sp),-(sp)
    bc92:	jsr 102a0 <strlen>
    bc98:	addq.l #4,sp
    bc9a:	move.l d0,d1
    bc9c:	moveq #28,d0
    bc9e:	add.l 20(sp),d0
    bca2:	move.l d1,-(sp)
    bca4:	pea 1 <_start+0x1>
    bca8:	move.l d0,-(sp)
    bcaa:	jsr 116a6 <setVariable>
    bcb0:	lea 12(sp),sp
	FreeVec(newText);
    bcb4:	move.l 8(sp),4(sp)
    bcba:	move.l 19c5a <SysBase>,d0
    bcc0:	movea.l d0,a6
    bcc2:	movea.l 4(sp),a1
    bcc6:	jsr -690(a6)
	return BR_CONTINUE;
    bcca:	moveq #2,d0
}
    bccc:	movea.l (sp)+,a6
    bcce:	addq.l #8,sp
    bcd0:	rts

0000bcd2 <builtIn_newStack>:

builtIn(newStack)
{
    bcd2:	             lea -12(sp),sp
    bcd6:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    bcd8:	             moveq #28,d0
    bcda:	             add.l 24(sp),d0
    bcde:	             move.l d0,-(sp)
    bce0:	             jsr 11002 <unlinkVar>
    bce6:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    bce8:	             movea.l 24(sp),a0
    bcec:	             moveq #6,d0
    bcee:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    bcf2:	             moveq #12,d1
    bcf4:	             move.l d1,12(sp)
    bcf8:	             clr.l 8(sp)
    bcfc:	             move.l 19c5a <SysBase>,d0
    bd02:	             movea.l d0,a6
    bd04:	             move.l 12(sp),d0
    bd08:	             move.l 8(sp),d1
    bd0c:	             jsr -684(a6)
    bd10:	             move.l d0,4(sp)
    bd14:	             move.l 4(sp),d0
    bd18:	             movea.l 24(sp),a0
    bd1c:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    bd20:	             movea.l 24(sp),a0
    bd24:	             move.l 32(a0),d0
    bd28:	         /-- bne.s bd30 <builtIn_newStack+0x5e>
    bd2a:	         |   moveq #1,d0
    bd2c:	/--------|-- bra.w bdc2 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    bd30:	|        \-> movea.l 24(sp),a0
    bd34:	|            movea.l 32(a0),a0
    bd38:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    bd3a:	|            movea.l 24(sp),a0
    bd3e:	|            movea.l 32(a0),a0
    bd42:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    bd46:	|            movea.l 24(sp),a0
    bd4a:	|            movea.l 32(a0),a0
    bd4e:	|            moveq #1,d0
    bd50:	|            move.l d0,8(a0)
    
    while (numParams--) {
    bd54:	|     /----- bra.s bdb0 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    bd56:	|  /--|----> movea.l 24(sp),a0
    bd5a:	|  |  |      move.l 32(a0),d0
    bd5e:	|  |  |      move.l d0,d1
    bd60:	|  |  |      movea.l 24(sp),a0
    bd64:	|  |  |      move.l 24(a0),d0
    bd68:	|  |  |      move.l d1,-(sp)
    bd6a:	|  |  |      move.l d0,-(sp)
    bd6c:	|  |  |      jsr 105f0 <addVarToStack>
    bd72:	|  |  |      addq.l #8,sp
    bd74:	|  |  |      tst.w d0
    bd76:	|  |  |  /-- bne.s bd7c <builtIn_newStack+0xaa>
    bd78:	|  |  |  |   moveq #1,d0
    bd7a:	+--|--|--|-- bra.s bdc2 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    bd7c:	|  |  |  \-> movea.l 24(sp),a0
    bd80:	|  |  |      movea.l 32(a0),a0
    bd84:	|  |  |      move.l 4(a0),d0
    bd88:	|  |  |  /-- bne.s bda0 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    bd8a:	|  |  |  |   movea.l 24(sp),a0
    bd8e:	|  |  |  |   movea.l 32(a0),a1
    bd92:	|  |  |  |   movea.l 24(sp),a0
    bd96:	|  |  |  |   movea.l 32(a0),a0
    bd9a:	|  |  |  |   move.l (a1),d0
    bd9c:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    bda0:	|  |  |  \-> moveq #24,d0
    bda2:	|  |  |      add.l 24(sp),d0
    bda6:	|  |  |      move.l d0,-(sp)
    bda8:	|  |  |      jsr 11738 <trimStack>
    bdae:	|  |  |      addq.l #4,sp
    while (numParams--) {
    bdb0:	|  |  \----> move.l 20(sp),d0
    bdb4:	|  |         move.l d0,d1
    bdb6:	|  |         subq.l #1,d1
    bdb8:	|  |         move.l d1,20(sp)
    bdbc:	|  |         tst.l d0
    bdbe:	|  \-------- bne.s bd56 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    bdc0:	|            moveq #2,d0
}
    bdc2:	\----------> movea.l (sp)+,a6
    bdc4:	             lea 12(sp),sp
    bdc8:	             rts

0000bdca <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    bdca:	          movea.l 8(sp),a0
    bdce:	          movea.l 24(a0),a0
    bdd2:	          move.l (a0),d0
    bdd4:	          moveq #6,d1
    bdd6:	          cmp.l d0,d1
    bdd8:	      /-- beq.s bdf4 <builtIn_stackSize+0x2a>
    bdda:	      |   moveq #10,d1
    bddc:	      |   cmp.l d0,d1
    bdde:	   /--|-- beq.s be38 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    bde0:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    bde2:	   |  |   pea 16895 <graphics.c.1c13408a+0x1d9>
    bde8:	   |  |   jsr 12e08 <KPrintF>
    bdee:	   |  |   addq.l #4,sp
	return BR_ERROR;
    bdf0:	   |  |   moveq #1,d0
    bdf2:	/--|--|-- bra.s be72 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    bdf4:	|  |  \-> movea.l 8(sp),a0
    bdf8:	|  |      movea.l 24(a0),a0
    bdfc:	|  |      move.l 4(a0),d0
    be00:	|  |      move.l d0,-(sp)
    be02:	|  |      jsr 11714 <stackSize>
    be08:	|  |      addq.l #4,sp
    be0a:	|  |      move.l d0,d1
    be0c:	|  |      moveq #28,d0
    be0e:	|  |      add.l 8(sp),d0
    be12:	|  |      move.l d1,-(sp)
    be14:	|  |      pea 1 <_start+0x1>
    be18:	|  |      move.l d0,-(sp)
    be1a:	|  |      jsr 116a6 <setVariable>
    be20:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    be24:	|  |      moveq #24,d0
    be26:	|  |      add.l 8(sp),d0
    be2a:	|  |      move.l d0,-(sp)
    be2c:	|  |      jsr 11738 <trimStack>
    be32:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    be34:	|  |      moveq #2,d0
    be36:	+--|----- bra.s be72 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    be38:	|  \----> movea.l 8(sp),a0
    be3c:	|         movea.l 24(a0),a0
    be40:	|         movea.l 4(a0),a0
    be44:	|         move.l 4(a0),d1
    be48:	|         moveq #28,d0
    be4a:	|         add.l 8(sp),d0
    be4e:	|         move.l d1,-(sp)
    be50:	|         pea 1 <_start+0x1>
    be54:	|         move.l d0,-(sp)
    be56:	|         jsr 116a6 <setVariable>
    be5c:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    be60:	|         moveq #24,d0
    be62:	|         add.l 8(sp),d0
    be66:	|         move.l d0,-(sp)
    be68:	|         jsr 11738 <trimStack>
    be6e:	|         addq.l #4,sp
			return BR_CONTINUE;
    be70:	|         moveq #2,d0
}
    be72:	\-------> rts

0000be74 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    be74:	       movea.l 8(sp),a0
    be78:	       movea.l 24(a0),a0
    be7c:	       move.l (a0),d0
    be7e:	       moveq #6,d1
    be80:	       cmp.l d0,d1
    be82:	   /-- beq.s be96 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    be84:	   |   pea 168be <graphics.c.1c13408a+0x202>
    be8a:	   |   jsr 12e08 <KPrintF>
    be90:	   |   addq.l #4,sp
		return BR_ERROR;
    be92:	   |   moveq #1,d0
    be94:	/--|-- bra.s beca <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    be96:	|  \-> moveq #28,d0
    be98:	|      add.l 8(sp),d0
    be9c:	|      movea.l 8(sp),a0
    bea0:	|      move.l 24(a0),d1
    bea4:	|      move.l d0,-(sp)
    bea6:	|      move.l d1,-(sp)
    bea8:	|      jsr 108ba <copyStack>
    beae:	|      addq.l #8,sp
    beb0:	|      tst.w d0
    beb2:	|  /-- bne.s beb8 <builtIn_copyStack+0x44>
    beb4:	|  |   moveq #1,d0
    beb6:	+--|-- bra.s beca <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    beb8:	|  \-> moveq #24,d0
    beba:	|      add.l 8(sp),d0
    bebe:	|      move.l d0,-(sp)
    bec0:	|      jsr 11738 <trimStack>
    bec6:	|      addq.l #4,sp
	return BR_CONTINUE;
    bec8:	|      moveq #2,d0
}
    beca:	\----> rts

0000becc <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    becc:	       movea.l 8(sp),a0
    bed0:	       movea.l 24(a0),a0
    bed4:	       movea.l 8(a0),a0
    bed8:	       move.l (a0),d0
    beda:	       moveq #6,d1
    bedc:	       cmp.l d0,d1
    bede:	   /-- beq.s bef4 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    bee0:	   |   pea 168d7 <graphics.c.1c13408a+0x21b>
    bee6:	   |   jsr 12e08 <KPrintF>
    beec:	   |   addq.l #4,sp
		return BR_ERROR;
    beee:	   |   moveq #1,d0
    bef0:	/--|-- bra.w bf82 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    bef4:	|  \-> movea.l 8(sp),a0
    bef8:	|      movea.l 24(a0),a0
    befc:	|      movea.l 8(a0),a0
    bf00:	|      move.l 4(a0),d0
    bf04:	|      move.l d0,d1
    bf06:	|      movea.l 8(sp),a0
    bf0a:	|      move.l 24(a0),d0
    bf0e:	|      move.l d1,-(sp)
    bf10:	|      move.l d0,-(sp)
    bf12:	|      jsr 105f0 <addVarToStack>
    bf18:	|      addq.l #8,sp
    bf1a:	|      tst.w d0
    bf1c:	|  /-- bne.s bf22 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    bf1e:	|  |   moveq #1,d0
    bf20:	+--|-- bra.s bf82 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    bf22:	|  \-> movea.l 8(sp),a0
    bf26:	|      movea.l 24(a0),a0
    bf2a:	|      movea.l 8(a0),a0
    bf2e:	|      movea.l 4(a0),a0
    bf32:	|      movea.l (a0),a0
    bf34:	|      move.l 8(a0),d0
    bf38:	|  /-- bne.s bf60 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    bf3a:	|  |   movea.l 8(sp),a0
    bf3e:	|  |   movea.l 24(a0),a0
    bf42:	|  |   movea.l 8(a0),a0
    bf46:	|  |   movea.l 4(a0),a1
    bf4a:	|  |   movea.l 8(sp),a0
    bf4e:	|  |   movea.l 24(a0),a0
    bf52:	|  |   movea.l 8(a0),a0
    bf56:	|  |   movea.l 4(a0),a0
    bf5a:	|  |   move.l (a1),d0
    bf5c:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    bf60:	|  \-> moveq #24,d0
    bf62:	|      add.l 8(sp),d0
    bf66:	|      move.l d0,-(sp)
    bf68:	|      jsr 11738 <trimStack>
    bf6e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    bf70:	|      moveq #24,d0
    bf72:	|      add.l 8(sp),d0
    bf76:	|      move.l d0,-(sp)
    bf78:	|      jsr 11738 <trimStack>
    bf7e:	|      addq.l #4,sp
	return BR_CONTINUE;
    bf80:	|      moveq #2,d0
}
    bf82:	\----> rts

0000bf84 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    bf84:	             movea.l 8(sp),a0
    bf88:	             movea.l 24(a0),a0
    bf8c:	             movea.l 8(a0),a0
    bf90:	             move.l (a0),d0
    bf92:	             moveq #6,d1
    bf94:	             cmp.l d0,d1
    bf96:	         /-- beq.s bfac <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    bf98:	         |   pea 168d7 <graphics.c.1c13408a+0x21b>
    bf9e:	         |   jsr 12e08 <KPrintF>
    bfa4:	         |   addq.l #4,sp
		return BR_ERROR;
    bfa6:	         |   moveq #1,d0
    bfa8:	/--------|-- bra.w c09a <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    bfac:	|        \-> movea.l 8(sp),a0
    bfb0:	|            movea.l 24(a0),a0
    bfb4:	|            movea.l 8(a0),a0
    bfb8:	|            movea.l 4(a0),a0
    bfbc:	|            move.l (a0),d0
    bfbe:	|     /----- bne.s c018 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    bfc0:	|     |      movea.l 8(sp),a0
    bfc4:	|     |      movea.l 24(a0),a0
    bfc8:	|     |      movea.l 8(a0),a0
    bfcc:	|     |      move.l 4(a0),d0
    bfd0:	|     |      move.l d0,d1
    bfd2:	|     |      movea.l 8(sp),a0
    bfd6:	|     |      move.l 24(a0),d0
    bfda:	|     |      move.l d1,-(sp)
    bfdc:	|     |      move.l d0,-(sp)
    bfde:	|     |      jsr 105f0 <addVarToStack>
    bfe4:	|     |      addq.l #8,sp
    bfe6:	|     |      tst.w d0
    bfe8:	|     |  /-- bne.s bff0 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    bfea:	|     |  |   moveq #1,d0
    bfec:	+-----|--|-- bra.w c09a <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    bff0:	|     |  \-> movea.l 8(sp),a0
    bff4:	|     |      movea.l 24(a0),a0
    bff8:	|     |      movea.l 8(a0),a0
    bffc:	|     |      movea.l 4(a0),a1
    c000:	|     |      movea.l 8(sp),a0
    c004:	|     |      movea.l 24(a0),a0
    c008:	|     |      movea.l 8(a0),a0
    c00c:	|     |      movea.l 4(a0),a0
    c010:	|     |      move.l (a1),d0
    c012:	|     |      move.l d0,4(a0)
    c016:	|  /--|----- bra.s c078 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    c018:	|  |  \----> movea.l 8(sp),a0
    c01c:	|  |         movea.l 24(a0),a0
    c020:	|  |         movea.l 8(a0),a0
    c024:	|  |         movea.l 4(a0),a0
    c028:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    c02c:	|  |         move.l d0,d1
    c02e:	|  |         addq.l #8,d1
    c030:	|  |         movea.l 8(sp),a0
    c034:	|  |         move.l 24(a0),d0
    c038:	|  |         move.l d1,-(sp)
    c03a:	|  |         move.l d0,-(sp)
    c03c:	|  |         jsr 105f0 <addVarToStack>
    c042:	|  |         addq.l #8,sp
    c044:	|  |         tst.w d0
    c046:	|  |     /-- bne.s c04c <builtIn_enqueue+0xc8>
			return BR_ERROR;
    c048:	|  |     |   moveq #1,d0
    c04a:	+--|-----|-- bra.s c09a <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    c04c:	|  |     \-> movea.l 8(sp),a0
    c050:	|  |         movea.l 24(a0),a0
    c054:	|  |         movea.l 8(a0),a0
    c058:	|  |         movea.l 4(a0),a0
    c05c:	|  |         movea.l 4(a0),a1
    c060:	|  |         movea.l 8(sp),a0
    c064:	|  |         movea.l 24(a0),a0
    c068:	|  |         movea.l 8(a0),a0
    c06c:	|  |         movea.l 4(a0),a0
    c070:	|  |         move.l 8(a1),d0
    c074:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    c078:	|  \-------> moveq #24,d0
    c07a:	|            add.l 8(sp),d0
    c07e:	|            move.l d0,-(sp)
    c080:	|            jsr 11738 <trimStack>
    c086:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    c088:	|            moveq #24,d0
    c08a:	|            add.l 8(sp),d0
    c08e:	|            move.l d0,-(sp)
    c090:	|            jsr 11738 <trimStack>
    c096:	|            addq.l #4,sp
	return BR_CONTINUE;
    c098:	|            moveq #2,d0
}
    c09a:	\----------> rts

0000c09c <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    c09c:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c09e:	       movea.l 12(sp),a0
    c0a2:	       movea.l 24(a0),a0
    c0a6:	       movea.l 8(a0),a0
    c0aa:	       move.l (a0),d0
    c0ac:	       moveq #6,d1
    c0ae:	       cmp.l d0,d1
    c0b0:	   /-- beq.s c0c6 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    c0b2:	   |   pea 168be <graphics.c.1c13408a+0x202>
    c0b8:	   |   jsr 12e08 <KPrintF>
    c0be:	   |   addq.l #4,sp
		return BR_ERROR;
    c0c0:	   |   moveq #1,d0
    c0c2:	/--|-- bra.w c15c <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    c0c6:	|  \-> movea.l 12(sp),a0
    c0ca:	|      movea.l 24(a0),a0
    c0ce:	|      movea.l 8(a0),a0
    c0d2:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c0d6:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    c0d8:	|      movea.l 12(sp),a0
    c0dc:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c0e0:	|      clr.l -(sp)
    c0e2:	|      move.l d1,-(sp)
    c0e4:	|      move.l d0,-(sp)
    c0e6:	|      jsr 10990 <deleteVarFromStack>
    c0ec:	|      lea 12(sp),sp
    c0f0:	|      move.l d0,d1
    c0f2:	|      moveq #28,d0
    c0f4:	|      add.l 12(sp),d0
    c0f8:	|      move.l d1,-(sp)
    c0fa:	|      pea 1 <_start+0x1>
    c0fe:	|      move.l d0,-(sp)
    c100:	|      jsr 116a6 <setVariable>
    c106:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    c10a:	|      movea.l 12(sp),a0
    c10e:	|      movea.l 24(a0),a0
    c112:	|      movea.l 8(a0),a0
    c116:	|      movea.l 4(a0),a0
    c11a:	|      move.l (a0),d0
    c11c:	|      movea.l 12(sp),a0
    c120:	|      movea.l 24(a0),a0
    c124:	|      movea.l 8(a0),a0
    c128:	|      movea.l 4(a0),a2
    c12c:	|      move.l d0,-(sp)
    c12e:	|      jsr 116f0 <stackFindLast>
    c134:	|      addq.l #4,sp
    c136:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    c13a:	|      moveq #24,d0
    c13c:	|      add.l 12(sp),d0
    c140:	|      move.l d0,-(sp)
    c142:	|      jsr 11738 <trimStack>
    c148:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c14a:	|      moveq #24,d0
    c14c:	|      add.l 12(sp),d0
    c150:	|      move.l d0,-(sp)
    c152:	|      jsr 11738 <trimStack>
    c158:	|      addq.l #4,sp
	return BR_CONTINUE;
    c15a:	|      moveq #2,d0
}
    c15c:	\----> movea.l (sp)+,a2
    c15e:	       rts

0000c160 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    c160:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    c162:	       movea.l 12(sp),a0
    c166:	       movea.l 24(a0),a0
    c16a:	       movea.l 8(a0),a0
    c16e:	       move.l (a0),d0
    c170:	       moveq #6,d1
    c172:	       cmp.l d0,d1
    c174:	   /-- beq.s c18a <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    c176:	   |   pea 168be <graphics.c.1c13408a+0x202>
    c17c:	   |   jsr 12e08 <KPrintF>
    c182:	   |   addq.l #4,sp
		return BR_ERROR;
    c184:	   |   moveq #1,d0
    c186:	/--|-- bra.w c222 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    c18a:	|  \-> movea.l 12(sp),a0
    c18e:	|      movea.l 24(a0),a0
    c192:	|      movea.l 8(a0),a0
    c196:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c19a:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    c19c:	|      movea.l 12(sp),a0
    c1a0:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    c1a4:	|      pea 1 <_start+0x1>
    c1a8:	|      move.l d1,-(sp)
    c1aa:	|      move.l d0,-(sp)
    c1ac:	|      jsr 10990 <deleteVarFromStack>
    c1b2:	|      lea 12(sp),sp
    c1b6:	|      move.l d0,d1
    c1b8:	|      moveq #28,d0
    c1ba:	|      add.l 12(sp),d0
    c1be:	|      move.l d1,-(sp)
    c1c0:	|      pea 1 <_start+0x1>
    c1c4:	|      move.l d0,-(sp)
    c1c6:	|      jsr 116a6 <setVariable>
    c1cc:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    c1d0:	|      movea.l 12(sp),a0
    c1d4:	|      movea.l 24(a0),a0
    c1d8:	|      movea.l 8(a0),a0
    c1dc:	|      movea.l 4(a0),a0
    c1e0:	|      move.l (a0),d0
    c1e2:	|      movea.l 12(sp),a0
    c1e6:	|      movea.l 24(a0),a0
    c1ea:	|      movea.l 8(a0),a0
    c1ee:	|      movea.l 4(a0),a2
    c1f2:	|      move.l d0,-(sp)
    c1f4:	|      jsr 116f0 <stackFindLast>
    c1fa:	|      addq.l #4,sp
    c1fc:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    c200:	|      moveq #24,d0
    c202:	|      add.l 12(sp),d0
    c206:	|      move.l d0,-(sp)
    c208:	|      jsr 11738 <trimStack>
    c20e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c210:	|      moveq #24,d0
    c212:	|      add.l 12(sp),d0
    c216:	|      move.l d0,-(sp)
    c218:	|      jsr 11738 <trimStack>
    c21e:	|      addq.l #4,sp
	return BR_CONTINUE;
    c220:	|      moveq #2,d0
}
    c222:	\----> movea.l (sp)+,a2
    c224:	       rts

0000c226 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c226:	       movea.l 8(sp),a0
    c22a:	       movea.l 24(a0),a0
    c22e:	       move.l (a0),d0
    c230:	       moveq #6,d1
    c232:	       cmp.l d0,d1
    c234:	   /-- beq.s c248 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    c236:	   |   pea 168be <graphics.c.1c13408a+0x202>
    c23c:	   |   jsr 12e08 <KPrintF>
    c242:	   |   addq.l #4,sp
		return BR_ERROR;
    c244:	   |   moveq #1,d0
    c246:	/--|-- bra.s c2b2 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c248:	|  \-> movea.l 8(sp),a0
    c24c:	|      movea.l 24(a0),a0
    c250:	|      movea.l 4(a0),a0
    c254:	|      move.l (a0),d0
    c256:	|  /-- bne.s c26a <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    c258:	|  |   pea 168ef <graphics.c.1c13408a+0x233>
    c25e:	|  |   jsr 12e08 <KPrintF>
    c264:	|  |   addq.l #4,sp
		return BR_ERROR;
    c266:	|  |   moveq #1,d0
    c268:	+--|-- bra.s c2b2 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    c26a:	|  \-> moveq #28,d0
    c26c:	|      add.l 8(sp),d0
    c270:	|      movea.l 8(sp),a0
    c274:	|      movea.l 24(a0),a0
    c278:	|      movea.l 4(a0),a0
    c27c:	|      move.l (a0),d1
    c27e:	|      move.l d0,-(sp)
    c280:	|      move.l d1,-(sp)
    c282:	|      jsr 1126e <copyVariable>
    c288:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    c28a:	|      movea.l 8(sp),a0
    c28e:	|      movea.l 24(a0),a0
    c292:	|      move.l 4(a0),d0
    c296:	|      move.l d0,-(sp)
    c298:	|      jsr 11738 <trimStack>
    c29e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    c2a0:	|      moveq #24,d0
    c2a2:	|      add.l 8(sp),d0
    c2a6:	|      move.l d0,-(sp)
    c2a8:	|      jsr 11738 <trimStack>
    c2ae:	|      addq.l #4,sp
	return BR_CONTINUE;
    c2b0:	|      moveq #2,d0
}
    c2b2:	\----> rts

0000c2b4 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c2b4:	       movea.l 8(sp),a0
    c2b8:	       movea.l 24(a0),a0
    c2bc:	       move.l (a0),d0
    c2be:	       moveq #6,d1
    c2c0:	       cmp.l d0,d1
    c2c2:	   /-- beq.s c2d6 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    c2c4:	   |   pea 168be <graphics.c.1c13408a+0x202>
    c2ca:	   |   jsr 12e08 <KPrintF>
    c2d0:	   |   addq.l #4,sp
		return BR_ERROR;
    c2d2:	   |   moveq #1,d0
    c2d4:	/--|-- bra.s c32a <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c2d6:	|  \-> movea.l 8(sp),a0
    c2da:	|      movea.l 24(a0),a0
    c2de:	|      movea.l 4(a0),a0
    c2e2:	|      move.l (a0),d0
    c2e4:	|  /-- bne.s c2f8 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    c2e6:	|  |   pea 168ef <graphics.c.1c13408a+0x233>
    c2ec:	|  |   jsr 12e08 <KPrintF>
    c2f2:	|  |   addq.l #4,sp
		return BR_ERROR;
    c2f4:	|  |   moveq #1,d0
    c2f6:	+--|-- bra.s c32a <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    c2f8:	|  \-> moveq #28,d0
    c2fa:	|      add.l 8(sp),d0
    c2fe:	|      movea.l 8(sp),a0
    c302:	|      movea.l 24(a0),a0
    c306:	|      movea.l 4(a0),a0
    c30a:	|      move.l (a0),d1
    c30c:	|      move.l d0,-(sp)
    c30e:	|      move.l d1,-(sp)
    c310:	|      jsr 1126e <copyVariable>
    c316:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    c318:	|      moveq #24,d0
    c31a:	|      add.l 8(sp),d0
    c31e:	|      move.l d0,-(sp)
    c320:	|      jsr 11738 <trimStack>
    c326:	|      addq.l #4,sp
	return BR_CONTINUE;
    c328:	|      moveq #2,d0
}
    c32a:	\----> rts

0000c32c <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    c32c:	       movea.l 8(sp),a0
    c330:	       movea.l 24(a0),a0
    c334:	       move.l (a0),d0
    c336:	       moveq #6,d1
    c338:	       cmp.l d0,d1
    c33a:	   /-- beq.s c34e <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    c33c:	   |   pea 168be <graphics.c.1c13408a+0x202>
    c342:	   |   jsr 12e08 <KPrintF>
    c348:	   |   addq.l #4,sp
		return BR_ERROR;
    c34a:	   |   moveq #1,d0
    c34c:	/--|-- bra.s c3a4 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    c34e:	|  \-> movea.l 8(sp),a0
    c352:	|      movea.l 24(a0),a0
    c356:	|      movea.l 4(a0),a0
    c35a:	|      move.l (a0),d0
    c35c:	|  /-- bne.s c370 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    c35e:	|  |   pea 168ef <graphics.c.1c13408a+0x233>
    c364:	|  |   jsr 12e08 <KPrintF>
    c36a:	|  |   addq.l #4,sp
		return BR_ERROR;
    c36c:	|  |   moveq #1,d0
    c36e:	+--|-- bra.s c3a4 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    c370:	|  \-> moveq #28,d0
    c372:	|      add.l 8(sp),d0
    c376:	|      movea.l 8(sp),a0
    c37a:	|      movea.l 24(a0),a0
    c37e:	|      movea.l 4(a0),a0
    c382:	|      move.l 4(a0),d1
    c386:	|      move.l d0,-(sp)
    c388:	|      move.l d1,-(sp)
    c38a:	|      jsr 1126e <copyVariable>
    c390:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    c392:	|      moveq #24,d0
    c394:	|      add.l 8(sp),d0
    c398:	|      move.l d0,-(sp)
    c39a:	|      jsr 11738 <trimStack>
    c3a0:	|      addq.l #4,sp
	return BR_CONTINUE;
    c3a2:	|      moveq #2,d0
}
    c3a4:	\----> rts

0000c3a6 <builtIn_random>:

builtIn(random)
{
    c3a6:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    c3a8:	       movea.l 12(sp),a0
    c3ac:	       move.l 24(a0),d0
    c3b0:	       move.l d0,-(sp)
    c3b2:	       pea 1 <_start+0x1>
    c3b6:	       move.l sp,d0
    c3b8:	       addq.l #8,d0
    c3ba:	       move.l d0,-(sp)
    c3bc:	       jsr 10db4 <getValueType>
    c3c2:	       lea 12(sp),sp
    c3c6:	       tst.w d0
    c3c8:	   /-- bne.s c3ce <builtIn_random+0x28>
		return BR_ERROR;
    c3ca:	   |   moveq #1,d0
    c3cc:	/--|-- bra.s c418 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    c3ce:	|  \-> moveq #24,d0
    c3d0:	|      add.l 12(sp),d0
    c3d4:	|      move.l d0,-(sp)
    c3d6:	|      jsr 11738 <trimStack>
    c3dc:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    c3de:	|      move.l (sp),d0
    c3e0:	|  /-- bgt.s c3e6 <builtIn_random+0x40>
    c3e2:	|  |   moveq #1,d0
    c3e4:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    c3e6:	|  \-> jsr c58 <rand>
    c3ec:	|      move.l d0,d1
    c3ee:	|      move.l (sp),d0
    c3f0:	|      move.l d0,-(sp)
    c3f2:	|      move.l d1,-(sp)
    c3f4:	|      jsr 139d8 <__umodsi3>
    c3fa:	|      addq.l #8,sp
    c3fc:	|      move.l d0,d1
    c3fe:	|      moveq #28,d0
    c400:	|      add.l 12(sp),d0
    c404:	|      move.l d1,-(sp)
    c406:	|      pea 1 <_start+0x1>
    c40a:	|      move.l d0,-(sp)
    c40c:	|      jsr 116a6 <setVariable>
    c412:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c416:	|      moveq #2,d0
}
    c418:	\----> addq.l #4,sp
    c41a:	       rts

0000c41c <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    c41c:	nop
    c41e:	rts

0000c420 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    c420:	moveq #2,d0
}
    c422:	rts

0000c424 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    c424:	moveq #2,d0
}
    c426:	rts

0000c428 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    c428:	moveq #2,d0
}
    c42a:	rts

0000c42c <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    c42c:	moveq #2,d0
}
    c42e:	rts

0000c430 <builtIn_setFont>:


builtIn(setFont)
{
    c430:	       lea -16(sp),sp
    c434:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c436:	       movea.l 28(sp),a0
    c43a:	       move.l 24(a0),d0
    c43e:	       move.l d0,-(sp)
    c440:	       pea 1 <_start+0x1>
    c444:	       lea 12(sp),a0
    c448:	       move.l a0,-(sp)
    c44a:	       jsr 10db4 <getValueType>
    c450:	       lea 12(sp),sp
    c454:	       tst.w d0
    c456:	   /-- bne.s c45e <builtIn_setFont+0x2e>
    c458:	   |   moveq #1,d0
    c45a:	/--|-- bra.w c50c <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    c45e:	|  \-> moveq #24,d0
    c460:	|      add.l 28(sp),d0
    c464:	|      move.l d0,-(sp)
    c466:	|      jsr 11738 <trimStack>
    c46c:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c46e:	|      movea.l 28(sp),a0
    c472:	|      move.l 24(a0),d0
    c476:	|      move.l d0,-(sp)
    c478:	|      jsr 1138a <getTextFromAnyVar>
    c47e:	|      addq.l #4,sp
    c480:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    c484:	|  /-- bne.s c48c <builtIn_setFont+0x5c>
    c486:	|  |   moveq #1,d0
    c488:	+--|-- bra.w c50c <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    c48c:	|  \-> moveq #24,d0
    c48e:	|      add.l 28(sp),d0
    c492:	|      move.l d0,-(sp)
    c494:	|      jsr 11738 <trimStack>
    c49a:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    c49c:	|      movea.l 28(sp),a0
    c4a0:	|      move.l 24(a0),d0
    c4a4:	|      move.l d0,-(sp)
    c4a6:	|      pea 5 <_start+0x5>
    c4aa:	|      lea 16(sp),a0
    c4ae:	|      move.l a0,-(sp)
    c4b0:	|      jsr 10db4 <getValueType>
    c4b6:	|      lea 12(sp),sp
    c4ba:	|      tst.w d0
    c4bc:	|  /-- bne.s c4c2 <builtIn_setFont+0x92>
    c4be:	|  |   moveq #1,d0
    c4c0:	+--|-- bra.s c50c <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    c4c2:	|  \-> moveq #24,d0
    c4c4:	|      add.l 28(sp),d0
    c4c8:	|      move.l d0,-(sp)
    c4ca:	|      jsr 11738 <trimStack>
    c4d0:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    c4d2:	|      move.l 4(sp),d1
    c4d6:	|      move.l 8(sp),d0
    c4da:	|      move.l d1,-(sp)
    c4dc:	|      move.l 20(sp),-(sp)
    c4e0:	|      move.l d0,-(sp)
    c4e2:	|      jsr 117ac <loadFont>
    c4e8:	|      lea 12(sp),sp
    c4ec:	|      tst.w d0
    c4ee:	|  /-- bne.s c4f4 <builtIn_setFont+0xc4>
    c4f0:	|  |   moveq #1,d0
    c4f2:	+--|-- bra.s c50c <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    c4f4:	|  \-> move.l 16(sp),12(sp)
    c4fa:	|      move.l 19c5a <SysBase>,d0
    c500:	|      movea.l d0,a6
    c502:	|      movea.l 12(sp),a1
    c506:	|      jsr -690(a6)

    return BR_CONTINUE;
    c50a:	|      moveq #2,d0
}
    c50c:	\----> movea.l (sp)+,a6
    c50e:	       lea 16(sp),sp
    c512:	       rts

0000c514 <builtIn_inFont>:

builtIn(inFont)
{
    c514:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    c516:	       movea.l 12(sp),a0
    c51a:	       move.l 24(a0),d0
    c51e:	       move.l d0,-(sp)
    c520:	       jsr 1138a <getTextFromAnyVar>
    c526:	       addq.l #4,sp
    c528:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    c52a:	   /-- bne.s c530 <builtIn_inFont+0x1c>
    c52c:	   |   moveq #1,d0
    c52e:	/--|-- bra.s c566 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    c530:	|  \-> moveq #24,d0
    c532:	|      add.l 12(sp),d0
    c536:	|      move.l d0,-(sp)
    c538:	|      jsr 11738 <trimStack>
    c53e:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    c540:	|      move.l (sp),-(sp)
    c542:	|      jsr 11780 <isInFont>
    c548:	|      addq.l #4,sp
    c54a:	|      movea.w d0,a0
    c54c:	|      moveq #28,d0
    c54e:	|      add.l 12(sp),d0
    c552:	|      move.l a0,-(sp)
    c554:	|      pea 1 <_start+0x1>
    c558:	|      move.l d0,-(sp)
    c55a:	|      jsr 116a6 <setVariable>
    c560:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c564:	|      moveq #2,d0
}
    c566:	\----> addq.l #4,sp
    c568:	       rts

0000c56a <builtIn_pasteString>:

builtIn(pasteString)
{
    c56a:	       lea -16(sp),sp
    c56e:	       move.l a6,-(sp)
    c570:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c572:	       movea.l 32(sp),a0
    c576:	       move.l 24(a0),d0
    c57a:	       move.l d0,-(sp)
    c57c:	       jsr 1138a <getTextFromAnyVar>
    c582:	       addq.l #4,sp
    c584:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    c588:	       moveq #24,d0
    c58a:	       add.l 32(sp),d0
    c58e:	       move.l d0,-(sp)
    c590:	       jsr 11738 <trimStack>
    c596:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c598:	       movea.l 32(sp),a0
    c59c:	       move.l 24(a0),d0
    c5a0:	       move.l d0,-(sp)
    c5a2:	       pea 1 <_start+0x1>
    c5a6:	       lea 20(sp),a0
    c5aa:	       move.l a0,-(sp)
    c5ac:	       jsr 10db4 <getValueType>
    c5b2:	       lea 12(sp),sp
    c5b6:	       tst.w d0
    c5b8:	   /-- bne.s c5c0 <builtIn_pasteString+0x56>
    c5ba:	   |   moveq #1,d0
    c5bc:	/--|-- bra.w c648 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    c5c0:	|  \-> moveq #24,d0
    c5c2:	|      add.l 32(sp),d0
    c5c6:	|      move.l d0,-(sp)
    c5c8:	|      jsr 11738 <trimStack>
    c5ce:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c5d0:	|      movea.l 32(sp),a0
    c5d4:	|      move.l 24(a0),d0
    c5d8:	|      move.l d0,-(sp)
    c5da:	|      pea 1 <_start+0x1>
    c5de:	|      lea 16(sp),a0
    c5e2:	|      move.l a0,-(sp)
    c5e4:	|      jsr 10db4 <getValueType>
    c5ea:	|      lea 12(sp),sp
    c5ee:	|      tst.w d0
    c5f0:	|  /-- bne.s c5f6 <builtIn_pasteString+0x8c>
    c5f2:	|  |   moveq #1,d0
    c5f4:	+--|-- bra.s c648 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    c5f6:	|  \-> moveq #24,d0
    c5f8:	|      add.l 32(sp),d0
    c5fc:	|      move.l d0,-(sp)
    c5fe:	|      jsr 11738 <trimStack>
    c604:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    c606:	|      move.l 8(sp),d0
    c60a:	|      cmpi.l #65535,d0
    c610:	|  /-- bne.s c630 <builtIn_pasteString+0xc6>
    c612:	|  |   move.l 19b5a <winWidth>,d2
    c618:	|  |   move.l 20(sp),-(sp)
    c61c:	|  |   jsr 11792 <stringWidth>
    c622:	|  |   addq.l #4,sp
    c624:	|  |   move.l d2,d1
    c626:	|  |   sub.l d0,d1
    c628:	|  |   move.l d1,d0
    c62a:	|  |   lsr.l #1,d0
    c62c:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    c630:	|  \-> move.l 20(sp),16(sp)
    c636:	|      move.l 19c5a <SysBase>,d0
    c63c:	|      movea.l d0,a6
    c63e:	|      movea.l 16(sp),a1
    c642:	|      jsr -690(a6)
    return BR_CONTINUE;
    c646:	|      moveq #2,d0
}
    c648:	\----> move.l (sp)+,d2
    c64a:	       movea.l (sp)+,a6
    c64c:	       lea 16(sp),sp
    c650:	       rts

0000c652 <builtIn_anim>:

builtIn(anim)
{
    c652:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    c656:	       moveq #1,d0
    c658:	       cmp.l 16(sp),d0
    c65c:	   /-- blt.s c672 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    c65e:	   |   pea 16902 <graphics.c.1c13408a+0x246>
    c664:	   |   jsr 12e08 <KPrintF>
    c66a:	   |   addq.l #4,sp
		return BR_ERROR;
    c66c:	   |   moveq #1,d0
    c66e:	/--|-- bra.w c700 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    c672:	|  \-> moveq #24,d1
    c674:	|      add.l 20(sp),d1
    c678:	|      move.l 16(sp),d0
    c67c:	|      subq.l #1,d0
    c67e:	|      move.l d1,-(sp)
    c680:	|      move.l d0,-(sp)
    c682:	|      jsr 661a <createPersonaAnim>
    c688:	|      addq.l #8,sp
    c68a:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c68e:	|      movea.l 20(sp),a0
    c692:	|      move.l 24(a0),d0
    c696:	|      move.l d0,-(sp)
    c698:	|      pea 5 <_start+0x5>
    c69c:	|      lea 8(sp),a0
    c6a0:	|      move.l a0,-(sp)
    c6a2:	|      jsr 10db4 <getValueType>
    c6a8:	|      lea 12(sp),sp
    c6ac:	|      tst.w d0
    c6ae:	|  /-- bne.s c6b4 <builtIn_anim+0x62>
    c6b0:	|  |   moveq #1,d0
    c6b2:	+--|-- bra.s c700 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    c6b4:	|  \-> moveq #24,d0
    c6b6:	|      add.l 20(sp),d0
    c6ba:	|      move.l d0,-(sp)
    c6bc:	|      jsr 11738 <trimStack>
    c6c2:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    c6c4:	|      move.l (sp),d0
    c6c6:	|      move.l d0,-(sp)
    c6c8:	|      jsr 89c4 <loadBankForAnim>
    c6ce:	|      addq.l #4,sp
    c6d0:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    c6d4:	|  /-- bne.s c6da <builtIn_anim+0x88>
    c6d6:	|  |   moveq #1,d0
    c6d8:	+--|-- bra.s c700 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    c6da:	|  \-> move.l 4(sp),-(sp)
    c6de:	|      move.l 12(sp),-(sp)
    c6e2:	|      jsr 7e68 <setBankFile>
    c6e8:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    c6ea:	|      moveq #28,d0
    c6ec:	|      add.l 20(sp),d0
    c6f0:	|      move.l 8(sp),-(sp)
    c6f4:	|      move.l d0,-(sp)
    c6f6:	|      jsr 11662 <newAnimationVariable>
    c6fc:	|      addq.l #8,sp
	return BR_CONTINUE;
    c6fe:	|      moveq #2,d0
}
    c700:	\----> lea 12(sp),sp
    c704:	       rts

0000c706 <builtIn_costume>:

builtIn(costume)
{
    c706:	          lea -32(sp),sp
    c70a:	          move.l a6,-(sp)
    c70c:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    c70e:	          moveq #8,d0
    c710:	          move.l d0,32(sp)
    c714:	          clr.l 28(sp)
    c718:	          move.l 19c5a <SysBase>,d0
    c71e:	          movea.l d0,a6
    c720:	          move.l 32(sp),d0
    c724:	          move.l 28(sp),d1
    c728:	          jsr -684(a6)
    c72c:	          move.l d0,24(sp)
    c730:	          move.l 24(sp),d0
    c734:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    c738:	      /-- bne.s c740 <builtIn_costume+0x3a>
    c73a:	      |   moveq #1,d0
    c73c:	/-----|-- bra.w c828 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    c740:	|     \-> move.l 44(sp),d0
    c744:	|         pea 3 <_start+0x3>
    c748:	|         move.l d0,-(sp)
    c74a:	|         jsr 1397c <__divsi3>
    c750:	|         addq.l #8,sp
    c752:	|         movea.l 20(sp),a0
    c756:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    c75a:	|         tst.l 44(sp)
    c75e:	|     /-- beq.s c774 <builtIn_costume+0x6e>
    c760:	|     |   movea.l 20(sp),a0
    c764:	|     |   move.l 4(a0),d1
    c768:	|     |   move.l d1,d0
    c76a:	|     |   add.l d0,d0
    c76c:	|     |   add.l d1,d0
    c76e:	|     |   cmp.l 44(sp),d0
    c772:	|  /--|-- beq.s c788 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    c774:	|  |  \-> pea 1693c <graphics.c.1c13408a+0x280>
    c77a:	|  |      jsr 12e08 <KPrintF>
    c780:	|  |      addq.l #4,sp
        return BR_ERROR;
    c782:	|  |      moveq #1,d0
    c784:	+--|----- bra.w c828 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    c788:	|  \----> move.l 44(sp),d0
    c78c:	|         add.l d0,d0
    c78e:	|         add.l d0,d0
    c790:	|         move.l d0,16(sp)
    c794:	|         clr.l 12(sp)
    c798:	|         move.l 19c5a <SysBase>,d0
    c79e:	|         movea.l d0,a6
    c7a0:	|         move.l 16(sp),d0
    c7a4:	|         move.l 12(sp),d1
    c7a8:	|         jsr -684(a6)
    c7ac:	|         move.l d0,8(sp)
    c7b0:	|         move.l 8(sp),d0
    c7b4:	|         movea.l 20(sp),a0
    c7b8:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    c7ba:	|         movea.l 20(sp),a0
    c7be:	|         move.l (a0),d0
    c7c0:	|     /-- bne.s c7c6 <builtIn_costume+0xc0>
    c7c2:	|     |   moveq #1,d0
    c7c4:	+-----|-- bra.s c828 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    c7c6:	|     \-> move.l 44(sp),d0
    c7ca:	|         subq.l #1,d0
    c7cc:	|         move.l d0,36(sp)
    c7d0:	|     /-- bra.s c80c <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    c7d2:	|  /--|-> movea.l 48(sp),a0
    c7d6:	|  |  |   move.l 24(a0),d0
    c7da:	|  |  |   movea.l 20(sp),a0
    c7de:	|  |  |   movea.l (a0),a0
    c7e0:	|  |  |   move.l 36(sp),d1
    c7e4:	|  |  |   add.l d1,d1
    c7e6:	|  |  |   add.l d1,d1
    c7e8:	|  |  |   lea (0,a0,d1.l),a2
    c7ec:	|  |  |   move.l d0,-(sp)
    c7ee:	|  |  |   jsr 1128c <getAnimationFromVar>
    c7f4:	|  |  |   addq.l #4,sp
    c7f6:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    c7f8:	|  |  |   moveq #24,d0
    c7fa:	|  |  |   add.l 48(sp),d0
    c7fe:	|  |  |   move.l d0,-(sp)
    c800:	|  |  |   jsr 11738 <trimStack>
    c806:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    c808:	|  |  |   subq.l #1,36(sp)
    c80c:	|  |  \-> tst.l 36(sp)
    c810:	|  \----- bge.s c7d2 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    c812:	|         moveq #28,d0
    c814:	|         add.l 48(sp),d0
    c818:	|         move.l 20(sp),-(sp)
    c81c:	|         move.l d0,-(sp)
    c81e:	|         jsr 11684 <newCostumeVariable>
    c824:	|         addq.l #8,sp
    return BR_CONTINUE;
    c826:	|         moveq #2,d0
}
    c828:	\-------> movea.l (sp)+,a2
    c82a:	          movea.l (sp)+,a6
    c82c:	          lea 32(sp),sp
    c830:	          rts

0000c832 <builtIn_launch>:

builtIn(launch)
{
    c832:	          lea -20(sp),sp
    c836:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    c838:	          movea.l 32(sp),a0
    c83c:	          move.l 24(a0),d0
    c840:	          move.l d0,-(sp)
    c842:	          jsr 1138a <getTextFromAnyVar>
    c848:	          addq.l #4,sp
    c84a:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    c84e:	      /-- bne.s c856 <builtIn_launch+0x24>
    c850:	      |   moveq #1,d0
    c852:	/-----|-- bra.w c984 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    c856:	|     \-> move.l 20(sp),-(sp)
    c85a:	|         jsr 2fe <encodeFilename>
    c860:	|         addq.l #4,sp
    c862:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    c866:	|         moveq #24,d0
    c868:	|         add.l 32(sp),d0
    c86c:	|         move.l d0,-(sp)
    c86e:	|         jsr 11738 <trimStack>
    c874:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    c876:	|         movea.l 20(sp),a0
    c87a:	|         move.b (a0),d0
    c87c:	|         cmpi.b #104,d0
    c880:	|  /----- bne.s c8ea <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    c882:	|  |      movea.l 20(sp),a0
    c886:	|  |      addq.l #1,a0
    c888:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    c88a:	|  |      cmpi.b #116,d0
    c88e:	|  +----- bne.s c8ea <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    c890:	|  |      movea.l 20(sp),a0
    c894:	|  |      addq.l #2,a0
    c896:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    c898:	|  |      cmpi.b #116,d0
    c89c:	|  +----- bne.s c8ea <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    c89e:	|  |      movea.l 20(sp),a0
    c8a2:	|  |      addq.l #3,a0
    c8a4:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    c8a6:	|  |      cmpi.b #112,d0
    c8aa:	|  +----- bne.s c8ea <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    c8ac:	|  |      movea.l 20(sp),a0
    c8b0:	|  |      addq.l #4,a0
    c8b2:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    c8b4:	|  |      cmpi.b #58,d0
    c8b8:	|  |  /-- beq.s c8d6 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    c8ba:	|  |  |   movea.l 20(sp),a0
    c8be:	|  |  |   addq.l #4,a0
    c8c0:	|  |  |   move.b (a0),d0
    c8c2:	|  |  |   cmpi.b #115,d0
    c8c6:	|  +--|-- bne.s c8ea <builtIn_launch+0xb8>
    c8c8:	|  |  |   movea.l 20(sp),a0
    c8cc:	|  |  |   addq.l #5,a0
    c8ce:	|  |  |   move.b (a0),d0
    c8d0:	|  |  |   cmpi.b #58,d0
    c8d4:	|  +--|-- bne.s c8ea <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    c8d6:	|  |  \-> move.l 20(sp),-(sp)
    c8da:	|  |      jsr b8 <copyString>
    c8e0:	|  |      addq.l #4,sp
    c8e2:	|  |      move.l d0,19d1c <launchMe>
    c8e8:	|  |  /-- bra.s c93c <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    c8ea:	|  \--|-> move.l 19b6e <gamePath>,d0
    c8f0:	|     |   pea 16987 <graphics.c.1c13408a+0x2cb>
    c8f6:	|     |   move.l d0,-(sp)
    c8f8:	|     |   jsr 102e0 <joinStrings>
    c8fe:	|     |   addq.l #8,sp
    c900:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    c904:	|     |   move.l 16(sp),-(sp)
    c908:	|     |   move.l 16(sp),-(sp)
    c90c:	|     |   jsr 102e0 <joinStrings>
    c912:	|     |   addq.l #8,sp
    c914:	|     |   move.l d0,19d1c <launchMe>
        FreeVec(newText);
    c91a:	|     |   move.l 16(sp),8(sp)
    c920:	|     |   move.l 19c5a <SysBase>,d0
    c926:	|     |   movea.l d0,a6
    c928:	|     |   movea.l 8(sp),a1
    c92c:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    c930:	|     |   move.l 19d1c <launchMe>,d0
    c936:	|     +-- bne.s c93c <builtIn_launch+0x10a>
    c938:	|     |   moveq #1,d0
    c93a:	+-----|-- bra.s c984 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    c93c:	|     \-> move.l 20(sp),4(sp)
    c942:	|         move.l 19c5a <SysBase>,d0
    c948:	|         movea.l d0,a6
    c94a:	|         movea.l 4(sp),a1
    c94e:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    c952:	|         clr.l -(sp)
    c954:	|         jsr 1966 <setGraphicsWindow>
    c95a:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    c95c:	|         moveq #28,d0
    c95e:	|         add.l 32(sp),d0
    c962:	|         pea 1 <_start+0x1>
    c966:	|         pea 1 <_start+0x1>
    c96a:	|         move.l d0,-(sp)
    c96c:	|         jsr 116a6 <setVariable>
    c972:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    c976:	|         moveq #28,d0
    c978:	|         add.l 32(sp),d0
    c97c:	|         move.l d0,19d20 <launchResult>

    return BR_KEEP_AND_PAUSE;
    c982:	|         moveq #0,d0
}
    c984:	\-------> movea.l (sp)+,a6
    c986:	          lea 20(sp),sp
    c98a:	          rts

0000c98c <builtIn_pause>:

builtIn(pause)
{
    c98c:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c98e:	       movea.l 12(sp),a0
    c992:	       move.l 24(a0),d0
    c996:	       move.l d0,-(sp)
    c998:	       pea 1 <_start+0x1>
    c99c:	       move.l sp,d0
    c99e:	       addq.l #8,d0
    c9a0:	       move.l d0,-(sp)
    c9a2:	       jsr 10db4 <getValueType>
    c9a8:	       lea 12(sp),sp
    c9ac:	       tst.w d0
    c9ae:	   /-- bne.s c9b4 <builtIn_pause+0x28>
    c9b0:	   |   moveq #1,d0
    c9b2:	/--|-- bra.s c9e2 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    c9b4:	|  \-> moveq #24,d0
    c9b6:	|      add.l 12(sp),d0
    c9ba:	|      move.l d0,-(sp)
    c9bc:	|      jsr 11738 <trimStack>
    c9c2:	|      addq.l #4,sp
	if (theTime > 0) {
    c9c4:	|      move.l (sp),d0
    c9c6:	|  /-- ble.s c9e0 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    c9c8:	|  |   move.l (sp),d0
    c9ca:	|  |   subq.l #1,d0
    c9cc:	|  |   movea.l 12(sp),a0
    c9d0:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    c9d4:	|  |   movea.l 12(sp),a0
    c9d8:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    c9dc:	|  |   moveq #0,d0
    c9de:	+--|-- bra.s c9e2 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    c9e0:	|  \-> moveq #2,d0
}
    c9e2:	\----> addq.l #4,sp
    c9e4:	       rts

0000c9e6 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    c9e6:	jsr 2568 <completeTimers>
	return BR_CONTINUE;
    c9ec:	moveq #2,d0
}
    c9ee:	rts

0000c9f0 <builtIn_callEvent>:

builtIn(callEvent)
{
    c9f0:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c9f4:	       movea.l 20(sp),a0
    c9f8:	       move.l 24(a0),d0
    c9fc:	       move.l d0,-(sp)
    c9fe:	       pea 7 <_start+0x7>
    ca02:	       lea 8(sp),a0
    ca06:	       move.l a0,-(sp)
    ca08:	       jsr 10db4 <getValueType>
    ca0e:	       lea 12(sp),sp
    ca12:	       tst.w d0
    ca14:	   /-- bne.s ca1c <builtIn_callEvent+0x2c>
    ca16:	   |   moveq #1,d0
    ca18:	/--|-- bra.w cab2 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    ca1c:	|  \-> moveq #24,d0
    ca1e:	|      add.l 20(sp),d0
    ca22:	|      move.l d0,-(sp)
    ca24:	|      jsr 11738 <trimStack>
    ca2a:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ca2c:	|      movea.l 20(sp),a0
    ca30:	|      move.l 24(a0),d0
    ca34:	|      move.l d0,-(sp)
    ca36:	|      pea 7 <_start+0x7>
    ca3a:	|      moveq #12,d0
    ca3c:	|      add.l sp,d0
    ca3e:	|      move.l d0,-(sp)
    ca40:	|      jsr 10db4 <getValueType>
    ca46:	|      lea 12(sp),sp
    ca4a:	|      tst.w d0
    ca4c:	|  /-- bne.s ca52 <builtIn_callEvent+0x62>
    ca4e:	|  |   moveq #1,d0
    ca50:	+--|-- bra.s cab2 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    ca52:	|  \-> moveq #24,d0
    ca54:	|      add.l 20(sp),d0
    ca58:	|      move.l d0,-(sp)
    ca5a:	|      jsr 11738 <trimStack>
    ca60:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    ca62:	|      move.l (sp),d1
    ca64:	|      move.l 4(sp),d0
    ca68:	|      move.l d1,-(sp)
    ca6a:	|      move.l d0,-(sp)
    ca6c:	|      jsr 9c3a <getCombinationFunction>
    ca72:	|      addq.l #8,sp
    ca74:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    ca78:	|  /-- beq.s ca98 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    ca7a:	|  |   moveq #28,d0
    ca7c:	|  |   add.l 20(sp),d0
    ca80:	|  |   move.l 8(sp),-(sp)
    ca84:	|  |   pea 2 <_start+0x2>
    ca88:	|  |   move.l d0,-(sp)
    ca8a:	|  |   jsr 116a6 <setVariable>
    ca90:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    ca94:	|  |   moveq #4,d0
    ca96:	+--|-- bra.s cab2 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    ca98:	|  \-> moveq #28,d0
    ca9a:	|      add.l 20(sp),d0
    ca9e:	|      clr.l -(sp)
    caa0:	|      pea 1 <_start+0x1>
    caa4:	|      move.l d0,-(sp)
    caa6:	|      jsr 116a6 <setVariable>
    caac:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cab0:	|      moveq #2,d0
}
    cab2:	\----> lea 12(sp),sp
    cab6:	       rts

0000cab8 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    cab8:	move.w #1,19d2c <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    cac0:	moveq #2,d0
}
    cac2:	rts

0000cac4 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    cac4:	moveq #24,d0
    cac6:	add.l 8(sp),d0
    caca:	move.l d0,-(sp)
    cacc:	jsr 11738 <trimStack>
    cad2:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    cad4:	pea 16989 <graphics.c.1c13408a+0x2cd>
    cada:	jsr 12e08 <KPrintF>
    cae0:	addq.l #4,sp
	return BR_CONTINUE;
    cae2:	moveq #2,d0
}
    cae4:	rts

0000cae6 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    cae6:	pea 16989 <graphics.c.1c13408a+0x2cd>
    caec:	jsr 12e08 <KPrintF>
    caf2:	addq.l #4,sp
	return BR_CONTINUE;
    caf4:	moveq #2,d0
}
    caf6:	rts

0000caf8 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    caf8:	pea 16989 <graphics.c.1c13408a+0x2cd>
    cafe:	jsr 12e08 <KPrintF>
    cb04:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    cb06:	moveq #2,d0
}
    cb08:	rts

0000cb0a <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    cb0a:	pea 16989 <graphics.c.1c13408a+0x2cd>
    cb10:	jsr 12e08 <KPrintF>
    cb16:	addq.l #4,sp
	return BR_CONTINUE;
    cb18:	moveq #2,d0
}
    cb1a:	rts

0000cb1c <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    cb1c:	pea 16989 <graphics.c.1c13408a+0x2cd>
    cb22:	jsr 12e08 <KPrintF>
    cb28:	addq.l #4,sp
	return BR_CONTINUE;
    cb2a:	moveq #2,d0
}
    cb2c:	rts

0000cb2e <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    cb2e:	pea 16989 <graphics.c.1c13408a+0x2cd>
    cb34:	jsr 12e08 <KPrintF>
    cb3a:	addq.l #4,sp
	return BR_CONTINUE;
    cb3c:	moveq #2,d0
}
    cb3e:	rts

0000cb40 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    cb40:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cb44:	       movea.l 20(sp),a0
    cb48:	       move.l 24(a0),d0
    cb4c:	       move.l d0,-(sp)
    cb4e:	       pea 1 <_start+0x1>
    cb52:	       moveq #16,d0
    cb54:	       add.l sp,d0
    cb56:	       move.l d0,-(sp)
    cb58:	       jsr 10db4 <getValueType>
    cb5e:	       lea 12(sp),sp
    cb62:	       tst.w d0
    cb64:	   /-- bne.s cb6c <builtIn_startMusic+0x2c>
    cb66:	   |   moveq #1,d0
    cb68:	/--|-- bra.w cc0c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    cb6c:	|  \-> moveq #24,d0
    cb6e:	|      add.l 20(sp),d0
    cb72:	|      move.l d0,-(sp)
    cb74:	|      jsr 11738 <trimStack>
    cb7a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cb7c:	|      movea.l 20(sp),a0
    cb80:	|      move.l 24(a0),d0
    cb84:	|      move.l d0,-(sp)
    cb86:	|      pea 1 <_start+0x1>
    cb8a:	|      moveq #12,d0
    cb8c:	|      add.l sp,d0
    cb8e:	|      move.l d0,-(sp)
    cb90:	|      jsr 10db4 <getValueType>
    cb96:	|      lea 12(sp),sp
    cb9a:	|      tst.w d0
    cb9c:	|  /-- bne.s cba2 <builtIn_startMusic+0x62>
    cb9e:	|  |   moveq #1,d0
    cba0:	+--|-- bra.s cc0c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    cba2:	|  \-> moveq #24,d0
    cba4:	|      add.l 20(sp),d0
    cba8:	|      move.l d0,-(sp)
    cbaa:	|      jsr 11738 <trimStack>
    cbb0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    cbb2:	|      movea.l 20(sp),a0
    cbb6:	|      move.l 24(a0),d0
    cbba:	|      move.l d0,-(sp)
    cbbc:	|      pea 5 <_start+0x5>
    cbc0:	|      lea 8(sp),a0
    cbc4:	|      move.l a0,-(sp)
    cbc6:	|      jsr 10db4 <getValueType>
    cbcc:	|      lea 12(sp),sp
    cbd0:	|      tst.w d0
    cbd2:	|  /-- bne.s cbd8 <builtIn_startMusic+0x98>
    cbd4:	|  |   moveq #1,d0
    cbd6:	+--|-- bra.s cc0c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    cbd8:	|  \-> moveq #24,d0
    cbda:	|      add.l 20(sp),d0
    cbde:	|      move.l d0,-(sp)
    cbe0:	|      jsr 11738 <trimStack>
    cbe6:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    cbe8:	|      movea.l 8(sp),a0
    cbec:	|      move.l 4(sp),d1
    cbf0:	|      move.l (sp),d0
    cbf2:	|      move.l a0,-(sp)
    cbf4:	|      move.l d1,-(sp)
    cbf6:	|      move.l d0,-(sp)
    cbf8:	|      jsr 97ee <playMOD>
    cbfe:	|      lea 12(sp),sp
    cc02:	|      tst.w d0
    cc04:	|  /-- bne.s cc0a <builtIn_startMusic+0xca>
    cc06:	|  |   moveq #2,d0
    cc08:	+--|-- bra.s cc0c <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    cc0a:	|  \-> moveq #2,d0
}
    cc0c:	\----> lea 12(sp),sp
    cc10:	       rts

0000cc12 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    cc12:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc14:	       movea.l 12(sp),a0
    cc18:	       move.l 24(a0),d0
    cc1c:	       move.l d0,-(sp)
    cc1e:	       pea 1 <_start+0x1>
    cc22:	       move.l sp,d0
    cc24:	       addq.l #8,d0
    cc26:	       move.l d0,-(sp)
    cc28:	       jsr 10db4 <getValueType>
    cc2e:	       lea 12(sp),sp
    cc32:	       tst.w d0
    cc34:	   /-- bne.s cc3a <builtIn_stopMusic+0x28>
    cc36:	   |   moveq #1,d0
    cc38:	/--|-- bra.s cc58 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    cc3a:	|  \-> moveq #24,d0
    cc3c:	|      add.l 12(sp),d0
    cc40:	|      move.l d0,-(sp)
    cc42:	|      jsr 11738 <trimStack>
    cc48:	|      addq.l #4,sp
	stopMOD (v);
    cc4a:	|      move.l (sp),d0
    cc4c:	|      move.l d0,-(sp)
    cc4e:	|      jsr 988a <stopMOD>
    cc54:	|      addq.l #4,sp
	return BR_CONTINUE;
    cc56:	|      moveq #2,d0
}
    cc58:	\----> addq.l #4,sp
    cc5a:	       rts

0000cc5c <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    cc5c:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc5e:	       movea.l 16(sp),a0
    cc62:	       move.l 24(a0),d0
    cc66:	       move.l d0,-(sp)
    cc68:	       pea 1 <_start+0x1>
    cc6c:	       move.l sp,d0
    cc6e:	       addq.l #8,d0
    cc70:	       move.l d0,-(sp)
    cc72:	       jsr 10db4 <getValueType>
    cc78:	       lea 12(sp),sp
    cc7c:	       tst.w d0
    cc7e:	   /-- bne.s cc84 <builtIn_setMusicVolume+0x28>
    cc80:	   |   moveq #1,d0
    cc82:	/--|-- bra.s ccde <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    cc84:	|  \-> moveq #24,d0
    cc86:	|      add.l 16(sp),d0
    cc8a:	|      move.l d0,-(sp)
    cc8c:	|      jsr 11738 <trimStack>
    cc92:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc94:	|      movea.l 16(sp),a0
    cc98:	|      move.l 24(a0),d0
    cc9c:	|      move.l d0,-(sp)
    cc9e:	|      pea 1 <_start+0x1>
    cca2:	|      moveq #12,d0
    cca4:	|      add.l sp,d0
    cca6:	|      move.l d0,-(sp)
    cca8:	|      jsr 10db4 <getValueType>
    ccae:	|      lea 12(sp),sp
    ccb2:	|      tst.w d0
    ccb4:	|  /-- bne.s ccba <builtIn_setMusicVolume+0x5e>
    ccb6:	|  |   moveq #1,d0
    ccb8:	+--|-- bra.s ccde <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    ccba:	|  \-> moveq #24,d0
    ccbc:	|      add.l 16(sp),d0
    ccc0:	|      move.l d0,-(sp)
    ccc2:	|      jsr 11738 <trimStack>
    ccc8:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    ccca:	|      move.l (sp),d1
    cccc:	|      move.l 4(sp),d0
    ccd0:	|      move.l d1,-(sp)
    ccd2:	|      move.l d0,-(sp)
    ccd4:	|      jsr 9870 <setMusicVolume>
    ccda:	|      addq.l #8,sp
	return BR_CONTINUE;
    ccdc:	|      moveq #2,d0
}
    ccde:	\----> addq.l #8,sp
    cce0:	       rts

0000cce2 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    cce2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cce4:	       movea.l 12(sp),a0
    cce8:	       move.l 24(a0),d0
    ccec:	       move.l d0,-(sp)
    ccee:	       pea 1 <_start+0x1>
    ccf2:	       move.l sp,d0
    ccf4:	       addq.l #8,d0
    ccf6:	       move.l d0,-(sp)
    ccf8:	       jsr 10db4 <getValueType>
    ccfe:	       lea 12(sp),sp
    cd02:	       tst.w d0
    cd04:	   /-- bne.s cd0a <builtIn_setDefaultMusicVolume+0x28>
    cd06:	   |   moveq #1,d0
    cd08:	/--|-- bra.s cd28 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    cd0a:	|  \-> moveq #24,d0
    cd0c:	|      add.l 12(sp),d0
    cd10:	|      move.l d0,-(sp)
    cd12:	|      jsr 11738 <trimStack>
    cd18:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    cd1a:	|      move.l (sp),d0
    cd1c:	|      move.l d0,-(sp)
    cd1e:	|      jsr 9854 <setDefaultMusicVolume>
    cd24:	|      addq.l #4,sp
	return BR_CONTINUE;
    cd26:	|      moveq #2,d0
}
    cd28:	\----> addq.l #4,sp
    cd2a:	       rts

0000cd2c <builtIn_playSound>:

builtIn(playSound)
{
    cd2c:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    cd2e:	       movea.l 12(sp),a0
    cd32:	       move.l 24(a0),d0
    cd36:	       move.l d0,-(sp)
    cd38:	       pea 5 <_start+0x5>
    cd3c:	       move.l sp,d0
    cd3e:	       addq.l #8,d0
    cd40:	       move.l d0,-(sp)
    cd42:	       jsr 10db4 <getValueType>
    cd48:	       lea 12(sp),sp
    cd4c:	       tst.w d0
    cd4e:	   /-- bne.s cd54 <builtIn_playSound+0x28>
    cd50:	   |   moveq #1,d0
    cd52:	/--|-- bra.s cd7c <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    cd54:	|  \-> moveq #24,d0
    cd56:	|      add.l 12(sp),d0
    cd5a:	|      move.l d0,-(sp)
    cd5c:	|      jsr 11738 <trimStack>
    cd62:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    cd64:	|      move.l (sp),d0
    cd66:	|      clr.l -(sp)
    cd68:	|      move.l d0,-(sp)
    cd6a:	|      jsr 9878 <startSound>
    cd70:	|      addq.l #8,sp
    cd72:	|      tst.w d0
    cd74:	|  /-- bne.s cd7a <builtIn_playSound+0x4e>
    cd76:	|  |   moveq #2,d0
    cd78:	+--|-- bra.s cd7c <builtIn_playSound+0x50>
	return BR_CONTINUE;
    cd7a:	|  \-> moveq #2,d0
}
    cd7c:	\----> addq.l #4,sp
    cd7e:	       rts

0000cd80 <builtIn_loopSound>:

builtIn(loopSound)
{
    cd80:	             lea -28(sp),sp
    cd84:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    cd86:	             tst.l 36(sp)
    cd8a:	         /-- bgt.s cda0 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    cd8c:	         |   pea 169ac <graphics.c.1c13408a+0x2f0>
    cd92:	         |   jsr 12e08 <KPrintF>
    cd98:	         |   addq.l #4,sp
		return BR_ERROR;
    cd9a:	         |   moveq #1,d0
    cd9c:	/--------|-- bra.w cf5c <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    cda0:	|        \-> moveq #1,d0
    cda2:	|            cmp.l 36(sp),d0
    cda6:	|     /----- blt.s ce02 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    cda8:	|     |      movea.l 40(sp),a0
    cdac:	|     |      move.l 24(a0),d0
    cdb0:	|     |      move.l d0,-(sp)
    cdb2:	|     |      pea 5 <_start+0x5>
    cdb6:	|     |      lea 16(sp),a0
    cdba:	|     |      move.l a0,-(sp)
    cdbc:	|     |      jsr 10db4 <getValueType>
    cdc2:	|     |      lea 12(sp),sp
    cdc6:	|     |      tst.w d0
    cdc8:	|     |  /-- bne.s cdd0 <builtIn_loopSound+0x50>
    cdca:	|     |  |   moveq #1,d0
    cdcc:	+-----|--|-- bra.w cf5c <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    cdd0:	|     |  \-> moveq #24,d0
    cdd2:	|     |      add.l 40(sp),d0
    cdd6:	|     |      move.l d0,-(sp)
    cdd8:	|     |      jsr 11738 <trimStack>
    cdde:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    cde0:	|     |      move.l 8(sp),d0
    cde4:	|     |      pea 1 <_start+0x1>
    cde8:	|     |      move.l d0,-(sp)
    cdea:	|     |      jsr 9878 <startSound>
    cdf0:	|     |      addq.l #8,sp
    cdf2:	|     |      tst.w d0
    cdf4:	|     |  /-- bne.s cdfc <builtIn_loopSound+0x7c>
    cdf6:	|     |  |   moveq #2,d0
    cdf8:	+-----|--|-- bra.w cf5c <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    cdfc:	|     |  \-> moveq #2,d0
    cdfe:	+-----|----- bra.w cf5c <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    ce02:	|     \----> moveq #2,d1
    ce04:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    ce08:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    ce0c:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    ce10:	|            movea.l 40(sp),a0
    ce14:	|            movea.l 24(a0),a0
    ce18:	|            move.l (a0),d0
    ce1a:	|            moveq #5,d1
    ce1c:	|            cmp.l d0,d1
    ce1e:	|  /-------- beq.w cef6 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    ce22:	|  |         movea.l 40(sp),a0
    ce26:	|  |         move.l 24(a0),d0
    ce2a:	|  |         move.l d0,-(sp)
    ce2c:	|  |         pea 1 <_start+0x1>
    ce30:	|  |         lea 12(sp),a0
    ce34:	|  |         move.l a0,-(sp)
    ce36:	|  |         jsr 10db4 <getValueType>
    ce3c:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    ce40:	|  |         moveq #24,d0
    ce42:	|  |         add.l 40(sp),d0
    ce46:	|  |         move.l d0,-(sp)
    ce48:	|  |         jsr 11738 <trimStack>
    ce4e:	|  |         addq.l #4,sp
			numParams--;
    ce50:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    ce54:	|  +-------- bra.w cef6 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    ce58:	|  |  /----> movea.l 40(sp),a0
    ce5c:	|  |  |      move.l 24(a0),d0
    ce60:	|  |  |      move.l d0,-(sp)
    ce62:	|  |  |      pea 5 <_start+0x5>
    ce66:	|  |  |      lea 16(sp),a0
    ce6a:	|  |  |      move.l a0,-(sp)
    ce6c:	|  |  |      jsr 10db4 <getValueType>
    ce72:	|  |  |      lea 12(sp),sp
    ce76:	|  |  |      tst.w d0
    ce78:	|  |  |  /-- bne.s ce8e <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    ce7a:	|  |  |  |   pea 169ea <graphics.c.1c13408a+0x32e>
    ce80:	|  |  |  |   jsr 12e08 <KPrintF>
    ce86:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    ce88:	|  |  |  |   moveq #1,d0
    ce8a:	+--|--|--|-- bra.w cf5c <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    ce8e:	|  |  |  \-> moveq #20,d0
    ce90:	|  |  |      move.l d0,20(sp)
    ce94:	|  |  |      clr.l 16(sp)
    ce98:	|  |  |      move.l 19c5a <SysBase>,d0
    ce9e:	|  |  |      movea.l d0,a6
    cea0:	|  |  |      move.l 20(sp),d0
    cea4:	|  |  |      move.l 16(sp),d1
    cea8:	|  |  |      jsr -684(a6)
    ceac:	|  |  |      move.l d0,12(sp)
    ceb0:	|  |  |      move.l 12(sp),d0
    ceb4:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    ceb8:	|  |  |  /-- bne.s cec0 <builtIn_loopSound+0x140>
    ceba:	|  |  |  |   moveq #1,d0
    cebc:	+--|--|--|-- bra.w cf5c <builtIn_loopSound+0x1dc>

			s->next = old;
    cec0:	|  |  |  \-> movea.l 28(sp),a0
    cec4:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    ceca:	|  |  |      movea.l 28(sp),a0
    cece:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    ced2:	|  |  |      move.l 8(sp),d0
    ced6:	|  |  |      movea.l 28(sp),a0
    ceda:	|  |  |      move.l d0,(a0)
			old = s;
    cedc:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    cee2:	|  |  |      moveq #24,d0
    cee4:	|  |  |      add.l 40(sp),d0
    cee8:	|  |  |      move.l d0,-(sp)
    ceea:	|  |  |      jsr 11738 <trimStack>
    cef0:	|  |  |      addq.l #4,sp
			numParams--;
    cef2:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    cef6:	|  \--|----> tst.l 36(sp)
    cefa:	|     \----- bne.w ce58 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    cefe:	|        /-- bra.s cf0a <builtIn_loopSound+0x18a>
    cf00:	|     /--|-> movea.l 28(sp),a0
    cf04:	|     |  |   move.l 4(a0),28(sp)
    cf0a:	|     |  \-> movea.l 28(sp),a0
    cf0e:	|     |      move.l 4(a0),d0
    cf12:	|     \----- bne.s cf00 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    cf14:	|            move.l 4(sp),d0
    cf18:	|            moveq #1,d1
    cf1a:	|            cmp.l d0,d1
    cf1c:	|     /----- bge.s cf34 <builtIn_loopSound+0x1b4>
			s->next = old;
    cf1e:	|     |      movea.l 28(sp),a0
    cf22:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    cf28:	|     |      movea.l 24(sp),a0
    cf2c:	|     |      move.l 28(sp),8(a0)
    cf32:	|     |  /-- bra.s cf44 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    cf34:	|     \--|-> move.l 4(sp),d0
    cf38:	|        +-- beq.s cf44 <builtIn_loopSound+0x1c4>
			s->next = s;
    cf3a:	|        |   movea.l 28(sp),a0
    cf3e:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    cf44:	|        \-> movea.l 24(sp),a0
    cf48:	|            moveq #-1,d0
    cf4a:	|            move.l d0,16(a0)
		playSoundList(old);
    cf4e:	|            move.l 24(sp),-(sp)
    cf52:	|            jsr 97f2 <playSoundList>
    cf58:	|            addq.l #4,sp
		return BR_CONTINUE;
    cf5a:	|            moveq #2,d0
	}
}
    cf5c:	\----------> movea.l (sp)+,a6
    cf5e:	             lea 28(sp),sp
    cf62:	             rts

0000cf64 <builtIn_stopSound>:

builtIn(stopSound)
{
    cf64:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    cf66:	       movea.l 12(sp),a0
    cf6a:	       move.l 24(a0),d0
    cf6e:	       move.l d0,-(sp)
    cf70:	       pea 5 <_start+0x5>
    cf74:	       move.l sp,d0
    cf76:	       addq.l #8,d0
    cf78:	       move.l d0,-(sp)
    cf7a:	       jsr 10db4 <getValueType>
    cf80:	       lea 12(sp),sp
    cf84:	       tst.w d0
    cf86:	   /-- bne.s cf8c <builtIn_stopSound+0x28>
    cf88:	   |   moveq #1,d0
    cf8a:	/--|-- bra.s cfaa <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    cf8c:	|  \-> moveq #24,d0
    cf8e:	|      add.l 12(sp),d0
    cf92:	|      move.l d0,-(sp)
    cf94:	|      jsr 11738 <trimStack>
    cf9a:	|      addq.l #4,sp
	huntKillSound (v);
    cf9c:	|      move.l (sp),d0
    cf9e:	|      move.l d0,-(sp)
    cfa0:	|      jsr 97ea <huntKillSound>
    cfa6:	|      addq.l #4,sp
	return BR_CONTINUE;
    cfa8:	|      moveq #2,d0
}
    cfaa:	\----> addq.l #4,sp
    cfac:	       rts

0000cfae <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    cfae:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cfb0:	       movea.l 12(sp),a0
    cfb4:	       move.l 24(a0),d0
    cfb8:	       move.l d0,-(sp)
    cfba:	       pea 1 <_start+0x1>
    cfbe:	       move.l sp,d0
    cfc0:	       addq.l #8,d0
    cfc2:	       move.l d0,-(sp)
    cfc4:	       jsr 10db4 <getValueType>
    cfca:	       lea 12(sp),sp
    cfce:	       tst.w d0
    cfd0:	   /-- bne.s cfd6 <builtIn_setDefaultSoundVolume+0x28>
    cfd2:	   |   moveq #1,d0
    cfd4:	/--|-- bra.s cff4 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    cfd6:	|  \-> moveq #24,d0
    cfd8:	|      add.l 12(sp),d0
    cfdc:	|      move.l d0,-(sp)
    cfde:	|      jsr 11738 <trimStack>
    cfe4:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    cfe6:	|      move.l (sp),d0
    cfe8:	|      move.l d0,-(sp)
    cfea:	|      jsr 9860 <setDefaultSoundVolume>
    cff0:	|      addq.l #4,sp
	return BR_CONTINUE;
    cff2:	|      moveq #2,d0
}
    cff4:	\----> addq.l #4,sp
    cff6:	       rts

0000cff8 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    cff8:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cffa:	       movea.l 16(sp),a0
    cffe:	       move.l 24(a0),d0
    d002:	       move.l d0,-(sp)
    d004:	       pea 1 <_start+0x1>
    d008:	       move.l sp,d0
    d00a:	       addq.l #8,d0
    d00c:	       move.l d0,-(sp)
    d00e:	       jsr 10db4 <getValueType>
    d014:	       lea 12(sp),sp
    d018:	       tst.w d0
    d01a:	   /-- bne.s d020 <builtIn_setSoundVolume+0x28>
    d01c:	   |   moveq #1,d0
    d01e:	/--|-- bra.s d07a <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    d020:	|  \-> moveq #24,d0
    d022:	|      add.l 16(sp),d0
    d026:	|      move.l d0,-(sp)
    d028:	|      jsr 11738 <trimStack>
    d02e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d030:	|      movea.l 16(sp),a0
    d034:	|      move.l 24(a0),d0
    d038:	|      move.l d0,-(sp)
    d03a:	|      pea 5 <_start+0x5>
    d03e:	|      moveq #12,d0
    d040:	|      add.l sp,d0
    d042:	|      move.l d0,-(sp)
    d044:	|      jsr 10db4 <getValueType>
    d04a:	|      lea 12(sp),sp
    d04e:	|      tst.w d0
    d050:	|  /-- bne.s d056 <builtIn_setSoundVolume+0x5e>
    d052:	|  |   moveq #1,d0
    d054:	+--|-- bra.s d07a <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    d056:	|  \-> moveq #24,d0
    d058:	|      add.l 16(sp),d0
    d05c:	|      move.l d0,-(sp)
    d05e:	|      jsr 11738 <trimStack>
    d064:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    d066:	|      move.l (sp),d1
    d068:	|      move.l 4(sp),d0
    d06c:	|      move.l d1,-(sp)
    d06e:	|      move.l d0,-(sp)
    d070:	|      jsr 9874 <setSoundVolume>
    d076:	|      addq.l #8,sp
	return BR_CONTINUE;
    d078:	|      moveq #2,d0
}
    d07a:	\----> addq.l #8,sp
    d07c:	       rts

0000d07e <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    d07e:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d082:	       movea.l 20(sp),a0
    d086:	       move.l 24(a0),d0
    d08a:	       move.l d0,-(sp)
    d08c:	       pea 1 <_start+0x1>
    d090:	       moveq #12,d0
    d092:	       add.l sp,d0
    d094:	       move.l d0,-(sp)
    d096:	       jsr 10db4 <getValueType>
    d09c:	       lea 12(sp),sp
    d0a0:	       tst.w d0
    d0a2:	   /-- bne.s d0aa <builtIn_setSoundLoopPoints+0x2c>
    d0a4:	   |   moveq #1,d0
    d0a6:	/--|-- bra.w d142 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d0aa:	|  \-> moveq #24,d0
    d0ac:	|      add.l 20(sp),d0
    d0b0:	|      move.l d0,-(sp)
    d0b2:	|      jsr 11738 <trimStack>
    d0b8:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d0ba:	|      movea.l 20(sp),a0
    d0be:	|      move.l 24(a0),d0
    d0c2:	|      move.l d0,-(sp)
    d0c4:	|      pea 1 <_start+0x1>
    d0c8:	|      lea 8(sp),a0
    d0cc:	|      move.l a0,-(sp)
    d0ce:	|      jsr 10db4 <getValueType>
    d0d4:	|      lea 12(sp),sp
    d0d8:	|      tst.w d0
    d0da:	|  /-- bne.s d0e0 <builtIn_setSoundLoopPoints+0x62>
    d0dc:	|  |   moveq #1,d0
    d0de:	+--|-- bra.s d142 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d0e0:	|  \-> moveq #24,d0
    d0e2:	|      add.l 20(sp),d0
    d0e6:	|      move.l d0,-(sp)
    d0e8:	|      jsr 11738 <trimStack>
    d0ee:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    d0f0:	|      movea.l 20(sp),a0
    d0f4:	|      move.l 24(a0),d0
    d0f8:	|      move.l d0,-(sp)
    d0fa:	|      pea 5 <_start+0x5>
    d0fe:	|      moveq #16,d0
    d100:	|      add.l sp,d0
    d102:	|      move.l d0,-(sp)
    d104:	|      jsr 10db4 <getValueType>
    d10a:	|      lea 12(sp),sp
    d10e:	|      tst.w d0
    d110:	|  /-- bne.s d116 <builtIn_setSoundLoopPoints+0x98>
    d112:	|  |   moveq #1,d0
    d114:	+--|-- bra.s d142 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    d116:	|  \-> moveq #24,d0
    d118:	|      add.l 20(sp),d0
    d11c:	|      move.l d0,-(sp)
    d11e:	|      jsr 11738 <trimStack>
    d124:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    d126:	|      movea.l 4(sp),a0
    d12a:	|      move.l (sp),d1
    d12c:	|      move.l 8(sp),d0
    d130:	|      move.l a0,-(sp)
    d132:	|      move.l d1,-(sp)
    d134:	|      move.l d0,-(sp)
    d136:	|      jsr 986c <setSoundLoop>
    d13c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d140:	|      moveq #2,d0
}
    d142:	\----> lea 12(sp),sp
    d146:	       rts

0000d148 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    d148:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    d14a:	          movea.l 12(sp),a0
    d14e:	          movea.l 24(a0),a0
    d152:	          move.l (a0),d0
    d154:	          moveq #5,d1
    d156:	          cmp.l d0,d1
    d158:	/-------- bne.s d19c <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    d15a:	|         movea.l 12(sp),a0
    d15e:	|         move.l 24(a0),d0
    d162:	|         move.l d0,-(sp)
    d164:	|         pea 5 <_start+0x5>
    d168:	|         move.l sp,d0
    d16a:	|         addq.l #8,d0
    d16c:	|         move.l d0,-(sp)
    d16e:	|         jsr 10db4 <getValueType>
    d174:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    d178:	|         moveq #24,d0
    d17a:	|         add.l 12(sp),d0
    d17e:	|         move.l d0,-(sp)
    d180:	|         jsr 11738 <trimStack>
    d186:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    d188:	|         move.l (sp),d0
    d18a:	|         move.l d0,-(sp)
    d18c:	|         jsr 125a6 <setFloor>
    d192:	|         addq.l #4,sp
    d194:	|         tst.w d0
    d196:	|  /----- bne.s d1b2 <builtIn_setFloor+0x6a>
    d198:	|  |      moveq #1,d0
    d19a:	|  |  /-- bra.s d1b4 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    d19c:	\--|--|-> moveq #24,d0
    d19e:	   |  |   add.l 12(sp),d0
    d1a2:	   |  |   move.l d0,-(sp)
    d1a4:	   |  |   jsr 11738 <trimStack>
    d1aa:	   |  |   addq.l #4,sp
		setFloorNull ();
    d1ac:	   |  |   jsr 12d20 <setFloorNull>
	}
	return BR_CONTINUE;
    d1b2:	   \--|-> moveq #2,d0
}
    d1b4:	      \-> addq.l #4,sp
    d1b6:	          rts

0000d1b8 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    d1b8:	jsr 11e3e <drawFloor>
	return BR_CONTINUE;
    d1be:	moveq #2,d0
}
    d1c0:	rts

0000d1c2 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    d1c2:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    d1c4:	          movea.l 12(sp),a0
    d1c8:	          movea.l 24(a0),a0
    d1cc:	          move.l (a0),d0
    d1ce:	          moveq #5,d1
    d1d0:	          cmp.l d0,d1
    d1d2:	/-------- bne.s d216 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    d1d4:	|         movea.l 12(sp),a0
    d1d8:	|         move.l 24(a0),d0
    d1dc:	|         move.l d0,-(sp)
    d1de:	|         pea 5 <_start+0x5>
    d1e2:	|         move.l sp,d0
    d1e4:	|         addq.l #8,d0
    d1e6:	|         move.l d0,-(sp)
    d1e8:	|         jsr 10db4 <getValueType>
    d1ee:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    d1f2:	|         moveq #24,d0
    d1f4:	|         add.l 12(sp),d0
    d1f8:	|         move.l d0,-(sp)
    d1fa:	|         jsr 11738 <trimStack>
    d200:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    d202:	|         move.l (sp),d0
    d204:	|         move.l d0,-(sp)
    d206:	|         jsr 1f38 <setZBuffer>
    d20c:	|         addq.l #4,sp
    d20e:	|         tst.w d0
    d210:	|  /----- bne.s d22c <builtIn_setZBuffer+0x6a>
    d212:	|  |      moveq #1,d0
    d214:	|  |  /-- bra.s d22e <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    d216:	\--|--|-> moveq #24,d0
    d218:	   |  |   add.l 12(sp),d0
    d21c:	   |  |   move.l d0,-(sp)
    d21e:	   |  |   jsr 11738 <trimStack>
    d224:	   |  |   addq.l #4,sp
		killZBuffer ();
    d226:	   |  |   jsr 1ee2 <killZBuffer>
	}
	return BR_CONTINUE;
    d22c:	   \--|-> moveq #2,d0
}
    d22e:	      \-> addq.l #4,sp
    d230:	          rts

0000d232 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    d232:	pea 16a21 <graphics.c.1c13408a+0x365>
    d238:	jsr 12e08 <KPrintF>
    d23e:	addq.l #4,sp
	return BR_CONTINUE;
    d240:	moveq #2,d0
}
    d242:	rts

0000d244 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d244:	          movea.l 8(sp),a0
    d248:	          move.l 24(a0),d0
    d24c:	          move.l d0,-(sp)
    d24e:	          pea 1 <_start+0x1>
    d252:	          pea 19d28 <speechMode>
    d258:	          jsr 10db4 <getValueType>
    d25e:	          lea 12(sp),sp
    d262:	          tst.w d0
    d264:	      /-- bne.s d26a <builtIn_setSpeechMode+0x26>
    d266:	      |   moveq #1,d0
    d268:	/-----|-- bra.s d2a2 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    d26a:	|     \-> moveq #24,d0
    d26c:	|         add.l 8(sp),d0
    d270:	|         move.l d0,-(sp)
    d272:	|         jsr 11738 <trimStack>
    d278:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    d27a:	|         move.l 19d28 <speechMode>,d0
    d280:	|     /-- bmi.s d28e <builtIn_setSpeechMode+0x4a>
    d282:	|     |   move.l 19d28 <speechMode>,d0
    d288:	|     |   moveq #2,d1
    d28a:	|     |   cmp.l d0,d1
    d28c:	|  /--|-- bge.s d2a0 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    d28e:	|  |  \-> pea 16a3a <graphics.c.1c13408a+0x37e>
    d294:	|  |      jsr 12e08 <KPrintF>
    d29a:	|  |      addq.l #4,sp
		return BR_ERROR;
    d29c:	|  |      moveq #1,d0
    d29e:	+--|----- bra.s d2a2 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    d2a0:	|  \----> moveq #2,d0
}
    d2a2:	\-------> rts

0000d2a4 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    d2a4:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    d2a6:	       jsr 594a <isThereAnySpeechGoingOn>
    d2ac:	       move.l d0,(sp)
	if (i == -1) {
    d2ae:	       moveq #-1,d0
    d2b0:	       cmp.l (sp),d0
    d2b2:	/----- bne.s d2ce <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    d2b4:	|      moveq #28,d0
    d2b6:	|      add.l 12(sp),d0
    d2ba:	|      clr.l -(sp)
    d2bc:	|      pea 1 <_start+0x1>
    d2c0:	|      move.l d0,-(sp)
    d2c2:	|      jsr 116a6 <setVariable>
    d2c8:	|      lea 12(sp),sp
    d2cc:	|  /-- bra.s d2e6 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    d2ce:	\--|-> moveq #28,d0
    d2d0:	   |   add.l 12(sp),d0
    d2d4:	   |   move.l (sp),-(sp)
    d2d6:	   |   pea 7 <_start+0x7>
    d2da:	   |   move.l d0,-(sp)
    d2dc:	   |   jsr 116a6 <setVariable>
    d2e2:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    d2e6:	   \-> moveq #2,d0
}
    d2e8:	       addq.l #4,sp
    d2ea:	       rts

0000d2ec <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    d2ec:	jsr 3ca6 <killSpeechTimers>
	return BR_CONTINUE;
    d2f2:	moveq #2,d0
}
    d2f4:	rts

0000d2f6 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    d2f6:	       move.l 19d62 <overRegion>,d0
    d2fc:	/----- beq.s d326 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    d2fe:	|      movea.l 19d62 <overRegion>,a0
    d304:	|      movea.l 28(a0),a0
    d308:	|      move.l 4(a0),d1
    d30c:	|      moveq #28,d0
    d30e:	|      add.l 8(sp),d0
    d312:	|      move.l d1,-(sp)
    d314:	|      pea 7 <_start+0x7>
    d318:	|      move.l d0,-(sp)
    d31a:	|      jsr 116a6 <setVariable>
    d320:	|      lea 12(sp),sp
    d324:	|  /-- bra.s d33e <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    d326:	\--|-> moveq #28,d0
    d328:	   |   add.l 8(sp),d0
    d32c:	   |   clr.l -(sp)
    d32e:	   |   pea 1 <_start+0x1>
    d332:	   |   move.l d0,-(sp)
    d334:	   |   jsr 116a6 <setVariable>
    d33a:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    d33e:	   \-> moveq #2,d0
}
    d340:	       rts

0000d342 <builtIn_rename>:

builtIn(rename)
{
    d342:	       lea -16(sp),sp
    d346:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d348:	       movea.l 28(sp),a0
    d34c:	       move.l 24(a0),d0
    d350:	       move.l d0,-(sp)
    d352:	       jsr 1138a <getTextFromAnyVar>
    d358:	       addq.l #4,sp
    d35a:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    d35e:	   /-- bne.s d364 <builtIn_rename+0x22>
    d360:	   |   moveq #1,d0
    d362:	/--|-- bra.s d3de <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    d364:	|  \-> moveq #24,d0
    d366:	|      add.l 28(sp),d0
    d36a:	|      move.l d0,-(sp)
    d36c:	|      jsr 11738 <trimStack>
    d372:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    d374:	|      movea.l 28(sp),a0
    d378:	|      move.l 24(a0),d0
    d37c:	|      move.l d0,-(sp)
    d37e:	|      pea 7 <_start+0x7>
    d382:	|      lea 12(sp),a0
    d386:	|      move.l a0,-(sp)
    d388:	|      jsr 10db4 <getValueType>
    d38e:	|      lea 12(sp),sp
    d392:	|      tst.w d0
    d394:	|  /-- bne.s d39a <builtIn_rename+0x58>
    d396:	|  |   moveq #1,d0
    d398:	+--|-- bra.s d3de <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    d39a:	|  \-> moveq #24,d0
    d39c:	|      add.l 28(sp),d0
    d3a0:	|      move.l d0,-(sp)
    d3a2:	|      jsr 11738 <trimStack>
    d3a8:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    d3aa:	|      move.l 4(sp),d0
    d3ae:	|      move.l d0,-(sp)
    d3b0:	|      jsr 9c06 <findObjectType>
    d3b6:	|      addq.l #4,sp
    d3b8:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    d3bc:	|      movea.l 12(sp),a0
    d3c0:	|      move.l (a0),8(sp)
    d3c4:	|      move.l 19c5a <SysBase>,d0
    d3ca:	|      movea.l d0,a6
    d3cc:	|      movea.l 8(sp),a1
    d3d0:	|      jsr -690(a6)
	o->screenName = newText;
    d3d4:	|      movea.l 12(sp),a0
    d3d8:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    d3dc:	|      moveq #2,d0
}
    d3de:	\----> movea.l (sp)+,a6
    d3e0:	       lea 16(sp),sp
    d3e4:	       rts

0000d3e6 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    d3e6:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d3ea:	          movea.l 20(sp),a0
    d3ee:	          move.l 24(a0),d0
    d3f2:	          move.l d0,-(sp)
    d3f4:	          pea 7 <_start+0x7>
    d3f8:	          lea 8(sp),a0
    d3fc:	          move.l a0,-(sp)
    d3fe:	          jsr 10db4 <getValueType>
    d404:	          lea 12(sp),sp
    d408:	          tst.w d0
    d40a:	      /-- bne.s d412 <builtIn_getObjectX+0x2c>
    d40c:	      |   moveq #1,d0
    d40e:	/-----|-- bra.w d4ae <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    d412:	|     \-> moveq #24,d0
    d414:	|         add.l 20(sp),d0
    d418:	|         move.l d0,-(sp)
    d41a:	|         jsr 11738 <trimStack>
    d420:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    d422:	|         move.l (sp),d0
    d424:	|         move.l d0,-(sp)
    d426:	|         jsr 6f46 <findPerson>
    d42c:	|         addq.l #4,sp
    d42e:	|         move.l d0,8(sp)
	if (pers) {
    d432:	|     /-- beq.s d460 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    d434:	|     |   movea.l 8(sp),a0
    d438:	|     |   move.l (a0),d0
    d43a:	|     |   move.l d0,-(sp)
    d43c:	|     |   jsr 1333c <__fixsfsi>
    d442:	|     |   addq.l #4,sp
    d444:	|     |   move.l d0,d1
    d446:	|     |   moveq #28,d0
    d448:	|     |   add.l 20(sp),d0
    d44c:	|     |   move.l d1,-(sp)
    d44e:	|     |   pea 1 <_start+0x1>
    d452:	|     |   move.l d0,-(sp)
    d454:	|     |   jsr 116a6 <setVariable>
    d45a:	|     |   lea 12(sp),sp
    d45e:	|  /--|-- bra.s d4ac <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    d460:	|  |  \-> move.l (sp),d0
    d462:	|  |      move.l d0,-(sp)
    d464:	|  |      jsr 1187e <getRegionForObject>
    d46a:	|  |      addq.l #4,sp
    d46c:	|  |      move.l d0,4(sp)
		if (la) {
    d470:	|  |  /-- beq.s d494 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    d472:	|  |  |   movea.l 4(sp),a0
    d476:	|  |  |   move.l 16(a0),d1
    d47a:	|  |  |   moveq #28,d0
    d47c:	|  |  |   add.l 20(sp),d0
    d480:	|  |  |   move.l d1,-(sp)
    d482:	|  |  |   pea 1 <_start+0x1>
    d486:	|  |  |   move.l d0,-(sp)
    d488:	|  |  |   jsr 116a6 <setVariable>
    d48e:	|  |  |   lea 12(sp),sp
    d492:	|  +--|-- bra.s d4ac <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    d494:	|  |  \-> moveq #28,d0
    d496:	|  |      add.l 20(sp),d0
    d49a:	|  |      clr.l -(sp)
    d49c:	|  |      pea 1 <_start+0x1>
    d4a0:	|  |      move.l d0,-(sp)
    d4a2:	|  |      jsr 116a6 <setVariable>
    d4a8:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    d4ac:	|  \----> moveq #2,d0
}
    d4ae:	\-------> lea 12(sp),sp
    d4b2:	          rts

0000d4b4 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    d4b4:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d4b8:	          movea.l 20(sp),a0
    d4bc:	          move.l 24(a0),d0
    d4c0:	          move.l d0,-(sp)
    d4c2:	          pea 7 <_start+0x7>
    d4c6:	          lea 8(sp),a0
    d4ca:	          move.l a0,-(sp)
    d4cc:	          jsr 10db4 <getValueType>
    d4d2:	          lea 12(sp),sp
    d4d6:	          tst.w d0
    d4d8:	      /-- bne.s d4e0 <builtIn_getObjectY+0x2c>
    d4da:	      |   moveq #1,d0
    d4dc:	/-----|-- bra.w d57e <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    d4e0:	|     \-> moveq #24,d0
    d4e2:	|         add.l 20(sp),d0
    d4e6:	|         move.l d0,-(sp)
    d4e8:	|         jsr 11738 <trimStack>
    d4ee:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    d4f0:	|         move.l (sp),d0
    d4f2:	|         move.l d0,-(sp)
    d4f4:	|         jsr 6f46 <findPerson>
    d4fa:	|         addq.l #4,sp
    d4fc:	|         move.l d0,8(sp)
	if (pers) {
    d500:	|     /-- beq.s d530 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    d502:	|     |   movea.l 8(sp),a0
    d506:	|     |   move.l 4(a0),d0
    d50a:	|     |   move.l d0,-(sp)
    d50c:	|     |   jsr 1333c <__fixsfsi>
    d512:	|     |   addq.l #4,sp
    d514:	|     |   move.l d0,d1
    d516:	|     |   moveq #28,d0
    d518:	|     |   add.l 20(sp),d0
    d51c:	|     |   move.l d1,-(sp)
    d51e:	|     |   pea 1 <_start+0x1>
    d522:	|     |   move.l d0,-(sp)
    d524:	|     |   jsr 116a6 <setVariable>
    d52a:	|     |   lea 12(sp),sp
    d52e:	|  /--|-- bra.s d57c <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    d530:	|  |  \-> move.l (sp),d0
    d532:	|  |      move.l d0,-(sp)
    d534:	|  |      jsr 1187e <getRegionForObject>
    d53a:	|  |      addq.l #4,sp
    d53c:	|  |      move.l d0,4(sp)
		if (la) {
    d540:	|  |  /-- beq.s d564 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    d542:	|  |  |   movea.l 4(sp),a0
    d546:	|  |  |   move.l 20(a0),d1
    d54a:	|  |  |   moveq #28,d0
    d54c:	|  |  |   add.l 20(sp),d0
    d550:	|  |  |   move.l d1,-(sp)
    d552:	|  |  |   pea 1 <_start+0x1>
    d556:	|  |  |   move.l d0,-(sp)
    d558:	|  |  |   jsr 116a6 <setVariable>
    d55e:	|  |  |   lea 12(sp),sp
    d562:	|  +--|-- bra.s d57c <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    d564:	|  |  \-> moveq #28,d0
    d566:	|  |      add.l 20(sp),d0
    d56a:	|  |      clr.l -(sp)
    d56c:	|  |      pea 1 <_start+0x1>
    d570:	|  |      move.l d0,-(sp)
    d572:	|  |      jsr 116a6 <setVariable>
    d578:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    d57c:	|  \----> moveq #2,d0
}
    d57e:	\-------> lea 12(sp),sp
    d582:	          rts

0000d584 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    d584:	       lea -32(sp),sp
    d588:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d58c:	       movea.l 56(sp),a0
    d590:	       move.l 24(a0),d0
    d594:	       move.l d0,-(sp)
    d596:	       pea 1 <_start+0x1>
    d59a:	       lea 28(sp),a0
    d59e:	       move.l a0,-(sp)
    d5a0:	       jsr 10db4 <getValueType>
    d5a6:	       lea 12(sp),sp
    d5aa:	       tst.w d0
    d5ac:	   /-- bne.s d5b4 <builtIn_addScreenRegion+0x30>
    d5ae:	   |   moveq #1,d0
    d5b0:	/--|-- bra.w d78e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d5b4:	|  \-> moveq #24,d0
    d5b6:	|      add.l 56(sp),d0
    d5ba:	|      move.l d0,-(sp)
    d5bc:	|      jsr 11738 <trimStack>
    d5c2:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d5c4:	|      movea.l 56(sp),a0
    d5c8:	|      move.l 24(a0),d0
    d5cc:	|      move.l d0,-(sp)
    d5ce:	|      pea 1 <_start+0x1>
    d5d2:	|      moveq #48,d0
    d5d4:	|      add.l sp,d0
    d5d6:	|      move.l d0,-(sp)
    d5d8:	|      jsr 10db4 <getValueType>
    d5de:	|      lea 12(sp),sp
    d5e2:	|      tst.w d0
    d5e4:	|  /-- bne.s d5ec <builtIn_addScreenRegion+0x68>
    d5e6:	|  |   moveq #1,d0
    d5e8:	+--|-- bra.w d78e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d5ec:	|  \-> moveq #24,d0
    d5ee:	|      add.l 56(sp),d0
    d5f2:	|      move.l d0,-(sp)
    d5f4:	|      jsr 11738 <trimStack>
    d5fa:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d5fc:	|      movea.l 56(sp),a0
    d600:	|      move.l 24(a0),d0
    d604:	|      move.l d0,-(sp)
    d606:	|      pea 1 <_start+0x1>
    d60a:	|      moveq #52,d0
    d60c:	|      add.l sp,d0
    d60e:	|      move.l d0,-(sp)
    d610:	|      jsr 10db4 <getValueType>
    d616:	|      lea 12(sp),sp
    d61a:	|      tst.w d0
    d61c:	|  /-- bne.s d624 <builtIn_addScreenRegion+0xa0>
    d61e:	|  |   moveq #1,d0
    d620:	+--|-- bra.w d78e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d624:	|  \-> moveq #24,d0
    d626:	|      add.l 56(sp),d0
    d62a:	|      move.l d0,-(sp)
    d62c:	|      jsr 11738 <trimStack>
    d632:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d634:	|      movea.l 56(sp),a0
    d638:	|      move.l 24(a0),d0
    d63c:	|      move.l d0,-(sp)
    d63e:	|      pea 1 <_start+0x1>
    d642:	|      lea 32(sp),a0
    d646:	|      move.l a0,-(sp)
    d648:	|      jsr 10db4 <getValueType>
    d64e:	|      lea 12(sp),sp
    d652:	|      tst.w d0
    d654:	|  /-- bne.s d65c <builtIn_addScreenRegion+0xd8>
    d656:	|  |   moveq #1,d0
    d658:	+--|-- bra.w d78e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d65c:	|  \-> moveq #24,d0
    d65e:	|      add.l 56(sp),d0
    d662:	|      move.l d0,-(sp)
    d664:	|      jsr 11738 <trimStack>
    d66a:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d66c:	|      movea.l 56(sp),a0
    d670:	|      move.l 24(a0),d0
    d674:	|      move.l d0,-(sp)
    d676:	|      pea 1 <_start+0x1>
    d67a:	|      lea 36(sp),a0
    d67e:	|      move.l a0,-(sp)
    d680:	|      jsr 10db4 <getValueType>
    d686:	|      lea 12(sp),sp
    d68a:	|      tst.w d0
    d68c:	|  /-- bne.s d694 <builtIn_addScreenRegion+0x110>
    d68e:	|  |   moveq #1,d0
    d690:	+--|-- bra.w d78e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d694:	|  \-> moveq #24,d0
    d696:	|      add.l 56(sp),d0
    d69a:	|      move.l d0,-(sp)
    d69c:	|      jsr 11738 <trimStack>
    d6a2:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d6a4:	|      movea.l 56(sp),a0
    d6a8:	|      move.l 24(a0),d0
    d6ac:	|      move.l d0,-(sp)
    d6ae:	|      pea 1 <_start+0x1>
    d6b2:	|      lea 40(sp),a0
    d6b6:	|      move.l a0,-(sp)
    d6b8:	|      jsr 10db4 <getValueType>
    d6be:	|      lea 12(sp),sp
    d6c2:	|      tst.w d0
    d6c4:	|  /-- bne.s d6cc <builtIn_addScreenRegion+0x148>
    d6c6:	|  |   moveq #1,d0
    d6c8:	+--|-- bra.w d78e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d6cc:	|  \-> moveq #24,d0
    d6ce:	|      add.l 56(sp),d0
    d6d2:	|      move.l d0,-(sp)
    d6d4:	|      jsr 11738 <trimStack>
    d6da:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d6dc:	|      movea.l 56(sp),a0
    d6e0:	|      move.l 24(a0),d0
    d6e4:	|      move.l d0,-(sp)
    d6e6:	|      pea 1 <_start+0x1>
    d6ea:	|      lea 44(sp),a0
    d6ee:	|      move.l a0,-(sp)
    d6f0:	|      jsr 10db4 <getValueType>
    d6f6:	|      lea 12(sp),sp
    d6fa:	|      tst.w d0
    d6fc:	|  /-- bne.s d704 <builtIn_addScreenRegion+0x180>
    d6fe:	|  |   moveq #1,d0
    d700:	+--|-- bra.w d78e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d704:	|  \-> moveq #24,d0
    d706:	|      add.l 56(sp),d0
    d70a:	|      move.l d0,-(sp)
    d70c:	|      jsr 11738 <trimStack>
    d712:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d714:	|      movea.l 56(sp),a0
    d718:	|      move.l 24(a0),d0
    d71c:	|      move.l d0,-(sp)
    d71e:	|      pea 7 <_start+0x7>
    d722:	|      lea 24(sp),a0
    d726:	|      move.l a0,-(sp)
    d728:	|      jsr 10db4 <getValueType>
    d72e:	|      lea 12(sp),sp
    d732:	|      tst.w d0
    d734:	|  /-- bne.s d73a <builtIn_addScreenRegion+0x1b6>
    d736:	|  |   moveq #1,d0
    d738:	+--|-- bra.s d78e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d73a:	|  \-> moveq #24,d0
    d73c:	|      add.l 56(sp),d0
    d740:	|      move.l d0,-(sp)
    d742:	|      jsr 11738 <trimStack>
    d748:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    d74a:	|      move.l 16(sp),d5
    d74e:	|      move.l 20(sp),d4
    d752:	|      move.l 40(sp),d3
    d756:	|      move.l 44(sp),d2
    d75a:	|      movea.l 24(sp),a1
    d75e:	|      movea.l 28(sp),a0
    d762:	|      move.l 32(sp),d1
    d766:	|      move.l 36(sp),d0
    d76a:	|      move.l d5,-(sp)
    d76c:	|      move.l d4,-(sp)
    d76e:	|      move.l d3,-(sp)
    d770:	|      move.l d2,-(sp)
    d772:	|      move.l a1,-(sp)
    d774:	|      move.l a0,-(sp)
    d776:	|      move.l d1,-(sp)
    d778:	|      move.l d0,-(sp)
    d77a:	|      jsr 117be <addScreenRegion>
    d780:	|      lea 32(sp),sp
    d784:	|      tst.w d0
    d786:	|  /-- beq.s d78c <builtIn_addScreenRegion+0x208>
    d788:	|  |   moveq #2,d0
    d78a:	+--|-- bra.s d78e <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    d78c:	|  \-> moveq #1,d0

}
    d78e:	\----> movem.l (sp)+,d2-d5
    d792:	       lea 32(sp),sp
    d796:	       rts

0000d798 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    d798:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d79a:	       movea.l 12(sp),a0
    d79e:	       move.l 24(a0),d0
    d7a2:	       move.l d0,-(sp)
    d7a4:	       pea 7 <_start+0x7>
    d7a8:	       move.l sp,d0
    d7aa:	       addq.l #8,d0
    d7ac:	       move.l d0,-(sp)
    d7ae:	       jsr 10db4 <getValueType>
    d7b4:	       lea 12(sp),sp
    d7b8:	       tst.w d0
    d7ba:	   /-- bne.s d7c0 <builtIn_removeScreenRegion+0x28>
    d7bc:	   |   moveq #1,d0
    d7be:	/--|-- bra.s d7de <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    d7c0:	|  \-> moveq #24,d0
    d7c2:	|      add.l 12(sp),d0
    d7c6:	|      move.l d0,-(sp)
    d7c8:	|      jsr 11738 <trimStack>
    d7ce:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    d7d0:	|      move.l (sp),d0
    d7d2:	|      move.l d0,-(sp)
    d7d4:	|      jsr 11a26 <removeScreenRegion>
    d7da:	|      addq.l #4,sp
	return BR_CONTINUE;
    d7dc:	|      moveq #2,d0
}
    d7de:	\----> addq.l #4,sp
    d7e0:	       rts

0000d7e2 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    d7e2:	jsr 11baa <showBoxes>
	return BR_CONTINUE;
    d7e8:	moveq #2,d0
}
    d7ea:	rts

0000d7ec <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    d7ec:	jsr 118ac <killAllRegions>
	return BR_CONTINUE;
    d7f2:	moveq #2,d0
}
    d7f4:	rts

0000d7f6 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    d7f6:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    d7fa:	       movea.l 24(sp),a0
    d7fe:	       move.l 24(a0),d0
    d802:	       move.l d0,-(sp)
    d804:	       jsr 10a60 <getCostumeFromVar>
    d80a:	       addq.l #4,sp
    d80c:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    d810:	   /-- bne.s d818 <builtIn_addCharacter+0x22>
    d812:	   |   moveq #1,d0
    d814:	/--|-- bra.w d8f4 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    d818:	|  \-> moveq #24,d0
    d81a:	|      add.l 24(sp),d0
    d81e:	|      move.l d0,-(sp)
    d820:	|      jsr 11738 <trimStack>
    d826:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d828:	|      movea.l 24(sp),a0
    d82c:	|      move.l 24(a0),d0
    d830:	|      move.l d0,-(sp)
    d832:	|      pea 1 <_start+0x1>
    d836:	|      lea 12(sp),a0
    d83a:	|      move.l a0,-(sp)
    d83c:	|      jsr 10db4 <getValueType>
    d842:	|      lea 12(sp),sp
    d846:	|      tst.w d0
    d848:	|  /-- bne.s d850 <builtIn_addCharacter+0x5a>
    d84a:	|  |   moveq #1,d0
    d84c:	+--|-- bra.w d8f4 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d850:	|  \-> moveq #24,d0
    d852:	|      add.l 24(sp),d0
    d856:	|      move.l d0,-(sp)
    d858:	|      jsr 11738 <trimStack>
    d85e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d860:	|      movea.l 24(sp),a0
    d864:	|      move.l 24(a0),d0
    d868:	|      move.l d0,-(sp)
    d86a:	|      pea 1 <_start+0x1>
    d86e:	|      moveq #16,d0
    d870:	|      add.l sp,d0
    d872:	|      move.l d0,-(sp)
    d874:	|      jsr 10db4 <getValueType>
    d87a:	|      lea 12(sp),sp
    d87e:	|      tst.w d0
    d880:	|  /-- bne.s d886 <builtIn_addCharacter+0x90>
    d882:	|  |   moveq #1,d0
    d884:	+--|-- bra.s d8f4 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d886:	|  \-> moveq #24,d0
    d888:	|      add.l 24(sp),d0
    d88c:	|      move.l d0,-(sp)
    d88e:	|      jsr 11738 <trimStack>
    d894:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d896:	|      movea.l 24(sp),a0
    d89a:	|      move.l 24(a0),d0
    d89e:	|      move.l d0,-(sp)
    d8a0:	|      pea 7 <_start+0x7>
    d8a4:	|      lea 8(sp),a0
    d8a8:	|      move.l a0,-(sp)
    d8aa:	|      jsr 10db4 <getValueType>
    d8b0:	|      lea 12(sp),sp
    d8b4:	|      tst.w d0
    d8b6:	|  /-- bne.s d8bc <builtIn_addCharacter+0xc6>
    d8b8:	|  |   moveq #1,d0
    d8ba:	+--|-- bra.s d8f4 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d8bc:	|  \-> moveq #24,d0
    d8be:	|      add.l 24(sp),d0
    d8c2:	|      move.l d0,-(sp)
    d8c4:	|      jsr 11738 <trimStack>
    d8ca:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    d8cc:	|      movea.l (sp),a0
    d8ce:	|      move.l 4(sp),d1
    d8d2:	|      move.l 8(sp),d0
    d8d6:	|      move.l 12(sp),-(sp)
    d8da:	|      move.l a0,-(sp)
    d8dc:	|      move.l d1,-(sp)
    d8de:	|      move.l d0,-(sp)
    d8e0:	|      jsr 616c <addPerson>
    d8e6:	|      lea 16(sp),sp
    d8ea:	|      tst.w d0
    d8ec:	|  /-- beq.s d8f2 <builtIn_addCharacter+0xfc>
    d8ee:	|  |   moveq #2,d0
    d8f0:	+--|-- bra.s d8f4 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    d8f2:	|  \-> moveq #1,d0
}
    d8f4:	\----> lea 16(sp),sp
    d8f8:	       rts

0000d8fa <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    d8fa:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d8fc:	       movea.l 12(sp),a0
    d900:	       move.l 24(a0),d0
    d904:	       move.l d0,-(sp)
    d906:	       pea 7 <_start+0x7>
    d90a:	       move.l sp,d0
    d90c:	       addq.l #8,d0
    d90e:	       move.l d0,-(sp)
    d910:	       jsr 10db4 <getValueType>
    d916:	       lea 12(sp),sp
    d91a:	       tst.w d0
    d91c:	   /-- bne.s d922 <builtIn_hideCharacter+0x28>
    d91e:	   |   moveq #1,d0
    d920:	/--|-- bra.s d942 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    d922:	|  \-> moveq #24,d0
    d924:	|      add.l 12(sp),d0
    d928:	|      move.l d0,-(sp)
    d92a:	|      jsr 11738 <trimStack>
    d930:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    d932:	|      move.l (sp),d0
    d934:	|      move.l d0,-(sp)
    d936:	|      clr.l -(sp)
    d938:	|      jsr 8446 <setShown>
    d93e:	|      addq.l #8,sp
	return BR_CONTINUE;
    d940:	|      moveq #2,d0
}
    d942:	\----> addq.l #4,sp
    d944:	       rts

0000d946 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    d946:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d948:	       movea.l 12(sp),a0
    d94c:	       move.l 24(a0),d0
    d950:	       move.l d0,-(sp)
    d952:	       pea 7 <_start+0x7>
    d956:	       move.l sp,d0
    d958:	       addq.l #8,d0
    d95a:	       move.l d0,-(sp)
    d95c:	       jsr 10db4 <getValueType>
    d962:	       lea 12(sp),sp
    d966:	       tst.w d0
    d968:	   /-- bne.s d96e <builtIn_showCharacter+0x28>
    d96a:	   |   moveq #1,d0
    d96c:	/--|-- bra.s d990 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    d96e:	|  \-> moveq #24,d0
    d970:	|      add.l 12(sp),d0
    d974:	|      move.l d0,-(sp)
    d976:	|      jsr 11738 <trimStack>
    d97c:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    d97e:	|      move.l (sp),d0
    d980:	|      move.l d0,-(sp)
    d982:	|      pea 1 <_start+0x1>
    d986:	|      jsr 8446 <setShown>
    d98c:	|      addq.l #8,sp
	return BR_CONTINUE;
    d98e:	|      moveq #2,d0
}
    d990:	\----> addq.l #4,sp
    d992:	       rts

0000d994 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    d994:	jsr 3ca6 <killSpeechTimers>
	killMostPeople ();
    d99a:	jsr 73b2 <killMostPeople>
	return BR_CONTINUE;
    d9a0:	moveq #2,d0
}
    d9a2:	rts

0000d9a4 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    d9a4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d9a6:	       movea.l 16(sp),a0
    d9aa:	       move.l 24(a0),d0
    d9ae:	       move.l d0,-(sp)
    d9b0:	       pea 1 <_start+0x1>
    d9b4:	       move.l sp,d0
    d9b6:	       addq.l #8,d0
    d9b8:	       move.l d0,-(sp)
    d9ba:	       jsr 10db4 <getValueType>
    d9c0:	       lea 12(sp),sp
    d9c4:	       tst.w d0
    d9c6:	   /-- bne.s d9cc <builtIn_setCharacterDrawMode+0x28>
    d9c8:	   |   moveq #1,d0
    d9ca:	/--|-- bra.s da26 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    d9cc:	|  \-> moveq #24,d0
    d9ce:	|      add.l 16(sp),d0
    d9d2:	|      move.l d0,-(sp)
    d9d4:	|      jsr 11738 <trimStack>
    d9da:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d9dc:	|      movea.l 16(sp),a0
    d9e0:	|      move.l 24(a0),d0
    d9e4:	|      move.l d0,-(sp)
    d9e6:	|      pea 7 <_start+0x7>
    d9ea:	|      moveq #12,d0
    d9ec:	|      add.l sp,d0
    d9ee:	|      move.l d0,-(sp)
    d9f0:	|      jsr 10db4 <getValueType>
    d9f6:	|      lea 12(sp),sp
    d9fa:	|      tst.w d0
    d9fc:	|  /-- bne.s da02 <builtIn_setCharacterDrawMode+0x5e>
    d9fe:	|  |   moveq #1,d0
    da00:	+--|-- bra.s da26 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    da02:	|  \-> moveq #24,d0
    da04:	|      add.l 16(sp),d0
    da08:	|      move.l d0,-(sp)
    da0a:	|      jsr 11738 <trimStack>
    da10:	|      addq.l #4,sp
	setDrawMode (di, obj);
    da12:	|      move.l 4(sp),d1
    da16:	|      move.l (sp),d0
    da18:	|      move.l d1,-(sp)
    da1a:	|      move.l d0,-(sp)
    da1c:	|      jsr 7e74 <setDrawMode>
    da22:	|      addq.l #8,sp
	return BR_CONTINUE;
    da24:	|      moveq #2,d0
}
    da26:	\----> addq.l #8,sp
    da28:	       rts

0000da2a <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    da2a:	pea 16a78 <graphics.c.1c13408a+0x3bc>
    da30:	jsr 12e08 <KPrintF>
    da36:	addq.l #4,sp
	return BR_CONTINUE;
    da38:	moveq #2,d0
}
    da3a:	rts

0000da3c <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    da3c:	pea 16aab <graphics.c.1c13408a+0x3ef>
    da42:	jsr 12e08 <KPrintF>
    da48:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    da4a:	moveq #2,d0
}
    da4c:	rts

0000da4e <builtIn_setScale>:

builtIn(setScale)
{
    da4e:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    da50:	       movea.l 16(sp),a0
    da54:	       move.l 24(a0),d0
    da58:	       move.l d0,-(sp)
    da5a:	       pea 1 <_start+0x1>
    da5e:	       move.l sp,d0
    da60:	       addq.l #8,d0
    da62:	       move.l d0,-(sp)
    da64:	       jsr 10db4 <getValueType>
    da6a:	       lea 12(sp),sp
    da6e:	       tst.w d0
    da70:	   /-- bne.s da76 <builtIn_setScale+0x28>
    da72:	   |   moveq #1,d0
    da74:	/--|-- bra.s dad8 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    da76:	|  \-> moveq #24,d0
    da78:	|      add.l 16(sp),d0
    da7c:	|      move.l d0,-(sp)
    da7e:	|      jsr 11738 <trimStack>
    da84:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    da86:	|      movea.l 16(sp),a0
    da8a:	|      move.l 24(a0),d0
    da8e:	|      move.l d0,-(sp)
    da90:	|      pea 1 <_start+0x1>
    da94:	|      moveq #12,d0
    da96:	|      add.l sp,d0
    da98:	|      move.l d0,-(sp)
    da9a:	|      jsr 10db4 <getValueType>
    daa0:	|      lea 12(sp),sp
    daa4:	|      tst.w d0
    daa6:	|  /-- bne.s daac <builtIn_setScale+0x5e>
    daa8:	|  |   moveq #1,d0
    daaa:	+--|-- bra.s dad8 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    daac:	|  \-> moveq #24,d0
    daae:	|      add.l 16(sp),d0
    dab2:	|      move.l d0,-(sp)
    dab4:	|      jsr 11738 <trimStack>
    daba:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    dabc:	|      move.l (sp),d0
    dabe:	|      move.l d0,d0
    dac0:	|      movea.w d0,a1
    dac2:	|      move.l 4(sp),d0
    dac6:	|      move.l d0,d0
    dac8:	|      movea.w d0,a0
    daca:	|      move.l a1,-(sp)
    dacc:	|      move.l a0,-(sp)
    dace:	|      jsr 841e <setScale>
    dad4:	|      addq.l #8,sp
	return BR_CONTINUE;
    dad6:	|      moveq #2,d0
}
    dad8:	\----> addq.l #8,sp
    dada:	       rts

0000dadc <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    dadc:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dade:	       movea.l 12(sp),a0
    dae2:	       move.l 24(a0),d0
    dae6:	       move.l d0,-(sp)
    dae8:	       pea 7 <_start+0x7>
    daec:	       move.l sp,d0
    daee:	       addq.l #8,d0
    daf0:	       move.l d0,-(sp)
    daf2:	       jsr 10db4 <getValueType>
    daf8:	       lea 12(sp),sp
    dafc:	       tst.w d0
    dafe:	   /-- bne.s db04 <builtIn_stopCharacter+0x28>
    db00:	   |   moveq #1,d0
    db02:	/--|-- bra.s db3c <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    db04:	|  \-> moveq #24,d0
    db06:	|      add.l 12(sp),d0
    db0a:	|      move.l d0,-(sp)
    db0c:	|      jsr 11738 <trimStack>
    db12:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    db14:	|      move.l (sp),d0
    db16:	|      move.l d0,-(sp)
    db18:	|      jsr 8552 <stopPerson>
    db1e:	|      addq.l #4,sp
    db20:	|      movea.w d0,a0
    db22:	|      moveq #28,d0
    db24:	|      add.l 12(sp),d0
    db28:	|      move.l a0,-(sp)
    db2a:	|      pea 1 <_start+0x1>
    db2e:	|      move.l d0,-(sp)
    db30:	|      jsr 116a6 <setVariable>
    db36:	|      lea 12(sp),sp
	return BR_CONTINUE;
    db3a:	|      moveq #2,d0
}
    db3c:	\----> addq.l #4,sp
    db3e:	       rts

0000db40 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    db40:	pea 16ae5 <newfatal.c.307beca7+0x29>
    db46:	jsr 12e08 <KPrintF>
    db4c:	addq.l #4,sp
	return BR_CONTINUE;
    db4e:	moveq #2,d0
}
    db50:	rts

0000db52 <builtIn_animate>:

builtIn(animate)
{
    db52:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    db54:	       movea.l 16(sp),a0
    db58:	       move.l 24(a0),d0
    db5c:	       move.l d0,-(sp)
    db5e:	       jsr 1128c <getAnimationFromVar>
    db64:	       addq.l #4,sp
    db66:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    db6a:	   /-- bne.s db70 <builtIn_animate+0x1e>
    db6c:	   |   moveq #1,d0
    db6e:	/--|-- bra.s dbee <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    db70:	|  \-> moveq #24,d0
    db72:	|      add.l 16(sp),d0
    db76:	|      move.l d0,-(sp)
    db78:	|      jsr 11738 <trimStack>
    db7e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    db80:	|      movea.l 16(sp),a0
    db84:	|      move.l 24(a0),d0
    db88:	|      move.l d0,-(sp)
    db8a:	|      pea 7 <_start+0x7>
    db8e:	|      move.l sp,d0
    db90:	|      addq.l #8,d0
    db92:	|      move.l d0,-(sp)
    db94:	|      jsr 10db4 <getValueType>
    db9a:	|      lea 12(sp),sp
    db9e:	|      tst.w d0
    dba0:	|  /-- bne.s dba6 <builtIn_animate+0x54>
    dba2:	|  |   moveq #1,d0
    dba4:	+--|-- bra.s dbee <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    dba6:	|  \-> moveq #24,d0
    dba8:	|      add.l 16(sp),d0
    dbac:	|      move.l d0,-(sp)
    dbae:	|      jsr 11738 <trimStack>
    dbb4:	|      addq.l #4,sp
	animatePerson (obj, pp);
    dbb6:	|      move.l (sp),d0
    dbb8:	|      move.l 4(sp),-(sp)
    dbbc:	|      move.l d0,-(sp)
    dbbe:	|      jsr 63de <animatePerson>
    dbc4:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    dbc6:	|      move.l 4(sp),-(sp)
    dbca:	|      jsr 85a6 <timeForAnim>
    dbd0:	|      addq.l #4,sp
    dbd2:	|      move.l d0,d1
    dbd4:	|      moveq #28,d0
    dbd6:	|      add.l 16(sp),d0
    dbda:	|      move.l d1,-(sp)
    dbdc:	|      pea 1 <_start+0x1>
    dbe0:	|      move.l d0,-(sp)
    dbe2:	|      jsr 116a6 <setVariable>
    dbe8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dbec:	|      moveq #2,d0
}
    dbee:	\----> addq.l #8,sp
    dbf0:	       rts

0000dbf2 <builtIn_setCostume>:

builtIn(setCostume)
{
    dbf2:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    dbf4:	       movea.l 16(sp),a0
    dbf8:	       move.l 24(a0),d0
    dbfc:	       move.l d0,-(sp)
    dbfe:	       jsr 10a60 <getCostumeFromVar>
    dc04:	       addq.l #4,sp
    dc06:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    dc0a:	   /-- bne.s dc10 <builtIn_setCostume+0x1e>
    dc0c:	   |   moveq #1,d0
    dc0e:	/--|-- bra.s dc68 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    dc10:	|  \-> moveq #24,d0
    dc12:	|      add.l 16(sp),d0
    dc16:	|      move.l d0,-(sp)
    dc18:	|      jsr 11738 <trimStack>
    dc1e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dc20:	|      movea.l 16(sp),a0
    dc24:	|      move.l 24(a0),d0
    dc28:	|      move.l d0,-(sp)
    dc2a:	|      pea 7 <_start+0x7>
    dc2e:	|      move.l sp,d0
    dc30:	|      addq.l #8,d0
    dc32:	|      move.l d0,-(sp)
    dc34:	|      jsr 10db4 <getValueType>
    dc3a:	|      lea 12(sp),sp
    dc3e:	|      tst.w d0
    dc40:	|  /-- bne.s dc46 <builtIn_setCostume+0x54>
    dc42:	|  |   moveq #1,d0
    dc44:	+--|-- bra.s dc68 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    dc46:	|  \-> moveq #24,d0
    dc48:	|      add.l 16(sp),d0
    dc4c:	|      move.l d0,-(sp)
    dc4e:	|      jsr 11738 <trimStack>
    dc54:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    dc56:	|      move.l (sp),d0
    dc58:	|      move.l 4(sp),-(sp)
    dc5c:	|      move.l d0,-(sp)
    dc5e:	|      jsr 6428 <animatePersonUsingPersona>
    dc64:	|      addq.l #8,sp
	return BR_CONTINUE;
    dc66:	|      moveq #2,d0
}
    dc68:	\----> addq.l #8,sp
    dc6a:	       rts

0000dc6c <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    dc6c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc6e:	       movea.l 16(sp),a0
    dc72:	       move.l 24(a0),d0
    dc76:	       move.l d0,-(sp)
    dc78:	       pea 1 <_start+0x1>
    dc7c:	       move.l sp,d0
    dc7e:	       addq.l #8,d0
    dc80:	       move.l d0,-(sp)
    dc82:	       jsr 10db4 <getValueType>
    dc88:	       lea 12(sp),sp
    dc8c:	       tst.w d0
    dc8e:	   /-- bne.s dc94 <builtIn_floatCharacter+0x28>
    dc90:	   |   moveq #1,d0
    dc92:	/--|-- bra.s dd08 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    dc94:	|  \-> moveq #24,d0
    dc96:	|      add.l 16(sp),d0
    dc9a:	|      move.l d0,-(sp)
    dc9c:	|      jsr 11738 <trimStack>
    dca2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dca4:	|      movea.l 16(sp),a0
    dca8:	|      move.l 24(a0),d0
    dcac:	|      move.l d0,-(sp)
    dcae:	|      pea 7 <_start+0x7>
    dcb2:	|      moveq #12,d0
    dcb4:	|      add.l sp,d0
    dcb6:	|      move.l d0,-(sp)
    dcb8:	|      jsr 10db4 <getValueType>
    dcbe:	|      lea 12(sp),sp
    dcc2:	|      tst.w d0
    dcc4:	|  /-- bne.s dcca <builtIn_floatCharacter+0x5e>
    dcc6:	|  |   moveq #1,d0
    dcc8:	+--|-- bra.s dd08 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    dcca:	|  \-> moveq #24,d0
    dccc:	|      add.l 16(sp),d0
    dcd0:	|      move.l d0,-(sp)
    dcd2:	|      jsr 11738 <trimStack>
    dcd8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    dcda:	|      move.l 4(sp),d1
    dcde:	|      move.l (sp),d0
    dce0:	|      move.l d1,-(sp)
    dce2:	|      move.l d0,-(sp)
    dce4:	|      jsr 6f74 <floatCharacter>
    dcea:	|      addq.l #8,sp
    dcec:	|      movea.w d0,a0
    dcee:	|      moveq #28,d0
    dcf0:	|      add.l 16(sp),d0
    dcf4:	|      move.l a0,-(sp)
    dcf6:	|      pea 1 <_start+0x1>
    dcfa:	|      move.l d0,-(sp)
    dcfc:	|      jsr 116a6 <setVariable>
    dd02:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dd06:	|      moveq #2,d0
}
    dd08:	\----> addq.l #8,sp
    dd0a:	       rts

0000dd0c <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    dd0c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd0e:	       movea.l 16(sp),a0
    dd12:	       move.l 24(a0),d0
    dd16:	       move.l d0,-(sp)
    dd18:	       pea 1 <_start+0x1>
    dd1c:	       move.l sp,d0
    dd1e:	       addq.l #8,d0
    dd20:	       move.l d0,-(sp)
    dd22:	       jsr 10db4 <getValueType>
    dd28:	       lea 12(sp),sp
    dd2c:	       tst.w d0
    dd2e:	   /-- bne.s dd34 <builtIn_setCharacterWalkSpeed+0x28>
    dd30:	   |   moveq #1,d0
    dd32:	/--|-- bra.s dda8 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    dd34:	|  \-> moveq #24,d0
    dd36:	|      add.l 16(sp),d0
    dd3a:	|      move.l d0,-(sp)
    dd3c:	|      jsr 11738 <trimStack>
    dd42:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dd44:	|      movea.l 16(sp),a0
    dd48:	|      move.l 24(a0),d0
    dd4c:	|      move.l d0,-(sp)
    dd4e:	|      pea 7 <_start+0x7>
    dd52:	|      moveq #12,d0
    dd54:	|      add.l sp,d0
    dd56:	|      move.l d0,-(sp)
    dd58:	|      jsr 10db4 <getValueType>
    dd5e:	|      lea 12(sp),sp
    dd62:	|      tst.w d0
    dd64:	|  /-- bne.s dd6a <builtIn_setCharacterWalkSpeed+0x5e>
    dd66:	|  |   moveq #1,d0
    dd68:	+--|-- bra.s dda8 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    dd6a:	|  \-> moveq #24,d0
    dd6c:	|      add.l 16(sp),d0
    dd70:	|      move.l d0,-(sp)
    dd72:	|      jsr 11738 <trimStack>
    dd78:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    dd7a:	|      move.l 4(sp),d1
    dd7e:	|      move.l (sp),d0
    dd80:	|      move.l d1,-(sp)
    dd82:	|      move.l d0,-(sp)
    dd84:	|      jsr 83ba <setCharacterWalkSpeed>
    dd8a:	|      addq.l #8,sp
    dd8c:	|      movea.w d0,a0
    dd8e:	|      moveq #28,d0
    dd90:	|      add.l 16(sp),d0
    dd94:	|      move.l a0,-(sp)
    dd96:	|      pea 1 <_start+0x1>
    dd9a:	|      move.l d0,-(sp)
    dd9c:	|      jsr 116a6 <setVariable>
    dda2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dda6:	|      moveq #2,d0
}
    dda8:	\----> addq.l #8,sp
    ddaa:	       rts

0000ddac <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    ddac:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ddae:	       movea.l 16(sp),a0
    ddb2:	       move.l 24(a0),d0
    ddb6:	       move.l d0,-(sp)
    ddb8:	       pea 1 <_start+0x1>
    ddbc:	       move.l sp,d0
    ddbe:	       addq.l #8,d0
    ddc0:	       move.l d0,-(sp)
    ddc2:	       jsr 10db4 <getValueType>
    ddc8:	       lea 12(sp),sp
    ddcc:	       tst.w d0
    ddce:	   /-- bne.s ddd4 <builtIn_turnCharacter+0x28>
    ddd0:	   |   moveq #1,d0
    ddd2:	/--|-- bra.s de48 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    ddd4:	|  \-> moveq #24,d0
    ddd6:	|      add.l 16(sp),d0
    ddda:	|      move.l d0,-(sp)
    dddc:	|      jsr 11738 <trimStack>
    dde2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dde4:	|      movea.l 16(sp),a0
    dde8:	|      move.l 24(a0),d0
    ddec:	|      move.l d0,-(sp)
    ddee:	|      pea 7 <_start+0x7>
    ddf2:	|      moveq #12,d0
    ddf4:	|      add.l sp,d0
    ddf6:	|      move.l d0,-(sp)
    ddf8:	|      jsr 10db4 <getValueType>
    ddfe:	|      lea 12(sp),sp
    de02:	|      tst.w d0
    de04:	|  /-- bne.s de0a <builtIn_turnCharacter+0x5e>
    de06:	|  |   moveq #1,d0
    de08:	+--|-- bra.s de48 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    de0a:	|  \-> moveq #24,d0
    de0c:	|      add.l 16(sp),d0
    de10:	|      move.l d0,-(sp)
    de12:	|      jsr 11738 <trimStack>
    de18:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    de1a:	|      move.l (sp),d1
    de1c:	|      move.l 4(sp),d0
    de20:	|      move.l d1,-(sp)
    de22:	|      move.l d0,-(sp)
    de24:	|      jsr 865e <turnPersonToFace>
    de2a:	|      addq.l #8,sp
    de2c:	|      movea.w d0,a0
    de2e:	|      moveq #28,d0
    de30:	|      add.l 16(sp),d0
    de34:	|      move.l a0,-(sp)
    de36:	|      pea 1 <_start+0x1>
    de3a:	|      move.l d0,-(sp)
    de3c:	|      jsr 116a6 <setVariable>
    de42:	|      lea 12(sp),sp
	return BR_CONTINUE;
    de46:	|      moveq #2,d0
}
    de48:	\----> addq.l #8,sp
    de4a:	       rts

0000de4c <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    de4c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    de4e:	       movea.l 16(sp),a0
    de52:	       move.l 24(a0),d0
    de56:	       move.l d0,-(sp)
    de58:	       pea 1 <_start+0x1>
    de5c:	       move.l sp,d0
    de5e:	       addq.l #8,d0
    de60:	       move.l d0,-(sp)
    de62:	       jsr 10db4 <getValueType>
    de68:	       lea 12(sp),sp
    de6c:	       tst.w d0
    de6e:	   /-- bne.s de74 <builtIn_setCharacterExtra+0x28>
    de70:	   |   moveq #1,d0
    de72:	/--|-- bra.s dee8 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    de74:	|  \-> moveq #24,d0
    de76:	|      add.l 16(sp),d0
    de7a:	|      move.l d0,-(sp)
    de7c:	|      jsr 11738 <trimStack>
    de82:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    de84:	|      movea.l 16(sp),a0
    de88:	|      move.l 24(a0),d0
    de8c:	|      move.l d0,-(sp)
    de8e:	|      pea 7 <_start+0x7>
    de92:	|      moveq #12,d0
    de94:	|      add.l sp,d0
    de96:	|      move.l d0,-(sp)
    de98:	|      jsr 10db4 <getValueType>
    de9e:	|      lea 12(sp),sp
    dea2:	|      tst.w d0
    dea4:	|  /-- bne.s deaa <builtIn_setCharacterExtra+0x5e>
    dea6:	|  |   moveq #1,d0
    dea8:	+--|-- bra.s dee8 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    deaa:	|  \-> moveq #24,d0
    deac:	|      add.l 16(sp),d0
    deb0:	|      move.l d0,-(sp)
    deb2:	|      jsr 11738 <trimStack>
    deb8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    deba:	|      move.l (sp),d1
    debc:	|      move.l 4(sp),d0
    dec0:	|      move.l d1,-(sp)
    dec2:	|      move.l d0,-(sp)
    dec4:	|      jsr 83e8 <setPersonExtra>
    deca:	|      addq.l #8,sp
    decc:	|      movea.w d0,a0
    dece:	|      moveq #28,d0
    ded0:	|      add.l 16(sp),d0
    ded4:	|      move.l a0,-(sp)
    ded6:	|      pea 1 <_start+0x1>
    deda:	|      move.l d0,-(sp)
    dedc:	|      jsr 116a6 <setVariable>
    dee2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dee6:	|      moveq #2,d0
}
    dee8:	\----> addq.l #8,sp
    deea:	       rts

0000deec <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    deec:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    deee:	       movea.l 12(sp),a0
    def2:	       move.l 24(a0),d0
    def6:	       move.l d0,-(sp)
    def8:	       pea 7 <_start+0x7>
    defc:	       move.l sp,d0
    defe:	       addq.l #8,d0
    df00:	       move.l d0,-(sp)
    df02:	       jsr 10db4 <getValueType>
    df08:	       lea 12(sp),sp
    df0c:	       tst.w d0
    df0e:	   /-- bne.s df14 <builtIn_removeCharacter+0x28>
    df10:	   |   moveq #1,d0
    df12:	/--|-- bra.s df32 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    df14:	|  \-> moveq #24,d0
    df16:	|      add.l 12(sp),d0
    df1a:	|      move.l d0,-(sp)
    df1c:	|      jsr 11738 <trimStack>
    df22:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    df24:	|      move.l (sp),d0
    df26:	|      move.l d0,-(sp)
    df28:	|      jsr 770c <removeOneCharacter>
    df2e:	|      addq.l #4,sp
	return BR_CONTINUE;
    df30:	|      moveq #2,d0
}
    df32:	\----> addq.l #4,sp
    df34:	       rts

0000df36 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    df36:	                lea -28(sp),sp
    df3a:	                move.l d2,-(sp)
    df3c:	                move.l 44(sp),d1
    df40:	                move.l 48(sp),d0
    df44:	                move.w d1,d1
    df46:	                move.w d1,6(sp)
    df4a:	                move.w d0,d0
    df4c:	                move.w d0,4(sp)
	switch (numParams) {
    df50:	                moveq #2,d0
    df52:	                cmp.l 36(sp),d0
    df56:	      /-------- beq.w e098 <moveChr+0x162>
    df5a:	      |         moveq #3,d0
    df5c:	      |         cmp.l 36(sp),d0
    df60:	/-----|-------- bne.w e1cc <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df64:	|     |         movea.l 40(sp),a0
    df68:	|     |         move.l 24(a0),d0
    df6c:	|     |         move.l d0,-(sp)
    df6e:	|     |         pea 1 <_start+0x1>
    df72:	|     |         lea 20(sp),a0
    df76:	|     |         move.l a0,-(sp)
    df78:	|     |         jsr 10db4 <getValueType>
    df7e:	|     |         lea 12(sp),sp
    df82:	|     |         tst.w d0
    df84:	|     |     /-- bne.s df8c <moveChr+0x56>
    df86:	|     |     |   moveq #1,d0
    df88:	|  /--|-----|-- bra.w e1dc <moveChr+0x2a6>
			trimStack (&fun -> stack);
    df8c:	|  |  |     \-> moveq #24,d0
    df8e:	|  |  |         add.l 40(sp),d0
    df92:	|  |  |         move.l d0,-(sp)
    df94:	|  |  |         jsr 11738 <trimStack>
    df9a:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df9c:	|  |  |         movea.l 40(sp),a0
    dfa0:	|  |  |         move.l 24(a0),d0
    dfa4:	|  |  |         move.l d0,-(sp)
    dfa6:	|  |  |         pea 1 <_start+0x1>
    dfaa:	|  |  |         lea 24(sp),a0
    dfae:	|  |  |         move.l a0,-(sp)
    dfb0:	|  |  |         jsr 10db4 <getValueType>
    dfb6:	|  |  |         lea 12(sp),sp
    dfba:	|  |  |         tst.w d0
    dfbc:	|  |  |     /-- bne.s dfc4 <moveChr+0x8e>
    dfbe:	|  |  |     |   moveq #1,d0
    dfc0:	|  +--|-----|-- bra.w e1dc <moveChr+0x2a6>
			trimStack (&fun -> stack);
    dfc4:	|  |  |     \-> moveq #24,d0
    dfc6:	|  |  |         add.l 40(sp),d0
    dfca:	|  |  |         move.l d0,-(sp)
    dfcc:	|  |  |         jsr 11738 <trimStack>
    dfd2:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dfd4:	|  |  |         movea.l 40(sp),a0
    dfd8:	|  |  |         move.l 24(a0),d0
    dfdc:	|  |  |         move.l d0,-(sp)
    dfde:	|  |  |         pea 7 <_start+0x7>
    dfe2:	|  |  |         lea 16(sp),a0
    dfe6:	|  |  |         move.l a0,-(sp)
    dfe8:	|  |  |         jsr 10db4 <getValueType>
    dfee:	|  |  |         lea 12(sp),sp
    dff2:	|  |  |         tst.w d0
    dff4:	|  |  |     /-- bne.s dffc <moveChr+0xc6>
    dff6:	|  |  |     |   moveq #1,d0
    dff8:	|  +--|-----|-- bra.w e1dc <moveChr+0x2a6>
			trimStack (&fun -> stack);
    dffc:	|  |  |     \-> moveq #24,d0
    dffe:	|  |  |         add.l 40(sp),d0
    e002:	|  |  |         move.l d0,-(sp)
    e004:	|  |  |         jsr 11738 <trimStack>
    e00a:	|  |  |         addq.l #4,sp

			if (force) {
    e00c:	|  |  |         tst.w 6(sp)
    e010:	|  |  |     /-- beq.s e040 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    e012:	|  |  |     |   movea.l 8(sp),a0
    e016:	|  |  |     |   move.l 12(sp),d1
    e01a:	|  |  |     |   move.l 16(sp),d0
    e01e:	|  |  |     |   pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbec2c>
    e022:	|  |  |     |   move.l 44(sp),-(sp)
    e026:	|  |  |     |   move.l a0,-(sp)
    e028:	|  |  |     |   move.l d1,-(sp)
    e02a:	|  |  |     |   move.l d0,-(sp)
    e02c:	|  |  |     |   jsr 6f98 <forceWalkingPerson>
    e032:	|  |  |     |   lea 20(sp),sp
    e036:	|  |  |     |   tst.w d0
    e038:	|  |  |  /--|-- beq.s e092 <moveChr+0x15c>
    e03a:	|  |  |  |  |   moveq #3,d0
    e03c:	|  +--|--|--|-- bra.w e1dc <moveChr+0x2a6>
			} else if (immediate) {
    e040:	|  |  |  |  \-> tst.w 4(sp)
    e044:	|  |  |  |  /-- beq.s e064 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    e046:	|  |  |  |  |   movea.l 8(sp),a0
    e04a:	|  |  |  |  |   move.l 12(sp),d1
    e04e:	|  |  |  |  |   move.l 16(sp),d0
    e052:	|  |  |  |  |   move.l a0,-(sp)
    e054:	|  |  |  |  |   move.l d1,-(sp)
    e056:	|  |  |  |  |   move.l d0,-(sp)
    e058:	|  |  |  |  |   jsr 72a0 <jumpPerson>
    e05e:	|  |  |  |  |   lea 12(sp),sp
    e062:	|  |  |  +--|-- bra.s e092 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    e064:	|  |  |  |  \-> movea.l 8(sp),a0
    e068:	|  |  |  |      move.l 12(sp),d1
    e06c:	|  |  |  |      move.l 16(sp),d0
    e070:	|  |  |  |      pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbec2c>
    e074:	|  |  |  |      move.l 44(sp),-(sp)
    e078:	|  |  |  |      move.l a0,-(sp)
    e07a:	|  |  |  |      move.l d1,-(sp)
    e07c:	|  |  |  |      move.l d0,-(sp)
    e07e:	|  |  |  |      jsr 7470 <makeWalkingPerson>
    e084:	|  |  |  |      lea 20(sp),sp
    e088:	|  |  |  |      tst.w d0
    e08a:	|  |  |  +----- beq.s e092 <moveChr+0x15c>
    e08c:	|  |  |  |      moveq #3,d0
    e08e:	|  +--|--|----- bra.w e1dc <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    e092:	|  |  |  \----> moveq #2,d0
    e094:	|  +--|-------- bra.w e1dc <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e098:	|  |  \-------> movea.l 40(sp),a0
    e09c:	|  |            move.l 24(a0),d0
    e0a0:	|  |            move.l d0,-(sp)
    e0a2:	|  |            pea 7 <_start+0x7>
    e0a6:	|  |            moveq #32,d0
    e0a8:	|  |            add.l sp,d0
    e0aa:	|  |            move.l d0,-(sp)
    e0ac:	|  |            jsr 10db4 <getValueType>
    e0b2:	|  |            lea 12(sp),sp
    e0b6:	|  |            tst.w d0
    e0b8:	|  |        /-- bne.s e0c0 <moveChr+0x18a>
    e0ba:	|  |        |   moveq #1,d0
    e0bc:	|  +--------|-- bra.w e1dc <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e0c0:	|  |        \-> moveq #24,d0
    e0c2:	|  |            add.l 40(sp),d0
    e0c6:	|  |            move.l d0,-(sp)
    e0c8:	|  |            jsr 11738 <trimStack>
    e0ce:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e0d0:	|  |            movea.l 40(sp),a0
    e0d4:	|  |            move.l 24(a0),d0
    e0d8:	|  |            move.l d0,-(sp)
    e0da:	|  |            pea 7 <_start+0x7>
    e0de:	|  |            lea 28(sp),a0
    e0e2:	|  |            move.l a0,-(sp)
    e0e4:	|  |            jsr 10db4 <getValueType>
    e0ea:	|  |            lea 12(sp),sp
    e0ee:	|  |            tst.w d0
    e0f0:	|  |        /-- bne.s e0f8 <moveChr+0x1c2>
    e0f2:	|  |        |   moveq #1,d0
    e0f4:	|  +--------|-- bra.w e1dc <moveChr+0x2a6>
			trimStack (&fun -> stack);
    e0f8:	|  |        \-> moveq #24,d0
    e0fa:	|  |            add.l 40(sp),d0
    e0fe:	|  |            move.l d0,-(sp)
    e100:	|  |            jsr 11738 <trimStack>
    e106:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    e108:	|  |            move.l 24(sp),d0
    e10c:	|  |            move.l d0,-(sp)
    e10e:	|  |            jsr 1187e <getRegionForObject>
    e114:	|  |            addq.l #4,sp
    e116:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    e11a:	|  |        /-- bne.s e122 <moveChr+0x1ec>
    e11c:	|  |        |   moveq #2,d0
    e11e:	|  +--------|-- bra.w e1dc <moveChr+0x2a6>

			if (force)
    e122:	|  |        \-> tst.w 6(sp)
    e126:	|  |        /-- beq.s e162 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    e128:	|  |        |   movea.l 28(sp),a0
    e12c:	|  |        |   move.l 24(a0),d2
    e130:	|  |        |   movea.l 20(sp),a1
    e134:	|  |        |   movea.l 28(sp),a0
    e138:	|  |        |   move.l 20(a0),d1
    e13c:	|  |        |   movea.l 28(sp),a0
    e140:	|  |        |   move.l 16(a0),d0
    e144:	|  |        |   move.l d2,-(sp)
    e146:	|  |        |   move.l 44(sp),-(sp)
    e14a:	|  |        |   move.l a1,-(sp)
    e14c:	|  |        |   move.l d1,-(sp)
    e14e:	|  |        |   move.l d0,-(sp)
    e150:	|  |        |   jsr 6f98 <forceWalkingPerson>
    e156:	|  |        |   lea 20(sp),sp
    e15a:	|  |        |   tst.w d0
    e15c:	|  |     /--|-- beq.s e1c8 <moveChr+0x292>
    e15e:	|  |     |  |   moveq #3,d0
    e160:	|  +-----|--|-- bra.s e1dc <moveChr+0x2a6>
			}
			else if (immediate)
    e162:	|  |     |  \-> tst.w 4(sp)
    e166:	|  |     |  /-- beq.s e18e <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    e168:	|  |     |  |   movea.l 20(sp),a1
    e16c:	|  |     |  |   movea.l 28(sp),a0
    e170:	|  |     |  |   move.l 20(a0),d1
    e174:	|  |     |  |   movea.l 28(sp),a0
    e178:	|  |     |  |   move.l 16(a0),d0
    e17c:	|  |     |  |   move.l a1,-(sp)
    e17e:	|  |     |  |   move.l d1,-(sp)
    e180:	|  |     |  |   move.l d0,-(sp)
    e182:	|  |     |  |   jsr 72a0 <jumpPerson>
    e188:	|  |     |  |   lea 12(sp),sp
    e18c:	|  |     +--|-- bra.s e1c8 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    e18e:	|  |     |  \-> movea.l 28(sp),a0
    e192:	|  |     |      move.l 24(a0),d2
    e196:	|  |     |      movea.l 20(sp),a1
    e19a:	|  |     |      movea.l 28(sp),a0
    e19e:	|  |     |      move.l 20(a0),d1
    e1a2:	|  |     |      movea.l 28(sp),a0
    e1a6:	|  |     |      move.l 16(a0),d0
    e1aa:	|  |     |      move.l d2,-(sp)
    e1ac:	|  |     |      move.l 44(sp),-(sp)
    e1b0:	|  |     |      move.l a1,-(sp)
    e1b2:	|  |     |      move.l d1,-(sp)
    e1b4:	|  |     |      move.l d0,-(sp)
    e1b6:	|  |     |      jsr 7470 <makeWalkingPerson>
    e1bc:	|  |     |      lea 20(sp),sp
    e1c0:	|  |     |      tst.w d0
    e1c2:	|  |     +----- beq.s e1c8 <moveChr+0x292>
    e1c4:	|  |     |      moveq #3,d0
    e1c6:	|  +-----|----- bra.s e1dc <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    e1c8:	|  |     \----> moveq #2,d0
    e1ca:	|  +----------- bra.s e1dc <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    e1cc:	\--|----------> pea 16b03 <newfatal.c.307beca7+0x47>
    e1d2:	   |            jsr 12e08 <KPrintF>
    e1d8:	   |            addq.l #4,sp
			return BR_ERROR;
    e1da:	   |            moveq #1,d0
	}
}
    e1dc:	   \----------> move.l (sp)+,d2
    e1de:	                lea 28(sp),sp
    e1e2:	                rts

0000e1e4 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    e1e4:	clr.l -(sp)
    e1e6:	clr.l -(sp)
    e1e8:	move.l 16(sp),-(sp)
    e1ec:	move.l 16(sp),-(sp)
    e1f0:	jsr df36 <moveChr>
    e1f6:	lea 16(sp),sp
}
    e1fa:	rts

0000e1fc <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    e1fc:	clr.l -(sp)
    e1fe:	pea 1 <_start+0x1>
    e202:	move.l 16(sp),-(sp)
    e206:	move.l 16(sp),-(sp)
    e20a:	jsr df36 <moveChr>
    e210:	lea 16(sp),sp
}
    e214:	rts

0000e216 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    e216:	pea 1 <_start+0x1>
    e21a:	clr.l -(sp)
    e21c:	move.l 16(sp),-(sp)
    e220:	move.l 16(sp),-(sp)
    e224:	jsr df36 <moveChr>
    e22a:	lea 16(sp),sp
}
    e22e:	rts

0000e230 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    e230:	jsr 531e <clearStatusBar>
	return BR_CONTINUE;
    e236:	moveq #2,d0
}
    e238:	rts

0000e23a <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    e23a:	jsr 53c6 <killLastStatus>
	return BR_CONTINUE;
    e240:	moveq #2,d0
}
    e242:	rts

0000e244 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    e244:	jsr 52b4 <addStatusBar>
	return BR_CONTINUE;
    e24a:	moveq #2,d0
}
    e24c:	rts

0000e24e <builtIn_statusText>:

builtIn(statusText)
{
    e24e:	       subq.l #8,sp
    e250:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    e252:	       movea.l 20(sp),a0
    e256:	       move.l 24(a0),d0
    e25a:	       move.l d0,-(sp)
    e25c:	       jsr 1138a <getTextFromAnyVar>
    e262:	       addq.l #4,sp
    e264:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    e268:	   /-- bne.s e26e <builtIn_statusText+0x20>
    e26a:	   |   moveq #1,d0
    e26c:	/--|-- bra.s e2a2 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    e26e:	|  \-> moveq #24,d0
    e270:	|      add.l 20(sp),d0
    e274:	|      move.l d0,-(sp)
    e276:	|      jsr 11738 <trimStack>
    e27c:	|      addq.l #4,sp
	setStatusBar(newText);
    e27e:	|      move.l 8(sp),-(sp)
    e282:	|      jsr 5646 <setStatusBar>
    e288:	|      addq.l #4,sp
	FreeVec(newText);
    e28a:	|      move.l 8(sp),4(sp)
    e290:	|      move.l 19c5a <SysBase>,d0
    e296:	|      movea.l d0,a6
    e298:	|      movea.l 4(sp),a1
    e29c:	|      jsr -690(a6)
	return BR_CONTINUE;
    e2a0:	|      moveq #2,d0
}
    e2a2:	\----> movea.l (sp)+,a6
    e2a4:	       addq.l #8,sp
    e2a6:	       rts

0000e2a8 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    e2a8:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e2aa:	       movea.l 12(sp),a0
    e2ae:	       move.l 24(a0),d0
    e2b2:	       move.l d0,-(sp)
    e2b4:	       pea 1 <_start+0x1>
    e2b8:	       move.l sp,d0
    e2ba:	       addq.l #8,d0
    e2bc:	       move.l d0,-(sp)
    e2be:	       jsr 10db4 <getValueType>
    e2c4:	       lea 12(sp),sp
    e2c8:	       tst.w d0
    e2ca:	   /-- bne.s e2d0 <builtIn_lightStatus+0x28>
    e2cc:	   |   moveq #1,d0
    e2ce:	/--|-- bra.s e2ee <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    e2d0:	|  \-> moveq #24,d0
    e2d2:	|      add.l 12(sp),d0
    e2d6:	|      move.l d0,-(sp)
    e2d8:	|      jsr 11738 <trimStack>
    e2de:	|      addq.l #4,sp
	setLitStatus (val);
    e2e0:	|      move.l (sp),d0
    e2e2:	|      move.l d0,-(sp)
    e2e4:	|      jsr 5636 <setLitStatus>
    e2ea:	|      addq.l #4,sp
	return BR_CONTINUE;
    e2ec:	|      moveq #2,d0
}
    e2ee:	\----> addq.l #4,sp
    e2f0:	       rts

0000e2f2 <builtIn_positionStatus>:

builtIn(positionStatus)
{
    e2f2:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e2f4:	       movea.l 16(sp),a0
    e2f8:	       move.l 24(a0),d0
    e2fc:	       move.l d0,-(sp)
    e2fe:	       pea 1 <_start+0x1>
    e302:	       move.l sp,d0
    e304:	       addq.l #8,d0
    e306:	       move.l d0,-(sp)
    e308:	       jsr 10db4 <getValueType>
    e30e:	       lea 12(sp),sp
    e312:	       tst.w d0
    e314:	   /-- bne.s e31a <builtIn_positionStatus+0x28>
    e316:	   |   moveq #1,d0
    e318:	/--|-- bra.s e374 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    e31a:	|  \-> moveq #24,d0
    e31c:	|      add.l 16(sp),d0
    e320:	|      move.l d0,-(sp)
    e322:	|      jsr 11738 <trimStack>
    e328:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e32a:	|      movea.l 16(sp),a0
    e32e:	|      move.l 24(a0),d0
    e332:	|      move.l d0,-(sp)
    e334:	|      pea 1 <_start+0x1>
    e338:	|      moveq #12,d0
    e33a:	|      add.l sp,d0
    e33c:	|      move.l d0,-(sp)
    e33e:	|      jsr 10db4 <getValueType>
    e344:	|      lea 12(sp),sp
    e348:	|      tst.w d0
    e34a:	|  /-- bne.s e350 <builtIn_positionStatus+0x5e>
    e34c:	|  |   moveq #1,d0
    e34e:	+--|-- bra.s e374 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    e350:	|  \-> moveq #24,d0
    e352:	|      add.l 16(sp),d0
    e356:	|      move.l d0,-(sp)
    e358:	|      jsr 11738 <trimStack>
    e35e:	|      addq.l #4,sp
	positionStatus (x, y);
    e360:	|      move.l (sp),d1
    e362:	|      move.l 4(sp),d0
    e366:	|      move.l d1,-(sp)
    e368:	|      move.l d0,-(sp)
    e36a:	|      jsr 5428 <positionStatus>
    e370:	|      addq.l #8,sp
	return BR_CONTINUE;
    e372:	|      moveq #2,d0
}
    e374:	\----> addq.l #8,sp
    e376:	       rts

0000e378 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    e378:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e37a:	       movea.l 12(sp),a0
    e37e:	       move.l 24(a0),d0
    e382:	       move.l d0,-(sp)
    e384:	       pea 1 <_start+0x1>
    e388:	       move.l sp,d0
    e38a:	       addq.l #8,d0
    e38c:	       move.l d0,-(sp)
    e38e:	       jsr 10db4 <getValueType>
    e394:	       lea 12(sp),sp
    e398:	       tst.w d0
    e39a:	   /-- bne.s e3a0 <builtIn_alignStatus+0x28>
    e39c:	   |   moveq #1,d0
    e39e:	/--|-- bra.s e3c0 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    e3a0:	|  \-> moveq #24,d0
    e3a2:	|      add.l 12(sp),d0
    e3a6:	|      move.l d0,-(sp)
    e3a8:	|      jsr 11738 <trimStack>
    e3ae:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    e3b0:	|      move.l (sp),d0
    e3b2:	|      movea.l 18132 <nowStatus>,a0
    e3b8:	|      move.l d0,d0
    e3ba:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    e3be:	|      moveq #2,d0
}
    e3c0:	\----> addq.l #4,sp
    e3c2:	       rts

0000e3c4 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    e3c4:	             tst.l 4(sp)
    e3c8:	      /----- beq.s e3d4 <getFuncNumForCallback+0x10>
    e3ca:	      |      moveq #1,d0
    e3cc:	      |      cmp.l 4(sp),d0
    e3d0:	      |  /-- beq.s e3da <getFuncNumForCallback+0x16>
    e3d2:	   /--|--|-- bra.s e410 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    e3d4:	   |  \--|-> clr.l 12(sp)
			break;
    e3d8:	/--|-----|-- bra.s e422 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    e3da:	|  |     \-> movea.l 8(sp),a0
    e3de:	|  |         move.l 24(a0),d0
    e3e2:	|  |         move.l d0,-(sp)
    e3e4:	|  |         pea 2 <_start+0x2>
    e3e8:	|  |         move.l 20(sp),-(sp)
    e3ec:	|  |         jsr 10db4 <getValueType>
    e3f2:	|  |         lea 12(sp),sp
    e3f6:	|  |         tst.w d0
    e3f8:	|  |     /-- bne.s e3fe <getFuncNumForCallback+0x3a>
    e3fa:	|  |     |   clr.w d0
    e3fc:	|  |  /--|-- bra.s e424 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    e3fe:	|  |  |  \-> moveq #24,d0
    e400:	|  |  |      add.l 8(sp),d0
    e404:	|  |  |      move.l d0,-(sp)
    e406:	|  |  |      jsr 11738 <trimStack>
    e40c:	|  |  |      addq.l #4,sp
			break;
    e40e:	+--|--|----- bra.s e422 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    e410:	|  \--|----> pea 16b39 <newfatal.c.307beca7+0x7d>
    e416:	|     |      jsr 12e08 <KPrintF>
    e41c:	|     |      addq.l #4,sp
			return FALSE;
    e41e:	|     |      clr.w d0
    e420:	|     +----- bra.s e424 <getFuncNumForCallback+0x60>
	}
	return TRUE;
    e422:	\-----|----> moveq #1,d0
}
    e424:	      \----> rts

0000e426 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    e426:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e428:	       move.l sp,d0
    e42a:	       move.l d0,-(sp)
    e42c:	       move.l 16(sp),-(sp)
    e430:	       move.l 16(sp),-(sp)
    e434:	       jsr e3c4 <getFuncNumForCallback>
    e43a:	       lea 12(sp),sp
    e43e:	       tst.w d0
    e440:	/----- beq.s e450 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    e442:	|      movea.l 1811c <currentEvents>,a0
    e448:	|      move.l (sp),d0
    e44a:	|      move.l d0,(a0)
		return BR_CONTINUE;
    e44c:	|      moveq #2,d0
    e44e:	|  /-- bra.s e452 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    e450:	\--|-> moveq #1,d0
}
    e452:	   \-> addq.l #4,sp
    e454:	       rts

0000e456 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    e456:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e458:	       move.l sp,d0
    e45a:	       move.l d0,-(sp)
    e45c:	       move.l 16(sp),-(sp)
    e460:	       move.l 16(sp),-(sp)
    e464:	       jsr e3c4 <getFuncNumForCallback>
    e46a:	       lea 12(sp),sp
    e46e:	       tst.w d0
    e470:	/----- beq.s e482 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    e472:	|      movea.l 1811c <currentEvents>,a0
    e478:	|      move.l (sp),d0
    e47a:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    e47e:	|      moveq #2,d0
    e480:	|  /-- bra.s e484 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    e482:	\--|-> moveq #1,d0
}
    e484:	   \-> addq.l #4,sp
    e486:	       rts

0000e488 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    e488:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e48a:	       move.l sp,d0
    e48c:	       move.l d0,-(sp)
    e48e:	       move.l 16(sp),-(sp)
    e492:	       move.l 16(sp),-(sp)
    e496:	       jsr e3c4 <getFuncNumForCallback>
    e49c:	       lea 12(sp),sp
    e4a0:	       tst.w d0
    e4a2:	/----- beq.s e4b4 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    e4a4:	|      movea.l 1811c <currentEvents>,a0
    e4aa:	|      move.l (sp),d0
    e4ac:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    e4b0:	|      moveq #2,d0
    e4b2:	|  /-- bra.s e4b6 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    e4b4:	\--|-> moveq #1,d0
}
    e4b6:	   \-> addq.l #4,sp
    e4b8:	       rts

0000e4ba <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    e4ba:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e4bc:	       move.l sp,d0
    e4be:	       move.l d0,-(sp)
    e4c0:	       move.l 16(sp),-(sp)
    e4c4:	       move.l 16(sp),-(sp)
    e4c8:	       jsr e3c4 <getFuncNumForCallback>
    e4ce:	       lea 12(sp),sp
    e4d2:	       tst.w d0
    e4d4:	/----- beq.s e4e6 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    e4d6:	|      movea.l 1811c <currentEvents>,a0
    e4dc:	|      move.l (sp),d0
    e4de:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    e4e2:	|      moveq #2,d0
    e4e4:	|  /-- bra.s e4e8 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    e4e6:	\--|-> moveq #1,d0
}
    e4e8:	   \-> addq.l #4,sp
    e4ea:	       rts

0000e4ec <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    e4ec:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e4ee:	       move.l sp,d0
    e4f0:	       move.l d0,-(sp)
    e4f2:	       move.l 16(sp),-(sp)
    e4f6:	       move.l 16(sp),-(sp)
    e4fa:	       jsr e3c4 <getFuncNumForCallback>
    e500:	       lea 12(sp),sp
    e504:	       tst.w d0
    e506:	/----- beq.s e518 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    e508:	|      movea.l 1811c <currentEvents>,a0
    e50e:	|      move.l (sp),d0
    e510:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    e514:	|      moveq #2,d0
    e516:	|  /-- bra.s e51a <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    e518:	\--|-> moveq #1,d0
}
    e51a:	   \-> addq.l #4,sp
    e51c:	       rts

0000e51e <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    e51e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e520:	       move.l sp,d0
    e522:	       move.l d0,-(sp)
    e524:	       move.l 16(sp),-(sp)
    e528:	       move.l 16(sp),-(sp)
    e52c:	       jsr e3c4 <getFuncNumForCallback>
    e532:	       lea 12(sp),sp
    e536:	       tst.w d0
    e538:	/----- beq.s e54a <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    e53a:	|      movea.l 1811c <currentEvents>,a0
    e540:	|      move.l (sp),d0
    e542:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    e546:	|      moveq #2,d0
    e548:	|  /-- bra.s e54c <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    e54a:	\--|-> moveq #1,d0
}
    e54c:	   \-> addq.l #4,sp
    e54e:	       rts

0000e550 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    e550:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e552:	       move.l sp,d0
    e554:	       move.l d0,-(sp)
    e556:	       move.l 16(sp),-(sp)
    e55a:	       move.l 16(sp),-(sp)
    e55e:	       jsr e3c4 <getFuncNumForCallback>
    e564:	       lea 12(sp),sp
    e568:	       tst.w d0
    e56a:	/----- beq.s e57c <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    e56c:	|      movea.l 1811c <currentEvents>,a0
    e572:	|      move.l (sp),d0
    e574:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    e578:	|      moveq #2,d0
    e57a:	|  /-- bra.s e57e <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    e57c:	\--|-> moveq #1,d0
}
    e57e:	   \-> addq.l #4,sp
    e580:	       rts

0000e582 <builtIn_spawnSub>:

builtIn (spawnSub)
{
    e582:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e584:	          move.l sp,d0
    e586:	          move.l d0,-(sp)
    e588:	          move.l 16(sp),-(sp)
    e58c:	          move.l 16(sp),-(sp)
    e590:	          jsr e3c4 <getFuncNumForCallback>
    e596:	          lea 12(sp),sp
    e59a:	          tst.w d0
    e59c:	/-------- beq.s e5c8 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    e59e:	|         move.l 19c2a <noStack>,d1
    e5a4:	|         move.l (sp),d0
    e5a6:	|         pea 1 <_start+0x1>
    e5aa:	|         move.l d1,-(sp)
    e5ac:	|         clr.l -(sp)
    e5ae:	|         clr.l -(sp)
    e5b0:	|         move.l d0,-(sp)
    e5b2:	|         jsr 4558 <startNewFunctionNum>
    e5b8:	|         lea 20(sp),sp
    e5bc:	|         tst.l d0
    e5be:	|     /-- bne.s e5c4 <builtIn_spawnSub+0x42>
    e5c0:	|     |   moveq #1,d0
    e5c2:	|  /--|-- bra.s e5ca <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    e5c4:	|  |  \-> moveq #2,d0
    e5c6:	|  +----- bra.s e5ca <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    e5c8:	\--|----> moveq #1,d0
}
    e5ca:	   \----> addq.l #4,sp
    e5cc:	          rts

0000e5ce <builtIn_cancelSub>:

builtIn (cancelSub)
{
    e5ce:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e5d0:	          move.l sp,d0
    e5d2:	          addq.l #4,d0
    e5d4:	          move.l d0,-(sp)
    e5d6:	          move.l 20(sp),-(sp)
    e5da:	          move.l 20(sp),-(sp)
    e5de:	          jsr e3c4 <getFuncNumForCallback>
    e5e4:	          lea 12(sp),sp
    e5e8:	          tst.w d0
    e5ea:	/-------- beq.s e620 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    e5ec:	|         move.l 4(sp),d1
    e5f0:	|         move.l sp,d0
    e5f2:	|         addq.l #2,d0
    e5f4:	|         move.l d0,-(sp)
    e5f6:	|         move.l 20(sp),-(sp)
    e5fa:	|         move.l d1,-(sp)
    e5fc:	|         jsr 251c <cancelAFunction>
    e602:	|         lea 12(sp),sp
		if (killedMyself) {
    e606:	|         move.w 2(sp),d0
    e60a:	|  /----- beq.s e61c <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    e60c:	|  |      move.l 16(sp),-(sp)
    e610:	|  |      jsr 243a <abortFunction>
    e616:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    e618:	|  |      moveq #5,d0
    e61a:	|  |  /-- bra.s e622 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    e61c:	|  \--|-> moveq #2,d0
    e61e:	|     +-- bra.s e622 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    e620:	\-----|-> moveq #1,d0
}
    e622:	      \-> addq.l #8,sp
    e624:	          rts

0000e626 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    e626:	       subq.l #8,sp
    e628:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    e62a:	       movea.l 20(sp),a0
    e62e:	       move.l 24(a0),d0
    e632:	       move.l d0,-(sp)
    e634:	       jsr 1138a <getTextFromAnyVar>
    e63a:	       addq.l #4,sp
    e63c:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    e640:	   /-- bne.s e646 <builtIn_stringWidth+0x20>
    e642:	   |   moveq #1,d0
    e644:	/--|-- bra.s e694 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    e646:	|  \-> moveq #24,d0
    e648:	|      add.l 20(sp),d0
    e64c:	|      move.l d0,-(sp)
    e64e:	|      jsr 11738 <trimStack>
    e654:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    e656:	|      move.l 8(sp),-(sp)
    e65a:	|      jsr 11792 <stringWidth>
    e660:	|      addq.l #4,sp
    e662:	|      move.l d0,d1
    e664:	|      moveq #28,d0
    e666:	|      add.l 20(sp),d0
    e66a:	|      move.l d1,-(sp)
    e66c:	|      pea 1 <_start+0x1>
    e670:	|      move.l d0,-(sp)
    e672:	|      jsr 116a6 <setVariable>
    e678:	|      lea 12(sp),sp
	FreeVec(theText);
    e67c:	|      move.l 8(sp),4(sp)
    e682:	|      move.l 19c5a <SysBase>,d0
    e688:	|      movea.l d0,a6
    e68a:	|      movea.l 4(sp),a1
    e68e:	|      jsr -690(a6)
	return BR_CONTINUE;
    e692:	|      moveq #2,d0
}
    e694:	\----> movea.l (sp)+,a6
    e696:	       addq.l #8,sp
    e698:	       rts

0000e69a <builtIn_hardScroll>:

builtIn(hardScroll)
{
    e69a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e69c:	       movea.l 12(sp),a0
    e6a0:	       move.l 24(a0),d0
    e6a4:	       move.l d0,-(sp)
    e6a6:	       pea 1 <_start+0x1>
    e6aa:	       move.l sp,d0
    e6ac:	       addq.l #8,d0
    e6ae:	       move.l d0,-(sp)
    e6b0:	       jsr 10db4 <getValueType>
    e6b6:	       lea 12(sp),sp
    e6ba:	       tst.w d0
    e6bc:	   /-- bne.s e6c2 <builtIn_hardScroll+0x28>
    e6be:	   |   moveq #1,d0
    e6c0:	/--|-- bra.s e6e0 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    e6c2:	|  \-> moveq #24,d0
    e6c4:	|      add.l 12(sp),d0
    e6c8:	|      move.l d0,-(sp)
    e6ca:	|      jsr 11738 <trimStack>
    e6d0:	|      addq.l #4,sp
	hardScroll (v);
    e6d2:	|      move.l (sp),d0
    e6d4:	|      move.l d0,-(sp)
    e6d6:	|      jsr 9900 <hardScroll>
    e6dc:	|      addq.l #4,sp
	return BR_CONTINUE;
    e6de:	|      moveq #2,d0
}
    e6e0:	\----> addq.l #4,sp
    e6e2:	       rts

0000e6e4 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    e6e4:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e6e6:	       movea.l 12(sp),a0
    e6ea:	       move.l 24(a0),d0
    e6ee:	       move.l d0,-(sp)
    e6f0:	       pea 7 <_start+0x7>
    e6f4:	       move.l sp,d0
    e6f6:	       addq.l #8,d0
    e6f8:	       move.l d0,-(sp)
    e6fa:	       jsr 10db4 <getValueType>
    e700:	       lea 12(sp),sp
    e704:	       tst.w d0
    e706:	   /-- bne.s e70c <builtIn_isScreenRegion+0x28>
    e708:	   |   moveq #1,d0
    e70a:	/--|-- bra.s e74c <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    e70c:	|  \-> moveq #24,d0
    e70e:	|      add.l 12(sp),d0
    e712:	|      move.l d0,-(sp)
    e714:	|      jsr 11738 <trimStack>
    e71a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    e71c:	|      move.l (sp),d0
    e71e:	|      move.l d0,-(sp)
    e720:	|      jsr 1187e <getRegionForObject>
    e726:	|      addq.l #4,sp
    e728:	|      tst.l d0
    e72a:	|      sne d0
    e72c:	|      neg.b d0
    e72e:	|      moveq #0,d1
    e730:	|      move.b d0,d1
    e732:	|      moveq #28,d0
    e734:	|      add.l 12(sp),d0
    e738:	|      move.l d1,-(sp)
    e73a:	|      pea 1 <_start+0x1>
    e73e:	|      move.l d0,-(sp)
    e740:	|      jsr 116a6 <setVariable>
    e746:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e74a:	|      moveq #2,d0
}
    e74c:	\----> addq.l #4,sp
    e74e:	       rts

0000e750 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    e750:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e752:	       movea.l 12(sp),a0
    e756:	       move.l 24(a0),d0
    e75a:	       move.l d0,-(sp)
    e75c:	       pea 1 <_start+0x1>
    e760:	       move.l sp,d0
    e762:	       addq.l #8,d0
    e764:	       move.l d0,-(sp)
    e766:	       jsr 10db4 <getValueType>
    e76c:	       lea 12(sp),sp
    e770:	       tst.w d0
    e772:	   /-- bne.s e778 <builtIn_setSpeechSpeed+0x28>
    e774:	   |   moveq #1,d0
    e776:	/--|-- bra.s e7c6 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    e778:	|  \-> moveq #24,d0
    e77a:	|      add.l 12(sp),d0
    e77e:	|      move.l d0,-(sp)
    e780:	|      jsr 11738 <trimStack>
    e786:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    e788:	|      move.l (sp),d0
    e78a:	|      move.l d0,-(sp)
    e78c:	|      jsr 133a4 <__floatsisf>
    e792:	|      addq.l #4,sp
    e794:	|      move.l #1008981770,-(sp)
    e79a:	|      move.l d0,-(sp)
    e79c:	|      jsr 13456 <__mulsf3>
    e7a2:	|      addq.l #8,sp
    e7a4:	|      move.l d0,18136 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    e7aa:	|      moveq #28,d0
    e7ac:	|      add.l 12(sp),d0
    e7b0:	|      pea 1 <_start+0x1>
    e7b4:	|      pea 1 <_start+0x1>
    e7b8:	|      move.l d0,-(sp)
    e7ba:	|      jsr 116a6 <setVariable>
    e7c0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e7c4:	|      moveq #2,d0
}
    e7c6:	\----> addq.l #4,sp
    e7c8:	       rts

0000e7ca <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    e7ca:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e7cc:	       movea.l 12(sp),a0
    e7d0:	       move.l 24(a0),d0
    e7d4:	       move.l d0,-(sp)
    e7d6:	       pea 1 <_start+0x1>
    e7da:	       move.l sp,d0
    e7dc:	       addq.l #8,d0
    e7de:	       move.l d0,-(sp)
    e7e0:	       jsr 10db4 <getValueType>
    e7e6:	       lea 12(sp),sp
    e7ea:	       tst.w d0
    e7ec:	   /-- bne.s e7f2 <builtIn_setFontSpacing+0x28>
    e7ee:	   |   moveq #1,d0
    e7f0:	/--|-- bra.s e828 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    e7f2:	|  \-> move.l (sp),d0
    e7f4:	|      move.l d0,d0
    e7f6:	|      move.w d0,186b0 <fontSpace>
	trimStack (&fun -> stack);
    e7fc:	|      moveq #24,d0
    e7fe:	|      add.l 12(sp),d0
    e802:	|      move.l d0,-(sp)
    e804:	|      jsr 11738 <trimStack>
    e80a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    e80c:	|      moveq #28,d0
    e80e:	|      add.l 12(sp),d0
    e812:	|      pea 1 <_start+0x1>
    e816:	|      pea 1 <_start+0x1>
    e81a:	|      move.l d0,-(sp)
    e81c:	|      jsr 116a6 <setVariable>
    e822:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e826:	|      moveq #2,d0
}
    e828:	\----> addq.l #4,sp
    e82a:	       rts

0000e82c <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    e82c:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e82e:	          movea.l 12(sp),a0
    e832:	          move.l 24(a0),d0
    e836:	          move.l d0,-(sp)
    e838:	          pea 1 <_start+0x1>
    e83c:	          move.l sp,d0
    e83e:	          addq.l #8,d0
    e840:	          move.l d0,-(sp)
    e842:	          jsr 10db4 <getValueType>
    e848:	          lea 12(sp),sp
    e84c:	          tst.w d0
    e84e:	      /-- bne.s e854 <builtIn_transitionLevel+0x28>
    e850:	      |   moveq #1,d0
    e852:	/-----|-- bra.s e8a8 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    e854:	|     \-> moveq #24,d0
    e856:	|         add.l 12(sp),d0
    e85a:	|         move.l d0,-(sp)
    e85c:	|         jsr 11738 <trimStack>
    e862:	|         addq.l #4,sp

	if (number < 0)
    e864:	|         move.l (sp),d0
    e866:	|     /-- bpl.s e870 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    e868:	|     |   clr.b 1811a <brightnessLevel>
    e86e:	|  /--|-- bra.s e88c <builtIn_transitionLevel+0x60>
	else if (number > 255)
    e870:	|  |  \-> move.l (sp),d0
    e872:	|  |      cmpi.l #255,d0
    e878:	|  |  /-- ble.s e882 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    e87a:	|  |  |   st 1811a <brightnessLevel>
    e880:	|  +--|-- bra.s e88c <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    e882:	|  |  \-> move.l (sp),d0
    e884:	|  |      move.l d0,d0
    e886:	|  |      move.b d0,1811a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    e88c:	|  \----> moveq #28,d0
    e88e:	|         add.l 12(sp),d0
    e892:	|         pea 1 <_start+0x1>
    e896:	|         pea 1 <_start+0x1>
    e89a:	|         move.l d0,-(sp)
    e89c:	|         jsr 116a6 <setVariable>
    e8a2:	|         lea 12(sp),sp
	return BR_CONTINUE;
    e8a6:	|         moveq #2,d0
}
    e8a8:	\-------> addq.l #4,sp
    e8aa:	          rts

0000e8ac <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    e8ac:	movea.l 8(sp),a0
    e8b0:	move.l 24(a0),d0
    e8b4:	move.l d0,-(sp)
    e8b6:	jsr 112f4 <getBoolean>
    e8bc:	addq.l #4,sp
    e8be:	move.w d0,19bfe <captureAllKeys>
	trimStack (&fun -> stack);
    e8c4:	moveq #24,d0
    e8c6:	add.l 8(sp),d0
    e8ca:	move.l d0,-(sp)
    e8cc:	jsr 11738 <trimStack>
    e8d2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    e8d4:	move.w 19bfe <captureAllKeys>,d0
    e8da:	movea.w d0,a0
    e8dc:	moveq #28,d0
    e8de:	add.l 8(sp),d0
    e8e2:	move.l a0,-(sp)
    e8e4:	pea 1 <_start+0x1>
    e8e8:	move.l d0,-(sp)
    e8ea:	jsr 116a6 <setVariable>
    e8f0:	lea 12(sp),sp
	return BR_CONTINUE;
    e8f4:	moveq #2,d0
}
    e8f6:	rts

0000e8f8 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    e8f8:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e8fc:	       movea.l 20(sp),a0
    e900:	       move.l 24(a0),d0
    e904:	       move.l d0,-(sp)
    e906:	       pea 1 <_start+0x1>
    e90a:	       moveq #12,d0
    e90c:	       add.l sp,d0
    e90e:	       move.l d0,-(sp)
    e910:	       jsr 10db4 <getValueType>
    e916:	       lea 12(sp),sp
    e91a:	       tst.w d0
    e91c:	   /-- bne.s e924 <builtIn_spinCharacter+0x2c>
    e91e:	   |   moveq #1,d0
    e920:	/--|-- bra.w e9d4 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    e924:	|  \-> moveq #24,d0
    e926:	|      add.l 20(sp),d0
    e92a:	|      move.l d0,-(sp)
    e92c:	|      jsr 11738 <trimStack>
    e932:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e934:	|      movea.l 20(sp),a0
    e938:	|      move.l 24(a0),d0
    e93c:	|      move.l d0,-(sp)
    e93e:	|      pea 7 <_start+0x7>
    e942:	|      lea 8(sp),a0
    e946:	|      move.l a0,-(sp)
    e948:	|      jsr 10db4 <getValueType>
    e94e:	|      lea 12(sp),sp
    e952:	|      tst.w d0
    e954:	|  /-- bne.s e95a <builtIn_spinCharacter+0x62>
    e956:	|  |   moveq #1,d0
    e958:	+--|-- bra.s e9d4 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    e95a:	|  \-> moveq #24,d0
    e95c:	|      add.l 20(sp),d0
    e960:	|      move.l d0,-(sp)
    e962:	|      jsr 11738 <trimStack>
    e968:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    e96a:	|      move.l (sp),d0
    e96c:	|      move.l d0,-(sp)
    e96e:	|      jsr 6f46 <findPerson>
    e974:	|      addq.l #4,sp
    e976:	|      move.l d0,8(sp)
	if (thisPerson) {
    e97a:	|  /-- beq.s e9ba <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    e97c:	|  |   move.l 4(sp),d0
    e980:	|  |   movea.l 8(sp),a0
    e984:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    e988:	|  |   movea.l 8(sp),a0
    e98c:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    e992:	|  |   movea.l 8(sp),a0
    e996:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    e99c:	|  |   moveq #28,d0
    e99e:	|  |   add.l 20(sp),d0
    e9a2:	|  |   pea 1 <_start+0x1>
    e9a6:	|  |   pea 1 <_start+0x1>
    e9aa:	|  |   move.l d0,-(sp)
    e9ac:	|  |   jsr 116a6 <setVariable>
    e9b2:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    e9b6:	|  |   moveq #3,d0
    e9b8:	+--|-- bra.s e9d4 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e9ba:	|  \-> moveq #28,d0
    e9bc:	|      add.l 20(sp),d0
    e9c0:	|      clr.l -(sp)
    e9c2:	|      pea 1 <_start+0x1>
    e9c6:	|      move.l d0,-(sp)
    e9c8:	|      jsr 116a6 <setVariable>
    e9ce:	|      lea 12(sp),sp
		return BR_CONTINUE;
    e9d2:	|      moveq #2,d0
	}
}
    e9d4:	\----> lea 12(sp),sp
    e9d8:	       rts

0000e9da <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    e9da:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e9dc:	          movea.l 16(sp),a0
    e9e0:	          move.l 24(a0),d0
    e9e4:	          move.l d0,-(sp)
    e9e6:	          pea 7 <_start+0x7>
    e9ea:	          move.l sp,d0
    e9ec:	          addq.l #8,d0
    e9ee:	          move.l d0,-(sp)
    e9f0:	          jsr 10db4 <getValueType>
    e9f6:	          lea 12(sp),sp
    e9fa:	          tst.w d0
    e9fc:	      /-- bne.s ea02 <builtIn_getCharacterDirection+0x28>
    e9fe:	      |   moveq #1,d0
    ea00:	/-----|-- bra.s ea60 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    ea02:	|     \-> moveq #24,d0
    ea04:	|         add.l 16(sp),d0
    ea08:	|         move.l d0,-(sp)
    ea0a:	|         jsr 11738 <trimStack>
    ea10:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ea12:	|         move.l (sp),d0
    ea14:	|         move.l d0,-(sp)
    ea16:	|         jsr 6f46 <findPerson>
    ea1c:	|         addq.l #4,sp
    ea1e:	|         move.l d0,4(sp)
	if (thisPerson) {
    ea22:	|  /----- beq.s ea46 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    ea24:	|  |      movea.l 4(sp),a0
    ea28:	|  |      move.l 94(a0),d1
    ea2c:	|  |      moveq #28,d0
    ea2e:	|  |      add.l 16(sp),d0
    ea32:	|  |      move.l d1,-(sp)
    ea34:	|  |      pea 1 <_start+0x1>
    ea38:	|  |      move.l d0,-(sp)
    ea3a:	|  |      jsr 116a6 <setVariable>
    ea40:	|  |      lea 12(sp),sp
    ea44:	|  |  /-- bra.s ea5e <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ea46:	|  \--|-> moveq #28,d0
    ea48:	|     |   add.l 16(sp),d0
    ea4c:	|     |   clr.l -(sp)
    ea4e:	|     |   pea 1 <_start+0x1>
    ea52:	|     |   move.l d0,-(sp)
    ea54:	|     |   jsr 116a6 <setVariable>
    ea5a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ea5e:	|     \-> moveq #2,d0
}
    ea60:	\-------> addq.l #8,sp
    ea62:	          rts

0000ea64 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    ea64:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea66:	       movea.l 16(sp),a0
    ea6a:	       move.l 24(a0),d0
    ea6e:	       move.l d0,-(sp)
    ea70:	       pea 7 <_start+0x7>
    ea74:	       move.l sp,d0
    ea76:	       addq.l #8,d0
    ea78:	       move.l d0,-(sp)
    ea7a:	       jsr 10db4 <getValueType>
    ea80:	       lea 12(sp),sp
    ea84:	       tst.w d0
    ea86:	   /-- bne.s ea8c <builtIn_isCharacter+0x28>
    ea88:	   |   moveq #1,d0
    ea8a:	/--|-- bra.s eace <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    ea8c:	|  \-> moveq #24,d0
    ea8e:	|      add.l 16(sp),d0
    ea92:	|      move.l d0,-(sp)
    ea94:	|      jsr 11738 <trimStack>
    ea9a:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ea9c:	|      move.l (sp),d0
    ea9e:	|      move.l d0,-(sp)
    eaa0:	|      jsr 6f46 <findPerson>
    eaa6:	|      addq.l #4,sp
    eaa8:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    eaac:	|      sne d0
    eaae:	|      neg.b d0
    eab0:	|      moveq #0,d1
    eab2:	|      move.b d0,d1
    eab4:	|      moveq #28,d0
    eab6:	|      add.l 16(sp),d0
    eaba:	|      move.l d1,-(sp)
    eabc:	|      pea 1 <_start+0x1>
    eac0:	|      move.l d0,-(sp)
    eac2:	|      jsr 116a6 <setVariable>
    eac8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eacc:	|      moveq #2,d0
}
    eace:	\----> addq.l #8,sp
    ead0:	       rts

0000ead2 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    ead2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ead4:	          movea.l 16(sp),a0
    ead8:	          move.l 24(a0),d0
    eadc:	          move.l d0,-(sp)
    eade:	          pea 7 <_start+0x7>
    eae2:	          move.l sp,d0
    eae4:	          addq.l #8,d0
    eae6:	          move.l d0,-(sp)
    eae8:	          jsr 10db4 <getValueType>
    eaee:	          lea 12(sp),sp
    eaf2:	          tst.w d0
    eaf4:	      /-- bne.s eafa <builtIn_normalCharacter+0x28>
    eaf6:	      |   moveq #1,d0
    eaf8:	/-----|-- bra.s eb76 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    eafa:	|     \-> moveq #24,d0
    eafc:	|         add.l 16(sp),d0
    eb00:	|         move.l d0,-(sp)
    eb02:	|         jsr 11738 <trimStack>
    eb08:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    eb0a:	|         move.l (sp),d0
    eb0c:	|         move.l d0,-(sp)
    eb0e:	|         jsr 6f46 <findPerson>
    eb14:	|         addq.l #4,sp
    eb16:	|         move.l d0,4(sp)
	if (thisPerson)
    eb1a:	|  /----- beq.s eb5c <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    eb1c:	|  |      movea.l 4(sp),a0
    eb20:	|  |      movea.l 68(a0),a0
    eb24:	|  |      move.l (a0),d1
    eb26:	|  |      movea.l 4(sp),a0
    eb2a:	|  |      move.l 94(a0),d0
    eb2e:	|  |      add.l d0,d0
    eb30:	|  |      add.l d0,d0
    eb32:	|  |      movea.l d1,a0
    eb34:	|  |      adda.l d0,a0
    eb36:	|  |      move.l (a0),d0
    eb38:	|  |      movea.l 4(sp),a0
    eb3c:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    eb40:	|  |      moveq #28,d0
    eb42:	|  |      add.l 16(sp),d0
    eb46:	|  |      pea 1 <_start+0x1>
    eb4a:	|  |      pea 1 <_start+0x1>
    eb4e:	|  |      move.l d0,-(sp)
    eb50:	|  |      jsr 116a6 <setVariable>
    eb56:	|  |      lea 12(sp),sp
    eb5a:	|  |  /-- bra.s eb74 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    eb5c:	|  \--|-> moveq #28,d0
    eb5e:	|     |   add.l 16(sp),d0
    eb62:	|     |   clr.l -(sp)
    eb64:	|     |   pea 1 <_start+0x1>
    eb68:	|     |   move.l d0,-(sp)
    eb6a:	|     |   jsr 116a6 <setVariable>
    eb70:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    eb74:	|     \-> moveq #2,d0
}
    eb76:	\-------> addq.l #8,sp
    eb78:	          rts

0000eb7a <builtIn_isMoving>:

builtIn(isMoving)
{
    eb7a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb7c:	          movea.l 16(sp),a0
    eb80:	          move.l 24(a0),d0
    eb84:	          move.l d0,-(sp)
    eb86:	          pea 7 <_start+0x7>
    eb8a:	          move.l sp,d0
    eb8c:	          addq.l #8,d0
    eb8e:	          move.l d0,-(sp)
    eb90:	          jsr 10db4 <getValueType>
    eb96:	          lea 12(sp),sp
    eb9a:	          tst.w d0
    eb9c:	      /-- bne.s eba2 <builtIn_isMoving+0x28>
    eb9e:	      |   moveq #1,d0
    eba0:	/-----|-- bra.s ec02 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    eba2:	|     \-> moveq #24,d0
    eba4:	|         add.l 16(sp),d0
    eba8:	|         move.l d0,-(sp)
    ebaa:	|         jsr 11738 <trimStack>
    ebb0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    ebb2:	|         move.l (sp),d0
    ebb4:	|         move.l d0,-(sp)
    ebb6:	|         jsr 6f46 <findPerson>
    ebbc:	|         addq.l #4,sp
    ebbe:	|         move.l d0,4(sp)
	if (thisPerson)
    ebc2:	|  /----- beq.s ebe8 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    ebc4:	|  |      movea.l 4(sp),a0
    ebc8:	|  |      move.w 52(a0),d0
    ebcc:	|  |      movea.w d0,a0
    ebce:	|  |      moveq #28,d0
    ebd0:	|  |      add.l 16(sp),d0
    ebd4:	|  |      move.l a0,-(sp)
    ebd6:	|  |      pea 1 <_start+0x1>
    ebda:	|  |      move.l d0,-(sp)
    ebdc:	|  |      jsr 116a6 <setVariable>
    ebe2:	|  |      lea 12(sp),sp
    ebe6:	|  |  /-- bra.s ec00 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ebe8:	|  \--|-> moveq #28,d0
    ebea:	|     |   add.l 16(sp),d0
    ebee:	|     |   clr.l -(sp)
    ebf0:	|     |   pea 1 <_start+0x1>
    ebf4:	|     |   move.l d0,-(sp)
    ebf6:	|     |   jsr 116a6 <setVariable>
    ebfc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ec00:	|     \-> moveq #2,d0
}
    ec02:	\-------> addq.l #8,sp
    ec04:	          rts

0000ec06 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    ec06:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec0a:	          movea.l 20(sp),a0
    ec0e:	          move.l 24(a0),d0
    ec12:	          move.l d0,-(sp)
    ec14:	          pea 7 <_start+0x7>
    ec18:	          lea 8(sp),a0
    ec1c:	          move.l a0,-(sp)
    ec1e:	          jsr 10db4 <getValueType>
    ec24:	          lea 12(sp),sp
    ec28:	          tst.w d0
    ec2a:	      /-- bne.s ec32 <builtIn_fetchEvent+0x2c>
    ec2c:	      |   moveq #1,d0
    ec2e:	/-----|-- bra.w ecc6 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    ec32:	|     \-> moveq #24,d0
    ec34:	|         add.l 20(sp),d0
    ec38:	|         move.l d0,-(sp)
    ec3a:	|         jsr 11738 <trimStack>
    ec40:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec42:	|         movea.l 20(sp),a0
    ec46:	|         move.l 24(a0),d0
    ec4a:	|         move.l d0,-(sp)
    ec4c:	|         pea 7 <_start+0x7>
    ec50:	|         moveq #12,d0
    ec52:	|         add.l sp,d0
    ec54:	|         move.l d0,-(sp)
    ec56:	|         jsr 10db4 <getValueType>
    ec5c:	|         lea 12(sp),sp
    ec60:	|         tst.w d0
    ec62:	|     /-- bne.s ec68 <builtIn_fetchEvent+0x62>
    ec64:	|     |   moveq #1,d0
    ec66:	+-----|-- bra.s ecc6 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    ec68:	|     \-> moveq #24,d0
    ec6a:	|         add.l 20(sp),d0
    ec6e:	|         move.l d0,-(sp)
    ec70:	|         jsr 11738 <trimStack>
    ec76:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    ec78:	|         move.l (sp),d1
    ec7a:	|         move.l 4(sp),d0
    ec7e:	|         move.l d1,-(sp)
    ec80:	|         move.l d0,-(sp)
    ec82:	|         jsr 9c3a <getCombinationFunction>
    ec88:	|         addq.l #8,sp
    ec8a:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    ec8e:	|  /----- beq.s ecac <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    ec90:	|  |      moveq #28,d0
    ec92:	|  |      add.l 20(sp),d0
    ec96:	|  |      move.l 8(sp),-(sp)
    ec9a:	|  |      pea 2 <_start+0x2>
    ec9e:	|  |      move.l d0,-(sp)
    eca0:	|  |      jsr 116a6 <setVariable>
    eca6:	|  |      lea 12(sp),sp
    ecaa:	|  |  /-- bra.s ecc4 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ecac:	|  \--|-> moveq #28,d0
    ecae:	|     |   add.l 20(sp),d0
    ecb2:	|     |   clr.l -(sp)
    ecb4:	|     |   pea 1 <_start+0x1>
    ecb8:	|     |   move.l d0,-(sp)
    ecba:	|     |   jsr 116a6 <setVariable>
    ecc0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ecc4:	|     \-> moveq #2,d0
}
    ecc6:	\-------> lea 12(sp),sp
    ecca:	          rts

0000eccc <builtIn_deleteFile>:

builtIn(deleteFile)
{
    eccc:	       lea -24(sp),sp
    ecd0:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    ecd2:	       movea.l 36(sp),a0
    ecd6:	       move.l 24(a0),d0
    ecda:	       move.l d0,-(sp)
    ecdc:	       jsr 1138a <getTextFromAnyVar>
    ece2:	       addq.l #4,sp
    ece4:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    ece8:	       moveq #24,d0
    ecea:	       add.l 36(sp),d0
    ecee:	       move.l d0,-(sp)
    ecf0:	       jsr 11738 <trimStack>
    ecf6:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    ecf8:	       move.l 24(sp),-(sp)
    ecfc:	       jsr 2fe <encodeFilename>
    ed02:	       addq.l #4,sp
    ed04:	       move.l d0,20(sp)
    FreeVec(namNormal);
    ed08:	       move.l 24(sp),16(sp)
    ed0e:	       move.l 19c5a <SysBase>,d0
    ed14:	       movea.l d0,a6
    ed16:	       movea.l 16(sp),a1
    ed1a:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    ed1e:	       move.l 20(sp),-(sp)
    ed22:	       jsr a9f2 <failSecurityCheck>
    ed28:	       addq.l #4,sp
    ed2a:	       tst.w d0
    ed2c:	   /-- beq.s ed32 <builtIn_deleteFile+0x66>
    ed2e:	   |   moveq #1,d0
    ed30:	/--|-- bra.s ed80 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    ed32:	|  \-> move.l 20(sp),12(sp)
    ed38:	|      move.l 19c62 <DOSBase>,d0
    ed3e:	|      movea.l d0,a6
    ed40:	|      move.l 12(sp),d1
    ed44:	|      jsr -72(a6)
    ed48:	|      move.l d0,8(sp)
    ed4c:	|      move.l 8(sp),d1
    ed50:	|      moveq #28,d0
    ed52:	|      add.l 36(sp),d0
    ed56:	|      move.l d1,-(sp)
    ed58:	|      pea 1 <_start+0x1>
    ed5c:	|      move.l d0,-(sp)
    ed5e:	|      jsr 116a6 <setVariable>
    ed64:	|      lea 12(sp),sp
    FreeVec(nam);
    ed68:	|      move.l 20(sp),4(sp)
    ed6e:	|      move.l 19c5a <SysBase>,d0
    ed74:	|      movea.l d0,a6
    ed76:	|      movea.l 4(sp),a1
    ed7a:	|      jsr -690(a6)

    return BR_CONTINUE;
    ed7e:	|      moveq #2,d0
}
    ed80:	\----> movea.l (sp)+,a6
    ed82:	       lea 24(sp),sp
    ed86:	       rts

0000ed88 <builtIn_renameFile>:

builtIn(renameFile)
{
    ed88:	       lea -40(sp),sp
    ed8c:	       move.l a6,-(sp)
    ed8e:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    ed90:	       movea.l 56(sp),a0
    ed94:	       move.l 24(a0),d0
    ed98:	       move.l d0,-(sp)
    ed9a:	       jsr 1138a <getTextFromAnyVar>
    eda0:	       addq.l #4,sp
    eda2:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    eda6:	       move.l 44(sp),-(sp)
    edaa:	       jsr 2fe <encodeFilename>
    edb0:	       addq.l #4,sp
    edb2:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    edb6:	       moveq #24,d0
    edb8:	       add.l 56(sp),d0
    edbc:	       move.l d0,-(sp)
    edbe:	       jsr 11738 <trimStack>
    edc4:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    edc6:	       move.l 40(sp),-(sp)
    edca:	       jsr a9f2 <failSecurityCheck>
    edd0:	       addq.l #4,sp
    edd2:	       tst.w d0
    edd4:	   /-- beq.s eddc <builtIn_renameFile+0x54>
    edd6:	   |   moveq #1,d0
    edd8:	/--|-- bra.w eec2 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    eddc:	|  \-> move.l 44(sp),36(sp)
    ede2:	|      move.l 19c5a <SysBase>,d0
    ede8:	|      movea.l d0,a6
    edea:	|      movea.l 36(sp),a1
    edee:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    edf2:	|      movea.l 56(sp),a0
    edf6:	|      move.l 24(a0),d0
    edfa:	|      move.l d0,-(sp)
    edfc:	|      jsr 1138a <getTextFromAnyVar>
    ee02:	|      addq.l #4,sp
    ee04:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    ee08:	|      move.l 44(sp),-(sp)
    ee0c:	|      jsr 2fe <encodeFilename>
    ee12:	|      addq.l #4,sp
    ee14:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    ee18:	|      moveq #24,d0
    ee1a:	|      add.l 56(sp),d0
    ee1e:	|      move.l d0,-(sp)
    ee20:	|      jsr 11738 <trimStack>
    ee26:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    ee28:	|      move.l 32(sp),-(sp)
    ee2c:	|      jsr a9f2 <failSecurityCheck>
    ee32:	|      addq.l #4,sp
    ee34:	|      tst.w d0
    ee36:	|  /-- beq.s ee3e <builtIn_renameFile+0xb6>
    ee38:	|  |   moveq #1,d0
    ee3a:	+--|-- bra.w eec2 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    ee3e:	|  \-> move.l 44(sp),28(sp)
    ee44:	|      move.l 19c5a <SysBase>,d0
    ee4a:	|      movea.l d0,a6
    ee4c:	|      movea.l 28(sp),a1
    ee50:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    ee54:	|      move.l 32(sp),24(sp)
    ee5a:	|      move.l 40(sp),20(sp)
    ee60:	|      move.l 19c62 <DOSBase>,d0
    ee66:	|      movea.l d0,a6
    ee68:	|      move.l 24(sp),d1
    ee6c:	|      move.l 20(sp),d2
    ee70:	|      jsr -78(a6)
    ee74:	|      move.l d0,16(sp)
    ee78:	|      move.l 16(sp),d1
    ee7c:	|      moveq #28,d0
    ee7e:	|      add.l 56(sp),d0
    ee82:	|      move.l d1,-(sp)
    ee84:	|      pea 1 <_start+0x1>
    ee88:	|      move.l d0,-(sp)
    ee8a:	|      jsr 116a6 <setVariable>
    ee90:	|      lea 12(sp),sp
	FreeVec(nam);
    ee94:	|      move.l 32(sp),12(sp)
    ee9a:	|      move.l 19c5a <SysBase>,d0
    eea0:	|      movea.l d0,a6
    eea2:	|      movea.l 12(sp),a1
    eea6:	|      jsr -690(a6)
	FreeVec(newnam);
    eeaa:	|      move.l 40(sp),8(sp)
    eeb0:	|      move.l 19c5a <SysBase>,d0
    eeb6:	|      movea.l d0,a6
    eeb8:	|      movea.l 8(sp),a1
    eebc:	|      jsr -690(a6)

	return BR_CONTINUE;
    eec0:	|      moveq #2,d0
}
    eec2:	\----> move.l (sp)+,d2
    eec4:	       movea.l (sp)+,a6
    eec6:	       lea 40(sp),sp
    eeca:	       rts

0000eecc <builtIn_cacheSound>:

builtIn(cacheSound)
{
    eecc:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eece:	       movea.l 12(sp),a0
    eed2:	       move.l 24(a0),d0
    eed6:	       move.l d0,-(sp)
    eed8:	       pea 5 <_start+0x5>
    eedc:	       move.l sp,d0
    eede:	       addq.l #8,d0
    eee0:	       move.l d0,-(sp)
    eee2:	       jsr 10db4 <getValueType>
    eee8:	       lea 12(sp),sp
    eeec:	       tst.w d0
    eeee:	   /-- bne.s eef4 <builtIn_cacheSound+0x28>
    eef0:	   |   moveq #1,d0
    eef2:	/--|-- bra.s ef1c <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    eef4:	|  \-> moveq #24,d0
    eef6:	|      add.l 12(sp),d0
    eefa:	|      move.l d0,-(sp)
    eefc:	|      jsr 11738 <trimStack>
    ef02:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    ef04:	|      move.l (sp),d0
    ef06:	|      move.l d0,-(sp)
    ef08:	|      jsr 97e2 <cacheSound>
    ef0e:	|      addq.l #4,sp
    ef10:	|      moveq #-1,d1
    ef12:	|      cmp.l d0,d1
    ef14:	|  /-- bne.s ef1a <builtIn_cacheSound+0x4e>
    ef16:	|  |   moveq #1,d0
    ef18:	+--|-- bra.s ef1c <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    ef1a:	|  \-> moveq #2,d0
}
    ef1c:	\----> addq.l #4,sp
    ef1e:	       rts

0000ef20 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    ef20:	pea 16b4e <newfatal.c.307beca7+0x92>
    ef26:	jsr 12e08 <KPrintF>
    ef2c:	addq.l #4,sp
	return BR_CONTINUE;
    ef2e:	moveq #2,d0
}
    ef30:	rts

0000ef32 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    ef32:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef36:	          movea.l 20(sp),a0
    ef3a:	          move.l 24(a0),d0
    ef3e:	          move.l d0,-(sp)
    ef40:	          pea 1 <_start+0x1>
    ef44:	          moveq #12,d0
    ef46:	          add.l sp,d0
    ef48:	          move.l d0,-(sp)
    ef4a:	          jsr 10db4 <getValueType>
    ef50:	          lea 12(sp),sp
    ef54:	          tst.w d0
    ef56:	      /-- bne.s ef5e <builtIn_setCharacterSpinSpeed+0x2c>
    ef58:	      |   moveq #1,d0
    ef5a:	/-----|-- bra.w eff8 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    ef5e:	|     \-> moveq #24,d0
    ef60:	|         add.l 20(sp),d0
    ef64:	|         move.l d0,-(sp)
    ef66:	|         jsr 11738 <trimStack>
    ef6c:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ef6e:	|         movea.l 20(sp),a0
    ef72:	|         move.l 24(a0),d0
    ef76:	|         move.l d0,-(sp)
    ef78:	|         pea 7 <_start+0x7>
    ef7c:	|         lea 8(sp),a0
    ef80:	|         move.l a0,-(sp)
    ef82:	|         jsr 10db4 <getValueType>
    ef88:	|         lea 12(sp),sp
    ef8c:	|         tst.w d0
    ef8e:	|     /-- bne.s ef94 <builtIn_setCharacterSpinSpeed+0x62>
    ef90:	|     |   moveq #1,d0
    ef92:	+-----|-- bra.s eff8 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    ef94:	|     \-> moveq #24,d0
    ef96:	|         add.l 20(sp),d0
    ef9a:	|         move.l d0,-(sp)
    ef9c:	|         jsr 11738 <trimStack>
    efa2:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    efa4:	|         move.l (sp),d0
    efa6:	|         move.l d0,-(sp)
    efa8:	|         jsr 6f46 <findPerson>
    efae:	|         addq.l #4,sp
    efb0:	|         move.l d0,8(sp)

	if (thisPerson) {
    efb4:	|  /----- beq.s efde <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    efb6:	|  |      move.l 4(sp),d0
    efba:	|  |      movea.l 8(sp),a0
    efbe:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    efc2:	|  |      moveq #28,d0
    efc4:	|  |      add.l 20(sp),d0
    efc8:	|  |      pea 1 <_start+0x1>
    efcc:	|  |      pea 1 <_start+0x1>
    efd0:	|  |      move.l d0,-(sp)
    efd2:	|  |      jsr 116a6 <setVariable>
    efd8:	|  |      lea 12(sp),sp
    efdc:	|  |  /-- bra.s eff6 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    efde:	|  \--|-> moveq #28,d0
    efe0:	|     |   add.l 20(sp),d0
    efe4:	|     |   clr.l -(sp)
    efe6:	|     |   pea 1 <_start+0x1>
    efea:	|     |   move.l d0,-(sp)
    efec:	|     |   jsr 116a6 <setVariable>
    eff2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    eff6:	|     \-> moveq #2,d0
}
    eff8:	\-------> lea 12(sp),sp
    effc:	          rts

0000effe <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    effe:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f002:	          movea.l 20(sp),a0
    f006:	          move.l 24(a0),d0
    f00a:	          move.l d0,-(sp)
    f00c:	          pea 1 <_start+0x1>
    f010:	          moveq #12,d0
    f012:	          add.l sp,d0
    f014:	          move.l d0,-(sp)
    f016:	          jsr 10db4 <getValueType>
    f01c:	          lea 12(sp),sp
    f020:	          tst.w d0
    f022:	      /-- bne.s f02a <builtIn_setCharacterAngleOffset+0x2c>
    f024:	      |   moveq #1,d0
    f026:	/-----|-- bra.w f0c4 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    f02a:	|     \-> moveq #24,d0
    f02c:	|         add.l 20(sp),d0
    f030:	|         move.l d0,-(sp)
    f032:	|         jsr 11738 <trimStack>
    f038:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f03a:	|         movea.l 20(sp),a0
    f03e:	|         move.l 24(a0),d0
    f042:	|         move.l d0,-(sp)
    f044:	|         pea 7 <_start+0x7>
    f048:	|         lea 8(sp),a0
    f04c:	|         move.l a0,-(sp)
    f04e:	|         jsr 10db4 <getValueType>
    f054:	|         lea 12(sp),sp
    f058:	|         tst.w d0
    f05a:	|     /-- bne.s f060 <builtIn_setCharacterAngleOffset+0x62>
    f05c:	|     |   moveq #1,d0
    f05e:	+-----|-- bra.s f0c4 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    f060:	|     \-> moveq #24,d0
    f062:	|         add.l 20(sp),d0
    f066:	|         move.l d0,-(sp)
    f068:	|         jsr 11738 <trimStack>
    f06e:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    f070:	|         move.l (sp),d0
    f072:	|         move.l d0,-(sp)
    f074:	|         jsr 6f46 <findPerson>
    f07a:	|         addq.l #4,sp
    f07c:	|         move.l d0,8(sp)

	if (thisPerson) {
    f080:	|  /----- beq.s f0aa <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
    f082:	|  |      move.l 4(sp),d0
    f086:	|  |      movea.l 8(sp),a0
    f08a:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    f08e:	|  |      moveq #28,d0
    f090:	|  |      add.l 20(sp),d0
    f094:	|  |      pea 1 <_start+0x1>
    f098:	|  |      pea 1 <_start+0x1>
    f09c:	|  |      move.l d0,-(sp)
    f09e:	|  |      jsr 116a6 <setVariable>
    f0a4:	|  |      lea 12(sp),sp
    f0a8:	|  |  /-- bra.s f0c2 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f0aa:	|  \--|-> moveq #28,d0
    f0ac:	|     |   add.l 20(sp),d0
    f0b0:	|     |   clr.l -(sp)
    f0b2:	|     |   pea 1 <_start+0x1>
    f0b6:	|     |   move.l d0,-(sp)
    f0b8:	|     |   jsr 116a6 <setVariable>
    f0be:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f0c2:	|     \-> moveq #2,d0
}
    f0c4:	\-------> lea 12(sp),sp
    f0c8:	          rts

0000f0ca <builtIn_transitionMode>:


builtIn(transitionMode)
{
    f0ca:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f0cc:	       movea.l 12(sp),a0
    f0d0:	       move.l 24(a0),d0
    f0d4:	       move.l d0,-(sp)
    f0d6:	       pea 1 <_start+0x1>
    f0da:	       move.l sp,d0
    f0dc:	       addq.l #8,d0
    f0de:	       move.l d0,-(sp)
    f0e0:	       jsr 10db4 <getValueType>
    f0e6:	       lea 12(sp),sp
    f0ea:	       tst.w d0
    f0ec:	   /-- bne.s f0f2 <builtIn_transitionMode+0x28>
    f0ee:	   |   moveq #1,d0
    f0f0:	/--|-- bra.s f128 <builtIn_transitionMode+0x5e>
	fadeMode = n;
    f0f2:	|  \-> move.l (sp),d0
    f0f4:	|      move.l d0,d0
    f0f6:	|      move.b d0,18686 <fadeMode>
	trimStack (&fun -> stack);
    f0fc:	|      moveq #24,d0
    f0fe:	|      add.l 12(sp),d0
    f102:	|      move.l d0,-(sp)
    f104:	|      jsr 11738 <trimStack>
    f10a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    f10c:	|      moveq #28,d0
    f10e:	|      add.l 12(sp),d0
    f112:	|      pea 1 <_start+0x1>
    f116:	|      pea 1 <_start+0x1>
    f11a:	|      move.l d0,-(sp)
    f11c:	|      jsr 116a6 <setVariable>
    f122:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f126:	|      moveq #2,d0
}
    f128:	\----> addq.l #4,sp
    f12a:	       rts

0000f12c <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f12c:	moveq #24,d0
    f12e:	add.l 8(sp),d0
    f132:	move.l d0,-(sp)
    f134:	jsr 11738 <trimStack>
    f13a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
    f13c:	moveq #28,d0
    f13e:	add.l 8(sp),d0
    f142:	pea 1 <_start+0x1>
    f146:	pea 1 <_start+0x1>
    f14a:	move.l d0,-(sp)
    f14c:	jsr 116a6 <setVariable>
    f152:	lea 12(sp),sp
	return BR_CONTINUE;
    f156:	moveq #2,d0
}
    f158:	rts

0000f15a <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
    f15a:	pea 16b78 <newfatal.c.307beca7+0xbc>
    f160:	jsr 12e08 <KPrintF>
    f166:	addq.l #4,sp
	return BR_CONTINUE;
    f168:	moveq #2,d0
}
    f16a:	rts

0000f16c <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
    f16c:	       lea -16(sp),sp
    f170:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
    f172:	       movea.l 28(sp),a0
    f176:	       move.l 24(a0),d0
    f17a:	       move.l d0,-(sp)
    f17c:	       jsr 1138a <getTextFromAnyVar>
    f182:	       addq.l #4,sp
    f184:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
    f188:	   /-- bne.s f190 <builtIn_saveCustomData+0x24>
    f18a:	   |   moveq #1,d0
    f18c:	/--|-- bra.w f242 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
    f190:	|  \-> move.l 16(sp),-(sp)
    f194:	|      jsr 2fe <encodeFilename>
    f19a:	|      addq.l #4,sp
    f19c:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
    f1a0:	|      move.l 16(sp),8(sp)
    f1a6:	|      move.l 19c5a <SysBase>,d0
    f1ac:	|      movea.l d0,a6
    f1ae:	|      movea.l 8(sp),a1
    f1b2:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
    f1b6:	|      move.l 12(sp),-(sp)
    f1ba:	|      jsr a9f2 <failSecurityCheck>
    f1c0:	|      addq.l #4,sp
    f1c2:	|      tst.w d0
    f1c4:	|  /-- beq.s f1ca <builtIn_saveCustomData+0x5e>
    f1c6:	|  |   moveq #1,d0
    f1c8:	+--|-- bra.s f242 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    f1ca:	|  \-> moveq #24,d0
    f1cc:	|      add.l 28(sp),d0
    f1d0:	|      move.l d0,-(sp)
    f1d2:	|      jsr 11738 <trimStack>
    f1d8:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
    f1da:	|      movea.l 28(sp),a0
    f1de:	|      movea.l 24(a0),a0
    f1e2:	|      move.l (a0),d0
    f1e4:	|      moveq #6,d1
    f1e6:	|      cmp.l d0,d1
    f1e8:	|  /-- beq.s f1fc <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
    f1ea:	|  |   pea 16ba5 <newfatal.c.307beca7+0xe9>
    f1f0:	|  |   jsr 12e08 <KPrintF>
    f1f6:	|  |   addq.l #4,sp
		return BR_ERROR;
    f1f8:	|  |   moveq #1,d0
    f1fa:	+--|-- bra.s f242 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
    f1fc:	|  \-> movea.l 28(sp),a0
    f200:	|      move.l 24(a0),d0
    f204:	|      move.l d0,-(sp)
    f206:	|      move.l 16(sp),-(sp)
    f20a:	|      jsr a642 <stackToFile>
    f210:	|      addq.l #8,sp
    f212:	|      tst.w d0
    f214:	|  /-- bne.s f21a <builtIn_saveCustomData+0xae>
    f216:	|  |   moveq #1,d0
    f218:	+--|-- bra.s f242 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    f21a:	|  \-> moveq #24,d0
    f21c:	|      add.l 28(sp),d0
    f220:	|      move.l d0,-(sp)
    f222:	|      jsr 11738 <trimStack>
    f228:	|      addq.l #4,sp
	FreeVec(fileName);
    f22a:	|      move.l 12(sp),4(sp)
    f230:	|      move.l 19c5a <SysBase>,d0
    f236:	|      movea.l d0,a6
    f238:	|      movea.l 4(sp),a1
    f23c:	|      jsr -690(a6)
	return BR_CONTINUE;
    f240:	|      moveq #2,d0
}
    f242:	\----> movea.l (sp)+,a6
    f244:	       lea 16(sp),sp
    f248:	       rts

0000f24a <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
    f24a:	       lea -28(sp),sp
    f24e:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    f250:	       movea.l 40(sp),a0
    f254:	       move.l 24(a0),d0
    f258:	       move.l d0,-(sp)
    f25a:	       jsr 1138a <getTextFromAnyVar>
    f260:	       addq.l #4,sp
    f262:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
    f266:	   /-- bne.s f26e <builtIn_loadCustomData+0x24>
    f268:	   |   moveq #1,d0
    f26a:	/--|-- bra.w f36a <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
    f26e:	|  \-> move.l 28(sp),-(sp)
    f272:	|      jsr 2fe <encodeFilename>
    f278:	|      addq.l #4,sp
    f27a:	|      move.l d0,24(sp)
	FreeVec(newTextA);
    f27e:	|      move.l 28(sp),20(sp)
    f284:	|      move.l 19c5a <SysBase>,d0
    f28a:	|      movea.l d0,a6
    f28c:	|      movea.l 20(sp),a1
    f290:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
    f294:	|      move.l 24(sp),-(sp)
    f298:	|      jsr a9f2 <failSecurityCheck>
    f29e:	|      addq.l #4,sp
    f2a0:	|      tst.w d0
    f2a2:	|  /-- beq.s f2aa <builtIn_loadCustomData+0x60>
    f2a4:	|  |   moveq #1,d0
    f2a6:	+--|-- bra.w f36a <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
    f2aa:	|  \-> moveq #24,d0
    f2ac:	|      add.l 40(sp),d0
    f2b0:	|      move.l d0,-(sp)
    f2b2:	|      jsr 11738 <trimStack>
    f2b8:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
    f2ba:	|      moveq #28,d0
    f2bc:	|      add.l 40(sp),d0
    f2c0:	|      move.l d0,-(sp)
    f2c2:	|      jsr 11002 <unlinkVar>
    f2c8:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
    f2ca:	|      movea.l 40(sp),a0
    f2ce:	|      moveq #6,d0
    f2d0:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f2d4:	|      moveq #12,d0
    f2d6:	|      move.l d0,16(sp)
    f2da:	|      clr.l 12(sp)
    f2de:	|      move.l 19c5a <SysBase>,d0
    f2e4:	|      movea.l d0,a6
    f2e6:	|      move.l 16(sp),d0
    f2ea:	|      move.l 12(sp),d1
    f2ee:	|      jsr -684(a6)
    f2f2:	|      move.l d0,8(sp)
    f2f6:	|      move.l 8(sp),d0
    f2fa:	|      movea.l 40(sp),a0
    f2fe:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
    f302:	|      movea.l 40(sp),a0
    f306:	|      move.l 32(a0),d0
    f30a:	|  /-- bne.s f310 <builtIn_loadCustomData+0xc6>
    f30c:	|  |   moveq #1,d0
    f30e:	+--|-- bra.s f36a <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
    f310:	|  \-> movea.l 40(sp),a0
    f314:	|      movea.l 32(a0),a0
    f318:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
    f31a:	|      movea.l 40(sp),a0
    f31e:	|      movea.l 32(a0),a0
    f322:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
    f326:	|      movea.l 40(sp),a0
    f32a:	|      movea.l 32(a0),a0
    f32e:	|      moveq #1,d0
    f330:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
    f334:	|      movea.l 40(sp),a0
    f338:	|      move.l 32(a0),d0
    f33c:	|      move.l d0,-(sp)
    f33e:	|      move.l 28(sp),-(sp)
    f342:	|      jsr a07c <fileToStack>
    f348:	|      addq.l #8,sp
    f34a:	|      tst.w d0
    f34c:	|  /-- bne.s f352 <builtIn_loadCustomData+0x108>
    f34e:	|  |   moveq #1,d0
    f350:	+--|-- bra.s f36a <builtIn_loadCustomData+0x120>
	FreeVec(newText);
    f352:	|  \-> move.l 24(sp),4(sp)
    f358:	|      move.l 19c5a <SysBase>,d0
    f35e:	|      movea.l d0,a6
    f360:	|      movea.l 4(sp),a1
    f364:	|      jsr -690(a6)
	return BR_CONTINUE;
    f368:	|      moveq #2,d0
}
    f36a:	\----> movea.l (sp)+,a6
    f36c:	       lea 28(sp),sp
    f370:	       rts

0000f372 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
    f372:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f374:	       movea.l 12(sp),a0
    f378:	       move.l 24(a0),d0
    f37c:	       move.l d0,-(sp)
    f37e:	       pea 1 <_start+0x1>
    f382:	       move.l sp,d0
    f384:	       addq.l #8,d0
    f386:	       move.l d0,-(sp)
    f388:	       jsr 10db4 <getValueType>
    f38e:	       lea 12(sp),sp
    f392:	       tst.w d0
    f394:	   /-- bne.s f39a <builtIn_setCustomEncoding+0x28>
    f396:	   |   moveq #1,d0
    f398:	/--|-- bra.s f3d0 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
    f39a:	|  \-> move.l (sp),d0
    f39c:	|      move.l d0,d0
    f39e:	|      move.w d0,19d12 <saveEncoding>
	trimStack (&fun -> stack);
    f3a4:	|      moveq #24,d0
    f3a6:	|      add.l 12(sp),d0
    f3aa:	|      move.l d0,-(sp)
    f3ac:	|      jsr 11738 <trimStack>
    f3b2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    f3b4:	|      moveq #28,d0
    f3b6:	|      add.l 12(sp),d0
    f3ba:	|      pea 1 <_start+0x1>
    f3be:	|      pea 1 <_start+0x1>
    f3c2:	|      move.l d0,-(sp)
    f3c4:	|      jsr 116a6 <setVariable>
    f3ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f3ce:	|      moveq #2,d0
}
    f3d0:	\----> addq.l #4,sp
    f3d2:	       rts

0000f3d4 <builtIn_freeSound>:

builtIn(freeSound)
{
    f3d4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f3d6:	       movea.l 12(sp),a0
    f3da:	       move.l 24(a0),d0
    f3de:	       move.l d0,-(sp)
    f3e0:	       pea 5 <_start+0x5>
    f3e4:	       move.l sp,d0
    f3e6:	       addq.l #8,d0
    f3e8:	       move.l d0,-(sp)
    f3ea:	       jsr 10db4 <getValueType>
    f3f0:	       lea 12(sp),sp
    f3f4:	       tst.w d0
    f3f6:	   /-- bne.s f3fc <builtIn_freeSound+0x28>
    f3f8:	   |   moveq #1,d0
    f3fa:	/--|-- bra.s f41a <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
    f3fc:	|  \-> moveq #24,d0
    f3fe:	|      add.l 12(sp),d0
    f402:	|      move.l d0,-(sp)
    f404:	|      jsr 11738 <trimStack>
    f40a:	|      addq.l #4,sp
	huntKillFreeSound (v);
    f40c:	|      move.l (sp),d0
    f40e:	|      move.l d0,-(sp)
    f410:	|      jsr 97e6 <huntKillFreeSound>
    f416:	|      addq.l #4,sp
	return BR_CONTINUE;
    f418:	|      moveq #2,d0
}
    f41a:	\----> addq.l #4,sp
    f41c:	       rts

0000f41e <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
    f41e:	       lea -12(sp),sp
    f422:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f424:	       movea.l 24(sp),a0
    f428:	       move.l 24(a0),d0
    f42c:	       move.l d0,-(sp)
    f42e:	       pea 1 <_start+0x1>
    f432:	       moveq #16,d0
    f434:	       add.l sp,d0
    f436:	       move.l d0,-(sp)
    f438:	       jsr 10db4 <getValueType>
    f43e:	       lea 12(sp),sp
    f442:	       tst.w d0
    f444:	   /-- bne.s f44c <builtIn_parallaxAdd+0x2e>
    f446:	   |   moveq #1,d0
    f448:	/--|-- bra.w f520 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f44c:	|  \-> moveq #24,d0
    f44e:	|      add.l 24(sp),d0
    f452:	|      move.l d0,-(sp)
    f454:	|      jsr 11738 <trimStack>
    f45a:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f45c:	|      movea.l 24(sp),a0
    f460:	|      move.l 24(a0),d0
    f464:	|      move.l d0,-(sp)
    f466:	|      pea 1 <_start+0x1>
    f46a:	|      moveq #20,d0
    f46c:	|      add.l sp,d0
    f46e:	|      move.l d0,-(sp)
    f470:	|      jsr 10db4 <getValueType>
    f476:	|      lea 12(sp),sp
    f47a:	|      tst.w d0
    f47c:	|  /-- bne.s f484 <builtIn_parallaxAdd+0x66>
    f47e:	|  |   moveq #1,d0
    f480:	+--|-- bra.w f520 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f484:	|  \-> moveq #24,d0
    f486:	|      add.l 24(sp),d0
    f48a:	|      move.l d0,-(sp)
    f48c:	|      jsr 11738 <trimStack>
    f492:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f494:	|      movea.l 24(sp),a0
    f498:	|      move.l 24(a0),d0
    f49c:	|      move.l d0,-(sp)
    f49e:	|      pea 5 <_start+0x5>
    f4a2:	|      lea 12(sp),a0
    f4a6:	|      move.l a0,-(sp)
    f4a8:	|      jsr 10db4 <getValueType>
    f4ae:	|      lea 12(sp),sp
    f4b2:	|      tst.w d0
    f4b4:	|  /-- bne.s f4ba <builtIn_parallaxAdd+0x9c>
    f4b6:	|  |   moveq #1,d0
    f4b8:	+--|-- bra.s f520 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f4ba:	|  \-> moveq #24,d0
    f4bc:	|      add.l 24(sp),d0
    f4c0:	|      move.l d0,-(sp)
    f4c2:	|      jsr 11738 <trimStack>
    f4c8:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
    f4ca:	|      move.l 8(sp),d0
    f4ce:	|      move.l d0,d0
    f4d0:	|      moveq #0,d2
    f4d2:	|      move.w d0,d2
    f4d4:	|      move.l 12(sp),d0
    f4d8:	|      move.l d0,d0
    f4da:	|      moveq #0,d1
    f4dc:	|      move.w d0,d1
    f4de:	|      move.l 4(sp),d0
    f4e2:	|      move.l d0,d0
    f4e4:	|      move.w d0,d0
    f4e6:	|      andi.l #65535,d0
    f4ec:	|      move.l d2,-(sp)
    f4ee:	|      move.l d1,-(sp)
    f4f0:	|      move.l d0,-(sp)
    f4f2:	|      jsr 9a02 <loadParallax>
    f4f8:	|      lea 12(sp),sp
    f4fc:	|      tst.w d0
    f4fe:	|  /-- bne.s f504 <builtIn_parallaxAdd+0xe6>
    f500:	|  |   moveq #1,d0
    f502:	+--|-- bra.s f520 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
    f504:	|  \-> moveq #28,d0
    f506:	|      add.l 24(sp),d0
    f50a:	|      pea 1 <_start+0x1>
    f50e:	|      pea 1 <_start+0x1>
    f512:	|      move.l d0,-(sp)
    f514:	|      jsr 116a6 <setVariable>
    f51a:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
    f51e:	|      moveq #2,d0
}
    f520:	\----> move.l (sp)+,d2
    f522:	       lea 12(sp),sp
    f526:	       rts

0000f528 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
    f528:	jsr 993a <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
    f52e:	moveq #28,d0
    f530:	add.l 8(sp),d0
    f534:	pea 1 <_start+0x1>
    f538:	pea 1 <_start+0x1>
    f53c:	move.l d0,-(sp)
    f53e:	jsr 116a6 <setVariable>
    f544:	lea 12(sp),sp
	return BR_CONTINUE;
    f548:	moveq #2,d0
}
    f54a:	rts

0000f54c <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
    f54c:	pea 16bc3 <newfatal.c.307beca7+0x107>
    f552:	jsr 12e08 <KPrintF>
    f558:	addq.l #4,sp

	return BR_CONTINUE;
    f55a:	moveq #2,d0
}
    f55c:	rts

0000f55e <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
    f55e:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f560:	             movea.l 16(sp),a0
    f564:	             movea.l 24(a0),a0
    f568:	             move.l (a0),d0
    f56a:	             moveq #1,d1
    f56c:	             cmp.l d0,d1
    f56e:	      /----- beq.s f5b6 <builtIn_makeFastArray+0x58>
    f570:	      |      moveq #6,d1
    f572:	      |      cmp.l d0,d1
    f574:	/-----|----- bne.s f5f4 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
    f576:	|     |      movea.l 16(sp),a0
    f57a:	|     |      movea.l 24(a0),a0
    f57e:	|     |      move.l 4(a0),d1
    f582:	|     |      moveq #28,d0
    f584:	|     |      add.l 16(sp),d0
    f588:	|     |      move.l d1,-(sp)
    f58a:	|     |      move.l d0,-(sp)
    f58c:	|     |      jsr 10e66 <makeFastArrayFromStack>
    f592:	|     |      addq.l #8,sp
    f594:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
    f598:	|     |      moveq #24,d0
    f59a:	|     |      add.l 16(sp),d0
    f59e:	|     |      move.l d0,-(sp)
    f5a0:	|     |      jsr 11738 <trimStack>
    f5a6:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
    f5a8:	|     |      tst.w 6(sp)
    f5ac:	|     |  /-- beq.s f5b2 <builtIn_makeFastArray+0x54>
    f5ae:	|     |  |   moveq #2,d0
    f5b0:	|  /--|--|-- bra.s f606 <builtIn_makeFastArray+0xa8>
    f5b2:	|  |  |  \-> moveq #1,d0
    f5b4:	|  +--|----- bra.s f606 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
    f5b6:	|  |  \----> movea.l 16(sp),a0
    f5ba:	|  |         movea.l 24(a0),a0
    f5be:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
    f5c4:	|  |         moveq #24,d0
    f5c6:	|  |         add.l 16(sp),d0
    f5ca:	|  |         move.l d0,-(sp)
    f5cc:	|  |         jsr 11738 <trimStack>
    f5d2:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
    f5d4:	|  |         moveq #28,d0
    f5d6:	|  |         add.l 16(sp),d0
    f5da:	|  |         move.l 2(sp),-(sp)
    f5de:	|  |         move.l d0,-(sp)
    f5e0:	|  |         jsr 10ed0 <makeFastArraySize>
    f5e6:	|  |         addq.l #8,sp
    f5e8:	|  |         tst.w d0
    f5ea:	|  |     /-- beq.s f5f0 <builtIn_makeFastArray+0x92>
    f5ec:	|  |     |   moveq #2,d0
    f5ee:	|  +-----|-- bra.s f606 <builtIn_makeFastArray+0xa8>
    f5f0:	|  |     \-> moveq #1,d0
    f5f2:	|  +-------- bra.s f606 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
    f5f4:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
    f5f6:	   |         pea 16bec <newfatal.c.307beca7+0x130>
    f5fc:	   |         jsr 12e08 <KPrintF>
    f602:	   |         addq.l #4,sp
	return BR_ERROR;
    f604:	   |         moveq #1,d0
}
    f606:	   \-------> addq.l #8,sp
    f608:	             rts

0000f60a <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
    f60a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f60c:	          movea.l 16(sp),a0
    f610:	          move.l 24(a0),d0
    f614:	          move.l d0,-(sp)
    f616:	          pea 7 <_start+0x7>
    f61a:	          move.l sp,d0
    f61c:	          addq.l #8,d0
    f61e:	          move.l d0,-(sp)
    f620:	          jsr 10db4 <getValueType>
    f626:	          lea 12(sp),sp
    f62a:	          tst.w d0
    f62c:	      /-- bne.s f632 <builtIn_getCharacterScale+0x28>
    f62e:	      |   moveq #1,d0
    f630:	/-----|-- bra.s f6ac <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
    f632:	|     \-> moveq #24,d0
    f634:	|         add.l 16(sp),d0
    f638:	|         move.l d0,-(sp)
    f63a:	|         jsr 11738 <trimStack>
    f640:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    f642:	|         move.l (sp),d0
    f644:	|         move.l d0,-(sp)
    f646:	|         jsr 6f46 <findPerson>
    f64c:	|         addq.l #4,sp
    f64e:	|         move.l d0,4(sp)
	if (pers) {
    f652:	|  /----- beq.s f692 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
    f654:	|  |      movea.l 4(sp),a0
    f658:	|  |      move.l 20(a0),d0
    f65c:	|  |      move.l #1120403456,-(sp)
    f662:	|  |      move.l d0,-(sp)
    f664:	|  |      jsr 13456 <__mulsf3>
    f66a:	|  |      addq.l #8,sp
    f66c:	|  |      move.l d0,-(sp)
    f66e:	|  |      jsr 1333c <__fixsfsi>
    f674:	|  |      addq.l #4,sp
    f676:	|  |      move.l d0,d1
    f678:	|  |      moveq #28,d0
    f67a:	|  |      add.l 16(sp),d0
    f67e:	|  |      move.l d1,-(sp)
    f680:	|  |      pea 1 <_start+0x1>
    f684:	|  |      move.l d0,-(sp)
    f686:	|  |      jsr 116a6 <setVariable>
    f68c:	|  |      lea 12(sp),sp
    f690:	|  |  /-- bra.s f6aa <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f692:	|  \--|-> moveq #28,d0
    f694:	|     |   add.l 16(sp),d0
    f698:	|     |   clr.l -(sp)
    f69a:	|     |   pea 1 <_start+0x1>
    f69e:	|     |   move.l d0,-(sp)
    f6a0:	|     |   jsr 116a6 <setVariable>
    f6a6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f6aa:	|     \-> moveq #2,d0
}
    f6ac:	\-------> addq.l #8,sp
    f6ae:	          rts

0000f6b0 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
    f6b0:	move.l 19d36 <gameSettings>,d0
    f6b6:	move.l d0,d1
    f6b8:	moveq #28,d0
    f6ba:	add.l 8(sp),d0
    f6be:	move.l d1,-(sp)
    f6c0:	pea 1 <_start+0x1>
    f6c4:	move.l d0,-(sp)
    f6c6:	jsr 116a6 <setVariable>
    f6cc:	lea 12(sp),sp
	return BR_CONTINUE;
    f6d0:	moveq #2,d0
}
    f6d2:	rts

0000f6d4 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    f6d4:	moveq #24,d0
    f6d6:	add.l 8(sp),d0
    f6da:	move.l d0,-(sp)
    f6dc:	jsr 11738 <trimStack>
    f6e2:	addq.l #4,sp
	trimStack (&fun -> stack);
    f6e4:	moveq #24,d0
    f6e6:	add.l 8(sp),d0
    f6ea:	move.l d0,-(sp)
    f6ec:	jsr 11738 <trimStack>
    f6f2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
    f6f4:	moveq #28,d0
    f6f6:	add.l 8(sp),d0
    f6fa:	clr.l -(sp)
    f6fc:	pea 1 <_start+0x1>
    f700:	move.l d0,-(sp)
    f702:	jsr 116a6 <setVariable>
    f708:	lea 12(sp),sp

	return BR_CONTINUE;
    f70c:	moveq #2,d0

}
    f70e:	rts

0000f710 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
    f710:	move.l 18124 <lastFramesPerSecond>,d1
    f716:	moveq #28,d0
    f718:	add.l 8(sp),d0
    f71c:	move.l d1,-(sp)
    f71e:	pea 1 <_start+0x1>
    f722:	move.l d0,-(sp)
    f724:	jsr 116a6 <setVariable>
    f72a:	lea 12(sp),sp
	return BR_CONTINUE;
    f72e:	moveq #2,d0
}
    f730:	rts

0000f732 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
    f732:	moveq #2,d0
}
    f734:	rts

0000f736 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
    f736:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f73a:	          movea.l 60(sp),a0
    f73e:	          move.l 24(a0),d0
    f742:	          move.l d0,-(sp)
    f744:	          pea 1 <_start+0x1>
    f748:	          pea 19b3c <thumbHeight>
    f74e:	          jsr 10db4 <getValueType>
    f754:	          lea 12(sp),sp
    f758:	          tst.w d0
    f75a:	      /-- bne.s f762 <builtIn_setThumbnailSize+0x2c>
    f75c:	      |   moveq #1,d0
    f75e:	/-----|-- bra.w f81e <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f762:	|     \-> moveq #24,d0
    f764:	|         add.l 60(sp),d0
    f768:	|         move.l d0,-(sp)
    f76a:	|         jsr 11738 <trimStack>
    f770:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f772:	|         movea.l 60(sp),a0
    f776:	|         move.l 24(a0),d0
    f77a:	|         move.l d0,-(sp)
    f77c:	|         pea 1 <_start+0x1>
    f780:	|         pea 19b38 <thumbWidth>
    f786:	|         jsr 10db4 <getValueType>
    f78c:	|         lea 12(sp),sp
    f790:	|         tst.w d0
    f792:	|     /-- bne.s f79a <builtIn_setThumbnailSize+0x64>
    f794:	|     |   moveq #1,d0
    f796:	+-----|-- bra.w f81e <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f79a:	|     \-> moveq #24,d0
    f79c:	|         add.l 60(sp),d0
    f7a0:	|         move.l d0,-(sp)
    f7a2:	|         jsr 11738 <trimStack>
    f7a8:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
    f7aa:	|         move.l 19b38 <thumbWidth>,d0
    f7b0:	|     /-- bmi.s f7de <builtIn_setThumbnailSize+0xa8>
    f7b2:	|     |   move.l 19b3c <thumbHeight>,d0
    f7b8:	|     +-- bmi.s f7de <builtIn_setThumbnailSize+0xa8>
    f7ba:	|     |   move.l 19b38 <thumbWidth>,d0
    f7c0:	|     |   move.l d0,d1
    f7c2:	|     |   move.l 19b5a <winWidth>,d0
    f7c8:	|     |   cmp.l d1,d0
    f7ca:	|     +-- bcs.s f7de <builtIn_setThumbnailSize+0xa8>
    f7cc:	|     |   move.l 19b3c <thumbHeight>,d0
    f7d2:	|     |   move.l d0,d1
    f7d4:	|     |   move.l 19b5e <winHeight>,d0
    f7da:	|     |   cmp.l d1,d0
    f7dc:	|  /--|-- bcc.s f81c <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
    f7de:	|  |  \-> move.l 19b3c <thumbHeight>,d1
    f7e4:	|  |      move.l 19b38 <thumbWidth>,d0
    f7ea:	|  |      move.l d1,-(sp)
    f7ec:	|  |      move.l d0,-(sp)
    f7ee:	|  |      pea 16c13 <newfatal.c.307beca7+0x157>
    f7f4:	|  |      lea 14(sp),a0
    f7f8:	|  |      move.l a0,-(sp)
    f7fa:	|  |      jsr 105be <sprintf>
    f800:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
    f804:	|  |      lea 2(sp),a0
    f808:	|  |      move.l a0,-(sp)
    f80a:	|  |      pea 16c1b <newfatal.c.307beca7+0x15f>
    f810:	|  |      jsr 12e08 <KPrintF>
    f816:	|  |      addq.l #8,sp
		return BR_ERROR;
    f818:	|  |      moveq #1,d0
    f81a:	+--|----- bra.s f81e <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
    f81c:	|  \----> moveq #2,d0
}
    f81e:	\-------> lea 52(sp),sp
    f822:	          rts

0000f824 <builtIn_hasFlag>:

builtIn(hasFlag)
{
    f824:	       lea -12(sp),sp
    f828:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f82a:	       movea.l 24(sp),a0
    f82e:	       move.l 24(a0),d0
    f832:	       move.l d0,-(sp)
    f834:	       pea 1 <_start+0x1>
    f838:	       lea 12(sp),a0
    f83c:	       move.l a0,-(sp)
    f83e:	       jsr 10db4 <getValueType>
    f844:	       lea 12(sp),sp
    f848:	       tst.w d0
    f84a:	   /-- bne.s f852 <builtIn_hasFlag+0x2e>
    f84c:	   |   moveq #1,d0
    f84e:	/--|-- bra.w f8e2 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    f852:	|  \-> moveq #24,d0
    f854:	|      add.l 24(sp),d0
    f858:	|      move.l d0,-(sp)
    f85a:	|      jsr 11738 <trimStack>
    f860:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f862:	|      movea.l 24(sp),a0
    f866:	|      move.l 24(a0),d0
    f86a:	|      move.l d0,-(sp)
    f86c:	|      pea 7 <_start+0x7>
    f870:	|      moveq #16,d0
    f872:	|      add.l sp,d0
    f874:	|      move.l d0,-(sp)
    f876:	|      jsr 10db4 <getValueType>
    f87c:	|      lea 12(sp),sp
    f880:	|      tst.w d0
    f882:	|  /-- bne.s f888 <builtIn_hasFlag+0x64>
    f884:	|  |   moveq #1,d0
    f886:	+--|-- bra.s f8e2 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    f888:	|  \-> moveq #24,d0
    f88a:	|      add.l 24(sp),d0
    f88e:	|      move.l d0,-(sp)
    f890:	|      jsr 11738 <trimStack>
    f896:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
    f898:	|      move.l 8(sp),d0
    f89c:	|      move.l d0,-(sp)
    f89e:	|      jsr 9c06 <findObjectType>
    f8a4:	|      addq.l #4,sp
    f8a6:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
    f8aa:	|  /-- bne.s f8b0 <builtIn_hasFlag+0x8c>
    f8ac:	|  |   moveq #1,d0
    f8ae:	+--|-- bra.s f8e2 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
    f8b0:	|  \-> movea.l 12(sp),a0
    f8b4:	|      move.w 36(a0),d0
    f8b8:	|      moveq #0,d2
    f8ba:	|      move.w d0,d2
    f8bc:	|      move.l 4(sp),d1
    f8c0:	|      moveq #1,d0
    f8c2:	|      lsl.l d1,d0
    f8c4:	|      move.l d2,d1
    f8c6:	|      and.l d0,d1
    f8c8:	|      moveq #28,d0
    f8ca:	|      add.l 24(sp),d0
    f8ce:	|      move.l d1,-(sp)
    f8d0:	|      pea 1 <_start+0x1>
    f8d4:	|      move.l d0,-(sp)
    f8d6:	|      jsr 116a6 <setVariable>
    f8dc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f8e0:	|      moveq #2,d0
}
    f8e2:	\----> move.l (sp)+,d2
    f8e4:	       lea 12(sp),sp
    f8e8:	       rts

0000f8ea <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
    f8ea:	       jsr 9bf4 <snapshot>
    f8f0:	       tst.w d0
    f8f2:	/----- beq.s f8f8 <builtIn_snapshotGrab+0xe>
    f8f4:	|      moveq #2,d0
    f8f6:	|  /-- bra.s f8fa <builtIn_snapshotGrab+0x10>
    f8f8:	\--|-> moveq #1,d0
}
    f8fa:	   \-> rts

0000f8fc <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
    f8fc:	jsr 9a48 <nosnapshot>
	return BR_CONTINUE;
    f902:	moveq #2,d0
}
    f904:	rts

0000f906 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
    f906:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
    f908:	move.w 18000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
    f910:	movea.l 12(sp),a0
    f914:	move.l 24(a0),d0
    f918:	move.l d0,-(sp)
    f91a:	jsr 112f4 <getBoolean>
    f920:	addq.l #4,sp
    f922:	move.w d0,18000 <allowAnyFilename>
	trimStack (&fun -> stack);
    f928:	moveq #24,d0
    f92a:	add.l 12(sp),d0
    f92e:	move.l d0,-(sp)
    f930:	jsr 11738 <trimStack>
    f936:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
    f938:	movea.w 2(sp),a0
    f93c:	moveq #28,d0
    f93e:	add.l 12(sp),d0
    f942:	move.l a0,-(sp)
    f944:	pea 1 <_start+0x1>
    f948:	move.l d0,-(sp)
    f94a:	jsr 116a6 <setVariable>
    f950:	lea 12(sp),sp
	return BR_CONTINUE;
    f954:	moveq #2,d0
}
    f956:	addq.l #4,sp
    f958:	rts

0000f95a <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f95a:	moveq #24,d0
    f95c:	add.l 8(sp),d0
    f960:	move.l d0,-(sp)
    f962:	jsr 11738 <trimStack>
    f968:	addq.l #4,sp
	trimStack (&fun -> stack);
    f96a:	moveq #24,d0
    f96c:	add.l 8(sp),d0
    f970:	move.l d0,-(sp)
    f972:	jsr 11738 <trimStack>
    f978:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
    f97a:	moveq #28,d0
    f97c:	add.l 8(sp),d0
    f980:	clr.l -(sp)
    f982:	pea 1 <_start+0x1>
    f986:	move.l d0,-(sp)
    f988:	jsr 116a6 <setVariable>
    f98e:	lea 12(sp),sp

	return BR_CONTINUE;
    f992:	moveq #2,d0
}
    f994:	rts

0000f996 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
    f996:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
    f998:	movea.l 12(sp),a0
    f99c:	move.l 24(a0),d0
    f9a0:	move.l d0,-(sp)
    f9a2:	jsr 1138a <getTextFromAnyVar>
    f9a8:	addq.l #4,sp
    f9aa:	move.l d0,(sp)
	trimStack (&fun -> stack);
    f9ac:	moveq #24,d0
    f9ae:	add.l 12(sp),d0
    f9b2:	move.l d0,-(sp)
    f9b4:	jsr 11738 <trimStack>
    f9ba:	addq.l #4,sp
	KPrintF (mess);
    f9bc:	move.l (sp),-(sp)
    f9be:	jsr 12e08 <KPrintF>
    f9c4:	addq.l #4,sp
	return BR_ERROR;
    f9c6:	moveq #1,d0
}
    f9c8:	addq.l #4,sp
    f9ca:	rts

0000f9cc <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    f9cc:	moveq #24,d0
    f9ce:	add.l 8(sp),d0
    f9d2:	move.l d0,-(sp)
    f9d4:	jsr 11738 <trimStack>
    f9da:	addq.l #4,sp
	trimStack (&fun -> stack);
    f9dc:	moveq #24,d0
    f9de:	add.l 8(sp),d0
    f9e2:	move.l d0,-(sp)
    f9e4:	jsr 11738 <trimStack>
    f9ea:	addq.l #4,sp
	trimStack (&fun -> stack);
    f9ec:	moveq #24,d0
    f9ee:	add.l 8(sp),d0
    f9f2:	move.l d0,-(sp)
    f9f4:	jsr 11738 <trimStack>
    f9fa:	addq.l #4,sp
	trimStack (&fun -> stack);
    f9fc:	moveq #24,d0
    f9fe:	add.l 8(sp),d0
    fa02:	move.l d0,-(sp)
    fa04:	jsr 11738 <trimStack>
    fa0a:	addq.l #4,sp

	return BR_CONTINUE;
    fa0c:	moveq #2,d0
}
    fa0e:	rts

0000fa10 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    fa10:	moveq #24,d0
    fa12:	add.l 8(sp),d0
    fa16:	move.l d0,-(sp)
    fa18:	jsr 11738 <trimStack>
    fa1e:	addq.l #4,sp
	trimStack (&fun -> stack);
    fa20:	moveq #24,d0
    fa22:	add.l 8(sp),d0
    fa26:	move.l d0,-(sp)
    fa28:	jsr 11738 <trimStack>
    fa2e:	addq.l #4,sp
	trimStack (&fun -> stack);
    fa30:	moveq #24,d0
    fa32:	add.l 8(sp),d0
    fa36:	move.l d0,-(sp)
    fa38:	jsr 11738 <trimStack>
    fa3e:	addq.l #4,sp

	return BR_CONTINUE;
    fa40:	moveq #2,d0

}
    fa42:	rts

0000fa44 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
    fa44:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
    fa46:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    fa4c:	sne d0
    fa4e:	neg.b d0
    fa50:	moveq #0,d1
    fa52:	move.b d0,d1
    fa54:	moveq #28,d0
    fa56:	add.l 12(sp),d0
    fa5a:	move.l d1,-(sp)
    fa5c:	pea 1 <_start+0x1>
    fa60:	move.l d0,-(sp)
    fa62:	jsr 116a6 <setVariable>
    fa68:	lea 12(sp),sp
	return BR_CONTINUE;
    fa6c:	moveq #2,d0
}
    fa6e:	addq.l #4,sp
    fa70:	rts

0000fa72 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
    fa72:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
    fa74:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
    fa7a:	pea 16c32 <newfatal.c.307beca7+0x176>
    fa80:	jsr 12e08 <KPrintF>
    fa86:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    fa88:	tst.w 2(sp)
    fa8c:	sne d0
    fa8e:	neg.b d0
    fa90:	moveq #0,d1
    fa92:	move.b d0,d1
    fa94:	moveq #28,d0
    fa96:	add.l 12(sp),d0
    fa9a:	move.l d1,-(sp)
    fa9c:	pea 1 <_start+0x1>
    faa0:	move.l d0,-(sp)
    faa2:	jsr 116a6 <setVariable>
    faa8:	lea 12(sp),sp
	return BR_CONTINUE;
    faac:	moveq #2,d0
}
    faae:	addq.l #4,sp
    fab0:	rts

0000fab2 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
    fab2:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
    fab6:	             move.l 104(sp),d0
    faba:	             cmpi.l #166,d0
    fac0:	/----------- bhi.w fba2 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
    fac4:	|            move.l 104(sp),d0
    fac8:	|            add.l d0,d0
    faca:	|            movea.l d0,a1
    facc:	|            adda.l d0,a1
    face:	|            lea 1814e <paramNum>,a0
    fad4:	|            move.l (0,a1,a0.l),d0
    fad8:	|            moveq #-1,d1
    fada:	|            cmp.l d0,d1
    fadc:	|  /-------- beq.w fb6a <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
    fae0:	|  |         move.l 104(sp),d0
    fae4:	|  |         add.l d0,d0
    fae6:	|  |         movea.l d0,a1
    fae8:	|  |         adda.l d0,a1
    faea:	|  |         lea 1814e <paramNum>,a0
    faf0:	|  |         move.l (0,a1,a0.l),d0
    faf4:	|  |         cmp.l 108(sp),d0
    faf8:	|  +-------- beq.s fb6a <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
    fafa:	|  |         move.l 104(sp),d0
    fafe:	|  |         add.l d0,d0
    fb00:	|  |         movea.l d0,a1
    fb02:	|  |         adda.l d0,a1
    fb04:	|  |         lea 1814e <paramNum>,a0
    fb0a:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
    fb0e:	|  |         moveq #1,d1
    fb10:	|  |         cmp.l d0,d1
    fb12:	|  |  /----- bne.s fb1c <callBuiltIn+0x6a>
    fb14:	|  |  |      move.l #82515,d0
    fb1a:	|  |  |  /-- bra.s fb22 <callBuiltIn+0x70>
    fb1c:	|  |  \--|-> move.l #93288,d0
    fb22:	|  |     \-> move.l 104(sp),d1
    fb26:	|  |         add.l d1,d1
    fb28:	|  |         movea.l d1,a1
    fb2a:	|  |         adda.l d1,a1
    fb2c:	|  |         lea 1814e <paramNum>,a0
    fb32:	|  |         move.l (0,a1,a0.l),d1
    fb36:	|  |         move.l d0,-(sp)
    fb38:	|  |         move.l d1,-(sp)
    fb3a:	|  |         pea 16c6a <newfatal.c.307beca7+0x1ae>
    fb40:	|  |         lea 12(sp),a0
    fb44:	|  |         move.l a0,-(sp)
    fb46:	|  |         jsr 105be <sprintf>
    fb4c:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
    fb50:	|  |         movea.l sp,a0
    fb52:	|  |         move.l a0,-(sp)
    fb54:	|  |         jsr b8 <copyString>
    fb5a:	|  |         addq.l #4,sp
    fb5c:	|  |         move.l d0,-(sp)
    fb5e:	|  |         jsr 12e08 <KPrintF>
    fb64:	|  |         addq.l #4,sp
				return BR_ERROR;
    fb66:	|  |         moveq #1,d0
    fb68:	|  |     /-- bra.s fbb2 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
    fb6a:	|  \-----|-> move.l 104(sp),d0
    fb6e:	|        |   add.l d0,d0
    fb70:	|        |   movea.l d0,a1
    fb72:	|        |   adda.l d0,a1
    fb74:	|        |   lea 183ea <builtInFunctionArray>,a0
    fb7a:	|        |   move.l (0,a1,a0.l),d0
    fb7e:	+--------|-- beq.s fba2 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
    fb80:	|        |   move.l 104(sp),d0
    fb84:	|        |   add.l d0,d0
    fb86:	|        |   movea.l d0,a1
    fb88:	|        |   adda.l d0,a1
    fb8a:	|        |   lea 183ea <builtInFunctionArray>,a0
    fb90:	|        |   movea.l (0,a1,a0.l),a0
    fb94:	|        |   move.l 112(sp),-(sp)
    fb98:	|        |   move.l 112(sp),-(sp)
    fb9c:	|        |   jsr (a0)
    fb9e:	|        |   addq.l #8,sp
    fba0:	|        +-- bra.s fbb2 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
    fba2:	\--------|-> pea 16c95 <newfatal.c.307beca7+0x1d9>
    fba8:	         |   jsr 12e08 <KPrintF>
    fbae:	         |   addq.l #4,sp
	return BR_ERROR;
    fbb0:	         |   moveq #1,d0
}
    fbb2:	         \-> lea 100(sp),sp
    fbb6:	             rts

0000fbb8 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
    fbb8:	          subq.l #8,sp
	int indexNum = -1;
    fbba:	          moveq #-1,d0
    fbbc:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fbc0:	          clr.l (sp)
    fbc2:	   /----- bra.s fbe8 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
    fbc4:	/--|----> move.l 19d2e <languageTable>,d1
    fbca:	|  |      move.l (sp),d0
    fbcc:	|  |      add.l d0,d0
    fbce:	|  |      add.l d0,d0
    fbd0:	|  |      movea.l d1,a0
    fbd2:	|  |      adda.l d0,a0
    fbd4:	|  |      move.l (a0),d0
    fbd6:	|  |      move.l d0,d1
    fbd8:	|  |      move.l 19d36 <gameSettings>,d0
    fbde:	|  |      cmp.l d1,d0
    fbe0:	|  |  /-- bne.s fbe6 <getLanguageForFileB+0x2e>
    fbe2:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fbe6:	|  |  \-> addq.l #1,(sp)
    fbe8:	|  \----> move.l 19d3a <gameSettings+0x4>,d0
    fbee:	|         cmp.l (sp),d0
    fbf0:	\-------- bcc.s fbc4 <getLanguageForFileB+0xc>
	}

	return indexNum;
    fbf2:	          move.l 4(sp),d0
}
    fbf6:	          addq.l #8,sp
    fbf8:	          rts

0000fbfa <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
    fbfa:	          lea -20(sp),sp
    fbfe:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
    fc00:	          move.l 28(sp),-(sp)
    fc04:	          jsr 102a0 <strlen>
    fc0a:	          addq.l #4,sp
    fc0c:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
    fc10:	          moveq #4,d0
    fc12:	          cmp.l 12(sp),d0
    fc16:	      /-- bge.s fc3a <getPrefsFilename+0x40>
    fc18:	      |   move.l 12(sp),d0
    fc1c:	      |   subq.l #4,d0
    fc1e:	      |   movea.l 28(sp),a0
    fc22:	      |   adda.l d0,a0
    fc24:	      |   move.b (a0),d0
    fc26:	      |   cmpi.b #46,d0
    fc2a:	      +-- bne.s fc3a <getPrefsFilename+0x40>
		filename[n-4] = 0;
    fc2c:	      |   move.l 12(sp),d0
    fc30:	      |   subq.l #4,d0
    fc32:	      |   movea.l 28(sp),a0
    fc36:	      |   adda.l d0,a0
    fc38:	      |   clr.b (a0)
	}

	char * f = filename;
    fc3a:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
    fc40:	          clr.l 20(sp)
    fc44:	   /----- bra.s fc6c <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
    fc46:	/--|----> move.l 20(sp),d0
    fc4a:	|  |      movea.l 28(sp),a0
    fc4e:	|  |      adda.l d0,a0
    fc50:	|  |      move.b (a0),d0
    fc52:	|  |      cmpi.b #47,d0
    fc56:	|  |  /-- bne.s fc68 <getPrefsFilename+0x6e>
    fc58:	|  |  |   move.l 20(sp),d0
    fc5c:	|  |  |   addq.l #1,d0
    fc5e:	|  |  |   move.l 28(sp),d1
    fc62:	|  |  |   add.l d0,d1
    fc64:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
    fc68:	|  |  \-> addq.l #1,20(sp)
    fc6c:	|  \----> move.l 20(sp),d0
    fc70:	|         cmp.l 12(sp),d0
    fc74:	\-------- blt.s fc46 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
    fc76:	          pea 16cc0 <main_sludge.c.828d7d86+0x6>
    fc7c:	          move.l 20(sp),-(sp)
    fc80:	          jsr 102e0 <joinStrings>
    fc86:	          addq.l #8,sp
    fc88:	          move.l d0,8(sp)

	FreeVec(filename);
    fc8c:	          move.l 28(sp),4(sp)
    fc92:	          move.l 19c5a <SysBase>,d0
    fc98:	          movea.l d0,a6
    fc9a:	          movea.l 4(sp),a1
    fc9e:	          jsr -690(a6)
	filename = NULL;
    fca2:	          clr.l 28(sp)
	return joined;
    fca6:	          move.l 8(sp),d0
}
    fcaa:	          movea.l (sp)+,a6
    fcac:	          lea 20(sp),sp
    fcb0:	          rts

0000fcb2 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
    fcb2:	             lea -28(sp),sp
    fcb6:	             move.l a6,-(sp)
    fcb8:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    fcba:	             move.l 19d3a <gameSettings+0x4>,d0
    fcc0:	             move.l d0,d1
    fcc2:	             addq.l #1,d1
    fcc4:	             move.l d1,28(sp)
    fcc8:	             clr.l 24(sp)
    fccc:	             move.l 19c5a <SysBase>,d0
    fcd2:	             movea.l d0,a6
    fcd4:	             move.l 28(sp),d0
    fcd8:	             move.l 24(sp),d1
    fcdc:	             jsr -684(a6)
    fce0:	             move.l d0,20(sp)
    fce4:	             move.l 20(sp),d0
    fce8:	             move.l d0,19d2e <languageTable>
    if( languageTable == 0) {
    fcee:	             move.l 19d2e <languageTable>,d0
    fcf4:	         /-- bne.s fd04 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
    fcf6:	         |   pea 16cc5 <main_sludge.c.828d7d86+0xb>
    fcfc:	         |   jsr 12e08 <KPrintF>
    fd02:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    fd04:	         \-> move.l 19d3a <gameSettings+0x4>,d0
    fd0a:	             move.l d0,d1
    fd0c:	             addq.l #1,d1
    fd0e:	             move.l d1,16(sp)
    fd12:	             clr.l 12(sp)
    fd16:	             move.l 19c5a <SysBase>,d0
    fd1c:	             movea.l d0,a6
    fd1e:	             move.l 16(sp),d0
    fd22:	             move.l 12(sp),d1
    fd26:	             jsr -684(a6)
    fd2a:	             move.l d0,8(sp)
    fd2e:	             move.l 8(sp),d0
    fd32:	             move.l d0,19d32 <languageName>
	if( languageName == 0) {
    fd38:	             move.l 19d32 <languageName>,d0
    fd3e:	         /-- bne.s fd4e <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
    fd40:	         |   pea 16cfb <main_sludge.c.828d7d86+0x41>
    fd46:	         |   jsr 12e08 <KPrintF>
    fd4c:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fd4e:	         \-> clr.l 32(sp)
    fd52:	   /-------- bra.s fdca <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
    fd54:	/--|-------> tst.l 32(sp)
    fd58:	|  |  /----- beq.s fd68 <makeLanguageTable+0xb6>
    fd5a:	|  |  |      move.l 40(sp),-(sp)
    fd5e:	|  |  |      jsr 6bc <get2bytes>
    fd64:	|  |  |      addq.l #4,sp
    fd66:	|  |  |  /-- bra.s fd6a <makeLanguageTable+0xb8>
    fd68:	|  |  \--|-> moveq #0,d0
    fd6a:	|  |     \-> movea.l 19d2e <languageTable>,a0
    fd70:	|  |         move.l 32(sp),d1
    fd74:	|  |         add.l d1,d1
    fd76:	|  |         add.l d1,d1
    fd78:	|  |         adda.l d1,a0
    fd7a:	|  |         move.l d0,(a0)
		languageName[i] = 0;
    fd7c:	|  |         move.l 19d32 <languageName>,d1
    fd82:	|  |         move.l 32(sp),d0
    fd86:	|  |         add.l d0,d0
    fd88:	|  |         add.l d0,d0
    fd8a:	|  |         movea.l d1,a0
    fd8c:	|  |         adda.l d0,a0
    fd8e:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
    fd90:	|  |         move.l 19c08 <gameVersion>,d0
    fd96:	|  |         cmpi.l #511,d0
    fd9c:	|  |     /-- ble.s fdc6 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
    fd9e:	|  |     |   move.l 19d3a <gameSettings+0x4>,d0
    fda4:	|  |     +-- beq.s fdc6 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
    fda6:	|  |     |   move.l 19d32 <languageName>,d1
    fdac:	|  |     |   move.l 32(sp),d0
    fdb0:	|  |     |   add.l d0,d0
    fdb2:	|  |     |   add.l d0,d0
    fdb4:	|  |     |   movea.l d1,a2
    fdb6:	|  |     |   adda.l d0,a2
    fdb8:	|  |     |   move.l 40(sp),-(sp)
    fdbc:	|  |     |   jsr b02 <readString>
    fdc2:	|  |     |   addq.l #4,sp
    fdc4:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    fdc6:	|  |     \-> addq.l #1,32(sp)
    fdca:	|  \-------> move.l 19d3a <gameSettings+0x4>,d0
    fdd0:	|            cmp.l 32(sp),d0
    fdd4:	\----------- bcc.w fd54 <makeLanguageTable+0xa2>
		}
	}
}
    fdd8:	             nop
    fdda:	             nop
    fddc:	             movea.l (sp)+,a2
    fdde:	             movea.l (sp)+,a6
    fde0:	             lea 28(sp),sp
    fde4:	             rts

0000fde6 <readIniFile>:

void readIniFile (char * filename) {
    fde6:	                      lea -564(sp),sp
    fdea:	                      move.l a6,-(sp)
    fdec:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
    fdee:	                      move.l 576(sp),-(sp)
    fdf2:	                      jsr b8 <copyString>
    fdf8:	                      addq.l #4,sp
    fdfa:	                      move.l d0,-(sp)
    fdfc:	                      jsr fbfa <getPrefsFilename>
    fe02:	                      addq.l #4,sp
    fe04:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
    fe08:	                      move.l 562(sp),558(sp)
    fe0e:	                      move.l #1005,554(sp)
    fe16:	                      move.l 19c62 <DOSBase>,d0
    fe1c:	                      movea.l d0,a6
    fe1e:	                      move.l 558(sp),d1
    fe22:	                      move.l 554(sp),d2
    fe26:	                      jsr -30(a6)
    fe2a:	                      move.l d0,550(sp)
    fe2e:	                      move.l 550(sp),d0
    fe32:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
    fe36:	                      clr.l 19d36 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
    fe3c:	                      move.w #1,19d3e <gameSettings+0x8>
	gameSettings.refreshRate = 0;
    fe44:	                      clr.l 19d40 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
    fe4a:	                      moveq #1,d0
    fe4c:	                      move.l d0,19d44 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
    fe52:	                      clr.w 19d48 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
    fe58:	                      clr.w 19d4a <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
    fe5e:	                      clr.w 19d4c <gameSettings+0x16>

	FreeVec(langName);
    fe64:	                      move.l 562(sp),542(sp)
    fe6a:	                      move.l 19c5a <SysBase>,d0
    fe70:	                      movea.l d0,a6
    fe72:	                      movea.l 542(sp),a1
    fe76:	                      jsr -690(a6)
	langName = NULL;
    fe7a:	                      clr.l 562(sp)

	if (fp) {
    fe7e:	                      tst.l 546(sp)
    fe82:	/-------------------- beq.w 10160 <readIniFile+0x37a>
		char lineSoFar[257] = "";
    fe86:	|                     move.l sp,d0
    fe88:	|                     addi.l #265,d0
    fe8e:	|                     move.l #257,d1
    fe94:	|                     move.l d1,-(sp)
    fe96:	|                     clr.l -(sp)
    fe98:	|                     move.l d0,-(sp)
    fe9a:	|                     jsr 12d8c <memset>
    fea0:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
    fea4:	|                     move.l sp,d0
    fea6:	|                     addq.l #8,d0
    fea8:	|                     move.l #257,d1
    feae:	|                     move.l d1,-(sp)
    feb0:	|                     clr.l -(sp)
    feb2:	|                     move.l d0,-(sp)
    feb4:	|                     jsr 12d8c <memset>
    feba:	|                     lea 12(sp),sp
		unsigned char here = 0;
    febe:	|                     clr.b 571(sp)
		char readChar = ' ';
    fec2:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
    fec8:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
    fece:	|                     clr.w 566(sp)
		LONG tmp = 0;
    fed2:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
    fed6:	|  /----------------> move.l 546(sp),534(sp)
    fedc:	|  |                  move.l 19c62 <DOSBase>,d0
    fee2:	|  |                  movea.l d0,a6
    fee4:	|  |                  move.l 534(sp),d1
    fee8:	|  |                  jsr -306(a6)
    feec:	|  |                  move.l d0,530(sp)
    fef0:	|  |                  move.l 530(sp),d0
    fef4:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
    fef8:	|  |                  moveq #-1,d1
    fefa:	|  |                  cmp.l 538(sp),d1
    fefe:	|  |           /----- bne.s ff0c <readIniFile+0x126>
				readChar = '\n';
    ff00:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
    ff06:	|  |           |      clr.w 568(sp)
    ff0a:	|  |           |  /-- bra.s ff12 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
    ff0c:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
    ff12:	|  |              \-> move.b 570(sp),d0
    ff16:	|  |                  ext.w d0
    ff18:	|  |                  movea.w d0,a0
    ff1a:	|  |                  moveq #61,d0
    ff1c:	|  |                  cmp.l a0,d0
    ff1e:	|  |     /----------- beq.w 100c8 <readIniFile+0x2e2>
    ff22:	|  |     |            moveq #61,d1
    ff24:	|  |     |            cmp.l a0,d1
    ff26:	|  |  /--|----------- blt.w 100d4 <readIniFile+0x2ee>
    ff2a:	|  |  |  |            moveq #10,d0
    ff2c:	|  |  |  |            cmp.l a0,d0
    ff2e:	|  |  |  |        /-- beq.s ff38 <readIniFile+0x152>
    ff30:	|  |  |  |        |   moveq #13,d1
    ff32:	|  |  |  |        |   cmp.l a0,d1
    ff34:	|  |  +--|--------|-- bne.w 100d4 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
    ff38:	|  |  |  |        \-> tst.w 566(sp)
    ff3c:	|  |  |  |     /----- beq.w 100b6 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
    ff40:	|  |  |  |     |      pea 16d2f <main_sludge.c.828d7d86+0x75>
    ff46:	|  |  |  |     |      move.l sp,d0
    ff48:	|  |  |  |     |      addi.l #269,d0
    ff4e:	|  |  |  |     |      move.l d0,-(sp)
    ff50:	|  |  |  |     |      jsr 10260 <strcmp>
    ff56:	|  |  |  |     |      addq.l #8,sp
    ff58:	|  |  |  |     |      tst.l d0
    ff5a:	|  |  |  |     |  /-- bne.s ff74 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
    ff5c:	|  |  |  |     |  |   move.l sp,d0
    ff5e:	|  |  |  |     |  |   addq.l #8,d0
    ff60:	|  |  |  |     |  |   move.l d0,-(sp)
    ff62:	|  |  |  |     |  |   jsr 1016c <stringToInt>
    ff68:	|  |  |  |     |  |   addq.l #4,sp
    ff6a:	|  |  |  |     |  |   move.l d0,19d36 <gameSettings>
    ff70:	|  |  |  |     +--|-- bra.w 100b6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
    ff74:	|  |  |  |     |  \-> pea 16d38 <main_sludge.c.828d7d86+0x7e>
    ff7a:	|  |  |  |     |      move.l sp,d0
    ff7c:	|  |  |  |     |      addi.l #269,d0
    ff82:	|  |  |  |     |      move.l d0,-(sp)
    ff84:	|  |  |  |     |      jsr 10260 <strcmp>
    ff8a:	|  |  |  |     |      addq.l #8,sp
    ff8c:	|  |  |  |     |      tst.l d0
    ff8e:	|  |  |  |     |  /-- bne.s ffb4 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
    ff90:	|  |  |  |     |  |   move.l sp,d0
    ff92:	|  |  |  |     |  |   addq.l #8,d0
    ff94:	|  |  |  |     |  |   move.l d0,-(sp)
    ff96:	|  |  |  |     |  |   jsr 1016c <stringToInt>
    ff9c:	|  |  |  |     |  |   addq.l #4,sp
    ff9e:	|  |  |  |     |  |   tst.l d0
    ffa0:	|  |  |  |     |  |   seq d0
    ffa2:	|  |  |  |     |  |   neg.b d0
    ffa4:	|  |  |  |     |  |   move.b d0,d0
    ffa6:	|  |  |  |     |  |   andi.w #255,d0
    ffaa:	|  |  |  |     |  |   move.w d0,19d3e <gameSettings+0x8>
    ffb0:	|  |  |  |     +--|-- bra.w 100b6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
    ffb4:	|  |  |  |     |  \-> pea 16d3f <main_sludge.c.828d7d86+0x85>
    ffba:	|  |  |  |     |      move.l sp,d0
    ffbc:	|  |  |  |     |      addi.l #269,d0
    ffc2:	|  |  |  |     |      move.l d0,-(sp)
    ffc4:	|  |  |  |     |      jsr 10260 <strcmp>
    ffca:	|  |  |  |     |      addq.l #8,sp
    ffcc:	|  |  |  |     |      tst.l d0
    ffce:	|  |  |  |     |  /-- bne.s ffe8 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
    ffd0:	|  |  |  |     |  |   move.l sp,d0
    ffd2:	|  |  |  |     |  |   addq.l #8,d0
    ffd4:	|  |  |  |     |  |   move.l d0,-(sp)
    ffd6:	|  |  |  |     |  |   jsr 1016c <stringToInt>
    ffdc:	|  |  |  |     |  |   addq.l #4,sp
    ffde:	|  |  |  |     |  |   move.l d0,19d40 <gameSettings+0xa>
    ffe4:	|  |  |  |     +--|-- bra.w 100b6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
    ffe8:	|  |  |  |     |  \-> pea 16d47 <main_sludge.c.828d7d86+0x8d>
    ffee:	|  |  |  |     |      move.l sp,d0
    fff0:	|  |  |  |     |      addi.l #269,d0
    fff6:	|  |  |  |     |      move.l d0,-(sp)
    fff8:	|  |  |  |     |      jsr 10260 <strcmp>
    fffe:	|  |  |  |     |      addq.l #8,sp
   10000:	|  |  |  |     |      tst.l d0
   10002:	|  |  |  |     |  /-- bne.s 1001c <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   10004:	|  |  |  |     |  |   move.l sp,d0
   10006:	|  |  |  |     |  |   addq.l #8,d0
   10008:	|  |  |  |     |  |   move.l d0,-(sp)
   1000a:	|  |  |  |     |  |   jsr 1016c <stringToInt>
   10010:	|  |  |  |     |  |   addq.l #4,sp
   10012:	|  |  |  |     |  |   move.l d0,19d44 <gameSettings+0xe>
   10018:	|  |  |  |     +--|-- bra.w 100b6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   1001c:	|  |  |  |     |  \-> pea 16d51 <main_sludge.c.828d7d86+0x97>
   10022:	|  |  |  |     |      move.l sp,d0
   10024:	|  |  |  |     |      addi.l #269,d0
   1002a:	|  |  |  |     |      move.l d0,-(sp)
   1002c:	|  |  |  |     |      jsr 10260 <strcmp>
   10032:	|  |  |  |     |      addq.l #8,sp
   10034:	|  |  |  |     |      tst.l d0
   10036:	|  |  |  |     |  /-- bne.s 10050 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   10038:	|  |  |  |     |  |   move.l sp,d0
   1003a:	|  |  |  |     |  |   addq.l #8,d0
   1003c:	|  |  |  |     |  |   move.l d0,-(sp)
   1003e:	|  |  |  |     |  |   jsr 1016c <stringToInt>
   10044:	|  |  |  |     |  |   addq.l #4,sp
   10046:	|  |  |  |     |  |   move.l d0,d0
   10048:	|  |  |  |     |  |   move.w d0,19d48 <gameSettings+0x12>
   1004e:	|  |  |  |     +--|-- bra.s 100b6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   10050:	|  |  |  |     |  \-> pea 16d5d <main_sludge.c.828d7d86+0xa3>
   10056:	|  |  |  |     |      move.l sp,d0
   10058:	|  |  |  |     |      addi.l #269,d0
   1005e:	|  |  |  |     |      move.l d0,-(sp)
   10060:	|  |  |  |     |      jsr 10260 <strcmp>
   10066:	|  |  |  |     |      addq.l #8,sp
   10068:	|  |  |  |     |      tst.l d0
   1006a:	|  |  |  |     |  /-- bne.s 10084 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   1006c:	|  |  |  |     |  |   move.l sp,d0
   1006e:	|  |  |  |     |  |   addq.l #8,d0
   10070:	|  |  |  |     |  |   move.l d0,-(sp)
   10072:	|  |  |  |     |  |   jsr 1016c <stringToInt>
   10078:	|  |  |  |     |  |   addq.l #4,sp
   1007a:	|  |  |  |     |  |   move.l d0,d0
   1007c:	|  |  |  |     |  |   move.w d0,19d4a <gameSettings+0x14>
   10082:	|  |  |  |     +--|-- bra.s 100b6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   10084:	|  |  |  |     |  \-> pea 16d6b <main_sludge.c.828d7d86+0xb1>
   1008a:	|  |  |  |     |      move.l sp,d0
   1008c:	|  |  |  |     |      addi.l #269,d0
   10092:	|  |  |  |     |      move.l d0,-(sp)
   10094:	|  |  |  |     |      jsr 10260 <strcmp>
   1009a:	|  |  |  |     |      addq.l #8,sp
   1009c:	|  |  |  |     |      tst.l d0
   1009e:	|  |  |  |     +----- bne.s 100b6 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   100a0:	|  |  |  |     |      move.l sp,d0
   100a2:	|  |  |  |     |      addq.l #8,d0
   100a4:	|  |  |  |     |      move.l d0,-(sp)
   100a6:	|  |  |  |     |      jsr 1016c <stringToInt>
   100ac:	|  |  |  |     |      addq.l #4,sp
   100ae:	|  |  |  |     |      move.l d0,d0
   100b0:	|  |  |  |     |      move.w d0,19d4c <gameSettings+0x16>
					}
				}
				here = 0;
   100b6:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   100ba:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   100be:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   100c2:	|  |  |  |            clr.b 8(sp)
				break;
   100c6:	|  |  |  |  /-------- bra.s 1013e <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   100c8:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   100ce:	|  |  |     |         clr.b 571(sp)
				break;
   100d2:	|  |  |     +-------- bra.s 1013e <readIniFile+0x358>

				default:
				if (doingSecond) {
   100d4:	|  |  \-----|-------> tst.w 566(sp)
   100d8:	|  |        |  /----- beq.s 1010c <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   100da:	|  |        |  |      move.b 571(sp),d0
   100de:	|  |        |  |      move.b d0,d1
   100e0:	|  |        |  |      addq.b #1,d1
   100e2:	|  |        |  |      move.b d1,571(sp)
   100e6:	|  |        |  |      move.b d0,d0
   100e8:	|  |        |  |      andi.l #255,d0
   100ee:	|  |        |  |      lea 572(sp),a0
   100f2:	|  |        |  |      adda.l d0,a0
   100f4:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   100fa:	|  |        |  |      moveq #0,d0
   100fc:	|  |        |  |      move.b 571(sp),d0
   10100:	|  |        |  |      lea 572(sp),a0
   10104:	|  |        |  |      adda.l d0,a0
   10106:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   1010a:	|  |        |  |  /-- bra.s 1013c <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   1010c:	|  |        |  \--|-> move.b 571(sp),d0
   10110:	|  |        |     |   move.b d0,d1
   10112:	|  |        |     |   addq.b #1,d1
   10114:	|  |        |     |   move.b d1,571(sp)
   10118:	|  |        |     |   move.b d0,d0
   1011a:	|  |        |     |   andi.l #255,d0
   10120:	|  |        |     |   lea 572(sp),a0
   10124:	|  |        |     |   adda.l d0,a0
   10126:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   1012c:	|  |        |     |   moveq #0,d0
   1012e:	|  |        |     |   move.b 571(sp),d0
   10132:	|  |        |     |   lea 572(sp),a0
   10136:	|  |        |     |   adda.l d0,a0
   10138:	|  |        |     |   clr.b -307(a0)
				break;
   1013c:	|  |        |     \-> nop
			}
		} while (keepGoing);
   1013e:	|  |        \-------> tst.w 568(sp)
   10142:	|  \----------------- bne.w fed6 <readIniFile+0xf0>

		Close(fp);
   10146:	|                     move.l 546(sp),526(sp)
   1014c:	|                     move.l 19c62 <DOSBase>,d0
   10152:	|                     movea.l d0,a6
   10154:	|                     move.l 526(sp),d1
   10158:	|                     jsr -36(a6)
   1015c:	|                     move.l d0,522(sp)
	}
}
   10160:	\-------------------> nop
   10162:	                      move.l (sp)+,d2
   10164:	                      movea.l (sp)+,a6
   10166:	                      lea 564(sp),sp
   1016a:	                      rts

0001016c <stringToInt>:

unsigned int stringToInt (char * s) {
   1016c:	             subq.l #8,sp
	int i = 0;
   1016e:	             clr.l 4(sp)
	BOOL negative = FALSE;
   10172:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   10176:	/----------> movea.l 12(sp),a0
   1017a:	|            move.b (a0),d0
   1017c:	|            cmpi.b #47,d0
   10180:	|        /-- ble.s 101b8 <stringToInt+0x4c>
   10182:	|        |   movea.l 12(sp),a0
   10186:	|        |   move.b (a0),d0
   10188:	|        |   cmpi.b #57,d0
   1018c:	|        +-- bgt.s 101b8 <stringToInt+0x4c>
			i *= 10;
   1018e:	|        |   move.l 4(sp),d1
   10192:	|        |   move.l d1,d0
   10194:	|        |   add.l d0,d0
   10196:	|        |   add.l d0,d0
   10198:	|        |   add.l d1,d0
   1019a:	|        |   add.l d0,d0
   1019c:	|        |   move.l d0,4(sp)
			i += *s - '0';
   101a0:	|        |   movea.l 12(sp),a0
   101a4:	|        |   move.b (a0),d0
   101a6:	|        |   ext.w d0
   101a8:	|        |   movea.w d0,a0
   101aa:	|        |   moveq #-48,d0
   101ac:	|        |   add.l a0,d0
   101ae:	|        |   add.l d0,4(sp)
			s ++;
   101b2:	|        |   addq.l #1,12(sp)
   101b6:	|  /-----|-- bra.s 101f0 <stringToInt+0x84>
		} else if (*s == '-') {
   101b8:	|  |     \-> movea.l 12(sp),a0
   101bc:	|  |         move.b (a0),d0
   101be:	|  |         cmpi.b #45,d0
   101c2:	|  |     /-- bne.s 101dc <stringToInt+0x70>
			negative = ! negative;
   101c4:	|  |     |   tst.w 2(sp)
   101c8:	|  |     |   seq d0
   101ca:	|  |     |   neg.b d0
   101cc:	|  |     |   move.b d0,d0
   101ce:	|  |     |   andi.w #255,d0
   101d2:	|  |     |   move.w d0,2(sp)
			s++;
   101d6:	|  |     |   addq.l #1,12(sp)
   101da:	+--|-----|-- bra.s 10176 <stringToInt+0xa>
		} else {
			if (negative)
   101dc:	|  |     \-> tst.w 2(sp)
   101e0:	|  |     /-- beq.s 101ea <stringToInt+0x7e>
				return -i;
   101e2:	|  |     |   move.l 4(sp),d0
   101e6:	|  |     |   neg.l d0
   101e8:	|  |  /--|-- bra.s 101f2 <stringToInt+0x86>
			return i;
   101ea:	|  |  |  \-> move.l 4(sp),d0
   101ee:	|  |  +----- bra.s 101f2 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   101f0:	\--\--|----X bra.s 10176 <stringToInt+0xa>
		}
	}
   101f2:	      \----> addq.l #8,sp
   101f4:	             rts

000101f6 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
   101f6:	    lea -28(sp),sp
   101fa:	    move.l a6,-(sp)
   101fc:	    move.l d2,-(sp)
	BPTR tester;
	BYTE retval = 0;
   101fe:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   10202:	    move.l 40(sp),30(sp)
   10208:	    move.l #1005,26(sp)
   10210:	    move.l 19c62 <DOSBase>,d0
   10216:	    movea.l d0,a6
   10218:	    move.l 30(sp),d1
   1021c:	    move.l 26(sp),d2
   10220:	    jsr -30(a6)
   10224:	    move.l d0,22(sp)
   10228:	    move.l 22(sp),d0
   1022c:	    move.l d0,18(sp)
	if (tester) {
   10230:	/-- beq.s 10252 <fileExists+0x5c>
		retval = 1;
   10232:	|   move.b #1,35(sp)
		Close(tester);
   10238:	|   move.l 18(sp),14(sp)
   1023e:	|   move.l 19c62 <DOSBase>,d0
   10244:	|   movea.l d0,a6
   10246:	|   move.l 14(sp),d1
   1024a:	|   jsr -36(a6)
   1024e:	|   move.l d0,10(sp)
	}
	return retval;
   10252:	\-> move.b 35(sp),d0
   10256:	    move.l (sp)+,d2
   10258:	    movea.l (sp)+,a6
   1025a:	    lea 28(sp),sp
   1025e:	    rts

00010260 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   10260:	   /-- bra.s 1026a <strcmp+0xa>
    {
        s1++;
   10262:	/--|-> addq.l #1,4(sp)
        s2++;
   10266:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   1026a:	|  \-> movea.l 4(sp),a0
   1026e:	|      move.b (a0),d0
   10270:	|  /-- beq.s 10282 <strcmp+0x22>
   10272:	|  |   movea.l 4(sp),a0
   10276:	|  |   move.b (a0),d1
   10278:	|  |   movea.l 8(sp),a0
   1027c:	|  |   move.b (a0),d0
   1027e:	|  |   cmp.b d1,d0
   10280:	\--|-- beq.s 10262 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   10282:	   \-> movea.l 4(sp),a0
   10286:	       move.b (a0),d0
   10288:	       moveq #0,d1
   1028a:	       move.b d0,d1
   1028c:	       movea.l 8(sp),a0
   10290:	       move.b (a0),d0
   10292:	       move.b d0,d0
   10294:	       andi.l #255,d0
   1029a:	       sub.l d0,d1
   1029c:	       move.l d1,d0
}
   1029e:	       rts

000102a0 <strlen>:

long unsigned int strlen (const char *s) 
{  
   102a0:	       subq.l #4,sp
	long unsigned int i = 0;
   102a2:	       clr.l (sp)
	while(s[i]) i++; 
   102a4:	   /-- bra.s 102a8 <strlen+0x8>
   102a6:	/--|-> addq.l #1,(sp)
   102a8:	|  \-> movea.l 8(sp),a0
   102ac:	|      adda.l (sp),a0
   102ae:	|      move.b (a0),d0
   102b0:	\----- bne.s 102a6 <strlen+0x6>
	return(i);
   102b2:	       move.l (sp),d0
}
   102b4:	       addq.l #4,sp
   102b6:	       rts

000102b8 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   102b8:	    nop
   102ba:	/-> move.l 8(sp),d0
   102be:	|   move.l d0,d1
   102c0:	|   addq.l #1,d1
   102c2:	|   move.l d1,8(sp)
   102c6:	|   movea.l 4(sp),a0
   102ca:	|   lea 1(a0),a1
   102ce:	|   move.l a1,4(sp)
   102d2:	|   movea.l d0,a1
   102d4:	|   move.b (a1),d0
   102d6:	|   move.b d0,(a0)
   102d8:	|   move.b (a0),d0
   102da:	\-- bne.s 102ba <strcpy+0x2>
}
   102dc:	    nop
   102de:	    rts

000102e0 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   102e0:	    lea -20(sp),sp
   102e4:	    move.l a6,-(sp)
   102e6:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   102e8:	    move.l 32(sp),-(sp)
   102ec:	    jsr 102a0 <strlen>
   102f2:	    addq.l #4,sp
   102f4:	    move.l d0,d2
   102f6:	    move.l 36(sp),-(sp)
   102fa:	    jsr 102a0 <strlen>
   10300:	    addq.l #4,sp
   10302:	    add.l d2,d0
   10304:	    move.l d0,d1
   10306:	    addq.l #1,d1
   10308:	    move.l d1,20(sp)
   1030c:	    clr.l 16(sp)
   10310:	    move.l 19c5a <SysBase>,d0
   10316:	    movea.l d0,a6
   10318:	    move.l 20(sp),d0
   1031c:	    move.l 16(sp),d1
   10320:	    jsr -684(a6)
   10324:	    move.l d0,12(sp)
   10328:	    move.l 12(sp),d0
   1032c:	    move.l d0,8(sp)
	char * t = newString;
   10330:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   10336:	    nop
   10338:	/-> move.l 32(sp),d0
   1033c:	|   move.l d0,d1
   1033e:	|   addq.l #1,d1
   10340:	|   move.l d1,32(sp)
   10344:	|   movea.l 24(sp),a0
   10348:	|   lea 1(a0),a1
   1034c:	|   move.l a1,24(sp)
   10350:	|   movea.l d0,a1
   10352:	|   move.b (a1),d0
   10354:	|   move.b d0,(a0)
   10356:	|   move.b (a0),d0
   10358:	\-- bne.s 10338 <joinStrings+0x58>
	t--;
   1035a:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   1035e:	    nop
   10360:	/-> move.l 36(sp),d0
   10364:	|   move.l d0,d1
   10366:	|   addq.l #1,d1
   10368:	|   move.l d1,36(sp)
   1036c:	|   movea.l 24(sp),a0
   10370:	|   lea 1(a0),a1
   10374:	|   move.l a1,24(sp)
   10378:	|   movea.l d0,a1
   1037a:	|   move.b (a1),d0
   1037c:	|   move.b d0,(a0)
   1037e:	|   move.b (a0),d0
   10380:	\-- bne.s 10360 <joinStrings+0x80>

	return newString;
   10382:	    move.l 8(sp),d0
}
   10386:	    move.l (sp)+,d2
   10388:	    movea.l (sp)+,a6
   1038a:	    lea 20(sp),sp
   1038e:	    rts

00010390 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   10390:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   10394:	       moveq #10,d0
   10396:	       cmp.l 28(sp),d0
   1039a:	   /-- bne.s 103b8 <itoa+0x28>
   1039c:	   |   tst.l 20(sp)
   103a0:	   +-- bge.s 103b8 <itoa+0x28>
        *str++ = '-';
   103a2:	   |   move.l 24(sp),d0
   103a6:	   |   move.l d0,d1
   103a8:	   |   addq.l #1,d1
   103aa:	   |   move.l d1,24(sp)
   103ae:	   |   movea.l d0,a0
   103b0:	   |   move.b #45,(a0)
        value *= -1;
   103b4:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   103b8:	   \-> move.l 24(sp),12(sp)
   103be:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   103c4:	   /-> move.l 20(sp),d0
   103c8:	   |   move.l 28(sp),-(sp)
   103cc:	   |   move.l d0,-(sp)
   103ce:	   |   jsr 139aa <__modsi3>
   103d4:	   |   addq.l #8,sp
   103d6:	   |   movea.l d0,a1
   103d8:	   |   move.l 12(sp),d0
   103dc:	   |   move.l d0,d1
   103de:	   |   addq.l #1,d1
   103e0:	   |   move.l d1,12(sp)
   103e4:	   |   lea 16d75 <main_sludge.c.828d7d86+0xbb>,a0
   103ea:	   |   move.b (0,a1,a0.l),d1
   103ee:	   |   movea.l d0,a0
   103f0:	   |   move.b d1,(a0)
        value /= base;
   103f2:	   |   move.l 28(sp),-(sp)
   103f6:	   |   move.l 24(sp),-(sp)
   103fa:	   |   jsr 1397c <__divsi3>
   10400:	   |   addq.l #8,sp
   10402:	   |   move.l d0,20(sp)
    } while (value);
   10406:	   \-- bne.s 103c4 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   10408:	       move.l 12(sp),d0
   1040c:	       move.l d0,d1
   1040e:	       subq.l #1,d1
   10410:	       move.l d1,12(sp)
   10414:	       movea.l d0,a0
   10416:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   10418:	       move.l 4(sp),8(sp)
   1041e:	   /-- bra.s 10444 <itoa+0xb4>
        char temp = *low;
   10420:	/--|-> movea.l 8(sp),a0
   10424:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   10428:	|  |   movea.l 12(sp),a0
   1042c:	|  |   move.b (a0),d0
   1042e:	|  |   movea.l 8(sp),a0
   10432:	|  |   move.b d0,(a0)
        *ptr = temp;
   10434:	|  |   movea.l 12(sp),a0
   10438:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   1043c:	|  |   addq.l #1,8(sp)
   10440:	|  |   subq.l #1,12(sp)
   10444:	|  \-> move.l 8(sp),d0
   10448:	|      cmp.l 12(sp),d0
   1044c:	\----- bcs.s 10420 <itoa+0x90>
    }
    return rc;
   1044e:	       move.l 4(sp),d0
}
   10452:	       lea 16(sp),sp
   10456:	       rts

00010458 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   10458:	                            lea -40(sp),sp
   1045c:	                            move.l d2,-(sp)
    char* s = str;
   1045e:	                            move.l 48(sp),40(sp)
    const char* p = format;
   10464:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   1046a:	   /----------------------- bra.w 1059e <vsprintf2+0x146>
        if (*p == '%') {
   1046e:	/--|----------------------> movea.l 36(sp),a0
   10472:	|  |                        move.b (a0),d0
   10474:	|  |                        cmpi.b #37,d0
   10478:	|  |  /-------------------- bne.w 10584 <vsprintf2+0x12c>
            switch (*++p) {
   1047c:	|  |  |                     addq.l #1,36(sp)
   10480:	|  |  |                     movea.l 36(sp),a0
   10484:	|  |  |                     move.b (a0),d0
   10486:	|  |  |                     ext.w d0
   10488:	|  |  |                     movea.w d0,a0
   1048a:	|  |  |                     moveq #115,d0
   1048c:	|  |  |                     cmp.l a0,d0
   1048e:	|  |  |           /-------- beq.s 10506 <vsprintf2+0xae>
   10490:	|  |  |           |         moveq #115,d1
   10492:	|  |  |           |         cmp.l a0,d1
   10494:	|  |  |  /--------|-------- blt.w 1056c <vsprintf2+0x114>
   10498:	|  |  |  |        |         moveq #99,d2
   1049a:	|  |  |  |        |         cmp.l a0,d2
   1049c:	|  |  |  |  /-----|-------- beq.w 10544 <vsprintf2+0xec>
   104a0:	|  |  |  |  |     |         moveq #100,d0
   104a2:	|  |  |  |  |     |         cmp.l a0,d0
   104a4:	|  |  |  +--|-----|-------- bne.w 1056c <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   104a8:	|  |  |  |  |     |         addq.l #4,56(sp)
   104ac:	|  |  |  |  |     |         movea.l 56(sp),a0
   104b0:	|  |  |  |  |     |         move.l (a0),d0
   104b2:	|  |  |  |  |     |         move.l d0,d1
   104b4:	|  |  |  |  |     |         subq.l #1,d1
   104b6:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   104ba:	|  |  |  |  |     |         pea a <_start+0xa>
   104be:	|  |  |  |  |     |         lea 8(sp),a0
   104c2:	|  |  |  |  |     |         move.l a0,-(sp)
   104c4:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   104c8:	|  |  |  |  |     |         jsr 10390 <itoa>
   104ce:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   104d2:	|  |  |  |  |     |         lea 44(sp),a0
   104d6:	|  |  |  |  |     |         lea -40(a0),a0
   104da:	|  |  |  |  |     |         move.l a0,28(sp)
   104de:	|  |  |  |  |     |     /-- bra.s 104fa <vsprintf2+0xa2>
                        *s++ = *b;
   104e0:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   104e4:	|  |  |  |  |     |  |  |   move.l d0,d1
   104e6:	|  |  |  |  |     |  |  |   addq.l #1,d1
   104e8:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   104ec:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   104f0:	|  |  |  |  |     |  |  |   move.b (a0),d1
   104f2:	|  |  |  |  |     |  |  |   movea.l d0,a0
   104f4:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   104f6:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   104fa:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   104fe:	|  |  |  |  |     |  |      move.b (a0),d0
   10500:	|  |  |  |  |     |  \----- bne.s 104e0 <vsprintf2+0x88>
                    }
                    break;
   10502:	|  |  |  |  |  /--|-------- bra.w 1059a <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   10506:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   1050a:	|  |  |  |  |  |            movea.l 56(sp),a0
   1050e:	|  |  |  |  |  |            move.l (a0),d0
   10510:	|  |  |  |  |  |            move.l d0,d1
   10512:	|  |  |  |  |  |            subq.l #1,d1
   10514:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   10518:	|  |  |  |  |  |        /-- bra.s 1053a <vsprintf2+0xe2>
                        *s++ = *sval++;
   1051a:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   1051e:	|  |  |  |  |  |     |  |   move.l d1,d2
   10520:	|  |  |  |  |  |     |  |   addq.l #1,d2
   10522:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   10526:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   1052a:	|  |  |  |  |  |     |  |   move.l d0,d2
   1052c:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1052e:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   10532:	|  |  |  |  |  |     |  |   movea.l d1,a0
   10534:	|  |  |  |  |  |     |  |   move.b (a0),d1
   10536:	|  |  |  |  |  |     |  |   movea.l d0,a0
   10538:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   1053a:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   1053e:	|  |  |  |  |  |     |      move.b (a0),d0
   10540:	|  |  |  |  |  |     \----- bne.s 1051a <vsprintf2+0xc2>
                    }
                    break;
   10542:	|  |  |  |  |  +----------- bra.s 1059a <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   10544:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   10548:	|  |  |  |     |            movea.l 56(sp),a0
   1054c:	|  |  |  |     |            move.l (a0),d0
   1054e:	|  |  |  |     |            move.l d0,d1
   10550:	|  |  |  |     |            subq.l #1,d1
   10552:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   10556:	|  |  |  |     |            move.l 40(sp),d0
   1055a:	|  |  |  |     |            move.l d0,d2
   1055c:	|  |  |  |     |            addq.l #1,d2
   1055e:	|  |  |  |     |            move.l d2,40(sp)
   10562:	|  |  |  |     |            move.l 24(sp),d1
   10566:	|  |  |  |     |            movea.l d0,a0
   10568:	|  |  |  |     |            move.b d1,(a0)
                    break;
   1056a:	|  |  |  |     +----------- bra.s 1059a <vsprintf2+0x142>
                default:
                    *s++ = *p;
   1056c:	|  |  |  \-----|----------> move.l 40(sp),d0
   10570:	|  |  |        |            move.l d0,d1
   10572:	|  |  |        |            addq.l #1,d1
   10574:	|  |  |        |            move.l d1,40(sp)
   10578:	|  |  |        |            movea.l 36(sp),a0
   1057c:	|  |  |        |            move.b (a0),d1
   1057e:	|  |  |        |            movea.l d0,a0
   10580:	|  |  |        |            move.b d1,(a0)
                    break;
   10582:	|  |  |        +----------- bra.s 1059a <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   10584:	|  |  \--------|----------> move.l 40(sp),d0
   10588:	|  |           |            move.l d0,d1
   1058a:	|  |           |            addq.l #1,d1
   1058c:	|  |           |            move.l d1,40(sp)
   10590:	|  |           |            movea.l 36(sp),a0
   10594:	|  |           |            move.b (a0),d1
   10596:	|  |           |            movea.l d0,a0
   10598:	|  |           |            move.b d1,(a0)
        }
        p++;
   1059a:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   1059e:	|  \----------------------> movea.l 36(sp),a0
   105a2:	|                           move.b (a0),d0
   105a4:	\-------------------------- bne.w 1046e <vsprintf2+0x16>
    }
    *s = '\0';
   105a8:	                            movea.l 40(sp),a0
   105ac:	                            clr.b (a0)
    return s - str;
   105ae:	                            move.l 40(sp),d0
   105b2:	                            sub.l 48(sp),d0
}
   105b6:	                            move.l (sp)+,d2
   105b8:	                            lea 40(sp),sp
   105bc:	                            rts

000105be <sprintf>:

int sprintf(char* str, const char* format, ...) {
   105be:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   105c0:	moveq #16,d0
   105c2:	add.l sp,d0
   105c4:	move.l d0,d1
   105c6:	addq.l #4,d1
   105c8:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   105cc:	move.l 16(sp),d0
   105d0:	move.l 4(sp),-(sp)
   105d4:	move.l d0,-(sp)
   105d6:	move.l 20(sp),-(sp)
   105da:	jsr 10458 <vsprintf2>
   105e0:	lea 12(sp),sp
   105e4:	move.l d0,(sp)
    va_end(args);
   105e6:	clr.l 4(sp)

    return done;
   105ea:	move.l (sp),d0
}
   105ec:	addq.l #8,sp
   105ee:	rts

000105f0 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   105f0:	       lea -20(sp),sp
   105f4:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   105f6:	       moveq #12,d0
   105f8:	       move.l d0,20(sp)
   105fc:	       clr.l 16(sp)
   10600:	       move.l 19c5a <SysBase>,d0
   10606:	       movea.l d0,a6
   10608:	       move.l 20(sp),d0
   1060c:	       move.l 16(sp),d1
   10610:	       jsr -684(a6)
   10614:	       move.l d0,12(sp)
   10618:	       move.l 12(sp),d0
   1061c:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   10620:	   /-- bne.s 10626 <addVarToStack+0x36>
   10622:	   |   clr.w d0
   10624:	/--|-- bra.s 1066e <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   10626:	|  \-> move.l 8(sp),d0
   1062a:	|      move.l d0,-(sp)
   1062c:	|      move.l 32(sp),-(sp)
   10630:	|      jsr 11152 <copyMain>
   10636:	|      addq.l #8,sp
   10638:	|      tst.w d0
   1063a:	|  /-- bne.s 10656 <addVarToStack+0x66>
        FreeVec(newStack);
   1063c:	|  |   move.l 8(sp),4(sp)
   10642:	|  |   move.l 19c5a <SysBase>,d0
   10648:	|  |   movea.l d0,a6
   1064a:	|  |   movea.l 4(sp),a1
   1064e:	|  |   jsr -690(a6)
        return FALSE;
   10652:	|  |   clr.w d0
   10654:	+--|-- bra.s 1066e <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   10656:	|  \-> movea.l 32(sp),a0
   1065a:	|      move.l (a0),d0
   1065c:	|      movea.l 8(sp),a0
   10660:	|      move.l d0,8(a0)
    *thisStack = newStack;
   10664:	|      movea.l 32(sp),a0
   10668:	|      move.l 8(sp),(a0)
    return TRUE;
   1066c:	|      moveq #1,d0
}
   1066e:	\----> movea.l (sp)+,a6
   10670:	       lea 20(sp),sp
   10674:	       rts

00010676 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   10676:	       lea -16(sp),sp
   1067a:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1067c:	       moveq #12,d0
   1067e:	       move.l d0,16(sp)
   10682:	       clr.l 12(sp)
   10686:	       move.l 19c5a <SysBase>,d0
   1068c:	       movea.l d0,a6
   1068e:	       move.l 16(sp),d0
   10692:	       move.l 12(sp),d1
   10696:	       jsr -684(a6)
   1069a:	       move.l d0,8(sp)
   1069e:	       move.l 8(sp),d0
   106a2:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   106a6:	   /-- bne.s 106ac <addVarToStackQuick+0x36>
   106a8:	   |   clr.w d0
   106aa:	/--|-- bra.s 106e2 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   106ac:	|  \-> move.l 4(sp),d0
   106b0:	|      pea 8 <_start+0x8>
   106b4:	|      move.l 28(sp),-(sp)
   106b8:	|      move.l d0,-(sp)
   106ba:	|      jsr 12dbc <memcpy>
   106c0:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   106c4:	|      movea.l 24(sp),a0
   106c8:	|      clr.l (a0)

    newStack->next = *thisStack;
   106ca:	|      movea.l 28(sp),a0
   106ce:	|      move.l (a0),d0
   106d0:	|      movea.l 4(sp),a0
   106d4:	|      move.l d0,8(a0)
    *thisStack = newStack;
   106d8:	|      movea.l 28(sp),a0
   106dc:	|      move.l 4(sp),(a0)
    return TRUE;
   106e0:	|      moveq #1,d0
}
   106e2:	\----> movea.l (sp)+,a6
   106e4:	       lea 16(sp),sp
   106e8:	       rts

000106ea <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   106ea:	       lea -16(sp),sp
   106ee:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   106f0:	       movea.l 24(sp),a0
   106f4:	       move.l (a0),d0
   106f6:	       moveq #1,d1
   106f8:	       cmp.l d0,d1
   106fa:	   /-- bne.s 10724 <addVariablesInSecond+0x3a>
   106fc:	   |   movea.l 28(sp),a0
   10700:	   |   move.l (a0),d0
   10702:	   |   moveq #1,d1
   10704:	   |   cmp.l d0,d1
   10706:	   +-- bne.s 10724 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   10708:	   |   movea.l 28(sp),a0
   1070c:	   |   move.l 4(a0),d1
   10710:	   |   movea.l 24(sp),a0
   10714:	   |   move.l 4(a0),d0
   10718:	   |   add.l d1,d0
   1071a:	   |   movea.l 28(sp),a0
   1071e:	   |   move.l d0,4(a0)
   10722:	/--|-- bra.s 1079e <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   10724:	|  \-> move.l 24(sp),-(sp)
   10728:	|      jsr 1138a <getTextFromAnyVar>
   1072e:	|      addq.l #4,sp
   10730:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   10734:	|      move.l 28(sp),-(sp)
   10738:	|      jsr 1138a <getTextFromAnyVar>
   1073e:	|      addq.l #4,sp
   10740:	|      move.l d0,12(sp)

		unlinkVar(var2);
   10744:	|      move.l 28(sp),-(sp)
   10748:	|      jsr 11002 <unlinkVar>
   1074e:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   10750:	|      move.l 12(sp),-(sp)
   10754:	|      move.l 20(sp),-(sp)
   10758:	|      jsr 102e0 <joinStrings>
   1075e:	|      addq.l #8,sp
   10760:	|      movea.l 28(sp),a0
   10764:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   10768:	|      movea.l 28(sp),a0
   1076c:	|      moveq #3,d0
   1076e:	|      move.l d0,(a0)
		FreeVec(string1);
   10770:	|      move.l 16(sp),8(sp)
   10776:	|      move.l 19c5a <SysBase>,d0
   1077c:	|      movea.l d0,a6
   1077e:	|      movea.l 8(sp),a1
   10782:	|      jsr -690(a6)
		FreeVec(string2);
   10786:	|      move.l 12(sp),4(sp)
   1078c:	|      move.l 19c5a <SysBase>,d0
   10792:	|      movea.l d0,a6
   10794:	|      movea.l 4(sp),a1
   10798:	|      jsr -690(a6)
	}
}
   1079c:	|      nop
   1079e:	\----> nop
   107a0:	       movea.l (sp)+,a6
   107a2:	       lea 16(sp),sp
   107a6:	       rts

000107a8 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   107a8:	movea.l 8(sp),a0
   107ac:	move.l 4(a0),-(sp)
   107b0:	move.l (a0),-(sp)
   107b2:	movea.l 12(sp),a0
   107b6:	move.l 4(a0),-(sp)
   107ba:	move.l (a0),-(sp)
   107bc:	jsr 107de <compareVars>
   107c2:	lea 16(sp),sp
   107c6:	move.l d0,-(sp)
   107c8:	pea 1 <_start+0x1>
   107cc:	move.l 16(sp),-(sp)
   107d0:	jsr 116a6 <setVariable>
   107d6:	lea 12(sp),sp
}
   107da:	nop
   107dc:	rts

000107de <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   107de:	       subq.l #4,sp
	int re = 0;
   107e0:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   107e2:	       move.l 8(sp),d1
   107e6:	       move.l 16(sp),d0
   107ea:	       cmp.l d1,d0
   107ec:	/----- bne.w 108b4 <compareVars+0xd6>
		switch (var1.varType) {
   107f0:	|      move.l 8(sp),d0
   107f4:	|      moveq #9,d1
   107f6:	|      cmp.l d0,d1
   107f8:	|  /-- bcs.w 1089c <compareVars+0xbe>
   107fc:	|  |   add.l d0,d0
   107fe:	|  |   movea.l d0,a0
   10800:	|  |   adda.l #67596,a0
   10806:	|  |   move.w (a0),d0
   10808:	|  |   jmp (1080c <compareVars+0x2e>,pc,d0.w)
   1080c:	|  |   ori.b #-112,(a4)
   10810:	|  |   ori.l #5243024,(a0)
   10816:	|  |   ori.l #7733392,(a0)
   1081c:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   10822:	|  |   move.l d0,(sp)
			break;
   10824:	+--|-- bra.w 108b4 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   10828:	|  |   move.l 12(sp),d1
   1082c:	|  |   move.l 20(sp),d0
   10830:	|  |   cmp.l d1,d0
   10832:	|  |   seq d0
   10834:	|  |   neg.b d0
   10836:	|  |   move.b d0,d0
   10838:	|  |   andi.l #255,d0
   1083e:	|  |   move.l d0,(sp)
			break;
   10840:	+--|-- bra.s 108b4 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   10842:	|  |   move.l 12(sp),d1
   10846:	|  |   move.l 20(sp),d0
   1084a:	|  |   cmp.l d1,d0
   1084c:	|  |   seq d0
   1084e:	|  |   neg.b d0
   10850:	|  |   move.b d0,d0
   10852:	|  |   andi.l #255,d0
   10858:	|  |   move.l d0,(sp)
			break;
   1085a:	+--|-- bra.s 108b4 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   1085c:	|  |   move.l 20(sp),d1
   10860:	|  |   move.l 12(sp),d0
   10864:	|  |   move.l d1,-(sp)
   10866:	|  |   move.l d0,-(sp)
   10868:	|  |   jsr 10260 <strcmp>
   1086e:	|  |   addq.l #8,sp
   10870:	|  |   tst.l d0
   10872:	|  |   seq d0
   10874:	|  |   neg.b d0
   10876:	|  |   move.b d0,d0
   10878:	|  |   andi.l #255,d0
   1087e:	|  |   move.l d0,(sp)
			break;
   10880:	+--|-- bra.s 108b4 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   10882:	|  |   move.l 12(sp),d1
   10886:	|  |   move.l 20(sp),d0
   1088a:	|  |   cmp.l d1,d0
   1088c:	|  |   seq d0
   1088e:	|  |   neg.b d0
   10890:	|  |   move.b d0,d0
   10892:	|  |   andi.l #255,d0
   10898:	|  |   move.l d0,(sp)
			break;
   1089a:	+--|-- bra.s 108b4 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   1089c:	|  \-> move.l 12(sp),d1
   108a0:	|      move.l 20(sp),d0
   108a4:	|      cmp.l d1,d0
   108a6:	|      seq d0
   108a8:	|      neg.b d0
   108aa:	|      move.b d0,d0
   108ac:	|      andi.l #255,d0
   108b2:	|      move.l d0,(sp)
		}
	}
	return re;
   108b4:	\----> move.l (sp),d0
}
   108b6:	       addq.l #4,sp
   108b8:	       rts

000108ba <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   108ba:	             lea -16(sp),sp
   108be:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   108c0:	             movea.l 28(sp),a0
   108c4:	             moveq #6,d0
   108c6:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   108c8:	             moveq #12,d0
   108ca:	             move.l d0,12(sp)
   108ce:	             clr.l 8(sp)
   108d2:	             move.l 19c5a <SysBase>,d0
   108d8:	             movea.l d0,a6
   108da:	             move.l 12(sp),d0
   108de:	             move.l 8(sp),d1
   108e2:	             jsr -684(a6)
   108e6:	             move.l d0,4(sp)
   108ea:	             move.l 4(sp),d0
   108ee:	             movea.l 28(sp),a0
   108f2:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   108f6:	             movea.l 28(sp),a0
   108fa:	             move.l 4(a0),d0
   108fe:	         /-- bne.s 10906 <copyStack+0x4c>
   10900:	         |   clr.w d0
   10902:	/--------|-- bra.w 10988 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   10906:	|        \-> movea.l 28(sp),a0
   1090a:	|            movea.l 4(a0),a0
   1090e:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   10910:	|            movea.l 28(sp),a0
   10914:	|            movea.l 4(a0),a0
   10918:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   1091c:	|            movea.l 28(sp),a0
   10920:	|            movea.l 4(a0),a0
   10924:	|            moveq #1,d0
   10926:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   1092a:	|            movea.l 24(sp),a0
   1092e:	|            movea.l 4(a0),a0
   10932:	|            move.l (a0),16(sp)

	while (a) {
   10936:	|     /----- bra.s 10980 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   10938:	|  /--|----> movea.l 28(sp),a0
   1093c:	|  |  |      move.l 4(a0),d0
   10940:	|  |  |      move.l d0,d1
   10942:	|  |  |      move.l 16(sp),d0
   10946:	|  |  |      move.l d1,-(sp)
   10948:	|  |  |      move.l d0,-(sp)
   1094a:	|  |  |      jsr 105f0 <addVarToStack>
   10950:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   10952:	|  |  |      movea.l 28(sp),a0
   10956:	|  |  |      movea.l 4(a0),a0
   1095a:	|  |  |      move.l 4(a0),d0
   1095e:	|  |  |  /-- bne.s 10976 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   10960:	|  |  |  |   movea.l 28(sp),a0
   10964:	|  |  |  |   movea.l 4(a0),a1
   10968:	|  |  |  |   movea.l 28(sp),a0
   1096c:	|  |  |  |   movea.l 4(a0),a0
   10970:	|  |  |  |   move.l (a1),d0
   10972:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   10976:	|  |  |  \-> movea.l 16(sp),a0
   1097a:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   10980:	|  |  \----> tst.l 16(sp)
   10984:	|  \-------- bne.s 10938 <copyStack+0x7e>
	}

	return TRUE;
   10986:	|            moveq #1,d0
}
   10988:	\----------> movea.l (sp)+,a6
   1098a:	             lea 16(sp),sp
   1098e:	             rts

00010990 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   10990:	                lea -20(sp),sp
   10994:	                move.l a6,-(sp)
   10996:	                move.l 36(sp),d0
   1099a:	                move.w d0,d0
   1099c:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   109a0:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   109a6:	                clr.l 16(sp)

    while (*huntVar) {
   109aa:	   /----------- bra.s 10a28 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   109ac:	/--|----------> movea.l 20(sp),a0
   109b0:	|  |            movea.l (a0),a0
   109b2:	|  |            movea.l 28(sp),a1
   109b6:	|  |            move.l 4(a1),-(sp)
   109ba:	|  |            move.l (a1),-(sp)
   109bc:	|  |            move.l 4(a0),-(sp)
   109c0:	|  |            move.l (a0),-(sp)
   109c2:	|  |            jsr 107de <compareVars>
   109c8:	|  |            lea 16(sp),sp
   109cc:	|  |            tst.l d0
   109ce:	|  |  /-------- beq.s 10a1a <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   109d0:	|  |  |         movea.l 20(sp),a0
   109d4:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   109d8:	|  |  |         movea.l 12(sp),a0
   109dc:	|  |  |         move.l 8(a0),d0
   109e0:	|  |  |         movea.l 20(sp),a0
   109e4:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   109e6:	|  |  |         move.l 12(sp),d0
   109ea:	|  |  |         move.l d0,-(sp)
   109ec:	|  |  |         jsr 11002 <unlinkVar>
   109f2:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   109f4:	|  |  |         move.l 12(sp),8(sp)
   109fa:	|  |  |         move.l 19c5a <SysBase>,d0
   10a00:	|  |  |         movea.l d0,a6
   10a02:	|  |  |         movea.l 8(sp),a1
   10a06:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   10a0a:	|  |  |         tst.w 6(sp)
   10a0e:	|  |  |     /-- bne.s 10a14 <deleteVarFromStack+0x84>
   10a10:	|  |  |     |   moveq #1,d0
   10a12:	|  |  |  /--|-- bra.s 10a36 <deleteVarFromStack+0xa6>
            reply++;
   10a14:	|  |  |  |  \-> addq.l #1,16(sp)
   10a18:	|  +--|--|----- bra.s 10a28 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   10a1a:	|  |  \--|----> movea.l 20(sp),a0
   10a1e:	|  |     |      move.l (a0),d0
   10a20:	|  |     |      move.l d0,d1
   10a22:	|  |     |      addq.l #8,d1
   10a24:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   10a28:	|  \-----|----> movea.l 20(sp),a0
   10a2c:	|        |      move.l (a0),d0
   10a2e:	\--------|----- bne.w 109ac <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   10a32:	         |      move.l 16(sp),d0
}
   10a36:	         \----> movea.l (sp)+,a6
   10a38:	                lea 20(sp),sp
   10a3c:	                rts

00010a3e <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   10a3e:	       movea.l 4(sp),a0
   10a42:	       move.l 4(a0),d0
   10a46:	       cmp.l 8(sp),d0
   10a4a:	   /-- bhi.s 10a50 <fastArrayGetByIndex+0x12>
   10a4c:	   |   moveq #0,d0
   10a4e:	/--|-- bra.s 10a5e <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   10a50:	|  \-> movea.l 4(sp),a0
   10a54:	|      move.l (a0),d1
   10a56:	|      move.l 8(sp),d0
   10a5a:	|      lsl.l #3,d0
   10a5c:	|      add.l d1,d0
}
   10a5e:	\----> rts

00010a60 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   10a60:	                lea -32(sp),sp
   10a64:	                move.l a6,-(sp)
   10a66:	                move.l a2,-(sp)
    struct persona *p = NULL;
   10a68:	                clr.l 36(sp)

    switch (thisVar->varType) {
   10a6c:	                movea.l 44(sp),a0
   10a70:	                move.l (a0),d0
   10a72:	                moveq #8,d1
   10a74:	                cmp.l d0,d1
   10a76:	            /-- beq.s 10a84 <getCostumeFromVar+0x24>
   10a78:	            |   moveq #9,d1
   10a7a:	            |   cmp.l d0,d1
   10a7c:	   /--------|-- beq.w 10b32 <getCostumeFromVar+0xd2>
   10a80:	/--|--------|-- bra.w 10b3c <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   10a84:	|  |        \-> moveq #8,d0
   10a86:	|  |            move.l d0,28(sp)
   10a8a:	|  |            clr.l 24(sp)
   10a8e:	|  |            move.l 19c5a <SysBase>,d0
   10a94:	|  |            movea.l d0,a6
   10a96:	|  |            move.l 28(sp),d0
   10a9a:	|  |            move.l 24(sp),d1
   10a9e:	|  |            jsr -684(a6)
   10aa2:	|  |            move.l d0,20(sp)
   10aa6:	|  |            move.l 20(sp),d0
   10aaa:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   10aae:	|  |        /-- bne.s 10ab6 <getCostumeFromVar+0x56>
   10ab0:	|  |        |   moveq #0,d0
   10ab2:	|  |  /-----|-- bra.w 10b66 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   10ab6:	|  |  |     \-> movea.l 36(sp),a0
   10aba:	|  |  |         moveq #1,d1
   10abc:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   10ac0:	|  |  |         moveq #12,d0
   10ac2:	|  |  |         move.l d0,16(sp)
   10ac6:	|  |  |         clr.l 12(sp)
   10aca:	|  |  |         move.l 19c5a <SysBase>,d0
   10ad0:	|  |  |         movea.l d0,a6
   10ad2:	|  |  |         move.l 16(sp),d0
   10ad6:	|  |  |         move.l 12(sp),d1
   10ada:	|  |  |         jsr -684(a6)
   10ade:	|  |  |         move.l d0,8(sp)
   10ae2:	|  |  |         move.l 8(sp),d0
   10ae6:	|  |  |         movea.l 36(sp),a0
   10aea:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   10aec:	|  |  |         movea.l 36(sp),a0
   10af0:	|  |  |         move.l (a0),d0
   10af2:	|  |  |     /-- bne.s 10af8 <getCostumeFromVar+0x98>
   10af4:	|  |  |     |   moveq #0,d0
   10af6:	|  |  +-----|-- bra.s 10b66 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   10af8:	|  |  |     \-> clr.l 32(sp)
   10afc:	|  |  |     /-- bra.s 10b28 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   10afe:	|  |  |  /--|-> movea.l 44(sp),a0
   10b02:	|  |  |  |  |   move.l 4(a0),d0
   10b06:	|  |  |  |  |   movea.l 36(sp),a0
   10b0a:	|  |  |  |  |   movea.l (a0),a0
   10b0c:	|  |  |  |  |   move.l 32(sp),d1
   10b10:	|  |  |  |  |   add.l d1,d1
   10b12:	|  |  |  |  |   add.l d1,d1
   10b14:	|  |  |  |  |   lea (0,a0,d1.l),a2
   10b18:	|  |  |  |  |   move.l d0,-(sp)
   10b1a:	|  |  |  |  |   jsr 6480 <copyAnim>
   10b20:	|  |  |  |  |   addq.l #4,sp
   10b22:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   10b24:	|  |  |  |  |   addq.l #1,32(sp)
   10b28:	|  |  |  |  \-> moveq #2,d1
   10b2a:	|  |  |  |      cmp.l 32(sp),d1
   10b2e:	|  |  |  \----- bge.s 10afe <getCostumeFromVar+0x9e>
            }
            break;
   10b30:	|  |  |     /-- bra.s 10b62 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   10b32:	|  \--|-----|-> movea.l 44(sp),a0
   10b36:	|     |     |   move.l 4(a0),d0
   10b3a:	|     +-----|-- bra.s 10b66 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   10b3c:	\-----|-----|-> movea.l 44(sp),a0
   10b40:	      |     |   move.l (a0),d0
   10b42:	      |     |   add.l d0,d0
   10b44:	      |     |   movea.l d0,a1
   10b46:	      |     |   adda.l d0,a1
   10b48:	      |     |   lea 18688 <typeName>,a0
   10b4e:	      |     |   move.l (0,a1,a0.l),d0
   10b52:	      |     |   move.l d0,-(sp)
   10b54:	      |     |   pea 16de7 <main_sludge.c.828d7d86+0x12d>
   10b5a:	      |     |   jsr 12e08 <KPrintF>
   10b60:	      |     |   addq.l #8,sp
    }

    return p;
   10b62:	      |     \-> move.l 36(sp),d0
}
   10b66:	      \-------> movea.l (sp)+,a2
   10b68:	                movea.l (sp)+,a6
   10b6a:	                lea 32(sp),sp
   10b6e:	                rts

00010b70 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   10b70:	                lea -96(sp),sp
   10b74:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   10b78:	                move.l 116(sp),-(sp)
   10b7c:	                pea 16e1f <main_sludge.c.828d7d86+0x165>
   10b82:	                jsr 102e0 <joinStrings>
   10b88:	                addq.l #8,sp
   10b8a:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   10b8e:	            /-- bne.s 10b96 <getSavedGamesStack+0x26>
   10b90:	            |   clr.w d0
   10b92:	/-----------|-- bra.w 10daa <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   10b96:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   10b9a:	|               move.l #93729,98(sp)
   10ba2:	|               moveq #-2,d0
   10ba4:	|               move.l d0,94(sp)
   10ba8:	|               move.l 19c62 <DOSBase>,d0
   10bae:	|               movea.l d0,a6
   10bb0:	|               move.l 98(sp),d1
   10bb4:	|               move.l 94(sp),d2
   10bb8:	|               jsr -84(a6)
   10bbc:	|               move.l d0,90(sp)
   10bc0:	|               move.l 90(sp),d0
   10bc4:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   10bc8:	|           /-- bne.s 10bd0 <getSavedGamesStack+0x60>
   10bca:	|           |   clr.w d0
   10bcc:	+-----------|-- bra.w 10daa <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   10bd0:	|           \-> move.l #260,82(sp)
   10bd8:	|               move.l #65536,78(sp)
   10be0:	|               move.l 19c5a <SysBase>,d0
   10be6:	|               movea.l d0,a6
   10be8:	|               move.l 82(sp),d0
   10bec:	|               move.l 78(sp),d1
   10bf0:	|               jsr -684(a6)
   10bf4:	|               move.l d0,74(sp)
   10bf8:	|               move.l 74(sp),d0
   10bfc:	|               move.l d0,70(sp)
	if (!fib) {
   10c00:	|           /-- bne.s 10c1e <getSavedGamesStack+0xae>
		UnLock(dirLock);
   10c02:	|           |   move.l 86(sp),22(sp)
   10c08:	|           |   move.l 19c62 <DOSBase>,d0
   10c0e:	|           |   movea.l d0,a6
   10c10:	|           |   move.l 22(sp),d1
   10c14:	|           |   jsr -90(a6)
		return FALSE;
   10c18:	|           |   clr.w d0
   10c1a:	+-----------|-- bra.w 10daa <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   10c1e:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   10c22:	|               move.l 86(sp),66(sp)
   10c28:	|               move.l 70(sp),62(sp)
   10c2e:	|               move.l 19c62 <DOSBase>,d0
   10c34:	|               movea.l d0,a6
   10c36:	|               move.l 66(sp),d1
   10c3a:	|               move.l 62(sp),d2
   10c3e:	|               jsr -102(a6)
   10c42:	|               move.l d0,58(sp)
   10c46:	|               move.l 58(sp),d0
   10c4a:	|  /----------- beq.w 10d5e <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   10c4e:	|  |        /-- bra.w 10d2a <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   10c52:	|  |  /-----|-> move.l 70(sp),d2
   10c56:	|  |  |     |   addq.l #8,d2
   10c58:	|  |  |     |   move.l 70(sp),d0
   10c5c:	|  |  |     |   addq.l #8,d0
   10c5e:	|  |  |     |   move.l d0,-(sp)
   10c60:	|  |  |     |   jsr 102a0 <strlen>
   10c66:	|  |  |     |   addq.l #4,sp
   10c68:	|  |  |     |   move.l d0,d3
   10c6a:	|  |  |     |   move.l 116(sp),-(sp)
   10c6e:	|  |  |     |   jsr 102a0 <strlen>
   10c74:	|  |  |     |   addq.l #4,sp
   10c76:	|  |  |     |   move.l d3,d1
   10c78:	|  |  |     |   sub.l d0,d1
   10c7a:	|  |  |     |   move.l d2,d0
   10c7c:	|  |  |     |   add.l d1,d0
   10c7e:	|  |  |     |   move.l 116(sp),-(sp)
   10c82:	|  |  |     |   move.l d0,-(sp)
   10c84:	|  |  |     |   jsr 10260 <strcmp>
   10c8a:	|  |  |     |   addq.l #8,sp
   10c8c:	|  |  |     |   tst.l d0
   10c8e:	|  |  |     +-- bne.w 10d2a <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   10c92:	|  |  |     |   move.l 70(sp),d0
   10c96:	|  |  |     |   addq.l #8,d0
   10c98:	|  |  |     |   move.l d0,-(sp)
   10c9a:	|  |  |     |   jsr 102a0 <strlen>
   10ca0:	|  |  |     |   addq.l #4,sp
   10ca2:	|  |  |     |   move.l d0,d2
   10ca4:	|  |  |     |   move.l 116(sp),-(sp)
   10ca8:	|  |  |     |   jsr 102a0 <strlen>
   10cae:	|  |  |     |   addq.l #4,sp
   10cb0:	|  |  |     |   move.l d0,d1
   10cb2:	|  |  |     |   move.l d2,d0
   10cb4:	|  |  |     |   sub.l d1,d0
   10cb6:	|  |  |     |   movea.l 70(sp),a0
   10cba:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   10cbe:	|  |  |     |   move.l 70(sp),d0
   10cc2:	|  |  |     |   addq.l #8,d0
   10cc4:	|  |  |     |   move.l d0,-(sp)
   10cc6:	|  |  |     |   jsr 118 <decodeFilename>
   10ccc:	|  |  |     |   addq.l #4,sp
   10cce:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   10cd2:	|  |  |     |   move.l 42(sp),-(sp)
   10cd6:	|  |  |     |   lea 18(sp),a0
   10cda:	|  |  |     |   move.l a0,-(sp)
   10cdc:	|  |  |     |   jsr 10fd6 <makeTextVar>
   10ce2:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   10ce4:	|  |  |     |   move.l 42(sp),38(sp)
   10cea:	|  |  |     |   move.l 19c5a <SysBase>,d0
   10cf0:	|  |  |     |   movea.l d0,a6
   10cf2:	|  |  |     |   movea.l 38(sp),a1
   10cf6:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   10cfa:	|  |  |     |   move.l 112(sp),d0
   10cfe:	|  |  |     |   move.l d0,-(sp)
   10d00:	|  |  |     |   lea 18(sp),a0
   10d04:	|  |  |     |   move.l a0,-(sp)
   10d06:	|  |  |     |   jsr 105f0 <addVarToStack>
   10d0c:	|  |  |     |   addq.l #8,sp
   10d0e:	|  |  |     |   tst.w d0
   10d10:	|  |  |  /--|-- beq.s 10d62 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   10d12:	|  |  |  |  |   movea.l 112(sp),a0
   10d16:	|  |  |  |  |   move.l 4(a0),d0
   10d1a:	|  |  |  |  +-- bne.s 10d2a <getSavedGamesStack+0x1ba>
   10d1c:	|  |  |  |  |   movea.l 112(sp),a0
   10d20:	|  |  |  |  |   move.l (a0),d0
   10d22:	|  |  |  |  |   movea.l 112(sp),a0
   10d26:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   10d2a:	|  |  |  |  \-> move.l 86(sp),54(sp)
   10d30:	|  |  |  |      move.l 70(sp),50(sp)
   10d36:	|  |  |  |      move.l 19c62 <DOSBase>,d0
   10d3c:	|  |  |  |      movea.l d0,a6
   10d3e:	|  |  |  |      move.l 54(sp),d1
   10d42:	|  |  |  |      move.l 50(sp),d2
   10d46:	|  |  |  |      jsr -108(a6)
   10d4a:	|  |  |  |      move.l d0,46(sp)
   10d4e:	|  |  |  |      move.l 46(sp),d0
   10d52:	|  |  \--|----- bne.w 10c52 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   10d56:	|  |     |      move.w #1,106(sp)
   10d5c:	|  |     |  /-- bra.s 10d64 <getSavedGamesStack+0x1f4>
	}

cleanup:
   10d5e:	|  \-----|--|-> nop
   10d60:	|        |  +-- bra.s 10d64 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   10d62:	|        \--|-> nop
	FreeVec(fib);
   10d64:	|           \-> move.l 70(sp),34(sp)
   10d6a:	|               move.l 19c5a <SysBase>,d0
   10d70:	|               movea.l d0,a6
   10d72:	|               movea.l 34(sp),a1
   10d76:	|               jsr -690(a6)
	UnLock(dirLock);
   10d7a:	|               move.l 86(sp),30(sp)
   10d80:	|               move.l 19c62 <DOSBase>,d0
   10d86:	|               movea.l d0,a6
   10d88:	|               move.l 30(sp),d1
   10d8c:	|               jsr -90(a6)
	FreeVec(pattern);
   10d90:	|               move.l 102(sp),26(sp)
   10d96:	|               move.l 19c5a <SysBase>,d0
   10d9c:	|               movea.l d0,a6
   10d9e:	|               movea.l 26(sp),a1
   10da2:	|               jsr -690(a6)
	return result;
   10da6:	|               move.w 106(sp),d0
}
   10daa:	\-------------> movem.l (sp)+,d2-d3/a6
   10dae:	                lea 96(sp),sp
   10db2:	                rts

00010db4 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   10db4:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   10db6:	       movea.l 20(sp),a0
   10dba:	       move.l (a0),d0
   10dbc:	       cmp.l 16(sp),d0
   10dc0:	/----- beq.s 10e24 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   10dc2:	|      move.l 16(sp),d0
   10dc6:	|      add.l d0,d0
   10dc8:	|      movea.l d0,a1
   10dca:	|      adda.l d0,a1
   10dcc:	|      lea 18688 <typeName>,a0
   10dd2:	|      move.l (0,a1,a0.l),d0
   10dd6:	|      move.l d0,-(sp)
   10dd8:	|      pea 16e23 <main_sludge.c.828d7d86+0x169>
   10dde:	|      jsr 102e0 <joinStrings>
   10de4:	|      addq.l #8,sp
   10de6:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   10dea:	|      movea.l 20(sp),a0
   10dee:	|      move.l (a0),d0
   10df0:	|      add.l d0,d0
   10df2:	|      movea.l d0,a1
   10df4:	|      adda.l d0,a1
   10df6:	|      lea 18688 <typeName>,a0
   10dfc:	|      move.l (0,a1,a0.l),d0
   10e00:	|      move.l d0,-(sp)
   10e02:	|      pea 16e65 <main_sludge.c.828d7d86+0x1ab>
   10e08:	|      jsr 102e0 <joinStrings>
   10e0e:	|      addq.l #8,sp
   10e10:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   10e12:	|      move.l (sp),-(sp)
   10e14:	|      move.l 8(sp),-(sp)
   10e18:	|      jsr 12e08 <KPrintF>
   10e1e:	|      addq.l #8,sp

		return FALSE;
   10e20:	|      clr.w d0
   10e22:	|  /-- bra.s 10e34 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   10e24:	\--|-> movea.l 20(sp),a0
   10e28:	   |   move.l 4(a0),d0
   10e2c:	   |   movea.l 12(sp),a0
   10e30:	   |   move.l d0,(a0)
	return TRUE;
   10e32:	   |   moveq #1,d0
}
   10e34:	   \-> addq.l #8,sp
   10e36:	       rts

00010e38 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   10e38:	move.l 8(sp),-(sp)
   10e3c:	jsr 46d0 <getNumberedString>
   10e42:	addq.l #4,sp
   10e44:	move.l d0,-(sp)
   10e46:	move.l 8(sp),-(sp)
   10e4a:	jsr 10fd6 <makeTextVar>
   10e50:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   10e52:	movea.l 4(sp),a0
   10e56:	move.l 4(a0),d0
   10e5a:	sne d0
   10e5c:	neg.b d0
   10e5e:	move.b d0,d0
   10e60:	andi.w #255,d0
}
   10e64:	rts

00010e66 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   10e66:	          subq.l #8,sp
    int size = stackSize(stacky);
   10e68:	          move.l 16(sp),-(sp)
   10e6c:	          jsr 11714 <stackSize>
   10e72:	          addq.l #4,sp
   10e74:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   10e78:	          move.l 4(sp),-(sp)
   10e7c:	          move.l 16(sp),-(sp)
   10e80:	          jsr 10ed0 <makeFastArraySize>
   10e86:	          addq.l #8,sp
   10e88:	          tst.w d0
   10e8a:	      /-- bne.s 10e90 <makeFastArrayFromStack+0x2a>
   10e8c:	      |   clr.w d0
   10e8e:	/-----|-- bra.s 10ecc <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   10e90:	|     \-> movea.l 16(sp),a0
   10e94:	|         move.l (a0),(sp)
    size = 0;
   10e96:	|         clr.l 4(sp)
    while (allV) {
   10e9a:	|     /-- bra.s 10ec6 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   10e9c:	|  /--|-> movea.l 12(sp),a0
   10ea0:	|  |  |   movea.l 4(a0),a0
   10ea4:	|  |  |   move.l (a0),d1
   10ea6:	|  |  |   move.l 4(sp),d0
   10eaa:	|  |  |   lsl.l #3,d0
   10eac:	|  |  |   add.l d0,d1
   10eae:	|  |  |   move.l (sp),d0
   10eb0:	|  |  |   move.l d1,-(sp)
   10eb2:	|  |  |   move.l d0,-(sp)
   10eb4:	|  |  |   jsr 11152 <copyMain>
   10eba:	|  |  |   addq.l #8,sp
        size++;
   10ebc:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   10ec0:	|  |  |   movea.l (sp),a0
   10ec2:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   10ec6:	|  |  \-> tst.l (sp)
   10ec8:	|  \----- bne.s 10e9c <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   10eca:	|         moveq #1,d0
}
   10ecc:	\-------> addq.l #8,sp
   10ece:	          rts

00010ed0 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   10ed0:	          lea -28(sp),sp
   10ed4:	          move.l a6,-(sp)
    if (size < 0) {
   10ed6:	          tst.l 40(sp)
   10eda:	      /-- bge.s 10ef0 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   10edc:	      |   pea 16eaa <main_sludge.c.828d7d86+0x1f0>
   10ee2:	      |   jsr 12e08 <KPrintF>
   10ee8:	      |   addq.l #4,sp
		return FALSE;
   10eea:	      |   clr.w d0
   10eec:	/-----|-- bra.w 10fce <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   10ef0:	|     \-> move.l 36(sp),-(sp)
   10ef4:	|         jsr 11002 <unlinkVar>
   10efa:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   10efc:	|         movea.l 36(sp),a0
   10f00:	|         moveq #10,d0
   10f02:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   10f04:	|         moveq #12,d0
   10f06:	|         move.l d0,24(sp)
   10f0a:	|         clr.l 20(sp)
   10f0e:	|         move.l 19c5a <SysBase>,d0
   10f14:	|         movea.l d0,a6
   10f16:	|         move.l 24(sp),d0
   10f1a:	|         move.l 20(sp),d1
   10f1e:	|         jsr -684(a6)
   10f22:	|         move.l d0,16(sp)
   10f26:	|         move.l 16(sp),d0
   10f2a:	|         movea.l 36(sp),a0
   10f2e:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   10f32:	|         movea.l 36(sp),a0
   10f36:	|         move.l 4(a0),d0
   10f3a:	|     /-- bne.s 10f42 <makeFastArraySize+0x72>
   10f3c:	|     |   clr.w d0
   10f3e:	+-----|-- bra.w 10fce <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   10f42:	|     \-> move.l 40(sp),d0
   10f46:	|         lsl.l #3,d0
   10f48:	|         move.l d0,12(sp)
   10f4c:	|         clr.l 8(sp)
   10f50:	|         move.l 19c5a <SysBase>,d0
   10f56:	|         movea.l d0,a6
   10f58:	|         move.l 12(sp),d0
   10f5c:	|         move.l 8(sp),d1
   10f60:	|         jsr -684(a6)
   10f64:	|         move.l d0,4(sp)
   10f68:	|         move.l 4(sp),d0
   10f6c:	|         movea.l 36(sp),a0
   10f70:	|         movea.l 4(a0),a0
   10f74:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   10f76:	|         movea.l 36(sp),a0
   10f7a:	|         movea.l 4(a0),a0
   10f7e:	|         move.l (a0),d0
   10f80:	|     /-- bne.s 10f86 <makeFastArraySize+0xb6>
   10f82:	|     |   clr.w d0
   10f84:	+-----|-- bra.s 10fce <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   10f86:	|     \-> clr.l 28(sp)
   10f8a:	|     /-- bra.s 10fa6 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   10f8c:	|  /--|-> movea.l 36(sp),a0
   10f90:	|  |  |   movea.l 4(a0),a0
   10f94:	|  |  |   move.l (a0),d1
   10f96:	|  |  |   move.l 28(sp),d0
   10f9a:	|  |  |   lsl.l #3,d0
   10f9c:	|  |  |   movea.l d1,a0
   10f9e:	|  |  |   adda.l d0,a0
   10fa0:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   10fa2:	|  |  |   addq.l #1,28(sp)
   10fa6:	|  |  \-> move.l 28(sp),d0
   10faa:	|  |      cmp.l 40(sp),d0
   10fae:	|  \----- blt.s 10f8c <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   10fb0:	|         movea.l 36(sp),a0
   10fb4:	|         movea.l 4(a0),a0
   10fb8:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   10fbe:	|         movea.l 36(sp),a0
   10fc2:	|         movea.l 4(a0),a0
   10fc6:	|         moveq #1,d0
   10fc8:	|         move.l d0,8(a0)
    return TRUE;
   10fcc:	|         moveq #1,d0
}
   10fce:	\-------> movea.l (sp)+,a6
   10fd0:	          lea 28(sp),sp
   10fd4:	          rts

00010fd6 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   10fd6:	move.l 4(sp),-(sp)
   10fda:	jsr 11002 <unlinkVar>
   10fe0:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   10fe2:	movea.l 4(sp),a0
   10fe6:	moveq #3,d0
   10fe8:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   10fea:	move.l 8(sp),-(sp)
   10fee:	jsr b8 <copyString>
   10ff4:	addq.l #4,sp
   10ff6:	movea.l 4(sp),a0
   10ffa:	move.l d0,4(a0)
}
   10ffe:	nop
   11000:	rts

00011002 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   11002:	                      lea -16(sp),sp
   11006:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   11008:	                      movea.l 24(sp),a0
   1100c:	                      move.l (a0),d0
   1100e:	                      moveq #10,d1
   11010:	                      cmp.l d0,d1
   11012:	            /-------- beq.w 110ca <unlinkVar+0xc8>
   11016:	            |         moveq #10,d1
   11018:	            |         cmp.l d0,d1
   1101a:	/-----------|-------- bcs.w 1113e <unlinkVar+0x13c>
   1101e:	|           |         moveq #8,d1
   11020:	|           |         cmp.l d0,d1
   11022:	|  /--------|-------- beq.w 1112a <unlinkVar+0x128>
   11026:	|  |        |         moveq #8,d1
   11028:	|  |        |         cmp.l d0,d1
   1102a:	+--|--------|-------- bcs.w 1113e <unlinkVar+0x13c>
   1102e:	|  |        |         moveq #3,d1
   11030:	|  |        |         cmp.l d0,d1
   11032:	|  |        |     /-- beq.s 1103e <unlinkVar+0x3c>
   11034:	|  |        |     |   moveq #6,d1
   11036:	|  |        |     |   cmp.l d0,d1
   11038:	|  |        |  /--|-- beq.s 11064 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   1103a:	+--|--------|--|--|-- bra.w 1113e <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   1103e:	|  |        |  |  \-> movea.l 24(sp),a0
   11042:	|  |        |  |      move.l 4(a0),4(sp)
   11048:	|  |        |  |      move.l 19c5a <SysBase>,d0
   1104e:	|  |        |  |      movea.l d0,a6
   11050:	|  |        |  |      movea.l 4(sp),a1
   11054:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   11058:	|  |        |  |      movea.l 24(sp),a0
   1105c:	|  |        |  |      clr.l 4(a0)
		break;
   11060:	|  |  /-----|--|----- bra.w 11148 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   11064:	|  |  |     |  \----> movea.l 24(sp),a0
   11068:	|  |  |     |         movea.l 4(a0),a0
   1106c:	|  |  |     |         move.l 8(a0),d0
   11070:	|  |  |     |         subq.l #1,d0
   11072:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   11076:	|  |  |     |         movea.l 24(sp),a0
   1107a:	|  |  |     |         movea.l 4(a0),a0
   1107e:	|  |  |     |         move.l 8(a0),d0
   11082:	|  |  |  /--|-------- bgt.w 11142 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   11086:	|  |  |  |  |     /-- bra.s 1109a <unlinkVar+0x98>
   11088:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   1108c:	|  |  |  |  |  |  |   move.l 4(a0),d0
   11090:	|  |  |  |  |  |  |   move.l d0,-(sp)
   11092:	|  |  |  |  |  |  |   jsr 11738 <trimStack>
   11098:	|  |  |  |  |  |  |   addq.l #4,sp
   1109a:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   1109e:	|  |  |  |  |  |      movea.l 4(a0),a0
   110a2:	|  |  |  |  |  |      move.l (a0),d0
   110a4:	|  |  |  |  |  \----- bne.s 11088 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   110a6:	|  |  |  |  |         movea.l 24(sp),a0
   110aa:	|  |  |  |  |         move.l 4(a0),8(sp)
   110b0:	|  |  |  |  |         move.l 19c5a <SysBase>,d0
   110b6:	|  |  |  |  |         movea.l d0,a6
   110b8:	|  |  |  |  |         movea.l 8(sp),a1
   110bc:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   110c0:	|  |  |  |  |         movea.l 24(sp),a0
   110c4:	|  |  |  |  |         clr.l 4(a0)
		break;
   110c8:	|  |  |  +--|-------- bra.s 11142 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   110ca:	|  |  |  |  \-------> movea.l 24(sp),a0
   110ce:	|  |  |  |            movea.l 4(a0),a0
   110d2:	|  |  |  |            move.l 8(a0),d0
   110d6:	|  |  |  |            subq.l #1,d0
   110d8:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   110dc:	|  |  |  |            movea.l 24(sp),a0
   110e0:	|  |  |  |            movea.l 4(a0),a0
   110e4:	|  |  |  |            move.l 8(a0),d0
   110e8:	|  |  |  |        /-- bgt.s 11146 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   110ea:	|  |  |  |        |   movea.l 24(sp),a0
   110ee:	|  |  |  |        |   movea.l 4(a0),a0
   110f2:	|  |  |  |        |   move.l (a0),16(sp)
   110f6:	|  |  |  |        |   move.l 19c5a <SysBase>,d0
   110fc:	|  |  |  |        |   movea.l d0,a6
   110fe:	|  |  |  |        |   movea.l 16(sp),a1
   11102:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   11106:	|  |  |  |        |   movea.l 24(sp),a0
   1110a:	|  |  |  |        |   move.l 4(a0),12(sp)
   11110:	|  |  |  |        |   move.l 19c5a <SysBase>,d0
   11116:	|  |  |  |        |   movea.l d0,a6
   11118:	|  |  |  |        |   movea.l 12(sp),a1
   1111c:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   11120:	|  |  |  |        |   movea.l 24(sp),a0
   11124:	|  |  |  |        |   clr.l 4(a0)
		break;
   11128:	|  |  |  |        +-- bra.s 11146 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   1112a:	|  \--|--|--------|-> movea.l 24(sp),a0
   1112e:	|     |  |        |   move.l 4(a0),d0
   11132:	|     |  |        |   move.l d0,-(sp)
   11134:	|     |  |        |   jsr 683c <deleteAnim>
   1113a:	|     |  |        |   addq.l #4,sp
		break;
   1113c:	|     +--|--------|-- bra.s 11148 <unlinkVar+0x146>
		break;
   1113e:	\-----|--|--------|-> nop
   11140:	      +--|--------|-- bra.s 11148 <unlinkVar+0x146>
		break;
   11142:	      |  \--------|-> nop
   11144:	      +-----------|-- bra.s 11148 <unlinkVar+0x146>
		break;
   11146:	      |           \-> nop
	}
}
   11148:	      \-------------> nop
   1114a:	                      movea.l (sp)+,a6
   1114c:	                      lea 16(sp),sp
   11150:	                      rts

00011152 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   11152:	       movea.l 4(sp),a0
   11156:	       move.l (a0),d0
   11158:	       movea.l 8(sp),a0
   1115c:	       move.l d0,(a0)
	switch (to->varType) {
   1115e:	       movea.l 8(sp),a0
   11162:	       move.l (a0),d0
   11164:	       moveq #10,d1
   11166:	       cmp.l d0,d1
   11168:	/----- bcs.w 1125a <copyMain+0x108>
   1116c:	|      add.l d0,d0
   1116e:	|      movea.l d0,a0
   11170:	|      adda.l #70012,a0
   11176:	|      move.w (a0),d0
   11178:	|      jmp (1117c <copyMain+0x2a>,pc,d0.w)
   1117c:	|      .short 0x00da
   1117e:	|      ori.b #22,(a6)
   11182:	|      ori.w #22,(a4)
   11186:	|      ori.b #-126,(a6)
   1118a:	|      ori.b #-68,(a6)
   1118e:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   11196:	|      move.l 4(a0),d0
   1119a:	|      movea.l 8(sp),a0
   1119e:	|      move.l d0,4(a0)
		return TRUE;
   111a2:	|      moveq #1,d0
   111a4:	|  /-- bra.w 1126c <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   111a8:	|  |   movea.l 4(sp),a0
   111ac:	|  |   move.l 4(a0),d0
   111b0:	|  |   movea.l 8(sp),a0
   111b4:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   111b8:	|  |   movea.l 8(sp),a0
   111bc:	|  |   movea.l 4(a0),a0
   111c0:	|  |   move.l 8(a0),d0
   111c4:	|  |   addq.l #1,d0
   111c6:	|  |   move.l d0,8(a0)
		return TRUE;
   111ca:	|  |   moveq #1,d0
   111cc:	|  +-- bra.w 1126c <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   111d0:	|  |   movea.l 4(sp),a0
   111d4:	|  |   move.l 4(a0),d0
   111d8:	|  |   move.l d0,-(sp)
   111da:	|  |   jsr b8 <copyString>
   111e0:	|  |   addq.l #4,sp
   111e2:	|  |   movea.l 8(sp),a0
   111e6:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   111ea:	|  |   movea.l 8(sp),a0
   111ee:	|  |   move.l 4(a0),d0
   111f2:	|  |   sne d0
   111f4:	|  |   neg.b d0
   111f6:	|  |   move.b d0,d0
   111f8:	|  |   andi.w #255,d0
   111fc:	|  +-- bra.s 1126c <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   111fe:	|  |   movea.l 4(sp),a0
   11202:	|  |   move.l 4(a0),d0
   11206:	|  |   movea.l 8(sp),a0
   1120a:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   1120e:	|  |   movea.l 8(sp),a0
   11212:	|  |   movea.l 4(a0),a0
   11216:	|  |   move.l 8(a0),d0
   1121a:	|  |   addq.l #1,d0
   1121c:	|  |   move.l d0,8(a0)
		return TRUE;
   11220:	|  |   moveq #1,d0
   11222:	|  +-- bra.s 1126c <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   11224:	|  |   movea.l 4(sp),a0
   11228:	|  |   move.l 4(a0),d0
   1122c:	|  |   movea.l 8(sp),a0
   11230:	|  |   move.l d0,4(a0)
		return TRUE;
   11234:	|  |   moveq #1,d0
   11236:	|  +-- bra.s 1126c <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   11238:	|  |   movea.l 4(sp),a0
   1123c:	|  |   move.l 4(a0),d0
   11240:	|  |   move.l d0,-(sp)
   11242:	|  |   jsr 6480 <copyAnim>
   11248:	|  |   addq.l #4,sp
   1124a:	|  |   movea.l 8(sp),a0
   1124e:	|  |   move.l d0,4(a0)
		return TRUE;
   11252:	|  |   moveq #1,d0
   11254:	|  +-- bra.s 1126c <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   11256:	|  |   moveq #1,d0
   11258:	|  +-- bra.s 1126c <copyMain+0x11a>

		default:
		break;
   1125a:	\--|-> nop
	}
	KPrintF("Unknown value type");
   1125c:	   |   pea 16efb <main_sludge.c.828d7d86+0x241>
   11262:	   |   jsr 12e08 <KPrintF>
   11268:	   |   addq.l #4,sp
	return FALSE;
   1126a:	   |   clr.w d0
}
   1126c:	   \-> rts

0001126e <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   1126e:	move.l 8(sp),-(sp)
   11272:	jsr 11002 <unlinkVar>
   11278:	addq.l #4,sp
	return copyMain(from, to);
   1127a:	move.l 8(sp),-(sp)
   1127e:	move.l 8(sp),-(sp)
   11282:	jsr 11152 <copyMain>
   11288:	addq.l #8,sp
}
   1128a:	rts

0001128c <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   1128c:	       movea.l 4(sp),a0
   11290:	       move.l (a0),d0
   11292:	       moveq #8,d1
   11294:	       cmp.l d0,d1
   11296:	   /-- bne.s 112ac <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   11298:	   |   movea.l 4(sp),a0
   1129c:	   |   move.l 4(a0),d0
   112a0:	   |   move.l d0,-(sp)
   112a2:	   |   jsr 6480 <copyAnim>
   112a8:	   |   addq.l #4,sp
   112aa:	/--|-- bra.s 112f2 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   112ac:	|  \-> movea.l 4(sp),a0
   112b0:	|      move.l (a0),d0
   112b2:	|      moveq #1,d1
   112b4:	|      cmp.l d0,d1
   112b6:	|  /-- bne.s 112ca <getAnimationFromVar+0x3e>
   112b8:	|  |   movea.l 4(sp),a0
   112bc:	|  |   move.l 4(a0),d0
   112c0:	|  +-- bne.s 112ca <getAnimationFromVar+0x3e>
		return makeNullAnim();
   112c2:	|  |   jsr 7628 <makeNullAnim>
   112c8:	+--|-- bra.s 112f2 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   112ca:	|  \-> movea.l 4(sp),a0
   112ce:	|      move.l (a0),d0
   112d0:	|      add.l d0,d0
   112d2:	|      movea.l d0,a1
   112d4:	|      adda.l d0,a1
   112d6:	|      lea 18688 <typeName>,a0
   112dc:	|      move.l (0,a1,a0.l),d0
   112e0:	|      move.l d0,-(sp)
   112e2:	|      pea 16de7 <main_sludge.c.828d7d86+0x12d>
   112e8:	|      jsr 12e08 <KPrintF>
   112ee:	|      addq.l #8,sp
	return NULL;
   112f0:	|      moveq #0,d0
}
   112f2:	\----> rts

000112f4 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   112f4:	       movea.l 4(sp),a0
   112f8:	       move.l (a0),d0
   112fa:	       moveq #10,d1
   112fc:	       cmp.l d0,d1
   112fe:	/----- bcs.w 11384 <getBoolean+0x90>
   11302:	|      add.l d0,d0
   11304:	|      movea.l d0,a0
   11306:	|      adda.l #70418,a0
   1130c:	|      move.w (a0),d0
   1130e:	|      jmp (11312 <getBoolean+0x1e>,pc,d0.w)
   11312:	|      ori.b #26,(a6)
   11316:	|      ori.w #68,(114,a2,d0.w)
   1131c:	|      ori.w #46,(114,a2,d0.w)
   11322:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   11328:	|      clr.w d0
   1132a:	|  /-- bra.s 11388 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   1132c:	|  |   movea.l 4(sp),a0
   11330:	|  |   move.l 4(a0),d0
   11334:	|  |   sne d0
   11336:	|  |   neg.b d0
   11338:	|  |   move.b d0,d0
   1133a:	|  |   andi.w #255,d0
   1133e:	|  +-- bra.s 11388 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   11340:	|  |   movea.l 4(sp),a0
   11344:	|  |   movea.l 4(a0),a0
   11348:	|  |   move.l (a0),d0
   1134a:	|  |   sne d0
   1134c:	|  |   neg.b d0
   1134e:	|  |   move.b d0,d0
   11350:	|  |   andi.w #255,d0
   11354:	|  +-- bra.s 11388 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   11356:	|  |   movea.l 4(sp),a0
   1135a:	|  |   movea.l 4(a0),a0
   1135e:	|  |   move.b (a0),d0
   11360:	|  |   sne d0
   11362:	|  |   neg.b d0
   11364:	|  |   move.b d0,d0
   11366:	|  |   andi.w #255,d0
   1136a:	|  +-- bra.s 11388 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   1136c:	|  |   movea.l 4(sp),a0
   11370:	|  |   movea.l 4(a0),a0
   11374:	|  |   move.l 4(a0),d0
   11378:	|  |   sne d0
   1137a:	|  |   neg.b d0
   1137c:	|  |   move.b d0,d0
   1137e:	|  |   andi.w #255,d0
   11382:	|  +-- bra.s 11388 <getBoolean+0x94>

		default:
		break;
   11384:	\--|-> nop
	}
	return TRUE;
   11386:	   |   moveq #1,d0
}
   11388:	   \-> rts

0001138a <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   1138a:	      /----------> lea -76(sp),sp
   1138e:	      |            move.l a6,-(sp)
	switch (from->varType) {
   11390:	      |            movea.l 84(sp),a0
   11394:	      |            move.l (a0),d0
   11396:	      |            moveq #10,d1
   11398:	      |            cmp.l d0,d1
   1139a:	/-----|----------- bcs.w 11638 <getTextFromAnyVar+0x2ae>
   1139e:	|     |            add.l d0,d0
   113a0:	|     |            movea.l d0,a0
   113a2:	|     |            adda.l #70574,a0
   113a8:	|     |            move.w (a0),d0
   113aa:	|     |            jmp (113ae <getTextFromAnyVar+0x24>,pc,d0.w)
   113ae:	|     |            .short 0x028a
   113b0:	|     |            bset d0,(a0)+
   113b2:	|     |            .short 0x028a
   113b4:	|     |            ori.b #-118,(a6)
   113b8:	|     |            andi.b #8,ccr
   113bc:	|     |            andi.w #650,-(a0)
   113c0:	|     |            .short 0x028a
   113c2:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   113c8:	|     |            move.l 4(a0),d0
   113cc:	|     |            move.l d0,-(sp)
   113ce:	|     |            jsr b8 <copyString>
   113d4:	|     |            addq.l #4,sp
   113d6:	|  /--|----------- bra.w 1165a <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   113da:	|  |  |            pea 16f0e <main_sludge.c.828d7d86+0x254>
   113e0:	|  |  |            jsr b8 <copyString>
   113e6:	|  |  |            addq.l #4,sp
   113e8:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   113ec:	|  |  |            clr.l 72(sp)
   113f0:	|  |  |     /----- bra.w 1149a <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   113f4:	|  |  |  /--|----> pea 16f14 <main_sludge.c.828d7d86+0x25a>
   113fa:	|  |  |  |  |      move.l 80(sp),-(sp)
   113fe:	|  |  |  |  |      jsr 102e0 <joinStrings>
   11404:	|  |  |  |  |      addq.l #8,sp
   11406:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   1140a:	|  |  |  |  |  /-- bne.s 11412 <getTextFromAnyVar+0x88>
   1140c:	|  |  |  |  |  |   moveq #0,d0
   1140e:	|  +--|--|--|--|-- bra.w 1165a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   11412:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   11418:	|  |  |  |  |      move.l 19c5a <SysBase>,d0
   1141e:	|  |  |  |  |      movea.l d0,a6
   11420:	|  |  |  |  |      movea.l 56(sp),a1
   11424:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   11428:	|  |  |  |  |      movea.l 84(sp),a0
   1142c:	|  |  |  |  |      movea.l 4(a0),a0
   11430:	|  |  |  |  |      move.l (a0),d1
   11432:	|  |  |  |  |      move.l 72(sp),d0
   11436:	|  |  |  |  |      lsl.l #3,d0
   11438:	|  |  |  |  |      add.l d1,d0
   1143a:	|  |  |  |  |      move.l d0,-(sp)
   1143c:	|  |  +--|--|----- jsr 1138a <getTextFromAnyVar>(pc)
   11440:	|  |  |  |  |      addq.l #4,sp
   11442:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   11446:	|  |  |  |  |      move.l 52(sp),-(sp)
   1144a:	|  |  |  |  |      move.l 64(sp),-(sp)
   1144e:	|  |  |  |  |      jsr 102e0 <joinStrings>
   11454:	|  |  |  |  |      addq.l #8,sp
   11456:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   1145a:	|  |  |  |  |  /-- bne.s 11462 <getTextFromAnyVar+0xd8>
   1145c:	|  |  |  |  |  |   moveq #0,d0
   1145e:	|  +--|--|--|--|-- bra.w 1165a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   11462:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   11468:	|  |  |  |  |      move.l 19c5a <SysBase>,d0
   1146e:	|  |  |  |  |      movea.l d0,a6
   11470:	|  |  |  |  |      movea.l 48(sp),a1
   11474:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   11478:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   1147c:	|  |  |  |  |      move.l 60(sp),44(sp)
   11482:	|  |  |  |  |      move.l 19c5a <SysBase>,d0
   11488:	|  |  |  |  |      movea.l d0,a6
   1148a:	|  |  |  |  |      movea.l 44(sp),a1
   1148e:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   11492:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   11496:	|  |  |  |  |      addq.l #1,72(sp)
   1149a:	|  |  |  |  \----> movea.l 84(sp),a0
   1149e:	|  |  |  |         movea.l 4(a0),a0
   114a2:	|  |  |  |         move.l 4(a0),d0
   114a6:	|  |  |  |         cmp.l 72(sp),d0
   114aa:	|  |  |  \-------- bgt.w 113f4 <getTextFromAnyVar+0x6a>
			}
			return builder;
   114ae:	|  |  |            move.l 76(sp),d0
   114b2:	|  +--|----------- bra.w 1165a <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   114b6:	|  |  |            pea 16f16 <main_sludge.c.828d7d86+0x25c>
   114bc:	|  |  |            jsr b8 <copyString>
   114c2:	|  |  |            addq.l #4,sp
   114c4:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   114c8:	|  |  |            movea.l 84(sp),a0
   114cc:	|  |  |            movea.l 4(a0),a0
   114d0:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   114d4:	|  |  |     /----- bra.w 11576 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   114d8:	|  |  |  /--|----> pea 16f14 <main_sludge.c.828d7d86+0x25a>
   114de:	|  |  |  |  |      move.l 72(sp),-(sp)
   114e2:	|  |  |  |  |      jsr 102e0 <joinStrings>
   114e8:	|  |  |  |  |      addq.l #8,sp
   114ea:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   114ee:	|  |  |  |  |  /-- bne.s 114f6 <getTextFromAnyVar+0x16c>
   114f0:	|  |  |  |  |  |   moveq #0,d0
   114f2:	|  +--|--|--|--|-- bra.w 1165a <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   114f6:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   114fc:	|  |  |  |  |      move.l 19c5a <SysBase>,d0
   11502:	|  |  |  |  |      movea.l d0,a6
   11504:	|  |  |  |  |      movea.l 32(sp),a1
   11508:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   1150c:	|  |  |  |  |      move.l 64(sp),d0
   11510:	|  |  |  |  |      move.l d0,-(sp)
   11512:	|  |  \--|--|----- jsr 1138a <getTextFromAnyVar>(pc)
   11516:	|  |     |  |      addq.l #4,sp
   11518:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   1151c:	|  |     |  |      move.l 28(sp),-(sp)
   11520:	|  |     |  |      move.l 40(sp),-(sp)
   11524:	|  |     |  |      jsr 102e0 <joinStrings>
   1152a:	|  |     |  |      addq.l #8,sp
   1152c:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   11530:	|  |     |  |  /-- bne.s 11538 <getTextFromAnyVar+0x1ae>
   11532:	|  |     |  |  |   moveq #0,d0
   11534:	|  +-----|--|--|-- bra.w 1165a <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   11538:	|  |     |  |  \-> move.l 28(sp),24(sp)
   1153e:	|  |     |  |      move.l 19c5a <SysBase>,d0
   11544:	|  |     |  |      movea.l d0,a6
   11546:	|  |     |  |      movea.l 24(sp),a1
   1154a:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   1154e:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   11552:	|  |     |  |      move.l 36(sp),20(sp)
   11558:	|  |     |  |      move.l 19c5a <SysBase>,d0
   1155e:	|  |     |  |      movea.l d0,a6
   11560:	|  |     |  |      movea.l 20(sp),a1
   11564:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   11568:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   1156c:	|  |     |  |      movea.l 64(sp),a0
   11570:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   11576:	|  |     |  \----> tst.l 64(sp)
   1157a:	|  |     \-------- bne.w 114d8 <getTextFromAnyVar+0x14e>
			}
			return builder;
   1157e:	|  |               move.l 68(sp),d0
   11582:	|  +-------------- bra.w 1165a <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   11586:	|  |               moveq #10,d0
   11588:	|  |               move.l d0,16(sp)
   1158c:	|  |               clr.l 12(sp)
   11590:	|  |               move.l 19c5a <SysBase>,d0
   11596:	|  |               movea.l d0,a6
   11598:	|  |               move.l 16(sp),d0
   1159c:	|  |               move.l 12(sp),d1
   115a0:	|  |               jsr -684(a6)
   115a4:	|  |               move.l d0,8(sp)
   115a8:	|  |               move.l 8(sp),d0
   115ac:	|  |               move.l d0,4(sp)
			if (! buff) {
   115b0:	|  |           /-- bne.s 115c6 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   115b2:	|  |           |   pea 16f1d <main_sludge.c.828d7d86+0x263>
   115b8:	|  |           |   jsr 12e08 <KPrintF>
   115be:	|  |           |   addq.l #4,sp
				return NULL;
   115c0:	|  |           |   moveq #0,d0
   115c2:	|  +-----------|-- bra.w 1165a <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   115c6:	|  |           \-> movea.l 84(sp),a0
   115ca:	|  |               move.l 4(a0),d0
   115ce:	|  |               move.l d0,-(sp)
   115d0:	|  |               pea 16f47 <main_sludge.c.828d7d86+0x28d>
   115d6:	|  |               move.l 12(sp),-(sp)
   115da:	|  |               jsr 105be <sprintf>
   115e0:	|  |               lea 12(sp),sp
			return buff;
   115e4:	|  |               move.l 4(sp),d0
   115e8:	|  +-------------- bra.s 1165a <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   115ea:	|  |               movea.l 84(sp),a0
   115ee:	|  |               move.l 4(a0),d0
   115f2:	|  |               move.l d0,-(sp)
   115f4:	|  |               jsr 1986 <resourceNameFromNum>
   115fa:	|  |               addq.l #4,sp
   115fc:	|  |               move.l d0,-(sp)
   115fe:	|  |               pea 14253 <PutChar+0x83f>
   11604:	|  |               jsr 102e0 <joinStrings>
   1160a:	|  |               addq.l #8,sp
   1160c:	|  +-------------- bra.s 1165a <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   1160e:	|  |               movea.l 84(sp),a0
   11612:	|  |               move.l 4(a0),d0
   11616:	|  |               move.l d0,-(sp)
   11618:	|  |               jsr 9c06 <findObjectType>
   1161e:	|  |               addq.l #4,sp
   11620:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   11624:	+--|-------------- beq.s 11638 <getTextFromAnyVar+0x2ae>
   11626:	|  |               movea.l 40(sp),a0
   1162a:	|  |               move.l (a0),d0
   1162c:	|  |               move.l d0,-(sp)
   1162e:	|  |               jsr b8 <copyString>
   11634:	|  |               addq.l #4,sp
   11636:	|  +-------------- bra.s 1165a <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   11638:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1163a:	   |               movea.l 84(sp),a0
   1163e:	   |               move.l (a0),d0
   11640:	   |               add.l d0,d0
   11642:	   |               movea.l d0,a1
   11644:	   |               adda.l d0,a1
   11646:	   |               lea 18688 <typeName>,a0
   1164c:	   |               move.l (0,a1,a0.l),d0
   11650:	   |               move.l d0,-(sp)
   11652:	   |               jsr b8 <copyString>
   11658:	   |               addq.l #4,sp
}
   1165a:	   \-------------> movea.l (sp)+,a6
   1165c:	                   lea 76(sp),sp
   11660:	                   rts

00011662 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   11662:	move.l 4(sp),-(sp)
   11666:	jsr 11002 <unlinkVar>
   1166c:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1166e:	movea.l 4(sp),a0
   11672:	moveq #8,d0
   11674:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   11676:	movea.l 4(sp),a0
   1167a:	move.l 8(sp),4(a0)
}
   11680:	nop
   11682:	rts

00011684 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   11684:	move.l 4(sp),-(sp)
   11688:	jsr 11002 <unlinkVar>
   1168e:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   11690:	movea.l 4(sp),a0
   11694:	moveq #9,d0
   11696:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   11698:	movea.l 4(sp),a0
   1169c:	move.l 8(sp),4(a0)
}
   116a2:	nop
   116a4:	rts

000116a6 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   116a6:	move.l 4(sp),-(sp)
   116aa:	jsr 11002 <unlinkVar>
   116b0:	addq.l #4,sp
	thisVar->varType = vT;
   116b2:	movea.l 4(sp),a0
   116b6:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   116ba:	movea.l 4(sp),a0
   116be:	move.l 12(sp),4(a0)
}
   116c4:	nop
   116c6:	rts

000116c8 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   116c8:	      /-- bra.s 116da <stackGetByIndex+0x12>
        vS = vS->next;
   116ca:	/-----|-> movea.l 4(sp),a0
   116ce:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   116d4:	|     +-- bne.s 116da <stackGetByIndex+0x12>
            return NULL;
   116d6:	|     |   moveq #0,d0
   116d8:	|  /--|-- bra.s 116ee <stackGetByIndex+0x26>
    while (theIndex--) {
   116da:	|  |  \-> move.l 8(sp),d0
   116de:	|  |      move.l d0,d1
   116e0:	|  |      subq.l #1,d1
   116e2:	|  |      move.l d1,8(sp)
   116e6:	|  |      tst.l d0
   116e8:	\--|----- bne.s 116ca <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   116ea:	   |      move.l 4(sp),d0
}
   116ee:	   \----> rts

000116f0 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   116f0:	          tst.l 4(sp)
   116f4:	      /-- bne.s 11704 <stackFindLast+0x14>
		return NULL;
   116f6:	      |   moveq #0,d0
   116f8:	/-----|-- bra.s 11712 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   116fa:	|  /--|-> movea.l 4(sp),a0
   116fe:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   11704:	|  |  \-> movea.l 4(sp),a0
   11708:	|  |      move.l 8(a0),d0
   1170c:	|  \----- bne.s 116fa <stackFindLast+0xa>

	return hunt;
   1170e:	|         move.l 4(sp),d0
}
   11712:	\-------> rts

00011714 <stackSize>:

int stackSize (const struct stackHandler * me) {
   11714:	       subq.l #8,sp
	int r = 0;
   11716:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1171a:	       movea.l 12(sp),a0
   1171e:	       move.l (a0),(sp)
	while (a) {
   11720:	   /-- bra.s 1172c <stackSize+0x18>
		r ++;
   11722:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   11726:	|  |   movea.l (sp),a0
   11728:	|  |   move.l 8(a0),(sp)
	while (a) {
   1172c:	|  \-> tst.l (sp)
   1172e:	\----- bne.s 11722 <stackSize+0xe>
	}
	return r;
   11730:	       move.l 4(sp),d0
}
   11734:	       addq.l #8,sp
   11736:	       rts

00011738 <trimStack>:

void trimStack (struct variableStack ** stack) {
   11738:	subq.l #8,sp
   1173a:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   1173c:	movea.l 16(sp),a0
   11740:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   11744:	movea.l 16(sp),a0
   11748:	movea.l (a0),a0
   1174a:	move.l 8(a0),d0
   1174e:	movea.l 16(sp),a0
   11752:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   11754:	move.l 8(sp),d0
   11758:	move.l d0,-(sp)
   1175a:	jsr 11002 <unlinkVar>
   11760:	addq.l #4,sp
	FreeVec(killMe);
   11762:	move.l 8(sp),4(sp)
   11768:	move.l 19c5a <SysBase>,d0
   1176e:	movea.l d0,a6
   11770:	movea.l 4(sp),a1
   11774:	jsr -690(a6)
   11778:	nop
   1177a:	movea.l (sp)+,a6
   1177c:	addq.l #8,sp
   1177e:	rts

00011780 <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   11780:	pea 16f4a <main_sludge.c.828d7d86+0x290>
   11786:	jsr 12e08 <KPrintF>
   1178c:	addq.l #4,sp
	return FALSE;
   1178e:	clr.w d0
}
   11790:	rts

00011792 <stringWidth>:

int stringWidth (char * theText) {
   11792:	       subq.l #8,sp
	int a = 0;
   11794:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   11798:	       clr.l (sp)

	if (! fontTableSize) return 0;
   1179a:	       move.l 19d5a <fontTableSize>,d0
   117a0:	/----- bne.s 117a6 <stringWidth+0x14>
   117a2:	|      moveq #0,d0
   117a4:	|  /-- bra.s 117a8 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   117a6:	\--|-> move.l (sp),d0
}
   117a8:	   \-> addq.l #8,sp
   117aa:	       rts

000117ac <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   117ac:	pea 16f71 <main_sludge.c.828d7d86+0x2b7>
   117b2:	jsr 12e08 <KPrintF>
   117b8:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   117ba:	moveq #1,d0
}
   117bc:	rts

000117be <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   117be:	       lea -16(sp),sp
   117c2:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   117c4:	       moveq #36,d0
   117c6:	       move.l d0,16(sp)
   117ca:	       clr.l 12(sp)
   117ce:	       move.l 19c5a <SysBase>,d0
   117d4:	       movea.l d0,a6
   117d6:	       move.l 16(sp),d0
   117da:	       move.l 12(sp),d1
   117de:	       jsr -684(a6)
   117e2:	       move.l d0,8(sp)
   117e6:	       move.l 8(sp),d0
   117ea:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   117ee:	   /-- bne.s 117f6 <addScreenRegion+0x38>
   117f0:	   |   clr.w d0
   117f2:	/--|-- bra.w 11876 <addScreenRegion+0xb8>
    newRegion->di = di;
   117f6:	|  \-> movea.l 4(sp),a0
   117fa:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   11800:	|      movea.l 4(sp),a0
   11804:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   11808:	|      movea.l 4(sp),a0
   1180c:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   11812:	|      movea.l 4(sp),a0
   11816:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   1181c:	|      movea.l 4(sp),a0
   11820:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   11826:	|      movea.l 4(sp),a0
   1182a:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   11830:	|      movea.l 4(sp),a0
   11834:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   1183a:	|      move.l 52(sp),-(sp)
   1183e:	|      jsr 9cf6 <loadObjectType>
   11844:	|      addq.l #4,sp
   11846:	|      movea.l 4(sp),a0
   1184a:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   1184e:	|      move.l 19d5e <allScreenRegions>,d0
   11854:	|      movea.l 4(sp),a0
   11858:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   1185c:	|      move.l 4(sp),19d5e <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   11864:	|      movea.l 4(sp),a0
   11868:	|      move.l 28(a0),d0
   1186c:	|      sne d0
   1186e:	|      neg.b d0
   11870:	|      move.b d0,d0
   11872:	|      andi.w #255,d0
}
   11876:	\----> movea.l (sp)+,a6
   11878:	       lea 16(sp),sp
   1187c:	       rts

0001187e <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1187e:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   11880:	             move.l 19d5e <allScreenRegions>,(sp)

	while (thisRegion) {
   11886:	   /-------- bra.s 118a2 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   11888:	/--|-------> movea.l (sp),a0
   1188a:	|  |         movea.l 28(a0),a0
   1188e:	|  |         move.l 4(a0),d0
   11892:	|  |         cmp.l 8(sp),d0
   11896:	|  |     /-- bne.s 1189c <getRegionForObject+0x1e>
			return thisRegion;
   11898:	|  |     |   move.l (sp),d0
   1189a:	|  |  /--|-- bra.s 118a8 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   1189c:	|  |  |  \-> movea.l (sp),a0
   1189e:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   118a2:	|  \--|----> tst.l (sp)
   118a4:	\-----|----- bne.s 11888 <getRegionForObject+0xa>
	}

	return NULL;
   118a6:	      |      moveq #0,d0
}
   118a8:	      \----> addq.l #4,sp
   118aa:	             rts

000118ac <killAllRegions>:

void killAllRegions () {
   118ac:	       subq.l #8,sp
   118ae:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   118b0:	   /-- bra.s 118f2 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   118b2:	/--|-> move.l 19d5e <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   118ba:	|  |   movea.l 19d5e <allScreenRegions>,a0
   118c0:	|  |   move.l 32(a0),d0
   118c4:	|  |   move.l d0,19d5e <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   118ca:	|  |   movea.l 8(sp),a0
   118ce:	|  |   move.l 28(a0),d0
   118d2:	|  |   move.l d0,-(sp)
   118d4:	|  |   jsr 9fae <removeObjectType>
   118da:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   118dc:	|  |   move.l 8(sp),4(sp)
   118e2:	|  |   move.l 19c5a <SysBase>,d0
   118e8:	|  |   movea.l d0,a6
   118ea:	|  |   movea.l 4(sp),a1
   118ee:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   118f2:	|  \-> move.l 19d5e <allScreenRegions>,d0
   118f8:	\----- bne.s 118b2 <killAllRegions+0x6>
	}
	overRegion = NULL;
   118fa:	       clr.l 19d62 <overRegion>
}
   11900:	       nop
   11902:	       movea.l (sp)+,a6
   11904:	       addq.l #8,sp
   11906:	       rts

00011908 <loadRegions>:

void loadRegions (BPTR fp) {
   11908:	       lea -24(sp),sp
   1190c:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   1190e:	       move.l 32(sp),-(sp)
   11912:	       jsr 6bc <get2bytes>
   11918:	       addq.l #4,sp
   1191a:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   1191e:	       move.l #105822,20(sp)

	while (numRegions --) {
   11926:	   /-- bra.w 11a04 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   1192a:	/--|-> moveq #36,d0
   1192c:	|  |   move.l d0,16(sp)
   11930:	|  |   clr.l 12(sp)
   11934:	|  |   move.l 19c5a <SysBase>,d0
   1193a:	|  |   movea.l d0,a6
   1193c:	|  |   move.l 16(sp),d0
   11940:	|  |   move.l 12(sp),d1
   11944:	|  |   jsr -684(a6)
   11948:	|  |   move.l d0,8(sp)
   1194c:	|  |   move.l 8(sp),d0
   11950:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   11954:	|  |   movea.l 20(sp),a0
   11958:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   1195c:	|  |   moveq #32,d1
   1195e:	|  |   add.l 4(sp),d1
   11962:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   11966:	|  |   move.l 32(sp),-(sp)
   1196a:	|  |   jsr 6bc <get2bytes>
   11970:	|  |   addq.l #4,sp
   11972:	|  |   movea.l 4(sp),a0
   11976:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   11978:	|  |   move.l 32(sp),-(sp)
   1197c:	|  |   jsr 6bc <get2bytes>
   11982:	|  |   addq.l #4,sp
   11984:	|  |   movea.l 4(sp),a0
   11988:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   1198c:	|  |   move.l 32(sp),-(sp)
   11990:	|  |   jsr 6bc <get2bytes>
   11996:	|  |   addq.l #4,sp
   11998:	|  |   movea.l 4(sp),a0
   1199c:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   119a0:	|  |   move.l 32(sp),-(sp)
   119a4:	|  |   jsr 6bc <get2bytes>
   119aa:	|  |   addq.l #4,sp
   119ac:	|  |   movea.l 4(sp),a0
   119b0:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   119b4:	|  |   move.l 32(sp),-(sp)
   119b8:	|  |   jsr 6bc <get2bytes>
   119be:	|  |   addq.l #4,sp
   119c0:	|  |   movea.l 4(sp),a0
   119c4:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   119c8:	|  |   move.l 32(sp),-(sp)
   119cc:	|  |   jsr 6bc <get2bytes>
   119d2:	|  |   addq.l #4,sp
   119d4:	|  |   movea.l 4(sp),a0
   119d8:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   119dc:	|  |   move.l 32(sp),-(sp)
   119e0:	|  |   jsr 6bc <get2bytes>
   119e6:	|  |   addq.l #4,sp
   119e8:	|  |   movea.l 4(sp),a0
   119ec:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   119f0:	|  |   move.l 32(sp),-(sp)
   119f4:	|  |   jsr 9ca4 <loadObjectRef>
   119fa:	|  |   addq.l #4,sp
   119fc:	|  |   movea.l 4(sp),a0
   11a00:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   11a04:	|  \-> move.l 24(sp),d0
   11a08:	|      move.l d0,d1
   11a0a:	|      subq.l #1,d1
   11a0c:	|      move.l d1,24(sp)
   11a10:	|      tst.l d0
   11a12:	\----- bne.w 1192a <loadRegions+0x22>
	}
	* pointy = NULL;
   11a16:	       movea.l 20(sp),a0
   11a1a:	       clr.l (a0)
}
   11a1c:	       nop
   11a1e:	       movea.l (sp)+,a6
   11a20:	       lea 24(sp),sp
   11a24:	       rts

00011a26 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   11a26:	             lea -12(sp),sp
   11a2a:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   11a2c:	             move.l #105822,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   11a34:	   /-------- bra.s 11aae <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   11a36:	/--|-------> movea.l 12(sp),a0
   11a3a:	|  |         movea.l (a0),a0
   11a3c:	|  |         movea.l 28(a0),a0
   11a40:	|  |         move.l 4(a0),d0
   11a44:	|  |         cmp.l 20(sp),d0
   11a48:	|  |  /----- bne.s 11aa0 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   11a4a:	|  |  |      movea.l 12(sp),a0
   11a4e:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   11a52:	|  |  |      movea.l 8(sp),a0
   11a56:	|  |  |      move.l 32(a0),d0
   11a5a:	|  |  |      movea.l 12(sp),a0
   11a5e:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   11a60:	|  |  |      movea.l 8(sp),a0
   11a64:	|  |  |      move.l 28(a0),d0
   11a68:	|  |  |      move.l d0,-(sp)
   11a6a:	|  |  |      jsr 9fae <removeObjectType>
   11a70:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   11a72:	|  |  |      move.l 19d62 <overRegion>,d0
   11a78:	|  |  |      cmp.l 8(sp),d0
   11a7c:	|  |  |  /-- bne.s 11a84 <removeScreenRegion+0x5e>
   11a7e:	|  |  |  |   clr.l 19d62 <overRegion>
            FreeVec(killMe);
   11a84:	|  |  |  \-> move.l 8(sp),4(sp)
   11a8a:	|  |  |      move.l 19c5a <SysBase>,d0
   11a90:	|  |  |      movea.l d0,a6
   11a92:	|  |  |      movea.l 4(sp),a1
   11a96:	|  |  |      jsr -690(a6)
            killMe = NULL;
   11a9a:	|  |  |      clr.l 8(sp)
   11a9e:	|  +--|----- bra.s 11aae <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   11aa0:	|  |  \----> movea.l 12(sp),a0
   11aa4:	|  |         move.l (a0),d0
   11aa6:	|  |         moveq #32,d1
   11aa8:	|  |         add.l d0,d1
   11aaa:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   11aae:	|  \-------> movea.l 12(sp),a0
   11ab2:	|            move.l (a0),d0
   11ab4:	\----------- bne.s 11a36 <removeScreenRegion+0x10>
        }
    }
}
   11ab6:	             nop
   11ab8:	             nop
   11aba:	             movea.l (sp)+,a6
   11abc:	             lea 12(sp),sp
   11ac0:	             rts

00011ac2 <saveRegions>:

void saveRegions (BPTR fp) {
   11ac2:	       subq.l #8,sp
	int numRegions = 0;
   11ac4:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   11ac8:	       move.l 19d5e <allScreenRegions>,(sp)
	while (thisRegion) {
   11ace:	   /-- bra.s 11ada <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   11ad0:	/--|-> movea.l (sp),a0
   11ad2:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   11ad6:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   11ada:	|  \-> tst.l (sp)
   11adc:	\----- bne.s 11ad0 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   11ade:	       move.l 12(sp),-(sp)
   11ae2:	       move.l 8(sp),-(sp)
   11ae6:	       jsr 8d0 <put2bytes>
   11aec:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   11aee:	       move.l 19d5e <allScreenRegions>,(sp)
	while (thisRegion) {
   11af4:	/----- bra.w 11b9c <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   11af8:	|  /-> movea.l (sp),a0
   11afa:	|  |   move.l (a0),d0
   11afc:	|  |   move.l 12(sp),-(sp)
   11b00:	|  |   move.l d0,-(sp)
   11b02:	|  |   jsr 8d0 <put2bytes>
   11b08:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   11b0a:	|  |   movea.l (sp),a0
   11b0c:	|  |   move.l 4(a0),d0
   11b10:	|  |   move.l 12(sp),-(sp)
   11b14:	|  |   move.l d0,-(sp)
   11b16:	|  |   jsr 8d0 <put2bytes>
   11b1c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   11b1e:	|  |   movea.l (sp),a0
   11b20:	|  |   move.l 8(a0),d0
   11b24:	|  |   move.l 12(sp),-(sp)
   11b28:	|  |   move.l d0,-(sp)
   11b2a:	|  |   jsr 8d0 <put2bytes>
   11b30:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   11b32:	|  |   movea.l (sp),a0
   11b34:	|  |   move.l 12(a0),d0
   11b38:	|  |   move.l 12(sp),-(sp)
   11b3c:	|  |   move.l d0,-(sp)
   11b3e:	|  |   jsr 8d0 <put2bytes>
   11b44:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   11b46:	|  |   movea.l (sp),a0
   11b48:	|  |   move.l 16(a0),d0
   11b4c:	|  |   move.l 12(sp),-(sp)
   11b50:	|  |   move.l d0,-(sp)
   11b52:	|  |   jsr 8d0 <put2bytes>
   11b58:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   11b5a:	|  |   movea.l (sp),a0
   11b5c:	|  |   move.l 20(a0),d0
   11b60:	|  |   move.l 12(sp),-(sp)
   11b64:	|  |   move.l d0,-(sp)
   11b66:	|  |   jsr 8d0 <put2bytes>
   11b6c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   11b6e:	|  |   movea.l (sp),a0
   11b70:	|  |   move.l 24(a0),d0
   11b74:	|  |   move.l 12(sp),-(sp)
   11b78:	|  |   move.l d0,-(sp)
   11b7a:	|  |   jsr 8d0 <put2bytes>
   11b80:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   11b82:	|  |   movea.l (sp),a0
   11b84:	|  |   move.l 28(a0),d0
   11b88:	|  |   move.l 12(sp),-(sp)
   11b8c:	|  |   move.l d0,-(sp)
   11b8e:	|  |   jsr a04e <saveObjectRef>
   11b94:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   11b96:	|  |   movea.l (sp),a0
   11b98:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   11b9c:	\--|-> tst.l (sp)
   11b9e:	   \-- bne.w 11af8 <saveRegions+0x36>
	}
}
   11ba2:	       nop
   11ba4:	       nop
   11ba6:	       addq.l #8,sp
   11ba8:	       rts

00011baa <showBoxes>:

void showBoxes () {
   11baa:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   11bac:	       move.l 19d5e <allScreenRegions>,(sp)

	while (huntRegion) {
   11bb2:	/----- bra.w 11c4e <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   11bb6:	|  /-> movea.l (sp),a0
   11bb8:	|  |   move.l 12(a0),d0
   11bbc:	|  |   movea.l d0,a1
   11bbe:	|  |   movea.l (sp),a0
   11bc0:	|  |   move.l 4(a0),d0
   11bc4:	|  |   move.l d0,d1
   11bc6:	|  |   movea.l (sp),a0
   11bc8:	|  |   move.l (a0),d0
   11bca:	|  |   move.l a1,-(sp)
   11bcc:	|  |   move.l d1,-(sp)
   11bce:	|  |   move.l d0,-(sp)
   11bd0:	|  |   jsr 98da <drawVerticalLine>
   11bd6:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   11bda:	|  |   movea.l (sp),a0
   11bdc:	|  |   move.l 12(a0),d0
   11be0:	|  |   movea.l d0,a1
   11be2:	|  |   movea.l (sp),a0
   11be4:	|  |   move.l 4(a0),d0
   11be8:	|  |   move.l d0,d1
   11bea:	|  |   movea.l (sp),a0
   11bec:	|  |   move.l 8(a0),d0
   11bf0:	|  |   move.l a1,-(sp)
   11bf2:	|  |   move.l d1,-(sp)
   11bf4:	|  |   move.l d0,-(sp)
   11bf6:	|  |   jsr 98da <drawVerticalLine>
   11bfc:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   11c00:	|  |   movea.l (sp),a0
   11c02:	|  |   move.l 8(a0),d0
   11c06:	|  |   movea.l d0,a1
   11c08:	|  |   movea.l (sp),a0
   11c0a:	|  |   move.l 4(a0),d0
   11c0e:	|  |   move.l d0,d1
   11c10:	|  |   movea.l (sp),a0
   11c12:	|  |   move.l (a0),d0
   11c14:	|  |   move.l a1,-(sp)
   11c16:	|  |   move.l d1,-(sp)
   11c18:	|  |   move.l d0,-(sp)
   11c1a:	|  |   jsr 98b4 <drawHorizontalLine>
   11c20:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   11c24:	|  |   movea.l (sp),a0
   11c26:	|  |   move.l 8(a0),d0
   11c2a:	|  |   movea.l d0,a1
   11c2c:	|  |   movea.l (sp),a0
   11c2e:	|  |   move.l 12(a0),d0
   11c32:	|  |   move.l d0,d1
   11c34:	|  |   movea.l (sp),a0
   11c36:	|  |   move.l (a0),d0
   11c38:	|  |   move.l a1,-(sp)
   11c3a:	|  |   move.l d1,-(sp)
   11c3c:	|  |   move.l d0,-(sp)
   11c3e:	|  |   jsr 98b4 <drawHorizontalLine>
   11c44:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   11c48:	|  |   movea.l (sp),a0
   11c4a:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   11c4e:	\--|-> tst.l (sp)
   11c50:	   \-- bne.w 11bb6 <showBoxes+0xc>
	}
   11c54:	       nop
   11c56:	       nop
   11c58:	       addq.l #4,sp
   11c5a:	       rts

00011c5c <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   11c5c:	       lea -32(sp),sp
   11c60:	       move.l d3,-(sp)
   11c62:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   11c64:	       move.l 60(sp),d0
   11c68:	       sub.l 52(sp),d0
   11c6c:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   11c70:	       move.l 64(sp),d0
   11c74:	       sub.l 56(sp),d0
   11c78:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   11c7c:	       move.l 68(sp),d0
   11c80:	       sub.l 52(sp),d0
   11c84:	       move.l 36(sp),-(sp)
   11c88:	       move.l d0,-(sp)
   11c8a:	       jsr 138fe <__mulsi3>
   11c90:	       addq.l #8,sp
   11c92:	       move.l d0,d2
   11c94:	       move.l 72(sp),d0
   11c98:	       sub.l 56(sp),d0
   11c9c:	       move.l 32(sp),-(sp)
   11ca0:	       move.l d0,-(sp)
   11ca2:	       jsr 138fe <__mulsi3>
   11ca8:	       addq.l #8,sp
   11caa:	       add.l d2,d0
   11cac:	       move.l d0,-(sp)
   11cae:	       jsr 13364 <__floatsidf>
   11cb4:	       addq.l #4,sp
   11cb6:	       move.l d0,16(sp)
   11cba:	       move.l d1,20(sp)
   11cbe:	       move.l 16(sp),24(sp)
   11cc4:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   11cca:	       move.l 36(sp),-(sp)
   11cce:	       move.l 40(sp),-(sp)
   11cd2:	       jsr 138fe <__mulsi3>
   11cd8:	       addq.l #8,sp
   11cda:	       move.l d0,d2
   11cdc:	       move.l 32(sp),-(sp)
   11ce0:	       move.l 36(sp),-(sp)
   11ce4:	       jsr 138fe <__mulsi3>
   11cea:	       addq.l #8,sp
   11cec:	       add.l d2,d0
   11cee:	       move.l d0,-(sp)
   11cf0:	       jsr 13364 <__floatsidf>
   11cf6:	       addq.l #4,sp
   11cf8:	       move.l d1,-(sp)
   11cfa:	       move.l d0,-(sp)
   11cfc:	       move.l 36(sp),-(sp)
   11d00:	       move.l 36(sp),-(sp)
   11d04:	       jsr 131ee <__divdf3>
   11d0a:	       lea 16(sp),sp
   11d0e:	       move.l d0,8(sp)
   11d12:	       move.l d1,12(sp)
   11d16:	       move.l 8(sp),24(sp)
   11d1c:	       move.l 12(sp),28(sp)

	if (m < 0) {
   11d22:	       clr.l -(sp)
   11d24:	       clr.l -(sp)
   11d26:	       move.l 36(sp),-(sp)
   11d2a:	       move.l 36(sp),-(sp)
   11d2e:	       jsr 1357c <__ltdf2>
   11d34:	       lea 16(sp),sp
   11d38:	       tst.l d0
   11d3a:	   /-- bge.s 11d50 <closestPointOnLine+0xf4>
		*closestX = x1;
   11d3c:	   |   movea.l 44(sp),a0
   11d40:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   11d44:	   |   movea.l 48(sp),a0
   11d48:	   |   move.l 56(sp),(a0)
   11d4c:	/--|-- bra.w 11e32 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   11d50:	|  \-> clr.l -(sp)
   11d52:	|      move.l #1072693248,-(sp)
   11d58:	|      move.l 36(sp),-(sp)
   11d5c:	|      move.l 36(sp),-(sp)
   11d60:	|      jsr 134c2 <__gtdf2>
   11d66:	|      lea 16(sp),sp
   11d6a:	|      tst.l d0
   11d6c:	|  /-- ble.s 11d82 <closestPointOnLine+0x126>
		*closestX = x2;
   11d6e:	|  |   movea.l 44(sp),a0
   11d72:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   11d76:	|  |   movea.l 48(sp),a0
   11d7a:	|  |   move.l 64(sp),(a0)
   11d7e:	+--|-- bra.w 11e32 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   11d82:	|  \-> move.l 52(sp),-(sp)
   11d86:	|      jsr 13364 <__floatsidf>
   11d8c:	|      addq.l #4,sp
   11d8e:	|      move.l d0,d2
   11d90:	|      move.l d1,d3
   11d92:	|      move.l 36(sp),-(sp)
   11d96:	|      jsr 13364 <__floatsidf>
   11d9c:	|      addq.l #4,sp
   11d9e:	|      move.l 28(sp),-(sp)
   11da2:	|      move.l 28(sp),-(sp)
   11da6:	|      move.l d1,-(sp)
   11da8:	|      move.l d0,-(sp)
   11daa:	|      jsr 133f4 <__muldf3>
   11db0:	|      lea 16(sp),sp
   11db4:	|      move.l d1,-(sp)
   11db6:	|      move.l d0,-(sp)
   11db8:	|      move.l d3,-(sp)
   11dba:	|      move.l d2,-(sp)
   11dbc:	|      jsr 1318c <__adddf3>
   11dc2:	|      lea 16(sp),sp
   11dc6:	|      move.l d1,-(sp)
   11dc8:	|      move.l d0,-(sp)
   11dca:	|      jsr 132fc <__fixdfsi>
   11dd0:	|      addq.l #8,sp
   11dd2:	|      movea.l 44(sp),a0
   11dd6:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   11dd8:	|      move.l 56(sp),-(sp)
   11ddc:	|      jsr 13364 <__floatsidf>
   11de2:	|      addq.l #4,sp
   11de4:	|      move.l d0,d2
   11de6:	|      move.l d1,d3
   11de8:	|      move.l 32(sp),-(sp)
   11dec:	|      jsr 13364 <__floatsidf>
   11df2:	|      addq.l #4,sp
   11df4:	|      move.l 28(sp),-(sp)
   11df8:	|      move.l 28(sp),-(sp)
   11dfc:	|      move.l d1,-(sp)
   11dfe:	|      move.l d0,-(sp)
   11e00:	|      jsr 133f4 <__muldf3>
   11e06:	|      lea 16(sp),sp
   11e0a:	|      move.l d1,-(sp)
   11e0c:	|      move.l d0,-(sp)
   11e0e:	|      move.l d3,-(sp)
   11e10:	|      move.l d2,-(sp)
   11e12:	|      jsr 1318c <__adddf3>
   11e18:	|      lea 16(sp),sp
   11e1c:	|      move.l d1,-(sp)
   11e1e:	|      move.l d0,-(sp)
   11e20:	|      jsr 132fc <__fixdfsi>
   11e26:	|      addq.l #8,sp
   11e28:	|      movea.l 48(sp),a0
   11e2c:	|      move.l d0,(a0)
		return TRUE;
   11e2e:	|      moveq #1,d0
   11e30:	|  /-- bra.s 11e34 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   11e32:	\--|-> clr.w d0
}
   11e34:	   \-> move.l (sp)+,d2
   11e36:	       move.l (sp)+,d3
   11e38:	       lea 32(sp),sp
   11e3c:	       rts

00011e3e <drawFloor>:

void drawFloor() {
   11e3e:	                lea -12(sp),sp
   11e42:	                move.l d3,-(sp)
   11e44:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   11e46:	                clr.l 16(sp)
   11e4a:	   /----------- bra.w 1205e <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   11e4e:	/--|----------> movea.l 19d66 <currentFloor>,a0
   11e54:	|  |            move.l 12(a0),d1
   11e58:	|  |            move.l 16(sp),d0
   11e5c:	|  |            lsl.l #3,d0
   11e5e:	|  |            movea.l d1,a0
   11e60:	|  |            adda.l d0,a0
   11e62:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   11e66:	|  |            moveq #1,d0
   11e68:	|  |            cmp.l 8(sp),d0
   11e6c:	|  |  /-------- bge.w 1205a <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   11e70:	|  |  |         moveq #1,d0
   11e72:	|  |  |         move.l d0,12(sp)
   11e76:	|  |  |     /-- bra.w 11f70 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   11e7a:	|  |  |  /--|-> movea.l 19d66 <currentFloor>,a0
   11e80:	|  |  |  |  |   move.l 4(a0),d1
   11e84:	|  |  |  |  |   movea.l 19d66 <currentFloor>,a0
   11e8a:	|  |  |  |  |   movea.l 12(a0),a0
   11e8e:	|  |  |  |  |   move.l 16(sp),d0
   11e92:	|  |  |  |  |   lsl.l #3,d0
   11e94:	|  |  |  |  |   adda.l d0,a0
   11e96:	|  |  |  |  |   movea.l 4(a0),a0
   11e9a:	|  |  |  |  |   move.l 12(sp),d0
   11e9e:	|  |  |  |  |   add.l d0,d0
   11ea0:	|  |  |  |  |   add.l d0,d0
   11ea2:	|  |  |  |  |   adda.l d0,a0
   11ea4:	|  |  |  |  |   move.l (a0),d0
   11ea6:	|  |  |  |  |   lsl.l #3,d0
   11ea8:	|  |  |  |  |   movea.l d1,a0
   11eaa:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11eac:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   11eb0:	|  |  |  |  |   movea.l 19d66 <currentFloor>,a0
   11eb6:	|  |  |  |  |   move.l 4(a0),d1
   11eba:	|  |  |  |  |   movea.l 19d66 <currentFloor>,a0
   11ec0:	|  |  |  |  |   movea.l 12(a0),a0
   11ec4:	|  |  |  |  |   move.l 16(sp),d0
   11ec8:	|  |  |  |  |   lsl.l #3,d0
   11eca:	|  |  |  |  |   adda.l d0,a0
   11ecc:	|  |  |  |  |   movea.l 4(a0),a0
   11ed0:	|  |  |  |  |   move.l 12(sp),d0
   11ed4:	|  |  |  |  |   add.l d0,d0
   11ed6:	|  |  |  |  |   add.l d0,d0
   11ed8:	|  |  |  |  |   adda.l d0,a0
   11eda:	|  |  |  |  |   move.l (a0),d0
   11edc:	|  |  |  |  |   lsl.l #3,d0
   11ede:	|  |  |  |  |   movea.l d1,a0
   11ee0:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11ee2:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   11ee4:	|  |  |  |  |   movea.l 19d66 <currentFloor>,a0
   11eea:	|  |  |  |  |   move.l 4(a0),d1
   11eee:	|  |  |  |  |   movea.l 19d66 <currentFloor>,a0
   11ef4:	|  |  |  |  |   movea.l 12(a0),a0
   11ef8:	|  |  |  |  |   move.l 16(sp),d0
   11efc:	|  |  |  |  |   lsl.l #3,d0
   11efe:	|  |  |  |  |   adda.l d0,a0
   11f00:	|  |  |  |  |   movea.l 4(a0),a0
   11f04:	|  |  |  |  |   move.l 12(sp),d0
   11f08:	|  |  |  |  |   addi.l #1073741823,d0
   11f0e:	|  |  |  |  |   add.l d0,d0
   11f10:	|  |  |  |  |   add.l d0,d0
   11f12:	|  |  |  |  |   adda.l d0,a0
   11f14:	|  |  |  |  |   move.l (a0),d0
   11f16:	|  |  |  |  |   lsl.l #3,d0
   11f18:	|  |  |  |  |   movea.l d1,a0
   11f1a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11f1c:	|  |  |  |  |   move.l 4(a0),d1
   11f20:	|  |  |  |  |   movea.l 19d66 <currentFloor>,a0
   11f26:	|  |  |  |  |   move.l 4(a0),d3
   11f2a:	|  |  |  |  |   movea.l 19d66 <currentFloor>,a0
   11f30:	|  |  |  |  |   movea.l 12(a0),a0
   11f34:	|  |  |  |  |   move.l 16(sp),d0
   11f38:	|  |  |  |  |   lsl.l #3,d0
   11f3a:	|  |  |  |  |   adda.l d0,a0
   11f3c:	|  |  |  |  |   movea.l 4(a0),a0
   11f40:	|  |  |  |  |   move.l 12(sp),d0
   11f44:	|  |  |  |  |   addi.l #1073741823,d0
   11f4a:	|  |  |  |  |   add.l d0,d0
   11f4c:	|  |  |  |  |   add.l d0,d0
   11f4e:	|  |  |  |  |   adda.l d0,a0
   11f50:	|  |  |  |  |   move.l (a0),d0
   11f52:	|  |  |  |  |   lsl.l #3,d0
   11f54:	|  |  |  |  |   movea.l d3,a0
   11f56:	|  |  |  |  |   adda.l d0,a0
   11f58:	|  |  |  |  |   move.l (a0),d0
   11f5a:	|  |  |  |  |   move.l d2,-(sp)
   11f5c:	|  |  |  |  |   move.l a1,-(sp)
   11f5e:	|  |  |  |  |   move.l d1,-(sp)
   11f60:	|  |  |  |  |   move.l d0,-(sp)
   11f62:	|  |  |  |  |   jsr 16f0 <drawLine>
   11f68:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   11f6c:	|  |  |  |  |   addq.l #1,12(sp)
   11f70:	|  |  |  |  \-> move.l 12(sp),d0
   11f74:	|  |  |  |      cmp.l 8(sp),d0
   11f78:	|  |  |  \----- blt.w 11e7a <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   11f7c:	|  |  |         movea.l 19d66 <currentFloor>,a0
   11f82:	|  |  |         move.l 4(a0),d1
   11f86:	|  |  |         movea.l 19d66 <currentFloor>,a0
   11f8c:	|  |  |         movea.l 12(a0),a0
   11f90:	|  |  |         move.l 16(sp),d0
   11f94:	|  |  |         lsl.l #3,d0
   11f96:	|  |  |         adda.l d0,a0
   11f98:	|  |  |         movea.l 4(a0),a0
   11f9c:	|  |  |         move.l 8(sp),d0
   11fa0:	|  |  |         addi.l #1073741823,d0
   11fa6:	|  |  |         add.l d0,d0
   11fa8:	|  |  |         add.l d0,d0
   11faa:	|  |  |         adda.l d0,a0
   11fac:	|  |  |         move.l (a0),d0
   11fae:	|  |  |         lsl.l #3,d0
   11fb0:	|  |  |         movea.l d1,a0
   11fb2:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   11fb4:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   11fb8:	|  |  |         movea.l 19d66 <currentFloor>,a0
   11fbe:	|  |  |         move.l 4(a0),d1
   11fc2:	|  |  |         movea.l 19d66 <currentFloor>,a0
   11fc8:	|  |  |         movea.l 12(a0),a0
   11fcc:	|  |  |         move.l 16(sp),d0
   11fd0:	|  |  |         lsl.l #3,d0
   11fd2:	|  |  |         adda.l d0,a0
   11fd4:	|  |  |         movea.l 4(a0),a0
   11fd8:	|  |  |         move.l 8(sp),d0
   11fdc:	|  |  |         addi.l #1073741823,d0
   11fe2:	|  |  |         add.l d0,d0
   11fe4:	|  |  |         add.l d0,d0
   11fe6:	|  |  |         adda.l d0,a0
   11fe8:	|  |  |         move.l (a0),d0
   11fea:	|  |  |         lsl.l #3,d0
   11fec:	|  |  |         movea.l d1,a0
   11fee:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   11ff0:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   11ff2:	|  |  |         movea.l 19d66 <currentFloor>,a0
   11ff8:	|  |  |         move.l 4(a0),d1
   11ffc:	|  |  |         movea.l 19d66 <currentFloor>,a0
   12002:	|  |  |         movea.l 12(a0),a0
   12006:	|  |  |         move.l 16(sp),d0
   1200a:	|  |  |         lsl.l #3,d0
   1200c:	|  |  |         adda.l d0,a0
   1200e:	|  |  |         movea.l 4(a0),a0
   12012:	|  |  |         move.l (a0),d0
   12014:	|  |  |         lsl.l #3,d0
   12016:	|  |  |         movea.l d1,a0
   12018:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1201a:	|  |  |         move.l 4(a0),d1
   1201e:	|  |  |         movea.l 19d66 <currentFloor>,a0
   12024:	|  |  |         move.l 4(a0),d3
   12028:	|  |  |         movea.l 19d66 <currentFloor>,a0
   1202e:	|  |  |         movea.l 12(a0),a0
   12032:	|  |  |         move.l 16(sp),d0
   12036:	|  |  |         lsl.l #3,d0
   12038:	|  |  |         adda.l d0,a0
   1203a:	|  |  |         movea.l 4(a0),a0
   1203e:	|  |  |         move.l (a0),d0
   12040:	|  |  |         lsl.l #3,d0
   12042:	|  |  |         movea.l d3,a0
   12044:	|  |  |         adda.l d0,a0
   12046:	|  |  |         move.l (a0),d0
   12048:	|  |  |         move.l d2,-(sp)
   1204a:	|  |  |         move.l a1,-(sp)
   1204c:	|  |  |         move.l d1,-(sp)
   1204e:	|  |  |         move.l d0,-(sp)
   12050:	|  |  |         jsr 16f0 <drawLine>
   12056:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1205a:	|  |  \-------> addq.l #1,16(sp)
   1205e:	|  \----------> movea.l 19d66 <currentFloor>,a0
   12064:	|               move.l 8(a0),d0
   12068:	|               cmp.l 16(sp),d0
   1206c:	\-------------- bgt.w 11e4e <drawFloor+0x10>
        }
    }
}
   12070:	                nop
   12072:	                nop
   12074:	                move.l (sp)+,d2
   12076:	                move.l (sp)+,d3
   12078:	                lea 12(sp),sp
   1207c:	                rts

0001207e <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   1207e:	                      lea -12(sp),sp
    int sharedVertices = 0;
   12082:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   12086:	                      clr.l 4(sp)
   1208a:	   /----------------- bra.w 1211c <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   1208e:	/--|----------------> clr.l (sp)
   12090:	|  |     /----------- bra.s 1210c <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   12092:	|  |  /--|----------> movea.l 16(sp),a0
   12096:	|  |  |  |            move.l 4(a0),d1
   1209a:	|  |  |  |            move.l 4(sp),d0
   1209e:	|  |  |  |            add.l d0,d0
   120a0:	|  |  |  |            add.l d0,d0
   120a2:	|  |  |  |            movea.l d1,a0
   120a4:	|  |  |  |            adda.l d0,a0
   120a6:	|  |  |  |            move.l (a0),d1
   120a8:	|  |  |  |            movea.l 20(sp),a0
   120ac:	|  |  |  |            movea.l 4(a0),a0
   120b0:	|  |  |  |            move.l (sp),d0
   120b2:	|  |  |  |            add.l d0,d0
   120b4:	|  |  |  |            add.l d0,d0
   120b6:	|  |  |  |            adda.l d0,a0
   120b8:	|  |  |  |            move.l (a0),d0
   120ba:	|  |  |  |            cmp.l d1,d0
   120bc:	|  |  |  |  /-------- bne.s 1210a <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   120be:	|  |  |  |  |         move.l 8(sp),d0
   120c2:	|  |  |  |  |         move.l d0,d1
   120c4:	|  |  |  |  |         addq.l #1,d1
   120c6:	|  |  |  |  |         move.l d1,8(sp)
   120ca:	|  |  |  |  |         tst.l d0
   120cc:	|  |  |  |  |     /-- beq.s 120ee <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   120ce:	|  |  |  |  |     |   movea.l 16(sp),a0
   120d2:	|  |  |  |  |     |   move.l 4(a0),d1
   120d6:	|  |  |  |  |     |   move.l 4(sp),d0
   120da:	|  |  |  |  |     |   add.l d0,d0
   120dc:	|  |  |  |  |     |   add.l d0,d0
   120de:	|  |  |  |  |     |   movea.l d1,a0
   120e0:	|  |  |  |  |     |   adda.l d0,a0
   120e2:	|  |  |  |  |     |   move.l (a0),d0
   120e4:	|  |  |  |  |     |   movea.l 28(sp),a0
   120e8:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   120ea:	|  |  |  |  |     |   moveq #1,d0
   120ec:	|  |  |  |  |  /--|-- bra.s 1212c <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   120ee:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   120f2:	|  |  |  |  |  |      move.l 4(a0),d1
   120f6:	|  |  |  |  |  |      move.l 4(sp),d0
   120fa:	|  |  |  |  |  |      add.l d0,d0
   120fc:	|  |  |  |  |  |      add.l d0,d0
   120fe:	|  |  |  |  |  |      movea.l d1,a0
   12100:	|  |  |  |  |  |      adda.l d0,a0
   12102:	|  |  |  |  |  |      move.l (a0),d0
   12104:	|  |  |  |  |  |      movea.l 24(sp),a0
   12108:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   1210a:	|  |  |  |  \--|----> addq.l #1,(sp)
   1210c:	|  |  |  \-----|----> movea.l 20(sp),a0
   12110:	|  |  |        |      move.l (a0),d0
   12112:	|  |  |        |      cmp.l (sp),d0
   12114:	|  |  \--------|----- bgt.w 12092 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   12118:	|  |           |      addq.l #1,4(sp)
   1211c:	|  \-----------|----> movea.l 16(sp),a0
   12120:	|              |      move.l (a0),d0
   12122:	|              |      cmp.l 4(sp),d0
   12126:	\--------------|----- bgt.w 1208e <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   1212a:	               |      clr.w d0
}
   1212c:	               \----> lea 12(sp),sp
   12130:	                      rts

00012132 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   12132:	movea.l 19d66 <currentFloor>,a0
   12138:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   1213c:	movea.l 19d66 <currentFloor>,a0
   12142:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   12146:	movea.l 19d66 <currentFloor>,a0
   1214c:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   12150:	movea.l 19d66 <currentFloor>,a0
   12156:	clr.l 16(a0)
}
   1215a:	nop
   1215c:	rts

0001215e <inFloor>:

int inFloor (int x, int y) {
   1215e:	          subq.l #8,sp
	int i, r = -1;
   12160:	          moveq #-1,d0
   12162:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   12164:	          clr.l 4(sp)
   12168:	   /----- bra.s 1219c <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   1216a:	/--|----> movea.l 19d66 <currentFloor>,a0
   12170:	|  |      move.l 12(a0),d1
   12174:	|  |      move.l 4(sp),d0
   12178:	|  |      lsl.l #3,d0
   1217a:	|  |      add.l d1,d0
   1217c:	|  |      move.l 16(sp),-(sp)
   12180:	|  |      move.l 16(sp),-(sp)
   12184:	|  |      move.l d0,-(sp)
   12186:	|  |      jsr 12368 <pointInFloorPolygon>
   1218c:	|  |      lea 12(sp),sp
   12190:	|  |      tst.w d0
   12192:	|  |  /-- beq.s 12198 <inFloor+0x3a>
			r = i;
   12194:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   12198:	|  |  \-> addq.l #1,4(sp)
   1219c:	|  \----> movea.l 19d66 <currentFloor>,a0
   121a2:	|         move.l 8(a0),d0
   121a6:	|         cmp.l 4(sp),d0
   121aa:	\-------- bgt.s 1216a <inFloor+0xc>

	return r;
   121ac:	          move.l (sp),d0
}
   121ae:	          addq.l #8,sp
   121b0:	          rts

000121b2 <initFloor>:

BOOL initFloor () {
   121b2:	       lea -12(sp),sp
   121b6:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   121b8:	       moveq #20,d0
   121ba:	       move.l d0,12(sp)
   121be:	       clr.l 8(sp)
   121c2:	       move.l 19c5a <SysBase>,d0
   121c8:	       movea.l d0,a6
   121ca:	       move.l 12(sp),d0
   121ce:	       move.l 8(sp),d1
   121d2:	       jsr -684(a6)
   121d6:	       move.l d0,4(sp)
   121da:	       move.l 4(sp),d0
   121de:	       move.l d0,19d66 <currentFloor>

    if(currentFloor == 0) {
   121e4:	       move.l 19d66 <currentFloor>,d0
   121ea:	/----- bne.s 121fe <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   121ec:	|      pea 16f94 <main_sludge.c.828d7d86+0x2da>
   121f2:	|      jsr 12e08 <KPrintF>
   121f8:	|      addq.l #4,sp
        return FALSE;
   121fa:	|      clr.w d0
   121fc:	|  /-- bra.s 12206 <initFloor+0x54>
    }

	noFloor ();
   121fe:	\--|-> jsr 12132 <noFloor>
	return TRUE;
   12204:	   |   moveq #1,d0
}
   12206:	   \-> movea.l (sp)+,a6
   12208:	       lea 12(sp),sp
   1220c:	       rts

0001220e <killFloor>:

void killFloor () {
   1220e:	       lea -24(sp),sp
   12212:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   12214:	       clr.l 24(sp)
   12218:	   /-- bra.s 12272 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   1221a:	/--|-> movea.l 19d66 <currentFloor>,a0
   12220:	|  |   move.l 12(a0),d1
   12224:	|  |   move.l 24(sp),d0
   12228:	|  |   lsl.l #3,d0
   1222a:	|  |   movea.l d1,a0
   1222c:	|  |   adda.l d0,a0
   1222e:	|  |   move.l 4(a0),8(sp)
   12234:	|  |   move.l 19c5a <SysBase>,d0
   1223a:	|  |   movea.l d0,a6
   1223c:	|  |   movea.l 8(sp),a1
   12240:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   12244:	|  |   movea.l 19d66 <currentFloor>,a0
   1224a:	|  |   move.l 16(a0),d1
   1224e:	|  |   move.l 24(sp),d0
   12252:	|  |   add.l d0,d0
   12254:	|  |   add.l d0,d0
   12256:	|  |   movea.l d1,a0
   12258:	|  |   adda.l d0,a0
   1225a:	|  |   move.l (a0),4(sp)
   1225e:	|  |   move.l 19c5a <SysBase>,d0
   12264:	|  |   movea.l d0,a6
   12266:	|  |   movea.l 4(sp),a1
   1226a:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1226e:	|  |   addq.l #1,24(sp)
   12272:	|  \-> movea.l 19d66 <currentFloor>,a0
   12278:	|      move.l 8(a0),d0
   1227c:	|      cmp.l 24(sp),d0
   12280:	\----- bgt.s 1221a <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   12282:	       movea.l 19d66 <currentFloor>,a0
   12288:	       move.l 12(a0),20(sp)
   1228e:	       move.l 19c5a <SysBase>,d0
   12294:	       movea.l d0,a6
   12296:	       movea.l 20(sp),a1
   1229a:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   1229e:	       movea.l 19d66 <currentFloor>,a0
   122a4:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   122a8:	       movea.l 19d66 <currentFloor>,a0
   122ae:	       move.l 4(a0),16(sp)
   122b4:	       move.l 19c5a <SysBase>,d0
   122ba:	       movea.l d0,a6
   122bc:	       movea.l 16(sp),a1
   122c0:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   122c4:	       movea.l 19d66 <currentFloor>,a0
   122ca:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   122ce:	       movea.l 19d66 <currentFloor>,a0
   122d4:	       move.l 16(a0),12(sp)
   122da:	       move.l 19c5a <SysBase>,d0
   122e0:	       movea.l d0,a6
   122e2:	       movea.l 12(sp),a1
   122e6:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   122ea:	       movea.l 19d66 <currentFloor>,a0
   122f0:	       clr.l 16(a0)
}
   122f4:	       nop
   122f6:	       movea.l (sp)+,a6
   122f8:	       lea 24(sp),sp
   122fc:	       rts

000122fe <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   122fe:	                   lea -12(sp),sp
	int sharedVertices = 0;
   12302:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   12306:	                   clr.l 4(sp)
   1230a:	   /-------------- bra.s 12356 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   1230c:	/--|-------------> clr.l (sp)
   1230e:	|  |     /-------- bra.s 1234a <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   12310:	|  |  /--|-------> move.l 20(sp),d1
   12314:	|  |  |  |         move.l 4(sp),d0
   12318:	|  |  |  |         add.l d0,d0
   1231a:	|  |  |  |         add.l d0,d0
   1231c:	|  |  |  |         movea.l d1,a0
   1231e:	|  |  |  |         adda.l d0,a0
   12320:	|  |  |  |         move.l (a0),d1
   12322:	|  |  |  |         movea.l 28(sp),a0
   12326:	|  |  |  |         move.l (sp),d0
   12328:	|  |  |  |         add.l d0,d0
   1232a:	|  |  |  |         add.l d0,d0
   1232c:	|  |  |  |         adda.l d0,a0
   1232e:	|  |  |  |         move.l (a0),d0
   12330:	|  |  |  |         cmp.l d1,d0
   12332:	|  |  |  |     /-- bne.s 12348 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   12334:	|  |  |  |     |   move.l 8(sp),d0
   12338:	|  |  |  |     |   move.l d0,d1
   1233a:	|  |  |  |     |   addq.l #1,d1
   1233c:	|  |  |  |     |   move.l d1,8(sp)
   12340:	|  |  |  |     |   tst.l d0
   12342:	|  |  |  |     +-- beq.s 12348 <polysShareSide+0x4a>
   12344:	|  |  |  |     |   moveq #1,d0
   12346:	|  |  |  |  /--|-- bra.s 12362 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   12348:	|  |  |  |  |  \-> addq.l #1,(sp)
   1234a:	|  |  |  \--|----> move.l 24(sp),d0
   1234e:	|  |  |     |      cmp.l (sp),d0
   12350:	|  |  \-----|----- bgt.s 12310 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   12352:	|  |        |      addq.l #1,4(sp)
   12356:	|  \--------|----> move.l 16(sp),d0
   1235a:	|           |      cmp.l 4(sp),d0
   1235e:	\-----------|----- bgt.s 1230c <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   12360:	            |      clr.w d0
}
   12362:	            \----> lea 12(sp),sp
   12366:	                   rts

00012368 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   12368:	             lea -28(sp),sp
   1236c:	             move.l d3,-(sp)
   1236e:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   12370:	             clr.l 32(sp)
   12374:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   12378:	             movea.l 40(sp),a0
   1237c:	             move.l (a0),d0
   1237e:	             move.l d0,d1
   12380:	             subq.l #1,d1
   12382:	             move.l d1,28(sp)
   12386:	   /-------- bra.w 12580 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   1238a:	/--|-------> movea.l 19d66 <currentFloor>,a0
   12390:	|  |         move.l 4(a0),d1
   12394:	|  |         movea.l 40(sp),a0
   12398:	|  |         movea.l 4(a0),a0
   1239c:	|  |         move.l 32(sp),d0
   123a0:	|  |         add.l d0,d0
   123a2:	|  |         add.l d0,d0
   123a4:	|  |         adda.l d0,a0
   123a6:	|  |         move.l (a0),d0
   123a8:	|  |         lsl.l #3,d0
   123aa:	|  |         movea.l d1,a0
   123ac:	|  |         adda.l d0,a0
   123ae:	|  |         move.l (a0),d0
   123b0:	|  |         move.l d0,-(sp)
   123b2:	|  |         jsr 133a4 <__floatsisf>
   123b8:	|  |         addq.l #4,sp
   123ba:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   123be:	|  |         movea.l 19d66 <currentFloor>,a0
   123c4:	|  |         move.l 4(a0),d1
   123c8:	|  |         movea.l 40(sp),a0
   123cc:	|  |         movea.l 4(a0),a0
   123d0:	|  |         move.l 32(sp),d0
   123d4:	|  |         add.l d0,d0
   123d6:	|  |         add.l d0,d0
   123d8:	|  |         adda.l d0,a0
   123da:	|  |         move.l (a0),d0
   123dc:	|  |         lsl.l #3,d0
   123de:	|  |         movea.l d1,a0
   123e0:	|  |         adda.l d0,a0
   123e2:	|  |         move.l 4(a0),d0
   123e6:	|  |         move.l d0,-(sp)
   123e8:	|  |         jsr 133a4 <__floatsisf>
   123ee:	|  |         addq.l #4,sp
   123f0:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   123f4:	|  |         movea.l 19d66 <currentFloor>,a0
   123fa:	|  |         move.l 4(a0),d1
   123fe:	|  |         movea.l 40(sp),a0
   12402:	|  |         movea.l 4(a0),a0
   12406:	|  |         move.l 28(sp),d0
   1240a:	|  |         add.l d0,d0
   1240c:	|  |         add.l d0,d0
   1240e:	|  |         adda.l d0,a0
   12410:	|  |         move.l (a0),d0
   12412:	|  |         lsl.l #3,d0
   12414:	|  |         movea.l d1,a0
   12416:	|  |         adda.l d0,a0
   12418:	|  |         move.l (a0),d0
   1241a:	|  |         move.l d0,-(sp)
   1241c:	|  |         jsr 133a4 <__floatsisf>
   12422:	|  |         addq.l #4,sp
   12424:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   12428:	|  |         movea.l 19d66 <currentFloor>,a0
   1242e:	|  |         move.l 4(a0),d1
   12432:	|  |         movea.l 40(sp),a0
   12436:	|  |         movea.l 4(a0),a0
   1243a:	|  |         move.l 28(sp),d0
   1243e:	|  |         add.l d0,d0
   12440:	|  |         add.l d0,d0
   12442:	|  |         adda.l d0,a0
   12444:	|  |         move.l (a0),d0
   12446:	|  |         lsl.l #3,d0
   12448:	|  |         movea.l d1,a0
   1244a:	|  |         adda.l d0,a0
   1244c:	|  |         move.l 4(a0),d0
   12450:	|  |         move.l d0,-(sp)
   12452:	|  |         jsr 133a4 <__floatsisf>
   12458:	|  |         addq.l #4,sp
   1245a:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1245e:	|  |         move.l 48(sp),-(sp)
   12462:	|  |         jsr 133a4 <__floatsisf>
   12468:	|  |         addq.l #4,sp
   1246a:	|  |         move.l d0,-(sp)
   1246c:	|  |         move.l 20(sp),-(sp)
   12470:	|  |         jsr 13546 <__lesf2>
   12476:	|  |         addq.l #8,sp
   12478:	|  |         tst.l d0
   1247a:	|  |     /-- bgt.s 1249a <pointInFloorPolygon+0x132>
   1247c:	|  |     |   move.l 48(sp),-(sp)
   12480:	|  |     |   jsr 133a4 <__floatsisf>
   12486:	|  |     |   addq.l #4,sp
   12488:	|  |     |   move.l d0,-(sp)
   1248a:	|  |     |   move.l 12(sp),-(sp)
   1248e:	|  |     |   jsr 13510 <__gtsf2>
   12494:	|  |     |   addq.l #8,sp
   12496:	|  |     |   tst.l d0
   12498:	|  |  /--|-- bgt.s 124da <pointInFloorPolygon+0x172>
   1249a:	|  |  |  \-> move.l 48(sp),-(sp)
   1249e:	|  |  |      jsr 133a4 <__floatsisf>
   124a4:	|  |  |      addq.l #4,sp
   124a6:	|  |  |      move.l d0,-(sp)
   124a8:	|  |  |      move.l 12(sp),-(sp)
   124ac:	|  |  |      jsr 13546 <__lesf2>
   124b2:	|  |  |      addq.l #8,sp
   124b4:	|  |  |      tst.l d0
   124b6:	|  |  |  /-- bgt.w 12570 <pointInFloorPolygon+0x208>
   124ba:	|  |  |  |   move.l 48(sp),-(sp)
   124be:	|  |  |  |   jsr 133a4 <__floatsisf>
   124c4:	|  |  |  |   addq.l #4,sp
   124c6:	|  |  |  |   move.l d0,-(sp)
   124c8:	|  |  |  |   move.l 20(sp),-(sp)
   124cc:	|  |  |  |   jsr 13510 <__gtsf2>
   124d2:	|  |  |  |   addq.l #8,sp
   124d4:	|  |  |  |   tst.l d0
   124d6:	|  |  |  +-- ble.w 12570 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   124da:	|  |  \--|-> move.l 44(sp),-(sp)
   124de:	|  |     |   jsr 133a4 <__floatsisf>
   124e4:	|  |     |   addq.l #4,sp
   124e6:	|  |     |   move.l d0,d3
   124e8:	|  |     |   move.l 20(sp),-(sp)
   124ec:	|  |     |   move.l 16(sp),-(sp)
   124f0:	|  |     |   jsr 13698 <__subsf3>
   124f6:	|  |     |   addq.l #8,sp
   124f8:	|  |     |   move.l d0,d2
   124fa:	|  |     |   move.l 48(sp),-(sp)
   124fe:	|  |     |   jsr 133a4 <__floatsisf>
   12504:	|  |     |   addq.l #4,sp
   12506:	|  |     |   move.l 16(sp),-(sp)
   1250a:	|  |     |   move.l d0,-(sp)
   1250c:	|  |     |   jsr 13698 <__subsf3>
   12512:	|  |     |   addq.l #8,sp
   12514:	|  |     |   move.l d0,-(sp)
   12516:	|  |     |   move.l d2,-(sp)
   12518:	|  |     |   jsr 13456 <__mulsf3>
   1251e:	|  |     |   addq.l #8,sp
   12520:	|  |     |   move.l d0,d2
   12522:	|  |     |   move.l 16(sp),-(sp)
   12526:	|  |     |   move.l 12(sp),-(sp)
   1252a:	|  |     |   jsr 13698 <__subsf3>
   12530:	|  |     |   addq.l #8,sp
   12532:	|  |     |   move.l d0,-(sp)
   12534:	|  |     |   move.l d2,-(sp)
   12536:	|  |     |   jsr 13250 <__divsf3>
   1253c:	|  |     |   addq.l #8,sp
   1253e:	|  |     |   move.l 20(sp),-(sp)
   12542:	|  |     |   move.l d0,-(sp)
   12544:	|  |     |   jsr 13156 <__addsf3>
   1254a:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1254c:	|  |     |   move.l d0,-(sp)
   1254e:	|  |     |   move.l d3,-(sp)
   12550:	|  |     |   jsr 135ca <__ltsf2>
   12556:	|  |     |   addq.l #8,sp
   12558:	|  |     |   tst.l d0
   1255a:	|  |     +-- bge.s 12570 <pointInFloorPolygon+0x208>

			c = !c;
   1255c:	|  |     |   tst.l 24(sp)
   12560:	|  |     |   seq d0
   12562:	|  |     |   neg.b d0
   12564:	|  |     |   move.b d0,d0
   12566:	|  |     |   andi.l #255,d0
   1256c:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   12570:	|  |     \-> move.l 32(sp),d0
   12574:	|  |         move.l d0,d1
   12576:	|  |         addq.l #1,d1
   12578:	|  |         move.l d1,32(sp)
   1257c:	|  |         move.l d0,28(sp)
   12580:	|  \-------> movea.l 40(sp),a0
   12584:	|            move.l (a0),d0
   12586:	|            cmp.l 32(sp),d0
   1258a:	\----------- bgt.w 1238a <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   1258e:	             tst.l 24(sp)
   12592:	             sne d0
   12594:	             neg.b d0
   12596:	             move.b d0,d0
   12598:	             andi.w #255,d0
}
   1259c:	             move.l (sp)+,d2
   1259e:	             move.l (sp)+,d3
   125a0:	             lea 28(sp),sp
   125a4:	             rts

000125a6 <setFloor>:

BOOL setFloor (int fileNum) {
   125a6:	                               lea -132(sp),sp
   125aa:	                               move.l a6,-(sp)
   125ac:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   125ae:	                               jsr 1220e <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   125b4:	                               move.l 144(sp),-(sp)
   125b8:	                               jsr 47ce <openFileFromNum>
   125be:	                               addq.l #4,sp
   125c0:	                               tst.l d0
   125c2:	                           /-- bne.s 125ca <setFloor+0x24>
   125c4:	                           |   clr.w d0
   125c6:	/--------------------------|-- bra.w 12d16 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   125ca:	|                          \-> movea.l 19d66 <currentFloor>,a0
   125d0:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   125d4:	|                              move.l 19c42 <bigDataFile>,118(sp)
   125dc:	|                              move.l 19c62 <DOSBase>,d0
   125e2:	|                              movea.l d0,a6
   125e4:	|                              move.l 118(sp),d1
   125e8:	|                              jsr -306(a6)
   125ec:	|                              move.l d0,114(sp)
   125f0:	|                              move.l 114(sp),d0
   125f4:	|                              movea.l 19d66 <currentFloor>,a0
   125fa:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   125fe:	|                              movea.l 19d66 <currentFloor>,a0
   12604:	|                              move.l 8(a0),d0
   12608:	|                              lsl.l #3,d0
   1260a:	|                              move.l d0,110(sp)
   1260e:	|                              clr.l 106(sp)
   12612:	|                              move.l 19c5a <SysBase>,d0
   12618:	|                              movea.l d0,a6
   1261a:	|                              move.l 110(sp),d0
   1261e:	|                              move.l 106(sp),d1
   12622:	|                              jsr -684(a6)
   12626:	|                              move.l d0,102(sp)
   1262a:	|                              move.l 102(sp),d0
   1262e:	|                              movea.l 19d66 <currentFloor>,a0
   12634:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   12638:	|                              movea.l 19d66 <currentFloor>,a0
   1263e:	|                              move.l 12(a0),d0
   12642:	|                          /-- bne.s 12658 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   12644:	|                          |   pea 16fb8 <main_sludge.c.828d7d86+0x2fe>
   1264a:	|                          |   jsr 12e08 <KPrintF>
   12650:	|                          |   addq.l #4,sp
		return FALSE;
   12652:	|                          |   clr.w d0
   12654:	+--------------------------|-- bra.w 12d16 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12658:	|                          \-> clr.l 136(sp)
   1265c:	|                    /-------- bra.w 12774 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   12660:	|                 /--|-------> move.l 19c42 <bigDataFile>,26(sp)
   12668:	|                 |  |         move.l 19c62 <DOSBase>,d0
   1266e:	|                 |  |         movea.l d0,a6
   12670:	|                 |  |         move.l 26(sp),d1
   12674:	|                 |  |         jsr -306(a6)
   12678:	|                 |  |         move.l d0,22(sp)
   1267c:	|                 |  |         move.l 22(sp),d1
   12680:	|                 |  |         movea.l 19d66 <currentFloor>,a0
   12686:	|                 |  |         movea.l 12(a0),a0
   1268a:	|                 |  |         move.l 136(sp),d0
   1268e:	|                 |  |         lsl.l #3,d0
   12690:	|                 |  |         adda.l d0,a0
   12692:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   12694:	|                 |  |         movea.l 19d66 <currentFloor>,a0
   1269a:	|                 |  |         move.l 12(a0),d1
   1269e:	|                 |  |         move.l 136(sp),d0
   126a2:	|                 |  |         lsl.l #3,d0
   126a4:	|                 |  |         movea.l d1,a0
   126a6:	|                 |  |         adda.l d0,a0
   126a8:	|                 |  |         move.l (a0),d0
   126aa:	|                 |  |         add.l d0,d0
   126ac:	|                 |  |         add.l d0,d0
   126ae:	|                 |  |         move.l d0,18(sp)
   126b2:	|                 |  |         clr.l 14(sp)
   126b6:	|                 |  |         move.l 19c5a <SysBase>,d0
   126bc:	|                 |  |         movea.l d0,a6
   126be:	|                 |  |         move.l 18(sp),d0
   126c2:	|                 |  |         move.l 14(sp),d1
   126c6:	|                 |  |         jsr -684(a6)
   126ca:	|                 |  |         move.l d0,10(sp)
   126ce:	|                 |  |         move.l 10(sp),d1
   126d2:	|                 |  |         movea.l 19d66 <currentFloor>,a0
   126d8:	|                 |  |         movea.l 12(a0),a0
   126dc:	|                 |  |         move.l 136(sp),d0
   126e0:	|                 |  |         lsl.l #3,d0
   126e2:	|                 |  |         adda.l d0,a0
   126e4:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   126e8:	|                 |  |         movea.l 19d66 <currentFloor>,a0
   126ee:	|                 |  |         move.l 12(a0),d1
   126f2:	|                 |  |         move.l 136(sp),d0
   126f6:	|                 |  |         lsl.l #3,d0
   126f8:	|                 |  |         movea.l d1,a0
   126fa:	|                 |  |         adda.l d0,a0
   126fc:	|                 |  |         move.l 4(a0),d0
   12700:	|                 |  |     /-- bne.s 12716 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   12702:	|                 |  |     |   pea 16fb8 <main_sludge.c.828d7d86+0x2fe>
   12708:	|                 |  |     |   jsr 12e08 <KPrintF>
   1270e:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   12710:	|                 |  |     |   clr.w d0
   12712:	+-----------------|--|-----|-- bra.w 12d16 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   12716:	|                 |  |     \-> clr.l 132(sp)
   1271a:	|                 |  |     /-- bra.s 12754 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   1271c:	|                 |  |  /--|-> move.l 19c42 <bigDataFile>,d1
   12722:	|                 |  |  |  |   movea.l 19d66 <currentFloor>,a0
   12728:	|                 |  |  |  |   movea.l 12(a0),a0
   1272c:	|                 |  |  |  |   move.l 136(sp),d0
   12730:	|                 |  |  |  |   lsl.l #3,d0
   12732:	|                 |  |  |  |   adda.l d0,a0
   12734:	|                 |  |  |  |   movea.l 4(a0),a0
   12738:	|                 |  |  |  |   move.l 132(sp),d0
   1273c:	|                 |  |  |  |   add.l d0,d0
   1273e:	|                 |  |  |  |   add.l d0,d0
   12740:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   12744:	|                 |  |  |  |   move.l d1,-(sp)
   12746:	|                 |  |  |  |   jsr 6bc <get2bytes>
   1274c:	|                 |  |  |  |   addq.l #4,sp
   1274e:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   12750:	|                 |  |  |  |   addq.l #1,132(sp)
   12754:	|                 |  |  |  \-> movea.l 19d66 <currentFloor>,a0
   1275a:	|                 |  |  |      move.l 12(a0),d1
   1275e:	|                 |  |  |      move.l 136(sp),d0
   12762:	|                 |  |  |      lsl.l #3,d0
   12764:	|                 |  |  |      movea.l d1,a0
   12766:	|                 |  |  |      adda.l d0,a0
   12768:	|                 |  |  |      move.l (a0),d0
   1276a:	|                 |  |  |      cmp.l 132(sp),d0
   1276e:	|                 |  |  \----- bgt.s 1271c <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12770:	|                 |  |         addq.l #1,136(sp)
   12774:	|                 |  \-------> movea.l 19d66 <currentFloor>,a0
   1277a:	|                 |            move.l 8(a0),d0
   1277e:	|                 |            cmp.l 136(sp),d0
   12782:	|                 \----------- bgt.w 12660 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   12786:	|                              move.l 19c42 <bigDataFile>,d0
   1278c:	|                              move.l d0,-(sp)
   1278e:	|                              jsr 6bc <get2bytes>
   12794:	|                              addq.l #4,sp
   12796:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   1279a:	|                              move.l 136(sp),d0
   1279e:	|                              lsl.l #3,d0
   127a0:	|                              move.l d0,98(sp)
   127a4:	|                              clr.l 94(sp)
   127a8:	|                              move.l 19c5a <SysBase>,d0
   127ae:	|                              movea.l d0,a6
   127b0:	|                              move.l 98(sp),d0
   127b4:	|                              move.l 94(sp),d1
   127b8:	|                              jsr -684(a6)
   127bc:	|                              move.l d0,90(sp)
   127c0:	|                              move.l 90(sp),d0
   127c4:	|                              movea.l 19d66 <currentFloor>,a0
   127ca:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   127ce:	|                              movea.l 19d66 <currentFloor>,a0
   127d4:	|                              move.l 4(a0),d0
   127d8:	|                          /-- bne.s 127ee <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   127da:	|                          |   pea 16fb8 <main_sludge.c.828d7d86+0x2fe>
   127e0:	|                          |   jsr 12e08 <KPrintF>
   127e6:	|                          |   addq.l #4,sp
		return FALSE;
   127e8:	|                          |   clr.w d0
   127ea:	+--------------------------|-- bra.w 12d16 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   127ee:	|                          \-> clr.l 132(sp)
   127f2:	|                          /-- bra.s 12846 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   127f4:	|                       /--|-> move.l 19c42 <bigDataFile>,d1
   127fa:	|                       |  |   movea.l 19d66 <currentFloor>,a0
   12800:	|                       |  |   movea.l 4(a0),a0
   12804:	|                       |  |   move.l 132(sp),d0
   12808:	|                       |  |   lsl.l #3,d0
   1280a:	|                       |  |   lea (0,a0,d0.l),a2
   1280e:	|                       |  |   move.l d1,-(sp)
   12810:	|                       |  |   jsr 6bc <get2bytes>
   12816:	|                       |  |   addq.l #4,sp
   12818:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   1281a:	|                       |  |   move.l 19c42 <bigDataFile>,d1
   12820:	|                       |  |   movea.l 19d66 <currentFloor>,a0
   12826:	|                       |  |   movea.l 4(a0),a0
   1282a:	|                       |  |   move.l 132(sp),d0
   1282e:	|                       |  |   lsl.l #3,d0
   12830:	|                       |  |   lea (0,a0,d0.l),a2
   12834:	|                       |  |   move.l d1,-(sp)
   12836:	|                       |  |   jsr 6bc <get2bytes>
   1283c:	|                       |  |   addq.l #4,sp
   1283e:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   12842:	|                       |  |   addq.l #1,132(sp)
   12846:	|                       |  \-> move.l 132(sp),d0
   1284a:	|                       |      cmp.l 136(sp),d0
   1284e:	|                       \----- blt.s 127f4 <setFloor+0x24e>
	}

	finishAccess ();
   12850:	|                              jsr 46c6 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   12856:	|                              movea.l 19d66 <currentFloor>,a0
   1285c:	|                              move.l 8(a0),d0
   12860:	|                              add.l d0,d0
   12862:	|                              add.l d0,d0
   12864:	|                              move.l d0,86(sp)
   12868:	|                              clr.l 82(sp)
   1286c:	|                              move.l 19c5a <SysBase>,d0
   12872:	|                              movea.l d0,a6
   12874:	|                              move.l 86(sp),d0
   12878:	|                              move.l 82(sp),d1
   1287c:	|                              jsr -684(a6)
   12880:	|                              move.l d0,78(sp)
   12884:	|                              move.l 78(sp),d0
   12888:	|                              movea.l 19d66 <currentFloor>,a0
   1288e:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   12892:	|                              movea.l 19d66 <currentFloor>,a0
   12898:	|                              move.l 8(a0),d0
   1289c:	|                              add.l d0,d0
   1289e:	|                              add.l d0,d0
   128a0:	|                              move.l d0,74(sp)
   128a4:	|                              clr.l 70(sp)
   128a8:	|                              move.l 19c5a <SysBase>,d0
   128ae:	|                              movea.l d0,a6
   128b0:	|                              move.l 74(sp),d0
   128b4:	|                              move.l 70(sp),d1
   128b8:	|                              jsr -684(a6)
   128bc:	|                              move.l d0,66(sp)
   128c0:	|                              move.l 66(sp),d0
   128c4:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   128c8:	|                              movea.l 19d66 <currentFloor>,a0
   128ce:	|                              move.l 16(a0),d0
   128d2:	|                          /-- bne.s 128e8 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   128d4:	|                          |   pea 16fb8 <main_sludge.c.828d7d86+0x2fe>
   128da:	|                          |   jsr 12e08 <KPrintF>
   128e0:	|                          |   addq.l #4,sp
		return FALSE;
   128e2:	|                          |   clr.w d0
   128e4:	+--------------------------|-- bra.w 12d16 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   128e8:	|                          \-> clr.l 136(sp)
   128ec:	|                    /-------- bra.w 12a10 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   128f0:	|                 /--|-------> movea.l 19d66 <currentFloor>,a0
   128f6:	|                 |  |         move.l 8(a0),d0
   128fa:	|                 |  |         add.l d0,d0
   128fc:	|                 |  |         add.l d0,d0
   128fe:	|                 |  |         move.l d0,50(sp)
   12902:	|                 |  |         clr.l 46(sp)
   12906:	|                 |  |         move.l 19c5a <SysBase>,d0
   1290c:	|                 |  |         movea.l d0,a6
   1290e:	|                 |  |         move.l 50(sp),d0
   12912:	|                 |  |         move.l 46(sp),d1
   12916:	|                 |  |         jsr -684(a6)
   1291a:	|                 |  |         move.l d0,42(sp)
   1291e:	|                 |  |         move.l 42(sp),d0
   12922:	|                 |  |         movea.l 19d66 <currentFloor>,a0
   12928:	|                 |  |         movea.l 16(a0),a0
   1292c:	|                 |  |         move.l 136(sp),d1
   12930:	|                 |  |         add.l d1,d1
   12932:	|                 |  |         add.l d1,d1
   12934:	|                 |  |         adda.l d1,a0
   12936:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   12938:	|                 |  |         movea.l 19d66 <currentFloor>,a0
   1293e:	|                 |  |         move.l 8(a0),d0
   12942:	|                 |  |         add.l d0,d0
   12944:	|                 |  |         add.l d0,d0
   12946:	|                 |  |         move.l d0,38(sp)
   1294a:	|                 |  |         clr.l 34(sp)
   1294e:	|                 |  |         move.l 19c5a <SysBase>,d0
   12954:	|                 |  |         movea.l d0,a6
   12956:	|                 |  |         move.l 38(sp),d0
   1295a:	|                 |  |         move.l 34(sp),d1
   1295e:	|                 |  |         jsr -684(a6)
   12962:	|                 |  |         move.l d0,30(sp)
   12966:	|                 |  |         move.l 30(sp),d1
   1296a:	|                 |  |         move.l 136(sp),d0
   1296e:	|                 |  |         add.l d0,d0
   12970:	|                 |  |         add.l d0,d0
   12972:	|                 |  |         movea.l 62(sp),a0
   12976:	|                 |  |         adda.l d0,a0
   12978:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   1297a:	|                 |  |         movea.l 19d66 <currentFloor>,a0
   12980:	|                 |  |         move.l 16(a0),d1
   12984:	|                 |  |         move.l 136(sp),d0
   12988:	|                 |  |         add.l d0,d0
   1298a:	|                 |  |         add.l d0,d0
   1298c:	|                 |  |         movea.l d1,a0
   1298e:	|                 |  |         adda.l d0,a0
   12990:	|                 |  |         move.l (a0),d0
   12992:	|                 |  |     /-- bne.s 129a8 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   12994:	|                 |  |     |   pea 16fb8 <main_sludge.c.828d7d86+0x2fe>
   1299a:	|                 |  |     |   jsr 12e08 <KPrintF>
   129a0:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   129a2:	|                 |  |     |   clr.w d0
   129a4:	+-----------------|--|-----|-- bra.w 12d16 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   129a8:	|                 |  |     \-> clr.l 132(sp)
   129ac:	|                 |  |     /-- bra.s 129fc <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   129ae:	|                 |  |  /--|-> movea.l 19d66 <currentFloor>,a0
   129b4:	|                 |  |  |  |   move.l 16(a0),d1
   129b8:	|                 |  |  |  |   move.l 136(sp),d0
   129bc:	|                 |  |  |  |   add.l d0,d0
   129be:	|                 |  |  |  |   add.l d0,d0
   129c0:	|                 |  |  |  |   movea.l d1,a0
   129c2:	|                 |  |  |  |   adda.l d0,a0
   129c4:	|                 |  |  |  |   move.l (a0),d1
   129c6:	|                 |  |  |  |   move.l 132(sp),d0
   129ca:	|                 |  |  |  |   add.l d0,d0
   129cc:	|                 |  |  |  |   add.l d0,d0
   129ce:	|                 |  |  |  |   movea.l d1,a0
   129d0:	|                 |  |  |  |   adda.l d0,a0
   129d2:	|                 |  |  |  |   moveq #-1,d1
   129d4:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   129d6:	|                 |  |  |  |   move.l 136(sp),d0
   129da:	|                 |  |  |  |   add.l d0,d0
   129dc:	|                 |  |  |  |   add.l d0,d0
   129de:	|                 |  |  |  |   movea.l 62(sp),a0
   129e2:	|                 |  |  |  |   adda.l d0,a0
   129e4:	|                 |  |  |  |   move.l (a0),d1
   129e6:	|                 |  |  |  |   move.l 132(sp),d0
   129ea:	|                 |  |  |  |   add.l d0,d0
   129ec:	|                 |  |  |  |   add.l d0,d0
   129ee:	|                 |  |  |  |   movea.l d1,a0
   129f0:	|                 |  |  |  |   adda.l d0,a0
   129f2:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   129f8:	|                 |  |  |  |   addq.l #1,132(sp)
   129fc:	|                 |  |  |  \-> movea.l 19d66 <currentFloor>,a0
   12a02:	|                 |  |  |      move.l 8(a0),d0
   12a06:	|                 |  |  |      cmp.l 132(sp),d0
   12a0a:	|                 |  |  \----- bgt.s 129ae <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12a0c:	|                 |  |         addq.l #1,136(sp)
   12a10:	|                 |  \-------> movea.l 19d66 <currentFloor>,a0
   12a16:	|                 |            move.l 8(a0),d0
   12a1a:	|                 |            cmp.l 136(sp),d0
   12a1e:	|                 \----------- bgt.w 128f0 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12a22:	|                              clr.l 136(sp)
   12a26:	|              /-------------- bra.w 12b2c <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12a2a:	|           /--|-------------> clr.l 132(sp)
   12a2e:	|           |  |     /-------- bra.w 12b16 <setFloor+0x570>
			if (i != j) {
   12a32:	|           |  |  /--|-------> move.l 136(sp),d0
   12a36:	|           |  |  |  |         cmp.l 132(sp),d0
   12a3a:	|           |  |  |  |     /-- beq.w 12acc <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   12a3e:	|           |  |  |  |     |   movea.l 19d66 <currentFloor>,a0
   12a44:	|           |  |  |  |     |   move.l 12(a0),d1
   12a48:	|           |  |  |  |     |   move.l 132(sp),d0
   12a4c:	|           |  |  |  |     |   lsl.l #3,d0
   12a4e:	|           |  |  |  |     |   movea.l d1,a1
   12a50:	|           |  |  |  |     |   adda.l d0,a1
   12a52:	|           |  |  |  |     |   movea.l 19d66 <currentFloor>,a0
   12a58:	|           |  |  |  |     |   move.l 12(a0),d1
   12a5c:	|           |  |  |  |     |   move.l 136(sp),d0
   12a60:	|           |  |  |  |     |   lsl.l #3,d0
   12a62:	|           |  |  |  |     |   movea.l d1,a0
   12a64:	|           |  |  |  |     |   adda.l d0,a0
   12a66:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   12a6a:	|           |  |  |  |     |   move.l (a1),-(sp)
   12a6c:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   12a70:	|           |  |  |  |     |   move.l (a0),-(sp)
   12a72:	|           |  |  |  |     |   jsr 122fe <polysShareSide>
   12a78:	|           |  |  |  |     |   lea 16(sp),sp
   12a7c:	|           |  |  |  |     |   tst.w d0
   12a7e:	|           |  |  |  |  /--|-- beq.w 12b12 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   12a82:	|           |  |  |  |  |  |   movea.l 19d66 <currentFloor>,a0
   12a88:	|           |  |  |  |  |  |   move.l 16(a0),d1
   12a8c:	|           |  |  |  |  |  |   move.l 136(sp),d0
   12a90:	|           |  |  |  |  |  |   add.l d0,d0
   12a92:	|           |  |  |  |  |  |   add.l d0,d0
   12a94:	|           |  |  |  |  |  |   movea.l d1,a0
   12a96:	|           |  |  |  |  |  |   adda.l d0,a0
   12a98:	|           |  |  |  |  |  |   move.l (a0),d1
   12a9a:	|           |  |  |  |  |  |   move.l 132(sp),d0
   12a9e:	|           |  |  |  |  |  |   add.l d0,d0
   12aa0:	|           |  |  |  |  |  |   add.l d0,d0
   12aa2:	|           |  |  |  |  |  |   movea.l d1,a0
   12aa4:	|           |  |  |  |  |  |   adda.l d0,a0
   12aa6:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   12aaa:	|           |  |  |  |  |  |   move.l 136(sp),d0
   12aae:	|           |  |  |  |  |  |   add.l d0,d0
   12ab0:	|           |  |  |  |  |  |   add.l d0,d0
   12ab2:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   12ab6:	|           |  |  |  |  |  |   adda.l d0,a0
   12ab8:	|           |  |  |  |  |  |   move.l (a0),d1
   12aba:	|           |  |  |  |  |  |   move.l 132(sp),d0
   12abe:	|           |  |  |  |  |  |   add.l d0,d0
   12ac0:	|           |  |  |  |  |  |   add.l d0,d0
   12ac2:	|           |  |  |  |  |  |   movea.l d1,a0
   12ac4:	|           |  |  |  |  |  |   adda.l d0,a0
   12ac6:	|           |  |  |  |  |  |   moveq #1,d1
   12ac8:	|           |  |  |  |  |  |   move.l d1,(a0)
   12aca:	|           |  |  |  |  +--|-- bra.s 12b12 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   12acc:	|           |  |  |  |  |  \-> movea.l 19d66 <currentFloor>,a0
   12ad2:	|           |  |  |  |  |      move.l 16(a0),d1
   12ad6:	|           |  |  |  |  |      move.l 136(sp),d0
   12ada:	|           |  |  |  |  |      add.l d0,d0
   12adc:	|           |  |  |  |  |      add.l d0,d0
   12ade:	|           |  |  |  |  |      movea.l d1,a0
   12ae0:	|           |  |  |  |  |      adda.l d0,a0
   12ae2:	|           |  |  |  |  |      move.l (a0),d1
   12ae4:	|           |  |  |  |  |      move.l 132(sp),d0
   12ae8:	|           |  |  |  |  |      add.l d0,d0
   12aea:	|           |  |  |  |  |      add.l d0,d0
   12aec:	|           |  |  |  |  |      movea.l d1,a0
   12aee:	|           |  |  |  |  |      adda.l d0,a0
   12af0:	|           |  |  |  |  |      moveq #-2,d0
   12af2:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   12af4:	|           |  |  |  |  |      move.l 136(sp),d0
   12af8:	|           |  |  |  |  |      add.l d0,d0
   12afa:	|           |  |  |  |  |      add.l d0,d0
   12afc:	|           |  |  |  |  |      movea.l 62(sp),a0
   12b00:	|           |  |  |  |  |      adda.l d0,a0
   12b02:	|           |  |  |  |  |      move.l (a0),d1
   12b04:	|           |  |  |  |  |      move.l 132(sp),d0
   12b08:	|           |  |  |  |  |      add.l d0,d0
   12b0a:	|           |  |  |  |  |      add.l d0,d0
   12b0c:	|           |  |  |  |  |      movea.l d1,a0
   12b0e:	|           |  |  |  |  |      adda.l d0,a0
   12b10:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12b12:	|           |  |  |  |  \----> addq.l #1,132(sp)
   12b16:	|           |  |  |  \-------> movea.l 19d66 <currentFloor>,a0
   12b1c:	|           |  |  |            move.l 8(a0),d0
   12b20:	|           |  |  |            cmp.l 132(sp),d0
   12b24:	|           |  |  \----------- bgt.w 12a32 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12b28:	|           |  |               addq.l #1,136(sp)
   12b2c:	|           |  \-------------> movea.l 19d66 <currentFloor>,a0
   12b32:	|           |                  move.l 8(a0),d0
   12b36:	|           |                  cmp.l 136(sp),d0
   12b3a:	|           \----------------- bgt.w 12a2a <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   12b3e:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   12b42:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   12b46:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12b4a:	|  |                           clr.l 136(sp)
   12b4e:	|  |     /-------------------- bra.w 12ca4 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12b52:	|  |  /--|-------------------> clr.l 132(sp)
   12b56:	|  |  |  |     /-------------- bra.w 12c8e <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   12b5a:	|  |  |  |  /--|-------------> movea.l 19d66 <currentFloor>,a0
   12b60:	|  |  |  |  |  |               move.l 16(a0),d1
   12b64:	|  |  |  |  |  |               move.l 136(sp),d0
   12b68:	|  |  |  |  |  |               add.l d0,d0
   12b6a:	|  |  |  |  |  |               add.l d0,d0
   12b6c:	|  |  |  |  |  |               movea.l d1,a0
   12b6e:	|  |  |  |  |  |               adda.l d0,a0
   12b70:	|  |  |  |  |  |               move.l (a0),d1
   12b72:	|  |  |  |  |  |               move.l 132(sp),d0
   12b76:	|  |  |  |  |  |               add.l d0,d0
   12b78:	|  |  |  |  |  |               add.l d0,d0
   12b7a:	|  |  |  |  |  |               movea.l d1,a0
   12b7c:	|  |  |  |  |  |               adda.l d0,a0
   12b7e:	|  |  |  |  |  |               move.l (a0),d0
   12b80:	|  |  |  |  |  |               moveq #-1,d1
   12b82:	|  |  |  |  |  |               cmp.l d0,d1
   12b84:	|  |  |  |  |  |  /----------- bne.w 12c8a <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12b88:	|  |  |  |  |  |  |            clr.l 122(sp)
   12b8c:	|  |  |  |  |  |  |     /----- bra.w 12c78 <setFloor+0x6d2>
						if (d != i && d != j) {
   12b90:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   12b94:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   12b98:	|  |  |  |  |  |  |  |  |  /-- beq.w 12c74 <setFloor+0x6ce>
   12b9c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   12ba0:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   12ba4:	|  |  |  |  |  |  |  |  |  +-- beq.w 12c74 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   12ba8:	|  |  |  |  |  |  |  |  |  |   movea.l 19d66 <currentFloor>,a0
   12bae:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12bb2:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12bb6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12bb8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12bba:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12bbc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12bbe:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12bc0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12bc4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12bc6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12bc8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12bca:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12bcc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   12bce:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   12bd2:	|  |  |  |  |  |  |  |  |  +-- bne.w 12c74 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   12bd6:	|  |  |  |  |  |  |  |  |  |   movea.l 19d66 <currentFloor>,a0
   12bdc:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12be0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12be4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12be6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12be8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12bea:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12bec:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12bee:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12bf2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12bf4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12bf6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12bf8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12bfa:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   12bfc:	|  |  |  |  |  |  |  |  |  +-- bmi.s 12c74 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   12bfe:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12c02:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c04:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c06:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   12c0a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12c0c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12c0e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12c12:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c14:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c16:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12c18:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12c1a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   12c1c:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   12c20:	|  |  |  |  |  |  |  |  |  +-- bgt.s 12c74 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   12c22:	|  |  |  |  |  |  |  |  |  |   movea.l 19d66 <currentFloor>,a0
   12c28:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12c2c:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12c30:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c32:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c34:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12c36:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12c38:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12c3a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12c3e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c40:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c42:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12c44:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12c46:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   12c4a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12c4e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c50:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c52:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   12c56:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12c58:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12c5a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   12c5e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c60:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12c62:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12c64:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12c66:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   12c6a:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   12c6c:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   12c6e:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12c74:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   12c78:	|  |  |  |  |  |  |  |  \----> movea.l 19d66 <currentFloor>,a0
   12c7e:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   12c82:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   12c86:	|  |  |  |  |  |  |  \-------- bgt.w 12b90 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12c8a:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   12c8e:	|  |  |  |  |  \-------------> movea.l 19d66 <currentFloor>,a0
   12c94:	|  |  |  |  |                  move.l 8(a0),d0
   12c98:	|  |  |  |  |                  cmp.l 132(sp),d0
   12c9c:	|  |  |  |  \----------------- bgt.w 12b5a <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12ca0:	|  |  |  |                     addq.l #1,136(sp)
   12ca4:	|  |  |  \-------------------> movea.l 19d66 <currentFloor>,a0
   12caa:	|  |  |                        move.l 8(a0),d0
   12cae:	|  |  |                        cmp.l 136(sp),d0
   12cb2:	|  |  \----------------------- bgt.w 12b52 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   12cb6:	|  |                           tst.w 130(sp)
   12cba:	|  \-------------------------- bne.w 12b42 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12cbe:	|                              clr.l 136(sp)
   12cc2:	|                          /-- bra.s 12cea <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   12cc4:	|                       /--|-> move.l 136(sp),d0
   12cc8:	|                       |  |   add.l d0,d0
   12cca:	|                       |  |   add.l d0,d0
   12ccc:	|                       |  |   movea.l 62(sp),a0
   12cd0:	|                       |  |   adda.l d0,a0
   12cd2:	|                       |  |   move.l (a0),54(sp)
   12cd6:	|                       |  |   move.l 19c5a <SysBase>,d0
   12cdc:	|                       |  |   movea.l d0,a6
   12cde:	|                       |  |   movea.l 54(sp),a1
   12ce2:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12ce6:	|                       |  |   addq.l #1,136(sp)
   12cea:	|                       |  \-> movea.l 19d66 <currentFloor>,a0
   12cf0:	|                       |      move.l 8(a0),d0
   12cf4:	|                       |      cmp.l 136(sp),d0
   12cf8:	|                       \----- bgt.s 12cc4 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   12cfa:	|                              move.l 62(sp),58(sp)
   12d00:	|                              move.l 19c5a <SysBase>,d0
   12d06:	|                              movea.l d0,a6
   12d08:	|                              movea.l 58(sp),a1
   12d0c:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   12d10:	|                              clr.l 62(sp)

	return TRUE;
   12d14:	|                              moveq #1,d0
}
   12d16:	\----------------------------> movea.l (sp)+,a2
   12d18:	                               movea.l (sp)+,a6
   12d1a:	                               lea 132(sp),sp
   12d1e:	                               rts

00012d20 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   12d20:	jsr 1220e <killFloor>
	noFloor ();
   12d26:	jsr 12132 <noFloor>
   12d2c:	nop
   12d2e:	rts

00012d30 <WaitVbl>:
void WaitVbl() {
   12d30:	       subq.l #8,sp
	debug_start_idle();
   12d32:	       jsr 12fe0 <debug_start_idle>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   12d38:	   /-> movea.l #14675972,a0
   12d3e:	   |   move.l (a0),d0
   12d40:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   12d42:	   |   move.l (sp),d0
   12d44:	   |   andi.l #130816,d0
   12d4a:	   |   move.l d0,(sp)
		if (vpos!=(311<<8))
   12d4c:	   |   move.l (sp),d0
   12d4e:	   |   cmpi.l #79616,d0
   12d54:	   \-- beq.s 12d38 <WaitVbl+0x8>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   12d56:	/----> movea.l #14675972,a0
   12d5c:	|      move.l (a0),d0
   12d5e:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   12d62:	|      move.l 4(sp),d0
   12d66:	|      andi.l #130816,d0
   12d6c:	|      move.l d0,4(sp)
		if (vpos==(311<<8))
   12d70:	|      move.l 4(sp),d0
   12d74:	|      cmpi.l #79616,d0
   12d7a:	|  /-- beq.s 12d7e <WaitVbl+0x4e>
	while (1) {
   12d7c:	\--|-- bra.s 12d56 <WaitVbl+0x26>
			break;
   12d7e:	   \-> nop
	debug_stop_idle();
   12d80:	       jsr 12ffa <debug_stop_idle>
}
   12d86:	       nop
   12d88:	       addq.l #8,sp
   12d8a:	       rts

00012d8c <memset>:
void* memset(void *dest, int val, unsigned long len) {
   12d8c:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   12d8e:	       move.l 8(sp),(sp)
	while(len-- > 0)
   12d92:	   /-- bra.s 12da4 <memset+0x18>
		*ptr++ = val;
   12d94:	/--|-> move.l (sp),d0
   12d96:	|  |   move.l d0,d1
   12d98:	|  |   addq.l #1,d1
   12d9a:	|  |   move.l d1,(sp)
   12d9c:	|  |   move.l 12(sp),d1
   12da0:	|  |   movea.l d0,a0
   12da2:	|  |   move.b d1,(a0)
	while(len-- > 0)
   12da4:	|  \-> move.l 16(sp),d0
   12da8:	|      move.l d0,d1
   12daa:	|      subq.l #1,d1
   12dac:	|      move.l d1,16(sp)
   12db0:	|      tst.l d0
   12db2:	\----- bne.s 12d94 <memset+0x8>
	return dest;
   12db4:	       move.l 8(sp),d0
}
   12db8:	       addq.l #4,sp
   12dba:	       rts

00012dbc <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   12dbc:	       subq.l #8,sp
   12dbe:	       move.l d2,-(sp)
	char *d = (char *)dest;
   12dc0:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   12dc6:	       move.l 20(sp),4(sp)
	while(len--)
   12dcc:	   /-- bra.s 12dee <memcpy+0x32>
		*d++ = *s++;
   12dce:	/--|-> move.l 4(sp),d1
   12dd2:	|  |   move.l d1,d0
   12dd4:	|  |   addq.l #1,d0
   12dd6:	|  |   move.l d0,4(sp)
   12dda:	|  |   move.l 8(sp),d0
   12dde:	|  |   move.l d0,d2
   12de0:	|  |   addq.l #1,d2
   12de2:	|  |   move.l d2,8(sp)
   12de6:	|  |   movea.l d1,a0
   12de8:	|  |   move.b (a0),d1
   12dea:	|  |   movea.l d0,a0
   12dec:	|  |   move.b d1,(a0)
	while(len--)
   12dee:	|  \-> move.l 24(sp),d0
   12df2:	|      move.l d0,d1
   12df4:	|      subq.l #1,d1
   12df6:	|      move.l d1,24(sp)
   12dfa:	|      tst.l d0
   12dfc:	\----- bne.s 12dce <memcpy+0x12>
	return dest;
   12dfe:	       move.l 16(sp),d0
}
   12e02:	       move.l (sp)+,d2
   12e04:	       addq.l #8,sp
   12e06:	       rts

00012e08 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   12e08:	       lea -128(sp),sp
   12e0c:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12e10:	       move.w f0ff60 <gcc8_c_support.c.8bf68f31+0xeceb8d>,d0
   12e16:	       cmpi.w #20153,d0
   12e1a:	   /-- beq.s 12e3e <KPrintF+0x36>
   12e1c:	   |   cmpi.w #-24562,d0
   12e20:	   +-- beq.s 12e3e <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   12e22:	   |   movea.l 19c5a <SysBase>,a6
   12e28:	   |   movea.l 144(sp),a0
   12e2c:	   |   lea 148(sp),a1
   12e30:	   |   lea 13a06 <KPutCharX>,a2
   12e36:	   |   suba.l a3,a3
   12e38:	   |   jsr -522(a6)
}
   12e3c:	/--|-- bra.s 12e68 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   12e3e:	|  \-> movea.l 19c5a <SysBase>,a6
   12e44:	|      movea.l 144(sp),a0
   12e48:	|      lea 148(sp),a1
   12e4c:	|      lea 13a14 <PutChar>,a2
   12e52:	|      lea 12(sp),a3
   12e56:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   12e5a:	|      move.l a3,-(sp)
   12e5c:	|      pea 56 <_start+0x56>
   12e60:	|      jsr f0ff60 <gcc8_c_support.c.8bf68f31+0xeceb8d>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12e66:	|      addq.l #8,sp
}
   12e68:	\----> movem.l (sp)+,a2-a3/a6
   12e6c:	       lea 128(sp),sp
   12e70:	       rts

00012e72 <warpmode>:

void warpmode(int on) { // bool
   12e72:	          subq.l #8,sp
	long(*UaeConf)(long mode, int index, const char* param, int param_len, char* outbuf, int outbuf_len);
	UaeConf = (long(*)(long, int, const char*, int, char*, int))0xf0ff60;
   12e74:	          move.l #15794016,4(sp)
	if(*((UWORD *)UaeConf) == 0x4eb9 || *((UWORD *)UaeConf) == 0xa00e) {
   12e7c:	          movea.l 4(sp),a0
   12e80:	          move.w (a0),d0
   12e82:	          cmpi.w #20153,d0
   12e86:	      /-- beq.s 12e96 <warpmode+0x24>
   12e88:	      |   movea.l 4(sp),a0
   12e8c:	      |   move.w (a0),d0
   12e8e:	      |   cmpi.w #-24562,d0
   12e92:	/-----|-- bne.w 12f9a <warpmode+0x128>
		char outbuf;
		UaeConf(82, -1, on ? "cpu_speed max" : "cpu_speed real", 0, &outbuf, 1);
   12e96:	|     \-> tst.l 12(sp)
   12e9a:	|  /----- beq.s 12ea4 <warpmode+0x32>
   12e9c:	|  |      move.l #94169,d0
   12ea2:	|  |  /-- bra.s 12eaa <warpmode+0x38>
   12ea4:	|  \--|-> move.l #94183,d0
   12eaa:	|     \-> pea 1 <_start+0x1>
   12eae:	|         move.l sp,d1
   12eb0:	|         addq.l #7,d1
   12eb2:	|         move.l d1,-(sp)
   12eb4:	|         clr.l -(sp)
   12eb6:	|         move.l d0,-(sp)
   12eb8:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbec2c>
   12ebc:	|         pea 52 <_start+0x52>
   12ec0:	|         movea.l 28(sp),a0
   12ec4:	|         jsr (a0)
   12ec6:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_cycle_exact false" : "cpu_cycle_exact true", 0, &outbuf, 1);
   12eca:	|         tst.l 12(sp)
   12ece:	|  /----- beq.s 12ed8 <warpmode+0x66>
   12ed0:	|  |      move.l #94198,d0
   12ed6:	|  |  /-- bra.s 12ede <warpmode+0x6c>
   12ed8:	|  \--|-> move.l #94220,d0
   12ede:	|     \-> pea 1 <_start+0x1>
   12ee2:	|         move.l sp,d1
   12ee4:	|         addq.l #7,d1
   12ee6:	|         move.l d1,-(sp)
   12ee8:	|         clr.l -(sp)
   12eea:	|         move.l d0,-(sp)
   12eec:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbec2c>
   12ef0:	|         pea 52 <_start+0x52>
   12ef4:	|         movea.l 28(sp),a0
   12ef8:	|         jsr (a0)
   12efa:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_memory_cycle_exact false" : "cpu_memory_cycle_exact true", 0, &outbuf, 1);
   12efe:	|         tst.l 12(sp)
   12f02:	|  /----- beq.s 12f0c <warpmode+0x9a>
   12f04:	|  |      move.l #94241,d0
   12f0a:	|  |  /-- bra.s 12f12 <warpmode+0xa0>
   12f0c:	|  \--|-> move.l #94270,d0
   12f12:	|     \-> pea 1 <_start+0x1>
   12f16:	|         move.l sp,d1
   12f18:	|         addq.l #7,d1
   12f1a:	|         move.l d1,-(sp)
   12f1c:	|         clr.l -(sp)
   12f1e:	|         move.l d0,-(sp)
   12f20:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbec2c>
   12f24:	|         pea 52 <_start+0x52>
   12f28:	|         movea.l 28(sp),a0
   12f2c:	|         jsr (a0)
   12f2e:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
   12f32:	|         tst.l 12(sp)
   12f36:	|  /----- beq.s 12f40 <warpmode+0xce>
   12f38:	|  |      move.l #94298,d0
   12f3e:	|  |  /-- bra.s 12f46 <warpmode+0xd4>
   12f40:	|  \--|-> move.l #94324,d0
   12f46:	|     \-> pea 1 <_start+0x1>
   12f4a:	|         move.l sp,d1
   12f4c:	|         addq.l #7,d1
   12f4e:	|         move.l d1,-(sp)
   12f50:	|         clr.l -(sp)
   12f52:	|         move.l d0,-(sp)
   12f54:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbec2c>
   12f58:	|         pea 52 <_start+0x52>
   12f5c:	|         movea.l 28(sp),a0
   12f60:	|         jsr (a0)
   12f62:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
   12f66:	|         tst.l 12(sp)
   12f6a:	|  /----- beq.s 12f74 <warpmode+0x102>
   12f6c:	|  |      move.l #94349,d0
   12f72:	|  |  /-- bra.s 12f7a <warpmode+0x108>
   12f74:	|  \--|-> move.l #94359,d0
   12f7a:	|     \-> pea 1 <_start+0x1>
   12f7e:	|         move.l sp,d1
   12f80:	|         addq.l #7,d1
   12f82:	|         move.l d1,-(sp)
   12f84:	|         clr.l -(sp)
   12f86:	|         move.l d0,-(sp)
   12f88:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffbec2c>
   12f8c:	|         pea 52 <_start+0x52>
   12f90:	|         movea.l 28(sp),a0
   12f94:	|         jsr (a0)
   12f96:	|         lea 24(sp),sp
	}
}
   12f9a:	\-------> nop
   12f9c:	          addq.l #8,sp
   12f9e:	          rts

00012fa0 <debug_cmd>:

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   12fa0:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   12fa2:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   12fa8:	       movea.l (sp),a0
   12faa:	       move.w (a0),d0
   12fac:	       cmpi.w #20153,d0
   12fb0:	   /-- beq.s 12fbc <debug_cmd+0x1c>
   12fb2:	   |   movea.l (sp),a0
   12fb4:	   |   move.w (a0),d0
   12fb6:	   |   cmpi.w #-24562,d0
   12fba:	/--|-- bne.s 12fda <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   12fbc:	|  \-> move.l 20(sp),-(sp)
   12fc0:	|      move.l 20(sp),-(sp)
   12fc4:	|      move.l 20(sp),-(sp)
   12fc8:	|      move.l 20(sp),-(sp)
   12fcc:	|      pea 58 <_start+0x58>
   12fd0:	|      movea.l 20(sp),a0
   12fd4:	|      jsr (a0)
   12fd6:	|      lea 20(sp),sp
	}
}
   12fda:	\----> nop
   12fdc:	       addq.l #4,sp
   12fde:	       rts

00012fe0 <debug_start_idle>:
	debug_cmd(barto_cmd_text, (((unsigned int)left) << 16) | ((unsigned int)top), (unsigned int)text, color);
}

// profiler
void debug_start_idle() {
	debug_cmd(barto_cmd_set_idle, 1, 0, 0);
   12fe0:	clr.l -(sp)
   12fe2:	clr.l -(sp)
   12fe4:	pea 1 <_start+0x1>
   12fe8:	pea 5 <_start+0x5>
   12fec:	jsr 12fa0 <debug_cmd>
   12ff2:	lea 16(sp),sp
}
   12ff6:	nop
   12ff8:	rts

00012ffa <debug_stop_idle>:

void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
   12ffa:	clr.l -(sp)
   12ffc:	clr.l -(sp)
   12ffe:	clr.l -(sp)
   13000:	pea 5 <_start+0x5>
   13004:	jsr 12fa0 <debug_cmd>
   1300a:	lea 16(sp),sp
}
   1300e:	nop
   13010:	rts

00013012 <my_strncpy>:

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   13012:	       move.l d2,-(sp)
	while(*source && --num > 0)
   13014:	   /-- bra.s 13036 <my_strncpy+0x24>
		*destination++ = *source++;
   13016:	/--|-> move.l 12(sp),d1
   1301a:	|  |   move.l d1,d0
   1301c:	|  |   addq.l #1,d0
   1301e:	|  |   move.l d0,12(sp)
   13022:	|  |   move.l 8(sp),d0
   13026:	|  |   move.l d0,d2
   13028:	|  |   addq.l #1,d2
   1302a:	|  |   move.l d2,8(sp)
   1302e:	|  |   movea.l d1,a0
   13030:	|  |   move.b (a0),d1
   13032:	|  |   movea.l d0,a0
   13034:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   13036:	|  \-> movea.l 12(sp),a0
   1303a:	|      move.b (a0),d0
   1303c:	|  /-- beq.s 13044 <my_strncpy+0x32>
   1303e:	|  |   subq.l #1,16(sp)
   13042:	\--|-- bne.s 13016 <my_strncpy+0x4>
	*destination = '\0';
   13044:	   \-> movea.l 8(sp),a0
   13048:	       clr.b (a0)
}
   1304a:	       nop
   1304c:	       move.l (sp)+,d2
   1304e:	       rts

00013050 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   13050:	    lea -60(sp),sp
   13054:	    movea.l 72(sp),a1
   13058:	    movea.l 76(sp),a0
   1305c:	    move.l 80(sp),d1
   13060:	    move.l 84(sp),d0
   13064:	    movea.w a1,a1
   13066:	    move.w a1,8(sp)
   1306a:	    movea.w a0,a0
   1306c:	    move.w a0,6(sp)
   13070:	    move.w d1,d1
   13072:	    move.w d1,4(sp)
   13076:	    move.w d0,d0
   13078:	    move.w d0,2(sp)
	struct debug_resource resource = {
   1307c:	    lea 10(sp),a0
   13080:	    clr.l (a0)
   13082:	    addq.l #4,a0
   13084:	    clr.l (a0)
   13086:	    addq.l #4,a0
   13088:	    clr.l (a0)
   1308a:	    addq.l #4,a0
   1308c:	    clr.l (a0)
   1308e:	    addq.l #4,a0
   13090:	    clr.l (a0)
   13092:	    addq.l #4,a0
   13094:	    clr.l (a0)
   13096:	    addq.l #4,a0
   13098:	    clr.l (a0)
   1309a:	    addq.l #4,a0
   1309c:	    clr.l (a0)
   1309e:	    addq.l #4,a0
   130a0:	    clr.l (a0)
   130a2:	    addq.l #4,a0
   130a4:	    clr.l (a0)
   130a6:	    addq.l #4,a0
   130a8:	    clr.l (a0)
   130aa:	    addq.l #4,a0
   130ac:	    clr.l (a0)
   130ae:	    addq.l #4,a0
   130b0:	    clr.w (a0)
   130b2:	    addq.l #2,a0
		.address = (unsigned int)addr,
   130b4:	    move.l 64(sp),d0
	struct debug_resource resource = {
   130b8:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   130bc:	    move.w 8(sp),d0
   130c0:	/-- bpl.s 130c4 <debug_register_bitmap+0x74>
   130c2:	|   addq.w #7,d0
   130c4:	\-> asr.w #3,d0
   130c6:	    movea.w d0,a0
   130c8:	    movea.w 6(sp),a1
   130cc:	    move.l a1,-(sp)
   130ce:	    move.l a0,-(sp)
   130d0:	    jsr 138fe <__mulsi3>
   130d6:	    addq.l #8,sp
   130d8:	    movea.w 4(sp),a0
   130dc:	    move.l a0,-(sp)
   130de:	    move.l d0,-(sp)
   130e0:	    jsr 138fe <__mulsi3>
   130e6:	    addq.l #8,sp
	struct debug_resource resource = {
   130e8:	    move.l d0,14(sp)
   130ec:	    move.w 2(sp),52(sp)
   130f2:	    move.w 8(sp),54(sp)
   130f8:	    move.w 6(sp),56(sp)
   130fe:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   13104:	    moveq #0,d0
   13106:	    move.w 2(sp),d0
   1310a:	    moveq #2,d1
   1310c:	    and.l d1,d0
   1310e:	/-- beq.s 1311a <debug_register_bitmap+0xca>
		resource.size *= 2;
   13110:	|   move.l 14(sp),d0
   13114:	|   add.l d0,d0
   13116:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   1311a:	\-> pea 20 <_start+0x20>
   1311e:	    move.l 72(sp),-(sp)
   13122:	    lea 18(sp),a0
   13126:	    move.l a0,d0
   13128:	    addq.l #8,d0
   1312a:	    move.l d0,-(sp)
   1312c:	    jsr 13012 <my_strncpy>
   13132:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   13136:	    lea 10(sp),a0
   1313a:	    clr.l -(sp)
   1313c:	    clr.l -(sp)
   1313e:	    move.l a0,-(sp)
   13140:	    pea 4 <_start+0x4>
   13144:	    jsr 12fa0 <debug_cmd>
   1314a:	    lea 16(sp),sp
}
   1314e:	    nop
   13150:	    lea 60(sp),sp
   13154:	    rts

00013156 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   13156:	lea -12(sp),sp
   1315a:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   1315c:	move.l 20(sp),12(sp)
   13162:	move.l 24(sp),8(sp)
   13168:	move.l 19c6a <MathIeeeSingBasBase>,d0
   1316e:	movea.l d0,a6
   13170:	move.l 12(sp),d0
   13174:	move.l 8(sp),d1
   13178:	jsr -66(a6)
   1317c:	move.l d0,4(sp)
   13180:	move.l 4(sp),d0
}
   13184:	movea.l (sp)+,a6
   13186:	lea 12(sp),sp
   1318a:	rts

0001318c <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   1318c:	lea -32(sp),sp
   13190:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   13194:	move.l 48(sp),36(sp)
   1319a:	move.l 52(sp),40(sp)
   131a0:	move.l 56(sp),28(sp)
   131a6:	move.l 60(sp),32(sp)
   131ac:	move.l 19c72 <MathIeeeDoubBasBase>,d0
   131b2:	movea.l d0,a6
   131b4:	move.l 36(sp),d0
   131b8:	move.l 40(sp),d1
   131bc:	move.l 28(sp),d2
   131c0:	move.l 32(sp),d3
   131c4:	jsr -66(a6)
   131c8:	move.l d0,12(sp)
   131cc:	move.l d1,16(sp)
   131d0:	move.l 12(sp),20(sp)
   131d6:	move.l 16(sp),24(sp)
   131dc:	move.l 20(sp),d0
   131e0:	move.l 24(sp),d1
}
   131e4:	movem.l (sp)+,d2-d3/a6
   131e8:	lea 32(sp),sp
   131ec:	rts

000131ee <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   131ee:	lea -32(sp),sp
   131f2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   131f6:	move.l 48(sp),36(sp)
   131fc:	move.l 52(sp),40(sp)
   13202:	move.l 56(sp),28(sp)
   13208:	move.l 60(sp),32(sp)
   1320e:	move.l 19c72 <MathIeeeDoubBasBase>,d0
   13214:	movea.l d0,a6
   13216:	move.l 36(sp),d0
   1321a:	move.l 40(sp),d1
   1321e:	move.l 28(sp),d2
   13222:	move.l 32(sp),d3
   13226:	jsr -84(a6)
   1322a:	move.l d0,12(sp)
   1322e:	move.l d1,16(sp)
   13232:	move.l 12(sp),20(sp)
   13238:	move.l 16(sp),24(sp)
   1323e:	move.l 20(sp),d0
   13242:	move.l 24(sp),d1
}
   13246:	movem.l (sp)+,d2-d3/a6
   1324a:	lea 32(sp),sp
   1324e:	rts

00013250 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   13250:	lea -12(sp),sp
   13254:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   13256:	move.l 20(sp),12(sp)
   1325c:	move.l 24(sp),8(sp)
   13262:	move.l 19c6a <MathIeeeSingBasBase>,d0
   13268:	movea.l d0,a6
   1326a:	move.l 12(sp),d0
   1326e:	move.l 8(sp),d1
   13272:	jsr -84(a6)
   13276:	move.l d0,4(sp)
   1327a:	move.l 4(sp),d0
}
   1327e:	movea.l (sp)+,a6
   13280:	lea 12(sp),sp
   13284:	rts

00013286 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   13286:	lea -12(sp),sp
   1328a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1328c:	move.l 20(sp),12(sp)
   13292:	move.l 24(sp),8(sp)
   13298:	move.l 19c6a <MathIeeeSingBasBase>,d0
   1329e:	movea.l d0,a6
   132a0:	move.l 12(sp),d0
   132a4:	move.l 8(sp),d1
   132a8:	jsr -42(a6)
   132ac:	move.l d0,4(sp)
   132b0:	move.l 4(sp),d0
}
   132b4:	movea.l (sp)+,a6
   132b6:	lea 12(sp),sp
   132ba:	rts

000132bc <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   132bc:	lea -20(sp),sp
   132c0:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   132c2:	move.l 28(sp),20(sp)
   132c8:	move.l 19c76 <MathIeeeDoubTransBase>,d0
   132ce:	movea.l d0,a6
   132d0:	move.l 20(sp),d0
   132d4:	jsr -108(a6)
   132d8:	move.l d0,4(sp)
   132dc:	move.l d1,8(sp)
   132e0:	move.l 4(sp),12(sp)
   132e6:	move.l 8(sp),16(sp)
   132ec:	move.l 12(sp),d0
   132f0:	move.l 16(sp),d1
}
   132f4:	movea.l (sp)+,a6
   132f6:	lea 20(sp),sp
   132fa:	rts

000132fc <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   132fc:	lea -12(sp),sp
   13300:	move.l a6,-(sp)
	return IEEEDPFix(value);
   13302:	move.l 20(sp),8(sp)
   13308:	move.l 24(sp),12(sp)
   1330e:	move.l 19c72 <MathIeeeDoubBasBase>,d0
   13314:	movea.l d0,a6
   13316:	move.l 8(sp),d0
   1331a:	move.l 12(sp),d1
   1331e:	jsr -30(a6)
   13322:	move.l d0,4(sp)
   13326:	move.l 4(sp),d0
   1332a:	move.l d0,-(sp)
   1332c:	jsr 13364 <__floatsidf>
   13332:	addq.l #4,sp
}
   13334:	movea.l (sp)+,a6
   13336:	lea 12(sp),sp
   1333a:	rts

0001333c <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   1333c:	subq.l #8,sp
   1333e:	move.l a6,-(sp)
	return IEEESPFix(value);
   13340:	move.l 16(sp),8(sp)
   13346:	move.l 19c6a <MathIeeeSingBasBase>,d0
   1334c:	movea.l d0,a6
   1334e:	move.l 8(sp),d0
   13352:	jsr -30(a6)
   13356:	move.l d0,4(sp)
   1335a:	move.l 4(sp),d0
}
   1335e:	movea.l (sp)+,a6
   13360:	addq.l #8,sp
   13362:	rts

00013364 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   13364:	lea -20(sp),sp
   13368:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   1336a:	move.l 28(sp),20(sp)
   13370:	move.l 19c72 <MathIeeeDoubBasBase>,d0
   13376:	movea.l d0,a6
   13378:	move.l 20(sp),d0
   1337c:	jsr -36(a6)
   13380:	move.l d0,4(sp)
   13384:	move.l d1,8(sp)
   13388:	move.l 4(sp),12(sp)
   1338e:	move.l 8(sp),16(sp)
   13394:	move.l 12(sp),d0
   13398:	move.l 16(sp),d1
}
   1339c:	movea.l (sp)+,a6
   1339e:	lea 20(sp),sp
   133a2:	rts

000133a4 <__floatsisf>:

FLOAT __floatsisf(int i) {
   133a4:	subq.l #8,sp
   133a6:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   133a8:	move.l 16(sp),8(sp)
   133ae:	move.l 19c6a <MathIeeeSingBasBase>,d0
   133b4:	movea.l d0,a6
   133b6:	move.l 8(sp),d0
   133ba:	jsr -36(a6)
   133be:	move.l d0,4(sp)
   133c2:	move.l 4(sp),d0
}
   133c6:	movea.l (sp)+,a6
   133c8:	addq.l #8,sp
   133ca:	rts

000133cc <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   133cc:	subq.l #8,sp
   133ce:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   133d0:	move.l 16(sp),8(sp)
   133d6:	move.l 19c6a <MathIeeeSingBasBase>,d0
   133dc:	movea.l d0,a6
   133de:	move.l 8(sp),d0
   133e2:	jsr -36(a6)
   133e6:	move.l d0,4(sp)
   133ea:	move.l 4(sp),d0
}
   133ee:	movea.l (sp)+,a6
   133f0:	addq.l #8,sp
   133f2:	rts

000133f4 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   133f4:	lea -32(sp),sp
   133f8:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   133fc:	move.l 48(sp),36(sp)
   13402:	move.l 52(sp),40(sp)
   13408:	move.l 56(sp),28(sp)
   1340e:	move.l 60(sp),32(sp)
   13414:	move.l 19c72 <MathIeeeDoubBasBase>,d0
   1341a:	movea.l d0,a6
   1341c:	move.l 36(sp),d0
   13420:	move.l 40(sp),d1
   13424:	move.l 28(sp),d2
   13428:	move.l 32(sp),d3
   1342c:	jsr -78(a6)
   13430:	move.l d0,12(sp)
   13434:	move.l d1,16(sp)
   13438:	move.l 12(sp),20(sp)
   1343e:	move.l 16(sp),24(sp)
   13444:	move.l 20(sp),d0
   13448:	move.l 24(sp),d1
}
   1344c:	movem.l (sp)+,d2-d3/a6
   13450:	lea 32(sp),sp
   13454:	rts

00013456 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   13456:	lea -12(sp),sp
   1345a:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   1345c:	move.l 20(sp),12(sp)
   13462:	move.l 24(sp),8(sp)
   13468:	move.l 19c6a <MathIeeeSingBasBase>,d0
   1346e:	movea.l d0,a6
   13470:	move.l 12(sp),d0
   13474:	move.l 8(sp),d1
   13478:	jsr -78(a6)
   1347c:	move.l d0,4(sp)
   13480:	move.l 4(sp),d0
}
   13484:	movea.l (sp)+,a6
   13486:	lea 12(sp),sp
   1348a:	rts

0001348c <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   1348c:	lea -12(sp),sp
   13490:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13492:	move.l 20(sp),12(sp)
   13498:	move.l 24(sp),8(sp)
   1349e:	move.l 19c6a <MathIeeeSingBasBase>,d0
   134a4:	movea.l d0,a6
   134a6:	move.l 12(sp),d0
   134aa:	move.l 8(sp),d1
   134ae:	jsr -42(a6)
   134b2:	move.l d0,4(sp)
   134b6:	move.l 4(sp),d0
}
   134ba:	movea.l (sp)+,a6
   134bc:	lea 12(sp),sp
   134c0:	rts

000134c2 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   134c2:	lea -20(sp),sp
   134c6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   134ca:	move.l 36(sp),24(sp)
   134d0:	move.l 40(sp),28(sp)
   134d6:	move.l 44(sp),16(sp)
   134dc:	move.l 48(sp),20(sp)
   134e2:	move.l 19c72 <MathIeeeDoubBasBase>,d0
   134e8:	movea.l d0,a6
   134ea:	move.l 24(sp),d0
   134ee:	move.l 28(sp),d1
   134f2:	move.l 16(sp),d2
   134f6:	move.l 20(sp),d3
   134fa:	jsr -42(a6)
   134fe:	move.l d0,12(sp)
   13502:	move.l 12(sp),d0
}
   13506:	movem.l (sp)+,d2-d3/a6
   1350a:	lea 20(sp),sp
   1350e:	rts

00013510 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   13510:	lea -12(sp),sp
   13514:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13516:	move.l 20(sp),12(sp)
   1351c:	move.l 24(sp),8(sp)
   13522:	move.l 19c6a <MathIeeeSingBasBase>,d0
   13528:	movea.l d0,a6
   1352a:	move.l 12(sp),d0
   1352e:	move.l 8(sp),d1
   13532:	jsr -42(a6)
   13536:	move.l d0,4(sp)
   1353a:	move.l 4(sp),d0
}
   1353e:	movea.l (sp)+,a6
   13540:	lea 12(sp),sp
   13544:	rts

00013546 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   13546:	lea -12(sp),sp
   1354a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1354c:	move.l 20(sp),12(sp)
   13552:	move.l 24(sp),8(sp)
   13558:	move.l 19c6a <MathIeeeSingBasBase>,d0
   1355e:	movea.l d0,a6
   13560:	move.l 12(sp),d0
   13564:	move.l 8(sp),d1
   13568:	jsr -42(a6)
   1356c:	move.l d0,4(sp)
   13570:	move.l 4(sp),d0
}
   13574:	movea.l (sp)+,a6
   13576:	lea 12(sp),sp
   1357a:	rts

0001357c <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   1357c:	lea -20(sp),sp
   13580:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   13584:	move.l 36(sp),24(sp)
   1358a:	move.l 40(sp),28(sp)
   13590:	move.l 44(sp),16(sp)
   13596:	move.l 48(sp),20(sp)
   1359c:	move.l 19c72 <MathIeeeDoubBasBase>,d0
   135a2:	movea.l d0,a6
   135a4:	move.l 24(sp),d0
   135a8:	move.l 28(sp),d1
   135ac:	move.l 16(sp),d2
   135b0:	move.l 20(sp),d3
   135b4:	jsr -42(a6)
   135b8:	move.l d0,12(sp)
   135bc:	move.l 12(sp),d0
}
   135c0:	movem.l (sp)+,d2-d3/a6
   135c4:	lea 20(sp),sp
   135c8:	rts

000135ca <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   135ca:	lea -12(sp),sp
   135ce:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   135d0:	move.l 20(sp),12(sp)
   135d6:	move.l 24(sp),8(sp)
   135dc:	move.l 19c6a <MathIeeeSingBasBase>,d0
   135e2:	movea.l d0,a6
   135e4:	move.l 12(sp),d0
   135e8:	move.l 8(sp),d1
   135ec:	jsr -42(a6)
   135f0:	move.l d0,4(sp)
   135f4:	move.l 4(sp),d0
}
   135f8:	movea.l (sp)+,a6
   135fa:	lea 12(sp),sp
   135fe:	rts

00013600 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   13600:	lea -12(sp),sp
   13604:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13606:	move.l 20(sp),12(sp)
   1360c:	move.l 24(sp),8(sp)
   13612:	move.l 19c6a <MathIeeeSingBasBase>,d0
   13618:	movea.l d0,a6
   1361a:	move.l 12(sp),d0
   1361e:	move.l 8(sp),d1
   13622:	jsr -42(a6)
   13626:	move.l d0,4(sp)
   1362a:	move.l 4(sp),d0
}
   1362e:	movea.l (sp)+,a6
   13630:	lea 12(sp),sp
   13634:	rts

00013636 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   13636:	lea -32(sp),sp
   1363a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   1363e:	move.l 48(sp),36(sp)
   13644:	move.l 52(sp),40(sp)
   1364a:	move.l 56(sp),28(sp)
   13650:	move.l 60(sp),32(sp)
   13656:	move.l 19c72 <MathIeeeDoubBasBase>,d0
   1365c:	movea.l d0,a6
   1365e:	move.l 36(sp),d0
   13662:	move.l 40(sp),d1
   13666:	move.l 28(sp),d2
   1366a:	move.l 32(sp),d3
   1366e:	jsr -72(a6)
   13672:	move.l d0,12(sp)
   13676:	move.l d1,16(sp)
   1367a:	move.l 12(sp),20(sp)
   13680:	move.l 16(sp),24(sp)
   13686:	move.l 20(sp),d0
   1368a:	move.l 24(sp),d1
}
   1368e:	movem.l (sp)+,d2-d3/a6
   13692:	lea 32(sp),sp
   13696:	rts

00013698 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   13698:	lea -12(sp),sp
   1369c:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   1369e:	move.l 20(sp),12(sp)
   136a4:	move.l 24(sp),8(sp)
   136aa:	move.l 19c6a <MathIeeeSingBasBase>,d0
   136b0:	movea.l d0,a6
   136b2:	move.l 12(sp),d0
   136b6:	move.l 8(sp),d1
   136ba:	jsr -72(a6)
   136be:	move.l d0,4(sp)
   136c2:	move.l 4(sp),d0
}
   136c6:	movea.l (sp)+,a6
   136c8:	lea 12(sp),sp
   136cc:	rts

000136ce <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   136ce:	lea -12(sp),sp
   136d2:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   136d4:	move.l 20(sp),8(sp)
   136da:	move.l 24(sp),12(sp)
   136e0:	move.l 19c76 <MathIeeeDoubTransBase>,d0
   136e6:	movea.l d0,a6
   136e8:	move.l 8(sp),d0
   136ec:	move.l 12(sp),d1
   136f0:	jsr -102(a6)
   136f4:	move.l d0,4(sp)
   136f8:	move.l 4(sp),d0
}
   136fc:	movea.l (sp)+,a6
   136fe:	lea 12(sp),sp
   13702:	rts

00013704 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   13704:	       lea -24(sp),sp
   13708:	       move.l a6,-(sp)
    if (x > 0) {
   1370a:	       clr.l -(sp)
   1370c:	       move.l 40(sp),-(sp)
   13710:	       jsr 13510 <__gtsf2>
   13716:	       addq.l #8,sp
   13718:	       tst.l d0
   1371a:	   /-- ble.s 1374c <atan2f+0x48>
        return IEEESPAtan(y / x);
   1371c:	   |   move.l 36(sp),-(sp)
   13720:	   |   move.l 36(sp),-(sp)
   13724:	   |   jsr 13250 <__divsf3>
   1372a:	   |   addq.l #8,sp
   1372c:	   |   move.l d0,8(sp)
   13730:	   |   move.l 19c6e <MathIeeeSingTransBase>,d0
   13736:	   |   movea.l d0,a6
   13738:	   |   move.l 8(sp),d0
   1373c:	   |   jsr -30(a6)
   13740:	   |   move.l d0,4(sp)
   13744:	   |   move.l 4(sp),d0
   13748:	/--|-- bra.w 138ac <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   1374c:	|  \-> clr.l -(sp)
   1374e:	|      move.l 40(sp),-(sp)
   13752:	|      jsr 135ca <__ltsf2>
   13758:	|      addq.l #8,sp
   1375a:	|      tst.l d0
   1375c:	|  /-- bge.s 137d0 <atan2f+0xcc>
   1375e:	|  |   clr.l -(sp)
   13760:	|  |   move.l 36(sp),-(sp)
   13764:	|  |   jsr 1348c <__gesf2>
   1376a:	|  |   addq.l #8,sp
   1376c:	|  |   tst.l d0
   1376e:	|  +-- blt.s 137d0 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   13770:	|  |   move.l 36(sp),-(sp)
   13774:	|  |   move.l 36(sp),-(sp)
   13778:	|  |   jsr 13250 <__divsf3>
   1377e:	|  |   addq.l #8,sp
   13780:	|  |   move.l d0,24(sp)
   13784:	|  |   move.l 19c6e <MathIeeeSingTransBase>,d0
   1378a:	|  |   movea.l d0,a6
   1378c:	|  |   move.l 24(sp),d0
   13790:	|  |   jsr -30(a6)
   13794:	|  |   move.l d0,20(sp)
   13798:	|  |   move.l 20(sp),d0
   1379c:	|  |   move.l d0,-(sp)
   1379e:	|  |   jsr 132bc <__extendsfdf2>
   137a4:	|  |   addq.l #4,sp
   137a6:	|  |   move.l #1413754136,-(sp)
   137ac:	|  |   move.l #1074340347,-(sp)
   137b2:	|  |   move.l d1,-(sp)
   137b4:	|  |   move.l d0,-(sp)
   137b6:	|  |   jsr 1318c <__adddf3>
   137bc:	|  |   lea 16(sp),sp
   137c0:	|  |   move.l d1,-(sp)
   137c2:	|  |   move.l d0,-(sp)
   137c4:	|  |   jsr 136ce <__truncdfsf2>
   137ca:	|  |   addq.l #8,sp
   137cc:	+--|-- bra.w 138ac <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   137d0:	|  \-> clr.l -(sp)
   137d2:	|      move.l 40(sp),-(sp)
   137d6:	|      jsr 135ca <__ltsf2>
   137dc:	|      addq.l #8,sp
   137de:	|      tst.l d0
   137e0:	|  /-- bge.s 13852 <atan2f+0x14e>
   137e2:	|  |   clr.l -(sp)
   137e4:	|  |   move.l 36(sp),-(sp)
   137e8:	|  |   jsr 135ca <__ltsf2>
   137ee:	|  |   addq.l #8,sp
   137f0:	|  |   tst.l d0
   137f2:	|  +-- bge.s 13852 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   137f4:	|  |   move.l 36(sp),-(sp)
   137f8:	|  |   move.l 36(sp),-(sp)
   137fc:	|  |   jsr 13250 <__divsf3>
   13802:	|  |   addq.l #8,sp
   13804:	|  |   move.l d0,16(sp)
   13808:	|  |   move.l 19c6e <MathIeeeSingTransBase>,d0
   1380e:	|  |   movea.l d0,a6
   13810:	|  |   move.l 16(sp),d0
   13814:	|  |   jsr -30(a6)
   13818:	|  |   move.l d0,12(sp)
   1381c:	|  |   move.l 12(sp),d0
   13820:	|  |   move.l d0,-(sp)
   13822:	|  |   jsr 132bc <__extendsfdf2>
   13828:	|  |   addq.l #4,sp
   1382a:	|  |   move.l #1413754136,-(sp)
   13830:	|  |   move.l #1074340347,-(sp)
   13836:	|  |   move.l d1,-(sp)
   13838:	|  |   move.l d0,-(sp)
   1383a:	|  |   jsr 13636 <__subdf3>
   13840:	|  |   lea 16(sp),sp
   13844:	|  |   move.l d1,-(sp)
   13846:	|  |   move.l d0,-(sp)
   13848:	|  |   jsr 136ce <__truncdfsf2>
   1384e:	|  |   addq.l #8,sp
   13850:	+--|-- bra.s 138ac <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   13852:	|  \-> clr.l -(sp)
   13854:	|      move.l 40(sp),-(sp)
   13858:	|      jsr 13286 <__eqsf2>
   1385e:	|      addq.l #8,sp
   13860:	|      tst.l d0
   13862:	|  /-- bne.s 1387e <atan2f+0x17a>
   13864:	|  |   clr.l -(sp)
   13866:	|  |   move.l 36(sp),-(sp)
   1386a:	|  |   jsr 13510 <__gtsf2>
   13870:	|  |   addq.l #8,sp
   13872:	|  |   tst.l d0
   13874:	|  +-- ble.s 1387e <atan2f+0x17a>
        return PI / 2;
   13876:	|  |   move.l #1070141403,d0
   1387c:	+--|-- bra.s 138ac <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   1387e:	|  \-> clr.l -(sp)
   13880:	|      move.l 40(sp),-(sp)
   13884:	|      jsr 13286 <__eqsf2>
   1388a:	|      addq.l #8,sp
   1388c:	|      tst.l d0
   1388e:	|  /-- bne.s 138aa <atan2f+0x1a6>
   13890:	|  |   clr.l -(sp)
   13892:	|  |   move.l 36(sp),-(sp)
   13896:	|  |   jsr 135ca <__ltsf2>
   1389c:	|  |   addq.l #8,sp
   1389e:	|  |   tst.l d0
   138a0:	|  +-- bge.s 138aa <atan2f+0x1a6>
        return -PI / 2;
   138a2:	|  |   move.l #-1077342245,d0
   138a8:	+--|-- bra.s 138ac <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   138aa:	|  \-> moveq #0,d0
    }
}
   138ac:	\----> movea.l (sp)+,a6
   138ae:	       lea 24(sp),sp
   138b2:	       rts

000138b4 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   138b4:	lea -24(sp),sp
   138b8:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   138ba:	move.l 32(sp),20(sp)
   138c0:	move.l 36(sp),24(sp)
   138c6:	move.l 19c76 <MathIeeeDoubTransBase>,d0
   138cc:	movea.l d0,a6
   138ce:	move.l 20(sp),d0
   138d2:	move.l 24(sp),d1
   138d6:	jsr -96(a6)
   138da:	move.l d0,4(sp)
   138de:	move.l d1,8(sp)
   138e2:	move.l 4(sp),12(sp)
   138e8:	move.l 8(sp),16(sp)
   138ee:	move.l 12(sp),d0
   138f2:	move.l 16(sp),d1
}
   138f6:	movea.l (sp)+,a6
   138f8:	lea 24(sp),sp
   138fc:	rts

000138fe <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   138fe:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   13902:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   13906:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   1390a:	mulu.w 8(sp),d1
	addw	d1, d0
   1390e:	add.w d1,d0
	swap	d0
   13910:	swap d0
	clrw	d0
   13912:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   13914:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   13918:	mulu.w 10(sp),d1
	addl	d1, d0
   1391c:	add.l d1,d0
	rts
   1391e:	rts

00013920 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   13920:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   13922:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   13926:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   1392a:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   13930:	   /-- bcc.s 13948 <__udivsi3+0x28>
	movel	d0, d2
   13932:	   |   move.l d0,d2
	clrw	d2
   13934:	   |   clr.w d2
	swap	d2
   13936:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   13938:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   1393a:	   |   move.w d2,d0
	swap	d0
   1393c:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   1393e:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   13942:	   |   divu.w d1,d2
	movew	d2, d0
   13944:	   |   move.w d2,d0
	jra	6f
   13946:	/--|-- bra.s 13978 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   13948:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   1394a:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   1394c:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   1394e:	|  |   cmpi.l #65536,d1
	jcc	4b
   13954:	|  \-- bcc.s 1394a <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   13956:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   13958:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   1395e:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   13960:	|      mulu.w d0,d1
	swap	d2
   13962:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   13964:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   13966:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   13968:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   1396a:	|  /-- bne.s 13976 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   1396c:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   1396e:	|  +-- bcs.s 13976 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   13970:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   13974:	+--|-- bls.s 13978 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   13976:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   13978:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   1397a:	       rts

0001397c <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   1397c:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   1397e:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   13980:	    move.l 12(sp),d1
	jpl	1f
   13984:	/-- bpl.s 1398a <__divsi3+0xe>
	negl	d1
   13986:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   13988:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   1398a:	\-> move.l 8(sp),d0
	jpl	2f
   1398e:	/-- bpl.s 13994 <__divsi3+0x18>
	negl	d0
   13990:	|   neg.l d0
	negb	d2
   13992:	|   neg.b d2

2:	movel	d1, sp@-
   13994:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   13996:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   13998:	    jsr 13920 <__udivsi3>
	addql	#8, sp
   1399e:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   139a0:	    tst.b d2
	jpl	3f
   139a2:	/-- bpl.s 139a6 <__divsi3+0x2a>
	negl	d0
   139a4:	|   neg.l d0

3:	movel	sp@+, d2
   139a6:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   139a8:	    rts

000139aa <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   139aa:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   139ae:	move.l 4(sp),d0
	movel	d1, sp@-
   139b2:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   139b4:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   139b6:	jsr 1397c <__divsi3>
	addql	#8, sp
   139bc:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   139be:	move.l 8(sp),d1
	movel	d1, sp@-
   139c2:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   139c4:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   139c6:	jsr 138fe <__mulsi3>
	addql	#8, sp
   139cc:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   139ce:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   139d2:	sub.l d0,d1
	movel	d1, d0
   139d4:	move.l d1,d0
	rts
   139d6:	rts

000139d8 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   139d8:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   139dc:	move.l 4(sp),d0
	movel	d1, sp@-
   139e0:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   139e2:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   139e4:	jsr 13920 <__udivsi3>
	addql	#8, sp
   139ea:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   139ec:	move.l 8(sp),d1
	movel	d1, sp@-
   139f0:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   139f2:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   139f4:	jsr 138fe <__mulsi3>
	addql	#8, sp
   139fa:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   139fc:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   13a00:	sub.l d0,d1
	movel	d1, d0
   13a02:	move.l d1,d0
	rts
   13a04:	rts

00013a06 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   13a06:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   13a08:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   13a0c:	jsr -516(a6)
    move.l (sp)+, a6
   13a10:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   13a12:	rts

00013a14 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   13a14:	move.b d0,(a3)+
	rts
   13a16:	rts
