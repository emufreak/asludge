
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #108380,d0
       8:	       subi.l #108380,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1a75c <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #108380,d0
      40:	       subi.l #108380,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1a75c <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 6486 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #108380,d0
      7e:	       subi.l #108380,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1a75c <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 12b1a <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1af02 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 12b32 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1a75c <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 12b1a <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1af02 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1a75c <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 12b1a <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1af02 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 162d2 <PutChar+0x4>
     35c:	|  |              |   jsr 157fa <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1af0a <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1af0a <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1af0a <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1af0a <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1af0a <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1af0a <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1af0a <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 162fc <PutChar+0x2e>
     834:	|   jsr 157fa <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1af0a <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 16318 <PutChar+0x4a>
     8a6:	|   jsr 157fa <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1af0a <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1af0a <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1af0a <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1af0a <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1af0a <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1af0a <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1af0a <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1af0a <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1af02 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1af0a <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 12b1a <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1af0a <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 1af02 <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 1af02 <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #90944,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 1af02 <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 1634d <PutChar+0x7f>
     cea:	   |   jsr 157fa <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 161b8 <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 16292 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 1636a <PutChar+0x9c>
     d66:	|      jsr 157fa <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 1af02 <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 1af02 <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 1af02 <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     dba:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     dbe:	    movea.l 1ae06 <mouseCursorAnim>,a0
     dc4:	    move.l (a0),d0
     dc6:	/-- beq.w ec6 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     dca:	|   movea.l 1ae06 <mouseCursorAnim>,a0
     dd0:	|   movea.l (a0),a0
     dd2:	|   movea.l 16(a0),a1
     dd6:	|   movea.l 1ae06 <mouseCursorAnim>,a0
     ddc:	|   movea.l 4(a0),a0
     de0:	|   move.l (a0),d0
     de2:	|   move.l d0,d1
     de4:	|   move.l d1,d0
     de6:	|   lsl.l #3,d0
     de8:	|   sub.l d1,d0
     dea:	|   add.l d0,d0
     dec:	|   add.l d0,d0
     dee:	|   lea (0,a1,d0.l),a0
     df2:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     df6:	|   movea.l 1ae06 <mouseCursorAnim>,a0
     dfc:	|   movea.l (a0),a0
     dfe:	|   move.l 16(a0),d2
     e02:	|   movea.l 1ae06 <mouseCursorAnim>,a0
     e08:	|   movea.l 4(a0),a0
     e0c:	|   move.l (a0),d0
     e0e:	|   move.l d0,d1
     e10:	|   move.l d1,d0
     e12:	|   lsl.l #3,d0
     e14:	|   sub.l d1,d0
     e16:	|   add.l d0,d0
     e18:	|   add.l d0,d0
     e1a:	|   movea.l d2,a0
     e1c:	|   adda.l d0,a0
     e1e:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     e22:	|   move.l d0,d0
     e24:	|   moveq #0,d3
     e26:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     e28:	|   move.l 1aec2 <input+0xe>,d0
     e2e:	|   move.l d0,d2
     e30:	|   movea.l 1ae06 <mouseCursorAnim>,a0
     e36:	|   movea.l (a0),a0
     e38:	|   move.l 16(a0),d4
     e3c:	|   movea.l 1ae06 <mouseCursorAnim>,a0
     e42:	|   movea.l 4(a0),a0
     e46:	|   move.l (a0),d0
     e48:	|   move.l d0,d1
     e4a:	|   move.l d1,d0
     e4c:	|   lsl.l #3,d0
     e4e:	|   sub.l d1,d0
     e50:	|   add.l d0,d0
     e52:	|   add.l d0,d0
     e54:	|   movea.l d4,a0
     e56:	|   adda.l d0,a0
     e58:	|   move.l 12(a0),d0
     e5c:	|   move.l d0,d0
     e5e:	|   move.w d2,d1
     e60:	|   sub.w d0,d1
     e62:	|   move.w d1,d0
     e64:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     e68:	|   moveq #0,d2
     e6a:	|   move.w d0,d2
     e6c:	|   move.l 1aebe <input+0xa>,d0
     e72:	|   move.l d0,d4
     e74:	|   movea.l 1ae06 <mouseCursorAnim>,a0
     e7a:	|   movea.l (a0),a0
     e7c:	|   move.l 16(a0),d5
     e80:	|   movea.l 1ae06 <mouseCursorAnim>,a0
     e86:	|   movea.l 4(a0),a0
     e8a:	|   move.l (a0),d0
     e8c:	|   move.l d0,d1
     e8e:	|   move.l d1,d0
     e90:	|   lsl.l #3,d0
     e92:	|   sub.l d1,d0
     e94:	|   add.l d0,d0
     e96:	|   add.l d0,d0
     e98:	|   movea.l d5,a0
     e9a:	|   adda.l d0,a0
     e9c:	|   move.l 8(a0),d0
     ea0:	|   move.l d0,d0
     ea2:	|   move.w d4,d1
     ea4:	|   sub.w d0,d1
     ea6:	|   move.w d1,d0
     ea8:	|   addi.w #128,d0
     eac:	|   move.w d0,d0
     eae:	|   andi.l #65535,d0
     eb4:	|   move.l a1,-(sp)
     eb6:	|   move.l d3,-(sp)
     eb8:	|   move.l d2,-(sp)
     eba:	|   move.l d0,-(sp)
     ebc:	|   jsr 1534 <CstDisplayCursor>
     ec2:	|   lea 16(sp),sp
	}
}
     ec6:	\-> nop
     ec8:	    movem.l (sp)+,d2-d5
     ecc:	    rts

00000ece <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     ece:	move.l 1ae06 <mouseCursorAnim>,d0
     ed4:	move.l d0,-(sp)
     ed6:	jsr 8908 <deleteAnim>
     edc:	addq.l #4,sp
	mouseCursorAnim = pp;
     ede:	move.l 4(sp),1ae06 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     ee6:	clr.l 1ae0a <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     eec:	clr.l 1ae0e <mouseCursorCountUp>
}
     ef2:	nop
     ef4:	rts

00000ef6 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     ef6:	subq.l #8,sp
	
	struct sprite *spritetouse = c->theSprites->bank.sprites;
     ef8:	movea.l 20(sp),a0
     efc:	movea.l (a0),a0
     efe:	move.l 16(a0),4(sp)

	UWORD absx =  x - spritetouse->xhot;
     f04:	move.l 12(sp),d0
     f08:	movea.l 4(sp),a0
     f0c:	move.l 8(a0),d1
     f10:	move.l d1,d1
     f12:	movea.w d0,a0
     f14:	suba.w d1,a0
     f16:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     f1a:	move.l 16(sp),d0
     f1e:	movea.l 4(sp),a0
     f22:	move.l 12(a0),d1
     f26:	move.l d1,d1
     f28:	movea.w d0,a0
     f2a:	suba.w d1,a0
     f2c:	move.w a0,(sp)

	CstScaleSprite( spritetouse, absx, absy, BACKDROP);
     f2e:	move.w (sp),d0
     f30:	movea.w d0,a1
     f32:	move.w 2(sp),d0
     f36:	movea.w d0,a0
     f38:	pea 2 <_start+0x2>
     f3c:	move.l a1,-(sp)
     f3e:	move.l a0,-(sp)
     f40:	move.l 16(sp),-(sp)
     f44:	jsr 1cc8 <CstScaleSprite>
     f4a:	lea 16(sp),sp
     f4e:	nop
     f50:	addq.l #8,sp
     f52:	rts

00000f54 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     f54:	          lea -16(sp),sp
     f58:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     f5a:	          pea 1637d <PutChar+0xaf>
     f60:	          jsr 157fa <KPrintF>
     f66:	          addq.l #4,sp

  if( !CstBackDrop) {
     f68:	          move.l 1ae20 <CstBackDrop>,d0
     f6e:	      /-- bne.s f82 <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     f70:	      |   pea 16396 <PutChar+0xc8>
     f76:	      |   jsr 157fa <KPrintF>
     f7c:	      |   addq.l #4,sp
    return;
     f7e:	/-----|-- bra.w 110c <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     f82:	|     \-> clr.w 1ae1a <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     f88:	|         move.l #14675968,8(sp)

  width /= 16;
     f90:	|         move.l 24(sp),d0
     f94:	|         movea.l d0,a0
     f96:	|         cmpa.w #0,a0
     f9a:	|     /-- bge.s fa0 <CstBlankScreen+0x4c>
     f9c:	|     |   lea 15(a0),a0
     fa0:	|     \-> move.l a0,d0
     fa2:	|         asr.l #4,d0
     fa4:	|         move.l d0,24(sp)

  WaitBlit();
     fa8:	|         move.l 1af0e <GfxBase>,d0
     fae:	|         movea.l d0,a6
     fb0:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     fb4:	|         movea.l 8(sp),a0
     fb8:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     fbe:	|         movea.l 8(sp),a0
     fc2:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     fc8:	|         movea.l 8(sp),a0
     fcc:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     fd2:	|         movea.l 8(sp),a0
     fd6:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     fdc:	|         movea.l 8(sp),a0
     fe0:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     fe6:	|         movea.l 8(sp),a0
     fea:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     ff0:	|         movea.l 8(sp),a0
     ff4:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ffa:	|         movea.l 8(sp),a0
     ffe:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
    1004:	|         move.l 1ae20 <CstBackDrop>,d0
    100a:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
    100e:	|         move.l 28(sp),d0
    1012:	|         lsl.w #6,d0
    1014:	|         move.l 24(sp),d1
    1018:	|         movea.w d0,a0
    101a:	|         adda.w d1,a0
    101c:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
    1020:	|         move.l 24(sp),d1
    1024:	|         move.l 28(sp),d0
    1028:	|         muls.w d1,d0
    102a:	|         add.w d0,d0
    102c:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
    1030:	|         pea 163c4 <PutChar+0xf6>
    1036:	|         jsr 157fa <KPrintF>
    103c:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
    103e:	|         clr.l 12(sp)
    1042:	|     /-- bra.s 1074 <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
    1044:	|  /--|-> move.l 16(sp),d0
    1048:	|  |  |   movea.l 8(sp),a0
    104c:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
    1050:	|  |  |   movea.l 8(sp),a0
    1054:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
    105a:	|  |  |   move.l 1af0e <GfxBase>,d0
    1060:	|  |  |   movea.l d0,a6
    1062:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
    1066:	|  |  |   moveq #0,d0
    1068:	|  |  |   move.w 4(sp),d0
    106c:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
    1070:	|  |  |   addq.l #1,12(sp)
    1074:	|  |  \-> moveq #4,d0
    1076:	|  |      cmp.l 12(sp),d0
    107a:	|  \----- bge.s 1044 <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
    107c:	|         pea 163e4 <PutChar+0x116>
    1082:	|         jsr 157fa <KPrintF>
    1088:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
    108a:	|         move.w #2,1ae28 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1092:	|         move.l 1ae56 <winWidth>,d0
    1098:	|         lsr.l #4,d0
    109a:	|         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    10a0:	|         move.l a0,d1
    10a2:	|         addq.l #2,d1
    10a4:	|         move.l d1,1ae46 <CstBackDropBufferApplyCursor>
    10aa:	|         move.l d0,d0
    10ac:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    10ae:	|         move.l 1ae5a <winHeight>,d0
    10b4:	|         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    10ba:	|         move.l a0,d1
    10bc:	|         addq.l #2,d1
    10be:	|         move.l d1,1ae46 <CstBackDropBufferApplyCursor>
    10c4:	|         move.l d0,d0
    10c6:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    10c8:	|         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    10ce:	|         move.l a0,d0
    10d0:	|         addq.l #2,d0
    10d2:	|         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    10d8:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    10da:	|         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    10e0:	|         move.l a0,d0
    10e2:	|         addq.l #2,d0
    10e4:	|         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    10ea:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    10ec:	|         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    10f2:	|         move.l a0,d0
    10f4:	|         addq.l #2,d0
    10f6:	|         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    10fc:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
    10fe:	|         pea 16404 <PutChar+0x136>
    1104:	|         jsr 157fa <KPrintF>
    110a:	|         addq.l #4,sp


}
    110c:	\-------> movea.l (sp)+,a6
    110e:	          lea 16(sp),sp
    1112:	          rts

00001114 <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    1114:	       lea -52(sp),sp
    1118:	       move.l a6,-(sp)
    111a:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    111c:	       move.l #400,32(sp)
    1124:	       moveq #2,d0
    1126:	       move.l d0,28(sp)
    112a:	       move.l 1af02 <SysBase>,d0
    1130:	       movea.l d0,a6
    1132:	       move.l 32(sp),d0
    1136:	       move.l 28(sp),d1
    113a:	       jsr -198(a6)
    113e:	       move.l d0,24(sp)
    1142:	       move.l 24(sp),d0
    1146:	       move.l d0,20(sp)
  
  if( retval == 0) {
    114a:	   /-- bne.s 1174 <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    114c:	   |   pea 28 <_start+0x28>
    1150:	   |   pea 16419 <PutChar+0x14b>
    1156:	   |   jsr 157fa <KPrintF>
    115c:	   |   addq.l #8,sp
    Exit(1);
    115e:	   |   moveq #1,d1
    1160:	   |   move.l d1,16(sp)
    1164:	   |   move.l 1af0a <DOSBase>,d0
    116a:	   |   movea.l d0,a6
    116c:	   |   move.l 16(sp),d1
    1170:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    1174:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    117a:	       move.l 56(sp),1ae52 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1182:	       move.l #108382,52(sp)
  for(int i=0; i<16;i++)
    118a:	       clr.l 48(sp)
    118e:	   /-- bra.s 11b4 <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1190:	/--|-> move.l 52(sp),d1
    1194:	|  |   move.l d1,d2
    1196:	|  |   addq.l #4,d2
    1198:	|  |   move.l d2,52(sp)
    119c:	|  |   move.l 56(sp),d0
    11a0:	|  |   move.l d0,d2
    11a2:	|  |   addq.l #4,d2
    11a4:	|  |   move.l d2,56(sp)
    11a8:	|  |   movea.l d1,a0
    11aa:	|  |   move.l (a0),d1
    11ac:	|  |   movea.l d0,a0
    11ae:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    11b0:	|  |   addq.l #1,48(sp)
    11b4:	|  \-> moveq #15,d0
    11b6:	|      cmp.l 48(sp),d0
    11ba:	\----- bge.s 1190 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    11bc:	       move.l #108446,52(sp)

  for(int i=0; i<12;i++)
    11c4:	       clr.l 44(sp)
    11c8:	   /-- bra.s 11ee <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    11ca:	/--|-> move.l 52(sp),d1
    11ce:	|  |   move.l d1,d2
    11d0:	|  |   addq.l #4,d2
    11d2:	|  |   move.l d2,52(sp)
    11d6:	|  |   move.l 56(sp),d0
    11da:	|  |   move.l d0,d2
    11dc:	|  |   addq.l #4,d2
    11de:	|  |   move.l d2,56(sp)
    11e2:	|  |   movea.l d1,a0
    11e4:	|  |   move.l (a0),d1
    11e6:	|  |   movea.l d0,a0
    11e8:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11ea:	|  |   addq.l #1,44(sp)
    11ee:	|  \-> moveq #11,d0
    11f0:	|      cmp.l 44(sp),d0
    11f4:	\----- bge.s 11ca <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11f6:	       move.l #108494,52(sp)
  for(int i=0; i<10;i++)
    11fe:	       clr.l 40(sp)
    1202:	   /-- bra.s 1228 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    1204:	/--|-> move.l 52(sp),d1
    1208:	|  |   move.l d1,d2
    120a:	|  |   addq.l #4,d2
    120c:	|  |   move.l d2,52(sp)
    1210:	|  |   move.l 56(sp),d0
    1214:	|  |   move.l d0,d2
    1216:	|  |   addq.l #4,d2
    1218:	|  |   move.l d2,56(sp)
    121c:	|  |   movea.l d1,a0
    121e:	|  |   move.l (a0),d1
    1220:	|  |   movea.l d0,a0
    1222:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1224:	|  |   addq.l #1,40(sp)
    1228:	|  \-> moveq #9,d0
    122a:	|      cmp.l 40(sp),d0
    122e:	\----- bge.s 1204 <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    1230:	       move.l #108534,52(sp)
  CstClColor = (UWORD *) cl;
    1238:	       move.l 56(sp),1ae4a <CstClColor>
  for(int i=0; i<32;i++)
    1240:	       clr.l 36(sp)
    1244:	   /-- bra.s 126a <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1246:	/--|-> move.l 52(sp),d1
    124a:	|  |   move.l d1,d2
    124c:	|  |   addq.l #4,d2
    124e:	|  |   move.l d2,52(sp)
    1252:	|  |   move.l 56(sp),d0
    1256:	|  |   move.l d0,d2
    1258:	|  |   addq.l #4,d2
    125a:	|  |   move.l d2,56(sp)
    125e:	|  |   movea.l d1,a0
    1260:	|  |   move.l (a0),d1
    1262:	|  |   movea.l d0,a0
    1264:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1266:	|  |   addq.l #1,36(sp)
    126a:	|  \-> moveq #31,d0
    126c:	|      cmp.l 36(sp),d0
    1270:	\----- bge.s 1246 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1272:	       moveq #40,d1
    1274:	       cmp.l 64(sp),d1
    1278:	   /-- bge.s 12d6 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    127a:	   |   moveq #-40,d2
    127c:	   |   add.l 64(sp),d2
    1280:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    1284:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    128a:	   |   move.l 8(sp),d0
    128e:	   |   move.l d0,d1
    1290:	   |   addq.l #2,d1
    1292:	   |   move.l d1,8(sp)
    1296:	   |   movea.l d0,a0
    1298:	   |   move.w #264,(a0)
    *cw++ = tmp;
    129c:	   |   move.l 8(sp),d0
    12a0:	   |   move.l d0,d1
    12a2:	   |   addq.l #2,d1
    12a4:	   |   move.l d1,8(sp)
    12a8:	   |   move.l 12(sp),d1
    12ac:	   |   movea.l d0,a0
    12ae:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    12b0:	   |   move.l 8(sp),d0
    12b4:	   |   move.l d0,d1
    12b6:	   |   addq.l #2,d1
    12b8:	   |   move.l d1,8(sp)
    12bc:	   |   movea.l d0,a0
    12be:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    12c2:	   |   move.l 8(sp),d0
    12c6:	   |   move.l d0,d1
    12c8:	   |   addq.l #2,d1
    12ca:	   |   move.l d1,8(sp)
    12ce:	   |   move.l 12(sp),d1
    12d2:	   |   movea.l d0,a0
    12d4:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    12d6:	   \-> move.l 56(sp),d0
    12da:	       move.l d0,d1
    12dc:	       addq.l #4,d1
    12de:	       move.l d1,56(sp)
    12e2:	       moveq #-2,d2
    12e4:	       movea.l d0,a0
    12e6:	       move.l d2,(a0)
  return (UWORD *) retval;  
    12e8:	       move.l 20(sp),d0
}
    12ec:	       move.l (sp)+,d2
    12ee:	       movea.l (sp)+,a6
    12f0:	       lea 52(sp),sp
    12f4:	       rts

000012f6 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    12f6:	                lea -40(sp),sp
    12fa:	                move.l a6,-(sp)
    12fc:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    12fe:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    1306:	                pea 16454 <PutChar+0x186>
    130c:	                jsr 157fa <KPrintF>
    1312:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    1314:	                move.l 1ae42 <CstBackDropBufferApplyStart>,d0
    131a:	                move.l d0,1ae46 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    1320:	                move.l 1ae42 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    1328:	                movea.l 44(sp),a0
    132c:	                move.w (a0),d0
    132e:	/-------------- beq.w 1528 <CstDisplayBackDrop+0x232>
    1332:	|               move.l 1ae2e <CstDrawBuffer>,d0
    1338:	+-------------- beq.w 1528 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    133c:	|               move.l 1af0e <GfxBase>,d0
    1342:	|               movea.l d0,a6
    1344:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1348:	|               movea.l 16(sp),a0
    134c:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1352:	|               movea.l 16(sp),a0
    1356:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    135c:	|               movea.l 16(sp),a0
    1360:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1366:	|     /-------- bra.w 14ce <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    136a:	|  /--|-------> move.l 44(sp),d0
    136e:	|  |  |         move.l d0,d1
    1370:	|  |  |         addq.l #2,d1
    1372:	|  |  |         move.l d1,44(sp)
    1376:	|  |  |         movea.l d0,a0
    1378:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    137c:	|  |  |         move.l 44(sp),d0
    1380:	|  |  |         move.l d0,d1
    1382:	|  |  |         addq.l #2,d1
    1384:	|  |  |         move.l d1,44(sp)
    1388:	|  |  |         movea.l d0,a0
    138a:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    138e:	|  |  |         move.l 44(sp),d0
    1392:	|  |  |         move.l d0,d1
    1394:	|  |  |         addq.l #2,d1
    1396:	|  |  |         move.l d1,44(sp)
    139a:	|  |  |         movea.l d0,a0
    139c:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    13a0:	|  |  |         move.l 44(sp),d0
    13a4:	|  |  |         move.l d0,d1
    13a6:	|  |  |         addq.l #2,d1
    13a8:	|  |  |         move.l d1,44(sp)
    13ac:	|  |  |         movea.l d0,a0
    13ae:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    13b2:	|  |  |         move.l 1ae56 <winWidth>,d0
    13b8:	|  |  |         lsr.l #3,d0
    13ba:	|  |  |         move.l d0,d1
    13bc:	|  |  |         move.w 14(sp),d0
    13c0:	|  |  |         add.w d0,d0
    13c2:	|  |  |         sub.w d0,d1
    13c4:	|  |  |         movea.l 16(sp),a0
    13c8:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    13cc:	|  |  |         move.l 1ae56 <winWidth>,d0
    13d2:	|  |  |         lsr.l #3,d0
    13d4:	|  |  |         move.l d0,d1
    13d6:	|  |  |         move.w 14(sp),d0
    13da:	|  |  |         add.w d0,d0
    13dc:	|  |  |         sub.w d0,d1
    13de:	|  |  |         movea.l 16(sp),a0
    13e2:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    13e6:	|  |  |         moveq #0,d0
    13e8:	|  |  |         move.w 8(sp),d0
    13ec:	|  |  |         move.l 1ae56 <winWidth>,d1
    13f2:	|  |  |         move.l d1,-(sp)
    13f4:	|  |  |         move.l d0,-(sp)
    13f6:	|  |  |         jsr 161b8 <__mulsi3>
    13fc:	|  |  |         addq.l #8,sp
    13fe:	|  |  |         move.l d0,d1
    1400:	|  |  |         lsr.l #3,d1
    1402:	|  |  |         move.l 1ae20 <CstBackDrop>,d0
    1408:	|  |  |         add.l d0,d1
    140a:	|  |  |         moveq #0,d0
    140c:	|  |  |         move.w 10(sp),d0
    1410:	|  |  |         move.l d1,d2
    1412:	|  |  |         add.l d0,d2
    1414:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    1418:	|  |  |         moveq #0,d0
    141a:	|  |  |         move.w 8(sp),d0
    141e:	|  |  |         move.l 1ae56 <winWidth>,d1
    1424:	|  |  |         move.l d1,-(sp)
    1426:	|  |  |         move.l d0,-(sp)
    1428:	|  |  |         jsr 161b8 <__mulsi3>
    142e:	|  |  |         addq.l #8,sp
    1430:	|  |  |         move.l d0,d1
    1432:	|  |  |         lsr.l #3,d1
    1434:	|  |  |         move.l 1ae2e <CstDrawBuffer>,d0
    143a:	|  |  |         add.l d0,d1
    143c:	|  |  |         moveq #0,d0
    143e:	|  |  |         move.w 10(sp),d0
    1442:	|  |  |         move.l d1,d2
    1444:	|  |  |         add.l d0,d2
    1446:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    144a:	|  |  |         clr.l 32(sp)
    144e:	|  |  |     /-- bra.s 14c6 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    1450:	|  |  |  /--|-> move.l 40(sp),d0
    1454:	|  |  |  |  |   movea.l 16(sp),a0
    1458:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    145c:	|  |  |  |  |   move.l 36(sp),d0
    1460:	|  |  |  |  |   movea.l 16(sp),a0
    1464:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1468:	|  |  |  |  |   move.w 12(sp),d0
    146c:	|  |  |  |  |   lsl.w #6,d0
    146e:	|  |  |  |  |   add.w 14(sp),d0
    1472:	|  |  |  |  |   movea.l 16(sp),a0
    1476:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    147a:	|  |  |  |  |   move.l 1ae56 <winWidth>,d0
    1480:	|  |  |  |  |   lsr.l #3,d0
    1482:	|  |  |  |  |   move.l 1ae5a <winHeight>,d1
    1488:	|  |  |  |  |   move.l d1,-(sp)
    148a:	|  |  |  |  |   move.l d0,-(sp)
    148c:	|  |  |  |  |   jsr 161b8 <__mulsi3>
    1492:	|  |  |  |  |   addq.l #8,sp
    1494:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1498:	|  |  |  |  |   move.l 1ae56 <winWidth>,d0
    149e:	|  |  |  |  |   lsr.l #3,d0
    14a0:	|  |  |  |  |   move.l 1ae5a <winHeight>,d1
    14a6:	|  |  |  |  |   move.l d1,-(sp)
    14a8:	|  |  |  |  |   move.l d0,-(sp)
    14aa:	|  |  |  |  |   jsr 161b8 <__mulsi3>
    14b0:	|  |  |  |  |   addq.l #8,sp
    14b2:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    14b6:	|  |  |  |  |   move.l 1af0e <GfxBase>,d0
    14bc:	|  |  |  |  |   movea.l d0,a6
    14be:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    14c2:	|  |  |  |  |   addq.l #1,32(sp)
    14c6:	|  |  |  |  \-> moveq #4,d0
    14c8:	|  |  |  |      cmp.l 32(sp),d0
    14cc:	|  |  |  \----- bge.s 1450 <CstDisplayBackDrop+0x15a>
  while(*cursor)
    14ce:	|  |  \-------> movea.l 44(sp),a0
    14d2:	|  |            move.w (a0),d0
    14d4:	|  \----------- bne.w 136a <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    14d8:	|               move.l 1ae4e <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    14e0:	|               move.l 1ae4a <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    14e8:	|               clr.l 20(sp)
    14ec:	|           /-- bra.s 151e <CstDisplayBackDrop+0x228>
    *tmp++;
    14ee:	|        /--|-> move.l 24(sp),d0
    14f2:	|        |  |   move.l d0,d1
    14f4:	|        |  |   addq.l #2,d1
    14f6:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    14fa:	|        |  |   move.l 28(sp),d1
    14fe:	|        |  |   move.l d1,d2
    1500:	|        |  |   addq.l #2,d2
    1502:	|        |  |   move.l d2,28(sp)
    1506:	|        |  |   move.l 24(sp),d0
    150a:	|        |  |   move.l d0,d2
    150c:	|        |  |   addq.l #2,d2
    150e:	|        |  |   move.l d2,24(sp)
    1512:	|        |  |   movea.l d1,a0
    1514:	|        |  |   move.w (a0),d1
    1516:	|        |  |   movea.l d0,a0
    1518:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    151a:	|        |  |   addq.l #1,20(sp)
    151e:	|        |  \-> moveq #31,d0
    1520:	|        |      cmp.l 20(sp),d0
    1524:	|        \----- bge.s 14ee <CstDisplayBackDrop+0x1f8>
    1526:	|           /-- bra.s 152a <CstDisplayBackDrop+0x234>
    return;
    1528:	\-----------|-> nop
  }
}
    152a:	            \-> move.l (sp)+,d2
    152c:	                movea.l (sp)+,a6
    152e:	                lea 40(sp),sp
    1532:	                rts

00001534 <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    1534:	lea -20(sp),sp
    1538:	movea.l 24(sp),a0
    153c:	move.l 28(sp),d1
    1540:	move.l 32(sp),d0
    1544:	movea.w a0,a0
    1546:	move.w a0,4(sp)
    154a:	move.w d1,d1
    154c:	move.w d1,2(sp)
    1550:	move.w d0,d0
    1552:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    1554:	move.w 2(sp),d0
    1558:	movea.l 36(sp),a0
    155c:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    155e:	move.w 4(sp),d0
    1562:	lsr.w #1,d0
    1564:	movea.l 36(sp),a0
    1568:	addq.l #1,a0
    156a:	move.l d0,d0
    156c:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    156e:	move.w 2(sp),d1
    1572:	move.w (sp),d0
    1574:	movea.l 36(sp),a0
    1578:	addq.l #2,a0
    157a:	add.b d1,d0
    157c:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    157e:	move.w 4(sp),d0
    1582:	andi.w #1,d0
    1586:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    158a:	move.w 2(sp),d0
    158e:	add.w (sp),d0
    1590:	move.w d0,d0
    1592:	andi.l #65535,d0
    1598:	asr.l #7,d0
    159a:	move.l d0,d0
    159c:	move.w d0,d1
    159e:	andi.w #2,d1
    15a2:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    15a6:	moveq #0,d0
    15a8:	move.w 2(sp),d0
    15ac:	asr.l #6,d0
    15ae:	move.l d0,d0
    15b0:	move.w d0,d1
    15b2:	andi.w #4,d1
    15b6:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    15ba:	move.w 18(sp),d1
    15be:	move.w 16(sp),d0
    15c2:	add.b d0,d1
    15c4:	move.w 14(sp),d0
    15c8:	movea.l 36(sp),a0
    15cc:	addq.l #3,a0
    15ce:	add.b d1,d0
    15d0:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    15d2:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    15d8:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    15de:	move.l 10(sp),d0
    15e2:	clr.w d0
    15e4:	swap d0
    15e6:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    15ea:	move.l 1ae52 <CstClCursor>,d0
    15f0:	movea.l d0,a0
    15f2:	addq.l #2,a0
    15f4:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    15f8:	move.l 1ae52 <CstClCursor>,d0
    15fe:	movea.l d0,a0
    1600:	addq.l #6,a0
    1602:	move.w 8(sp),(a0)

}
    1606:	nop
    1608:	lea 20(sp),sp
    160c:	rts

0000160e <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    160e:	    move.w 1ae28 <CstApplyBackDropCounter>,d0
    1614:	/-- beq.s 162a <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    1616:	|   jsr 12f6 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    161c:	|   move.w 1ae28 <CstApplyBackDropCounter>,d0
    1622:	|   subq.w #1,d0
    1624:	|   move.w d0,1ae28 <CstApplyBackDropCounter>
  }    
}
    162a:	\-> nop
    162c:	    rts

0000162e <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    162e:	             lea -144(sp),sp
    1632:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1636:	             pea 16470 <PutChar+0x1a2>
    163c:	             jsr 157fa <KPrintF>
    1642:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1644:	             move.l 164(sp),-(sp)
    1648:	             jsr 6bc <get2bytes>
    164e:	             addq.l #4,sp
    1650:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1654:	             move.l 164(sp),-(sp)
    1658:	             jsr 6bc <get2bytes>
    165e:	             addq.l #4,sp
    1660:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1664:	             move.w 134(sp),d0
    1668:	             lsr.w #3,d0
    166a:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    166e:	             move.w 130(sp),d0
    1672:	             lsr.w #1,d0
    1674:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1678:	             move.l 1ae56 <winWidth>,d0
    167e:	             lsr.l #3,d0
    1680:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1684:	             move.w 130(sp),d0
    1688:	             muls.w 132(sp),d0
    168c:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1690:	             move.w 124(sp),d1
    1694:	             move.w d1,d0
    1696:	             add.w d0,d0
    1698:	             add.w d0,d0
    169a:	             move.w d0,d2
    169c:	             add.w d1,d2
    169e:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    16a2:	             move.w 1ae1a <CstPaletteLoaded>,d0
    16a8:	/----------- bne.w 1742 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    16ac:	|            move.w #384,120(sp)

    if(CstPalette) {
    16b2:	|            move.l 1ae4e <CstPalette>,d0
    16b8:	|        /-- beq.s 16d2 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    16ba:	|        |   move.l 1ae4e <CstPalette>,116(sp)
    16c2:	|        |   move.l 1af02 <SysBase>,d0
    16c8:	|        |   movea.l d0,a6
    16ca:	|        |   movea.l 116(sp),a1
    16ce:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    16d2:	|        \-> moveq #64,d0
    16d4:	|            move.l d0,112(sp)
    16d8:	|            clr.l 108(sp)
    16dc:	|            move.l 1af02 <SysBase>,d0
    16e2:	|            movea.l d0,a6
    16e4:	|            move.l 112(sp),d0
    16e8:	|            move.l 108(sp),d1
    16ec:	|            jsr -684(a6)
    16f0:	|            move.l d0,104(sp)
    16f4:	|            move.l 104(sp),d0
    16f8:	|            move.l d0,1ae4e <CstPalette>
    CstPaletteLoaded = 1;
    16fe:	|            move.w #1,1ae1a <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1706:	|            move.l 1ae4e <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    170e:	|            clr.l 152(sp)
    1712:	|        /-- bra.s 1738 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1714:	|     /--|-> move.l 164(sp),-(sp)
    1718:	|     |  |   jsr 6bc <get2bytes>
    171e:	|     |  |   addq.l #4,sp
    1720:	|     |  |   move.l d0,d1
    1722:	|     |  |   move.l 156(sp),d0
    1726:	|     |  |   move.l d0,d2
    1728:	|     |  |   addq.l #2,d2
    172a:	|     |  |   move.l d2,156(sp)
    172e:	|     |  |   move.l d1,d1
    1730:	|     |  |   movea.l d0,a0
    1732:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1734:	|     |  |   addq.l #1,152(sp)
    1738:	|     |  \-> moveq #31,d0
    173a:	|     |      cmp.l 152(sp),d0
    173e:	|     \----- bge.s 1714 <CstLoadBackdrop+0xe6>
    1740:	|  /-------- bra.s 1760 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1742:	\--|-------> clr.l 148(sp)
    1746:	   |     /-- bra.s 1758 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1748:	   |  /--|-> move.l 164(sp),-(sp)
    174c:	   |  |  |   jsr 6bc <get2bytes>
    1752:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1754:	   |  |  |   addq.l #1,148(sp)
    1758:	   |  |  \-> moveq #31,d2
    175a:	   |  |      cmp.l 148(sp),d2
    175e:	   |  \----- bge.s 1748 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1760:	   \-------> moveq #0,d0
    1762:	             move.w 122(sp),d0
    1766:	             move.l d0,100(sp)
    176a:	             moveq #2,d0
    176c:	             move.l d0,96(sp)
    1770:	             move.l 1af02 <SysBase>,d0
    1776:	             movea.l d0,a6
    1778:	             move.l 100(sp),d0
    177c:	             move.l 96(sp),d1
    1780:	             jsr -684(a6)
    1784:	             move.l d0,92(sp)
    1788:	             move.l 92(sp),d0
    178c:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1790:	         /-- bne.s 17a0 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1792:	         |   pea 1649f <PutChar+0x1d1>
    1798:	         |   jsr 157fa <KPrintF>
    179e:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    17a0:	         \-> moveq #0,d0
    17a2:	             move.w 124(sp),d0
    17a6:	             move.l d0,84(sp)
    17aa:	             moveq #2,d2
    17ac:	             move.l d2,80(sp)
    17b0:	             move.l 1af02 <SysBase>,d0
    17b6:	             movea.l d0,a6
    17b8:	             move.l 84(sp),d0
    17bc:	             move.l 80(sp),d1
    17c0:	             jsr -684(a6)
    17c4:	             move.l d0,76(sp)
    17c8:	             move.l 76(sp),d0
    17cc:	             move.l d0,72(sp)
  if( !tmpmask)
    17d0:	         /-- bne.s 17e0 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    17d2:	         |   pea 164d5 <PutChar+0x207>
    17d8:	         |   jsr 157fa <KPrintF>
    17de:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    17e0:	         \-> move.w 132(sp),d0
    17e4:	             movea.w d0,a1
    17e6:	             move.w 134(sp),d0
    17ea:	             movea.w d0,a0
    17ec:	             clr.l -(sp)
    17ee:	             pea 5 <_start+0x5>
    17f2:	             move.l a1,-(sp)
    17f4:	             move.l a0,-(sp)
    17f6:	             pea 16509 <PutChar+0x23b>
    17fc:	             move.l 108(sp),-(sp)
    1800:	             jsr 158e2 <debug_register_bitmap>
    1806:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    180a:	             move.w 132(sp),d0
    180e:	             movea.w d0,a1
    1810:	             move.w 134(sp),d0
    1814:	             movea.w d0,a0
    1816:	             clr.l -(sp)
    1818:	             pea 1 <_start+0x1>
    181c:	             move.l a1,-(sp)
    181e:	             move.l a0,-(sp)
    1820:	             pea 16517 <PutChar+0x249>
    1826:	             move.l 108(sp),-(sp)
    182a:	             jsr 158e2 <debug_register_bitmap>
    1830:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1834:	             move.l 164(sp),68(sp)
    183a:	             move.l 88(sp),64(sp)
    1840:	             moveq #2,d0
    1842:	             move.l d0,60(sp)
    1846:	             move.w 122(sp),d0
    184a:	             lsr.w #1,d0
    184c:	             move.w d0,d0
    184e:	             andi.l #65535,d0
    1854:	             move.l d0,56(sp)
    1858:	             move.l 1af0a <DOSBase>,d0
    185e:	             movea.l d0,a6
    1860:	             move.l 68(sp),d1
    1864:	             move.l 64(sp),d2
    1868:	             move.l 60(sp),d3
    186c:	             move.l 56(sp),d4
    1870:	             jsr -324(a6)
    1874:	             move.l d0,52(sp)
    1878:	             move.l 52(sp),d0
    187c:	             move.w d0,50(sp)
  if(!count) {
    1880:	         /-- bne.s 1894 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    1882:	         |   pea 16523 <PutChar+0x255>
    1888:	         |   jsr 157fa <KPrintF>
    188e:	         |   addq.l #4,sp
    return;
    1890:	   /-----|-- bra.w 1ae0 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1894:	   |     \-> move.l 164(sp),46(sp)
    189a:	   |         move.l 72(sp),42(sp)
    18a0:	   |         moveq #2,d2
    18a2:	   |         move.l d2,38(sp)
    18a6:	   |         move.w 124(sp),d0
    18aa:	   |         lsr.w #1,d0
    18ac:	   |         move.w d0,d0
    18ae:	   |         andi.l #65535,d0
    18b4:	   |         move.l d0,34(sp)
    18b8:	   |         move.l 1af0a <DOSBase>,d0
    18be:	   |         movea.l d0,a6
    18c0:	   |         move.l 46(sp),d1
    18c4:	   |         move.l 42(sp),d2
    18c8:	   |         move.l 38(sp),d3
    18cc:	   |         move.l 34(sp),d4
    18d0:	   |         jsr -324(a6)
    18d4:	   |         move.l d0,30(sp)
    18d8:	   |         move.l 30(sp),d0
    18dc:	   |         move.w d0,50(sp)
   

  if(!count) {
    18e0:	   |     /-- bne.s 18f4 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    18e2:	   |     |   pea 16523 <PutChar+0x255>
    18e8:	   |     |   jsr 157fa <KPrintF>
    18ee:	   |     |   addq.l #4,sp
    return;
    18f0:	   +-----|-- bra.w 1ae0 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    18f4:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    18fc:	   |         move.l 1ae20 <CstBackDrop>,d0
    1902:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1906:	   |         move.l 172(sp),d0
    190a:	   |         move.w d0,d1
    190c:	   |         muls.w 126(sp),d1
    1910:	   |         move.l 168(sp),d0
    1914:	   |     /-- bpl.s 1918 <CstLoadBackdrop+0x2ea>
    1916:	   |     |   addq.l #7,d0
    1918:	   |     \-> asr.l #3,d0
    191a:	   |         move.l d0,d0
    191c:	   |         movea.w d1,a0
    191e:	   |         adda.w d0,a0
    1920:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1924:	   |         moveq #0,d0
    1926:	   |         move.w 24(sp),d0
    192a:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    192e:	   |         pea 1653e <PutChar+0x270>
    1934:	   |         jsr 157fa <KPrintF>
    193a:	   |         addq.l #4,sp


  WaitBlit();
    193c:	   |         move.l 1af0e <GfxBase>,d0
    1942:	   |         movea.l d0,a6
    1944:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    1948:	   |         movea.l 26(sp),a0
    194c:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1952:	   |         movea.l 26(sp),a0
    1956:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    195c:	   |         movea.l 26(sp),a0
    1960:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    1966:	   |         movea.l 26(sp),a0
    196a:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    1970:	   |         move.w 126(sp),d0
    1974:	   |         sub.w 130(sp),d0
    1978:	   |         movea.l 26(sp),a0
    197c:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    1980:	   |         move.w 126(sp),d0
    1984:	   |         sub.w 130(sp),d0
    1988:	   |         movea.l 26(sp),a0
    198c:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    1990:	   |         movea.l 26(sp),a0
    1994:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    199a:	   |         movea.l 26(sp),a0
    199e:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    19a4:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    19aa:	   |         clr.l 136(sp)
    19ae:	   |     /-- bra.s 1a10 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    19b0:	   |  /--|-> movea.l 26(sp),a0
    19b4:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    19ba:	   |  |  |   move.l 140(sp),d0
    19be:	   |  |  |   movea.l 26(sp),a0
    19c2:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    19c6:	   |  |  |   move.l 144(sp),d0
    19ca:	   |  |  |   movea.l 26(sp),a0
    19ce:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    19d2:	   |  |  |   move.l 144(sp),d0
    19d6:	   |  |  |   movea.l 26(sp),a0
    19da:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    19de:	   |  |  |   move.w 132(sp),d0
    19e2:	   |  |  |   lsl.w #6,d0
    19e4:	   |  |  |   add.w 128(sp),d0
    19e8:	   |  |  |   movea.l 26(sp),a0
    19ec:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    19f0:	   |  |  |   moveq #0,d0
    19f2:	   |  |  |   move.w 124(sp),d0
    19f6:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    19fa:	   |  |  |   move.w 1ae1e <CstBackdropSizePlane>,d0
    1a00:	   |  |  |   move.w d0,d0
    1a02:	   |  |  |   andi.l #65535,d0
    1a08:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1a0c:	   |  |  |   addq.l #1,136(sp)
    1a10:	   |  |  \-> moveq #4,d0
    1a12:	   |  |      cmp.l 136(sp),d0
    1a16:	   |  \----- bge.s 19b0 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    1a18:	   |         move.l 1af0e <GfxBase>,d0
    1a1e:	   |         movea.l d0,a6
    1a20:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    1a24:	   |         pea 1655d <PutChar+0x28f>
    1a2a:	   |         jsr 157fa <KPrintF>
    1a30:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1a32:	   |         move.l 88(sp),20(sp)
    1a38:	   |         move.l 1af02 <SysBase>,d0
    1a3e:	   |         movea.l d0,a6
    1a40:	   |         movea.l 20(sp),a1
    1a44:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    1a48:	   |         move.l 72(sp),16(sp)
    1a4e:	   |         move.l 1af02 <SysBase>,d0
    1a54:	   |         movea.l d0,a6
    1a56:	   |         movea.l 16(sp),a1
    1a5a:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1a5e:	   |         move.w #2,1ae28 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1a66:	   |         move.l 1ae56 <winWidth>,d0
    1a6c:	   |         lsr.l #4,d0
    1a6e:	   |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    1a74:	   |         move.l a0,d1
    1a76:	   |         addq.l #2,d1
    1a78:	   |         move.l d1,1ae46 <CstBackDropBufferApplyCursor>
    1a7e:	   |         move.l d0,d0
    1a80:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1a82:	   |         move.l 1ae5a <winHeight>,d0
    1a88:	   |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    1a8e:	   |         move.l a0,d1
    1a90:	   |         addq.l #2,d1
    1a92:	   |         move.l d1,1ae46 <CstBackDropBufferApplyCursor>
    1a98:	   |         move.l d0,d0
    1a9a:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1a9c:	   |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    1aa2:	   |         move.l a0,d0
    1aa4:	   |         addq.l #2,d0
    1aa6:	   |         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    1aac:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1aae:	   |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    1ab4:	   |         move.l a0,d0
    1ab6:	   |         addq.l #2,d0
    1ab8:	   |         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    1abe:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ac0:	   |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    1ac6:	   |         move.l a0,d0
    1ac8:	   |         addq.l #2,d0
    1aca:	   |         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    1ad0:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    1ad2:	   |         pea 1657d <PutChar+0x2af>
    1ad8:	   |         jsr 157fa <KPrintF>
    1ade:	   |         addq.l #4,sp

}
    1ae0:	   \-------> movem.l (sp)+,d2-d4/a6
    1ae4:	             lea 144(sp),sp
    1ae8:	             rts

00001aea <CstRestoreScreen>:

ULONG test = 0;

void CstRestoreScreen()
{
    1aea:	                lea -28(sp),sp
    1aee:	                move.l a6,-(sp)
    1af0:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    1af2:	                move.l #14675968,16(sp)

  UWORD *cursor = CstDrawBufferCleanupCursor;
    1afa:	                move.l 1ae36 <CstDrawBufferCleanupCursor>,32(sp)
  if(!*cursor || !CstDrawBuffer) {
    1b02:	                movea.l 32(sp),a0
    1b06:	                move.w (a0),d0
    1b08:	/-------------- beq.w 1cbc <CstRestoreScreen+0x1d2>
    1b0c:	|               move.l 1ae2e <CstDrawBuffer>,d0
    1b12:	+-------------- beq.w 1cbc <CstRestoreScreen+0x1d2>
    return;
  } 

  WaitBlit();
    1b16:	|               move.l 1af0e <GfxBase>,d0
    1b1c:	|               movea.l d0,a6
    1b1e:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1b22:	|               movea.l 16(sp),a0
    1b26:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1b2c:	|               movea.l 16(sp),a0
    1b30:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1b36:	|               movea.l 16(sp),a0
    1b3a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1b40:	|     /-------- bra.w 1ca8 <CstRestoreScreen+0x1be>
  {    
    UWORD width = *cursor++;
    1b44:	|  /--|-------> move.l 32(sp),d0
    1b48:	|  |  |         move.l d0,d1
    1b4a:	|  |  |         addq.l #2,d1
    1b4c:	|  |  |         move.l d1,32(sp)
    1b50:	|  |  |         movea.l d0,a0
    1b52:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1b56:	|  |  |         move.l 32(sp),d0
    1b5a:	|  |  |         move.l d0,d1
    1b5c:	|  |  |         addq.l #2,d1
    1b5e:	|  |  |         move.l d1,32(sp)
    1b62:	|  |  |         movea.l d0,a0
    1b64:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1b68:	|  |  |         move.l 32(sp),d0
    1b6c:	|  |  |         move.l d0,d1
    1b6e:	|  |  |         addq.l #2,d1
    1b70:	|  |  |         move.l d1,32(sp)
    1b74:	|  |  |         movea.l d0,a0
    1b76:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    1b7a:	|  |  |         move.l 32(sp),d0
    1b7e:	|  |  |         move.l d0,d1
    1b80:	|  |  |         addq.l #2,d1
    1b82:	|  |  |         move.l d1,32(sp)
    1b86:	|  |  |         movea.l d0,a0
    1b88:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    1b8c:	|  |  |         move.l 1ae56 <winWidth>,d0
    1b92:	|  |  |         lsr.l #3,d0
    1b94:	|  |  |         move.l d0,d1
    1b96:	|  |  |         move.w 14(sp),d0
    1b9a:	|  |  |         add.w d0,d0
    1b9c:	|  |  |         sub.w d0,d1
    1b9e:	|  |  |         movea.l 16(sp),a0
    1ba2:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1ba6:	|  |  |         move.l 1ae56 <winWidth>,d0
    1bac:	|  |  |         lsr.l #3,d0
    1bae:	|  |  |         move.l d0,d1
    1bb0:	|  |  |         move.w 14(sp),d0
    1bb4:	|  |  |         add.w d0,d0
    1bb6:	|  |  |         sub.w d0,d1
    1bb8:	|  |  |         movea.l 16(sp),a0
    1bbc:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    1bc0:	|  |  |         moveq #0,d0
    1bc2:	|  |  |         move.w 8(sp),d0
    1bc6:	|  |  |         move.l 1ae56 <winWidth>,d1
    1bcc:	|  |  |         move.l d1,-(sp)
    1bce:	|  |  |         move.l d0,-(sp)
    1bd0:	|  |  |         jsr 161b8 <__mulsi3>
    1bd6:	|  |  |         addq.l #8,sp
    1bd8:	|  |  |         move.l d0,d1
    1bda:	|  |  |         lsr.l #3,d1
    1bdc:	|  |  |         move.l 1ae20 <CstBackDrop>,d0
    1be2:	|  |  |         add.l d0,d1
    1be4:	|  |  |         moveq #0,d0
    1be6:	|  |  |         move.w 10(sp),d0
    1bea:	|  |  |         move.l d1,d2
    1bec:	|  |  |         add.l d0,d2
    1bee:	|  |  |         move.l d2,28(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    1bf2:	|  |  |         moveq #0,d0
    1bf4:	|  |  |         move.w 8(sp),d0
    1bf8:	|  |  |         move.l 1ae56 <winWidth>,d1
    1bfe:	|  |  |         move.l d1,-(sp)
    1c00:	|  |  |         move.l d0,-(sp)
    1c02:	|  |  |         jsr 161b8 <__mulsi3>
    1c08:	|  |  |         addq.l #8,sp
    1c0a:	|  |  |         move.l d0,d1
    1c0c:	|  |  |         lsr.l #3,d1
    1c0e:	|  |  |         move.l 1ae2e <CstDrawBuffer>,d0
    1c14:	|  |  |         add.l d0,d1
    1c16:	|  |  |         moveq #0,d0
    1c18:	|  |  |         move.w 10(sp),d0
    1c1c:	|  |  |         move.l d1,d2
    1c1e:	|  |  |         add.l d0,d2
    1c20:	|  |  |         move.l d2,24(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1c24:	|  |  |         clr.l 20(sp)
    1c28:	|  |  |     /-- bra.s 1ca0 <CstRestoreScreen+0x1b6>
    {
      custom->bltapt = (APTR) bltapt;
    1c2a:	|  |  |  /--|-> move.l 28(sp),d0
    1c2e:	|  |  |  |  |   movea.l 16(sp),a0
    1c32:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1c36:	|  |  |  |  |   move.l 24(sp),d0
    1c3a:	|  |  |  |  |   movea.l 16(sp),a0
    1c3e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1c42:	|  |  |  |  |   move.w 12(sp),d0
    1c46:	|  |  |  |  |   lsl.w #6,d0
    1c48:	|  |  |  |  |   add.w 14(sp),d0
    1c4c:	|  |  |  |  |   movea.l 16(sp),a0
    1c50:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1c54:	|  |  |  |  |   move.l 1ae56 <winWidth>,d0
    1c5a:	|  |  |  |  |   lsr.l #3,d0
    1c5c:	|  |  |  |  |   move.l 1ae5a <winHeight>,d1
    1c62:	|  |  |  |  |   move.l d1,-(sp)
    1c64:	|  |  |  |  |   move.l d0,-(sp)
    1c66:	|  |  |  |  |   jsr 161b8 <__mulsi3>
    1c6c:	|  |  |  |  |   addq.l #8,sp
    1c6e:	|  |  |  |  |   add.l d0,28(sp)
      bltdpt += winWidth/8*winHeight;
    1c72:	|  |  |  |  |   move.l 1ae56 <winWidth>,d0
    1c78:	|  |  |  |  |   lsr.l #3,d0
    1c7a:	|  |  |  |  |   move.l 1ae5a <winHeight>,d1
    1c80:	|  |  |  |  |   move.l d1,-(sp)
    1c82:	|  |  |  |  |   move.l d0,-(sp)
    1c84:	|  |  |  |  |   jsr 161b8 <__mulsi3>
    1c8a:	|  |  |  |  |   addq.l #8,sp
    1c8c:	|  |  |  |  |   add.l d0,24(sp)
      WaitBlit();
    1c90:	|  |  |  |  |   move.l 1af0e <GfxBase>,d0
    1c96:	|  |  |  |  |   movea.l d0,a6
    1c98:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1c9c:	|  |  |  |  |   addq.l #1,20(sp)
    1ca0:	|  |  |  |  \-> moveq #4,d0
    1ca2:	|  |  |  |      cmp.l 20(sp),d0
    1ca6:	|  |  |  \----- bge.s 1c2a <CstRestoreScreen+0x140>
  while(*cursor)
    1ca8:	|  |  \-------> movea.l 32(sp),a0
    1cac:	|  |            move.w (a0),d0
    1cae:	|  \----------- bne.w 1b44 <CstRestoreScreen+0x5a>
    }  
  }
  *CstDrawBufferCleanupCursor = 0;
    1cb2:	|               movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    1cb8:	|               clr.w (a0)
    1cba:	|           /-- bra.s 1cbe <CstRestoreScreen+0x1d4>
    return;
    1cbc:	\-----------|-> nop
}
    1cbe:	            \-> move.l (sp)+,d2
    1cc0:	                movea.l (sp)+,a6
    1cc2:	                lea 28(sp),sp
    1cc6:	                rts

00001cc8 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, WORD x, WORD y, UWORD destinationtype)
{
    1cc8:	                lea -76(sp),sp
    1ccc:	                movem.l d2-d3/a6,-(sp)
    1cd0:	                movea.l 96(sp),a0
    1cd4:	                move.l 100(sp),d1
    1cd8:	                move.l 104(sp),d0
    1cdc:	                movea.w a0,a0
    1cde:	                move.w a0,16(sp)
    1ce2:	                move.w d1,d1
    1ce4:	                move.w d1,14(sp)
    1ce8:	                move.w d0,d0
    1cea:	                move.w d0,12(sp)

  UWORD *destination = 0;
    1cee:	                clr.l 84(sp)
  switch(destinationtype)
    1cf2:	                moveq #0,d0
    1cf4:	                move.w 12(sp),d0
    1cf8:	                moveq #1,d1
    1cfa:	                cmp.l d0,d1
    1cfc:	            /-- beq.s 1d06 <CstScaleSprite+0x3e>
    1cfe:	            |   moveq #2,d2
    1d00:	            |   cmp.l d0,d2
    1d02:	         /--|-- beq.s 1d10 <CstScaleSprite+0x48>
    1d04:	      /--|--|-- bra.s 1d22 <CstScaleSprite+0x5a>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    1d06:	      |  |  \-> move.l 1ae2e <CstDrawBuffer>,84(sp)
      break;
    1d0e:	      +--|----- bra.s 1d22 <CstScaleSprite+0x5a>
    case BACKDROP:
      CstApplyBackDropCounter = 2;
    1d10:	      |  \----> move.w #2,1ae28 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    1d18:	      |         move.l 1ae20 <CstBackDrop>,84(sp)
      break;
    1d20:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    1d22:	      \-------> tst.w 14(sp)
    1d26:	         /----- bge.s 1d6e <CstScaleSprite+0xa6>
    if(y + single->height < 0) {
    1d28:	         |      movea.w 14(sp),a1
    1d2c:	         |      movea.l 92(sp),a0
    1d30:	         |      move.l 4(a0),d0
    1d34:	         |      add.l a1,d0
    1d36:	         |  /-- bpl.s 1d4a <CstScaleSprite+0x82>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1d38:	         |  |   pea 16597 <PutChar+0x2c9>
    1d3e:	         |  |   jsr 157fa <KPrintF>
    1d44:	         |  |   addq.l #4,sp
      return;
    1d46:	/--------|--|-- bra.w 2742 <CstScaleSprite+0xa7a>
    }
    ystartdst = 0;
    1d4a:	|        |  \-> clr.l 48(sp)
    ystartsrc = y*-1;
    1d4e:	|        |      move.w 14(sp),d0
    1d52:	|        |      ext.l d0
    1d54:	|        |      neg.l d0
    1d56:	|        |      move.l d0,44(sp)
    blitheight = single->height+y;
    1d5a:	|        |      movea.l 92(sp),a0
    1d5e:	|        |      move.l 4(a0),d0
    1d62:	|        |      movea.w 14(sp),a0
    1d66:	|        |      add.l a0,d0
    1d68:	|        |      move.l d0,40(sp)
    1d6c:	|     /--|----- bra.s 1de0 <CstScaleSprite+0x118>
  } else if(y+single->height > (int) winHeight) {
    1d6e:	|     |  \----> movea.w 14(sp),a1
    1d72:	|     |         movea.l 92(sp),a0
    1d76:	|     |         move.l 4(a0),d0
    1d7a:	|     |         move.l a1,d1
    1d7c:	|     |         add.l d0,d1
    1d7e:	|     |         move.l 1ae5a <winHeight>,d0
    1d84:	|     |         cmp.l d1,d0
    1d86:	|     |  /----- bge.s 1dc8 <CstScaleSprite+0x100>
    if(y  > (int) winHeight) {
    1d88:	|     |  |      movea.w 14(sp),a0
    1d8c:	|     |  |      move.l 1ae5a <winHeight>,d0
    1d92:	|     |  |      cmp.l a0,d0
    1d94:	|     |  |  /-- bge.s 1da8 <CstScaleSprite+0xe0>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1d96:	|     |  |  |   pea 16597 <PutChar+0x2c9>
    1d9c:	|     |  |  |   jsr 157fa <KPrintF>
    1da2:	|     |  |  |   addq.l #4,sp
      return;
    1da4:	+-----|--|--|-- bra.w 2742 <CstScaleSprite+0xa7a>
    }
    ystartdst = y;
    1da8:	|     |  |  \-> movea.w 14(sp),a0
    1dac:	|     |  |      move.l a0,48(sp)
    ystartsrc = 0;
    1db0:	|     |  |      clr.l 44(sp)
    blitheight = winHeight-y;
    1db4:	|     |  |      move.l 1ae5a <winHeight>,d0
    1dba:	|     |  |      movea.w 14(sp),a0
    1dbe:	|     |  |      move.l d0,d1
    1dc0:	|     |  |      sub.l a0,d1
    1dc2:	|     |  |      move.l d1,40(sp)
    1dc6:	|     +--|----- bra.s 1de0 <CstScaleSprite+0x118>
  } else {
    ystartdst = y;
    1dc8:	|     |  \----> movea.w 14(sp),a0
    1dcc:	|     |         move.l a0,48(sp)
    ystartsrc = 0;
    1dd0:	|     |         clr.l 44(sp)
    blitheight = single->height;
    1dd4:	|     |         movea.l 92(sp),a0
    1dd8:	|     |         move.l 4(a0),d0
    1ddc:	|     |         move.l d0,40(sp)
  }

  if( x < 0) { //Leftmost part outside screen
    1de0:	|     \-------> tst.w 16(sp)
    1de4:	|     /-------- bge.w 2054 <CstScaleSprite+0x38c>
    if(x + single->width < 0) {
    1de8:	|     |         movea.w 16(sp),a1
    1dec:	|     |         movea.l 92(sp),a0
    1df0:	|     |         move.l (a0),d0
    1df2:	|     |         add.l a1,d0
    1df4:	|     |     /-- bpl.s 1e08 <CstScaleSprite+0x140>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1df6:	|     |     |   pea 16597 <PutChar+0x2c9>
    1dfc:	|     |     |   jsr 157fa <KPrintF>
    1e02:	|     |     |   addq.l #4,sp
      return;
    1e04:	+-----|-----|-- bra.w 2742 <CstScaleSprite+0xa7a>
    }
    extrawords = 1;
    1e08:	|     |     \-> move.w #1,82(sp)
    cutwordssource = (x*-1)/16; 
    1e0e:	|     |         move.w 16(sp),d0
    1e12:	|     |     /-- bpl.s 1e18 <CstScaleSprite+0x150>
    1e14:	|     |     |   addi.w #15,d0
    1e18:	|     |     \-> asr.w #4,d0
    1e1a:	|     |         neg.w d0
    1e1c:	|     |         move.w d0,80(sp)
    cutmaskpixel = (x*-1)%16;     
    1e20:	|     |         move.w 16(sp),d0
    1e24:	|     |         ext.l d0
    1e26:	|     |         neg.l d0
    1e28:	|     |         andi.l #-2147483633,d0
    1e2e:	|     |     /-- bpl.s 1e38 <CstScaleSprite+0x170>
    1e30:	|     |     |   subq.l #1,d0
    1e32:	|     |     |   moveq #-16,d1
    1e34:	|     |     |   or.l d1,d0
    1e36:	|     |     |   addq.l #1,d0
    1e38:	|     |     \-> move.w d0,78(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1e3c:	|     |         clr.w 76(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    1e40:	|     |         movea.l 92(sp),a0
    1e44:	|     |         move.l 24(a0),d0
    1e48:	|     |         move.l d0,d2
    1e4a:	|     |         moveq #0,d0
    1e4c:	|     |         move.w 80(sp),d0
    1e50:	|     |         add.l d0,d0
    1e52:	|     |         move.l d0,d3
    1e54:	|     |         movea.l 92(sp),a0
    1e58:	|     |         move.l (a0),d0
    1e5a:	|     |     /-- bpl.s 1e5e <CstScaleSprite+0x196>
    1e5c:	|     |     |   addq.l #7,d0
    1e5e:	|     |     \-> asr.l #3,d0
    1e60:	|     |         movea.l 92(sp),a0
    1e64:	|     |         move.l 4(a0),d1
    1e68:	|     |         move.l d1,-(sp)
    1e6a:	|     |         move.l d0,-(sp)
    1e6c:	|     |         jsr 161b8 <__mulsi3>
    1e72:	|     |         addq.l #8,sp
    1e74:	|     |         move.l d0,d1
    1e76:	|     |         move.l d1,d0
    1e78:	|     |         add.l d0,d0
    1e7a:	|     |         add.l d0,d0
    1e7c:	|     |         add.l d1,d0
    1e7e:	|     |         add.l d3,d0
    1e80:	|     |         add.l d0,d2
    1e82:	|     |         movea.l 92(sp),a0
    1e86:	|     |         move.l (a0),d0
    1e88:	|     |         move.l 44(sp),-(sp)
    1e8c:	|     |         move.l d0,-(sp)
    1e8e:	|     |         jsr 161b8 <__mulsi3>
    1e94:	|     |         addq.l #8,sp
    1e96:	|     |         lsr.l #3,d0
    1e98:	|     |         move.l d2,d1
    1e9a:	|     |         add.l d0,d1
    1e9c:	|     |         move.l d1,72(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    1ea0:	|     |         movea.l 92(sp),a0
    1ea4:	|     |         move.l 24(a0),d0
    1ea8:	|     |         move.l d0,d1
    1eaa:	|     |         moveq #0,d0
    1eac:	|     |         move.w 80(sp),d0
    1eb0:	|     |         add.l d0,d0
    1eb2:	|     |         move.l d1,d2
    1eb4:	|     |         add.l d0,d2
    1eb6:	|     |         movea.l 92(sp),a0
    1eba:	|     |         move.l (a0),d0
    1ebc:	|     |         move.l 44(sp),-(sp)
    1ec0:	|     |         move.l d0,-(sp)
    1ec2:	|     |         jsr 161b8 <__mulsi3>
    1ec8:	|     |         addq.l #8,sp
    1eca:	|     |         lsr.l #3,d0
    1ecc:	|     |         move.l d2,d1
    1ece:	|     |         add.l d0,d1
    1ed0:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1ed4:	|     |         move.l 1ae56 <winWidth>,d0
    1eda:	|     |         move.l 48(sp),-(sp)
    1ede:	|     |         move.l d0,-(sp)
    1ee0:	|     |         jsr 161b8 <__mulsi3>
    1ee6:	|     |         addq.l #8,sp
    1ee8:	|     |         lsr.l #3,d0
    1eea:	|     |         move.l 84(sp),d1
    1eee:	|     |         add.l d1,d0
    1ef0:	|     |         move.l d0,d2
    1ef2:	|     |         subq.l #2,d2
    1ef4:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1ef8:	|     |         move.l 1ae56 <winWidth>,d0
    1efe:	|     |         move.l 48(sp),-(sp)
    1f02:	|     |         move.l d0,-(sp)
    1f04:	|     |         jsr 161b8 <__mulsi3>
    1f0a:	|     |         addq.l #8,sp
    1f0c:	|     |         lsr.l #3,d0
    1f0e:	|     |         move.l 84(sp),d1
    1f12:	|     |         add.l d1,d0
    1f14:	|     |         move.l d0,d1
    1f16:	|     |         subq.l #2,d1
    1f18:	|     |         move.l d1,60(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    1f1c:	|     |         moveq #0,d0
    1f1e:	|     |         move.w 78(sp),d0
    1f22:	|     |         moveq #16,d1
    1f24:	|     |         sub.l d0,d1
    1f26:	|     |         move.l d1,d0
    1f28:	|     |         moveq #12,d2
    1f2a:	|     |         lsl.l d2,d0
    1f2c:	|     |         addi.l #4042,d0
    1f32:	|     |         move.l d0,56(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    1f36:	|     |         moveq #0,d0
    1f38:	|     |         move.w 78(sp),d0
    1f3c:	|     |         moveq #16,d1
    1f3e:	|     |         sub.l d0,d1
    1f40:	|     |         move.l d1,d0
    1f42:	|     |         moveq #12,d1
    1f44:	|     |         lsl.l d1,d0
    1f46:	|     |         move.l d0,52(sp)
    if( destinationtype == SCREEN)
    1f4a:	|     |         cmpi.w #1,12(sp)
    1f50:	|     |  /----- bne.s 1fce <CstScaleSprite+0x306>
    {
      *CstDrawBufferCleanupCursor++ = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    1f52:	|     |  |      movea.l 92(sp),a0
    1f56:	|     |  |      move.l (a0),d0
    1f58:	|     |  |      movea.l d0,a0
    1f5a:	|     |  |      cmpa.w #0,a0
    1f5e:	|     |  |  /-- bge.s 1f64 <CstScaleSprite+0x29c>
    1f60:	|     |  |  |   lea 15(a0),a0
    1f64:	|     |  |  \-> move.l a0,d0
    1f66:	|     |  |      asr.l #4,d0
    1f68:	|     |  |      move.l d0,d0
    1f6a:	|     |  |      add.w 80(sp),d0
    1f6e:	|     |  |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    1f74:	|     |  |      move.l a0,d1
    1f76:	|     |  |      addq.l #2,d1
    1f78:	|     |  |      move.l d1,1ae36 <CstDrawBufferCleanupCursor>
    1f7e:	|     |  |      add.w 82(sp),d0
    1f82:	|     |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = blitheight; //Height
    1f84:	|     |  |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    1f8a:	|     |  |      move.l a0,d0
    1f8c:	|     |  |      addq.l #2,d0
    1f8e:	|     |  |      move.l d0,1ae36 <CstDrawBufferCleanupCursor>
    1f94:	|     |  |      move.l 40(sp),d0
    1f98:	|     |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = 0; //X Start in Bytes
    1f9a:	|     |  |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    1fa0:	|     |  |      move.l a0,d0
    1fa2:	|     |  |      addq.l #2,d0
    1fa4:	|     |  |      move.l d0,1ae36 <CstDrawBufferCleanupCursor>
    1faa:	|     |  |      clr.w (a0)
      *CstDrawBufferCleanupCursor++ = ystartdst; //Y Start    
    1fac:	|     |  |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    1fb2:	|     |  |      move.l a0,d0
    1fb4:	|     |  |      addq.l #2,d0
    1fb6:	|     |  |      move.l d0,1ae36 <CstDrawBufferCleanupCursor>
    1fbc:	|     |  |      move.l 48(sp),d0
    1fc0:	|     |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor = 0;
    1fc2:	|     |  |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    1fc8:	|     |  |      clr.w (a0)
    1fca:	|  /--|--|----- bra.w 256a <CstScaleSprite+0x8a2>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    1fce:	|  |  |  \----> movea.l 92(sp),a0
    1fd2:	|  |  |         move.l (a0),d0
    1fd4:	|  |  |         movea.l d0,a0
    1fd6:	|  |  |         cmpa.w #0,a0
    1fda:	|  |  |     /-- bge.s 1fe0 <CstScaleSprite+0x318>
    1fdc:	|  |  |     |   lea 15(a0),a0
    1fe0:	|  |  |     \-> move.l a0,d0
    1fe2:	|  |  |         asr.l #4,d0
    1fe4:	|  |  |         move.l d0,d0
    1fe6:	|  |  |         add.w 80(sp),d0
    1fea:	|  |  |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    1ff0:	|  |  |         move.l a0,d1
    1ff2:	|  |  |         addq.l #2,d1
    1ff4:	|  |  |         move.l d1,1ae46 <CstBackDropBufferApplyCursor>
    1ffa:	|  |  |         add.w 82(sp),d0
    1ffe:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2000:	|  |  |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    2006:	|  |  |         move.l a0,d0
    2008:	|  |  |         addq.l #2,d0
    200a:	|  |  |         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    2010:	|  |  |         move.l 40(sp),d0
    2014:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2016:	|  |  |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    201c:	|  |  |         move.l a0,d0
    201e:	|  |  |         addq.l #2,d0
    2020:	|  |  |         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    2026:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2028:	|  |  |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    202e:	|  |  |         move.l a0,d0
    2030:	|  |  |         addq.l #2,d0
    2032:	|  |  |         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    2038:	|  |  |         move.l 48(sp),d0
    203c:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    203e:	|  |  |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    2044:	|  |  |         move.l a0,d0
    2046:	|  |  |         addq.l #2,d0
    2048:	|  |  |         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    204e:	|  |  |         clr.w (a0)
    2050:	|  +--|-------- bra.w 256a <CstScaleSprite+0x8a2>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen
    2054:	|  |  \-------> movea.w 16(sp),a1
    2058:	|  |            movea.l 92(sp),a0
    205c:	|  |            move.l (a0),d0
    205e:	|  |            move.l a1,d1
    2060:	|  |            add.l d0,d1
    2062:	|  |            move.l 1ae56 <winWidth>,d0
    2068:	|  |            cmp.l d1,d0
    206a:	|  |  /-------- bge.w 230e <CstScaleSprite+0x646>
    if(x - single->width > (int) winWidth)
    206e:	|  |  |         movea.w 16(sp),a1
    2072:	|  |  |         movea.l 92(sp),a0
    2076:	|  |  |         move.l (a0),d0
    2078:	|  |  |         move.l a1,d1
    207a:	|  |  |         sub.l d0,d1
    207c:	|  |  |         move.l 1ae56 <winWidth>,d0
    2082:	|  |  |         cmp.l d1,d0
    2084:	|  |  |     /-- bge.s 2098 <CstScaleSprite+0x3d0>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2086:	|  |  |     |   pea 16597 <PutChar+0x2c9>
    208c:	|  |  |     |   jsr 157fa <KPrintF>
    2092:	|  |  |     |   addq.l #4,sp
      return;
    2094:	+--|--|-----|-- bra.w 2742 <CstScaleSprite+0xa7a>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2098:	|  |  |     \-> clr.w 82(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    209c:	|  |  |         movea.w 16(sp),a1
    20a0:	|  |  |         movea.l 92(sp),a0
    20a4:	|  |  |         move.l (a0),d0
    20a6:	|  |  |         add.l a1,d0
    20a8:	|  |  |         move.l d0,d1
    20aa:	|  |  |         move.l 1ae56 <winWidth>,d0
    20b0:	|  |  |         sub.l d0,d1
    20b2:	|  |  |         move.l d1,d0
    20b4:	|  |  |         lsr.l #4,d0
    20b6:	|  |  |         move.w d0,80(sp)
    cutmaskpixel = 0;
    20ba:	|  |  |         clr.w 78(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    20be:	|  |  |         move.w #-1,76(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    20c4:	|  |  |         movea.l 92(sp),a0
    20c8:	|  |  |         move.l 24(a0),d0
    20cc:	|  |  |         move.l d0,d2
    20ce:	|  |  |         movea.l 92(sp),a0
    20d2:	|  |  |         move.l (a0),d0
    20d4:	|  |  |     /-- bpl.s 20d8 <CstScaleSprite+0x410>
    20d6:	|  |  |     |   addq.l #7,d0
    20d8:	|  |  |     \-> asr.l #3,d0
    20da:	|  |  |         movea.l 92(sp),a0
    20de:	|  |  |         move.l 4(a0),d1
    20e2:	|  |  |         move.l d1,-(sp)
    20e4:	|  |  |         move.l d0,-(sp)
    20e6:	|  |  |         jsr 161b8 <__mulsi3>
    20ec:	|  |  |         addq.l #8,sp
    20ee:	|  |  |         move.l d0,d1
    20f0:	|  |  |         move.l d1,d0
    20f2:	|  |  |         add.l d0,d0
    20f4:	|  |  |         add.l d0,d0
    20f6:	|  |  |         add.l d1,d0
    20f8:	|  |  |         add.l d0,d2
    20fa:	|  |  |         movea.l 92(sp),a0
    20fe:	|  |  |         move.l (a0),d0
    2100:	|  |  |         move.l 44(sp),-(sp)
    2104:	|  |  |         move.l d0,-(sp)
    2106:	|  |  |         jsr 161b8 <__mulsi3>
    210c:	|  |  |         addq.l #8,sp
    210e:	|  |  |         lsr.l #3,d0
    2110:	|  |  |         move.l d2,d1
    2112:	|  |  |         add.l d0,d1
    2114:	|  |  |         move.l d1,72(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2118:	|  |  |         movea.l 92(sp),a0
    211c:	|  |  |         move.l 24(a0),d0
    2120:	|  |  |         move.l d0,d2
    2122:	|  |  |         movea.l 92(sp),a0
    2126:	|  |  |         move.l (a0),d0
    2128:	|  |  |         move.l 44(sp),-(sp)
    212c:	|  |  |         move.l d0,-(sp)
    212e:	|  |  |         jsr 161b8 <__mulsi3>
    2134:	|  |  |         addq.l #8,sp
    2136:	|  |  |         lsr.l #3,d0
    2138:	|  |  |         move.l d2,d1
    213a:	|  |  |         add.l d0,d1
    213c:	|  |  |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2140:	|  |  |         move.l 1ae56 <winWidth>,d0
    2146:	|  |  |         move.l 48(sp),-(sp)
    214a:	|  |  |         move.l d0,-(sp)
    214c:	|  |  |         jsr 161b8 <__mulsi3>
    2152:	|  |  |         addq.l #8,sp
    2154:	|  |  |         lsr.l #3,d0
    2156:	|  |  |         move.l 84(sp),d1
    215a:	|  |  |         add.l d0,d1
    215c:	|  |  |         move.w 16(sp),d0
    2160:	|  |  |     /-- bpl.s 2166 <CstScaleSprite+0x49e>
    2162:	|  |  |     |   addi.w #15,d0
    2166:	|  |  |     \-> asr.w #4,d0
    2168:	|  |  |         movea.w d0,a0
    216a:	|  |  |         move.l a0,d0
    216c:	|  |  |         add.l a0,d0
    216e:	|  |  |         move.l d1,d2
    2170:	|  |  |         add.l d0,d2
    2172:	|  |  |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2176:	|  |  |         move.l 1ae56 <winWidth>,d0
    217c:	|  |  |         move.l 48(sp),-(sp)
    2180:	|  |  |         move.l d0,-(sp)
    2182:	|  |  |         jsr 161b8 <__mulsi3>
    2188:	|  |  |         addq.l #8,sp
    218a:	|  |  |         lsr.l #3,d0
    218c:	|  |  |         move.l 84(sp),d1
    2190:	|  |  |         add.l d0,d1
    2192:	|  |  |         move.w 16(sp),d0
    2196:	|  |  |     /-- bpl.s 219c <CstScaleSprite+0x4d4>
    2198:	|  |  |     |   addi.w #15,d0
    219c:	|  |  |     \-> asr.w #4,d0
    219e:	|  |  |         movea.w d0,a0
    21a0:	|  |  |         move.l a0,d0
    21a2:	|  |  |         add.l a0,d0
    21a4:	|  |  |         move.l d1,d2
    21a6:	|  |  |         add.l d0,d2
    21a8:	|  |  |         move.l d2,60(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    21ac:	|  |  |         movea.l 92(sp),a0
    21b0:	|  |  |         move.l (a0),d0
    21b2:	|  |  |         andi.l #-2147483633,d0
    21b8:	|  |  |     /-- bpl.s 21c2 <CstScaleSprite+0x4fa>
    21ba:	|  |  |     |   subq.l #1,d0
    21bc:	|  |  |     |   moveq #-16,d1
    21be:	|  |  |     |   or.l d1,d0
    21c0:	|  |  |     |   addq.l #1,d0
    21c2:	|  |  |     \-> moveq #12,d2
    21c4:	|  |  |         lsl.l d2,d0
    21c6:	|  |  |         addi.l #4042,d0
    21cc:	|  |  |         move.l d0,56(sp)
    bltcon1 = ((single->width%16) << 12);
    21d0:	|  |  |         movea.l 92(sp),a0
    21d4:	|  |  |         move.l (a0),d0
    21d6:	|  |  |         andi.l #-2147483633,d0
    21dc:	|  |  |     /-- bpl.s 21e6 <CstScaleSprite+0x51e>
    21de:	|  |  |     |   subq.l #1,d0
    21e0:	|  |  |     |   moveq #-16,d1
    21e2:	|  |  |     |   or.l d1,d0
    21e4:	|  |  |     |   addq.l #1,d0
    21e6:	|  |  |     \-> moveq #12,d2
    21e8:	|  |  |         lsl.l d2,d0
    21ea:	|  |  |         move.l d0,52(sp)
    if( destinationtype == SCREEN)
    21ee:	|  |  |         cmpi.w #1,12(sp)
    21f4:	|  |  |  /----- bne.w 227e <CstScaleSprite+0x5b6>
    {
      *CstDrawBufferCleanupCursor++ = single->width/16+cutwordssource; //Width in X Bytes
    21f8:	|  |  |  |      movea.l 92(sp),a0
    21fc:	|  |  |  |      move.l (a0),d0
    21fe:	|  |  |  |      movea.l d0,a0
    2200:	|  |  |  |      cmpa.w #0,a0
    2204:	|  |  |  |  /-- bge.s 220a <CstScaleSprite+0x542>
    2206:	|  |  |  |  |   lea 15(a0),a0
    220a:	|  |  |  |  \-> move.l a0,d0
    220c:	|  |  |  |      asr.l #4,d0
    220e:	|  |  |  |      move.l d0,d0
    2210:	|  |  |  |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    2216:	|  |  |  |      move.l a0,d1
    2218:	|  |  |  |      addq.l #2,d1
    221a:	|  |  |  |      move.l d1,1ae36 <CstDrawBufferCleanupCursor>
    2220:	|  |  |  |      add.w 80(sp),d0
    2224:	|  |  |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = blitheight; //Height
    2226:	|  |  |  |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    222c:	|  |  |  |      move.l a0,d0
    222e:	|  |  |  |      addq.l #2,d0
    2230:	|  |  |  |      move.l d0,1ae36 <CstDrawBufferCleanupCursor>
    2236:	|  |  |  |      move.l 40(sp),d0
    223a:	|  |  |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = (x/16)*2; //X Start in Bytes
    223c:	|  |  |  |      move.w 16(sp),d0
    2240:	|  |  |  |  /-- bpl.s 2246 <CstScaleSprite+0x57e>
    2242:	|  |  |  |  |   addi.w #15,d0
    2246:	|  |  |  |  \-> asr.w #4,d0
    2248:	|  |  |  |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    224e:	|  |  |  |      move.l a0,d1
    2250:	|  |  |  |      addq.l #2,d1
    2252:	|  |  |  |      move.l d1,1ae36 <CstDrawBufferCleanupCursor>
    2258:	|  |  |  |      add.w d0,d0
    225a:	|  |  |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = ystartdst; //Y Start  
    225c:	|  |  |  |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    2262:	|  |  |  |      move.l a0,d0
    2264:	|  |  |  |      addq.l #2,d0
    2266:	|  |  |  |      move.l d0,1ae36 <CstDrawBufferCleanupCursor>
    226c:	|  |  |  |      move.l 48(sp),d0
    2270:	|  |  |  |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor = 0;  
    2272:	|  |  |  |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    2278:	|  |  |  |      clr.w (a0)
    227a:	|  +--|--|----- bra.w 256a <CstScaleSprite+0x8a2>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    227e:	|  |  |  \----> movea.l 92(sp),a0
    2282:	|  |  |         move.l (a0),d0
    2284:	|  |  |         movea.l d0,a0
    2286:	|  |  |         cmpa.w #0,a0
    228a:	|  |  |     /-- bge.s 2290 <CstScaleSprite+0x5c8>
    228c:	|  |  |     |   lea 15(a0),a0
    2290:	|  |  |     \-> move.l a0,d0
    2292:	|  |  |         asr.l #4,d0
    2294:	|  |  |         move.l d0,d0
    2296:	|  |  |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    229c:	|  |  |         move.l a0,d1
    229e:	|  |  |         addq.l #2,d1
    22a0:	|  |  |         move.l d1,1ae46 <CstBackDropBufferApplyCursor>
    22a6:	|  |  |         add.w 80(sp),d0
    22aa:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    22ac:	|  |  |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    22b2:	|  |  |         move.l a0,d0
    22b4:	|  |  |         addq.l #2,d0
    22b6:	|  |  |         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    22bc:	|  |  |         move.l 40(sp),d0
    22c0:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    22c2:	|  |  |         move.w 16(sp),d0
    22c6:	|  |  |     /-- bpl.s 22cc <CstScaleSprite+0x604>
    22c8:	|  |  |     |   addi.w #15,d0
    22cc:	|  |  |     \-> asr.w #4,d0
    22ce:	|  |  |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    22d4:	|  |  |         move.l a0,d1
    22d6:	|  |  |         addq.l #2,d1
    22d8:	|  |  |         move.l d1,1ae46 <CstBackDropBufferApplyCursor>
    22de:	|  |  |         add.w d0,d0
    22e0:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    22e2:	|  |  |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    22e8:	|  |  |         move.l a0,d0
    22ea:	|  |  |         addq.l #2,d0
    22ec:	|  |  |         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    22f2:	|  |  |         move.l 48(sp),d0
    22f6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    22f8:	|  |  |         movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    22fe:	|  |  |         move.l a0,d0
    2300:	|  |  |         addq.l #2,d0
    2302:	|  |  |         move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    2308:	|  |  |         clr.w (a0)
    230a:	|  +--|-------- bra.w 256a <CstScaleSprite+0x8a2>
    }
  } else { //Whole Sprite on Screen
    extrawords = 1;
    230e:	|  |  \-------> move.w #1,82(sp)
    cutwordssource = 0;
    2314:	|  |            clr.w 80(sp)
    cutmaskpixel = 0;
    2318:	|  |            clr.w 78(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    231c:	|  |            clr.w 76(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    2320:	|  |            movea.l 92(sp),a0
    2324:	|  |            move.l 24(a0),d0
    2328:	|  |            move.l d0,d2
    232a:	|  |            movea.l 92(sp),a0
    232e:	|  |            move.l (a0),d0
    2330:	|  |        /-- bpl.s 2334 <CstScaleSprite+0x66c>
    2332:	|  |        |   addq.l #7,d0
    2334:	|  |        \-> asr.l #3,d0
    2336:	|  |            movea.l 92(sp),a0
    233a:	|  |            move.l 4(a0),d1
    233e:	|  |            move.l d1,-(sp)
    2340:	|  |            move.l d0,-(sp)
    2342:	|  |            jsr 161b8 <__mulsi3>
    2348:	|  |            addq.l #8,sp
    234a:	|  |            move.l d0,d1
    234c:	|  |            move.l d1,d0
    234e:	|  |            add.l d0,d0
    2350:	|  |            add.l d0,d0
    2352:	|  |            add.l d1,d0
    2354:	|  |            add.l d0,d2
    2356:	|  |            movea.l 92(sp),a0
    235a:	|  |            move.l (a0),d0
    235c:	|  |            move.l 44(sp),-(sp)
    2360:	|  |            move.l d0,-(sp)
    2362:	|  |            jsr 161b8 <__mulsi3>
    2368:	|  |            addq.l #8,sp
    236a:	|  |            lsr.l #3,d0
    236c:	|  |            move.l d2,d1
    236e:	|  |            add.l d0,d1
    2370:	|  |            move.l d1,72(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2374:	|  |            movea.l 92(sp),a0
    2378:	|  |            move.l 24(a0),d0
    237c:	|  |            move.l d0,d2
    237e:	|  |            movea.l 92(sp),a0
    2382:	|  |            move.l (a0),d0
    2384:	|  |            move.l 44(sp),-(sp)
    2388:	|  |            move.l d0,-(sp)
    238a:	|  |            jsr 161b8 <__mulsi3>
    2390:	|  |            addq.l #8,sp
    2392:	|  |            lsr.l #3,d0
    2394:	|  |            move.l d2,d1
    2396:	|  |            add.l d0,d1
    2398:	|  |            move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    239c:	|  |            move.l 1ae56 <winWidth>,d0
    23a2:	|  |            move.l 48(sp),-(sp)
    23a6:	|  |            move.l d0,-(sp)
    23a8:	|  |            jsr 161b8 <__mulsi3>
    23ae:	|  |            addq.l #8,sp
    23b0:	|  |            lsr.l #3,d0
    23b2:	|  |            move.l 84(sp),d1
    23b6:	|  |            add.l d0,d1
    23b8:	|  |            move.w 16(sp),d0
    23bc:	|  |        /-- bpl.s 23c2 <CstScaleSprite+0x6fa>
    23be:	|  |        |   addi.w #15,d0
    23c2:	|  |        \-> asr.w #4,d0
    23c4:	|  |            movea.w d0,a0
    23c6:	|  |            move.l a0,d0
    23c8:	|  |            add.l a0,d0
    23ca:	|  |            move.l d1,d2
    23cc:	|  |            add.l d0,d2
    23ce:	|  |            move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    23d2:	|  |            move.l 1ae56 <winWidth>,d0
    23d8:	|  |            move.l 48(sp),-(sp)
    23dc:	|  |            move.l d0,-(sp)
    23de:	|  |            jsr 161b8 <__mulsi3>
    23e4:	|  |            addq.l #8,sp
    23e6:	|  |            lsr.l #3,d0
    23e8:	|  |            move.l 84(sp),d1
    23ec:	|  |            add.l d0,d1
    23ee:	|  |            move.w 16(sp),d0
    23f2:	|  |        /-- bpl.s 23f8 <CstScaleSprite+0x730>
    23f4:	|  |        |   addi.w #15,d0
    23f8:	|  |        \-> asr.w #4,d0
    23fa:	|  |            movea.w d0,a0
    23fc:	|  |            move.l a0,d0
    23fe:	|  |            add.l a0,d0
    2400:	|  |            move.l d1,d2
    2402:	|  |            add.l d0,d2
    2404:	|  |            move.l d2,60(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    2408:	|  |            move.w 16(sp),d0
    240c:	|  |            andi.w #-32753,d0
    2410:	|  |        /-- bpl.s 241a <CstScaleSprite+0x752>
    2412:	|  |        |   subq.w #1,d0
    2414:	|  |        |   ori.w #-16,d0
    2418:	|  |        |   addq.w #1,d0
    241a:	|  |        \-> ext.l d0
    241c:	|  |            moveq #12,d1
    241e:	|  |            lsl.l d1,d0
    2420:	|  |            addi.l #4042,d0
    2426:	|  |            move.l d0,56(sp)
    bltcon1 = ((x%16) << 12);
    242a:	|  |            move.w 16(sp),d0
    242e:	|  |            andi.w #-32753,d0
    2432:	|  |        /-- bpl.s 243c <CstScaleSprite+0x774>
    2434:	|  |        |   subq.w #1,d0
    2436:	|  |        |   ori.w #-16,d0
    243a:	|  |        |   addq.w #1,d0
    243c:	|  |        \-> ext.l d0
    243e:	|  |            moveq #12,d2
    2440:	|  |            lsl.l d2,d0
    2442:	|  |            move.l d0,52(sp)
    if( destinationtype == SCREEN)
    2446:	|  |            cmpi.w #1,12(sp)
    244c:	|  |     /----- bne.w 24da <CstScaleSprite+0x812>
    {
      *CstDrawBufferCleanupCursor++ = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    2450:	|  |     |      movea.l 92(sp),a0
    2454:	|  |     |      move.l (a0),d0
    2456:	|  |     |      movea.l d0,a0
    2458:	|  |     |      cmpa.w #0,a0
    245c:	|  |     |  /-- bge.s 2462 <CstScaleSprite+0x79a>
    245e:	|  |     |  |   lea 15(a0),a0
    2462:	|  |     |  \-> move.l a0,d0
    2464:	|  |     |      asr.l #4,d0
    2466:	|  |     |      move.l d0,d0
    2468:	|  |     |      add.w 80(sp),d0
    246c:	|  |     |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    2472:	|  |     |      move.l a0,d1
    2474:	|  |     |      addq.l #2,d1
    2476:	|  |     |      move.l d1,1ae36 <CstDrawBufferCleanupCursor>
    247c:	|  |     |      add.w 82(sp),d0
    2480:	|  |     |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = blitheight; //Height
    2482:	|  |     |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    2488:	|  |     |      move.l a0,d0
    248a:	|  |     |      addq.l #2,d0
    248c:	|  |     |      move.l d0,1ae36 <CstDrawBufferCleanupCursor>
    2492:	|  |     |      move.l 40(sp),d0
    2496:	|  |     |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = (x/16)*2; //X Start in Bytes
    2498:	|  |     |      move.w 16(sp),d0
    249c:	|  |     |  /-- bpl.s 24a2 <CstScaleSprite+0x7da>
    249e:	|  |     |  |   addi.w #15,d0
    24a2:	|  |     |  \-> asr.w #4,d0
    24a4:	|  |     |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    24aa:	|  |     |      move.l a0,d1
    24ac:	|  |     |      addq.l #2,d1
    24ae:	|  |     |      move.l d1,1ae36 <CstDrawBufferCleanupCursor>
    24b4:	|  |     |      add.w d0,d0
    24b6:	|  |     |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor++ = ystartdst; //Y Start    
    24b8:	|  |     |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    24be:	|  |     |      move.l a0,d0
    24c0:	|  |     |      addq.l #2,d0
    24c2:	|  |     |      move.l d0,1ae36 <CstDrawBufferCleanupCursor>
    24c8:	|  |     |      move.l 48(sp),d0
    24cc:	|  |     |      move.w d0,(a0)
      *CstDrawBufferCleanupCursor = 0;
    24ce:	|  |     |      movea.l 1ae36 <CstDrawBufferCleanupCursor>,a0
    24d4:	|  |     |      clr.w (a0)
    24d6:	|  +-----|----- bra.w 256a <CstScaleSprite+0x8a2>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    24da:	|  |     \----> movea.l 92(sp),a0
    24de:	|  |            move.l (a0),d0
    24e0:	|  |            movea.l d0,a0
    24e2:	|  |            cmpa.w #0,a0
    24e6:	|  |        /-- bge.s 24ec <CstScaleSprite+0x824>
    24e8:	|  |        |   lea 15(a0),a0
    24ec:	|  |        \-> move.l a0,d0
    24ee:	|  |            asr.l #4,d0
    24f0:	|  |            move.l d0,d0
    24f2:	|  |            add.w 80(sp),d0
    24f6:	|  |            movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    24fc:	|  |            move.l a0,d1
    24fe:	|  |            addq.l #2,d1
    2500:	|  |            move.l d1,1ae46 <CstBackDropBufferApplyCursor>
    2506:	|  |            add.w 82(sp),d0
    250a:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    250c:	|  |            movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    2512:	|  |            move.l a0,d0
    2514:	|  |            addq.l #2,d0
    2516:	|  |            move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    251c:	|  |            move.l 40(sp),d0
    2520:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2522:	|  |            move.w 16(sp),d0
    2526:	|  |        /-- bpl.s 252c <CstScaleSprite+0x864>
    2528:	|  |        |   addi.w #15,d0
    252c:	|  |        \-> asr.w #4,d0
    252e:	|  |            movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    2534:	|  |            move.l a0,d1
    2536:	|  |            addq.l #2,d1
    2538:	|  |            move.l d1,1ae46 <CstBackDropBufferApplyCursor>
    253e:	|  |            add.w d0,d0
    2540:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2542:	|  |            movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    2548:	|  |            move.l a0,d0
    254a:	|  |            addq.l #2,d0
    254c:	|  |            move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    2552:	|  |            move.l 48(sp),d0
    2556:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2558:	|  |            movea.l 1ae46 <CstBackDropBufferApplyCursor>,a0
    255e:	|  |            move.l a0,d0
    2560:	|  |            addq.l #2,d0
    2562:	|  |            move.l d0,1ae46 <CstBackDropBufferApplyCursor>
    2568:	|  |            clr.w (a0)
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    256a:	|  \----------> moveq #0,d0
    256c:	|               move.w 78(sp),d0
    2570:	|               moveq #0,d1
    2572:	|               not.w d1
    2574:	|               asr.l d0,d1
    2576:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    257a:	|               moveq #0,d1
    257c:	|               move.w 80(sp),d1
    2580:	|               moveq #0,d0
    2582:	|               move.w 82(sp),d0
    2586:	|               sub.l d0,d1
    2588:	|               move.l d1,d0
    258a:	|               add.w d0,d0
    258c:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    2590:	|               moveq #0,d1
    2592:	|               move.w 80(sp),d1
    2596:	|               moveq #0,d0
    2598:	|               move.w 82(sp),d0
    259c:	|               sub.l d0,d1
    259e:	|               move.l d1,d0
    25a0:	|               add.w d0,d0
    25a2:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    25a6:	|               move.l 1ae56 <winWidth>,d0
    25ac:	|               lsr.l #3,d0
    25ae:	|               move.l d0,d1
    25b0:	|               movea.l 92(sp),a0
    25b4:	|               move.l (a0),d0
    25b6:	|           /-- bpl.s 25ba <CstScaleSprite+0x8f2>
    25b8:	|           |   addq.l #7,d0
    25ba:	|           \-> asr.l #3,d0
    25bc:	|               move.l d0,d0
    25be:	|               sub.w d0,d1
    25c0:	|               move.w 80(sp),d0
    25c4:	|               sub.w 82(sp),d0
    25c8:	|               add.w d0,d0
    25ca:	|               add.w d1,d0
    25cc:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    25d0:	|               move.l 1ae56 <winWidth>,d0
    25d6:	|               lsr.l #3,d0
    25d8:	|               move.l d0,d1
    25da:	|               movea.l 92(sp),a0
    25de:	|               move.l (a0),d0
    25e0:	|           /-- bpl.s 25e4 <CstScaleSprite+0x91c>
    25e2:	|           |   addq.l #7,d0
    25e4:	|           \-> asr.l #3,d0
    25e6:	|               move.l d0,d0
    25e8:	|               sub.w d0,d1
    25ea:	|               move.w 80(sp),d0
    25ee:	|               sub.w 82(sp),d0
    25f2:	|               add.w d0,d0
    25f4:	|               add.w d1,d0
    25f6:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    25fa:	|               move.l #14675968,22(sp)
  WaitBlit();
    2602:	|               move.l 1af0e <GfxBase>,d0
    2608:	|               movea.l d0,a6
    260a:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    260e:	|               movea.l 22(sp),a0
    2612:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    2618:	|               movea.l 22(sp),a0
    261c:	|               move.w 76(sp),70(a0)
  custom->bltamod = bltamod;
    2622:	|               move.w 32(sp),d0
    2626:	|               movea.l 22(sp),a0
    262a:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    262e:	|               move.w 30(sp),d0
    2632:	|               movea.l 22(sp),a0
    2636:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    263a:	|               move.w 28(sp),d0
    263e:	|               movea.l 22(sp),a0
    2642:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2646:	|               move.w 26(sp),d0
    264a:	|               movea.l 22(sp),a0
    264e:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    2652:	|               move.l 56(sp),d0
    2656:	|               movea.l 22(sp),a0
    265a:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    265e:	|               move.l 52(sp),d0
    2662:	|               movea.l 22(sp),a0
    2666:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    266a:	|               movea.l 92(sp),a0
    266e:	|               move.l (a0),d0
    2670:	|               asr.l #3,d0
    2672:	|               move.l d0,d1
    2674:	|               movea.l 92(sp),a0
    2678:	|               move.l 4(a0),d0
    267c:	|               move.l d0,d0
    267e:	|               move.w d1,d2
    2680:	|               muls.w d0,d2
    2682:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    2686:	|               move.l 1ae56 <winWidth>,d0
    268c:	|               lsr.l #3,d0
    268e:	|               move.l d0,d1
    2690:	|               move.l 1ae5a <winHeight>,d0
    2696:	|               move.l d0,d0
    2698:	|               move.w d1,d2
    269a:	|               muls.w d0,d2
    269c:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    26a0:	|               clr.l 36(sp)
    26a4:	|        /----- bra.w 2738 <CstScaleSprite+0xa70>
  {
    custom->bltapt = (APTR) bltapt;
    26a8:	|     /--|----> move.l 72(sp),d0
    26ac:	|     |  |      movea.l 22(sp),a0
    26b0:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    26b4:	|     |  |      move.l 68(sp),d0
    26b8:	|     |  |      movea.l 22(sp),a0
    26bc:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    26c0:	|     |  |      move.l 64(sp),d0
    26c4:	|     |  |      movea.l 22(sp),a0
    26c8:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    26cc:	|     |  |      move.l 60(sp),d0
    26d0:	|     |  |      movea.l 22(sp),a0
    26d4:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    26d8:	|     |  |      move.l 40(sp),d0
    26dc:	|     |  |      move.w d0,d1
    26de:	|     |  |      lsl.w #6,d1
    26e0:	|     |  |      movea.l 92(sp),a0
    26e4:	|     |  |      move.l (a0),d0
    26e6:	|     |  |      movea.l d0,a0
    26e8:	|     |  |      cmpa.w #0,a0
    26ec:	|     |  |  /-- bge.s 26f2 <CstScaleSprite+0xa2a>
    26ee:	|     |  |  |   lea 15(a0),a0
    26f2:	|     |  |  \-> move.l a0,d0
    26f4:	|     |  |      asr.l #4,d0
    26f6:	|     |  |      move.l d0,d0
    26f8:	|     |  |      add.w d1,d0
    26fa:	|     |  |      sub.w 80(sp),d0
    26fe:	|     |  |      add.w 82(sp),d0
    2702:	|     |  |      movea.l 22(sp),a0
    2706:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    270a:	|     |  |      moveq #0,d0
    270c:	|     |  |      move.w 20(sp),d0
    2710:	|     |  |      add.l d0,68(sp)
    bltcpt += bltcptplus;
    2714:	|     |  |      moveq #0,d0
    2716:	|     |  |      move.w 18(sp),d0
    271a:	|     |  |      add.l d0,64(sp)
    bltdpt += bltcptplus;
    271e:	|     |  |      moveq #0,d0
    2720:	|     |  |      move.w 18(sp),d0
    2724:	|     |  |      add.l d0,60(sp)
    WaitBlit();
    2728:	|     |  |      move.l 1af0e <GfxBase>,d0
    272e:	|     |  |      movea.l d0,a6
    2730:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2734:	|     |  |      addq.l #1,36(sp)
    2738:	|     |  \----> moveq #4,d0
    273a:	|     |         cmp.l 36(sp),d0
    273e:	|     \-------- bge.w 26a8 <CstScaleSprite+0x9e0>
  }   
}
    2742:	\-------------> movem.l (sp)+,d2-d3/a6
    2746:	                lea 76(sp),sp
    274a:	                rts

0000274c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    274c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    274e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    2754:	move.l 8(sp),d0
    2758:	movea.l (sp),a0
    275a:	move.l d0,128(a0)
}
    275e:	nop
    2760:	addq.l #4,sp
    2762:	rts

00002764 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    2764:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    2768:	move.l 1ae2a <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    2770:	move.l 1ae2e <CstDrawBuffer>,d0
    2776:	move.l d0,1ae2a <CstViewBuffer>
  CstDrawBuffer = tmp;
    277c:	move.l 16(sp),1ae2e <CstDrawBuffer>

  UWORD *tmp2 = CstViewBufferCleanupStart;
    2784:	move.l 1ae3a <CstViewBufferCleanupStart>,12(sp)
  CstViewBufferCleanupStart = CstDrawBufferCleanupStart;
    278c:	move.l 1ae32 <CstDrawBufferCleanupStart>,d0
    2792:	move.l d0,1ae3a <CstViewBufferCleanupStart>
  CstDrawBufferCleanupStart = tmp2;
    2798:	move.l 12(sp),1ae32 <CstDrawBufferCleanupStart>
  CstViewBufferCleanupCursor = CstViewBufferCleanupStart;
    27a0:	move.l 1ae3a <CstViewBufferCleanupStart>,d0
    27a6:	move.l d0,1ae3e <CstViewBufferCleanupCursor>
  CstDrawBufferCleanupCursor = CstDrawBufferCleanupStart;
    27ac:	move.l 1ae32 <CstDrawBufferCleanupStart>,d0
    27b2:	move.l d0,1ae36 <CstDrawBufferCleanupCursor>


  UWORD *copword = CstCopperList;
    27b8:	move.l 1ae24 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    27c0:	move.l 1ae2a <CstViewBuffer>,d0
    27c6:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    27ca:	move.l 4(sp),d0
    27ce:	clr.w d0
    27d0:	swap d0
    27d2:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    27d6:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    27da:	movea.w #118,a0
    27de:	adda.l 8(sp),a0
    27e2:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    27e4:	movea.w #114,a0
    27e8:	adda.l 8(sp),a0
    27ec:	move.w 2(sp),(a0)

  ptr +=  40*256;
    27f0:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    27f8:	move.l 4(sp),d0
    27fc:	clr.w d0
    27fe:	swap d0
    2800:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2804:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    2808:	movea.w #126,a0
    280c:	adda.l 8(sp),a0
    2810:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    2812:	movea.w #122,a0
    2816:	adda.l 8(sp),a0
    281a:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    281e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2826:	move.l 4(sp),d0
    282a:	clr.w d0
    282c:	swap d0
    282e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2832:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    2836:	movea.l 8(sp),a0
    283a:	lea 134(a0),a0
    283e:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    2840:	movea.l 8(sp),a0
    2844:	lea 130(a0),a0
    2848:	move.w 2(sp),(a0)

  ptr +=  40*256;
    284c:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2854:	move.l 4(sp),d0
    2858:	clr.w d0
    285a:	swap d0
    285c:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2860:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    2864:	movea.l 8(sp),a0
    2868:	lea 142(a0),a0
    286c:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    286e:	movea.l 8(sp),a0
    2872:	lea 138(a0),a0
    2876:	move.w 2(sp),(a0)

  ptr +=  40*256;
    287a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2882:	move.l 4(sp),d0
    2886:	clr.w d0
    2888:	swap d0
    288a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    288e:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    2892:	movea.l 8(sp),a0
    2896:	lea 150(a0),a0
    289a:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    289c:	movea.l 8(sp),a0
    28a0:	lea 146(a0),a0
    28a4:	move.w 2(sp),(a0)

}
    28a8:	nop
    28aa:	lea 20(sp),sp
    28ae:	rts

000028b0 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    28b0:	          lea -80(sp),sp
    28b4:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    28b6:	          pea 165ca <PutChar+0x2fc>
    28bc:	          jsr 157fa <KPrintF>
    28c2:	          addq.l #4,sp

  width = width / 8;
    28c4:	          move.l 88(sp),d0
    28c8:	      /-- bpl.s 28cc <CstReserveBackdrop+0x1c>
    28ca:	      |   addq.l #7,d0
    28cc:	      \-> asr.l #3,d0
    28ce:	          move.l d0,88(sp)

  if( width < 40) 
    28d2:	          moveq #39,d0
    28d4:	          cmp.l 88(sp),d0
    28d8:	      /-- blt.s 28ee <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    28da:	      |   pea 165e4 <PutChar+0x316>
    28e0:	      |   jsr 157fa <KPrintF>
    28e6:	      |   addq.l #4,sp
    return FALSE;
    28e8:	      |   clr.w d0
    28ea:	/-----|-- bra.w 2ce4 <CstReserveBackdrop+0x434>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    28ee:	|     \-> pea 16622 <PutChar+0x354>
    28f4:	|         jsr 157fa <KPrintF>
    28fa:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    28fc:	|         move.l 88(sp),-(sp)
    2900:	|         jsr 1114 <CstCreateCopperlist>
    2906:	|         addq.l #4,sp
    2908:	|         move.l d0,1ae24 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    290e:	|         pea 16642 <PutChar+0x374>
    2914:	|         jsr 157fa <KPrintF>
    291a:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    291c:	|         move.l 88(sp),d1
    2920:	|         move.l 92(sp),d0
    2924:	|         muls.w d1,d0
    2926:	|         move.w d0,1ae1e <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    292c:	|         move.w 1ae1e <CstBackdropSizePlane>,d1
    2932:	|         move.w d1,d0
    2934:	|         add.w d0,d0
    2936:	|         add.w d0,d0
    2938:	|         add.w d1,d0
    293a:	|         move.w d0,1ae1c <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    2940:	|         move.w 1ae1c <CstBackdropSize>,d0
    2946:	|         move.w d0,d0
    2948:	|         andi.l #65535,d0
    294e:	|         move.l d0,72(sp)
    2952:	|         moveq #2,d1
    2954:	|         move.l d1,68(sp)
    2958:	|         move.l 1af02 <SysBase>,d0
    295e:	|         movea.l d0,a6
    2960:	|         move.l 72(sp),d0
    2964:	|         move.l 68(sp),d1
    2968:	|         jsr -684(a6)
    296c:	|         move.l d0,64(sp)
    2970:	|         move.l 64(sp),d0
    2974:	|         move.l d0,1ae20 <CstBackDrop>
  if( !CstBackDrop)
    297a:	|         move.l 1ae20 <CstBackDrop>,d0
    2980:	|     /-- bne.s 2996 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    2982:	|     |   pea 16669 <PutChar+0x39b>
    2988:	|     |   jsr 157fa <KPrintF>
    298e:	|     |   addq.l #4,sp
    return FALSE;  
    2990:	|     |   clr.w d0
    2992:	+-----|-- bra.w 2ce4 <CstReserveBackdrop+0x434>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    2996:	|     \-> pea 166a1 <PutChar+0x3d3>
    299c:	|         jsr 157fa <KPrintF>
    29a2:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    29a4:	|         move.l 1ae20 <CstBackDrop>,80(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    29ac:	|         clr.l 76(sp)
    29b0:	|     /-- bra.s 29c6 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    29b2:	|  /--|-> move.l 80(sp),d0
    29b6:	|  |  |   move.l d0,d1
    29b8:	|  |  |   addq.l #4,d1
    29ba:	|  |  |   move.l d1,80(sp)
    29be:	|  |  |   movea.l d0,a0
    29c0:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    29c2:	|  |  |   addq.l #1,76(sp)
    29c6:	|  |  \-> move.w 1ae1c <CstBackdropSize>,d0
    29cc:	|  |      lsr.w #2,d0
    29ce:	|  |      move.w d0,d0
    29d0:	|  |      andi.l #65535,d0
    29d6:	|  |      cmp.l 76(sp),d0
    29da:	|  \----- bgt.s 29b2 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    29dc:	|         move.w 1ae1c <CstBackdropSize>,d0
    29e2:	|         move.w d0,d0
    29e4:	|         andi.l #65535,d0
    29ea:	|         move.l 88(sp),d1
    29ee:	|         add.l d1,d1
    29f0:	|         add.l d1,d0
    29f2:	|         move.l d0,60(sp)
    29f6:	|         moveq #2,d0
    29f8:	|         move.l d0,56(sp)
    29fc:	|         move.l 1af02 <SysBase>,d0
    2a02:	|         movea.l d0,a6
    2a04:	|         move.l 60(sp),d0
    2a08:	|         move.l 56(sp),d1
    2a0c:	|         jsr -684(a6)
    2a10:	|         move.l d0,52(sp)
    2a14:	|         move.l 52(sp),d0
    2a18:	|         move.l d0,1ae2e <CstDrawBuffer>
  if( !CstDrawBuffer)
    2a1e:	|         move.l 1ae2e <CstDrawBuffer>,d0
    2a24:	|     /-- bne.s 2a3a <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    2a26:	|     |   pea 166c7 <PutChar+0x3f9>
    2a2c:	|     |   jsr 157fa <KPrintF>
    2a32:	|     |   addq.l #4,sp
    return FALSE;  
    2a34:	|     |   clr.w d0
    2a36:	+-----|-- bra.w 2ce4 <CstReserveBackdrop+0x434>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    2a3a:	|     \-> pea 16701 <PutChar+0x433>
    2a40:	|         jsr 157fa <KPrintF>
    2a46:	|         addq.l #4,sp
  
  CstDrawBufferCleanupStart = AllocVec( 100*3*2,MEMF_ANY);
    2a48:	|         move.l #600,48(sp)
    2a50:	|         clr.l 44(sp)
    2a54:	|         move.l 1af02 <SysBase>,d0
    2a5a:	|         movea.l d0,a6
    2a5c:	|         move.l 48(sp),d0
    2a60:	|         move.l 44(sp),d1
    2a64:	|         jsr -684(a6)
    2a68:	|         move.l d0,40(sp)
    2a6c:	|         move.l 40(sp),d0
    2a70:	|         move.l d0,1ae32 <CstDrawBufferCleanupStart>
  if( !CstDrawBufferCleanupStart)
    2a76:	|         move.l 1ae32 <CstDrawBufferCleanupStart>,d0
    2a7c:	|     /-- bne.s 2a92 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstDrawBufferCleanupStart");
    2a7e:	|     |   pea 16729 <PutChar+0x45b>
    2a84:	|     |   jsr 157fa <KPrintF>
    2a8a:	|     |   addq.l #4,sp
    return FALSE;  
    2a8c:	|     |   clr.w d0
    2a8e:	+-----|-- bra.w 2ce4 <CstReserveBackdrop+0x434>
  }  
  KPrintF("CstReserveBackdrop: CstDrawBufferCleanupStart reserved");
    2a92:	|     \-> pea 16772 <PutChar+0x4a4>
    2a98:	|         jsr 157fa <KPrintF>
    2a9e:	|         addq.l #4,sp
  
  CstBackDropBufferApplyStart = AllocVec( 100*3*2,MEMF_ANY);
    2aa0:	|         move.l #600,36(sp)
    2aa8:	|         clr.l 32(sp)
    2aac:	|         move.l 1af02 <SysBase>,d0
    2ab2:	|         movea.l d0,a6
    2ab4:	|         move.l 36(sp),d0
    2ab8:	|         move.l 32(sp),d1
    2abc:	|         jsr -684(a6)
    2ac0:	|         move.l d0,28(sp)
    2ac4:	|         move.l 28(sp),d0
    2ac8:	|         move.l d0,1ae42 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    2ace:	|         move.l 1ae42 <CstBackDropBufferApplyStart>,d0
    2ad4:	|     /-- bne.s 2aea <CstReserveBackdrop+0x23a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstDrawBufferCleanupStart");
    2ad6:	|     |   pea 16729 <PutChar+0x45b>
    2adc:	|     |   jsr 157fa <KPrintF>
    2ae2:	|     |   addq.l #4,sp
    return FALSE;  
    2ae4:	|     |   clr.w d0
    2ae6:	+-----|-- bra.w 2ce4 <CstReserveBackdrop+0x434>
  }

  CstDrawBufferCleanupCursor = CstDrawBufferCleanupStart;
    2aea:	|     \-> move.l 1ae32 <CstDrawBufferCleanupStart>,d0
    2af0:	|         move.l d0,1ae36 <CstDrawBufferCleanupCursor>
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    2af6:	|         move.l 1ae42 <CstBackDropBufferApplyStart>,d0
    2afc:	|         move.l d0,1ae46 <CstBackDropBufferApplyCursor>

  *CstDrawBufferCleanupStart = 0;
    2b02:	|         movea.l 1ae32 <CstDrawBufferCleanupStart>,a0
    2b08:	|         clr.w (a0)
  *CstBackDropBufferApplyStart = 0;
    2b0a:	|         movea.l 1ae42 <CstBackDropBufferApplyStart>,a0
    2b10:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2b12:	|         move.w 1ae1c <CstBackdropSize>,d0
    2b18:	|         move.w d0,d0
    2b1a:	|         andi.l #65535,d0
    2b20:	|         move.l 88(sp),d1
    2b24:	|         add.l d1,d1
    2b26:	|         add.l d1,d0
    2b28:	|         move.l d0,24(sp)
    2b2c:	|         moveq #2,d1
    2b2e:	|         move.l d1,20(sp)
    2b32:	|         move.l 1af02 <SysBase>,d0
    2b38:	|         movea.l d0,a6
    2b3a:	|         move.l 24(sp),d0
    2b3e:	|         move.l 20(sp),d1
    2b42:	|         jsr -684(a6)
    2b46:	|         move.l d0,16(sp)
    2b4a:	|         move.l 16(sp),d0
    2b4e:	|         move.l d0,1ae2a <CstViewBuffer>
  if( !CstViewBuffer)
    2b54:	|         move.l 1ae2a <CstViewBuffer>,d0
    2b5a:	|     /-- bne.s 2b70 <CstReserveBackdrop+0x2c0>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    2b5c:	|     |   pea 167a9 <PutChar+0x4db>
    2b62:	|     |   jsr 157fa <KPrintF>
    2b68:	|     |   addq.l #4,sp
    return FALSE;  
    2b6a:	|     |   clr.w d0
    2b6c:	+-----|-- bra.w 2ce4 <CstReserveBackdrop+0x434>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    2b70:	|     \-> pea 167e3 <PutChar+0x515>
    2b76:	|         jsr 157fa <KPrintF>
    2b7c:	|         addq.l #4,sp

  CstViewBufferCleanupStart = AllocVec( 100*3*2,MEMF_ANY);
    2b7e:	|         move.l #600,12(sp)
    2b86:	|         clr.l 8(sp)
    2b8a:	|         move.l 1af02 <SysBase>,d0
    2b90:	|         movea.l d0,a6
    2b92:	|         move.l 12(sp),d0
    2b96:	|         move.l 8(sp),d1
    2b9a:	|         jsr -684(a6)
    2b9e:	|         move.l d0,4(sp)
    2ba2:	|         move.l 4(sp),d0
    2ba6:	|         move.l d0,1ae3a <CstViewBufferCleanupStart>
  if( !CstViewBufferCleanupStart)
    2bac:	|         move.l 1ae3a <CstViewBufferCleanupStart>,d0
    2bb2:	|     /-- bne.s 2bc8 <CstReserveBackdrop+0x318>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstViewBufferCleanupStart");
    2bb4:	|     |   pea 1680b <PutChar+0x53d>
    2bba:	|     |   jsr 157fa <KPrintF>
    2bc0:	|     |   addq.l #4,sp
    return FALSE;  
    2bc2:	|     |   clr.w d0
    2bc4:	+-----|-- bra.w 2ce4 <CstReserveBackdrop+0x434>
  }

  KPrintF("CstReserveBackdrop: CstViewBufferCleanupStart reserved");
    2bc8:	|     \-> pea 16854 <PutChar+0x586>
    2bce:	|         jsr 157fa <KPrintF>
    2bd4:	|         addq.l #4,sp
  *CstViewBufferCleanupStart = 0;
    2bd6:	|         movea.l 1ae3a <CstViewBufferCleanupStart>,a0
    2bdc:	|         clr.w (a0)
  CstViewBufferCleanupCursor = CstViewBufferCleanupStart;
    2bde:	|         move.l 1ae3a <CstViewBufferCleanupStart>,d0
    2be4:	|         move.l d0,1ae3e <CstViewBufferCleanupCursor>
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    2bea:	|         move.l 1ae2e <CstDrawBuffer>,d1
    2bf0:	|         move.l 88(sp),d0
    2bf4:	|     /-- bpl.s 2bf8 <CstReserveBackdrop+0x348>
    2bf6:	|     |   addq.l #3,d0
    2bf8:	|     \-> asr.l #2,d0
    2bfa:	|         add.l d0,d0
    2bfc:	|         add.l d0,d0
    2bfe:	|         add.l d1,d0
    2c00:	|         move.l d0,1ae2e <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    2c06:	|         move.l 1ae2a <CstViewBuffer>,d1
    2c0c:	|         move.l 88(sp),d0
    2c10:	|     /-- bpl.s 2c14 <CstReserveBackdrop+0x364>
    2c12:	|     |   addq.l #3,d0
    2c14:	|     \-> asr.l #2,d0
    2c16:	|         add.l d0,d0
    2c18:	|         add.l d0,d0
    2c1a:	|         add.l d1,d0
    2c1c:	|         move.l d0,1ae2a <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    2c22:	|         move.l 1ae20 <CstBackDrop>,d0
    2c28:	|         clr.l -(sp)
    2c2a:	|         pea 5 <_start+0x5>
    2c2e:	|         pea 100 <copyString+0x48>
    2c32:	|         pea 140 <decodeFilename+0x28>
    2c36:	|         pea 1688b <PutChar+0x5bd>
    2c3c:	|         move.l d0,-(sp)
    2c3e:	|         jsr 158e2 <debug_register_bitmap>
    2c44:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    2c48:	|         move.l 92(sp),d0
    2c4c:	|         movea.w d0,a1
    2c4e:	|         move.l 88(sp),d0
    2c52:	|         lsl.w #3,d0
    2c54:	|         movea.w d0,a0
    2c56:	|         move.l 1ae2e <CstDrawBuffer>,d0
    2c5c:	|         clr.l -(sp)
    2c5e:	|         pea 5 <_start+0x5>
    2c62:	|         move.l a1,-(sp)
    2c64:	|         move.l a0,-(sp)
    2c66:	|         pea 1689b <PutChar+0x5cd>
    2c6c:	|         move.l d0,-(sp)
    2c6e:	|         jsr 158e2 <debug_register_bitmap>
    2c74:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    2c78:	|         move.l 92(sp),d0
    2c7c:	|         movea.w d0,a1
    2c7e:	|         move.l 88(sp),d0
    2c82:	|         lsl.w #3,d0
    2c84:	|         movea.w d0,a0
    2c86:	|         move.l 1ae2a <CstViewBuffer>,d0
    2c8c:	|         clr.l -(sp)
    2c8e:	|         pea 5 <_start+0x5>
    2c92:	|         move.l a1,-(sp)
    2c94:	|         move.l a0,-(sp)
    2c96:	|         pea 168aa <PutChar+0x5dc>
    2c9c:	|         move.l d0,-(sp)
    2c9e:	|         jsr 158e2 <debug_register_bitmap>
    2ca4:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    2ca8:	|         move.l 1ae24 <CstCopperList>,d0
    2cae:	|     /-- beq.s 2cc0 <CstReserveBackdrop+0x410>
    2cb0:	|     |   move.l 1ae2e <CstDrawBuffer>,d0
    2cb6:	|     +-- beq.s 2cc0 <CstReserveBackdrop+0x410>
    2cb8:	|     |   move.l 1ae2a <CstViewBuffer>,d0
    2cbe:	|  /--|-- bne.s 2cd2 <CstReserveBackdrop+0x422>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    2cc0:	|  |  \-> pea 168b9 <PutChar+0x5eb>
    2cc6:	|  |      jsr 157fa <KPrintF>
    2ccc:	|  |      addq.l #4,sp
    return FALSE;
    2cce:	|  |      clr.w d0
    2cd0:	+--|----- bra.s 2ce4 <CstReserveBackdrop+0x434>
  }

  CstSetCl( CstCopperList);
    2cd2:	|  \----> move.l 1ae24 <CstCopperList>,d0
    2cd8:	|         move.l d0,-(sp)
    2cda:	|         jsr 274c <CstSetCl>
    2ce0:	|         addq.l #4,sp
  return TRUE;
    2ce2:	|         moveq #1,d0

}
    2ce4:	\-------> movea.l (sp)+,a6
    2ce6:	          lea 80(sp),sp
    2cea:	          rts

00002cec <CstFreeBuffer>:

void CstFreeBuffer( ) {
    2cec:	    lea -16(sp),sp
    2cf0:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    2cf2:	    move.l 1ae2e <CstDrawBuffer>,d0
    2cf8:	/-- beq.s 2d12 <CstFreeBuffer+0x26>
    2cfa:	|   move.l 1ae2e <CstDrawBuffer>,16(sp)
    2d02:	|   move.l 1af02 <SysBase>,d0
    2d08:	|   movea.l d0,a6
    2d0a:	|   movea.l 16(sp),a1
    2d0e:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    2d12:	\-> move.l 1ae2a <CstViewBuffer>,d0
    2d18:	/-- beq.s 2d32 <CstFreeBuffer+0x46>
    2d1a:	|   move.l 1ae2a <CstViewBuffer>,12(sp)
    2d22:	|   move.l 1af02 <SysBase>,d0
    2d28:	|   movea.l d0,a6
    2d2a:	|   movea.l 12(sp),a1
    2d2e:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    2d32:	\-> move.l 1ae24 <CstCopperList>,d0
    2d38:	/-- beq.s 2d52 <CstFreeBuffer+0x66>
    2d3a:	|   move.l 1ae24 <CstCopperList>,8(sp)
    2d42:	|   move.l 1af02 <SysBase>,d0
    2d48:	|   movea.l d0,a6
    2d4a:	|   movea.l 8(sp),a1
    2d4e:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    2d52:	\-> move.l 1ae20 <CstBackDrop>,d0
    2d58:	/-- beq.s 2d72 <CstFreeBuffer+0x86>
    2d5a:	|   move.l 1ae20 <CstBackDrop>,4(sp)
    2d62:	|   move.l 1af02 <SysBase>,d0
    2d68:	|   movea.l d0,a6
    2d6a:	|   movea.l 4(sp),a1
    2d6e:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    2d72:	\-> clr.l 1ae2e <CstDrawBuffer>
  CstViewBuffer = NULL;
    2d78:	    clr.l 1ae2a <CstViewBuffer>
  CstCopperList = NULL;
    2d7e:	    clr.l 1ae24 <CstCopperList>
  CstBackDrop = NULL;
    2d84:	    clr.l 1ae20 <CstBackDrop>

}
    2d8a:	    nop
    2d8c:	    movea.l (sp)+,a6
    2d8e:	    lea 16(sp),sp
    2d92:	    rts

00002d94 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    2d94:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    2d98:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    2d9c:	       tst.l 24(sp)
    2da0:	   /-- bge.s 2da6 <drawLine+0x12>
    2da2:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    2da6:	   \-> tst.l 28(sp)
    2daa:	   /-- bge.s 2db0 <drawLine+0x1c>
    2dac:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    2db0:	   \-> tst.l 32(sp)
    2db4:	   /-- bge.s 2dba <drawLine+0x26>
    2db6:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    2dba:	   \-> tst.l 36(sp)
    2dbe:	   /-- bge.s 2dc4 <drawLine+0x30>
    2dc0:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    2dc4:	   \-> move.l 1aff6 <sceneWidth>,d0
    2dca:	       cmp.l 24(sp),d0
    2dce:	   /-- bge.s 2dde <drawLine+0x4a>
    2dd0:	   |   move.l 1aff6 <sceneWidth>,d0
    2dd6:	   |   move.l d0,d1
    2dd8:	   |   subq.l #1,d1
    2dda:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    2dde:	   \-> move.l 1aff6 <sceneWidth>,d0
    2de4:	       cmp.l 32(sp),d0
    2de8:	   /-- bge.s 2df8 <drawLine+0x64>
    2dea:	   |   move.l 1aff6 <sceneWidth>,d0
    2df0:	   |   move.l d0,d1
    2df2:	   |   subq.l #1,d1
    2df4:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    2df8:	   \-> move.l 1affa <sceneHeight>,d0
    2dfe:	       cmp.l 28(sp),d0
    2e02:	   /-- bge.s 2e12 <drawLine+0x7e>
    2e04:	   |   move.l 1affa <sceneHeight>,d0
    2e0a:	   |   move.l d0,d1
    2e0c:	   |   subq.l #1,d1
    2e0e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    2e12:	   \-> move.l 1affa <sceneHeight>,d0
    2e18:	       cmp.l 36(sp),d0
    2e1c:	   /-- bge.s 2e2c <drawLine+0x98>
    2e1e:	   |   move.l 1affa <sceneHeight>,d0
    2e24:	   |   move.l d0,d1
    2e26:	   |   subq.l #1,d1
    2e28:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    2e2c:	   \-> move.l 24(sp),d0
    2e30:	       cmp.l 32(sp),d0
    2e34:	/----- ble.s 2e50 <drawLine+0xbc>
		x = x2; 
    2e36:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    2e3c:	|      tst.w 10(sp)
    2e40:	|      seq d0
    2e42:	|      neg.b d0
    2e44:	|      move.b d0,d0
    2e46:	|      andi.w #255,d0
    2e4a:	|      move.w d0,10(sp)
    2e4e:	|  /-- bra.s 2e56 <drawLine+0xc2>
	} else x = x1;
    2e50:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    2e56:	   \-> move.l 28(sp),d1
    2e5a:	       cmp.l 36(sp),d1
    2e5e:	/----- ble.s 2e7a <drawLine+0xe6>
		y = y2; 
    2e60:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    2e66:	|      tst.w 10(sp)
    2e6a:	|      seq d0
    2e6c:	|      neg.b d0
    2e6e:	|      move.b d0,d0
    2e70:	|      andi.w #255,d0
    2e74:	|      move.w d0,10(sp)
    2e78:	|  /-- bra.s 2e80 <drawLine+0xec>
	} else y = y1;	
    2e7a:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    2e80:	   \-> move.l 32(sp),d0
    2e84:	       sub.l 24(sp),d0
    2e88:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    2e8c:	       move.l 6(sp),d0
    2e90:	   /-- bpl.s 2e94 <drawLine+0x100>
    2e92:	   |   neg.l d0
    2e94:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    2e98:	       move.l 36(sp),d1
    2e9c:	       sub.l 28(sp),d1
    2ea0:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    2ea4:	       move.l 2(sp),d0
    2ea8:	   /-- bpl.s 2eac <drawLine+0x118>
    2eaa:	   |   neg.l d0
    2eac:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    2eb0:	       tst.l 6(sp)
    2eb4:	   /-- bne.s 2ed8 <drawLine+0x144>
		diffX = 1;
    2eb6:	   |   moveq #1,d0
    2eb8:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    2ebc:	   |   move.l 1aff6 <sceneWidth>,d0
    2ec2:	   |   subq.l #1,d0
    2ec4:	   |   cmp.l 16(sp),d0
    2ec8:	   +-- bne.s 2ed8 <drawLine+0x144>
    2eca:	   |   move.l 1aff6 <sceneWidth>,d0
    2ed0:	   |   move.l d0,d1
    2ed2:	   |   subq.l #2,d1
    2ed4:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    2ed8:	   \-> tst.l 2(sp)
    2edc:	   /-- bne.s 2f00 <drawLine+0x16c>
		diffY = 1;
    2ede:	   |   moveq #1,d0
    2ee0:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    2ee4:	   |   move.l 1affa <sceneHeight>,d0
    2eea:	   |   subq.l #1,d0
    2eec:	   |   cmp.l 12(sp),d0
    2ef0:	   +-- bne.s 2f00 <drawLine+0x16c>
    2ef2:	   |   move.l 1affa <sceneHeight>,d0
    2ef8:	   |   move.l d0,d1
    2efa:	   |   subq.l #2,d1
    2efc:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    2f00:	   \-> pea 168e6 <PutChar+0x618>
    2f06:	       jsr 157fa <KPrintF>
    2f0c:	       addq.l #4,sp
	
}
    2f0e:	       nop
    2f10:	       lea 20(sp),sp
    2f14:	       rts

00002f16 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    2f16:	                      lea -24(sp),sp
    2f1a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    2f1c:	                      move.l 1ae5e <firstTexture>,d0
    2f22:	/-------------------- beq.w 3000 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    2f26:	|                     clr.l 24(sp)
    2f2a:	|     /-------------- bra.w 2ff4 <deleteTextures+0xde>
			BOOL found = FALSE;
    2f2e:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    2f32:	|  |  |               move.l 1ae5e <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    2f3a:	|  |  |               movea.l 20(sp),a0
    2f3e:	|  |  |               move.l (a0),d1
    2f40:	|  |  |               move.l 24(sp),d0
    2f44:	|  |  |               add.l d0,d0
    2f46:	|  |  |               add.l d0,d0
    2f48:	|  |  |               movea.l 36(sp),a0
    2f4c:	|  |  |               adda.l d0,a0
    2f4e:	|  |  |               move.l (a0),d0
    2f50:	|  |  |               cmp.l d1,d0
    2f52:	|  |  |  /----------- bne.w 2fe6 <deleteTextures+0xd0>
				found = TRUE;
    2f56:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    2f5c:	|  |  |  |            movea.l 20(sp),a0
    2f60:	|  |  |  |            move.l 12(a0),d0
    2f64:	|  |  |  |            move.l d0,1ae5e <firstTexture>
				FreeVec(list);
    2f6a:	|  |  |  |            move.l 20(sp),6(sp)
    2f70:	|  |  |  |            move.l 1af02 <SysBase>,d0
    2f76:	|  |  |  |            movea.l d0,a6
    2f78:	|  |  |  |            movea.l 6(sp),a1
    2f7c:	|  |  |  |            jsr -690(a6)
				continue;
    2f80:	|  |  |  |  /-------- bra.s 2ff0 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    2f82:	|  |  |  |  |  /----> movea.l 20(sp),a0
    2f86:	|  |  |  |  |  |      movea.l 12(a0),a0
    2f8a:	|  |  |  |  |  |      move.l (a0),d1
    2f8c:	|  |  |  |  |  |      move.l 24(sp),d0
    2f90:	|  |  |  |  |  |      add.l d0,d0
    2f92:	|  |  |  |  |  |      add.l d0,d0
    2f94:	|  |  |  |  |  |      movea.l 36(sp),a0
    2f98:	|  |  |  |  |  |      adda.l d0,a0
    2f9a:	|  |  |  |  |  |      move.l (a0),d0
    2f9c:	|  |  |  |  |  |      cmp.l d1,d0
    2f9e:	|  |  |  |  |  |  /-- bne.s 2fdc <deleteTextures+0xc6>
					found = TRUE;
    2fa0:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    2fa6:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2faa:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    2fb0:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2fb4:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    2fb8:	|  |  |  |  |  |  |   move.l 12(a0),d0
    2fbc:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2fc0:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    2fc4:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    2fca:	|  |  |  |  |  |  |   move.l 1af02 <SysBase>,d0
    2fd0:	|  |  |  |  |  |  |   movea.l d0,a6
    2fd2:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    2fd6:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    2fda:	|  |  |  |  +--|--|-- bra.s 2ff0 <deleteTextures+0xda>
				}
				list = list->next;
    2fdc:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    2fe0:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    2fe6:	|  |  |  \--|--|----> movea.l 20(sp),a0
    2fea:	|  |  |     |  |      move.l 12(a0),d0
    2fee:	|  |  |     |  \----- bne.s 2f82 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    2ff0:	|  |  |     \-------> addq.l #1,24(sp)
    2ff4:	|  |  \-------------> move.l 24(sp),d0
    2ff8:	|  |                  cmp.l 32(sp),d0
    2ffc:	|  \----------------- bcs.w 2f2e <deleteTextures+0x18>
			}
		}
	}
}
    3000:	\-------------------> nop
    3002:	                      movea.l (sp)+,a6
    3004:	                      lea 24(sp),sp
    3008:	                      rts

0000300a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    300a:	subq.l #4,sp
    300c:	move.l 8(sp),d0
    3010:	move.w d0,d0
    3012:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    3016:	pea 16909 <PutChar+0x63b>
    301c:	jsr 157fa <KPrintF>
    3022:	addq.l #4,sp
}
    3024:	nop
    3026:	addq.l #4,sp
    3028:	rts

0000302a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    302a:	       moveq #-1,d0
    302c:	       cmp.l 4(sp),d0
    3030:	   /-- bne.s 3036 <resourceNameFromNum+0xc>
    3032:	   |   moveq #0,d0
    3034:	/--|-- bra.s 306e <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    3036:	|  \-> move.l 1aede <numResourceNames>,d0
    303c:	|  /-- bne.s 3046 <resourceNameFromNum+0x1c>
    303e:	|  |   move.l #92473,d0
    3044:	+--|-- bra.s 306e <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    3046:	|  \-> move.l 1aede <numResourceNames>,d0
    304c:	|      cmp.l 4(sp),d0
    3050:	|  /-- ble.s 3068 <resourceNameFromNum+0x3e>
    3052:	|  |   move.l 1ae96 <allResourceNames>,d1
    3058:	|  |   move.l 4(sp),d0
    305c:	|  |   add.l d0,d0
    305e:	|  |   add.l d0,d0
    3060:	|  |   movea.l d1,a0
    3062:	|  |   adda.l d0,a0
    3064:	|  |   move.l (a0),d0
    3066:	+--|-- bra.s 306e <resourceNameFromNum+0x44>
	return "Unknown resource";
    3068:	|  \-> move.l #92482,d0
    306e:	\----> rts

00003070 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    3070:	          lea -44(sp),sp
    3074:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    3078:	          move.l #320,1ae56 <winWidth>
    winHeight = 256;
    3082:	          move.l #256,1ae5a <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    308c:	          tst.l 60(sp)
    3090:	      /-- bne.s 30a8 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    3092:	      |   pea 16953 <PutChar+0x685>
    3098:	      |   jsr b8 <copyString>
    309e:	      |   addq.l #4,sp
    30a0:	      |   move.l d0,1ae6e <bundleFolder>
    30a6:	   /--|-- bra.s 30be <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    30a8:	   |  \-> movea.l 64(sp),a0
    30ac:	   |      move.l (a0),d0
    30ae:	   |      move.l d0,-(sp)
    30b0:	   |      jsr b8 <copyString>
    30b6:	   |      addq.l #4,sp
    30b8:	   |      move.l d0,1ae6e <bundleFolder>
	}
    
	int lastSlash = -1;
    30be:	   \----> moveq #-1,d0
    30c0:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    30c4:	          clr.l 44(sp)
    30c8:	   /----- bra.s 30ea <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    30ca:	/--|----> move.l 1ae6e <bundleFolder>,d1
    30d0:	|  |      move.l 44(sp),d0
    30d4:	|  |      movea.l d1,a0
    30d6:	|  |      adda.l d0,a0
    30d8:	|  |      move.b (a0),d0
    30da:	|  |      cmpi.b #47,d0
    30de:	|  |  /-- bne.s 30e6 <main_sludge+0x76>
    30e0:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    30e6:	|  |  \-> addq.l #1,44(sp)
    30ea:	|  \----> move.l 1ae6e <bundleFolder>,d1
    30f0:	|         move.l 44(sp),d0
    30f4:	|         movea.l d1,a0
    30f6:	|         adda.l d0,a0
    30f8:	|         move.b (a0),d0
    30fa:	\-------- bne.s 30ca <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    30fc:	          move.l 1ae6e <bundleFolder>,d0
    3102:	          move.l 48(sp),d1
    3106:	          addq.l #1,d1
    3108:	          movea.l d0,a0
    310a:	          adda.l d1,a0
    310c:	          clr.b (a0)

	if (argc > 1) {
    310e:	          moveq #1,d0
    3110:	          cmp.l 60(sp),d0
    3114:	      /-- bge.s 3130 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    3116:	      |   move.l 60(sp),d0
    311a:	      |   addi.l #1073741823,d0
    3120:	      |   add.l d0,d0
    3122:	      |   add.l d0,d0
    3124:	      |   movea.l 64(sp),a0
    3128:	      |   adda.l d0,a0
    312a:	      |   move.l (a0),52(sp)
    312e:	   /--|-- bra.s 318a <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    3130:	   |  \-> move.l 1ae6e <bundleFolder>,d0
    3136:	   |      pea 16959 <PutChar+0x68b>
    313c:	   |      move.l d0,-(sp)
    313e:	   |      jsr 12b5a <joinStrings>
    3144:	   |      addq.l #8,sp
    3146:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    314a:	   |      move.l 52(sp),-(sp)
    314e:	   |      jsr 12a54 <fileExists>
    3154:	   |      addq.l #4,sp
    3156:	   |      tst.b d0
    3158:	   +----- bne.s 318a <main_sludge+0x11a>
			FreeVec(sludgeFile);
    315a:	   |      move.l 52(sp),40(sp)
    3160:	   |      move.l 1af02 <SysBase>,d0
    3166:	   |      movea.l d0,a6
    3168:	   |      movea.l 40(sp),a1
    316c:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    3170:	   |      move.l 1ae6e <bundleFolder>,d0
    3176:	   |      pea 16966 <PutChar+0x698>
    317c:	   |      move.l d0,-(sp)
    317e:	   |      jsr 12b5a <joinStrings>
    3184:	   |      addq.l #8,sp
    3186:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    318a:	   \----> pea 1696f <PutChar+0x6a1>
    3190:	          jsr 157fa <KPrintF>
    3196:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    3198:	          move.l 52(sp),-(sp)
    319c:	          jsr 12a54 <fileExists>
    31a2:	          addq.l #4,sp
    31a4:	          tst.b d0
    31a6:	      /-- bne.s 31fe <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    31a8:	      |   move.l 1af0a <DOSBase>,d0
    31ae:	      |   movea.l d0,a6
    31b0:	      |   jsr -60(a6)
    31b4:	      |   move.l d0,28(sp)
    31b8:	      |   move.l 28(sp),d0
    31bc:	      |   move.l d0,24(sp)
    31c0:	      |   move.l #92527,20(sp)
    31c8:	      |   moveq #21,d0
    31ca:	      |   move.l d0,16(sp)
    31ce:	      |   move.l 1af0a <DOSBase>,d0
    31d4:	      |   movea.l d0,a6
    31d6:	      |   move.l 24(sp),d1
    31da:	      |   move.l 20(sp),d2
    31de:	      |   move.l 16(sp),d3
    31e2:	      |   jsr -48(a6)
    31e6:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    31ea:	      |   pea 1696f <PutChar+0x6a1>
    31f0:	      |   jsr 157fa <KPrintF>
    31f6:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    31f8:	      |   moveq #0,d0
    31fa:	/-----|-- bra.w 33f6 <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    31fe:	|     \-> pea 16985 <PutChar+0x6b7>
    3204:	|         jsr 157fa <KPrintF>
    320a:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    320c:	|         move.l 52(sp),-(sp)
    3210:	|         jsr 3400 <setGameFilePath>
    3216:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    3218:	|         move.l 52(sp),-(sp)
    321c:	|         jsr 4992 <initSludge>
    3222:	|         addq.l #4,sp
    3224:	|         tst.w d0
    3226:	|     /-- bne.s 322e <main_sludge+0x1be>
    3228:	|     |   moveq #0,d0
    322a:	+-----|-- bra.w 33f6 <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    322e:	|     \-> move.l 1ae56 <winWidth>,d0
    3234:	|         cmpi.l #320,d0
    323a:	|     /-- bne.s 324a <main_sludge+0x1da>
    323c:	|     |   move.l 1ae5a <winHeight>,d0
    3242:	|     |   cmpi.l #256,d0
    3248:	|  /--|-- beq.s 326c <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    324a:	|  |  \-> pea 16996 <PutChar+0x6c8>
    3250:	|  |      jsr 157fa <KPrintF>
    3256:	|  |      addq.l #4,sp
		winWidth = 320;
    3258:	|  |      move.l #320,1ae56 <winWidth>
		winHeight = 256;
    3262:	|  |      move.l #256,1ae5a <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    326c:	|  \----> pea 16a13 <PutChar+0x745>
    3272:	|         jsr 157fa <KPrintF>
    3278:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    327a:	|         move.l 1ae5a <winHeight>,d0
    3280:	|         move.l d0,d1
    3282:	|         move.l 1ae56 <winWidth>,d0
    3288:	|         move.l d1,-(sp)
    328a:	|         move.l d0,-(sp)
    328c:	|         jsr c342 <resizeBackdrop>
    3292:	|         addq.l #8,sp
    3294:	|         tst.w d0
    3296:	|     /-- bne.s 32ac <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    3298:	|     |   pea 16a26 <PutChar+0x758>
    329e:	|     |   jsr 157fa <KPrintF>
    32a4:	|     |   addq.l #4,sp
		return FALSE;
    32a6:	|     |   moveq #0,d0
    32a8:	+-----|-- bra.w 33f6 <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    32ac:	|     \-> pea 16a4c <PutChar+0x77e>
    32b2:	|         jsr 157fa <KPrintF>
    32b8:	|         addq.l #4,sp
	if (! initPeople ())
    32ba:	|         jsr 98d6 <initPeople>
    32c0:	|         tst.w d0
    32c2:	|     /-- bne.s 32d8 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    32c4:	|     |   pea 16a59 <PutChar+0x78b>
    32ca:	|     |   jsr 157fa <KPrintF>
    32d0:	|     |   addq.l #4,sp
		return FALSE;
    32d2:	|     |   moveq #0,d0
    32d4:	+-----|-- bra.w 33f6 <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    32d8:	|     \-> pea 16a7a <PutChar+0x7ac>
    32de:	|         jsr 157fa <KPrintF>
    32e4:	|         addq.l #4,sp
	if (! initFloor ())
    32e6:	|         jsr 14bb0 <initFloor>
    32ec:	|         tst.w d0
    32ee:	|     /-- bne.s 3304 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    32f0:	|     |   pea 16a86 <PutChar+0x7b8>
    32f6:	|     |   jsr 157fa <KPrintF>
    32fc:	|     |   addq.l #4,sp
		
		return FALSE;
    32fe:	|     |   moveq #0,d0
    3300:	+-----|-- bra.w 33f6 <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    3304:	|     \-> pea 16aa6 <PutChar+0x7d8>
    330a:	|         jsr 157fa <KPrintF>
    3310:	|         addq.l #4,sp
	if (! initObjectTypes ())
    3312:	|         jsr c4fe <initObjectTypes>
    3318:	|         tst.w d0
    331a:	|     /-- bne.s 3330 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    331c:	|     |   pea 16ab7 <PutChar+0x7e9>
    3322:	|     |   jsr 157fa <KPrintF>
    3328:	|     |   addq.l #4,sp
		return FALSE;
    332a:	|     |   moveq #0,d0
    332c:	+-----|-- bra.w 33f6 <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    3330:	|     \-> pea 16add <PutChar+0x80f>
    3336:	|         jsr 157fa <KPrintF>
    333c:	|         addq.l #4,sp
	initSpeech ();
    333e:	|         jsr 6d74 <initSpeech>
	KPrintF("Init status bar\n");
    3344:	|         pea 16aea <PutChar+0x81c>
    334a:	|         jsr 157fa <KPrintF>
    3350:	|         addq.l #4,sp
	initStatusBar ();
    3352:	|         jsr 6838 <initStatusBar>

	KPrintF("Get numbered string\n");
    3358:	|         pea 16afb <PutChar+0x82d>
    335e:	|         jsr 157fa <KPrintF>
    3364:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    3366:	|         pea 1 <_start+0x1>
    336a:	|         jsr 5b56 <getNumberedString>
    3370:	|         addq.l #4,sp
    3372:	|         move.l d0,1ae66 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    3378:	|         pea 16b10 <PutChar+0x842>
    337e:	|         jsr 157fa <KPrintF>
    3384:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    3386:	|         move.l 1aed2 <noStack>,d0
    338c:	|         pea 1 <_start+0x1>
    3390:	|         move.l d0,-(sp)
    3392:	|         clr.l -(sp)
    3394:	|         clr.l -(sp)
    3396:	|         clr.l -(sp)
    3398:	|         jsr 59de <startNewFunctionNum>
    339e:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    33a2:	|         pea 16b28 <PutChar+0x85a>
    33a8:	|         jsr 157fa <KPrintF>
    33ae:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    33b0:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    33b8:	|         clr.l 1ae72 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    33be:	|     /-- bra.s 33d8 <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    33c0:	|  /--|-> jsr 596e <sludgeDisplay>
		CsiCheckInput();
    33c6:	|  |  |   jsr be72 <CsiCheckInput>
		handleInput();
    33cc:	|  |  |   jsr 472c <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    33d2:	|  |  |   jsr 1572e <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    33d8:	|  |  \-> move.l 1ae72 <weAreDoneSoQuit>,d0
    33de:	|  \----- beq.s 33c0 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    33e0:	|         move.l 52(sp),32(sp)
    33e6:	|         move.l 1af02 <SysBase>,d0
    33ec:	|         movea.l d0,a6
    33ee:	|         movea.l 32(sp),a1
    33f2:	|         jsr -690(a6)
}
    33f6:	\-------> movem.l (sp)+,d2-d3/a6
    33fa:	          lea 44(sp),sp
    33fe:	          rts

00003400 <setGameFilePath>:

void setGameFilePath (char * f) {
    3400:	          lea -1104(sp),sp
    3404:	          move.l a6,-(sp)
    3406:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    3408:	          move.l #1112,d0
    340e:	          add.l sp,d0
    3410:	          addi.l #-1102,d0
    3416:	          move.l d0,1100(sp)
    341a:	          move.l #998,1096(sp)
    3422:	          move.l 1af0a <DOSBase>,d0
    3428:	          movea.l d0,a6
    342a:	          move.l 1100(sp),d1
    342e:	          move.l 1096(sp),d2
    3432:	          jsr -564(a6)
    3436:	          move.w d0,1094(sp)
    343a:	          move.w 1094(sp),d0
    343e:	      /-- bne.s 344e <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    3440:	      |   pea 16b3b <PutChar+0x86d>
    3446:	      |   jsr 157fa <KPrintF>
    344c:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    344e:	      \-> moveq #-1,d0
    3450:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    3454:	          clr.l 1104(sp)
    3458:	   /----- bra.s 3476 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    345a:	/--|----> move.l 1104(sp),d0
    345e:	|  |      movea.l 1116(sp),a0
    3462:	|  |      adda.l d0,a0
    3464:	|  |      move.b (a0),d0
    3466:	|  |      cmpi.b #47,d0
    346a:	|  |  /-- bne.s 3472 <setGameFilePath+0x72>
    346c:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    3472:	|  |  \-> addq.l #1,1104(sp)
    3476:	|  \----> move.l 1104(sp),d0
    347a:	|         movea.l 1116(sp),a0
    347e:	|         adda.l d0,a0
    3480:	|         move.b (a0),d0
    3482:	\-------- bne.s 345a <setGameFilePath+0x5a>
	}

	if (got != -1) {
    3484:	          moveq #-1,d0
    3486:	          cmp.l 1108(sp),d0
    348a:	   /----- beq.s 3504 <setGameFilePath+0x104>
		f[got] = 0;	
    348c:	   |      move.l 1108(sp),d0
    3490:	   |      movea.l 1116(sp),a0
    3494:	   |      adda.l d0,a0
    3496:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    3498:	   |      move.l 1116(sp),1090(sp)
    349e:	   |      moveq #-2,d0
    34a0:	   |      move.l d0,1086(sp)
    34a4:	   |      move.l 1af0a <DOSBase>,d0
    34aa:	   |      movea.l d0,a6
    34ac:	   |      move.l 1090(sp),d1
    34b0:	   |      move.l 1086(sp),d2
    34b4:	   |      jsr -84(a6)
    34b8:	   |      move.l d0,1082(sp)
    34bc:	   |      move.l 1082(sp),d0
    34c0:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    34c4:	   |      move.l 1078(sp),1074(sp)
    34ca:	   |      move.l 1af0a <DOSBase>,d0
    34d0:	   |      movea.l d0,a6
    34d2:	   |      move.l 1074(sp),d1
    34d6:	   |      jsr -126(a6)
    34da:	   |      move.l d0,1070(sp)
    34de:	   |      move.l 1070(sp),d0
    34e2:	   |  /-- bne.s 34f6 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    34e4:	   |  |   move.l 1116(sp),-(sp)
    34e8:	   |  |   pea 16b61 <PutChar+0x893>
    34ee:	   |  |   jsr 157fa <KPrintF>
    34f4:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    34f6:	   |  \-> move.l 1108(sp),d0
    34fa:	   |      movea.l 1116(sp),a0
    34fe:	   |      adda.l d0,a0
    3500:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    3504:	   \----> move.l #400,1066(sp)
    350c:	          clr.l 1062(sp)
    3510:	          move.l 1af02 <SysBase>,d0
    3516:	          movea.l d0,a6
    3518:	          move.l 1066(sp),d0
    351c:	          move.l 1062(sp),d1
    3520:	          jsr -684(a6)
    3524:	          move.l d0,1058(sp)
    3528:	          move.l 1058(sp),d0
    352c:	          move.l d0,1ae6a <gamePath>
	if (gamePath==0) {
    3532:	          move.l 1ae6a <gamePath>,d0
    3538:	      /-- bne.s 354c <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    353a:	      |   pea 16b94 <PutChar+0x8c6>
    3540:	      |   jsr 157fa <KPrintF>
    3546:	      |   addq.l #4,sp
    3548:	   /--|-- bra.w 3634 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    354c:	   |  \-> move.l 1ae6a <gamePath>,1054(sp)
    3554:	   |      moveq #-2,d0
    3556:	   |      move.l d0,1050(sp)
    355a:	   |      move.l 1af0a <DOSBase>,d0
    3560:	   |      movea.l d0,a6
    3562:	   |      move.l 1054(sp),d1
    3566:	   |      move.l 1050(sp),d2
    356a:	   |      jsr -84(a6)
    356e:	   |      move.l d0,1046(sp)
    3572:	   |      move.l 1046(sp),d0
    3576:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    357a:	   |      move.l 1042(sp),1038(sp)
    3580:	   |      move.l 1af0a <DOSBase>,d0
    3586:	   |      movea.l d0,a6
    3588:	   |      move.l 1038(sp),d1
    358c:	   |      jsr -126(a6)
    3590:	   |      move.l d0,1034(sp)
    3594:	   |      move.l 1034(sp),d0
    3598:	   |  /-- bne.s 35a8 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    359a:	   |  |   pea 16bcf <PutChar+0x901>
    35a0:	   |  |   jsr 157fa <KPrintF>
    35a6:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    35a8:	   |  \-> move.l #1112,d0
    35ae:	   |      add.l sp,d0
    35b0:	   |      addi.l #-1102,d0
    35b6:	   |      move.l d0,1030(sp)
    35ba:	   |      moveq #-2,d0
    35bc:	   |      move.l d0,1026(sp)
    35c0:	   |      move.l 1af0a <DOSBase>,d0
    35c6:	   |      movea.l d0,a6
    35c8:	   |      move.l 1030(sp),d1
    35cc:	   |      move.l 1026(sp),d2
    35d0:	   |      jsr -84(a6)
    35d4:	   |      move.l d0,1022(sp)
    35d8:	   |      move.l 1022(sp),d0
    35dc:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    35e0:	   |      move.l 1042(sp),1018(sp)
    35e6:	   |      move.l 1af0a <DOSBase>,d0
    35ec:	   |      movea.l d0,a6
    35ee:	   |      move.l 1018(sp),d1
    35f2:	   |      jsr -126(a6)
    35f6:	   |      move.l d0,1014(sp)
    35fa:	   |      move.l 1014(sp),d0
    35fe:	   |  /-- bne.s 3614 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    3600:	   |  |   moveq #10,d0
    3602:	   |  |   add.l sp,d0
    3604:	   |  |   move.l d0,-(sp)
    3606:	   |  |   pea 16bfb <PutChar+0x92d>
    360c:	   |  |   jsr 157fa <KPrintF>
    3612:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    3614:	   |  \-> move.l 1ae6a <gamePath>,d0
    361a:	   +----- beq.s 3634 <setGameFilePath+0x234>
    361c:	   |      move.l 1ae6a <gamePath>,1010(sp)
    3624:	   |      move.l 1af02 <SysBase>,d0
    362a:	   |      movea.l d0,a6
    362c:	   |      movea.l 1010(sp),a1
    3630:	   |      jsr -690(a6)
}
    3634:	   \----> move.l (sp)+,d2
    3636:	          movea.l (sp)+,a6
    3638:	          lea 1104(sp),sp
    363c:	          rts

0000363e <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    363e:	/-------> lea -16(sp),sp
    3642:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    3644:	|         move.l 24(sp),-(sp)
    3648:	|         jsr 5750 <pauseFunction>
    364e:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    3650:	|     /-- bra.s 3662 <abortFunction+0x24>
    3652:	|  /--|-> moveq #24,d0
    3654:	|  |  |   add.l 24(sp),d0
    3658:	|  |  |   move.l d0,-(sp)
    365a:	|  |  |   jsr 13fb2 <trimStack>
    3660:	|  |  |   addq.l #4,sp
    3662:	|  |  \-> movea.l 24(sp),a0
    3666:	|  |      move.l 24(a0),d0
    366a:	|  \----- bne.s 3652 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    366c:	|         movea.l 24(sp),a0
    3670:	|         move.l 4(a0),12(sp)
    3676:	|         move.l 1af02 <SysBase>,d0
    367c:	|         movea.l d0,a6
    367e:	|         movea.l 12(sp),a1
    3682:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    3686:	|         clr.l 16(sp)
    368a:	|     /-- bra.s 36aa <abortFunction+0x6c>
    368c:	|  /--|-> movea.l 24(sp),a0
    3690:	|  |  |   move.l 20(a0),d1
    3694:	|  |  |   move.l 16(sp),d0
    3698:	|  |  |   lsl.l #3,d0
    369a:	|  |  |   add.l d1,d0
    369c:	|  |  |   move.l d0,-(sp)
    369e:	|  |  |   jsr 1387c <unlinkVar>
    36a4:	|  |  |   addq.l #4,sp
    36a6:	|  |  |   addq.l #1,16(sp)
    36aa:	|  |  \-> movea.l 24(sp),a0
    36ae:	|  |      move.l 8(a0),d0
    36b2:	|  |      cmp.l 16(sp),d0
    36b6:	|  \----- bgt.s 368c <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    36b8:	|         movea.l 24(sp),a0
    36bc:	|         move.l 20(a0),8(sp)
    36c2:	|         move.l 1af02 <SysBase>,d0
    36c8:	|         movea.l d0,a6
    36ca:	|         movea.l 8(sp),a1
    36ce:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    36d2:	|         moveq #28,d0
    36d4:	|         add.l 24(sp),d0
    36d8:	|         move.l d0,-(sp)
    36da:	|         jsr 1387c <unlinkVar>
    36e0:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    36e2:	|         movea.l 24(sp),a0
    36e6:	|         move.l 40(a0),d0
    36ea:	|     /-- beq.s 36fc <abortFunction+0xbe>
    36ec:	|     |   movea.l 24(sp),a0
    36f0:	|     |   move.l 40(a0),d0
    36f4:	|     |   move.l d0,-(sp)
    36f6:	\-----|-- jsr 363e <abortFunction>(pc)
    36fa:	      |   addq.l #4,sp
	FreeVec(fun);
    36fc:	      \-> move.l 24(sp),4(sp)
    3702:	          move.l 1af02 <SysBase>,d0
    3708:	          movea.l d0,a6
    370a:	          movea.l 4(sp),a1
    370e:	          jsr -690(a6)
	fun = NULL;
    3712:	          clr.l 24(sp)
}
    3716:	          nop
    3718:	          movea.l (sp)+,a6
    371a:	          lea 16(sp),sp
    371e:	          rts

00003720 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    3720:	          subq.l #8,sp
	int n = 0;
    3722:	          clr.l 4(sp)
	*killedMyself = FALSE;
    3726:	          movea.l 20(sp),a0
    372a:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    372c:	          move.l 1ae9a <allRunningFunctions>,(sp)
	while (fun) {
    3732:	   /----- bra.s 3760 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    3734:	/--|----> movea.l (sp),a0
    3736:	|  |      move.l (a0),d0
    3738:	|  |      cmp.l 12(sp),d0
    373c:	|  |  /-- bne.s 375a <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    373e:	|  |  |   movea.l (sp),a0
    3740:	|  |  |   move.w #1,54(a0)
			n++;
    3746:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    374a:	|  |  |   move.l (sp),d0
    374c:	|  |  |   cmp.l 16(sp),d0
    3750:	|  |  +-- bne.s 375a <cancelAFunction+0x3a>
    3752:	|  |  |   movea.l 20(sp),a0
    3756:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    375a:	|  |  \-> movea.l (sp),a0
    375c:	|  |      move.l 44(a0),(sp)
	while (fun) {
    3760:	|  \----> tst.l (sp)
    3762:	\-------- bne.s 3734 <cancelAFunction+0x14>
	}
	return n;
    3764:	          move.l 4(sp),d0
}
    3768:	          addq.l #8,sp
    376a:	          rts

0000376c <completeTimers>:


void completeTimers () {
    376c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    376e:	          move.l 1ae9a <allRunningFunctions>,(sp)

	while (thisFunction) {
    3774:	   /----- bra.s 378a <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    3776:	/--|----> movea.l (sp),a0
    3778:	|  |      move.b 56(a0),d0
    377c:	|  |  /-- bne.s 3784 <completeTimers+0x18>
    377e:	|  |  |   movea.l (sp),a0
    3780:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    3784:	|  |  \-> movea.l (sp),a0
    3786:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    378a:	|  \----> tst.l (sp)
    378c:	\-------- bne.s 3776 <completeTimers+0xa>
	}
}
    378e:	          nop
    3790:	          nop
    3792:	          addq.l #4,sp
    3794:	          rts

00003796 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    3796:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    379a:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    37a0:	                                                             movea.l 80(sp),a0
    37a4:	                                                             move.w 54(a0),d0
    37a8:	/----------------------------------------------------------- beq.w 4648 <continueFunction+0xeb2>
		abortFunction (fun);
    37ac:	|                                                            move.l 80(sp),-(sp)
    37b0:	|                                                            jsr 363e <abortFunction>
    37b6:	|                                                            addq.l #4,sp
		return TRUE;
    37b8:	|                                                            moveq #1,d0
    37ba:	|  /-------------------------------------------------------- bra.w 4652 <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    37be:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    37c4:	|  |  |                                                      movea.l 80(sp),a0
    37c8:	|  |  |                                                      move.l 4(a0),d1
    37cc:	|  |  |                                                      movea.l 80(sp),a0
    37d0:	|  |  |                                                      move.l 36(a0),d0
    37d4:	|  |  |                                                      lsl.l #3,d0
    37d6:	|  |  |                                                      movea.l d1,a0
    37d8:	|  |  |                                                      adda.l d0,a0
    37da:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    37e0:	|  |  |                                                      movea.l 80(sp),a0
    37e4:	|  |  |                                                      move.l 4(a0),d1
    37e8:	|  |  |                                                      movea.l 80(sp),a0
    37ec:	|  |  |                                                      move.l 36(a0),d0
    37f0:	|  |  |                                                      lsl.l #3,d0
    37f2:	|  |  |                                                      movea.l d1,a0
    37f4:	|  |  |                                                      adda.l d0,a0
    37f6:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    37fa:	|  |  |                                                      move.l 64(sp),-(sp)
    37fe:	|  |  |                                                      pea 16d03 <PutChar+0xa35>
    3804:	|  |  |                                                      jsr 157fa <KPrintF>
    380a:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    380c:	|  |  |                                                      moveq #41,d0
    380e:	|  |  |                                                      cmp.l 64(sp),d0
    3812:	|  |  |  /-------------------------------------------------- bcs.w 45fc <continueFunction+0xe66>
    3816:	|  |  |  |                                                   move.l 64(sp),d0
    381a:	|  |  |  |                                                   add.l d0,d0
    381c:	|  |  |  |                                                   movea.l d0,a0
    381e:	|  |  |  |                                                   adda.l #14378,a0
    3824:	|  |  |  |                                                   move.w (a0),d0
    3826:	|  |  |  |                                                   jmp (382a <continueFunction+0x94>,pc,d0.w)
    382a:	|  |  |  |                                                   bset d6,(a2)
    382c:	|  |  |  |                                                   ori.w #2670,(a4)
    3830:	|  |  |  |                                                   eori.w #2416,d6
    3834:	|  |  |  |                                                   bchg d4,d2
    3836:	|  |  |  |                                                   bclr d4,(a4)+
    3838:	|  |  |  |                                                   andi.l #181013194,d4
    383e:	|  |  |  |                                                   .short 0x0aca
    3840:	|  |  |  |                                                   .short 0x0aca
    3842:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    384a:	|  |  |  |                                                   .short 0x0aca
    384c:	|  |  |  |                                                   andi.w #906,-(a4)
    3850:	|  |  |  |                                                   bchg d1,196(a2)
    3854:	|  |  |  |                                                   bset d1,580(a4)
    3858:	|  |  |  |                                                   bclr d1,2576(a2)
    385c:	|  |  |  |                                                   andi.b #-56,2762(a2)
    3862:	|  |  |  |                                                   .short 0x0aca
    3864:	|  |  |  |                                                   eori.l #63572682,d0
    386a:	|  |  |  |                                                   .short 0x0aca
    386c:	|  |  |  |                                                   bchg d3,-(a2)
    386e:	|  |  |  |                                                   bchg #-36,(a2)
    3872:	|  |  |  |                                                   .short 0x08cc
    3874:	|  |  |  |                                                   addi.b #14,1038(a0)
    387a:	|  |  |  |                                                   .short 0x040e
    387c:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    3880:	|  |  |  |                                                   ori.w #8232,(a0)
    3884:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    388a:	|  |  |  |                                                   ori.w #12136,(a0)
    388e:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    3894:	|  |  |  |                                                   ori.w #12328,(a0)
    3898:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    389e:	|  |  |  |                                                   add.l 44(sp),d1
    38a2:	|  |  |  |                                                   moveq #28,d0
    38a4:	|  |  |  |                                                   add.l 80(sp),d0
    38a8:	|  |  |  |                                                   move.l d1,-(sp)
    38aa:	|  |  |  |                                                   move.l d0,-(sp)
    38ac:	|  |  |  |                                                   jsr 13ae8 <copyVariable>
    38b2:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    38b4:	|  |  |  |                                                   move.l 80(sp),-(sp)
    38b8:	|  |  |  |                                                   jsr 4658 <finishFunction>
    38be:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    38c0:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    38c6:	|  |  |  |                                                   move.l 80(sp),-(sp)
    38ca:	|  |  |  |                                                   jsr 5792 <restartFunction>
    38d0:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    38d2:	|  |  |  |  /----------------------------------------------- bra.w 4630 <continueFunction+0xe9a>
				finishFunction (fun);
    38d6:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    38da:	|  |  |  |  |                                                jsr 4658 <finishFunction>
    38e0:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    38e2:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    38e6:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    38ea:	|  |  |  |  +----------------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    38ee:	|  |  |  |  |                                                movea.l 80(sp),a0
    38f2:	|  |  |  |  |                                                move.l 28(a0),d0
    38f6:	|  |  |  |  |                                                moveq #2,d1
    38f8:	|  |  |  |  |                                                cmp.l d0,d1
    38fa:	|  |  |  |  |                                            /-- beq.s 3906 <continueFunction+0x170>
    38fc:	|  |  |  |  |                                            |   moveq #4,d1
    38fe:	|  |  |  |  |                                            |   cmp.l d0,d1
    3900:	|  |  |  |  |                                         /--|-- beq.s 3954 <continueFunction+0x1be>
    3902:	|  |  |  |  |                                /--------|--|-- bra.w 3a3c <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    3906:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    390a:	|  |  |  |  |                                |        |      jsr 5750 <pauseFunction>
    3910:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    3912:	|  |  |  |  |                                |        |      moveq #24,d0
    3914:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    3918:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    391c:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    3920:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    3924:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    3926:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    392a:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    392e:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    3930:	|  |  |  |  |                                |        |      jsr 59de <startNewFunctionNum>
    3936:	|  |  |  |  |                                |        |      lea 20(sp),sp
    393a:	|  |  |  |  |                                |        |      tst.l d0
    393c:	|  |  |  |  |                                |        |  /-- bne.s 3944 <continueFunction+0x1ae>
    393e:	|  |  |  |  |                                |        |  |   clr.w d0
    3940:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 4652 <continueFunction+0xebc>
				fun = allRunningFunctions;
    3944:	|  |  |  |  |                                |        |  \-> move.l 1ae9a <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    394c:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    3950:	|  |  |  |  |                                |  /-----|----- bra.w 3a50 <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    3954:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    3958:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    395c:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    3960:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    3964:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    3966:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    3968:	|  |  |  |  |                                |  |            jsr 12310 <callBuiltIn>
    396e:	|  |  |  |  |                                |  |            lea 12(sp),sp
    3972:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    3976:	|  |  |  |  |                                |  |            moveq #5,d0
    3978:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    397c:	|  |  |  |  |                                |  |  /-------- bcs.w 3a38 <continueFunction+0x2a2>
    3980:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    3984:	|  |  |  |  |                                |  |  |         add.l d0,d0
    3986:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    3988:	|  |  |  |  |                                |  |  |         adda.l #14740,a0
    398e:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    3990:	|  |  |  |  |                                |  |  |         jmp (3994 <continueFunction+0x1fe>,pc,d0.w)
    3994:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    399a:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    399e:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    39a4:	|  |  |  |  |                                |  |  |     /-- blt.s 39bd <continueFunction+0x227>
    39a6:	|  |  |  |  |                                |  |  |     |   jsr 157fa <KPrintF>
    39ac:	|  |  |  |  |                                |  |  |     |   addq.l #4,sp
							return FALSE;
    39ae:	|  |  |  |  |                                |  |  |     |   clr.w d0
    39b0:	|  +--|--|--|--------------------------------|--|--|-----|-- bra.w 4652 <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    39b4:	|  |  |  |  |                                |  |  |     |   move.l 80(sp),-(sp)
    39b8:	|  |  |  |  |                                |  |  |     |   jsr 5750 <pauseFunction>
    39be:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    39c0:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    39c4:	|  |  |  |  |                                |  |  |  /----- bra.s 3a3a <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    39c6:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    39ca:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    39ce:	|  |  |  |  |                                |  |  |  +----- bra.s 3a3a <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    39d0:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    39d4:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    39da:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    39dc:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    39e0:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    39e4:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    39e8:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    39ea:	|  |  |  |  |                                |  |  |  |      jsr 13f20 <setVariable>
    39f0:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    39f4:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    39f8:	|  |  |  |  |                                |  |  |  |      jsr 5750 <pauseFunction>
    39fe:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    3a00:	|  |  |  |  |                                |  |  |  |      move.l 1aed2 <noStack>,d1
    3a06:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    3a0a:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    3a0c:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    3a0e:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    3a12:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    3a14:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    3a16:	|  |  |  |  |                                |  |  |  |      jsr 59de <startNewFunctionNum>
    3a1c:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    3a20:	|  |  |  |  |                                |  |  |  |      tst.l d0
    3a22:	|  |  |  |  |                                |  |  |  |  /-- bne.s 3a2a <continueFunction+0x294>
    3a24:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    3a26:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 4652 <continueFunction+0xebc>
							fun = allRunningFunctions;
    3a2a:	|  |  |  |  |                                |  |  |  |  \-> move.l 1ae9a <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    3a32:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    3a36:	|  |  |  |  |                                |  |  |  +----- bra.s 3a3a <continueFunction+0x2a4>

						default:
						break;
    3a38:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    3a3a:	|  |  |  |  |                                |  +-----\----X bra.s 3a50 <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    3a3c:	|  |  |  |  |                                \--|----------> pea 16d62 <PutChar+0xa94>
    3a42:	|  |  |  |  |                                   |            jsr 157fa <KPrintF>
    3a48:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    3a4a:	|  |  |  |  |                                   |            clr.w d0
    3a4c:	|  +--|--|--|-----------------------------------|----------- bra.w 4652 <continueFunction+0xebc>
			}
			break;
    3a50:	|  |  |  |  +-----------------------------------\----------X bra.w 4630 <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    3a54:	|  |  |  |  |                                                moveq #28,d0
    3a56:	|  |  |  |  |                                                add.l 80(sp),d0
    3a5a:	|  |  |  |  |                                                clr.l -(sp)
    3a5c:	|  |  |  |  |                                                clr.l -(sp)
    3a5e:	|  |  |  |  |                                                move.l d0,-(sp)
    3a60:	|  |  |  |  |                                                jsr 13f20 <setVariable>
    3a66:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3a6a:	|  |  |  |  +----------------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    3a6e:	|  |  |  |  |                                                move.l 68(sp),d1
    3a72:	|  |  |  |  |                                                moveq #28,d0
    3a74:	|  |  |  |  |                                                add.l 80(sp),d0
    3a78:	|  |  |  |  |                                                move.l d1,-(sp)
    3a7a:	|  |  |  |  |                                                pea 5 <_start+0x5>
    3a7e:	|  |  |  |  |                                                move.l d0,-(sp)
    3a80:	|  |  |  |  |                                                jsr 13f20 <setVariable>
    3a86:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3a8a:	|  |  |  |  +----------------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    3a8e:	|  |  |  |  |                                                move.l 68(sp),d1
    3a92:	|  |  |  |  |                                                moveq #28,d0
    3a94:	|  |  |  |  |                                                add.l 80(sp),d0
    3a98:	|  |  |  |  |                                                move.l d1,-(sp)
    3a9a:	|  |  |  |  |                                                pea 1 <_start+0x1>
    3a9e:	|  |  |  |  |                                                move.l d0,-(sp)
    3aa0:	|  |  |  |  |                                                jsr 13f20 <setVariable>
    3aa6:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3aaa:	|  |  |  |  +----------------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    3aae:	|  |  |  |  |                                                moveq #28,d0
    3ab0:	|  |  |  |  |                                                add.l 80(sp),d0
    3ab4:	|  |  |  |  |                                                movea.l 80(sp),a0
    3ab8:	|  |  |  |  |                                                movea.l 20(a0),a0
    3abc:	|  |  |  |  |                                                move.l 68(sp),d1
    3ac0:	|  |  |  |  |                                                lsl.l #3,d1
    3ac2:	|  |  |  |  |                                                add.l a0,d1
    3ac4:	|  |  |  |  |                                                move.l d0,-(sp)
    3ac6:	|  |  |  |  |                                                move.l d1,-(sp)
    3ac8:	|  |  |  |  |                                                jsr 13ae8 <copyVariable>
    3ace:	|  |  |  |  |                                                addq.l #8,sp
    3ad0:	|  |  |  |  |                                                tst.w d0
    3ad2:	|  |  |  |  |  /-------------------------------------------- bne.w 460e <continueFunction+0xe78>
    3ad6:	|  |  |  |  |  |                                             clr.w d0
    3ad8:	|  +--|--|--|--|-------------------------------------------- bra.w 4652 <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    3adc:	|  |  |  |  |  |                                             moveq #28,d0
    3ade:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3ae2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3ae4:	|  |  |  |  |  |                                             jsr 13b6e <getBoolean>
    3aea:	|  |  |  |  |  |                                             addq.l #4,sp
    3aec:	|  |  |  |  |  |                                             tst.w d0
    3aee:	|  |  |  |  |  |                                      /----- beq.s 3b0a <continueFunction+0x374>
    3af0:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    3af4:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    3af8:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    3afa:	|  |  |  |  |  |                                      |      jsr 13b6e <getBoolean>
    3b00:	|  |  |  |  |  |                                      |      addq.l #4,sp
    3b02:	|  |  |  |  |  |                                      |      tst.w d0
    3b04:	|  |  |  |  |  |                                      +----- beq.s 3b0a <continueFunction+0x374>
    3b06:	|  |  |  |  |  |                                      |      moveq #1,d0
    3b08:	|  |  |  |  |  |                                      |  /-- bra.s 3b0c <continueFunction+0x376>
    3b0a:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3b0c:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3b0e:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3b12:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b14:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3b18:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b1a:	|  |  |  |  |  |                                             jsr 13f20 <setVariable>
    3b20:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3b24:	|  |  |  |  |  |                                             moveq #24,d0
    3b26:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b2a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b2c:	|  |  |  |  |  |                                             jsr 13fb2 <trimStack>
    3b32:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3b34:	|  |  |  |  +--|-------------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    3b38:	|  |  |  |  |  |                                             moveq #28,d0
    3b3a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b3e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b40:	|  |  |  |  |  |                                             jsr 13b6e <getBoolean>
    3b46:	|  |  |  |  |  |                                             addq.l #4,sp
    3b48:	|  |  |  |  |  |                                             tst.w d0
    3b4a:	|  |  |  |  |  |                                         /-- bne.s 3b62 <continueFunction+0x3cc>
    3b4c:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    3b50:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    3b54:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    3b56:	|  |  |  |  |  |                                         |   jsr 13b6e <getBoolean>
    3b5c:	|  |  |  |  |  |                                         |   addq.l #4,sp
    3b5e:	|  |  |  |  |  |                                         |   tst.w d0
    3b60:	|  |  |  |  |  |                                      /--|-- beq.s 3b66 <continueFunction+0x3d0>
    3b62:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    3b64:	|  |  |  |  |  |                                      |  /-- bra.s 3b68 <continueFunction+0x3d2>
    3b66:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3b68:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3b6a:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3b6e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b70:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3b74:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b76:	|  |  |  |  |  |                                             jsr 13f20 <setVariable>
    3b7c:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3b80:	|  |  |  |  |  |                                             moveq #24,d0
    3b82:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b86:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b88:	|  |  |  |  |  |                                             jsr 13fb2 <trimStack>
    3b8e:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3b90:	|  |  |  |  +--|-------------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    3b94:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3b98:	|  |  |  |  |  |                                             moveq #28,d0
    3b9a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b9e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3ba0:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    3ba4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3ba6:	|  |  |  |  |  |                                             jsr 13f20 <setVariable>
    3bac:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3bb0:	|  |  |  |  +--|-------------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    3bb4:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3bb8:	|  |  |  |  |  |                                             moveq #28,d0
    3bba:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3bbe:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3bc0:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    3bc4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3bc6:	|  |  |  |  |  |                                             jsr 13f20 <setVariable>
    3bcc:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3bd0:	|  |  |  |  +--|-------------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    3bd4:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3bd8:	|  |  |  |  |  |                                             moveq #28,d0
    3bda:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3bde:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3be0:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    3be4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3be6:	|  |  |  |  |  |                                             jsr 13f20 <setVariable>
    3bec:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3bf0:	|  |  |  |  +--|-------------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    3bf4:	|  |  |  |  |  |                                             move.l 1ae62 <dialogValue>,d0
    3bfa:	|  |  |  |  |  |                                             moveq #1,d1
    3bfc:	|  |  |  |  |  |                                             cmp.l d0,d1
    3bfe:	|  |  |  |  |  |  /----------------------------------------- beq.w 4612 <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    3c02:	|  |  |  |  |  |  |                                          pea 16d77 <PutChar+0xaa9>
    3c08:	|  |  |  |  |  |  |                                          jsr 157fa <KPrintF>
    3c0e:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    3c10:	|  |  |  |  |  |  |                                          clr.w d0
    3c12:	|  +--|--|--|--|--|----------------------------------------- bra.w 4652 <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    3c16:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    3c1a:	|  |  |  |  |  |  |                                          moveq #28,d0
    3c1c:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    3c20:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    3c22:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    3c24:	|  |  |  |  |  |  |                                          jsr 136b2 <loadStringToVar>
    3c2a:	|  |  |  |  |  |  |                                          addq.l #8,sp
    3c2c:	|  |  |  |  |  |  |                                          tst.w d0
    3c2e:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 4616 <continueFunction+0xe80>
					return FALSE;
    3c32:	|  |  |  |  |  |  |  |                                       clr.w d0
    3c34:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4652 <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    3c38:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3c3c:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3c40:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3c42:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    3c44:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3c46:	|  |  |  |  |  |  |  |                                /----- beq.s 3ca4 <continueFunction+0x50e>
    3c48:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    3c4a:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    3c4c:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 3e38 <continueFunction+0x6a2>
    3c50:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    3c52:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 3c5e <continueFunction+0x4c8>
    3c54:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    3c56:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    3c58:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 3ca4 <continueFunction+0x50e>
    3c5a:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 3e38 <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    3c5e:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    3c60:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    3c64:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 3c90 <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    3c66:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    3c68:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3c6c:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3c6e:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3c70:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3c72:	|  |  |  |  |  |  |  |              |                 |  |   jsr 13f20 <setVariable>
    3c78:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    3c7c:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    3c7e:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3c82:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3c84:	|  |  |  |  |  |  |  |              |                 |  |   jsr 13fb2 <trimStack>
    3c8a:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    3c8c:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 3e4e <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    3c90:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 16db8 <PutChar+0xaea>
    3c96:	|  |  |  |  |  |  |  |              |  |              |      jsr 157fa <KPrintF>
    3c9c:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    3c9e:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    3ca0:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 4652 <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3ca4:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    3ca8:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3cac:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    3cb0:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    3cb2:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3cc8 <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    3cb4:	|  |  |  |  |  |  |  |              |  |                 |   pea 16df4 <PutChar+0xb26>
    3cba:	|  |  |  |  |  |  |  |              |  |                 |   jsr 157fa <KPrintF>
    3cc0:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    3cc2:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3cc4:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4652 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3cc8:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    3cca:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3cce:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3cd0:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    3cd4:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    3cd8:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    3cda:	|  |  |  |  |  |  |  |              |  |                     jsr 1362e <getValueType>
    3ce0:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    3ce4:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    3ce6:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3cee <continueFunction+0x558>
    3ce8:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3cea:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4652 <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3cee:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    3cf2:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3cf6:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    3cf8:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    3cfa:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    3cfc:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3d1e <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    3cfe:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    3d02:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    3d04:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    3d08:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    3d0c:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    3d10:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    3d12:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3d14:	|  |  |  |  |  |  |  |              |  |                 |   jsr 132b8 <fastArrayGetByIndex>
    3d1a:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    3d1c:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 3d3e <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    3d1e:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    3d22:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    3d24:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    3d28:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    3d2c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    3d30:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    3d32:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    3d34:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    3d36:	|  |  |  |  |  |  |  |              |  |              |      jsr 13f42 <stackGetByIndex>
    3d3c:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3d3e:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    3d42:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    3d44:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3d48:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3d4a:	|  |  |  |  |  |  |  |              |  |                     jsr 13fb2 <trimStack>
    3d50:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    3d52:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    3d56:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3d72 <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    3d58:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    3d5a:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    3d5e:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3d60:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3d62:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3d64:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13f20 <setVariable>
    3d6a:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    3d6e:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 3e4c <continueFunction+0x6b6>
    3d72:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    3d74:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    3d78:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 3d86 <continueFunction+0x5f0>
    3d7a:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    3d7c:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    3d80:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 3dd0 <continueFunction+0x63a>
    3d82:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 3e18 <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3d86:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    3d8a:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    3d8e:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    3d92:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    3d94:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 1362e <getValueType>
    3d9a:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    3d9e:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    3da0:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 3da8 <continueFunction+0x612>
    3da2:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    3da4:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 3e32 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    3da8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    3daa:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    3dac:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    3db0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    3db2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    3db6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    3db8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 13f20 <setVariable>
    3dbe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    3dc2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    3dc4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    3dc6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    3dca:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    3dce:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 3e36 <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3dd0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    3dd4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3dd8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    3ddc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    3dde:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1362e <getValueType>
    3de4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    3de8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    3dea:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 3df0 <continueFunction+0x65a>
    3dec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    3dee:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 3e32 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    3df0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    3df2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    3df4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    3df8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    3dfa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3dfe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    3e00:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 13f20 <setVariable>
    3e06:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    3e0a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    3e0c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    3e0e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    3e12:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    3e16:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 3e36 <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    3e18:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    3e1a:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    3e1e:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    3e20:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    3e24:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 13ae8 <copyVariable>
    3e2a:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    3e2c:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    3e2e:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 3e4c <continueFunction+0x6b6>
    3e30:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3e32:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 4652 <continueFunction+0xebc>
				break;
    3e36:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 3e4c <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    3e38:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 16e12 <PutChar+0xb44>
    3e3e:	|  |  |  |  |  |  |  |                 |  |                  jsr 157fa <KPrintF>
    3e44:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    3e46:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    3e48:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 4652 <continueFunction+0xebc>
				break;
    3e4c:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    3e4e:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 4630 <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    3e52:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3e56:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3e5a:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3e5c:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    3e5e:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3e60:	|  |  |  |  |  |  |  |                                   /-- beq.s 3e6e <continueFunction+0x6d8>
    3e62:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    3e64:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    3e66:	|  |  |  |  |  |  |  |                                /--|-- beq.w 3f1a <continueFunction+0x784>
    3e6a:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 3f78 <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3e6e:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3e72:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3e76:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3e7a:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3e7c:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3e92 <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    3e7e:	|  |  |  |  |  |  |  |                             |  |  |   pea 16df4 <PutChar+0xb26>
    3e84:	|  |  |  |  |  |  |  |                             |  |  |   jsr 157fa <KPrintF>
    3e8a:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    3e8c:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3e8e:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4652 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3e92:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    3e94:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3e98:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3e9a:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    3e9e:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    3ea2:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    3ea4:	|  |  |  |  |  |  |  |                             |  |      jsr 1362e <getValueType>
    3eaa:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3eae:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3eb0:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3eb8 <continueFunction+0x722>
    3eb2:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3eb4:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4652 <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    3eb8:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3ebc:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3ec0:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    3ec4:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    3ec6:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    3eca:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    3ecc:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    3ed0:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3ed4:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3ed8:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3eda:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    3edc:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    3ede:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3ee0:	|  |  |  |  |  |  |  |                             |  |      jsr 599a <stackSetByIndex>
    3ee6:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3eea:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3eec:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3ef4 <continueFunction+0x75e>
						return FALSE;
    3eee:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3ef0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4652 <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    3ef4:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    3ef6:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3efa:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3efc:	|  |  |  |  |  |  |  |                             |  |      jsr 13fb2 <trimStack>
    3f02:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    3f04:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    3f06:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3f0a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3f0c:	|  |  |  |  |  |  |  |                             |  |      jsr 13fb2 <trimStack>
    3f12:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    3f14:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    3f16:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 4630 <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    3f1a:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    3f1c:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    3f20:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    3f22:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    3f26:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    3f2a:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    3f2c:	|  |  |  |  |  |  |  |                             |         jsr 1362e <getValueType>
    3f32:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    3f36:	|  |  |  |  |  |  |  |                             |         tst.w d0
    3f38:	|  |  |  |  |  |  |  |                             |     /-- bne.s 3f40 <continueFunction+0x7aa>
    3f3a:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    3f3c:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 4652 <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    3f40:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    3f44:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    3f46:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    3f4a:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    3f4e:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    3f52:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    3f54:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    3f56:	|  |  |  |  |  |  |  |                             |         jsr 132b8 <fastArrayGetByIndex>
    3f5c:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    3f5e:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    3f62:	|  |  |  |  |  |  |  |                             |     /-- bne.s 3f72 <continueFunction+0x7dc>
    3f64:	|  |  |  |  |  |  |  |                             |     |   pea 16e36 <PutChar+0xb68>
    3f6a:	|  |  |  |  |  |  |  |                             |     |   jsr 157fa <KPrintF>
    3f70:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    3f72:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    3f74:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 4652 <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    3f78:	|  |  |  |  |  |  |  |                             \-------> pea 16e12 <PutChar+0xb44>
    3f7e:	|  |  |  |  |  |  |  |                                       jsr 157fa <KPrintF>
    3f84:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    3f86:	|  |  |  |  |  |  |  |                                       clr.w d0
    3f88:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4652 <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    3f8c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3f90:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    3f94:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3f98:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3f9a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    3f9c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3f9e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3fa2:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    3fa6:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3fa8:	|  |  |  |  |  |  |  |                                       jsr 1362e <getValueType>
    3fae:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3fb2:	|  |  |  |  |  |  |  |                                       tst.w d0
    3fb4:	|  |  |  |  |  |  |  |                                   /-- bne.s 3fbc <continueFunction+0x826>
    3fb6:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3fb8:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4652 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    3fbc:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    3fc0:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3fc2:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3fc6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3fc8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3fcc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3fce:	|  |  |  |  |  |  |  |                                       jsr 13f20 <setVariable>
    3fd4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    3fd8:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    3fdc:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3fde:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    3fe0:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3fe4:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    3fe8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3fec:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3fee:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3ff0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3ff2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3ff6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3ff8:	|  |  |  |  |  |  |  |                                       jsr 13f20 <setVariable>
    3ffe:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4002:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    4006:	|  |  |  |  |  |  |  |                                       move.l 1aeb0 <globalVars>,d1
    400c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4010:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4012:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4014:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4016:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    401a:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    401e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4020:	|  |  |  |  |  |  |  |                                       jsr 1362e <getValueType>
    4026:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    402a:	|  |  |  |  |  |  |  |                                       tst.w d0
    402c:	|  |  |  |  |  |  |  |                                   /-- bne.s 4034 <continueFunction+0x89e>
    402e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4030:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4652 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    4034:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    4038:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    403a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    403e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4040:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4044:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4046:	|  |  |  |  |  |  |  |                                       jsr 13f20 <setVariable>
    404c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    4050:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    4054:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4056:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4058:	|  |  |  |  |  |  |  |                                       movea.l 1aeb0 <globalVars>,a0
    405e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4062:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4064:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4066:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4068:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    406c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    406e:	|  |  |  |  |  |  |  |                                       jsr 13f20 <setVariable>
    4074:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4078:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    407c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4080:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4084:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4088:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    408a:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    408c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    408e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4092:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    4096:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4098:	|  |  |  |  |  |  |  |                                       jsr 1362e <getValueType>
    409e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    40a2:	|  |  |  |  |  |  |  |                                       tst.w d0
    40a4:	|  |  |  |  |  |  |  |                                   /-- bne.s 40ac <continueFunction+0x916>
    40a6:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    40a8:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4652 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    40ac:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    40b0:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    40b2:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    40b6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    40b8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40bc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40be:	|  |  |  |  |  |  |  |                                       jsr 13f20 <setVariable>
    40c4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    40c8:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    40cc:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    40ce:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    40d0:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    40d4:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    40d8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    40dc:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    40de:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    40e0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    40e2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40e6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40e8:	|  |  |  |  |  |  |  |                                       jsr 13f20 <setVariable>
    40ee:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    40f2:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    40f6:	|  |  |  |  |  |  |  |                                       move.l 1aeb0 <globalVars>,d1
    40fc:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4100:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4102:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4104:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4106:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    410a:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    410e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4110:	|  |  |  |  |  |  |  |                                       jsr 1362e <getValueType>
    4116:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    411a:	|  |  |  |  |  |  |  |                                       tst.w d0
    411c:	|  |  |  |  |  |  |  |                                   /-- bne.s 4124 <continueFunction+0x98e>
    411e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4120:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4652 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    4124:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    4128:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    412a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    412e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4130:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4134:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4136:	|  |  |  |  |  |  |  |                                       jsr 13f20 <setVariable>
    413c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    4140:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    4144:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4146:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4148:	|  |  |  |  |  |  |  |                                       movea.l 1aeb0 <globalVars>,a0
    414e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4152:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4154:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4156:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4158:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    415c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    415e:	|  |  |  |  |  |  |  |                                       jsr 13f20 <setVariable>
    4164:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4168:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    416c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4170:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4174:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4178:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    417a:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    417c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    417e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4182:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4184:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4186:	|  |  |  |  |  |  |  |                                       jsr 13ae8 <copyVariable>
    418c:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    418e:	|  |  |  |  |  |  |  |                                       tst.w d0
    4190:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 461a <continueFunction+0xe84>
    4194:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    4196:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 4652 <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    419a:	|  |  |  |  |  |  |  |  |                                    move.l 1aeb0 <globalVars>,d1
    41a0:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    41a4:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    41a6:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    41a8:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    41aa:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    41ae:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    41b0:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    41b2:	|  |  |  |  |  |  |  |  |                                    jsr 13ae8 <copyVariable>
    41b8:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    41ba:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    41bc:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 461e <continueFunction+0xe88>
    41c0:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    41c2:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 4652 <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    41c6:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    41c8:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    41cc:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1aeb0 <globalVars>,a0
    41d2:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    41d6:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    41d8:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    41da:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    41dc:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    41de:	|  |  |  |  |  |  |  |  |  |                                 jsr 13ae8 <copyVariable>
    41e4:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    41e6:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    41e8:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 4622 <continueFunction+0xe8c>
    41ec:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    41ee:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 4652 <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    41f2:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    41f4:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    41f8:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    41fa:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    41fe:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    4200:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    4202:	|  |  |  |  |  |  |  |  |  |  |                              jsr 12e6a <addVarToStack>
    4208:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    420a:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    420c:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 4626 <continueFunction+0xe90>
    4210:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    4212:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 4652 <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    4216:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    4218:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    421c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    421e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    4222:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    4224:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    4226:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 12ef0 <addVarToStackQuick>
    422c:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    422e:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    4230:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 462a <continueFunction+0xe94>
    4234:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    4236:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 4652 <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    423a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    423c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4240:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4242:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13b6e <getBoolean>
    4248:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    424a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    424c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    424e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    4250:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    4252:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    4254:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4256:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    425a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    425c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    4260:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4262:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13f20 <setVariable>
    4268:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    426c:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    4270:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4272:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4276:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4278:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13b6e <getBoolean>
    427e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4280:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4282:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 462e <continueFunction+0xe98>
				advanceNow = FALSE;
    4286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    428a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    428e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    4294:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 462e <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    4298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    429c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    42a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    42a6:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4630 <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    42aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    42ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    42b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    42b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    42b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    42ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    42bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1362e <getValueType>
    42c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    42c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    42c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 42d0 <continueFunction+0xb3a>
    42ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    42cc:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 4652 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    42d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    42d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    42d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    42d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    42da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    42de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    42e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    42e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    42e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 13f20 <setVariable>
    42ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    42f0:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4630 <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    42f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    42f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    42fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 45e6 <continueFunction+0xe50>
    4300:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    4302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    4306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 4382 <continueFunction+0xbec>
    4308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    430a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    430e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 43cc <continueFunction+0xc36>
    4312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    4314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    4318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 4326 <continueFunction+0xb90>
    431a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    431c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    4320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 4354 <continueFunction+0xbbe>
    4322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 43cc <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    4326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    4328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    432c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    4330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    4334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    4336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    4338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 12f64 <addVariablesInSecond>
    433e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    4340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    4342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    4346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    4348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13fb2 <trimStack>
    434e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    4350:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 45fa <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4354:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    4356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    435a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    435e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    4362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    4364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    4366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13022 <compareVariablesInSecond>
    436c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    436e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    4370:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    4376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13fb2 <trimStack>
    437c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    437e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 45fa <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    4384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    4388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    438c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    4390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    4392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    4394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13022 <compareVariablesInSecond>
    439a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    439c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    439e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    43a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    43a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13fb2 <trimStack>
    43aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    43ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    43b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    43b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    43b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    43b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    43ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    43c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    43c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    43c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 45fa <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    43cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    43d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    43d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    43d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    43da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    43de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    43e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1362e <getValueType>
    43e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    43ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    43ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 43f4 <continueFunction+0xc5e>
    43ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    43f0:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4652 <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    43f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    43f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    43fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    43fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    4404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    4406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1362e <getValueType>
    440c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 441a <continueFunction+0xc84>
    4414:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    4416:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4652 <continueFunction+0xebc>
					trimStack (&fun -> stack);
    441a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    441c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 13fb2 <trimStack>
    4428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    442a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    442c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    4430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    4432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    4434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 45f8 <continueFunction+0xe62>
    4438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    443a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    443c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #17480,a0
    4442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    4444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (4448 <continueFunction+0xcb2>,pc,d0.w)
    4448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    444c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    444e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    4458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    4470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    4478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    447c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 161b8 <__mulsi3>
    448a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    448c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    448e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    449a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    449c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13f20 <setVariable>
    44a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    44a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45fa <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    44aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    44ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    44b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    44b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    44b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    44ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    44bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    44c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    44c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13f20 <setVariable>
    44c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    44cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45fa <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    44d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    44d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    44d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    44da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    44dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16264 <__modsi3>
    44e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    44e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    44e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    44e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    44ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    44ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    44f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    44f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13f20 <setVariable>
    44fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    44fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45fa <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    4502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    450a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    450c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    450e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16236 <__divsi3>
    4514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    451a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    451e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13f20 <setVariable>
    452c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45fa <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    4534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    453c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    453e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    4540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    454c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    454e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13f20 <setVariable>
    455a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    455e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45fa <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    4562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    456a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    456c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    456e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    457a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    457c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4582:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13f20 <setVariable>
    4588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    458c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 45fa <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    458e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    459a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    459c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    459e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    45a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    45a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    45a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    45a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    45ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    45ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13f20 <setVariable>
    45b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    45b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 45fa <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    45ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    45be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    45c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    45c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    45c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    45c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    45ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    45cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    45ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    45d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    45d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    45d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    45da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13f20 <setVariable>
    45e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    45e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 45fa <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    45e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 16e57 <PutChar+0xb89>
    45ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 157fa <KPrintF>
    45f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    45f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    45f6:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 4652 <continueFunction+0xebc>
						break;
    45f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    45fa:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 4630 <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    45fc:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 16e6f <PutChar+0xba1>
    4602:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 157fa <KPrintF>
    4608:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    460a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    460c:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 4652 <continueFunction+0xebc>
			break;
    460e:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    4610:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 4630 <continueFunction+0xe9a>
			break;
    4612:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    4614:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 4630 <continueFunction+0xe9a>
			break;
    4616:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    4618:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 4630 <continueFunction+0xe9a>
			break;
    461a:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    461c:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 4630 <continueFunction+0xe9a>
			break;
    461e:	|  |  |     |              \--|--|--|--|-------------------> nop
    4620:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 4630 <continueFunction+0xe9a>
			break;
    4622:	|  |  |     |                 \--|--|--|-------------------> nop
    4624:	|  |  |     +--------------------|--|--|-------------------- bra.s 4630 <continueFunction+0xe9a>
			break;
    4626:	|  |  |     |                    \--|--|-------------------> nop
    4628:	|  |  |     +-----------------------|--|-------------------- bra.s 4630 <continueFunction+0xe9a>
			break;
    462a:	|  |  |     |                       \--|-------------------> nop
    462c:	|  |  |     +--------------------------|-------------------- bra.s 4630 <continueFunction+0xe9a>
			break;
    462e:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    4630:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    4634:	+--|--|----------------------------------------------------- beq.s 4648 <continueFunction+0xeb2>
    4636:	|  |  |                                                      movea.l 80(sp),a0
    463a:	|  |  |                                                      move.l 36(a0),d0
    463e:	|  |  |                                                      addq.l #1,d0
    4640:	|  |  |                                                      movea.l 80(sp),a0
    4644:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    4648:	\--|--|----------------------------------------------------> tst.w 74(sp)
    464c:	   |  \----------------------------------------------------- bne.w 37be <continueFunction+0x28>

	}
	return TRUE;
    4650:	   |                                                         moveq #1,d0
}
    4652:	   \-------------------------------------------------------> lea 76(sp),sp
    4656:	                                                             rts

00004658 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    4658:	       lea -16(sp),sp
    465c:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    465e:	       move.l 24(sp),-(sp)
    4662:	       jsr 5750 <pauseFunction>
    4668:	       addq.l #4,sp
	if (fun -> stack) 
    466a:	       movea.l 24(sp),a0
    466e:	       move.l 24(a0),d0
    4672:	   /-- beq.s 4688 <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    4674:	   |   pea 16e9b <PutChar+0xbcd>
    467a:	   |   pea 16ec8 <PutChar+0xbfa>
    4680:	   |   jsr 157fa <KPrintF>
    4686:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    4688:	   \-> movea.l 24(sp),a0
    468c:	       move.l 4(a0),12(sp)
    4692:	       move.l 1af02 <SysBase>,d0
    4698:	       movea.l d0,a6
    469a:	       movea.l 12(sp),a1
    469e:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    46a2:	       clr.l 16(sp)
    46a6:	   /-- bra.s 46c6 <finishFunction+0x6e>
    46a8:	/--|-> movea.l 24(sp),a0
    46ac:	|  |   move.l 20(a0),d1
    46b0:	|  |   move.l 16(sp),d0
    46b4:	|  |   lsl.l #3,d0
    46b6:	|  |   add.l d1,d0
    46b8:	|  |   move.l d0,-(sp)
    46ba:	|  |   jsr 1387c <unlinkVar>
    46c0:	|  |   addq.l #4,sp
    46c2:	|  |   addq.l #1,16(sp)
    46c6:	|  \-> movea.l 24(sp),a0
    46ca:	|      move.l 8(a0),d0
    46ce:	|      cmp.l 16(sp),d0
    46d2:	\----- bgt.s 46a8 <finishFunction+0x50>
	if( fun->numLocals > 0) {
    46d4:	       movea.l 24(sp),a0
    46d8:	       move.l 8(a0),d0
    46dc:	   /-- ble.s 46f8 <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    46de:	   |   movea.l 24(sp),a0
    46e2:	   |   move.l 20(a0),8(sp)
    46e8:	   |   move.l 1af02 <SysBase>,d0
    46ee:	   |   movea.l d0,a6
    46f0:	   |   movea.l 8(sp),a1
    46f4:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    46f8:	   \-> moveq #28,d0
    46fa:	       add.l 24(sp),d0
    46fe:	       move.l d0,-(sp)
    4700:	       jsr 1387c <unlinkVar>
    4706:	       addq.l #4,sp
	FreeVec(fun);
    4708:	       move.l 24(sp),4(sp)
    470e:	       move.l 1af02 <SysBase>,d0
    4714:	       movea.l d0,a6
    4716:	       movea.l 4(sp),a1
    471a:	       jsr -690(a6)
	fun = NULL;
    471e:	       clr.l 24(sp)
}
    4722:	       nop
    4724:	       movea.l (sp)+,a6
    4726:	       lea 16(sp),sp
    472a:	       rts

0000472c <handleInput>:

BOOL handleInput () {
    472c:	             lea -16(sp),sp
    4730:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    4732:	             move.l 1b062 <overRegion>,d0
    4738:	         /-- bne.s 4740 <handleInput+0x14>
    473a:	         |   jsr 140f8 <getOverRegion>

	if (input.justMoved) {
    4740:	         \-> move.w 1aeb8 <input+0x4>,d0
    4746:	         /-- beq.s 4784 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    4748:	         |   movea.l 1a878 <currentEvents>,a0
    474e:	         |   move.l 16(a0),d0
    4752:	         +-- beq.s 4784 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4754:	         |   move.l 1aed2 <noStack>,d1
    475a:	         |   movea.l 1a878 <currentEvents>,a0
    4760:	         |   move.l 16(a0),d0
    4764:	         |   pea 1 <_start+0x1>
    4768:	         |   move.l d1,-(sp)
    476a:	         |   clr.l -(sp)
    476c:	         |   clr.l -(sp)
    476e:	         |   move.l d0,-(sp)
    4770:	         |   jsr 59de <startNewFunctionNum>
    4776:	         |   lea 20(sp),sp
    477a:	         |   tst.l d0
    477c:	         +-- bne.s 4784 <handleInput+0x58>
    477e:	         |   clr.w d0
    4780:	/--------|-- bra.w 498a <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    4784:	|        \-> clr.w 1aeb8 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    478a:	|            move.l 1aeca <lastRegion>,d1
    4790:	|            move.l 1b062 <overRegion>,d0
    4796:	|            cmp.l d1,d0
    4798:	|  /-------- beq.w 4870 <handleInput+0x144>
    479c:	|  |         movea.l 1a878 <currentEvents>,a0
    47a2:	|  |         move.l 20(a0),d0
    47a6:	|  +-------- beq.w 4870 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    47aa:	|  |         moveq #12,d0
    47ac:	|  |         move.l d0,16(sp)
    47b0:	|  |         clr.l 12(sp)
    47b4:	|  |         move.l 1af02 <SysBase>,d0
    47ba:	|  |         movea.l d0,a6
    47bc:	|  |         move.l 16(sp),d0
    47c0:	|  |         move.l 12(sp),d1
    47c4:	|  |         jsr -684(a6)
    47c8:	|  |         move.l d0,8(sp)
    47cc:	|  |         move.l 8(sp),d0
    47d0:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    47d4:	|  |         move.l 4(sp),d0
    47d8:	|  |     /-- bne.s 47ee <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    47da:	|  |     |   pea 16ed8 <PutChar+0xc0a>
    47e0:	|  |     |   jsr 157fa <KPrintF>
    47e6:	|  |     |   addq.l #4,sp
			return FALSE;
    47e8:	|  |     |   clr.w d0
    47ea:	+--|-----|-- bra.w 498a <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    47ee:	|  |     \-> movea.l 4(sp),a0
    47f2:	|  |         clr.l (a0)
		if (overRegion) {
    47f4:	|  |         move.l 1b062 <overRegion>,d0
    47fa:	|  |  /----- beq.s 4822 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    47fc:	|  |  |      movea.l 1b062 <overRegion>,a0
    4802:	|  |  |      movea.l 28(a0),a0
    4806:	|  |  |      move.l 4(a0),d1
    480a:	|  |  |      move.l 4(sp),d0
    480e:	|  |  |      move.l d1,-(sp)
    4810:	|  |  |      pea 7 <_start+0x7>
    4814:	|  |  |      move.l d0,-(sp)
    4816:	|  |  |      jsr 13f20 <setVariable>
    481c:	|  |  |      lea 12(sp),sp
    4820:	|  |  |  /-- bra.s 4838 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    4822:	|  |  \--|-> move.l 4(sp),d0
    4826:	|  |     |   clr.l -(sp)
    4828:	|  |     |   pea 1 <_start+0x1>
    482c:	|  |     |   move.l d0,-(sp)
    482e:	|  |     |   jsr 13f20 <setVariable>
    4834:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    4838:	|  |     \-> movea.l 4(sp),a0
    483c:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    4840:	|  |         movea.l 1a878 <currentEvents>,a0
    4846:	|  |         move.l 20(a0),d0
    484a:	|  |         pea 1 <_start+0x1>
    484e:	|  |         lea 8(sp),a0
    4852:	|  |         move.l a0,-(sp)
    4854:	|  |         clr.l -(sp)
    4856:	|  |         pea 1 <_start+0x1>
    485a:	|  |         move.l d0,-(sp)
    485c:	|  |         jsr 59de <startNewFunctionNum>
    4862:	|  |         lea 20(sp),sp
    4866:	|  |         tst.l d0
    4868:	|  +-------- bne.s 4870 <handleInput+0x144>
    486a:	|  |         clr.w d0
    486c:	+--|-------- bra.w 498a <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    4870:	|  \-------> move.w 1aeba <input+0x6>,d0
    4876:	|        /-- beq.s 48b4 <handleInput+0x188>
    4878:	|        |   movea.l 1a878 <currentEvents>,a0
    487e:	|        |   move.l 4(a0),d0
    4882:	|        +-- beq.s 48b4 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4884:	|        |   move.l 1aed2 <noStack>,d1
    488a:	|        |   movea.l 1a878 <currentEvents>,a0
    4890:	|        |   move.l 4(a0),d0
    4894:	|        |   pea 1 <_start+0x1>
    4898:	|        |   move.l d1,-(sp)
    489a:	|        |   clr.l -(sp)
    489c:	|        |   clr.l -(sp)
    489e:	|        |   move.l d0,-(sp)
    48a0:	|        |   jsr 59de <startNewFunctionNum>
    48a6:	|        |   lea 20(sp),sp
    48aa:	|        |   tst.l d0
    48ac:	|        +-- bne.s 48b4 <handleInput+0x188>
    48ae:	|        |   clr.w d0
    48b0:	+--------|-- bra.w 498a <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    48b4:	|        \-> move.w 1aebc <input+0x8>,d0
    48ba:	|        /-- beq.s 48f8 <handleInput+0x1cc>
    48bc:	|        |   movea.l 1a878 <currentEvents>,a0
    48c2:	|        |   move.l 12(a0),d0
    48c6:	|        +-- beq.s 48f8 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    48c8:	|        |   move.l 1aed2 <noStack>,d1
    48ce:	|        |   movea.l 1a878 <currentEvents>,a0
    48d4:	|        |   move.l 12(a0),d0
    48d8:	|        |   pea 1 <_start+0x1>
    48dc:	|        |   move.l d1,-(sp)
    48de:	|        |   clr.l -(sp)
    48e0:	|        |   clr.l -(sp)
    48e2:	|        |   move.l d0,-(sp)
    48e4:	|        |   jsr 59de <startNewFunctionNum>
    48ea:	|        |   lea 20(sp),sp
    48ee:	|        |   tst.l d0
    48f0:	|        +-- bne.s 48f8 <handleInput+0x1cc>
    48f2:	|        |   clr.w d0
    48f4:	+--------|-- bra.w 498a <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    48f8:	|        \-> move.w 1aeb4 <input>,d0
    48fe:	|        /-- beq.s 4936 <handleInput+0x20a>
    4900:	|        |   movea.l 1a878 <currentEvents>,a0
    4906:	|        |   move.l (a0),d0
    4908:	|        +-- beq.s 4936 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    490a:	|        |   move.l 1aed2 <noStack>,d1
    4910:	|        |   movea.l 1a878 <currentEvents>,a0
    4916:	|        |   move.l (a0),d0
    4918:	|        |   pea 1 <_start+0x1>
    491c:	|        |   move.l d1,-(sp)
    491e:	|        |   clr.l -(sp)
    4920:	|        |   clr.l -(sp)
    4922:	|        |   move.l d0,-(sp)
    4924:	|        |   jsr 59de <startNewFunctionNum>
    492a:	|        |   lea 20(sp),sp
    492e:	|        |   tst.l d0
    4930:	|        +-- bne.s 4936 <handleInput+0x20a>
    4932:	|        |   clr.w d0
    4934:	+--------|-- bra.s 498a <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    4936:	|        \-> move.w 1aeb6 <input+0x2>,d0
    493c:	|        /-- beq.s 4978 <handleInput+0x24c>
    493e:	|        |   movea.l 1a878 <currentEvents>,a0
    4944:	|        |   move.l 8(a0),d0
    4948:	|        +-- beq.s 4978 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    494a:	|        |   move.l 1aed2 <noStack>,d1
    4950:	|        |   movea.l 1a878 <currentEvents>,a0
    4956:	|        |   move.l 8(a0),d0
    495a:	|        |   pea 1 <_start+0x1>
    495e:	|        |   move.l d1,-(sp)
    4960:	|        |   clr.l -(sp)
    4962:	|        |   clr.l -(sp)
    4964:	|        |   move.l d0,-(sp)
    4966:	|        |   jsr 59de <startNewFunctionNum>
    496c:	|        |   lea 20(sp),sp
    4970:	|        |   tst.l d0
    4972:	|        +-- bne.s 4978 <handleInput+0x24c>
    4974:	|        |   clr.w d0
    4976:	+--------|-- bra.s 498a <handleInput+0x25e>
	}

	lastRegion = overRegion;
    4978:	|        \-> move.l 1b062 <overRegion>,d0
    497e:	|            move.l d0,1aeca <lastRegion>
	return runSludge ();
    4984:	|            jsr 57ac <runSludge>
}
    498a:	\----------> movea.l (sp)+,a6
    498c:	             lea 16(sp),sp
    4990:	             rts

00004992 <initSludge>:

BOOL initSludge (char * filename) {
    4992:	             lea -292(sp),sp
    4996:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    499a:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    499e:	             jsr 9c7c <makeNullAnim>
    49a4:	             move.l d0,1ae06 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    49aa:	             pea 1aeac <gameVersion>
    49b0:	             pea 16f0e <PutChar+0xc40>
    49b6:	             pea 45 <_start+0x45>
    49ba:	             pea 47 <_start+0x47>
    49be:	             move.l 332(sp),-(sp)
    49c2:	             jsr 53e0 <openAndVerify>
    49c8:	             lea 20(sp),sp
    49cc:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    49d0:	         /-- bne.s 49d8 <initSludge+0x46>
    49d2:	         |   clr.w d0
    49d4:	/--------|-- bra.w 5100 <initSludge+0x76e>
	if (FGetC (fp)) {
    49d8:	|        \-> move.l 288(sp),284(sp)
    49de:	|            move.l 1af0a <DOSBase>,d0
    49e4:	|            movea.l d0,a6
    49e6:	|            move.l 284(sp),d1
    49ea:	|            jsr -306(a6)
    49ee:	|            move.l d0,280(sp)
    49f2:	|            move.l 280(sp),d0
    49f6:	|  /-------- beq.w 4ba0 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    49fa:	|  |         move.l 288(sp),-(sp)
    49fe:	|  |         jsr 6bc <get2bytes>
    4a04:	|  |         addq.l #4,sp
    4a06:	|  |         move.l d0,1aed6 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    4a0c:	|  |         move.l 1aed6 <numBIFNames>,d0
    4a12:	|  |         move.l d0,276(sp)
    4a16:	|  |         clr.l 272(sp)
    4a1a:	|  |         move.l 1af02 <SysBase>,d0
    4a20:	|  |         movea.l d0,a6
    4a22:	|  |         move.l 276(sp),d0
    4a26:	|  |         move.l 272(sp),d1
    4a2a:	|  |         jsr -684(a6)
    4a2e:	|  |         move.l d0,268(sp)
    4a32:	|  |         move.l 268(sp),d0
    4a36:	|  |         move.l d0,1ae92 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    4a3c:	|  |         move.l 1ae92 <allBIFNames>,d0
    4a42:	|  |     /-- bne.s 4a4a <initSludge+0xb8>
    4a44:	|  |     |   clr.w d0
    4a46:	+--|-----|-- bra.w 5100 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    4a4a:	|  |     \-> clr.l 304(sp)
    4a4e:	|  |     /-- bra.s 4a74 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    4a50:	|  |  /--|-> move.l 1ae92 <allBIFNames>,d1
    4a56:	|  |  |  |   move.l 304(sp),d0
    4a5a:	|  |  |  |   add.l d0,d0
    4a5c:	|  |  |  |   add.l d0,d0
    4a5e:	|  |  |  |   movea.l d1,a2
    4a60:	|  |  |  |   adda.l d0,a2
    4a62:	|  |  |  |   move.l 288(sp),-(sp)
    4a66:	|  |  |  |   jsr b02 <readString>
    4a6c:	|  |  |  |   addq.l #4,sp
    4a6e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    4a70:	|  |  |  |   addq.l #1,304(sp)
    4a74:	|  |  |  \-> move.l 1aed6 <numBIFNames>,d0
    4a7a:	|  |  |      cmp.l 304(sp),d0
    4a7e:	|  |  \----- bgt.s 4a50 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    4a80:	|  |         move.l 288(sp),-(sp)
    4a84:	|  |         jsr 6bc <get2bytes>
    4a8a:	|  |         addq.l #4,sp
    4a8c:	|  |         move.l d0,1aee2 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    4a92:	|  |         move.l 1aee2 <numUserFunc>,d0
    4a98:	|  |         move.l d0,264(sp)
    4a9c:	|  |         clr.l 260(sp)
    4aa0:	|  |         move.l 1af02 <SysBase>,d0
    4aa6:	|  |         movea.l d0,a6
    4aa8:	|  |         move.l 264(sp),d0
    4aac:	|  |         move.l 260(sp),d1
    4ab0:	|  |         jsr -684(a6)
    4ab4:	|  |         move.l d0,256(sp)
    4ab8:	|  |         move.l 256(sp),d0
    4abc:	|  |         move.l d0,1ae9e <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    4ac2:	|  |         move.l 1ae9e <allUserFunc>,d0
    4ac8:	|  |     /-- bne.s 4ad0 <initSludge+0x13e>
    4aca:	|  |     |   clr.w d0
    4acc:	+--|-----|-- bra.w 5100 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    4ad0:	|  |     \-> clr.l 300(sp)
    4ad4:	|  |     /-- bra.s 4afa <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    4ad6:	|  |  /--|-> move.l 1ae9e <allUserFunc>,d1
    4adc:	|  |  |  |   move.l 300(sp),d0
    4ae0:	|  |  |  |   add.l d0,d0
    4ae2:	|  |  |  |   add.l d0,d0
    4ae4:	|  |  |  |   movea.l d1,a2
    4ae6:	|  |  |  |   adda.l d0,a2
    4ae8:	|  |  |  |   move.l 288(sp),-(sp)
    4aec:	|  |  |  |   jsr b02 <readString>
    4af2:	|  |  |  |   addq.l #4,sp
    4af4:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    4af6:	|  |  |  |   addq.l #1,300(sp)
    4afa:	|  |  |  \-> move.l 1aee2 <numUserFunc>,d0
    4b00:	|  |  |      cmp.l 300(sp),d0
    4b04:	|  |  \----- bgt.s 4ad6 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    4b06:	|  |         move.l 1aeac <gameVersion>,d0
    4b0c:	|  |         cmpi.l #258,d0
    4b12:	|  +-------- ble.w 4ba0 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    4b16:	|  |         move.l 288(sp),-(sp)
    4b1a:	|  |         jsr 6bc <get2bytes>
    4b20:	|  |         addq.l #4,sp
    4b22:	|  |         move.l d0,1aede <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    4b28:	|  |         move.l 1aede <numResourceNames>,d0
    4b2e:	|  |         add.l d0,d0
    4b30:	|  |         add.l d0,d0
    4b32:	|  |         move.l d0,252(sp)
    4b36:	|  |         clr.l 248(sp)
    4b3a:	|  |         move.l 1af02 <SysBase>,d0
    4b40:	|  |         movea.l d0,a6
    4b42:	|  |         move.l 252(sp),d0
    4b46:	|  |         move.l 248(sp),d1
    4b4a:	|  |         jsr -684(a6)
    4b4e:	|  |         move.l d0,244(sp)
    4b52:	|  |         move.l 244(sp),d0
    4b56:	|  |         move.l d0,1ae96 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    4b5c:	|  |         move.l 1ae96 <allResourceNames>,d0
    4b62:	|  |     /-- bne.s 4b6a <initSludge+0x1d8>
    4b64:	|  |     |   clr.w d0
    4b66:	+--|-----|-- bra.w 5100 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    4b6a:	|  |     \-> clr.l 296(sp)
    4b6e:	|  |     /-- bra.s 4b94 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    4b70:	|  |  /--|-> move.l 1ae96 <allResourceNames>,d1
    4b76:	|  |  |  |   move.l 296(sp),d0
    4b7a:	|  |  |  |   add.l d0,d0
    4b7c:	|  |  |  |   add.l d0,d0
    4b7e:	|  |  |  |   movea.l d1,a2
    4b80:	|  |  |  |   adda.l d0,a2
    4b82:	|  |  |  |   move.l 288(sp),-(sp)
    4b86:	|  |  |  |   jsr b02 <readString>
    4b8c:	|  |  |  |   addq.l #4,sp
    4b8e:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    4b90:	|  |  |  |   addq.l #1,296(sp)
    4b94:	|  |  |  \-> move.l 1aede <numResourceNames>,d0
    4b9a:	|  |  |      cmp.l 296(sp),d0
    4b9e:	|  |  \----- bgt.s 4b70 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    4ba0:	|  \-------> move.l #129,1aebe <input+0xa>
	input.mouseY = 100;
    4baa:	|            moveq #100,d0
    4bac:	|            move.l d0,1aec2 <input+0xe>
	winWidth = get2bytes (fp);
    4bb2:	|            move.l 288(sp),-(sp)
    4bb6:	|            jsr 6bc <get2bytes>
    4bbc:	|            addq.l #4,sp
    4bbe:	|            move.l d0,1ae56 <winWidth>
	winHeight = get2bytes (fp);
    4bc4:	|            move.l 288(sp),-(sp)
    4bc8:	|            jsr 6bc <get2bytes>
    4bce:	|            addq.l #4,sp
    4bd0:	|            move.l d0,1ae5a <winHeight>
	specialSettings = FGetC (fp);
    4bd6:	|            move.l 288(sp),240(sp)
    4bdc:	|            move.l 1af0a <DOSBase>,d0
    4be2:	|            movea.l d0,a6
    4be4:	|            move.l 240(sp),d1
    4be8:	|            jsr -306(a6)
    4bec:	|            move.l d0,236(sp)
    4bf0:	|            move.l 236(sp),d0
    4bf4:	|            move.l d0,1aee6 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    4bfa:	|            move.l 288(sp),232(sp)
    4c00:	|            move.l 1af0a <DOSBase>,d0
    4c06:	|            movea.l d0,a6
    4c08:	|            move.l 232(sp),d1
    4c0c:	|            jsr -306(a6)
    4c10:	|            move.l d0,228(sp)
    4c14:	|            move.l 228(sp),d0
    4c18:	|            move.l d0,-(sp)
    4c1a:	|            pea 3e8 <encodeFilename+0xea>
    4c1e:	|            jsr 16236 <__divsi3>
    4c24:	|            addq.l #8,sp
    4c26:	|            move.l d0,1a88e <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    4c2c:	|            move.l 288(sp),-(sp)
    4c30:	|            jsr b02 <readString>
    4c36:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    4c38:	|            move.l 288(sp),224(sp)
    4c3e:	|            move.l #110244,220(sp)
    4c46:	|            moveq #8,d1
    4c48:	|            move.l d1,216(sp)
    4c4c:	|            moveq #1,d0
    4c4e:	|            move.l d0,212(sp)
    4c52:	|            move.l 1af0a <DOSBase>,d0
    4c58:	|            movea.l d0,a6
    4c5a:	|            move.l 224(sp),d1
    4c5e:	|            move.l 220(sp),d2
    4c62:	|            move.l 216(sp),d3
    4c66:	|            move.l 212(sp),d4
    4c6a:	|            jsr -324(a6)
    4c6e:	|            move.l d0,208(sp)
    4c72:	|            move.l 208(sp),d0
    4c76:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    4c7a:	|            moveq #1,d1
    4c7c:	|            cmp.l 204(sp),d1
    4c80:	|        /-- beq.s 4c90 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    4c82:	|        |   pea 16f47 <PutChar+0xc79>
    4c88:	|        |   jsr 157fa <KPrintF>
    4c8e:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    4c90:	|        \-> move.l 1aeac <gameVersion>,d0
    4c96:	|            cmpi.l #258,d0
    4c9c:	|        /-- ble.s 4cac <initSludge+0x31a>
    4c9e:	|        |   move.l 288(sp),-(sp)
    4ca2:	|        |   jsr b02 <readString>
    4ca8:	|        |   addq.l #4,sp
    4caa:	|     /--|-- bra.s 4cc0 <initSludge+0x32e>
    4cac:	|     |  \-> pea 16f65 <PutChar+0xc97>
    4cb2:	|     |      pea 16f65 <PutChar+0xc97>
    4cb8:	|     |      jsr 12b5a <joinStrings>
    4cbe:	|     |      addq.l #8,sp
    4cc0:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    4cc4:	|            move.l 1aeac <gameVersion>,d0
    4cca:	|            cmpi.l #258,d0
    4cd0:	|     /----- ble.s 4cf2 <initSludge+0x360>
    4cd2:	|     |      move.l 288(sp),196(sp)
    4cd8:	|     |      move.l 1af0a <DOSBase>,d0
    4cde:	|     |      movea.l d0,a6
    4ce0:	|     |      move.l 196(sp),d1
    4ce4:	|     |      jsr -306(a6)
    4ce8:	|     |      move.l d0,192(sp)
    4cec:	|     |      move.l 192(sp),d0
    4cf0:	|     |  /-- bra.s 4cf4 <initSludge+0x362>
    4cf2:	|     \--|-> moveq #0,d0
    4cf4:	|        \-> move.l d0,1b03a <gameSettings+0x4>
	makeLanguageTable (fp);
    4cfa:	|            move.l 288(sp),-(sp)
    4cfe:	|            jsr 12510 <makeLanguageTable>
    4d04:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    4d06:	|            move.l 1aeac <gameVersion>,d0
    4d0c:	|            cmpi.l #261,d0
    4d12:	|        /-- ble.s 4d60 <initSludge+0x3ce>
	{
		FGetC(fp);
    4d14:	|        |   move.l 288(sp),188(sp)
    4d1a:	|        |   move.l 1af0a <DOSBase>,d0
    4d20:	|        |   movea.l d0,a6
    4d22:	|        |   move.l 188(sp),d1
    4d26:	|        |   jsr -306(a6)
    4d2a:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    4d2e:	|        |   move.l 288(sp),180(sp)
    4d34:	|        |   move.l 1af0a <DOSBase>,d0
    4d3a:	|        |   movea.l d0,a6
    4d3c:	|        |   move.l 180(sp),d1
    4d40:	|        |   jsr -306(a6)
    4d44:	|        |   move.l d0,176(sp)
		getFloat (fp);
    4d48:	|        |   move.l 288(sp),-(sp)
    4d4c:	|        |   jsr 7d8 <getFloat>
    4d52:	|        |   addq.l #4,sp
		getFloat (fp);
    4d54:	|        |   move.l 288(sp),-(sp)
    4d58:	|        |   jsr 7d8 <getFloat>
    4d5e:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    4d60:	|        \-> move.l 288(sp),-(sp)
    4d64:	|            jsr b02 <readString>
    4d6a:	|            addq.l #4,sp
    4d6c:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    4d70:	|            pea 16f66 <PutChar+0xc98>
    4d76:	|            move.l 176(sp),-(sp)
    4d7a:	|            jsr 12ada <strcmp>
    4d80:	|            addq.l #8,sp
    4d82:	|            tst.l d0
    4d84:	|        /-- beq.s 4d8c <initSludge+0x3fa>
		return FALSE;
    4d86:	|        |   clr.w d0
    4d88:	+--------|-- bra.w 5100 <initSludge+0x76e>
	}
	FreeVec( checker);
    4d8c:	|        \-> move.l 172(sp),168(sp)
    4d92:	|            move.l 1af02 <SysBase>,d0
    4d98:	|            movea.l d0,a6
    4d9a:	|            movea.l 168(sp),a1
    4d9e:	|            jsr -690(a6)
	checker = NULL;
    4da2:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    4da6:	|            move.l 288(sp),164(sp)
    4dac:	|            move.l 1af0a <DOSBase>,d0
    4db2:	|            movea.l d0,a6
    4db4:	|            move.l 164(sp),d1
    4db8:	|            jsr -306(a6)
    4dbc:	|            move.l d0,160(sp)
    4dc0:	|            move.l 160(sp),d0
    4dc4:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    4dc8:	|            moveq #0,d0
    4dca:	|            move.b 159(sp),d0
    4dce:	|            moveq #1,d1
    4dd0:	|            and.l d1,d0
    4dd2:	|        /-- beq.s 4e2a <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    4dd4:	|        |   move.l 1af0a <DOSBase>,d0
    4dda:	|        |   movea.l d0,a6
    4ddc:	|        |   jsr -60(a6)
    4de0:	|        |   move.l d0,38(sp)
    4de4:	|        |   move.l 38(sp),d0
    4de8:	|        |   move.l d0,34(sp)
    4dec:	|        |   move.l #94062,30(sp)
    4df4:	|        |   moveq #54,d0
    4df6:	|        |   move.l d0,26(sp)
    4dfa:	|        |   move.l 1af0a <DOSBase>,d0
    4e00:	|        |   movea.l d0,a6
    4e02:	|        |   move.l 34(sp),d1
    4e06:	|        |   move.l 30(sp),d2
    4e0a:	|        |   move.l 26(sp),d3
    4e0e:	|        |   jsr -48(a6)
    4e12:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    4e16:	|        |   pea 16fa5 <PutChar+0xcd7>
    4e1c:	|        |   jsr 157fa <KPrintF>
    4e22:	|        |   addq.l #4,sp
		return FALSE;
    4e24:	|        |   clr.w d0
    4e26:	+--------|-- bra.w 5100 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    4e2a:	|        \-> move.l 288(sp),-(sp)
    4e2e:	|            jsr 6bc <get2bytes>
    4e34:	|            addq.l #4,sp
    4e36:	|            move.l d0,1aeda <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    4e3c:	|            move.l 1aeda <numGlobals>,d0
    4e42:	|            lsl.l #3,d0
    4e44:	|            move.l d0,154(sp)
    4e48:	|            clr.l 150(sp)
    4e4c:	|            move.l 1af02 <SysBase>,d0
    4e52:	|            movea.l d0,a6
    4e54:	|            move.l 154(sp),d0
    4e58:	|            move.l 150(sp),d1
    4e5c:	|            jsr -684(a6)
    4e60:	|            move.l d0,146(sp)
    4e64:	|            move.l 146(sp),d0
    4e68:	|            move.l d0,1aeb0 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    4e6e:	|            move.l 1aeb0 <globalVars>,d0
    4e74:	|        /-- bne.s 4e92 <initSludge+0x500>
    4e76:	|        |   move.l 1aeda <numGlobals>,d0
    4e7c:	|        +-- ble.s 4e92 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    4e7e:	|        |   pea 16fdd <PutChar+0xd0f>
    4e84:	|        |   jsr 157fa <KPrintF>
    4e8a:	|        |   addq.l #4,sp
		return FALSE;
    4e8c:	|        |   clr.w d0
    4e8e:	+--------|-- bra.w 5100 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    4e92:	|        \-> clr.l 308(sp)
    4e96:	|        /-- bra.s 4eae <initSludge+0x51c>
    4e98:	|     /--|-> move.l 1aeb0 <globalVars>,d1
    4e9e:	|     |  |   move.l 308(sp),d0
    4ea2:	|     |  |   lsl.l #3,d0
    4ea4:	|     |  |   movea.l d1,a0
    4ea6:	|     |  |   adda.l d0,a0
    4ea8:	|     |  |   clr.l (a0)
    4eaa:	|     |  |   addq.l #1,308(sp)
    4eae:	|     |  \-> move.l 1aeda <numGlobals>,d0
    4eb4:	|     |      cmp.l 308(sp),d0
    4eb8:	|     \----- bgt.s 4e98 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    4eba:	|            move.l 1b03a <gameSettings+0x4>,d0
    4ec0:	|            clr.l -(sp)
    4ec2:	|            move.l d0,-(sp)
    4ec4:	|            move.l 296(sp),-(sp)
    4ec8:	|            jsr 5e9c <setFileIndices>
    4ece:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    4ed2:	|            pea 1 <_start+0x1>
    4ed6:	|            jsr 5b56 <getNumberedString>
    4edc:	|            addq.l #4,sp
    4ede:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    4ee2:	|            move.l 142(sp),-(sp)
    4ee6:	|            jsr 2fe <encodeFilename>
    4eec:	|            addq.l #4,sp
    4eee:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    4ef2:	|            move.l 142(sp),134(sp)
    4ef8:	|            move.l 1af02 <SysBase>,d0
    4efe:	|            movea.l d0,a6
    4f00:	|            movea.l 134(sp),a1
    4f04:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    4f08:	|            move.l 138(sp),130(sp)
    4f0e:	|            move.l 1af0a <DOSBase>,d0
    4f14:	|            movea.l d0,a6
    4f16:	|            move.l 130(sp),d1
    4f1a:	|            jsr -120(a6)
    4f1e:	|            move.l d0,126(sp)
    4f22:	|            move.l 126(sp),d0
    4f26:	|            move.l d0,292(sp)
	if(lock == 0) {
    4f2a:	|        /-- bne.s 4f58 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    4f2c:	|        |   move.l 138(sp),122(sp)
    4f32:	|        |   moveq #-2,d1
    4f34:	|        |   move.l d1,118(sp)
    4f38:	|        |   move.l 1af0a <DOSBase>,d0
    4f3e:	|        |   movea.l d0,a6
    4f40:	|        |   move.l 122(sp),d1
    4f44:	|        |   move.l 118(sp),d2
    4f48:	|        |   jsr -84(a6)
    4f4c:	|        |   move.l d0,114(sp)
    4f50:	|        |   move.l 114(sp),d0
    4f54:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    4f58:	|        \-> move.l 292(sp),110(sp)
    4f5e:	|            move.l 1af0a <DOSBase>,d0
    4f64:	|            movea.l d0,a6
    4f66:	|            move.l 110(sp),d1
    4f6a:	|            jsr -126(a6)
    4f6e:	|            move.l d0,106(sp)
    4f72:	|            move.l 106(sp),d0
    4f76:	|        /-- bne.s 4fd2 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    4f78:	|        |   move.l 138(sp),-(sp)
    4f7c:	|        |   pea 17010 <PutChar+0xd42>
    4f82:	|        |   jsr 157fa <KPrintF>
    4f88:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    4f8a:	|        |   move.l 1af0a <DOSBase>,d0
    4f90:	|        |   movea.l d0,a6
    4f92:	|        |   jsr -60(a6)
    4f96:	|        |   move.l d0,58(sp)
    4f9a:	|        |   move.l 58(sp),d0
    4f9e:	|        |   move.l d0,54(sp)
    4fa2:	|        |   move.l #94269,50(sp)
    4faa:	|        |   moveq #40,d0
    4fac:	|        |   move.l d0,46(sp)
    4fb0:	|        |   move.l 1af0a <DOSBase>,d0
    4fb6:	|        |   movea.l d0,a6
    4fb8:	|        |   move.l 54(sp),d1
    4fbc:	|        |   move.l 50(sp),d2
    4fc0:	|        |   move.l 46(sp),d3
    4fc4:	|        |   jsr -48(a6)
    4fc8:	|        |   move.l d0,42(sp)
		return FALSE;
    4fcc:	|        |   clr.w d0
    4fce:	+--------|-- bra.w 5100 <initSludge+0x76e>
	}

	FreeVec(gameName);
    4fd2:	|        \-> move.l 138(sp),102(sp)
    4fd8:	|            move.l 1af02 <SysBase>,d0
    4fde:	|            movea.l d0,a6
    4fe0:	|            movea.l 102(sp),a1
    4fe4:	|            jsr -690(a6)

	readIniFile (filename);
    4fe8:	|            move.l 316(sp),-(sp)
    4fec:	|            jsr 12644 <readIniFile>
    4ff2:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    4ff4:	|            jsr 12416 <getLanguageForFileB>
    4ffa:	|            move.l d0,1a87c <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    5000:	|            move.l 1a87c <languageNum>,d0
    5006:	|        /-- bpl.s 5016 <initSludge+0x684>
    5008:	|        |   pea 17066 <PutChar+0xd98>
    500e:	|        |   jsr 157fa <KPrintF>
    5014:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    5016:	|        \-> move.l 1a87c <languageNum>,d0
    501c:	|            move.l d0,d1
    501e:	|            move.l 1b03a <gameSettings+0x4>,d0
    5024:	|            move.l d1,-(sp)
    5026:	|            move.l d0,-(sp)
    5028:	|            clr.l -(sp)
    502a:	|            jsr 5e9c <setFileIndices>
    5030:	|            lea 12(sp),sp

	if (dataFol[0]) {
    5034:	|            movea.l 200(sp),a0
    5038:	|            move.b (a0),d0
    503a:	|     /----- beq.w 50e4 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    503e:	|     |      move.l 200(sp),-(sp)
    5042:	|     |      jsr 2fe <encodeFilename>
    5048:	|     |      addq.l #4,sp
    504a:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    504e:	|     |      move.l 98(sp),94(sp)
    5054:	|     |      move.l 1af0a <DOSBase>,d0
    505a:	|     |      movea.l d0,a6
    505c:	|     |      move.l 94(sp),d1
    5060:	|     |      jsr -120(a6)
    5064:	|     |      move.l d0,90(sp)
    5068:	|     |      move.l 90(sp),d0
    506c:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    5070:	|     |  /-- bne.s 509e <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    5072:	|     |  |   move.l 98(sp),86(sp)
    5078:	|     |  |   moveq #-2,d1
    507a:	|     |  |   move.l d1,82(sp)
    507e:	|     |  |   move.l 1af0a <DOSBase>,d0
    5084:	|     |  |   movea.l d0,a6
    5086:	|     |  |   move.l 86(sp),d1
    508a:	|     |  |   move.l 82(sp),d2
    508e:	|     |  |   jsr -84(a6)
    5092:	|     |  |   move.l d0,78(sp)
    5096:	|     |  |   move.l 78(sp),d0
    509a:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    509e:	|     |  \-> move.l 292(sp),74(sp)
    50a4:	|     |      move.l 1af0a <DOSBase>,d0
    50aa:	|     |      movea.l d0,a6
    50ac:	|     |      move.l 74(sp),d1
    50b0:	|     |      jsr -126(a6)
    50b4:	|     |      move.l d0,70(sp)
    50b8:	|     |      move.l 70(sp),d0
    50bc:	|     |  /-- bne.s 50ce <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    50be:	|     |  |   move.l 1af0a <DOSBase>,d0
    50c4:	|     |  |   movea.l d0,a6
    50c6:	|     |  |   jsr -60(a6)
    50ca:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    50ce:	|     |  \-> move.l 98(sp),62(sp)
    50d4:	|     |      move.l 1af02 <SysBase>,d0
    50da:	|     |      movea.l d0,a6
    50dc:	|     |      movea.l 62(sp),a1
    50e0:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    50e4:	|     \----> movea.l 1ae5a <winHeight>,a0
    50ea:	|            lea -15(a0),a0
    50ee:	|            move.l a0,d0
    50f0:	|            move.l d0,-(sp)
    50f2:	|            pea a <_start+0xa>
    50f6:	|            jsr 68ce <positionStatus>
    50fc:	|            addq.l #8,sp

	return TRUE;
    50fe:	|            moveq #1,d0
}
    5100:	\----------> movem.l (sp)+,d2-d4/a2/a6
    5104:	             lea 292(sp),sp
    5108:	             rts

0000510a <killSpeechTimers>:

void killSpeechTimers () {
    510a:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    510c:	          move.l 1ae9a <allRunningFunctions>,(sp)

	while (thisFunction) {
    5112:	   /----- bra.s 513e <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    5114:	/--|----> movea.l (sp),a0
    5116:	|  |      move.b 56(a0),d0
    511a:	|  |  /-- bne.s 5138 <killSpeechTimers+0x2e>
    511c:	|  |  |   movea.l (sp),a0
    511e:	|  |  |   move.w 50(a0),d0
    5122:	|  |  +-- beq.s 5138 <killSpeechTimers+0x2e>
    5124:	|  |  |   movea.l (sp),a0
    5126:	|  |  |   move.l 12(a0),d0
    512a:	|  |  +-- beq.s 5138 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    512c:	|  |  |   movea.l (sp),a0
    512e:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    5132:	|  |  |   movea.l (sp),a0
    5134:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    5138:	|  |  \-> movea.l (sp),a0
    513a:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    513e:	|  \----> tst.l (sp)
    5140:	\-------- bne.s 5114 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    5142:	          jsr 6e0c <killAllSpeech>
}
    5148:	          nop
    514a:	          addq.l #4,sp
    514c:	          rts

0000514e <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    514e:	             lea -52(sp),sp
    5152:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    5154:	             movea.l 60(sp),a0
    5158:	             move.l (a0),d0
    515a:	             move.l d0,-(sp)
    515c:	             jsr 5ddc <openSubSlice>
    5162:	             addq.l #4,sp
    5164:	             tst.w d0
    5166:	         /-- bne.s 516e <loadFunctionCode+0x20>
    5168:	         |   clr.w d0
    516a:	/--------|-- bra.w 5338 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    516e:	|        \-> move.l 1aeea <bigDataFile>,44(sp)
    5176:	|            move.l 1af0a <DOSBase>,d0
    517c:	|            movea.l d0,a6
    517e:	|            move.l 44(sp),d1
    5182:	|            jsr -306(a6)
    5186:	|            move.l d0,40(sp)
    518a:	|            move.l 40(sp),d0
    518e:	|            move.l d0,d0
    5190:	|            movea.l 60(sp),a0
    5194:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    5198:	|            move.l 1aeea <bigDataFile>,d0
    519e:	|            move.l d0,-(sp)
    51a0:	|            jsr 6bc <get2bytes>
    51a6:	|            addq.l #4,sp
    51a8:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    51ac:	|            move.l 1aeea <bigDataFile>,d0
    51b2:	|            move.l d0,-(sp)
    51b4:	|            jsr 6bc <get2bytes>
    51ba:	|            addq.l #4,sp
    51bc:	|            movea.l 60(sp),a0
    51c0:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    51c4:	|            move.l 1aeea <bigDataFile>,d0
    51ca:	|            move.l d0,-(sp)
    51cc:	|            jsr 6bc <get2bytes>
    51d2:	|            addq.l #4,sp
    51d4:	|            movea.l 60(sp),a0
    51d8:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    51dc:	|            move.l 36(sp),d0
    51e0:	|            lsl.l #3,d0
    51e2:	|            move.l d0,32(sp)
    51e6:	|            clr.l 28(sp)
    51ea:	|            move.l 1af02 <SysBase>,d0
    51f0:	|            movea.l d0,a6
    51f2:	|            move.l 32(sp),d0
    51f6:	|            move.l 28(sp),d1
    51fa:	|            jsr -684(a6)
    51fe:	|            move.l d0,24(sp)
    5202:	|            move.l 24(sp),d0
    5206:	|            movea.l 60(sp),a0
    520a:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    520e:	|            movea.l 60(sp),a0
    5212:	|            move.l 4(a0),d0
    5216:	|        /-- bne.s 522c <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    5218:	|        |   pea 17091 <PutChar+0xdc3>
    521e:	|        |   jsr 157fa <KPrintF>
    5224:	|        |   addq.l #4,sp
		return FALSE;
    5226:	|        |   clr.w d0
    5228:	+--------|-- bra.w 5338 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    522c:	|        \-> clr.l 52(sp)
    5230:	|        /-- bra.s 5292 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    5232:	|     /--|-> move.l 1aeea <bigDataFile>,8(sp)
    523a:	|     |  |   move.l 1af0a <DOSBase>,d0
    5240:	|     |  |   movea.l d0,a6
    5242:	|     |  |   move.l 8(sp),d1
    5246:	|     |  |   jsr -306(a6)
    524a:	|     |  |   move.l d0,4(sp)
    524e:	|     |  |   move.l 4(sp),d1
    5252:	|     |  |   movea.l 60(sp),a0
    5256:	|     |  |   movea.l 4(a0),a0
    525a:	|     |  |   move.l 52(sp),d0
    525e:	|     |  |   lsl.l #3,d0
    5260:	|     |  |   adda.l d0,a0
    5262:	|     |  |   move.l d1,d0
    5264:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    5266:	|     |  |   move.l 1aeea <bigDataFile>,d0
    526c:	|     |  |   move.l d0,-(sp)
    526e:	|     |  |   jsr 6bc <get2bytes>
    5274:	|     |  |   addq.l #4,sp
    5276:	|     |  |   move.l d0,d1
    5278:	|     |  |   movea.l 60(sp),a0
    527c:	|     |  |   movea.l 4(a0),a0
    5280:	|     |  |   move.l 52(sp),d0
    5284:	|     |  |   lsl.l #3,d0
    5286:	|     |  |   adda.l d0,a0
    5288:	|     |  |   move.l d1,d0
    528a:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    528e:	|     |  |   addq.l #1,52(sp)
    5292:	|     |  \-> move.l 52(sp),d0
    5296:	|     |      cmp.l 36(sp),d0
    529a:	|     \----- bcs.s 5232 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    529c:	|            jsr 5b4c <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    52a2:	|            movea.l 60(sp),a0
    52a6:	|            move.l 8(a0),d0
    52aa:	|  /-------- ble.w 532e <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    52ae:	|  |         movea.l 60(sp),a0
    52b2:	|  |         move.l 8(a0),d0
    52b6:	|  |         lsl.l #3,d0
    52b8:	|  |         move.l d0,20(sp)
    52bc:	|  |         clr.l 16(sp)
    52c0:	|  |         move.l 1af02 <SysBase>,d0
    52c6:	|  |         movea.l d0,a6
    52c8:	|  |         move.l 20(sp),d0
    52cc:	|  |         move.l 16(sp),d1
    52d0:	|  |         jsr -684(a6)
    52d4:	|  |         move.l d0,12(sp)
    52d8:	|  |         move.l 12(sp),d0
    52dc:	|  |         movea.l 60(sp),a0
    52e0:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    52e4:	|  |         movea.l 60(sp),a0
    52e8:	|  |         move.l 20(a0),d0
    52ec:	|  |     /-- bne.s 5300 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    52ee:	|  |     |   pea 17091 <PutChar+0xdc3>
    52f4:	|  |     |   jsr 157fa <KPrintF>
    52fa:	|  |     |   addq.l #4,sp
			return FALSE;
    52fc:	|  |     |   clr.w d0
    52fe:	+--|-----|-- bra.s 5338 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    5300:	|  |     \-> clr.l 48(sp)
    5304:	|  |     /-- bra.s 531e <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    5306:	|  |  /--|-> movea.l 60(sp),a0
    530a:	|  |  |  |   move.l 20(a0),d1
    530e:	|  |  |  |   move.l 48(sp),d0
    5312:	|  |  |  |   lsl.l #3,d0
    5314:	|  |  |  |   movea.l d1,a0
    5316:	|  |  |  |   adda.l d0,a0
    5318:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    531a:	|  |  |  |   addq.l #1,48(sp)
    531e:	|  |  |  \-> movea.l 60(sp),a0
    5322:	|  |  |      move.l 8(a0),d0
    5326:	|  |  |      cmp.l 48(sp),d0
    532a:	|  |  \----- bgt.s 5306 <loadFunctionCode+0x1b8>
    532c:	|  |     /-- bra.s 5336 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    532e:	|  \-----|-> movea.l 60(sp),a0
    5332:	|        |   clr.l 8(a0)
	}
	return TRUE;
    5336:	|        \-> moveq #1,d0
}
    5338:	\----------> movea.l (sp)+,a6
    533a:	             lea 52(sp),sp
    533e:	             rts

00005340 <loadHandlers>:

void loadHandlers (BPTR fp) {
    5340:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    5342:	movea.l 1a878 <currentEvents>,a2
    5348:	move.l 8(sp),-(sp)
    534c:	jsr 6bc <get2bytes>
    5352:	addq.l #4,sp
    5354:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    5356:	movea.l 1a878 <currentEvents>,a2
    535c:	move.l 8(sp),-(sp)
    5360:	jsr 6bc <get2bytes>
    5366:	addq.l #4,sp
    5368:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    536c:	movea.l 1a878 <currentEvents>,a2
    5372:	move.l 8(sp),-(sp)
    5376:	jsr 6bc <get2bytes>
    537c:	addq.l #4,sp
    537e:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    5382:	movea.l 1a878 <currentEvents>,a2
    5388:	move.l 8(sp),-(sp)
    538c:	jsr 6bc <get2bytes>
    5392:	addq.l #4,sp
    5394:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    5398:	movea.l 1a878 <currentEvents>,a2
    539e:	move.l 8(sp),-(sp)
    53a2:	jsr 6bc <get2bytes>
    53a8:	addq.l #4,sp
    53aa:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    53ae:	movea.l 1a878 <currentEvents>,a2
    53b4:	move.l 8(sp),-(sp)
    53b8:	jsr 6bc <get2bytes>
    53be:	addq.l #4,sp
    53c0:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    53c4:	movea.l 1a878 <currentEvents>,a2
    53ca:	move.l 8(sp),-(sp)
    53ce:	jsr 6bc <get2bytes>
    53d4:	addq.l #4,sp
    53d6:	move.l d0,24(a2)
}
    53da:	nop
    53dc:	movea.l (sp)+,a2
    53de:	rts

000053e0 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    53e0:	       lea -312(sp),sp
    53e4:	       movem.l d2-d3/a6,-(sp)
    53e8:	       move.l 332(sp),d1
    53ec:	       move.l 336(sp),d0
    53f0:	       move.b d1,d1
    53f2:	       move.b d1,16(sp)
    53f6:	       move.b d0,d0
    53f8:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    53fc:	       move.l 328(sp),318(sp)
    5402:	       move.l #1005,314(sp)
    540a:	       move.l 1af0a <DOSBase>,d0
    5410:	       movea.l d0,a6
    5412:	       move.l 318(sp),d1
    5416:	       move.l 314(sp),d2
    541a:	       jsr -30(a6)
    541e:	       move.l d0,310(sp)
    5422:	       move.l 310(sp),d0
    5426:	       move.l d0,306(sp)

	if (! fp) {
    542a:	   /-- bne.s 5486 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    542c:	   |   move.l 1af0a <DOSBase>,d0
    5432:	   |   movea.l d0,a6
    5434:	   |   jsr -60(a6)
    5438:	   |   move.l d0,154(sp)
    543c:	   |   move.l 154(sp),d0
    5440:	   |   move.l d0,150(sp)
    5444:	   |   move.l #94394,146(sp)
    544c:	   |   moveq #31,d0
    544e:	   |   move.l d0,142(sp)
    5452:	   |   move.l 1af0a <DOSBase>,d0
    5458:	   |   movea.l d0,a6
    545a:	   |   move.l 150(sp),d1
    545e:	   |   move.l 146(sp),d2
    5462:	   |   move.l 142(sp),d3
    5466:	   |   jsr -48(a6)
    546a:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    546e:	   |   move.l 328(sp),-(sp)
    5472:	   |   pea 170da <PutChar+0xe0c>
    5478:	   |   jsr 157fa <KPrintF>
    547e:	   |   addq.l #8,sp
		return NULL;
    5480:	   |   moveq #0,d0
    5482:	/--|-- bra.w 5746 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    5486:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    548a:	|      move.l 306(sp),302(sp)
    5490:	|      move.l 1af0a <DOSBase>,d0
    5496:	|      movea.l d0,a6
    5498:	|      move.l 302(sp),d1
    549c:	|      jsr -306(a6)
    54a0:	|      move.l d0,298(sp)
    54a4:	|      move.l 298(sp),d0
    54a8:	|      moveq #83,d1
    54aa:	|      cmp.l d0,d1
    54ac:	|  /-- beq.s 54b4 <openAndVerify+0xd4>
    54ae:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    54b4:	|  \-> move.l 306(sp),294(sp)
    54ba:	|      move.l 1af0a <DOSBase>,d0
    54c0:	|      movea.l d0,a6
    54c2:	|      move.l 294(sp),d1
    54c6:	|      jsr -306(a6)
    54ca:	|      move.l d0,290(sp)
    54ce:	|      move.l 290(sp),d0
    54d2:	|      moveq #76,d1
    54d4:	|      cmp.l d0,d1
    54d6:	|  /-- beq.s 54de <openAndVerify+0xfe>
    54d8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    54de:	|  \-> move.l 306(sp),286(sp)
    54e4:	|      move.l 1af0a <DOSBase>,d0
    54ea:	|      movea.l d0,a6
    54ec:	|      move.l 286(sp),d1
    54f0:	|      jsr -306(a6)
    54f4:	|      move.l d0,282(sp)
    54f8:	|      move.l 282(sp),d0
    54fc:	|      moveq #85,d1
    54fe:	|      cmp.l d0,d1
    5500:	|  /-- beq.s 5508 <openAndVerify+0x128>
    5502:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    5508:	|  \-> move.l 306(sp),278(sp)
    550e:	|      move.l 1af0a <DOSBase>,d0
    5514:	|      movea.l d0,a6
    5516:	|      move.l 278(sp),d1
    551a:	|      jsr -306(a6)
    551e:	|      move.l d0,274(sp)
    5522:	|      move.l 274(sp),d0
    5526:	|      moveq #68,d1
    5528:	|      cmp.l d0,d1
    552a:	|  /-- beq.s 5532 <openAndVerify+0x152>
    552c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    5532:	|  \-> move.l 306(sp),270(sp)
    5538:	|      move.l 1af0a <DOSBase>,d0
    553e:	|      movea.l d0,a6
    5540:	|      move.l 270(sp),d1
    5544:	|      jsr -306(a6)
    5548:	|      move.l d0,266(sp)
    554c:	|      move.l 266(sp),d1
    5550:	|      move.b 16(sp),d0
    5554:	|      ext.w d0
    5556:	|      movea.w d0,a0
    5558:	|      cmpa.l d1,a0
    555a:	|  /-- beq.s 5562 <openAndVerify+0x182>
    555c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    5562:	|  \-> move.l 306(sp),262(sp)
    5568:	|      move.l 1af0a <DOSBase>,d0
    556e:	|      movea.l d0,a6
    5570:	|      move.l 262(sp),d1
    5574:	|      jsr -306(a6)
    5578:	|      move.l d0,258(sp)
    557c:	|      move.l 258(sp),d1
    5580:	|      move.b 14(sp),d0
    5584:	|      ext.w d0
    5586:	|      movea.w d0,a0
    5588:	|      cmpa.l d1,a0
    558a:	|  /-- beq.s 5592 <openAndVerify+0x1b2>
    558c:	|  |   move.w #1,322(sp)
	if (headerBad) {
    5592:	|  \-> tst.w 322(sp)
    5596:	|  /-- beq.s 55ee <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    5598:	|  |   move.l 1af0a <DOSBase>,d0
    559e:	|  |   movea.l d0,a6
    55a0:	|  |   jsr -60(a6)
    55a4:	|  |   move.l d0,174(sp)
    55a8:	|  |   move.l 174(sp),d0
    55ac:	|  |   move.l d0,170(sp)
    55b0:	|  |   move.l #94457,166(sp)
    55b8:	|  |   moveq #31,d0
    55ba:	|  |   move.l d0,162(sp)
    55be:	|  |   move.l 1af0a <DOSBase>,d0
    55c4:	|  |   movea.l d0,a6
    55c6:	|  |   move.l 170(sp),d1
    55ca:	|  |   move.l 166(sp),d2
    55ce:	|  |   move.l 162(sp),d3
    55d2:	|  |   jsr -48(a6)
    55d6:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    55da:	|  |   pea 170f9 <PutChar+0xe2b>
    55e0:	|  |   jsr 157fa <KPrintF>
    55e6:	|  |   addq.l #4,sp
		return NULL;
    55e8:	|  |   moveq #0,d0
    55ea:	+--|-- bra.w 5746 <openAndVerify+0x366>
	}
	FGetC (fp);
    55ee:	|  \-> move.l 306(sp),254(sp)
    55f4:	|      move.l 1af0a <DOSBase>,d0
    55fa:	|      movea.l d0,a6
    55fc:	|      move.l 254(sp),d1
    5600:	|      jsr -306(a6)
    5604:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    5608:	|      nop
    560a:	|  /-> move.l 306(sp),246(sp)
    5610:	|  |   move.l 1af0a <DOSBase>,d0
    5616:	|  |   movea.l d0,a6
    5618:	|  |   move.l 246(sp),d1
    561c:	|  |   jsr -306(a6)
    5620:	|  |   move.l d0,242(sp)
    5624:	|  |   move.l 242(sp),d0
    5628:	|  \-- bne.s 560a <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    562a:	|      move.l 306(sp),238(sp)
    5630:	|      move.l 1af0a <DOSBase>,d0
    5636:	|      movea.l d0,a6
    5638:	|      move.l 238(sp),d1
    563c:	|      jsr -306(a6)
    5640:	|      move.l d0,234(sp)
    5644:	|      move.l 234(sp),d0
    5648:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    564c:	|      move.l 306(sp),226(sp)
    5652:	|      move.l 1af0a <DOSBase>,d0
    5658:	|      movea.l d0,a6
    565a:	|      move.l 226(sp),d1
    565e:	|      jsr -306(a6)
    5662:	|      move.l d0,222(sp)
    5666:	|      move.l 222(sp),d0
    566a:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    566e:	|      move.l 230(sp),d0
    5672:	|      lsl.l #8,d0
    5674:	|      add.l 218(sp),d0
    5678:	|      movea.l 344(sp),a0
    567c:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    567e:	|      movea.l 344(sp),a0
    5682:	|      move.l (a0),d0
    5684:	|      cmpi.l #514,d0
    568a:	|  /-- ble.s 56e0 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    568c:	|  |   move.l 1af0a <DOSBase>,d0
    5692:	|  |   movea.l d0,a6
    5694:	|  |   jsr -60(a6)
    5698:	|  |   move.l d0,194(sp)
    569c:	|  |   move.l 194(sp),d0
    56a0:	|  |   move.l d0,190(sp)
    56a4:	|  |   move.l #94484,186(sp)
    56ac:	|  |   moveq #100,d1
    56ae:	|  |   move.l d1,182(sp)
    56b2:	|  |   move.l 1af0a <DOSBase>,d0
    56b8:	|  |   movea.l d0,a6
    56ba:	|  |   move.l 190(sp),d1
    56be:	|  |   move.l 186(sp),d2
    56c2:	|  |   move.l 182(sp),d3
    56c6:	|  |   jsr -48(a6)
    56ca:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    56ce:	|  |   pea 17114 <PutChar+0xe46>
    56d4:	|  |   jsr 157fa <KPrintF>
    56da:	|  |   addq.l #4,sp
		return NULL;
    56dc:	|  |   moveq #0,d0
    56de:	+--|-- bra.s 5746 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    56e0:	|  \-> movea.l 344(sp),a0
    56e4:	|      move.l (a0),d0
    56e6:	|      cmpi.l #257,d0
    56ec:	|  /-- bgt.s 5742 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    56ee:	|  |   move.l 1af0a <DOSBase>,d0
    56f4:	|  |   movea.l d0,a6
    56f6:	|  |   jsr -60(a6)
    56fa:	|  |   move.l d0,214(sp)
    56fe:	|  |   move.l 214(sp),d0
    5702:	|  |   move.l d0,210(sp)
    5706:	|  |   move.l #94553,206(sp)
    570e:	|  |   moveq #100,d0
    5710:	|  |   move.l d0,202(sp)
    5714:	|  |   move.l 1af0a <DOSBase>,d0
    571a:	|  |   movea.l d0,a6
    571c:	|  |   move.l 210(sp),d1
    5720:	|  |   move.l 206(sp),d2
    5724:	|  |   move.l 202(sp),d3
    5728:	|  |   jsr -48(a6)
    572c:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    5730:	|  |   pea 17159 <PutChar+0xe8b>
    5736:	|  |   jsr 157fa <KPrintF>
    573c:	|  |   addq.l #4,sp
		return NULL;
    573e:	|  |   moveq #0,d0
    5740:	+--|-- bra.s 5746 <openAndVerify+0x366>
	}
	return fp;
    5742:	|  \-> move.l 306(sp),d0
}
    5746:	\----> movem.l (sp)+,d2-d3/a6
    574a:	       lea 312(sp),sp
    574e:	       rts

00005750 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    5750:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    5752:	          move.l #110234,(sp)
	while (* huntAndDestroy) {
    5758:	   /----- bra.s 5784 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    575a:	/--|----> movea.l (sp),a0
    575c:	|  |      move.l (a0),d0
    575e:	|  |      cmp.l 8(sp),d0
    5762:	|  |  /-- bne.s 577a <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    5764:	|  |  |   movea.l (sp),a0
    5766:	|  |  |   movea.l (a0),a0
    5768:	|  |  |   move.l 44(a0),d0
    576c:	|  |  |   movea.l (sp),a0
    576e:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    5770:	|  |  |   movea.l 8(sp),a0
    5774:	|  |  |   clr.l 44(a0)
    5778:	|  +--|-- bra.s 5784 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    577a:	|  |  \-> movea.l (sp),a0
    577c:	|  |      move.l (a0),d0
    577e:	|  |      moveq #44,d1
    5780:	|  |      add.l d0,d1
    5782:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    5784:	|  \----> movea.l (sp),a0
    5786:	|         move.l (a0),d0
    5788:	\-------- bne.s 575a <pauseFunction+0xa>
		}
	}
}
    578a:	          nop
    578c:	          nop
    578e:	          addq.l #4,sp
    5790:	          rts

00005792 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    5792:	move.l 1ae9a <allRunningFunctions>,d0
    5798:	movea.l 4(sp),a0
    579c:	move.l d0,44(a0)
	allRunningFunctions = fun;
    57a0:	move.l 4(sp),1ae9a <allRunningFunctions>
}
    57a8:	nop
    57aa:	rts

000057ac <runSludge>:

BOOL runSludge () {
    57ac:	                   lea -12(sp),sp
    57b0:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    57b2:	                   move.l 1ae9a <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    57ba:	      /----------- bra.s 5836 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    57bc:	   /--|----------> movea.l 12(sp),a0
    57c0:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    57c6:	   |  |            movea.l 12(sp),a0
    57ca:	   |  |            move.b 56(a0),d0
    57ce:	   |  |  /-------- bne.s 5830 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    57d0:	   |  |  |         movea.l 12(sp),a0
    57d4:	   |  |  |         move.l 12(a0),d0
    57d8:	   |  |  |  /----- beq.s 5802 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    57da:	   |  |  |  |      movea.l 12(sp),a0
    57de:	   |  |  |  |      move.l 12(a0),d0
    57e2:	   |  |  |  |  /-- bpl.s 57ee <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    57e4:	   |  |  |  |  |   movea.l 12(sp),a0
    57e8:	   |  |  |  |  |   clr.l 12(a0)
    57ec:	   |  |  +--|--|-- bra.s 5830 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    57ee:	   |  |  |  |  \-> movea.l 12(sp),a0
    57f2:	   |  |  |  |      move.l 12(a0),d0
    57f6:	   |  |  |  |      subq.l #1,d0
    57f8:	   |  |  |  |      movea.l 12(sp),a0
    57fc:	   |  |  |  |      move.l d0,12(a0)
    5800:	   |  |  +--|----- bra.s 5830 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    5802:	   |  |  |  \----> movea.l 12(sp),a0
    5806:	   |  |  |         move.w 50(a0),d0
    580a:	   |  |  |     /-- beq.s 581a <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    580c:	   |  |  |     |   movea.l 12(sp),a0
    5810:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    5814:	   |  |  |     |   jsr 6e0c <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    581a:	   |  |  |     \-> move.l 12(sp),-(sp)
    581e:	   |  |  |         jsr 3796 <continueFunction>
    5824:	   |  |  |         addq.l #4,sp
    5826:	   |  |  |         tst.w d0
    5828:	   |  |  +-------- bne.s 5830 <runSludge+0x84>
					return FALSE;
    582a:	   |  |  |         clr.w d0
    582c:	/--|--|--|-------- bra.w 58bc <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    5830:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    5836:	|  |  \----------> tst.l 12(sp)
    583a:	|  \-------------- bne.s 57bc <runSludge+0x10>
	}

	if (loadNow) {
    583c:	|                  move.l 1aece <loadNow>,d0
    5842:	|        /-------- beq.s 58ba <runSludge+0x10e>
		if (loadNow[0] == ':') {
    5844:	|        |         movea.l 1aece <loadNow>,a0
    584a:	|        |         move.b (a0),d0
    584c:	|        |         cmpi.b #58,d0
    5850:	|        |  /----- bne.s 5884 <runSludge+0xd8>
			saveGame (loadNow + 1);
    5852:	|        |  |      move.l 1aece <loadNow>,d0
    5858:	|        |  |      addq.l #1,d0
    585a:	|        |  |      move.l d0,-(sp)
    585c:	|        |  |      jsr b63e <saveGame>
    5862:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    5864:	|        |  |      movea.l 1b024 <saverFunc>,a0
    586a:	|        |  |      lea 28(a0),a0
    586e:	|        |  |      pea 1 <_start+0x1>
    5872:	|        |  |      pea 1 <_start+0x1>
    5876:	|        |  |      move.l a0,-(sp)
    5878:	|        |  |      jsr 13f20 <setVariable>
    587e:	|        |  |      lea 12(sp),sp
    5882:	|        |  |  /-- bra.s 589c <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    5884:	|        |  \--|-> move.l 1aece <loadNow>,d0
    588a:	|        |     |   move.l d0,-(sp)
    588c:	|        |     |   jsr b186 <loadGame>
    5892:	|        |     |   addq.l #4,sp
    5894:	|        |     |   tst.w d0
    5896:	|        |     +-- bne.s 589c <runSludge+0xf0>
    5898:	|        |     |   clr.w d0
    589a:	+--------|-----|-- bra.s 58bc <runSludge+0x110>
		}
		FreeVec(loadNow);
    589c:	|        |     \-> move.l 1aece <loadNow>,8(sp)
    58a4:	|        |         move.l 1af02 <SysBase>,d0
    58aa:	|        |         movea.l d0,a6
    58ac:	|        |         movea.l 8(sp),a1
    58b0:	|        |         jsr -690(a6)
		loadNow = NULL;
    58b4:	|        |         clr.l 1aece <loadNow>
	}

	return TRUE;
    58ba:	|        \-------> moveq #1,d0
}
    58bc:	\----------------> movea.l (sp)+,a6
    58be:	                   lea 12(sp),sp
    58c2:	                   rts

000058c4 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    58c4:	movea.l 1a878 <currentEvents>,a0
    58ca:	move.l (a0),d0
    58cc:	move.l 4(sp),-(sp)
    58d0:	move.l d0,-(sp)
    58d2:	jsr 8d0 <put2bytes>
    58d8:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    58da:	movea.l 1a878 <currentEvents>,a0
    58e0:	move.l 4(a0),d0
    58e4:	move.l 4(sp),-(sp)
    58e8:	move.l d0,-(sp)
    58ea:	jsr 8d0 <put2bytes>
    58f0:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    58f2:	movea.l 1a878 <currentEvents>,a0
    58f8:	move.l 8(a0),d0
    58fc:	move.l 4(sp),-(sp)
    5900:	move.l d0,-(sp)
    5902:	jsr 8d0 <put2bytes>
    5908:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    590a:	movea.l 1a878 <currentEvents>,a0
    5910:	move.l 12(a0),d0
    5914:	move.l 4(sp),-(sp)
    5918:	move.l d0,-(sp)
    591a:	jsr 8d0 <put2bytes>
    5920:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    5922:	movea.l 1a878 <currentEvents>,a0
    5928:	move.l 16(a0),d0
    592c:	move.l 4(sp),-(sp)
    5930:	move.l d0,-(sp)
    5932:	jsr 8d0 <put2bytes>
    5938:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    593a:	movea.l 1a878 <currentEvents>,a0
    5940:	move.l 20(a0),d0
    5944:	move.l 4(sp),-(sp)
    5948:	move.l d0,-(sp)
    594a:	jsr 8d0 <put2bytes>
    5950:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    5952:	movea.l 1a878 <currentEvents>,a0
    5958:	move.l 24(a0),d0
    595c:	move.l 4(sp),-(sp)
    5960:	move.l d0,-(sp)
    5962:	jsr 8d0 <put2bytes>
    5968:	addq.l #8,sp
}
    596a:	nop
    596c:	rts

0000596e <sludgeDisplay>:

void sludgeDisplay () {					
    596e:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    5970:	move.l #14675968,(sp)
	displayCursor();
    5976:	jsr dba <displayCursor>
	CstDrawBackdrop();
    597c:	jsr 160e <CstDrawBackdrop>
	CstRestoreScreen();
    5982:	jsr 1aea <CstRestoreScreen>
	drawPeople();
    5988:	jsr 9046 <drawPeople>
	CstSwapBuffer();
    598e:	jsr 2764 <CstSwapBuffer>
}
    5994:	nop
    5996:	addq.l #4,sp
    5998:	rts

0000599a <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    599a:	      /-- bra.s 59ba <stackSetByIndex+0x20>
		vS = vS->next;
    599c:	/-----|-> movea.l 4(sp),a0
    59a0:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    59a6:	|     +-- bne.s 59ba <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    59a8:	|     |   pea 171a0 <PutChar+0xed2>
    59ae:	|     |   jsr 157fa <KPrintF>
    59b4:	|     |   addq.l #4,sp
			return FALSE;
    59b6:	|     |   clr.w d0
    59b8:	|  /--|-- bra.s 59dc <stackSetByIndex+0x42>
	while (theIndex--) {
    59ba:	|  |  \-> move.l 8(sp),d0
    59be:	|  |      move.l d0,d1
    59c0:	|  |      subq.l #1,d1
    59c2:	|  |      move.l d1,8(sp)
    59c6:	|  |      tst.l d0
    59c8:	\--|----- bne.s 599c <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    59ca:	   |      move.l 4(sp),d0
    59ce:	   |      move.l d0,-(sp)
    59d0:	   |      move.l 16(sp),-(sp)
    59d4:	   |      jsr 13ae8 <copyVariable>
    59da:	   |      addq.l #8,sp
}
    59dc:	   \----> rts

000059de <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    59de:	             lea -24(sp),sp
    59e2:	             move.l a6,-(sp)
    59e4:	             move.l 48(sp),d0
    59e8:	             move.w d0,d0
    59ea:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    59ee:	             moveq #58,d0
    59f0:	             move.l d0,24(sp)
    59f4:	             clr.l 20(sp)
    59f8:	             move.l 1af02 <SysBase>,d0
    59fe:	             movea.l d0,a6
    5a00:	             move.l 24(sp),d0
    5a04:	             move.l 20(sp),d1
    5a08:	             jsr -684(a6)
    5a0c:	             move.l d0,16(sp)
    5a10:	             move.l 16(sp),d0
    5a14:	             move.l d0,12(sp)
	if(!newFunc) {
    5a18:	         /-- bne.s 5a2e <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    5a1a:	         |   pea 171b9 <PutChar+0xeeb>
    5a20:	         |   jsr 157fa <KPrintF>
    5a26:	         |   addq.l #4,sp
		return 0;
    5a28:	         |   moveq #0,d0
    5a2a:	/--------|-- bra.w 5b44 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    5a2e:	|        \-> move.l 32(sp),d0
    5a32:	|            movea.l 12(sp),a0
    5a36:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    5a38:	|            move.l 12(sp),-(sp)
    5a3c:	|            jsr 514e <loadFunctionCode>
    5a42:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    5a44:	|            movea.l 12(sp),a0
    5a48:	|            move.l 16(a0),d1
    5a4c:	|            move.l 36(sp),d0
    5a50:	|            cmp.l d1,d0
    5a52:	|        /-- beq.s 5a68 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    5a54:	|        |   pea 171e2 <PutChar+0xf14>
    5a5a:	|        |   jsr 157fa <KPrintF>
    5a60:	|        |   addq.l #4,sp
		return NULL; 
    5a62:	|        |   moveq #0,d0
    5a64:	+--------|-- bra.w 5b44 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    5a68:	|        \-> movea.l 12(sp),a0
    5a6c:	|            move.l 16(a0),d1
    5a70:	|            movea.l 12(sp),a0
    5a74:	|            move.l 8(a0),d0
    5a78:	|            cmp.l d1,d0
    5a7a:	|  /-------- bge.s 5ae4 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    5a7c:	|  |         pea 171fe <PutChar+0xf30>
    5a82:	|  |         jsr 157fa <KPrintF>
    5a88:	|  |         addq.l #4,sp
		return NULL; 
    5a8a:	|  |         moveq #0,d0
    5a8c:	+--|-------- bra.w 5b44 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    5a90:	|  |  /----> movea.l 44(sp),a0
    5a94:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    5a98:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    5a9c:	|  |  |      movea.l 44(sp),a0
    5aa0:	|  |  |      move.l (a0),d0
    5aa2:	|  |  |  /-- bne.s 5ab8 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    5aa4:	|  |  |  |   pea 17228 <PutChar+0xf5a>
    5aaa:	|  |  |  |   jsr 157fa <KPrintF>
    5ab0:	|  |  |  |   addq.l #4,sp
			return NULL;
    5ab2:	|  |  |  |   moveq #0,d0
    5ab4:	+--|--|--|-- bra.w 5b44 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    5ab8:	|  |  |  \-> movea.l 12(sp),a0
    5abc:	|  |  |      move.l 20(a0),d1
    5ac0:	|  |  |      move.l 36(sp),d0
    5ac4:	|  |  |      lsl.l #3,d0
    5ac6:	|  |  |      add.l d0,d1
    5ac8:	|  |  |      move.l 8(sp),d0
    5acc:	|  |  |      move.l d1,-(sp)
    5ace:	|  |  |      move.l d0,-(sp)
    5ad0:	|  |  |      jsr 13ae8 <copyVariable>
    5ad6:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    5ad8:	|  |  |      move.l 44(sp),-(sp)
    5adc:	|  |  |      jsr 13fb2 <trimStack>
    5ae2:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    5ae4:	|  \--|----> tst.l 36(sp)
    5ae8:	|     \----- bne.s 5a90 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    5aea:	|            movea.l 12(sp),a0
    5aee:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    5af2:	|            movea.l 12(sp),a0
    5af6:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    5afa:	|            movea.l 12(sp),a0
    5afe:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    5b04:	|            movea.l 12(sp),a0
    5b08:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    5b0e:	|            movea.l 12(sp),a0
    5b12:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    5b16:	|            movea.l 12(sp),a0
    5b1a:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    5b1e:	|            movea.l 12(sp),a0
    5b22:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    5b26:	|            movea.l 12(sp),a0
    5b2a:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    5b2e:	|            movea.l 12(sp),a0
    5b32:	|            clr.l 28(a0)

	restartFunction (newFunc);
    5b36:	|            move.l 12(sp),-(sp)
    5b3a:	|            jsr 5792 <restartFunction>
    5b40:	|            addq.l #4,sp
	return 1;
    5b42:	|            moveq #1,d0
}
    5b44:	\----------> movea.l (sp)+,a6
    5b46:	             lea 24(sp),sp
    5b4a:	             rts

00005b4c <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    5b4c:	clr.w 1a884 <sliceBusy>
}
    5b52:	nop
    5b54:	rts

00005b56 <getNumberedString>:

char * getNumberedString (int value) {
    5b56:	       lea -56(sp),sp
    5b5a:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    5b5e:	       move.w 1a884 <sliceBusy>,d0
    5b64:	   /-- beq.s 5bae <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    5b66:	   |   move.l 1af0a <DOSBase>,d0
    5b6c:	   |   movea.l d0,a6
    5b6e:	   |   jsr -60(a6)
    5b72:	   |   move.l d0,28(sp)
    5b76:	   |   move.l 28(sp),d0
    5b7a:	   |   move.l d0,24(sp)
    5b7e:	   |   move.l #94835,20(sp)
    5b86:	   |   moveq #76,d0
    5b88:	   |   move.l d0,16(sp)
    5b8c:	   |   move.l 1af0a <DOSBase>,d0
    5b92:	   |   movea.l d0,a6
    5b94:	   |   move.l 24(sp),d1
    5b98:	   |   move.l 20(sp),d2
    5b9c:	   |   move.l 16(sp),d3
    5ba0:	   |   jsr -48(a6)
    5ba4:	   |   move.l d0,12(sp)
		return NULL;
    5ba8:	   |   moveq #0,d0
    5baa:	/--|-- bra.w 5c4a <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    5bae:	|  \-> move.l 1aeea <bigDataFile>,64(sp)
    5bb6:	|      move.l 72(sp),d0
    5bba:	|      add.l d0,d0
    5bbc:	|      add.l d0,d0
    5bbe:	|      move.l d0,d1
    5bc0:	|      move.l 1aef6 <startOfTextIndex>,d0
    5bc6:	|      add.l d1,d0
    5bc8:	|      move.l d0,60(sp)
    5bcc:	|      moveq #-1,d0
    5bce:	|      move.l d0,56(sp)
    5bd2:	|      move.l 1af0a <DOSBase>,d0
    5bd8:	|      movea.l d0,a6
    5bda:	|      move.l 64(sp),d1
    5bde:	|      move.l 60(sp),d2
    5be2:	|      move.l 56(sp),d3
    5be6:	|      jsr -66(a6)
    5bea:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    5bee:	|      move.l 1aeea <bigDataFile>,d0
    5bf4:	|      move.l d0,-(sp)
    5bf6:	|      jsr 718 <get4bytes>
    5bfc:	|      addq.l #4,sp
    5bfe:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    5c02:	|      move.l 1aeea <bigDataFile>,48(sp)
    5c0a:	|      move.l 72(sp),44(sp)
    5c10:	|      moveq #-1,d0
    5c12:	|      move.l d0,40(sp)
    5c16:	|      move.l 1af0a <DOSBase>,d0
    5c1c:	|      movea.l d0,a6
    5c1e:	|      move.l 48(sp),d1
    5c22:	|      move.l 44(sp),d2
    5c26:	|      move.l 40(sp),d3
    5c2a:	|      jsr -66(a6)
    5c2e:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    5c32:	|      move.l 1aeea <bigDataFile>,d0
    5c38:	|      move.l d0,-(sp)
    5c3a:	|      jsr b02 <readString>
    5c40:	|      addq.l #4,sp
    5c42:	|      move.l d0,32(sp)
	
	return s;
    5c46:	|      move.l 32(sp),d0
}
    5c4a:	\----> movem.l (sp)+,d2-d3/a6
    5c4e:	       lea 56(sp),sp
    5c52:	       rts

00005c54 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    5c54:	       lea -32(sp),sp
    5c58:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    5c5c:	       move.w 1a884 <sliceBusy>,d0
    5c62:	   /-- beq.s 5c7e <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5c64:	   |   pea 172c0 <PutChar+0xff2>
    5c6a:	   |   pea 172de <PutChar+0x1010>
    5c70:	   |   jsr 157fa <KPrintF>
    5c76:	   |   addq.l #8,sp
		return 0;
    5c78:	   |   moveq #0,d0
    5c7a:	/--|-- bra.w 5d12 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    5c7e:	|  \-> move.l 1aeea <bigDataFile>,40(sp)
    5c86:	|      move.l 48(sp),d0
    5c8a:	|      add.l d0,d0
    5c8c:	|      add.l d0,d0
    5c8e:	|      move.l d0,d1
    5c90:	|      move.l 1aef2 <startOfDataIndex>,d0
    5c96:	|      add.l d1,d0
    5c98:	|      move.l d0,36(sp)
    5c9c:	|      moveq #-1,d0
    5c9e:	|      move.l d0,32(sp)
    5ca2:	|      move.l 1af0a <DOSBase>,d0
    5ca8:	|      movea.l d0,a6
    5caa:	|      move.l 40(sp),d1
    5cae:	|      move.l 36(sp),d2
    5cb2:	|      move.l 32(sp),d3
    5cb6:	|      jsr -66(a6)
    5cba:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    5cbe:	|      move.l 1aeea <bigDataFile>,24(sp)
    5cc6:	|      move.l 1aeea <bigDataFile>,d0
    5ccc:	|      move.l d0,-(sp)
    5cce:	|      jsr 718 <get4bytes>
    5cd4:	|      addq.l #4,sp
    5cd6:	|      move.l d0,20(sp)
    5cda:	|      clr.l 16(sp)
    5cde:	|      move.l 1af0a <DOSBase>,d0
    5ce4:	|      movea.l d0,a6
    5ce6:	|      move.l 24(sp),d1
    5cea:	|      move.l 20(sp),d2
    5cee:	|      move.l 16(sp),d3
    5cf2:	|      jsr -66(a6)
    5cf6:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    5cfa:	|      move.w #1,1a884 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    5d02:	|      move.l 1aeea <bigDataFile>,d0
    5d08:	|      move.l d0,-(sp)
    5d0a:	|      jsr 718 <get4bytes>
    5d10:	|      addq.l #4,sp
}
    5d12:	\----> movem.l (sp)+,d2-d3/a6
    5d16:	       lea 32(sp),sp
    5d1a:	       rts

00005d1c <openObjectSlice>:

BOOL openObjectSlice (int num) {
    5d1c:	       lea -32(sp),sp
    5d20:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    5d24:	       move.w 1a884 <sliceBusy>,d0
    5d2a:	   /-- beq.s 5d46 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    5d2c:	   |   pea 172c0 <PutChar+0xff2>
    5d32:	   |   pea 172de <PutChar+0x1010>
    5d38:	   |   jsr 157fa <KPrintF>
    5d3e:	   |   addq.l #8,sp
        return FALSE;
    5d40:	   |   clr.w d0
    5d42:	/--|-- bra.w 5dd2 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    5d46:	|  \-> move.l 1aeea <bigDataFile>,40(sp)
    5d4e:	|      move.l 48(sp),d0
    5d52:	|      add.l d0,d0
    5d54:	|      add.l d0,d0
    5d56:	|      move.l d0,d1
    5d58:	|      move.l 1aefe <startOfObjectIndex>,d0
    5d5e:	|      add.l d1,d0
    5d60:	|      move.l d0,36(sp)
    5d64:	|      moveq #-1,d0
    5d66:	|      move.l d0,32(sp)
    5d6a:	|      move.l 1af0a <DOSBase>,d0
    5d70:	|      movea.l d0,a6
    5d72:	|      move.l 40(sp),d1
    5d76:	|      move.l 36(sp),d2
    5d7a:	|      move.l 32(sp),d3
    5d7e:	|      jsr -66(a6)
    5d82:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    5d86:	|      move.l 1aeea <bigDataFile>,24(sp)
    5d8e:	|      move.l 1aeea <bigDataFile>,d0
    5d94:	|      move.l d0,-(sp)
    5d96:	|      jsr 718 <get4bytes>
    5d9c:	|      addq.l #4,sp
    5d9e:	|      move.l d0,20(sp)
    5da2:	|      moveq #-1,d0
    5da4:	|      move.l d0,16(sp)
    5da8:	|      move.l 1af0a <DOSBase>,d0
    5dae:	|      movea.l d0,a6
    5db0:	|      move.l 24(sp),d1
    5db4:	|      move.l 20(sp),d2
    5db8:	|      move.l 16(sp),d3
    5dbc:	|      jsr -66(a6)
    5dc0:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    5dc4:	|      move.w #1,1a884 <sliceBusy>
    5dcc:	|      move.w 1a884 <sliceBusy>,d0
}
    5dd2:	\----> movem.l (sp)+,d2-d3/a6
    5dd6:	       lea 32(sp),sp
    5dda:	       rts

00005ddc <openSubSlice>:

BOOL openSubSlice (int num) {
    5ddc:	       lea -32(sp),sp
    5de0:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    5de4:	       move.w 1a884 <sliceBusy>,d0
    5dea:	   /-- beq.s 5e06 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5dec:	   |   pea 172c0 <PutChar+0xff2>
    5df2:	   |   pea 172de <PutChar+0x1010>
    5df8:	   |   jsr 157fa <KPrintF>
    5dfe:	   |   addq.l #8,sp
		return FALSE;
    5e00:	   |   clr.w d0
    5e02:	/--|-- bra.w 5e92 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    5e06:	|  \-> move.l 1aeea <bigDataFile>,40(sp)
    5e0e:	|      move.l 48(sp),d0
    5e12:	|      add.l d0,d0
    5e14:	|      add.l d0,d0
    5e16:	|      move.l d0,d1
    5e18:	|      move.l 1aefa <startOfSubIndex>,d0
    5e1e:	|      add.l d1,d0
    5e20:	|      move.l d0,36(sp)
    5e24:	|      moveq #-1,d0
    5e26:	|      move.l d0,32(sp)
    5e2a:	|      move.l 1af0a <DOSBase>,d0
    5e30:	|      movea.l d0,a6
    5e32:	|      move.l 40(sp),d1
    5e36:	|      move.l 36(sp),d2
    5e3a:	|      move.l 32(sp),d3
    5e3e:	|      jsr -66(a6)
    5e42:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    5e46:	|      move.l 1aeea <bigDataFile>,24(sp)
    5e4e:	|      move.l 1aeea <bigDataFile>,d0
    5e54:	|      move.l d0,-(sp)
    5e56:	|      jsr 718 <get4bytes>
    5e5c:	|      addq.l #4,sp
    5e5e:	|      move.l d0,20(sp)
    5e62:	|      moveq #-1,d0
    5e64:	|      move.l d0,16(sp)
    5e68:	|      move.l 1af0a <DOSBase>,d0
    5e6e:	|      movea.l d0,a6
    5e70:	|      move.l 24(sp),d1
    5e74:	|      move.l 20(sp),d2
    5e78:	|      move.l 16(sp),d3
    5e7c:	|      jsr -66(a6)
    5e80:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    5e84:	|      move.w #1,1a884 <sliceBusy>
    5e8c:	|      move.w 1a884 <sliceBusy>,d0
}
    5e92:	\----> movem.l (sp)+,d2-d3/a6
    5e96:	       lea 32(sp),sp
    5e9a:	       rts

00005e9c <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    5e9c:	       lea -180(sp),sp
    5ea0:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    5ea4:	       tst.l 196(sp)
    5ea8:	/----- beq.s 5ee8 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    5eaa:	|      move.l 196(sp),1aeea <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    5eb2:	|      move.l 196(sp),168(sp)
    5eb8:	|      clr.l 164(sp)
    5ebc:	|      clr.l 160(sp)
    5ec0:	|      move.l 1af0a <DOSBase>,d0
    5ec6:	|      movea.l d0,a6
    5ec8:	|      move.l 168(sp),d1
    5ecc:	|      move.l 164(sp),d2
    5ed0:	|      move.l 160(sp),d3
    5ed4:	|      jsr -66(a6)
    5ed8:	|      move.l d0,156(sp)
    5edc:	|      move.l 156(sp),d0
    5ee0:	|      move.l d0,1aeee <startIndex>
    5ee6:	|  /-- bra.s 5f22 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    5ee8:	\--|-> move.l 1aeea <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    5ef0:	   |   move.l 196(sp),184(sp)
    5ef6:	   |   move.l 1aeee <startIndex>,d0
    5efc:	   |   move.l d0,180(sp)
    5f00:	   |   moveq #-1,d0
    5f02:	   |   move.l d0,176(sp)
    5f06:	   |   move.l 1af0a <DOSBase>,d0
    5f0c:	   |   movea.l d0,a6
    5f0e:	   |   move.l 184(sp),d1
    5f12:	   |   move.l 180(sp),d2
    5f16:	   |   move.l 176(sp),d3
    5f1a:	   |   jsr -66(a6)
    5f1e:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    5f22:	   \-> clr.w 1a884 <sliceBusy>

	if (skipBefore > numLanguages) {
    5f28:	       move.l 204(sp),d0
    5f2c:	       cmp.l 200(sp),d0
    5f30:	   /-- bls.s 5f44 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    5f32:	   |   pea 172f8 <PutChar+0x102a>
    5f38:	   |   jsr 157fa <KPrintF>
    5f3e:	   |   addq.l #4,sp
		skipBefore = 0;
    5f40:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    5f44:	   \-> move.l 200(sp),d0
    5f48:	       sub.l 204(sp),d0
    5f4c:	       move.l d0,188(sp)
	while (skipBefore) {
    5f50:	   /-- bra.s 5f8e <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    5f52:	/--|-> move.l 196(sp),24(sp)
    5f58:	|  |   move.l 196(sp),-(sp)
    5f5c:	|  |   jsr 718 <get4bytes>
    5f62:	|  |   addq.l #4,sp
    5f64:	|  |   move.l d0,20(sp)
    5f68:	|  |   moveq #-1,d0
    5f6a:	|  |   move.l d0,16(sp)
    5f6e:	|  |   move.l 1af0a <DOSBase>,d0
    5f74:	|  |   movea.l d0,a6
    5f76:	|  |   move.l 24(sp),d1
    5f7a:	|  |   move.l 20(sp),d2
    5f7e:	|  |   move.l 16(sp),d3
    5f82:	|  |   jsr -66(a6)
    5f86:	|  |   move.l d0,12(sp)
		skipBefore --;
    5f8a:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    5f8e:	|  \-> tst.l 204(sp)
    5f92:	\----- bne.s 5f52 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    5f94:	       move.l 196(sp),152(sp)
    5f9a:	       clr.l 148(sp)
    5f9e:	       clr.l 144(sp)
    5fa2:	       move.l 1af0a <DOSBase>,d0
    5fa8:	       movea.l d0,a6
    5faa:	       move.l 152(sp),d1
    5fae:	       move.l 148(sp),d2
    5fb2:	       move.l 144(sp),d3
    5fb6:	       jsr -66(a6)
    5fba:	       move.l d0,140(sp)
    5fbe:	       move.l 140(sp),d0
    5fc2:	       addq.l #4,d0
    5fc4:	       move.l d0,1aef6 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    5fca:	       move.l 196(sp),136(sp)
    5fd0:	       move.l 196(sp),-(sp)
    5fd4:	       jsr 718 <get4bytes>
    5fda:	       addq.l #4,sp
    5fdc:	       move.l d0,132(sp)
    5fe0:	       moveq #-1,d0
    5fe2:	       move.l d0,128(sp)
    5fe6:	       move.l 1af0a <DOSBase>,d0
    5fec:	       movea.l d0,a6
    5fee:	       move.l 136(sp),d1
    5ff2:	       move.l 132(sp),d2
    5ff6:	       move.l 128(sp),d3
    5ffa:	       jsr -66(a6)
    5ffe:	       move.l d0,124(sp)

	while (skipAfter) {
    6002:	   /-- bra.s 6040 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    6004:	/--|-> move.l 196(sp),40(sp)
    600a:	|  |   move.l 196(sp),-(sp)
    600e:	|  |   jsr 718 <get4bytes>
    6014:	|  |   addq.l #4,sp
    6016:	|  |   move.l d0,36(sp)
    601a:	|  |   moveq #-1,d0
    601c:	|  |   move.l d0,32(sp)
    6020:	|  |   move.l 1af0a <DOSBase>,d0
    6026:	|  |   movea.l d0,a6
    6028:	|  |   move.l 40(sp),d1
    602c:	|  |   move.l 36(sp),d2
    6030:	|  |   move.l 32(sp),d3
    6034:	|  |   jsr -66(a6)
    6038:	|  |   move.l d0,28(sp)
		skipAfter --;
    603c:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    6040:	|  \-> tst.l 188(sp)
    6044:	\----- bne.s 6004 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6046:	       move.l 196(sp),120(sp)
    604c:	       clr.l 116(sp)
    6050:	       clr.l 112(sp)
    6054:	       move.l 1af0a <DOSBase>,d0
    605a:	       movea.l d0,a6
    605c:	       move.l 120(sp),d1
    6060:	       move.l 116(sp),d2
    6064:	       move.l 112(sp),d3
    6068:	       jsr -66(a6)
    606c:	       move.l d0,108(sp)
    6070:	       move.l 108(sp),d0
    6074:	       addq.l #4,d0
    6076:	       move.l d0,1aefa <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    607c:	       move.l 196(sp),104(sp)
    6082:	       move.l 196(sp),-(sp)
    6086:	       jsr 718 <get4bytes>
    608c:	       addq.l #4,sp
    608e:	       move.l d0,100(sp)
    6092:	       clr.l 96(sp)
    6096:	       move.l 1af0a <DOSBase>,d0
    609c:	       movea.l d0,a6
    609e:	       move.l 104(sp),d1
    60a2:	       move.l 100(sp),d2
    60a6:	       move.l 96(sp),d3
    60aa:	       jsr -66(a6)
    60ae:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    60b2:	       move.l 196(sp),88(sp)
    60b8:	       clr.l 84(sp)
    60bc:	       clr.l 80(sp)
    60c0:	       move.l 1af0a <DOSBase>,d0
    60c6:	       movea.l d0,a6
    60c8:	       move.l 88(sp),d1
    60cc:	       move.l 84(sp),d2
    60d0:	       move.l 80(sp),d3
    60d4:	       jsr -66(a6)
    60d8:	       move.l d0,76(sp)
    60dc:	       move.l 76(sp),d0
    60e0:	       addq.l #4,d0
    60e2:	       move.l d0,1aefe <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    60e8:	       move.l 196(sp),72(sp)
    60ee:	       move.l 196(sp),-(sp)
    60f2:	       jsr 718 <get4bytes>
    60f8:	       addq.l #4,sp
    60fa:	       move.l d0,68(sp)
    60fe:	       clr.l 64(sp)
    6102:	       move.l 1af0a <DOSBase>,d0
    6108:	       movea.l d0,a6
    610a:	       move.l 72(sp),d1
    610e:	       move.l 68(sp),d2
    6112:	       move.l 64(sp),d3
    6116:	       jsr -66(a6)
    611a:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    611e:	       move.l 196(sp),56(sp)
    6124:	       clr.l 52(sp)
    6128:	       clr.l 48(sp)
    612c:	       move.l 1af0a <DOSBase>,d0
    6132:	       movea.l d0,a6
    6134:	       move.l 56(sp),d1
    6138:	       move.l 52(sp),d2
    613c:	       move.l 48(sp),d3
    6140:	       jsr -66(a6)
    6144:	       move.l d0,44(sp)
    6148:	       move.l 44(sp),d0
    614c:	       move.l d0,1aef2 <startOfDataIndex>
    6152:	       nop
    6154:	       movem.l (sp)+,d2-d3/a6
    6158:	       lea 180(sp),sp
    615c:	       rts

0000615e <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    615e:	    lea -20(sp),sp
    6162:	    move.l a6,-(sp)
    6164:	    move.l d7,-(sp)
	APTR vbr = 0;
    6166:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    616a:	    move.w #20090,10(sp)
    6170:	    move.w #2049,12(sp)
    6176:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    617c:	    movea.l 1af02 <SysBase>,a0
    6182:	    move.w 296(a0),d0
    6186:	    move.w d0,d0
    6188:	    andi.l #65535,d0
    618e:	    moveq #1,d1
    6190:	    and.l d1,d0
    6192:	/-- beq.s 61c0 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    6194:	|   lea 28(sp),a0
    6198:	|   lea -18(a0),a0
    619c:	|   move.l a0,20(sp)
    61a0:	|   move.l 1af02 <SysBase>,d0
    61a6:	|   movea.l d0,a6
    61a8:	|   move.l 20(sp),d7
    61ac:	|   exg d7,a5
    61ae:	|   jsr -30(a6)
    61b2:	|   exg d7,a5
    61b4:	|   move.l d0,16(sp)
    61b8:	|   move.l 16(sp),d0
    61bc:	|   move.l d0,24(sp)

	return vbr;
    61c0:	\-> move.l 24(sp),d0
}
    61c4:	    move.l (sp)+,d7
    61c6:	    movea.l (sp)+,a6
    61c8:	    lea 20(sp),sp
    61cc:	    rts

000061ce <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    61ce:	movea.l 1af28 <VBR>,a0
    61d4:	lea 108(a0),a0
    61d8:	move.l 4(sp),(a0)
}
    61dc:	nop
    61de:	rts

000061e0 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    61e0:	movea.l 1af28 <VBR>,a0
    61e6:	move.l 108(a0),d0
}
    61ea:	rts

000061ec <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    61ec:	       subq.l #8,sp
    61ee:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    61f0:	       pea 17341 <PutChar+0x1073>
    61f6:	       jsr 157fa <KPrintF>
    61fc:	       addq.l #4,sp
	Forbid();
    61fe:	       move.l 1af02 <SysBase>,d0
    6204:	       movea.l d0,a6
    6206:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    620a:	       pea 17359 <PutChar+0x108b>
    6210:	       jsr 157fa <KPrintF>
    6216:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    6218:	       movea.l 1af06 <custom>,a0
    621e:	       move.w 16(a0),d0
    6222:	       move.w d0,1af26 <SystemADKCON>
	SystemInts=custom->intenar;
    6228:	       movea.l 1af06 <custom>,a0
    622e:	       move.w 28(a0),d0
    6232:	       move.w d0,1af22 <SystemInts>
	SystemDMA=custom->dmaconr;
    6238:	       movea.l 1af06 <custom>,a0
    623e:	       move.w 2(a0),d0
    6242:	       move.w d0,1af24 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    6248:	       movea.l 1af0e <GfxBase>,a0
    624e:	       move.l 34(a0),d0
    6252:	       move.l d0,1af30 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    6258:	       pea 17377 <PutChar+0x10a9>
    625e:	       jsr 157fa <KPrintF>
    6264:	       addq.l #4,sp
	LoadView(0);
    6266:	       clr.l 4(sp)
    626a:	       move.l 1af0e <GfxBase>,d0
    6270:	       movea.l d0,a6
    6272:	       movea.l 4(sp),a1
    6276:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    627a:	       pea 1738d <PutChar+0x10bf>
    6280:	       jsr 157fa <KPrintF>
    6286:	       addq.l #4,sp
	WaitTOF();
    6288:	       move.l 1af0e <GfxBase>,d0
    628e:	       movea.l d0,a6
    6290:	       jsr -270(a6)
	WaitTOF();
    6294:	       move.l 1af0e <GfxBase>,d0
    629a:	       movea.l d0,a6
    629c:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    62a0:	       pea 173a2 <PutChar+0x10d4>
    62a6:	       jsr 157fa <KPrintF>
    62ac:	       addq.l #4,sp
	WaitVbl();
    62ae:	       jsr 1572e <WaitVbl>
	WaitVbl();
    62b4:	       jsr 1572e <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    62ba:	       pea 173b7 <PutChar+0x10e9>
    62c0:	       jsr 157fa <KPrintF>
    62c6:	       addq.l #4,sp
	OwnBlitter();
    62c8:	       move.l 1af0e <GfxBase>,d0
    62ce:	       movea.l d0,a6
    62d0:	       jsr -456(a6)
	WaitBlit();	
    62d4:	       move.l 1af0e <GfxBase>,d0
    62da:	       movea.l d0,a6
    62dc:	       jsr -228(a6)
	Disable();
    62e0:	       move.l 1af02 <SysBase>,d0
    62e6:	       movea.l d0,a6
    62e8:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    62ec:	       pea 173d8 <PutChar+0x110a>
    62f2:	       jsr 157fa <KPrintF>
    62f8:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    62fa:	       movea.l 1af06 <custom>,a0
    6300:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    6306:	       pea 173ef <PutChar+0x1121>
    630c:	       jsr 157fa <KPrintF>
    6312:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    6314:	       clr.l 8(sp)
    6318:	   /-- bra.s 6336 <TakeSystem+0x14a>
		custom->color[a]=0;
    631a:	/--|-> movea.l 1af06 <custom>,a0
    6320:	|  |   move.l 8(sp),d0
    6324:	|  |   addi.l #192,d0
    632a:	|  |   add.l d0,d0
    632c:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    6332:	|  |   addq.l #1,8(sp)
    6336:	|  \-> moveq #31,d0
    6338:	|      cmp.l 8(sp),d0
    633c:	\----- bge.s 631a <TakeSystem+0x12e>

	WaitVbl();
    633e:	       jsr 1572e <WaitVbl>
	WaitVbl();
    6344:	       jsr 1572e <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    634a:	       pea 17414 <PutChar+0x1146>
    6350:	       jsr 157fa <KPrintF>
    6356:	       addq.l #4,sp
	VBR=GetVBR();
    6358:	       jsr 615e <GetVBR>
    635e:	       move.l d0,1af28 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    6364:	       jsr 61e0 <GetInterruptHandler>
    636a:	       move.l d0,1af2c <SystemIrq>
}
    6370:	       nop
    6372:	       movea.l (sp)+,a6
    6374:	       addq.l #8,sp
    6376:	       rts

00006378 <FreeSystem>:

void FreeSystem() { 
    6378:	subq.l #4,sp
    637a:	move.l a6,-(sp)
	WaitVbl();
    637c:	jsr 1572e <WaitVbl>
	WaitBlit();
    6382:	move.l 1af0e <GfxBase>,d0
    6388:	movea.l d0,a6
    638a:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    638e:	movea.l 1af06 <custom>,a0
    6394:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    639a:	movea.l 1af06 <custom>,a0
    63a0:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    63a6:	movea.l 1af06 <custom>,a0
    63ac:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    63b2:	move.l 1af2c <SystemIrq>,d0
    63b8:	move.l d0,-(sp)
    63ba:	jsr 61ce <SetInterruptHandler>
    63c0:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    63c2:	movea.l 1af0e <GfxBase>,a0
    63c8:	move.l 38(a0),d0
    63cc:	movea.l 1af06 <custom>,a0
    63d2:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    63d6:	movea.l 1af0e <GfxBase>,a0
    63dc:	move.l 50(a0),d0
    63e0:	movea.l 1af06 <custom>,a0
    63e6:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    63ea:	movea.l 1af06 <custom>,a0
    63f0:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    63f6:	move.w 1af24 <SystemDMA>,d0
    63fc:	movea.l 1af06 <custom>,a0
    6402:	ori.w #-32768,d0
    6406:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    640a:	move.w 1af26 <SystemADKCON>,d0
    6410:	movea.l 1af06 <custom>,a0
    6416:	ori.w #-32768,d0
    641a:	move.w d0,158(a0)

	WaitBlit();	
    641e:	move.l 1af0e <GfxBase>,d0
    6424:	movea.l d0,a6
    6426:	jsr -228(a6)
	DisownBlitter();
    642a:	move.l 1af0e <GfxBase>,d0
    6430:	movea.l d0,a6
    6432:	jsr -462(a6)
	Enable();
    6436:	move.l 1af02 <SysBase>,d0
    643c:	movea.l d0,a6
    643e:	jsr -126(a6)

	LoadView(ActiView);
    6442:	move.l 1af30 <ActiView>,4(sp)
    644a:	move.l 1af0e <GfxBase>,d0
    6450:	movea.l d0,a6
    6452:	movea.l 4(sp),a1
    6456:	jsr -222(a6)
	WaitTOF();
    645a:	move.l 1af0e <GfxBase>,d0
    6460:	movea.l d0,a6
    6462:	jsr -270(a6)
	WaitTOF();
    6466:	move.l 1af0e <GfxBase>,d0
    646c:	movea.l d0,a6
    646e:	jsr -270(a6)

	Permit();
    6472:	move.l 1af02 <SysBase>,d0
    6478:	movea.l d0,a6
    647a:	jsr -138(a6)
}
    647e:	nop
    6480:	movea.l (sp)+,a6
    6482:	addq.l #4,sp
    6484:	rts

00006486 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    6486:	    lea -128(sp),sp
    648a:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    648e:	    movea.w #4,a0
    6492:	    move.l (a0),d0
    6494:	    move.l d0,1af02 <SysBase>
	custom = (struct Custom*)0xdff000;	
    649a:	    move.l #14675968,1af06 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    64a4:	    move.l #95288,136(sp)
    64ac:	    clr.l 132(sp)
    64b0:	    move.l 1af02 <SysBase>,d0
    64b6:	    movea.l d0,a6
    64b8:	    movea.l 136(sp),a1
    64bc:	    move.l 132(sp),d0
    64c0:	    jsr -552(a6)
    64c4:	    move.l d0,128(sp)
    64c8:	    move.l 128(sp),d0
    64cc:	    move.l d0,1af0e <GfxBase>
	if (!GfxBase)
    64d2:	    move.l 1af0e <GfxBase>,d0
    64d8:	/-- bne.s 64ee <main+0x68>
		Exit(0);
    64da:	|   clr.l 124(sp)
    64de:	|   move.l 1af0a <DOSBase>,d0
    64e4:	|   movea.l d0,a6
    64e6:	|   move.l 124(sp),d1
    64ea:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    64ee:	\-> move.l #95305,120(sp)
    64f6:	    clr.l 116(sp)
    64fa:	    move.l 1af02 <SysBase>,d0
    6500:	    movea.l d0,a6
    6502:	    movea.l 120(sp),a1
    6506:	    move.l 116(sp),d0
    650a:	    jsr -552(a6)
    650e:	    move.l d0,112(sp)
    6512:	    move.l 112(sp),d0
    6516:	    move.l d0,1af0a <DOSBase>
	if (!DOSBase)
    651c:	    move.l 1af0a <DOSBase>,d0
    6522:	/-- bne.s 6538 <main+0xb2>
		Exit(0);
    6524:	|   clr.l 108(sp)
    6528:	|   move.l 1af0a <DOSBase>,d0
    652e:	|   movea.l d0,a6
    6530:	|   move.l 108(sp),d1
    6534:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    6538:	\-> move.l #95317,104(sp)
    6540:	    clr.l 100(sp)
    6544:	    move.l 1af02 <SysBase>,d0
    654a:	    movea.l d0,a6
    654c:	    movea.l 104(sp),a1
    6550:	    move.l 100(sp),d0
    6554:	    jsr -552(a6)
    6558:	    move.l d0,96(sp)
    655c:	    move.l 96(sp),d0
    6560:	    move.l d0,1af12 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    6566:	    move.l 1af12 <MathIeeeSingBasBase>,d0
    656c:	/-- bne.s 6582 <main+0xfc>
		Exit(0);	
    656e:	|   clr.l 92(sp)
    6572:	|   move.l 1af0a <DOSBase>,d0
    6578:	|   movea.l d0,a6
    657a:	|   move.l 92(sp),d1
    657e:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    6582:	\-> move.l #95341,88(sp)
    658a:	    clr.l 84(sp)
    658e:	    move.l 1af02 <SysBase>,d0
    6594:	    movea.l d0,a6
    6596:	    movea.l 88(sp),a1
    659a:	    move.l 84(sp),d0
    659e:	    jsr -552(a6)
    65a2:	    move.l d0,80(sp)
    65a6:	    move.l 80(sp),d0
    65aa:	    move.l d0,1af16 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    65b0:	    move.l 1af16 <MathIeeeSingTransBase>,d0
    65b6:	/-- bne.s 65cc <main+0x146>
		Exit(0);
    65b8:	|   clr.l 76(sp)
    65bc:	|   move.l 1af0a <DOSBase>,d0
    65c2:	|   movea.l d0,a6
    65c4:	|   move.l 76(sp),d1
    65c8:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    65cc:	\-> move.l #95367,72(sp)
    65d4:	    clr.l 68(sp)
    65d8:	    move.l 1af02 <SysBase>,d0
    65de:	    movea.l d0,a6
    65e0:	    movea.l 72(sp),a1
    65e4:	    move.l 68(sp),d0
    65e8:	    jsr -552(a6)
    65ec:	    move.l d0,64(sp)
    65f0:	    move.l 64(sp),d0
    65f4:	    move.l d0,1af1e <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    65fa:	    move.l 1af1e <MathIeeeDoubTransBase>,d0
    6600:	/-- bne.s 6616 <main+0x190>
		Exit(0);
    6602:	|   clr.l 60(sp)
    6606:	|   move.l 1af0a <DOSBase>,d0
    660c:	|   movea.l d0,a6
    660e:	|   move.l 60(sp),d1
    6612:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    6616:	\-> move.l #95393,56(sp)
    661e:	    clr.l 52(sp)
    6622:	    move.l 1af02 <SysBase>,d0
    6628:	    movea.l d0,a6
    662a:	    movea.l 56(sp),a1
    662e:	    move.l 52(sp),d0
    6632:	    jsr -552(a6)
    6636:	    move.l d0,48(sp)
    663a:	    move.l 48(sp),d0
    663e:	    move.l d0,1af1a <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    6644:	    move.l 1af1a <MathIeeeDoubBasBase>,d0
    664a:	/-- bne.s 6660 <main+0x1da>
		Exit(0);
    664c:	|   clr.l 44(sp)
    6650:	|   move.l 1af0a <DOSBase>,d0
    6656:	|   movea.l d0,a6
    6658:	|   move.l 44(sp),d1
    665c:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 004!\n");
    6660:	\-> pea 174b9 <PutChar+0x11eb>
    6666:	    jsr 157fa <KPrintF>
    666c:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 004!\n", 25);
    666e:	    move.l 1af0a <DOSBase>,d0
    6674:	    movea.l d0,a6
    6676:	    jsr -60(a6)
    667a:	    move.l d0,40(sp)
    667e:	    move.l 40(sp),d0
    6682:	    move.l d0,36(sp)
    6686:	    move.l #95449,32(sp)
    668e:	    moveq #25,d0
    6690:	    move.l d0,28(sp)
    6694:	    move.l 1af0a <DOSBase>,d0
    669a:	    movea.l d0,a6
    669c:	    move.l 36(sp),d1
    66a0:	    move.l 32(sp),d2
    66a4:	    move.l 28(sp),d3
    66a8:	    jsr -48(a6)
    66ac:	    move.l d0,24(sp)
	Delay(50);
    66b0:	    moveq #50,d0
    66b2:	    move.l d0,20(sp)
    66b6:	    move.l 1af0a <DOSBase>,d0
    66bc:	    movea.l d0,a6
    66be:	    move.l 20(sp),d1
    66c2:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    66c6:	    pea 174f2 <PutChar+0x1224>
    66cc:	    jsr 157fa <KPrintF>
    66d2:	    addq.l #4,sp
	TakeSystem();
    66d4:	    jsr 61ec <TakeSystem>
	KPrintF("System Taken\n");
    66da:	    pea 17501 <PutChar+0x1233>
    66e0:	    jsr 157fa <KPrintF>
    66e6:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    66e8:	    movea.l 1af06 <custom>,a0
    66ee:	    move.w #-30721,150(a0)
	WaitVbl();
    66f4:	    jsr 1572e <WaitVbl>

	KPrintF("Starting main_sludge\n");
    66fa:	    pea 1750f <PutChar+0x1241>
    6700:	    jsr 157fa <KPrintF>
    6706:	    addq.l #4,sp
	main_sludge(argc, argv);	
    6708:	    move.l 148(sp),-(sp)
    670c:	    move.l 148(sp),-(sp)
    6710:	    jsr 3070 <main_sludge>
    6716:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    6718:	    jsr 6378 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    671e:	    move.l 1af0a <DOSBase>,16(sp)
    6726:	    move.l 1af02 <SysBase>,d0
    672c:	    movea.l d0,a6
    672e:	    movea.l 16(sp),a1
    6732:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    6736:	    move.l 1af0e <GfxBase>,12(sp)
    673e:	    move.l 1af02 <SysBase>,d0
    6744:	    movea.l d0,a6
    6746:	    movea.l 12(sp),a1
    674a:	    jsr -414(a6)
    674e:	    moveq #0,d0
}
    6750:	    movem.l (sp)+,d2-d3/a6
    6754:	    lea 128(sp),sp
    6758:	    rts

0000675a <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    675a:	    lea -16(sp),sp
    675e:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    6760:	    moveq #8,d0
    6762:	    move.l d0,16(sp)
    6766:	    clr.l 12(sp)
    676a:	    move.l 1af02 <SysBase>,d0
    6770:	    movea.l d0,a6
    6772:	    move.l 16(sp),d0
    6776:	    move.l 12(sp),d1
    677a:	    jsr -684(a6)
    677e:	    move.l d0,8(sp)
    6782:	    move.l 8(sp),d0
    6786:	    move.l d0,4(sp)
	if (!newStat) {
    678a:	/-- bne.s 67ba <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    678c:	|   movea.l 1a886 <nowStatus>,a0
    6792:	|   move.l (a0),d0
    6794:	|   movea.l 4(sp),a0
    6798:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    679c:	|   pea 16f65 <PutChar+0xc97>
    67a2:	|   jsr b8 <copyString>
    67a8:	|   addq.l #4,sp
    67aa:	|   movea.l 4(sp),a0
    67ae:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    67b0:	|   movea.l 1a886 <nowStatus>,a0
    67b6:	|   move.l 4(sp),(a0)
	}
}
    67ba:	\-> nop
    67bc:	    movea.l (sp)+,a6
    67be:	    lea 16(sp),sp
    67c2:	    rts

000067c4 <clearStatusBar>:

void clearStatusBar () {
    67c4:	       lea -16(sp),sp
    67c8:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    67ca:	       movea.l 1a886 <nowStatus>,a0
    67d0:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    67d4:	       movea.l 1a886 <nowStatus>,a0
    67da:	       moveq #-1,d0
    67dc:	       move.l d0,6(a0)
	while (stat) {
    67e0:	   /-- bra.s 6820 <clearStatusBar+0x5c>
		kill = stat;
    67e2:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    67e8:	|  |   movea.l 16(sp),a0
    67ec:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    67f2:	|  |   movea.l 12(sp),a0
    67f6:	|  |   move.l (a0),8(sp)
    67fa:	|  |   move.l 1af02 <SysBase>,d0
    6800:	|  |   movea.l d0,a6
    6802:	|  |   movea.l 8(sp),a1
    6806:	|  |   jsr -690(a6)
		FreeVec(kill);
    680a:	|  |   move.l 12(sp),4(sp)
    6810:	|  |   move.l 1af02 <SysBase>,d0
    6816:	|  |   movea.l d0,a6
    6818:	|  |   movea.l 4(sp),a1
    681c:	|  |   jsr -690(a6)
	while (stat) {
    6820:	|  \-> tst.l 16(sp)
    6824:	\----- bne.s 67e2 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    6826:	       movea.l 1a886 <nowStatus>,a0
    682c:	       clr.l (a0)
}
    682e:	       nop
    6830:	       movea.l (sp)+,a6
    6832:	       lea 16(sp),sp
    6836:	       rts

00006838 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    6838:	clr.l 1af34 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    683e:	move.w #-1,1af38 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    6846:	moveq #-1,d0
    6848:	move.l d0,1af3a <mainStatus+0x6>
	mainStatus.statusX = 10;
    684e:	moveq #10,d0
    6850:	move.l d0,1af3e <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    6856:	movea.l 1ae5a <winHeight>,a0
    685c:	lea -15(a0),a0
    6860:	move.l a0,d0
    6862:	move.l d0,1af42 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    6868:	nop
    686a:	rts

0000686c <killLastStatus>:

void killLastStatus () {
    686c:	    lea -12(sp),sp
    6870:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    6872:	    movea.l 1a886 <nowStatus>,a0
    6878:	    move.l (a0),d0
    687a:	/-- beq.s 68c4 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    687c:	|   movea.l 1a886 <nowStatus>,a0
    6882:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    6886:	|   movea.l 1a886 <nowStatus>,a0
    688c:	|   movea.l 12(sp),a1
    6890:	|   move.l 4(a1),d0
    6894:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    6896:	|   movea.l 12(sp),a0
    689a:	|   move.l (a0),8(sp)
    689e:	|   move.l 1af02 <SysBase>,d0
    68a4:	|   movea.l d0,a6
    68a6:	|   movea.l 8(sp),a1
    68aa:	|   jsr -690(a6)
		FreeVec(kill);
    68ae:	|   move.l 12(sp),4(sp)
    68b4:	|   move.l 1af02 <SysBase>,d0
    68ba:	|   movea.l d0,a6
    68bc:	|   movea.l 4(sp),a1
    68c0:	|   jsr -690(a6)
	}
}
    68c4:	\-> nop
    68c6:	    movea.l (sp)+,a6
    68c8:	    lea 12(sp),sp
    68cc:	    rts

000068ce <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    68ce:	movea.l 1a886 <nowStatus>,a0
    68d4:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    68da:	movea.l 1a886 <nowStatus>,a0
    68e0:	move.l 8(sp),14(a0)
}
    68e6:	nop
    68e8:	rts

000068ea <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    68ea:	       lea -100(sp),sp
    68ee:	       move.l a6,-(sp)
    68f0:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    68f2:	       movea.l 1a886 <nowStatus>,a0
    68f8:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    68fc:	       movea.l 1a886 <nowStatus>,a0
    6902:	       move.w 4(a0),d0
    6906:	       move.w d0,d0
    6908:	       andi.l #65535,d0
    690e:	       move.l 112(sp),-(sp)
    6912:	       move.l d0,-(sp)
    6914:	       jsr 8d0 <put2bytes>
    691a:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    691c:	       movea.l 1a886 <nowStatus>,a0
    6922:	       move.l 6(a0),d0
    6926:	       move.l d0,d0
    6928:	       movea.w d0,a0
    692a:	       move.l 112(sp),-(sp)
    692e:	       move.l a0,-(sp)
    6930:	       jsr a9c <putSigned>
    6936:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    6938:	       movea.l 1a886 <nowStatus>,a0
    693e:	       move.l 10(a0),d0
    6942:	       move.l 112(sp),-(sp)
    6946:	       move.l d0,-(sp)
    6948:	       jsr 8d0 <put2bytes>
    694e:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    6950:	       movea.l 1a886 <nowStatus>,a0
    6956:	       move.l 14(a0),d0
    695a:	       move.l 112(sp),-(sp)
    695e:	       move.l d0,-(sp)
    6960:	       jsr 8d0 <put2bytes>
    6966:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    6968:	       move.l 112(sp),100(sp)
    696e:	       movea.l 1a886 <nowStatus>,a0
    6974:	       move.l 18(a0),96(sp)
    697a:	       move.l 1af0a <DOSBase>,d0
    6980:	       movea.l d0,a6
    6982:	       move.l 100(sp),d1
    6986:	       move.l 96(sp),d2
    698a:	       jsr -312(a6)
    698e:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    6992:	       move.l 112(sp),88(sp)
    6998:	       movea.l 1a886 <nowStatus>,a0
    699e:	       move.l 22(a0),84(sp)
    69a4:	       move.l 1af0a <DOSBase>,d0
    69aa:	       movea.l d0,a6
    69ac:	       move.l 88(sp),d1
    69b0:	       move.l 84(sp),d2
    69b4:	       jsr -312(a6)
    69b8:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    69bc:	       move.l 112(sp),76(sp)
    69c2:	       movea.l 1a886 <nowStatus>,a0
    69c8:	       move.l 26(a0),72(sp)
    69ce:	       move.l 1af0a <DOSBase>,d0
    69d4:	       movea.l d0,a6
    69d6:	       move.l 76(sp),d1
    69da:	       move.l 72(sp),d2
    69de:	       jsr -312(a6)
    69e2:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    69e6:	       move.l 112(sp),64(sp)
    69ec:	       movea.l 1a886 <nowStatus>,a0
    69f2:	       move.l 30(a0),60(sp)
    69f8:	       move.l 1af0a <DOSBase>,d0
    69fe:	       movea.l d0,a6
    6a00:	       move.l 64(sp),d1
    6a04:	       move.l 60(sp),d2
    6a08:	       jsr -312(a6)
    6a0c:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    6a10:	       move.l 112(sp),52(sp)
    6a16:	       movea.l 1a886 <nowStatus>,a0
    6a1c:	       move.l 34(a0),48(sp)
    6a22:	       move.l 1af0a <DOSBase>,d0
    6a28:	       movea.l d0,a6
    6a2a:	       move.l 52(sp),d1
    6a2e:	       move.l 48(sp),d2
    6a32:	       jsr -312(a6)
    6a36:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    6a3a:	       move.l 112(sp),40(sp)
    6a40:	       movea.l 1a886 <nowStatus>,a0
    6a46:	       move.l 38(a0),36(sp)
    6a4c:	       move.l 1af0a <DOSBase>,d0
    6a52:	       movea.l d0,a6
    6a54:	       move.l 40(sp),d1
    6a58:	       move.l 36(sp),d2
    6a5c:	       jsr -312(a6)
    6a60:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    6a64:	   /-- bra.s 6aa8 <saveStatusBars+0x1be>
		FPutC (fp,1);
    6a66:	/--|-> move.l 112(sp),16(sp)
    6a6c:	|  |   moveq #1,d0
    6a6e:	|  |   move.l d0,12(sp)
    6a72:	|  |   move.l 1af0a <DOSBase>,d0
    6a78:	|  |   movea.l d0,a6
    6a7a:	|  |   move.l 16(sp),d1
    6a7e:	|  |   move.l 12(sp),d2
    6a82:	|  |   jsr -312(a6)
    6a86:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    6a8a:	|  |   movea.l 104(sp),a0
    6a8e:	|  |   move.l (a0),d0
    6a90:	|  |   move.l 112(sp),-(sp)
    6a94:	|  |   move.l d0,-(sp)
    6a96:	|  |   jsr bd8 <writeString>
    6a9c:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    6a9e:	|  |   movea.l 104(sp),a0
    6aa2:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    6aa8:	|  \-> tst.l 104(sp)
    6aac:	\----- bne.s 6a66 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    6aae:	       move.l 112(sp),28(sp)
    6ab4:	       clr.l 24(sp)
    6ab8:	       move.l 1af0a <DOSBase>,d0
    6abe:	       movea.l d0,a6
    6ac0:	       move.l 28(sp),d1
    6ac4:	       move.l 24(sp),d2
    6ac8:	       jsr -312(a6)
    6acc:	       move.l d0,20(sp)
}
    6ad0:	       nop
    6ad2:	       move.l (sp)+,d2
    6ad4:	       movea.l (sp)+,a6
    6ad6:	       lea 100(sp),sp
    6ada:	       rts

00006adc <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    6adc:	movea.l 1a886 <nowStatus>,a0
    6ae2:	move.l 4(sp),6(a0)
}
    6ae8:	nop
    6aea:	rts

00006aec <setStatusBar>:

void setStatusBar (char * txt) {
    6aec:	    subq.l #4,sp
    6aee:	    move.l a6,-(sp)
    6af0:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    6af2:	    movea.l 1a886 <nowStatus>,a0
    6af8:	    move.l (a0),d0
    6afa:	/-- beq.s 6b2e <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    6afc:	|   movea.l 1a886 <nowStatus>,a0
    6b02:	|   movea.l (a0),a0
    6b04:	|   move.l (a0),8(sp)
    6b08:	|   move.l 1af02 <SysBase>,d0
    6b0e:	|   movea.l d0,a6
    6b10:	|   movea.l 8(sp),a1
    6b14:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    6b18:	|   movea.l 1a886 <nowStatus>,a0
    6b1e:	|   movea.l (a0),a2
    6b20:	|   move.l 16(sp),-(sp)
    6b24:	|   jsr b8 <copyString>
    6b2a:	|   addq.l #4,sp
    6b2c:	|   move.l d0,(a2)
	}
}
    6b2e:	\-> nop
    6b30:	    movea.l (sp)+,a2
    6b32:	    movea.l (sp)+,a6
    6b34:	    addq.l #4,sp
    6b36:	    rts

00006b38 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    6b38:	       movea.l 1a886 <nowStatus>,a0
    6b3e:	       move.l (a0),d0
    6b40:	/----- beq.s 6b4e <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    6b42:	|      movea.l 1a886 <nowStatus>,a0
    6b48:	|      movea.l (a0),a0
    6b4a:	|      move.l (a0),d0
    6b4c:	|  /-- bra.s 6b54 <statusBarText+0x1c>
	} else {
		return "";
    6b4e:	\--|-> move.l #94053,d0
	}
    6b54:	   \-> rts

00006b56 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    6b56:	       lea -28(sp),sp
    6b5a:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    6b5e:	       move.l 52(sp),-(sp)
    6b62:	       jsr 1400c <stringWidth>
    6b68:	       addq.l #4,sp
    6b6a:	       asr.l #1,d0
    6b6c:	       move.l d0,-(sp)
    6b6e:	       jsr 15c36 <__floatsisf>
    6b74:	       addq.l #4,sp
    6b76:	       move.l d0,d1
    6b78:	       move.l 1a89e <cameraZoom>,d0
    6b7e:	       move.l d0,-(sp)
    6b80:	       move.l d1,-(sp)
    6b82:	       jsr 15ae2 <__divsf3>
    6b88:	       addq.l #8,sp
    6b8a:	       move.l d0,-(sp)
    6b8c:	       jsr 15bce <__fixsfsi>
    6b92:	       addq.l #4,sp
    6b94:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    6b98:	       move.l 56(sp),d0
    6b9c:	       sub.l 44(sp),d0
    6ba0:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    6ba4:	       move.l 56(sp),d0
    6ba8:	       add.l 44(sp),d0
    6bac:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    6bb0:	       moveq #12,d0
    6bb2:	       move.l d0,32(sp)
    6bb6:	       clr.l 28(sp)
    6bba:	       move.l 1af02 <SysBase>,d0
    6bc0:	       movea.l d0,a6
    6bc2:	       move.l 32(sp),d0
    6bc6:	       move.l 28(sp),d1
    6bca:	       jsr -684(a6)
    6bce:	       move.l d0,24(sp)
    6bd2:	       move.l 24(sp),d0
    6bd6:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    6bda:	       movea.l 1af5e <speech>,a0
    6be0:	       move.l 4(a0),d0
    6be4:	       movea.l 20(sp),a0
    6be8:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    6bec:	       move.l 52(sp),-(sp)
    6bf0:	       jsr b8 <copyString>
    6bf6:	       addq.l #4,sp
    6bf8:	       movea.l 20(sp),a0
    6bfc:	       move.l d0,(a0)
	newLine -> x = xx1;
    6bfe:	       movea.l 20(sp),a0
    6c02:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    6c08:	       movea.l 1af5e <speech>,a0
    6c0e:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    6c14:	       moveq #4,d0
    6c16:	       cmp.l 40(sp),d0
    6c1a:	   /-- blt.s 6c3c <addSpeechLine+0xe6>
    6c1c:	   |   movea.l 60(sp),a0
    6c20:	   |   move.l (a0),d1
    6c22:	   |   moveq #5,d0
    6c24:	   |   sub.l 40(sp),d0
    6c28:	   |   cmp.l d1,d0
    6c2a:	   +-- ble.s 6c3c <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    6c2c:	   |   moveq #5,d0
    6c2e:	   |   sub.l 40(sp),d0
    6c32:	   |   movea.l 60(sp),a0
    6c36:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    6c38:	/--|-- bra.w 6d68 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6c3c:	|  \-> move.l 36(sp),-(sp)
    6c40:	|      jsr 15c36 <__floatsisf>
    6c46:	|      addq.l #4,sp
    6c48:	|      move.l d0,d2
    6c4a:	|      move.l 1ae56 <winWidth>,d0
    6c50:	|      move.l d0,-(sp)
    6c52:	|      jsr 15c5e <__floatunsisf>
    6c58:	|      addq.l #4,sp
    6c5a:	|      move.l d0,d1
    6c5c:	|      move.l 1a89e <cameraZoom>,d0
    6c62:	|      move.l d0,-(sp)
    6c64:	|      move.l d1,-(sp)
    6c66:	|      jsr 15ae2 <__divsf3>
    6c6c:	|      addq.l #8,sp
    6c6e:	|      move.l #1084227584,-(sp)
    6c74:	|      move.l d0,-(sp)
    6c76:	|      jsr 15f2a <__subsf3>
    6c7c:	|      addq.l #8,sp
    6c7e:	|      move.l d0,-(sp)
    6c80:	|      move.l d2,-(sp)
    6c82:	|      jsr 15d1e <__gesf2>
    6c88:	|      addq.l #8,sp
    6c8a:	|      tst.l d0
    6c8c:	|  /-- bge.s 6c92 <addSpeechLine+0x13c>
}
    6c8e:	+--|-- bra.w 6d68 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6c92:	|  \-> movea.l 60(sp),a0
    6c96:	|      move.l (a0),d0
    6c98:	|      move.l d0,-(sp)
    6c9a:	|      jsr 15c36 <__floatsisf>
    6ca0:	|      addq.l #4,sp
    6ca2:	|      move.l d0,-(sp)
    6ca4:	|      jsr 15b4e <__extendsfdf2>
    6caa:	|      addq.l #4,sp
    6cac:	|      move.l d0,d4
    6cae:	|      move.l d1,d5
    6cb0:	|      move.l 1ae56 <winWidth>,d0
    6cb6:	|      move.l d0,-(sp)
    6cb8:	|      jsr 15c5e <__floatunsisf>
    6cbe:	|      addq.l #4,sp
    6cc0:	|      move.l d0,d1
    6cc2:	|      move.l 1a89e <cameraZoom>,d0
    6cc8:	|      move.l d0,-(sp)
    6cca:	|      move.l d1,-(sp)
    6ccc:	|      jsr 15ae2 <__divsf3>
    6cd2:	|      addq.l #8,sp
    6cd4:	|      move.l d0,-(sp)
    6cd6:	|      jsr 15b4e <__extendsfdf2>
    6cdc:	|      addq.l #4,sp
    6cde:	|      clr.l -(sp)
    6ce0:	|      move.l #1075052544,-(sp)
    6ce6:	|      move.l d1,-(sp)
    6ce8:	|      move.l d0,-(sp)
    6cea:	|      jsr 15ec8 <__subdf3>
    6cf0:	|      lea 16(sp),sp
    6cf4:	|      move.l d0,d2
    6cf6:	|      move.l d1,d3
    6cf8:	|      move.l 36(sp),-(sp)
    6cfc:	|      jsr 15bf6 <__floatsidf>
    6d02:	|      addq.l #4,sp
    6d04:	|      move.l d1,-(sp)
    6d06:	|      move.l d0,-(sp)
    6d08:	|      move.l d3,-(sp)
    6d0a:	|      move.l d2,-(sp)
    6d0c:	|      jsr 15ec8 <__subdf3>
    6d12:	|      lea 16(sp),sp
    6d16:	|      move.l d1,-(sp)
    6d18:	|      move.l d0,-(sp)
    6d1a:	|      move.l d5,-(sp)
    6d1c:	|      move.l d4,-(sp)
    6d1e:	|      jsr 15d54 <__gtdf2>
    6d24:	|      lea 16(sp),sp
    6d28:	|      tst.l d0
    6d2a:	|  /-- bgt.s 6d2e <addSpeechLine+0x1d8>
}
    6d2c:	+--|-- bra.s 6d68 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    6d2e:	|  \-> move.l 1ae56 <winWidth>,d0
    6d34:	|      move.l d0,-(sp)
    6d36:	|      jsr 15c5e <__floatunsisf>
    6d3c:	|      addq.l #4,sp
    6d3e:	|      move.l d0,d1
    6d40:	|      move.l 1a89e <cameraZoom>,d0
    6d46:	|      move.l d0,-(sp)
    6d48:	|      move.l d1,-(sp)
    6d4a:	|      jsr 15ae2 <__divsf3>
    6d50:	|      addq.l #8,sp
    6d52:	|      move.l d0,-(sp)
    6d54:	|      jsr 15bce <__fixsfsi>
    6d5a:	|      addq.l #4,sp
    6d5c:	|      subq.l #5,d0
    6d5e:	|      sub.l 36(sp),d0
    6d62:	|      movea.l 60(sp),a0
    6d66:	|      move.l d0,(a0)
}
    6d68:	\----> nop
    6d6a:	       movem.l (sp)+,d2-d5/a6
    6d6e:	       lea 28(sp),sp
    6d72:	       rts

00006d74 <initSpeech>:


void initSpeech () {
    6d74:	       lea -12(sp),sp
    6d78:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    6d7a:	       moveq #20,d0
    6d7c:	       move.l d0,12(sp)
    6d80:	       clr.l 8(sp)
    6d84:	       move.l 1af02 <SysBase>,d0
    6d8a:	       movea.l d0,a6
    6d8c:	       move.l 12(sp),d0
    6d90:	       move.l 8(sp),d1
    6d94:	       jsr -684(a6)
    6d98:	       move.l d0,4(sp)
    6d9c:	       move.l 4(sp),d0
    6da0:	       move.l d0,1af5e <speech>
	if (speech) {
    6da6:	       move.l 1af5e <speech>,d0
    6dac:	/----- beq.s 6dd8 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    6dae:	|      movea.l 1af5e <speech>,a0
    6db4:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    6db6:	|      movea.l 1af5e <speech>,a0
    6dbc:	|      clr.l 4(a0)
		speech -> speechY = 0;
    6dc0:	|      movea.l 1af5e <speech>,a0
    6dc6:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    6dca:	|      movea.l 1af5e <speech>,a0
    6dd0:	|      moveq #-1,d0
    6dd2:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    6dd6:	|  /-- bra.s 6de6 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    6dd8:	\--|-> pea 1754c <PutChar+0x127e>
    6dde:	   |   jsr 157fa <KPrintF>
    6de4:	   |   addq.l #4,sp
}
    6de6:	   \-> nop
    6de8:	       movea.l (sp)+,a6
    6dea:	       lea 12(sp),sp
    6dee:	       rts

00006df0 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    6df0:	       movea.l 1af5e <speech>,a0
    6df6:	       move.l 4(a0),d0
    6dfa:	/----- beq.s 6e08 <isThereAnySpeechGoingOn+0x18>
    6dfc:	|      movea.l 1af5e <speech>,a0
    6e02:	|      move.l 16(a0),d0
    6e06:	|  /-- bra.s 6e0a <isThereAnySpeechGoingOn+0x1a>
    6e08:	\--|-> moveq #-1,d0
}
    6e0a:	   \-> rts

00006e0c <killAllSpeech>:

void killAllSpeech () {
    6e0c:	       lea -12(sp),sp
    6e10:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    6e12:	       movea.l 1af5e <speech>,a0
    6e18:	       move.l 12(a0),d0
    6e1c:	       moveq #-1,d1
    6e1e:	       cmp.l d0,d1
    6e20:	   /-- beq.s 6e2e <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    6e22:	   |   movea.l 1af5e <speech>,a0
    6e28:	   |   moveq #-1,d0
    6e2a:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    6e2e:	   \-> movea.l 1af5e <speech>,a0
    6e34:	       move.l (a0),d0
    6e36:	/----- beq.w 6ec2 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    6e3a:	|      movea.l 1af5e <speech>,a0
    6e40:	|      move.l (a0),d0
    6e42:	|      lea -120(sp),sp
    6e46:	|      move.l sp,d1
    6e48:	|      movea.l d0,a0
    6e4a:	|      moveq #120,d0
    6e4c:	|      move.l d0,-(sp)
    6e4e:	|      move.l a0,-(sp)
    6e50:	|      move.l d1,-(sp)
    6e52:	|      jsr 157ae <memcpy>
    6e58:	|      lea 12(sp),sp
    6e5c:	|      jsr 9ab0 <makeSilent>
    6e62:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    6e66:	|      movea.l 1af5e <speech>,a0
    6e6c:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    6e6e:	+----- bra.s 6ec2 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    6e70:	|  /-> movea.l 1af5e <speech>,a0
    6e76:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    6e7c:	|  |   movea.l 1af5e <speech>,a0
    6e82:	|  |   movea.l 4(a0),a1
    6e86:	|  |   movea.l 1af5e <speech>,a0
    6e8c:	|  |   move.l 4(a1),d0
    6e90:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    6e94:	|  |   movea.l 12(sp),a0
    6e98:	|  |   move.l (a0),8(sp)
    6e9c:	|  |   move.l 1af02 <SysBase>,d0
    6ea2:	|  |   movea.l d0,a6
    6ea4:	|  |   movea.l 8(sp),a1
    6ea8:	|  |   jsr -690(a6)
		FreeVec(killMe);
    6eac:	|  |   move.l 12(sp),4(sp)
    6eb2:	|  |   move.l 1af02 <SysBase>,d0
    6eb8:	|  |   movea.l d0,a6
    6eba:	|  |   movea.l 4(sp),a1
    6ebe:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    6ec2:	\--|-> movea.l 1af5e <speech>,a0
    6ec8:	   |   move.l 4(a0),d0
    6ecc:	   \-- bne.s 6e70 <killAllSpeech+0x64>
	}
}
    6ece:	       nop
    6ed0:	       nop
    6ed2:	       movea.l (sp)+,a6
    6ed4:	       lea 12(sp),sp
    6ed8:	       rts

00006eda <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    6eda:	pea 2 <_start+0x2>
    6ede:	move.l 8(sp),-(sp)
    6ee2:	jsr 703a <setFrames>
    6ee8:	addq.l #8,sp
}
    6eea:	nop
    6eec:	rts

00006eee <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    6eee:	       lea -52(sp),sp
    6ef2:	       move.l a6,-(sp)
    6ef4:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    6ef6:	       movea.l 64(sp),a0
    6efa:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    6f00:	       move.l 1a88a <speechSpeed>,d0
    6f06:	       move.l 68(sp),-(sp)
    6f0a:	       move.l d0,-(sp)
    6f0c:	       jsr a46 <putFloat>
    6f12:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    6f14:	       movea.l 64(sp),a0
    6f18:	       move.l 8(a0),d0
    6f1c:	       move.l 68(sp),-(sp)
    6f20:	       move.l d0,-(sp)
    6f22:	       jsr 8d0 <put2bytes>
    6f28:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    6f2a:	       movea.l 64(sp),a0
    6f2e:	       move.l 16(a0),d0
    6f32:	       move.l 68(sp),-(sp)
    6f36:	       move.l d0,-(sp)
    6f38:	       jsr 8d0 <put2bytes>
    6f3e:	       addq.l #8,sp
		if (sS -> currentTalker) {
    6f40:	       movea.l 64(sp),a0
    6f44:	       move.l (a0),d0
    6f46:	   /-- beq.s 6f8a <saveSpeech+0x9c>
			FPutC (fp, 1);
    6f48:	   |   move.l 68(sp),40(sp)
    6f4e:	   |   moveq #1,d0
    6f50:	   |   move.l d0,36(sp)
    6f54:	   |   move.l 1af0a <DOSBase>,d0
    6f5a:	   |   movea.l d0,a6
    6f5c:	   |   move.l 40(sp),d1
    6f60:	   |   move.l 36(sp),d2
    6f64:	   |   jsr -312(a6)
    6f68:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    6f6c:	   |   movea.l 64(sp),a0
    6f70:	   |   movea.l (a0),a0
    6f72:	   |   movea.l 102(a0),a0
    6f76:	   |   move.l 4(a0),d0
    6f7a:	   |   move.l 68(sp),-(sp)
    6f7e:	   |   move.l d0,-(sp)
    6f80:	   |   jsr 8d0 <put2bytes>
    6f86:	   |   addq.l #8,sp
    6f88:	/--|-- bra.s 7006 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    6f8a:	|  \-> move.l 68(sp),52(sp)
    6f90:	|      clr.l 48(sp)
    6f94:	|      move.l 1af0a <DOSBase>,d0
    6f9a:	|      movea.l d0,a6
    6f9c:	|      move.l 52(sp),d1
    6fa0:	|      move.l 48(sp),d2
    6fa4:	|      jsr -312(a6)
    6fa8:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    6fac:	+----- bra.s 7006 <saveSpeech+0x118>
			FPutC (fp, 1);
    6fae:	|  /-> move.l 68(sp),16(sp)
    6fb4:	|  |   moveq #1,d0
    6fb6:	|  |   move.l d0,12(sp)
    6fba:	|  |   move.l 1af0a <DOSBase>,d0
    6fc0:	|  |   movea.l d0,a6
    6fc2:	|  |   move.l 16(sp),d1
    6fc6:	|  |   move.l 12(sp),d2
    6fca:	|  |   jsr -312(a6)
    6fce:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    6fd2:	|  |   movea.l 56(sp),a0
    6fd6:	|  |   move.l (a0),d0
    6fd8:	|  |   move.l 68(sp),-(sp)
    6fdc:	|  |   move.l d0,-(sp)
    6fde:	|  |   jsr bd8 <writeString>
    6fe4:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    6fe6:	|  |   movea.l 56(sp),a0
    6fea:	|  |   move.l 8(a0),d0
    6fee:	|  |   move.l 68(sp),-(sp)
    6ff2:	|  |   move.l d0,-(sp)
    6ff4:	|  |   jsr 8d0 <put2bytes>
    6ffa:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    6ffc:	|  |   movea.l 56(sp),a0
    7000:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    7006:	\--|-> tst.l 56(sp)
    700a:	   \-- bne.s 6fae <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    700c:	       move.l 68(sp),28(sp)
    7012:	       clr.l 24(sp)
    7016:	       move.l 1af0a <DOSBase>,d0
    701c:	       movea.l d0,a6
    701e:	       move.l 28(sp),d1
    7022:	       move.l 24(sp),d2
    7026:	       jsr -312(a6)
    702a:	       move.l d0,20(sp)
}
    702e:	       nop
    7030:	       move.l (sp)+,d2
    7032:	       movea.l (sp)+,a6
    7034:	       lea 52(sp),sp
    7038:	       rts

0000703a <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    703a:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    703c:	movea.l 8(sp),a0
    7040:	movea.l 68(a0),a0
    7044:	move.l (a0),d2
    7046:	movea.l 8(sp),a0
    704a:	movea.l 68(a0),a0
    704e:	move.l 4(a0),d0
    7052:	move.l 12(sp),-(sp)
    7056:	move.l d0,-(sp)
    7058:	jsr 161b8 <__mulsi3>
    705e:	addq.l #8,sp
    7060:	move.l d0,d1
    7062:	movea.l 8(sp),a0
    7066:	move.l 94(a0),d0
    706a:	add.l d1,d0
    706c:	add.l d0,d0
    706e:	add.l d0,d0
    7070:	movea.l d2,a0
    7072:	adda.l d0,a0
    7074:	move.l (a0),d0
    7076:	movea.l 8(sp),a0
    707a:	move.l d0,60(a0)
}
    707e:	nop
    7080:	move.l (sp)+,d2
    7082:	rts

00007084 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    7084:	       lea -20(sp),sp
    7088:	       move.l d2,-(sp)
    708a:	       move.l 40(sp),d0
    708e:	       move.w d0,d0
    7090:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    7094:	       movea.l 1af5e <speech>,a0
    709a:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    70a0:	       move.l 32(sp),-(sp)
    70a4:	       jsr 959a <findPerson>
    70aa:	       addq.l #4,sp
    70ac:	       move.l d0,16(sp)
    if (thisPerson) {
    70b0:	   /-- beq.s 70d6 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    70b2:	   |   movea.w 6(sp),a0
    70b6:	   |   move.l a0,-(sp)
    70b8:	   |   move.l 40(sp),-(sp)
    70bc:	   |   move.l 24(sp),-(sp)
    70c0:	   |   move.l 40(sp),-(sp)
    70c4:	   |   jsr 719c <wrapSpeechPerson>
    70ca:	   |   lea 16(sp),sp
    70ce:	   |   move.l d0,20(sp)
    70d2:	/--|-- bra.w 7190 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    70d6:	|  \-> move.l 32(sp),-(sp)
    70da:	|      jsr 1417e <getRegionForObject>
    70e0:	|      addq.l #4,sp
    70e2:	|      move.l d0,12(sp)
        if (thisRegion) {
    70e6:	|  /-- beq.s 7152 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    70e8:	|  |   movea.l 12(sp),a0
    70ec:	|  |   movea.l 28(a0),a0
    70f0:	|  |   move.l 28(a0),d0
    70f4:	|  |   movea.l 12(sp),a0
    70f8:	|  |   movea.l 4(a0),a1
    70fc:	|  |   movea.l 12(sp),a0
    7100:	|  |   movea.l 28(a0),a0
    7104:	|  |   move.l 20(a0),d1
    7108:	|  |   movea.l a1,a0
    710a:	|  |   suba.l d1,a0
    710c:	|  |   move.l 1b018 <cameraY>,d1
    7112:	|  |   movea.l a0,a1
    7114:	|  |   suba.l d1,a1
    7116:	|  |   movea.l 12(sp),a0
    711a:	|  |   move.l (a0),d2
    711c:	|  |   movea.l 12(sp),a0
    7120:	|  |   move.l 8(a0),d1
    7124:	|  |   add.l d2,d1
    7126:	|  |   move.l d1,d2
    7128:	|  |   asr.l #1,d2
    712a:	|  |   move.l 1b014 <cameraX>,d1
    7130:	|  |   movea.l d2,a0
    7132:	|  |   suba.l d1,a0
    7134:	|  |   move.l 36(sp),-(sp)
    7138:	|  |   move.l d0,-(sp)
    713a:	|  |   move.l a1,-(sp)
    713c:	|  |   move.l a0,-(sp)
    713e:	|  |   move.l 44(sp),-(sp)
    7142:	|  |   jsr 72ba <wrapSpeechXY>
    7148:	|  |   lea 20(sp),sp
    714c:	|  |   move.l d0,20(sp)
    7150:	+--|-- bra.s 7190 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    7152:	|  \-> move.l 32(sp),-(sp)
    7156:	|      jsr c464 <findObjectType>
    715c:	|      addq.l #4,sp
    715e:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    7162:	|      movea.l 8(sp),a0
    7166:	|      move.l 28(a0),d1
    716a:	|      move.l 1ae56 <winWidth>,d0
    7170:	|      lsr.l #1,d0
    7172:	|      move.l 36(sp),-(sp)
    7176:	|      move.l d1,-(sp)
    7178:	|      pea a <_start+0xa>
    717c:	|      move.l d0,-(sp)
    717e:	|      move.l 44(sp),-(sp)
    7182:	|      jsr 72ba <wrapSpeechXY>
    7188:	|      lea 20(sp),sp
    718c:	|      move.l d0,20(sp)
        }
    }
    return i;
    7190:	\----> move.l 20(sp),d0
}
    7194:	       move.l (sp)+,d2
    7196:	       lea 20(sp),sp
    719a:	       rts

0000719c <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    719c:	    subq.l #8,sp
    719e:	    movem.l d2-d4,-(sp)
    71a2:	    move.l 36(sp),d0
    71a6:	    move.w d0,d0
    71a8:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    71ac:	    movea.l 28(sp),a0
    71b0:	    movea.l 102(a0),a0
    71b4:	    move.l 28(a0),d2
    71b8:	    movea.l 28(sp),a0
    71bc:	    move.l 4(a0),d3
    71c0:	    move.l 1b018 <cameraY>,d0
    71c6:	    move.l d0,-(sp)
    71c8:	    jsr 15c36 <__floatsisf>
    71ce:	    addq.l #4,sp
    71d0:	    move.l d0,-(sp)
    71d2:	    move.l d3,-(sp)
    71d4:	    jsr 15f2a <__subsf3>
    71da:	    addq.l #8,sp
    71dc:	    move.l d0,d3
    71de:	    movea.l 28(sp),a0
    71e2:	    move.l 20(a0),d4
    71e6:	    movea.l 28(sp),a0
    71ea:	    move.l 8(a0),d1
    71ee:	    movea.l 28(sp),a0
    71f2:	    move.l 12(a0),d0
    71f6:	    sub.l d0,d1
    71f8:	    move.l d1,-(sp)
    71fa:	    jsr 15c36 <__floatsisf>
    7200:	    addq.l #4,sp
    7202:	    move.l d0,-(sp)
    7204:	    move.l d4,-(sp)
    7206:	    jsr 15ce8 <__mulsf3>
    720c:	    addq.l #8,sp
    720e:	    move.l d0,-(sp)
    7210:	    move.l d3,-(sp)
    7212:	    jsr 15f2a <__subsf3>
    7218:	    addq.l #8,sp
    721a:	    move.l d0,d3
    721c:	    movea.l 28(sp),a0
    7220:	    movea.l 102(a0),a0
    7224:	    move.l 20(a0),d0
    7228:	    move.l d0,-(sp)
    722a:	    jsr 15c36 <__floatsisf>
    7230:	    addq.l #4,sp
    7232:	    move.l d0,-(sp)
    7234:	    move.l d3,-(sp)
    7236:	    jsr 15f2a <__subsf3>
    723c:	    addq.l #8,sp
    723e:	    move.l d0,-(sp)
    7240:	    jsr 15bce <__fixsfsi>
    7246:	    addq.l #4,sp
    7248:	    move.l d0,d4
    724a:	    movea.l 28(sp),a0
    724e:	    move.l (a0),d3
    7250:	    move.l 1b014 <cameraX>,d0
    7256:	    move.l d0,-(sp)
    7258:	    jsr 15c36 <__floatsisf>
    725e:	    addq.l #4,sp
    7260:	    move.l d0,-(sp)
    7262:	    move.l d3,-(sp)
    7264:	    jsr 15f2a <__subsf3>
    726a:	    addq.l #8,sp
    726c:	    move.l d0,-(sp)
    726e:	    jsr 15bce <__fixsfsi>
    7274:	    addq.l #4,sp
    7276:	    move.l 32(sp),-(sp)
    727a:	    move.l d2,-(sp)
    727c:	    move.l d4,-(sp)
    727e:	    move.l d0,-(sp)
    7280:	    move.l 40(sp),-(sp)
    7284:	    jsr 72ba <wrapSpeechXY>
    728a:	    lea 20(sp),sp
    728e:	    move.l d0,16(sp)
	if (animPerson) {
    7292:	    tst.w 14(sp)
    7296:	/-- beq.s 72ae <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    7298:	|   move.l 28(sp),-(sp)
    729c:	|   jsr 6eda <makeTalker>
    72a2:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    72a4:	|   movea.l 1af5e <speech>,a0
    72aa:	|   move.l 28(sp),(a0)
	}
	return i;
    72ae:	\-> move.l 16(sp),d0
}
    72b2:	    movem.l (sp)+,d2-d4
    72b6:	    addq.l #8,sp
    72b8:	    rts

000072ba <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    72ba:	                   lea -16(sp),sp
    72be:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    72c2:	                   clr.l 16(sp)
    killAllSpeech();
    72c6:	                   jsr 6e0c <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    72cc:	                   move.l 36(sp),-(sp)
    72d0:	                   jsr 12b1a <strlen>
    72d6:	                   addq.l #4,sp
    72d8:	                   movea.l d0,a0
    72da:	                   lea 20(a0),a0
    72de:	                   move.l a0,-(sp)
    72e0:	                   jsr 15c5e <__floatunsisf>
    72e6:	                   addq.l #4,sp
    72e8:	                   move.l d0,d1
    72ea:	                   move.l 1a88a <speechSpeed>,d0
    72f0:	                   move.l d0,-(sp)
    72f2:	                   move.l d1,-(sp)
    72f4:	                   jsr 15ce8 <__mulsf3>
    72fa:	                   addq.l #8,sp
    72fc:	                   move.l d0,-(sp)
    72fe:	                   jsr 15bce <__fixsfsi>
    7304:	                   addq.l #4,sp
    7306:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    730a:	               /-- bgt.s 7312 <wrapSpeechXY+0x58>
    730c:	               |   moveq #1,d0
    730e:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    7312:	               \-> moveq #-1,d1
    7314:	                   cmp.l 52(sp),d1
    7318:	               /-- beq.s 7358 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    731a:	               |   move.l 1b028 <speechMode>,d0
    7320:	               +-- ble.s 7358 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    7322:	               |   clr.l -(sp)
    7324:	               |   move.l 56(sp),-(sp)
    7328:	               |   jsr c12e <startSound>
    732e:	               |   addq.l #8,sp
    7330:	               |   tst.w d0
    7332:	               +-- beq.s 7358 <wrapSpeechXY+0x9e>
                speechTime = -10;
    7334:	               |   moveq #-10,d0
    7336:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    733a:	               |   movea.l 1af5e <speech>,a0
    7340:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    7346:	               |   move.l 1b028 <speechMode>,d0
    734c:	               |   moveq #2,d1
    734e:	               |   cmp.l d0,d1
    7350:	               +-- bne.s 7358 <wrapSpeechXY+0x9e>
    7352:	               |   moveq #-10,d0
    7354:	/--------------|-- bra.w 75de <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    7358:	|              \-> movea.l 1af5e <speech>,a0
    735e:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    7364:	|     /----------- bra.w 7418 <wrapSpeechXY+0x15e>
        a = wrap;
    7368:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    736e:	|  |  |        /-- bra.s 737e <wrapSpeechXY+0xc4>
            a--;
    7370:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    7374:	|  |  |  |     +-- bne.s 737e <wrapSpeechXY+0xc4>
                a = wrap;
    7376:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    737c:	|  |  |  |  /--|-- bra.s 7390 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    737e:	|  |  |  |  |  \-> move.l 28(sp),d0
    7382:	|  |  |  |  |      movea.l 36(sp),a0
    7386:	|  |  |  |  |      adda.l d0,a0
    7388:	|  |  |  |  |      move.b (a0),d0
    738a:	|  |  |  |  |      cmpi.b #32,d0
    738e:	|  |  |  \--|----- bne.s 7370 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    7390:	|  |  |     \----> move.l 28(sp),d0
    7394:	|  |  |            movea.l 36(sp),a0
    7398:	|  |  |            adda.l d0,a0
    739a:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    739c:	|  |  |            lea 16(sp),a0
    73a0:	|  |  |            move.l a0,-(sp)
    73a2:	|  |  |            move.l 44(sp),-(sp)
    73a6:	|  |  |            move.l 44(sp),-(sp)
    73aa:	|  |  |            jsr 6b56 <addSpeechLine>
    73b0:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    73b4:	|  |  |            move.l 28(sp),d0
    73b8:	|  |  |            movea.l 36(sp),a0
    73bc:	|  |  |            adda.l d0,a0
    73be:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    73c2:	|  |  |            move.l 28(sp),d0
    73c6:	|  |  |            addq.l #1,d0
    73c8:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    73cc:	|  |  |            move.l 44(sp),-(sp)
    73d0:	|  |  |            jsr 15c36 <__floatsisf>
    73d6:	|  |  |            addq.l #4,sp
    73d8:	|  |  |            move.l d0,d2
    73da:	|  |  |            move.l 1b04e <fontHeight>,d0
    73e0:	|  |  |            move.l d0,-(sp)
    73e2:	|  |  |            jsr 15c36 <__floatsisf>
    73e8:	|  |  |            addq.l #4,sp
    73ea:	|  |  |            move.l d0,d1
    73ec:	|  |  |            move.l 1a89e <cameraZoom>,d0
    73f2:	|  |  |            move.l d0,-(sp)
    73f4:	|  |  |            move.l d1,-(sp)
    73f6:	|  |  |            jsr 15ae2 <__divsf3>
    73fc:	|  |  |            addq.l #8,sp
    73fe:	|  |  |            move.l d0,-(sp)
    7400:	|  |  |            move.l d2,-(sp)
    7402:	|  |  |            jsr 15f2a <__subsf3>
    7408:	|  |  |            addq.l #8,sp
    740a:	|  |  |            move.l d0,-(sp)
    740c:	|  |  |            jsr 15bce <__fixsfsi>
    7412:	|  |  |            addq.l #4,sp
    7414:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    7418:	|  |  \----------> move.l 36(sp),-(sp)
    741c:	|  |               jsr 12b1a <strlen>
    7422:	|  |               addq.l #4,sp
    7424:	|  |               move.l d0,d1
    7426:	|  |               move.l 48(sp),d0
    742a:	|  |               cmp.l d1,d0
    742c:	|  \-------------- bcs.w 7368 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    7430:	|                  lea 16(sp),a0
    7434:	|                  move.l a0,-(sp)
    7436:	|                  move.l 44(sp),-(sp)
    743a:	|                  move.l 44(sp),-(sp)
    743e:	|                  jsr 6b56 <addSpeechLine>
    7444:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    7448:	|                  move.l 44(sp),-(sp)
    744c:	|                  jsr 15c36 <__floatsisf>
    7452:	|                  addq.l #4,sp
    7454:	|                  move.l d0,d2
    7456:	|                  move.l 1b04e <fontHeight>,d0
    745c:	|                  move.l d0,-(sp)
    745e:	|                  jsr 15c36 <__floatsisf>
    7464:	|                  addq.l #4,sp
    7466:	|                  move.l d0,d1
    7468:	|                  move.l 1a89e <cameraZoom>,d0
    746e:	|                  move.l d0,-(sp)
    7470:	|                  move.l d1,-(sp)
    7472:	|                  jsr 15ae2 <__divsf3>
    7478:	|                  addq.l #8,sp
    747a:	|                  move.l d0,-(sp)
    747c:	|                  move.l d2,-(sp)
    747e:	|                  jsr 15f2a <__subsf3>
    7484:	|                  addq.l #8,sp
    7486:	|                  move.l d0,-(sp)
    7488:	|                  jsr 15bce <__fixsfsi>
    748e:	|                  addq.l #4,sp
    7490:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    7494:	|              /-- bpl.s 74b2 <wrapSpeechXY+0x1f8>
    7496:	|              |   movea.l 1af5e <speech>,a0
    749c:	|              |   move.l 8(a0),d0
    74a0:	|              |   movea.l 1af5e <speech>,a0
    74a6:	|              |   sub.l 44(sp),d0
    74aa:	|              |   move.l d0,8(a0)
    74ae:	|           /--|-- bra.w 75a0 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    74b2:	|           |  \-> movea.l 1af5e <speech>,a0
    74b8:	|           |      move.l 8(a0),d0
    74bc:	|           |      move.l d0,-(sp)
    74be:	|           |      jsr 15c36 <__floatsisf>
    74c4:	|           |      addq.l #4,sp
    74c6:	|           |      move.l d0,d2
    74c8:	|           |      move.l 1b018 <cameraY>,d0
    74ce:	|           |      move.l d0,-(sp)
    74d0:	|           |      jsr 15c36 <__floatsisf>
    74d6:	|           |      addq.l #4,sp
    74d8:	|           |      move.l d0,d3
    74da:	|           |      move.l 1ae5a <winHeight>,d4
    74e0:	|           |      move.l 1b04e <fontHeight>,d0
    74e6:	|           |      pea 3 <_start+0x3>
    74ea:	|           |      move.l d0,-(sp)
    74ec:	|           |      jsr 16236 <__divsi3>
    74f2:	|           |      addq.l #8,sp
    74f4:	|           |      move.l d4,d1
    74f6:	|           |      sub.l d0,d1
    74f8:	|           |      move.l d1,-(sp)
    74fa:	|           |      jsr 15c5e <__floatunsisf>
    7500:	|           |      addq.l #4,sp
    7502:	|           |      move.l d0,d1
    7504:	|           |      move.l 1a89e <cameraZoom>,d0
    750a:	|           |      move.l d0,-(sp)
    750c:	|           |      move.l d1,-(sp)
    750e:	|           |      jsr 15ae2 <__divsf3>
    7514:	|           |      addq.l #8,sp
    7516:	|           |      move.l d0,-(sp)
    7518:	|           |      move.l d3,-(sp)
    751a:	|           |      jsr 159e8 <__addsf3>
    7520:	|           |      addq.l #8,sp
    7522:	|           |      move.l d0,-(sp)
    7524:	|           |      move.l d2,-(sp)
    7526:	|           |      jsr 15da2 <__gtsf2>
    752c:	|           |      addq.l #8,sp
    752e:	|           |      tst.l d0
    7530:	|           +----- ble.s 75a0 <wrapSpeechXY+0x2e6>
    7532:	|           |      move.l 1b018 <cameraY>,d0
    7538:	|           |      move.l d0,-(sp)
    753a:	|           |      jsr 15c36 <__floatsisf>
    7540:	|           |      addq.l #4,sp
    7542:	|           |      move.l d0,d2
    7544:	|           |      move.l 1ae5a <winHeight>,d3
    754a:	|           |      move.l 1b04e <fontHeight>,d0
    7550:	|           |      pea 3 <_start+0x3>
    7554:	|           |      move.l d0,-(sp)
    7556:	|           |      jsr 16236 <__divsi3>
    755c:	|           |      addq.l #8,sp
    755e:	|           |      move.l d3,d1
    7560:	|           |      sub.l d0,d1
    7562:	|           |      move.l d1,-(sp)
    7564:	|           |      jsr 15c5e <__floatunsisf>
    756a:	|           |      addq.l #4,sp
    756c:	|           |      move.l d0,d1
    756e:	|           |      move.l 1a89e <cameraZoom>,d0
    7574:	|           |      move.l d0,-(sp)
    7576:	|           |      move.l d1,-(sp)
    7578:	|           |      jsr 15ae2 <__divsf3>
    757e:	|           |      addq.l #8,sp
    7580:	|           |      move.l d0,-(sp)
    7582:	|           |      move.l d2,-(sp)
    7584:	|           |      jsr 159e8 <__addsf3>
    758a:	|           |      addq.l #8,sp
    758c:	|           |      movea.l 1af5e <speech>,a2
    7592:	|           |      move.l d0,-(sp)
    7594:	|           |      jsr 15bce <__fixsfsi>
    759a:	|           |      addq.l #4,sp
    759c:	|           |      move.l d0,8(a2)

    if (offset) {
    75a0:	|           \----> move.l 16(sp),d0
    75a4:	|        /-------- beq.s 75da <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    75a6:	|        |         movea.l 1af5e <speech>,a0
    75ac:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    75b2:	|        |     /-- bra.s 75d4 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    75b4:	|        |  /--|-> movea.l 20(sp),a0
    75b8:	|        |  |  |   move.l 8(a0),d1
    75bc:	|        |  |  |   move.l 16(sp),d0
    75c0:	|        |  |  |   add.l d1,d0
    75c2:	|        |  |  |   movea.l 20(sp),a0
    75c6:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    75ca:	|        |  |  |   movea.l 20(sp),a0
    75ce:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    75d4:	|        |  |  \-> tst.l 20(sp)
    75d8:	|        |  \----- bne.s 75b4 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    75da:	|        \-------> move.l 24(sp),d0
}
    75de:	\----------------> movem.l (sp)+,d2-d4/a2
    75e2:	                   lea 16(sp),sp
    75e6:	                   rts

000075e8 <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    75e8:	    subq.l #4,sp
    75ea:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    75ec:	    move.l 1afb2 <zBuffer+0x50>,d0
    75f2:	/-- beq.s 762a <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    75f4:	|   pea 1afb6 <zBuffer+0x54>
    75fa:	|   pea 1 <_start+0x1>
    75fe:	|   jsr 2f16 <deleteTextures>
    7604:	|   addq.l #8,sp
		zBuffer.texName = 0;
    7606:	|   clr.l 1afb6 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    760c:	|   move.l 1afb2 <zBuffer+0x50>,4(sp)
    7614:	|   move.l 1af02 <SysBase>,d0
    761a:	|   movea.l d0,a6
    761c:	|   movea.l 4(sp),a1
    7620:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    7624:	|   clr.l 1afb2 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    762a:	\-> clr.l 1af6a <zBuffer+0x8>
	zBuffer.originalNum =0;
    7630:	    clr.l 1afae <zBuffer+0x4c>
}
    7636:	    nop
    7638:	    movea.l (sp)+,a6
    763a:	    addq.l #4,sp
    763c:	    rts

0000763e <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    763e:	                         lea -528(sp),sp
    7642:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    7646:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    764a:	                         jsr 75e8 <killZBuffer>

	zBuffer.originalNum = y;
    7650:	                         move.l 544(sp),d0
    7654:	                         move.l d0,1afae <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    765a:	                         move.l 544(sp),d0
    765e:	                         move.l d0,-(sp)
    7660:	                         jsr 5c54 <openFileFromNum>
    7666:	                         addq.l #4,sp
    7668:	                         tst.l d0
    766a:	                     /-- bne.s 7672 <setZBuffer+0x34>
    766c:	                     |   clr.w d0
    766e:	/--------------------|-- bra.w 7a50 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    7672:	|                    \-> move.l 1aeea <bigDataFile>,524(sp)
    767a:	|                        move.l 1af0a <DOSBase>,d0
    7680:	|                        movea.l d0,a6
    7682:	|                        move.l 524(sp),d1
    7686:	|                        jsr -306(a6)
    768a:	|                        move.l d0,520(sp)
    768e:	|                        move.l 520(sp),d0
    7692:	|                        moveq #83,d1
    7694:	|                        cmp.l d0,d1
    7696:	|                    /-- beq.s 76f8 <setZBuffer+0xba>
    7698:	|                    |   move.l 1aeea <bigDataFile>,516(sp)
    76a0:	|                    |   move.l 1af0a <DOSBase>,d0
    76a6:	|                    |   movea.l d0,a6
    76a8:	|                    |   move.l 516(sp),d1
    76ac:	|                    |   jsr -306(a6)
    76b0:	|                    |   move.l d0,512(sp)
    76b4:	|                    |   move.l 512(sp),d0
    76b8:	|                    |   moveq #122,d1
    76ba:	|                    |   cmp.l d0,d1
    76bc:	|                    +-- beq.s 76f8 <setZBuffer+0xba>
    76be:	|                    |   move.l 1aeea <bigDataFile>,508(sp)
    76c6:	|                    |   move.l 1af0a <DOSBase>,d0
    76cc:	|                    |   movea.l d0,a6
    76ce:	|                    |   move.l 508(sp),d1
    76d2:	|                    |   jsr -306(a6)
    76d6:	|                    |   move.l d0,504(sp)
    76da:	|                    |   move.l 504(sp),d0
    76de:	|                    |   moveq #98,d1
    76e0:	|                    |   cmp.l d0,d1
    76e2:	|                    +-- beq.s 76f8 <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    76e4:	|                    |   pea 17589 <PutChar+0x12bb>
    76ea:	|                    |   jsr 157fa <KPrintF>
    76f0:	|                    |   addq.l #4,sp
		 return FALSE;
    76f2:	|                    |   clr.w d0
    76f4:	+--------------------|-- bra.w 7a50 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    76f8:	|                    \-> move.l 1aeea <bigDataFile>,500(sp)
    7700:	|                        move.l 1af0a <DOSBase>,d0
    7706:	|                        movea.l d0,a6
    7708:	|                        move.l 500(sp),d1
    770c:	|                        jsr -306(a6)
    7710:	|                        move.l d0,496(sp)
    7714:	|                        move.l 496(sp),d0
    7718:	|                    /-- beq.s 7722 <setZBuffer+0xe4>
    771a:	|                    |   moveq #1,d1
    771c:	|                    |   cmp.l d0,d1
    771e:	|                 /--|-- beq.s 7738 <setZBuffer+0xfa>
    7720:	|              /--|--|-- bra.s 7766 <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    7722:	|              |  |  \-> move.l #640,1af62 <zBuffer>
		zBuffer.height = 480;
    772c:	|              |  |      move.l #480,1af66 <zBuffer+0x4>
		break;
    7736:	|              |  |  /-- bra.s 777a <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    7738:	|              |  \--|-> move.l 1aeea <bigDataFile>,d0
    773e:	|              |     |   move.l d0,-(sp)
    7740:	|              |     |   jsr 6bc <get2bytes>
    7746:	|              |     |   addq.l #4,sp
    7748:	|              |     |   move.l d0,1af62 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    774e:	|              |     |   move.l 1aeea <bigDataFile>,d0
    7754:	|              |     |   move.l d0,-(sp)
    7756:	|              |     |   jsr 6bc <get2bytes>
    775c:	|              |     |   addq.l #4,sp
    775e:	|              |     |   move.l d0,1af66 <zBuffer+0x4>
		break;
    7764:	|              |     +-- bra.s 777a <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    7766:	|              \-----|-> pea 1759d <PutChar+0x12cf>
    776c:	|                    |   jsr 157fa <KPrintF>
    7772:	|                    |   addq.l #4,sp
		return FALSE;
    7774:	|                    |   clr.w d0
    7776:	+--------------------|-- bra.w 7a50 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    777a:	|                    \-> move.l 1af62 <zBuffer>,d0
    7780:	|                        move.l d0,d1
    7782:	|                        move.l 1aff6 <sceneWidth>,d0
    7788:	|                        cmp.l d1,d0
    778a:	|                    /-- bne.s 779e <setZBuffer+0x160>
    778c:	|                    |   move.l 1af66 <zBuffer+0x4>,d0
    7792:	|                    |   move.l d0,d1
    7794:	|                    |   move.l 1affa <sceneHeight>,d0
    779a:	|                    |   cmp.l d1,d0
    779c:	|                 /--|-- beq.s 77ee <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    779e:	|                 |  \-> movea.l 1affa <sceneHeight>,a1
    77a4:	|                 |      movea.l 1aff6 <sceneWidth>,a0
    77aa:	|                 |      move.l 1af66 <zBuffer+0x4>,d1
    77b0:	|                 |      move.l 1af62 <zBuffer>,d0
    77b6:	|                 |      move.l a1,-(sp)
    77b8:	|                 |      move.l a0,-(sp)
    77ba:	|                 |      move.l d1,-(sp)
    77bc:	|                 |      move.l d0,-(sp)
    77be:	|                 |      pea 175e9 <PutChar+0x131b>
    77c4:	|                 |      moveq #32,d0
    77c6:	|                 |      add.l sp,d0
    77c8:	|                 |      move.l d0,-(sp)
    77ca:	|                 |      jsr 12e38 <sprintf>
    77d0:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    77d4:	|                 |      moveq #12,d0
    77d6:	|                 |      add.l sp,d0
    77d8:	|                 |      move.l d0,-(sp)
    77da:	|                 |      pea 17604 <PutChar+0x1336>
    77e0:	|                 |      jsr 157fa <KPrintF>
    77e6:	|                 |      addq.l #8,sp
		return FALSE;
    77e8:	|                 |      clr.w d0
    77ea:	+-----------------|----- bra.w 7a50 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    77ee:	|                 \----> move.l 1aeea <bigDataFile>,492(sp)
    77f6:	|                        move.l 1af0a <DOSBase>,d0
    77fc:	|                        movea.l d0,a6
    77fe:	|                        move.l 492(sp),d1
    7802:	|                        jsr -306(a6)
    7806:	|                        move.l d0,488(sp)
    780a:	|                        move.l 488(sp),d0
    780e:	|                        move.l d0,1af6a <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7814:	|                        clr.l 544(sp)
    7818:	|                    /-- bra.s 7844 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    781a:	|                 /--|-> move.l 1aeea <bigDataFile>,d0
    7820:	|                 |  |   move.l d0,-(sp)
    7822:	|                 |  |   jsr 6bc <get2bytes>
    7828:	|                 |  |   addq.l #4,sp
    782a:	|                 |  |   move.l 544(sp),d1
    782e:	|                 |  |   add.l d1,d1
    7830:	|                 |  |   add.l d1,d1
    7832:	|                 |  |   lea 540(sp),a0
    7836:	|                 |  |   add.l a0,d1
    7838:	|                 |  |   movea.l d1,a0
    783a:	|                 |  |   lea -144(a0),a0
    783e:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7840:	|                 |  |   addq.l #1,544(sp)
    7844:	|                 |  \-> move.l 1af6a <zBuffer+0x8>,d0
    784a:	|                 |      cmp.l 544(sp),d0
    784e:	|                 \----- bhi.s 781a <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    7850:	|                        move.l 1af6a <zBuffer+0x8>,d0
    7856:	|                        move.l d0,-(sp)
    7858:	|                        move.l sp,d0
    785a:	|                        addi.l #336,d0
    7860:	|                        move.l d0,-(sp)
    7862:	|                        move.l sp,d0
    7864:	|                        addi.l #404,d0
    786a:	|                        move.l d0,-(sp)
    786c:	|                        jsr 7a5a <sortZPal>
    7872:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7876:	|                        clr.l 544(sp)
    787a:	|                    /-- bra.s 78f2 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    787c:	|                 /--|-> move.l 544(sp),d0
    7880:	|                 |  |   add.l d0,d0
    7882:	|                 |  |   add.l d0,d0
    7884:	|                 |  |   move.l #540,d1
    788a:	|                 |  |   add.l sp,d1
    788c:	|                 |  |   add.l d1,d0
    788e:	|                 |  |   movea.l d0,a0
    7890:	|                 |  |   lea -208(a0),a0
    7894:	|                 |  |   move.l (a0),d0
    7896:	|                 |  |   add.l d0,d0
    7898:	|                 |  |   add.l d0,d0
    789a:	|                 |  |   lea 540(sp),a0
    789e:	|                 |  |   add.l a0,d0
    78a0:	|                 |  |   movea.l d0,a0
    78a2:	|                 |  |   lea -144(a0),a0
    78a6:	|                 |  |   move.l (a0),d0
    78a8:	|                 |  |   move.l 544(sp),d1
    78ac:	|                 |  |   addq.l #3,d1
    78ae:	|                 |  |   add.l d1,d1
    78b0:	|                 |  |   movea.l d1,a1
    78b2:	|                 |  |   adda.l d1,a1
    78b4:	|                 |  |   lea 1af62 <zBuffer>,a0
    78ba:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    78be:	|                 |  |   move.l 544(sp),d0
    78c2:	|                 |  |   add.l d0,d0
    78c4:	|                 |  |   add.l d0,d0
    78c6:	|                 |  |   move.l #540,d1
    78cc:	|                 |  |   add.l sp,d1
    78ce:	|                 |  |   add.l d1,d0
    78d0:	|                 |  |   movea.l d0,a0
    78d2:	|                 |  |   lea -208(a0),a0
    78d6:	|                 |  |   move.l (a0),d1
    78d8:	|                 |  |   move.l 544(sp),d0
    78dc:	|                 |  |   add.l d1,d1
    78de:	|                 |  |   add.l d1,d1
    78e0:	|                 |  |   lea 540(sp),a0
    78e4:	|                 |  |   add.l a0,d1
    78e6:	|                 |  |   movea.l d1,a0
    78e8:	|                 |  |   lea -272(a0),a0
    78ec:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    78ee:	|                 |  |   addq.l #1,544(sp)
    78f2:	|                 |  \-> move.l 1af6a <zBuffer+0x8>,d0
    78f8:	|                 |      cmp.l 544(sp),d0
    78fc:	|                 \----- bhi.w 787c <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    7900:	|                        move.l 1aff6 <sceneWidth>,d0
    7906:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    790a:	|                        move.l 1affa <sceneHeight>,d0
    7910:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    7914:	|                        move.l 484(sp),-(sp)
    7918:	|                        move.l 484(sp),-(sp)
    791c:	|                        jsr 161b8 <__mulsi3>
    7922:	|                        addq.l #8,sp
    7924:	|                        move.l d0,476(sp)
    7928:	|                        clr.l 472(sp)
    792c:	|                        move.l 1af02 <SysBase>,d0
    7932:	|                        movea.l d0,a6
    7934:	|                        move.l 476(sp),d0
    7938:	|                        move.l 472(sp),d1
    793c:	|                        jsr -684(a6)
    7940:	|                        move.l d0,468(sp)
    7944:	|                        move.l 468(sp),d0
    7948:	|                        move.l d0,1afb2 <zBuffer+0x50>
	if (!zBuffer.tex) {
    794e:	|                        move.l 1afb2 <zBuffer+0x50>,d0
    7954:	|                    /-- bne.s 796a <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    7956:	|                    |   pea 17641 <PutChar+0x1373>
    795c:	|                    |   jsr 157fa <KPrintF>
    7962:	|                    |   addq.l #4,sp
		return FALSE;
    7964:	|                    |   clr.w d0
    7966:	+--------------------|-- bra.w 7a50 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    796a:	|                    \-> clr.l 544(sp)
    796e:	|     /----------------- bra.w 7a3a <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    7972:	|  /--|----------------> clr.l 536(sp)
    7976:	|  |  |     /----------- bra.w 7a26 <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    797a:	|  |  |  /--|----------> tst.l 528(sp)
    797e:	|  |  |  |  |  /-------- bne.s 79dc <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    7980:	|  |  |  |  |  |         move.l 1aeea <bigDataFile>,464(sp)
    7988:	|  |  |  |  |  |         move.l 1af0a <DOSBase>,d0
    798e:	|  |  |  |  |  |         movea.l d0,a6
    7990:	|  |  |  |  |  |         move.l 464(sp),d1
    7994:	|  |  |  |  |  |         jsr -306(a6)
    7998:	|  |  |  |  |  |         move.l d0,460(sp)
    799c:	|  |  |  |  |  |         move.l 460(sp),d0
    79a0:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    79a4:	|  |  |  |  |  |         move.l 532(sp),d0
    79a8:	|  |  |  |  |  |         asr.l #4,d0
    79aa:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    79ae:	|  |  |  |  |  |         moveq #15,d0
    79b0:	|  |  |  |  |  |         cmp.l 528(sp),d0
    79b4:	|  |  |  |  |  |  /----- bne.s 79d2 <setZBuffer+0x394>
    79b6:	|  |  |  |  |  |  |      move.l 1aeea <bigDataFile>,d0
    79bc:	|  |  |  |  |  |  |      move.l d0,-(sp)
    79be:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    79c4:	|  |  |  |  |  |  |      addq.l #4,sp
    79c6:	|  |  |  |  |  |  |      movea.l d0,a0
    79c8:	|  |  |  |  |  |  |      lea 16(a0),a0
    79cc:	|  |  |  |  |  |  |      move.l a0,528(sp)
    79d0:	|  |  |  |  |  |  |  /-- bra.s 79d6 <setZBuffer+0x398>
				else stillToGo ++;
    79d2:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    79d6:	|  |  |  |  |  |     \-> moveq #15,d1
    79d8:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    79dc:	|  |  |  |  |  \-------> move.l 532(sp),d0
    79e0:	|  |  |  |  |            add.l d0,d0
    79e2:	|  |  |  |  |            add.l d0,d0
    79e4:	|  |  |  |  |            lea 540(sp),a0
    79e8:	|  |  |  |  |            add.l a0,d0
    79ea:	|  |  |  |  |            movea.l d0,a0
    79ec:	|  |  |  |  |            lea -272(a0),a0
    79f0:	|  |  |  |  |            move.l (a0),d0
    79f2:	|  |  |  |  |            move.l d0,d2
    79f4:	|  |  |  |  |            move.l 1afb2 <zBuffer+0x50>,d3
    79fa:	|  |  |  |  |            move.l 484(sp),d0
    79fe:	|  |  |  |  |            move.l 544(sp),-(sp)
    7a02:	|  |  |  |  |            move.l d0,-(sp)
    7a04:	|  |  |  |  |            jsr 161b8 <__mulsi3>
    7a0a:	|  |  |  |  |            addq.l #8,sp
    7a0c:	|  |  |  |  |            move.l d0,d1
    7a0e:	|  |  |  |  |            move.l 536(sp),d0
    7a12:	|  |  |  |  |            add.l d1,d0
    7a14:	|  |  |  |  |            movea.l d3,a0
    7a16:	|  |  |  |  |            adda.l d0,a0
    7a18:	|  |  |  |  |            move.b d2,d0
    7a1a:	|  |  |  |  |            lsl.b #4,d0
    7a1c:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    7a1e:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    7a22:	|  |  |  |  |            addq.l #1,536(sp)
    7a26:	|  |  |  |  \----------> move.l 536(sp),d1
    7a2a:	|  |  |  |               move.l 1aff6 <sceneWidth>,d0
    7a30:	|  |  |  |               cmp.l d1,d0
    7a32:	|  |  |  \-------------- bhi.w 797a <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    7a36:	|  |  |                  addq.l #1,544(sp)
    7a3a:	|  |  \----------------> move.l 1affa <sceneHeight>,d0
    7a40:	|  |                     cmp.l 544(sp),d0
    7a44:	|  \-------------------- bhi.w 7972 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    7a48:	|                        jsr 5b4c <finishAccess>
	
	return TRUE;
    7a4e:	|                        moveq #1,d0
}
    7a50:	\----------------------> movem.l (sp)+,d2-d3/a6
    7a54:	                         lea 528(sp),sp
    7a58:	                         rts

00007a5a <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    7a5a:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    7a5c:	             clr.l 4(sp)
    7a60:	         /-- bra.s 7a78 <sortZPal+0x1e>
		newpal[i] = i;
    7a62:	      /--|-> move.l 4(sp),d0
    7a66:	      |  |   add.l d0,d0
    7a68:	      |  |   add.l d0,d0
    7a6a:	      |  |   movea.l 16(sp),a0
    7a6e:	      |  |   adda.l d0,a0
    7a70:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    7a74:	      |  |   addq.l #1,4(sp)
    7a78:	      |  \-> move.l 4(sp),d0
    7a7c:	      |      cmp.l 20(sp),d0
    7a80:	      \----- blt.s 7a62 <sortZPal+0x8>
	}

	if (size < 2) return;		
    7a82:	             moveq #1,d0
    7a84:	             cmp.l 20(sp),d0
    7a88:	/----------- bge.w 7b3a <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    7a8c:	|            moveq #1,d0
    7a8e:	|            move.l d0,4(sp)
    7a92:	|     /----- bra.w 7b2c <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    7a96:	|  /--|----> move.l 4(sp),d0
    7a9a:	|  |  |      add.l d0,d0
    7a9c:	|  |  |      add.l d0,d0
    7a9e:	|  |  |      movea.l 16(sp),a0
    7aa2:	|  |  |      adda.l d0,a0
    7aa4:	|  |  |      move.l (a0),d0
    7aa6:	|  |  |      add.l d0,d0
    7aa8:	|  |  |      add.l d0,d0
    7aaa:	|  |  |      movea.l 12(sp),a0
    7aae:	|  |  |      adda.l d0,a0
    7ab0:	|  |  |      move.l (a0),d1
    7ab2:	|  |  |      move.l 4(sp),d0
    7ab6:	|  |  |      addi.l #1073741823,d0
    7abc:	|  |  |      add.l d0,d0
    7abe:	|  |  |      add.l d0,d0
    7ac0:	|  |  |      movea.l 16(sp),a0
    7ac4:	|  |  |      adda.l d0,a0
    7ac6:	|  |  |      move.l (a0),d0
    7ac8:	|  |  |      add.l d0,d0
    7aca:	|  |  |      add.l d0,d0
    7acc:	|  |  |      movea.l 12(sp),a0
    7ad0:	|  |  |      adda.l d0,a0
    7ad2:	|  |  |      move.l (a0),d0
    7ad4:	|  |  |      cmp.l d1,d0
    7ad6:	|  |  |  /-- ble.s 7b28 <sortZPal+0xce>
			tmp = newpal[i];
    7ad8:	|  |  |  |   move.l 4(sp),d0
    7adc:	|  |  |  |   add.l d0,d0
    7ade:	|  |  |  |   add.l d0,d0
    7ae0:	|  |  |  |   movea.l 16(sp),a0
    7ae4:	|  |  |  |   adda.l d0,a0
    7ae6:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    7ae8:	|  |  |  |   move.l 4(sp),d0
    7aec:	|  |  |  |   addi.l #1073741823,d0
    7af2:	|  |  |  |   add.l d0,d0
    7af4:	|  |  |  |   add.l d0,d0
    7af6:	|  |  |  |   movea.l 16(sp),a1
    7afa:	|  |  |  |   adda.l d0,a1
    7afc:	|  |  |  |   move.l 4(sp),d0
    7b00:	|  |  |  |   add.l d0,d0
    7b02:	|  |  |  |   add.l d0,d0
    7b04:	|  |  |  |   movea.l 16(sp),a0
    7b08:	|  |  |  |   adda.l d0,a0
    7b0a:	|  |  |  |   move.l (a1),d0
    7b0c:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    7b0e:	|  |  |  |   move.l 4(sp),d0
    7b12:	|  |  |  |   addi.l #1073741823,d0
    7b18:	|  |  |  |   add.l d0,d0
    7b1a:	|  |  |  |   add.l d0,d0
    7b1c:	|  |  |  |   movea.l 16(sp),a0
    7b20:	|  |  |  |   adda.l d0,a0
    7b22:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    7b24:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    7b28:	|  |  |  \-> addq.l #1,4(sp)
    7b2c:	|  |  \----> move.l 4(sp),d0
    7b30:	|  |         cmp.l 20(sp),d0
    7b34:	|  \-------- blt.w 7a96 <sortZPal+0x3c>
    7b38:	|        /-- bra.s 7b3c <sortZPal+0xe2>
	if (size < 2) return;		
    7b3a:	\--------|-> nop
		}
	}
    7b3c:	         \-> addq.l #8,sp
    7b3e:	             rts

00007b40 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    7b40:	          lea -36(sp),sp
    7b44:	          move.l a6,-(sp)

	struct spriteBank *spritebanktoforget = &forgetme->bank;
    7b46:	          move.l 44(sp),d0
    7b4a:	          addq.l #8,d0
    7b4c:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7b50:	          clr.l 36(sp)
    7b54:	   /----- bra.s 7b9a <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    7b56:	/--|----> movea.l 28(sp),a0
    7b5a:	|  |      movea.l 8(a0),a0
    7b5e:	|  |      move.l 36(sp),d1
    7b62:	|  |      move.l d1,d0
    7b64:	|  |      lsl.l #3,d0
    7b66:	|  |      sub.l d1,d0
    7b68:	|  |      add.l d0,d0
    7b6a:	|  |      add.l d0,d0
    7b6c:	|  |      adda.l d0,a0
    7b6e:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    7b72:	|  |      movea.l 8(sp),a0
    7b76:	|  |      move.l 24(a0),d0
    7b7a:	|  |  /-- beq.s 7b96 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    7b7c:	|  |  |   movea.l 8(sp),a0
    7b80:	|  |  |   move.l 24(a0),4(sp)
    7b86:	|  |  |   move.l 1af02 <SysBase>,d0
    7b8c:	|  |  |   movea.l d0,a6
    7b8e:	|  |  |   movea.l 4(sp),a1
    7b92:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7b96:	|  |  \-> addq.l #1,36(sp)
    7b9a:	|  \----> movea.l 28(sp),a0
    7b9e:	|         move.l (a0),d0
    7ba0:	|         cmp.l 36(sp),d0
    7ba4:	\-------- bgt.s 7b56 <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    7ba6:	          movea.l 28(sp),a0
    7baa:	          move.l 8(a0),24(sp)
    7bb0:	          move.l 1af02 <SysBase>,d0
    7bb6:	          movea.l d0,a6
    7bb8:	          movea.l 24(sp),a1
    7bbc:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    7bc0:	          move.l 28(sp),20(sp)
    7bc6:	          move.l 1af02 <SysBase>,d0
    7bcc:	          movea.l d0,a6
    7bce:	          movea.l 20(sp),a1
    7bd2:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    7bd6:	          move.l 1b066 <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7bde:	      /-- bra.s 7bea <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    7be0:	   /--|-> movea.l 32(sp),a0
    7be4:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7bea:	   |  \-> movea.l 32(sp),a0
    7bee:	   |      movea.l 22(a0),a0
    7bf2:	   |      move.l (a0),d1
    7bf4:	   |      movea.l 44(sp),a0
    7bf8:	   |      move.l (a0),d0
    7bfa:	   |      cmp.l d1,d0
    7bfc:	   |  /-- beq.s 7c04 <forgetSpriteBank+0xc4>
    7bfe:	   |  |   tst.l 32(sp)
    7c02:	   \--|-- bne.s 7be0 <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    7c04:	      \-> tst.l 32(sp)
    7c08:	   /----- beq.s 7c32 <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    7c0a:	   |      movea.l 44(sp),a0
    7c0e:	   |      move.l 22(a0),d0
    7c12:	   |      movea.l 32(sp),a0
    7c16:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    7c1a:	   |      move.l 44(sp),12(sp)
    7c20:	   |      move.l 1af02 <SysBase>,d0
    7c26:	   |      movea.l d0,a6
    7c28:	   |      movea.l 12(sp),a1
    7c2c:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    7c30:	   |  /-- bra.s 7c58 <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    7c32:	   \--|-> movea.l 1b066 <allLoadedBanks>,a0
    7c38:	      |   move.l 22(a0),d0
    7c3c:	      |   move.l d0,1b066 <allLoadedBanks>
		FreeVec( forgetme);
    7c42:	      |   move.l 44(sp),16(sp)
    7c48:	      |   move.l 1af02 <SysBase>,d0
    7c4e:	      |   movea.l d0,a6
    7c50:	      |   movea.l 16(sp),a1
    7c54:	      |   jsr -690(a6)
}
    7c58:	      \-> nop
    7c5a:	          movea.l (sp)+,a6
    7c5c:	          lea 36(sp),sp
    7c60:	          rts

00007c62 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    7c62:	                lea -80(sp),sp
    7c66:	                movem.l d2-d4/a2/a6,-(sp)
    7c6a:	                move.l 112(sp),d0
    7c6e:	                move.w d0,d0
    7c70:	                move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    7c74:	                clr.l 90(sp)
    7c78:	                clr.l 86(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    7c7c:	                clr.l 82(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    7c80:	                move.l 104(sp),-(sp)
    7c84:	                jsr 5c54 <openFileFromNum>
    7c8a:	                addq.l #4,sp
    7c8c:	                tst.l d0
    7c8e:	            /-- bne.s 7ca4 <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    7c90:	            |   pea 17664 <PutChar+0x1396>
    7c96:	            |   jsr 157fa <KPrintF>
    7c9c:	            |   addq.l #4,sp
		return FALSE;
    7c9e:	            |   clr.w d0
    7ca0:	/-----------|-- bra.w 7fac <loadSpriteBank+0x34a>
	}

	loadhere->isFont = isFont;
    7ca4:	|           \-> movea.l 108(sp),a0
    7ca8:	|               move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    7cae:	|               move.l 1aeea <bigDataFile>,d0
    7cb4:	|               move.l d0,-(sp)
    7cb6:	|               jsr 6bc <get2bytes>
    7cbc:	|               addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    7cbe:	|               move.l 1aeea <bigDataFile>,78(sp)
    7cc6:	|               move.l 1af0a <DOSBase>,d0
    7ccc:	|               movea.l d0,a6
    7cce:	|               move.l 78(sp),d1
    7cd2:	|               jsr -306(a6)
    7cd6:	|               move.l d0,74(sp)
    7cda:	|               move.l 74(sp),d0
    7cde:	|               movea.l 108(sp),a0
    7ce2:	|               move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    7ce6:	|               move.l 1aeea <bigDataFile>,d0
    7cec:	|               move.l d0,-(sp)
    7cee:	|               jsr 6bc <get2bytes>
    7cf4:	|               addq.l #4,sp
    7cf6:	|               move.l d0,70(sp)

	if (total <= 0) {
    7cfa:	|           /-- bgt.s 7d10 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    7cfc:	|           |   pea 17692 <PutChar+0x13c4>
    7d02:	|           |   jsr 157fa <KPrintF>
    7d08:	|           |   addq.l #4,sp
		return FALSE;
    7d0a:	|           |   clr.w d0
    7d0c:	+-----------|-- bra.w 7fac <loadSpriteBank+0x34a>
	}
	if (loadhere->type > 2) {
    7d10:	|           \-> movea.l 108(sp),a0
    7d14:	|               move.l 4(a0),d0
    7d18:	|               moveq #2,d1
    7d1a:	|               cmp.l d0,d1
    7d1c:	|           /-- bge.s 7d32 <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    7d1e:	|           |   pea 176d2 <PutChar+0x1404>
    7d24:	|           |   jsr 157fa <KPrintF>
    7d2a:	|           |   addq.l #4,sp
		return FALSE;
    7d2c:	|           |   clr.w d0
    7d2e:	+-----------|-- bra.w 7fac <loadSpriteBank+0x34a>
	}

	loadhere->total = total;
    7d32:	|           \-> movea.l 108(sp),a0
    7d36:	|               move.l 70(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    7d3a:	|               move.l 70(sp),d1
    7d3e:	|               move.l d1,d0
    7d40:	|               lsl.l #3,d0
    7d42:	|               sub.l d1,d0
    7d44:	|               add.l d0,d0
    7d46:	|               add.l d0,d0
    7d48:	|               move.l d0,66(sp)
    7d4c:	|               clr.l 62(sp)
    7d50:	|               move.l 1af02 <SysBase>,d0
    7d56:	|               movea.l d0,a6
    7d58:	|               move.l 66(sp),d0
    7d5c:	|               move.l 62(sp),d1
    7d60:	|               jsr -684(a6)
    7d64:	|               move.l d0,58(sp)
    7d68:	|               move.l 58(sp),d0
    7d6c:	|               movea.l 108(sp),a0
    7d70:	|               move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    7d74:	|               movea.l 108(sp),a0
    7d78:	|               move.l 8(a0),d0
    7d7c:	|           /-- bne.s 7d84 <loadSpriteBank+0x122>
    7d7e:	|           |   clr.w d0
    7d80:	+-----------|-- bra.w 7fac <loadSpriteBank+0x34a>
	
	startIndex = 1;
    7d84:	|           \-> moveq #1,d0
    7d86:	|               move.l d0,86(sp)

	for (i = 0; i < total; i++) {
    7d8a:	|               clr.l 96(sp)
    7d8e:	|     /-------- bra.w 7f98 <loadSpriteBank+0x336>
		loadhere->sprites[i].width = get2bytes(bigDataFile);
    7d92:	|  /--|-------> movea.l 1aeea <bigDataFile>,a1
    7d98:	|  |  |         movea.l 108(sp),a0
    7d9c:	|  |  |         movea.l 8(a0),a0
    7da0:	|  |  |         move.l 96(sp),d1
    7da4:	|  |  |         move.l d1,d0
    7da6:	|  |  |         lsl.l #3,d0
    7da8:	|  |  |         sub.l d1,d0
    7daa:	|  |  |         add.l d0,d0
    7dac:	|  |  |         add.l d0,d0
    7dae:	|  |  |         lea (0,a0,d0.l),a2
    7db2:	|  |  |         move.l a1,-(sp)
    7db4:	|  |  |         jsr 6bc <get2bytes>
    7dba:	|  |  |         addq.l #4,sp
    7dbc:	|  |  |         move.l d0,(a2)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    7dbe:	|  |  |         movea.l 1aeea <bigDataFile>,a1
    7dc4:	|  |  |         movea.l 108(sp),a0
    7dc8:	|  |  |         movea.l 8(a0),a0
    7dcc:	|  |  |         move.l 96(sp),d1
    7dd0:	|  |  |         move.l d1,d0
    7dd2:	|  |  |         lsl.l #3,d0
    7dd4:	|  |  |         sub.l d1,d0
    7dd6:	|  |  |         add.l d0,d0
    7dd8:	|  |  |         add.l d0,d0
    7dda:	|  |  |         lea (0,a0,d0.l),a2
    7dde:	|  |  |         move.l a1,-(sp)
    7de0:	|  |  |         jsr 6bc <get2bytes>
    7de6:	|  |  |         addq.l #4,sp
    7de8:	|  |  |         move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    7dec:	|  |  |         movea.l 1aeea <bigDataFile>,a1
    7df2:	|  |  |         movea.l 108(sp),a0
    7df6:	|  |  |         movea.l 8(a0),a0
    7dfa:	|  |  |         move.l 96(sp),d1
    7dfe:	|  |  |         move.l d1,d0
    7e00:	|  |  |         lsl.l #3,d0
    7e02:	|  |  |         sub.l d1,d0
    7e04:	|  |  |         add.l d0,d0
    7e06:	|  |  |         add.l d0,d0
    7e08:	|  |  |         lea (0,a0,d0.l),a2
    7e0c:	|  |  |         move.l a1,-(sp)
    7e0e:	|  |  |         jsr 6bc <get2bytes>
    7e14:	|  |  |         addq.l #4,sp
    7e16:	|  |  |         move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    7e1a:	|  |  |         movea.l 1aeea <bigDataFile>,a1
    7e20:	|  |  |         movea.l 108(sp),a0
    7e24:	|  |  |         movea.l 8(a0),a0
    7e28:	|  |  |         move.l 96(sp),d1
    7e2c:	|  |  |         move.l d1,d0
    7e2e:	|  |  |         lsl.l #3,d0
    7e30:	|  |  |         sub.l d1,d0
    7e32:	|  |  |         add.l d0,d0
    7e34:	|  |  |         add.l d0,d0
    7e36:	|  |  |         lea (0,a0,d0.l),a2
    7e3a:	|  |  |         move.l a1,-(sp)
    7e3c:	|  |  |         jsr 6bc <get2bytes>
    7e42:	|  |  |         addq.l #4,sp
    7e44:	|  |  |         move.l d0,12(a2)

		UWORD size;
		// ToDo Load Data
		if( loadhere->type == 1) 
    7e48:	|  |  |         movea.l 108(sp),a0
    7e4c:	|  |  |         move.l 4(a0),d0
    7e50:	|  |  |         moveq #1,d1
    7e52:	|  |  |         cmp.l d0,d1
    7e54:	|  |  |     /-- bne.s 7e80 <loadSpriteBank+0x21e>
		//Mousecursor Data (4 Colors HW-Sprite)
		{
			size = 4*loadhere->sprites[i].height+8;
    7e56:	|  |  |     |   movea.l 108(sp),a0
    7e5a:	|  |  |     |   movea.l 8(a0),a0
    7e5e:	|  |  |     |   move.l 96(sp),d1
    7e62:	|  |  |     |   move.l d1,d0
    7e64:	|  |  |     |   lsl.l #3,d0
    7e66:	|  |  |     |   sub.l d1,d0
    7e68:	|  |  |     |   add.l d0,d0
    7e6a:	|  |  |     |   add.l d0,d0
    7e6c:	|  |  |     |   adda.l d0,a0
    7e6e:	|  |  |     |   move.l 4(a0),d0
    7e72:	|  |  |     |   addq.l #2,d0
    7e74:	|  |  |     |   move.l d0,d0
    7e76:	|  |  |     |   add.w d0,d0
    7e78:	|  |  |     |   add.w d0,d0
    7e7a:	|  |  |     |   move.w d0,94(sp)
    7e7e:	|  |  |  /--|-- bra.s 7ed0 <loadSpriteBank+0x26e>
		} else {
			size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    7e80:	|  |  |  |  \-> movea.l 108(sp),a0
    7e84:	|  |  |  |      movea.l 8(a0),a0
    7e88:	|  |  |  |      move.l 96(sp),d1
    7e8c:	|  |  |  |      move.l d1,d0
    7e8e:	|  |  |  |      lsl.l #3,d0
    7e90:	|  |  |  |      sub.l d1,d0
    7e92:	|  |  |  |      add.l d0,d0
    7e94:	|  |  |  |      add.l d0,d0
    7e96:	|  |  |  |      adda.l d0,a0
    7e98:	|  |  |  |      move.l (a0),d0
    7e9a:	|  |  |  |  /-- bpl.s 7e9e <loadSpriteBank+0x23c>
    7e9c:	|  |  |  |  |   addq.l #7,d0
    7e9e:	|  |  |  |  \-> asr.l #3,d0
    7ea0:	|  |  |  |      move.l d0,d2
    7ea2:	|  |  |  |      movea.l 108(sp),a0
    7ea6:	|  |  |  |      movea.l 8(a0),a0
    7eaa:	|  |  |  |      move.l 96(sp),d1
    7eae:	|  |  |  |      move.l d1,d0
    7eb0:	|  |  |  |      lsl.l #3,d0
    7eb2:	|  |  |  |      sub.l d1,d0
    7eb4:	|  |  |  |      add.l d0,d0
    7eb6:	|  |  |  |      add.l d0,d0
    7eb8:	|  |  |  |      adda.l d0,a0
    7eba:	|  |  |  |      move.l 4(a0),d0
    7ebe:	|  |  |  |      move.l d0,d0
    7ec0:	|  |  |  |      move.w d2,d1
    7ec2:	|  |  |  |      muls.w d0,d1
    7ec4:	|  |  |  |      move.w d1,d0
    7ec6:	|  |  |  |      add.w d0,d0
    7ec8:	|  |  |  |      add.w d1,d0
    7eca:	|  |  |  |      add.w d0,d0
    7ecc:	|  |  |  |      move.w d0,94(sp)
		}
		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    7ed0:	|  |  |  \----> moveq #0,d0
    7ed2:	|  |  |         move.w 94(sp),d0
    7ed6:	|  |  |         add.l d0,d0
    7ed8:	|  |  |         move.l d0,54(sp)
    7edc:	|  |  |         moveq #2,d0
    7ede:	|  |  |         move.l d0,50(sp)
    7ee2:	|  |  |         move.l 1af02 <SysBase>,d0
    7ee8:	|  |  |         movea.l d0,a6
    7eea:	|  |  |         move.l 54(sp),d0
    7eee:	|  |  |         move.l 50(sp),d1
    7ef2:	|  |  |         jsr -684(a6)
    7ef6:	|  |  |         move.l d0,46(sp)
    7efa:	|  |  |         movea.l 46(sp),a1
    7efe:	|  |  |         movea.l 108(sp),a0
    7f02:	|  |  |         movea.l 8(a0),a0
    7f06:	|  |  |         move.l 96(sp),d1
    7f0a:	|  |  |         move.l d1,d0
    7f0c:	|  |  |         lsl.l #3,d0
    7f0e:	|  |  |         sub.l d1,d0
    7f10:	|  |  |         add.l d0,d0
    7f12:	|  |  |         add.l d0,d0
    7f14:	|  |  |         adda.l d0,a0
    7f16:	|  |  |         move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    7f1a:	|  |  |         move.l 1aeea <bigDataFile>,42(sp)
    7f22:	|  |  |         movea.l 108(sp),a0
    7f26:	|  |  |         movea.l 8(a0),a0
    7f2a:	|  |  |         move.l 96(sp),d1
    7f2e:	|  |  |         move.l d1,d0
    7f30:	|  |  |         lsl.l #3,d0
    7f32:	|  |  |         sub.l d1,d0
    7f34:	|  |  |         add.l d0,d0
    7f36:	|  |  |         add.l d0,d0
    7f38:	|  |  |         adda.l d0,a0
    7f3a:	|  |  |         move.l 24(a0),38(sp)
    7f40:	|  |  |         moveq #2,d1
    7f42:	|  |  |         move.l d1,34(sp)
    7f46:	|  |  |         move.w 94(sp),d0
    7f4a:	|  |  |         lsr.w #1,d0
    7f4c:	|  |  |         move.w d0,d0
    7f4e:	|  |  |         andi.l #65535,d0
    7f54:	|  |  |         move.l d0,30(sp)
    7f58:	|  |  |         move.l 1af0a <DOSBase>,d0
    7f5e:	|  |  |         movea.l d0,a6
    7f60:	|  |  |         move.l 42(sp),d1
    7f64:	|  |  |         move.l 38(sp),d2
    7f68:	|  |  |         move.l 34(sp),d3
    7f6c:	|  |  |         move.l 30(sp),d4
    7f70:	|  |  |         jsr -324(a6)
    7f74:	|  |  |         move.l d0,26(sp)
    7f78:	|  |  |         move.l 26(sp),d0
    7f7c:	|  |  |         move.w d0,24(sp)
		if (!count) {
    7f80:	|  |  |     /-- bne.s 7f94 <loadSpriteBank+0x332>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    7f82:	|  |  |     |   pea 17707 <PutChar+0x1439>
    7f88:	|  |  |     |   jsr 157fa <KPrintF>
    7f8e:	|  |  |     |   addq.l #4,sp
			return FALSE;
    7f90:	|  |  |     |   clr.w d0
    7f92:	+--|--|-----|-- bra.s 7fac <loadSpriteBank+0x34a>
	for (i = 0; i < total; i++) {
    7f94:	|  |  |     \-> addq.l #1,96(sp)
    7f98:	|  |  \-------> move.l 96(sp),d0
    7f9c:	|  |            cmp.l 70(sp),d0
    7fa0:	|  \----------- blt.w 7d92 <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    7fa4:	|               jsr 5b4c <finishAccess>

	return TRUE;
    7faa:	|               moveq #1,d0
}
    7fac:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    7fb0:	                lea 80(sp),sp
    7fb4:	                rts

00007fb6 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    7fb6:	                   lea -16(sp),sp
    7fba:	                   move.l 28(sp),d0
    7fbe:	                   move.w d0,d0
    7fc0:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    7fc4:	                   movea.l 24(sp),a0
    7fc8:	                   move.l (a0),d0
    7fca:	                   move.l d0,-(sp)
    7fcc:	                   jsr 15f96 <__fixunssfsi>
    7fd2:	                   addq.l #4,sp
    7fd4:	                   move.l d0,d0
    7fd6:	                   movea.l 20(sp),a0
    7fda:	                   move.l 8(a0),d1
    7fde:	                   move.l d1,d1
    7fe0:	                   movea.w d0,a0
    7fe2:	                   suba.w d1,a0
    7fe4:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;
    7fe8:	                   movea.l 24(sp),a0
    7fec:	                   move.l 4(a0),d0
    7ff0:	                   move.l d0,-(sp)
    7ff2:	                   jsr 15f96 <__fixunssfsi>
    7ff8:	                   addq.l #4,sp
    7ffa:	                   move.l d0,d0
    7ffc:	                   movea.l 20(sp),a0
    8000:	                   move.l 12(a0),d1
    8004:	                   move.l d1,d1
    8006:	                   movea.w d0,a0
    8008:	                   suba.w d1,a0
    800a:	                   move.w a0,4(sp)

	CstScaleSprite( single, (WORD) x, (WORD) y,SCREEN);
    800e:	                   move.w 4(sp),d0
    8012:	                   movea.w d0,a1
    8014:	                   move.w 6(sp),d0
    8018:	                   movea.w d0,a0
    801a:	                   pea 1 <_start+0x1>
    801e:	                   move.l a1,-(sp)
    8020:	                   move.l a0,-(sp)
    8022:	                   move.l 32(sp),-(sp)
    8026:	                   jsr 1cc8 <CstScaleSprite>
    802c:	                   lea 16(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8030:	                   movea.l 24(sp),a0
    8034:	                   move.l 106(a0),d0
    8038:	                   moveq #8,d1
    803a:	                   and.l d1,d0
    803c:	   /-------------- beq.w 80fe <scaleSprite+0x148>
		if (single->xhot < 0)
    8040:	   |               movea.l 20(sp),a0
    8044:	   |               move.l 8(a0),d0
    8048:	   |  /----------- bpl.s 8080 <scaleSprite+0xca>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    804a:	   |  |            tst.w 2(sp)
    804e:	   |  |     /----- beq.s 8066 <scaleSprite+0xb0>
    8050:	   |  |     |      movea.l 20(sp),a0
    8054:	   |  |     |      move.l (a0),d0
    8056:	   |  |     |      move.l d0,d1
    8058:	   |  |     |      movea.l 20(sp),a0
    805c:	   |  |     |      move.l 8(a0),d0
    8060:	   |  |     |      move.l d0,d0
    8062:	   |  |     |      sub.w d0,d1
    8064:	   |  |     |  /-- bra.s 8074 <scaleSprite+0xbe>
    8066:	   |  |     \--|-> movea.l 20(sp),a0
    806a:	   |  |        |   move.l 8(a0),d0
    806e:	   |  |        |   move.l d0,d0
    8070:	   |  |        |   move.w d0,d1
    8072:	   |  |        |   addq.w #1,d1
    8074:	   |  |        \-> movea.w 6(sp),a0
    8078:	   |  |            suba.w d1,a0
    807a:	   |  |            move.w a0,14(sp)
    807e:	   |  |  /-------- bra.s 80b4 <scaleSprite+0xfe>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8080:	   |  \--|-------> tst.w 2(sp)
    8084:	   |     |  /----- beq.s 80a0 <scaleSprite+0xea>
    8086:	   |     |  |      movea.l 20(sp),a0
    808a:	   |     |  |      move.l (a0),d0
    808c:	   |     |  |      move.l d0,d1
    808e:	   |     |  |      movea.l 20(sp),a0
    8092:	   |     |  |      move.l 8(a0),d0
    8096:	   |     |  |      move.l d0,d0
    8098:	   |     |  |      sub.w d0,d1
    809a:	   |     |  |      move.w d1,d0
    809c:	   |     |  |      subq.w #1,d0
    809e:	   |     |  |  /-- bra.s 80aa <scaleSprite+0xf4>
    80a0:	   |     |  \--|-> movea.l 20(sp),a0
    80a4:	   |     |     |   move.l 8(a0),d0
    80a8:	   |     |     |   move.l d0,d0
    80aa:	   |     |     \-> move.w 6(sp),d1
    80ae:	   |     |         sub.w d0,d1
    80b0:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    80b4:	   |     \-------> movea.l 24(sp),a0
    80b8:	   |               move.l 12(a0),d0
    80bc:	   |               move.l d0,d1
    80be:	   |               movea.l 20(sp),a0
    80c2:	   |               move.l 12(a0),d0
    80c6:	   |               move.l d0,d0
    80c8:	   |               sub.w d0,d1
    80ca:	   |               movea.w 4(sp),a0
    80ce:	   |               adda.w d1,a0
    80d0:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    80d4:	   |               movea.l 20(sp),a0
    80d8:	   |               move.l (a0),d0
    80da:	   |               move.l d0,d0
    80dc:	   |               move.w 14(sp),d1
    80e0:	   |               add.w d0,d1
    80e2:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    80e6:	   |               movea.l 20(sp),a0
    80ea:	   |               move.l 4(a0),d0
    80ee:	   |               move.l d0,d0
    80f0:	   |               movea.w 12(sp),a0
    80f4:	   |               adda.w d0,a0
    80f6:	   |               move.w a0,8(sp)
    80fa:	/--|-------------- bra.w 81d0 <scaleSprite+0x21a>
	} else {
		x -= cameraX;
    80fe:	|  \-------------> move.l 1b014 <cameraX>,d0
    8104:	|                  move.l d0,d0
    8106:	|                  sub.w d0,6(sp)
		y -= cameraY;
    810a:	|                  move.l 1b018 <cameraY>,d0
    8110:	|                  move.l d0,d0
    8112:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    8116:	|                  movea.l 20(sp),a0
    811a:	|                  move.l 8(a0),d0
    811e:	|     /----------- bpl.s 8156 <scaleSprite+0x1a0>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8120:	|     |            tst.w 2(sp)
    8124:	|     |     /----- beq.s 813c <scaleSprite+0x186>
    8126:	|     |     |      movea.l 20(sp),a0
    812a:	|     |     |      move.l (a0),d0
    812c:	|     |     |      move.l d0,d1
    812e:	|     |     |      movea.l 20(sp),a0
    8132:	|     |     |      move.l 8(a0),d0
    8136:	|     |     |      move.l d0,d0
    8138:	|     |     |      sub.w d0,d1
    813a:	|     |     |  /-- bra.s 814a <scaleSprite+0x194>
    813c:	|     |     \--|-> movea.l 20(sp),a0
    8140:	|     |        |   move.l 8(a0),d0
    8144:	|     |        |   move.l d0,d0
    8146:	|     |        |   move.w d0,d1
    8148:	|     |        |   addq.w #1,d1
    814a:	|     |        \-> move.w 6(sp),d0
    814e:	|     |            sub.w d1,d0
    8150:	|     |            move.w d0,14(sp)
    8154:	|     |  /-------- bra.s 818a <scaleSprite+0x1d4>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8156:	|     \--|-------> tst.w 2(sp)
    815a:	|        |  /----- beq.s 8176 <scaleSprite+0x1c0>
    815c:	|        |  |      movea.l 20(sp),a0
    8160:	|        |  |      move.l (a0),d0
    8162:	|        |  |      move.l d0,d1
    8164:	|        |  |      movea.l 20(sp),a0
    8168:	|        |  |      move.l 8(a0),d0
    816c:	|        |  |      move.l d0,d0
    816e:	|        |  |      sub.w d0,d1
    8170:	|        |  |      move.w d1,d0
    8172:	|        |  |      subq.w #1,d0
    8174:	|        |  |  /-- bra.s 8180 <scaleSprite+0x1ca>
    8176:	|        |  \--|-> movea.l 20(sp),a0
    817a:	|        |     |   move.l 8(a0),d0
    817e:	|        |     |   move.l d0,d0
    8180:	|        |     \-> move.w 6(sp),d1
    8184:	|        |         sub.w d0,d1
    8186:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    818a:	|        \-------> movea.l 24(sp),a0
    818e:	|                  move.l 12(a0),d0
    8192:	|                  move.l d0,d1
    8194:	|                  movea.l 20(sp),a0
    8198:	|                  move.l 12(a0),d0
    819c:	|                  move.l d0,d0
    819e:	|                  sub.w d0,d1
    81a0:	|                  movea.w 4(sp),a0
    81a4:	|                  adda.w d1,a0
    81a6:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    81aa:	|                  movea.l 20(sp),a0
    81ae:	|                  move.l (a0),d0
    81b0:	|                  move.l d0,d0
    81b2:	|                  move.w 14(sp),d1
    81b6:	|                  add.w d0,d1
    81b8:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    81bc:	|                  movea.l 20(sp),a0
    81c0:	|                  move.l 4(a0),d0
    81c4:	|                  move.l d0,d0
    81c6:	|                  movea.w 12(sp),a0
    81ca:	|                  adda.w d0,a0
    81cc:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    81d0:	\----------------> move.l 1aebe <input+0xa>,d1
    81d6:	                   moveq #0,d0
    81d8:	                   move.w 14(sp),d0
    81dc:	                   cmp.l d1,d0
    81de:	            /----- bgt.s 8214 <scaleSprite+0x25e>
    81e0:	            |      move.l 1aebe <input+0xa>,d1
    81e6:	            |      moveq #0,d0
    81e8:	            |      move.w 10(sp),d0
    81ec:	            |      cmp.l d1,d0
    81ee:	            +----- blt.s 8214 <scaleSprite+0x25e>
    81f0:	            |      move.l 1aec2 <input+0xe>,d1
    81f6:	            |      moveq #0,d0
    81f8:	            |      move.w 12(sp),d0
    81fc:	            |      cmp.l d1,d0
    81fe:	            +----- bgt.s 8214 <scaleSprite+0x25e>
    8200:	            |      move.l 1aec2 <input+0xe>,d1
    8206:	            |      moveq #0,d0
    8208:	            |      move.w 8(sp),d0
    820c:	            |      cmp.l d1,d0
    820e:	            +----- blt.s 8214 <scaleSprite+0x25e>
		return TRUE;
    8210:	            |      moveq #1,d0
    8212:	            |  /-- bra.s 8216 <scaleSprite+0x260>
	}
	return FALSE;
    8214:	            \--|-> clr.w d0
    8216:	               \-> lea 16(sp),sp
    821a:	                   rts

0000821c <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    821c:	    move.l 4(sp),d0
    8220:	/-- bpl.s 8224 <TF_abs+0x8>
    8222:	|   neg.l d0
}
    8224:	\-> rts

00008226 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    8226:	             lea -28(sp),sp
    822a:	             move.l a6,-(sp)
    822c:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    822e:	             moveq #120,d0
    8230:	             move.l d0,28(sp)
    8234:	             clr.l 24(sp)
    8238:	             move.l 1af02 <SysBase>,d0
    823e:	             movea.l d0,a6
    8240:	             move.l 28(sp),d0
    8244:	             move.l 24(sp),d1
    8248:	             jsr -684(a6)
    824c:	             move.l d0,20(sp)
    8250:	             move.l 20(sp),d0
    8254:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    8258:	         /-- bne.s 8260 <addPerson+0x3a>
    825a:	         |   clr.w d0
    825c:	/--------|-- bra.w 8490 <addPerson+0x26a>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    8260:	|        \-> move.l 48(sp),-(sp)
    8264:	|            jsr c554 <loadObjectType>
    826a:	|            addq.l #4,sp
    826c:	|            movea.l 16(sp),a0
    8270:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    8274:	|            movea.l 16(sp),a0
    8278:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    8280:	|            movea.l 16(sp),a0
    8284:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    8288:	|            movea.l 16(sp),a0
    828c:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    8290:	|            move.l 44(sp),-(sp)
    8294:	|            jsr 15c36 <__floatsisf>
    829a:	|            addq.l #4,sp
    829c:	|            move.l d0,d2
    829e:	|            move.l 40(sp),-(sp)
    82a2:	|            jsr 15c36 <__floatsisf>
    82a8:	|            addq.l #4,sp
    82aa:	|            move.l d2,-(sp)
    82ac:	|            move.l d0,-(sp)
    82ae:	|            move.l 24(sp),-(sp)
    82b2:	|            jsr 9ce2 <moveAndScale>
    82b8:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    82bc:	|            movea.l 16(sp),a0
    82c0:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    82c4:	|            movea.l 16(sp),a0
    82c8:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    82ce:	|            movea.l 16(sp),a0
    82d2:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    82d8:	|            movea.l 16(sp),a0
    82dc:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    82e0:	|            movea.l 16(sp),a0
    82e4:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    82e8:	|            movea.l 16(sp),a0
    82ec:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    82f2:	|            movea.l 16(sp),a0
    82f6:	|            clr.l 94(a0)
    newPerson->angle = 180;
    82fa:	|            movea.l 16(sp),a0
    82fe:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    8306:	|            movea.l 16(sp),a0
    830a:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    8312:	|            movea.l 16(sp),a0
    8316:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    831a:	|            movea.l 16(sp),a0
    831e:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    8322:	|            movea.l 16(sp),a0
    8326:	|            movea.l 102(a0),a0
    832a:	|            move.l 24(a0),d0
    832e:	|            movea.l 16(sp),a0
    8332:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    8336:	|            movea.l 16(sp),a0
    833a:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    833e:	|            movea.l 16(sp),a0
    8342:	|            movea.l 102(a0),a0
    8346:	|            move.l 32(a0),d0
    834a:	|            movea.l 16(sp),a0
    834e:	|            move.l d0,110(a0)
    newPerson->r = 0;
    8352:	|            movea.l 16(sp),a0
    8356:	|            clr.b 114(a0)
    newPerson->g = 0;
    835a:	|            movea.l 16(sp),a0
    835e:	|            clr.b 115(a0)
    newPerson->b = 0;
    8362:	|            movea.l 16(sp),a0
    8366:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    836a:	|            movea.l 16(sp),a0
    836e:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    8372:	|            movea.l 16(sp),a0
    8376:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    837a:	|            movea.l 16(sp),a0
    837e:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    8384:	|            clr.l -(sp)
    8386:	|            move.l 20(sp),-(sp)
    838a:	|            jsr 703a <setFrames>
    8390:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    8392:	|            movea.l 52(sp),a0
    8396:	|            movea.l (a0),a0
    8398:	|            movea.l (a0),a0
    839a:	|            movea.l 4(a0),a0
    839e:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    83a2:	|     /----- bpl.s 83ac <addPerson+0x186>
    83a4:	|     |      move.l 12(sp),d0
    83a8:	|     |      neg.l d0
    83aa:	|     |  /-- bra.s 83ae <addPerson+0x188>
    83ac:	|     \--|-> moveq #1,d0
    83ae:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    83b2:	|            movea.l 52(sp),a0
    83b6:	|            movea.l (a0),a0
    83b8:	|            movea.l (a0),a0
    83ba:	|            movea.l (a0),a0
    83bc:	|            move.l 8(a0),d0
    83c0:	|            cmp.l 8(sp),d0
    83c4:	|     /----- bgt.s 83f6 <addPerson+0x1d0>
        if (fNumSigned < 0) {
    83c6:	|     |      tst.l 12(sp)
    83ca:	|     |  /-- bge.s 83d8 <addPerson+0x1b2>
            newPerson->height = 5;
    83cc:	|     |  |   movea.l 16(sp),a0
    83d0:	|     |  |   moveq #5,d1
    83d2:	|     |  |   move.l d1,8(a0)
    83d6:	|  /--|--|-- bra.s 8422 <addPerson+0x1fc>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    83d8:	|  |  |  \-> movea.l 52(sp),a0
    83dc:	|  |  |      movea.l (a0),a0
    83de:	|  |  |      movea.l (a0),a0
    83e0:	|  |  |      movea.l (a0),a0
    83e2:	|  |  |      movea.l 16(a0),a0
    83e6:	|  |  |      move.l 12(a0),d0
    83ea:	|  |  |      addq.l #5,d0
    83ec:	|  |  |      movea.l 16(sp),a0
    83f0:	|  |  |      move.l d0,8(a0)
    83f4:	|  +--|----- bra.s 8422 <addPerson+0x1fc>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    83f6:	|  |  \----> movea.l 52(sp),a0
    83fa:	|  |         movea.l (a0),a0
    83fc:	|  |         movea.l (a0),a0
    83fe:	|  |         movea.l (a0),a0
    8400:	|  |         movea.l 16(a0),a0
    8404:	|  |         move.l 8(sp),d1
    8408:	|  |         move.l d1,d0
    840a:	|  |         lsl.l #3,d0
    840c:	|  |         sub.l d1,d0
    840e:	|  |         add.l d0,d0
    8410:	|  |         add.l d0,d0
    8412:	|  |         adda.l d0,a0
    8414:	|  |         move.l 12(a0),d0
    8418:	|  |         addq.l #5,d0
    841a:	|  |         movea.l 16(sp),a0
    841e:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    8422:	|  \-------> move.l #110522,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    842a:	|        /-- bra.s 843a <addPerson+0x214>
        changethat = &((*changethat)->next);
    842c:	|     /--|-> movea.l 32(sp),a0
    8430:	|     |  |   move.l (a0),d0
    8432:	|     |  |   moveq #24,d1
    8434:	|     |  |   add.l d0,d1
    8436:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    843a:	|     |  \-> movea.l 32(sp),a0
    843e:	|     |      move.l (a0),d0
    8440:	|     |  /-- beq.s 8468 <addPerson+0x242>
    8442:	|     |  |   movea.l 32(sp),a0
    8446:	|     |  |   movea.l (a0),a0
    8448:	|     |  |   move.l 4(a0),d2
    844c:	|     |  |   move.l 44(sp),-(sp)
    8450:	|     |  |   jsr 15c36 <__floatsisf>
    8456:	|     |  |   addq.l #4,sp
    8458:	|     |  |   move.l d0,-(sp)
    845a:	|     |  |   move.l d2,-(sp)
    845c:	|     |  |   jsr 15e5c <__ltsf2>
    8462:	|     |  |   addq.l #8,sp
    8464:	|     |  |   tst.l d0
    8466:	|     \--|-- blt.s 842c <addPerson+0x206>
    }

    newPerson->next = (*changethat);
    8468:	|        \-> movea.l 32(sp),a0
    846c:	|            move.l (a0),d0
    846e:	|            movea.l 16(sp),a0
    8472:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    8476:	|            movea.l 32(sp),a0
    847a:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    847e:	|            movea.l 16(sp),a0
    8482:	|            move.l 102(a0),d0
    8486:	|            sne d0
    8488:	|            neg.b d0
    848a:	|            move.b d0,d0
    848c:	|            andi.w #255,d0
}
    8490:	\----------> move.l (sp)+,d2
    8492:	             movea.l (sp)+,a6
    8494:	             lea 28(sp),sp
    8498:	             rts

0000849a <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    849a:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    849c:	       move.l 8(sp),-(sp)
    84a0:	       jsr 959a <findPerson>
    84a6:	       addq.l #4,sp
    84a8:	       move.l d0,(sp)
    if (moveMe) {
    84aa:	/----- beq.s 84de <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    84ac:	|      movea.l (sp),a0
    84ae:	|      move.l 56(a0),d0
    84b2:	|  /-- beq.s 84c4 <animatePerson+0x2a>
    84b4:	|  |   movea.l (sp),a0
    84b6:	|  |   move.l 56(a0),d0
    84ba:	|  |   move.l d0,-(sp)
    84bc:	|  |   jsr 363e <abortFunction>
    84c2:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    84c4:	|  \-> movea.l (sp),a0
    84c6:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    84ca:	|      movea.l (sp),a0
    84cc:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    84d0:	|      movea.l (sp),a0
    84d2:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    84d6:	|      movea.l (sp),a0
    84d8:	|      move.l 12(sp),60(a0)
    }
}
    84de:	\----> nop
    84e0:	       addq.l #4,sp
    84e2:	       rts

000084e4 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    84e4:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    84e6:	       move.l 8(sp),-(sp)
    84ea:	       jsr 959a <findPerson>
    84f0:	       addq.l #4,sp
    84f2:	       move.l d0,(sp)
    if (moveMe) {
    84f4:	/----- beq.s 8536 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    84f6:	|      movea.l (sp),a0
    84f8:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    84fc:	|      movea.l (sp),a0
    84fe:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    8504:	|      move.l (sp),-(sp)
    8506:	|      jsr 9e60 <rethinkAngle>
    850c:	|      addq.l #4,sp
        if (moveMe->walking) {
    850e:	|      movea.l (sp),a0
    8510:	|      move.w 52(a0),d0
    8514:	|  /-- beq.s 8528 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    8516:	|  |   pea 1 <_start+0x1>
    851a:	|  |   move.l 4(sp),-(sp)
    851e:	|  |   jsr 703a <setFrames>
    8524:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    8526:	+--|-- bra.s 8536 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    8528:	|  \-> clr.l -(sp)
    852a:	|      move.l 4(sp),-(sp)
    852e:	|      jsr 703a <setFrames>
    8534:	|      addq.l #8,sp
}
    8536:	\----> nop
    8538:	       addq.l #4,sp
    853a:	       rts

0000853c <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    853c:	             lea -36(sp),sp
    8540:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    8542:	             movea.l 44(sp),a0
    8546:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    854c:	             moveq #12,d0
    854e:	             move.l d0,28(sp)
    8552:	             clr.l 24(sp)
    8556:	             move.l 1af02 <SysBase>,d0
    855c:	             movea.l d0,a6
    855e:	             move.l 28(sp),d0
    8562:	             move.l 24(sp),d1
    8566:	             jsr -684(a6)
    856a:	             move.l d0,20(sp)
    856e:	             move.l 20(sp),d0
    8572:	             move.l d0,16(sp)
	if (!(newAnim)) {
    8576:	         /-- bne.s 858c <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    8578:	         |   pea 1773a <PutChar+0x146c>
    857e:	         |   jsr 157fa <KPrintF>
    8584:	         |   addq.l #4,sp
		return NULL;
    8586:	         |   moveq #0,d0
    8588:	/--------|-- bra.w 86de <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    858c:	|        \-> movea.l 44(sp),a0
    8590:	|            move.l (a0),d0
    8592:	|            movea.l 16(sp),a0
    8596:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    8598:	|            movea.l 16(sp),a0
    859c:	|            movea.l (a0),a0
    859e:	|            move.l 4(a0),d0
    85a2:	|            addq.l #1,d0
    85a4:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    85a8:	|            movea.l 16(sp),a0
    85ac:	|            move.l 32(sp),8(a0)

	if (num) {
    85b2:	|  /-------- beq.w 86d2 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    85b6:	|  |         move.l 32(sp),d1
    85ba:	|  |         move.l d1,d0
    85bc:	|  |         add.l d0,d0
    85be:	|  |         add.l d1,d0
    85c0:	|  |         add.l d0,d0
    85c2:	|  |         add.l d0,d0
    85c4:	|  |         move.l d0,12(sp)
    85c8:	|  |         clr.l 8(sp)
    85cc:	|  |         move.l 1af02 <SysBase>,d0
    85d2:	|  |         movea.l d0,a6
    85d4:	|  |         move.l 12(sp),d0
    85d8:	|  |         move.l 8(sp),d1
    85dc:	|  |         jsr -684(a6)
    85e0:	|  |         move.l d0,4(sp)
    85e4:	|  |         move.l 4(sp),d0
    85e8:	|  |         movea.l 16(sp),a0
    85ec:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    85f0:	|  |         movea.l 16(sp),a0
    85f4:	|  |         move.l 4(a0),d0
    85f8:	|  |     /-- bne.s 860e <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    85fa:	|  |     |   pea 1773a <PutChar+0x146c>
    8600:	|  |     |   jsr 157fa <KPrintF>
    8606:	|  |     |   addq.l #4,sp
			return NULL;
    8608:	|  |     |   moveq #0,d0
    860a:	+--|-----|-- bra.w 86de <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    860e:	|  |     \-> clr.l 36(sp)
    8612:	|  |     /-- bra.w 86c4 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    8616:	|  |  /--|-> movea.l 44(sp),a0
    861a:	|  |  |  |   movea.l 4(a0),a0
    861e:	|  |  |  |   move.l 36(sp),d1
    8622:	|  |  |  |   move.l d1,d0
    8624:	|  |  |  |   add.l d0,d0
    8626:	|  |  |  |   add.l d1,d0
    8628:	|  |  |  |   add.l d0,d0
    862a:	|  |  |  |   add.l d0,d0
    862c:	|  |  |  |   lea (0,a0,d0.l),a1
    8630:	|  |  |  |   movea.l 16(sp),a0
    8634:	|  |  |  |   movea.l 4(a0),a0
    8638:	|  |  |  |   move.l 36(sp),d1
    863c:	|  |  |  |   move.l d1,d0
    863e:	|  |  |  |   add.l d0,d0
    8640:	|  |  |  |   add.l d1,d0
    8642:	|  |  |  |   add.l d0,d0
    8644:	|  |  |  |   add.l d0,d0
    8646:	|  |  |  |   adda.l d0,a0
    8648:	|  |  |  |   move.l (a1),d0
    864a:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    864c:	|  |  |  |   movea.l 44(sp),a0
    8650:	|  |  |  |   movea.l 4(a0),a0
    8654:	|  |  |  |   move.l 36(sp),d1
    8658:	|  |  |  |   move.l d1,d0
    865a:	|  |  |  |   add.l d0,d0
    865c:	|  |  |  |   add.l d1,d0
    865e:	|  |  |  |   add.l d0,d0
    8660:	|  |  |  |   add.l d0,d0
    8662:	|  |  |  |   lea (0,a0,d0.l),a1
    8666:	|  |  |  |   movea.l 16(sp),a0
    866a:	|  |  |  |   movea.l 4(a0),a0
    866e:	|  |  |  |   move.l 36(sp),d1
    8672:	|  |  |  |   move.l d1,d0
    8674:	|  |  |  |   add.l d0,d0
    8676:	|  |  |  |   add.l d1,d0
    8678:	|  |  |  |   add.l d0,d0
    867a:	|  |  |  |   add.l d0,d0
    867c:	|  |  |  |   adda.l d0,a0
    867e:	|  |  |  |   move.l 4(a1),d0
    8682:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    8686:	|  |  |  |   movea.l 44(sp),a0
    868a:	|  |  |  |   movea.l 4(a0),a0
    868e:	|  |  |  |   move.l 36(sp),d1
    8692:	|  |  |  |   move.l d1,d0
    8694:	|  |  |  |   add.l d0,d0
    8696:	|  |  |  |   add.l d1,d0
    8698:	|  |  |  |   add.l d0,d0
    869a:	|  |  |  |   add.l d0,d0
    869c:	|  |  |  |   lea (0,a0,d0.l),a1
    86a0:	|  |  |  |   movea.l 16(sp),a0
    86a4:	|  |  |  |   movea.l 4(a0),a0
    86a8:	|  |  |  |   move.l 36(sp),d1
    86ac:	|  |  |  |   move.l d1,d0
    86ae:	|  |  |  |   add.l d0,d0
    86b0:	|  |  |  |   add.l d1,d0
    86b2:	|  |  |  |   add.l d0,d0
    86b4:	|  |  |  |   add.l d0,d0
    86b6:	|  |  |  |   adda.l d0,a0
    86b8:	|  |  |  |   move.l 8(a1),d0
    86bc:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    86c0:	|  |  |  |   addq.l #1,36(sp)
    86c4:	|  |  |  \-> move.l 36(sp),d0
    86c8:	|  |  |      cmp.l 32(sp),d0
    86cc:	|  |  \----- blt.w 8616 <copyAnim+0xda>
    86d0:	|  |     /-- bra.s 86da <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    86d2:	|  \-----|-> movea.l 16(sp),a0
    86d6:	|        |   clr.l 4(a0)
	}

	return newAnim;
    86da:	|        \-> move.l 16(sp),d0
}
    86de:	\----------> movea.l (sp)+,a6
    86e0:	             lea 36(sp),sp
    86e4:	             rts

000086e6 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    86e6:	                lea -44(sp),sp
    86ea:	                move.l a6,-(sp)
    86ec:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    86ee:	                moveq #12,d0
    86f0:	                move.l d0,40(sp)
    86f4:	                clr.l 36(sp)
    86f8:	                move.l 1af02 <SysBase>,d0
    86fe:	                movea.l d0,a6
    8700:	                move.l 40(sp),d0
    8704:	                move.l 36(sp),d1
    8708:	                jsr -684(a6)
    870c:	                move.l d0,32(sp)
    8710:	                move.l 32(sp),d0
    8714:	                move.l d0,28(sp)
	if( !newP) {
    8718:	            /-- bne.s 872e <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    871a:	            |   pea 1775b <PutChar+0x148d>
    8720:	            |   jsr 157fa <KPrintF>
    8726:	            |   addq.l #4,sp
		return NULL;
    8728:	            |   moveq #0,d0
    872a:	/-----------|-- bra.w 88fe <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    872e:	|           \-> movea.l 28(sp),a0
    8732:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    8738:	|               move.l 56(sp),d1
    873c:	|               move.l d1,d0
    873e:	|               add.l d0,d0
    8740:	|               add.l d1,d0
    8742:	|               add.l d0,d0
    8744:	|               add.l d0,d0
    8746:	|               move.l d0,24(sp)
    874a:	|               clr.l 20(sp)
    874e:	|               move.l 1af02 <SysBase>,d0
    8754:	|               movea.l d0,a6
    8756:	|               move.l 24(sp),d0
    875a:	|               move.l 20(sp),d1
    875e:	|               jsr -684(a6)
    8762:	|               move.l d0,16(sp)
    8766:	|               move.l 16(sp),d0
    876a:	|               movea.l 28(sp),a0
    876e:	|               move.l d0,4(a0)
	if( !newP->frames) {
    8772:	|               movea.l 28(sp),a0
    8776:	|               move.l 4(a0),d0
    877a:	|           /-- bne.s 8790 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    877c:	|           |   pea 1775b <PutChar+0x148d>
    8782:	|           |   jsr 157fa <KPrintF>
    8788:	|           |   addq.l #4,sp
		return NULL;
    878a:	|           |   moveq #0,d0
    878c:	+-----------|-- bra.w 88fe <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    8790:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    8796:	|               movea.l 60(sp),a0
    879a:	|               move.l (a0),44(sp)
	while (a) {
    879e:	|     /-------- bra.w 88f2 <createPersonaAnim+0x20c>
		a --;
    87a2:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    87a6:	|  |  |         movea.l 28(sp),a0
    87aa:	|  |  |         movea.l 4(a0),a0
    87ae:	|  |  |         move.l 48(sp),d1
    87b2:	|  |  |         move.l d1,d0
    87b4:	|  |  |         add.l d0,d0
    87b6:	|  |  |         add.l d1,d0
    87b8:	|  |  |         add.l d0,d0
    87ba:	|  |  |         add.l d0,d0
    87bc:	|  |  |         adda.l d0,a0
    87be:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    87c2:	|  |  |         movea.l 44(sp),a0
    87c6:	|  |  |         move.l (a0),d0
    87c8:	|  |  |         moveq #5,d1
    87ca:	|  |  |         cmp.l d0,d1
    87cc:	|  |  |     /-- bne.s 87f8 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    87ce:	|  |  |     |   movea.l 28(sp),a0
    87d2:	|  |  |     |   movea.l 4(a0),a0
    87d6:	|  |  |     |   move.l 48(sp),d1
    87da:	|  |  |     |   move.l d1,d0
    87dc:	|  |  |     |   add.l d0,d0
    87de:	|  |  |     |   add.l d1,d0
    87e0:	|  |  |     |   add.l d0,d0
    87e2:	|  |  |     |   add.l d0,d0
    87e4:	|  |  |     |   lea (0,a0,d0.l),a1
    87e8:	|  |  |     |   movea.l 44(sp),a0
    87ec:	|  |  |     |   move.l 4(a0),d0
    87f0:	|  |  |     |   move.l d0,8(a1)
    87f4:	|  |  |  /--|-- bra.w 88a0 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    87f8:	|  |  |  |  \-> movea.l 44(sp),a0
    87fc:	|  |  |  |      move.l (a0),d0
    87fe:	|  |  |  |      moveq #2,d1
    8800:	|  |  |  |      cmp.l d0,d1
    8802:	|  |  |  |  /-- bne.s 882e <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    8804:	|  |  |  |  |   movea.l 44(sp),a0
    8808:	|  |  |  |  |   move.l 4(a0),d2
    880c:	|  |  |  |  |   movea.l 28(sp),a0
    8810:	|  |  |  |  |   movea.l 4(a0),a0
    8814:	|  |  |  |  |   move.l 48(sp),d1
    8818:	|  |  |  |  |   move.l d1,d0
    881a:	|  |  |  |  |   add.l d0,d0
    881c:	|  |  |  |  |   add.l d1,d0
    881e:	|  |  |  |  |   add.l d0,d0
    8820:	|  |  |  |  |   add.l d0,d0
    8822:	|  |  |  |  |   adda.l d0,a0
    8824:	|  |  |  |  |   move.l d2,d0
    8826:	|  |  |  |  |   neg.l d0
    8828:	|  |  |  |  |   move.l d0,8(a0)
    882c:	|  |  |  +--|-- bra.s 88a0 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    882e:	|  |  |  |  \-> movea.l 44(sp),a0
    8832:	|  |  |  |      move.l (a0),d0
    8834:	|  |  |  |      moveq #6,d1
    8836:	|  |  |  |      cmp.l d0,d1
    8838:	|  |  |  |  /-- bne.s 8880 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    883a:	|  |  |  |  |   movea.l 44(sp),a0
    883e:	|  |  |  |  |   movea.l 4(a0),a0
    8842:	|  |  |  |  |   move.l (a0),d0
    8844:	|  |  |  |  |   move.l d0,-(sp)
    8846:	|  |  |  |  |   pea 1 <_start+0x1>
    884a:	|  |  |  |  |   lea 20(sp),a0
    884e:	|  |  |  |  |   move.l a0,-(sp)
    8850:	|  |  |  |  |   jsr 1362e <getValueType>
    8856:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    885a:	|  |  |  |  |   movea.l 44(sp),a0
    885e:	|  |  |  |  |   movea.l 4(a0),a0
    8862:	|  |  |  |  |   movea.l (a0),a0
    8864:	|  |  |  |  |   move.l 8(a0),d0
    8868:	|  |  |  |  |   move.l d0,-(sp)
    886a:	|  |  |  |  |   pea 1 <_start+0x1>
    886e:	|  |  |  |  |   lea 16(sp),a0
    8872:	|  |  |  |  |   move.l a0,-(sp)
    8874:	|  |  |  |  |   jsr 1362e <getValueType>
    887a:	|  |  |  |  |   lea 12(sp),sp
    887e:	|  |  |  +--|-- bra.s 88a0 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    8880:	|  |  |  |  \-> move.l 44(sp),d0
    8884:	|  |  |  |      move.l d0,-(sp)
    8886:	|  |  |  |      pea 1 <_start+0x1>
    888a:	|  |  |  |      lea 20(sp),a0
    888e:	|  |  |  |      move.l a0,-(sp)
    8890:	|  |  |  |      jsr 1362e <getValueType>
    8896:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    889a:	|  |  |  |      moveq #1,d0
    889c:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    88a0:	|  |  |  \----> move.l 60(sp),-(sp)
    88a4:	|  |  |         jsr 13fb2 <trimStack>
    88aa:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    88ac:	|  |  |         movea.l 28(sp),a0
    88b0:	|  |  |         movea.l 4(a0),a0
    88b4:	|  |  |         move.l 48(sp),d1
    88b8:	|  |  |         move.l d1,d0
    88ba:	|  |  |         add.l d0,d0
    88bc:	|  |  |         add.l d1,d0
    88be:	|  |  |         add.l d0,d0
    88c0:	|  |  |         add.l d0,d0
    88c2:	|  |  |         adda.l d0,a0
    88c4:	|  |  |         move.l 12(sp),d0
    88c8:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    88ca:	|  |  |         movea.l 28(sp),a0
    88ce:	|  |  |         movea.l 4(a0),a0
    88d2:	|  |  |         move.l 48(sp),d1
    88d6:	|  |  |         move.l d1,d0
    88d8:	|  |  |         add.l d0,d0
    88da:	|  |  |         add.l d1,d0
    88dc:	|  |  |         add.l d0,d0
    88de:	|  |  |         add.l d0,d0
    88e0:	|  |  |         adda.l d0,a0
    88e2:	|  |  |         move.l 8(sp),d0
    88e6:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    88ea:	|  |  |         movea.l 60(sp),a0
    88ee:	|  |  |         move.l (a0),44(sp)
	while (a) {
    88f2:	|  |  \-------> tst.l 48(sp)
    88f6:	|  \----------- bne.w 87a2 <createPersonaAnim+0xbc>
	}

	return newP;
    88fa:	|               move.l 28(sp),d0
}
    88fe:	\-------------> move.l (sp)+,d2
    8900:	                movea.l (sp)+,a6
    8902:	                lea 44(sp),sp
    8906:	                rts

00008908 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    8908:	       lea -12(sp),sp
    890c:	       move.l a6,-(sp)

	if(orig->theSprites)
    890e:	       movea.l 20(sp),a0
    8912:	       move.l (a0),d0
    8914:	   /-- beq.s 893e <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    8916:	   |   movea.l 20(sp),a0
    891a:	   |   movea.l (a0),a0
    891c:	   |   move.l 4(a0),d0
    8920:	   |   subq.l #1,d0
    8922:	   |   move.l d0,4(a0)
    8926:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    892c:	   +-- bne.s 893e <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    892e:	   |   movea.l 20(sp),a0
    8932:	   |   move.l (a0),d0
    8934:	   |   move.l d0,-(sp)
    8936:	   |   jsr 7b40 <forgetSpriteBank>
    893c:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    893e:	   \-> tst.l 20(sp)
    8942:	/----- beq.s 8982 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    8944:	|      movea.l 20(sp),a0
    8948:	|      move.l 8(a0),d0
    894c:	|  /-- beq.s 8968 <deleteAnim+0x60>
			FreeVec( orig->frames);
    894e:	|  |   movea.l 20(sp),a0
    8952:	|  |   move.l 4(a0),8(sp)
    8958:	|  |   move.l 1af02 <SysBase>,d0
    895e:	|  |   movea.l d0,a6
    8960:	|  |   movea.l 8(sp),a1
    8964:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    8968:	|  \-> move.l 20(sp),4(sp)
    896e:	|      move.l 1af02 <SysBase>,d0
    8974:	|      movea.l d0,a6
    8976:	|      movea.l 4(sp),a1
    897a:	|      jsr -690(a6)
		orig = NULL;
    897e:	|      clr.l 20(sp)
	}	
	
}
    8982:	\----> nop
    8984:	       movea.l (sp)+,a6
    8986:	       lea 12(sp),sp
    898a:	       rts

0000898c <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    898c:	          lea -124(sp),sp
    8990:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    8994:	          movea.l 152(sp),a0
    8998:	          move.l 44(a0),d1
    899c:	          movea.l 152(sp),a0
    89a0:	          move.l 48(a0),d0
    89a4:	          cmp.l d1,d0
    89a6:	      /-- bne.s 89d6 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    89a8:	      |   movea.l 152(sp),a0
    89ac:	      |   moveq #-1,d0
    89ae:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    89b2:	      |   movea.l 152(sp),a0
    89b6:	      |   move.l 28(a0),d0
    89ba:	      |   movea.l 152(sp),a0
    89be:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    89c2:	      |   movea.l 152(sp),a0
    89c6:	      |   move.l 32(a0),d0
    89ca:	      |   movea.l 152(sp),a0
    89ce:	      |   move.l d0,40(a0)
    89d2:	   /--|-- bra.w 8f3c <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    89d6:	   |  \-> movea.l 1b06a <currentFloor>,a0
    89dc:	   |      move.l 16(a0),d1
    89e0:	   |      movea.l 152(sp),a0
    89e4:	   |      move.l 44(a0),d0
    89e8:	   |      add.l d0,d0
    89ea:	   |      add.l d0,d0
    89ec:	   |      movea.l d1,a0
    89ee:	   |      adda.l d0,a0
    89f0:	   |      move.l (a0),d1
    89f2:	   |      movea.l 152(sp),a0
    89f6:	   |      move.l 48(a0),d0
    89fa:	   |      add.l d0,d0
    89fc:	   |      add.l d0,d0
    89fe:	   |      movea.l d1,a0
    8a00:	   |      adda.l d0,a0
    8a02:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    8a06:	   |      moveq #-1,d0
    8a08:	   |      cmp.l 144(sp),d0
    8a0c:	   |  /-- bne.s 8a14 <doBorderStuff+0x88>
    8a0e:	   |  |   clr.w d0
    8a10:	/--|--|-- bra.w 903c <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    8a14:	|  |  \-> movea.l 1b06a <currentFloor>,a0
    8a1a:	|  |      move.l 12(a0),d1
    8a1e:	|  |      move.l 144(sp),d0
    8a22:	|  |      lsl.l #3,d0
    8a24:	|  |      add.l d0,d1
    8a26:	|  |      movea.l 1b06a <currentFloor>,a0
    8a2c:	|  |      movea.l 12(a0),a1
    8a30:	|  |      movea.l 152(sp),a0
    8a34:	|  |      move.l 44(a0),d0
    8a38:	|  |      lsl.l #3,d0
    8a3a:	|  |      add.l a1,d0
    8a3c:	|  |      lea 40(sp),a0
    8a40:	|  |      move.l a0,-(sp)
    8a42:	|  |      lea 48(sp),a0
    8a46:	|  |      move.l a0,-(sp)
    8a48:	|  |      move.l d1,-(sp)
    8a4a:	|  |      move.l d0,-(sp)
    8a4c:	|  |      jsr 14a7c <getMatchingCorners>
    8a52:	|  |      lea 16(sp),sp
    8a56:	|  |      tst.w d0
    8a58:	|  |  /-- bne.s 8a6e <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    8a5a:	|  |  |   pea 17785 <PutChar+0x14b7>
    8a60:	|  |  |   jsr 157fa <KPrintF>
    8a66:	|  |  |   addq.l #4,sp
            return FALSE;
    8a68:	|  |  |   clr.w d0
    8a6a:	+--|--|-- bra.w 903c <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    8a6e:	|  |  \-> movea.l 152(sp),a0
    8a72:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    8a78:	|  |      movea.l 152(sp),a0
    8a7c:	|  |      move.l (a0),d0
    8a7e:	|  |      move.l d0,-(sp)
    8a80:	|  |      jsr 15bce <__fixsfsi>
    8a86:	|  |      addq.l #4,sp
    8a88:	|  |      move.l d0,140(sp)
    8a8c:	|  |      movea.l 152(sp),a0
    8a90:	|  |      move.l 4(a0),d0
    8a94:	|  |      move.l d0,-(sp)
    8a96:	|  |      jsr 15bce <__fixsfsi>
    8a9c:	|  |      addq.l #4,sp
    8a9e:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    8aa2:	|  |      movea.l 152(sp),a0
    8aa6:	|  |      move.l 28(a0),132(sp)
    8aac:	|  |      movea.l 152(sp),a0
    8ab0:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    8ab6:	|  |      movea.l 1b06a <currentFloor>,a0
    8abc:	|  |      move.l 4(a0),d1
    8ac0:	|  |      move.l 44(sp),d0
    8ac4:	|  |      lsl.l #3,d0
    8ac6:	|  |      movea.l d1,a0
    8ac8:	|  |      adda.l d0,a0
    8aca:	|  |      move.l (a0),124(sp)
    8ace:	|  |      movea.l 1b06a <currentFloor>,a0
    8ad4:	|  |      move.l 4(a0),d1
    8ad8:	|  |      move.l 44(sp),d0
    8adc:	|  |      lsl.l #3,d0
    8ade:	|  |      movea.l d1,a0
    8ae0:	|  |      adda.l d0,a0
    8ae2:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    8ae8:	|  |      movea.l 1b06a <currentFloor>,a0
    8aee:	|  |      move.l 4(a0),d1
    8af2:	|  |      move.l 40(sp),d0
    8af6:	|  |      lsl.l #3,d0
    8af8:	|  |      movea.l d1,a0
    8afa:	|  |      adda.l d0,a0
    8afc:	|  |      move.l (a0),116(sp)
    8b00:	|  |      movea.l 1b06a <currentFloor>,a0
    8b06:	|  |      move.l 4(a0),d1
    8b0a:	|  |      move.l 40(sp),d0
    8b0e:	|  |      lsl.l #3,d0
    8b10:	|  |      movea.l d1,a0
    8b12:	|  |      adda.l d0,a0
    8b14:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    8b1a:	|  |      move.l 140(sp),d0
    8b1e:	|  |      sub.l 132(sp),d0
    8b22:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    8b26:	|  |      move.l 136(sp),d0
    8b2a:	|  |      sub.l 128(sp),d0
    8b2e:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    8b32:	|  |      move.l 116(sp),d0
    8b36:	|  |      sub.l 124(sp),d0
    8b3a:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    8b3e:	|  |      move.l 112(sp),d0
    8b42:	|  |      sub.l 120(sp),d0
    8b46:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    8b4a:	|  |      move.l 124(sp),d0
    8b4e:	|  |      sub.l 140(sp),d0
    8b52:	|  |      move.l 104(sp),-(sp)
    8b56:	|  |      move.l d0,-(sp)
    8b58:	|  |      jsr 161b8 <__mulsi3>
    8b5e:	|  |      addq.l #8,sp
    8b60:	|  |      move.l d0,d2
    8b62:	|  |      move.l 120(sp),d0
    8b66:	|  |      sub.l 136(sp),d0
    8b6a:	|  |      move.l 108(sp),-(sp)
    8b6e:	|  |      move.l d0,-(sp)
    8b70:	|  |      jsr 161b8 <__mulsi3>
    8b76:	|  |      addq.l #8,sp
    8b78:	|  |      move.l d2,d1
    8b7a:	|  |      sub.l d0,d1
    8b7c:	|  |      move.l d1,-(sp)
    8b7e:	|  |      jsr 15bf6 <__floatsidf>
    8b84:	|  |      addq.l #4,sp
    8b86:	|  |      move.l d0,32(sp)
    8b8a:	|  |      move.l d1,36(sp)
    8b8e:	|  |      move.l 32(sp),88(sp)
    8b94:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    8b9a:	|  |      move.l 96(sp),-(sp)
    8b9e:	|  |      move.l 112(sp),-(sp)
    8ba2:	|  |      jsr 161b8 <__mulsi3>
    8ba8:	|  |      addq.l #8,sp
    8baa:	|  |      move.l d0,d2
    8bac:	|  |      move.l 100(sp),-(sp)
    8bb0:	|  |      move.l 108(sp),-(sp)
    8bb4:	|  |      jsr 161b8 <__mulsi3>
    8bba:	|  |      addq.l #8,sp
    8bbc:	|  |      move.l d2,d1
    8bbe:	|  |      sub.l d0,d1
    8bc0:	|  |      move.l d1,-(sp)
    8bc2:	|  |      jsr 15bf6 <__floatsidf>
    8bc8:	|  |      addq.l #4,sp
    8bca:	|  |      move.l d1,-(sp)
    8bcc:	|  |      move.l d0,-(sp)
    8bce:	|  |      move.l 100(sp),-(sp)
    8bd2:	|  |      move.l 100(sp),-(sp)
    8bd6:	|  |      jsr 15a80 <__divdf3>
    8bdc:	|  |      lea 16(sp),sp
    8be0:	|  |      move.l d0,24(sp)
    8be4:	|  |      move.l d1,28(sp)
    8be8:	|  |      move.l 24(sp),88(sp)
    8bee:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    8bf4:	|  |      clr.l -(sp)
    8bf6:	|  |      clr.l -(sp)
    8bf8:	|  |      move.l 100(sp),-(sp)
    8bfc:	|  |      move.l 100(sp),-(sp)
    8c00:	|  |      jsr 15d54 <__gtdf2>
    8c06:	|  |      lea 16(sp),sp
    8c0a:	|  |      tst.l d0
    8c0c:	|  |  /-- ble.w 8ce4 <doBorderStuff+0x358>
    8c10:	|  |  |   clr.l -(sp)
    8c12:	|  |  |   move.l #1072693248,-(sp)
    8c18:	|  |  |   move.l 100(sp),-(sp)
    8c1c:	|  |  |   move.l 100(sp),-(sp)
    8c20:	|  |  |   jsr 15e0e <__ltdf2>
    8c26:	|  |  |   lea 16(sp),sp
    8c2a:	|  |  |   tst.l d0
    8c2c:	|  |  +-- bge.w 8ce4 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    8c30:	|  |  |   move.l 124(sp),-(sp)
    8c34:	|  |  |   jsr 15bf6 <__floatsidf>
    8c3a:	|  |  |   addq.l #4,sp
    8c3c:	|  |  |   move.l d0,d2
    8c3e:	|  |  |   move.l d1,d3
    8c40:	|  |  |   move.l 100(sp),-(sp)
    8c44:	|  |  |   jsr 15bf6 <__floatsidf>
    8c4a:	|  |  |   addq.l #4,sp
    8c4c:	|  |  |   move.l 92(sp),-(sp)
    8c50:	|  |  |   move.l 92(sp),-(sp)
    8c54:	|  |  |   move.l d1,-(sp)
    8c56:	|  |  |   move.l d0,-(sp)
    8c58:	|  |  |   jsr 15c86 <__muldf3>
    8c5e:	|  |  |   lea 16(sp),sp
    8c62:	|  |  |   move.l d1,-(sp)
    8c64:	|  |  |   move.l d0,-(sp)
    8c66:	|  |  |   move.l d3,-(sp)
    8c68:	|  |  |   move.l d2,-(sp)
    8c6a:	|  |  |   jsr 15a1e <__adddf3>
    8c70:	|  |  |   lea 16(sp),sp
    8c74:	|  |  |   move.l d1,-(sp)
    8c76:	|  |  |   move.l d0,-(sp)
    8c78:	|  |  |   jsr 15b8e <__fixdfsi>
    8c7e:	|  |  |   addq.l #8,sp
    8c80:	|  |  |   movea.l 152(sp),a0
    8c84:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    8c88:	|  |  |   move.l 120(sp),-(sp)
    8c8c:	|  |  |   jsr 15bf6 <__floatsidf>
    8c92:	|  |  |   addq.l #4,sp
    8c94:	|  |  |   move.l d0,d2
    8c96:	|  |  |   move.l d1,d3
    8c98:	|  |  |   move.l 96(sp),-(sp)
    8c9c:	|  |  |   jsr 15bf6 <__floatsidf>
    8ca2:	|  |  |   addq.l #4,sp
    8ca4:	|  |  |   move.l 92(sp),-(sp)
    8ca8:	|  |  |   move.l 92(sp),-(sp)
    8cac:	|  |  |   move.l d1,-(sp)
    8cae:	|  |  |   move.l d0,-(sp)
    8cb0:	|  |  |   jsr 15c86 <__muldf3>
    8cb6:	|  |  |   lea 16(sp),sp
    8cba:	|  |  |   move.l d1,-(sp)
    8cbc:	|  |  |   move.l d0,-(sp)
    8cbe:	|  |  |   move.l d3,-(sp)
    8cc0:	|  |  |   move.l d2,-(sp)
    8cc2:	|  |  |   jsr 15a1e <__adddf3>
    8cc8:	|  |  |   lea 16(sp),sp
    8ccc:	|  |  |   move.l d1,-(sp)
    8cce:	|  |  |   move.l d0,-(sp)
    8cd0:	|  |  |   jsr 15b8e <__fixdfsi>
    8cd6:	|  |  |   addq.l #8,sp
    8cd8:	|  |  |   movea.l 152(sp),a0
    8cdc:	|  |  |   move.l d0,40(a0)
    8ce0:	|  +--|-- bra.w 8f3c <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    8ce4:	|  |  \-> move.l 140(sp),d0
    8ce8:	|  |      sub.l 124(sp),d0
    8cec:	|  |      move.l d0,84(sp)
    8cf0:	|  |      move.l 140(sp),d0
    8cf4:	|  |      sub.l 116(sp),d0
    8cf8:	|  |      move.l d0,80(sp)
    8cfc:	|  |      move.l 132(sp),d0
    8d00:	|  |      sub.l 124(sp),d0
    8d04:	|  |      move.l d0,76(sp)
    8d08:	|  |      move.l 132(sp),d0
    8d0c:	|  |      sub.l 116(sp),d0
    8d10:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    8d14:	|  |      move.l 136(sp),d0
    8d18:	|  |      sub.l 120(sp),d0
    8d1c:	|  |      move.l d0,68(sp)
    8d20:	|  |      move.l 136(sp),d0
    8d24:	|  |      sub.l 112(sp),d0
    8d28:	|  |      move.l d0,64(sp)
    8d2c:	|  |      move.l 128(sp),d0
    8d30:	|  |      sub.l 120(sp),d0
    8d34:	|  |      move.l d0,60(sp)
    8d38:	|  |      move.l 128(sp),d0
    8d3c:	|  |      sub.l 112(sp),d0
    8d40:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    8d44:	|  |      move.l 84(sp),-(sp)
    8d48:	|  |      move.l 88(sp),-(sp)
    8d4c:	|  |      jsr 161b8 <__mulsi3>
    8d52:	|  |      addq.l #8,sp
    8d54:	|  |      move.l d0,84(sp)
    8d58:	|  |      move.l 80(sp),-(sp)
    8d5c:	|  |      move.l 84(sp),-(sp)
    8d60:	|  |      jsr 161b8 <__mulsi3>
    8d66:	|  |      addq.l #8,sp
    8d68:	|  |      move.l d0,80(sp)
    8d6c:	|  |      move.l 76(sp),-(sp)
    8d70:	|  |      move.l 80(sp),-(sp)
    8d74:	|  |      jsr 161b8 <__mulsi3>
    8d7a:	|  |      addq.l #8,sp
    8d7c:	|  |      move.l d0,76(sp)
    8d80:	|  |      move.l 72(sp),-(sp)
    8d84:	|  |      move.l 76(sp),-(sp)
    8d88:	|  |      jsr 161b8 <__mulsi3>
    8d8e:	|  |      addq.l #8,sp
    8d90:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    8d94:	|  |      move.l 68(sp),-(sp)
    8d98:	|  |      move.l 72(sp),-(sp)
    8d9c:	|  |      jsr 161b8 <__mulsi3>
    8da2:	|  |      addq.l #8,sp
    8da4:	|  |      move.l d0,68(sp)
    8da8:	|  |      move.l 64(sp),-(sp)
    8dac:	|  |      move.l 68(sp),-(sp)
    8db0:	|  |      jsr 161b8 <__mulsi3>
    8db6:	|  |      addq.l #8,sp
    8db8:	|  |      move.l d0,64(sp)
    8dbc:	|  |      move.l 60(sp),-(sp)
    8dc0:	|  |      move.l 64(sp),-(sp)
    8dc4:	|  |      jsr 161b8 <__mulsi3>
    8dca:	|  |      addq.l #8,sp
    8dcc:	|  |      move.l d0,60(sp)
    8dd0:	|  |      move.l 56(sp),-(sp)
    8dd4:	|  |      move.l 60(sp),-(sp)
    8dd8:	|  |      jsr 161b8 <__mulsi3>
    8dde:	|  |      addq.l #8,sp
    8de0:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    8de4:	|  |      move.l 84(sp),-(sp)
    8de8:	|  |      jsr 15bf6 <__floatsidf>
    8dee:	|  |      addq.l #4,sp
    8df0:	|  |      move.l d0,d2
    8df2:	|  |      move.l d1,d3
    8df4:	|  |      move.l 68(sp),-(sp)
    8df8:	|  |      jsr 15bf6 <__floatsidf>
    8dfe:	|  |      addq.l #4,sp
    8e00:	|  |      move.l d1,-(sp)
    8e02:	|  |      move.l d0,-(sp)
    8e04:	|  |      move.l d3,-(sp)
    8e06:	|  |      move.l d2,-(sp)
    8e08:	|  |      jsr 15a1e <__adddf3>
    8e0e:	|  |      lea 16(sp),sp
    8e12:	|  |      move.l d1,-(sp)
    8e14:	|  |      move.l d0,-(sp)
    8e16:	|  |      jsr 1616e <sqrt>
    8e1c:	|  |      addq.l #8,sp
    8e1e:	|  |      move.l d0,d2
    8e20:	|  |      move.l d1,d3
    8e22:	|  |      move.l 76(sp),-(sp)
    8e26:	|  |      jsr 15bf6 <__floatsidf>
    8e2c:	|  |      addq.l #4,sp
    8e2e:	|  |      move.l d0,d4
    8e30:	|  |      move.l d1,d5
    8e32:	|  |      move.l 60(sp),-(sp)
    8e36:	|  |      jsr 15bf6 <__floatsidf>
    8e3c:	|  |      addq.l #4,sp
    8e3e:	|  |      move.l d1,-(sp)
    8e40:	|  |      move.l d0,-(sp)
    8e42:	|  |      move.l d5,-(sp)
    8e44:	|  |      move.l d4,-(sp)
    8e46:	|  |      jsr 15a1e <__adddf3>
    8e4c:	|  |      lea 16(sp),sp
    8e50:	|  |      move.l d1,-(sp)
    8e52:	|  |      move.l d0,-(sp)
    8e54:	|  |      jsr 1616e <sqrt>
    8e5a:	|  |      addq.l #8,sp
    8e5c:	|  |      move.l d1,-(sp)
    8e5e:	|  |      move.l d0,-(sp)
    8e60:	|  |      move.l d3,-(sp)
    8e62:	|  |      move.l d2,-(sp)
    8e64:	|  |      jsr 15a1e <__adddf3>
    8e6a:	|  |      lea 16(sp),sp
    8e6e:	|  |      move.l d0,d2
    8e70:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    8e72:	|  |      move.l 80(sp),-(sp)
    8e76:	|  |      jsr 15bf6 <__floatsidf>
    8e7c:	|  |      addq.l #4,sp
    8e7e:	|  |      move.l d0,d4
    8e80:	|  |      move.l d1,d5
    8e82:	|  |      move.l 64(sp),-(sp)
    8e86:	|  |      jsr 15bf6 <__floatsidf>
    8e8c:	|  |      addq.l #4,sp
    8e8e:	|  |      move.l d1,-(sp)
    8e90:	|  |      move.l d0,-(sp)
    8e92:	|  |      move.l d5,-(sp)
    8e94:	|  |      move.l d4,-(sp)
    8e96:	|  |      jsr 15a1e <__adddf3>
    8e9c:	|  |      lea 16(sp),sp
    8ea0:	|  |      move.l d1,-(sp)
    8ea2:	|  |      move.l d0,-(sp)
    8ea4:	|  |      jsr 1616e <sqrt>
    8eaa:	|  |      addq.l #8,sp
    8eac:	|  |      move.l d0,d4
    8eae:	|  |      move.l d1,d5
    8eb0:	|  |      move.l 72(sp),-(sp)
    8eb4:	|  |      jsr 15bf6 <__floatsidf>
    8eba:	|  |      addq.l #4,sp
    8ebc:	|  |      move.l d0,d6
    8ebe:	|  |      move.l d1,d7
    8ec0:	|  |      move.l 56(sp),-(sp)
    8ec4:	|  |      jsr 15bf6 <__floatsidf>
    8eca:	|  |      addq.l #4,sp
    8ecc:	|  |      move.l d1,-(sp)
    8ece:	|  |      move.l d0,-(sp)
    8ed0:	|  |      move.l d7,-(sp)
    8ed2:	|  |      move.l d6,-(sp)
    8ed4:	|  |      jsr 15a1e <__adddf3>
    8eda:	|  |      lea 16(sp),sp
    8ede:	|  |      move.l d1,-(sp)
    8ee0:	|  |      move.l d0,-(sp)
    8ee2:	|  |      jsr 1616e <sqrt>
    8ee8:	|  |      addq.l #8,sp
    8eea:	|  |      move.l d1,-(sp)
    8eec:	|  |      move.l d0,-(sp)
    8eee:	|  |      move.l d5,-(sp)
    8ef0:	|  |      move.l d4,-(sp)
    8ef2:	|  |      jsr 15a1e <__adddf3>
    8ef8:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    8efc:	|  |      move.l d1,-(sp)
    8efe:	|  |      move.l d0,-(sp)
    8f00:	|  |      move.l d3,-(sp)
    8f02:	|  |      move.l d2,-(sp)
    8f04:	|  |      jsr 15e0e <__ltdf2>
    8f0a:	|  |      lea 16(sp),sp
    8f0e:	|  |      tst.l d0
    8f10:	|  |  /-- bge.s 8f28 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    8f12:	|  |  |   movea.l 152(sp),a0
    8f16:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    8f1c:	|  |  |   movea.l 152(sp),a0
    8f20:	|  |  |   move.l 120(sp),40(a0)
    8f26:	|  +--|-- bra.s 8f3c <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    8f28:	|  |  \-> movea.l 152(sp),a0
    8f2c:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    8f32:	|  |      movea.l 152(sp),a0
    8f36:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    8f3c:	|  \----> movea.l 152(sp),a0
    8f40:	|         move.l 40(a0),d0
    8f44:	|         move.l d0,-(sp)
    8f46:	|         jsr 15c36 <__floatsisf>
    8f4c:	|         addq.l #4,sp
    8f4e:	|         move.l d0,d1
    8f50:	|         movea.l 152(sp),a0
    8f54:	|         move.l 4(a0),d0
    8f58:	|         move.l d0,-(sp)
    8f5a:	|         move.l d1,-(sp)
    8f5c:	|         jsr 15f2a <__subsf3>
    8f62:	|         addq.l #8,sp
    8f64:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    8f68:	|         movea.l 152(sp),a0
    8f6c:	|         move.l (a0),d2
    8f6e:	|         movea.l 152(sp),a0
    8f72:	|         move.l 36(a0),d0
    8f76:	|         move.l d0,-(sp)
    8f78:	|         jsr 15c36 <__floatsisf>
    8f7e:	|         addq.l #4,sp
    8f80:	|         move.l d0,-(sp)
    8f82:	|         move.l d2,-(sp)
    8f84:	|         jsr 15f2a <__subsf3>
    8f8a:	|         addq.l #8,sp
    8f8c:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    8f90:	|         clr.l -(sp)
    8f92:	|         move.l 52(sp),-(sp)
    8f96:	|         jsr 15e92 <__nesf2>
    8f9c:	|         addq.l #8,sp
    8f9e:	|         tst.l d0
    8fa0:	|     /-- bne.s 8fb4 <doBorderStuff+0x628>
    8fa2:	|     |   clr.l -(sp)
    8fa4:	|     |   move.l 56(sp),-(sp)
    8fa8:	|     |   jsr 15e92 <__nesf2>
    8fae:	|     |   addq.l #8,sp
    8fb0:	|     |   tst.l d0
    8fb2:	|  /--|-- beq.s 902a <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    8fb4:	|  |  \-> move.l 52(sp),d0
    8fb8:	|  |      move.l d0,-(sp)
    8fba:	|  |      move.l d0,-(sp)
    8fbc:	|  |      jsr 159e8 <__addsf3>
    8fc2:	|  |      addq.l #8,sp
    8fc4:	|  |      move.l d0,-(sp)
    8fc6:	|  |      move.l 52(sp),-(sp)
    8fca:	|  |      jsr 15fbe <atan2f>
    8fd0:	|  |      addq.l #8,sp
    8fd2:	|  |      move.l d0,-(sp)
    8fd4:	|  |      jsr 15b4e <__extendsfdf2>
    8fda:	|  |      addq.l #4,sp
    8fdc:	|  |      move.l #-1540411785,-(sp)
    8fe2:	|  |      move.l #1078765033,-(sp)
    8fe8:	|  |      move.l d1,-(sp)
    8fea:	|  |      move.l d0,-(sp)
    8fec:	|  |      jsr 15c86 <__muldf3>
    8ff2:	|  |      lea 16(sp),sp
    8ff6:	|  |      clr.l -(sp)
    8ff8:	|  |      move.l #1080459264,-(sp)
    8ffe:	|  |      move.l d1,-(sp)
    9000:	|  |      move.l d0,-(sp)
    9002:	|  |      jsr 15a1e <__adddf3>
    9008:	|  |      lea 16(sp),sp
    900c:	|  |      move.l d1,-(sp)
    900e:	|  |      move.l d0,-(sp)
    9010:	|  |      jsr 15b8e <__fixdfsi>
    9016:	|  |      addq.l #8,sp
    9018:	|  |      movea.l 152(sp),a0
    901c:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    9020:	|  |      movea.l 152(sp),a0
    9024:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    902a:	|  \----> pea 1 <_start+0x1>
    902e:	|         move.l 156(sp),-(sp)
    9032:	|         jsr 703a <setFrames>
    9038:	|         addq.l #8,sp
    return TRUE;
    903a:	|         moveq #1,d0
}
    903c:	\-------> movem.l (sp)+,d2-d7
    9040:	          lea 124(sp),sp
    9044:	          rts

00009046 <drawPeople>:

void drawPeople () {
    9046:	                lea -24(sp),sp
    904a:	                move.l d2,-(sp)
	shufflePeople ();
    904c:	                jsr aa42 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9052:	                move.l 1afba <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    905a:	                clr.l 20(sp)
	overRegion = NULL;
    905e:	                clr.l 1b062 <overRegion>

	while (thisPerson) {
    9064:	   /----------- bra.w 9586 <drawPeople+0x540>
		if (thisPerson -> show) {
    9068:	/--|----------> movea.l 24(sp),a0
    906c:	|  |            move.w 92(a0),d0
    9070:	|  |  /-------- beq.w 933a <drawPeople+0x2f4>
			myAnim = thisPerson -> myAnim;
    9074:	|  |  |         movea.l 24(sp),a0
    9078:	|  |  |         move.l 60(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    907e:	|  |  |         movea.l 24(sp),a0
    9082:	|  |  |         move.l 64(a0),d0
    9086:	|  |  |         cmp.l 20(sp),d0
    908a:	|  |  |  /----- beq.w 924e <drawPeople+0x208>
				thisPerson -> lastUsedAnim = myAnim;
    908e:	|  |  |  |      movea.l 24(sp),a0
    9092:	|  |  |  |      move.l 20(sp),64(a0)
				thisPerson -> frameNum = 0;
    9098:	|  |  |  |      movea.l 24(sp),a0
    909c:	|  |  |  |      clr.l 72(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    90a0:	|  |  |  |      movea.l 20(sp),a0
    90a4:	|  |  |  |      movea.l 4(a0),a0
    90a8:	|  |  |  |      move.l 4(a0),d0
    90ac:	|  |  |  |      movea.l 24(sp),a0
    90b0:	|  |  |  |      move.l d0,76(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    90b4:	|  |  |  |      movea.l 20(sp),a0
    90b8:	|  |  |  |      movea.l 4(a0),a1
    90bc:	|  |  |  |      movea.l 24(sp),a0
    90c0:	|  |  |  |      move.l 72(a0),d0
    90c4:	|  |  |  |      move.l d0,d1
    90c6:	|  |  |  |      move.l d1,d0
    90c8:	|  |  |  |      add.l d0,d0
    90ca:	|  |  |  |      add.l d1,d0
    90cc:	|  |  |  |      add.l d0,d0
    90ce:	|  |  |  |      add.l d0,d0
    90d0:	|  |  |  |      lea (0,a1,d0.l),a0
    90d4:	|  |  |  |      move.l 8(a0),d0
    90d8:	|  |  |  |  /-- ble.w 917a <drawPeople+0x134>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    90dc:	|  |  |  |  |   movea.l 20(sp),a0
    90e0:	|  |  |  |  |   movea.l 4(a0),a1
    90e4:	|  |  |  |  |   movea.l 24(sp),a0
    90e8:	|  |  |  |  |   move.l 72(a0),d0
    90ec:	|  |  |  |  |   move.l d0,d1
    90ee:	|  |  |  |  |   move.l d1,d0
    90f0:	|  |  |  |  |   add.l d0,d0
    90f2:	|  |  |  |  |   add.l d1,d0
    90f4:	|  |  |  |  |   add.l d0,d0
    90f6:	|  |  |  |  |   add.l d0,d0
    90f8:	|  |  |  |  |   lea (0,a1,d0.l),a0
    90fc:	|  |  |  |  |   move.l 8(a0),d0
    9100:	|  |  |  |  |   clr.l -(sp)
    9102:	|  |  |  |  |   move.l d0,-(sp)
    9104:	|  |  |  |  |   jsr c12e <startSound>
    910a:	|  |  |  |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    910c:	|  |  |  |  |   movea.l 24(sp),a0
    9110:	|  |  |  |  |   move.l 72(a0),d0
    9114:	|  |  |  |  |   addq.l #1,d0
    9116:	|  |  |  |  |   movea.l 24(sp),a0
    911a:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    911e:	|  |  |  |  |   movea.l 24(sp),a0
    9122:	|  |  |  |  |   move.l 72(a0),d0
    9126:	|  |  |  |  |   movea.l 24(sp),a0
    912a:	|  |  |  |  |   movea.l 60(a0),a0
    912e:	|  |  |  |  |   move.l 8(a0),d1
    9132:	|  |  |  |  |   move.l d1,-(sp)
    9134:	|  |  |  |  |   move.l d0,-(sp)
    9136:	|  |  |  |  |   jsr 16264 <__modsi3>
    913c:	|  |  |  |  |   addq.l #8,sp
    913e:	|  |  |  |  |   movea.l 24(sp),a0
    9142:	|  |  |  |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9146:	|  |  |  |  |   movea.l 24(sp),a0
    914a:	|  |  |  |  |   movea.l 60(a0),a0
    914e:	|  |  |  |  |   movea.l 4(a0),a1
    9152:	|  |  |  |  |   movea.l 24(sp),a0
    9156:	|  |  |  |  |   move.l 72(a0),d0
    915a:	|  |  |  |  |   move.l d0,d1
    915c:	|  |  |  |  |   move.l d1,d0
    915e:	|  |  |  |  |   add.l d0,d0
    9160:	|  |  |  |  |   add.l d1,d0
    9162:	|  |  |  |  |   add.l d0,d0
    9164:	|  |  |  |  |   add.l d0,d0
    9166:	|  |  |  |  |   lea (0,a1,d0.l),a0
    916a:	|  |  |  |  |   move.l 4(a0),d0
    916e:	|  |  |  |  |   movea.l 24(sp),a0
    9172:	|  |  |  |  |   move.l d0,76(a0)
    9176:	|  |  |  +--|-- bra.w 924e <drawPeople+0x208>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    917a:	|  |  |  |  \-> movea.l 20(sp),a0
    917e:	|  |  |  |      movea.l 4(a0),a1
    9182:	|  |  |  |      movea.l 24(sp),a0
    9186:	|  |  |  |      move.l 72(a0),d0
    918a:	|  |  |  |      move.l d0,d1
    918c:	|  |  |  |      move.l d1,d0
    918e:	|  |  |  |      add.l d0,d0
    9190:	|  |  |  |      add.l d1,d0
    9192:	|  |  |  |      add.l d0,d0
    9194:	|  |  |  |      add.l d0,d0
    9196:	|  |  |  |      lea (0,a1,d0.l),a0
    919a:	|  |  |  |      move.l 8(a0),d0
    919e:	|  |  |  +----- beq.w 924e <drawPeople+0x208>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    91a2:	|  |  |  |      movea.l 1aed2 <noStack>,a1
    91a8:	|  |  |  |      movea.l 20(sp),a0
    91ac:	|  |  |  |      move.l 4(a0),d2
    91b0:	|  |  |  |      movea.l 24(sp),a0
    91b4:	|  |  |  |      move.l 72(a0),d0
    91b8:	|  |  |  |      move.l d0,d1
    91ba:	|  |  |  |      move.l d1,d0
    91bc:	|  |  |  |      add.l d0,d0
    91be:	|  |  |  |      add.l d1,d0
    91c0:	|  |  |  |      add.l d0,d0
    91c2:	|  |  |  |      add.l d0,d0
    91c4:	|  |  |  |      movea.l d2,a0
    91c6:	|  |  |  |      adda.l d0,a0
    91c8:	|  |  |  |      move.l 8(a0),d0
    91cc:	|  |  |  |      neg.l d0
    91ce:	|  |  |  |      pea 1 <_start+0x1>
    91d2:	|  |  |  |      move.l a1,-(sp)
    91d4:	|  |  |  |      clr.l -(sp)
    91d6:	|  |  |  |      clr.l -(sp)
    91d8:	|  |  |  |      move.l d0,-(sp)
    91da:	|  |  |  |      jsr 59de <startNewFunctionNum>
    91e0:	|  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    91e4:	|  |  |  |      movea.l 24(sp),a0
    91e8:	|  |  |  |      move.l 72(a0),d0
    91ec:	|  |  |  |      addq.l #1,d0
    91ee:	|  |  |  |      movea.l 24(sp),a0
    91f2:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    91f6:	|  |  |  |      movea.l 24(sp),a0
    91fa:	|  |  |  |      move.l 72(a0),d0
    91fe:	|  |  |  |      movea.l 24(sp),a0
    9202:	|  |  |  |      movea.l 60(a0),a0
    9206:	|  |  |  |      move.l 8(a0),d1
    920a:	|  |  |  |      move.l d1,-(sp)
    920c:	|  |  |  |      move.l d0,-(sp)
    920e:	|  |  |  |      jsr 16264 <__modsi3>
    9214:	|  |  |  |      addq.l #8,sp
    9216:	|  |  |  |      movea.l 24(sp),a0
    921a:	|  |  |  |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    921e:	|  |  |  |      movea.l 24(sp),a0
    9222:	|  |  |  |      movea.l 60(a0),a0
    9226:	|  |  |  |      movea.l 4(a0),a1
    922a:	|  |  |  |      movea.l 24(sp),a0
    922e:	|  |  |  |      move.l 72(a0),d0
    9232:	|  |  |  |      move.l d0,d1
    9234:	|  |  |  |      move.l d1,d0
    9236:	|  |  |  |      add.l d0,d0
    9238:	|  |  |  |      add.l d1,d0
    923a:	|  |  |  |      add.l d0,d0
    923c:	|  |  |  |      add.l d0,d0
    923e:	|  |  |  |      lea (0,a1,d0.l),a0
    9242:	|  |  |  |      move.l 4(a0),d0
    9246:	|  |  |  |      movea.l 24(sp),a0
    924a:	|  |  |  |      move.l d0,76(a0)
				}
			}
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    924e:	|  |  |  \----> movea.l 20(sp),a0
    9252:	|  |  |         movea.l 4(a0),a1
    9256:	|  |  |         movea.l 24(sp),a0
    925a:	|  |  |         move.l 72(a0),d0
    925e:	|  |  |         move.l d0,d1
    9260:	|  |  |         move.l d1,d0
    9262:	|  |  |         add.l d0,d0
    9264:	|  |  |         add.l d1,d0
    9266:	|  |  |         add.l d0,d0
    9268:	|  |  |         add.l d0,d0
    926a:	|  |  |         lea (0,a1,d0.l),a0
    926e:	|  |  |         move.l (a0),8(sp)
			int m = fNumSign < 0;
    9272:	|  |  |         move.l 8(sp),d0
    9276:	|  |  |         add.l d0,d0
    9278:	|  |  |         subx.l d0,d0
    927a:	|  |  |         neg.l d0
    927c:	|  |  |         move.b d0,d0
    927e:	|  |  |         move.b d0,d0
    9280:	|  |  |         andi.l #255,d0
    9286:	|  |  |         move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    928a:	|  |  |         move.l 8(sp),-(sp)
    928e:	|  |  |         jsr 821c <TF_abs>
    9294:	|  |  |         addq.l #4,sp
    9296:	|  |  |         move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    929a:	|  |  |         movea.l 20(sp),a0
    929e:	|  |  |         movea.l (a0),a0
    92a0:	|  |  |         move.l 8(a0),d0
    92a4:	|  |  |         cmp.l 12(sp),d0
    92a8:	|  |  |     /-- bgt.s 92b8 <drawPeople+0x272>
				fNum = 0;
    92aa:	|  |  |     |   clr.l 12(sp)
				m = 2 - m;
    92ae:	|  |  |     |   moveq #2,d0
    92b0:	|  |  |     |   sub.l 16(sp),d0
    92b4:	|  |  |     |   move.l d0,16(sp)
			}
			if (m != 2) {
    92b8:	|  |  |     \-> moveq #2,d0
    92ba:	|  |  |         cmp.l 16(sp),d0
    92be:	|  |  +-------- beq.s 933a <drawPeople+0x2f4>
				BOOL r = FALSE;
    92c0:	|  |  |         clr.w 6(sp)
				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    92c4:	|  |  |         move.l 16(sp),d0
    92c8:	|  |  |         movea.w d0,a0
    92ca:	|  |  |         movea.l 20(sp),a1
    92ce:	|  |  |         movea.l (a1),a1
    92d0:	|  |  |         movea.l 16(a1),a1
    92d4:	|  |  |         move.l 12(sp),d1
    92d8:	|  |  |         move.l d1,d0
    92da:	|  |  |         lsl.l #3,d0
    92dc:	|  |  |         sub.l d1,d0
    92de:	|  |  |         add.l d0,d0
    92e0:	|  |  |         add.l d0,d0
    92e2:	|  |  |         add.l a1,d0
    92e4:	|  |  |         move.l a0,-(sp)
    92e6:	|  |  |         move.l 28(sp),-(sp)
    92ea:	|  |  |         move.l d0,-(sp)
    92ec:	|  |  |         jsr 7fb6 <scaleSprite>
    92f2:	|  |  |         lea 12(sp),sp
    92f6:	|  |  |         move.w d0,6(sp)
				if (r) {
    92fa:	|  |  +-------- beq.s 933a <drawPeople+0x2f4>
					if (thisPerson -> thisType -> screenName[0]) {
    92fc:	|  |  |         movea.l 24(sp),a0
    9300:	|  |  |         movea.l 102(a0),a0
    9304:	|  |  |         movea.l (a0),a0
    9306:	|  |  |         move.b (a0),d0
    9308:	|  |  +-------- beq.s 933a <drawPeople+0x2f4>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    930a:	|  |  |         move.l 1afda <personRegion+0x1c>,d1
    9310:	|  |  |         movea.l 24(sp),a0
    9314:	|  |  |         move.l 102(a0),d0
    9318:	|  |  |         cmp.l d1,d0
    931a:	|  |  |     /-- beq.s 9322 <drawPeople+0x2dc>
    931c:	|  |  |     |   clr.l 1aeca <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    9322:	|  |  |     \-> movea.l 24(sp),a0
    9326:	|  |  |         move.l 102(a0),d0
    932a:	|  |  |         move.l d0,1afda <personRegion+0x1c>
						overRegion = & personRegion;
    9330:	|  |  |         move.l #110526,1b062 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    933a:	|  |  \-------> movea.l 24(sp),a0
    933e:	|  |            move.l 76(a0),d0
    9342:	|  |            subq.l #1,d0
    9344:	|  |            movea.l 24(sp),a0
    9348:	|  |            move.l d0,76(a0)
    934c:	|  |            movea.l 24(sp),a0
    9350:	|  |            move.l 76(a0),d0
    9354:	|  |     /----- bne.w 957c <drawPeople+0x536>
			thisPerson -> frameNum ++;
    9358:	|  |     |      movea.l 24(sp),a0
    935c:	|  |     |      move.l 72(a0),d0
    9360:	|  |     |      addq.l #1,d0
    9362:	|  |     |      movea.l 24(sp),a0
    9366:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    936a:	|  |     |      movea.l 24(sp),a0
    936e:	|  |     |      move.l 72(a0),d0
    9372:	|  |     |      movea.l 24(sp),a0
    9376:	|  |     |      movea.l 60(a0),a0
    937a:	|  |     |      move.l 8(a0),d1
    937e:	|  |     |      move.l d1,-(sp)
    9380:	|  |     |      move.l d0,-(sp)
    9382:	|  |     |      jsr 16264 <__modsi3>
    9388:	|  |     |      addq.l #8,sp
    938a:	|  |     |      movea.l 24(sp),a0
    938e:	|  |     |      move.l d0,72(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9392:	|  |     |      movea.l 24(sp),a0
    9396:	|  |     |      movea.l 60(a0),a0
    939a:	|  |     |      movea.l 4(a0),a1
    939e:	|  |     |      movea.l 24(sp),a0
    93a2:	|  |     |      move.l 72(a0),d0
    93a6:	|  |     |      move.l d0,d1
    93a8:	|  |     |      move.l d1,d0
    93aa:	|  |     |      add.l d0,d0
    93ac:	|  |     |      add.l d1,d0
    93ae:	|  |     |      add.l d0,d0
    93b0:	|  |     |      add.l d0,d0
    93b2:	|  |     |      lea (0,a1,d0.l),a0
    93b6:	|  |     |      move.l 4(a0),d0
    93ba:	|  |     |      movea.l 24(sp),a0
    93be:	|  |     |      move.l d0,76(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    93c2:	|  |     |      movea.l 24(sp),a0
    93c6:	|  |     |      move.w 92(a0),d0
    93ca:	|  |     +----- beq.w 957c <drawPeople+0x536>
    93ce:	|  |     |      tst.l 20(sp)
    93d2:	|  |     +----- beq.w 957c <drawPeople+0x536>
    93d6:	|  |     |      movea.l 20(sp),a0
    93da:	|  |     |      move.l 4(a0),d0
    93de:	|  |     +----- beq.w 957c <drawPeople+0x536>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    93e2:	|  |     |      movea.l 20(sp),a0
    93e6:	|  |     |      movea.l 4(a0),a1
    93ea:	|  |     |      movea.l 24(sp),a0
    93ee:	|  |     |      move.l 72(a0),d0
    93f2:	|  |     |      move.l d0,d1
    93f4:	|  |     |      move.l d1,d0
    93f6:	|  |     |      add.l d0,d0
    93f8:	|  |     |      add.l d1,d0
    93fa:	|  |     |      add.l d0,d0
    93fc:	|  |     |      add.l d0,d0
    93fe:	|  |     |      lea (0,a1,d0.l),a0
    9402:	|  |     |      move.l 8(a0),d0
    9406:	|  |     |  /-- ble.w 94a8 <drawPeople+0x462>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    940a:	|  |     |  |   movea.l 20(sp),a0
    940e:	|  |     |  |   movea.l 4(a0),a1
    9412:	|  |     |  |   movea.l 24(sp),a0
    9416:	|  |     |  |   move.l 72(a0),d0
    941a:	|  |     |  |   move.l d0,d1
    941c:	|  |     |  |   move.l d1,d0
    941e:	|  |     |  |   add.l d0,d0
    9420:	|  |     |  |   add.l d1,d0
    9422:	|  |     |  |   add.l d0,d0
    9424:	|  |     |  |   add.l d0,d0
    9426:	|  |     |  |   lea (0,a1,d0.l),a0
    942a:	|  |     |  |   move.l 8(a0),d0
    942e:	|  |     |  |   clr.l -(sp)
    9430:	|  |     |  |   move.l d0,-(sp)
    9432:	|  |     |  |   jsr c12e <startSound>
    9438:	|  |     |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    943a:	|  |     |  |   movea.l 24(sp),a0
    943e:	|  |     |  |   move.l 72(a0),d0
    9442:	|  |     |  |   addq.l #1,d0
    9444:	|  |     |  |   movea.l 24(sp),a0
    9448:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    944c:	|  |     |  |   movea.l 24(sp),a0
    9450:	|  |     |  |   move.l 72(a0),d0
    9454:	|  |     |  |   movea.l 24(sp),a0
    9458:	|  |     |  |   movea.l 60(a0),a0
    945c:	|  |     |  |   move.l 8(a0),d1
    9460:	|  |     |  |   move.l d1,-(sp)
    9462:	|  |     |  |   move.l d0,-(sp)
    9464:	|  |     |  |   jsr 16264 <__modsi3>
    946a:	|  |     |  |   addq.l #8,sp
    946c:	|  |     |  |   movea.l 24(sp),a0
    9470:	|  |     |  |   move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9474:	|  |     |  |   movea.l 24(sp),a0
    9478:	|  |     |  |   movea.l 60(a0),a0
    947c:	|  |     |  |   movea.l 4(a0),a1
    9480:	|  |     |  |   movea.l 24(sp),a0
    9484:	|  |     |  |   move.l 72(a0),d0
    9488:	|  |     |  |   move.l d0,d1
    948a:	|  |     |  |   move.l d1,d0
    948c:	|  |     |  |   add.l d0,d0
    948e:	|  |     |  |   add.l d1,d0
    9490:	|  |     |  |   add.l d0,d0
    9492:	|  |     |  |   add.l d0,d0
    9494:	|  |     |  |   lea (0,a1,d0.l),a0
    9498:	|  |     |  |   move.l 4(a0),d0
    949c:	|  |     |  |   movea.l 24(sp),a0
    94a0:	|  |     |  |   move.l d0,76(a0)
    94a4:	|  |     +--|-- bra.w 957c <drawPeople+0x536>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    94a8:	|  |     |  \-> movea.l 20(sp),a0
    94ac:	|  |     |      movea.l 4(a0),a1
    94b0:	|  |     |      movea.l 24(sp),a0
    94b4:	|  |     |      move.l 72(a0),d0
    94b8:	|  |     |      move.l d0,d1
    94ba:	|  |     |      move.l d1,d0
    94bc:	|  |     |      add.l d0,d0
    94be:	|  |     |      add.l d1,d0
    94c0:	|  |     |      add.l d0,d0
    94c2:	|  |     |      add.l d0,d0
    94c4:	|  |     |      lea (0,a1,d0.l),a0
    94c8:	|  |     |      move.l 8(a0),d0
    94cc:	|  |     +----- beq.w 957c <drawPeople+0x536>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    94d0:	|  |     |      movea.l 1aed2 <noStack>,a1
    94d6:	|  |     |      movea.l 20(sp),a0
    94da:	|  |     |      move.l 4(a0),d2
    94de:	|  |     |      movea.l 24(sp),a0
    94e2:	|  |     |      move.l 72(a0),d0
    94e6:	|  |     |      move.l d0,d1
    94e8:	|  |     |      move.l d1,d0
    94ea:	|  |     |      add.l d0,d0
    94ec:	|  |     |      add.l d1,d0
    94ee:	|  |     |      add.l d0,d0
    94f0:	|  |     |      add.l d0,d0
    94f2:	|  |     |      movea.l d2,a0
    94f4:	|  |     |      adda.l d0,a0
    94f6:	|  |     |      move.l 8(a0),d0
    94fa:	|  |     |      neg.l d0
    94fc:	|  |     |      pea 1 <_start+0x1>
    9500:	|  |     |      move.l a1,-(sp)
    9502:	|  |     |      clr.l -(sp)
    9504:	|  |     |      clr.l -(sp)
    9506:	|  |     |      move.l d0,-(sp)
    9508:	|  |     |      jsr 59de <startNewFunctionNum>
    950e:	|  |     |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9512:	|  |     |      movea.l 24(sp),a0
    9516:	|  |     |      move.l 72(a0),d0
    951a:	|  |     |      addq.l #1,d0
    951c:	|  |     |      movea.l 24(sp),a0
    9520:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9524:	|  |     |      movea.l 24(sp),a0
    9528:	|  |     |      move.l 72(a0),d0
    952c:	|  |     |      movea.l 24(sp),a0
    9530:	|  |     |      movea.l 60(a0),a0
    9534:	|  |     |      move.l 8(a0),d1
    9538:	|  |     |      move.l d1,-(sp)
    953a:	|  |     |      move.l d0,-(sp)
    953c:	|  |     |      jsr 16264 <__modsi3>
    9542:	|  |     |      addq.l #8,sp
    9544:	|  |     |      movea.l 24(sp),a0
    9548:	|  |     |      move.l d0,72(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    954c:	|  |     |      movea.l 24(sp),a0
    9550:	|  |     |      movea.l 60(a0),a0
    9554:	|  |     |      movea.l 4(a0),a1
    9558:	|  |     |      movea.l 24(sp),a0
    955c:	|  |     |      move.l 72(a0),d0
    9560:	|  |     |      move.l d0,d1
    9562:	|  |     |      move.l d1,d0
    9564:	|  |     |      add.l d0,d0
    9566:	|  |     |      add.l d1,d0
    9568:	|  |     |      add.l d0,d0
    956a:	|  |     |      add.l d0,d0
    956c:	|  |     |      lea (0,a1,d0.l),a0
    9570:	|  |     |      move.l 4(a0),d0
    9574:	|  |     |      movea.l 24(sp),a0
    9578:	|  |     |      move.l d0,76(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    957c:	|  |     \----> movea.l 24(sp),a0
    9580:	|  |            move.l 24(a0),24(sp)
	while (thisPerson) {
    9586:	|  \----------> tst.l 24(sp)
    958a:	\-------------- bne.w 9068 <drawPeople+0x22>
	}
}
    958e:	                nop
    9590:	                nop
    9592:	                move.l (sp)+,d2
    9594:	                lea 24(sp),sp
    9598:	                rts

0000959a <findPerson>:


struct onScreenPerson * findPerson (int v) {
    959a:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    959c:	          move.l 1afba <allPeople>,(sp)
	while (thisPerson) {
    95a2:	      /-- bra.s 95ba <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    95a4:	/-----|-> movea.l (sp),a0
    95a6:	|     |   movea.l 102(a0),a0
    95aa:	|     |   move.l 4(a0),d0
    95ae:	|     |   cmp.l 8(sp),d0
    95b2:	|  /--|-- beq.s 95c0 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    95b4:	|  |  |   movea.l (sp),a0
    95b6:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    95ba:	|  |  \-> tst.l (sp)
    95bc:	\--|----- bne.s 95a4 <findPerson+0xa>
    95be:	   |  /-- bra.s 95c2 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    95c0:	   \--|-> nop
	}
	return thisPerson;
    95c2:	      \-> move.l (sp),d0
}
    95c4:	          addq.l #4,sp
    95c6:	          rts

000095c8 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    95c8:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    95ca:	       move.l 12(sp),-(sp)
    95ce:	       jsr 959a <findPerson>
    95d4:	       addq.l #4,sp
    95d6:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    95d8:	   /-- bne.s 95de <floatCharacter+0x16>
    95da:	   |   clr.w d0
    95dc:	/--|-- bra.s 95e8 <floatCharacter+0x20>
	moveMe -> floaty = f;
    95de:	|  \-> movea.l (sp),a0
    95e0:	|      move.l 8(sp),12(a0)
	return TRUE;
    95e6:	|      moveq #1,d0
}
    95e8:	\----> addq.l #4,sp
    95ea:	       rts

000095ec <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    95ec:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    95ee:	          tst.l 8(sp)
    95f2:	      /-- bne.s 9600 <forceWalkingPerson+0x14>
    95f4:	      |   tst.l 12(sp)
    95f8:	      +-- bne.s 9600 <forceWalkingPerson+0x14>
    95fa:	      |   clr.w d0
    95fc:	/-----|-- bra.w 9692 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    9600:	|     \-> move.l 16(sp),-(sp)
    9604:	|         jsr 959a <findPerson>
    960a:	|         addq.l #4,sp
    960c:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    960e:	|     /-- bne.s 9614 <forceWalkingPerson+0x28>
    9610:	|     |   clr.w d0
    9612:	+-----|-- bra.s 9692 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    9614:	|     \-> movea.l (sp),a0
    9616:	|         move.l 56(a0),d0
    961a:	|     /-- beq.s 962c <forceWalkingPerson+0x40>
    961c:	|     |   movea.l (sp),a0
    961e:	|     |   move.l 56(a0),d0
    9622:	|     |   move.l d0,-(sp)
    9624:	|     |   jsr 363e <abortFunction>
    962a:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    962c:	|     \-> movea.l (sp),a0
    962e:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    9634:	|         movea.l (sp),a0
    9636:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    963a:	|         movea.l (sp),a0
    963c:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    9642:	|         movea.l (sp),a0
    9644:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    964a:	|         movea.l (sp),a0
    964c:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    9652:	|         movea.l (sp),a0
    9654:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    9658:	|         movea.l (sp),a0
    965a:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    965e:	|         move.l (sp),-(sp)
    9660:	|         jsr 898c <doBorderStuff>
    9666:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    9668:	|         pea 1 <_start+0x1>
    966c:	|         move.l 4(sp),-(sp)
    9670:	|         jsr ae4c <walkMe>
    9676:	|         addq.l #8,sp
    9678:	|         tst.w d0
    967a:	|     /-- bne.s 9684 <forceWalkingPerson+0x98>
    967c:	|     |   movea.l (sp),a0
    967e:	|     |   move.w 54(a0),d0
    9682:	|  /--|-- beq.s 9690 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    9684:	|  |  \-> movea.l (sp),a0
    9686:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    968c:	|  |      moveq #1,d0
    968e:	+--|----- bra.s 9692 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    9690:	|  \----> clr.w d0
    }
}
    9692:	\-------> addq.l #4,sp
    9694:	          rts

00009696 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    9696:	                lea -56(sp),sp
    969a:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    969c:	                move.l #320,56(sp)
    96a4:	                move.l #200,52(sp)
    96ac:	                moveq #-1,d0
    96ae:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    96b2:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    96ba:	                clr.l 44(sp)
    96be:	   /----------- bra.w 9896 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    96c2:	/--|----------> movea.l 1b06a <currentFloor>,a0
    96c8:	|  |            move.l 12(a0),d1
    96cc:	|  |            move.l 44(sp),d0
    96d0:	|  |            lsl.l #3,d0
    96d2:	|  |            movea.l d1,a0
    96d4:	|  |            adda.l d0,a0
    96d6:	|  |            move.l (a0),d0
    96d8:	|  |            move.l d0,d1
    96da:	|  |            subq.l #1,d1
    96dc:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    96e0:	|  |            clr.l 40(sp)
    96e4:	|  |     /----- bra.w 9874 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    96e8:	|  |  /--|----> movea.l 1b06a <currentFloor>,a0
    96ee:	|  |  |  |      move.l 4(a0),d1
    96f2:	|  |  |  |      movea.l 1b06a <currentFloor>,a0
    96f8:	|  |  |  |      movea.l 12(a0),a0
    96fc:	|  |  |  |      move.l 44(sp),d0
    9700:	|  |  |  |      lsl.l #3,d0
    9702:	|  |  |  |      adda.l d0,a0
    9704:	|  |  |  |      movea.l 4(a0),a0
    9708:	|  |  |  |      move.l 40(sp),d0
    970c:	|  |  |  |      add.l d0,d0
    970e:	|  |  |  |      add.l d0,d0
    9710:	|  |  |  |      adda.l d0,a0
    9712:	|  |  |  |      move.l (a0),d0
    9714:	|  |  |  |      lsl.l #3,d0
    9716:	|  |  |  |      movea.l d1,a0
    9718:	|  |  |  |      adda.l d0,a0
    971a:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    971e:	|  |  |  |      movea.l 1b06a <currentFloor>,a0
    9724:	|  |  |  |      move.l 4(a0),d1
    9728:	|  |  |  |      movea.l 1b06a <currentFloor>,a0
    972e:	|  |  |  |      movea.l 12(a0),a0
    9732:	|  |  |  |      move.l 44(sp),d0
    9736:	|  |  |  |      lsl.l #3,d0
    9738:	|  |  |  |      adda.l d0,a0
    973a:	|  |  |  |      movea.l 4(a0),a0
    973e:	|  |  |  |      move.l 40(sp),d0
    9742:	|  |  |  |      add.l d0,d0
    9744:	|  |  |  |      add.l d0,d0
    9746:	|  |  |  |      adda.l d0,a0
    9748:	|  |  |  |      move.l (a0),d0
    974a:	|  |  |  |      lsl.l #3,d0
    974c:	|  |  |  |      movea.l d1,a0
    974e:	|  |  |  |      adda.l d0,a0
    9750:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    9756:	|  |  |  |      movea.l 1b06a <currentFloor>,a0
    975c:	|  |  |  |      move.l 4(a0),d1
    9760:	|  |  |  |      movea.l 1b06a <currentFloor>,a0
    9766:	|  |  |  |      movea.l 12(a0),a0
    976a:	|  |  |  |      move.l 44(sp),d0
    976e:	|  |  |  |      lsl.l #3,d0
    9770:	|  |  |  |      adda.l d0,a0
    9772:	|  |  |  |      movea.l 4(a0),a0
    9776:	|  |  |  |      move.l 36(sp),d0
    977a:	|  |  |  |      add.l d0,d0
    977c:	|  |  |  |      add.l d0,d0
    977e:	|  |  |  |      adda.l d0,a0
    9780:	|  |  |  |      move.l (a0),d0
    9782:	|  |  |  |      lsl.l #3,d0
    9784:	|  |  |  |      movea.l d1,a0
    9786:	|  |  |  |      adda.l d0,a0
    9788:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    978c:	|  |  |  |      movea.l 1b06a <currentFloor>,a0
    9792:	|  |  |  |      move.l 4(a0),d1
    9796:	|  |  |  |      movea.l 1b06a <currentFloor>,a0
    979c:	|  |  |  |      movea.l 12(a0),a0
    97a0:	|  |  |  |      move.l 44(sp),d0
    97a4:	|  |  |  |      lsl.l #3,d0
    97a6:	|  |  |  |      adda.l d0,a0
    97a8:	|  |  |  |      movea.l 4(a0),a0
    97ac:	|  |  |  |      move.l 36(sp),d0
    97b0:	|  |  |  |      add.l d0,d0
    97b2:	|  |  |  |      add.l d0,d0
    97b4:	|  |  |  |      adda.l d0,a0
    97b6:	|  |  |  |      move.l (a0),d0
    97b8:	|  |  |  |      lsl.l #3,d0
    97ba:	|  |  |  |      movea.l d1,a0
    97bc:	|  |  |  |      adda.l d0,a0
    97be:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    97c4:	|  |  |  |      movea.l 68(sp),a0
    97c8:	|  |  |  |      move.l (a0),d1
    97ca:	|  |  |  |      movea.l 64(sp),a0
    97ce:	|  |  |  |      move.l (a0),d0
    97d0:	|  |  |  |      move.l d1,-(sp)
    97d2:	|  |  |  |      move.l d0,-(sp)
    97d4:	|  |  |  |      move.l 24(sp),-(sp)
    97d8:	|  |  |  |      move.l 32(sp),-(sp)
    97dc:	|  |  |  |      move.l 40(sp),-(sp)
    97e0:	|  |  |  |      move.l 48(sp),-(sp)
    97e4:	|  |  |  |      lea 28(sp),a0
    97e8:	|  |  |  |      move.l a0,-(sp)
    97ea:	|  |  |  |      lea 36(sp),a0
    97ee:	|  |  |  |      move.l a0,-(sp)
    97f0:	|  |  |  |      jsr 1465a <closestPointOnLine>
    97f6:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    97fa:	|  |  |  |      movea.l 64(sp),a0
    97fe:	|  |  |  |      move.l (a0),d0
    9800:	|  |  |  |      move.l 8(sp),d1
    9804:	|  |  |  |      move.l d0,d2
    9806:	|  |  |  |      sub.l d1,d2
    9808:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    980c:	|  |  |  |      movea.l 68(sp),a0
    9810:	|  |  |  |      move.l (a0),d0
    9812:	|  |  |  |      move.l 4(sp),d1
    9816:	|  |  |  |      move.l d0,d2
    9818:	|  |  |  |      sub.l d1,d2
    981a:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    981e:	|  |  |  |      move.l 28(sp),-(sp)
    9822:	|  |  |  |      move.l 32(sp),-(sp)
    9826:	|  |  |  |      jsr 161b8 <__mulsi3>
    982c:	|  |  |  |      addq.l #8,sp
    982e:	|  |  |  |      move.l d0,d2
    9830:	|  |  |  |      move.l 24(sp),-(sp)
    9834:	|  |  |  |      move.l 28(sp),-(sp)
    9838:	|  |  |  |      jsr 161b8 <__mulsi3>
    983e:	|  |  |  |      addq.l #8,sp
    9840:	|  |  |  |      move.l d2,d1
    9842:	|  |  |  |      add.l d0,d1
    9844:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    9848:	|  |  |  |      move.l 12(sp),d2
    984c:	|  |  |  |      cmp.l 32(sp),d2
    9850:	|  |  |  |  /-- bge.s 986a <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    9852:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    9858:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    985e:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    9864:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    986a:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    9870:	|  |  |  |      addq.l #1,40(sp)
    9874:	|  |  |  \----> movea.l 1b06a <currentFloor>,a0
    987a:	|  |  |         move.l 12(a0),d1
    987e:	|  |  |         move.l 44(sp),d0
    9882:	|  |  |         lsl.l #3,d0
    9884:	|  |  |         movea.l d1,a0
    9886:	|  |  |         adda.l d0,a0
    9888:	|  |  |         move.l (a0),d0
    988a:	|  |  |         cmp.l 40(sp),d0
    988e:	|  |  \-------- bgt.w 96e8 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    9892:	|  |            addq.l #1,44(sp)
    9896:	|  \----------> movea.l 1b06a <currentFloor>,a0
    989c:	|               move.l 8(a0),d0
    98a0:	|               cmp.l 44(sp),d0
    98a4:	\-------------- bgt.w 96c2 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    98a8:	                moveq #-1,d0
    98aa:	                cmp.l 48(sp),d0
    98ae:	            /-- bne.s 98b4 <handleClosestPoint+0x21e>
    98b0:	            |   clr.w d0
    98b2:	         /--|-- bra.s 98ce <handleClosestPoint+0x238>
	*setX = gotX;
    98b4:	         |  \-> movea.l 64(sp),a0
    98b8:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    98bc:	         |      movea.l 68(sp),a0
    98c0:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    98c4:	         |      movea.l 72(sp),a0
    98c8:	         |      move.l 48(sp),(a0)

	return TRUE;
    98cc:	         |      moveq #1,d0
}
    98ce:	         \----> move.l (sp)+,d2
    98d0:	                lea 56(sp),sp
    98d4:	                rts

000098d6 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    98d6:	clr.l 1afce <personRegion+0x10>
	personRegion.sY = 0;
    98dc:	clr.l 1afd2 <personRegion+0x14>
	personRegion.di = -1;
    98e2:	moveq #-1,d0
    98e4:	move.l d0,1afd6 <personRegion+0x18>
	allScreenRegions = NULL;
    98ea:	clr.l 1b05e <allScreenRegions>

	return TRUE;
    98f0:	moveq #1,d0
}
    98f2:	rts

000098f4 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    98f4:	          subq.l #4,sp
    98f6:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    98f8:	          tst.l 12(sp)
    98fc:	      /-- bne.s 9904 <jumpPerson+0x10>
    98fe:	      |   tst.l 16(sp)
    9902:	/-----|-- beq.s 9978 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    9904:	|     \-> move.l 20(sp),-(sp)
    9908:	|         jsr 959a <findPerson>
    990e:	|         addq.l #4,sp
    9910:	|         move.l d0,4(sp)
    if (!moveMe) return;
    9914:	|  /----- beq.s 997c <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    9916:	|  |      movea.l 4(sp),a0
    991a:	|  |      move.l 56(a0),d0
    991e:	|  |  /-- beq.s 9932 <jumpPerson+0x3e>
    9920:	|  |  |   movea.l 4(sp),a0
    9924:	|  |  |   move.l 56(a0),d0
    9928:	|  |  |   move.l d0,-(sp)
    992a:	|  |  |   jsr 363e <abortFunction>
    9930:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    9932:	|  |  \-> movea.l 4(sp),a0
    9936:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    993a:	|  |      movea.l 4(sp),a0
    993e:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    9942:	|  |      movea.l 4(sp),a0
    9946:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    994a:	|  |      move.l 16(sp),-(sp)
    994e:	|  |      jsr 15c36 <__floatsisf>
    9954:	|  |      addq.l #4,sp
    9956:	|  |      move.l d0,d2
    9958:	|  |      move.l 12(sp),-(sp)
    995c:	|  |      jsr 15c36 <__floatsisf>
    9962:	|  |      addq.l #4,sp
    9964:	|  |      move.l d2,-(sp)
    9966:	|  |      move.l d0,-(sp)
    9968:	|  |      move.l 12(sp),-(sp)
    996c:	|  |      jsr 9ce2 <moveAndScale>
    9972:	|  |      lea 12(sp),sp
    9976:	|  |  /-- bra.s 997e <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    9978:	\--|--|-> nop
    997a:	   |  +-- bra.s 997e <jumpPerson+0x8a>
    if (!moveMe) return;
    997c:	   \--|-> nop
}
    997e:	      \-> move.l (sp)+,d2
    9980:	          addq.l #4,sp
    9982:	          rts

00009984 <killAllPeople>:


void killAllPeople () {
    9984:	          subq.l #8,sp
    9986:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    9988:	   /----- bra.s 99f4 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    998a:	/--|----> movea.l 1afba <allPeople>,a0
    9990:	|  |      move.l 56(a0),d0
    9994:	|  |  /-- beq.s 99aa <killAllPeople+0x26>
    9996:	|  |  |   movea.l 1afba <allPeople>,a0
    999c:	|  |  |   move.l 56(a0),d0
    99a0:	|  |  |   move.l d0,-(sp)
    99a2:	|  |  |   jsr 363e <abortFunction>
    99a8:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    99aa:	|  |  \-> movea.l 1afba <allPeople>,a0
    99b0:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    99b4:	|  |      move.l 1afba <allPeople>,8(sp)
		allPeople = allPeople -> next;
    99bc:	|  |      movea.l 1afba <allPeople>,a0
    99c2:	|  |      move.l 24(a0),d0
    99c6:	|  |      move.l d0,1afba <allPeople>
		removeObjectType (killPeople -> thisType);
    99cc:	|  |      movea.l 8(sp),a0
    99d0:	|  |      move.l 102(a0),d0
    99d4:	|  |      move.l d0,-(sp)
    99d6:	|  |      jsr c80c <removeObjectType>
    99dc:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    99de:	|  |      move.l 8(sp),4(sp)
    99e4:	|  |      move.l 1af02 <SysBase>,d0
    99ea:	|  |      movea.l d0,a6
    99ec:	|  |      movea.l 4(sp),a1
    99f0:	|  |      jsr -690(a6)
	while (allPeople) {
    99f4:	|  \----> move.l 1afba <allPeople>,d0
    99fa:	\-------- bne.s 998a <killAllPeople+0x6>
	}
}
    99fc:	          nop
    99fe:	          nop
    9a00:	          movea.l (sp)+,a6
    9a02:	          addq.l #8,sp
    9a04:	          rts

00009a06 <killMostPeople>:

void killMostPeople() {
    9a06:	          lea -12(sp),sp
    9a0a:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    9a0c:	          move.l #110522,12(sp)

    while (*lookyHere) {
    9a14:	   /----- bra.w 9a9a <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    9a18:	/--|----> movea.l 12(sp),a0
    9a1c:	|  |      movea.l (a0),a0
    9a1e:	|  |      move.l 106(a0),d0
    9a22:	|  |      moveq #32,d1
    9a24:	|  |      and.l d1,d0
    9a26:	|  |  /-- beq.s 9a38 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    9a28:	|  |  |   movea.l 12(sp),a0
    9a2c:	|  |  |   move.l (a0),d0
    9a2e:	|  |  |   moveq #24,d1
    9a30:	|  |  |   add.l d0,d1
    9a32:	|  |  |   move.l d1,12(sp)
    9a36:	|  +--|-- bra.s 9a9a <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    9a38:	|  |  \-> movea.l 12(sp),a0
    9a3c:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    9a40:	|  |      movea.l 8(sp),a0
    9a44:	|  |      move.l 24(a0),d0
    9a48:	|  |      movea.l 12(sp),a0
    9a4c:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    9a4e:	|  |      movea.l 8(sp),a0
    9a52:	|  |      move.l 56(a0),d0
    9a56:	|  |  /-- beq.s 9a6a <killMostPeople+0x64>
    9a58:	|  |  |   movea.l 8(sp),a0
    9a5c:	|  |  |   move.l 56(a0),d0
    9a60:	|  |  |   move.l d0,-(sp)
    9a62:	|  |  |   jsr 363e <abortFunction>
    9a68:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    9a6a:	|  |  \-> movea.l 8(sp),a0
    9a6e:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    9a72:	|  |      movea.l 8(sp),a0
    9a76:	|  |      move.l 102(a0),d0
    9a7a:	|  |      move.l d0,-(sp)
    9a7c:	|  |      jsr c80c <removeObjectType>
    9a82:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    9a84:	|  |      move.l 8(sp),4(sp)
    9a8a:	|  |      move.l 1af02 <SysBase>,d0
    9a90:	|  |      movea.l d0,a6
    9a92:	|  |      movea.l 4(sp),a1
    9a96:	|  |      jsr -690(a6)
    while (*lookyHere) {
    9a9a:	|  \----> movea.l 12(sp),a0
    9a9e:	|         move.l (a0),d0
    9aa0:	\-------- bne.w 9a18 <killMostPeople+0x12>
        }
    }
}
    9aa4:	          nop
    9aa6:	          nop
    9aa8:	          movea.l (sp)+,a6
    9aaa:	          lea 12(sp),sp
    9aae:	          rts

00009ab0 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    9ab0:	clr.l -(sp)
    9ab2:	move.l sp,d0
    9ab4:	addq.l #8,d0
    9ab6:	move.l d0,-(sp)
    9ab8:	jsr 703a <setFrames>
    9abe:	addq.l #8,sp
}
    9ac0:	nop
    9ac2:	rts

00009ac4 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    9ac4:	          lea -12(sp),sp
    9ac8:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    9aca:	          tst.l 20(sp)
    9ace:	      /-- bne.s 9adc <makeWalkingPerson+0x18>
    9ad0:	      |   tst.l 24(sp)
    9ad4:	      +-- bne.s 9adc <makeWalkingPerson+0x18>
    9ad6:	      |   clr.w d0
    9ad8:	/-----|-- bra.w 9c74 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    9adc:	|     \-> movea.l 1b06a <currentFloor>,a0
    9ae2:	|         move.l 8(a0),d0
    9ae6:	|     /-- bne.s 9aee <makeWalkingPerson+0x2a>
    9ae8:	|     |   clr.w d0
    9aea:	+-----|-- bra.w 9c74 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    9aee:	|     \-> move.l 28(sp),-(sp)
    9af2:	|         jsr 959a <findPerson>
    9af8:	|         addq.l #4,sp
    9afa:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    9afe:	|     /-- bne.s 9b06 <makeWalkingPerson+0x42>
    9b00:	|     |   clr.w d0
    9b02:	+-----|-- bra.w 9c74 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    9b06:	|     \-> movea.l 12(sp),a0
    9b0a:	|         move.l 56(a0),d0
    9b0e:	|     /-- beq.s 9b22 <makeWalkingPerson+0x5e>
    9b10:	|     |   movea.l 12(sp),a0
    9b14:	|     |   move.l 56(a0),d0
    9b18:	|     |   move.l d0,-(sp)
    9b1a:	|     |   jsr 363e <abortFunction>
    9b20:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    9b22:	|     \-> movea.l 12(sp),a0
    9b26:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    9b2a:	|         movea.l 12(sp),a0
    9b2e:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    9b34:	|         movea.l 12(sp),a0
    9b38:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    9b3e:	|         movea.l 12(sp),a0
    9b42:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    9b48:	|         movea.l 12(sp),a0
    9b4c:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    9b52:	|         move.l 24(sp),-(sp)
    9b56:	|         move.l 24(sp),-(sp)
    9b5a:	|         jsr 14b5c <inFloor>
    9b60:	|         addq.l #8,sp
    9b62:	|         movea.l 12(sp),a0
    9b66:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    9b6a:	|         movea.l 12(sp),a0
    9b6e:	|         move.l 48(a0),d0
    9b72:	|         moveq #-1,d1
    9b74:	|         cmp.l d0,d1
    9b76:	|     /-- bne.s 9ba6 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    9b78:	|     |   movea.w #48,a0
    9b7c:	|     |   adda.l 12(sp),a0
    9b80:	|     |   moveq #32,d1
    9b82:	|     |   add.l 12(sp),d1
    9b86:	|     |   moveq #28,d0
    9b88:	|     |   add.l 12(sp),d0
    9b8c:	|     |   move.l a0,-(sp)
    9b8e:	|     |   move.l d1,-(sp)
    9b90:	|     |   move.l d0,-(sp)
    9b92:	|     |   jsr 9696 <handleClosestPoint>
    9b98:	|     |   lea 12(sp),sp
    9b9c:	|     |   tst.w d0
    9b9e:	|     +-- bne.s 9ba6 <makeWalkingPerson+0xe2>
    9ba0:	|     |   clr.w d0
    9ba2:	+-----|-- bra.w 9c74 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    9ba6:	|     \-> movea.l 12(sp),a0
    9baa:	|         move.l 4(a0),d0
    9bae:	|         move.l d0,-(sp)
    9bb0:	|         jsr 15bce <__fixsfsi>
    9bb6:	|         addq.l #4,sp
    9bb8:	|         move.l d0,d2
    9bba:	|         movea.l 12(sp),a0
    9bbe:	|         move.l (a0),d0
    9bc0:	|         move.l d0,-(sp)
    9bc2:	|         jsr 15bce <__fixsfsi>
    9bc8:	|         addq.l #4,sp
    9bca:	|         move.l d2,-(sp)
    9bcc:	|         move.l d0,-(sp)
    9bce:	|         jsr 14b5c <inFloor>
    9bd4:	|         addq.l #8,sp
    9bd6:	|         movea.l 12(sp),a0
    9bda:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    9bde:	|         movea.l 12(sp),a0
    9be2:	|         move.l 44(a0),d0
    9be6:	|         moveq #-1,d1
    9be8:	|         cmp.l d0,d1
    9bea:	|     /-- bne.s 9c3c <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    9bec:	|     |   movea.l 12(sp),a0
    9bf0:	|     |   move.l (a0),d0
    9bf2:	|     |   move.l d0,-(sp)
    9bf4:	|     |   jsr 15bce <__fixsfsi>
    9bfa:	|     |   addq.l #4,sp
    9bfc:	|     |   move.l d0,8(sp)
    9c00:	|     |   movea.l 12(sp),a0
    9c04:	|     |   move.l 4(a0),d0
    9c08:	|     |   move.l d0,-(sp)
    9c0a:	|     |   jsr 15bce <__fixsfsi>
    9c10:	|     |   addq.l #4,sp
    9c12:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    9c16:	|     |   moveq #44,d0
    9c18:	|     |   add.l 12(sp),d0
    9c1c:	|     |   move.l d0,-(sp)
    9c1e:	|     |   lea 8(sp),a0
    9c22:	|     |   move.l a0,-(sp)
    9c24:	|     |   moveq #16,d0
    9c26:	|     |   add.l sp,d0
    9c28:	|     |   move.l d0,-(sp)
    9c2a:	|     |   jsr 9696 <handleClosestPoint>
    9c30:	|     |   lea 12(sp),sp
    9c34:	|     |   tst.w d0
    9c36:	|     +-- bne.s 9c3c <makeWalkingPerson+0x178>
    9c38:	|     |   clr.w d0
    9c3a:	+-----|-- bra.s 9c74 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    9c3c:	|     \-> move.l 12(sp),-(sp)
    9c40:	|         jsr 898c <doBorderStuff>
    9c46:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    9c48:	|         clr.l -(sp)
    9c4a:	|         move.l 16(sp),-(sp)
    9c4e:	|         jsr ae4c <walkMe>
    9c54:	|         addq.l #8,sp
    9c56:	|         tst.w d0
    9c58:	|     /-- bne.s 9c64 <makeWalkingPerson+0x1a0>
    9c5a:	|     |   movea.l 12(sp),a0
    9c5e:	|     |   move.w 54(a0),d0
    9c62:	|  /--|-- beq.s 9c72 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    9c64:	|  |  \-> movea.l 12(sp),a0
    9c68:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    9c6e:	|  |      moveq #1,d0
    9c70:	+--|----- bra.s 9c74 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    9c72:	|  \----> clr.w d0
	}
}
    9c74:	\-------> move.l (sp)+,d2
    9c76:	          lea 12(sp),sp
    9c7a:	          rts

00009c7c <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    9c7c:	       lea -16(sp),sp
    9c80:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    9c82:	       moveq #12,d0
    9c84:	       move.l d0,16(sp)
    9c88:	       clr.l 12(sp)
    9c8c:	       move.l 1af02 <SysBase>,d0
    9c92:	       movea.l d0,a6
    9c94:	       move.l 16(sp),d0
    9c98:	       move.l 12(sp),d1
    9c9c:	       jsr -684(a6)
    9ca0:	       move.l d0,8(sp)
    9ca4:	       move.l 8(sp),d0
    9ca8:	       move.l d0,4(sp)
    if(newAnim == 0) {
    9cac:	   /-- bne.s 9cc0 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    9cae:	   |   pea 17805 <PutChar+0x1537>
    9cb4:	   |   jsr 157fa <KPrintF>
    9cba:	   |   addq.l #4,sp
        return NULL;    
    9cbc:	   |   moveq #0,d0
    9cbe:	/--|-- bra.s 9cda <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    9cc0:	|  \-> movea.l 4(sp),a0
    9cc4:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    9cc6:	|      movea.l 4(sp),a0
    9cca:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    9cce:	|      movea.l 4(sp),a0
    9cd2:	|      clr.l 4(a0)
	return newAnim;
    9cd6:	|      move.l 4(sp),d0
}
    9cda:	\----> movea.l (sp)+,a6
    9cdc:	       lea 16(sp),sp
    9ce0:	       rts

00009ce2 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    9ce2:	    move.l d2,-(sp)
	me->x = x;
    9ce4:	    movea.l 8(sp),a0
    9ce8:	    move.l 12(sp),(a0)
	me->y = y;
    9cec:	    movea.l 8(sp),a0
    9cf0:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    9cf6:	    movea.l 8(sp),a0
    9cfa:	    move.l 106(a0),d0
    9cfe:	    moveq #2,d1
    9d00:	    and.l d1,d0
    9d02:	/-- bne.s 9d5a <moveAndScale+0x78>
    9d04:	|   move.w 1a894 <scaleDivide>,d0
    9d0a:	+-- beq.s 9d5a <moveAndScale+0x78>
    9d0c:	|   movea.l 8(sp),a0
    9d10:	|   move.l 4(a0),d2
    9d14:	|   move.w 1a892 <scaleHorizon>,d0
    9d1a:	|   movea.w d0,a0
    9d1c:	|   move.l a0,-(sp)
    9d1e:	|   jsr 15c36 <__floatsisf>
    9d24:	|   addq.l #4,sp
    9d26:	|   move.l d0,-(sp)
    9d28:	|   move.l d2,-(sp)
    9d2a:	|   jsr 15f2a <__subsf3>
    9d30:	|   addq.l #8,sp
    9d32:	|   move.l d0,d2
    9d34:	|   move.w 1a894 <scaleDivide>,d0
    9d3a:	|   movea.w d0,a0
    9d3c:	|   move.l a0,-(sp)
    9d3e:	|   jsr 15c36 <__floatsisf>
    9d44:	|   addq.l #4,sp
    9d46:	|   move.l d0,-(sp)
    9d48:	|   move.l d2,-(sp)
    9d4a:	|   jsr 15ae2 <__divsf3>
    9d50:	|   addq.l #8,sp
    9d52:	|   movea.l 8(sp),a0
    9d56:	|   move.l d0,20(a0)
}
    9d5a:	\-> nop
    9d5c:	    move.l (sp)+,d2
    9d5e:	    rts

00009d60 <removeOneCharacter>:

void removeOneCharacter (int i) {
    9d60:	          lea -16(sp),sp
    9d64:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    9d66:	          move.l 24(sp),-(sp)
    9d6a:	          jsr 959a <findPerson>
    9d70:	          addq.l #4,sp
    9d72:	          move.l d0,8(sp)

    if (p) {
    9d76:	/-------- beq.w 9e56 <removeOneCharacter+0xf6>
		
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    9d7a:	|         move.l 1b062 <overRegion>,d0
    9d80:	|         cmpi.l #110526,d0
    9d86:	|     /-- bne.s 9da4 <removeOneCharacter+0x44>
    9d88:	|     |   movea.l 1b062 <overRegion>,a0
    9d8e:	|     |   move.l 28(a0),d1
    9d92:	|     |   movea.l 8(sp),a0
    9d96:	|     |   move.l 102(a0),d0
    9d9a:	|     |   cmp.l d1,d0
    9d9c:	|     +-- bne.s 9da4 <removeOneCharacter+0x44>
            overRegion = NULL;
    9d9e:	|     |   clr.l 1b062 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    9da4:	|     \-> movea.l 8(sp),a0
    9da8:	|         move.l 56(a0),d0
    9dac:	|     /-- beq.s 9dc0 <removeOneCharacter+0x60>
    9dae:	|     |   movea.l 8(sp),a0
    9db2:	|     |   move.l 56(a0),d0
    9db6:	|     |   move.l d0,-(sp)
    9db8:	|     |   jsr 363e <abortFunction>
    9dbe:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    9dc0:	|     \-> movea.l 8(sp),a0
    9dc4:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    9dc8:	|         clr.l 12(sp)
    9dcc:	|     /-- bra.s 9df4 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    9dce:	|  /--|-> movea.l 8(sp),a0
    9dd2:	|  |  |   movea.l 68(a0),a0
    9dd6:	|  |  |   move.l (a0),d1
    9dd8:	|  |  |   move.l 12(sp),d0
    9ddc:	|  |  |   add.l d0,d0
    9dde:	|  |  |   add.l d0,d0
    9de0:	|  |  |   movea.l d1,a0
    9de2:	|  |  |   adda.l d0,a0
    9de4:	|  |  |   move.l (a0),d0
    9de6:	|  |  |   move.l d0,-(sp)
    9de8:	|  |  |   jsr 8908 <deleteAnim>
    9dee:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    9df0:	|  |  |   addq.l #1,12(sp)
    9df4:	|  |  \-> moveq #2,d0
    9df6:	|  |      cmp.l 12(sp),d0
    9dfa:	|  \----- bge.s 9dce <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    9dfc:	|         move.l #110522,16(sp)
    9e04:	|     /-- bra.s 9e14 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    9e06:	|  /--|-> movea.l 16(sp),a0
    9e0a:	|  |  |   move.l (a0),d0
    9e0c:	|  |  |   moveq #24,d1
    9e0e:	|  |  |   add.l d0,d1
    9e10:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    9e14:	|  |  \-> movea.l 16(sp),a0
    9e18:	|  |      move.l (a0),d0
    9e1a:	|  |      cmp.l 8(sp),d0
    9e1e:	|  \----- bne.s 9e06 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    9e20:	|         movea.l 8(sp),a0
    9e24:	|         move.l 24(a0),d0
    9e28:	|         movea.l 16(sp),a0
    9e2c:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    9e2e:	|         movea.l 8(sp),a0
    9e32:	|         move.l 102(a0),d0
    9e36:	|         move.l d0,-(sp)
    9e38:	|         jsr c80c <removeObjectType>
    9e3e:	|         addq.l #4,sp
        FreeVec(p);
    9e40:	|         move.l 8(sp),4(sp)
    9e46:	|         move.l 1af02 <SysBase>,d0
    9e4c:	|         movea.l d0,a6
    9e4e:	|         movea.l 4(sp),a1
    9e52:	|         jsr -690(a6)
    }
}
    9e56:	\-------> nop
    9e58:	          movea.l (sp)+,a6
    9e5a:	          lea 16(sp),sp
    9e5e:	          rts

00009e60 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    9e60:	       subq.l #8,sp
    9e62:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    9e64:	       movea.l 16(sp),a0
    9e68:	       movea.l 68(a0),a0
    9e6c:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    9e72:	       movea.l 16(sp),a0
    9e76:	       move.l 80(a0),d2
    9e7a:	       move.l 4(sp),-(sp)
    9e7e:	       pea b4 <_start+0xb4>
    9e82:	       jsr 16236 <__divsi3>
    9e88:	       addq.l #8,sp
    9e8a:	       add.l d2,d0
    9e8c:	       move.l d0,d1
    9e8e:	       addi.l #180,d1
    9e94:	       movea.l 16(sp),a0
    9e98:	       move.l 88(a0),d0
    9e9c:	       move.l d1,d2
    9e9e:	       add.l d0,d2
    9ea0:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    9ea4:	   /-- bra.s 9eae <rethinkAngle+0x4e>
    9ea6:	/--|-> addi.l #-360,8(sp)
    9eae:	|  \-> cmpi.l #359,8(sp)
    9eb6:	\----- bgt.s 9ea6 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    9eb8:	       move.l 4(sp),-(sp)
    9ebc:	       move.l 12(sp),-(sp)
    9ec0:	       jsr 161b8 <__mulsi3>
    9ec6:	       addq.l #8,sp
    9ec8:	       pea 168 <decodeFilename+0x50>
    9ecc:	       move.l d0,-(sp)
    9ece:	       jsr 16236 <__divsi3>
    9ed4:	       addq.l #8,sp
    9ed6:	       movea.l 16(sp),a0
    9eda:	       move.l d0,94(a0)
}
    9ede:	       nop
    9ee0:	       move.l (sp)+,d2
    9ee2:	       addq.l #8,sp
    9ee4:	       rts

00009ee6 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    9ee6:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    9ee8:	          movea.l 8(sp),a0
    9eec:	          move.l 8(a0),d0
    9ef0:	          move.l 12(sp),-(sp)
    9ef4:	          move.l d0,-(sp)
    9ef6:	          jsr 8d0 <put2bytes>
    9efc:	          addq.l #8,sp
	if (p -> numFrames) {
    9efe:	          movea.l 8(sp),a0
    9f02:	          move.l 8(a0),d0
    9f06:	/-------- beq.w 9faa <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    9f0a:	|         movea.l 8(sp),a0
    9f0e:	|         movea.l (a0),a0
    9f10:	|         move.l (a0),d0
    9f12:	|         move.l 12(sp),-(sp)
    9f16:	|         move.l d0,-(sp)
    9f18:	|         jsr 958 <put4bytes>
    9f1e:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    9f20:	|         clr.l (sp)
    9f22:	|     /-- bra.s 9f9c <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    9f24:	|  /--|-> movea.l 8(sp),a0
    9f28:	|  |  |   movea.l 4(a0),a0
    9f2c:	|  |  |   move.l (sp),d1
    9f2e:	|  |  |   move.l d1,d0
    9f30:	|  |  |   add.l d0,d0
    9f32:	|  |  |   add.l d1,d0
    9f34:	|  |  |   add.l d0,d0
    9f36:	|  |  |   add.l d0,d0
    9f38:	|  |  |   adda.l d0,a0
    9f3a:	|  |  |   move.l (a0),d0
    9f3c:	|  |  |   move.l 12(sp),-(sp)
    9f40:	|  |  |   move.l d0,-(sp)
    9f42:	|  |  |   jsr 958 <put4bytes>
    9f48:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    9f4a:	|  |  |   movea.l 8(sp),a0
    9f4e:	|  |  |   movea.l 4(a0),a0
    9f52:	|  |  |   move.l (sp),d1
    9f54:	|  |  |   move.l d1,d0
    9f56:	|  |  |   add.l d0,d0
    9f58:	|  |  |   add.l d1,d0
    9f5a:	|  |  |   add.l d0,d0
    9f5c:	|  |  |   add.l d0,d0
    9f5e:	|  |  |   adda.l d0,a0
    9f60:	|  |  |   move.l 4(a0),d0
    9f64:	|  |  |   move.l 12(sp),-(sp)
    9f68:	|  |  |   move.l d0,-(sp)
    9f6a:	|  |  |   jsr 958 <put4bytes>
    9f70:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    9f72:	|  |  |   movea.l 8(sp),a0
    9f76:	|  |  |   movea.l 4(a0),a0
    9f7a:	|  |  |   move.l (sp),d1
    9f7c:	|  |  |   move.l d1,d0
    9f7e:	|  |  |   add.l d0,d0
    9f80:	|  |  |   add.l d1,d0
    9f82:	|  |  |   add.l d0,d0
    9f84:	|  |  |   add.l d0,d0
    9f86:	|  |  |   adda.l d0,a0
    9f88:	|  |  |   move.l 8(a0),d0
    9f8c:	|  |  |   move.l 12(sp),-(sp)
    9f90:	|  |  |   move.l d0,-(sp)
    9f92:	|  |  |   jsr 958 <put4bytes>
    9f98:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    9f9a:	|  |  |   addq.l #1,(sp)
    9f9c:	|  |  \-> movea.l 8(sp),a0
    9fa0:	|  |      move.l 8(a0),d0
    9fa4:	|  |      cmp.l (sp),d0
    9fa6:	|  \----- bgt.w 9f24 <saveAnim+0x3e>
		}
	}
	return TRUE;
    9faa:	\-------> moveq #1,d0
}
    9fac:	          addq.l #4,sp
    9fae:	          rts

00009fb0 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    9fb0:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    9fb2:	             movea.l 8(sp),a0
    9fb6:	             move.l 4(a0),d0
    9fba:	             move.l 12(sp),-(sp)
    9fbe:	             move.l d0,-(sp)
    9fc0:	             jsr 8d0 <put2bytes>
    9fc6:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    9fc8:	             clr.l (sp)
    9fca:	   /-------- bra.s 9ff6 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    9fcc:	/--|-------> movea.l 8(sp),a0
    9fd0:	|  |         move.l (a0),d1
    9fd2:	|  |         move.l (sp),d0
    9fd4:	|  |         add.l d0,d0
    9fd6:	|  |         add.l d0,d0
    9fd8:	|  |         movea.l d1,a0
    9fda:	|  |         adda.l d0,a0
    9fdc:	|  |         move.l (a0),d0
    9fde:	|  |         move.l 12(sp),-(sp)
    9fe2:	|  |         move.l d0,-(sp)
    9fe4:	|  |         jsr 9ee6 <saveAnim>
    9fea:	|  |         addq.l #8,sp
    9fec:	|  |         tst.w d0
    9fee:	|  |     /-- bne.s 9ff4 <saveCostume+0x44>
    9ff0:	|  |     |   clr.w d0
    9ff2:	|  |  /--|-- bra.s a00a <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    9ff4:	|  |  |  \-> addq.l #1,(sp)
    9ff6:	|  \--|----> movea.l 8(sp),a0
    9ffa:	|     |      move.l 4(a0),d1
    9ffe:	|     |      move.l d1,d0
    a000:	|     |      add.l d0,d0
    a002:	|     |      add.l d1,d0
    a004:	|     |      cmp.l (sp),d0
    a006:	\-----|----- bgt.s 9fcc <saveCostume+0x1c>
	}

	return TRUE;
    a008:	      |      moveq #1,d0
}
    a00a:	      \----> addq.l #4,sp
    a00c:	             rts

0000a00e <savePeople>:

BOOL savePeople (BPTR fp) {
    a00e:	             lea -144(sp),sp
    a012:	             move.l a6,-(sp)
    a014:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    a016:	             move.l 1afba <allPeople>,148(sp)
	int countPeople = 0, a;
    a01e:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    a022:	             move.w 1a892 <scaleHorizon>,d0
    a028:	             movea.w d0,a0
    a02a:	             move.l 156(sp),-(sp)
    a02e:	             move.l a0,-(sp)
    a030:	             jsr a9c <putSigned>
    a036:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    a038:	             move.w 1a894 <scaleDivide>,d0
    a03e:	             movea.w d0,a0
    a040:	             move.l 156(sp),-(sp)
    a044:	             move.l a0,-(sp)
    a046:	             jsr a9c <putSigned>
    a04c:	             addq.l #8,sp

	while (me) {
    a04e:	         /-- bra.s a05e <savePeople+0x50>
		countPeople ++;
    a050:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    a054:	      |  |   movea.l 148(sp),a0
    a058:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    a05e:	      |  \-> tst.l 148(sp)
    a062:	      \----- bne.s a050 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    a064:	             move.l 156(sp),-(sp)
    a068:	             move.l 148(sp),-(sp)
    a06c:	             jsr 8d0 <put2bytes>
    a072:	             addq.l #8,sp

	me = allPeople;
    a074:	             move.l 1afba <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    a07c:	             clr.l 140(sp)
    a080:	   /-------- bra.w a4d8 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    a084:	/--|-------> movea.l 148(sp),a0
    a088:	|  |         move.l (a0),d0
    a08a:	|  |         move.l 156(sp),-(sp)
    a08e:	|  |         move.l d0,-(sp)
    a090:	|  |         jsr a46 <putFloat>
    a096:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    a098:	|  |         movea.l 148(sp),a0
    a09c:	|  |         move.l 4(a0),d0
    a0a0:	|  |         move.l 156(sp),-(sp)
    a0a4:	|  |         move.l d0,-(sp)
    a0a6:	|  |         jsr a46 <putFloat>
    a0ac:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    a0ae:	|  |         movea.l 148(sp),a0
    a0b2:	|  |         move.l 68(a0),d0
    a0b6:	|  |         move.l 156(sp),-(sp)
    a0ba:	|  |         move.l d0,-(sp)
    a0bc:	|  |         jsr 9fb0 <saveCostume>
    a0c2:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    a0c4:	|  |         movea.l 148(sp),a0
    a0c8:	|  |         move.l 60(a0),d0
    a0cc:	|  |         move.l 156(sp),-(sp)
    a0d0:	|  |         move.l d0,-(sp)
    a0d2:	|  |         jsr 9ee6 <saveAnim>
    a0d8:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    a0da:	|  |         move.l 156(sp),136(sp)
    a0e0:	|  |         movea.l 148(sp),a0
    a0e4:	|  |         move.l 60(a0),d1
    a0e8:	|  |         movea.l 148(sp),a0
    a0ec:	|  |         move.l 64(a0),d0
    a0f0:	|  |         cmp.l d1,d0
    a0f2:	|  |         seq d0
    a0f4:	|  |         neg.b d0
    a0f6:	|  |         move.b d0,d0
    a0f8:	|  |         andi.l #255,d0
    a0fe:	|  |         move.l d0,132(sp)
    a102:	|  |         move.l 1af0a <DOSBase>,d0
    a108:	|  |         movea.l d0,a6
    a10a:	|  |         move.l 136(sp),d1
    a10e:	|  |         move.l 132(sp),d2
    a112:	|  |         jsr -312(a6)
    a116:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    a11a:	|  |         movea.l 148(sp),a0
    a11e:	|  |         move.l 20(a0),d0
    a122:	|  |         move.l 156(sp),-(sp)
    a126:	|  |         move.l d0,-(sp)
    a128:	|  |         jsr a46 <putFloat>
    a12e:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    a130:	|  |         movea.l 148(sp),a0
    a134:	|  |         move.l 106(a0),d0
    a138:	|  |         move.l 156(sp),-(sp)
    a13c:	|  |         move.l d0,-(sp)
    a13e:	|  |         jsr 8d0 <put2bytes>
    a144:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    a146:	|  |         movea.l 148(sp),a0
    a14a:	|  |         move.l 8(a0),d0
    a14e:	|  |         move.l 156(sp),-(sp)
    a152:	|  |         move.l d0,-(sp)
    a154:	|  |         jsr 8d0 <put2bytes>
    a15a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    a15c:	|  |         movea.l 148(sp),a0
    a160:	|  |         move.l 28(a0),d0
    a164:	|  |         move.l 156(sp),-(sp)
    a168:	|  |         move.l d0,-(sp)
    a16a:	|  |         jsr 8d0 <put2bytes>
    a170:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    a172:	|  |         movea.l 148(sp),a0
    a176:	|  |         move.l 32(a0),d0
    a17a:	|  |         move.l 156(sp),-(sp)
    a17e:	|  |         move.l d0,-(sp)
    a180:	|  |         jsr 8d0 <put2bytes>
    a186:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    a188:	|  |         movea.l 148(sp),a0
    a18c:	|  |         move.l 36(a0),d0
    a190:	|  |         move.l 156(sp),-(sp)
    a194:	|  |         move.l d0,-(sp)
    a196:	|  |         jsr 8d0 <put2bytes>
    a19c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    a19e:	|  |         movea.l 148(sp),a0
    a1a2:	|  |         move.l 40(a0),d0
    a1a6:	|  |         move.l 156(sp),-(sp)
    a1aa:	|  |         move.l d0,-(sp)
    a1ac:	|  |         jsr 8d0 <put2bytes>
    a1b2:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    a1b4:	|  |         movea.l 148(sp),a0
    a1b8:	|  |         move.l 72(a0),d0
    a1bc:	|  |         move.l 156(sp),-(sp)
    a1c0:	|  |         move.l d0,-(sp)
    a1c2:	|  |         jsr 8d0 <put2bytes>
    a1c8:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    a1ca:	|  |         movea.l 148(sp),a0
    a1ce:	|  |         move.l 76(a0),d0
    a1d2:	|  |         move.l 156(sp),-(sp)
    a1d6:	|  |         move.l d0,-(sp)
    a1d8:	|  |         jsr 8d0 <put2bytes>
    a1de:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    a1e0:	|  |         movea.l 148(sp),a0
    a1e4:	|  |         move.l 16(a0),d0
    a1e8:	|  |         move.l 156(sp),-(sp)
    a1ec:	|  |         move.l d0,-(sp)
    a1ee:	|  |         jsr 8d0 <put2bytes>
    a1f4:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    a1f6:	|  |         movea.l 148(sp),a0
    a1fa:	|  |         move.l 110(a0),d0
    a1fe:	|  |         move.l 156(sp),-(sp)
    a202:	|  |         move.l d0,-(sp)
    a204:	|  |         jsr 8d0 <put2bytes>
    a20a:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    a20c:	|  |         movea.l 148(sp),a0
    a210:	|  |         move.l 12(a0),d0
    a214:	|  |         move.l d0,d0
    a216:	|  |         movea.w d0,a0
    a218:	|  |         move.l 156(sp),-(sp)
    a21c:	|  |         move.l a0,-(sp)
    a21e:	|  |         jsr a9c <putSigned>
    a224:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    a226:	|  |         move.l 156(sp),124(sp)
    a22c:	|  |         movea.l 148(sp),a0
    a230:	|  |         move.w 92(a0),d0
    a234:	|  |         movea.w d0,a0
    a236:	|  |         move.l a0,120(sp)
    a23a:	|  |         move.l 1af0a <DOSBase>,d0
    a240:	|  |         movea.l d0,a6
    a242:	|  |         move.l 124(sp),d1
    a246:	|  |         move.l 120(sp),d2
    a24a:	|  |         jsr -312(a6)
    a24e:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    a252:	|  |         move.l 156(sp),112(sp)
    a258:	|  |         movea.l 148(sp),a0
    a25c:	|  |         move.w 52(a0),d0
    a260:	|  |         movea.w d0,a0
    a262:	|  |         move.l a0,108(sp)
    a266:	|  |         move.l 1af0a <DOSBase>,d0
    a26c:	|  |         movea.l d0,a6
    a26e:	|  |         move.l 112(sp),d1
    a272:	|  |         move.l 108(sp),d2
    a276:	|  |         jsr -312(a6)
    a27a:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    a27e:	|  |         move.l 156(sp),100(sp)
    a284:	|  |         movea.l 148(sp),a0
    a288:	|  |         move.w 54(a0),d0
    a28c:	|  |         movea.w d0,a0
    a28e:	|  |         move.l a0,96(sp)
    a292:	|  |         move.l 1af0a <DOSBase>,d0
    a298:	|  |         movea.l d0,a6
    a29a:	|  |         move.l 100(sp),d1
    a29e:	|  |         move.l 96(sp),d2
    a2a2:	|  |         jsr -312(a6)
    a2a6:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    a2aa:	|  |         movea.l 148(sp),a0
    a2ae:	|  |         move.l 56(a0),d0
    a2b2:	|  |  /----- beq.s a2f0 <savePeople+0x2e2>
			FPutC (fp, 1);
    a2b4:	|  |  |      move.l 156(sp),76(sp)
    a2ba:	|  |  |      moveq #1,d0
    a2bc:	|  |  |      move.l d0,72(sp)
    a2c0:	|  |  |      move.l 1af0a <DOSBase>,d0
    a2c6:	|  |  |      movea.l d0,a6
    a2c8:	|  |  |      move.l 76(sp),d1
    a2cc:	|  |  |      move.l 72(sp),d2
    a2d0:	|  |  |      jsr -312(a6)
    a2d4:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    a2d8:	|  |  |      movea.l 148(sp),a0
    a2dc:	|  |  |      move.l 56(a0),d0
    a2e0:	|  |  |      move.l 156(sp),-(sp)
    a2e4:	|  |  |      move.l d0,-(sp)
    a2e6:	|  |  |      jsr b486 <saveFunction>
    a2ec:	|  |  |      addq.l #8,sp
    a2ee:	|  |  |  /-- bra.s a314 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    a2f0:	|  |  \--|-> move.l 156(sp),88(sp)
    a2f6:	|  |     |   moveq #1,d0
    a2f8:	|  |     |   move.l d0,84(sp)
    a2fc:	|  |     |   move.l 1af0a <DOSBase>,d0
    a302:	|  |     |   movea.l d0,a6
    a304:	|  |     |   move.l 88(sp),d1
    a308:	|  |     |   move.l 84(sp),d2
    a30c:	|  |     |   jsr -312(a6)
    a310:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    a314:	|  |     \-> movea.l 148(sp),a0
    a318:	|  |         move.l 94(a0),d0
    a31c:	|  |         move.l 156(sp),-(sp)
    a320:	|  |         move.l d0,-(sp)
    a322:	|  |         jsr 8d0 <put2bytes>
    a328:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    a32a:	|  |         movea.l 148(sp),a0
    a32e:	|  |         move.l 80(a0),d0
    a332:	|  |         move.l 156(sp),-(sp)
    a336:	|  |         move.l d0,-(sp)
    a338:	|  |         jsr 8d0 <put2bytes>
    a33e:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    a340:	|  |         movea.l 148(sp),a0
    a344:	|  |         move.l 88(a0),d0
    a348:	|  |         move.l 156(sp),-(sp)
    a34c:	|  |         move.l d0,-(sp)
    a34e:	|  |         jsr 8d0 <put2bytes>
    a354:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    a356:	|  |         movea.l 148(sp),a0
    a35a:	|  |         move.l 84(a0),d0
    a35e:	|  |         move.l 156(sp),-(sp)
    a362:	|  |         move.l d0,-(sp)
    a364:	|  |         jsr 8d0 <put2bytes>
    a36a:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    a36c:	|  |         movea.l 148(sp),a0
    a370:	|  |         move.l 98(a0),d0
    a374:	|  |         move.l d0,d0
    a376:	|  |         movea.w d0,a0
    a378:	|  |         move.l 156(sp),-(sp)
    a37c:	|  |         move.l a0,-(sp)
    a37e:	|  |         jsr a9c <putSigned>
    a384:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    a386:	|  |         movea.l 148(sp),a0
    a38a:	|  |         move.l 44(a0),d0
    a38e:	|  |         move.l d0,d0
    a390:	|  |         movea.w d0,a0
    a392:	|  |         move.l 156(sp),-(sp)
    a396:	|  |         move.l a0,-(sp)
    a398:	|  |         jsr a9c <putSigned>
    a39e:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    a3a0:	|  |         movea.l 148(sp),a0
    a3a4:	|  |         move.l 48(a0),d0
    a3a8:	|  |         move.l d0,d0
    a3aa:	|  |         movea.w d0,a0
    a3ac:	|  |         move.l 156(sp),-(sp)
    a3b0:	|  |         move.l a0,-(sp)
    a3b2:	|  |         jsr a9c <putSigned>
    a3b8:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    a3ba:	|  |         move.l 156(sp),64(sp)
    a3c0:	|  |         movea.l 148(sp),a0
    a3c4:	|  |         move.b 114(a0),d0
    a3c8:	|  |         move.b d0,d0
    a3ca:	|  |         andi.l #255,d0
    a3d0:	|  |         move.l d0,60(sp)
    a3d4:	|  |         move.l 1af0a <DOSBase>,d0
    a3da:	|  |         movea.l d0,a6
    a3dc:	|  |         move.l 64(sp),d1
    a3e0:	|  |         move.l 60(sp),d2
    a3e4:	|  |         jsr -312(a6)
    a3e8:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    a3ec:	|  |         move.l 156(sp),52(sp)
    a3f2:	|  |         movea.l 148(sp),a0
    a3f6:	|  |         move.b 115(a0),d0
    a3fa:	|  |         move.b d0,d0
    a3fc:	|  |         andi.l #255,d0
    a402:	|  |         move.l d0,48(sp)
    a406:	|  |         move.l 1af0a <DOSBase>,d0
    a40c:	|  |         movea.l d0,a6
    a40e:	|  |         move.l 52(sp),d1
    a412:	|  |         move.l 48(sp),d2
    a416:	|  |         jsr -312(a6)
    a41a:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    a41e:	|  |         move.l 156(sp),40(sp)
    a424:	|  |         movea.l 148(sp),a0
    a428:	|  |         move.b 116(a0),d0
    a42c:	|  |         move.b d0,d0
    a42e:	|  |         andi.l #255,d0
    a434:	|  |         move.l d0,36(sp)
    a438:	|  |         move.l 1af0a <DOSBase>,d0
    a43e:	|  |         movea.l d0,a6
    a440:	|  |         move.l 40(sp),d1
    a444:	|  |         move.l 36(sp),d2
    a448:	|  |         jsr -312(a6)
    a44c:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    a450:	|  |         move.l 156(sp),28(sp)
    a456:	|  |         movea.l 148(sp),a0
    a45a:	|  |         move.b 117(a0),d0
    a45e:	|  |         move.b d0,d0
    a460:	|  |         andi.l #255,d0
    a466:	|  |         move.l d0,24(sp)
    a46a:	|  |         move.l 1af0a <DOSBase>,d0
    a470:	|  |         movea.l d0,a6
    a472:	|  |         move.l 28(sp),d1
    a476:	|  |         move.l 24(sp),d2
    a47a:	|  |         jsr -312(a6)
    a47e:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    a482:	|  |         move.l 156(sp),16(sp)
    a488:	|  |         movea.l 148(sp),a0
    a48c:	|  |         move.b 118(a0),d0
    a490:	|  |         move.b d0,d0
    a492:	|  |         andi.l #255,d0
    a498:	|  |         move.l d0,12(sp)
    a49c:	|  |         move.l 1af0a <DOSBase>,d0
    a4a2:	|  |         movea.l d0,a6
    a4a4:	|  |         move.l 16(sp),d1
    a4a8:	|  |         move.l 12(sp),d2
    a4ac:	|  |         jsr -312(a6)
    a4b0:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    a4b4:	|  |         movea.l 148(sp),a0
    a4b8:	|  |         move.l 102(a0),d0
    a4bc:	|  |         move.l 156(sp),-(sp)
    a4c0:	|  |         move.l d0,-(sp)
    a4c2:	|  |         jsr c8ac <saveObjectRef>
    a4c8:	|  |         addq.l #8,sp

		me = me -> next;
    a4ca:	|  |         movea.l 148(sp),a0
    a4ce:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    a4d4:	|  |         addq.l #1,140(sp)
    a4d8:	|  \-------> movea.l 140(sp),a0
    a4dc:	|            cmpa.l 144(sp),a0
    a4e0:	\----------- blt.w a084 <savePeople+0x76>
	}
	return TRUE;
    a4e4:	             moveq #1,d0
}
    a4e6:	             move.l (sp)+,d2
    a4e8:	             movea.l (sp)+,a6
    a4ea:	             lea 144(sp),sp
    a4ee:	             rts

0000a4f0 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    a4f0:	movea.l 4(sp),a0
    a4f4:	move.l 8(sp),(a0)
}
    a4f8:	nop
    a4fa:	rts

0000a4fc <setDrawMode>:


void setDrawMode (int h, int ob) {
    a4fc:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    a4fe:	       move.l 12(sp),-(sp)
    a502:	       jsr 959a <findPerson>
    a508:	       addq.l #4,sp
    a50a:	       move.l d0,(sp)
	if (! moveMe) return;
    a50c:	/----- beq.s a520 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    a50e:	|      move.l 8(sp),-(sp)
    a512:	|      move.l 4(sp),-(sp)
    a516:	|      jsr a526 <setMyDrawMode>
    a51c:	|      addq.l #8,sp
    a51e:	|  /-- bra.s a522 <setDrawMode+0x26>
	if (! moveMe) return;
    a520:	\--|-> nop
}
    a522:	   \-> addq.l #4,sp
    a524:	       rts

0000a526 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    a526:	       moveq #19,d0
    a528:	       cmp.l 8(sp),d0
    a52c:	/----- bcs.w aa04 <setMyDrawMode+0x4de>
    a530:	|      move.l 8(sp),d0
    a534:	|      add.l d0,d0
    a536:	|      movea.l d0,a0
    a538:	|      adda.l #42308,a0
    a53e:	|      move.w (a0),d0
    a540:	|      jmp (a544 <setMyDrawMode+0x1e>,pc,d0.w)
    a544:	|      .short 0x04c0
    a546:	|      ori.l #6684712,-(a4)
    a54c:	|      btst d0,-(a0)
    a54e:	|      bchg d0,(a6)+
    a550:	|      bclr d0,(a4)+
    a552:	|      bset d0,(a2)+
    a554:	|      andi.b #84,(a6)
    a558:	|      andi.l #55575312,(a2)
    a55e:	|      .short 0x02d0
    a560:	|      bclr d1,(a0)
    a562:	|      .short 0x044a
    a564:	|      .short 0x040c
    a566:	|      movep.l d1,1158(a6)
    a56a:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a56c:	|      movea.l 4(sp),a0
    a570:	|      clr.b 116(a0)
    a574:	|      movea.l 4(sp),a0
    a578:	|      move.b 116(a0),d0
    a57c:	|      movea.l 4(sp),a0
    a580:	|      move.b d0,115(a0)
    a584:	|      movea.l 4(sp),a0
    a588:	|      move.b 115(a0),d0
    a58c:	|      movea.l 4(sp),a0
    a590:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    a594:	|      movea.l 4(sp),a0
    a598:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    a59c:	|      movea.l 4(sp),a0
    a5a0:	|      move.b #64,118(a0)
			break;
    a5a6:	|  /-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a5aa:	|  |   movea.l 4(sp),a0
    a5ae:	|  |   clr.b 116(a0)
    a5b2:	|  |   movea.l 4(sp),a0
    a5b6:	|  |   move.b 116(a0),d0
    a5ba:	|  |   movea.l 4(sp),a0
    a5be:	|  |   move.b d0,115(a0)
    a5c2:	|  |   movea.l 4(sp),a0
    a5c6:	|  |   move.b 115(a0),d0
    a5ca:	|  |   movea.l 4(sp),a0
    a5ce:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    a5d2:	|  |   movea.l 4(sp),a0
    a5d6:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    a5da:	|  |   movea.l 4(sp),a0
    a5de:	|  |   move.b #-128,118(a0)
			break;
    a5e4:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a5e8:	|  |   movea.l 4(sp),a0
    a5ec:	|  |   clr.b 116(a0)
    a5f0:	|  |   movea.l 4(sp),a0
    a5f4:	|  |   move.b 116(a0),d0
    a5f8:	|  |   movea.l 4(sp),a0
    a5fc:	|  |   move.b d0,115(a0)
    a600:	|  |   movea.l 4(sp),a0
    a604:	|  |   move.b 115(a0),d0
    a608:	|  |   movea.l 4(sp),a0
    a60c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    a610:	|  |   movea.l 4(sp),a0
    a614:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    a618:	|  |   movea.l 4(sp),a0
    a61c:	|  |   move.b #-64,118(a0)
			break;
    a622:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a626:	|  |   movea.l 4(sp),a0
    a62a:	|  |   clr.b 116(a0)
    a62e:	|  |   movea.l 4(sp),a0
    a632:	|  |   move.b 116(a0),d0
    a636:	|  |   movea.l 4(sp),a0
    a63a:	|  |   move.b d0,115(a0)
    a63e:	|  |   movea.l 4(sp),a0
    a642:	|  |   move.b 115(a0),d0
    a646:	|  |   movea.l 4(sp),a0
    a64a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    a64e:	|  |   movea.l 4(sp),a0
    a652:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    a656:	|  |   movea.l 4(sp),a0
    a65a:	|  |   move.b #-2,118(a0)
			break;
    a660:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a664:	|  |   movea.l 4(sp),a0
    a668:	|  |   clr.b 116(a0)
    a66c:	|  |   movea.l 4(sp),a0
    a670:	|  |   move.b 116(a0),d0
    a674:	|  |   movea.l 4(sp),a0
    a678:	|  |   move.b d0,115(a0)
    a67c:	|  |   movea.l 4(sp),a0
    a680:	|  |   move.b 115(a0),d0
    a684:	|  |   movea.l 4(sp),a0
    a688:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    a68c:	|  |   movea.l 4(sp),a0
    a690:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    a696:	|  |   movea.l 4(sp),a0
    a69a:	|  |   clr.b 118(a0)
			break;
    a69e:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a6a2:	|  |   movea.l 4(sp),a0
    a6a6:	|  |   clr.b 116(a0)
    a6aa:	|  |   movea.l 4(sp),a0
    a6ae:	|  |   move.b 116(a0),d0
    a6b2:	|  |   movea.l 4(sp),a0
    a6b6:	|  |   move.b d0,115(a0)
    a6ba:	|  |   movea.l 4(sp),a0
    a6be:	|  |   move.b 115(a0),d0
    a6c2:	|  |   movea.l 4(sp),a0
    a6c6:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    a6ca:	|  |   movea.l 4(sp),a0
    a6ce:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    a6d4:	|  |   movea.l 4(sp),a0
    a6d8:	|  |   clr.b 118(a0)
			break;
    a6dc:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a6e0:	|  |   movea.l 4(sp),a0
    a6e4:	|  |   clr.b 116(a0)
    a6e8:	|  |   movea.l 4(sp),a0
    a6ec:	|  |   move.b 116(a0),d0
    a6f0:	|  |   movea.l 4(sp),a0
    a6f4:	|  |   move.b d0,115(a0)
    a6f8:	|  |   movea.l 4(sp),a0
    a6fc:	|  |   move.b 115(a0),d0
    a700:	|  |   movea.l 4(sp),a0
    a704:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    a708:	|  |   movea.l 4(sp),a0
    a70c:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    a712:	|  |   movea.l 4(sp),a0
    a716:	|  |   clr.b 118(a0)
			break;
    a71a:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a71e:	|  |   movea.l 4(sp),a0
    a722:	|  |   clr.b 116(a0)
    a726:	|  |   movea.l 4(sp),a0
    a72a:	|  |   move.b 116(a0),d0
    a72e:	|  |   movea.l 4(sp),a0
    a732:	|  |   move.b d0,115(a0)
    a736:	|  |   movea.l 4(sp),a0
    a73a:	|  |   move.b 115(a0),d0
    a73e:	|  |   movea.l 4(sp),a0
    a742:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    a746:	|  |   movea.l 4(sp),a0
    a74a:	|  |   st 117(a0)
			moveMe->transparency = 0;
    a74e:	|  |   movea.l 4(sp),a0
    a752:	|  |   clr.b 118(a0)
			break;
    a756:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a75a:	|  |   movea.l 4(sp),a0
    a75e:	|  |   clr.b 116(a0)
    a762:	|  |   movea.l 4(sp),a0
    a766:	|  |   move.b 116(a0),d0
    a76a:	|  |   movea.l 4(sp),a0
    a76e:	|  |   move.b d0,115(a0)
    a772:	|  |   movea.l 4(sp),a0
    a776:	|  |   move.b 115(a0),d0
    a77a:	|  |   movea.l 4(sp),a0
    a77e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    a782:	|  |   movea.l 4(sp),a0
    a786:	|  |   st 117(a0)
			moveMe->transparency = 64;
    a78a:	|  |   movea.l 4(sp),a0
    a78e:	|  |   move.b #64,118(a0)
			break;
    a794:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a798:	|  |   movea.l 4(sp),a0
    a79c:	|  |   clr.b 116(a0)
    a7a0:	|  |   movea.l 4(sp),a0
    a7a4:	|  |   move.b 116(a0),d0
    a7a8:	|  |   movea.l 4(sp),a0
    a7ac:	|  |   move.b d0,115(a0)
    a7b0:	|  |   movea.l 4(sp),a0
    a7b4:	|  |   move.b 115(a0),d0
    a7b8:	|  |   movea.l 4(sp),a0
    a7bc:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    a7c0:	|  |   movea.l 4(sp),a0
    a7c4:	|  |   st 117(a0)
			moveMe->transparency = 128;
    a7c8:	|  |   movea.l 4(sp),a0
    a7cc:	|  |   move.b #-128,118(a0)
			break;
    a7d2:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a7d6:	|  |   movea.l 4(sp),a0
    a7da:	|  |   clr.b 116(a0)
    a7de:	|  |   movea.l 4(sp),a0
    a7e2:	|  |   move.b 116(a0),d0
    a7e6:	|  |   movea.l 4(sp),a0
    a7ea:	|  |   move.b d0,115(a0)
    a7ee:	|  |   movea.l 4(sp),a0
    a7f2:	|  |   move.b 115(a0),d0
    a7f6:	|  |   movea.l 4(sp),a0
    a7fa:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    a7fe:	|  |   movea.l 4(sp),a0
    a802:	|  |   st 117(a0)
			moveMe->transparency = 192;
    a806:	|  |   movea.l 4(sp),a0
    a80a:	|  |   move.b #-64,118(a0)
			break;
    a810:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a814:	|  |   movea.l 4(sp),a0
    a818:	|  |   move.b #-128,116(a0)
    a81e:	|  |   movea.l 4(sp),a0
    a822:	|  |   move.b 116(a0),d0
    a826:	|  |   movea.l 4(sp),a0
    a82a:	|  |   move.b d0,115(a0)
    a82e:	|  |   movea.l 4(sp),a0
    a832:	|  |   move.b 115(a0),d0
    a836:	|  |   movea.l 4(sp),a0
    a83a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    a83e:	|  |   movea.l 4(sp),a0
    a842:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    a848:	|  |   movea.l 4(sp),a0
    a84c:	|  |   clr.b 118(a0)
			break;
    a850:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a854:	|  |   movea.l 4(sp),a0
    a858:	|  |   move.b #-128,116(a0)
    a85e:	|  |   movea.l 4(sp),a0
    a862:	|  |   move.b 116(a0),d0
    a866:	|  |   movea.l 4(sp),a0
    a86a:	|  |   move.b d0,115(a0)
    a86e:	|  |   movea.l 4(sp),a0
    a872:	|  |   move.b 115(a0),d0
    a876:	|  |   movea.l 4(sp),a0
    a87a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    a87e:	|  |   movea.l 4(sp),a0
    a882:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    a888:	|  |   movea.l 4(sp),a0
    a88c:	|  |   clr.b 118(a0)
			break;
    a890:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a894:	|  |   movea.l 4(sp),a0
    a898:	|  |   move.b #-128,116(a0)
    a89e:	|  |   movea.l 4(sp),a0
    a8a2:	|  |   move.b 116(a0),d0
    a8a6:	|  |   movea.l 4(sp),a0
    a8aa:	|  |   move.b d0,115(a0)
    a8ae:	|  |   movea.l 4(sp),a0
    a8b2:	|  |   move.b 115(a0),d0
    a8b6:	|  |   movea.l 4(sp),a0
    a8ba:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    a8be:	|  |   movea.l 4(sp),a0
    a8c2:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    a8c8:	|  |   movea.l 4(sp),a0
    a8cc:	|  |   clr.b 118(a0)
			break;
    a8d0:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a8d4:	|  |   movea.l 4(sp),a0
    a8d8:	|  |   move.b #-128,116(a0)
    a8de:	|  |   movea.l 4(sp),a0
    a8e2:	|  |   move.b 116(a0),d0
    a8e6:	|  |   movea.l 4(sp),a0
    a8ea:	|  |   move.b d0,115(a0)
    a8ee:	|  |   movea.l 4(sp),a0
    a8f2:	|  |   move.b 115(a0),d0
    a8f6:	|  |   movea.l 4(sp),a0
    a8fa:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    a8fe:	|  |   movea.l 4(sp),a0
    a902:	|  |   st 117(a0)
			moveMe->transparency = 0;
    a906:	|  |   movea.l 4(sp),a0
    a90a:	|  |   clr.b 118(a0)
			break;
    a90e:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    a912:	|  |   movea.l 4(sp),a0
    a916:	|  |   st 116(a0)
    a91a:	|  |   movea.l 4(sp),a0
    a91e:	|  |   move.b 116(a0),d0
    a922:	|  |   movea.l 4(sp),a0
    a926:	|  |   move.b d0,115(a0)
    a92a:	|  |   movea.l 4(sp),a0
    a92e:	|  |   move.b 115(a0),d0
    a932:	|  |   movea.l 4(sp),a0
    a936:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    a93a:	|  |   movea.l 4(sp),a0
    a93e:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    a944:	|  |   movea.l 4(sp),a0
    a948:	|  |   clr.b 118(a0)
			break;
    a94c:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    a950:	|  |   movea.l 4(sp),a0
    a954:	|  |   st 116(a0)
    a958:	|  |   movea.l 4(sp),a0
    a95c:	|  |   move.b 116(a0),d0
    a960:	|  |   movea.l 4(sp),a0
    a964:	|  |   move.b d0,115(a0)
    a968:	|  |   movea.l 4(sp),a0
    a96c:	|  |   move.b 115(a0),d0
    a970:	|  |   movea.l 4(sp),a0
    a974:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    a978:	|  |   movea.l 4(sp),a0
    a97c:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    a982:	|  |   movea.l 4(sp),a0
    a986:	|  |   clr.b 118(a0)
			break;
    a98a:	|  +-- bra.w aa3e <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    a98e:	|  |   movea.l 4(sp),a0
    a992:	|  |   st 116(a0)
    a996:	|  |   movea.l 4(sp),a0
    a99a:	|  |   move.b 116(a0),d0
    a99e:	|  |   movea.l 4(sp),a0
    a9a2:	|  |   move.b d0,115(a0)
    a9a6:	|  |   movea.l 4(sp),a0
    a9aa:	|  |   move.b 115(a0),d0
    a9ae:	|  |   movea.l 4(sp),a0
    a9b2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    a9b6:	|  |   movea.l 4(sp),a0
    a9ba:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    a9c0:	|  |   movea.l 4(sp),a0
    a9c4:	|  |   clr.b 118(a0)
			break;
    a9c8:	|  +-- bra.s aa3e <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    a9ca:	|  |   movea.l 4(sp),a0
    a9ce:	|  |   st 116(a0)
    a9d2:	|  |   movea.l 4(sp),a0
    a9d6:	|  |   move.b 116(a0),d0
    a9da:	|  |   movea.l 4(sp),a0
    a9de:	|  |   move.b d0,115(a0)
    a9e2:	|  |   movea.l 4(sp),a0
    a9e6:	|  |   move.b 115(a0),d0
    a9ea:	|  |   movea.l 4(sp),a0
    a9ee:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    a9f2:	|  |   movea.l 4(sp),a0
    a9f6:	|  |   st 117(a0)
			moveMe->transparency = 0;
    a9fa:	|  |   movea.l 4(sp),a0
    a9fe:	|  |   clr.b 118(a0)
			break;
    aa02:	|  +-- bra.s aa3e <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    aa04:	\--|-> movea.l 4(sp),a0
    aa08:	   |   clr.b 116(a0)
    aa0c:	   |   movea.l 4(sp),a0
    aa10:	   |   move.b 116(a0),d0
    aa14:	   |   movea.l 4(sp),a0
    aa18:	   |   move.b d0,115(a0)
    aa1c:	   |   movea.l 4(sp),a0
    aa20:	   |   move.b 115(a0),d0
    aa24:	   |   movea.l 4(sp),a0
    aa28:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    aa2c:	   |   movea.l 4(sp),a0
    aa30:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    aa34:	   |   movea.l 4(sp),a0
    aa38:	   |   clr.b 118(a0)
			break;
    aa3c:	   |   nop
	}
}
    aa3e:	   \-> nop
    aa40:	       rts

0000aa42 <shufflePeople>:

void shufflePeople () {
    aa42:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    aa46:	             move.l #110522,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    aa4e:	             move.l 1afba <allPeople>,d0
    aa54:	/----------- beq.w ab2a <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    aa58:	|     /----- bra.w ab1a <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    aa5c:	|  /--|----> movea.l 16(sp),a0
    aa60:	|  |  |      movea.l (a0),a0
    aa62:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    aa68:	|  |  |      movea.l 16(sp),a0
    aa6c:	|  |  |      movea.l (a0),a0
    aa6e:	|  |  |      move.l 106(a0),d0
    aa72:	|  |  |      moveq #1,d1
    aa74:	|  |  |      and.l d1,d0
    aa76:	|  |  |  /-- beq.s aa8e <shufflePeople+0x4c>
    aa78:	|  |  |  |   move.l #1148846080,-(sp)
    aa7e:	|  |  |  |   move.l 16(sp),-(sp)
    aa82:	|  |  |  |   jsr 159e8 <__addsf3>
    aa88:	|  |  |  |   addq.l #8,sp
    aa8a:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    aa8e:	|  |  |  \-> movea.l 16(sp),a0
    aa92:	|  |  |      movea.l (a0),a0
    aa94:	|  |  |      movea.l 24(a0),a0
    aa98:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    aa9e:	|  |  |      movea.l 16(sp),a0
    aaa2:	|  |  |      movea.l (a0),a0
    aaa4:	|  |  |      movea.l 24(a0),a0
    aaa8:	|  |  |      move.l 106(a0),d0
    aaac:	|  |  |      moveq #1,d1
    aaae:	|  |  |      and.l d1,d0
    aab0:	|  |  |  /-- beq.s aac8 <shufflePeople+0x86>
    aab2:	|  |  |  |   move.l #1148846080,-(sp)
    aab8:	|  |  |  |   move.l 12(sp),-(sp)
    aabc:	|  |  |  |   jsr 159e8 <__addsf3>
    aac2:	|  |  |  |   addq.l #8,sp
    aac4:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    aac8:	|  |  |  \-> move.l 8(sp),-(sp)
    aacc:	|  |  |      move.l 16(sp),-(sp)
    aad0:	|  |  |      jsr 15da2 <__gtsf2>
    aad6:	|  |  |      addq.l #8,sp
    aad8:	|  |  |      tst.l d0
    aada:	|  |  |  /-- ble.s ab0c <shufflePeople+0xca>
			A = (*thisReference);
    aadc:	|  |  |  |   movea.l 16(sp),a0
    aae0:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    aae4:	|  |  |  |   movea.l 16(sp),a0
    aae8:	|  |  |  |   movea.l (a0),a0
    aaea:	|  |  |  |   move.l 24(a0),(sp)
			A->next = B->next;
    aaee:	|  |  |  |   movea.l (sp),a0
    aaf0:	|  |  |  |   move.l 24(a0),d0
    aaf4:	|  |  |  |   movea.l 4(sp),a0
    aaf8:	|  |  |  |   move.l d0,24(a0)
			B->next = A;
    aafc:	|  |  |  |   movea.l (sp),a0
    aafe:	|  |  |  |   move.l 4(sp),24(a0)
			(*thisReference) = B;
    ab04:	|  |  |  |   movea.l 16(sp),a0
    ab08:	|  |  |  |   move.l (sp),(a0)
    ab0a:	|  |  +--|-- bra.s ab1a <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    ab0c:	|  |  |  \-> movea.l 16(sp),a0
    ab10:	|  |  |      move.l (a0),d0
    ab12:	|  |  |      moveq #24,d1
    ab14:	|  |  |      add.l d0,d1
    ab16:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    ab1a:	|  |  \----> movea.l 16(sp),a0
    ab1e:	|  |         movea.l (a0),a0
    ab20:	|  |         move.l 24(a0),d0
    ab24:	|  \-------- bne.w aa5c <shufflePeople+0x1a>
    ab28:	|        /-- bra.s ab2c <shufflePeople+0xea>
	if (!allPeople) return;
    ab2a:	\--------|-> nop
		}
	}
}
    ab2c:	         \-> lea 20(sp),sp
    ab30:	             rts

0000ab32 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    ab32:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    ab34:	       tst.l 8(sp)
    ab38:	   /-- bgt.s ab3e <setCharacterWalkSpeed+0xc>
    ab3a:	   |   clr.w d0
    ab3c:	/--|-- bra.s ab5c <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ab3e:	|  \-> move.l 12(sp),-(sp)
    ab42:	|      jsr 959a <findPerson>
    ab48:	|      addq.l #4,sp
    ab4a:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    ab4c:	|  /-- bne.s ab52 <setCharacterWalkSpeed+0x20>
    ab4e:	|  |   clr.w d0
    ab50:	+--|-- bra.s ab5c <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    ab52:	|  \-> movea.l (sp),a0
    ab54:	|      move.l 8(sp),16(a0)
	return TRUE;
    ab5a:	|      moveq #1,d0
}
    ab5c:	\----> addq.l #4,sp
    ab5e:	       rts

0000ab60 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    ab60:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    ab62:	       move.l 8(sp),-(sp)
    ab66:	       jsr 959a <findPerson>
    ab6c:	       addq.l #4,sp
    ab6e:	       move.l d0,(sp)
    if (thisPerson) {
    ab70:	/----- beq.s ab90 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    ab72:	|      movea.l (sp),a0
    ab74:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    ab7a:	|      moveq #2,d0
    ab7c:	|      and.l 12(sp),d0
    ab80:	|  /-- beq.s ab8c <setPersonExtra+0x2c>
    ab82:	|  |   movea.l (sp),a0
    ab84:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    ab8c:	|  \-> moveq #1,d0
    ab8e:	|  /-- bra.s ab92 <setPersonExtra+0x32>
    }
    return FALSE;
    ab90:	\--|-> clr.w d0
}
    ab92:	   \-> addq.l #4,sp
    ab94:	       rts

0000ab96 <setScale>:


void setScale (short int h, short int d) {
    ab96:	subq.l #4,sp
    ab98:	move.l 8(sp),d1
    ab9c:	move.l 12(sp),d0
    aba0:	move.w d1,d1
    aba2:	move.w d1,2(sp)
    aba6:	move.w d0,d0
    aba8:	move.w d0,(sp)
	scaleHorizon = h;
    abaa:	move.w 2(sp),1a892 <scaleHorizon>
	scaleDivide = d;
    abb2:	move.w (sp),1a894 <scaleDivide>
}
    abb8:	nop
    abba:	addq.l #4,sp
    abbc:	rts

0000abbe <setShown>:

void setShown (BOOL h, int ob) {
    abbe:	    subq.l #8,sp
    abc0:	    move.l 12(sp),d0
    abc4:	    move.w d0,d0
    abc6:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    abca:	    move.l 16(sp),-(sp)
    abce:	    jsr 959a <findPerson>
    abd4:	    addq.l #4,sp
    abd6:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    abda:	/-- beq.s abe6 <setShown+0x28>
    abdc:	|   movea.l 4(sp),a0
    abe0:	|   move.w 2(sp),92(a0)
}
    abe6:	\-> nop
    abe8:	    addq.l #8,sp
    abea:	    rts

0000abec <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    abec:	       subq.l #8,sp
    abee:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    abf0:	       movea.l 16(sp),a0
    abf4:	       move.l 80(a0),d0
    abf8:	       move.l d0,d1
    abfa:	       addi.l #360,d1
    ac00:	       movea.l 16(sp),a0
    ac04:	       move.l 84(a0),d0
    ac08:	       move.l d1,d2
    ac0a:	       sub.l d0,d2
    ac0c:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    ac10:	       movea.l 16(sp),a0
    ac14:	       move.l 110(a0),d0
    ac18:	   /-- beq.s ac24 <spinStep+0x38>
    ac1a:	   |   movea.l 16(sp),a0
    ac1e:	   |   move.l 110(a0),d0
    ac22:	/--|-- bra.s ac3e <spinStep+0x52>
    ac24:	|  \-> movea.l 16(sp),a0
    ac28:	|      movea.l 68(a0),a0
    ac2c:	|      move.l 4(a0),d0
    ac30:	|      move.l d0,-(sp)
    ac32:	|      pea 168 <decodeFilename+0x50>
    ac36:	|      jsr 16236 <__divsi3>
    ac3c:	|      addq.l #8,sp
    ac3e:	\----> move.l d0,4(sp)
	while (diff > 180) {
    ac42:	   /-- bra.s ac4c <spinStep+0x60>
		diff -= 360;
    ac44:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    ac4c:	|  \-> cmpi.l #180,8(sp)
    ac54:	\----- bgt.s ac44 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    ac56:	       move.l 8(sp),d0
    ac5a:	       cmp.l 4(sp),d0
    ac5e:	   /-- blt.s ac7c <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    ac60:	   |   movea.l 16(sp),a0
    ac64:	   |   move.l 80(a0),d0
    ac68:	   |   sub.l 4(sp),d0
    ac6c:	   |   move.l d0,-(sp)
    ac6e:	   |   move.l 20(sp),-(sp)
    ac72:	   |   jsr ad5c <turnMeAngle>
    ac78:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    ac7a:	/--|-- bra.s acc2 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    ac7c:	|  \-> move.l 4(sp),d0
    ac80:	|      neg.l d0
    ac82:	|      cmp.l 8(sp),d0
    ac86:	|  /-- blt.s aca4 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    ac88:	|  |   movea.l 16(sp),a0
    ac8c:	|  |   move.l 80(a0),d0
    ac90:	|  |   add.l 4(sp),d0
    ac94:	|  |   move.l d0,-(sp)
    ac96:	|  |   move.l 20(sp),-(sp)
    ac9a:	|  |   jsr ad5c <turnMeAngle>
    aca0:	|  |   addq.l #8,sp
}
    aca2:	+--|-- bra.s acc2 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    aca4:	|  \-> movea.l 16(sp),a0
    aca8:	|      move.l 84(a0),d0
    acac:	|      move.l d0,-(sp)
    acae:	|      move.l 20(sp),-(sp)
    acb2:	|      jsr ad5c <turnMeAngle>
    acb8:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    acba:	|      movea.l 16(sp),a0
    acbe:	|      clr.w 54(a0)
}
    acc2:	\----> nop
    acc4:	       move.l (sp)+,d2
    acc6:	       addq.l #8,sp
    acc8:	       rts

0000acca <stopPerson>:


BOOL stopPerson (int o) {
    acca:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    accc:	       move.l 8(sp),-(sp)
    acd0:	       jsr 959a <findPerson>
    acd6:	       addq.l #4,sp
    acd8:	       move.l d0,(sp)
    if (moveMe)
    acda:	/----- beq.s ad18 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    acdc:	|      movea.l (sp),a0
    acde:	|      move.l 56(a0),d0
    ace2:	+----- beq.s ad18 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    ace4:	|      movea.l (sp),a0
    ace6:	|      move.l 56(a0),d0
    acea:	|      move.l d0,-(sp)
    acec:	|      jsr 363e <abortFunction>
    acf2:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    acf4:	|      movea.l (sp),a0
    acf6:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    acfa:	|      movea.l (sp),a0
    acfc:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    ad00:	|      movea.l (sp),a0
    ad02:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    ad06:	|      clr.l -(sp)
    ad08:	|      move.l 4(sp),-(sp)
    ad0c:	|      jsr 703a <setFrames>
    ad12:	|      addq.l #8,sp
            return TRUE;
    ad14:	|      moveq #1,d0
    ad16:	|  /-- bra.s ad1a <stopPerson+0x50>
        }
    return FALSE;
    ad18:	\--|-> clr.w d0
}
    ad1a:	   \-> addq.l #4,sp
    ad1c:	       rts

0000ad1e <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    ad1e:	       subq.l #8,sp
	int total = 0;
    ad20:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    ad24:	       clr.l (sp)
    ad26:	   /-- bra.s ad48 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    ad28:	/--|-> movea.l 12(sp),a0
    ad2c:	|  |   movea.l 4(a0),a0
    ad30:	|  |   move.l (sp),d1
    ad32:	|  |   move.l d1,d0
    ad34:	|  |   add.l d0,d0
    ad36:	|  |   add.l d1,d0
    ad38:	|  |   add.l d0,d0
    ad3a:	|  |   add.l d0,d0
    ad3c:	|  |   adda.l d0,a0
    ad3e:	|  |   move.l 4(a0),d0
    ad42:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    ad46:	|  |   addq.l #1,(sp)
    ad48:	|  \-> movea.l 12(sp),a0
    ad4c:	|      move.l 8(a0),d0
    ad50:	|      cmp.l (sp),d0
    ad52:	\----- bgt.s ad28 <timeForAnim+0xa>
	}
	return total;
    ad54:	       move.l 4(sp),d0
}
    ad58:	       addq.l #8,sp
    ad5a:	       rts

0000ad5c <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    ad5c:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    ad5e:	       movea.l 8(sp),a0
    ad62:	       movea.l 68(a0),a0
    ad66:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    ad6a:	       movea.l 8(sp),a0
    ad6e:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    ad74:	       move.l (sp),-(sp)
    ad76:	       pea b4 <_start+0xb4>
    ad7a:	       jsr 16236 <__divsi3>
    ad80:	       addq.l #8,sp
    ad82:	       move.l d0,d1
    ad84:	       addi.l #180,d1
    ad8a:	       movea.l 8(sp),a0
    ad8e:	       move.l 88(a0),d0
    ad92:	       add.l d1,d0
    ad94:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    ad98:	   /-- bra.s ada2 <turnMeAngle+0x46>
    ad9a:	/--|-> addi.l #-360,12(sp)
    ada2:	|  \-> cmpi.l #359,12(sp)
    adaa:	\----- bgt.s ad9a <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    adac:	       move.l (sp),-(sp)
    adae:	       move.l 16(sp),-(sp)
    adb2:	       jsr 161b8 <__mulsi3>
    adb8:	       addq.l #8,sp
    adba:	       pea 168 <decodeFilename+0x50>
    adbe:	       move.l d0,-(sp)
    adc0:	       jsr 16236 <__divsi3>
    adc6:	       addq.l #8,sp
    adc8:	       movea.l 8(sp),a0
    adcc:	       move.l d0,94(a0)
}
    add0:	       nop
    add2:	       addq.l #4,sp
    add4:	       rts

0000add6 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    add6:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    add8:	          move.l 8(sp),-(sp)
    addc:	          jsr 959a <findPerson>
    ade2:	          addq.l #4,sp
    ade4:	          move.l d0,(sp)
    if (thisPerson) {
    ade6:	/-------- beq.s ae46 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    ade8:	|         movea.l (sp),a0
    adea:	|         move.l 56(a0),d0
    adee:	|     /-- beq.s ae00 <turnPersonToFace+0x2a>
    adf0:	|     |   movea.l (sp),a0
    adf2:	|     |   move.l 56(a0),d0
    adf6:	|     |   move.l d0,-(sp)
    adf8:	|     |   jsr 363e <abortFunction>
    adfe:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    ae00:	|     \-> movea.l (sp),a0
    ae02:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    ae06:	|         movea.l (sp),a0
    ae08:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    ae0c:	|         movea.l (sp),a0
    ae0e:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    ae12:	|         move.l 12(sp),-(sp)
    ae16:	|         move.l 4(sp),-(sp)
    ae1a:	|         jsr ad5c <turnMeAngle>
    ae20:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    ae22:	|         movea.l 1af5e <speech>,a0
    ae28:	|         move.l (a0),d0
    ae2a:	|         cmp.l (sp),d0
    ae2c:	|  /----- bne.s ae32 <turnPersonToFace+0x5c>
    ae2e:	|  |      moveq #2,d0
    ae30:	|  |  /-- bra.s ae34 <turnPersonToFace+0x5e>
    ae32:	|  \--|-> moveq #0,d0
    ae34:	|     \-> move.l d0,-(sp)
    ae36:	|         move.l 4(sp),-(sp)
    ae3a:	|         jsr 703a <setFrames>
    ae40:	|         addq.l #8,sp
        return TRUE;
    ae42:	|         moveq #1,d0
    ae44:	|     /-- bra.s ae48 <turnPersonToFace+0x72>
    }
    return FALSE;
    ae46:	\-----|-> clr.w d0
}
    ae48:	      \-> addq.l #4,sp
    ae4a:	          rts

0000ae4c <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    ae4c:	                lea -20(sp),sp
    ae50:	                move.l d3,-(sp)
    ae52:	                move.l d2,-(sp)
    ae54:	                move.l 36(sp),d0
    ae58:	                move.w d0,d0
    ae5a:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    ae5e:	                cmpi.w #-1,10(sp)
    ae64:	/-------------- bne.s ae6c <walkMe+0x20>
    ae66:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    ae6c:	>-------------> movea.l 32(sp),a0
    ae70:	|               move.l 36(a0),d0
    ae74:	|               move.l d0,-(sp)
    ae76:	|               jsr 15c36 <__floatsisf>
    ae7c:	|               addq.l #4,sp
    ae7e:	|               move.l d0,d1
    ae80:	|               movea.l 32(sp),a0
    ae84:	|               move.l (a0),d0
    ae86:	|               move.l d0,-(sp)
    ae88:	|               move.l d1,-(sp)
    ae8a:	|               jsr 15f2a <__subsf3>
    ae90:	|               addq.l #8,sp
    ae92:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    ae96:	|               movea.l 32(sp),a0
    ae9a:	|               move.l 40(a0),d0
    ae9e:	|               move.l d0,-(sp)
    aea0:	|               jsr 15c36 <__floatsisf>
    aea6:	|               addq.l #4,sp
    aea8:	|               move.l d0,d1
    aeaa:	|               movea.l 32(sp),a0
    aeae:	|               move.l 4(a0),d0
    aeb2:	|               move.l d0,-(sp)
    aeb4:	|               move.l d1,-(sp)
    aeb6:	|               jsr 15f2a <__subsf3>
    aebc:	|               addq.l #8,sp
    aebe:	|               move.l d0,-(sp)
    aec0:	|               move.l d0,-(sp)
    aec2:	|               jsr 159e8 <__addsf3>
    aec8:	|               addq.l #8,sp
    aeca:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    aece:	|               movea.l 32(sp),a0
    aed2:	|               move.l 20(a0),d2
    aed6:	|               movea.l 32(sp),a0
    aeda:	|               move.l 16(a0),d0
    aede:	|               move.l d0,-(sp)
    aee0:	|               jsr 15c36 <__floatsisf>
    aee6:	|               addq.l #4,sp
    aee8:	|               move.l d0,-(sp)
    aeea:	|               move.l d2,-(sp)
    aeec:	|               jsr 15ce8 <__mulsf3>
    aef2:	|               addq.l #8,sp
    aef4:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    aef8:	|               move.l 24(sp),-(sp)
    aefc:	|               jsr 15b4e <__extendsfdf2>
    af02:	|               addq.l #4,sp
    af04:	|               move.l #-1717986918,-(sp)
    af0a:	|               move.l #1070176665,-(sp)
    af10:	|               move.l d1,-(sp)
    af12:	|               move.l d0,-(sp)
    af14:	|               jsr 15e0e <__ltdf2>
    af1a:	|               lea 16(sp),sp
    af1e:	|               tst.l d0
    af20:	|           /-- bge.s af2a <walkMe+0xde>
    af22:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    af2a:	|           \-> move.l 20(sp),-(sp)
    af2e:	|               jsr 15bce <__fixsfsi>
    af34:	|               addq.l #4,sp
    af36:	|               move.l d0,-(sp)
    af38:	|               jsr 821c <TF_abs>
    af3e:	|               addq.l #4,sp
    af40:	|               move.l d0,d2
    af42:	|               move.l 16(sp),-(sp)
    af46:	|               jsr 15bce <__fixsfsi>
    af4c:	|               addq.l #4,sp
    af4e:	|               move.l d0,-(sp)
    af50:	|               jsr 821c <TF_abs>
    af56:	|               addq.l #4,sp
    af58:	|               cmp.l d2,d0
    af5a:	|        /----- bgt.s af7e <walkMe+0x132>
    af5c:	|        |      move.l 20(sp),-(sp)
    af60:	|        |      jsr 15bce <__fixsfsi>
    af66:	|        |      addq.l #4,sp
    af68:	|        |      move.l d0,-(sp)
    af6a:	|        |      jsr 821c <TF_abs>
    af70:	|        |      addq.l #4,sp
    af72:	|        |      move.l d0,-(sp)
    af74:	|        |      jsr 15c36 <__floatsisf>
    af7a:	|        |      addq.l #4,sp
    af7c:	|        |  /-- bra.s af9e <walkMe+0x152>
    af7e:	|        \--|-> move.l 16(sp),-(sp)
    af82:	|           |   jsr 15bce <__fixsfsi>
    af88:	|           |   addq.l #4,sp
    af8a:	|           |   move.l d0,-(sp)
    af8c:	|           |   jsr 821c <TF_abs>
    af92:	|           |   addq.l #4,sp
    af94:	|           |   move.l d0,-(sp)
    af96:	|           |   jsr 15c36 <__floatsisf>
    af9c:	|           |   addq.l #4,sp
    af9e:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    afa2:	|               move.l 12(sp),-(sp)
    afa6:	|               jsr 15bce <__fixsfsi>
    afac:	|               addq.l #4,sp
    afae:	|               move.l d0,-(sp)
    afb0:	|               jsr 821c <TF_abs>
    afb6:	|               addq.l #4,sp
    afb8:	|               move.l d0,-(sp)
    afba:	|               jsr 15c36 <__floatsisf>
    afc0:	|               addq.l #4,sp
    afc2:	|               move.l d0,-(sp)
    afc4:	|               move.l 28(sp),-(sp)
    afc8:	|               jsr 15e5c <__ltsf2>
    afce:	|               addq.l #8,sp
    afd0:	|               tst.l d0
    afd2:	|        /----- bge.w b084 <walkMe+0x238>
			if (thisPerson->spinning) {
    afd6:	|        |      movea.l 32(sp),a0
    afda:	|        |      move.w 54(a0),d0
    afde:	|        |  /-- beq.s affc <walkMe+0x1b0>
				spinStep(thisPerson);
    afe0:	|        |  |   move.l 32(sp),-(sp)
    afe4:	|        |  |   jsr abec <spinStep>
    afea:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    afec:	|        |  |   pea 1 <_start+0x1>
    aff0:	|        |  |   move.l 36(sp),-(sp)
    aff4:	|        |  |   jsr 703a <setFrames>
    affa:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    affc:	|        |  \-> move.l 24(sp),-(sp)
    b000:	|        |      move.l 16(sp),-(sp)
    b004:	|        |      jsr 15ae2 <__divsf3>
    b00a:	|        |      addq.l #8,sp
    b00c:	|        |      move.l d0,24(sp)
			if (move)
    b010:	|        |      tst.w 10(sp)
    b014:	|        |  /-- beq.s b07e <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    b016:	|        |  |   movea.l 32(sp),a0
    b01a:	|        |  |   move.l 4(a0),d2
    b01e:	|        |  |   move.l 24(sp),d0
    b022:	|        |  |   move.l d0,-(sp)
    b024:	|        |  |   move.l d0,-(sp)
    b026:	|        |  |   jsr 159e8 <__addsf3>
    b02c:	|        |  |   addq.l #8,sp
    b02e:	|        |  |   move.l d0,-(sp)
    b030:	|        |  |   move.l 20(sp),-(sp)
    b034:	|        |  |   jsr 15ae2 <__divsf3>
    b03a:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b03c:	|        |  |   move.l d0,-(sp)
    b03e:	|        |  |   move.l d2,-(sp)
    b040:	|        |  |   jsr 159e8 <__addsf3>
    b046:	|        |  |   addq.l #8,sp
    b048:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    b04a:	|        |  |   movea.l 32(sp),a0
    b04e:	|        |  |   move.l (a0),d3
    b050:	|        |  |   move.l 24(sp),-(sp)
    b054:	|        |  |   move.l 24(sp),-(sp)
    b058:	|        |  |   jsr 15ae2 <__divsf3>
    b05e:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b060:	|        |  |   move.l d0,-(sp)
    b062:	|        |  |   move.l d3,-(sp)
    b064:	|        |  |   jsr 159e8 <__addsf3>
    b06a:	|        |  |   addq.l #8,sp
    b06c:	|        |  |   move.l d2,-(sp)
    b06e:	|        |  |   move.l d0,-(sp)
    b070:	|        |  |   move.l 40(sp),-(sp)
    b074:	|        |  |   jsr 9ce2 <moveAndScale>
    b07a:	|        |  |   lea 12(sp),sp
			return TRUE;
    b07e:	|        |  \-> moveq #1,d0
    b080:	|  /-----|----- bra.w b132 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    b084:	|  |     \----> movea.l 32(sp),a0
    b088:	|  |            move.l 44(a0),d0
    b08c:	|  |            moveq #-1,d1
    b08e:	|  |            cmp.l d0,d1
    b090:	|  |        /-- bne.s b0c8 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    b092:	|  |        |   movea.l 32(sp),a0
    b096:	|  |        |   move.l 98(a0),d0
    b09a:	|  |        |   moveq #-1,d1
    b09c:	|  |        |   cmp.l d0,d1
    b09e:	|  |  /-----|-- beq.s b0dc <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    b0a0:	|  |  |     |   movea.l 32(sp),a0
    b0a4:	|  |  |     |   move.l 98(a0),d0
    b0a8:	|  |  |     |   movea.l 32(sp),a0
    b0ac:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    b0b0:	|  |  |     |   movea.l 32(sp),a0
    b0b4:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    b0ba:	|  |  |     |   move.l 32(sp),-(sp)
    b0be:	|  |  |     |   jsr abec <spinStep>
    b0c4:	|  |  |     |   addq.l #4,sp
			}
			break;
    b0c6:	|  |  +-----|-- bra.s b0dc <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    b0c8:	|  |  |     \-> move.l 32(sp),-(sp)
    b0cc:	|  |  |         jsr 898c <doBorderStuff>
    b0d2:	|  |  |         addq.l #4,sp
    b0d4:	|  |  |         tst.w d0
    b0d6:	|  |  |  /----- beq.s b0e0 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b0d8:	\--|--|--|----- bra.w ae6c <walkMe+0x20>
			break;
    b0dc:	   |  \--|----> nop
    b0de:	   |     |  /-- bra.s b0e2 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    b0e0:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    b0e2:	   |        \-> movea.l 32(sp),a0
    b0e6:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    b0ea:	   |            clr.l -(sp)
    b0ec:	   |            move.l 36(sp),-(sp)
    b0f0:	   |            jsr 703a <setFrames>
    b0f6:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    b0f8:	   |            movea.l 32(sp),a0
    b0fc:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    b100:	   |            move.l d0,-(sp)
    b102:	   |            jsr 15c36 <__floatsisf>
    b108:	   |            addq.l #4,sp
    b10a:	   |            move.l d0,d2
				 thisPerson->walkToX,
    b10c:	   |            movea.l 32(sp),a0
    b110:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    b114:	   |            move.l d0,-(sp)
    b116:	   |            jsr 15c36 <__floatsisf>
    b11c:	   |            addq.l #4,sp
    b11e:	   |            move.l d2,-(sp)
    b120:	   |            move.l d0,-(sp)
    b122:	   |            move.l 40(sp),-(sp)
    b126:	   |            jsr 9ce2 <moveAndScale>
    b12c:	   |            lea 12(sp),sp
	return FALSE;
    b130:	   |            clr.w d0
}
    b132:	   \----------> move.l (sp)+,d2
    b134:	                move.l (sp)+,d3
    b136:	                lea 20(sp),sp
    b13a:	                rts

0000b13c <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    b13c:	       subq.l #8,sp
    b13e:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    b140:	   /-- bra.s b170 <clearStackLib+0x34>
		k = stackLib;
    b142:	/--|-> move.l 1afe6 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    b14a:	|  |   movea.l 1afe6 <stackLib>,a0
    b150:	|  |   move.l 4(a0),d0
    b154:	|  |   move.l d0,1afe6 <stackLib>
		FreeVec(k);
    b15a:	|  |   move.l 8(sp),4(sp)
    b160:	|  |   move.l 1af02 <SysBase>,d0
    b166:	|  |   movea.l d0,a6
    b168:	|  |   movea.l 4(sp),a1
    b16c:	|  |   jsr -690(a6)
	while (stackLib) {
    b170:	|  \-> move.l 1afe6 <stackLib>,d0
    b176:	\----- bne.s b142 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    b178:	       clr.l 1afe2 <stackLibTotal>
}
    b17e:	       nop
    b180:	       movea.l (sp)+,a6
    b182:	       addq.l #8,sp
    b184:	       rts

0000b186 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    b186:	          lea -128(sp),sp
    b18a:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    b18e:	      /-- bra.s b1a0 <loadGame+0x1a>
    b190:	   /--|-> move.l 1ae9a <allRunningFunctions>,d0
    b196:	   |  |   move.l d0,-(sp)
    b198:	   |  |   jsr 4658 <finishFunction>
    b19e:	   |  |   addq.l #4,sp
    b1a0:	   |  \-> move.l 1ae9a <allRunningFunctions>,d0
    b1a6:	   \----- bne.s b190 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    b1a8:	          pea 1afea <ssgVersion>
    b1ae:	          pea 1784e <PutChar+0x1580>
    b1b4:	          pea 41 <_start+0x41>
    b1b8:	          pea 53 <_start+0x53>
    b1bc:	          move.l 160(sp),-(sp)
    b1c0:	          jsr 53e0 <openAndVerify>
    b1c6:	          lea 20(sp),sp
    b1ca:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    b1ce:	      /-- bne.s b1d6 <loadGame+0x50>
    b1d0:	      |   clr.w d0
    b1d2:	/-----|-- bra.w b47c <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    b1d6:	|     \-> move.l 112(sp),108(sp)
    b1dc:	|         lea 140(sp),a0
    b1e0:	|         lea -126(a0),a0
    b1e4:	|         move.l a0,120(sp)
    b1e8:	|         moveq #8,d0
    b1ea:	|         move.l d0,116(sp)
    b1ee:	|         move.l 1af0a <DOSBase>,d0
    b1f4:	|         movea.l d0,a6
    b1f6:	|         move.l 108(sp),d1
    b1fa:	|         move.l 120(sp),d2
    b1fe:	|         move.l 116(sp),d3
    b202:	|         jsr -42(a6)
    b206:	|         move.l d0,132(sp)
    b20a:	|         move.l 132(sp),d0
    b20e:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    b212:	|         moveq #8,d0
    b214:	|         cmp.l 128(sp),d0
    b218:	|     /-- beq.s b228 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    b21a:	|     |   pea 1786f <PutChar+0x15a1>
    b220:	|     |   jsr 157fa <KPrintF>
    b226:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b228:	|     \-> move.l 14(sp),d1
    b22c:	|         move.l 1aea4 <fileTime>,d0
    b232:	|         cmp.l d1,d0
    b234:	|     /-- bne.s b244 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    b236:	|     |   move.l 18(sp),d1
    b23a:	|     |   move.l 1aea8 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b240:	|     |   cmp.l d1,d0
    b242:	|  /--|-- beq.s b264 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    b244:	|  |  \-> move.l 144(sp),-(sp)
    b248:	|  |      pea 1788b <PutChar+0x15bd>
    b24e:	|  |      pea 17952 <PutChar+0x1684>
    b254:	|  |      jsr 157fa <KPrintF>
    b25a:	|  |      lea 12(sp),sp
		return FALSE; 
    b25e:	|  |      clr.w d0
    b260:	+--|----- bra.w b47c <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    b264:	|  \----> move.l 112(sp),124(sp)
    b26a:	|         move.l 1af0a <DOSBase>,d0
    b270:	|         movea.l d0,a6
    b272:	|         move.l 124(sp),d1
    b276:	|         jsr -306(a6)
    b27a:	|         move.l d0,136(sp)
    b27e:	|         move.l 136(sp),d0
    b282:	|         move.l d0,d0
    b284:	|         move.w d0,1a75c <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    b28a:	|         move.l 112(sp),100(sp)
    b290:	|         move.l 1af0a <DOSBase>,d0
    b296:	|         movea.l d0,a6
    b298:	|         move.l 100(sp),d1
    b29c:	|         jsr -306(a6)
    b2a0:	|         move.l d0,96(sp)
    b2a4:	|         move.l 96(sp),d0
    b2a8:	|         move.l d0,d0
    b2aa:	|         move.w d0,1aea2 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    b2b0:	|         move.l 112(sp),92(sp)
    b2b6:	|         move.l 1af0a <DOSBase>,d0
    b2bc:	|         movea.l d0,a6
    b2be:	|         move.l 92(sp),d1
    b2c2:	|         jsr -306(a6)
    b2c6:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    b2ca:	|         move.l 112(sp),84(sp)
    b2d0:	|         move.l 1af0a <DOSBase>,d0
    b2d6:	|         movea.l d0,a6
    b2d8:	|         move.l 84(sp),d1
    b2dc:	|         jsr -306(a6)
    b2e0:	|         move.l d0,80(sp)
    b2e4:	|         move.l 80(sp),d0
    b2e8:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    b2ec:	|     /-- beq.s b320 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    b2ee:	|     |   move.l 112(sp),-(sp)
    b2f2:	|     |   jsr 6bc <get2bytes>
    b2f8:	|     |   addq.l #4,sp
    b2fa:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    b2fe:	|     |   move.l 112(sp),-(sp)
    b302:	|     |   jsr 6bc <get2bytes>
    b308:	|     |   addq.l #4,sp
    b30a:	|     |   move.l d0,1b04e <fontHeight>
		charOrder = readString(fp);		
    b310:	|     |   move.l 112(sp),-(sp)
    b314:	|     |   jsr b02 <readString>
    b31a:	|     |   addq.l #4,sp
    b31c:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    b320:	|     \-> move.l 104(sp),70(sp)
    b326:	|         move.l 1af02 <SysBase>,d0
    b32c:	|         movea.l d0,a6
    b32e:	|         movea.l 70(sp),a1
    b332:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    b336:	|         move.l 112(sp),-(sp)
    b33a:	|         jsr 854 <getSigned>
    b340:	|         addq.l #4,sp
    b342:	|         move.w d0,1ae04 <fontSpace>

	killAllPeople ();
    b348:	|         jsr 9984 <killAllPeople>
	killAllRegions ();
    b34e:	|         jsr 141ac <killAllRegions>

	int camerX = get2bytes (fp);
    b354:	|         move.l 112(sp),-(sp)
    b358:	|         jsr 6bc <get2bytes>
    b35e:	|         addq.l #4,sp
    b360:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    b364:	|         move.l 112(sp),-(sp)
    b368:	|         jsr 6bc <get2bytes>
    b36e:	|         addq.l #4,sp
    b370:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    b374:	|         move.l 112(sp),-(sp)
    b378:	|         jsr 7d8 <getFloat>
    b37e:	|         addq.l #4,sp
    b380:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    b384:	|         move.l 112(sp),54(sp)
    b38a:	|         move.l 1af0a <DOSBase>,d0
    b390:	|         movea.l d0,a6
    b392:	|         move.l 54(sp),d1
    b396:	|         jsr -306(a6)
    b39a:	|         move.l d0,50(sp)
    b39e:	|         move.l 50(sp),d0
    b3a2:	|         move.l d0,d0
    b3a4:	|         move.b d0,1a876 <brightnessLevel>

	loadHandlers (fp);
    b3aa:	|         move.l 112(sp),-(sp)
    b3ae:	|         jsr 5340 <loadHandlers>
    b3b4:	|         addq.l #4,sp
	loadRegions (fp);
    b3b6:	|         move.l 112(sp),-(sp)
    b3ba:	|         jsr 14208 <loadRegions>
    b3c0:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    b3c2:	|         moveq #12,d0
    b3c4:	|         move.l d0,46(sp)
    b3c8:	|         clr.l 42(sp)
    b3cc:	|         move.l 1af02 <SysBase>,d0
    b3d2:	|         movea.l d0,a6
    b3d4:	|         move.l 46(sp),d0
    b3d8:	|         move.l 42(sp),d1
    b3dc:	|         jsr -684(a6)
    b3e0:	|         move.l d0,38(sp)
    b3e4:	|         move.l 38(sp),d0
    b3e8:	|         move.l d0,1ae06 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    b3ee:	|         move.l 1ae06 <mouseCursorAnim>,d0
    b3f4:	|     /-- bne.s b408 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    b3f6:	|     |   pea 1795c <PutChar+0x168e>
    b3fc:	|     |   jsr 157fa <KPrintF>
    b402:	|     |   addq.l #4,sp
		return FALSE;
    b404:	|     |   clr.w d0
    b406:	+-----|-- bra.s b47c <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    b408:	|     \-> jsr c2fe <nosnapshot>
	if (FGetC (fp)) {
    b40e:	|         move.l 112(sp),34(sp)
    b414:	|         move.l 1af0a <DOSBase>,d0
    b41a:	|         movea.l d0,a6
    b41c:	|         move.l 34(sp),d1
    b420:	|         jsr -306(a6)
    b424:	|         move.l d0,30(sp)
    b428:	|         move.l 30(sp),d0
    b42c:	|     /-- beq.s b442 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    b42e:	|     |   move.l 112(sp),-(sp)
    b432:	|     |   jsr c37e <restoreSnapshot>
    b438:	|     |   addq.l #4,sp
    b43a:	|     |   tst.w d0
    b43c:	|     +-- bne.s b442 <loadGame+0x2bc>
    b43e:	|     |   clr.w d0
    b440:	+-----|-- bra.s b47c <loadGame+0x2f6>
	}

	Close (fp);
    b442:	|     \-> move.l 112(sp),26(sp)
    b448:	|         move.l 1af0a <DOSBase>,d0
    b44e:	|         movea.l d0,a6
    b450:	|         move.l 26(sp),d1
    b454:	|         jsr -36(a6)
    b458:	|         move.l d0,22(sp)
	clearStackLib ();
    b45c:	|         jsr b13c <clearStackLib>

	cameraX = camerX;
    b462:	|         move.l 66(sp),1b014 <cameraX>
	cameraY = camerY;
    b46a:	|         move.l 62(sp),1b018 <cameraY>
	cameraZoom = camerZ;
    b472:	|         move.l 58(sp),1a89e <cameraZoom>

	return TRUE;
    b47a:	|         moveq #1,d0
}
    b47c:	\-------> movem.l (sp)+,d2-d3/a6
    b480:	          lea 128(sp),sp
    b484:	          rts

0000b486 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    b486:	   /-> lea -64(sp),sp
    b48a:	   |   move.l a6,-(sp)
    b48c:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    b48e:	   |   movea.l 76(sp),a0
    b492:	   |   move.l (a0),d0
    b494:	   |   move.l 80(sp),-(sp)
    b498:	   |   move.l d0,-(sp)
    b49a:	   |   jsr 8d0 <put2bytes>
    b4a0:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    b4a2:	   |   movea.l 76(sp),a0
    b4a6:	   |   move.l 40(a0),d0
    b4aa:	/--|-- beq.s b4e6 <saveFunction+0x60>
		FPutC (fp, 1);
    b4ac:	|  |   move.l 80(sp),52(sp)
    b4b2:	|  |   moveq #1,d0
    b4b4:	|  |   move.l d0,48(sp)
    b4b8:	|  |   move.l 1af0a <DOSBase>,d0
    b4be:	|  |   movea.l d0,a6
    b4c0:	|  |   move.l 52(sp),d1
    b4c4:	|  |   move.l 48(sp),d2
    b4c8:	|  |   jsr -312(a6)
    b4cc:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    b4d0:	|  |   movea.l 76(sp),a0
    b4d4:	|  |   move.l 40(a0),d0
    b4d8:	|  |   move.l 80(sp),-(sp)
    b4dc:	|  |   move.l d0,-(sp)
    b4de:	|  \-- jsr b486 <saveFunction>(pc)
    b4e2:	|      addq.l #8,sp
    b4e4:	|  /-- bra.s b508 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    b4e6:	\--|-> move.l 80(sp),64(sp)
    b4ec:	   |   clr.l 60(sp)
    b4f0:	   |   move.l 1af0a <DOSBase>,d0
    b4f6:	   |   movea.l d0,a6
    b4f8:	   |   move.l 64(sp),d1
    b4fc:	   |   move.l 60(sp),d2
    b500:	   |   jsr -312(a6)
    b504:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    b508:	   \-> movea.l 76(sp),a0
    b50c:	       move.l 12(a0),d0
    b510:	       move.l 80(sp),-(sp)
    b514:	       move.l d0,-(sp)
    b516:	       jsr 958 <put4bytes>
    b51c:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    b51e:	       movea.l 76(sp),a0
    b522:	       move.l 36(a0),d0
    b526:	       move.l 80(sp),-(sp)
    b52a:	       move.l d0,-(sp)
    b52c:	       jsr 8d0 <put2bytes>
    b532:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    b534:	       move.l 80(sp),40(sp)
    b53a:	       movea.l 76(sp),a0
    b53e:	       move.w 54(a0),d0
    b542:	       movea.w d0,a0
    b544:	       move.l a0,36(sp)
    b548:	       move.l 1af0a <DOSBase>,d0
    b54e:	       movea.l d0,a6
    b550:	       move.l 40(sp),d1
    b554:	       move.l 36(sp),d2
    b558:	       jsr -312(a6)
    b55c:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    b560:	       move.l 80(sp),28(sp)
    b566:	       movea.l 76(sp),a0
    b56a:	       move.w 48(a0),d0
    b56e:	       movea.w d0,a0
    b570:	       move.l a0,24(sp)
    b574:	       move.l 1af0a <DOSBase>,d0
    b57a:	       movea.l d0,a6
    b57c:	       move.l 28(sp),d1
    b580:	       move.l 24(sp),d2
    b584:	       jsr -312(a6)
    b588:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    b58c:	       move.l 80(sp),16(sp)
    b592:	       movea.l 76(sp),a0
    b596:	       move.w 50(a0),d0
    b59a:	       movea.w d0,a0
    b59c:	       move.l a0,12(sp)
    b5a0:	       move.l 1af0a <DOSBase>,d0
    b5a6:	       movea.l d0,a6
    b5a8:	       move.l 16(sp),d1
    b5ac:	       move.l 12(sp),d2
    b5b0:	       jsr -312(a6)
    b5b4:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    b5b8:	       moveq #28,d0
    b5ba:	       add.l 76(sp),d0
    b5be:	       move.l 80(sp),-(sp)
    b5c2:	       move.l d0,-(sp)
    b5c4:	       jsr bd42 <saveVariable>
    b5ca:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    b5cc:	       movea.l 76(sp),a0
    b5d0:	       move.b 56(a0),d0
    b5d4:	   /-- beq.s b5e4 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    b5d6:	   |   pea 1797d <PutChar+0x16af>
    b5dc:	   |   jsr 157fa <KPrintF>
    b5e2:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    b5e4:	   \-> movea.l 76(sp),a0
    b5e8:	       move.l 24(a0),d0
    b5ec:	       move.l 80(sp),-(sp)
    b5f0:	       move.l d0,-(sp)
    b5f2:	       jsr bbb6 <saveStack>
    b5f8:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b5fa:	       clr.l 68(sp)
    b5fe:	   /-- bra.s b622 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    b600:	/--|-> movea.l 76(sp),a0
    b604:	|  |   move.l 20(a0),d1
    b608:	|  |   move.l 68(sp),d0
    b60c:	|  |   lsl.l #3,d0
    b60e:	|  |   add.l d1,d0
    b610:	|  |   move.l 80(sp),-(sp)
    b614:	|  |   move.l d0,-(sp)
    b616:	|  |   jsr bd42 <saveVariable>
    b61c:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b61e:	|  |   addq.l #1,68(sp)
    b622:	|  \-> movea.l 76(sp),a0
    b626:	|      move.l 8(a0),d0
    b62a:	|      cmp.l 68(sp),d0
    b62e:	\----- bgt.s b600 <saveFunction+0x17a>
	}
}
    b630:	       nop
    b632:	       nop
    b634:	       move.l (sp)+,d2
    b636:	       movea.l (sp)+,a6
    b638:	       lea 64(sp),sp
    b63c:	       rts

0000b63e <saveGame>:

BOOL saveGame (char * fname) {
    b63e:	          lea -272(sp),sp
    b642:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    b646:	          move.l 288(sp),268(sp)
    b64c:	          move.l #1006,264(sp)
    b654:	          move.l 1af0a <DOSBase>,d0
    b65a:	          movea.l d0,a6
    b65c:	          move.l 268(sp),d1
    b660:	          move.l 264(sp),d2
    b664:	          jsr -30(a6)
    b668:	          move.l d0,260(sp)
    b66c:	          move.l 260(sp),d0
    b670:	          move.l d0,256(sp)
	if (fp == NULL) {
    b674:	      /-- bne.s b68a <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    b676:	      |   pea 1799f <PutChar+0x16d1>
    b67c:	      |   jsr 157fa <KPrintF>
    b682:	      |   addq.l #4,sp
		return FALSE;
    b684:	      |   clr.w d0
    b686:	/-----|-- bra.w bbac <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    b68a:	|     \-> move.l 256(sp),252(sp)
    b690:	|         move.l #96700,248(sp)
    b698:	|         moveq #6,d0
    b69a:	|         move.l d0,244(sp)
    b69e:	|         move.l 1af0a <DOSBase>,d0
    b6a4:	|         movea.l d0,a6
    b6a6:	|         move.l 252(sp),d1
    b6aa:	|         move.l 248(sp),d2
    b6ae:	|         move.l 244(sp),d3
    b6b2:	|         jsr -48(a6)
    b6b6:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    b6ba:	|         move.l 256(sp),236(sp)
    b6c0:	|         clr.l 232(sp)
    b6c4:	|         move.l 1af0a <DOSBase>,d0
    b6ca:	|         movea.l d0,a6
    b6cc:	|         move.l 236(sp),d1
    b6d0:	|         move.l 232(sp),d2
    b6d4:	|         jsr -312(a6)
    b6d8:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    b6dc:	|         move.l 256(sp),224(sp)
    b6e2:	|         clr.l 220(sp)
    b6e6:	|         move.l 1af0a <DOSBase>,d0
    b6ec:	|         movea.l d0,a6
    b6ee:	|         move.l 224(sp),d1
    b6f2:	|         move.l 220(sp),d2
    b6f6:	|         jsr -312(a6)
    b6fa:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    b6fe:	|         move.l 256(sp),212(sp)
    b704:	|         moveq #2,d0
    b706:	|         move.l d0,208(sp)
    b70a:	|         move.l 1af0a <DOSBase>,d0
    b710:	|         movea.l d0,a6
    b712:	|         move.l 212(sp),d1
    b716:	|         move.l 208(sp),d2
    b71a:	|         jsr -312(a6)
    b71e:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    b722:	|         move.l 256(sp),200(sp)
    b728:	|         moveq #2,d0
    b72a:	|         move.l d0,196(sp)
    b72e:	|         move.l 1af0a <DOSBase>,d0
    b734:	|         movea.l d0,a6
    b736:	|         move.l 200(sp),d1
    b73a:	|         move.l 196(sp),d2
    b73e:	|         jsr -312(a6)
    b742:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    b746:	|         move.l 256(sp),188(sp)
    b74c:	|         move.l #110244,184(sp)
    b754:	|         moveq #8,d0
    b756:	|         move.l d0,180(sp)
    b75a:	|         move.l 1af0a <DOSBase>,d0
    b760:	|         movea.l d0,a6
    b762:	|         move.l 188(sp),d1
    b766:	|         move.l 184(sp),d2
    b76a:	|         move.l 180(sp),d3
    b76e:	|         jsr -48(a6)
    b772:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    b776:	|         move.l 256(sp),172(sp)
    b77c:	|         move.w 1a75c <allowAnyFilename>,d0
    b782:	|         movea.w d0,a0
    b784:	|         move.l a0,168(sp)
    b788:	|         move.l 1af0a <DOSBase>,d0
    b78e:	|         movea.l d0,a6
    b790:	|         move.l 172(sp),d1
    b794:	|         move.l 168(sp),d2
    b798:	|         jsr -312(a6)
    b79c:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    b7a0:	|         move.l 256(sp),160(sp)
    b7a6:	|         move.w 1aea2 <captureAllKeys>,d0
    b7ac:	|         movea.w d0,a0
    b7ae:	|         move.l a0,156(sp)
    b7b2:	|         move.l 1af0a <DOSBase>,d0
    b7b8:	|         movea.l d0,a6
    b7ba:	|         move.l 160(sp),d1
    b7be:	|         move.l 156(sp),d2
    b7c2:	|         jsr -312(a6)
    b7c6:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    b7ca:	|         move.l 256(sp),148(sp)
    b7d0:	|         moveq #1,d0
    b7d2:	|         move.l d0,144(sp)
    b7d6:	|         move.l 1af0a <DOSBase>,d0
    b7dc:	|         movea.l d0,a6
    b7de:	|         move.l 148(sp),d1
    b7e2:	|         move.l 144(sp),d2
    b7e6:	|         jsr -312(a6)
    b7ea:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    b7ee:	|         move.l 256(sp),136(sp)
    b7f4:	|         move.l 1b05a <fontTableSize>,d0
    b7fa:	|         sgt d0
    b7fc:	|         neg.b d0
    b7fe:	|         move.b d0,d0
    b800:	|         andi.l #255,d0
    b806:	|         move.l d0,132(sp)
    b80a:	|         move.l 1af0a <DOSBase>,d0
    b810:	|         movea.l d0,a6
    b812:	|         move.l 136(sp),d1
    b816:	|         move.l 132(sp),d2
    b81a:	|         jsr -312(a6)
    b81e:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    b822:	|         move.l 1b05a <fontTableSize>,d0
    b828:	|     /-- ble.s b866 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    b82a:	|     |   move.l 1b052 <loadedFontNum>,d0
    b830:	|     |   move.l 256(sp),-(sp)
    b834:	|     |   move.l d0,-(sp)
    b836:	|     |   jsr 8d0 <put2bytes>
    b83c:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    b83e:	|     |   move.l 1b04e <fontHeight>,d0
    b844:	|     |   move.l 256(sp),-(sp)
    b848:	|     |   move.l d0,-(sp)
    b84a:	|     |   jsr 8d0 <put2bytes>
    b850:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    b852:	|     |   move.l 1b056 <fontOrderString>,d0
    b858:	|     |   move.l 256(sp),-(sp)
    b85c:	|     |   move.l d0,-(sp)
    b85e:	|     |   jsr bd8 <writeString>
    b864:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    b866:	|     \-> move.w 1ae04 <fontSpace>,d0
    b86c:	|         movea.w d0,a0
    b86e:	|         move.l 256(sp),-(sp)
    b872:	|         move.l a0,-(sp)
    b874:	|         jsr a9c <putSigned>
    b87a:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    b87c:	|         move.l 1b014 <cameraX>,d0
    b882:	|         move.l 256(sp),-(sp)
    b886:	|         move.l d0,-(sp)
    b888:	|         jsr 8d0 <put2bytes>
    b88e:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    b890:	|         move.l 1b018 <cameraY>,d0
    b896:	|         move.l 256(sp),-(sp)
    b89a:	|         move.l d0,-(sp)
    b89c:	|         jsr 8d0 <put2bytes>
    b8a2:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    b8a4:	|         move.l 1a89e <cameraZoom>,d0
    b8aa:	|         move.l 256(sp),-(sp)
    b8ae:	|         move.l d0,-(sp)
    b8b0:	|         jsr a46 <putFloat>
    b8b6:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    b8b8:	|         move.l 256(sp),124(sp)
    b8be:	|         move.b 1a876 <brightnessLevel>,d0
    b8c4:	|         move.b d0,d0
    b8c6:	|         andi.l #255,d0
    b8cc:	|         move.l d0,120(sp)
    b8d0:	|         move.l 1af0a <DOSBase>,d0
    b8d6:	|         movea.l d0,a6
    b8d8:	|         move.l 124(sp),d1
    b8dc:	|         move.l 120(sp),d2
    b8e0:	|         jsr -312(a6)
    b8e4:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    b8e8:	|         move.l 256(sp),-(sp)
    b8ec:	|         jsr 58c4 <saveHandlers>
    b8f2:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    b8f4:	|         move.l 256(sp),-(sp)
    b8f8:	|         jsr 143c2 <saveRegions>
    b8fe:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    b900:	|         move.l 1ae06 <mouseCursorAnim>,d0
    b906:	|         move.l 256(sp),-(sp)
    b90a:	|         move.l d0,-(sp)
    b90c:	|         jsr 9ee6 <saveAnim>
    b912:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    b914:	|         move.l 1ae0a <mouseCursorFrameNum>,d0
    b91a:	|         move.l 256(sp),-(sp)
    b91e:	|         move.l d0,-(sp)
    b920:	|         jsr 8d0 <put2bytes>
    b926:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    b928:	|         move.l 1ae9a <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    b930:	|         clr.l 272(sp)
	while (thisFunction) {
    b934:	|     /-- bra.s b944 <saveGame+0x306>
		countFunctions ++;
    b936:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    b93a:	|  |  |   movea.l 276(sp),a0
    b93e:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    b944:	|  |  \-> tst.l 276(sp)
    b948:	|  \----- bne.s b936 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    b94a:	|         move.l 256(sp),-(sp)
    b94e:	|         move.l 276(sp),-(sp)
    b952:	|         jsr 8d0 <put2bytes>
    b958:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    b95a:	|         move.l 1ae9a <allRunningFunctions>,276(sp)
	while (thisFunction) {
    b962:	|     /-- bra.s b97e <saveGame+0x340>
		saveFunction (thisFunction, fp);
    b964:	|  /--|-> move.l 256(sp),-(sp)
    b968:	|  |  |   move.l 280(sp),-(sp)
    b96c:	|  |  |   jsr b486 <saveFunction>
    b972:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    b974:	|  |  |   movea.l 276(sp),a0
    b978:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    b97e:	|  |  \-> tst.l 276(sp)
    b982:	|  \----- bne.s b964 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    b984:	|         clr.l 280(sp)
    b988:	|     /-- bra.s b9aa <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    b98a:	|  /--|-> move.l 1aeb0 <globalVars>,d1
    b990:	|  |  |   move.l 280(sp),d0
    b994:	|  |  |   lsl.l #3,d0
    b996:	|  |  |   add.l d1,d0
    b998:	|  |  |   move.l 256(sp),-(sp)
    b99c:	|  |  |   move.l d0,-(sp)
    b99e:	|  |  |   jsr bd42 <saveVariable>
    b9a4:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    b9a6:	|  |  |   addq.l #1,280(sp)
    b9aa:	|  |  \-> move.l 1aeda <numGlobals>,d0
    b9b0:	|  |      cmp.l 280(sp),d0
    b9b4:	|  \----- bgt.s b98a <saveGame+0x34c>
	}

	savePeople (fp);
    b9b6:	|         move.l 256(sp),-(sp)
    b9ba:	|         jsr a00e <savePeople>
    b9c0:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    b9c2:	|         movea.l 1b06a <currentFloor>,a0
    b9c8:	|         move.l 8(a0),d0
    b9cc:	|  /----- beq.s ba0a <saveGame+0x3cc>
		FPutC (fp, 1);
    b9ce:	|  |      move.l 256(sp),100(sp)
    b9d4:	|  |      moveq #1,d0
    b9d6:	|  |      move.l d0,96(sp)
    b9da:	|  |      move.l 1af0a <DOSBase>,d0
    b9e0:	|  |      movea.l d0,a6
    b9e2:	|  |      move.l 100(sp),d1
    b9e6:	|  |      move.l 96(sp),d2
    b9ea:	|  |      jsr -312(a6)
    b9ee:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    b9f2:	|  |      movea.l 1b06a <currentFloor>,a0
    b9f8:	|  |      move.l (a0),d0
    b9fa:	|  |      move.l 256(sp),-(sp)
    b9fe:	|  |      move.l d0,-(sp)
    ba00:	|  |      jsr 8d0 <put2bytes>
    ba06:	|  |      addq.l #8,sp
    ba08:	|  |  /-- bra.s ba2c <saveGame+0x3ee>
	} else FPutC (fp, 0);
    ba0a:	|  \--|-> move.l 256(sp),112(sp)
    ba10:	|     |   clr.l 108(sp)
    ba14:	|     |   move.l 1af0a <DOSBase>,d0
    ba1a:	|     |   movea.l d0,a6
    ba1c:	|     |   move.l 112(sp),d1
    ba20:	|     |   move.l 108(sp),d2
    ba24:	|     |   jsr -312(a6)
    ba28:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    ba2c:	|     \-> move.l 1afb2 <zBuffer+0x50>,d0
    ba32:	|  /----- beq.s ba6e <saveGame+0x430>
		FPutC (fp, 1);
    ba34:	|  |      move.l 256(sp),76(sp)
    ba3a:	|  |      moveq #1,d0
    ba3c:	|  |      move.l d0,72(sp)
    ba40:	|  |      move.l 1af0a <DOSBase>,d0
    ba46:	|  |      movea.l d0,a6
    ba48:	|  |      move.l 76(sp),d1
    ba4c:	|  |      move.l 72(sp),d2
    ba50:	|  |      jsr -312(a6)
    ba54:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    ba58:	|  |      move.l 1afae <zBuffer+0x4c>,d0
    ba5e:	|  |      move.l 256(sp),-(sp)
    ba62:	|  |      move.l d0,-(sp)
    ba64:	|  |      jsr 8d0 <put2bytes>
    ba6a:	|  |      addq.l #8,sp
    ba6c:	|  |  /-- bra.s ba90 <saveGame+0x452>
	} else FPutC (fp,0);
    ba6e:	|  \--|-> move.l 256(sp),88(sp)
    ba74:	|     |   clr.l 84(sp)
    ba78:	|     |   move.l 1af0a <DOSBase>,d0
    ba7e:	|     |   movea.l d0,a6
    ba80:	|     |   move.l 88(sp),d1
    ba84:	|     |   move.l 84(sp),d2
    ba88:	|     |   jsr -312(a6)
    ba8c:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    ba90:	|     \-> move.l 256(sp),64(sp)
    ba96:	|         move.l 1b028 <speechMode>,60(sp)
    ba9e:	|         move.l 1af0a <DOSBase>,d0
    baa4:	|         movea.l d0,a6
    baa6:	|         move.l 64(sp),d1
    baaa:	|         move.l 60(sp),d2
    baae:	|         jsr -312(a6)
    bab2:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    bab6:	|         move.b 1adda <fadeMode>,d0
    babc:	|         move.b d0,d0
    babe:	|         andi.l #255,d0
    bac4:	|         move.l d0,52(sp)
    bac8:	|         move.l 256(sp),48(sp)
    bace:	|         move.l 1af0a <DOSBase>,d0
    bad4:	|         movea.l d0,a6
    bad6:	|         move.l 52(sp),d1
    bada:	|         move.l 48(sp),d2
    bade:	|         jsr -312(a6)
    bae2:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    bae6:	|         move.l 1af5e <speech>,d0
    baec:	|         move.l 256(sp),-(sp)
    baf0:	|         move.l d0,-(sp)
    baf2:	|         jsr 6eee <saveSpeech>
    baf8:	|         addq.l #8,sp
	saveStatusBars (fp);
    bafa:	|         move.l 256(sp),-(sp)
    bafe:	|         jsr 68ea <saveStatusBars>
    bb04:	|         addq.l #4,sp
	saveSounds (fp);
    bb06:	|         move.l 256(sp),-(sp)
    bb0a:	|         jsr c0ac <saveSounds>
    bb10:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    bb12:	|         move.w 1b012 <saveEncoding>,d0
    bb18:	|         move.w d0,d0
    bb1a:	|         andi.l #65535,d0
    bb20:	|         move.l 256(sp),-(sp)
    bb24:	|         move.l d0,-(sp)
    bb26:	|         jsr 8d0 <put2bytes>
    bb2c:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    bb2e:	|         move.l 1b004 <parallaxStuff>,d0
    bb34:	|         move.l 256(sp),-(sp)
    bb38:	|         move.l d0,-(sp)
    bb3a:	|         jsr c3a4 <saveParallaxRecursive>
    bb40:	|         addq.l #8,sp
	FPutC (fp, 0);
    bb42:	|         move.l 256(sp),40(sp)
    bb48:	|         clr.l 36(sp)
    bb4c:	|         move.l 1af0a <DOSBase>,d0
    bb52:	|         movea.l d0,a6
    bb54:	|         move.l 40(sp),d1
    bb58:	|         move.l 36(sp),d2
    bb5c:	|         jsr -312(a6)
    bb60:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    bb64:	|         move.l 256(sp),28(sp)
    bb6a:	|         move.l 1a87c <languageNum>,24(sp)
    bb72:	|         move.l 1af0a <DOSBase>,d0
    bb78:	|         movea.l d0,a6
    bb7a:	|         move.l 28(sp),d1
    bb7e:	|         move.l 24(sp),d2
    bb82:	|         jsr -312(a6)
    bb86:	|         move.l d0,20(sp)

	Close(fp);
    bb8a:	|         move.l 256(sp),16(sp)
    bb90:	|         move.l 1af0a <DOSBase>,d0
    bb96:	|         movea.l d0,a6
    bb98:	|         move.l 16(sp),d1
    bb9c:	|         jsr -36(a6)
    bba0:	|         move.l d0,12(sp)
	clearStackLib ();
    bba4:	|         jsr b13c <clearStackLib>
	return TRUE;
    bbaa:	|         moveq #1,d0
}
    bbac:	\-------> movem.l (sp)+,d2-d3/a6
    bbb0:	          lea 272(sp),sp
    bbb4:	          rts

0000bbb6 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    bbb6:	       lea -12(sp),sp
	int elements = 0;
    bbba:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    bbbe:	       move.l 16(sp),(sp)
	while (search) {
    bbc2:	   /-- bra.s bbce <saveStack+0x18>
		elements ++;
    bbc4:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    bbc8:	|  |   movea.l (sp),a0
    bbca:	|  |   move.l 8(a0),(sp)
	while (search) {
    bbce:	|  \-> tst.l (sp)
    bbd0:	\----- bne.s bbc4 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    bbd2:	       move.l 20(sp),-(sp)
    bbd6:	       move.l 12(sp),-(sp)
    bbda:	       jsr 8d0 <put2bytes>
    bbe0:	       addq.l #8,sp
	search = vs;
    bbe2:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    bbe6:	       clr.l 4(sp)
    bbea:	   /-- bra.s bc06 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    bbec:	/--|-> move.l (sp),d0
    bbee:	|  |   move.l 20(sp),-(sp)
    bbf2:	|  |   move.l d0,-(sp)
    bbf4:	|  |   jsr bd42 <saveVariable>
    bbfa:	|  |   addq.l #8,sp
		search = search -> next;
    bbfc:	|  |   movea.l (sp),a0
    bbfe:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    bc02:	|  |   addq.l #1,4(sp)
    bc06:	|  \-> move.l 4(sp),d0
    bc0a:	|      cmp.l 8(sp),d0
    bc0e:	\----- blt.s bbec <saveStack+0x36>
	}
}
    bc10:	       nop
    bc12:	       nop
    bc14:	       lea 12(sp),sp
    bc18:	       rts

0000bc1a <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    bc1a:	             lea -44(sp),sp
    bc1e:	             move.l a6,-(sp)
    bc20:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    bc22:	             move.l 1afe6 <stackLib>,48(sp)
	int a = 0;
    bc2a:	             clr.l 44(sp)
	while (s) {
    bc2e:	      /----- bra.s bc8c <saveStackRef+0x72>
		if (s -> stack == vs) {
    bc30:	   /--|----> movea.l 48(sp),a0
    bc34:	   |  |      move.l (a0),d0
    bc36:	   |  |      cmp.l 56(sp),d0
    bc3a:	   |  |  /-- bne.s bc7e <saveStackRef+0x64>
			FPutC (fp, 1);
    bc3c:	   |  |  |   move.l 60(sp),16(sp)
    bc42:	   |  |  |   moveq #1,d0
    bc44:	   |  |  |   move.l d0,12(sp)
    bc48:	   |  |  |   move.l 1af0a <DOSBase>,d0
    bc4e:	   |  |  |   movea.l d0,a6
    bc50:	   |  |  |   move.l 16(sp),d1
    bc54:	   |  |  |   move.l 12(sp),d2
    bc58:	   |  |  |   jsr -312(a6)
    bc5c:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    bc60:	   |  |  |   move.l 1afe2 <stackLibTotal>,d0
    bc66:	   |  |  |   sub.l 44(sp),d0
    bc6a:	   |  |  |   move.l 60(sp),-(sp)
    bc6e:	   |  |  |   move.l d0,-(sp)
    bc70:	   |  |  |   jsr 8d0 <put2bytes>
    bc76:	   |  |  |   addq.l #8,sp
			return TRUE;
    bc78:	   |  |  |   moveq #1,d0
    bc7a:	/--|--|--|-- bra.w bd38 <saveStackRef+0x11e>
		}
		s = s -> next;
    bc7e:	|  |  |  \-> movea.l 48(sp),a0
    bc82:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    bc88:	|  |  |      addq.l #1,44(sp)
	while (s) {
    bc8c:	|  |  \----> tst.l 48(sp)
    bc90:	|  \-------- bne.s bc30 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    bc92:	|            move.l 60(sp),40(sp)
    bc98:	|            clr.l 36(sp)
    bc9c:	|            move.l 1af0a <DOSBase>,d0
    bca2:	|            movea.l d0,a6
    bca4:	|            move.l 40(sp),d1
    bca8:	|            move.l 36(sp),d2
    bcac:	|            jsr -312(a6)
    bcb0:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    bcb4:	|            movea.l 56(sp),a0
    bcb8:	|            move.l (a0),d0
    bcba:	|            move.l 60(sp),-(sp)
    bcbe:	|            move.l d0,-(sp)
    bcc0:	|            jsr bbb6 <saveStack>
    bcc6:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    bcc8:	|            moveq #8,d0
    bcca:	|            move.l d0,28(sp)
    bcce:	|            clr.l 24(sp)
    bcd2:	|            move.l 1af02 <SysBase>,d0
    bcd8:	|            movea.l d0,a6
    bcda:	|            move.l 28(sp),d0
    bcde:	|            move.l 24(sp),d1
    bce2:	|            jsr -684(a6)
    bce6:	|            move.l d0,20(sp)
    bcea:	|            move.l 20(sp),d0
    bcee:	|            move.l d0,48(sp)
	stackLibTotal ++;
    bcf2:	|            move.l 1afe2 <stackLibTotal>,d0
    bcf8:	|            addq.l #1,d0
    bcfa:	|            move.l d0,1afe2 <stackLibTotal>
	if (! s) {
    bd00:	|            tst.l 48(sp)
    bd04:	|        /-- bne.s bd18 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    bd06:	|        |   pea 179eb <PutChar+0x171d>
    bd0c:	|        |   jsr 157fa <KPrintF>
    bd12:	|        |   addq.l #4,sp
		return FALSE;
    bd14:	|        |   clr.w d0
    bd16:	+--------|-- bra.s bd38 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    bd18:	|        \-> move.l 1afe6 <stackLib>,d0
    bd1e:	|            movea.l 48(sp),a0
    bd22:	|            move.l d0,4(a0)
	s -> stack = vs;
    bd26:	|            movea.l 48(sp),a0
    bd2a:	|            move.l 56(sp),(a0)
	stackLib = s;
    bd2e:	|            move.l 48(sp),1afe6 <stackLib>
	return TRUE;
    bd36:	|            moveq #1,d0
}
    bd38:	\----------> move.l (sp)+,d2
    bd3a:	             movea.l (sp)+,a6
    bd3c:	             lea 44(sp),sp
    bd40:	             rts

0000bd42 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    bd42:	          lea -12(sp),sp
    bd46:	          move.l a6,-(sp)
    bd48:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    bd4a:	          move.l 28(sp),16(sp)
    bd50:	          movea.l 24(sp),a0
    bd54:	          move.l (a0),d0
    bd56:	          move.l d0,12(sp)
    bd5a:	          move.l 1af0a <DOSBase>,d0
    bd60:	          movea.l d0,a6
    bd62:	          move.l 16(sp),d1
    bd66:	          move.l 12(sp),d2
    bd6a:	          jsr -312(a6)
    bd6e:	          move.l d0,8(sp)
	switch (from -> varType) {
    bd72:	          movea.l 24(sp),a0
    bd76:	          move.l (a0),d0
    bd78:	          moveq #9,d1
    bd7a:	          cmp.l d0,d1
    bd7c:	      /-- bcs.w be2c <saveVariable+0xea>
    bd80:	      |   add.l d0,d0
    bd82:	      |   movea.l d0,a0
    bd84:	      |   adda.l #48528,a0
    bd8a:	      |   move.w (a0),d0
    bd8c:	      |   jmp (bd90 <saveVariable+0x4e>,pc,d0.w)
    bd90:	      |   ori.l #1310740,(a0)+
    bd96:	      |   ori.b #20,(20,a0,d0.w)
    bd9c:	      |   .short 0x004c
    bd9e:	      |   ori.b #126,(a4)
    bda2:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    bda6:	      |   ori.b #40,(a0)+
    bdaa:	      |   ori.b #47,d4
    bdae:	      |   ori.b #0,(a4)+
    bdb2:	      |   jsr 958 <put4bytes>
    bdb8:	      |   addq.l #8,sp
		return TRUE;
    bdba:	      |   moveq #1,d0
    bdbc:	/-----|-- bra.w be68 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    bdc0:	|     |   movea.l 24(sp),a0
    bdc4:	|     |   move.l 4(a0),d0
    bdc8:	|     |   move.l 28(sp),-(sp)
    bdcc:	|     |   move.l d0,-(sp)
    bdce:	|     |   jsr bd8 <writeString>
    bdd4:	|     |   addq.l #8,sp
		return TRUE;
    bdd6:	|     |   moveq #1,d0
    bdd8:	+-----|-- bra.w be68 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    bddc:	|     |   movea.l 24(sp),a0
    bde0:	|     |   move.l 4(a0),d0
    bde4:	|     |   move.l 28(sp),-(sp)
    bde8:	|     |   move.l d0,-(sp)
    bdea:	|     |   jsr bc1a <saveStackRef>
    bdf0:	|     |   addq.l #8,sp
    bdf2:	+-----|-- bra.s be68 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    bdf4:	|     |   movea.l 24(sp),a0
    bdf8:	|     |   move.l 4(a0),d0
    bdfc:	|     |   move.l 28(sp),-(sp)
    be00:	|     |   move.l d0,-(sp)
    be02:	|     |   jsr 9fb0 <saveCostume>
    be08:	|     |   addq.l #8,sp
		return FALSE;
    be0a:	|     |   clr.w d0
    be0c:	+-----|-- bra.s be68 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    be0e:	|     |   movea.l 24(sp),a0
    be12:	|     |   move.l 4(a0),d0
    be16:	|     |   move.l 28(sp),-(sp)
    be1a:	|     |   move.l d0,-(sp)
    be1c:	|     |   jsr 9ee6 <saveAnim>
    be22:	|     |   addq.l #8,sp
		return FALSE;
    be24:	|     |   clr.w d0
    be26:	+-----|-- bra.s be68 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    be28:	|     |   clr.w d0
    be2a:	+-----|-- bra.s be68 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    be2c:	|     \-> movea.l 24(sp),a0
    be30:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    be32:	|         moveq #10,d1
    be34:	|         cmp.l d0,d1
    be36:	|  /----- bcs.s be50 <saveVariable+0x10e>
						typeName[from->varType] :
    be38:	|  |      movea.l 24(sp),a0
    be3c:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    be3e:	|  |      add.l d0,d0
    be40:	|  |      movea.l d0,a1
    be42:	|  |      adda.l d0,a1
    be44:	|  |      lea 1addc <typeName>,a0
    be4a:	|  |      move.l (0,a1,a0.l),d0
    be4e:	|  |  /-- bra.s be56 <saveVariable+0x114>
    be50:	|  \--|-> move.l #96784,d0
    be56:	|     \-> move.l d0,-(sp)
    be58:	|         pea 17a17 <PutChar+0x1749>
    be5e:	|         jsr 157fa <KPrintF>
    be64:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    be66:	|         moveq #1,d0
    be68:	\-------> move.l (sp)+,d2
    be6a:	          movea.l (sp)+,a6
    be6c:	          lea 12(sp),sp
    be70:	          rts

0000be72 <CsiCheckInput>:
extern struct inputType input;

counterx_old = 0;
countery_old = 0;

void CsiCheckInput() {
    be72:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    be76:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    be7e:	          movea.l 4(sp),a0
    be82:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    be88:	          movea.l 4(sp),a0
    be8c:	          move.w 10(a0),d0
    be90:	          lsr.w #8,d0
    be92:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    be96:	          movea.l 4(sp),a0
    be9a:	          move.w 10(a0),d0
    be9e:	          move.b d0,(sp)

    if(counterx_new)
    bea0:	/-------- beq.w bf48 <CsiCheckInput+0xd6>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    bea4:	|         clr.w d1
    bea6:	|         move.b (sp),d1
    bea8:	|         move.l 1afee <counterx_old>,d0
    beae:	|         move.l d0,d0
    beb0:	|         sub.w d0,d1
    beb2:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    beb6:	|         cmpi.w #128,10(sp)
    bebc:	|     /-- blt.s bed4 <CsiCheckInput+0x62>
            input.justMoved = TRUE;                
    bebe:	|     |   move.w #1,1aeb8 <input+0x4>
            counterx_diff -= 256;    
    bec6:	|     |   move.w 10(sp),d0
    beca:	|     |   addi.w #-256,d0
    bece:	|     |   move.w d0,10(sp)
    bed2:	|  /--|-- bra.s bf00 <CsiCheckInput+0x8e>
        } else if (counterx_diff < -128) {
    bed4:	|  |  \-> cmpi.w #-129,10(sp)
    beda:	|  |  /-- bgt.s bef2 <CsiCheckInput+0x80>
            counterx_diff += 256;
    bedc:	|  |  |   move.w 10(sp),d0
    bee0:	|  |  |   addi.w #256,d0
    bee4:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    bee8:	|  |  |   move.w #1,1aeb8 <input+0x4>
    bef0:	|  +--|-- bra.s bf00 <CsiCheckInput+0x8e>
        } else if (counterx_diff) {
    bef2:	|  |  \-> tst.w 10(sp)
    bef6:	|  +----- beq.s bf00 <CsiCheckInput+0x8e>
            input.justMoved = TRUE;
    bef8:	|  |      move.w #1,1aeb8 <input+0x4>
        }

        input.mouseX += counterx_diff;
    bf00:	|  \----> move.l 1aebe <input+0xa>,d0
    bf06:	|         movea.w 10(sp),a0
    bf0a:	|         add.l a0,d0
    bf0c:	|         move.l d0,1aebe <input+0xa>

        if( input.mouseX > (int) winWidth) {
    bf12:	|         move.l 1aebe <input+0xa>,d1
    bf18:	|         move.l 1ae56 <winWidth>,d0
    bf1e:	|         cmp.l d1,d0
    bf20:	|     /-- bge.s bf30 <CsiCheckInput+0xbe>
            input.mouseX = winWidth;            
    bf22:	|     |   move.l 1ae56 <winWidth>,d0
    bf28:	|     |   move.l d0,1aebe <input+0xa>
    bf2e:	|  /--|-- bra.s bf3e <CsiCheckInput+0xcc>
        }
        else if(input.mouseX < 0) {
    bf30:	|  |  \-> move.l 1aebe <input+0xa>,d0
    bf36:	|  +----- bpl.s bf3e <CsiCheckInput+0xcc>
            input.mouseX = 0;
    bf38:	|  |      clr.l 1aebe <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    bf3e:	|  \----> moveq #0,d0
    bf40:	|         move.b (sp),d0
    bf42:	|         move.l d0,1afee <counterx_old>
    }    

    if(countery_new)
    bf48:	\-------> tst.b 1(sp)
    bf4c:	/-------- beq.w bff8 <CsiCheckInput+0x186>
    {
        WORD countery_diff = countery_new - countery_old;
    bf50:	|         clr.w d1
    bf52:	|         move.b 1(sp),d1
    bf56:	|         move.l 1aff2 <countery_old>,d0
    bf5c:	|         move.l d0,d0
    bf5e:	|         sub.w d0,d1
    bf60:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    bf64:	|         cmpi.w #128,8(sp)
    bf6a:	|     /-- blt.s bf82 <CsiCheckInput+0x110>
            input.justMoved = TRUE;                
    bf6c:	|     |   move.w #1,1aeb8 <input+0x4>
            countery_diff -= 256;    
    bf74:	|     |   move.w 8(sp),d0
    bf78:	|     |   addi.w #-256,d0
    bf7c:	|     |   move.w d0,8(sp)
    bf80:	|  /--|-- bra.s bfae <CsiCheckInput+0x13c>
        } else if (countery_diff < -128) {
    bf82:	|  |  \-> cmpi.w #-129,8(sp)
    bf88:	|  |  /-- bgt.s bfa0 <CsiCheckInput+0x12e>
            input.justMoved = TRUE;                
    bf8a:	|  |  |   move.w #1,1aeb8 <input+0x4>
            countery_diff += 256;
    bf92:	|  |  |   move.w 8(sp),d0
    bf96:	|  |  |   addi.w #256,d0
    bf9a:	|  |  |   move.w d0,8(sp)
    bf9e:	|  +--|-- bra.s bfae <CsiCheckInput+0x13c>
        } else if (countery_diff) {
    bfa0:	|  |  \-> tst.w 8(sp)
    bfa4:	|  +----- beq.s bfae <CsiCheckInput+0x13c>
            input.justMoved = TRUE;
    bfa6:	|  |      move.w #1,1aeb8 <input+0x4>
        }

        input.mouseY += countery_diff;
    bfae:	|  \----> move.l 1aec2 <input+0xe>,d0
    bfb4:	|         movea.w 8(sp),a0
    bfb8:	|         add.l a0,d0
    bfba:	|         move.l d0,1aec2 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    bfc0:	|         move.l 1aec2 <input+0xe>,d1
    bfc6:	|         move.l 1ae5a <winHeight>,d0
    bfcc:	|         cmp.l d1,d0
    bfce:	|     /-- bge.s bfde <CsiCheckInput+0x16c>
            input.mouseY = winHeight;            
    bfd0:	|     |   move.l 1ae5a <winHeight>,d0
    bfd6:	|     |   move.l d0,1aec2 <input+0xe>
    bfdc:	|  /--|-- bra.s bfec <CsiCheckInput+0x17a>
        }
        else if(input.mouseY < 0) {
    bfde:	|  |  \-> move.l 1aec2 <input+0xe>,d0
    bfe4:	|  +----- bpl.s bfec <CsiCheckInput+0x17a>
            input.mouseY = 0;
    bfe6:	|  |      clr.l 1aec2 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    bfec:	|  \----> moveq #0,d0
    bfee:	|         move.b 1(sp),d0
    bff2:	|         move.l d0,1aff2 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    bff8:	\-------> move.w 1aeb4 <input>,d0
    bffe:	      /-- beq.s c024 <CsiCheckInput+0x1b2>
    c000:	      |   movea.l #12574721,a0
    c006:	      |   move.b (a0),d0
    c008:	      |   move.b d0,d0
    c00a:	      |   andi.l #255,d0
    c010:	      |   moveq #64,d1
    c012:	      |   and.l d1,d0
    c014:	      +-- beq.s c024 <CsiCheckInput+0x1b2>
    {
        input.leftClick = FALSE;
    c016:	      |   clr.w 1aeb4 <input>
        input.leftRelease = TRUE;
    c01c:	      |   move.w #1,1aeba <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    c024:	      \-> move.w 1aeb6 <input+0x2>,d0
    c02a:	      /-- beq.s c052 <CsiCheckInput+0x1e0>
    c02c:	      |   movea.l #14675990,a0
    c032:	      |   move.w (a0),d0
    c034:	      |   move.w d0,d0
    c036:	      |   andi.l #65535,d0
    c03c:	      |   andi.l #1024,d0
    c042:	      +-- beq.s c052 <CsiCheckInput+0x1e0>
    {
        input.rightClick = FALSE;
    c044:	      |   clr.w 1aeb6 <input+0x2>
        input.rightRelease = TRUE;
    c04a:	      |   move.w #1,1aebc <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    c052:	      \-> movea.l #12574721,a0
    c058:	          move.b (a0),d0
    c05a:	          move.b d0,d0
    c05c:	          andi.l #255,d0
    c062:	          moveq #64,d1
    c064:	          and.l d1,d0
    c066:	      /-- bne.s c070 <CsiCheckInput+0x1fe>
        input.leftClick = TRUE;        
    c068:	      |   move.w #1,1aeb4 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    c070:	      \-> movea.l #14675990,a0
    c076:	          move.w (a0),d0
    c078:	          move.w d0,d0
    c07a:	          andi.l #65535,d0
    c080:	          andi.l #1024,d0
    c086:	      /-- bne.s c090 <CsiCheckInput+0x21e>
        input.rightClick = TRUE;
    c088:	      |   move.w #1,1aeb6 <input+0x2>
    }

    c090:	      \-> nop
    c092:	          lea 12(sp),sp
    c096:	          rts

0000c098 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    c098:	moveq #0,d0
}
    c09a:	rts

0000c09c <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    c09c:	nop
    c09e:	rts

0000c0a0 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    c0a0:	nop
    c0a2:	rts

0000c0a4 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    c0a4:	moveq #1,d0
}
    c0a6:	rts

0000c0a8 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    c0a8:	nop
    c0aa:	rts

0000c0ac <saveSounds>:

void saveSounds (BPTR fp) {
    c0ac:	lea -12(sp),sp
    c0b0:	move.l a6,-(sp)
    c0b2:	move.l d2,-(sp)
	FPutC (fp,0);
    c0b4:	move.l 24(sp),16(sp)
    c0ba:	clr.l 12(sp)
    c0be:	move.l 1af0a <DOSBase>,d0
    c0c4:	movea.l d0,a6
    c0c6:	move.l 16(sp),d1
    c0ca:	move.l 12(sp),d2
    c0ce:	jsr -312(a6)
    c0d2:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    c0d6:	move.l 1a89a <defSoundVol>,d0
    c0dc:	move.l 24(sp),-(sp)
    c0e0:	move.l d0,-(sp)
    c0e2:	jsr 8d0 <put2bytes>
    c0e8:	addq.l #8,sp
	put2bytes (defVol, fp);
    c0ea:	move.l 1a896 <defVol>,d0
    c0f0:	move.l 24(sp),-(sp)
    c0f4:	move.l d0,-(sp)
    c0f6:	jsr 8d0 <put2bytes>
    c0fc:	addq.l #8,sp
}
    c0fe:	nop
    c100:	move.l (sp)+,d2
    c102:	movea.l (sp)+,a6
    c104:	lea 12(sp),sp
    c108:	rts

0000c10a <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    c10a:	move.l 4(sp),1a896 <defVol>
}
    c112:	nop
    c114:	rts

0000c116 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    c116:	move.l 4(sp),1a89a <defSoundVol>
}
    c11e:	nop
    c120:	rts

0000c122 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    c122:	nop
    c124:	rts

0000c126 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    c126:	nop
    c128:	rts

0000c12a <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    c12a:	nop
    c12c:	rts

0000c12e <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    c12e:	subq.l #4,sp
    c130:	move.l 12(sp),d0
    c134:	move.w d0,d0
    c136:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    c13a:	moveq #1,d0
}
    c13c:	addq.l #4,sp
    c13e:	rts

0000c140 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    c140:	nop
    c142:	rts

0000c144 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    c144:	move.l 16(sp),-(sp)
    c148:	move.l 16(sp),-(sp)
    c14c:	jsr f54 <CstBlankScreen>
    c152:	addq.l #8,sp
}
    c154:	nop
    c156:	rts

0000c158 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    c158:	pea 17a3a <PutChar+0x176c>
    c15e:	jsr 157fa <KPrintF>
    c164:	addq.l #4,sp
}
    c166:	nop
    c168:	rts

0000c16a <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    c16a:	movea.l 8(sp),a1
    c16e:	movea.l 12(sp),a0
    c172:	move.l 8(sp),d1
    c176:	move.l 4(sp),d0
    c17a:	move.l a1,-(sp)
    c17c:	move.l a0,-(sp)
    c17e:	move.l d1,-(sp)
    c180:	move.l d0,-(sp)
    c182:	jsr 2d94 <drawLine>
    c188:	lea 16(sp),sp
}
    c18c:	nop
    c18e:	rts

0000c190 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    c190:	movea.l 12(sp),a1
    c194:	movea.l 4(sp),a0
    c198:	move.l 8(sp),d1
    c19c:	move.l 4(sp),d0
    c1a0:	move.l a1,-(sp)
    c1a2:	move.l a0,-(sp)
    c1a4:	move.l d1,-(sp)
    c1a6:	move.l d0,-(sp)
    c1a8:	jsr 2d94 <drawLine>
    c1ae:	lea 16(sp),sp
}
    c1b2:	nop
    c1b4:	rts

0000c1b6 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    c1b6:	pea 17a73 <PutChar+0x17a5>
    c1bc:	jsr 157fa <KPrintF>
    c1c2:	addq.l #4,sp
}
    c1c4:	nop
    c1c6:	rts

0000c1c8 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    c1c8:	jsr 2cec <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    c1ce:	pea 1affe <backdropTextureName>
    c1d4:	pea 1 <_start+0x1>
    c1d8:	jsr 2f16 <deleteTextures>
    c1de:	addq.l #8,sp
	backdropTextureName = 0;
    c1e0:	clr.l 1affe <backdropTextureName>
	backdropExists = FALSE;
    c1e6:	clr.w 1b002 <backdropExists>
}
    c1ec:	nop
    c1ee:	rts

0000c1f0 <killParallax>:

void killParallax () {
    c1f0:	          lea -12(sp),sp
    c1f4:	          move.l a6,-(sp)
	while (parallaxStuff) {
    c1f6:	   /----- bra.s c262 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    c1f8:	/--|----> move.l 1b004 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    c200:	|  |      movea.l 12(sp),a0
    c204:	|  |      move.l 42(a0),d0
    c208:	|  |      move.l d0,1b004 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    c20e:	|  |      move.l 12(sp),d0
    c212:	|  |      addq.l #4,d0
    c214:	|  |      move.l d0,-(sp)
    c216:	|  |      pea 1 <_start+0x1>
    c21a:	|  |      jsr 2f16 <deleteTextures>
    c220:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    c222:	|  |      movea.l 12(sp),a0
    c226:	|  |      move.l (a0),d0
    c228:	|  |  /-- beq.s c242 <killParallax+0x52>
    c22a:	|  |  |   movea.l 12(sp),a0
    c22e:	|  |  |   move.l (a0),8(sp)
    c232:	|  |  |   move.l 1af02 <SysBase>,d0
    c238:	|  |  |   movea.l d0,a6
    c23a:	|  |  |   movea.l 8(sp),a1
    c23e:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    c242:	|  |  \-> tst.l 12(sp)
    c246:	|  |  /-- beq.s c25e <killParallax+0x6e>
    c248:	|  |  |   move.l 12(sp),4(sp)
    c24e:	|  |  |   move.l 1af02 <SysBase>,d0
    c254:	|  |  |   movea.l d0,a6
    c256:	|  |  |   movea.l 4(sp),a1
    c25a:	|  |  |   jsr -690(a6)
		k = NULL;
    c25e:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    c262:	|  \----> move.l 1b004 <parallaxStuff>,d0
    c268:	\-------- bne.s c1f8 <killParallax+0x8>
	}
}
    c26a:	          nop
    c26c:	          nop
    c26e:	          movea.l (sp)+,a6
    c270:	          lea 12(sp),sp
    c274:	          rts

0000c276 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    c276:	       move.l 4(sp),-(sp)
    c27a:	       jsr 5c54 <openFileFromNum>
    c280:	       addq.l #4,sp
    c282:	       tst.l d0
    c284:	   /-- bne.s c296 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    c286:	   |   pea 17a94 <PutChar+0x17c6>
    c28c:	   |   jsr 157fa <KPrintF>
    c292:	   |   addq.l #4,sp
		return;
    c294:	/--|-- bra.s c2b6 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    c296:	|  \-> move.l 1aeea <bigDataFile>,d0
    c29c:	|      move.l 12(sp),-(sp)
    c2a0:	|      move.l 12(sp),-(sp)
    c2a4:	|      move.l d0,-(sp)
    c2a6:	|      jsr 162e <CstLoadBackdrop>
    c2ac:	|      lea 12(sp),sp
	finishAccess ();
    c2b0:	|      jsr 5b4c <finishAccess>
	
}
    c2b6:	\----> rts

0000c2b8 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    c2b8:	subq.l #8,sp
    c2ba:	movea.l 12(sp),a0
    c2be:	move.l 16(sp),d1
    c2c2:	move.l 20(sp),d0
    c2c6:	movea.w a0,a0
    c2c8:	move.w a0,6(sp)
    c2cc:	move.w d1,d1
    c2ce:	move.w d1,4(sp)
    c2d2:	move.w d0,d0
    c2d4:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    c2d8:	pea 17ae3 <PutChar+0x1815>
    c2de:	jsr 157fa <KPrintF>
    c2e4:	addq.l #4,sp

}
    c2e6:	nop
    c2e8:	addq.l #8,sp
    c2ea:	rts

0000c2ec <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    c2ec:	pea 17b06 <PutChar+0x1838>
    c2f2:	jsr 157fa <KPrintF>
    c2f8:	addq.l #4,sp
}
    c2fa:	nop
    c2fc:	rts

0000c2fe <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    c2fe:	pea 1b008 <snapshotTextureName>
    c304:	pea 1 <_start+0x1>
    c308:	jsr 2f16 <deleteTextures>
    c30e:	addq.l #8,sp
	snapshotTextureName = 0;
    c310:	clr.l 1b008 <snapshotTextureName>
}
    c316:	nop
    c318:	rts

0000c31a <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    c31a:	clr.l 1b014 <cameraX>
	cameraY = 0;
    c320:	clr.l 1b018 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    c326:	move.l 1affa <sceneHeight>,d0
    c32c:	move.l d0,d1
    c32e:	move.l 1aff6 <sceneWidth>,d0
    c334:	move.l d1,-(sp)
    c336:	move.l d0,-(sp)
    c338:	jsr 28b0 <CstReserveBackdrop>
    c33e:	addq.l #8,sp
}
    c340:	rts

0000c342 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    c342:	jsr c1c8 <killBackDrop>
	killParallax ();
    c348:	jsr c1f0 <killParallax>
	killZBuffer ();
    c34e:	jsr 75e8 <killZBuffer>
	sceneWidth = x;
    c354:	move.l 4(sp),d0
    c358:	move.l d0,1aff6 <sceneWidth>
	sceneHeight = y;
    c35e:	move.l 8(sp),d0
    c362:	move.l d0,1affa <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    c368:	pea 17b3f <PutChar+0x1871>
    c36e:	jsr 157fa <KPrintF>
    c374:	addq.l #4,sp
	return reserveBackdrop();
    c376:	jsr c31a <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    c37c:	rts

0000c37e <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    c37e:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    c380:	move.l 12(sp),-(sp)
    c384:	jsr 6bc <get2bytes>
    c38a:	addq.l #4,sp
    c38c:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    c390:	move.l 12(sp),-(sp)
    c394:	jsr 6bc <get2bytes>
    c39a:	addq.l #4,sp
    c39c:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    c39e:	moveq #1,d0
}
    c3a0:	addq.l #8,sp
    c3a2:	rts

0000c3a4 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    c3a4:	   /-> lea -12(sp),sp
    c3a8:	   |   move.l a6,-(sp)
    c3aa:	   |   move.l d2,-(sp)
	if (me) {
    c3ac:	   |   tst.l 24(sp)
    c3b0:	/--|-- beq.w c446 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    c3b4:	|  |   movea.l 24(sp),a0
    c3b8:	|  |   move.l 42(a0),d0
    c3bc:	|  |   move.l 28(sp),-(sp)
    c3c0:	|  |   move.l d0,-(sp)
    c3c2:	|  \-- jsr c3a4 <saveParallaxRecursive>(pc)
    c3c6:	|      addq.l #8,sp
		FPutC (fp, 1);
    c3c8:	|      move.l 28(sp),16(sp)
    c3ce:	|      moveq #1,d0
    c3d0:	|      move.l d0,12(sp)
    c3d4:	|      move.l 1af0a <DOSBase>,d0
    c3da:	|      movea.l d0,a6
    c3dc:	|      move.l 16(sp),d1
    c3e0:	|      move.l 12(sp),d2
    c3e4:	|      jsr -312(a6)
    c3e8:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    c3ec:	|      movea.l 24(sp),a0
    c3f0:	|      move.w 28(a0),d0
    c3f4:	|      move.w d0,d0
    c3f6:	|      andi.l #65535,d0
    c3fc:	|      move.l 28(sp),-(sp)
    c400:	|      move.l d0,-(sp)
    c402:	|      jsr 8d0 <put2bytes>
    c408:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    c40a:	|      movea.l 24(sp),a0
    c40e:	|      move.w 30(a0),d0
    c412:	|      move.w d0,d0
    c414:	|      andi.l #65535,d0
    c41a:	|      move.l 28(sp),-(sp)
    c41e:	|      move.l d0,-(sp)
    c420:	|      jsr 8d0 <put2bytes>
    c426:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    c428:	|      movea.l 24(sp),a0
    c42c:	|      move.w 32(a0),d0
    c430:	|      move.w d0,d0
    c432:	|      andi.l #65535,d0
    c438:	|      move.l 28(sp),-(sp)
    c43c:	|      move.l d0,-(sp)
    c43e:	|      jsr 8d0 <put2bytes>
    c444:	|      addq.l #8,sp
	}
}
    c446:	\----> nop
    c448:	       move.l (sp)+,d2
    c44a:	       movea.l (sp)+,a6
    c44c:	       lea 12(sp),sp
    c450:	       rts

0000c452 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    c452:	pea 17b66 <PutChar+0x1898>
    c458:	jsr 157fa <KPrintF>
    c45e:	addq.l #4,sp
	return TRUE;
    c460:	moveq #1,d0
    c462:	rts

0000c464 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    c464:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    c466:	             move.l 1b00c <allObjectTypes>,(sp)

	while (huntType) {
    c46c:	      /----- bra.s c484 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    c46e:	   /--|----> movea.l (sp),a0
    c470:	   |  |      move.l 4(a0),d0
    c474:	   |  |      cmp.l 8(sp),d0
    c478:	   |  |  /-- bne.s c47e <findObjectType+0x1a>
    c47a:	   |  |  |   move.l (sp),d0
    c47c:	/--|--|--|-- bra.s c494 <findObjectType+0x30>
		huntType = huntType -> next;
    c47e:	|  |  |  \-> movea.l (sp),a0
    c480:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    c484:	|  |  \----> tst.l (sp)
    c486:	|  \-------- bne.s c46e <findObjectType+0xa>
	}

	return loadObjectType (i);
    c488:	|            move.l 8(sp),-(sp)
    c48c:	|            jsr c554 <loadObjectType>
    c492:	|            addq.l #4,sp
}
    c494:	\----------> addq.l #4,sp
    c496:	             rts

0000c498 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    c498:	             lea -12(sp),sp
	int i, num = 0;
    c49c:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    c4a0:	             move.l 20(sp),-(sp)
    c4a4:	             jsr c464 <findObjectType>
    c4aa:	             addq.l #4,sp
    c4ac:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    c4ae:	             clr.l 8(sp)
    c4b2:	   /-------- bra.s c4e8 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    c4b4:	/--|-------> movea.l (sp),a0
    c4b6:	|  |         move.l 38(a0),d1
    c4ba:	|  |         move.l 8(sp),d0
    c4be:	|  |         lsl.l #3,d0
    c4c0:	|  |         movea.l d1,a0
    c4c2:	|  |         adda.l d0,a0
    c4c4:	|  |         move.l (a0),d0
    c4c6:	|  |         cmp.l 16(sp),d0
    c4ca:	|  |  /----- bne.s c4e4 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    c4cc:	|  |  |      movea.l (sp),a0
    c4ce:	|  |  |      move.l 38(a0),d1
    c4d2:	|  |  |      move.l 8(sp),d0
    c4d6:	|  |  |      lsl.l #3,d0
    c4d8:	|  |  |      movea.l d1,a0
    c4da:	|  |  |      adda.l d0,a0
    c4dc:	|  |  |      move.l 4(a0),4(sp)
			break;
    c4e2:	|  |  |  /-- bra.s c4f4 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    c4e4:	|  |  \--|-> addq.l #1,8(sp)
    c4e8:	|  \-----|-> movea.l (sp),a0
    c4ea:	|        |   move.l 16(a0),d0
    c4ee:	|        |   cmp.l 8(sp),d0
    c4f2:	\--------|-- bgt.s c4b4 <getCombinationFunction+0x1c>
		}
	}

	return num;
    c4f4:	         \-> move.l 4(sp),d0
}
    c4f8:	             lea 12(sp),sp
    c4fc:	             rts

0000c4fe <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    c4fe:	moveq #1,d0
}
    c500:	rts

0000c502 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    c502:	subq.l #8,sp
    c504:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    c506:	move.l 16(sp),-(sp)
    c50a:	jsr 6bc <get2bytes>
    c510:	addq.l #4,sp
    c512:	move.l d0,-(sp)
    c514:	jsr c554 <loadObjectType>
    c51a:	addq.l #4,sp
    c51c:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    c520:	movea.l 8(sp),a0
    c524:	move.l (a0),4(sp)
    c528:	move.l 1af02 <SysBase>,d0
    c52e:	movea.l d0,a6
    c530:	movea.l 4(sp),a1
    c534:	jsr -690(a6)
	r -> screenName = readString (fp);
    c538:	move.l 16(sp),-(sp)
    c53c:	jsr b02 <readString>
    c542:	addq.l #4,sp
    c544:	movea.l 8(sp),a0
    c548:	move.l d0,(a0)
	return r;
    c54a:	move.l 8(sp),d0
}
    c54e:	movea.l (sp)+,a6
    c550:	addq.l #8,sp
    c552:	rts

0000c554 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    c554:	          lea -84(sp),sp
    c558:	          move.l a6,-(sp)
    c55a:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    c55c:	          moveq #42,d0
    c55e:	          move.l d0,84(sp)
    c562:	          clr.l 80(sp)
    c566:	          move.l 1af02 <SysBase>,d0
    c56c:	          movea.l d0,a6
    c56e:	          move.l 84(sp),d0
    c572:	          move.l 80(sp),d1
    c576:	          jsr -684(a6)
    c57a:	          move.l d0,76(sp)
    c57e:	          move.l 76(sp),d0
    c582:	          move.l d0,72(sp)

    if (newType) {
    c586:	/-------- beq.w c800 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    c58a:	|         move.l 96(sp),-(sp)
    c58e:	|         jsr 5d1c <openObjectSlice>
    c594:	|         addq.l #4,sp
    c596:	|         tst.w d0
    c598:	+-------- beq.w c800 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    c59c:	|         move.l 1aeea <bigDataFile>,d0
    c5a2:	|         move.l d0,-(sp)
    c5a4:	|         jsr 6bc <get2bytes>
    c5aa:	|         addq.l #4,sp
    c5ac:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    c5b0:	|         move.l 1aeea <bigDataFile>,64(sp)
    c5b8:	|         move.l 1af0a <DOSBase>,d0
    c5be:	|         movea.l d0,a6
    c5c0:	|         move.l 64(sp),d1
    c5c4:	|         jsr -306(a6)
    c5c8:	|         move.l d0,60(sp)
    c5cc:	|         move.l 60(sp),d0
    c5d0:	|         move.l d0,d0
    c5d2:	|         movea.l 72(sp),a0
    c5d6:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    c5da:	|         move.l 1aeea <bigDataFile>,56(sp)
    c5e2:	|         move.l 1af0a <DOSBase>,d0
    c5e8:	|         movea.l d0,a6
    c5ea:	|         move.l 56(sp),d1
    c5ee:	|         jsr -306(a6)
    c5f2:	|         move.l d0,52(sp)
    c5f6:	|         move.l 52(sp),d0
    c5fa:	|         move.l d0,d0
    c5fc:	|         movea.l 72(sp),a0
    c600:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    c604:	|         move.l 1aeea <bigDataFile>,48(sp)
    c60c:	|         move.l 1af0a <DOSBase>,d0
    c612:	|         movea.l d0,a6
    c614:	|         move.l 48(sp),d1
    c618:	|         jsr -306(a6)
    c61c:	|         move.l d0,44(sp)
    c620:	|         move.l 44(sp),d0
    c624:	|         move.l d0,d0
    c626:	|         movea.l 72(sp),a0
    c62a:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    c62e:	|         move.l 1aeea <bigDataFile>,40(sp)
    c636:	|         move.l 1af0a <DOSBase>,d0
    c63c:	|         movea.l d0,a6
    c63e:	|         move.l 40(sp),d1
    c642:	|         jsr -306(a6)
    c646:	|         move.l d0,36(sp)
    c64a:	|         move.l 36(sp),d0
    c64e:	|         movea.l 72(sp),a0
    c652:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    c656:	|         move.l 1aeea <bigDataFile>,32(sp)
    c65e:	|         move.l 1af0a <DOSBase>,d0
    c664:	|         movea.l d0,a6
    c666:	|         move.l 32(sp),d1
    c66a:	|         jsr -306(a6)
    c66e:	|         move.l d0,28(sp)
    c672:	|         move.l 28(sp),d0
    c676:	|         movea.l 72(sp),a0
    c67a:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    c67e:	|         move.l 1aeea <bigDataFile>,d0
    c684:	|         move.l d0,-(sp)
    c686:	|         jsr 718 <get4bytes>
    c68c:	|         addq.l #4,sp
    c68e:	|         movea.l 72(sp),a0
    c692:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    c696:	|         move.l 1aeea <bigDataFile>,d0
    c69c:	|         move.l d0,-(sp)
    c69e:	|         jsr 6bc <get2bytes>
    c6a4:	|         addq.l #4,sp
    c6a6:	|         movea.l 72(sp),a0
    c6aa:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    c6ae:	|         move.l 1aeea <bigDataFile>,24(sp)
    c6b6:	|         move.l 1af0a <DOSBase>,d0
    c6bc:	|         movea.l d0,a6
    c6be:	|         move.l 24(sp),d1
    c6c2:	|         jsr -306(a6)
    c6c6:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    c6ca:	|         move.l 1aeea <bigDataFile>,d0
    c6d0:	|         move.l d0,-(sp)
    c6d2:	|         jsr 7d8 <getFloat>
    c6d8:	|         addq.l #4,sp
            getFloat(bigDataFile);
    c6da:	|         move.l 1aeea <bigDataFile>,d0
    c6e0:	|         move.l d0,-(sp)
    c6e2:	|         jsr 7d8 <getFloat>
    c6e8:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    c6ea:	|         move.l 1aeea <bigDataFile>,d0
    c6f0:	|         move.l d0,-(sp)
    c6f2:	|         jsr 6bc <get2bytes>
    c6f8:	|         addq.l #4,sp
    c6fa:	|         move.l d0,d0
    c6fc:	|         movea.l 72(sp),a0
    c700:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    c704:	|         move.l 1aeea <bigDataFile>,d0
    c70a:	|         move.l d0,-(sp)
    c70c:	|         jsr 6bc <get2bytes>
    c712:	|         addq.l #4,sp
    c714:	|         movea.l 72(sp),a0
    c718:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    c71c:	|         movea.l 72(sp),a0
    c720:	|         move.l 16(a0),d0
    c724:	|  /----- beq.s c756 <loadObjectType+0x202>
    c726:	|  |      movea.l 72(sp),a0
    c72a:	|  |      move.l 16(a0),d0
    c72e:	|  |      lsl.l #3,d0
    c730:	|  |      move.l d0,16(sp)
    c734:	|  |      clr.l 12(sp)
    c738:	|  |      move.l 1af02 <SysBase>,d0
    c73e:	|  |      movea.l d0,a6
    c740:	|  |      move.l 16(sp),d0
    c744:	|  |      move.l 12(sp),d1
    c748:	|  |      jsr -684(a6)
    c74c:	|  |      move.l d0,8(sp)
    c750:	|  |      move.l 8(sp),d0
    c754:	|  |  /-- bra.s c758 <loadObjectType+0x204>
    c756:	|  \--|-> moveq #0,d0
    c758:	|     \-> movea.l 72(sp),a0
    c75c:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    c760:	|         clr.l 88(sp)
    c764:	|     /-- bra.s c7b4 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    c766:	|  /--|-> move.l 1aeea <bigDataFile>,d1
    c76c:	|  |  |   movea.l 72(sp),a0
    c770:	|  |  |   movea.l 38(a0),a0
    c774:	|  |  |   move.l 88(sp),d0
    c778:	|  |  |   lsl.l #3,d0
    c77a:	|  |  |   lea (0,a0,d0.l),a2
    c77e:	|  |  |   move.l d1,-(sp)
    c780:	|  |  |   jsr 6bc <get2bytes>
    c786:	|  |  |   addq.l #4,sp
    c788:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    c78a:	|  |  |   move.l 1aeea <bigDataFile>,d1
    c790:	|  |  |   movea.l 72(sp),a0
    c794:	|  |  |   movea.l 38(a0),a0
    c798:	|  |  |   move.l 88(sp),d0
    c79c:	|  |  |   lsl.l #3,d0
    c79e:	|  |  |   lea (0,a0,d0.l),a2
    c7a2:	|  |  |   move.l d1,-(sp)
    c7a4:	|  |  |   jsr 6bc <get2bytes>
    c7aa:	|  |  |   addq.l #4,sp
    c7ac:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    c7b0:	|  |  |   addq.l #1,88(sp)
    c7b4:	|  |  \-> movea.l 72(sp),a0
    c7b8:	|  |      move.l 16(a0),d0
    c7bc:	|  |      cmp.l 88(sp),d0
    c7c0:	|  \----- bgt.s c766 <loadObjectType+0x212>
            }
            finishAccess();
    c7c2:	|         jsr 5b4c <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    c7c8:	|         move.l 68(sp),-(sp)
    c7cc:	|         jsr 5b56 <getNumberedString>
    c7d2:	|         addq.l #4,sp
    c7d4:	|         movea.l 72(sp),a0
    c7d8:	|         move.l d0,(a0)
            newType->objectNum = i;
    c7da:	|         movea.l 72(sp),a0
    c7de:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    c7e4:	|         move.l 1b00c <allObjectTypes>,d0
    c7ea:	|         movea.l 72(sp),a0
    c7ee:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    c7f2:	|         move.l 72(sp),1b00c <allObjectTypes>
            return newType;
    c7fa:	|         move.l 72(sp),d0
    c7fe:	|     /-- bra.s c802 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    c800:	\-----|-> moveq #0,d0
}
    c802:	      \-> movea.l (sp)+,a2
    c804:	          movea.l (sp)+,a6
    c806:	          lea 84(sp),sp
    c80a:	          rts

0000c80c <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    c80c:	             lea -16(sp),sp
    c810:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    c812:	             move.l #110604,16(sp)

	while (* huntRegion) {
    c81a:	   /-------- bra.s c88e <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    c81c:	/--|-------> movea.l 16(sp),a0
    c820:	|  |         move.l (a0),d0
    c822:	|  |         cmp.l 24(sp),d0
    c826:	|  |  /----- bne.s c880 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    c828:	|  |  |      movea.l 24(sp),a0
    c82c:	|  |  |      move.l 8(a0),d0
    c830:	|  |  |      movea.l 16(sp),a0
    c834:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    c836:	|  |  |      movea.l 24(sp),a0
    c83a:	|  |  |      move.l 38(a0),12(sp)
    c840:	|  |  |      move.l 1af02 <SysBase>,d0
    c846:	|  |  |      movea.l d0,a6
    c848:	|  |  |      movea.l 12(sp),a1
    c84c:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    c850:	|  |  |      movea.l 24(sp),a0
    c854:	|  |  |      move.l (a0),8(sp)
    c858:	|  |  |      move.l 1af02 <SysBase>,d0
    c85e:	|  |  |      movea.l d0,a6
    c860:	|  |  |      movea.l 8(sp),a1
    c864:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    c868:	|  |  |      move.l 24(sp),4(sp)
    c86e:	|  |  |      move.l 1af02 <SysBase>,d0
    c874:	|  |  |      movea.l d0,a6
    c876:	|  |  |      movea.l 4(sp),a1
    c87a:	|  |  |      jsr -690(a6)
			return;
    c87e:	|  |  |  /-- bra.s c8a4 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    c880:	|  |  \--|-> movea.l 16(sp),a0
    c884:	|  |     |   move.l (a0),d0
    c886:	|  |     |   move.l d0,d1
    c888:	|  |     |   addq.l #8,d1
    c88a:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    c88e:	|  \-----|-> movea.l 16(sp),a0
    c892:	|        |   move.l (a0),d0
    c894:	\--------|-- bne.s c81c <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    c896:	         |   pea 17b8d <PutChar+0x18bf>
    c89c:	         |   jsr 157fa <KPrintF>
    c8a2:	         |   addq.l #4,sp
}
    c8a4:	         \-> movea.l (sp)+,a6
    c8a6:	             lea 16(sp),sp
    c8aa:	             rts

0000c8ac <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    c8ac:	movea.l 4(sp),a0
    c8b0:	move.l 4(a0),d0
    c8b4:	move.l 8(sp),-(sp)
    c8b8:	move.l d0,-(sp)
    c8ba:	jsr 8d0 <put2bytes>
    c8c0:	addq.l #8,sp
	writeString (r -> screenName, fp);
    c8c2:	movea.l 4(sp),a0
    c8c6:	move.l (a0),d0
    c8c8:	move.l 8(sp),-(sp)
    c8cc:	move.l d0,-(sp)
    c8ce:	jsr bd8 <writeString>
    c8d4:	addq.l #8,sp
    c8d6:	nop
    c8d8:	rts

0000c8da <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    c8da:	                         lea -112(sp),sp
    c8de:	                         move.l a6,-(sp)
    c8e0:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    c8e2:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    c8e6:	                         move.w 1b012 <saveEncoding>,d0
    c8ec:	                  /----- beq.s c8f6 <fileToStack+0x1c>
    c8ee:	                  |      move.l #97203,d0
    c8f4:	                  |  /-- bra.s c8fc <fileToStack+0x22>
    c8f6:	                  \--|-> move.l #97229,d0
    c8fc:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    c900:	                         move.l 124(sp),112(sp)
    c906:	                         move.l #1005,108(sp)
    c90e:	                         move.l 1af0a <DOSBase>,d0
    c914:	                         movea.l d0,a6
    c916:	                         move.l 112(sp),d1
    c91a:	                         move.l 108(sp),d2
    c91e:	                         jsr -30(a6)
    c922:	                         move.l d0,104(sp)
    c926:	                         move.l 104(sp),d0
    c92a:	                         move.l d0,100(sp)
    if (!fp) {
    c92e:	                     /-- bne.s c948 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    c930:	                     |   move.l 124(sp),-(sp)
    c934:	                     |   pea 17be4 <PutChar+0x1916>
    c93a:	                     |   jsr 157fa <KPrintF>
    c940:	                     |   addq.l #8,sp
        return FALSE;
    c942:	                     |   clr.w d0
    c944:	/--------------------|-- bra.w cc3e <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    c948:	|                    \-> move.w 1b012 <saveEncoding>,d0
    c94e:	|                        move.l d0,d0
    c950:	|                        move.b d0,1b010 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    c956:	|                        move.w 1b012 <saveEncoding>,d0
    c95c:	|                        lsr.w #8,d0
    c95e:	|                        move.l d0,d0
    c960:	|                        move.b d0,1b011 <encode2>

    while (*checker) {
    c966:	|                 /----- bra.s c9ca <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    c968:	|              /--|----> move.l 100(sp),30(sp)
    c96e:	|              |  |      move.l 1af0a <DOSBase>,d0
    c974:	|              |  |      movea.l d0,a6
    c976:	|              |  |      move.l 30(sp),d1
    c97a:	|              |  |      jsr -306(a6)
    c97e:	|              |  |      move.l d0,26(sp)
    c982:	|              |  |      move.l 26(sp),d1
    c986:	|              |  |      movea.l 116(sp),a0
    c98a:	|              |  |      move.b (a0),d0
    c98c:	|              |  |      ext.w d0
    c98e:	|              |  |      movea.w d0,a0
    c990:	|              |  |      cmpa.l d1,a0
    c992:	|              |  |  /-- beq.s c9c6 <fileToStack+0xec>
            Close(fp);
    c994:	|              |  |  |   move.l 100(sp),22(sp)
    c99a:	|              |  |  |   move.l 1af0a <DOSBase>,d0
    c9a0:	|              |  |  |   movea.l d0,a6
    c9a2:	|              |  |  |   move.l 22(sp),d1
    c9a6:	|              |  |  |   jsr -36(a6)
    c9aa:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    c9ae:	|              |  |  |   move.l 124(sp),-(sp)
    c9b2:	|              |  |  |   pea 17bf1 <PutChar+0x1923>
    c9b8:	|              |  |  |   jsr 157fa <KPrintF>
    c9be:	|              |  |  |   addq.l #8,sp
            return FALSE;
    c9c0:	|              |  |  |   clr.w d0
    c9c2:	+--------------|--|--|-- bra.w cc3e <fileToStack+0x364>
        }
        checker++;
    c9c6:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    c9ca:	|              |  \----> movea.l 116(sp),a0
    c9ce:	|              |         move.b (a0),d0
    c9d0:	|              \-------- bne.s c968 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    c9d2:	|                        move.w 1b012 <saveEncoding>,d0
    c9d8:	|  /-------------------- beq.s ca4c <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    c9da:	|  |                     move.l 100(sp),-(sp)
    c9de:	|  |                     jsr cc48 <readStringEncoded>
    c9e4:	|  |                     addq.l #4,sp
    c9e6:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    c9ea:	|  |                     pea 17c32 <PutChar+0x1964>
    c9f0:	|  |                     move.l 100(sp),-(sp)
    c9f4:	|  |                     jsr 12ada <strcmp>
    c9fa:	|  |                     addq.l #8,sp
    c9fc:	|  |                     tst.l d0
    c9fe:	|  |                 /-- beq.s ca32 <fileToStack+0x158>
            Close(fp);
    ca00:	|  |                 |   move.l 100(sp),88(sp)
    ca06:	|  |                 |   move.l 1af0a <DOSBase>,d0
    ca0c:	|  |                 |   movea.l d0,a6
    ca0e:	|  |                 |   move.l 88(sp),d1
    ca12:	|  |                 |   jsr -36(a6)
    ca16:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    ca1a:	|  |                 |   move.l 124(sp),-(sp)
    ca1e:	|  |                 |   pea 17c41 <PutChar+0x1973>
    ca24:	|  |                 |   jsr 157fa <KPrintF>
    ca2a:	|  |                 |   addq.l #8,sp
            return FALSE;
    ca2c:	|  |                 |   clr.w d0
    ca2e:	+--|-----------------|-- bra.w cc3e <fileToStack+0x364>
        }
        FreeVec(checker);
    ca32:	|  |                 \-> move.l 96(sp),92(sp)
    ca38:	|  |                     move.l 1af02 <SysBase>,d0
    ca3e:	|  |                     movea.l d0,a6
    ca40:	|  |                     movea.l 92(sp),a1
    ca44:	|  |                     jsr -690(a6)
        checker = NULL;
    ca48:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    ca4c:	|  >-------------------> move.w 1b012 <saveEncoding>,d0
    ca52:	|  |     /-------------- beq.w cb86 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    ca56:	|  |     |               move.l 100(sp),76(sp)
    ca5c:	|  |     |               move.l 1af0a <DOSBase>,d0
    ca62:	|  |     |               movea.l d0,a6
    ca64:	|  |     |               move.l 76(sp),d1
    ca68:	|  |     |               jsr -306(a6)
    ca6c:	|  |     |               move.l d0,72(sp)
    ca70:	|  |     |               move.l 72(sp),d0
    ca74:	|  |     |               move.b 1b010 <encode1>,d1
    ca7a:	|  |     |               ext.w d1
    ca7c:	|  |     |               ext.l d1
    ca7e:	|  |     |               move.l d0,d2
    ca80:	|  |     |               eor.l d1,d2
    ca82:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    ca86:	|  |     |               moveq #-1,d0
    ca88:	|  |     |               cmp.l 68(sp),d0
    ca8c:	|  |  /--|-------------- beq.w cc1c <fileToStack+0x342>

            char i = (char) tmp;
    ca90:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    ca96:	|  |  |  |               move.b 67(sp),d0
    ca9a:	|  |  |  |               ext.w d0
    ca9c:	|  |  |  |               movea.w d0,a0
    ca9e:	|  |  |  |               moveq #2,d2
    caa0:	|  |  |  |               cmp.l a0,d2
    caa2:	|  |  |  |     /-------- beq.s cb1e <fileToStack+0x244>
    caa4:	|  |  |  |     |         moveq #2,d0
    caa6:	|  |  |  |     |         cmp.l a0,d0
    caa8:	|  |  |  |  /--|-------- blt.w cb54 <fileToStack+0x27a>
    caac:	|  |  |  |  |  |         cmpa.w #0,a0
    cab0:	|  |  |  |  |  |     /-- beq.s cabc <fileToStack+0x1e2>
    cab2:	|  |  |  |  |  |     |   moveq #1,d2
    cab4:	|  |  |  |  |  |     |   cmp.l a0,d2
    cab6:	|  |  |  |  |  |  /--|-- beq.s caf8 <fileToStack+0x21e>
    cab8:	|  |  |  |  +--|--|--|-- bra.w cb54 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    cabc:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    cac0:	|  |  |  |  |  |  |      jsr cc48 <readStringEncoded>
    cac6:	|  |  |  |  |  |  |      addq.l #4,sp
    cac8:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    cacc:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    cad0:	|  |  |  |  |  |  |      lea 14(sp),a0
    cad4:	|  |  |  |  |  |  |      move.l a0,-(sp)
    cad6:	|  |  |  |  |  |  |      jsr 13850 <makeTextVar>
    cadc:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    cade:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    cae4:	|  |  |  |  |  |  |      move.l 1af02 <SysBase>,d0
    caea:	|  |  |  |  |  |  |      movea.l d0,a6
    caec:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    caf0:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    caf4:	|  |  |  |  |  |  |  /-- bra.w cbac <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    caf8:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    cafc:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    cb02:	|  |  |  |  |  |     |   addq.l #4,sp
    cb04:	|  |  |  |  |  |     |   move.l d0,-(sp)
    cb06:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    cb0a:	|  |  |  |  |  |     |   lea 18(sp),a0
    cb0e:	|  |  |  |  |  |     |   move.l a0,-(sp)
    cb10:	|  |  |  |  |  |     |   jsr 13f20 <setVariable>
    cb16:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    cb1a:	|  |  |  |  |  |     +-- bra.w cbac <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    cb1e:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    cb24:	|  |  |  |  |        |   move.l 1af0a <DOSBase>,d0
    cb2a:	|  |  |  |  |        |   movea.l d0,a6
    cb2c:	|  |  |  |  |        |   move.l 62(sp),d1
    cb30:	|  |  |  |  |        |   jsr -306(a6)
    cb34:	|  |  |  |  |        |   move.l d0,58(sp)
    cb38:	|  |  |  |  |        |   move.l 58(sp),d0
    cb3c:	|  |  |  |  |        |   move.l d0,-(sp)
    cb3e:	|  |  |  |  |        |   pea 1 <_start+0x1>
    cb42:	|  |  |  |  |        |   lea 18(sp),a0
    cb46:	|  |  |  |  |        |   move.l a0,-(sp)
    cb48:	|  |  |  |  |        |   jsr 13f20 <setVariable>
    cb4e:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    cb52:	|  |  |  |  |        +-- bra.s cbac <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    cb54:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    cb58:	|  |  |  |           |   pea 17cc3 <PutChar+0x19f5>
    cb5e:	|  |  |  |           |   jsr 157fa <KPrintF>
    cb64:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    cb66:	|  |  |  |           |   move.l 100(sp),46(sp)
    cb6c:	|  |  |  |           |   move.l 1af0a <DOSBase>,d0
    cb72:	|  |  |  |           |   movea.l d0,a6
    cb74:	|  |  |  |           |   move.l 46(sp),d1
    cb78:	|  |  |  |           |   jsr -36(a6)
    cb7c:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    cb80:	|  |  |  |           |   clr.w d0
    cb82:	+--|--|--|-----------|-- bra.w cc3e <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    cb86:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    cb8a:	|  |  |              |   jsr cd0e <readTextPlain>
    cb90:	|  |  |              |   addq.l #4,sp
    cb92:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    cb96:	|  |  |        /-----|-- beq.w cc20 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    cb9a:	|  |  |        |     |   move.l 80(sp),-(sp)
    cb9e:	|  |  |        |     |   lea 14(sp),a0
    cba2:	|  |  |        |     |   move.l a0,-(sp)
    cba4:	|  |  |        |     |   jsr 13850 <makeTextVar>
    cbaa:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    cbac:	|  |  |        |     \-> movea.l 128(sp),a0
    cbb0:	|  |  |        |         move.l (a0),d0
    cbb2:	|  |  |        |  /----- bne.s cbe2 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    cbb4:	|  |  |        |  |      move.l 128(sp),d0
    cbb8:	|  |  |        |  |      move.l d0,-(sp)
    cbba:	|  |  |        |  |      lea 14(sp),a0
    cbbe:	|  |  |        |  |      move.l a0,-(sp)
    cbc0:	|  |  |        |  |      jsr 12ef0 <addVarToStackQuick>
    cbc6:	|  |  |        |  |      addq.l #8,sp
    cbc8:	|  |  |        |  |      tst.w d0
    cbca:	|  |  |        |  |  /-- bne.s cbd0 <fileToStack+0x2f6>
    cbcc:	|  |  |        |  |  |   clr.w d0
    cbce:	+--|--|--------|--|--|-- bra.s cc3e <fileToStack+0x364>
            sH->last = sH->first;
    cbd0:	|  |  |        |  |  \-> movea.l 128(sp),a0
    cbd4:	|  |  |        |  |      move.l (a0),d0
    cbd6:	|  |  |        |  |      movea.l 128(sp),a0
    cbda:	|  |  |        |  |      move.l d0,4(a0)
    cbde:	|  +--|--------|--|----- bra.w ca4c <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    cbe2:	|  |  |        |  \----> movea.l 128(sp),a0
    cbe6:	|  |  |        |         move.l 4(a0),d0
    cbea:	|  |  |        |         addq.l #8,d0
    cbec:	|  |  |        |         move.l d0,-(sp)
    cbee:	|  |  |        |         lea 14(sp),a0
    cbf2:	|  |  |        |         move.l a0,-(sp)
    cbf4:	|  |  |        |         jsr 12ef0 <addVarToStackQuick>
    cbfa:	|  |  |        |         addq.l #8,sp
    cbfc:	|  |  |        |         tst.w d0
    cbfe:	|  |  |        |     /-- bne.s cc04 <fileToStack+0x32a>
    cc00:	|  |  |        |     |   clr.w d0
    cc02:	+--|--|--------|-----|-- bra.s cc3e <fileToStack+0x364>
            sH->last = sH->last->next;
    cc04:	|  |  |        |     \-> movea.l 128(sp),a0
    cc08:	|  |  |        |         movea.l 4(a0),a0
    cc0c:	|  |  |        |         move.l 8(a0),d0
    cc10:	|  |  |        |         movea.l 128(sp),a0
    cc14:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    cc18:	|  \--|--------|-------- bra.w ca4c <fileToStack+0x172>
            if (tmp == -1) break;
    cc1c:	|     \--------|-------> nop
    cc1e:	|              |     /-- bra.s cc22 <fileToStack+0x348>
            if (!line) break;
    cc20:	|              \-----|-> nop
        }
    }
    Close(fp);
    cc22:	|                    \-> move.l 100(sp),38(sp)
    cc28:	|                        move.l 1af0a <DOSBase>,d0
    cc2e:	|                        movea.l d0,a6
    cc30:	|                        move.l 38(sp),d1
    cc34:	|                        jsr -36(a6)
    cc38:	|                        move.l d0,34(sp)
    return TRUE;
    cc3c:	|                        moveq #1,d0
}
    cc3e:	\----------------------> move.l (sp)+,d2
    cc40:	                         movea.l (sp)+,a6
    cc42:	                         lea 112(sp),sp
    cc46:	                         rts

0000cc48 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    cc48:	          lea -32(sp),sp
    cc4c:	          move.l a6,-(sp)
    cc4e:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    cc50:	          move.l 44(sp),-(sp)
    cc54:	          jsr 6bc <get2bytes>
    cc5a:	          addq.l #4,sp
    cc5c:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    cc60:	          move.l 32(sp),d0
    cc64:	          addq.l #1,d0
    cc66:	          move.l d0,28(sp)
    cc6a:	          clr.l 24(sp)
    cc6e:	          move.l 1af02 <SysBase>,d0
    cc74:	          movea.l d0,a6
    cc76:	          move.l 28(sp),d0
    cc7a:	          move.l 24(sp),d1
    cc7e:	          jsr -684(a6)
    cc82:	          move.l d0,20(sp)
    cc86:	          move.l 20(sp),d0
    cc8a:	          move.l d0,16(sp)
    if (!s) return NULL;
    cc8e:	      /-- bne.s cc94 <readStringEncoded+0x4c>
    cc90:	      |   moveq #0,d0
    cc92:	/-----|-- bra.s cd04 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    cc94:	|     \-> clr.l 36(sp)
    cc98:	|     /-- bra.s ccea <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    cc9a:	|  /--|-> move.l 44(sp),12(sp)
    cca0:	|  |  |   move.l 1af0a <DOSBase>,d0
    cca6:	|  |  |   movea.l d0,a6
    cca8:	|  |  |   move.l 12(sp),d1
    ccac:	|  |  |   jsr -306(a6)
    ccb0:	|  |  |   move.l d0,8(sp)
    ccb4:	|  |  |   move.l 8(sp),d0
    ccb8:	|  |  |   move.l d0,d1
    ccba:	|  |  |   move.b 1b010 <encode1>,d2
    ccc0:	|  |  |   move.l 36(sp),d0
    ccc4:	|  |  |   movea.l 16(sp),a0
    ccc8:	|  |  |   adda.l d0,a0
    ccca:	|  |  |   move.b d1,d0
    cccc:	|  |  |   eor.b d2,d0
    ccce:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    ccd0:	|  |  |   move.b 1b010 <encode1>,d0
    ccd6:	|  |  |   move.b d0,d1
    ccd8:	|  |  |   move.b 1b011 <encode2>,d0
    ccde:	|  |  |   add.b d1,d0
    cce0:	|  |  |   move.b d0,1b010 <encode1>
    for (a = 0; a < len; a++) {
    cce6:	|  |  |   addq.l #1,36(sp)
    ccea:	|  |  \-> move.l 36(sp),d0
    ccee:	|  |      cmp.l 32(sp),d0
    ccf2:	|  \----- blt.s cc9a <readStringEncoded+0x52>
    }
    s[len] = 0;
    ccf4:	|         move.l 32(sp),d0
    ccf8:	|         movea.l 16(sp),a0
    ccfc:	|         adda.l d0,a0
    ccfe:	|         clr.b (a0)
    return s;
    cd00:	|         move.l 16(sp),d0
}
    cd04:	\-------> move.l (sp)+,d2
    cd06:	          movea.l (sp)+,a6
    cd08:	          lea 32(sp),sp
    cd0c:	          rts

0000cd0e <readTextPlain>:

char *readTextPlain(BPTR fp) {
    cd0e:	             lea -104(sp),sp
    cd12:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    cd16:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    cd1a:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    cd20:	             move.l 124(sp),106(sp)
    cd26:	             clr.l 102(sp)
    cd2a:	             clr.l 98(sp)
    cd2e:	             move.l 1af0a <DOSBase>,d0
    cd34:	             movea.l d0,a6
    cd36:	             move.l 106(sp),d1
    cd3a:	             move.l 102(sp),d2
    cd3e:	             move.l 98(sp),d3
    cd42:	             jsr -66(a6)
    cd46:	             move.l d0,94(sp)
    cd4a:	             move.l 94(sp),d0
    cd4e:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    cd52:	   /-------- bra.s cd96 <readTextPlain+0x88>
        tmp = FGetC(fp);
    cd54:	/--|-------> move.l 124(sp),22(sp)
    cd5a:	|  |         move.l 1af0a <DOSBase>,d0
    cd60:	|  |         movea.l d0,a6
    cd62:	|  |         move.l 22(sp),d1
    cd66:	|  |         jsr -306(a6)
    cd6a:	|  |         move.l d0,18(sp)
    cd6e:	|  |         move.l 18(sp),d0
    cd72:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    cd76:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    cd7c:	|  |         cmpi.b #10,17(sp)
    cd82:	|  |  /----- beq.s cd8c <readTextPlain+0x7e>
    cd84:	|  |  |      moveq #-1,d0
    cd86:	|  |  |      cmp.l 110(sp),d0
    cd8a:	|  |  |  /-- bne.s cd92 <readTextPlain+0x84>
            keepGoing = FALSE;
    cd8c:	|  |  \--|-> clr.w 114(sp)
    cd90:	|  +-----|-- bra.s cd96 <readTextPlain+0x88>
        } else {
            stringSize++;
    cd92:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    cd96:	|  \-------> tst.w 114(sp)
    cd9a:	\----------- bne.s cd54 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    cd9c:	             tst.l 116(sp)
    cda0:	         /-- bne.s cdb0 <readTextPlain+0xa2>
    cda2:	         |   moveq #-1,d0
    cda4:	         |   cmp.l 110(sp),d0
    cda8:	         +-- bne.s cdb0 <readTextPlain+0xa2>
        return NULL;
    cdaa:	         |   moveq #0,d0
    cdac:	      /--|-- bra.w ce96 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    cdb0:	      |  \-> move.l 124(sp),86(sp)
    cdb6:	      |      move.l 90(sp),82(sp)
    cdbc:	      |      moveq #-1,d0
    cdbe:	      |      move.l d0,78(sp)
    cdc2:	      |      move.l 1af0a <DOSBase>,d0
    cdc8:	      |      movea.l d0,a6
    cdca:	      |      move.l 86(sp),d1
    cdce:	      |      move.l 82(sp),d2
    cdd2:	      |      move.l 78(sp),d3
    cdd6:	      |      jsr -66(a6)
    cdda:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    cdde:	      |      move.l 116(sp),d0
    cde2:	      |      addq.l #1,d0
    cde4:	      |      move.l d0,70(sp)
    cde8:	      |      clr.l 66(sp)
    cdec:	      |      move.l 1af02 <SysBase>,d0
    cdf2:	      |      movea.l d0,a6
    cdf4:	      |      move.l 70(sp),d0
    cdf8:	      |      move.l 66(sp),d1
    cdfc:	      |      jsr -684(a6)
    ce00:	      |      move.l d0,62(sp)
    ce04:	      |      move.l 62(sp),d0
    ce08:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    ce0c:	      |  /-- bne.s ce14 <readTextPlain+0x106>
    ce0e:	      |  |   moveq #0,d0
    ce10:	      +--|-- bra.w ce96 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    ce14:	      |  \-> move.l 124(sp),54(sp)
    ce1a:	      |      move.l 58(sp),50(sp)
    ce20:	      |      moveq #1,d0
    ce22:	      |      move.l d0,46(sp)
    ce26:	      |      move.l 116(sp),42(sp)
    ce2c:	      |      move.l 1af0a <DOSBase>,d0
    ce32:	      |      movea.l d0,a6
    ce34:	      |      move.l 54(sp),d1
    ce38:	      |      move.l 50(sp),d2
    ce3c:	      |      move.l 46(sp),d3
    ce40:	      |      move.l 42(sp),d4
    ce44:	      |      jsr -324(a6)
    ce48:	      |      move.l d0,38(sp)
    ce4c:	      |      move.l 38(sp),d0
    ce50:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    ce54:	      |      move.l 34(sp),d0
    ce58:	      |      cmp.l 116(sp),d0
    ce5c:	      |  /-- beq.s ce6c <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    ce5e:	      |  |   pea 17cf8 <PutChar+0x1a2a>
    ce64:	      |  |   jsr 157fa <KPrintF>
    ce6a:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    ce6c:	      |  \-> move.l 124(sp),30(sp)
    ce72:	      |      move.l 1af0a <DOSBase>,d0
    ce78:	      |      movea.l d0,a6
    ce7a:	      |      move.l 30(sp),d1
    ce7e:	      |      jsr -306(a6)
    ce82:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    ce86:	      |      move.l 116(sp),d0
    ce8a:	      |      movea.l 58(sp),a0
    ce8e:	      |      adda.l d0,a0
    ce90:	      |      clr.b (a0)
    }

    return reply;
    ce92:	      |      move.l 58(sp),d0
}
    ce96:	      \----> movem.l (sp)+,d2-d4/a6
    ce9a:	             lea 104(sp),sp
    ce9e:	             rts

0000cea0 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    cea0:	                      lea -144(sp),sp
    cea4:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    cea8:	                      move.l 160(sp),148(sp)
    ceae:	                      move.l #1006,144(sp)
    ceb6:	                      move.l 1af0a <DOSBase>,d0
    cebc:	                      movea.l d0,a6
    cebe:	                      move.l 148(sp),d1
    cec2:	                      move.l 144(sp),d2
    cec6:	                      jsr -30(a6)
    ceca:	                      move.l d0,140(sp)
    cece:	                      move.l 140(sp),d0
    ced2:	                      move.l d0,136(sp)

    if (!fp) {
    ced6:	                  /-- bne.s cef0 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    ced8:	                  |   move.l 160(sp),-(sp)
    cedc:	                  |   pea 17d19 <PutChar+0x1a4b>
    cee2:	                  |   jsr 157fa <KPrintF>
    cee8:	                  |   addq.l #8,sp
        return FALSE;
    ceea:	                  |   clr.w d0
    ceec:	/-----------------|-- bra.w d1ac <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    cef0:	|                 \-> movea.l 164(sp),a0
    cef4:	|                     movea.l 4(a0),a0
    cef8:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    cefc:	|                     move.w 1b012 <saveEncoding>,d0
    cf02:	|                     move.l d0,d0
    cf04:	|                     move.b d0,1b010 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    cf0a:	|                     move.w 1b012 <saveEncoding>,d0
    cf10:	|                     lsr.w #8,d0
    cf12:	|                     move.l d0,d0
    cf14:	|                     move.b d0,1b011 <encode2>

    if (saveEncoding) {
    cf1a:	|                     move.w 1b012 <saveEncoding>,d0
    cf20:	|                 /-- beq.s cf72 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    cf22:	|                 |   move.l 136(sp),116(sp)
    cf28:	|                 |   move.l #97203,112(sp)
    cf30:	|                 |   moveq #99,d0
    cf32:	|                 |   not.b d0
    cf34:	|                 |   add.l sp,d0
    cf36:	|                 |   addi.l #-144,d0
    cf3c:	|                 |   move.l d0,108(sp)
    cf40:	|                 |   move.l 1af0a <DOSBase>,d0
    cf46:	|                 |   movea.l d0,a6
    cf48:	|                 |   move.l 116(sp),d1
    cf4c:	|                 |   move.l 112(sp),d2
    cf50:	|                 |   move.l 108(sp),d3
    cf54:	|                 |   jsr -354(a6)
    cf58:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    cf5c:	|                 |   move.l 136(sp),-(sp)
    cf60:	|                 |   pea 17c32 <PutChar+0x1964>
    cf66:	|                 |   jsr d1b6 <writeStringEncoded>
    cf6c:	|                 |   addq.l #8,sp
    cf6e:	|  /--------------|-- bra.w d184 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    cf72:	|  |              \-> move.l 136(sp),132(sp)
    cf78:	|  |                  move.l #97229,128(sp)
    cf80:	|  |                  moveq #99,d1
    cf82:	|  |                  not.b d1
    cf84:	|  |                  add.l sp,d1
    cf86:	|  |                  addi.l #-144,d1
    cf8c:	|  |                  move.l d1,124(sp)
    cf90:	|  |                  move.l 1af0a <DOSBase>,d0
    cf96:	|  |                  movea.l d0,a6
    cf98:	|  |                  move.l 132(sp),d1
    cf9c:	|  |                  move.l 128(sp),d2
    cfa0:	|  |                  move.l 124(sp),d3
    cfa4:	|  |                  jsr -354(a6)
    cfa8:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    cfac:	|  +----------------- bra.w d184 <stackToFile+0x2e4>
        if (saveEncoding) {
    cfb0:	|  |  /-------------> move.w 1b012 <saveEncoding>,d0
    cfb6:	|  |  |     /-------- beq.w d108 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    cfba:	|  |  |     |         movea.l 152(sp),a0
    cfbe:	|  |  |     |         move.l (a0),d0
    cfc0:	|  |  |     |         moveq #1,d1
    cfc2:	|  |  |     |         cmp.l d0,d1
    cfc4:	|  |  |     |     /-- beq.s d014 <stackToFile+0x174>
    cfc6:	|  |  |     |     |   moveq #3,d1
    cfc8:	|  |  |     |     |   cmp.l d0,d1
    cfca:	|  |  |     |  /--|-- bne.w d0d6 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    cfce:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    cfd4:	|  |  |     |  |  |   move.b 1b010 <encode1>,d0
    cfda:	|  |  |     |  |  |   ext.w d0
    cfdc:	|  |  |     |  |  |   movea.w d0,a0
    cfde:	|  |  |     |  |  |   move.l a0,72(sp)
    cfe2:	|  |  |     |  |  |   move.l 1af0a <DOSBase>,d0
    cfe8:	|  |  |     |  |  |   movea.l d0,a6
    cfea:	|  |  |     |  |  |   move.l 76(sp),d1
    cfee:	|  |  |     |  |  |   move.l 72(sp),d2
    cff2:	|  |  |     |  |  |   jsr -312(a6)
    cff6:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    cffa:	|  |  |     |  |  |   movea.l 152(sp),a0
    cffe:	|  |  |     |  |  |   move.l 4(a0),d0
    d002:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    d006:	|  |  |     |  |  |   move.l d0,-(sp)
    d008:	|  |  |     |  |  |   jsr d1b6 <writeStringEncoded>
    d00e:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    d010:	|  |  |  /--|--|--|-- bra.w d17a <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    d014:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    d018:	|  |  |  |  |  |      move.l 4(a0),d0
    d01c:	|  |  |  |  |  |  /-- bmi.s d08c <stackToFile+0x1ec>
    d01e:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d022:	|  |  |  |  |  |  |   move.l 4(a0),d0
    d026:	|  |  |  |  |  |  |   cmpi.l #255,d0
    d02c:	|  |  |  |  |  |  +-- bgt.s d08c <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    d02e:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    d034:	|  |  |  |  |  |  |   move.b 1b010 <encode1>,d0
    d03a:	|  |  |  |  |  |  |   eori.b #2,d0
    d03e:	|  |  |  |  |  |  |   ext.w d0
    d040:	|  |  |  |  |  |  |   movea.w d0,a0
    d042:	|  |  |  |  |  |  |   move.l a0,60(sp)
    d046:	|  |  |  |  |  |  |   move.l 1af0a <DOSBase>,d0
    d04c:	|  |  |  |  |  |  |   movea.l d0,a6
    d04e:	|  |  |  |  |  |  |   move.l 64(sp),d1
    d052:	|  |  |  |  |  |  |   move.l 60(sp),d2
    d056:	|  |  |  |  |  |  |   jsr -312(a6)
    d05a:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    d05e:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    d064:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d068:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    d06e:	|  |  |  |  |  |  |   move.l 1af0a <DOSBase>,d0
    d074:	|  |  |  |  |  |  |   movea.l d0,a6
    d076:	|  |  |  |  |  |  |   move.l 52(sp),d1
    d07a:	|  |  |  |  |  |  |   move.l 48(sp),d2
    d07e:	|  |  |  |  |  |  |   jsr -312(a6)
    d082:	|  |  |  |  |  |  |   move.l d0,44(sp)
    d086:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    d088:	|  |  |  +--|--|--|-- bra.w d17a <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    d08c:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    d092:	|  |  |  |  |  |      move.b 1b010 <encode1>,d0
    d098:	|  |  |  |  |  |      eori.b #1,d0
    d09c:	|  |  |  |  |  |      ext.w d0
    d09e:	|  |  |  |  |  |      movea.w d0,a0
    d0a0:	|  |  |  |  |  |      move.l a0,36(sp)
    d0a4:	|  |  |  |  |  |      move.l 1af0a <DOSBase>,d0
    d0aa:	|  |  |  |  |  |      movea.l d0,a6
    d0ac:	|  |  |  |  |  |      move.l 40(sp),d1
    d0b0:	|  |  |  |  |  |      move.l 36(sp),d2
    d0b4:	|  |  |  |  |  |      jsr -312(a6)
    d0b8:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    d0bc:	|  |  |  |  |  |      movea.l 152(sp),a0
    d0c0:	|  |  |  |  |  |      move.l 4(a0),d0
    d0c4:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    d0c8:	|  |  |  |  |  |      move.l d0,-(sp)
    d0ca:	|  |  |  |  |  |      jsr 958 <put4bytes>
    d0d0:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    d0d2:	|  |  |  +--|--|----- bra.w d17a <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    d0d6:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    d0da:	|  |  |  |  |         pea 17d2b <PutChar+0x1a5d>
    d0e0:	|  |  |  |  |         jsr 157fa <KPrintF>
    d0e6:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    d0e8:	|  |  |  |  |         move.l 136(sp),28(sp)
    d0ee:	|  |  |  |  |         move.l 1af0a <DOSBase>,d0
    d0f4:	|  |  |  |  |         movea.l d0,a6
    d0f6:	|  |  |  |  |         move.l 28(sp),d1
    d0fa:	|  |  |  |  |         jsr -36(a6)
    d0fe:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    d102:	|  |  |  |  |         clr.w d0
    d104:	+--|--|--|--|-------- bra.w d1ac <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    d108:	|  |  |  |  \-------> move.l 152(sp),d0
    d10c:	|  |  |  |            move.l d0,-(sp)
    d10e:	|  |  |  |            jsr 13c04 <getTextFromAnyVar>
    d114:	|  |  |  |            addq.l #4,sp
    d116:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    d11a:	|  |  |  |     /----- beq.s d18e <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    d11c:	|  |  |  |     |      movea.l 100(sp),a0
    d120:	|  |  |  |     |      move.b (a0),d0
    d122:	|  |  |  |     |      ext.w d0
    d124:	|  |  |  |     |      movea.w d0,a0
    d126:	|  |  |  |     |      move.l a0,12(sp)
    d12a:	|  |  |  |     |      move.l 136(sp),96(sp)
    d130:	|  |  |  |     |      move.l #97671,92(sp)
    d138:	|  |  |  |     |      moveq #99,d0
    d13a:	|  |  |  |     |      not.b d0
    d13c:	|  |  |  |     |      add.l sp,d0
    d13e:	|  |  |  |     |      addi.l #-144,d0
    d144:	|  |  |  |     |      move.l d0,88(sp)
    d148:	|  |  |  |     |      move.l 1af0a <DOSBase>,d0
    d14e:	|  |  |  |     |      movea.l d0,a6
    d150:	|  |  |  |     |      move.l 96(sp),d1
    d154:	|  |  |  |     |      move.l 92(sp),d2
    d158:	|  |  |  |     |      move.l 88(sp),d3
    d15c:	|  |  |  |     |      jsr -354(a6)
    d160:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    d164:	|  |  |  |     |      move.l 100(sp),80(sp)
    d16a:	|  |  |  |     |      move.l 1af02 <SysBase>,d0
    d170:	|  |  |  |     |      movea.l d0,a6
    d172:	|  |  |  |     |      movea.l 80(sp),a1
    d176:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    d17a:	|  |  |  \-----|----> movea.l 152(sp),a0
    d17e:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    d184:	|  \--|--------|----> tst.l 152(sp)
    d188:	|     \--------|----- bne.w cfb0 <stackToFile+0x110>
    d18c:	|              |  /-- bra.s d190 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    d18e:	|              \--|-> nop
    }
    Close(fp);
    d190:	|                 \-> move.l 136(sp),20(sp)
    d196:	|                     move.l 1af0a <DOSBase>,d0
    d19c:	|                     movea.l d0,a6
    d19e:	|                     move.l 20(sp),d1
    d1a2:	|                     jsr -36(a6)
    d1a6:	|                     move.l d0,16(sp)
    return TRUE;
    d1aa:	|                     moveq #1,d0
}
    d1ac:	\-------------------> movem.l (sp)+,d2-d3/a6
    d1b0:	                      lea 144(sp),sp
    d1b4:	                      rts

0000d1b6 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    d1b6:	       lea -20(sp),sp
    d1ba:	       move.l a6,-(sp)
    d1bc:	       move.l d2,-(sp)
	int a, len = strlen (s);
    d1be:	       move.l 32(sp),-(sp)
    d1c2:	       jsr 12b1a <strlen>
    d1c8:	       addq.l #4,sp
    d1ca:	       move.l d0,20(sp)

	put2bytes (len, fp);
    d1ce:	       move.l 36(sp),-(sp)
    d1d2:	       move.l 24(sp),-(sp)
    d1d6:	       jsr 8d0 <put2bytes>
    d1dc:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    d1de:	       clr.l 24(sp)
    d1e2:	   /-- bra.s d238 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    d1e4:	/--|-> move.l 36(sp),16(sp)
    d1ea:	|  |   move.l 24(sp),d0
    d1ee:	|  |   movea.l 32(sp),a0
    d1f2:	|  |   adda.l d0,a0
    d1f4:	|  |   move.b (a0),d1
    d1f6:	|  |   move.b 1b010 <encode1>,d0
    d1fc:	|  |   eor.b d1,d0
    d1fe:	|  |   ext.w d0
    d200:	|  |   movea.w d0,a0
    d202:	|  |   move.l a0,12(sp)
    d206:	|  |   move.l 1af0a <DOSBase>,d0
    d20c:	|  |   movea.l d0,a6
    d20e:	|  |   move.l 16(sp),d1
    d212:	|  |   move.l 12(sp),d2
    d216:	|  |   jsr -312(a6)
    d21a:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    d21e:	|  |   move.b 1b010 <encode1>,d0
    d224:	|  |   move.b d0,d1
    d226:	|  |   move.b 1b011 <encode2>,d0
    d22c:	|  |   add.b d1,d0
    d22e:	|  |   move.b d0,1b010 <encode1>
	for (a = 0; a < len; a ++) {
    d234:	|  |   addq.l #1,24(sp)
    d238:	|  \-> move.l 24(sp),d0
    d23c:	|      cmp.l 20(sp),d0
    d240:	\----- blt.s d1e4 <writeStringEncoded+0x2e>
	}
}
    d242:	       nop
    d244:	       nop
    d246:	       move.l (sp)+,d2
    d248:	       movea.l (sp)+,a6
    d24a:	       lea 20(sp),sp
    d24e:	       rts

0000d250 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    d250:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    d252:	                   tst.l 8(sp)
    d256:	               /-- bne.s d25c <failSecurityCheck+0xc>
    d258:	               |   moveq #1,d0
    d25a:	/--------------|-- bra.s d2da <failSecurityCheck+0x8a>

	int a = 0;
    d25c:	|              \-> clr.l (sp)

	while (fn[a]) {
    d25e:	|     /----------- bra.s d2cc <failSecurityCheck+0x7c>
		switch (fn[a]) {
    d260:	|  /--|----------> move.l (sp),d0
    d262:	|  |  |            movea.l 8(sp),a0
    d266:	|  |  |            adda.l d0,a0
    d268:	|  |  |            move.b (a0),d0
    d26a:	|  |  |            ext.w d0
    d26c:	|  |  |            movea.w d0,a0
    d26e:	|  |  |            moveq #124,d0
    d270:	|  |  |            cmp.l a0,d0
    d272:	|  |  |     /----- beq.s d2b4 <failSecurityCheck+0x64>
    d274:	|  |  |     |      moveq #124,d1
    d276:	|  |  |     |      cmp.l a0,d1
    d278:	|  |  |  /--|----- blt.s d2ca <failSecurityCheck+0x7a>
    d27a:	|  |  |  |  |      moveq #92,d0
    d27c:	|  |  |  |  |      cmp.l a0,d0
    d27e:	|  |  |  |  +----- beq.s d2b4 <failSecurityCheck+0x64>
    d280:	|  |  |  |  |      moveq #92,d1
    d282:	|  |  |  |  |      cmp.l a0,d1
    d284:	|  |  |  +--|----- blt.s d2ca <failSecurityCheck+0x7a>
    d286:	|  |  |  |  |      moveq #60,d0
    d288:	|  |  |  |  |      cmp.l a0,d0
    d28a:	|  |  |  |  |  /-- blt.s d2aa <failSecurityCheck+0x5a>
    d28c:	|  |  |  |  |  |   moveq #34,d1
    d28e:	|  |  |  |  |  |   cmp.l a0,d1
    d290:	|  |  |  +--|--|-- bgt.s d2ca <failSecurityCheck+0x7a>
    d292:	|  |  |  |  |  |   moveq #-34,d1
    d294:	|  |  |  |  |  |   add.l a0,d1
    d296:	|  |  |  |  |  |   move.l #83894529,d0
    d29c:	|  |  |  |  |  |   lsr.l d1,d0
    d29e:	|  |  |  |  |  |   moveq #1,d1
    d2a0:	|  |  |  |  |  |   and.l d1,d0
    d2a2:	|  |  |  |  |  |   sne d0
    d2a4:	|  |  |  |  |  |   neg.b d0
    d2a6:	|  |  |  |  +--|-- bne.s d2b4 <failSecurityCheck+0x64>
    d2a8:	|  |  |  +--|--|-- bra.s d2ca <failSecurityCheck+0x7a>
    d2aa:	|  |  |  |  |  \-> lea -62(a0),a0
    d2ae:	|  |  |  |  |      moveq #1,d0
    d2b0:	|  |  |  |  |      cmp.l a0,d0
    d2b2:	|  |  |  +--|----- bcs.s d2ca <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    d2b4:	|  |  |  |  \----> move.l 8(sp),-(sp)
    d2b8:	|  |  |  |         pea 17d8b <PutChar+0x1abd>
    d2be:	|  |  |  |         jsr 157fa <KPrintF>
    d2c4:	|  |  |  |         addq.l #8,sp
				return TRUE;
    d2c6:	|  |  |  |         moveq #1,d0
    d2c8:	+--|--|--|-------- bra.s d2da <failSecurityCheck+0x8a>
		}
		a++;
    d2ca:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    d2cc:	|  |  \----------> move.l (sp),d0
    d2ce:	|  |               movea.l 8(sp),a0
    d2d2:	|  |               adda.l d0,a0
    d2d4:	|  |               move.b (a0),d0
    d2d6:	|  \-------------- bne.s d260 <failSecurityCheck+0x10>
	}
	return FALSE;
    d2d8:	|                  clr.w d0
}
    d2da:	\----------------> addq.l #4,sp
    d2dc:	                   rts

0000d2de <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    d2de:	             lea -24(sp),sp
    d2e2:	             move.l a6,-(sp)
    d2e4:	             move.l 40(sp),d0
    d2e8:	             move.w d0,d0
    d2ea:	             move.w d0,6(sp)
	int fileNum = -1;
    d2ee:	             moveq #-1,d0
    d2f0:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    d2f4:	             jsr 510a <killSpeechTimers>

	switch (numParams) {
    d2fa:	             moveq #2,d0
    d2fc:	             cmp.l 32(sp),d0
    d300:	      /----- beq.s d344 <sayCore+0x66>
    d302:	      |      moveq #3,d0
    d304:	      |      cmp.l 32(sp),d0
    d308:	/-----|----- bne.w d426 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    d30c:	|     |      movea.l 36(sp),a0
    d310:	|     |      move.l 24(a0),d0
    d314:	|     |      move.l d0,-(sp)
    d316:	|     |      pea 5 <_start+0x5>
    d31a:	|     |      lea 20(sp),a0
    d31e:	|     |      move.l a0,-(sp)
    d320:	|     |      jsr 1362e <getValueType>
    d326:	|     |      lea 12(sp),sp
    d32a:	|     |      tst.w d0
    d32c:	|     |  /-- bne.s d334 <sayCore+0x56>
    d32e:	|     |  |   moveq #1,d0
    d330:	|  /--|--|-- bra.w d436 <sayCore+0x158>
			trimStack (&fun -> stack);
    d334:	|  |  |  \-> moveq #24,d0
    d336:	|  |  |      add.l 36(sp),d0
    d33a:	|  |  |      move.l d0,-(sp)
    d33c:	|  |  |      jsr 13fb2 <trimStack>
    d342:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    d344:	|  |  \----> movea.l 36(sp),a0
    d348:	|  |         move.l 24(a0),d0
    d34c:	|  |         move.l d0,-(sp)
    d34e:	|  |         jsr 13c04 <getTextFromAnyVar>
    d354:	|  |         addq.l #4,sp
    d356:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    d35a:	|  |     /-- bne.s d362 <sayCore+0x84>
    d35c:	|  |     |   moveq #1,d0
    d35e:	|  +-----|-- bra.w d436 <sayCore+0x158>
			trimStack (&fun -> stack);
    d362:	|  |     \-> moveq #24,d0
    d364:	|  |         add.l 36(sp),d0
    d368:	|  |         move.l d0,-(sp)
    d36a:	|  |         jsr 13fb2 <trimStack>
    d370:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d372:	|  |         movea.l 36(sp),a0
    d376:	|  |         move.l 24(a0),d0
    d37a:	|  |         move.l d0,-(sp)
    d37c:	|  |         pea 7 <_start+0x7>
    d380:	|  |         lea 16(sp),a0
    d384:	|  |         move.l a0,-(sp)
    d386:	|  |         jsr 1362e <getValueType>
    d38c:	|  |         lea 12(sp),sp
    d390:	|  |         tst.w d0
    d392:	|  |     /-- bne.s d39a <sayCore+0xbc>
    d394:	|  |     |   moveq #1,d0
    d396:	|  +-----|-- bra.w d436 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d39a:	|  |     \-> movea.l 36(sp),a0
    d39e:	|  |         move.l 24(a0),d0
    d3a2:	|  |         move.l d0,-(sp)
    d3a4:	|  |         pea 7 <_start+0x7>
    d3a8:	|  |         lea 16(sp),a0
    d3ac:	|  |         move.l a0,-(sp)
    d3ae:	|  |         jsr 1362e <getValueType>
    d3b4:	|  |         lea 12(sp),sp
    d3b8:	|  |         tst.w d0
    d3ba:	|  |     /-- bne.s d3c0 <sayCore+0xe2>
    d3bc:	|  |     |   moveq #1,d0
    d3be:	|  +-----|-- bra.s d436 <sayCore+0x158>
			trimStack (&fun -> stack);
    d3c0:	|  |     \-> moveq #24,d0
    d3c2:	|  |         add.l 36(sp),d0
    d3c6:	|  |         move.l d0,-(sp)
    d3c8:	|  |         jsr 13fb2 <trimStack>
    d3ce:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    d3d0:	|  |         movea.w 6(sp),a0
    d3d4:	|  |         move.l 12(sp),d1
    d3d8:	|  |         move.l 8(sp),d0
    d3dc:	|  |         move.l a0,-(sp)
    d3de:	|  |         move.l d1,-(sp)
    d3e0:	|  |         move.l d0,-(sp)
    d3e2:	|  |         move.l 36(sp),-(sp)
    d3e6:	|  |         jsr 7084 <wrapSpeech>
    d3ec:	|  |         lea 16(sp),sp
    d3f0:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    d3f4:	|  |         movea.l 36(sp),a0
    d3f8:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    d3fe:	|  |         movea.l 36(sp),a0
    d402:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    d408:	|  |         move.l 24(sp),16(sp)
    d40e:	|  |         move.l 1af02 <SysBase>,d0
    d414:	|  |         movea.l d0,a6
    d416:	|  |         movea.l 16(sp),a1
    d41a:	|  |         jsr -690(a6)
			newText = NULL;
    d41e:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    d422:	|  |         moveq #0,d0
    d424:	|  +-------- bra.s d436 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    d426:	\--|-------> pea 17e11 <PutChar+0x1b43>
    d42c:	   |         jsr 157fa <KPrintF>
    d432:	   |         addq.l #4,sp
	return BR_ERROR;
    d434:	   |         moveq #1,d0
}
    d436:	   \-------> movea.l (sp)+,a6
    d438:	             lea 24(sp),sp
    d43c:	             rts

0000d43e <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    d43e:	pea 1 <_start+0x1>
    d442:	move.l 12(sp),-(sp)
    d446:	move.l 12(sp),-(sp)
    d44a:	jsr d2de <sayCore>
    d450:	lea 12(sp),sp
}
    d454:	rts

0000d456 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    d456:	clr.l -(sp)
    d458:	move.l 12(sp),-(sp)
    d45c:	move.l 12(sp),-(sp)
    d460:	jsr d2de <sayCore>
    d466:	lea 12(sp),sp
}
    d46a:	rts

0000d46c <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    d46c:	moveq #2,d0
}
    d46e:	rts

0000d470 <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    d470:	moveq #2,d0
}
    d472:	rts

0000d474 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    d474:	nop
    d476:	rts

0000d478 <builtIn_setCursor>:

builtIn(setCursor)
{
    d478:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    d47a:	movea.l 12(sp),a0
    d47e:	move.l 24(a0),d0
    d482:	move.l d0,-(sp)
    d484:	jsr 13b06 <getAnimationFromVar>
    d48a:	addq.l #4,sp
    d48c:	move.l d0,(sp)
	pickAnimCursor (aa);
    d48e:	move.l (sp),-(sp)
    d490:	jsr ece <pickAnimCursor>
    d496:	addq.l #4,sp
	trimStack (&fun -> stack);
    d498:	moveq #24,d0
    d49a:	add.l 12(sp),d0
    d49e:	move.l d0,-(sp)
    d4a0:	jsr 13fb2 <trimStack>
    d4a6:	addq.l #4,sp
	return BR_CONTINUE;
    d4a8:	moveq #2,d0
}
    d4aa:	addq.l #4,sp
    d4ac:	rts

0000d4ae <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    d4ae:	move.l 1aebe <input+0xa>,d1
    d4b4:	move.l 1b014 <cameraX>,d0
    d4ba:	add.l d0,d1
    d4bc:	moveq #28,d0
    d4be:	add.l 8(sp),d0
    d4c2:	move.l d1,-(sp)
    d4c4:	pea 1 <_start+0x1>
    d4c8:	move.l d0,-(sp)
    d4ca:	jsr 13f20 <setVariable>
    d4d0:	lea 12(sp),sp
	return BR_CONTINUE;
    d4d4:	moveq #2,d0
}
    d4d6:	rts

0000d4d8 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    d4d8:	move.l 1aec2 <input+0xe>,d1
    d4de:	move.l 1b018 <cameraY>,d0
    d4e4:	add.l d0,d1
    d4e6:	moveq #28,d0
    d4e8:	add.l 8(sp),d0
    d4ec:	move.l d1,-(sp)
    d4ee:	pea 1 <_start+0x1>
    d4f2:	move.l d0,-(sp)
    d4f4:	jsr 13f20 <setVariable>
    d4fa:	lea 12(sp),sp
	return BR_CONTINUE;
    d4fe:	moveq #2,d0
}
    d500:	rts

0000d502 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    d502:	move.l 1aebe <input+0xa>,d0
    d508:	move.l d0,-(sp)
    d50a:	jsr 15c36 <__floatsisf>
    d510:	addq.l #4,sp
    d512:	move.l d0,d1
    d514:	move.l 1a89e <cameraZoom>,d0
    d51a:	move.l d0,-(sp)
    d51c:	move.l d1,-(sp)
    d51e:	jsr 15ce8 <__mulsf3>
    d524:	addq.l #8,sp
    d526:	move.l d0,-(sp)
    d528:	jsr 15bce <__fixsfsi>
    d52e:	addq.l #4,sp
    d530:	move.l d0,d1
    d532:	moveq #28,d0
    d534:	add.l 8(sp),d0
    d538:	move.l d1,-(sp)
    d53a:	pea 1 <_start+0x1>
    d53e:	move.l d0,-(sp)
    d540:	jsr 13f20 <setVariable>
    d546:	lea 12(sp),sp
	return BR_CONTINUE;
    d54a:	moveq #2,d0
}
    d54c:	rts

0000d54e <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    d54e:	move.l 1aec2 <input+0xe>,d0
    d554:	move.l d0,-(sp)
    d556:	jsr 15c36 <__floatsisf>
    d55c:	addq.l #4,sp
    d55e:	move.l d0,d1
    d560:	move.l 1a89e <cameraZoom>,d0
    d566:	move.l d0,-(sp)
    d568:	move.l d1,-(sp)
    d56a:	jsr 15ce8 <__mulsf3>
    d570:	addq.l #8,sp
    d572:	move.l d0,-(sp)
    d574:	jsr 15bce <__fixsfsi>
    d57a:	addq.l #4,sp
    d57c:	move.l d0,d1
    d57e:	moveq #28,d0
    d580:	add.l 8(sp),d0
    d584:	move.l d1,-(sp)
    d586:	pea 1 <_start+0x1>
    d58a:	move.l d0,-(sp)
    d58c:	jsr 13f20 <setVariable>
    d592:	lea 12(sp),sp
	return BR_CONTINUE;
    d596:	moveq #2,d0
}
    d598:	rts

0000d59a <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    d59a:	jsr 6b38 <statusBarText>
    d5a0:	move.l d0,d1
    d5a2:	moveq #28,d0
    d5a4:	add.l 8(sp),d0
    d5a8:	move.l d1,-(sp)
    d5aa:	move.l d0,-(sp)
    d5ac:	jsr 13850 <makeTextVar>
    d5b2:	addq.l #8,sp
	return BR_CONTINUE;
    d5b4:	moveq #2,d0
}
    d5b6:	rts

0000d5b8 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    d5b8:	       lea -20(sp),sp
    d5bc:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d5be:	       movea.l 32(sp),a0
    d5c2:	       move.l 24(a0),d0
    d5c6:	       move.l d0,-(sp)
    d5c8:	       jsr 13c04 <getTextFromAnyVar>
    d5ce:	       addq.l #4,sp
    d5d0:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    d5d4:	   /-- bne.s d5dc <builtIn_getMatchingFiles+0x24>
    d5d6:	   |   moveq #1,d0
    d5d8:	/--|-- bra.w d69e <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    d5dc:	|  \-> moveq #24,d0
    d5de:	|      add.l 32(sp),d0
    d5e2:	|      move.l d0,-(sp)
    d5e4:	|      jsr 13fb2 <trimStack>
    d5ea:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    d5ec:	|      moveq #28,d0
    d5ee:	|      add.l 32(sp),d0
    d5f2:	|      move.l d0,-(sp)
    d5f4:	|      jsr 1387c <unlinkVar>
    d5fa:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    d5fc:	|      movea.l 32(sp),a0
    d600:	|      moveq #6,d0
    d602:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    d606:	|      moveq #12,d0
    d608:	|      move.l d0,16(sp)
    d60c:	|      clr.l 12(sp)
    d610:	|      move.l 1af02 <SysBase>,d0
    d616:	|      movea.l d0,a6
    d618:	|      move.l 16(sp),d0
    d61c:	|      move.l 12(sp),d1
    d620:	|      jsr -684(a6)
    d624:	|      move.l d0,8(sp)
    d628:	|      move.l 8(sp),d0
    d62c:	|      movea.l 32(sp),a0
    d630:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    d634:	|      moveq #32,d0
    d636:	|      add.l 32(sp),d0
    d63a:	|  /-- bne.s d640 <builtIn_getMatchingFiles+0x88>
    d63c:	|  |   moveq #1,d0
    d63e:	+--|-- bra.s d69e <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    d640:	|  \-> movea.l 32(sp),a0
    d644:	|      movea.l 32(a0),a0
    d648:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    d64a:	|      movea.l 32(sp),a0
    d64e:	|      movea.l 32(a0),a0
    d652:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    d656:	|      movea.l 32(sp),a0
    d65a:	|      movea.l 32(a0),a0
    d65e:	|      moveq #1,d0
    d660:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    d664:	|      movea.l 32(sp),a0
    d668:	|      move.l 32(a0),d0
    d66c:	|      move.l 20(sp),-(sp)
    d670:	|      move.l d0,-(sp)
    d672:	|      jsr 133ea <getSavedGamesStack>
    d678:	|      addq.l #8,sp
    d67a:	|      tst.w d0
    d67c:	|  /-- bne.s d682 <builtIn_getMatchingFiles+0xca>
    d67e:	|  |   moveq #1,d0
    d680:	+--|-- bra.s d69e <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    d682:	|  \-> move.l 20(sp),4(sp)
    d688:	|      move.l 1af02 <SysBase>,d0
    d68e:	|      movea.l d0,a6
    d690:	|      movea.l 4(sp),a1
    d694:	|      jsr -690(a6)
	newText = NULL;
    d698:	|      clr.l 20(sp)
	return BR_CONTINUE;
    d69c:	|      moveq #2,d0
}
    d69e:	\----> movea.l (sp)+,a6
    d6a0:	       lea 20(sp),sp
    d6a4:	       rts

0000d6a6 <builtIn_saveGame>:

builtIn(saveGame)
{
    d6a6:	       lea -12(sp),sp
    d6aa:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    d6ac:	       movea.l 24(sp),a0
    d6b0:	       move.l 24(a0),d0
    d6b4:	       move.l d0,-(sp)
    d6b6:	       jsr 13c04 <getTextFromAnyVar>
    d6bc:	       addq.l #4,sp
    d6be:	       move.l d0,1aece <loadNow>
    trimStack(&fun->stack);
    d6c4:	       moveq #24,d0
    d6c6:	       add.l 24(sp),d0
    d6ca:	       move.l d0,-(sp)
    d6cc:	       jsr 13fb2 <trimStack>
    d6d2:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    d6d4:	       move.l 1aece <loadNow>,d0
    d6da:	       move.l d0,-(sp)
    d6dc:	       jsr 2fe <encodeFilename>
    d6e2:	       addq.l #4,sp
    d6e4:	       move.l d0,12(sp)
    FreeVec(loadNow);
    d6e8:	       move.l 1aece <loadNow>,8(sp)
    d6f0:	       move.l 1af02 <SysBase>,d0
    d6f6:	       movea.l d0,a6
    d6f8:	       movea.l 8(sp),a1
    d6fc:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    d700:	       move.l 12(sp),-(sp)
    d704:	       jsr d250 <failSecurityCheck>
    d70a:	       addq.l #4,sp
    d70c:	       tst.w d0
    d70e:	   /-- beq.s d714 <builtIn_saveGame+0x6e>
    d710:	   |   moveq #1,d0
    d712:	/--|-- bra.s d764 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    d714:	|  \-> move.l 12(sp),-(sp)
    d718:	|      pea 17e3f <PutChar+0x1b71>
    d71e:	|      jsr 12b5a <joinStrings>
    d724:	|      addq.l #8,sp
    d726:	|      move.l d0,1aece <loadNow>
    FreeVec(aaaaa);
    d72c:	|      move.l 12(sp),4(sp)
    d732:	|      move.l 1af02 <SysBase>,d0
    d738:	|      movea.l d0,a6
    d73a:	|      movea.l 4(sp),a1
    d73e:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    d742:	|      moveq #28,d0
    d744:	|      add.l 24(sp),d0
    d748:	|      clr.l -(sp)
    d74a:	|      pea 1 <_start+0x1>
    d74e:	|      move.l d0,-(sp)
    d750:	|      jsr 13f20 <setVariable>
    d756:	|      lea 12(sp),sp
    saverFunc = fun;
    d75a:	|      move.l 24(sp),1b024 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    d762:	|      moveq #0,d0
}
    d764:	\----> movea.l (sp)+,a6
    d766:	       lea 12(sp),sp
    d76a:	       rts

0000d76c <builtIn_fileExists>:

builtIn(fileExists)
{
    d76c:	       lea -36(sp),sp
    d770:	       move.l a6,-(sp)
    d772:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    d774:	       movea.l 52(sp),a0
    d778:	       move.l 24(a0),d0
    d77c:	       move.l d0,-(sp)
    d77e:	       jsr 13c04 <getTextFromAnyVar>
    d784:	       addq.l #4,sp
    d786:	       move.l d0,1aece <loadNow>
    trimStack(&fun->stack);
    d78c:	       moveq #24,d0
    d78e:	       add.l 52(sp),d0
    d792:	       move.l d0,-(sp)
    d794:	       jsr 13fb2 <trimStack>
    d79a:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    d79c:	       move.l 1aece <loadNow>,d0
    d7a2:	       move.l d0,-(sp)
    d7a4:	       jsr 2fe <encodeFilename>
    d7aa:	       addq.l #4,sp
    d7ac:	       move.l d0,40(sp)
    FreeVec(loadNow);
    d7b0:	       move.l 1aece <loadNow>,36(sp)
    d7b8:	       move.l 1af02 <SysBase>,d0
    d7be:	       movea.l d0,a6
    d7c0:	       movea.l 36(sp),a1
    d7c4:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    d7c8:	       move.l 40(sp),-(sp)
    d7cc:	       jsr d250 <failSecurityCheck>
    d7d2:	       addq.l #4,sp
    d7d4:	       tst.w d0
    d7d6:	   /-- beq.s d7de <builtIn_fileExists+0x72>
    d7d8:	   |   moveq #1,d0
    d7da:	/--|-- bra.w d87e <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    d7de:	|  \-> move.l 40(sp),32(sp)
    d7e4:	|      move.l #1005,28(sp)
    d7ec:	|      move.l 1af0a <DOSBase>,d0
    d7f2:	|      movea.l d0,a6
    d7f4:	|      move.l 32(sp),d1
    d7f8:	|      move.l 28(sp),d2
    d7fc:	|      jsr -30(a6)
    d800:	|      move.l d0,24(sp)
    d804:	|      move.l 24(sp),d0
    d808:	|      move.l d0,20(sp)
    if (!fp) {        
    d80c:	|  /-- bne.s d81c <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    d80e:	|  |   pea 17e41 <PutChar+0x1b73>
    d814:	|  |   jsr 157fa <KPrintF>
    d81a:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    d81c:	|  \-> tst.l 20(sp)
    d820:	|      sne d0
    d822:	|      neg.b d0
    d824:	|      moveq #0,d1
    d826:	|      move.b d0,d1
    d828:	|      moveq #28,d0
    d82a:	|      add.l 52(sp),d0
    d82e:	|      move.l d1,-(sp)
    d830:	|      pea 1 <_start+0x1>
    d834:	|      move.l d0,-(sp)
    d836:	|      jsr 13f20 <setVariable>
    d83c:	|      lea 12(sp),sp
    if (fp) Close(fp);
    d840:	|      tst.l 20(sp)
    d844:	|  /-- beq.s d860 <builtIn_fileExists+0xf4>
    d846:	|  |   move.l 20(sp),16(sp)
    d84c:	|  |   move.l 1af0a <DOSBase>,d0
    d852:	|  |   movea.l d0,a6
    d854:	|  |   move.l 16(sp),d1
    d858:	|  |   jsr -36(a6)
    d85c:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    d860:	|  \-> move.l 40(sp),8(sp)
    d866:	|      move.l 1af02 <SysBase>,d0
    d86c:	|      movea.l d0,a6
    d86e:	|      movea.l 8(sp),a1
    d872:	|      jsr -690(a6)
    loadNow = NULL;
    d876:	|      clr.l 1aece <loadNow>
    return BR_CONTINUE;
    d87c:	|      moveq #2,d0
}
    d87e:	\----> move.l (sp)+,d2
    d880:	       movea.l (sp)+,a6
    d882:	       lea 36(sp),sp
    d886:	       rts

0000d888 <builtIn_loadGame>:

builtIn(loadGame)
{
    d888:	       lea -36(sp),sp
    d88c:	       move.l a6,-(sp)
    d88e:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    d890:	       movea.l 52(sp),a0
    d894:	       move.l 24(a0),d0
    d898:	       move.l d0,-(sp)
    d89a:	       jsr 13c04 <getTextFromAnyVar>
    d8a0:	       addq.l #4,sp
    d8a2:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    d8a6:	       moveq #24,d0
    d8a8:	       add.l 52(sp),d0
    d8ac:	       move.l d0,-(sp)
    d8ae:	       jsr 13fb2 <trimStack>
    d8b4:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    d8b6:	       move.l 40(sp),-(sp)
    d8ba:	       jsr 2fe <encodeFilename>
    d8c0:	       addq.l #4,sp
    d8c2:	       move.l d0,1aece <loadNow>
    FreeVec(aaaaa);
    d8c8:	       move.l 40(sp),36(sp)
    d8ce:	       move.l 1af02 <SysBase>,d0
    d8d4:	       movea.l d0,a6
    d8d6:	       movea.l 36(sp),a1
    d8da:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    d8de:	       move.l 1aece <loadNow>,d0
    d8e4:	       move.l d0,-(sp)
    d8e6:	       jsr d250 <failSecurityCheck>
    d8ec:	       addq.l #4,sp
    d8ee:	       tst.w d0
    d8f0:	   /-- beq.s d8f6 <builtIn_loadGame+0x6e>
    d8f2:	   |   moveq #1,d0
    d8f4:	/--|-- bra.s d966 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    d8f6:	|  \-> move.l 1aece <loadNow>,32(sp)
    d8fe:	|      move.l #1005,28(sp)
    d906:	|      move.l 1af0a <DOSBase>,d0
    d90c:	|      movea.l d0,a6
    d90e:	|      move.l 32(sp),d1
    d912:	|      move.l 28(sp),d2
    d916:	|      jsr -30(a6)
    d91a:	|      move.l d0,24(sp)
    d91e:	|      move.l 24(sp),d0
    d922:	|      move.l d0,20(sp)
    if (fp) {
    d926:	|  /-- beq.s d946 <builtIn_loadGame+0xbe>
        Close(fp);
    d928:	|  |   move.l 20(sp),12(sp)
    d92e:	|  |   move.l 1af0a <DOSBase>,d0
    d934:	|  |   movea.l d0,a6
    d936:	|  |   move.l 12(sp),d1
    d93a:	|  |   jsr -36(a6)
    d93e:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    d942:	|  |   moveq #0,d0
    d944:	+--|-- bra.s d966 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    d946:	|  \-> move.l 1aece <loadNow>,16(sp)
    d94e:	|      move.l 1af02 <SysBase>,d0
    d954:	|      movea.l d0,a6
    d956:	|      movea.l 16(sp),a1
    d95a:	|      jsr -690(a6)
    loadNow = NULL;
    d95e:	|      clr.l 1aece <loadNow>
    return BR_CONTINUE;
    d964:	|      moveq #2,d0
}
    d966:	\----> move.l (sp)+,d2
    d968:	       movea.l (sp)+,a6
    d96a:	       lea 36(sp),sp
    d96e:	       rts

0000d970 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    d970:	move.l 1affa <sceneHeight>,d0
    d976:	move.l d0,d1
    d978:	move.l 1aff6 <sceneWidth>,d0
    d97e:	move.l d1,-(sp)
    d980:	move.l d0,-(sp)
    d982:	clr.l -(sp)
    d984:	clr.l -(sp)
    d986:	jsr c144 <blankScreen>
    d98c:	lea 16(sp),sp
	return BR_CONTINUE;
    d990:	moveq #2,d0
}
    d992:	rts

0000d994 <builtIn_blankArea>:

builtIn(blankArea)
{
    d994:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    d998:	       movea.l 24(sp),a0
    d99c:	       move.l 24(a0),d0
    d9a0:	       move.l d0,-(sp)
    d9a2:	       pea 1 <_start+0x1>
    d9a6:	       lea 8(sp),a0
    d9aa:	       move.l a0,-(sp)
    d9ac:	       jsr 1362e <getValueType>
    d9b2:	       lea 12(sp),sp
    d9b6:	       tst.w d0
    d9b8:	   /-- bne.s d9c0 <builtIn_blankArea+0x2c>
    d9ba:	   |   moveq #1,d0
    d9bc:	/--|-- bra.w da96 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    d9c0:	|  \-> moveq #24,d0
    d9c2:	|      add.l 24(sp),d0
    d9c6:	|      move.l d0,-(sp)
    d9c8:	|      jsr 13fb2 <trimStack>
    d9ce:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    d9d0:	|      movea.l 24(sp),a0
    d9d4:	|      move.l 24(a0),d0
    d9d8:	|      move.l d0,-(sp)
    d9da:	|      pea 1 <_start+0x1>
    d9de:	|      lea 12(sp),a0
    d9e2:	|      move.l a0,-(sp)
    d9e4:	|      jsr 1362e <getValueType>
    d9ea:	|      lea 12(sp),sp
    d9ee:	|      tst.w d0
    d9f0:	|  /-- bne.s d9f8 <builtIn_blankArea+0x64>
    d9f2:	|  |   moveq #1,d0
    d9f4:	+--|-- bra.w da96 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    d9f8:	|  \-> moveq #24,d0
    d9fa:	|      add.l 24(sp),d0
    d9fe:	|      move.l d0,-(sp)
    da00:	|      jsr 13fb2 <trimStack>
    da06:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    da08:	|      movea.l 24(sp),a0
    da0c:	|      move.l 24(a0),d0
    da10:	|      move.l d0,-(sp)
    da12:	|      pea 1 <_start+0x1>
    da16:	|      moveq #16,d0
    da18:	|      add.l sp,d0
    da1a:	|      move.l d0,-(sp)
    da1c:	|      jsr 1362e <getValueType>
    da22:	|      lea 12(sp),sp
    da26:	|      tst.w d0
    da28:	|  /-- bne.s da2e <builtIn_blankArea+0x9a>
    da2a:	|  |   moveq #1,d0
    da2c:	+--|-- bra.s da96 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    da2e:	|  \-> moveq #24,d0
    da30:	|      add.l 24(sp),d0
    da34:	|      move.l d0,-(sp)
    da36:	|      jsr 13fb2 <trimStack>
    da3c:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    da3e:	|      movea.l 24(sp),a0
    da42:	|      move.l 24(a0),d0
    da46:	|      move.l d0,-(sp)
    da48:	|      pea 1 <_start+0x1>
    da4c:	|      moveq #20,d0
    da4e:	|      add.l sp,d0
    da50:	|      move.l d0,-(sp)
    da52:	|      jsr 1362e <getValueType>
    da58:	|      lea 12(sp),sp
    da5c:	|      tst.w d0
    da5e:	|  /-- bne.s da64 <builtIn_blankArea+0xd0>
    da60:	|  |   moveq #1,d0
    da62:	+--|-- bra.s da96 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    da64:	|  \-> moveq #24,d0
    da66:	|      add.l 24(sp),d0
    da6a:	|      move.l d0,-(sp)
    da6c:	|      jsr 13fb2 <trimStack>
    da72:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    da74:	|      movea.l (sp),a1
    da76:	|      movea.l 4(sp),a0
    da7a:	|      move.l 8(sp),d1
    da7e:	|      move.l 12(sp),d0
    da82:	|      move.l a1,-(sp)
    da84:	|      move.l a0,-(sp)
    da86:	|      move.l d1,-(sp)
    da88:	|      move.l d0,-(sp)
    da8a:	|      jsr c144 <blankScreen>
    da90:	|      lea 16(sp),sp
	return BR_CONTINUE;
    da94:	|      moveq #2,d0
}
    da96:	\----> lea 16(sp),sp
    da9a:	       rts

0000da9c <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    da9c:	jsr c158 <darkScreen>
	return BR_CONTINUE;
    daa2:	moveq #2,d0
}
    daa4:	rts

0000daa6 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    daa6:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    daaa:	       movea.l 20(sp),a0
    daae:	       move.l 24(a0),d0
    dab2:	       move.l d0,-(sp)
    dab4:	       pea 1 <_start+0x1>
    dab8:	       lea 8(sp),a0
    dabc:	       move.l a0,-(sp)
    dabe:	       jsr 1362e <getValueType>
    dac4:	       lea 12(sp),sp
    dac8:	       tst.w d0
    daca:	   /-- bne.s dad2 <builtIn_addOverlay+0x2c>
    dacc:	   |   moveq #1,d0
    dace:	/--|-- bra.w db6a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    dad2:	|  \-> moveq #24,d0
    dad4:	|      add.l 20(sp),d0
    dad8:	|      move.l d0,-(sp)
    dada:	|      jsr 13fb2 <trimStack>
    dae0:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dae2:	|      movea.l 20(sp),a0
    dae6:	|      move.l 24(a0),d0
    daea:	|      move.l d0,-(sp)
    daec:	|      pea 1 <_start+0x1>
    daf0:	|      moveq #12,d0
    daf2:	|      add.l sp,d0
    daf4:	|      move.l d0,-(sp)
    daf6:	|      jsr 1362e <getValueType>
    dafc:	|      lea 12(sp),sp
    db00:	|      tst.w d0
    db02:	|  /-- bne.s db08 <builtIn_addOverlay+0x62>
    db04:	|  |   moveq #1,d0
    db06:	+--|-- bra.s db6a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    db08:	|  \-> moveq #24,d0
    db0a:	|      add.l 20(sp),d0
    db0e:	|      move.l d0,-(sp)
    db10:	|      jsr 13fb2 <trimStack>
    db16:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    db18:	|      movea.l 20(sp),a0
    db1c:	|      move.l 24(a0),d0
    db20:	|      move.l d0,-(sp)
    db22:	|      pea 5 <_start+0x5>
    db26:	|      moveq #16,d0
    db28:	|      add.l sp,d0
    db2a:	|      move.l d0,-(sp)
    db2c:	|      jsr 1362e <getValueType>
    db32:	|      lea 12(sp),sp
    db36:	|      tst.w d0
    db38:	|  /-- bne.s db3e <builtIn_addOverlay+0x98>
    db3a:	|  |   moveq #1,d0
    db3c:	+--|-- bra.s db6a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    db3e:	|  \-> moveq #24,d0
    db40:	|      add.l 20(sp),d0
    db44:	|      move.l d0,-(sp)
    db46:	|      jsr 13fb2 <trimStack>
    db4c:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    db4e:	|      movea.l (sp),a0
    db50:	|      move.l 4(sp),d1
    db54:	|      move.l 8(sp),d0
    db58:	|      move.l a0,-(sp)
    db5a:	|      move.l d1,-(sp)
    db5c:	|      move.l d0,-(sp)
    db5e:	|      jsr c276 <loadBackDrop>
    db64:	|      lea 12(sp),sp
	return BR_CONTINUE;
    db68:	|      moveq #2,d0
}
    db6a:	\----> lea 12(sp),sp
    db6e:	       rts

0000db70 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    db70:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db74:	       movea.l 20(sp),a0
    db78:	       move.l 24(a0),d0
    db7c:	       move.l d0,-(sp)
    db7e:	       pea 1 <_start+0x1>
    db82:	       lea 8(sp),a0
    db86:	       move.l a0,-(sp)
    db88:	       jsr 1362e <getValueType>
    db8e:	       lea 12(sp),sp
    db92:	       tst.w d0
    db94:	   /-- bne.s db9c <builtIn_mixOverlay+0x2c>
    db96:	   |   moveq #1,d0
    db98:	/--|-- bra.w dc34 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    db9c:	|  \-> moveq #24,d0
    db9e:	|      add.l 20(sp),d0
    dba2:	|      move.l d0,-(sp)
    dba4:	|      jsr 13fb2 <trimStack>
    dbaa:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dbac:	|      movea.l 20(sp),a0
    dbb0:	|      move.l 24(a0),d0
    dbb4:	|      move.l d0,-(sp)
    dbb6:	|      pea 1 <_start+0x1>
    dbba:	|      moveq #12,d0
    dbbc:	|      add.l sp,d0
    dbbe:	|      move.l d0,-(sp)
    dbc0:	|      jsr 1362e <getValueType>
    dbc6:	|      lea 12(sp),sp
    dbca:	|      tst.w d0
    dbcc:	|  /-- bne.s dbd2 <builtIn_mixOverlay+0x62>
    dbce:	|  |   moveq #1,d0
    dbd0:	+--|-- bra.s dc34 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    dbd2:	|  \-> moveq #24,d0
    dbd4:	|      add.l 20(sp),d0
    dbd8:	|      move.l d0,-(sp)
    dbda:	|      jsr 13fb2 <trimStack>
    dbe0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dbe2:	|      movea.l 20(sp),a0
    dbe6:	|      move.l 24(a0),d0
    dbea:	|      move.l d0,-(sp)
    dbec:	|      pea 5 <_start+0x5>
    dbf0:	|      moveq #16,d0
    dbf2:	|      add.l sp,d0
    dbf4:	|      move.l d0,-(sp)
    dbf6:	|      jsr 1362e <getValueType>
    dbfc:	|      lea 12(sp),sp
    dc00:	|      tst.w d0
    dc02:	|  /-- bne.s dc08 <builtIn_mixOverlay+0x98>
    dc04:	|  |   moveq #1,d0
    dc06:	+--|-- bra.s dc34 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    dc08:	|  \-> moveq #24,d0
    dc0a:	|      add.l 20(sp),d0
    dc0e:	|      move.l d0,-(sp)
    dc10:	|      jsr 13fb2 <trimStack>
    dc16:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    dc18:	|      movea.l (sp),a0
    dc1a:	|      move.l 4(sp),d1
    dc1e:	|      move.l 8(sp),d0
    dc22:	|      move.l a0,-(sp)
    dc24:	|      move.l d1,-(sp)
    dc26:	|      move.l d0,-(sp)
    dc28:	|      jsr c2ec <mixBackDrop>
    dc2e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dc32:	|      moveq #2,d0
}
    dc34:	\----> lea 12(sp),sp
    dc38:	       rts

0000dc3a <builtIn_pasteImage>:

builtIn(pasteImage)
{
    dc3a:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc3e:	       movea.l 20(sp),a0
    dc42:	       move.l 24(a0),d0
    dc46:	       move.l d0,-(sp)
    dc48:	       pea 1 <_start+0x1>
    dc4c:	       lea 8(sp),a0
    dc50:	       move.l a0,-(sp)
    dc52:	       jsr 1362e <getValueType>
    dc58:	       lea 12(sp),sp
    dc5c:	       tst.w d0
    dc5e:	   /-- bne.s dc66 <builtIn_pasteImage+0x2c>
    dc60:	   |   moveq #1,d0
    dc62:	/--|-- bra.w dcf6 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    dc66:	|  \-> moveq #24,d0
    dc68:	|      add.l 20(sp),d0
    dc6c:	|      move.l d0,-(sp)
    dc6e:	|      jsr 13fb2 <trimStack>
    dc74:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc76:	|      movea.l 20(sp),a0
    dc7a:	|      move.l 24(a0),d0
    dc7e:	|      move.l d0,-(sp)
    dc80:	|      pea 1 <_start+0x1>
    dc84:	|      moveq #12,d0
    dc86:	|      add.l sp,d0
    dc88:	|      move.l d0,-(sp)
    dc8a:	|      jsr 1362e <getValueType>
    dc90:	|      lea 12(sp),sp
    dc94:	|      tst.w d0
    dc96:	|  /-- bne.s dc9c <builtIn_pasteImage+0x62>
    dc98:	|  |   moveq #1,d0
    dc9a:	+--|-- bra.s dcf6 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    dc9c:	|  \-> moveq #24,d0
    dc9e:	|      add.l 20(sp),d0
    dca2:	|      move.l d0,-(sp)
    dca4:	|      jsr 13fb2 <trimStack>
    dcaa:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    dcac:	|      movea.l 20(sp),a0
    dcb0:	|      move.l 24(a0),d0
    dcb4:	|      move.l d0,-(sp)
    dcb6:	|      jsr 13b06 <getAnimationFromVar>
    dcbc:	|      addq.l #4,sp
    dcbe:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    dcc2:	|      moveq #24,d0
    dcc4:	|      add.l 20(sp),d0
    dcc8:	|      move.l d0,-(sp)
    dcca:	|      jsr 13fb2 <trimStack>
    dcd0:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    dcd2:	|      tst.l 8(sp)
    dcd6:	|  /-- bne.s dcdc <builtIn_pasteImage+0xa2>
    dcd8:	|  |   moveq #2,d0
    dcda:	+--|-- bra.s dcf6 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    dcdc:	|  \-> move.l (sp),d1
    dcde:	|      move.l 4(sp),d0
    dce2:	|      move.l 8(sp),-(sp)
    dce6:	|      move.l d1,-(sp)
    dce8:	|      move.l d0,-(sp)
    dcea:	|      jsr ef6 <pasteCursor>
    dcf0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dcf4:	|      moveq #2,d0
}
    dcf6:	\----> lea 12(sp),sp
    dcfa:	       rts

0000dcfc <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    dcfc:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dcfe:	       movea.l 16(sp),a0
    dd02:	       move.l 24(a0),d0
    dd06:	       move.l d0,-(sp)
    dd08:	       pea 1 <_start+0x1>
    dd0c:	       move.l sp,d0
    dd0e:	       addq.l #8,d0
    dd10:	       move.l d0,-(sp)
    dd12:	       jsr 1362e <getValueType>
    dd18:	       lea 12(sp),sp
    dd1c:	       tst.w d0
    dd1e:	   /-- bne.s dd26 <builtIn_setSceneDimensions+0x2a>
    dd20:	   |   moveq #1,d0
    dd22:	/--|-- bra.w ddae <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    dd26:	|  \-> moveq #24,d0
    dd28:	|      add.l 16(sp),d0
    dd2c:	|      move.l d0,-(sp)
    dd2e:	|      jsr 13fb2 <trimStack>
    dd34:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd36:	|      movea.l 16(sp),a0
    dd3a:	|      move.l 24(a0),d0
    dd3e:	|      move.l d0,-(sp)
    dd40:	|      pea 1 <_start+0x1>
    dd44:	|      moveq #12,d0
    dd46:	|      add.l sp,d0
    dd48:	|      move.l d0,-(sp)
    dd4a:	|      jsr 1362e <getValueType>
    dd50:	|      lea 12(sp),sp
    dd54:	|      tst.w d0
    dd56:	|  /-- bne.s dd5c <builtIn_setSceneDimensions+0x60>
    dd58:	|  |   moveq #1,d0
    dd5a:	+--|-- bra.s ddae <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    dd5c:	|  \-> moveq #24,d0
    dd5e:	|      add.l 16(sp),d0
    dd62:	|      move.l d0,-(sp)
    dd64:	|      jsr 13fb2 <trimStack>
    dd6a:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    dd6c:	|      move.l (sp),d1
    dd6e:	|      move.l 4(sp),d0
    dd72:	|      move.l d1,-(sp)
    dd74:	|      move.l d0,-(sp)
    dd76:	|      jsr c342 <resizeBackdrop>
    dd7c:	|      addq.l #8,sp
    dd7e:	|      tst.w d0
    dd80:	|  /-- beq.s dd9e <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    dd82:	|  |   move.l (sp),d1
    dd84:	|  |   move.l 4(sp),d0
    dd88:	|  |   move.l d1,-(sp)
    dd8a:	|  |   move.l d0,-(sp)
    dd8c:	|  |   clr.l -(sp)
    dd8e:	|  |   clr.l -(sp)
    dd90:	|  |   jsr c144 <blankScreen>
    dd96:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    dd9a:	|  |   moveq #2,d0
    dd9c:	+--|-- bra.s ddae <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    dd9e:	|  \-> pea 17e5f <PutChar+0x1b91>
    dda4:	|      jsr 157fa <KPrintF>
    ddaa:	|      addq.l #4,sp
	return BR_ERROR;
    ddac:	|      moveq #1,d0
}
    ddae:	\----> addq.l #8,sp
    ddb0:	       rts

0000ddb2 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ddb2:	          move.l d3,-(sp)
    ddb4:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ddb6:	          movea.l 16(sp),a0
    ddba:	          move.l 24(a0),d0
    ddbe:	          move.l d0,-(sp)
    ddc0:	          pea 1 <_start+0x1>
    ddc4:	          pea 1b018 <cameraY>
    ddca:	          jsr 1362e <getValueType>
    ddd0:	          lea 12(sp),sp
    ddd4:	          tst.w d0
    ddd6:	      /-- bne.s ddde <builtIn_aimCamera+0x2c>
    ddd8:	      |   moveq #1,d0
    ddda:	/-----|-- bra.w e060 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ddde:	|     \-> moveq #24,d0
    dde0:	|         add.l 16(sp),d0
    dde4:	|         move.l d0,-(sp)
    dde6:	|         jsr 13fb2 <trimStack>
    ddec:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ddee:	|         movea.l 16(sp),a0
    ddf2:	|         move.l 24(a0),d0
    ddf6:	|         move.l d0,-(sp)
    ddf8:	|         pea 1 <_start+0x1>
    ddfc:	|         pea 1b014 <cameraX>
    de02:	|         jsr 1362e <getValueType>
    de08:	|         lea 12(sp),sp
    de0c:	|         tst.w d0
    de0e:	|     /-- bne.s de16 <builtIn_aimCamera+0x64>
    de10:	|     |   moveq #1,d0
    de12:	+-----|-- bra.w e060 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    de16:	|     \-> moveq #24,d0
    de18:	|         add.l 16(sp),d0
    de1c:	|         move.l d0,-(sp)
    de1e:	|         jsr 13fb2 <trimStack>
    de24:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    de26:	|         move.l 1b014 <cameraX>,d0
    de2c:	|         move.l d0,-(sp)
    de2e:	|         jsr 15c36 <__floatsisf>
    de34:	|         addq.l #4,sp
    de36:	|         move.l d0,d2
    de38:	|         move.l 1ae56 <winWidth>,d0
    de3e:	|         lsr.l #1,d0
    de40:	|         move.l d0,-(sp)
    de42:	|         jsr 15c5e <__floatunsisf>
    de48:	|         addq.l #4,sp
    de4a:	|         move.l d0,d1
    de4c:	|         move.l 1a89e <cameraZoom>,d0
    de52:	|         move.l d0,-(sp)
    de54:	|         move.l d1,-(sp)
    de56:	|         jsr 15ae2 <__divsf3>
    de5c:	|         addq.l #8,sp
    de5e:	|         move.l d0,-(sp)
    de60:	|         move.l d2,-(sp)
    de62:	|         jsr 15f2a <__subsf3>
    de68:	|         addq.l #8,sp
    de6a:	|         move.l d0,-(sp)
    de6c:	|         jsr 15bce <__fixsfsi>
    de72:	|         addq.l #4,sp
    de74:	|         move.l d0,1b014 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    de7a:	|         move.l 1b018 <cameraY>,d0
    de80:	|         move.l d0,-(sp)
    de82:	|         jsr 15c36 <__floatsisf>
    de88:	|         addq.l #4,sp
    de8a:	|         move.l d0,d2
    de8c:	|         move.l 1ae5a <winHeight>,d0
    de92:	|         lsr.l #1,d0
    de94:	|         move.l d0,-(sp)
    de96:	|         jsr 15c5e <__floatunsisf>
    de9c:	|         addq.l #4,sp
    de9e:	|         move.l d0,d1
    dea0:	|         move.l 1a89e <cameraZoom>,d0
    dea6:	|         move.l d0,-(sp)
    dea8:	|         move.l d1,-(sp)
    deaa:	|         jsr 15ae2 <__divsf3>
    deb0:	|         addq.l #8,sp
    deb2:	|         move.l d0,-(sp)
    deb4:	|         move.l d2,-(sp)
    deb6:	|         jsr 15f2a <__subsf3>
    debc:	|         addq.l #8,sp
    debe:	|         move.l d0,-(sp)
    dec0:	|         jsr 15bce <__fixsfsi>
    dec6:	|         addq.l #4,sp
    dec8:	|         move.l d0,1b018 <cameraY>

	if (cameraX < 0) cameraX = 0;
    dece:	|         move.l 1b014 <cameraX>,d0
    ded4:	|     /-- bpl.s dee0 <builtIn_aimCamera+0x12e>
    ded6:	|     |   clr.l 1b014 <cameraX>
    dedc:	|  /--|-- bra.w df96 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    dee0:	|  |  \-> move.l 1b014 <cameraX>,d0
    dee6:	|  |      move.l d0,-(sp)
    dee8:	|  |      jsr 15c36 <__floatsisf>
    deee:	|  |      addq.l #4,sp
    def0:	|  |      move.l d0,d2
    def2:	|  |      move.l 1aff6 <sceneWidth>,d0
    def8:	|  |      move.l d0,-(sp)
    defa:	|  |      jsr 15c5e <__floatunsisf>
    df00:	|  |      addq.l #4,sp
    df02:	|  |      move.l d0,d3
    df04:	|  |      move.l 1ae56 <winWidth>,d0
    df0a:	|  |      move.l d0,-(sp)
    df0c:	|  |      jsr 15c5e <__floatunsisf>
    df12:	|  |      addq.l #4,sp
    df14:	|  |      move.l d0,d1
    df16:	|  |      move.l 1a89e <cameraZoom>,d0
    df1c:	|  |      move.l d0,-(sp)
    df1e:	|  |      move.l d1,-(sp)
    df20:	|  |      jsr 15ae2 <__divsf3>
    df26:	|  |      addq.l #8,sp
    df28:	|  |      move.l d0,-(sp)
    df2a:	|  |      move.l d3,-(sp)
    df2c:	|  |      jsr 15f2a <__subsf3>
    df32:	|  |      addq.l #8,sp
    df34:	|  |      move.l d0,-(sp)
    df36:	|  |      move.l d2,-(sp)
    df38:	|  |      jsr 15da2 <__gtsf2>
    df3e:	|  |      addq.l #8,sp
    df40:	|  |      tst.l d0
    df42:	|  +----- ble.s df96 <builtIn_aimCamera+0x1e4>
    df44:	|  |      move.l 1aff6 <sceneWidth>,d0
    df4a:	|  |      move.l d0,-(sp)
    df4c:	|  |      jsr 15c5e <__floatunsisf>
    df52:	|  |      addq.l #4,sp
    df54:	|  |      move.l d0,d2
    df56:	|  |      move.l 1ae56 <winWidth>,d0
    df5c:	|  |      move.l d0,-(sp)
    df5e:	|  |      jsr 15c5e <__floatunsisf>
    df64:	|  |      addq.l #4,sp
    df66:	|  |      move.l d0,d1
    df68:	|  |      move.l 1a89e <cameraZoom>,d0
    df6e:	|  |      move.l d0,-(sp)
    df70:	|  |      move.l d1,-(sp)
    df72:	|  |      jsr 15ae2 <__divsf3>
    df78:	|  |      addq.l #8,sp
    df7a:	|  |      move.l d0,-(sp)
    df7c:	|  |      move.l d2,-(sp)
    df7e:	|  |      jsr 15f2a <__subsf3>
    df84:	|  |      addq.l #8,sp
    df86:	|  |      move.l d0,-(sp)
    df88:	|  |      jsr 15bce <__fixsfsi>
    df8e:	|  |      addq.l #4,sp
    df90:	|  |      move.l d0,1b014 <cameraX>
	if (cameraY < 0) cameraY = 0;
    df96:	|  \----> move.l 1b018 <cameraY>,d0
    df9c:	|     /-- bpl.s dfa8 <builtIn_aimCamera+0x1f6>
    df9e:	|     |   clr.l 1b018 <cameraY>
    dfa4:	|  /--|-- bra.w e05e <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    dfa8:	|  |  \-> move.l 1b018 <cameraY>,d0
    dfae:	|  |      move.l d0,-(sp)
    dfb0:	|  |      jsr 15c36 <__floatsisf>
    dfb6:	|  |      addq.l #4,sp
    dfb8:	|  |      move.l d0,d2
    dfba:	|  |      move.l 1affa <sceneHeight>,d0
    dfc0:	|  |      move.l d0,-(sp)
    dfc2:	|  |      jsr 15c5e <__floatunsisf>
    dfc8:	|  |      addq.l #4,sp
    dfca:	|  |      move.l d0,d3
    dfcc:	|  |      move.l 1ae5a <winHeight>,d0
    dfd2:	|  |      move.l d0,-(sp)
    dfd4:	|  |      jsr 15c5e <__floatunsisf>
    dfda:	|  |      addq.l #4,sp
    dfdc:	|  |      move.l d0,d1
    dfde:	|  |      move.l 1a89e <cameraZoom>,d0
    dfe4:	|  |      move.l d0,-(sp)
    dfe6:	|  |      move.l d1,-(sp)
    dfe8:	|  |      jsr 15ae2 <__divsf3>
    dfee:	|  |      addq.l #8,sp
    dff0:	|  |      move.l d0,-(sp)
    dff2:	|  |      move.l d3,-(sp)
    dff4:	|  |      jsr 15f2a <__subsf3>
    dffa:	|  |      addq.l #8,sp
    dffc:	|  |      move.l d0,-(sp)
    dffe:	|  |      move.l d2,-(sp)
    e000:	|  |      jsr 15da2 <__gtsf2>
    e006:	|  |      addq.l #8,sp
    e008:	|  |      tst.l d0
    e00a:	|  +----- ble.s e05e <builtIn_aimCamera+0x2ac>
    e00c:	|  |      move.l 1affa <sceneHeight>,d0
    e012:	|  |      move.l d0,-(sp)
    e014:	|  |      jsr 15c5e <__floatunsisf>
    e01a:	|  |      addq.l #4,sp
    e01c:	|  |      move.l d0,d2
    e01e:	|  |      move.l 1ae5a <winHeight>,d0
    e024:	|  |      move.l d0,-(sp)
    e026:	|  |      jsr 15c5e <__floatunsisf>
    e02c:	|  |      addq.l #4,sp
    e02e:	|  |      move.l d0,d1
    e030:	|  |      move.l 1a89e <cameraZoom>,d0
    e036:	|  |      move.l d0,-(sp)
    e038:	|  |      move.l d1,-(sp)
    e03a:	|  |      jsr 15ae2 <__divsf3>
    e040:	|  |      addq.l #8,sp
    e042:	|  |      move.l d0,-(sp)
    e044:	|  |      move.l d2,-(sp)
    e046:	|  |      jsr 15f2a <__subsf3>
    e04c:	|  |      addq.l #8,sp
    e04e:	|  |      move.l d0,-(sp)
    e050:	|  |      jsr 15bce <__fixsfsi>
    e056:	|  |      addq.l #4,sp
    e058:	|  |      move.l d0,1b018 <cameraY>
	return BR_CONTINUE;
    e05e:	|  \----> moveq #2,d0
}
    e060:	\-------> move.l (sp)+,d2
    e062:	          move.l (sp)+,d3
    e064:	          rts

0000e066 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    e066:	       subq.l #4,sp
    e068:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e06a:	       movea.l 16(sp),a0
    e06e:	       move.l 24(a0),d0
    e072:	       move.l d0,-(sp)
    e074:	       pea 1 <_start+0x1>
    e078:	       moveq #12,d0
    e07a:	       add.l sp,d0
    e07c:	       move.l d0,-(sp)
    e07e:	       jsr 1362e <getValueType>
    e084:	       lea 12(sp),sp
    e088:	       tst.w d0
    e08a:	   /-- bne.s e092 <builtIn_zoomCamera+0x2c>
    e08c:	   |   moveq #1,d0
    e08e:	/--|-- bra.w e28c <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    e092:	|  \-> moveq #24,d0
    e094:	|      add.l 16(sp),d0
    e098:	|      move.l d0,-(sp)
    e09a:	|      jsr 13fb2 <trimStack>
    e0a0:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    e0a2:	|      move.l 1aebe <input+0xa>,d0
    e0a8:	|      move.l d0,-(sp)
    e0aa:	|      jsr 15c36 <__floatsisf>
    e0b0:	|      addq.l #4,sp
    e0b2:	|      move.l d0,d1
    e0b4:	|      move.l 1a89e <cameraZoom>,d0
    e0ba:	|      move.l d0,-(sp)
    e0bc:	|      move.l d1,-(sp)
    e0be:	|      jsr 15ce8 <__mulsf3>
    e0c4:	|      addq.l #8,sp
    e0c6:	|      move.l d0,-(sp)
    e0c8:	|      jsr 15bce <__fixsfsi>
    e0ce:	|      addq.l #4,sp
    e0d0:	|      move.l d0,1aebe <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    e0d6:	|      move.l 1aec2 <input+0xe>,d0
    e0dc:	|      move.l d0,-(sp)
    e0de:	|      jsr 15c36 <__floatsisf>
    e0e4:	|      addq.l #4,sp
    e0e6:	|      move.l d0,d1
    e0e8:	|      move.l 1a89e <cameraZoom>,d0
    e0ee:	|      move.l d0,-(sp)
    e0f0:	|      move.l d1,-(sp)
    e0f2:	|      jsr 15ce8 <__mulsf3>
    e0f8:	|      addq.l #8,sp
    e0fa:	|      move.l d0,-(sp)
    e0fc:	|      jsr 15bce <__fixsfsi>
    e102:	|      addq.l #4,sp
    e104:	|      move.l d0,1aec2 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    e10a:	|      move.l 4(sp),d0
    e10e:	|      move.l d0,-(sp)
    e110:	|      jsr 15c36 <__floatsisf>
    e116:	|      addq.l #4,sp
    e118:	|      move.l #1008981770,-(sp)
    e11e:	|      move.l d0,-(sp)
    e120:	|      jsr 15ce8 <__mulsf3>
    e126:	|      addq.l #8,sp
    e128:	|      move.l d0,1a89e <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    e12e:	|      move.l 1ae56 <winWidth>,d0
    e134:	|      move.l d0,-(sp)
    e136:	|      jsr 15c5e <__floatunsisf>
    e13c:	|      addq.l #4,sp
    e13e:	|      move.l d0,d1
    e140:	|      move.l 1a89e <cameraZoom>,d0
    e146:	|      move.l d0,-(sp)
    e148:	|      move.l d1,-(sp)
    e14a:	|      jsr 15ae2 <__divsf3>
    e150:	|      addq.l #8,sp
    e152:	|      move.l d0,d2
    e154:	|      move.l 1aff6 <sceneWidth>,d0
    e15a:	|      move.l d0,-(sp)
    e15c:	|      jsr 15c5e <__floatunsisf>
    e162:	|      addq.l #4,sp
    e164:	|      move.l d0,-(sp)
    e166:	|      move.l d2,-(sp)
    e168:	|      jsr 15da2 <__gtsf2>
    e16e:	|      addq.l #8,sp
    e170:	|      tst.l d0
    e172:	|  /-- ble.s e1a8 <builtIn_zoomCamera+0x142>
    e174:	|  |   move.l 1ae56 <winWidth>,d0
    e17a:	|  |   move.l d0,-(sp)
    e17c:	|  |   jsr 15c5e <__floatunsisf>
    e182:	|  |   addq.l #4,sp
    e184:	|  |   move.l d0,d2
    e186:	|  |   move.l 1aff6 <sceneWidth>,d0
    e18c:	|  |   move.l d0,-(sp)
    e18e:	|  |   jsr 15c5e <__floatunsisf>
    e194:	|  |   addq.l #4,sp
    e196:	|  |   move.l d0,-(sp)
    e198:	|  |   move.l d2,-(sp)
    e19a:	|  |   jsr 15ae2 <__divsf3>
    e1a0:	|  |   addq.l #8,sp
    e1a2:	|  |   move.l d0,1a89e <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    e1a8:	|  \-> move.l 1ae5a <winHeight>,d0
    e1ae:	|      move.l d0,-(sp)
    e1b0:	|      jsr 15c5e <__floatunsisf>
    e1b6:	|      addq.l #4,sp
    e1b8:	|      move.l d0,d1
    e1ba:	|      move.l 1a89e <cameraZoom>,d0
    e1c0:	|      move.l d0,-(sp)
    e1c2:	|      move.l d1,-(sp)
    e1c4:	|      jsr 15ae2 <__divsf3>
    e1ca:	|      addq.l #8,sp
    e1cc:	|      move.l d0,d2
    e1ce:	|      move.l 1affa <sceneHeight>,d0
    e1d4:	|      move.l d0,-(sp)
    e1d6:	|      jsr 15c5e <__floatunsisf>
    e1dc:	|      addq.l #4,sp
    e1de:	|      move.l d0,-(sp)
    e1e0:	|      move.l d2,-(sp)
    e1e2:	|      jsr 15da2 <__gtsf2>
    e1e8:	|      addq.l #8,sp
    e1ea:	|      tst.l d0
    e1ec:	|  /-- ble.s e222 <builtIn_zoomCamera+0x1bc>
    e1ee:	|  |   move.l 1ae5a <winHeight>,d0
    e1f4:	|  |   move.l d0,-(sp)
    e1f6:	|  |   jsr 15c5e <__floatunsisf>
    e1fc:	|  |   addq.l #4,sp
    e1fe:	|  |   move.l d0,d2
    e200:	|  |   move.l 1affa <sceneHeight>,d0
    e206:	|  |   move.l d0,-(sp)
    e208:	|  |   jsr 15c5e <__floatunsisf>
    e20e:	|  |   addq.l #4,sp
    e210:	|  |   move.l d0,-(sp)
    e212:	|  |   move.l d2,-(sp)
    e214:	|  |   jsr 15ae2 <__divsf3>
    e21a:	|  |   addq.l #8,sp
    e21c:	|  |   move.l d0,1a89e <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    e222:	|  \-> move.l 1aebe <input+0xa>,d0
    e228:	|      move.l d0,-(sp)
    e22a:	|      jsr 15c36 <__floatsisf>
    e230:	|      addq.l #4,sp
    e232:	|      move.l d0,d1
    e234:	|      move.l 1a89e <cameraZoom>,d0
    e23a:	|      move.l d0,-(sp)
    e23c:	|      move.l d1,-(sp)
    e23e:	|      jsr 15ae2 <__divsf3>
    e244:	|      addq.l #8,sp
    e246:	|      move.l d0,-(sp)
    e248:	|      jsr 15bce <__fixsfsi>
    e24e:	|      addq.l #4,sp
    e250:	|      move.l d0,1aebe <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    e256:	|      move.l 1aec2 <input+0xe>,d0
    e25c:	|      move.l d0,-(sp)
    e25e:	|      jsr 15c36 <__floatsisf>
    e264:	|      addq.l #4,sp
    e266:	|      move.l d0,d1
    e268:	|      move.l 1a89e <cameraZoom>,d0
    e26e:	|      move.l d0,-(sp)
    e270:	|      move.l d1,-(sp)
    e272:	|      jsr 15ae2 <__divsf3>
    e278:	|      addq.l #8,sp
    e27a:	|      move.l d0,-(sp)
    e27c:	|      jsr 15bce <__fixsfsi>
    e282:	|      addq.l #4,sp
    e284:	|      move.l d0,1aec2 <input+0xe>

	return BR_CONTINUE;
    e28a:	|      moveq #2,d0
}
    e28c:	\----> move.l (sp)+,d2
    e28e:	       addq.l #4,sp
    e290:	       rts

0000e292 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    e292:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    e294:	             tst.l 8(sp)
    e298:	         /-- bne.s e2ac <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    e29a:	         |   pea 17e84 <PutChar+0x1bb6>
    e2a0:	         |   jsr 157fa <KPrintF>
    e2a6:	         |   addq.l #4,sp
		return BR_ERROR;
    e2a8:	         |   moveq #1,d0
    e2aa:	/--------|-- bra.s e30c <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    e2ac:	|        \-> jsr c58 <rand>
    e2b2:	|            move.l d0,d1
    e2b4:	|            move.l 8(sp),d0
    e2b8:	|            move.l d0,-(sp)
    e2ba:	|            move.l d1,-(sp)
    e2bc:	|            jsr 16292 <__umodsi3>
    e2c2:	|            addq.l #8,sp
    e2c4:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    e2c6:	|     /----- bra.s e2fa <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    e2c8:	|  /--|----> move.l (sp),d0
    e2ca:	|  |  |      cmp.l 8(sp),d0
    e2ce:	|  |  |  /-- bne.s e2ea <builtIn_pickOne+0x58>
    e2d0:	|  |  |  |   moveq #28,d0
    e2d2:	|  |  |  |   add.l 12(sp),d0
    e2d6:	|  |  |  |   movea.l 12(sp),a0
    e2da:	|  |  |  |   move.l 24(a0),d1
    e2de:	|  |  |  |   move.l d0,-(sp)
    e2e0:	|  |  |  |   move.l d1,-(sp)
    e2e2:	|  |  |  |   jsr 13ae8 <copyVariable>
    e2e8:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    e2ea:	|  |  |  \-> moveq #24,d0
    e2ec:	|  |  |      add.l 12(sp),d0
    e2f0:	|  |  |      move.l d0,-(sp)
    e2f2:	|  |  |      jsr 13fb2 <trimStack>
    e2f8:	|  |  |      addq.l #4,sp
	while (numParams --) {
    e2fa:	|  |  \----> move.l 8(sp),d0
    e2fe:	|  |         move.l d0,d1
    e300:	|  |         subq.l #1,d1
    e302:	|  |         move.l d1,8(sp)
    e306:	|  |         tst.l d0
    e308:	|  \-------- bne.s e2c8 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    e30a:	|            moveq #2,d0
}
    e30c:	\----------> addq.l #4,sp
    e30e:	             rts

0000e310 <builtIn_substring>:

builtIn(substring)
{
    e310:	       lea -40(sp),sp
    e314:	       move.l a6,-(sp)
    e316:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e318:	       movea.l 56(sp),a0
    e31c:	       move.l 24(a0),d0
    e320:	       move.l d0,-(sp)
    e322:	       pea 1 <_start+0x1>
    e326:	       lea 16(sp),a0
    e32a:	       move.l a0,-(sp)
    e32c:	       jsr 1362e <getValueType>
    e332:	       lea 12(sp),sp
    e336:	       tst.w d0
    e338:	   /-- bne.s e340 <builtIn_substring+0x30>
    e33a:	   |   moveq #1,d0
    e33c:	/--|-- bra.w e4b8 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e340:	|  \-> moveq #24,d0
    e342:	|      add.l 56(sp),d0
    e346:	|      move.l d0,-(sp)
    e348:	|      jsr 13fb2 <trimStack>
    e34e:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e350:	|      movea.l 56(sp),a0
    e354:	|      move.l 24(a0),d0
    e358:	|      move.l d0,-(sp)
    e35a:	|      pea 1 <_start+0x1>
    e35e:	|      lea 20(sp),a0
    e362:	|      move.l a0,-(sp)
    e364:	|      jsr 1362e <getValueType>
    e36a:	|      lea 12(sp),sp
    e36e:	|      tst.w d0
    e370:	|  /-- bne.s e378 <builtIn_substring+0x68>
    e372:	|  |   moveq #1,d0
    e374:	+--|-- bra.w e4b8 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e378:	|  \-> moveq #24,d0
    e37a:	|      add.l 56(sp),d0
    e37e:	|      move.l d0,-(sp)
    e380:	|      jsr 13fb2 <trimStack>
    e386:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    e388:	|      movea.l 56(sp),a0
    e38c:	|      move.l 24(a0),d0
    e390:	|      move.l d0,-(sp)
    e392:	|      jsr 13c04 <getTextFromAnyVar>
    e398:	|      addq.l #4,sp
    e39a:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    e39e:	|      moveq #24,d0
    e3a0:	|      add.l 56(sp),d0
    e3a4:	|      move.l d0,-(sp)
    e3a6:	|      jsr 13fb2 <trimStack>
    e3ac:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    e3ae:	|      move.l 44(sp),-(sp)
    e3b2:	|      jsr 12b1a <strlen>
    e3b8:	|      addq.l #4,sp
    e3ba:	|      move.l d0,d1
    e3bc:	|      move.l 12(sp),d0
    e3c0:	|      movea.l d0,a0
    e3c2:	|      move.l 8(sp),d0
    e3c6:	|      add.l a0,d0
    e3c8:	|      cmp.l d1,d0
    e3ca:	|  /-- bls.s e400 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    e3cc:	|  |   move.l 44(sp),-(sp)
    e3d0:	|  |   jsr 12b1a <strlen>
    e3d6:	|  |   addq.l #4,sp
    e3d8:	|  |   move.l d0,d1
    e3da:	|  |   move.l 12(sp),d0
    e3de:	|  |   sub.l d0,d1
    e3e0:	|  |   move.l d1,d0
    e3e2:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    e3e6:	|  |   move.l 44(sp),-(sp)
    e3ea:	|  |   jsr 12b1a <strlen>
    e3f0:	|  |   addq.l #4,sp
    e3f2:	|  |   move.l d0,d1
    e3f4:	|  |   move.l 12(sp),d0
    e3f8:	|  |   cmp.l d1,d0
    e3fa:	|  +-- bls.s e400 <builtIn_substring+0xf0>
            start = 0;
    e3fc:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    e400:	|  \-> move.l 8(sp),d0
    e404:	|  /-- bpl.s e40a <builtIn_substring+0xfa>
        length = 0;
    e406:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    e40a:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    e410:	|      move.l 12(sp),d1
    e414:	|      move.l 8(sp),d0
    e418:	|      move.l d1,d2
    e41a:	|      add.l d0,d2
    e41c:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    e420:	|      move.l 36(sp),d0
    e424:	|      sub.l 40(sp),d0
    e428:	|      addq.l #1,d0
    e42a:	|      move.l d0,32(sp)
    e42e:	|      clr.l 28(sp)
    e432:	|      move.l 1af02 <SysBase>,d0
    e438:	|      movea.l d0,a6
    e43a:	|      move.l 32(sp),d0
    e43e:	|      move.l 28(sp),d1
    e442:	|      jsr -684(a6)
    e446:	|      move.l d0,24(sp)
    e44a:	|      move.l 24(sp),d0
    e44e:	|      move.l d0,20(sp)
    if (!newString) {
    e452:	|  /-- bne.s e458 <builtIn_substring+0x148>
        return BR_ERROR;
    e454:	|  |   moveq #1,d0
    e456:	+--|-- bra.s e4b8 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    e458:	|  \-> move.l 36(sp),d0
    e45c:	|      sub.l 40(sp),d0
    e460:	|      move.l d0,d1
    e462:	|      move.l 40(sp),d0
    e466:	|      add.l 44(sp),d0
    e46a:	|      move.l d1,-(sp)
    e46c:	|      move.l d0,-(sp)
    e46e:	|      move.l 28(sp),-(sp)
    e472:	|      jsr 157ae <memcpy>
    e478:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    e47c:	|      move.l 36(sp),d0
    e480:	|      sub.l 40(sp),d0
    e484:	|      movea.l 20(sp),a0
    e488:	|      adda.l d0,a0
    e48a:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    e48c:	|      moveq #28,d0
    e48e:	|      add.l 56(sp),d0
    e492:	|      move.l 20(sp),-(sp)
    e496:	|      move.l d0,-(sp)
    e498:	|      jsr 13850 <makeTextVar>
    e49e:	|      addq.l #8,sp
    FreeVec(newString);
    e4a0:	|      move.l 20(sp),16(sp)
    e4a6:	|      move.l 1af02 <SysBase>,d0
    e4ac:	|      movea.l d0,a6
    e4ae:	|      movea.l 16(sp),a1
    e4b2:	|      jsr -690(a6)
    return BR_CONTINUE;
    e4b6:	|      moveq #2,d0
}
    e4b8:	\----> move.l (sp)+,d2
    e4ba:	       movea.l (sp)+,a6
    e4bc:	       lea 40(sp),sp
    e4c0:	       rts

0000e4c2 <builtIn_stringLength>:

builtIn(stringLength)
{
    e4c2:	subq.l #8,sp
    e4c4:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e4c6:	movea.l 20(sp),a0
    e4ca:	move.l 24(a0),d0
    e4ce:	move.l d0,-(sp)
    e4d0:	jsr 13c04 <getTextFromAnyVar>
    e4d6:	addq.l #4,sp
    e4d8:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    e4dc:	moveq #24,d0
    e4de:	add.l 20(sp),d0
    e4e2:	move.l d0,-(sp)
    e4e4:	jsr 13fb2 <trimStack>
    e4ea:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    e4ec:	move.l 8(sp),-(sp)
    e4f0:	jsr 12b1a <strlen>
    e4f6:	addq.l #4,sp
    e4f8:	move.l d0,d1
    e4fa:	moveq #28,d0
    e4fc:	add.l 20(sp),d0
    e500:	move.l d1,-(sp)
    e502:	pea 1 <_start+0x1>
    e506:	move.l d0,-(sp)
    e508:	jsr 13f20 <setVariable>
    e50e:	lea 12(sp),sp
	FreeVec(newText);
    e512:	move.l 8(sp),4(sp)
    e518:	move.l 1af02 <SysBase>,d0
    e51e:	movea.l d0,a6
    e520:	movea.l 4(sp),a1
    e524:	jsr -690(a6)
	return BR_CONTINUE;
    e528:	moveq #2,d0
}
    e52a:	movea.l (sp)+,a6
    e52c:	addq.l #8,sp
    e52e:	rts

0000e530 <builtIn_newStack>:

builtIn(newStack)
{
    e530:	             lea -12(sp),sp
    e534:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    e536:	             moveq #28,d0
    e538:	             add.l 24(sp),d0
    e53c:	             move.l d0,-(sp)
    e53e:	             jsr 1387c <unlinkVar>
    e544:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    e546:	             movea.l 24(sp),a0
    e54a:	             moveq #6,d0
    e54c:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    e550:	             moveq #12,d1
    e552:	             move.l d1,12(sp)
    e556:	             clr.l 8(sp)
    e55a:	             move.l 1af02 <SysBase>,d0
    e560:	             movea.l d0,a6
    e562:	             move.l 12(sp),d0
    e566:	             move.l 8(sp),d1
    e56a:	             jsr -684(a6)
    e56e:	             move.l d0,4(sp)
    e572:	             move.l 4(sp),d0
    e576:	             movea.l 24(sp),a0
    e57a:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    e57e:	             movea.l 24(sp),a0
    e582:	             move.l 32(a0),d0
    e586:	         /-- bne.s e58e <builtIn_newStack+0x5e>
    e588:	         |   moveq #1,d0
    e58a:	/--------|-- bra.w e620 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    e58e:	|        \-> movea.l 24(sp),a0
    e592:	|            movea.l 32(a0),a0
    e596:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    e598:	|            movea.l 24(sp),a0
    e59c:	|            movea.l 32(a0),a0
    e5a0:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    e5a4:	|            movea.l 24(sp),a0
    e5a8:	|            movea.l 32(a0),a0
    e5ac:	|            moveq #1,d0
    e5ae:	|            move.l d0,8(a0)
    
    while (numParams--) {
    e5b2:	|     /----- bra.s e60e <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    e5b4:	|  /--|----> movea.l 24(sp),a0
    e5b8:	|  |  |      move.l 32(a0),d0
    e5bc:	|  |  |      move.l d0,d1
    e5be:	|  |  |      movea.l 24(sp),a0
    e5c2:	|  |  |      move.l 24(a0),d0
    e5c6:	|  |  |      move.l d1,-(sp)
    e5c8:	|  |  |      move.l d0,-(sp)
    e5ca:	|  |  |      jsr 12e6a <addVarToStack>
    e5d0:	|  |  |      addq.l #8,sp
    e5d2:	|  |  |      tst.w d0
    e5d4:	|  |  |  /-- bne.s e5da <builtIn_newStack+0xaa>
    e5d6:	|  |  |  |   moveq #1,d0
    e5d8:	+--|--|--|-- bra.s e620 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    e5da:	|  |  |  \-> movea.l 24(sp),a0
    e5de:	|  |  |      movea.l 32(a0),a0
    e5e2:	|  |  |      move.l 4(a0),d0
    e5e6:	|  |  |  /-- bne.s e5fe <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    e5e8:	|  |  |  |   movea.l 24(sp),a0
    e5ec:	|  |  |  |   movea.l 32(a0),a1
    e5f0:	|  |  |  |   movea.l 24(sp),a0
    e5f4:	|  |  |  |   movea.l 32(a0),a0
    e5f8:	|  |  |  |   move.l (a1),d0
    e5fa:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    e5fe:	|  |  |  \-> moveq #24,d0
    e600:	|  |  |      add.l 24(sp),d0
    e604:	|  |  |      move.l d0,-(sp)
    e606:	|  |  |      jsr 13fb2 <trimStack>
    e60c:	|  |  |      addq.l #4,sp
    while (numParams--) {
    e60e:	|  |  \----> move.l 20(sp),d0
    e612:	|  |         move.l d0,d1
    e614:	|  |         subq.l #1,d1
    e616:	|  |         move.l d1,20(sp)
    e61a:	|  |         tst.l d0
    e61c:	|  \-------- bne.s e5b4 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    e61e:	|            moveq #2,d0
}
    e620:	\----------> movea.l (sp)+,a6
    e622:	             lea 12(sp),sp
    e626:	             rts

0000e628 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    e628:	          movea.l 8(sp),a0
    e62c:	          movea.l 24(a0),a0
    e630:	          move.l (a0),d0
    e632:	          moveq #6,d1
    e634:	          cmp.l d0,d1
    e636:	      /-- beq.s e652 <builtIn_stackSize+0x2a>
    e638:	      |   moveq #10,d1
    e63a:	      |   cmp.l d0,d1
    e63c:	   /--|-- beq.s e696 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    e63e:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    e640:	   |  |   pea 17eb7 <PutChar+0x1be9>
    e646:	   |  |   jsr 157fa <KPrintF>
    e64c:	   |  |   addq.l #4,sp
	return BR_ERROR;
    e64e:	   |  |   moveq #1,d0
    e650:	/--|--|-- bra.s e6d0 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    e652:	|  |  \-> movea.l 8(sp),a0
    e656:	|  |      movea.l 24(a0),a0
    e65a:	|  |      move.l 4(a0),d0
    e65e:	|  |      move.l d0,-(sp)
    e660:	|  |      jsr 13f8e <stackSize>
    e666:	|  |      addq.l #4,sp
    e668:	|  |      move.l d0,d1
    e66a:	|  |      moveq #28,d0
    e66c:	|  |      add.l 8(sp),d0
    e670:	|  |      move.l d1,-(sp)
    e672:	|  |      pea 1 <_start+0x1>
    e676:	|  |      move.l d0,-(sp)
    e678:	|  |      jsr 13f20 <setVariable>
    e67e:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    e682:	|  |      moveq #24,d0
    e684:	|  |      add.l 8(sp),d0
    e688:	|  |      move.l d0,-(sp)
    e68a:	|  |      jsr 13fb2 <trimStack>
    e690:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    e692:	|  |      moveq #2,d0
    e694:	+--|----- bra.s e6d0 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    e696:	|  \----> movea.l 8(sp),a0
    e69a:	|         movea.l 24(a0),a0
    e69e:	|         movea.l 4(a0),a0
    e6a2:	|         move.l 4(a0),d1
    e6a6:	|         moveq #28,d0
    e6a8:	|         add.l 8(sp),d0
    e6ac:	|         move.l d1,-(sp)
    e6ae:	|         pea 1 <_start+0x1>
    e6b2:	|         move.l d0,-(sp)
    e6b4:	|         jsr 13f20 <setVariable>
    e6ba:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    e6be:	|         moveq #24,d0
    e6c0:	|         add.l 8(sp),d0
    e6c4:	|         move.l d0,-(sp)
    e6c6:	|         jsr 13fb2 <trimStack>
    e6cc:	|         addq.l #4,sp
			return BR_CONTINUE;
    e6ce:	|         moveq #2,d0
}
    e6d0:	\-------> rts

0000e6d2 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    e6d2:	       movea.l 8(sp),a0
    e6d6:	       movea.l 24(a0),a0
    e6da:	       move.l (a0),d0
    e6dc:	       moveq #6,d1
    e6de:	       cmp.l d0,d1
    e6e0:	   /-- beq.s e6f4 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    e6e2:	   |   pea 17ee0 <PutChar+0x1c12>
    e6e8:	   |   jsr 157fa <KPrintF>
    e6ee:	   |   addq.l #4,sp
		return BR_ERROR;
    e6f0:	   |   moveq #1,d0
    e6f2:	/--|-- bra.s e728 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    e6f4:	|  \-> moveq #28,d0
    e6f6:	|      add.l 8(sp),d0
    e6fa:	|      movea.l 8(sp),a0
    e6fe:	|      move.l 24(a0),d1
    e702:	|      move.l d0,-(sp)
    e704:	|      move.l d1,-(sp)
    e706:	|      jsr 13134 <copyStack>
    e70c:	|      addq.l #8,sp
    e70e:	|      tst.w d0
    e710:	|  /-- bne.s e716 <builtIn_copyStack+0x44>
    e712:	|  |   moveq #1,d0
    e714:	+--|-- bra.s e728 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    e716:	|  \-> moveq #24,d0
    e718:	|      add.l 8(sp),d0
    e71c:	|      move.l d0,-(sp)
    e71e:	|      jsr 13fb2 <trimStack>
    e724:	|      addq.l #4,sp
	return BR_CONTINUE;
    e726:	|      moveq #2,d0
}
    e728:	\----> rts

0000e72a <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e72a:	       movea.l 8(sp),a0
    e72e:	       movea.l 24(a0),a0
    e732:	       movea.l 8(a0),a0
    e736:	       move.l (a0),d0
    e738:	       moveq #6,d1
    e73a:	       cmp.l d0,d1
    e73c:	   /-- beq.s e752 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    e73e:	   |   pea 17ef9 <PutChar+0x1c2b>
    e744:	   |   jsr 157fa <KPrintF>
    e74a:	   |   addq.l #4,sp
		return BR_ERROR;
    e74c:	   |   moveq #1,d0
    e74e:	/--|-- bra.w e7e0 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    e752:	|  \-> movea.l 8(sp),a0
    e756:	|      movea.l 24(a0),a0
    e75a:	|      movea.l 8(a0),a0
    e75e:	|      move.l 4(a0),d0
    e762:	|      move.l d0,d1
    e764:	|      movea.l 8(sp),a0
    e768:	|      move.l 24(a0),d0
    e76c:	|      move.l d1,-(sp)
    e76e:	|      move.l d0,-(sp)
    e770:	|      jsr 12e6a <addVarToStack>
    e776:	|      addq.l #8,sp
    e778:	|      tst.w d0
    e77a:	|  /-- bne.s e780 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    e77c:	|  |   moveq #1,d0
    e77e:	+--|-- bra.s e7e0 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    e780:	|  \-> movea.l 8(sp),a0
    e784:	|      movea.l 24(a0),a0
    e788:	|      movea.l 8(a0),a0
    e78c:	|      movea.l 4(a0),a0
    e790:	|      movea.l (a0),a0
    e792:	|      move.l 8(a0),d0
    e796:	|  /-- bne.s e7be <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    e798:	|  |   movea.l 8(sp),a0
    e79c:	|  |   movea.l 24(a0),a0
    e7a0:	|  |   movea.l 8(a0),a0
    e7a4:	|  |   movea.l 4(a0),a1
    e7a8:	|  |   movea.l 8(sp),a0
    e7ac:	|  |   movea.l 24(a0),a0
    e7b0:	|  |   movea.l 8(a0),a0
    e7b4:	|  |   movea.l 4(a0),a0
    e7b8:	|  |   move.l (a1),d0
    e7ba:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    e7be:	|  \-> moveq #24,d0
    e7c0:	|      add.l 8(sp),d0
    e7c4:	|      move.l d0,-(sp)
    e7c6:	|      jsr 13fb2 <trimStack>
    e7cc:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    e7ce:	|      moveq #24,d0
    e7d0:	|      add.l 8(sp),d0
    e7d4:	|      move.l d0,-(sp)
    e7d6:	|      jsr 13fb2 <trimStack>
    e7dc:	|      addq.l #4,sp
	return BR_CONTINUE;
    e7de:	|      moveq #2,d0
}
    e7e0:	\----> rts

0000e7e2 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e7e2:	             movea.l 8(sp),a0
    e7e6:	             movea.l 24(a0),a0
    e7ea:	             movea.l 8(a0),a0
    e7ee:	             move.l (a0),d0
    e7f0:	             moveq #6,d1
    e7f2:	             cmp.l d0,d1
    e7f4:	         /-- beq.s e80a <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    e7f6:	         |   pea 17ef9 <PutChar+0x1c2b>
    e7fc:	         |   jsr 157fa <KPrintF>
    e802:	         |   addq.l #4,sp
		return BR_ERROR;
    e804:	         |   moveq #1,d0
    e806:	/--------|-- bra.w e8f8 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    e80a:	|        \-> movea.l 8(sp),a0
    e80e:	|            movea.l 24(a0),a0
    e812:	|            movea.l 8(a0),a0
    e816:	|            movea.l 4(a0),a0
    e81a:	|            move.l (a0),d0
    e81c:	|     /----- bne.s e876 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    e81e:	|     |      movea.l 8(sp),a0
    e822:	|     |      movea.l 24(a0),a0
    e826:	|     |      movea.l 8(a0),a0
    e82a:	|     |      move.l 4(a0),d0
    e82e:	|     |      move.l d0,d1
    e830:	|     |      movea.l 8(sp),a0
    e834:	|     |      move.l 24(a0),d0
    e838:	|     |      move.l d1,-(sp)
    e83a:	|     |      move.l d0,-(sp)
    e83c:	|     |      jsr 12e6a <addVarToStack>
    e842:	|     |      addq.l #8,sp
    e844:	|     |      tst.w d0
    e846:	|     |  /-- bne.s e84e <builtIn_enqueue+0x6c>
			return BR_ERROR;
    e848:	|     |  |   moveq #1,d0
    e84a:	+-----|--|-- bra.w e8f8 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    e84e:	|     |  \-> movea.l 8(sp),a0
    e852:	|     |      movea.l 24(a0),a0
    e856:	|     |      movea.l 8(a0),a0
    e85a:	|     |      movea.l 4(a0),a1
    e85e:	|     |      movea.l 8(sp),a0
    e862:	|     |      movea.l 24(a0),a0
    e866:	|     |      movea.l 8(a0),a0
    e86a:	|     |      movea.l 4(a0),a0
    e86e:	|     |      move.l (a1),d0
    e870:	|     |      move.l d0,4(a0)
    e874:	|  /--|----- bra.s e8d6 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    e876:	|  |  \----> movea.l 8(sp),a0
    e87a:	|  |         movea.l 24(a0),a0
    e87e:	|  |         movea.l 8(a0),a0
    e882:	|  |         movea.l 4(a0),a0
    e886:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    e88a:	|  |         move.l d0,d1
    e88c:	|  |         addq.l #8,d1
    e88e:	|  |         movea.l 8(sp),a0
    e892:	|  |         move.l 24(a0),d0
    e896:	|  |         move.l d1,-(sp)
    e898:	|  |         move.l d0,-(sp)
    e89a:	|  |         jsr 12e6a <addVarToStack>
    e8a0:	|  |         addq.l #8,sp
    e8a2:	|  |         tst.w d0
    e8a4:	|  |     /-- bne.s e8aa <builtIn_enqueue+0xc8>
			return BR_ERROR;
    e8a6:	|  |     |   moveq #1,d0
    e8a8:	+--|-----|-- bra.s e8f8 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    e8aa:	|  |     \-> movea.l 8(sp),a0
    e8ae:	|  |         movea.l 24(a0),a0
    e8b2:	|  |         movea.l 8(a0),a0
    e8b6:	|  |         movea.l 4(a0),a0
    e8ba:	|  |         movea.l 4(a0),a1
    e8be:	|  |         movea.l 8(sp),a0
    e8c2:	|  |         movea.l 24(a0),a0
    e8c6:	|  |         movea.l 8(a0),a0
    e8ca:	|  |         movea.l 4(a0),a0
    e8ce:	|  |         move.l 8(a1),d0
    e8d2:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    e8d6:	|  \-------> moveq #24,d0
    e8d8:	|            add.l 8(sp),d0
    e8dc:	|            move.l d0,-(sp)
    e8de:	|            jsr 13fb2 <trimStack>
    e8e4:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    e8e6:	|            moveq #24,d0
    e8e8:	|            add.l 8(sp),d0
    e8ec:	|            move.l d0,-(sp)
    e8ee:	|            jsr 13fb2 <trimStack>
    e8f4:	|            addq.l #4,sp
	return BR_CONTINUE;
    e8f6:	|            moveq #2,d0
}
    e8f8:	\----------> rts

0000e8fa <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    e8fa:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e8fc:	       movea.l 12(sp),a0
    e900:	       movea.l 24(a0),a0
    e904:	       movea.l 8(a0),a0
    e908:	       move.l (a0),d0
    e90a:	       moveq #6,d1
    e90c:	       cmp.l d0,d1
    e90e:	   /-- beq.s e924 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    e910:	   |   pea 17ee0 <PutChar+0x1c12>
    e916:	   |   jsr 157fa <KPrintF>
    e91c:	   |   addq.l #4,sp
		return BR_ERROR;
    e91e:	   |   moveq #1,d0
    e920:	/--|-- bra.w e9ba <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    e924:	|  \-> movea.l 12(sp),a0
    e928:	|      movea.l 24(a0),a0
    e92c:	|      movea.l 8(a0),a0
    e930:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    e934:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    e936:	|      movea.l 12(sp),a0
    e93a:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    e93e:	|      clr.l -(sp)
    e940:	|      move.l d1,-(sp)
    e942:	|      move.l d0,-(sp)
    e944:	|      jsr 1320a <deleteVarFromStack>
    e94a:	|      lea 12(sp),sp
    e94e:	|      move.l d0,d1
    e950:	|      moveq #28,d0
    e952:	|      add.l 12(sp),d0
    e956:	|      move.l d1,-(sp)
    e958:	|      pea 1 <_start+0x1>
    e95c:	|      move.l d0,-(sp)
    e95e:	|      jsr 13f20 <setVariable>
    e964:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    e968:	|      movea.l 12(sp),a0
    e96c:	|      movea.l 24(a0),a0
    e970:	|      movea.l 8(a0),a0
    e974:	|      movea.l 4(a0),a0
    e978:	|      move.l (a0),d0
    e97a:	|      movea.l 12(sp),a0
    e97e:	|      movea.l 24(a0),a0
    e982:	|      movea.l 8(a0),a0
    e986:	|      movea.l 4(a0),a2
    e98a:	|      move.l d0,-(sp)
    e98c:	|      jsr 13f6a <stackFindLast>
    e992:	|      addq.l #4,sp
    e994:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    e998:	|      moveq #24,d0
    e99a:	|      add.l 12(sp),d0
    e99e:	|      move.l d0,-(sp)
    e9a0:	|      jsr 13fb2 <trimStack>
    e9a6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    e9a8:	|      moveq #24,d0
    e9aa:	|      add.l 12(sp),d0
    e9ae:	|      move.l d0,-(sp)
    e9b0:	|      jsr 13fb2 <trimStack>
    e9b6:	|      addq.l #4,sp
	return BR_CONTINUE;
    e9b8:	|      moveq #2,d0
}
    e9ba:	\----> movea.l (sp)+,a2
    e9bc:	       rts

0000e9be <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    e9be:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e9c0:	       movea.l 12(sp),a0
    e9c4:	       movea.l 24(a0),a0
    e9c8:	       movea.l 8(a0),a0
    e9cc:	       move.l (a0),d0
    e9ce:	       moveq #6,d1
    e9d0:	       cmp.l d0,d1
    e9d2:	   /-- beq.s e9e8 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    e9d4:	   |   pea 17ee0 <PutChar+0x1c12>
    e9da:	   |   jsr 157fa <KPrintF>
    e9e0:	   |   addq.l #4,sp
		return BR_ERROR;
    e9e2:	   |   moveq #1,d0
    e9e4:	/--|-- bra.w ea80 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    e9e8:	|  \-> movea.l 12(sp),a0
    e9ec:	|      movea.l 24(a0),a0
    e9f0:	|      movea.l 8(a0),a0
    e9f4:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    e9f8:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    e9fa:	|      movea.l 12(sp),a0
    e9fe:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ea02:	|      pea 1 <_start+0x1>
    ea06:	|      move.l d1,-(sp)
    ea08:	|      move.l d0,-(sp)
    ea0a:	|      jsr 1320a <deleteVarFromStack>
    ea10:	|      lea 12(sp),sp
    ea14:	|      move.l d0,d1
    ea16:	|      moveq #28,d0
    ea18:	|      add.l 12(sp),d0
    ea1c:	|      move.l d1,-(sp)
    ea1e:	|      pea 1 <_start+0x1>
    ea22:	|      move.l d0,-(sp)
    ea24:	|      jsr 13f20 <setVariable>
    ea2a:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    ea2e:	|      movea.l 12(sp),a0
    ea32:	|      movea.l 24(a0),a0
    ea36:	|      movea.l 8(a0),a0
    ea3a:	|      movea.l 4(a0),a0
    ea3e:	|      move.l (a0),d0
    ea40:	|      movea.l 12(sp),a0
    ea44:	|      movea.l 24(a0),a0
    ea48:	|      movea.l 8(a0),a0
    ea4c:	|      movea.l 4(a0),a2
    ea50:	|      move.l d0,-(sp)
    ea52:	|      jsr 13f6a <stackFindLast>
    ea58:	|      addq.l #4,sp
    ea5a:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    ea5e:	|      moveq #24,d0
    ea60:	|      add.l 12(sp),d0
    ea64:	|      move.l d0,-(sp)
    ea66:	|      jsr 13fb2 <trimStack>
    ea6c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ea6e:	|      moveq #24,d0
    ea70:	|      add.l 12(sp),d0
    ea74:	|      move.l d0,-(sp)
    ea76:	|      jsr 13fb2 <trimStack>
    ea7c:	|      addq.l #4,sp
	return BR_CONTINUE;
    ea7e:	|      moveq #2,d0
}
    ea80:	\----> movea.l (sp)+,a2
    ea82:	       rts

0000ea84 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ea84:	       movea.l 8(sp),a0
    ea88:	       movea.l 24(a0),a0
    ea8c:	       move.l (a0),d0
    ea8e:	       moveq #6,d1
    ea90:	       cmp.l d0,d1
    ea92:	   /-- beq.s eaa6 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    ea94:	   |   pea 17ee0 <PutChar+0x1c12>
    ea9a:	   |   jsr 157fa <KPrintF>
    eaa0:	   |   addq.l #4,sp
		return BR_ERROR;
    eaa2:	   |   moveq #1,d0
    eaa4:	/--|-- bra.s eb10 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    eaa6:	|  \-> movea.l 8(sp),a0
    eaaa:	|      movea.l 24(a0),a0
    eaae:	|      movea.l 4(a0),a0
    eab2:	|      move.l (a0),d0
    eab4:	|  /-- bne.s eac8 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    eab6:	|  |   pea 17f11 <PutChar+0x1c43>
    eabc:	|  |   jsr 157fa <KPrintF>
    eac2:	|  |   addq.l #4,sp
		return BR_ERROR;
    eac4:	|  |   moveq #1,d0
    eac6:	+--|-- bra.s eb10 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    eac8:	|  \-> moveq #28,d0
    eaca:	|      add.l 8(sp),d0
    eace:	|      movea.l 8(sp),a0
    ead2:	|      movea.l 24(a0),a0
    ead6:	|      movea.l 4(a0),a0
    eada:	|      move.l (a0),d1
    eadc:	|      move.l d0,-(sp)
    eade:	|      move.l d1,-(sp)
    eae0:	|      jsr 13ae8 <copyVariable>
    eae6:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    eae8:	|      movea.l 8(sp),a0
    eaec:	|      movea.l 24(a0),a0
    eaf0:	|      move.l 4(a0),d0
    eaf4:	|      move.l d0,-(sp)
    eaf6:	|      jsr 13fb2 <trimStack>
    eafc:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    eafe:	|      moveq #24,d0
    eb00:	|      add.l 8(sp),d0
    eb04:	|      move.l d0,-(sp)
    eb06:	|      jsr 13fb2 <trimStack>
    eb0c:	|      addq.l #4,sp
	return BR_CONTINUE;
    eb0e:	|      moveq #2,d0
}
    eb10:	\----> rts

0000eb12 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    eb12:	       movea.l 8(sp),a0
    eb16:	       movea.l 24(a0),a0
    eb1a:	       move.l (a0),d0
    eb1c:	       moveq #6,d1
    eb1e:	       cmp.l d0,d1
    eb20:	   /-- beq.s eb34 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    eb22:	   |   pea 17ee0 <PutChar+0x1c12>
    eb28:	   |   jsr 157fa <KPrintF>
    eb2e:	   |   addq.l #4,sp
		return BR_ERROR;
    eb30:	   |   moveq #1,d0
    eb32:	/--|-- bra.s eb88 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    eb34:	|  \-> movea.l 8(sp),a0
    eb38:	|      movea.l 24(a0),a0
    eb3c:	|      movea.l 4(a0),a0
    eb40:	|      move.l (a0),d0
    eb42:	|  /-- bne.s eb56 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    eb44:	|  |   pea 17f11 <PutChar+0x1c43>
    eb4a:	|  |   jsr 157fa <KPrintF>
    eb50:	|  |   addq.l #4,sp
		return BR_ERROR;
    eb52:	|  |   moveq #1,d0
    eb54:	+--|-- bra.s eb88 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    eb56:	|  \-> moveq #28,d0
    eb58:	|      add.l 8(sp),d0
    eb5c:	|      movea.l 8(sp),a0
    eb60:	|      movea.l 24(a0),a0
    eb64:	|      movea.l 4(a0),a0
    eb68:	|      move.l (a0),d1
    eb6a:	|      move.l d0,-(sp)
    eb6c:	|      move.l d1,-(sp)
    eb6e:	|      jsr 13ae8 <copyVariable>
    eb74:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    eb76:	|      moveq #24,d0
    eb78:	|      add.l 8(sp),d0
    eb7c:	|      move.l d0,-(sp)
    eb7e:	|      jsr 13fb2 <trimStack>
    eb84:	|      addq.l #4,sp
	return BR_CONTINUE;
    eb86:	|      moveq #2,d0
}
    eb88:	\----> rts

0000eb8a <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    eb8a:	       movea.l 8(sp),a0
    eb8e:	       movea.l 24(a0),a0
    eb92:	       move.l (a0),d0
    eb94:	       moveq #6,d1
    eb96:	       cmp.l d0,d1
    eb98:	   /-- beq.s ebac <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    eb9a:	   |   pea 17ee0 <PutChar+0x1c12>
    eba0:	   |   jsr 157fa <KPrintF>
    eba6:	   |   addq.l #4,sp
		return BR_ERROR;
    eba8:	   |   moveq #1,d0
    ebaa:	/--|-- bra.s ec02 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ebac:	|  \-> movea.l 8(sp),a0
    ebb0:	|      movea.l 24(a0),a0
    ebb4:	|      movea.l 4(a0),a0
    ebb8:	|      move.l (a0),d0
    ebba:	|  /-- bne.s ebce <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    ebbc:	|  |   pea 17f11 <PutChar+0x1c43>
    ebc2:	|  |   jsr 157fa <KPrintF>
    ebc8:	|  |   addq.l #4,sp
		return BR_ERROR;
    ebca:	|  |   moveq #1,d0
    ebcc:	+--|-- bra.s ec02 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    ebce:	|  \-> moveq #28,d0
    ebd0:	|      add.l 8(sp),d0
    ebd4:	|      movea.l 8(sp),a0
    ebd8:	|      movea.l 24(a0),a0
    ebdc:	|      movea.l 4(a0),a0
    ebe0:	|      move.l 4(a0),d1
    ebe4:	|      move.l d0,-(sp)
    ebe6:	|      move.l d1,-(sp)
    ebe8:	|      jsr 13ae8 <copyVariable>
    ebee:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    ebf0:	|      moveq #24,d0
    ebf2:	|      add.l 8(sp),d0
    ebf6:	|      move.l d0,-(sp)
    ebf8:	|      jsr 13fb2 <trimStack>
    ebfe:	|      addq.l #4,sp
	return BR_CONTINUE;
    ec00:	|      moveq #2,d0
}
    ec02:	\----> rts

0000ec04 <builtIn_random>:

builtIn(random)
{
    ec04:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    ec06:	       movea.l 12(sp),a0
    ec0a:	       move.l 24(a0),d0
    ec0e:	       move.l d0,-(sp)
    ec10:	       pea 1 <_start+0x1>
    ec14:	       move.l sp,d0
    ec16:	       addq.l #8,d0
    ec18:	       move.l d0,-(sp)
    ec1a:	       jsr 1362e <getValueType>
    ec20:	       lea 12(sp),sp
    ec24:	       tst.w d0
    ec26:	   /-- bne.s ec2c <builtIn_random+0x28>
		return BR_ERROR;
    ec28:	   |   moveq #1,d0
    ec2a:	/--|-- bra.s ec76 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    ec2c:	|  \-> moveq #24,d0
    ec2e:	|      add.l 12(sp),d0
    ec32:	|      move.l d0,-(sp)
    ec34:	|      jsr 13fb2 <trimStack>
    ec3a:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    ec3c:	|      move.l (sp),d0
    ec3e:	|  /-- bgt.s ec44 <builtIn_random+0x40>
    ec40:	|  |   moveq #1,d0
    ec42:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    ec44:	|  \-> jsr c58 <rand>
    ec4a:	|      move.l d0,d1
    ec4c:	|      move.l (sp),d0
    ec4e:	|      move.l d0,-(sp)
    ec50:	|      move.l d1,-(sp)
    ec52:	|      jsr 16292 <__umodsi3>
    ec58:	|      addq.l #8,sp
    ec5a:	|      move.l d0,d1
    ec5c:	|      moveq #28,d0
    ec5e:	|      add.l 12(sp),d0
    ec62:	|      move.l d1,-(sp)
    ec64:	|      pea 1 <_start+0x1>
    ec68:	|      move.l d0,-(sp)
    ec6a:	|      jsr 13f20 <setVariable>
    ec70:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ec74:	|      moveq #2,d0
}
    ec76:	\----> addq.l #4,sp
    ec78:	       rts

0000ec7a <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    ec7a:	nop
    ec7c:	rts

0000ec7e <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    ec7e:	moveq #2,d0
}
    ec80:	rts

0000ec82 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    ec82:	moveq #2,d0
}
    ec84:	rts

0000ec86 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ec86:	moveq #2,d0
}
    ec88:	rts

0000ec8a <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ec8a:	moveq #2,d0
}
    ec8c:	rts

0000ec8e <builtIn_setFont>:


builtIn(setFont)
{
    ec8e:	       lea -16(sp),sp
    ec92:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ec94:	       movea.l 28(sp),a0
    ec98:	       move.l 24(a0),d0
    ec9c:	       move.l d0,-(sp)
    ec9e:	       pea 1 <_start+0x1>
    eca2:	       lea 12(sp),a0
    eca6:	       move.l a0,-(sp)
    eca8:	       jsr 1362e <getValueType>
    ecae:	       lea 12(sp),sp
    ecb2:	       tst.w d0
    ecb4:	   /-- bne.s ecbc <builtIn_setFont+0x2e>
    ecb6:	   |   moveq #1,d0
    ecb8:	/--|-- bra.w ed6a <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    ecbc:	|  \-> moveq #24,d0
    ecbe:	|      add.l 28(sp),d0
    ecc2:	|      move.l d0,-(sp)
    ecc4:	|      jsr 13fb2 <trimStack>
    ecca:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    eccc:	|      movea.l 28(sp),a0
    ecd0:	|      move.l 24(a0),d0
    ecd4:	|      move.l d0,-(sp)
    ecd6:	|      jsr 13c04 <getTextFromAnyVar>
    ecdc:	|      addq.l #4,sp
    ecde:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    ece2:	|  /-- bne.s ecea <builtIn_setFont+0x5c>
    ece4:	|  |   moveq #1,d0
    ece6:	+--|-- bra.w ed6a <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    ecea:	|  \-> moveq #24,d0
    ecec:	|      add.l 28(sp),d0
    ecf0:	|      move.l d0,-(sp)
    ecf2:	|      jsr 13fb2 <trimStack>
    ecf8:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    ecfa:	|      movea.l 28(sp),a0
    ecfe:	|      move.l 24(a0),d0
    ed02:	|      move.l d0,-(sp)
    ed04:	|      pea 5 <_start+0x5>
    ed08:	|      lea 16(sp),a0
    ed0c:	|      move.l a0,-(sp)
    ed0e:	|      jsr 1362e <getValueType>
    ed14:	|      lea 12(sp),sp
    ed18:	|      tst.w d0
    ed1a:	|  /-- bne.s ed20 <builtIn_setFont+0x92>
    ed1c:	|  |   moveq #1,d0
    ed1e:	+--|-- bra.s ed6a <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    ed20:	|  \-> moveq #24,d0
    ed22:	|      add.l 28(sp),d0
    ed26:	|      move.l d0,-(sp)
    ed28:	|      jsr 13fb2 <trimStack>
    ed2e:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    ed30:	|      move.l 4(sp),d1
    ed34:	|      move.l 8(sp),d0
    ed38:	|      move.l d1,-(sp)
    ed3a:	|      move.l 20(sp),-(sp)
    ed3e:	|      move.l d0,-(sp)
    ed40:	|      jsr 14026 <loadFont>
    ed46:	|      lea 12(sp),sp
    ed4a:	|      tst.w d0
    ed4c:	|  /-- bne.s ed52 <builtIn_setFont+0xc4>
    ed4e:	|  |   moveq #1,d0
    ed50:	+--|-- bra.s ed6a <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    ed52:	|  \-> move.l 16(sp),12(sp)
    ed58:	|      move.l 1af02 <SysBase>,d0
    ed5e:	|      movea.l d0,a6
    ed60:	|      movea.l 12(sp),a1
    ed64:	|      jsr -690(a6)

    return BR_CONTINUE;
    ed68:	|      moveq #2,d0
}
    ed6a:	\----> movea.l (sp)+,a6
    ed6c:	       lea 16(sp),sp
    ed70:	       rts

0000ed72 <builtIn_inFont>:

builtIn(inFont)
{
    ed72:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ed74:	       movea.l 12(sp),a0
    ed78:	       move.l 24(a0),d0
    ed7c:	       move.l d0,-(sp)
    ed7e:	       jsr 13c04 <getTextFromAnyVar>
    ed84:	       addq.l #4,sp
    ed86:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    ed88:	   /-- bne.s ed8e <builtIn_inFont+0x1c>
    ed8a:	   |   moveq #1,d0
    ed8c:	/--|-- bra.s edc4 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    ed8e:	|  \-> moveq #24,d0
    ed90:	|      add.l 12(sp),d0
    ed94:	|      move.l d0,-(sp)
    ed96:	|      jsr 13fb2 <trimStack>
    ed9c:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    ed9e:	|      move.l (sp),-(sp)
    eda0:	|      jsr 13ffa <isInFont>
    eda6:	|      addq.l #4,sp
    eda8:	|      movea.w d0,a0
    edaa:	|      moveq #28,d0
    edac:	|      add.l 12(sp),d0
    edb0:	|      move.l a0,-(sp)
    edb2:	|      pea 1 <_start+0x1>
    edb6:	|      move.l d0,-(sp)
    edb8:	|      jsr 13f20 <setVariable>
    edbe:	|      lea 12(sp),sp
	return BR_CONTINUE;
    edc2:	|      moveq #2,d0
}
    edc4:	\----> addq.l #4,sp
    edc6:	       rts

0000edc8 <builtIn_pasteString>:

builtIn(pasteString)
{
    edc8:	       lea -16(sp),sp
    edcc:	       move.l a6,-(sp)
    edce:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    edd0:	       movea.l 32(sp),a0
    edd4:	       move.l 24(a0),d0
    edd8:	       move.l d0,-(sp)
    edda:	       jsr 13c04 <getTextFromAnyVar>
    ede0:	       addq.l #4,sp
    ede2:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    ede6:	       moveq #24,d0
    ede8:	       add.l 32(sp),d0
    edec:	       move.l d0,-(sp)
    edee:	       jsr 13fb2 <trimStack>
    edf4:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    edf6:	       movea.l 32(sp),a0
    edfa:	       move.l 24(a0),d0
    edfe:	       move.l d0,-(sp)
    ee00:	       pea 1 <_start+0x1>
    ee04:	       lea 20(sp),a0
    ee08:	       move.l a0,-(sp)
    ee0a:	       jsr 1362e <getValueType>
    ee10:	       lea 12(sp),sp
    ee14:	       tst.w d0
    ee16:	   /-- bne.s ee1e <builtIn_pasteString+0x56>
    ee18:	   |   moveq #1,d0
    ee1a:	/--|-- bra.w eea6 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    ee1e:	|  \-> moveq #24,d0
    ee20:	|      add.l 32(sp),d0
    ee24:	|      move.l d0,-(sp)
    ee26:	|      jsr 13fb2 <trimStack>
    ee2c:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ee2e:	|      movea.l 32(sp),a0
    ee32:	|      move.l 24(a0),d0
    ee36:	|      move.l d0,-(sp)
    ee38:	|      pea 1 <_start+0x1>
    ee3c:	|      lea 16(sp),a0
    ee40:	|      move.l a0,-(sp)
    ee42:	|      jsr 1362e <getValueType>
    ee48:	|      lea 12(sp),sp
    ee4c:	|      tst.w d0
    ee4e:	|  /-- bne.s ee54 <builtIn_pasteString+0x8c>
    ee50:	|  |   moveq #1,d0
    ee52:	+--|-- bra.s eea6 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    ee54:	|  \-> moveq #24,d0
    ee56:	|      add.l 32(sp),d0
    ee5a:	|      move.l d0,-(sp)
    ee5c:	|      jsr 13fb2 <trimStack>
    ee62:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    ee64:	|      move.l 8(sp),d0
    ee68:	|      cmpi.l #65535,d0
    ee6e:	|  /-- bne.s ee8e <builtIn_pasteString+0xc6>
    ee70:	|  |   move.l 1ae56 <winWidth>,d2
    ee76:	|  |   move.l 20(sp),-(sp)
    ee7a:	|  |   jsr 1400c <stringWidth>
    ee80:	|  |   addq.l #4,sp
    ee82:	|  |   move.l d2,d1
    ee84:	|  |   sub.l d0,d1
    ee86:	|  |   move.l d1,d0
    ee88:	|  |   lsr.l #1,d0
    ee8a:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    ee8e:	|  \-> move.l 20(sp),16(sp)
    ee94:	|      move.l 1af02 <SysBase>,d0
    ee9a:	|      movea.l d0,a6
    ee9c:	|      movea.l 16(sp),a1
    eea0:	|      jsr -690(a6)
    return BR_CONTINUE;
    eea4:	|      moveq #2,d0
}
    eea6:	\----> move.l (sp)+,d2
    eea8:	       movea.l (sp)+,a6
    eeaa:	       lea 16(sp),sp
    eeae:	       rts

0000eeb0 <builtIn_anim>:

builtIn(anim)
{
    eeb0:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    eeb4:	       moveq #1,d0
    eeb6:	       cmp.l 16(sp),d0
    eeba:	   /-- blt.s eed0 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    eebc:	   |   pea 17f24 <PutChar+0x1c56>
    eec2:	   |   jsr 157fa <KPrintF>
    eec8:	   |   addq.l #4,sp
		return BR_ERROR;
    eeca:	   |   moveq #1,d0
    eecc:	/--|-- bra.w ef5e <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    eed0:	|  \-> moveq #24,d1
    eed2:	|      add.l 20(sp),d1
    eed6:	|      move.l 16(sp),d0
    eeda:	|      subq.l #1,d0
    eedc:	|      move.l d1,-(sp)
    eede:	|      move.l d0,-(sp)
    eee0:	|      jsr 86e6 <createPersonaAnim>
    eee6:	|      addq.l #8,sp
    eee8:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eeec:	|      movea.l 20(sp),a0
    eef0:	|      move.l 24(a0),d0
    eef4:	|      move.l d0,-(sp)
    eef6:	|      pea 5 <_start+0x5>
    eefa:	|      lea 8(sp),a0
    eefe:	|      move.l a0,-(sp)
    ef00:	|      jsr 1362e <getValueType>
    ef06:	|      lea 12(sp),sp
    ef0a:	|      tst.w d0
    ef0c:	|  /-- bne.s ef12 <builtIn_anim+0x62>
    ef0e:	|  |   moveq #1,d0
    ef10:	+--|-- bra.s ef5e <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    ef12:	|  \-> moveq #24,d0
    ef14:	|      add.l 20(sp),d0
    ef18:	|      move.l d0,-(sp)
    ef1a:	|      jsr 13fb2 <trimStack>
    ef20:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    ef22:	|      move.l (sp),d0
    ef24:	|      move.l d0,-(sp)
    ef26:	|      jsr 1455c <loadBankForAnim>
    ef2c:	|      addq.l #4,sp
    ef2e:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    ef32:	|  /-- bne.s ef38 <builtIn_anim+0x88>
    ef34:	|  |   moveq #1,d0
    ef36:	+--|-- bra.s ef5e <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    ef38:	|  \-> move.l 4(sp),-(sp)
    ef3c:	|      move.l 12(sp),-(sp)
    ef40:	|      jsr a4f0 <setBankFile>
    ef46:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    ef48:	|      moveq #28,d0
    ef4a:	|      add.l 20(sp),d0
    ef4e:	|      move.l 8(sp),-(sp)
    ef52:	|      move.l d0,-(sp)
    ef54:	|      jsr 13edc <newAnimationVariable>
    ef5a:	|      addq.l #8,sp
	return BR_CONTINUE;
    ef5c:	|      moveq #2,d0
}
    ef5e:	\----> lea 12(sp),sp
    ef62:	       rts

0000ef64 <builtIn_costume>:

builtIn(costume)
{
    ef64:	          lea -32(sp),sp
    ef68:	          move.l a6,-(sp)
    ef6a:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    ef6c:	          moveq #8,d0
    ef6e:	          move.l d0,32(sp)
    ef72:	          clr.l 28(sp)
    ef76:	          move.l 1af02 <SysBase>,d0
    ef7c:	          movea.l d0,a6
    ef7e:	          move.l 32(sp),d0
    ef82:	          move.l 28(sp),d1
    ef86:	          jsr -684(a6)
    ef8a:	          move.l d0,24(sp)
    ef8e:	          move.l 24(sp),d0
    ef92:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    ef96:	      /-- bne.s ef9e <builtIn_costume+0x3a>
    ef98:	      |   moveq #1,d0
    ef9a:	/-----|-- bra.w f086 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    ef9e:	|     \-> move.l 44(sp),d0
    efa2:	|         pea 3 <_start+0x3>
    efa6:	|         move.l d0,-(sp)
    efa8:	|         jsr 16236 <__divsi3>
    efae:	|         addq.l #8,sp
    efb0:	|         movea.l 20(sp),a0
    efb4:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    efb8:	|         tst.l 44(sp)
    efbc:	|     /-- beq.s efd2 <builtIn_costume+0x6e>
    efbe:	|     |   movea.l 20(sp),a0
    efc2:	|     |   move.l 4(a0),d1
    efc6:	|     |   move.l d1,d0
    efc8:	|     |   add.l d0,d0
    efca:	|     |   add.l d1,d0
    efcc:	|     |   cmp.l 44(sp),d0
    efd0:	|  /--|-- beq.s efe6 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    efd2:	|  |  \-> pea 17f5e <PutChar+0x1c90>
    efd8:	|  |      jsr 157fa <KPrintF>
    efde:	|  |      addq.l #4,sp
        return BR_ERROR;
    efe0:	|  |      moveq #1,d0
    efe2:	+--|----- bra.w f086 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    efe6:	|  \----> move.l 44(sp),d0
    efea:	|         add.l d0,d0
    efec:	|         add.l d0,d0
    efee:	|         move.l d0,16(sp)
    eff2:	|         clr.l 12(sp)
    eff6:	|         move.l 1af02 <SysBase>,d0
    effc:	|         movea.l d0,a6
    effe:	|         move.l 16(sp),d0
    f002:	|         move.l 12(sp),d1
    f006:	|         jsr -684(a6)
    f00a:	|         move.l d0,8(sp)
    f00e:	|         move.l 8(sp),d0
    f012:	|         movea.l 20(sp),a0
    f016:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    f018:	|         movea.l 20(sp),a0
    f01c:	|         move.l (a0),d0
    f01e:	|     /-- bne.s f024 <builtIn_costume+0xc0>
    f020:	|     |   moveq #1,d0
    f022:	+-----|-- bra.s f086 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    f024:	|     \-> move.l 44(sp),d0
    f028:	|         subq.l #1,d0
    f02a:	|         move.l d0,36(sp)
    f02e:	|     /-- bra.s f06a <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    f030:	|  /--|-> movea.l 48(sp),a0
    f034:	|  |  |   move.l 24(a0),d0
    f038:	|  |  |   movea.l 20(sp),a0
    f03c:	|  |  |   movea.l (a0),a0
    f03e:	|  |  |   move.l 36(sp),d1
    f042:	|  |  |   add.l d1,d1
    f044:	|  |  |   add.l d1,d1
    f046:	|  |  |   lea (0,a0,d1.l),a2
    f04a:	|  |  |   move.l d0,-(sp)
    f04c:	|  |  |   jsr 13b06 <getAnimationFromVar>
    f052:	|  |  |   addq.l #4,sp
    f054:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    f056:	|  |  |   moveq #24,d0
    f058:	|  |  |   add.l 48(sp),d0
    f05c:	|  |  |   move.l d0,-(sp)
    f05e:	|  |  |   jsr 13fb2 <trimStack>
    f064:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    f066:	|  |  |   subq.l #1,36(sp)
    f06a:	|  |  \-> tst.l 36(sp)
    f06e:	|  \----- bge.s f030 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    f070:	|         moveq #28,d0
    f072:	|         add.l 48(sp),d0
    f076:	|         move.l 20(sp),-(sp)
    f07a:	|         move.l d0,-(sp)
    f07c:	|         jsr 13efe <newCostumeVariable>
    f082:	|         addq.l #8,sp
    return BR_CONTINUE;
    f084:	|         moveq #2,d0
}
    f086:	\-------> movea.l (sp)+,a2
    f088:	          movea.l (sp)+,a6
    f08a:	          lea 32(sp),sp
    f08e:	          rts

0000f090 <builtIn_launch>:

builtIn(launch)
{
    f090:	          lea -20(sp),sp
    f094:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    f096:	          movea.l 32(sp),a0
    f09a:	          move.l 24(a0),d0
    f09e:	          move.l d0,-(sp)
    f0a0:	          jsr 13c04 <getTextFromAnyVar>
    f0a6:	          addq.l #4,sp
    f0a8:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    f0ac:	      /-- bne.s f0b4 <builtIn_launch+0x24>
    f0ae:	      |   moveq #1,d0
    f0b0:	/-----|-- bra.w f1e2 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    f0b4:	|     \-> move.l 20(sp),-(sp)
    f0b8:	|         jsr 2fe <encodeFilename>
    f0be:	|         addq.l #4,sp
    f0c0:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    f0c4:	|         moveq #24,d0
    f0c6:	|         add.l 32(sp),d0
    f0ca:	|         move.l d0,-(sp)
    f0cc:	|         jsr 13fb2 <trimStack>
    f0d2:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    f0d4:	|         movea.l 20(sp),a0
    f0d8:	|         move.b (a0),d0
    f0da:	|         cmpi.b #104,d0
    f0de:	|  /----- bne.s f148 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    f0e0:	|  |      movea.l 20(sp),a0
    f0e4:	|  |      addq.l #1,a0
    f0e6:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    f0e8:	|  |      cmpi.b #116,d0
    f0ec:	|  +----- bne.s f148 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    f0ee:	|  |      movea.l 20(sp),a0
    f0f2:	|  |      addq.l #2,a0
    f0f4:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    f0f6:	|  |      cmpi.b #116,d0
    f0fa:	|  +----- bne.s f148 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    f0fc:	|  |      movea.l 20(sp),a0
    f100:	|  |      addq.l #3,a0
    f102:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    f104:	|  |      cmpi.b #112,d0
    f108:	|  +----- bne.s f148 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f10a:	|  |      movea.l 20(sp),a0
    f10e:	|  |      addq.l #4,a0
    f110:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    f112:	|  |      cmpi.b #58,d0
    f116:	|  |  /-- beq.s f134 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f118:	|  |  |   movea.l 20(sp),a0
    f11c:	|  |  |   addq.l #4,a0
    f11e:	|  |  |   move.b (a0),d0
    f120:	|  |  |   cmpi.b #115,d0
    f124:	|  +--|-- bne.s f148 <builtIn_launch+0xb8>
    f126:	|  |  |   movea.l 20(sp),a0
    f12a:	|  |  |   addq.l #5,a0
    f12c:	|  |  |   move.b (a0),d0
    f12e:	|  |  |   cmpi.b #58,d0
    f132:	|  +--|-- bne.s f148 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    f134:	|  |  \-> move.l 20(sp),-(sp)
    f138:	|  |      jsr b8 <copyString>
    f13e:	|  |      addq.l #4,sp
    f140:	|  |      move.l d0,1b01c <launchMe>
    f146:	|  |  /-- bra.s f19a <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    f148:	|  \--|-> move.l 1ae6a <gamePath>,d0
    f14e:	|     |   pea 17fa9 <line.c.05397aaf+0x1d>
    f154:	|     |   move.l d0,-(sp)
    f156:	|     |   jsr 12b5a <joinStrings>
    f15c:	|     |   addq.l #8,sp
    f15e:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    f162:	|     |   move.l 16(sp),-(sp)
    f166:	|     |   move.l 16(sp),-(sp)
    f16a:	|     |   jsr 12b5a <joinStrings>
    f170:	|     |   addq.l #8,sp
    f172:	|     |   move.l d0,1b01c <launchMe>
        FreeVec(newText);
    f178:	|     |   move.l 16(sp),8(sp)
    f17e:	|     |   move.l 1af02 <SysBase>,d0
    f184:	|     |   movea.l d0,a6
    f186:	|     |   movea.l 8(sp),a1
    f18a:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    f18e:	|     |   move.l 1b01c <launchMe>,d0
    f194:	|     +-- bne.s f19a <builtIn_launch+0x10a>
    f196:	|     |   moveq #1,d0
    f198:	+-----|-- bra.s f1e2 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    f19a:	|     \-> move.l 20(sp),4(sp)
    f1a0:	|         move.l 1af02 <SysBase>,d0
    f1a6:	|         movea.l d0,a6
    f1a8:	|         movea.l 4(sp),a1
    f1ac:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    f1b0:	|         clr.l -(sp)
    f1b2:	|         jsr 300a <setGraphicsWindow>
    f1b8:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    f1ba:	|         moveq #28,d0
    f1bc:	|         add.l 32(sp),d0
    f1c0:	|         pea 1 <_start+0x1>
    f1c4:	|         pea 1 <_start+0x1>
    f1c8:	|         move.l d0,-(sp)
    f1ca:	|         jsr 13f20 <setVariable>
    f1d0:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    f1d4:	|         moveq #28,d0
    f1d6:	|         add.l 32(sp),d0
    f1da:	|         move.l d0,1b020 <launchResult>

    return BR_KEEP_AND_PAUSE;
    f1e0:	|         moveq #0,d0
}
    f1e2:	\-------> movea.l (sp)+,a6
    f1e4:	          lea 20(sp),sp
    f1e8:	          rts

0000f1ea <builtIn_pause>:

builtIn(pause)
{
    f1ea:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f1ec:	       movea.l 12(sp),a0
    f1f0:	       move.l 24(a0),d0
    f1f4:	       move.l d0,-(sp)
    f1f6:	       pea 1 <_start+0x1>
    f1fa:	       move.l sp,d0
    f1fc:	       addq.l #8,d0
    f1fe:	       move.l d0,-(sp)
    f200:	       jsr 1362e <getValueType>
    f206:	       lea 12(sp),sp
    f20a:	       tst.w d0
    f20c:	   /-- bne.s f212 <builtIn_pause+0x28>
    f20e:	   |   moveq #1,d0
    f210:	/--|-- bra.s f240 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    f212:	|  \-> moveq #24,d0
    f214:	|      add.l 12(sp),d0
    f218:	|      move.l d0,-(sp)
    f21a:	|      jsr 13fb2 <trimStack>
    f220:	|      addq.l #4,sp
	if (theTime > 0) {
    f222:	|      move.l (sp),d0
    f224:	|  /-- ble.s f23e <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    f226:	|  |   move.l (sp),d0
    f228:	|  |   subq.l #1,d0
    f22a:	|  |   movea.l 12(sp),a0
    f22e:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    f232:	|  |   movea.l 12(sp),a0
    f236:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    f23a:	|  |   moveq #0,d0
    f23c:	+--|-- bra.s f240 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    f23e:	|  \-> moveq #2,d0
}
    f240:	\----> addq.l #4,sp
    f242:	       rts

0000f244 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    f244:	jsr 376c <completeTimers>
	return BR_CONTINUE;
    f24a:	moveq #2,d0
}
    f24c:	rts

0000f24e <builtIn_callEvent>:

builtIn(callEvent)
{
    f24e:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f252:	       movea.l 20(sp),a0
    f256:	       move.l 24(a0),d0
    f25a:	       move.l d0,-(sp)
    f25c:	       pea 7 <_start+0x7>
    f260:	       lea 8(sp),a0
    f264:	       move.l a0,-(sp)
    f266:	       jsr 1362e <getValueType>
    f26c:	       lea 12(sp),sp
    f270:	       tst.w d0
    f272:	   /-- bne.s f27a <builtIn_callEvent+0x2c>
    f274:	   |   moveq #1,d0
    f276:	/--|-- bra.w f310 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f27a:	|  \-> moveq #24,d0
    f27c:	|      add.l 20(sp),d0
    f280:	|      move.l d0,-(sp)
    f282:	|      jsr 13fb2 <trimStack>
    f288:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f28a:	|      movea.l 20(sp),a0
    f28e:	|      move.l 24(a0),d0
    f292:	|      move.l d0,-(sp)
    f294:	|      pea 7 <_start+0x7>
    f298:	|      moveq #12,d0
    f29a:	|      add.l sp,d0
    f29c:	|      move.l d0,-(sp)
    f29e:	|      jsr 1362e <getValueType>
    f2a4:	|      lea 12(sp),sp
    f2a8:	|      tst.w d0
    f2aa:	|  /-- bne.s f2b0 <builtIn_callEvent+0x62>
    f2ac:	|  |   moveq #1,d0
    f2ae:	+--|-- bra.s f310 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f2b0:	|  \-> moveq #24,d0
    f2b2:	|      add.l 20(sp),d0
    f2b6:	|      move.l d0,-(sp)
    f2b8:	|      jsr 13fb2 <trimStack>
    f2be:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    f2c0:	|      move.l (sp),d1
    f2c2:	|      move.l 4(sp),d0
    f2c6:	|      move.l d1,-(sp)
    f2c8:	|      move.l d0,-(sp)
    f2ca:	|      jsr c498 <getCombinationFunction>
    f2d0:	|      addq.l #8,sp
    f2d2:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    f2d6:	|  /-- beq.s f2f6 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    f2d8:	|  |   moveq #28,d0
    f2da:	|  |   add.l 20(sp),d0
    f2de:	|  |   move.l 8(sp),-(sp)
    f2e2:	|  |   pea 2 <_start+0x2>
    f2e6:	|  |   move.l d0,-(sp)
    f2e8:	|  |   jsr 13f20 <setVariable>
    f2ee:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    f2f2:	|  |   moveq #4,d0
    f2f4:	+--|-- bra.s f310 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    f2f6:	|  \-> moveq #28,d0
    f2f8:	|      add.l 20(sp),d0
    f2fc:	|      clr.l -(sp)
    f2fe:	|      pea 1 <_start+0x1>
    f302:	|      move.l d0,-(sp)
    f304:	|      jsr 13f20 <setVariable>
    f30a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f30e:	|      moveq #2,d0
}
    f310:	\----> lea 12(sp),sp
    f314:	       rts

0000f316 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    f316:	move.w #1,1b02c <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    f31e:	moveq #2,d0
}
    f320:	rts

0000f322 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f322:	moveq #24,d0
    f324:	add.l 8(sp),d0
    f328:	move.l d0,-(sp)
    f32a:	jsr 13fb2 <trimStack>
    f330:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    f332:	pea 17fab <line.c.05397aaf+0x1f>
    f338:	jsr 157fa <KPrintF>
    f33e:	addq.l #4,sp
	return BR_CONTINUE;
    f340:	moveq #2,d0
}
    f342:	rts

0000f344 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    f344:	pea 17fab <line.c.05397aaf+0x1f>
    f34a:	jsr 157fa <KPrintF>
    f350:	addq.l #4,sp
	return BR_CONTINUE;
    f352:	moveq #2,d0
}
    f354:	rts

0000f356 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    f356:	pea 17fab <line.c.05397aaf+0x1f>
    f35c:	jsr 157fa <KPrintF>
    f362:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    f364:	moveq #2,d0
}
    f366:	rts

0000f368 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    f368:	pea 17fab <line.c.05397aaf+0x1f>
    f36e:	jsr 157fa <KPrintF>
    f374:	addq.l #4,sp
	return BR_CONTINUE;
    f376:	moveq #2,d0
}
    f378:	rts

0000f37a <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f37a:	pea 17fab <line.c.05397aaf+0x1f>
    f380:	jsr 157fa <KPrintF>
    f386:	addq.l #4,sp
	return BR_CONTINUE;
    f388:	moveq #2,d0
}
    f38a:	rts

0000f38c <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f38c:	pea 17fab <line.c.05397aaf+0x1f>
    f392:	jsr 157fa <KPrintF>
    f398:	addq.l #4,sp
	return BR_CONTINUE;
    f39a:	moveq #2,d0
}
    f39c:	rts

0000f39e <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    f39e:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f3a2:	       movea.l 20(sp),a0
    f3a6:	       move.l 24(a0),d0
    f3aa:	       move.l d0,-(sp)
    f3ac:	       pea 1 <_start+0x1>
    f3b0:	       moveq #16,d0
    f3b2:	       add.l sp,d0
    f3b4:	       move.l d0,-(sp)
    f3b6:	       jsr 1362e <getValueType>
    f3bc:	       lea 12(sp),sp
    f3c0:	       tst.w d0
    f3c2:	   /-- bne.s f3ca <builtIn_startMusic+0x2c>
    f3c4:	   |   moveq #1,d0
    f3c6:	/--|-- bra.w f46a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f3ca:	|  \-> moveq #24,d0
    f3cc:	|      add.l 20(sp),d0
    f3d0:	|      move.l d0,-(sp)
    f3d2:	|      jsr 13fb2 <trimStack>
    f3d8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f3da:	|      movea.l 20(sp),a0
    f3de:	|      move.l 24(a0),d0
    f3e2:	|      move.l d0,-(sp)
    f3e4:	|      pea 1 <_start+0x1>
    f3e8:	|      moveq #12,d0
    f3ea:	|      add.l sp,d0
    f3ec:	|      move.l d0,-(sp)
    f3ee:	|      jsr 1362e <getValueType>
    f3f4:	|      lea 12(sp),sp
    f3f8:	|      tst.w d0
    f3fa:	|  /-- bne.s f400 <builtIn_startMusic+0x62>
    f3fc:	|  |   moveq #1,d0
    f3fe:	+--|-- bra.s f46a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f400:	|  \-> moveq #24,d0
    f402:	|      add.l 20(sp),d0
    f406:	|      move.l d0,-(sp)
    f408:	|      jsr 13fb2 <trimStack>
    f40e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f410:	|      movea.l 20(sp),a0
    f414:	|      move.l 24(a0),d0
    f418:	|      move.l d0,-(sp)
    f41a:	|      pea 5 <_start+0x5>
    f41e:	|      lea 8(sp),a0
    f422:	|      move.l a0,-(sp)
    f424:	|      jsr 1362e <getValueType>
    f42a:	|      lea 12(sp),sp
    f42e:	|      tst.w d0
    f430:	|  /-- bne.s f436 <builtIn_startMusic+0x98>
    f432:	|  |   moveq #1,d0
    f434:	+--|-- bra.s f46a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f436:	|  \-> moveq #24,d0
    f438:	|      add.l 20(sp),d0
    f43c:	|      move.l d0,-(sp)
    f43e:	|      jsr 13fb2 <trimStack>
    f444:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    f446:	|      movea.l 8(sp),a0
    f44a:	|      move.l 4(sp),d1
    f44e:	|      move.l (sp),d0
    f450:	|      move.l a0,-(sp)
    f452:	|      move.l d1,-(sp)
    f454:	|      move.l d0,-(sp)
    f456:	|      jsr c0a4 <playMOD>
    f45c:	|      lea 12(sp),sp
    f460:	|      tst.w d0
    f462:	|  /-- bne.s f468 <builtIn_startMusic+0xca>
    f464:	|  |   moveq #2,d0
    f466:	+--|-- bra.s f46a <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    f468:	|  \-> moveq #2,d0
}
    f46a:	\----> lea 12(sp),sp
    f46e:	       rts

0000f470 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    f470:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f472:	       movea.l 12(sp),a0
    f476:	       move.l 24(a0),d0
    f47a:	       move.l d0,-(sp)
    f47c:	       pea 1 <_start+0x1>
    f480:	       move.l sp,d0
    f482:	       addq.l #8,d0
    f484:	       move.l d0,-(sp)
    f486:	       jsr 1362e <getValueType>
    f48c:	       lea 12(sp),sp
    f490:	       tst.w d0
    f492:	   /-- bne.s f498 <builtIn_stopMusic+0x28>
    f494:	   |   moveq #1,d0
    f496:	/--|-- bra.s f4b6 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    f498:	|  \-> moveq #24,d0
    f49a:	|      add.l 12(sp),d0
    f49e:	|      move.l d0,-(sp)
    f4a0:	|      jsr 13fb2 <trimStack>
    f4a6:	|      addq.l #4,sp
	stopMOD (v);
    f4a8:	|      move.l (sp),d0
    f4aa:	|      move.l d0,-(sp)
    f4ac:	|      jsr c140 <stopMOD>
    f4b2:	|      addq.l #4,sp
	return BR_CONTINUE;
    f4b4:	|      moveq #2,d0
}
    f4b6:	\----> addq.l #4,sp
    f4b8:	       rts

0000f4ba <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    f4ba:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f4bc:	       movea.l 16(sp),a0
    f4c0:	       move.l 24(a0),d0
    f4c4:	       move.l d0,-(sp)
    f4c6:	       pea 1 <_start+0x1>
    f4ca:	       move.l sp,d0
    f4cc:	       addq.l #8,d0
    f4ce:	       move.l d0,-(sp)
    f4d0:	       jsr 1362e <getValueType>
    f4d6:	       lea 12(sp),sp
    f4da:	       tst.w d0
    f4dc:	   /-- bne.s f4e2 <builtIn_setMusicVolume+0x28>
    f4de:	   |   moveq #1,d0
    f4e0:	/--|-- bra.s f53c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f4e2:	|  \-> moveq #24,d0
    f4e4:	|      add.l 16(sp),d0
    f4e8:	|      move.l d0,-(sp)
    f4ea:	|      jsr 13fb2 <trimStack>
    f4f0:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f4f2:	|      movea.l 16(sp),a0
    f4f6:	|      move.l 24(a0),d0
    f4fa:	|      move.l d0,-(sp)
    f4fc:	|      pea 1 <_start+0x1>
    f500:	|      moveq #12,d0
    f502:	|      add.l sp,d0
    f504:	|      move.l d0,-(sp)
    f506:	|      jsr 1362e <getValueType>
    f50c:	|      lea 12(sp),sp
    f510:	|      tst.w d0
    f512:	|  /-- bne.s f518 <builtIn_setMusicVolume+0x5e>
    f514:	|  |   moveq #1,d0
    f516:	+--|-- bra.s f53c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f518:	|  \-> moveq #24,d0
    f51a:	|      add.l 16(sp),d0
    f51e:	|      move.l d0,-(sp)
    f520:	|      jsr 13fb2 <trimStack>
    f526:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    f528:	|      move.l (sp),d1
    f52a:	|      move.l 4(sp),d0
    f52e:	|      move.l d1,-(sp)
    f530:	|      move.l d0,-(sp)
    f532:	|      jsr c126 <setMusicVolume>
    f538:	|      addq.l #8,sp
	return BR_CONTINUE;
    f53a:	|      moveq #2,d0
}
    f53c:	\----> addq.l #8,sp
    f53e:	       rts

0000f540 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    f540:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f542:	       movea.l 12(sp),a0
    f546:	       move.l 24(a0),d0
    f54a:	       move.l d0,-(sp)
    f54c:	       pea 1 <_start+0x1>
    f550:	       move.l sp,d0
    f552:	       addq.l #8,d0
    f554:	       move.l d0,-(sp)
    f556:	       jsr 1362e <getValueType>
    f55c:	       lea 12(sp),sp
    f560:	       tst.w d0
    f562:	   /-- bne.s f568 <builtIn_setDefaultMusicVolume+0x28>
    f564:	   |   moveq #1,d0
    f566:	/--|-- bra.s f586 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    f568:	|  \-> moveq #24,d0
    f56a:	|      add.l 12(sp),d0
    f56e:	|      move.l d0,-(sp)
    f570:	|      jsr 13fb2 <trimStack>
    f576:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    f578:	|      move.l (sp),d0
    f57a:	|      move.l d0,-(sp)
    f57c:	|      jsr c10a <setDefaultMusicVolume>
    f582:	|      addq.l #4,sp
	return BR_CONTINUE;
    f584:	|      moveq #2,d0
}
    f586:	\----> addq.l #4,sp
    f588:	       rts

0000f58a <builtIn_playSound>:

builtIn(playSound)
{
    f58a:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f58c:	       movea.l 12(sp),a0
    f590:	       move.l 24(a0),d0
    f594:	       move.l d0,-(sp)
    f596:	       pea 5 <_start+0x5>
    f59a:	       move.l sp,d0
    f59c:	       addq.l #8,d0
    f59e:	       move.l d0,-(sp)
    f5a0:	       jsr 1362e <getValueType>
    f5a6:	       lea 12(sp),sp
    f5aa:	       tst.w d0
    f5ac:	   /-- bne.s f5b2 <builtIn_playSound+0x28>
    f5ae:	   |   moveq #1,d0
    f5b0:	/--|-- bra.s f5da <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    f5b2:	|  \-> moveq #24,d0
    f5b4:	|      add.l 12(sp),d0
    f5b8:	|      move.l d0,-(sp)
    f5ba:	|      jsr 13fb2 <trimStack>
    f5c0:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    f5c2:	|      move.l (sp),d0
    f5c4:	|      clr.l -(sp)
    f5c6:	|      move.l d0,-(sp)
    f5c8:	|      jsr c12e <startSound>
    f5ce:	|      addq.l #8,sp
    f5d0:	|      tst.w d0
    f5d2:	|  /-- bne.s f5d8 <builtIn_playSound+0x4e>
    f5d4:	|  |   moveq #2,d0
    f5d6:	+--|-- bra.s f5da <builtIn_playSound+0x50>
	return BR_CONTINUE;
    f5d8:	|  \-> moveq #2,d0
}
    f5da:	\----> addq.l #4,sp
    f5dc:	       rts

0000f5de <builtIn_loopSound>:

builtIn(loopSound)
{
    f5de:	             lea -28(sp),sp
    f5e2:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    f5e4:	             tst.l 36(sp)
    f5e8:	         /-- bgt.s f5fe <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    f5ea:	         |   pea 17fce <line.c.05397aaf+0x42>
    f5f0:	         |   jsr 157fa <KPrintF>
    f5f6:	         |   addq.l #4,sp
		return BR_ERROR;
    f5f8:	         |   moveq #1,d0
    f5fa:	/--------|-- bra.w f7ba <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    f5fe:	|        \-> moveq #1,d0
    f600:	|            cmp.l 36(sp),d0
    f604:	|     /----- blt.s f660 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    f606:	|     |      movea.l 40(sp),a0
    f60a:	|     |      move.l 24(a0),d0
    f60e:	|     |      move.l d0,-(sp)
    f610:	|     |      pea 5 <_start+0x5>
    f614:	|     |      lea 16(sp),a0
    f618:	|     |      move.l a0,-(sp)
    f61a:	|     |      jsr 1362e <getValueType>
    f620:	|     |      lea 12(sp),sp
    f624:	|     |      tst.w d0
    f626:	|     |  /-- bne.s f62e <builtIn_loopSound+0x50>
    f628:	|     |  |   moveq #1,d0
    f62a:	+-----|--|-- bra.w f7ba <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    f62e:	|     |  \-> moveq #24,d0
    f630:	|     |      add.l 40(sp),d0
    f634:	|     |      move.l d0,-(sp)
    f636:	|     |      jsr 13fb2 <trimStack>
    f63c:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    f63e:	|     |      move.l 8(sp),d0
    f642:	|     |      pea 1 <_start+0x1>
    f646:	|     |      move.l d0,-(sp)
    f648:	|     |      jsr c12e <startSound>
    f64e:	|     |      addq.l #8,sp
    f650:	|     |      tst.w d0
    f652:	|     |  /-- bne.s f65a <builtIn_loopSound+0x7c>
    f654:	|     |  |   moveq #2,d0
    f656:	+-----|--|-- bra.w f7ba <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    f65a:	|     |  \-> moveq #2,d0
    f65c:	+-----|----- bra.w f7ba <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    f660:	|     \----> moveq #2,d1
    f662:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    f666:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    f66a:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    f66e:	|            movea.l 40(sp),a0
    f672:	|            movea.l 24(a0),a0
    f676:	|            move.l (a0),d0
    f678:	|            moveq #5,d1
    f67a:	|            cmp.l d0,d1
    f67c:	|  /-------- beq.w f754 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    f680:	|  |         movea.l 40(sp),a0
    f684:	|  |         move.l 24(a0),d0
    f688:	|  |         move.l d0,-(sp)
    f68a:	|  |         pea 1 <_start+0x1>
    f68e:	|  |         lea 12(sp),a0
    f692:	|  |         move.l a0,-(sp)
    f694:	|  |         jsr 1362e <getValueType>
    f69a:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    f69e:	|  |         moveq #24,d0
    f6a0:	|  |         add.l 40(sp),d0
    f6a4:	|  |         move.l d0,-(sp)
    f6a6:	|  |         jsr 13fb2 <trimStack>
    f6ac:	|  |         addq.l #4,sp
			numParams--;
    f6ae:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    f6b2:	|  +-------- bra.w f754 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    f6b6:	|  |  /----> movea.l 40(sp),a0
    f6ba:	|  |  |      move.l 24(a0),d0
    f6be:	|  |  |      move.l d0,-(sp)
    f6c0:	|  |  |      pea 5 <_start+0x5>
    f6c4:	|  |  |      lea 16(sp),a0
    f6c8:	|  |  |      move.l a0,-(sp)
    f6ca:	|  |  |      jsr 1362e <getValueType>
    f6d0:	|  |  |      lea 12(sp),sp
    f6d4:	|  |  |      tst.w d0
    f6d6:	|  |  |  /-- bne.s f6ec <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    f6d8:	|  |  |  |   pea 1800c <line.c.05397aaf+0x80>
    f6de:	|  |  |  |   jsr 157fa <KPrintF>
    f6e4:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    f6e6:	|  |  |  |   moveq #1,d0
    f6e8:	+--|--|--|-- bra.w f7ba <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    f6ec:	|  |  |  \-> moveq #20,d0
    f6ee:	|  |  |      move.l d0,20(sp)
    f6f2:	|  |  |      clr.l 16(sp)
    f6f6:	|  |  |      move.l 1af02 <SysBase>,d0
    f6fc:	|  |  |      movea.l d0,a6
    f6fe:	|  |  |      move.l 20(sp),d0
    f702:	|  |  |      move.l 16(sp),d1
    f706:	|  |  |      jsr -684(a6)
    f70a:	|  |  |      move.l d0,12(sp)
    f70e:	|  |  |      move.l 12(sp),d0
    f712:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    f716:	|  |  |  /-- bne.s f71e <builtIn_loopSound+0x140>
    f718:	|  |  |  |   moveq #1,d0
    f71a:	+--|--|--|-- bra.w f7ba <builtIn_loopSound+0x1dc>

			s->next = old;
    f71e:	|  |  |  \-> movea.l 28(sp),a0
    f722:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    f728:	|  |  |      movea.l 28(sp),a0
    f72c:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    f730:	|  |  |      move.l 8(sp),d0
    f734:	|  |  |      movea.l 28(sp),a0
    f738:	|  |  |      move.l d0,(a0)
			old = s;
    f73a:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    f740:	|  |  |      moveq #24,d0
    f742:	|  |  |      add.l 40(sp),d0
    f746:	|  |  |      move.l d0,-(sp)
    f748:	|  |  |      jsr 13fb2 <trimStack>
    f74e:	|  |  |      addq.l #4,sp
			numParams--;
    f750:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    f754:	|  \--|----> tst.l 36(sp)
    f758:	|     \----- bne.w f6b6 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    f75c:	|        /-- bra.s f768 <builtIn_loopSound+0x18a>
    f75e:	|     /--|-> movea.l 28(sp),a0
    f762:	|     |  |   move.l 4(a0),28(sp)
    f768:	|     |  \-> movea.l 28(sp),a0
    f76c:	|     |      move.l 4(a0),d0
    f770:	|     \----- bne.s f75e <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    f772:	|            move.l 4(sp),d0
    f776:	|            moveq #1,d1
    f778:	|            cmp.l d0,d1
    f77a:	|     /----- bge.s f792 <builtIn_loopSound+0x1b4>
			s->next = old;
    f77c:	|     |      movea.l 28(sp),a0
    f780:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    f786:	|     |      movea.l 24(sp),a0
    f78a:	|     |      move.l 28(sp),8(a0)
    f790:	|     |  /-- bra.s f7a2 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    f792:	|     \--|-> move.l 4(sp),d0
    f796:	|        +-- beq.s f7a2 <builtIn_loopSound+0x1c4>
			s->next = s;
    f798:	|        |   movea.l 28(sp),a0
    f79c:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    f7a2:	|        \-> movea.l 24(sp),a0
    f7a6:	|            moveq #-1,d0
    f7a8:	|            move.l d0,16(a0)
		playSoundList(old);
    f7ac:	|            move.l 24(sp),-(sp)
    f7b0:	|            jsr c0a8 <playSoundList>
    f7b6:	|            addq.l #4,sp
		return BR_CONTINUE;
    f7b8:	|            moveq #2,d0
	}
}
    f7ba:	\----------> movea.l (sp)+,a6
    f7bc:	             lea 28(sp),sp
    f7c0:	             rts

0000f7c2 <builtIn_stopSound>:

builtIn(stopSound)
{
    f7c2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f7c4:	       movea.l 12(sp),a0
    f7c8:	       move.l 24(a0),d0
    f7cc:	       move.l d0,-(sp)
    f7ce:	       pea 5 <_start+0x5>
    f7d2:	       move.l sp,d0
    f7d4:	       addq.l #8,d0
    f7d6:	       move.l d0,-(sp)
    f7d8:	       jsr 1362e <getValueType>
    f7de:	       lea 12(sp),sp
    f7e2:	       tst.w d0
    f7e4:	   /-- bne.s f7ea <builtIn_stopSound+0x28>
    f7e6:	   |   moveq #1,d0
    f7e8:	/--|-- bra.s f808 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    f7ea:	|  \-> moveq #24,d0
    f7ec:	|      add.l 12(sp),d0
    f7f0:	|      move.l d0,-(sp)
    f7f2:	|      jsr 13fb2 <trimStack>
    f7f8:	|      addq.l #4,sp
	huntKillSound (v);
    f7fa:	|      move.l (sp),d0
    f7fc:	|      move.l d0,-(sp)
    f7fe:	|      jsr c0a0 <huntKillSound>
    f804:	|      addq.l #4,sp
	return BR_CONTINUE;
    f806:	|      moveq #2,d0
}
    f808:	\----> addq.l #4,sp
    f80a:	       rts

0000f80c <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    f80c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f80e:	       movea.l 12(sp),a0
    f812:	       move.l 24(a0),d0
    f816:	       move.l d0,-(sp)
    f818:	       pea 1 <_start+0x1>
    f81c:	       move.l sp,d0
    f81e:	       addq.l #8,d0
    f820:	       move.l d0,-(sp)
    f822:	       jsr 1362e <getValueType>
    f828:	       lea 12(sp),sp
    f82c:	       tst.w d0
    f82e:	   /-- bne.s f834 <builtIn_setDefaultSoundVolume+0x28>
    f830:	   |   moveq #1,d0
    f832:	/--|-- bra.s f852 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    f834:	|  \-> moveq #24,d0
    f836:	|      add.l 12(sp),d0
    f83a:	|      move.l d0,-(sp)
    f83c:	|      jsr 13fb2 <trimStack>
    f842:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    f844:	|      move.l (sp),d0
    f846:	|      move.l d0,-(sp)
    f848:	|      jsr c116 <setDefaultSoundVolume>
    f84e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f850:	|      moveq #2,d0
}
    f852:	\----> addq.l #4,sp
    f854:	       rts

0000f856 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    f856:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f858:	       movea.l 16(sp),a0
    f85c:	       move.l 24(a0),d0
    f860:	       move.l d0,-(sp)
    f862:	       pea 1 <_start+0x1>
    f866:	       move.l sp,d0
    f868:	       addq.l #8,d0
    f86a:	       move.l d0,-(sp)
    f86c:	       jsr 1362e <getValueType>
    f872:	       lea 12(sp),sp
    f876:	       tst.w d0
    f878:	   /-- bne.s f87e <builtIn_setSoundVolume+0x28>
    f87a:	   |   moveq #1,d0
    f87c:	/--|-- bra.s f8d8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    f87e:	|  \-> moveq #24,d0
    f880:	|      add.l 16(sp),d0
    f884:	|      move.l d0,-(sp)
    f886:	|      jsr 13fb2 <trimStack>
    f88c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f88e:	|      movea.l 16(sp),a0
    f892:	|      move.l 24(a0),d0
    f896:	|      move.l d0,-(sp)
    f898:	|      pea 5 <_start+0x5>
    f89c:	|      moveq #12,d0
    f89e:	|      add.l sp,d0
    f8a0:	|      move.l d0,-(sp)
    f8a2:	|      jsr 1362e <getValueType>
    f8a8:	|      lea 12(sp),sp
    f8ac:	|      tst.w d0
    f8ae:	|  /-- bne.s f8b4 <builtIn_setSoundVolume+0x5e>
    f8b0:	|  |   moveq #1,d0
    f8b2:	+--|-- bra.s f8d8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    f8b4:	|  \-> moveq #24,d0
    f8b6:	|      add.l 16(sp),d0
    f8ba:	|      move.l d0,-(sp)
    f8bc:	|      jsr 13fb2 <trimStack>
    f8c2:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    f8c4:	|      move.l (sp),d1
    f8c6:	|      move.l 4(sp),d0
    f8ca:	|      move.l d1,-(sp)
    f8cc:	|      move.l d0,-(sp)
    f8ce:	|      jsr c12a <setSoundVolume>
    f8d4:	|      addq.l #8,sp
	return BR_CONTINUE;
    f8d6:	|      moveq #2,d0
}
    f8d8:	\----> addq.l #8,sp
    f8da:	       rts

0000f8dc <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    f8dc:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f8e0:	       movea.l 20(sp),a0
    f8e4:	       move.l 24(a0),d0
    f8e8:	       move.l d0,-(sp)
    f8ea:	       pea 1 <_start+0x1>
    f8ee:	       moveq #12,d0
    f8f0:	       add.l sp,d0
    f8f2:	       move.l d0,-(sp)
    f8f4:	       jsr 1362e <getValueType>
    f8fa:	       lea 12(sp),sp
    f8fe:	       tst.w d0
    f900:	   /-- bne.s f908 <builtIn_setSoundLoopPoints+0x2c>
    f902:	   |   moveq #1,d0
    f904:	/--|-- bra.w f9a0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    f908:	|  \-> moveq #24,d0
    f90a:	|      add.l 20(sp),d0
    f90e:	|      move.l d0,-(sp)
    f910:	|      jsr 13fb2 <trimStack>
    f916:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f918:	|      movea.l 20(sp),a0
    f91c:	|      move.l 24(a0),d0
    f920:	|      move.l d0,-(sp)
    f922:	|      pea 1 <_start+0x1>
    f926:	|      lea 8(sp),a0
    f92a:	|      move.l a0,-(sp)
    f92c:	|      jsr 1362e <getValueType>
    f932:	|      lea 12(sp),sp
    f936:	|      tst.w d0
    f938:	|  /-- bne.s f93e <builtIn_setSoundLoopPoints+0x62>
    f93a:	|  |   moveq #1,d0
    f93c:	+--|-- bra.s f9a0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    f93e:	|  \-> moveq #24,d0
    f940:	|      add.l 20(sp),d0
    f944:	|      move.l d0,-(sp)
    f946:	|      jsr 13fb2 <trimStack>
    f94c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f94e:	|      movea.l 20(sp),a0
    f952:	|      move.l 24(a0),d0
    f956:	|      move.l d0,-(sp)
    f958:	|      pea 5 <_start+0x5>
    f95c:	|      moveq #16,d0
    f95e:	|      add.l sp,d0
    f960:	|      move.l d0,-(sp)
    f962:	|      jsr 1362e <getValueType>
    f968:	|      lea 12(sp),sp
    f96c:	|      tst.w d0
    f96e:	|  /-- bne.s f974 <builtIn_setSoundLoopPoints+0x98>
    f970:	|  |   moveq #1,d0
    f972:	+--|-- bra.s f9a0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    f974:	|  \-> moveq #24,d0
    f976:	|      add.l 20(sp),d0
    f97a:	|      move.l d0,-(sp)
    f97c:	|      jsr 13fb2 <trimStack>
    f982:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    f984:	|      movea.l 4(sp),a0
    f988:	|      move.l (sp),d1
    f98a:	|      move.l 8(sp),d0
    f98e:	|      move.l a0,-(sp)
    f990:	|      move.l d1,-(sp)
    f992:	|      move.l d0,-(sp)
    f994:	|      jsr c122 <setSoundLoop>
    f99a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f99e:	|      moveq #2,d0
}
    f9a0:	\----> lea 12(sp),sp
    f9a4:	       rts

0000f9a6 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    f9a6:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    f9a8:	          movea.l 12(sp),a0
    f9ac:	          movea.l 24(a0),a0
    f9b0:	          move.l (a0),d0
    f9b2:	          moveq #5,d1
    f9b4:	          cmp.l d0,d1
    f9b6:	/-------- bne.s f9fa <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    f9b8:	|         movea.l 12(sp),a0
    f9bc:	|         move.l 24(a0),d0
    f9c0:	|         move.l d0,-(sp)
    f9c2:	|         pea 5 <_start+0x5>
    f9c6:	|         move.l sp,d0
    f9c8:	|         addq.l #8,d0
    f9ca:	|         move.l d0,-(sp)
    f9cc:	|         jsr 1362e <getValueType>
    f9d2:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    f9d6:	|         moveq #24,d0
    f9d8:	|         add.l 12(sp),d0
    f9dc:	|         move.l d0,-(sp)
    f9de:	|         jsr 13fb2 <trimStack>
    f9e4:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    f9e6:	|         move.l (sp),d0
    f9e8:	|         move.l d0,-(sp)
    f9ea:	|         jsr 14fa4 <setFloor>
    f9f0:	|         addq.l #4,sp
    f9f2:	|         tst.w d0
    f9f4:	|  /----- bne.s fa10 <builtIn_setFloor+0x6a>
    f9f6:	|  |      moveq #1,d0
    f9f8:	|  |  /-- bra.s fa12 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    f9fa:	\--|--|-> moveq #24,d0
    f9fc:	   |  |   add.l 12(sp),d0
    fa00:	   |  |   move.l d0,-(sp)
    fa02:	   |  |   jsr 13fb2 <trimStack>
    fa08:	   |  |   addq.l #4,sp
		setFloorNull ();
    fa0a:	   |  |   jsr 1571e <setFloorNull>
	}
	return BR_CONTINUE;
    fa10:	   \--|-> moveq #2,d0
}
    fa12:	      \-> addq.l #4,sp
    fa14:	          rts

0000fa16 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    fa16:	jsr 1483c <drawFloor>
	return BR_CONTINUE;
    fa1c:	moveq #2,d0
}
    fa1e:	rts

0000fa20 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    fa20:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    fa22:	          movea.l 12(sp),a0
    fa26:	          movea.l 24(a0),a0
    fa2a:	          move.l (a0),d0
    fa2c:	          moveq #5,d1
    fa2e:	          cmp.l d0,d1
    fa30:	/-------- bne.s fa74 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    fa32:	|         movea.l 12(sp),a0
    fa36:	|         move.l 24(a0),d0
    fa3a:	|         move.l d0,-(sp)
    fa3c:	|         pea 5 <_start+0x5>
    fa40:	|         move.l sp,d0
    fa42:	|         addq.l #8,d0
    fa44:	|         move.l d0,-(sp)
    fa46:	|         jsr 1362e <getValueType>
    fa4c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    fa50:	|         moveq #24,d0
    fa52:	|         add.l 12(sp),d0
    fa56:	|         move.l d0,-(sp)
    fa58:	|         jsr 13fb2 <trimStack>
    fa5e:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    fa60:	|         move.l (sp),d0
    fa62:	|         move.l d0,-(sp)
    fa64:	|         jsr 763e <setZBuffer>
    fa6a:	|         addq.l #4,sp
    fa6c:	|         tst.w d0
    fa6e:	|  /----- bne.s fa8a <builtIn_setZBuffer+0x6a>
    fa70:	|  |      moveq #1,d0
    fa72:	|  |  /-- bra.s fa8c <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    fa74:	\--|--|-> moveq #24,d0
    fa76:	   |  |   add.l 12(sp),d0
    fa7a:	   |  |   move.l d0,-(sp)
    fa7c:	   |  |   jsr 13fb2 <trimStack>
    fa82:	   |  |   addq.l #4,sp
		killZBuffer ();
    fa84:	   |  |   jsr 75e8 <killZBuffer>
	}
	return BR_CONTINUE;
    fa8a:	   \--|-> moveq #2,d0
}
    fa8c:	      \-> addq.l #4,sp
    fa8e:	          rts

0000fa90 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    fa90:	pea 18043 <line.c.05397aaf+0xb7>
    fa96:	jsr 157fa <KPrintF>
    fa9c:	addq.l #4,sp
	return BR_CONTINUE;
    fa9e:	moveq #2,d0
}
    faa0:	rts

0000faa2 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    faa2:	          movea.l 8(sp),a0
    faa6:	          move.l 24(a0),d0
    faaa:	          move.l d0,-(sp)
    faac:	          pea 1 <_start+0x1>
    fab0:	          pea 1b028 <speechMode>
    fab6:	          jsr 1362e <getValueType>
    fabc:	          lea 12(sp),sp
    fac0:	          tst.w d0
    fac2:	      /-- bne.s fac8 <builtIn_setSpeechMode+0x26>
    fac4:	      |   moveq #1,d0
    fac6:	/-----|-- bra.s fb00 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    fac8:	|     \-> moveq #24,d0
    faca:	|         add.l 8(sp),d0
    face:	|         move.l d0,-(sp)
    fad0:	|         jsr 13fb2 <trimStack>
    fad6:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    fad8:	|         move.l 1b028 <speechMode>,d0
    fade:	|     /-- bmi.s faec <builtIn_setSpeechMode+0x4a>
    fae0:	|     |   move.l 1b028 <speechMode>,d0
    fae6:	|     |   moveq #2,d1
    fae8:	|     |   cmp.l d0,d1
    faea:	|  /--|-- bge.s fafe <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    faec:	|  |  \-> pea 1805c <line.c.05397aaf+0xd0>
    faf2:	|  |      jsr 157fa <KPrintF>
    faf8:	|  |      addq.l #4,sp
		return BR_ERROR;
    fafa:	|  |      moveq #1,d0
    fafc:	+--|----- bra.s fb00 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    fafe:	|  \----> moveq #2,d0
}
    fb00:	\-------> rts

0000fb02 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    fb02:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    fb04:	       jsr 6df0 <isThereAnySpeechGoingOn>
    fb0a:	       move.l d0,(sp)
	if (i == -1) {
    fb0c:	       moveq #-1,d0
    fb0e:	       cmp.l (sp),d0
    fb10:	/----- bne.s fb2c <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    fb12:	|      moveq #28,d0
    fb14:	|      add.l 12(sp),d0
    fb18:	|      clr.l -(sp)
    fb1a:	|      pea 1 <_start+0x1>
    fb1e:	|      move.l d0,-(sp)
    fb20:	|      jsr 13f20 <setVariable>
    fb26:	|      lea 12(sp),sp
    fb2a:	|  /-- bra.s fb44 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    fb2c:	\--|-> moveq #28,d0
    fb2e:	   |   add.l 12(sp),d0
    fb32:	   |   move.l (sp),-(sp)
    fb34:	   |   pea 7 <_start+0x7>
    fb38:	   |   move.l d0,-(sp)
    fb3a:	   |   jsr 13f20 <setVariable>
    fb40:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fb44:	   \-> moveq #2,d0
}
    fb46:	       addq.l #4,sp
    fb48:	       rts

0000fb4a <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    fb4a:	jsr 510a <killSpeechTimers>
	return BR_CONTINUE;
    fb50:	moveq #2,d0
}
    fb52:	rts

0000fb54 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    fb54:	       move.l 1b062 <overRegion>,d0
    fb5a:	/----- beq.s fb84 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    fb5c:	|      movea.l 1b062 <overRegion>,a0
    fb62:	|      movea.l 28(a0),a0
    fb66:	|      move.l 4(a0),d1
    fb6a:	|      moveq #28,d0
    fb6c:	|      add.l 8(sp),d0
    fb70:	|      move.l d1,-(sp)
    fb72:	|      pea 7 <_start+0x7>
    fb76:	|      move.l d0,-(sp)
    fb78:	|      jsr 13f20 <setVariable>
    fb7e:	|      lea 12(sp),sp
    fb82:	|  /-- bra.s fb9c <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    fb84:	\--|-> moveq #28,d0
    fb86:	   |   add.l 8(sp),d0
    fb8a:	   |   clr.l -(sp)
    fb8c:	   |   pea 1 <_start+0x1>
    fb90:	   |   move.l d0,-(sp)
    fb92:	   |   jsr 13f20 <setVariable>
    fb98:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    fb9c:	   \-> moveq #2,d0
}
    fb9e:	       rts

0000fba0 <builtIn_rename>:

builtIn(rename)
{
    fba0:	       lea -16(sp),sp
    fba4:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fba6:	       movea.l 28(sp),a0
    fbaa:	       move.l 24(a0),d0
    fbae:	       move.l d0,-(sp)
    fbb0:	       jsr 13c04 <getTextFromAnyVar>
    fbb6:	       addq.l #4,sp
    fbb8:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    fbbc:	   /-- bne.s fbc2 <builtIn_rename+0x22>
    fbbe:	   |   moveq #1,d0
    fbc0:	/--|-- bra.s fc3c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    fbc2:	|  \-> moveq #24,d0
    fbc4:	|      add.l 28(sp),d0
    fbc8:	|      move.l d0,-(sp)
    fbca:	|      jsr 13fb2 <trimStack>
    fbd0:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    fbd2:	|      movea.l 28(sp),a0
    fbd6:	|      move.l 24(a0),d0
    fbda:	|      move.l d0,-(sp)
    fbdc:	|      pea 7 <_start+0x7>
    fbe0:	|      lea 12(sp),a0
    fbe4:	|      move.l a0,-(sp)
    fbe6:	|      jsr 1362e <getValueType>
    fbec:	|      lea 12(sp),sp
    fbf0:	|      tst.w d0
    fbf2:	|  /-- bne.s fbf8 <builtIn_rename+0x58>
    fbf4:	|  |   moveq #1,d0
    fbf6:	+--|-- bra.s fc3c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    fbf8:	|  \-> moveq #24,d0
    fbfa:	|      add.l 28(sp),d0
    fbfe:	|      move.l d0,-(sp)
    fc00:	|      jsr 13fb2 <trimStack>
    fc06:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    fc08:	|      move.l 4(sp),d0
    fc0c:	|      move.l d0,-(sp)
    fc0e:	|      jsr c464 <findObjectType>
    fc14:	|      addq.l #4,sp
    fc16:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    fc1a:	|      movea.l 12(sp),a0
    fc1e:	|      move.l (a0),8(sp)
    fc22:	|      move.l 1af02 <SysBase>,d0
    fc28:	|      movea.l d0,a6
    fc2a:	|      movea.l 8(sp),a1
    fc2e:	|      jsr -690(a6)
	o->screenName = newText;
    fc32:	|      movea.l 12(sp),a0
    fc36:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    fc3a:	|      moveq #2,d0
}
    fc3c:	\----> movea.l (sp)+,a6
    fc3e:	       lea 16(sp),sp
    fc42:	       rts

0000fc44 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    fc44:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fc48:	          movea.l 20(sp),a0
    fc4c:	          move.l 24(a0),d0
    fc50:	          move.l d0,-(sp)
    fc52:	          pea 7 <_start+0x7>
    fc56:	          lea 8(sp),a0
    fc5a:	          move.l a0,-(sp)
    fc5c:	          jsr 1362e <getValueType>
    fc62:	          lea 12(sp),sp
    fc66:	          tst.w d0
    fc68:	      /-- bne.s fc70 <builtIn_getObjectX+0x2c>
    fc6a:	      |   moveq #1,d0
    fc6c:	/-----|-- bra.w fd0c <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    fc70:	|     \-> moveq #24,d0
    fc72:	|         add.l 20(sp),d0
    fc76:	|         move.l d0,-(sp)
    fc78:	|         jsr 13fb2 <trimStack>
    fc7e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    fc80:	|         move.l (sp),d0
    fc82:	|         move.l d0,-(sp)
    fc84:	|         jsr 959a <findPerson>
    fc8a:	|         addq.l #4,sp
    fc8c:	|         move.l d0,8(sp)
	if (pers) {
    fc90:	|     /-- beq.s fcbe <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    fc92:	|     |   movea.l 8(sp),a0
    fc96:	|     |   move.l (a0),d0
    fc98:	|     |   move.l d0,-(sp)
    fc9a:	|     |   jsr 15bce <__fixsfsi>
    fca0:	|     |   addq.l #4,sp
    fca2:	|     |   move.l d0,d1
    fca4:	|     |   moveq #28,d0
    fca6:	|     |   add.l 20(sp),d0
    fcaa:	|     |   move.l d1,-(sp)
    fcac:	|     |   pea 1 <_start+0x1>
    fcb0:	|     |   move.l d0,-(sp)
    fcb2:	|     |   jsr 13f20 <setVariable>
    fcb8:	|     |   lea 12(sp),sp
    fcbc:	|  /--|-- bra.s fd0a <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    fcbe:	|  |  \-> move.l (sp),d0
    fcc0:	|  |      move.l d0,-(sp)
    fcc2:	|  |      jsr 1417e <getRegionForObject>
    fcc8:	|  |      addq.l #4,sp
    fcca:	|  |      move.l d0,4(sp)
		if (la) {
    fcce:	|  |  /-- beq.s fcf2 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    fcd0:	|  |  |   movea.l 4(sp),a0
    fcd4:	|  |  |   move.l 16(a0),d1
    fcd8:	|  |  |   moveq #28,d0
    fcda:	|  |  |   add.l 20(sp),d0
    fcde:	|  |  |   move.l d1,-(sp)
    fce0:	|  |  |   pea 1 <_start+0x1>
    fce4:	|  |  |   move.l d0,-(sp)
    fce6:	|  |  |   jsr 13f20 <setVariable>
    fcec:	|  |  |   lea 12(sp),sp
    fcf0:	|  +--|-- bra.s fd0a <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    fcf2:	|  |  \-> moveq #28,d0
    fcf4:	|  |      add.l 20(sp),d0
    fcf8:	|  |      clr.l -(sp)
    fcfa:	|  |      pea 1 <_start+0x1>
    fcfe:	|  |      move.l d0,-(sp)
    fd00:	|  |      jsr 13f20 <setVariable>
    fd06:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    fd0a:	|  \----> moveq #2,d0
}
    fd0c:	\-------> lea 12(sp),sp
    fd10:	          rts

0000fd12 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    fd12:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fd16:	          movea.l 20(sp),a0
    fd1a:	          move.l 24(a0),d0
    fd1e:	          move.l d0,-(sp)
    fd20:	          pea 7 <_start+0x7>
    fd24:	          lea 8(sp),a0
    fd28:	          move.l a0,-(sp)
    fd2a:	          jsr 1362e <getValueType>
    fd30:	          lea 12(sp),sp
    fd34:	          tst.w d0
    fd36:	      /-- bne.s fd3e <builtIn_getObjectY+0x2c>
    fd38:	      |   moveq #1,d0
    fd3a:	/-----|-- bra.w fddc <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    fd3e:	|     \-> moveq #24,d0
    fd40:	|         add.l 20(sp),d0
    fd44:	|         move.l d0,-(sp)
    fd46:	|         jsr 13fb2 <trimStack>
    fd4c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    fd4e:	|         move.l (sp),d0
    fd50:	|         move.l d0,-(sp)
    fd52:	|         jsr 959a <findPerson>
    fd58:	|         addq.l #4,sp
    fd5a:	|         move.l d0,8(sp)
	if (pers) {
    fd5e:	|     /-- beq.s fd8e <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    fd60:	|     |   movea.l 8(sp),a0
    fd64:	|     |   move.l 4(a0),d0
    fd68:	|     |   move.l d0,-(sp)
    fd6a:	|     |   jsr 15bce <__fixsfsi>
    fd70:	|     |   addq.l #4,sp
    fd72:	|     |   move.l d0,d1
    fd74:	|     |   moveq #28,d0
    fd76:	|     |   add.l 20(sp),d0
    fd7a:	|     |   move.l d1,-(sp)
    fd7c:	|     |   pea 1 <_start+0x1>
    fd80:	|     |   move.l d0,-(sp)
    fd82:	|     |   jsr 13f20 <setVariable>
    fd88:	|     |   lea 12(sp),sp
    fd8c:	|  /--|-- bra.s fdda <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    fd8e:	|  |  \-> move.l (sp),d0
    fd90:	|  |      move.l d0,-(sp)
    fd92:	|  |      jsr 1417e <getRegionForObject>
    fd98:	|  |      addq.l #4,sp
    fd9a:	|  |      move.l d0,4(sp)
		if (la) {
    fd9e:	|  |  /-- beq.s fdc2 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    fda0:	|  |  |   movea.l 4(sp),a0
    fda4:	|  |  |   move.l 20(a0),d1
    fda8:	|  |  |   moveq #28,d0
    fdaa:	|  |  |   add.l 20(sp),d0
    fdae:	|  |  |   move.l d1,-(sp)
    fdb0:	|  |  |   pea 1 <_start+0x1>
    fdb4:	|  |  |   move.l d0,-(sp)
    fdb6:	|  |  |   jsr 13f20 <setVariable>
    fdbc:	|  |  |   lea 12(sp),sp
    fdc0:	|  +--|-- bra.s fdda <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    fdc2:	|  |  \-> moveq #28,d0
    fdc4:	|  |      add.l 20(sp),d0
    fdc8:	|  |      clr.l -(sp)
    fdca:	|  |      pea 1 <_start+0x1>
    fdce:	|  |      move.l d0,-(sp)
    fdd0:	|  |      jsr 13f20 <setVariable>
    fdd6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    fdda:	|  \----> moveq #2,d0
}
    fddc:	\-------> lea 12(sp),sp
    fde0:	          rts

0000fde2 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    fde2:	       lea -32(sp),sp
    fde6:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fdea:	       movea.l 56(sp),a0
    fdee:	       move.l 24(a0),d0
    fdf2:	       move.l d0,-(sp)
    fdf4:	       pea 1 <_start+0x1>
    fdf8:	       lea 28(sp),a0
    fdfc:	       move.l a0,-(sp)
    fdfe:	       jsr 1362e <getValueType>
    fe04:	       lea 12(sp),sp
    fe08:	       tst.w d0
    fe0a:	   /-- bne.s fe12 <builtIn_addScreenRegion+0x30>
    fe0c:	   |   moveq #1,d0
    fe0e:	/--|-- bra.w ffec <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fe12:	|  \-> moveq #24,d0
    fe14:	|      add.l 56(sp),d0
    fe18:	|      move.l d0,-(sp)
    fe1a:	|      jsr 13fb2 <trimStack>
    fe20:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fe22:	|      movea.l 56(sp),a0
    fe26:	|      move.l 24(a0),d0
    fe2a:	|      move.l d0,-(sp)
    fe2c:	|      pea 1 <_start+0x1>
    fe30:	|      moveq #48,d0
    fe32:	|      add.l sp,d0
    fe34:	|      move.l d0,-(sp)
    fe36:	|      jsr 1362e <getValueType>
    fe3c:	|      lea 12(sp),sp
    fe40:	|      tst.w d0
    fe42:	|  /-- bne.s fe4a <builtIn_addScreenRegion+0x68>
    fe44:	|  |   moveq #1,d0
    fe46:	+--|-- bra.w ffec <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fe4a:	|  \-> moveq #24,d0
    fe4c:	|      add.l 56(sp),d0
    fe50:	|      move.l d0,-(sp)
    fe52:	|      jsr 13fb2 <trimStack>
    fe58:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fe5a:	|      movea.l 56(sp),a0
    fe5e:	|      move.l 24(a0),d0
    fe62:	|      move.l d0,-(sp)
    fe64:	|      pea 1 <_start+0x1>
    fe68:	|      moveq #52,d0
    fe6a:	|      add.l sp,d0
    fe6c:	|      move.l d0,-(sp)
    fe6e:	|      jsr 1362e <getValueType>
    fe74:	|      lea 12(sp),sp
    fe78:	|      tst.w d0
    fe7a:	|  /-- bne.s fe82 <builtIn_addScreenRegion+0xa0>
    fe7c:	|  |   moveq #1,d0
    fe7e:	+--|-- bra.w ffec <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fe82:	|  \-> moveq #24,d0
    fe84:	|      add.l 56(sp),d0
    fe88:	|      move.l d0,-(sp)
    fe8a:	|      jsr 13fb2 <trimStack>
    fe90:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fe92:	|      movea.l 56(sp),a0
    fe96:	|      move.l 24(a0),d0
    fe9a:	|      move.l d0,-(sp)
    fe9c:	|      pea 1 <_start+0x1>
    fea0:	|      lea 32(sp),a0
    fea4:	|      move.l a0,-(sp)
    fea6:	|      jsr 1362e <getValueType>
    feac:	|      lea 12(sp),sp
    feb0:	|      tst.w d0
    feb2:	|  /-- bne.s feba <builtIn_addScreenRegion+0xd8>
    feb4:	|  |   moveq #1,d0
    feb6:	+--|-- bra.w ffec <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    feba:	|  \-> moveq #24,d0
    febc:	|      add.l 56(sp),d0
    fec0:	|      move.l d0,-(sp)
    fec2:	|      jsr 13fb2 <trimStack>
    fec8:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    feca:	|      movea.l 56(sp),a0
    fece:	|      move.l 24(a0),d0
    fed2:	|      move.l d0,-(sp)
    fed4:	|      pea 1 <_start+0x1>
    fed8:	|      lea 36(sp),a0
    fedc:	|      move.l a0,-(sp)
    fede:	|      jsr 1362e <getValueType>
    fee4:	|      lea 12(sp),sp
    fee8:	|      tst.w d0
    feea:	|  /-- bne.s fef2 <builtIn_addScreenRegion+0x110>
    feec:	|  |   moveq #1,d0
    feee:	+--|-- bra.w ffec <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fef2:	|  \-> moveq #24,d0
    fef4:	|      add.l 56(sp),d0
    fef8:	|      move.l d0,-(sp)
    fefa:	|      jsr 13fb2 <trimStack>
    ff00:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ff02:	|      movea.l 56(sp),a0
    ff06:	|      move.l 24(a0),d0
    ff0a:	|      move.l d0,-(sp)
    ff0c:	|      pea 1 <_start+0x1>
    ff10:	|      lea 40(sp),a0
    ff14:	|      move.l a0,-(sp)
    ff16:	|      jsr 1362e <getValueType>
    ff1c:	|      lea 12(sp),sp
    ff20:	|      tst.w d0
    ff22:	|  /-- bne.s ff2a <builtIn_addScreenRegion+0x148>
    ff24:	|  |   moveq #1,d0
    ff26:	+--|-- bra.w ffec <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ff2a:	|  \-> moveq #24,d0
    ff2c:	|      add.l 56(sp),d0
    ff30:	|      move.l d0,-(sp)
    ff32:	|      jsr 13fb2 <trimStack>
    ff38:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ff3a:	|      movea.l 56(sp),a0
    ff3e:	|      move.l 24(a0),d0
    ff42:	|      move.l d0,-(sp)
    ff44:	|      pea 1 <_start+0x1>
    ff48:	|      lea 44(sp),a0
    ff4c:	|      move.l a0,-(sp)
    ff4e:	|      jsr 1362e <getValueType>
    ff54:	|      lea 12(sp),sp
    ff58:	|      tst.w d0
    ff5a:	|  /-- bne.s ff62 <builtIn_addScreenRegion+0x180>
    ff5c:	|  |   moveq #1,d0
    ff5e:	+--|-- bra.w ffec <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ff62:	|  \-> moveq #24,d0
    ff64:	|      add.l 56(sp),d0
    ff68:	|      move.l d0,-(sp)
    ff6a:	|      jsr 13fb2 <trimStack>
    ff70:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ff72:	|      movea.l 56(sp),a0
    ff76:	|      move.l 24(a0),d0
    ff7a:	|      move.l d0,-(sp)
    ff7c:	|      pea 7 <_start+0x7>
    ff80:	|      lea 24(sp),a0
    ff84:	|      move.l a0,-(sp)
    ff86:	|      jsr 1362e <getValueType>
    ff8c:	|      lea 12(sp),sp
    ff90:	|      tst.w d0
    ff92:	|  /-- bne.s ff98 <builtIn_addScreenRegion+0x1b6>
    ff94:	|  |   moveq #1,d0
    ff96:	+--|-- bra.s ffec <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ff98:	|  \-> moveq #24,d0
    ff9a:	|      add.l 56(sp),d0
    ff9e:	|      move.l d0,-(sp)
    ffa0:	|      jsr 13fb2 <trimStack>
    ffa6:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    ffa8:	|      move.l 16(sp),d5
    ffac:	|      move.l 20(sp),d4
    ffb0:	|      move.l 40(sp),d3
    ffb4:	|      move.l 44(sp),d2
    ffb8:	|      movea.l 24(sp),a1
    ffbc:	|      movea.l 28(sp),a0
    ffc0:	|      move.l 32(sp),d1
    ffc4:	|      move.l 36(sp),d0
    ffc8:	|      move.l d5,-(sp)
    ffca:	|      move.l d4,-(sp)
    ffcc:	|      move.l d3,-(sp)
    ffce:	|      move.l d2,-(sp)
    ffd0:	|      move.l a1,-(sp)
    ffd2:	|      move.l a0,-(sp)
    ffd4:	|      move.l d1,-(sp)
    ffd6:	|      move.l d0,-(sp)
    ffd8:	|      jsr 14038 <addScreenRegion>
    ffde:	|      lea 32(sp),sp
    ffe2:	|      tst.w d0
    ffe4:	|  /-- beq.s ffea <builtIn_addScreenRegion+0x208>
    ffe6:	|  |   moveq #2,d0
    ffe8:	+--|-- bra.s ffec <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    ffea:	|  \-> moveq #1,d0

}
    ffec:	\----> movem.l (sp)+,d2-d5
    fff0:	       lea 32(sp),sp
    fff4:	       rts

0000fff6 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    fff6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fff8:	       movea.l 12(sp),a0
    fffc:	       move.l 24(a0),d0
   10000:	       move.l d0,-(sp)
   10002:	       pea 7 <_start+0x7>
   10006:	       move.l sp,d0
   10008:	       addq.l #8,d0
   1000a:	       move.l d0,-(sp)
   1000c:	       jsr 1362e <getValueType>
   10012:	       lea 12(sp),sp
   10016:	       tst.w d0
   10018:	   /-- bne.s 1001e <builtIn_removeScreenRegion+0x28>
   1001a:	   |   moveq #1,d0
   1001c:	/--|-- bra.s 1003c <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   1001e:	|  \-> moveq #24,d0
   10020:	|      add.l 12(sp),d0
   10024:	|      move.l d0,-(sp)
   10026:	|      jsr 13fb2 <trimStack>
   1002c:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   1002e:	|      move.l (sp),d0
   10030:	|      move.l d0,-(sp)
   10032:	|      jsr 14326 <removeScreenRegion>
   10038:	|      addq.l #4,sp
	return BR_CONTINUE;
   1003a:	|      moveq #2,d0
}
   1003c:	\----> addq.l #4,sp
   1003e:	       rts

00010040 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   10040:	jsr 144aa <showBoxes>
	return BR_CONTINUE;
   10046:	moveq #2,d0
}
   10048:	rts

0001004a <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   1004a:	jsr 141ac <killAllRegions>
	return BR_CONTINUE;
   10050:	moveq #2,d0
}
   10052:	rts

00010054 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   10054:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   10058:	       movea.l 24(sp),a0
   1005c:	       move.l 24(a0),d0
   10060:	       move.l d0,-(sp)
   10062:	       jsr 132da <getCostumeFromVar>
   10068:	       addq.l #4,sp
   1006a:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   1006e:	   /-- bne.s 10076 <builtIn_addCharacter+0x22>
   10070:	   |   moveq #1,d0
   10072:	/--|-- bra.w 10152 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   10076:	|  \-> moveq #24,d0
   10078:	|      add.l 24(sp),d0
   1007c:	|      move.l d0,-(sp)
   1007e:	|      jsr 13fb2 <trimStack>
   10084:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10086:	|      movea.l 24(sp),a0
   1008a:	|      move.l 24(a0),d0
   1008e:	|      move.l d0,-(sp)
   10090:	|      pea 1 <_start+0x1>
   10094:	|      lea 12(sp),a0
   10098:	|      move.l a0,-(sp)
   1009a:	|      jsr 1362e <getValueType>
   100a0:	|      lea 12(sp),sp
   100a4:	|      tst.w d0
   100a6:	|  /-- bne.s 100ae <builtIn_addCharacter+0x5a>
   100a8:	|  |   moveq #1,d0
   100aa:	+--|-- bra.w 10152 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   100ae:	|  \-> moveq #24,d0
   100b0:	|      add.l 24(sp),d0
   100b4:	|      move.l d0,-(sp)
   100b6:	|      jsr 13fb2 <trimStack>
   100bc:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   100be:	|      movea.l 24(sp),a0
   100c2:	|      move.l 24(a0),d0
   100c6:	|      move.l d0,-(sp)
   100c8:	|      pea 1 <_start+0x1>
   100cc:	|      moveq #16,d0
   100ce:	|      add.l sp,d0
   100d0:	|      move.l d0,-(sp)
   100d2:	|      jsr 1362e <getValueType>
   100d8:	|      lea 12(sp),sp
   100dc:	|      tst.w d0
   100de:	|  /-- bne.s 100e4 <builtIn_addCharacter+0x90>
   100e0:	|  |   moveq #1,d0
   100e2:	+--|-- bra.s 10152 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   100e4:	|  \-> moveq #24,d0
   100e6:	|      add.l 24(sp),d0
   100ea:	|      move.l d0,-(sp)
   100ec:	|      jsr 13fb2 <trimStack>
   100f2:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   100f4:	|      movea.l 24(sp),a0
   100f8:	|      move.l 24(a0),d0
   100fc:	|      move.l d0,-(sp)
   100fe:	|      pea 7 <_start+0x7>
   10102:	|      lea 8(sp),a0
   10106:	|      move.l a0,-(sp)
   10108:	|      jsr 1362e <getValueType>
   1010e:	|      lea 12(sp),sp
   10112:	|      tst.w d0
   10114:	|  /-- bne.s 1011a <builtIn_addCharacter+0xc6>
   10116:	|  |   moveq #1,d0
   10118:	+--|-- bra.s 10152 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1011a:	|  \-> moveq #24,d0
   1011c:	|      add.l 24(sp),d0
   10120:	|      move.l d0,-(sp)
   10122:	|      jsr 13fb2 <trimStack>
   10128:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   1012a:	|      movea.l (sp),a0
   1012c:	|      move.l 4(sp),d1
   10130:	|      move.l 8(sp),d0
   10134:	|      move.l 12(sp),-(sp)
   10138:	|      move.l a0,-(sp)
   1013a:	|      move.l d1,-(sp)
   1013c:	|      move.l d0,-(sp)
   1013e:	|      jsr 8226 <addPerson>
   10144:	|      lea 16(sp),sp
   10148:	|      tst.w d0
   1014a:	|  /-- beq.s 10150 <builtIn_addCharacter+0xfc>
   1014c:	|  |   moveq #2,d0
   1014e:	+--|-- bra.s 10152 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   10150:	|  \-> moveq #1,d0
}
   10152:	\----> lea 16(sp),sp
   10156:	       rts

00010158 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   10158:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1015a:	       movea.l 12(sp),a0
   1015e:	       move.l 24(a0),d0
   10162:	       move.l d0,-(sp)
   10164:	       pea 7 <_start+0x7>
   10168:	       move.l sp,d0
   1016a:	       addq.l #8,d0
   1016c:	       move.l d0,-(sp)
   1016e:	       jsr 1362e <getValueType>
   10174:	       lea 12(sp),sp
   10178:	       tst.w d0
   1017a:	   /-- bne.s 10180 <builtIn_hideCharacter+0x28>
   1017c:	   |   moveq #1,d0
   1017e:	/--|-- bra.s 101a0 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   10180:	|  \-> moveq #24,d0
   10182:	|      add.l 12(sp),d0
   10186:	|      move.l d0,-(sp)
   10188:	|      jsr 13fb2 <trimStack>
   1018e:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   10190:	|      move.l (sp),d0
   10192:	|      move.l d0,-(sp)
   10194:	|      clr.l -(sp)
   10196:	|      jsr abbe <setShown>
   1019c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1019e:	|      moveq #2,d0
}
   101a0:	\----> addq.l #4,sp
   101a2:	       rts

000101a4 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   101a4:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   101a6:	       movea.l 12(sp),a0
   101aa:	       move.l 24(a0),d0
   101ae:	       move.l d0,-(sp)
   101b0:	       pea 7 <_start+0x7>
   101b4:	       move.l sp,d0
   101b6:	       addq.l #8,d0
   101b8:	       move.l d0,-(sp)
   101ba:	       jsr 1362e <getValueType>
   101c0:	       lea 12(sp),sp
   101c4:	       tst.w d0
   101c6:	   /-- bne.s 101cc <builtIn_showCharacter+0x28>
   101c8:	   |   moveq #1,d0
   101ca:	/--|-- bra.s 101ee <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   101cc:	|  \-> moveq #24,d0
   101ce:	|      add.l 12(sp),d0
   101d2:	|      move.l d0,-(sp)
   101d4:	|      jsr 13fb2 <trimStack>
   101da:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   101dc:	|      move.l (sp),d0
   101de:	|      move.l d0,-(sp)
   101e0:	|      pea 1 <_start+0x1>
   101e4:	|      jsr abbe <setShown>
   101ea:	|      addq.l #8,sp
	return BR_CONTINUE;
   101ec:	|      moveq #2,d0
}
   101ee:	\----> addq.l #4,sp
   101f0:	       rts

000101f2 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   101f2:	jsr 510a <killSpeechTimers>
	killMostPeople ();
   101f8:	jsr 9a06 <killMostPeople>
	return BR_CONTINUE;
   101fe:	moveq #2,d0
}
   10200:	rts

00010202 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   10202:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10204:	       movea.l 16(sp),a0
   10208:	       move.l 24(a0),d0
   1020c:	       move.l d0,-(sp)
   1020e:	       pea 1 <_start+0x1>
   10212:	       move.l sp,d0
   10214:	       addq.l #8,d0
   10216:	       move.l d0,-(sp)
   10218:	       jsr 1362e <getValueType>
   1021e:	       lea 12(sp),sp
   10222:	       tst.w d0
   10224:	   /-- bne.s 1022a <builtIn_setCharacterDrawMode+0x28>
   10226:	   |   moveq #1,d0
   10228:	/--|-- bra.s 10284 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   1022a:	|  \-> moveq #24,d0
   1022c:	|      add.l 16(sp),d0
   10230:	|      move.l d0,-(sp)
   10232:	|      jsr 13fb2 <trimStack>
   10238:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1023a:	|      movea.l 16(sp),a0
   1023e:	|      move.l 24(a0),d0
   10242:	|      move.l d0,-(sp)
   10244:	|      pea 7 <_start+0x7>
   10248:	|      moveq #12,d0
   1024a:	|      add.l sp,d0
   1024c:	|      move.l d0,-(sp)
   1024e:	|      jsr 1362e <getValueType>
   10254:	|      lea 12(sp),sp
   10258:	|      tst.w d0
   1025a:	|  /-- bne.s 10260 <builtIn_setCharacterDrawMode+0x5e>
   1025c:	|  |   moveq #1,d0
   1025e:	+--|-- bra.s 10284 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10260:	|  \-> moveq #24,d0
   10262:	|      add.l 16(sp),d0
   10266:	|      move.l d0,-(sp)
   10268:	|      jsr 13fb2 <trimStack>
   1026e:	|      addq.l #4,sp
	setDrawMode (di, obj);
   10270:	|      move.l 4(sp),d1
   10274:	|      move.l (sp),d0
   10276:	|      move.l d1,-(sp)
   10278:	|      move.l d0,-(sp)
   1027a:	|      jsr a4fc <setDrawMode>
   10280:	|      addq.l #8,sp
	return BR_CONTINUE;
   10282:	|      moveq #2,d0
}
   10284:	\----> addq.l #8,sp
   10286:	       rts

00010288 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   10288:	pea 1809a <line.c.05397aaf+0x10e>
   1028e:	jsr 157fa <KPrintF>
   10294:	addq.l #4,sp
	return BR_CONTINUE;
   10296:	moveq #2,d0
}
   10298:	rts

0001029a <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1029a:	pea 180cd <line.c.05397aaf+0x141>
   102a0:	jsr 157fa <KPrintF>
   102a6:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   102a8:	moveq #2,d0
}
   102aa:	rts

000102ac <builtIn_setScale>:

builtIn(setScale)
{
   102ac:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   102ae:	       movea.l 16(sp),a0
   102b2:	       move.l 24(a0),d0
   102b6:	       move.l d0,-(sp)
   102b8:	       pea 1 <_start+0x1>
   102bc:	       move.l sp,d0
   102be:	       addq.l #8,d0
   102c0:	       move.l d0,-(sp)
   102c2:	       jsr 1362e <getValueType>
   102c8:	       lea 12(sp),sp
   102cc:	       tst.w d0
   102ce:	   /-- bne.s 102d4 <builtIn_setScale+0x28>
   102d0:	   |   moveq #1,d0
   102d2:	/--|-- bra.s 10336 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   102d4:	|  \-> moveq #24,d0
   102d6:	|      add.l 16(sp),d0
   102da:	|      move.l d0,-(sp)
   102dc:	|      jsr 13fb2 <trimStack>
   102e2:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   102e4:	|      movea.l 16(sp),a0
   102e8:	|      move.l 24(a0),d0
   102ec:	|      move.l d0,-(sp)
   102ee:	|      pea 1 <_start+0x1>
   102f2:	|      moveq #12,d0
   102f4:	|      add.l sp,d0
   102f6:	|      move.l d0,-(sp)
   102f8:	|      jsr 1362e <getValueType>
   102fe:	|      lea 12(sp),sp
   10302:	|      tst.w d0
   10304:	|  /-- bne.s 1030a <builtIn_setScale+0x5e>
   10306:	|  |   moveq #1,d0
   10308:	+--|-- bra.s 10336 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1030a:	|  \-> moveq #24,d0
   1030c:	|      add.l 16(sp),d0
   10310:	|      move.l d0,-(sp)
   10312:	|      jsr 13fb2 <trimStack>
   10318:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   1031a:	|      move.l (sp),d0
   1031c:	|      move.l d0,d0
   1031e:	|      movea.w d0,a1
   10320:	|      move.l 4(sp),d0
   10324:	|      move.l d0,d0
   10326:	|      movea.w d0,a0
   10328:	|      move.l a1,-(sp)
   1032a:	|      move.l a0,-(sp)
   1032c:	|      jsr ab96 <setScale>
   10332:	|      addq.l #8,sp
	return BR_CONTINUE;
   10334:	|      moveq #2,d0
}
   10336:	\----> addq.l #8,sp
   10338:	       rts

0001033a <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   1033a:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1033c:	       movea.l 12(sp),a0
   10340:	       move.l 24(a0),d0
   10344:	       move.l d0,-(sp)
   10346:	       pea 7 <_start+0x7>
   1034a:	       move.l sp,d0
   1034c:	       addq.l #8,d0
   1034e:	       move.l d0,-(sp)
   10350:	       jsr 1362e <getValueType>
   10356:	       lea 12(sp),sp
   1035a:	       tst.w d0
   1035c:	   /-- bne.s 10362 <builtIn_stopCharacter+0x28>
   1035e:	   |   moveq #1,d0
   10360:	/--|-- bra.s 1039a <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   10362:	|  \-> moveq #24,d0
   10364:	|      add.l 12(sp),d0
   10368:	|      move.l d0,-(sp)
   1036a:	|      jsr 13fb2 <trimStack>
   10370:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   10372:	|      move.l (sp),d0
   10374:	|      move.l d0,-(sp)
   10376:	|      jsr acca <stopPerson>
   1037c:	|      addq.l #4,sp
   1037e:	|      movea.w d0,a0
   10380:	|      moveq #28,d0
   10382:	|      add.l 12(sp),d0
   10386:	|      move.l a0,-(sp)
   10388:	|      pea 1 <_start+0x1>
   1038c:	|      move.l d0,-(sp)
   1038e:	|      jsr 13f20 <setVariable>
   10394:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10398:	|      moveq #2,d0
}
   1039a:	\----> addq.l #4,sp
   1039c:	       rts

0001039e <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   1039e:	pea 18107 <line.c.05397aaf+0x17b>
   103a4:	jsr 157fa <KPrintF>
   103aa:	addq.l #4,sp
	return BR_CONTINUE;
   103ac:	moveq #2,d0
}
   103ae:	rts

000103b0 <builtIn_animate>:

builtIn(animate)
{
   103b0:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   103b2:	       movea.l 16(sp),a0
   103b6:	       move.l 24(a0),d0
   103ba:	       move.l d0,-(sp)
   103bc:	       jsr 13b06 <getAnimationFromVar>
   103c2:	       addq.l #4,sp
   103c4:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   103c8:	   /-- bne.s 103ce <builtIn_animate+0x1e>
   103ca:	   |   moveq #1,d0
   103cc:	/--|-- bra.s 1044c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   103ce:	|  \-> moveq #24,d0
   103d0:	|      add.l 16(sp),d0
   103d4:	|      move.l d0,-(sp)
   103d6:	|      jsr 13fb2 <trimStack>
   103dc:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   103de:	|      movea.l 16(sp),a0
   103e2:	|      move.l 24(a0),d0
   103e6:	|      move.l d0,-(sp)
   103e8:	|      pea 7 <_start+0x7>
   103ec:	|      move.l sp,d0
   103ee:	|      addq.l #8,d0
   103f0:	|      move.l d0,-(sp)
   103f2:	|      jsr 1362e <getValueType>
   103f8:	|      lea 12(sp),sp
   103fc:	|      tst.w d0
   103fe:	|  /-- bne.s 10404 <builtIn_animate+0x54>
   10400:	|  |   moveq #1,d0
   10402:	+--|-- bra.s 1044c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   10404:	|  \-> moveq #24,d0
   10406:	|      add.l 16(sp),d0
   1040a:	|      move.l d0,-(sp)
   1040c:	|      jsr 13fb2 <trimStack>
   10412:	|      addq.l #4,sp
	animatePerson (obj, pp);
   10414:	|      move.l (sp),d0
   10416:	|      move.l 4(sp),-(sp)
   1041a:	|      move.l d0,-(sp)
   1041c:	|      jsr 849a <animatePerson>
   10422:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   10424:	|      move.l 4(sp),-(sp)
   10428:	|      jsr ad1e <timeForAnim>
   1042e:	|      addq.l #4,sp
   10430:	|      move.l d0,d1
   10432:	|      moveq #28,d0
   10434:	|      add.l 16(sp),d0
   10438:	|      move.l d1,-(sp)
   1043a:	|      pea 1 <_start+0x1>
   1043e:	|      move.l d0,-(sp)
   10440:	|      jsr 13f20 <setVariable>
   10446:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1044a:	|      moveq #2,d0
}
   1044c:	\----> addq.l #8,sp
   1044e:	       rts

00010450 <builtIn_setCostume>:

builtIn(setCostume)
{
   10450:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   10452:	       movea.l 16(sp),a0
   10456:	       move.l 24(a0),d0
   1045a:	       move.l d0,-(sp)
   1045c:	       jsr 132da <getCostumeFromVar>
   10462:	       addq.l #4,sp
   10464:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   10468:	   /-- bne.s 1046e <builtIn_setCostume+0x1e>
   1046a:	   |   moveq #1,d0
   1046c:	/--|-- bra.s 104c6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1046e:	|  \-> moveq #24,d0
   10470:	|      add.l 16(sp),d0
   10474:	|      move.l d0,-(sp)
   10476:	|      jsr 13fb2 <trimStack>
   1047c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1047e:	|      movea.l 16(sp),a0
   10482:	|      move.l 24(a0),d0
   10486:	|      move.l d0,-(sp)
   10488:	|      pea 7 <_start+0x7>
   1048c:	|      move.l sp,d0
   1048e:	|      addq.l #8,d0
   10490:	|      move.l d0,-(sp)
   10492:	|      jsr 1362e <getValueType>
   10498:	|      lea 12(sp),sp
   1049c:	|      tst.w d0
   1049e:	|  /-- bne.s 104a4 <builtIn_setCostume+0x54>
   104a0:	|  |   moveq #1,d0
   104a2:	+--|-- bra.s 104c6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   104a4:	|  \-> moveq #24,d0
   104a6:	|      add.l 16(sp),d0
   104aa:	|      move.l d0,-(sp)
   104ac:	|      jsr 13fb2 <trimStack>
   104b2:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   104b4:	|      move.l (sp),d0
   104b6:	|      move.l 4(sp),-(sp)
   104ba:	|      move.l d0,-(sp)
   104bc:	|      jsr 84e4 <animatePersonUsingPersona>
   104c2:	|      addq.l #8,sp
	return BR_CONTINUE;
   104c4:	|      moveq #2,d0
}
   104c6:	\----> addq.l #8,sp
   104c8:	       rts

000104ca <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   104ca:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104cc:	       movea.l 16(sp),a0
   104d0:	       move.l 24(a0),d0
   104d4:	       move.l d0,-(sp)
   104d6:	       pea 1 <_start+0x1>
   104da:	       move.l sp,d0
   104dc:	       addq.l #8,d0
   104de:	       move.l d0,-(sp)
   104e0:	       jsr 1362e <getValueType>
   104e6:	       lea 12(sp),sp
   104ea:	       tst.w d0
   104ec:	   /-- bne.s 104f2 <builtIn_floatCharacter+0x28>
   104ee:	   |   moveq #1,d0
   104f0:	/--|-- bra.s 10566 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   104f2:	|  \-> moveq #24,d0
   104f4:	|      add.l 16(sp),d0
   104f8:	|      move.l d0,-(sp)
   104fa:	|      jsr 13fb2 <trimStack>
   10500:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10502:	|      movea.l 16(sp),a0
   10506:	|      move.l 24(a0),d0
   1050a:	|      move.l d0,-(sp)
   1050c:	|      pea 7 <_start+0x7>
   10510:	|      moveq #12,d0
   10512:	|      add.l sp,d0
   10514:	|      move.l d0,-(sp)
   10516:	|      jsr 1362e <getValueType>
   1051c:	|      lea 12(sp),sp
   10520:	|      tst.w d0
   10522:	|  /-- bne.s 10528 <builtIn_floatCharacter+0x5e>
   10524:	|  |   moveq #1,d0
   10526:	+--|-- bra.s 10566 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   10528:	|  \-> moveq #24,d0
   1052a:	|      add.l 16(sp),d0
   1052e:	|      move.l d0,-(sp)
   10530:	|      jsr 13fb2 <trimStack>
   10536:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   10538:	|      move.l 4(sp),d1
   1053c:	|      move.l (sp),d0
   1053e:	|      move.l d1,-(sp)
   10540:	|      move.l d0,-(sp)
   10542:	|      jsr 95c8 <floatCharacter>
   10548:	|      addq.l #8,sp
   1054a:	|      movea.w d0,a0
   1054c:	|      moveq #28,d0
   1054e:	|      add.l 16(sp),d0
   10552:	|      move.l a0,-(sp)
   10554:	|      pea 1 <_start+0x1>
   10558:	|      move.l d0,-(sp)
   1055a:	|      jsr 13f20 <setVariable>
   10560:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10564:	|      moveq #2,d0
}
   10566:	\----> addq.l #8,sp
   10568:	       rts

0001056a <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   1056a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1056c:	       movea.l 16(sp),a0
   10570:	       move.l 24(a0),d0
   10574:	       move.l d0,-(sp)
   10576:	       pea 1 <_start+0x1>
   1057a:	       move.l sp,d0
   1057c:	       addq.l #8,d0
   1057e:	       move.l d0,-(sp)
   10580:	       jsr 1362e <getValueType>
   10586:	       lea 12(sp),sp
   1058a:	       tst.w d0
   1058c:	   /-- bne.s 10592 <builtIn_setCharacterWalkSpeed+0x28>
   1058e:	   |   moveq #1,d0
   10590:	/--|-- bra.s 10606 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   10592:	|  \-> moveq #24,d0
   10594:	|      add.l 16(sp),d0
   10598:	|      move.l d0,-(sp)
   1059a:	|      jsr 13fb2 <trimStack>
   105a0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   105a2:	|      movea.l 16(sp),a0
   105a6:	|      move.l 24(a0),d0
   105aa:	|      move.l d0,-(sp)
   105ac:	|      pea 7 <_start+0x7>
   105b0:	|      moveq #12,d0
   105b2:	|      add.l sp,d0
   105b4:	|      move.l d0,-(sp)
   105b6:	|      jsr 1362e <getValueType>
   105bc:	|      lea 12(sp),sp
   105c0:	|      tst.w d0
   105c2:	|  /-- bne.s 105c8 <builtIn_setCharacterWalkSpeed+0x5e>
   105c4:	|  |   moveq #1,d0
   105c6:	+--|-- bra.s 10606 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   105c8:	|  \-> moveq #24,d0
   105ca:	|      add.l 16(sp),d0
   105ce:	|      move.l d0,-(sp)
   105d0:	|      jsr 13fb2 <trimStack>
   105d6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   105d8:	|      move.l 4(sp),d1
   105dc:	|      move.l (sp),d0
   105de:	|      move.l d1,-(sp)
   105e0:	|      move.l d0,-(sp)
   105e2:	|      jsr ab32 <setCharacterWalkSpeed>
   105e8:	|      addq.l #8,sp
   105ea:	|      movea.w d0,a0
   105ec:	|      moveq #28,d0
   105ee:	|      add.l 16(sp),d0
   105f2:	|      move.l a0,-(sp)
   105f4:	|      pea 1 <_start+0x1>
   105f8:	|      move.l d0,-(sp)
   105fa:	|      jsr 13f20 <setVariable>
   10600:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10604:	|      moveq #2,d0
}
   10606:	\----> addq.l #8,sp
   10608:	       rts

0001060a <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   1060a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1060c:	       movea.l 16(sp),a0
   10610:	       move.l 24(a0),d0
   10614:	       move.l d0,-(sp)
   10616:	       pea 1 <_start+0x1>
   1061a:	       move.l sp,d0
   1061c:	       addq.l #8,d0
   1061e:	       move.l d0,-(sp)
   10620:	       jsr 1362e <getValueType>
   10626:	       lea 12(sp),sp
   1062a:	       tst.w d0
   1062c:	   /-- bne.s 10632 <builtIn_turnCharacter+0x28>
   1062e:	   |   moveq #1,d0
   10630:	/--|-- bra.s 106a6 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   10632:	|  \-> moveq #24,d0
   10634:	|      add.l 16(sp),d0
   10638:	|      move.l d0,-(sp)
   1063a:	|      jsr 13fb2 <trimStack>
   10640:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10642:	|      movea.l 16(sp),a0
   10646:	|      move.l 24(a0),d0
   1064a:	|      move.l d0,-(sp)
   1064c:	|      pea 7 <_start+0x7>
   10650:	|      moveq #12,d0
   10652:	|      add.l sp,d0
   10654:	|      move.l d0,-(sp)
   10656:	|      jsr 1362e <getValueType>
   1065c:	|      lea 12(sp),sp
   10660:	|      tst.w d0
   10662:	|  /-- bne.s 10668 <builtIn_turnCharacter+0x5e>
   10664:	|  |   moveq #1,d0
   10666:	+--|-- bra.s 106a6 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   10668:	|  \-> moveq #24,d0
   1066a:	|      add.l 16(sp),d0
   1066e:	|      move.l d0,-(sp)
   10670:	|      jsr 13fb2 <trimStack>
   10676:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   10678:	|      move.l (sp),d1
   1067a:	|      move.l 4(sp),d0
   1067e:	|      move.l d1,-(sp)
   10680:	|      move.l d0,-(sp)
   10682:	|      jsr add6 <turnPersonToFace>
   10688:	|      addq.l #8,sp
   1068a:	|      movea.w d0,a0
   1068c:	|      moveq #28,d0
   1068e:	|      add.l 16(sp),d0
   10692:	|      move.l a0,-(sp)
   10694:	|      pea 1 <_start+0x1>
   10698:	|      move.l d0,-(sp)
   1069a:	|      jsr 13f20 <setVariable>
   106a0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   106a4:	|      moveq #2,d0
}
   106a6:	\----> addq.l #8,sp
   106a8:	       rts

000106aa <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   106aa:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106ac:	       movea.l 16(sp),a0
   106b0:	       move.l 24(a0),d0
   106b4:	       move.l d0,-(sp)
   106b6:	       pea 1 <_start+0x1>
   106ba:	       move.l sp,d0
   106bc:	       addq.l #8,d0
   106be:	       move.l d0,-(sp)
   106c0:	       jsr 1362e <getValueType>
   106c6:	       lea 12(sp),sp
   106ca:	       tst.w d0
   106cc:	   /-- bne.s 106d2 <builtIn_setCharacterExtra+0x28>
   106ce:	   |   moveq #1,d0
   106d0:	/--|-- bra.s 10746 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   106d2:	|  \-> moveq #24,d0
   106d4:	|      add.l 16(sp),d0
   106d8:	|      move.l d0,-(sp)
   106da:	|      jsr 13fb2 <trimStack>
   106e0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   106e2:	|      movea.l 16(sp),a0
   106e6:	|      move.l 24(a0),d0
   106ea:	|      move.l d0,-(sp)
   106ec:	|      pea 7 <_start+0x7>
   106f0:	|      moveq #12,d0
   106f2:	|      add.l sp,d0
   106f4:	|      move.l d0,-(sp)
   106f6:	|      jsr 1362e <getValueType>
   106fc:	|      lea 12(sp),sp
   10700:	|      tst.w d0
   10702:	|  /-- bne.s 10708 <builtIn_setCharacterExtra+0x5e>
   10704:	|  |   moveq #1,d0
   10706:	+--|-- bra.s 10746 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   10708:	|  \-> moveq #24,d0
   1070a:	|      add.l 16(sp),d0
   1070e:	|      move.l d0,-(sp)
   10710:	|      jsr 13fb2 <trimStack>
   10716:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   10718:	|      move.l (sp),d1
   1071a:	|      move.l 4(sp),d0
   1071e:	|      move.l d1,-(sp)
   10720:	|      move.l d0,-(sp)
   10722:	|      jsr ab60 <setPersonExtra>
   10728:	|      addq.l #8,sp
   1072a:	|      movea.w d0,a0
   1072c:	|      moveq #28,d0
   1072e:	|      add.l 16(sp),d0
   10732:	|      move.l a0,-(sp)
   10734:	|      pea 1 <_start+0x1>
   10738:	|      move.l d0,-(sp)
   1073a:	|      jsr 13f20 <setVariable>
   10740:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10744:	|      moveq #2,d0
}
   10746:	\----> addq.l #8,sp
   10748:	       rts

0001074a <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   1074a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1074c:	       movea.l 12(sp),a0
   10750:	       move.l 24(a0),d0
   10754:	       move.l d0,-(sp)
   10756:	       pea 7 <_start+0x7>
   1075a:	       move.l sp,d0
   1075c:	       addq.l #8,d0
   1075e:	       move.l d0,-(sp)
   10760:	       jsr 1362e <getValueType>
   10766:	       lea 12(sp),sp
   1076a:	       tst.w d0
   1076c:	   /-- bne.s 10772 <builtIn_removeCharacter+0x28>
   1076e:	   |   moveq #1,d0
   10770:	/--|-- bra.s 10790 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   10772:	|  \-> moveq #24,d0
   10774:	|      add.l 12(sp),d0
   10778:	|      move.l d0,-(sp)
   1077a:	|      jsr 13fb2 <trimStack>
   10780:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   10782:	|      move.l (sp),d0
   10784:	|      move.l d0,-(sp)
   10786:	|      jsr 9d60 <removeOneCharacter>
   1078c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1078e:	|      moveq #2,d0
}
   10790:	\----> addq.l #4,sp
   10792:	       rts

00010794 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   10794:	                lea -28(sp),sp
   10798:	                move.l d2,-(sp)
   1079a:	                move.l 44(sp),d1
   1079e:	                move.l 48(sp),d0
   107a2:	                move.w d1,d1
   107a4:	                move.w d1,6(sp)
   107a8:	                move.w d0,d0
   107aa:	                move.w d0,4(sp)
	switch (numParams) {
   107ae:	                moveq #2,d0
   107b0:	                cmp.l 36(sp),d0
   107b4:	      /-------- beq.w 108f6 <moveChr+0x162>
   107b8:	      |         moveq #3,d0
   107ba:	      |         cmp.l 36(sp),d0
   107be:	/-----|-------- bne.w 10a2a <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107c2:	|     |         movea.l 40(sp),a0
   107c6:	|     |         move.l 24(a0),d0
   107ca:	|     |         move.l d0,-(sp)
   107cc:	|     |         pea 1 <_start+0x1>
   107d0:	|     |         lea 20(sp),a0
   107d4:	|     |         move.l a0,-(sp)
   107d6:	|     |         jsr 1362e <getValueType>
   107dc:	|     |         lea 12(sp),sp
   107e0:	|     |         tst.w d0
   107e2:	|     |     /-- bne.s 107ea <moveChr+0x56>
   107e4:	|     |     |   moveq #1,d0
   107e6:	|  /--|-----|-- bra.w 10a3a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   107ea:	|  |  |     \-> moveq #24,d0
   107ec:	|  |  |         add.l 40(sp),d0
   107f0:	|  |  |         move.l d0,-(sp)
   107f2:	|  |  |         jsr 13fb2 <trimStack>
   107f8:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107fa:	|  |  |         movea.l 40(sp),a0
   107fe:	|  |  |         move.l 24(a0),d0
   10802:	|  |  |         move.l d0,-(sp)
   10804:	|  |  |         pea 1 <_start+0x1>
   10808:	|  |  |         lea 24(sp),a0
   1080c:	|  |  |         move.l a0,-(sp)
   1080e:	|  |  |         jsr 1362e <getValueType>
   10814:	|  |  |         lea 12(sp),sp
   10818:	|  |  |         tst.w d0
   1081a:	|  |  |     /-- bne.s 10822 <moveChr+0x8e>
   1081c:	|  |  |     |   moveq #1,d0
   1081e:	|  +--|-----|-- bra.w 10a3a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10822:	|  |  |     \-> moveq #24,d0
   10824:	|  |  |         add.l 40(sp),d0
   10828:	|  |  |         move.l d0,-(sp)
   1082a:	|  |  |         jsr 13fb2 <trimStack>
   10830:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10832:	|  |  |         movea.l 40(sp),a0
   10836:	|  |  |         move.l 24(a0),d0
   1083a:	|  |  |         move.l d0,-(sp)
   1083c:	|  |  |         pea 7 <_start+0x7>
   10840:	|  |  |         lea 16(sp),a0
   10844:	|  |  |         move.l a0,-(sp)
   10846:	|  |  |         jsr 1362e <getValueType>
   1084c:	|  |  |         lea 12(sp),sp
   10850:	|  |  |         tst.w d0
   10852:	|  |  |     /-- bne.s 1085a <moveChr+0xc6>
   10854:	|  |  |     |   moveq #1,d0
   10856:	|  +--|-----|-- bra.w 10a3a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1085a:	|  |  |     \-> moveq #24,d0
   1085c:	|  |  |         add.l 40(sp),d0
   10860:	|  |  |         move.l d0,-(sp)
   10862:	|  |  |         jsr 13fb2 <trimStack>
   10868:	|  |  |         addq.l #4,sp

			if (force) {
   1086a:	|  |  |         tst.w 6(sp)
   1086e:	|  |  |     /-- beq.s 1089e <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   10870:	|  |  |     |   movea.l 8(sp),a0
   10874:	|  |  |     |   move.l 12(sp),d1
   10878:	|  |  |     |   move.l 16(sp),d0
   1087c:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb9219>
   10880:	|  |  |     |   move.l 44(sp),-(sp)
   10884:	|  |  |     |   move.l a0,-(sp)
   10886:	|  |  |     |   move.l d1,-(sp)
   10888:	|  |  |     |   move.l d0,-(sp)
   1088a:	|  |  |     |   jsr 95ec <forceWalkingPerson>
   10890:	|  |  |     |   lea 20(sp),sp
   10894:	|  |  |     |   tst.w d0
   10896:	|  |  |  /--|-- beq.s 108f0 <moveChr+0x15c>
   10898:	|  |  |  |  |   moveq #3,d0
   1089a:	|  +--|--|--|-- bra.w 10a3a <moveChr+0x2a6>
			} else if (immediate) {
   1089e:	|  |  |  |  \-> tst.w 4(sp)
   108a2:	|  |  |  |  /-- beq.s 108c2 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   108a4:	|  |  |  |  |   movea.l 8(sp),a0
   108a8:	|  |  |  |  |   move.l 12(sp),d1
   108ac:	|  |  |  |  |   move.l 16(sp),d0
   108b0:	|  |  |  |  |   move.l a0,-(sp)
   108b2:	|  |  |  |  |   move.l d1,-(sp)
   108b4:	|  |  |  |  |   move.l d0,-(sp)
   108b6:	|  |  |  |  |   jsr 98f4 <jumpPerson>
   108bc:	|  |  |  |  |   lea 12(sp),sp
   108c0:	|  |  |  +--|-- bra.s 108f0 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   108c2:	|  |  |  |  \-> movea.l 8(sp),a0
   108c6:	|  |  |  |      move.l 12(sp),d1
   108ca:	|  |  |  |      move.l 16(sp),d0
   108ce:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb9219>
   108d2:	|  |  |  |      move.l 44(sp),-(sp)
   108d6:	|  |  |  |      move.l a0,-(sp)
   108d8:	|  |  |  |      move.l d1,-(sp)
   108da:	|  |  |  |      move.l d0,-(sp)
   108dc:	|  |  |  |      jsr 9ac4 <makeWalkingPerson>
   108e2:	|  |  |  |      lea 20(sp),sp
   108e6:	|  |  |  |      tst.w d0
   108e8:	|  |  |  +----- beq.s 108f0 <moveChr+0x15c>
   108ea:	|  |  |  |      moveq #3,d0
   108ec:	|  +--|--|----- bra.w 10a3a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   108f0:	|  |  |  \----> moveq #2,d0
   108f2:	|  +--|-------- bra.w 10a3a <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   108f6:	|  |  \-------> movea.l 40(sp),a0
   108fa:	|  |            move.l 24(a0),d0
   108fe:	|  |            move.l d0,-(sp)
   10900:	|  |            pea 7 <_start+0x7>
   10904:	|  |            moveq #32,d0
   10906:	|  |            add.l sp,d0
   10908:	|  |            move.l d0,-(sp)
   1090a:	|  |            jsr 1362e <getValueType>
   10910:	|  |            lea 12(sp),sp
   10914:	|  |            tst.w d0
   10916:	|  |        /-- bne.s 1091e <moveChr+0x18a>
   10918:	|  |        |   moveq #1,d0
   1091a:	|  +--------|-- bra.w 10a3a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1091e:	|  |        \-> moveq #24,d0
   10920:	|  |            add.l 40(sp),d0
   10924:	|  |            move.l d0,-(sp)
   10926:	|  |            jsr 13fb2 <trimStack>
   1092c:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1092e:	|  |            movea.l 40(sp),a0
   10932:	|  |            move.l 24(a0),d0
   10936:	|  |            move.l d0,-(sp)
   10938:	|  |            pea 7 <_start+0x7>
   1093c:	|  |            lea 28(sp),a0
   10940:	|  |            move.l a0,-(sp)
   10942:	|  |            jsr 1362e <getValueType>
   10948:	|  |            lea 12(sp),sp
   1094c:	|  |            tst.w d0
   1094e:	|  |        /-- bne.s 10956 <moveChr+0x1c2>
   10950:	|  |        |   moveq #1,d0
   10952:	|  +--------|-- bra.w 10a3a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10956:	|  |        \-> moveq #24,d0
   10958:	|  |            add.l 40(sp),d0
   1095c:	|  |            move.l d0,-(sp)
   1095e:	|  |            jsr 13fb2 <trimStack>
   10964:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   10966:	|  |            move.l 24(sp),d0
   1096a:	|  |            move.l d0,-(sp)
   1096c:	|  |            jsr 1417e <getRegionForObject>
   10972:	|  |            addq.l #4,sp
   10974:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   10978:	|  |        /-- bne.s 10980 <moveChr+0x1ec>
   1097a:	|  |        |   moveq #2,d0
   1097c:	|  +--------|-- bra.w 10a3a <moveChr+0x2a6>

			if (force)
   10980:	|  |        \-> tst.w 6(sp)
   10984:	|  |        /-- beq.s 109c0 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   10986:	|  |        |   movea.l 28(sp),a0
   1098a:	|  |        |   move.l 24(a0),d2
   1098e:	|  |        |   movea.l 20(sp),a1
   10992:	|  |        |   movea.l 28(sp),a0
   10996:	|  |        |   move.l 20(a0),d1
   1099a:	|  |        |   movea.l 28(sp),a0
   1099e:	|  |        |   move.l 16(a0),d0
   109a2:	|  |        |   move.l d2,-(sp)
   109a4:	|  |        |   move.l 44(sp),-(sp)
   109a8:	|  |        |   move.l a1,-(sp)
   109aa:	|  |        |   move.l d1,-(sp)
   109ac:	|  |        |   move.l d0,-(sp)
   109ae:	|  |        |   jsr 95ec <forceWalkingPerson>
   109b4:	|  |        |   lea 20(sp),sp
   109b8:	|  |        |   tst.w d0
   109ba:	|  |     /--|-- beq.s 10a26 <moveChr+0x292>
   109bc:	|  |     |  |   moveq #3,d0
   109be:	|  +-----|--|-- bra.s 10a3a <moveChr+0x2a6>
			}
			else if (immediate)
   109c0:	|  |     |  \-> tst.w 4(sp)
   109c4:	|  |     |  /-- beq.s 109ec <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   109c6:	|  |     |  |   movea.l 20(sp),a1
   109ca:	|  |     |  |   movea.l 28(sp),a0
   109ce:	|  |     |  |   move.l 20(a0),d1
   109d2:	|  |     |  |   movea.l 28(sp),a0
   109d6:	|  |     |  |   move.l 16(a0),d0
   109da:	|  |     |  |   move.l a1,-(sp)
   109dc:	|  |     |  |   move.l d1,-(sp)
   109de:	|  |     |  |   move.l d0,-(sp)
   109e0:	|  |     |  |   jsr 98f4 <jumpPerson>
   109e6:	|  |     |  |   lea 12(sp),sp
   109ea:	|  |     +--|-- bra.s 10a26 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   109ec:	|  |     |  \-> movea.l 28(sp),a0
   109f0:	|  |     |      move.l 24(a0),d2
   109f4:	|  |     |      movea.l 20(sp),a1
   109f8:	|  |     |      movea.l 28(sp),a0
   109fc:	|  |     |      move.l 20(a0),d1
   10a00:	|  |     |      movea.l 28(sp),a0
   10a04:	|  |     |      move.l 16(a0),d0
   10a08:	|  |     |      move.l d2,-(sp)
   10a0a:	|  |     |      move.l 44(sp),-(sp)
   10a0e:	|  |     |      move.l a1,-(sp)
   10a10:	|  |     |      move.l d1,-(sp)
   10a12:	|  |     |      move.l d0,-(sp)
   10a14:	|  |     |      jsr 9ac4 <makeWalkingPerson>
   10a1a:	|  |     |      lea 20(sp),sp
   10a1e:	|  |     |      tst.w d0
   10a20:	|  |     +----- beq.s 10a26 <moveChr+0x292>
   10a22:	|  |     |      moveq #3,d0
   10a24:	|  +-----|----- bra.s 10a3a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   10a26:	|  |     \----> moveq #2,d0
   10a28:	|  +----------- bra.s 10a3a <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   10a2a:	\--|----------> pea 18125 <line.c.05397aaf+0x199>
   10a30:	   |            jsr 157fa <KPrintF>
   10a36:	   |            addq.l #4,sp
			return BR_ERROR;
   10a38:	   |            moveq #1,d0
	}
}
   10a3a:	   \----------> move.l (sp)+,d2
   10a3c:	                lea 28(sp),sp
   10a40:	                rts

00010a42 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   10a42:	clr.l -(sp)
   10a44:	clr.l -(sp)
   10a46:	move.l 16(sp),-(sp)
   10a4a:	move.l 16(sp),-(sp)
   10a4e:	jsr 10794 <moveChr>
   10a54:	lea 16(sp),sp
}
   10a58:	rts

00010a5a <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   10a5a:	clr.l -(sp)
   10a5c:	pea 1 <_start+0x1>
   10a60:	move.l 16(sp),-(sp)
   10a64:	move.l 16(sp),-(sp)
   10a68:	jsr 10794 <moveChr>
   10a6e:	lea 16(sp),sp
}
   10a72:	rts

00010a74 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   10a74:	pea 1 <_start+0x1>
   10a78:	clr.l -(sp)
   10a7a:	move.l 16(sp),-(sp)
   10a7e:	move.l 16(sp),-(sp)
   10a82:	jsr 10794 <moveChr>
   10a88:	lea 16(sp),sp
}
   10a8c:	rts

00010a8e <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   10a8e:	jsr 67c4 <clearStatusBar>
	return BR_CONTINUE;
   10a94:	moveq #2,d0
}
   10a96:	rts

00010a98 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   10a98:	jsr 686c <killLastStatus>
	return BR_CONTINUE;
   10a9e:	moveq #2,d0
}
   10aa0:	rts

00010aa2 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   10aa2:	jsr 675a <addStatusBar>
	return BR_CONTINUE;
   10aa8:	moveq #2,d0
}
   10aaa:	rts

00010aac <builtIn_statusText>:

builtIn(statusText)
{
   10aac:	       subq.l #8,sp
   10aae:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10ab0:	       movea.l 20(sp),a0
   10ab4:	       move.l 24(a0),d0
   10ab8:	       move.l d0,-(sp)
   10aba:	       jsr 13c04 <getTextFromAnyVar>
   10ac0:	       addq.l #4,sp
   10ac2:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   10ac6:	   /-- bne.s 10acc <builtIn_statusText+0x20>
   10ac8:	   |   moveq #1,d0
   10aca:	/--|-- bra.s 10b00 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   10acc:	|  \-> moveq #24,d0
   10ace:	|      add.l 20(sp),d0
   10ad2:	|      move.l d0,-(sp)
   10ad4:	|      jsr 13fb2 <trimStack>
   10ada:	|      addq.l #4,sp
	setStatusBar(newText);
   10adc:	|      move.l 8(sp),-(sp)
   10ae0:	|      jsr 6aec <setStatusBar>
   10ae6:	|      addq.l #4,sp
	FreeVec(newText);
   10ae8:	|      move.l 8(sp),4(sp)
   10aee:	|      move.l 1af02 <SysBase>,d0
   10af4:	|      movea.l d0,a6
   10af6:	|      movea.l 4(sp),a1
   10afa:	|      jsr -690(a6)
	return BR_CONTINUE;
   10afe:	|      moveq #2,d0
}
   10b00:	\----> movea.l (sp)+,a6
   10b02:	       addq.l #8,sp
   10b04:	       rts

00010b06 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   10b06:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b08:	       movea.l 12(sp),a0
   10b0c:	       move.l 24(a0),d0
   10b10:	       move.l d0,-(sp)
   10b12:	       pea 1 <_start+0x1>
   10b16:	       move.l sp,d0
   10b18:	       addq.l #8,d0
   10b1a:	       move.l d0,-(sp)
   10b1c:	       jsr 1362e <getValueType>
   10b22:	       lea 12(sp),sp
   10b26:	       tst.w d0
   10b28:	   /-- bne.s 10b2e <builtIn_lightStatus+0x28>
   10b2a:	   |   moveq #1,d0
   10b2c:	/--|-- bra.s 10b4c <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   10b2e:	|  \-> moveq #24,d0
   10b30:	|      add.l 12(sp),d0
   10b34:	|      move.l d0,-(sp)
   10b36:	|      jsr 13fb2 <trimStack>
   10b3c:	|      addq.l #4,sp
	setLitStatus (val);
   10b3e:	|      move.l (sp),d0
   10b40:	|      move.l d0,-(sp)
   10b42:	|      jsr 6adc <setLitStatus>
   10b48:	|      addq.l #4,sp
	return BR_CONTINUE;
   10b4a:	|      moveq #2,d0
}
   10b4c:	\----> addq.l #4,sp
   10b4e:	       rts

00010b50 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   10b50:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b52:	       movea.l 16(sp),a0
   10b56:	       move.l 24(a0),d0
   10b5a:	       move.l d0,-(sp)
   10b5c:	       pea 1 <_start+0x1>
   10b60:	       move.l sp,d0
   10b62:	       addq.l #8,d0
   10b64:	       move.l d0,-(sp)
   10b66:	       jsr 1362e <getValueType>
   10b6c:	       lea 12(sp),sp
   10b70:	       tst.w d0
   10b72:	   /-- bne.s 10b78 <builtIn_positionStatus+0x28>
   10b74:	   |   moveq #1,d0
   10b76:	/--|-- bra.s 10bd2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10b78:	|  \-> moveq #24,d0
   10b7a:	|      add.l 16(sp),d0
   10b7e:	|      move.l d0,-(sp)
   10b80:	|      jsr 13fb2 <trimStack>
   10b86:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b88:	|      movea.l 16(sp),a0
   10b8c:	|      move.l 24(a0),d0
   10b90:	|      move.l d0,-(sp)
   10b92:	|      pea 1 <_start+0x1>
   10b96:	|      moveq #12,d0
   10b98:	|      add.l sp,d0
   10b9a:	|      move.l d0,-(sp)
   10b9c:	|      jsr 1362e <getValueType>
   10ba2:	|      lea 12(sp),sp
   10ba6:	|      tst.w d0
   10ba8:	|  /-- bne.s 10bae <builtIn_positionStatus+0x5e>
   10baa:	|  |   moveq #1,d0
   10bac:	+--|-- bra.s 10bd2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10bae:	|  \-> moveq #24,d0
   10bb0:	|      add.l 16(sp),d0
   10bb4:	|      move.l d0,-(sp)
   10bb6:	|      jsr 13fb2 <trimStack>
   10bbc:	|      addq.l #4,sp
	positionStatus (x, y);
   10bbe:	|      move.l (sp),d1
   10bc0:	|      move.l 4(sp),d0
   10bc4:	|      move.l d1,-(sp)
   10bc6:	|      move.l d0,-(sp)
   10bc8:	|      jsr 68ce <positionStatus>
   10bce:	|      addq.l #8,sp
	return BR_CONTINUE;
   10bd0:	|      moveq #2,d0
}
   10bd2:	\----> addq.l #8,sp
   10bd4:	       rts

00010bd6 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   10bd6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bd8:	       movea.l 12(sp),a0
   10bdc:	       move.l 24(a0),d0
   10be0:	       move.l d0,-(sp)
   10be2:	       pea 1 <_start+0x1>
   10be6:	       move.l sp,d0
   10be8:	       addq.l #8,d0
   10bea:	       move.l d0,-(sp)
   10bec:	       jsr 1362e <getValueType>
   10bf2:	       lea 12(sp),sp
   10bf6:	       tst.w d0
   10bf8:	   /-- bne.s 10bfe <builtIn_alignStatus+0x28>
   10bfa:	   |   moveq #1,d0
   10bfc:	/--|-- bra.s 10c1e <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   10bfe:	|  \-> moveq #24,d0
   10c00:	|      add.l 12(sp),d0
   10c04:	|      move.l d0,-(sp)
   10c06:	|      jsr 13fb2 <trimStack>
   10c0c:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   10c0e:	|      move.l (sp),d0
   10c10:	|      movea.l 1a886 <nowStatus>,a0
   10c16:	|      move.l d0,d0
   10c18:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   10c1c:	|      moveq #2,d0
}
   10c1e:	\----> addq.l #4,sp
   10c20:	       rts

00010c22 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   10c22:	             tst.l 4(sp)
   10c26:	      /----- beq.s 10c32 <getFuncNumForCallback+0x10>
   10c28:	      |      moveq #1,d0
   10c2a:	      |      cmp.l 4(sp),d0
   10c2e:	      |  /-- beq.s 10c38 <getFuncNumForCallback+0x16>
   10c30:	   /--|--|-- bra.s 10c6e <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   10c32:	   |  \--|-> clr.l 12(sp)
			break;
   10c36:	/--|-----|-- bra.s 10c80 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   10c38:	|  |     \-> movea.l 8(sp),a0
   10c3c:	|  |         move.l 24(a0),d0
   10c40:	|  |         move.l d0,-(sp)
   10c42:	|  |         pea 2 <_start+0x2>
   10c46:	|  |         move.l 20(sp),-(sp)
   10c4a:	|  |         jsr 1362e <getValueType>
   10c50:	|  |         lea 12(sp),sp
   10c54:	|  |         tst.w d0
   10c56:	|  |     /-- bne.s 10c5c <getFuncNumForCallback+0x3a>
   10c58:	|  |     |   clr.w d0
   10c5a:	|  |  /--|-- bra.s 10c82 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   10c5c:	|  |  |  \-> moveq #24,d0
   10c5e:	|  |  |      add.l 8(sp),d0
   10c62:	|  |  |      move.l d0,-(sp)
   10c64:	|  |  |      jsr 13fb2 <trimStack>
   10c6a:	|  |  |      addq.l #4,sp
			break;
   10c6c:	+--|--|----- bra.s 10c80 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   10c6e:	|  \--|----> pea 1815b <line.c.05397aaf+0x1cf>
   10c74:	|     |      jsr 157fa <KPrintF>
   10c7a:	|     |      addq.l #4,sp
			return FALSE;
   10c7c:	|     |      clr.w d0
   10c7e:	|     +----- bra.s 10c82 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   10c80:	\-----|----> moveq #1,d0
}
   10c82:	      \----> rts

00010c84 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   10c84:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10c86:	       move.l sp,d0
   10c88:	       move.l d0,-(sp)
   10c8a:	       move.l 16(sp),-(sp)
   10c8e:	       move.l 16(sp),-(sp)
   10c92:	       jsr 10c22 <getFuncNumForCallback>
   10c98:	       lea 12(sp),sp
   10c9c:	       tst.w d0
   10c9e:	/----- beq.s 10cae <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   10ca0:	|      movea.l 1a878 <currentEvents>,a0
   10ca6:	|      move.l (sp),d0
   10ca8:	|      move.l d0,(a0)
		return BR_CONTINUE;
   10caa:	|      moveq #2,d0
   10cac:	|  /-- bra.s 10cb0 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   10cae:	\--|-> moveq #1,d0
}
   10cb0:	   \-> addq.l #4,sp
   10cb2:	       rts

00010cb4 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   10cb4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10cb6:	       move.l sp,d0
   10cb8:	       move.l d0,-(sp)
   10cba:	       move.l 16(sp),-(sp)
   10cbe:	       move.l 16(sp),-(sp)
   10cc2:	       jsr 10c22 <getFuncNumForCallback>
   10cc8:	       lea 12(sp),sp
   10ccc:	       tst.w d0
   10cce:	/----- beq.s 10ce0 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   10cd0:	|      movea.l 1a878 <currentEvents>,a0
   10cd6:	|      move.l (sp),d0
   10cd8:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   10cdc:	|      moveq #2,d0
   10cde:	|  /-- bra.s 10ce2 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   10ce0:	\--|-> moveq #1,d0
}
   10ce2:	   \-> addq.l #4,sp
   10ce4:	       rts

00010ce6 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   10ce6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10ce8:	       move.l sp,d0
   10cea:	       move.l d0,-(sp)
   10cec:	       move.l 16(sp),-(sp)
   10cf0:	       move.l 16(sp),-(sp)
   10cf4:	       jsr 10c22 <getFuncNumForCallback>
   10cfa:	       lea 12(sp),sp
   10cfe:	       tst.w d0
   10d00:	/----- beq.s 10d12 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   10d02:	|      movea.l 1a878 <currentEvents>,a0
   10d08:	|      move.l (sp),d0
   10d0a:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   10d0e:	|      moveq #2,d0
   10d10:	|  /-- bra.s 10d14 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   10d12:	\--|-> moveq #1,d0
}
   10d14:	   \-> addq.l #4,sp
   10d16:	       rts

00010d18 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   10d18:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10d1a:	       move.l sp,d0
   10d1c:	       move.l d0,-(sp)
   10d1e:	       move.l 16(sp),-(sp)
   10d22:	       move.l 16(sp),-(sp)
   10d26:	       jsr 10c22 <getFuncNumForCallback>
   10d2c:	       lea 12(sp),sp
   10d30:	       tst.w d0
   10d32:	/----- beq.s 10d44 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   10d34:	|      movea.l 1a878 <currentEvents>,a0
   10d3a:	|      move.l (sp),d0
   10d3c:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   10d40:	|      moveq #2,d0
   10d42:	|  /-- bra.s 10d46 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   10d44:	\--|-> moveq #1,d0
}
   10d46:	   \-> addq.l #4,sp
   10d48:	       rts

00010d4a <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   10d4a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10d4c:	       move.l sp,d0
   10d4e:	       move.l d0,-(sp)
   10d50:	       move.l 16(sp),-(sp)
   10d54:	       move.l 16(sp),-(sp)
   10d58:	       jsr 10c22 <getFuncNumForCallback>
   10d5e:	       lea 12(sp),sp
   10d62:	       tst.w d0
   10d64:	/----- beq.s 10d76 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   10d66:	|      movea.l 1a878 <currentEvents>,a0
   10d6c:	|      move.l (sp),d0
   10d6e:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   10d72:	|      moveq #2,d0
   10d74:	|  /-- bra.s 10d78 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   10d76:	\--|-> moveq #1,d0
}
   10d78:	   \-> addq.l #4,sp
   10d7a:	       rts

00010d7c <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   10d7c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10d7e:	       move.l sp,d0
   10d80:	       move.l d0,-(sp)
   10d82:	       move.l 16(sp),-(sp)
   10d86:	       move.l 16(sp),-(sp)
   10d8a:	       jsr 10c22 <getFuncNumForCallback>
   10d90:	       lea 12(sp),sp
   10d94:	       tst.w d0
   10d96:	/----- beq.s 10da8 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   10d98:	|      movea.l 1a878 <currentEvents>,a0
   10d9e:	|      move.l (sp),d0
   10da0:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   10da4:	|      moveq #2,d0
   10da6:	|  /-- bra.s 10daa <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   10da8:	\--|-> moveq #1,d0
}
   10daa:	   \-> addq.l #4,sp
   10dac:	       rts

00010dae <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   10dae:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10db0:	       move.l sp,d0
   10db2:	       move.l d0,-(sp)
   10db4:	       move.l 16(sp),-(sp)
   10db8:	       move.l 16(sp),-(sp)
   10dbc:	       jsr 10c22 <getFuncNumForCallback>
   10dc2:	       lea 12(sp),sp
   10dc6:	       tst.w d0
   10dc8:	/----- beq.s 10dda <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   10dca:	|      movea.l 1a878 <currentEvents>,a0
   10dd0:	|      move.l (sp),d0
   10dd2:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   10dd6:	|      moveq #2,d0
   10dd8:	|  /-- bra.s 10ddc <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   10dda:	\--|-> moveq #1,d0
}
   10ddc:	   \-> addq.l #4,sp
   10dde:	       rts

00010de0 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   10de0:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10de2:	          move.l sp,d0
   10de4:	          move.l d0,-(sp)
   10de6:	          move.l 16(sp),-(sp)
   10dea:	          move.l 16(sp),-(sp)
   10dee:	          jsr 10c22 <getFuncNumForCallback>
   10df4:	          lea 12(sp),sp
   10df8:	          tst.w d0
   10dfa:	/-------- beq.s 10e26 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   10dfc:	|         move.l 1aed2 <noStack>,d1
   10e02:	|         move.l (sp),d0
   10e04:	|         pea 1 <_start+0x1>
   10e08:	|         move.l d1,-(sp)
   10e0a:	|         clr.l -(sp)
   10e0c:	|         clr.l -(sp)
   10e0e:	|         move.l d0,-(sp)
   10e10:	|         jsr 59de <startNewFunctionNum>
   10e16:	|         lea 20(sp),sp
   10e1a:	|         tst.l d0
   10e1c:	|     /-- bne.s 10e22 <builtIn_spawnSub+0x42>
   10e1e:	|     |   moveq #1,d0
   10e20:	|  /--|-- bra.s 10e28 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   10e22:	|  |  \-> moveq #2,d0
   10e24:	|  +----- bra.s 10e28 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   10e26:	\--|----> moveq #1,d0
}
   10e28:	   \----> addq.l #4,sp
   10e2a:	          rts

00010e2c <builtIn_cancelSub>:

builtIn (cancelSub)
{
   10e2c:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10e2e:	          move.l sp,d0
   10e30:	          addq.l #4,d0
   10e32:	          move.l d0,-(sp)
   10e34:	          move.l 20(sp),-(sp)
   10e38:	          move.l 20(sp),-(sp)
   10e3c:	          jsr 10c22 <getFuncNumForCallback>
   10e42:	          lea 12(sp),sp
   10e46:	          tst.w d0
   10e48:	/-------- beq.s 10e7e <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   10e4a:	|         move.l 4(sp),d1
   10e4e:	|         move.l sp,d0
   10e50:	|         addq.l #2,d0
   10e52:	|         move.l d0,-(sp)
   10e54:	|         move.l 20(sp),-(sp)
   10e58:	|         move.l d1,-(sp)
   10e5a:	|         jsr 3720 <cancelAFunction>
   10e60:	|         lea 12(sp),sp
		if (killedMyself) {
   10e64:	|         move.w 2(sp),d0
   10e68:	|  /----- beq.s 10e7a <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   10e6a:	|  |      move.l 16(sp),-(sp)
   10e6e:	|  |      jsr 363e <abortFunction>
   10e74:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   10e76:	|  |      moveq #5,d0
   10e78:	|  |  /-- bra.s 10e80 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   10e7a:	|  \--|-> moveq #2,d0
   10e7c:	|     +-- bra.s 10e80 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   10e7e:	\-----|-> moveq #1,d0
}
   10e80:	      \-> addq.l #8,sp
   10e82:	          rts

00010e84 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   10e84:	       subq.l #8,sp
   10e86:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   10e88:	       movea.l 20(sp),a0
   10e8c:	       move.l 24(a0),d0
   10e90:	       move.l d0,-(sp)
   10e92:	       jsr 13c04 <getTextFromAnyVar>
   10e98:	       addq.l #4,sp
   10e9a:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   10e9e:	   /-- bne.s 10ea4 <builtIn_stringWidth+0x20>
   10ea0:	   |   moveq #1,d0
   10ea2:	/--|-- bra.s 10ef2 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   10ea4:	|  \-> moveq #24,d0
   10ea6:	|      add.l 20(sp),d0
   10eaa:	|      move.l d0,-(sp)
   10eac:	|      jsr 13fb2 <trimStack>
   10eb2:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   10eb4:	|      move.l 8(sp),-(sp)
   10eb8:	|      jsr 1400c <stringWidth>
   10ebe:	|      addq.l #4,sp
   10ec0:	|      move.l d0,d1
   10ec2:	|      moveq #28,d0
   10ec4:	|      add.l 20(sp),d0
   10ec8:	|      move.l d1,-(sp)
   10eca:	|      pea 1 <_start+0x1>
   10ece:	|      move.l d0,-(sp)
   10ed0:	|      jsr 13f20 <setVariable>
   10ed6:	|      lea 12(sp),sp
	FreeVec(theText);
   10eda:	|      move.l 8(sp),4(sp)
   10ee0:	|      move.l 1af02 <SysBase>,d0
   10ee6:	|      movea.l d0,a6
   10ee8:	|      movea.l 4(sp),a1
   10eec:	|      jsr -690(a6)
	return BR_CONTINUE;
   10ef0:	|      moveq #2,d0
}
   10ef2:	\----> movea.l (sp)+,a6
   10ef4:	       addq.l #8,sp
   10ef6:	       rts

00010ef8 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   10ef8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10efa:	       movea.l 12(sp),a0
   10efe:	       move.l 24(a0),d0
   10f02:	       move.l d0,-(sp)
   10f04:	       pea 1 <_start+0x1>
   10f08:	       move.l sp,d0
   10f0a:	       addq.l #8,d0
   10f0c:	       move.l d0,-(sp)
   10f0e:	       jsr 1362e <getValueType>
   10f14:	       lea 12(sp),sp
   10f18:	       tst.w d0
   10f1a:	   /-- bne.s 10f20 <builtIn_hardScroll+0x28>
   10f1c:	   |   moveq #1,d0
   10f1e:	/--|-- bra.s 10f3e <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   10f20:	|  \-> moveq #24,d0
   10f22:	|      add.l 12(sp),d0
   10f26:	|      move.l d0,-(sp)
   10f28:	|      jsr 13fb2 <trimStack>
   10f2e:	|      addq.l #4,sp
	hardScroll (v);
   10f30:	|      move.l (sp),d0
   10f32:	|      move.l d0,-(sp)
   10f34:	|      jsr c1b6 <hardScroll>
   10f3a:	|      addq.l #4,sp
	return BR_CONTINUE;
   10f3c:	|      moveq #2,d0
}
   10f3e:	\----> addq.l #4,sp
   10f40:	       rts

00010f42 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   10f42:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f44:	       movea.l 12(sp),a0
   10f48:	       move.l 24(a0),d0
   10f4c:	       move.l d0,-(sp)
   10f4e:	       pea 7 <_start+0x7>
   10f52:	       move.l sp,d0
   10f54:	       addq.l #8,d0
   10f56:	       move.l d0,-(sp)
   10f58:	       jsr 1362e <getValueType>
   10f5e:	       lea 12(sp),sp
   10f62:	       tst.w d0
   10f64:	   /-- bne.s 10f6a <builtIn_isScreenRegion+0x28>
   10f66:	   |   moveq #1,d0
   10f68:	/--|-- bra.s 10faa <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   10f6a:	|  \-> moveq #24,d0
   10f6c:	|      add.l 12(sp),d0
   10f70:	|      move.l d0,-(sp)
   10f72:	|      jsr 13fb2 <trimStack>
   10f78:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   10f7a:	|      move.l (sp),d0
   10f7c:	|      move.l d0,-(sp)
   10f7e:	|      jsr 1417e <getRegionForObject>
   10f84:	|      addq.l #4,sp
   10f86:	|      tst.l d0
   10f88:	|      sne d0
   10f8a:	|      neg.b d0
   10f8c:	|      moveq #0,d1
   10f8e:	|      move.b d0,d1
   10f90:	|      moveq #28,d0
   10f92:	|      add.l 12(sp),d0
   10f96:	|      move.l d1,-(sp)
   10f98:	|      pea 1 <_start+0x1>
   10f9c:	|      move.l d0,-(sp)
   10f9e:	|      jsr 13f20 <setVariable>
   10fa4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10fa8:	|      moveq #2,d0
}
   10faa:	\----> addq.l #4,sp
   10fac:	       rts

00010fae <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   10fae:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fb0:	       movea.l 12(sp),a0
   10fb4:	       move.l 24(a0),d0
   10fb8:	       move.l d0,-(sp)
   10fba:	       pea 1 <_start+0x1>
   10fbe:	       move.l sp,d0
   10fc0:	       addq.l #8,d0
   10fc2:	       move.l d0,-(sp)
   10fc4:	       jsr 1362e <getValueType>
   10fca:	       lea 12(sp),sp
   10fce:	       tst.w d0
   10fd0:	   /-- bne.s 10fd6 <builtIn_setSpeechSpeed+0x28>
   10fd2:	   |   moveq #1,d0
   10fd4:	/--|-- bra.s 11024 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   10fd6:	|  \-> moveq #24,d0
   10fd8:	|      add.l 12(sp),d0
   10fdc:	|      move.l d0,-(sp)
   10fde:	|      jsr 13fb2 <trimStack>
   10fe4:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   10fe6:	|      move.l (sp),d0
   10fe8:	|      move.l d0,-(sp)
   10fea:	|      jsr 15c36 <__floatsisf>
   10ff0:	|      addq.l #4,sp
   10ff2:	|      move.l #1008981770,-(sp)
   10ff8:	|      move.l d0,-(sp)
   10ffa:	|      jsr 15ce8 <__mulsf3>
   11000:	|      addq.l #8,sp
   11002:	|      move.l d0,1a88a <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   11008:	|      moveq #28,d0
   1100a:	|      add.l 12(sp),d0
   1100e:	|      pea 1 <_start+0x1>
   11012:	|      pea 1 <_start+0x1>
   11016:	|      move.l d0,-(sp)
   11018:	|      jsr 13f20 <setVariable>
   1101e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11022:	|      moveq #2,d0
}
   11024:	\----> addq.l #4,sp
   11026:	       rts

00011028 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   11028:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1102a:	       movea.l 12(sp),a0
   1102e:	       move.l 24(a0),d0
   11032:	       move.l d0,-(sp)
   11034:	       pea 1 <_start+0x1>
   11038:	       move.l sp,d0
   1103a:	       addq.l #8,d0
   1103c:	       move.l d0,-(sp)
   1103e:	       jsr 1362e <getValueType>
   11044:	       lea 12(sp),sp
   11048:	       tst.w d0
   1104a:	   /-- bne.s 11050 <builtIn_setFontSpacing+0x28>
   1104c:	   |   moveq #1,d0
   1104e:	/--|-- bra.s 11086 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   11050:	|  \-> move.l (sp),d0
   11052:	|      move.l d0,d0
   11054:	|      move.w d0,1ae04 <fontSpace>
	trimStack (&fun -> stack);
   1105a:	|      moveq #24,d0
   1105c:	|      add.l 12(sp),d0
   11060:	|      move.l d0,-(sp)
   11062:	|      jsr 13fb2 <trimStack>
   11068:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1106a:	|      moveq #28,d0
   1106c:	|      add.l 12(sp),d0
   11070:	|      pea 1 <_start+0x1>
   11074:	|      pea 1 <_start+0x1>
   11078:	|      move.l d0,-(sp)
   1107a:	|      jsr 13f20 <setVariable>
   11080:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11084:	|      moveq #2,d0
}
   11086:	\----> addq.l #4,sp
   11088:	       rts

0001108a <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   1108a:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1108c:	          movea.l 12(sp),a0
   11090:	          move.l 24(a0),d0
   11094:	          move.l d0,-(sp)
   11096:	          pea 1 <_start+0x1>
   1109a:	          move.l sp,d0
   1109c:	          addq.l #8,d0
   1109e:	          move.l d0,-(sp)
   110a0:	          jsr 1362e <getValueType>
   110a6:	          lea 12(sp),sp
   110aa:	          tst.w d0
   110ac:	      /-- bne.s 110b2 <builtIn_transitionLevel+0x28>
   110ae:	      |   moveq #1,d0
   110b0:	/-----|-- bra.s 11106 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   110b2:	|     \-> moveq #24,d0
   110b4:	|         add.l 12(sp),d0
   110b8:	|         move.l d0,-(sp)
   110ba:	|         jsr 13fb2 <trimStack>
   110c0:	|         addq.l #4,sp

	if (number < 0)
   110c2:	|         move.l (sp),d0
   110c4:	|     /-- bpl.s 110ce <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   110c6:	|     |   clr.b 1a876 <brightnessLevel>
   110cc:	|  /--|-- bra.s 110ea <builtIn_transitionLevel+0x60>
	else if (number > 255)
   110ce:	|  |  \-> move.l (sp),d0
   110d0:	|  |      cmpi.l #255,d0
   110d6:	|  |  /-- ble.s 110e0 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   110d8:	|  |  |   st 1a876 <brightnessLevel>
   110de:	|  +--|-- bra.s 110ea <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   110e0:	|  |  \-> move.l (sp),d0
   110e2:	|  |      move.l d0,d0
   110e4:	|  |      move.b d0,1a876 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   110ea:	|  \----> moveq #28,d0
   110ec:	|         add.l 12(sp),d0
   110f0:	|         pea 1 <_start+0x1>
   110f4:	|         pea 1 <_start+0x1>
   110f8:	|         move.l d0,-(sp)
   110fa:	|         jsr 13f20 <setVariable>
   11100:	|         lea 12(sp),sp
	return BR_CONTINUE;
   11104:	|         moveq #2,d0
}
   11106:	\-------> addq.l #4,sp
   11108:	          rts

0001110a <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   1110a:	movea.l 8(sp),a0
   1110e:	move.l 24(a0),d0
   11112:	move.l d0,-(sp)
   11114:	jsr 13b6e <getBoolean>
   1111a:	addq.l #4,sp
   1111c:	move.w d0,1aea2 <captureAllKeys>
	trimStack (&fun -> stack);
   11122:	moveq #24,d0
   11124:	add.l 8(sp),d0
   11128:	move.l d0,-(sp)
   1112a:	jsr 13fb2 <trimStack>
   11130:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   11132:	move.w 1aea2 <captureAllKeys>,d0
   11138:	movea.w d0,a0
   1113a:	moveq #28,d0
   1113c:	add.l 8(sp),d0
   11140:	move.l a0,-(sp)
   11142:	pea 1 <_start+0x1>
   11146:	move.l d0,-(sp)
   11148:	jsr 13f20 <setVariable>
   1114e:	lea 12(sp),sp
	return BR_CONTINUE;
   11152:	moveq #2,d0
}
   11154:	rts

00011156 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   11156:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1115a:	       movea.l 20(sp),a0
   1115e:	       move.l 24(a0),d0
   11162:	       move.l d0,-(sp)
   11164:	       pea 1 <_start+0x1>
   11168:	       moveq #12,d0
   1116a:	       add.l sp,d0
   1116c:	       move.l d0,-(sp)
   1116e:	       jsr 1362e <getValueType>
   11174:	       lea 12(sp),sp
   11178:	       tst.w d0
   1117a:	   /-- bne.s 11182 <builtIn_spinCharacter+0x2c>
   1117c:	   |   moveq #1,d0
   1117e:	/--|-- bra.w 11232 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   11182:	|  \-> moveq #24,d0
   11184:	|      add.l 20(sp),d0
   11188:	|      move.l d0,-(sp)
   1118a:	|      jsr 13fb2 <trimStack>
   11190:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11192:	|      movea.l 20(sp),a0
   11196:	|      move.l 24(a0),d0
   1119a:	|      move.l d0,-(sp)
   1119c:	|      pea 7 <_start+0x7>
   111a0:	|      lea 8(sp),a0
   111a4:	|      move.l a0,-(sp)
   111a6:	|      jsr 1362e <getValueType>
   111ac:	|      lea 12(sp),sp
   111b0:	|      tst.w d0
   111b2:	|  /-- bne.s 111b8 <builtIn_spinCharacter+0x62>
   111b4:	|  |   moveq #1,d0
   111b6:	+--|-- bra.s 11232 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   111b8:	|  \-> moveq #24,d0
   111ba:	|      add.l 20(sp),d0
   111be:	|      move.l d0,-(sp)
   111c0:	|      jsr 13fb2 <trimStack>
   111c6:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   111c8:	|      move.l (sp),d0
   111ca:	|      move.l d0,-(sp)
   111cc:	|      jsr 959a <findPerson>
   111d2:	|      addq.l #4,sp
   111d4:	|      move.l d0,8(sp)
	if (thisPerson) {
   111d8:	|  /-- beq.s 11218 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   111da:	|  |   move.l 4(sp),d0
   111de:	|  |   movea.l 8(sp),a0
   111e2:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
   111e6:	|  |   movea.l 8(sp),a0
   111ea:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
   111f0:	|  |   movea.l 8(sp),a0
   111f4:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   111fa:	|  |   moveq #28,d0
   111fc:	|  |   add.l 20(sp),d0
   11200:	|  |   pea 1 <_start+0x1>
   11204:	|  |   pea 1 <_start+0x1>
   11208:	|  |   move.l d0,-(sp)
   1120a:	|  |   jsr 13f20 <setVariable>
   11210:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   11214:	|  |   moveq #3,d0
   11216:	+--|-- bra.s 11232 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11218:	|  \-> moveq #28,d0
   1121a:	|      add.l 20(sp),d0
   1121e:	|      clr.l -(sp)
   11220:	|      pea 1 <_start+0x1>
   11224:	|      move.l d0,-(sp)
   11226:	|      jsr 13f20 <setVariable>
   1122c:	|      lea 12(sp),sp
		return BR_CONTINUE;
   11230:	|      moveq #2,d0
	}
}
   11232:	\----> lea 12(sp),sp
   11236:	       rts

00011238 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   11238:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1123a:	          movea.l 16(sp),a0
   1123e:	          move.l 24(a0),d0
   11242:	          move.l d0,-(sp)
   11244:	          pea 7 <_start+0x7>
   11248:	          move.l sp,d0
   1124a:	          addq.l #8,d0
   1124c:	          move.l d0,-(sp)
   1124e:	          jsr 1362e <getValueType>
   11254:	          lea 12(sp),sp
   11258:	          tst.w d0
   1125a:	      /-- bne.s 11260 <builtIn_getCharacterDirection+0x28>
   1125c:	      |   moveq #1,d0
   1125e:	/-----|-- bra.s 112be <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   11260:	|     \-> moveq #24,d0
   11262:	|         add.l 16(sp),d0
   11266:	|         move.l d0,-(sp)
   11268:	|         jsr 13fb2 <trimStack>
   1126e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11270:	|         move.l (sp),d0
   11272:	|         move.l d0,-(sp)
   11274:	|         jsr 959a <findPerson>
   1127a:	|         addq.l #4,sp
   1127c:	|         move.l d0,4(sp)
	if (thisPerson) {
   11280:	|  /----- beq.s 112a4 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   11282:	|  |      movea.l 4(sp),a0
   11286:	|  |      move.l 94(a0),d1
   1128a:	|  |      moveq #28,d0
   1128c:	|  |      add.l 16(sp),d0
   11290:	|  |      move.l d1,-(sp)
   11292:	|  |      pea 1 <_start+0x1>
   11296:	|  |      move.l d0,-(sp)
   11298:	|  |      jsr 13f20 <setVariable>
   1129e:	|  |      lea 12(sp),sp
   112a2:	|  |  /-- bra.s 112bc <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   112a4:	|  \--|-> moveq #28,d0
   112a6:	|     |   add.l 16(sp),d0
   112aa:	|     |   clr.l -(sp)
   112ac:	|     |   pea 1 <_start+0x1>
   112b0:	|     |   move.l d0,-(sp)
   112b2:	|     |   jsr 13f20 <setVariable>
   112b8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   112bc:	|     \-> moveq #2,d0
}
   112be:	\-------> addq.l #8,sp
   112c0:	          rts

000112c2 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   112c2:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112c4:	       movea.l 16(sp),a0
   112c8:	       move.l 24(a0),d0
   112cc:	       move.l d0,-(sp)
   112ce:	       pea 7 <_start+0x7>
   112d2:	       move.l sp,d0
   112d4:	       addq.l #8,d0
   112d6:	       move.l d0,-(sp)
   112d8:	       jsr 1362e <getValueType>
   112de:	       lea 12(sp),sp
   112e2:	       tst.w d0
   112e4:	   /-- bne.s 112ea <builtIn_isCharacter+0x28>
   112e6:	   |   moveq #1,d0
   112e8:	/--|-- bra.s 1132c <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   112ea:	|  \-> moveq #24,d0
   112ec:	|      add.l 16(sp),d0
   112f0:	|      move.l d0,-(sp)
   112f2:	|      jsr 13fb2 <trimStack>
   112f8:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   112fa:	|      move.l (sp),d0
   112fc:	|      move.l d0,-(sp)
   112fe:	|      jsr 959a <findPerson>
   11304:	|      addq.l #4,sp
   11306:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   1130a:	|      sne d0
   1130c:	|      neg.b d0
   1130e:	|      moveq #0,d1
   11310:	|      move.b d0,d1
   11312:	|      moveq #28,d0
   11314:	|      add.l 16(sp),d0
   11318:	|      move.l d1,-(sp)
   1131a:	|      pea 1 <_start+0x1>
   1131e:	|      move.l d0,-(sp)
   11320:	|      jsr 13f20 <setVariable>
   11326:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1132a:	|      moveq #2,d0
}
   1132c:	\----> addq.l #8,sp
   1132e:	       rts

00011330 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   11330:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11332:	          movea.l 16(sp),a0
   11336:	          move.l 24(a0),d0
   1133a:	          move.l d0,-(sp)
   1133c:	          pea 7 <_start+0x7>
   11340:	          move.l sp,d0
   11342:	          addq.l #8,d0
   11344:	          move.l d0,-(sp)
   11346:	          jsr 1362e <getValueType>
   1134c:	          lea 12(sp),sp
   11350:	          tst.w d0
   11352:	      /-- bne.s 11358 <builtIn_normalCharacter+0x28>
   11354:	      |   moveq #1,d0
   11356:	/-----|-- bra.s 113d4 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   11358:	|     \-> moveq #24,d0
   1135a:	|         add.l 16(sp),d0
   1135e:	|         move.l d0,-(sp)
   11360:	|         jsr 13fb2 <trimStack>
   11366:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11368:	|         move.l (sp),d0
   1136a:	|         move.l d0,-(sp)
   1136c:	|         jsr 959a <findPerson>
   11372:	|         addq.l #4,sp
   11374:	|         move.l d0,4(sp)
	if (thisPerson)
   11378:	|  /----- beq.s 113ba <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   1137a:	|  |      movea.l 4(sp),a0
   1137e:	|  |      movea.l 68(a0),a0
   11382:	|  |      move.l (a0),d1
   11384:	|  |      movea.l 4(sp),a0
   11388:	|  |      move.l 94(a0),d0
   1138c:	|  |      add.l d0,d0
   1138e:	|  |      add.l d0,d0
   11390:	|  |      movea.l d1,a0
   11392:	|  |      adda.l d0,a0
   11394:	|  |      move.l (a0),d0
   11396:	|  |      movea.l 4(sp),a0
   1139a:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1139e:	|  |      moveq #28,d0
   113a0:	|  |      add.l 16(sp),d0
   113a4:	|  |      pea 1 <_start+0x1>
   113a8:	|  |      pea 1 <_start+0x1>
   113ac:	|  |      move.l d0,-(sp)
   113ae:	|  |      jsr 13f20 <setVariable>
   113b4:	|  |      lea 12(sp),sp
   113b8:	|  |  /-- bra.s 113d2 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   113ba:	|  \--|-> moveq #28,d0
   113bc:	|     |   add.l 16(sp),d0
   113c0:	|     |   clr.l -(sp)
   113c2:	|     |   pea 1 <_start+0x1>
   113c6:	|     |   move.l d0,-(sp)
   113c8:	|     |   jsr 13f20 <setVariable>
   113ce:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   113d2:	|     \-> moveq #2,d0
}
   113d4:	\-------> addq.l #8,sp
   113d6:	          rts

000113d8 <builtIn_isMoving>:

builtIn(isMoving)
{
   113d8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113da:	          movea.l 16(sp),a0
   113de:	          move.l 24(a0),d0
   113e2:	          move.l d0,-(sp)
   113e4:	          pea 7 <_start+0x7>
   113e8:	          move.l sp,d0
   113ea:	          addq.l #8,d0
   113ec:	          move.l d0,-(sp)
   113ee:	          jsr 1362e <getValueType>
   113f4:	          lea 12(sp),sp
   113f8:	          tst.w d0
   113fa:	      /-- bne.s 11400 <builtIn_isMoving+0x28>
   113fc:	      |   moveq #1,d0
   113fe:	/-----|-- bra.s 11460 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   11400:	|     \-> moveq #24,d0
   11402:	|         add.l 16(sp),d0
   11406:	|         move.l d0,-(sp)
   11408:	|         jsr 13fb2 <trimStack>
   1140e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11410:	|         move.l (sp),d0
   11412:	|         move.l d0,-(sp)
   11414:	|         jsr 959a <findPerson>
   1141a:	|         addq.l #4,sp
   1141c:	|         move.l d0,4(sp)
	if (thisPerson)
   11420:	|  /----- beq.s 11446 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   11422:	|  |      movea.l 4(sp),a0
   11426:	|  |      move.w 52(a0),d0
   1142a:	|  |      movea.w d0,a0
   1142c:	|  |      moveq #28,d0
   1142e:	|  |      add.l 16(sp),d0
   11432:	|  |      move.l a0,-(sp)
   11434:	|  |      pea 1 <_start+0x1>
   11438:	|  |      move.l d0,-(sp)
   1143a:	|  |      jsr 13f20 <setVariable>
   11440:	|  |      lea 12(sp),sp
   11444:	|  |  /-- bra.s 1145e <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11446:	|  \--|-> moveq #28,d0
   11448:	|     |   add.l 16(sp),d0
   1144c:	|     |   clr.l -(sp)
   1144e:	|     |   pea 1 <_start+0x1>
   11452:	|     |   move.l d0,-(sp)
   11454:	|     |   jsr 13f20 <setVariable>
   1145a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1145e:	|     \-> moveq #2,d0
}
   11460:	\-------> addq.l #8,sp
   11462:	          rts

00011464 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   11464:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11468:	          movea.l 20(sp),a0
   1146c:	          move.l 24(a0),d0
   11470:	          move.l d0,-(sp)
   11472:	          pea 7 <_start+0x7>
   11476:	          lea 8(sp),a0
   1147a:	          move.l a0,-(sp)
   1147c:	          jsr 1362e <getValueType>
   11482:	          lea 12(sp),sp
   11486:	          tst.w d0
   11488:	      /-- bne.s 11490 <builtIn_fetchEvent+0x2c>
   1148a:	      |   moveq #1,d0
   1148c:	/-----|-- bra.w 11524 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   11490:	|     \-> moveq #24,d0
   11492:	|         add.l 20(sp),d0
   11496:	|         move.l d0,-(sp)
   11498:	|         jsr 13fb2 <trimStack>
   1149e:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114a0:	|         movea.l 20(sp),a0
   114a4:	|         move.l 24(a0),d0
   114a8:	|         move.l d0,-(sp)
   114aa:	|         pea 7 <_start+0x7>
   114ae:	|         moveq #12,d0
   114b0:	|         add.l sp,d0
   114b2:	|         move.l d0,-(sp)
   114b4:	|         jsr 1362e <getValueType>
   114ba:	|         lea 12(sp),sp
   114be:	|         tst.w d0
   114c0:	|     /-- bne.s 114c6 <builtIn_fetchEvent+0x62>
   114c2:	|     |   moveq #1,d0
   114c4:	+-----|-- bra.s 11524 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   114c6:	|     \-> moveq #24,d0
   114c8:	|         add.l 20(sp),d0
   114cc:	|         move.l d0,-(sp)
   114ce:	|         jsr 13fb2 <trimStack>
   114d4:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   114d6:	|         move.l (sp),d1
   114d8:	|         move.l 4(sp),d0
   114dc:	|         move.l d1,-(sp)
   114de:	|         move.l d0,-(sp)
   114e0:	|         jsr c498 <getCombinationFunction>
   114e6:	|         addq.l #8,sp
   114e8:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   114ec:	|  /----- beq.s 1150a <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   114ee:	|  |      moveq #28,d0
   114f0:	|  |      add.l 20(sp),d0
   114f4:	|  |      move.l 8(sp),-(sp)
   114f8:	|  |      pea 2 <_start+0x2>
   114fc:	|  |      move.l d0,-(sp)
   114fe:	|  |      jsr 13f20 <setVariable>
   11504:	|  |      lea 12(sp),sp
   11508:	|  |  /-- bra.s 11522 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1150a:	|  \--|-> moveq #28,d0
   1150c:	|     |   add.l 20(sp),d0
   11510:	|     |   clr.l -(sp)
   11512:	|     |   pea 1 <_start+0x1>
   11516:	|     |   move.l d0,-(sp)
   11518:	|     |   jsr 13f20 <setVariable>
   1151e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11522:	|     \-> moveq #2,d0
}
   11524:	\-------> lea 12(sp),sp
   11528:	          rts

0001152a <builtIn_deleteFile>:

builtIn(deleteFile)
{
   1152a:	       lea -24(sp),sp
   1152e:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   11530:	       movea.l 36(sp),a0
   11534:	       move.l 24(a0),d0
   11538:	       move.l d0,-(sp)
   1153a:	       jsr 13c04 <getTextFromAnyVar>
   11540:	       addq.l #4,sp
   11542:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   11546:	       moveq #24,d0
   11548:	       add.l 36(sp),d0
   1154c:	       move.l d0,-(sp)
   1154e:	       jsr 13fb2 <trimStack>
   11554:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   11556:	       move.l 24(sp),-(sp)
   1155a:	       jsr 2fe <encodeFilename>
   11560:	       addq.l #4,sp
   11562:	       move.l d0,20(sp)
    FreeVec(namNormal);
   11566:	       move.l 24(sp),16(sp)
   1156c:	       move.l 1af02 <SysBase>,d0
   11572:	       movea.l d0,a6
   11574:	       movea.l 16(sp),a1
   11578:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   1157c:	       move.l 20(sp),-(sp)
   11580:	       jsr d250 <failSecurityCheck>
   11586:	       addq.l #4,sp
   11588:	       tst.w d0
   1158a:	   /-- beq.s 11590 <builtIn_deleteFile+0x66>
   1158c:	   |   moveq #1,d0
   1158e:	/--|-- bra.s 115de <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   11590:	|  \-> move.l 20(sp),12(sp)
   11596:	|      move.l 1af0a <DOSBase>,d0
   1159c:	|      movea.l d0,a6
   1159e:	|      move.l 12(sp),d1
   115a2:	|      jsr -72(a6)
   115a6:	|      move.l d0,8(sp)
   115aa:	|      move.l 8(sp),d1
   115ae:	|      moveq #28,d0
   115b0:	|      add.l 36(sp),d0
   115b4:	|      move.l d1,-(sp)
   115b6:	|      pea 1 <_start+0x1>
   115ba:	|      move.l d0,-(sp)
   115bc:	|      jsr 13f20 <setVariable>
   115c2:	|      lea 12(sp),sp
    FreeVec(nam);
   115c6:	|      move.l 20(sp),4(sp)
   115cc:	|      move.l 1af02 <SysBase>,d0
   115d2:	|      movea.l d0,a6
   115d4:	|      movea.l 4(sp),a1
   115d8:	|      jsr -690(a6)

    return BR_CONTINUE;
   115dc:	|      moveq #2,d0
}
   115de:	\----> movea.l (sp)+,a6
   115e0:	       lea 24(sp),sp
   115e4:	       rts

000115e6 <builtIn_renameFile>:

builtIn(renameFile)
{
   115e6:	       lea -40(sp),sp
   115ea:	       move.l a6,-(sp)
   115ec:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   115ee:	       movea.l 56(sp),a0
   115f2:	       move.l 24(a0),d0
   115f6:	       move.l d0,-(sp)
   115f8:	       jsr 13c04 <getTextFromAnyVar>
   115fe:	       addq.l #4,sp
   11600:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   11604:	       move.l 44(sp),-(sp)
   11608:	       jsr 2fe <encodeFilename>
   1160e:	       addq.l #4,sp
   11610:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   11614:	       moveq #24,d0
   11616:	       add.l 56(sp),d0
   1161a:	       move.l d0,-(sp)
   1161c:	       jsr 13fb2 <trimStack>
   11622:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   11624:	       move.l 40(sp),-(sp)
   11628:	       jsr d250 <failSecurityCheck>
   1162e:	       addq.l #4,sp
   11630:	       tst.w d0
   11632:	   /-- beq.s 1163a <builtIn_renameFile+0x54>
   11634:	   |   moveq #1,d0
   11636:	/--|-- bra.w 11720 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1163a:	|  \-> move.l 44(sp),36(sp)
   11640:	|      move.l 1af02 <SysBase>,d0
   11646:	|      movea.l d0,a6
   11648:	|      movea.l 36(sp),a1
   1164c:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   11650:	|      movea.l 56(sp),a0
   11654:	|      move.l 24(a0),d0
   11658:	|      move.l d0,-(sp)
   1165a:	|      jsr 13c04 <getTextFromAnyVar>
   11660:	|      addq.l #4,sp
   11662:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   11666:	|      move.l 44(sp),-(sp)
   1166a:	|      jsr 2fe <encodeFilename>
   11670:	|      addq.l #4,sp
   11672:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   11676:	|      moveq #24,d0
   11678:	|      add.l 56(sp),d0
   1167c:	|      move.l d0,-(sp)
   1167e:	|      jsr 13fb2 <trimStack>
   11684:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   11686:	|      move.l 32(sp),-(sp)
   1168a:	|      jsr d250 <failSecurityCheck>
   11690:	|      addq.l #4,sp
   11692:	|      tst.w d0
   11694:	|  /-- beq.s 1169c <builtIn_renameFile+0xb6>
   11696:	|  |   moveq #1,d0
   11698:	+--|-- bra.w 11720 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1169c:	|  \-> move.l 44(sp),28(sp)
   116a2:	|      move.l 1af02 <SysBase>,d0
   116a8:	|      movea.l d0,a6
   116aa:	|      movea.l 28(sp),a1
   116ae:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   116b2:	|      move.l 32(sp),24(sp)
   116b8:	|      move.l 40(sp),20(sp)
   116be:	|      move.l 1af0a <DOSBase>,d0
   116c4:	|      movea.l d0,a6
   116c6:	|      move.l 24(sp),d1
   116ca:	|      move.l 20(sp),d2
   116ce:	|      jsr -78(a6)
   116d2:	|      move.l d0,16(sp)
   116d6:	|      move.l 16(sp),d1
   116da:	|      moveq #28,d0
   116dc:	|      add.l 56(sp),d0
   116e0:	|      move.l d1,-(sp)
   116e2:	|      pea 1 <_start+0x1>
   116e6:	|      move.l d0,-(sp)
   116e8:	|      jsr 13f20 <setVariable>
   116ee:	|      lea 12(sp),sp
	FreeVec(nam);
   116f2:	|      move.l 32(sp),12(sp)
   116f8:	|      move.l 1af02 <SysBase>,d0
   116fe:	|      movea.l d0,a6
   11700:	|      movea.l 12(sp),a1
   11704:	|      jsr -690(a6)
	FreeVec(newnam);
   11708:	|      move.l 40(sp),8(sp)
   1170e:	|      move.l 1af02 <SysBase>,d0
   11714:	|      movea.l d0,a6
   11716:	|      movea.l 8(sp),a1
   1171a:	|      jsr -690(a6)

	return BR_CONTINUE;
   1171e:	|      moveq #2,d0
}
   11720:	\----> move.l (sp)+,d2
   11722:	       movea.l (sp)+,a6
   11724:	       lea 40(sp),sp
   11728:	       rts

0001172a <builtIn_cacheSound>:

builtIn(cacheSound)
{
   1172a:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1172c:	       movea.l 12(sp),a0
   11730:	       move.l 24(a0),d0
   11734:	       move.l d0,-(sp)
   11736:	       pea 5 <_start+0x5>
   1173a:	       move.l sp,d0
   1173c:	       addq.l #8,d0
   1173e:	       move.l d0,-(sp)
   11740:	       jsr 1362e <getValueType>
   11746:	       lea 12(sp),sp
   1174a:	       tst.w d0
   1174c:	   /-- bne.s 11752 <builtIn_cacheSound+0x28>
   1174e:	   |   moveq #1,d0
   11750:	/--|-- bra.s 1177a <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   11752:	|  \-> moveq #24,d0
   11754:	|      add.l 12(sp),d0
   11758:	|      move.l d0,-(sp)
   1175a:	|      jsr 13fb2 <trimStack>
   11760:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   11762:	|      move.l (sp),d0
   11764:	|      move.l d0,-(sp)
   11766:	|      jsr c098 <cacheSound>
   1176c:	|      addq.l #4,sp
   1176e:	|      moveq #-1,d1
   11770:	|      cmp.l d0,d1
   11772:	|  /-- bne.s 11778 <builtIn_cacheSound+0x4e>
   11774:	|  |   moveq #1,d0
   11776:	+--|-- bra.s 1177a <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   11778:	|  \-> moveq #2,d0
}
   1177a:	\----> addq.l #4,sp
   1177c:	       rts

0001177e <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   1177e:	pea 18170 <line.c.05397aaf+0x1e4>
   11784:	jsr 157fa <KPrintF>
   1178a:	addq.l #4,sp
	return BR_CONTINUE;
   1178c:	moveq #2,d0
}
   1178e:	rts

00011790 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   11790:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11794:	          movea.l 20(sp),a0
   11798:	          move.l 24(a0),d0
   1179c:	          move.l d0,-(sp)
   1179e:	          pea 1 <_start+0x1>
   117a2:	          moveq #12,d0
   117a4:	          add.l sp,d0
   117a6:	          move.l d0,-(sp)
   117a8:	          jsr 1362e <getValueType>
   117ae:	          lea 12(sp),sp
   117b2:	          tst.w d0
   117b4:	      /-- bne.s 117bc <builtIn_setCharacterSpinSpeed+0x2c>
   117b6:	      |   moveq #1,d0
   117b8:	/-----|-- bra.w 11856 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   117bc:	|     \-> moveq #24,d0
   117be:	|         add.l 20(sp),d0
   117c2:	|         move.l d0,-(sp)
   117c4:	|         jsr 13fb2 <trimStack>
   117ca:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117cc:	|         movea.l 20(sp),a0
   117d0:	|         move.l 24(a0),d0
   117d4:	|         move.l d0,-(sp)
   117d6:	|         pea 7 <_start+0x7>
   117da:	|         lea 8(sp),a0
   117de:	|         move.l a0,-(sp)
   117e0:	|         jsr 1362e <getValueType>
   117e6:	|         lea 12(sp),sp
   117ea:	|         tst.w d0
   117ec:	|     /-- bne.s 117f2 <builtIn_setCharacterSpinSpeed+0x62>
   117ee:	|     |   moveq #1,d0
   117f0:	+-----|-- bra.s 11856 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   117f2:	|     \-> moveq #24,d0
   117f4:	|         add.l 20(sp),d0
   117f8:	|         move.l d0,-(sp)
   117fa:	|         jsr 13fb2 <trimStack>
   11800:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   11802:	|         move.l (sp),d0
   11804:	|         move.l d0,-(sp)
   11806:	|         jsr 959a <findPerson>
   1180c:	|         addq.l #4,sp
   1180e:	|         move.l d0,8(sp)

	if (thisPerson) {
   11812:	|  /----- beq.s 1183c <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   11814:	|  |      move.l 4(sp),d0
   11818:	|  |      movea.l 8(sp),a0
   1181c:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11820:	|  |      moveq #28,d0
   11822:	|  |      add.l 20(sp),d0
   11826:	|  |      pea 1 <_start+0x1>
   1182a:	|  |      pea 1 <_start+0x1>
   1182e:	|  |      move.l d0,-(sp)
   11830:	|  |      jsr 13f20 <setVariable>
   11836:	|  |      lea 12(sp),sp
   1183a:	|  |  /-- bra.s 11854 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1183c:	|  \--|-> moveq #28,d0
   1183e:	|     |   add.l 20(sp),d0
   11842:	|     |   clr.l -(sp)
   11844:	|     |   pea 1 <_start+0x1>
   11848:	|     |   move.l d0,-(sp)
   1184a:	|     |   jsr 13f20 <setVariable>
   11850:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11854:	|     \-> moveq #2,d0
}
   11856:	\-------> lea 12(sp),sp
   1185a:	          rts

0001185c <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   1185c:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11860:	          movea.l 20(sp),a0
   11864:	          move.l 24(a0),d0
   11868:	          move.l d0,-(sp)
   1186a:	          pea 1 <_start+0x1>
   1186e:	          moveq #12,d0
   11870:	          add.l sp,d0
   11872:	          move.l d0,-(sp)
   11874:	          jsr 1362e <getValueType>
   1187a:	          lea 12(sp),sp
   1187e:	          tst.w d0
   11880:	      /-- bne.s 11888 <builtIn_setCharacterAngleOffset+0x2c>
   11882:	      |   moveq #1,d0
   11884:	/-----|-- bra.w 11922 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   11888:	|     \-> moveq #24,d0
   1188a:	|         add.l 20(sp),d0
   1188e:	|         move.l d0,-(sp)
   11890:	|         jsr 13fb2 <trimStack>
   11896:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11898:	|         movea.l 20(sp),a0
   1189c:	|         move.l 24(a0),d0
   118a0:	|         move.l d0,-(sp)
   118a2:	|         pea 7 <_start+0x7>
   118a6:	|         lea 8(sp),a0
   118aa:	|         move.l a0,-(sp)
   118ac:	|         jsr 1362e <getValueType>
   118b2:	|         lea 12(sp),sp
   118b6:	|         tst.w d0
   118b8:	|     /-- bne.s 118be <builtIn_setCharacterAngleOffset+0x62>
   118ba:	|     |   moveq #1,d0
   118bc:	+-----|-- bra.s 11922 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   118be:	|     \-> moveq #24,d0
   118c0:	|         add.l 20(sp),d0
   118c4:	|         move.l d0,-(sp)
   118c6:	|         jsr 13fb2 <trimStack>
   118cc:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   118ce:	|         move.l (sp),d0
   118d0:	|         move.l d0,-(sp)
   118d2:	|         jsr 959a <findPerson>
   118d8:	|         addq.l #4,sp
   118da:	|         move.l d0,8(sp)

	if (thisPerson) {
   118de:	|  /----- beq.s 11908 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   118e0:	|  |      move.l 4(sp),d0
   118e4:	|  |      movea.l 8(sp),a0
   118e8:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   118ec:	|  |      moveq #28,d0
   118ee:	|  |      add.l 20(sp),d0
   118f2:	|  |      pea 1 <_start+0x1>
   118f6:	|  |      pea 1 <_start+0x1>
   118fa:	|  |      move.l d0,-(sp)
   118fc:	|  |      jsr 13f20 <setVariable>
   11902:	|  |      lea 12(sp),sp
   11906:	|  |  /-- bra.s 11920 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11908:	|  \--|-> moveq #28,d0
   1190a:	|     |   add.l 20(sp),d0
   1190e:	|     |   clr.l -(sp)
   11910:	|     |   pea 1 <_start+0x1>
   11914:	|     |   move.l d0,-(sp)
   11916:	|     |   jsr 13f20 <setVariable>
   1191c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11920:	|     \-> moveq #2,d0
}
   11922:	\-------> lea 12(sp),sp
   11926:	          rts

00011928 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   11928:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1192a:	       movea.l 12(sp),a0
   1192e:	       move.l 24(a0),d0
   11932:	       move.l d0,-(sp)
   11934:	       pea 1 <_start+0x1>
   11938:	       move.l sp,d0
   1193a:	       addq.l #8,d0
   1193c:	       move.l d0,-(sp)
   1193e:	       jsr 1362e <getValueType>
   11944:	       lea 12(sp),sp
   11948:	       tst.w d0
   1194a:	   /-- bne.s 11950 <builtIn_transitionMode+0x28>
   1194c:	   |   moveq #1,d0
   1194e:	/--|-- bra.s 11986 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   11950:	|  \-> move.l (sp),d0
   11952:	|      move.l d0,d0
   11954:	|      move.b d0,1adda <fadeMode>
	trimStack (&fun -> stack);
   1195a:	|      moveq #24,d0
   1195c:	|      add.l 12(sp),d0
   11960:	|      move.l d0,-(sp)
   11962:	|      jsr 13fb2 <trimStack>
   11968:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1196a:	|      moveq #28,d0
   1196c:	|      add.l 12(sp),d0
   11970:	|      pea 1 <_start+0x1>
   11974:	|      pea 1 <_start+0x1>
   11978:	|      move.l d0,-(sp)
   1197a:	|      jsr 13f20 <setVariable>
   11980:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11984:	|      moveq #2,d0
}
   11986:	\----> addq.l #4,sp
   11988:	       rts

0001198a <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1198a:	moveq #24,d0
   1198c:	add.l 8(sp),d0
   11990:	move.l d0,-(sp)
   11992:	jsr 13fb2 <trimStack>
   11998:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   1199a:	moveq #28,d0
   1199c:	add.l 8(sp),d0
   119a0:	pea 1 <_start+0x1>
   119a4:	pea 1 <_start+0x1>
   119a8:	move.l d0,-(sp)
   119aa:	jsr 13f20 <setVariable>
   119b0:	lea 12(sp),sp
	return BR_CONTINUE;
   119b4:	moveq #2,d0
}
   119b6:	rts

000119b8 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   119b8:	pea 1819a <line.c.05397aaf+0x20e>
   119be:	jsr 157fa <KPrintF>
   119c4:	addq.l #4,sp
	return BR_CONTINUE;
   119c6:	moveq #2,d0
}
   119c8:	rts

000119ca <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   119ca:	       lea -16(sp),sp
   119ce:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   119d0:	       movea.l 28(sp),a0
   119d4:	       move.l 24(a0),d0
   119d8:	       move.l d0,-(sp)
   119da:	       jsr 13c04 <getTextFromAnyVar>
   119e0:	       addq.l #4,sp
   119e2:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   119e6:	   /-- bne.s 119ee <builtIn_saveCustomData+0x24>
   119e8:	   |   moveq #1,d0
   119ea:	/--|-- bra.w 11aa0 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   119ee:	|  \-> move.l 16(sp),-(sp)
   119f2:	|      jsr 2fe <encodeFilename>
   119f8:	|      addq.l #4,sp
   119fa:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   119fe:	|      move.l 16(sp),8(sp)
   11a04:	|      move.l 1af02 <SysBase>,d0
   11a0a:	|      movea.l d0,a6
   11a0c:	|      movea.l 8(sp),a1
   11a10:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   11a14:	|      move.l 12(sp),-(sp)
   11a18:	|      jsr d250 <failSecurityCheck>
   11a1e:	|      addq.l #4,sp
   11a20:	|      tst.w d0
   11a22:	|  /-- beq.s 11a28 <builtIn_saveCustomData+0x5e>
   11a24:	|  |   moveq #1,d0
   11a26:	+--|-- bra.s 11aa0 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   11a28:	|  \-> moveq #24,d0
   11a2a:	|      add.l 28(sp),d0
   11a2e:	|      move.l d0,-(sp)
   11a30:	|      jsr 13fb2 <trimStack>
   11a36:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   11a38:	|      movea.l 28(sp),a0
   11a3c:	|      movea.l 24(a0),a0
   11a40:	|      move.l (a0),d0
   11a42:	|      moveq #6,d1
   11a44:	|      cmp.l d0,d1
   11a46:	|  /-- beq.s 11a5a <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   11a48:	|  |   pea 181c7 <line.c.05397aaf+0x23b>
   11a4e:	|  |   jsr 157fa <KPrintF>
   11a54:	|  |   addq.l #4,sp
		return BR_ERROR;
   11a56:	|  |   moveq #1,d0
   11a58:	+--|-- bra.s 11aa0 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   11a5a:	|  \-> movea.l 28(sp),a0
   11a5e:	|      move.l 24(a0),d0
   11a62:	|      move.l d0,-(sp)
   11a64:	|      move.l 16(sp),-(sp)
   11a68:	|      jsr cea0 <stackToFile>
   11a6e:	|      addq.l #8,sp
   11a70:	|      tst.w d0
   11a72:	|  /-- bne.s 11a78 <builtIn_saveCustomData+0xae>
   11a74:	|  |   moveq #1,d0
   11a76:	+--|-- bra.s 11aa0 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   11a78:	|  \-> moveq #24,d0
   11a7a:	|      add.l 28(sp),d0
   11a7e:	|      move.l d0,-(sp)
   11a80:	|      jsr 13fb2 <trimStack>
   11a86:	|      addq.l #4,sp
	FreeVec(fileName);
   11a88:	|      move.l 12(sp),4(sp)
   11a8e:	|      move.l 1af02 <SysBase>,d0
   11a94:	|      movea.l d0,a6
   11a96:	|      movea.l 4(sp),a1
   11a9a:	|      jsr -690(a6)
	return BR_CONTINUE;
   11a9e:	|      moveq #2,d0
}
   11aa0:	\----> movea.l (sp)+,a6
   11aa2:	       lea 16(sp),sp
   11aa6:	       rts

00011aa8 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   11aa8:	       lea -28(sp),sp
   11aac:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   11aae:	       movea.l 40(sp),a0
   11ab2:	       move.l 24(a0),d0
   11ab6:	       move.l d0,-(sp)
   11ab8:	       jsr 13c04 <getTextFromAnyVar>
   11abe:	       addq.l #4,sp
   11ac0:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   11ac4:	   /-- bne.s 11acc <builtIn_loadCustomData+0x24>
   11ac6:	   |   moveq #1,d0
   11ac8:	/--|-- bra.w 11bc8 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   11acc:	|  \-> move.l 28(sp),-(sp)
   11ad0:	|      jsr 2fe <encodeFilename>
   11ad6:	|      addq.l #4,sp
   11ad8:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   11adc:	|      move.l 28(sp),20(sp)
   11ae2:	|      move.l 1af02 <SysBase>,d0
   11ae8:	|      movea.l d0,a6
   11aea:	|      movea.l 20(sp),a1
   11aee:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   11af2:	|      move.l 24(sp),-(sp)
   11af6:	|      jsr d250 <failSecurityCheck>
   11afc:	|      addq.l #4,sp
   11afe:	|      tst.w d0
   11b00:	|  /-- beq.s 11b08 <builtIn_loadCustomData+0x60>
   11b02:	|  |   moveq #1,d0
   11b04:	+--|-- bra.w 11bc8 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   11b08:	|  \-> moveq #24,d0
   11b0a:	|      add.l 40(sp),d0
   11b0e:	|      move.l d0,-(sp)
   11b10:	|      jsr 13fb2 <trimStack>
   11b16:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   11b18:	|      moveq #28,d0
   11b1a:	|      add.l 40(sp),d0
   11b1e:	|      move.l d0,-(sp)
   11b20:	|      jsr 1387c <unlinkVar>
   11b26:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   11b28:	|      movea.l 40(sp),a0
   11b2c:	|      moveq #6,d0
   11b2e:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   11b32:	|      moveq #12,d0
   11b34:	|      move.l d0,16(sp)
   11b38:	|      clr.l 12(sp)
   11b3c:	|      move.l 1af02 <SysBase>,d0
   11b42:	|      movea.l d0,a6
   11b44:	|      move.l 16(sp),d0
   11b48:	|      move.l 12(sp),d1
   11b4c:	|      jsr -684(a6)
   11b50:	|      move.l d0,8(sp)
   11b54:	|      move.l 8(sp),d0
   11b58:	|      movea.l 40(sp),a0
   11b5c:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   11b60:	|      movea.l 40(sp),a0
   11b64:	|      move.l 32(a0),d0
   11b68:	|  /-- bne.s 11b6e <builtIn_loadCustomData+0xc6>
   11b6a:	|  |   moveq #1,d0
   11b6c:	+--|-- bra.s 11bc8 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   11b6e:	|  \-> movea.l 40(sp),a0
   11b72:	|      movea.l 32(a0),a0
   11b76:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   11b78:	|      movea.l 40(sp),a0
   11b7c:	|      movea.l 32(a0),a0
   11b80:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   11b84:	|      movea.l 40(sp),a0
   11b88:	|      movea.l 32(a0),a0
   11b8c:	|      moveq #1,d0
   11b8e:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   11b92:	|      movea.l 40(sp),a0
   11b96:	|      move.l 32(a0),d0
   11b9a:	|      move.l d0,-(sp)
   11b9c:	|      move.l 28(sp),-(sp)
   11ba0:	|      jsr c8da <fileToStack>
   11ba6:	|      addq.l #8,sp
   11ba8:	|      tst.w d0
   11baa:	|  /-- bne.s 11bb0 <builtIn_loadCustomData+0x108>
   11bac:	|  |   moveq #1,d0
   11bae:	+--|-- bra.s 11bc8 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   11bb0:	|  \-> move.l 24(sp),4(sp)
   11bb6:	|      move.l 1af02 <SysBase>,d0
   11bbc:	|      movea.l d0,a6
   11bbe:	|      movea.l 4(sp),a1
   11bc2:	|      jsr -690(a6)
	return BR_CONTINUE;
   11bc6:	|      moveq #2,d0
}
   11bc8:	\----> movea.l (sp)+,a6
   11bca:	       lea 28(sp),sp
   11bce:	       rts

00011bd0 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   11bd0:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11bd2:	       movea.l 12(sp),a0
   11bd6:	       move.l 24(a0),d0
   11bda:	       move.l d0,-(sp)
   11bdc:	       pea 1 <_start+0x1>
   11be0:	       move.l sp,d0
   11be2:	       addq.l #8,d0
   11be4:	       move.l d0,-(sp)
   11be6:	       jsr 1362e <getValueType>
   11bec:	       lea 12(sp),sp
   11bf0:	       tst.w d0
   11bf2:	   /-- bne.s 11bf8 <builtIn_setCustomEncoding+0x28>
   11bf4:	   |   moveq #1,d0
   11bf6:	/--|-- bra.s 11c2e <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   11bf8:	|  \-> move.l (sp),d0
   11bfa:	|      move.l d0,d0
   11bfc:	|      move.w d0,1b012 <saveEncoding>
	trimStack (&fun -> stack);
   11c02:	|      moveq #24,d0
   11c04:	|      add.l 12(sp),d0
   11c08:	|      move.l d0,-(sp)
   11c0a:	|      jsr 13fb2 <trimStack>
   11c10:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11c12:	|      moveq #28,d0
   11c14:	|      add.l 12(sp),d0
   11c18:	|      pea 1 <_start+0x1>
   11c1c:	|      pea 1 <_start+0x1>
   11c20:	|      move.l d0,-(sp)
   11c22:	|      jsr 13f20 <setVariable>
   11c28:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11c2c:	|      moveq #2,d0
}
   11c2e:	\----> addq.l #4,sp
   11c30:	       rts

00011c32 <builtIn_freeSound>:

builtIn(freeSound)
{
   11c32:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c34:	       movea.l 12(sp),a0
   11c38:	       move.l 24(a0),d0
   11c3c:	       move.l d0,-(sp)
   11c3e:	       pea 5 <_start+0x5>
   11c42:	       move.l sp,d0
   11c44:	       addq.l #8,d0
   11c46:	       move.l d0,-(sp)
   11c48:	       jsr 1362e <getValueType>
   11c4e:	       lea 12(sp),sp
   11c52:	       tst.w d0
   11c54:	   /-- bne.s 11c5a <builtIn_freeSound+0x28>
   11c56:	   |   moveq #1,d0
   11c58:	/--|-- bra.s 11c78 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   11c5a:	|  \-> moveq #24,d0
   11c5c:	|      add.l 12(sp),d0
   11c60:	|      move.l d0,-(sp)
   11c62:	|      jsr 13fb2 <trimStack>
   11c68:	|      addq.l #4,sp
	huntKillFreeSound (v);
   11c6a:	|      move.l (sp),d0
   11c6c:	|      move.l d0,-(sp)
   11c6e:	|      jsr c09c <huntKillFreeSound>
   11c74:	|      addq.l #4,sp
	return BR_CONTINUE;
   11c76:	|      moveq #2,d0
}
   11c78:	\----> addq.l #4,sp
   11c7a:	       rts

00011c7c <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   11c7c:	       lea -12(sp),sp
   11c80:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c82:	       movea.l 24(sp),a0
   11c86:	       move.l 24(a0),d0
   11c8a:	       move.l d0,-(sp)
   11c8c:	       pea 1 <_start+0x1>
   11c90:	       moveq #16,d0
   11c92:	       add.l sp,d0
   11c94:	       move.l d0,-(sp)
   11c96:	       jsr 1362e <getValueType>
   11c9c:	       lea 12(sp),sp
   11ca0:	       tst.w d0
   11ca2:	   /-- bne.s 11caa <builtIn_parallaxAdd+0x2e>
   11ca4:	   |   moveq #1,d0
   11ca6:	/--|-- bra.w 11d7e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11caa:	|  \-> moveq #24,d0
   11cac:	|      add.l 24(sp),d0
   11cb0:	|      move.l d0,-(sp)
   11cb2:	|      jsr 13fb2 <trimStack>
   11cb8:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cba:	|      movea.l 24(sp),a0
   11cbe:	|      move.l 24(a0),d0
   11cc2:	|      move.l d0,-(sp)
   11cc4:	|      pea 1 <_start+0x1>
   11cc8:	|      moveq #20,d0
   11cca:	|      add.l sp,d0
   11ccc:	|      move.l d0,-(sp)
   11cce:	|      jsr 1362e <getValueType>
   11cd4:	|      lea 12(sp),sp
   11cd8:	|      tst.w d0
   11cda:	|  /-- bne.s 11ce2 <builtIn_parallaxAdd+0x66>
   11cdc:	|  |   moveq #1,d0
   11cde:	+--|-- bra.w 11d7e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11ce2:	|  \-> moveq #24,d0
   11ce4:	|      add.l 24(sp),d0
   11ce8:	|      move.l d0,-(sp)
   11cea:	|      jsr 13fb2 <trimStack>
   11cf0:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11cf2:	|      movea.l 24(sp),a0
   11cf6:	|      move.l 24(a0),d0
   11cfa:	|      move.l d0,-(sp)
   11cfc:	|      pea 5 <_start+0x5>
   11d00:	|      lea 12(sp),a0
   11d04:	|      move.l a0,-(sp)
   11d06:	|      jsr 1362e <getValueType>
   11d0c:	|      lea 12(sp),sp
   11d10:	|      tst.w d0
   11d12:	|  /-- bne.s 11d18 <builtIn_parallaxAdd+0x9c>
   11d14:	|  |   moveq #1,d0
   11d16:	+--|-- bra.s 11d7e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11d18:	|  \-> moveq #24,d0
   11d1a:	|      add.l 24(sp),d0
   11d1e:	|      move.l d0,-(sp)
   11d20:	|      jsr 13fb2 <trimStack>
   11d26:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   11d28:	|      move.l 8(sp),d0
   11d2c:	|      move.l d0,d0
   11d2e:	|      moveq #0,d2
   11d30:	|      move.w d0,d2
   11d32:	|      move.l 12(sp),d0
   11d36:	|      move.l d0,d0
   11d38:	|      moveq #0,d1
   11d3a:	|      move.w d0,d1
   11d3c:	|      move.l 4(sp),d0
   11d40:	|      move.l d0,d0
   11d42:	|      move.w d0,d0
   11d44:	|      andi.l #65535,d0
   11d4a:	|      move.l d2,-(sp)
   11d4c:	|      move.l d1,-(sp)
   11d4e:	|      move.l d0,-(sp)
   11d50:	|      jsr c2b8 <loadParallax>
   11d56:	|      lea 12(sp),sp
   11d5a:	|      tst.w d0
   11d5c:	|  /-- bne.s 11d62 <builtIn_parallaxAdd+0xe6>
   11d5e:	|  |   moveq #1,d0
   11d60:	+--|-- bra.s 11d7e <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   11d62:	|  \-> moveq #28,d0
   11d64:	|      add.l 24(sp),d0
   11d68:	|      pea 1 <_start+0x1>
   11d6c:	|      pea 1 <_start+0x1>
   11d70:	|      move.l d0,-(sp)
   11d72:	|      jsr 13f20 <setVariable>
   11d78:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   11d7c:	|      moveq #2,d0
}
   11d7e:	\----> move.l (sp)+,d2
   11d80:	       lea 12(sp),sp
   11d84:	       rts

00011d86 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   11d86:	jsr c1f0 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   11d8c:	moveq #28,d0
   11d8e:	add.l 8(sp),d0
   11d92:	pea 1 <_start+0x1>
   11d96:	pea 1 <_start+0x1>
   11d9a:	move.l d0,-(sp)
   11d9c:	jsr 13f20 <setVariable>
   11da2:	lea 12(sp),sp
	return BR_CONTINUE;
   11da6:	moveq #2,d0
}
   11da8:	rts

00011daa <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   11daa:	pea 181e5 <line.c.05397aaf+0x259>
   11db0:	jsr 157fa <KPrintF>
   11db6:	addq.l #4,sp

	return BR_CONTINUE;
   11db8:	moveq #2,d0
}
   11dba:	rts

00011dbc <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   11dbc:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   11dbe:	             movea.l 16(sp),a0
   11dc2:	             movea.l 24(a0),a0
   11dc6:	             move.l (a0),d0
   11dc8:	             moveq #1,d1
   11dca:	             cmp.l d0,d1
   11dcc:	      /----- beq.s 11e14 <builtIn_makeFastArray+0x58>
   11dce:	      |      moveq #6,d1
   11dd0:	      |      cmp.l d0,d1
   11dd2:	/-----|----- bne.s 11e52 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   11dd4:	|     |      movea.l 16(sp),a0
   11dd8:	|     |      movea.l 24(a0),a0
   11ddc:	|     |      move.l 4(a0),d1
   11de0:	|     |      moveq #28,d0
   11de2:	|     |      add.l 16(sp),d0
   11de6:	|     |      move.l d1,-(sp)
   11de8:	|     |      move.l d0,-(sp)
   11dea:	|     |      jsr 136e0 <makeFastArrayFromStack>
   11df0:	|     |      addq.l #8,sp
   11df2:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   11df6:	|     |      moveq #24,d0
   11df8:	|     |      add.l 16(sp),d0
   11dfc:	|     |      move.l d0,-(sp)
   11dfe:	|     |      jsr 13fb2 <trimStack>
   11e04:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   11e06:	|     |      tst.w 6(sp)
   11e0a:	|     |  /-- beq.s 11e10 <builtIn_makeFastArray+0x54>
   11e0c:	|     |  |   moveq #2,d0
   11e0e:	|  /--|--|-- bra.s 11e64 <builtIn_makeFastArray+0xa8>
   11e10:	|  |  |  \-> moveq #1,d0
   11e12:	|  +--|----- bra.s 11e64 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   11e14:	|  |  \----> movea.l 16(sp),a0
   11e18:	|  |         movea.l 24(a0),a0
   11e1c:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   11e22:	|  |         moveq #24,d0
   11e24:	|  |         add.l 16(sp),d0
   11e28:	|  |         move.l d0,-(sp)
   11e2a:	|  |         jsr 13fb2 <trimStack>
   11e30:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   11e32:	|  |         moveq #28,d0
   11e34:	|  |         add.l 16(sp),d0
   11e38:	|  |         move.l 2(sp),-(sp)
   11e3c:	|  |         move.l d0,-(sp)
   11e3e:	|  |         jsr 1374a <makeFastArraySize>
   11e44:	|  |         addq.l #8,sp
   11e46:	|  |         tst.w d0
   11e48:	|  |     /-- beq.s 11e4e <builtIn_makeFastArray+0x92>
   11e4a:	|  |     |   moveq #2,d0
   11e4c:	|  +-----|-- bra.s 11e64 <builtIn_makeFastArray+0xa8>
   11e4e:	|  |     \-> moveq #1,d0
   11e50:	|  +-------- bra.s 11e64 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   11e52:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   11e54:	   |         pea 1820e <graphics.c.1c13408a+0x26>
   11e5a:	   |         jsr 157fa <KPrintF>
   11e60:	   |         addq.l #4,sp
	return BR_ERROR;
   11e62:	   |         moveq #1,d0
}
   11e64:	   \-------> addq.l #8,sp
   11e66:	             rts

00011e68 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   11e68:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e6a:	          movea.l 16(sp),a0
   11e6e:	          move.l 24(a0),d0
   11e72:	          move.l d0,-(sp)
   11e74:	          pea 7 <_start+0x7>
   11e78:	          move.l sp,d0
   11e7a:	          addq.l #8,d0
   11e7c:	          move.l d0,-(sp)
   11e7e:	          jsr 1362e <getValueType>
   11e84:	          lea 12(sp),sp
   11e88:	          tst.w d0
   11e8a:	      /-- bne.s 11e90 <builtIn_getCharacterScale+0x28>
   11e8c:	      |   moveq #1,d0
   11e8e:	/-----|-- bra.s 11f0a <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   11e90:	|     \-> moveq #24,d0
   11e92:	|         add.l 16(sp),d0
   11e96:	|         move.l d0,-(sp)
   11e98:	|         jsr 13fb2 <trimStack>
   11e9e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11ea0:	|         move.l (sp),d0
   11ea2:	|         move.l d0,-(sp)
   11ea4:	|         jsr 959a <findPerson>
   11eaa:	|         addq.l #4,sp
   11eac:	|         move.l d0,4(sp)
	if (pers) {
   11eb0:	|  /----- beq.s 11ef0 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   11eb2:	|  |      movea.l 4(sp),a0
   11eb6:	|  |      move.l 20(a0),d0
   11eba:	|  |      move.l #1120403456,-(sp)
   11ec0:	|  |      move.l d0,-(sp)
   11ec2:	|  |      jsr 15ce8 <__mulsf3>
   11ec8:	|  |      addq.l #8,sp
   11eca:	|  |      move.l d0,-(sp)
   11ecc:	|  |      jsr 15bce <__fixsfsi>
   11ed2:	|  |      addq.l #4,sp
   11ed4:	|  |      move.l d0,d1
   11ed6:	|  |      moveq #28,d0
   11ed8:	|  |      add.l 16(sp),d0
   11edc:	|  |      move.l d1,-(sp)
   11ede:	|  |      pea 1 <_start+0x1>
   11ee2:	|  |      move.l d0,-(sp)
   11ee4:	|  |      jsr 13f20 <setVariable>
   11eea:	|  |      lea 12(sp),sp
   11eee:	|  |  /-- bra.s 11f08 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11ef0:	|  \--|-> moveq #28,d0
   11ef2:	|     |   add.l 16(sp),d0
   11ef6:	|     |   clr.l -(sp)
   11ef8:	|     |   pea 1 <_start+0x1>
   11efc:	|     |   move.l d0,-(sp)
   11efe:	|     |   jsr 13f20 <setVariable>
   11f04:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11f08:	|     \-> moveq #2,d0
}
   11f0a:	\-------> addq.l #8,sp
   11f0c:	          rts

00011f0e <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   11f0e:	move.l 1b036 <gameSettings>,d0
   11f14:	move.l d0,d1
   11f16:	moveq #28,d0
   11f18:	add.l 8(sp),d0
   11f1c:	move.l d1,-(sp)
   11f1e:	pea 1 <_start+0x1>
   11f22:	move.l d0,-(sp)
   11f24:	jsr 13f20 <setVariable>
   11f2a:	lea 12(sp),sp
	return BR_CONTINUE;
   11f2e:	moveq #2,d0
}
   11f30:	rts

00011f32 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   11f32:	moveq #24,d0
   11f34:	add.l 8(sp),d0
   11f38:	move.l d0,-(sp)
   11f3a:	jsr 13fb2 <trimStack>
   11f40:	addq.l #4,sp
	trimStack (&fun -> stack);
   11f42:	moveq #24,d0
   11f44:	add.l 8(sp),d0
   11f48:	move.l d0,-(sp)
   11f4a:	jsr 13fb2 <trimStack>
   11f50:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   11f52:	moveq #28,d0
   11f54:	add.l 8(sp),d0
   11f58:	clr.l -(sp)
   11f5a:	pea 1 <_start+0x1>
   11f5e:	move.l d0,-(sp)
   11f60:	jsr 13f20 <setVariable>
   11f66:	lea 12(sp),sp

	return BR_CONTINUE;
   11f6a:	moveq #2,d0

}
   11f6c:	rts

00011f6e <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   11f6e:	move.l 1a880 <lastFramesPerSecond>,d1
   11f74:	moveq #28,d0
   11f76:	add.l 8(sp),d0
   11f7a:	move.l d1,-(sp)
   11f7c:	pea 1 <_start+0x1>
   11f80:	move.l d0,-(sp)
   11f82:	jsr 13f20 <setVariable>
   11f88:	lea 12(sp),sp
	return BR_CONTINUE;
   11f8c:	moveq #2,d0
}
   11f8e:	rts

00011f90 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   11f90:	moveq #2,d0
}
   11f92:	rts

00011f94 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   11f94:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f98:	          movea.l 60(sp),a0
   11f9c:	          move.l 24(a0),d0
   11fa0:	          move.l d0,-(sp)
   11fa2:	          pea 1 <_start+0x1>
   11fa6:	          pea 1ae16 <thumbHeight>
   11fac:	          jsr 1362e <getValueType>
   11fb2:	          lea 12(sp),sp
   11fb6:	          tst.w d0
   11fb8:	      /-- bne.s 11fc0 <builtIn_setThumbnailSize+0x2c>
   11fba:	      |   moveq #1,d0
   11fbc:	/-----|-- bra.w 1207c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   11fc0:	|     \-> moveq #24,d0
   11fc2:	|         add.l 60(sp),d0
   11fc6:	|         move.l d0,-(sp)
   11fc8:	|         jsr 13fb2 <trimStack>
   11fce:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fd0:	|         movea.l 60(sp),a0
   11fd4:	|         move.l 24(a0),d0
   11fd8:	|         move.l d0,-(sp)
   11fda:	|         pea 1 <_start+0x1>
   11fde:	|         pea 1ae12 <thumbWidth>
   11fe4:	|         jsr 1362e <getValueType>
   11fea:	|         lea 12(sp),sp
   11fee:	|         tst.w d0
   11ff0:	|     /-- bne.s 11ff8 <builtIn_setThumbnailSize+0x64>
   11ff2:	|     |   moveq #1,d0
   11ff4:	+-----|-- bra.w 1207c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   11ff8:	|     \-> moveq #24,d0
   11ffa:	|         add.l 60(sp),d0
   11ffe:	|         move.l d0,-(sp)
   12000:	|         jsr 13fb2 <trimStack>
   12006:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   12008:	|         move.l 1ae12 <thumbWidth>,d0
   1200e:	|     /-- bmi.s 1203c <builtIn_setThumbnailSize+0xa8>
   12010:	|     |   move.l 1ae16 <thumbHeight>,d0
   12016:	|     +-- bmi.s 1203c <builtIn_setThumbnailSize+0xa8>
   12018:	|     |   move.l 1ae12 <thumbWidth>,d0
   1201e:	|     |   move.l d0,d1
   12020:	|     |   move.l 1ae56 <winWidth>,d0
   12026:	|     |   cmp.l d1,d0
   12028:	|     +-- bcs.s 1203c <builtIn_setThumbnailSize+0xa8>
   1202a:	|     |   move.l 1ae16 <thumbHeight>,d0
   12030:	|     |   move.l d0,d1
   12032:	|     |   move.l 1ae5a <winHeight>,d0
   12038:	|     |   cmp.l d1,d0
   1203a:	|  /--|-- bcc.s 1207a <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   1203c:	|  |  \-> move.l 1ae16 <thumbHeight>,d1
   12042:	|  |      move.l 1ae12 <thumbWidth>,d0
   12048:	|  |      move.l d1,-(sp)
   1204a:	|  |      move.l d0,-(sp)
   1204c:	|  |      pea 18235 <graphics.c.1c13408a+0x4d>
   12052:	|  |      lea 14(sp),a0
   12056:	|  |      move.l a0,-(sp)
   12058:	|  |      jsr 12e38 <sprintf>
   1205e:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   12062:	|  |      lea 2(sp),a0
   12066:	|  |      move.l a0,-(sp)
   12068:	|  |      pea 1823d <graphics.c.1c13408a+0x55>
   1206e:	|  |      jsr 157fa <KPrintF>
   12074:	|  |      addq.l #8,sp
		return BR_ERROR;
   12076:	|  |      moveq #1,d0
   12078:	+--|----- bra.s 1207c <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   1207a:	|  \----> moveq #2,d0
}
   1207c:	\-------> lea 52(sp),sp
   12080:	          rts

00012082 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   12082:	       lea -12(sp),sp
   12086:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12088:	       movea.l 24(sp),a0
   1208c:	       move.l 24(a0),d0
   12090:	       move.l d0,-(sp)
   12092:	       pea 1 <_start+0x1>
   12096:	       lea 12(sp),a0
   1209a:	       move.l a0,-(sp)
   1209c:	       jsr 1362e <getValueType>
   120a2:	       lea 12(sp),sp
   120a6:	       tst.w d0
   120a8:	   /-- bne.s 120b0 <builtIn_hasFlag+0x2e>
   120aa:	   |   moveq #1,d0
   120ac:	/--|-- bra.w 12140 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   120b0:	|  \-> moveq #24,d0
   120b2:	|      add.l 24(sp),d0
   120b6:	|      move.l d0,-(sp)
   120b8:	|      jsr 13fb2 <trimStack>
   120be:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   120c0:	|      movea.l 24(sp),a0
   120c4:	|      move.l 24(a0),d0
   120c8:	|      move.l d0,-(sp)
   120ca:	|      pea 7 <_start+0x7>
   120ce:	|      moveq #16,d0
   120d0:	|      add.l sp,d0
   120d2:	|      move.l d0,-(sp)
   120d4:	|      jsr 1362e <getValueType>
   120da:	|      lea 12(sp),sp
   120de:	|      tst.w d0
   120e0:	|  /-- bne.s 120e6 <builtIn_hasFlag+0x64>
   120e2:	|  |   moveq #1,d0
   120e4:	+--|-- bra.s 12140 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   120e6:	|  \-> moveq #24,d0
   120e8:	|      add.l 24(sp),d0
   120ec:	|      move.l d0,-(sp)
   120ee:	|      jsr 13fb2 <trimStack>
   120f4:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   120f6:	|      move.l 8(sp),d0
   120fa:	|      move.l d0,-(sp)
   120fc:	|      jsr c464 <findObjectType>
   12102:	|      addq.l #4,sp
   12104:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   12108:	|  /-- bne.s 1210e <builtIn_hasFlag+0x8c>
   1210a:	|  |   moveq #1,d0
   1210c:	+--|-- bra.s 12140 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   1210e:	|  \-> movea.l 12(sp),a0
   12112:	|      move.w 36(a0),d0
   12116:	|      moveq #0,d2
   12118:	|      move.w d0,d2
   1211a:	|      move.l 4(sp),d1
   1211e:	|      moveq #1,d0
   12120:	|      lsl.l d1,d0
   12122:	|      move.l d2,d1
   12124:	|      and.l d0,d1
   12126:	|      moveq #28,d0
   12128:	|      add.l 24(sp),d0
   1212c:	|      move.l d1,-(sp)
   1212e:	|      pea 1 <_start+0x1>
   12132:	|      move.l d0,-(sp)
   12134:	|      jsr 13f20 <setVariable>
   1213a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1213e:	|      moveq #2,d0
}
   12140:	\----> move.l (sp)+,d2
   12142:	       lea 12(sp),sp
   12146:	       rts

00012148 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   12148:	       jsr c452 <snapshot>
   1214e:	       tst.w d0
   12150:	/----- beq.s 12156 <builtIn_snapshotGrab+0xe>
   12152:	|      moveq #2,d0
   12154:	|  /-- bra.s 12158 <builtIn_snapshotGrab+0x10>
   12156:	\--|-> moveq #1,d0
}
   12158:	   \-> rts

0001215a <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1215a:	jsr c2fe <nosnapshot>
	return BR_CONTINUE;
   12160:	moveq #2,d0
}
   12162:	rts

00012164 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   12164:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   12166:	move.w 1a75c <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1216e:	movea.l 12(sp),a0
   12172:	move.l 24(a0),d0
   12176:	move.l d0,-(sp)
   12178:	jsr 13b6e <getBoolean>
   1217e:	addq.l #4,sp
   12180:	move.w d0,1a75c <allowAnyFilename>
	trimStack (&fun -> stack);
   12186:	moveq #24,d0
   12188:	add.l 12(sp),d0
   1218c:	move.l d0,-(sp)
   1218e:	jsr 13fb2 <trimStack>
   12194:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   12196:	movea.w 2(sp),a0
   1219a:	moveq #28,d0
   1219c:	add.l 12(sp),d0
   121a0:	move.l a0,-(sp)
   121a2:	pea 1 <_start+0x1>
   121a6:	move.l d0,-(sp)
   121a8:	jsr 13f20 <setVariable>
   121ae:	lea 12(sp),sp
	return BR_CONTINUE;
   121b2:	moveq #2,d0
}
   121b4:	addq.l #4,sp
   121b6:	rts

000121b8 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   121b8:	moveq #24,d0
   121ba:	add.l 8(sp),d0
   121be:	move.l d0,-(sp)
   121c0:	jsr 13fb2 <trimStack>
   121c6:	addq.l #4,sp
	trimStack (&fun -> stack);
   121c8:	moveq #24,d0
   121ca:	add.l 8(sp),d0
   121ce:	move.l d0,-(sp)
   121d0:	jsr 13fb2 <trimStack>
   121d6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   121d8:	moveq #28,d0
   121da:	add.l 8(sp),d0
   121de:	clr.l -(sp)
   121e0:	pea 1 <_start+0x1>
   121e4:	move.l d0,-(sp)
   121e6:	jsr 13f20 <setVariable>
   121ec:	lea 12(sp),sp

	return BR_CONTINUE;
   121f0:	moveq #2,d0
}
   121f2:	rts

000121f4 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   121f4:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   121f6:	movea.l 12(sp),a0
   121fa:	move.l 24(a0),d0
   121fe:	move.l d0,-(sp)
   12200:	jsr 13c04 <getTextFromAnyVar>
   12206:	addq.l #4,sp
   12208:	move.l d0,(sp)
	trimStack (&fun -> stack);
   1220a:	moveq #24,d0
   1220c:	add.l 12(sp),d0
   12210:	move.l d0,-(sp)
   12212:	jsr 13fb2 <trimStack>
   12218:	addq.l #4,sp
	KPrintF (mess);
   1221a:	move.l (sp),-(sp)
   1221c:	jsr 157fa <KPrintF>
   12222:	addq.l #4,sp
	return BR_ERROR;
   12224:	moveq #1,d0
}
   12226:	addq.l #4,sp
   12228:	rts

0001222a <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1222a:	moveq #24,d0
   1222c:	add.l 8(sp),d0
   12230:	move.l d0,-(sp)
   12232:	jsr 13fb2 <trimStack>
   12238:	addq.l #4,sp
	trimStack (&fun -> stack);
   1223a:	moveq #24,d0
   1223c:	add.l 8(sp),d0
   12240:	move.l d0,-(sp)
   12242:	jsr 13fb2 <trimStack>
   12248:	addq.l #4,sp
	trimStack (&fun -> stack);
   1224a:	moveq #24,d0
   1224c:	add.l 8(sp),d0
   12250:	move.l d0,-(sp)
   12252:	jsr 13fb2 <trimStack>
   12258:	addq.l #4,sp
	trimStack (&fun -> stack);
   1225a:	moveq #24,d0
   1225c:	add.l 8(sp),d0
   12260:	move.l d0,-(sp)
   12262:	jsr 13fb2 <trimStack>
   12268:	addq.l #4,sp

	return BR_CONTINUE;
   1226a:	moveq #2,d0
}
   1226c:	rts

0001226e <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1226e:	moveq #24,d0
   12270:	add.l 8(sp),d0
   12274:	move.l d0,-(sp)
   12276:	jsr 13fb2 <trimStack>
   1227c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1227e:	moveq #24,d0
   12280:	add.l 8(sp),d0
   12284:	move.l d0,-(sp)
   12286:	jsr 13fb2 <trimStack>
   1228c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1228e:	moveq #24,d0
   12290:	add.l 8(sp),d0
   12294:	move.l d0,-(sp)
   12296:	jsr 13fb2 <trimStack>
   1229c:	addq.l #4,sp

	return BR_CONTINUE;
   1229e:	moveq #2,d0

}
   122a0:	rts

000122a2 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   122a2:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   122a4:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   122aa:	sne d0
   122ac:	neg.b d0
   122ae:	moveq #0,d1
   122b0:	move.b d0,d1
   122b2:	moveq #28,d0
   122b4:	add.l 12(sp),d0
   122b8:	move.l d1,-(sp)
   122ba:	pea 1 <_start+0x1>
   122be:	move.l d0,-(sp)
   122c0:	jsr 13f20 <setVariable>
   122c6:	lea 12(sp),sp
	return BR_CONTINUE;
   122ca:	moveq #2,d0
}
   122cc:	addq.l #4,sp
   122ce:	rts

000122d0 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   122d0:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   122d2:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   122d8:	pea 18254 <graphics.c.1c13408a+0x6c>
   122de:	jsr 157fa <KPrintF>
   122e4:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   122e6:	tst.w 2(sp)
   122ea:	sne d0
   122ec:	neg.b d0
   122ee:	moveq #0,d1
   122f0:	move.b d0,d1
   122f2:	moveq #28,d0
   122f4:	add.l 12(sp),d0
   122f8:	move.l d1,-(sp)
   122fa:	pea 1 <_start+0x1>
   122fe:	move.l d0,-(sp)
   12300:	jsr 13f20 <setVariable>
   12306:	lea 12(sp),sp
	return BR_CONTINUE;
   1230a:	moveq #2,d0
}
   1230c:	addq.l #4,sp
   1230e:	rts

00012310 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   12310:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   12314:	             move.l 104(sp),d0
   12318:	             cmpi.l #166,d0
   1231e:	/----------- bhi.w 12400 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   12322:	|            move.l 104(sp),d0
   12326:	|            add.l d0,d0
   12328:	|            movea.l d0,a1
   1232a:	|            adda.l d0,a1
   1232c:	|            lea 1a8a2 <paramNum>,a0
   12332:	|            move.l (0,a1,a0.l),d0
   12336:	|            moveq #-1,d1
   12338:	|            cmp.l d0,d1
   1233a:	|  /-------- beq.w 123c8 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   1233e:	|  |         move.l 104(sp),d0
   12342:	|  |         add.l d0,d0
   12344:	|  |         movea.l d0,a1
   12346:	|  |         adda.l d0,a1
   12348:	|  |         lea 1a8a2 <paramNum>,a0
   1234e:	|  |         move.l (0,a1,a0.l),d0
   12352:	|  |         cmp.l 108(sp),d0
   12356:	|  +-------- beq.s 123c8 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   12358:	|  |         move.l 104(sp),d0
   1235c:	|  |         add.l d0,d0
   1235e:	|  |         movea.l d0,a1
   12360:	|  |         adda.l d0,a1
   12362:	|  |         lea 1a8a2 <paramNum>,a0
   12368:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1236c:	|  |         moveq #1,d1
   1236e:	|  |         cmp.l d0,d1
   12370:	|  |  /----- bne.s 1237a <callBuiltIn+0x6a>
   12372:	|  |  |      move.l #94053,d0
   12378:	|  |  |  /-- bra.s 12380 <callBuiltIn+0x70>
   1237a:	|  |  \--|-> move.l #98954,d0
   12380:	|  |     \-> move.l 104(sp),d1
   12384:	|  |         add.l d1,d1
   12386:	|  |         movea.l d1,a1
   12388:	|  |         adda.l d1,a1
   1238a:	|  |         lea 1a8a2 <paramNum>,a0
   12390:	|  |         move.l (0,a1,a0.l),d1
   12394:	|  |         move.l d0,-(sp)
   12396:	|  |         move.l d1,-(sp)
   12398:	|  |         pea 1828c <graphics.c.1c13408a+0xa4>
   1239e:	|  |         lea 12(sp),a0
   123a2:	|  |         move.l a0,-(sp)
   123a4:	|  |         jsr 12e38 <sprintf>
   123aa:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   123ae:	|  |         movea.l sp,a0
   123b0:	|  |         move.l a0,-(sp)
   123b2:	|  |         jsr b8 <copyString>
   123b8:	|  |         addq.l #4,sp
   123ba:	|  |         move.l d0,-(sp)
   123bc:	|  |         jsr 157fa <KPrintF>
   123c2:	|  |         addq.l #4,sp
				return BR_ERROR;
   123c4:	|  |         moveq #1,d0
   123c6:	|  |     /-- bra.s 12410 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   123c8:	|  \-----|-> move.l 104(sp),d0
   123cc:	|        |   add.l d0,d0
   123ce:	|        |   movea.l d0,a1
   123d0:	|        |   adda.l d0,a1
   123d2:	|        |   lea 1ab3e <builtInFunctionArray>,a0
   123d8:	|        |   move.l (0,a1,a0.l),d0
   123dc:	+--------|-- beq.s 12400 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   123de:	|        |   move.l 104(sp),d0
   123e2:	|        |   add.l d0,d0
   123e4:	|        |   movea.l d0,a1
   123e6:	|        |   adda.l d0,a1
   123e8:	|        |   lea 1ab3e <builtInFunctionArray>,a0
   123ee:	|        |   movea.l (0,a1,a0.l),a0
   123f2:	|        |   move.l 112(sp),-(sp)
   123f6:	|        |   move.l 112(sp),-(sp)
   123fa:	|        |   jsr (a0)
   123fc:	|        |   addq.l #8,sp
   123fe:	|        +-- bra.s 12410 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   12400:	\--------|-> pea 182b7 <graphics.c.1c13408a+0xcf>
   12406:	         |   jsr 157fa <KPrintF>
   1240c:	         |   addq.l #4,sp
	return BR_ERROR;
   1240e:	         |   moveq #1,d0
}
   12410:	         \-> lea 100(sp),sp
   12414:	             rts

00012416 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   12416:	          subq.l #8,sp
	int indexNum = -1;
   12418:	          moveq #-1,d0
   1241a:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1241e:	          clr.l (sp)
   12420:	   /----- bra.s 12446 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   12422:	/--|----> move.l 1b02e <languageTable>,d1
   12428:	|  |      move.l (sp),d0
   1242a:	|  |      add.l d0,d0
   1242c:	|  |      add.l d0,d0
   1242e:	|  |      movea.l d1,a0
   12430:	|  |      adda.l d0,a0
   12432:	|  |      move.l (a0),d0
   12434:	|  |      move.l d0,d1
   12436:	|  |      move.l 1b036 <gameSettings>,d0
   1243c:	|  |      cmp.l d1,d0
   1243e:	|  |  /-- bne.s 12444 <getLanguageForFileB+0x2e>
   12440:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12444:	|  |  \-> addq.l #1,(sp)
   12446:	|  \----> move.l 1b03a <gameSettings+0x4>,d0
   1244c:	|         cmp.l (sp),d0
   1244e:	\-------- bcc.s 12422 <getLanguageForFileB+0xc>
	}

	return indexNum;
   12450:	          move.l 4(sp),d0
}
   12454:	          addq.l #8,sp
   12456:	          rts

00012458 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   12458:	          lea -20(sp),sp
   1245c:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1245e:	          move.l 28(sp),-(sp)
   12462:	          jsr 12b1a <strlen>
   12468:	          addq.l #4,sp
   1246a:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1246e:	          moveq #4,d0
   12470:	          cmp.l 12(sp),d0
   12474:	      /-- bge.s 12498 <getPrefsFilename+0x40>
   12476:	      |   move.l 12(sp),d0
   1247a:	      |   subq.l #4,d0
   1247c:	      |   movea.l 28(sp),a0
   12480:	      |   adda.l d0,a0
   12482:	      |   move.b (a0),d0
   12484:	      |   cmpi.b #46,d0
   12488:	      +-- bne.s 12498 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   1248a:	      |   move.l 12(sp),d0
   1248e:	      |   subq.l #4,d0
   12490:	      |   movea.l 28(sp),a0
   12494:	      |   adda.l d0,a0
   12496:	      |   clr.b (a0)
	}

	char * f = filename;
   12498:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1249e:	          clr.l 20(sp)
   124a2:	   /----- bra.s 124ca <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   124a4:	/--|----> move.l 20(sp),d0
   124a8:	|  |      movea.l 28(sp),a0
   124ac:	|  |      adda.l d0,a0
   124ae:	|  |      move.b (a0),d0
   124b0:	|  |      cmpi.b #47,d0
   124b4:	|  |  /-- bne.s 124c6 <getPrefsFilename+0x6e>
   124b6:	|  |  |   move.l 20(sp),d0
   124ba:	|  |  |   addq.l #1,d0
   124bc:	|  |  |   move.l 28(sp),d1
   124c0:	|  |  |   add.l d0,d1
   124c2:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   124c6:	|  |  \-> addq.l #1,20(sp)
   124ca:	|  \----> move.l 20(sp),d0
   124ce:	|         cmp.l 12(sp),d0
   124d2:	\-------- blt.s 124a4 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   124d4:	          pea 182e2 <graphics.c.1c13408a+0xfa>
   124da:	          move.l 20(sp),-(sp)
   124de:	          jsr 12b5a <joinStrings>
   124e4:	          addq.l #8,sp
   124e6:	          move.l d0,8(sp)

	FreeVec(filename);
   124ea:	          move.l 28(sp),4(sp)
   124f0:	          move.l 1af02 <SysBase>,d0
   124f6:	          movea.l d0,a6
   124f8:	          movea.l 4(sp),a1
   124fc:	          jsr -690(a6)
	filename = NULL;
   12500:	          clr.l 28(sp)
	return joined;
   12504:	          move.l 8(sp),d0
}
   12508:	          movea.l (sp)+,a6
   1250a:	          lea 20(sp),sp
   1250e:	          rts

00012510 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   12510:	             lea -28(sp),sp
   12514:	             move.l a6,-(sp)
   12516:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   12518:	             move.l 1b03a <gameSettings+0x4>,d0
   1251e:	             move.l d0,d1
   12520:	             addq.l #1,d1
   12522:	             move.l d1,28(sp)
   12526:	             clr.l 24(sp)
   1252a:	             move.l 1af02 <SysBase>,d0
   12530:	             movea.l d0,a6
   12532:	             move.l 28(sp),d0
   12536:	             move.l 24(sp),d1
   1253a:	             jsr -684(a6)
   1253e:	             move.l d0,20(sp)
   12542:	             move.l 20(sp),d0
   12546:	             move.l d0,1b02e <languageTable>
    if( languageTable == 0) {
   1254c:	             move.l 1b02e <languageTable>,d0
   12552:	         /-- bne.s 12562 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   12554:	         |   pea 182e7 <graphics.c.1c13408a+0xff>
   1255a:	         |   jsr 157fa <KPrintF>
   12560:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   12562:	         \-> move.l 1b03a <gameSettings+0x4>,d0
   12568:	             move.l d0,d1
   1256a:	             addq.l #1,d1
   1256c:	             move.l d1,16(sp)
   12570:	             clr.l 12(sp)
   12574:	             move.l 1af02 <SysBase>,d0
   1257a:	             movea.l d0,a6
   1257c:	             move.l 16(sp),d0
   12580:	             move.l 12(sp),d1
   12584:	             jsr -684(a6)
   12588:	             move.l d0,8(sp)
   1258c:	             move.l 8(sp),d0
   12590:	             move.l d0,1b032 <languageName>
	if( languageName == 0) {
   12596:	             move.l 1b032 <languageName>,d0
   1259c:	         /-- bne.s 125ac <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1259e:	         |   pea 1831d <graphics.c.1c13408a+0x135>
   125a4:	         |   jsr 157fa <KPrintF>
   125aa:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   125ac:	         \-> clr.l 32(sp)
   125b0:	   /-------- bra.s 12628 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   125b2:	/--|-------> tst.l 32(sp)
   125b6:	|  |  /----- beq.s 125c6 <makeLanguageTable+0xb6>
   125b8:	|  |  |      move.l 40(sp),-(sp)
   125bc:	|  |  |      jsr 6bc <get2bytes>
   125c2:	|  |  |      addq.l #4,sp
   125c4:	|  |  |  /-- bra.s 125c8 <makeLanguageTable+0xb8>
   125c6:	|  |  \--|-> moveq #0,d0
   125c8:	|  |     \-> movea.l 1b02e <languageTable>,a0
   125ce:	|  |         move.l 32(sp),d1
   125d2:	|  |         add.l d1,d1
   125d4:	|  |         add.l d1,d1
   125d6:	|  |         adda.l d1,a0
   125d8:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   125da:	|  |         move.l 1b032 <languageName>,d1
   125e0:	|  |         move.l 32(sp),d0
   125e4:	|  |         add.l d0,d0
   125e6:	|  |         add.l d0,d0
   125e8:	|  |         movea.l d1,a0
   125ea:	|  |         adda.l d0,a0
   125ec:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   125ee:	|  |         move.l 1aeac <gameVersion>,d0
   125f4:	|  |         cmpi.l #511,d0
   125fa:	|  |     /-- ble.s 12624 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   125fc:	|  |     |   move.l 1b03a <gameSettings+0x4>,d0
   12602:	|  |     +-- beq.s 12624 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   12604:	|  |     |   move.l 1b032 <languageName>,d1
   1260a:	|  |     |   move.l 32(sp),d0
   1260e:	|  |     |   add.l d0,d0
   12610:	|  |     |   add.l d0,d0
   12612:	|  |     |   movea.l d1,a2
   12614:	|  |     |   adda.l d0,a2
   12616:	|  |     |   move.l 40(sp),-(sp)
   1261a:	|  |     |   jsr b02 <readString>
   12620:	|  |     |   addq.l #4,sp
   12622:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12624:	|  |     \-> addq.l #1,32(sp)
   12628:	|  \-------> move.l 1b03a <gameSettings+0x4>,d0
   1262e:	|            cmp.l 32(sp),d0
   12632:	\----------- bcc.w 125b2 <makeLanguageTable+0xa2>
		}
	}
}
   12636:	             nop
   12638:	             nop
   1263a:	             movea.l (sp)+,a2
   1263c:	             movea.l (sp)+,a6
   1263e:	             lea 28(sp),sp
   12642:	             rts

00012644 <readIniFile>:

void readIniFile (char * filename) {
   12644:	                      lea -564(sp),sp
   12648:	                      move.l a6,-(sp)
   1264a:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   1264c:	                      move.l 576(sp),-(sp)
   12650:	                      jsr b8 <copyString>
   12656:	                      addq.l #4,sp
   12658:	                      move.l d0,-(sp)
   1265a:	                      jsr 12458 <getPrefsFilename>
   12660:	                      addq.l #4,sp
   12662:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   12666:	                      move.l 562(sp),558(sp)
   1266c:	                      move.l #1005,554(sp)
   12674:	                      move.l 1af0a <DOSBase>,d0
   1267a:	                      movea.l d0,a6
   1267c:	                      move.l 558(sp),d1
   12680:	                      move.l 554(sp),d2
   12684:	                      jsr -30(a6)
   12688:	                      move.l d0,550(sp)
   1268c:	                      move.l 550(sp),d0
   12690:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   12694:	                      clr.l 1b036 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   1269a:	                      move.w #1,1b03e <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   126a2:	                      clr.l 1b040 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   126a8:	                      moveq #1,d0
   126aa:	                      move.l d0,1b044 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   126b0:	                      clr.w 1b048 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   126b6:	                      clr.w 1b04a <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   126bc:	                      clr.w 1b04c <gameSettings+0x16>

	FreeVec(langName);
   126c2:	                      move.l 562(sp),542(sp)
   126c8:	                      move.l 1af02 <SysBase>,d0
   126ce:	                      movea.l d0,a6
   126d0:	                      movea.l 542(sp),a1
   126d4:	                      jsr -690(a6)
	langName = NULL;
   126d8:	                      clr.l 562(sp)

	if (fp) {
   126dc:	                      tst.l 546(sp)
   126e0:	/-------------------- beq.w 129be <readIniFile+0x37a>
		char lineSoFar[257] = "";
   126e4:	|                     move.l sp,d0
   126e6:	|                     addi.l #265,d0
   126ec:	|                     move.l #257,d1
   126f2:	|                     move.l d1,-(sp)
   126f4:	|                     clr.l -(sp)
   126f6:	|                     move.l d0,-(sp)
   126f8:	|                     jsr 1577e <memset>
   126fe:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   12702:	|                     move.l sp,d0
   12704:	|                     addq.l #8,d0
   12706:	|                     move.l #257,d1
   1270c:	|                     move.l d1,-(sp)
   1270e:	|                     clr.l -(sp)
   12710:	|                     move.l d0,-(sp)
   12712:	|                     jsr 1577e <memset>
   12718:	|                     lea 12(sp),sp
		unsigned char here = 0;
   1271c:	|                     clr.b 571(sp)
		char readChar = ' ';
   12720:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   12726:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   1272c:	|                     clr.w 566(sp)
		LONG tmp = 0;
   12730:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   12734:	|  /----------------> move.l 546(sp),534(sp)
   1273a:	|  |                  move.l 1af0a <DOSBase>,d0
   12740:	|  |                  movea.l d0,a6
   12742:	|  |                  move.l 534(sp),d1
   12746:	|  |                  jsr -306(a6)
   1274a:	|  |                  move.l d0,530(sp)
   1274e:	|  |                  move.l 530(sp),d0
   12752:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   12756:	|  |                  moveq #-1,d1
   12758:	|  |                  cmp.l 538(sp),d1
   1275c:	|  |           /----- bne.s 1276a <readIniFile+0x126>
				readChar = '\n';
   1275e:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   12764:	|  |           |      clr.w 568(sp)
   12768:	|  |           |  /-- bra.s 12770 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   1276a:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   12770:	|  |              \-> move.b 570(sp),d0
   12774:	|  |                  ext.w d0
   12776:	|  |                  movea.w d0,a0
   12778:	|  |                  moveq #61,d0
   1277a:	|  |                  cmp.l a0,d0
   1277c:	|  |     /----------- beq.w 12926 <readIniFile+0x2e2>
   12780:	|  |     |            moveq #61,d1
   12782:	|  |     |            cmp.l a0,d1
   12784:	|  |  /--|----------- blt.w 12932 <readIniFile+0x2ee>
   12788:	|  |  |  |            moveq #10,d0
   1278a:	|  |  |  |            cmp.l a0,d0
   1278c:	|  |  |  |        /-- beq.s 12796 <readIniFile+0x152>
   1278e:	|  |  |  |        |   moveq #13,d1
   12790:	|  |  |  |        |   cmp.l a0,d1
   12792:	|  |  +--|--------|-- bne.w 12932 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   12796:	|  |  |  |        \-> tst.w 566(sp)
   1279a:	|  |  |  |     /----- beq.w 12914 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   1279e:	|  |  |  |     |      pea 18351 <graphics.c.1c13408a+0x169>
   127a4:	|  |  |  |     |      move.l sp,d0
   127a6:	|  |  |  |     |      addi.l #269,d0
   127ac:	|  |  |  |     |      move.l d0,-(sp)
   127ae:	|  |  |  |     |      jsr 12ada <strcmp>
   127b4:	|  |  |  |     |      addq.l #8,sp
   127b6:	|  |  |  |     |      tst.l d0
   127b8:	|  |  |  |     |  /-- bne.s 127d2 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   127ba:	|  |  |  |     |  |   move.l sp,d0
   127bc:	|  |  |  |     |  |   addq.l #8,d0
   127be:	|  |  |  |     |  |   move.l d0,-(sp)
   127c0:	|  |  |  |     |  |   jsr 129ca <stringToInt>
   127c6:	|  |  |  |     |  |   addq.l #4,sp
   127c8:	|  |  |  |     |  |   move.l d0,1b036 <gameSettings>
   127ce:	|  |  |  |     +--|-- bra.w 12914 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   127d2:	|  |  |  |     |  \-> pea 1835a <graphics.c.1c13408a+0x172>
   127d8:	|  |  |  |     |      move.l sp,d0
   127da:	|  |  |  |     |      addi.l #269,d0
   127e0:	|  |  |  |     |      move.l d0,-(sp)
   127e2:	|  |  |  |     |      jsr 12ada <strcmp>
   127e8:	|  |  |  |     |      addq.l #8,sp
   127ea:	|  |  |  |     |      tst.l d0
   127ec:	|  |  |  |     |  /-- bne.s 12812 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   127ee:	|  |  |  |     |  |   move.l sp,d0
   127f0:	|  |  |  |     |  |   addq.l #8,d0
   127f2:	|  |  |  |     |  |   move.l d0,-(sp)
   127f4:	|  |  |  |     |  |   jsr 129ca <stringToInt>
   127fa:	|  |  |  |     |  |   addq.l #4,sp
   127fc:	|  |  |  |     |  |   tst.l d0
   127fe:	|  |  |  |     |  |   seq d0
   12800:	|  |  |  |     |  |   neg.b d0
   12802:	|  |  |  |     |  |   move.b d0,d0
   12804:	|  |  |  |     |  |   andi.w #255,d0
   12808:	|  |  |  |     |  |   move.w d0,1b03e <gameSettings+0x8>
   1280e:	|  |  |  |     +--|-- bra.w 12914 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   12812:	|  |  |  |     |  \-> pea 18361 <graphics.c.1c13408a+0x179>
   12818:	|  |  |  |     |      move.l sp,d0
   1281a:	|  |  |  |     |      addi.l #269,d0
   12820:	|  |  |  |     |      move.l d0,-(sp)
   12822:	|  |  |  |     |      jsr 12ada <strcmp>
   12828:	|  |  |  |     |      addq.l #8,sp
   1282a:	|  |  |  |     |      tst.l d0
   1282c:	|  |  |  |     |  /-- bne.s 12846 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   1282e:	|  |  |  |     |  |   move.l sp,d0
   12830:	|  |  |  |     |  |   addq.l #8,d0
   12832:	|  |  |  |     |  |   move.l d0,-(sp)
   12834:	|  |  |  |     |  |   jsr 129ca <stringToInt>
   1283a:	|  |  |  |     |  |   addq.l #4,sp
   1283c:	|  |  |  |     |  |   move.l d0,1b040 <gameSettings+0xa>
   12842:	|  |  |  |     +--|-- bra.w 12914 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   12846:	|  |  |  |     |  \-> pea 18369 <graphics.c.1c13408a+0x181>
   1284c:	|  |  |  |     |      move.l sp,d0
   1284e:	|  |  |  |     |      addi.l #269,d0
   12854:	|  |  |  |     |      move.l d0,-(sp)
   12856:	|  |  |  |     |      jsr 12ada <strcmp>
   1285c:	|  |  |  |     |      addq.l #8,sp
   1285e:	|  |  |  |     |      tst.l d0
   12860:	|  |  |  |     |  /-- bne.s 1287a <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   12862:	|  |  |  |     |  |   move.l sp,d0
   12864:	|  |  |  |     |  |   addq.l #8,d0
   12866:	|  |  |  |     |  |   move.l d0,-(sp)
   12868:	|  |  |  |     |  |   jsr 129ca <stringToInt>
   1286e:	|  |  |  |     |  |   addq.l #4,sp
   12870:	|  |  |  |     |  |   move.l d0,1b044 <gameSettings+0xe>
   12876:	|  |  |  |     +--|-- bra.w 12914 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   1287a:	|  |  |  |     |  \-> pea 18373 <graphics.c.1c13408a+0x18b>
   12880:	|  |  |  |     |      move.l sp,d0
   12882:	|  |  |  |     |      addi.l #269,d0
   12888:	|  |  |  |     |      move.l d0,-(sp)
   1288a:	|  |  |  |     |      jsr 12ada <strcmp>
   12890:	|  |  |  |     |      addq.l #8,sp
   12892:	|  |  |  |     |      tst.l d0
   12894:	|  |  |  |     |  /-- bne.s 128ae <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   12896:	|  |  |  |     |  |   move.l sp,d0
   12898:	|  |  |  |     |  |   addq.l #8,d0
   1289a:	|  |  |  |     |  |   move.l d0,-(sp)
   1289c:	|  |  |  |     |  |   jsr 129ca <stringToInt>
   128a2:	|  |  |  |     |  |   addq.l #4,sp
   128a4:	|  |  |  |     |  |   move.l d0,d0
   128a6:	|  |  |  |     |  |   move.w d0,1b048 <gameSettings+0x12>
   128ac:	|  |  |  |     +--|-- bra.s 12914 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   128ae:	|  |  |  |     |  \-> pea 1837f <graphics.c.1c13408a+0x197>
   128b4:	|  |  |  |     |      move.l sp,d0
   128b6:	|  |  |  |     |      addi.l #269,d0
   128bc:	|  |  |  |     |      move.l d0,-(sp)
   128be:	|  |  |  |     |      jsr 12ada <strcmp>
   128c4:	|  |  |  |     |      addq.l #8,sp
   128c6:	|  |  |  |     |      tst.l d0
   128c8:	|  |  |  |     |  /-- bne.s 128e2 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   128ca:	|  |  |  |     |  |   move.l sp,d0
   128cc:	|  |  |  |     |  |   addq.l #8,d0
   128ce:	|  |  |  |     |  |   move.l d0,-(sp)
   128d0:	|  |  |  |     |  |   jsr 129ca <stringToInt>
   128d6:	|  |  |  |     |  |   addq.l #4,sp
   128d8:	|  |  |  |     |  |   move.l d0,d0
   128da:	|  |  |  |     |  |   move.w d0,1b04a <gameSettings+0x14>
   128e0:	|  |  |  |     +--|-- bra.s 12914 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   128e2:	|  |  |  |     |  \-> pea 1838d <graphics.c.1c13408a+0x1a5>
   128e8:	|  |  |  |     |      move.l sp,d0
   128ea:	|  |  |  |     |      addi.l #269,d0
   128f0:	|  |  |  |     |      move.l d0,-(sp)
   128f2:	|  |  |  |     |      jsr 12ada <strcmp>
   128f8:	|  |  |  |     |      addq.l #8,sp
   128fa:	|  |  |  |     |      tst.l d0
   128fc:	|  |  |  |     +----- bne.s 12914 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   128fe:	|  |  |  |     |      move.l sp,d0
   12900:	|  |  |  |     |      addq.l #8,d0
   12902:	|  |  |  |     |      move.l d0,-(sp)
   12904:	|  |  |  |     |      jsr 129ca <stringToInt>
   1290a:	|  |  |  |     |      addq.l #4,sp
   1290c:	|  |  |  |     |      move.l d0,d0
   1290e:	|  |  |  |     |      move.w d0,1b04c <gameSettings+0x16>
					}
				}
				here = 0;
   12914:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   12918:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   1291c:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   12920:	|  |  |  |            clr.b 8(sp)
				break;
   12924:	|  |  |  |  /-------- bra.s 1299c <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   12926:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   1292c:	|  |  |     |         clr.b 571(sp)
				break;
   12930:	|  |  |     +-------- bra.s 1299c <readIniFile+0x358>

				default:
				if (doingSecond) {
   12932:	|  |  \-----|-------> tst.w 566(sp)
   12936:	|  |        |  /----- beq.s 1296a <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   12938:	|  |        |  |      move.b 571(sp),d0
   1293c:	|  |        |  |      move.b d0,d1
   1293e:	|  |        |  |      addq.b #1,d1
   12940:	|  |        |  |      move.b d1,571(sp)
   12944:	|  |        |  |      move.b d0,d0
   12946:	|  |        |  |      andi.l #255,d0
   1294c:	|  |        |  |      lea 572(sp),a0
   12950:	|  |        |  |      adda.l d0,a0
   12952:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   12958:	|  |        |  |      moveq #0,d0
   1295a:	|  |        |  |      move.b 571(sp),d0
   1295e:	|  |        |  |      lea 572(sp),a0
   12962:	|  |        |  |      adda.l d0,a0
   12964:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   12968:	|  |        |  |  /-- bra.s 1299a <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   1296a:	|  |        |  \--|-> move.b 571(sp),d0
   1296e:	|  |        |     |   move.b d0,d1
   12970:	|  |        |     |   addq.b #1,d1
   12972:	|  |        |     |   move.b d1,571(sp)
   12976:	|  |        |     |   move.b d0,d0
   12978:	|  |        |     |   andi.l #255,d0
   1297e:	|  |        |     |   lea 572(sp),a0
   12982:	|  |        |     |   adda.l d0,a0
   12984:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   1298a:	|  |        |     |   moveq #0,d0
   1298c:	|  |        |     |   move.b 571(sp),d0
   12990:	|  |        |     |   lea 572(sp),a0
   12994:	|  |        |     |   adda.l d0,a0
   12996:	|  |        |     |   clr.b -307(a0)
				break;
   1299a:	|  |        |     \-> nop
			}
		} while (keepGoing);
   1299c:	|  |        \-------> tst.w 568(sp)
   129a0:	|  \----------------- bne.w 12734 <readIniFile+0xf0>

		Close(fp);
   129a4:	|                     move.l 546(sp),526(sp)
   129aa:	|                     move.l 1af0a <DOSBase>,d0
   129b0:	|                     movea.l d0,a6
   129b2:	|                     move.l 526(sp),d1
   129b6:	|                     jsr -36(a6)
   129ba:	|                     move.l d0,522(sp)
	}
}
   129be:	\-------------------> nop
   129c0:	                      move.l (sp)+,d2
   129c2:	                      movea.l (sp)+,a6
   129c4:	                      lea 564(sp),sp
   129c8:	                      rts

000129ca <stringToInt>:

unsigned int stringToInt (char * s) {
   129ca:	             subq.l #8,sp
	int i = 0;
   129cc:	             clr.l 4(sp)
	BOOL negative = FALSE;
   129d0:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   129d4:	/----------> movea.l 12(sp),a0
   129d8:	|            move.b (a0),d0
   129da:	|            cmpi.b #47,d0
   129de:	|        /-- ble.s 12a16 <stringToInt+0x4c>
   129e0:	|        |   movea.l 12(sp),a0
   129e4:	|        |   move.b (a0),d0
   129e6:	|        |   cmpi.b #57,d0
   129ea:	|        +-- bgt.s 12a16 <stringToInt+0x4c>
			i *= 10;
   129ec:	|        |   move.l 4(sp),d1
   129f0:	|        |   move.l d1,d0
   129f2:	|        |   add.l d0,d0
   129f4:	|        |   add.l d0,d0
   129f6:	|        |   add.l d1,d0
   129f8:	|        |   add.l d0,d0
   129fa:	|        |   move.l d0,4(sp)
			i += *s - '0';
   129fe:	|        |   movea.l 12(sp),a0
   12a02:	|        |   move.b (a0),d0
   12a04:	|        |   ext.w d0
   12a06:	|        |   movea.w d0,a0
   12a08:	|        |   moveq #-48,d0
   12a0a:	|        |   add.l a0,d0
   12a0c:	|        |   add.l d0,4(sp)
			s ++;
   12a10:	|        |   addq.l #1,12(sp)
   12a14:	|  /-----|-- bra.s 12a4e <stringToInt+0x84>
		} else if (*s == '-') {
   12a16:	|  |     \-> movea.l 12(sp),a0
   12a1a:	|  |         move.b (a0),d0
   12a1c:	|  |         cmpi.b #45,d0
   12a20:	|  |     /-- bne.s 12a3a <stringToInt+0x70>
			negative = ! negative;
   12a22:	|  |     |   tst.w 2(sp)
   12a26:	|  |     |   seq d0
   12a28:	|  |     |   neg.b d0
   12a2a:	|  |     |   move.b d0,d0
   12a2c:	|  |     |   andi.w #255,d0
   12a30:	|  |     |   move.w d0,2(sp)
			s++;
   12a34:	|  |     |   addq.l #1,12(sp)
   12a38:	+--|-----|-- bra.s 129d4 <stringToInt+0xa>
		} else {
			if (negative)
   12a3a:	|  |     \-> tst.w 2(sp)
   12a3e:	|  |     /-- beq.s 12a48 <stringToInt+0x7e>
				return -i;
   12a40:	|  |     |   move.l 4(sp),d0
   12a44:	|  |     |   neg.l d0
   12a46:	|  |  /--|-- bra.s 12a50 <stringToInt+0x86>
			return i;
   12a48:	|  |  |  \-> move.l 4(sp),d0
   12a4c:	|  |  +----- bra.s 12a50 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   12a4e:	\--\--|----X bra.s 129d4 <stringToInt+0xa>
		}
	}
   12a50:	      \----> addq.l #8,sp
   12a52:	             rts

00012a54 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   12a54:	    lea -28(sp),sp
   12a58:	    move.l a6,-(sp)
   12a5a:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   12a5c:	    pea 18397 <graphics.c.1c13408a+0x1af>
   12a62:	    jsr 157fa <KPrintF>
   12a68:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   12a6a:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   12a6e:	    move.l 40(sp),30(sp)
   12a74:	    move.l #1005,26(sp)
   12a7c:	    move.l 1af0a <DOSBase>,d0
   12a82:	    movea.l d0,a6
   12a84:	    move.l 30(sp),d1
   12a88:	    move.l 26(sp),d2
   12a8c:	    jsr -30(a6)
   12a90:	    move.l d0,22(sp)
   12a94:	    move.l 22(sp),d0
   12a98:	    move.l d0,18(sp)
	if (tester) {
   12a9c:	/-- beq.s 12acc <fileExists+0x78>
		KPrintF("fileexists: File exists");
   12a9e:	|   pea 183b1 <graphics.c.1c13408a+0x1c9>
   12aa4:	|   jsr 157fa <KPrintF>
   12aaa:	|   addq.l #4,sp
		retval = 1;
   12aac:	|   move.b #1,35(sp)
		Close(tester);
   12ab2:	|   move.l 18(sp),14(sp)
   12ab8:	|   move.l 1af0a <DOSBase>,d0
   12abe:	|   movea.l d0,a6
   12ac0:	|   move.l 14(sp),d1
   12ac4:	|   jsr -36(a6)
   12ac8:	|   move.l d0,10(sp)
	}
	return retval;
   12acc:	\-> move.b 35(sp),d0
   12ad0:	    move.l (sp)+,d2
   12ad2:	    movea.l (sp)+,a6
   12ad4:	    lea 28(sp),sp
   12ad8:	    rts

00012ada <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   12ada:	   /-- bra.s 12ae4 <strcmp+0xa>
    {
        s1++;
   12adc:	/--|-> addq.l #1,4(sp)
        s2++;
   12ae0:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   12ae4:	|  \-> movea.l 4(sp),a0
   12ae8:	|      move.b (a0),d0
   12aea:	|  /-- beq.s 12afc <strcmp+0x22>
   12aec:	|  |   movea.l 4(sp),a0
   12af0:	|  |   move.b (a0),d1
   12af2:	|  |   movea.l 8(sp),a0
   12af6:	|  |   move.b (a0),d0
   12af8:	|  |   cmp.b d1,d0
   12afa:	\--|-- beq.s 12adc <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   12afc:	   \-> movea.l 4(sp),a0
   12b00:	       move.b (a0),d0
   12b02:	       moveq #0,d1
   12b04:	       move.b d0,d1
   12b06:	       movea.l 8(sp),a0
   12b0a:	       move.b (a0),d0
   12b0c:	       move.b d0,d0
   12b0e:	       andi.l #255,d0
   12b14:	       sub.l d0,d1
   12b16:	       move.l d1,d0
}
   12b18:	       rts

00012b1a <strlen>:

long unsigned int strlen (const char *s) 
{  
   12b1a:	       subq.l #4,sp
	long unsigned int i = 0;
   12b1c:	       clr.l (sp)
	while(s[i]) i++; 
   12b1e:	   /-- bra.s 12b22 <strlen+0x8>
   12b20:	/--|-> addq.l #1,(sp)
   12b22:	|  \-> movea.l 8(sp),a0
   12b26:	|      adda.l (sp),a0
   12b28:	|      move.b (a0),d0
   12b2a:	\----- bne.s 12b20 <strlen+0x6>
	return(i);
   12b2c:	       move.l (sp),d0
}
   12b2e:	       addq.l #4,sp
   12b30:	       rts

00012b32 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   12b32:	    nop
   12b34:	/-> move.l 8(sp),d0
   12b38:	|   move.l d0,d1
   12b3a:	|   addq.l #1,d1
   12b3c:	|   move.l d1,8(sp)
   12b40:	|   movea.l 4(sp),a0
   12b44:	|   lea 1(a0),a1
   12b48:	|   move.l a1,4(sp)
   12b4c:	|   movea.l d0,a1
   12b4e:	|   move.b (a1),d0
   12b50:	|   move.b d0,(a0)
   12b52:	|   move.b (a0),d0
   12b54:	\-- bne.s 12b34 <strcpy+0x2>
}
   12b56:	    nop
   12b58:	    rts

00012b5a <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   12b5a:	    lea -20(sp),sp
   12b5e:	    move.l a6,-(sp)
   12b60:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   12b62:	    move.l 32(sp),-(sp)
   12b66:	    jsr 12b1a <strlen>
   12b6c:	    addq.l #4,sp
   12b6e:	    move.l d0,d2
   12b70:	    move.l 36(sp),-(sp)
   12b74:	    jsr 12b1a <strlen>
   12b7a:	    addq.l #4,sp
   12b7c:	    add.l d2,d0
   12b7e:	    move.l d0,d1
   12b80:	    addq.l #1,d1
   12b82:	    move.l d1,20(sp)
   12b86:	    clr.l 16(sp)
   12b8a:	    move.l 1af02 <SysBase>,d0
   12b90:	    movea.l d0,a6
   12b92:	    move.l 20(sp),d0
   12b96:	    move.l 16(sp),d1
   12b9a:	    jsr -684(a6)
   12b9e:	    move.l d0,12(sp)
   12ba2:	    move.l 12(sp),d0
   12ba6:	    move.l d0,8(sp)
	char * t = newString;
   12baa:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   12bb0:	    nop
   12bb2:	/-> move.l 32(sp),d0
   12bb6:	|   move.l d0,d1
   12bb8:	|   addq.l #1,d1
   12bba:	|   move.l d1,32(sp)
   12bbe:	|   movea.l 24(sp),a0
   12bc2:	|   lea 1(a0),a1
   12bc6:	|   move.l a1,24(sp)
   12bca:	|   movea.l d0,a1
   12bcc:	|   move.b (a1),d0
   12bce:	|   move.b d0,(a0)
   12bd0:	|   move.b (a0),d0
   12bd2:	\-- bne.s 12bb2 <joinStrings+0x58>
	t--;
   12bd4:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   12bd8:	    nop
   12bda:	/-> move.l 36(sp),d0
   12bde:	|   move.l d0,d1
   12be0:	|   addq.l #1,d1
   12be2:	|   move.l d1,36(sp)
   12be6:	|   movea.l 24(sp),a0
   12bea:	|   lea 1(a0),a1
   12bee:	|   move.l a1,24(sp)
   12bf2:	|   movea.l d0,a1
   12bf4:	|   move.b (a1),d0
   12bf6:	|   move.b d0,(a0)
   12bf8:	|   move.b (a0),d0
   12bfa:	\-- bne.s 12bda <joinStrings+0x80>

	return newString;
   12bfc:	    move.l 8(sp),d0
}
   12c00:	    move.l (sp)+,d2
   12c02:	    movea.l (sp)+,a6
   12c04:	    lea 20(sp),sp
   12c08:	    rts

00012c0a <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   12c0a:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   12c0e:	       moveq #10,d0
   12c10:	       cmp.l 28(sp),d0
   12c14:	   /-- bne.s 12c32 <itoa+0x28>
   12c16:	   |   tst.l 20(sp)
   12c1a:	   +-- bge.s 12c32 <itoa+0x28>
        *str++ = '-';
   12c1c:	   |   move.l 24(sp),d0
   12c20:	   |   move.l d0,d1
   12c22:	   |   addq.l #1,d1
   12c24:	   |   move.l d1,24(sp)
   12c28:	   |   movea.l d0,a0
   12c2a:	   |   move.b #45,(a0)
        value *= -1;
   12c2e:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   12c32:	   \-> move.l 24(sp),12(sp)
   12c38:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   12c3e:	   /-> move.l 20(sp),d0
   12c42:	   |   move.l 28(sp),-(sp)
   12c46:	   |   move.l d0,-(sp)
   12c48:	   |   jsr 16264 <__modsi3>
   12c4e:	   |   addq.l #8,sp
   12c50:	   |   movea.l d0,a1
   12c52:	   |   move.l 12(sp),d0
   12c56:	   |   move.l d0,d1
   12c58:	   |   addq.l #1,d1
   12c5a:	   |   move.l d1,12(sp)
   12c5e:	   |   lea 183c9 <graphics.c.1c13408a+0x1e1>,a0
   12c64:	   |   move.b (0,a1,a0.l),d1
   12c68:	   |   movea.l d0,a0
   12c6a:	   |   move.b d1,(a0)
        value /= base;
   12c6c:	   |   move.l 28(sp),-(sp)
   12c70:	   |   move.l 24(sp),-(sp)
   12c74:	   |   jsr 16236 <__divsi3>
   12c7a:	   |   addq.l #8,sp
   12c7c:	   |   move.l d0,20(sp)
    } while (value);
   12c80:	   \-- bne.s 12c3e <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   12c82:	       move.l 12(sp),d0
   12c86:	       move.l d0,d1
   12c88:	       subq.l #1,d1
   12c8a:	       move.l d1,12(sp)
   12c8e:	       movea.l d0,a0
   12c90:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   12c92:	       move.l 4(sp),8(sp)
   12c98:	   /-- bra.s 12cbe <itoa+0xb4>
        char temp = *low;
   12c9a:	/--|-> movea.l 8(sp),a0
   12c9e:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   12ca2:	|  |   movea.l 12(sp),a0
   12ca6:	|  |   move.b (a0),d0
   12ca8:	|  |   movea.l 8(sp),a0
   12cac:	|  |   move.b d0,(a0)
        *ptr = temp;
   12cae:	|  |   movea.l 12(sp),a0
   12cb2:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   12cb6:	|  |   addq.l #1,8(sp)
   12cba:	|  |   subq.l #1,12(sp)
   12cbe:	|  \-> move.l 8(sp),d0
   12cc2:	|      cmp.l 12(sp),d0
   12cc6:	\----- bcs.s 12c9a <itoa+0x90>
    }
    return rc;
   12cc8:	       move.l 4(sp),d0
}
   12ccc:	       lea 16(sp),sp
   12cd0:	       rts

00012cd2 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   12cd2:	                            lea -40(sp),sp
   12cd6:	                            move.l d2,-(sp)
    char* s = str;
   12cd8:	                            move.l 48(sp),40(sp)
    const char* p = format;
   12cde:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   12ce4:	   /----------------------- bra.w 12e18 <vsprintf2+0x146>
        if (*p == '%') {
   12ce8:	/--|----------------------> movea.l 36(sp),a0
   12cec:	|  |                        move.b (a0),d0
   12cee:	|  |                        cmpi.b #37,d0
   12cf2:	|  |  /-------------------- bne.w 12dfe <vsprintf2+0x12c>
            switch (*++p) {
   12cf6:	|  |  |                     addq.l #1,36(sp)
   12cfa:	|  |  |                     movea.l 36(sp),a0
   12cfe:	|  |  |                     move.b (a0),d0
   12d00:	|  |  |                     ext.w d0
   12d02:	|  |  |                     movea.w d0,a0
   12d04:	|  |  |                     moveq #115,d0
   12d06:	|  |  |                     cmp.l a0,d0
   12d08:	|  |  |           /-------- beq.s 12d80 <vsprintf2+0xae>
   12d0a:	|  |  |           |         moveq #115,d1
   12d0c:	|  |  |           |         cmp.l a0,d1
   12d0e:	|  |  |  /--------|-------- blt.w 12de6 <vsprintf2+0x114>
   12d12:	|  |  |  |        |         moveq #99,d2
   12d14:	|  |  |  |        |         cmp.l a0,d2
   12d16:	|  |  |  |  /-----|-------- beq.w 12dbe <vsprintf2+0xec>
   12d1a:	|  |  |  |  |     |         moveq #100,d0
   12d1c:	|  |  |  |  |     |         cmp.l a0,d0
   12d1e:	|  |  |  +--|-----|-------- bne.w 12de6 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   12d22:	|  |  |  |  |     |         addq.l #4,56(sp)
   12d26:	|  |  |  |  |     |         movea.l 56(sp),a0
   12d2a:	|  |  |  |  |     |         move.l (a0),d0
   12d2c:	|  |  |  |  |     |         move.l d0,d1
   12d2e:	|  |  |  |  |     |         subq.l #1,d1
   12d30:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   12d34:	|  |  |  |  |     |         pea a <_start+0xa>
   12d38:	|  |  |  |  |     |         lea 8(sp),a0
   12d3c:	|  |  |  |  |     |         move.l a0,-(sp)
   12d3e:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   12d42:	|  |  |  |  |     |         jsr 12c0a <itoa>
   12d48:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   12d4c:	|  |  |  |  |     |         lea 44(sp),a0
   12d50:	|  |  |  |  |     |         lea -40(a0),a0
   12d54:	|  |  |  |  |     |         move.l a0,28(sp)
   12d58:	|  |  |  |  |     |     /-- bra.s 12d74 <vsprintf2+0xa2>
                        *s++ = *b;
   12d5a:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   12d5e:	|  |  |  |  |     |  |  |   move.l d0,d1
   12d60:	|  |  |  |  |     |  |  |   addq.l #1,d1
   12d62:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   12d66:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   12d6a:	|  |  |  |  |     |  |  |   move.b (a0),d1
   12d6c:	|  |  |  |  |     |  |  |   movea.l d0,a0
   12d6e:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   12d70:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   12d74:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   12d78:	|  |  |  |  |     |  |      move.b (a0),d0
   12d7a:	|  |  |  |  |     |  \----- bne.s 12d5a <vsprintf2+0x88>
                    }
                    break;
   12d7c:	|  |  |  |  |  /--|-------- bra.w 12e14 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   12d80:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   12d84:	|  |  |  |  |  |            movea.l 56(sp),a0
   12d88:	|  |  |  |  |  |            move.l (a0),d0
   12d8a:	|  |  |  |  |  |            move.l d0,d1
   12d8c:	|  |  |  |  |  |            subq.l #1,d1
   12d8e:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   12d92:	|  |  |  |  |  |        /-- bra.s 12db4 <vsprintf2+0xe2>
                        *s++ = *sval++;
   12d94:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   12d98:	|  |  |  |  |  |     |  |   move.l d1,d2
   12d9a:	|  |  |  |  |  |     |  |   addq.l #1,d2
   12d9c:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   12da0:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   12da4:	|  |  |  |  |  |     |  |   move.l d0,d2
   12da6:	|  |  |  |  |  |     |  |   addq.l #1,d2
   12da8:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   12dac:	|  |  |  |  |  |     |  |   movea.l d1,a0
   12dae:	|  |  |  |  |  |     |  |   move.b (a0),d1
   12db0:	|  |  |  |  |  |     |  |   movea.l d0,a0
   12db2:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   12db4:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   12db8:	|  |  |  |  |  |     |      move.b (a0),d0
   12dba:	|  |  |  |  |  |     \----- bne.s 12d94 <vsprintf2+0xc2>
                    }
                    break;
   12dbc:	|  |  |  |  |  +----------- bra.s 12e14 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   12dbe:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   12dc2:	|  |  |  |     |            movea.l 56(sp),a0
   12dc6:	|  |  |  |     |            move.l (a0),d0
   12dc8:	|  |  |  |     |            move.l d0,d1
   12dca:	|  |  |  |     |            subq.l #1,d1
   12dcc:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   12dd0:	|  |  |  |     |            move.l 40(sp),d0
   12dd4:	|  |  |  |     |            move.l d0,d2
   12dd6:	|  |  |  |     |            addq.l #1,d2
   12dd8:	|  |  |  |     |            move.l d2,40(sp)
   12ddc:	|  |  |  |     |            move.l 24(sp),d1
   12de0:	|  |  |  |     |            movea.l d0,a0
   12de2:	|  |  |  |     |            move.b d1,(a0)
                    break;
   12de4:	|  |  |  |     +----------- bra.s 12e14 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   12de6:	|  |  |  \-----|----------> move.l 40(sp),d0
   12dea:	|  |  |        |            move.l d0,d1
   12dec:	|  |  |        |            addq.l #1,d1
   12dee:	|  |  |        |            move.l d1,40(sp)
   12df2:	|  |  |        |            movea.l 36(sp),a0
   12df6:	|  |  |        |            move.b (a0),d1
   12df8:	|  |  |        |            movea.l d0,a0
   12dfa:	|  |  |        |            move.b d1,(a0)
                    break;
   12dfc:	|  |  |        +----------- bra.s 12e14 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   12dfe:	|  |  \--------|----------> move.l 40(sp),d0
   12e02:	|  |           |            move.l d0,d1
   12e04:	|  |           |            addq.l #1,d1
   12e06:	|  |           |            move.l d1,40(sp)
   12e0a:	|  |           |            movea.l 36(sp),a0
   12e0e:	|  |           |            move.b (a0),d1
   12e10:	|  |           |            movea.l d0,a0
   12e12:	|  |           |            move.b d1,(a0)
        }
        p++;
   12e14:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   12e18:	|  \----------------------> movea.l 36(sp),a0
   12e1c:	|                           move.b (a0),d0
   12e1e:	\-------------------------- bne.w 12ce8 <vsprintf2+0x16>
    }
    *s = '\0';
   12e22:	                            movea.l 40(sp),a0
   12e26:	                            clr.b (a0)
    return s - str;
   12e28:	                            move.l 40(sp),d0
   12e2c:	                            sub.l 48(sp),d0
}
   12e30:	                            move.l (sp)+,d2
   12e32:	                            lea 40(sp),sp
   12e36:	                            rts

00012e38 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   12e38:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   12e3a:	moveq #16,d0
   12e3c:	add.l sp,d0
   12e3e:	move.l d0,d1
   12e40:	addq.l #4,d1
   12e42:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   12e46:	move.l 16(sp),d0
   12e4a:	move.l 4(sp),-(sp)
   12e4e:	move.l d0,-(sp)
   12e50:	move.l 20(sp),-(sp)
   12e54:	jsr 12cd2 <vsprintf2>
   12e5a:	lea 12(sp),sp
   12e5e:	move.l d0,(sp)
    va_end(args);
   12e60:	clr.l 4(sp)

    return done;
   12e64:	move.l (sp),d0
}
   12e66:	addq.l #8,sp
   12e68:	rts

00012e6a <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   12e6a:	       lea -20(sp),sp
   12e6e:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   12e70:	       moveq #12,d0
   12e72:	       move.l d0,20(sp)
   12e76:	       clr.l 16(sp)
   12e7a:	       move.l 1af02 <SysBase>,d0
   12e80:	       movea.l d0,a6
   12e82:	       move.l 20(sp),d0
   12e86:	       move.l 16(sp),d1
   12e8a:	       jsr -684(a6)
   12e8e:	       move.l d0,12(sp)
   12e92:	       move.l 12(sp),d0
   12e96:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   12e9a:	   /-- bne.s 12ea0 <addVarToStack+0x36>
   12e9c:	   |   clr.w d0
   12e9e:	/--|-- bra.s 12ee8 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   12ea0:	|  \-> move.l 8(sp),d0
   12ea4:	|      move.l d0,-(sp)
   12ea6:	|      move.l 32(sp),-(sp)
   12eaa:	|      jsr 139cc <copyMain>
   12eb0:	|      addq.l #8,sp
   12eb2:	|      tst.w d0
   12eb4:	|  /-- bne.s 12ed0 <addVarToStack+0x66>
        FreeVec(newStack);
   12eb6:	|  |   move.l 8(sp),4(sp)
   12ebc:	|  |   move.l 1af02 <SysBase>,d0
   12ec2:	|  |   movea.l d0,a6
   12ec4:	|  |   movea.l 4(sp),a1
   12ec8:	|  |   jsr -690(a6)
        return FALSE;
   12ecc:	|  |   clr.w d0
   12ece:	+--|-- bra.s 12ee8 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   12ed0:	|  \-> movea.l 32(sp),a0
   12ed4:	|      move.l (a0),d0
   12ed6:	|      movea.l 8(sp),a0
   12eda:	|      move.l d0,8(a0)
    *thisStack = newStack;
   12ede:	|      movea.l 32(sp),a0
   12ee2:	|      move.l 8(sp),(a0)
    return TRUE;
   12ee6:	|      moveq #1,d0
}
   12ee8:	\----> movea.l (sp)+,a6
   12eea:	       lea 20(sp),sp
   12eee:	       rts

00012ef0 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   12ef0:	       lea -16(sp),sp
   12ef4:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   12ef6:	       moveq #12,d0
   12ef8:	       move.l d0,16(sp)
   12efc:	       clr.l 12(sp)
   12f00:	       move.l 1af02 <SysBase>,d0
   12f06:	       movea.l d0,a6
   12f08:	       move.l 16(sp),d0
   12f0c:	       move.l 12(sp),d1
   12f10:	       jsr -684(a6)
   12f14:	       move.l d0,8(sp)
   12f18:	       move.l 8(sp),d0
   12f1c:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   12f20:	   /-- bne.s 12f26 <addVarToStackQuick+0x36>
   12f22:	   |   clr.w d0
   12f24:	/--|-- bra.s 12f5c <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   12f26:	|  \-> move.l 4(sp),d0
   12f2a:	|      pea 8 <_start+0x8>
   12f2e:	|      move.l 28(sp),-(sp)
   12f32:	|      move.l d0,-(sp)
   12f34:	|      jsr 157ae <memcpy>
   12f3a:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   12f3e:	|      movea.l 24(sp),a0
   12f42:	|      clr.l (a0)

    newStack->next = *thisStack;
   12f44:	|      movea.l 28(sp),a0
   12f48:	|      move.l (a0),d0
   12f4a:	|      movea.l 4(sp),a0
   12f4e:	|      move.l d0,8(a0)
    *thisStack = newStack;
   12f52:	|      movea.l 28(sp),a0
   12f56:	|      move.l 4(sp),(a0)
    return TRUE;
   12f5a:	|      moveq #1,d0
}
   12f5c:	\----> movea.l (sp)+,a6
   12f5e:	       lea 16(sp),sp
   12f62:	       rts

00012f64 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   12f64:	       lea -16(sp),sp
   12f68:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   12f6a:	       movea.l 24(sp),a0
   12f6e:	       move.l (a0),d0
   12f70:	       moveq #1,d1
   12f72:	       cmp.l d0,d1
   12f74:	   /-- bne.s 12f9e <addVariablesInSecond+0x3a>
   12f76:	   |   movea.l 28(sp),a0
   12f7a:	   |   move.l (a0),d0
   12f7c:	   |   moveq #1,d1
   12f7e:	   |   cmp.l d0,d1
   12f80:	   +-- bne.s 12f9e <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   12f82:	   |   movea.l 28(sp),a0
   12f86:	   |   move.l 4(a0),d1
   12f8a:	   |   movea.l 24(sp),a0
   12f8e:	   |   move.l 4(a0),d0
   12f92:	   |   add.l d1,d0
   12f94:	   |   movea.l 28(sp),a0
   12f98:	   |   move.l d0,4(a0)
   12f9c:	/--|-- bra.s 13018 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   12f9e:	|  \-> move.l 24(sp),-(sp)
   12fa2:	|      jsr 13c04 <getTextFromAnyVar>
   12fa8:	|      addq.l #4,sp
   12faa:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   12fae:	|      move.l 28(sp),-(sp)
   12fb2:	|      jsr 13c04 <getTextFromAnyVar>
   12fb8:	|      addq.l #4,sp
   12fba:	|      move.l d0,12(sp)

		unlinkVar(var2);
   12fbe:	|      move.l 28(sp),-(sp)
   12fc2:	|      jsr 1387c <unlinkVar>
   12fc8:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   12fca:	|      move.l 12(sp),-(sp)
   12fce:	|      move.l 20(sp),-(sp)
   12fd2:	|      jsr 12b5a <joinStrings>
   12fd8:	|      addq.l #8,sp
   12fda:	|      movea.l 28(sp),a0
   12fde:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   12fe2:	|      movea.l 28(sp),a0
   12fe6:	|      moveq #3,d0
   12fe8:	|      move.l d0,(a0)
		FreeVec(string1);
   12fea:	|      move.l 16(sp),8(sp)
   12ff0:	|      move.l 1af02 <SysBase>,d0
   12ff6:	|      movea.l d0,a6
   12ff8:	|      movea.l 8(sp),a1
   12ffc:	|      jsr -690(a6)
		FreeVec(string2);
   13000:	|      move.l 12(sp),4(sp)
   13006:	|      move.l 1af02 <SysBase>,d0
   1300c:	|      movea.l d0,a6
   1300e:	|      movea.l 4(sp),a1
   13012:	|      jsr -690(a6)
	}
}
   13016:	|      nop
   13018:	\----> nop
   1301a:	       movea.l (sp)+,a6
   1301c:	       lea 16(sp),sp
   13020:	       rts

00013022 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   13022:	movea.l 8(sp),a0
   13026:	move.l 4(a0),-(sp)
   1302a:	move.l (a0),-(sp)
   1302c:	movea.l 12(sp),a0
   13030:	move.l 4(a0),-(sp)
   13034:	move.l (a0),-(sp)
   13036:	jsr 13058 <compareVars>
   1303c:	lea 16(sp),sp
   13040:	move.l d0,-(sp)
   13042:	pea 1 <_start+0x1>
   13046:	move.l 16(sp),-(sp)
   1304a:	jsr 13f20 <setVariable>
   13050:	lea 12(sp),sp
}
   13054:	nop
   13056:	rts

00013058 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   13058:	       subq.l #4,sp
	int re = 0;
   1305a:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1305c:	       move.l 8(sp),d1
   13060:	       move.l 16(sp),d0
   13064:	       cmp.l d1,d0
   13066:	/----- bne.w 1312e <compareVars+0xd6>
		switch (var1.varType) {
   1306a:	|      move.l 8(sp),d0
   1306e:	|      moveq #9,d1
   13070:	|      cmp.l d0,d1
   13072:	|  /-- bcs.w 13116 <compareVars+0xbe>
   13076:	|  |   add.l d0,d0
   13078:	|  |   movea.l d0,a0
   1307a:	|  |   adda.l #77958,a0
   13080:	|  |   move.w (a0),d0
   13082:	|  |   jmp (13086 <compareVars+0x2e>,pc,d0.w)
   13086:	|  |   ori.b #-112,(a4)
   1308a:	|  |   ori.l #5243024,(a0)
   13090:	|  |   ori.l #7733392,(a0)
   13096:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1309c:	|  |   move.l d0,(sp)
			break;
   1309e:	+--|-- bra.w 1312e <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   130a2:	|  |   move.l 12(sp),d1
   130a6:	|  |   move.l 20(sp),d0
   130aa:	|  |   cmp.l d1,d0
   130ac:	|  |   seq d0
   130ae:	|  |   neg.b d0
   130b0:	|  |   move.b d0,d0
   130b2:	|  |   andi.l #255,d0
   130b8:	|  |   move.l d0,(sp)
			break;
   130ba:	+--|-- bra.s 1312e <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   130bc:	|  |   move.l 12(sp),d1
   130c0:	|  |   move.l 20(sp),d0
   130c4:	|  |   cmp.l d1,d0
   130c6:	|  |   seq d0
   130c8:	|  |   neg.b d0
   130ca:	|  |   move.b d0,d0
   130cc:	|  |   andi.l #255,d0
   130d2:	|  |   move.l d0,(sp)
			break;
   130d4:	+--|-- bra.s 1312e <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   130d6:	|  |   move.l 20(sp),d1
   130da:	|  |   move.l 12(sp),d0
   130de:	|  |   move.l d1,-(sp)
   130e0:	|  |   move.l d0,-(sp)
   130e2:	|  |   jsr 12ada <strcmp>
   130e8:	|  |   addq.l #8,sp
   130ea:	|  |   tst.l d0
   130ec:	|  |   seq d0
   130ee:	|  |   neg.b d0
   130f0:	|  |   move.b d0,d0
   130f2:	|  |   andi.l #255,d0
   130f8:	|  |   move.l d0,(sp)
			break;
   130fa:	+--|-- bra.s 1312e <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   130fc:	|  |   move.l 12(sp),d1
   13100:	|  |   move.l 20(sp),d0
   13104:	|  |   cmp.l d1,d0
   13106:	|  |   seq d0
   13108:	|  |   neg.b d0
   1310a:	|  |   move.b d0,d0
   1310c:	|  |   andi.l #255,d0
   13112:	|  |   move.l d0,(sp)
			break;
   13114:	+--|-- bra.s 1312e <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   13116:	|  \-> move.l 12(sp),d1
   1311a:	|      move.l 20(sp),d0
   1311e:	|      cmp.l d1,d0
   13120:	|      seq d0
   13122:	|      neg.b d0
   13124:	|      move.b d0,d0
   13126:	|      andi.l #255,d0
   1312c:	|      move.l d0,(sp)
		}
	}
	return re;
   1312e:	\----> move.l (sp),d0
}
   13130:	       addq.l #4,sp
   13132:	       rts

00013134 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   13134:	             lea -16(sp),sp
   13138:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1313a:	             movea.l 28(sp),a0
   1313e:	             moveq #6,d0
   13140:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13142:	             moveq #12,d0
   13144:	             move.l d0,12(sp)
   13148:	             clr.l 8(sp)
   1314c:	             move.l 1af02 <SysBase>,d0
   13152:	             movea.l d0,a6
   13154:	             move.l 12(sp),d0
   13158:	             move.l 8(sp),d1
   1315c:	             jsr -684(a6)
   13160:	             move.l d0,4(sp)
   13164:	             move.l 4(sp),d0
   13168:	             movea.l 28(sp),a0
   1316c:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   13170:	             movea.l 28(sp),a0
   13174:	             move.l 4(a0),d0
   13178:	         /-- bne.s 13180 <copyStack+0x4c>
   1317a:	         |   clr.w d0
   1317c:	/--------|-- bra.w 13202 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   13180:	|        \-> movea.l 28(sp),a0
   13184:	|            movea.l 4(a0),a0
   13188:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1318a:	|            movea.l 28(sp),a0
   1318e:	|            movea.l 4(a0),a0
   13192:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   13196:	|            movea.l 28(sp),a0
   1319a:	|            movea.l 4(a0),a0
   1319e:	|            moveq #1,d0
   131a0:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   131a4:	|            movea.l 24(sp),a0
   131a8:	|            movea.l 4(a0),a0
   131ac:	|            move.l (a0),16(sp)

	while (a) {
   131b0:	|     /----- bra.s 131fa <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   131b2:	|  /--|----> movea.l 28(sp),a0
   131b6:	|  |  |      move.l 4(a0),d0
   131ba:	|  |  |      move.l d0,d1
   131bc:	|  |  |      move.l 16(sp),d0
   131c0:	|  |  |      move.l d1,-(sp)
   131c2:	|  |  |      move.l d0,-(sp)
   131c4:	|  |  |      jsr 12e6a <addVarToStack>
   131ca:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   131cc:	|  |  |      movea.l 28(sp),a0
   131d0:	|  |  |      movea.l 4(a0),a0
   131d4:	|  |  |      move.l 4(a0),d0
   131d8:	|  |  |  /-- bne.s 131f0 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   131da:	|  |  |  |   movea.l 28(sp),a0
   131de:	|  |  |  |   movea.l 4(a0),a1
   131e2:	|  |  |  |   movea.l 28(sp),a0
   131e6:	|  |  |  |   movea.l 4(a0),a0
   131ea:	|  |  |  |   move.l (a1),d0
   131ec:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   131f0:	|  |  |  \-> movea.l 16(sp),a0
   131f4:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   131fa:	|  |  \----> tst.l 16(sp)
   131fe:	|  \-------- bne.s 131b2 <copyStack+0x7e>
	}

	return TRUE;
   13200:	|            moveq #1,d0
}
   13202:	\----------> movea.l (sp)+,a6
   13204:	             lea 16(sp),sp
   13208:	             rts

0001320a <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   1320a:	                lea -20(sp),sp
   1320e:	                move.l a6,-(sp)
   13210:	                move.l 36(sp),d0
   13214:	                move.w d0,d0
   13216:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   1321a:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   13220:	                clr.l 16(sp)

    while (*huntVar) {
   13224:	   /----------- bra.s 132a2 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   13226:	/--|----------> movea.l 20(sp),a0
   1322a:	|  |            movea.l (a0),a0
   1322c:	|  |            movea.l 28(sp),a1
   13230:	|  |            move.l 4(a1),-(sp)
   13234:	|  |            move.l (a1),-(sp)
   13236:	|  |            move.l 4(a0),-(sp)
   1323a:	|  |            move.l (a0),-(sp)
   1323c:	|  |            jsr 13058 <compareVars>
   13242:	|  |            lea 16(sp),sp
   13246:	|  |            tst.l d0
   13248:	|  |  /-------- beq.s 13294 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1324a:	|  |  |         movea.l 20(sp),a0
   1324e:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   13252:	|  |  |         movea.l 12(sp),a0
   13256:	|  |  |         move.l 8(a0),d0
   1325a:	|  |  |         movea.l 20(sp),a0
   1325e:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   13260:	|  |  |         move.l 12(sp),d0
   13264:	|  |  |         move.l d0,-(sp)
   13266:	|  |  |         jsr 1387c <unlinkVar>
   1326c:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1326e:	|  |  |         move.l 12(sp),8(sp)
   13274:	|  |  |         move.l 1af02 <SysBase>,d0
   1327a:	|  |  |         movea.l d0,a6
   1327c:	|  |  |         movea.l 8(sp),a1
   13280:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   13284:	|  |  |         tst.w 6(sp)
   13288:	|  |  |     /-- bne.s 1328e <deleteVarFromStack+0x84>
   1328a:	|  |  |     |   moveq #1,d0
   1328c:	|  |  |  /--|-- bra.s 132b0 <deleteVarFromStack+0xa6>
            reply++;
   1328e:	|  |  |  |  \-> addq.l #1,16(sp)
   13292:	|  +--|--|----- bra.s 132a2 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   13294:	|  |  \--|----> movea.l 20(sp),a0
   13298:	|  |     |      move.l (a0),d0
   1329a:	|  |     |      move.l d0,d1
   1329c:	|  |     |      addq.l #8,d1
   1329e:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   132a2:	|  \-----|----> movea.l 20(sp),a0
   132a6:	|        |      move.l (a0),d0
   132a8:	\--------|----- bne.w 13226 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   132ac:	         |      move.l 16(sp),d0
}
   132b0:	         \----> movea.l (sp)+,a6
   132b2:	                lea 20(sp),sp
   132b6:	                rts

000132b8 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   132b8:	       movea.l 4(sp),a0
   132bc:	       move.l 4(a0),d0
   132c0:	       cmp.l 8(sp),d0
   132c4:	   /-- bhi.s 132ca <fastArrayGetByIndex+0x12>
   132c6:	   |   moveq #0,d0
   132c8:	/--|-- bra.s 132d8 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   132ca:	|  \-> movea.l 4(sp),a0
   132ce:	|      move.l (a0),d1
   132d0:	|      move.l 8(sp),d0
   132d4:	|      lsl.l #3,d0
   132d6:	|      add.l d1,d0
}
   132d8:	\----> rts

000132da <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   132da:	                lea -32(sp),sp
   132de:	                move.l a6,-(sp)
   132e0:	                move.l a2,-(sp)
    struct persona *p = NULL;
   132e2:	                clr.l 36(sp)

    switch (thisVar->varType) {
   132e6:	                movea.l 44(sp),a0
   132ea:	                move.l (a0),d0
   132ec:	                moveq #8,d1
   132ee:	                cmp.l d0,d1
   132f0:	            /-- beq.s 132fe <getCostumeFromVar+0x24>
   132f2:	            |   moveq #9,d1
   132f4:	            |   cmp.l d0,d1
   132f6:	   /--------|-- beq.w 133ac <getCostumeFromVar+0xd2>
   132fa:	/--|--------|-- bra.w 133b6 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   132fe:	|  |        \-> moveq #8,d0
   13300:	|  |            move.l d0,28(sp)
   13304:	|  |            clr.l 24(sp)
   13308:	|  |            move.l 1af02 <SysBase>,d0
   1330e:	|  |            movea.l d0,a6
   13310:	|  |            move.l 28(sp),d0
   13314:	|  |            move.l 24(sp),d1
   13318:	|  |            jsr -684(a6)
   1331c:	|  |            move.l d0,20(sp)
   13320:	|  |            move.l 20(sp),d0
   13324:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   13328:	|  |        /-- bne.s 13330 <getCostumeFromVar+0x56>
   1332a:	|  |        |   moveq #0,d0
   1332c:	|  |  /-----|-- bra.w 133e0 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   13330:	|  |  |     \-> movea.l 36(sp),a0
   13334:	|  |  |         moveq #1,d1
   13336:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   1333a:	|  |  |         moveq #12,d0
   1333c:	|  |  |         move.l d0,16(sp)
   13340:	|  |  |         clr.l 12(sp)
   13344:	|  |  |         move.l 1af02 <SysBase>,d0
   1334a:	|  |  |         movea.l d0,a6
   1334c:	|  |  |         move.l 16(sp),d0
   13350:	|  |  |         move.l 12(sp),d1
   13354:	|  |  |         jsr -684(a6)
   13358:	|  |  |         move.l d0,8(sp)
   1335c:	|  |  |         move.l 8(sp),d0
   13360:	|  |  |         movea.l 36(sp),a0
   13364:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   13366:	|  |  |         movea.l 36(sp),a0
   1336a:	|  |  |         move.l (a0),d0
   1336c:	|  |  |     /-- bne.s 13372 <getCostumeFromVar+0x98>
   1336e:	|  |  |     |   moveq #0,d0
   13370:	|  |  +-----|-- bra.s 133e0 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   13372:	|  |  |     \-> clr.l 32(sp)
   13376:	|  |  |     /-- bra.s 133a2 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   13378:	|  |  |  /--|-> movea.l 44(sp),a0
   1337c:	|  |  |  |  |   move.l 4(a0),d0
   13380:	|  |  |  |  |   movea.l 36(sp),a0
   13384:	|  |  |  |  |   movea.l (a0),a0
   13386:	|  |  |  |  |   move.l 32(sp),d1
   1338a:	|  |  |  |  |   add.l d1,d1
   1338c:	|  |  |  |  |   add.l d1,d1
   1338e:	|  |  |  |  |   lea (0,a0,d1.l),a2
   13392:	|  |  |  |  |   move.l d0,-(sp)
   13394:	|  |  |  |  |   jsr 853c <copyAnim>
   1339a:	|  |  |  |  |   addq.l #4,sp
   1339c:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1339e:	|  |  |  |  |   addq.l #1,32(sp)
   133a2:	|  |  |  |  \-> moveq #2,d1
   133a4:	|  |  |  |      cmp.l 32(sp),d1
   133a8:	|  |  |  \----- bge.s 13378 <getCostumeFromVar+0x9e>
            }
            break;
   133aa:	|  |  |     /-- bra.s 133dc <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   133ac:	|  \--|-----|-> movea.l 44(sp),a0
   133b0:	|     |     |   move.l 4(a0),d0
   133b4:	|     +-----|-- bra.s 133e0 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   133b6:	\-----|-----|-> movea.l 44(sp),a0
   133ba:	      |     |   move.l (a0),d0
   133bc:	      |     |   add.l d0,d0
   133be:	      |     |   movea.l d0,a1
   133c0:	      |     |   adda.l d0,a1
   133c2:	      |     |   lea 1addc <typeName>,a0
   133c8:	      |     |   move.l (0,a1,a0.l),d0
   133cc:	      |     |   move.l d0,-(sp)
   133ce:	      |     |   pea 1843b <graphics.c.1c13408a+0x253>
   133d4:	      |     |   jsr 157fa <KPrintF>
   133da:	      |     |   addq.l #8,sp
    }

    return p;
   133dc:	      |     \-> move.l 36(sp),d0
}
   133e0:	      \-------> movea.l (sp)+,a2
   133e2:	                movea.l (sp)+,a6
   133e4:	                lea 32(sp),sp
   133e8:	                rts

000133ea <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   133ea:	                lea -96(sp),sp
   133ee:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   133f2:	                move.l 116(sp),-(sp)
   133f6:	                pea 18473 <graphics.c.1c13408a+0x28b>
   133fc:	                jsr 12b5a <joinStrings>
   13402:	                addq.l #8,sp
   13404:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   13408:	            /-- bne.s 13410 <getSavedGamesStack+0x26>
   1340a:	            |   clr.w d0
   1340c:	/-----------|-- bra.w 13624 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   13410:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   13414:	|               move.l #99445,98(sp)
   1341c:	|               moveq #-2,d0
   1341e:	|               move.l d0,94(sp)
   13422:	|               move.l 1af0a <DOSBase>,d0
   13428:	|               movea.l d0,a6
   1342a:	|               move.l 98(sp),d1
   1342e:	|               move.l 94(sp),d2
   13432:	|               jsr -84(a6)
   13436:	|               move.l d0,90(sp)
   1343a:	|               move.l 90(sp),d0
   1343e:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   13442:	|           /-- bne.s 1344a <getSavedGamesStack+0x60>
   13444:	|           |   clr.w d0
   13446:	+-----------|-- bra.w 13624 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1344a:	|           \-> move.l #260,82(sp)
   13452:	|               move.l #65536,78(sp)
   1345a:	|               move.l 1af02 <SysBase>,d0
   13460:	|               movea.l d0,a6
   13462:	|               move.l 82(sp),d0
   13466:	|               move.l 78(sp),d1
   1346a:	|               jsr -684(a6)
   1346e:	|               move.l d0,74(sp)
   13472:	|               move.l 74(sp),d0
   13476:	|               move.l d0,70(sp)
	if (!fib) {
   1347a:	|           /-- bne.s 13498 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1347c:	|           |   move.l 86(sp),22(sp)
   13482:	|           |   move.l 1af0a <DOSBase>,d0
   13488:	|           |   movea.l d0,a6
   1348a:	|           |   move.l 22(sp),d1
   1348e:	|           |   jsr -90(a6)
		return FALSE;
   13492:	|           |   clr.w d0
   13494:	+-----------|-- bra.w 13624 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   13498:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1349c:	|               move.l 86(sp),66(sp)
   134a2:	|               move.l 70(sp),62(sp)
   134a8:	|               move.l 1af0a <DOSBase>,d0
   134ae:	|               movea.l d0,a6
   134b0:	|               move.l 66(sp),d1
   134b4:	|               move.l 62(sp),d2
   134b8:	|               jsr -102(a6)
   134bc:	|               move.l d0,58(sp)
   134c0:	|               move.l 58(sp),d0
   134c4:	|  /----------- beq.w 135d8 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   134c8:	|  |        /-- bra.w 135a4 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   134cc:	|  |  /-----|-> move.l 70(sp),d2
   134d0:	|  |  |     |   addq.l #8,d2
   134d2:	|  |  |     |   move.l 70(sp),d0
   134d6:	|  |  |     |   addq.l #8,d0
   134d8:	|  |  |     |   move.l d0,-(sp)
   134da:	|  |  |     |   jsr 12b1a <strlen>
   134e0:	|  |  |     |   addq.l #4,sp
   134e2:	|  |  |     |   move.l d0,d3
   134e4:	|  |  |     |   move.l 116(sp),-(sp)
   134e8:	|  |  |     |   jsr 12b1a <strlen>
   134ee:	|  |  |     |   addq.l #4,sp
   134f0:	|  |  |     |   move.l d3,d1
   134f2:	|  |  |     |   sub.l d0,d1
   134f4:	|  |  |     |   move.l d2,d0
   134f6:	|  |  |     |   add.l d1,d0
   134f8:	|  |  |     |   move.l 116(sp),-(sp)
   134fc:	|  |  |     |   move.l d0,-(sp)
   134fe:	|  |  |     |   jsr 12ada <strcmp>
   13504:	|  |  |     |   addq.l #8,sp
   13506:	|  |  |     |   tst.l d0
   13508:	|  |  |     +-- bne.w 135a4 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   1350c:	|  |  |     |   move.l 70(sp),d0
   13510:	|  |  |     |   addq.l #8,d0
   13512:	|  |  |     |   move.l d0,-(sp)
   13514:	|  |  |     |   jsr 12b1a <strlen>
   1351a:	|  |  |     |   addq.l #4,sp
   1351c:	|  |  |     |   move.l d0,d2
   1351e:	|  |  |     |   move.l 116(sp),-(sp)
   13522:	|  |  |     |   jsr 12b1a <strlen>
   13528:	|  |  |     |   addq.l #4,sp
   1352a:	|  |  |     |   move.l d0,d1
   1352c:	|  |  |     |   move.l d2,d0
   1352e:	|  |  |     |   sub.l d1,d0
   13530:	|  |  |     |   movea.l 70(sp),a0
   13534:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   13538:	|  |  |     |   move.l 70(sp),d0
   1353c:	|  |  |     |   addq.l #8,d0
   1353e:	|  |  |     |   move.l d0,-(sp)
   13540:	|  |  |     |   jsr 118 <decodeFilename>
   13546:	|  |  |     |   addq.l #4,sp
   13548:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1354c:	|  |  |     |   move.l 42(sp),-(sp)
   13550:	|  |  |     |   lea 18(sp),a0
   13554:	|  |  |     |   move.l a0,-(sp)
   13556:	|  |  |     |   jsr 13850 <makeTextVar>
   1355c:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1355e:	|  |  |     |   move.l 42(sp),38(sp)
   13564:	|  |  |     |   move.l 1af02 <SysBase>,d0
   1356a:	|  |  |     |   movea.l d0,a6
   1356c:	|  |  |     |   movea.l 38(sp),a1
   13570:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   13574:	|  |  |     |   move.l 112(sp),d0
   13578:	|  |  |     |   move.l d0,-(sp)
   1357a:	|  |  |     |   lea 18(sp),a0
   1357e:	|  |  |     |   move.l a0,-(sp)
   13580:	|  |  |     |   jsr 12e6a <addVarToStack>
   13586:	|  |  |     |   addq.l #8,sp
   13588:	|  |  |     |   tst.w d0
   1358a:	|  |  |  /--|-- beq.s 135dc <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1358c:	|  |  |  |  |   movea.l 112(sp),a0
   13590:	|  |  |  |  |   move.l 4(a0),d0
   13594:	|  |  |  |  +-- bne.s 135a4 <getSavedGamesStack+0x1ba>
   13596:	|  |  |  |  |   movea.l 112(sp),a0
   1359a:	|  |  |  |  |   move.l (a0),d0
   1359c:	|  |  |  |  |   movea.l 112(sp),a0
   135a0:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   135a4:	|  |  |  |  \-> move.l 86(sp),54(sp)
   135aa:	|  |  |  |      move.l 70(sp),50(sp)
   135b0:	|  |  |  |      move.l 1af0a <DOSBase>,d0
   135b6:	|  |  |  |      movea.l d0,a6
   135b8:	|  |  |  |      move.l 54(sp),d1
   135bc:	|  |  |  |      move.l 50(sp),d2
   135c0:	|  |  |  |      jsr -108(a6)
   135c4:	|  |  |  |      move.l d0,46(sp)
   135c8:	|  |  |  |      move.l 46(sp),d0
   135cc:	|  |  \--|----- bne.w 134cc <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   135d0:	|  |     |      move.w #1,106(sp)
   135d6:	|  |     |  /-- bra.s 135de <getSavedGamesStack+0x1f4>
	}

cleanup:
   135d8:	|  \-----|--|-> nop
   135da:	|        |  +-- bra.s 135de <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   135dc:	|        \--|-> nop
	FreeVec(fib);
   135de:	|           \-> move.l 70(sp),34(sp)
   135e4:	|               move.l 1af02 <SysBase>,d0
   135ea:	|               movea.l d0,a6
   135ec:	|               movea.l 34(sp),a1
   135f0:	|               jsr -690(a6)
	UnLock(dirLock);
   135f4:	|               move.l 86(sp),30(sp)
   135fa:	|               move.l 1af0a <DOSBase>,d0
   13600:	|               movea.l d0,a6
   13602:	|               move.l 30(sp),d1
   13606:	|               jsr -90(a6)
	FreeVec(pattern);
   1360a:	|               move.l 102(sp),26(sp)
   13610:	|               move.l 1af02 <SysBase>,d0
   13616:	|               movea.l d0,a6
   13618:	|               movea.l 26(sp),a1
   1361c:	|               jsr -690(a6)
	return result;
   13620:	|               move.w 106(sp),d0
}
   13624:	\-------------> movem.l (sp)+,d2-d3/a6
   13628:	                lea 96(sp),sp
   1362c:	                rts

0001362e <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   1362e:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   13630:	       movea.l 20(sp),a0
   13634:	       move.l (a0),d0
   13636:	       cmp.l 16(sp),d0
   1363a:	/----- beq.s 1369e <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   1363c:	|      move.l 16(sp),d0
   13640:	|      add.l d0,d0
   13642:	|      movea.l d0,a1
   13644:	|      adda.l d0,a1
   13646:	|      lea 1addc <typeName>,a0
   1364c:	|      move.l (0,a1,a0.l),d0
   13650:	|      move.l d0,-(sp)
   13652:	|      pea 18477 <graphics.c.1c13408a+0x28f>
   13658:	|      jsr 12b5a <joinStrings>
   1365e:	|      addq.l #8,sp
   13660:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   13664:	|      movea.l 20(sp),a0
   13668:	|      move.l (a0),d0
   1366a:	|      add.l d0,d0
   1366c:	|      movea.l d0,a1
   1366e:	|      adda.l d0,a1
   13670:	|      lea 1addc <typeName>,a0
   13676:	|      move.l (0,a1,a0.l),d0
   1367a:	|      move.l d0,-(sp)
   1367c:	|      pea 184b9 <graphics.c.1c13408a+0x2d1>
   13682:	|      jsr 12b5a <joinStrings>
   13688:	|      addq.l #8,sp
   1368a:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   1368c:	|      move.l (sp),-(sp)
   1368e:	|      move.l 8(sp),-(sp)
   13692:	|      jsr 157fa <KPrintF>
   13698:	|      addq.l #8,sp

		return FALSE;
   1369a:	|      clr.w d0
   1369c:	|  /-- bra.s 136ae <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1369e:	\--|-> movea.l 20(sp),a0
   136a2:	   |   move.l 4(a0),d0
   136a6:	   |   movea.l 12(sp),a0
   136aa:	   |   move.l d0,(a0)
	return TRUE;
   136ac:	   |   moveq #1,d0
}
   136ae:	   \-> addq.l #8,sp
   136b0:	       rts

000136b2 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   136b2:	move.l 8(sp),-(sp)
   136b6:	jsr 5b56 <getNumberedString>
   136bc:	addq.l #4,sp
   136be:	move.l d0,-(sp)
   136c0:	move.l 8(sp),-(sp)
   136c4:	jsr 13850 <makeTextVar>
   136ca:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   136cc:	movea.l 4(sp),a0
   136d0:	move.l 4(a0),d0
   136d4:	sne d0
   136d6:	neg.b d0
   136d8:	move.b d0,d0
   136da:	andi.w #255,d0
}
   136de:	rts

000136e0 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   136e0:	          subq.l #8,sp
    int size = stackSize(stacky);
   136e2:	          move.l 16(sp),-(sp)
   136e6:	          jsr 13f8e <stackSize>
   136ec:	          addq.l #4,sp
   136ee:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   136f2:	          move.l 4(sp),-(sp)
   136f6:	          move.l 16(sp),-(sp)
   136fa:	          jsr 1374a <makeFastArraySize>
   13700:	          addq.l #8,sp
   13702:	          tst.w d0
   13704:	      /-- bne.s 1370a <makeFastArrayFromStack+0x2a>
   13706:	      |   clr.w d0
   13708:	/-----|-- bra.s 13746 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   1370a:	|     \-> movea.l 16(sp),a0
   1370e:	|         move.l (a0),(sp)
    size = 0;
   13710:	|         clr.l 4(sp)
    while (allV) {
   13714:	|     /-- bra.s 13740 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   13716:	|  /--|-> movea.l 12(sp),a0
   1371a:	|  |  |   movea.l 4(a0),a0
   1371e:	|  |  |   move.l (a0),d1
   13720:	|  |  |   move.l 4(sp),d0
   13724:	|  |  |   lsl.l #3,d0
   13726:	|  |  |   add.l d0,d1
   13728:	|  |  |   move.l (sp),d0
   1372a:	|  |  |   move.l d1,-(sp)
   1372c:	|  |  |   move.l d0,-(sp)
   1372e:	|  |  |   jsr 139cc <copyMain>
   13734:	|  |  |   addq.l #8,sp
        size++;
   13736:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   1373a:	|  |  |   movea.l (sp),a0
   1373c:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   13740:	|  |  \-> tst.l (sp)
   13742:	|  \----- bne.s 13716 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   13744:	|         moveq #1,d0
}
   13746:	\-------> addq.l #8,sp
   13748:	          rts

0001374a <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   1374a:	          lea -28(sp),sp
   1374e:	          move.l a6,-(sp)
    if (size < 0) {
   13750:	          tst.l 40(sp)
   13754:	      /-- bge.s 1376a <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   13756:	      |   pea 184fe <graphics.c.1c13408a+0x316>
   1375c:	      |   jsr 157fa <KPrintF>
   13762:	      |   addq.l #4,sp
		return FALSE;
   13764:	      |   clr.w d0
   13766:	/-----|-- bra.w 13848 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1376a:	|     \-> move.l 36(sp),-(sp)
   1376e:	|         jsr 1387c <unlinkVar>
   13774:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   13776:	|         movea.l 36(sp),a0
   1377a:	|         moveq #10,d0
   1377c:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   1377e:	|         moveq #12,d0
   13780:	|         move.l d0,24(sp)
   13784:	|         clr.l 20(sp)
   13788:	|         move.l 1af02 <SysBase>,d0
   1378e:	|         movea.l d0,a6
   13790:	|         move.l 24(sp),d0
   13794:	|         move.l 20(sp),d1
   13798:	|         jsr -684(a6)
   1379c:	|         move.l d0,16(sp)
   137a0:	|         move.l 16(sp),d0
   137a4:	|         movea.l 36(sp),a0
   137a8:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   137ac:	|         movea.l 36(sp),a0
   137b0:	|         move.l 4(a0),d0
   137b4:	|     /-- bne.s 137bc <makeFastArraySize+0x72>
   137b6:	|     |   clr.w d0
   137b8:	+-----|-- bra.w 13848 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   137bc:	|     \-> move.l 40(sp),d0
   137c0:	|         lsl.l #3,d0
   137c2:	|         move.l d0,12(sp)
   137c6:	|         clr.l 8(sp)
   137ca:	|         move.l 1af02 <SysBase>,d0
   137d0:	|         movea.l d0,a6
   137d2:	|         move.l 12(sp),d0
   137d6:	|         move.l 8(sp),d1
   137da:	|         jsr -684(a6)
   137de:	|         move.l d0,4(sp)
   137e2:	|         move.l 4(sp),d0
   137e6:	|         movea.l 36(sp),a0
   137ea:	|         movea.l 4(a0),a0
   137ee:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   137f0:	|         movea.l 36(sp),a0
   137f4:	|         movea.l 4(a0),a0
   137f8:	|         move.l (a0),d0
   137fa:	|     /-- bne.s 13800 <makeFastArraySize+0xb6>
   137fc:	|     |   clr.w d0
   137fe:	+-----|-- bra.s 13848 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   13800:	|     \-> clr.l 28(sp)
   13804:	|     /-- bra.s 13820 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   13806:	|  /--|-> movea.l 36(sp),a0
   1380a:	|  |  |   movea.l 4(a0),a0
   1380e:	|  |  |   move.l (a0),d1
   13810:	|  |  |   move.l 28(sp),d0
   13814:	|  |  |   lsl.l #3,d0
   13816:	|  |  |   movea.l d1,a0
   13818:	|  |  |   adda.l d0,a0
   1381a:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   1381c:	|  |  |   addq.l #1,28(sp)
   13820:	|  |  \-> move.l 28(sp),d0
   13824:	|  |      cmp.l 40(sp),d0
   13828:	|  \----- blt.s 13806 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   1382a:	|         movea.l 36(sp),a0
   1382e:	|         movea.l 4(a0),a0
   13832:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   13838:	|         movea.l 36(sp),a0
   1383c:	|         movea.l 4(a0),a0
   13840:	|         moveq #1,d0
   13842:	|         move.l d0,8(a0)
    return TRUE;
   13846:	|         moveq #1,d0
}
   13848:	\-------> movea.l (sp)+,a6
   1384a:	          lea 28(sp),sp
   1384e:	          rts

00013850 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   13850:	move.l 4(sp),-(sp)
   13854:	jsr 1387c <unlinkVar>
   1385a:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1385c:	movea.l 4(sp),a0
   13860:	moveq #3,d0
   13862:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   13864:	move.l 8(sp),-(sp)
   13868:	jsr b8 <copyString>
   1386e:	addq.l #4,sp
   13870:	movea.l 4(sp),a0
   13874:	move.l d0,4(a0)
}
   13878:	nop
   1387a:	rts

0001387c <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1387c:	                      lea -16(sp),sp
   13880:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   13882:	                      movea.l 24(sp),a0
   13886:	                      move.l (a0),d0
   13888:	                      moveq #10,d1
   1388a:	                      cmp.l d0,d1
   1388c:	            /-------- beq.w 13944 <unlinkVar+0xc8>
   13890:	            |         moveq #10,d1
   13892:	            |         cmp.l d0,d1
   13894:	/-----------|-------- bcs.w 139b8 <unlinkVar+0x13c>
   13898:	|           |         moveq #8,d1
   1389a:	|           |         cmp.l d0,d1
   1389c:	|  /--------|-------- beq.w 139a4 <unlinkVar+0x128>
   138a0:	|  |        |         moveq #8,d1
   138a2:	|  |        |         cmp.l d0,d1
   138a4:	+--|--------|-------- bcs.w 139b8 <unlinkVar+0x13c>
   138a8:	|  |        |         moveq #3,d1
   138aa:	|  |        |         cmp.l d0,d1
   138ac:	|  |        |     /-- beq.s 138b8 <unlinkVar+0x3c>
   138ae:	|  |        |     |   moveq #6,d1
   138b0:	|  |        |     |   cmp.l d0,d1
   138b2:	|  |        |  /--|-- beq.s 138de <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   138b4:	+--|--------|--|--|-- bra.w 139b8 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   138b8:	|  |        |  |  \-> movea.l 24(sp),a0
   138bc:	|  |        |  |      move.l 4(a0),4(sp)
   138c2:	|  |        |  |      move.l 1af02 <SysBase>,d0
   138c8:	|  |        |  |      movea.l d0,a6
   138ca:	|  |        |  |      movea.l 4(sp),a1
   138ce:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   138d2:	|  |        |  |      movea.l 24(sp),a0
   138d6:	|  |        |  |      clr.l 4(a0)
		break;
   138da:	|  |  /-----|--|----- bra.w 139c2 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   138de:	|  |  |     |  \----> movea.l 24(sp),a0
   138e2:	|  |  |     |         movea.l 4(a0),a0
   138e6:	|  |  |     |         move.l 8(a0),d0
   138ea:	|  |  |     |         subq.l #1,d0
   138ec:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   138f0:	|  |  |     |         movea.l 24(sp),a0
   138f4:	|  |  |     |         movea.l 4(a0),a0
   138f8:	|  |  |     |         move.l 8(a0),d0
   138fc:	|  |  |  /--|-------- bgt.w 139bc <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   13900:	|  |  |  |  |     /-- bra.s 13914 <unlinkVar+0x98>
   13902:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   13906:	|  |  |  |  |  |  |   move.l 4(a0),d0
   1390a:	|  |  |  |  |  |  |   move.l d0,-(sp)
   1390c:	|  |  |  |  |  |  |   jsr 13fb2 <trimStack>
   13912:	|  |  |  |  |  |  |   addq.l #4,sp
   13914:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   13918:	|  |  |  |  |  |      movea.l 4(a0),a0
   1391c:	|  |  |  |  |  |      move.l (a0),d0
   1391e:	|  |  |  |  |  \----- bne.s 13902 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   13920:	|  |  |  |  |         movea.l 24(sp),a0
   13924:	|  |  |  |  |         move.l 4(a0),8(sp)
   1392a:	|  |  |  |  |         move.l 1af02 <SysBase>,d0
   13930:	|  |  |  |  |         movea.l d0,a6
   13932:	|  |  |  |  |         movea.l 8(sp),a1
   13936:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   1393a:	|  |  |  |  |         movea.l 24(sp),a0
   1393e:	|  |  |  |  |         clr.l 4(a0)
		break;
   13942:	|  |  |  +--|-------- bra.s 139bc <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   13944:	|  |  |  |  \-------> movea.l 24(sp),a0
   13948:	|  |  |  |            movea.l 4(a0),a0
   1394c:	|  |  |  |            move.l 8(a0),d0
   13950:	|  |  |  |            subq.l #1,d0
   13952:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   13956:	|  |  |  |            movea.l 24(sp),a0
   1395a:	|  |  |  |            movea.l 4(a0),a0
   1395e:	|  |  |  |            move.l 8(a0),d0
   13962:	|  |  |  |        /-- bgt.s 139c0 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   13964:	|  |  |  |        |   movea.l 24(sp),a0
   13968:	|  |  |  |        |   movea.l 4(a0),a0
   1396c:	|  |  |  |        |   move.l (a0),16(sp)
   13970:	|  |  |  |        |   move.l 1af02 <SysBase>,d0
   13976:	|  |  |  |        |   movea.l d0,a6
   13978:	|  |  |  |        |   movea.l 16(sp),a1
   1397c:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   13980:	|  |  |  |        |   movea.l 24(sp),a0
   13984:	|  |  |  |        |   move.l 4(a0),12(sp)
   1398a:	|  |  |  |        |   move.l 1af02 <SysBase>,d0
   13990:	|  |  |  |        |   movea.l d0,a6
   13992:	|  |  |  |        |   movea.l 12(sp),a1
   13996:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   1399a:	|  |  |  |        |   movea.l 24(sp),a0
   1399e:	|  |  |  |        |   clr.l 4(a0)
		break;
   139a2:	|  |  |  |        +-- bra.s 139c0 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   139a4:	|  \--|--|--------|-> movea.l 24(sp),a0
   139a8:	|     |  |        |   move.l 4(a0),d0
   139ac:	|     |  |        |   move.l d0,-(sp)
   139ae:	|     |  |        |   jsr 8908 <deleteAnim>
   139b4:	|     |  |        |   addq.l #4,sp
		break;
   139b6:	|     +--|--------|-- bra.s 139c2 <unlinkVar+0x146>
		break;
   139b8:	\-----|--|--------|-> nop
   139ba:	      +--|--------|-- bra.s 139c2 <unlinkVar+0x146>
		break;
   139bc:	      |  \--------|-> nop
   139be:	      +-----------|-- bra.s 139c2 <unlinkVar+0x146>
		break;
   139c0:	      |           \-> nop
	}
}
   139c2:	      \-------------> nop
   139c4:	                      movea.l (sp)+,a6
   139c6:	                      lea 16(sp),sp
   139ca:	                      rts

000139cc <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   139cc:	       movea.l 4(sp),a0
   139d0:	       move.l (a0),d0
   139d2:	       movea.l 8(sp),a0
   139d6:	       move.l d0,(a0)
	switch (to->varType) {
   139d8:	       movea.l 8(sp),a0
   139dc:	       move.l (a0),d0
   139de:	       moveq #10,d1
   139e0:	       cmp.l d0,d1
   139e2:	/----- bcs.w 13ad4 <copyMain+0x108>
   139e6:	|      add.l d0,d0
   139e8:	|      movea.l d0,a0
   139ea:	|      adda.l #80374,a0
   139f0:	|      move.w (a0),d0
   139f2:	|      jmp (139f6 <copyMain+0x2a>,pc,d0.w)
   139f6:	|      .short 0x00da
   139f8:	|      ori.b #22,(a6)
   139fc:	|      ori.w #22,(a4)
   13a00:	|      ori.b #-126,(a6)
   13a04:	|      ori.b #-68,(a6)
   13a08:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   13a10:	|      move.l 4(a0),d0
   13a14:	|      movea.l 8(sp),a0
   13a18:	|      move.l d0,4(a0)
		return TRUE;
   13a1c:	|      moveq #1,d0
   13a1e:	|  /-- bra.w 13ae6 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   13a22:	|  |   movea.l 4(sp),a0
   13a26:	|  |   move.l 4(a0),d0
   13a2a:	|  |   movea.l 8(sp),a0
   13a2e:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   13a32:	|  |   movea.l 8(sp),a0
   13a36:	|  |   movea.l 4(a0),a0
   13a3a:	|  |   move.l 8(a0),d0
   13a3e:	|  |   addq.l #1,d0
   13a40:	|  |   move.l d0,8(a0)
		return TRUE;
   13a44:	|  |   moveq #1,d0
   13a46:	|  +-- bra.w 13ae6 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   13a4a:	|  |   movea.l 4(sp),a0
   13a4e:	|  |   move.l 4(a0),d0
   13a52:	|  |   move.l d0,-(sp)
   13a54:	|  |   jsr b8 <copyString>
   13a5a:	|  |   addq.l #4,sp
   13a5c:	|  |   movea.l 8(sp),a0
   13a60:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   13a64:	|  |   movea.l 8(sp),a0
   13a68:	|  |   move.l 4(a0),d0
   13a6c:	|  |   sne d0
   13a6e:	|  |   neg.b d0
   13a70:	|  |   move.b d0,d0
   13a72:	|  |   andi.w #255,d0
   13a76:	|  +-- bra.s 13ae6 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   13a78:	|  |   movea.l 4(sp),a0
   13a7c:	|  |   move.l 4(a0),d0
   13a80:	|  |   movea.l 8(sp),a0
   13a84:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   13a88:	|  |   movea.l 8(sp),a0
   13a8c:	|  |   movea.l 4(a0),a0
   13a90:	|  |   move.l 8(a0),d0
   13a94:	|  |   addq.l #1,d0
   13a96:	|  |   move.l d0,8(a0)
		return TRUE;
   13a9a:	|  |   moveq #1,d0
   13a9c:	|  +-- bra.s 13ae6 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   13a9e:	|  |   movea.l 4(sp),a0
   13aa2:	|  |   move.l 4(a0),d0
   13aa6:	|  |   movea.l 8(sp),a0
   13aaa:	|  |   move.l d0,4(a0)
		return TRUE;
   13aae:	|  |   moveq #1,d0
   13ab0:	|  +-- bra.s 13ae6 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   13ab2:	|  |   movea.l 4(sp),a0
   13ab6:	|  |   move.l 4(a0),d0
   13aba:	|  |   move.l d0,-(sp)
   13abc:	|  |   jsr 853c <copyAnim>
   13ac2:	|  |   addq.l #4,sp
   13ac4:	|  |   movea.l 8(sp),a0
   13ac8:	|  |   move.l d0,4(a0)
		return TRUE;
   13acc:	|  |   moveq #1,d0
   13ace:	|  +-- bra.s 13ae6 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   13ad0:	|  |   moveq #1,d0
   13ad2:	|  +-- bra.s 13ae6 <copyMain+0x11a>

		default:
		break;
   13ad4:	\--|-> nop
	}
	KPrintF("Unknown value type");
   13ad6:	   |   pea 1854f <graphics.c.1c13408a+0x367>
   13adc:	   |   jsr 157fa <KPrintF>
   13ae2:	   |   addq.l #4,sp
	return FALSE;
   13ae4:	   |   clr.w d0
}
   13ae6:	   \-> rts

00013ae8 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   13ae8:	move.l 8(sp),-(sp)
   13aec:	jsr 1387c <unlinkVar>
   13af2:	addq.l #4,sp
	return copyMain(from, to);
   13af4:	move.l 8(sp),-(sp)
   13af8:	move.l 8(sp),-(sp)
   13afc:	jsr 139cc <copyMain>
   13b02:	addq.l #8,sp
}
   13b04:	rts

00013b06 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   13b06:	       movea.l 4(sp),a0
   13b0a:	       move.l (a0),d0
   13b0c:	       moveq #8,d1
   13b0e:	       cmp.l d0,d1
   13b10:	   /-- bne.s 13b26 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   13b12:	   |   movea.l 4(sp),a0
   13b16:	   |   move.l 4(a0),d0
   13b1a:	   |   move.l d0,-(sp)
   13b1c:	   |   jsr 853c <copyAnim>
   13b22:	   |   addq.l #4,sp
   13b24:	/--|-- bra.s 13b6c <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   13b26:	|  \-> movea.l 4(sp),a0
   13b2a:	|      move.l (a0),d0
   13b2c:	|      moveq #1,d1
   13b2e:	|      cmp.l d0,d1
   13b30:	|  /-- bne.s 13b44 <getAnimationFromVar+0x3e>
   13b32:	|  |   movea.l 4(sp),a0
   13b36:	|  |   move.l 4(a0),d0
   13b3a:	|  +-- bne.s 13b44 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   13b3c:	|  |   jsr 9c7c <makeNullAnim>
   13b42:	+--|-- bra.s 13b6c <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   13b44:	|  \-> movea.l 4(sp),a0
   13b48:	|      move.l (a0),d0
   13b4a:	|      add.l d0,d0
   13b4c:	|      movea.l d0,a1
   13b4e:	|      adda.l d0,a1
   13b50:	|      lea 1addc <typeName>,a0
   13b56:	|      move.l (0,a1,a0.l),d0
   13b5a:	|      move.l d0,-(sp)
   13b5c:	|      pea 1843b <graphics.c.1c13408a+0x253>
   13b62:	|      jsr 157fa <KPrintF>
   13b68:	|      addq.l #8,sp
	return NULL;
   13b6a:	|      moveq #0,d0
}
   13b6c:	\----> rts

00013b6e <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   13b6e:	       movea.l 4(sp),a0
   13b72:	       move.l (a0),d0
   13b74:	       moveq #10,d1
   13b76:	       cmp.l d0,d1
   13b78:	/----- bcs.w 13bfe <getBoolean+0x90>
   13b7c:	|      add.l d0,d0
   13b7e:	|      movea.l d0,a0
   13b80:	|      adda.l #80780,a0
   13b86:	|      move.w (a0),d0
   13b88:	|      jmp (13b8c <getBoolean+0x1e>,pc,d0.w)
   13b8c:	|      ori.b #26,(a6)
   13b90:	|      ori.w #68,(114,a2,d0.w)
   13b96:	|      ori.w #46,(114,a2,d0.w)
   13b9c:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   13ba2:	|      clr.w d0
   13ba4:	|  /-- bra.s 13c02 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   13ba6:	|  |   movea.l 4(sp),a0
   13baa:	|  |   move.l 4(a0),d0
   13bae:	|  |   sne d0
   13bb0:	|  |   neg.b d0
   13bb2:	|  |   move.b d0,d0
   13bb4:	|  |   andi.w #255,d0
   13bb8:	|  +-- bra.s 13c02 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   13bba:	|  |   movea.l 4(sp),a0
   13bbe:	|  |   movea.l 4(a0),a0
   13bc2:	|  |   move.l (a0),d0
   13bc4:	|  |   sne d0
   13bc6:	|  |   neg.b d0
   13bc8:	|  |   move.b d0,d0
   13bca:	|  |   andi.w #255,d0
   13bce:	|  +-- bra.s 13c02 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   13bd0:	|  |   movea.l 4(sp),a0
   13bd4:	|  |   movea.l 4(a0),a0
   13bd8:	|  |   move.b (a0),d0
   13bda:	|  |   sne d0
   13bdc:	|  |   neg.b d0
   13bde:	|  |   move.b d0,d0
   13be0:	|  |   andi.w #255,d0
   13be4:	|  +-- bra.s 13c02 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   13be6:	|  |   movea.l 4(sp),a0
   13bea:	|  |   movea.l 4(a0),a0
   13bee:	|  |   move.l 4(a0),d0
   13bf2:	|  |   sne d0
   13bf4:	|  |   neg.b d0
   13bf6:	|  |   move.b d0,d0
   13bf8:	|  |   andi.w #255,d0
   13bfc:	|  +-- bra.s 13c02 <getBoolean+0x94>

		default:
		break;
   13bfe:	\--|-> nop
	}
	return TRUE;
   13c00:	   |   moveq #1,d0
}
   13c02:	   \-> rts

00013c04 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   13c04:	      /----------> lea -76(sp),sp
   13c08:	      |            move.l a6,-(sp)
	switch (from->varType) {
   13c0a:	      |            movea.l 84(sp),a0
   13c0e:	      |            move.l (a0),d0
   13c10:	      |            moveq #10,d1
   13c12:	      |            cmp.l d0,d1
   13c14:	/-----|----------- bcs.w 13eb2 <getTextFromAnyVar+0x2ae>
   13c18:	|     |            add.l d0,d0
   13c1a:	|     |            movea.l d0,a0
   13c1c:	|     |            adda.l #80936,a0
   13c22:	|     |            move.w (a0),d0
   13c24:	|     |            jmp (13c28 <getTextFromAnyVar+0x24>,pc,d0.w)
   13c28:	|     |            .short 0x028a
   13c2a:	|     |            bset d0,(a0)+
   13c2c:	|     |            .short 0x028a
   13c2e:	|     |            ori.b #-118,(a6)
   13c32:	|     |            andi.b #8,ccr
   13c36:	|     |            andi.w #650,-(a0)
   13c3a:	|     |            .short 0x028a
   13c3c:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   13c42:	|     |            move.l 4(a0),d0
   13c46:	|     |            move.l d0,-(sp)
   13c48:	|     |            jsr b8 <copyString>
   13c4e:	|     |            addq.l #4,sp
   13c50:	|  /--|----------- bra.w 13ed4 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   13c54:	|  |  |            pea 18562 <graphics.c.1c13408a+0x37a>
   13c5a:	|  |  |            jsr b8 <copyString>
   13c60:	|  |  |            addq.l #4,sp
   13c62:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13c66:	|  |  |            clr.l 72(sp)
   13c6a:	|  |  |     /----- bra.w 13d14 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   13c6e:	|  |  |  /--|----> pea 18568 <graphics.c.1c13408a+0x380>
   13c74:	|  |  |  |  |      move.l 80(sp),-(sp)
   13c78:	|  |  |  |  |      jsr 12b5a <joinStrings>
   13c7e:	|  |  |  |  |      addq.l #8,sp
   13c80:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   13c84:	|  |  |  |  |  /-- bne.s 13c8c <getTextFromAnyVar+0x88>
   13c86:	|  |  |  |  |  |   moveq #0,d0
   13c88:	|  +--|--|--|--|-- bra.w 13ed4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13c8c:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   13c92:	|  |  |  |  |      move.l 1af02 <SysBase>,d0
   13c98:	|  |  |  |  |      movea.l d0,a6
   13c9a:	|  |  |  |  |      movea.l 56(sp),a1
   13c9e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   13ca2:	|  |  |  |  |      movea.l 84(sp),a0
   13ca6:	|  |  |  |  |      movea.l 4(a0),a0
   13caa:	|  |  |  |  |      move.l (a0),d1
   13cac:	|  |  |  |  |      move.l 72(sp),d0
   13cb0:	|  |  |  |  |      lsl.l #3,d0
   13cb2:	|  |  |  |  |      add.l d1,d0
   13cb4:	|  |  |  |  |      move.l d0,-(sp)
   13cb6:	|  |  +--|--|----- jsr 13c04 <getTextFromAnyVar>(pc)
   13cba:	|  |  |  |  |      addq.l #4,sp
   13cbc:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   13cc0:	|  |  |  |  |      move.l 52(sp),-(sp)
   13cc4:	|  |  |  |  |      move.l 64(sp),-(sp)
   13cc8:	|  |  |  |  |      jsr 12b5a <joinStrings>
   13cce:	|  |  |  |  |      addq.l #8,sp
   13cd0:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   13cd4:	|  |  |  |  |  /-- bne.s 13cdc <getTextFromAnyVar+0xd8>
   13cd6:	|  |  |  |  |  |   moveq #0,d0
   13cd8:	|  +--|--|--|--|-- bra.w 13ed4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   13cdc:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   13ce2:	|  |  |  |  |      move.l 1af02 <SysBase>,d0
   13ce8:	|  |  |  |  |      movea.l d0,a6
   13cea:	|  |  |  |  |      movea.l 48(sp),a1
   13cee:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   13cf2:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   13cf6:	|  |  |  |  |      move.l 60(sp),44(sp)
   13cfc:	|  |  |  |  |      move.l 1af02 <SysBase>,d0
   13d02:	|  |  |  |  |      movea.l d0,a6
   13d04:	|  |  |  |  |      movea.l 44(sp),a1
   13d08:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   13d0c:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13d10:	|  |  |  |  |      addq.l #1,72(sp)
   13d14:	|  |  |  |  \----> movea.l 84(sp),a0
   13d18:	|  |  |  |         movea.l 4(a0),a0
   13d1c:	|  |  |  |         move.l 4(a0),d0
   13d20:	|  |  |  |         cmp.l 72(sp),d0
   13d24:	|  |  |  \-------- bgt.w 13c6e <getTextFromAnyVar+0x6a>
			}
			return builder;
   13d28:	|  |  |            move.l 76(sp),d0
   13d2c:	|  +--|----------- bra.w 13ed4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   13d30:	|  |  |            pea 1856a <graphics.c.1c13408a+0x382>
   13d36:	|  |  |            jsr b8 <copyString>
   13d3c:	|  |  |            addq.l #4,sp
   13d3e:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   13d42:	|  |  |            movea.l 84(sp),a0
   13d46:	|  |  |            movea.l 4(a0),a0
   13d4a:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   13d4e:	|  |  |     /----- bra.w 13df0 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   13d52:	|  |  |  /--|----> pea 18568 <graphics.c.1c13408a+0x380>
   13d58:	|  |  |  |  |      move.l 72(sp),-(sp)
   13d5c:	|  |  |  |  |      jsr 12b5a <joinStrings>
   13d62:	|  |  |  |  |      addq.l #8,sp
   13d64:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   13d68:	|  |  |  |  |  /-- bne.s 13d70 <getTextFromAnyVar+0x16c>
   13d6a:	|  |  |  |  |  |   moveq #0,d0
   13d6c:	|  +--|--|--|--|-- bra.w 13ed4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13d70:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   13d76:	|  |  |  |  |      move.l 1af02 <SysBase>,d0
   13d7c:	|  |  |  |  |      movea.l d0,a6
   13d7e:	|  |  |  |  |      movea.l 32(sp),a1
   13d82:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   13d86:	|  |  |  |  |      move.l 64(sp),d0
   13d8a:	|  |  |  |  |      move.l d0,-(sp)
   13d8c:	|  |  \--|--|----- jsr 13c04 <getTextFromAnyVar>(pc)
   13d90:	|  |     |  |      addq.l #4,sp
   13d92:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   13d96:	|  |     |  |      move.l 28(sp),-(sp)
   13d9a:	|  |     |  |      move.l 40(sp),-(sp)
   13d9e:	|  |     |  |      jsr 12b5a <joinStrings>
   13da4:	|  |     |  |      addq.l #8,sp
   13da6:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   13daa:	|  |     |  |  /-- bne.s 13db2 <getTextFromAnyVar+0x1ae>
   13dac:	|  |     |  |  |   moveq #0,d0
   13dae:	|  +-----|--|--|-- bra.w 13ed4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   13db2:	|  |     |  |  \-> move.l 28(sp),24(sp)
   13db8:	|  |     |  |      move.l 1af02 <SysBase>,d0
   13dbe:	|  |     |  |      movea.l d0,a6
   13dc0:	|  |     |  |      movea.l 24(sp),a1
   13dc4:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   13dc8:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   13dcc:	|  |     |  |      move.l 36(sp),20(sp)
   13dd2:	|  |     |  |      move.l 1af02 <SysBase>,d0
   13dd8:	|  |     |  |      movea.l d0,a6
   13dda:	|  |     |  |      movea.l 20(sp),a1
   13dde:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   13de2:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   13de6:	|  |     |  |      movea.l 64(sp),a0
   13dea:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   13df0:	|  |     |  \----> tst.l 64(sp)
   13df4:	|  |     \-------- bne.w 13d52 <getTextFromAnyVar+0x14e>
			}
			return builder;
   13df8:	|  |               move.l 68(sp),d0
   13dfc:	|  +-------------- bra.w 13ed4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   13e00:	|  |               moveq #10,d0
   13e02:	|  |               move.l d0,16(sp)
   13e06:	|  |               clr.l 12(sp)
   13e0a:	|  |               move.l 1af02 <SysBase>,d0
   13e10:	|  |               movea.l d0,a6
   13e12:	|  |               move.l 16(sp),d0
   13e16:	|  |               move.l 12(sp),d1
   13e1a:	|  |               jsr -684(a6)
   13e1e:	|  |               move.l d0,8(sp)
   13e22:	|  |               move.l 8(sp),d0
   13e26:	|  |               move.l d0,4(sp)
			if (! buff) {
   13e2a:	|  |           /-- bne.s 13e40 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   13e2c:	|  |           |   pea 18571 <graphics.c.1c13408a+0x389>
   13e32:	|  |           |   jsr 157fa <KPrintF>
   13e38:	|  |           |   addq.l #4,sp
				return NULL;
   13e3a:	|  |           |   moveq #0,d0
   13e3c:	|  +-----------|-- bra.w 13ed4 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   13e40:	|  |           \-> movea.l 84(sp),a0
   13e44:	|  |               move.l 4(a0),d0
   13e48:	|  |               move.l d0,-(sp)
   13e4a:	|  |               pea 1859b <graphics.c.1c13408a+0x3b3>
   13e50:	|  |               move.l 12(sp),-(sp)
   13e54:	|  |               jsr 12e38 <sprintf>
   13e5a:	|  |               lea 12(sp),sp
			return buff;
   13e5e:	|  |               move.l 4(sp),d0
   13e62:	|  +-------------- bra.s 13ed4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   13e64:	|  |               movea.l 84(sp),a0
   13e68:	|  |               move.l 4(a0),d0
   13e6c:	|  |               move.l d0,-(sp)
   13e6e:	|  |               jsr 302a <resourceNameFromNum>
   13e74:	|  |               addq.l #4,sp
   13e76:	|  |               move.l d0,-(sp)
   13e78:	|  |               pea 16f65 <PutChar+0xc97>
   13e7e:	|  |               jsr 12b5a <joinStrings>
   13e84:	|  |               addq.l #8,sp
   13e86:	|  +-------------- bra.s 13ed4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   13e88:	|  |               movea.l 84(sp),a0
   13e8c:	|  |               move.l 4(a0),d0
   13e90:	|  |               move.l d0,-(sp)
   13e92:	|  |               jsr c464 <findObjectType>
   13e98:	|  |               addq.l #4,sp
   13e9a:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   13e9e:	+--|-------------- beq.s 13eb2 <getTextFromAnyVar+0x2ae>
   13ea0:	|  |               movea.l 40(sp),a0
   13ea4:	|  |               move.l (a0),d0
   13ea6:	|  |               move.l d0,-(sp)
   13ea8:	|  |               jsr b8 <copyString>
   13eae:	|  |               addq.l #4,sp
   13eb0:	|  +-------------- bra.s 13ed4 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   13eb2:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   13eb4:	   |               movea.l 84(sp),a0
   13eb8:	   |               move.l (a0),d0
   13eba:	   |               add.l d0,d0
   13ebc:	   |               movea.l d0,a1
   13ebe:	   |               adda.l d0,a1
   13ec0:	   |               lea 1addc <typeName>,a0
   13ec6:	   |               move.l (0,a1,a0.l),d0
   13eca:	   |               move.l d0,-(sp)
   13ecc:	   |               jsr b8 <copyString>
   13ed2:	   |               addq.l #4,sp
}
   13ed4:	   \-------------> movea.l (sp)+,a6
   13ed6:	                   lea 76(sp),sp
   13eda:	                   rts

00013edc <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   13edc:	move.l 4(sp),-(sp)
   13ee0:	jsr 1387c <unlinkVar>
   13ee6:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   13ee8:	movea.l 4(sp),a0
   13eec:	moveq #8,d0
   13eee:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   13ef0:	movea.l 4(sp),a0
   13ef4:	move.l 8(sp),4(a0)
}
   13efa:	nop
   13efc:	rts

00013efe <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   13efe:	move.l 4(sp),-(sp)
   13f02:	jsr 1387c <unlinkVar>
   13f08:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   13f0a:	movea.l 4(sp),a0
   13f0e:	moveq #9,d0
   13f10:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   13f12:	movea.l 4(sp),a0
   13f16:	move.l 8(sp),4(a0)
}
   13f1c:	nop
   13f1e:	rts

00013f20 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   13f20:	move.l 4(sp),-(sp)
   13f24:	jsr 1387c <unlinkVar>
   13f2a:	addq.l #4,sp
	thisVar->varType = vT;
   13f2c:	movea.l 4(sp),a0
   13f30:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   13f34:	movea.l 4(sp),a0
   13f38:	move.l 12(sp),4(a0)
}
   13f3e:	nop
   13f40:	rts

00013f42 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   13f42:	      /-- bra.s 13f54 <stackGetByIndex+0x12>
        vS = vS->next;
   13f44:	/-----|-> movea.l 4(sp),a0
   13f48:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   13f4e:	|     +-- bne.s 13f54 <stackGetByIndex+0x12>
            return NULL;
   13f50:	|     |   moveq #0,d0
   13f52:	|  /--|-- bra.s 13f68 <stackGetByIndex+0x26>
    while (theIndex--) {
   13f54:	|  |  \-> move.l 8(sp),d0
   13f58:	|  |      move.l d0,d1
   13f5a:	|  |      subq.l #1,d1
   13f5c:	|  |      move.l d1,8(sp)
   13f60:	|  |      tst.l d0
   13f62:	\--|----- bne.s 13f44 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   13f64:	   |      move.l 4(sp),d0
}
   13f68:	   \----> rts

00013f6a <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   13f6a:	          tst.l 4(sp)
   13f6e:	      /-- bne.s 13f7e <stackFindLast+0x14>
		return NULL;
   13f70:	      |   moveq #0,d0
   13f72:	/-----|-- bra.s 13f8c <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   13f74:	|  /--|-> movea.l 4(sp),a0
   13f78:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   13f7e:	|  |  \-> movea.l 4(sp),a0
   13f82:	|  |      move.l 8(a0),d0
   13f86:	|  \----- bne.s 13f74 <stackFindLast+0xa>

	return hunt;
   13f88:	|         move.l 4(sp),d0
}
   13f8c:	\-------> rts

00013f8e <stackSize>:

int stackSize (const struct stackHandler * me) {
   13f8e:	       subq.l #8,sp
	int r = 0;
   13f90:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   13f94:	       movea.l 12(sp),a0
   13f98:	       move.l (a0),(sp)
	while (a) {
   13f9a:	   /-- bra.s 13fa6 <stackSize+0x18>
		r ++;
   13f9c:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   13fa0:	|  |   movea.l (sp),a0
   13fa2:	|  |   move.l 8(a0),(sp)
	while (a) {
   13fa6:	|  \-> tst.l (sp)
   13fa8:	\----- bne.s 13f9c <stackSize+0xe>
	}
	return r;
   13faa:	       move.l 4(sp),d0
}
   13fae:	       addq.l #8,sp
   13fb0:	       rts

00013fb2 <trimStack>:

void trimStack (struct variableStack ** stack) {
   13fb2:	subq.l #8,sp
   13fb4:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   13fb6:	movea.l 16(sp),a0
   13fba:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   13fbe:	movea.l 16(sp),a0
   13fc2:	movea.l (a0),a0
   13fc4:	move.l 8(a0),d0
   13fc8:	movea.l 16(sp),a0
   13fcc:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   13fce:	move.l 8(sp),d0
   13fd2:	move.l d0,-(sp)
   13fd4:	jsr 1387c <unlinkVar>
   13fda:	addq.l #4,sp
	FreeVec(killMe);
   13fdc:	move.l 8(sp),4(sp)
   13fe2:	move.l 1af02 <SysBase>,d0
   13fe8:	movea.l d0,a6
   13fea:	movea.l 4(sp),a1
   13fee:	jsr -690(a6)
   13ff2:	nop
   13ff4:	movea.l (sp)+,a6
   13ff6:	addq.l #8,sp
   13ff8:	rts

00013ffa <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   13ffa:	pea 1859e <graphics.c.1c13408a+0x3b6>
   14000:	jsr 157fa <KPrintF>
   14006:	addq.l #4,sp
	return FALSE;
   14008:	clr.w d0
}
   1400a:	rts

0001400c <stringWidth>:

int stringWidth (char * theText) {
   1400c:	       subq.l #8,sp
	int a = 0;
   1400e:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   14012:	       clr.l (sp)

	if (! fontTableSize) return 0;
   14014:	       move.l 1b05a <fontTableSize>,d0
   1401a:	/----- bne.s 14020 <stringWidth+0x14>
   1401c:	|      moveq #0,d0
   1401e:	|  /-- bra.s 14022 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   14020:	\--|-> move.l (sp),d0
}
   14022:	   \-> addq.l #8,sp
   14024:	       rts

00014026 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   14026:	pea 185c5 <graphics.c.1c13408a+0x3dd>
   1402c:	jsr 157fa <KPrintF>
   14032:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   14034:	moveq #1,d0
}
   14036:	rts

00014038 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   14038:	       lea -16(sp),sp
   1403c:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   1403e:	       moveq #36,d0
   14040:	       move.l d0,16(sp)
   14044:	       clr.l 12(sp)
   14048:	       move.l 1af02 <SysBase>,d0
   1404e:	       movea.l d0,a6
   14050:	       move.l 16(sp),d0
   14054:	       move.l 12(sp),d1
   14058:	       jsr -684(a6)
   1405c:	       move.l d0,8(sp)
   14060:	       move.l 8(sp),d0
   14064:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   14068:	   /-- bne.s 14070 <addScreenRegion+0x38>
   1406a:	   |   clr.w d0
   1406c:	/--|-- bra.w 140f0 <addScreenRegion+0xb8>
    newRegion->di = di;
   14070:	|  \-> movea.l 4(sp),a0
   14074:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   1407a:	|      movea.l 4(sp),a0
   1407e:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   14082:	|      movea.l 4(sp),a0
   14086:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   1408c:	|      movea.l 4(sp),a0
   14090:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   14096:	|      movea.l 4(sp),a0
   1409a:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   140a0:	|      movea.l 4(sp),a0
   140a4:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   140aa:	|      movea.l 4(sp),a0
   140ae:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   140b4:	|      move.l 52(sp),-(sp)
   140b8:	|      jsr c554 <loadObjectType>
   140be:	|      addq.l #4,sp
   140c0:	|      movea.l 4(sp),a0
   140c4:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   140c8:	|      move.l 1b05e <allScreenRegions>,d0
   140ce:	|      movea.l 4(sp),a0
   140d2:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   140d6:	|      move.l 4(sp),1b05e <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   140de:	|      movea.l 4(sp),a0
   140e2:	|      move.l 28(a0),d0
   140e6:	|      sne d0
   140e8:	|      neg.b d0
   140ea:	|      move.b d0,d0
   140ec:	|      andi.w #255,d0
}
   140f0:	\----> movea.l (sp)+,a6
   140f2:	       lea 16(sp),sp
   140f6:	       rts

000140f8 <getOverRegion>:

void getOverRegion () {
   140f8:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   140fa:	             move.l 1b05e <allScreenRegions>,(sp)
	while (thisRegion) {
   14100:	   /-------- bra.s 1416e <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   14102:	/--|-------> move.l 1aebe <input+0xa>,d0
   14108:	|  |         movea.l (sp),a0
   1410a:	|  |         movea.l (a0),a0
   1410c:	|  |         move.l 1b014 <cameraX>,d1
   14112:	|  |         suba.l d1,a0
   14114:	|  |         cmpa.l d0,a0
   14116:	|  |  /----- bgt.s 14168 <getOverRegion+0x70>
   14118:	|  |  |      move.l 1aec2 <input+0xe>,d0
   1411e:	|  |  |      movea.l (sp),a0
   14120:	|  |  |      movea.l 4(a0),a0
   14124:	|  |  |      move.l 1b018 <cameraY>,d1
   1412a:	|  |  |      suba.l d1,a0
   1412c:	|  |  |      cmpa.l d0,a0
   1412e:	|  |  +----- bgt.s 14168 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   14130:	|  |  |      move.l 1aebe <input+0xa>,d0
   14136:	|  |  |      movea.l (sp),a0
   14138:	|  |  |      movea.l 8(a0),a0
   1413c:	|  |  |      move.l 1b014 <cameraX>,d1
   14142:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   14144:	|  |  |      cmpa.l d0,a0
   14146:	|  |  +----- blt.s 14168 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   14148:	|  |  |      move.l 1aec2 <input+0xe>,d0
   1414e:	|  |  |      movea.l (sp),a0
   14150:	|  |  |      movea.l 12(a0),a0
   14154:	|  |  |      move.l 1b018 <cameraY>,d1
   1415a:	|  |  |      suba.l d1,a0
   1415c:	|  |  |      cmpa.l d0,a0
   1415e:	|  |  +----- blt.s 14168 <getOverRegion+0x70>
			overRegion = thisRegion;
   14160:	|  |  |      move.l (sp),1b062 <overRegion>
			return;
   14166:	|  |  |  /-- bra.s 1417a <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   14168:	|  |  \--|-> movea.l (sp),a0
   1416a:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   1416e:	|  \-----|-> tst.l (sp)
   14170:	\--------|-- bne.s 14102 <getOverRegion+0xa>
	}
	overRegion = NULL;
   14172:	         |   clr.l 1b062 <overRegion>
	return;
   14178:	         |   nop
}
   1417a:	         \-> addq.l #4,sp
   1417c:	             rts

0001417e <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1417e:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   14180:	             move.l 1b05e <allScreenRegions>,(sp)

	while (thisRegion) {
   14186:	   /-------- bra.s 141a2 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   14188:	/--|-------> movea.l (sp),a0
   1418a:	|  |         movea.l 28(a0),a0
   1418e:	|  |         move.l 4(a0),d0
   14192:	|  |         cmp.l 8(sp),d0
   14196:	|  |     /-- bne.s 1419c <getRegionForObject+0x1e>
			return thisRegion;
   14198:	|  |     |   move.l (sp),d0
   1419a:	|  |  /--|-- bra.s 141a8 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   1419c:	|  |  |  \-> movea.l (sp),a0
   1419e:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   141a2:	|  \--|----> tst.l (sp)
   141a4:	\-----|----- bne.s 14188 <getRegionForObject+0xa>
	}

	return NULL;
   141a6:	      |      moveq #0,d0
}
   141a8:	      \----> addq.l #4,sp
   141aa:	             rts

000141ac <killAllRegions>:

void killAllRegions () {
   141ac:	       subq.l #8,sp
   141ae:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   141b0:	   /-- bra.s 141f2 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   141b2:	/--|-> move.l 1b05e <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   141ba:	|  |   movea.l 1b05e <allScreenRegions>,a0
   141c0:	|  |   move.l 32(a0),d0
   141c4:	|  |   move.l d0,1b05e <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   141ca:	|  |   movea.l 8(sp),a0
   141ce:	|  |   move.l 28(a0),d0
   141d2:	|  |   move.l d0,-(sp)
   141d4:	|  |   jsr c80c <removeObjectType>
   141da:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   141dc:	|  |   move.l 8(sp),4(sp)
   141e2:	|  |   move.l 1af02 <SysBase>,d0
   141e8:	|  |   movea.l d0,a6
   141ea:	|  |   movea.l 4(sp),a1
   141ee:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   141f2:	|  \-> move.l 1b05e <allScreenRegions>,d0
   141f8:	\----- bne.s 141b2 <killAllRegions+0x6>
	}
	overRegion = NULL;
   141fa:	       clr.l 1b062 <overRegion>
}
   14200:	       nop
   14202:	       movea.l (sp)+,a6
   14204:	       addq.l #8,sp
   14206:	       rts

00014208 <loadRegions>:

void loadRegions (BPTR fp) {
   14208:	       lea -24(sp),sp
   1420c:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   1420e:	       move.l 32(sp),-(sp)
   14212:	       jsr 6bc <get2bytes>
   14218:	       addq.l #4,sp
   1421a:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   1421e:	       move.l #110686,20(sp)

	while (numRegions --) {
   14226:	   /-- bra.w 14304 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   1422a:	/--|-> moveq #36,d0
   1422c:	|  |   move.l d0,16(sp)
   14230:	|  |   clr.l 12(sp)
   14234:	|  |   move.l 1af02 <SysBase>,d0
   1423a:	|  |   movea.l d0,a6
   1423c:	|  |   move.l 16(sp),d0
   14240:	|  |   move.l 12(sp),d1
   14244:	|  |   jsr -684(a6)
   14248:	|  |   move.l d0,8(sp)
   1424c:	|  |   move.l 8(sp),d0
   14250:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   14254:	|  |   movea.l 20(sp),a0
   14258:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   1425c:	|  |   moveq #32,d1
   1425e:	|  |   add.l 4(sp),d1
   14262:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   14266:	|  |   move.l 32(sp),-(sp)
   1426a:	|  |   jsr 6bc <get2bytes>
   14270:	|  |   addq.l #4,sp
   14272:	|  |   movea.l 4(sp),a0
   14276:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   14278:	|  |   move.l 32(sp),-(sp)
   1427c:	|  |   jsr 6bc <get2bytes>
   14282:	|  |   addq.l #4,sp
   14284:	|  |   movea.l 4(sp),a0
   14288:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   1428c:	|  |   move.l 32(sp),-(sp)
   14290:	|  |   jsr 6bc <get2bytes>
   14296:	|  |   addq.l #4,sp
   14298:	|  |   movea.l 4(sp),a0
   1429c:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   142a0:	|  |   move.l 32(sp),-(sp)
   142a4:	|  |   jsr 6bc <get2bytes>
   142aa:	|  |   addq.l #4,sp
   142ac:	|  |   movea.l 4(sp),a0
   142b0:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   142b4:	|  |   move.l 32(sp),-(sp)
   142b8:	|  |   jsr 6bc <get2bytes>
   142be:	|  |   addq.l #4,sp
   142c0:	|  |   movea.l 4(sp),a0
   142c4:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   142c8:	|  |   move.l 32(sp),-(sp)
   142cc:	|  |   jsr 6bc <get2bytes>
   142d2:	|  |   addq.l #4,sp
   142d4:	|  |   movea.l 4(sp),a0
   142d8:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   142dc:	|  |   move.l 32(sp),-(sp)
   142e0:	|  |   jsr 6bc <get2bytes>
   142e6:	|  |   addq.l #4,sp
   142e8:	|  |   movea.l 4(sp),a0
   142ec:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   142f0:	|  |   move.l 32(sp),-(sp)
   142f4:	|  |   jsr c502 <loadObjectRef>
   142fa:	|  |   addq.l #4,sp
   142fc:	|  |   movea.l 4(sp),a0
   14300:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   14304:	|  \-> move.l 24(sp),d0
   14308:	|      move.l d0,d1
   1430a:	|      subq.l #1,d1
   1430c:	|      move.l d1,24(sp)
   14310:	|      tst.l d0
   14312:	\----- bne.w 1422a <loadRegions+0x22>
	}
	* pointy = NULL;
   14316:	       movea.l 20(sp),a0
   1431a:	       clr.l (a0)
}
   1431c:	       nop
   1431e:	       movea.l (sp)+,a6
   14320:	       lea 24(sp),sp
   14324:	       rts

00014326 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   14326:	             lea -12(sp),sp
   1432a:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   1432c:	             move.l #110686,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   14334:	   /-------- bra.s 143ae <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   14336:	/--|-------> movea.l 12(sp),a0
   1433a:	|  |         movea.l (a0),a0
   1433c:	|  |         movea.l 28(a0),a0
   14340:	|  |         move.l 4(a0),d0
   14344:	|  |         cmp.l 20(sp),d0
   14348:	|  |  /----- bne.s 143a0 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   1434a:	|  |  |      movea.l 12(sp),a0
   1434e:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   14352:	|  |  |      movea.l 8(sp),a0
   14356:	|  |  |      move.l 32(a0),d0
   1435a:	|  |  |      movea.l 12(sp),a0
   1435e:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   14360:	|  |  |      movea.l 8(sp),a0
   14364:	|  |  |      move.l 28(a0),d0
   14368:	|  |  |      move.l d0,-(sp)
   1436a:	|  |  |      jsr c80c <removeObjectType>
   14370:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   14372:	|  |  |      move.l 1b062 <overRegion>,d0
   14378:	|  |  |      cmp.l 8(sp),d0
   1437c:	|  |  |  /-- bne.s 14384 <removeScreenRegion+0x5e>
   1437e:	|  |  |  |   clr.l 1b062 <overRegion>
            FreeVec(killMe);
   14384:	|  |  |  \-> move.l 8(sp),4(sp)
   1438a:	|  |  |      move.l 1af02 <SysBase>,d0
   14390:	|  |  |      movea.l d0,a6
   14392:	|  |  |      movea.l 4(sp),a1
   14396:	|  |  |      jsr -690(a6)
            killMe = NULL;
   1439a:	|  |  |      clr.l 8(sp)
   1439e:	|  +--|----- bra.s 143ae <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   143a0:	|  |  \----> movea.l 12(sp),a0
   143a4:	|  |         move.l (a0),d0
   143a6:	|  |         moveq #32,d1
   143a8:	|  |         add.l d0,d1
   143aa:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   143ae:	|  \-------> movea.l 12(sp),a0
   143b2:	|            move.l (a0),d0
   143b4:	\----------- bne.s 14336 <removeScreenRegion+0x10>
        }
    }
}
   143b6:	             nop
   143b8:	             nop
   143ba:	             movea.l (sp)+,a6
   143bc:	             lea 12(sp),sp
   143c0:	             rts

000143c2 <saveRegions>:

void saveRegions (BPTR fp) {
   143c2:	       subq.l #8,sp
	int numRegions = 0;
   143c4:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   143c8:	       move.l 1b05e <allScreenRegions>,(sp)
	while (thisRegion) {
   143ce:	   /-- bra.s 143da <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   143d0:	/--|-> movea.l (sp),a0
   143d2:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   143d6:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   143da:	|  \-> tst.l (sp)
   143dc:	\----- bne.s 143d0 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   143de:	       move.l 12(sp),-(sp)
   143e2:	       move.l 8(sp),-(sp)
   143e6:	       jsr 8d0 <put2bytes>
   143ec:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   143ee:	       move.l 1b05e <allScreenRegions>,(sp)
	while (thisRegion) {
   143f4:	/----- bra.w 1449c <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   143f8:	|  /-> movea.l (sp),a0
   143fa:	|  |   move.l (a0),d0
   143fc:	|  |   move.l 12(sp),-(sp)
   14400:	|  |   move.l d0,-(sp)
   14402:	|  |   jsr 8d0 <put2bytes>
   14408:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   1440a:	|  |   movea.l (sp),a0
   1440c:	|  |   move.l 4(a0),d0
   14410:	|  |   move.l 12(sp),-(sp)
   14414:	|  |   move.l d0,-(sp)
   14416:	|  |   jsr 8d0 <put2bytes>
   1441c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   1441e:	|  |   movea.l (sp),a0
   14420:	|  |   move.l 8(a0),d0
   14424:	|  |   move.l 12(sp),-(sp)
   14428:	|  |   move.l d0,-(sp)
   1442a:	|  |   jsr 8d0 <put2bytes>
   14430:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   14432:	|  |   movea.l (sp),a0
   14434:	|  |   move.l 12(a0),d0
   14438:	|  |   move.l 12(sp),-(sp)
   1443c:	|  |   move.l d0,-(sp)
   1443e:	|  |   jsr 8d0 <put2bytes>
   14444:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   14446:	|  |   movea.l (sp),a0
   14448:	|  |   move.l 16(a0),d0
   1444c:	|  |   move.l 12(sp),-(sp)
   14450:	|  |   move.l d0,-(sp)
   14452:	|  |   jsr 8d0 <put2bytes>
   14458:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   1445a:	|  |   movea.l (sp),a0
   1445c:	|  |   move.l 20(a0),d0
   14460:	|  |   move.l 12(sp),-(sp)
   14464:	|  |   move.l d0,-(sp)
   14466:	|  |   jsr 8d0 <put2bytes>
   1446c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   1446e:	|  |   movea.l (sp),a0
   14470:	|  |   move.l 24(a0),d0
   14474:	|  |   move.l 12(sp),-(sp)
   14478:	|  |   move.l d0,-(sp)
   1447a:	|  |   jsr 8d0 <put2bytes>
   14480:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   14482:	|  |   movea.l (sp),a0
   14484:	|  |   move.l 28(a0),d0
   14488:	|  |   move.l 12(sp),-(sp)
   1448c:	|  |   move.l d0,-(sp)
   1448e:	|  |   jsr c8ac <saveObjectRef>
   14494:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   14496:	|  |   movea.l (sp),a0
   14498:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   1449c:	\--|-> tst.l (sp)
   1449e:	   \-- bne.w 143f8 <saveRegions+0x36>
	}
}
   144a2:	       nop
   144a4:	       nop
   144a6:	       addq.l #8,sp
   144a8:	       rts

000144aa <showBoxes>:

void showBoxes () {
   144aa:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   144ac:	       move.l 1b05e <allScreenRegions>,(sp)

	while (huntRegion) {
   144b2:	/----- bra.w 1454e <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   144b6:	|  /-> movea.l (sp),a0
   144b8:	|  |   move.l 12(a0),d0
   144bc:	|  |   movea.l d0,a1
   144be:	|  |   movea.l (sp),a0
   144c0:	|  |   move.l 4(a0),d0
   144c4:	|  |   move.l d0,d1
   144c6:	|  |   movea.l (sp),a0
   144c8:	|  |   move.l (a0),d0
   144ca:	|  |   move.l a1,-(sp)
   144cc:	|  |   move.l d1,-(sp)
   144ce:	|  |   move.l d0,-(sp)
   144d0:	|  |   jsr c190 <drawVerticalLine>
   144d6:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   144da:	|  |   movea.l (sp),a0
   144dc:	|  |   move.l 12(a0),d0
   144e0:	|  |   movea.l d0,a1
   144e2:	|  |   movea.l (sp),a0
   144e4:	|  |   move.l 4(a0),d0
   144e8:	|  |   move.l d0,d1
   144ea:	|  |   movea.l (sp),a0
   144ec:	|  |   move.l 8(a0),d0
   144f0:	|  |   move.l a1,-(sp)
   144f2:	|  |   move.l d1,-(sp)
   144f4:	|  |   move.l d0,-(sp)
   144f6:	|  |   jsr c190 <drawVerticalLine>
   144fc:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   14500:	|  |   movea.l (sp),a0
   14502:	|  |   move.l 8(a0),d0
   14506:	|  |   movea.l d0,a1
   14508:	|  |   movea.l (sp),a0
   1450a:	|  |   move.l 4(a0),d0
   1450e:	|  |   move.l d0,d1
   14510:	|  |   movea.l (sp),a0
   14512:	|  |   move.l (a0),d0
   14514:	|  |   move.l a1,-(sp)
   14516:	|  |   move.l d1,-(sp)
   14518:	|  |   move.l d0,-(sp)
   1451a:	|  |   jsr c16a <drawHorizontalLine>
   14520:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   14524:	|  |   movea.l (sp),a0
   14526:	|  |   move.l 8(a0),d0
   1452a:	|  |   movea.l d0,a1
   1452c:	|  |   movea.l (sp),a0
   1452e:	|  |   move.l 12(a0),d0
   14532:	|  |   move.l d0,d1
   14534:	|  |   movea.l (sp),a0
   14536:	|  |   move.l (a0),d0
   14538:	|  |   move.l a1,-(sp)
   1453a:	|  |   move.l d1,-(sp)
   1453c:	|  |   move.l d0,-(sp)
   1453e:	|  |   jsr c16a <drawHorizontalLine>
   14544:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   14548:	|  |   movea.l (sp),a0
   1454a:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   1454e:	\--|-> tst.l (sp)
   14550:	   \-- bne.w 144b6 <showBoxes+0xc>
	}
   14554:	       nop
   14556:	       nop
   14558:	       addq.l #4,sp
   1455a:	       rts

0001455c <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   1455c:	             lea -20(sp),sp
   14560:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   14562:	             move.l 1b066 <allLoadedBanks>,20(sp)
	while (returnMe) {
   1456a:	      /----- bra.s 1459c <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   1456c:	   /--|----> movea.l 20(sp),a0
   14570:	   |  |      move.l (a0),d0
   14572:	   |  |      cmp.l 28(sp),d0
   14576:	   |  |  /-- bne.s 14592 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   14578:	   |  |  |   movea.l 20(sp),a0
   1457c:	   |  |  |   move.l 4(a0),d0
   14580:	   |  |  |   addq.l #1,d0
   14582:	   |  |  |   movea.l 20(sp),a0
   14586:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   1458a:	   |  |  |   move.l 20(sp),d0
   1458e:	/--|--|--|-- bra.w 14652 <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   14592:	|  |  |  \-> movea.l 20(sp),a0
   14596:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   1459c:	|  |  \----> tst.l 20(sp)
   145a0:	|  \-------- bne.s 1456c <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   145a2:	|            moveq #26,d0
   145a4:	|            move.l d0,16(sp)
   145a8:	|            clr.l 12(sp)
   145ac:	|            move.l 1af02 <SysBase>,d0
   145b2:	|            movea.l d0,a6
   145b4:	|            move.l 16(sp),d0
   145b8:	|            move.l 12(sp),d1
   145bc:	|            jsr -684(a6)
   145c0:	|            move.l d0,8(sp)
   145c4:	|            move.l 8(sp),d0
   145c8:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   145cc:	|     /----- beq.w 14650 <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   145d0:	|     |      movea.l 20(sp),a0
   145d4:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   145d8:	|     |      move.l 20(sp),d0
   145dc:	|     |      addq.l #8,d0
   145de:	|     |      clr.l -(sp)
   145e0:	|     |      move.l d0,-(sp)
   145e2:	|     |      move.l 36(sp),-(sp)
   145e6:	|     |      jsr 7c62 <loadSpriteBank>
   145ec:	|     |      lea 12(sp),sp
   145f0:	|     |      tst.w d0
   145f2:	|     |  /-- beq.s 14628 <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   145f4:	|     |  |   movea.l 20(sp),a0
   145f8:	|     |  |   moveq #1,d0
   145fa:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   145fe:	|     |  |   move.l 1b066 <allLoadedBanks>,d0
   14604:	|     |  |   movea.l 20(sp),a0
   14608:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   1460c:	|     |  |   move.l 20(sp),1b066 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   14614:	|     |  |   pea 185e8 <newfatal.c.307beca7>
   1461a:	|     |  |   jsr 157fa <KPrintF>
   14620:	|     |  |   addq.l #4,sp
			return returnMe;
   14622:	|     |  |   move.l 20(sp),d0
   14626:	+-----|--|-- bra.s 14652 <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   14628:	|     |  \-> pea 18615 <newfatal.c.307beca7+0x2d>
   1462e:	|     |      jsr 157fa <KPrintF>
   14634:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   14636:	|     |      move.l 20(sp),4(sp)
   1463c:	|     |      move.l 1af02 <SysBase>,d0
   14642:	|     |      movea.l d0,a6
   14644:	|     |      movea.l 4(sp),a1
   14648:	|     |      jsr -690(a6)
			return NULL;
   1464c:	|     |      moveq #0,d0
   1464e:	+-----|----- bra.s 14652 <loadBankForAnim+0xf6>
		}
	} else return NULL;
   14650:	|     \----> moveq #0,d0
}
   14652:	\----------> movea.l (sp)+,a6
   14654:	             lea 20(sp),sp
   14658:	             rts

0001465a <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   1465a:	       lea -32(sp),sp
   1465e:	       move.l d3,-(sp)
   14660:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   14662:	       move.l 60(sp),d0
   14666:	       sub.l 52(sp),d0
   1466a:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   1466e:	       move.l 64(sp),d0
   14672:	       sub.l 56(sp),d0
   14676:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   1467a:	       move.l 68(sp),d0
   1467e:	       sub.l 52(sp),d0
   14682:	       move.l 36(sp),-(sp)
   14686:	       move.l d0,-(sp)
   14688:	       jsr 161b8 <__mulsi3>
   1468e:	       addq.l #8,sp
   14690:	       move.l d0,d2
   14692:	       move.l 72(sp),d0
   14696:	       sub.l 56(sp),d0
   1469a:	       move.l 32(sp),-(sp)
   1469e:	       move.l d0,-(sp)
   146a0:	       jsr 161b8 <__mulsi3>
   146a6:	       addq.l #8,sp
   146a8:	       add.l d2,d0
   146aa:	       move.l d0,-(sp)
   146ac:	       jsr 15bf6 <__floatsidf>
   146b2:	       addq.l #4,sp
   146b4:	       move.l d0,16(sp)
   146b8:	       move.l d1,20(sp)
   146bc:	       move.l 16(sp),24(sp)
   146c2:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   146c8:	       move.l 36(sp),-(sp)
   146cc:	       move.l 40(sp),-(sp)
   146d0:	       jsr 161b8 <__mulsi3>
   146d6:	       addq.l #8,sp
   146d8:	       move.l d0,d2
   146da:	       move.l 32(sp),-(sp)
   146de:	       move.l 36(sp),-(sp)
   146e2:	       jsr 161b8 <__mulsi3>
   146e8:	       addq.l #8,sp
   146ea:	       add.l d2,d0
   146ec:	       move.l d0,-(sp)
   146ee:	       jsr 15bf6 <__floatsidf>
   146f4:	       addq.l #4,sp
   146f6:	       move.l d1,-(sp)
   146f8:	       move.l d0,-(sp)
   146fa:	       move.l 36(sp),-(sp)
   146fe:	       move.l 36(sp),-(sp)
   14702:	       jsr 15a80 <__divdf3>
   14708:	       lea 16(sp),sp
   1470c:	       move.l d0,8(sp)
   14710:	       move.l d1,12(sp)
   14714:	       move.l 8(sp),24(sp)
   1471a:	       move.l 12(sp),28(sp)

	if (m < 0) {
   14720:	       clr.l -(sp)
   14722:	       clr.l -(sp)
   14724:	       move.l 36(sp),-(sp)
   14728:	       move.l 36(sp),-(sp)
   1472c:	       jsr 15e0e <__ltdf2>
   14732:	       lea 16(sp),sp
   14736:	       tst.l d0
   14738:	   /-- bge.s 1474e <closestPointOnLine+0xf4>
		*closestX = x1;
   1473a:	   |   movea.l 44(sp),a0
   1473e:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   14742:	   |   movea.l 48(sp),a0
   14746:	   |   move.l 56(sp),(a0)
   1474a:	/--|-- bra.w 14830 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   1474e:	|  \-> clr.l -(sp)
   14750:	|      move.l #1072693248,-(sp)
   14756:	|      move.l 36(sp),-(sp)
   1475a:	|      move.l 36(sp),-(sp)
   1475e:	|      jsr 15d54 <__gtdf2>
   14764:	|      lea 16(sp),sp
   14768:	|      tst.l d0
   1476a:	|  /-- ble.s 14780 <closestPointOnLine+0x126>
		*closestX = x2;
   1476c:	|  |   movea.l 44(sp),a0
   14770:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   14774:	|  |   movea.l 48(sp),a0
   14778:	|  |   move.l 64(sp),(a0)
   1477c:	+--|-- bra.w 14830 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   14780:	|  \-> move.l 52(sp),-(sp)
   14784:	|      jsr 15bf6 <__floatsidf>
   1478a:	|      addq.l #4,sp
   1478c:	|      move.l d0,d2
   1478e:	|      move.l d1,d3
   14790:	|      move.l 36(sp),-(sp)
   14794:	|      jsr 15bf6 <__floatsidf>
   1479a:	|      addq.l #4,sp
   1479c:	|      move.l 28(sp),-(sp)
   147a0:	|      move.l 28(sp),-(sp)
   147a4:	|      move.l d1,-(sp)
   147a6:	|      move.l d0,-(sp)
   147a8:	|      jsr 15c86 <__muldf3>
   147ae:	|      lea 16(sp),sp
   147b2:	|      move.l d1,-(sp)
   147b4:	|      move.l d0,-(sp)
   147b6:	|      move.l d3,-(sp)
   147b8:	|      move.l d2,-(sp)
   147ba:	|      jsr 15a1e <__adddf3>
   147c0:	|      lea 16(sp),sp
   147c4:	|      move.l d1,-(sp)
   147c6:	|      move.l d0,-(sp)
   147c8:	|      jsr 15b8e <__fixdfsi>
   147ce:	|      addq.l #8,sp
   147d0:	|      movea.l 44(sp),a0
   147d4:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   147d6:	|      move.l 56(sp),-(sp)
   147da:	|      jsr 15bf6 <__floatsidf>
   147e0:	|      addq.l #4,sp
   147e2:	|      move.l d0,d2
   147e4:	|      move.l d1,d3
   147e6:	|      move.l 32(sp),-(sp)
   147ea:	|      jsr 15bf6 <__floatsidf>
   147f0:	|      addq.l #4,sp
   147f2:	|      move.l 28(sp),-(sp)
   147f6:	|      move.l 28(sp),-(sp)
   147fa:	|      move.l d1,-(sp)
   147fc:	|      move.l d0,-(sp)
   147fe:	|      jsr 15c86 <__muldf3>
   14804:	|      lea 16(sp),sp
   14808:	|      move.l d1,-(sp)
   1480a:	|      move.l d0,-(sp)
   1480c:	|      move.l d3,-(sp)
   1480e:	|      move.l d2,-(sp)
   14810:	|      jsr 15a1e <__adddf3>
   14816:	|      lea 16(sp),sp
   1481a:	|      move.l d1,-(sp)
   1481c:	|      move.l d0,-(sp)
   1481e:	|      jsr 15b8e <__fixdfsi>
   14824:	|      addq.l #8,sp
   14826:	|      movea.l 48(sp),a0
   1482a:	|      move.l d0,(a0)
		return TRUE;
   1482c:	|      moveq #1,d0
   1482e:	|  /-- bra.s 14832 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   14830:	\--|-> clr.w d0
}
   14832:	   \-> move.l (sp)+,d2
   14834:	       move.l (sp)+,d3
   14836:	       lea 32(sp),sp
   1483a:	       rts

0001483c <drawFloor>:

void drawFloor() {
   1483c:	                lea -12(sp),sp
   14840:	                move.l d3,-(sp)
   14842:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   14844:	                clr.l 16(sp)
   14848:	   /----------- bra.w 14a5c <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   1484c:	/--|----------> movea.l 1b06a <currentFloor>,a0
   14852:	|  |            move.l 12(a0),d1
   14856:	|  |            move.l 16(sp),d0
   1485a:	|  |            lsl.l #3,d0
   1485c:	|  |            movea.l d1,a0
   1485e:	|  |            adda.l d0,a0
   14860:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   14864:	|  |            moveq #1,d0
   14866:	|  |            cmp.l 8(sp),d0
   1486a:	|  |  /-------- bge.w 14a58 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   1486e:	|  |  |         moveq #1,d0
   14870:	|  |  |         move.l d0,12(sp)
   14874:	|  |  |     /-- bra.w 1496e <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   14878:	|  |  |  /--|-> movea.l 1b06a <currentFloor>,a0
   1487e:	|  |  |  |  |   move.l 4(a0),d1
   14882:	|  |  |  |  |   movea.l 1b06a <currentFloor>,a0
   14888:	|  |  |  |  |   movea.l 12(a0),a0
   1488c:	|  |  |  |  |   move.l 16(sp),d0
   14890:	|  |  |  |  |   lsl.l #3,d0
   14892:	|  |  |  |  |   adda.l d0,a0
   14894:	|  |  |  |  |   movea.l 4(a0),a0
   14898:	|  |  |  |  |   move.l 12(sp),d0
   1489c:	|  |  |  |  |   add.l d0,d0
   1489e:	|  |  |  |  |   add.l d0,d0
   148a0:	|  |  |  |  |   adda.l d0,a0
   148a2:	|  |  |  |  |   move.l (a0),d0
   148a4:	|  |  |  |  |   lsl.l #3,d0
   148a6:	|  |  |  |  |   movea.l d1,a0
   148a8:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   148aa:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   148ae:	|  |  |  |  |   movea.l 1b06a <currentFloor>,a0
   148b4:	|  |  |  |  |   move.l 4(a0),d1
   148b8:	|  |  |  |  |   movea.l 1b06a <currentFloor>,a0
   148be:	|  |  |  |  |   movea.l 12(a0),a0
   148c2:	|  |  |  |  |   move.l 16(sp),d0
   148c6:	|  |  |  |  |   lsl.l #3,d0
   148c8:	|  |  |  |  |   adda.l d0,a0
   148ca:	|  |  |  |  |   movea.l 4(a0),a0
   148ce:	|  |  |  |  |   move.l 12(sp),d0
   148d2:	|  |  |  |  |   add.l d0,d0
   148d4:	|  |  |  |  |   add.l d0,d0
   148d6:	|  |  |  |  |   adda.l d0,a0
   148d8:	|  |  |  |  |   move.l (a0),d0
   148da:	|  |  |  |  |   lsl.l #3,d0
   148dc:	|  |  |  |  |   movea.l d1,a0
   148de:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   148e0:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   148e2:	|  |  |  |  |   movea.l 1b06a <currentFloor>,a0
   148e8:	|  |  |  |  |   move.l 4(a0),d1
   148ec:	|  |  |  |  |   movea.l 1b06a <currentFloor>,a0
   148f2:	|  |  |  |  |   movea.l 12(a0),a0
   148f6:	|  |  |  |  |   move.l 16(sp),d0
   148fa:	|  |  |  |  |   lsl.l #3,d0
   148fc:	|  |  |  |  |   adda.l d0,a0
   148fe:	|  |  |  |  |   movea.l 4(a0),a0
   14902:	|  |  |  |  |   move.l 12(sp),d0
   14906:	|  |  |  |  |   addi.l #1073741823,d0
   1490c:	|  |  |  |  |   add.l d0,d0
   1490e:	|  |  |  |  |   add.l d0,d0
   14910:	|  |  |  |  |   adda.l d0,a0
   14912:	|  |  |  |  |   move.l (a0),d0
   14914:	|  |  |  |  |   lsl.l #3,d0
   14916:	|  |  |  |  |   movea.l d1,a0
   14918:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1491a:	|  |  |  |  |   move.l 4(a0),d1
   1491e:	|  |  |  |  |   movea.l 1b06a <currentFloor>,a0
   14924:	|  |  |  |  |   move.l 4(a0),d3
   14928:	|  |  |  |  |   movea.l 1b06a <currentFloor>,a0
   1492e:	|  |  |  |  |   movea.l 12(a0),a0
   14932:	|  |  |  |  |   move.l 16(sp),d0
   14936:	|  |  |  |  |   lsl.l #3,d0
   14938:	|  |  |  |  |   adda.l d0,a0
   1493a:	|  |  |  |  |   movea.l 4(a0),a0
   1493e:	|  |  |  |  |   move.l 12(sp),d0
   14942:	|  |  |  |  |   addi.l #1073741823,d0
   14948:	|  |  |  |  |   add.l d0,d0
   1494a:	|  |  |  |  |   add.l d0,d0
   1494c:	|  |  |  |  |   adda.l d0,a0
   1494e:	|  |  |  |  |   move.l (a0),d0
   14950:	|  |  |  |  |   lsl.l #3,d0
   14952:	|  |  |  |  |   movea.l d3,a0
   14954:	|  |  |  |  |   adda.l d0,a0
   14956:	|  |  |  |  |   move.l (a0),d0
   14958:	|  |  |  |  |   move.l d2,-(sp)
   1495a:	|  |  |  |  |   move.l a1,-(sp)
   1495c:	|  |  |  |  |   move.l d1,-(sp)
   1495e:	|  |  |  |  |   move.l d0,-(sp)
   14960:	|  |  |  |  |   jsr 2d94 <drawLine>
   14966:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   1496a:	|  |  |  |  |   addq.l #1,12(sp)
   1496e:	|  |  |  |  \-> move.l 12(sp),d0
   14972:	|  |  |  |      cmp.l 8(sp),d0
   14976:	|  |  |  \----- blt.w 14878 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   1497a:	|  |  |         movea.l 1b06a <currentFloor>,a0
   14980:	|  |  |         move.l 4(a0),d1
   14984:	|  |  |         movea.l 1b06a <currentFloor>,a0
   1498a:	|  |  |         movea.l 12(a0),a0
   1498e:	|  |  |         move.l 16(sp),d0
   14992:	|  |  |         lsl.l #3,d0
   14994:	|  |  |         adda.l d0,a0
   14996:	|  |  |         movea.l 4(a0),a0
   1499a:	|  |  |         move.l 8(sp),d0
   1499e:	|  |  |         addi.l #1073741823,d0
   149a4:	|  |  |         add.l d0,d0
   149a6:	|  |  |         add.l d0,d0
   149a8:	|  |  |         adda.l d0,a0
   149aa:	|  |  |         move.l (a0),d0
   149ac:	|  |  |         lsl.l #3,d0
   149ae:	|  |  |         movea.l d1,a0
   149b0:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   149b2:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   149b6:	|  |  |         movea.l 1b06a <currentFloor>,a0
   149bc:	|  |  |         move.l 4(a0),d1
   149c0:	|  |  |         movea.l 1b06a <currentFloor>,a0
   149c6:	|  |  |         movea.l 12(a0),a0
   149ca:	|  |  |         move.l 16(sp),d0
   149ce:	|  |  |         lsl.l #3,d0
   149d0:	|  |  |         adda.l d0,a0
   149d2:	|  |  |         movea.l 4(a0),a0
   149d6:	|  |  |         move.l 8(sp),d0
   149da:	|  |  |         addi.l #1073741823,d0
   149e0:	|  |  |         add.l d0,d0
   149e2:	|  |  |         add.l d0,d0
   149e4:	|  |  |         adda.l d0,a0
   149e6:	|  |  |         move.l (a0),d0
   149e8:	|  |  |         lsl.l #3,d0
   149ea:	|  |  |         movea.l d1,a0
   149ec:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   149ee:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   149f0:	|  |  |         movea.l 1b06a <currentFloor>,a0
   149f6:	|  |  |         move.l 4(a0),d1
   149fa:	|  |  |         movea.l 1b06a <currentFloor>,a0
   14a00:	|  |  |         movea.l 12(a0),a0
   14a04:	|  |  |         move.l 16(sp),d0
   14a08:	|  |  |         lsl.l #3,d0
   14a0a:	|  |  |         adda.l d0,a0
   14a0c:	|  |  |         movea.l 4(a0),a0
   14a10:	|  |  |         move.l (a0),d0
   14a12:	|  |  |         lsl.l #3,d0
   14a14:	|  |  |         movea.l d1,a0
   14a16:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   14a18:	|  |  |         move.l 4(a0),d1
   14a1c:	|  |  |         movea.l 1b06a <currentFloor>,a0
   14a22:	|  |  |         move.l 4(a0),d3
   14a26:	|  |  |         movea.l 1b06a <currentFloor>,a0
   14a2c:	|  |  |         movea.l 12(a0),a0
   14a30:	|  |  |         move.l 16(sp),d0
   14a34:	|  |  |         lsl.l #3,d0
   14a36:	|  |  |         adda.l d0,a0
   14a38:	|  |  |         movea.l 4(a0),a0
   14a3c:	|  |  |         move.l (a0),d0
   14a3e:	|  |  |         lsl.l #3,d0
   14a40:	|  |  |         movea.l d3,a0
   14a42:	|  |  |         adda.l d0,a0
   14a44:	|  |  |         move.l (a0),d0
   14a46:	|  |  |         move.l d2,-(sp)
   14a48:	|  |  |         move.l a1,-(sp)
   14a4a:	|  |  |         move.l d1,-(sp)
   14a4c:	|  |  |         move.l d0,-(sp)
   14a4e:	|  |  |         jsr 2d94 <drawLine>
   14a54:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   14a58:	|  |  \-------> addq.l #1,16(sp)
   14a5c:	|  \----------> movea.l 1b06a <currentFloor>,a0
   14a62:	|               move.l 8(a0),d0
   14a66:	|               cmp.l 16(sp),d0
   14a6a:	\-------------- bgt.w 1484c <drawFloor+0x10>
        }
    }
}
   14a6e:	                nop
   14a70:	                nop
   14a72:	                move.l (sp)+,d2
   14a74:	                move.l (sp)+,d3
   14a76:	                lea 12(sp),sp
   14a7a:	                rts

00014a7c <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   14a7c:	                      lea -12(sp),sp
    int sharedVertices = 0;
   14a80:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   14a84:	                      clr.l 4(sp)
   14a88:	   /----------------- bra.w 14b1a <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   14a8c:	/--|----------------> clr.l (sp)
   14a8e:	|  |     /----------- bra.s 14b0a <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   14a90:	|  |  /--|----------> movea.l 16(sp),a0
   14a94:	|  |  |  |            move.l 4(a0),d1
   14a98:	|  |  |  |            move.l 4(sp),d0
   14a9c:	|  |  |  |            add.l d0,d0
   14a9e:	|  |  |  |            add.l d0,d0
   14aa0:	|  |  |  |            movea.l d1,a0
   14aa2:	|  |  |  |            adda.l d0,a0
   14aa4:	|  |  |  |            move.l (a0),d1
   14aa6:	|  |  |  |            movea.l 20(sp),a0
   14aaa:	|  |  |  |            movea.l 4(a0),a0
   14aae:	|  |  |  |            move.l (sp),d0
   14ab0:	|  |  |  |            add.l d0,d0
   14ab2:	|  |  |  |            add.l d0,d0
   14ab4:	|  |  |  |            adda.l d0,a0
   14ab6:	|  |  |  |            move.l (a0),d0
   14ab8:	|  |  |  |            cmp.l d1,d0
   14aba:	|  |  |  |  /-------- bne.s 14b08 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   14abc:	|  |  |  |  |         move.l 8(sp),d0
   14ac0:	|  |  |  |  |         move.l d0,d1
   14ac2:	|  |  |  |  |         addq.l #1,d1
   14ac4:	|  |  |  |  |         move.l d1,8(sp)
   14ac8:	|  |  |  |  |         tst.l d0
   14aca:	|  |  |  |  |     /-- beq.s 14aec <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   14acc:	|  |  |  |  |     |   movea.l 16(sp),a0
   14ad0:	|  |  |  |  |     |   move.l 4(a0),d1
   14ad4:	|  |  |  |  |     |   move.l 4(sp),d0
   14ad8:	|  |  |  |  |     |   add.l d0,d0
   14ada:	|  |  |  |  |     |   add.l d0,d0
   14adc:	|  |  |  |  |     |   movea.l d1,a0
   14ade:	|  |  |  |  |     |   adda.l d0,a0
   14ae0:	|  |  |  |  |     |   move.l (a0),d0
   14ae2:	|  |  |  |  |     |   movea.l 28(sp),a0
   14ae6:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   14ae8:	|  |  |  |  |     |   moveq #1,d0
   14aea:	|  |  |  |  |  /--|-- bra.s 14b2a <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   14aec:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   14af0:	|  |  |  |  |  |      move.l 4(a0),d1
   14af4:	|  |  |  |  |  |      move.l 4(sp),d0
   14af8:	|  |  |  |  |  |      add.l d0,d0
   14afa:	|  |  |  |  |  |      add.l d0,d0
   14afc:	|  |  |  |  |  |      movea.l d1,a0
   14afe:	|  |  |  |  |  |      adda.l d0,a0
   14b00:	|  |  |  |  |  |      move.l (a0),d0
   14b02:	|  |  |  |  |  |      movea.l 24(sp),a0
   14b06:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   14b08:	|  |  |  |  \--|----> addq.l #1,(sp)
   14b0a:	|  |  |  \-----|----> movea.l 20(sp),a0
   14b0e:	|  |  |        |      move.l (a0),d0
   14b10:	|  |  |        |      cmp.l (sp),d0
   14b12:	|  |  \--------|----- bgt.w 14a90 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   14b16:	|  |           |      addq.l #1,4(sp)
   14b1a:	|  \-----------|----> movea.l 16(sp),a0
   14b1e:	|              |      move.l (a0),d0
   14b20:	|              |      cmp.l 4(sp),d0
   14b24:	\--------------|----- bgt.w 14a8c <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   14b28:	               |      clr.w d0
}
   14b2a:	               \----> lea 12(sp),sp
   14b2e:	                      rts

00014b30 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   14b30:	movea.l 1b06a <currentFloor>,a0
   14b36:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   14b3a:	movea.l 1b06a <currentFloor>,a0
   14b40:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   14b44:	movea.l 1b06a <currentFloor>,a0
   14b4a:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   14b4e:	movea.l 1b06a <currentFloor>,a0
   14b54:	clr.l 16(a0)
}
   14b58:	nop
   14b5a:	rts

00014b5c <inFloor>:

int inFloor (int x, int y) {
   14b5c:	          subq.l #8,sp
	int i, r = -1;
   14b5e:	          moveq #-1,d0
   14b60:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   14b62:	          clr.l 4(sp)
   14b66:	   /----- bra.s 14b9a <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   14b68:	/--|----> movea.l 1b06a <currentFloor>,a0
   14b6e:	|  |      move.l 12(a0),d1
   14b72:	|  |      move.l 4(sp),d0
   14b76:	|  |      lsl.l #3,d0
   14b78:	|  |      add.l d1,d0
   14b7a:	|  |      move.l 16(sp),-(sp)
   14b7e:	|  |      move.l 16(sp),-(sp)
   14b82:	|  |      move.l d0,-(sp)
   14b84:	|  |      jsr 14d66 <pointInFloorPolygon>
   14b8a:	|  |      lea 12(sp),sp
   14b8e:	|  |      tst.w d0
   14b90:	|  |  /-- beq.s 14b96 <inFloor+0x3a>
			r = i;
   14b92:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   14b96:	|  |  \-> addq.l #1,4(sp)
   14b9a:	|  \----> movea.l 1b06a <currentFloor>,a0
   14ba0:	|         move.l 8(a0),d0
   14ba4:	|         cmp.l 4(sp),d0
   14ba8:	\-------- bgt.s 14b68 <inFloor+0xc>

	return r;
   14baa:	          move.l (sp),d0
}
   14bac:	          addq.l #8,sp
   14bae:	          rts

00014bb0 <initFloor>:

BOOL initFloor () {
   14bb0:	       lea -12(sp),sp
   14bb4:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   14bb6:	       moveq #20,d0
   14bb8:	       move.l d0,12(sp)
   14bbc:	       clr.l 8(sp)
   14bc0:	       move.l 1af02 <SysBase>,d0
   14bc6:	       movea.l d0,a6
   14bc8:	       move.l 12(sp),d0
   14bcc:	       move.l 8(sp),d1
   14bd0:	       jsr -684(a6)
   14bd4:	       move.l d0,4(sp)
   14bd8:	       move.l 4(sp),d0
   14bdc:	       move.l d0,1b06a <currentFloor>

    if(currentFloor == 0) {
   14be2:	       move.l 1b06a <currentFloor>,d0
   14be8:	/----- bne.s 14bfc <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   14bea:	|      pea 1864e <newfatal.c.307beca7+0x66>
   14bf0:	|      jsr 157fa <KPrintF>
   14bf6:	|      addq.l #4,sp
        return FALSE;
   14bf8:	|      clr.w d0
   14bfa:	|  /-- bra.s 14c04 <initFloor+0x54>
    }

	noFloor ();
   14bfc:	\--|-> jsr 14b30 <noFloor>
	return TRUE;
   14c02:	   |   moveq #1,d0
}
   14c04:	   \-> movea.l (sp)+,a6
   14c06:	       lea 12(sp),sp
   14c0a:	       rts

00014c0c <killFloor>:

void killFloor () {
   14c0c:	       lea -24(sp),sp
   14c10:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   14c12:	       clr.l 24(sp)
   14c16:	   /-- bra.s 14c70 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   14c18:	/--|-> movea.l 1b06a <currentFloor>,a0
   14c1e:	|  |   move.l 12(a0),d1
   14c22:	|  |   move.l 24(sp),d0
   14c26:	|  |   lsl.l #3,d0
   14c28:	|  |   movea.l d1,a0
   14c2a:	|  |   adda.l d0,a0
   14c2c:	|  |   move.l 4(a0),8(sp)
   14c32:	|  |   move.l 1af02 <SysBase>,d0
   14c38:	|  |   movea.l d0,a6
   14c3a:	|  |   movea.l 8(sp),a1
   14c3e:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   14c42:	|  |   movea.l 1b06a <currentFloor>,a0
   14c48:	|  |   move.l 16(a0),d1
   14c4c:	|  |   move.l 24(sp),d0
   14c50:	|  |   add.l d0,d0
   14c52:	|  |   add.l d0,d0
   14c54:	|  |   movea.l d1,a0
   14c56:	|  |   adda.l d0,a0
   14c58:	|  |   move.l (a0),4(sp)
   14c5c:	|  |   move.l 1af02 <SysBase>,d0
   14c62:	|  |   movea.l d0,a6
   14c64:	|  |   movea.l 4(sp),a1
   14c68:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   14c6c:	|  |   addq.l #1,24(sp)
   14c70:	|  \-> movea.l 1b06a <currentFloor>,a0
   14c76:	|      move.l 8(a0),d0
   14c7a:	|      cmp.l 24(sp),d0
   14c7e:	\----- bgt.s 14c18 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   14c80:	       movea.l 1b06a <currentFloor>,a0
   14c86:	       move.l 12(a0),20(sp)
   14c8c:	       move.l 1af02 <SysBase>,d0
   14c92:	       movea.l d0,a6
   14c94:	       movea.l 20(sp),a1
   14c98:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   14c9c:	       movea.l 1b06a <currentFloor>,a0
   14ca2:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   14ca6:	       movea.l 1b06a <currentFloor>,a0
   14cac:	       move.l 4(a0),16(sp)
   14cb2:	       move.l 1af02 <SysBase>,d0
   14cb8:	       movea.l d0,a6
   14cba:	       movea.l 16(sp),a1
   14cbe:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   14cc2:	       movea.l 1b06a <currentFloor>,a0
   14cc8:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   14ccc:	       movea.l 1b06a <currentFloor>,a0
   14cd2:	       move.l 16(a0),12(sp)
   14cd8:	       move.l 1af02 <SysBase>,d0
   14cde:	       movea.l d0,a6
   14ce0:	       movea.l 12(sp),a1
   14ce4:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   14ce8:	       movea.l 1b06a <currentFloor>,a0
   14cee:	       clr.l 16(a0)
}
   14cf2:	       nop
   14cf4:	       movea.l (sp)+,a6
   14cf6:	       lea 24(sp),sp
   14cfa:	       rts

00014cfc <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   14cfc:	                   lea -12(sp),sp
	int sharedVertices = 0;
   14d00:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   14d04:	                   clr.l 4(sp)
   14d08:	   /-------------- bra.s 14d54 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   14d0a:	/--|-------------> clr.l (sp)
   14d0c:	|  |     /-------- bra.s 14d48 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   14d0e:	|  |  /--|-------> move.l 20(sp),d1
   14d12:	|  |  |  |         move.l 4(sp),d0
   14d16:	|  |  |  |         add.l d0,d0
   14d18:	|  |  |  |         add.l d0,d0
   14d1a:	|  |  |  |         movea.l d1,a0
   14d1c:	|  |  |  |         adda.l d0,a0
   14d1e:	|  |  |  |         move.l (a0),d1
   14d20:	|  |  |  |         movea.l 28(sp),a0
   14d24:	|  |  |  |         move.l (sp),d0
   14d26:	|  |  |  |         add.l d0,d0
   14d28:	|  |  |  |         add.l d0,d0
   14d2a:	|  |  |  |         adda.l d0,a0
   14d2c:	|  |  |  |         move.l (a0),d0
   14d2e:	|  |  |  |         cmp.l d1,d0
   14d30:	|  |  |  |     /-- bne.s 14d46 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   14d32:	|  |  |  |     |   move.l 8(sp),d0
   14d36:	|  |  |  |     |   move.l d0,d1
   14d38:	|  |  |  |     |   addq.l #1,d1
   14d3a:	|  |  |  |     |   move.l d1,8(sp)
   14d3e:	|  |  |  |     |   tst.l d0
   14d40:	|  |  |  |     +-- beq.s 14d46 <polysShareSide+0x4a>
   14d42:	|  |  |  |     |   moveq #1,d0
   14d44:	|  |  |  |  /--|-- bra.s 14d60 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   14d46:	|  |  |  |  |  \-> addq.l #1,(sp)
   14d48:	|  |  |  \--|----> move.l 24(sp),d0
   14d4c:	|  |  |     |      cmp.l (sp),d0
   14d4e:	|  |  \-----|----- bgt.s 14d0e <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   14d50:	|  |        |      addq.l #1,4(sp)
   14d54:	|  \--------|----> move.l 16(sp),d0
   14d58:	|           |      cmp.l 4(sp),d0
   14d5c:	\-----------|----- bgt.s 14d0a <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   14d5e:	            |      clr.w d0
}
   14d60:	            \----> lea 12(sp),sp
   14d64:	                   rts

00014d66 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   14d66:	             lea -28(sp),sp
   14d6a:	             move.l d3,-(sp)
   14d6c:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   14d6e:	             clr.l 32(sp)
   14d72:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   14d76:	             movea.l 40(sp),a0
   14d7a:	             move.l (a0),d0
   14d7c:	             move.l d0,d1
   14d7e:	             subq.l #1,d1
   14d80:	             move.l d1,28(sp)
   14d84:	   /-------- bra.w 14f7e <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   14d88:	/--|-------> movea.l 1b06a <currentFloor>,a0
   14d8e:	|  |         move.l 4(a0),d1
   14d92:	|  |         movea.l 40(sp),a0
   14d96:	|  |         movea.l 4(a0),a0
   14d9a:	|  |         move.l 32(sp),d0
   14d9e:	|  |         add.l d0,d0
   14da0:	|  |         add.l d0,d0
   14da2:	|  |         adda.l d0,a0
   14da4:	|  |         move.l (a0),d0
   14da6:	|  |         lsl.l #3,d0
   14da8:	|  |         movea.l d1,a0
   14daa:	|  |         adda.l d0,a0
   14dac:	|  |         move.l (a0),d0
   14dae:	|  |         move.l d0,-(sp)
   14db0:	|  |         jsr 15c36 <__floatsisf>
   14db6:	|  |         addq.l #4,sp
   14db8:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   14dbc:	|  |         movea.l 1b06a <currentFloor>,a0
   14dc2:	|  |         move.l 4(a0),d1
   14dc6:	|  |         movea.l 40(sp),a0
   14dca:	|  |         movea.l 4(a0),a0
   14dce:	|  |         move.l 32(sp),d0
   14dd2:	|  |         add.l d0,d0
   14dd4:	|  |         add.l d0,d0
   14dd6:	|  |         adda.l d0,a0
   14dd8:	|  |         move.l (a0),d0
   14dda:	|  |         lsl.l #3,d0
   14ddc:	|  |         movea.l d1,a0
   14dde:	|  |         adda.l d0,a0
   14de0:	|  |         move.l 4(a0),d0
   14de4:	|  |         move.l d0,-(sp)
   14de6:	|  |         jsr 15c36 <__floatsisf>
   14dec:	|  |         addq.l #4,sp
   14dee:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   14df2:	|  |         movea.l 1b06a <currentFloor>,a0
   14df8:	|  |         move.l 4(a0),d1
   14dfc:	|  |         movea.l 40(sp),a0
   14e00:	|  |         movea.l 4(a0),a0
   14e04:	|  |         move.l 28(sp),d0
   14e08:	|  |         add.l d0,d0
   14e0a:	|  |         add.l d0,d0
   14e0c:	|  |         adda.l d0,a0
   14e0e:	|  |         move.l (a0),d0
   14e10:	|  |         lsl.l #3,d0
   14e12:	|  |         movea.l d1,a0
   14e14:	|  |         adda.l d0,a0
   14e16:	|  |         move.l (a0),d0
   14e18:	|  |         move.l d0,-(sp)
   14e1a:	|  |         jsr 15c36 <__floatsisf>
   14e20:	|  |         addq.l #4,sp
   14e22:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   14e26:	|  |         movea.l 1b06a <currentFloor>,a0
   14e2c:	|  |         move.l 4(a0),d1
   14e30:	|  |         movea.l 40(sp),a0
   14e34:	|  |         movea.l 4(a0),a0
   14e38:	|  |         move.l 28(sp),d0
   14e3c:	|  |         add.l d0,d0
   14e3e:	|  |         add.l d0,d0
   14e40:	|  |         adda.l d0,a0
   14e42:	|  |         move.l (a0),d0
   14e44:	|  |         lsl.l #3,d0
   14e46:	|  |         movea.l d1,a0
   14e48:	|  |         adda.l d0,a0
   14e4a:	|  |         move.l 4(a0),d0
   14e4e:	|  |         move.l d0,-(sp)
   14e50:	|  |         jsr 15c36 <__floatsisf>
   14e56:	|  |         addq.l #4,sp
   14e58:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   14e5c:	|  |         move.l 48(sp),-(sp)
   14e60:	|  |         jsr 15c36 <__floatsisf>
   14e66:	|  |         addq.l #4,sp
   14e68:	|  |         move.l d0,-(sp)
   14e6a:	|  |         move.l 20(sp),-(sp)
   14e6e:	|  |         jsr 15dd8 <__lesf2>
   14e74:	|  |         addq.l #8,sp
   14e76:	|  |         tst.l d0
   14e78:	|  |     /-- bgt.s 14e98 <pointInFloorPolygon+0x132>
   14e7a:	|  |     |   move.l 48(sp),-(sp)
   14e7e:	|  |     |   jsr 15c36 <__floatsisf>
   14e84:	|  |     |   addq.l #4,sp
   14e86:	|  |     |   move.l d0,-(sp)
   14e88:	|  |     |   move.l 12(sp),-(sp)
   14e8c:	|  |     |   jsr 15da2 <__gtsf2>
   14e92:	|  |     |   addq.l #8,sp
   14e94:	|  |     |   tst.l d0
   14e96:	|  |  /--|-- bgt.s 14ed8 <pointInFloorPolygon+0x172>
   14e98:	|  |  |  \-> move.l 48(sp),-(sp)
   14e9c:	|  |  |      jsr 15c36 <__floatsisf>
   14ea2:	|  |  |      addq.l #4,sp
   14ea4:	|  |  |      move.l d0,-(sp)
   14ea6:	|  |  |      move.l 12(sp),-(sp)
   14eaa:	|  |  |      jsr 15dd8 <__lesf2>
   14eb0:	|  |  |      addq.l #8,sp
   14eb2:	|  |  |      tst.l d0
   14eb4:	|  |  |  /-- bgt.w 14f6e <pointInFloorPolygon+0x208>
   14eb8:	|  |  |  |   move.l 48(sp),-(sp)
   14ebc:	|  |  |  |   jsr 15c36 <__floatsisf>
   14ec2:	|  |  |  |   addq.l #4,sp
   14ec4:	|  |  |  |   move.l d0,-(sp)
   14ec6:	|  |  |  |   move.l 20(sp),-(sp)
   14eca:	|  |  |  |   jsr 15da2 <__gtsf2>
   14ed0:	|  |  |  |   addq.l #8,sp
   14ed2:	|  |  |  |   tst.l d0
   14ed4:	|  |  |  +-- ble.w 14f6e <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   14ed8:	|  |  \--|-> move.l 44(sp),-(sp)
   14edc:	|  |     |   jsr 15c36 <__floatsisf>
   14ee2:	|  |     |   addq.l #4,sp
   14ee4:	|  |     |   move.l d0,d3
   14ee6:	|  |     |   move.l 20(sp),-(sp)
   14eea:	|  |     |   move.l 16(sp),-(sp)
   14eee:	|  |     |   jsr 15f2a <__subsf3>
   14ef4:	|  |     |   addq.l #8,sp
   14ef6:	|  |     |   move.l d0,d2
   14ef8:	|  |     |   move.l 48(sp),-(sp)
   14efc:	|  |     |   jsr 15c36 <__floatsisf>
   14f02:	|  |     |   addq.l #4,sp
   14f04:	|  |     |   move.l 16(sp),-(sp)
   14f08:	|  |     |   move.l d0,-(sp)
   14f0a:	|  |     |   jsr 15f2a <__subsf3>
   14f10:	|  |     |   addq.l #8,sp
   14f12:	|  |     |   move.l d0,-(sp)
   14f14:	|  |     |   move.l d2,-(sp)
   14f16:	|  |     |   jsr 15ce8 <__mulsf3>
   14f1c:	|  |     |   addq.l #8,sp
   14f1e:	|  |     |   move.l d0,d2
   14f20:	|  |     |   move.l 16(sp),-(sp)
   14f24:	|  |     |   move.l 12(sp),-(sp)
   14f28:	|  |     |   jsr 15f2a <__subsf3>
   14f2e:	|  |     |   addq.l #8,sp
   14f30:	|  |     |   move.l d0,-(sp)
   14f32:	|  |     |   move.l d2,-(sp)
   14f34:	|  |     |   jsr 15ae2 <__divsf3>
   14f3a:	|  |     |   addq.l #8,sp
   14f3c:	|  |     |   move.l 20(sp),-(sp)
   14f40:	|  |     |   move.l d0,-(sp)
   14f42:	|  |     |   jsr 159e8 <__addsf3>
   14f48:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   14f4a:	|  |     |   move.l d0,-(sp)
   14f4c:	|  |     |   move.l d3,-(sp)
   14f4e:	|  |     |   jsr 15e5c <__ltsf2>
   14f54:	|  |     |   addq.l #8,sp
   14f56:	|  |     |   tst.l d0
   14f58:	|  |     +-- bge.s 14f6e <pointInFloorPolygon+0x208>

			c = !c;
   14f5a:	|  |     |   tst.l 24(sp)
   14f5e:	|  |     |   seq d0
   14f60:	|  |     |   neg.b d0
   14f62:	|  |     |   move.b d0,d0
   14f64:	|  |     |   andi.l #255,d0
   14f6a:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   14f6e:	|  |     \-> move.l 32(sp),d0
   14f72:	|  |         move.l d0,d1
   14f74:	|  |         addq.l #1,d1
   14f76:	|  |         move.l d1,32(sp)
   14f7a:	|  |         move.l d0,28(sp)
   14f7e:	|  \-------> movea.l 40(sp),a0
   14f82:	|            move.l (a0),d0
   14f84:	|            cmp.l 32(sp),d0
   14f88:	\----------- bgt.w 14d88 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   14f8c:	             tst.l 24(sp)
   14f90:	             sne d0
   14f92:	             neg.b d0
   14f94:	             move.b d0,d0
   14f96:	             andi.w #255,d0
}
   14f9a:	             move.l (sp)+,d2
   14f9c:	             move.l (sp)+,d3
   14f9e:	             lea 28(sp),sp
   14fa2:	             rts

00014fa4 <setFloor>:

BOOL setFloor (int fileNum) {
   14fa4:	                               lea -132(sp),sp
   14fa8:	                               move.l a6,-(sp)
   14faa:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   14fac:	                               jsr 14c0c <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   14fb2:	                               move.l 144(sp),-(sp)
   14fb6:	                               jsr 5c54 <openFileFromNum>
   14fbc:	                               addq.l #4,sp
   14fbe:	                               tst.l d0
   14fc0:	                           /-- bne.s 14fc8 <setFloor+0x24>
   14fc2:	                           |   clr.w d0
   14fc4:	/--------------------------|-- bra.w 15714 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   14fc8:	|                          \-> movea.l 1b06a <currentFloor>,a0
   14fce:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   14fd2:	|                              move.l 1aeea <bigDataFile>,118(sp)
   14fda:	|                              move.l 1af0a <DOSBase>,d0
   14fe0:	|                              movea.l d0,a6
   14fe2:	|                              move.l 118(sp),d1
   14fe6:	|                              jsr -306(a6)
   14fea:	|                              move.l d0,114(sp)
   14fee:	|                              move.l 114(sp),d0
   14ff2:	|                              movea.l 1b06a <currentFloor>,a0
   14ff8:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   14ffc:	|                              movea.l 1b06a <currentFloor>,a0
   15002:	|                              move.l 8(a0),d0
   15006:	|                              lsl.l #3,d0
   15008:	|                              move.l d0,110(sp)
   1500c:	|                              clr.l 106(sp)
   15010:	|                              move.l 1af02 <SysBase>,d0
   15016:	|                              movea.l d0,a6
   15018:	|                              move.l 110(sp),d0
   1501c:	|                              move.l 106(sp),d1
   15020:	|                              jsr -684(a6)
   15024:	|                              move.l d0,102(sp)
   15028:	|                              move.l 102(sp),d0
   1502c:	|                              movea.l 1b06a <currentFloor>,a0
   15032:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   15036:	|                              movea.l 1b06a <currentFloor>,a0
   1503c:	|                              move.l 12(a0),d0
   15040:	|                          /-- bne.s 15056 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   15042:	|                          |   pea 18672 <newfatal.c.307beca7+0x8a>
   15048:	|                          |   jsr 157fa <KPrintF>
   1504e:	|                          |   addq.l #4,sp
		return FALSE;
   15050:	|                          |   clr.w d0
   15052:	+--------------------------|-- bra.w 15714 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15056:	|                          \-> clr.l 136(sp)
   1505a:	|                    /-------- bra.w 15172 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1505e:	|                 /--|-------> move.l 1aeea <bigDataFile>,26(sp)
   15066:	|                 |  |         move.l 1af0a <DOSBase>,d0
   1506c:	|                 |  |         movea.l d0,a6
   1506e:	|                 |  |         move.l 26(sp),d1
   15072:	|                 |  |         jsr -306(a6)
   15076:	|                 |  |         move.l d0,22(sp)
   1507a:	|                 |  |         move.l 22(sp),d1
   1507e:	|                 |  |         movea.l 1b06a <currentFloor>,a0
   15084:	|                 |  |         movea.l 12(a0),a0
   15088:	|                 |  |         move.l 136(sp),d0
   1508c:	|                 |  |         lsl.l #3,d0
   1508e:	|                 |  |         adda.l d0,a0
   15090:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   15092:	|                 |  |         movea.l 1b06a <currentFloor>,a0
   15098:	|                 |  |         move.l 12(a0),d1
   1509c:	|                 |  |         move.l 136(sp),d0
   150a0:	|                 |  |         lsl.l #3,d0
   150a2:	|                 |  |         movea.l d1,a0
   150a4:	|                 |  |         adda.l d0,a0
   150a6:	|                 |  |         move.l (a0),d0
   150a8:	|                 |  |         add.l d0,d0
   150aa:	|                 |  |         add.l d0,d0
   150ac:	|                 |  |         move.l d0,18(sp)
   150b0:	|                 |  |         clr.l 14(sp)
   150b4:	|                 |  |         move.l 1af02 <SysBase>,d0
   150ba:	|                 |  |         movea.l d0,a6
   150bc:	|                 |  |         move.l 18(sp),d0
   150c0:	|                 |  |         move.l 14(sp),d1
   150c4:	|                 |  |         jsr -684(a6)
   150c8:	|                 |  |         move.l d0,10(sp)
   150cc:	|                 |  |         move.l 10(sp),d1
   150d0:	|                 |  |         movea.l 1b06a <currentFloor>,a0
   150d6:	|                 |  |         movea.l 12(a0),a0
   150da:	|                 |  |         move.l 136(sp),d0
   150de:	|                 |  |         lsl.l #3,d0
   150e0:	|                 |  |         adda.l d0,a0
   150e2:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   150e6:	|                 |  |         movea.l 1b06a <currentFloor>,a0
   150ec:	|                 |  |         move.l 12(a0),d1
   150f0:	|                 |  |         move.l 136(sp),d0
   150f4:	|                 |  |         lsl.l #3,d0
   150f6:	|                 |  |         movea.l d1,a0
   150f8:	|                 |  |         adda.l d0,a0
   150fa:	|                 |  |         move.l 4(a0),d0
   150fe:	|                 |  |     /-- bne.s 15114 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   15100:	|                 |  |     |   pea 18672 <newfatal.c.307beca7+0x8a>
   15106:	|                 |  |     |   jsr 157fa <KPrintF>
   1510c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1510e:	|                 |  |     |   clr.w d0
   15110:	+-----------------|--|-----|-- bra.w 15714 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   15114:	|                 |  |     \-> clr.l 132(sp)
   15118:	|                 |  |     /-- bra.s 15152 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   1511a:	|                 |  |  /--|-> move.l 1aeea <bigDataFile>,d1
   15120:	|                 |  |  |  |   movea.l 1b06a <currentFloor>,a0
   15126:	|                 |  |  |  |   movea.l 12(a0),a0
   1512a:	|                 |  |  |  |   move.l 136(sp),d0
   1512e:	|                 |  |  |  |   lsl.l #3,d0
   15130:	|                 |  |  |  |   adda.l d0,a0
   15132:	|                 |  |  |  |   movea.l 4(a0),a0
   15136:	|                 |  |  |  |   move.l 132(sp),d0
   1513a:	|                 |  |  |  |   add.l d0,d0
   1513c:	|                 |  |  |  |   add.l d0,d0
   1513e:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   15142:	|                 |  |  |  |   move.l d1,-(sp)
   15144:	|                 |  |  |  |   jsr 6bc <get2bytes>
   1514a:	|                 |  |  |  |   addq.l #4,sp
   1514c:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1514e:	|                 |  |  |  |   addq.l #1,132(sp)
   15152:	|                 |  |  |  \-> movea.l 1b06a <currentFloor>,a0
   15158:	|                 |  |  |      move.l 12(a0),d1
   1515c:	|                 |  |  |      move.l 136(sp),d0
   15160:	|                 |  |  |      lsl.l #3,d0
   15162:	|                 |  |  |      movea.l d1,a0
   15164:	|                 |  |  |      adda.l d0,a0
   15166:	|                 |  |  |      move.l (a0),d0
   15168:	|                 |  |  |      cmp.l 132(sp),d0
   1516c:	|                 |  |  \----- bgt.s 1511a <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1516e:	|                 |  |         addq.l #1,136(sp)
   15172:	|                 |  \-------> movea.l 1b06a <currentFloor>,a0
   15178:	|                 |            move.l 8(a0),d0
   1517c:	|                 |            cmp.l 136(sp),d0
   15180:	|                 \----------- bgt.w 1505e <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   15184:	|                              move.l 1aeea <bigDataFile>,d0
   1518a:	|                              move.l d0,-(sp)
   1518c:	|                              jsr 6bc <get2bytes>
   15192:	|                              addq.l #4,sp
   15194:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   15198:	|                              move.l 136(sp),d0
   1519c:	|                              lsl.l #3,d0
   1519e:	|                              move.l d0,98(sp)
   151a2:	|                              clr.l 94(sp)
   151a6:	|                              move.l 1af02 <SysBase>,d0
   151ac:	|                              movea.l d0,a6
   151ae:	|                              move.l 98(sp),d0
   151b2:	|                              move.l 94(sp),d1
   151b6:	|                              jsr -684(a6)
   151ba:	|                              move.l d0,90(sp)
   151be:	|                              move.l 90(sp),d0
   151c2:	|                              movea.l 1b06a <currentFloor>,a0
   151c8:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   151cc:	|                              movea.l 1b06a <currentFloor>,a0
   151d2:	|                              move.l 4(a0),d0
   151d6:	|                          /-- bne.s 151ec <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   151d8:	|                          |   pea 18672 <newfatal.c.307beca7+0x8a>
   151de:	|                          |   jsr 157fa <KPrintF>
   151e4:	|                          |   addq.l #4,sp
		return FALSE;
   151e6:	|                          |   clr.w d0
   151e8:	+--------------------------|-- bra.w 15714 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   151ec:	|                          \-> clr.l 132(sp)
   151f0:	|                          /-- bra.s 15244 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   151f2:	|                       /--|-> move.l 1aeea <bigDataFile>,d1
   151f8:	|                       |  |   movea.l 1b06a <currentFloor>,a0
   151fe:	|                       |  |   movea.l 4(a0),a0
   15202:	|                       |  |   move.l 132(sp),d0
   15206:	|                       |  |   lsl.l #3,d0
   15208:	|                       |  |   lea (0,a0,d0.l),a2
   1520c:	|                       |  |   move.l d1,-(sp)
   1520e:	|                       |  |   jsr 6bc <get2bytes>
   15214:	|                       |  |   addq.l #4,sp
   15216:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   15218:	|                       |  |   move.l 1aeea <bigDataFile>,d1
   1521e:	|                       |  |   movea.l 1b06a <currentFloor>,a0
   15224:	|                       |  |   movea.l 4(a0),a0
   15228:	|                       |  |   move.l 132(sp),d0
   1522c:	|                       |  |   lsl.l #3,d0
   1522e:	|                       |  |   lea (0,a0,d0.l),a2
   15232:	|                       |  |   move.l d1,-(sp)
   15234:	|                       |  |   jsr 6bc <get2bytes>
   1523a:	|                       |  |   addq.l #4,sp
   1523c:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   15240:	|                       |  |   addq.l #1,132(sp)
   15244:	|                       |  \-> move.l 132(sp),d0
   15248:	|                       |      cmp.l 136(sp),d0
   1524c:	|                       \----- blt.s 151f2 <setFloor+0x24e>
	}

	finishAccess ();
   1524e:	|                              jsr 5b4c <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   15254:	|                              movea.l 1b06a <currentFloor>,a0
   1525a:	|                              move.l 8(a0),d0
   1525e:	|                              add.l d0,d0
   15260:	|                              add.l d0,d0
   15262:	|                              move.l d0,86(sp)
   15266:	|                              clr.l 82(sp)
   1526a:	|                              move.l 1af02 <SysBase>,d0
   15270:	|                              movea.l d0,a6
   15272:	|                              move.l 86(sp),d0
   15276:	|                              move.l 82(sp),d1
   1527a:	|                              jsr -684(a6)
   1527e:	|                              move.l d0,78(sp)
   15282:	|                              move.l 78(sp),d0
   15286:	|                              movea.l 1b06a <currentFloor>,a0
   1528c:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   15290:	|                              movea.l 1b06a <currentFloor>,a0
   15296:	|                              move.l 8(a0),d0
   1529a:	|                              add.l d0,d0
   1529c:	|                              add.l d0,d0
   1529e:	|                              move.l d0,74(sp)
   152a2:	|                              clr.l 70(sp)
   152a6:	|                              move.l 1af02 <SysBase>,d0
   152ac:	|                              movea.l d0,a6
   152ae:	|                              move.l 74(sp),d0
   152b2:	|                              move.l 70(sp),d1
   152b6:	|                              jsr -684(a6)
   152ba:	|                              move.l d0,66(sp)
   152be:	|                              move.l 66(sp),d0
   152c2:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   152c6:	|                              movea.l 1b06a <currentFloor>,a0
   152cc:	|                              move.l 16(a0),d0
   152d0:	|                          /-- bne.s 152e6 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   152d2:	|                          |   pea 18672 <newfatal.c.307beca7+0x8a>
   152d8:	|                          |   jsr 157fa <KPrintF>
   152de:	|                          |   addq.l #4,sp
		return FALSE;
   152e0:	|                          |   clr.w d0
   152e2:	+--------------------------|-- bra.w 15714 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   152e6:	|                          \-> clr.l 136(sp)
   152ea:	|                    /-------- bra.w 1540e <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   152ee:	|                 /--|-------> movea.l 1b06a <currentFloor>,a0
   152f4:	|                 |  |         move.l 8(a0),d0
   152f8:	|                 |  |         add.l d0,d0
   152fa:	|                 |  |         add.l d0,d0
   152fc:	|                 |  |         move.l d0,50(sp)
   15300:	|                 |  |         clr.l 46(sp)
   15304:	|                 |  |         move.l 1af02 <SysBase>,d0
   1530a:	|                 |  |         movea.l d0,a6
   1530c:	|                 |  |         move.l 50(sp),d0
   15310:	|                 |  |         move.l 46(sp),d1
   15314:	|                 |  |         jsr -684(a6)
   15318:	|                 |  |         move.l d0,42(sp)
   1531c:	|                 |  |         move.l 42(sp),d0
   15320:	|                 |  |         movea.l 1b06a <currentFloor>,a0
   15326:	|                 |  |         movea.l 16(a0),a0
   1532a:	|                 |  |         move.l 136(sp),d1
   1532e:	|                 |  |         add.l d1,d1
   15330:	|                 |  |         add.l d1,d1
   15332:	|                 |  |         adda.l d1,a0
   15334:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   15336:	|                 |  |         movea.l 1b06a <currentFloor>,a0
   1533c:	|                 |  |         move.l 8(a0),d0
   15340:	|                 |  |         add.l d0,d0
   15342:	|                 |  |         add.l d0,d0
   15344:	|                 |  |         move.l d0,38(sp)
   15348:	|                 |  |         clr.l 34(sp)
   1534c:	|                 |  |         move.l 1af02 <SysBase>,d0
   15352:	|                 |  |         movea.l d0,a6
   15354:	|                 |  |         move.l 38(sp),d0
   15358:	|                 |  |         move.l 34(sp),d1
   1535c:	|                 |  |         jsr -684(a6)
   15360:	|                 |  |         move.l d0,30(sp)
   15364:	|                 |  |         move.l 30(sp),d1
   15368:	|                 |  |         move.l 136(sp),d0
   1536c:	|                 |  |         add.l d0,d0
   1536e:	|                 |  |         add.l d0,d0
   15370:	|                 |  |         movea.l 62(sp),a0
   15374:	|                 |  |         adda.l d0,a0
   15376:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   15378:	|                 |  |         movea.l 1b06a <currentFloor>,a0
   1537e:	|                 |  |         move.l 16(a0),d1
   15382:	|                 |  |         move.l 136(sp),d0
   15386:	|                 |  |         add.l d0,d0
   15388:	|                 |  |         add.l d0,d0
   1538a:	|                 |  |         movea.l d1,a0
   1538c:	|                 |  |         adda.l d0,a0
   1538e:	|                 |  |         move.l (a0),d0
   15390:	|                 |  |     /-- bne.s 153a6 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   15392:	|                 |  |     |   pea 18672 <newfatal.c.307beca7+0x8a>
   15398:	|                 |  |     |   jsr 157fa <KPrintF>
   1539e:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   153a0:	|                 |  |     |   clr.w d0
   153a2:	+-----------------|--|-----|-- bra.w 15714 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   153a6:	|                 |  |     \-> clr.l 132(sp)
   153aa:	|                 |  |     /-- bra.s 153fa <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   153ac:	|                 |  |  /--|-> movea.l 1b06a <currentFloor>,a0
   153b2:	|                 |  |  |  |   move.l 16(a0),d1
   153b6:	|                 |  |  |  |   move.l 136(sp),d0
   153ba:	|                 |  |  |  |   add.l d0,d0
   153bc:	|                 |  |  |  |   add.l d0,d0
   153be:	|                 |  |  |  |   movea.l d1,a0
   153c0:	|                 |  |  |  |   adda.l d0,a0
   153c2:	|                 |  |  |  |   move.l (a0),d1
   153c4:	|                 |  |  |  |   move.l 132(sp),d0
   153c8:	|                 |  |  |  |   add.l d0,d0
   153ca:	|                 |  |  |  |   add.l d0,d0
   153cc:	|                 |  |  |  |   movea.l d1,a0
   153ce:	|                 |  |  |  |   adda.l d0,a0
   153d0:	|                 |  |  |  |   moveq #-1,d1
   153d2:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   153d4:	|                 |  |  |  |   move.l 136(sp),d0
   153d8:	|                 |  |  |  |   add.l d0,d0
   153da:	|                 |  |  |  |   add.l d0,d0
   153dc:	|                 |  |  |  |   movea.l 62(sp),a0
   153e0:	|                 |  |  |  |   adda.l d0,a0
   153e2:	|                 |  |  |  |   move.l (a0),d1
   153e4:	|                 |  |  |  |   move.l 132(sp),d0
   153e8:	|                 |  |  |  |   add.l d0,d0
   153ea:	|                 |  |  |  |   add.l d0,d0
   153ec:	|                 |  |  |  |   movea.l d1,a0
   153ee:	|                 |  |  |  |   adda.l d0,a0
   153f0:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   153f6:	|                 |  |  |  |   addq.l #1,132(sp)
   153fa:	|                 |  |  |  \-> movea.l 1b06a <currentFloor>,a0
   15400:	|                 |  |  |      move.l 8(a0),d0
   15404:	|                 |  |  |      cmp.l 132(sp),d0
   15408:	|                 |  |  \----- bgt.s 153ac <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1540a:	|                 |  |         addq.l #1,136(sp)
   1540e:	|                 |  \-------> movea.l 1b06a <currentFloor>,a0
   15414:	|                 |            move.l 8(a0),d0
   15418:	|                 |            cmp.l 136(sp),d0
   1541c:	|                 \----------- bgt.w 152ee <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15420:	|                              clr.l 136(sp)
   15424:	|              /-------------- bra.w 1552a <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15428:	|           /--|-------------> clr.l 132(sp)
   1542c:	|           |  |     /-------- bra.w 15514 <setFloor+0x570>
			if (i != j) {
   15430:	|           |  |  /--|-------> move.l 136(sp),d0
   15434:	|           |  |  |  |         cmp.l 132(sp),d0
   15438:	|           |  |  |  |     /-- beq.w 154ca <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   1543c:	|           |  |  |  |     |   movea.l 1b06a <currentFloor>,a0
   15442:	|           |  |  |  |     |   move.l 12(a0),d1
   15446:	|           |  |  |  |     |   move.l 132(sp),d0
   1544a:	|           |  |  |  |     |   lsl.l #3,d0
   1544c:	|           |  |  |  |     |   movea.l d1,a1
   1544e:	|           |  |  |  |     |   adda.l d0,a1
   15450:	|           |  |  |  |     |   movea.l 1b06a <currentFloor>,a0
   15456:	|           |  |  |  |     |   move.l 12(a0),d1
   1545a:	|           |  |  |  |     |   move.l 136(sp),d0
   1545e:	|           |  |  |  |     |   lsl.l #3,d0
   15460:	|           |  |  |  |     |   movea.l d1,a0
   15462:	|           |  |  |  |     |   adda.l d0,a0
   15464:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   15468:	|           |  |  |  |     |   move.l (a1),-(sp)
   1546a:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   1546e:	|           |  |  |  |     |   move.l (a0),-(sp)
   15470:	|           |  |  |  |     |   jsr 14cfc <polysShareSide>
   15476:	|           |  |  |  |     |   lea 16(sp),sp
   1547a:	|           |  |  |  |     |   tst.w d0
   1547c:	|           |  |  |  |  /--|-- beq.w 15510 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   15480:	|           |  |  |  |  |  |   movea.l 1b06a <currentFloor>,a0
   15486:	|           |  |  |  |  |  |   move.l 16(a0),d1
   1548a:	|           |  |  |  |  |  |   move.l 136(sp),d0
   1548e:	|           |  |  |  |  |  |   add.l d0,d0
   15490:	|           |  |  |  |  |  |   add.l d0,d0
   15492:	|           |  |  |  |  |  |   movea.l d1,a0
   15494:	|           |  |  |  |  |  |   adda.l d0,a0
   15496:	|           |  |  |  |  |  |   move.l (a0),d1
   15498:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1549c:	|           |  |  |  |  |  |   add.l d0,d0
   1549e:	|           |  |  |  |  |  |   add.l d0,d0
   154a0:	|           |  |  |  |  |  |   movea.l d1,a0
   154a2:	|           |  |  |  |  |  |   adda.l d0,a0
   154a4:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   154a8:	|           |  |  |  |  |  |   move.l 136(sp),d0
   154ac:	|           |  |  |  |  |  |   add.l d0,d0
   154ae:	|           |  |  |  |  |  |   add.l d0,d0
   154b0:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   154b4:	|           |  |  |  |  |  |   adda.l d0,a0
   154b6:	|           |  |  |  |  |  |   move.l (a0),d1
   154b8:	|           |  |  |  |  |  |   move.l 132(sp),d0
   154bc:	|           |  |  |  |  |  |   add.l d0,d0
   154be:	|           |  |  |  |  |  |   add.l d0,d0
   154c0:	|           |  |  |  |  |  |   movea.l d1,a0
   154c2:	|           |  |  |  |  |  |   adda.l d0,a0
   154c4:	|           |  |  |  |  |  |   moveq #1,d1
   154c6:	|           |  |  |  |  |  |   move.l d1,(a0)
   154c8:	|           |  |  |  |  +--|-- bra.s 15510 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   154ca:	|           |  |  |  |  |  \-> movea.l 1b06a <currentFloor>,a0
   154d0:	|           |  |  |  |  |      move.l 16(a0),d1
   154d4:	|           |  |  |  |  |      move.l 136(sp),d0
   154d8:	|           |  |  |  |  |      add.l d0,d0
   154da:	|           |  |  |  |  |      add.l d0,d0
   154dc:	|           |  |  |  |  |      movea.l d1,a0
   154de:	|           |  |  |  |  |      adda.l d0,a0
   154e0:	|           |  |  |  |  |      move.l (a0),d1
   154e2:	|           |  |  |  |  |      move.l 132(sp),d0
   154e6:	|           |  |  |  |  |      add.l d0,d0
   154e8:	|           |  |  |  |  |      add.l d0,d0
   154ea:	|           |  |  |  |  |      movea.l d1,a0
   154ec:	|           |  |  |  |  |      adda.l d0,a0
   154ee:	|           |  |  |  |  |      moveq #-2,d0
   154f0:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   154f2:	|           |  |  |  |  |      move.l 136(sp),d0
   154f6:	|           |  |  |  |  |      add.l d0,d0
   154f8:	|           |  |  |  |  |      add.l d0,d0
   154fa:	|           |  |  |  |  |      movea.l 62(sp),a0
   154fe:	|           |  |  |  |  |      adda.l d0,a0
   15500:	|           |  |  |  |  |      move.l (a0),d1
   15502:	|           |  |  |  |  |      move.l 132(sp),d0
   15506:	|           |  |  |  |  |      add.l d0,d0
   15508:	|           |  |  |  |  |      add.l d0,d0
   1550a:	|           |  |  |  |  |      movea.l d1,a0
   1550c:	|           |  |  |  |  |      adda.l d0,a0
   1550e:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15510:	|           |  |  |  |  \----> addq.l #1,132(sp)
   15514:	|           |  |  |  \-------> movea.l 1b06a <currentFloor>,a0
   1551a:	|           |  |  |            move.l 8(a0),d0
   1551e:	|           |  |  |            cmp.l 132(sp),d0
   15522:	|           |  |  \----------- bgt.w 15430 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15526:	|           |  |               addq.l #1,136(sp)
   1552a:	|           |  \-------------> movea.l 1b06a <currentFloor>,a0
   15530:	|           |                  move.l 8(a0),d0
   15534:	|           |                  cmp.l 136(sp),d0
   15538:	|           \----------------- bgt.w 15428 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   1553c:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   15540:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   15544:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15548:	|  |                           clr.l 136(sp)
   1554c:	|  |     /-------------------- bra.w 156a2 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15550:	|  |  /--|-------------------> clr.l 132(sp)
   15554:	|  |  |  |     /-------------- bra.w 1568c <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   15558:	|  |  |  |  /--|-------------> movea.l 1b06a <currentFloor>,a0
   1555e:	|  |  |  |  |  |               move.l 16(a0),d1
   15562:	|  |  |  |  |  |               move.l 136(sp),d0
   15566:	|  |  |  |  |  |               add.l d0,d0
   15568:	|  |  |  |  |  |               add.l d0,d0
   1556a:	|  |  |  |  |  |               movea.l d1,a0
   1556c:	|  |  |  |  |  |               adda.l d0,a0
   1556e:	|  |  |  |  |  |               move.l (a0),d1
   15570:	|  |  |  |  |  |               move.l 132(sp),d0
   15574:	|  |  |  |  |  |               add.l d0,d0
   15576:	|  |  |  |  |  |               add.l d0,d0
   15578:	|  |  |  |  |  |               movea.l d1,a0
   1557a:	|  |  |  |  |  |               adda.l d0,a0
   1557c:	|  |  |  |  |  |               move.l (a0),d0
   1557e:	|  |  |  |  |  |               moveq #-1,d1
   15580:	|  |  |  |  |  |               cmp.l d0,d1
   15582:	|  |  |  |  |  |  /----------- bne.w 15688 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   15586:	|  |  |  |  |  |  |            clr.l 122(sp)
   1558a:	|  |  |  |  |  |  |     /----- bra.w 15676 <setFloor+0x6d2>
						if (d != i && d != j) {
   1558e:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   15592:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   15596:	|  |  |  |  |  |  |  |  |  /-- beq.w 15672 <setFloor+0x6ce>
   1559a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   1559e:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   155a2:	|  |  |  |  |  |  |  |  |  +-- beq.w 15672 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   155a6:	|  |  |  |  |  |  |  |  |  |   movea.l 1b06a <currentFloor>,a0
   155ac:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   155b0:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   155b4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155b6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155b8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   155ba:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   155bc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   155be:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   155c2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155c4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155c6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   155c8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   155ca:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   155cc:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   155d0:	|  |  |  |  |  |  |  |  |  +-- bne.w 15672 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   155d4:	|  |  |  |  |  |  |  |  |  |   movea.l 1b06a <currentFloor>,a0
   155da:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   155de:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   155e2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155e4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155e6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   155e8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   155ea:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   155ec:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   155f0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155f2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   155f4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   155f6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   155f8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   155fa:	|  |  |  |  |  |  |  |  |  +-- bmi.s 15672 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   155fc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   15600:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15602:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15604:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   15608:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1560a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1560c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15610:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15612:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15614:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15616:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15618:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   1561a:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   1561e:	|  |  |  |  |  |  |  |  |  +-- bgt.s 15672 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   15620:	|  |  |  |  |  |  |  |  |  |   movea.l 1b06a <currentFloor>,a0
   15626:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1562a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1562e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15630:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15632:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15634:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15636:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15638:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1563c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1563e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15640:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15642:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15644:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   15648:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1564c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1564e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15650:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   15654:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15656:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15658:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1565c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1565e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15660:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15662:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15664:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   15668:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   1566a:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   1566c:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   15672:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   15676:	|  |  |  |  |  |  |  |  \----> movea.l 1b06a <currentFloor>,a0
   1567c:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   15680:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   15684:	|  |  |  |  |  |  |  \-------- bgt.w 1558e <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15688:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   1568c:	|  |  |  |  |  \-------------> movea.l 1b06a <currentFloor>,a0
   15692:	|  |  |  |  |                  move.l 8(a0),d0
   15696:	|  |  |  |  |                  cmp.l 132(sp),d0
   1569a:	|  |  |  |  \----------------- bgt.w 15558 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1569e:	|  |  |  |                     addq.l #1,136(sp)
   156a2:	|  |  |  \-------------------> movea.l 1b06a <currentFloor>,a0
   156a8:	|  |  |                        move.l 8(a0),d0
   156ac:	|  |  |                        cmp.l 136(sp),d0
   156b0:	|  |  \----------------------- bgt.w 15550 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   156b4:	|  |                           tst.w 130(sp)
   156b8:	|  \-------------------------- bne.w 15540 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   156bc:	|                              clr.l 136(sp)
   156c0:	|                          /-- bra.s 156e8 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   156c2:	|                       /--|-> move.l 136(sp),d0
   156c6:	|                       |  |   add.l d0,d0
   156c8:	|                       |  |   add.l d0,d0
   156ca:	|                       |  |   movea.l 62(sp),a0
   156ce:	|                       |  |   adda.l d0,a0
   156d0:	|                       |  |   move.l (a0),54(sp)
   156d4:	|                       |  |   move.l 1af02 <SysBase>,d0
   156da:	|                       |  |   movea.l d0,a6
   156dc:	|                       |  |   movea.l 54(sp),a1
   156e0:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   156e4:	|                       |  |   addq.l #1,136(sp)
   156e8:	|                       |  \-> movea.l 1b06a <currentFloor>,a0
   156ee:	|                       |      move.l 8(a0),d0
   156f2:	|                       |      cmp.l 136(sp),d0
   156f6:	|                       \----- bgt.s 156c2 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   156f8:	|                              move.l 62(sp),58(sp)
   156fe:	|                              move.l 1af02 <SysBase>,d0
   15704:	|                              movea.l d0,a6
   15706:	|                              movea.l 58(sp),a1
   1570a:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   1570e:	|                              clr.l 62(sp)

	return TRUE;
   15712:	|                              moveq #1,d0
}
   15714:	\----------------------------> movea.l (sp)+,a2
   15716:	                               movea.l (sp)+,a6
   15718:	                               lea 132(sp),sp
   1571c:	                               rts

0001571e <setFloorNull>:

void setFloorNull () {
	killFloor ();
   1571e:	jsr 14c0c <killFloor>
	noFloor ();
   15724:	jsr 14b30 <noFloor>
   1572a:	nop
   1572c:	rts

0001572e <WaitVbl>:
void WaitVbl() {
   1572e:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   15730:	   /-> movea.l #14675972,a0
   15736:	   |   move.l (a0),d0
   15738:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   1573a:	   |   move.l (sp),d0
   1573c:	   |   andi.l #130816,d0
   15742:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   15744:	   |   move.l (sp),d0
   15746:	   |   cmpi.l #76800,d0
   1574c:	   \-- beq.s 15730 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1574e:	/----> movea.l #14675972,a0
   15754:	|      move.l (a0),d0
   15756:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   1575a:	|      move.l 4(sp),d0
   1575e:	|      andi.l #130816,d0
   15764:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   15768:	|      move.l 4(sp),d0
   1576c:	|      cmpi.l #76800,d0
   15772:	|  /-- beq.s 15776 <WaitVbl+0x48>
	while (1) {
   15774:	\--|-- bra.s 1574e <WaitVbl+0x20>
			break;
   15776:	   \-> nop
}
   15778:	       nop
   1577a:	       addq.l #8,sp
   1577c:	       rts

0001577e <memset>:
void* memset(void *dest, int val, unsigned long len) {
   1577e:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   15780:	       move.l 8(sp),(sp)
	while(len-- > 0)
   15784:	   /-- bra.s 15796 <memset+0x18>
		*ptr++ = val;
   15786:	/--|-> move.l (sp),d0
   15788:	|  |   move.l d0,d1
   1578a:	|  |   addq.l #1,d1
   1578c:	|  |   move.l d1,(sp)
   1578e:	|  |   move.l 12(sp),d1
   15792:	|  |   movea.l d0,a0
   15794:	|  |   move.b d1,(a0)
	while(len-- > 0)
   15796:	|  \-> move.l 16(sp),d0
   1579a:	|      move.l d0,d1
   1579c:	|      subq.l #1,d1
   1579e:	|      move.l d1,16(sp)
   157a2:	|      tst.l d0
   157a4:	\----- bne.s 15786 <memset+0x8>
	return dest;
   157a6:	       move.l 8(sp),d0
}
   157aa:	       addq.l #4,sp
   157ac:	       rts

000157ae <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   157ae:	       subq.l #8,sp
   157b0:	       move.l d2,-(sp)
	char *d = (char *)dest;
   157b2:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   157b8:	       move.l 20(sp),4(sp)
	while(len--)
   157be:	   /-- bra.s 157e0 <memcpy+0x32>
		*d++ = *s++;
   157c0:	/--|-> move.l 4(sp),d1
   157c4:	|  |   move.l d1,d0
   157c6:	|  |   addq.l #1,d0
   157c8:	|  |   move.l d0,4(sp)
   157cc:	|  |   move.l 8(sp),d0
   157d0:	|  |   move.l d0,d2
   157d2:	|  |   addq.l #1,d2
   157d4:	|  |   move.l d2,8(sp)
   157d8:	|  |   movea.l d1,a0
   157da:	|  |   move.b (a0),d1
   157dc:	|  |   movea.l d0,a0
   157de:	|  |   move.b d1,(a0)
	while(len--)
   157e0:	|  \-> move.l 24(sp),d0
   157e4:	|      move.l d0,d1
   157e6:	|      subq.l #1,d1
   157e8:	|      move.l d1,24(sp)
   157ec:	|      tst.l d0
   157ee:	\----- bne.s 157c0 <memcpy+0x12>
	return dest;
   157f0:	       move.l 16(sp),d0
}
   157f4:	       move.l (sp)+,d2
   157f6:	       addq.l #8,sp
   157f8:	       rts

000157fa <KPrintF>:
void KPrintF(const char* fmt, ...) {
   157fa:	       lea -128(sp),sp
   157fe:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   15802:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec917a>,d0
   15808:	       cmpi.w #20153,d0
   1580c:	   /-- beq.s 15830 <KPrintF+0x36>
   1580e:	   |   cmpi.w #-24562,d0
   15812:	   +-- beq.s 15830 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   15814:	   |   movea.l 1af02 <SysBase>,a6
   1581a:	   |   movea.l 144(sp),a0
   1581e:	   |   lea 148(sp),a1
   15822:	   |   lea 162c0 <KPutCharX>,a2
   15828:	   |   suba.l a3,a3
   1582a:	   |   jsr -522(a6)
}
   1582e:	/--|-- bra.s 1585a <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   15830:	|  \-> movea.l 1af02 <SysBase>,a6
   15836:	|      movea.l 144(sp),a0
   1583a:	|      lea 148(sp),a1
   1583e:	|      lea 162ce <PutChar>,a2
   15844:	|      lea 12(sp),a3
   15848:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1584c:	|      move.l a3,-(sp)
   1584e:	|      pea 56 <_start+0x56>
   15852:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec917a>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   15858:	|      addq.l #8,sp
}
   1585a:	\----> movem.l (sp)+,a2-a3/a6
   1585e:	       lea 128(sp),sp
   15862:	       rts

00015864 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   15864:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   15866:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   1586c:	       movea.l (sp),a0
   1586e:	       move.w (a0),d0
   15870:	       cmpi.w #20153,d0
   15874:	   /-- beq.s 15880 <debug_cmd+0x1c>
   15876:	   |   movea.l (sp),a0
   15878:	   |   move.w (a0),d0
   1587a:	   |   cmpi.w #-24562,d0
   1587e:	/--|-- bne.s 1589e <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   15880:	|  \-> move.l 20(sp),-(sp)
   15884:	|      move.l 20(sp),-(sp)
   15888:	|      move.l 20(sp),-(sp)
   1588c:	|      move.l 20(sp),-(sp)
   15890:	|      pea 58 <_start+0x58>
   15894:	|      movea.l 20(sp),a0
   15898:	|      jsr (a0)
   1589a:	|      lea 20(sp),sp
	}
}
   1589e:	\----> nop
   158a0:	       addq.l #4,sp
   158a2:	       rts

000158a4 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   158a4:	       move.l d2,-(sp)
	while(*source && --num > 0)
   158a6:	   /-- bra.s 158c8 <my_strncpy+0x24>
		*destination++ = *source++;
   158a8:	/--|-> move.l 12(sp),d1
   158ac:	|  |   move.l d1,d0
   158ae:	|  |   addq.l #1,d0
   158b0:	|  |   move.l d0,12(sp)
   158b4:	|  |   move.l 8(sp),d0
   158b8:	|  |   move.l d0,d2
   158ba:	|  |   addq.l #1,d2
   158bc:	|  |   move.l d2,8(sp)
   158c0:	|  |   movea.l d1,a0
   158c2:	|  |   move.b (a0),d1
   158c4:	|  |   movea.l d0,a0
   158c6:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   158c8:	|  \-> movea.l 12(sp),a0
   158cc:	|      move.b (a0),d0
   158ce:	|  /-- beq.s 158d6 <my_strncpy+0x32>
   158d0:	|  |   subq.l #1,16(sp)
   158d4:	\--|-- bne.s 158a8 <my_strncpy+0x4>
	*destination = '\0';
   158d6:	   \-> movea.l 8(sp),a0
   158da:	       clr.b (a0)
}
   158dc:	       nop
   158de:	       move.l (sp)+,d2
   158e0:	       rts

000158e2 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   158e2:	    lea -60(sp),sp
   158e6:	    movea.l 72(sp),a1
   158ea:	    movea.l 76(sp),a0
   158ee:	    move.l 80(sp),d1
   158f2:	    move.l 84(sp),d0
   158f6:	    movea.w a1,a1
   158f8:	    move.w a1,8(sp)
   158fc:	    movea.w a0,a0
   158fe:	    move.w a0,6(sp)
   15902:	    move.w d1,d1
   15904:	    move.w d1,4(sp)
   15908:	    move.w d0,d0
   1590a:	    move.w d0,2(sp)
	struct debug_resource resource = {
   1590e:	    lea 10(sp),a0
   15912:	    clr.l (a0)
   15914:	    addq.l #4,a0
   15916:	    clr.l (a0)
   15918:	    addq.l #4,a0
   1591a:	    clr.l (a0)
   1591c:	    addq.l #4,a0
   1591e:	    clr.l (a0)
   15920:	    addq.l #4,a0
   15922:	    clr.l (a0)
   15924:	    addq.l #4,a0
   15926:	    clr.l (a0)
   15928:	    addq.l #4,a0
   1592a:	    clr.l (a0)
   1592c:	    addq.l #4,a0
   1592e:	    clr.l (a0)
   15930:	    addq.l #4,a0
   15932:	    clr.l (a0)
   15934:	    addq.l #4,a0
   15936:	    clr.l (a0)
   15938:	    addq.l #4,a0
   1593a:	    clr.l (a0)
   1593c:	    addq.l #4,a0
   1593e:	    clr.l (a0)
   15940:	    addq.l #4,a0
   15942:	    clr.w (a0)
   15944:	    addq.l #2,a0
		.address = (unsigned int)addr,
   15946:	    move.l 64(sp),d0
	struct debug_resource resource = {
   1594a:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   1594e:	    move.w 8(sp),d0
   15952:	/-- bpl.s 15956 <debug_register_bitmap+0x74>
   15954:	|   addq.w #7,d0
   15956:	\-> asr.w #3,d0
   15958:	    movea.w d0,a0
   1595a:	    movea.w 6(sp),a1
   1595e:	    move.l a1,-(sp)
   15960:	    move.l a0,-(sp)
   15962:	    jsr 161b8 <__mulsi3>
   15968:	    addq.l #8,sp
   1596a:	    movea.w 4(sp),a0
   1596e:	    move.l a0,-(sp)
   15970:	    move.l d0,-(sp)
   15972:	    jsr 161b8 <__mulsi3>
   15978:	    addq.l #8,sp
	struct debug_resource resource = {
   1597a:	    move.l d0,14(sp)
   1597e:	    move.w 2(sp),52(sp)
   15984:	    move.w 8(sp),54(sp)
   1598a:	    move.w 6(sp),56(sp)
   15990:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   15996:	    moveq #0,d0
   15998:	    move.w 2(sp),d0
   1599c:	    moveq #2,d1
   1599e:	    and.l d1,d0
   159a0:	/-- beq.s 159ac <debug_register_bitmap+0xca>
		resource.size *= 2;
   159a2:	|   move.l 14(sp),d0
   159a6:	|   add.l d0,d0
   159a8:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   159ac:	\-> pea 20 <_start+0x20>
   159b0:	    move.l 72(sp),-(sp)
   159b4:	    lea 18(sp),a0
   159b8:	    move.l a0,d0
   159ba:	    addq.l #8,d0
   159bc:	    move.l d0,-(sp)
   159be:	    jsr 158a4 <my_strncpy>
   159c4:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   159c8:	    lea 10(sp),a0
   159cc:	    clr.l -(sp)
   159ce:	    clr.l -(sp)
   159d0:	    move.l a0,-(sp)
   159d2:	    pea 4 <_start+0x4>
   159d6:	    jsr 15864 <debug_cmd>
   159dc:	    lea 16(sp),sp
}
   159e0:	    nop
   159e2:	    lea 60(sp),sp
   159e6:	    rts

000159e8 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   159e8:	lea -12(sp),sp
   159ec:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   159ee:	move.l 20(sp),12(sp)
   159f4:	move.l 24(sp),8(sp)
   159fa:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15a00:	movea.l d0,a6
   15a02:	move.l 12(sp),d0
   15a06:	move.l 8(sp),d1
   15a0a:	jsr -66(a6)
   15a0e:	move.l d0,4(sp)
   15a12:	move.l 4(sp),d0
}
   15a16:	movea.l (sp)+,a6
   15a18:	lea 12(sp),sp
   15a1c:	rts

00015a1e <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   15a1e:	lea -32(sp),sp
   15a22:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   15a26:	move.l 48(sp),36(sp)
   15a2c:	move.l 52(sp),40(sp)
   15a32:	move.l 56(sp),28(sp)
   15a38:	move.l 60(sp),32(sp)
   15a3e:	move.l 1af1a <MathIeeeDoubBasBase>,d0
   15a44:	movea.l d0,a6
   15a46:	move.l 36(sp),d0
   15a4a:	move.l 40(sp),d1
   15a4e:	move.l 28(sp),d2
   15a52:	move.l 32(sp),d3
   15a56:	jsr -66(a6)
   15a5a:	move.l d0,12(sp)
   15a5e:	move.l d1,16(sp)
   15a62:	move.l 12(sp),20(sp)
   15a68:	move.l 16(sp),24(sp)
   15a6e:	move.l 20(sp),d0
   15a72:	move.l 24(sp),d1
}
   15a76:	movem.l (sp)+,d2-d3/a6
   15a7a:	lea 32(sp),sp
   15a7e:	rts

00015a80 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   15a80:	lea -32(sp),sp
   15a84:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   15a88:	move.l 48(sp),36(sp)
   15a8e:	move.l 52(sp),40(sp)
   15a94:	move.l 56(sp),28(sp)
   15a9a:	move.l 60(sp),32(sp)
   15aa0:	move.l 1af1a <MathIeeeDoubBasBase>,d0
   15aa6:	movea.l d0,a6
   15aa8:	move.l 36(sp),d0
   15aac:	move.l 40(sp),d1
   15ab0:	move.l 28(sp),d2
   15ab4:	move.l 32(sp),d3
   15ab8:	jsr -84(a6)
   15abc:	move.l d0,12(sp)
   15ac0:	move.l d1,16(sp)
   15ac4:	move.l 12(sp),20(sp)
   15aca:	move.l 16(sp),24(sp)
   15ad0:	move.l 20(sp),d0
   15ad4:	move.l 24(sp),d1
}
   15ad8:	movem.l (sp)+,d2-d3/a6
   15adc:	lea 32(sp),sp
   15ae0:	rts

00015ae2 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   15ae2:	lea -12(sp),sp
   15ae6:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   15ae8:	move.l 20(sp),12(sp)
   15aee:	move.l 24(sp),8(sp)
   15af4:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15afa:	movea.l d0,a6
   15afc:	move.l 12(sp),d0
   15b00:	move.l 8(sp),d1
   15b04:	jsr -84(a6)
   15b08:	move.l d0,4(sp)
   15b0c:	move.l 4(sp),d0
}
   15b10:	movea.l (sp)+,a6
   15b12:	lea 12(sp),sp
   15b16:	rts

00015b18 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   15b18:	lea -12(sp),sp
   15b1c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15b1e:	move.l 20(sp),12(sp)
   15b24:	move.l 24(sp),8(sp)
   15b2a:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15b30:	movea.l d0,a6
   15b32:	move.l 12(sp),d0
   15b36:	move.l 8(sp),d1
   15b3a:	jsr -42(a6)
   15b3e:	move.l d0,4(sp)
   15b42:	move.l 4(sp),d0
}
   15b46:	movea.l (sp)+,a6
   15b48:	lea 12(sp),sp
   15b4c:	rts

00015b4e <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   15b4e:	lea -20(sp),sp
   15b52:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   15b54:	move.l 28(sp),20(sp)
   15b5a:	move.l 1af1e <MathIeeeDoubTransBase>,d0
   15b60:	movea.l d0,a6
   15b62:	move.l 20(sp),d0
   15b66:	jsr -108(a6)
   15b6a:	move.l d0,4(sp)
   15b6e:	move.l d1,8(sp)
   15b72:	move.l 4(sp),12(sp)
   15b78:	move.l 8(sp),16(sp)
   15b7e:	move.l 12(sp),d0
   15b82:	move.l 16(sp),d1
}
   15b86:	movea.l (sp)+,a6
   15b88:	lea 20(sp),sp
   15b8c:	rts

00015b8e <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   15b8e:	lea -12(sp),sp
   15b92:	move.l a6,-(sp)
	return IEEEDPFix(value);
   15b94:	move.l 20(sp),8(sp)
   15b9a:	move.l 24(sp),12(sp)
   15ba0:	move.l 1af1a <MathIeeeDoubBasBase>,d0
   15ba6:	movea.l d0,a6
   15ba8:	move.l 8(sp),d0
   15bac:	move.l 12(sp),d1
   15bb0:	jsr -30(a6)
   15bb4:	move.l d0,4(sp)
   15bb8:	move.l 4(sp),d0
   15bbc:	move.l d0,-(sp)
   15bbe:	jsr 15bf6 <__floatsidf>
   15bc4:	addq.l #4,sp
}
   15bc6:	movea.l (sp)+,a6
   15bc8:	lea 12(sp),sp
   15bcc:	rts

00015bce <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   15bce:	subq.l #8,sp
   15bd0:	move.l a6,-(sp)
	return IEEESPFix(value);
   15bd2:	move.l 16(sp),8(sp)
   15bd8:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15bde:	movea.l d0,a6
   15be0:	move.l 8(sp),d0
   15be4:	jsr -30(a6)
   15be8:	move.l d0,4(sp)
   15bec:	move.l 4(sp),d0
}
   15bf0:	movea.l (sp)+,a6
   15bf2:	addq.l #8,sp
   15bf4:	rts

00015bf6 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   15bf6:	lea -20(sp),sp
   15bfa:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   15bfc:	move.l 28(sp),20(sp)
   15c02:	move.l 1af1a <MathIeeeDoubBasBase>,d0
   15c08:	movea.l d0,a6
   15c0a:	move.l 20(sp),d0
   15c0e:	jsr -36(a6)
   15c12:	move.l d0,4(sp)
   15c16:	move.l d1,8(sp)
   15c1a:	move.l 4(sp),12(sp)
   15c20:	move.l 8(sp),16(sp)
   15c26:	move.l 12(sp),d0
   15c2a:	move.l 16(sp),d1
}
   15c2e:	movea.l (sp)+,a6
   15c30:	lea 20(sp),sp
   15c34:	rts

00015c36 <__floatsisf>:

FLOAT __floatsisf(int i) {
   15c36:	subq.l #8,sp
   15c38:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   15c3a:	move.l 16(sp),8(sp)
   15c40:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15c46:	movea.l d0,a6
   15c48:	move.l 8(sp),d0
   15c4c:	jsr -36(a6)
   15c50:	move.l d0,4(sp)
   15c54:	move.l 4(sp),d0
}
   15c58:	movea.l (sp)+,a6
   15c5a:	addq.l #8,sp
   15c5c:	rts

00015c5e <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   15c5e:	subq.l #8,sp
   15c60:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   15c62:	move.l 16(sp),8(sp)
   15c68:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15c6e:	movea.l d0,a6
   15c70:	move.l 8(sp),d0
   15c74:	jsr -36(a6)
   15c78:	move.l d0,4(sp)
   15c7c:	move.l 4(sp),d0
}
   15c80:	movea.l (sp)+,a6
   15c82:	addq.l #8,sp
   15c84:	rts

00015c86 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   15c86:	lea -32(sp),sp
   15c8a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   15c8e:	move.l 48(sp),36(sp)
   15c94:	move.l 52(sp),40(sp)
   15c9a:	move.l 56(sp),28(sp)
   15ca0:	move.l 60(sp),32(sp)
   15ca6:	move.l 1af1a <MathIeeeDoubBasBase>,d0
   15cac:	movea.l d0,a6
   15cae:	move.l 36(sp),d0
   15cb2:	move.l 40(sp),d1
   15cb6:	move.l 28(sp),d2
   15cba:	move.l 32(sp),d3
   15cbe:	jsr -78(a6)
   15cc2:	move.l d0,12(sp)
   15cc6:	move.l d1,16(sp)
   15cca:	move.l 12(sp),20(sp)
   15cd0:	move.l 16(sp),24(sp)
   15cd6:	move.l 20(sp),d0
   15cda:	move.l 24(sp),d1
}
   15cde:	movem.l (sp)+,d2-d3/a6
   15ce2:	lea 32(sp),sp
   15ce6:	rts

00015ce8 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   15ce8:	lea -12(sp),sp
   15cec:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   15cee:	move.l 20(sp),12(sp)
   15cf4:	move.l 24(sp),8(sp)
   15cfa:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15d00:	movea.l d0,a6
   15d02:	move.l 12(sp),d0
   15d06:	move.l 8(sp),d1
   15d0a:	jsr -78(a6)
   15d0e:	move.l d0,4(sp)
   15d12:	move.l 4(sp),d0
}
   15d16:	movea.l (sp)+,a6
   15d18:	lea 12(sp),sp
   15d1c:	rts

00015d1e <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   15d1e:	lea -12(sp),sp
   15d22:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15d24:	move.l 20(sp),12(sp)
   15d2a:	move.l 24(sp),8(sp)
   15d30:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15d36:	movea.l d0,a6
   15d38:	move.l 12(sp),d0
   15d3c:	move.l 8(sp),d1
   15d40:	jsr -42(a6)
   15d44:	move.l d0,4(sp)
   15d48:	move.l 4(sp),d0
}
   15d4c:	movea.l (sp)+,a6
   15d4e:	lea 12(sp),sp
   15d52:	rts

00015d54 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   15d54:	lea -20(sp),sp
   15d58:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   15d5c:	move.l 36(sp),24(sp)
   15d62:	move.l 40(sp),28(sp)
   15d68:	move.l 44(sp),16(sp)
   15d6e:	move.l 48(sp),20(sp)
   15d74:	move.l 1af1a <MathIeeeDoubBasBase>,d0
   15d7a:	movea.l d0,a6
   15d7c:	move.l 24(sp),d0
   15d80:	move.l 28(sp),d1
   15d84:	move.l 16(sp),d2
   15d88:	move.l 20(sp),d3
   15d8c:	jsr -42(a6)
   15d90:	move.l d0,12(sp)
   15d94:	move.l 12(sp),d0
}
   15d98:	movem.l (sp)+,d2-d3/a6
   15d9c:	lea 20(sp),sp
   15da0:	rts

00015da2 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   15da2:	lea -12(sp),sp
   15da6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15da8:	move.l 20(sp),12(sp)
   15dae:	move.l 24(sp),8(sp)
   15db4:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15dba:	movea.l d0,a6
   15dbc:	move.l 12(sp),d0
   15dc0:	move.l 8(sp),d1
   15dc4:	jsr -42(a6)
   15dc8:	move.l d0,4(sp)
   15dcc:	move.l 4(sp),d0
}
   15dd0:	movea.l (sp)+,a6
   15dd2:	lea 12(sp),sp
   15dd6:	rts

00015dd8 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   15dd8:	lea -12(sp),sp
   15ddc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15dde:	move.l 20(sp),12(sp)
   15de4:	move.l 24(sp),8(sp)
   15dea:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15df0:	movea.l d0,a6
   15df2:	move.l 12(sp),d0
   15df6:	move.l 8(sp),d1
   15dfa:	jsr -42(a6)
   15dfe:	move.l d0,4(sp)
   15e02:	move.l 4(sp),d0
}
   15e06:	movea.l (sp)+,a6
   15e08:	lea 12(sp),sp
   15e0c:	rts

00015e0e <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   15e0e:	lea -20(sp),sp
   15e12:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   15e16:	move.l 36(sp),24(sp)
   15e1c:	move.l 40(sp),28(sp)
   15e22:	move.l 44(sp),16(sp)
   15e28:	move.l 48(sp),20(sp)
   15e2e:	move.l 1af1a <MathIeeeDoubBasBase>,d0
   15e34:	movea.l d0,a6
   15e36:	move.l 24(sp),d0
   15e3a:	move.l 28(sp),d1
   15e3e:	move.l 16(sp),d2
   15e42:	move.l 20(sp),d3
   15e46:	jsr -42(a6)
   15e4a:	move.l d0,12(sp)
   15e4e:	move.l 12(sp),d0
}
   15e52:	movem.l (sp)+,d2-d3/a6
   15e56:	lea 20(sp),sp
   15e5a:	rts

00015e5c <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   15e5c:	lea -12(sp),sp
   15e60:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15e62:	move.l 20(sp),12(sp)
   15e68:	move.l 24(sp),8(sp)
   15e6e:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15e74:	movea.l d0,a6
   15e76:	move.l 12(sp),d0
   15e7a:	move.l 8(sp),d1
   15e7e:	jsr -42(a6)
   15e82:	move.l d0,4(sp)
   15e86:	move.l 4(sp),d0
}
   15e8a:	movea.l (sp)+,a6
   15e8c:	lea 12(sp),sp
   15e90:	rts

00015e92 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   15e92:	lea -12(sp),sp
   15e96:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15e98:	move.l 20(sp),12(sp)
   15e9e:	move.l 24(sp),8(sp)
   15ea4:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15eaa:	movea.l d0,a6
   15eac:	move.l 12(sp),d0
   15eb0:	move.l 8(sp),d1
   15eb4:	jsr -42(a6)
   15eb8:	move.l d0,4(sp)
   15ebc:	move.l 4(sp),d0
}
   15ec0:	movea.l (sp)+,a6
   15ec2:	lea 12(sp),sp
   15ec6:	rts

00015ec8 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   15ec8:	lea -32(sp),sp
   15ecc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   15ed0:	move.l 48(sp),36(sp)
   15ed6:	move.l 52(sp),40(sp)
   15edc:	move.l 56(sp),28(sp)
   15ee2:	move.l 60(sp),32(sp)
   15ee8:	move.l 1af1a <MathIeeeDoubBasBase>,d0
   15eee:	movea.l d0,a6
   15ef0:	move.l 36(sp),d0
   15ef4:	move.l 40(sp),d1
   15ef8:	move.l 28(sp),d2
   15efc:	move.l 32(sp),d3
   15f00:	jsr -72(a6)
   15f04:	move.l d0,12(sp)
   15f08:	move.l d1,16(sp)
   15f0c:	move.l 12(sp),20(sp)
   15f12:	move.l 16(sp),24(sp)
   15f18:	move.l 20(sp),d0
   15f1c:	move.l 24(sp),d1
}
   15f20:	movem.l (sp)+,d2-d3/a6
   15f24:	lea 32(sp),sp
   15f28:	rts

00015f2a <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   15f2a:	lea -12(sp),sp
   15f2e:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   15f30:	move.l 20(sp),12(sp)
   15f36:	move.l 24(sp),8(sp)
   15f3c:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15f42:	movea.l d0,a6
   15f44:	move.l 12(sp),d0
   15f48:	move.l 8(sp),d1
   15f4c:	jsr -72(a6)
   15f50:	move.l d0,4(sp)
   15f54:	move.l 4(sp),d0
}
   15f58:	movea.l (sp)+,a6
   15f5a:	lea 12(sp),sp
   15f5e:	rts

00015f60 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   15f60:	lea -12(sp),sp
   15f64:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   15f66:	move.l 20(sp),8(sp)
   15f6c:	move.l 24(sp),12(sp)
   15f72:	move.l 1af1e <MathIeeeDoubTransBase>,d0
   15f78:	movea.l d0,a6
   15f7a:	move.l 8(sp),d0
   15f7e:	move.l 12(sp),d1
   15f82:	jsr -102(a6)
   15f86:	move.l d0,4(sp)
   15f8a:	move.l 4(sp),d0
}
   15f8e:	movea.l (sp)+,a6
   15f90:	lea 12(sp),sp
   15f94:	rts

00015f96 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   15f96:	subq.l #8,sp
   15f98:	move.l a6,-(sp)
	return IEEESPFix(a);
   15f9a:	move.l 16(sp),8(sp)
   15fa0:	move.l 1af12 <MathIeeeSingBasBase>,d0
   15fa6:	movea.l d0,a6
   15fa8:	move.l 8(sp),d0
   15fac:	jsr -30(a6)
   15fb0:	move.l d0,4(sp)
   15fb4:	move.l 4(sp),d0
}
   15fb8:	movea.l (sp)+,a6
   15fba:	addq.l #8,sp
   15fbc:	rts

00015fbe <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   15fbe:	       lea -24(sp),sp
   15fc2:	       move.l a6,-(sp)
    if (x > 0) {
   15fc4:	       clr.l -(sp)
   15fc6:	       move.l 40(sp),-(sp)
   15fca:	       jsr 15da2 <__gtsf2>
   15fd0:	       addq.l #8,sp
   15fd2:	       tst.l d0
   15fd4:	   /-- ble.s 16006 <atan2f+0x48>
        return IEEESPAtan(y / x);
   15fd6:	   |   move.l 36(sp),-(sp)
   15fda:	   |   move.l 36(sp),-(sp)
   15fde:	   |   jsr 15ae2 <__divsf3>
   15fe4:	   |   addq.l #8,sp
   15fe6:	   |   move.l d0,8(sp)
   15fea:	   |   move.l 1af16 <MathIeeeSingTransBase>,d0
   15ff0:	   |   movea.l d0,a6
   15ff2:	   |   move.l 8(sp),d0
   15ff6:	   |   jsr -30(a6)
   15ffa:	   |   move.l d0,4(sp)
   15ffe:	   |   move.l 4(sp),d0
   16002:	/--|-- bra.w 16166 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   16006:	|  \-> clr.l -(sp)
   16008:	|      move.l 40(sp),-(sp)
   1600c:	|      jsr 15e5c <__ltsf2>
   16012:	|      addq.l #8,sp
   16014:	|      tst.l d0
   16016:	|  /-- bge.s 1608a <atan2f+0xcc>
   16018:	|  |   clr.l -(sp)
   1601a:	|  |   move.l 36(sp),-(sp)
   1601e:	|  |   jsr 15d1e <__gesf2>
   16024:	|  |   addq.l #8,sp
   16026:	|  |   tst.l d0
   16028:	|  +-- blt.s 1608a <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   1602a:	|  |   move.l 36(sp),-(sp)
   1602e:	|  |   move.l 36(sp),-(sp)
   16032:	|  |   jsr 15ae2 <__divsf3>
   16038:	|  |   addq.l #8,sp
   1603a:	|  |   move.l d0,24(sp)
   1603e:	|  |   move.l 1af16 <MathIeeeSingTransBase>,d0
   16044:	|  |   movea.l d0,a6
   16046:	|  |   move.l 24(sp),d0
   1604a:	|  |   jsr -30(a6)
   1604e:	|  |   move.l d0,20(sp)
   16052:	|  |   move.l 20(sp),d0
   16056:	|  |   move.l d0,-(sp)
   16058:	|  |   jsr 15b4e <__extendsfdf2>
   1605e:	|  |   addq.l #4,sp
   16060:	|  |   move.l #1413754136,-(sp)
   16066:	|  |   move.l #1074340347,-(sp)
   1606c:	|  |   move.l d1,-(sp)
   1606e:	|  |   move.l d0,-(sp)
   16070:	|  |   jsr 15a1e <__adddf3>
   16076:	|  |   lea 16(sp),sp
   1607a:	|  |   move.l d1,-(sp)
   1607c:	|  |   move.l d0,-(sp)
   1607e:	|  |   jsr 15f60 <__truncdfsf2>
   16084:	|  |   addq.l #8,sp
   16086:	+--|-- bra.w 16166 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   1608a:	|  \-> clr.l -(sp)
   1608c:	|      move.l 40(sp),-(sp)
   16090:	|      jsr 15e5c <__ltsf2>
   16096:	|      addq.l #8,sp
   16098:	|      tst.l d0
   1609a:	|  /-- bge.s 1610c <atan2f+0x14e>
   1609c:	|  |   clr.l -(sp)
   1609e:	|  |   move.l 36(sp),-(sp)
   160a2:	|  |   jsr 15e5c <__ltsf2>
   160a8:	|  |   addq.l #8,sp
   160aa:	|  |   tst.l d0
   160ac:	|  +-- bge.s 1610c <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   160ae:	|  |   move.l 36(sp),-(sp)
   160b2:	|  |   move.l 36(sp),-(sp)
   160b6:	|  |   jsr 15ae2 <__divsf3>
   160bc:	|  |   addq.l #8,sp
   160be:	|  |   move.l d0,16(sp)
   160c2:	|  |   move.l 1af16 <MathIeeeSingTransBase>,d0
   160c8:	|  |   movea.l d0,a6
   160ca:	|  |   move.l 16(sp),d0
   160ce:	|  |   jsr -30(a6)
   160d2:	|  |   move.l d0,12(sp)
   160d6:	|  |   move.l 12(sp),d0
   160da:	|  |   move.l d0,-(sp)
   160dc:	|  |   jsr 15b4e <__extendsfdf2>
   160e2:	|  |   addq.l #4,sp
   160e4:	|  |   move.l #1413754136,-(sp)
   160ea:	|  |   move.l #1074340347,-(sp)
   160f0:	|  |   move.l d1,-(sp)
   160f2:	|  |   move.l d0,-(sp)
   160f4:	|  |   jsr 15ec8 <__subdf3>
   160fa:	|  |   lea 16(sp),sp
   160fe:	|  |   move.l d1,-(sp)
   16100:	|  |   move.l d0,-(sp)
   16102:	|  |   jsr 15f60 <__truncdfsf2>
   16108:	|  |   addq.l #8,sp
   1610a:	+--|-- bra.s 16166 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1610c:	|  \-> clr.l -(sp)
   1610e:	|      move.l 40(sp),-(sp)
   16112:	|      jsr 15b18 <__eqsf2>
   16118:	|      addq.l #8,sp
   1611a:	|      tst.l d0
   1611c:	|  /-- bne.s 16138 <atan2f+0x17a>
   1611e:	|  |   clr.l -(sp)
   16120:	|  |   move.l 36(sp),-(sp)
   16124:	|  |   jsr 15da2 <__gtsf2>
   1612a:	|  |   addq.l #8,sp
   1612c:	|  |   tst.l d0
   1612e:	|  +-- ble.s 16138 <atan2f+0x17a>
        return PI / 2;
   16130:	|  |   move.l #1070141403,d0
   16136:	+--|-- bra.s 16166 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   16138:	|  \-> clr.l -(sp)
   1613a:	|      move.l 40(sp),-(sp)
   1613e:	|      jsr 15b18 <__eqsf2>
   16144:	|      addq.l #8,sp
   16146:	|      tst.l d0
   16148:	|  /-- bne.s 16164 <atan2f+0x1a6>
   1614a:	|  |   clr.l -(sp)
   1614c:	|  |   move.l 36(sp),-(sp)
   16150:	|  |   jsr 15e5c <__ltsf2>
   16156:	|  |   addq.l #8,sp
   16158:	|  |   tst.l d0
   1615a:	|  +-- bge.s 16164 <atan2f+0x1a6>
        return -PI / 2;
   1615c:	|  |   move.l #-1077342245,d0
   16162:	+--|-- bra.s 16166 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   16164:	|  \-> moveq #0,d0
    }
}
   16166:	\----> movea.l (sp)+,a6
   16168:	       lea 24(sp),sp
   1616c:	       rts

0001616e <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1616e:	lea -24(sp),sp
   16172:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   16174:	move.l 32(sp),20(sp)
   1617a:	move.l 36(sp),24(sp)
   16180:	move.l 1af1e <MathIeeeDoubTransBase>,d0
   16186:	movea.l d0,a6
   16188:	move.l 20(sp),d0
   1618c:	move.l 24(sp),d1
   16190:	jsr -96(a6)
   16194:	move.l d0,4(sp)
   16198:	move.l d1,8(sp)
   1619c:	move.l 4(sp),12(sp)
   161a2:	move.l 8(sp),16(sp)
   161a8:	move.l 12(sp),d0
   161ac:	move.l 16(sp),d1
}
   161b0:	movea.l (sp)+,a6
   161b2:	lea 24(sp),sp
   161b6:	rts

000161b8 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   161b8:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   161bc:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   161c0:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   161c4:	mulu.w 8(sp),d1
	addw	d1, d0
   161c8:	add.w d1,d0
	swap	d0
   161ca:	swap d0
	clrw	d0
   161cc:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   161ce:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   161d2:	mulu.w 10(sp),d1
	addl	d1, d0
   161d6:	add.l d1,d0
	rts
   161d8:	rts

000161da <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   161da:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   161dc:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   161e0:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   161e4:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   161ea:	   /-- bcc.s 16202 <__udivsi3+0x28>
	movel	d0, d2
   161ec:	   |   move.l d0,d2
	clrw	d2
   161ee:	   |   clr.w d2
	swap	d2
   161f0:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   161f2:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   161f4:	   |   move.w d2,d0
	swap	d0
   161f6:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   161f8:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   161fc:	   |   divu.w d1,d2
	movew	d2, d0
   161fe:	   |   move.w d2,d0
	jra	6f
   16200:	/--|-- bra.s 16232 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   16202:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   16204:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   16206:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   16208:	|  |   cmpi.l #65536,d1
	jcc	4b
   1620e:	|  \-- bcc.s 16204 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   16210:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   16212:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   16218:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   1621a:	|      mulu.w d0,d1
	swap	d2
   1621c:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   1621e:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   16220:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   16222:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   16224:	|  /-- bne.s 16230 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   16226:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   16228:	|  +-- bcs.s 16230 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   1622a:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   1622e:	+--|-- bls.s 16232 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   16230:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   16232:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   16234:	       rts

00016236 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   16236:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   16238:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   1623a:	    move.l 12(sp),d1
	jpl	1f
   1623e:	/-- bpl.s 16244 <__divsi3+0xe>
	negl	d1
   16240:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   16242:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   16244:	\-> move.l 8(sp),d0
	jpl	2f
   16248:	/-- bpl.s 1624e <__divsi3+0x18>
	negl	d0
   1624a:	|   neg.l d0
	negb	d2
   1624c:	|   neg.b d2

2:	movel	d1, sp@-
   1624e:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16250:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   16252:	    jsr 161da <__udivsi3>
	addql	#8, sp
   16258:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   1625a:	    tst.b d2
	jpl	3f
   1625c:	/-- bpl.s 16260 <__divsi3+0x2a>
	negl	d0
   1625e:	|   neg.l d0

3:	movel	sp@+, d2
   16260:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   16262:	    rts

00016264 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   16264:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   16268:	move.l 4(sp),d0
	movel	d1, sp@-
   1626c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1626e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   16270:	jsr 16236 <__divsi3>
	addql	#8, sp
   16276:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   16278:	move.l 8(sp),d1
	movel	d1, sp@-
   1627c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1627e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   16280:	jsr 161b8 <__mulsi3>
	addql	#8, sp
   16286:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   16288:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1628c:	sub.l d0,d1
	movel	d1, d0
   1628e:	move.l d1,d0
	rts
   16290:	rts

00016292 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   16292:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   16296:	move.l 4(sp),d0
	movel	d1, sp@-
   1629a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1629c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   1629e:	jsr 161da <__udivsi3>
	addql	#8, sp
   162a4:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   162a6:	move.l 8(sp),d1
	movel	d1, sp@-
   162aa:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   162ac:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   162ae:	jsr 161b8 <__mulsi3>
	addql	#8, sp
   162b4:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   162b6:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   162ba:	sub.l d0,d1
	movel	d1, d0
   162bc:	move.l d1,d0
	rts
   162be:	rts

000162c0 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   162c0:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   162c2:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   162c6:	jsr -516(a6)
    move.l (sp)+, a6
   162ca:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   162cc:	rts

000162ce <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   162ce:	move.b d0,(a3)+
	rts
   162d0:	rts
