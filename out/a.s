
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #98304,d0
       8:	       subi.l #98304,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 18000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #98304,d0
      40:	       subi.l #98304,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 18000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 4c6a <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #98304,d0
      7e:	       subi.l #98304,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 18000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr fe9c <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 19c4c <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr feb4 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 18000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr fe9c <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 19c4c <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 18000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr fe9c <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 19c4c <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 134d0 <PutChar+0x4>
     35c:	|  |              |   jsr 12a04 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 19c54 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 19c54 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 19c54 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 19c54 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 19c54 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 19c54 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 19c54 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 134fa <cursors.c.412ac4f3+0x1d>
     834:	|   jsr 12a04 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 19c54 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 13516 <cursors.c.412ac4f3+0x39>
     8a6:	|   jsr 12a04 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 19c54 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 19c54 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 19c54 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 19c54 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 19c54 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 19c54 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 19c54 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 19c54 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 19c4c <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 19c54 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr fe9c <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 19c54 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 19c4c <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 19c4c <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #79166,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 19c4c <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 1354b <cursors.c.412ac4f3+0x6e>
     cea:	   |   jsr 12a04 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 133b6 <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 13490 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 13568 <cursors.c.412ac4f3+0x8b>
     d66:	|      jsr 12a04 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 19c4c <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 19c4c <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 19c4c <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 19b2c <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 64da <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),19b2c <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 19b30 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 19b34 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 1357b <cursors.c.412ac4f3+0x9e>
     de8:	jsr 12a04 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     df4:	             lea -20(sp),sp
     df8:	             move.l a6,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
     dfa:	             move.l #14675968,8(sp)

  width /= 16;
     e02:	             move.l 28(sp),d0
     e06:	             movea.l d0,a0
     e08:	             cmpa.w #0,a0
     e0c:	         /-- bge.s e12 <CstBlankScreen+0x1e>
     e0e:	         |   lea 15(a0),a0
     e12:	         \-> move.l a0,d0
     e14:	             asr.l #4,d0
     e16:	             move.l d0,28(sp)

  WaitBlit();
     e1a:	             move.l 19c58 <GfxBase>,d0
     e20:	             movea.l d0,a6
     e22:	             jsr -228(a6)

  //Both Buffers need to be done
  for(int i=0;i<2;i++) {
     e26:	             clr.l 20(sp)
     e2a:	   /-------- bra.w f04 <CstBlankScreen+0x110>
    custom->bltafwm = 0xffff;
     e2e:	/--|-------> movea.l 8(sp),a0
     e32:	|  |         move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
     e38:	|  |         movea.l 8(sp),a0
     e3c:	|  |         move.w #-1,70(a0)
    custom->bltamod = 0;
     e42:	|  |         movea.l 8(sp),a0
     e46:	|  |         move.w #0,100(a0)
    custom->bltbmod = 0;
     e4c:	|  |         movea.l 8(sp),a0
     e50:	|  |         move.w #0,98(a0)
    custom->bltcmod = 0;
     e56:	|  |         movea.l 8(sp),a0
     e5a:	|  |         move.w #0,96(a0)
    custom->bltdmod = 0;
     e60:	|  |         movea.l 8(sp),a0
     e64:	|  |         move.w #0,102(a0)
    custom->bltcon1 = 0;
     e6a:	|  |         movea.l 8(sp),a0
     e6e:	|  |         move.w #0,66(a0)
    custom->bltcon0 = 0x0100;
     e74:	|  |         movea.l 8(sp),a0
     e78:	|  |         move.w #256,64(a0)
    ULONG bltdpt = CstDrawBuffer;
     e7e:	|  |         move.l 19b48 <CstDrawBuffer>,d0
     e84:	|  |         move.l d0,16(sp)
    UWORD bltsize = height*64+width;    
     e88:	|  |         move.l 32(sp),d0
     e8c:	|  |         lsl.w #6,d0
     e8e:	|  |         move.l 28(sp),d1
     e92:	|  |         movea.w d0,a0
     e94:	|  |         adda.w d1,a0
     e96:	|  |         move.w a0,6(sp)
    UWORD blitsize = width*height*2;
     e9a:	|  |         move.l 28(sp),d1
     e9e:	|  |         move.l 32(sp),d0
     ea2:	|  |         muls.w d1,d0
     ea4:	|  |         add.w d0,d0
     ea6:	|  |         move.w d0,4(sp)
    for(int i2=0;i2<5;i2++)
     eaa:	|  |         clr.l 12(sp)
     eae:	|  |     /-- bra.s ee0 <CstBlankScreen+0xec>
    {            
      custom->bltdpt = bltdpt;
     eb0:	|  |  /--|-> move.l 16(sp),d0
     eb4:	|  |  |  |   movea.l 8(sp),a0
     eb8:	|  |  |  |   move.l d0,84(a0)
      custom->bltsize = bltsize;            
     ebc:	|  |  |  |   movea.l 8(sp),a0
     ec0:	|  |  |  |   move.w 6(sp),88(a0)
      WaitBlit();
     ec6:	|  |  |  |   move.l 19c58 <GfxBase>,d0
     ecc:	|  |  |  |   movea.l d0,a6
     ece:	|  |  |  |   jsr -228(a6)
      bltdpt += blitsize;
     ed2:	|  |  |  |   moveq #0,d0
     ed4:	|  |  |  |   move.w 4(sp),d0
     ed8:	|  |  |  |   add.l d0,16(sp)
    for(int i2=0;i2<5;i2++)
     edc:	|  |  |  |   addq.l #1,12(sp)
     ee0:	|  |  |  \-> moveq #4,d0
     ee2:	|  |  |      cmp.l 12(sp),d0
     ee6:	|  |  \----- bge.s eb0 <CstBlankScreen+0xbc>
    }

    WaitBlit();
     ee8:	|  |         move.l 19c58 <GfxBase>,d0
     eee:	|  |         movea.l d0,a6
     ef0:	|  |         jsr -228(a6)
    WaitVbl();
     ef4:	|  |         jsr 1292c <WaitVbl>
    CstSwapGraphics();
     efa:	|  |         jsr 1108 <CstSwapGraphics>
  for(int i=0;i<2;i++) {
     f00:	|  |         addq.l #1,20(sp)
     f04:	|  \-------> moveq #1,d0
     f06:	|            cmp.l 20(sp),d0
     f0a:	\----------- bge.w e2e <CstBlankScreen+0x3a>
  }

}
     f0e:	             nop
     f10:	             nop
     f12:	             movea.l (sp)+,a6
     f14:	             lea 20(sp),sp
     f18:	             rts

00000f1a <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     f1a:	       lea -52(sp),sp
     f1e:	       move.l a6,-(sp)
     f20:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     f22:	       move.l #400,32(sp)
     f2a:	       moveq #2,d0
     f2c:	       move.l d0,28(sp)
     f30:	       move.l 19c4c <SysBase>,d0
     f36:	       movea.l d0,a6
     f38:	       move.l 32(sp),d0
     f3c:	       move.l 28(sp),d1
     f40:	       jsr -198(a6)
     f44:	       move.l d0,24(sp)
     f48:	       move.l 24(sp),d0
     f4c:	       move.l d0,20(sp)
  
  if( retval == 0) {
     f50:	   /-- bne.s f7a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     f52:	   |   pea 28 <_start+0x28>
     f56:	   |   pea 135b4 <cursors.c.412ac4f3+0xd7>
     f5c:	   |   jsr 12a04 <KPrintF>
     f62:	   |   addq.l #8,sp
    Exit(1);
     f64:	   |   moveq #1,d1
     f66:	   |   move.l d1,16(sp)
     f6a:	   |   move.l 19c54 <DOSBase>,d0
     f70:	   |   movea.l d0,a6
     f72:	   |   move.l 16(sp),d1
     f76:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     f7a:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     f80:	       move.l #98306,52(sp)
  for(int i=0; i<16;i++)
     f88:	       clr.l 48(sp)
     f8c:	   /-- bra.s fb2 <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
     f8e:	/--|-> move.l 52(sp),d1
     f92:	|  |   move.l d1,d2
     f94:	|  |   addq.l #4,d2
     f96:	|  |   move.l d2,52(sp)
     f9a:	|  |   move.l 56(sp),d0
     f9e:	|  |   move.l d0,d2
     fa0:	|  |   addq.l #4,d2
     fa2:	|  |   move.l d2,56(sp)
     fa6:	|  |   movea.l d1,a0
     fa8:	|  |   move.l (a0),d1
     faa:	|  |   movea.l d0,a0
     fac:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
     fae:	|  |   addq.l #1,48(sp)
     fb2:	|  \-> moveq #15,d0
     fb4:	|      cmp.l 48(sp),d0
     fb8:	\----- bge.s f8e <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
     fba:	       move.l #98370,52(sp)

  for(int i=0; i<12;i++)
     fc2:	       clr.l 44(sp)
     fc6:	   /-- bra.s fec <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
     fc8:	/--|-> move.l 52(sp),d1
     fcc:	|  |   move.l d1,d2
     fce:	|  |   addq.l #4,d2
     fd0:	|  |   move.l d2,52(sp)
     fd4:	|  |   move.l 56(sp),d0
     fd8:	|  |   move.l d0,d2
     fda:	|  |   addq.l #4,d2
     fdc:	|  |   move.l d2,56(sp)
     fe0:	|  |   movea.l d1,a0
     fe2:	|  |   move.l (a0),d1
     fe4:	|  |   movea.l d0,a0
     fe6:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
     fe8:	|  |   addq.l #1,44(sp)
     fec:	|  \-> moveq #11,d0
     fee:	|      cmp.l 44(sp),d0
     ff2:	\----- bge.s fc8 <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
     ff4:	       move.l #98418,52(sp)
  for(int i=0; i<10;i++)
     ffc:	       clr.l 40(sp)
    1000:	   /-- bra.s 1026 <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
    1002:	/--|-> move.l 52(sp),d1
    1006:	|  |   move.l d1,d2
    1008:	|  |   addq.l #4,d2
    100a:	|  |   move.l d2,52(sp)
    100e:	|  |   move.l 56(sp),d0
    1012:	|  |   move.l d0,d2
    1014:	|  |   addq.l #4,d2
    1016:	|  |   move.l d2,56(sp)
    101a:	|  |   movea.l d1,a0
    101c:	|  |   move.l (a0),d1
    101e:	|  |   movea.l d0,a0
    1020:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    1022:	|  |   addq.l #1,40(sp)
    1026:	|  \-> moveq #9,d0
    1028:	|      cmp.l 40(sp),d0
    102c:	\----- bge.s 1002 <CstCreateCopperlist+0xe8>

  clpartinstruction = CstClColor;
    102e:	       move.l #98458,52(sp)
  for(int i=0; i<32;i++)
    1036:	       clr.l 36(sp)
    103a:	   /-- bra.s 1060 <CstCreateCopperlist+0x146>
    *cl++ = *clpartinstruction++;        
    103c:	/--|-> move.l 52(sp),d1
    1040:	|  |   move.l d1,d2
    1042:	|  |   addq.l #4,d2
    1044:	|  |   move.l d2,52(sp)
    1048:	|  |   move.l 56(sp),d0
    104c:	|  |   move.l d0,d2
    104e:	|  |   addq.l #4,d2
    1050:	|  |   move.l d2,56(sp)
    1054:	|  |   movea.l d1,a0
    1056:	|  |   move.l (a0),d1
    1058:	|  |   movea.l d0,a0
    105a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    105c:	|  |   addq.l #1,36(sp)
    1060:	|  \-> moveq #31,d0
    1062:	|      cmp.l 36(sp),d0
    1066:	\----- bge.s 103c <CstCreateCopperlist+0x122>

  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1068:	       moveq #40,d1
    106a:	       cmp.l 64(sp),d1
    106e:	   /-- bge.s 10cc <CstCreateCopperlist+0x1b2>
    int tmp = width - 40;
    1070:	   |   moveq #-40,d2
    1072:	   |   add.l 64(sp),d2
    1076:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    107a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1080:	   |   move.l 8(sp),d0
    1084:	   |   move.l d0,d1
    1086:	   |   addq.l #2,d1
    1088:	   |   move.l d1,8(sp)
    108c:	   |   movea.l d0,a0
    108e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1092:	   |   move.l 8(sp),d0
    1096:	   |   move.l d0,d1
    1098:	   |   addq.l #2,d1
    109a:	   |   move.l d1,8(sp)
    109e:	   |   move.l 12(sp),d1
    10a2:	   |   movea.l d0,a0
    10a4:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    10a6:	   |   move.l 8(sp),d0
    10aa:	   |   move.l d0,d1
    10ac:	   |   addq.l #2,d1
    10ae:	   |   move.l d1,8(sp)
    10b2:	   |   movea.l d0,a0
    10b4:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    10b8:	   |   move.l 8(sp),d0
    10bc:	   |   move.l d0,d1
    10be:	   |   addq.l #2,d1
    10c0:	   |   move.l d1,8(sp)
    10c4:	   |   move.l 12(sp),d1
    10c8:	   |   movea.l d0,a0
    10ca:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    10cc:	   \-> move.l 56(sp),d0
    10d0:	       move.l d0,d1
    10d2:	       addq.l #4,d1
    10d4:	       move.l d1,56(sp)
    10d8:	       moveq #-2,d2
    10da:	       movea.l d0,a0
    10dc:	       move.l d2,(a0)
  return (UWORD *) retval;  
    10de:	       move.l 20(sp),d0
}
    10e2:	       move.l (sp)+,d2
    10e4:	       movea.l (sp)+,a6
    10e6:	       lea 52(sp),sp
    10ea:	       rts

000010ec <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    10ec:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    10ee:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    10f4:	move.l 8(sp),d0
    10f8:	movea.l (sp),a0
    10fa:	move.l d0,128(a0)
}
    10fe:	nop
    1100:	addq.l #4,sp
    1102:	rts

00001104 <CstSludgeDisplay>:

void CstSludgeDisplay() {  
}
    1104:	nop
    1106:	rts

00001108 <CstSwapGraphics>:

void CstSwapGraphics( ) {
    1108:	lea -16(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    110c:	move.l 19b44 <CstViewBuffer>,12(sp)
  CstViewBuffer = CstDrawBuffer;
    1114:	move.l 19b48 <CstDrawBuffer>,d0
    111a:	move.l d0,19b44 <CstViewBuffer>
  CstDrawBuffer = tmp;
    1120:	move.l 12(sp),19b48 <CstDrawBuffer>

  UWORD *copword = CstCopperList;
    1128:	move.l 19b40 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    1130:	move.l 19b44 <CstViewBuffer>,d0
    1136:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    113a:	move.l 4(sp),d0
    113e:	clr.w d0
    1140:	swap d0
    1142:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    1146:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    114a:	movea.w #114,a0
    114e:	adda.l 8(sp),a0
    1152:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    1154:	movea.w #118,a0
    1158:	adda.l 8(sp),a0
    115c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    1160:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1168:	move.l 4(sp),d0
    116c:	clr.w d0
    116e:	swap d0
    1170:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    1174:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    1178:	movea.w #122,a0
    117c:	adda.l 8(sp),a0
    1180:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    1182:	movea.w #126,a0
    1186:	adda.l 8(sp),a0
    118a:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    118e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    1196:	move.l 4(sp),d0
    119a:	clr.w d0
    119c:	swap d0
    119e:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    11a2:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    11a6:	movea.l 8(sp),a0
    11aa:	lea 130(a0),a0
    11ae:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    11b0:	movea.l 8(sp),a0
    11b4:	lea 134(a0),a0
    11b8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    11bc:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    11c4:	move.l 4(sp),d0
    11c8:	clr.w d0
    11ca:	swap d0
    11cc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    11d0:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    11d4:	movea.l 8(sp),a0
    11d8:	lea 138(a0),a0
    11dc:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    11de:	movea.l 8(sp),a0
    11e2:	lea 142(a0),a0
    11e6:	move.w 2(sp),(a0)

  ptr +=  40*256;
    11ea:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    11f2:	move.l 4(sp),d0
    11f6:	clr.w d0
    11f8:	swap d0
    11fa:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    11fe:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    1202:	movea.l 8(sp),a0
    1206:	lea 146(a0),a0
    120a:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    120c:	movea.l 8(sp),a0
    1210:	lea 150(a0),a0
    1214:	move.w 2(sp),(a0)

}
    1218:	nop
    121a:	lea 16(sp),sp
    121e:	rts

00001220 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    1220:	          lea -28(sp),sp
    1224:	          move.l a6,-(sp)
    1226:	          move.l d2,-(sp)

  width = width / 8;
    1228:	          move.l 40(sp),d0
    122c:	      /-- bpl.s 1230 <CstReserveBackdrop+0x10>
    122e:	      |   addq.l #7,d0
    1230:	      \-> asr.l #3,d0
    1232:	          move.l d0,40(sp)

  if( width < 40) 
    1236:	          moveq #39,d0
    1238:	          cmp.l 40(sp),d0
    123c:	      /-- blt.s 1252 <CstReserveBackdrop+0x32>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    123e:	      |   pea 135ef <cursors.c.412ac4f3+0x112>
    1244:	      |   jsr 12a04 <KPrintF>
    124a:	      |   addq.l #4,sp
    return FALSE;
    124c:	      |   clr.w d0
    124e:	/-----|-- bra.w 131c <CstReserveBackdrop+0xfc>
  }  

  CstCopperList = CstCreateCopperlist( width);
    1252:	|     \-> move.l 40(sp),-(sp)
    1256:	|         jsr f1a <CstCreateCopperlist>
    125c:	|         addq.l #4,sp
    125e:	|         move.l d0,19b40 <CstCopperList>
  int size = width*height*5;
    1264:	|         move.l 44(sp),-(sp)
    1268:	|         move.l 44(sp),-(sp)
    126c:	|         jsr 133b6 <__mulsi3>
    1272:	|         addq.l #8,sp
    1274:	|         move.l d0,d1
    1276:	|         move.l d1,d0
    1278:	|         add.l d0,d0
    127a:	|         add.l d0,d0
    127c:	|         move.l d0,d2
    127e:	|         add.l d1,d2
    1280:	|         move.l d2,32(sp)
  CstDrawBuffer = AllocVec(size,MEMF_CHIP);
    1284:	|         move.l 32(sp),28(sp)
    128a:	|         moveq #2,d0
    128c:	|         move.l d0,24(sp)
    1290:	|         move.l 19c4c <SysBase>,d0
    1296:	|         movea.l d0,a6
    1298:	|         move.l 28(sp),d0
    129c:	|         move.l 24(sp),d1
    12a0:	|         jsr -684(a6)
    12a4:	|         move.l d0,20(sp)
    12a8:	|         move.l 20(sp),d0
    12ac:	|         move.l d0,19b48 <CstDrawBuffer>
  CstViewBuffer = AllocVec(size,MEMF_CHIP);
    12b2:	|         move.l 32(sp),16(sp)
    12b8:	|         moveq #2,d2
    12ba:	|         move.l d2,12(sp)
    12be:	|         move.l 19c4c <SysBase>,d0
    12c4:	|         movea.l d0,a6
    12c6:	|         move.l 16(sp),d0
    12ca:	|         move.l 12(sp),d1
    12ce:	|         jsr -684(a6)
    12d2:	|         move.l d0,8(sp)
    12d6:	|         move.l 8(sp),d0
    12da:	|         move.l d0,19b44 <CstViewBuffer>
  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    12e0:	|         move.l 19b40 <CstCopperList>,d0
    12e6:	|     /-- beq.s 12f8 <CstReserveBackdrop+0xd8>
    12e8:	|     |   move.l 19b48 <CstDrawBuffer>,d0
    12ee:	|     +-- beq.s 12f8 <CstReserveBackdrop+0xd8>
    12f0:	|     |   move.l 19b44 <CstViewBuffer>,d0
    12f6:	|  /--|-- bne.s 130a <CstReserveBackdrop+0xea>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    12f8:	|  |  \-> pea 1362d <cursors.c.412ac4f3+0x150>
    12fe:	|  |      jsr 12a04 <KPrintF>
    1304:	|  |      addq.l #4,sp
    return FALSE;
    1306:	|  |      clr.w d0
    1308:	+--|----- bra.s 131c <CstReserveBackdrop+0xfc>
  }

  CstSetCl( CstCopperList);
    130a:	|  \----> move.l 19b40 <CstCopperList>,d0
    1310:	|         move.l d0,-(sp)
    1312:	|         jsr 10ec <CstSetCl>
    1318:	|         addq.l #4,sp
  return TRUE;
    131a:	|         moveq #1,d0

}
    131c:	\-------> move.l (sp)+,d2
    131e:	          movea.l (sp)+,a6
    1320:	          lea 28(sp),sp
    1324:	          rts

00001326 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1326:	    lea -12(sp),sp
    132a:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    132c:	    move.l 19b48 <CstDrawBuffer>,d0
    1332:	/-- beq.s 134c <CstFreeBuffer+0x26>
    1334:	|   move.l 19b48 <CstDrawBuffer>,12(sp)
    133c:	|   move.l 19c4c <SysBase>,d0
    1342:	|   movea.l d0,a6
    1344:	|   movea.l 12(sp),a1
    1348:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    134c:	\-> move.l 19b44 <CstViewBuffer>,d0
    1352:	/-- beq.s 136c <CstFreeBuffer+0x46>
    1354:	|   move.l 19b44 <CstViewBuffer>,8(sp)
    135c:	|   move.l 19c4c <SysBase>,d0
    1362:	|   movea.l d0,a6
    1364:	|   movea.l 8(sp),a1
    1368:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    136c:	\-> move.l 19b40 <CstCopperList>,d0
    1372:	/-- beq.s 138c <CstFreeBuffer+0x66>
    1374:	|   move.l 19b40 <CstCopperList>,4(sp)
    137c:	|   move.l 19c4c <SysBase>,d0
    1382:	|   movea.l d0,a6
    1384:	|   movea.l 4(sp),a1
    1388:	|   jsr -690(a6)
}
    138c:	\-> nop
    138e:	    movea.l (sp)+,a6
    1390:	    lea 12(sp),sp
    1394:	    rts

00001396 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    1396:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    139a:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    139e:	       tst.l 24(sp)
    13a2:	   /-- bge.s 13a8 <drawLine+0x12>
    13a4:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    13a8:	   \-> tst.l 28(sp)
    13ac:	   /-- bge.s 13b2 <drawLine+0x1c>
    13ae:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    13b2:	   \-> tst.l 32(sp)
    13b6:	   /-- bge.s 13bc <drawLine+0x26>
    13b8:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    13bc:	   \-> tst.l 36(sp)
    13c0:	   /-- bge.s 13c6 <drawLine+0x30>
    13c2:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    13c6:	   \-> move.l 19ce4 <sceneWidth>,d0
    13cc:	       cmp.l 24(sp),d0
    13d0:	   /-- bge.s 13e0 <drawLine+0x4a>
    13d2:	   |   move.l 19ce4 <sceneWidth>,d0
    13d8:	   |   move.l d0,d1
    13da:	   |   subq.l #1,d1
    13dc:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    13e0:	   \-> move.l 19ce4 <sceneWidth>,d0
    13e6:	       cmp.l 32(sp),d0
    13ea:	   /-- bge.s 13fa <drawLine+0x64>
    13ec:	   |   move.l 19ce4 <sceneWidth>,d0
    13f2:	   |   move.l d0,d1
    13f4:	   |   subq.l #1,d1
    13f6:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    13fa:	   \-> move.l 19ce8 <sceneHeight>,d0
    1400:	       cmp.l 28(sp),d0
    1404:	   /-- bge.s 1414 <drawLine+0x7e>
    1406:	   |   move.l 19ce8 <sceneHeight>,d0
    140c:	   |   move.l d0,d1
    140e:	   |   subq.l #1,d1
    1410:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    1414:	   \-> move.l 19ce8 <sceneHeight>,d0
    141a:	       cmp.l 36(sp),d0
    141e:	   /-- bge.s 142e <drawLine+0x98>
    1420:	   |   move.l 19ce8 <sceneHeight>,d0
    1426:	   |   move.l d0,d1
    1428:	   |   subq.l #1,d1
    142a:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    142e:	   \-> move.l 24(sp),d0
    1432:	       cmp.l 32(sp),d0
    1436:	/----- ble.s 1452 <drawLine+0xbc>
		x = x2; 
    1438:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    143e:	|      tst.w 10(sp)
    1442:	|      seq d0
    1444:	|      neg.b d0
    1446:	|      move.b d0,d0
    1448:	|      andi.w #255,d0
    144c:	|      move.w d0,10(sp)
    1450:	|  /-- bra.s 1458 <drawLine+0xc2>
	} else x = x1;
    1452:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    1458:	   \-> move.l 28(sp),d1
    145c:	       cmp.l 36(sp),d1
    1460:	/----- ble.s 147c <drawLine+0xe6>
		y = y2; 
    1462:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    1468:	|      tst.w 10(sp)
    146c:	|      seq d0
    146e:	|      neg.b d0
    1470:	|      move.b d0,d0
    1472:	|      andi.w #255,d0
    1476:	|      move.w d0,10(sp)
    147a:	|  /-- bra.s 1482 <drawLine+0xec>
	} else y = y1;	
    147c:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    1482:	   \-> move.l 32(sp),d0
    1486:	       sub.l 24(sp),d0
    148a:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    148e:	       move.l 6(sp),d0
    1492:	   /-- bpl.s 1496 <drawLine+0x100>
    1494:	   |   neg.l d0
    1496:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    149a:	       move.l 36(sp),d1
    149e:	       sub.l 28(sp),d1
    14a2:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    14a6:	       move.l 2(sp),d0
    14aa:	   /-- bpl.s 14ae <drawLine+0x118>
    14ac:	   |   neg.l d0
    14ae:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    14b2:	       tst.l 6(sp)
    14b6:	   /-- bne.s 14da <drawLine+0x144>
		diffX = 1;
    14b8:	   |   moveq #1,d0
    14ba:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    14be:	   |   move.l 19ce4 <sceneWidth>,d0
    14c4:	   |   subq.l #1,d0
    14c6:	   |   cmp.l 16(sp),d0
    14ca:	   +-- bne.s 14da <drawLine+0x144>
    14cc:	   |   move.l 19ce4 <sceneWidth>,d0
    14d2:	   |   move.l d0,d1
    14d4:	   |   subq.l #2,d1
    14d6:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    14da:	   \-> tst.l 2(sp)
    14de:	   /-- bne.s 1502 <drawLine+0x16c>
		diffY = 1;
    14e0:	   |   moveq #1,d0
    14e2:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    14e6:	   |   move.l 19ce8 <sceneHeight>,d0
    14ec:	   |   subq.l #1,d0
    14ee:	   |   cmp.l 12(sp),d0
    14f2:	   +-- bne.s 1502 <drawLine+0x16c>
    14f4:	   |   move.l 19ce8 <sceneHeight>,d0
    14fa:	   |   move.l d0,d1
    14fc:	   |   subq.l #2,d1
    14fe:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    1502:	   \-> pea 1365a <cursors.c.412ac4f3+0x17d>
    1508:	       jsr 12a04 <KPrintF>
    150e:	       addq.l #4,sp
	
}
    1510:	       nop
    1512:	       lea 20(sp),sp
    1516:	       rts

00001518 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    1518:	                      lea -24(sp),sp
    151c:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    151e:	                      move.l 19b54 <firstTexture>,d0
    1524:	/-------------------- beq.w 1602 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    1528:	|                     clr.l 24(sp)
    152c:	|     /-------------- bra.w 15f6 <deleteTextures+0xde>
			BOOL found = FALSE;
    1530:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    1534:	|  |  |               move.l 19b54 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    153c:	|  |  |               movea.l 20(sp),a0
    1540:	|  |  |               move.l (a0),d1
    1542:	|  |  |               move.l 24(sp),d0
    1546:	|  |  |               add.l d0,d0
    1548:	|  |  |               add.l d0,d0
    154a:	|  |  |               movea.l 36(sp),a0
    154e:	|  |  |               adda.l d0,a0
    1550:	|  |  |               move.l (a0),d0
    1552:	|  |  |               cmp.l d1,d0
    1554:	|  |  |  /----------- bne.w 15e8 <deleteTextures+0xd0>
				found = TRUE;
    1558:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    155e:	|  |  |  |            movea.l 20(sp),a0
    1562:	|  |  |  |            move.l 12(a0),d0
    1566:	|  |  |  |            move.l d0,19b54 <firstTexture>
				FreeVec(list);
    156c:	|  |  |  |            move.l 20(sp),6(sp)
    1572:	|  |  |  |            move.l 19c4c <SysBase>,d0
    1578:	|  |  |  |            movea.l d0,a6
    157a:	|  |  |  |            movea.l 6(sp),a1
    157e:	|  |  |  |            jsr -690(a6)
				continue;
    1582:	|  |  |  |  /-------- bra.s 15f2 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    1584:	|  |  |  |  |  /----> movea.l 20(sp),a0
    1588:	|  |  |  |  |  |      movea.l 12(a0),a0
    158c:	|  |  |  |  |  |      move.l (a0),d1
    158e:	|  |  |  |  |  |      move.l 24(sp),d0
    1592:	|  |  |  |  |  |      add.l d0,d0
    1594:	|  |  |  |  |  |      add.l d0,d0
    1596:	|  |  |  |  |  |      movea.l 36(sp),a0
    159a:	|  |  |  |  |  |      adda.l d0,a0
    159c:	|  |  |  |  |  |      move.l (a0),d0
    159e:	|  |  |  |  |  |      cmp.l d1,d0
    15a0:	|  |  |  |  |  |  /-- bne.s 15de <deleteTextures+0xc6>
					found = TRUE;
    15a2:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    15a8:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    15ac:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    15b2:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    15b6:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    15ba:	|  |  |  |  |  |  |   move.l 12(a0),d0
    15be:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    15c2:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    15c6:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    15cc:	|  |  |  |  |  |  |   move.l 19c4c <SysBase>,d0
    15d2:	|  |  |  |  |  |  |   movea.l d0,a6
    15d4:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    15d8:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    15dc:	|  |  |  |  +--|--|-- bra.s 15f2 <deleteTextures+0xda>
				}
				list = list->next;
    15de:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    15e2:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    15e8:	|  |  |  \--|--|----> movea.l 20(sp),a0
    15ec:	|  |  |     |  |      move.l 12(a0),d0
    15f0:	|  |  |     |  \----- bne.s 1584 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    15f2:	|  |  |     \-------> addq.l #1,24(sp)
    15f6:	|  |  \-------------> move.l 24(sp),d0
    15fa:	|  |                  cmp.l 32(sp),d0
    15fe:	|  \----------------- bcs.w 1530 <deleteTextures+0x18>
			}
		}
	}
}
    1602:	\-------------------> nop
    1604:	                      movea.l (sp)+,a6
    1606:	                      lea 24(sp),sp
    160a:	                      rts

0000160c <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    160c:	subq.l #4,sp
    160e:	move.l 8(sp),d0
    1612:	move.w d0,d0
    1614:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1618:	pea 1367d <cursors.c.412ac4f3+0x1a0>
    161e:	jsr 12a04 <KPrintF>
    1624:	addq.l #4,sp
}
    1626:	nop
    1628:	addq.l #4,sp
    162a:	rts

0000162c <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    162c:	       moveq #-1,d0
    162e:	       cmp.l 4(sp),d0
    1632:	   /-- bne.s 1638 <resourceNameFromNum+0xc>
    1634:	   |   moveq #0,d0
    1636:	/--|-- bra.s 1670 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1638:	|  \-> move.l 19c28 <numResourceNames>,d0
    163e:	|  /-- bne.s 1648 <resourceNameFromNum+0x1c>
    1640:	|  |   move.l #79533,d0
    1646:	+--|-- bra.s 1670 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    1648:	|  \-> move.l 19c28 <numResourceNames>,d0
    164e:	|      cmp.l 4(sp),d0
    1652:	|  /-- ble.s 166a <resourceNameFromNum+0x3e>
    1654:	|  |   move.l 19be4 <allResourceNames>,d1
    165a:	|  |   move.l 4(sp),d0
    165e:	|  |   add.l d0,d0
    1660:	|  |   add.l d0,d0
    1662:	|  |   movea.l d1,a0
    1664:	|  |   adda.l d0,a0
    1666:	|  |   move.l (a0),d0
    1668:	+--|-- bra.s 1670 <resourceNameFromNum+0x44>
	return "Unknown resource";
    166a:	|  \-> move.l #79542,d0
    1670:	\----> rts

00001672 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{	
    1672:	          lea -40(sp),sp
    1676:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    167a:	          move.l #320,19b4c <winWidth>
    winHeight = 256;
    1684:	          move.l #256,19b50 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    168e:	          tst.l 56(sp)
    1692:	      /-- bne.s 16aa <main_sludge+0x38>
		bundleFolder = copyString("game/");
    1694:	      |   pea 136c7 <cursors.c.412ac4f3+0x1ea>
    169a:	      |   jsr b8 <copyString>
    16a0:	      |   addq.l #4,sp
    16a2:	      |   move.l d0,19b64 <bundleFolder>
    16a8:	   /--|-- bra.s 16c0 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    16aa:	   |  \-> movea.l 60(sp),a0
    16ae:	   |      move.l (a0),d0
    16b0:	   |      move.l d0,-(sp)
    16b2:	   |      jsr b8 <copyString>
    16b8:	   |      addq.l #4,sp
    16ba:	   |      move.l d0,19b64 <bundleFolder>
	}
    
	int lastSlash = -1;
    16c0:	   \----> moveq #-1,d0
    16c2:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    16c6:	          clr.l 40(sp)
    16ca:	   /----- bra.s 16ec <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    16cc:	/--|----> move.l 19b64 <bundleFolder>,d1
    16d2:	|  |      move.l 40(sp),d0
    16d6:	|  |      movea.l d1,a0
    16d8:	|  |      adda.l d0,a0
    16da:	|  |      move.b (a0),d0
    16dc:	|  |      cmpi.b #47,d0
    16e0:	|  |  /-- bne.s 16e8 <main_sludge+0x76>
    16e2:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    16e8:	|  |  \-> addq.l #1,40(sp)
    16ec:	|  \----> move.l 19b64 <bundleFolder>,d1
    16f2:	|         move.l 40(sp),d0
    16f6:	|         movea.l d1,a0
    16f8:	|         adda.l d0,a0
    16fa:	|         move.b (a0),d0
    16fc:	\-------- bne.s 16cc <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    16fe:	          move.l 19b64 <bundleFolder>,d0
    1704:	          move.l 44(sp),d1
    1708:	          addq.l #1,d1
    170a:	          movea.l d0,a0
    170c:	          adda.l d1,a0
    170e:	          clr.b (a0)

	if (argc > 1) {
    1710:	          moveq #1,d0
    1712:	          cmp.l 56(sp),d0
    1716:	      /-- bge.s 1732 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1718:	      |   move.l 56(sp),d0
    171c:	      |   addi.l #1073741823,d0
    1722:	      |   add.l d0,d0
    1724:	      |   add.l d0,d0
    1726:	      |   movea.l 60(sp),a0
    172a:	      |   adda.l d0,a0
    172c:	      |   move.l (a0),48(sp)
    1730:	   /--|-- bra.s 178c <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1732:	   |  \-> move.l 19b64 <bundleFolder>,d0
    1738:	   |      pea 136cd <cursors.c.412ac4f3+0x1f0>
    173e:	   |      move.l d0,-(sp)
    1740:	   |      jsr fedc <joinStrings>
    1746:	   |      addq.l #8,sp
    1748:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    174c:	   |      move.l 48(sp),-(sp)
    1750:	   |      jsr fdf2 <fileExists>
    1756:	   |      addq.l #4,sp
    1758:	   |      tst.b d0
    175a:	   +----- bne.s 178c <main_sludge+0x11a>
			FreeVec(sludgeFile);
    175c:	   |      move.l 48(sp),36(sp)
    1762:	   |      move.l 19c4c <SysBase>,d0
    1768:	   |      movea.l d0,a6
    176a:	   |      movea.l 36(sp),a1
    176e:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    1772:	   |      move.l 19b64 <bundleFolder>,d0
    1778:	   |      pea 136da <cursors.c.412ac4f3+0x1fd>
    177e:	   |      move.l d0,-(sp)
    1780:	   |      jsr fedc <joinStrings>
    1786:	   |      addq.l #8,sp
    1788:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    178c:	   \----> move.l 48(sp),-(sp)
    1790:	          jsr fdf2 <fileExists>
    1796:	          addq.l #4,sp
    1798:	          tst.b d0
    179a:	      /-- bne.s 17e4 <main_sludge+0x172>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    179c:	      |   move.l 19c54 <DOSBase>,d0
    17a2:	      |   movea.l d0,a6
    17a4:	      |   jsr -60(a6)
    17a8:	      |   move.l d0,28(sp)
    17ac:	      |   move.l 28(sp),d0
    17b0:	      |   move.l d0,24(sp)
    17b4:	      |   move.l #79587,20(sp)
    17bc:	      |   moveq #21,d0
    17be:	      |   move.l d0,16(sp)
    17c2:	      |   move.l 19c54 <DOSBase>,d0
    17c8:	      |   movea.l d0,a6
    17ca:	      |   move.l 24(sp),d1
    17ce:	      |   move.l 20(sp),d2
    17d2:	      |   move.l 16(sp),d3
    17d6:	      |   jsr -48(a6)
    17da:	      |   move.l d0,12(sp)
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    17de:	      |   moveq #0,d0
    17e0:	/-----|-- bra.w 1940 <main_sludge+0x2ce>
	}

	setGameFilePath (sludgeFile);	
    17e4:	|     \-> move.l 48(sp),-(sp)
    17e8:	|         jsr 194a <setGameFilePath>
    17ee:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    17f0:	|         move.l 48(sp),-(sp)
    17f4:	|         jsr 31d6 <initSludge>
    17fa:	|         addq.l #4,sp
    17fc:	|         tst.w d0
    17fe:	|     /-- bne.s 1806 <main_sludge+0x194>
    1800:	|     |   moveq #0,d0
    1802:	+-----|-- bra.w 1940 <main_sludge+0x2ce>
	
	if( winWidth != 320 || winHeight != 256) {
    1806:	|     \-> move.l 19b4c <winWidth>,d0
    180c:	|         cmpi.l #320,d0
    1812:	|     /-- bne.s 1822 <main_sludge+0x1b0>
    1814:	|     |   move.l 19b50 <winHeight>,d0
    181a:	|     |   cmpi.l #256,d0
    1820:	|  /--|-- beq.s 1844 <main_sludge+0x1d2>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    1822:	|  |  \-> pea 136f9 <cursors.c.412ac4f3+0x21c>
    1828:	|  |      jsr 12a04 <KPrintF>
    182e:	|  |      addq.l #4,sp
		winWidth = 320;
    1830:	|  |      move.l #320,19b4c <winWidth>
		winHeight = 256;
    183a:	|  |      move.l #256,19b50 <winHeight>
	}

	if (! resizeBackdrop (winWidth, winHeight)) {
    1844:	|  \----> move.l 19b50 <winHeight>,d0
    184a:	|         move.l d0,d1
    184c:	|         move.l 19b4c <winWidth>,d0
    1852:	|         move.l d1,-(sp)
    1854:	|         move.l d0,-(sp)
    1856:	|         jsr 96ee <resizeBackdrop>
    185c:	|         addq.l #8,sp
    185e:	|         tst.w d0
    1860:	|     /-- bne.s 1876 <main_sludge+0x204>
		KPrintF("Couldn't allocate memory for backdrop");
    1862:	|     |   pea 13776 <cursors.c.412ac4f3+0x299>
    1868:	|     |   jsr 12a04 <KPrintF>
    186e:	|     |   addq.l #4,sp
		return FALSE;
    1870:	|     |   moveq #0,d0
    1872:	+-----|-- bra.w 1940 <main_sludge+0x2ce>
	}

	if (! initPeople ())
    1876:	|     \-> jsr 6f20 <initPeople>
    187c:	|         tst.w d0
    187e:	|     /-- bne.s 1894 <main_sludge+0x222>
	{
		KPrintF("Couldn't initialise people stuff");
    1880:	|     |   pea 1379c <cursors.c.412ac4f3+0x2bf>
    1886:	|     |   jsr 12a04 <KPrintF>
    188c:	|     |   addq.l #4,sp
		return FALSE;
    188e:	|     |   moveq #0,d0
    1890:	+-----|-- bra.w 1940 <main_sludge+0x2ce>
	}

	if (! initFloor ())
    1894:	|     \-> jsr 11dae <initFloor>
    189a:	|         tst.w d0
    189c:	|     /-- bne.s 18b2 <main_sludge+0x240>
	{
		KPrintF("Couldn't initialise floor stuff");
    189e:	|     |   pea 137bd <cursors.c.412ac4f3+0x2e0>
    18a4:	|     |   jsr 12a04 <KPrintF>
    18aa:	|     |   addq.l #4,sp
		
		return FALSE;
    18ac:	|     |   moveq #0,d0
    18ae:	+-----|-- bra.w 1940 <main_sludge+0x2ce>
	}

	if (! initObjectTypes ())
    18b2:	|     \-> jsr 989c <initObjectTypes>
    18b8:	|         tst.w d0
    18ba:	|     /-- bne.s 18ce <main_sludge+0x25c>
	{
		KPrintF("Couldn't initialise object type stuff");
    18bc:	|     |   pea 137dd <cursors.c.412ac4f3+0x300>
    18c2:	|     |   jsr 12a04 <KPrintF>
    18c8:	|     |   addq.l #4,sp
		return FALSE;
    18ca:	|     |   moveq #0,d0
    18cc:	+-----|-- bra.s 1940 <main_sludge+0x2ce>
	}

	initSpeech ();
    18ce:	|     \-> jsr 556c <initSpeech>
	initStatusBar ();
    18d4:	|         jsr 5030 <initStatusBar>

	gameName = getNumberedString(1);
    18da:	|         pea 1 <_start+0x1>
    18de:	|         jsr 436e <getNumberedString>
    18e4:	|         addq.l #4,sp
    18e6:	|         move.l d0,19b5c <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    18ec:	|         move.l 19c1c <noStack>,d0
    18f2:	|         pea 1 <_start+0x1>
    18f6:	|         move.l d0,-(sp)
    18f8:	|         clr.l -(sp)
    18fa:	|         clr.l -(sp)
    18fc:	|         clr.l -(sp)
    18fe:	|         jsr 41f6 <startNewFunctionNum>
    1904:	|         lea 20(sp),sp

	weAreDoneSoQuit = 0;
    1908:	|         clr.l 19b68 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {		
    190e:	|     /-- bra.s 1922 <main_sludge+0x2b0>
		handleInput();
    1910:	|  /--|-> jsr 31ce <handleInput>
		sludgeDisplay ();
    1916:	|  |  |   jsr 41a8 <sludgeDisplay>
		WaitVbl();
    191c:	|  |  |   jsr 1292c <WaitVbl>
	while ( !weAreDoneSoQuit ) {		
    1922:	|  |  \-> move.l 19b68 <weAreDoneSoQuit>,d0
    1928:	|  \----- beq.s 1910 <main_sludge+0x29e>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    192a:	|         move.l 48(sp),32(sp)
    1930:	|         move.l 19c4c <SysBase>,d0
    1936:	|         movea.l d0,a6
    1938:	|         movea.l 32(sp),a1
    193c:	|         jsr -690(a6)
}
    1940:	\-------> movem.l (sp)+,d2-d3/a6
    1944:	          lea 40(sp),sp
    1948:	          rts

0000194a <setGameFilePath>:

void setGameFilePath (char * f) {
    194a:	          lea -1104(sp),sp
    194e:	          move.l a6,-(sp)
    1950:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    1952:	          move.l #1112,d0
    1958:	          add.l sp,d0
    195a:	          addi.l #-1102,d0
    1960:	          move.l d0,1100(sp)
    1964:	          move.l #998,1096(sp)
    196c:	          move.l 19c54 <DOSBase>,d0
    1972:	          movea.l d0,a6
    1974:	          move.l 1100(sp),d1
    1978:	          move.l 1096(sp),d2
    197c:	          jsr -564(a6)
    1980:	          move.w d0,1094(sp)
    1984:	          move.w 1094(sp),d0
    1988:	      /-- bne.s 1998 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    198a:	      |   pea 13803 <thumbnail.c.7eb31449+0x9>
    1990:	      |   jsr 12a04 <KPrintF>
    1996:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    1998:	      \-> moveq #-1,d0
    199a:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    199e:	          clr.l 1104(sp)
    19a2:	   /----- bra.s 19c0 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    19a4:	/--|----> move.l 1104(sp),d0
    19a8:	|  |      movea.l 1116(sp),a0
    19ac:	|  |      adda.l d0,a0
    19ae:	|  |      move.b (a0),d0
    19b0:	|  |      cmpi.b #47,d0
    19b4:	|  |  /-- bne.s 19bc <setGameFilePath+0x72>
    19b6:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    19bc:	|  |  \-> addq.l #1,1104(sp)
    19c0:	|  \----> move.l 1104(sp),d0
    19c4:	|         movea.l 1116(sp),a0
    19c8:	|         adda.l d0,a0
    19ca:	|         move.b (a0),d0
    19cc:	\-------- bne.s 19a4 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    19ce:	          moveq #-1,d0
    19d0:	          cmp.l 1108(sp),d0
    19d4:	   /----- beq.s 1a4e <setGameFilePath+0x104>
		f[got] = 0;	
    19d6:	   |      move.l 1108(sp),d0
    19da:	   |      movea.l 1116(sp),a0
    19de:	   |      adda.l d0,a0
    19e0:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    19e2:	   |      move.l 1116(sp),1090(sp)
    19e8:	   |      moveq #-2,d0
    19ea:	   |      move.l d0,1086(sp)
    19ee:	   |      move.l 19c54 <DOSBase>,d0
    19f4:	   |      movea.l d0,a6
    19f6:	   |      move.l 1090(sp),d1
    19fa:	   |      move.l 1086(sp),d2
    19fe:	   |      jsr -84(a6)
    1a02:	   |      move.l d0,1082(sp)
    1a06:	   |      move.l 1082(sp),d0
    1a0a:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    1a0e:	   |      move.l 1078(sp),1074(sp)
    1a14:	   |      move.l 19c54 <DOSBase>,d0
    1a1a:	   |      movea.l d0,a6
    1a1c:	   |      move.l 1074(sp),d1
    1a20:	   |      jsr -126(a6)
    1a24:	   |      move.l d0,1070(sp)
    1a28:	   |      move.l 1070(sp),d0
    1a2c:	   |  /-- bne.s 1a40 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    1a2e:	   |  |   move.l 1116(sp),-(sp)
    1a32:	   |  |   pea 13829 <thumbnail.c.7eb31449+0x2f>
    1a38:	   |  |   jsr 12a04 <KPrintF>
    1a3e:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    1a40:	   |  \-> move.l 1108(sp),d0
    1a44:	   |      movea.l 1116(sp),a0
    1a48:	   |      adda.l d0,a0
    1a4a:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    1a4e:	   \----> move.l #400,1066(sp)
    1a56:	          clr.l 1062(sp)
    1a5a:	          move.l 19c4c <SysBase>,d0
    1a60:	          movea.l d0,a6
    1a62:	          move.l 1066(sp),d0
    1a66:	          move.l 1062(sp),d1
    1a6a:	          jsr -684(a6)
    1a6e:	          move.l d0,1058(sp)
    1a72:	          move.l 1058(sp),d0
    1a76:	          move.l d0,19b60 <gamePath>
	if (gamePath==0) {
    1a7c:	          move.l 19b60 <gamePath>,d0
    1a82:	      /-- bne.s 1a96 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    1a84:	      |   pea 1385c <thumbnail.c.7eb31449+0x62>
    1a8a:	      |   jsr 12a04 <KPrintF>
    1a90:	      |   addq.l #4,sp
    1a92:	   /--|-- bra.w 1b7e <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    1a96:	   |  \-> move.l 19b60 <gamePath>,1054(sp)
    1a9e:	   |      moveq #-2,d0
    1aa0:	   |      move.l d0,1050(sp)
    1aa4:	   |      move.l 19c54 <DOSBase>,d0
    1aaa:	   |      movea.l d0,a6
    1aac:	   |      move.l 1054(sp),d1
    1ab0:	   |      move.l 1050(sp),d2
    1ab4:	   |      jsr -84(a6)
    1ab8:	   |      move.l d0,1046(sp)
    1abc:	   |      move.l 1046(sp),d0
    1ac0:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    1ac4:	   |      move.l 1042(sp),1038(sp)
    1aca:	   |      move.l 19c54 <DOSBase>,d0
    1ad0:	   |      movea.l d0,a6
    1ad2:	   |      move.l 1038(sp),d1
    1ad6:	   |      jsr -126(a6)
    1ada:	   |      move.l d0,1034(sp)
    1ade:	   |      move.l 1034(sp),d0
    1ae2:	   |  /-- bne.s 1af2 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    1ae4:	   |  |   pea 13897 <thumbnail.c.7eb31449+0x9d>
    1aea:	   |  |   jsr 12a04 <KPrintF>
    1af0:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    1af2:	   |  \-> move.l #1112,d0
    1af8:	   |      add.l sp,d0
    1afa:	   |      addi.l #-1102,d0
    1b00:	   |      move.l d0,1030(sp)
    1b04:	   |      moveq #-2,d0
    1b06:	   |      move.l d0,1026(sp)
    1b0a:	   |      move.l 19c54 <DOSBase>,d0
    1b10:	   |      movea.l d0,a6
    1b12:	   |      move.l 1030(sp),d1
    1b16:	   |      move.l 1026(sp),d2
    1b1a:	   |      jsr -84(a6)
    1b1e:	   |      move.l d0,1022(sp)
    1b22:	   |      move.l 1022(sp),d0
    1b26:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    1b2a:	   |      move.l 1042(sp),1018(sp)
    1b30:	   |      move.l 19c54 <DOSBase>,d0
    1b36:	   |      movea.l d0,a6
    1b38:	   |      move.l 1018(sp),d1
    1b3c:	   |      jsr -126(a6)
    1b40:	   |      move.l d0,1014(sp)
    1b44:	   |      move.l 1014(sp),d0
    1b48:	   |  /-- bne.s 1b5e <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    1b4a:	   |  |   moveq #10,d0
    1b4c:	   |  |   add.l sp,d0
    1b4e:	   |  |   move.l d0,-(sp)
    1b50:	   |  |   pea 138c3 <thumbnail.c.7eb31449+0xc9>
    1b56:	   |  |   jsr 12a04 <KPrintF>
    1b5c:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    1b5e:	   |  \-> move.l 19b60 <gamePath>,d0
    1b64:	   +----- beq.s 1b7e <setGameFilePath+0x234>
    1b66:	   |      move.l 19b60 <gamePath>,1010(sp)
    1b6e:	   |      move.l 19c4c <SysBase>,d0
    1b74:	   |      movea.l d0,a6
    1b76:	   |      movea.l 1010(sp),a1
    1b7a:	   |      jsr -690(a6)
}
    1b7e:	   \----> move.l (sp)+,d2
    1b80:	          movea.l (sp)+,a6
    1b82:	          lea 1104(sp),sp
    1b86:	          rts

00001b88 <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    1b88:	    subq.l #4,sp
    1b8a:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    1b8c:	    move.l 19bbc <zBuffer+0x50>,d0
    1b92:	/-- beq.s 1bca <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    1b94:	|   pea 19bc0 <zBuffer+0x54>
    1b9a:	|   pea 1 <_start+0x1>
    1b9e:	|   jsr 1518 <deleteTextures>
    1ba4:	|   addq.l #8,sp
		zBuffer.texName = 0;
    1ba6:	|   clr.l 19bc0 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    1bac:	|   move.l 19bbc <zBuffer+0x50>,4(sp)
    1bb4:	|   move.l 19c4c <SysBase>,d0
    1bba:	|   movea.l d0,a6
    1bbc:	|   movea.l 4(sp),a1
    1bc0:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    1bc4:	|   clr.l 19bbc <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    1bca:	\-> clr.l 19b74 <zBuffer+0x8>
	zBuffer.originalNum =0;
    1bd0:	    clr.l 19bb8 <zBuffer+0x4c>
}
    1bd6:	    nop
    1bd8:	    movea.l (sp)+,a6
    1bda:	    addq.l #4,sp
    1bdc:	    rts

00001bde <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    1bde:	                         lea -528(sp),sp
    1be2:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    1be6:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    1bea:	                         jsr 1b88 <killZBuffer>

	zBuffer.originalNum = y;
    1bf0:	                         move.l 544(sp),d0
    1bf4:	                         move.l d0,19bb8 <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    1bfa:	                         move.l 544(sp),d0
    1bfe:	                         move.l d0,-(sp)
    1c00:	                         jsr 446c <openFileFromNum>
    1c06:	                         addq.l #4,sp
    1c08:	                         tst.l d0
    1c0a:	                     /-- bne.s 1c12 <setZBuffer+0x34>
    1c0c:	                     |   clr.w d0
    1c0e:	/--------------------|-- bra.w 1ff0 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    1c12:	|                    \-> move.l 19c34 <bigDataFile>,524(sp)
    1c1a:	|                        move.l 19c54 <DOSBase>,d0
    1c20:	|                        movea.l d0,a6
    1c22:	|                        move.l 524(sp),d1
    1c26:	|                        jsr -306(a6)
    1c2a:	|                        move.l d0,520(sp)
    1c2e:	|                        move.l 520(sp),d0
    1c32:	|                        moveq #83,d1
    1c34:	|                        cmp.l d0,d1
    1c36:	|                    /-- beq.s 1c98 <setZBuffer+0xba>
    1c38:	|                    |   move.l 19c34 <bigDataFile>,516(sp)
    1c40:	|                    |   move.l 19c54 <DOSBase>,d0
    1c46:	|                    |   movea.l d0,a6
    1c48:	|                    |   move.l 516(sp),d1
    1c4c:	|                    |   jsr -306(a6)
    1c50:	|                    |   move.l d0,512(sp)
    1c54:	|                    |   move.l 512(sp),d0
    1c58:	|                    |   moveq #122,d1
    1c5a:	|                    |   cmp.l d0,d1
    1c5c:	|                    +-- beq.s 1c98 <setZBuffer+0xba>
    1c5e:	|                    |   move.l 19c34 <bigDataFile>,508(sp)
    1c66:	|                    |   move.l 19c54 <DOSBase>,d0
    1c6c:	|                    |   movea.l d0,a6
    1c6e:	|                    |   move.l 508(sp),d1
    1c72:	|                    |   jsr -306(a6)
    1c76:	|                    |   move.l d0,504(sp)
    1c7a:	|                    |   move.l 504(sp),d0
    1c7e:	|                    |   moveq #98,d1
    1c80:	|                    |   cmp.l d0,d1
    1c82:	|                    +-- beq.s 1c98 <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    1c84:	|                    |   pea 138f5 <thumbnail.c.7eb31449+0xfb>
    1c8a:	|                    |   jsr 12a04 <KPrintF>
    1c90:	|                    |   addq.l #4,sp
		 return FALSE;
    1c92:	|                    |   clr.w d0
    1c94:	+--------------------|-- bra.w 1ff0 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    1c98:	|                    \-> move.l 19c34 <bigDataFile>,500(sp)
    1ca0:	|                        move.l 19c54 <DOSBase>,d0
    1ca6:	|                        movea.l d0,a6
    1ca8:	|                        move.l 500(sp),d1
    1cac:	|                        jsr -306(a6)
    1cb0:	|                        move.l d0,496(sp)
    1cb4:	|                        move.l 496(sp),d0
    1cb8:	|                    /-- beq.s 1cc2 <setZBuffer+0xe4>
    1cba:	|                    |   moveq #1,d1
    1cbc:	|                    |   cmp.l d0,d1
    1cbe:	|                 /--|-- beq.s 1cd8 <setZBuffer+0xfa>
    1cc0:	|              /--|--|-- bra.s 1d06 <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    1cc2:	|              |  |  \-> move.l #640,19b6c <zBuffer>
		zBuffer.height = 480;
    1ccc:	|              |  |      move.l #480,19b70 <zBuffer+0x4>
		break;
    1cd6:	|              |  |  /-- bra.s 1d1a <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    1cd8:	|              |  \--|-> move.l 19c34 <bigDataFile>,d0
    1cde:	|              |     |   move.l d0,-(sp)
    1ce0:	|              |     |   jsr 6bc <get2bytes>
    1ce6:	|              |     |   addq.l #4,sp
    1ce8:	|              |     |   move.l d0,19b6c <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    1cee:	|              |     |   move.l 19c34 <bigDataFile>,d0
    1cf4:	|              |     |   move.l d0,-(sp)
    1cf6:	|              |     |   jsr 6bc <get2bytes>
    1cfc:	|              |     |   addq.l #4,sp
    1cfe:	|              |     |   move.l d0,19b70 <zBuffer+0x4>
		break;
    1d04:	|              |     +-- bra.s 1d1a <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    1d06:	|              \-----|-> pea 13909 <thumbnail.c.7eb31449+0x10f>
    1d0c:	|                    |   jsr 12a04 <KPrintF>
    1d12:	|                    |   addq.l #4,sp
		return FALSE;
    1d14:	|                    |   clr.w d0
    1d16:	+--------------------|-- bra.w 1ff0 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    1d1a:	|                    \-> move.l 19b6c <zBuffer>,d0
    1d20:	|                        move.l d0,d1
    1d22:	|                        move.l 19ce4 <sceneWidth>,d0
    1d28:	|                        cmp.l d1,d0
    1d2a:	|                    /-- bne.s 1d3e <setZBuffer+0x160>
    1d2c:	|                    |   move.l 19b70 <zBuffer+0x4>,d0
    1d32:	|                    |   move.l d0,d1
    1d34:	|                    |   move.l 19ce8 <sceneHeight>,d0
    1d3a:	|                    |   cmp.l d1,d0
    1d3c:	|                 /--|-- beq.s 1d8e <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    1d3e:	|                 |  \-> movea.l 19ce8 <sceneHeight>,a1
    1d44:	|                 |      movea.l 19ce4 <sceneWidth>,a0
    1d4a:	|                 |      move.l 19b70 <zBuffer+0x4>,d1
    1d50:	|                 |      move.l 19b6c <zBuffer>,d0
    1d56:	|                 |      move.l a1,-(sp)
    1d58:	|                 |      move.l a0,-(sp)
    1d5a:	|                 |      move.l d1,-(sp)
    1d5c:	|                 |      move.l d0,-(sp)
    1d5e:	|                 |      pea 13955 <custom.c.40d35411+0x27>
    1d64:	|                 |      moveq #32,d0
    1d66:	|                 |      add.l sp,d0
    1d68:	|                 |      move.l d0,-(sp)
    1d6a:	|                 |      jsr 101ba <sprintf>
    1d70:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    1d74:	|                 |      moveq #12,d0
    1d76:	|                 |      add.l sp,d0
    1d78:	|                 |      move.l d0,-(sp)
    1d7a:	|                 |      pea 13970 <custom.c.40d35411+0x42>
    1d80:	|                 |      jsr 12a04 <KPrintF>
    1d86:	|                 |      addq.l #8,sp
		return FALSE;
    1d88:	|                 |      clr.w d0
    1d8a:	+-----------------|----- bra.w 1ff0 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    1d8e:	|                 \----> move.l 19c34 <bigDataFile>,492(sp)
    1d96:	|                        move.l 19c54 <DOSBase>,d0
    1d9c:	|                        movea.l d0,a6
    1d9e:	|                        move.l 492(sp),d1
    1da2:	|                        jsr -306(a6)
    1da6:	|                        move.l d0,488(sp)
    1daa:	|                        move.l 488(sp),d0
    1dae:	|                        move.l d0,19b74 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1db4:	|                        clr.l 544(sp)
    1db8:	|                    /-- bra.s 1de4 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    1dba:	|                 /--|-> move.l 19c34 <bigDataFile>,d0
    1dc0:	|                 |  |   move.l d0,-(sp)
    1dc2:	|                 |  |   jsr 6bc <get2bytes>
    1dc8:	|                 |  |   addq.l #4,sp
    1dca:	|                 |  |   move.l 544(sp),d1
    1dce:	|                 |  |   add.l d1,d1
    1dd0:	|                 |  |   add.l d1,d1
    1dd2:	|                 |  |   lea 540(sp),a0
    1dd6:	|                 |  |   add.l a0,d1
    1dd8:	|                 |  |   movea.l d1,a0
    1dda:	|                 |  |   lea -144(a0),a0
    1dde:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1de0:	|                 |  |   addq.l #1,544(sp)
    1de4:	|                 |  \-> move.l 19b74 <zBuffer+0x8>,d0
    1dea:	|                 |      cmp.l 544(sp),d0
    1dee:	|                 \----- bhi.s 1dba <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    1df0:	|                        move.l 19b74 <zBuffer+0x8>,d0
    1df6:	|                        move.l d0,-(sp)
    1df8:	|                        move.l sp,d0
    1dfa:	|                        addi.l #336,d0
    1e00:	|                        move.l d0,-(sp)
    1e02:	|                        move.l sp,d0
    1e04:	|                        addi.l #404,d0
    1e0a:	|                        move.l d0,-(sp)
    1e0c:	|                        jsr 1ffa <sortZPal>
    1e12:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1e16:	|                        clr.l 544(sp)
    1e1a:	|                    /-- bra.s 1e92 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    1e1c:	|                 /--|-> move.l 544(sp),d0
    1e20:	|                 |  |   add.l d0,d0
    1e22:	|                 |  |   add.l d0,d0
    1e24:	|                 |  |   move.l #540,d1
    1e2a:	|                 |  |   add.l sp,d1
    1e2c:	|                 |  |   add.l d1,d0
    1e2e:	|                 |  |   movea.l d0,a0
    1e30:	|                 |  |   lea -208(a0),a0
    1e34:	|                 |  |   move.l (a0),d0
    1e36:	|                 |  |   add.l d0,d0
    1e38:	|                 |  |   add.l d0,d0
    1e3a:	|                 |  |   lea 540(sp),a0
    1e3e:	|                 |  |   add.l a0,d0
    1e40:	|                 |  |   movea.l d0,a0
    1e42:	|                 |  |   lea -144(a0),a0
    1e46:	|                 |  |   move.l (a0),d0
    1e48:	|                 |  |   move.l 544(sp),d1
    1e4c:	|                 |  |   addq.l #3,d1
    1e4e:	|                 |  |   add.l d1,d1
    1e50:	|                 |  |   movea.l d1,a1
    1e52:	|                 |  |   adda.l d1,a1
    1e54:	|                 |  |   lea 19b6c <zBuffer>,a0
    1e5a:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    1e5e:	|                 |  |   move.l 544(sp),d0
    1e62:	|                 |  |   add.l d0,d0
    1e64:	|                 |  |   add.l d0,d0
    1e66:	|                 |  |   move.l #540,d1
    1e6c:	|                 |  |   add.l sp,d1
    1e6e:	|                 |  |   add.l d1,d0
    1e70:	|                 |  |   movea.l d0,a0
    1e72:	|                 |  |   lea -208(a0),a0
    1e76:	|                 |  |   move.l (a0),d1
    1e78:	|                 |  |   move.l 544(sp),d0
    1e7c:	|                 |  |   add.l d1,d1
    1e7e:	|                 |  |   add.l d1,d1
    1e80:	|                 |  |   lea 540(sp),a0
    1e84:	|                 |  |   add.l a0,d1
    1e86:	|                 |  |   movea.l d1,a0
    1e88:	|                 |  |   lea -272(a0),a0
    1e8c:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1e8e:	|                 |  |   addq.l #1,544(sp)
    1e92:	|                 |  \-> move.l 19b74 <zBuffer+0x8>,d0
    1e98:	|                 |      cmp.l 544(sp),d0
    1e9c:	|                 \----- bhi.w 1e1c <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    1ea0:	|                        move.l 19ce4 <sceneWidth>,d0
    1ea6:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    1eaa:	|                        move.l 19ce8 <sceneHeight>,d0
    1eb0:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    1eb4:	|                        move.l 484(sp),-(sp)
    1eb8:	|                        move.l 484(sp),-(sp)
    1ebc:	|                        jsr 133b6 <__mulsi3>
    1ec2:	|                        addq.l #8,sp
    1ec4:	|                        move.l d0,476(sp)
    1ec8:	|                        clr.l 472(sp)
    1ecc:	|                        move.l 19c4c <SysBase>,d0
    1ed2:	|                        movea.l d0,a6
    1ed4:	|                        move.l 476(sp),d0
    1ed8:	|                        move.l 472(sp),d1
    1edc:	|                        jsr -684(a6)
    1ee0:	|                        move.l d0,468(sp)
    1ee4:	|                        move.l 468(sp),d0
    1ee8:	|                        move.l d0,19bbc <zBuffer+0x50>
	if (!zBuffer.tex) {
    1eee:	|                        move.l 19bbc <zBuffer+0x50>,d0
    1ef4:	|                    /-- bne.s 1f0a <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    1ef6:	|                    |   pea 139ad <custom.c.40d35411+0x7f>
    1efc:	|                    |   jsr 12a04 <KPrintF>
    1f02:	|                    |   addq.l #4,sp
		return FALSE;
    1f04:	|                    |   clr.w d0
    1f06:	+--------------------|-- bra.w 1ff0 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    1f0a:	|                    \-> clr.l 544(sp)
    1f0e:	|     /----------------- bra.w 1fda <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    1f12:	|  /--|----------------> clr.l 536(sp)
    1f16:	|  |  |     /----------- bra.w 1fc6 <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    1f1a:	|  |  |  /--|----------> tst.l 528(sp)
    1f1e:	|  |  |  |  |  /-------- bne.s 1f7c <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    1f20:	|  |  |  |  |  |         move.l 19c34 <bigDataFile>,464(sp)
    1f28:	|  |  |  |  |  |         move.l 19c54 <DOSBase>,d0
    1f2e:	|  |  |  |  |  |         movea.l d0,a6
    1f30:	|  |  |  |  |  |         move.l 464(sp),d1
    1f34:	|  |  |  |  |  |         jsr -306(a6)
    1f38:	|  |  |  |  |  |         move.l d0,460(sp)
    1f3c:	|  |  |  |  |  |         move.l 460(sp),d0
    1f40:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    1f44:	|  |  |  |  |  |         move.l 532(sp),d0
    1f48:	|  |  |  |  |  |         asr.l #4,d0
    1f4a:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    1f4e:	|  |  |  |  |  |         moveq #15,d0
    1f50:	|  |  |  |  |  |         cmp.l 528(sp),d0
    1f54:	|  |  |  |  |  |  /----- bne.s 1f72 <setZBuffer+0x394>
    1f56:	|  |  |  |  |  |  |      move.l 19c34 <bigDataFile>,d0
    1f5c:	|  |  |  |  |  |  |      move.l d0,-(sp)
    1f5e:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    1f64:	|  |  |  |  |  |  |      addq.l #4,sp
    1f66:	|  |  |  |  |  |  |      movea.l d0,a0
    1f68:	|  |  |  |  |  |  |      lea 16(a0),a0
    1f6c:	|  |  |  |  |  |  |      move.l a0,528(sp)
    1f70:	|  |  |  |  |  |  |  /-- bra.s 1f76 <setZBuffer+0x398>
				else stillToGo ++;
    1f72:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    1f76:	|  |  |  |  |  |     \-> moveq #15,d1
    1f78:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    1f7c:	|  |  |  |  |  \-------> move.l 532(sp),d0
    1f80:	|  |  |  |  |            add.l d0,d0
    1f82:	|  |  |  |  |            add.l d0,d0
    1f84:	|  |  |  |  |            lea 540(sp),a0
    1f88:	|  |  |  |  |            add.l a0,d0
    1f8a:	|  |  |  |  |            movea.l d0,a0
    1f8c:	|  |  |  |  |            lea -272(a0),a0
    1f90:	|  |  |  |  |            move.l (a0),d0
    1f92:	|  |  |  |  |            move.l d0,d2
    1f94:	|  |  |  |  |            move.l 19bbc <zBuffer+0x50>,d3
    1f9a:	|  |  |  |  |            move.l 484(sp),d0
    1f9e:	|  |  |  |  |            move.l 544(sp),-(sp)
    1fa2:	|  |  |  |  |            move.l d0,-(sp)
    1fa4:	|  |  |  |  |            jsr 133b6 <__mulsi3>
    1faa:	|  |  |  |  |            addq.l #8,sp
    1fac:	|  |  |  |  |            move.l d0,d1
    1fae:	|  |  |  |  |            move.l 536(sp),d0
    1fb2:	|  |  |  |  |            add.l d1,d0
    1fb4:	|  |  |  |  |            movea.l d3,a0
    1fb6:	|  |  |  |  |            adda.l d0,a0
    1fb8:	|  |  |  |  |            move.b d2,d0
    1fba:	|  |  |  |  |            lsl.b #4,d0
    1fbc:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    1fbe:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    1fc2:	|  |  |  |  |            addq.l #1,536(sp)
    1fc6:	|  |  |  |  \----------> move.l 536(sp),d1
    1fca:	|  |  |  |               move.l 19ce4 <sceneWidth>,d0
    1fd0:	|  |  |  |               cmp.l d1,d0
    1fd2:	|  |  |  \-------------- bhi.w 1f1a <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    1fd6:	|  |  |                  addq.l #1,544(sp)
    1fda:	|  |  \----------------> move.l 19ce8 <sceneHeight>,d0
    1fe0:	|  |                     cmp.l 544(sp),d0
    1fe4:	|  \-------------------- bhi.w 1f12 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    1fe8:	|                        jsr 4364 <finishAccess>
	
	return TRUE;
    1fee:	|                        moveq #1,d0
}
    1ff0:	\----------------------> movem.l (sp)+,d2-d3/a6
    1ff4:	                         lea 528(sp),sp
    1ff8:	                         rts

00001ffa <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    1ffa:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    1ffc:	             clr.l 4(sp)
    2000:	         /-- bra.s 2018 <sortZPal+0x1e>
		newpal[i] = i;
    2002:	      /--|-> move.l 4(sp),d0
    2006:	      |  |   add.l d0,d0
    2008:	      |  |   add.l d0,d0
    200a:	      |  |   movea.l 16(sp),a0
    200e:	      |  |   adda.l d0,a0
    2010:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    2014:	      |  |   addq.l #1,4(sp)
    2018:	      |  \-> move.l 4(sp),d0
    201c:	      |      cmp.l 20(sp),d0
    2020:	      \----- blt.s 2002 <sortZPal+0x8>
	}

	if (size < 2) return;		
    2022:	             moveq #1,d0
    2024:	             cmp.l 20(sp),d0
    2028:	/----------- bge.w 20da <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    202c:	|            moveq #1,d0
    202e:	|            move.l d0,4(sp)
    2032:	|     /----- bra.w 20cc <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    2036:	|  /--|----> move.l 4(sp),d0
    203a:	|  |  |      add.l d0,d0
    203c:	|  |  |      add.l d0,d0
    203e:	|  |  |      movea.l 16(sp),a0
    2042:	|  |  |      adda.l d0,a0
    2044:	|  |  |      move.l (a0),d0
    2046:	|  |  |      add.l d0,d0
    2048:	|  |  |      add.l d0,d0
    204a:	|  |  |      movea.l 12(sp),a0
    204e:	|  |  |      adda.l d0,a0
    2050:	|  |  |      move.l (a0),d1
    2052:	|  |  |      move.l 4(sp),d0
    2056:	|  |  |      addi.l #1073741823,d0
    205c:	|  |  |      add.l d0,d0
    205e:	|  |  |      add.l d0,d0
    2060:	|  |  |      movea.l 16(sp),a0
    2064:	|  |  |      adda.l d0,a0
    2066:	|  |  |      move.l (a0),d0
    2068:	|  |  |      add.l d0,d0
    206a:	|  |  |      add.l d0,d0
    206c:	|  |  |      movea.l 12(sp),a0
    2070:	|  |  |      adda.l d0,a0
    2072:	|  |  |      move.l (a0),d0
    2074:	|  |  |      cmp.l d1,d0
    2076:	|  |  |  /-- ble.s 20c8 <sortZPal+0xce>
			tmp = newpal[i];
    2078:	|  |  |  |   move.l 4(sp),d0
    207c:	|  |  |  |   add.l d0,d0
    207e:	|  |  |  |   add.l d0,d0
    2080:	|  |  |  |   movea.l 16(sp),a0
    2084:	|  |  |  |   adda.l d0,a0
    2086:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    2088:	|  |  |  |   move.l 4(sp),d0
    208c:	|  |  |  |   addi.l #1073741823,d0
    2092:	|  |  |  |   add.l d0,d0
    2094:	|  |  |  |   add.l d0,d0
    2096:	|  |  |  |   movea.l 16(sp),a1
    209a:	|  |  |  |   adda.l d0,a1
    209c:	|  |  |  |   move.l 4(sp),d0
    20a0:	|  |  |  |   add.l d0,d0
    20a2:	|  |  |  |   add.l d0,d0
    20a4:	|  |  |  |   movea.l 16(sp),a0
    20a8:	|  |  |  |   adda.l d0,a0
    20aa:	|  |  |  |   move.l (a1),d0
    20ac:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    20ae:	|  |  |  |   move.l 4(sp),d0
    20b2:	|  |  |  |   addi.l #1073741823,d0
    20b8:	|  |  |  |   add.l d0,d0
    20ba:	|  |  |  |   add.l d0,d0
    20bc:	|  |  |  |   movea.l 16(sp),a0
    20c0:	|  |  |  |   adda.l d0,a0
    20c2:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    20c4:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    20c8:	|  |  |  \-> addq.l #1,4(sp)
    20cc:	|  |  \----> move.l 4(sp),d0
    20d0:	|  |         cmp.l 20(sp),d0
    20d4:	|  \-------- blt.w 2036 <sortZPal+0x3c>
    20d8:	|        /-- bra.s 20dc <sortZPal+0xe2>
	if (size < 2) return;		
    20da:	\--------|-> nop
		}
	}
    20dc:	         \-> addq.l #8,sp
    20de:	             rts

000020e0 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    20e0:	/-------> lea -16(sp),sp
    20e4:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    20e6:	|         move.l 24(sp),-(sp)
    20ea:	|         jsr 3f8a <pauseFunction>
    20f0:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    20f2:	|     /-- bra.s 2104 <abortFunction+0x24>
    20f4:	|  /--|-> moveq #24,d0
    20f6:	|  |  |   add.l 24(sp),d0
    20fa:	|  |  |   move.l d0,-(sp)
    20fc:	|  |  |   jsr 11334 <trimStack>
    2102:	|  |  |   addq.l #4,sp
    2104:	|  |  \-> movea.l 24(sp),a0
    2108:	|  |      move.l 24(a0),d0
    210c:	|  \----- bne.s 20f4 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    210e:	|         movea.l 24(sp),a0
    2112:	|         move.l 4(a0),12(sp)
    2118:	|         move.l 19c4c <SysBase>,d0
    211e:	|         movea.l d0,a6
    2120:	|         movea.l 12(sp),a1
    2124:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2128:	|         clr.l 16(sp)
    212c:	|     /-- bra.s 214c <abortFunction+0x6c>
    212e:	|  /--|-> movea.l 24(sp),a0
    2132:	|  |  |   move.l 20(a0),d1
    2136:	|  |  |   move.l 16(sp),d0
    213a:	|  |  |   lsl.l #3,d0
    213c:	|  |  |   add.l d1,d0
    213e:	|  |  |   move.l d0,-(sp)
    2140:	|  |  |   jsr 10bfe <unlinkVar>
    2146:	|  |  |   addq.l #4,sp
    2148:	|  |  |   addq.l #1,16(sp)
    214c:	|  |  \-> movea.l 24(sp),a0
    2150:	|  |      move.l 8(a0),d0
    2154:	|  |      cmp.l 16(sp),d0
    2158:	|  \----- bgt.s 212e <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    215a:	|         movea.l 24(sp),a0
    215e:	|         move.l 20(a0),8(sp)
    2164:	|         move.l 19c4c <SysBase>,d0
    216a:	|         movea.l d0,a6
    216c:	|         movea.l 8(sp),a1
    2170:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    2174:	|         moveq #28,d0
    2176:	|         add.l 24(sp),d0
    217a:	|         move.l d0,-(sp)
    217c:	|         jsr 10bfe <unlinkVar>
    2182:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    2184:	|         movea.l 24(sp),a0
    2188:	|         move.l 40(a0),d0
    218c:	|     /-- beq.s 219e <abortFunction+0xbe>
    218e:	|     |   movea.l 24(sp),a0
    2192:	|     |   move.l 40(a0),d0
    2196:	|     |   move.l d0,-(sp)
    2198:	\-----|-- jsr 20e0 <abortFunction>(pc)
    219c:	      |   addq.l #4,sp
	FreeVec(fun);
    219e:	      \-> move.l 24(sp),4(sp)
    21a4:	          move.l 19c4c <SysBase>,d0
    21aa:	          movea.l d0,a6
    21ac:	          movea.l 4(sp),a1
    21b0:	          jsr -690(a6)
	fun = NULL;
    21b4:	          clr.l 24(sp)
}
    21b8:	          nop
    21ba:	          movea.l (sp)+,a6
    21bc:	          lea 16(sp),sp
    21c0:	          rts

000021c2 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    21c2:	          subq.l #8,sp
	int n = 0;
    21c4:	          clr.l 4(sp)
	*killedMyself = FALSE;
    21c8:	          movea.l 20(sp),a0
    21cc:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    21ce:	          move.l 19be8 <allRunningFunctions>,(sp)
	while (fun) {
    21d4:	   /----- bra.s 2202 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    21d6:	/--|----> movea.l (sp),a0
    21d8:	|  |      move.l (a0),d0
    21da:	|  |      cmp.l 12(sp),d0
    21de:	|  |  /-- bne.s 21fc <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    21e0:	|  |  |   movea.l (sp),a0
    21e2:	|  |  |   move.w #1,54(a0)
			n++;
    21e8:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    21ec:	|  |  |   move.l (sp),d0
    21ee:	|  |  |   cmp.l 16(sp),d0
    21f2:	|  |  +-- bne.s 21fc <cancelAFunction+0x3a>
    21f4:	|  |  |   movea.l 20(sp),a0
    21f8:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    21fc:	|  |  \-> movea.l (sp),a0
    21fe:	|  |      move.l 44(a0),(sp)
	while (fun) {
    2202:	|  \----> tst.l (sp)
    2204:	\-------- bne.s 21d6 <cancelAFunction+0x14>
	}
	return n;
    2206:	          move.l 4(sp),d0
}
    220a:	          addq.l #8,sp
    220c:	          rts

0000220e <completeTimers>:


void completeTimers () {
    220e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    2210:	          move.l 19be8 <allRunningFunctions>,(sp)

	while (thisFunction) {
    2216:	   /----- bra.s 222c <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    2218:	/--|----> movea.l (sp),a0
    221a:	|  |      move.b 56(a0),d0
    221e:	|  |  /-- bne.s 2226 <completeTimers+0x18>
    2220:	|  |  |   movea.l (sp),a0
    2222:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    2226:	|  |  \-> movea.l (sp),a0
    2228:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    222c:	|  \----> tst.l (sp)
    222e:	\-------- bne.s 2218 <completeTimers+0xa>
	}
}
    2230:	          nop
    2232:	          nop
    2234:	          addq.l #4,sp
    2236:	          rts

00002238 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    2238:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    223c:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    2242:	                                                             movea.l 80(sp),a0
    2246:	                                                             move.w 54(a0),d0
    224a:	/----------------------------------------------------------- beq.w 30ea <continueFunction+0xeb2>
		abortFunction (fun);
    224e:	|                                                            move.l 80(sp),-(sp)
    2252:	|                                                            jsr 20e0 <abortFunction>
    2258:	|                                                            addq.l #4,sp
		return TRUE;
    225a:	|                                                            moveq #1,d0
    225c:	|  /-------------------------------------------------------- bra.w 30f4 <continueFunction+0xebc>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    2260:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    2266:	|  |  |                                                      movea.l 80(sp),a0
    226a:	|  |  |                                                      move.l 4(a0),d1
    226e:	|  |  |                                                      movea.l 80(sp),a0
    2272:	|  |  |                                                      move.l 36(a0),d0
    2276:	|  |  |                                                      lsl.l #3,d0
    2278:	|  |  |                                                      movea.l d1,a0
    227a:	|  |  |                                                      adda.l d0,a0
    227c:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    2282:	|  |  |                                                      movea.l 80(sp),a0
    2286:	|  |  |                                                      move.l 4(a0),d1
    228a:	|  |  |                                                      movea.l 80(sp),a0
    228e:	|  |  |                                                      move.l 36(a0),d0
    2292:	|  |  |                                                      lsl.l #3,d0
    2294:	|  |  |                                                      movea.l d1,a0
    2296:	|  |  |                                                      adda.l d0,a0
    2298:	|  |  |                                                      move.l (a0),64(sp)
		KPrintF("Processing Type %ld",com);
    229c:	|  |  |                                                      move.l 64(sp),-(sp)
    22a0:	|  |  |                                                      pea 139d0 <custom.c.40d35411+0xa2>
    22a6:	|  |  |                                                      jsr 12a04 <KPrintF>
    22ac:	|  |  |                                                      addq.l #8,sp

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    22ae:	|  |  |                                                      moveq #41,d0
    22b0:	|  |  |                                                      cmp.l 64(sp),d0
    22b4:	|  |  |  /-------------------------------------------------- bcs.w 309e <continueFunction+0xe66>
    22b8:	|  |  |  |                                                   move.l 64(sp),d0
    22bc:	|  |  |  |                                                   add.l d0,d0
    22be:	|  |  |  |                                                   movea.l d0,a0
    22c0:	|  |  |  |                                                   adda.l #8908,a0
    22c6:	|  |  |  |                                                   move.w (a0),d0
    22c8:	|  |  |  |                                                   jmp (22cc <continueFunction+0x94>,pc,d0.w)
    22cc:	|  |  |  |                                                   bset d6,(a2)
    22ce:	|  |  |  |                                                   ori.w #2670,(a4)
    22d2:	|  |  |  |                                                   eori.w #2416,d6
    22d6:	|  |  |  |                                                   bchg d4,d2
    22d8:	|  |  |  |                                                   bclr d4,(a4)+
    22da:	|  |  |  |                                                   andi.l #181013194,d4
    22e0:	|  |  |  |                                                   .short 0x0aca
    22e2:	|  |  |  |                                                   .short 0x0aca
    22e4:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    22ec:	|  |  |  |                                                   .short 0x0aca
    22ee:	|  |  |  |                                                   andi.w #906,-(a4)
    22f2:	|  |  |  |                                                   bchg d1,196(a2)
    22f6:	|  |  |  |                                                   bset d1,580(a4)
    22fa:	|  |  |  |                                                   bclr d1,2576(a2)
    22fe:	|  |  |  |                                                   andi.b #-56,2762(a2)
    2304:	|  |  |  |                                                   .short 0x0aca
    2306:	|  |  |  |                                                   eori.l #63572682,d0
    230c:	|  |  |  |                                                   .short 0x0aca
    230e:	|  |  |  |                                                   bchg d3,-(a2)
    2310:	|  |  |  |                                                   bchg #-36,(a2)
    2314:	|  |  |  |                                                   .short 0x08cc
    2316:	|  |  |  |                                                   addi.b #14,1038(a0)
    231c:	|  |  |  |                                                   .short 0x040e
    231e:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    2322:	|  |  |  |                                                   ori.w #8232,(a0)
    2326:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    232c:	|  |  |  |                                                   ori.w #12136,(a0)
    2330:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    2336:	|  |  |  |                                                   ori.w #12328,(a0)
    233a:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    2340:	|  |  |  |                                                   add.l 44(sp),d1
    2344:	|  |  |  |                                                   moveq #28,d0
    2346:	|  |  |  |                                                   add.l 80(sp),d0
    234a:	|  |  |  |                                                   move.l d1,-(sp)
    234c:	|  |  |  |                                                   move.l d0,-(sp)
    234e:	|  |  |  |                                                   jsr 10e6a <copyVariable>
    2354:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    2356:	|  |  |  |                                                   move.l 80(sp),-(sp)
    235a:	|  |  |  |                                                   jsr 30fa <finishFunction>
    2360:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    2362:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    2368:	|  |  |  |                                                   move.l 80(sp),-(sp)
    236c:	|  |  |  |                                                   jsr 3fcc <restartFunction>
    2372:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    2374:	|  |  |  |  /----------------------------------------------- bra.w 30d2 <continueFunction+0xe9a>
				finishFunction (fun);
    2378:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    237c:	|  |  |  |  |                                                jsr 30fa <finishFunction>
    2382:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    2384:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    2388:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    238c:	|  |  |  |  +----------------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    2390:	|  |  |  |  |                                                movea.l 80(sp),a0
    2394:	|  |  |  |  |                                                move.l 28(a0),d0
    2398:	|  |  |  |  |                                                moveq #2,d1
    239a:	|  |  |  |  |                                                cmp.l d0,d1
    239c:	|  |  |  |  |                                            /-- beq.s 23a8 <continueFunction+0x170>
    239e:	|  |  |  |  |                                            |   moveq #4,d1
    23a0:	|  |  |  |  |                                            |   cmp.l d0,d1
    23a2:	|  |  |  |  |                                         /--|-- beq.s 23f6 <continueFunction+0x1be>
    23a4:	|  |  |  |  |                                /--------|--|-- bra.w 24de <continueFunction+0x2a6>
				case SVT_FUNC:
				pauseFunction (fun);		
    23a8:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    23ac:	|  |  |  |  |                                |        |      jsr 3f8a <pauseFunction>
    23b2:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    23b4:	|  |  |  |  |                                |        |      moveq #24,d0
    23b6:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    23ba:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    23be:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    23c2:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    23c6:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    23c8:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    23cc:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    23d0:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    23d2:	|  |  |  |  |                                |        |      jsr 41f6 <startNewFunctionNum>
    23d8:	|  |  |  |  |                                |        |      lea 20(sp),sp
    23dc:	|  |  |  |  |                                |        |      tst.l d0
    23de:	|  |  |  |  |                                |        |  /-- bne.s 23e6 <continueFunction+0x1ae>
    23e0:	|  |  |  |  |                                |        |  |   clr.w d0
    23e2:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 30f4 <continueFunction+0xebc>
				fun = allRunningFunctions;
    23e6:	|  |  |  |  |                                |        |  \-> move.l 19be8 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    23ee:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    23f2:	|  |  |  |  |                                |  /-----|----- bra.w 24f2 <continueFunction+0x2ba>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    23f6:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    23fa:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    23fe:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    2402:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    2406:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    2408:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    240a:	|  |  |  |  |                                |  |            jsr f6ae <callBuiltIn>
    2410:	|  |  |  |  |                                |  |            lea 12(sp),sp
    2414:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    2418:	|  |  |  |  |                                |  |            moveq #5,d0
    241a:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    241e:	|  |  |  |  |                                |  |  /-------- bcs.w 24da <continueFunction+0x2a2>
    2422:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    2426:	|  |  |  |  |                                |  |  |         add.l d0,d0
    2428:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    242a:	|  |  |  |  |                                |  |  |         adda.l #9270,a0
    2430:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    2432:	|  |  |  |  |                                |  |  |         jmp (2436 <continueFunction+0x1fe>,pc,d0.w)
    2436:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    243c:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    2440:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    2446:	|  |  |  |  |                                |  |  |         .short 0x39e4
    2448:	|  |  |  |  |                                |  |  |         jsr 12a04 <KPrintF>
    244e:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    2450:	|  |  |  |  |                                |  |  |         clr.w d0
    2452:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 30f4 <continueFunction+0xebc>

						case BR_PAUSE:
						pauseFunction (fun);
    2456:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    245a:	|  |  |  |  |                                |  |  |         jsr 3f8a <pauseFunction>
    2460:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    2462:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    2466:	|  |  |  |  |                                |  |  |  /----- bra.s 24dc <continueFunction+0x2a4>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    2468:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    246c:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    2470:	|  |  |  |  |                                |  |  |  +----- bra.s 24dc <continueFunction+0x2a4>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    2472:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    2476:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    247c:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    247e:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    2482:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    2486:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    248a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    248c:	|  |  |  |  |                                |  |  |  |      jsr 112a2 <setVariable>
    2492:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    2496:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    249a:	|  |  |  |  |                                |  |  |  |      jsr 3f8a <pauseFunction>
    24a0:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    24a2:	|  |  |  |  |                                |  |  |  |      move.l 19c1c <noStack>,d1
    24a8:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    24ac:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    24ae:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    24b0:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    24b4:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    24b6:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    24b8:	|  |  |  |  |                                |  |  |  |      jsr 41f6 <startNewFunctionNum>
    24be:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    24c2:	|  |  |  |  |                                |  |  |  |      tst.l d0
    24c4:	|  |  |  |  |                                |  |  |  |  /-- bne.s 24cc <continueFunction+0x294>
    24c6:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    24c8:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 30f4 <continueFunction+0xebc>
							fun = allRunningFunctions;
    24cc:	|  |  |  |  |                                |  |  |  |  \-> move.l 19be8 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    24d4:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    24d8:	|  |  |  |  |                                |  |  |  +----- bra.s 24dc <continueFunction+0x2a4>

						default:
						break;
    24da:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    24dc:	|  |  |  |  |                                |  +-----\----X bra.s 24f2 <continueFunction+0x2ba>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    24de:	|  |  |  |  |                                \--|----------> pea 13a2f <custom.c.40d35411+0x101>
    24e4:	|  |  |  |  |                                   |            jsr 12a04 <KPrintF>
    24ea:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    24ec:	|  |  |  |  |                                   |            clr.w d0
    24ee:	|  +--|--|--|-----------------------------------|----------- bra.w 30f4 <continueFunction+0xebc>
			}
			break;
    24f2:	|  |  |  |  +-----------------------------------\----------X bra.w 30d2 <continueFunction+0xe9a>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    24f6:	|  |  |  |  |                                                moveq #28,d0
    24f8:	|  |  |  |  |                                                add.l 80(sp),d0
    24fc:	|  |  |  |  |                                                clr.l -(sp)
    24fe:	|  |  |  |  |                                                clr.l -(sp)
    2500:	|  |  |  |  |                                                move.l d0,-(sp)
    2502:	|  |  |  |  |                                                jsr 112a2 <setVariable>
    2508:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    250c:	|  |  |  |  +----------------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    2510:	|  |  |  |  |                                                move.l 68(sp),d1
    2514:	|  |  |  |  |                                                moveq #28,d0
    2516:	|  |  |  |  |                                                add.l 80(sp),d0
    251a:	|  |  |  |  |                                                move.l d1,-(sp)
    251c:	|  |  |  |  |                                                pea 5 <_start+0x5>
    2520:	|  |  |  |  |                                                move.l d0,-(sp)
    2522:	|  |  |  |  |                                                jsr 112a2 <setVariable>
    2528:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    252c:	|  |  |  |  +----------------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    2530:	|  |  |  |  |                                                move.l 68(sp),d1
    2534:	|  |  |  |  |                                                moveq #28,d0
    2536:	|  |  |  |  |                                                add.l 80(sp),d0
    253a:	|  |  |  |  |                                                move.l d1,-(sp)
    253c:	|  |  |  |  |                                                pea 1 <_start+0x1>
    2540:	|  |  |  |  |                                                move.l d0,-(sp)
    2542:	|  |  |  |  |                                                jsr 112a2 <setVariable>
    2548:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    254c:	|  |  |  |  +----------------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    2550:	|  |  |  |  |                                                moveq #28,d0
    2552:	|  |  |  |  |                                                add.l 80(sp),d0
    2556:	|  |  |  |  |                                                movea.l 80(sp),a0
    255a:	|  |  |  |  |                                                movea.l 20(a0),a0
    255e:	|  |  |  |  |                                                move.l 68(sp),d1
    2562:	|  |  |  |  |                                                lsl.l #3,d1
    2564:	|  |  |  |  |                                                add.l a0,d1
    2566:	|  |  |  |  |                                                move.l d0,-(sp)
    2568:	|  |  |  |  |                                                move.l d1,-(sp)
    256a:	|  |  |  |  |                                                jsr 10e6a <copyVariable>
    2570:	|  |  |  |  |                                                addq.l #8,sp
    2572:	|  |  |  |  |                                                tst.w d0
    2574:	|  |  |  |  |  /-------------------------------------------- bne.w 30b0 <continueFunction+0xe78>
    2578:	|  |  |  |  |  |                                             clr.w d0
    257a:	|  +--|--|--|--|-------------------------------------------- bra.w 30f4 <continueFunction+0xebc>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    257e:	|  |  |  |  |  |                                             moveq #28,d0
    2580:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2584:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2586:	|  |  |  |  |  |                                             jsr 10ef0 <getBoolean>
    258c:	|  |  |  |  |  |                                             addq.l #4,sp
    258e:	|  |  |  |  |  |                                             tst.w d0
    2590:	|  |  |  |  |  |                                      /----- beq.s 25ac <continueFunction+0x374>
    2592:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    2596:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    259a:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    259c:	|  |  |  |  |  |                                      |      jsr 10ef0 <getBoolean>
    25a2:	|  |  |  |  |  |                                      |      addq.l #4,sp
    25a4:	|  |  |  |  |  |                                      |      tst.w d0
    25a6:	|  |  |  |  |  |                                      +----- beq.s 25ac <continueFunction+0x374>
    25a8:	|  |  |  |  |  |                                      |      moveq #1,d0
    25aa:	|  |  |  |  |  |                                      |  /-- bra.s 25ae <continueFunction+0x376>
    25ac:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    25ae:	|  |  |  |  |  |                                         \-> moveq #28,d1
    25b0:	|  |  |  |  |  |                                             add.l 80(sp),d1
    25b4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    25b6:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    25ba:	|  |  |  |  |  |                                             move.l d1,-(sp)
    25bc:	|  |  |  |  |  |                                             jsr 112a2 <setVariable>
    25c2:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    25c6:	|  |  |  |  |  |                                             moveq #24,d0
    25c8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    25cc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    25ce:	|  |  |  |  |  |                                             jsr 11334 <trimStack>
    25d4:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    25d6:	|  |  |  |  +--|-------------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    25da:	|  |  |  |  |  |                                             moveq #28,d0
    25dc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    25e0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    25e2:	|  |  |  |  |  |                                             jsr 10ef0 <getBoolean>
    25e8:	|  |  |  |  |  |                                             addq.l #4,sp
    25ea:	|  |  |  |  |  |                                             tst.w d0
    25ec:	|  |  |  |  |  |                                         /-- bne.s 2604 <continueFunction+0x3cc>
    25ee:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    25f2:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    25f6:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    25f8:	|  |  |  |  |  |                                         |   jsr 10ef0 <getBoolean>
    25fe:	|  |  |  |  |  |                                         |   addq.l #4,sp
    2600:	|  |  |  |  |  |                                         |   tst.w d0
    2602:	|  |  |  |  |  |                                      /--|-- beq.s 2608 <continueFunction+0x3d0>
    2604:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    2606:	|  |  |  |  |  |                                      |  /-- bra.s 260a <continueFunction+0x3d2>
    2608:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    260a:	|  |  |  |  |  |                                         \-> moveq #28,d1
    260c:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2610:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2612:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    2616:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2618:	|  |  |  |  |  |                                             jsr 112a2 <setVariable>
    261e:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2622:	|  |  |  |  |  |                                             moveq #24,d0
    2624:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2628:	|  |  |  |  |  |                                             move.l d0,-(sp)
    262a:	|  |  |  |  |  |                                             jsr 11334 <trimStack>
    2630:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2632:	|  |  |  |  +--|-------------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    2636:	|  |  |  |  |  |                                             move.l 68(sp),d1
    263a:	|  |  |  |  |  |                                             moveq #28,d0
    263c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2640:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2642:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    2646:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2648:	|  |  |  |  |  |                                             jsr 112a2 <setVariable>
    264e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2652:	|  |  |  |  +--|-------------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    2656:	|  |  |  |  |  |                                             move.l 68(sp),d1
    265a:	|  |  |  |  |  |                                             moveq #28,d0
    265c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2660:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2662:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    2666:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2668:	|  |  |  |  |  |                                             jsr 112a2 <setVariable>
    266e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2672:	|  |  |  |  +--|-------------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    2676:	|  |  |  |  |  |                                             move.l 68(sp),d1
    267a:	|  |  |  |  |  |                                             moveq #28,d0
    267c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2680:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2682:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    2686:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2688:	|  |  |  |  |  |                                             jsr 112a2 <setVariable>
    268e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2692:	|  |  |  |  +--|-------------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_UNREG:
			if (dialogValue != 1) {
    2696:	|  |  |  |  |  |                                             move.l 19b58 <dialogValue>,d0
    269c:	|  |  |  |  |  |                                             moveq #1,d1
    269e:	|  |  |  |  |  |                                             cmp.l d0,d1
    26a0:	|  |  |  |  |  |  /----------------------------------------- beq.w 30b4 <continueFunction+0xe7c>
				KPrintF(ERROR_HACKER);
    26a4:	|  |  |  |  |  |  |                                          pea 13a44 <custom.c.40d35411+0x116>
    26aa:	|  |  |  |  |  |  |                                          jsr 12a04 <KPrintF>
    26b0:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    26b2:	|  |  |  |  |  |  |                                          clr.w d0
    26b4:	|  +--|--|--|--|--|----------------------------------------- bra.w 30f4 <continueFunction+0xebc>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    26b8:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    26bc:	|  |  |  |  |  |  |                                          moveq #28,d0
    26be:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    26c2:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    26c4:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    26c6:	|  |  |  |  |  |  |                                          jsr 10a34 <loadStringToVar>
    26cc:	|  |  |  |  |  |  |                                          addq.l #8,sp
    26ce:	|  |  |  |  |  |  |                                          tst.w d0
    26d0:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 30b8 <continueFunction+0xe80>
					return FALSE;
    26d4:	|  |  |  |  |  |  |  |                                       clr.w d0
    26d6:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 30f4 <continueFunction+0xebc>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    26da:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    26de:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    26e2:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    26e4:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    26e6:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    26e8:	|  |  |  |  |  |  |  |                                /----- beq.s 2746 <continueFunction+0x50e>
    26ea:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    26ec:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    26ee:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 28da <continueFunction+0x6a2>
    26f2:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    26f4:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 2700 <continueFunction+0x4c8>
    26f6:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    26f8:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    26fa:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 2746 <continueFunction+0x50e>
    26fc:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 28da <continueFunction+0x6a2>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    2700:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    2702:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    2706:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 2732 <continueFunction+0x4fa>
					setVariable (&fun -> reg, SVT_NULL, 0);
    2708:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    270a:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    270e:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2710:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    2712:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2714:	|  |  |  |  |  |  |  |              |                 |  |   jsr 112a2 <setVariable>
    271a:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    271e:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    2720:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2724:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2726:	|  |  |  |  |  |  |  |              |                 |  |   jsr 11334 <trimStack>
    272c:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    272e:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 28f0 <continueFunction+0x6b8>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    2732:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 13a85 <custom.c.40d35411+0x157>
    2738:	|  |  |  |  |  |  |  |              |  |              |      jsr 12a04 <KPrintF>
    273e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    2740:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    2742:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 30f4 <continueFunction+0xebc>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2746:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    274a:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    274e:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    2752:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2754:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 276a <continueFunction+0x532>
					KPrintF((ERROR_INDEX_EMPTY));
    2756:	|  |  |  |  |  |  |  |              |  |                 |   pea 13ac1 <custom.c.40d35411+0x193>
    275c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 12a04 <KPrintF>
    2762:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    2764:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2766:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 30f4 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    276a:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    276c:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2770:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2772:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    2776:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    277a:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    277c:	|  |  |  |  |  |  |  |              |  |                     jsr 109b0 <getValueType>
    2782:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    2786:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    2788:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2790 <continueFunction+0x558>
    278a:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    278c:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 30f4 <continueFunction+0xebc>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2790:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    2794:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2798:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    279a:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    279c:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    279e:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 27c0 <continueFunction+0x588>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    27a0:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    27a4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    27a6:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    27aa:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    27ae:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    27b2:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    27b4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    27b6:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1063a <fastArrayGetByIndex>
    27bc:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    27be:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 27e0 <continueFunction+0x5a8>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    27c0:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    27c4:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    27c6:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    27ca:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    27ce:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    27d2:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    27d4:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    27d6:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    27d8:	|  |  |  |  |  |  |  |              |  |              |      jsr 112c4 <stackGetByIndex>
    27de:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    27e0:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    27e4:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    27e6:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    27ea:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    27ec:	|  |  |  |  |  |  |  |              |  |                     jsr 11334 <trimStack>
    27f2:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    27f4:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    27f8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2814 <continueFunction+0x5dc>
						setVariable (&fun -> reg, SVT_NULL, 0);
    27fa:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    27fc:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    2800:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2802:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2804:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2806:	|  |  |  |  |  |  |  |              |  |                 |   jsr 112a2 <setVariable>
    280c:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    2810:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 28ee <continueFunction+0x6b6>
    2814:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    2816:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    281a:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 2828 <continueFunction+0x5f0>
    281c:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    281e:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    2822:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 2872 <continueFunction+0x63a>
    2824:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 28ba <continueFunction+0x682>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2828:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    282c:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    2830:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    2834:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    2836:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 109b0 <getValueType>
    283c:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    2840:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    2842:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 284a <continueFunction+0x612>
    2844:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    2846:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 28d4 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    284a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    284c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    284e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    2852:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    2854:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    2858:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    285a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 112a2 <setVariable>
    2860:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    2864:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    2866:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    2868:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    286c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    2870:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 28d8 <continueFunction+0x6a0>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2872:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    2876:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    287a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    287e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    2880:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 109b0 <getValueType>
    2886:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    288a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    288c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 2892 <continueFunction+0x65a>
    288e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    2890:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 28d4 <continueFunction+0x69c>
							setVariable (&fun -> reg, SVT_INT, ii);
    2892:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    2894:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    2896:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    289a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    289c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    28a0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    28a2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 112a2 <setVariable>
    28a8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    28ac:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    28ae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    28b0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    28b4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    28b8:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 28d8 <continueFunction+0x6a0>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    28ba:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    28bc:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    28c0:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    28c2:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    28c6:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 10e6a <copyVariable>
    28cc:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    28ce:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    28d0:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 28ee <continueFunction+0x6b6>
    28d2:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    28d4:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 30f4 <continueFunction+0xebc>
				break;
    28d8:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 28ee <continueFunction+0x6b6>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    28da:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 13adf <custom.c.40d35411+0x1b1>
    28e0:	|  |  |  |  |  |  |  |                 |  |                  jsr 12a04 <KPrintF>
    28e6:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    28e8:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    28ea:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 30f4 <continueFunction+0xebc>
				break;
    28ee:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    28f0:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 30d2 <continueFunction+0xe9a>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    28f4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    28f8:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    28fc:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    28fe:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    2900:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2902:	|  |  |  |  |  |  |  |                                   /-- beq.s 2910 <continueFunction+0x6d8>
    2904:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    2906:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    2908:	|  |  |  |  |  |  |  |                                /--|-- beq.w 29bc <continueFunction+0x784>
    290c:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 2a1a <continueFunction+0x7e2>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2910:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2914:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2918:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    291c:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    291e:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2934 <continueFunction+0x6fc>
					KPrintF((ERROR_INDEX_EMPTY));
    2920:	|  |  |  |  |  |  |  |                             |  |  |   pea 13ac1 <custom.c.40d35411+0x193>
    2926:	|  |  |  |  |  |  |  |                             |  |  |   jsr 12a04 <KPrintF>
    292c:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    292e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2930:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 30f4 <continueFunction+0xebc>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2934:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    2936:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    293a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    293c:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    2940:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    2944:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    2946:	|  |  |  |  |  |  |  |                             |  |      jsr 109b0 <getValueType>
    294c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2950:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2952:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 295a <continueFunction+0x722>
    2954:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2956:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 30f4 <continueFunction+0xebc>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    295a:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    295e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2962:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    2966:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    2968:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    296c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    296e:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    2972:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2976:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    297a:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    297c:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    297e:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    2980:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2982:	|  |  |  |  |  |  |  |                             |  |      jsr 41b2 <stackSetByIndex>
    2988:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    298c:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    298e:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2996 <continueFunction+0x75e>
						return FALSE;
    2990:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2992:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 30f4 <continueFunction+0xebc>
					}
					trimStack (&fun -> stack);
    2996:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    2998:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    299c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    299e:	|  |  |  |  |  |  |  |                             |  |      jsr 11334 <trimStack>
    29a4:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    29a6:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    29a8:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    29ac:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    29ae:	|  |  |  |  |  |  |  |                             |  |      jsr 11334 <trimStack>
    29b4:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    29b6:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    29b8:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 30d2 <continueFunction+0xe9a>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    29bc:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    29be:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    29c2:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    29c4:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    29c8:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    29cc:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    29ce:	|  |  |  |  |  |  |  |                             |         jsr 109b0 <getValueType>
    29d4:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    29d8:	|  |  |  |  |  |  |  |                             |         tst.w d0
    29da:	|  |  |  |  |  |  |  |                             |     /-- bne.s 29e2 <continueFunction+0x7aa>
    29dc:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    29de:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 30f4 <continueFunction+0xebc>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    29e2:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    29e6:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    29e8:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    29ec:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    29f0:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    29f4:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    29f6:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    29f8:	|  |  |  |  |  |  |  |                             |         jsr 1063a <fastArrayGetByIndex>
    29fe:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2a00:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2a04:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2a14 <continueFunction+0x7dc>
    2a06:	|  |  |  |  |  |  |  |                             |     |   pea 13b03 <custom.c.40d35411+0x1d5>
    2a0c:	|  |  |  |  |  |  |  |                             |     |   jsr 12a04 <KPrintF>
    2a12:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2a14:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    2a16:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 30f4 <continueFunction+0xebc>
				KPrintF((ERROR_INDEX_NONSTACK));
    2a1a:	|  |  |  |  |  |  |  |                             \-------> pea 13adf <custom.c.40d35411+0x1b1>
    2a20:	|  |  |  |  |  |  |  |                                       jsr 12a04 <KPrintF>
    2a26:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    2a28:	|  |  |  |  |  |  |  |                                       clr.w d0
    2a2a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 30f4 <continueFunction+0xebc>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2a2e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2a32:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2a36:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2a3a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2a3c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2a3e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2a40:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2a44:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    2a48:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2a4a:	|  |  |  |  |  |  |  |                                       jsr 109b0 <getValueType>
    2a50:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2a54:	|  |  |  |  |  |  |  |                                       tst.w d0
    2a56:	|  |  |  |  |  |  |  |                                   /-- bne.s 2a5e <continueFunction+0x826>
    2a58:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2a5a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 30f4 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2a5e:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    2a62:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2a64:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2a68:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2a6a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2a6e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2a70:	|  |  |  |  |  |  |  |                                       jsr 112a2 <setVariable>
    2a76:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    2a7a:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    2a7e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2a80:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2a82:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2a86:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2a8a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2a8e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2a90:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2a92:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2a94:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2a98:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2a9a:	|  |  |  |  |  |  |  |                                       jsr 112a2 <setVariable>
    2aa0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2aa4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2aa8:	|  |  |  |  |  |  |  |                                       move.l 19bfe <globalVars>,d1
    2aae:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2ab2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2ab4:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2ab6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ab8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2abc:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    2ac0:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2ac2:	|  |  |  |  |  |  |  |                                       jsr 109b0 <getValueType>
    2ac8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2acc:	|  |  |  |  |  |  |  |                                       tst.w d0
    2ace:	|  |  |  |  |  |  |  |                                   /-- bne.s 2ad6 <continueFunction+0x89e>
    2ad0:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2ad2:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 30f4 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2ad6:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    2ada:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2adc:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2ae0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2ae2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2ae6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ae8:	|  |  |  |  |  |  |  |                                       jsr 112a2 <setVariable>
    2aee:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2af2:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    2af6:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2af8:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2afa:	|  |  |  |  |  |  |  |                                       movea.l 19bfe <globalVars>,a0
    2b00:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b04:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2b06:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2b08:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2b0a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b0e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b10:	|  |  |  |  |  |  |  |                                       jsr 112a2 <setVariable>
    2b16:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2b1a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2b1e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2b22:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2b26:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b2a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2b2c:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2b2e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b30:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b34:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    2b38:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2b3a:	|  |  |  |  |  |  |  |                                       jsr 109b0 <getValueType>
    2b40:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2b44:	|  |  |  |  |  |  |  |                                       tst.w d0
    2b46:	|  |  |  |  |  |  |  |                                   /-- bne.s 2b4e <continueFunction+0x916>
    2b48:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2b4a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 30f4 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2b4e:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2b52:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2b54:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2b58:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2b5a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b5e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b60:	|  |  |  |  |  |  |  |                                       jsr 112a2 <setVariable>
    2b66:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    2b6a:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    2b6e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2b70:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2b72:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2b76:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    2b7a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2b7e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2b80:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2b82:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2b84:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2b88:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2b8a:	|  |  |  |  |  |  |  |                                       jsr 112a2 <setVariable>
    2b90:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2b94:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2b98:	|  |  |  |  |  |  |  |                                       move.l 19bfe <globalVars>,d1
    2b9e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2ba2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2ba4:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2ba6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2ba8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2bac:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    2bb0:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2bb2:	|  |  |  |  |  |  |  |                                       jsr 109b0 <getValueType>
    2bb8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2bbc:	|  |  |  |  |  |  |  |                                       tst.w d0
    2bbe:	|  |  |  |  |  |  |  |                                   /-- bne.s 2bc6 <continueFunction+0x98e>
    2bc0:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2bc2:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 30f4 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, ii);
    2bc6:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    2bca:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2bcc:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2bd0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2bd2:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2bd6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2bd8:	|  |  |  |  |  |  |  |                                       jsr 112a2 <setVariable>
    2bde:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    2be2:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    2be6:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2be8:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2bea:	|  |  |  |  |  |  |  |                                       movea.l 19bfe <globalVars>,a0
    2bf0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2bf4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2bf6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2bf8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2bfa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2bfe:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c00:	|  |  |  |  |  |  |  |                                       jsr 112a2 <setVariable>
    2c06:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2c0a:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    2c0e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2c12:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2c16:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2c1a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2c1c:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    2c1e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2c20:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2c24:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2c26:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2c28:	|  |  |  |  |  |  |  |                                       jsr 10e6a <copyVariable>
    2c2e:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    2c30:	|  |  |  |  |  |  |  |                                       tst.w d0
    2c32:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 30bc <continueFunction+0xe84>
    2c36:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    2c38:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 30f4 <continueFunction+0xebc>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    2c3c:	|  |  |  |  |  |  |  |  |                                    move.l 19bfe <globalVars>,d1
    2c42:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    2c46:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    2c48:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    2c4a:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    2c4c:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    2c50:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    2c52:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    2c54:	|  |  |  |  |  |  |  |  |                                    jsr 10e6a <copyVariable>
    2c5a:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    2c5c:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    2c5e:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 30c0 <continueFunction+0xe88>
    2c62:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    2c64:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 30f4 <continueFunction+0xebc>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    2c68:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    2c6a:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    2c6e:	|  |  |  |  |  |  |  |  |  |                                 movea.l 19bfe <globalVars>,a0
    2c74:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    2c78:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    2c7a:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    2c7c:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    2c7e:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    2c80:	|  |  |  |  |  |  |  |  |  |                                 jsr 10e6a <copyVariable>
    2c86:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    2c88:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    2c8a:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 30c4 <continueFunction+0xe8c>
    2c8e:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    2c90:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 30f4 <continueFunction+0xebc>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    2c94:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    2c96:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    2c9a:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    2c9c:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    2ca0:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    2ca2:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    2ca4:	|  |  |  |  |  |  |  |  |  |  |                              jsr 101ec <addVarToStack>
    2caa:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    2cac:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    2cae:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 30c8 <continueFunction+0xe90>
    2cb2:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    2cb4:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 30f4 <continueFunction+0xebc>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    2cb8:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    2cba:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    2cbe:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    2cc0:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    2cc4:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    2cc6:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    2cc8:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 10272 <addVarToStackQuick>
    2cce:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    2cd0:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    2cd2:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 30cc <continueFunction+0xe94>
    2cd6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    2cd8:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 30f4 <continueFunction+0xebc>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    2cdc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2cde:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2ce2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2ce4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 10ef0 <getBoolean>
    2cea:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2cec:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2cee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    2cf0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    2cf2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    2cf4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    2cf6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2cf8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2cfc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    2cfe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    2d02:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2d04:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 112a2 <setVariable>
    2d0a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    2d0e:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    2d12:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2d14:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2d18:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 10ef0 <getBoolean>
    2d20:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2d22:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2d24:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 30d0 <continueFunction+0xe98>
				advanceNow = FALSE;
    2d28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    2d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2d30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    2d36:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 30d0 <continueFunction+0xe98>

			case SLU_BRANCH:
			advanceNow = FALSE;
    2d3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    2d3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2d42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    2d48:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 30d2 <continueFunction+0xe9a>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    2d4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2d4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2d52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2d54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2d58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    2d5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    2d5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 109b0 <getValueType>
    2d64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    2d68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    2d6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 2d72 <continueFunction+0xb3a>
    2d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    2d6e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 30f4 <continueFunction+0xebc>
				setVariable (&fun -> reg, SVT_INT, -i);
    2d72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    2d76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    2d78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    2d7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2d7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2d80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    2d82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2d86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2d88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 112a2 <setVariable>
    2d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    2d92:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 30d2 <continueFunction+0xe9a>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    2d96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2d9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    2d9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 3088 <continueFunction+0xe50>
    2da2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    2da4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    2da8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 2e24 <continueFunction+0xbec>
    2daa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    2dac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    2db0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 2e6e <continueFunction+0xc36>
    2db4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    2db6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    2dba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 2dc8 <continueFunction+0xb90>
    2dbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    2dbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    2dc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 2df6 <continueFunction+0xbbe>
    2dc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 2e6e <continueFunction+0xc36>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    2dc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    2dca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    2dce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    2dd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    2dd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2dd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    2dda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 102e6 <addVariablesInSecond>
    2de0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    2de2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    2de4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    2de8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2dea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 11334 <trimStack>
    2df0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    2df2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 309c <continueFunction+0xe64>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2df6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    2df8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2dfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    2e00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    2e04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2e06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    2e08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 103a4 <compareVariablesInSecond>
    2e0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    2e10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    2e12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2e16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2e18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 11334 <trimStack>
    2e1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    2e20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 309c <continueFunction+0xe64>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2e24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    2e26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2e2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2e2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    2e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2e34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    2e36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 103a4 <compareVariablesInSecond>
    2e3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    2e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    2e40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2e44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2e46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 11334 <trimStack>
    2e4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    2e4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2e52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    2e56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    2e58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    2e5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    2e5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    2e62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    2e6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 309c <continueFunction+0xe64>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    2e6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    2e72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    2e76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2e78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    2e80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2e82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 109b0 <getValueType>
    2e88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    2e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    2e8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 2e96 <continueFunction+0xc5e>
    2e90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2e92:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 30f4 <continueFunction+0xebc>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    2e96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    2e98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    2e9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2ea2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    2ea6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 109b0 <getValueType>
    2eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    2eb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    2eb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 2ebc <continueFunction+0xc84>
    2eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2eb8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 30f4 <continueFunction+0xebc>
					trimStack (&fun -> stack);
    2ebc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    2ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    2ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2ec4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 11334 <trimStack>
    2eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    2ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    2ece:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    2ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    2ed4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    2ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 309a <continueFunction+0xe62>
    2eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    2edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    2ede:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #12010,a0
    2ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    2ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (2eea <continueFunction+0xcb2>,pc,d0.w)
    2eea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    2eee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    2ef0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    2efa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    2f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    2f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 133b6 <__mulsi3>
    2f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2f2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2f38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 112a2 <setVariable>
    2f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 309c <continueFunction+0xe64>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    2f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2f54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    2f56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2f62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2f64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 112a2 <setVariable>
    2f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 309c <continueFunction+0xe64>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    2f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2f7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13462 <__modsi3>
    2f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2f86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2f8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2f96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 112a2 <setVariable>
    2f9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 309c <continueFunction+0xe64>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2fac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2fae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13434 <__divsi3>
    2fb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2fc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 112a2 <setVariable>
    2fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 309c <continueFunction+0xe64>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    2fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2fda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    2fe2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2fe6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2fea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2ff4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 112a2 <setVariable>
    2ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3000:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 309c <continueFunction+0xe64>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    3004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3008:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    300c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    300e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    3010:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    3012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3014:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    301c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    301e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    3022:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 112a2 <setVariable>
    302a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    302e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 309c <continueFunction+0xe64>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    3030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3038:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    303a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    303c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    303e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    3040:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    3042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    304a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    304e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 112a2 <setVariable>
    3056:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    305a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 309c <continueFunction+0xe64>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    305c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    3060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    3064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    3066:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    3068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    306a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    306c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    306e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    3070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    3074:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    3076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    307a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    307c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 112a2 <setVariable>
    3082:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    3086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 309c <continueFunction+0xe64>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    3088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 13b24 <custom.c.40d35411+0x1f6>
    308e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 12a04 <KPrintF>
    3094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    3096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    3098:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 30f4 <continueFunction+0xebc>
						break;
    309a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    309c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 30d2 <continueFunction+0xe9a>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    309e:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 13b3c <custom.c.40d35411+0x20e>
    30a4:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 12a04 <KPrintF>
    30aa:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    30ac:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    30ae:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 30f4 <continueFunction+0xebc>
			break;
    30b0:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    30b2:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 30d2 <continueFunction+0xe9a>
			break;
    30b4:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    30b6:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 30d2 <continueFunction+0xe9a>
			break;
    30b8:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    30ba:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 30d2 <continueFunction+0xe9a>
			break;
    30bc:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    30be:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 30d2 <continueFunction+0xe9a>
			break;
    30c0:	|  |  |     |              \--|--|--|--|-------------------> nop
    30c2:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 30d2 <continueFunction+0xe9a>
			break;
    30c4:	|  |  |     |                 \--|--|--|-------------------> nop
    30c6:	|  |  |     +--------------------|--|--|-------------------- bra.s 30d2 <continueFunction+0xe9a>
			break;
    30c8:	|  |  |     |                    \--|--|-------------------> nop
    30ca:	|  |  |     +-----------------------|--|-------------------- bra.s 30d2 <continueFunction+0xe9a>
			break;
    30cc:	|  |  |     |                       \--|-------------------> nop
    30ce:	|  |  |     +--------------------------|-------------------- bra.s 30d2 <continueFunction+0xe9a>
			break;
    30d0:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    30d2:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    30d6:	+--|--|----------------------------------------------------- beq.s 30ea <continueFunction+0xeb2>
    30d8:	|  |  |                                                      movea.l 80(sp),a0
    30dc:	|  |  |                                                      move.l 36(a0),d0
    30e0:	|  |  |                                                      addq.l #1,d0
    30e2:	|  |  |                                                      movea.l 80(sp),a0
    30e6:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    30ea:	\--|--|----------------------------------------------------> tst.w 74(sp)
    30ee:	   |  \----------------------------------------------------- bne.w 2260 <continueFunction+0x28>

	}
	return TRUE;
    30f2:	   |                                                         moveq #1,d0
}
    30f4:	   \-------------------------------------------------------> lea 76(sp),sp
    30f8:	                                                             rts

000030fa <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    30fa:	       lea -16(sp),sp
    30fe:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    3100:	       move.l 24(sp),-(sp)
    3104:	       jsr 3f8a <pauseFunction>
    310a:	       addq.l #4,sp
	if (fun -> stack) 
    310c:	       movea.l 24(sp),a0
    3110:	       move.l 24(a0),d0
    3114:	   /-- beq.s 312a <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    3116:	   |   pea 13b68 <custom.c.40d35411+0x23a>
    311c:	   |   pea 13b95 <custom.c.40d35411+0x267>
    3122:	   |   jsr 12a04 <KPrintF>
    3128:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    312a:	   \-> movea.l 24(sp),a0
    312e:	       move.l 4(a0),12(sp)
    3134:	       move.l 19c4c <SysBase>,d0
    313a:	       movea.l d0,a6
    313c:	       movea.l 12(sp),a1
    3140:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    3144:	       clr.l 16(sp)
    3148:	   /-- bra.s 3168 <finishFunction+0x6e>
    314a:	/--|-> movea.l 24(sp),a0
    314e:	|  |   move.l 20(a0),d1
    3152:	|  |   move.l 16(sp),d0
    3156:	|  |   lsl.l #3,d0
    3158:	|  |   add.l d1,d0
    315a:	|  |   move.l d0,-(sp)
    315c:	|  |   jsr 10bfe <unlinkVar>
    3162:	|  |   addq.l #4,sp
    3164:	|  |   addq.l #1,16(sp)
    3168:	|  \-> movea.l 24(sp),a0
    316c:	|      move.l 8(a0),d0
    3170:	|      cmp.l 16(sp),d0
    3174:	\----- bgt.s 314a <finishFunction+0x50>
	if( fun->numLocals > 0) {
    3176:	       movea.l 24(sp),a0
    317a:	       move.l 8(a0),d0
    317e:	   /-- ble.s 319a <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    3180:	   |   movea.l 24(sp),a0
    3184:	   |   move.l 20(a0),8(sp)
    318a:	   |   move.l 19c4c <SysBase>,d0
    3190:	   |   movea.l d0,a6
    3192:	   |   movea.l 8(sp),a1
    3196:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    319a:	   \-> moveq #28,d0
    319c:	       add.l 24(sp),d0
    31a0:	       move.l d0,-(sp)
    31a2:	       jsr 10bfe <unlinkVar>
    31a8:	       addq.l #4,sp
	FreeVec(fun);
    31aa:	       move.l 24(sp),4(sp)
    31b0:	       move.l 19c4c <SysBase>,d0
    31b6:	       movea.l d0,a6
    31b8:	       movea.l 4(sp),a1
    31bc:	       jsr -690(a6)
	fun = NULL;
    31c0:	       clr.l 24(sp)
}
    31c4:	       nop
    31c6:	       movea.l (sp)+,a6
    31c8:	       lea 16(sp),sp
    31cc:	       rts

000031ce <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    31ce:	jsr 3fe6 <runSludge>
}
    31d4:	rts

000031d6 <initSludge>:

BOOL initSludge (char * filename) {
    31d6:	             lea -296(sp),sp
    31da:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    31de:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    31e2:	             jsr 72c6 <makeNullAnim>
    31e8:	             move.l d0,19b2c <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    31ee:	             pea 19bfa <gameVersion>
    31f4:	             pea 13ba5 <custom.c.40d35411+0x277>
    31fa:	             pea 45 <_start+0x45>
    31fe:	             pea 47 <_start+0x47>
    3202:	             move.l 336(sp),-(sp)
    3206:	             jsr 3c1a <openAndVerify>
    320c:	             lea 20(sp),sp
    3210:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    3214:	         /-- bne.s 321c <initSludge+0x46>
    3216:	         |   clr.w d0
    3218:	/--------|-- bra.w 393a <initSludge+0x764>
	if (FGetC (fp)) {
    321c:	|        \-> move.l 292(sp),288(sp)
    3222:	|            move.l 19c54 <DOSBase>,d0
    3228:	|            movea.l d0,a6
    322a:	|            move.l 288(sp),d1
    322e:	|            jsr -306(a6)
    3232:	|            move.l d0,284(sp)
    3236:	|            move.l 284(sp),d0
    323a:	|  /-------- beq.w 33e0 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    323e:	|  |         move.l 292(sp),-(sp)
    3242:	|  |         jsr 6bc <get2bytes>
    3248:	|  |         addq.l #4,sp
    324a:	|  |         move.l d0,19c20 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    3250:	|  |         move.l 19c20 <numBIFNames>,d0
    3256:	|  |         move.l d0,280(sp)
    325a:	|  |         clr.l 276(sp)
    325e:	|  |         move.l 19c4c <SysBase>,d0
    3264:	|  |         movea.l d0,a6
    3266:	|  |         move.l 280(sp),d0
    326a:	|  |         move.l 276(sp),d1
    326e:	|  |         jsr -684(a6)
    3272:	|  |         move.l d0,272(sp)
    3276:	|  |         move.l 272(sp),d0
    327a:	|  |         move.l d0,19be0 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    3280:	|  |         move.l 19be0 <allBIFNames>,d0
    3286:	|  |     /-- bne.s 328e <initSludge+0xb8>
    3288:	|  |     |   clr.w d0
    328a:	+--|-----|-- bra.w 393a <initSludge+0x764>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    328e:	|  |     \-> clr.l 308(sp)
    3292:	|  |     /-- bra.s 32b8 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    3294:	|  |  /--|-> move.l 19be0 <allBIFNames>,d1
    329a:	|  |  |  |   move.l 308(sp),d0
    329e:	|  |  |  |   add.l d0,d0
    32a0:	|  |  |  |   add.l d0,d0
    32a2:	|  |  |  |   movea.l d1,a2
    32a4:	|  |  |  |   adda.l d0,a2
    32a6:	|  |  |  |   move.l 292(sp),-(sp)
    32aa:	|  |  |  |   jsr b02 <readString>
    32b0:	|  |  |  |   addq.l #4,sp
    32b2:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    32b4:	|  |  |  |   addq.l #1,308(sp)
    32b8:	|  |  |  \-> move.l 19c20 <numBIFNames>,d0
    32be:	|  |  |      cmp.l 308(sp),d0
    32c2:	|  |  \----- bgt.s 3294 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    32c4:	|  |         move.l 292(sp),-(sp)
    32c8:	|  |         jsr 6bc <get2bytes>
    32ce:	|  |         addq.l #4,sp
    32d0:	|  |         move.l d0,19c2c <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    32d6:	|  |         move.l 19c2c <numUserFunc>,d0
    32dc:	|  |         move.l d0,268(sp)
    32e0:	|  |         clr.l 264(sp)
    32e4:	|  |         move.l 19c4c <SysBase>,d0
    32ea:	|  |         movea.l d0,a6
    32ec:	|  |         move.l 268(sp),d0
    32f0:	|  |         move.l 264(sp),d1
    32f4:	|  |         jsr -684(a6)
    32f8:	|  |         move.l d0,260(sp)
    32fc:	|  |         move.l 260(sp),d0
    3300:	|  |         move.l d0,19bec <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    3306:	|  |         move.l 19bec <allUserFunc>,d0
    330c:	|  |     /-- bne.s 3314 <initSludge+0x13e>
    330e:	|  |     |   clr.w d0
    3310:	+--|-----|-- bra.w 393a <initSludge+0x764>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    3314:	|  |     \-> clr.l 304(sp)
    3318:	|  |     /-- bra.s 333e <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    331a:	|  |  /--|-> move.l 19bec <allUserFunc>,d1
    3320:	|  |  |  |   move.l 304(sp),d0
    3324:	|  |  |  |   add.l d0,d0
    3326:	|  |  |  |   add.l d0,d0
    3328:	|  |  |  |   movea.l d1,a2
    332a:	|  |  |  |   adda.l d0,a2
    332c:	|  |  |  |   move.l 292(sp),-(sp)
    3330:	|  |  |  |   jsr b02 <readString>
    3336:	|  |  |  |   addq.l #4,sp
    3338:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    333a:	|  |  |  |   addq.l #1,304(sp)
    333e:	|  |  |  \-> move.l 19c2c <numUserFunc>,d0
    3344:	|  |  |      cmp.l 304(sp),d0
    3348:	|  |  \----- bgt.s 331a <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    334a:	|  |         move.l 19bfa <gameVersion>,d0
    3350:	|  |         cmpi.l #258,d0
    3356:	|  +-------- ble.w 33e0 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    335a:	|  |         move.l 292(sp),-(sp)
    335e:	|  |         jsr 6bc <get2bytes>
    3364:	|  |         addq.l #4,sp
    3366:	|  |         move.l d0,19c28 <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    336c:	|  |         move.l 19c28 <numResourceNames>,d0
    3372:	|  |         move.l d0,256(sp)
    3376:	|  |         clr.l 252(sp)
    337a:	|  |         move.l 19c4c <SysBase>,d0
    3380:	|  |         movea.l d0,a6
    3382:	|  |         move.l 256(sp),d0
    3386:	|  |         move.l 252(sp),d1
    338a:	|  |         jsr -684(a6)
    338e:	|  |         move.l d0,248(sp)
    3392:	|  |         move.l 248(sp),d0
    3396:	|  |         move.l d0,19be4 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    339c:	|  |         move.l 19be4 <allResourceNames>,d0
    33a2:	|  |     /-- bne.s 33aa <initSludge+0x1d4>
    33a4:	|  |     |   clr.w d0
    33a6:	+--|-----|-- bra.w 393a <initSludge+0x764>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    33aa:	|  |     \-> clr.l 300(sp)
    33ae:	|  |     /-- bra.s 33d4 <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    33b0:	|  |  /--|-> move.l 19be4 <allResourceNames>,d1
    33b6:	|  |  |  |   move.l 300(sp),d0
    33ba:	|  |  |  |   add.l d0,d0
    33bc:	|  |  |  |   add.l d0,d0
    33be:	|  |  |  |   movea.l d1,a2
    33c0:	|  |  |  |   adda.l d0,a2
    33c2:	|  |  |  |   move.l 292(sp),-(sp)
    33c6:	|  |  |  |   jsr b02 <readString>
    33cc:	|  |  |  |   addq.l #4,sp
    33ce:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    33d0:	|  |  |  |   addq.l #1,300(sp)
    33d4:	|  |  |  \-> move.l 19c28 <numResourceNames>,d0
    33da:	|  |  |      cmp.l 300(sp),d0
    33de:	|  |  \----- bgt.s 33b0 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    33e0:	|  \-------> move.l 292(sp),-(sp)
    33e4:	|            jsr 6bc <get2bytes>
    33ea:	|            addq.l #4,sp
    33ec:	|            move.l d0,19b4c <winWidth>
	winHeight = get2bytes (fp);
    33f2:	|            move.l 292(sp),-(sp)
    33f6:	|            jsr 6bc <get2bytes>
    33fc:	|            addq.l #4,sp
    33fe:	|            move.l d0,19b50 <winHeight>
	specialSettings = FGetC (fp);
    3404:	|            move.l 292(sp),244(sp)
    340a:	|            move.l 19c54 <DOSBase>,d0
    3410:	|            movea.l d0,a6
    3412:	|            move.l 244(sp),d1
    3416:	|            jsr -306(a6)
    341a:	|            move.l d0,240(sp)
    341e:	|            move.l 240(sp),d0
    3422:	|            move.l d0,19c30 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    3428:	|            move.l 292(sp),236(sp)
    342e:	|            move.l 19c54 <DOSBase>,d0
    3434:	|            movea.l d0,a6
    3436:	|            move.l 236(sp),d1
    343a:	|            jsr -306(a6)
    343e:	|            move.l d0,232(sp)
    3442:	|            move.l 232(sp),d0
    3446:	|            move.l d0,-(sp)
    3448:	|            pea 3e8 <encodeFilename+0xea>
    344c:	|            jsr 13434 <__divsi3>
    3452:	|            addq.l #8,sp
    3454:	|            move.l d0,1813a <desiredfps>

	FreeVec(readString (fp));
    345a:	|            move.l 292(sp),-(sp)
    345e:	|            jsr b02 <readString>
    3464:	|            addq.l #4,sp
    3466:	|            move.l d0,228(sp)
    346a:	|            move.l 19c4c <SysBase>,d0
    3470:	|            movea.l d0,a6
    3472:	|            movea.l 228(sp),a1
    3476:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    347a:	|            move.l 292(sp),224(sp)
    3480:	|            move.l #105458,220(sp)
    3488:	|            moveq #8,d0
    348a:	|            move.l d0,216(sp)
    348e:	|            moveq #1,d1
    3490:	|            move.l d1,212(sp)
    3494:	|            move.l 19c54 <DOSBase>,d0
    349a:	|            movea.l d0,a6
    349c:	|            move.l 224(sp),d1
    34a0:	|            move.l 220(sp),d2
    34a4:	|            move.l 216(sp),d3
    34a8:	|            move.l 212(sp),d4
    34ac:	|            jsr -324(a6)
    34b0:	|            move.l d0,208(sp)
    34b4:	|            move.l 208(sp),d0
    34b8:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    34bc:	|            moveq #1,d0
    34be:	|            cmp.l 204(sp),d0
    34c2:	|        /-- beq.s 34d2 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    34c4:	|        |   pea 13bde <custom.c.40d35411+0x2b0>
    34ca:	|        |   jsr 12a04 <KPrintF>
    34d0:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    34d2:	|        \-> move.l 19bfa <gameVersion>,d0
    34d8:	|            cmpi.l #258,d0
    34de:	|        /-- ble.s 34ee <initSludge+0x318>
    34e0:	|        |   move.l 292(sp),-(sp)
    34e4:	|        |   jsr b02 <readString>
    34ea:	|        |   addq.l #4,sp
    34ec:	|     /--|-- bra.s 3502 <initSludge+0x32c>
    34ee:	|     |  \-> pea 13bfc <custom.c.40d35411+0x2ce>
    34f4:	|     |      pea 13bfc <custom.c.40d35411+0x2ce>
    34fa:	|     |      jsr fedc <joinStrings>
    3500:	|     |      addq.l #8,sp
    3502:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    3506:	|            move.l 19bfa <gameVersion>,d0
    350c:	|            cmpi.l #258,d0
    3512:	|     /----- ble.s 3534 <initSludge+0x35e>
    3514:	|     |      move.l 292(sp),196(sp)
    351a:	|     |      move.l 19c54 <DOSBase>,d0
    3520:	|     |      movea.l d0,a6
    3522:	|     |      move.l 196(sp),d1
    3526:	|     |      jsr -306(a6)
    352a:	|     |      move.l d0,192(sp)
    352e:	|     |      move.l 192(sp),d0
    3532:	|     |  /-- bra.s 3536 <initSludge+0x360>
    3534:	|     \--|-> moveq #0,d0
    3536:	|        \-> move.l d0,19d28 <gameSettings+0x4>
	makeLanguageTable (fp);
    353c:	|            move.l 292(sp),-(sp)
    3540:	|            jsr f8ae <makeLanguageTable>
    3546:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    3548:	|            move.l 19bfa <gameVersion>,d0
    354e:	|            cmpi.l #261,d0
    3554:	|        /-- ble.s 35a2 <initSludge+0x3cc>
	{
		FGetC(fp);
    3556:	|        |   move.l 292(sp),188(sp)
    355c:	|        |   move.l 19c54 <DOSBase>,d0
    3562:	|        |   movea.l d0,a6
    3564:	|        |   move.l 188(sp),d1
    3568:	|        |   jsr -306(a6)
    356c:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    3570:	|        |   move.l 292(sp),180(sp)
    3576:	|        |   move.l 19c54 <DOSBase>,d0
    357c:	|        |   movea.l d0,a6
    357e:	|        |   move.l 180(sp),d1
    3582:	|        |   jsr -306(a6)
    3586:	|        |   move.l d0,176(sp)
		getFloat (fp);
    358a:	|        |   move.l 292(sp),-(sp)
    358e:	|        |   jsr 7d8 <getFloat>
    3594:	|        |   addq.l #4,sp
		getFloat (fp);
    3596:	|        |   move.l 292(sp),-(sp)
    359a:	|        |   jsr 7d8 <getFloat>
    35a0:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    35a2:	|        \-> move.l 292(sp),-(sp)
    35a6:	|            jsr b02 <readString>
    35ac:	|            addq.l #4,sp
    35ae:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    35b2:	|            pea 13bfd <custom.c.40d35411+0x2cf>
    35b8:	|            move.l 176(sp),-(sp)
    35bc:	|            jsr fe5c <strcmp>
    35c2:	|            addq.l #8,sp
    35c4:	|            tst.l d0
    35c6:	|        /-- beq.s 35ce <initSludge+0x3f8>
		return FALSE;
    35c8:	|        |   clr.w d0
    35ca:	+--------|-- bra.w 393a <initSludge+0x764>
	}
	FreeVec( checker);
    35ce:	|        \-> move.l 172(sp),168(sp)
    35d4:	|            move.l 19c4c <SysBase>,d0
    35da:	|            movea.l d0,a6
    35dc:	|            movea.l 168(sp),a1
    35e0:	|            jsr -690(a6)
	checker = NULL;
    35e4:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    35e8:	|            move.l 292(sp),164(sp)
    35ee:	|            move.l 19c54 <DOSBase>,d0
    35f4:	|            movea.l d0,a6
    35f6:	|            move.l 164(sp),d1
    35fa:	|            jsr -306(a6)
    35fe:	|            move.l d0,160(sp)
    3602:	|            move.l 160(sp),d0
    3606:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    360a:	|            moveq #0,d0
    360c:	|            move.b 159(sp),d0
    3610:	|            moveq #1,d1
    3612:	|            and.l d1,d0
    3614:	|        /-- beq.s 366c <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    3616:	|        |   move.l 19c54 <DOSBase>,d0
    361c:	|        |   movea.l d0,a6
    361e:	|        |   jsr -60(a6)
    3622:	|        |   move.l d0,38(sp)
    3626:	|        |   move.l 38(sp),d0
    362a:	|        |   move.l d0,34(sp)
    362e:	|        |   move.l #80901,30(sp)
    3636:	|        |   moveq #54,d0
    3638:	|        |   move.l d0,26(sp)
    363c:	|        |   move.l 19c54 <DOSBase>,d0
    3642:	|        |   movea.l d0,a6
    3644:	|        |   move.l 34(sp),d1
    3648:	|        |   move.l 30(sp),d2
    364c:	|        |   move.l 26(sp),d3
    3650:	|        |   jsr -48(a6)
    3654:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    3658:	|        |   pea 13c3c <custom.c.40d35411+0x30e>
    365e:	|        |   jsr 12a04 <KPrintF>
    3664:	|        |   addq.l #4,sp
		return FALSE;
    3666:	|        |   clr.w d0
    3668:	+--------|-- bra.w 393a <initSludge+0x764>
	}

	numGlobals = get2bytes (fp);
    366c:	|        \-> move.l 292(sp),-(sp)
    3670:	|            jsr 6bc <get2bytes>
    3676:	|            addq.l #4,sp
    3678:	|            move.l d0,19c24 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    367e:	|            move.l 19c24 <numGlobals>,d0
    3684:	|            lsl.l #3,d0
    3686:	|            move.l d0,154(sp)
    368a:	|            clr.l 150(sp)
    368e:	|            move.l 19c4c <SysBase>,d0
    3694:	|            movea.l d0,a6
    3696:	|            move.l 154(sp),d0
    369a:	|            move.l 150(sp),d1
    369e:	|            jsr -684(a6)
    36a2:	|            move.l d0,146(sp)
    36a6:	|            move.l 146(sp),d0
    36aa:	|            move.l d0,19bfe <globalVars>
	if(globalVars == 0) {
    36b0:	|            move.l 19bfe <globalVars>,d0
    36b6:	|        /-- bne.s 36cc <initSludge+0x4f6>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    36b8:	|        |   pea 13c74 <custom.c.40d35411+0x346>
    36be:	|        |   jsr 12a04 <KPrintF>
    36c4:	|        |   addq.l #4,sp
		return FALSE;
    36c6:	|        |   clr.w d0
    36c8:	+--------|-- bra.w 393a <initSludge+0x764>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    36cc:	|        \-> clr.l 312(sp)
    36d0:	|        /-- bra.s 36e8 <initSludge+0x512>
    36d2:	|     /--|-> move.l 19bfe <globalVars>,d1
    36d8:	|     |  |   move.l 312(sp),d0
    36dc:	|     |  |   lsl.l #3,d0
    36de:	|     |  |   movea.l d1,a0
    36e0:	|     |  |   adda.l d0,a0
    36e2:	|     |  |   clr.l (a0)
    36e4:	|     |  |   addq.l #1,312(sp)
    36e8:	|     |  \-> move.l 19c24 <numGlobals>,d0
    36ee:	|     |      cmp.l 312(sp),d0
    36f2:	|     \----- bgt.s 36d2 <initSludge+0x4fc>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    36f4:	|            move.l 19d28 <gameSettings+0x4>,d0
    36fa:	|            clr.l -(sp)
    36fc:	|            move.l d0,-(sp)
    36fe:	|            move.l 300(sp),-(sp)
    3702:	|            jsr 46b4 <setFileIndices>
    3708:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    370c:	|            pea 1 <_start+0x1>
    3710:	|            jsr 436e <getNumberedString>
    3716:	|            addq.l #4,sp
    3718:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    371c:	|            move.l 142(sp),-(sp)
    3720:	|            jsr 2fe <encodeFilename>
    3726:	|            addq.l #4,sp
    3728:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    372c:	|            move.l 142(sp),134(sp)
    3732:	|            move.l 19c4c <SysBase>,d0
    3738:	|            movea.l d0,a6
    373a:	|            movea.l 134(sp),a1
    373e:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    3742:	|            move.l 138(sp),130(sp)
    3748:	|            move.l 19c54 <DOSBase>,d0
    374e:	|            movea.l d0,a6
    3750:	|            move.l 130(sp),d1
    3754:	|            jsr -120(a6)
    3758:	|            move.l d0,126(sp)
    375c:	|            move.l 126(sp),d0
    3760:	|            move.l d0,296(sp)
	if(lock == 0) {
    3764:	|        /-- bne.s 3792 <initSludge+0x5bc>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    3766:	|        |   move.l 138(sp),122(sp)
    376c:	|        |   moveq #-2,d1
    376e:	|        |   move.l d1,118(sp)
    3772:	|        |   move.l 19c54 <DOSBase>,d0
    3778:	|        |   movea.l d0,a6
    377a:	|        |   move.l 122(sp),d1
    377e:	|        |   move.l 118(sp),d2
    3782:	|        |   jsr -84(a6)
    3786:	|        |   move.l d0,114(sp)
    378a:	|        |   move.l 114(sp),d0
    378e:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    3792:	|        \-> move.l 296(sp),110(sp)
    3798:	|            move.l 19c54 <DOSBase>,d0
    379e:	|            movea.l d0,a6
    37a0:	|            move.l 110(sp),d1
    37a4:	|            jsr -126(a6)
    37a8:	|            move.l d0,106(sp)
    37ac:	|            move.l 106(sp),d0
    37b0:	|        /-- bne.s 380c <initSludge+0x636>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    37b2:	|        |   move.l 138(sp),-(sp)
    37b6:	|        |   pea 13ca7 <custom.c.40d35411+0x379>
    37bc:	|        |   jsr 12a04 <KPrintF>
    37c2:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    37c4:	|        |   move.l 19c54 <DOSBase>,d0
    37ca:	|        |   movea.l d0,a6
    37cc:	|        |   jsr -60(a6)
    37d0:	|        |   move.l d0,58(sp)
    37d4:	|        |   move.l 58(sp),d0
    37d8:	|        |   move.l d0,54(sp)
    37dc:	|        |   move.l #81108,50(sp)
    37e4:	|        |   moveq #40,d0
    37e6:	|        |   move.l d0,46(sp)
    37ea:	|        |   move.l 19c54 <DOSBase>,d0
    37f0:	|        |   movea.l d0,a6
    37f2:	|        |   move.l 54(sp),d1
    37f6:	|        |   move.l 50(sp),d2
    37fa:	|        |   move.l 46(sp),d3
    37fe:	|        |   jsr -48(a6)
    3802:	|        |   move.l d0,42(sp)
		return FALSE;
    3806:	|        |   clr.w d0
    3808:	+--------|-- bra.w 393a <initSludge+0x764>
	}

	FreeVec(gameName);
    380c:	|        \-> move.l 138(sp),102(sp)
    3812:	|            move.l 19c4c <SysBase>,d0
    3818:	|            movea.l d0,a6
    381a:	|            movea.l 102(sp),a1
    381e:	|            jsr -690(a6)

	readIniFile (filename);
    3822:	|            move.l 320(sp),-(sp)
    3826:	|            jsr f9e2 <readIniFile>
    382c:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    382e:	|            jsr f7b4 <getLanguageForFileB>
    3834:	|            move.l d0,18120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    383a:	|            move.l 18120 <languageNum>,d0
    3840:	|        /-- bpl.s 3850 <initSludge+0x67a>
    3842:	|        |   pea 13cfd <custom.c.40d35411+0x3cf>
    3848:	|        |   jsr 12a04 <KPrintF>
    384e:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    3850:	|        \-> move.l 18120 <languageNum>,d0
    3856:	|            move.l d0,d1
    3858:	|            move.l 19d28 <gameSettings+0x4>,d0
    385e:	|            move.l d1,-(sp)
    3860:	|            move.l d0,-(sp)
    3862:	|            clr.l -(sp)
    3864:	|            jsr 46b4 <setFileIndices>
    386a:	|            lea 12(sp),sp

	if (dataFol[0]) {
    386e:	|            movea.l 200(sp),a0
    3872:	|            move.b (a0),d0
    3874:	|     /----- beq.w 391e <initSludge+0x748>
		char *dataFolder = encodeFilename(dataFol);
    3878:	|     |      move.l 200(sp),-(sp)
    387c:	|     |      jsr 2fe <encodeFilename>
    3882:	|     |      addq.l #4,sp
    3884:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    3888:	|     |      move.l 98(sp),94(sp)
    388e:	|     |      move.l 19c54 <DOSBase>,d0
    3894:	|     |      movea.l d0,a6
    3896:	|     |      move.l 94(sp),d1
    389a:	|     |      jsr -120(a6)
    389e:	|     |      move.l d0,90(sp)
    38a2:	|     |      move.l 90(sp),d0
    38a6:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    38aa:	|     |  /-- bne.s 38d8 <initSludge+0x702>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    38ac:	|     |  |   move.l 98(sp),86(sp)
    38b2:	|     |  |   moveq #-2,d1
    38b4:	|     |  |   move.l d1,82(sp)
    38b8:	|     |  |   move.l 19c54 <DOSBase>,d0
    38be:	|     |  |   movea.l d0,a6
    38c0:	|     |  |   move.l 86(sp),d1
    38c4:	|     |  |   move.l 82(sp),d2
    38c8:	|     |  |   jsr -84(a6)
    38cc:	|     |  |   move.l d0,78(sp)
    38d0:	|     |  |   move.l 78(sp),d0
    38d4:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    38d8:	|     |  \-> move.l 296(sp),74(sp)
    38de:	|     |      move.l 19c54 <DOSBase>,d0
    38e4:	|     |      movea.l d0,a6
    38e6:	|     |      move.l 74(sp),d1
    38ea:	|     |      jsr -126(a6)
    38ee:	|     |      move.l d0,70(sp)
    38f2:	|     |      move.l 70(sp),d0
    38f6:	|     |  /-- bne.s 3908 <initSludge+0x732>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    38f8:	|     |  |   move.l 19c54 <DOSBase>,d0
    38fe:	|     |  |   movea.l d0,a6
    3900:	|     |  |   jsr -60(a6)
    3904:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    3908:	|     |  \-> move.l 98(sp),62(sp)
    390e:	|     |      move.l 19c4c <SysBase>,d0
    3914:	|     |      movea.l d0,a6
    3916:	|     |      movea.l 62(sp),a1
    391a:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    391e:	|     \----> movea.l 19b50 <winHeight>,a0
    3924:	|            lea -15(a0),a0
    3928:	|            move.l a0,d0
    392a:	|            move.l d0,-(sp)
    392c:	|            pea a <_start+0xa>
    3930:	|            jsr 50c6 <positionStatus>
    3936:	|            addq.l #8,sp

	return TRUE;
    3938:	|            moveq #1,d0
}
    393a:	\----------> movem.l (sp)+,d2-d4/a2/a6
    393e:	             lea 296(sp),sp
    3942:	             rts

00003944 <killSpeechTimers>:

void killSpeechTimers () {
    3944:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    3946:	          move.l 19be8 <allRunningFunctions>,(sp)

	while (thisFunction) {
    394c:	   /----- bra.s 3978 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    394e:	/--|----> movea.l (sp),a0
    3950:	|  |      move.b 56(a0),d0
    3954:	|  |  /-- bne.s 3972 <killSpeechTimers+0x2e>
    3956:	|  |  |   movea.l (sp),a0
    3958:	|  |  |   move.w 50(a0),d0
    395c:	|  |  +-- beq.s 3972 <killSpeechTimers+0x2e>
    395e:	|  |  |   movea.l (sp),a0
    3960:	|  |  |   move.l 12(a0),d0
    3964:	|  |  +-- beq.s 3972 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    3966:	|  |  |   movea.l (sp),a0
    3968:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    396c:	|  |  |   movea.l (sp),a0
    396e:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    3972:	|  |  \-> movea.l (sp),a0
    3974:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    3978:	|  \----> tst.l (sp)
    397a:	\-------- bne.s 394e <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    397c:	          jsr 5604 <killAllSpeech>
}
    3982:	          nop
    3984:	          addq.l #4,sp
    3986:	          rts

00003988 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    3988:	             lea -52(sp),sp
    398c:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    398e:	             movea.l 60(sp),a0
    3992:	             move.l (a0),d0
    3994:	             move.l d0,-(sp)
    3996:	             jsr 45f4 <openSubSlice>
    399c:	             addq.l #4,sp
    399e:	             tst.w d0
    39a0:	         /-- bne.s 39a8 <loadFunctionCode+0x20>
    39a2:	         |   clr.w d0
    39a4:	/--------|-- bra.w 3b72 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    39a8:	|        \-> move.l 19c34 <bigDataFile>,44(sp)
    39b0:	|            move.l 19c54 <DOSBase>,d0
    39b6:	|            movea.l d0,a6
    39b8:	|            move.l 44(sp),d1
    39bc:	|            jsr -306(a6)
    39c0:	|            move.l d0,40(sp)
    39c4:	|            move.l 40(sp),d0
    39c8:	|            move.l d0,d0
    39ca:	|            movea.l 60(sp),a0
    39ce:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    39d2:	|            move.l 19c34 <bigDataFile>,d0
    39d8:	|            move.l d0,-(sp)
    39da:	|            jsr 6bc <get2bytes>
    39e0:	|            addq.l #4,sp
    39e2:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    39e6:	|            move.l 19c34 <bigDataFile>,d0
    39ec:	|            move.l d0,-(sp)
    39ee:	|            jsr 6bc <get2bytes>
    39f4:	|            addq.l #4,sp
    39f6:	|            movea.l 60(sp),a0
    39fa:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    39fe:	|            move.l 19c34 <bigDataFile>,d0
    3a04:	|            move.l d0,-(sp)
    3a06:	|            jsr 6bc <get2bytes>
    3a0c:	|            addq.l #4,sp
    3a0e:	|            movea.l 60(sp),a0
    3a12:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    3a16:	|            move.l 36(sp),d0
    3a1a:	|            lsl.l #3,d0
    3a1c:	|            move.l d0,32(sp)
    3a20:	|            clr.l 28(sp)
    3a24:	|            move.l 19c4c <SysBase>,d0
    3a2a:	|            movea.l d0,a6
    3a2c:	|            move.l 32(sp),d0
    3a30:	|            move.l 28(sp),d1
    3a34:	|            jsr -684(a6)
    3a38:	|            move.l d0,24(sp)
    3a3c:	|            move.l 24(sp),d0
    3a40:	|            movea.l 60(sp),a0
    3a44:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    3a48:	|            movea.l 60(sp),a0
    3a4c:	|            move.l 4(a0),d0
    3a50:	|        /-- bne.s 3a66 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3a52:	|        |   pea 13d28 <custom.c.40d35411+0x3fa>
    3a58:	|        |   jsr 12a04 <KPrintF>
    3a5e:	|        |   addq.l #4,sp
		return FALSE;
    3a60:	|        |   clr.w d0
    3a62:	+--------|-- bra.w 3b72 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3a66:	|        \-> clr.l 52(sp)
    3a6a:	|        /-- bra.s 3acc <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    3a6c:	|     /--|-> move.l 19c34 <bigDataFile>,8(sp)
    3a74:	|     |  |   move.l 19c54 <DOSBase>,d0
    3a7a:	|     |  |   movea.l d0,a6
    3a7c:	|     |  |   move.l 8(sp),d1
    3a80:	|     |  |   jsr -306(a6)
    3a84:	|     |  |   move.l d0,4(sp)
    3a88:	|     |  |   move.l 4(sp),d1
    3a8c:	|     |  |   movea.l 60(sp),a0
    3a90:	|     |  |   movea.l 4(a0),a0
    3a94:	|     |  |   move.l 52(sp),d0
    3a98:	|     |  |   lsl.l #3,d0
    3a9a:	|     |  |   adda.l d0,a0
    3a9c:	|     |  |   move.l d1,d0
    3a9e:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    3aa0:	|     |  |   move.l 19c34 <bigDataFile>,d0
    3aa6:	|     |  |   move.l d0,-(sp)
    3aa8:	|     |  |   jsr 6bc <get2bytes>
    3aae:	|     |  |   addq.l #4,sp
    3ab0:	|     |  |   move.l d0,d1
    3ab2:	|     |  |   movea.l 60(sp),a0
    3ab6:	|     |  |   movea.l 4(a0),a0
    3aba:	|     |  |   move.l 52(sp),d0
    3abe:	|     |  |   lsl.l #3,d0
    3ac0:	|     |  |   adda.l d0,a0
    3ac2:	|     |  |   move.l d1,d0
    3ac4:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3ac8:	|     |  |   addq.l #1,52(sp)
    3acc:	|     |  \-> move.l 52(sp),d0
    3ad0:	|     |      cmp.l 36(sp),d0
    3ad4:	|     \----- bcs.s 3a6c <loadFunctionCode+0xe4>
	}

	finishAccess ();
    3ad6:	|            jsr 4364 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    3adc:	|            movea.l 60(sp),a0
    3ae0:	|            move.l 8(a0),d0
    3ae4:	|  /-------- ble.w 3b68 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    3ae8:	|  |         movea.l 60(sp),a0
    3aec:	|  |         move.l 8(a0),d0
    3af0:	|  |         lsl.l #3,d0
    3af2:	|  |         move.l d0,20(sp)
    3af6:	|  |         clr.l 16(sp)
    3afa:	|  |         move.l 19c4c <SysBase>,d0
    3b00:	|  |         movea.l d0,a6
    3b02:	|  |         move.l 20(sp),d0
    3b06:	|  |         move.l 16(sp),d1
    3b0a:	|  |         jsr -684(a6)
    3b0e:	|  |         move.l d0,12(sp)
    3b12:	|  |         move.l 12(sp),d0
    3b16:	|  |         movea.l 60(sp),a0
    3b1a:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    3b1e:	|  |         movea.l 60(sp),a0
    3b22:	|  |         move.l 20(a0),d0
    3b26:	|  |     /-- bne.s 3b3a <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    3b28:	|  |     |   pea 13d28 <custom.c.40d35411+0x3fa>
    3b2e:	|  |     |   jsr 12a04 <KPrintF>
    3b34:	|  |     |   addq.l #4,sp
			return FALSE;
    3b36:	|  |     |   clr.w d0
    3b38:	+--|-----|-- bra.s 3b72 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    3b3a:	|  |     \-> clr.l 48(sp)
    3b3e:	|  |     /-- bra.s 3b58 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    3b40:	|  |  /--|-> movea.l 60(sp),a0
    3b44:	|  |  |  |   move.l 20(a0),d1
    3b48:	|  |  |  |   move.l 48(sp),d0
    3b4c:	|  |  |  |   lsl.l #3,d0
    3b4e:	|  |  |  |   movea.l d1,a0
    3b50:	|  |  |  |   adda.l d0,a0
    3b52:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3b54:	|  |  |  |   addq.l #1,48(sp)
    3b58:	|  |  |  \-> movea.l 60(sp),a0
    3b5c:	|  |  |      move.l 8(a0),d0
    3b60:	|  |  |      cmp.l 48(sp),d0
    3b64:	|  |  \----- bgt.s 3b40 <loadFunctionCode+0x1b8>
    3b66:	|  |     /-- bra.s 3b70 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    3b68:	|  \-----|-> movea.l 60(sp),a0
    3b6c:	|        |   clr.l 8(a0)
	}
	return TRUE;
    3b70:	|        \-> moveq #1,d0
}
    3b72:	\----------> movea.l (sp)+,a6
    3b74:	             lea 52(sp),sp
    3b78:	             rts

00003b7a <loadHandlers>:

void loadHandlers (BPTR fp) {
    3b7a:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    3b7c:	movea.l 1811c <currentEvents>,a2
    3b82:	move.l 8(sp),-(sp)
    3b86:	jsr 6bc <get2bytes>
    3b8c:	addq.l #4,sp
    3b8e:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    3b90:	movea.l 1811c <currentEvents>,a2
    3b96:	move.l 8(sp),-(sp)
    3b9a:	jsr 6bc <get2bytes>
    3ba0:	addq.l #4,sp
    3ba2:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    3ba6:	movea.l 1811c <currentEvents>,a2
    3bac:	move.l 8(sp),-(sp)
    3bb0:	jsr 6bc <get2bytes>
    3bb6:	addq.l #4,sp
    3bb8:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    3bbc:	movea.l 1811c <currentEvents>,a2
    3bc2:	move.l 8(sp),-(sp)
    3bc6:	jsr 6bc <get2bytes>
    3bcc:	addq.l #4,sp
    3bce:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    3bd2:	movea.l 1811c <currentEvents>,a2
    3bd8:	move.l 8(sp),-(sp)
    3bdc:	jsr 6bc <get2bytes>
    3be2:	addq.l #4,sp
    3be4:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    3be8:	movea.l 1811c <currentEvents>,a2
    3bee:	move.l 8(sp),-(sp)
    3bf2:	jsr 6bc <get2bytes>
    3bf8:	addq.l #4,sp
    3bfa:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    3bfe:	movea.l 1811c <currentEvents>,a2
    3c04:	move.l 8(sp),-(sp)
    3c08:	jsr 6bc <get2bytes>
    3c0e:	addq.l #4,sp
    3c10:	move.l d0,24(a2)
}
    3c14:	nop
    3c16:	movea.l (sp)+,a2
    3c18:	rts

00003c1a <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    3c1a:	       lea -312(sp),sp
    3c1e:	       movem.l d2-d3/a6,-(sp)
    3c22:	       move.l 332(sp),d1
    3c26:	       move.l 336(sp),d0
    3c2a:	       move.b d1,d1
    3c2c:	       move.b d1,16(sp)
    3c30:	       move.b d0,d0
    3c32:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    3c36:	       move.l 328(sp),318(sp)
    3c3c:	       move.l #1005,314(sp)
    3c44:	       move.l 19c54 <DOSBase>,d0
    3c4a:	       movea.l d0,a6
    3c4c:	       move.l 318(sp),d1
    3c50:	       move.l 314(sp),d2
    3c54:	       jsr -30(a6)
    3c58:	       move.l d0,310(sp)
    3c5c:	       move.l 310(sp),d0
    3c60:	       move.l d0,306(sp)

	if (! fp) {
    3c64:	   /-- bne.s 3cc0 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    3c66:	   |   move.l 19c54 <DOSBase>,d0
    3c6c:	   |   movea.l d0,a6
    3c6e:	   |   jsr -60(a6)
    3c72:	   |   move.l d0,154(sp)
    3c76:	   |   move.l 154(sp),d0
    3c7a:	   |   move.l d0,150(sp)
    3c7e:	   |   move.l #81233,146(sp)
    3c86:	   |   moveq #31,d0
    3c88:	   |   move.l d0,142(sp)
    3c8c:	   |   move.l 19c54 <DOSBase>,d0
    3c92:	   |   movea.l d0,a6
    3c94:	   |   move.l 150(sp),d1
    3c98:	   |   move.l 146(sp),d2
    3c9c:	   |   move.l 142(sp),d3
    3ca0:	   |   jsr -48(a6)
    3ca4:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    3ca8:	   |   move.l 328(sp),-(sp)
    3cac:	   |   pea 13d71 <custom.c.40d35411+0x443>
    3cb2:	   |   jsr 12a04 <KPrintF>
    3cb8:	   |   addq.l #8,sp
		return NULL;
    3cba:	   |   moveq #0,d0
    3cbc:	/--|-- bra.w 3f80 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    3cc0:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    3cc4:	|      move.l 306(sp),302(sp)
    3cca:	|      move.l 19c54 <DOSBase>,d0
    3cd0:	|      movea.l d0,a6
    3cd2:	|      move.l 302(sp),d1
    3cd6:	|      jsr -306(a6)
    3cda:	|      move.l d0,298(sp)
    3cde:	|      move.l 298(sp),d0
    3ce2:	|      moveq #83,d1
    3ce4:	|      cmp.l d0,d1
    3ce6:	|  /-- beq.s 3cee <openAndVerify+0xd4>
    3ce8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    3cee:	|  \-> move.l 306(sp),294(sp)
    3cf4:	|      move.l 19c54 <DOSBase>,d0
    3cfa:	|      movea.l d0,a6
    3cfc:	|      move.l 294(sp),d1
    3d00:	|      jsr -306(a6)
    3d04:	|      move.l d0,290(sp)
    3d08:	|      move.l 290(sp),d0
    3d0c:	|      moveq #76,d1
    3d0e:	|      cmp.l d0,d1
    3d10:	|  /-- beq.s 3d18 <openAndVerify+0xfe>
    3d12:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    3d18:	|  \-> move.l 306(sp),286(sp)
    3d1e:	|      move.l 19c54 <DOSBase>,d0
    3d24:	|      movea.l d0,a6
    3d26:	|      move.l 286(sp),d1
    3d2a:	|      jsr -306(a6)
    3d2e:	|      move.l d0,282(sp)
    3d32:	|      move.l 282(sp),d0
    3d36:	|      moveq #85,d1
    3d38:	|      cmp.l d0,d1
    3d3a:	|  /-- beq.s 3d42 <openAndVerify+0x128>
    3d3c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    3d42:	|  \-> move.l 306(sp),278(sp)
    3d48:	|      move.l 19c54 <DOSBase>,d0
    3d4e:	|      movea.l d0,a6
    3d50:	|      move.l 278(sp),d1
    3d54:	|      jsr -306(a6)
    3d58:	|      move.l d0,274(sp)
    3d5c:	|      move.l 274(sp),d0
    3d60:	|      moveq #68,d1
    3d62:	|      cmp.l d0,d1
    3d64:	|  /-- beq.s 3d6c <openAndVerify+0x152>
    3d66:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    3d6c:	|  \-> move.l 306(sp),270(sp)
    3d72:	|      move.l 19c54 <DOSBase>,d0
    3d78:	|      movea.l d0,a6
    3d7a:	|      move.l 270(sp),d1
    3d7e:	|      jsr -306(a6)
    3d82:	|      move.l d0,266(sp)
    3d86:	|      move.l 266(sp),d1
    3d8a:	|      move.b 16(sp),d0
    3d8e:	|      ext.w d0
    3d90:	|      movea.w d0,a0
    3d92:	|      cmpa.l d1,a0
    3d94:	|  /-- beq.s 3d9c <openAndVerify+0x182>
    3d96:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    3d9c:	|  \-> move.l 306(sp),262(sp)
    3da2:	|      move.l 19c54 <DOSBase>,d0
    3da8:	|      movea.l d0,a6
    3daa:	|      move.l 262(sp),d1
    3dae:	|      jsr -306(a6)
    3db2:	|      move.l d0,258(sp)
    3db6:	|      move.l 258(sp),d1
    3dba:	|      move.b 14(sp),d0
    3dbe:	|      ext.w d0
    3dc0:	|      movea.w d0,a0
    3dc2:	|      cmpa.l d1,a0
    3dc4:	|  /-- beq.s 3dcc <openAndVerify+0x1b2>
    3dc6:	|  |   move.w #1,322(sp)
	if (headerBad) {
    3dcc:	|  \-> tst.w 322(sp)
    3dd0:	|  /-- beq.s 3e28 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    3dd2:	|  |   move.l 19c54 <DOSBase>,d0
    3dd8:	|  |   movea.l d0,a6
    3dda:	|  |   jsr -60(a6)
    3dde:	|  |   move.l d0,174(sp)
    3de2:	|  |   move.l 174(sp),d0
    3de6:	|  |   move.l d0,170(sp)
    3dea:	|  |   move.l #81296,166(sp)
    3df2:	|  |   moveq #31,d0
    3df4:	|  |   move.l d0,162(sp)
    3df8:	|  |   move.l 19c54 <DOSBase>,d0
    3dfe:	|  |   movea.l d0,a6
    3e00:	|  |   move.l 170(sp),d1
    3e04:	|  |   move.l 166(sp),d2
    3e08:	|  |   move.l 162(sp),d3
    3e0c:	|  |   jsr -48(a6)
    3e10:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    3e14:	|  |   pea 13d90 <custom.c.40d35411+0x462>
    3e1a:	|  |   jsr 12a04 <KPrintF>
    3e20:	|  |   addq.l #4,sp
		return NULL;
    3e22:	|  |   moveq #0,d0
    3e24:	+--|-- bra.w 3f80 <openAndVerify+0x366>
	}
	FGetC (fp);
    3e28:	|  \-> move.l 306(sp),254(sp)
    3e2e:	|      move.l 19c54 <DOSBase>,d0
    3e34:	|      movea.l d0,a6
    3e36:	|      move.l 254(sp),d1
    3e3a:	|      jsr -306(a6)
    3e3e:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    3e42:	|      nop
    3e44:	|  /-> move.l 306(sp),246(sp)
    3e4a:	|  |   move.l 19c54 <DOSBase>,d0
    3e50:	|  |   movea.l d0,a6
    3e52:	|  |   move.l 246(sp),d1
    3e56:	|  |   jsr -306(a6)
    3e5a:	|  |   move.l d0,242(sp)
    3e5e:	|  |   move.l 242(sp),d0
    3e62:	|  \-- bne.s 3e44 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    3e64:	|      move.l 306(sp),238(sp)
    3e6a:	|      move.l 19c54 <DOSBase>,d0
    3e70:	|      movea.l d0,a6
    3e72:	|      move.l 238(sp),d1
    3e76:	|      jsr -306(a6)
    3e7a:	|      move.l d0,234(sp)
    3e7e:	|      move.l 234(sp),d0
    3e82:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    3e86:	|      move.l 306(sp),226(sp)
    3e8c:	|      move.l 19c54 <DOSBase>,d0
    3e92:	|      movea.l d0,a6
    3e94:	|      move.l 226(sp),d1
    3e98:	|      jsr -306(a6)
    3e9c:	|      move.l d0,222(sp)
    3ea0:	|      move.l 222(sp),d0
    3ea4:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    3ea8:	|      move.l 230(sp),d0
    3eac:	|      lsl.l #8,d0
    3eae:	|      add.l 218(sp),d0
    3eb2:	|      movea.l 344(sp),a0
    3eb6:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    3eb8:	|      movea.l 344(sp),a0
    3ebc:	|      move.l (a0),d0
    3ebe:	|      cmpi.l #514,d0
    3ec4:	|  /-- ble.s 3f1a <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    3ec6:	|  |   move.l 19c54 <DOSBase>,d0
    3ecc:	|  |   movea.l d0,a6
    3ece:	|  |   jsr -60(a6)
    3ed2:	|  |   move.l d0,194(sp)
    3ed6:	|  |   move.l 194(sp),d0
    3eda:	|  |   move.l d0,190(sp)
    3ede:	|  |   move.l #81323,186(sp)
    3ee6:	|  |   moveq #100,d1
    3ee8:	|  |   move.l d1,182(sp)
    3eec:	|  |   move.l 19c54 <DOSBase>,d0
    3ef2:	|  |   movea.l d0,a6
    3ef4:	|  |   move.l 190(sp),d1
    3ef8:	|  |   move.l 186(sp),d2
    3efc:	|  |   move.l 182(sp),d3
    3f00:	|  |   jsr -48(a6)
    3f04:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    3f08:	|  |   pea 13dab <custom.c.40d35411+0x47d>
    3f0e:	|  |   jsr 12a04 <KPrintF>
    3f14:	|  |   addq.l #4,sp
		return NULL;
    3f16:	|  |   moveq #0,d0
    3f18:	+--|-- bra.s 3f80 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    3f1a:	|  \-> movea.l 344(sp),a0
    3f1e:	|      move.l (a0),d0
    3f20:	|      cmpi.l #257,d0
    3f26:	|  /-- bgt.s 3f7c <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    3f28:	|  |   move.l 19c54 <DOSBase>,d0
    3f2e:	|  |   movea.l d0,a6
    3f30:	|  |   jsr -60(a6)
    3f34:	|  |   move.l d0,214(sp)
    3f38:	|  |   move.l 214(sp),d0
    3f3c:	|  |   move.l d0,210(sp)
    3f40:	|  |   move.l #81392,206(sp)
    3f48:	|  |   moveq #100,d0
    3f4a:	|  |   move.l d0,202(sp)
    3f4e:	|  |   move.l 19c54 <DOSBase>,d0
    3f54:	|  |   movea.l d0,a6
    3f56:	|  |   move.l 210(sp),d1
    3f5a:	|  |   move.l 206(sp),d2
    3f5e:	|  |   move.l 202(sp),d3
    3f62:	|  |   jsr -48(a6)
    3f66:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    3f6a:	|  |   pea 13df0 <custom.c.40d35411+0x4c2>
    3f70:	|  |   jsr 12a04 <KPrintF>
    3f76:	|  |   addq.l #4,sp
		return NULL;
    3f78:	|  |   moveq #0,d0
    3f7a:	+--|-- bra.s 3f80 <openAndVerify+0x366>
	}
	return fp;
    3f7c:	|  \-> move.l 306(sp),d0
}
    3f80:	\----> movem.l (sp)+,d2-d3/a6
    3f84:	       lea 312(sp),sp
    3f88:	       rts

00003f8a <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    3f8a:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    3f8c:	          move.l #105448,(sp)
	while (* huntAndDestroy) {
    3f92:	   /----- bra.s 3fbe <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    3f94:	/--|----> movea.l (sp),a0
    3f96:	|  |      move.l (a0),d0
    3f98:	|  |      cmp.l 8(sp),d0
    3f9c:	|  |  /-- bne.s 3fb4 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    3f9e:	|  |  |   movea.l (sp),a0
    3fa0:	|  |  |   movea.l (a0),a0
    3fa2:	|  |  |   move.l 44(a0),d0
    3fa6:	|  |  |   movea.l (sp),a0
    3fa8:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    3faa:	|  |  |   movea.l 8(sp),a0
    3fae:	|  |  |   clr.l 44(a0)
    3fb2:	|  +--|-- bra.s 3fbe <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    3fb4:	|  |  \-> movea.l (sp),a0
    3fb6:	|  |      move.l (a0),d0
    3fb8:	|  |      moveq #44,d1
    3fba:	|  |      add.l d0,d1
    3fbc:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    3fbe:	|  \----> movea.l (sp),a0
    3fc0:	|         move.l (a0),d0
    3fc2:	\-------- bne.s 3f94 <pauseFunction+0xa>
		}
	}
}
    3fc4:	          nop
    3fc6:	          nop
    3fc8:	          addq.l #4,sp
    3fca:	          rts

00003fcc <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    3fcc:	move.l 19be8 <allRunningFunctions>,d0
    3fd2:	movea.l 4(sp),a0
    3fd6:	move.l d0,44(a0)
	allRunningFunctions = fun;
    3fda:	move.l 4(sp),19be8 <allRunningFunctions>
}
    3fe2:	nop
    3fe4:	rts

00003fe6 <runSludge>:

BOOL runSludge () {
    3fe6:	                   lea -12(sp),sp
    3fea:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    3fec:	                   move.l 19be8 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    3ff4:	      /----------- bra.s 4070 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    3ff6:	   /--|----------> movea.l 12(sp),a0
    3ffa:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    4000:	   |  |            movea.l 12(sp),a0
    4004:	   |  |            move.b 56(a0),d0
    4008:	   |  |  /-------- bne.s 406a <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    400a:	   |  |  |         movea.l 12(sp),a0
    400e:	   |  |  |         move.l 12(a0),d0
    4012:	   |  |  |  /----- beq.s 403c <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    4014:	   |  |  |  |      movea.l 12(sp),a0
    4018:	   |  |  |  |      move.l 12(a0),d0
    401c:	   |  |  |  |  /-- bpl.s 4028 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    401e:	   |  |  |  |  |   movea.l 12(sp),a0
    4022:	   |  |  |  |  |   clr.l 12(a0)
    4026:	   |  |  +--|--|-- bra.s 406a <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    4028:	   |  |  |  |  \-> movea.l 12(sp),a0
    402c:	   |  |  |  |      move.l 12(a0),d0
    4030:	   |  |  |  |      subq.l #1,d0
    4032:	   |  |  |  |      movea.l 12(sp),a0
    4036:	   |  |  |  |      move.l d0,12(a0)
    403a:	   |  |  +--|----- bra.s 406a <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    403c:	   |  |  |  \----> movea.l 12(sp),a0
    4040:	   |  |  |         move.w 50(a0),d0
    4044:	   |  |  |     /-- beq.s 4054 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    4046:	   |  |  |     |   movea.l 12(sp),a0
    404a:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    404e:	   |  |  |     |   jsr 5604 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    4054:	   |  |  |     \-> move.l 12(sp),-(sp)
    4058:	   |  |  |         jsr 2238 <continueFunction>
    405e:	   |  |  |         addq.l #4,sp
    4060:	   |  |  |         tst.w d0
    4062:	   |  |  +-------- bne.s 406a <runSludge+0x84>
					return FALSE;
    4064:	   |  |  |         clr.w d0
    4066:	/--|--|--|-------- bra.w 40f6 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    406a:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    4070:	|  |  \----------> tst.l 12(sp)
    4074:	|  \-------------- bne.s 3ff6 <runSludge+0x10>
	}

	if (loadNow) {
    4076:	|                  move.l 19c18 <loadNow>,d0
    407c:	|        /-------- beq.s 40f4 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    407e:	|        |         movea.l 19c18 <loadNow>,a0
    4084:	|        |         move.b (a0),d0
    4086:	|        |         cmpi.b #58,d0
    408a:	|        |  /----- bne.s 40be <runSludge+0xd8>
			saveGame (loadNow + 1);
    408c:	|        |  |      move.l 19c18 <loadNow>,d0
    4092:	|        |  |      addq.l #1,d0
    4094:	|        |  |      move.l d0,-(sp)
    4096:	|        |  |      jsr 8c4c <saveGame>
    409c:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    409e:	|        |  |      movea.l 19d12 <saverFunc>,a0
    40a4:	|        |  |      lea 28(a0),a0
    40a8:	|        |  |      pea 1 <_start+0x1>
    40ac:	|        |  |      pea 1 <_start+0x1>
    40b0:	|        |  |      move.l a0,-(sp)
    40b2:	|        |  |      jsr 112a2 <setVariable>
    40b8:	|        |  |      lea 12(sp),sp
    40bc:	|        |  |  /-- bra.s 40d6 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    40be:	|        |  \--|-> move.l 19c18 <loadNow>,d0
    40c4:	|        |     |   move.l d0,-(sp)
    40c6:	|        |     |   jsr 8794 <loadGame>
    40cc:	|        |     |   addq.l #4,sp
    40ce:	|        |     |   tst.w d0
    40d0:	|        |     +-- bne.s 40d6 <runSludge+0xf0>
    40d2:	|        |     |   clr.w d0
    40d4:	+--------|-----|-- bra.s 40f6 <runSludge+0x110>
		}
		FreeVec(loadNow);
    40d6:	|        |     \-> move.l 19c18 <loadNow>,8(sp)
    40de:	|        |         move.l 19c4c <SysBase>,d0
    40e4:	|        |         movea.l d0,a6
    40e6:	|        |         movea.l 8(sp),a1
    40ea:	|        |         jsr -690(a6)
		loadNow = NULL;
    40ee:	|        |         clr.l 19c18 <loadNow>
	}

	return TRUE;
    40f4:	|        \-------> moveq #1,d0
}
    40f6:	\----------------> movea.l (sp)+,a6
    40f8:	                   lea 12(sp),sp
    40fc:	                   rts

000040fe <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    40fe:	movea.l 1811c <currentEvents>,a0
    4104:	move.l (a0),d0
    4106:	move.l 4(sp),-(sp)
    410a:	move.l d0,-(sp)
    410c:	jsr 8d0 <put2bytes>
    4112:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    4114:	movea.l 1811c <currentEvents>,a0
    411a:	move.l 4(a0),d0
    411e:	move.l 4(sp),-(sp)
    4122:	move.l d0,-(sp)
    4124:	jsr 8d0 <put2bytes>
    412a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    412c:	movea.l 1811c <currentEvents>,a0
    4132:	move.l 8(a0),d0
    4136:	move.l 4(sp),-(sp)
    413a:	move.l d0,-(sp)
    413c:	jsr 8d0 <put2bytes>
    4142:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    4144:	movea.l 1811c <currentEvents>,a0
    414a:	move.l 12(a0),d0
    414e:	move.l 4(sp),-(sp)
    4152:	move.l d0,-(sp)
    4154:	jsr 8d0 <put2bytes>
    415a:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    415c:	movea.l 1811c <currentEvents>,a0
    4162:	move.l 16(a0),d0
    4166:	move.l 4(sp),-(sp)
    416a:	move.l d0,-(sp)
    416c:	jsr 8d0 <put2bytes>
    4172:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    4174:	movea.l 1811c <currentEvents>,a0
    417a:	move.l 20(a0),d0
    417e:	move.l 4(sp),-(sp)
    4182:	move.l d0,-(sp)
    4184:	jsr 8d0 <put2bytes>
    418a:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    418c:	movea.l 1811c <currentEvents>,a0
    4192:	move.l 24(a0),d0
    4196:	move.l 4(sp),-(sp)
    419a:	move.l d0,-(sp)
    419c:	jsr 8d0 <put2bytes>
    41a2:	addq.l #8,sp
}
    41a4:	nop
    41a6:	rts

000041a8 <sludgeDisplay>:

void sludgeDisplay () {
	CstSludgeDisplay();
    41a8:	jsr 1104 <CstSludgeDisplay>
}
    41ae:	nop
    41b0:	rts

000041b2 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    41b2:	      /-- bra.s 41d2 <stackSetByIndex+0x20>
		vS = vS->next;
    41b4:	/-----|-> movea.l 4(sp),a0
    41b8:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    41be:	|     +-- bne.s 41d2 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    41c0:	|     |   pea 13e37 <custom.c.40d35411+0x509>
    41c6:	|     |   jsr 12a04 <KPrintF>
    41cc:	|     |   addq.l #4,sp
			return FALSE;
    41ce:	|     |   clr.w d0
    41d0:	|  /--|-- bra.s 41f4 <stackSetByIndex+0x42>
	while (theIndex--) {
    41d2:	|  |  \-> move.l 8(sp),d0
    41d6:	|  |      move.l d0,d1
    41d8:	|  |      subq.l #1,d1
    41da:	|  |      move.l d1,8(sp)
    41de:	|  |      tst.l d0
    41e0:	\--|----- bne.s 41b4 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    41e2:	   |      move.l 4(sp),d0
    41e6:	   |      move.l d0,-(sp)
    41e8:	   |      move.l 16(sp),-(sp)
    41ec:	   |      jsr 10e6a <copyVariable>
    41f2:	   |      addq.l #8,sp
}
    41f4:	   \----> rts

000041f6 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    41f6:	             lea -24(sp),sp
    41fa:	             move.l a6,-(sp)
    41fc:	             move.l 48(sp),d0
    4200:	             move.w d0,d0
    4202:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    4206:	             moveq #58,d0
    4208:	             move.l d0,24(sp)
    420c:	             clr.l 20(sp)
    4210:	             move.l 19c4c <SysBase>,d0
    4216:	             movea.l d0,a6
    4218:	             move.l 24(sp),d0
    421c:	             move.l 20(sp),d1
    4220:	             jsr -684(a6)
    4224:	             move.l d0,16(sp)
    4228:	             move.l 16(sp),d0
    422c:	             move.l d0,12(sp)
	if(!newFunc) {
    4230:	         /-- bne.s 4246 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    4232:	         |   pea 13e50 <custom.c.40d35411+0x522>
    4238:	         |   jsr 12a04 <KPrintF>
    423e:	         |   addq.l #4,sp
		return 0;
    4240:	         |   moveq #0,d0
    4242:	/--------|-- bra.w 435c <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    4246:	|        \-> move.l 32(sp),d0
    424a:	|            movea.l 12(sp),a0
    424e:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    4250:	|            move.l 12(sp),-(sp)
    4254:	|            jsr 3988 <loadFunctionCode>
    425a:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    425c:	|            movea.l 12(sp),a0
    4260:	|            move.l 16(a0),d1
    4264:	|            move.l 36(sp),d0
    4268:	|            cmp.l d1,d0
    426a:	|        /-- beq.s 4280 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    426c:	|        |   pea 13e79 <custom.c.40d35411+0x54b>
    4272:	|        |   jsr 12a04 <KPrintF>
    4278:	|        |   addq.l #4,sp
		return NULL; 
    427a:	|        |   moveq #0,d0
    427c:	+--------|-- bra.w 435c <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    4280:	|        \-> movea.l 12(sp),a0
    4284:	|            move.l 16(a0),d1
    4288:	|            movea.l 12(sp),a0
    428c:	|            move.l 8(a0),d0
    4290:	|            cmp.l d1,d0
    4292:	|  /-------- bge.s 42fc <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    4294:	|  |         pea 13e95 <custom.c.40d35411+0x567>
    429a:	|  |         jsr 12a04 <KPrintF>
    42a0:	|  |         addq.l #4,sp
		return NULL; 
    42a2:	|  |         moveq #0,d0
    42a4:	+--|-------- bra.w 435c <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    42a8:	|  |  /----> movea.l 44(sp),a0
    42ac:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    42b0:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    42b4:	|  |  |      movea.l 44(sp),a0
    42b8:	|  |  |      move.l (a0),d0
    42ba:	|  |  |  /-- bne.s 42d0 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    42bc:	|  |  |  |   pea 13ebf <custom.c.40d35411+0x591>
    42c2:	|  |  |  |   jsr 12a04 <KPrintF>
    42c8:	|  |  |  |   addq.l #4,sp
			return NULL;
    42ca:	|  |  |  |   moveq #0,d0
    42cc:	+--|--|--|-- bra.w 435c <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    42d0:	|  |  |  \-> movea.l 12(sp),a0
    42d4:	|  |  |      move.l 20(a0),d1
    42d8:	|  |  |      move.l 36(sp),d0
    42dc:	|  |  |      lsl.l #3,d0
    42de:	|  |  |      add.l d0,d1
    42e0:	|  |  |      move.l 8(sp),d0
    42e4:	|  |  |      move.l d1,-(sp)
    42e6:	|  |  |      move.l d0,-(sp)
    42e8:	|  |  |      jsr 10e6a <copyVariable>
    42ee:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    42f0:	|  |  |      move.l 44(sp),-(sp)
    42f4:	|  |  |      jsr 11334 <trimStack>
    42fa:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    42fc:	|  \--|----> tst.l 36(sp)
    4300:	|     \----- bne.s 42a8 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    4302:	|            movea.l 12(sp),a0
    4306:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    430a:	|            movea.l 12(sp),a0
    430e:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    4312:	|            movea.l 12(sp),a0
    4316:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    431c:	|            movea.l 12(sp),a0
    4320:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    4326:	|            movea.l 12(sp),a0
    432a:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    432e:	|            movea.l 12(sp),a0
    4332:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    4336:	|            movea.l 12(sp),a0
    433a:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    433e:	|            movea.l 12(sp),a0
    4342:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    4346:	|            movea.l 12(sp),a0
    434a:	|            clr.l 28(a0)

	restartFunction (newFunc);
    434e:	|            move.l 12(sp),-(sp)
    4352:	|            jsr 3fcc <restartFunction>
    4358:	|            addq.l #4,sp
	return 1;
    435a:	|            moveq #1,d0
}
    435c:	\----------> movea.l (sp)+,a6
    435e:	             lea 24(sp),sp
    4362:	             rts

00004364 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    4364:	clr.w 18128 <sliceBusy>
}
    436a:	nop
    436c:	rts

0000436e <getNumberedString>:

char * getNumberedString (int value) {
    436e:	       lea -56(sp),sp
    4372:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    4376:	       move.w 18128 <sliceBusy>,d0
    437c:	   /-- beq.s 43c6 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    437e:	   |   move.l 19c54 <DOSBase>,d0
    4384:	   |   movea.l d0,a6
    4386:	   |   jsr -60(a6)
    438a:	   |   move.l d0,28(sp)
    438e:	   |   move.l 28(sp),d0
    4392:	   |   move.l d0,24(sp)
    4396:	   |   move.l #81674,20(sp)
    439e:	   |   moveq #76,d0
    43a0:	   |   move.l d0,16(sp)
    43a4:	   |   move.l 19c54 <DOSBase>,d0
    43aa:	   |   movea.l d0,a6
    43ac:	   |   move.l 24(sp),d1
    43b0:	   |   move.l 20(sp),d2
    43b4:	   |   move.l 16(sp),d3
    43b8:	   |   jsr -48(a6)
    43bc:	   |   move.l d0,12(sp)
		return NULL;
    43c0:	   |   moveq #0,d0
    43c2:	/--|-- bra.w 4462 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    43c6:	|  \-> move.l 19c34 <bigDataFile>,64(sp)
    43ce:	|      move.l 72(sp),d0
    43d2:	|      add.l d0,d0
    43d4:	|      add.l d0,d0
    43d6:	|      move.l d0,d1
    43d8:	|      move.l 19c40 <startOfTextIndex>,d0
    43de:	|      add.l d1,d0
    43e0:	|      move.l d0,60(sp)
    43e4:	|      moveq #-1,d0
    43e6:	|      move.l d0,56(sp)
    43ea:	|      move.l 19c54 <DOSBase>,d0
    43f0:	|      movea.l d0,a6
    43f2:	|      move.l 64(sp),d1
    43f6:	|      move.l 60(sp),d2
    43fa:	|      move.l 56(sp),d3
    43fe:	|      jsr -66(a6)
    4402:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    4406:	|      move.l 19c34 <bigDataFile>,d0
    440c:	|      move.l d0,-(sp)
    440e:	|      jsr 718 <get4bytes>
    4414:	|      addq.l #4,sp
    4416:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    441a:	|      move.l 19c34 <bigDataFile>,48(sp)
    4422:	|      move.l 72(sp),44(sp)
    4428:	|      moveq #-1,d0
    442a:	|      move.l d0,40(sp)
    442e:	|      move.l 19c54 <DOSBase>,d0
    4434:	|      movea.l d0,a6
    4436:	|      move.l 48(sp),d1
    443a:	|      move.l 44(sp),d2
    443e:	|      move.l 40(sp),d3
    4442:	|      jsr -66(a6)
    4446:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    444a:	|      move.l 19c34 <bigDataFile>,d0
    4450:	|      move.l d0,-(sp)
    4452:	|      jsr b02 <readString>
    4458:	|      addq.l #4,sp
    445a:	|      move.l d0,32(sp)
	
	return s;
    445e:	|      move.l 32(sp),d0
}
    4462:	\----> movem.l (sp)+,d2-d3/a6
    4466:	       lea 56(sp),sp
    446a:	       rts

0000446c <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    446c:	       lea -32(sp),sp
    4470:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    4474:	       move.w 18128 <sliceBusy>,d0
    447a:	   /-- beq.s 4496 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    447c:	   |   pea 13f57 <custom.c.40d35411+0x629>
    4482:	   |   pea 13f75 <custom.c.40d35411+0x647>
    4488:	   |   jsr 12a04 <KPrintF>
    448e:	   |   addq.l #8,sp
		return 0;
    4490:	   |   moveq #0,d0
    4492:	/--|-- bra.w 452a <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    4496:	|  \-> move.l 19c34 <bigDataFile>,40(sp)
    449e:	|      move.l 48(sp),d0
    44a2:	|      add.l d0,d0
    44a4:	|      add.l d0,d0
    44a6:	|      move.l d0,d1
    44a8:	|      move.l 19c3c <startOfDataIndex>,d0
    44ae:	|      add.l d1,d0
    44b0:	|      move.l d0,36(sp)
    44b4:	|      moveq #-1,d0
    44b6:	|      move.l d0,32(sp)
    44ba:	|      move.l 19c54 <DOSBase>,d0
    44c0:	|      movea.l d0,a6
    44c2:	|      move.l 40(sp),d1
    44c6:	|      move.l 36(sp),d2
    44ca:	|      move.l 32(sp),d3
    44ce:	|      jsr -66(a6)
    44d2:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    44d6:	|      move.l 19c34 <bigDataFile>,24(sp)
    44de:	|      move.l 19c34 <bigDataFile>,d0
    44e4:	|      move.l d0,-(sp)
    44e6:	|      jsr 718 <get4bytes>
    44ec:	|      addq.l #4,sp
    44ee:	|      move.l d0,20(sp)
    44f2:	|      clr.l 16(sp)
    44f6:	|      move.l 19c54 <DOSBase>,d0
    44fc:	|      movea.l d0,a6
    44fe:	|      move.l 24(sp),d1
    4502:	|      move.l 20(sp),d2
    4506:	|      move.l 16(sp),d3
    450a:	|      jsr -66(a6)
    450e:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    4512:	|      move.w #1,18128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    451a:	|      move.l 19c34 <bigDataFile>,d0
    4520:	|      move.l d0,-(sp)
    4522:	|      jsr 718 <get4bytes>
    4528:	|      addq.l #4,sp
}
    452a:	\----> movem.l (sp)+,d2-d3/a6
    452e:	       lea 32(sp),sp
    4532:	       rts

00004534 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    4534:	       lea -32(sp),sp
    4538:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    453c:	       move.w 18128 <sliceBusy>,d0
    4542:	   /-- beq.s 455e <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    4544:	   |   pea 13f57 <custom.c.40d35411+0x629>
    454a:	   |   pea 13f75 <custom.c.40d35411+0x647>
    4550:	   |   jsr 12a04 <KPrintF>
    4556:	   |   addq.l #8,sp
        return FALSE;
    4558:	   |   clr.w d0
    455a:	/--|-- bra.w 45ea <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    455e:	|  \-> move.l 19c34 <bigDataFile>,40(sp)
    4566:	|      move.l 48(sp),d0
    456a:	|      add.l d0,d0
    456c:	|      add.l d0,d0
    456e:	|      move.l d0,d1
    4570:	|      move.l 19c48 <startOfObjectIndex>,d0
    4576:	|      add.l d1,d0
    4578:	|      move.l d0,36(sp)
    457c:	|      moveq #-1,d0
    457e:	|      move.l d0,32(sp)
    4582:	|      move.l 19c54 <DOSBase>,d0
    4588:	|      movea.l d0,a6
    458a:	|      move.l 40(sp),d1
    458e:	|      move.l 36(sp),d2
    4592:	|      move.l 32(sp),d3
    4596:	|      jsr -66(a6)
    459a:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    459e:	|      move.l 19c34 <bigDataFile>,24(sp)
    45a6:	|      move.l 19c34 <bigDataFile>,d0
    45ac:	|      move.l d0,-(sp)
    45ae:	|      jsr 718 <get4bytes>
    45b4:	|      addq.l #4,sp
    45b6:	|      move.l d0,20(sp)
    45ba:	|      moveq #-1,d0
    45bc:	|      move.l d0,16(sp)
    45c0:	|      move.l 19c54 <DOSBase>,d0
    45c6:	|      movea.l d0,a6
    45c8:	|      move.l 24(sp),d1
    45cc:	|      move.l 20(sp),d2
    45d0:	|      move.l 16(sp),d3
    45d4:	|      jsr -66(a6)
    45d8:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    45dc:	|      move.w #1,18128 <sliceBusy>
    45e4:	|      move.w 18128 <sliceBusy>,d0
}
    45ea:	\----> movem.l (sp)+,d2-d3/a6
    45ee:	       lea 32(sp),sp
    45f2:	       rts

000045f4 <openSubSlice>:

BOOL openSubSlice (int num) {
    45f4:	       lea -32(sp),sp
    45f8:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    45fc:	       move.w 18128 <sliceBusy>,d0
    4602:	   /-- beq.s 461e <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    4604:	   |   pea 13f57 <custom.c.40d35411+0x629>
    460a:	   |   pea 13f75 <custom.c.40d35411+0x647>
    4610:	   |   jsr 12a04 <KPrintF>
    4616:	   |   addq.l #8,sp
		return FALSE;
    4618:	   |   clr.w d0
    461a:	/--|-- bra.w 46aa <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    461e:	|  \-> move.l 19c34 <bigDataFile>,40(sp)
    4626:	|      move.l 48(sp),d0
    462a:	|      add.l d0,d0
    462c:	|      add.l d0,d0
    462e:	|      move.l d0,d1
    4630:	|      move.l 19c44 <startOfSubIndex>,d0
    4636:	|      add.l d1,d0
    4638:	|      move.l d0,36(sp)
    463c:	|      moveq #-1,d0
    463e:	|      move.l d0,32(sp)
    4642:	|      move.l 19c54 <DOSBase>,d0
    4648:	|      movea.l d0,a6
    464a:	|      move.l 40(sp),d1
    464e:	|      move.l 36(sp),d2
    4652:	|      move.l 32(sp),d3
    4656:	|      jsr -66(a6)
    465a:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    465e:	|      move.l 19c34 <bigDataFile>,24(sp)
    4666:	|      move.l 19c34 <bigDataFile>,d0
    466c:	|      move.l d0,-(sp)
    466e:	|      jsr 718 <get4bytes>
    4674:	|      addq.l #4,sp
    4676:	|      move.l d0,20(sp)
    467a:	|      moveq #-1,d0
    467c:	|      move.l d0,16(sp)
    4680:	|      move.l 19c54 <DOSBase>,d0
    4686:	|      movea.l d0,a6
    4688:	|      move.l 24(sp),d1
    468c:	|      move.l 20(sp),d2
    4690:	|      move.l 16(sp),d3
    4694:	|      jsr -66(a6)
    4698:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    469c:	|      move.w #1,18128 <sliceBusy>
    46a4:	|      move.w 18128 <sliceBusy>,d0
}
    46aa:	\----> movem.l (sp)+,d2-d3/a6
    46ae:	       lea 32(sp),sp
    46b2:	       rts

000046b4 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    46b4:	       lea -180(sp),sp
    46b8:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    46bc:	       tst.l 196(sp)
    46c0:	/----- beq.s 4700 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    46c2:	|      move.l 196(sp),19c34 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    46ca:	|      move.l 196(sp),168(sp)
    46d0:	|      clr.l 164(sp)
    46d4:	|      clr.l 160(sp)
    46d8:	|      move.l 19c54 <DOSBase>,d0
    46de:	|      movea.l d0,a6
    46e0:	|      move.l 168(sp),d1
    46e4:	|      move.l 164(sp),d2
    46e8:	|      move.l 160(sp),d3
    46ec:	|      jsr -66(a6)
    46f0:	|      move.l d0,156(sp)
    46f4:	|      move.l 156(sp),d0
    46f8:	|      move.l d0,19c38 <startIndex>
    46fe:	|  /-- bra.s 473a <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    4700:	\--|-> move.l 19c34 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    4708:	   |   move.l 196(sp),184(sp)
    470e:	   |   move.l 19c38 <startIndex>,d0
    4714:	   |   move.l d0,180(sp)
    4718:	   |   moveq #-1,d0
    471a:	   |   move.l d0,176(sp)
    471e:	   |   move.l 19c54 <DOSBase>,d0
    4724:	   |   movea.l d0,a6
    4726:	   |   move.l 184(sp),d1
    472a:	   |   move.l 180(sp),d2
    472e:	   |   move.l 176(sp),d3
    4732:	   |   jsr -66(a6)
    4736:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    473a:	   \-> clr.w 18128 <sliceBusy>

	if (skipBefore > numLanguages) {
    4740:	       move.l 204(sp),d0
    4744:	       cmp.l 200(sp),d0
    4748:	   /-- bls.s 475c <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    474a:	   |   pea 13f8f <custom.c.40d35411+0x661>
    4750:	   |   jsr 12a04 <KPrintF>
    4756:	   |   addq.l #4,sp
		skipBefore = 0;
    4758:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    475c:	   \-> move.l 200(sp),d0
    4760:	       sub.l 204(sp),d0
    4764:	       move.l d0,188(sp)
	while (skipBefore) {
    4768:	   /-- bra.s 47a6 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    476a:	/--|-> move.l 196(sp),24(sp)
    4770:	|  |   move.l 196(sp),-(sp)
    4774:	|  |   jsr 718 <get4bytes>
    477a:	|  |   addq.l #4,sp
    477c:	|  |   move.l d0,20(sp)
    4780:	|  |   moveq #-1,d0
    4782:	|  |   move.l d0,16(sp)
    4786:	|  |   move.l 19c54 <DOSBase>,d0
    478c:	|  |   movea.l d0,a6
    478e:	|  |   move.l 24(sp),d1
    4792:	|  |   move.l 20(sp),d2
    4796:	|  |   move.l 16(sp),d3
    479a:	|  |   jsr -66(a6)
    479e:	|  |   move.l d0,12(sp)
		skipBefore --;
    47a2:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    47a6:	|  \-> tst.l 204(sp)
    47aa:	\----- bne.s 476a <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    47ac:	       move.l 196(sp),152(sp)
    47b2:	       clr.l 148(sp)
    47b6:	       clr.l 144(sp)
    47ba:	       move.l 19c54 <DOSBase>,d0
    47c0:	       movea.l d0,a6
    47c2:	       move.l 152(sp),d1
    47c6:	       move.l 148(sp),d2
    47ca:	       move.l 144(sp),d3
    47ce:	       jsr -66(a6)
    47d2:	       move.l d0,140(sp)
    47d6:	       move.l 140(sp),d0
    47da:	       addq.l #4,d0
    47dc:	       move.l d0,19c40 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    47e2:	       move.l 196(sp),136(sp)
    47e8:	       move.l 196(sp),-(sp)
    47ec:	       jsr 718 <get4bytes>
    47f2:	       addq.l #4,sp
    47f4:	       move.l d0,132(sp)
    47f8:	       moveq #-1,d0
    47fa:	       move.l d0,128(sp)
    47fe:	       move.l 19c54 <DOSBase>,d0
    4804:	       movea.l d0,a6
    4806:	       move.l 136(sp),d1
    480a:	       move.l 132(sp),d2
    480e:	       move.l 128(sp),d3
    4812:	       jsr -66(a6)
    4816:	       move.l d0,124(sp)

	while (skipAfter) {
    481a:	   /-- bra.s 4858 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    481c:	/--|-> move.l 196(sp),40(sp)
    4822:	|  |   move.l 196(sp),-(sp)
    4826:	|  |   jsr 718 <get4bytes>
    482c:	|  |   addq.l #4,sp
    482e:	|  |   move.l d0,36(sp)
    4832:	|  |   moveq #-1,d0
    4834:	|  |   move.l d0,32(sp)
    4838:	|  |   move.l 19c54 <DOSBase>,d0
    483e:	|  |   movea.l d0,a6
    4840:	|  |   move.l 40(sp),d1
    4844:	|  |   move.l 36(sp),d2
    4848:	|  |   move.l 32(sp),d3
    484c:	|  |   jsr -66(a6)
    4850:	|  |   move.l d0,28(sp)
		skipAfter --;
    4854:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    4858:	|  \-> tst.l 188(sp)
    485c:	\----- bne.s 481c <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    485e:	       move.l 196(sp),120(sp)
    4864:	       clr.l 116(sp)
    4868:	       clr.l 112(sp)
    486c:	       move.l 19c54 <DOSBase>,d0
    4872:	       movea.l d0,a6
    4874:	       move.l 120(sp),d1
    4878:	       move.l 116(sp),d2
    487c:	       move.l 112(sp),d3
    4880:	       jsr -66(a6)
    4884:	       move.l d0,108(sp)
    4888:	       move.l 108(sp),d0
    488c:	       addq.l #4,d0
    488e:	       move.l d0,19c44 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    4894:	       move.l 196(sp),104(sp)
    489a:	       move.l 196(sp),-(sp)
    489e:	       jsr 718 <get4bytes>
    48a4:	       addq.l #4,sp
    48a6:	       move.l d0,100(sp)
    48aa:	       clr.l 96(sp)
    48ae:	       move.l 19c54 <DOSBase>,d0
    48b4:	       movea.l d0,a6
    48b6:	       move.l 104(sp),d1
    48ba:	       move.l 100(sp),d2
    48be:	       move.l 96(sp),d3
    48c2:	       jsr -66(a6)
    48c6:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    48ca:	       move.l 196(sp),88(sp)
    48d0:	       clr.l 84(sp)
    48d4:	       clr.l 80(sp)
    48d8:	       move.l 19c54 <DOSBase>,d0
    48de:	       movea.l d0,a6
    48e0:	       move.l 88(sp),d1
    48e4:	       move.l 84(sp),d2
    48e8:	       move.l 80(sp),d3
    48ec:	       jsr -66(a6)
    48f0:	       move.l d0,76(sp)
    48f4:	       move.l 76(sp),d0
    48f8:	       addq.l #4,d0
    48fa:	       move.l d0,19c48 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    4900:	       move.l 196(sp),72(sp)
    4906:	       move.l 196(sp),-(sp)
    490a:	       jsr 718 <get4bytes>
    4910:	       addq.l #4,sp
    4912:	       move.l d0,68(sp)
    4916:	       clr.l 64(sp)
    491a:	       move.l 19c54 <DOSBase>,d0
    4920:	       movea.l d0,a6
    4922:	       move.l 72(sp),d1
    4926:	       move.l 68(sp),d2
    492a:	       move.l 64(sp),d3
    492e:	       jsr -66(a6)
    4932:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    4936:	       move.l 196(sp),56(sp)
    493c:	       clr.l 52(sp)
    4940:	       clr.l 48(sp)
    4944:	       move.l 19c54 <DOSBase>,d0
    494a:	       movea.l d0,a6
    494c:	       move.l 56(sp),d1
    4950:	       move.l 52(sp),d2
    4954:	       move.l 48(sp),d3
    4958:	       jsr -66(a6)
    495c:	       move.l d0,44(sp)
    4960:	       move.l 44(sp),d0
    4964:	       move.l d0,19c3c <startOfDataIndex>
    496a:	       nop
    496c:	       movem.l (sp)+,d2-d3/a6
    4970:	       lea 180(sp),sp
    4974:	       rts

00004976 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    4976:	    lea -20(sp),sp
    497a:	    move.l a6,-(sp)
    497c:	    move.l d7,-(sp)
	APTR vbr = 0;
    497e:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    4982:	    move.w #20090,10(sp)
    4988:	    move.w #2049,12(sp)
    498e:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    4994:	    movea.l 19c4c <SysBase>,a0
    499a:	    move.w 296(a0),d0
    499e:	    move.w d0,d0
    49a0:	    andi.l #65535,d0
    49a6:	    moveq #1,d1
    49a8:	    and.l d1,d0
    49aa:	/-- beq.s 49d8 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    49ac:	|   lea 28(sp),a0
    49b0:	|   lea -18(a0),a0
    49b4:	|   move.l a0,20(sp)
    49b8:	|   move.l 19c4c <SysBase>,d0
    49be:	|   movea.l d0,a6
    49c0:	|   move.l 20(sp),d7
    49c4:	|   exg d7,a5
    49c6:	|   jsr -30(a6)
    49ca:	|   exg d7,a5
    49cc:	|   move.l d0,16(sp)
    49d0:	|   move.l 16(sp),d0
    49d4:	|   move.l d0,24(sp)

	return vbr;
    49d8:	\-> move.l 24(sp),d0
}
    49dc:	    move.l (sp)+,d7
    49de:	    movea.l (sp)+,a6
    49e0:	    lea 20(sp),sp
    49e4:	    rts

000049e6 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    49e6:	movea.l 19c72 <VBR>,a0
    49ec:	lea 108(a0),a0
    49f0:	move.l 4(sp),(a0)
}
    49f4:	nop
    49f6:	rts

000049f8 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    49f8:	movea.l 19c72 <VBR>,a0
    49fe:	move.l 108(a0),d0
}
    4a02:	rts

00004a04 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    4a04:	       subq.l #8,sp
    4a06:	       move.l a6,-(sp)
	Forbid();
    4a08:	       move.l 19c4c <SysBase>,d0
    4a0e:	       movea.l d0,a6
    4a10:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	SystemADKCON=custom->adkconr;
    4a14:	       movea.l 19c50 <custom>,a0
    4a1a:	       move.w 16(a0),d0
    4a1e:	       move.w d0,19c70 <SystemADKCON>
	SystemInts=custom->intenar;
    4a24:	       movea.l 19c50 <custom>,a0
    4a2a:	       move.w 28(a0),d0
    4a2e:	       move.w d0,19c6c <SystemInts>
	SystemDMA=custom->dmaconr;
    4a34:	       movea.l 19c50 <custom>,a0
    4a3a:	       move.w 2(a0),d0
    4a3e:	       move.w d0,19c6e <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    4a44:	       movea.l 19c58 <GfxBase>,a0
    4a4a:	       move.l 34(a0),d0
    4a4e:	       move.l d0,19c7a <ActiView>

	LoadView(0);
    4a54:	       clr.l 4(sp)
    4a58:	       move.l 19c58 <GfxBase>,d0
    4a5e:	       movea.l d0,a6
    4a60:	       movea.l 4(sp),a1
    4a64:	       jsr -222(a6)
	WaitTOF();
    4a68:	       move.l 19c58 <GfxBase>,d0
    4a6e:	       movea.l d0,a6
    4a70:	       jsr -270(a6)
	WaitTOF();
    4a74:	       move.l 19c58 <GfxBase>,d0
    4a7a:	       movea.l d0,a6
    4a7c:	       jsr -270(a6)

	WaitVbl();
    4a80:	       jsr 1292c <WaitVbl>
	WaitVbl();
    4a86:	       jsr 1292c <WaitVbl>

	OwnBlitter();
    4a8c:	       move.l 19c58 <GfxBase>,d0
    4a92:	       movea.l d0,a6
    4a94:	       jsr -456(a6)
	WaitBlit();	
    4a98:	       move.l 19c58 <GfxBase>,d0
    4a9e:	       movea.l d0,a6
    4aa0:	       jsr -228(a6)
	Disable();
    4aa4:	       move.l 19c4c <SysBase>,d0
    4aaa:	       movea.l d0,a6
    4aac:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	custom->dmacon=0x7fff;//Clear all DMA channels
    4ab0:	       movea.l 19c50 <custom>,a0
    4ab6:	       move.w #32767,150(a0)

	//set all colors black
	for(int a=0;a<32;a++)
    4abc:	       clr.l 8(sp)
    4ac0:	   /-- bra.s 4ade <TakeSystem+0xda>
		custom->color[a]=0;
    4ac2:	/--|-> movea.l 19c50 <custom>,a0
    4ac8:	|  |   move.l 8(sp),d0
    4acc:	|  |   addi.l #192,d0
    4ad2:	|  |   add.l d0,d0
    4ad4:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    4ada:	|  |   addq.l #1,8(sp)
    4ade:	|  \-> moveq #31,d0
    4ae0:	|      cmp.l 8(sp),d0
    4ae4:	\----- bge.s 4ac2 <TakeSystem+0xbe>

	WaitVbl();
    4ae6:	       jsr 1292c <WaitVbl>
	WaitVbl();
    4aec:	       jsr 1292c <WaitVbl>

	VBR=GetVBR();
    4af2:	       jsr 4976 <GetVBR>
    4af8:	       move.l d0,19c72 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    4afe:	       jsr 49f8 <GetInterruptHandler>
    4b04:	       move.l d0,19c76 <SystemIrq>
}
    4b0a:	       nop
    4b0c:	       movea.l (sp)+,a6
    4b0e:	       addq.l #8,sp
    4b10:	       rts

00004b12 <FreeSystem>:

void FreeSystem() { 
    4b12:	subq.l #4,sp
    4b14:	move.l a6,-(sp)
	WaitVbl();
    4b16:	jsr 1292c <WaitVbl>
	WaitBlit();
    4b1c:	move.l 19c58 <GfxBase>,d0
    4b22:	movea.l d0,a6
    4b24:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    4b28:	movea.l 19c50 <custom>,a0
    4b2e:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    4b34:	movea.l 19c50 <custom>,a0
    4b3a:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    4b40:	movea.l 19c50 <custom>,a0
    4b46:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    4b4c:	move.l 19c76 <SystemIrq>,d0
    4b52:	move.l d0,-(sp)
    4b54:	jsr 49e6 <SetInterruptHandler>
    4b5a:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    4b5c:	movea.l 19c58 <GfxBase>,a0
    4b62:	move.l 38(a0),d0
    4b66:	movea.l 19c50 <custom>,a0
    4b6c:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    4b70:	movea.l 19c58 <GfxBase>,a0
    4b76:	move.l 50(a0),d0
    4b7a:	movea.l 19c50 <custom>,a0
    4b80:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    4b84:	movea.l 19c50 <custom>,a0
    4b8a:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    4b90:	move.w 19c6e <SystemDMA>,d0
    4b96:	movea.l 19c50 <custom>,a0
    4b9c:	ori.w #-32768,d0
    4ba0:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    4ba4:	move.w 19c70 <SystemADKCON>,d0
    4baa:	movea.l 19c50 <custom>,a0
    4bb0:	ori.w #-32768,d0
    4bb4:	move.w d0,158(a0)

	WaitBlit();	
    4bb8:	move.l 19c58 <GfxBase>,d0
    4bbe:	movea.l d0,a6
    4bc0:	jsr -228(a6)
	DisownBlitter();
    4bc4:	move.l 19c58 <GfxBase>,d0
    4bca:	movea.l d0,a6
    4bcc:	jsr -462(a6)
	Enable();
    4bd0:	move.l 19c4c <SysBase>,d0
    4bd6:	movea.l d0,a6
    4bd8:	jsr -126(a6)

	LoadView(ActiView);
    4bdc:	move.l 19c7a <ActiView>,4(sp)
    4be4:	move.l 19c58 <GfxBase>,d0
    4bea:	movea.l d0,a6
    4bec:	movea.l 4(sp),a1
    4bf0:	jsr -222(a6)
	WaitTOF();
    4bf4:	move.l 19c58 <GfxBase>,d0
    4bfa:	movea.l d0,a6
    4bfc:	jsr -270(a6)
	WaitTOF();
    4c00:	move.l 19c58 <GfxBase>,d0
    4c06:	movea.l d0,a6
    4c08:	jsr -270(a6)

	Permit();
    4c0c:	move.l 19c4c <SysBase>,d0
    4c12:	movea.l d0,a6
    4c14:	jsr -138(a6)
}
    4c18:	nop
    4c1a:	movea.l (sp)+,a6
    4c1c:	addq.l #4,sp
    4c1e:	rts

00004c20 <p61Init>:
	// The Player® 6.1A: Copyright © 1992-95 Jarno Paananen
	// P61.testmod - Module by Skylord/Sector 7 
	INCBIN(player, "player610.6.no_cia.bin")
	INCBIN_CHIP(module, "testmod.p61")

	int p61Init(const void* module) { // returns 0 if success, non-zero otherwise
    4c20:	move.l a3,-(sp)
    4c22:	move.l a2,-(sp)
		register volatile const void* _a0 ASM("a0") = module;
    4c24:	movea.l 12(sp),a0
		register volatile const void* _a1 ASM("a1") = NULL;
    4c28:	suba.l a1,a1
		register volatile const void* _a2 ASM("a2") = NULL;
    4c2a:	suba.l a2,a2
		register volatile const void* _a3 ASM("a3") = player;
    4c2c:	move.l 1812a <player>,d0
    4c32:	movea.l d0,a3
		register                int   _d0 ASM("d0"); // return value
		__asm volatile (
    4c34:	movem.l d1-d7/a4-a6,-(sp)
    4c38:	jsr (a3)
    4c3a:	movem.l (sp)+,d1-d7/a4-a6
			"movem.l (%%sp)+,%%d1-%%d7/%%a4-%%a6"
		: "=r" (_d0), "+rf"(_a0), "+rf"(_a1), "+rf"(_a2), "+rf"(_a3)
		:
		: "cc", "memory");
		return _d0;
	}
    4c3e:	movea.l (sp)+,a2
    4c40:	movea.l (sp)+,a3
    4c42:	rts

00004c44 <p61End>:
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}

	void p61End() {
    4c44:	move.l a6,-(sp)
    4c46:	move.l a3,-(sp)
		register volatile const void* _a3 ASM("a3") = player;
    4c48:	move.l 1812a <player>,d0
    4c4e:	movea.l d0,a3
		register volatile const void* _a6 ASM("a6") = (void*)0xdff000;
    4c50:	movea.l #14675968,a6
		__asm volatile (
    4c56:	movem.l d0-d1/a0-a1,-(sp)
    4c5a:	jsr 8(a3)
    4c5e:	movem.l (sp)+,d0-d1/a0-a1
			"jsr 8(%%a3)\n"
			"movem.l (%%sp)+,%%d0-%%d1/%%a0-%%a1"
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}
    4c62:	nop
    4c64:	movea.l (sp)+,a3
    4c66:	movea.l (sp)+,a6
    4c68:	rts

00004c6a <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    4c6a:	    lea -128(sp),sp
    4c6e:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    4c72:	    movea.w #4,a0
    4c76:	    move.l (a0),d0
    4c78:	    move.l d0,19c4c <SysBase>
	custom = (struct Custom*)0xdff000;	
    4c7e:	    move.l #14675968,19c50 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    4c88:	    move.l #88383,136(sp)
    4c90:	    clr.l 132(sp)
    4c94:	    move.l 19c4c <SysBase>,d0
    4c9a:	    movea.l d0,a6
    4c9c:	    movea.l 136(sp),a1
    4ca0:	    move.l 132(sp),d0
    4ca4:	    jsr -552(a6)
    4ca8:	    move.l d0,128(sp)
    4cac:	    move.l 128(sp),d0
    4cb0:	    move.l d0,19c58 <GfxBase>
	if (!GfxBase)
    4cb6:	    move.l 19c58 <GfxBase>,d0
    4cbc:	/-- bne.s 4cd2 <main+0x68>
		Exit(0);
    4cbe:	|   clr.l 124(sp)
    4cc2:	|   move.l 19c54 <DOSBase>,d0
    4cc8:	|   movea.l d0,a6
    4cca:	|   move.l 124(sp),d1
    4cce:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    4cd2:	\-> move.l #88400,120(sp)
    4cda:	    clr.l 116(sp)
    4cde:	    move.l 19c4c <SysBase>,d0
    4ce4:	    movea.l d0,a6
    4ce6:	    movea.l 120(sp),a1
    4cea:	    move.l 116(sp),d0
    4cee:	    jsr -552(a6)
    4cf2:	    move.l d0,112(sp)
    4cf6:	    move.l 112(sp),d0
    4cfa:	    move.l d0,19c54 <DOSBase>
	if (!DOSBase)
    4d00:	    move.l 19c54 <DOSBase>,d0
    4d06:	/-- bne.s 4d1c <main+0xb2>
		Exit(0);
    4d08:	|   clr.l 108(sp)
    4d0c:	|   move.l 19c54 <DOSBase>,d0
    4d12:	|   movea.l d0,a6
    4d14:	|   move.l 108(sp),d1
    4d18:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    4d1c:	\-> move.l #88412,104(sp)
    4d24:	    clr.l 100(sp)
    4d28:	    move.l 19c4c <SysBase>,d0
    4d2e:	    movea.l d0,a6
    4d30:	    movea.l 104(sp),a1
    4d34:	    move.l 100(sp),d0
    4d38:	    jsr -552(a6)
    4d3c:	    move.l d0,96(sp)
    4d40:	    move.l 96(sp),d0
    4d44:	    move.l d0,19c5c <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    4d4a:	    move.l 19c5c <MathIeeeSingBasBase>,d0
    4d50:	/-- bne.s 4d66 <main+0xfc>
		Exit(0);	
    4d52:	|   clr.l 92(sp)
    4d56:	|   move.l 19c54 <DOSBase>,d0
    4d5c:	|   movea.l d0,a6
    4d5e:	|   move.l 92(sp),d1
    4d62:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    4d66:	\-> move.l #88436,88(sp)
    4d6e:	    clr.l 84(sp)
    4d72:	    move.l 19c4c <SysBase>,d0
    4d78:	    movea.l d0,a6
    4d7a:	    movea.l 88(sp),a1
    4d7e:	    move.l 84(sp),d0
    4d82:	    jsr -552(a6)
    4d86:	    move.l d0,80(sp)
    4d8a:	    move.l 80(sp),d0
    4d8e:	    move.l d0,19c60 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    4d94:	    move.l 19c60 <MathIeeeSingTransBase>,d0
    4d9a:	/-- bne.s 4db0 <main+0x146>
		Exit(0);
    4d9c:	|   clr.l 76(sp)
    4da0:	|   move.l 19c54 <DOSBase>,d0
    4da6:	|   movea.l d0,a6
    4da8:	|   move.l 76(sp),d1
    4dac:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    4db0:	\-> move.l #88462,72(sp)
    4db8:	    clr.l 68(sp)
    4dbc:	    move.l 19c4c <SysBase>,d0
    4dc2:	    movea.l d0,a6
    4dc4:	    movea.l 72(sp),a1
    4dc8:	    move.l 68(sp),d0
    4dcc:	    jsr -552(a6)
    4dd0:	    move.l d0,64(sp)
    4dd4:	    move.l 64(sp),d0
    4dd8:	    move.l d0,19c68 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    4dde:	    move.l 19c68 <MathIeeeDoubTransBase>,d0
    4de4:	/-- bne.s 4dfa <main+0x190>
		Exit(0);
    4de6:	|   clr.l 60(sp)
    4dea:	|   move.l 19c54 <DOSBase>,d0
    4df0:	|   movea.l d0,a6
    4df2:	|   move.l 60(sp),d1
    4df6:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    4dfa:	\-> move.l #88488,56(sp)
    4e02:	    clr.l 52(sp)
    4e06:	    move.l 19c4c <SysBase>,d0
    4e0c:	    movea.l d0,a6
    4e0e:	    movea.l 56(sp),a1
    4e12:	    move.l 52(sp),d0
    4e16:	    jsr -552(a6)
    4e1a:	    move.l d0,48(sp)
    4e1e:	    move.l 48(sp),d0
    4e22:	    move.l d0,19c64 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    4e28:	    move.l 19c64 <MathIeeeDoubBasBase>,d0
    4e2e:	/-- bne.s 4e44 <main+0x1da>
		Exit(0);
    4e30:	|   clr.l 44(sp)
    4e34:	|   move.l 19c54 <DOSBase>,d0
    4e3a:	|   movea.l d0,a6
    4e3c:	|   move.l 44(sp),d1
    4e40:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    4e44:	\-> pea 159c0 <incbin_player_end+0x82>
    4e4a:	    jsr 12a04 <KPrintF>
    4e50:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    4e52:	    move.l 19c54 <DOSBase>,d0
    4e58:	    movea.l d0,a6
    4e5a:	    jsr -60(a6)
    4e5e:	    move.l d0,40(sp)
    4e62:	    move.l 40(sp),d0
    4e66:	    move.l d0,36(sp)
    4e6a:	    move.l #88540,32(sp)
    4e72:	    moveq #15,d0
    4e74:	    move.l d0,28(sp)
    4e78:	    move.l 19c54 <DOSBase>,d0
    4e7e:	    movea.l d0,a6
    4e80:	    move.l 36(sp),d1
    4e84:	    move.l 32(sp),d2
    4e88:	    move.l 28(sp),d3
    4e8c:	    jsr -48(a6)
    4e90:	    move.l d0,24(sp)
	Delay(50);
    4e94:	    moveq #50,d0
    4e96:	    move.l d0,20(sp)
    4e9a:	    move.l 19c54 <DOSBase>,d0
    4ea0:	    movea.l d0,a6
    4ea2:	    move.l 20(sp),d1
    4ea6:	    jsr -198(a6)

	warpmode(1);
    4eaa:	    pea 1 <_start+0x1>
    4eae:	    jsr 12a6e <warpmode>
    4eb4:	    addq.l #4,sp
	// TODO: precalc stuff here
#ifdef MUSIC
	if(p61Init(module) != 0)
    4eb6:	    move.l 1812e <module>,d0
    4ebc:	    move.l d0,-(sp)
    4ebe:	    jsr 4c20 <p61Init>
    4ec4:	    addq.l #4,sp
    4ec6:	    tst.l d0
    4ec8:	/-- beq.s 4ed8 <main+0x26e>
		KPrintF("p61Init failed!\n");
    4eca:	|   pea 159ec <incbin_player_end+0xae>
    4ed0:	|   jsr 12a04 <KPrintF>
    4ed6:	|   addq.l #4,sp
#endif
	warpmode(0);
    4ed8:	\-> clr.l -(sp)
    4eda:	    jsr 12a6e <warpmode>
    4ee0:	    addq.l #4,sp

	TakeSystem();
    4ee2:	    jsr 4a04 <TakeSystem>

	custom->dmacon = 0x87ff;
    4ee8:	    movea.l 19c50 <custom>,a0
    4eee:	    move.w #-30721,150(a0)
	WaitVbl();
    4ef4:	    jsr 1292c <WaitVbl>

	main_sludge(argc, argv);
    4efa:	    move.l 148(sp),-(sp)
    4efe:	    move.l 148(sp),-(sp)
    4f02:	    jsr 1672 <main_sludge>
    4f08:	    addq.l #8,sp
	debug_register_palette(colors, "image.pal", 32, 0);
	debug_register_copperlist(copper1, "copper1", 1024, 0);
	debug_register_copperlist(copper2, "copper2", sizeof(copper2), 0);*/

#ifdef MUSIC
	p61End();
    4f0a:	    jsr 4c44 <p61End>
#endif

	// END
	FreeSystem();
    4f10:	    jsr 4b12 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    4f16:	    move.l 19c54 <DOSBase>,16(sp)
    4f1e:	    move.l 19c4c <SysBase>,d0
    4f24:	    movea.l d0,a6
    4f26:	    movea.l 16(sp),a1
    4f2a:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    4f2e:	    move.l 19c58 <GfxBase>,12(sp)
    4f36:	    move.l 19c4c <SysBase>,d0
    4f3c:	    movea.l d0,a6
    4f3e:	    movea.l 12(sp),a1
    4f42:	    jsr -414(a6)
    4f46:	    moveq #0,d0
}
    4f48:	    movem.l (sp)+,d2-d3/a6
    4f4c:	    lea 128(sp),sp
    4f50:	    rts

00004f52 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    4f52:	    lea -16(sp),sp
    4f56:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    4f58:	    moveq #8,d0
    4f5a:	    move.l d0,16(sp)
    4f5e:	    clr.l 12(sp)
    4f62:	    move.l 19c4c <SysBase>,d0
    4f68:	    movea.l d0,a6
    4f6a:	    move.l 16(sp),d0
    4f6e:	    move.l 12(sp),d1
    4f72:	    jsr -684(a6)
    4f76:	    move.l d0,8(sp)
    4f7a:	    move.l 8(sp),d0
    4f7e:	    move.l d0,4(sp)
	if (!newStat) {
    4f82:	/-- bne.s 4fb2 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    4f84:	|   movea.l 18132 <nowStatus>,a0
    4f8a:	|   move.l (a0),d0
    4f8c:	|   movea.l 4(sp),a0
    4f90:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    4f94:	|   pea 13bfc <custom.c.40d35411+0x2ce>
    4f9a:	|   jsr b8 <copyString>
    4fa0:	|   addq.l #4,sp
    4fa2:	|   movea.l 4(sp),a0
    4fa6:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    4fa8:	|   movea.l 18132 <nowStatus>,a0
    4fae:	|   move.l 4(sp),(a0)
	}
}
    4fb2:	\-> nop
    4fb4:	    movea.l (sp)+,a6
    4fb6:	    lea 16(sp),sp
    4fba:	    rts

00004fbc <clearStatusBar>:

void clearStatusBar () {
    4fbc:	       lea -16(sp),sp
    4fc0:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    4fc2:	       movea.l 18132 <nowStatus>,a0
    4fc8:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    4fcc:	       movea.l 18132 <nowStatus>,a0
    4fd2:	       moveq #-1,d0
    4fd4:	       move.l d0,6(a0)
	while (stat) {
    4fd8:	   /-- bra.s 5018 <clearStatusBar+0x5c>
		kill = stat;
    4fda:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    4fe0:	|  |   movea.l 16(sp),a0
    4fe4:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    4fea:	|  |   movea.l 12(sp),a0
    4fee:	|  |   move.l (a0),8(sp)
    4ff2:	|  |   move.l 19c4c <SysBase>,d0
    4ff8:	|  |   movea.l d0,a6
    4ffa:	|  |   movea.l 8(sp),a1
    4ffe:	|  |   jsr -690(a6)
		FreeVec(kill);
    5002:	|  |   move.l 12(sp),4(sp)
    5008:	|  |   move.l 19c4c <SysBase>,d0
    500e:	|  |   movea.l d0,a6
    5010:	|  |   movea.l 4(sp),a1
    5014:	|  |   jsr -690(a6)
	while (stat) {
    5018:	|  \-> tst.l 16(sp)
    501c:	\----- bne.s 4fda <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    501e:	       movea.l 18132 <nowStatus>,a0
    5024:	       clr.l (a0)
}
    5026:	       nop
    5028:	       movea.l (sp)+,a6
    502a:	       lea 16(sp),sp
    502e:	       rts

00005030 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    5030:	clr.l 19c7e <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    5036:	move.w #-1,19c82 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    503e:	moveq #-1,d0
    5040:	move.l d0,19c84 <mainStatus+0x6>
	mainStatus.statusX = 10;
    5046:	moveq #10,d0
    5048:	move.l d0,19c88 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    504e:	movea.l 19b50 <winHeight>,a0
    5054:	lea -15(a0),a0
    5058:	move.l a0,d0
    505a:	move.l d0,19c8c <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    5060:	nop
    5062:	rts

00005064 <killLastStatus>:

void killLastStatus () {
    5064:	    lea -12(sp),sp
    5068:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    506a:	    movea.l 18132 <nowStatus>,a0
    5070:	    move.l (a0),d0
    5072:	/-- beq.s 50bc <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    5074:	|   movea.l 18132 <nowStatus>,a0
    507a:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    507e:	|   movea.l 18132 <nowStatus>,a0
    5084:	|   movea.l 12(sp),a1
    5088:	|   move.l 4(a1),d0
    508c:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    508e:	|   movea.l 12(sp),a0
    5092:	|   move.l (a0),8(sp)
    5096:	|   move.l 19c4c <SysBase>,d0
    509c:	|   movea.l d0,a6
    509e:	|   movea.l 8(sp),a1
    50a2:	|   jsr -690(a6)
		FreeVec(kill);
    50a6:	|   move.l 12(sp),4(sp)
    50ac:	|   move.l 19c4c <SysBase>,d0
    50b2:	|   movea.l d0,a6
    50b4:	|   movea.l 4(sp),a1
    50b8:	|   jsr -690(a6)
	}
}
    50bc:	\-> nop
    50be:	    movea.l (sp)+,a6
    50c0:	    lea 12(sp),sp
    50c4:	    rts

000050c6 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    50c6:	movea.l 18132 <nowStatus>,a0
    50cc:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    50d2:	movea.l 18132 <nowStatus>,a0
    50d8:	move.l 8(sp),14(a0)
}
    50de:	nop
    50e0:	rts

000050e2 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    50e2:	       lea -100(sp),sp
    50e6:	       move.l a6,-(sp)
    50e8:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    50ea:	       movea.l 18132 <nowStatus>,a0
    50f0:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    50f4:	       movea.l 18132 <nowStatus>,a0
    50fa:	       move.w 4(a0),d0
    50fe:	       move.w d0,d0
    5100:	       andi.l #65535,d0
    5106:	       move.l 112(sp),-(sp)
    510a:	       move.l d0,-(sp)
    510c:	       jsr 8d0 <put2bytes>
    5112:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    5114:	       movea.l 18132 <nowStatus>,a0
    511a:	       move.l 6(a0),d0
    511e:	       move.l d0,d0
    5120:	       movea.w d0,a0
    5122:	       move.l 112(sp),-(sp)
    5126:	       move.l a0,-(sp)
    5128:	       jsr a9c <putSigned>
    512e:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    5130:	       movea.l 18132 <nowStatus>,a0
    5136:	       move.l 10(a0),d0
    513a:	       move.l 112(sp),-(sp)
    513e:	       move.l d0,-(sp)
    5140:	       jsr 8d0 <put2bytes>
    5146:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    5148:	       movea.l 18132 <nowStatus>,a0
    514e:	       move.l 14(a0),d0
    5152:	       move.l 112(sp),-(sp)
    5156:	       move.l d0,-(sp)
    5158:	       jsr 8d0 <put2bytes>
    515e:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    5160:	       move.l 112(sp),100(sp)
    5166:	       movea.l 18132 <nowStatus>,a0
    516c:	       move.l 18(a0),96(sp)
    5172:	       move.l 19c54 <DOSBase>,d0
    5178:	       movea.l d0,a6
    517a:	       move.l 100(sp),d1
    517e:	       move.l 96(sp),d2
    5182:	       jsr -312(a6)
    5186:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    518a:	       move.l 112(sp),88(sp)
    5190:	       movea.l 18132 <nowStatus>,a0
    5196:	       move.l 22(a0),84(sp)
    519c:	       move.l 19c54 <DOSBase>,d0
    51a2:	       movea.l d0,a6
    51a4:	       move.l 88(sp),d1
    51a8:	       move.l 84(sp),d2
    51ac:	       jsr -312(a6)
    51b0:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    51b4:	       move.l 112(sp),76(sp)
    51ba:	       movea.l 18132 <nowStatus>,a0
    51c0:	       move.l 26(a0),72(sp)
    51c6:	       move.l 19c54 <DOSBase>,d0
    51cc:	       movea.l d0,a6
    51ce:	       move.l 76(sp),d1
    51d2:	       move.l 72(sp),d2
    51d6:	       jsr -312(a6)
    51da:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    51de:	       move.l 112(sp),64(sp)
    51e4:	       movea.l 18132 <nowStatus>,a0
    51ea:	       move.l 30(a0),60(sp)
    51f0:	       move.l 19c54 <DOSBase>,d0
    51f6:	       movea.l d0,a6
    51f8:	       move.l 64(sp),d1
    51fc:	       move.l 60(sp),d2
    5200:	       jsr -312(a6)
    5204:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    5208:	       move.l 112(sp),52(sp)
    520e:	       movea.l 18132 <nowStatus>,a0
    5214:	       move.l 34(a0),48(sp)
    521a:	       move.l 19c54 <DOSBase>,d0
    5220:	       movea.l d0,a6
    5222:	       move.l 52(sp),d1
    5226:	       move.l 48(sp),d2
    522a:	       jsr -312(a6)
    522e:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    5232:	       move.l 112(sp),40(sp)
    5238:	       movea.l 18132 <nowStatus>,a0
    523e:	       move.l 38(a0),36(sp)
    5244:	       move.l 19c54 <DOSBase>,d0
    524a:	       movea.l d0,a6
    524c:	       move.l 40(sp),d1
    5250:	       move.l 36(sp),d2
    5254:	       jsr -312(a6)
    5258:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    525c:	   /-- bra.s 52a0 <saveStatusBars+0x1be>
		FPutC (fp,1);
    525e:	/--|-> move.l 112(sp),16(sp)
    5264:	|  |   moveq #1,d0
    5266:	|  |   move.l d0,12(sp)
    526a:	|  |   move.l 19c54 <DOSBase>,d0
    5270:	|  |   movea.l d0,a6
    5272:	|  |   move.l 16(sp),d1
    5276:	|  |   move.l 12(sp),d2
    527a:	|  |   jsr -312(a6)
    527e:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    5282:	|  |   movea.l 104(sp),a0
    5286:	|  |   move.l (a0),d0
    5288:	|  |   move.l 112(sp),-(sp)
    528c:	|  |   move.l d0,-(sp)
    528e:	|  |   jsr bd8 <writeString>
    5294:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    5296:	|  |   movea.l 104(sp),a0
    529a:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    52a0:	|  \-> tst.l 104(sp)
    52a4:	\----- bne.s 525e <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    52a6:	       move.l 112(sp),28(sp)
    52ac:	       clr.l 24(sp)
    52b0:	       move.l 19c54 <DOSBase>,d0
    52b6:	       movea.l d0,a6
    52b8:	       move.l 28(sp),d1
    52bc:	       move.l 24(sp),d2
    52c0:	       jsr -312(a6)
    52c4:	       move.l d0,20(sp)
}
    52c8:	       nop
    52ca:	       move.l (sp)+,d2
    52cc:	       movea.l (sp)+,a6
    52ce:	       lea 100(sp),sp
    52d2:	       rts

000052d4 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    52d4:	movea.l 18132 <nowStatus>,a0
    52da:	move.l 4(sp),6(a0)
}
    52e0:	nop
    52e2:	rts

000052e4 <setStatusBar>:

void setStatusBar (char * txt) {
    52e4:	    subq.l #4,sp
    52e6:	    move.l a6,-(sp)
    52e8:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    52ea:	    movea.l 18132 <nowStatus>,a0
    52f0:	    move.l (a0),d0
    52f2:	/-- beq.s 5326 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    52f4:	|   movea.l 18132 <nowStatus>,a0
    52fa:	|   movea.l (a0),a0
    52fc:	|   move.l (a0),8(sp)
    5300:	|   move.l 19c4c <SysBase>,d0
    5306:	|   movea.l d0,a6
    5308:	|   movea.l 8(sp),a1
    530c:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    5310:	|   movea.l 18132 <nowStatus>,a0
    5316:	|   movea.l (a0),a2
    5318:	|   move.l 16(sp),-(sp)
    531c:	|   jsr b8 <copyString>
    5322:	|   addq.l #4,sp
    5324:	|   move.l d0,(a2)
	}
}
    5326:	\-> nop
    5328:	    movea.l (sp)+,a2
    532a:	    movea.l (sp)+,a6
    532c:	    addq.l #4,sp
    532e:	    rts

00005330 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    5330:	       movea.l 18132 <nowStatus>,a0
    5336:	       move.l (a0),d0
    5338:	/----- beq.s 5346 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    533a:	|      movea.l 18132 <nowStatus>,a0
    5340:	|      movea.l (a0),a0
    5342:	|      move.l (a0),d0
    5344:	|  /-- bra.s 534c <statusBarText+0x1c>
	} else {
		return "";
    5346:	\--|-> move.l #80892,d0
	}
    534c:	   \-> rts

0000534e <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    534e:	       lea -28(sp),sp
    5352:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    5356:	       move.l 52(sp),-(sp)
    535a:	       jsr 1138e <stringWidth>
    5360:	       addq.l #4,sp
    5362:	       asr.l #1,d0
    5364:	       move.l d0,-(sp)
    5366:	       jsr 12e5c <__floatsisf>
    536c:	       addq.l #4,sp
    536e:	       move.l d0,d1
    5370:	       move.l 1814a <cameraZoom>,d0
    5376:	       move.l d0,-(sp)
    5378:	       move.l d1,-(sp)
    537a:	       jsr 12d08 <__divsf3>
    5380:	       addq.l #8,sp
    5382:	       move.l d0,-(sp)
    5384:	       jsr 12df4 <__fixsfsi>
    538a:	       addq.l #4,sp
    538c:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    5390:	       move.l 56(sp),d0
    5394:	       sub.l 44(sp),d0
    5398:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    539c:	       move.l 56(sp),d0
    53a0:	       add.l 44(sp),d0
    53a4:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    53a8:	       moveq #12,d0
    53aa:	       move.l d0,32(sp)
    53ae:	       clr.l 28(sp)
    53b2:	       move.l 19c4c <SysBase>,d0
    53b8:	       movea.l d0,a6
    53ba:	       move.l 32(sp),d0
    53be:	       move.l 28(sp),d1
    53c2:	       jsr -684(a6)
    53c6:	       move.l d0,24(sp)
    53ca:	       move.l 24(sp),d0
    53ce:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    53d2:	       movea.l 19ca8 <speech>,a0
    53d8:	       move.l 4(a0),d0
    53dc:	       movea.l 20(sp),a0
    53e0:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    53e4:	       move.l 52(sp),-(sp)
    53e8:	       jsr b8 <copyString>
    53ee:	       addq.l #4,sp
    53f0:	       movea.l 20(sp),a0
    53f4:	       move.l d0,(a0)
	newLine -> x = xx1;
    53f6:	       movea.l 20(sp),a0
    53fa:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    5400:	       movea.l 19ca8 <speech>,a0
    5406:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    540c:	       moveq #4,d0
    540e:	       cmp.l 40(sp),d0
    5412:	   /-- blt.s 5434 <addSpeechLine+0xe6>
    5414:	   |   movea.l 60(sp),a0
    5418:	   |   move.l (a0),d1
    541a:	   |   moveq #5,d0
    541c:	   |   sub.l 40(sp),d0
    5420:	   |   cmp.l d1,d0
    5422:	   +-- ble.s 5434 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    5424:	   |   moveq #5,d0
    5426:	   |   sub.l 40(sp),d0
    542a:	   |   movea.l 60(sp),a0
    542e:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    5430:	/--|-- bra.w 5560 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    5434:	|  \-> move.l 36(sp),-(sp)
    5438:	|      jsr 12e5c <__floatsisf>
    543e:	|      addq.l #4,sp
    5440:	|      move.l d0,d2
    5442:	|      move.l 19b4c <winWidth>,d0
    5448:	|      move.l d0,-(sp)
    544a:	|      jsr 12e84 <__floatunsisf>
    5450:	|      addq.l #4,sp
    5452:	|      move.l d0,d1
    5454:	|      move.l 1814a <cameraZoom>,d0
    545a:	|      move.l d0,-(sp)
    545c:	|      move.l d1,-(sp)
    545e:	|      jsr 12d08 <__divsf3>
    5464:	|      addq.l #8,sp
    5466:	|      move.l #1084227584,-(sp)
    546c:	|      move.l d0,-(sp)
    546e:	|      jsr 13150 <__subsf3>
    5474:	|      addq.l #8,sp
    5476:	|      move.l d0,-(sp)
    5478:	|      move.l d2,-(sp)
    547a:	|      jsr 12f44 <__gesf2>
    5480:	|      addq.l #8,sp
    5482:	|      tst.l d0
    5484:	|  /-- bge.s 548a <addSpeechLine+0x13c>
}
    5486:	+--|-- bra.w 5560 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    548a:	|  \-> movea.l 60(sp),a0
    548e:	|      move.l (a0),d0
    5490:	|      move.l d0,-(sp)
    5492:	|      jsr 12e5c <__floatsisf>
    5498:	|      addq.l #4,sp
    549a:	|      move.l d0,-(sp)
    549c:	|      jsr 12d74 <__extendsfdf2>
    54a2:	|      addq.l #4,sp
    54a4:	|      move.l d0,d4
    54a6:	|      move.l d1,d5
    54a8:	|      move.l 19b4c <winWidth>,d0
    54ae:	|      move.l d0,-(sp)
    54b0:	|      jsr 12e84 <__floatunsisf>
    54b6:	|      addq.l #4,sp
    54b8:	|      move.l d0,d1
    54ba:	|      move.l 1814a <cameraZoom>,d0
    54c0:	|      move.l d0,-(sp)
    54c2:	|      move.l d1,-(sp)
    54c4:	|      jsr 12d08 <__divsf3>
    54ca:	|      addq.l #8,sp
    54cc:	|      move.l d0,-(sp)
    54ce:	|      jsr 12d74 <__extendsfdf2>
    54d4:	|      addq.l #4,sp
    54d6:	|      clr.l -(sp)
    54d8:	|      move.l #1075052544,-(sp)
    54de:	|      move.l d1,-(sp)
    54e0:	|      move.l d0,-(sp)
    54e2:	|      jsr 130ee <__subdf3>
    54e8:	|      lea 16(sp),sp
    54ec:	|      move.l d0,d2
    54ee:	|      move.l d1,d3
    54f0:	|      move.l 36(sp),-(sp)
    54f4:	|      jsr 12e1c <__floatsidf>
    54fa:	|      addq.l #4,sp
    54fc:	|      move.l d1,-(sp)
    54fe:	|      move.l d0,-(sp)
    5500:	|      move.l d3,-(sp)
    5502:	|      move.l d2,-(sp)
    5504:	|      jsr 130ee <__subdf3>
    550a:	|      lea 16(sp),sp
    550e:	|      move.l d1,-(sp)
    5510:	|      move.l d0,-(sp)
    5512:	|      move.l d5,-(sp)
    5514:	|      move.l d4,-(sp)
    5516:	|      jsr 12f7a <__gtdf2>
    551c:	|      lea 16(sp),sp
    5520:	|      tst.l d0
    5522:	|  /-- bgt.s 5526 <addSpeechLine+0x1d8>
}
    5524:	+--|-- bra.s 5560 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    5526:	|  \-> move.l 19b4c <winWidth>,d0
    552c:	|      move.l d0,-(sp)
    552e:	|      jsr 12e84 <__floatunsisf>
    5534:	|      addq.l #4,sp
    5536:	|      move.l d0,d1
    5538:	|      move.l 1814a <cameraZoom>,d0
    553e:	|      move.l d0,-(sp)
    5540:	|      move.l d1,-(sp)
    5542:	|      jsr 12d08 <__divsf3>
    5548:	|      addq.l #8,sp
    554a:	|      move.l d0,-(sp)
    554c:	|      jsr 12df4 <__fixsfsi>
    5552:	|      addq.l #4,sp
    5554:	|      subq.l #5,d0
    5556:	|      sub.l 36(sp),d0
    555a:	|      movea.l 60(sp),a0
    555e:	|      move.l d0,(a0)
}
    5560:	\----> nop
    5562:	       movem.l (sp)+,d2-d5/a6
    5566:	       lea 28(sp),sp
    556a:	       rts

0000556c <initSpeech>:


void initSpeech () {
    556c:	       lea -12(sp),sp
    5570:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    5572:	       moveq #20,d0
    5574:	       move.l d0,12(sp)
    5578:	       clr.l 8(sp)
    557c:	       move.l 19c4c <SysBase>,d0
    5582:	       movea.l d0,a6
    5584:	       move.l 12(sp),d0
    5588:	       move.l 8(sp),d1
    558c:	       jsr -684(a6)
    5590:	       move.l d0,4(sp)
    5594:	       move.l 4(sp),d0
    5598:	       move.l d0,19ca8 <speech>
	if (speech) {
    559e:	       move.l 19ca8 <speech>,d0
    55a4:	/----- beq.s 55d0 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    55a6:	|      movea.l 19ca8 <speech>,a0
    55ac:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    55ae:	|      movea.l 19ca8 <speech>,a0
    55b4:	|      clr.l 4(a0)
		speech -> speechY = 0;
    55b8:	|      movea.l 19ca8 <speech>,a0
    55be:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    55c2:	|      movea.l 19ca8 <speech>,a0
    55c8:	|      moveq #-1,d0
    55ca:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    55ce:	|  /-- bra.s 55de <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    55d0:	\--|-> pea 15a24 <incbin_player_end+0xe6>
    55d6:	   |   jsr 12a04 <KPrintF>
    55dc:	   |   addq.l #4,sp
}
    55de:	   \-> nop
    55e0:	       movea.l (sp)+,a6
    55e2:	       lea 12(sp),sp
    55e6:	       rts

000055e8 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    55e8:	       movea.l 19ca8 <speech>,a0
    55ee:	       move.l 4(a0),d0
    55f2:	/----- beq.s 5600 <isThereAnySpeechGoingOn+0x18>
    55f4:	|      movea.l 19ca8 <speech>,a0
    55fa:	|      move.l 16(a0),d0
    55fe:	|  /-- bra.s 5602 <isThereAnySpeechGoingOn+0x1a>
    5600:	\--|-> moveq #-1,d0
}
    5602:	   \-> rts

00005604 <killAllSpeech>:

void killAllSpeech () {
    5604:	       lea -12(sp),sp
    5608:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    560a:	       movea.l 19ca8 <speech>,a0
    5610:	       move.l 12(a0),d0
    5614:	       moveq #-1,d1
    5616:	       cmp.l d0,d1
    5618:	   /-- beq.s 5626 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    561a:	   |   movea.l 19ca8 <speech>,a0
    5620:	   |   moveq #-1,d0
    5622:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    5626:	   \-> movea.l 19ca8 <speech>,a0
    562c:	       move.l (a0),d0
    562e:	/----- beq.w 56ba <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    5632:	|      movea.l 19ca8 <speech>,a0
    5638:	|      move.l (a0),d0
    563a:	|      lea -120(sp),sp
    563e:	|      move.l sp,d1
    5640:	|      movea.l d0,a0
    5642:	|      moveq #120,d0
    5644:	|      move.l d0,-(sp)
    5646:	|      move.l a0,-(sp)
    5648:	|      move.l d1,-(sp)
    564a:	|      jsr 129b8 <memcpy>
    5650:	|      lea 12(sp),sp
    5654:	|      jsr 70fa <makeSilent>
    565a:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    565e:	|      movea.l 19ca8 <speech>,a0
    5664:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    5666:	+----- bra.s 56ba <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    5668:	|  /-> movea.l 19ca8 <speech>,a0
    566e:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    5674:	|  |   movea.l 19ca8 <speech>,a0
    567a:	|  |   movea.l 4(a0),a1
    567e:	|  |   movea.l 19ca8 <speech>,a0
    5684:	|  |   move.l 4(a1),d0
    5688:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    568c:	|  |   movea.l 12(sp),a0
    5690:	|  |   move.l (a0),8(sp)
    5694:	|  |   move.l 19c4c <SysBase>,d0
    569a:	|  |   movea.l d0,a6
    569c:	|  |   movea.l 8(sp),a1
    56a0:	|  |   jsr -690(a6)
		FreeVec(killMe);
    56a4:	|  |   move.l 12(sp),4(sp)
    56aa:	|  |   move.l 19c4c <SysBase>,d0
    56b0:	|  |   movea.l d0,a6
    56b2:	|  |   movea.l 4(sp),a1
    56b6:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    56ba:	\--|-> movea.l 19ca8 <speech>,a0
    56c0:	   |   move.l 4(a0),d0
    56c4:	   \-- bne.s 5668 <killAllSpeech+0x64>
	}
}
    56c6:	       nop
    56c8:	       nop
    56ca:	       movea.l (sp)+,a6
    56cc:	       lea 12(sp),sp
    56d0:	       rts

000056d2 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    56d2:	pea 2 <_start+0x2>
    56d6:	move.l 8(sp),-(sp)
    56da:	jsr 5832 <setFrames>
    56e0:	addq.l #8,sp
}
    56e2:	nop
    56e4:	rts

000056e6 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    56e6:	       lea -52(sp),sp
    56ea:	       move.l a6,-(sp)
    56ec:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    56ee:	       movea.l 64(sp),a0
    56f2:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    56f8:	       move.l 18136 <speechSpeed>,d0
    56fe:	       move.l 68(sp),-(sp)
    5702:	       move.l d0,-(sp)
    5704:	       jsr a46 <putFloat>
    570a:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    570c:	       movea.l 64(sp),a0
    5710:	       move.l 8(a0),d0
    5714:	       move.l 68(sp),-(sp)
    5718:	       move.l d0,-(sp)
    571a:	       jsr 8d0 <put2bytes>
    5720:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    5722:	       movea.l 64(sp),a0
    5726:	       move.l 16(a0),d0
    572a:	       move.l 68(sp),-(sp)
    572e:	       move.l d0,-(sp)
    5730:	       jsr 8d0 <put2bytes>
    5736:	       addq.l #8,sp
		if (sS -> currentTalker) {
    5738:	       movea.l 64(sp),a0
    573c:	       move.l (a0),d0
    573e:	   /-- beq.s 5782 <saveSpeech+0x9c>
			FPutC (fp, 1);
    5740:	   |   move.l 68(sp),40(sp)
    5746:	   |   moveq #1,d0
    5748:	   |   move.l d0,36(sp)
    574c:	   |   move.l 19c54 <DOSBase>,d0
    5752:	   |   movea.l d0,a6
    5754:	   |   move.l 40(sp),d1
    5758:	   |   move.l 36(sp),d2
    575c:	   |   jsr -312(a6)
    5760:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    5764:	   |   movea.l 64(sp),a0
    5768:	   |   movea.l (a0),a0
    576a:	   |   movea.l 102(a0),a0
    576e:	   |   move.l 4(a0),d0
    5772:	   |   move.l 68(sp),-(sp)
    5776:	   |   move.l d0,-(sp)
    5778:	   |   jsr 8d0 <put2bytes>
    577e:	   |   addq.l #8,sp
    5780:	/--|-- bra.s 57fe <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    5782:	|  \-> move.l 68(sp),52(sp)
    5788:	|      clr.l 48(sp)
    578c:	|      move.l 19c54 <DOSBase>,d0
    5792:	|      movea.l d0,a6
    5794:	|      move.l 52(sp),d1
    5798:	|      move.l 48(sp),d2
    579c:	|      jsr -312(a6)
    57a0:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    57a4:	+----- bra.s 57fe <saveSpeech+0x118>
			FPutC (fp, 1);
    57a6:	|  /-> move.l 68(sp),16(sp)
    57ac:	|  |   moveq #1,d0
    57ae:	|  |   move.l d0,12(sp)
    57b2:	|  |   move.l 19c54 <DOSBase>,d0
    57b8:	|  |   movea.l d0,a6
    57ba:	|  |   move.l 16(sp),d1
    57be:	|  |   move.l 12(sp),d2
    57c2:	|  |   jsr -312(a6)
    57c6:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    57ca:	|  |   movea.l 56(sp),a0
    57ce:	|  |   move.l (a0),d0
    57d0:	|  |   move.l 68(sp),-(sp)
    57d4:	|  |   move.l d0,-(sp)
    57d6:	|  |   jsr bd8 <writeString>
    57dc:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    57de:	|  |   movea.l 56(sp),a0
    57e2:	|  |   move.l 8(a0),d0
    57e6:	|  |   move.l 68(sp),-(sp)
    57ea:	|  |   move.l d0,-(sp)
    57ec:	|  |   jsr 8d0 <put2bytes>
    57f2:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    57f4:	|  |   movea.l 56(sp),a0
    57f8:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    57fe:	\--|-> tst.l 56(sp)
    5802:	   \-- bne.s 57a6 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    5804:	       move.l 68(sp),28(sp)
    580a:	       clr.l 24(sp)
    580e:	       move.l 19c54 <DOSBase>,d0
    5814:	       movea.l d0,a6
    5816:	       move.l 28(sp),d1
    581a:	       move.l 24(sp),d2
    581e:	       jsr -312(a6)
    5822:	       move.l d0,20(sp)
}
    5826:	       nop
    5828:	       move.l (sp)+,d2
    582a:	       movea.l (sp)+,a6
    582c:	       lea 52(sp),sp
    5830:	       rts

00005832 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    5832:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    5834:	movea.l 8(sp),a0
    5838:	movea.l 68(a0),a0
    583c:	move.l (a0),d2
    583e:	movea.l 8(sp),a0
    5842:	movea.l 68(a0),a0
    5846:	move.l 4(a0),d0
    584a:	move.l 12(sp),-(sp)
    584e:	move.l d0,-(sp)
    5850:	jsr 133b6 <__mulsi3>
    5856:	addq.l #8,sp
    5858:	move.l d0,d1
    585a:	movea.l 8(sp),a0
    585e:	move.l 94(a0),d0
    5862:	add.l d1,d0
    5864:	add.l d0,d0
    5866:	add.l d0,d0
    5868:	movea.l d2,a0
    586a:	adda.l d0,a0
    586c:	move.l (a0),d0
    586e:	movea.l 8(sp),a0
    5872:	move.l d0,60(a0)
}
    5876:	nop
    5878:	move.l (sp)+,d2
    587a:	rts

0000587c <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    587c:	       lea -20(sp),sp
    5880:	       move.l d2,-(sp)
    5882:	       move.l 40(sp),d0
    5886:	       move.w d0,d0
    5888:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    588c:	       movea.l 19ca8 <speech>,a0
    5892:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    5898:	       move.l 32(sp),-(sp)
    589c:	       jsr 6be4 <findPerson>
    58a2:	       addq.l #4,sp
    58a4:	       move.l d0,16(sp)
    if (thisPerson) {
    58a8:	   /-- beq.s 58ce <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    58aa:	   |   movea.w 6(sp),a0
    58ae:	   |   move.l a0,-(sp)
    58b0:	   |   move.l 40(sp),-(sp)
    58b4:	   |   move.l 24(sp),-(sp)
    58b8:	   |   move.l 40(sp),-(sp)
    58bc:	   |   jsr 5994 <wrapSpeechPerson>
    58c2:	   |   lea 16(sp),sp
    58c6:	   |   move.l d0,20(sp)
    58ca:	/--|-- bra.w 5988 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    58ce:	|  \-> move.l 32(sp),-(sp)
    58d2:	|      jsr 1147a <getRegionForObject>
    58d8:	|      addq.l #4,sp
    58da:	|      move.l d0,12(sp)
        if (thisRegion) {
    58de:	|  /-- beq.s 594a <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    58e0:	|  |   movea.l 12(sp),a0
    58e4:	|  |   movea.l 28(a0),a0
    58e8:	|  |   move.l 28(a0),d0
    58ec:	|  |   movea.l 12(sp),a0
    58f0:	|  |   movea.l 4(a0),a1
    58f4:	|  |   movea.l 12(sp),a0
    58f8:	|  |   movea.l 28(a0),a0
    58fc:	|  |   move.l 20(a0),d1
    5900:	|  |   movea.l a1,a0
    5902:	|  |   suba.l d1,a0
    5904:	|  |   move.l 19d06 <cameraY>,d1
    590a:	|  |   movea.l a0,a1
    590c:	|  |   suba.l d1,a1
    590e:	|  |   movea.l 12(sp),a0
    5912:	|  |   move.l (a0),d2
    5914:	|  |   movea.l 12(sp),a0
    5918:	|  |   move.l 8(a0),d1
    591c:	|  |   add.l d2,d1
    591e:	|  |   move.l d1,d2
    5920:	|  |   asr.l #1,d2
    5922:	|  |   move.l 19d02 <cameraX>,d1
    5928:	|  |   movea.l d2,a0
    592a:	|  |   suba.l d1,a0
    592c:	|  |   move.l 36(sp),-(sp)
    5930:	|  |   move.l d0,-(sp)
    5932:	|  |   move.l a1,-(sp)
    5934:	|  |   move.l a0,-(sp)
    5936:	|  |   move.l 44(sp),-(sp)
    593a:	|  |   jsr 5ab2 <wrapSpeechXY>
    5940:	|  |   lea 20(sp),sp
    5944:	|  |   move.l d0,20(sp)
    5948:	+--|-- bra.s 5988 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    594a:	|  \-> move.l 32(sp),-(sp)
    594e:	|      jsr 9802 <findObjectType>
    5954:	|      addq.l #4,sp
    5956:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    595a:	|      movea.l 8(sp),a0
    595e:	|      move.l 28(a0),d1
    5962:	|      move.l 19b4c <winWidth>,d0
    5968:	|      lsr.l #1,d0
    596a:	|      move.l 36(sp),-(sp)
    596e:	|      move.l d1,-(sp)
    5970:	|      pea a <_start+0xa>
    5974:	|      move.l d0,-(sp)
    5976:	|      move.l 44(sp),-(sp)
    597a:	|      jsr 5ab2 <wrapSpeechXY>
    5980:	|      lea 20(sp),sp
    5984:	|      move.l d0,20(sp)
        }
    }
    return i;
    5988:	\----> move.l 20(sp),d0
}
    598c:	       move.l (sp)+,d2
    598e:	       lea 20(sp),sp
    5992:	       rts

00005994 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    5994:	    subq.l #8,sp
    5996:	    movem.l d2-d4,-(sp)
    599a:	    move.l 36(sp),d0
    599e:	    move.w d0,d0
    59a0:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    59a4:	    movea.l 28(sp),a0
    59a8:	    movea.l 102(a0),a0
    59ac:	    move.l 28(a0),d2
    59b0:	    movea.l 28(sp),a0
    59b4:	    move.l 4(a0),d3
    59b8:	    move.l 19d06 <cameraY>,d0
    59be:	    move.l d0,-(sp)
    59c0:	    jsr 12e5c <__floatsisf>
    59c6:	    addq.l #4,sp
    59c8:	    move.l d0,-(sp)
    59ca:	    move.l d3,-(sp)
    59cc:	    jsr 13150 <__subsf3>
    59d2:	    addq.l #8,sp
    59d4:	    move.l d0,d3
    59d6:	    movea.l 28(sp),a0
    59da:	    move.l 20(a0),d4
    59de:	    movea.l 28(sp),a0
    59e2:	    move.l 8(a0),d1
    59e6:	    movea.l 28(sp),a0
    59ea:	    move.l 12(a0),d0
    59ee:	    sub.l d0,d1
    59f0:	    move.l d1,-(sp)
    59f2:	    jsr 12e5c <__floatsisf>
    59f8:	    addq.l #4,sp
    59fa:	    move.l d0,-(sp)
    59fc:	    move.l d4,-(sp)
    59fe:	    jsr 12f0e <__mulsf3>
    5a04:	    addq.l #8,sp
    5a06:	    move.l d0,-(sp)
    5a08:	    move.l d3,-(sp)
    5a0a:	    jsr 13150 <__subsf3>
    5a10:	    addq.l #8,sp
    5a12:	    move.l d0,d3
    5a14:	    movea.l 28(sp),a0
    5a18:	    movea.l 102(a0),a0
    5a1c:	    move.l 20(a0),d0
    5a20:	    move.l d0,-(sp)
    5a22:	    jsr 12e5c <__floatsisf>
    5a28:	    addq.l #4,sp
    5a2a:	    move.l d0,-(sp)
    5a2c:	    move.l d3,-(sp)
    5a2e:	    jsr 13150 <__subsf3>
    5a34:	    addq.l #8,sp
    5a36:	    move.l d0,-(sp)
    5a38:	    jsr 12df4 <__fixsfsi>
    5a3e:	    addq.l #4,sp
    5a40:	    move.l d0,d4
    5a42:	    movea.l 28(sp),a0
    5a46:	    move.l (a0),d3
    5a48:	    move.l 19d02 <cameraX>,d0
    5a4e:	    move.l d0,-(sp)
    5a50:	    jsr 12e5c <__floatsisf>
    5a56:	    addq.l #4,sp
    5a58:	    move.l d0,-(sp)
    5a5a:	    move.l d3,-(sp)
    5a5c:	    jsr 13150 <__subsf3>
    5a62:	    addq.l #8,sp
    5a64:	    move.l d0,-(sp)
    5a66:	    jsr 12df4 <__fixsfsi>
    5a6c:	    addq.l #4,sp
    5a6e:	    move.l 32(sp),-(sp)
    5a72:	    move.l d2,-(sp)
    5a74:	    move.l d4,-(sp)
    5a76:	    move.l d0,-(sp)
    5a78:	    move.l 40(sp),-(sp)
    5a7c:	    jsr 5ab2 <wrapSpeechXY>
    5a82:	    lea 20(sp),sp
    5a86:	    move.l d0,16(sp)
	if (animPerson) {
    5a8a:	    tst.w 14(sp)
    5a8e:	/-- beq.s 5aa6 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    5a90:	|   move.l 28(sp),-(sp)
    5a94:	|   jsr 56d2 <makeTalker>
    5a9a:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    5a9c:	|   movea.l 19ca8 <speech>,a0
    5aa2:	|   move.l 28(sp),(a0)
	}
	return i;
    5aa6:	\-> move.l 16(sp),d0
}
    5aaa:	    movem.l (sp)+,d2-d4
    5aae:	    addq.l #8,sp
    5ab0:	    rts

00005ab2 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    5ab2:	                   lea -16(sp),sp
    5ab6:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    5aba:	                   clr.l 16(sp)
    killAllSpeech();
    5abe:	                   jsr 5604 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    5ac4:	                   move.l 36(sp),-(sp)
    5ac8:	                   jsr fe9c <strlen>
    5ace:	                   addq.l #4,sp
    5ad0:	                   movea.l d0,a0
    5ad2:	                   lea 20(a0),a0
    5ad6:	                   move.l a0,-(sp)
    5ad8:	                   jsr 12e84 <__floatunsisf>
    5ade:	                   addq.l #4,sp
    5ae0:	                   move.l d0,d1
    5ae2:	                   move.l 18136 <speechSpeed>,d0
    5ae8:	                   move.l d0,-(sp)
    5aea:	                   move.l d1,-(sp)
    5aec:	                   jsr 12f0e <__mulsf3>
    5af2:	                   addq.l #8,sp
    5af4:	                   move.l d0,-(sp)
    5af6:	                   jsr 12df4 <__fixsfsi>
    5afc:	                   addq.l #4,sp
    5afe:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    5b02:	               /-- bgt.s 5b0a <wrapSpeechXY+0x58>
    5b04:	               |   moveq #1,d0
    5b06:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    5b0a:	               \-> moveq #-1,d1
    5b0c:	                   cmp.l 52(sp),d1
    5b10:	               /-- beq.s 5b50 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    5b12:	               |   move.l 19d16 <speechMode>,d0
    5b18:	               +-- ble.s 5b50 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    5b1a:	               |   clr.l -(sp)
    5b1c:	               |   move.l 56(sp),-(sp)
    5b20:	               |   jsr 9516 <startSound>
    5b26:	               |   addq.l #8,sp
    5b28:	               |   tst.w d0
    5b2a:	               +-- beq.s 5b50 <wrapSpeechXY+0x9e>
                speechTime = -10;
    5b2c:	               |   moveq #-10,d0
    5b2e:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    5b32:	               |   movea.l 19ca8 <speech>,a0
    5b38:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    5b3e:	               |   move.l 19d16 <speechMode>,d0
    5b44:	               |   moveq #2,d1
    5b46:	               |   cmp.l d0,d1
    5b48:	               +-- bne.s 5b50 <wrapSpeechXY+0x9e>
    5b4a:	               |   moveq #-10,d0
    5b4c:	/--------------|-- bra.w 5dd6 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    5b50:	|              \-> movea.l 19ca8 <speech>,a0
    5b56:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    5b5c:	|     /----------- bra.w 5c10 <wrapSpeechXY+0x15e>
        a = wrap;
    5b60:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    5b66:	|  |  |        /-- bra.s 5b76 <wrapSpeechXY+0xc4>
            a--;
    5b68:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    5b6c:	|  |  |  |     +-- bne.s 5b76 <wrapSpeechXY+0xc4>
                a = wrap;
    5b6e:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    5b74:	|  |  |  |  /--|-- bra.s 5b88 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    5b76:	|  |  |  |  |  \-> move.l 28(sp),d0
    5b7a:	|  |  |  |  |      movea.l 36(sp),a0
    5b7e:	|  |  |  |  |      adda.l d0,a0
    5b80:	|  |  |  |  |      move.b (a0),d0
    5b82:	|  |  |  |  |      cmpi.b #32,d0
    5b86:	|  |  |  \--|----- bne.s 5b68 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    5b88:	|  |  |     \----> move.l 28(sp),d0
    5b8c:	|  |  |            movea.l 36(sp),a0
    5b90:	|  |  |            adda.l d0,a0
    5b92:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    5b94:	|  |  |            lea 16(sp),a0
    5b98:	|  |  |            move.l a0,-(sp)
    5b9a:	|  |  |            move.l 44(sp),-(sp)
    5b9e:	|  |  |            move.l 44(sp),-(sp)
    5ba2:	|  |  |            jsr 534e <addSpeechLine>
    5ba8:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    5bac:	|  |  |            move.l 28(sp),d0
    5bb0:	|  |  |            movea.l 36(sp),a0
    5bb4:	|  |  |            adda.l d0,a0
    5bb6:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    5bba:	|  |  |            move.l 28(sp),d0
    5bbe:	|  |  |            addq.l #1,d0
    5bc0:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    5bc4:	|  |  |            move.l 44(sp),-(sp)
    5bc8:	|  |  |            jsr 12e5c <__floatsisf>
    5bce:	|  |  |            addq.l #4,sp
    5bd0:	|  |  |            move.l d0,d2
    5bd2:	|  |  |            move.l 19d3c <fontHeight>,d0
    5bd8:	|  |  |            move.l d0,-(sp)
    5bda:	|  |  |            jsr 12e5c <__floatsisf>
    5be0:	|  |  |            addq.l #4,sp
    5be2:	|  |  |            move.l d0,d1
    5be4:	|  |  |            move.l 1814a <cameraZoom>,d0
    5bea:	|  |  |            move.l d0,-(sp)
    5bec:	|  |  |            move.l d1,-(sp)
    5bee:	|  |  |            jsr 12d08 <__divsf3>
    5bf4:	|  |  |            addq.l #8,sp
    5bf6:	|  |  |            move.l d0,-(sp)
    5bf8:	|  |  |            move.l d2,-(sp)
    5bfa:	|  |  |            jsr 13150 <__subsf3>
    5c00:	|  |  |            addq.l #8,sp
    5c02:	|  |  |            move.l d0,-(sp)
    5c04:	|  |  |            jsr 12df4 <__fixsfsi>
    5c0a:	|  |  |            addq.l #4,sp
    5c0c:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    5c10:	|  |  \----------> move.l 36(sp),-(sp)
    5c14:	|  |               jsr fe9c <strlen>
    5c1a:	|  |               addq.l #4,sp
    5c1c:	|  |               move.l d0,d1
    5c1e:	|  |               move.l 48(sp),d0
    5c22:	|  |               cmp.l d1,d0
    5c24:	|  \-------------- bcs.w 5b60 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    5c28:	|                  lea 16(sp),a0
    5c2c:	|                  move.l a0,-(sp)
    5c2e:	|                  move.l 44(sp),-(sp)
    5c32:	|                  move.l 44(sp),-(sp)
    5c36:	|                  jsr 534e <addSpeechLine>
    5c3c:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    5c40:	|                  move.l 44(sp),-(sp)
    5c44:	|                  jsr 12e5c <__floatsisf>
    5c4a:	|                  addq.l #4,sp
    5c4c:	|                  move.l d0,d2
    5c4e:	|                  move.l 19d3c <fontHeight>,d0
    5c54:	|                  move.l d0,-(sp)
    5c56:	|                  jsr 12e5c <__floatsisf>
    5c5c:	|                  addq.l #4,sp
    5c5e:	|                  move.l d0,d1
    5c60:	|                  move.l 1814a <cameraZoom>,d0
    5c66:	|                  move.l d0,-(sp)
    5c68:	|                  move.l d1,-(sp)
    5c6a:	|                  jsr 12d08 <__divsf3>
    5c70:	|                  addq.l #8,sp
    5c72:	|                  move.l d0,-(sp)
    5c74:	|                  move.l d2,-(sp)
    5c76:	|                  jsr 13150 <__subsf3>
    5c7c:	|                  addq.l #8,sp
    5c7e:	|                  move.l d0,-(sp)
    5c80:	|                  jsr 12df4 <__fixsfsi>
    5c86:	|                  addq.l #4,sp
    5c88:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    5c8c:	|              /-- bpl.s 5caa <wrapSpeechXY+0x1f8>
    5c8e:	|              |   movea.l 19ca8 <speech>,a0
    5c94:	|              |   move.l 8(a0),d0
    5c98:	|              |   movea.l 19ca8 <speech>,a0
    5c9e:	|              |   sub.l 44(sp),d0
    5ca2:	|              |   move.l d0,8(a0)
    5ca6:	|           /--|-- bra.w 5d98 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    5caa:	|           |  \-> movea.l 19ca8 <speech>,a0
    5cb0:	|           |      move.l 8(a0),d0
    5cb4:	|           |      move.l d0,-(sp)
    5cb6:	|           |      jsr 12e5c <__floatsisf>
    5cbc:	|           |      addq.l #4,sp
    5cbe:	|           |      move.l d0,d2
    5cc0:	|           |      move.l 19d06 <cameraY>,d0
    5cc6:	|           |      move.l d0,-(sp)
    5cc8:	|           |      jsr 12e5c <__floatsisf>
    5cce:	|           |      addq.l #4,sp
    5cd0:	|           |      move.l d0,d3
    5cd2:	|           |      move.l 19b50 <winHeight>,d4
    5cd8:	|           |      move.l 19d3c <fontHeight>,d0
    5cde:	|           |      pea 3 <_start+0x3>
    5ce2:	|           |      move.l d0,-(sp)
    5ce4:	|           |      jsr 13434 <__divsi3>
    5cea:	|           |      addq.l #8,sp
    5cec:	|           |      move.l d4,d1
    5cee:	|           |      sub.l d0,d1
    5cf0:	|           |      move.l d1,-(sp)
    5cf2:	|           |      jsr 12e84 <__floatunsisf>
    5cf8:	|           |      addq.l #4,sp
    5cfa:	|           |      move.l d0,d1
    5cfc:	|           |      move.l 1814a <cameraZoom>,d0
    5d02:	|           |      move.l d0,-(sp)
    5d04:	|           |      move.l d1,-(sp)
    5d06:	|           |      jsr 12d08 <__divsf3>
    5d0c:	|           |      addq.l #8,sp
    5d0e:	|           |      move.l d0,-(sp)
    5d10:	|           |      move.l d3,-(sp)
    5d12:	|           |      jsr 12c0e <__addsf3>
    5d18:	|           |      addq.l #8,sp
    5d1a:	|           |      move.l d0,-(sp)
    5d1c:	|           |      move.l d2,-(sp)
    5d1e:	|           |      jsr 12fc8 <__gtsf2>
    5d24:	|           |      addq.l #8,sp
    5d26:	|           |      tst.l d0
    5d28:	|           +----- ble.s 5d98 <wrapSpeechXY+0x2e6>
    5d2a:	|           |      move.l 19d06 <cameraY>,d0
    5d30:	|           |      move.l d0,-(sp)
    5d32:	|           |      jsr 12e5c <__floatsisf>
    5d38:	|           |      addq.l #4,sp
    5d3a:	|           |      move.l d0,d2
    5d3c:	|           |      move.l 19b50 <winHeight>,d3
    5d42:	|           |      move.l 19d3c <fontHeight>,d0
    5d48:	|           |      pea 3 <_start+0x3>
    5d4c:	|           |      move.l d0,-(sp)
    5d4e:	|           |      jsr 13434 <__divsi3>
    5d54:	|           |      addq.l #8,sp
    5d56:	|           |      move.l d3,d1
    5d58:	|           |      sub.l d0,d1
    5d5a:	|           |      move.l d1,-(sp)
    5d5c:	|           |      jsr 12e84 <__floatunsisf>
    5d62:	|           |      addq.l #4,sp
    5d64:	|           |      move.l d0,d1
    5d66:	|           |      move.l 1814a <cameraZoom>,d0
    5d6c:	|           |      move.l d0,-(sp)
    5d6e:	|           |      move.l d1,-(sp)
    5d70:	|           |      jsr 12d08 <__divsf3>
    5d76:	|           |      addq.l #8,sp
    5d78:	|           |      move.l d0,-(sp)
    5d7a:	|           |      move.l d2,-(sp)
    5d7c:	|           |      jsr 12c0e <__addsf3>
    5d82:	|           |      addq.l #8,sp
    5d84:	|           |      movea.l 19ca8 <speech>,a2
    5d8a:	|           |      move.l d0,-(sp)
    5d8c:	|           |      jsr 12df4 <__fixsfsi>
    5d92:	|           |      addq.l #4,sp
    5d94:	|           |      move.l d0,8(a2)

    if (offset) {
    5d98:	|           \----> move.l 16(sp),d0
    5d9c:	|        /-------- beq.s 5dd2 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    5d9e:	|        |         movea.l 19ca8 <speech>,a0
    5da4:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    5daa:	|        |     /-- bra.s 5dcc <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    5dac:	|        |  /--|-> movea.l 20(sp),a0
    5db0:	|        |  |  |   move.l 8(a0),d1
    5db4:	|        |  |  |   move.l 16(sp),d0
    5db8:	|        |  |  |   add.l d1,d0
    5dba:	|        |  |  |   movea.l 20(sp),a0
    5dbe:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    5dc2:	|        |  |  |   movea.l 20(sp),a0
    5dc6:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    5dcc:	|        |  |  \-> tst.l 20(sp)
    5dd0:	|        |  \----- bne.s 5dac <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    5dd2:	|        \-------> move.l 24(sp),d0
}
    5dd6:	\----------------> movem.l (sp)+,d2-d4/a2
    5dda:	                   lea 16(sp),sp
    5dde:	                   rts

00005de0 <loadSpriteBank>:
#include <exec/types.h>

#include "sprites.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    5de0:	subq.l #4,sp
    5de2:	move.l 16(sp),d0
    5de6:	move.w d0,d0
    5de8:	move.w d0,2(sp)
    KPrintF("loadSpriteBank: Not implemented"); //Amiga Todo
    5dec:	pea 15a61 <incbin_player_end+0x123>
    5df2:	jsr 12a04 <KPrintF>
    5df8:	addq.l #4,sp
    return TRUE;
    5dfa:	moveq #1,d0
}    
    5dfc:	addq.l #4,sp
    5dfe:	rts

00005e00 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    5e00:	    move.l 4(sp),d0
    5e04:	/-- bpl.s 5e08 <TF_abs+0x8>
    5e06:	|   neg.l d0
}
    5e08:	\-> rts

00005e0a <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    5e0a:	             lea -28(sp),sp
    5e0e:	             move.l a6,-(sp)
    5e10:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    5e12:	             moveq #120,d0
    5e14:	             move.l d0,28(sp)
    5e18:	             clr.l 24(sp)
    5e1c:	             move.l 19c4c <SysBase>,d0
    5e22:	             movea.l d0,a6
    5e24:	             move.l 28(sp),d0
    5e28:	             move.l 24(sp),d1
    5e2c:	             jsr -684(a6)
    5e30:	             move.l d0,20(sp)
    5e34:	             move.l 20(sp),d0
    5e38:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    5e3c:	         /-- bne.s 5e44 <addPerson+0x3a>
    5e3e:	         |   clr.w d0
    5e40:	/--------|-- bra.w 6072 <addPerson+0x268>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    5e44:	|        \-> move.l 48(sp),-(sp)
    5e48:	|            jsr 98f2 <loadObjectType>
    5e4e:	|            addq.l #4,sp
    5e50:	|            movea.l 16(sp),a0
    5e54:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    5e58:	|            movea.l 16(sp),a0
    5e5c:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    5e64:	|            movea.l 16(sp),a0
    5e68:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    5e6c:	|            movea.l 16(sp),a0
    5e70:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    5e74:	|            move.l 44(sp),-(sp)
    5e78:	|            jsr 12e5c <__floatsisf>
    5e7e:	|            addq.l #4,sp
    5e80:	|            move.l d0,d2
    5e82:	|            move.l 40(sp),-(sp)
    5e86:	|            jsr 12e5c <__floatsisf>
    5e8c:	|            addq.l #4,sp
    5e8e:	|            move.l d2,-(sp)
    5e90:	|            move.l d0,-(sp)
    5e92:	|            move.l 24(sp),-(sp)
    5e96:	|            jsr 732c <moveAndScale>
    5e9c:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    5ea0:	|            movea.l 16(sp),a0
    5ea4:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    5ea8:	|            movea.l 16(sp),a0
    5eac:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    5eb2:	|            movea.l 16(sp),a0
    5eb6:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    5ebc:	|            movea.l 16(sp),a0
    5ec0:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    5ec4:	|            movea.l 16(sp),a0
    5ec8:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    5ecc:	|            movea.l 16(sp),a0
    5ed0:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    5ed6:	|            movea.l 16(sp),a0
    5eda:	|            clr.l 94(a0)
    newPerson->angle = 180;
    5ede:	|            movea.l 16(sp),a0
    5ee2:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    5eea:	|            movea.l 16(sp),a0
    5eee:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    5ef6:	|            movea.l 16(sp),a0
    5efa:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    5efe:	|            movea.l 16(sp),a0
    5f02:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    5f06:	|            movea.l 16(sp),a0
    5f0a:	|            movea.l 102(a0),a0
    5f0e:	|            move.l 24(a0),d0
    5f12:	|            movea.l 16(sp),a0
    5f16:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    5f1a:	|            movea.l 16(sp),a0
    5f1e:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    5f22:	|            movea.l 16(sp),a0
    5f26:	|            movea.l 102(a0),a0
    5f2a:	|            move.l 32(a0),d0
    5f2e:	|            movea.l 16(sp),a0
    5f32:	|            move.l d0,110(a0)
    newPerson->r = 0;
    5f36:	|            movea.l 16(sp),a0
    5f3a:	|            clr.b 114(a0)
    newPerson->g = 0;
    5f3e:	|            movea.l 16(sp),a0
    5f42:	|            clr.b 115(a0)
    newPerson->b = 0;
    5f46:	|            movea.l 16(sp),a0
    5f4a:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    5f4e:	|            movea.l 16(sp),a0
    5f52:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    5f56:	|            movea.l 16(sp),a0
    5f5a:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    5f5e:	|            movea.l 16(sp),a0
    5f62:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    5f68:	|            clr.l -(sp)
    5f6a:	|            move.l 20(sp),-(sp)
    5f6e:	|            jsr 5832 <setFrames>
    5f74:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    5f76:	|            movea.l 52(sp),a0
    5f7a:	|            movea.l (a0),a0
    5f7c:	|            movea.l (a0),a0
    5f7e:	|            movea.l 4(a0),a0
    5f82:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    5f86:	|     /----- bpl.s 5f90 <addPerson+0x186>
    5f88:	|     |      move.l 12(sp),d0
    5f8c:	|     |      neg.l d0
    5f8e:	|     |  /-- bra.s 5f92 <addPerson+0x188>
    5f90:	|     \--|-> moveq #1,d0
    5f92:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    5f96:	|            movea.l 52(sp),a0
    5f9a:	|            movea.l (a0),a0
    5f9c:	|            movea.l (a0),a0
    5f9e:	|            movea.l (a0),a0
    5fa0:	|            move.l 8(a0),d0
    5fa4:	|            cmp.l 8(sp),d0
    5fa8:	|     /----- bgt.s 5fda <addPerson+0x1d0>
        if (fNumSigned < 0) {
    5faa:	|     |      tst.l 12(sp)
    5fae:	|     |  /-- bge.s 5fbc <addPerson+0x1b2>
            newPerson->height = 5;
    5fb0:	|     |  |   movea.l 16(sp),a0
    5fb4:	|     |  |   moveq #5,d1
    5fb6:	|     |  |   move.l d1,8(a0)
    5fba:	|  /--|--|-- bra.s 6004 <addPerson+0x1fa>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    5fbc:	|  |  |  \-> movea.l 52(sp),a0
    5fc0:	|  |  |      movea.l (a0),a0
    5fc2:	|  |  |      movea.l (a0),a0
    5fc4:	|  |  |      movea.l (a0),a0
    5fc6:	|  |  |      movea.l 16(a0),a0
    5fca:	|  |  |      move.l 12(a0),d0
    5fce:	|  |  |      addq.l #5,d0
    5fd0:	|  |  |      movea.l 16(sp),a0
    5fd4:	|  |  |      move.l d0,8(a0)
    5fd8:	|  +--|----- bra.s 6004 <addPerson+0x1fa>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    5fda:	|  |  \----> movea.l 52(sp),a0
    5fde:	|  |         movea.l (a0),a0
    5fe0:	|  |         movea.l (a0),a0
    5fe2:	|  |         movea.l (a0),a0
    5fe4:	|  |         movea.l 16(a0),a0
    5fe8:	|  |         move.l 8(sp),d1
    5fec:	|  |         move.l d1,d0
    5fee:	|  |         add.l d0,d0
    5ff0:	|  |         add.l d1,d0
    5ff2:	|  |         lsl.l #3,d0
    5ff4:	|  |         adda.l d0,a0
    5ff6:	|  |         move.l 12(a0),d0
    5ffa:	|  |         addq.l #5,d0
    5ffc:	|  |         movea.l 16(sp),a0
    6000:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    6004:	|  \-------> move.l #105644,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    600c:	|        /-- bra.s 601c <addPerson+0x212>
        changethat = &((*changethat)->next);
    600e:	|     /--|-> movea.l 32(sp),a0
    6012:	|     |  |   move.l (a0),d0
    6014:	|     |  |   moveq #24,d1
    6016:	|     |  |   add.l d0,d1
    6018:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    601c:	|     |  \-> movea.l 32(sp),a0
    6020:	|     |      move.l (a0),d0
    6022:	|     |  /-- beq.s 604a <addPerson+0x240>
    6024:	|     |  |   movea.l 32(sp),a0
    6028:	|     |  |   movea.l (a0),a0
    602a:	|     |  |   move.l 4(a0),d2
    602e:	|     |  |   move.l 44(sp),-(sp)
    6032:	|     |  |   jsr 12e5c <__floatsisf>
    6038:	|     |  |   addq.l #4,sp
    603a:	|     |  |   move.l d0,-(sp)
    603c:	|     |  |   move.l d2,-(sp)
    603e:	|     |  |   jsr 13082 <__ltsf2>
    6044:	|     |  |   addq.l #8,sp
    6046:	|     |  |   tst.l d0
    6048:	|     \--|-- blt.s 600e <addPerson+0x204>
    }

    newPerson->next = (*changethat);
    604a:	|        \-> movea.l 32(sp),a0
    604e:	|            move.l (a0),d0
    6050:	|            movea.l 16(sp),a0
    6054:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    6058:	|            movea.l 32(sp),a0
    605c:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    6060:	|            movea.l 16(sp),a0
    6064:	|            move.l 102(a0),d0
    6068:	|            sne d0
    606a:	|            neg.b d0
    606c:	|            move.b d0,d0
    606e:	|            andi.w #255,d0
}
    6072:	\----------> move.l (sp)+,d2
    6074:	             movea.l (sp)+,a6
    6076:	             lea 28(sp),sp
    607a:	             rts

0000607c <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    607c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    607e:	       move.l 8(sp),-(sp)
    6082:	       jsr 6be4 <findPerson>
    6088:	       addq.l #4,sp
    608a:	       move.l d0,(sp)
    if (moveMe) {
    608c:	/----- beq.s 60c0 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    608e:	|      movea.l (sp),a0
    6090:	|      move.l 56(a0),d0
    6094:	|  /-- beq.s 60a6 <animatePerson+0x2a>
    6096:	|  |   movea.l (sp),a0
    6098:	|  |   move.l 56(a0),d0
    609c:	|  |   move.l d0,-(sp)
    609e:	|  |   jsr 20e0 <abortFunction>
    60a4:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    60a6:	|  \-> movea.l (sp),a0
    60a8:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    60ac:	|      movea.l (sp),a0
    60ae:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    60b2:	|      movea.l (sp),a0
    60b4:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    60b8:	|      movea.l (sp),a0
    60ba:	|      move.l 12(sp),60(a0)
    }
}
    60c0:	\----> nop
    60c2:	       addq.l #4,sp
    60c4:	       rts

000060c6 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    60c6:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    60c8:	       move.l 8(sp),-(sp)
    60cc:	       jsr 6be4 <findPerson>
    60d2:	       addq.l #4,sp
    60d4:	       move.l d0,(sp)
    if (moveMe) {
    60d6:	/----- beq.s 6118 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    60d8:	|      movea.l (sp),a0
    60da:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    60de:	|      movea.l (sp),a0
    60e0:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    60e6:	|      move.l (sp),-(sp)
    60e8:	|      jsr 7476 <rethinkAngle>
    60ee:	|      addq.l #4,sp
        if (moveMe->walking) {
    60f0:	|      movea.l (sp),a0
    60f2:	|      move.w 52(a0),d0
    60f6:	|  /-- beq.s 610a <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    60f8:	|  |   pea 1 <_start+0x1>
    60fc:	|  |   move.l 4(sp),-(sp)
    6100:	|  |   jsr 5832 <setFrames>
    6106:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    6108:	+--|-- bra.s 6118 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    610a:	|  \-> clr.l -(sp)
    610c:	|      move.l 4(sp),-(sp)
    6110:	|      jsr 5832 <setFrames>
    6116:	|      addq.l #8,sp
}
    6118:	\----> nop
    611a:	       addq.l #4,sp
    611c:	       rts

0000611e <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    611e:	             lea -36(sp),sp
    6122:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    6124:	             movea.l 44(sp),a0
    6128:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    612e:	             moveq #12,d0
    6130:	             move.l d0,28(sp)
    6134:	             clr.l 24(sp)
    6138:	             move.l 19c4c <SysBase>,d0
    613e:	             movea.l d0,a6
    6140:	             move.l 28(sp),d0
    6144:	             move.l 24(sp),d1
    6148:	             jsr -684(a6)
    614c:	             move.l d0,20(sp)
    6150:	             move.l 20(sp),d0
    6154:	             move.l d0,16(sp)
	if (!(newAnim)) {
    6158:	         /-- bne.s 616e <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    615a:	         |   pea 15a81 <incbin_player_end+0x143>
    6160:	         |   jsr 12a04 <KPrintF>
    6166:	         |   addq.l #4,sp
		return NULL;
    6168:	         |   moveq #0,d0
    616a:	/--------|-- bra.w 62b0 <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    616e:	|        \-> movea.l 44(sp),a0
    6172:	|            move.l (a0),d0
    6174:	|            movea.l 16(sp),a0
    6178:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    617a:	|            movea.l 16(sp),a0
    617e:	|            move.l 32(sp),8(a0)

	if (num) {
    6184:	|  /-------- beq.w 62a4 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    6188:	|  |         move.l 32(sp),d1
    618c:	|  |         move.l d1,d0
    618e:	|  |         add.l d0,d0
    6190:	|  |         add.l d1,d0
    6192:	|  |         add.l d0,d0
    6194:	|  |         add.l d0,d0
    6196:	|  |         move.l d0,12(sp)
    619a:	|  |         clr.l 8(sp)
    619e:	|  |         move.l 19c4c <SysBase>,d0
    61a4:	|  |         movea.l d0,a6
    61a6:	|  |         move.l 12(sp),d0
    61aa:	|  |         move.l 8(sp),d1
    61ae:	|  |         jsr -684(a6)
    61b2:	|  |         move.l d0,4(sp)
    61b6:	|  |         move.l 4(sp),d0
    61ba:	|  |         movea.l 16(sp),a0
    61be:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    61c2:	|  |         movea.l 16(sp),a0
    61c6:	|  |         move.l 4(a0),d0
    61ca:	|  |     /-- bne.s 61e0 <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    61cc:	|  |     |   pea 15a81 <incbin_player_end+0x143>
    61d2:	|  |     |   jsr 12a04 <KPrintF>
    61d8:	|  |     |   addq.l #4,sp
			return NULL;
    61da:	|  |     |   moveq #0,d0
    61dc:	+--|-----|-- bra.w 62b0 <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    61e0:	|  |     \-> clr.l 36(sp)
    61e4:	|  |     /-- bra.w 6296 <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    61e8:	|  |  /--|-> movea.l 44(sp),a0
    61ec:	|  |  |  |   movea.l 4(a0),a0
    61f0:	|  |  |  |   move.l 36(sp),d1
    61f4:	|  |  |  |   move.l d1,d0
    61f6:	|  |  |  |   add.l d0,d0
    61f8:	|  |  |  |   add.l d1,d0
    61fa:	|  |  |  |   add.l d0,d0
    61fc:	|  |  |  |   add.l d0,d0
    61fe:	|  |  |  |   lea (0,a0,d0.l),a1
    6202:	|  |  |  |   movea.l 16(sp),a0
    6206:	|  |  |  |   movea.l 4(a0),a0
    620a:	|  |  |  |   move.l 36(sp),d1
    620e:	|  |  |  |   move.l d1,d0
    6210:	|  |  |  |   add.l d0,d0
    6212:	|  |  |  |   add.l d1,d0
    6214:	|  |  |  |   add.l d0,d0
    6216:	|  |  |  |   add.l d0,d0
    6218:	|  |  |  |   adda.l d0,a0
    621a:	|  |  |  |   move.l (a1),d0
    621c:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    621e:	|  |  |  |   movea.l 44(sp),a0
    6222:	|  |  |  |   movea.l 4(a0),a0
    6226:	|  |  |  |   move.l 36(sp),d1
    622a:	|  |  |  |   move.l d1,d0
    622c:	|  |  |  |   add.l d0,d0
    622e:	|  |  |  |   add.l d1,d0
    6230:	|  |  |  |   add.l d0,d0
    6232:	|  |  |  |   add.l d0,d0
    6234:	|  |  |  |   lea (0,a0,d0.l),a1
    6238:	|  |  |  |   movea.l 16(sp),a0
    623c:	|  |  |  |   movea.l 4(a0),a0
    6240:	|  |  |  |   move.l 36(sp),d1
    6244:	|  |  |  |   move.l d1,d0
    6246:	|  |  |  |   add.l d0,d0
    6248:	|  |  |  |   add.l d1,d0
    624a:	|  |  |  |   add.l d0,d0
    624c:	|  |  |  |   add.l d0,d0
    624e:	|  |  |  |   adda.l d0,a0
    6250:	|  |  |  |   move.l 4(a1),d0
    6254:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    6258:	|  |  |  |   movea.l 44(sp),a0
    625c:	|  |  |  |   movea.l 4(a0),a0
    6260:	|  |  |  |   move.l 36(sp),d1
    6264:	|  |  |  |   move.l d1,d0
    6266:	|  |  |  |   add.l d0,d0
    6268:	|  |  |  |   add.l d1,d0
    626a:	|  |  |  |   add.l d0,d0
    626c:	|  |  |  |   add.l d0,d0
    626e:	|  |  |  |   lea (0,a0,d0.l),a1
    6272:	|  |  |  |   movea.l 16(sp),a0
    6276:	|  |  |  |   movea.l 4(a0),a0
    627a:	|  |  |  |   move.l 36(sp),d1
    627e:	|  |  |  |   move.l d1,d0
    6280:	|  |  |  |   add.l d0,d0
    6282:	|  |  |  |   add.l d1,d0
    6284:	|  |  |  |   add.l d0,d0
    6286:	|  |  |  |   add.l d0,d0
    6288:	|  |  |  |   adda.l d0,a0
    628a:	|  |  |  |   move.l 8(a1),d0
    628e:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    6292:	|  |  |  |   addq.l #1,36(sp)
    6296:	|  |  |  \-> move.l 36(sp),d0
    629a:	|  |  |      cmp.l 32(sp),d0
    629e:	|  |  \----- blt.w 61e8 <copyAnim+0xca>
    62a2:	|  |     /-- bra.s 62ac <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    62a4:	|  \-----|-> movea.l 16(sp),a0
    62a8:	|        |   clr.l 4(a0)
	}

	return newAnim;
    62ac:	|        \-> move.l 16(sp),d0
}
    62b0:	\----------> movea.l (sp)+,a6
    62b2:	             lea 36(sp),sp
    62b6:	             rts

000062b8 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    62b8:	                lea -44(sp),sp
    62bc:	                move.l a6,-(sp)
    62be:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    62c0:	                moveq #12,d0
    62c2:	                move.l d0,40(sp)
    62c6:	                clr.l 36(sp)
    62ca:	                move.l 19c4c <SysBase>,d0
    62d0:	                movea.l d0,a6
    62d2:	                move.l 40(sp),d0
    62d6:	                move.l 36(sp),d1
    62da:	                jsr -684(a6)
    62de:	                move.l d0,32(sp)
    62e2:	                move.l 32(sp),d0
    62e6:	                move.l d0,28(sp)
	if( !newP) {
    62ea:	            /-- bne.s 6300 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    62ec:	            |   pea 15aa2 <incbin_player_end+0x164>
    62f2:	            |   jsr 12a04 <KPrintF>
    62f8:	            |   addq.l #4,sp
		return NULL;
    62fa:	            |   moveq #0,d0
    62fc:	/-----------|-- bra.w 64d0 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    6300:	|           \-> movea.l 28(sp),a0
    6304:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    630a:	|               move.l 56(sp),d1
    630e:	|               move.l d1,d0
    6310:	|               add.l d0,d0
    6312:	|               add.l d1,d0
    6314:	|               add.l d0,d0
    6316:	|               add.l d0,d0
    6318:	|               move.l d0,24(sp)
    631c:	|               clr.l 20(sp)
    6320:	|               move.l 19c4c <SysBase>,d0
    6326:	|               movea.l d0,a6
    6328:	|               move.l 24(sp),d0
    632c:	|               move.l 20(sp),d1
    6330:	|               jsr -684(a6)
    6334:	|               move.l d0,16(sp)
    6338:	|               move.l 16(sp),d0
    633c:	|               movea.l 28(sp),a0
    6340:	|               move.l d0,4(a0)
	if( !newP->frames) {
    6344:	|               movea.l 28(sp),a0
    6348:	|               move.l 4(a0),d0
    634c:	|           /-- bne.s 6362 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    634e:	|           |   pea 15aa2 <incbin_player_end+0x164>
    6354:	|           |   jsr 12a04 <KPrintF>
    635a:	|           |   addq.l #4,sp
		return NULL;
    635c:	|           |   moveq #0,d0
    635e:	+-----------|-- bra.w 64d0 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    6362:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    6368:	|               movea.l 60(sp),a0
    636c:	|               move.l (a0),44(sp)
	while (a) {
    6370:	|     /-------- bra.w 64c4 <createPersonaAnim+0x20c>
		a --;
    6374:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    6378:	|  |  |         movea.l 28(sp),a0
    637c:	|  |  |         movea.l 4(a0),a0
    6380:	|  |  |         move.l 48(sp),d1
    6384:	|  |  |         move.l d1,d0
    6386:	|  |  |         add.l d0,d0
    6388:	|  |  |         add.l d1,d0
    638a:	|  |  |         add.l d0,d0
    638c:	|  |  |         add.l d0,d0
    638e:	|  |  |         adda.l d0,a0
    6390:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    6394:	|  |  |         movea.l 44(sp),a0
    6398:	|  |  |         move.l (a0),d0
    639a:	|  |  |         moveq #5,d1
    639c:	|  |  |         cmp.l d0,d1
    639e:	|  |  |     /-- bne.s 63ca <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    63a0:	|  |  |     |   movea.l 28(sp),a0
    63a4:	|  |  |     |   movea.l 4(a0),a0
    63a8:	|  |  |     |   move.l 48(sp),d1
    63ac:	|  |  |     |   move.l d1,d0
    63ae:	|  |  |     |   add.l d0,d0
    63b0:	|  |  |     |   add.l d1,d0
    63b2:	|  |  |     |   add.l d0,d0
    63b4:	|  |  |     |   add.l d0,d0
    63b6:	|  |  |     |   lea (0,a0,d0.l),a1
    63ba:	|  |  |     |   movea.l 44(sp),a0
    63be:	|  |  |     |   move.l 4(a0),d0
    63c2:	|  |  |     |   move.l d0,8(a1)
    63c6:	|  |  |  /--|-- bra.w 6472 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    63ca:	|  |  |  |  \-> movea.l 44(sp),a0
    63ce:	|  |  |  |      move.l (a0),d0
    63d0:	|  |  |  |      moveq #2,d1
    63d2:	|  |  |  |      cmp.l d0,d1
    63d4:	|  |  |  |  /-- bne.s 6400 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    63d6:	|  |  |  |  |   movea.l 44(sp),a0
    63da:	|  |  |  |  |   move.l 4(a0),d2
    63de:	|  |  |  |  |   movea.l 28(sp),a0
    63e2:	|  |  |  |  |   movea.l 4(a0),a0
    63e6:	|  |  |  |  |   move.l 48(sp),d1
    63ea:	|  |  |  |  |   move.l d1,d0
    63ec:	|  |  |  |  |   add.l d0,d0
    63ee:	|  |  |  |  |   add.l d1,d0
    63f0:	|  |  |  |  |   add.l d0,d0
    63f2:	|  |  |  |  |   add.l d0,d0
    63f4:	|  |  |  |  |   adda.l d0,a0
    63f6:	|  |  |  |  |   move.l d2,d0
    63f8:	|  |  |  |  |   neg.l d0
    63fa:	|  |  |  |  |   move.l d0,8(a0)
    63fe:	|  |  |  +--|-- bra.s 6472 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    6400:	|  |  |  |  \-> movea.l 44(sp),a0
    6404:	|  |  |  |      move.l (a0),d0
    6406:	|  |  |  |      moveq #6,d1
    6408:	|  |  |  |      cmp.l d0,d1
    640a:	|  |  |  |  /-- bne.s 6452 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    640c:	|  |  |  |  |   movea.l 44(sp),a0
    6410:	|  |  |  |  |   movea.l 4(a0),a0
    6414:	|  |  |  |  |   move.l (a0),d0
    6416:	|  |  |  |  |   move.l d0,-(sp)
    6418:	|  |  |  |  |   pea 1 <_start+0x1>
    641c:	|  |  |  |  |   lea 20(sp),a0
    6420:	|  |  |  |  |   move.l a0,-(sp)
    6422:	|  |  |  |  |   jsr 109b0 <getValueType>
    6428:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    642c:	|  |  |  |  |   movea.l 44(sp),a0
    6430:	|  |  |  |  |   movea.l 4(a0),a0
    6434:	|  |  |  |  |   movea.l (a0),a0
    6436:	|  |  |  |  |   move.l 8(a0),d0
    643a:	|  |  |  |  |   move.l d0,-(sp)
    643c:	|  |  |  |  |   pea 1 <_start+0x1>
    6440:	|  |  |  |  |   lea 16(sp),a0
    6444:	|  |  |  |  |   move.l a0,-(sp)
    6446:	|  |  |  |  |   jsr 109b0 <getValueType>
    644c:	|  |  |  |  |   lea 12(sp),sp
    6450:	|  |  |  +--|-- bra.s 6472 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    6452:	|  |  |  |  \-> move.l 44(sp),d0
    6456:	|  |  |  |      move.l d0,-(sp)
    6458:	|  |  |  |      pea 1 <_start+0x1>
    645c:	|  |  |  |      lea 20(sp),a0
    6460:	|  |  |  |      move.l a0,-(sp)
    6462:	|  |  |  |      jsr 109b0 <getValueType>
    6468:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    646c:	|  |  |  |      moveq #1,d0
    646e:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    6472:	|  |  |  \----> move.l 60(sp),-(sp)
    6476:	|  |  |         jsr 11334 <trimStack>
    647c:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    647e:	|  |  |         movea.l 28(sp),a0
    6482:	|  |  |         movea.l 4(a0),a0
    6486:	|  |  |         move.l 48(sp),d1
    648a:	|  |  |         move.l d1,d0
    648c:	|  |  |         add.l d0,d0
    648e:	|  |  |         add.l d1,d0
    6490:	|  |  |         add.l d0,d0
    6492:	|  |  |         add.l d0,d0
    6494:	|  |  |         adda.l d0,a0
    6496:	|  |  |         move.l 12(sp),d0
    649a:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    649c:	|  |  |         movea.l 28(sp),a0
    64a0:	|  |  |         movea.l 4(a0),a0
    64a4:	|  |  |         move.l 48(sp),d1
    64a8:	|  |  |         move.l d1,d0
    64aa:	|  |  |         add.l d0,d0
    64ac:	|  |  |         add.l d1,d0
    64ae:	|  |  |         add.l d0,d0
    64b0:	|  |  |         add.l d0,d0
    64b2:	|  |  |         adda.l d0,a0
    64b4:	|  |  |         move.l 8(sp),d0
    64b8:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    64bc:	|  |  |         movea.l 60(sp),a0
    64c0:	|  |  |         move.l (a0),44(sp)
	while (a) {
    64c4:	|  |  \-------> tst.l 48(sp)
    64c8:	|  \----------- bne.w 6374 <createPersonaAnim+0xbc>
	}

	return newP;
    64cc:	|               move.l 28(sp),d0
}
    64d0:	\-------------> move.l (sp)+,d2
    64d2:	                movea.l (sp)+,a6
    64d4:	                lea 44(sp),sp
    64d8:	                rts

000064da <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    64da:	       subq.l #8,sp
    64dc:	       move.l a6,-(sp)

	if (orig)
    64de:	       tst.l 16(sp)
    64e2:	/----- beq.s 6522 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    64e4:	|      movea.l 16(sp),a0
    64e8:	|      move.l 8(a0),d0
    64ec:	|  /-- beq.s 6508 <deleteAnim+0x2e>
			FreeVec( orig->frames);
    64ee:	|  |   movea.l 16(sp),a0
    64f2:	|  |   move.l 4(a0),8(sp)
    64f8:	|  |   move.l 19c4c <SysBase>,d0
    64fe:	|  |   movea.l d0,a6
    6500:	|  |   movea.l 8(sp),a1
    6504:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    6508:	|  \-> move.l 16(sp),4(sp)
    650e:	|      move.l 19c4c <SysBase>,d0
    6514:	|      movea.l d0,a6
    6516:	|      movea.l 4(sp),a1
    651a:	|      jsr -690(a6)
		orig = NULL;
    651e:	|      clr.l 16(sp)
	}
}
    6522:	\----> nop
    6524:	       movea.l (sp)+,a6
    6526:	       addq.l #8,sp
    6528:	       rts

0000652a <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    652a:	          lea -124(sp),sp
    652e:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    6532:	          movea.l 152(sp),a0
    6536:	          move.l 44(a0),d1
    653a:	          movea.l 152(sp),a0
    653e:	          move.l 48(a0),d0
    6542:	          cmp.l d1,d0
    6544:	      /-- bne.s 6574 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    6546:	      |   movea.l 152(sp),a0
    654a:	      |   moveq #-1,d0
    654c:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    6550:	      |   movea.l 152(sp),a0
    6554:	      |   move.l 28(a0),d0
    6558:	      |   movea.l 152(sp),a0
    655c:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    6560:	      |   movea.l 152(sp),a0
    6564:	      |   move.l 32(a0),d0
    6568:	      |   movea.l 152(sp),a0
    656c:	      |   move.l d0,40(a0)
    6570:	   /--|-- bra.w 6ada <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    6574:	   |  \-> movea.l 19d54 <currentFloor>,a0
    657a:	   |      move.l 16(a0),d1
    657e:	   |      movea.l 152(sp),a0
    6582:	   |      move.l 44(a0),d0
    6586:	   |      add.l d0,d0
    6588:	   |      add.l d0,d0
    658a:	   |      movea.l d1,a0
    658c:	   |      adda.l d0,a0
    658e:	   |      move.l (a0),d1
    6590:	   |      movea.l 152(sp),a0
    6594:	   |      move.l 48(a0),d0
    6598:	   |      add.l d0,d0
    659a:	   |      add.l d0,d0
    659c:	   |      movea.l d1,a0
    659e:	   |      adda.l d0,a0
    65a0:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    65a4:	   |      moveq #-1,d0
    65a6:	   |      cmp.l 144(sp),d0
    65aa:	   |  /-- bne.s 65b2 <doBorderStuff+0x88>
    65ac:	   |  |   clr.w d0
    65ae:	/--|--|-- bra.w 6bda <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    65b2:	|  |  \-> movea.l 19d54 <currentFloor>,a0
    65b8:	|  |      move.l 12(a0),d1
    65bc:	|  |      move.l 144(sp),d0
    65c0:	|  |      lsl.l #3,d0
    65c2:	|  |      add.l d0,d1
    65c4:	|  |      movea.l 19d54 <currentFloor>,a0
    65ca:	|  |      movea.l 12(a0),a1
    65ce:	|  |      movea.l 152(sp),a0
    65d2:	|  |      move.l 44(a0),d0
    65d6:	|  |      lsl.l #3,d0
    65d8:	|  |      add.l a1,d0
    65da:	|  |      lea 40(sp),a0
    65de:	|  |      move.l a0,-(sp)
    65e0:	|  |      lea 48(sp),a0
    65e4:	|  |      move.l a0,-(sp)
    65e6:	|  |      move.l d1,-(sp)
    65e8:	|  |      move.l d0,-(sp)
    65ea:	|  |      jsr 11c7a <getMatchingCorners>
    65f0:	|  |      lea 16(sp),sp
    65f4:	|  |      tst.w d0
    65f6:	|  |  /-- bne.s 660c <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    65f8:	|  |  |   pea 15acc <incbin_player_end+0x18e>
    65fe:	|  |  |   jsr 12a04 <KPrintF>
    6604:	|  |  |   addq.l #4,sp
            return FALSE;
    6606:	|  |  |   clr.w d0
    6608:	+--|--|-- bra.w 6bda <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    660c:	|  |  \-> movea.l 152(sp),a0
    6610:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    6616:	|  |      movea.l 152(sp),a0
    661a:	|  |      move.l (a0),d0
    661c:	|  |      move.l d0,-(sp)
    661e:	|  |      jsr 12df4 <__fixsfsi>
    6624:	|  |      addq.l #4,sp
    6626:	|  |      move.l d0,140(sp)
    662a:	|  |      movea.l 152(sp),a0
    662e:	|  |      move.l 4(a0),d0
    6632:	|  |      move.l d0,-(sp)
    6634:	|  |      jsr 12df4 <__fixsfsi>
    663a:	|  |      addq.l #4,sp
    663c:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    6640:	|  |      movea.l 152(sp),a0
    6644:	|  |      move.l 28(a0),132(sp)
    664a:	|  |      movea.l 152(sp),a0
    664e:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    6654:	|  |      movea.l 19d54 <currentFloor>,a0
    665a:	|  |      move.l 4(a0),d1
    665e:	|  |      move.l 44(sp),d0
    6662:	|  |      lsl.l #3,d0
    6664:	|  |      movea.l d1,a0
    6666:	|  |      adda.l d0,a0
    6668:	|  |      move.l (a0),124(sp)
    666c:	|  |      movea.l 19d54 <currentFloor>,a0
    6672:	|  |      move.l 4(a0),d1
    6676:	|  |      move.l 44(sp),d0
    667a:	|  |      lsl.l #3,d0
    667c:	|  |      movea.l d1,a0
    667e:	|  |      adda.l d0,a0
    6680:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    6686:	|  |      movea.l 19d54 <currentFloor>,a0
    668c:	|  |      move.l 4(a0),d1
    6690:	|  |      move.l 40(sp),d0
    6694:	|  |      lsl.l #3,d0
    6696:	|  |      movea.l d1,a0
    6698:	|  |      adda.l d0,a0
    669a:	|  |      move.l (a0),116(sp)
    669e:	|  |      movea.l 19d54 <currentFloor>,a0
    66a4:	|  |      move.l 4(a0),d1
    66a8:	|  |      move.l 40(sp),d0
    66ac:	|  |      lsl.l #3,d0
    66ae:	|  |      movea.l d1,a0
    66b0:	|  |      adda.l d0,a0
    66b2:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    66b8:	|  |      move.l 140(sp),d0
    66bc:	|  |      sub.l 132(sp),d0
    66c0:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    66c4:	|  |      move.l 136(sp),d0
    66c8:	|  |      sub.l 128(sp),d0
    66cc:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    66d0:	|  |      move.l 116(sp),d0
    66d4:	|  |      sub.l 124(sp),d0
    66d8:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    66dc:	|  |      move.l 112(sp),d0
    66e0:	|  |      sub.l 120(sp),d0
    66e4:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    66e8:	|  |      move.l 124(sp),d0
    66ec:	|  |      sub.l 140(sp),d0
    66f0:	|  |      move.l 104(sp),-(sp)
    66f4:	|  |      move.l d0,-(sp)
    66f6:	|  |      jsr 133b6 <__mulsi3>
    66fc:	|  |      addq.l #8,sp
    66fe:	|  |      move.l d0,d2
    6700:	|  |      move.l 120(sp),d0
    6704:	|  |      sub.l 136(sp),d0
    6708:	|  |      move.l 108(sp),-(sp)
    670c:	|  |      move.l d0,-(sp)
    670e:	|  |      jsr 133b6 <__mulsi3>
    6714:	|  |      addq.l #8,sp
    6716:	|  |      move.l d2,d1
    6718:	|  |      sub.l d0,d1
    671a:	|  |      move.l d1,-(sp)
    671c:	|  |      jsr 12e1c <__floatsidf>
    6722:	|  |      addq.l #4,sp
    6724:	|  |      move.l d0,32(sp)
    6728:	|  |      move.l d1,36(sp)
    672c:	|  |      move.l 32(sp),88(sp)
    6732:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    6738:	|  |      move.l 96(sp),-(sp)
    673c:	|  |      move.l 112(sp),-(sp)
    6740:	|  |      jsr 133b6 <__mulsi3>
    6746:	|  |      addq.l #8,sp
    6748:	|  |      move.l d0,d2
    674a:	|  |      move.l 100(sp),-(sp)
    674e:	|  |      move.l 108(sp),-(sp)
    6752:	|  |      jsr 133b6 <__mulsi3>
    6758:	|  |      addq.l #8,sp
    675a:	|  |      move.l d2,d1
    675c:	|  |      sub.l d0,d1
    675e:	|  |      move.l d1,-(sp)
    6760:	|  |      jsr 12e1c <__floatsidf>
    6766:	|  |      addq.l #4,sp
    6768:	|  |      move.l d1,-(sp)
    676a:	|  |      move.l d0,-(sp)
    676c:	|  |      move.l 100(sp),-(sp)
    6770:	|  |      move.l 100(sp),-(sp)
    6774:	|  |      jsr 12ca6 <__divdf3>
    677a:	|  |      lea 16(sp),sp
    677e:	|  |      move.l d0,24(sp)
    6782:	|  |      move.l d1,28(sp)
    6786:	|  |      move.l 24(sp),88(sp)
    678c:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    6792:	|  |      clr.l -(sp)
    6794:	|  |      clr.l -(sp)
    6796:	|  |      move.l 100(sp),-(sp)
    679a:	|  |      move.l 100(sp),-(sp)
    679e:	|  |      jsr 12f7a <__gtdf2>
    67a4:	|  |      lea 16(sp),sp
    67a8:	|  |      tst.l d0
    67aa:	|  |  /-- ble.w 6882 <doBorderStuff+0x358>
    67ae:	|  |  |   clr.l -(sp)
    67b0:	|  |  |   move.l #1072693248,-(sp)
    67b6:	|  |  |   move.l 100(sp),-(sp)
    67ba:	|  |  |   move.l 100(sp),-(sp)
    67be:	|  |  |   jsr 13034 <__ltdf2>
    67c4:	|  |  |   lea 16(sp),sp
    67c8:	|  |  |   tst.l d0
    67ca:	|  |  +-- bge.w 6882 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    67ce:	|  |  |   move.l 124(sp),-(sp)
    67d2:	|  |  |   jsr 12e1c <__floatsidf>
    67d8:	|  |  |   addq.l #4,sp
    67da:	|  |  |   move.l d0,d2
    67dc:	|  |  |   move.l d1,d3
    67de:	|  |  |   move.l 100(sp),-(sp)
    67e2:	|  |  |   jsr 12e1c <__floatsidf>
    67e8:	|  |  |   addq.l #4,sp
    67ea:	|  |  |   move.l 92(sp),-(sp)
    67ee:	|  |  |   move.l 92(sp),-(sp)
    67f2:	|  |  |   move.l d1,-(sp)
    67f4:	|  |  |   move.l d0,-(sp)
    67f6:	|  |  |   jsr 12eac <__muldf3>
    67fc:	|  |  |   lea 16(sp),sp
    6800:	|  |  |   move.l d1,-(sp)
    6802:	|  |  |   move.l d0,-(sp)
    6804:	|  |  |   move.l d3,-(sp)
    6806:	|  |  |   move.l d2,-(sp)
    6808:	|  |  |   jsr 12c44 <__adddf3>
    680e:	|  |  |   lea 16(sp),sp
    6812:	|  |  |   move.l d1,-(sp)
    6814:	|  |  |   move.l d0,-(sp)
    6816:	|  |  |   jsr 12db4 <__fixdfsi>
    681c:	|  |  |   addq.l #8,sp
    681e:	|  |  |   movea.l 152(sp),a0
    6822:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    6826:	|  |  |   move.l 120(sp),-(sp)
    682a:	|  |  |   jsr 12e1c <__floatsidf>
    6830:	|  |  |   addq.l #4,sp
    6832:	|  |  |   move.l d0,d2
    6834:	|  |  |   move.l d1,d3
    6836:	|  |  |   move.l 96(sp),-(sp)
    683a:	|  |  |   jsr 12e1c <__floatsidf>
    6840:	|  |  |   addq.l #4,sp
    6842:	|  |  |   move.l 92(sp),-(sp)
    6846:	|  |  |   move.l 92(sp),-(sp)
    684a:	|  |  |   move.l d1,-(sp)
    684c:	|  |  |   move.l d0,-(sp)
    684e:	|  |  |   jsr 12eac <__muldf3>
    6854:	|  |  |   lea 16(sp),sp
    6858:	|  |  |   move.l d1,-(sp)
    685a:	|  |  |   move.l d0,-(sp)
    685c:	|  |  |   move.l d3,-(sp)
    685e:	|  |  |   move.l d2,-(sp)
    6860:	|  |  |   jsr 12c44 <__adddf3>
    6866:	|  |  |   lea 16(sp),sp
    686a:	|  |  |   move.l d1,-(sp)
    686c:	|  |  |   move.l d0,-(sp)
    686e:	|  |  |   jsr 12db4 <__fixdfsi>
    6874:	|  |  |   addq.l #8,sp
    6876:	|  |  |   movea.l 152(sp),a0
    687a:	|  |  |   move.l d0,40(a0)
    687e:	|  +--|-- bra.w 6ada <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    6882:	|  |  \-> move.l 140(sp),d0
    6886:	|  |      sub.l 124(sp),d0
    688a:	|  |      move.l d0,84(sp)
    688e:	|  |      move.l 140(sp),d0
    6892:	|  |      sub.l 116(sp),d0
    6896:	|  |      move.l d0,80(sp)
    689a:	|  |      move.l 132(sp),d0
    689e:	|  |      sub.l 124(sp),d0
    68a2:	|  |      move.l d0,76(sp)
    68a6:	|  |      move.l 132(sp),d0
    68aa:	|  |      sub.l 116(sp),d0
    68ae:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    68b2:	|  |      move.l 136(sp),d0
    68b6:	|  |      sub.l 120(sp),d0
    68ba:	|  |      move.l d0,68(sp)
    68be:	|  |      move.l 136(sp),d0
    68c2:	|  |      sub.l 112(sp),d0
    68c6:	|  |      move.l d0,64(sp)
    68ca:	|  |      move.l 128(sp),d0
    68ce:	|  |      sub.l 120(sp),d0
    68d2:	|  |      move.l d0,60(sp)
    68d6:	|  |      move.l 128(sp),d0
    68da:	|  |      sub.l 112(sp),d0
    68de:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    68e2:	|  |      move.l 84(sp),-(sp)
    68e6:	|  |      move.l 88(sp),-(sp)
    68ea:	|  |      jsr 133b6 <__mulsi3>
    68f0:	|  |      addq.l #8,sp
    68f2:	|  |      move.l d0,84(sp)
    68f6:	|  |      move.l 80(sp),-(sp)
    68fa:	|  |      move.l 84(sp),-(sp)
    68fe:	|  |      jsr 133b6 <__mulsi3>
    6904:	|  |      addq.l #8,sp
    6906:	|  |      move.l d0,80(sp)
    690a:	|  |      move.l 76(sp),-(sp)
    690e:	|  |      move.l 80(sp),-(sp)
    6912:	|  |      jsr 133b6 <__mulsi3>
    6918:	|  |      addq.l #8,sp
    691a:	|  |      move.l d0,76(sp)
    691e:	|  |      move.l 72(sp),-(sp)
    6922:	|  |      move.l 76(sp),-(sp)
    6926:	|  |      jsr 133b6 <__mulsi3>
    692c:	|  |      addq.l #8,sp
    692e:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    6932:	|  |      move.l 68(sp),-(sp)
    6936:	|  |      move.l 72(sp),-(sp)
    693a:	|  |      jsr 133b6 <__mulsi3>
    6940:	|  |      addq.l #8,sp
    6942:	|  |      move.l d0,68(sp)
    6946:	|  |      move.l 64(sp),-(sp)
    694a:	|  |      move.l 68(sp),-(sp)
    694e:	|  |      jsr 133b6 <__mulsi3>
    6954:	|  |      addq.l #8,sp
    6956:	|  |      move.l d0,64(sp)
    695a:	|  |      move.l 60(sp),-(sp)
    695e:	|  |      move.l 64(sp),-(sp)
    6962:	|  |      jsr 133b6 <__mulsi3>
    6968:	|  |      addq.l #8,sp
    696a:	|  |      move.l d0,60(sp)
    696e:	|  |      move.l 56(sp),-(sp)
    6972:	|  |      move.l 60(sp),-(sp)
    6976:	|  |      jsr 133b6 <__mulsi3>
    697c:	|  |      addq.l #8,sp
    697e:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    6982:	|  |      move.l 84(sp),-(sp)
    6986:	|  |      jsr 12e1c <__floatsidf>
    698c:	|  |      addq.l #4,sp
    698e:	|  |      move.l d0,d2
    6990:	|  |      move.l d1,d3
    6992:	|  |      move.l 68(sp),-(sp)
    6996:	|  |      jsr 12e1c <__floatsidf>
    699c:	|  |      addq.l #4,sp
    699e:	|  |      move.l d1,-(sp)
    69a0:	|  |      move.l d0,-(sp)
    69a2:	|  |      move.l d3,-(sp)
    69a4:	|  |      move.l d2,-(sp)
    69a6:	|  |      jsr 12c44 <__adddf3>
    69ac:	|  |      lea 16(sp),sp
    69b0:	|  |      move.l d1,-(sp)
    69b2:	|  |      move.l d0,-(sp)
    69b4:	|  |      jsr 1336c <sqrt>
    69ba:	|  |      addq.l #8,sp
    69bc:	|  |      move.l d0,d2
    69be:	|  |      move.l d1,d3
    69c0:	|  |      move.l 76(sp),-(sp)
    69c4:	|  |      jsr 12e1c <__floatsidf>
    69ca:	|  |      addq.l #4,sp
    69cc:	|  |      move.l d0,d4
    69ce:	|  |      move.l d1,d5
    69d0:	|  |      move.l 60(sp),-(sp)
    69d4:	|  |      jsr 12e1c <__floatsidf>
    69da:	|  |      addq.l #4,sp
    69dc:	|  |      move.l d1,-(sp)
    69de:	|  |      move.l d0,-(sp)
    69e0:	|  |      move.l d5,-(sp)
    69e2:	|  |      move.l d4,-(sp)
    69e4:	|  |      jsr 12c44 <__adddf3>
    69ea:	|  |      lea 16(sp),sp
    69ee:	|  |      move.l d1,-(sp)
    69f0:	|  |      move.l d0,-(sp)
    69f2:	|  |      jsr 1336c <sqrt>
    69f8:	|  |      addq.l #8,sp
    69fa:	|  |      move.l d1,-(sp)
    69fc:	|  |      move.l d0,-(sp)
    69fe:	|  |      move.l d3,-(sp)
    6a00:	|  |      move.l d2,-(sp)
    6a02:	|  |      jsr 12c44 <__adddf3>
    6a08:	|  |      lea 16(sp),sp
    6a0c:	|  |      move.l d0,d2
    6a0e:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    6a10:	|  |      move.l 80(sp),-(sp)
    6a14:	|  |      jsr 12e1c <__floatsidf>
    6a1a:	|  |      addq.l #4,sp
    6a1c:	|  |      move.l d0,d4
    6a1e:	|  |      move.l d1,d5
    6a20:	|  |      move.l 64(sp),-(sp)
    6a24:	|  |      jsr 12e1c <__floatsidf>
    6a2a:	|  |      addq.l #4,sp
    6a2c:	|  |      move.l d1,-(sp)
    6a2e:	|  |      move.l d0,-(sp)
    6a30:	|  |      move.l d5,-(sp)
    6a32:	|  |      move.l d4,-(sp)
    6a34:	|  |      jsr 12c44 <__adddf3>
    6a3a:	|  |      lea 16(sp),sp
    6a3e:	|  |      move.l d1,-(sp)
    6a40:	|  |      move.l d0,-(sp)
    6a42:	|  |      jsr 1336c <sqrt>
    6a48:	|  |      addq.l #8,sp
    6a4a:	|  |      move.l d0,d4
    6a4c:	|  |      move.l d1,d5
    6a4e:	|  |      move.l 72(sp),-(sp)
    6a52:	|  |      jsr 12e1c <__floatsidf>
    6a58:	|  |      addq.l #4,sp
    6a5a:	|  |      move.l d0,d6
    6a5c:	|  |      move.l d1,d7
    6a5e:	|  |      move.l 56(sp),-(sp)
    6a62:	|  |      jsr 12e1c <__floatsidf>
    6a68:	|  |      addq.l #4,sp
    6a6a:	|  |      move.l d1,-(sp)
    6a6c:	|  |      move.l d0,-(sp)
    6a6e:	|  |      move.l d7,-(sp)
    6a70:	|  |      move.l d6,-(sp)
    6a72:	|  |      jsr 12c44 <__adddf3>
    6a78:	|  |      lea 16(sp),sp
    6a7c:	|  |      move.l d1,-(sp)
    6a7e:	|  |      move.l d0,-(sp)
    6a80:	|  |      jsr 1336c <sqrt>
    6a86:	|  |      addq.l #8,sp
    6a88:	|  |      move.l d1,-(sp)
    6a8a:	|  |      move.l d0,-(sp)
    6a8c:	|  |      move.l d5,-(sp)
    6a8e:	|  |      move.l d4,-(sp)
    6a90:	|  |      jsr 12c44 <__adddf3>
    6a96:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    6a9a:	|  |      move.l d1,-(sp)
    6a9c:	|  |      move.l d0,-(sp)
    6a9e:	|  |      move.l d3,-(sp)
    6aa0:	|  |      move.l d2,-(sp)
    6aa2:	|  |      jsr 13034 <__ltdf2>
    6aa8:	|  |      lea 16(sp),sp
    6aac:	|  |      tst.l d0
    6aae:	|  |  /-- bge.s 6ac6 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    6ab0:	|  |  |   movea.l 152(sp),a0
    6ab4:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    6aba:	|  |  |   movea.l 152(sp),a0
    6abe:	|  |  |   move.l 120(sp),40(a0)
    6ac4:	|  +--|-- bra.s 6ada <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    6ac6:	|  |  \-> movea.l 152(sp),a0
    6aca:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    6ad0:	|  |      movea.l 152(sp),a0
    6ad4:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    6ada:	|  \----> movea.l 152(sp),a0
    6ade:	|         move.l 40(a0),d0
    6ae2:	|         move.l d0,-(sp)
    6ae4:	|         jsr 12e5c <__floatsisf>
    6aea:	|         addq.l #4,sp
    6aec:	|         move.l d0,d1
    6aee:	|         movea.l 152(sp),a0
    6af2:	|         move.l 4(a0),d0
    6af6:	|         move.l d0,-(sp)
    6af8:	|         move.l d1,-(sp)
    6afa:	|         jsr 13150 <__subsf3>
    6b00:	|         addq.l #8,sp
    6b02:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    6b06:	|         movea.l 152(sp),a0
    6b0a:	|         move.l (a0),d2
    6b0c:	|         movea.l 152(sp),a0
    6b10:	|         move.l 36(a0),d0
    6b14:	|         move.l d0,-(sp)
    6b16:	|         jsr 12e5c <__floatsisf>
    6b1c:	|         addq.l #4,sp
    6b1e:	|         move.l d0,-(sp)
    6b20:	|         move.l d2,-(sp)
    6b22:	|         jsr 13150 <__subsf3>
    6b28:	|         addq.l #8,sp
    6b2a:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    6b2e:	|         clr.l -(sp)
    6b30:	|         move.l 52(sp),-(sp)
    6b34:	|         jsr 130b8 <__nesf2>
    6b3a:	|         addq.l #8,sp
    6b3c:	|         tst.l d0
    6b3e:	|     /-- bne.s 6b52 <doBorderStuff+0x628>
    6b40:	|     |   clr.l -(sp)
    6b42:	|     |   move.l 56(sp),-(sp)
    6b46:	|     |   jsr 130b8 <__nesf2>
    6b4c:	|     |   addq.l #8,sp
    6b4e:	|     |   tst.l d0
    6b50:	|  /--|-- beq.s 6bc8 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    6b52:	|  |  \-> move.l 52(sp),d0
    6b56:	|  |      move.l d0,-(sp)
    6b58:	|  |      move.l d0,-(sp)
    6b5a:	|  |      jsr 12c0e <__addsf3>
    6b60:	|  |      addq.l #8,sp
    6b62:	|  |      move.l d0,-(sp)
    6b64:	|  |      move.l 52(sp),-(sp)
    6b68:	|  |      jsr 131bc <atan2f>
    6b6e:	|  |      addq.l #8,sp
    6b70:	|  |      move.l d0,-(sp)
    6b72:	|  |      jsr 12d74 <__extendsfdf2>
    6b78:	|  |      addq.l #4,sp
    6b7a:	|  |      move.l #-1540411785,-(sp)
    6b80:	|  |      move.l #1078765033,-(sp)
    6b86:	|  |      move.l d1,-(sp)
    6b88:	|  |      move.l d0,-(sp)
    6b8a:	|  |      jsr 12eac <__muldf3>
    6b90:	|  |      lea 16(sp),sp
    6b94:	|  |      clr.l -(sp)
    6b96:	|  |      move.l #1080459264,-(sp)
    6b9c:	|  |      move.l d1,-(sp)
    6b9e:	|  |      move.l d0,-(sp)
    6ba0:	|  |      jsr 12c44 <__adddf3>
    6ba6:	|  |      lea 16(sp),sp
    6baa:	|  |      move.l d1,-(sp)
    6bac:	|  |      move.l d0,-(sp)
    6bae:	|  |      jsr 12db4 <__fixdfsi>
    6bb4:	|  |      addq.l #8,sp
    6bb6:	|  |      movea.l 152(sp),a0
    6bba:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    6bbe:	|  |      movea.l 152(sp),a0
    6bc2:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    6bc8:	|  \----> pea 1 <_start+0x1>
    6bcc:	|         move.l 156(sp),-(sp)
    6bd0:	|         jsr 5832 <setFrames>
    6bd6:	|         addq.l #8,sp
    return TRUE;
    6bd8:	|         moveq #1,d0
}
    6bda:	\-------> movem.l (sp)+,d2-d7
    6bde:	          lea 124(sp),sp
    6be2:	          rts

00006be4 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    6be4:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    6be6:	          move.l 19cac <allPeople>,(sp)
	while (thisPerson) {
    6bec:	      /-- bra.s 6c04 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    6bee:	/-----|-> movea.l (sp),a0
    6bf0:	|     |   movea.l 102(a0),a0
    6bf4:	|     |   move.l 4(a0),d0
    6bf8:	|     |   cmp.l 8(sp),d0
    6bfc:	|  /--|-- beq.s 6c0a <findPerson+0x26>
		thisPerson = thisPerson -> next;
    6bfe:	|  |  |   movea.l (sp),a0
    6c00:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    6c04:	|  |  \-> tst.l (sp)
    6c06:	\--|----- bne.s 6bee <findPerson+0xa>
    6c08:	   |  /-- bra.s 6c0c <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    6c0a:	   \--|-> nop
	}
	return thisPerson;
    6c0c:	      \-> move.l (sp),d0
}
    6c0e:	          addq.l #4,sp
    6c10:	          rts

00006c12 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    6c12:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    6c14:	       move.l 12(sp),-(sp)
    6c18:	       jsr 6be4 <findPerson>
    6c1e:	       addq.l #4,sp
    6c20:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    6c22:	   /-- bne.s 6c28 <floatCharacter+0x16>
    6c24:	   |   clr.w d0
    6c26:	/--|-- bra.s 6c32 <floatCharacter+0x20>
	moveMe -> floaty = f;
    6c28:	|  \-> movea.l (sp),a0
    6c2a:	|      move.l 8(sp),12(a0)
	return TRUE;
    6c30:	|      moveq #1,d0
}
    6c32:	\----> addq.l #4,sp
    6c34:	       rts

00006c36 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    6c36:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    6c38:	          tst.l 8(sp)
    6c3c:	      /-- bne.s 6c4a <forceWalkingPerson+0x14>
    6c3e:	      |   tst.l 12(sp)
    6c42:	      +-- bne.s 6c4a <forceWalkingPerson+0x14>
    6c44:	      |   clr.w d0
    6c46:	/-----|-- bra.w 6cdc <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    6c4a:	|     \-> move.l 16(sp),-(sp)
    6c4e:	|         jsr 6be4 <findPerson>
    6c54:	|         addq.l #4,sp
    6c56:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    6c58:	|     /-- bne.s 6c5e <forceWalkingPerson+0x28>
    6c5a:	|     |   clr.w d0
    6c5c:	+-----|-- bra.s 6cdc <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    6c5e:	|     \-> movea.l (sp),a0
    6c60:	|         move.l 56(a0),d0
    6c64:	|     /-- beq.s 6c76 <forceWalkingPerson+0x40>
    6c66:	|     |   movea.l (sp),a0
    6c68:	|     |   move.l 56(a0),d0
    6c6c:	|     |   move.l d0,-(sp)
    6c6e:	|     |   jsr 20e0 <abortFunction>
    6c74:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    6c76:	|     \-> movea.l (sp),a0
    6c78:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    6c7e:	|         movea.l (sp),a0
    6c80:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    6c84:	|         movea.l (sp),a0
    6c86:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    6c8c:	|         movea.l (sp),a0
    6c8e:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    6c94:	|         movea.l (sp),a0
    6c96:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    6c9c:	|         movea.l (sp),a0
    6c9e:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    6ca2:	|         movea.l (sp),a0
    6ca4:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    6ca8:	|         move.l (sp),-(sp)
    6caa:	|         jsr 652a <doBorderStuff>
    6cb0:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    6cb2:	|         pea 1 <_start+0x1>
    6cb6:	|         move.l 4(sp),-(sp)
    6cba:	|         jsr 8372 <walkMe>
    6cc0:	|         addq.l #8,sp
    6cc2:	|         tst.w d0
    6cc4:	|     /-- bne.s 6cce <forceWalkingPerson+0x98>
    6cc6:	|     |   movea.l (sp),a0
    6cc8:	|     |   move.w 54(a0),d0
    6ccc:	|  /--|-- beq.s 6cda <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    6cce:	|  |  \-> movea.l (sp),a0
    6cd0:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    6cd6:	|  |      moveq #1,d0
    6cd8:	+--|----- bra.s 6cdc <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    6cda:	|  \----> clr.w d0
    }
}
    6cdc:	\-------> addq.l #4,sp
    6cde:	          rts

00006ce0 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    6ce0:	                lea -56(sp),sp
    6ce4:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    6ce6:	                move.l #320,56(sp)
    6cee:	                move.l #200,52(sp)
    6cf6:	                moveq #-1,d0
    6cf8:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    6cfc:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    6d04:	                clr.l 44(sp)
    6d08:	   /----------- bra.w 6ee0 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    6d0c:	/--|----------> movea.l 19d54 <currentFloor>,a0
    6d12:	|  |            move.l 12(a0),d1
    6d16:	|  |            move.l 44(sp),d0
    6d1a:	|  |            lsl.l #3,d0
    6d1c:	|  |            movea.l d1,a0
    6d1e:	|  |            adda.l d0,a0
    6d20:	|  |            move.l (a0),d0
    6d22:	|  |            move.l d0,d1
    6d24:	|  |            subq.l #1,d1
    6d26:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    6d2a:	|  |            clr.l 40(sp)
    6d2e:	|  |     /----- bra.w 6ebe <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    6d32:	|  |  /--|----> movea.l 19d54 <currentFloor>,a0
    6d38:	|  |  |  |      move.l 4(a0),d1
    6d3c:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6d42:	|  |  |  |      movea.l 12(a0),a0
    6d46:	|  |  |  |      move.l 44(sp),d0
    6d4a:	|  |  |  |      lsl.l #3,d0
    6d4c:	|  |  |  |      adda.l d0,a0
    6d4e:	|  |  |  |      movea.l 4(a0),a0
    6d52:	|  |  |  |      move.l 40(sp),d0
    6d56:	|  |  |  |      add.l d0,d0
    6d58:	|  |  |  |      add.l d0,d0
    6d5a:	|  |  |  |      adda.l d0,a0
    6d5c:	|  |  |  |      move.l (a0),d0
    6d5e:	|  |  |  |      lsl.l #3,d0
    6d60:	|  |  |  |      movea.l d1,a0
    6d62:	|  |  |  |      adda.l d0,a0
    6d64:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    6d68:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6d6e:	|  |  |  |      move.l 4(a0),d1
    6d72:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6d78:	|  |  |  |      movea.l 12(a0),a0
    6d7c:	|  |  |  |      move.l 44(sp),d0
    6d80:	|  |  |  |      lsl.l #3,d0
    6d82:	|  |  |  |      adda.l d0,a0
    6d84:	|  |  |  |      movea.l 4(a0),a0
    6d88:	|  |  |  |      move.l 40(sp),d0
    6d8c:	|  |  |  |      add.l d0,d0
    6d8e:	|  |  |  |      add.l d0,d0
    6d90:	|  |  |  |      adda.l d0,a0
    6d92:	|  |  |  |      move.l (a0),d0
    6d94:	|  |  |  |      lsl.l #3,d0
    6d96:	|  |  |  |      movea.l d1,a0
    6d98:	|  |  |  |      adda.l d0,a0
    6d9a:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    6da0:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6da6:	|  |  |  |      move.l 4(a0),d1
    6daa:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6db0:	|  |  |  |      movea.l 12(a0),a0
    6db4:	|  |  |  |      move.l 44(sp),d0
    6db8:	|  |  |  |      lsl.l #3,d0
    6dba:	|  |  |  |      adda.l d0,a0
    6dbc:	|  |  |  |      movea.l 4(a0),a0
    6dc0:	|  |  |  |      move.l 36(sp),d0
    6dc4:	|  |  |  |      add.l d0,d0
    6dc6:	|  |  |  |      add.l d0,d0
    6dc8:	|  |  |  |      adda.l d0,a0
    6dca:	|  |  |  |      move.l (a0),d0
    6dcc:	|  |  |  |      lsl.l #3,d0
    6dce:	|  |  |  |      movea.l d1,a0
    6dd0:	|  |  |  |      adda.l d0,a0
    6dd2:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    6dd6:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6ddc:	|  |  |  |      move.l 4(a0),d1
    6de0:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6de6:	|  |  |  |      movea.l 12(a0),a0
    6dea:	|  |  |  |      move.l 44(sp),d0
    6dee:	|  |  |  |      lsl.l #3,d0
    6df0:	|  |  |  |      adda.l d0,a0
    6df2:	|  |  |  |      movea.l 4(a0),a0
    6df6:	|  |  |  |      move.l 36(sp),d0
    6dfa:	|  |  |  |      add.l d0,d0
    6dfc:	|  |  |  |      add.l d0,d0
    6dfe:	|  |  |  |      adda.l d0,a0
    6e00:	|  |  |  |      move.l (a0),d0
    6e02:	|  |  |  |      lsl.l #3,d0
    6e04:	|  |  |  |      movea.l d1,a0
    6e06:	|  |  |  |      adda.l d0,a0
    6e08:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    6e0e:	|  |  |  |      movea.l 68(sp),a0
    6e12:	|  |  |  |      move.l (a0),d1
    6e14:	|  |  |  |      movea.l 64(sp),a0
    6e18:	|  |  |  |      move.l (a0),d0
    6e1a:	|  |  |  |      move.l d1,-(sp)
    6e1c:	|  |  |  |      move.l d0,-(sp)
    6e1e:	|  |  |  |      move.l 24(sp),-(sp)
    6e22:	|  |  |  |      move.l 32(sp),-(sp)
    6e26:	|  |  |  |      move.l 40(sp),-(sp)
    6e2a:	|  |  |  |      move.l 48(sp),-(sp)
    6e2e:	|  |  |  |      lea 28(sp),a0
    6e32:	|  |  |  |      move.l a0,-(sp)
    6e34:	|  |  |  |      lea 36(sp),a0
    6e38:	|  |  |  |      move.l a0,-(sp)
    6e3a:	|  |  |  |      jsr 11858 <closestPointOnLine>
    6e40:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    6e44:	|  |  |  |      movea.l 64(sp),a0
    6e48:	|  |  |  |      move.l (a0),d0
    6e4a:	|  |  |  |      move.l 8(sp),d1
    6e4e:	|  |  |  |      move.l d0,d2
    6e50:	|  |  |  |      sub.l d1,d2
    6e52:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    6e56:	|  |  |  |      movea.l 68(sp),a0
    6e5a:	|  |  |  |      move.l (a0),d0
    6e5c:	|  |  |  |      move.l 4(sp),d1
    6e60:	|  |  |  |      move.l d0,d2
    6e62:	|  |  |  |      sub.l d1,d2
    6e64:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    6e68:	|  |  |  |      move.l 28(sp),-(sp)
    6e6c:	|  |  |  |      move.l 32(sp),-(sp)
    6e70:	|  |  |  |      jsr 133b6 <__mulsi3>
    6e76:	|  |  |  |      addq.l #8,sp
    6e78:	|  |  |  |      move.l d0,d2
    6e7a:	|  |  |  |      move.l 24(sp),-(sp)
    6e7e:	|  |  |  |      move.l 28(sp),-(sp)
    6e82:	|  |  |  |      jsr 133b6 <__mulsi3>
    6e88:	|  |  |  |      addq.l #8,sp
    6e8a:	|  |  |  |      move.l d2,d1
    6e8c:	|  |  |  |      add.l d0,d1
    6e8e:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    6e92:	|  |  |  |      move.l 12(sp),d2
    6e96:	|  |  |  |      cmp.l 32(sp),d2
    6e9a:	|  |  |  |  /-- bge.s 6eb4 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    6e9c:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    6ea2:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    6ea8:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    6eae:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    6eb4:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    6eba:	|  |  |  |      addq.l #1,40(sp)
    6ebe:	|  |  |  \----> movea.l 19d54 <currentFloor>,a0
    6ec4:	|  |  |         move.l 12(a0),d1
    6ec8:	|  |  |         move.l 44(sp),d0
    6ecc:	|  |  |         lsl.l #3,d0
    6ece:	|  |  |         movea.l d1,a0
    6ed0:	|  |  |         adda.l d0,a0
    6ed2:	|  |  |         move.l (a0),d0
    6ed4:	|  |  |         cmp.l 40(sp),d0
    6ed8:	|  |  \-------- bgt.w 6d32 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    6edc:	|  |            addq.l #1,44(sp)
    6ee0:	|  \----------> movea.l 19d54 <currentFloor>,a0
    6ee6:	|               move.l 8(a0),d0
    6eea:	|               cmp.l 44(sp),d0
    6eee:	\-------------- bgt.w 6d0c <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    6ef2:	                moveq #-1,d0
    6ef4:	                cmp.l 48(sp),d0
    6ef8:	            /-- bne.s 6efe <handleClosestPoint+0x21e>
    6efa:	            |   clr.w d0
    6efc:	         /--|-- bra.s 6f18 <handleClosestPoint+0x238>
	*setX = gotX;
    6efe:	         |  \-> movea.l 64(sp),a0
    6f02:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    6f06:	         |      movea.l 68(sp),a0
    6f0a:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    6f0e:	         |      movea.l 72(sp),a0
    6f12:	         |      move.l 48(sp),(a0)

	return TRUE;
    6f16:	         |      moveq #1,d0
}
    6f18:	         \----> move.l (sp)+,d2
    6f1a:	                lea 56(sp),sp
    6f1e:	                rts

00006f20 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    6f20:	clr.l 19cc0 <personRegion+0x10>
	personRegion.sY = 0;
    6f26:	clr.l 19cc4 <personRegion+0x14>
	personRegion.di = -1;
    6f2c:	moveq #-1,d0
    6f2e:	move.l d0,19cc8 <personRegion+0x18>
	allScreenRegions = NULL;
    6f34:	clr.l 19d4c <allScreenRegions>

	return TRUE;
    6f3a:	moveq #1,d0
}
    6f3c:	rts

00006f3e <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    6f3e:	          subq.l #4,sp
    6f40:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    6f42:	          tst.l 12(sp)
    6f46:	      /-- bne.s 6f4e <jumpPerson+0x10>
    6f48:	      |   tst.l 16(sp)
    6f4c:	/-----|-- beq.s 6fc2 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    6f4e:	|     \-> move.l 20(sp),-(sp)
    6f52:	|         jsr 6be4 <findPerson>
    6f58:	|         addq.l #4,sp
    6f5a:	|         move.l d0,4(sp)
    if (!moveMe) return;
    6f5e:	|  /----- beq.s 6fc6 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    6f60:	|  |      movea.l 4(sp),a0
    6f64:	|  |      move.l 56(a0),d0
    6f68:	|  |  /-- beq.s 6f7c <jumpPerson+0x3e>
    6f6a:	|  |  |   movea.l 4(sp),a0
    6f6e:	|  |  |   move.l 56(a0),d0
    6f72:	|  |  |   move.l d0,-(sp)
    6f74:	|  |  |   jsr 20e0 <abortFunction>
    6f7a:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    6f7c:	|  |  \-> movea.l 4(sp),a0
    6f80:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    6f84:	|  |      movea.l 4(sp),a0
    6f88:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    6f8c:	|  |      movea.l 4(sp),a0
    6f90:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    6f94:	|  |      move.l 16(sp),-(sp)
    6f98:	|  |      jsr 12e5c <__floatsisf>
    6f9e:	|  |      addq.l #4,sp
    6fa0:	|  |      move.l d0,d2
    6fa2:	|  |      move.l 12(sp),-(sp)
    6fa6:	|  |      jsr 12e5c <__floatsisf>
    6fac:	|  |      addq.l #4,sp
    6fae:	|  |      move.l d2,-(sp)
    6fb0:	|  |      move.l d0,-(sp)
    6fb2:	|  |      move.l 12(sp),-(sp)
    6fb6:	|  |      jsr 732c <moveAndScale>
    6fbc:	|  |      lea 12(sp),sp
    6fc0:	|  |  /-- bra.s 6fc8 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    6fc2:	\--|--|-> nop
    6fc4:	   |  +-- bra.s 6fc8 <jumpPerson+0x8a>
    if (!moveMe) return;
    6fc6:	   \--|-> nop
}
    6fc8:	      \-> move.l (sp)+,d2
    6fca:	          addq.l #4,sp
    6fcc:	          rts

00006fce <killAllPeople>:


void killAllPeople () {
    6fce:	          subq.l #8,sp
    6fd0:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    6fd2:	   /----- bra.s 703e <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    6fd4:	/--|----> movea.l 19cac <allPeople>,a0
    6fda:	|  |      move.l 56(a0),d0
    6fde:	|  |  /-- beq.s 6ff4 <killAllPeople+0x26>
    6fe0:	|  |  |   movea.l 19cac <allPeople>,a0
    6fe6:	|  |  |   move.l 56(a0),d0
    6fea:	|  |  |   move.l d0,-(sp)
    6fec:	|  |  |   jsr 20e0 <abortFunction>
    6ff2:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    6ff4:	|  |  \-> movea.l 19cac <allPeople>,a0
    6ffa:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    6ffe:	|  |      move.l 19cac <allPeople>,8(sp)
		allPeople = allPeople -> next;
    7006:	|  |      movea.l 19cac <allPeople>,a0
    700c:	|  |      move.l 24(a0),d0
    7010:	|  |      move.l d0,19cac <allPeople>
		removeObjectType (killPeople -> thisType);
    7016:	|  |      movea.l 8(sp),a0
    701a:	|  |      move.l 102(a0),d0
    701e:	|  |      move.l d0,-(sp)
    7020:	|  |      jsr 9baa <removeObjectType>
    7026:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    7028:	|  |      move.l 8(sp),4(sp)
    702e:	|  |      move.l 19c4c <SysBase>,d0
    7034:	|  |      movea.l d0,a6
    7036:	|  |      movea.l 4(sp),a1
    703a:	|  |      jsr -690(a6)
	while (allPeople) {
    703e:	|  \----> move.l 19cac <allPeople>,d0
    7044:	\-------- bne.s 6fd4 <killAllPeople+0x6>
	}
}
    7046:	          nop
    7048:	          nop
    704a:	          movea.l (sp)+,a6
    704c:	          addq.l #8,sp
    704e:	          rts

00007050 <killMostPeople>:

void killMostPeople() {
    7050:	          lea -12(sp),sp
    7054:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    7056:	          move.l #105644,12(sp)

    while (*lookyHere) {
    705e:	   /----- bra.w 70e4 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    7062:	/--|----> movea.l 12(sp),a0
    7066:	|  |      movea.l (a0),a0
    7068:	|  |      move.l 106(a0),d0
    706c:	|  |      moveq #32,d1
    706e:	|  |      and.l d1,d0
    7070:	|  |  /-- beq.s 7082 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    7072:	|  |  |   movea.l 12(sp),a0
    7076:	|  |  |   move.l (a0),d0
    7078:	|  |  |   moveq #24,d1
    707a:	|  |  |   add.l d0,d1
    707c:	|  |  |   move.l d1,12(sp)
    7080:	|  +--|-- bra.s 70e4 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    7082:	|  |  \-> movea.l 12(sp),a0
    7086:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    708a:	|  |      movea.l 8(sp),a0
    708e:	|  |      move.l 24(a0),d0
    7092:	|  |      movea.l 12(sp),a0
    7096:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    7098:	|  |      movea.l 8(sp),a0
    709c:	|  |      move.l 56(a0),d0
    70a0:	|  |  /-- beq.s 70b4 <killMostPeople+0x64>
    70a2:	|  |  |   movea.l 8(sp),a0
    70a6:	|  |  |   move.l 56(a0),d0
    70aa:	|  |  |   move.l d0,-(sp)
    70ac:	|  |  |   jsr 20e0 <abortFunction>
    70b2:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    70b4:	|  |  \-> movea.l 8(sp),a0
    70b8:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    70bc:	|  |      movea.l 8(sp),a0
    70c0:	|  |      move.l 102(a0),d0
    70c4:	|  |      move.l d0,-(sp)
    70c6:	|  |      jsr 9baa <removeObjectType>
    70cc:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    70ce:	|  |      move.l 8(sp),4(sp)
    70d4:	|  |      move.l 19c4c <SysBase>,d0
    70da:	|  |      movea.l d0,a6
    70dc:	|  |      movea.l 4(sp),a1
    70e0:	|  |      jsr -690(a6)
    while (*lookyHere) {
    70e4:	|  \----> movea.l 12(sp),a0
    70e8:	|         move.l (a0),d0
    70ea:	\-------- bne.w 7062 <killMostPeople+0x12>
        }
    }
}
    70ee:	          nop
    70f0:	          nop
    70f2:	          movea.l (sp)+,a6
    70f4:	          lea 12(sp),sp
    70f8:	          rts

000070fa <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    70fa:	clr.l -(sp)
    70fc:	move.l sp,d0
    70fe:	addq.l #8,d0
    7100:	move.l d0,-(sp)
    7102:	jsr 5832 <setFrames>
    7108:	addq.l #8,sp
}
    710a:	nop
    710c:	rts

0000710e <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    710e:	          lea -12(sp),sp
    7112:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    7114:	          tst.l 20(sp)
    7118:	      /-- bne.s 7126 <makeWalkingPerson+0x18>
    711a:	      |   tst.l 24(sp)
    711e:	      +-- bne.s 7126 <makeWalkingPerson+0x18>
    7120:	      |   clr.w d0
    7122:	/-----|-- bra.w 72be <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    7126:	|     \-> movea.l 19d54 <currentFloor>,a0
    712c:	|         move.l 8(a0),d0
    7130:	|     /-- bne.s 7138 <makeWalkingPerson+0x2a>
    7132:	|     |   clr.w d0
    7134:	+-----|-- bra.w 72be <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    7138:	|     \-> move.l 28(sp),-(sp)
    713c:	|         jsr 6be4 <findPerson>
    7142:	|         addq.l #4,sp
    7144:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    7148:	|     /-- bne.s 7150 <makeWalkingPerson+0x42>
    714a:	|     |   clr.w d0
    714c:	+-----|-- bra.w 72be <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    7150:	|     \-> movea.l 12(sp),a0
    7154:	|         move.l 56(a0),d0
    7158:	|     /-- beq.s 716c <makeWalkingPerson+0x5e>
    715a:	|     |   movea.l 12(sp),a0
    715e:	|     |   move.l 56(a0),d0
    7162:	|     |   move.l d0,-(sp)
    7164:	|     |   jsr 20e0 <abortFunction>
    716a:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    716c:	|     \-> movea.l 12(sp),a0
    7170:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    7174:	|         movea.l 12(sp),a0
    7178:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    717e:	|         movea.l 12(sp),a0
    7182:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    7188:	|         movea.l 12(sp),a0
    718c:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    7192:	|         movea.l 12(sp),a0
    7196:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    719c:	|         move.l 24(sp),-(sp)
    71a0:	|         move.l 24(sp),-(sp)
    71a4:	|         jsr 11d5a <inFloor>
    71aa:	|         addq.l #8,sp
    71ac:	|         movea.l 12(sp),a0
    71b0:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    71b4:	|         movea.l 12(sp),a0
    71b8:	|         move.l 48(a0),d0
    71bc:	|         moveq #-1,d1
    71be:	|         cmp.l d0,d1
    71c0:	|     /-- bne.s 71f0 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    71c2:	|     |   movea.w #48,a0
    71c6:	|     |   adda.l 12(sp),a0
    71ca:	|     |   moveq #32,d1
    71cc:	|     |   add.l 12(sp),d1
    71d0:	|     |   moveq #28,d0
    71d2:	|     |   add.l 12(sp),d0
    71d6:	|     |   move.l a0,-(sp)
    71d8:	|     |   move.l d1,-(sp)
    71da:	|     |   move.l d0,-(sp)
    71dc:	|     |   jsr 6ce0 <handleClosestPoint>
    71e2:	|     |   lea 12(sp),sp
    71e6:	|     |   tst.w d0
    71e8:	|     +-- bne.s 71f0 <makeWalkingPerson+0xe2>
    71ea:	|     |   clr.w d0
    71ec:	+-----|-- bra.w 72be <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    71f0:	|     \-> movea.l 12(sp),a0
    71f4:	|         move.l 4(a0),d0
    71f8:	|         move.l d0,-(sp)
    71fa:	|         jsr 12df4 <__fixsfsi>
    7200:	|         addq.l #4,sp
    7202:	|         move.l d0,d2
    7204:	|         movea.l 12(sp),a0
    7208:	|         move.l (a0),d0
    720a:	|         move.l d0,-(sp)
    720c:	|         jsr 12df4 <__fixsfsi>
    7212:	|         addq.l #4,sp
    7214:	|         move.l d2,-(sp)
    7216:	|         move.l d0,-(sp)
    7218:	|         jsr 11d5a <inFloor>
    721e:	|         addq.l #8,sp
    7220:	|         movea.l 12(sp),a0
    7224:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    7228:	|         movea.l 12(sp),a0
    722c:	|         move.l 44(a0),d0
    7230:	|         moveq #-1,d1
    7232:	|         cmp.l d0,d1
    7234:	|     /-- bne.s 7286 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    7236:	|     |   movea.l 12(sp),a0
    723a:	|     |   move.l (a0),d0
    723c:	|     |   move.l d0,-(sp)
    723e:	|     |   jsr 12df4 <__fixsfsi>
    7244:	|     |   addq.l #4,sp
    7246:	|     |   move.l d0,8(sp)
    724a:	|     |   movea.l 12(sp),a0
    724e:	|     |   move.l 4(a0),d0
    7252:	|     |   move.l d0,-(sp)
    7254:	|     |   jsr 12df4 <__fixsfsi>
    725a:	|     |   addq.l #4,sp
    725c:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    7260:	|     |   moveq #44,d0
    7262:	|     |   add.l 12(sp),d0
    7266:	|     |   move.l d0,-(sp)
    7268:	|     |   lea 8(sp),a0
    726c:	|     |   move.l a0,-(sp)
    726e:	|     |   moveq #16,d0
    7270:	|     |   add.l sp,d0
    7272:	|     |   move.l d0,-(sp)
    7274:	|     |   jsr 6ce0 <handleClosestPoint>
    727a:	|     |   lea 12(sp),sp
    727e:	|     |   tst.w d0
    7280:	|     +-- bne.s 7286 <makeWalkingPerson+0x178>
    7282:	|     |   clr.w d0
    7284:	+-----|-- bra.s 72be <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    7286:	|     \-> move.l 12(sp),-(sp)
    728a:	|         jsr 652a <doBorderStuff>
    7290:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    7292:	|         clr.l -(sp)
    7294:	|         move.l 16(sp),-(sp)
    7298:	|         jsr 8372 <walkMe>
    729e:	|         addq.l #8,sp
    72a0:	|         tst.w d0
    72a2:	|     /-- bne.s 72ae <makeWalkingPerson+0x1a0>
    72a4:	|     |   movea.l 12(sp),a0
    72a8:	|     |   move.w 54(a0),d0
    72ac:	|  /--|-- beq.s 72bc <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    72ae:	|  |  \-> movea.l 12(sp),a0
    72b2:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    72b8:	|  |      moveq #1,d0
    72ba:	+--|----- bra.s 72be <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    72bc:	|  \----> clr.w d0
	}
}
    72be:	\-------> move.l (sp)+,d2
    72c0:	          lea 12(sp),sp
    72c4:	          rts

000072c6 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    72c6:	       lea -16(sp),sp
    72ca:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    72cc:	       moveq #12,d0
    72ce:	       move.l d0,16(sp)
    72d2:	       clr.l 12(sp)
    72d6:	       move.l 19c4c <SysBase>,d0
    72dc:	       movea.l d0,a6
    72de:	       move.l 16(sp),d0
    72e2:	       move.l 12(sp),d1
    72e6:	       jsr -684(a6)
    72ea:	       move.l d0,8(sp)
    72ee:	       move.l 8(sp),d0
    72f2:	       move.l d0,4(sp)
    if(newAnim == 0) {
    72f6:	   /-- bne.s 730a <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    72f8:	   |   pea 15b4c <main_sludge.c.2f5c5368+0x72>
    72fe:	   |   jsr 12a04 <KPrintF>
    7304:	   |   addq.l #4,sp
        return NULL;    
    7306:	   |   moveq #0,d0
    7308:	/--|-- bra.s 7324 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    730a:	|  \-> movea.l 4(sp),a0
    730e:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    7310:	|      movea.l 4(sp),a0
    7314:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    7318:	|      movea.l 4(sp),a0
    731c:	|      clr.l 4(a0)
	return newAnim;
    7320:	|      move.l 4(sp),d0
}
    7324:	\----> movea.l (sp)+,a6
    7326:	       lea 16(sp),sp
    732a:	       rts

0000732c <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    732c:	    move.l d2,-(sp)
	me->x = x;
    732e:	    movea.l 8(sp),a0
    7332:	    move.l 12(sp),(a0)
	me->y = y;
    7336:	    movea.l 8(sp),a0
    733a:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    7340:	    movea.l 8(sp),a0
    7344:	    move.l 106(a0),d0
    7348:	    moveq #2,d1
    734a:	    and.l d1,d0
    734c:	/-- bne.s 73a4 <moveAndScale+0x78>
    734e:	|   move.w 18140 <scaleDivide>,d0
    7354:	+-- beq.s 73a4 <moveAndScale+0x78>
    7356:	|   movea.l 8(sp),a0
    735a:	|   move.l 4(a0),d2
    735e:	|   move.w 1813e <scaleHorizon>,d0
    7364:	|   movea.w d0,a0
    7366:	|   move.l a0,-(sp)
    7368:	|   jsr 12e5c <__floatsisf>
    736e:	|   addq.l #4,sp
    7370:	|   move.l d0,-(sp)
    7372:	|   move.l d2,-(sp)
    7374:	|   jsr 13150 <__subsf3>
    737a:	|   addq.l #8,sp
    737c:	|   move.l d0,d2
    737e:	|   move.w 18140 <scaleDivide>,d0
    7384:	|   movea.w d0,a0
    7386:	|   move.l a0,-(sp)
    7388:	|   jsr 12e5c <__floatsisf>
    738e:	|   addq.l #4,sp
    7390:	|   move.l d0,-(sp)
    7392:	|   move.l d2,-(sp)
    7394:	|   jsr 12d08 <__divsf3>
    739a:	|   addq.l #8,sp
    739c:	|   movea.l 8(sp),a0
    73a0:	|   move.l d0,20(a0)
}
    73a4:	\-> nop
    73a6:	    move.l (sp)+,d2
    73a8:	    rts

000073aa <removeOneCharacter>:

void removeOneCharacter (int i) {
    73aa:	          lea -12(sp),sp
    73ae:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    73b0:	          move.l 20(sp),-(sp)
    73b4:	          jsr 6be4 <findPerson>
    73ba:	          addq.l #4,sp
    73bc:	          move.l d0,8(sp)

    if (p) {
    73c0:	/-------- beq.w 746c <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    73c4:	|         move.l 19d50 <overRegion>,d0
    73ca:	|         cmpi.l #105648,d0
    73d0:	|     /-- bne.s 73ee <removeOneCharacter+0x44>
    73d2:	|     |   movea.l 19d50 <overRegion>,a0
    73d8:	|     |   move.l 28(a0),d1
    73dc:	|     |   movea.l 8(sp),a0
    73e0:	|     |   move.l 102(a0),d0
    73e4:	|     |   cmp.l d1,d0
    73e6:	|     +-- bne.s 73ee <removeOneCharacter+0x44>
            overRegion = NULL;
    73e8:	|     |   clr.l 19d50 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    73ee:	|     \-> movea.l 8(sp),a0
    73f2:	|         move.l 56(a0),d0
    73f6:	|     /-- beq.s 740a <removeOneCharacter+0x60>
    73f8:	|     |   movea.l 8(sp),a0
    73fc:	|     |   move.l 56(a0),d0
    7400:	|     |   move.l d0,-(sp)
    7402:	|     |   jsr 20e0 <abortFunction>
    7408:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    740a:	|     \-> movea.l 8(sp),a0
    740e:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    7412:	|         move.l #105644,12(sp)
    741a:	|     /-- bra.s 742a <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    741c:	|  /--|-> movea.l 12(sp),a0
    7420:	|  |  |   move.l (a0),d0
    7422:	|  |  |   moveq #24,d1
    7424:	|  |  |   add.l d0,d1
    7426:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    742a:	|  |  \-> movea.l 12(sp),a0
    742e:	|  |      move.l (a0),d0
    7430:	|  |      cmp.l 8(sp),d0
    7434:	|  \----- bne.s 741c <removeOneCharacter+0x72>

        *killPeople = p->next;
    7436:	|         movea.l 8(sp),a0
    743a:	|         move.l 24(a0),d0
    743e:	|         movea.l 12(sp),a0
    7442:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    7444:	|         movea.l 8(sp),a0
    7448:	|         move.l 102(a0),d0
    744c:	|         move.l d0,-(sp)
    744e:	|         jsr 9baa <removeObjectType>
    7454:	|         addq.l #4,sp
        FreeVec(p);
    7456:	|         move.l 8(sp),4(sp)
    745c:	|         move.l 19c4c <SysBase>,d0
    7462:	|         movea.l d0,a6
    7464:	|         movea.l 4(sp),a1
    7468:	|         jsr -690(a6)
    }
}
    746c:	\-------> nop
    746e:	          movea.l (sp)+,a6
    7470:	          lea 12(sp),sp
    7474:	          rts

00007476 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    7476:	       subq.l #8,sp
    7478:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    747a:	       movea.l 16(sp),a0
    747e:	       movea.l 68(a0),a0
    7482:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    7488:	       movea.l 16(sp),a0
    748c:	       move.l 80(a0),d2
    7490:	       move.l 4(sp),-(sp)
    7494:	       pea b4 <_start+0xb4>
    7498:	       jsr 13434 <__divsi3>
    749e:	       addq.l #8,sp
    74a0:	       add.l d2,d0
    74a2:	       move.l d0,d1
    74a4:	       addi.l #180,d1
    74aa:	       movea.l 16(sp),a0
    74ae:	       move.l 88(a0),d0
    74b2:	       move.l d1,d2
    74b4:	       add.l d0,d2
    74b6:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    74ba:	   /-- bra.s 74c4 <rethinkAngle+0x4e>
    74bc:	/--|-> addi.l #-360,8(sp)
    74c4:	|  \-> cmpi.l #359,8(sp)
    74cc:	\----- bgt.s 74bc <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    74ce:	       move.l 4(sp),-(sp)
    74d2:	       move.l 12(sp),-(sp)
    74d6:	       jsr 133b6 <__mulsi3>
    74dc:	       addq.l #8,sp
    74de:	       pea 168 <decodeFilename+0x50>
    74e2:	       move.l d0,-(sp)
    74e4:	       jsr 13434 <__divsi3>
    74ea:	       addq.l #8,sp
    74ec:	       movea.l 16(sp),a0
    74f0:	       move.l d0,94(a0)
}
    74f4:	       nop
    74f6:	       move.l (sp)+,d2
    74f8:	       addq.l #8,sp
    74fa:	       rts

000074fc <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    74fc:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    74fe:	          movea.l 8(sp),a0
    7502:	          move.l 8(a0),d0
    7506:	          move.l 12(sp),-(sp)
    750a:	          move.l d0,-(sp)
    750c:	          jsr 8d0 <put2bytes>
    7512:	          addq.l #8,sp
	if (p -> numFrames) {
    7514:	          movea.l 8(sp),a0
    7518:	          move.l 8(a0),d0
    751c:	/-------- beq.w 75c0 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    7520:	|         movea.l 8(sp),a0
    7524:	|         movea.l (a0),a0
    7526:	|         move.l (a0),d0
    7528:	|         move.l 12(sp),-(sp)
    752c:	|         move.l d0,-(sp)
    752e:	|         jsr 958 <put4bytes>
    7534:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    7536:	|         clr.l (sp)
    7538:	|     /-- bra.s 75b2 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    753a:	|  /--|-> movea.l 8(sp),a0
    753e:	|  |  |   movea.l 4(a0),a0
    7542:	|  |  |   move.l (sp),d1
    7544:	|  |  |   move.l d1,d0
    7546:	|  |  |   add.l d0,d0
    7548:	|  |  |   add.l d1,d0
    754a:	|  |  |   add.l d0,d0
    754c:	|  |  |   add.l d0,d0
    754e:	|  |  |   adda.l d0,a0
    7550:	|  |  |   move.l (a0),d0
    7552:	|  |  |   move.l 12(sp),-(sp)
    7556:	|  |  |   move.l d0,-(sp)
    7558:	|  |  |   jsr 958 <put4bytes>
    755e:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    7560:	|  |  |   movea.l 8(sp),a0
    7564:	|  |  |   movea.l 4(a0),a0
    7568:	|  |  |   move.l (sp),d1
    756a:	|  |  |   move.l d1,d0
    756c:	|  |  |   add.l d0,d0
    756e:	|  |  |   add.l d1,d0
    7570:	|  |  |   add.l d0,d0
    7572:	|  |  |   add.l d0,d0
    7574:	|  |  |   adda.l d0,a0
    7576:	|  |  |   move.l 4(a0),d0
    757a:	|  |  |   move.l 12(sp),-(sp)
    757e:	|  |  |   move.l d0,-(sp)
    7580:	|  |  |   jsr 958 <put4bytes>
    7586:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    7588:	|  |  |   movea.l 8(sp),a0
    758c:	|  |  |   movea.l 4(a0),a0
    7590:	|  |  |   move.l (sp),d1
    7592:	|  |  |   move.l d1,d0
    7594:	|  |  |   add.l d0,d0
    7596:	|  |  |   add.l d1,d0
    7598:	|  |  |   add.l d0,d0
    759a:	|  |  |   add.l d0,d0
    759c:	|  |  |   adda.l d0,a0
    759e:	|  |  |   move.l 8(a0),d0
    75a2:	|  |  |   move.l 12(sp),-(sp)
    75a6:	|  |  |   move.l d0,-(sp)
    75a8:	|  |  |   jsr 958 <put4bytes>
    75ae:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    75b0:	|  |  |   addq.l #1,(sp)
    75b2:	|  |  \-> movea.l 8(sp),a0
    75b6:	|  |      move.l 8(a0),d0
    75ba:	|  |      cmp.l (sp),d0
    75bc:	|  \----- bgt.w 753a <saveAnim+0x3e>
		}
	}
	return TRUE;
    75c0:	\-------> moveq #1,d0
}
    75c2:	          addq.l #4,sp
    75c4:	          rts

000075c6 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    75c6:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    75c8:	             movea.l 8(sp),a0
    75cc:	             move.l 4(a0),d0
    75d0:	             move.l 12(sp),-(sp)
    75d4:	             move.l d0,-(sp)
    75d6:	             jsr 8d0 <put2bytes>
    75dc:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    75de:	             clr.l (sp)
    75e0:	   /-------- bra.s 760c <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    75e2:	/--|-------> movea.l 8(sp),a0
    75e6:	|  |         move.l (a0),d1
    75e8:	|  |         move.l (sp),d0
    75ea:	|  |         add.l d0,d0
    75ec:	|  |         add.l d0,d0
    75ee:	|  |         movea.l d1,a0
    75f0:	|  |         adda.l d0,a0
    75f2:	|  |         move.l (a0),d0
    75f4:	|  |         move.l 12(sp),-(sp)
    75f8:	|  |         move.l d0,-(sp)
    75fa:	|  |         jsr 74fc <saveAnim>
    7600:	|  |         addq.l #8,sp
    7602:	|  |         tst.w d0
    7604:	|  |     /-- bne.s 760a <saveCostume+0x44>
    7606:	|  |     |   clr.w d0
    7608:	|  |  /--|-- bra.s 7620 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    760a:	|  |  |  \-> addq.l #1,(sp)
    760c:	|  \--|----> movea.l 8(sp),a0
    7610:	|     |      move.l 4(a0),d1
    7614:	|     |      move.l d1,d0
    7616:	|     |      add.l d0,d0
    7618:	|     |      add.l d1,d0
    761a:	|     |      cmp.l (sp),d0
    761c:	\-----|----- bgt.s 75e2 <saveCostume+0x1c>
	}

	return TRUE;
    761e:	      |      moveq #1,d0
}
    7620:	      \----> addq.l #4,sp
    7622:	             rts

00007624 <savePeople>:

BOOL savePeople (BPTR fp) {
    7624:	             lea -144(sp),sp
    7628:	             move.l a6,-(sp)
    762a:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    762c:	             move.l 19cac <allPeople>,148(sp)
	int countPeople = 0, a;
    7634:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    7638:	             move.w 1813e <scaleHorizon>,d0
    763e:	             movea.w d0,a0
    7640:	             move.l 156(sp),-(sp)
    7644:	             move.l a0,-(sp)
    7646:	             jsr a9c <putSigned>
    764c:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    764e:	             move.w 18140 <scaleDivide>,d0
    7654:	             movea.w d0,a0
    7656:	             move.l 156(sp),-(sp)
    765a:	             move.l a0,-(sp)
    765c:	             jsr a9c <putSigned>
    7662:	             addq.l #8,sp

	while (me) {
    7664:	         /-- bra.s 7674 <savePeople+0x50>
		countPeople ++;
    7666:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    766a:	      |  |   movea.l 148(sp),a0
    766e:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    7674:	      |  \-> tst.l 148(sp)
    7678:	      \----- bne.s 7666 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    767a:	             move.l 156(sp),-(sp)
    767e:	             move.l 148(sp),-(sp)
    7682:	             jsr 8d0 <put2bytes>
    7688:	             addq.l #8,sp

	me = allPeople;
    768a:	             move.l 19cac <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    7692:	             clr.l 140(sp)
    7696:	   /-------- bra.w 7aee <savePeople+0x4ca>

		putFloat (me -> x, fp);
    769a:	/--|-------> movea.l 148(sp),a0
    769e:	|  |         move.l (a0),d0
    76a0:	|  |         move.l 156(sp),-(sp)
    76a4:	|  |         move.l d0,-(sp)
    76a6:	|  |         jsr a46 <putFloat>
    76ac:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    76ae:	|  |         movea.l 148(sp),a0
    76b2:	|  |         move.l 4(a0),d0
    76b6:	|  |         move.l 156(sp),-(sp)
    76ba:	|  |         move.l d0,-(sp)
    76bc:	|  |         jsr a46 <putFloat>
    76c2:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    76c4:	|  |         movea.l 148(sp),a0
    76c8:	|  |         move.l 68(a0),d0
    76cc:	|  |         move.l 156(sp),-(sp)
    76d0:	|  |         move.l d0,-(sp)
    76d2:	|  |         jsr 75c6 <saveCostume>
    76d8:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    76da:	|  |         movea.l 148(sp),a0
    76de:	|  |         move.l 60(a0),d0
    76e2:	|  |         move.l 156(sp),-(sp)
    76e6:	|  |         move.l d0,-(sp)
    76e8:	|  |         jsr 74fc <saveAnim>
    76ee:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    76f0:	|  |         move.l 156(sp),136(sp)
    76f6:	|  |         movea.l 148(sp),a0
    76fa:	|  |         move.l 60(a0),d1
    76fe:	|  |         movea.l 148(sp),a0
    7702:	|  |         move.l 64(a0),d0
    7706:	|  |         cmp.l d1,d0
    7708:	|  |         seq d0
    770a:	|  |         neg.b d0
    770c:	|  |         move.b d0,d0
    770e:	|  |         andi.l #255,d0
    7714:	|  |         move.l d0,132(sp)
    7718:	|  |         move.l 19c54 <DOSBase>,d0
    771e:	|  |         movea.l d0,a6
    7720:	|  |         move.l 136(sp),d1
    7724:	|  |         move.l 132(sp),d2
    7728:	|  |         jsr -312(a6)
    772c:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    7730:	|  |         movea.l 148(sp),a0
    7734:	|  |         move.l 20(a0),d0
    7738:	|  |         move.l 156(sp),-(sp)
    773c:	|  |         move.l d0,-(sp)
    773e:	|  |         jsr a46 <putFloat>
    7744:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    7746:	|  |         movea.l 148(sp),a0
    774a:	|  |         move.l 106(a0),d0
    774e:	|  |         move.l 156(sp),-(sp)
    7752:	|  |         move.l d0,-(sp)
    7754:	|  |         jsr 8d0 <put2bytes>
    775a:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    775c:	|  |         movea.l 148(sp),a0
    7760:	|  |         move.l 8(a0),d0
    7764:	|  |         move.l 156(sp),-(sp)
    7768:	|  |         move.l d0,-(sp)
    776a:	|  |         jsr 8d0 <put2bytes>
    7770:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    7772:	|  |         movea.l 148(sp),a0
    7776:	|  |         move.l 28(a0),d0
    777a:	|  |         move.l 156(sp),-(sp)
    777e:	|  |         move.l d0,-(sp)
    7780:	|  |         jsr 8d0 <put2bytes>
    7786:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    7788:	|  |         movea.l 148(sp),a0
    778c:	|  |         move.l 32(a0),d0
    7790:	|  |         move.l 156(sp),-(sp)
    7794:	|  |         move.l d0,-(sp)
    7796:	|  |         jsr 8d0 <put2bytes>
    779c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    779e:	|  |         movea.l 148(sp),a0
    77a2:	|  |         move.l 36(a0),d0
    77a6:	|  |         move.l 156(sp),-(sp)
    77aa:	|  |         move.l d0,-(sp)
    77ac:	|  |         jsr 8d0 <put2bytes>
    77b2:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    77b4:	|  |         movea.l 148(sp),a0
    77b8:	|  |         move.l 40(a0),d0
    77bc:	|  |         move.l 156(sp),-(sp)
    77c0:	|  |         move.l d0,-(sp)
    77c2:	|  |         jsr 8d0 <put2bytes>
    77c8:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    77ca:	|  |         movea.l 148(sp),a0
    77ce:	|  |         move.l 72(a0),d0
    77d2:	|  |         move.l 156(sp),-(sp)
    77d6:	|  |         move.l d0,-(sp)
    77d8:	|  |         jsr 8d0 <put2bytes>
    77de:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    77e0:	|  |         movea.l 148(sp),a0
    77e4:	|  |         move.l 76(a0),d0
    77e8:	|  |         move.l 156(sp),-(sp)
    77ec:	|  |         move.l d0,-(sp)
    77ee:	|  |         jsr 8d0 <put2bytes>
    77f4:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    77f6:	|  |         movea.l 148(sp),a0
    77fa:	|  |         move.l 16(a0),d0
    77fe:	|  |         move.l 156(sp),-(sp)
    7802:	|  |         move.l d0,-(sp)
    7804:	|  |         jsr 8d0 <put2bytes>
    780a:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    780c:	|  |         movea.l 148(sp),a0
    7810:	|  |         move.l 110(a0),d0
    7814:	|  |         move.l 156(sp),-(sp)
    7818:	|  |         move.l d0,-(sp)
    781a:	|  |         jsr 8d0 <put2bytes>
    7820:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    7822:	|  |         movea.l 148(sp),a0
    7826:	|  |         move.l 12(a0),d0
    782a:	|  |         move.l d0,d0
    782c:	|  |         movea.w d0,a0
    782e:	|  |         move.l 156(sp),-(sp)
    7832:	|  |         move.l a0,-(sp)
    7834:	|  |         jsr a9c <putSigned>
    783a:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    783c:	|  |         move.l 156(sp),124(sp)
    7842:	|  |         movea.l 148(sp),a0
    7846:	|  |         move.w 92(a0),d0
    784a:	|  |         movea.w d0,a0
    784c:	|  |         move.l a0,120(sp)
    7850:	|  |         move.l 19c54 <DOSBase>,d0
    7856:	|  |         movea.l d0,a6
    7858:	|  |         move.l 124(sp),d1
    785c:	|  |         move.l 120(sp),d2
    7860:	|  |         jsr -312(a6)
    7864:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    7868:	|  |         move.l 156(sp),112(sp)
    786e:	|  |         movea.l 148(sp),a0
    7872:	|  |         move.w 52(a0),d0
    7876:	|  |         movea.w d0,a0
    7878:	|  |         move.l a0,108(sp)
    787c:	|  |         move.l 19c54 <DOSBase>,d0
    7882:	|  |         movea.l d0,a6
    7884:	|  |         move.l 112(sp),d1
    7888:	|  |         move.l 108(sp),d2
    788c:	|  |         jsr -312(a6)
    7890:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    7894:	|  |         move.l 156(sp),100(sp)
    789a:	|  |         movea.l 148(sp),a0
    789e:	|  |         move.w 54(a0),d0
    78a2:	|  |         movea.w d0,a0
    78a4:	|  |         move.l a0,96(sp)
    78a8:	|  |         move.l 19c54 <DOSBase>,d0
    78ae:	|  |         movea.l d0,a6
    78b0:	|  |         move.l 100(sp),d1
    78b4:	|  |         move.l 96(sp),d2
    78b8:	|  |         jsr -312(a6)
    78bc:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    78c0:	|  |         movea.l 148(sp),a0
    78c4:	|  |         move.l 56(a0),d0
    78c8:	|  |  /----- beq.s 7906 <savePeople+0x2e2>
			FPutC (fp, 1);
    78ca:	|  |  |      move.l 156(sp),76(sp)
    78d0:	|  |  |      moveq #1,d0
    78d2:	|  |  |      move.l d0,72(sp)
    78d6:	|  |  |      move.l 19c54 <DOSBase>,d0
    78dc:	|  |  |      movea.l d0,a6
    78de:	|  |  |      move.l 76(sp),d1
    78e2:	|  |  |      move.l 72(sp),d2
    78e6:	|  |  |      jsr -312(a6)
    78ea:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    78ee:	|  |  |      movea.l 148(sp),a0
    78f2:	|  |  |      move.l 56(a0),d0
    78f6:	|  |  |      move.l 156(sp),-(sp)
    78fa:	|  |  |      move.l d0,-(sp)
    78fc:	|  |  |      jsr 8a94 <saveFunction>
    7902:	|  |  |      addq.l #8,sp
    7904:	|  |  |  /-- bra.s 792a <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    7906:	|  |  \--|-> move.l 156(sp),88(sp)
    790c:	|  |     |   moveq #1,d0
    790e:	|  |     |   move.l d0,84(sp)
    7912:	|  |     |   move.l 19c54 <DOSBase>,d0
    7918:	|  |     |   movea.l d0,a6
    791a:	|  |     |   move.l 88(sp),d1
    791e:	|  |     |   move.l 84(sp),d2
    7922:	|  |     |   jsr -312(a6)
    7926:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    792a:	|  |     \-> movea.l 148(sp),a0
    792e:	|  |         move.l 94(a0),d0
    7932:	|  |         move.l 156(sp),-(sp)
    7936:	|  |         move.l d0,-(sp)
    7938:	|  |         jsr 8d0 <put2bytes>
    793e:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    7940:	|  |         movea.l 148(sp),a0
    7944:	|  |         move.l 80(a0),d0
    7948:	|  |         move.l 156(sp),-(sp)
    794c:	|  |         move.l d0,-(sp)
    794e:	|  |         jsr 8d0 <put2bytes>
    7954:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    7956:	|  |         movea.l 148(sp),a0
    795a:	|  |         move.l 88(a0),d0
    795e:	|  |         move.l 156(sp),-(sp)
    7962:	|  |         move.l d0,-(sp)
    7964:	|  |         jsr 8d0 <put2bytes>
    796a:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    796c:	|  |         movea.l 148(sp),a0
    7970:	|  |         move.l 84(a0),d0
    7974:	|  |         move.l 156(sp),-(sp)
    7978:	|  |         move.l d0,-(sp)
    797a:	|  |         jsr 8d0 <put2bytes>
    7980:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    7982:	|  |         movea.l 148(sp),a0
    7986:	|  |         move.l 98(a0),d0
    798a:	|  |         move.l d0,d0
    798c:	|  |         movea.w d0,a0
    798e:	|  |         move.l 156(sp),-(sp)
    7992:	|  |         move.l a0,-(sp)
    7994:	|  |         jsr a9c <putSigned>
    799a:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    799c:	|  |         movea.l 148(sp),a0
    79a0:	|  |         move.l 44(a0),d0
    79a4:	|  |         move.l d0,d0
    79a6:	|  |         movea.w d0,a0
    79a8:	|  |         move.l 156(sp),-(sp)
    79ac:	|  |         move.l a0,-(sp)
    79ae:	|  |         jsr a9c <putSigned>
    79b4:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    79b6:	|  |         movea.l 148(sp),a0
    79ba:	|  |         move.l 48(a0),d0
    79be:	|  |         move.l d0,d0
    79c0:	|  |         movea.w d0,a0
    79c2:	|  |         move.l 156(sp),-(sp)
    79c6:	|  |         move.l a0,-(sp)
    79c8:	|  |         jsr a9c <putSigned>
    79ce:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    79d0:	|  |         move.l 156(sp),64(sp)
    79d6:	|  |         movea.l 148(sp),a0
    79da:	|  |         move.b 114(a0),d0
    79de:	|  |         move.b d0,d0
    79e0:	|  |         andi.l #255,d0
    79e6:	|  |         move.l d0,60(sp)
    79ea:	|  |         move.l 19c54 <DOSBase>,d0
    79f0:	|  |         movea.l d0,a6
    79f2:	|  |         move.l 64(sp),d1
    79f6:	|  |         move.l 60(sp),d2
    79fa:	|  |         jsr -312(a6)
    79fe:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    7a02:	|  |         move.l 156(sp),52(sp)
    7a08:	|  |         movea.l 148(sp),a0
    7a0c:	|  |         move.b 115(a0),d0
    7a10:	|  |         move.b d0,d0
    7a12:	|  |         andi.l #255,d0
    7a18:	|  |         move.l d0,48(sp)
    7a1c:	|  |         move.l 19c54 <DOSBase>,d0
    7a22:	|  |         movea.l d0,a6
    7a24:	|  |         move.l 52(sp),d1
    7a28:	|  |         move.l 48(sp),d2
    7a2c:	|  |         jsr -312(a6)
    7a30:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    7a34:	|  |         move.l 156(sp),40(sp)
    7a3a:	|  |         movea.l 148(sp),a0
    7a3e:	|  |         move.b 116(a0),d0
    7a42:	|  |         move.b d0,d0
    7a44:	|  |         andi.l #255,d0
    7a4a:	|  |         move.l d0,36(sp)
    7a4e:	|  |         move.l 19c54 <DOSBase>,d0
    7a54:	|  |         movea.l d0,a6
    7a56:	|  |         move.l 40(sp),d1
    7a5a:	|  |         move.l 36(sp),d2
    7a5e:	|  |         jsr -312(a6)
    7a62:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    7a66:	|  |         move.l 156(sp),28(sp)
    7a6c:	|  |         movea.l 148(sp),a0
    7a70:	|  |         move.b 117(a0),d0
    7a74:	|  |         move.b d0,d0
    7a76:	|  |         andi.l #255,d0
    7a7c:	|  |         move.l d0,24(sp)
    7a80:	|  |         move.l 19c54 <DOSBase>,d0
    7a86:	|  |         movea.l d0,a6
    7a88:	|  |         move.l 28(sp),d1
    7a8c:	|  |         move.l 24(sp),d2
    7a90:	|  |         jsr -312(a6)
    7a94:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    7a98:	|  |         move.l 156(sp),16(sp)
    7a9e:	|  |         movea.l 148(sp),a0
    7aa2:	|  |         move.b 118(a0),d0
    7aa6:	|  |         move.b d0,d0
    7aa8:	|  |         andi.l #255,d0
    7aae:	|  |         move.l d0,12(sp)
    7ab2:	|  |         move.l 19c54 <DOSBase>,d0
    7ab8:	|  |         movea.l d0,a6
    7aba:	|  |         move.l 16(sp),d1
    7abe:	|  |         move.l 12(sp),d2
    7ac2:	|  |         jsr -312(a6)
    7ac6:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    7aca:	|  |         movea.l 148(sp),a0
    7ace:	|  |         move.l 102(a0),d0
    7ad2:	|  |         move.l 156(sp),-(sp)
    7ad6:	|  |         move.l d0,-(sp)
    7ad8:	|  |         jsr 9c4a <saveObjectRef>
    7ade:	|  |         addq.l #8,sp

		me = me -> next;
    7ae0:	|  |         movea.l 148(sp),a0
    7ae4:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    7aea:	|  |         addq.l #1,140(sp)
    7aee:	|  \-------> movea.l 140(sp),a0
    7af2:	|            cmpa.l 144(sp),a0
    7af6:	\----------- blt.w 769a <savePeople+0x76>
	}
	return TRUE;
    7afa:	             moveq #1,d0
}
    7afc:	             move.l (sp)+,d2
    7afe:	             movea.l (sp)+,a6
    7b00:	             lea 144(sp),sp
    7b04:	             rts

00007b06 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    7b06:	movea.l 4(sp),a0
    7b0a:	move.l 8(sp),(a0)
}
    7b0e:	nop
    7b10:	rts

00007b12 <setDrawMode>:


void setDrawMode (int h, int ob) {
    7b12:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    7b14:	       move.l 12(sp),-(sp)
    7b18:	       jsr 6be4 <findPerson>
    7b1e:	       addq.l #4,sp
    7b20:	       move.l d0,(sp)
	if (! moveMe) return;
    7b22:	/----- beq.s 7b36 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    7b24:	|      move.l 8(sp),-(sp)
    7b28:	|      move.l 4(sp),-(sp)
    7b2c:	|      jsr 7b3c <setMyDrawMode>
    7b32:	|      addq.l #8,sp
    7b34:	|  /-- bra.s 7b38 <setDrawMode+0x26>
	if (! moveMe) return;
    7b36:	\--|-> nop
}
    7b38:	   \-> addq.l #4,sp
    7b3a:	       rts

00007b3c <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    7b3c:	       moveq #19,d0
    7b3e:	       cmp.l 8(sp),d0
    7b42:	/----- bcs.w 801a <setMyDrawMode+0x4de>
    7b46:	|      move.l 8(sp),d0
    7b4a:	|      add.l d0,d0
    7b4c:	|      movea.l d0,a0
    7b4e:	|      adda.l #31578,a0
    7b54:	|      move.w (a0),d0
    7b56:	|      jmp (7b5a <setMyDrawMode+0x1e>,pc,d0.w)
    7b5a:	|      .short 0x04c0
    7b5c:	|      ori.l #6684712,-(a4)
    7b62:	|      btst d0,-(a0)
    7b64:	|      bchg d0,(a6)+
    7b66:	|      bclr d0,(a4)+
    7b68:	|      bset d0,(a2)+
    7b6a:	|      andi.b #84,(a6)
    7b6e:	|      andi.l #55575312,(a2)
    7b74:	|      .short 0x02d0
    7b76:	|      bclr d1,(a0)
    7b78:	|      .short 0x044a
    7b7a:	|      .short 0x040c
    7b7c:	|      movep.l d1,1158(a6)
    7b80:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7b82:	|      movea.l 4(sp),a0
    7b86:	|      clr.b 116(a0)
    7b8a:	|      movea.l 4(sp),a0
    7b8e:	|      move.b 116(a0),d0
    7b92:	|      movea.l 4(sp),a0
    7b96:	|      move.b d0,115(a0)
    7b9a:	|      movea.l 4(sp),a0
    7b9e:	|      move.b 115(a0),d0
    7ba2:	|      movea.l 4(sp),a0
    7ba6:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    7baa:	|      movea.l 4(sp),a0
    7bae:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    7bb2:	|      movea.l 4(sp),a0
    7bb6:	|      move.b #64,118(a0)
			break;
    7bbc:	|  /-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7bc0:	|  |   movea.l 4(sp),a0
    7bc4:	|  |   clr.b 116(a0)
    7bc8:	|  |   movea.l 4(sp),a0
    7bcc:	|  |   move.b 116(a0),d0
    7bd0:	|  |   movea.l 4(sp),a0
    7bd4:	|  |   move.b d0,115(a0)
    7bd8:	|  |   movea.l 4(sp),a0
    7bdc:	|  |   move.b 115(a0),d0
    7be0:	|  |   movea.l 4(sp),a0
    7be4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7be8:	|  |   movea.l 4(sp),a0
    7bec:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    7bf0:	|  |   movea.l 4(sp),a0
    7bf4:	|  |   move.b #-128,118(a0)
			break;
    7bfa:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7bfe:	|  |   movea.l 4(sp),a0
    7c02:	|  |   clr.b 116(a0)
    7c06:	|  |   movea.l 4(sp),a0
    7c0a:	|  |   move.b 116(a0),d0
    7c0e:	|  |   movea.l 4(sp),a0
    7c12:	|  |   move.b d0,115(a0)
    7c16:	|  |   movea.l 4(sp),a0
    7c1a:	|  |   move.b 115(a0),d0
    7c1e:	|  |   movea.l 4(sp),a0
    7c22:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7c26:	|  |   movea.l 4(sp),a0
    7c2a:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    7c2e:	|  |   movea.l 4(sp),a0
    7c32:	|  |   move.b #-64,118(a0)
			break;
    7c38:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7c3c:	|  |   movea.l 4(sp),a0
    7c40:	|  |   clr.b 116(a0)
    7c44:	|  |   movea.l 4(sp),a0
    7c48:	|  |   move.b 116(a0),d0
    7c4c:	|  |   movea.l 4(sp),a0
    7c50:	|  |   move.b d0,115(a0)
    7c54:	|  |   movea.l 4(sp),a0
    7c58:	|  |   move.b 115(a0),d0
    7c5c:	|  |   movea.l 4(sp),a0
    7c60:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7c64:	|  |   movea.l 4(sp),a0
    7c68:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    7c6c:	|  |   movea.l 4(sp),a0
    7c70:	|  |   move.b #-2,118(a0)
			break;
    7c76:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7c7a:	|  |   movea.l 4(sp),a0
    7c7e:	|  |   clr.b 116(a0)
    7c82:	|  |   movea.l 4(sp),a0
    7c86:	|  |   move.b 116(a0),d0
    7c8a:	|  |   movea.l 4(sp),a0
    7c8e:	|  |   move.b d0,115(a0)
    7c92:	|  |   movea.l 4(sp),a0
    7c96:	|  |   move.b 115(a0),d0
    7c9a:	|  |   movea.l 4(sp),a0
    7c9e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7ca2:	|  |   movea.l 4(sp),a0
    7ca6:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    7cac:	|  |   movea.l 4(sp),a0
    7cb0:	|  |   clr.b 118(a0)
			break;
    7cb4:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7cb8:	|  |   movea.l 4(sp),a0
    7cbc:	|  |   clr.b 116(a0)
    7cc0:	|  |   movea.l 4(sp),a0
    7cc4:	|  |   move.b 116(a0),d0
    7cc8:	|  |   movea.l 4(sp),a0
    7ccc:	|  |   move.b d0,115(a0)
    7cd0:	|  |   movea.l 4(sp),a0
    7cd4:	|  |   move.b 115(a0),d0
    7cd8:	|  |   movea.l 4(sp),a0
    7cdc:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7ce0:	|  |   movea.l 4(sp),a0
    7ce4:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    7cea:	|  |   movea.l 4(sp),a0
    7cee:	|  |   clr.b 118(a0)
			break;
    7cf2:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7cf6:	|  |   movea.l 4(sp),a0
    7cfa:	|  |   clr.b 116(a0)
    7cfe:	|  |   movea.l 4(sp),a0
    7d02:	|  |   move.b 116(a0),d0
    7d06:	|  |   movea.l 4(sp),a0
    7d0a:	|  |   move.b d0,115(a0)
    7d0e:	|  |   movea.l 4(sp),a0
    7d12:	|  |   move.b 115(a0),d0
    7d16:	|  |   movea.l 4(sp),a0
    7d1a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7d1e:	|  |   movea.l 4(sp),a0
    7d22:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7d28:	|  |   movea.l 4(sp),a0
    7d2c:	|  |   clr.b 118(a0)
			break;
    7d30:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7d34:	|  |   movea.l 4(sp),a0
    7d38:	|  |   clr.b 116(a0)
    7d3c:	|  |   movea.l 4(sp),a0
    7d40:	|  |   move.b 116(a0),d0
    7d44:	|  |   movea.l 4(sp),a0
    7d48:	|  |   move.b d0,115(a0)
    7d4c:	|  |   movea.l 4(sp),a0
    7d50:	|  |   move.b 115(a0),d0
    7d54:	|  |   movea.l 4(sp),a0
    7d58:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7d5c:	|  |   movea.l 4(sp),a0
    7d60:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7d64:	|  |   movea.l 4(sp),a0
    7d68:	|  |   clr.b 118(a0)
			break;
    7d6c:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7d70:	|  |   movea.l 4(sp),a0
    7d74:	|  |   clr.b 116(a0)
    7d78:	|  |   movea.l 4(sp),a0
    7d7c:	|  |   move.b 116(a0),d0
    7d80:	|  |   movea.l 4(sp),a0
    7d84:	|  |   move.b d0,115(a0)
    7d88:	|  |   movea.l 4(sp),a0
    7d8c:	|  |   move.b 115(a0),d0
    7d90:	|  |   movea.l 4(sp),a0
    7d94:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7d98:	|  |   movea.l 4(sp),a0
    7d9c:	|  |   st 117(a0)
			moveMe->transparency = 64;
    7da0:	|  |   movea.l 4(sp),a0
    7da4:	|  |   move.b #64,118(a0)
			break;
    7daa:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7dae:	|  |   movea.l 4(sp),a0
    7db2:	|  |   clr.b 116(a0)
    7db6:	|  |   movea.l 4(sp),a0
    7dba:	|  |   move.b 116(a0),d0
    7dbe:	|  |   movea.l 4(sp),a0
    7dc2:	|  |   move.b d0,115(a0)
    7dc6:	|  |   movea.l 4(sp),a0
    7dca:	|  |   move.b 115(a0),d0
    7dce:	|  |   movea.l 4(sp),a0
    7dd2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7dd6:	|  |   movea.l 4(sp),a0
    7dda:	|  |   st 117(a0)
			moveMe->transparency = 128;
    7dde:	|  |   movea.l 4(sp),a0
    7de2:	|  |   move.b #-128,118(a0)
			break;
    7de8:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7dec:	|  |   movea.l 4(sp),a0
    7df0:	|  |   clr.b 116(a0)
    7df4:	|  |   movea.l 4(sp),a0
    7df8:	|  |   move.b 116(a0),d0
    7dfc:	|  |   movea.l 4(sp),a0
    7e00:	|  |   move.b d0,115(a0)
    7e04:	|  |   movea.l 4(sp),a0
    7e08:	|  |   move.b 115(a0),d0
    7e0c:	|  |   movea.l 4(sp),a0
    7e10:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7e14:	|  |   movea.l 4(sp),a0
    7e18:	|  |   st 117(a0)
			moveMe->transparency = 192;
    7e1c:	|  |   movea.l 4(sp),a0
    7e20:	|  |   move.b #-64,118(a0)
			break;
    7e26:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7e2a:	|  |   movea.l 4(sp),a0
    7e2e:	|  |   move.b #-128,116(a0)
    7e34:	|  |   movea.l 4(sp),a0
    7e38:	|  |   move.b 116(a0),d0
    7e3c:	|  |   movea.l 4(sp),a0
    7e40:	|  |   move.b d0,115(a0)
    7e44:	|  |   movea.l 4(sp),a0
    7e48:	|  |   move.b 115(a0),d0
    7e4c:	|  |   movea.l 4(sp),a0
    7e50:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7e54:	|  |   movea.l 4(sp),a0
    7e58:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    7e5e:	|  |   movea.l 4(sp),a0
    7e62:	|  |   clr.b 118(a0)
			break;
    7e66:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7e6a:	|  |   movea.l 4(sp),a0
    7e6e:	|  |   move.b #-128,116(a0)
    7e74:	|  |   movea.l 4(sp),a0
    7e78:	|  |   move.b 116(a0),d0
    7e7c:	|  |   movea.l 4(sp),a0
    7e80:	|  |   move.b d0,115(a0)
    7e84:	|  |   movea.l 4(sp),a0
    7e88:	|  |   move.b 115(a0),d0
    7e8c:	|  |   movea.l 4(sp),a0
    7e90:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7e94:	|  |   movea.l 4(sp),a0
    7e98:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    7e9e:	|  |   movea.l 4(sp),a0
    7ea2:	|  |   clr.b 118(a0)
			break;
    7ea6:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7eaa:	|  |   movea.l 4(sp),a0
    7eae:	|  |   move.b #-128,116(a0)
    7eb4:	|  |   movea.l 4(sp),a0
    7eb8:	|  |   move.b 116(a0),d0
    7ebc:	|  |   movea.l 4(sp),a0
    7ec0:	|  |   move.b d0,115(a0)
    7ec4:	|  |   movea.l 4(sp),a0
    7ec8:	|  |   move.b 115(a0),d0
    7ecc:	|  |   movea.l 4(sp),a0
    7ed0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7ed4:	|  |   movea.l 4(sp),a0
    7ed8:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7ede:	|  |   movea.l 4(sp),a0
    7ee2:	|  |   clr.b 118(a0)
			break;
    7ee6:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7eea:	|  |   movea.l 4(sp),a0
    7eee:	|  |   move.b #-128,116(a0)
    7ef4:	|  |   movea.l 4(sp),a0
    7ef8:	|  |   move.b 116(a0),d0
    7efc:	|  |   movea.l 4(sp),a0
    7f00:	|  |   move.b d0,115(a0)
    7f04:	|  |   movea.l 4(sp),a0
    7f08:	|  |   move.b 115(a0),d0
    7f0c:	|  |   movea.l 4(sp),a0
    7f10:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7f14:	|  |   movea.l 4(sp),a0
    7f18:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7f1c:	|  |   movea.l 4(sp),a0
    7f20:	|  |   clr.b 118(a0)
			break;
    7f24:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7f28:	|  |   movea.l 4(sp),a0
    7f2c:	|  |   st 116(a0)
    7f30:	|  |   movea.l 4(sp),a0
    7f34:	|  |   move.b 116(a0),d0
    7f38:	|  |   movea.l 4(sp),a0
    7f3c:	|  |   move.b d0,115(a0)
    7f40:	|  |   movea.l 4(sp),a0
    7f44:	|  |   move.b 115(a0),d0
    7f48:	|  |   movea.l 4(sp),a0
    7f4c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7f50:	|  |   movea.l 4(sp),a0
    7f54:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    7f5a:	|  |   movea.l 4(sp),a0
    7f5e:	|  |   clr.b 118(a0)
			break;
    7f62:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7f66:	|  |   movea.l 4(sp),a0
    7f6a:	|  |   st 116(a0)
    7f6e:	|  |   movea.l 4(sp),a0
    7f72:	|  |   move.b 116(a0),d0
    7f76:	|  |   movea.l 4(sp),a0
    7f7a:	|  |   move.b d0,115(a0)
    7f7e:	|  |   movea.l 4(sp),a0
    7f82:	|  |   move.b 115(a0),d0
    7f86:	|  |   movea.l 4(sp),a0
    7f8a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7f8e:	|  |   movea.l 4(sp),a0
    7f92:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    7f98:	|  |   movea.l 4(sp),a0
    7f9c:	|  |   clr.b 118(a0)
			break;
    7fa0:	|  +-- bra.w 8054 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7fa4:	|  |   movea.l 4(sp),a0
    7fa8:	|  |   st 116(a0)
    7fac:	|  |   movea.l 4(sp),a0
    7fb0:	|  |   move.b 116(a0),d0
    7fb4:	|  |   movea.l 4(sp),a0
    7fb8:	|  |   move.b d0,115(a0)
    7fbc:	|  |   movea.l 4(sp),a0
    7fc0:	|  |   move.b 115(a0),d0
    7fc4:	|  |   movea.l 4(sp),a0
    7fc8:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7fcc:	|  |   movea.l 4(sp),a0
    7fd0:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7fd6:	|  |   movea.l 4(sp),a0
    7fda:	|  |   clr.b 118(a0)
			break;
    7fde:	|  +-- bra.s 8054 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7fe0:	|  |   movea.l 4(sp),a0
    7fe4:	|  |   st 116(a0)
    7fe8:	|  |   movea.l 4(sp),a0
    7fec:	|  |   move.b 116(a0),d0
    7ff0:	|  |   movea.l 4(sp),a0
    7ff4:	|  |   move.b d0,115(a0)
    7ff8:	|  |   movea.l 4(sp),a0
    7ffc:	|  |   move.b 115(a0),d0
    8000:	|  |   movea.l 4(sp),a0
    8004:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    8008:	|  |   movea.l 4(sp),a0
    800c:	|  |   st 117(a0)
			moveMe->transparency = 0;
    8010:	|  |   movea.l 4(sp),a0
    8014:	|  |   clr.b 118(a0)
			break;
    8018:	|  +-- bra.s 8054 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    801a:	\--|-> movea.l 4(sp),a0
    801e:	   |   clr.b 116(a0)
    8022:	   |   movea.l 4(sp),a0
    8026:	   |   move.b 116(a0),d0
    802a:	   |   movea.l 4(sp),a0
    802e:	   |   move.b d0,115(a0)
    8032:	   |   movea.l 4(sp),a0
    8036:	   |   move.b 115(a0),d0
    803a:	   |   movea.l 4(sp),a0
    803e:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    8042:	   |   movea.l 4(sp),a0
    8046:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    804a:	   |   movea.l 4(sp),a0
    804e:	   |   clr.b 118(a0)
			break;
    8052:	   |   nop
	}
}
    8054:	   \-> nop
    8056:	       rts

00008058 <setCharacterWalkSpeed>:



BOOL setCharacterWalkSpeed (int f, int objNum) {
    8058:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    805a:	       tst.l 8(sp)
    805e:	   /-- bgt.s 8064 <setCharacterWalkSpeed+0xc>
    8060:	   |   clr.w d0
    8062:	/--|-- bra.s 8082 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    8064:	|  \-> move.l 12(sp),-(sp)
    8068:	|      jsr 6be4 <findPerson>
    806e:	|      addq.l #4,sp
    8070:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    8072:	|  /-- bne.s 8078 <setCharacterWalkSpeed+0x20>
    8074:	|  |   clr.w d0
    8076:	+--|-- bra.s 8082 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    8078:	|  \-> movea.l (sp),a0
    807a:	|      move.l 8(sp),16(a0)
	return TRUE;
    8080:	|      moveq #1,d0
}
    8082:	\----> addq.l #4,sp
    8084:	       rts

00008086 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    8086:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    8088:	       move.l 8(sp),-(sp)
    808c:	       jsr 6be4 <findPerson>
    8092:	       addq.l #4,sp
    8094:	       move.l d0,(sp)
    if (thisPerson) {
    8096:	/----- beq.s 80b6 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    8098:	|      movea.l (sp),a0
    809a:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    80a0:	|      moveq #2,d0
    80a2:	|      and.l 12(sp),d0
    80a6:	|  /-- beq.s 80b2 <setPersonExtra+0x2c>
    80a8:	|  |   movea.l (sp),a0
    80aa:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    80b2:	|  \-> moveq #1,d0
    80b4:	|  /-- bra.s 80b8 <setPersonExtra+0x32>
    }
    return FALSE;
    80b6:	\--|-> clr.w d0
}
    80b8:	   \-> addq.l #4,sp
    80ba:	       rts

000080bc <setScale>:


void setScale (short int h, short int d) {
    80bc:	subq.l #4,sp
    80be:	move.l 8(sp),d1
    80c2:	move.l 12(sp),d0
    80c6:	move.w d1,d1
    80c8:	move.w d1,2(sp)
    80cc:	move.w d0,d0
    80ce:	move.w d0,(sp)
	scaleHorizon = h;
    80d0:	move.w 2(sp),1813e <scaleHorizon>
	scaleDivide = d;
    80d8:	move.w (sp),18140 <scaleDivide>
}
    80de:	nop
    80e0:	addq.l #4,sp
    80e2:	rts

000080e4 <setShown>:

void setShown (BOOL h, int ob) {
    80e4:	    subq.l #8,sp
    80e6:	    move.l 12(sp),d0
    80ea:	    move.w d0,d0
    80ec:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    80f0:	    move.l 16(sp),-(sp)
    80f4:	    jsr 6be4 <findPerson>
    80fa:	    addq.l #4,sp
    80fc:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    8100:	/-- beq.s 810c <setShown+0x28>
    8102:	|   movea.l 4(sp),a0
    8106:	|   move.w 2(sp),92(a0)
}
    810c:	\-> nop
    810e:	    addq.l #8,sp
    8110:	    rts

00008112 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    8112:	       subq.l #8,sp
    8114:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    8116:	       movea.l 16(sp),a0
    811a:	       move.l 80(a0),d0
    811e:	       move.l d0,d1
    8120:	       addi.l #360,d1
    8126:	       movea.l 16(sp),a0
    812a:	       move.l 84(a0),d0
    812e:	       move.l d1,d2
    8130:	       sub.l d0,d2
    8132:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    8136:	       movea.l 16(sp),a0
    813a:	       move.l 110(a0),d0
    813e:	   /-- beq.s 814a <spinStep+0x38>
    8140:	   |   movea.l 16(sp),a0
    8144:	   |   move.l 110(a0),d0
    8148:	/--|-- bra.s 8164 <spinStep+0x52>
    814a:	|  \-> movea.l 16(sp),a0
    814e:	|      movea.l 68(a0),a0
    8152:	|      move.l 4(a0),d0
    8156:	|      move.l d0,-(sp)
    8158:	|      pea 168 <decodeFilename+0x50>
    815c:	|      jsr 13434 <__divsi3>
    8162:	|      addq.l #8,sp
    8164:	\----> move.l d0,4(sp)
	while (diff > 180) {
    8168:	   /-- bra.s 8172 <spinStep+0x60>
		diff -= 360;
    816a:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    8172:	|  \-> cmpi.l #180,8(sp)
    817a:	\----- bgt.s 816a <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    817c:	       move.l 8(sp),d0
    8180:	       cmp.l 4(sp),d0
    8184:	   /-- blt.s 81a2 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    8186:	   |   movea.l 16(sp),a0
    818a:	   |   move.l 80(a0),d0
    818e:	   |   sub.l 4(sp),d0
    8192:	   |   move.l d0,-(sp)
    8194:	   |   move.l 20(sp),-(sp)
    8198:	   |   jsr 8282 <turnMeAngle>
    819e:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    81a0:	/--|-- bra.s 81e8 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    81a2:	|  \-> move.l 4(sp),d0
    81a6:	|      neg.l d0
    81a8:	|      cmp.l 8(sp),d0
    81ac:	|  /-- blt.s 81ca <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    81ae:	|  |   movea.l 16(sp),a0
    81b2:	|  |   move.l 80(a0),d0
    81b6:	|  |   add.l 4(sp),d0
    81ba:	|  |   move.l d0,-(sp)
    81bc:	|  |   move.l 20(sp),-(sp)
    81c0:	|  |   jsr 8282 <turnMeAngle>
    81c6:	|  |   addq.l #8,sp
}
    81c8:	+--|-- bra.s 81e8 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    81ca:	|  \-> movea.l 16(sp),a0
    81ce:	|      move.l 84(a0),d0
    81d2:	|      move.l d0,-(sp)
    81d4:	|      move.l 20(sp),-(sp)
    81d8:	|      jsr 8282 <turnMeAngle>
    81de:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    81e0:	|      movea.l 16(sp),a0
    81e4:	|      clr.w 54(a0)
}
    81e8:	\----> nop
    81ea:	       move.l (sp)+,d2
    81ec:	       addq.l #8,sp
    81ee:	       rts

000081f0 <stopPerson>:


BOOL stopPerson (int o) {
    81f0:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    81f2:	       move.l 8(sp),-(sp)
    81f6:	       jsr 6be4 <findPerson>
    81fc:	       addq.l #4,sp
    81fe:	       move.l d0,(sp)
    if (moveMe)
    8200:	/----- beq.s 823e <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    8202:	|      movea.l (sp),a0
    8204:	|      move.l 56(a0),d0
    8208:	+----- beq.s 823e <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    820a:	|      movea.l (sp),a0
    820c:	|      move.l 56(a0),d0
    8210:	|      move.l d0,-(sp)
    8212:	|      jsr 20e0 <abortFunction>
    8218:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    821a:	|      movea.l (sp),a0
    821c:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    8220:	|      movea.l (sp),a0
    8222:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    8226:	|      movea.l (sp),a0
    8228:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    822c:	|      clr.l -(sp)
    822e:	|      move.l 4(sp),-(sp)
    8232:	|      jsr 5832 <setFrames>
    8238:	|      addq.l #8,sp
            return TRUE;
    823a:	|      moveq #1,d0
    823c:	|  /-- bra.s 8240 <stopPerson+0x50>
        }
    return FALSE;
    823e:	\--|-> clr.w d0
}
    8240:	   \-> addq.l #4,sp
    8242:	       rts

00008244 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    8244:	       subq.l #8,sp
	int total = 0;
    8246:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    824a:	       clr.l (sp)
    824c:	   /-- bra.s 826e <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    824e:	/--|-> movea.l 12(sp),a0
    8252:	|  |   movea.l 4(a0),a0
    8256:	|  |   move.l (sp),d1
    8258:	|  |   move.l d1,d0
    825a:	|  |   add.l d0,d0
    825c:	|  |   add.l d1,d0
    825e:	|  |   add.l d0,d0
    8260:	|  |   add.l d0,d0
    8262:	|  |   adda.l d0,a0
    8264:	|  |   move.l 4(a0),d0
    8268:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    826c:	|  |   addq.l #1,(sp)
    826e:	|  \-> movea.l 12(sp),a0
    8272:	|      move.l 8(a0),d0
    8276:	|      cmp.l (sp),d0
    8278:	\----- bgt.s 824e <timeForAnim+0xa>
	}
	return total;
    827a:	       move.l 4(sp),d0
}
    827e:	       addq.l #8,sp
    8280:	       rts

00008282 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    8282:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    8284:	       movea.l 8(sp),a0
    8288:	       movea.l 68(a0),a0
    828c:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    8290:	       movea.l 8(sp),a0
    8294:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    829a:	       move.l (sp),-(sp)
    829c:	       pea b4 <_start+0xb4>
    82a0:	       jsr 13434 <__divsi3>
    82a6:	       addq.l #8,sp
    82a8:	       move.l d0,d1
    82aa:	       addi.l #180,d1
    82b0:	       movea.l 8(sp),a0
    82b4:	       move.l 88(a0),d0
    82b8:	       add.l d1,d0
    82ba:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    82be:	   /-- bra.s 82c8 <turnMeAngle+0x46>
    82c0:	/--|-> addi.l #-360,12(sp)
    82c8:	|  \-> cmpi.l #359,12(sp)
    82d0:	\----- bgt.s 82c0 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    82d2:	       move.l (sp),-(sp)
    82d4:	       move.l 16(sp),-(sp)
    82d8:	       jsr 133b6 <__mulsi3>
    82de:	       addq.l #8,sp
    82e0:	       pea 168 <decodeFilename+0x50>
    82e4:	       move.l d0,-(sp)
    82e6:	       jsr 13434 <__divsi3>
    82ec:	       addq.l #8,sp
    82ee:	       movea.l 8(sp),a0
    82f2:	       move.l d0,94(a0)
}
    82f6:	       nop
    82f8:	       addq.l #4,sp
    82fa:	       rts

000082fc <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    82fc:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    82fe:	          move.l 8(sp),-(sp)
    8302:	          jsr 6be4 <findPerson>
    8308:	          addq.l #4,sp
    830a:	          move.l d0,(sp)
    if (thisPerson) {
    830c:	/-------- beq.s 836c <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    830e:	|         movea.l (sp),a0
    8310:	|         move.l 56(a0),d0
    8314:	|     /-- beq.s 8326 <turnPersonToFace+0x2a>
    8316:	|     |   movea.l (sp),a0
    8318:	|     |   move.l 56(a0),d0
    831c:	|     |   move.l d0,-(sp)
    831e:	|     |   jsr 20e0 <abortFunction>
    8324:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    8326:	|     \-> movea.l (sp),a0
    8328:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    832c:	|         movea.l (sp),a0
    832e:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    8332:	|         movea.l (sp),a0
    8334:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    8338:	|         move.l 12(sp),-(sp)
    833c:	|         move.l 4(sp),-(sp)
    8340:	|         jsr 8282 <turnMeAngle>
    8346:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    8348:	|         movea.l 19ca8 <speech>,a0
    834e:	|         move.l (a0),d0
    8350:	|         cmp.l (sp),d0
    8352:	|  /----- bne.s 8358 <turnPersonToFace+0x5c>
    8354:	|  |      moveq #2,d0
    8356:	|  |  /-- bra.s 835a <turnPersonToFace+0x5e>
    8358:	|  \--|-> moveq #0,d0
    835a:	|     \-> move.l d0,-(sp)
    835c:	|         move.l 4(sp),-(sp)
    8360:	|         jsr 5832 <setFrames>
    8366:	|         addq.l #8,sp
        return TRUE;
    8368:	|         moveq #1,d0
    836a:	|     /-- bra.s 836e <turnPersonToFace+0x72>
    }
    return FALSE;
    836c:	\-----|-> clr.w d0
}
    836e:	      \-> addq.l #4,sp
    8370:	          rts

00008372 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    8372:	                lea -20(sp),sp
    8376:	                move.l d3,-(sp)
    8378:	                move.l d2,-(sp)
    837a:	                move.l 36(sp),d0
    837e:	                move.w d0,d0
    8380:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    8384:	                cmpi.w #-1,10(sp)
    838a:	/-------------- bne.s 8392 <walkMe+0x20>
    838c:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    8392:	>-------------> movea.l 32(sp),a0
    8396:	|               move.l 36(a0),d0
    839a:	|               move.l d0,-(sp)
    839c:	|               jsr 12e5c <__floatsisf>
    83a2:	|               addq.l #4,sp
    83a4:	|               move.l d0,d1
    83a6:	|               movea.l 32(sp),a0
    83aa:	|               move.l (a0),d0
    83ac:	|               move.l d0,-(sp)
    83ae:	|               move.l d1,-(sp)
    83b0:	|               jsr 13150 <__subsf3>
    83b6:	|               addq.l #8,sp
    83b8:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    83bc:	|               movea.l 32(sp),a0
    83c0:	|               move.l 40(a0),d0
    83c4:	|               move.l d0,-(sp)
    83c6:	|               jsr 12e5c <__floatsisf>
    83cc:	|               addq.l #4,sp
    83ce:	|               move.l d0,d1
    83d0:	|               movea.l 32(sp),a0
    83d4:	|               move.l 4(a0),d0
    83d8:	|               move.l d0,-(sp)
    83da:	|               move.l d1,-(sp)
    83dc:	|               jsr 13150 <__subsf3>
    83e2:	|               addq.l #8,sp
    83e4:	|               move.l d0,-(sp)
    83e6:	|               move.l d0,-(sp)
    83e8:	|               jsr 12c0e <__addsf3>
    83ee:	|               addq.l #8,sp
    83f0:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    83f4:	|               movea.l 32(sp),a0
    83f8:	|               move.l 20(a0),d2
    83fc:	|               movea.l 32(sp),a0
    8400:	|               move.l 16(a0),d0
    8404:	|               move.l d0,-(sp)
    8406:	|               jsr 12e5c <__floatsisf>
    840c:	|               addq.l #4,sp
    840e:	|               move.l d0,-(sp)
    8410:	|               move.l d2,-(sp)
    8412:	|               jsr 12f0e <__mulsf3>
    8418:	|               addq.l #8,sp
    841a:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    841e:	|               move.l 24(sp),-(sp)
    8422:	|               jsr 12d74 <__extendsfdf2>
    8428:	|               addq.l #4,sp
    842a:	|               move.l #-1717986918,-(sp)
    8430:	|               move.l #1070176665,-(sp)
    8436:	|               move.l d1,-(sp)
    8438:	|               move.l d0,-(sp)
    843a:	|               jsr 13034 <__ltdf2>
    8440:	|               lea 16(sp),sp
    8444:	|               tst.l d0
    8446:	|           /-- bge.s 8450 <walkMe+0xde>
    8448:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    8450:	|           \-> move.l 20(sp),-(sp)
    8454:	|               jsr 12df4 <__fixsfsi>
    845a:	|               addq.l #4,sp
    845c:	|               move.l d0,-(sp)
    845e:	|               jsr 5e00 <TF_abs>
    8464:	|               addq.l #4,sp
    8466:	|               move.l d0,d2
    8468:	|               move.l 16(sp),-(sp)
    846c:	|               jsr 12df4 <__fixsfsi>
    8472:	|               addq.l #4,sp
    8474:	|               move.l d0,-(sp)
    8476:	|               jsr 5e00 <TF_abs>
    847c:	|               addq.l #4,sp
    847e:	|               cmp.l d2,d0
    8480:	|        /----- bgt.s 84a4 <walkMe+0x132>
    8482:	|        |      move.l 20(sp),-(sp)
    8486:	|        |      jsr 12df4 <__fixsfsi>
    848c:	|        |      addq.l #4,sp
    848e:	|        |      move.l d0,-(sp)
    8490:	|        |      jsr 5e00 <TF_abs>
    8496:	|        |      addq.l #4,sp
    8498:	|        |      move.l d0,-(sp)
    849a:	|        |      jsr 12e5c <__floatsisf>
    84a0:	|        |      addq.l #4,sp
    84a2:	|        |  /-- bra.s 84c4 <walkMe+0x152>
    84a4:	|        \--|-> move.l 16(sp),-(sp)
    84a8:	|           |   jsr 12df4 <__fixsfsi>
    84ae:	|           |   addq.l #4,sp
    84b0:	|           |   move.l d0,-(sp)
    84b2:	|           |   jsr 5e00 <TF_abs>
    84b8:	|           |   addq.l #4,sp
    84ba:	|           |   move.l d0,-(sp)
    84bc:	|           |   jsr 12e5c <__floatsisf>
    84c2:	|           |   addq.l #4,sp
    84c4:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    84c8:	|               move.l 12(sp),-(sp)
    84cc:	|               jsr 12df4 <__fixsfsi>
    84d2:	|               addq.l #4,sp
    84d4:	|               move.l d0,-(sp)
    84d6:	|               jsr 5e00 <TF_abs>
    84dc:	|               addq.l #4,sp
    84de:	|               move.l d0,-(sp)
    84e0:	|               jsr 12e5c <__floatsisf>
    84e6:	|               addq.l #4,sp
    84e8:	|               move.l d0,-(sp)
    84ea:	|               move.l 28(sp),-(sp)
    84ee:	|               jsr 13082 <__ltsf2>
    84f4:	|               addq.l #8,sp
    84f6:	|               tst.l d0
    84f8:	|        /----- bge.w 85aa <walkMe+0x238>
			if (thisPerson->spinning) {
    84fc:	|        |      movea.l 32(sp),a0
    8500:	|        |      move.w 54(a0),d0
    8504:	|        |  /-- beq.s 8522 <walkMe+0x1b0>
				spinStep(thisPerson);
    8506:	|        |  |   move.l 32(sp),-(sp)
    850a:	|        |  |   jsr 8112 <spinStep>
    8510:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    8512:	|        |  |   pea 1 <_start+0x1>
    8516:	|        |  |   move.l 36(sp),-(sp)
    851a:	|        |  |   jsr 5832 <setFrames>
    8520:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    8522:	|        |  \-> move.l 24(sp),-(sp)
    8526:	|        |      move.l 16(sp),-(sp)
    852a:	|        |      jsr 12d08 <__divsf3>
    8530:	|        |      addq.l #8,sp
    8532:	|        |      move.l d0,24(sp)
			if (move)
    8536:	|        |      tst.w 10(sp)
    853a:	|        |  /-- beq.s 85a4 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    853c:	|        |  |   movea.l 32(sp),a0
    8540:	|        |  |   move.l 4(a0),d2
    8544:	|        |  |   move.l 24(sp),d0
    8548:	|        |  |   move.l d0,-(sp)
    854a:	|        |  |   move.l d0,-(sp)
    854c:	|        |  |   jsr 12c0e <__addsf3>
    8552:	|        |  |   addq.l #8,sp
    8554:	|        |  |   move.l d0,-(sp)
    8556:	|        |  |   move.l 20(sp),-(sp)
    855a:	|        |  |   jsr 12d08 <__divsf3>
    8560:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    8562:	|        |  |   move.l d0,-(sp)
    8564:	|        |  |   move.l d2,-(sp)
    8566:	|        |  |   jsr 12c0e <__addsf3>
    856c:	|        |  |   addq.l #8,sp
    856e:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    8570:	|        |  |   movea.l 32(sp),a0
    8574:	|        |  |   move.l (a0),d3
    8576:	|        |  |   move.l 24(sp),-(sp)
    857a:	|        |  |   move.l 24(sp),-(sp)
    857e:	|        |  |   jsr 12d08 <__divsf3>
    8584:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    8586:	|        |  |   move.l d0,-(sp)
    8588:	|        |  |   move.l d3,-(sp)
    858a:	|        |  |   jsr 12c0e <__addsf3>
    8590:	|        |  |   addq.l #8,sp
    8592:	|        |  |   move.l d2,-(sp)
    8594:	|        |  |   move.l d0,-(sp)
    8596:	|        |  |   move.l 40(sp),-(sp)
    859a:	|        |  |   jsr 732c <moveAndScale>
    85a0:	|        |  |   lea 12(sp),sp
			return TRUE;
    85a4:	|        |  \-> moveq #1,d0
    85a6:	|  /-----|----- bra.w 8658 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    85aa:	|  |     \----> movea.l 32(sp),a0
    85ae:	|  |            move.l 44(a0),d0
    85b2:	|  |            moveq #-1,d1
    85b4:	|  |            cmp.l d0,d1
    85b6:	|  |        /-- bne.s 85ee <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    85b8:	|  |        |   movea.l 32(sp),a0
    85bc:	|  |        |   move.l 98(a0),d0
    85c0:	|  |        |   moveq #-1,d1
    85c2:	|  |        |   cmp.l d0,d1
    85c4:	|  |  /-----|-- beq.s 8602 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    85c6:	|  |  |     |   movea.l 32(sp),a0
    85ca:	|  |  |     |   move.l 98(a0),d0
    85ce:	|  |  |     |   movea.l 32(sp),a0
    85d2:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    85d6:	|  |  |     |   movea.l 32(sp),a0
    85da:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    85e0:	|  |  |     |   move.l 32(sp),-(sp)
    85e4:	|  |  |     |   jsr 8112 <spinStep>
    85ea:	|  |  |     |   addq.l #4,sp
			}
			break;
    85ec:	|  |  +-----|-- bra.s 8602 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    85ee:	|  |  |     \-> move.l 32(sp),-(sp)
    85f2:	|  |  |         jsr 652a <doBorderStuff>
    85f8:	|  |  |         addq.l #4,sp
    85fa:	|  |  |         tst.w d0
    85fc:	|  |  |  /----- beq.s 8606 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    85fe:	\--|--|--|----- bra.w 8392 <walkMe+0x20>
			break;
    8602:	   |  \--|----> nop
    8604:	   |     |  /-- bra.s 8608 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    8606:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    8608:	   |        \-> movea.l 32(sp),a0
    860c:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    8610:	   |            clr.l -(sp)
    8612:	   |            move.l 36(sp),-(sp)
    8616:	   |            jsr 5832 <setFrames>
    861c:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    861e:	   |            movea.l 32(sp),a0
    8622:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    8626:	   |            move.l d0,-(sp)
    8628:	   |            jsr 12e5c <__floatsisf>
    862e:	   |            addq.l #4,sp
    8630:	   |            move.l d0,d2
				 thisPerson->walkToX,
    8632:	   |            movea.l 32(sp),a0
    8636:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    863a:	   |            move.l d0,-(sp)
    863c:	   |            jsr 12e5c <__floatsisf>
    8642:	   |            addq.l #4,sp
    8644:	   |            move.l d2,-(sp)
    8646:	   |            move.l d0,-(sp)
    8648:	   |            move.l 40(sp),-(sp)
    864c:	   |            jsr 732c <moveAndScale>
    8652:	   |            lea 12(sp),sp
	return FALSE;
    8656:	   |            clr.w d0
}
    8658:	   \----------> move.l (sp)+,d2
    865a:	                move.l (sp)+,d3
    865c:	                lea 20(sp),sp
    8660:	                rts

00008662 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    8662:	             lea -20(sp),sp
    8666:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    8668:	             move.l 19cd4 <allLoadedBanks>,20(sp)
	while (returnMe) {
    8670:	      /----- bra.s 8690 <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    8672:	   /--|----> movea.l 20(sp),a0
    8676:	   |  |      move.l (a0),d0
    8678:	   |  |      cmp.l 28(sp),d0
    867c:	   |  |  /-- bne.s 8686 <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    867e:	   |  |  |   move.l 20(sp),d0
    8682:	/--|--|--|-- bra.w 8742 <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    8686:	|  |  |  \-> movea.l 20(sp),a0
    868a:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    8690:	|  |  \----> tst.l 20(sp)
    8694:	|  \-------- bne.s 8672 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    8696:	|            moveq #26,d0
    8698:	|            move.l d0,16(sp)
    869c:	|            clr.l 12(sp)
    86a0:	|            move.l 19c4c <SysBase>,d0
    86a6:	|            movea.l d0,a6
    86a8:	|            move.l 16(sp),d0
    86ac:	|            move.l 12(sp),d1
    86b0:	|            jsr -684(a6)
    86b4:	|            move.l d0,8(sp)
    86b8:	|            move.l 8(sp),d0
    86bc:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    86c0:	|     /----- beq.s 8740 <loadBankForAnim+0xde>
		returnMe->ID = ID;
    86c2:	|     |      movea.l 20(sp),a0
    86c6:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    86ca:	|     |      move.l 20(sp),d0
    86ce:	|     |      addq.l #8,d0
    86d0:	|     |      clr.l -(sp)
    86d2:	|     |      move.l d0,-(sp)
    86d4:	|     |      move.l 36(sp),-(sp)
    86d8:	|     |      jsr 5de0 <loadSpriteBank>
    86de:	|     |      lea 12(sp),sp
    86e2:	|     |      tst.w d0
    86e4:	|     |  /-- beq.s 8718 <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    86e6:	|     |  |   movea.l 20(sp),a0
    86ea:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    86ee:	|     |  |   move.l 19cd4 <allLoadedBanks>,d0
    86f4:	|     |  |   movea.l 20(sp),a0
    86f8:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    86fc:	|     |  |   move.l 20(sp),19cd4 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    8704:	|     |  |   pea 15b70 <main_sludge.c.2f5c5368+0x96>
    870a:	|     |  |   jsr 12a04 <KPrintF>
    8710:	|     |  |   addq.l #4,sp
			return returnMe;
    8712:	|     |  |   move.l 20(sp),d0
    8716:	+-----|--|-- bra.s 8742 <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    8718:	|     |  \-> pea 15b9d <main_sludge.c.2f5c5368+0xc3>
    871e:	|     |      jsr 12a04 <KPrintF>
    8724:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    8726:	|     |      move.l 20(sp),4(sp)
    872c:	|     |      move.l 19c4c <SysBase>,d0
    8732:	|     |      movea.l d0,a6
    8734:	|     |      movea.l 4(sp),a1
    8738:	|     |      jsr -690(a6)
			return NULL;
    873c:	|     |      moveq #0,d0
    873e:	+-----|----- bra.s 8742 <loadBankForAnim+0xe0>
		}
	} else return NULL;
    8740:	|     \----> moveq #0,d0
}
    8742:	\----------> movea.l (sp)+,a6
    8744:	             lea 20(sp),sp
    8748:	             rts

0000874a <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    874a:	       subq.l #8,sp
    874c:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    874e:	   /-- bra.s 877e <clearStackLib+0x34>
		k = stackLib;
    8750:	/--|-> move.l 19cdc <stackLib>,8(sp)
		stackLib = stackLib -> next;
    8758:	|  |   movea.l 19cdc <stackLib>,a0
    875e:	|  |   move.l 4(a0),d0
    8762:	|  |   move.l d0,19cdc <stackLib>
		FreeVec(k);
    8768:	|  |   move.l 8(sp),4(sp)
    876e:	|  |   move.l 19c4c <SysBase>,d0
    8774:	|  |   movea.l d0,a6
    8776:	|  |   movea.l 4(sp),a1
    877a:	|  |   jsr -690(a6)
	while (stackLib) {
    877e:	|  \-> move.l 19cdc <stackLib>,d0
    8784:	\----- bne.s 8750 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    8786:	       clr.l 19cd8 <stackLibTotal>
}
    878c:	       nop
    878e:	       movea.l (sp)+,a6
    8790:	       addq.l #8,sp
    8792:	       rts

00008794 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    8794:	          lea -128(sp),sp
    8798:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    879c:	      /-- bra.s 87ae <loadGame+0x1a>
    879e:	   /--|-> move.l 19be8 <allRunningFunctions>,d0
    87a4:	   |  |   move.l d0,-(sp)
    87a6:	   |  |   jsr 30fa <finishFunction>
    87ac:	   |  |   addq.l #4,sp
    87ae:	   |  \-> move.l 19be8 <allRunningFunctions>,d0
    87b4:	   \----- bne.s 879e <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    87b6:	          pea 19ce0 <ssgVersion>
    87bc:	          pea 15bfb <main_sludge.c.2f5c5368+0x121>
    87c2:	          pea 41 <_start+0x41>
    87c6:	          pea 53 <_start+0x53>
    87ca:	          move.l 160(sp),-(sp)
    87ce:	          jsr 3c1a <openAndVerify>
    87d4:	          lea 20(sp),sp
    87d8:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    87dc:	      /-- bne.s 87e4 <loadGame+0x50>
    87de:	      |   clr.w d0
    87e0:	/-----|-- bra.w 8a8a <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    87e4:	|     \-> move.l 112(sp),108(sp)
    87ea:	|         lea 140(sp),a0
    87ee:	|         lea -126(a0),a0
    87f2:	|         move.l a0,120(sp)
    87f6:	|         moveq #8,d0
    87f8:	|         move.l d0,116(sp)
    87fc:	|         move.l 19c54 <DOSBase>,d0
    8802:	|         movea.l d0,a6
    8804:	|         move.l 108(sp),d1
    8808:	|         move.l 120(sp),d2
    880c:	|         move.l 116(sp),d3
    8810:	|         jsr -42(a6)
    8814:	|         move.l d0,132(sp)
    8818:	|         move.l 132(sp),d0
    881c:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    8820:	|         moveq #8,d0
    8822:	|         cmp.l 128(sp),d0
    8826:	|     /-- beq.s 8836 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    8828:	|     |   pea 15c1c <main_sludge.c.2f5c5368+0x142>
    882e:	|     |   jsr 12a04 <KPrintF>
    8834:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    8836:	|     \-> move.l 14(sp),d1
    883a:	|         move.l 19bf2 <fileTime>,d0
    8840:	|         cmp.l d1,d0
    8842:	|     /-- bne.s 8852 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    8844:	|     |   move.l 18(sp),d1
    8848:	|     |   move.l 19bf6 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    884e:	|     |   cmp.l d1,d0
    8850:	|  /--|-- beq.s 8872 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    8852:	|  |  \-> move.l 144(sp),-(sp)
    8856:	|  |      pea 15c38 <main_sludge.c.2f5c5368+0x15e>
    885c:	|  |      pea 15cff <main_sludge.c.2f5c5368+0x225>
    8862:	|  |      jsr 12a04 <KPrintF>
    8868:	|  |      lea 12(sp),sp
		return FALSE; 
    886c:	|  |      clr.w d0
    886e:	+--|----- bra.w 8a8a <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    8872:	|  \----> move.l 112(sp),124(sp)
    8878:	|         move.l 19c54 <DOSBase>,d0
    887e:	|         movea.l d0,a6
    8880:	|         move.l 124(sp),d1
    8884:	|         jsr -306(a6)
    8888:	|         move.l d0,136(sp)
    888c:	|         move.l 136(sp),d0
    8890:	|         move.l d0,d0
    8892:	|         move.w d0,18000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    8898:	|         move.l 112(sp),100(sp)
    889e:	|         move.l 19c54 <DOSBase>,d0
    88a4:	|         movea.l d0,a6
    88a6:	|         move.l 100(sp),d1
    88aa:	|         jsr -306(a6)
    88ae:	|         move.l d0,96(sp)
    88b2:	|         move.l 96(sp),d0
    88b6:	|         move.l d0,d0
    88b8:	|         move.w d0,19bf0 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    88be:	|         move.l 112(sp),92(sp)
    88c4:	|         move.l 19c54 <DOSBase>,d0
    88ca:	|         movea.l d0,a6
    88cc:	|         move.l 92(sp),d1
    88d0:	|         jsr -306(a6)
    88d4:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    88d8:	|         move.l 112(sp),84(sp)
    88de:	|         move.l 19c54 <DOSBase>,d0
    88e4:	|         movea.l d0,a6
    88e6:	|         move.l 84(sp),d1
    88ea:	|         jsr -306(a6)
    88ee:	|         move.l d0,80(sp)
    88f2:	|         move.l 80(sp),d0
    88f6:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    88fa:	|     /-- beq.s 892e <loadGame+0x19a>
		fontNum = get2bytes (fp);
    88fc:	|     |   move.l 112(sp),-(sp)
    8900:	|     |   jsr 6bc <get2bytes>
    8906:	|     |   addq.l #4,sp
    8908:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    890c:	|     |   move.l 112(sp),-(sp)
    8910:	|     |   jsr 6bc <get2bytes>
    8916:	|     |   addq.l #4,sp
    8918:	|     |   move.l d0,19d3c <fontHeight>
		charOrder = readString(fp);		
    891e:	|     |   move.l 112(sp),-(sp)
    8922:	|     |   jsr b02 <readString>
    8928:	|     |   addq.l #4,sp
    892a:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    892e:	|     \-> move.l 104(sp),70(sp)
    8934:	|         move.l 19c4c <SysBase>,d0
    893a:	|         movea.l d0,a6
    893c:	|         movea.l 70(sp),a1
    8940:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    8944:	|         move.l 112(sp),-(sp)
    8948:	|         jsr 854 <getSigned>
    894e:	|         addq.l #4,sp
    8950:	|         move.w d0,186b0 <fontSpace>

	killAllPeople ();
    8956:	|         jsr 6fce <killAllPeople>
	killAllRegions ();
    895c:	|         jsr 114a8 <killAllRegions>

	int camerX = get2bytes (fp);
    8962:	|         move.l 112(sp),-(sp)
    8966:	|         jsr 6bc <get2bytes>
    896c:	|         addq.l #4,sp
    896e:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    8972:	|         move.l 112(sp),-(sp)
    8976:	|         jsr 6bc <get2bytes>
    897c:	|         addq.l #4,sp
    897e:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    8982:	|         move.l 112(sp),-(sp)
    8986:	|         jsr 7d8 <getFloat>
    898c:	|         addq.l #4,sp
    898e:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    8992:	|         move.l 112(sp),54(sp)
    8998:	|         move.l 19c54 <DOSBase>,d0
    899e:	|         movea.l d0,a6
    89a0:	|         move.l 54(sp),d1
    89a4:	|         jsr -306(a6)
    89a8:	|         move.l d0,50(sp)
    89ac:	|         move.l 50(sp),d0
    89b0:	|         move.l d0,d0
    89b2:	|         move.b d0,1811a <brightnessLevel>

	loadHandlers (fp);
    89b8:	|         move.l 112(sp),-(sp)
    89bc:	|         jsr 3b7a <loadHandlers>
    89c2:	|         addq.l #4,sp
	loadRegions (fp);
    89c4:	|         move.l 112(sp),-(sp)
    89c8:	|         jsr 11504 <loadRegions>
    89ce:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    89d0:	|         moveq #12,d0
    89d2:	|         move.l d0,46(sp)
    89d6:	|         clr.l 42(sp)
    89da:	|         move.l 19c4c <SysBase>,d0
    89e0:	|         movea.l d0,a6
    89e2:	|         move.l 46(sp),d0
    89e6:	|         move.l 42(sp),d1
    89ea:	|         jsr -684(a6)
    89ee:	|         move.l d0,38(sp)
    89f2:	|         move.l 38(sp),d0
    89f6:	|         move.l d0,19b2c <mouseCursorAnim>
	if (! mouseCursorAnim) {
    89fc:	|         move.l 19b2c <mouseCursorAnim>,d0
    8a02:	|     /-- bne.s 8a16 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    8a04:	|     |   pea 15d09 <main_sludge.c.2f5c5368+0x22f>
    8a0a:	|     |   jsr 12a04 <KPrintF>
    8a10:	|     |   addq.l #4,sp
		return FALSE;
    8a12:	|     |   clr.w d0
    8a14:	+-----|-- bra.s 8a8a <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    8a16:	|     \-> jsr 96b6 <nosnapshot>
	if (FGetC (fp)) {
    8a1c:	|         move.l 112(sp),34(sp)
    8a22:	|         move.l 19c54 <DOSBase>,d0
    8a28:	|         movea.l d0,a6
    8a2a:	|         move.l 34(sp),d1
    8a2e:	|         jsr -306(a6)
    8a32:	|         move.l d0,30(sp)
    8a36:	|         move.l 30(sp),d0
    8a3a:	|     /-- beq.s 8a50 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    8a3c:	|     |   move.l 112(sp),-(sp)
    8a40:	|     |   jsr 971c <restoreSnapshot>
    8a46:	|     |   addq.l #4,sp
    8a48:	|     |   tst.w d0
    8a4a:	|     +-- bne.s 8a50 <loadGame+0x2bc>
    8a4c:	|     |   clr.w d0
    8a4e:	+-----|-- bra.s 8a8a <loadGame+0x2f6>
	}

	Close (fp);
    8a50:	|     \-> move.l 112(sp),26(sp)
    8a56:	|         move.l 19c54 <DOSBase>,d0
    8a5c:	|         movea.l d0,a6
    8a5e:	|         move.l 26(sp),d1
    8a62:	|         jsr -36(a6)
    8a66:	|         move.l d0,22(sp)
	clearStackLib ();
    8a6a:	|         jsr 874a <clearStackLib>

	cameraX = camerX;
    8a70:	|         move.l 66(sp),19d02 <cameraX>
	cameraY = camerY;
    8a78:	|         move.l 62(sp),19d06 <cameraY>
	cameraZoom = camerZ;
    8a80:	|         move.l 58(sp),1814a <cameraZoom>

	return TRUE;
    8a88:	|         moveq #1,d0
}
    8a8a:	\-------> movem.l (sp)+,d2-d3/a6
    8a8e:	          lea 128(sp),sp
    8a92:	          rts

00008a94 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    8a94:	   /-> lea -64(sp),sp
    8a98:	   |   move.l a6,-(sp)
    8a9a:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    8a9c:	   |   movea.l 76(sp),a0
    8aa0:	   |   move.l (a0),d0
    8aa2:	   |   move.l 80(sp),-(sp)
    8aa6:	   |   move.l d0,-(sp)
    8aa8:	   |   jsr 8d0 <put2bytes>
    8aae:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    8ab0:	   |   movea.l 76(sp),a0
    8ab4:	   |   move.l 40(a0),d0
    8ab8:	/--|-- beq.s 8af4 <saveFunction+0x60>
		FPutC (fp, 1);
    8aba:	|  |   move.l 80(sp),52(sp)
    8ac0:	|  |   moveq #1,d0
    8ac2:	|  |   move.l d0,48(sp)
    8ac6:	|  |   move.l 19c54 <DOSBase>,d0
    8acc:	|  |   movea.l d0,a6
    8ace:	|  |   move.l 52(sp),d1
    8ad2:	|  |   move.l 48(sp),d2
    8ad6:	|  |   jsr -312(a6)
    8ada:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    8ade:	|  |   movea.l 76(sp),a0
    8ae2:	|  |   move.l 40(a0),d0
    8ae6:	|  |   move.l 80(sp),-(sp)
    8aea:	|  |   move.l d0,-(sp)
    8aec:	|  \-- jsr 8a94 <saveFunction>(pc)
    8af0:	|      addq.l #8,sp
    8af2:	|  /-- bra.s 8b16 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    8af4:	\--|-> move.l 80(sp),64(sp)
    8afa:	   |   clr.l 60(sp)
    8afe:	   |   move.l 19c54 <DOSBase>,d0
    8b04:	   |   movea.l d0,a6
    8b06:	   |   move.l 64(sp),d1
    8b0a:	   |   move.l 60(sp),d2
    8b0e:	   |   jsr -312(a6)
    8b12:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    8b16:	   \-> movea.l 76(sp),a0
    8b1a:	       move.l 12(a0),d0
    8b1e:	       move.l 80(sp),-(sp)
    8b22:	       move.l d0,-(sp)
    8b24:	       jsr 958 <put4bytes>
    8b2a:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    8b2c:	       movea.l 76(sp),a0
    8b30:	       move.l 36(a0),d0
    8b34:	       move.l 80(sp),-(sp)
    8b38:	       move.l d0,-(sp)
    8b3a:	       jsr 8d0 <put2bytes>
    8b40:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    8b42:	       move.l 80(sp),40(sp)
    8b48:	       movea.l 76(sp),a0
    8b4c:	       move.w 54(a0),d0
    8b50:	       movea.w d0,a0
    8b52:	       move.l a0,36(sp)
    8b56:	       move.l 19c54 <DOSBase>,d0
    8b5c:	       movea.l d0,a6
    8b5e:	       move.l 40(sp),d1
    8b62:	       move.l 36(sp),d2
    8b66:	       jsr -312(a6)
    8b6a:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    8b6e:	       move.l 80(sp),28(sp)
    8b74:	       movea.l 76(sp),a0
    8b78:	       move.w 48(a0),d0
    8b7c:	       movea.w d0,a0
    8b7e:	       move.l a0,24(sp)
    8b82:	       move.l 19c54 <DOSBase>,d0
    8b88:	       movea.l d0,a6
    8b8a:	       move.l 28(sp),d1
    8b8e:	       move.l 24(sp),d2
    8b92:	       jsr -312(a6)
    8b96:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    8b9a:	       move.l 80(sp),16(sp)
    8ba0:	       movea.l 76(sp),a0
    8ba4:	       move.w 50(a0),d0
    8ba8:	       movea.w d0,a0
    8baa:	       move.l a0,12(sp)
    8bae:	       move.l 19c54 <DOSBase>,d0
    8bb4:	       movea.l d0,a6
    8bb6:	       move.l 16(sp),d1
    8bba:	       move.l 12(sp),d2
    8bbe:	       jsr -312(a6)
    8bc2:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    8bc6:	       moveq #28,d0
    8bc8:	       add.l 76(sp),d0
    8bcc:	       move.l 80(sp),-(sp)
    8bd0:	       move.l d0,-(sp)
    8bd2:	       jsr 9350 <saveVariable>
    8bd8:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    8bda:	       movea.l 76(sp),a0
    8bde:	       move.b 56(a0),d0
    8be2:	   /-- beq.s 8bf2 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    8be4:	   |   pea 15d2a <main_sludge.c.2f5c5368+0x250>
    8bea:	   |   jsr 12a04 <KPrintF>
    8bf0:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    8bf2:	   \-> movea.l 76(sp),a0
    8bf6:	       move.l 24(a0),d0
    8bfa:	       move.l 80(sp),-(sp)
    8bfe:	       move.l d0,-(sp)
    8c00:	       jsr 91c4 <saveStack>
    8c06:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    8c08:	       clr.l 68(sp)
    8c0c:	   /-- bra.s 8c30 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    8c0e:	/--|-> movea.l 76(sp),a0
    8c12:	|  |   move.l 20(a0),d1
    8c16:	|  |   move.l 68(sp),d0
    8c1a:	|  |   lsl.l #3,d0
    8c1c:	|  |   add.l d1,d0
    8c1e:	|  |   move.l 80(sp),-(sp)
    8c22:	|  |   move.l d0,-(sp)
    8c24:	|  |   jsr 9350 <saveVariable>
    8c2a:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    8c2c:	|  |   addq.l #1,68(sp)
    8c30:	|  \-> movea.l 76(sp),a0
    8c34:	|      move.l 8(a0),d0
    8c38:	|      cmp.l 68(sp),d0
    8c3c:	\----- bgt.s 8c0e <saveFunction+0x17a>
	}
}
    8c3e:	       nop
    8c40:	       nop
    8c42:	       move.l (sp)+,d2
    8c44:	       movea.l (sp)+,a6
    8c46:	       lea 64(sp),sp
    8c4a:	       rts

00008c4c <saveGame>:

BOOL saveGame (char * fname) {
    8c4c:	          lea -272(sp),sp
    8c50:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    8c54:	          move.l 288(sp),268(sp)
    8c5a:	          move.l #1006,264(sp)
    8c62:	          move.l 19c54 <DOSBase>,d0
    8c68:	          movea.l d0,a6
    8c6a:	          move.l 268(sp),d1
    8c6e:	          move.l 264(sp),d2
    8c72:	          jsr -30(a6)
    8c76:	          move.l d0,260(sp)
    8c7a:	          move.l 260(sp),d0
    8c7e:	          move.l d0,256(sp)
	if (fp == NULL) {
    8c82:	      /-- bne.s 8c98 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    8c84:	      |   pea 15d4c <main_sludge.c.2f5c5368+0x272>
    8c8a:	      |   jsr 12a04 <KPrintF>
    8c90:	      |   addq.l #4,sp
		return FALSE;
    8c92:	      |   clr.w d0
    8c94:	/-----|-- bra.w 91ba <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    8c98:	|     \-> move.l 256(sp),252(sp)
    8c9e:	|         move.l #89449,248(sp)
    8ca6:	|         moveq #6,d0
    8ca8:	|         move.l d0,244(sp)
    8cac:	|         move.l 19c54 <DOSBase>,d0
    8cb2:	|         movea.l d0,a6
    8cb4:	|         move.l 252(sp),d1
    8cb8:	|         move.l 248(sp),d2
    8cbc:	|         move.l 244(sp),d3
    8cc0:	|         jsr -48(a6)
    8cc4:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    8cc8:	|         move.l 256(sp),236(sp)
    8cce:	|         clr.l 232(sp)
    8cd2:	|         move.l 19c54 <DOSBase>,d0
    8cd8:	|         movea.l d0,a6
    8cda:	|         move.l 236(sp),d1
    8cde:	|         move.l 232(sp),d2
    8ce2:	|         jsr -312(a6)
    8ce6:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    8cea:	|         move.l 256(sp),224(sp)
    8cf0:	|         clr.l 220(sp)
    8cf4:	|         move.l 19c54 <DOSBase>,d0
    8cfa:	|         movea.l d0,a6
    8cfc:	|         move.l 224(sp),d1
    8d00:	|         move.l 220(sp),d2
    8d04:	|         jsr -312(a6)
    8d08:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    8d0c:	|         move.l 256(sp),212(sp)
    8d12:	|         moveq #2,d0
    8d14:	|         move.l d0,208(sp)
    8d18:	|         move.l 19c54 <DOSBase>,d0
    8d1e:	|         movea.l d0,a6
    8d20:	|         move.l 212(sp),d1
    8d24:	|         move.l 208(sp),d2
    8d28:	|         jsr -312(a6)
    8d2c:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    8d30:	|         move.l 256(sp),200(sp)
    8d36:	|         moveq #2,d0
    8d38:	|         move.l d0,196(sp)
    8d3c:	|         move.l 19c54 <DOSBase>,d0
    8d42:	|         movea.l d0,a6
    8d44:	|         move.l 200(sp),d1
    8d48:	|         move.l 196(sp),d2
    8d4c:	|         jsr -312(a6)
    8d50:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    8d54:	|         move.l 256(sp),188(sp)
    8d5a:	|         move.l #105458,184(sp)
    8d62:	|         moveq #8,d0
    8d64:	|         move.l d0,180(sp)
    8d68:	|         move.l 19c54 <DOSBase>,d0
    8d6e:	|         movea.l d0,a6
    8d70:	|         move.l 188(sp),d1
    8d74:	|         move.l 184(sp),d2
    8d78:	|         move.l 180(sp),d3
    8d7c:	|         jsr -48(a6)
    8d80:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    8d84:	|         move.l 256(sp),172(sp)
    8d8a:	|         move.w 18000 <allowAnyFilename>,d0
    8d90:	|         movea.w d0,a0
    8d92:	|         move.l a0,168(sp)
    8d96:	|         move.l 19c54 <DOSBase>,d0
    8d9c:	|         movea.l d0,a6
    8d9e:	|         move.l 172(sp),d1
    8da2:	|         move.l 168(sp),d2
    8da6:	|         jsr -312(a6)
    8daa:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    8dae:	|         move.l 256(sp),160(sp)
    8db4:	|         move.w 19bf0 <captureAllKeys>,d0
    8dba:	|         movea.w d0,a0
    8dbc:	|         move.l a0,156(sp)
    8dc0:	|         move.l 19c54 <DOSBase>,d0
    8dc6:	|         movea.l d0,a6
    8dc8:	|         move.l 160(sp),d1
    8dcc:	|         move.l 156(sp),d2
    8dd0:	|         jsr -312(a6)
    8dd4:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    8dd8:	|         move.l 256(sp),148(sp)
    8dde:	|         moveq #1,d0
    8de0:	|         move.l d0,144(sp)
    8de4:	|         move.l 19c54 <DOSBase>,d0
    8dea:	|         movea.l d0,a6
    8dec:	|         move.l 148(sp),d1
    8df0:	|         move.l 144(sp),d2
    8df4:	|         jsr -312(a6)
    8df8:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    8dfc:	|         move.l 256(sp),136(sp)
    8e02:	|         move.l 19d48 <fontTableSize>,d0
    8e08:	|         sgt d0
    8e0a:	|         neg.b d0
    8e0c:	|         move.b d0,d0
    8e0e:	|         andi.l #255,d0
    8e14:	|         move.l d0,132(sp)
    8e18:	|         move.l 19c54 <DOSBase>,d0
    8e1e:	|         movea.l d0,a6
    8e20:	|         move.l 136(sp),d1
    8e24:	|         move.l 132(sp),d2
    8e28:	|         jsr -312(a6)
    8e2c:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    8e30:	|         move.l 19d48 <fontTableSize>,d0
    8e36:	|     /-- ble.s 8e74 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    8e38:	|     |   move.l 19d40 <loadedFontNum>,d0
    8e3e:	|     |   move.l 256(sp),-(sp)
    8e42:	|     |   move.l d0,-(sp)
    8e44:	|     |   jsr 8d0 <put2bytes>
    8e4a:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    8e4c:	|     |   move.l 19d3c <fontHeight>,d0
    8e52:	|     |   move.l 256(sp),-(sp)
    8e56:	|     |   move.l d0,-(sp)
    8e58:	|     |   jsr 8d0 <put2bytes>
    8e5e:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    8e60:	|     |   move.l 19d44 <fontOrderString>,d0
    8e66:	|     |   move.l 256(sp),-(sp)
    8e6a:	|     |   move.l d0,-(sp)
    8e6c:	|     |   jsr bd8 <writeString>
    8e72:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    8e74:	|     \-> move.w 186b0 <fontSpace>,d0
    8e7a:	|         movea.w d0,a0
    8e7c:	|         move.l 256(sp),-(sp)
    8e80:	|         move.l a0,-(sp)
    8e82:	|         jsr a9c <putSigned>
    8e88:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    8e8a:	|         move.l 19d02 <cameraX>,d0
    8e90:	|         move.l 256(sp),-(sp)
    8e94:	|         move.l d0,-(sp)
    8e96:	|         jsr 8d0 <put2bytes>
    8e9c:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    8e9e:	|         move.l 19d06 <cameraY>,d0
    8ea4:	|         move.l 256(sp),-(sp)
    8ea8:	|         move.l d0,-(sp)
    8eaa:	|         jsr 8d0 <put2bytes>
    8eb0:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    8eb2:	|         move.l 1814a <cameraZoom>,d0
    8eb8:	|         move.l 256(sp),-(sp)
    8ebc:	|         move.l d0,-(sp)
    8ebe:	|         jsr a46 <putFloat>
    8ec4:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    8ec6:	|         move.l 256(sp),124(sp)
    8ecc:	|         move.b 1811a <brightnessLevel>,d0
    8ed2:	|         move.b d0,d0
    8ed4:	|         andi.l #255,d0
    8eda:	|         move.l d0,120(sp)
    8ede:	|         move.l 19c54 <DOSBase>,d0
    8ee4:	|         movea.l d0,a6
    8ee6:	|         move.l 124(sp),d1
    8eea:	|         move.l 120(sp),d2
    8eee:	|         jsr -312(a6)
    8ef2:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    8ef6:	|         move.l 256(sp),-(sp)
    8efa:	|         jsr 40fe <saveHandlers>
    8f00:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    8f02:	|         move.l 256(sp),-(sp)
    8f06:	|         jsr 116be <saveRegions>
    8f0c:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    8f0e:	|         move.l 19b2c <mouseCursorAnim>,d0
    8f14:	|         move.l 256(sp),-(sp)
    8f18:	|         move.l d0,-(sp)
    8f1a:	|         jsr 74fc <saveAnim>
    8f20:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    8f22:	|         move.l 19b30 <mouseCursorFrameNum>,d0
    8f28:	|         move.l 256(sp),-(sp)
    8f2c:	|         move.l d0,-(sp)
    8f2e:	|         jsr 8d0 <put2bytes>
    8f34:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    8f36:	|         move.l 19be8 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    8f3e:	|         clr.l 272(sp)
	while (thisFunction) {
    8f42:	|     /-- bra.s 8f52 <saveGame+0x306>
		countFunctions ++;
    8f44:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    8f48:	|  |  |   movea.l 276(sp),a0
    8f4c:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    8f52:	|  |  \-> tst.l 276(sp)
    8f56:	|  \----- bne.s 8f44 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    8f58:	|         move.l 256(sp),-(sp)
    8f5c:	|         move.l 276(sp),-(sp)
    8f60:	|         jsr 8d0 <put2bytes>
    8f66:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    8f68:	|         move.l 19be8 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    8f70:	|     /-- bra.s 8f8c <saveGame+0x340>
		saveFunction (thisFunction, fp);
    8f72:	|  /--|-> move.l 256(sp),-(sp)
    8f76:	|  |  |   move.l 280(sp),-(sp)
    8f7a:	|  |  |   jsr 8a94 <saveFunction>
    8f80:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    8f82:	|  |  |   movea.l 276(sp),a0
    8f86:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    8f8c:	|  |  \-> tst.l 276(sp)
    8f90:	|  \----- bne.s 8f72 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    8f92:	|         clr.l 280(sp)
    8f96:	|     /-- bra.s 8fb8 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    8f98:	|  /--|-> move.l 19bfe <globalVars>,d1
    8f9e:	|  |  |   move.l 280(sp),d0
    8fa2:	|  |  |   lsl.l #3,d0
    8fa4:	|  |  |   add.l d1,d0
    8fa6:	|  |  |   move.l 256(sp),-(sp)
    8faa:	|  |  |   move.l d0,-(sp)
    8fac:	|  |  |   jsr 9350 <saveVariable>
    8fb2:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    8fb4:	|  |  |   addq.l #1,280(sp)
    8fb8:	|  |  \-> move.l 19c24 <numGlobals>,d0
    8fbe:	|  |      cmp.l 280(sp),d0
    8fc2:	|  \----- bgt.s 8f98 <saveGame+0x34c>
	}

	savePeople (fp);
    8fc4:	|         move.l 256(sp),-(sp)
    8fc8:	|         jsr 7624 <savePeople>
    8fce:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    8fd0:	|         movea.l 19d54 <currentFloor>,a0
    8fd6:	|         move.l 8(a0),d0
    8fda:	|  /----- beq.s 9018 <saveGame+0x3cc>
		FPutC (fp, 1);
    8fdc:	|  |      move.l 256(sp),100(sp)
    8fe2:	|  |      moveq #1,d0
    8fe4:	|  |      move.l d0,96(sp)
    8fe8:	|  |      move.l 19c54 <DOSBase>,d0
    8fee:	|  |      movea.l d0,a6
    8ff0:	|  |      move.l 100(sp),d1
    8ff4:	|  |      move.l 96(sp),d2
    8ff8:	|  |      jsr -312(a6)
    8ffc:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    9000:	|  |      movea.l 19d54 <currentFloor>,a0
    9006:	|  |      move.l (a0),d0
    9008:	|  |      move.l 256(sp),-(sp)
    900c:	|  |      move.l d0,-(sp)
    900e:	|  |      jsr 8d0 <put2bytes>
    9014:	|  |      addq.l #8,sp
    9016:	|  |  /-- bra.s 903a <saveGame+0x3ee>
	} else FPutC (fp, 0);
    9018:	|  \--|-> move.l 256(sp),112(sp)
    901e:	|     |   clr.l 108(sp)
    9022:	|     |   move.l 19c54 <DOSBase>,d0
    9028:	|     |   movea.l d0,a6
    902a:	|     |   move.l 112(sp),d1
    902e:	|     |   move.l 108(sp),d2
    9032:	|     |   jsr -312(a6)
    9036:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    903a:	|     \-> move.l 19bbc <zBuffer+0x50>,d0
    9040:	|  /----- beq.s 907c <saveGame+0x430>
		FPutC (fp, 1);
    9042:	|  |      move.l 256(sp),76(sp)
    9048:	|  |      moveq #1,d0
    904a:	|  |      move.l d0,72(sp)
    904e:	|  |      move.l 19c54 <DOSBase>,d0
    9054:	|  |      movea.l d0,a6
    9056:	|  |      move.l 76(sp),d1
    905a:	|  |      move.l 72(sp),d2
    905e:	|  |      jsr -312(a6)
    9062:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    9066:	|  |      move.l 19bb8 <zBuffer+0x4c>,d0
    906c:	|  |      move.l 256(sp),-(sp)
    9070:	|  |      move.l d0,-(sp)
    9072:	|  |      jsr 8d0 <put2bytes>
    9078:	|  |      addq.l #8,sp
    907a:	|  |  /-- bra.s 909e <saveGame+0x452>
	} else FPutC (fp,0);
    907c:	|  \--|-> move.l 256(sp),88(sp)
    9082:	|     |   clr.l 84(sp)
    9086:	|     |   move.l 19c54 <DOSBase>,d0
    908c:	|     |   movea.l d0,a6
    908e:	|     |   move.l 88(sp),d1
    9092:	|     |   move.l 84(sp),d2
    9096:	|     |   jsr -312(a6)
    909a:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    909e:	|     \-> move.l 256(sp),64(sp)
    90a4:	|         move.l 19d16 <speechMode>,60(sp)
    90ac:	|         move.l 19c54 <DOSBase>,d0
    90b2:	|         movea.l d0,a6
    90b4:	|         move.l 64(sp),d1
    90b8:	|         move.l 60(sp),d2
    90bc:	|         jsr -312(a6)
    90c0:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    90c4:	|         move.b 18686 <fadeMode>,d0
    90ca:	|         move.b d0,d0
    90cc:	|         andi.l #255,d0
    90d2:	|         move.l d0,52(sp)
    90d6:	|         move.l 256(sp),48(sp)
    90dc:	|         move.l 19c54 <DOSBase>,d0
    90e2:	|         movea.l d0,a6
    90e4:	|         move.l 52(sp),d1
    90e8:	|         move.l 48(sp),d2
    90ec:	|         jsr -312(a6)
    90f0:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    90f4:	|         move.l 19ca8 <speech>,d0
    90fa:	|         move.l 256(sp),-(sp)
    90fe:	|         move.l d0,-(sp)
    9100:	|         jsr 56e6 <saveSpeech>
    9106:	|         addq.l #8,sp
	saveStatusBars (fp);
    9108:	|         move.l 256(sp),-(sp)
    910c:	|         jsr 50e2 <saveStatusBars>
    9112:	|         addq.l #4,sp
	saveSounds (fp);
    9114:	|         move.l 256(sp),-(sp)
    9118:	|         jsr 9494 <saveSounds>
    911e:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    9120:	|         move.w 19d00 <saveEncoding>,d0
    9126:	|         move.w d0,d0
    9128:	|         andi.l #65535,d0
    912e:	|         move.l 256(sp),-(sp)
    9132:	|         move.l d0,-(sp)
    9134:	|         jsr 8d0 <put2bytes>
    913a:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    913c:	|         move.l 19cf2 <parallaxStuff>,d0
    9142:	|         move.l 256(sp),-(sp)
    9146:	|         move.l d0,-(sp)
    9148:	|         jsr 9742 <saveParallaxRecursive>
    914e:	|         addq.l #8,sp
	FPutC (fp, 0);
    9150:	|         move.l 256(sp),40(sp)
    9156:	|         clr.l 36(sp)
    915a:	|         move.l 19c54 <DOSBase>,d0
    9160:	|         movea.l d0,a6
    9162:	|         move.l 40(sp),d1
    9166:	|         move.l 36(sp),d2
    916a:	|         jsr -312(a6)
    916e:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    9172:	|         move.l 256(sp),28(sp)
    9178:	|         move.l 18120 <languageNum>,24(sp)
    9180:	|         move.l 19c54 <DOSBase>,d0
    9186:	|         movea.l d0,a6
    9188:	|         move.l 28(sp),d1
    918c:	|         move.l 24(sp),d2
    9190:	|         jsr -312(a6)
    9194:	|         move.l d0,20(sp)

	Close(fp);
    9198:	|         move.l 256(sp),16(sp)
    919e:	|         move.l 19c54 <DOSBase>,d0
    91a4:	|         movea.l d0,a6
    91a6:	|         move.l 16(sp),d1
    91aa:	|         jsr -36(a6)
    91ae:	|         move.l d0,12(sp)
	clearStackLib ();
    91b2:	|         jsr 874a <clearStackLib>
	return TRUE;
    91b8:	|         moveq #1,d0
}
    91ba:	\-------> movem.l (sp)+,d2-d3/a6
    91be:	          lea 272(sp),sp
    91c2:	          rts

000091c4 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    91c4:	       lea -12(sp),sp
	int elements = 0;
    91c8:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    91cc:	       move.l 16(sp),(sp)
	while (search) {
    91d0:	   /-- bra.s 91dc <saveStack+0x18>
		elements ++;
    91d2:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    91d6:	|  |   movea.l (sp),a0
    91d8:	|  |   move.l 8(a0),(sp)
	while (search) {
    91dc:	|  \-> tst.l (sp)
    91de:	\----- bne.s 91d2 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    91e0:	       move.l 20(sp),-(sp)
    91e4:	       move.l 12(sp),-(sp)
    91e8:	       jsr 8d0 <put2bytes>
    91ee:	       addq.l #8,sp
	search = vs;
    91f0:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    91f4:	       clr.l 4(sp)
    91f8:	   /-- bra.s 9214 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    91fa:	/--|-> move.l (sp),d0
    91fc:	|  |   move.l 20(sp),-(sp)
    9200:	|  |   move.l d0,-(sp)
    9202:	|  |   jsr 9350 <saveVariable>
    9208:	|  |   addq.l #8,sp
		search = search -> next;
    920a:	|  |   movea.l (sp),a0
    920c:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    9210:	|  |   addq.l #1,4(sp)
    9214:	|  \-> move.l 4(sp),d0
    9218:	|      cmp.l 8(sp),d0
    921c:	\----- blt.s 91fa <saveStack+0x36>
	}
}
    921e:	       nop
    9220:	       nop
    9222:	       lea 12(sp),sp
    9226:	       rts

00009228 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    9228:	             lea -44(sp),sp
    922c:	             move.l a6,-(sp)
    922e:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    9230:	             move.l 19cdc <stackLib>,48(sp)
	int a = 0;
    9238:	             clr.l 44(sp)
	while (s) {
    923c:	      /----- bra.s 929a <saveStackRef+0x72>
		if (s -> stack == vs) {
    923e:	   /--|----> movea.l 48(sp),a0
    9242:	   |  |      move.l (a0),d0
    9244:	   |  |      cmp.l 56(sp),d0
    9248:	   |  |  /-- bne.s 928c <saveStackRef+0x64>
			FPutC (fp, 1);
    924a:	   |  |  |   move.l 60(sp),16(sp)
    9250:	   |  |  |   moveq #1,d0
    9252:	   |  |  |   move.l d0,12(sp)
    9256:	   |  |  |   move.l 19c54 <DOSBase>,d0
    925c:	   |  |  |   movea.l d0,a6
    925e:	   |  |  |   move.l 16(sp),d1
    9262:	   |  |  |   move.l 12(sp),d2
    9266:	   |  |  |   jsr -312(a6)
    926a:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    926e:	   |  |  |   move.l 19cd8 <stackLibTotal>,d0
    9274:	   |  |  |   sub.l 44(sp),d0
    9278:	   |  |  |   move.l 60(sp),-(sp)
    927c:	   |  |  |   move.l d0,-(sp)
    927e:	   |  |  |   jsr 8d0 <put2bytes>
    9284:	   |  |  |   addq.l #8,sp
			return TRUE;
    9286:	   |  |  |   moveq #1,d0
    9288:	/--|--|--|-- bra.w 9346 <saveStackRef+0x11e>
		}
		s = s -> next;
    928c:	|  |  |  \-> movea.l 48(sp),a0
    9290:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    9296:	|  |  |      addq.l #1,44(sp)
	while (s) {
    929a:	|  |  \----> tst.l 48(sp)
    929e:	|  \-------- bne.s 923e <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    92a0:	|            move.l 60(sp),40(sp)
    92a6:	|            clr.l 36(sp)
    92aa:	|            move.l 19c54 <DOSBase>,d0
    92b0:	|            movea.l d0,a6
    92b2:	|            move.l 40(sp),d1
    92b6:	|            move.l 36(sp),d2
    92ba:	|            jsr -312(a6)
    92be:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    92c2:	|            movea.l 56(sp),a0
    92c6:	|            move.l (a0),d0
    92c8:	|            move.l 60(sp),-(sp)
    92cc:	|            move.l d0,-(sp)
    92ce:	|            jsr 91c4 <saveStack>
    92d4:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    92d6:	|            moveq #8,d0
    92d8:	|            move.l d0,28(sp)
    92dc:	|            clr.l 24(sp)
    92e0:	|            move.l 19c4c <SysBase>,d0
    92e6:	|            movea.l d0,a6
    92e8:	|            move.l 28(sp),d0
    92ec:	|            move.l 24(sp),d1
    92f0:	|            jsr -684(a6)
    92f4:	|            move.l d0,20(sp)
    92f8:	|            move.l 20(sp),d0
    92fc:	|            move.l d0,48(sp)
	stackLibTotal ++;
    9300:	|            move.l 19cd8 <stackLibTotal>,d0
    9306:	|            addq.l #1,d0
    9308:	|            move.l d0,19cd8 <stackLibTotal>
	if (! s) {
    930e:	|            tst.l 48(sp)
    9312:	|        /-- bne.s 9326 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    9314:	|        |   pea 15d98 <main_sludge.c.2f5c5368+0x2be>
    931a:	|        |   jsr 12a04 <KPrintF>
    9320:	|        |   addq.l #4,sp
		return FALSE;
    9322:	|        |   clr.w d0
    9324:	+--------|-- bra.s 9346 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    9326:	|        \-> move.l 19cdc <stackLib>,d0
    932c:	|            movea.l 48(sp),a0
    9330:	|            move.l d0,4(a0)
	s -> stack = vs;
    9334:	|            movea.l 48(sp),a0
    9338:	|            move.l 56(sp),(a0)
	stackLib = s;
    933c:	|            move.l 48(sp),19cdc <stackLib>
	return TRUE;
    9344:	|            moveq #1,d0
}
    9346:	\----------> move.l (sp)+,d2
    9348:	             movea.l (sp)+,a6
    934a:	             lea 44(sp),sp
    934e:	             rts

00009350 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    9350:	          lea -12(sp),sp
    9354:	          move.l a6,-(sp)
    9356:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    9358:	          move.l 28(sp),16(sp)
    935e:	          movea.l 24(sp),a0
    9362:	          move.l (a0),d0
    9364:	          move.l d0,12(sp)
    9368:	          move.l 19c54 <DOSBase>,d0
    936e:	          movea.l d0,a6
    9370:	          move.l 16(sp),d1
    9374:	          move.l 12(sp),d2
    9378:	          jsr -312(a6)
    937c:	          move.l d0,8(sp)
	switch (from -> varType) {
    9380:	          movea.l 24(sp),a0
    9384:	          move.l (a0),d0
    9386:	          moveq #9,d1
    9388:	          cmp.l d0,d1
    938a:	      /-- bcs.w 943a <saveVariable+0xea>
    938e:	      |   add.l d0,d0
    9390:	      |   movea.l d0,a0
    9392:	      |   adda.l #37790,a0
    9398:	      |   move.w (a0),d0
    939a:	      |   jmp (939e <saveVariable+0x4e>,pc,d0.w)
    939e:	      |   ori.l #1310740,(a0)+
    93a4:	      |   ori.b #20,(20,a0,d0.w)
    93aa:	      |   .short 0x004c
    93ac:	      |   ori.b #126,(a4)
    93b0:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    93b4:	      |   ori.b #40,(a0)+
    93b8:	      |   ori.b #47,d4
    93bc:	      |   ori.b #0,(a4)+
    93c0:	      |   jsr 958 <put4bytes>
    93c6:	      |   addq.l #8,sp
		return TRUE;
    93c8:	      |   moveq #1,d0
    93ca:	/-----|-- bra.w 9476 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    93ce:	|     |   movea.l 24(sp),a0
    93d2:	|     |   move.l 4(a0),d0
    93d6:	|     |   move.l 28(sp),-(sp)
    93da:	|     |   move.l d0,-(sp)
    93dc:	|     |   jsr bd8 <writeString>
    93e2:	|     |   addq.l #8,sp
		return TRUE;
    93e4:	|     |   moveq #1,d0
    93e6:	+-----|-- bra.w 9476 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    93ea:	|     |   movea.l 24(sp),a0
    93ee:	|     |   move.l 4(a0),d0
    93f2:	|     |   move.l 28(sp),-(sp)
    93f6:	|     |   move.l d0,-(sp)
    93f8:	|     |   jsr 9228 <saveStackRef>
    93fe:	|     |   addq.l #8,sp
    9400:	+-----|-- bra.s 9476 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    9402:	|     |   movea.l 24(sp),a0
    9406:	|     |   move.l 4(a0),d0
    940a:	|     |   move.l 28(sp),-(sp)
    940e:	|     |   move.l d0,-(sp)
    9410:	|     |   jsr 75c6 <saveCostume>
    9416:	|     |   addq.l #8,sp
		return FALSE;
    9418:	|     |   clr.w d0
    941a:	+-----|-- bra.s 9476 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    941c:	|     |   movea.l 24(sp),a0
    9420:	|     |   move.l 4(a0),d0
    9424:	|     |   move.l 28(sp),-(sp)
    9428:	|     |   move.l d0,-(sp)
    942a:	|     |   jsr 74fc <saveAnim>
    9430:	|     |   addq.l #8,sp
		return FALSE;
    9432:	|     |   clr.w d0
    9434:	+-----|-- bra.s 9476 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    9436:	|     |   clr.w d0
    9438:	+-----|-- bra.s 9476 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    943a:	|     \-> movea.l 24(sp),a0
    943e:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    9440:	|         moveq #10,d1
    9442:	|         cmp.l d0,d1
    9444:	|  /----- bcs.s 945e <saveVariable+0x10e>
						typeName[from->varType] :
    9446:	|  |      movea.l 24(sp),a0
    944a:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    944c:	|  |      add.l d0,d0
    944e:	|  |      movea.l d0,a1
    9450:	|  |      adda.l d0,a1
    9452:	|  |      lea 18688 <typeName>,a0
    9458:	|  |      move.l (0,a1,a0.l),d0
    945c:	|  |  /-- bra.s 9464 <saveVariable+0x114>
    945e:	|  \--|-> move.l #89533,d0
    9464:	|     \-> move.l d0,-(sp)
    9466:	|         pea 15dc4 <main_sludge.c.2f5c5368+0x2ea>
    946c:	|         jsr 12a04 <KPrintF>
    9472:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    9474:	|         moveq #1,d0
    9476:	\-------> move.l (sp)+,d2
    9478:	          movea.l (sp)+,a6
    947a:	          lea 12(sp),sp
    947e:	          rts

00009480 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    9480:	moveq #0,d0
}
    9482:	rts

00009484 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    9484:	nop
    9486:	rts

00009488 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    9488:	nop
    948a:	rts

0000948c <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    948c:	moveq #1,d0
}
    948e:	rts

00009490 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    9490:	nop
    9492:	rts

00009494 <saveSounds>:

void saveSounds (BPTR fp) {
    9494:	lea -12(sp),sp
    9498:	move.l a6,-(sp)
    949a:	move.l d2,-(sp)
	FPutC (fp,0);
    949c:	move.l 24(sp),16(sp)
    94a2:	clr.l 12(sp)
    94a6:	move.l 19c54 <DOSBase>,d0
    94ac:	movea.l d0,a6
    94ae:	move.l 16(sp),d1
    94b2:	move.l 12(sp),d2
    94b6:	jsr -312(a6)
    94ba:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    94be:	move.l 18146 <defSoundVol>,d0
    94c4:	move.l 24(sp),-(sp)
    94c8:	move.l d0,-(sp)
    94ca:	jsr 8d0 <put2bytes>
    94d0:	addq.l #8,sp
	put2bytes (defVol, fp);
    94d2:	move.l 18142 <defVol>,d0
    94d8:	move.l 24(sp),-(sp)
    94dc:	move.l d0,-(sp)
    94de:	jsr 8d0 <put2bytes>
    94e4:	addq.l #8,sp
}
    94e6:	nop
    94e8:	move.l (sp)+,d2
    94ea:	movea.l (sp)+,a6
    94ec:	lea 12(sp),sp
    94f0:	rts

000094f2 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    94f2:	move.l 4(sp),18142 <defVol>
}
    94fa:	nop
    94fc:	rts

000094fe <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    94fe:	move.l 4(sp),18146 <defSoundVol>
}
    9506:	nop
    9508:	rts

0000950a <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    950a:	nop
    950c:	rts

0000950e <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    950e:	nop
    9510:	rts

00009512 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    9512:	nop
    9514:	rts

00009516 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    9516:	subq.l #4,sp
    9518:	move.l 12(sp),d0
    951c:	move.w d0,d0
    951e:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    9522:	moveq #1,d0
}
    9524:	addq.l #4,sp
    9526:	rts

00009528 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    9528:	nop
    952a:	rts

0000952c <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    952c:	move.l 16(sp),-(sp)
    9530:	move.l 16(sp),-(sp)
    9534:	jsr df4 <CstBlankScreen>
    953a:	addq.l #8,sp
}
    953c:	nop
    953e:	rts

00009540 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    9540:	pea 15de7 <main_sludge.c.2f5c5368+0x30d>
    9546:	jsr 12a04 <KPrintF>
    954c:	addq.l #4,sp
}
    954e:	nop
    9550:	rts

00009552 <drawHorizontalLine>:

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    9552:	movea.l 8(sp),a1
    9556:	movea.l 12(sp),a0
    955a:	move.l 8(sp),d1
    955e:	move.l 4(sp),d0
    9562:	move.l a1,-(sp)
    9564:	move.l a0,-(sp)
    9566:	move.l d1,-(sp)
    9568:	move.l d0,-(sp)
    956a:	jsr 1396 <drawLine>
    9570:	lea 16(sp),sp
}
    9574:	nop
    9576:	rts

00009578 <drawVerticalLine>:

void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    9578:	movea.l 12(sp),a1
    957c:	movea.l 4(sp),a0
    9580:	move.l 8(sp),d1
    9584:	move.l 4(sp),d0
    9588:	move.l a1,-(sp)
    958a:	move.l a0,-(sp)
    958c:	move.l d1,-(sp)
    958e:	move.l d0,-(sp)
    9590:	jsr 1396 <drawLine>
    9596:	lea 16(sp),sp
}
    959a:	nop
    959c:	rts

0000959e <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    959e:	pea 15e20 <main_sludge.c.2f5c5368+0x346>
    95a4:	jsr 12a04 <KPrintF>
    95aa:	addq.l #4,sp
}
    95ac:	nop
    95ae:	rts

000095b0 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    95b0:	jsr 1326 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    95b6:	pea 19cec <backdropTextureName>
    95bc:	pea 1 <_start+0x1>
    95c0:	jsr 1518 <deleteTextures>
    95c6:	addq.l #8,sp
	backdropTextureName = 0;
    95c8:	clr.l 19cec <backdropTextureName>
	backdropExists = FALSE;
    95ce:	clr.w 19cf0 <backdropExists>
}
    95d4:	nop
    95d6:	rts

000095d8 <killParallax>:

void killParallax () {
    95d8:	          lea -12(sp),sp
    95dc:	          move.l a6,-(sp)
	while (parallaxStuff) {
    95de:	   /----- bra.s 964a <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    95e0:	/--|----> move.l 19cf2 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    95e8:	|  |      movea.l 12(sp),a0
    95ec:	|  |      move.l 42(a0),d0
    95f0:	|  |      move.l d0,19cf2 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    95f6:	|  |      move.l 12(sp),d0
    95fa:	|  |      addq.l #4,d0
    95fc:	|  |      move.l d0,-(sp)
    95fe:	|  |      pea 1 <_start+0x1>
    9602:	|  |      jsr 1518 <deleteTextures>
    9608:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    960a:	|  |      movea.l 12(sp),a0
    960e:	|  |      move.l (a0),d0
    9610:	|  |  /-- beq.s 962a <killParallax+0x52>
    9612:	|  |  |   movea.l 12(sp),a0
    9616:	|  |  |   move.l (a0),8(sp)
    961a:	|  |  |   move.l 19c4c <SysBase>,d0
    9620:	|  |  |   movea.l d0,a6
    9622:	|  |  |   movea.l 8(sp),a1
    9626:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    962a:	|  |  \-> tst.l 12(sp)
    962e:	|  |  /-- beq.s 9646 <killParallax+0x6e>
    9630:	|  |  |   move.l 12(sp),4(sp)
    9636:	|  |  |   move.l 19c4c <SysBase>,d0
    963c:	|  |  |   movea.l d0,a6
    963e:	|  |  |   movea.l 4(sp),a1
    9642:	|  |  |   jsr -690(a6)
		k = NULL;
    9646:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    964a:	|  \----> move.l 19cf2 <parallaxStuff>,d0
    9650:	\-------- bne.s 95e0 <killParallax+0x8>
	}
}
    9652:	          nop
    9654:	          nop
    9656:	          movea.l (sp)+,a6
    9658:	          lea 12(sp),sp
    965c:	          rts

0000965e <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	KPrintF("loadBackDrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    965e:	pea 15e41 <main_sludge.c.2f5c5368+0x367>
    9664:	jsr 12a04 <KPrintF>
    966a:	addq.l #4,sp
}
    966c:	nop
    966e:	rts

00009670 <loadParallax>:

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    9670:	subq.l #8,sp
    9672:	movea.l 12(sp),a0
    9676:	move.l 16(sp),d1
    967a:	move.l 20(sp),d0
    967e:	movea.w a0,a0
    9680:	move.w a0,6(sp)
    9684:	move.w d1,d1
    9686:	move.w d1,4(sp)
    968a:	move.w d0,d0
    968c:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    9690:	pea 15e7b <main_sludge.c.2f5c5368+0x3a1>
    9696:	jsr 12a04 <KPrintF>
    969c:	addq.l #4,sp

}
    969e:	nop
    96a0:	addq.l #8,sp
    96a2:	rts

000096a4 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    96a4:	pea 15e9e <main_sludge.c.2f5c5368+0x3c4>
    96aa:	jsr 12a04 <KPrintF>
    96b0:	addq.l #4,sp
}
    96b2:	nop
    96b4:	rts

000096b6 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    96b6:	pea 19cf6 <snapshotTextureName>
    96bc:	pea 1 <_start+0x1>
    96c0:	jsr 1518 <deleteTextures>
    96c6:	addq.l #8,sp
	snapshotTextureName = 0;
    96c8:	clr.l 19cf6 <snapshotTextureName>
}
    96ce:	nop
    96d0:	rts

000096d2 <reserveBackdrop>:

BOOL reserveBackdrop () {
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    96d2:	move.l 19ce8 <sceneHeight>,d0
    96d8:	move.l d0,d1
    96da:	move.l 19ce4 <sceneWidth>,d0
    96e0:	move.l d1,-(sp)
    96e2:	move.l d0,-(sp)
    96e4:	jsr 1220 <CstReserveBackdrop>
    96ea:	addq.l #8,sp
}
    96ec:	rts

000096ee <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    96ee:	jsr 95b0 <killBackDrop>
	killParallax ();
    96f4:	jsr 95d8 <killParallax>
	killZBuffer ();
    96fa:	jsr 1b88 <killZBuffer>
	sceneWidth = x;
    9700:	move.l 4(sp),d0
    9704:	move.l d0,19ce4 <sceneWidth>
	sceneHeight = y;	
    970a:	move.l 8(sp),d0
    970e:	move.l d0,19ce8 <sceneHeight>
	return reserveBackdrop();
    9714:	jsr 96d2 <reserveBackdrop>
}
    971a:	rts

0000971c <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    971c:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    971e:	move.l 12(sp),-(sp)
    9722:	jsr 6bc <get2bytes>
    9728:	addq.l #4,sp
    972a:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    972e:	move.l 12(sp),-(sp)
    9732:	jsr 6bc <get2bytes>
    9738:	addq.l #4,sp
    973a:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    973c:	moveq #1,d0
}
    973e:	addq.l #8,sp
    9740:	rts

00009742 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    9742:	   /-> lea -12(sp),sp
    9746:	   |   move.l a6,-(sp)
    9748:	   |   move.l d2,-(sp)
	if (me) {
    974a:	   |   tst.l 24(sp)
    974e:	/--|-- beq.w 97e4 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    9752:	|  |   movea.l 24(sp),a0
    9756:	|  |   move.l 42(a0),d0
    975a:	|  |   move.l 28(sp),-(sp)
    975e:	|  |   move.l d0,-(sp)
    9760:	|  \-- jsr 9742 <saveParallaxRecursive>(pc)
    9764:	|      addq.l #8,sp
		FPutC (fp, 1);
    9766:	|      move.l 28(sp),16(sp)
    976c:	|      moveq #1,d0
    976e:	|      move.l d0,12(sp)
    9772:	|      move.l 19c54 <DOSBase>,d0
    9778:	|      movea.l d0,a6
    977a:	|      move.l 16(sp),d1
    977e:	|      move.l 12(sp),d2
    9782:	|      jsr -312(a6)
    9786:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    978a:	|      movea.l 24(sp),a0
    978e:	|      move.w 28(a0),d0
    9792:	|      move.w d0,d0
    9794:	|      andi.l #65535,d0
    979a:	|      move.l 28(sp),-(sp)
    979e:	|      move.l d0,-(sp)
    97a0:	|      jsr 8d0 <put2bytes>
    97a6:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    97a8:	|      movea.l 24(sp),a0
    97ac:	|      move.w 30(a0),d0
    97b0:	|      move.w d0,d0
    97b2:	|      andi.l #65535,d0
    97b8:	|      move.l 28(sp),-(sp)
    97bc:	|      move.l d0,-(sp)
    97be:	|      jsr 8d0 <put2bytes>
    97c4:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    97c6:	|      movea.l 24(sp),a0
    97ca:	|      move.w 32(a0),d0
    97ce:	|      move.w d0,d0
    97d0:	|      andi.l #65535,d0
    97d6:	|      move.l 28(sp),-(sp)
    97da:	|      move.l d0,-(sp)
    97dc:	|      jsr 8d0 <put2bytes>
    97e2:	|      addq.l #8,sp
	}
}
    97e4:	\----> nop
    97e6:	       move.l (sp)+,d2
    97e8:	       movea.l (sp)+,a6
    97ea:	       lea 12(sp),sp
    97ee:	       rts

000097f0 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    97f0:	pea 15ed7 <main_sludge.c.2f5c5368+0x3fd>
    97f6:	jsr 12a04 <KPrintF>
    97fc:	addq.l #4,sp
	return TRUE;
    97fe:	moveq #1,d0
    9800:	rts

00009802 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    9802:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    9804:	             move.l 19cfa <allObjectTypes>,(sp)

	while (huntType) {
    980a:	      /----- bra.s 9822 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    980c:	   /--|----> movea.l (sp),a0
    980e:	   |  |      move.l 4(a0),d0
    9812:	   |  |      cmp.l 8(sp),d0
    9816:	   |  |  /-- bne.s 981c <findObjectType+0x1a>
    9818:	   |  |  |   move.l (sp),d0
    981a:	/--|--|--|-- bra.s 9832 <findObjectType+0x30>
		huntType = huntType -> next;
    981c:	|  |  |  \-> movea.l (sp),a0
    981e:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    9822:	|  |  \----> tst.l (sp)
    9824:	|  \-------- bne.s 980c <findObjectType+0xa>
	}

	return loadObjectType (i);
    9826:	|            move.l 8(sp),-(sp)
    982a:	|            jsr 98f2 <loadObjectType>
    9830:	|            addq.l #4,sp
}
    9832:	\----------> addq.l #4,sp
    9834:	             rts

00009836 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    9836:	             lea -12(sp),sp
	int i, num = 0;
    983a:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    983e:	             move.l 20(sp),-(sp)
    9842:	             jsr 9802 <findObjectType>
    9848:	             addq.l #4,sp
    984a:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    984c:	             clr.l 8(sp)
    9850:	   /-------- bra.s 9886 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    9852:	/--|-------> movea.l (sp),a0
    9854:	|  |         move.l 38(a0),d1
    9858:	|  |         move.l 8(sp),d0
    985c:	|  |         lsl.l #3,d0
    985e:	|  |         movea.l d1,a0
    9860:	|  |         adda.l d0,a0
    9862:	|  |         move.l (a0),d0
    9864:	|  |         cmp.l 16(sp),d0
    9868:	|  |  /----- bne.s 9882 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    986a:	|  |  |      movea.l (sp),a0
    986c:	|  |  |      move.l 38(a0),d1
    9870:	|  |  |      move.l 8(sp),d0
    9874:	|  |  |      lsl.l #3,d0
    9876:	|  |  |      movea.l d1,a0
    9878:	|  |  |      adda.l d0,a0
    987a:	|  |  |      move.l 4(a0),4(sp)
			break;
    9880:	|  |  |  /-- bra.s 9892 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    9882:	|  |  \--|-> addq.l #1,8(sp)
    9886:	|  \-----|-> movea.l (sp),a0
    9888:	|        |   move.l 16(a0),d0
    988c:	|        |   cmp.l 8(sp),d0
    9890:	\--------|-- bgt.s 9852 <getCombinationFunction+0x1c>
		}
	}

	return num;
    9892:	         \-> move.l 4(sp),d0
}
    9896:	             lea 12(sp),sp
    989a:	             rts

0000989c <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    989c:	moveq #1,d0
}
    989e:	rts

000098a0 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    98a0:	subq.l #8,sp
    98a2:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    98a4:	move.l 16(sp),-(sp)
    98a8:	jsr 6bc <get2bytes>
    98ae:	addq.l #4,sp
    98b0:	move.l d0,-(sp)
    98b2:	jsr 98f2 <loadObjectType>
    98b8:	addq.l #4,sp
    98ba:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    98be:	movea.l 8(sp),a0
    98c2:	move.l (a0),4(sp)
    98c6:	move.l 19c4c <SysBase>,d0
    98cc:	movea.l d0,a6
    98ce:	movea.l 4(sp),a1
    98d2:	jsr -690(a6)
	r -> screenName = readString (fp);
    98d6:	move.l 16(sp),-(sp)
    98da:	jsr b02 <readString>
    98e0:	addq.l #4,sp
    98e2:	movea.l 8(sp),a0
    98e6:	move.l d0,(a0)
	return r;
    98e8:	move.l 8(sp),d0
}
    98ec:	movea.l (sp)+,a6
    98ee:	addq.l #8,sp
    98f0:	rts

000098f2 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    98f2:	          lea -84(sp),sp
    98f6:	          move.l a6,-(sp)
    98f8:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    98fa:	          moveq #42,d0
    98fc:	          move.l d0,84(sp)
    9900:	          clr.l 80(sp)
    9904:	          move.l 19c4c <SysBase>,d0
    990a:	          movea.l d0,a6
    990c:	          move.l 84(sp),d0
    9910:	          move.l 80(sp),d1
    9914:	          jsr -684(a6)
    9918:	          move.l d0,76(sp)
    991c:	          move.l 76(sp),d0
    9920:	          move.l d0,72(sp)

    if (newType) {
    9924:	/-------- beq.w 9b9e <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    9928:	|         move.l 96(sp),-(sp)
    992c:	|         jsr 4534 <openObjectSlice>
    9932:	|         addq.l #4,sp
    9934:	|         tst.w d0
    9936:	+-------- beq.w 9b9e <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    993a:	|         move.l 19c34 <bigDataFile>,d0
    9940:	|         move.l d0,-(sp)
    9942:	|         jsr 6bc <get2bytes>
    9948:	|         addq.l #4,sp
    994a:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    994e:	|         move.l 19c34 <bigDataFile>,64(sp)
    9956:	|         move.l 19c54 <DOSBase>,d0
    995c:	|         movea.l d0,a6
    995e:	|         move.l 64(sp),d1
    9962:	|         jsr -306(a6)
    9966:	|         move.l d0,60(sp)
    996a:	|         move.l 60(sp),d0
    996e:	|         move.l d0,d0
    9970:	|         movea.l 72(sp),a0
    9974:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    9978:	|         move.l 19c34 <bigDataFile>,56(sp)
    9980:	|         move.l 19c54 <DOSBase>,d0
    9986:	|         movea.l d0,a6
    9988:	|         move.l 56(sp),d1
    998c:	|         jsr -306(a6)
    9990:	|         move.l d0,52(sp)
    9994:	|         move.l 52(sp),d0
    9998:	|         move.l d0,d0
    999a:	|         movea.l 72(sp),a0
    999e:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    99a2:	|         move.l 19c34 <bigDataFile>,48(sp)
    99aa:	|         move.l 19c54 <DOSBase>,d0
    99b0:	|         movea.l d0,a6
    99b2:	|         move.l 48(sp),d1
    99b6:	|         jsr -306(a6)
    99ba:	|         move.l d0,44(sp)
    99be:	|         move.l 44(sp),d0
    99c2:	|         move.l d0,d0
    99c4:	|         movea.l 72(sp),a0
    99c8:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    99cc:	|         move.l 19c34 <bigDataFile>,40(sp)
    99d4:	|         move.l 19c54 <DOSBase>,d0
    99da:	|         movea.l d0,a6
    99dc:	|         move.l 40(sp),d1
    99e0:	|         jsr -306(a6)
    99e4:	|         move.l d0,36(sp)
    99e8:	|         move.l 36(sp),d0
    99ec:	|         movea.l 72(sp),a0
    99f0:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    99f4:	|         move.l 19c34 <bigDataFile>,32(sp)
    99fc:	|         move.l 19c54 <DOSBase>,d0
    9a02:	|         movea.l d0,a6
    9a04:	|         move.l 32(sp),d1
    9a08:	|         jsr -306(a6)
    9a0c:	|         move.l d0,28(sp)
    9a10:	|         move.l 28(sp),d0
    9a14:	|         movea.l 72(sp),a0
    9a18:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    9a1c:	|         move.l 19c34 <bigDataFile>,d0
    9a22:	|         move.l d0,-(sp)
    9a24:	|         jsr 718 <get4bytes>
    9a2a:	|         addq.l #4,sp
    9a2c:	|         movea.l 72(sp),a0
    9a30:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    9a34:	|         move.l 19c34 <bigDataFile>,d0
    9a3a:	|         move.l d0,-(sp)
    9a3c:	|         jsr 6bc <get2bytes>
    9a42:	|         addq.l #4,sp
    9a44:	|         movea.l 72(sp),a0
    9a48:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    9a4c:	|         move.l 19c34 <bigDataFile>,24(sp)
    9a54:	|         move.l 19c54 <DOSBase>,d0
    9a5a:	|         movea.l d0,a6
    9a5c:	|         move.l 24(sp),d1
    9a60:	|         jsr -306(a6)
    9a64:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    9a68:	|         move.l 19c34 <bigDataFile>,d0
    9a6e:	|         move.l d0,-(sp)
    9a70:	|         jsr 7d8 <getFloat>
    9a76:	|         addq.l #4,sp
            getFloat(bigDataFile);
    9a78:	|         move.l 19c34 <bigDataFile>,d0
    9a7e:	|         move.l d0,-(sp)
    9a80:	|         jsr 7d8 <getFloat>
    9a86:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    9a88:	|         move.l 19c34 <bigDataFile>,d0
    9a8e:	|         move.l d0,-(sp)
    9a90:	|         jsr 6bc <get2bytes>
    9a96:	|         addq.l #4,sp
    9a98:	|         move.l d0,d0
    9a9a:	|         movea.l 72(sp),a0
    9a9e:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    9aa2:	|         move.l 19c34 <bigDataFile>,d0
    9aa8:	|         move.l d0,-(sp)
    9aaa:	|         jsr 6bc <get2bytes>
    9ab0:	|         addq.l #4,sp
    9ab2:	|         movea.l 72(sp),a0
    9ab6:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    9aba:	|         movea.l 72(sp),a0
    9abe:	|         move.l 16(a0),d0
    9ac2:	|  /----- beq.s 9af4 <loadObjectType+0x202>
    9ac4:	|  |      movea.l 72(sp),a0
    9ac8:	|  |      move.l 16(a0),d0
    9acc:	|  |      lsl.l #3,d0
    9ace:	|  |      move.l d0,16(sp)
    9ad2:	|  |      clr.l 12(sp)
    9ad6:	|  |      move.l 19c4c <SysBase>,d0
    9adc:	|  |      movea.l d0,a6
    9ade:	|  |      move.l 16(sp),d0
    9ae2:	|  |      move.l 12(sp),d1
    9ae6:	|  |      jsr -684(a6)
    9aea:	|  |      move.l d0,8(sp)
    9aee:	|  |      move.l 8(sp),d0
    9af2:	|  |  /-- bra.s 9af6 <loadObjectType+0x204>
    9af4:	|  \--|-> moveq #0,d0
    9af6:	|     \-> movea.l 72(sp),a0
    9afa:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    9afe:	|         clr.l 88(sp)
    9b02:	|     /-- bra.s 9b52 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    9b04:	|  /--|-> move.l 19c34 <bigDataFile>,d1
    9b0a:	|  |  |   movea.l 72(sp),a0
    9b0e:	|  |  |   movea.l 38(a0),a0
    9b12:	|  |  |   move.l 88(sp),d0
    9b16:	|  |  |   lsl.l #3,d0
    9b18:	|  |  |   lea (0,a0,d0.l),a2
    9b1c:	|  |  |   move.l d1,-(sp)
    9b1e:	|  |  |   jsr 6bc <get2bytes>
    9b24:	|  |  |   addq.l #4,sp
    9b26:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    9b28:	|  |  |   move.l 19c34 <bigDataFile>,d1
    9b2e:	|  |  |   movea.l 72(sp),a0
    9b32:	|  |  |   movea.l 38(a0),a0
    9b36:	|  |  |   move.l 88(sp),d0
    9b3a:	|  |  |   lsl.l #3,d0
    9b3c:	|  |  |   lea (0,a0,d0.l),a2
    9b40:	|  |  |   move.l d1,-(sp)
    9b42:	|  |  |   jsr 6bc <get2bytes>
    9b48:	|  |  |   addq.l #4,sp
    9b4a:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    9b4e:	|  |  |   addq.l #1,88(sp)
    9b52:	|  |  \-> movea.l 72(sp),a0
    9b56:	|  |      move.l 16(a0),d0
    9b5a:	|  |      cmp.l 88(sp),d0
    9b5e:	|  \----- bgt.s 9b04 <loadObjectType+0x212>
            }
            finishAccess();
    9b60:	|         jsr 4364 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    9b66:	|         move.l 68(sp),-(sp)
    9b6a:	|         jsr 436e <getNumberedString>
    9b70:	|         addq.l #4,sp
    9b72:	|         movea.l 72(sp),a0
    9b76:	|         move.l d0,(a0)
            newType->objectNum = i;
    9b78:	|         movea.l 72(sp),a0
    9b7c:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    9b82:	|         move.l 19cfa <allObjectTypes>,d0
    9b88:	|         movea.l 72(sp),a0
    9b8c:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    9b90:	|         move.l 72(sp),19cfa <allObjectTypes>
            return newType;
    9b98:	|         move.l 72(sp),d0
    9b9c:	|     /-- bra.s 9ba0 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    9b9e:	\-----|-> moveq #0,d0
}
    9ba0:	      \-> movea.l (sp)+,a2
    9ba2:	          movea.l (sp)+,a6
    9ba4:	          lea 84(sp),sp
    9ba8:	          rts

00009baa <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    9baa:	             lea -16(sp),sp
    9bae:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    9bb0:	             move.l #105722,16(sp)

	while (* huntRegion) {
    9bb8:	   /-------- bra.s 9c2c <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    9bba:	/--|-------> movea.l 16(sp),a0
    9bbe:	|  |         move.l (a0),d0
    9bc0:	|  |         cmp.l 24(sp),d0
    9bc4:	|  |  /----- bne.s 9c1e <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    9bc6:	|  |  |      movea.l 24(sp),a0
    9bca:	|  |  |      move.l 8(a0),d0
    9bce:	|  |  |      movea.l 16(sp),a0
    9bd2:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    9bd4:	|  |  |      movea.l 24(sp),a0
    9bd8:	|  |  |      move.l 38(a0),12(sp)
    9bde:	|  |  |      move.l 19c4c <SysBase>,d0
    9be4:	|  |  |      movea.l d0,a6
    9be6:	|  |  |      movea.l 12(sp),a1
    9bea:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    9bee:	|  |  |      movea.l 24(sp),a0
    9bf2:	|  |  |      move.l (a0),8(sp)
    9bf6:	|  |  |      move.l 19c4c <SysBase>,d0
    9bfc:	|  |  |      movea.l d0,a6
    9bfe:	|  |  |      movea.l 8(sp),a1
    9c02:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    9c06:	|  |  |      move.l 24(sp),4(sp)
    9c0c:	|  |  |      move.l 19c4c <SysBase>,d0
    9c12:	|  |  |      movea.l d0,a6
    9c14:	|  |  |      movea.l 4(sp),a1
    9c18:	|  |  |      jsr -690(a6)
			return;
    9c1c:	|  |  |  /-- bra.s 9c42 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    9c1e:	|  |  \--|-> movea.l 16(sp),a0
    9c22:	|  |     |   move.l (a0),d0
    9c24:	|  |     |   move.l d0,d1
    9c26:	|  |     |   addq.l #8,d1
    9c28:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    9c2c:	|  \-----|-> movea.l 16(sp),a0
    9c30:	|        |   move.l (a0),d0
    9c32:	\--------|-- bne.s 9bba <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    9c34:	         |   pea 15efe <main_sludge.c.2f5c5368+0x424>
    9c3a:	         |   jsr 12a04 <KPrintF>
    9c40:	         |   addq.l #4,sp
}
    9c42:	         \-> movea.l (sp)+,a6
    9c44:	             lea 16(sp),sp
    9c48:	             rts

00009c4a <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    9c4a:	movea.l 4(sp),a0
    9c4e:	move.l 4(a0),d0
    9c52:	move.l 8(sp),-(sp)
    9c56:	move.l d0,-(sp)
    9c58:	jsr 8d0 <put2bytes>
    9c5e:	addq.l #8,sp
	writeString (r -> screenName, fp);
    9c60:	movea.l 4(sp),a0
    9c64:	move.l (a0),d0
    9c66:	move.l 8(sp),-(sp)
    9c6a:	move.l d0,-(sp)
    9c6c:	jsr bd8 <writeString>
    9c72:	addq.l #8,sp
    9c74:	nop
    9c76:	rts

00009c78 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    9c78:	                         lea -112(sp),sp
    9c7c:	                         move.l a6,-(sp)
    9c7e:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    9c80:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    9c84:	                         move.w 19d00 <saveEncoding>,d0
    9c8a:	                  /----- beq.s 9c94 <fileToStack+0x1c>
    9c8c:	                  |      move.l #89892,d0
    9c92:	                  |  /-- bra.s 9c9a <fileToStack+0x22>
    9c94:	                  \--|-> move.l #89918,d0
    9c9a:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    9c9e:	                         move.l 124(sp),112(sp)
    9ca4:	                         move.l #1005,108(sp)
    9cac:	                         move.l 19c54 <DOSBase>,d0
    9cb2:	                         movea.l d0,a6
    9cb4:	                         move.l 112(sp),d1
    9cb8:	                         move.l 108(sp),d2
    9cbc:	                         jsr -30(a6)
    9cc0:	                         move.l d0,104(sp)
    9cc4:	                         move.l 104(sp),d0
    9cc8:	                         move.l d0,100(sp)
    if (!fp) {
    9ccc:	                     /-- bne.s 9ce6 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    9cce:	                     |   move.l 124(sp),-(sp)
    9cd2:	                     |   pea 15f55 <main_sludge.c.2f5c5368+0x47b>
    9cd8:	                     |   jsr 12a04 <KPrintF>
    9cde:	                     |   addq.l #8,sp
        return FALSE;
    9ce0:	                     |   clr.w d0
    9ce2:	/--------------------|-- bra.w 9fdc <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    9ce6:	|                    \-> move.w 19d00 <saveEncoding>,d0
    9cec:	|                        move.l d0,d0
    9cee:	|                        move.b d0,19cfe <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    9cf4:	|                        move.w 19d00 <saveEncoding>,d0
    9cfa:	|                        lsr.w #8,d0
    9cfc:	|                        move.l d0,d0
    9cfe:	|                        move.b d0,19cff <encode2>

    while (*checker) {
    9d04:	|                 /----- bra.s 9d68 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    9d06:	|              /--|----> move.l 100(sp),30(sp)
    9d0c:	|              |  |      move.l 19c54 <DOSBase>,d0
    9d12:	|              |  |      movea.l d0,a6
    9d14:	|              |  |      move.l 30(sp),d1
    9d18:	|              |  |      jsr -306(a6)
    9d1c:	|              |  |      move.l d0,26(sp)
    9d20:	|              |  |      move.l 26(sp),d1
    9d24:	|              |  |      movea.l 116(sp),a0
    9d28:	|              |  |      move.b (a0),d0
    9d2a:	|              |  |      ext.w d0
    9d2c:	|              |  |      movea.w d0,a0
    9d2e:	|              |  |      cmpa.l d1,a0
    9d30:	|              |  |  /-- beq.s 9d64 <fileToStack+0xec>
            Close(fp);
    9d32:	|              |  |  |   move.l 100(sp),22(sp)
    9d38:	|              |  |  |   move.l 19c54 <DOSBase>,d0
    9d3e:	|              |  |  |   movea.l d0,a6
    9d40:	|              |  |  |   move.l 22(sp),d1
    9d44:	|              |  |  |   jsr -36(a6)
    9d48:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    9d4c:	|              |  |  |   move.l 124(sp),-(sp)
    9d50:	|              |  |  |   pea 15f62 <main_sludge.c.2f5c5368+0x488>
    9d56:	|              |  |  |   jsr 12a04 <KPrintF>
    9d5c:	|              |  |  |   addq.l #8,sp
            return FALSE;
    9d5e:	|              |  |  |   clr.w d0
    9d60:	+--------------|--|--|-- bra.w 9fdc <fileToStack+0x364>
        }
        checker++;
    9d64:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    9d68:	|              |  \----> movea.l 116(sp),a0
    9d6c:	|              |         move.b (a0),d0
    9d6e:	|              \-------- bne.s 9d06 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    9d70:	|                        move.w 19d00 <saveEncoding>,d0
    9d76:	|  /-------------------- beq.s 9dea <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    9d78:	|  |                     move.l 100(sp),-(sp)
    9d7c:	|  |                     jsr 9fe6 <readStringEncoded>
    9d82:	|  |                     addq.l #4,sp
    9d84:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    9d88:	|  |                     pea 15fa3 <main_sludge.c.2f5c5368+0x4c9>
    9d8e:	|  |                     move.l 100(sp),-(sp)
    9d92:	|  |                     jsr fe5c <strcmp>
    9d98:	|  |                     addq.l #8,sp
    9d9a:	|  |                     tst.l d0
    9d9c:	|  |                 /-- beq.s 9dd0 <fileToStack+0x158>
            Close(fp);
    9d9e:	|  |                 |   move.l 100(sp),88(sp)
    9da4:	|  |                 |   move.l 19c54 <DOSBase>,d0
    9daa:	|  |                 |   movea.l d0,a6
    9dac:	|  |                 |   move.l 88(sp),d1
    9db0:	|  |                 |   jsr -36(a6)
    9db4:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    9db8:	|  |                 |   move.l 124(sp),-(sp)
    9dbc:	|  |                 |   pea 15fb2 <main_sludge.c.2f5c5368+0x4d8>
    9dc2:	|  |                 |   jsr 12a04 <KPrintF>
    9dc8:	|  |                 |   addq.l #8,sp
            return FALSE;
    9dca:	|  |                 |   clr.w d0
    9dcc:	+--|-----------------|-- bra.w 9fdc <fileToStack+0x364>
        }
        FreeVec(checker);
    9dd0:	|  |                 \-> move.l 96(sp),92(sp)
    9dd6:	|  |                     move.l 19c4c <SysBase>,d0
    9ddc:	|  |                     movea.l d0,a6
    9dde:	|  |                     movea.l 92(sp),a1
    9de2:	|  |                     jsr -690(a6)
        checker = NULL;
    9de6:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    9dea:	|  >-------------------> move.w 19d00 <saveEncoding>,d0
    9df0:	|  |     /-------------- beq.w 9f24 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    9df4:	|  |     |               move.l 100(sp),76(sp)
    9dfa:	|  |     |               move.l 19c54 <DOSBase>,d0
    9e00:	|  |     |               movea.l d0,a6
    9e02:	|  |     |               move.l 76(sp),d1
    9e06:	|  |     |               jsr -306(a6)
    9e0a:	|  |     |               move.l d0,72(sp)
    9e0e:	|  |     |               move.l 72(sp),d0
    9e12:	|  |     |               move.b 19cfe <encode1>,d1
    9e18:	|  |     |               ext.w d1
    9e1a:	|  |     |               ext.l d1
    9e1c:	|  |     |               move.l d0,d2
    9e1e:	|  |     |               eor.l d1,d2
    9e20:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    9e24:	|  |     |               moveq #-1,d0
    9e26:	|  |     |               cmp.l 68(sp),d0
    9e2a:	|  |  /--|-------------- beq.w 9fba <fileToStack+0x342>

            char i = (char) tmp;
    9e2e:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    9e34:	|  |  |  |               move.b 67(sp),d0
    9e38:	|  |  |  |               ext.w d0
    9e3a:	|  |  |  |               movea.w d0,a0
    9e3c:	|  |  |  |               moveq #2,d2
    9e3e:	|  |  |  |               cmp.l a0,d2
    9e40:	|  |  |  |     /-------- beq.s 9ebc <fileToStack+0x244>
    9e42:	|  |  |  |     |         moveq #2,d0
    9e44:	|  |  |  |     |         cmp.l a0,d0
    9e46:	|  |  |  |  /--|-------- blt.w 9ef2 <fileToStack+0x27a>
    9e4a:	|  |  |  |  |  |         cmpa.w #0,a0
    9e4e:	|  |  |  |  |  |     /-- beq.s 9e5a <fileToStack+0x1e2>
    9e50:	|  |  |  |  |  |     |   moveq #1,d2
    9e52:	|  |  |  |  |  |     |   cmp.l a0,d2
    9e54:	|  |  |  |  |  |  /--|-- beq.s 9e96 <fileToStack+0x21e>
    9e56:	|  |  |  |  +--|--|--|-- bra.w 9ef2 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    9e5a:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    9e5e:	|  |  |  |  |  |  |      jsr 9fe6 <readStringEncoded>
    9e64:	|  |  |  |  |  |  |      addq.l #4,sp
    9e66:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    9e6a:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    9e6e:	|  |  |  |  |  |  |      lea 14(sp),a0
    9e72:	|  |  |  |  |  |  |      move.l a0,-(sp)
    9e74:	|  |  |  |  |  |  |      jsr 10bd2 <makeTextVar>
    9e7a:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    9e7c:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    9e82:	|  |  |  |  |  |  |      move.l 19c4c <SysBase>,d0
    9e88:	|  |  |  |  |  |  |      movea.l d0,a6
    9e8a:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    9e8e:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    9e92:	|  |  |  |  |  |  |  /-- bra.w 9f4a <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    9e96:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    9e9a:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    9ea0:	|  |  |  |  |  |     |   addq.l #4,sp
    9ea2:	|  |  |  |  |  |     |   move.l d0,-(sp)
    9ea4:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    9ea8:	|  |  |  |  |  |     |   lea 18(sp),a0
    9eac:	|  |  |  |  |  |     |   move.l a0,-(sp)
    9eae:	|  |  |  |  |  |     |   jsr 112a2 <setVariable>
    9eb4:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    9eb8:	|  |  |  |  |  |     +-- bra.w 9f4a <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    9ebc:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    9ec2:	|  |  |  |  |        |   move.l 19c54 <DOSBase>,d0
    9ec8:	|  |  |  |  |        |   movea.l d0,a6
    9eca:	|  |  |  |  |        |   move.l 62(sp),d1
    9ece:	|  |  |  |  |        |   jsr -306(a6)
    9ed2:	|  |  |  |  |        |   move.l d0,58(sp)
    9ed6:	|  |  |  |  |        |   move.l 58(sp),d0
    9eda:	|  |  |  |  |        |   move.l d0,-(sp)
    9edc:	|  |  |  |  |        |   pea 1 <_start+0x1>
    9ee0:	|  |  |  |  |        |   lea 18(sp),a0
    9ee4:	|  |  |  |  |        |   move.l a0,-(sp)
    9ee6:	|  |  |  |  |        |   jsr 112a2 <setVariable>
    9eec:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    9ef0:	|  |  |  |  |        +-- bra.s 9f4a <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    9ef2:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    9ef6:	|  |  |  |           |   pea 16034 <main_sludge.c.2f5c5368+0x55a>
    9efc:	|  |  |  |           |   jsr 12a04 <KPrintF>
    9f02:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    9f04:	|  |  |  |           |   move.l 100(sp),46(sp)
    9f0a:	|  |  |  |           |   move.l 19c54 <DOSBase>,d0
    9f10:	|  |  |  |           |   movea.l d0,a6
    9f12:	|  |  |  |           |   move.l 46(sp),d1
    9f16:	|  |  |  |           |   jsr -36(a6)
    9f1a:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    9f1e:	|  |  |  |           |   clr.w d0
    9f20:	+--|--|--|-----------|-- bra.w 9fdc <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    9f24:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    9f28:	|  |  |              |   jsr a0ac <readTextPlain>
    9f2e:	|  |  |              |   addq.l #4,sp
    9f30:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    9f34:	|  |  |        /-----|-- beq.w 9fbe <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    9f38:	|  |  |        |     |   move.l 80(sp),-(sp)
    9f3c:	|  |  |        |     |   lea 14(sp),a0
    9f40:	|  |  |        |     |   move.l a0,-(sp)
    9f42:	|  |  |        |     |   jsr 10bd2 <makeTextVar>
    9f48:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    9f4a:	|  |  |        |     \-> movea.l 128(sp),a0
    9f4e:	|  |  |        |         move.l (a0),d0
    9f50:	|  |  |        |  /----- bne.s 9f80 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    9f52:	|  |  |        |  |      move.l 128(sp),d0
    9f56:	|  |  |        |  |      move.l d0,-(sp)
    9f58:	|  |  |        |  |      lea 14(sp),a0
    9f5c:	|  |  |        |  |      move.l a0,-(sp)
    9f5e:	|  |  |        |  |      jsr 10272 <addVarToStackQuick>
    9f64:	|  |  |        |  |      addq.l #8,sp
    9f66:	|  |  |        |  |      tst.w d0
    9f68:	|  |  |        |  |  /-- bne.s 9f6e <fileToStack+0x2f6>
    9f6a:	|  |  |        |  |  |   clr.w d0
    9f6c:	+--|--|--------|--|--|-- bra.s 9fdc <fileToStack+0x364>
            sH->last = sH->first;
    9f6e:	|  |  |        |  |  \-> movea.l 128(sp),a0
    9f72:	|  |  |        |  |      move.l (a0),d0
    9f74:	|  |  |        |  |      movea.l 128(sp),a0
    9f78:	|  |  |        |  |      move.l d0,4(a0)
    9f7c:	|  +--|--------|--|----- bra.w 9dea <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    9f80:	|  |  |        |  \----> movea.l 128(sp),a0
    9f84:	|  |  |        |         move.l 4(a0),d0
    9f88:	|  |  |        |         addq.l #8,d0
    9f8a:	|  |  |        |         move.l d0,-(sp)
    9f8c:	|  |  |        |         lea 14(sp),a0
    9f90:	|  |  |        |         move.l a0,-(sp)
    9f92:	|  |  |        |         jsr 10272 <addVarToStackQuick>
    9f98:	|  |  |        |         addq.l #8,sp
    9f9a:	|  |  |        |         tst.w d0
    9f9c:	|  |  |        |     /-- bne.s 9fa2 <fileToStack+0x32a>
    9f9e:	|  |  |        |     |   clr.w d0
    9fa0:	+--|--|--------|-----|-- bra.s 9fdc <fileToStack+0x364>
            sH->last = sH->last->next;
    9fa2:	|  |  |        |     \-> movea.l 128(sp),a0
    9fa6:	|  |  |        |         movea.l 4(a0),a0
    9faa:	|  |  |        |         move.l 8(a0),d0
    9fae:	|  |  |        |         movea.l 128(sp),a0
    9fb2:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    9fb6:	|  \--|--------|-------- bra.w 9dea <fileToStack+0x172>
            if (tmp == -1) break;
    9fba:	|     \--------|-------> nop
    9fbc:	|              |     /-- bra.s 9fc0 <fileToStack+0x348>
            if (!line) break;
    9fbe:	|              \-----|-> nop
        }
    }
    Close(fp);
    9fc0:	|                    \-> move.l 100(sp),38(sp)
    9fc6:	|                        move.l 19c54 <DOSBase>,d0
    9fcc:	|                        movea.l d0,a6
    9fce:	|                        move.l 38(sp),d1
    9fd2:	|                        jsr -36(a6)
    9fd6:	|                        move.l d0,34(sp)
    return TRUE;
    9fda:	|                        moveq #1,d0
}
    9fdc:	\----------------------> move.l (sp)+,d2
    9fde:	                         movea.l (sp)+,a6
    9fe0:	                         lea 112(sp),sp
    9fe4:	                         rts

00009fe6 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    9fe6:	          lea -32(sp),sp
    9fea:	          move.l a6,-(sp)
    9fec:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    9fee:	          move.l 44(sp),-(sp)
    9ff2:	          jsr 6bc <get2bytes>
    9ff8:	          addq.l #4,sp
    9ffa:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    9ffe:	          move.l 32(sp),d0
    a002:	          addq.l #1,d0
    a004:	          move.l d0,28(sp)
    a008:	          clr.l 24(sp)
    a00c:	          move.l 19c4c <SysBase>,d0
    a012:	          movea.l d0,a6
    a014:	          move.l 28(sp),d0
    a018:	          move.l 24(sp),d1
    a01c:	          jsr -684(a6)
    a020:	          move.l d0,20(sp)
    a024:	          move.l 20(sp),d0
    a028:	          move.l d0,16(sp)
    if (!s) return NULL;
    a02c:	      /-- bne.s a032 <readStringEncoded+0x4c>
    a02e:	      |   moveq #0,d0
    a030:	/-----|-- bra.s a0a2 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    a032:	|     \-> clr.l 36(sp)
    a036:	|     /-- bra.s a088 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    a038:	|  /--|-> move.l 44(sp),12(sp)
    a03e:	|  |  |   move.l 19c54 <DOSBase>,d0
    a044:	|  |  |   movea.l d0,a6
    a046:	|  |  |   move.l 12(sp),d1
    a04a:	|  |  |   jsr -306(a6)
    a04e:	|  |  |   move.l d0,8(sp)
    a052:	|  |  |   move.l 8(sp),d0
    a056:	|  |  |   move.l d0,d1
    a058:	|  |  |   move.b 19cfe <encode1>,d2
    a05e:	|  |  |   move.l 36(sp),d0
    a062:	|  |  |   movea.l 16(sp),a0
    a066:	|  |  |   adda.l d0,a0
    a068:	|  |  |   move.b d1,d0
    a06a:	|  |  |   eor.b d2,d0
    a06c:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    a06e:	|  |  |   move.b 19cfe <encode1>,d0
    a074:	|  |  |   move.b d0,d1
    a076:	|  |  |   move.b 19cff <encode2>,d0
    a07c:	|  |  |   add.b d1,d0
    a07e:	|  |  |   move.b d0,19cfe <encode1>
    for (a = 0; a < len; a++) {
    a084:	|  |  |   addq.l #1,36(sp)
    a088:	|  |  \-> move.l 36(sp),d0
    a08c:	|  |      cmp.l 32(sp),d0
    a090:	|  \----- blt.s a038 <readStringEncoded+0x52>
    }
    s[len] = 0;
    a092:	|         move.l 32(sp),d0
    a096:	|         movea.l 16(sp),a0
    a09a:	|         adda.l d0,a0
    a09c:	|         clr.b (a0)
    return s;
    a09e:	|         move.l 16(sp),d0
}
    a0a2:	\-------> move.l (sp)+,d2
    a0a4:	          movea.l (sp)+,a6
    a0a6:	          lea 32(sp),sp
    a0aa:	          rts

0000a0ac <readTextPlain>:

char *readTextPlain(BPTR fp) {
    a0ac:	             lea -104(sp),sp
    a0b0:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    a0b4:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    a0b8:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    a0be:	             move.l 124(sp),106(sp)
    a0c4:	             clr.l 102(sp)
    a0c8:	             clr.l 98(sp)
    a0cc:	             move.l 19c54 <DOSBase>,d0
    a0d2:	             movea.l d0,a6
    a0d4:	             move.l 106(sp),d1
    a0d8:	             move.l 102(sp),d2
    a0dc:	             move.l 98(sp),d3
    a0e0:	             jsr -66(a6)
    a0e4:	             move.l d0,94(sp)
    a0e8:	             move.l 94(sp),d0
    a0ec:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    a0f0:	   /-------- bra.s a134 <readTextPlain+0x88>
        tmp = FGetC(fp);
    a0f2:	/--|-------> move.l 124(sp),22(sp)
    a0f8:	|  |         move.l 19c54 <DOSBase>,d0
    a0fe:	|  |         movea.l d0,a6
    a100:	|  |         move.l 22(sp),d1
    a104:	|  |         jsr -306(a6)
    a108:	|  |         move.l d0,18(sp)
    a10c:	|  |         move.l 18(sp),d0
    a110:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    a114:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    a11a:	|  |         cmpi.b #10,17(sp)
    a120:	|  |  /----- beq.s a12a <readTextPlain+0x7e>
    a122:	|  |  |      moveq #-1,d0
    a124:	|  |  |      cmp.l 110(sp),d0
    a128:	|  |  |  /-- bne.s a130 <readTextPlain+0x84>
            keepGoing = FALSE;
    a12a:	|  |  \--|-> clr.w 114(sp)
    a12e:	|  +-----|-- bra.s a134 <readTextPlain+0x88>
        } else {
            stringSize++;
    a130:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    a134:	|  \-------> tst.w 114(sp)
    a138:	\----------- bne.s a0f2 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    a13a:	             tst.l 116(sp)
    a13e:	         /-- bne.s a14e <readTextPlain+0xa2>
    a140:	         |   moveq #-1,d0
    a142:	         |   cmp.l 110(sp),d0
    a146:	         +-- bne.s a14e <readTextPlain+0xa2>
        return NULL;
    a148:	         |   moveq #0,d0
    a14a:	      /--|-- bra.w a234 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    a14e:	      |  \-> move.l 124(sp),86(sp)
    a154:	      |      move.l 90(sp),82(sp)
    a15a:	      |      moveq #-1,d0
    a15c:	      |      move.l d0,78(sp)
    a160:	      |      move.l 19c54 <DOSBase>,d0
    a166:	      |      movea.l d0,a6
    a168:	      |      move.l 86(sp),d1
    a16c:	      |      move.l 82(sp),d2
    a170:	      |      move.l 78(sp),d3
    a174:	      |      jsr -66(a6)
    a178:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    a17c:	      |      move.l 116(sp),d0
    a180:	      |      addq.l #1,d0
    a182:	      |      move.l d0,70(sp)
    a186:	      |      clr.l 66(sp)
    a18a:	      |      move.l 19c4c <SysBase>,d0
    a190:	      |      movea.l d0,a6
    a192:	      |      move.l 70(sp),d0
    a196:	      |      move.l 66(sp),d1
    a19a:	      |      jsr -684(a6)
    a19e:	      |      move.l d0,62(sp)
    a1a2:	      |      move.l 62(sp),d0
    a1a6:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    a1aa:	      |  /-- bne.s a1b2 <readTextPlain+0x106>
    a1ac:	      |  |   moveq #0,d0
    a1ae:	      +--|-- bra.w a234 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    a1b2:	      |  \-> move.l 124(sp),54(sp)
    a1b8:	      |      move.l 58(sp),50(sp)
    a1be:	      |      moveq #1,d0
    a1c0:	      |      move.l d0,46(sp)
    a1c4:	      |      move.l 116(sp),42(sp)
    a1ca:	      |      move.l 19c54 <DOSBase>,d0
    a1d0:	      |      movea.l d0,a6
    a1d2:	      |      move.l 54(sp),d1
    a1d6:	      |      move.l 50(sp),d2
    a1da:	      |      move.l 46(sp),d3
    a1de:	      |      move.l 42(sp),d4
    a1e2:	      |      jsr -324(a6)
    a1e6:	      |      move.l d0,38(sp)
    a1ea:	      |      move.l 38(sp),d0
    a1ee:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    a1f2:	      |      move.l 34(sp),d0
    a1f6:	      |      cmp.l 116(sp),d0
    a1fa:	      |  /-- beq.s a20a <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    a1fc:	      |  |   pea 16069 <main_sludge.c.2f5c5368+0x58f>
    a202:	      |  |   jsr 12a04 <KPrintF>
    a208:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    a20a:	      |  \-> move.l 124(sp),30(sp)
    a210:	      |      move.l 19c54 <DOSBase>,d0
    a216:	      |      movea.l d0,a6
    a218:	      |      move.l 30(sp),d1
    a21c:	      |      jsr -306(a6)
    a220:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    a224:	      |      move.l 116(sp),d0
    a228:	      |      movea.l 58(sp),a0
    a22c:	      |      adda.l d0,a0
    a22e:	      |      clr.b (a0)
    }

    return reply;
    a230:	      |      move.l 58(sp),d0
}
    a234:	      \----> movem.l (sp)+,d2-d4/a6
    a238:	             lea 104(sp),sp
    a23c:	             rts

0000a23e <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    a23e:	                      lea -144(sp),sp
    a242:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    a246:	                      move.l 160(sp),148(sp)
    a24c:	                      move.l #1006,144(sp)
    a254:	                      move.l 19c54 <DOSBase>,d0
    a25a:	                      movea.l d0,a6
    a25c:	                      move.l 148(sp),d1
    a260:	                      move.l 144(sp),d2
    a264:	                      jsr -30(a6)
    a268:	                      move.l d0,140(sp)
    a26c:	                      move.l 140(sp),d0
    a270:	                      move.l d0,136(sp)

    if (!fp) {
    a274:	                  /-- bne.s a28e <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    a276:	                  |   move.l 160(sp),-(sp)
    a27a:	                  |   pea 1608a <main_sludge.c.2f5c5368+0x5b0>
    a280:	                  |   jsr 12a04 <KPrintF>
    a286:	                  |   addq.l #8,sp
        return FALSE;
    a288:	                  |   clr.w d0
    a28a:	/-----------------|-- bra.w a54a <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    a28e:	|                 \-> movea.l 164(sp),a0
    a292:	|                     movea.l 4(a0),a0
    a296:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    a29a:	|                     move.w 19d00 <saveEncoding>,d0
    a2a0:	|                     move.l d0,d0
    a2a2:	|                     move.b d0,19cfe <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    a2a8:	|                     move.w 19d00 <saveEncoding>,d0
    a2ae:	|                     lsr.w #8,d0
    a2b0:	|                     move.l d0,d0
    a2b2:	|                     move.b d0,19cff <encode2>

    if (saveEncoding) {
    a2b8:	|                     move.w 19d00 <saveEncoding>,d0
    a2be:	|                 /-- beq.s a310 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    a2c0:	|                 |   move.l 136(sp),116(sp)
    a2c6:	|                 |   move.l #89892,112(sp)
    a2ce:	|                 |   moveq #99,d0
    a2d0:	|                 |   not.b d0
    a2d2:	|                 |   add.l sp,d0
    a2d4:	|                 |   addi.l #-144,d0
    a2da:	|                 |   move.l d0,108(sp)
    a2de:	|                 |   move.l 19c54 <DOSBase>,d0
    a2e4:	|                 |   movea.l d0,a6
    a2e6:	|                 |   move.l 116(sp),d1
    a2ea:	|                 |   move.l 112(sp),d2
    a2ee:	|                 |   move.l 108(sp),d3
    a2f2:	|                 |   jsr -354(a6)
    a2f6:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    a2fa:	|                 |   move.l 136(sp),-(sp)
    a2fe:	|                 |   pea 15fa3 <main_sludge.c.2f5c5368+0x4c9>
    a304:	|                 |   jsr a554 <writeStringEncoded>
    a30a:	|                 |   addq.l #8,sp
    a30c:	|  /--------------|-- bra.w a522 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    a310:	|  |              \-> move.l 136(sp),132(sp)
    a316:	|  |                  move.l #89918,128(sp)
    a31e:	|  |                  moveq #99,d1
    a320:	|  |                  not.b d1
    a322:	|  |                  add.l sp,d1
    a324:	|  |                  addi.l #-144,d1
    a32a:	|  |                  move.l d1,124(sp)
    a32e:	|  |                  move.l 19c54 <DOSBase>,d0
    a334:	|  |                  movea.l d0,a6
    a336:	|  |                  move.l 132(sp),d1
    a33a:	|  |                  move.l 128(sp),d2
    a33e:	|  |                  move.l 124(sp),d3
    a342:	|  |                  jsr -354(a6)
    a346:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    a34a:	|  +----------------- bra.w a522 <stackToFile+0x2e4>
        if (saveEncoding) {
    a34e:	|  |  /-------------> move.w 19d00 <saveEncoding>,d0
    a354:	|  |  |     /-------- beq.w a4a6 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    a358:	|  |  |     |         movea.l 152(sp),a0
    a35c:	|  |  |     |         move.l (a0),d0
    a35e:	|  |  |     |         moveq #1,d1
    a360:	|  |  |     |         cmp.l d0,d1
    a362:	|  |  |     |     /-- beq.s a3b2 <stackToFile+0x174>
    a364:	|  |  |     |     |   moveq #3,d1
    a366:	|  |  |     |     |   cmp.l d0,d1
    a368:	|  |  |     |  /--|-- bne.w a474 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    a36c:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    a372:	|  |  |     |  |  |   move.b 19cfe <encode1>,d0
    a378:	|  |  |     |  |  |   ext.w d0
    a37a:	|  |  |     |  |  |   movea.w d0,a0
    a37c:	|  |  |     |  |  |   move.l a0,72(sp)
    a380:	|  |  |     |  |  |   move.l 19c54 <DOSBase>,d0
    a386:	|  |  |     |  |  |   movea.l d0,a6
    a388:	|  |  |     |  |  |   move.l 76(sp),d1
    a38c:	|  |  |     |  |  |   move.l 72(sp),d2
    a390:	|  |  |     |  |  |   jsr -312(a6)
    a394:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    a398:	|  |  |     |  |  |   movea.l 152(sp),a0
    a39c:	|  |  |     |  |  |   move.l 4(a0),d0
    a3a0:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    a3a4:	|  |  |     |  |  |   move.l d0,-(sp)
    a3a6:	|  |  |     |  |  |   jsr a554 <writeStringEncoded>
    a3ac:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    a3ae:	|  |  |  /--|--|--|-- bra.w a518 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    a3b2:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    a3b6:	|  |  |  |  |  |      move.l 4(a0),d0
    a3ba:	|  |  |  |  |  |  /-- bmi.s a42a <stackToFile+0x1ec>
    a3bc:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    a3c0:	|  |  |  |  |  |  |   move.l 4(a0),d0
    a3c4:	|  |  |  |  |  |  |   cmpi.l #255,d0
    a3ca:	|  |  |  |  |  |  +-- bgt.s a42a <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    a3cc:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    a3d2:	|  |  |  |  |  |  |   move.b 19cfe <encode1>,d0
    a3d8:	|  |  |  |  |  |  |   eori.b #2,d0
    a3dc:	|  |  |  |  |  |  |   ext.w d0
    a3de:	|  |  |  |  |  |  |   movea.w d0,a0
    a3e0:	|  |  |  |  |  |  |   move.l a0,60(sp)
    a3e4:	|  |  |  |  |  |  |   move.l 19c54 <DOSBase>,d0
    a3ea:	|  |  |  |  |  |  |   movea.l d0,a6
    a3ec:	|  |  |  |  |  |  |   move.l 64(sp),d1
    a3f0:	|  |  |  |  |  |  |   move.l 60(sp),d2
    a3f4:	|  |  |  |  |  |  |   jsr -312(a6)
    a3f8:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    a3fc:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    a402:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    a406:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    a40c:	|  |  |  |  |  |  |   move.l 19c54 <DOSBase>,d0
    a412:	|  |  |  |  |  |  |   movea.l d0,a6
    a414:	|  |  |  |  |  |  |   move.l 52(sp),d1
    a418:	|  |  |  |  |  |  |   move.l 48(sp),d2
    a41c:	|  |  |  |  |  |  |   jsr -312(a6)
    a420:	|  |  |  |  |  |  |   move.l d0,44(sp)
    a424:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    a426:	|  |  |  +--|--|--|-- bra.w a518 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    a42a:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    a430:	|  |  |  |  |  |      move.b 19cfe <encode1>,d0
    a436:	|  |  |  |  |  |      eori.b #1,d0
    a43a:	|  |  |  |  |  |      ext.w d0
    a43c:	|  |  |  |  |  |      movea.w d0,a0
    a43e:	|  |  |  |  |  |      move.l a0,36(sp)
    a442:	|  |  |  |  |  |      move.l 19c54 <DOSBase>,d0
    a448:	|  |  |  |  |  |      movea.l d0,a6
    a44a:	|  |  |  |  |  |      move.l 40(sp),d1
    a44e:	|  |  |  |  |  |      move.l 36(sp),d2
    a452:	|  |  |  |  |  |      jsr -312(a6)
    a456:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    a45a:	|  |  |  |  |  |      movea.l 152(sp),a0
    a45e:	|  |  |  |  |  |      move.l 4(a0),d0
    a462:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    a466:	|  |  |  |  |  |      move.l d0,-(sp)
    a468:	|  |  |  |  |  |      jsr 958 <put4bytes>
    a46e:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    a470:	|  |  |  +--|--|----- bra.w a518 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    a474:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    a478:	|  |  |  |  |         pea 1609c <main_sludge.c.2f5c5368+0x5c2>
    a47e:	|  |  |  |  |         jsr 12a04 <KPrintF>
    a484:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    a486:	|  |  |  |  |         move.l 136(sp),28(sp)
    a48c:	|  |  |  |  |         move.l 19c54 <DOSBase>,d0
    a492:	|  |  |  |  |         movea.l d0,a6
    a494:	|  |  |  |  |         move.l 28(sp),d1
    a498:	|  |  |  |  |         jsr -36(a6)
    a49c:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    a4a0:	|  |  |  |  |         clr.w d0
    a4a2:	+--|--|--|--|-------- bra.w a54a <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    a4a6:	|  |  |  |  \-------> move.l 152(sp),d0
    a4aa:	|  |  |  |            move.l d0,-(sp)
    a4ac:	|  |  |  |            jsr 10f86 <getTextFromAnyVar>
    a4b2:	|  |  |  |            addq.l #4,sp
    a4b4:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    a4b8:	|  |  |  |     /----- beq.s a52c <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    a4ba:	|  |  |  |     |      movea.l 100(sp),a0
    a4be:	|  |  |  |     |      move.b (a0),d0
    a4c0:	|  |  |  |     |      ext.w d0
    a4c2:	|  |  |  |     |      movea.w d0,a0
    a4c4:	|  |  |  |     |      move.l a0,12(sp)
    a4c8:	|  |  |  |     |      move.l 136(sp),96(sp)
    a4ce:	|  |  |  |     |      move.l #90360,92(sp)
    a4d6:	|  |  |  |     |      moveq #99,d0
    a4d8:	|  |  |  |     |      not.b d0
    a4da:	|  |  |  |     |      add.l sp,d0
    a4dc:	|  |  |  |     |      addi.l #-144,d0
    a4e2:	|  |  |  |     |      move.l d0,88(sp)
    a4e6:	|  |  |  |     |      move.l 19c54 <DOSBase>,d0
    a4ec:	|  |  |  |     |      movea.l d0,a6
    a4ee:	|  |  |  |     |      move.l 96(sp),d1
    a4f2:	|  |  |  |     |      move.l 92(sp),d2
    a4f6:	|  |  |  |     |      move.l 88(sp),d3
    a4fa:	|  |  |  |     |      jsr -354(a6)
    a4fe:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    a502:	|  |  |  |     |      move.l 100(sp),80(sp)
    a508:	|  |  |  |     |      move.l 19c4c <SysBase>,d0
    a50e:	|  |  |  |     |      movea.l d0,a6
    a510:	|  |  |  |     |      movea.l 80(sp),a1
    a514:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    a518:	|  |  |  \-----|----> movea.l 152(sp),a0
    a51c:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    a522:	|  \--|--------|----> tst.l 152(sp)
    a526:	|     \--------|----- bne.w a34e <stackToFile+0x110>
    a52a:	|              |  /-- bra.s a52e <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    a52c:	|              \--|-> nop
    }
    Close(fp);
    a52e:	|                 \-> move.l 136(sp),20(sp)
    a534:	|                     move.l 19c54 <DOSBase>,d0
    a53a:	|                     movea.l d0,a6
    a53c:	|                     move.l 20(sp),d1
    a540:	|                     jsr -36(a6)
    a544:	|                     move.l d0,16(sp)
    return TRUE;
    a548:	|                     moveq #1,d0
}
    a54a:	\-------------------> movem.l (sp)+,d2-d3/a6
    a54e:	                      lea 144(sp),sp
    a552:	                      rts

0000a554 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    a554:	       lea -20(sp),sp
    a558:	       move.l a6,-(sp)
    a55a:	       move.l d2,-(sp)
	int a, len = strlen (s);
    a55c:	       move.l 32(sp),-(sp)
    a560:	       jsr fe9c <strlen>
    a566:	       addq.l #4,sp
    a568:	       move.l d0,20(sp)

	put2bytes (len, fp);
    a56c:	       move.l 36(sp),-(sp)
    a570:	       move.l 24(sp),-(sp)
    a574:	       jsr 8d0 <put2bytes>
    a57a:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    a57c:	       clr.l 24(sp)
    a580:	   /-- bra.s a5d6 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    a582:	/--|-> move.l 36(sp),16(sp)
    a588:	|  |   move.l 24(sp),d0
    a58c:	|  |   movea.l 32(sp),a0
    a590:	|  |   adda.l d0,a0
    a592:	|  |   move.b (a0),d1
    a594:	|  |   move.b 19cfe <encode1>,d0
    a59a:	|  |   eor.b d1,d0
    a59c:	|  |   ext.w d0
    a59e:	|  |   movea.w d0,a0
    a5a0:	|  |   move.l a0,12(sp)
    a5a4:	|  |   move.l 19c54 <DOSBase>,d0
    a5aa:	|  |   movea.l d0,a6
    a5ac:	|  |   move.l 16(sp),d1
    a5b0:	|  |   move.l 12(sp),d2
    a5b4:	|  |   jsr -312(a6)
    a5b8:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    a5bc:	|  |   move.b 19cfe <encode1>,d0
    a5c2:	|  |   move.b d0,d1
    a5c4:	|  |   move.b 19cff <encode2>,d0
    a5ca:	|  |   add.b d1,d0
    a5cc:	|  |   move.b d0,19cfe <encode1>
	for (a = 0; a < len; a ++) {
    a5d2:	|  |   addq.l #1,24(sp)
    a5d6:	|  \-> move.l 24(sp),d0
    a5da:	|      cmp.l 20(sp),d0
    a5de:	\----- blt.s a582 <writeStringEncoded+0x2e>
	}
}
    a5e0:	       nop
    a5e2:	       nop
    a5e4:	       move.l (sp)+,d2
    a5e6:	       movea.l (sp)+,a6
    a5e8:	       lea 20(sp),sp
    a5ec:	       rts

0000a5ee <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    a5ee:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    a5f0:	                   tst.l 8(sp)
    a5f4:	               /-- bne.s a5fa <failSecurityCheck+0xc>
    a5f6:	               |   moveq #1,d0
    a5f8:	/--------------|-- bra.s a678 <failSecurityCheck+0x8a>

	int a = 0;
    a5fa:	|              \-> clr.l (sp)

	while (fn[a]) {
    a5fc:	|     /----------- bra.s a66a <failSecurityCheck+0x7c>
		switch (fn[a]) {
    a5fe:	|  /--|----------> move.l (sp),d0
    a600:	|  |  |            movea.l 8(sp),a0
    a604:	|  |  |            adda.l d0,a0
    a606:	|  |  |            move.b (a0),d0
    a608:	|  |  |            ext.w d0
    a60a:	|  |  |            movea.w d0,a0
    a60c:	|  |  |            moveq #124,d0
    a60e:	|  |  |            cmp.l a0,d0
    a610:	|  |  |     /----- beq.s a652 <failSecurityCheck+0x64>
    a612:	|  |  |     |      moveq #124,d1
    a614:	|  |  |     |      cmp.l a0,d1
    a616:	|  |  |  /--|----- blt.s a668 <failSecurityCheck+0x7a>
    a618:	|  |  |  |  |      moveq #92,d0
    a61a:	|  |  |  |  |      cmp.l a0,d0
    a61c:	|  |  |  |  +----- beq.s a652 <failSecurityCheck+0x64>
    a61e:	|  |  |  |  |      moveq #92,d1
    a620:	|  |  |  |  |      cmp.l a0,d1
    a622:	|  |  |  +--|----- blt.s a668 <failSecurityCheck+0x7a>
    a624:	|  |  |  |  |      moveq #60,d0
    a626:	|  |  |  |  |      cmp.l a0,d0
    a628:	|  |  |  |  |  /-- blt.s a648 <failSecurityCheck+0x5a>
    a62a:	|  |  |  |  |  |   moveq #34,d1
    a62c:	|  |  |  |  |  |   cmp.l a0,d1
    a62e:	|  |  |  +--|--|-- bgt.s a668 <failSecurityCheck+0x7a>
    a630:	|  |  |  |  |  |   moveq #-34,d1
    a632:	|  |  |  |  |  |   add.l a0,d1
    a634:	|  |  |  |  |  |   move.l #83894529,d0
    a63a:	|  |  |  |  |  |   lsr.l d1,d0
    a63c:	|  |  |  |  |  |   moveq #1,d1
    a63e:	|  |  |  |  |  |   and.l d1,d0
    a640:	|  |  |  |  |  |   sne d0
    a642:	|  |  |  |  |  |   neg.b d0
    a644:	|  |  |  |  +--|-- bne.s a652 <failSecurityCheck+0x64>
    a646:	|  |  |  +--|--|-- bra.s a668 <failSecurityCheck+0x7a>
    a648:	|  |  |  |  |  \-> lea -62(a0),a0
    a64c:	|  |  |  |  |      moveq #1,d0
    a64e:	|  |  |  |  |      cmp.l a0,d0
    a650:	|  |  |  +--|----- bcs.s a668 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    a652:	|  |  |  |  \----> move.l 8(sp),-(sp)
    a656:	|  |  |  |         pea 160fc <main_sludge.c.2f5c5368+0x622>
    a65c:	|  |  |  |         jsr 12a04 <KPrintF>
    a662:	|  |  |  |         addq.l #8,sp
				return TRUE;
    a664:	|  |  |  |         moveq #1,d0
    a666:	+--|--|--|-------- bra.s a678 <failSecurityCheck+0x8a>
		}
		a++;
    a668:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    a66a:	|  |  \----------> move.l (sp),d0
    a66c:	|  |               movea.l 8(sp),a0
    a670:	|  |               adda.l d0,a0
    a672:	|  |               move.b (a0),d0
    a674:	|  \-------------- bne.s a5fe <failSecurityCheck+0x10>
	}
	return FALSE;
    a676:	|                  clr.w d0
}
    a678:	\----------------> addq.l #4,sp
    a67a:	                   rts

0000a67c <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    a67c:	             lea -24(sp),sp
    a680:	             move.l a6,-(sp)
    a682:	             move.l 40(sp),d0
    a686:	             move.w d0,d0
    a688:	             move.w d0,6(sp)
	int fileNum = -1;
    a68c:	             moveq #-1,d0
    a68e:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    a692:	             jsr 3944 <killSpeechTimers>

	switch (numParams) {
    a698:	             moveq #2,d0
    a69a:	             cmp.l 32(sp),d0
    a69e:	      /----- beq.s a6e2 <sayCore+0x66>
    a6a0:	      |      moveq #3,d0
    a6a2:	      |      cmp.l 32(sp),d0
    a6a6:	/-----|----- bne.w a7c4 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    a6aa:	|     |      movea.l 36(sp),a0
    a6ae:	|     |      move.l 24(a0),d0
    a6b2:	|     |      move.l d0,-(sp)
    a6b4:	|     |      pea 5 <_start+0x5>
    a6b8:	|     |      lea 20(sp),a0
    a6bc:	|     |      move.l a0,-(sp)
    a6be:	|     |      jsr 109b0 <getValueType>
    a6c4:	|     |      lea 12(sp),sp
    a6c8:	|     |      tst.w d0
    a6ca:	|     |  /-- bne.s a6d2 <sayCore+0x56>
    a6cc:	|     |  |   moveq #1,d0
    a6ce:	|  /--|--|-- bra.w a7d4 <sayCore+0x158>
			trimStack (&fun -> stack);
    a6d2:	|  |  |  \-> moveq #24,d0
    a6d4:	|  |  |      add.l 36(sp),d0
    a6d8:	|  |  |      move.l d0,-(sp)
    a6da:	|  |  |      jsr 11334 <trimStack>
    a6e0:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    a6e2:	|  |  \----> movea.l 36(sp),a0
    a6e6:	|  |         move.l 24(a0),d0
    a6ea:	|  |         move.l d0,-(sp)
    a6ec:	|  |         jsr 10f86 <getTextFromAnyVar>
    a6f2:	|  |         addq.l #4,sp
    a6f4:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    a6f8:	|  |     /-- bne.s a700 <sayCore+0x84>
    a6fa:	|  |     |   moveq #1,d0
    a6fc:	|  +-----|-- bra.w a7d4 <sayCore+0x158>
			trimStack (&fun -> stack);
    a700:	|  |     \-> moveq #24,d0
    a702:	|  |         add.l 36(sp),d0
    a706:	|  |         move.l d0,-(sp)
    a708:	|  |         jsr 11334 <trimStack>
    a70e:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    a710:	|  |         movea.l 36(sp),a0
    a714:	|  |         move.l 24(a0),d0
    a718:	|  |         move.l d0,-(sp)
    a71a:	|  |         pea 7 <_start+0x7>
    a71e:	|  |         lea 16(sp),a0
    a722:	|  |         move.l a0,-(sp)
    a724:	|  |         jsr 109b0 <getValueType>
    a72a:	|  |         lea 12(sp),sp
    a72e:	|  |         tst.w d0
    a730:	|  |     /-- bne.s a738 <sayCore+0xbc>
    a732:	|  |     |   moveq #1,d0
    a734:	|  +-----|-- bra.w a7d4 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    a738:	|  |     \-> movea.l 36(sp),a0
    a73c:	|  |         move.l 24(a0),d0
    a740:	|  |         move.l d0,-(sp)
    a742:	|  |         pea 7 <_start+0x7>
    a746:	|  |         lea 16(sp),a0
    a74a:	|  |         move.l a0,-(sp)
    a74c:	|  |         jsr 109b0 <getValueType>
    a752:	|  |         lea 12(sp),sp
    a756:	|  |         tst.w d0
    a758:	|  |     /-- bne.s a75e <sayCore+0xe2>
    a75a:	|  |     |   moveq #1,d0
    a75c:	|  +-----|-- bra.s a7d4 <sayCore+0x158>
			trimStack (&fun -> stack);
    a75e:	|  |     \-> moveq #24,d0
    a760:	|  |         add.l 36(sp),d0
    a764:	|  |         move.l d0,-(sp)
    a766:	|  |         jsr 11334 <trimStack>
    a76c:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    a76e:	|  |         movea.w 6(sp),a0
    a772:	|  |         move.l 12(sp),d1
    a776:	|  |         move.l 8(sp),d0
    a77a:	|  |         move.l a0,-(sp)
    a77c:	|  |         move.l d1,-(sp)
    a77e:	|  |         move.l d0,-(sp)
    a780:	|  |         move.l 36(sp),-(sp)
    a784:	|  |         jsr 587c <wrapSpeech>
    a78a:	|  |         lea 16(sp),sp
    a78e:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    a792:	|  |         movea.l 36(sp),a0
    a796:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    a79c:	|  |         movea.l 36(sp),a0
    a7a0:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    a7a6:	|  |         move.l 24(sp),16(sp)
    a7ac:	|  |         move.l 19c4c <SysBase>,d0
    a7b2:	|  |         movea.l d0,a6
    a7b4:	|  |         movea.l 16(sp),a1
    a7b8:	|  |         jsr -690(a6)
			newText = NULL;
    a7bc:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    a7c0:	|  |         moveq #0,d0
    a7c2:	|  +-------- bra.s a7d4 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    a7c4:	\--|-------> pea 16182 <main_sludge.c.2f5c5368+0x6a8>
    a7ca:	   |         jsr 12a04 <KPrintF>
    a7d0:	   |         addq.l #4,sp
	return BR_ERROR;
    a7d2:	   |         moveq #1,d0
}
    a7d4:	   \-------> movea.l (sp)+,a6
    a7d6:	             lea 24(sp),sp
    a7da:	             rts

0000a7dc <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    a7dc:	pea 1 <_start+0x1>
    a7e0:	move.l 12(sp),-(sp)
    a7e4:	move.l 12(sp),-(sp)
    a7e8:	jsr a67c <sayCore>
    a7ee:	lea 12(sp),sp
}
    a7f2:	rts

0000a7f4 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    a7f4:	clr.l -(sp)
    a7f6:	move.l 12(sp),-(sp)
    a7fa:	move.l 12(sp),-(sp)
    a7fe:	jsr a67c <sayCore>
    a804:	lea 12(sp),sp
}
    a808:	rts

0000a80a <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    a80a:	moveq #2,d0
}
    a80c:	rts

0000a80e <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    a80e:	moveq #2,d0
}
    a810:	rts

0000a812 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    a812:	nop
    a814:	rts

0000a816 <builtIn_setCursor>:

builtIn(setCursor)
{
    a816:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    a818:	movea.l 12(sp),a0
    a81c:	move.l 24(a0),d0
    a820:	move.l d0,-(sp)
    a822:	jsr 10e88 <getAnimationFromVar>
    a828:	addq.l #4,sp
    a82a:	move.l d0,(sp)
	pickAnimCursor (aa);
    a82c:	move.l (sp),-(sp)
    a82e:	jsr dba <pickAnimCursor>
    a834:	addq.l #4,sp
	trimStack (&fun -> stack);
    a836:	moveq #24,d0
    a838:	add.l 12(sp),d0
    a83c:	move.l d0,-(sp)
    a83e:	jsr 11334 <trimStack>
    a844:	addq.l #4,sp
	return BR_CONTINUE;
    a846:	moveq #2,d0
}
    a848:	addq.l #4,sp
    a84a:	rts

0000a84c <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    a84c:	move.l 19c0c <input+0xa>,d1
    a852:	move.l 19d02 <cameraX>,d0
    a858:	add.l d0,d1
    a85a:	moveq #28,d0
    a85c:	add.l 8(sp),d0
    a860:	move.l d1,-(sp)
    a862:	pea 1 <_start+0x1>
    a866:	move.l d0,-(sp)
    a868:	jsr 112a2 <setVariable>
    a86e:	lea 12(sp),sp
	return BR_CONTINUE;
    a872:	moveq #2,d0
}
    a874:	rts

0000a876 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    a876:	move.l 19c10 <input+0xe>,d1
    a87c:	move.l 19d06 <cameraY>,d0
    a882:	add.l d0,d1
    a884:	moveq #28,d0
    a886:	add.l 8(sp),d0
    a88a:	move.l d1,-(sp)
    a88c:	pea 1 <_start+0x1>
    a890:	move.l d0,-(sp)
    a892:	jsr 112a2 <setVariable>
    a898:	lea 12(sp),sp
	return BR_CONTINUE;
    a89c:	moveq #2,d0
}
    a89e:	rts

0000a8a0 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    a8a0:	move.l 19c0c <input+0xa>,d0
    a8a6:	move.l d0,-(sp)
    a8a8:	jsr 12e5c <__floatsisf>
    a8ae:	addq.l #4,sp
    a8b0:	move.l d0,d1
    a8b2:	move.l 1814a <cameraZoom>,d0
    a8b8:	move.l d0,-(sp)
    a8ba:	move.l d1,-(sp)
    a8bc:	jsr 12f0e <__mulsf3>
    a8c2:	addq.l #8,sp
    a8c4:	move.l d0,-(sp)
    a8c6:	jsr 12df4 <__fixsfsi>
    a8cc:	addq.l #4,sp
    a8ce:	move.l d0,d1
    a8d0:	moveq #28,d0
    a8d2:	add.l 8(sp),d0
    a8d6:	move.l d1,-(sp)
    a8d8:	pea 1 <_start+0x1>
    a8dc:	move.l d0,-(sp)
    a8de:	jsr 112a2 <setVariable>
    a8e4:	lea 12(sp),sp
	return BR_CONTINUE;
    a8e8:	moveq #2,d0
}
    a8ea:	rts

0000a8ec <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    a8ec:	move.l 19c10 <input+0xe>,d0
    a8f2:	move.l d0,-(sp)
    a8f4:	jsr 12e5c <__floatsisf>
    a8fa:	addq.l #4,sp
    a8fc:	move.l d0,d1
    a8fe:	move.l 1814a <cameraZoom>,d0
    a904:	move.l d0,-(sp)
    a906:	move.l d1,-(sp)
    a908:	jsr 12f0e <__mulsf3>
    a90e:	addq.l #8,sp
    a910:	move.l d0,-(sp)
    a912:	jsr 12df4 <__fixsfsi>
    a918:	addq.l #4,sp
    a91a:	move.l d0,d1
    a91c:	moveq #28,d0
    a91e:	add.l 8(sp),d0
    a922:	move.l d1,-(sp)
    a924:	pea 1 <_start+0x1>
    a928:	move.l d0,-(sp)
    a92a:	jsr 112a2 <setVariable>
    a930:	lea 12(sp),sp
	return BR_CONTINUE;
    a934:	moveq #2,d0
}
    a936:	rts

0000a938 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    a938:	jsr 5330 <statusBarText>
    a93e:	move.l d0,d1
    a940:	moveq #28,d0
    a942:	add.l 8(sp),d0
    a946:	move.l d1,-(sp)
    a948:	move.l d0,-(sp)
    a94a:	jsr 10bd2 <makeTextVar>
    a950:	addq.l #8,sp
	return BR_CONTINUE;
    a952:	moveq #2,d0
}
    a954:	rts

0000a956 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    a956:	       lea -20(sp),sp
    a95a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    a95c:	       movea.l 32(sp),a0
    a960:	       move.l 24(a0),d0
    a964:	       move.l d0,-(sp)
    a966:	       jsr 10f86 <getTextFromAnyVar>
    a96c:	       addq.l #4,sp
    a96e:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    a972:	   /-- bne.s a97a <builtIn_getMatchingFiles+0x24>
    a974:	   |   moveq #1,d0
    a976:	/--|-- bra.w aa3c <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    a97a:	|  \-> moveq #24,d0
    a97c:	|      add.l 32(sp),d0
    a980:	|      move.l d0,-(sp)
    a982:	|      jsr 11334 <trimStack>
    a988:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    a98a:	|      moveq #28,d0
    a98c:	|      add.l 32(sp),d0
    a990:	|      move.l d0,-(sp)
    a992:	|      jsr 10bfe <unlinkVar>
    a998:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    a99a:	|      movea.l 32(sp),a0
    a99e:	|      moveq #6,d0
    a9a0:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    a9a4:	|      moveq #12,d0
    a9a6:	|      move.l d0,16(sp)
    a9aa:	|      clr.l 12(sp)
    a9ae:	|      move.l 19c4c <SysBase>,d0
    a9b4:	|      movea.l d0,a6
    a9b6:	|      move.l 16(sp),d0
    a9ba:	|      move.l 12(sp),d1
    a9be:	|      jsr -684(a6)
    a9c2:	|      move.l d0,8(sp)
    a9c6:	|      move.l 8(sp),d0
    a9ca:	|      movea.l 32(sp),a0
    a9ce:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    a9d2:	|      moveq #32,d0
    a9d4:	|      add.l 32(sp),d0
    a9d8:	|  /-- bne.s a9de <builtIn_getMatchingFiles+0x88>
    a9da:	|  |   moveq #1,d0
    a9dc:	+--|-- bra.s aa3c <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    a9de:	|  \-> movea.l 32(sp),a0
    a9e2:	|      movea.l 32(a0),a0
    a9e6:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    a9e8:	|      movea.l 32(sp),a0
    a9ec:	|      movea.l 32(a0),a0
    a9f0:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    a9f4:	|      movea.l 32(sp),a0
    a9f8:	|      movea.l 32(a0),a0
    a9fc:	|      moveq #1,d0
    a9fe:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    aa02:	|      movea.l 32(sp),a0
    aa06:	|      move.l 32(a0),d0
    aa0a:	|      move.l 20(sp),-(sp)
    aa0e:	|      move.l d0,-(sp)
    aa10:	|      jsr 1076c <getSavedGamesStack>
    aa16:	|      addq.l #8,sp
    aa18:	|      tst.w d0
    aa1a:	|  /-- bne.s aa20 <builtIn_getMatchingFiles+0xca>
    aa1c:	|  |   moveq #1,d0
    aa1e:	+--|-- bra.s aa3c <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    aa20:	|  \-> move.l 20(sp),4(sp)
    aa26:	|      move.l 19c4c <SysBase>,d0
    aa2c:	|      movea.l d0,a6
    aa2e:	|      movea.l 4(sp),a1
    aa32:	|      jsr -690(a6)
	newText = NULL;
    aa36:	|      clr.l 20(sp)
	return BR_CONTINUE;
    aa3a:	|      moveq #2,d0
}
    aa3c:	\----> movea.l (sp)+,a6
    aa3e:	       lea 20(sp),sp
    aa42:	       rts

0000aa44 <builtIn_saveGame>:

builtIn(saveGame)
{
    aa44:	       lea -12(sp),sp
    aa48:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    aa4a:	       movea.l 24(sp),a0
    aa4e:	       move.l 24(a0),d0
    aa52:	       move.l d0,-(sp)
    aa54:	       jsr 10f86 <getTextFromAnyVar>
    aa5a:	       addq.l #4,sp
    aa5c:	       move.l d0,19c18 <loadNow>
    trimStack(&fun->stack);
    aa62:	       moveq #24,d0
    aa64:	       add.l 24(sp),d0
    aa68:	       move.l d0,-(sp)
    aa6a:	       jsr 11334 <trimStack>
    aa70:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    aa72:	       move.l 19c18 <loadNow>,d0
    aa78:	       move.l d0,-(sp)
    aa7a:	       jsr 2fe <encodeFilename>
    aa80:	       addq.l #4,sp
    aa82:	       move.l d0,12(sp)
    FreeVec(loadNow);
    aa86:	       move.l 19c18 <loadNow>,8(sp)
    aa8e:	       move.l 19c4c <SysBase>,d0
    aa94:	       movea.l d0,a6
    aa96:	       movea.l 8(sp),a1
    aa9a:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    aa9e:	       move.l 12(sp),-(sp)
    aaa2:	       jsr a5ee <failSecurityCheck>
    aaa8:	       addq.l #4,sp
    aaaa:	       tst.w d0
    aaac:	   /-- beq.s aab2 <builtIn_saveGame+0x6e>
    aaae:	   |   moveq #1,d0
    aab0:	/--|-- bra.s ab02 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    aab2:	|  \-> move.l 12(sp),-(sp)
    aab6:	|      pea 161b0 <main_sludge.c.2f5c5368+0x6d6>
    aabc:	|      jsr fedc <joinStrings>
    aac2:	|      addq.l #8,sp
    aac4:	|      move.l d0,19c18 <loadNow>
    FreeVec(aaaaa);
    aaca:	|      move.l 12(sp),4(sp)
    aad0:	|      move.l 19c4c <SysBase>,d0
    aad6:	|      movea.l d0,a6
    aad8:	|      movea.l 4(sp),a1
    aadc:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    aae0:	|      moveq #28,d0
    aae2:	|      add.l 24(sp),d0
    aae6:	|      clr.l -(sp)
    aae8:	|      pea 1 <_start+0x1>
    aaec:	|      move.l d0,-(sp)
    aaee:	|      jsr 112a2 <setVariable>
    aaf4:	|      lea 12(sp),sp
    saverFunc = fun;
    aaf8:	|      move.l 24(sp),19d12 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    ab00:	|      moveq #0,d0
}
    ab02:	\----> movea.l (sp)+,a6
    ab04:	       lea 12(sp),sp
    ab08:	       rts

0000ab0a <builtIn_fileExists>:

builtIn(fileExists)
{
    ab0a:	       lea -36(sp),sp
    ab0e:	       move.l a6,-(sp)
    ab10:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    ab12:	       movea.l 52(sp),a0
    ab16:	       move.l 24(a0),d0
    ab1a:	       move.l d0,-(sp)
    ab1c:	       jsr 10f86 <getTextFromAnyVar>
    ab22:	       addq.l #4,sp
    ab24:	       move.l d0,19c18 <loadNow>
    trimStack(&fun->stack);
    ab2a:	       moveq #24,d0
    ab2c:	       add.l 52(sp),d0
    ab30:	       move.l d0,-(sp)
    ab32:	       jsr 11334 <trimStack>
    ab38:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    ab3a:	       move.l 19c18 <loadNow>,d0
    ab40:	       move.l d0,-(sp)
    ab42:	       jsr 2fe <encodeFilename>
    ab48:	       addq.l #4,sp
    ab4a:	       move.l d0,40(sp)
    FreeVec(loadNow);
    ab4e:	       move.l 19c18 <loadNow>,36(sp)
    ab56:	       move.l 19c4c <SysBase>,d0
    ab5c:	       movea.l d0,a6
    ab5e:	       movea.l 36(sp),a1
    ab62:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    ab66:	       move.l 40(sp),-(sp)
    ab6a:	       jsr a5ee <failSecurityCheck>
    ab70:	       addq.l #4,sp
    ab72:	       tst.w d0
    ab74:	   /-- beq.s ab7c <builtIn_fileExists+0x72>
    ab76:	   |   moveq #1,d0
    ab78:	/--|-- bra.w ac1c <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    ab7c:	|  \-> move.l 40(sp),32(sp)
    ab82:	|      move.l #1005,28(sp)
    ab8a:	|      move.l 19c54 <DOSBase>,d0
    ab90:	|      movea.l d0,a6
    ab92:	|      move.l 32(sp),d1
    ab96:	|      move.l 28(sp),d2
    ab9a:	|      jsr -30(a6)
    ab9e:	|      move.l d0,24(sp)
    aba2:	|      move.l 24(sp),d0
    aba6:	|      move.l d0,20(sp)
    if (!fp) {        
    abaa:	|  /-- bne.s abba <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    abac:	|  |   pea 161b2 <main_sludge.c.2f5c5368+0x6d8>
    abb2:	|  |   jsr 12a04 <KPrintF>
    abb8:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    abba:	|  \-> tst.l 20(sp)
    abbe:	|      sne d0
    abc0:	|      neg.b d0
    abc2:	|      moveq #0,d1
    abc4:	|      move.b d0,d1
    abc6:	|      moveq #28,d0
    abc8:	|      add.l 52(sp),d0
    abcc:	|      move.l d1,-(sp)
    abce:	|      pea 1 <_start+0x1>
    abd2:	|      move.l d0,-(sp)
    abd4:	|      jsr 112a2 <setVariable>
    abda:	|      lea 12(sp),sp
    if (fp) Close(fp);
    abde:	|      tst.l 20(sp)
    abe2:	|  /-- beq.s abfe <builtIn_fileExists+0xf4>
    abe4:	|  |   move.l 20(sp),16(sp)
    abea:	|  |   move.l 19c54 <DOSBase>,d0
    abf0:	|  |   movea.l d0,a6
    abf2:	|  |   move.l 16(sp),d1
    abf6:	|  |   jsr -36(a6)
    abfa:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    abfe:	|  \-> move.l 40(sp),8(sp)
    ac04:	|      move.l 19c4c <SysBase>,d0
    ac0a:	|      movea.l d0,a6
    ac0c:	|      movea.l 8(sp),a1
    ac10:	|      jsr -690(a6)
    loadNow = NULL;
    ac14:	|      clr.l 19c18 <loadNow>
    return BR_CONTINUE;
    ac1a:	|      moveq #2,d0
}
    ac1c:	\----> move.l (sp)+,d2
    ac1e:	       movea.l (sp)+,a6
    ac20:	       lea 36(sp),sp
    ac24:	       rts

0000ac26 <builtIn_loadGame>:

builtIn(loadGame)
{
    ac26:	       lea -36(sp),sp
    ac2a:	       move.l a6,-(sp)
    ac2c:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    ac2e:	       movea.l 52(sp),a0
    ac32:	       move.l 24(a0),d0
    ac36:	       move.l d0,-(sp)
    ac38:	       jsr 10f86 <getTextFromAnyVar>
    ac3e:	       addq.l #4,sp
    ac40:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    ac44:	       moveq #24,d0
    ac46:	       add.l 52(sp),d0
    ac4a:	       move.l d0,-(sp)
    ac4c:	       jsr 11334 <trimStack>
    ac52:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    ac54:	       move.l 40(sp),-(sp)
    ac58:	       jsr 2fe <encodeFilename>
    ac5e:	       addq.l #4,sp
    ac60:	       move.l d0,19c18 <loadNow>
    FreeVec(aaaaa);
    ac66:	       move.l 40(sp),36(sp)
    ac6c:	       move.l 19c4c <SysBase>,d0
    ac72:	       movea.l d0,a6
    ac74:	       movea.l 36(sp),a1
    ac78:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    ac7c:	       move.l 19c18 <loadNow>,d0
    ac82:	       move.l d0,-(sp)
    ac84:	       jsr a5ee <failSecurityCheck>
    ac8a:	       addq.l #4,sp
    ac8c:	       tst.w d0
    ac8e:	   /-- beq.s ac94 <builtIn_loadGame+0x6e>
    ac90:	   |   moveq #1,d0
    ac92:	/--|-- bra.s ad04 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    ac94:	|  \-> move.l 19c18 <loadNow>,32(sp)
    ac9c:	|      move.l #1005,28(sp)
    aca4:	|      move.l 19c54 <DOSBase>,d0
    acaa:	|      movea.l d0,a6
    acac:	|      move.l 32(sp),d1
    acb0:	|      move.l 28(sp),d2
    acb4:	|      jsr -30(a6)
    acb8:	|      move.l d0,24(sp)
    acbc:	|      move.l 24(sp),d0
    acc0:	|      move.l d0,20(sp)
    if (fp) {
    acc4:	|  /-- beq.s ace4 <builtIn_loadGame+0xbe>
        Close(fp);
    acc6:	|  |   move.l 20(sp),12(sp)
    accc:	|  |   move.l 19c54 <DOSBase>,d0
    acd2:	|  |   movea.l d0,a6
    acd4:	|  |   move.l 12(sp),d1
    acd8:	|  |   jsr -36(a6)
    acdc:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    ace0:	|  |   moveq #0,d0
    ace2:	+--|-- bra.s ad04 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    ace4:	|  \-> move.l 19c18 <loadNow>,16(sp)
    acec:	|      move.l 19c4c <SysBase>,d0
    acf2:	|      movea.l d0,a6
    acf4:	|      movea.l 16(sp),a1
    acf8:	|      jsr -690(a6)
    loadNow = NULL;
    acfc:	|      clr.l 19c18 <loadNow>
    return BR_CONTINUE;
    ad02:	|      moveq #2,d0
}
    ad04:	\----> move.l (sp)+,d2
    ad06:	       movea.l (sp)+,a6
    ad08:	       lea 36(sp),sp
    ad0c:	       rts

0000ad0e <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ad0e:	move.l 19ce8 <sceneHeight>,d0
    ad14:	move.l d0,d1
    ad16:	move.l 19ce4 <sceneWidth>,d0
    ad1c:	move.l d1,-(sp)
    ad1e:	move.l d0,-(sp)
    ad20:	clr.l -(sp)
    ad22:	clr.l -(sp)
    ad24:	jsr 952c <blankScreen>
    ad2a:	lea 16(sp),sp
	return BR_CONTINUE;
    ad2e:	moveq #2,d0
}
    ad30:	rts

0000ad32 <builtIn_blankArea>:

builtIn(blankArea)
{
    ad32:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ad36:	       movea.l 24(sp),a0
    ad3a:	       move.l 24(a0),d0
    ad3e:	       move.l d0,-(sp)
    ad40:	       pea 1 <_start+0x1>
    ad44:	       lea 8(sp),a0
    ad48:	       move.l a0,-(sp)
    ad4a:	       jsr 109b0 <getValueType>
    ad50:	       lea 12(sp),sp
    ad54:	       tst.w d0
    ad56:	   /-- bne.s ad5e <builtIn_blankArea+0x2c>
    ad58:	   |   moveq #1,d0
    ad5a:	/--|-- bra.w ae34 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ad5e:	|  \-> moveq #24,d0
    ad60:	|      add.l 24(sp),d0
    ad64:	|      move.l d0,-(sp)
    ad66:	|      jsr 11334 <trimStack>
    ad6c:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ad6e:	|      movea.l 24(sp),a0
    ad72:	|      move.l 24(a0),d0
    ad76:	|      move.l d0,-(sp)
    ad78:	|      pea 1 <_start+0x1>
    ad7c:	|      lea 12(sp),a0
    ad80:	|      move.l a0,-(sp)
    ad82:	|      jsr 109b0 <getValueType>
    ad88:	|      lea 12(sp),sp
    ad8c:	|      tst.w d0
    ad8e:	|  /-- bne.s ad96 <builtIn_blankArea+0x64>
    ad90:	|  |   moveq #1,d0
    ad92:	+--|-- bra.w ae34 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ad96:	|  \-> moveq #24,d0
    ad98:	|      add.l 24(sp),d0
    ad9c:	|      move.l d0,-(sp)
    ad9e:	|      jsr 11334 <trimStack>
    ada4:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ada6:	|      movea.l 24(sp),a0
    adaa:	|      move.l 24(a0),d0
    adae:	|      move.l d0,-(sp)
    adb0:	|      pea 1 <_start+0x1>
    adb4:	|      moveq #16,d0
    adb6:	|      add.l sp,d0
    adb8:	|      move.l d0,-(sp)
    adba:	|      jsr 109b0 <getValueType>
    adc0:	|      lea 12(sp),sp
    adc4:	|      tst.w d0
    adc6:	|  /-- bne.s adcc <builtIn_blankArea+0x9a>
    adc8:	|  |   moveq #1,d0
    adca:	+--|-- bra.s ae34 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    adcc:	|  \-> moveq #24,d0
    adce:	|      add.l 24(sp),d0
    add2:	|      move.l d0,-(sp)
    add4:	|      jsr 11334 <trimStack>
    adda:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    addc:	|      movea.l 24(sp),a0
    ade0:	|      move.l 24(a0),d0
    ade4:	|      move.l d0,-(sp)
    ade6:	|      pea 1 <_start+0x1>
    adea:	|      moveq #20,d0
    adec:	|      add.l sp,d0
    adee:	|      move.l d0,-(sp)
    adf0:	|      jsr 109b0 <getValueType>
    adf6:	|      lea 12(sp),sp
    adfa:	|      tst.w d0
    adfc:	|  /-- bne.s ae02 <builtIn_blankArea+0xd0>
    adfe:	|  |   moveq #1,d0
    ae00:	+--|-- bra.s ae34 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ae02:	|  \-> moveq #24,d0
    ae04:	|      add.l 24(sp),d0
    ae08:	|      move.l d0,-(sp)
    ae0a:	|      jsr 11334 <trimStack>
    ae10:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    ae12:	|      movea.l (sp),a1
    ae14:	|      movea.l 4(sp),a0
    ae18:	|      move.l 8(sp),d1
    ae1c:	|      move.l 12(sp),d0
    ae20:	|      move.l a1,-(sp)
    ae22:	|      move.l a0,-(sp)
    ae24:	|      move.l d1,-(sp)
    ae26:	|      move.l d0,-(sp)
    ae28:	|      jsr 952c <blankScreen>
    ae2e:	|      lea 16(sp),sp
	return BR_CONTINUE;
    ae32:	|      moveq #2,d0
}
    ae34:	\----> lea 16(sp),sp
    ae38:	       rts

0000ae3a <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    ae3a:	jsr 9540 <darkScreen>
	return BR_CONTINUE;
    ae40:	moveq #2,d0
}
    ae42:	rts

0000ae44 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    ae44:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ae48:	       movea.l 20(sp),a0
    ae4c:	       move.l 24(a0),d0
    ae50:	       move.l d0,-(sp)
    ae52:	       pea 1 <_start+0x1>
    ae56:	       lea 8(sp),a0
    ae5a:	       move.l a0,-(sp)
    ae5c:	       jsr 109b0 <getValueType>
    ae62:	       lea 12(sp),sp
    ae66:	       tst.w d0
    ae68:	   /-- bne.s ae70 <builtIn_addOverlay+0x2c>
    ae6a:	   |   moveq #1,d0
    ae6c:	/--|-- bra.w af08 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ae70:	|  \-> moveq #24,d0
    ae72:	|      add.l 20(sp),d0
    ae76:	|      move.l d0,-(sp)
    ae78:	|      jsr 11334 <trimStack>
    ae7e:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ae80:	|      movea.l 20(sp),a0
    ae84:	|      move.l 24(a0),d0
    ae88:	|      move.l d0,-(sp)
    ae8a:	|      pea 1 <_start+0x1>
    ae8e:	|      moveq #12,d0
    ae90:	|      add.l sp,d0
    ae92:	|      move.l d0,-(sp)
    ae94:	|      jsr 109b0 <getValueType>
    ae9a:	|      lea 12(sp),sp
    ae9e:	|      tst.w d0
    aea0:	|  /-- bne.s aea6 <builtIn_addOverlay+0x62>
    aea2:	|  |   moveq #1,d0
    aea4:	+--|-- bra.s af08 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    aea6:	|  \-> moveq #24,d0
    aea8:	|      add.l 20(sp),d0
    aeac:	|      move.l d0,-(sp)
    aeae:	|      jsr 11334 <trimStack>
    aeb4:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    aeb6:	|      movea.l 20(sp),a0
    aeba:	|      move.l 24(a0),d0
    aebe:	|      move.l d0,-(sp)
    aec0:	|      pea 5 <_start+0x5>
    aec4:	|      moveq #16,d0
    aec6:	|      add.l sp,d0
    aec8:	|      move.l d0,-(sp)
    aeca:	|      jsr 109b0 <getValueType>
    aed0:	|      lea 12(sp),sp
    aed4:	|      tst.w d0
    aed6:	|  /-- bne.s aedc <builtIn_addOverlay+0x98>
    aed8:	|  |   moveq #1,d0
    aeda:	+--|-- bra.s af08 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    aedc:	|  \-> moveq #24,d0
    aede:	|      add.l 20(sp),d0
    aee2:	|      move.l d0,-(sp)
    aee4:	|      jsr 11334 <trimStack>
    aeea:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    aeec:	|      movea.l (sp),a0
    aeee:	|      move.l 4(sp),d1
    aef2:	|      move.l 8(sp),d0
    aef6:	|      move.l a0,-(sp)
    aef8:	|      move.l d1,-(sp)
    aefa:	|      move.l d0,-(sp)
    aefc:	|      jsr 965e <loadBackDrop>
    af02:	|      lea 12(sp),sp
	return BR_CONTINUE;
    af06:	|      moveq #2,d0
}
    af08:	\----> lea 12(sp),sp
    af0c:	       rts

0000af0e <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    af0e:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    af12:	       movea.l 20(sp),a0
    af16:	       move.l 24(a0),d0
    af1a:	       move.l d0,-(sp)
    af1c:	       pea 1 <_start+0x1>
    af20:	       lea 8(sp),a0
    af24:	       move.l a0,-(sp)
    af26:	       jsr 109b0 <getValueType>
    af2c:	       lea 12(sp),sp
    af30:	       tst.w d0
    af32:	   /-- bne.s af3a <builtIn_mixOverlay+0x2c>
    af34:	   |   moveq #1,d0
    af36:	/--|-- bra.w afd2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    af3a:	|  \-> moveq #24,d0
    af3c:	|      add.l 20(sp),d0
    af40:	|      move.l d0,-(sp)
    af42:	|      jsr 11334 <trimStack>
    af48:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    af4a:	|      movea.l 20(sp),a0
    af4e:	|      move.l 24(a0),d0
    af52:	|      move.l d0,-(sp)
    af54:	|      pea 1 <_start+0x1>
    af58:	|      moveq #12,d0
    af5a:	|      add.l sp,d0
    af5c:	|      move.l d0,-(sp)
    af5e:	|      jsr 109b0 <getValueType>
    af64:	|      lea 12(sp),sp
    af68:	|      tst.w d0
    af6a:	|  /-- bne.s af70 <builtIn_mixOverlay+0x62>
    af6c:	|  |   moveq #1,d0
    af6e:	+--|-- bra.s afd2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    af70:	|  \-> moveq #24,d0
    af72:	|      add.l 20(sp),d0
    af76:	|      move.l d0,-(sp)
    af78:	|      jsr 11334 <trimStack>
    af7e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    af80:	|      movea.l 20(sp),a0
    af84:	|      move.l 24(a0),d0
    af88:	|      move.l d0,-(sp)
    af8a:	|      pea 5 <_start+0x5>
    af8e:	|      moveq #16,d0
    af90:	|      add.l sp,d0
    af92:	|      move.l d0,-(sp)
    af94:	|      jsr 109b0 <getValueType>
    af9a:	|      lea 12(sp),sp
    af9e:	|      tst.w d0
    afa0:	|  /-- bne.s afa6 <builtIn_mixOverlay+0x98>
    afa2:	|  |   moveq #1,d0
    afa4:	+--|-- bra.s afd2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    afa6:	|  \-> moveq #24,d0
    afa8:	|      add.l 20(sp),d0
    afac:	|      move.l d0,-(sp)
    afae:	|      jsr 11334 <trimStack>
    afb4:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    afb6:	|      movea.l (sp),a0
    afb8:	|      move.l 4(sp),d1
    afbc:	|      move.l 8(sp),d0
    afc0:	|      move.l a0,-(sp)
    afc2:	|      move.l d1,-(sp)
    afc4:	|      move.l d0,-(sp)
    afc6:	|      jsr 96a4 <mixBackDrop>
    afcc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    afd0:	|      moveq #2,d0
}
    afd2:	\----> lea 12(sp),sp
    afd6:	       rts

0000afd8 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    afd8:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    afdc:	       movea.l 20(sp),a0
    afe0:	       move.l 24(a0),d0
    afe4:	       move.l d0,-(sp)
    afe6:	       pea 1 <_start+0x1>
    afea:	       lea 8(sp),a0
    afee:	       move.l a0,-(sp)
    aff0:	       jsr 109b0 <getValueType>
    aff6:	       lea 12(sp),sp
    affa:	       tst.w d0
    affc:	   /-- bne.s b004 <builtIn_pasteImage+0x2c>
    affe:	   |   moveq #1,d0
    b000:	/--|-- bra.w b094 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    b004:	|  \-> moveq #24,d0
    b006:	|      add.l 20(sp),d0
    b00a:	|      move.l d0,-(sp)
    b00c:	|      jsr 11334 <trimStack>
    b012:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b014:	|      movea.l 20(sp),a0
    b018:	|      move.l 24(a0),d0
    b01c:	|      move.l d0,-(sp)
    b01e:	|      pea 1 <_start+0x1>
    b022:	|      moveq #12,d0
    b024:	|      add.l sp,d0
    b026:	|      move.l d0,-(sp)
    b028:	|      jsr 109b0 <getValueType>
    b02e:	|      lea 12(sp),sp
    b032:	|      tst.w d0
    b034:	|  /-- bne.s b03a <builtIn_pasteImage+0x62>
    b036:	|  |   moveq #1,d0
    b038:	+--|-- bra.s b094 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    b03a:	|  \-> moveq #24,d0
    b03c:	|      add.l 20(sp),d0
    b040:	|      move.l d0,-(sp)
    b042:	|      jsr 11334 <trimStack>
    b048:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    b04a:	|      movea.l 20(sp),a0
    b04e:	|      move.l 24(a0),d0
    b052:	|      move.l d0,-(sp)
    b054:	|      jsr 10e88 <getAnimationFromVar>
    b05a:	|      addq.l #4,sp
    b05c:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    b060:	|      moveq #24,d0
    b062:	|      add.l 20(sp),d0
    b066:	|      move.l d0,-(sp)
    b068:	|      jsr 11334 <trimStack>
    b06e:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    b070:	|      tst.l 8(sp)
    b074:	|  /-- bne.s b07a <builtIn_pasteImage+0xa2>
    b076:	|  |   moveq #2,d0
    b078:	+--|-- bra.s b094 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    b07a:	|  \-> move.l (sp),d1
    b07c:	|      move.l 4(sp),d0
    b080:	|      move.l 8(sp),-(sp)
    b084:	|      move.l d1,-(sp)
    b086:	|      move.l d0,-(sp)
    b088:	|      jsr de2 <pasteCursor>
    b08e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b092:	|      moveq #2,d0
}
    b094:	\----> lea 12(sp),sp
    b098:	       rts

0000b09a <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    b09a:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b09c:	       movea.l 16(sp),a0
    b0a0:	       move.l 24(a0),d0
    b0a4:	       move.l d0,-(sp)
    b0a6:	       pea 1 <_start+0x1>
    b0aa:	       move.l sp,d0
    b0ac:	       addq.l #8,d0
    b0ae:	       move.l d0,-(sp)
    b0b0:	       jsr 109b0 <getValueType>
    b0b6:	       lea 12(sp),sp
    b0ba:	       tst.w d0
    b0bc:	   /-- bne.s b0c4 <builtIn_setSceneDimensions+0x2a>
    b0be:	   |   moveq #1,d0
    b0c0:	/--|-- bra.w b14c <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    b0c4:	|  \-> moveq #24,d0
    b0c6:	|      add.l 16(sp),d0
    b0ca:	|      move.l d0,-(sp)
    b0cc:	|      jsr 11334 <trimStack>
    b0d2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b0d4:	|      movea.l 16(sp),a0
    b0d8:	|      move.l 24(a0),d0
    b0dc:	|      move.l d0,-(sp)
    b0de:	|      pea 1 <_start+0x1>
    b0e2:	|      moveq #12,d0
    b0e4:	|      add.l sp,d0
    b0e6:	|      move.l d0,-(sp)
    b0e8:	|      jsr 109b0 <getValueType>
    b0ee:	|      lea 12(sp),sp
    b0f2:	|      tst.w d0
    b0f4:	|  /-- bne.s b0fa <builtIn_setSceneDimensions+0x60>
    b0f6:	|  |   moveq #1,d0
    b0f8:	+--|-- bra.s b14c <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    b0fa:	|  \-> moveq #24,d0
    b0fc:	|      add.l 16(sp),d0
    b100:	|      move.l d0,-(sp)
    b102:	|      jsr 11334 <trimStack>
    b108:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    b10a:	|      move.l (sp),d1
    b10c:	|      move.l 4(sp),d0
    b110:	|      move.l d1,-(sp)
    b112:	|      move.l d0,-(sp)
    b114:	|      jsr 96ee <resizeBackdrop>
    b11a:	|      addq.l #8,sp
    b11c:	|      tst.w d0
    b11e:	|  /-- beq.s b13c <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    b120:	|  |   move.l (sp),d1
    b122:	|  |   move.l 4(sp),d0
    b126:	|  |   move.l d1,-(sp)
    b128:	|  |   move.l d0,-(sp)
    b12a:	|  |   clr.l -(sp)
    b12c:	|  |   clr.l -(sp)
    b12e:	|  |   jsr 952c <blankScreen>
    b134:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    b138:	|  |   moveq #2,d0
    b13a:	+--|-- bra.s b14c <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    b13c:	|  \-> pea 161d0 <main_sludge.c.2f5c5368+0x6f6>
    b142:	|      jsr 12a04 <KPrintF>
    b148:	|      addq.l #4,sp
	return BR_ERROR;
    b14a:	|      moveq #1,d0
}
    b14c:	\----> addq.l #8,sp
    b14e:	       rts

0000b150 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    b150:	          move.l d3,-(sp)
    b152:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b154:	          movea.l 16(sp),a0
    b158:	          move.l 24(a0),d0
    b15c:	          move.l d0,-(sp)
    b15e:	          pea 1 <_start+0x1>
    b162:	          pea 19d06 <cameraY>
    b168:	          jsr 109b0 <getValueType>
    b16e:	          lea 12(sp),sp
    b172:	          tst.w d0
    b174:	      /-- bne.s b17c <builtIn_aimCamera+0x2c>
    b176:	      |   moveq #1,d0
    b178:	/-----|-- bra.w b3fe <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    b17c:	|     \-> moveq #24,d0
    b17e:	|         add.l 16(sp),d0
    b182:	|         move.l d0,-(sp)
    b184:	|         jsr 11334 <trimStack>
    b18a:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b18c:	|         movea.l 16(sp),a0
    b190:	|         move.l 24(a0),d0
    b194:	|         move.l d0,-(sp)
    b196:	|         pea 1 <_start+0x1>
    b19a:	|         pea 19d02 <cameraX>
    b1a0:	|         jsr 109b0 <getValueType>
    b1a6:	|         lea 12(sp),sp
    b1aa:	|         tst.w d0
    b1ac:	|     /-- bne.s b1b4 <builtIn_aimCamera+0x64>
    b1ae:	|     |   moveq #1,d0
    b1b0:	+-----|-- bra.w b3fe <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    b1b4:	|     \-> moveq #24,d0
    b1b6:	|         add.l 16(sp),d0
    b1ba:	|         move.l d0,-(sp)
    b1bc:	|         jsr 11334 <trimStack>
    b1c2:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    b1c4:	|         move.l 19d02 <cameraX>,d0
    b1ca:	|         move.l d0,-(sp)
    b1cc:	|         jsr 12e5c <__floatsisf>
    b1d2:	|         addq.l #4,sp
    b1d4:	|         move.l d0,d2
    b1d6:	|         move.l 19b4c <winWidth>,d0
    b1dc:	|         lsr.l #1,d0
    b1de:	|         move.l d0,-(sp)
    b1e0:	|         jsr 12e84 <__floatunsisf>
    b1e6:	|         addq.l #4,sp
    b1e8:	|         move.l d0,d1
    b1ea:	|         move.l 1814a <cameraZoom>,d0
    b1f0:	|         move.l d0,-(sp)
    b1f2:	|         move.l d1,-(sp)
    b1f4:	|         jsr 12d08 <__divsf3>
    b1fa:	|         addq.l #8,sp
    b1fc:	|         move.l d0,-(sp)
    b1fe:	|         move.l d2,-(sp)
    b200:	|         jsr 13150 <__subsf3>
    b206:	|         addq.l #8,sp
    b208:	|         move.l d0,-(sp)
    b20a:	|         jsr 12df4 <__fixsfsi>
    b210:	|         addq.l #4,sp
    b212:	|         move.l d0,19d02 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    b218:	|         move.l 19d06 <cameraY>,d0
    b21e:	|         move.l d0,-(sp)
    b220:	|         jsr 12e5c <__floatsisf>
    b226:	|         addq.l #4,sp
    b228:	|         move.l d0,d2
    b22a:	|         move.l 19b50 <winHeight>,d0
    b230:	|         lsr.l #1,d0
    b232:	|         move.l d0,-(sp)
    b234:	|         jsr 12e84 <__floatunsisf>
    b23a:	|         addq.l #4,sp
    b23c:	|         move.l d0,d1
    b23e:	|         move.l 1814a <cameraZoom>,d0
    b244:	|         move.l d0,-(sp)
    b246:	|         move.l d1,-(sp)
    b248:	|         jsr 12d08 <__divsf3>
    b24e:	|         addq.l #8,sp
    b250:	|         move.l d0,-(sp)
    b252:	|         move.l d2,-(sp)
    b254:	|         jsr 13150 <__subsf3>
    b25a:	|         addq.l #8,sp
    b25c:	|         move.l d0,-(sp)
    b25e:	|         jsr 12df4 <__fixsfsi>
    b264:	|         addq.l #4,sp
    b266:	|         move.l d0,19d06 <cameraY>

	if (cameraX < 0) cameraX = 0;
    b26c:	|         move.l 19d02 <cameraX>,d0
    b272:	|     /-- bpl.s b27e <builtIn_aimCamera+0x12e>
    b274:	|     |   clr.l 19d02 <cameraX>
    b27a:	|  /--|-- bra.w b334 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    b27e:	|  |  \-> move.l 19d02 <cameraX>,d0
    b284:	|  |      move.l d0,-(sp)
    b286:	|  |      jsr 12e5c <__floatsisf>
    b28c:	|  |      addq.l #4,sp
    b28e:	|  |      move.l d0,d2
    b290:	|  |      move.l 19ce4 <sceneWidth>,d0
    b296:	|  |      move.l d0,-(sp)
    b298:	|  |      jsr 12e84 <__floatunsisf>
    b29e:	|  |      addq.l #4,sp
    b2a0:	|  |      move.l d0,d3
    b2a2:	|  |      move.l 19b4c <winWidth>,d0
    b2a8:	|  |      move.l d0,-(sp)
    b2aa:	|  |      jsr 12e84 <__floatunsisf>
    b2b0:	|  |      addq.l #4,sp
    b2b2:	|  |      move.l d0,d1
    b2b4:	|  |      move.l 1814a <cameraZoom>,d0
    b2ba:	|  |      move.l d0,-(sp)
    b2bc:	|  |      move.l d1,-(sp)
    b2be:	|  |      jsr 12d08 <__divsf3>
    b2c4:	|  |      addq.l #8,sp
    b2c6:	|  |      move.l d0,-(sp)
    b2c8:	|  |      move.l d3,-(sp)
    b2ca:	|  |      jsr 13150 <__subsf3>
    b2d0:	|  |      addq.l #8,sp
    b2d2:	|  |      move.l d0,-(sp)
    b2d4:	|  |      move.l d2,-(sp)
    b2d6:	|  |      jsr 12fc8 <__gtsf2>
    b2dc:	|  |      addq.l #8,sp
    b2de:	|  |      tst.l d0
    b2e0:	|  +----- ble.s b334 <builtIn_aimCamera+0x1e4>
    b2e2:	|  |      move.l 19ce4 <sceneWidth>,d0
    b2e8:	|  |      move.l d0,-(sp)
    b2ea:	|  |      jsr 12e84 <__floatunsisf>
    b2f0:	|  |      addq.l #4,sp
    b2f2:	|  |      move.l d0,d2
    b2f4:	|  |      move.l 19b4c <winWidth>,d0
    b2fa:	|  |      move.l d0,-(sp)
    b2fc:	|  |      jsr 12e84 <__floatunsisf>
    b302:	|  |      addq.l #4,sp
    b304:	|  |      move.l d0,d1
    b306:	|  |      move.l 1814a <cameraZoom>,d0
    b30c:	|  |      move.l d0,-(sp)
    b30e:	|  |      move.l d1,-(sp)
    b310:	|  |      jsr 12d08 <__divsf3>
    b316:	|  |      addq.l #8,sp
    b318:	|  |      move.l d0,-(sp)
    b31a:	|  |      move.l d2,-(sp)
    b31c:	|  |      jsr 13150 <__subsf3>
    b322:	|  |      addq.l #8,sp
    b324:	|  |      move.l d0,-(sp)
    b326:	|  |      jsr 12df4 <__fixsfsi>
    b32c:	|  |      addq.l #4,sp
    b32e:	|  |      move.l d0,19d02 <cameraX>
	if (cameraY < 0) cameraY = 0;
    b334:	|  \----> move.l 19d06 <cameraY>,d0
    b33a:	|     /-- bpl.s b346 <builtIn_aimCamera+0x1f6>
    b33c:	|     |   clr.l 19d06 <cameraY>
    b342:	|  /--|-- bra.w b3fc <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    b346:	|  |  \-> move.l 19d06 <cameraY>,d0
    b34c:	|  |      move.l d0,-(sp)
    b34e:	|  |      jsr 12e5c <__floatsisf>
    b354:	|  |      addq.l #4,sp
    b356:	|  |      move.l d0,d2
    b358:	|  |      move.l 19ce8 <sceneHeight>,d0
    b35e:	|  |      move.l d0,-(sp)
    b360:	|  |      jsr 12e84 <__floatunsisf>
    b366:	|  |      addq.l #4,sp
    b368:	|  |      move.l d0,d3
    b36a:	|  |      move.l 19b50 <winHeight>,d0
    b370:	|  |      move.l d0,-(sp)
    b372:	|  |      jsr 12e84 <__floatunsisf>
    b378:	|  |      addq.l #4,sp
    b37a:	|  |      move.l d0,d1
    b37c:	|  |      move.l 1814a <cameraZoom>,d0
    b382:	|  |      move.l d0,-(sp)
    b384:	|  |      move.l d1,-(sp)
    b386:	|  |      jsr 12d08 <__divsf3>
    b38c:	|  |      addq.l #8,sp
    b38e:	|  |      move.l d0,-(sp)
    b390:	|  |      move.l d3,-(sp)
    b392:	|  |      jsr 13150 <__subsf3>
    b398:	|  |      addq.l #8,sp
    b39a:	|  |      move.l d0,-(sp)
    b39c:	|  |      move.l d2,-(sp)
    b39e:	|  |      jsr 12fc8 <__gtsf2>
    b3a4:	|  |      addq.l #8,sp
    b3a6:	|  |      tst.l d0
    b3a8:	|  +----- ble.s b3fc <builtIn_aimCamera+0x2ac>
    b3aa:	|  |      move.l 19ce8 <sceneHeight>,d0
    b3b0:	|  |      move.l d0,-(sp)
    b3b2:	|  |      jsr 12e84 <__floatunsisf>
    b3b8:	|  |      addq.l #4,sp
    b3ba:	|  |      move.l d0,d2
    b3bc:	|  |      move.l 19b50 <winHeight>,d0
    b3c2:	|  |      move.l d0,-(sp)
    b3c4:	|  |      jsr 12e84 <__floatunsisf>
    b3ca:	|  |      addq.l #4,sp
    b3cc:	|  |      move.l d0,d1
    b3ce:	|  |      move.l 1814a <cameraZoom>,d0
    b3d4:	|  |      move.l d0,-(sp)
    b3d6:	|  |      move.l d1,-(sp)
    b3d8:	|  |      jsr 12d08 <__divsf3>
    b3de:	|  |      addq.l #8,sp
    b3e0:	|  |      move.l d0,-(sp)
    b3e2:	|  |      move.l d2,-(sp)
    b3e4:	|  |      jsr 13150 <__subsf3>
    b3ea:	|  |      addq.l #8,sp
    b3ec:	|  |      move.l d0,-(sp)
    b3ee:	|  |      jsr 12df4 <__fixsfsi>
    b3f4:	|  |      addq.l #4,sp
    b3f6:	|  |      move.l d0,19d06 <cameraY>
	return BR_CONTINUE;
    b3fc:	|  \----> moveq #2,d0
}
    b3fe:	\-------> move.l (sp)+,d2
    b400:	          move.l (sp)+,d3
    b402:	          rts

0000b404 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    b404:	       subq.l #4,sp
    b406:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b408:	       movea.l 16(sp),a0
    b40c:	       move.l 24(a0),d0
    b410:	       move.l d0,-(sp)
    b412:	       pea 1 <_start+0x1>
    b416:	       moveq #12,d0
    b418:	       add.l sp,d0
    b41a:	       move.l d0,-(sp)
    b41c:	       jsr 109b0 <getValueType>
    b422:	       lea 12(sp),sp
    b426:	       tst.w d0
    b428:	   /-- bne.s b430 <builtIn_zoomCamera+0x2c>
    b42a:	   |   moveq #1,d0
    b42c:	/--|-- bra.w b62a <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    b430:	|  \-> moveq #24,d0
    b432:	|      add.l 16(sp),d0
    b436:	|      move.l d0,-(sp)
    b438:	|      jsr 11334 <trimStack>
    b43e:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    b440:	|      move.l 19c0c <input+0xa>,d0
    b446:	|      move.l d0,-(sp)
    b448:	|      jsr 12e5c <__floatsisf>
    b44e:	|      addq.l #4,sp
    b450:	|      move.l d0,d1
    b452:	|      move.l 1814a <cameraZoom>,d0
    b458:	|      move.l d0,-(sp)
    b45a:	|      move.l d1,-(sp)
    b45c:	|      jsr 12f0e <__mulsf3>
    b462:	|      addq.l #8,sp
    b464:	|      move.l d0,-(sp)
    b466:	|      jsr 12df4 <__fixsfsi>
    b46c:	|      addq.l #4,sp
    b46e:	|      move.l d0,19c0c <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    b474:	|      move.l 19c10 <input+0xe>,d0
    b47a:	|      move.l d0,-(sp)
    b47c:	|      jsr 12e5c <__floatsisf>
    b482:	|      addq.l #4,sp
    b484:	|      move.l d0,d1
    b486:	|      move.l 1814a <cameraZoom>,d0
    b48c:	|      move.l d0,-(sp)
    b48e:	|      move.l d1,-(sp)
    b490:	|      jsr 12f0e <__mulsf3>
    b496:	|      addq.l #8,sp
    b498:	|      move.l d0,-(sp)
    b49a:	|      jsr 12df4 <__fixsfsi>
    b4a0:	|      addq.l #4,sp
    b4a2:	|      move.l d0,19c10 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    b4a8:	|      move.l 4(sp),d0
    b4ac:	|      move.l d0,-(sp)
    b4ae:	|      jsr 12e5c <__floatsisf>
    b4b4:	|      addq.l #4,sp
    b4b6:	|      move.l #1008981770,-(sp)
    b4bc:	|      move.l d0,-(sp)
    b4be:	|      jsr 12f0e <__mulsf3>
    b4c4:	|      addq.l #8,sp
    b4c6:	|      move.l d0,1814a <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    b4cc:	|      move.l 19b4c <winWidth>,d0
    b4d2:	|      move.l d0,-(sp)
    b4d4:	|      jsr 12e84 <__floatunsisf>
    b4da:	|      addq.l #4,sp
    b4dc:	|      move.l d0,d1
    b4de:	|      move.l 1814a <cameraZoom>,d0
    b4e4:	|      move.l d0,-(sp)
    b4e6:	|      move.l d1,-(sp)
    b4e8:	|      jsr 12d08 <__divsf3>
    b4ee:	|      addq.l #8,sp
    b4f0:	|      move.l d0,d2
    b4f2:	|      move.l 19ce4 <sceneWidth>,d0
    b4f8:	|      move.l d0,-(sp)
    b4fa:	|      jsr 12e84 <__floatunsisf>
    b500:	|      addq.l #4,sp
    b502:	|      move.l d0,-(sp)
    b504:	|      move.l d2,-(sp)
    b506:	|      jsr 12fc8 <__gtsf2>
    b50c:	|      addq.l #8,sp
    b50e:	|      tst.l d0
    b510:	|  /-- ble.s b546 <builtIn_zoomCamera+0x142>
    b512:	|  |   move.l 19b4c <winWidth>,d0
    b518:	|  |   move.l d0,-(sp)
    b51a:	|  |   jsr 12e84 <__floatunsisf>
    b520:	|  |   addq.l #4,sp
    b522:	|  |   move.l d0,d2
    b524:	|  |   move.l 19ce4 <sceneWidth>,d0
    b52a:	|  |   move.l d0,-(sp)
    b52c:	|  |   jsr 12e84 <__floatunsisf>
    b532:	|  |   addq.l #4,sp
    b534:	|  |   move.l d0,-(sp)
    b536:	|  |   move.l d2,-(sp)
    b538:	|  |   jsr 12d08 <__divsf3>
    b53e:	|  |   addq.l #8,sp
    b540:	|  |   move.l d0,1814a <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    b546:	|  \-> move.l 19b50 <winHeight>,d0
    b54c:	|      move.l d0,-(sp)
    b54e:	|      jsr 12e84 <__floatunsisf>
    b554:	|      addq.l #4,sp
    b556:	|      move.l d0,d1
    b558:	|      move.l 1814a <cameraZoom>,d0
    b55e:	|      move.l d0,-(sp)
    b560:	|      move.l d1,-(sp)
    b562:	|      jsr 12d08 <__divsf3>
    b568:	|      addq.l #8,sp
    b56a:	|      move.l d0,d2
    b56c:	|      move.l 19ce8 <sceneHeight>,d0
    b572:	|      move.l d0,-(sp)
    b574:	|      jsr 12e84 <__floatunsisf>
    b57a:	|      addq.l #4,sp
    b57c:	|      move.l d0,-(sp)
    b57e:	|      move.l d2,-(sp)
    b580:	|      jsr 12fc8 <__gtsf2>
    b586:	|      addq.l #8,sp
    b588:	|      tst.l d0
    b58a:	|  /-- ble.s b5c0 <builtIn_zoomCamera+0x1bc>
    b58c:	|  |   move.l 19b50 <winHeight>,d0
    b592:	|  |   move.l d0,-(sp)
    b594:	|  |   jsr 12e84 <__floatunsisf>
    b59a:	|  |   addq.l #4,sp
    b59c:	|  |   move.l d0,d2
    b59e:	|  |   move.l 19ce8 <sceneHeight>,d0
    b5a4:	|  |   move.l d0,-(sp)
    b5a6:	|  |   jsr 12e84 <__floatunsisf>
    b5ac:	|  |   addq.l #4,sp
    b5ae:	|  |   move.l d0,-(sp)
    b5b0:	|  |   move.l d2,-(sp)
    b5b2:	|  |   jsr 12d08 <__divsf3>
    b5b8:	|  |   addq.l #8,sp
    b5ba:	|  |   move.l d0,1814a <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    b5c0:	|  \-> move.l 19c0c <input+0xa>,d0
    b5c6:	|      move.l d0,-(sp)
    b5c8:	|      jsr 12e5c <__floatsisf>
    b5ce:	|      addq.l #4,sp
    b5d0:	|      move.l d0,d1
    b5d2:	|      move.l 1814a <cameraZoom>,d0
    b5d8:	|      move.l d0,-(sp)
    b5da:	|      move.l d1,-(sp)
    b5dc:	|      jsr 12d08 <__divsf3>
    b5e2:	|      addq.l #8,sp
    b5e4:	|      move.l d0,-(sp)
    b5e6:	|      jsr 12df4 <__fixsfsi>
    b5ec:	|      addq.l #4,sp
    b5ee:	|      move.l d0,19c0c <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    b5f4:	|      move.l 19c10 <input+0xe>,d0
    b5fa:	|      move.l d0,-(sp)
    b5fc:	|      jsr 12e5c <__floatsisf>
    b602:	|      addq.l #4,sp
    b604:	|      move.l d0,d1
    b606:	|      move.l 1814a <cameraZoom>,d0
    b60c:	|      move.l d0,-(sp)
    b60e:	|      move.l d1,-(sp)
    b610:	|      jsr 12d08 <__divsf3>
    b616:	|      addq.l #8,sp
    b618:	|      move.l d0,-(sp)
    b61a:	|      jsr 12df4 <__fixsfsi>
    b620:	|      addq.l #4,sp
    b622:	|      move.l d0,19c10 <input+0xe>

	return BR_CONTINUE;
    b628:	|      moveq #2,d0
}
    b62a:	\----> move.l (sp)+,d2
    b62c:	       addq.l #4,sp
    b62e:	       rts

0000b630 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    b630:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    b632:	             tst.l 8(sp)
    b636:	         /-- bne.s b64a <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    b638:	         |   pea 161f5 <main_sludge.c.2f5c5368+0x71b>
    b63e:	         |   jsr 12a04 <KPrintF>
    b644:	         |   addq.l #4,sp
		return BR_ERROR;
    b646:	         |   moveq #1,d0
    b648:	/--------|-- bra.s b6aa <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    b64a:	|        \-> jsr c58 <rand>
    b650:	|            move.l d0,d1
    b652:	|            move.l 8(sp),d0
    b656:	|            move.l d0,-(sp)
    b658:	|            move.l d1,-(sp)
    b65a:	|            jsr 13490 <__umodsi3>
    b660:	|            addq.l #8,sp
    b662:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    b664:	|     /----- bra.s b698 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    b666:	|  /--|----> move.l (sp),d0
    b668:	|  |  |      cmp.l 8(sp),d0
    b66c:	|  |  |  /-- bne.s b688 <builtIn_pickOne+0x58>
    b66e:	|  |  |  |   moveq #28,d0
    b670:	|  |  |  |   add.l 12(sp),d0
    b674:	|  |  |  |   movea.l 12(sp),a0
    b678:	|  |  |  |   move.l 24(a0),d1
    b67c:	|  |  |  |   move.l d0,-(sp)
    b67e:	|  |  |  |   move.l d1,-(sp)
    b680:	|  |  |  |   jsr 10e6a <copyVariable>
    b686:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    b688:	|  |  |  \-> moveq #24,d0
    b68a:	|  |  |      add.l 12(sp),d0
    b68e:	|  |  |      move.l d0,-(sp)
    b690:	|  |  |      jsr 11334 <trimStack>
    b696:	|  |  |      addq.l #4,sp
	while (numParams --) {
    b698:	|  |  \----> move.l 8(sp),d0
    b69c:	|  |         move.l d0,d1
    b69e:	|  |         subq.l #1,d1
    b6a0:	|  |         move.l d1,8(sp)
    b6a4:	|  |         tst.l d0
    b6a6:	|  \-------- bne.s b666 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    b6a8:	|            moveq #2,d0
}
    b6aa:	\----------> addq.l #4,sp
    b6ac:	             rts

0000b6ae <builtIn_substring>:

builtIn(substring)
{
    b6ae:	       lea -40(sp),sp
    b6b2:	       move.l a6,-(sp)
    b6b4:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    b6b6:	       movea.l 56(sp),a0
    b6ba:	       move.l 24(a0),d0
    b6be:	       move.l d0,-(sp)
    b6c0:	       pea 1 <_start+0x1>
    b6c4:	       lea 16(sp),a0
    b6c8:	       move.l a0,-(sp)
    b6ca:	       jsr 109b0 <getValueType>
    b6d0:	       lea 12(sp),sp
    b6d4:	       tst.w d0
    b6d6:	   /-- bne.s b6de <builtIn_substring+0x30>
    b6d8:	   |   moveq #1,d0
    b6da:	/--|-- bra.w b856 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    b6de:	|  \-> moveq #24,d0
    b6e0:	|      add.l 56(sp),d0
    b6e4:	|      move.l d0,-(sp)
    b6e6:	|      jsr 11334 <trimStack>
    b6ec:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    b6ee:	|      movea.l 56(sp),a0
    b6f2:	|      move.l 24(a0),d0
    b6f6:	|      move.l d0,-(sp)
    b6f8:	|      pea 1 <_start+0x1>
    b6fc:	|      lea 20(sp),a0
    b700:	|      move.l a0,-(sp)
    b702:	|      jsr 109b0 <getValueType>
    b708:	|      lea 12(sp),sp
    b70c:	|      tst.w d0
    b70e:	|  /-- bne.s b716 <builtIn_substring+0x68>
    b710:	|  |   moveq #1,d0
    b712:	+--|-- bra.w b856 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    b716:	|  \-> moveq #24,d0
    b718:	|      add.l 56(sp),d0
    b71c:	|      move.l d0,-(sp)
    b71e:	|      jsr 11334 <trimStack>
    b724:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    b726:	|      movea.l 56(sp),a0
    b72a:	|      move.l 24(a0),d0
    b72e:	|      move.l d0,-(sp)
    b730:	|      jsr 10f86 <getTextFromAnyVar>
    b736:	|      addq.l #4,sp
    b738:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    b73c:	|      moveq #24,d0
    b73e:	|      add.l 56(sp),d0
    b742:	|      move.l d0,-(sp)
    b744:	|      jsr 11334 <trimStack>
    b74a:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    b74c:	|      move.l 44(sp),-(sp)
    b750:	|      jsr fe9c <strlen>
    b756:	|      addq.l #4,sp
    b758:	|      move.l d0,d1
    b75a:	|      move.l 12(sp),d0
    b75e:	|      movea.l d0,a0
    b760:	|      move.l 8(sp),d0
    b764:	|      add.l a0,d0
    b766:	|      cmp.l d1,d0
    b768:	|  /-- bls.s b79e <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    b76a:	|  |   move.l 44(sp),-(sp)
    b76e:	|  |   jsr fe9c <strlen>
    b774:	|  |   addq.l #4,sp
    b776:	|  |   move.l d0,d1
    b778:	|  |   move.l 12(sp),d0
    b77c:	|  |   sub.l d0,d1
    b77e:	|  |   move.l d1,d0
    b780:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    b784:	|  |   move.l 44(sp),-(sp)
    b788:	|  |   jsr fe9c <strlen>
    b78e:	|  |   addq.l #4,sp
    b790:	|  |   move.l d0,d1
    b792:	|  |   move.l 12(sp),d0
    b796:	|  |   cmp.l d1,d0
    b798:	|  +-- bls.s b79e <builtIn_substring+0xf0>
            start = 0;
    b79a:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    b79e:	|  \-> move.l 8(sp),d0
    b7a2:	|  /-- bpl.s b7a8 <builtIn_substring+0xfa>
        length = 0;
    b7a4:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    b7a8:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    b7ae:	|      move.l 12(sp),d1
    b7b2:	|      move.l 8(sp),d0
    b7b6:	|      move.l d1,d2
    b7b8:	|      add.l d0,d2
    b7ba:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    b7be:	|      move.l 36(sp),d0
    b7c2:	|      sub.l 40(sp),d0
    b7c6:	|      addq.l #1,d0
    b7c8:	|      move.l d0,32(sp)
    b7cc:	|      clr.l 28(sp)
    b7d0:	|      move.l 19c4c <SysBase>,d0
    b7d6:	|      movea.l d0,a6
    b7d8:	|      move.l 32(sp),d0
    b7dc:	|      move.l 28(sp),d1
    b7e0:	|      jsr -684(a6)
    b7e4:	|      move.l d0,24(sp)
    b7e8:	|      move.l 24(sp),d0
    b7ec:	|      move.l d0,20(sp)
    if (!newString) {
    b7f0:	|  /-- bne.s b7f6 <builtIn_substring+0x148>
        return BR_ERROR;
    b7f2:	|  |   moveq #1,d0
    b7f4:	+--|-- bra.s b856 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    b7f6:	|  \-> move.l 36(sp),d0
    b7fa:	|      sub.l 40(sp),d0
    b7fe:	|      move.l d0,d1
    b800:	|      move.l 40(sp),d0
    b804:	|      add.l 44(sp),d0
    b808:	|      move.l d1,-(sp)
    b80a:	|      move.l d0,-(sp)
    b80c:	|      move.l 28(sp),-(sp)
    b810:	|      jsr 129b8 <memcpy>
    b816:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    b81a:	|      move.l 36(sp),d0
    b81e:	|      sub.l 40(sp),d0
    b822:	|      movea.l 20(sp),a0
    b826:	|      adda.l d0,a0
    b828:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    b82a:	|      moveq #28,d0
    b82c:	|      add.l 56(sp),d0
    b830:	|      move.l 20(sp),-(sp)
    b834:	|      move.l d0,-(sp)
    b836:	|      jsr 10bd2 <makeTextVar>
    b83c:	|      addq.l #8,sp
    FreeVec(newString);
    b83e:	|      move.l 20(sp),16(sp)
    b844:	|      move.l 19c4c <SysBase>,d0
    b84a:	|      movea.l d0,a6
    b84c:	|      movea.l 16(sp),a1
    b850:	|      jsr -690(a6)
    return BR_CONTINUE;
    b854:	|      moveq #2,d0
}
    b856:	\----> move.l (sp)+,d2
    b858:	       movea.l (sp)+,a6
    b85a:	       lea 40(sp),sp
    b85e:	       rts

0000b860 <builtIn_stringLength>:

builtIn(stringLength)
{
    b860:	subq.l #8,sp
    b862:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    b864:	movea.l 20(sp),a0
    b868:	move.l 24(a0),d0
    b86c:	move.l d0,-(sp)
    b86e:	jsr 10f86 <getTextFromAnyVar>
    b874:	addq.l #4,sp
    b876:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    b87a:	moveq #24,d0
    b87c:	add.l 20(sp),d0
    b880:	move.l d0,-(sp)
    b882:	jsr 11334 <trimStack>
    b888:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    b88a:	move.l 8(sp),-(sp)
    b88e:	jsr fe9c <strlen>
    b894:	addq.l #4,sp
    b896:	move.l d0,d1
    b898:	moveq #28,d0
    b89a:	add.l 20(sp),d0
    b89e:	move.l d1,-(sp)
    b8a0:	pea 1 <_start+0x1>
    b8a4:	move.l d0,-(sp)
    b8a6:	jsr 112a2 <setVariable>
    b8ac:	lea 12(sp),sp
	FreeVec(newText);
    b8b0:	move.l 8(sp),4(sp)
    b8b6:	move.l 19c4c <SysBase>,d0
    b8bc:	movea.l d0,a6
    b8be:	movea.l 4(sp),a1
    b8c2:	jsr -690(a6)
	return BR_CONTINUE;
    b8c6:	moveq #2,d0
}
    b8c8:	movea.l (sp)+,a6
    b8ca:	addq.l #8,sp
    b8cc:	rts

0000b8ce <builtIn_newStack>:

builtIn(newStack)
{
    b8ce:	             lea -12(sp),sp
    b8d2:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    b8d4:	             moveq #28,d0
    b8d6:	             add.l 24(sp),d0
    b8da:	             move.l d0,-(sp)
    b8dc:	             jsr 10bfe <unlinkVar>
    b8e2:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    b8e4:	             movea.l 24(sp),a0
    b8e8:	             moveq #6,d0
    b8ea:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    b8ee:	             moveq #12,d1
    b8f0:	             move.l d1,12(sp)
    b8f4:	             clr.l 8(sp)
    b8f8:	             move.l 19c4c <SysBase>,d0
    b8fe:	             movea.l d0,a6
    b900:	             move.l 12(sp),d0
    b904:	             move.l 8(sp),d1
    b908:	             jsr -684(a6)
    b90c:	             move.l d0,4(sp)
    b910:	             move.l 4(sp),d0
    b914:	             movea.l 24(sp),a0
    b918:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    b91c:	             movea.l 24(sp),a0
    b920:	             move.l 32(a0),d0
    b924:	         /-- bne.s b92c <builtIn_newStack+0x5e>
    b926:	         |   moveq #1,d0
    b928:	/--------|-- bra.w b9be <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    b92c:	|        \-> movea.l 24(sp),a0
    b930:	|            movea.l 32(a0),a0
    b934:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    b936:	|            movea.l 24(sp),a0
    b93a:	|            movea.l 32(a0),a0
    b93e:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    b942:	|            movea.l 24(sp),a0
    b946:	|            movea.l 32(a0),a0
    b94a:	|            moveq #1,d0
    b94c:	|            move.l d0,8(a0)
    
    while (numParams--) {
    b950:	|     /----- bra.s b9ac <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    b952:	|  /--|----> movea.l 24(sp),a0
    b956:	|  |  |      move.l 32(a0),d0
    b95a:	|  |  |      move.l d0,d1
    b95c:	|  |  |      movea.l 24(sp),a0
    b960:	|  |  |      move.l 24(a0),d0
    b964:	|  |  |      move.l d1,-(sp)
    b966:	|  |  |      move.l d0,-(sp)
    b968:	|  |  |      jsr 101ec <addVarToStack>
    b96e:	|  |  |      addq.l #8,sp
    b970:	|  |  |      tst.w d0
    b972:	|  |  |  /-- bne.s b978 <builtIn_newStack+0xaa>
    b974:	|  |  |  |   moveq #1,d0
    b976:	+--|--|--|-- bra.s b9be <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    b978:	|  |  |  \-> movea.l 24(sp),a0
    b97c:	|  |  |      movea.l 32(a0),a0
    b980:	|  |  |      move.l 4(a0),d0
    b984:	|  |  |  /-- bne.s b99c <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    b986:	|  |  |  |   movea.l 24(sp),a0
    b98a:	|  |  |  |   movea.l 32(a0),a1
    b98e:	|  |  |  |   movea.l 24(sp),a0
    b992:	|  |  |  |   movea.l 32(a0),a0
    b996:	|  |  |  |   move.l (a1),d0
    b998:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    b99c:	|  |  |  \-> moveq #24,d0
    b99e:	|  |  |      add.l 24(sp),d0
    b9a2:	|  |  |      move.l d0,-(sp)
    b9a4:	|  |  |      jsr 11334 <trimStack>
    b9aa:	|  |  |      addq.l #4,sp
    while (numParams--) {
    b9ac:	|  |  \----> move.l 20(sp),d0
    b9b0:	|  |         move.l d0,d1
    b9b2:	|  |         subq.l #1,d1
    b9b4:	|  |         move.l d1,20(sp)
    b9b8:	|  |         tst.l d0
    b9ba:	|  \-------- bne.s b952 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    b9bc:	|            moveq #2,d0
}
    b9be:	\----------> movea.l (sp)+,a6
    b9c0:	             lea 12(sp),sp
    b9c4:	             rts

0000b9c6 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    b9c6:	          movea.l 8(sp),a0
    b9ca:	          movea.l 24(a0),a0
    b9ce:	          move.l (a0),d0
    b9d0:	          moveq #6,d1
    b9d2:	          cmp.l d0,d1
    b9d4:	      /-- beq.s b9f0 <builtIn_stackSize+0x2a>
    b9d6:	      |   moveq #10,d1
    b9d8:	      |   cmp.l d0,d1
    b9da:	   /--|-- beq.s ba34 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    b9dc:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    b9de:	   |  |   pea 16228 <main_sludge.c.2f5c5368+0x74e>
    b9e4:	   |  |   jsr 12a04 <KPrintF>
    b9ea:	   |  |   addq.l #4,sp
	return BR_ERROR;
    b9ec:	   |  |   moveq #1,d0
    b9ee:	/--|--|-- bra.s ba6e <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    b9f0:	|  |  \-> movea.l 8(sp),a0
    b9f4:	|  |      movea.l 24(a0),a0
    b9f8:	|  |      move.l 4(a0),d0
    b9fc:	|  |      move.l d0,-(sp)
    b9fe:	|  |      jsr 11310 <stackSize>
    ba04:	|  |      addq.l #4,sp
    ba06:	|  |      move.l d0,d1
    ba08:	|  |      moveq #28,d0
    ba0a:	|  |      add.l 8(sp),d0
    ba0e:	|  |      move.l d1,-(sp)
    ba10:	|  |      pea 1 <_start+0x1>
    ba14:	|  |      move.l d0,-(sp)
    ba16:	|  |      jsr 112a2 <setVariable>
    ba1c:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    ba20:	|  |      moveq #24,d0
    ba22:	|  |      add.l 8(sp),d0
    ba26:	|  |      move.l d0,-(sp)
    ba28:	|  |      jsr 11334 <trimStack>
    ba2e:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    ba30:	|  |      moveq #2,d0
    ba32:	+--|----- bra.s ba6e <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    ba34:	|  \----> movea.l 8(sp),a0
    ba38:	|         movea.l 24(a0),a0
    ba3c:	|         movea.l 4(a0),a0
    ba40:	|         move.l 4(a0),d1
    ba44:	|         moveq #28,d0
    ba46:	|         add.l 8(sp),d0
    ba4a:	|         move.l d1,-(sp)
    ba4c:	|         pea 1 <_start+0x1>
    ba50:	|         move.l d0,-(sp)
    ba52:	|         jsr 112a2 <setVariable>
    ba58:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    ba5c:	|         moveq #24,d0
    ba5e:	|         add.l 8(sp),d0
    ba62:	|         move.l d0,-(sp)
    ba64:	|         jsr 11334 <trimStack>
    ba6a:	|         addq.l #4,sp
			return BR_CONTINUE;
    ba6c:	|         moveq #2,d0
}
    ba6e:	\-------> rts

0000ba70 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ba70:	       movea.l 8(sp),a0
    ba74:	       movea.l 24(a0),a0
    ba78:	       move.l (a0),d0
    ba7a:	       moveq #6,d1
    ba7c:	       cmp.l d0,d1
    ba7e:	   /-- beq.s ba92 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    ba80:	   |   pea 16251 <main_sludge.c.2f5c5368+0x777>
    ba86:	   |   jsr 12a04 <KPrintF>
    ba8c:	   |   addq.l #4,sp
		return BR_ERROR;
    ba8e:	   |   moveq #1,d0
    ba90:	/--|-- bra.s bac6 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    ba92:	|  \-> moveq #28,d0
    ba94:	|      add.l 8(sp),d0
    ba98:	|      movea.l 8(sp),a0
    ba9c:	|      move.l 24(a0),d1
    baa0:	|      move.l d0,-(sp)
    baa2:	|      move.l d1,-(sp)
    baa4:	|      jsr 104b6 <copyStack>
    baaa:	|      addq.l #8,sp
    baac:	|      tst.w d0
    baae:	|  /-- bne.s bab4 <builtIn_copyStack+0x44>
    bab0:	|  |   moveq #1,d0
    bab2:	+--|-- bra.s bac6 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    bab4:	|  \-> moveq #24,d0
    bab6:	|      add.l 8(sp),d0
    baba:	|      move.l d0,-(sp)
    babc:	|      jsr 11334 <trimStack>
    bac2:	|      addq.l #4,sp
	return BR_CONTINUE;
    bac4:	|      moveq #2,d0
}
    bac6:	\----> rts

0000bac8 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    bac8:	       movea.l 8(sp),a0
    bacc:	       movea.l 24(a0),a0
    bad0:	       movea.l 8(a0),a0
    bad4:	       move.l (a0),d0
    bad6:	       moveq #6,d1
    bad8:	       cmp.l d0,d1
    bada:	   /-- beq.s baf0 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    badc:	   |   pea 1626a <main_sludge.c.2f5c5368+0x790>
    bae2:	   |   jsr 12a04 <KPrintF>
    bae8:	   |   addq.l #4,sp
		return BR_ERROR;
    baea:	   |   moveq #1,d0
    baec:	/--|-- bra.w bb7e <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    baf0:	|  \-> movea.l 8(sp),a0
    baf4:	|      movea.l 24(a0),a0
    baf8:	|      movea.l 8(a0),a0
    bafc:	|      move.l 4(a0),d0
    bb00:	|      move.l d0,d1
    bb02:	|      movea.l 8(sp),a0
    bb06:	|      move.l 24(a0),d0
    bb0a:	|      move.l d1,-(sp)
    bb0c:	|      move.l d0,-(sp)
    bb0e:	|      jsr 101ec <addVarToStack>
    bb14:	|      addq.l #8,sp
    bb16:	|      tst.w d0
    bb18:	|  /-- bne.s bb1e <builtIn_pushToStack+0x56>
		return BR_ERROR;
    bb1a:	|  |   moveq #1,d0
    bb1c:	+--|-- bra.s bb7e <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    bb1e:	|  \-> movea.l 8(sp),a0
    bb22:	|      movea.l 24(a0),a0
    bb26:	|      movea.l 8(a0),a0
    bb2a:	|      movea.l 4(a0),a0
    bb2e:	|      movea.l (a0),a0
    bb30:	|      move.l 8(a0),d0
    bb34:	|  /-- bne.s bb5c <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    bb36:	|  |   movea.l 8(sp),a0
    bb3a:	|  |   movea.l 24(a0),a0
    bb3e:	|  |   movea.l 8(a0),a0
    bb42:	|  |   movea.l 4(a0),a1
    bb46:	|  |   movea.l 8(sp),a0
    bb4a:	|  |   movea.l 24(a0),a0
    bb4e:	|  |   movea.l 8(a0),a0
    bb52:	|  |   movea.l 4(a0),a0
    bb56:	|  |   move.l (a1),d0
    bb58:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    bb5c:	|  \-> moveq #24,d0
    bb5e:	|      add.l 8(sp),d0
    bb62:	|      move.l d0,-(sp)
    bb64:	|      jsr 11334 <trimStack>
    bb6a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    bb6c:	|      moveq #24,d0
    bb6e:	|      add.l 8(sp),d0
    bb72:	|      move.l d0,-(sp)
    bb74:	|      jsr 11334 <trimStack>
    bb7a:	|      addq.l #4,sp
	return BR_CONTINUE;
    bb7c:	|      moveq #2,d0
}
    bb7e:	\----> rts

0000bb80 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    bb80:	             movea.l 8(sp),a0
    bb84:	             movea.l 24(a0),a0
    bb88:	             movea.l 8(a0),a0
    bb8c:	             move.l (a0),d0
    bb8e:	             moveq #6,d1
    bb90:	             cmp.l d0,d1
    bb92:	         /-- beq.s bba8 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    bb94:	         |   pea 1626a <main_sludge.c.2f5c5368+0x790>
    bb9a:	         |   jsr 12a04 <KPrintF>
    bba0:	         |   addq.l #4,sp
		return BR_ERROR;
    bba2:	         |   moveq #1,d0
    bba4:	/--------|-- bra.w bc96 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    bba8:	|        \-> movea.l 8(sp),a0
    bbac:	|            movea.l 24(a0),a0
    bbb0:	|            movea.l 8(a0),a0
    bbb4:	|            movea.l 4(a0),a0
    bbb8:	|            move.l (a0),d0
    bbba:	|     /----- bne.s bc14 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    bbbc:	|     |      movea.l 8(sp),a0
    bbc0:	|     |      movea.l 24(a0),a0
    bbc4:	|     |      movea.l 8(a0),a0
    bbc8:	|     |      move.l 4(a0),d0
    bbcc:	|     |      move.l d0,d1
    bbce:	|     |      movea.l 8(sp),a0
    bbd2:	|     |      move.l 24(a0),d0
    bbd6:	|     |      move.l d1,-(sp)
    bbd8:	|     |      move.l d0,-(sp)
    bbda:	|     |      jsr 101ec <addVarToStack>
    bbe0:	|     |      addq.l #8,sp
    bbe2:	|     |      tst.w d0
    bbe4:	|     |  /-- bne.s bbec <builtIn_enqueue+0x6c>
			return BR_ERROR;
    bbe6:	|     |  |   moveq #1,d0
    bbe8:	+-----|--|-- bra.w bc96 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    bbec:	|     |  \-> movea.l 8(sp),a0
    bbf0:	|     |      movea.l 24(a0),a0
    bbf4:	|     |      movea.l 8(a0),a0
    bbf8:	|     |      movea.l 4(a0),a1
    bbfc:	|     |      movea.l 8(sp),a0
    bc00:	|     |      movea.l 24(a0),a0
    bc04:	|     |      movea.l 8(a0),a0
    bc08:	|     |      movea.l 4(a0),a0
    bc0c:	|     |      move.l (a1),d0
    bc0e:	|     |      move.l d0,4(a0)
    bc12:	|  /--|----- bra.s bc74 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    bc14:	|  |  \----> movea.l 8(sp),a0
    bc18:	|  |         movea.l 24(a0),a0
    bc1c:	|  |         movea.l 8(a0),a0
    bc20:	|  |         movea.l 4(a0),a0
    bc24:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    bc28:	|  |         move.l d0,d1
    bc2a:	|  |         addq.l #8,d1
    bc2c:	|  |         movea.l 8(sp),a0
    bc30:	|  |         move.l 24(a0),d0
    bc34:	|  |         move.l d1,-(sp)
    bc36:	|  |         move.l d0,-(sp)
    bc38:	|  |         jsr 101ec <addVarToStack>
    bc3e:	|  |         addq.l #8,sp
    bc40:	|  |         tst.w d0
    bc42:	|  |     /-- bne.s bc48 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    bc44:	|  |     |   moveq #1,d0
    bc46:	+--|-----|-- bra.s bc96 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    bc48:	|  |     \-> movea.l 8(sp),a0
    bc4c:	|  |         movea.l 24(a0),a0
    bc50:	|  |         movea.l 8(a0),a0
    bc54:	|  |         movea.l 4(a0),a0
    bc58:	|  |         movea.l 4(a0),a1
    bc5c:	|  |         movea.l 8(sp),a0
    bc60:	|  |         movea.l 24(a0),a0
    bc64:	|  |         movea.l 8(a0),a0
    bc68:	|  |         movea.l 4(a0),a0
    bc6c:	|  |         move.l 8(a1),d0
    bc70:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    bc74:	|  \-------> moveq #24,d0
    bc76:	|            add.l 8(sp),d0
    bc7a:	|            move.l d0,-(sp)
    bc7c:	|            jsr 11334 <trimStack>
    bc82:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    bc84:	|            moveq #24,d0
    bc86:	|            add.l 8(sp),d0
    bc8a:	|            move.l d0,-(sp)
    bc8c:	|            jsr 11334 <trimStack>
    bc92:	|            addq.l #4,sp
	return BR_CONTINUE;
    bc94:	|            moveq #2,d0
}
    bc96:	\----------> rts

0000bc98 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    bc98:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    bc9a:	       movea.l 12(sp),a0
    bc9e:	       movea.l 24(a0),a0
    bca2:	       movea.l 8(a0),a0
    bca6:	       move.l (a0),d0
    bca8:	       moveq #6,d1
    bcaa:	       cmp.l d0,d1
    bcac:	   /-- beq.s bcc2 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    bcae:	   |   pea 16251 <main_sludge.c.2f5c5368+0x777>
    bcb4:	   |   jsr 12a04 <KPrintF>
    bcba:	   |   addq.l #4,sp
		return BR_ERROR;
    bcbc:	   |   moveq #1,d0
    bcbe:	/--|-- bra.w bd58 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    bcc2:	|  \-> movea.l 12(sp),a0
    bcc6:	|      movea.l 24(a0),a0
    bcca:	|      movea.l 8(a0),a0
    bcce:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    bcd2:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    bcd4:	|      movea.l 12(sp),a0
    bcd8:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    bcdc:	|      clr.l -(sp)
    bcde:	|      move.l d1,-(sp)
    bce0:	|      move.l d0,-(sp)
    bce2:	|      jsr 1058c <deleteVarFromStack>
    bce8:	|      lea 12(sp),sp
    bcec:	|      move.l d0,d1
    bcee:	|      moveq #28,d0
    bcf0:	|      add.l 12(sp),d0
    bcf4:	|      move.l d1,-(sp)
    bcf6:	|      pea 1 <_start+0x1>
    bcfa:	|      move.l d0,-(sp)
    bcfc:	|      jsr 112a2 <setVariable>
    bd02:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    bd06:	|      movea.l 12(sp),a0
    bd0a:	|      movea.l 24(a0),a0
    bd0e:	|      movea.l 8(a0),a0
    bd12:	|      movea.l 4(a0),a0
    bd16:	|      move.l (a0),d0
    bd18:	|      movea.l 12(sp),a0
    bd1c:	|      movea.l 24(a0),a0
    bd20:	|      movea.l 8(a0),a0
    bd24:	|      movea.l 4(a0),a2
    bd28:	|      move.l d0,-(sp)
    bd2a:	|      jsr 112ec <stackFindLast>
    bd30:	|      addq.l #4,sp
    bd32:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    bd36:	|      moveq #24,d0
    bd38:	|      add.l 12(sp),d0
    bd3c:	|      move.l d0,-(sp)
    bd3e:	|      jsr 11334 <trimStack>
    bd44:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    bd46:	|      moveq #24,d0
    bd48:	|      add.l 12(sp),d0
    bd4c:	|      move.l d0,-(sp)
    bd4e:	|      jsr 11334 <trimStack>
    bd54:	|      addq.l #4,sp
	return BR_CONTINUE;
    bd56:	|      moveq #2,d0
}
    bd58:	\----> movea.l (sp)+,a2
    bd5a:	       rts

0000bd5c <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    bd5c:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    bd5e:	       movea.l 12(sp),a0
    bd62:	       movea.l 24(a0),a0
    bd66:	       movea.l 8(a0),a0
    bd6a:	       move.l (a0),d0
    bd6c:	       moveq #6,d1
    bd6e:	       cmp.l d0,d1
    bd70:	   /-- beq.s bd86 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    bd72:	   |   pea 16251 <main_sludge.c.2f5c5368+0x777>
    bd78:	   |   jsr 12a04 <KPrintF>
    bd7e:	   |   addq.l #4,sp
		return BR_ERROR;
    bd80:	   |   moveq #1,d0
    bd82:	/--|-- bra.w be1e <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    bd86:	|  \-> movea.l 12(sp),a0
    bd8a:	|      movea.l 24(a0),a0
    bd8e:	|      movea.l 8(a0),a0
    bd92:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    bd96:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    bd98:	|      movea.l 12(sp),a0
    bd9c:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    bda0:	|      pea 1 <_start+0x1>
    bda4:	|      move.l d1,-(sp)
    bda6:	|      move.l d0,-(sp)
    bda8:	|      jsr 1058c <deleteVarFromStack>
    bdae:	|      lea 12(sp),sp
    bdb2:	|      move.l d0,d1
    bdb4:	|      moveq #28,d0
    bdb6:	|      add.l 12(sp),d0
    bdba:	|      move.l d1,-(sp)
    bdbc:	|      pea 1 <_start+0x1>
    bdc0:	|      move.l d0,-(sp)
    bdc2:	|      jsr 112a2 <setVariable>
    bdc8:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    bdcc:	|      movea.l 12(sp),a0
    bdd0:	|      movea.l 24(a0),a0
    bdd4:	|      movea.l 8(a0),a0
    bdd8:	|      movea.l 4(a0),a0
    bddc:	|      move.l (a0),d0
    bdde:	|      movea.l 12(sp),a0
    bde2:	|      movea.l 24(a0),a0
    bde6:	|      movea.l 8(a0),a0
    bdea:	|      movea.l 4(a0),a2
    bdee:	|      move.l d0,-(sp)
    bdf0:	|      jsr 112ec <stackFindLast>
    bdf6:	|      addq.l #4,sp
    bdf8:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    bdfc:	|      moveq #24,d0
    bdfe:	|      add.l 12(sp),d0
    be02:	|      move.l d0,-(sp)
    be04:	|      jsr 11334 <trimStack>
    be0a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    be0c:	|      moveq #24,d0
    be0e:	|      add.l 12(sp),d0
    be12:	|      move.l d0,-(sp)
    be14:	|      jsr 11334 <trimStack>
    be1a:	|      addq.l #4,sp
	return BR_CONTINUE;
    be1c:	|      moveq #2,d0
}
    be1e:	\----> movea.l (sp)+,a2
    be20:	       rts

0000be22 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    be22:	       movea.l 8(sp),a0
    be26:	       movea.l 24(a0),a0
    be2a:	       move.l (a0),d0
    be2c:	       moveq #6,d1
    be2e:	       cmp.l d0,d1
    be30:	   /-- beq.s be44 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    be32:	   |   pea 16251 <main_sludge.c.2f5c5368+0x777>
    be38:	   |   jsr 12a04 <KPrintF>
    be3e:	   |   addq.l #4,sp
		return BR_ERROR;
    be40:	   |   moveq #1,d0
    be42:	/--|-- bra.s beae <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    be44:	|  \-> movea.l 8(sp),a0
    be48:	|      movea.l 24(a0),a0
    be4c:	|      movea.l 4(a0),a0
    be50:	|      move.l (a0),d0
    be52:	|  /-- bne.s be66 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    be54:	|  |   pea 16282 <main_sludge.c.2f5c5368+0x7a8>
    be5a:	|  |   jsr 12a04 <KPrintF>
    be60:	|  |   addq.l #4,sp
		return BR_ERROR;
    be62:	|  |   moveq #1,d0
    be64:	+--|-- bra.s beae <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    be66:	|  \-> moveq #28,d0
    be68:	|      add.l 8(sp),d0
    be6c:	|      movea.l 8(sp),a0
    be70:	|      movea.l 24(a0),a0
    be74:	|      movea.l 4(a0),a0
    be78:	|      move.l (a0),d1
    be7a:	|      move.l d0,-(sp)
    be7c:	|      move.l d1,-(sp)
    be7e:	|      jsr 10e6a <copyVariable>
    be84:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    be86:	|      movea.l 8(sp),a0
    be8a:	|      movea.l 24(a0),a0
    be8e:	|      move.l 4(a0),d0
    be92:	|      move.l d0,-(sp)
    be94:	|      jsr 11334 <trimStack>
    be9a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    be9c:	|      moveq #24,d0
    be9e:	|      add.l 8(sp),d0
    bea2:	|      move.l d0,-(sp)
    bea4:	|      jsr 11334 <trimStack>
    beaa:	|      addq.l #4,sp
	return BR_CONTINUE;
    beac:	|      moveq #2,d0
}
    beae:	\----> rts

0000beb0 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    beb0:	       movea.l 8(sp),a0
    beb4:	       movea.l 24(a0),a0
    beb8:	       move.l (a0),d0
    beba:	       moveq #6,d1
    bebc:	       cmp.l d0,d1
    bebe:	   /-- beq.s bed2 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    bec0:	   |   pea 16251 <main_sludge.c.2f5c5368+0x777>
    bec6:	   |   jsr 12a04 <KPrintF>
    becc:	   |   addq.l #4,sp
		return BR_ERROR;
    bece:	   |   moveq #1,d0
    bed0:	/--|-- bra.s bf26 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    bed2:	|  \-> movea.l 8(sp),a0
    bed6:	|      movea.l 24(a0),a0
    beda:	|      movea.l 4(a0),a0
    bede:	|      move.l (a0),d0
    bee0:	|  /-- bne.s bef4 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    bee2:	|  |   pea 16282 <main_sludge.c.2f5c5368+0x7a8>
    bee8:	|  |   jsr 12a04 <KPrintF>
    beee:	|  |   addq.l #4,sp
		return BR_ERROR;
    bef0:	|  |   moveq #1,d0
    bef2:	+--|-- bra.s bf26 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    bef4:	|  \-> moveq #28,d0
    bef6:	|      add.l 8(sp),d0
    befa:	|      movea.l 8(sp),a0
    befe:	|      movea.l 24(a0),a0
    bf02:	|      movea.l 4(a0),a0
    bf06:	|      move.l (a0),d1
    bf08:	|      move.l d0,-(sp)
    bf0a:	|      move.l d1,-(sp)
    bf0c:	|      jsr 10e6a <copyVariable>
    bf12:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    bf14:	|      moveq #24,d0
    bf16:	|      add.l 8(sp),d0
    bf1a:	|      move.l d0,-(sp)
    bf1c:	|      jsr 11334 <trimStack>
    bf22:	|      addq.l #4,sp
	return BR_CONTINUE;
    bf24:	|      moveq #2,d0
}
    bf26:	\----> rts

0000bf28 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    bf28:	       movea.l 8(sp),a0
    bf2c:	       movea.l 24(a0),a0
    bf30:	       move.l (a0),d0
    bf32:	       moveq #6,d1
    bf34:	       cmp.l d0,d1
    bf36:	   /-- beq.s bf4a <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    bf38:	   |   pea 16251 <main_sludge.c.2f5c5368+0x777>
    bf3e:	   |   jsr 12a04 <KPrintF>
    bf44:	   |   addq.l #4,sp
		return BR_ERROR;
    bf46:	   |   moveq #1,d0
    bf48:	/--|-- bra.s bfa0 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    bf4a:	|  \-> movea.l 8(sp),a0
    bf4e:	|      movea.l 24(a0),a0
    bf52:	|      movea.l 4(a0),a0
    bf56:	|      move.l (a0),d0
    bf58:	|  /-- bne.s bf6c <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    bf5a:	|  |   pea 16282 <main_sludge.c.2f5c5368+0x7a8>
    bf60:	|  |   jsr 12a04 <KPrintF>
    bf66:	|  |   addq.l #4,sp
		return BR_ERROR;
    bf68:	|  |   moveq #1,d0
    bf6a:	+--|-- bra.s bfa0 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    bf6c:	|  \-> moveq #28,d0
    bf6e:	|      add.l 8(sp),d0
    bf72:	|      movea.l 8(sp),a0
    bf76:	|      movea.l 24(a0),a0
    bf7a:	|      movea.l 4(a0),a0
    bf7e:	|      move.l 4(a0),d1
    bf82:	|      move.l d0,-(sp)
    bf84:	|      move.l d1,-(sp)
    bf86:	|      jsr 10e6a <copyVariable>
    bf8c:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    bf8e:	|      moveq #24,d0
    bf90:	|      add.l 8(sp),d0
    bf94:	|      move.l d0,-(sp)
    bf96:	|      jsr 11334 <trimStack>
    bf9c:	|      addq.l #4,sp
	return BR_CONTINUE;
    bf9e:	|      moveq #2,d0
}
    bfa0:	\----> rts

0000bfa2 <builtIn_random>:

builtIn(random)
{
    bfa2:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    bfa4:	       movea.l 12(sp),a0
    bfa8:	       move.l 24(a0),d0
    bfac:	       move.l d0,-(sp)
    bfae:	       pea 1 <_start+0x1>
    bfb2:	       move.l sp,d0
    bfb4:	       addq.l #8,d0
    bfb6:	       move.l d0,-(sp)
    bfb8:	       jsr 109b0 <getValueType>
    bfbe:	       lea 12(sp),sp
    bfc2:	       tst.w d0
    bfc4:	   /-- bne.s bfca <builtIn_random+0x28>
		return BR_ERROR;
    bfc6:	   |   moveq #1,d0
    bfc8:	/--|-- bra.s c014 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    bfca:	|  \-> moveq #24,d0
    bfcc:	|      add.l 12(sp),d0
    bfd0:	|      move.l d0,-(sp)
    bfd2:	|      jsr 11334 <trimStack>
    bfd8:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    bfda:	|      move.l (sp),d0
    bfdc:	|  /-- bgt.s bfe2 <builtIn_random+0x40>
    bfde:	|  |   moveq #1,d0
    bfe0:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    bfe2:	|  \-> jsr c58 <rand>
    bfe8:	|      move.l d0,d1
    bfea:	|      move.l (sp),d0
    bfec:	|      move.l d0,-(sp)
    bfee:	|      move.l d1,-(sp)
    bff0:	|      jsr 13490 <__umodsi3>
    bff6:	|      addq.l #8,sp
    bff8:	|      move.l d0,d1
    bffa:	|      moveq #28,d0
    bffc:	|      add.l 12(sp),d0
    c000:	|      move.l d1,-(sp)
    c002:	|      pea 1 <_start+0x1>
    c006:	|      move.l d0,-(sp)
    c008:	|      jsr 112a2 <setVariable>
    c00e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c012:	|      moveq #2,d0
}
    c014:	\----> addq.l #4,sp
    c016:	       rts

0000c018 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    c018:	nop
    c01a:	rts

0000c01c <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    c01c:	moveq #2,d0
}
    c01e:	rts

0000c020 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    c020:	moveq #2,d0
}
    c022:	rts

0000c024 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    c024:	moveq #2,d0
}
    c026:	rts

0000c028 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    c028:	moveq #2,d0
}
    c02a:	rts

0000c02c <builtIn_setFont>:


builtIn(setFont)
{
    c02c:	       lea -16(sp),sp
    c030:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c032:	       movea.l 28(sp),a0
    c036:	       move.l 24(a0),d0
    c03a:	       move.l d0,-(sp)
    c03c:	       pea 1 <_start+0x1>
    c040:	       lea 12(sp),a0
    c044:	       move.l a0,-(sp)
    c046:	       jsr 109b0 <getValueType>
    c04c:	       lea 12(sp),sp
    c050:	       tst.w d0
    c052:	   /-- bne.s c05a <builtIn_setFont+0x2e>
    c054:	   |   moveq #1,d0
    c056:	/--|-- bra.w c108 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    c05a:	|  \-> moveq #24,d0
    c05c:	|      add.l 28(sp),d0
    c060:	|      move.l d0,-(sp)
    c062:	|      jsr 11334 <trimStack>
    c068:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c06a:	|      movea.l 28(sp),a0
    c06e:	|      move.l 24(a0),d0
    c072:	|      move.l d0,-(sp)
    c074:	|      jsr 10f86 <getTextFromAnyVar>
    c07a:	|      addq.l #4,sp
    c07c:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    c080:	|  /-- bne.s c088 <builtIn_setFont+0x5c>
    c082:	|  |   moveq #1,d0
    c084:	+--|-- bra.w c108 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    c088:	|  \-> moveq #24,d0
    c08a:	|      add.l 28(sp),d0
    c08e:	|      move.l d0,-(sp)
    c090:	|      jsr 11334 <trimStack>
    c096:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    c098:	|      movea.l 28(sp),a0
    c09c:	|      move.l 24(a0),d0
    c0a0:	|      move.l d0,-(sp)
    c0a2:	|      pea 5 <_start+0x5>
    c0a6:	|      lea 16(sp),a0
    c0aa:	|      move.l a0,-(sp)
    c0ac:	|      jsr 109b0 <getValueType>
    c0b2:	|      lea 12(sp),sp
    c0b6:	|      tst.w d0
    c0b8:	|  /-- bne.s c0be <builtIn_setFont+0x92>
    c0ba:	|  |   moveq #1,d0
    c0bc:	+--|-- bra.s c108 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    c0be:	|  \-> moveq #24,d0
    c0c0:	|      add.l 28(sp),d0
    c0c4:	|      move.l d0,-(sp)
    c0c6:	|      jsr 11334 <trimStack>
    c0cc:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    c0ce:	|      move.l 4(sp),d1
    c0d2:	|      move.l 8(sp),d0
    c0d6:	|      move.l d1,-(sp)
    c0d8:	|      move.l 20(sp),-(sp)
    c0dc:	|      move.l d0,-(sp)
    c0de:	|      jsr 113a8 <loadFont>
    c0e4:	|      lea 12(sp),sp
    c0e8:	|      tst.w d0
    c0ea:	|  /-- bne.s c0f0 <builtIn_setFont+0xc4>
    c0ec:	|  |   moveq #1,d0
    c0ee:	+--|-- bra.s c108 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    c0f0:	|  \-> move.l 16(sp),12(sp)
    c0f6:	|      move.l 19c4c <SysBase>,d0
    c0fc:	|      movea.l d0,a6
    c0fe:	|      movea.l 12(sp),a1
    c102:	|      jsr -690(a6)

    return BR_CONTINUE;
    c106:	|      moveq #2,d0
}
    c108:	\----> movea.l (sp)+,a6
    c10a:	       lea 16(sp),sp
    c10e:	       rts

0000c110 <builtIn_inFont>:

builtIn(inFont)
{
    c110:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    c112:	       movea.l 12(sp),a0
    c116:	       move.l 24(a0),d0
    c11a:	       move.l d0,-(sp)
    c11c:	       jsr 10f86 <getTextFromAnyVar>
    c122:	       addq.l #4,sp
    c124:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    c126:	   /-- bne.s c12c <builtIn_inFont+0x1c>
    c128:	   |   moveq #1,d0
    c12a:	/--|-- bra.s c162 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    c12c:	|  \-> moveq #24,d0
    c12e:	|      add.l 12(sp),d0
    c132:	|      move.l d0,-(sp)
    c134:	|      jsr 11334 <trimStack>
    c13a:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    c13c:	|      move.l (sp),-(sp)
    c13e:	|      jsr 1137c <isInFont>
    c144:	|      addq.l #4,sp
    c146:	|      movea.w d0,a0
    c148:	|      moveq #28,d0
    c14a:	|      add.l 12(sp),d0
    c14e:	|      move.l a0,-(sp)
    c150:	|      pea 1 <_start+0x1>
    c154:	|      move.l d0,-(sp)
    c156:	|      jsr 112a2 <setVariable>
    c15c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c160:	|      moveq #2,d0
}
    c162:	\----> addq.l #4,sp
    c164:	       rts

0000c166 <builtIn_pasteString>:

builtIn(pasteString)
{
    c166:	       lea -16(sp),sp
    c16a:	       move.l a6,-(sp)
    c16c:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c16e:	       movea.l 32(sp),a0
    c172:	       move.l 24(a0),d0
    c176:	       move.l d0,-(sp)
    c178:	       jsr 10f86 <getTextFromAnyVar>
    c17e:	       addq.l #4,sp
    c180:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    c184:	       moveq #24,d0
    c186:	       add.l 32(sp),d0
    c18a:	       move.l d0,-(sp)
    c18c:	       jsr 11334 <trimStack>
    c192:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c194:	       movea.l 32(sp),a0
    c198:	       move.l 24(a0),d0
    c19c:	       move.l d0,-(sp)
    c19e:	       pea 1 <_start+0x1>
    c1a2:	       lea 20(sp),a0
    c1a6:	       move.l a0,-(sp)
    c1a8:	       jsr 109b0 <getValueType>
    c1ae:	       lea 12(sp),sp
    c1b2:	       tst.w d0
    c1b4:	   /-- bne.s c1bc <builtIn_pasteString+0x56>
    c1b6:	   |   moveq #1,d0
    c1b8:	/--|-- bra.w c244 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    c1bc:	|  \-> moveq #24,d0
    c1be:	|      add.l 32(sp),d0
    c1c2:	|      move.l d0,-(sp)
    c1c4:	|      jsr 11334 <trimStack>
    c1ca:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    c1cc:	|      movea.l 32(sp),a0
    c1d0:	|      move.l 24(a0),d0
    c1d4:	|      move.l d0,-(sp)
    c1d6:	|      pea 1 <_start+0x1>
    c1da:	|      lea 16(sp),a0
    c1de:	|      move.l a0,-(sp)
    c1e0:	|      jsr 109b0 <getValueType>
    c1e6:	|      lea 12(sp),sp
    c1ea:	|      tst.w d0
    c1ec:	|  /-- bne.s c1f2 <builtIn_pasteString+0x8c>
    c1ee:	|  |   moveq #1,d0
    c1f0:	+--|-- bra.s c244 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    c1f2:	|  \-> moveq #24,d0
    c1f4:	|      add.l 32(sp),d0
    c1f8:	|      move.l d0,-(sp)
    c1fa:	|      jsr 11334 <trimStack>
    c200:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    c202:	|      move.l 8(sp),d0
    c206:	|      cmpi.l #65535,d0
    c20c:	|  /-- bne.s c22c <builtIn_pasteString+0xc6>
    c20e:	|  |   move.l 19b4c <winWidth>,d2
    c214:	|  |   move.l 20(sp),-(sp)
    c218:	|  |   jsr 1138e <stringWidth>
    c21e:	|  |   addq.l #4,sp
    c220:	|  |   move.l d2,d1
    c222:	|  |   sub.l d0,d1
    c224:	|  |   move.l d1,d0
    c226:	|  |   lsr.l #1,d0
    c228:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    c22c:	|  \-> move.l 20(sp),16(sp)
    c232:	|      move.l 19c4c <SysBase>,d0
    c238:	|      movea.l d0,a6
    c23a:	|      movea.l 16(sp),a1
    c23e:	|      jsr -690(a6)
    return BR_CONTINUE;
    c242:	|      moveq #2,d0
}
    c244:	\----> move.l (sp)+,d2
    c246:	       movea.l (sp)+,a6
    c248:	       lea 16(sp),sp
    c24c:	       rts

0000c24e <builtIn_anim>:

builtIn(anim)
{
    c24e:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    c252:	       moveq #1,d0
    c254:	       cmp.l 16(sp),d0
    c258:	   /-- blt.s c26e <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    c25a:	   |   pea 16295 <main_sludge.c.2f5c5368+0x7bb>
    c260:	   |   jsr 12a04 <KPrintF>
    c266:	   |   addq.l #4,sp
		return BR_ERROR;
    c268:	   |   moveq #1,d0
    c26a:	/--|-- bra.w c2fc <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    c26e:	|  \-> moveq #24,d1
    c270:	|      add.l 20(sp),d1
    c274:	|      move.l 16(sp),d0
    c278:	|      subq.l #1,d0
    c27a:	|      move.l d1,-(sp)
    c27c:	|      move.l d0,-(sp)
    c27e:	|      jsr 62b8 <createPersonaAnim>
    c284:	|      addq.l #8,sp
    c286:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c28a:	|      movea.l 20(sp),a0
    c28e:	|      move.l 24(a0),d0
    c292:	|      move.l d0,-(sp)
    c294:	|      pea 5 <_start+0x5>
    c298:	|      lea 8(sp),a0
    c29c:	|      move.l a0,-(sp)
    c29e:	|      jsr 109b0 <getValueType>
    c2a4:	|      lea 12(sp),sp
    c2a8:	|      tst.w d0
    c2aa:	|  /-- bne.s c2b0 <builtIn_anim+0x62>
    c2ac:	|  |   moveq #1,d0
    c2ae:	+--|-- bra.s c2fc <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    c2b0:	|  \-> moveq #24,d0
    c2b2:	|      add.l 20(sp),d0
    c2b6:	|      move.l d0,-(sp)
    c2b8:	|      jsr 11334 <trimStack>
    c2be:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    c2c0:	|      move.l (sp),d0
    c2c2:	|      move.l d0,-(sp)
    c2c4:	|      jsr 8662 <loadBankForAnim>
    c2ca:	|      addq.l #4,sp
    c2cc:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    c2d0:	|  /-- bne.s c2d6 <builtIn_anim+0x88>
    c2d2:	|  |   moveq #1,d0
    c2d4:	+--|-- bra.s c2fc <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    c2d6:	|  \-> move.l 4(sp),-(sp)
    c2da:	|      move.l 12(sp),-(sp)
    c2de:	|      jsr 7b06 <setBankFile>
    c2e4:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    c2e6:	|      moveq #28,d0
    c2e8:	|      add.l 20(sp),d0
    c2ec:	|      move.l 8(sp),-(sp)
    c2f0:	|      move.l d0,-(sp)
    c2f2:	|      jsr 1125e <newAnimationVariable>
    c2f8:	|      addq.l #8,sp
	return BR_CONTINUE;
    c2fa:	|      moveq #2,d0
}
    c2fc:	\----> lea 12(sp),sp
    c300:	       rts

0000c302 <builtIn_costume>:

builtIn(costume)
{
    c302:	          lea -32(sp),sp
    c306:	          move.l a6,-(sp)
    c308:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    c30a:	          moveq #8,d0
    c30c:	          move.l d0,32(sp)
    c310:	          clr.l 28(sp)
    c314:	          move.l 19c4c <SysBase>,d0
    c31a:	          movea.l d0,a6
    c31c:	          move.l 32(sp),d0
    c320:	          move.l 28(sp),d1
    c324:	          jsr -684(a6)
    c328:	          move.l d0,24(sp)
    c32c:	          move.l 24(sp),d0
    c330:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    c334:	      /-- bne.s c33c <builtIn_costume+0x3a>
    c336:	      |   moveq #1,d0
    c338:	/-----|-- bra.w c424 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    c33c:	|     \-> move.l 44(sp),d0
    c340:	|         pea 3 <_start+0x3>
    c344:	|         move.l d0,-(sp)
    c346:	|         jsr 13434 <__divsi3>
    c34c:	|         addq.l #8,sp
    c34e:	|         movea.l 20(sp),a0
    c352:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    c356:	|         tst.l 44(sp)
    c35a:	|     /-- beq.s c370 <builtIn_costume+0x6e>
    c35c:	|     |   movea.l 20(sp),a0
    c360:	|     |   move.l 4(a0),d1
    c364:	|     |   move.l d1,d0
    c366:	|     |   add.l d0,d0
    c368:	|     |   add.l d1,d0
    c36a:	|     |   cmp.l 44(sp),d0
    c36e:	|  /--|-- beq.s c384 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    c370:	|  |  \-> pea 162cf <main_sludge.c.2f5c5368+0x7f5>
    c376:	|  |      jsr 12a04 <KPrintF>
    c37c:	|  |      addq.l #4,sp
        return BR_ERROR;
    c37e:	|  |      moveq #1,d0
    c380:	+--|----- bra.w c424 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    c384:	|  \----> move.l 44(sp),d0
    c388:	|         add.l d0,d0
    c38a:	|         add.l d0,d0
    c38c:	|         move.l d0,16(sp)
    c390:	|         clr.l 12(sp)
    c394:	|         move.l 19c4c <SysBase>,d0
    c39a:	|         movea.l d0,a6
    c39c:	|         move.l 16(sp),d0
    c3a0:	|         move.l 12(sp),d1
    c3a4:	|         jsr -684(a6)
    c3a8:	|         move.l d0,8(sp)
    c3ac:	|         move.l 8(sp),d0
    c3b0:	|         movea.l 20(sp),a0
    c3b4:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    c3b6:	|         movea.l 20(sp),a0
    c3ba:	|         move.l (a0),d0
    c3bc:	|     /-- bne.s c3c2 <builtIn_costume+0xc0>
    c3be:	|     |   moveq #1,d0
    c3c0:	+-----|-- bra.s c424 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    c3c2:	|     \-> move.l 44(sp),d0
    c3c6:	|         subq.l #1,d0
    c3c8:	|         move.l d0,36(sp)
    c3cc:	|     /-- bra.s c408 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    c3ce:	|  /--|-> movea.l 48(sp),a0
    c3d2:	|  |  |   move.l 24(a0),d0
    c3d6:	|  |  |   movea.l 20(sp),a0
    c3da:	|  |  |   movea.l (a0),a0
    c3dc:	|  |  |   move.l 36(sp),d1
    c3e0:	|  |  |   add.l d1,d1
    c3e2:	|  |  |   add.l d1,d1
    c3e4:	|  |  |   lea (0,a0,d1.l),a2
    c3e8:	|  |  |   move.l d0,-(sp)
    c3ea:	|  |  |   jsr 10e88 <getAnimationFromVar>
    c3f0:	|  |  |   addq.l #4,sp
    c3f2:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    c3f4:	|  |  |   moveq #24,d0
    c3f6:	|  |  |   add.l 48(sp),d0
    c3fa:	|  |  |   move.l d0,-(sp)
    c3fc:	|  |  |   jsr 11334 <trimStack>
    c402:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    c404:	|  |  |   subq.l #1,36(sp)
    c408:	|  |  \-> tst.l 36(sp)
    c40c:	|  \----- bge.s c3ce <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    c40e:	|         moveq #28,d0
    c410:	|         add.l 48(sp),d0
    c414:	|         move.l 20(sp),-(sp)
    c418:	|         move.l d0,-(sp)
    c41a:	|         jsr 11280 <newCostumeVariable>
    c420:	|         addq.l #8,sp
    return BR_CONTINUE;
    c422:	|         moveq #2,d0
}
    c424:	\-------> movea.l (sp)+,a2
    c426:	          movea.l (sp)+,a6
    c428:	          lea 32(sp),sp
    c42c:	          rts

0000c42e <builtIn_launch>:

builtIn(launch)
{
    c42e:	          lea -20(sp),sp
    c432:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    c434:	          movea.l 32(sp),a0
    c438:	          move.l 24(a0),d0
    c43c:	          move.l d0,-(sp)
    c43e:	          jsr 10f86 <getTextFromAnyVar>
    c444:	          addq.l #4,sp
    c446:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    c44a:	      /-- bne.s c452 <builtIn_launch+0x24>
    c44c:	      |   moveq #1,d0
    c44e:	/-----|-- bra.w c580 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    c452:	|     \-> move.l 20(sp),-(sp)
    c456:	|         jsr 2fe <encodeFilename>
    c45c:	|         addq.l #4,sp
    c45e:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    c462:	|         moveq #24,d0
    c464:	|         add.l 32(sp),d0
    c468:	|         move.l d0,-(sp)
    c46a:	|         jsr 11334 <trimStack>
    c470:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    c472:	|         movea.l 20(sp),a0
    c476:	|         move.b (a0),d0
    c478:	|         cmpi.b #104,d0
    c47c:	|  /----- bne.s c4e6 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    c47e:	|  |      movea.l 20(sp),a0
    c482:	|  |      addq.l #1,a0
    c484:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    c486:	|  |      cmpi.b #116,d0
    c48a:	|  +----- bne.s c4e6 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    c48c:	|  |      movea.l 20(sp),a0
    c490:	|  |      addq.l #2,a0
    c492:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    c494:	|  |      cmpi.b #116,d0
    c498:	|  +----- bne.s c4e6 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    c49a:	|  |      movea.l 20(sp),a0
    c49e:	|  |      addq.l #3,a0
    c4a0:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    c4a2:	|  |      cmpi.b #112,d0
    c4a6:	|  +----- bne.s c4e6 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    c4a8:	|  |      movea.l 20(sp),a0
    c4ac:	|  |      addq.l #4,a0
    c4ae:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    c4b0:	|  |      cmpi.b #58,d0
    c4b4:	|  |  /-- beq.s c4d2 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    c4b6:	|  |  |   movea.l 20(sp),a0
    c4ba:	|  |  |   addq.l #4,a0
    c4bc:	|  |  |   move.b (a0),d0
    c4be:	|  |  |   cmpi.b #115,d0
    c4c2:	|  +--|-- bne.s c4e6 <builtIn_launch+0xb8>
    c4c4:	|  |  |   movea.l 20(sp),a0
    c4c8:	|  |  |   addq.l #5,a0
    c4ca:	|  |  |   move.b (a0),d0
    c4cc:	|  |  |   cmpi.b #58,d0
    c4d0:	|  +--|-- bne.s c4e6 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    c4d2:	|  |  \-> move.l 20(sp),-(sp)
    c4d6:	|  |      jsr b8 <copyString>
    c4dc:	|  |      addq.l #4,sp
    c4de:	|  |      move.l d0,19d0a <launchMe>
    c4e4:	|  |  /-- bra.s c538 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    c4e6:	|  \--|-> move.l 19b60 <gamePath>,d0
    c4ec:	|     |   pea 1631a <main_sludge.c.2f5c5368+0x840>
    c4f2:	|     |   move.l d0,-(sp)
    c4f4:	|     |   jsr fedc <joinStrings>
    c4fa:	|     |   addq.l #8,sp
    c4fc:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    c500:	|     |   move.l 16(sp),-(sp)
    c504:	|     |   move.l 16(sp),-(sp)
    c508:	|     |   jsr fedc <joinStrings>
    c50e:	|     |   addq.l #8,sp
    c510:	|     |   move.l d0,19d0a <launchMe>
        FreeVec(newText);
    c516:	|     |   move.l 16(sp),8(sp)
    c51c:	|     |   move.l 19c4c <SysBase>,d0
    c522:	|     |   movea.l d0,a6
    c524:	|     |   movea.l 8(sp),a1
    c528:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    c52c:	|     |   move.l 19d0a <launchMe>,d0
    c532:	|     +-- bne.s c538 <builtIn_launch+0x10a>
    c534:	|     |   moveq #1,d0
    c536:	+-----|-- bra.s c580 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    c538:	|     \-> move.l 20(sp),4(sp)
    c53e:	|         move.l 19c4c <SysBase>,d0
    c544:	|         movea.l d0,a6
    c546:	|         movea.l 4(sp),a1
    c54a:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    c54e:	|         clr.l -(sp)
    c550:	|         jsr 160c <setGraphicsWindow>
    c556:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    c558:	|         moveq #28,d0
    c55a:	|         add.l 32(sp),d0
    c55e:	|         pea 1 <_start+0x1>
    c562:	|         pea 1 <_start+0x1>
    c566:	|         move.l d0,-(sp)
    c568:	|         jsr 112a2 <setVariable>
    c56e:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    c572:	|         moveq #28,d0
    c574:	|         add.l 32(sp),d0
    c578:	|         move.l d0,19d0e <launchResult>

    return BR_KEEP_AND_PAUSE;
    c57e:	|         moveq #0,d0
}
    c580:	\-------> movea.l (sp)+,a6
    c582:	          lea 20(sp),sp
    c586:	          rts

0000c588 <builtIn_pause>:

builtIn(pause)
{
    c588:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c58a:	       movea.l 12(sp),a0
    c58e:	       move.l 24(a0),d0
    c592:	       move.l d0,-(sp)
    c594:	       pea 1 <_start+0x1>
    c598:	       move.l sp,d0
    c59a:	       addq.l #8,d0
    c59c:	       move.l d0,-(sp)
    c59e:	       jsr 109b0 <getValueType>
    c5a4:	       lea 12(sp),sp
    c5a8:	       tst.w d0
    c5aa:	   /-- bne.s c5b0 <builtIn_pause+0x28>
    c5ac:	   |   moveq #1,d0
    c5ae:	/--|-- bra.s c5de <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    c5b0:	|  \-> moveq #24,d0
    c5b2:	|      add.l 12(sp),d0
    c5b6:	|      move.l d0,-(sp)
    c5b8:	|      jsr 11334 <trimStack>
    c5be:	|      addq.l #4,sp
	if (theTime > 0) {
    c5c0:	|      move.l (sp),d0
    c5c2:	|  /-- ble.s c5dc <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    c5c4:	|  |   move.l (sp),d0
    c5c6:	|  |   subq.l #1,d0
    c5c8:	|  |   movea.l 12(sp),a0
    c5cc:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    c5d0:	|  |   movea.l 12(sp),a0
    c5d4:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    c5d8:	|  |   moveq #0,d0
    c5da:	+--|-- bra.s c5de <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    c5dc:	|  \-> moveq #2,d0
}
    c5de:	\----> addq.l #4,sp
    c5e0:	       rts

0000c5e2 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    c5e2:	jsr 220e <completeTimers>
	return BR_CONTINUE;
    c5e8:	moveq #2,d0
}
    c5ea:	rts

0000c5ec <builtIn_callEvent>:

builtIn(callEvent)
{
    c5ec:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c5f0:	       movea.l 20(sp),a0
    c5f4:	       move.l 24(a0),d0
    c5f8:	       move.l d0,-(sp)
    c5fa:	       pea 7 <_start+0x7>
    c5fe:	       lea 8(sp),a0
    c602:	       move.l a0,-(sp)
    c604:	       jsr 109b0 <getValueType>
    c60a:	       lea 12(sp),sp
    c60e:	       tst.w d0
    c610:	   /-- bne.s c618 <builtIn_callEvent+0x2c>
    c612:	   |   moveq #1,d0
    c614:	/--|-- bra.w c6ae <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    c618:	|  \-> moveq #24,d0
    c61a:	|      add.l 20(sp),d0
    c61e:	|      move.l d0,-(sp)
    c620:	|      jsr 11334 <trimStack>
    c626:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c628:	|      movea.l 20(sp),a0
    c62c:	|      move.l 24(a0),d0
    c630:	|      move.l d0,-(sp)
    c632:	|      pea 7 <_start+0x7>
    c636:	|      moveq #12,d0
    c638:	|      add.l sp,d0
    c63a:	|      move.l d0,-(sp)
    c63c:	|      jsr 109b0 <getValueType>
    c642:	|      lea 12(sp),sp
    c646:	|      tst.w d0
    c648:	|  /-- bne.s c64e <builtIn_callEvent+0x62>
    c64a:	|  |   moveq #1,d0
    c64c:	+--|-- bra.s c6ae <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    c64e:	|  \-> moveq #24,d0
    c650:	|      add.l 20(sp),d0
    c654:	|      move.l d0,-(sp)
    c656:	|      jsr 11334 <trimStack>
    c65c:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    c65e:	|      move.l (sp),d1
    c660:	|      move.l 4(sp),d0
    c664:	|      move.l d1,-(sp)
    c666:	|      move.l d0,-(sp)
    c668:	|      jsr 9836 <getCombinationFunction>
    c66e:	|      addq.l #8,sp
    c670:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    c674:	|  /-- beq.s c694 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    c676:	|  |   moveq #28,d0
    c678:	|  |   add.l 20(sp),d0
    c67c:	|  |   move.l 8(sp),-(sp)
    c680:	|  |   pea 2 <_start+0x2>
    c684:	|  |   move.l d0,-(sp)
    c686:	|  |   jsr 112a2 <setVariable>
    c68c:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    c690:	|  |   moveq #4,d0
    c692:	+--|-- bra.s c6ae <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    c694:	|  \-> moveq #28,d0
    c696:	|      add.l 20(sp),d0
    c69a:	|      clr.l -(sp)
    c69c:	|      pea 1 <_start+0x1>
    c6a0:	|      move.l d0,-(sp)
    c6a2:	|      jsr 112a2 <setVariable>
    c6a8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c6ac:	|      moveq #2,d0
}
    c6ae:	\----> lea 12(sp),sp
    c6b2:	       rts

0000c6b4 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    c6b4:	move.w #1,19d1a <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    c6bc:	moveq #2,d0
}
    c6be:	rts

0000c6c0 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    c6c0:	moveq #24,d0
    c6c2:	add.l 8(sp),d0
    c6c6:	move.l d0,-(sp)
    c6c8:	jsr 11334 <trimStack>
    c6ce:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    c6d0:	pea 1631c <main_sludge.c.2f5c5368+0x842>
    c6d6:	jsr 12a04 <KPrintF>
    c6dc:	addq.l #4,sp
	return BR_CONTINUE;
    c6de:	moveq #2,d0
}
    c6e0:	rts

0000c6e2 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    c6e2:	pea 1631c <main_sludge.c.2f5c5368+0x842>
    c6e8:	jsr 12a04 <KPrintF>
    c6ee:	addq.l #4,sp
	return BR_CONTINUE;
    c6f0:	moveq #2,d0
}
    c6f2:	rts

0000c6f4 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    c6f4:	pea 1631c <main_sludge.c.2f5c5368+0x842>
    c6fa:	jsr 12a04 <KPrintF>
    c700:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    c702:	moveq #2,d0
}
    c704:	rts

0000c706 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    c706:	pea 1631c <main_sludge.c.2f5c5368+0x842>
    c70c:	jsr 12a04 <KPrintF>
    c712:	addq.l #4,sp
	return BR_CONTINUE;
    c714:	moveq #2,d0
}
    c716:	rts

0000c718 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    c718:	pea 1631c <main_sludge.c.2f5c5368+0x842>
    c71e:	jsr 12a04 <KPrintF>
    c724:	addq.l #4,sp
	return BR_CONTINUE;
    c726:	moveq #2,d0
}
    c728:	rts

0000c72a <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    c72a:	pea 1631c <main_sludge.c.2f5c5368+0x842>
    c730:	jsr 12a04 <KPrintF>
    c736:	addq.l #4,sp
	return BR_CONTINUE;
    c738:	moveq #2,d0
}
    c73a:	rts

0000c73c <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    c73c:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c740:	       movea.l 20(sp),a0
    c744:	       move.l 24(a0),d0
    c748:	       move.l d0,-(sp)
    c74a:	       pea 1 <_start+0x1>
    c74e:	       moveq #16,d0
    c750:	       add.l sp,d0
    c752:	       move.l d0,-(sp)
    c754:	       jsr 109b0 <getValueType>
    c75a:	       lea 12(sp),sp
    c75e:	       tst.w d0
    c760:	   /-- bne.s c768 <builtIn_startMusic+0x2c>
    c762:	   |   moveq #1,d0
    c764:	/--|-- bra.w c808 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    c768:	|  \-> moveq #24,d0
    c76a:	|      add.l 20(sp),d0
    c76e:	|      move.l d0,-(sp)
    c770:	|      jsr 11334 <trimStack>
    c776:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c778:	|      movea.l 20(sp),a0
    c77c:	|      move.l 24(a0),d0
    c780:	|      move.l d0,-(sp)
    c782:	|      pea 1 <_start+0x1>
    c786:	|      moveq #12,d0
    c788:	|      add.l sp,d0
    c78a:	|      move.l d0,-(sp)
    c78c:	|      jsr 109b0 <getValueType>
    c792:	|      lea 12(sp),sp
    c796:	|      tst.w d0
    c798:	|  /-- bne.s c79e <builtIn_startMusic+0x62>
    c79a:	|  |   moveq #1,d0
    c79c:	+--|-- bra.s c808 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    c79e:	|  \-> moveq #24,d0
    c7a0:	|      add.l 20(sp),d0
    c7a4:	|      move.l d0,-(sp)
    c7a6:	|      jsr 11334 <trimStack>
    c7ac:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c7ae:	|      movea.l 20(sp),a0
    c7b2:	|      move.l 24(a0),d0
    c7b6:	|      move.l d0,-(sp)
    c7b8:	|      pea 5 <_start+0x5>
    c7bc:	|      lea 8(sp),a0
    c7c0:	|      move.l a0,-(sp)
    c7c2:	|      jsr 109b0 <getValueType>
    c7c8:	|      lea 12(sp),sp
    c7cc:	|      tst.w d0
    c7ce:	|  /-- bne.s c7d4 <builtIn_startMusic+0x98>
    c7d0:	|  |   moveq #1,d0
    c7d2:	+--|-- bra.s c808 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    c7d4:	|  \-> moveq #24,d0
    c7d6:	|      add.l 20(sp),d0
    c7da:	|      move.l d0,-(sp)
    c7dc:	|      jsr 11334 <trimStack>
    c7e2:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    c7e4:	|      movea.l 8(sp),a0
    c7e8:	|      move.l 4(sp),d1
    c7ec:	|      move.l (sp),d0
    c7ee:	|      move.l a0,-(sp)
    c7f0:	|      move.l d1,-(sp)
    c7f2:	|      move.l d0,-(sp)
    c7f4:	|      jsr 948c <playMOD>
    c7fa:	|      lea 12(sp),sp
    c7fe:	|      tst.w d0
    c800:	|  /-- bne.s c806 <builtIn_startMusic+0xca>
    c802:	|  |   moveq #2,d0
    c804:	+--|-- bra.s c808 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    c806:	|  \-> moveq #2,d0
}
    c808:	\----> lea 12(sp),sp
    c80c:	       rts

0000c80e <builtIn_stopMusic>:

builtIn(stopMusic)
{
    c80e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c810:	       movea.l 12(sp),a0
    c814:	       move.l 24(a0),d0
    c818:	       move.l d0,-(sp)
    c81a:	       pea 1 <_start+0x1>
    c81e:	       move.l sp,d0
    c820:	       addq.l #8,d0
    c822:	       move.l d0,-(sp)
    c824:	       jsr 109b0 <getValueType>
    c82a:	       lea 12(sp),sp
    c82e:	       tst.w d0
    c830:	   /-- bne.s c836 <builtIn_stopMusic+0x28>
    c832:	   |   moveq #1,d0
    c834:	/--|-- bra.s c854 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    c836:	|  \-> moveq #24,d0
    c838:	|      add.l 12(sp),d0
    c83c:	|      move.l d0,-(sp)
    c83e:	|      jsr 11334 <trimStack>
    c844:	|      addq.l #4,sp
	stopMOD (v);
    c846:	|      move.l (sp),d0
    c848:	|      move.l d0,-(sp)
    c84a:	|      jsr 9528 <stopMOD>
    c850:	|      addq.l #4,sp
	return BR_CONTINUE;
    c852:	|      moveq #2,d0
}
    c854:	\----> addq.l #4,sp
    c856:	       rts

0000c858 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    c858:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c85a:	       movea.l 16(sp),a0
    c85e:	       move.l 24(a0),d0
    c862:	       move.l d0,-(sp)
    c864:	       pea 1 <_start+0x1>
    c868:	       move.l sp,d0
    c86a:	       addq.l #8,d0
    c86c:	       move.l d0,-(sp)
    c86e:	       jsr 109b0 <getValueType>
    c874:	       lea 12(sp),sp
    c878:	       tst.w d0
    c87a:	   /-- bne.s c880 <builtIn_setMusicVolume+0x28>
    c87c:	   |   moveq #1,d0
    c87e:	/--|-- bra.s c8da <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    c880:	|  \-> moveq #24,d0
    c882:	|      add.l 16(sp),d0
    c886:	|      move.l d0,-(sp)
    c888:	|      jsr 11334 <trimStack>
    c88e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c890:	|      movea.l 16(sp),a0
    c894:	|      move.l 24(a0),d0
    c898:	|      move.l d0,-(sp)
    c89a:	|      pea 1 <_start+0x1>
    c89e:	|      moveq #12,d0
    c8a0:	|      add.l sp,d0
    c8a2:	|      move.l d0,-(sp)
    c8a4:	|      jsr 109b0 <getValueType>
    c8aa:	|      lea 12(sp),sp
    c8ae:	|      tst.w d0
    c8b0:	|  /-- bne.s c8b6 <builtIn_setMusicVolume+0x5e>
    c8b2:	|  |   moveq #1,d0
    c8b4:	+--|-- bra.s c8da <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    c8b6:	|  \-> moveq #24,d0
    c8b8:	|      add.l 16(sp),d0
    c8bc:	|      move.l d0,-(sp)
    c8be:	|      jsr 11334 <trimStack>
    c8c4:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    c8c6:	|      move.l (sp),d1
    c8c8:	|      move.l 4(sp),d0
    c8cc:	|      move.l d1,-(sp)
    c8ce:	|      move.l d0,-(sp)
    c8d0:	|      jsr 950e <setMusicVolume>
    c8d6:	|      addq.l #8,sp
	return BR_CONTINUE;
    c8d8:	|      moveq #2,d0
}
    c8da:	\----> addq.l #8,sp
    c8dc:	       rts

0000c8de <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    c8de:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c8e0:	       movea.l 12(sp),a0
    c8e4:	       move.l 24(a0),d0
    c8e8:	       move.l d0,-(sp)
    c8ea:	       pea 1 <_start+0x1>
    c8ee:	       move.l sp,d0
    c8f0:	       addq.l #8,d0
    c8f2:	       move.l d0,-(sp)
    c8f4:	       jsr 109b0 <getValueType>
    c8fa:	       lea 12(sp),sp
    c8fe:	       tst.w d0
    c900:	   /-- bne.s c906 <builtIn_setDefaultMusicVolume+0x28>
    c902:	   |   moveq #1,d0
    c904:	/--|-- bra.s c924 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    c906:	|  \-> moveq #24,d0
    c908:	|      add.l 12(sp),d0
    c90c:	|      move.l d0,-(sp)
    c90e:	|      jsr 11334 <trimStack>
    c914:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    c916:	|      move.l (sp),d0
    c918:	|      move.l d0,-(sp)
    c91a:	|      jsr 94f2 <setDefaultMusicVolume>
    c920:	|      addq.l #4,sp
	return BR_CONTINUE;
    c922:	|      moveq #2,d0
}
    c924:	\----> addq.l #4,sp
    c926:	       rts

0000c928 <builtIn_playSound>:

builtIn(playSound)
{
    c928:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c92a:	       movea.l 12(sp),a0
    c92e:	       move.l 24(a0),d0
    c932:	       move.l d0,-(sp)
    c934:	       pea 5 <_start+0x5>
    c938:	       move.l sp,d0
    c93a:	       addq.l #8,d0
    c93c:	       move.l d0,-(sp)
    c93e:	       jsr 109b0 <getValueType>
    c944:	       lea 12(sp),sp
    c948:	       tst.w d0
    c94a:	   /-- bne.s c950 <builtIn_playSound+0x28>
    c94c:	   |   moveq #1,d0
    c94e:	/--|-- bra.s c978 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    c950:	|  \-> moveq #24,d0
    c952:	|      add.l 12(sp),d0
    c956:	|      move.l d0,-(sp)
    c958:	|      jsr 11334 <trimStack>
    c95e:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    c960:	|      move.l (sp),d0
    c962:	|      clr.l -(sp)
    c964:	|      move.l d0,-(sp)
    c966:	|      jsr 9516 <startSound>
    c96c:	|      addq.l #8,sp
    c96e:	|      tst.w d0
    c970:	|  /-- bne.s c976 <builtIn_playSound+0x4e>
    c972:	|  |   moveq #2,d0
    c974:	+--|-- bra.s c978 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    c976:	|  \-> moveq #2,d0
}
    c978:	\----> addq.l #4,sp
    c97a:	       rts

0000c97c <builtIn_loopSound>:

builtIn(loopSound)
{
    c97c:	             lea -28(sp),sp
    c980:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    c982:	             tst.l 36(sp)
    c986:	         /-- bgt.s c99c <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    c988:	         |   pea 1633f <main_sludge.c.2f5c5368+0x865>
    c98e:	         |   jsr 12a04 <KPrintF>
    c994:	         |   addq.l #4,sp
		return BR_ERROR;
    c996:	         |   moveq #1,d0
    c998:	/--------|-- bra.w cb58 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    c99c:	|        \-> moveq #1,d0
    c99e:	|            cmp.l 36(sp),d0
    c9a2:	|     /----- blt.s c9fe <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    c9a4:	|     |      movea.l 40(sp),a0
    c9a8:	|     |      move.l 24(a0),d0
    c9ac:	|     |      move.l d0,-(sp)
    c9ae:	|     |      pea 5 <_start+0x5>
    c9b2:	|     |      lea 16(sp),a0
    c9b6:	|     |      move.l a0,-(sp)
    c9b8:	|     |      jsr 109b0 <getValueType>
    c9be:	|     |      lea 12(sp),sp
    c9c2:	|     |      tst.w d0
    c9c4:	|     |  /-- bne.s c9cc <builtIn_loopSound+0x50>
    c9c6:	|     |  |   moveq #1,d0
    c9c8:	+-----|--|-- bra.w cb58 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    c9cc:	|     |  \-> moveq #24,d0
    c9ce:	|     |      add.l 40(sp),d0
    c9d2:	|     |      move.l d0,-(sp)
    c9d4:	|     |      jsr 11334 <trimStack>
    c9da:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    c9dc:	|     |      move.l 8(sp),d0
    c9e0:	|     |      pea 1 <_start+0x1>
    c9e4:	|     |      move.l d0,-(sp)
    c9e6:	|     |      jsr 9516 <startSound>
    c9ec:	|     |      addq.l #8,sp
    c9ee:	|     |      tst.w d0
    c9f0:	|     |  /-- bne.s c9f8 <builtIn_loopSound+0x7c>
    c9f2:	|     |  |   moveq #2,d0
    c9f4:	+-----|--|-- bra.w cb58 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    c9f8:	|     |  \-> moveq #2,d0
    c9fa:	+-----|----- bra.w cb58 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    c9fe:	|     \----> moveq #2,d1
    ca00:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    ca04:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    ca08:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    ca0c:	|            movea.l 40(sp),a0
    ca10:	|            movea.l 24(a0),a0
    ca14:	|            move.l (a0),d0
    ca16:	|            moveq #5,d1
    ca18:	|            cmp.l d0,d1
    ca1a:	|  /-------- beq.w caf2 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    ca1e:	|  |         movea.l 40(sp),a0
    ca22:	|  |         move.l 24(a0),d0
    ca26:	|  |         move.l d0,-(sp)
    ca28:	|  |         pea 1 <_start+0x1>
    ca2c:	|  |         lea 12(sp),a0
    ca30:	|  |         move.l a0,-(sp)
    ca32:	|  |         jsr 109b0 <getValueType>
    ca38:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    ca3c:	|  |         moveq #24,d0
    ca3e:	|  |         add.l 40(sp),d0
    ca42:	|  |         move.l d0,-(sp)
    ca44:	|  |         jsr 11334 <trimStack>
    ca4a:	|  |         addq.l #4,sp
			numParams--;
    ca4c:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    ca50:	|  +-------- bra.w caf2 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    ca54:	|  |  /----> movea.l 40(sp),a0
    ca58:	|  |  |      move.l 24(a0),d0
    ca5c:	|  |  |      move.l d0,-(sp)
    ca5e:	|  |  |      pea 5 <_start+0x5>
    ca62:	|  |  |      lea 16(sp),a0
    ca66:	|  |  |      move.l a0,-(sp)
    ca68:	|  |  |      jsr 109b0 <getValueType>
    ca6e:	|  |  |      lea 12(sp),sp
    ca72:	|  |  |      tst.w d0
    ca74:	|  |  |  /-- bne.s ca8a <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    ca76:	|  |  |  |   pea 1637d <main_sludge.c.2f5c5368+0x8a3>
    ca7c:	|  |  |  |   jsr 12a04 <KPrintF>
    ca82:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    ca84:	|  |  |  |   moveq #1,d0
    ca86:	+--|--|--|-- bra.w cb58 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    ca8a:	|  |  |  \-> moveq #20,d0
    ca8c:	|  |  |      move.l d0,20(sp)
    ca90:	|  |  |      clr.l 16(sp)
    ca94:	|  |  |      move.l 19c4c <SysBase>,d0
    ca9a:	|  |  |      movea.l d0,a6
    ca9c:	|  |  |      move.l 20(sp),d0
    caa0:	|  |  |      move.l 16(sp),d1
    caa4:	|  |  |      jsr -684(a6)
    caa8:	|  |  |      move.l d0,12(sp)
    caac:	|  |  |      move.l 12(sp),d0
    cab0:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    cab4:	|  |  |  /-- bne.s cabc <builtIn_loopSound+0x140>
    cab6:	|  |  |  |   moveq #1,d0
    cab8:	+--|--|--|-- bra.w cb58 <builtIn_loopSound+0x1dc>

			s->next = old;
    cabc:	|  |  |  \-> movea.l 28(sp),a0
    cac0:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    cac6:	|  |  |      movea.l 28(sp),a0
    caca:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    cace:	|  |  |      move.l 8(sp),d0
    cad2:	|  |  |      movea.l 28(sp),a0
    cad6:	|  |  |      move.l d0,(a0)
			old = s;
    cad8:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    cade:	|  |  |      moveq #24,d0
    cae0:	|  |  |      add.l 40(sp),d0
    cae4:	|  |  |      move.l d0,-(sp)
    cae6:	|  |  |      jsr 11334 <trimStack>
    caec:	|  |  |      addq.l #4,sp
			numParams--;
    caee:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    caf2:	|  \--|----> tst.l 36(sp)
    caf6:	|     \----- bne.w ca54 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    cafa:	|        /-- bra.s cb06 <builtIn_loopSound+0x18a>
    cafc:	|     /--|-> movea.l 28(sp),a0
    cb00:	|     |  |   move.l 4(a0),28(sp)
    cb06:	|     |  \-> movea.l 28(sp),a0
    cb0a:	|     |      move.l 4(a0),d0
    cb0e:	|     \----- bne.s cafc <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    cb10:	|            move.l 4(sp),d0
    cb14:	|            moveq #1,d1
    cb16:	|            cmp.l d0,d1
    cb18:	|     /----- bge.s cb30 <builtIn_loopSound+0x1b4>
			s->next = old;
    cb1a:	|     |      movea.l 28(sp),a0
    cb1e:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    cb24:	|     |      movea.l 24(sp),a0
    cb28:	|     |      move.l 28(sp),8(a0)
    cb2e:	|     |  /-- bra.s cb40 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    cb30:	|     \--|-> move.l 4(sp),d0
    cb34:	|        +-- beq.s cb40 <builtIn_loopSound+0x1c4>
			s->next = s;
    cb36:	|        |   movea.l 28(sp),a0
    cb3a:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    cb40:	|        \-> movea.l 24(sp),a0
    cb44:	|            moveq #-1,d0
    cb46:	|            move.l d0,16(a0)
		playSoundList(old);
    cb4a:	|            move.l 24(sp),-(sp)
    cb4e:	|            jsr 9490 <playSoundList>
    cb54:	|            addq.l #4,sp
		return BR_CONTINUE;
    cb56:	|            moveq #2,d0
	}
}
    cb58:	\----------> movea.l (sp)+,a6
    cb5a:	             lea 28(sp),sp
    cb5e:	             rts

0000cb60 <builtIn_stopSound>:

builtIn(stopSound)
{
    cb60:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    cb62:	       movea.l 12(sp),a0
    cb66:	       move.l 24(a0),d0
    cb6a:	       move.l d0,-(sp)
    cb6c:	       pea 5 <_start+0x5>
    cb70:	       move.l sp,d0
    cb72:	       addq.l #8,d0
    cb74:	       move.l d0,-(sp)
    cb76:	       jsr 109b0 <getValueType>
    cb7c:	       lea 12(sp),sp
    cb80:	       tst.w d0
    cb82:	   /-- bne.s cb88 <builtIn_stopSound+0x28>
    cb84:	   |   moveq #1,d0
    cb86:	/--|-- bra.s cba6 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    cb88:	|  \-> moveq #24,d0
    cb8a:	|      add.l 12(sp),d0
    cb8e:	|      move.l d0,-(sp)
    cb90:	|      jsr 11334 <trimStack>
    cb96:	|      addq.l #4,sp
	huntKillSound (v);
    cb98:	|      move.l (sp),d0
    cb9a:	|      move.l d0,-(sp)
    cb9c:	|      jsr 9488 <huntKillSound>
    cba2:	|      addq.l #4,sp
	return BR_CONTINUE;
    cba4:	|      moveq #2,d0
}
    cba6:	\----> addq.l #4,sp
    cba8:	       rts

0000cbaa <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    cbaa:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cbac:	       movea.l 12(sp),a0
    cbb0:	       move.l 24(a0),d0
    cbb4:	       move.l d0,-(sp)
    cbb6:	       pea 1 <_start+0x1>
    cbba:	       move.l sp,d0
    cbbc:	       addq.l #8,d0
    cbbe:	       move.l d0,-(sp)
    cbc0:	       jsr 109b0 <getValueType>
    cbc6:	       lea 12(sp),sp
    cbca:	       tst.w d0
    cbcc:	   /-- bne.s cbd2 <builtIn_setDefaultSoundVolume+0x28>
    cbce:	   |   moveq #1,d0
    cbd0:	/--|-- bra.s cbf0 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    cbd2:	|  \-> moveq #24,d0
    cbd4:	|      add.l 12(sp),d0
    cbd8:	|      move.l d0,-(sp)
    cbda:	|      jsr 11334 <trimStack>
    cbe0:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    cbe2:	|      move.l (sp),d0
    cbe4:	|      move.l d0,-(sp)
    cbe6:	|      jsr 94fe <setDefaultSoundVolume>
    cbec:	|      addq.l #4,sp
	return BR_CONTINUE;
    cbee:	|      moveq #2,d0
}
    cbf0:	\----> addq.l #4,sp
    cbf2:	       rts

0000cbf4 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    cbf4:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cbf6:	       movea.l 16(sp),a0
    cbfa:	       move.l 24(a0),d0
    cbfe:	       move.l d0,-(sp)
    cc00:	       pea 1 <_start+0x1>
    cc04:	       move.l sp,d0
    cc06:	       addq.l #8,d0
    cc08:	       move.l d0,-(sp)
    cc0a:	       jsr 109b0 <getValueType>
    cc10:	       lea 12(sp),sp
    cc14:	       tst.w d0
    cc16:	   /-- bne.s cc1c <builtIn_setSoundVolume+0x28>
    cc18:	   |   moveq #1,d0
    cc1a:	/--|-- bra.s cc76 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    cc1c:	|  \-> moveq #24,d0
    cc1e:	|      add.l 16(sp),d0
    cc22:	|      move.l d0,-(sp)
    cc24:	|      jsr 11334 <trimStack>
    cc2a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    cc2c:	|      movea.l 16(sp),a0
    cc30:	|      move.l 24(a0),d0
    cc34:	|      move.l d0,-(sp)
    cc36:	|      pea 5 <_start+0x5>
    cc3a:	|      moveq #12,d0
    cc3c:	|      add.l sp,d0
    cc3e:	|      move.l d0,-(sp)
    cc40:	|      jsr 109b0 <getValueType>
    cc46:	|      lea 12(sp),sp
    cc4a:	|      tst.w d0
    cc4c:	|  /-- bne.s cc52 <builtIn_setSoundVolume+0x5e>
    cc4e:	|  |   moveq #1,d0
    cc50:	+--|-- bra.s cc76 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    cc52:	|  \-> moveq #24,d0
    cc54:	|      add.l 16(sp),d0
    cc58:	|      move.l d0,-(sp)
    cc5a:	|      jsr 11334 <trimStack>
    cc60:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    cc62:	|      move.l (sp),d1
    cc64:	|      move.l 4(sp),d0
    cc68:	|      move.l d1,-(sp)
    cc6a:	|      move.l d0,-(sp)
    cc6c:	|      jsr 9512 <setSoundVolume>
    cc72:	|      addq.l #8,sp
	return BR_CONTINUE;
    cc74:	|      moveq #2,d0
}
    cc76:	\----> addq.l #8,sp
    cc78:	       rts

0000cc7a <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    cc7a:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc7e:	       movea.l 20(sp),a0
    cc82:	       move.l 24(a0),d0
    cc86:	       move.l d0,-(sp)
    cc88:	       pea 1 <_start+0x1>
    cc8c:	       moveq #12,d0
    cc8e:	       add.l sp,d0
    cc90:	       move.l d0,-(sp)
    cc92:	       jsr 109b0 <getValueType>
    cc98:	       lea 12(sp),sp
    cc9c:	       tst.w d0
    cc9e:	   /-- bne.s cca6 <builtIn_setSoundLoopPoints+0x2c>
    cca0:	   |   moveq #1,d0
    cca2:	/--|-- bra.w cd3e <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    cca6:	|  \-> moveq #24,d0
    cca8:	|      add.l 20(sp),d0
    ccac:	|      move.l d0,-(sp)
    ccae:	|      jsr 11334 <trimStack>
    ccb4:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ccb6:	|      movea.l 20(sp),a0
    ccba:	|      move.l 24(a0),d0
    ccbe:	|      move.l d0,-(sp)
    ccc0:	|      pea 1 <_start+0x1>
    ccc4:	|      lea 8(sp),a0
    ccc8:	|      move.l a0,-(sp)
    ccca:	|      jsr 109b0 <getValueType>
    ccd0:	|      lea 12(sp),sp
    ccd4:	|      tst.w d0
    ccd6:	|  /-- bne.s ccdc <builtIn_setSoundLoopPoints+0x62>
    ccd8:	|  |   moveq #1,d0
    ccda:	+--|-- bra.s cd3e <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    ccdc:	|  \-> moveq #24,d0
    ccde:	|      add.l 20(sp),d0
    cce2:	|      move.l d0,-(sp)
    cce4:	|      jsr 11334 <trimStack>
    ccea:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ccec:	|      movea.l 20(sp),a0
    ccf0:	|      move.l 24(a0),d0
    ccf4:	|      move.l d0,-(sp)
    ccf6:	|      pea 5 <_start+0x5>
    ccfa:	|      moveq #16,d0
    ccfc:	|      add.l sp,d0
    ccfe:	|      move.l d0,-(sp)
    cd00:	|      jsr 109b0 <getValueType>
    cd06:	|      lea 12(sp),sp
    cd0a:	|      tst.w d0
    cd0c:	|  /-- bne.s cd12 <builtIn_setSoundLoopPoints+0x98>
    cd0e:	|  |   moveq #1,d0
    cd10:	+--|-- bra.s cd3e <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    cd12:	|  \-> moveq #24,d0
    cd14:	|      add.l 20(sp),d0
    cd18:	|      move.l d0,-(sp)
    cd1a:	|      jsr 11334 <trimStack>
    cd20:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    cd22:	|      movea.l 4(sp),a0
    cd26:	|      move.l (sp),d1
    cd28:	|      move.l 8(sp),d0
    cd2c:	|      move.l a0,-(sp)
    cd2e:	|      move.l d1,-(sp)
    cd30:	|      move.l d0,-(sp)
    cd32:	|      jsr 950a <setSoundLoop>
    cd38:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cd3c:	|      moveq #2,d0
}
    cd3e:	\----> lea 12(sp),sp
    cd42:	       rts

0000cd44 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    cd44:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    cd46:	          movea.l 12(sp),a0
    cd4a:	          movea.l 24(a0),a0
    cd4e:	          move.l (a0),d0
    cd50:	          moveq #5,d1
    cd52:	          cmp.l d0,d1
    cd54:	/-------- bne.s cd98 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    cd56:	|         movea.l 12(sp),a0
    cd5a:	|         move.l 24(a0),d0
    cd5e:	|         move.l d0,-(sp)
    cd60:	|         pea 5 <_start+0x5>
    cd64:	|         move.l sp,d0
    cd66:	|         addq.l #8,d0
    cd68:	|         move.l d0,-(sp)
    cd6a:	|         jsr 109b0 <getValueType>
    cd70:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    cd74:	|         moveq #24,d0
    cd76:	|         add.l 12(sp),d0
    cd7a:	|         move.l d0,-(sp)
    cd7c:	|         jsr 11334 <trimStack>
    cd82:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    cd84:	|         move.l (sp),d0
    cd86:	|         move.l d0,-(sp)
    cd88:	|         jsr 121a2 <setFloor>
    cd8e:	|         addq.l #4,sp
    cd90:	|         tst.w d0
    cd92:	|  /----- bne.s cdae <builtIn_setFloor+0x6a>
    cd94:	|  |      moveq #1,d0
    cd96:	|  |  /-- bra.s cdb0 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    cd98:	\--|--|-> moveq #24,d0
    cd9a:	   |  |   add.l 12(sp),d0
    cd9e:	   |  |   move.l d0,-(sp)
    cda0:	   |  |   jsr 11334 <trimStack>
    cda6:	   |  |   addq.l #4,sp
		setFloorNull ();
    cda8:	   |  |   jsr 1291c <setFloorNull>
	}
	return BR_CONTINUE;
    cdae:	   \--|-> moveq #2,d0
}
    cdb0:	      \-> addq.l #4,sp
    cdb2:	          rts

0000cdb4 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    cdb4:	jsr 11a3a <drawFloor>
	return BR_CONTINUE;
    cdba:	moveq #2,d0
}
    cdbc:	rts

0000cdbe <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    cdbe:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    cdc0:	          movea.l 12(sp),a0
    cdc4:	          movea.l 24(a0),a0
    cdc8:	          move.l (a0),d0
    cdca:	          moveq #5,d1
    cdcc:	          cmp.l d0,d1
    cdce:	/-------- bne.s ce12 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    cdd0:	|         movea.l 12(sp),a0
    cdd4:	|         move.l 24(a0),d0
    cdd8:	|         move.l d0,-(sp)
    cdda:	|         pea 5 <_start+0x5>
    cdde:	|         move.l sp,d0
    cde0:	|         addq.l #8,d0
    cde2:	|         move.l d0,-(sp)
    cde4:	|         jsr 109b0 <getValueType>
    cdea:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    cdee:	|         moveq #24,d0
    cdf0:	|         add.l 12(sp),d0
    cdf4:	|         move.l d0,-(sp)
    cdf6:	|         jsr 11334 <trimStack>
    cdfc:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    cdfe:	|         move.l (sp),d0
    ce00:	|         move.l d0,-(sp)
    ce02:	|         jsr 1bde <setZBuffer>
    ce08:	|         addq.l #4,sp
    ce0a:	|         tst.w d0
    ce0c:	|  /----- bne.s ce28 <builtIn_setZBuffer+0x6a>
    ce0e:	|  |      moveq #1,d0
    ce10:	|  |  /-- bra.s ce2a <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    ce12:	\--|--|-> moveq #24,d0
    ce14:	   |  |   add.l 12(sp),d0
    ce18:	   |  |   move.l d0,-(sp)
    ce1a:	   |  |   jsr 11334 <trimStack>
    ce20:	   |  |   addq.l #4,sp
		killZBuffer ();
    ce22:	   |  |   jsr 1b88 <killZBuffer>
	}
	return BR_CONTINUE;
    ce28:	   \--|-> moveq #2,d0
}
    ce2a:	      \-> addq.l #4,sp
    ce2c:	          rts

0000ce2e <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    ce2e:	pea 163b4 <main_sludge.c.2f5c5368+0x8da>
    ce34:	jsr 12a04 <KPrintF>
    ce3a:	addq.l #4,sp
	return BR_CONTINUE;
    ce3c:	moveq #2,d0
}
    ce3e:	rts

0000ce40 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ce40:	          movea.l 8(sp),a0
    ce44:	          move.l 24(a0),d0
    ce48:	          move.l d0,-(sp)
    ce4a:	          pea 1 <_start+0x1>
    ce4e:	          pea 19d16 <speechMode>
    ce54:	          jsr 109b0 <getValueType>
    ce5a:	          lea 12(sp),sp
    ce5e:	          tst.w d0
    ce60:	      /-- bne.s ce66 <builtIn_setSpeechMode+0x26>
    ce62:	      |   moveq #1,d0
    ce64:	/-----|-- bra.s ce9e <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    ce66:	|     \-> moveq #24,d0
    ce68:	|         add.l 8(sp),d0
    ce6c:	|         move.l d0,-(sp)
    ce6e:	|         jsr 11334 <trimStack>
    ce74:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    ce76:	|         move.l 19d16 <speechMode>,d0
    ce7c:	|     /-- bmi.s ce8a <builtIn_setSpeechMode+0x4a>
    ce7e:	|     |   move.l 19d16 <speechMode>,d0
    ce84:	|     |   moveq #2,d1
    ce86:	|     |   cmp.l d0,d1
    ce88:	|  /--|-- bge.s ce9c <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    ce8a:	|  |  \-> pea 163cd <main_sludge.c.2f5c5368+0x8f3>
    ce90:	|  |      jsr 12a04 <KPrintF>
    ce96:	|  |      addq.l #4,sp
		return BR_ERROR;
    ce98:	|  |      moveq #1,d0
    ce9a:	+--|----- bra.s ce9e <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    ce9c:	|  \----> moveq #2,d0
}
    ce9e:	\-------> rts

0000cea0 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    cea0:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    cea2:	       jsr 55e8 <isThereAnySpeechGoingOn>
    cea8:	       move.l d0,(sp)
	if (i == -1) {
    ceaa:	       moveq #-1,d0
    ceac:	       cmp.l (sp),d0
    ceae:	/----- bne.s ceca <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    ceb0:	|      moveq #28,d0
    ceb2:	|      add.l 12(sp),d0
    ceb6:	|      clr.l -(sp)
    ceb8:	|      pea 1 <_start+0x1>
    cebc:	|      move.l d0,-(sp)
    cebe:	|      jsr 112a2 <setVariable>
    cec4:	|      lea 12(sp),sp
    cec8:	|  /-- bra.s cee2 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    ceca:	\--|-> moveq #28,d0
    cecc:	   |   add.l 12(sp),d0
    ced0:	   |   move.l (sp),-(sp)
    ced2:	   |   pea 7 <_start+0x7>
    ced6:	   |   move.l d0,-(sp)
    ced8:	   |   jsr 112a2 <setVariable>
    cede:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    cee2:	   \-> moveq #2,d0
}
    cee4:	       addq.l #4,sp
    cee6:	       rts

0000cee8 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    cee8:	jsr 3944 <killSpeechTimers>
	return BR_CONTINUE;
    ceee:	moveq #2,d0
}
    cef0:	rts

0000cef2 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    cef2:	       move.l 19d50 <overRegion>,d0
    cef8:	/----- beq.s cf22 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    cefa:	|      movea.l 19d50 <overRegion>,a0
    cf00:	|      movea.l 28(a0),a0
    cf04:	|      move.l 4(a0),d1
    cf08:	|      moveq #28,d0
    cf0a:	|      add.l 8(sp),d0
    cf0e:	|      move.l d1,-(sp)
    cf10:	|      pea 7 <_start+0x7>
    cf14:	|      move.l d0,-(sp)
    cf16:	|      jsr 112a2 <setVariable>
    cf1c:	|      lea 12(sp),sp
    cf20:	|  /-- bra.s cf3a <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    cf22:	\--|-> moveq #28,d0
    cf24:	   |   add.l 8(sp),d0
    cf28:	   |   clr.l -(sp)
    cf2a:	   |   pea 1 <_start+0x1>
    cf2e:	   |   move.l d0,-(sp)
    cf30:	   |   jsr 112a2 <setVariable>
    cf36:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    cf3a:	   \-> moveq #2,d0
}
    cf3c:	       rts

0000cf3e <builtIn_rename>:

builtIn(rename)
{
    cf3e:	       lea -16(sp),sp
    cf42:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    cf44:	       movea.l 28(sp),a0
    cf48:	       move.l 24(a0),d0
    cf4c:	       move.l d0,-(sp)
    cf4e:	       jsr 10f86 <getTextFromAnyVar>
    cf54:	       addq.l #4,sp
    cf56:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    cf5a:	   /-- bne.s cf60 <builtIn_rename+0x22>
    cf5c:	   |   moveq #1,d0
    cf5e:	/--|-- bra.s cfda <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    cf60:	|  \-> moveq #24,d0
    cf62:	|      add.l 28(sp),d0
    cf66:	|      move.l d0,-(sp)
    cf68:	|      jsr 11334 <trimStack>
    cf6e:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    cf70:	|      movea.l 28(sp),a0
    cf74:	|      move.l 24(a0),d0
    cf78:	|      move.l d0,-(sp)
    cf7a:	|      pea 7 <_start+0x7>
    cf7e:	|      lea 12(sp),a0
    cf82:	|      move.l a0,-(sp)
    cf84:	|      jsr 109b0 <getValueType>
    cf8a:	|      lea 12(sp),sp
    cf8e:	|      tst.w d0
    cf90:	|  /-- bne.s cf96 <builtIn_rename+0x58>
    cf92:	|  |   moveq #1,d0
    cf94:	+--|-- bra.s cfda <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    cf96:	|  \-> moveq #24,d0
    cf98:	|      add.l 28(sp),d0
    cf9c:	|      move.l d0,-(sp)
    cf9e:	|      jsr 11334 <trimStack>
    cfa4:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    cfa6:	|      move.l 4(sp),d0
    cfaa:	|      move.l d0,-(sp)
    cfac:	|      jsr 9802 <findObjectType>
    cfb2:	|      addq.l #4,sp
    cfb4:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    cfb8:	|      movea.l 12(sp),a0
    cfbc:	|      move.l (a0),8(sp)
    cfc0:	|      move.l 19c4c <SysBase>,d0
    cfc6:	|      movea.l d0,a6
    cfc8:	|      movea.l 8(sp),a1
    cfcc:	|      jsr -690(a6)
	o->screenName = newText;
    cfd0:	|      movea.l 12(sp),a0
    cfd4:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    cfd8:	|      moveq #2,d0
}
    cfda:	\----> movea.l (sp)+,a6
    cfdc:	       lea 16(sp),sp
    cfe0:	       rts

0000cfe2 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    cfe2:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cfe6:	          movea.l 20(sp),a0
    cfea:	          move.l 24(a0),d0
    cfee:	          move.l d0,-(sp)
    cff0:	          pea 7 <_start+0x7>
    cff4:	          lea 8(sp),a0
    cff8:	          move.l a0,-(sp)
    cffa:	          jsr 109b0 <getValueType>
    d000:	          lea 12(sp),sp
    d004:	          tst.w d0
    d006:	      /-- bne.s d00e <builtIn_getObjectX+0x2c>
    d008:	      |   moveq #1,d0
    d00a:	/-----|-- bra.w d0aa <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    d00e:	|     \-> moveq #24,d0
    d010:	|         add.l 20(sp),d0
    d014:	|         move.l d0,-(sp)
    d016:	|         jsr 11334 <trimStack>
    d01c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    d01e:	|         move.l (sp),d0
    d020:	|         move.l d0,-(sp)
    d022:	|         jsr 6be4 <findPerson>
    d028:	|         addq.l #4,sp
    d02a:	|         move.l d0,8(sp)
	if (pers) {
    d02e:	|     /-- beq.s d05c <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    d030:	|     |   movea.l 8(sp),a0
    d034:	|     |   move.l (a0),d0
    d036:	|     |   move.l d0,-(sp)
    d038:	|     |   jsr 12df4 <__fixsfsi>
    d03e:	|     |   addq.l #4,sp
    d040:	|     |   move.l d0,d1
    d042:	|     |   moveq #28,d0
    d044:	|     |   add.l 20(sp),d0
    d048:	|     |   move.l d1,-(sp)
    d04a:	|     |   pea 1 <_start+0x1>
    d04e:	|     |   move.l d0,-(sp)
    d050:	|     |   jsr 112a2 <setVariable>
    d056:	|     |   lea 12(sp),sp
    d05a:	|  /--|-- bra.s d0a8 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    d05c:	|  |  \-> move.l (sp),d0
    d05e:	|  |      move.l d0,-(sp)
    d060:	|  |      jsr 1147a <getRegionForObject>
    d066:	|  |      addq.l #4,sp
    d068:	|  |      move.l d0,4(sp)
		if (la) {
    d06c:	|  |  /-- beq.s d090 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    d06e:	|  |  |   movea.l 4(sp),a0
    d072:	|  |  |   move.l 16(a0),d1
    d076:	|  |  |   moveq #28,d0
    d078:	|  |  |   add.l 20(sp),d0
    d07c:	|  |  |   move.l d1,-(sp)
    d07e:	|  |  |   pea 1 <_start+0x1>
    d082:	|  |  |   move.l d0,-(sp)
    d084:	|  |  |   jsr 112a2 <setVariable>
    d08a:	|  |  |   lea 12(sp),sp
    d08e:	|  +--|-- bra.s d0a8 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    d090:	|  |  \-> moveq #28,d0
    d092:	|  |      add.l 20(sp),d0
    d096:	|  |      clr.l -(sp)
    d098:	|  |      pea 1 <_start+0x1>
    d09c:	|  |      move.l d0,-(sp)
    d09e:	|  |      jsr 112a2 <setVariable>
    d0a4:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    d0a8:	|  \----> moveq #2,d0
}
    d0aa:	\-------> lea 12(sp),sp
    d0ae:	          rts

0000d0b0 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    d0b0:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d0b4:	          movea.l 20(sp),a0
    d0b8:	          move.l 24(a0),d0
    d0bc:	          move.l d0,-(sp)
    d0be:	          pea 7 <_start+0x7>
    d0c2:	          lea 8(sp),a0
    d0c6:	          move.l a0,-(sp)
    d0c8:	          jsr 109b0 <getValueType>
    d0ce:	          lea 12(sp),sp
    d0d2:	          tst.w d0
    d0d4:	      /-- bne.s d0dc <builtIn_getObjectY+0x2c>
    d0d6:	      |   moveq #1,d0
    d0d8:	/-----|-- bra.w d17a <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    d0dc:	|     \-> moveq #24,d0
    d0de:	|         add.l 20(sp),d0
    d0e2:	|         move.l d0,-(sp)
    d0e4:	|         jsr 11334 <trimStack>
    d0ea:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    d0ec:	|         move.l (sp),d0
    d0ee:	|         move.l d0,-(sp)
    d0f0:	|         jsr 6be4 <findPerson>
    d0f6:	|         addq.l #4,sp
    d0f8:	|         move.l d0,8(sp)
	if (pers) {
    d0fc:	|     /-- beq.s d12c <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    d0fe:	|     |   movea.l 8(sp),a0
    d102:	|     |   move.l 4(a0),d0
    d106:	|     |   move.l d0,-(sp)
    d108:	|     |   jsr 12df4 <__fixsfsi>
    d10e:	|     |   addq.l #4,sp
    d110:	|     |   move.l d0,d1
    d112:	|     |   moveq #28,d0
    d114:	|     |   add.l 20(sp),d0
    d118:	|     |   move.l d1,-(sp)
    d11a:	|     |   pea 1 <_start+0x1>
    d11e:	|     |   move.l d0,-(sp)
    d120:	|     |   jsr 112a2 <setVariable>
    d126:	|     |   lea 12(sp),sp
    d12a:	|  /--|-- bra.s d178 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    d12c:	|  |  \-> move.l (sp),d0
    d12e:	|  |      move.l d0,-(sp)
    d130:	|  |      jsr 1147a <getRegionForObject>
    d136:	|  |      addq.l #4,sp
    d138:	|  |      move.l d0,4(sp)
		if (la) {
    d13c:	|  |  /-- beq.s d160 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    d13e:	|  |  |   movea.l 4(sp),a0
    d142:	|  |  |   move.l 20(a0),d1
    d146:	|  |  |   moveq #28,d0
    d148:	|  |  |   add.l 20(sp),d0
    d14c:	|  |  |   move.l d1,-(sp)
    d14e:	|  |  |   pea 1 <_start+0x1>
    d152:	|  |  |   move.l d0,-(sp)
    d154:	|  |  |   jsr 112a2 <setVariable>
    d15a:	|  |  |   lea 12(sp),sp
    d15e:	|  +--|-- bra.s d178 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    d160:	|  |  \-> moveq #28,d0
    d162:	|  |      add.l 20(sp),d0
    d166:	|  |      clr.l -(sp)
    d168:	|  |      pea 1 <_start+0x1>
    d16c:	|  |      move.l d0,-(sp)
    d16e:	|  |      jsr 112a2 <setVariable>
    d174:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    d178:	|  \----> moveq #2,d0
}
    d17a:	\-------> lea 12(sp),sp
    d17e:	          rts

0000d180 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    d180:	       lea -32(sp),sp
    d184:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d188:	       movea.l 56(sp),a0
    d18c:	       move.l 24(a0),d0
    d190:	       move.l d0,-(sp)
    d192:	       pea 1 <_start+0x1>
    d196:	       lea 28(sp),a0
    d19a:	       move.l a0,-(sp)
    d19c:	       jsr 109b0 <getValueType>
    d1a2:	       lea 12(sp),sp
    d1a6:	       tst.w d0
    d1a8:	   /-- bne.s d1b0 <builtIn_addScreenRegion+0x30>
    d1aa:	   |   moveq #1,d0
    d1ac:	/--|-- bra.w d38a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d1b0:	|  \-> moveq #24,d0
    d1b2:	|      add.l 56(sp),d0
    d1b6:	|      move.l d0,-(sp)
    d1b8:	|      jsr 11334 <trimStack>
    d1be:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d1c0:	|      movea.l 56(sp),a0
    d1c4:	|      move.l 24(a0),d0
    d1c8:	|      move.l d0,-(sp)
    d1ca:	|      pea 1 <_start+0x1>
    d1ce:	|      moveq #48,d0
    d1d0:	|      add.l sp,d0
    d1d2:	|      move.l d0,-(sp)
    d1d4:	|      jsr 109b0 <getValueType>
    d1da:	|      lea 12(sp),sp
    d1de:	|      tst.w d0
    d1e0:	|  /-- bne.s d1e8 <builtIn_addScreenRegion+0x68>
    d1e2:	|  |   moveq #1,d0
    d1e4:	+--|-- bra.w d38a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d1e8:	|  \-> moveq #24,d0
    d1ea:	|      add.l 56(sp),d0
    d1ee:	|      move.l d0,-(sp)
    d1f0:	|      jsr 11334 <trimStack>
    d1f6:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d1f8:	|      movea.l 56(sp),a0
    d1fc:	|      move.l 24(a0),d0
    d200:	|      move.l d0,-(sp)
    d202:	|      pea 1 <_start+0x1>
    d206:	|      moveq #52,d0
    d208:	|      add.l sp,d0
    d20a:	|      move.l d0,-(sp)
    d20c:	|      jsr 109b0 <getValueType>
    d212:	|      lea 12(sp),sp
    d216:	|      tst.w d0
    d218:	|  /-- bne.s d220 <builtIn_addScreenRegion+0xa0>
    d21a:	|  |   moveq #1,d0
    d21c:	+--|-- bra.w d38a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d220:	|  \-> moveq #24,d0
    d222:	|      add.l 56(sp),d0
    d226:	|      move.l d0,-(sp)
    d228:	|      jsr 11334 <trimStack>
    d22e:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d230:	|      movea.l 56(sp),a0
    d234:	|      move.l 24(a0),d0
    d238:	|      move.l d0,-(sp)
    d23a:	|      pea 1 <_start+0x1>
    d23e:	|      lea 32(sp),a0
    d242:	|      move.l a0,-(sp)
    d244:	|      jsr 109b0 <getValueType>
    d24a:	|      lea 12(sp),sp
    d24e:	|      tst.w d0
    d250:	|  /-- bne.s d258 <builtIn_addScreenRegion+0xd8>
    d252:	|  |   moveq #1,d0
    d254:	+--|-- bra.w d38a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d258:	|  \-> moveq #24,d0
    d25a:	|      add.l 56(sp),d0
    d25e:	|      move.l d0,-(sp)
    d260:	|      jsr 11334 <trimStack>
    d266:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d268:	|      movea.l 56(sp),a0
    d26c:	|      move.l 24(a0),d0
    d270:	|      move.l d0,-(sp)
    d272:	|      pea 1 <_start+0x1>
    d276:	|      lea 36(sp),a0
    d27a:	|      move.l a0,-(sp)
    d27c:	|      jsr 109b0 <getValueType>
    d282:	|      lea 12(sp),sp
    d286:	|      tst.w d0
    d288:	|  /-- bne.s d290 <builtIn_addScreenRegion+0x110>
    d28a:	|  |   moveq #1,d0
    d28c:	+--|-- bra.w d38a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d290:	|  \-> moveq #24,d0
    d292:	|      add.l 56(sp),d0
    d296:	|      move.l d0,-(sp)
    d298:	|      jsr 11334 <trimStack>
    d29e:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d2a0:	|      movea.l 56(sp),a0
    d2a4:	|      move.l 24(a0),d0
    d2a8:	|      move.l d0,-(sp)
    d2aa:	|      pea 1 <_start+0x1>
    d2ae:	|      lea 40(sp),a0
    d2b2:	|      move.l a0,-(sp)
    d2b4:	|      jsr 109b0 <getValueType>
    d2ba:	|      lea 12(sp),sp
    d2be:	|      tst.w d0
    d2c0:	|  /-- bne.s d2c8 <builtIn_addScreenRegion+0x148>
    d2c2:	|  |   moveq #1,d0
    d2c4:	+--|-- bra.w d38a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d2c8:	|  \-> moveq #24,d0
    d2ca:	|      add.l 56(sp),d0
    d2ce:	|      move.l d0,-(sp)
    d2d0:	|      jsr 11334 <trimStack>
    d2d6:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d2d8:	|      movea.l 56(sp),a0
    d2dc:	|      move.l 24(a0),d0
    d2e0:	|      move.l d0,-(sp)
    d2e2:	|      pea 1 <_start+0x1>
    d2e6:	|      lea 44(sp),a0
    d2ea:	|      move.l a0,-(sp)
    d2ec:	|      jsr 109b0 <getValueType>
    d2f2:	|      lea 12(sp),sp
    d2f6:	|      tst.w d0
    d2f8:	|  /-- bne.s d300 <builtIn_addScreenRegion+0x180>
    d2fa:	|  |   moveq #1,d0
    d2fc:	+--|-- bra.w d38a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d300:	|  \-> moveq #24,d0
    d302:	|      add.l 56(sp),d0
    d306:	|      move.l d0,-(sp)
    d308:	|      jsr 11334 <trimStack>
    d30e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d310:	|      movea.l 56(sp),a0
    d314:	|      move.l 24(a0),d0
    d318:	|      move.l d0,-(sp)
    d31a:	|      pea 7 <_start+0x7>
    d31e:	|      lea 24(sp),a0
    d322:	|      move.l a0,-(sp)
    d324:	|      jsr 109b0 <getValueType>
    d32a:	|      lea 12(sp),sp
    d32e:	|      tst.w d0
    d330:	|  /-- bne.s d336 <builtIn_addScreenRegion+0x1b6>
    d332:	|  |   moveq #1,d0
    d334:	+--|-- bra.s d38a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d336:	|  \-> moveq #24,d0
    d338:	|      add.l 56(sp),d0
    d33c:	|      move.l d0,-(sp)
    d33e:	|      jsr 11334 <trimStack>
    d344:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    d346:	|      move.l 16(sp),d5
    d34a:	|      move.l 20(sp),d4
    d34e:	|      move.l 40(sp),d3
    d352:	|      move.l 44(sp),d2
    d356:	|      movea.l 24(sp),a1
    d35a:	|      movea.l 28(sp),a0
    d35e:	|      move.l 32(sp),d1
    d362:	|      move.l 36(sp),d0
    d366:	|      move.l d5,-(sp)
    d368:	|      move.l d4,-(sp)
    d36a:	|      move.l d3,-(sp)
    d36c:	|      move.l d2,-(sp)
    d36e:	|      move.l a1,-(sp)
    d370:	|      move.l a0,-(sp)
    d372:	|      move.l d1,-(sp)
    d374:	|      move.l d0,-(sp)
    d376:	|      jsr 113ba <addScreenRegion>
    d37c:	|      lea 32(sp),sp
    d380:	|      tst.w d0
    d382:	|  /-- beq.s d388 <builtIn_addScreenRegion+0x208>
    d384:	|  |   moveq #2,d0
    d386:	+--|-- bra.s d38a <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    d388:	|  \-> moveq #1,d0

}
    d38a:	\----> movem.l (sp)+,d2-d5
    d38e:	       lea 32(sp),sp
    d392:	       rts

0000d394 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    d394:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d396:	       movea.l 12(sp),a0
    d39a:	       move.l 24(a0),d0
    d39e:	       move.l d0,-(sp)
    d3a0:	       pea 7 <_start+0x7>
    d3a4:	       move.l sp,d0
    d3a6:	       addq.l #8,d0
    d3a8:	       move.l d0,-(sp)
    d3aa:	       jsr 109b0 <getValueType>
    d3b0:	       lea 12(sp),sp
    d3b4:	       tst.w d0
    d3b6:	   /-- bne.s d3bc <builtIn_removeScreenRegion+0x28>
    d3b8:	   |   moveq #1,d0
    d3ba:	/--|-- bra.s d3da <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    d3bc:	|  \-> moveq #24,d0
    d3be:	|      add.l 12(sp),d0
    d3c2:	|      move.l d0,-(sp)
    d3c4:	|      jsr 11334 <trimStack>
    d3ca:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    d3cc:	|      move.l (sp),d0
    d3ce:	|      move.l d0,-(sp)
    d3d0:	|      jsr 11622 <removeScreenRegion>
    d3d6:	|      addq.l #4,sp
	return BR_CONTINUE;
    d3d8:	|      moveq #2,d0
}
    d3da:	\----> addq.l #4,sp
    d3dc:	       rts

0000d3de <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    d3de:	jsr 117a6 <showBoxes>
	return BR_CONTINUE;
    d3e4:	moveq #2,d0
}
    d3e6:	rts

0000d3e8 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    d3e8:	jsr 114a8 <killAllRegions>
	return BR_CONTINUE;
    d3ee:	moveq #2,d0
}
    d3f0:	rts

0000d3f2 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    d3f2:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    d3f6:	       movea.l 24(sp),a0
    d3fa:	       move.l 24(a0),d0
    d3fe:	       move.l d0,-(sp)
    d400:	       jsr 1065c <getCostumeFromVar>
    d406:	       addq.l #4,sp
    d408:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    d40c:	   /-- bne.s d414 <builtIn_addCharacter+0x22>
    d40e:	   |   moveq #1,d0
    d410:	/--|-- bra.w d4f0 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    d414:	|  \-> moveq #24,d0
    d416:	|      add.l 24(sp),d0
    d41a:	|      move.l d0,-(sp)
    d41c:	|      jsr 11334 <trimStack>
    d422:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d424:	|      movea.l 24(sp),a0
    d428:	|      move.l 24(a0),d0
    d42c:	|      move.l d0,-(sp)
    d42e:	|      pea 1 <_start+0x1>
    d432:	|      lea 12(sp),a0
    d436:	|      move.l a0,-(sp)
    d438:	|      jsr 109b0 <getValueType>
    d43e:	|      lea 12(sp),sp
    d442:	|      tst.w d0
    d444:	|  /-- bne.s d44c <builtIn_addCharacter+0x5a>
    d446:	|  |   moveq #1,d0
    d448:	+--|-- bra.w d4f0 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d44c:	|  \-> moveq #24,d0
    d44e:	|      add.l 24(sp),d0
    d452:	|      move.l d0,-(sp)
    d454:	|      jsr 11334 <trimStack>
    d45a:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d45c:	|      movea.l 24(sp),a0
    d460:	|      move.l 24(a0),d0
    d464:	|      move.l d0,-(sp)
    d466:	|      pea 1 <_start+0x1>
    d46a:	|      moveq #16,d0
    d46c:	|      add.l sp,d0
    d46e:	|      move.l d0,-(sp)
    d470:	|      jsr 109b0 <getValueType>
    d476:	|      lea 12(sp),sp
    d47a:	|      tst.w d0
    d47c:	|  /-- bne.s d482 <builtIn_addCharacter+0x90>
    d47e:	|  |   moveq #1,d0
    d480:	+--|-- bra.s d4f0 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d482:	|  \-> moveq #24,d0
    d484:	|      add.l 24(sp),d0
    d488:	|      move.l d0,-(sp)
    d48a:	|      jsr 11334 <trimStack>
    d490:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d492:	|      movea.l 24(sp),a0
    d496:	|      move.l 24(a0),d0
    d49a:	|      move.l d0,-(sp)
    d49c:	|      pea 7 <_start+0x7>
    d4a0:	|      lea 8(sp),a0
    d4a4:	|      move.l a0,-(sp)
    d4a6:	|      jsr 109b0 <getValueType>
    d4ac:	|      lea 12(sp),sp
    d4b0:	|      tst.w d0
    d4b2:	|  /-- bne.s d4b8 <builtIn_addCharacter+0xc6>
    d4b4:	|  |   moveq #1,d0
    d4b6:	+--|-- bra.s d4f0 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d4b8:	|  \-> moveq #24,d0
    d4ba:	|      add.l 24(sp),d0
    d4be:	|      move.l d0,-(sp)
    d4c0:	|      jsr 11334 <trimStack>
    d4c6:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    d4c8:	|      movea.l (sp),a0
    d4ca:	|      move.l 4(sp),d1
    d4ce:	|      move.l 8(sp),d0
    d4d2:	|      move.l 12(sp),-(sp)
    d4d6:	|      move.l a0,-(sp)
    d4d8:	|      move.l d1,-(sp)
    d4da:	|      move.l d0,-(sp)
    d4dc:	|      jsr 5e0a <addPerson>
    d4e2:	|      lea 16(sp),sp
    d4e6:	|      tst.w d0
    d4e8:	|  /-- beq.s d4ee <builtIn_addCharacter+0xfc>
    d4ea:	|  |   moveq #2,d0
    d4ec:	+--|-- bra.s d4f0 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    d4ee:	|  \-> moveq #1,d0
}
    d4f0:	\----> lea 16(sp),sp
    d4f4:	       rts

0000d4f6 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    d4f6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d4f8:	       movea.l 12(sp),a0
    d4fc:	       move.l 24(a0),d0
    d500:	       move.l d0,-(sp)
    d502:	       pea 7 <_start+0x7>
    d506:	       move.l sp,d0
    d508:	       addq.l #8,d0
    d50a:	       move.l d0,-(sp)
    d50c:	       jsr 109b0 <getValueType>
    d512:	       lea 12(sp),sp
    d516:	       tst.w d0
    d518:	   /-- bne.s d51e <builtIn_hideCharacter+0x28>
    d51a:	   |   moveq #1,d0
    d51c:	/--|-- bra.s d53e <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    d51e:	|  \-> moveq #24,d0
    d520:	|      add.l 12(sp),d0
    d524:	|      move.l d0,-(sp)
    d526:	|      jsr 11334 <trimStack>
    d52c:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    d52e:	|      move.l (sp),d0
    d530:	|      move.l d0,-(sp)
    d532:	|      clr.l -(sp)
    d534:	|      jsr 80e4 <setShown>
    d53a:	|      addq.l #8,sp
	return BR_CONTINUE;
    d53c:	|      moveq #2,d0
}
    d53e:	\----> addq.l #4,sp
    d540:	       rts

0000d542 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    d542:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d544:	       movea.l 12(sp),a0
    d548:	       move.l 24(a0),d0
    d54c:	       move.l d0,-(sp)
    d54e:	       pea 7 <_start+0x7>
    d552:	       move.l sp,d0
    d554:	       addq.l #8,d0
    d556:	       move.l d0,-(sp)
    d558:	       jsr 109b0 <getValueType>
    d55e:	       lea 12(sp),sp
    d562:	       tst.w d0
    d564:	   /-- bne.s d56a <builtIn_showCharacter+0x28>
    d566:	   |   moveq #1,d0
    d568:	/--|-- bra.s d58c <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    d56a:	|  \-> moveq #24,d0
    d56c:	|      add.l 12(sp),d0
    d570:	|      move.l d0,-(sp)
    d572:	|      jsr 11334 <trimStack>
    d578:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    d57a:	|      move.l (sp),d0
    d57c:	|      move.l d0,-(sp)
    d57e:	|      pea 1 <_start+0x1>
    d582:	|      jsr 80e4 <setShown>
    d588:	|      addq.l #8,sp
	return BR_CONTINUE;
    d58a:	|      moveq #2,d0
}
    d58c:	\----> addq.l #4,sp
    d58e:	       rts

0000d590 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    d590:	jsr 3944 <killSpeechTimers>
	killMostPeople ();
    d596:	jsr 7050 <killMostPeople>
	return BR_CONTINUE;
    d59c:	moveq #2,d0
}
    d59e:	rts

0000d5a0 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    d5a0:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d5a2:	       movea.l 16(sp),a0
    d5a6:	       move.l 24(a0),d0
    d5aa:	       move.l d0,-(sp)
    d5ac:	       pea 1 <_start+0x1>
    d5b0:	       move.l sp,d0
    d5b2:	       addq.l #8,d0
    d5b4:	       move.l d0,-(sp)
    d5b6:	       jsr 109b0 <getValueType>
    d5bc:	       lea 12(sp),sp
    d5c0:	       tst.w d0
    d5c2:	   /-- bne.s d5c8 <builtIn_setCharacterDrawMode+0x28>
    d5c4:	   |   moveq #1,d0
    d5c6:	/--|-- bra.s d622 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    d5c8:	|  \-> moveq #24,d0
    d5ca:	|      add.l 16(sp),d0
    d5ce:	|      move.l d0,-(sp)
    d5d0:	|      jsr 11334 <trimStack>
    d5d6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d5d8:	|      movea.l 16(sp),a0
    d5dc:	|      move.l 24(a0),d0
    d5e0:	|      move.l d0,-(sp)
    d5e2:	|      pea 7 <_start+0x7>
    d5e6:	|      moveq #12,d0
    d5e8:	|      add.l sp,d0
    d5ea:	|      move.l d0,-(sp)
    d5ec:	|      jsr 109b0 <getValueType>
    d5f2:	|      lea 12(sp),sp
    d5f6:	|      tst.w d0
    d5f8:	|  /-- bne.s d5fe <builtIn_setCharacterDrawMode+0x5e>
    d5fa:	|  |   moveq #1,d0
    d5fc:	+--|-- bra.s d622 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    d5fe:	|  \-> moveq #24,d0
    d600:	|      add.l 16(sp),d0
    d604:	|      move.l d0,-(sp)
    d606:	|      jsr 11334 <trimStack>
    d60c:	|      addq.l #4,sp
	setDrawMode (di, obj);
    d60e:	|      move.l 4(sp),d1
    d612:	|      move.l (sp),d0
    d614:	|      move.l d1,-(sp)
    d616:	|      move.l d0,-(sp)
    d618:	|      jsr 7b12 <setDrawMode>
    d61e:	|      addq.l #8,sp
	return BR_CONTINUE;
    d620:	|      moveq #2,d0
}
    d622:	\----> addq.l #8,sp
    d624:	       rts

0000d626 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    d626:	pea 1640b <main_sludge.c.2f5c5368+0x931>
    d62c:	jsr 12a04 <KPrintF>
    d632:	addq.l #4,sp
	return BR_CONTINUE;
    d634:	moveq #2,d0
}
    d636:	rts

0000d638 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    d638:	pea 1643e <main_sludge.c.2f5c5368+0x964>
    d63e:	jsr 12a04 <KPrintF>
    d644:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    d646:	moveq #2,d0
}
    d648:	rts

0000d64a <builtIn_setScale>:

builtIn(setScale)
{
    d64a:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d64c:	       movea.l 16(sp),a0
    d650:	       move.l 24(a0),d0
    d654:	       move.l d0,-(sp)
    d656:	       pea 1 <_start+0x1>
    d65a:	       move.l sp,d0
    d65c:	       addq.l #8,d0
    d65e:	       move.l d0,-(sp)
    d660:	       jsr 109b0 <getValueType>
    d666:	       lea 12(sp),sp
    d66a:	       tst.w d0
    d66c:	   /-- bne.s d672 <builtIn_setScale+0x28>
    d66e:	   |   moveq #1,d0
    d670:	/--|-- bra.s d6d4 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    d672:	|  \-> moveq #24,d0
    d674:	|      add.l 16(sp),d0
    d678:	|      move.l d0,-(sp)
    d67a:	|      jsr 11334 <trimStack>
    d680:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d682:	|      movea.l 16(sp),a0
    d686:	|      move.l 24(a0),d0
    d68a:	|      move.l d0,-(sp)
    d68c:	|      pea 1 <_start+0x1>
    d690:	|      moveq #12,d0
    d692:	|      add.l sp,d0
    d694:	|      move.l d0,-(sp)
    d696:	|      jsr 109b0 <getValueType>
    d69c:	|      lea 12(sp),sp
    d6a0:	|      tst.w d0
    d6a2:	|  /-- bne.s d6a8 <builtIn_setScale+0x5e>
    d6a4:	|  |   moveq #1,d0
    d6a6:	+--|-- bra.s d6d4 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    d6a8:	|  \-> moveq #24,d0
    d6aa:	|      add.l 16(sp),d0
    d6ae:	|      move.l d0,-(sp)
    d6b0:	|      jsr 11334 <trimStack>
    d6b6:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    d6b8:	|      move.l (sp),d0
    d6ba:	|      move.l d0,d0
    d6bc:	|      movea.w d0,a1
    d6be:	|      move.l 4(sp),d0
    d6c2:	|      move.l d0,d0
    d6c4:	|      movea.w d0,a0
    d6c6:	|      move.l a1,-(sp)
    d6c8:	|      move.l a0,-(sp)
    d6ca:	|      jsr 80bc <setScale>
    d6d0:	|      addq.l #8,sp
	return BR_CONTINUE;
    d6d2:	|      moveq #2,d0
}
    d6d4:	\----> addq.l #8,sp
    d6d6:	       rts

0000d6d8 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    d6d8:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d6da:	       movea.l 12(sp),a0
    d6de:	       move.l 24(a0),d0
    d6e2:	       move.l d0,-(sp)
    d6e4:	       pea 7 <_start+0x7>
    d6e8:	       move.l sp,d0
    d6ea:	       addq.l #8,d0
    d6ec:	       move.l d0,-(sp)
    d6ee:	       jsr 109b0 <getValueType>
    d6f4:	       lea 12(sp),sp
    d6f8:	       tst.w d0
    d6fa:	   /-- bne.s d700 <builtIn_stopCharacter+0x28>
    d6fc:	   |   moveq #1,d0
    d6fe:	/--|-- bra.s d738 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    d700:	|  \-> moveq #24,d0
    d702:	|      add.l 12(sp),d0
    d706:	|      move.l d0,-(sp)
    d708:	|      jsr 11334 <trimStack>
    d70e:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    d710:	|      move.l (sp),d0
    d712:	|      move.l d0,-(sp)
    d714:	|      jsr 81f0 <stopPerson>
    d71a:	|      addq.l #4,sp
    d71c:	|      movea.w d0,a0
    d71e:	|      moveq #28,d0
    d720:	|      add.l 12(sp),d0
    d724:	|      move.l a0,-(sp)
    d726:	|      pea 1 <_start+0x1>
    d72a:	|      move.l d0,-(sp)
    d72c:	|      jsr 112a2 <setVariable>
    d732:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d736:	|      moveq #2,d0
}
    d738:	\----> addq.l #4,sp
    d73a:	       rts

0000d73c <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    d73c:	pea 16478 <main_sludge.c.2f5c5368+0x99e>
    d742:	jsr 12a04 <KPrintF>
    d748:	addq.l #4,sp
	return BR_CONTINUE;
    d74a:	moveq #2,d0
}
    d74c:	rts

0000d74e <builtIn_animate>:

builtIn(animate)
{
    d74e:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    d750:	       movea.l 16(sp),a0
    d754:	       move.l 24(a0),d0
    d758:	       move.l d0,-(sp)
    d75a:	       jsr 10e88 <getAnimationFromVar>
    d760:	       addq.l #4,sp
    d762:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    d766:	   /-- bne.s d76c <builtIn_animate+0x1e>
    d768:	   |   moveq #1,d0
    d76a:	/--|-- bra.s d7ea <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    d76c:	|  \-> moveq #24,d0
    d76e:	|      add.l 16(sp),d0
    d772:	|      move.l d0,-(sp)
    d774:	|      jsr 11334 <trimStack>
    d77a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d77c:	|      movea.l 16(sp),a0
    d780:	|      move.l 24(a0),d0
    d784:	|      move.l d0,-(sp)
    d786:	|      pea 7 <_start+0x7>
    d78a:	|      move.l sp,d0
    d78c:	|      addq.l #8,d0
    d78e:	|      move.l d0,-(sp)
    d790:	|      jsr 109b0 <getValueType>
    d796:	|      lea 12(sp),sp
    d79a:	|      tst.w d0
    d79c:	|  /-- bne.s d7a2 <builtIn_animate+0x54>
    d79e:	|  |   moveq #1,d0
    d7a0:	+--|-- bra.s d7ea <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    d7a2:	|  \-> moveq #24,d0
    d7a4:	|      add.l 16(sp),d0
    d7a8:	|      move.l d0,-(sp)
    d7aa:	|      jsr 11334 <trimStack>
    d7b0:	|      addq.l #4,sp
	animatePerson (obj, pp);
    d7b2:	|      move.l (sp),d0
    d7b4:	|      move.l 4(sp),-(sp)
    d7b8:	|      move.l d0,-(sp)
    d7ba:	|      jsr 607c <animatePerson>
    d7c0:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    d7c2:	|      move.l 4(sp),-(sp)
    d7c6:	|      jsr 8244 <timeForAnim>
    d7cc:	|      addq.l #4,sp
    d7ce:	|      move.l d0,d1
    d7d0:	|      moveq #28,d0
    d7d2:	|      add.l 16(sp),d0
    d7d6:	|      move.l d1,-(sp)
    d7d8:	|      pea 1 <_start+0x1>
    d7dc:	|      move.l d0,-(sp)
    d7de:	|      jsr 112a2 <setVariable>
    d7e4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d7e8:	|      moveq #2,d0
}
    d7ea:	\----> addq.l #8,sp
    d7ec:	       rts

0000d7ee <builtIn_setCostume>:

builtIn(setCostume)
{
    d7ee:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    d7f0:	       movea.l 16(sp),a0
    d7f4:	       move.l 24(a0),d0
    d7f8:	       move.l d0,-(sp)
    d7fa:	       jsr 1065c <getCostumeFromVar>
    d800:	       addq.l #4,sp
    d802:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    d806:	   /-- bne.s d80c <builtIn_setCostume+0x1e>
    d808:	   |   moveq #1,d0
    d80a:	/--|-- bra.s d864 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    d80c:	|  \-> moveq #24,d0
    d80e:	|      add.l 16(sp),d0
    d812:	|      move.l d0,-(sp)
    d814:	|      jsr 11334 <trimStack>
    d81a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d81c:	|      movea.l 16(sp),a0
    d820:	|      move.l 24(a0),d0
    d824:	|      move.l d0,-(sp)
    d826:	|      pea 7 <_start+0x7>
    d82a:	|      move.l sp,d0
    d82c:	|      addq.l #8,d0
    d82e:	|      move.l d0,-(sp)
    d830:	|      jsr 109b0 <getValueType>
    d836:	|      lea 12(sp),sp
    d83a:	|      tst.w d0
    d83c:	|  /-- bne.s d842 <builtIn_setCostume+0x54>
    d83e:	|  |   moveq #1,d0
    d840:	+--|-- bra.s d864 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    d842:	|  \-> moveq #24,d0
    d844:	|      add.l 16(sp),d0
    d848:	|      move.l d0,-(sp)
    d84a:	|      jsr 11334 <trimStack>
    d850:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    d852:	|      move.l (sp),d0
    d854:	|      move.l 4(sp),-(sp)
    d858:	|      move.l d0,-(sp)
    d85a:	|      jsr 60c6 <animatePersonUsingPersona>
    d860:	|      addq.l #8,sp
	return BR_CONTINUE;
    d862:	|      moveq #2,d0
}
    d864:	\----> addq.l #8,sp
    d866:	       rts

0000d868 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    d868:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d86a:	       movea.l 16(sp),a0
    d86e:	       move.l 24(a0),d0
    d872:	       move.l d0,-(sp)
    d874:	       pea 1 <_start+0x1>
    d878:	       move.l sp,d0
    d87a:	       addq.l #8,d0
    d87c:	       move.l d0,-(sp)
    d87e:	       jsr 109b0 <getValueType>
    d884:	       lea 12(sp),sp
    d888:	       tst.w d0
    d88a:	   /-- bne.s d890 <builtIn_floatCharacter+0x28>
    d88c:	   |   moveq #1,d0
    d88e:	/--|-- bra.s d904 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    d890:	|  \-> moveq #24,d0
    d892:	|      add.l 16(sp),d0
    d896:	|      move.l d0,-(sp)
    d898:	|      jsr 11334 <trimStack>
    d89e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d8a0:	|      movea.l 16(sp),a0
    d8a4:	|      move.l 24(a0),d0
    d8a8:	|      move.l d0,-(sp)
    d8aa:	|      pea 7 <_start+0x7>
    d8ae:	|      moveq #12,d0
    d8b0:	|      add.l sp,d0
    d8b2:	|      move.l d0,-(sp)
    d8b4:	|      jsr 109b0 <getValueType>
    d8ba:	|      lea 12(sp),sp
    d8be:	|      tst.w d0
    d8c0:	|  /-- bne.s d8c6 <builtIn_floatCharacter+0x5e>
    d8c2:	|  |   moveq #1,d0
    d8c4:	+--|-- bra.s d904 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    d8c6:	|  \-> moveq #24,d0
    d8c8:	|      add.l 16(sp),d0
    d8cc:	|      move.l d0,-(sp)
    d8ce:	|      jsr 11334 <trimStack>
    d8d4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    d8d6:	|      move.l 4(sp),d1
    d8da:	|      move.l (sp),d0
    d8dc:	|      move.l d1,-(sp)
    d8de:	|      move.l d0,-(sp)
    d8e0:	|      jsr 6c12 <floatCharacter>
    d8e6:	|      addq.l #8,sp
    d8e8:	|      movea.w d0,a0
    d8ea:	|      moveq #28,d0
    d8ec:	|      add.l 16(sp),d0
    d8f0:	|      move.l a0,-(sp)
    d8f2:	|      pea 1 <_start+0x1>
    d8f6:	|      move.l d0,-(sp)
    d8f8:	|      jsr 112a2 <setVariable>
    d8fe:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d902:	|      moveq #2,d0
}
    d904:	\----> addq.l #8,sp
    d906:	       rts

0000d908 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    d908:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d90a:	       movea.l 16(sp),a0
    d90e:	       move.l 24(a0),d0
    d912:	       move.l d0,-(sp)
    d914:	       pea 1 <_start+0x1>
    d918:	       move.l sp,d0
    d91a:	       addq.l #8,d0
    d91c:	       move.l d0,-(sp)
    d91e:	       jsr 109b0 <getValueType>
    d924:	       lea 12(sp),sp
    d928:	       tst.w d0
    d92a:	   /-- bne.s d930 <builtIn_setCharacterWalkSpeed+0x28>
    d92c:	   |   moveq #1,d0
    d92e:	/--|-- bra.s d9a4 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    d930:	|  \-> moveq #24,d0
    d932:	|      add.l 16(sp),d0
    d936:	|      move.l d0,-(sp)
    d938:	|      jsr 11334 <trimStack>
    d93e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d940:	|      movea.l 16(sp),a0
    d944:	|      move.l 24(a0),d0
    d948:	|      move.l d0,-(sp)
    d94a:	|      pea 7 <_start+0x7>
    d94e:	|      moveq #12,d0
    d950:	|      add.l sp,d0
    d952:	|      move.l d0,-(sp)
    d954:	|      jsr 109b0 <getValueType>
    d95a:	|      lea 12(sp),sp
    d95e:	|      tst.w d0
    d960:	|  /-- bne.s d966 <builtIn_setCharacterWalkSpeed+0x5e>
    d962:	|  |   moveq #1,d0
    d964:	+--|-- bra.s d9a4 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    d966:	|  \-> moveq #24,d0
    d968:	|      add.l 16(sp),d0
    d96c:	|      move.l d0,-(sp)
    d96e:	|      jsr 11334 <trimStack>
    d974:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    d976:	|      move.l 4(sp),d1
    d97a:	|      move.l (sp),d0
    d97c:	|      move.l d1,-(sp)
    d97e:	|      move.l d0,-(sp)
    d980:	|      jsr 8058 <setCharacterWalkSpeed>
    d986:	|      addq.l #8,sp
    d988:	|      movea.w d0,a0
    d98a:	|      moveq #28,d0
    d98c:	|      add.l 16(sp),d0
    d990:	|      move.l a0,-(sp)
    d992:	|      pea 1 <_start+0x1>
    d996:	|      move.l d0,-(sp)
    d998:	|      jsr 112a2 <setVariable>
    d99e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d9a2:	|      moveq #2,d0
}
    d9a4:	\----> addq.l #8,sp
    d9a6:	       rts

0000d9a8 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    d9a8:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d9aa:	       movea.l 16(sp),a0
    d9ae:	       move.l 24(a0),d0
    d9b2:	       move.l d0,-(sp)
    d9b4:	       pea 1 <_start+0x1>
    d9b8:	       move.l sp,d0
    d9ba:	       addq.l #8,d0
    d9bc:	       move.l d0,-(sp)
    d9be:	       jsr 109b0 <getValueType>
    d9c4:	       lea 12(sp),sp
    d9c8:	       tst.w d0
    d9ca:	   /-- bne.s d9d0 <builtIn_turnCharacter+0x28>
    d9cc:	   |   moveq #1,d0
    d9ce:	/--|-- bra.s da44 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    d9d0:	|  \-> moveq #24,d0
    d9d2:	|      add.l 16(sp),d0
    d9d6:	|      move.l d0,-(sp)
    d9d8:	|      jsr 11334 <trimStack>
    d9de:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d9e0:	|      movea.l 16(sp),a0
    d9e4:	|      move.l 24(a0),d0
    d9e8:	|      move.l d0,-(sp)
    d9ea:	|      pea 7 <_start+0x7>
    d9ee:	|      moveq #12,d0
    d9f0:	|      add.l sp,d0
    d9f2:	|      move.l d0,-(sp)
    d9f4:	|      jsr 109b0 <getValueType>
    d9fa:	|      lea 12(sp),sp
    d9fe:	|      tst.w d0
    da00:	|  /-- bne.s da06 <builtIn_turnCharacter+0x5e>
    da02:	|  |   moveq #1,d0
    da04:	+--|-- bra.s da44 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    da06:	|  \-> moveq #24,d0
    da08:	|      add.l 16(sp),d0
    da0c:	|      move.l d0,-(sp)
    da0e:	|      jsr 11334 <trimStack>
    da14:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    da16:	|      move.l (sp),d1
    da18:	|      move.l 4(sp),d0
    da1c:	|      move.l d1,-(sp)
    da1e:	|      move.l d0,-(sp)
    da20:	|      jsr 82fc <turnPersonToFace>
    da26:	|      addq.l #8,sp
    da28:	|      movea.w d0,a0
    da2a:	|      moveq #28,d0
    da2c:	|      add.l 16(sp),d0
    da30:	|      move.l a0,-(sp)
    da32:	|      pea 1 <_start+0x1>
    da36:	|      move.l d0,-(sp)
    da38:	|      jsr 112a2 <setVariable>
    da3e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    da42:	|      moveq #2,d0
}
    da44:	\----> addq.l #8,sp
    da46:	       rts

0000da48 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    da48:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    da4a:	       movea.l 16(sp),a0
    da4e:	       move.l 24(a0),d0
    da52:	       move.l d0,-(sp)
    da54:	       pea 1 <_start+0x1>
    da58:	       move.l sp,d0
    da5a:	       addq.l #8,d0
    da5c:	       move.l d0,-(sp)
    da5e:	       jsr 109b0 <getValueType>
    da64:	       lea 12(sp),sp
    da68:	       tst.w d0
    da6a:	   /-- bne.s da70 <builtIn_setCharacterExtra+0x28>
    da6c:	   |   moveq #1,d0
    da6e:	/--|-- bra.s dae4 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    da70:	|  \-> moveq #24,d0
    da72:	|      add.l 16(sp),d0
    da76:	|      move.l d0,-(sp)
    da78:	|      jsr 11334 <trimStack>
    da7e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    da80:	|      movea.l 16(sp),a0
    da84:	|      move.l 24(a0),d0
    da88:	|      move.l d0,-(sp)
    da8a:	|      pea 7 <_start+0x7>
    da8e:	|      moveq #12,d0
    da90:	|      add.l sp,d0
    da92:	|      move.l d0,-(sp)
    da94:	|      jsr 109b0 <getValueType>
    da9a:	|      lea 12(sp),sp
    da9e:	|      tst.w d0
    daa0:	|  /-- bne.s daa6 <builtIn_setCharacterExtra+0x5e>
    daa2:	|  |   moveq #1,d0
    daa4:	+--|-- bra.s dae4 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    daa6:	|  \-> moveq #24,d0
    daa8:	|      add.l 16(sp),d0
    daac:	|      move.l d0,-(sp)
    daae:	|      jsr 11334 <trimStack>
    dab4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    dab6:	|      move.l (sp),d1
    dab8:	|      move.l 4(sp),d0
    dabc:	|      move.l d1,-(sp)
    dabe:	|      move.l d0,-(sp)
    dac0:	|      jsr 8086 <setPersonExtra>
    dac6:	|      addq.l #8,sp
    dac8:	|      movea.w d0,a0
    daca:	|      moveq #28,d0
    dacc:	|      add.l 16(sp),d0
    dad0:	|      move.l a0,-(sp)
    dad2:	|      pea 1 <_start+0x1>
    dad6:	|      move.l d0,-(sp)
    dad8:	|      jsr 112a2 <setVariable>
    dade:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dae2:	|      moveq #2,d0
}
    dae4:	\----> addq.l #8,sp
    dae6:	       rts

0000dae8 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    dae8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    daea:	       movea.l 12(sp),a0
    daee:	       move.l 24(a0),d0
    daf2:	       move.l d0,-(sp)
    daf4:	       pea 7 <_start+0x7>
    daf8:	       move.l sp,d0
    dafa:	       addq.l #8,d0
    dafc:	       move.l d0,-(sp)
    dafe:	       jsr 109b0 <getValueType>
    db04:	       lea 12(sp),sp
    db08:	       tst.w d0
    db0a:	   /-- bne.s db10 <builtIn_removeCharacter+0x28>
    db0c:	   |   moveq #1,d0
    db0e:	/--|-- bra.s db2e <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    db10:	|  \-> moveq #24,d0
    db12:	|      add.l 12(sp),d0
    db16:	|      move.l d0,-(sp)
    db18:	|      jsr 11334 <trimStack>
    db1e:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    db20:	|      move.l (sp),d0
    db22:	|      move.l d0,-(sp)
    db24:	|      jsr 73aa <removeOneCharacter>
    db2a:	|      addq.l #4,sp
	return BR_CONTINUE;
    db2c:	|      moveq #2,d0
}
    db2e:	\----> addq.l #4,sp
    db30:	       rts

0000db32 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    db32:	                lea -28(sp),sp
    db36:	                move.l d2,-(sp)
    db38:	                move.l 44(sp),d1
    db3c:	                move.l 48(sp),d0
    db40:	                move.w d1,d1
    db42:	                move.w d1,6(sp)
    db46:	                move.w d0,d0
    db48:	                move.w d0,4(sp)
	switch (numParams) {
    db4c:	                moveq #2,d0
    db4e:	                cmp.l 36(sp),d0
    db52:	      /-------- beq.w dc94 <moveChr+0x162>
    db56:	      |         moveq #3,d0
    db58:	      |         cmp.l 36(sp),d0
    db5c:	/-----|-------- bne.w ddc8 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db60:	|     |         movea.l 40(sp),a0
    db64:	|     |         move.l 24(a0),d0
    db68:	|     |         move.l d0,-(sp)
    db6a:	|     |         pea 1 <_start+0x1>
    db6e:	|     |         lea 20(sp),a0
    db72:	|     |         move.l a0,-(sp)
    db74:	|     |         jsr 109b0 <getValueType>
    db7a:	|     |         lea 12(sp),sp
    db7e:	|     |         tst.w d0
    db80:	|     |     /-- bne.s db88 <moveChr+0x56>
    db82:	|     |     |   moveq #1,d0
    db84:	|  /--|-----|-- bra.w ddd8 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    db88:	|  |  |     \-> moveq #24,d0
    db8a:	|  |  |         add.l 40(sp),d0
    db8e:	|  |  |         move.l d0,-(sp)
    db90:	|  |  |         jsr 11334 <trimStack>
    db96:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db98:	|  |  |         movea.l 40(sp),a0
    db9c:	|  |  |         move.l 24(a0),d0
    dba0:	|  |  |         move.l d0,-(sp)
    dba2:	|  |  |         pea 1 <_start+0x1>
    dba6:	|  |  |         lea 24(sp),a0
    dbaa:	|  |  |         move.l a0,-(sp)
    dbac:	|  |  |         jsr 109b0 <getValueType>
    dbb2:	|  |  |         lea 12(sp),sp
    dbb6:	|  |  |         tst.w d0
    dbb8:	|  |  |     /-- bne.s dbc0 <moveChr+0x8e>
    dbba:	|  |  |     |   moveq #1,d0
    dbbc:	|  +--|-----|-- bra.w ddd8 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    dbc0:	|  |  |     \-> moveq #24,d0
    dbc2:	|  |  |         add.l 40(sp),d0
    dbc6:	|  |  |         move.l d0,-(sp)
    dbc8:	|  |  |         jsr 11334 <trimStack>
    dbce:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dbd0:	|  |  |         movea.l 40(sp),a0
    dbd4:	|  |  |         move.l 24(a0),d0
    dbd8:	|  |  |         move.l d0,-(sp)
    dbda:	|  |  |         pea 7 <_start+0x7>
    dbde:	|  |  |         lea 16(sp),a0
    dbe2:	|  |  |         move.l a0,-(sp)
    dbe4:	|  |  |         jsr 109b0 <getValueType>
    dbea:	|  |  |         lea 12(sp),sp
    dbee:	|  |  |         tst.w d0
    dbf0:	|  |  |     /-- bne.s dbf8 <moveChr+0xc6>
    dbf2:	|  |  |     |   moveq #1,d0
    dbf4:	|  +--|-----|-- bra.w ddd8 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    dbf8:	|  |  |     \-> moveq #24,d0
    dbfa:	|  |  |         add.l 40(sp),d0
    dbfe:	|  |  |         move.l d0,-(sp)
    dc00:	|  |  |         jsr 11334 <trimStack>
    dc06:	|  |  |         addq.l #4,sp

			if (force) {
    dc08:	|  |  |         tst.w 6(sp)
    dc0c:	|  |  |     /-- beq.s dc3c <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    dc0e:	|  |  |     |   movea.l 8(sp),a0
    dc12:	|  |  |     |   move.l 12(sp),d1
    dc16:	|  |  |     |   move.l 16(sp),d0
    dc1a:	|  |  |     |   pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc18b0>
    dc1e:	|  |  |     |   move.l 44(sp),-(sp)
    dc22:	|  |  |     |   move.l a0,-(sp)
    dc24:	|  |  |     |   move.l d1,-(sp)
    dc26:	|  |  |     |   move.l d0,-(sp)
    dc28:	|  |  |     |   jsr 6c36 <forceWalkingPerson>
    dc2e:	|  |  |     |   lea 20(sp),sp
    dc32:	|  |  |     |   tst.w d0
    dc34:	|  |  |  /--|-- beq.s dc8e <moveChr+0x15c>
    dc36:	|  |  |  |  |   moveq #3,d0
    dc38:	|  +--|--|--|-- bra.w ddd8 <moveChr+0x2a6>
			} else if (immediate) {
    dc3c:	|  |  |  |  \-> tst.w 4(sp)
    dc40:	|  |  |  |  /-- beq.s dc60 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    dc42:	|  |  |  |  |   movea.l 8(sp),a0
    dc46:	|  |  |  |  |   move.l 12(sp),d1
    dc4a:	|  |  |  |  |   move.l 16(sp),d0
    dc4e:	|  |  |  |  |   move.l a0,-(sp)
    dc50:	|  |  |  |  |   move.l d1,-(sp)
    dc52:	|  |  |  |  |   move.l d0,-(sp)
    dc54:	|  |  |  |  |   jsr 6f3e <jumpPerson>
    dc5a:	|  |  |  |  |   lea 12(sp),sp
    dc5e:	|  |  |  +--|-- bra.s dc8e <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    dc60:	|  |  |  |  \-> movea.l 8(sp),a0
    dc64:	|  |  |  |      move.l 12(sp),d1
    dc68:	|  |  |  |      move.l 16(sp),d0
    dc6c:	|  |  |  |      pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc18b0>
    dc70:	|  |  |  |      move.l 44(sp),-(sp)
    dc74:	|  |  |  |      move.l a0,-(sp)
    dc76:	|  |  |  |      move.l d1,-(sp)
    dc78:	|  |  |  |      move.l d0,-(sp)
    dc7a:	|  |  |  |      jsr 710e <makeWalkingPerson>
    dc80:	|  |  |  |      lea 20(sp),sp
    dc84:	|  |  |  |      tst.w d0
    dc86:	|  |  |  +----- beq.s dc8e <moveChr+0x15c>
    dc88:	|  |  |  |      moveq #3,d0
    dc8a:	|  +--|--|----- bra.w ddd8 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    dc8e:	|  |  |  \----> moveq #2,d0
    dc90:	|  +--|-------- bra.w ddd8 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dc94:	|  |  \-------> movea.l 40(sp),a0
    dc98:	|  |            move.l 24(a0),d0
    dc9c:	|  |            move.l d0,-(sp)
    dc9e:	|  |            pea 7 <_start+0x7>
    dca2:	|  |            moveq #32,d0
    dca4:	|  |            add.l sp,d0
    dca6:	|  |            move.l d0,-(sp)
    dca8:	|  |            jsr 109b0 <getValueType>
    dcae:	|  |            lea 12(sp),sp
    dcb2:	|  |            tst.w d0
    dcb4:	|  |        /-- bne.s dcbc <moveChr+0x18a>
    dcb6:	|  |        |   moveq #1,d0
    dcb8:	|  +--------|-- bra.w ddd8 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    dcbc:	|  |        \-> moveq #24,d0
    dcbe:	|  |            add.l 40(sp),d0
    dcc2:	|  |            move.l d0,-(sp)
    dcc4:	|  |            jsr 11334 <trimStack>
    dcca:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dccc:	|  |            movea.l 40(sp),a0
    dcd0:	|  |            move.l 24(a0),d0
    dcd4:	|  |            move.l d0,-(sp)
    dcd6:	|  |            pea 7 <_start+0x7>
    dcda:	|  |            lea 28(sp),a0
    dcde:	|  |            move.l a0,-(sp)
    dce0:	|  |            jsr 109b0 <getValueType>
    dce6:	|  |            lea 12(sp),sp
    dcea:	|  |            tst.w d0
    dcec:	|  |        /-- bne.s dcf4 <moveChr+0x1c2>
    dcee:	|  |        |   moveq #1,d0
    dcf0:	|  +--------|-- bra.w ddd8 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    dcf4:	|  |        \-> moveq #24,d0
    dcf6:	|  |            add.l 40(sp),d0
    dcfa:	|  |            move.l d0,-(sp)
    dcfc:	|  |            jsr 11334 <trimStack>
    dd02:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    dd04:	|  |            move.l 24(sp),d0
    dd08:	|  |            move.l d0,-(sp)
    dd0a:	|  |            jsr 1147a <getRegionForObject>
    dd10:	|  |            addq.l #4,sp
    dd12:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    dd16:	|  |        /-- bne.s dd1e <moveChr+0x1ec>
    dd18:	|  |        |   moveq #2,d0
    dd1a:	|  +--------|-- bra.w ddd8 <moveChr+0x2a6>

			if (force)
    dd1e:	|  |        \-> tst.w 6(sp)
    dd22:	|  |        /-- beq.s dd5e <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    dd24:	|  |        |   movea.l 28(sp),a0
    dd28:	|  |        |   move.l 24(a0),d2
    dd2c:	|  |        |   movea.l 20(sp),a1
    dd30:	|  |        |   movea.l 28(sp),a0
    dd34:	|  |        |   move.l 20(a0),d1
    dd38:	|  |        |   movea.l 28(sp),a0
    dd3c:	|  |        |   move.l 16(a0),d0
    dd40:	|  |        |   move.l d2,-(sp)
    dd42:	|  |        |   move.l 44(sp),-(sp)
    dd46:	|  |        |   move.l a1,-(sp)
    dd48:	|  |        |   move.l d1,-(sp)
    dd4a:	|  |        |   move.l d0,-(sp)
    dd4c:	|  |        |   jsr 6c36 <forceWalkingPerson>
    dd52:	|  |        |   lea 20(sp),sp
    dd56:	|  |        |   tst.w d0
    dd58:	|  |     /--|-- beq.s ddc4 <moveChr+0x292>
    dd5a:	|  |     |  |   moveq #3,d0
    dd5c:	|  +-----|--|-- bra.s ddd8 <moveChr+0x2a6>
			}
			else if (immediate)
    dd5e:	|  |     |  \-> tst.w 4(sp)
    dd62:	|  |     |  /-- beq.s dd8a <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    dd64:	|  |     |  |   movea.l 20(sp),a1
    dd68:	|  |     |  |   movea.l 28(sp),a0
    dd6c:	|  |     |  |   move.l 20(a0),d1
    dd70:	|  |     |  |   movea.l 28(sp),a0
    dd74:	|  |     |  |   move.l 16(a0),d0
    dd78:	|  |     |  |   move.l a1,-(sp)
    dd7a:	|  |     |  |   move.l d1,-(sp)
    dd7c:	|  |     |  |   move.l d0,-(sp)
    dd7e:	|  |     |  |   jsr 6f3e <jumpPerson>
    dd84:	|  |     |  |   lea 12(sp),sp
    dd88:	|  |     +--|-- bra.s ddc4 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    dd8a:	|  |     |  \-> movea.l 28(sp),a0
    dd8e:	|  |     |      move.l 24(a0),d2
    dd92:	|  |     |      movea.l 20(sp),a1
    dd96:	|  |     |      movea.l 28(sp),a0
    dd9a:	|  |     |      move.l 20(a0),d1
    dd9e:	|  |     |      movea.l 28(sp),a0
    dda2:	|  |     |      move.l 16(a0),d0
    dda6:	|  |     |      move.l d2,-(sp)
    dda8:	|  |     |      move.l 44(sp),-(sp)
    ddac:	|  |     |      move.l a1,-(sp)
    ddae:	|  |     |      move.l d1,-(sp)
    ddb0:	|  |     |      move.l d0,-(sp)
    ddb2:	|  |     |      jsr 710e <makeWalkingPerson>
    ddb8:	|  |     |      lea 20(sp),sp
    ddbc:	|  |     |      tst.w d0
    ddbe:	|  |     +----- beq.s ddc4 <moveChr+0x292>
    ddc0:	|  |     |      moveq #3,d0
    ddc2:	|  +-----|----- bra.s ddd8 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    ddc4:	|  |     \----> moveq #2,d0
    ddc6:	|  +----------- bra.s ddd8 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    ddc8:	\--|----------> pea 16496 <main_sludge.c.2f5c5368+0x9bc>
    ddce:	   |            jsr 12a04 <KPrintF>
    ddd4:	   |            addq.l #4,sp
			return BR_ERROR;
    ddd6:	   |            moveq #1,d0
	}
}
    ddd8:	   \----------> move.l (sp)+,d2
    ddda:	                lea 28(sp),sp
    ddde:	                rts

0000dde0 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    dde0:	clr.l -(sp)
    dde2:	clr.l -(sp)
    dde4:	move.l 16(sp),-(sp)
    dde8:	move.l 16(sp),-(sp)
    ddec:	jsr db32 <moveChr>
    ddf2:	lea 16(sp),sp
}
    ddf6:	rts

0000ddf8 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    ddf8:	clr.l -(sp)
    ddfa:	pea 1 <_start+0x1>
    ddfe:	move.l 16(sp),-(sp)
    de02:	move.l 16(sp),-(sp)
    de06:	jsr db32 <moveChr>
    de0c:	lea 16(sp),sp
}
    de10:	rts

0000de12 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    de12:	pea 1 <_start+0x1>
    de16:	clr.l -(sp)
    de18:	move.l 16(sp),-(sp)
    de1c:	move.l 16(sp),-(sp)
    de20:	jsr db32 <moveChr>
    de26:	lea 16(sp),sp
}
    de2a:	rts

0000de2c <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    de2c:	jsr 4fbc <clearStatusBar>
	return BR_CONTINUE;
    de32:	moveq #2,d0
}
    de34:	rts

0000de36 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    de36:	jsr 5064 <killLastStatus>
	return BR_CONTINUE;
    de3c:	moveq #2,d0
}
    de3e:	rts

0000de40 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    de40:	jsr 4f52 <addStatusBar>
	return BR_CONTINUE;
    de46:	moveq #2,d0
}
    de48:	rts

0000de4a <builtIn_statusText>:

builtIn(statusText)
{
    de4a:	       subq.l #8,sp
    de4c:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    de4e:	       movea.l 20(sp),a0
    de52:	       move.l 24(a0),d0
    de56:	       move.l d0,-(sp)
    de58:	       jsr 10f86 <getTextFromAnyVar>
    de5e:	       addq.l #4,sp
    de60:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    de64:	   /-- bne.s de6a <builtIn_statusText+0x20>
    de66:	   |   moveq #1,d0
    de68:	/--|-- bra.s de9e <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    de6a:	|  \-> moveq #24,d0
    de6c:	|      add.l 20(sp),d0
    de70:	|      move.l d0,-(sp)
    de72:	|      jsr 11334 <trimStack>
    de78:	|      addq.l #4,sp
	setStatusBar(newText);
    de7a:	|      move.l 8(sp),-(sp)
    de7e:	|      jsr 52e4 <setStatusBar>
    de84:	|      addq.l #4,sp
	FreeVec(newText);
    de86:	|      move.l 8(sp),4(sp)
    de8c:	|      move.l 19c4c <SysBase>,d0
    de92:	|      movea.l d0,a6
    de94:	|      movea.l 4(sp),a1
    de98:	|      jsr -690(a6)
	return BR_CONTINUE;
    de9c:	|      moveq #2,d0
}
    de9e:	\----> movea.l (sp)+,a6
    dea0:	       addq.l #8,sp
    dea2:	       rts

0000dea4 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    dea4:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dea6:	       movea.l 12(sp),a0
    deaa:	       move.l 24(a0),d0
    deae:	       move.l d0,-(sp)
    deb0:	       pea 1 <_start+0x1>
    deb4:	       move.l sp,d0
    deb6:	       addq.l #8,d0
    deb8:	       move.l d0,-(sp)
    deba:	       jsr 109b0 <getValueType>
    dec0:	       lea 12(sp),sp
    dec4:	       tst.w d0
    dec6:	   /-- bne.s decc <builtIn_lightStatus+0x28>
    dec8:	   |   moveq #1,d0
    deca:	/--|-- bra.s deea <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    decc:	|  \-> moveq #24,d0
    dece:	|      add.l 12(sp),d0
    ded2:	|      move.l d0,-(sp)
    ded4:	|      jsr 11334 <trimStack>
    deda:	|      addq.l #4,sp
	setLitStatus (val);
    dedc:	|      move.l (sp),d0
    dede:	|      move.l d0,-(sp)
    dee0:	|      jsr 52d4 <setLitStatus>
    dee6:	|      addq.l #4,sp
	return BR_CONTINUE;
    dee8:	|      moveq #2,d0
}
    deea:	\----> addq.l #4,sp
    deec:	       rts

0000deee <builtIn_positionStatus>:

builtIn(positionStatus)
{
    deee:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    def0:	       movea.l 16(sp),a0
    def4:	       move.l 24(a0),d0
    def8:	       move.l d0,-(sp)
    defa:	       pea 1 <_start+0x1>
    defe:	       move.l sp,d0
    df00:	       addq.l #8,d0
    df02:	       move.l d0,-(sp)
    df04:	       jsr 109b0 <getValueType>
    df0a:	       lea 12(sp),sp
    df0e:	       tst.w d0
    df10:	   /-- bne.s df16 <builtIn_positionStatus+0x28>
    df12:	   |   moveq #1,d0
    df14:	/--|-- bra.s df70 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    df16:	|  \-> moveq #24,d0
    df18:	|      add.l 16(sp),d0
    df1c:	|      move.l d0,-(sp)
    df1e:	|      jsr 11334 <trimStack>
    df24:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df26:	|      movea.l 16(sp),a0
    df2a:	|      move.l 24(a0),d0
    df2e:	|      move.l d0,-(sp)
    df30:	|      pea 1 <_start+0x1>
    df34:	|      moveq #12,d0
    df36:	|      add.l sp,d0
    df38:	|      move.l d0,-(sp)
    df3a:	|      jsr 109b0 <getValueType>
    df40:	|      lea 12(sp),sp
    df44:	|      tst.w d0
    df46:	|  /-- bne.s df4c <builtIn_positionStatus+0x5e>
    df48:	|  |   moveq #1,d0
    df4a:	+--|-- bra.s df70 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    df4c:	|  \-> moveq #24,d0
    df4e:	|      add.l 16(sp),d0
    df52:	|      move.l d0,-(sp)
    df54:	|      jsr 11334 <trimStack>
    df5a:	|      addq.l #4,sp
	positionStatus (x, y);
    df5c:	|      move.l (sp),d1
    df5e:	|      move.l 4(sp),d0
    df62:	|      move.l d1,-(sp)
    df64:	|      move.l d0,-(sp)
    df66:	|      jsr 50c6 <positionStatus>
    df6c:	|      addq.l #8,sp
	return BR_CONTINUE;
    df6e:	|      moveq #2,d0
}
    df70:	\----> addq.l #8,sp
    df72:	       rts

0000df74 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    df74:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df76:	       movea.l 12(sp),a0
    df7a:	       move.l 24(a0),d0
    df7e:	       move.l d0,-(sp)
    df80:	       pea 1 <_start+0x1>
    df84:	       move.l sp,d0
    df86:	       addq.l #8,d0
    df88:	       move.l d0,-(sp)
    df8a:	       jsr 109b0 <getValueType>
    df90:	       lea 12(sp),sp
    df94:	       tst.w d0
    df96:	   /-- bne.s df9c <builtIn_alignStatus+0x28>
    df98:	   |   moveq #1,d0
    df9a:	/--|-- bra.s dfbc <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    df9c:	|  \-> moveq #24,d0
    df9e:	|      add.l 12(sp),d0
    dfa2:	|      move.l d0,-(sp)
    dfa4:	|      jsr 11334 <trimStack>
    dfaa:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    dfac:	|      move.l (sp),d0
    dfae:	|      movea.l 18132 <nowStatus>,a0
    dfb4:	|      move.l d0,d0
    dfb6:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    dfba:	|      moveq #2,d0
}
    dfbc:	\----> addq.l #4,sp
    dfbe:	       rts

0000dfc0 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    dfc0:	             tst.l 4(sp)
    dfc4:	      /----- beq.s dfd0 <getFuncNumForCallback+0x10>
    dfc6:	      |      moveq #1,d0
    dfc8:	      |      cmp.l 4(sp),d0
    dfcc:	      |  /-- beq.s dfd6 <getFuncNumForCallback+0x16>
    dfce:	   /--|--|-- bra.s e00c <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    dfd0:	   |  \--|-> clr.l 12(sp)
			break;
    dfd4:	/--|-----|-- bra.s e01e <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    dfd6:	|  |     \-> movea.l 8(sp),a0
    dfda:	|  |         move.l 24(a0),d0
    dfde:	|  |         move.l d0,-(sp)
    dfe0:	|  |         pea 2 <_start+0x2>
    dfe4:	|  |         move.l 20(sp),-(sp)
    dfe8:	|  |         jsr 109b0 <getValueType>
    dfee:	|  |         lea 12(sp),sp
    dff2:	|  |         tst.w d0
    dff4:	|  |     /-- bne.s dffa <getFuncNumForCallback+0x3a>
    dff6:	|  |     |   clr.w d0
    dff8:	|  |  /--|-- bra.s e020 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    dffa:	|  |  |  \-> moveq #24,d0
    dffc:	|  |  |      add.l 8(sp),d0
    e000:	|  |  |      move.l d0,-(sp)
    e002:	|  |  |      jsr 11334 <trimStack>
    e008:	|  |  |      addq.l #4,sp
			break;
    e00a:	+--|--|----- bra.s e01e <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    e00c:	|  \--|----> pea 164cc <main_sludge.c.2f5c5368+0x9f2>
    e012:	|     |      jsr 12a04 <KPrintF>
    e018:	|     |      addq.l #4,sp
			return FALSE;
    e01a:	|     |      clr.w d0
    e01c:	|     +----- bra.s e020 <getFuncNumForCallback+0x60>
	}
	return TRUE;
    e01e:	\-----|----> moveq #1,d0
}
    e020:	      \----> rts

0000e022 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    e022:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e024:	       move.l sp,d0
    e026:	       move.l d0,-(sp)
    e028:	       move.l 16(sp),-(sp)
    e02c:	       move.l 16(sp),-(sp)
    e030:	       jsr dfc0 <getFuncNumForCallback>
    e036:	       lea 12(sp),sp
    e03a:	       tst.w d0
    e03c:	/----- beq.s e04c <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    e03e:	|      movea.l 1811c <currentEvents>,a0
    e044:	|      move.l (sp),d0
    e046:	|      move.l d0,(a0)
		return BR_CONTINUE;
    e048:	|      moveq #2,d0
    e04a:	|  /-- bra.s e04e <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    e04c:	\--|-> moveq #1,d0
}
    e04e:	   \-> addq.l #4,sp
    e050:	       rts

0000e052 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    e052:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e054:	       move.l sp,d0
    e056:	       move.l d0,-(sp)
    e058:	       move.l 16(sp),-(sp)
    e05c:	       move.l 16(sp),-(sp)
    e060:	       jsr dfc0 <getFuncNumForCallback>
    e066:	       lea 12(sp),sp
    e06a:	       tst.w d0
    e06c:	/----- beq.s e07e <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    e06e:	|      movea.l 1811c <currentEvents>,a0
    e074:	|      move.l (sp),d0
    e076:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    e07a:	|      moveq #2,d0
    e07c:	|  /-- bra.s e080 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    e07e:	\--|-> moveq #1,d0
}
    e080:	   \-> addq.l #4,sp
    e082:	       rts

0000e084 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    e084:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e086:	       move.l sp,d0
    e088:	       move.l d0,-(sp)
    e08a:	       move.l 16(sp),-(sp)
    e08e:	       move.l 16(sp),-(sp)
    e092:	       jsr dfc0 <getFuncNumForCallback>
    e098:	       lea 12(sp),sp
    e09c:	       tst.w d0
    e09e:	/----- beq.s e0b0 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    e0a0:	|      movea.l 1811c <currentEvents>,a0
    e0a6:	|      move.l (sp),d0
    e0a8:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    e0ac:	|      moveq #2,d0
    e0ae:	|  /-- bra.s e0b2 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    e0b0:	\--|-> moveq #1,d0
}
    e0b2:	   \-> addq.l #4,sp
    e0b4:	       rts

0000e0b6 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    e0b6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e0b8:	       move.l sp,d0
    e0ba:	       move.l d0,-(sp)
    e0bc:	       move.l 16(sp),-(sp)
    e0c0:	       move.l 16(sp),-(sp)
    e0c4:	       jsr dfc0 <getFuncNumForCallback>
    e0ca:	       lea 12(sp),sp
    e0ce:	       tst.w d0
    e0d0:	/----- beq.s e0e2 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    e0d2:	|      movea.l 1811c <currentEvents>,a0
    e0d8:	|      move.l (sp),d0
    e0da:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    e0de:	|      moveq #2,d0
    e0e0:	|  /-- bra.s e0e4 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    e0e2:	\--|-> moveq #1,d0
}
    e0e4:	   \-> addq.l #4,sp
    e0e6:	       rts

0000e0e8 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    e0e8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e0ea:	       move.l sp,d0
    e0ec:	       move.l d0,-(sp)
    e0ee:	       move.l 16(sp),-(sp)
    e0f2:	       move.l 16(sp),-(sp)
    e0f6:	       jsr dfc0 <getFuncNumForCallback>
    e0fc:	       lea 12(sp),sp
    e100:	       tst.w d0
    e102:	/----- beq.s e114 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    e104:	|      movea.l 1811c <currentEvents>,a0
    e10a:	|      move.l (sp),d0
    e10c:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    e110:	|      moveq #2,d0
    e112:	|  /-- bra.s e116 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    e114:	\--|-> moveq #1,d0
}
    e116:	   \-> addq.l #4,sp
    e118:	       rts

0000e11a <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    e11a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e11c:	       move.l sp,d0
    e11e:	       move.l d0,-(sp)
    e120:	       move.l 16(sp),-(sp)
    e124:	       move.l 16(sp),-(sp)
    e128:	       jsr dfc0 <getFuncNumForCallback>
    e12e:	       lea 12(sp),sp
    e132:	       tst.w d0
    e134:	/----- beq.s e146 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    e136:	|      movea.l 1811c <currentEvents>,a0
    e13c:	|      move.l (sp),d0
    e13e:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    e142:	|      moveq #2,d0
    e144:	|  /-- bra.s e148 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    e146:	\--|-> moveq #1,d0
}
    e148:	   \-> addq.l #4,sp
    e14a:	       rts

0000e14c <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    e14c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e14e:	       move.l sp,d0
    e150:	       move.l d0,-(sp)
    e152:	       move.l 16(sp),-(sp)
    e156:	       move.l 16(sp),-(sp)
    e15a:	       jsr dfc0 <getFuncNumForCallback>
    e160:	       lea 12(sp),sp
    e164:	       tst.w d0
    e166:	/----- beq.s e178 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    e168:	|      movea.l 1811c <currentEvents>,a0
    e16e:	|      move.l (sp),d0
    e170:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    e174:	|      moveq #2,d0
    e176:	|  /-- bra.s e17a <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    e178:	\--|-> moveq #1,d0
}
    e17a:	   \-> addq.l #4,sp
    e17c:	       rts

0000e17e <builtIn_spawnSub>:

builtIn (spawnSub)
{
    e17e:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e180:	          move.l sp,d0
    e182:	          move.l d0,-(sp)
    e184:	          move.l 16(sp),-(sp)
    e188:	          move.l 16(sp),-(sp)
    e18c:	          jsr dfc0 <getFuncNumForCallback>
    e192:	          lea 12(sp),sp
    e196:	          tst.w d0
    e198:	/-------- beq.s e1c4 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    e19a:	|         move.l 19c1c <noStack>,d1
    e1a0:	|         move.l (sp),d0
    e1a2:	|         pea 1 <_start+0x1>
    e1a6:	|         move.l d1,-(sp)
    e1a8:	|         clr.l -(sp)
    e1aa:	|         clr.l -(sp)
    e1ac:	|         move.l d0,-(sp)
    e1ae:	|         jsr 41f6 <startNewFunctionNum>
    e1b4:	|         lea 20(sp),sp
    e1b8:	|         tst.l d0
    e1ba:	|     /-- bne.s e1c0 <builtIn_spawnSub+0x42>
    e1bc:	|     |   moveq #1,d0
    e1be:	|  /--|-- bra.s e1c6 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    e1c0:	|  |  \-> moveq #2,d0
    e1c2:	|  +----- bra.s e1c6 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    e1c4:	\--|----> moveq #1,d0
}
    e1c6:	   \----> addq.l #4,sp
    e1c8:	          rts

0000e1ca <builtIn_cancelSub>:

builtIn (cancelSub)
{
    e1ca:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    e1cc:	          move.l sp,d0
    e1ce:	          addq.l #4,d0
    e1d0:	          move.l d0,-(sp)
    e1d2:	          move.l 20(sp),-(sp)
    e1d6:	          move.l 20(sp),-(sp)
    e1da:	          jsr dfc0 <getFuncNumForCallback>
    e1e0:	          lea 12(sp),sp
    e1e4:	          tst.w d0
    e1e6:	/-------- beq.s e21c <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    e1e8:	|         move.l 4(sp),d1
    e1ec:	|         move.l sp,d0
    e1ee:	|         addq.l #2,d0
    e1f0:	|         move.l d0,-(sp)
    e1f2:	|         move.l 20(sp),-(sp)
    e1f6:	|         move.l d1,-(sp)
    e1f8:	|         jsr 21c2 <cancelAFunction>
    e1fe:	|         lea 12(sp),sp
		if (killedMyself) {
    e202:	|         move.w 2(sp),d0
    e206:	|  /----- beq.s e218 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    e208:	|  |      move.l 16(sp),-(sp)
    e20c:	|  |      jsr 20e0 <abortFunction>
    e212:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    e214:	|  |      moveq #5,d0
    e216:	|  |  /-- bra.s e21e <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    e218:	|  \--|-> moveq #2,d0
    e21a:	|     +-- bra.s e21e <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    e21c:	\-----|-> moveq #1,d0
}
    e21e:	      \-> addq.l #8,sp
    e220:	          rts

0000e222 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    e222:	       subq.l #8,sp
    e224:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    e226:	       movea.l 20(sp),a0
    e22a:	       move.l 24(a0),d0
    e22e:	       move.l d0,-(sp)
    e230:	       jsr 10f86 <getTextFromAnyVar>
    e236:	       addq.l #4,sp
    e238:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    e23c:	   /-- bne.s e242 <builtIn_stringWidth+0x20>
    e23e:	   |   moveq #1,d0
    e240:	/--|-- bra.s e290 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    e242:	|  \-> moveq #24,d0
    e244:	|      add.l 20(sp),d0
    e248:	|      move.l d0,-(sp)
    e24a:	|      jsr 11334 <trimStack>
    e250:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    e252:	|      move.l 8(sp),-(sp)
    e256:	|      jsr 1138e <stringWidth>
    e25c:	|      addq.l #4,sp
    e25e:	|      move.l d0,d1
    e260:	|      moveq #28,d0
    e262:	|      add.l 20(sp),d0
    e266:	|      move.l d1,-(sp)
    e268:	|      pea 1 <_start+0x1>
    e26c:	|      move.l d0,-(sp)
    e26e:	|      jsr 112a2 <setVariable>
    e274:	|      lea 12(sp),sp
	FreeVec(theText);
    e278:	|      move.l 8(sp),4(sp)
    e27e:	|      move.l 19c4c <SysBase>,d0
    e284:	|      movea.l d0,a6
    e286:	|      movea.l 4(sp),a1
    e28a:	|      jsr -690(a6)
	return BR_CONTINUE;
    e28e:	|      moveq #2,d0
}
    e290:	\----> movea.l (sp)+,a6
    e292:	       addq.l #8,sp
    e294:	       rts

0000e296 <builtIn_hardScroll>:

builtIn(hardScroll)
{
    e296:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e298:	       movea.l 12(sp),a0
    e29c:	       move.l 24(a0),d0
    e2a0:	       move.l d0,-(sp)
    e2a2:	       pea 1 <_start+0x1>
    e2a6:	       move.l sp,d0
    e2a8:	       addq.l #8,d0
    e2aa:	       move.l d0,-(sp)
    e2ac:	       jsr 109b0 <getValueType>
    e2b2:	       lea 12(sp),sp
    e2b6:	       tst.w d0
    e2b8:	   /-- bne.s e2be <builtIn_hardScroll+0x28>
    e2ba:	   |   moveq #1,d0
    e2bc:	/--|-- bra.s e2dc <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    e2be:	|  \-> moveq #24,d0
    e2c0:	|      add.l 12(sp),d0
    e2c4:	|      move.l d0,-(sp)
    e2c6:	|      jsr 11334 <trimStack>
    e2cc:	|      addq.l #4,sp
	hardScroll (v);
    e2ce:	|      move.l (sp),d0
    e2d0:	|      move.l d0,-(sp)
    e2d2:	|      jsr 959e <hardScroll>
    e2d8:	|      addq.l #4,sp
	return BR_CONTINUE;
    e2da:	|      moveq #2,d0
}
    e2dc:	\----> addq.l #4,sp
    e2de:	       rts

0000e2e0 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    e2e0:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e2e2:	       movea.l 12(sp),a0
    e2e6:	       move.l 24(a0),d0
    e2ea:	       move.l d0,-(sp)
    e2ec:	       pea 7 <_start+0x7>
    e2f0:	       move.l sp,d0
    e2f2:	       addq.l #8,d0
    e2f4:	       move.l d0,-(sp)
    e2f6:	       jsr 109b0 <getValueType>
    e2fc:	       lea 12(sp),sp
    e300:	       tst.w d0
    e302:	   /-- bne.s e308 <builtIn_isScreenRegion+0x28>
    e304:	   |   moveq #1,d0
    e306:	/--|-- bra.s e348 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    e308:	|  \-> moveq #24,d0
    e30a:	|      add.l 12(sp),d0
    e30e:	|      move.l d0,-(sp)
    e310:	|      jsr 11334 <trimStack>
    e316:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    e318:	|      move.l (sp),d0
    e31a:	|      move.l d0,-(sp)
    e31c:	|      jsr 1147a <getRegionForObject>
    e322:	|      addq.l #4,sp
    e324:	|      tst.l d0
    e326:	|      sne d0
    e328:	|      neg.b d0
    e32a:	|      moveq #0,d1
    e32c:	|      move.b d0,d1
    e32e:	|      moveq #28,d0
    e330:	|      add.l 12(sp),d0
    e334:	|      move.l d1,-(sp)
    e336:	|      pea 1 <_start+0x1>
    e33a:	|      move.l d0,-(sp)
    e33c:	|      jsr 112a2 <setVariable>
    e342:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e346:	|      moveq #2,d0
}
    e348:	\----> addq.l #4,sp
    e34a:	       rts

0000e34c <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    e34c:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e34e:	       movea.l 12(sp),a0
    e352:	       move.l 24(a0),d0
    e356:	       move.l d0,-(sp)
    e358:	       pea 1 <_start+0x1>
    e35c:	       move.l sp,d0
    e35e:	       addq.l #8,d0
    e360:	       move.l d0,-(sp)
    e362:	       jsr 109b0 <getValueType>
    e368:	       lea 12(sp),sp
    e36c:	       tst.w d0
    e36e:	   /-- bne.s e374 <builtIn_setSpeechSpeed+0x28>
    e370:	   |   moveq #1,d0
    e372:	/--|-- bra.s e3c2 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    e374:	|  \-> moveq #24,d0
    e376:	|      add.l 12(sp),d0
    e37a:	|      move.l d0,-(sp)
    e37c:	|      jsr 11334 <trimStack>
    e382:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    e384:	|      move.l (sp),d0
    e386:	|      move.l d0,-(sp)
    e388:	|      jsr 12e5c <__floatsisf>
    e38e:	|      addq.l #4,sp
    e390:	|      move.l #1008981770,-(sp)
    e396:	|      move.l d0,-(sp)
    e398:	|      jsr 12f0e <__mulsf3>
    e39e:	|      addq.l #8,sp
    e3a0:	|      move.l d0,18136 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    e3a6:	|      moveq #28,d0
    e3a8:	|      add.l 12(sp),d0
    e3ac:	|      pea 1 <_start+0x1>
    e3b0:	|      pea 1 <_start+0x1>
    e3b4:	|      move.l d0,-(sp)
    e3b6:	|      jsr 112a2 <setVariable>
    e3bc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e3c0:	|      moveq #2,d0
}
    e3c2:	\----> addq.l #4,sp
    e3c4:	       rts

0000e3c6 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    e3c6:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e3c8:	       movea.l 12(sp),a0
    e3cc:	       move.l 24(a0),d0
    e3d0:	       move.l d0,-(sp)
    e3d2:	       pea 1 <_start+0x1>
    e3d6:	       move.l sp,d0
    e3d8:	       addq.l #8,d0
    e3da:	       move.l d0,-(sp)
    e3dc:	       jsr 109b0 <getValueType>
    e3e2:	       lea 12(sp),sp
    e3e6:	       tst.w d0
    e3e8:	   /-- bne.s e3ee <builtIn_setFontSpacing+0x28>
    e3ea:	   |   moveq #1,d0
    e3ec:	/--|-- bra.s e424 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    e3ee:	|  \-> move.l (sp),d0
    e3f0:	|      move.l d0,d0
    e3f2:	|      move.w d0,186b0 <fontSpace>
	trimStack (&fun -> stack);
    e3f8:	|      moveq #24,d0
    e3fa:	|      add.l 12(sp),d0
    e3fe:	|      move.l d0,-(sp)
    e400:	|      jsr 11334 <trimStack>
    e406:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    e408:	|      moveq #28,d0
    e40a:	|      add.l 12(sp),d0
    e40e:	|      pea 1 <_start+0x1>
    e412:	|      pea 1 <_start+0x1>
    e416:	|      move.l d0,-(sp)
    e418:	|      jsr 112a2 <setVariable>
    e41e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e422:	|      moveq #2,d0
}
    e424:	\----> addq.l #4,sp
    e426:	       rts

0000e428 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    e428:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e42a:	          movea.l 12(sp),a0
    e42e:	          move.l 24(a0),d0
    e432:	          move.l d0,-(sp)
    e434:	          pea 1 <_start+0x1>
    e438:	          move.l sp,d0
    e43a:	          addq.l #8,d0
    e43c:	          move.l d0,-(sp)
    e43e:	          jsr 109b0 <getValueType>
    e444:	          lea 12(sp),sp
    e448:	          tst.w d0
    e44a:	      /-- bne.s e450 <builtIn_transitionLevel+0x28>
    e44c:	      |   moveq #1,d0
    e44e:	/-----|-- bra.s e4a4 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    e450:	|     \-> moveq #24,d0
    e452:	|         add.l 12(sp),d0
    e456:	|         move.l d0,-(sp)
    e458:	|         jsr 11334 <trimStack>
    e45e:	|         addq.l #4,sp

	if (number < 0)
    e460:	|         move.l (sp),d0
    e462:	|     /-- bpl.s e46c <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    e464:	|     |   clr.b 1811a <brightnessLevel>
    e46a:	|  /--|-- bra.s e488 <builtIn_transitionLevel+0x60>
	else if (number > 255)
    e46c:	|  |  \-> move.l (sp),d0
    e46e:	|  |      cmpi.l #255,d0
    e474:	|  |  /-- ble.s e47e <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    e476:	|  |  |   st 1811a <brightnessLevel>
    e47c:	|  +--|-- bra.s e488 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    e47e:	|  |  \-> move.l (sp),d0
    e480:	|  |      move.l d0,d0
    e482:	|  |      move.b d0,1811a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    e488:	|  \----> moveq #28,d0
    e48a:	|         add.l 12(sp),d0
    e48e:	|         pea 1 <_start+0x1>
    e492:	|         pea 1 <_start+0x1>
    e496:	|         move.l d0,-(sp)
    e498:	|         jsr 112a2 <setVariable>
    e49e:	|         lea 12(sp),sp
	return BR_CONTINUE;
    e4a2:	|         moveq #2,d0
}
    e4a4:	\-------> addq.l #4,sp
    e4a6:	          rts

0000e4a8 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    e4a8:	movea.l 8(sp),a0
    e4ac:	move.l 24(a0),d0
    e4b0:	move.l d0,-(sp)
    e4b2:	jsr 10ef0 <getBoolean>
    e4b8:	addq.l #4,sp
    e4ba:	move.w d0,19bf0 <captureAllKeys>
	trimStack (&fun -> stack);
    e4c0:	moveq #24,d0
    e4c2:	add.l 8(sp),d0
    e4c6:	move.l d0,-(sp)
    e4c8:	jsr 11334 <trimStack>
    e4ce:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    e4d0:	move.w 19bf0 <captureAllKeys>,d0
    e4d6:	movea.w d0,a0
    e4d8:	moveq #28,d0
    e4da:	add.l 8(sp),d0
    e4de:	move.l a0,-(sp)
    e4e0:	pea 1 <_start+0x1>
    e4e4:	move.l d0,-(sp)
    e4e6:	jsr 112a2 <setVariable>
    e4ec:	lea 12(sp),sp
	return BR_CONTINUE;
    e4f0:	moveq #2,d0
}
    e4f2:	rts

0000e4f4 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    e4f4:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e4f8:	       movea.l 20(sp),a0
    e4fc:	       move.l 24(a0),d0
    e500:	       move.l d0,-(sp)
    e502:	       pea 1 <_start+0x1>
    e506:	       moveq #12,d0
    e508:	       add.l sp,d0
    e50a:	       move.l d0,-(sp)
    e50c:	       jsr 109b0 <getValueType>
    e512:	       lea 12(sp),sp
    e516:	       tst.w d0
    e518:	   /-- bne.s e520 <builtIn_spinCharacter+0x2c>
    e51a:	   |   moveq #1,d0
    e51c:	/--|-- bra.w e5d0 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    e520:	|  \-> moveq #24,d0
    e522:	|      add.l 20(sp),d0
    e526:	|      move.l d0,-(sp)
    e528:	|      jsr 11334 <trimStack>
    e52e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e530:	|      movea.l 20(sp),a0
    e534:	|      move.l 24(a0),d0
    e538:	|      move.l d0,-(sp)
    e53a:	|      pea 7 <_start+0x7>
    e53e:	|      lea 8(sp),a0
    e542:	|      move.l a0,-(sp)
    e544:	|      jsr 109b0 <getValueType>
    e54a:	|      lea 12(sp),sp
    e54e:	|      tst.w d0
    e550:	|  /-- bne.s e556 <builtIn_spinCharacter+0x62>
    e552:	|  |   moveq #1,d0
    e554:	+--|-- bra.s e5d0 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    e556:	|  \-> moveq #24,d0
    e558:	|      add.l 20(sp),d0
    e55c:	|      move.l d0,-(sp)
    e55e:	|      jsr 11334 <trimStack>
    e564:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    e566:	|      move.l (sp),d0
    e568:	|      move.l d0,-(sp)
    e56a:	|      jsr 6be4 <findPerson>
    e570:	|      addq.l #4,sp
    e572:	|      move.l d0,8(sp)
	if (thisPerson) {
    e576:	|  /-- beq.s e5b6 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    e578:	|  |   move.l 4(sp),d0
    e57c:	|  |   movea.l 8(sp),a0
    e580:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    e584:	|  |   movea.l 8(sp),a0
    e588:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    e58e:	|  |   movea.l 8(sp),a0
    e592:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    e598:	|  |   moveq #28,d0
    e59a:	|  |   add.l 20(sp),d0
    e59e:	|  |   pea 1 <_start+0x1>
    e5a2:	|  |   pea 1 <_start+0x1>
    e5a6:	|  |   move.l d0,-(sp)
    e5a8:	|  |   jsr 112a2 <setVariable>
    e5ae:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    e5b2:	|  |   moveq #3,d0
    e5b4:	+--|-- bra.s e5d0 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e5b6:	|  \-> moveq #28,d0
    e5b8:	|      add.l 20(sp),d0
    e5bc:	|      clr.l -(sp)
    e5be:	|      pea 1 <_start+0x1>
    e5c2:	|      move.l d0,-(sp)
    e5c4:	|      jsr 112a2 <setVariable>
    e5ca:	|      lea 12(sp),sp
		return BR_CONTINUE;
    e5ce:	|      moveq #2,d0
	}
}
    e5d0:	\----> lea 12(sp),sp
    e5d4:	       rts

0000e5d6 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    e5d6:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e5d8:	          movea.l 16(sp),a0
    e5dc:	          move.l 24(a0),d0
    e5e0:	          move.l d0,-(sp)
    e5e2:	          pea 7 <_start+0x7>
    e5e6:	          move.l sp,d0
    e5e8:	          addq.l #8,d0
    e5ea:	          move.l d0,-(sp)
    e5ec:	          jsr 109b0 <getValueType>
    e5f2:	          lea 12(sp),sp
    e5f6:	          tst.w d0
    e5f8:	      /-- bne.s e5fe <builtIn_getCharacterDirection+0x28>
    e5fa:	      |   moveq #1,d0
    e5fc:	/-----|-- bra.s e65c <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    e5fe:	|     \-> moveq #24,d0
    e600:	|         add.l 16(sp),d0
    e604:	|         move.l d0,-(sp)
    e606:	|         jsr 11334 <trimStack>
    e60c:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    e60e:	|         move.l (sp),d0
    e610:	|         move.l d0,-(sp)
    e612:	|         jsr 6be4 <findPerson>
    e618:	|         addq.l #4,sp
    e61a:	|         move.l d0,4(sp)
	if (thisPerson) {
    e61e:	|  /----- beq.s e642 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    e620:	|  |      movea.l 4(sp),a0
    e624:	|  |      move.l 94(a0),d1
    e628:	|  |      moveq #28,d0
    e62a:	|  |      add.l 16(sp),d0
    e62e:	|  |      move.l d1,-(sp)
    e630:	|  |      pea 1 <_start+0x1>
    e634:	|  |      move.l d0,-(sp)
    e636:	|  |      jsr 112a2 <setVariable>
    e63c:	|  |      lea 12(sp),sp
    e640:	|  |  /-- bra.s e65a <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e642:	|  \--|-> moveq #28,d0
    e644:	|     |   add.l 16(sp),d0
    e648:	|     |   clr.l -(sp)
    e64a:	|     |   pea 1 <_start+0x1>
    e64e:	|     |   move.l d0,-(sp)
    e650:	|     |   jsr 112a2 <setVariable>
    e656:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e65a:	|     \-> moveq #2,d0
}
    e65c:	\-------> addq.l #8,sp
    e65e:	          rts

0000e660 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    e660:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e662:	       movea.l 16(sp),a0
    e666:	       move.l 24(a0),d0
    e66a:	       move.l d0,-(sp)
    e66c:	       pea 7 <_start+0x7>
    e670:	       move.l sp,d0
    e672:	       addq.l #8,d0
    e674:	       move.l d0,-(sp)
    e676:	       jsr 109b0 <getValueType>
    e67c:	       lea 12(sp),sp
    e680:	       tst.w d0
    e682:	   /-- bne.s e688 <builtIn_isCharacter+0x28>
    e684:	   |   moveq #1,d0
    e686:	/--|-- bra.s e6ca <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    e688:	|  \-> moveq #24,d0
    e68a:	|      add.l 16(sp),d0
    e68e:	|      move.l d0,-(sp)
    e690:	|      jsr 11334 <trimStack>
    e696:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    e698:	|      move.l (sp),d0
    e69a:	|      move.l d0,-(sp)
    e69c:	|      jsr 6be4 <findPerson>
    e6a2:	|      addq.l #4,sp
    e6a4:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    e6a8:	|      sne d0
    e6aa:	|      neg.b d0
    e6ac:	|      moveq #0,d1
    e6ae:	|      move.b d0,d1
    e6b0:	|      moveq #28,d0
    e6b2:	|      add.l 16(sp),d0
    e6b6:	|      move.l d1,-(sp)
    e6b8:	|      pea 1 <_start+0x1>
    e6bc:	|      move.l d0,-(sp)
    e6be:	|      jsr 112a2 <setVariable>
    e6c4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e6c8:	|      moveq #2,d0
}
    e6ca:	\----> addq.l #8,sp
    e6cc:	       rts

0000e6ce <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    e6ce:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e6d0:	          movea.l 16(sp),a0
    e6d4:	          move.l 24(a0),d0
    e6d8:	          move.l d0,-(sp)
    e6da:	          pea 7 <_start+0x7>
    e6de:	          move.l sp,d0
    e6e0:	          addq.l #8,d0
    e6e2:	          move.l d0,-(sp)
    e6e4:	          jsr 109b0 <getValueType>
    e6ea:	          lea 12(sp),sp
    e6ee:	          tst.w d0
    e6f0:	      /-- bne.s e6f6 <builtIn_normalCharacter+0x28>
    e6f2:	      |   moveq #1,d0
    e6f4:	/-----|-- bra.s e772 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    e6f6:	|     \-> moveq #24,d0
    e6f8:	|         add.l 16(sp),d0
    e6fc:	|         move.l d0,-(sp)
    e6fe:	|         jsr 11334 <trimStack>
    e704:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    e706:	|         move.l (sp),d0
    e708:	|         move.l d0,-(sp)
    e70a:	|         jsr 6be4 <findPerson>
    e710:	|         addq.l #4,sp
    e712:	|         move.l d0,4(sp)
	if (thisPerson)
    e716:	|  /----- beq.s e758 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    e718:	|  |      movea.l 4(sp),a0
    e71c:	|  |      movea.l 68(a0),a0
    e720:	|  |      move.l (a0),d1
    e722:	|  |      movea.l 4(sp),a0
    e726:	|  |      move.l 94(a0),d0
    e72a:	|  |      add.l d0,d0
    e72c:	|  |      add.l d0,d0
    e72e:	|  |      movea.l d1,a0
    e730:	|  |      adda.l d0,a0
    e732:	|  |      move.l (a0),d0
    e734:	|  |      movea.l 4(sp),a0
    e738:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    e73c:	|  |      moveq #28,d0
    e73e:	|  |      add.l 16(sp),d0
    e742:	|  |      pea 1 <_start+0x1>
    e746:	|  |      pea 1 <_start+0x1>
    e74a:	|  |      move.l d0,-(sp)
    e74c:	|  |      jsr 112a2 <setVariable>
    e752:	|  |      lea 12(sp),sp
    e756:	|  |  /-- bra.s e770 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e758:	|  \--|-> moveq #28,d0
    e75a:	|     |   add.l 16(sp),d0
    e75e:	|     |   clr.l -(sp)
    e760:	|     |   pea 1 <_start+0x1>
    e764:	|     |   move.l d0,-(sp)
    e766:	|     |   jsr 112a2 <setVariable>
    e76c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e770:	|     \-> moveq #2,d0
}
    e772:	\-------> addq.l #8,sp
    e774:	          rts

0000e776 <builtIn_isMoving>:

builtIn(isMoving)
{
    e776:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e778:	          movea.l 16(sp),a0
    e77c:	          move.l 24(a0),d0
    e780:	          move.l d0,-(sp)
    e782:	          pea 7 <_start+0x7>
    e786:	          move.l sp,d0
    e788:	          addq.l #8,d0
    e78a:	          move.l d0,-(sp)
    e78c:	          jsr 109b0 <getValueType>
    e792:	          lea 12(sp),sp
    e796:	          tst.w d0
    e798:	      /-- bne.s e79e <builtIn_isMoving+0x28>
    e79a:	      |   moveq #1,d0
    e79c:	/-----|-- bra.s e7fe <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    e79e:	|     \-> moveq #24,d0
    e7a0:	|         add.l 16(sp),d0
    e7a4:	|         move.l d0,-(sp)
    e7a6:	|         jsr 11334 <trimStack>
    e7ac:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    e7ae:	|         move.l (sp),d0
    e7b0:	|         move.l d0,-(sp)
    e7b2:	|         jsr 6be4 <findPerson>
    e7b8:	|         addq.l #4,sp
    e7ba:	|         move.l d0,4(sp)
	if (thisPerson)
    e7be:	|  /----- beq.s e7e4 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    e7c0:	|  |      movea.l 4(sp),a0
    e7c4:	|  |      move.w 52(a0),d0
    e7c8:	|  |      movea.w d0,a0
    e7ca:	|  |      moveq #28,d0
    e7cc:	|  |      add.l 16(sp),d0
    e7d0:	|  |      move.l a0,-(sp)
    e7d2:	|  |      pea 1 <_start+0x1>
    e7d6:	|  |      move.l d0,-(sp)
    e7d8:	|  |      jsr 112a2 <setVariable>
    e7de:	|  |      lea 12(sp),sp
    e7e2:	|  |  /-- bra.s e7fc <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e7e4:	|  \--|-> moveq #28,d0
    e7e6:	|     |   add.l 16(sp),d0
    e7ea:	|     |   clr.l -(sp)
    e7ec:	|     |   pea 1 <_start+0x1>
    e7f0:	|     |   move.l d0,-(sp)
    e7f2:	|     |   jsr 112a2 <setVariable>
    e7f8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e7fc:	|     \-> moveq #2,d0
}
    e7fe:	\-------> addq.l #8,sp
    e800:	          rts

0000e802 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    e802:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e806:	          movea.l 20(sp),a0
    e80a:	          move.l 24(a0),d0
    e80e:	          move.l d0,-(sp)
    e810:	          pea 7 <_start+0x7>
    e814:	          lea 8(sp),a0
    e818:	          move.l a0,-(sp)
    e81a:	          jsr 109b0 <getValueType>
    e820:	          lea 12(sp),sp
    e824:	          tst.w d0
    e826:	      /-- bne.s e82e <builtIn_fetchEvent+0x2c>
    e828:	      |   moveq #1,d0
    e82a:	/-----|-- bra.w e8c2 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    e82e:	|     \-> moveq #24,d0
    e830:	|         add.l 20(sp),d0
    e834:	|         move.l d0,-(sp)
    e836:	|         jsr 11334 <trimStack>
    e83c:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e83e:	|         movea.l 20(sp),a0
    e842:	|         move.l 24(a0),d0
    e846:	|         move.l d0,-(sp)
    e848:	|         pea 7 <_start+0x7>
    e84c:	|         moveq #12,d0
    e84e:	|         add.l sp,d0
    e850:	|         move.l d0,-(sp)
    e852:	|         jsr 109b0 <getValueType>
    e858:	|         lea 12(sp),sp
    e85c:	|         tst.w d0
    e85e:	|     /-- bne.s e864 <builtIn_fetchEvent+0x62>
    e860:	|     |   moveq #1,d0
    e862:	+-----|-- bra.s e8c2 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    e864:	|     \-> moveq #24,d0
    e866:	|         add.l 20(sp),d0
    e86a:	|         move.l d0,-(sp)
    e86c:	|         jsr 11334 <trimStack>
    e872:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    e874:	|         move.l (sp),d1
    e876:	|         move.l 4(sp),d0
    e87a:	|         move.l d1,-(sp)
    e87c:	|         move.l d0,-(sp)
    e87e:	|         jsr 9836 <getCombinationFunction>
    e884:	|         addq.l #8,sp
    e886:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    e88a:	|  /----- beq.s e8a8 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    e88c:	|  |      moveq #28,d0
    e88e:	|  |      add.l 20(sp),d0
    e892:	|  |      move.l 8(sp),-(sp)
    e896:	|  |      pea 2 <_start+0x2>
    e89a:	|  |      move.l d0,-(sp)
    e89c:	|  |      jsr 112a2 <setVariable>
    e8a2:	|  |      lea 12(sp),sp
    e8a6:	|  |  /-- bra.s e8c0 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e8a8:	|  \--|-> moveq #28,d0
    e8aa:	|     |   add.l 20(sp),d0
    e8ae:	|     |   clr.l -(sp)
    e8b0:	|     |   pea 1 <_start+0x1>
    e8b4:	|     |   move.l d0,-(sp)
    e8b6:	|     |   jsr 112a2 <setVariable>
    e8bc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e8c0:	|     \-> moveq #2,d0
}
    e8c2:	\-------> lea 12(sp),sp
    e8c6:	          rts

0000e8c8 <builtIn_deleteFile>:

builtIn(deleteFile)
{
    e8c8:	       lea -24(sp),sp
    e8cc:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    e8ce:	       movea.l 36(sp),a0
    e8d2:	       move.l 24(a0),d0
    e8d6:	       move.l d0,-(sp)
    e8d8:	       jsr 10f86 <getTextFromAnyVar>
    e8de:	       addq.l #4,sp
    e8e0:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    e8e4:	       moveq #24,d0
    e8e6:	       add.l 36(sp),d0
    e8ea:	       move.l d0,-(sp)
    e8ec:	       jsr 11334 <trimStack>
    e8f2:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    e8f4:	       move.l 24(sp),-(sp)
    e8f8:	       jsr 2fe <encodeFilename>
    e8fe:	       addq.l #4,sp
    e900:	       move.l d0,20(sp)
    FreeVec(namNormal);
    e904:	       move.l 24(sp),16(sp)
    e90a:	       move.l 19c4c <SysBase>,d0
    e910:	       movea.l d0,a6
    e912:	       movea.l 16(sp),a1
    e916:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    e91a:	       move.l 20(sp),-(sp)
    e91e:	       jsr a5ee <failSecurityCheck>
    e924:	       addq.l #4,sp
    e926:	       tst.w d0
    e928:	   /-- beq.s e92e <builtIn_deleteFile+0x66>
    e92a:	   |   moveq #1,d0
    e92c:	/--|-- bra.s e97c <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    e92e:	|  \-> move.l 20(sp),12(sp)
    e934:	|      move.l 19c54 <DOSBase>,d0
    e93a:	|      movea.l d0,a6
    e93c:	|      move.l 12(sp),d1
    e940:	|      jsr -72(a6)
    e944:	|      move.l d0,8(sp)
    e948:	|      move.l 8(sp),d1
    e94c:	|      moveq #28,d0
    e94e:	|      add.l 36(sp),d0
    e952:	|      move.l d1,-(sp)
    e954:	|      pea 1 <_start+0x1>
    e958:	|      move.l d0,-(sp)
    e95a:	|      jsr 112a2 <setVariable>
    e960:	|      lea 12(sp),sp
    FreeVec(nam);
    e964:	|      move.l 20(sp),4(sp)
    e96a:	|      move.l 19c4c <SysBase>,d0
    e970:	|      movea.l d0,a6
    e972:	|      movea.l 4(sp),a1
    e976:	|      jsr -690(a6)

    return BR_CONTINUE;
    e97a:	|      moveq #2,d0
}
    e97c:	\----> movea.l (sp)+,a6
    e97e:	       lea 24(sp),sp
    e982:	       rts

0000e984 <builtIn_renameFile>:

builtIn(renameFile)
{
    e984:	       lea -40(sp),sp
    e988:	       move.l a6,-(sp)
    e98a:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    e98c:	       movea.l 56(sp),a0
    e990:	       move.l 24(a0),d0
    e994:	       move.l d0,-(sp)
    e996:	       jsr 10f86 <getTextFromAnyVar>
    e99c:	       addq.l #4,sp
    e99e:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    e9a2:	       move.l 44(sp),-(sp)
    e9a6:	       jsr 2fe <encodeFilename>
    e9ac:	       addq.l #4,sp
    e9ae:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    e9b2:	       moveq #24,d0
    e9b4:	       add.l 56(sp),d0
    e9b8:	       move.l d0,-(sp)
    e9ba:	       jsr 11334 <trimStack>
    e9c0:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    e9c2:	       move.l 40(sp),-(sp)
    e9c6:	       jsr a5ee <failSecurityCheck>
    e9cc:	       addq.l #4,sp
    e9ce:	       tst.w d0
    e9d0:	   /-- beq.s e9d8 <builtIn_renameFile+0x54>
    e9d2:	   |   moveq #1,d0
    e9d4:	/--|-- bra.w eabe <builtIn_renameFile+0x13a>
	FreeVec(temp);
    e9d8:	|  \-> move.l 44(sp),36(sp)
    e9de:	|      move.l 19c4c <SysBase>,d0
    e9e4:	|      movea.l d0,a6
    e9e6:	|      movea.l 36(sp),a1
    e9ea:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    e9ee:	|      movea.l 56(sp),a0
    e9f2:	|      move.l 24(a0),d0
    e9f6:	|      move.l d0,-(sp)
    e9f8:	|      jsr 10f86 <getTextFromAnyVar>
    e9fe:	|      addq.l #4,sp
    ea00:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    ea04:	|      move.l 44(sp),-(sp)
    ea08:	|      jsr 2fe <encodeFilename>
    ea0e:	|      addq.l #4,sp
    ea10:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    ea14:	|      moveq #24,d0
    ea16:	|      add.l 56(sp),d0
    ea1a:	|      move.l d0,-(sp)
    ea1c:	|      jsr 11334 <trimStack>
    ea22:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    ea24:	|      move.l 32(sp),-(sp)
    ea28:	|      jsr a5ee <failSecurityCheck>
    ea2e:	|      addq.l #4,sp
    ea30:	|      tst.w d0
    ea32:	|  /-- beq.s ea3a <builtIn_renameFile+0xb6>
    ea34:	|  |   moveq #1,d0
    ea36:	+--|-- bra.w eabe <builtIn_renameFile+0x13a>
	FreeVec(temp);
    ea3a:	|  \-> move.l 44(sp),28(sp)
    ea40:	|      move.l 19c4c <SysBase>,d0
    ea46:	|      movea.l d0,a6
    ea48:	|      movea.l 28(sp),a1
    ea4c:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    ea50:	|      move.l 32(sp),24(sp)
    ea56:	|      move.l 40(sp),20(sp)
    ea5c:	|      move.l 19c54 <DOSBase>,d0
    ea62:	|      movea.l d0,a6
    ea64:	|      move.l 24(sp),d1
    ea68:	|      move.l 20(sp),d2
    ea6c:	|      jsr -78(a6)
    ea70:	|      move.l d0,16(sp)
    ea74:	|      move.l 16(sp),d1
    ea78:	|      moveq #28,d0
    ea7a:	|      add.l 56(sp),d0
    ea7e:	|      move.l d1,-(sp)
    ea80:	|      pea 1 <_start+0x1>
    ea84:	|      move.l d0,-(sp)
    ea86:	|      jsr 112a2 <setVariable>
    ea8c:	|      lea 12(sp),sp
	FreeVec(nam);
    ea90:	|      move.l 32(sp),12(sp)
    ea96:	|      move.l 19c4c <SysBase>,d0
    ea9c:	|      movea.l d0,a6
    ea9e:	|      movea.l 12(sp),a1
    eaa2:	|      jsr -690(a6)
	FreeVec(newnam);
    eaa6:	|      move.l 40(sp),8(sp)
    eaac:	|      move.l 19c4c <SysBase>,d0
    eab2:	|      movea.l d0,a6
    eab4:	|      movea.l 8(sp),a1
    eab8:	|      jsr -690(a6)

	return BR_CONTINUE;
    eabc:	|      moveq #2,d0
}
    eabe:	\----> move.l (sp)+,d2
    eac0:	       movea.l (sp)+,a6
    eac2:	       lea 40(sp),sp
    eac6:	       rts

0000eac8 <builtIn_cacheSound>:

builtIn(cacheSound)
{
    eac8:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eaca:	       movea.l 12(sp),a0
    eace:	       move.l 24(a0),d0
    ead2:	       move.l d0,-(sp)
    ead4:	       pea 5 <_start+0x5>
    ead8:	       move.l sp,d0
    eada:	       addq.l #8,d0
    eadc:	       move.l d0,-(sp)
    eade:	       jsr 109b0 <getValueType>
    eae4:	       lea 12(sp),sp
    eae8:	       tst.w d0
    eaea:	   /-- bne.s eaf0 <builtIn_cacheSound+0x28>
    eaec:	   |   moveq #1,d0
    eaee:	/--|-- bra.s eb18 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    eaf0:	|  \-> moveq #24,d0
    eaf2:	|      add.l 12(sp),d0
    eaf6:	|      move.l d0,-(sp)
    eaf8:	|      jsr 11334 <trimStack>
    eafe:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    eb00:	|      move.l (sp),d0
    eb02:	|      move.l d0,-(sp)
    eb04:	|      jsr 9480 <cacheSound>
    eb0a:	|      addq.l #4,sp
    eb0c:	|      moveq #-1,d1
    eb0e:	|      cmp.l d0,d1
    eb10:	|  /-- bne.s eb16 <builtIn_cacheSound+0x4e>
    eb12:	|  |   moveq #1,d0
    eb14:	+--|-- bra.s eb18 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    eb16:	|  \-> moveq #2,d0
}
    eb18:	\----> addq.l #4,sp
    eb1a:	       rts

0000eb1c <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    eb1c:	pea 164e1 <main_sludge.c.2f5c5368+0xa07>
    eb22:	jsr 12a04 <KPrintF>
    eb28:	addq.l #4,sp
	return BR_CONTINUE;
    eb2a:	moveq #2,d0
}
    eb2c:	rts

0000eb2e <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    eb2e:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb32:	          movea.l 20(sp),a0
    eb36:	          move.l 24(a0),d0
    eb3a:	          move.l d0,-(sp)
    eb3c:	          pea 1 <_start+0x1>
    eb40:	          moveq #12,d0
    eb42:	          add.l sp,d0
    eb44:	          move.l d0,-(sp)
    eb46:	          jsr 109b0 <getValueType>
    eb4c:	          lea 12(sp),sp
    eb50:	          tst.w d0
    eb52:	      /-- bne.s eb5a <builtIn_setCharacterSpinSpeed+0x2c>
    eb54:	      |   moveq #1,d0
    eb56:	/-----|-- bra.w ebf4 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    eb5a:	|     \-> moveq #24,d0
    eb5c:	|         add.l 20(sp),d0
    eb60:	|         move.l d0,-(sp)
    eb62:	|         jsr 11334 <trimStack>
    eb68:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb6a:	|         movea.l 20(sp),a0
    eb6e:	|         move.l 24(a0),d0
    eb72:	|         move.l d0,-(sp)
    eb74:	|         pea 7 <_start+0x7>
    eb78:	|         lea 8(sp),a0
    eb7c:	|         move.l a0,-(sp)
    eb7e:	|         jsr 109b0 <getValueType>
    eb84:	|         lea 12(sp),sp
    eb88:	|         tst.w d0
    eb8a:	|     /-- bne.s eb90 <builtIn_setCharacterSpinSpeed+0x62>
    eb8c:	|     |   moveq #1,d0
    eb8e:	+-----|-- bra.s ebf4 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    eb90:	|     \-> moveq #24,d0
    eb92:	|         add.l 20(sp),d0
    eb96:	|         move.l d0,-(sp)
    eb98:	|         jsr 11334 <trimStack>
    eb9e:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    eba0:	|         move.l (sp),d0
    eba2:	|         move.l d0,-(sp)
    eba4:	|         jsr 6be4 <findPerson>
    ebaa:	|         addq.l #4,sp
    ebac:	|         move.l d0,8(sp)

	if (thisPerson) {
    ebb0:	|  /----- beq.s ebda <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    ebb2:	|  |      move.l 4(sp),d0
    ebb6:	|  |      movea.l 8(sp),a0
    ebba:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    ebbe:	|  |      moveq #28,d0
    ebc0:	|  |      add.l 20(sp),d0
    ebc4:	|  |      pea 1 <_start+0x1>
    ebc8:	|  |      pea 1 <_start+0x1>
    ebcc:	|  |      move.l d0,-(sp)
    ebce:	|  |      jsr 112a2 <setVariable>
    ebd4:	|  |      lea 12(sp),sp
    ebd8:	|  |  /-- bra.s ebf2 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ebda:	|  \--|-> moveq #28,d0
    ebdc:	|     |   add.l 20(sp),d0
    ebe0:	|     |   clr.l -(sp)
    ebe2:	|     |   pea 1 <_start+0x1>
    ebe6:	|     |   move.l d0,-(sp)
    ebe8:	|     |   jsr 112a2 <setVariable>
    ebee:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ebf2:	|     \-> moveq #2,d0
}
    ebf4:	\-------> lea 12(sp),sp
    ebf8:	          rts

0000ebfa <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    ebfa:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebfe:	          movea.l 20(sp),a0
    ec02:	          move.l 24(a0),d0
    ec06:	          move.l d0,-(sp)
    ec08:	          pea 1 <_start+0x1>
    ec0c:	          moveq #12,d0
    ec0e:	          add.l sp,d0
    ec10:	          move.l d0,-(sp)
    ec12:	          jsr 109b0 <getValueType>
    ec18:	          lea 12(sp),sp
    ec1c:	          tst.w d0
    ec1e:	      /-- bne.s ec26 <builtIn_setCharacterAngleOffset+0x2c>
    ec20:	      |   moveq #1,d0
    ec22:	/-----|-- bra.w ecc0 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    ec26:	|     \-> moveq #24,d0
    ec28:	|         add.l 20(sp),d0
    ec2c:	|         move.l d0,-(sp)
    ec2e:	|         jsr 11334 <trimStack>
    ec34:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec36:	|         movea.l 20(sp),a0
    ec3a:	|         move.l 24(a0),d0
    ec3e:	|         move.l d0,-(sp)
    ec40:	|         pea 7 <_start+0x7>
    ec44:	|         lea 8(sp),a0
    ec48:	|         move.l a0,-(sp)
    ec4a:	|         jsr 109b0 <getValueType>
    ec50:	|         lea 12(sp),sp
    ec54:	|         tst.w d0
    ec56:	|     /-- bne.s ec5c <builtIn_setCharacterAngleOffset+0x62>
    ec58:	|     |   moveq #1,d0
    ec5a:	+-----|-- bra.s ecc0 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    ec5c:	|     \-> moveq #24,d0
    ec5e:	|         add.l 20(sp),d0
    ec62:	|         move.l d0,-(sp)
    ec64:	|         jsr 11334 <trimStack>
    ec6a:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    ec6c:	|         move.l (sp),d0
    ec6e:	|         move.l d0,-(sp)
    ec70:	|         jsr 6be4 <findPerson>
    ec76:	|         addq.l #4,sp
    ec78:	|         move.l d0,8(sp)

	if (thisPerson) {
    ec7c:	|  /----- beq.s eca6 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
    ec7e:	|  |      move.l 4(sp),d0
    ec82:	|  |      movea.l 8(sp),a0
    ec86:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    ec8a:	|  |      moveq #28,d0
    ec8c:	|  |      add.l 20(sp),d0
    ec90:	|  |      pea 1 <_start+0x1>
    ec94:	|  |      pea 1 <_start+0x1>
    ec98:	|  |      move.l d0,-(sp)
    ec9a:	|  |      jsr 112a2 <setVariable>
    eca0:	|  |      lea 12(sp),sp
    eca4:	|  |  /-- bra.s ecbe <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    eca6:	|  \--|-> moveq #28,d0
    eca8:	|     |   add.l 20(sp),d0
    ecac:	|     |   clr.l -(sp)
    ecae:	|     |   pea 1 <_start+0x1>
    ecb2:	|     |   move.l d0,-(sp)
    ecb4:	|     |   jsr 112a2 <setVariable>
    ecba:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ecbe:	|     \-> moveq #2,d0
}
    ecc0:	\-------> lea 12(sp),sp
    ecc4:	          rts

0000ecc6 <builtIn_transitionMode>:


builtIn(transitionMode)
{
    ecc6:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecc8:	       movea.l 12(sp),a0
    eccc:	       move.l 24(a0),d0
    ecd0:	       move.l d0,-(sp)
    ecd2:	       pea 1 <_start+0x1>
    ecd6:	       move.l sp,d0
    ecd8:	       addq.l #8,d0
    ecda:	       move.l d0,-(sp)
    ecdc:	       jsr 109b0 <getValueType>
    ece2:	       lea 12(sp),sp
    ece6:	       tst.w d0
    ece8:	   /-- bne.s ecee <builtIn_transitionMode+0x28>
    ecea:	   |   moveq #1,d0
    ecec:	/--|-- bra.s ed24 <builtIn_transitionMode+0x5e>
	fadeMode = n;
    ecee:	|  \-> move.l (sp),d0
    ecf0:	|      move.l d0,d0
    ecf2:	|      move.b d0,18686 <fadeMode>
	trimStack (&fun -> stack);
    ecf8:	|      moveq #24,d0
    ecfa:	|      add.l 12(sp),d0
    ecfe:	|      move.l d0,-(sp)
    ed00:	|      jsr 11334 <trimStack>
    ed06:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    ed08:	|      moveq #28,d0
    ed0a:	|      add.l 12(sp),d0
    ed0e:	|      pea 1 <_start+0x1>
    ed12:	|      pea 1 <_start+0x1>
    ed16:	|      move.l d0,-(sp)
    ed18:	|      jsr 112a2 <setVariable>
    ed1e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed22:	|      moveq #2,d0
}
    ed24:	\----> addq.l #4,sp
    ed26:	       rts

0000ed28 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    ed28:	moveq #24,d0
    ed2a:	add.l 8(sp),d0
    ed2e:	move.l d0,-(sp)
    ed30:	jsr 11334 <trimStack>
    ed36:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
    ed38:	moveq #28,d0
    ed3a:	add.l 8(sp),d0
    ed3e:	pea 1 <_start+0x1>
    ed42:	pea 1 <_start+0x1>
    ed46:	move.l d0,-(sp)
    ed48:	jsr 112a2 <setVariable>
    ed4e:	lea 12(sp),sp
	return BR_CONTINUE;
    ed52:	moveq #2,d0
}
    ed54:	rts

0000ed56 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
    ed56:	pea 1650b <main_sludge.c.2f5c5368+0xa31>
    ed5c:	jsr 12a04 <KPrintF>
    ed62:	addq.l #4,sp
	return BR_CONTINUE;
    ed64:	moveq #2,d0
}
    ed66:	rts

0000ed68 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
    ed68:	       lea -16(sp),sp
    ed6c:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
    ed6e:	       movea.l 28(sp),a0
    ed72:	       move.l 24(a0),d0
    ed76:	       move.l d0,-(sp)
    ed78:	       jsr 10f86 <getTextFromAnyVar>
    ed7e:	       addq.l #4,sp
    ed80:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
    ed84:	   /-- bne.s ed8c <builtIn_saveCustomData+0x24>
    ed86:	   |   moveq #1,d0
    ed88:	/--|-- bra.w ee3e <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
    ed8c:	|  \-> move.l 16(sp),-(sp)
    ed90:	|      jsr 2fe <encodeFilename>
    ed96:	|      addq.l #4,sp
    ed98:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
    ed9c:	|      move.l 16(sp),8(sp)
    eda2:	|      move.l 19c4c <SysBase>,d0
    eda8:	|      movea.l d0,a6
    edaa:	|      movea.l 8(sp),a1
    edae:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
    edb2:	|      move.l 12(sp),-(sp)
    edb6:	|      jsr a5ee <failSecurityCheck>
    edbc:	|      addq.l #4,sp
    edbe:	|      tst.w d0
    edc0:	|  /-- beq.s edc6 <builtIn_saveCustomData+0x5e>
    edc2:	|  |   moveq #1,d0
    edc4:	+--|-- bra.s ee3e <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    edc6:	|  \-> moveq #24,d0
    edc8:	|      add.l 28(sp),d0
    edcc:	|      move.l d0,-(sp)
    edce:	|      jsr 11334 <trimStack>
    edd4:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
    edd6:	|      movea.l 28(sp),a0
    edda:	|      movea.l 24(a0),a0
    edde:	|      move.l (a0),d0
    ede0:	|      moveq #6,d1
    ede2:	|      cmp.l d0,d1
    ede4:	|  /-- beq.s edf8 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
    ede6:	|  |   pea 16538 <main_sludge.c.2f5c5368+0xa5e>
    edec:	|  |   jsr 12a04 <KPrintF>
    edf2:	|  |   addq.l #4,sp
		return BR_ERROR;
    edf4:	|  |   moveq #1,d0
    edf6:	+--|-- bra.s ee3e <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
    edf8:	|  \-> movea.l 28(sp),a0
    edfc:	|      move.l 24(a0),d0
    ee00:	|      move.l d0,-(sp)
    ee02:	|      move.l 16(sp),-(sp)
    ee06:	|      jsr a23e <stackToFile>
    ee0c:	|      addq.l #8,sp
    ee0e:	|      tst.w d0
    ee10:	|  /-- bne.s ee16 <builtIn_saveCustomData+0xae>
    ee12:	|  |   moveq #1,d0
    ee14:	+--|-- bra.s ee3e <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    ee16:	|  \-> moveq #24,d0
    ee18:	|      add.l 28(sp),d0
    ee1c:	|      move.l d0,-(sp)
    ee1e:	|      jsr 11334 <trimStack>
    ee24:	|      addq.l #4,sp
	FreeVec(fileName);
    ee26:	|      move.l 12(sp),4(sp)
    ee2c:	|      move.l 19c4c <SysBase>,d0
    ee32:	|      movea.l d0,a6
    ee34:	|      movea.l 4(sp),a1
    ee38:	|      jsr -690(a6)
	return BR_CONTINUE;
    ee3c:	|      moveq #2,d0
}
    ee3e:	\----> movea.l (sp)+,a6
    ee40:	       lea 16(sp),sp
    ee44:	       rts

0000ee46 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
    ee46:	       lea -28(sp),sp
    ee4a:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    ee4c:	       movea.l 40(sp),a0
    ee50:	       move.l 24(a0),d0
    ee54:	       move.l d0,-(sp)
    ee56:	       jsr 10f86 <getTextFromAnyVar>
    ee5c:	       addq.l #4,sp
    ee5e:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
    ee62:	   /-- bne.s ee6a <builtIn_loadCustomData+0x24>
    ee64:	   |   moveq #1,d0
    ee66:	/--|-- bra.w ef66 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
    ee6a:	|  \-> move.l 28(sp),-(sp)
    ee6e:	|      jsr 2fe <encodeFilename>
    ee74:	|      addq.l #4,sp
    ee76:	|      move.l d0,24(sp)
	FreeVec(newTextA);
    ee7a:	|      move.l 28(sp),20(sp)
    ee80:	|      move.l 19c4c <SysBase>,d0
    ee86:	|      movea.l d0,a6
    ee88:	|      movea.l 20(sp),a1
    ee8c:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
    ee90:	|      move.l 24(sp),-(sp)
    ee94:	|      jsr a5ee <failSecurityCheck>
    ee9a:	|      addq.l #4,sp
    ee9c:	|      tst.w d0
    ee9e:	|  /-- beq.s eea6 <builtIn_loadCustomData+0x60>
    eea0:	|  |   moveq #1,d0
    eea2:	+--|-- bra.w ef66 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
    eea6:	|  \-> moveq #24,d0
    eea8:	|      add.l 40(sp),d0
    eeac:	|      move.l d0,-(sp)
    eeae:	|      jsr 11334 <trimStack>
    eeb4:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
    eeb6:	|      moveq #28,d0
    eeb8:	|      add.l 40(sp),d0
    eebc:	|      move.l d0,-(sp)
    eebe:	|      jsr 10bfe <unlinkVar>
    eec4:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
    eec6:	|      movea.l 40(sp),a0
    eeca:	|      moveq #6,d0
    eecc:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    eed0:	|      moveq #12,d0
    eed2:	|      move.l d0,16(sp)
    eed6:	|      clr.l 12(sp)
    eeda:	|      move.l 19c4c <SysBase>,d0
    eee0:	|      movea.l d0,a6
    eee2:	|      move.l 16(sp),d0
    eee6:	|      move.l 12(sp),d1
    eeea:	|      jsr -684(a6)
    eeee:	|      move.l d0,8(sp)
    eef2:	|      move.l 8(sp),d0
    eef6:	|      movea.l 40(sp),a0
    eefa:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
    eefe:	|      movea.l 40(sp),a0
    ef02:	|      move.l 32(a0),d0
    ef06:	|  /-- bne.s ef0c <builtIn_loadCustomData+0xc6>
    ef08:	|  |   moveq #1,d0
    ef0a:	+--|-- bra.s ef66 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
    ef0c:	|  \-> movea.l 40(sp),a0
    ef10:	|      movea.l 32(a0),a0
    ef14:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
    ef16:	|      movea.l 40(sp),a0
    ef1a:	|      movea.l 32(a0),a0
    ef1e:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
    ef22:	|      movea.l 40(sp),a0
    ef26:	|      movea.l 32(a0),a0
    ef2a:	|      moveq #1,d0
    ef2c:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
    ef30:	|      movea.l 40(sp),a0
    ef34:	|      move.l 32(a0),d0
    ef38:	|      move.l d0,-(sp)
    ef3a:	|      move.l 28(sp),-(sp)
    ef3e:	|      jsr 9c78 <fileToStack>
    ef44:	|      addq.l #8,sp
    ef46:	|      tst.w d0
    ef48:	|  /-- bne.s ef4e <builtIn_loadCustomData+0x108>
    ef4a:	|  |   moveq #1,d0
    ef4c:	+--|-- bra.s ef66 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
    ef4e:	|  \-> move.l 24(sp),4(sp)
    ef54:	|      move.l 19c4c <SysBase>,d0
    ef5a:	|      movea.l d0,a6
    ef5c:	|      movea.l 4(sp),a1
    ef60:	|      jsr -690(a6)
	return BR_CONTINUE;
    ef64:	|      moveq #2,d0
}
    ef66:	\----> movea.l (sp)+,a6
    ef68:	       lea 28(sp),sp
    ef6c:	       rts

0000ef6e <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
    ef6e:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef70:	       movea.l 12(sp),a0
    ef74:	       move.l 24(a0),d0
    ef78:	       move.l d0,-(sp)
    ef7a:	       pea 1 <_start+0x1>
    ef7e:	       move.l sp,d0
    ef80:	       addq.l #8,d0
    ef82:	       move.l d0,-(sp)
    ef84:	       jsr 109b0 <getValueType>
    ef8a:	       lea 12(sp),sp
    ef8e:	       tst.w d0
    ef90:	   /-- bne.s ef96 <builtIn_setCustomEncoding+0x28>
    ef92:	   |   moveq #1,d0
    ef94:	/--|-- bra.s efcc <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
    ef96:	|  \-> move.l (sp),d0
    ef98:	|      move.l d0,d0
    ef9a:	|      move.w d0,19d00 <saveEncoding>
	trimStack (&fun -> stack);
    efa0:	|      moveq #24,d0
    efa2:	|      add.l 12(sp),d0
    efa6:	|      move.l d0,-(sp)
    efa8:	|      jsr 11334 <trimStack>
    efae:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    efb0:	|      moveq #28,d0
    efb2:	|      add.l 12(sp),d0
    efb6:	|      pea 1 <_start+0x1>
    efba:	|      pea 1 <_start+0x1>
    efbe:	|      move.l d0,-(sp)
    efc0:	|      jsr 112a2 <setVariable>
    efc6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    efca:	|      moveq #2,d0
}
    efcc:	\----> addq.l #4,sp
    efce:	       rts

0000efd0 <builtIn_freeSound>:

builtIn(freeSound)
{
    efd0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    efd2:	       movea.l 12(sp),a0
    efd6:	       move.l 24(a0),d0
    efda:	       move.l d0,-(sp)
    efdc:	       pea 5 <_start+0x5>
    efe0:	       move.l sp,d0
    efe2:	       addq.l #8,d0
    efe4:	       move.l d0,-(sp)
    efe6:	       jsr 109b0 <getValueType>
    efec:	       lea 12(sp),sp
    eff0:	       tst.w d0
    eff2:	   /-- bne.s eff8 <builtIn_freeSound+0x28>
    eff4:	   |   moveq #1,d0
    eff6:	/--|-- bra.s f016 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
    eff8:	|  \-> moveq #24,d0
    effa:	|      add.l 12(sp),d0
    effe:	|      move.l d0,-(sp)
    f000:	|      jsr 11334 <trimStack>
    f006:	|      addq.l #4,sp
	huntKillFreeSound (v);
    f008:	|      move.l (sp),d0
    f00a:	|      move.l d0,-(sp)
    f00c:	|      jsr 9484 <huntKillFreeSound>
    f012:	|      addq.l #4,sp
	return BR_CONTINUE;
    f014:	|      moveq #2,d0
}
    f016:	\----> addq.l #4,sp
    f018:	       rts

0000f01a <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
    f01a:	       lea -12(sp),sp
    f01e:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f020:	       movea.l 24(sp),a0
    f024:	       move.l 24(a0),d0
    f028:	       move.l d0,-(sp)
    f02a:	       pea 1 <_start+0x1>
    f02e:	       moveq #16,d0
    f030:	       add.l sp,d0
    f032:	       move.l d0,-(sp)
    f034:	       jsr 109b0 <getValueType>
    f03a:	       lea 12(sp),sp
    f03e:	       tst.w d0
    f040:	   /-- bne.s f048 <builtIn_parallaxAdd+0x2e>
    f042:	   |   moveq #1,d0
    f044:	/--|-- bra.w f11c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f048:	|  \-> moveq #24,d0
    f04a:	|      add.l 24(sp),d0
    f04e:	|      move.l d0,-(sp)
    f050:	|      jsr 11334 <trimStack>
    f056:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f058:	|      movea.l 24(sp),a0
    f05c:	|      move.l 24(a0),d0
    f060:	|      move.l d0,-(sp)
    f062:	|      pea 1 <_start+0x1>
    f066:	|      moveq #20,d0
    f068:	|      add.l sp,d0
    f06a:	|      move.l d0,-(sp)
    f06c:	|      jsr 109b0 <getValueType>
    f072:	|      lea 12(sp),sp
    f076:	|      tst.w d0
    f078:	|  /-- bne.s f080 <builtIn_parallaxAdd+0x66>
    f07a:	|  |   moveq #1,d0
    f07c:	+--|-- bra.w f11c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f080:	|  \-> moveq #24,d0
    f082:	|      add.l 24(sp),d0
    f086:	|      move.l d0,-(sp)
    f088:	|      jsr 11334 <trimStack>
    f08e:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f090:	|      movea.l 24(sp),a0
    f094:	|      move.l 24(a0),d0
    f098:	|      move.l d0,-(sp)
    f09a:	|      pea 5 <_start+0x5>
    f09e:	|      lea 12(sp),a0
    f0a2:	|      move.l a0,-(sp)
    f0a4:	|      jsr 109b0 <getValueType>
    f0aa:	|      lea 12(sp),sp
    f0ae:	|      tst.w d0
    f0b0:	|  /-- bne.s f0b6 <builtIn_parallaxAdd+0x9c>
    f0b2:	|  |   moveq #1,d0
    f0b4:	+--|-- bra.s f11c <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    f0b6:	|  \-> moveq #24,d0
    f0b8:	|      add.l 24(sp),d0
    f0bc:	|      move.l d0,-(sp)
    f0be:	|      jsr 11334 <trimStack>
    f0c4:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
    f0c6:	|      move.l 8(sp),d0
    f0ca:	|      move.l d0,d0
    f0cc:	|      moveq #0,d2
    f0ce:	|      move.w d0,d2
    f0d0:	|      move.l 12(sp),d0
    f0d4:	|      move.l d0,d0
    f0d6:	|      moveq #0,d1
    f0d8:	|      move.w d0,d1
    f0da:	|      move.l 4(sp),d0
    f0de:	|      move.l d0,d0
    f0e0:	|      move.w d0,d0
    f0e2:	|      andi.l #65535,d0
    f0e8:	|      move.l d2,-(sp)
    f0ea:	|      move.l d1,-(sp)
    f0ec:	|      move.l d0,-(sp)
    f0ee:	|      jsr 9670 <loadParallax>
    f0f4:	|      lea 12(sp),sp
    f0f8:	|      tst.w d0
    f0fa:	|  /-- bne.s f100 <builtIn_parallaxAdd+0xe6>
    f0fc:	|  |   moveq #1,d0
    f0fe:	+--|-- bra.s f11c <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
    f100:	|  \-> moveq #28,d0
    f102:	|      add.l 24(sp),d0
    f106:	|      pea 1 <_start+0x1>
    f10a:	|      pea 1 <_start+0x1>
    f10e:	|      move.l d0,-(sp)
    f110:	|      jsr 112a2 <setVariable>
    f116:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
    f11a:	|      moveq #2,d0
}
    f11c:	\----> move.l (sp)+,d2
    f11e:	       lea 12(sp),sp
    f122:	       rts

0000f124 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
    f124:	jsr 95d8 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
    f12a:	moveq #28,d0
    f12c:	add.l 8(sp),d0
    f130:	pea 1 <_start+0x1>
    f134:	pea 1 <_start+0x1>
    f138:	move.l d0,-(sp)
    f13a:	jsr 112a2 <setVariable>
    f140:	lea 12(sp),sp
	return BR_CONTINUE;
    f144:	moveq #2,d0
}
    f146:	rts

0000f148 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
    f148:	pea 16556 <main_sludge.c.2f5c5368+0xa7c>
    f14e:	jsr 12a04 <KPrintF>
    f154:	addq.l #4,sp

	return BR_CONTINUE;
    f156:	moveq #2,d0
}
    f158:	rts

0000f15a <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
    f15a:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f15c:	             movea.l 16(sp),a0
    f160:	             movea.l 24(a0),a0
    f164:	             move.l (a0),d0
    f166:	             moveq #1,d1
    f168:	             cmp.l d0,d1
    f16a:	      /----- beq.s f1b2 <builtIn_makeFastArray+0x58>
    f16c:	      |      moveq #6,d1
    f16e:	      |      cmp.l d0,d1
    f170:	/-----|----- bne.s f1f0 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
    f172:	|     |      movea.l 16(sp),a0
    f176:	|     |      movea.l 24(a0),a0
    f17a:	|     |      move.l 4(a0),d1
    f17e:	|     |      moveq #28,d0
    f180:	|     |      add.l 16(sp),d0
    f184:	|     |      move.l d1,-(sp)
    f186:	|     |      move.l d0,-(sp)
    f188:	|     |      jsr 10a62 <makeFastArrayFromStack>
    f18e:	|     |      addq.l #8,sp
    f190:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
    f194:	|     |      moveq #24,d0
    f196:	|     |      add.l 16(sp),d0
    f19a:	|     |      move.l d0,-(sp)
    f19c:	|     |      jsr 11334 <trimStack>
    f1a2:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
    f1a4:	|     |      tst.w 6(sp)
    f1a8:	|     |  /-- beq.s f1ae <builtIn_makeFastArray+0x54>
    f1aa:	|     |  |   moveq #2,d0
    f1ac:	|  /--|--|-- bra.s f202 <builtIn_makeFastArray+0xa8>
    f1ae:	|  |  |  \-> moveq #1,d0
    f1b0:	|  +--|----- bra.s f202 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
    f1b2:	|  |  \----> movea.l 16(sp),a0
    f1b6:	|  |         movea.l 24(a0),a0
    f1ba:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
    f1c0:	|  |         moveq #24,d0
    f1c2:	|  |         add.l 16(sp),d0
    f1c6:	|  |         move.l d0,-(sp)
    f1c8:	|  |         jsr 11334 <trimStack>
    f1ce:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
    f1d0:	|  |         moveq #28,d0
    f1d2:	|  |         add.l 16(sp),d0
    f1d6:	|  |         move.l 2(sp),-(sp)
    f1da:	|  |         move.l d0,-(sp)
    f1dc:	|  |         jsr 10acc <makeFastArraySize>
    f1e2:	|  |         addq.l #8,sp
    f1e4:	|  |         tst.w d0
    f1e6:	|  |     /-- beq.s f1ec <builtIn_makeFastArray+0x92>
    f1e8:	|  |     |   moveq #2,d0
    f1ea:	|  +-----|-- bra.s f202 <builtIn_makeFastArray+0xa8>
    f1ec:	|  |     \-> moveq #1,d0
    f1ee:	|  +-------- bra.s f202 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
    f1f0:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
    f1f2:	   |         pea 1657f <main_sludge.c.2f5c5368+0xaa5>
    f1f8:	   |         jsr 12a04 <KPrintF>
    f1fe:	   |         addq.l #4,sp
	return BR_ERROR;
    f200:	   |         moveq #1,d0
}
    f202:	   \-------> addq.l #8,sp
    f204:	             rts

0000f206 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
    f206:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f208:	          movea.l 16(sp),a0
    f20c:	          move.l 24(a0),d0
    f210:	          move.l d0,-(sp)
    f212:	          pea 7 <_start+0x7>
    f216:	          move.l sp,d0
    f218:	          addq.l #8,d0
    f21a:	          move.l d0,-(sp)
    f21c:	          jsr 109b0 <getValueType>
    f222:	          lea 12(sp),sp
    f226:	          tst.w d0
    f228:	      /-- bne.s f22e <builtIn_getCharacterScale+0x28>
    f22a:	      |   moveq #1,d0
    f22c:	/-----|-- bra.s f2a8 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
    f22e:	|     \-> moveq #24,d0
    f230:	|         add.l 16(sp),d0
    f234:	|         move.l d0,-(sp)
    f236:	|         jsr 11334 <trimStack>
    f23c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    f23e:	|         move.l (sp),d0
    f240:	|         move.l d0,-(sp)
    f242:	|         jsr 6be4 <findPerson>
    f248:	|         addq.l #4,sp
    f24a:	|         move.l d0,4(sp)
	if (pers) {
    f24e:	|  /----- beq.s f28e <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
    f250:	|  |      movea.l 4(sp),a0
    f254:	|  |      move.l 20(a0),d0
    f258:	|  |      move.l #1120403456,-(sp)
    f25e:	|  |      move.l d0,-(sp)
    f260:	|  |      jsr 12f0e <__mulsf3>
    f266:	|  |      addq.l #8,sp
    f268:	|  |      move.l d0,-(sp)
    f26a:	|  |      jsr 12df4 <__fixsfsi>
    f270:	|  |      addq.l #4,sp
    f272:	|  |      move.l d0,d1
    f274:	|  |      moveq #28,d0
    f276:	|  |      add.l 16(sp),d0
    f27a:	|  |      move.l d1,-(sp)
    f27c:	|  |      pea 1 <_start+0x1>
    f280:	|  |      move.l d0,-(sp)
    f282:	|  |      jsr 112a2 <setVariable>
    f288:	|  |      lea 12(sp),sp
    f28c:	|  |  /-- bra.s f2a6 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f28e:	|  \--|-> moveq #28,d0
    f290:	|     |   add.l 16(sp),d0
    f294:	|     |   clr.l -(sp)
    f296:	|     |   pea 1 <_start+0x1>
    f29a:	|     |   move.l d0,-(sp)
    f29c:	|     |   jsr 112a2 <setVariable>
    f2a2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f2a6:	|     \-> moveq #2,d0
}
    f2a8:	\-------> addq.l #8,sp
    f2aa:	          rts

0000f2ac <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
    f2ac:	move.l 19d24 <gameSettings>,d0
    f2b2:	move.l d0,d1
    f2b4:	moveq #28,d0
    f2b6:	add.l 8(sp),d0
    f2ba:	move.l d1,-(sp)
    f2bc:	pea 1 <_start+0x1>
    f2c0:	move.l d0,-(sp)
    f2c2:	jsr 112a2 <setVariable>
    f2c8:	lea 12(sp),sp
	return BR_CONTINUE;
    f2cc:	moveq #2,d0
}
    f2ce:	rts

0000f2d0 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    f2d0:	moveq #24,d0
    f2d2:	add.l 8(sp),d0
    f2d6:	move.l d0,-(sp)
    f2d8:	jsr 11334 <trimStack>
    f2de:	addq.l #4,sp
	trimStack (&fun -> stack);
    f2e0:	moveq #24,d0
    f2e2:	add.l 8(sp),d0
    f2e6:	move.l d0,-(sp)
    f2e8:	jsr 11334 <trimStack>
    f2ee:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
    f2f0:	moveq #28,d0
    f2f2:	add.l 8(sp),d0
    f2f6:	clr.l -(sp)
    f2f8:	pea 1 <_start+0x1>
    f2fc:	move.l d0,-(sp)
    f2fe:	jsr 112a2 <setVariable>
    f304:	lea 12(sp),sp

	return BR_CONTINUE;
    f308:	moveq #2,d0

}
    f30a:	rts

0000f30c <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
    f30c:	move.l 18124 <lastFramesPerSecond>,d1
    f312:	moveq #28,d0
    f314:	add.l 8(sp),d0
    f318:	move.l d1,-(sp)
    f31a:	pea 1 <_start+0x1>
    f31e:	move.l d0,-(sp)
    f320:	jsr 112a2 <setVariable>
    f326:	lea 12(sp),sp
	return BR_CONTINUE;
    f32a:	moveq #2,d0
}
    f32c:	rts

0000f32e <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
    f32e:	moveq #2,d0
}
    f330:	rts

0000f332 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
    f332:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f336:	          movea.l 60(sp),a0
    f33a:	          move.l 24(a0),d0
    f33e:	          move.l d0,-(sp)
    f340:	          pea 1 <_start+0x1>
    f344:	          pea 19b3c <thumbHeight>
    f34a:	          jsr 109b0 <getValueType>
    f350:	          lea 12(sp),sp
    f354:	          tst.w d0
    f356:	      /-- bne.s f35e <builtIn_setThumbnailSize+0x2c>
    f358:	      |   moveq #1,d0
    f35a:	/-----|-- bra.w f41a <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f35e:	|     \-> moveq #24,d0
    f360:	|         add.l 60(sp),d0
    f364:	|         move.l d0,-(sp)
    f366:	|         jsr 11334 <trimStack>
    f36c:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f36e:	|         movea.l 60(sp),a0
    f372:	|         move.l 24(a0),d0
    f376:	|         move.l d0,-(sp)
    f378:	|         pea 1 <_start+0x1>
    f37c:	|         pea 19b38 <thumbWidth>
    f382:	|         jsr 109b0 <getValueType>
    f388:	|         lea 12(sp),sp
    f38c:	|         tst.w d0
    f38e:	|     /-- bne.s f396 <builtIn_setThumbnailSize+0x64>
    f390:	|     |   moveq #1,d0
    f392:	+-----|-- bra.w f41a <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f396:	|     \-> moveq #24,d0
    f398:	|         add.l 60(sp),d0
    f39c:	|         move.l d0,-(sp)
    f39e:	|         jsr 11334 <trimStack>
    f3a4:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
    f3a6:	|         move.l 19b38 <thumbWidth>,d0
    f3ac:	|     /-- bmi.s f3da <builtIn_setThumbnailSize+0xa8>
    f3ae:	|     |   move.l 19b3c <thumbHeight>,d0
    f3b4:	|     +-- bmi.s f3da <builtIn_setThumbnailSize+0xa8>
    f3b6:	|     |   move.l 19b38 <thumbWidth>,d0
    f3bc:	|     |   move.l d0,d1
    f3be:	|     |   move.l 19b4c <winWidth>,d0
    f3c4:	|     |   cmp.l d1,d0
    f3c6:	|     +-- bcs.s f3da <builtIn_setThumbnailSize+0xa8>
    f3c8:	|     |   move.l 19b3c <thumbHeight>,d0
    f3ce:	|     |   move.l d0,d1
    f3d0:	|     |   move.l 19b50 <winHeight>,d0
    f3d6:	|     |   cmp.l d1,d0
    f3d8:	|  /--|-- bcc.s f418 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
    f3da:	|  |  \-> move.l 19b3c <thumbHeight>,d1
    f3e0:	|  |      move.l 19b38 <thumbWidth>,d0
    f3e6:	|  |      move.l d1,-(sp)
    f3e8:	|  |      move.l d0,-(sp)
    f3ea:	|  |      pea 165a6 <main_sludge.c.2f5c5368+0xacc>
    f3f0:	|  |      lea 14(sp),a0
    f3f4:	|  |      move.l a0,-(sp)
    f3f6:	|  |      jsr 101ba <sprintf>
    f3fc:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
    f400:	|  |      lea 2(sp),a0
    f404:	|  |      move.l a0,-(sp)
    f406:	|  |      pea 165ae <main_sludge.c.2f5c5368+0xad4>
    f40c:	|  |      jsr 12a04 <KPrintF>
    f412:	|  |      addq.l #8,sp
		return BR_ERROR;
    f414:	|  |      moveq #1,d0
    f416:	+--|----- bra.s f41a <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
    f418:	|  \----> moveq #2,d0
}
    f41a:	\-------> lea 52(sp),sp
    f41e:	          rts

0000f420 <builtIn_hasFlag>:

builtIn(hasFlag)
{
    f420:	       lea -12(sp),sp
    f424:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f426:	       movea.l 24(sp),a0
    f42a:	       move.l 24(a0),d0
    f42e:	       move.l d0,-(sp)
    f430:	       pea 1 <_start+0x1>
    f434:	       lea 12(sp),a0
    f438:	       move.l a0,-(sp)
    f43a:	       jsr 109b0 <getValueType>
    f440:	       lea 12(sp),sp
    f444:	       tst.w d0
    f446:	   /-- bne.s f44e <builtIn_hasFlag+0x2e>
    f448:	   |   moveq #1,d0
    f44a:	/--|-- bra.w f4de <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    f44e:	|  \-> moveq #24,d0
    f450:	|      add.l 24(sp),d0
    f454:	|      move.l d0,-(sp)
    f456:	|      jsr 11334 <trimStack>
    f45c:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f45e:	|      movea.l 24(sp),a0
    f462:	|      move.l 24(a0),d0
    f466:	|      move.l d0,-(sp)
    f468:	|      pea 7 <_start+0x7>
    f46c:	|      moveq #16,d0
    f46e:	|      add.l sp,d0
    f470:	|      move.l d0,-(sp)
    f472:	|      jsr 109b0 <getValueType>
    f478:	|      lea 12(sp),sp
    f47c:	|      tst.w d0
    f47e:	|  /-- bne.s f484 <builtIn_hasFlag+0x64>
    f480:	|  |   moveq #1,d0
    f482:	+--|-- bra.s f4de <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    f484:	|  \-> moveq #24,d0
    f486:	|      add.l 24(sp),d0
    f48a:	|      move.l d0,-(sp)
    f48c:	|      jsr 11334 <trimStack>
    f492:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
    f494:	|      move.l 8(sp),d0
    f498:	|      move.l d0,-(sp)
    f49a:	|      jsr 9802 <findObjectType>
    f4a0:	|      addq.l #4,sp
    f4a2:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
    f4a6:	|  /-- bne.s f4ac <builtIn_hasFlag+0x8c>
    f4a8:	|  |   moveq #1,d0
    f4aa:	+--|-- bra.s f4de <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
    f4ac:	|  \-> movea.l 12(sp),a0
    f4b0:	|      move.w 36(a0),d0
    f4b4:	|      moveq #0,d2
    f4b6:	|      move.w d0,d2
    f4b8:	|      move.l 4(sp),d1
    f4bc:	|      moveq #1,d0
    f4be:	|      lsl.l d1,d0
    f4c0:	|      move.l d2,d1
    f4c2:	|      and.l d0,d1
    f4c4:	|      moveq #28,d0
    f4c6:	|      add.l 24(sp),d0
    f4ca:	|      move.l d1,-(sp)
    f4cc:	|      pea 1 <_start+0x1>
    f4d0:	|      move.l d0,-(sp)
    f4d2:	|      jsr 112a2 <setVariable>
    f4d8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f4dc:	|      moveq #2,d0
}
    f4de:	\----> move.l (sp)+,d2
    f4e0:	       lea 12(sp),sp
    f4e4:	       rts

0000f4e6 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
    f4e6:	       jsr 97f0 <snapshot>
    f4ec:	       tst.w d0
    f4ee:	/----- beq.s f4f4 <builtIn_snapshotGrab+0xe>
    f4f0:	|      moveq #2,d0
    f4f2:	|  /-- bra.s f4f6 <builtIn_snapshotGrab+0x10>
    f4f4:	\--|-> moveq #1,d0
}
    f4f6:	   \-> rts

0000f4f8 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
    f4f8:	jsr 96b6 <nosnapshot>
	return BR_CONTINUE;
    f4fe:	moveq #2,d0
}
    f500:	rts

0000f502 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
    f502:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
    f504:	move.w 18000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
    f50c:	movea.l 12(sp),a0
    f510:	move.l 24(a0),d0
    f514:	move.l d0,-(sp)
    f516:	jsr 10ef0 <getBoolean>
    f51c:	addq.l #4,sp
    f51e:	move.w d0,18000 <allowAnyFilename>
	trimStack (&fun -> stack);
    f524:	moveq #24,d0
    f526:	add.l 12(sp),d0
    f52a:	move.l d0,-(sp)
    f52c:	jsr 11334 <trimStack>
    f532:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
    f534:	movea.w 2(sp),a0
    f538:	moveq #28,d0
    f53a:	add.l 12(sp),d0
    f53e:	move.l a0,-(sp)
    f540:	pea 1 <_start+0x1>
    f544:	move.l d0,-(sp)
    f546:	jsr 112a2 <setVariable>
    f54c:	lea 12(sp),sp
	return BR_CONTINUE;
    f550:	moveq #2,d0
}
    f552:	addq.l #4,sp
    f554:	rts

0000f556 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f556:	moveq #24,d0
    f558:	add.l 8(sp),d0
    f55c:	move.l d0,-(sp)
    f55e:	jsr 11334 <trimStack>
    f564:	addq.l #4,sp
	trimStack (&fun -> stack);
    f566:	moveq #24,d0
    f568:	add.l 8(sp),d0
    f56c:	move.l d0,-(sp)
    f56e:	jsr 11334 <trimStack>
    f574:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
    f576:	moveq #28,d0
    f578:	add.l 8(sp),d0
    f57c:	clr.l -(sp)
    f57e:	pea 1 <_start+0x1>
    f582:	move.l d0,-(sp)
    f584:	jsr 112a2 <setVariable>
    f58a:	lea 12(sp),sp

	return BR_CONTINUE;
    f58e:	moveq #2,d0
}
    f590:	rts

0000f592 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
    f592:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
    f594:	movea.l 12(sp),a0
    f598:	move.l 24(a0),d0
    f59c:	move.l d0,-(sp)
    f59e:	jsr 10f86 <getTextFromAnyVar>
    f5a4:	addq.l #4,sp
    f5a6:	move.l d0,(sp)
	trimStack (&fun -> stack);
    f5a8:	moveq #24,d0
    f5aa:	add.l 12(sp),d0
    f5ae:	move.l d0,-(sp)
    f5b0:	jsr 11334 <trimStack>
    f5b6:	addq.l #4,sp
	KPrintF (mess);
    f5b8:	move.l (sp),-(sp)
    f5ba:	jsr 12a04 <KPrintF>
    f5c0:	addq.l #4,sp
	return BR_ERROR;
    f5c2:	moveq #1,d0
}
    f5c4:	addq.l #4,sp
    f5c6:	rts

0000f5c8 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    f5c8:	moveq #24,d0
    f5ca:	add.l 8(sp),d0
    f5ce:	move.l d0,-(sp)
    f5d0:	jsr 11334 <trimStack>
    f5d6:	addq.l #4,sp
	trimStack (&fun -> stack);
    f5d8:	moveq #24,d0
    f5da:	add.l 8(sp),d0
    f5de:	move.l d0,-(sp)
    f5e0:	jsr 11334 <trimStack>
    f5e6:	addq.l #4,sp
	trimStack (&fun -> stack);
    f5e8:	moveq #24,d0
    f5ea:	add.l 8(sp),d0
    f5ee:	move.l d0,-(sp)
    f5f0:	jsr 11334 <trimStack>
    f5f6:	addq.l #4,sp
	trimStack (&fun -> stack);
    f5f8:	moveq #24,d0
    f5fa:	add.l 8(sp),d0
    f5fe:	move.l d0,-(sp)
    f600:	jsr 11334 <trimStack>
    f606:	addq.l #4,sp

	return BR_CONTINUE;
    f608:	moveq #2,d0
}
    f60a:	rts

0000f60c <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    f60c:	moveq #24,d0
    f60e:	add.l 8(sp),d0
    f612:	move.l d0,-(sp)
    f614:	jsr 11334 <trimStack>
    f61a:	addq.l #4,sp
	trimStack (&fun -> stack);
    f61c:	moveq #24,d0
    f61e:	add.l 8(sp),d0
    f622:	move.l d0,-(sp)
    f624:	jsr 11334 <trimStack>
    f62a:	addq.l #4,sp
	trimStack (&fun -> stack);
    f62c:	moveq #24,d0
    f62e:	add.l 8(sp),d0
    f632:	move.l d0,-(sp)
    f634:	jsr 11334 <trimStack>
    f63a:	addq.l #4,sp

	return BR_CONTINUE;
    f63c:	moveq #2,d0

}
    f63e:	rts

0000f640 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
    f640:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
    f642:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    f648:	sne d0
    f64a:	neg.b d0
    f64c:	moveq #0,d1
    f64e:	move.b d0,d1
    f650:	moveq #28,d0
    f652:	add.l 12(sp),d0
    f656:	move.l d1,-(sp)
    f658:	pea 1 <_start+0x1>
    f65c:	move.l d0,-(sp)
    f65e:	jsr 112a2 <setVariable>
    f664:	lea 12(sp),sp
	return BR_CONTINUE;
    f668:	moveq #2,d0
}
    f66a:	addq.l #4,sp
    f66c:	rts

0000f66e <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
    f66e:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
    f670:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
    f676:	pea 165c5 <main_sludge.c.2f5c5368+0xaeb>
    f67c:	jsr 12a04 <KPrintF>
    f682:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    f684:	tst.w 2(sp)
    f688:	sne d0
    f68a:	neg.b d0
    f68c:	moveq #0,d1
    f68e:	move.b d0,d1
    f690:	moveq #28,d0
    f692:	add.l 12(sp),d0
    f696:	move.l d1,-(sp)
    f698:	pea 1 <_start+0x1>
    f69c:	move.l d0,-(sp)
    f69e:	jsr 112a2 <setVariable>
    f6a4:	lea 12(sp),sp
	return BR_CONTINUE;
    f6a8:	moveq #2,d0
}
    f6aa:	addq.l #4,sp
    f6ac:	rts

0000f6ae <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
    f6ae:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
    f6b2:	             move.l 104(sp),d0
    f6b6:	             cmpi.l #166,d0
    f6bc:	/----------- bhi.w f79e <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
    f6c0:	|            move.l 104(sp),d0
    f6c4:	|            add.l d0,d0
    f6c6:	|            movea.l d0,a1
    f6c8:	|            adda.l d0,a1
    f6ca:	|            lea 1814e <paramNum>,a0
    f6d0:	|            move.l (0,a1,a0.l),d0
    f6d4:	|            moveq #-1,d1
    f6d6:	|            cmp.l d0,d1
    f6d8:	|  /-------- beq.w f766 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
    f6dc:	|  |         move.l 104(sp),d0
    f6e0:	|  |         add.l d0,d0
    f6e2:	|  |         movea.l d0,a1
    f6e4:	|  |         adda.l d0,a1
    f6e6:	|  |         lea 1814e <paramNum>,a0
    f6ec:	|  |         move.l (0,a1,a0.l),d0
    f6f0:	|  |         cmp.l 108(sp),d0
    f6f4:	|  +-------- beq.s f766 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
    f6f6:	|  |         move.l 104(sp),d0
    f6fa:	|  |         add.l d0,d0
    f6fc:	|  |         movea.l d0,a1
    f6fe:	|  |         adda.l d0,a1
    f700:	|  |         lea 1814e <paramNum>,a0
    f706:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
    f70a:	|  |         moveq #1,d1
    f70c:	|  |         cmp.l d0,d1
    f70e:	|  |  /----- bne.s f718 <callBuiltIn+0x6a>
    f710:	|  |  |      move.l #80892,d0
    f716:	|  |  |  /-- bra.s f71e <callBuiltIn+0x70>
    f718:	|  |  \--|-> move.l #91643,d0
    f71e:	|  |     \-> move.l 104(sp),d1
    f722:	|  |         add.l d1,d1
    f724:	|  |         movea.l d1,a1
    f726:	|  |         adda.l d1,a1
    f728:	|  |         lea 1814e <paramNum>,a0
    f72e:	|  |         move.l (0,a1,a0.l),d1
    f732:	|  |         move.l d0,-(sp)
    f734:	|  |         move.l d1,-(sp)
    f736:	|  |         pea 165fd <main_sludge.c.2f5c5368+0xb23>
    f73c:	|  |         lea 12(sp),a0
    f740:	|  |         move.l a0,-(sp)
    f742:	|  |         jsr 101ba <sprintf>
    f748:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
    f74c:	|  |         movea.l sp,a0
    f74e:	|  |         move.l a0,-(sp)
    f750:	|  |         jsr b8 <copyString>
    f756:	|  |         addq.l #4,sp
    f758:	|  |         move.l d0,-(sp)
    f75a:	|  |         jsr 12a04 <KPrintF>
    f760:	|  |         addq.l #4,sp
				return BR_ERROR;
    f762:	|  |         moveq #1,d0
    f764:	|  |     /-- bra.s f7ae <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
    f766:	|  \-----|-> move.l 104(sp),d0
    f76a:	|        |   add.l d0,d0
    f76c:	|        |   movea.l d0,a1
    f76e:	|        |   adda.l d0,a1
    f770:	|        |   lea 183ea <builtInFunctionArray>,a0
    f776:	|        |   move.l (0,a1,a0.l),d0
    f77a:	+--------|-- beq.s f79e <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
    f77c:	|        |   move.l 104(sp),d0
    f780:	|        |   add.l d0,d0
    f782:	|        |   movea.l d0,a1
    f784:	|        |   adda.l d0,a1
    f786:	|        |   lea 183ea <builtInFunctionArray>,a0
    f78c:	|        |   movea.l (0,a1,a0.l),a0
    f790:	|        |   move.l 112(sp),-(sp)
    f794:	|        |   move.l 112(sp),-(sp)
    f798:	|        |   jsr (a0)
    f79a:	|        |   addq.l #8,sp
    f79c:	|        +-- bra.s f7ae <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
    f79e:	\--------|-> pea 16628 <main_sludge.c.2f5c5368+0xb4e>
    f7a4:	         |   jsr 12a04 <KPrintF>
    f7aa:	         |   addq.l #4,sp
	return BR_ERROR;
    f7ac:	         |   moveq #1,d0
}
    f7ae:	         \-> lea 100(sp),sp
    f7b2:	             rts

0000f7b4 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
    f7b4:	          subq.l #8,sp
	int indexNum = -1;
    f7b6:	          moveq #-1,d0
    f7b8:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f7bc:	          clr.l (sp)
    f7be:	   /----- bra.s f7e4 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
    f7c0:	/--|----> move.l 19d1c <languageTable>,d1
    f7c6:	|  |      move.l (sp),d0
    f7c8:	|  |      add.l d0,d0
    f7ca:	|  |      add.l d0,d0
    f7cc:	|  |      movea.l d1,a0
    f7ce:	|  |      adda.l d0,a0
    f7d0:	|  |      move.l (a0),d0
    f7d2:	|  |      move.l d0,d1
    f7d4:	|  |      move.l 19d24 <gameSettings>,d0
    f7da:	|  |      cmp.l d1,d0
    f7dc:	|  |  /-- bne.s f7e2 <getLanguageForFileB+0x2e>
    f7de:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f7e2:	|  |  \-> addq.l #1,(sp)
    f7e4:	|  \----> move.l 19d28 <gameSettings+0x4>,d0
    f7ea:	|         cmp.l (sp),d0
    f7ec:	\-------- bcc.s f7c0 <getLanguageForFileB+0xc>
	}

	return indexNum;
    f7ee:	          move.l 4(sp),d0
}
    f7f2:	          addq.l #8,sp
    f7f4:	          rts

0000f7f6 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
    f7f6:	          lea -20(sp),sp
    f7fa:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
    f7fc:	          move.l 28(sp),-(sp)
    f800:	          jsr fe9c <strlen>
    f806:	          addq.l #4,sp
    f808:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
    f80c:	          moveq #4,d0
    f80e:	          cmp.l 12(sp),d0
    f812:	      /-- bge.s f836 <getPrefsFilename+0x40>
    f814:	      |   move.l 12(sp),d0
    f818:	      |   subq.l #4,d0
    f81a:	      |   movea.l 28(sp),a0
    f81e:	      |   adda.l d0,a0
    f820:	      |   move.b (a0),d0
    f822:	      |   cmpi.b #46,d0
    f826:	      +-- bne.s f836 <getPrefsFilename+0x40>
		filename[n-4] = 0;
    f828:	      |   move.l 12(sp),d0
    f82c:	      |   subq.l #4,d0
    f82e:	      |   movea.l 28(sp),a0
    f832:	      |   adda.l d0,a0
    f834:	      |   clr.b (a0)
	}

	char * f = filename;
    f836:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
    f83c:	          clr.l 20(sp)
    f840:	   /----- bra.s f868 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
    f842:	/--|----> move.l 20(sp),d0
    f846:	|  |      movea.l 28(sp),a0
    f84a:	|  |      adda.l d0,a0
    f84c:	|  |      move.b (a0),d0
    f84e:	|  |      cmpi.b #47,d0
    f852:	|  |  /-- bne.s f864 <getPrefsFilename+0x6e>
    f854:	|  |  |   move.l 20(sp),d0
    f858:	|  |  |   addq.l #1,d0
    f85a:	|  |  |   move.l 28(sp),d1
    f85e:	|  |  |   add.l d0,d1
    f860:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
    f864:	|  |  \-> addq.l #1,20(sp)
    f868:	|  \----> move.l 20(sp),d0
    f86c:	|         cmp.l 12(sp),d0
    f870:	\-------- blt.s f842 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
    f872:	          pea 16653 <main_sludge.c.2f5c5368+0xb79>
    f878:	          move.l 20(sp),-(sp)
    f87c:	          jsr fedc <joinStrings>
    f882:	          addq.l #8,sp
    f884:	          move.l d0,8(sp)

	FreeVec(filename);
    f888:	          move.l 28(sp),4(sp)
    f88e:	          move.l 19c4c <SysBase>,d0
    f894:	          movea.l d0,a6
    f896:	          movea.l 4(sp),a1
    f89a:	          jsr -690(a6)
	filename = NULL;
    f89e:	          clr.l 28(sp)
	return joined;
    f8a2:	          move.l 8(sp),d0
}
    f8a6:	          movea.l (sp)+,a6
    f8a8:	          lea 20(sp),sp
    f8ac:	          rts

0000f8ae <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
    f8ae:	             lea -28(sp),sp
    f8b2:	             move.l a6,-(sp)
    f8b4:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    f8b6:	             move.l 19d28 <gameSettings+0x4>,d0
    f8bc:	             move.l d0,d1
    f8be:	             addq.l #1,d1
    f8c0:	             move.l d1,28(sp)
    f8c4:	             clr.l 24(sp)
    f8c8:	             move.l 19c4c <SysBase>,d0
    f8ce:	             movea.l d0,a6
    f8d0:	             move.l 28(sp),d0
    f8d4:	             move.l 24(sp),d1
    f8d8:	             jsr -684(a6)
    f8dc:	             move.l d0,20(sp)
    f8e0:	             move.l 20(sp),d0
    f8e4:	             move.l d0,19d1c <languageTable>
    if( languageTable == 0) {
    f8ea:	             move.l 19d1c <languageTable>,d0
    f8f0:	         /-- bne.s f900 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
    f8f2:	         |   pea 16658 <main_sludge.c.2f5c5368+0xb7e>
    f8f8:	         |   jsr 12a04 <KPrintF>
    f8fe:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    f900:	         \-> move.l 19d28 <gameSettings+0x4>,d0
    f906:	             move.l d0,d1
    f908:	             addq.l #1,d1
    f90a:	             move.l d1,16(sp)
    f90e:	             clr.l 12(sp)
    f912:	             move.l 19c4c <SysBase>,d0
    f918:	             movea.l d0,a6
    f91a:	             move.l 16(sp),d0
    f91e:	             move.l 12(sp),d1
    f922:	             jsr -684(a6)
    f926:	             move.l d0,8(sp)
    f92a:	             move.l 8(sp),d0
    f92e:	             move.l d0,19d20 <languageName>
	if( languageName == 0) {
    f934:	             move.l 19d20 <languageName>,d0
    f93a:	         /-- bne.s f94a <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
    f93c:	         |   pea 1668e <main_sludge.c.2f5c5368+0xbb4>
    f942:	         |   jsr 12a04 <KPrintF>
    f948:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f94a:	         \-> clr.l 32(sp)
    f94e:	   /-------- bra.s f9c6 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
    f950:	/--|-------> tst.l 32(sp)
    f954:	|  |  /----- beq.s f964 <makeLanguageTable+0xb6>
    f956:	|  |  |      move.l 40(sp),-(sp)
    f95a:	|  |  |      jsr 6bc <get2bytes>
    f960:	|  |  |      addq.l #4,sp
    f962:	|  |  |  /-- bra.s f966 <makeLanguageTable+0xb8>
    f964:	|  |  \--|-> moveq #0,d0
    f966:	|  |     \-> movea.l 19d1c <languageTable>,a0
    f96c:	|  |         move.l 32(sp),d1
    f970:	|  |         add.l d1,d1
    f972:	|  |         add.l d1,d1
    f974:	|  |         adda.l d1,a0
    f976:	|  |         move.l d0,(a0)
		languageName[i] = 0;
    f978:	|  |         move.l 19d20 <languageName>,d1
    f97e:	|  |         move.l 32(sp),d0
    f982:	|  |         add.l d0,d0
    f984:	|  |         add.l d0,d0
    f986:	|  |         movea.l d1,a0
    f988:	|  |         adda.l d0,a0
    f98a:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
    f98c:	|  |         move.l 19bfa <gameVersion>,d0
    f992:	|  |         cmpi.l #511,d0
    f998:	|  |     /-- ble.s f9c2 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
    f99a:	|  |     |   move.l 19d28 <gameSettings+0x4>,d0
    f9a0:	|  |     +-- beq.s f9c2 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
    f9a2:	|  |     |   move.l 19d20 <languageName>,d1
    f9a8:	|  |     |   move.l 32(sp),d0
    f9ac:	|  |     |   add.l d0,d0
    f9ae:	|  |     |   add.l d0,d0
    f9b0:	|  |     |   movea.l d1,a2
    f9b2:	|  |     |   adda.l d0,a2
    f9b4:	|  |     |   move.l 40(sp),-(sp)
    f9b8:	|  |     |   jsr b02 <readString>
    f9be:	|  |     |   addq.l #4,sp
    f9c0:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f9c2:	|  |     \-> addq.l #1,32(sp)
    f9c6:	|  \-------> move.l 19d28 <gameSettings+0x4>,d0
    f9cc:	|            cmp.l 32(sp),d0
    f9d0:	\----------- bcc.w f950 <makeLanguageTable+0xa2>
		}
	}
}
    f9d4:	             nop
    f9d6:	             nop
    f9d8:	             movea.l (sp)+,a2
    f9da:	             movea.l (sp)+,a6
    f9dc:	             lea 28(sp),sp
    f9e0:	             rts

0000f9e2 <readIniFile>:

void readIniFile (char * filename) {
    f9e2:	                      lea -564(sp),sp
    f9e6:	                      move.l a6,-(sp)
    f9e8:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
    f9ea:	                      move.l 576(sp),-(sp)
    f9ee:	                      jsr b8 <copyString>
    f9f4:	                      addq.l #4,sp
    f9f6:	                      move.l d0,-(sp)
    f9f8:	                      jsr f7f6 <getPrefsFilename>
    f9fe:	                      addq.l #4,sp
    fa00:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
    fa04:	                      move.l 562(sp),558(sp)
    fa0a:	                      move.l #1005,554(sp)
    fa12:	                      move.l 19c54 <DOSBase>,d0
    fa18:	                      movea.l d0,a6
    fa1a:	                      move.l 558(sp),d1
    fa1e:	                      move.l 554(sp),d2
    fa22:	                      jsr -30(a6)
    fa26:	                      move.l d0,550(sp)
    fa2a:	                      move.l 550(sp),d0
    fa2e:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
    fa32:	                      clr.l 19d24 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
    fa38:	                      move.w #1,19d2c <gameSettings+0x8>
	gameSettings.refreshRate = 0;
    fa40:	                      clr.l 19d2e <gameSettings+0xa>
	gameSettings.antiAlias = 1;
    fa46:	                      moveq #1,d0
    fa48:	                      move.l d0,19d32 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
    fa4e:	                      clr.w 19d36 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
    fa54:	                      clr.w 19d38 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
    fa5a:	                      clr.w 19d3a <gameSettings+0x16>

	FreeVec(langName);
    fa60:	                      move.l 562(sp),542(sp)
    fa66:	                      move.l 19c4c <SysBase>,d0
    fa6c:	                      movea.l d0,a6
    fa6e:	                      movea.l 542(sp),a1
    fa72:	                      jsr -690(a6)
	langName = NULL;
    fa76:	                      clr.l 562(sp)

	if (fp) {
    fa7a:	                      tst.l 546(sp)
    fa7e:	/-------------------- beq.w fd5c <readIniFile+0x37a>
		char lineSoFar[257] = "";
    fa82:	|                     move.l sp,d0
    fa84:	|                     addi.l #265,d0
    fa8a:	|                     move.l #257,d1
    fa90:	|                     move.l d1,-(sp)
    fa92:	|                     clr.l -(sp)
    fa94:	|                     move.l d0,-(sp)
    fa96:	|                     jsr 12988 <memset>
    fa9c:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
    faa0:	|                     move.l sp,d0
    faa2:	|                     addq.l #8,d0
    faa4:	|                     move.l #257,d1
    faaa:	|                     move.l d1,-(sp)
    faac:	|                     clr.l -(sp)
    faae:	|                     move.l d0,-(sp)
    fab0:	|                     jsr 12988 <memset>
    fab6:	|                     lea 12(sp),sp
		unsigned char here = 0;
    faba:	|                     clr.b 571(sp)
		char readChar = ' ';
    fabe:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
    fac4:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
    faca:	|                     clr.w 566(sp)
		LONG tmp = 0;
    face:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
    fad2:	|  /----------------> move.l 546(sp),534(sp)
    fad8:	|  |                  move.l 19c54 <DOSBase>,d0
    fade:	|  |                  movea.l d0,a6
    fae0:	|  |                  move.l 534(sp),d1
    fae4:	|  |                  jsr -306(a6)
    fae8:	|  |                  move.l d0,530(sp)
    faec:	|  |                  move.l 530(sp),d0
    faf0:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
    faf4:	|  |                  moveq #-1,d1
    faf6:	|  |                  cmp.l 538(sp),d1
    fafa:	|  |           /----- bne.s fb08 <readIniFile+0x126>
				readChar = '\n';
    fafc:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
    fb02:	|  |           |      clr.w 568(sp)
    fb06:	|  |           |  /-- bra.s fb0e <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
    fb08:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
    fb0e:	|  |              \-> move.b 570(sp),d0
    fb12:	|  |                  ext.w d0
    fb14:	|  |                  movea.w d0,a0
    fb16:	|  |                  moveq #61,d0
    fb18:	|  |                  cmp.l a0,d0
    fb1a:	|  |     /----------- beq.w fcc4 <readIniFile+0x2e2>
    fb1e:	|  |     |            moveq #61,d1
    fb20:	|  |     |            cmp.l a0,d1
    fb22:	|  |  /--|----------- blt.w fcd0 <readIniFile+0x2ee>
    fb26:	|  |  |  |            moveq #10,d0
    fb28:	|  |  |  |            cmp.l a0,d0
    fb2a:	|  |  |  |        /-- beq.s fb34 <readIniFile+0x152>
    fb2c:	|  |  |  |        |   moveq #13,d1
    fb2e:	|  |  |  |        |   cmp.l a0,d1
    fb30:	|  |  +--|--------|-- bne.w fcd0 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
    fb34:	|  |  |  |        \-> tst.w 566(sp)
    fb38:	|  |  |  |     /----- beq.w fcb2 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
    fb3c:	|  |  |  |     |      pea 166c2 <main_sludge.c.2f5c5368+0xbe8>
    fb42:	|  |  |  |     |      move.l sp,d0
    fb44:	|  |  |  |     |      addi.l #269,d0
    fb4a:	|  |  |  |     |      move.l d0,-(sp)
    fb4c:	|  |  |  |     |      jsr fe5c <strcmp>
    fb52:	|  |  |  |     |      addq.l #8,sp
    fb54:	|  |  |  |     |      tst.l d0
    fb56:	|  |  |  |     |  /-- bne.s fb70 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
    fb58:	|  |  |  |     |  |   move.l sp,d0
    fb5a:	|  |  |  |     |  |   addq.l #8,d0
    fb5c:	|  |  |  |     |  |   move.l d0,-(sp)
    fb5e:	|  |  |  |     |  |   jsr fd68 <stringToInt>
    fb64:	|  |  |  |     |  |   addq.l #4,sp
    fb66:	|  |  |  |     |  |   move.l d0,19d24 <gameSettings>
    fb6c:	|  |  |  |     +--|-- bra.w fcb2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
    fb70:	|  |  |  |     |  \-> pea 166cb <main_sludge.c.2f5c5368+0xbf1>
    fb76:	|  |  |  |     |      move.l sp,d0
    fb78:	|  |  |  |     |      addi.l #269,d0
    fb7e:	|  |  |  |     |      move.l d0,-(sp)
    fb80:	|  |  |  |     |      jsr fe5c <strcmp>
    fb86:	|  |  |  |     |      addq.l #8,sp
    fb88:	|  |  |  |     |      tst.l d0
    fb8a:	|  |  |  |     |  /-- bne.s fbb0 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
    fb8c:	|  |  |  |     |  |   move.l sp,d0
    fb8e:	|  |  |  |     |  |   addq.l #8,d0
    fb90:	|  |  |  |     |  |   move.l d0,-(sp)
    fb92:	|  |  |  |     |  |   jsr fd68 <stringToInt>
    fb98:	|  |  |  |     |  |   addq.l #4,sp
    fb9a:	|  |  |  |     |  |   tst.l d0
    fb9c:	|  |  |  |     |  |   seq d0
    fb9e:	|  |  |  |     |  |   neg.b d0
    fba0:	|  |  |  |     |  |   move.b d0,d0
    fba2:	|  |  |  |     |  |   andi.w #255,d0
    fba6:	|  |  |  |     |  |   move.w d0,19d2c <gameSettings+0x8>
    fbac:	|  |  |  |     +--|-- bra.w fcb2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
    fbb0:	|  |  |  |     |  \-> pea 166d2 <main_sludge.c.2f5c5368+0xbf8>
    fbb6:	|  |  |  |     |      move.l sp,d0
    fbb8:	|  |  |  |     |      addi.l #269,d0
    fbbe:	|  |  |  |     |      move.l d0,-(sp)
    fbc0:	|  |  |  |     |      jsr fe5c <strcmp>
    fbc6:	|  |  |  |     |      addq.l #8,sp
    fbc8:	|  |  |  |     |      tst.l d0
    fbca:	|  |  |  |     |  /-- bne.s fbe4 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
    fbcc:	|  |  |  |     |  |   move.l sp,d0
    fbce:	|  |  |  |     |  |   addq.l #8,d0
    fbd0:	|  |  |  |     |  |   move.l d0,-(sp)
    fbd2:	|  |  |  |     |  |   jsr fd68 <stringToInt>
    fbd8:	|  |  |  |     |  |   addq.l #4,sp
    fbda:	|  |  |  |     |  |   move.l d0,19d2e <gameSettings+0xa>
    fbe0:	|  |  |  |     +--|-- bra.w fcb2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
    fbe4:	|  |  |  |     |  \-> pea 166da <main_sludge.c.2f5c5368+0xc00>
    fbea:	|  |  |  |     |      move.l sp,d0
    fbec:	|  |  |  |     |      addi.l #269,d0
    fbf2:	|  |  |  |     |      move.l d0,-(sp)
    fbf4:	|  |  |  |     |      jsr fe5c <strcmp>
    fbfa:	|  |  |  |     |      addq.l #8,sp
    fbfc:	|  |  |  |     |      tst.l d0
    fbfe:	|  |  |  |     |  /-- bne.s fc18 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
    fc00:	|  |  |  |     |  |   move.l sp,d0
    fc02:	|  |  |  |     |  |   addq.l #8,d0
    fc04:	|  |  |  |     |  |   move.l d0,-(sp)
    fc06:	|  |  |  |     |  |   jsr fd68 <stringToInt>
    fc0c:	|  |  |  |     |  |   addq.l #4,sp
    fc0e:	|  |  |  |     |  |   move.l d0,19d32 <gameSettings+0xe>
    fc14:	|  |  |  |     +--|-- bra.w fcb2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
    fc18:	|  |  |  |     |  \-> pea 166e4 <main_sludge.c.2f5c5368+0xc0a>
    fc1e:	|  |  |  |     |      move.l sp,d0
    fc20:	|  |  |  |     |      addi.l #269,d0
    fc26:	|  |  |  |     |      move.l d0,-(sp)
    fc28:	|  |  |  |     |      jsr fe5c <strcmp>
    fc2e:	|  |  |  |     |      addq.l #8,sp
    fc30:	|  |  |  |     |      tst.l d0
    fc32:	|  |  |  |     |  /-- bne.s fc4c <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
    fc34:	|  |  |  |     |  |   move.l sp,d0
    fc36:	|  |  |  |     |  |   addq.l #8,d0
    fc38:	|  |  |  |     |  |   move.l d0,-(sp)
    fc3a:	|  |  |  |     |  |   jsr fd68 <stringToInt>
    fc40:	|  |  |  |     |  |   addq.l #4,sp
    fc42:	|  |  |  |     |  |   move.l d0,d0
    fc44:	|  |  |  |     |  |   move.w d0,19d36 <gameSettings+0x12>
    fc4a:	|  |  |  |     +--|-- bra.s fcb2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
    fc4c:	|  |  |  |     |  \-> pea 166f0 <main_sludge.c.2f5c5368+0xc16>
    fc52:	|  |  |  |     |      move.l sp,d0
    fc54:	|  |  |  |     |      addi.l #269,d0
    fc5a:	|  |  |  |     |      move.l d0,-(sp)
    fc5c:	|  |  |  |     |      jsr fe5c <strcmp>
    fc62:	|  |  |  |     |      addq.l #8,sp
    fc64:	|  |  |  |     |      tst.l d0
    fc66:	|  |  |  |     |  /-- bne.s fc80 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
    fc68:	|  |  |  |     |  |   move.l sp,d0
    fc6a:	|  |  |  |     |  |   addq.l #8,d0
    fc6c:	|  |  |  |     |  |   move.l d0,-(sp)
    fc6e:	|  |  |  |     |  |   jsr fd68 <stringToInt>
    fc74:	|  |  |  |     |  |   addq.l #4,sp
    fc76:	|  |  |  |     |  |   move.l d0,d0
    fc78:	|  |  |  |     |  |   move.w d0,19d38 <gameSettings+0x14>
    fc7e:	|  |  |  |     +--|-- bra.s fcb2 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
    fc80:	|  |  |  |     |  \-> pea 166fe <main_sludge.c.2f5c5368+0xc24>
    fc86:	|  |  |  |     |      move.l sp,d0
    fc88:	|  |  |  |     |      addi.l #269,d0
    fc8e:	|  |  |  |     |      move.l d0,-(sp)
    fc90:	|  |  |  |     |      jsr fe5c <strcmp>
    fc96:	|  |  |  |     |      addq.l #8,sp
    fc98:	|  |  |  |     |      tst.l d0
    fc9a:	|  |  |  |     +----- bne.s fcb2 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
    fc9c:	|  |  |  |     |      move.l sp,d0
    fc9e:	|  |  |  |     |      addq.l #8,d0
    fca0:	|  |  |  |     |      move.l d0,-(sp)
    fca2:	|  |  |  |     |      jsr fd68 <stringToInt>
    fca8:	|  |  |  |     |      addq.l #4,sp
    fcaa:	|  |  |  |     |      move.l d0,d0
    fcac:	|  |  |  |     |      move.w d0,19d3a <gameSettings+0x16>
					}
				}
				here = 0;
    fcb2:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
    fcb6:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
    fcba:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
    fcbe:	|  |  |  |            clr.b 8(sp)
				break;
    fcc2:	|  |  |  |  /-------- bra.s fd3a <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
    fcc4:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
    fcca:	|  |  |     |         clr.b 571(sp)
				break;
    fcce:	|  |  |     +-------- bra.s fd3a <readIniFile+0x358>

				default:
				if (doingSecond) {
    fcd0:	|  |  \-----|-------> tst.w 566(sp)
    fcd4:	|  |        |  /----- beq.s fd08 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
    fcd6:	|  |        |  |      move.b 571(sp),d0
    fcda:	|  |        |  |      move.b d0,d1
    fcdc:	|  |        |  |      addq.b #1,d1
    fcde:	|  |        |  |      move.b d1,571(sp)
    fce2:	|  |        |  |      move.b d0,d0
    fce4:	|  |        |  |      andi.l #255,d0
    fcea:	|  |        |  |      lea 572(sp),a0
    fcee:	|  |        |  |      adda.l d0,a0
    fcf0:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
    fcf6:	|  |        |  |      moveq #0,d0
    fcf8:	|  |        |  |      move.b 571(sp),d0
    fcfc:	|  |        |  |      lea 572(sp),a0
    fd00:	|  |        |  |      adda.l d0,a0
    fd02:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
    fd06:	|  |        |  |  /-- bra.s fd38 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
    fd08:	|  |        |  \--|-> move.b 571(sp),d0
    fd0c:	|  |        |     |   move.b d0,d1
    fd0e:	|  |        |     |   addq.b #1,d1
    fd10:	|  |        |     |   move.b d1,571(sp)
    fd14:	|  |        |     |   move.b d0,d0
    fd16:	|  |        |     |   andi.l #255,d0
    fd1c:	|  |        |     |   lea 572(sp),a0
    fd20:	|  |        |     |   adda.l d0,a0
    fd22:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
    fd28:	|  |        |     |   moveq #0,d0
    fd2a:	|  |        |     |   move.b 571(sp),d0
    fd2e:	|  |        |     |   lea 572(sp),a0
    fd32:	|  |        |     |   adda.l d0,a0
    fd34:	|  |        |     |   clr.b -307(a0)
				break;
    fd38:	|  |        |     \-> nop
			}
		} while (keepGoing);
    fd3a:	|  |        \-------> tst.w 568(sp)
    fd3e:	|  \----------------- bne.w fad2 <readIniFile+0xf0>

		Close(fp);
    fd42:	|                     move.l 546(sp),526(sp)
    fd48:	|                     move.l 19c54 <DOSBase>,d0
    fd4e:	|                     movea.l d0,a6
    fd50:	|                     move.l 526(sp),d1
    fd54:	|                     jsr -36(a6)
    fd58:	|                     move.l d0,522(sp)
	}
}
    fd5c:	\-------------------> nop
    fd5e:	                      move.l (sp)+,d2
    fd60:	                      movea.l (sp)+,a6
    fd62:	                      lea 564(sp),sp
    fd66:	                      rts

0000fd68 <stringToInt>:

unsigned int stringToInt (char * s) {
    fd68:	             subq.l #8,sp
	int i = 0;
    fd6a:	             clr.l 4(sp)
	BOOL negative = FALSE;
    fd6e:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
    fd72:	/----------> movea.l 12(sp),a0
    fd76:	|            move.b (a0),d0
    fd78:	|            cmpi.b #47,d0
    fd7c:	|        /-- ble.s fdb4 <stringToInt+0x4c>
    fd7e:	|        |   movea.l 12(sp),a0
    fd82:	|        |   move.b (a0),d0
    fd84:	|        |   cmpi.b #57,d0
    fd88:	|        +-- bgt.s fdb4 <stringToInt+0x4c>
			i *= 10;
    fd8a:	|        |   move.l 4(sp),d1
    fd8e:	|        |   move.l d1,d0
    fd90:	|        |   add.l d0,d0
    fd92:	|        |   add.l d0,d0
    fd94:	|        |   add.l d1,d0
    fd96:	|        |   add.l d0,d0
    fd98:	|        |   move.l d0,4(sp)
			i += *s - '0';
    fd9c:	|        |   movea.l 12(sp),a0
    fda0:	|        |   move.b (a0),d0
    fda2:	|        |   ext.w d0
    fda4:	|        |   movea.w d0,a0
    fda6:	|        |   moveq #-48,d0
    fda8:	|        |   add.l a0,d0
    fdaa:	|        |   add.l d0,4(sp)
			s ++;
    fdae:	|        |   addq.l #1,12(sp)
    fdb2:	|  /-----|-- bra.s fdec <stringToInt+0x84>
		} else if (*s == '-') {
    fdb4:	|  |     \-> movea.l 12(sp),a0
    fdb8:	|  |         move.b (a0),d0
    fdba:	|  |         cmpi.b #45,d0
    fdbe:	|  |     /-- bne.s fdd8 <stringToInt+0x70>
			negative = ! negative;
    fdc0:	|  |     |   tst.w 2(sp)
    fdc4:	|  |     |   seq d0
    fdc6:	|  |     |   neg.b d0
    fdc8:	|  |     |   move.b d0,d0
    fdca:	|  |     |   andi.w #255,d0
    fdce:	|  |     |   move.w d0,2(sp)
			s++;
    fdd2:	|  |     |   addq.l #1,12(sp)
    fdd6:	+--|-----|-- bra.s fd72 <stringToInt+0xa>
		} else {
			if (negative)
    fdd8:	|  |     \-> tst.w 2(sp)
    fddc:	|  |     /-- beq.s fde6 <stringToInt+0x7e>
				return -i;
    fdde:	|  |     |   move.l 4(sp),d0
    fde2:	|  |     |   neg.l d0
    fde4:	|  |  /--|-- bra.s fdee <stringToInt+0x86>
			return i;
    fde6:	|  |  |  \-> move.l 4(sp),d0
    fdea:	|  |  +----- bra.s fdee <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
    fdec:	\--\--|----X bra.s fd72 <stringToInt+0xa>
		}
	}
    fdee:	      \----> addq.l #8,sp
    fdf0:	             rts

0000fdf2 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
    fdf2:	    lea -28(sp),sp
    fdf6:	    move.l a6,-(sp)
    fdf8:	    move.l d2,-(sp)
	BPTR tester;
	BYTE retval = 0;
    fdfa:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
    fdfe:	    move.l 40(sp),30(sp)
    fe04:	    move.l #1005,26(sp)
    fe0c:	    move.l 19c54 <DOSBase>,d0
    fe12:	    movea.l d0,a6
    fe14:	    move.l 30(sp),d1
    fe18:	    move.l 26(sp),d2
    fe1c:	    jsr -30(a6)
    fe20:	    move.l d0,22(sp)
    fe24:	    move.l 22(sp),d0
    fe28:	    move.l d0,18(sp)
	if (tester) {
    fe2c:	/-- beq.s fe4e <fileExists+0x5c>
		retval = 1;
    fe2e:	|   move.b #1,35(sp)
		Close(tester);
    fe34:	|   move.l 18(sp),14(sp)
    fe3a:	|   move.l 19c54 <DOSBase>,d0
    fe40:	|   movea.l d0,a6
    fe42:	|   move.l 14(sp),d1
    fe46:	|   jsr -36(a6)
    fe4a:	|   move.l d0,10(sp)
	}
	return retval;
    fe4e:	\-> move.b 35(sp),d0
    fe52:	    move.l (sp)+,d2
    fe54:	    movea.l (sp)+,a6
    fe56:	    lea 28(sp),sp
    fe5a:	    rts

0000fe5c <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
    fe5c:	   /-- bra.s fe66 <strcmp+0xa>
    {
        s1++;
    fe5e:	/--|-> addq.l #1,4(sp)
        s2++;
    fe62:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
    fe66:	|  \-> movea.l 4(sp),a0
    fe6a:	|      move.b (a0),d0
    fe6c:	|  /-- beq.s fe7e <strcmp+0x22>
    fe6e:	|  |   movea.l 4(sp),a0
    fe72:	|  |   move.b (a0),d1
    fe74:	|  |   movea.l 8(sp),a0
    fe78:	|  |   move.b (a0),d0
    fe7a:	|  |   cmp.b d1,d0
    fe7c:	\--|-- beq.s fe5e <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
    fe7e:	   \-> movea.l 4(sp),a0
    fe82:	       move.b (a0),d0
    fe84:	       moveq #0,d1
    fe86:	       move.b d0,d1
    fe88:	       movea.l 8(sp),a0
    fe8c:	       move.b (a0),d0
    fe8e:	       move.b d0,d0
    fe90:	       andi.l #255,d0
    fe96:	       sub.l d0,d1
    fe98:	       move.l d1,d0
}
    fe9a:	       rts

0000fe9c <strlen>:

long unsigned int strlen (const char *s) 
{  
    fe9c:	       subq.l #4,sp
	long unsigned int i = 0;
    fe9e:	       clr.l (sp)
	while(s[i]) i++; 
    fea0:	   /-- bra.s fea4 <strlen+0x8>
    fea2:	/--|-> addq.l #1,(sp)
    fea4:	|  \-> movea.l 8(sp),a0
    fea8:	|      adda.l (sp),a0
    feaa:	|      move.b (a0),d0
    feac:	\----- bne.s fea2 <strlen+0x6>
	return(i);
    feae:	       move.l (sp),d0
}
    feb0:	       addq.l #4,sp
    feb2:	       rts

0000feb4 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
    feb4:	    nop
    feb6:	/-> move.l 8(sp),d0
    feba:	|   move.l d0,d1
    febc:	|   addq.l #1,d1
    febe:	|   move.l d1,8(sp)
    fec2:	|   movea.l 4(sp),a0
    fec6:	|   lea 1(a0),a1
    feca:	|   move.l a1,4(sp)
    fece:	|   movea.l d0,a1
    fed0:	|   move.b (a1),d0
    fed2:	|   move.b d0,(a0)
    fed4:	|   move.b (a0),d0
    fed6:	\-- bne.s feb6 <strcpy+0x2>
}
    fed8:	    nop
    feda:	    rts

0000fedc <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
    fedc:	    lea -20(sp),sp
    fee0:	    move.l a6,-(sp)
    fee2:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
    fee4:	    move.l 32(sp),-(sp)
    fee8:	    jsr fe9c <strlen>
    feee:	    addq.l #4,sp
    fef0:	    move.l d0,d2
    fef2:	    move.l 36(sp),-(sp)
    fef6:	    jsr fe9c <strlen>
    fefc:	    addq.l #4,sp
    fefe:	    add.l d2,d0
    ff00:	    move.l d0,d1
    ff02:	    addq.l #1,d1
    ff04:	    move.l d1,20(sp)
    ff08:	    clr.l 16(sp)
    ff0c:	    move.l 19c4c <SysBase>,d0
    ff12:	    movea.l d0,a6
    ff14:	    move.l 20(sp),d0
    ff18:	    move.l 16(sp),d1
    ff1c:	    jsr -684(a6)
    ff20:	    move.l d0,12(sp)
    ff24:	    move.l 12(sp),d0
    ff28:	    move.l d0,8(sp)
	char * t = newString;
    ff2c:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
    ff32:	    nop
    ff34:	/-> move.l 32(sp),d0
    ff38:	|   move.l d0,d1
    ff3a:	|   addq.l #1,d1
    ff3c:	|   move.l d1,32(sp)
    ff40:	|   movea.l 24(sp),a0
    ff44:	|   lea 1(a0),a1
    ff48:	|   move.l a1,24(sp)
    ff4c:	|   movea.l d0,a1
    ff4e:	|   move.b (a1),d0
    ff50:	|   move.b d0,(a0)
    ff52:	|   move.b (a0),d0
    ff54:	\-- bne.s ff34 <joinStrings+0x58>
	t--;
    ff56:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
    ff5a:	    nop
    ff5c:	/-> move.l 36(sp),d0
    ff60:	|   move.l d0,d1
    ff62:	|   addq.l #1,d1
    ff64:	|   move.l d1,36(sp)
    ff68:	|   movea.l 24(sp),a0
    ff6c:	|   lea 1(a0),a1
    ff70:	|   move.l a1,24(sp)
    ff74:	|   movea.l d0,a1
    ff76:	|   move.b (a1),d0
    ff78:	|   move.b d0,(a0)
    ff7a:	|   move.b (a0),d0
    ff7c:	\-- bne.s ff5c <joinStrings+0x80>

	return newString;
    ff7e:	    move.l 8(sp),d0
}
    ff82:	    move.l (sp)+,d2
    ff84:	    movea.l (sp)+,a6
    ff86:	    lea 20(sp),sp
    ff8a:	    rts

0000ff8c <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
    ff8c:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
    ff90:	       moveq #10,d0
    ff92:	       cmp.l 28(sp),d0
    ff96:	   /-- bne.s ffb4 <itoa+0x28>
    ff98:	   |   tst.l 20(sp)
    ff9c:	   +-- bge.s ffb4 <itoa+0x28>
        *str++ = '-';
    ff9e:	   |   move.l 24(sp),d0
    ffa2:	   |   move.l d0,d1
    ffa4:	   |   addq.l #1,d1
    ffa6:	   |   move.l d1,24(sp)
    ffaa:	   |   movea.l d0,a0
    ffac:	   |   move.b #45,(a0)
        value *= -1;
    ffb0:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
    ffb4:	   \-> move.l 24(sp),12(sp)
    ffba:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
    ffc0:	   /-> move.l 20(sp),d0
    ffc4:	   |   move.l 28(sp),-(sp)
    ffc8:	   |   move.l d0,-(sp)
    ffca:	   |   jsr 13462 <__modsi3>
    ffd0:	   |   addq.l #8,sp
    ffd2:	   |   movea.l d0,a1
    ffd4:	   |   move.l 12(sp),d0
    ffd8:	   |   move.l d0,d1
    ffda:	   |   addq.l #1,d1
    ffdc:	   |   move.l d1,12(sp)
    ffe0:	   |   lea 16708 <main_sludge.c.2f5c5368+0xc2e>,a0
    ffe6:	   |   move.b (0,a1,a0.l),d1
    ffea:	   |   movea.l d0,a0
    ffec:	   |   move.b d1,(a0)
        value /= base;
    ffee:	   |   move.l 28(sp),-(sp)
    fff2:	   |   move.l 24(sp),-(sp)
    fff6:	   |   jsr 13434 <__divsi3>
    fffc:	   |   addq.l #8,sp
    fffe:	   |   move.l d0,20(sp)
    } while (value);
   10002:	   \-- bne.s ffc0 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   10004:	       move.l 12(sp),d0
   10008:	       move.l d0,d1
   1000a:	       subq.l #1,d1
   1000c:	       move.l d1,12(sp)
   10010:	       movea.l d0,a0
   10012:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   10014:	       move.l 4(sp),8(sp)
   1001a:	   /-- bra.s 10040 <itoa+0xb4>
        char temp = *low;
   1001c:	/--|-> movea.l 8(sp),a0
   10020:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   10024:	|  |   movea.l 12(sp),a0
   10028:	|  |   move.b (a0),d0
   1002a:	|  |   movea.l 8(sp),a0
   1002e:	|  |   move.b d0,(a0)
        *ptr = temp;
   10030:	|  |   movea.l 12(sp),a0
   10034:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   10038:	|  |   addq.l #1,8(sp)
   1003c:	|  |   subq.l #1,12(sp)
   10040:	|  \-> move.l 8(sp),d0
   10044:	|      cmp.l 12(sp),d0
   10048:	\----- bcs.s 1001c <itoa+0x90>
    }
    return rc;
   1004a:	       move.l 4(sp),d0
}
   1004e:	       lea 16(sp),sp
   10052:	       rts

00010054 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   10054:	                            lea -40(sp),sp
   10058:	                            move.l d2,-(sp)
    char* s = str;
   1005a:	                            move.l 48(sp),40(sp)
    const char* p = format;
   10060:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   10066:	   /----------------------- bra.w 1019a <vsprintf2+0x146>
        if (*p == '%') {
   1006a:	/--|----------------------> movea.l 36(sp),a0
   1006e:	|  |                        move.b (a0),d0
   10070:	|  |                        cmpi.b #37,d0
   10074:	|  |  /-------------------- bne.w 10180 <vsprintf2+0x12c>
            switch (*++p) {
   10078:	|  |  |                     addq.l #1,36(sp)
   1007c:	|  |  |                     movea.l 36(sp),a0
   10080:	|  |  |                     move.b (a0),d0
   10082:	|  |  |                     ext.w d0
   10084:	|  |  |                     movea.w d0,a0
   10086:	|  |  |                     moveq #115,d0
   10088:	|  |  |                     cmp.l a0,d0
   1008a:	|  |  |           /-------- beq.s 10102 <vsprintf2+0xae>
   1008c:	|  |  |           |         moveq #115,d1
   1008e:	|  |  |           |         cmp.l a0,d1
   10090:	|  |  |  /--------|-------- blt.w 10168 <vsprintf2+0x114>
   10094:	|  |  |  |        |         moveq #99,d2
   10096:	|  |  |  |        |         cmp.l a0,d2
   10098:	|  |  |  |  /-----|-------- beq.w 10140 <vsprintf2+0xec>
   1009c:	|  |  |  |  |     |         moveq #100,d0
   1009e:	|  |  |  |  |     |         cmp.l a0,d0
   100a0:	|  |  |  +--|-----|-------- bne.w 10168 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   100a4:	|  |  |  |  |     |         addq.l #4,56(sp)
   100a8:	|  |  |  |  |     |         movea.l 56(sp),a0
   100ac:	|  |  |  |  |     |         move.l (a0),d0
   100ae:	|  |  |  |  |     |         move.l d0,d1
   100b0:	|  |  |  |  |     |         subq.l #1,d1
   100b2:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   100b6:	|  |  |  |  |     |         pea a <_start+0xa>
   100ba:	|  |  |  |  |     |         lea 8(sp),a0
   100be:	|  |  |  |  |     |         move.l a0,-(sp)
   100c0:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   100c4:	|  |  |  |  |     |         jsr ff8c <itoa>
   100ca:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   100ce:	|  |  |  |  |     |         lea 44(sp),a0
   100d2:	|  |  |  |  |     |         lea -40(a0),a0
   100d6:	|  |  |  |  |     |         move.l a0,28(sp)
   100da:	|  |  |  |  |     |     /-- bra.s 100f6 <vsprintf2+0xa2>
                        *s++ = *b;
   100dc:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   100e0:	|  |  |  |  |     |  |  |   move.l d0,d1
   100e2:	|  |  |  |  |     |  |  |   addq.l #1,d1
   100e4:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   100e8:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   100ec:	|  |  |  |  |     |  |  |   move.b (a0),d1
   100ee:	|  |  |  |  |     |  |  |   movea.l d0,a0
   100f0:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   100f2:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   100f6:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   100fa:	|  |  |  |  |     |  |      move.b (a0),d0
   100fc:	|  |  |  |  |     |  \----- bne.s 100dc <vsprintf2+0x88>
                    }
                    break;
   100fe:	|  |  |  |  |  /--|-------- bra.w 10196 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   10102:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   10106:	|  |  |  |  |  |            movea.l 56(sp),a0
   1010a:	|  |  |  |  |  |            move.l (a0),d0
   1010c:	|  |  |  |  |  |            move.l d0,d1
   1010e:	|  |  |  |  |  |            subq.l #1,d1
   10110:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   10114:	|  |  |  |  |  |        /-- bra.s 10136 <vsprintf2+0xe2>
                        *s++ = *sval++;
   10116:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   1011a:	|  |  |  |  |  |     |  |   move.l d1,d2
   1011c:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1011e:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   10122:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   10126:	|  |  |  |  |  |     |  |   move.l d0,d2
   10128:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1012a:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   1012e:	|  |  |  |  |  |     |  |   movea.l d1,a0
   10130:	|  |  |  |  |  |     |  |   move.b (a0),d1
   10132:	|  |  |  |  |  |     |  |   movea.l d0,a0
   10134:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   10136:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   1013a:	|  |  |  |  |  |     |      move.b (a0),d0
   1013c:	|  |  |  |  |  |     \----- bne.s 10116 <vsprintf2+0xc2>
                    }
                    break;
   1013e:	|  |  |  |  |  +----------- bra.s 10196 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   10140:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   10144:	|  |  |  |     |            movea.l 56(sp),a0
   10148:	|  |  |  |     |            move.l (a0),d0
   1014a:	|  |  |  |     |            move.l d0,d1
   1014c:	|  |  |  |     |            subq.l #1,d1
   1014e:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   10152:	|  |  |  |     |            move.l 40(sp),d0
   10156:	|  |  |  |     |            move.l d0,d2
   10158:	|  |  |  |     |            addq.l #1,d2
   1015a:	|  |  |  |     |            move.l d2,40(sp)
   1015e:	|  |  |  |     |            move.l 24(sp),d1
   10162:	|  |  |  |     |            movea.l d0,a0
   10164:	|  |  |  |     |            move.b d1,(a0)
                    break;
   10166:	|  |  |  |     +----------- bra.s 10196 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   10168:	|  |  |  \-----|----------> move.l 40(sp),d0
   1016c:	|  |  |        |            move.l d0,d1
   1016e:	|  |  |        |            addq.l #1,d1
   10170:	|  |  |        |            move.l d1,40(sp)
   10174:	|  |  |        |            movea.l 36(sp),a0
   10178:	|  |  |        |            move.b (a0),d1
   1017a:	|  |  |        |            movea.l d0,a0
   1017c:	|  |  |        |            move.b d1,(a0)
                    break;
   1017e:	|  |  |        +----------- bra.s 10196 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   10180:	|  |  \--------|----------> move.l 40(sp),d0
   10184:	|  |           |            move.l d0,d1
   10186:	|  |           |            addq.l #1,d1
   10188:	|  |           |            move.l d1,40(sp)
   1018c:	|  |           |            movea.l 36(sp),a0
   10190:	|  |           |            move.b (a0),d1
   10192:	|  |           |            movea.l d0,a0
   10194:	|  |           |            move.b d1,(a0)
        }
        p++;
   10196:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   1019a:	|  \----------------------> movea.l 36(sp),a0
   1019e:	|                           move.b (a0),d0
   101a0:	\-------------------------- bne.w 1006a <vsprintf2+0x16>
    }
    *s = '\0';
   101a4:	                            movea.l 40(sp),a0
   101a8:	                            clr.b (a0)
    return s - str;
   101aa:	                            move.l 40(sp),d0
   101ae:	                            sub.l 48(sp),d0
}
   101b2:	                            move.l (sp)+,d2
   101b4:	                            lea 40(sp),sp
   101b8:	                            rts

000101ba <sprintf>:

int sprintf(char* str, const char* format, ...) {
   101ba:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   101bc:	moveq #16,d0
   101be:	add.l sp,d0
   101c0:	move.l d0,d1
   101c2:	addq.l #4,d1
   101c4:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   101c8:	move.l 16(sp),d0
   101cc:	move.l 4(sp),-(sp)
   101d0:	move.l d0,-(sp)
   101d2:	move.l 20(sp),-(sp)
   101d6:	jsr 10054 <vsprintf2>
   101dc:	lea 12(sp),sp
   101e0:	move.l d0,(sp)
    va_end(args);
   101e2:	clr.l 4(sp)

    return done;
   101e6:	move.l (sp),d0
}
   101e8:	addq.l #8,sp
   101ea:	rts

000101ec <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   101ec:	       lea -20(sp),sp
   101f0:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   101f2:	       moveq #12,d0
   101f4:	       move.l d0,20(sp)
   101f8:	       clr.l 16(sp)
   101fc:	       move.l 19c4c <SysBase>,d0
   10202:	       movea.l d0,a6
   10204:	       move.l 20(sp),d0
   10208:	       move.l 16(sp),d1
   1020c:	       jsr -684(a6)
   10210:	       move.l d0,12(sp)
   10214:	       move.l 12(sp),d0
   10218:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   1021c:	   /-- bne.s 10222 <addVarToStack+0x36>
   1021e:	   |   clr.w d0
   10220:	/--|-- bra.s 1026a <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   10222:	|  \-> move.l 8(sp),d0
   10226:	|      move.l d0,-(sp)
   10228:	|      move.l 32(sp),-(sp)
   1022c:	|      jsr 10d4e <copyMain>
   10232:	|      addq.l #8,sp
   10234:	|      tst.w d0
   10236:	|  /-- bne.s 10252 <addVarToStack+0x66>
        FreeVec(newStack);
   10238:	|  |   move.l 8(sp),4(sp)
   1023e:	|  |   move.l 19c4c <SysBase>,d0
   10244:	|  |   movea.l d0,a6
   10246:	|  |   movea.l 4(sp),a1
   1024a:	|  |   jsr -690(a6)
        return FALSE;
   1024e:	|  |   clr.w d0
   10250:	+--|-- bra.s 1026a <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   10252:	|  \-> movea.l 32(sp),a0
   10256:	|      move.l (a0),d0
   10258:	|      movea.l 8(sp),a0
   1025c:	|      move.l d0,8(a0)
    *thisStack = newStack;
   10260:	|      movea.l 32(sp),a0
   10264:	|      move.l 8(sp),(a0)
    return TRUE;
   10268:	|      moveq #1,d0
}
   1026a:	\----> movea.l (sp)+,a6
   1026c:	       lea 20(sp),sp
   10270:	       rts

00010272 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   10272:	       lea -16(sp),sp
   10276:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   10278:	       moveq #12,d0
   1027a:	       move.l d0,16(sp)
   1027e:	       clr.l 12(sp)
   10282:	       move.l 19c4c <SysBase>,d0
   10288:	       movea.l d0,a6
   1028a:	       move.l 16(sp),d0
   1028e:	       move.l 12(sp),d1
   10292:	       jsr -684(a6)
   10296:	       move.l d0,8(sp)
   1029a:	       move.l 8(sp),d0
   1029e:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   102a2:	   /-- bne.s 102a8 <addVarToStackQuick+0x36>
   102a4:	   |   clr.w d0
   102a6:	/--|-- bra.s 102de <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   102a8:	|  \-> move.l 4(sp),d0
   102ac:	|      pea 8 <_start+0x8>
   102b0:	|      move.l 28(sp),-(sp)
   102b4:	|      move.l d0,-(sp)
   102b6:	|      jsr 129b8 <memcpy>
   102bc:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   102c0:	|      movea.l 24(sp),a0
   102c4:	|      clr.l (a0)

    newStack->next = *thisStack;
   102c6:	|      movea.l 28(sp),a0
   102ca:	|      move.l (a0),d0
   102cc:	|      movea.l 4(sp),a0
   102d0:	|      move.l d0,8(a0)
    *thisStack = newStack;
   102d4:	|      movea.l 28(sp),a0
   102d8:	|      move.l 4(sp),(a0)
    return TRUE;
   102dc:	|      moveq #1,d0
}
   102de:	\----> movea.l (sp)+,a6
   102e0:	       lea 16(sp),sp
   102e4:	       rts

000102e6 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   102e6:	       lea -16(sp),sp
   102ea:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   102ec:	       movea.l 24(sp),a0
   102f0:	       move.l (a0),d0
   102f2:	       moveq #1,d1
   102f4:	       cmp.l d0,d1
   102f6:	   /-- bne.s 10320 <addVariablesInSecond+0x3a>
   102f8:	   |   movea.l 28(sp),a0
   102fc:	   |   move.l (a0),d0
   102fe:	   |   moveq #1,d1
   10300:	   |   cmp.l d0,d1
   10302:	   +-- bne.s 10320 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   10304:	   |   movea.l 28(sp),a0
   10308:	   |   move.l 4(a0),d1
   1030c:	   |   movea.l 24(sp),a0
   10310:	   |   move.l 4(a0),d0
   10314:	   |   add.l d1,d0
   10316:	   |   movea.l 28(sp),a0
   1031a:	   |   move.l d0,4(a0)
   1031e:	/--|-- bra.s 1039a <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   10320:	|  \-> move.l 24(sp),-(sp)
   10324:	|      jsr 10f86 <getTextFromAnyVar>
   1032a:	|      addq.l #4,sp
   1032c:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   10330:	|      move.l 28(sp),-(sp)
   10334:	|      jsr 10f86 <getTextFromAnyVar>
   1033a:	|      addq.l #4,sp
   1033c:	|      move.l d0,12(sp)

		unlinkVar(var2);
   10340:	|      move.l 28(sp),-(sp)
   10344:	|      jsr 10bfe <unlinkVar>
   1034a:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   1034c:	|      move.l 12(sp),-(sp)
   10350:	|      move.l 20(sp),-(sp)
   10354:	|      jsr fedc <joinStrings>
   1035a:	|      addq.l #8,sp
   1035c:	|      movea.l 28(sp),a0
   10360:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   10364:	|      movea.l 28(sp),a0
   10368:	|      moveq #3,d0
   1036a:	|      move.l d0,(a0)
		FreeVec(string1);
   1036c:	|      move.l 16(sp),8(sp)
   10372:	|      move.l 19c4c <SysBase>,d0
   10378:	|      movea.l d0,a6
   1037a:	|      movea.l 8(sp),a1
   1037e:	|      jsr -690(a6)
		FreeVec(string2);
   10382:	|      move.l 12(sp),4(sp)
   10388:	|      move.l 19c4c <SysBase>,d0
   1038e:	|      movea.l d0,a6
   10390:	|      movea.l 4(sp),a1
   10394:	|      jsr -690(a6)
	}
}
   10398:	|      nop
   1039a:	\----> nop
   1039c:	       movea.l (sp)+,a6
   1039e:	       lea 16(sp),sp
   103a2:	       rts

000103a4 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   103a4:	movea.l 8(sp),a0
   103a8:	move.l 4(a0),-(sp)
   103ac:	move.l (a0),-(sp)
   103ae:	movea.l 12(sp),a0
   103b2:	move.l 4(a0),-(sp)
   103b6:	move.l (a0),-(sp)
   103b8:	jsr 103da <compareVars>
   103be:	lea 16(sp),sp
   103c2:	move.l d0,-(sp)
   103c4:	pea 1 <_start+0x1>
   103c8:	move.l 16(sp),-(sp)
   103cc:	jsr 112a2 <setVariable>
   103d2:	lea 12(sp),sp
}
   103d6:	nop
   103d8:	rts

000103da <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   103da:	       subq.l #4,sp
	int re = 0;
   103dc:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   103de:	       move.l 8(sp),d1
   103e2:	       move.l 16(sp),d0
   103e6:	       cmp.l d1,d0
   103e8:	/----- bne.w 104b0 <compareVars+0xd6>
		switch (var1.varType) {
   103ec:	|      move.l 8(sp),d0
   103f0:	|      moveq #9,d1
   103f2:	|      cmp.l d0,d1
   103f4:	|  /-- bcs.w 10498 <compareVars+0xbe>
   103f8:	|  |   add.l d0,d0
   103fa:	|  |   movea.l d0,a0
   103fc:	|  |   adda.l #66568,a0
   10402:	|  |   move.w (a0),d0
   10404:	|  |   jmp (10408 <compareVars+0x2e>,pc,d0.w)
   10408:	|  |   ori.b #-112,(a4)
   1040c:	|  |   ori.l #5243024,(a0)
   10412:	|  |   ori.l #7733392,(a0)
   10418:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1041e:	|  |   move.l d0,(sp)
			break;
   10420:	+--|-- bra.w 104b0 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   10424:	|  |   move.l 12(sp),d1
   10428:	|  |   move.l 20(sp),d0
   1042c:	|  |   cmp.l d1,d0
   1042e:	|  |   seq d0
   10430:	|  |   neg.b d0
   10432:	|  |   move.b d0,d0
   10434:	|  |   andi.l #255,d0
   1043a:	|  |   move.l d0,(sp)
			break;
   1043c:	+--|-- bra.s 104b0 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   1043e:	|  |   move.l 12(sp),d1
   10442:	|  |   move.l 20(sp),d0
   10446:	|  |   cmp.l d1,d0
   10448:	|  |   seq d0
   1044a:	|  |   neg.b d0
   1044c:	|  |   move.b d0,d0
   1044e:	|  |   andi.l #255,d0
   10454:	|  |   move.l d0,(sp)
			break;
   10456:	+--|-- bra.s 104b0 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   10458:	|  |   move.l 20(sp),d1
   1045c:	|  |   move.l 12(sp),d0
   10460:	|  |   move.l d1,-(sp)
   10462:	|  |   move.l d0,-(sp)
   10464:	|  |   jsr fe5c <strcmp>
   1046a:	|  |   addq.l #8,sp
   1046c:	|  |   tst.l d0
   1046e:	|  |   seq d0
   10470:	|  |   neg.b d0
   10472:	|  |   move.b d0,d0
   10474:	|  |   andi.l #255,d0
   1047a:	|  |   move.l d0,(sp)
			break;
   1047c:	+--|-- bra.s 104b0 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   1047e:	|  |   move.l 12(sp),d1
   10482:	|  |   move.l 20(sp),d0
   10486:	|  |   cmp.l d1,d0
   10488:	|  |   seq d0
   1048a:	|  |   neg.b d0
   1048c:	|  |   move.b d0,d0
   1048e:	|  |   andi.l #255,d0
   10494:	|  |   move.l d0,(sp)
			break;
   10496:	+--|-- bra.s 104b0 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   10498:	|  \-> move.l 12(sp),d1
   1049c:	|      move.l 20(sp),d0
   104a0:	|      cmp.l d1,d0
   104a2:	|      seq d0
   104a4:	|      neg.b d0
   104a6:	|      move.b d0,d0
   104a8:	|      andi.l #255,d0
   104ae:	|      move.l d0,(sp)
		}
	}
	return re;
   104b0:	\----> move.l (sp),d0
}
   104b2:	       addq.l #4,sp
   104b4:	       rts

000104b6 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   104b6:	             lea -16(sp),sp
   104ba:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   104bc:	             movea.l 28(sp),a0
   104c0:	             moveq #6,d0
   104c2:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   104c4:	             moveq #12,d0
   104c6:	             move.l d0,12(sp)
   104ca:	             clr.l 8(sp)
   104ce:	             move.l 19c4c <SysBase>,d0
   104d4:	             movea.l d0,a6
   104d6:	             move.l 12(sp),d0
   104da:	             move.l 8(sp),d1
   104de:	             jsr -684(a6)
   104e2:	             move.l d0,4(sp)
   104e6:	             move.l 4(sp),d0
   104ea:	             movea.l 28(sp),a0
   104ee:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   104f2:	             movea.l 28(sp),a0
   104f6:	             move.l 4(a0),d0
   104fa:	         /-- bne.s 10502 <copyStack+0x4c>
   104fc:	         |   clr.w d0
   104fe:	/--------|-- bra.w 10584 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   10502:	|        \-> movea.l 28(sp),a0
   10506:	|            movea.l 4(a0),a0
   1050a:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1050c:	|            movea.l 28(sp),a0
   10510:	|            movea.l 4(a0),a0
   10514:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   10518:	|            movea.l 28(sp),a0
   1051c:	|            movea.l 4(a0),a0
   10520:	|            moveq #1,d0
   10522:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   10526:	|            movea.l 24(sp),a0
   1052a:	|            movea.l 4(a0),a0
   1052e:	|            move.l (a0),16(sp)

	while (a) {
   10532:	|     /----- bra.s 1057c <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   10534:	|  /--|----> movea.l 28(sp),a0
   10538:	|  |  |      move.l 4(a0),d0
   1053c:	|  |  |      move.l d0,d1
   1053e:	|  |  |      move.l 16(sp),d0
   10542:	|  |  |      move.l d1,-(sp)
   10544:	|  |  |      move.l d0,-(sp)
   10546:	|  |  |      jsr 101ec <addVarToStack>
   1054c:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   1054e:	|  |  |      movea.l 28(sp),a0
   10552:	|  |  |      movea.l 4(a0),a0
   10556:	|  |  |      move.l 4(a0),d0
   1055a:	|  |  |  /-- bne.s 10572 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   1055c:	|  |  |  |   movea.l 28(sp),a0
   10560:	|  |  |  |   movea.l 4(a0),a1
   10564:	|  |  |  |   movea.l 28(sp),a0
   10568:	|  |  |  |   movea.l 4(a0),a0
   1056c:	|  |  |  |   move.l (a1),d0
   1056e:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   10572:	|  |  |  \-> movea.l 16(sp),a0
   10576:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   1057c:	|  |  \----> tst.l 16(sp)
   10580:	|  \-------- bne.s 10534 <copyStack+0x7e>
	}

	return TRUE;
   10582:	|            moveq #1,d0
}
   10584:	\----------> movea.l (sp)+,a6
   10586:	             lea 16(sp),sp
   1058a:	             rts

0001058c <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   1058c:	                lea -20(sp),sp
   10590:	                move.l a6,-(sp)
   10592:	                move.l 36(sp),d0
   10596:	                move.w d0,d0
   10598:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   1059c:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   105a2:	                clr.l 16(sp)

    while (*huntVar) {
   105a6:	   /----------- bra.s 10624 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   105a8:	/--|----------> movea.l 20(sp),a0
   105ac:	|  |            movea.l (a0),a0
   105ae:	|  |            movea.l 28(sp),a1
   105b2:	|  |            move.l 4(a1),-(sp)
   105b6:	|  |            move.l (a1),-(sp)
   105b8:	|  |            move.l 4(a0),-(sp)
   105bc:	|  |            move.l (a0),-(sp)
   105be:	|  |            jsr 103da <compareVars>
   105c4:	|  |            lea 16(sp),sp
   105c8:	|  |            tst.l d0
   105ca:	|  |  /-------- beq.s 10616 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   105cc:	|  |  |         movea.l 20(sp),a0
   105d0:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   105d4:	|  |  |         movea.l 12(sp),a0
   105d8:	|  |  |         move.l 8(a0),d0
   105dc:	|  |  |         movea.l 20(sp),a0
   105e0:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   105e2:	|  |  |         move.l 12(sp),d0
   105e6:	|  |  |         move.l d0,-(sp)
   105e8:	|  |  |         jsr 10bfe <unlinkVar>
   105ee:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   105f0:	|  |  |         move.l 12(sp),8(sp)
   105f6:	|  |  |         move.l 19c4c <SysBase>,d0
   105fc:	|  |  |         movea.l d0,a6
   105fe:	|  |  |         movea.l 8(sp),a1
   10602:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   10606:	|  |  |         tst.w 6(sp)
   1060a:	|  |  |     /-- bne.s 10610 <deleteVarFromStack+0x84>
   1060c:	|  |  |     |   moveq #1,d0
   1060e:	|  |  |  /--|-- bra.s 10632 <deleteVarFromStack+0xa6>
            reply++;
   10610:	|  |  |  |  \-> addq.l #1,16(sp)
   10614:	|  +--|--|----- bra.s 10624 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   10616:	|  |  \--|----> movea.l 20(sp),a0
   1061a:	|  |     |      move.l (a0),d0
   1061c:	|  |     |      move.l d0,d1
   1061e:	|  |     |      addq.l #8,d1
   10620:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   10624:	|  \-----|----> movea.l 20(sp),a0
   10628:	|        |      move.l (a0),d0
   1062a:	\--------|----- bne.w 105a8 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1062e:	         |      move.l 16(sp),d0
}
   10632:	         \----> movea.l (sp)+,a6
   10634:	                lea 20(sp),sp
   10638:	                rts

0001063a <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   1063a:	       movea.l 4(sp),a0
   1063e:	       move.l 4(a0),d0
   10642:	       cmp.l 8(sp),d0
   10646:	   /-- bhi.s 1064c <fastArrayGetByIndex+0x12>
   10648:	   |   moveq #0,d0
   1064a:	/--|-- bra.s 1065a <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   1064c:	|  \-> movea.l 4(sp),a0
   10650:	|      move.l (a0),d1
   10652:	|      move.l 8(sp),d0
   10656:	|      lsl.l #3,d0
   10658:	|      add.l d1,d0
}
   1065a:	\----> rts

0001065c <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   1065c:	                lea -32(sp),sp
   10660:	                move.l a6,-(sp)
   10662:	                move.l a2,-(sp)
    struct persona *p = NULL;
   10664:	                clr.l 36(sp)

    switch (thisVar->varType) {
   10668:	                movea.l 44(sp),a0
   1066c:	                move.l (a0),d0
   1066e:	                moveq #8,d1
   10670:	                cmp.l d0,d1
   10672:	            /-- beq.s 10680 <getCostumeFromVar+0x24>
   10674:	            |   moveq #9,d1
   10676:	            |   cmp.l d0,d1
   10678:	   /--------|-- beq.w 1072e <getCostumeFromVar+0xd2>
   1067c:	/--|--------|-- bra.w 10738 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   10680:	|  |        \-> moveq #8,d0
   10682:	|  |            move.l d0,28(sp)
   10686:	|  |            clr.l 24(sp)
   1068a:	|  |            move.l 19c4c <SysBase>,d0
   10690:	|  |            movea.l d0,a6
   10692:	|  |            move.l 28(sp),d0
   10696:	|  |            move.l 24(sp),d1
   1069a:	|  |            jsr -684(a6)
   1069e:	|  |            move.l d0,20(sp)
   106a2:	|  |            move.l 20(sp),d0
   106a6:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   106aa:	|  |        /-- bne.s 106b2 <getCostumeFromVar+0x56>
   106ac:	|  |        |   moveq #0,d0
   106ae:	|  |  /-----|-- bra.w 10762 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   106b2:	|  |  |     \-> movea.l 36(sp),a0
   106b6:	|  |  |         moveq #1,d1
   106b8:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   106bc:	|  |  |         moveq #12,d0
   106be:	|  |  |         move.l d0,16(sp)
   106c2:	|  |  |         clr.l 12(sp)
   106c6:	|  |  |         move.l 19c4c <SysBase>,d0
   106cc:	|  |  |         movea.l d0,a6
   106ce:	|  |  |         move.l 16(sp),d0
   106d2:	|  |  |         move.l 12(sp),d1
   106d6:	|  |  |         jsr -684(a6)
   106da:	|  |  |         move.l d0,8(sp)
   106de:	|  |  |         move.l 8(sp),d0
   106e2:	|  |  |         movea.l 36(sp),a0
   106e6:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   106e8:	|  |  |         movea.l 36(sp),a0
   106ec:	|  |  |         move.l (a0),d0
   106ee:	|  |  |     /-- bne.s 106f4 <getCostumeFromVar+0x98>
   106f0:	|  |  |     |   moveq #0,d0
   106f2:	|  |  +-----|-- bra.s 10762 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   106f4:	|  |  |     \-> clr.l 32(sp)
   106f8:	|  |  |     /-- bra.s 10724 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   106fa:	|  |  |  /--|-> movea.l 44(sp),a0
   106fe:	|  |  |  |  |   move.l 4(a0),d0
   10702:	|  |  |  |  |   movea.l 36(sp),a0
   10706:	|  |  |  |  |   movea.l (a0),a0
   10708:	|  |  |  |  |   move.l 32(sp),d1
   1070c:	|  |  |  |  |   add.l d1,d1
   1070e:	|  |  |  |  |   add.l d1,d1
   10710:	|  |  |  |  |   lea (0,a0,d1.l),a2
   10714:	|  |  |  |  |   move.l d0,-(sp)
   10716:	|  |  |  |  |   jsr 611e <copyAnim>
   1071c:	|  |  |  |  |   addq.l #4,sp
   1071e:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   10720:	|  |  |  |  |   addq.l #1,32(sp)
   10724:	|  |  |  |  \-> moveq #2,d1
   10726:	|  |  |  |      cmp.l 32(sp),d1
   1072a:	|  |  |  \----- bge.s 106fa <getCostumeFromVar+0x9e>
            }
            break;
   1072c:	|  |  |     /-- bra.s 1075e <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1072e:	|  \--|-----|-> movea.l 44(sp),a0
   10732:	|     |     |   move.l 4(a0),d0
   10736:	|     +-----|-- bra.s 10762 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   10738:	\-----|-----|-> movea.l 44(sp),a0
   1073c:	      |     |   move.l (a0),d0
   1073e:	      |     |   add.l d0,d0
   10740:	      |     |   movea.l d0,a1
   10742:	      |     |   adda.l d0,a1
   10744:	      |     |   lea 18688 <typeName>,a0
   1074a:	      |     |   move.l (0,a1,a0.l),d0
   1074e:	      |     |   move.l d0,-(sp)
   10750:	      |     |   pea 1677a <main_sludge.c.2f5c5368+0xca0>
   10756:	      |     |   jsr 12a04 <KPrintF>
   1075c:	      |     |   addq.l #8,sp
    }

    return p;
   1075e:	      |     \-> move.l 36(sp),d0
}
   10762:	      \-------> movea.l (sp)+,a2
   10764:	                movea.l (sp)+,a6
   10766:	                lea 32(sp),sp
   1076a:	                rts

0001076c <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   1076c:	                lea -96(sp),sp
   10770:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   10774:	                move.l 116(sp),-(sp)
   10778:	                pea 167b2 <main_sludge.c.2f5c5368+0xcd8>
   1077e:	                jsr fedc <joinStrings>
   10784:	                addq.l #8,sp
   10786:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   1078a:	            /-- bne.s 10792 <getSavedGamesStack+0x26>
   1078c:	            |   clr.w d0
   1078e:	/-----------|-- bra.w 109a6 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   10792:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   10796:	|               move.l #92084,98(sp)
   1079e:	|               moveq #-2,d0
   107a0:	|               move.l d0,94(sp)
   107a4:	|               move.l 19c54 <DOSBase>,d0
   107aa:	|               movea.l d0,a6
   107ac:	|               move.l 98(sp),d1
   107b0:	|               move.l 94(sp),d2
   107b4:	|               jsr -84(a6)
   107b8:	|               move.l d0,90(sp)
   107bc:	|               move.l 90(sp),d0
   107c0:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   107c4:	|           /-- bne.s 107cc <getSavedGamesStack+0x60>
   107c6:	|           |   clr.w d0
   107c8:	+-----------|-- bra.w 109a6 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   107cc:	|           \-> move.l #260,82(sp)
   107d4:	|               move.l #65536,78(sp)
   107dc:	|               move.l 19c4c <SysBase>,d0
   107e2:	|               movea.l d0,a6
   107e4:	|               move.l 82(sp),d0
   107e8:	|               move.l 78(sp),d1
   107ec:	|               jsr -684(a6)
   107f0:	|               move.l d0,74(sp)
   107f4:	|               move.l 74(sp),d0
   107f8:	|               move.l d0,70(sp)
	if (!fib) {
   107fc:	|           /-- bne.s 1081a <getSavedGamesStack+0xae>
		UnLock(dirLock);
   107fe:	|           |   move.l 86(sp),22(sp)
   10804:	|           |   move.l 19c54 <DOSBase>,d0
   1080a:	|           |   movea.l d0,a6
   1080c:	|           |   move.l 22(sp),d1
   10810:	|           |   jsr -90(a6)
		return FALSE;
   10814:	|           |   clr.w d0
   10816:	+-----------|-- bra.w 109a6 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   1081a:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1081e:	|               move.l 86(sp),66(sp)
   10824:	|               move.l 70(sp),62(sp)
   1082a:	|               move.l 19c54 <DOSBase>,d0
   10830:	|               movea.l d0,a6
   10832:	|               move.l 66(sp),d1
   10836:	|               move.l 62(sp),d2
   1083a:	|               jsr -102(a6)
   1083e:	|               move.l d0,58(sp)
   10842:	|               move.l 58(sp),d0
   10846:	|  /----------- beq.w 1095a <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   1084a:	|  |        /-- bra.w 10926 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   1084e:	|  |  /-----|-> move.l 70(sp),d2
   10852:	|  |  |     |   addq.l #8,d2
   10854:	|  |  |     |   move.l 70(sp),d0
   10858:	|  |  |     |   addq.l #8,d0
   1085a:	|  |  |     |   move.l d0,-(sp)
   1085c:	|  |  |     |   jsr fe9c <strlen>
   10862:	|  |  |     |   addq.l #4,sp
   10864:	|  |  |     |   move.l d0,d3
   10866:	|  |  |     |   move.l 116(sp),-(sp)
   1086a:	|  |  |     |   jsr fe9c <strlen>
   10870:	|  |  |     |   addq.l #4,sp
   10872:	|  |  |     |   move.l d3,d1
   10874:	|  |  |     |   sub.l d0,d1
   10876:	|  |  |     |   move.l d2,d0
   10878:	|  |  |     |   add.l d1,d0
   1087a:	|  |  |     |   move.l 116(sp),-(sp)
   1087e:	|  |  |     |   move.l d0,-(sp)
   10880:	|  |  |     |   jsr fe5c <strcmp>
   10886:	|  |  |     |   addq.l #8,sp
   10888:	|  |  |     |   tst.l d0
   1088a:	|  |  |     +-- bne.w 10926 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   1088e:	|  |  |     |   move.l 70(sp),d0
   10892:	|  |  |     |   addq.l #8,d0
   10894:	|  |  |     |   move.l d0,-(sp)
   10896:	|  |  |     |   jsr fe9c <strlen>
   1089c:	|  |  |     |   addq.l #4,sp
   1089e:	|  |  |     |   move.l d0,d2
   108a0:	|  |  |     |   move.l 116(sp),-(sp)
   108a4:	|  |  |     |   jsr fe9c <strlen>
   108aa:	|  |  |     |   addq.l #4,sp
   108ac:	|  |  |     |   move.l d0,d1
   108ae:	|  |  |     |   move.l d2,d0
   108b0:	|  |  |     |   sub.l d1,d0
   108b2:	|  |  |     |   movea.l 70(sp),a0
   108b6:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   108ba:	|  |  |     |   move.l 70(sp),d0
   108be:	|  |  |     |   addq.l #8,d0
   108c0:	|  |  |     |   move.l d0,-(sp)
   108c2:	|  |  |     |   jsr 118 <decodeFilename>
   108c8:	|  |  |     |   addq.l #4,sp
   108ca:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   108ce:	|  |  |     |   move.l 42(sp),-(sp)
   108d2:	|  |  |     |   lea 18(sp),a0
   108d6:	|  |  |     |   move.l a0,-(sp)
   108d8:	|  |  |     |   jsr 10bd2 <makeTextVar>
   108de:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   108e0:	|  |  |     |   move.l 42(sp),38(sp)
   108e6:	|  |  |     |   move.l 19c4c <SysBase>,d0
   108ec:	|  |  |     |   movea.l d0,a6
   108ee:	|  |  |     |   movea.l 38(sp),a1
   108f2:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   108f6:	|  |  |     |   move.l 112(sp),d0
   108fa:	|  |  |     |   move.l d0,-(sp)
   108fc:	|  |  |     |   lea 18(sp),a0
   10900:	|  |  |     |   move.l a0,-(sp)
   10902:	|  |  |     |   jsr 101ec <addVarToStack>
   10908:	|  |  |     |   addq.l #8,sp
   1090a:	|  |  |     |   tst.w d0
   1090c:	|  |  |  /--|-- beq.s 1095e <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1090e:	|  |  |  |  |   movea.l 112(sp),a0
   10912:	|  |  |  |  |   move.l 4(a0),d0
   10916:	|  |  |  |  +-- bne.s 10926 <getSavedGamesStack+0x1ba>
   10918:	|  |  |  |  |   movea.l 112(sp),a0
   1091c:	|  |  |  |  |   move.l (a0),d0
   1091e:	|  |  |  |  |   movea.l 112(sp),a0
   10922:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   10926:	|  |  |  |  \-> move.l 86(sp),54(sp)
   1092c:	|  |  |  |      move.l 70(sp),50(sp)
   10932:	|  |  |  |      move.l 19c54 <DOSBase>,d0
   10938:	|  |  |  |      movea.l d0,a6
   1093a:	|  |  |  |      move.l 54(sp),d1
   1093e:	|  |  |  |      move.l 50(sp),d2
   10942:	|  |  |  |      jsr -108(a6)
   10946:	|  |  |  |      move.l d0,46(sp)
   1094a:	|  |  |  |      move.l 46(sp),d0
   1094e:	|  |  \--|----- bne.w 1084e <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   10952:	|  |     |      move.w #1,106(sp)
   10958:	|  |     |  /-- bra.s 10960 <getSavedGamesStack+0x1f4>
	}

cleanup:
   1095a:	|  \-----|--|-> nop
   1095c:	|        |  +-- bra.s 10960 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1095e:	|        \--|-> nop
	FreeVec(fib);
   10960:	|           \-> move.l 70(sp),34(sp)
   10966:	|               move.l 19c4c <SysBase>,d0
   1096c:	|               movea.l d0,a6
   1096e:	|               movea.l 34(sp),a1
   10972:	|               jsr -690(a6)
	UnLock(dirLock);
   10976:	|               move.l 86(sp),30(sp)
   1097c:	|               move.l 19c54 <DOSBase>,d0
   10982:	|               movea.l d0,a6
   10984:	|               move.l 30(sp),d1
   10988:	|               jsr -90(a6)
	FreeVec(pattern);
   1098c:	|               move.l 102(sp),26(sp)
   10992:	|               move.l 19c4c <SysBase>,d0
   10998:	|               movea.l d0,a6
   1099a:	|               movea.l 26(sp),a1
   1099e:	|               jsr -690(a6)
	return result;
   109a2:	|               move.w 106(sp),d0
}
   109a6:	\-------------> movem.l (sp)+,d2-d3/a6
   109aa:	                lea 96(sp),sp
   109ae:	                rts

000109b0 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   109b0:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   109b2:	       movea.l 20(sp),a0
   109b6:	       move.l (a0),d0
   109b8:	       cmp.l 16(sp),d0
   109bc:	/----- beq.s 10a20 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   109be:	|      move.l 16(sp),d0
   109c2:	|      add.l d0,d0
   109c4:	|      movea.l d0,a1
   109c6:	|      adda.l d0,a1
   109c8:	|      lea 18688 <typeName>,a0
   109ce:	|      move.l (0,a1,a0.l),d0
   109d2:	|      move.l d0,-(sp)
   109d4:	|      pea 167b6 <main_sludge.c.2f5c5368+0xcdc>
   109da:	|      jsr fedc <joinStrings>
   109e0:	|      addq.l #8,sp
   109e2:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   109e6:	|      movea.l 20(sp),a0
   109ea:	|      move.l (a0),d0
   109ec:	|      add.l d0,d0
   109ee:	|      movea.l d0,a1
   109f0:	|      adda.l d0,a1
   109f2:	|      lea 18688 <typeName>,a0
   109f8:	|      move.l (0,a1,a0.l),d0
   109fc:	|      move.l d0,-(sp)
   109fe:	|      pea 167f8 <main_sludge.c.2f5c5368+0xd1e>
   10a04:	|      jsr fedc <joinStrings>
   10a0a:	|      addq.l #8,sp
   10a0c:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   10a0e:	|      move.l (sp),-(sp)
   10a10:	|      move.l 8(sp),-(sp)
   10a14:	|      jsr 12a04 <KPrintF>
   10a1a:	|      addq.l #8,sp

		return FALSE;
   10a1c:	|      clr.w d0
   10a1e:	|  /-- bra.s 10a30 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   10a20:	\--|-> movea.l 20(sp),a0
   10a24:	   |   move.l 4(a0),d0
   10a28:	   |   movea.l 12(sp),a0
   10a2c:	   |   move.l d0,(a0)
	return TRUE;
   10a2e:	   |   moveq #1,d0
}
   10a30:	   \-> addq.l #8,sp
   10a32:	       rts

00010a34 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   10a34:	move.l 8(sp),-(sp)
   10a38:	jsr 436e <getNumberedString>
   10a3e:	addq.l #4,sp
   10a40:	move.l d0,-(sp)
   10a42:	move.l 8(sp),-(sp)
   10a46:	jsr 10bd2 <makeTextVar>
   10a4c:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   10a4e:	movea.l 4(sp),a0
   10a52:	move.l 4(a0),d0
   10a56:	sne d0
   10a58:	neg.b d0
   10a5a:	move.b d0,d0
   10a5c:	andi.w #255,d0
}
   10a60:	rts

00010a62 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   10a62:	          subq.l #8,sp
    int size = stackSize(stacky);
   10a64:	          move.l 16(sp),-(sp)
   10a68:	          jsr 11310 <stackSize>
   10a6e:	          addq.l #4,sp
   10a70:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   10a74:	          move.l 4(sp),-(sp)
   10a78:	          move.l 16(sp),-(sp)
   10a7c:	          jsr 10acc <makeFastArraySize>
   10a82:	          addq.l #8,sp
   10a84:	          tst.w d0
   10a86:	      /-- bne.s 10a8c <makeFastArrayFromStack+0x2a>
   10a88:	      |   clr.w d0
   10a8a:	/-----|-- bra.s 10ac8 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   10a8c:	|     \-> movea.l 16(sp),a0
   10a90:	|         move.l (a0),(sp)
    size = 0;
   10a92:	|         clr.l 4(sp)
    while (allV) {
   10a96:	|     /-- bra.s 10ac2 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   10a98:	|  /--|-> movea.l 12(sp),a0
   10a9c:	|  |  |   movea.l 4(a0),a0
   10aa0:	|  |  |   move.l (a0),d1
   10aa2:	|  |  |   move.l 4(sp),d0
   10aa6:	|  |  |   lsl.l #3,d0
   10aa8:	|  |  |   add.l d0,d1
   10aaa:	|  |  |   move.l (sp),d0
   10aac:	|  |  |   move.l d1,-(sp)
   10aae:	|  |  |   move.l d0,-(sp)
   10ab0:	|  |  |   jsr 10d4e <copyMain>
   10ab6:	|  |  |   addq.l #8,sp
        size++;
   10ab8:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   10abc:	|  |  |   movea.l (sp),a0
   10abe:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   10ac2:	|  |  \-> tst.l (sp)
   10ac4:	|  \----- bne.s 10a98 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   10ac6:	|         moveq #1,d0
}
   10ac8:	\-------> addq.l #8,sp
   10aca:	          rts

00010acc <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   10acc:	          lea -28(sp),sp
   10ad0:	          move.l a6,-(sp)
    if (size < 0) {
   10ad2:	          tst.l 40(sp)
   10ad6:	      /-- bge.s 10aec <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   10ad8:	      |   pea 1683d <main_sludge.c.2f5c5368+0xd63>
   10ade:	      |   jsr 12a04 <KPrintF>
   10ae4:	      |   addq.l #4,sp
		return FALSE;
   10ae6:	      |   clr.w d0
   10ae8:	/-----|-- bra.w 10bca <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   10aec:	|     \-> move.l 36(sp),-(sp)
   10af0:	|         jsr 10bfe <unlinkVar>
   10af6:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   10af8:	|         movea.l 36(sp),a0
   10afc:	|         moveq #10,d0
   10afe:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   10b00:	|         moveq #12,d0
   10b02:	|         move.l d0,24(sp)
   10b06:	|         clr.l 20(sp)
   10b0a:	|         move.l 19c4c <SysBase>,d0
   10b10:	|         movea.l d0,a6
   10b12:	|         move.l 24(sp),d0
   10b16:	|         move.l 20(sp),d1
   10b1a:	|         jsr -684(a6)
   10b1e:	|         move.l d0,16(sp)
   10b22:	|         move.l 16(sp),d0
   10b26:	|         movea.l 36(sp),a0
   10b2a:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   10b2e:	|         movea.l 36(sp),a0
   10b32:	|         move.l 4(a0),d0
   10b36:	|     /-- bne.s 10b3e <makeFastArraySize+0x72>
   10b38:	|     |   clr.w d0
   10b3a:	+-----|-- bra.w 10bca <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   10b3e:	|     \-> move.l 40(sp),d0
   10b42:	|         lsl.l #3,d0
   10b44:	|         move.l d0,12(sp)
   10b48:	|         clr.l 8(sp)
   10b4c:	|         move.l 19c4c <SysBase>,d0
   10b52:	|         movea.l d0,a6
   10b54:	|         move.l 12(sp),d0
   10b58:	|         move.l 8(sp),d1
   10b5c:	|         jsr -684(a6)
   10b60:	|         move.l d0,4(sp)
   10b64:	|         move.l 4(sp),d0
   10b68:	|         movea.l 36(sp),a0
   10b6c:	|         movea.l 4(a0),a0
   10b70:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   10b72:	|         movea.l 36(sp),a0
   10b76:	|         movea.l 4(a0),a0
   10b7a:	|         move.l (a0),d0
   10b7c:	|     /-- bne.s 10b82 <makeFastArraySize+0xb6>
   10b7e:	|     |   clr.w d0
   10b80:	+-----|-- bra.s 10bca <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   10b82:	|     \-> clr.l 28(sp)
   10b86:	|     /-- bra.s 10ba2 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   10b88:	|  /--|-> movea.l 36(sp),a0
   10b8c:	|  |  |   movea.l 4(a0),a0
   10b90:	|  |  |   move.l (a0),d1
   10b92:	|  |  |   move.l 28(sp),d0
   10b96:	|  |  |   lsl.l #3,d0
   10b98:	|  |  |   movea.l d1,a0
   10b9a:	|  |  |   adda.l d0,a0
   10b9c:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   10b9e:	|  |  |   addq.l #1,28(sp)
   10ba2:	|  |  \-> move.l 28(sp),d0
   10ba6:	|  |      cmp.l 40(sp),d0
   10baa:	|  \----- blt.s 10b88 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   10bac:	|         movea.l 36(sp),a0
   10bb0:	|         movea.l 4(a0),a0
   10bb4:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   10bba:	|         movea.l 36(sp),a0
   10bbe:	|         movea.l 4(a0),a0
   10bc2:	|         moveq #1,d0
   10bc4:	|         move.l d0,8(a0)
    return TRUE;
   10bc8:	|         moveq #1,d0
}
   10bca:	\-------> movea.l (sp)+,a6
   10bcc:	          lea 28(sp),sp
   10bd0:	          rts

00010bd2 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   10bd2:	move.l 4(sp),-(sp)
   10bd6:	jsr 10bfe <unlinkVar>
   10bdc:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   10bde:	movea.l 4(sp),a0
   10be2:	moveq #3,d0
   10be4:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   10be6:	move.l 8(sp),-(sp)
   10bea:	jsr b8 <copyString>
   10bf0:	addq.l #4,sp
   10bf2:	movea.l 4(sp),a0
   10bf6:	move.l d0,4(a0)
}
   10bfa:	nop
   10bfc:	rts

00010bfe <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   10bfe:	                      lea -16(sp),sp
   10c02:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   10c04:	                      movea.l 24(sp),a0
   10c08:	                      move.l (a0),d0
   10c0a:	                      moveq #10,d1
   10c0c:	                      cmp.l d0,d1
   10c0e:	            /-------- beq.w 10cc6 <unlinkVar+0xc8>
   10c12:	            |         moveq #10,d1
   10c14:	            |         cmp.l d0,d1
   10c16:	/-----------|-------- bcs.w 10d3a <unlinkVar+0x13c>
   10c1a:	|           |         moveq #8,d1
   10c1c:	|           |         cmp.l d0,d1
   10c1e:	|  /--------|-------- beq.w 10d26 <unlinkVar+0x128>
   10c22:	|  |        |         moveq #8,d1
   10c24:	|  |        |         cmp.l d0,d1
   10c26:	+--|--------|-------- bcs.w 10d3a <unlinkVar+0x13c>
   10c2a:	|  |        |         moveq #3,d1
   10c2c:	|  |        |         cmp.l d0,d1
   10c2e:	|  |        |     /-- beq.s 10c3a <unlinkVar+0x3c>
   10c30:	|  |        |     |   moveq #6,d1
   10c32:	|  |        |     |   cmp.l d0,d1
   10c34:	|  |        |  /--|-- beq.s 10c60 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   10c36:	+--|--------|--|--|-- bra.w 10d3a <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   10c3a:	|  |        |  |  \-> movea.l 24(sp),a0
   10c3e:	|  |        |  |      move.l 4(a0),4(sp)
   10c44:	|  |        |  |      move.l 19c4c <SysBase>,d0
   10c4a:	|  |        |  |      movea.l d0,a6
   10c4c:	|  |        |  |      movea.l 4(sp),a1
   10c50:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   10c54:	|  |        |  |      movea.l 24(sp),a0
   10c58:	|  |        |  |      clr.l 4(a0)
		break;
   10c5c:	|  |  /-----|--|----- bra.w 10d44 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   10c60:	|  |  |     |  \----> movea.l 24(sp),a0
   10c64:	|  |  |     |         movea.l 4(a0),a0
   10c68:	|  |  |     |         move.l 8(a0),d0
   10c6c:	|  |  |     |         subq.l #1,d0
   10c6e:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   10c72:	|  |  |     |         movea.l 24(sp),a0
   10c76:	|  |  |     |         movea.l 4(a0),a0
   10c7a:	|  |  |     |         move.l 8(a0),d0
   10c7e:	|  |  |  /--|-------- bgt.w 10d3e <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   10c82:	|  |  |  |  |     /-- bra.s 10c96 <unlinkVar+0x98>
   10c84:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   10c88:	|  |  |  |  |  |  |   move.l 4(a0),d0
   10c8c:	|  |  |  |  |  |  |   move.l d0,-(sp)
   10c8e:	|  |  |  |  |  |  |   jsr 11334 <trimStack>
   10c94:	|  |  |  |  |  |  |   addq.l #4,sp
   10c96:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   10c9a:	|  |  |  |  |  |      movea.l 4(a0),a0
   10c9e:	|  |  |  |  |  |      move.l (a0),d0
   10ca0:	|  |  |  |  |  \----- bne.s 10c84 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   10ca2:	|  |  |  |  |         movea.l 24(sp),a0
   10ca6:	|  |  |  |  |         move.l 4(a0),8(sp)
   10cac:	|  |  |  |  |         move.l 19c4c <SysBase>,d0
   10cb2:	|  |  |  |  |         movea.l d0,a6
   10cb4:	|  |  |  |  |         movea.l 8(sp),a1
   10cb8:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   10cbc:	|  |  |  |  |         movea.l 24(sp),a0
   10cc0:	|  |  |  |  |         clr.l 4(a0)
		break;
   10cc4:	|  |  |  +--|-------- bra.s 10d3e <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   10cc6:	|  |  |  |  \-------> movea.l 24(sp),a0
   10cca:	|  |  |  |            movea.l 4(a0),a0
   10cce:	|  |  |  |            move.l 8(a0),d0
   10cd2:	|  |  |  |            subq.l #1,d0
   10cd4:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   10cd8:	|  |  |  |            movea.l 24(sp),a0
   10cdc:	|  |  |  |            movea.l 4(a0),a0
   10ce0:	|  |  |  |            move.l 8(a0),d0
   10ce4:	|  |  |  |        /-- bgt.s 10d42 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   10ce6:	|  |  |  |        |   movea.l 24(sp),a0
   10cea:	|  |  |  |        |   movea.l 4(a0),a0
   10cee:	|  |  |  |        |   move.l (a0),16(sp)
   10cf2:	|  |  |  |        |   move.l 19c4c <SysBase>,d0
   10cf8:	|  |  |  |        |   movea.l d0,a6
   10cfa:	|  |  |  |        |   movea.l 16(sp),a1
   10cfe:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   10d02:	|  |  |  |        |   movea.l 24(sp),a0
   10d06:	|  |  |  |        |   move.l 4(a0),12(sp)
   10d0c:	|  |  |  |        |   move.l 19c4c <SysBase>,d0
   10d12:	|  |  |  |        |   movea.l d0,a6
   10d14:	|  |  |  |        |   movea.l 12(sp),a1
   10d18:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   10d1c:	|  |  |  |        |   movea.l 24(sp),a0
   10d20:	|  |  |  |        |   clr.l 4(a0)
		break;
   10d24:	|  |  |  |        +-- bra.s 10d42 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   10d26:	|  \--|--|--------|-> movea.l 24(sp),a0
   10d2a:	|     |  |        |   move.l 4(a0),d0
   10d2e:	|     |  |        |   move.l d0,-(sp)
   10d30:	|     |  |        |   jsr 64da <deleteAnim>
   10d36:	|     |  |        |   addq.l #4,sp
		break;
   10d38:	|     +--|--------|-- bra.s 10d44 <unlinkVar+0x146>
		break;
   10d3a:	\-----|--|--------|-> nop
   10d3c:	      +--|--------|-- bra.s 10d44 <unlinkVar+0x146>
		break;
   10d3e:	      |  \--------|-> nop
   10d40:	      +-----------|-- bra.s 10d44 <unlinkVar+0x146>
		break;
   10d42:	      |           \-> nop
	}
}
   10d44:	      \-------------> nop
   10d46:	                      movea.l (sp)+,a6
   10d48:	                      lea 16(sp),sp
   10d4c:	                      rts

00010d4e <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   10d4e:	       movea.l 4(sp),a0
   10d52:	       move.l (a0),d0
   10d54:	       movea.l 8(sp),a0
   10d58:	       move.l d0,(a0)
	switch (to->varType) {
   10d5a:	       movea.l 8(sp),a0
   10d5e:	       move.l (a0),d0
   10d60:	       moveq #10,d1
   10d62:	       cmp.l d0,d1
   10d64:	/----- bcs.w 10e56 <copyMain+0x108>
   10d68:	|      add.l d0,d0
   10d6a:	|      movea.l d0,a0
   10d6c:	|      adda.l #68984,a0
   10d72:	|      move.w (a0),d0
   10d74:	|      jmp (10d78 <copyMain+0x2a>,pc,d0.w)
   10d78:	|      .short 0x00da
   10d7a:	|      ori.b #22,(a6)
   10d7e:	|      ori.w #22,(a4)
   10d82:	|      ori.b #-126,(a6)
   10d86:	|      ori.b #-68,(a6)
   10d8a:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   10d92:	|      move.l 4(a0),d0
   10d96:	|      movea.l 8(sp),a0
   10d9a:	|      move.l d0,4(a0)
		return TRUE;
   10d9e:	|      moveq #1,d0
   10da0:	|  /-- bra.w 10e68 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   10da4:	|  |   movea.l 4(sp),a0
   10da8:	|  |   move.l 4(a0),d0
   10dac:	|  |   movea.l 8(sp),a0
   10db0:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   10db4:	|  |   movea.l 8(sp),a0
   10db8:	|  |   movea.l 4(a0),a0
   10dbc:	|  |   move.l 8(a0),d0
   10dc0:	|  |   addq.l #1,d0
   10dc2:	|  |   move.l d0,8(a0)
		return TRUE;
   10dc6:	|  |   moveq #1,d0
   10dc8:	|  +-- bra.w 10e68 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   10dcc:	|  |   movea.l 4(sp),a0
   10dd0:	|  |   move.l 4(a0),d0
   10dd4:	|  |   move.l d0,-(sp)
   10dd6:	|  |   jsr b8 <copyString>
   10ddc:	|  |   addq.l #4,sp
   10dde:	|  |   movea.l 8(sp),a0
   10de2:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   10de6:	|  |   movea.l 8(sp),a0
   10dea:	|  |   move.l 4(a0),d0
   10dee:	|  |   sne d0
   10df0:	|  |   neg.b d0
   10df2:	|  |   move.b d0,d0
   10df4:	|  |   andi.w #255,d0
   10df8:	|  +-- bra.s 10e68 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   10dfa:	|  |   movea.l 4(sp),a0
   10dfe:	|  |   move.l 4(a0),d0
   10e02:	|  |   movea.l 8(sp),a0
   10e06:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   10e0a:	|  |   movea.l 8(sp),a0
   10e0e:	|  |   movea.l 4(a0),a0
   10e12:	|  |   move.l 8(a0),d0
   10e16:	|  |   addq.l #1,d0
   10e18:	|  |   move.l d0,8(a0)
		return TRUE;
   10e1c:	|  |   moveq #1,d0
   10e1e:	|  +-- bra.s 10e68 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   10e20:	|  |   movea.l 4(sp),a0
   10e24:	|  |   move.l 4(a0),d0
   10e28:	|  |   movea.l 8(sp),a0
   10e2c:	|  |   move.l d0,4(a0)
		return TRUE;
   10e30:	|  |   moveq #1,d0
   10e32:	|  +-- bra.s 10e68 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   10e34:	|  |   movea.l 4(sp),a0
   10e38:	|  |   move.l 4(a0),d0
   10e3c:	|  |   move.l d0,-(sp)
   10e3e:	|  |   jsr 611e <copyAnim>
   10e44:	|  |   addq.l #4,sp
   10e46:	|  |   movea.l 8(sp),a0
   10e4a:	|  |   move.l d0,4(a0)
		return TRUE;
   10e4e:	|  |   moveq #1,d0
   10e50:	|  +-- bra.s 10e68 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   10e52:	|  |   moveq #1,d0
   10e54:	|  +-- bra.s 10e68 <copyMain+0x11a>

		default:
		break;
   10e56:	\--|-> nop
	}
	KPrintF("Unknown value type");
   10e58:	   |   pea 1688e <main_sludge.c.2f5c5368+0xdb4>
   10e5e:	   |   jsr 12a04 <KPrintF>
   10e64:	   |   addq.l #4,sp
	return FALSE;
   10e66:	   |   clr.w d0
}
   10e68:	   \-> rts

00010e6a <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   10e6a:	move.l 8(sp),-(sp)
   10e6e:	jsr 10bfe <unlinkVar>
   10e74:	addq.l #4,sp
	return copyMain(from, to);
   10e76:	move.l 8(sp),-(sp)
   10e7a:	move.l 8(sp),-(sp)
   10e7e:	jsr 10d4e <copyMain>
   10e84:	addq.l #8,sp
}
   10e86:	rts

00010e88 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   10e88:	       movea.l 4(sp),a0
   10e8c:	       move.l (a0),d0
   10e8e:	       moveq #8,d1
   10e90:	       cmp.l d0,d1
   10e92:	   /-- bne.s 10ea8 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   10e94:	   |   movea.l 4(sp),a0
   10e98:	   |   move.l 4(a0),d0
   10e9c:	   |   move.l d0,-(sp)
   10e9e:	   |   jsr 611e <copyAnim>
   10ea4:	   |   addq.l #4,sp
   10ea6:	/--|-- bra.s 10eee <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   10ea8:	|  \-> movea.l 4(sp),a0
   10eac:	|      move.l (a0),d0
   10eae:	|      moveq #1,d1
   10eb0:	|      cmp.l d0,d1
   10eb2:	|  /-- bne.s 10ec6 <getAnimationFromVar+0x3e>
   10eb4:	|  |   movea.l 4(sp),a0
   10eb8:	|  |   move.l 4(a0),d0
   10ebc:	|  +-- bne.s 10ec6 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   10ebe:	|  |   jsr 72c6 <makeNullAnim>
   10ec4:	+--|-- bra.s 10eee <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   10ec6:	|  \-> movea.l 4(sp),a0
   10eca:	|      move.l (a0),d0
   10ecc:	|      add.l d0,d0
   10ece:	|      movea.l d0,a1
   10ed0:	|      adda.l d0,a1
   10ed2:	|      lea 18688 <typeName>,a0
   10ed8:	|      move.l (0,a1,a0.l),d0
   10edc:	|      move.l d0,-(sp)
   10ede:	|      pea 1677a <main_sludge.c.2f5c5368+0xca0>
   10ee4:	|      jsr 12a04 <KPrintF>
   10eea:	|      addq.l #8,sp
	return NULL;
   10eec:	|      moveq #0,d0
}
   10eee:	\----> rts

00010ef0 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   10ef0:	       movea.l 4(sp),a0
   10ef4:	       move.l (a0),d0
   10ef6:	       moveq #10,d1
   10ef8:	       cmp.l d0,d1
   10efa:	/----- bcs.w 10f80 <getBoolean+0x90>
   10efe:	|      add.l d0,d0
   10f00:	|      movea.l d0,a0
   10f02:	|      adda.l #69390,a0
   10f08:	|      move.w (a0),d0
   10f0a:	|      jmp (10f0e <getBoolean+0x1e>,pc,d0.w)
   10f0e:	|      ori.b #26,(a6)
   10f12:	|      ori.w #68,(114,a2,d0.w)
   10f18:	|      ori.w #46,(114,a2,d0.w)
   10f1e:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   10f24:	|      clr.w d0
   10f26:	|  /-- bra.s 10f84 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   10f28:	|  |   movea.l 4(sp),a0
   10f2c:	|  |   move.l 4(a0),d0
   10f30:	|  |   sne d0
   10f32:	|  |   neg.b d0
   10f34:	|  |   move.b d0,d0
   10f36:	|  |   andi.w #255,d0
   10f3a:	|  +-- bra.s 10f84 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   10f3c:	|  |   movea.l 4(sp),a0
   10f40:	|  |   movea.l 4(a0),a0
   10f44:	|  |   move.l (a0),d0
   10f46:	|  |   sne d0
   10f48:	|  |   neg.b d0
   10f4a:	|  |   move.b d0,d0
   10f4c:	|  |   andi.w #255,d0
   10f50:	|  +-- bra.s 10f84 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   10f52:	|  |   movea.l 4(sp),a0
   10f56:	|  |   movea.l 4(a0),a0
   10f5a:	|  |   move.b (a0),d0
   10f5c:	|  |   sne d0
   10f5e:	|  |   neg.b d0
   10f60:	|  |   move.b d0,d0
   10f62:	|  |   andi.w #255,d0
   10f66:	|  +-- bra.s 10f84 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   10f68:	|  |   movea.l 4(sp),a0
   10f6c:	|  |   movea.l 4(a0),a0
   10f70:	|  |   move.l 4(a0),d0
   10f74:	|  |   sne d0
   10f76:	|  |   neg.b d0
   10f78:	|  |   move.b d0,d0
   10f7a:	|  |   andi.w #255,d0
   10f7e:	|  +-- bra.s 10f84 <getBoolean+0x94>

		default:
		break;
   10f80:	\--|-> nop
	}
	return TRUE;
   10f82:	   |   moveq #1,d0
}
   10f84:	   \-> rts

00010f86 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   10f86:	      /----------> lea -76(sp),sp
   10f8a:	      |            move.l a6,-(sp)
	switch (from->varType) {
   10f8c:	      |            movea.l 84(sp),a0
   10f90:	      |            move.l (a0),d0
   10f92:	      |            moveq #10,d1
   10f94:	      |            cmp.l d0,d1
   10f96:	/-----|----------- bcs.w 11234 <getTextFromAnyVar+0x2ae>
   10f9a:	|     |            add.l d0,d0
   10f9c:	|     |            movea.l d0,a0
   10f9e:	|     |            adda.l #69546,a0
   10fa4:	|     |            move.w (a0),d0
   10fa6:	|     |            jmp (10faa <getTextFromAnyVar+0x24>,pc,d0.w)
   10faa:	|     |            .short 0x028a
   10fac:	|     |            bset d0,(a0)+
   10fae:	|     |            .short 0x028a
   10fb0:	|     |            ori.b #-118,(a6)
   10fb4:	|     |            andi.b #8,ccr
   10fb8:	|     |            andi.w #650,-(a0)
   10fbc:	|     |            .short 0x028a
   10fbe:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   10fc4:	|     |            move.l 4(a0),d0
   10fc8:	|     |            move.l d0,-(sp)
   10fca:	|     |            jsr b8 <copyString>
   10fd0:	|     |            addq.l #4,sp
   10fd2:	|  /--|----------- bra.w 11256 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   10fd6:	|  |  |            pea 168a1 <main_sludge.c.2f5c5368+0xdc7>
   10fdc:	|  |  |            jsr b8 <copyString>
   10fe2:	|  |  |            addq.l #4,sp
   10fe4:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   10fe8:	|  |  |            clr.l 72(sp)
   10fec:	|  |  |     /----- bra.w 11096 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   10ff0:	|  |  |  /--|----> pea 168a7 <main_sludge.c.2f5c5368+0xdcd>
   10ff6:	|  |  |  |  |      move.l 80(sp),-(sp)
   10ffa:	|  |  |  |  |      jsr fedc <joinStrings>
   11000:	|  |  |  |  |      addq.l #8,sp
   11002:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   11006:	|  |  |  |  |  /-- bne.s 1100e <getTextFromAnyVar+0x88>
   11008:	|  |  |  |  |  |   moveq #0,d0
   1100a:	|  +--|--|--|--|-- bra.w 11256 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1100e:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   11014:	|  |  |  |  |      move.l 19c4c <SysBase>,d0
   1101a:	|  |  |  |  |      movea.l d0,a6
   1101c:	|  |  |  |  |      movea.l 56(sp),a1
   11020:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   11024:	|  |  |  |  |      movea.l 84(sp),a0
   11028:	|  |  |  |  |      movea.l 4(a0),a0
   1102c:	|  |  |  |  |      move.l (a0),d1
   1102e:	|  |  |  |  |      move.l 72(sp),d0
   11032:	|  |  |  |  |      lsl.l #3,d0
   11034:	|  |  |  |  |      add.l d1,d0
   11036:	|  |  |  |  |      move.l d0,-(sp)
   11038:	|  |  +--|--|----- jsr 10f86 <getTextFromAnyVar>(pc)
   1103c:	|  |  |  |  |      addq.l #4,sp
   1103e:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   11042:	|  |  |  |  |      move.l 52(sp),-(sp)
   11046:	|  |  |  |  |      move.l 64(sp),-(sp)
   1104a:	|  |  |  |  |      jsr fedc <joinStrings>
   11050:	|  |  |  |  |      addq.l #8,sp
   11052:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   11056:	|  |  |  |  |  /-- bne.s 1105e <getTextFromAnyVar+0xd8>
   11058:	|  |  |  |  |  |   moveq #0,d0
   1105a:	|  +--|--|--|--|-- bra.w 11256 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1105e:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   11064:	|  |  |  |  |      move.l 19c4c <SysBase>,d0
   1106a:	|  |  |  |  |      movea.l d0,a6
   1106c:	|  |  |  |  |      movea.l 48(sp),a1
   11070:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   11074:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   11078:	|  |  |  |  |      move.l 60(sp),44(sp)
   1107e:	|  |  |  |  |      move.l 19c4c <SysBase>,d0
   11084:	|  |  |  |  |      movea.l d0,a6
   11086:	|  |  |  |  |      movea.l 44(sp),a1
   1108a:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   1108e:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   11092:	|  |  |  |  |      addq.l #1,72(sp)
   11096:	|  |  |  |  \----> movea.l 84(sp),a0
   1109a:	|  |  |  |         movea.l 4(a0),a0
   1109e:	|  |  |  |         move.l 4(a0),d0
   110a2:	|  |  |  |         cmp.l 72(sp),d0
   110a6:	|  |  |  \-------- bgt.w 10ff0 <getTextFromAnyVar+0x6a>
			}
			return builder;
   110aa:	|  |  |            move.l 76(sp),d0
   110ae:	|  +--|----------- bra.w 11256 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   110b2:	|  |  |            pea 168a9 <main_sludge.c.2f5c5368+0xdcf>
   110b8:	|  |  |            jsr b8 <copyString>
   110be:	|  |  |            addq.l #4,sp
   110c0:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   110c4:	|  |  |            movea.l 84(sp),a0
   110c8:	|  |  |            movea.l 4(a0),a0
   110cc:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   110d0:	|  |  |     /----- bra.w 11172 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   110d4:	|  |  |  /--|----> pea 168a7 <main_sludge.c.2f5c5368+0xdcd>
   110da:	|  |  |  |  |      move.l 72(sp),-(sp)
   110de:	|  |  |  |  |      jsr fedc <joinStrings>
   110e4:	|  |  |  |  |      addq.l #8,sp
   110e6:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   110ea:	|  |  |  |  |  /-- bne.s 110f2 <getTextFromAnyVar+0x16c>
   110ec:	|  |  |  |  |  |   moveq #0,d0
   110ee:	|  +--|--|--|--|-- bra.w 11256 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   110f2:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   110f8:	|  |  |  |  |      move.l 19c4c <SysBase>,d0
   110fe:	|  |  |  |  |      movea.l d0,a6
   11100:	|  |  |  |  |      movea.l 32(sp),a1
   11104:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   11108:	|  |  |  |  |      move.l 64(sp),d0
   1110c:	|  |  |  |  |      move.l d0,-(sp)
   1110e:	|  |  \--|--|----- jsr 10f86 <getTextFromAnyVar>(pc)
   11112:	|  |     |  |      addq.l #4,sp
   11114:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   11118:	|  |     |  |      move.l 28(sp),-(sp)
   1111c:	|  |     |  |      move.l 40(sp),-(sp)
   11120:	|  |     |  |      jsr fedc <joinStrings>
   11126:	|  |     |  |      addq.l #8,sp
   11128:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   1112c:	|  |     |  |  /-- bne.s 11134 <getTextFromAnyVar+0x1ae>
   1112e:	|  |     |  |  |   moveq #0,d0
   11130:	|  +-----|--|--|-- bra.w 11256 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   11134:	|  |     |  |  \-> move.l 28(sp),24(sp)
   1113a:	|  |     |  |      move.l 19c4c <SysBase>,d0
   11140:	|  |     |  |      movea.l d0,a6
   11142:	|  |     |  |      movea.l 24(sp),a1
   11146:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   1114a:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   1114e:	|  |     |  |      move.l 36(sp),20(sp)
   11154:	|  |     |  |      move.l 19c4c <SysBase>,d0
   1115a:	|  |     |  |      movea.l d0,a6
   1115c:	|  |     |  |      movea.l 20(sp),a1
   11160:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   11164:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   11168:	|  |     |  |      movea.l 64(sp),a0
   1116c:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   11172:	|  |     |  \----> tst.l 64(sp)
   11176:	|  |     \-------- bne.w 110d4 <getTextFromAnyVar+0x14e>
			}
			return builder;
   1117a:	|  |               move.l 68(sp),d0
   1117e:	|  +-------------- bra.w 11256 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   11182:	|  |               moveq #10,d0
   11184:	|  |               move.l d0,16(sp)
   11188:	|  |               clr.l 12(sp)
   1118c:	|  |               move.l 19c4c <SysBase>,d0
   11192:	|  |               movea.l d0,a6
   11194:	|  |               move.l 16(sp),d0
   11198:	|  |               move.l 12(sp),d1
   1119c:	|  |               jsr -684(a6)
   111a0:	|  |               move.l d0,8(sp)
   111a4:	|  |               move.l 8(sp),d0
   111a8:	|  |               move.l d0,4(sp)
			if (! buff) {
   111ac:	|  |           /-- bne.s 111c2 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   111ae:	|  |           |   pea 168b0 <main_sludge.c.2f5c5368+0xdd6>
   111b4:	|  |           |   jsr 12a04 <KPrintF>
   111ba:	|  |           |   addq.l #4,sp
				return NULL;
   111bc:	|  |           |   moveq #0,d0
   111be:	|  +-----------|-- bra.w 11256 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   111c2:	|  |           \-> movea.l 84(sp),a0
   111c6:	|  |               move.l 4(a0),d0
   111ca:	|  |               move.l d0,-(sp)
   111cc:	|  |               pea 168da <main_sludge.c.2f5c5368+0xe00>
   111d2:	|  |               move.l 12(sp),-(sp)
   111d6:	|  |               jsr 101ba <sprintf>
   111dc:	|  |               lea 12(sp),sp
			return buff;
   111e0:	|  |               move.l 4(sp),d0
   111e4:	|  +-------------- bra.s 11256 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   111e6:	|  |               movea.l 84(sp),a0
   111ea:	|  |               move.l 4(a0),d0
   111ee:	|  |               move.l d0,-(sp)
   111f0:	|  |               jsr 162c <resourceNameFromNum>
   111f6:	|  |               addq.l #4,sp
   111f8:	|  |               move.l d0,-(sp)
   111fa:	|  |               pea 13bfc <custom.c.40d35411+0x2ce>
   11200:	|  |               jsr fedc <joinStrings>
   11206:	|  |               addq.l #8,sp
   11208:	|  +-------------- bra.s 11256 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   1120a:	|  |               movea.l 84(sp),a0
   1120e:	|  |               move.l 4(a0),d0
   11212:	|  |               move.l d0,-(sp)
   11214:	|  |               jsr 9802 <findObjectType>
   1121a:	|  |               addq.l #4,sp
   1121c:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   11220:	+--|-------------- beq.s 11234 <getTextFromAnyVar+0x2ae>
   11222:	|  |               movea.l 40(sp),a0
   11226:	|  |               move.l (a0),d0
   11228:	|  |               move.l d0,-(sp)
   1122a:	|  |               jsr b8 <copyString>
   11230:	|  |               addq.l #4,sp
   11232:	|  +-------------- bra.s 11256 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   11234:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   11236:	   |               movea.l 84(sp),a0
   1123a:	   |               move.l (a0),d0
   1123c:	   |               add.l d0,d0
   1123e:	   |               movea.l d0,a1
   11240:	   |               adda.l d0,a1
   11242:	   |               lea 18688 <typeName>,a0
   11248:	   |               move.l (0,a1,a0.l),d0
   1124c:	   |               move.l d0,-(sp)
   1124e:	   |               jsr b8 <copyString>
   11254:	   |               addq.l #4,sp
}
   11256:	   \-------------> movea.l (sp)+,a6
   11258:	                   lea 76(sp),sp
   1125c:	                   rts

0001125e <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   1125e:	move.l 4(sp),-(sp)
   11262:	jsr 10bfe <unlinkVar>
   11268:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1126a:	movea.l 4(sp),a0
   1126e:	moveq #8,d0
   11270:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   11272:	movea.l 4(sp),a0
   11276:	move.l 8(sp),4(a0)
}
   1127c:	nop
   1127e:	rts

00011280 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   11280:	move.l 4(sp),-(sp)
   11284:	jsr 10bfe <unlinkVar>
   1128a:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   1128c:	movea.l 4(sp),a0
   11290:	moveq #9,d0
   11292:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   11294:	movea.l 4(sp),a0
   11298:	move.l 8(sp),4(a0)
}
   1129e:	nop
   112a0:	rts

000112a2 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   112a2:	move.l 4(sp),-(sp)
   112a6:	jsr 10bfe <unlinkVar>
   112ac:	addq.l #4,sp
	thisVar->varType = vT;
   112ae:	movea.l 4(sp),a0
   112b2:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   112b6:	movea.l 4(sp),a0
   112ba:	move.l 12(sp),4(a0)
}
   112c0:	nop
   112c2:	rts

000112c4 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   112c4:	      /-- bra.s 112d6 <stackGetByIndex+0x12>
        vS = vS->next;
   112c6:	/-----|-> movea.l 4(sp),a0
   112ca:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   112d0:	|     +-- bne.s 112d6 <stackGetByIndex+0x12>
            return NULL;
   112d2:	|     |   moveq #0,d0
   112d4:	|  /--|-- bra.s 112ea <stackGetByIndex+0x26>
    while (theIndex--) {
   112d6:	|  |  \-> move.l 8(sp),d0
   112da:	|  |      move.l d0,d1
   112dc:	|  |      subq.l #1,d1
   112de:	|  |      move.l d1,8(sp)
   112e2:	|  |      tst.l d0
   112e4:	\--|----- bne.s 112c6 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   112e6:	   |      move.l 4(sp),d0
}
   112ea:	   \----> rts

000112ec <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   112ec:	          tst.l 4(sp)
   112f0:	      /-- bne.s 11300 <stackFindLast+0x14>
		return NULL;
   112f2:	      |   moveq #0,d0
   112f4:	/-----|-- bra.s 1130e <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   112f6:	|  /--|-> movea.l 4(sp),a0
   112fa:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   11300:	|  |  \-> movea.l 4(sp),a0
   11304:	|  |      move.l 8(a0),d0
   11308:	|  \----- bne.s 112f6 <stackFindLast+0xa>

	return hunt;
   1130a:	|         move.l 4(sp),d0
}
   1130e:	\-------> rts

00011310 <stackSize>:

int stackSize (const struct stackHandler * me) {
   11310:	       subq.l #8,sp
	int r = 0;
   11312:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   11316:	       movea.l 12(sp),a0
   1131a:	       move.l (a0),(sp)
	while (a) {
   1131c:	   /-- bra.s 11328 <stackSize+0x18>
		r ++;
   1131e:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   11322:	|  |   movea.l (sp),a0
   11324:	|  |   move.l 8(a0),(sp)
	while (a) {
   11328:	|  \-> tst.l (sp)
   1132a:	\----- bne.s 1131e <stackSize+0xe>
	}
	return r;
   1132c:	       move.l 4(sp),d0
}
   11330:	       addq.l #8,sp
   11332:	       rts

00011334 <trimStack>:

void trimStack (struct variableStack ** stack) {
   11334:	subq.l #8,sp
   11336:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   11338:	movea.l 16(sp),a0
   1133c:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   11340:	movea.l 16(sp),a0
   11344:	movea.l (a0),a0
   11346:	move.l 8(a0),d0
   1134a:	movea.l 16(sp),a0
   1134e:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   11350:	move.l 8(sp),d0
   11354:	move.l d0,-(sp)
   11356:	jsr 10bfe <unlinkVar>
   1135c:	addq.l #4,sp
	FreeVec(killMe);
   1135e:	move.l 8(sp),4(sp)
   11364:	move.l 19c4c <SysBase>,d0
   1136a:	movea.l d0,a6
   1136c:	movea.l 4(sp),a1
   11370:	jsr -690(a6)
   11374:	nop
   11376:	movea.l (sp)+,a6
   11378:	addq.l #8,sp
   1137a:	rts

0001137c <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1137c:	pea 168dd <main_sludge.c.2f5c5368+0xe03>
   11382:	jsr 12a04 <KPrintF>
   11388:	addq.l #4,sp
	return FALSE;
   1138a:	clr.w d0
}
   1138c:	rts

0001138e <stringWidth>:

int stringWidth (char * theText) {
   1138e:	       subq.l #8,sp
	int a = 0;
   11390:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   11394:	       clr.l (sp)

	if (! fontTableSize) return 0;
   11396:	       move.l 19d48 <fontTableSize>,d0
   1139c:	/----- bne.s 113a2 <stringWidth+0x14>
   1139e:	|      moveq #0,d0
   113a0:	|  /-- bra.s 113a4 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   113a2:	\--|-> move.l (sp),d0
}
   113a4:	   \-> addq.l #8,sp
   113a6:	       rts

000113a8 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   113a8:	pea 16904 <main_sludge.c.2f5c5368+0xe2a>
   113ae:	jsr 12a04 <KPrintF>
   113b4:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   113b6:	moveq #1,d0
}
   113b8:	rts

000113ba <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   113ba:	       lea -16(sp),sp
   113be:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   113c0:	       moveq #36,d0
   113c2:	       move.l d0,16(sp)
   113c6:	       clr.l 12(sp)
   113ca:	       move.l 19c4c <SysBase>,d0
   113d0:	       movea.l d0,a6
   113d2:	       move.l 16(sp),d0
   113d6:	       move.l 12(sp),d1
   113da:	       jsr -684(a6)
   113de:	       move.l d0,8(sp)
   113e2:	       move.l 8(sp),d0
   113e6:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   113ea:	   /-- bne.s 113f2 <addScreenRegion+0x38>
   113ec:	   |   clr.w d0
   113ee:	/--|-- bra.w 11472 <addScreenRegion+0xb8>
    newRegion->di = di;
   113f2:	|  \-> movea.l 4(sp),a0
   113f6:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   113fc:	|      movea.l 4(sp),a0
   11400:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   11404:	|      movea.l 4(sp),a0
   11408:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   1140e:	|      movea.l 4(sp),a0
   11412:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   11418:	|      movea.l 4(sp),a0
   1141c:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   11422:	|      movea.l 4(sp),a0
   11426:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   1142c:	|      movea.l 4(sp),a0
   11430:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   11436:	|      move.l 52(sp),-(sp)
   1143a:	|      jsr 98f2 <loadObjectType>
   11440:	|      addq.l #4,sp
   11442:	|      movea.l 4(sp),a0
   11446:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   1144a:	|      move.l 19d4c <allScreenRegions>,d0
   11450:	|      movea.l 4(sp),a0
   11454:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   11458:	|      move.l 4(sp),19d4c <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   11460:	|      movea.l 4(sp),a0
   11464:	|      move.l 28(a0),d0
   11468:	|      sne d0
   1146a:	|      neg.b d0
   1146c:	|      move.b d0,d0
   1146e:	|      andi.w #255,d0
}
   11472:	\----> movea.l (sp)+,a6
   11474:	       lea 16(sp),sp
   11478:	       rts

0001147a <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1147a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1147c:	             move.l 19d4c <allScreenRegions>,(sp)

	while (thisRegion) {
   11482:	   /-------- bra.s 1149e <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   11484:	/--|-------> movea.l (sp),a0
   11486:	|  |         movea.l 28(a0),a0
   1148a:	|  |         move.l 4(a0),d0
   1148e:	|  |         cmp.l 8(sp),d0
   11492:	|  |     /-- bne.s 11498 <getRegionForObject+0x1e>
			return thisRegion;
   11494:	|  |     |   move.l (sp),d0
   11496:	|  |  /--|-- bra.s 114a4 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   11498:	|  |  |  \-> movea.l (sp),a0
   1149a:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1149e:	|  \--|----> tst.l (sp)
   114a0:	\-----|----- bne.s 11484 <getRegionForObject+0xa>
	}

	return NULL;
   114a2:	      |      moveq #0,d0
}
   114a4:	      \----> addq.l #4,sp
   114a6:	             rts

000114a8 <killAllRegions>:

void killAllRegions () {
   114a8:	       subq.l #8,sp
   114aa:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   114ac:	   /-- bra.s 114ee <killAllRegions+0x46>
		killRegion = allScreenRegions;
   114ae:	/--|-> move.l 19d4c <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   114b6:	|  |   movea.l 19d4c <allScreenRegions>,a0
   114bc:	|  |   move.l 32(a0),d0
   114c0:	|  |   move.l d0,19d4c <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   114c6:	|  |   movea.l 8(sp),a0
   114ca:	|  |   move.l 28(a0),d0
   114ce:	|  |   move.l d0,-(sp)
   114d0:	|  |   jsr 9baa <removeObjectType>
   114d6:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   114d8:	|  |   move.l 8(sp),4(sp)
   114de:	|  |   move.l 19c4c <SysBase>,d0
   114e4:	|  |   movea.l d0,a6
   114e6:	|  |   movea.l 4(sp),a1
   114ea:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   114ee:	|  \-> move.l 19d4c <allScreenRegions>,d0
   114f4:	\----- bne.s 114ae <killAllRegions+0x6>
	}
	overRegion = NULL;
   114f6:	       clr.l 19d50 <overRegion>
}
   114fc:	       nop
   114fe:	       movea.l (sp)+,a6
   11500:	       addq.l #8,sp
   11502:	       rts

00011504 <loadRegions>:

void loadRegions (BPTR fp) {
   11504:	       lea -24(sp),sp
   11508:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   1150a:	       move.l 32(sp),-(sp)
   1150e:	       jsr 6bc <get2bytes>
   11514:	       addq.l #4,sp
   11516:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   1151a:	       move.l #105804,20(sp)

	while (numRegions --) {
   11522:	   /-- bra.w 11600 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   11526:	/--|-> moveq #36,d0
   11528:	|  |   move.l d0,16(sp)
   1152c:	|  |   clr.l 12(sp)
   11530:	|  |   move.l 19c4c <SysBase>,d0
   11536:	|  |   movea.l d0,a6
   11538:	|  |   move.l 16(sp),d0
   1153c:	|  |   move.l 12(sp),d1
   11540:	|  |   jsr -684(a6)
   11544:	|  |   move.l d0,8(sp)
   11548:	|  |   move.l 8(sp),d0
   1154c:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   11550:	|  |   movea.l 20(sp),a0
   11554:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   11558:	|  |   moveq #32,d1
   1155a:	|  |   add.l 4(sp),d1
   1155e:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   11562:	|  |   move.l 32(sp),-(sp)
   11566:	|  |   jsr 6bc <get2bytes>
   1156c:	|  |   addq.l #4,sp
   1156e:	|  |   movea.l 4(sp),a0
   11572:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   11574:	|  |   move.l 32(sp),-(sp)
   11578:	|  |   jsr 6bc <get2bytes>
   1157e:	|  |   addq.l #4,sp
   11580:	|  |   movea.l 4(sp),a0
   11584:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   11588:	|  |   move.l 32(sp),-(sp)
   1158c:	|  |   jsr 6bc <get2bytes>
   11592:	|  |   addq.l #4,sp
   11594:	|  |   movea.l 4(sp),a0
   11598:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1159c:	|  |   move.l 32(sp),-(sp)
   115a0:	|  |   jsr 6bc <get2bytes>
   115a6:	|  |   addq.l #4,sp
   115a8:	|  |   movea.l 4(sp),a0
   115ac:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   115b0:	|  |   move.l 32(sp),-(sp)
   115b4:	|  |   jsr 6bc <get2bytes>
   115ba:	|  |   addq.l #4,sp
   115bc:	|  |   movea.l 4(sp),a0
   115c0:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   115c4:	|  |   move.l 32(sp),-(sp)
   115c8:	|  |   jsr 6bc <get2bytes>
   115ce:	|  |   addq.l #4,sp
   115d0:	|  |   movea.l 4(sp),a0
   115d4:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   115d8:	|  |   move.l 32(sp),-(sp)
   115dc:	|  |   jsr 6bc <get2bytes>
   115e2:	|  |   addq.l #4,sp
   115e4:	|  |   movea.l 4(sp),a0
   115e8:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   115ec:	|  |   move.l 32(sp),-(sp)
   115f0:	|  |   jsr 98a0 <loadObjectRef>
   115f6:	|  |   addq.l #4,sp
   115f8:	|  |   movea.l 4(sp),a0
   115fc:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   11600:	|  \-> move.l 24(sp),d0
   11604:	|      move.l d0,d1
   11606:	|      subq.l #1,d1
   11608:	|      move.l d1,24(sp)
   1160c:	|      tst.l d0
   1160e:	\----- bne.w 11526 <loadRegions+0x22>
	}
	* pointy = NULL;
   11612:	       movea.l 20(sp),a0
   11616:	       clr.l (a0)
}
   11618:	       nop
   1161a:	       movea.l (sp)+,a6
   1161c:	       lea 24(sp),sp
   11620:	       rts

00011622 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   11622:	             lea -12(sp),sp
   11626:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   11628:	             move.l #105804,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   11630:	   /-------- bra.s 116aa <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   11632:	/--|-------> movea.l 12(sp),a0
   11636:	|  |         movea.l (a0),a0
   11638:	|  |         movea.l 28(a0),a0
   1163c:	|  |         move.l 4(a0),d0
   11640:	|  |         cmp.l 20(sp),d0
   11644:	|  |  /----- bne.s 1169c <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   11646:	|  |  |      movea.l 12(sp),a0
   1164a:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   1164e:	|  |  |      movea.l 8(sp),a0
   11652:	|  |  |      move.l 32(a0),d0
   11656:	|  |  |      movea.l 12(sp),a0
   1165a:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   1165c:	|  |  |      movea.l 8(sp),a0
   11660:	|  |  |      move.l 28(a0),d0
   11664:	|  |  |      move.l d0,-(sp)
   11666:	|  |  |      jsr 9baa <removeObjectType>
   1166c:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   1166e:	|  |  |      move.l 19d50 <overRegion>,d0
   11674:	|  |  |      cmp.l 8(sp),d0
   11678:	|  |  |  /-- bne.s 11680 <removeScreenRegion+0x5e>
   1167a:	|  |  |  |   clr.l 19d50 <overRegion>
            FreeVec(killMe);
   11680:	|  |  |  \-> move.l 8(sp),4(sp)
   11686:	|  |  |      move.l 19c4c <SysBase>,d0
   1168c:	|  |  |      movea.l d0,a6
   1168e:	|  |  |      movea.l 4(sp),a1
   11692:	|  |  |      jsr -690(a6)
            killMe = NULL;
   11696:	|  |  |      clr.l 8(sp)
   1169a:	|  +--|----- bra.s 116aa <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   1169c:	|  |  \----> movea.l 12(sp),a0
   116a0:	|  |         move.l (a0),d0
   116a2:	|  |         moveq #32,d1
   116a4:	|  |         add.l d0,d1
   116a6:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   116aa:	|  \-------> movea.l 12(sp),a0
   116ae:	|            move.l (a0),d0
   116b0:	\----------- bne.s 11632 <removeScreenRegion+0x10>
        }
    }
}
   116b2:	             nop
   116b4:	             nop
   116b6:	             movea.l (sp)+,a6
   116b8:	             lea 12(sp),sp
   116bc:	             rts

000116be <saveRegions>:

void saveRegions (BPTR fp) {
   116be:	       subq.l #8,sp
	int numRegions = 0;
   116c0:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   116c4:	       move.l 19d4c <allScreenRegions>,(sp)
	while (thisRegion) {
   116ca:	   /-- bra.s 116d6 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   116cc:	/--|-> movea.l (sp),a0
   116ce:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   116d2:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   116d6:	|  \-> tst.l (sp)
   116d8:	\----- bne.s 116cc <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   116da:	       move.l 12(sp),-(sp)
   116de:	       move.l 8(sp),-(sp)
   116e2:	       jsr 8d0 <put2bytes>
   116e8:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   116ea:	       move.l 19d4c <allScreenRegions>,(sp)
	while (thisRegion) {
   116f0:	/----- bra.w 11798 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   116f4:	|  /-> movea.l (sp),a0
   116f6:	|  |   move.l (a0),d0
   116f8:	|  |   move.l 12(sp),-(sp)
   116fc:	|  |   move.l d0,-(sp)
   116fe:	|  |   jsr 8d0 <put2bytes>
   11704:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   11706:	|  |   movea.l (sp),a0
   11708:	|  |   move.l 4(a0),d0
   1170c:	|  |   move.l 12(sp),-(sp)
   11710:	|  |   move.l d0,-(sp)
   11712:	|  |   jsr 8d0 <put2bytes>
   11718:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   1171a:	|  |   movea.l (sp),a0
   1171c:	|  |   move.l 8(a0),d0
   11720:	|  |   move.l 12(sp),-(sp)
   11724:	|  |   move.l d0,-(sp)
   11726:	|  |   jsr 8d0 <put2bytes>
   1172c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   1172e:	|  |   movea.l (sp),a0
   11730:	|  |   move.l 12(a0),d0
   11734:	|  |   move.l 12(sp),-(sp)
   11738:	|  |   move.l d0,-(sp)
   1173a:	|  |   jsr 8d0 <put2bytes>
   11740:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   11742:	|  |   movea.l (sp),a0
   11744:	|  |   move.l 16(a0),d0
   11748:	|  |   move.l 12(sp),-(sp)
   1174c:	|  |   move.l d0,-(sp)
   1174e:	|  |   jsr 8d0 <put2bytes>
   11754:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   11756:	|  |   movea.l (sp),a0
   11758:	|  |   move.l 20(a0),d0
   1175c:	|  |   move.l 12(sp),-(sp)
   11760:	|  |   move.l d0,-(sp)
   11762:	|  |   jsr 8d0 <put2bytes>
   11768:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   1176a:	|  |   movea.l (sp),a0
   1176c:	|  |   move.l 24(a0),d0
   11770:	|  |   move.l 12(sp),-(sp)
   11774:	|  |   move.l d0,-(sp)
   11776:	|  |   jsr 8d0 <put2bytes>
   1177c:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   1177e:	|  |   movea.l (sp),a0
   11780:	|  |   move.l 28(a0),d0
   11784:	|  |   move.l 12(sp),-(sp)
   11788:	|  |   move.l d0,-(sp)
   1178a:	|  |   jsr 9c4a <saveObjectRef>
   11790:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   11792:	|  |   movea.l (sp),a0
   11794:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   11798:	\--|-> tst.l (sp)
   1179a:	   \-- bne.w 116f4 <saveRegions+0x36>
	}
}
   1179e:	       nop
   117a0:	       nop
   117a2:	       addq.l #8,sp
   117a4:	       rts

000117a6 <showBoxes>:

void showBoxes () {
   117a6:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   117a8:	       move.l 19d4c <allScreenRegions>,(sp)

	while (huntRegion) {
   117ae:	/----- bra.w 1184a <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   117b2:	|  /-> movea.l (sp),a0
   117b4:	|  |   move.l 12(a0),d0
   117b8:	|  |   movea.l d0,a1
   117ba:	|  |   movea.l (sp),a0
   117bc:	|  |   move.l 4(a0),d0
   117c0:	|  |   move.l d0,d1
   117c2:	|  |   movea.l (sp),a0
   117c4:	|  |   move.l (a0),d0
   117c6:	|  |   move.l a1,-(sp)
   117c8:	|  |   move.l d1,-(sp)
   117ca:	|  |   move.l d0,-(sp)
   117cc:	|  |   jsr 9578 <drawVerticalLine>
   117d2:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   117d6:	|  |   movea.l (sp),a0
   117d8:	|  |   move.l 12(a0),d0
   117dc:	|  |   movea.l d0,a1
   117de:	|  |   movea.l (sp),a0
   117e0:	|  |   move.l 4(a0),d0
   117e4:	|  |   move.l d0,d1
   117e6:	|  |   movea.l (sp),a0
   117e8:	|  |   move.l 8(a0),d0
   117ec:	|  |   move.l a1,-(sp)
   117ee:	|  |   move.l d1,-(sp)
   117f0:	|  |   move.l d0,-(sp)
   117f2:	|  |   jsr 9578 <drawVerticalLine>
   117f8:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   117fc:	|  |   movea.l (sp),a0
   117fe:	|  |   move.l 8(a0),d0
   11802:	|  |   movea.l d0,a1
   11804:	|  |   movea.l (sp),a0
   11806:	|  |   move.l 4(a0),d0
   1180a:	|  |   move.l d0,d1
   1180c:	|  |   movea.l (sp),a0
   1180e:	|  |   move.l (a0),d0
   11810:	|  |   move.l a1,-(sp)
   11812:	|  |   move.l d1,-(sp)
   11814:	|  |   move.l d0,-(sp)
   11816:	|  |   jsr 9552 <drawHorizontalLine>
   1181c:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   11820:	|  |   movea.l (sp),a0
   11822:	|  |   move.l 8(a0),d0
   11826:	|  |   movea.l d0,a1
   11828:	|  |   movea.l (sp),a0
   1182a:	|  |   move.l 12(a0),d0
   1182e:	|  |   move.l d0,d1
   11830:	|  |   movea.l (sp),a0
   11832:	|  |   move.l (a0),d0
   11834:	|  |   move.l a1,-(sp)
   11836:	|  |   move.l d1,-(sp)
   11838:	|  |   move.l d0,-(sp)
   1183a:	|  |   jsr 9552 <drawHorizontalLine>
   11840:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   11844:	|  |   movea.l (sp),a0
   11846:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   1184a:	\--|-> tst.l (sp)
   1184c:	   \-- bne.w 117b2 <showBoxes+0xc>
	}
   11850:	       nop
   11852:	       nop
   11854:	       addq.l #4,sp
   11856:	       rts

00011858 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   11858:	       lea -32(sp),sp
   1185c:	       move.l d3,-(sp)
   1185e:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   11860:	       move.l 60(sp),d0
   11864:	       sub.l 52(sp),d0
   11868:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   1186c:	       move.l 64(sp),d0
   11870:	       sub.l 56(sp),d0
   11874:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   11878:	       move.l 68(sp),d0
   1187c:	       sub.l 52(sp),d0
   11880:	       move.l 36(sp),-(sp)
   11884:	       move.l d0,-(sp)
   11886:	       jsr 133b6 <__mulsi3>
   1188c:	       addq.l #8,sp
   1188e:	       move.l d0,d2
   11890:	       move.l 72(sp),d0
   11894:	       sub.l 56(sp),d0
   11898:	       move.l 32(sp),-(sp)
   1189c:	       move.l d0,-(sp)
   1189e:	       jsr 133b6 <__mulsi3>
   118a4:	       addq.l #8,sp
   118a6:	       add.l d2,d0
   118a8:	       move.l d0,-(sp)
   118aa:	       jsr 12e1c <__floatsidf>
   118b0:	       addq.l #4,sp
   118b2:	       move.l d0,16(sp)
   118b6:	       move.l d1,20(sp)
   118ba:	       move.l 16(sp),24(sp)
   118c0:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   118c6:	       move.l 36(sp),-(sp)
   118ca:	       move.l 40(sp),-(sp)
   118ce:	       jsr 133b6 <__mulsi3>
   118d4:	       addq.l #8,sp
   118d6:	       move.l d0,d2
   118d8:	       move.l 32(sp),-(sp)
   118dc:	       move.l 36(sp),-(sp)
   118e0:	       jsr 133b6 <__mulsi3>
   118e6:	       addq.l #8,sp
   118e8:	       add.l d2,d0
   118ea:	       move.l d0,-(sp)
   118ec:	       jsr 12e1c <__floatsidf>
   118f2:	       addq.l #4,sp
   118f4:	       move.l d1,-(sp)
   118f6:	       move.l d0,-(sp)
   118f8:	       move.l 36(sp),-(sp)
   118fc:	       move.l 36(sp),-(sp)
   11900:	       jsr 12ca6 <__divdf3>
   11906:	       lea 16(sp),sp
   1190a:	       move.l d0,8(sp)
   1190e:	       move.l d1,12(sp)
   11912:	       move.l 8(sp),24(sp)
   11918:	       move.l 12(sp),28(sp)

	if (m < 0) {
   1191e:	       clr.l -(sp)
   11920:	       clr.l -(sp)
   11922:	       move.l 36(sp),-(sp)
   11926:	       move.l 36(sp),-(sp)
   1192a:	       jsr 13034 <__ltdf2>
   11930:	       lea 16(sp),sp
   11934:	       tst.l d0
   11936:	   /-- bge.s 1194c <closestPointOnLine+0xf4>
		*closestX = x1;
   11938:	   |   movea.l 44(sp),a0
   1193c:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   11940:	   |   movea.l 48(sp),a0
   11944:	   |   move.l 56(sp),(a0)
   11948:	/--|-- bra.w 11a2e <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   1194c:	|  \-> clr.l -(sp)
   1194e:	|      move.l #1072693248,-(sp)
   11954:	|      move.l 36(sp),-(sp)
   11958:	|      move.l 36(sp),-(sp)
   1195c:	|      jsr 12f7a <__gtdf2>
   11962:	|      lea 16(sp),sp
   11966:	|      tst.l d0
   11968:	|  /-- ble.s 1197e <closestPointOnLine+0x126>
		*closestX = x2;
   1196a:	|  |   movea.l 44(sp),a0
   1196e:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   11972:	|  |   movea.l 48(sp),a0
   11976:	|  |   move.l 64(sp),(a0)
   1197a:	+--|-- bra.w 11a2e <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   1197e:	|  \-> move.l 52(sp),-(sp)
   11982:	|      jsr 12e1c <__floatsidf>
   11988:	|      addq.l #4,sp
   1198a:	|      move.l d0,d2
   1198c:	|      move.l d1,d3
   1198e:	|      move.l 36(sp),-(sp)
   11992:	|      jsr 12e1c <__floatsidf>
   11998:	|      addq.l #4,sp
   1199a:	|      move.l 28(sp),-(sp)
   1199e:	|      move.l 28(sp),-(sp)
   119a2:	|      move.l d1,-(sp)
   119a4:	|      move.l d0,-(sp)
   119a6:	|      jsr 12eac <__muldf3>
   119ac:	|      lea 16(sp),sp
   119b0:	|      move.l d1,-(sp)
   119b2:	|      move.l d0,-(sp)
   119b4:	|      move.l d3,-(sp)
   119b6:	|      move.l d2,-(sp)
   119b8:	|      jsr 12c44 <__adddf3>
   119be:	|      lea 16(sp),sp
   119c2:	|      move.l d1,-(sp)
   119c4:	|      move.l d0,-(sp)
   119c6:	|      jsr 12db4 <__fixdfsi>
   119cc:	|      addq.l #8,sp
   119ce:	|      movea.l 44(sp),a0
   119d2:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   119d4:	|      move.l 56(sp),-(sp)
   119d8:	|      jsr 12e1c <__floatsidf>
   119de:	|      addq.l #4,sp
   119e0:	|      move.l d0,d2
   119e2:	|      move.l d1,d3
   119e4:	|      move.l 32(sp),-(sp)
   119e8:	|      jsr 12e1c <__floatsidf>
   119ee:	|      addq.l #4,sp
   119f0:	|      move.l 28(sp),-(sp)
   119f4:	|      move.l 28(sp),-(sp)
   119f8:	|      move.l d1,-(sp)
   119fa:	|      move.l d0,-(sp)
   119fc:	|      jsr 12eac <__muldf3>
   11a02:	|      lea 16(sp),sp
   11a06:	|      move.l d1,-(sp)
   11a08:	|      move.l d0,-(sp)
   11a0a:	|      move.l d3,-(sp)
   11a0c:	|      move.l d2,-(sp)
   11a0e:	|      jsr 12c44 <__adddf3>
   11a14:	|      lea 16(sp),sp
   11a18:	|      move.l d1,-(sp)
   11a1a:	|      move.l d0,-(sp)
   11a1c:	|      jsr 12db4 <__fixdfsi>
   11a22:	|      addq.l #8,sp
   11a24:	|      movea.l 48(sp),a0
   11a28:	|      move.l d0,(a0)
		return TRUE;
   11a2a:	|      moveq #1,d0
   11a2c:	|  /-- bra.s 11a30 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   11a2e:	\--|-> clr.w d0
}
   11a30:	   \-> move.l (sp)+,d2
   11a32:	       move.l (sp)+,d3
   11a34:	       lea 32(sp),sp
   11a38:	       rts

00011a3a <drawFloor>:

void drawFloor() {
   11a3a:	                lea -12(sp),sp
   11a3e:	                move.l d3,-(sp)
   11a40:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   11a42:	                clr.l 16(sp)
   11a46:	   /----------- bra.w 11c5a <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   11a4a:	/--|----------> movea.l 19d54 <currentFloor>,a0
   11a50:	|  |            move.l 12(a0),d1
   11a54:	|  |            move.l 16(sp),d0
   11a58:	|  |            lsl.l #3,d0
   11a5a:	|  |            movea.l d1,a0
   11a5c:	|  |            adda.l d0,a0
   11a5e:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   11a62:	|  |            moveq #1,d0
   11a64:	|  |            cmp.l 8(sp),d0
   11a68:	|  |  /-------- bge.w 11c56 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   11a6c:	|  |  |         moveq #1,d0
   11a6e:	|  |  |         move.l d0,12(sp)
   11a72:	|  |  |     /-- bra.w 11b6c <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   11a76:	|  |  |  /--|-> movea.l 19d54 <currentFloor>,a0
   11a7c:	|  |  |  |  |   move.l 4(a0),d1
   11a80:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   11a86:	|  |  |  |  |   movea.l 12(a0),a0
   11a8a:	|  |  |  |  |   move.l 16(sp),d0
   11a8e:	|  |  |  |  |   lsl.l #3,d0
   11a90:	|  |  |  |  |   adda.l d0,a0
   11a92:	|  |  |  |  |   movea.l 4(a0),a0
   11a96:	|  |  |  |  |   move.l 12(sp),d0
   11a9a:	|  |  |  |  |   add.l d0,d0
   11a9c:	|  |  |  |  |   add.l d0,d0
   11a9e:	|  |  |  |  |   adda.l d0,a0
   11aa0:	|  |  |  |  |   move.l (a0),d0
   11aa2:	|  |  |  |  |   lsl.l #3,d0
   11aa4:	|  |  |  |  |   movea.l d1,a0
   11aa6:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11aa8:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   11aac:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   11ab2:	|  |  |  |  |   move.l 4(a0),d1
   11ab6:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   11abc:	|  |  |  |  |   movea.l 12(a0),a0
   11ac0:	|  |  |  |  |   move.l 16(sp),d0
   11ac4:	|  |  |  |  |   lsl.l #3,d0
   11ac6:	|  |  |  |  |   adda.l d0,a0
   11ac8:	|  |  |  |  |   movea.l 4(a0),a0
   11acc:	|  |  |  |  |   move.l 12(sp),d0
   11ad0:	|  |  |  |  |   add.l d0,d0
   11ad2:	|  |  |  |  |   add.l d0,d0
   11ad4:	|  |  |  |  |   adda.l d0,a0
   11ad6:	|  |  |  |  |   move.l (a0),d0
   11ad8:	|  |  |  |  |   lsl.l #3,d0
   11ada:	|  |  |  |  |   movea.l d1,a0
   11adc:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11ade:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   11ae0:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   11ae6:	|  |  |  |  |   move.l 4(a0),d1
   11aea:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   11af0:	|  |  |  |  |   movea.l 12(a0),a0
   11af4:	|  |  |  |  |   move.l 16(sp),d0
   11af8:	|  |  |  |  |   lsl.l #3,d0
   11afa:	|  |  |  |  |   adda.l d0,a0
   11afc:	|  |  |  |  |   movea.l 4(a0),a0
   11b00:	|  |  |  |  |   move.l 12(sp),d0
   11b04:	|  |  |  |  |   addi.l #1073741823,d0
   11b0a:	|  |  |  |  |   add.l d0,d0
   11b0c:	|  |  |  |  |   add.l d0,d0
   11b0e:	|  |  |  |  |   adda.l d0,a0
   11b10:	|  |  |  |  |   move.l (a0),d0
   11b12:	|  |  |  |  |   lsl.l #3,d0
   11b14:	|  |  |  |  |   movea.l d1,a0
   11b16:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11b18:	|  |  |  |  |   move.l 4(a0),d1
   11b1c:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   11b22:	|  |  |  |  |   move.l 4(a0),d3
   11b26:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   11b2c:	|  |  |  |  |   movea.l 12(a0),a0
   11b30:	|  |  |  |  |   move.l 16(sp),d0
   11b34:	|  |  |  |  |   lsl.l #3,d0
   11b36:	|  |  |  |  |   adda.l d0,a0
   11b38:	|  |  |  |  |   movea.l 4(a0),a0
   11b3c:	|  |  |  |  |   move.l 12(sp),d0
   11b40:	|  |  |  |  |   addi.l #1073741823,d0
   11b46:	|  |  |  |  |   add.l d0,d0
   11b48:	|  |  |  |  |   add.l d0,d0
   11b4a:	|  |  |  |  |   adda.l d0,a0
   11b4c:	|  |  |  |  |   move.l (a0),d0
   11b4e:	|  |  |  |  |   lsl.l #3,d0
   11b50:	|  |  |  |  |   movea.l d3,a0
   11b52:	|  |  |  |  |   adda.l d0,a0
   11b54:	|  |  |  |  |   move.l (a0),d0
   11b56:	|  |  |  |  |   move.l d2,-(sp)
   11b58:	|  |  |  |  |   move.l a1,-(sp)
   11b5a:	|  |  |  |  |   move.l d1,-(sp)
   11b5c:	|  |  |  |  |   move.l d0,-(sp)
   11b5e:	|  |  |  |  |   jsr 1396 <drawLine>
   11b64:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   11b68:	|  |  |  |  |   addq.l #1,12(sp)
   11b6c:	|  |  |  |  \-> move.l 12(sp),d0
   11b70:	|  |  |  |      cmp.l 8(sp),d0
   11b74:	|  |  |  \----- blt.w 11a76 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   11b78:	|  |  |         movea.l 19d54 <currentFloor>,a0
   11b7e:	|  |  |         move.l 4(a0),d1
   11b82:	|  |  |         movea.l 19d54 <currentFloor>,a0
   11b88:	|  |  |         movea.l 12(a0),a0
   11b8c:	|  |  |         move.l 16(sp),d0
   11b90:	|  |  |         lsl.l #3,d0
   11b92:	|  |  |         adda.l d0,a0
   11b94:	|  |  |         movea.l 4(a0),a0
   11b98:	|  |  |         move.l 8(sp),d0
   11b9c:	|  |  |         addi.l #1073741823,d0
   11ba2:	|  |  |         add.l d0,d0
   11ba4:	|  |  |         add.l d0,d0
   11ba6:	|  |  |         adda.l d0,a0
   11ba8:	|  |  |         move.l (a0),d0
   11baa:	|  |  |         lsl.l #3,d0
   11bac:	|  |  |         movea.l d1,a0
   11bae:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   11bb0:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   11bb4:	|  |  |         movea.l 19d54 <currentFloor>,a0
   11bba:	|  |  |         move.l 4(a0),d1
   11bbe:	|  |  |         movea.l 19d54 <currentFloor>,a0
   11bc4:	|  |  |         movea.l 12(a0),a0
   11bc8:	|  |  |         move.l 16(sp),d0
   11bcc:	|  |  |         lsl.l #3,d0
   11bce:	|  |  |         adda.l d0,a0
   11bd0:	|  |  |         movea.l 4(a0),a0
   11bd4:	|  |  |         move.l 8(sp),d0
   11bd8:	|  |  |         addi.l #1073741823,d0
   11bde:	|  |  |         add.l d0,d0
   11be0:	|  |  |         add.l d0,d0
   11be2:	|  |  |         adda.l d0,a0
   11be4:	|  |  |         move.l (a0),d0
   11be6:	|  |  |         lsl.l #3,d0
   11be8:	|  |  |         movea.l d1,a0
   11bea:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   11bec:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   11bee:	|  |  |         movea.l 19d54 <currentFloor>,a0
   11bf4:	|  |  |         move.l 4(a0),d1
   11bf8:	|  |  |         movea.l 19d54 <currentFloor>,a0
   11bfe:	|  |  |         movea.l 12(a0),a0
   11c02:	|  |  |         move.l 16(sp),d0
   11c06:	|  |  |         lsl.l #3,d0
   11c08:	|  |  |         adda.l d0,a0
   11c0a:	|  |  |         movea.l 4(a0),a0
   11c0e:	|  |  |         move.l (a0),d0
   11c10:	|  |  |         lsl.l #3,d0
   11c12:	|  |  |         movea.l d1,a0
   11c14:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   11c16:	|  |  |         move.l 4(a0),d1
   11c1a:	|  |  |         movea.l 19d54 <currentFloor>,a0
   11c20:	|  |  |         move.l 4(a0),d3
   11c24:	|  |  |         movea.l 19d54 <currentFloor>,a0
   11c2a:	|  |  |         movea.l 12(a0),a0
   11c2e:	|  |  |         move.l 16(sp),d0
   11c32:	|  |  |         lsl.l #3,d0
   11c34:	|  |  |         adda.l d0,a0
   11c36:	|  |  |         movea.l 4(a0),a0
   11c3a:	|  |  |         move.l (a0),d0
   11c3c:	|  |  |         lsl.l #3,d0
   11c3e:	|  |  |         movea.l d3,a0
   11c40:	|  |  |         adda.l d0,a0
   11c42:	|  |  |         move.l (a0),d0
   11c44:	|  |  |         move.l d2,-(sp)
   11c46:	|  |  |         move.l a1,-(sp)
   11c48:	|  |  |         move.l d1,-(sp)
   11c4a:	|  |  |         move.l d0,-(sp)
   11c4c:	|  |  |         jsr 1396 <drawLine>
   11c52:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   11c56:	|  |  \-------> addq.l #1,16(sp)
   11c5a:	|  \----------> movea.l 19d54 <currentFloor>,a0
   11c60:	|               move.l 8(a0),d0
   11c64:	|               cmp.l 16(sp),d0
   11c68:	\-------------- bgt.w 11a4a <drawFloor+0x10>
        }
    }
}
   11c6c:	                nop
   11c6e:	                nop
   11c70:	                move.l (sp)+,d2
   11c72:	                move.l (sp)+,d3
   11c74:	                lea 12(sp),sp
   11c78:	                rts

00011c7a <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   11c7a:	                      lea -12(sp),sp
    int sharedVertices = 0;
   11c7e:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   11c82:	                      clr.l 4(sp)
   11c86:	   /----------------- bra.w 11d18 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   11c8a:	/--|----------------> clr.l (sp)
   11c8c:	|  |     /----------- bra.s 11d08 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   11c8e:	|  |  /--|----------> movea.l 16(sp),a0
   11c92:	|  |  |  |            move.l 4(a0),d1
   11c96:	|  |  |  |            move.l 4(sp),d0
   11c9a:	|  |  |  |            add.l d0,d0
   11c9c:	|  |  |  |            add.l d0,d0
   11c9e:	|  |  |  |            movea.l d1,a0
   11ca0:	|  |  |  |            adda.l d0,a0
   11ca2:	|  |  |  |            move.l (a0),d1
   11ca4:	|  |  |  |            movea.l 20(sp),a0
   11ca8:	|  |  |  |            movea.l 4(a0),a0
   11cac:	|  |  |  |            move.l (sp),d0
   11cae:	|  |  |  |            add.l d0,d0
   11cb0:	|  |  |  |            add.l d0,d0
   11cb2:	|  |  |  |            adda.l d0,a0
   11cb4:	|  |  |  |            move.l (a0),d0
   11cb6:	|  |  |  |            cmp.l d1,d0
   11cb8:	|  |  |  |  /-------- bne.s 11d06 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   11cba:	|  |  |  |  |         move.l 8(sp),d0
   11cbe:	|  |  |  |  |         move.l d0,d1
   11cc0:	|  |  |  |  |         addq.l #1,d1
   11cc2:	|  |  |  |  |         move.l d1,8(sp)
   11cc6:	|  |  |  |  |         tst.l d0
   11cc8:	|  |  |  |  |     /-- beq.s 11cea <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   11cca:	|  |  |  |  |     |   movea.l 16(sp),a0
   11cce:	|  |  |  |  |     |   move.l 4(a0),d1
   11cd2:	|  |  |  |  |     |   move.l 4(sp),d0
   11cd6:	|  |  |  |  |     |   add.l d0,d0
   11cd8:	|  |  |  |  |     |   add.l d0,d0
   11cda:	|  |  |  |  |     |   movea.l d1,a0
   11cdc:	|  |  |  |  |     |   adda.l d0,a0
   11cde:	|  |  |  |  |     |   move.l (a0),d0
   11ce0:	|  |  |  |  |     |   movea.l 28(sp),a0
   11ce4:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   11ce6:	|  |  |  |  |     |   moveq #1,d0
   11ce8:	|  |  |  |  |  /--|-- bra.s 11d28 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   11cea:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   11cee:	|  |  |  |  |  |      move.l 4(a0),d1
   11cf2:	|  |  |  |  |  |      move.l 4(sp),d0
   11cf6:	|  |  |  |  |  |      add.l d0,d0
   11cf8:	|  |  |  |  |  |      add.l d0,d0
   11cfa:	|  |  |  |  |  |      movea.l d1,a0
   11cfc:	|  |  |  |  |  |      adda.l d0,a0
   11cfe:	|  |  |  |  |  |      move.l (a0),d0
   11d00:	|  |  |  |  |  |      movea.l 24(sp),a0
   11d04:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   11d06:	|  |  |  |  \--|----> addq.l #1,(sp)
   11d08:	|  |  |  \-----|----> movea.l 20(sp),a0
   11d0c:	|  |  |        |      move.l (a0),d0
   11d0e:	|  |  |        |      cmp.l (sp),d0
   11d10:	|  |  \--------|----- bgt.w 11c8e <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   11d14:	|  |           |      addq.l #1,4(sp)
   11d18:	|  \-----------|----> movea.l 16(sp),a0
   11d1c:	|              |      move.l (a0),d0
   11d1e:	|              |      cmp.l 4(sp),d0
   11d22:	\--------------|----- bgt.w 11c8a <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   11d26:	               |      clr.w d0
}
   11d28:	               \----> lea 12(sp),sp
   11d2c:	                      rts

00011d2e <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   11d2e:	movea.l 19d54 <currentFloor>,a0
   11d34:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   11d38:	movea.l 19d54 <currentFloor>,a0
   11d3e:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   11d42:	movea.l 19d54 <currentFloor>,a0
   11d48:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   11d4c:	movea.l 19d54 <currentFloor>,a0
   11d52:	clr.l 16(a0)
}
   11d56:	nop
   11d58:	rts

00011d5a <inFloor>:

int inFloor (int x, int y) {
   11d5a:	          subq.l #8,sp
	int i, r = -1;
   11d5c:	          moveq #-1,d0
   11d5e:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   11d60:	          clr.l 4(sp)
   11d64:	   /----- bra.s 11d98 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   11d66:	/--|----> movea.l 19d54 <currentFloor>,a0
   11d6c:	|  |      move.l 12(a0),d1
   11d70:	|  |      move.l 4(sp),d0
   11d74:	|  |      lsl.l #3,d0
   11d76:	|  |      add.l d1,d0
   11d78:	|  |      move.l 16(sp),-(sp)
   11d7c:	|  |      move.l 16(sp),-(sp)
   11d80:	|  |      move.l d0,-(sp)
   11d82:	|  |      jsr 11f64 <pointInFloorPolygon>
   11d88:	|  |      lea 12(sp),sp
   11d8c:	|  |      tst.w d0
   11d8e:	|  |  /-- beq.s 11d94 <inFloor+0x3a>
			r = i;
   11d90:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   11d94:	|  |  \-> addq.l #1,4(sp)
   11d98:	|  \----> movea.l 19d54 <currentFloor>,a0
   11d9e:	|         move.l 8(a0),d0
   11da2:	|         cmp.l 4(sp),d0
   11da6:	\-------- bgt.s 11d66 <inFloor+0xc>

	return r;
   11da8:	          move.l (sp),d0
}
   11daa:	          addq.l #8,sp
   11dac:	          rts

00011dae <initFloor>:

BOOL initFloor () {
   11dae:	       lea -12(sp),sp
   11db2:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   11db4:	       moveq #20,d0
   11db6:	       move.l d0,12(sp)
   11dba:	       clr.l 8(sp)
   11dbe:	       move.l 19c4c <SysBase>,d0
   11dc4:	       movea.l d0,a6
   11dc6:	       move.l 12(sp),d0
   11dca:	       move.l 8(sp),d1
   11dce:	       jsr -684(a6)
   11dd2:	       move.l d0,4(sp)
   11dd6:	       move.l 4(sp),d0
   11dda:	       move.l d0,19d54 <currentFloor>

    if(currentFloor == 0) {
   11de0:	       move.l 19d54 <currentFloor>,d0
   11de6:	/----- bne.s 11dfa <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   11de8:	|      pea 16927 <main_sludge.c.2f5c5368+0xe4d>
   11dee:	|      jsr 12a04 <KPrintF>
   11df4:	|      addq.l #4,sp
        return FALSE;
   11df6:	|      clr.w d0
   11df8:	|  /-- bra.s 11e02 <initFloor+0x54>
    }

	noFloor ();
   11dfa:	\--|-> jsr 11d2e <noFloor>
	return TRUE;
   11e00:	   |   moveq #1,d0
}
   11e02:	   \-> movea.l (sp)+,a6
   11e04:	       lea 12(sp),sp
   11e08:	       rts

00011e0a <killFloor>:

void killFloor () {
   11e0a:	       lea -24(sp),sp
   11e0e:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   11e10:	       clr.l 24(sp)
   11e14:	   /-- bra.s 11e6e <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   11e16:	/--|-> movea.l 19d54 <currentFloor>,a0
   11e1c:	|  |   move.l 12(a0),d1
   11e20:	|  |   move.l 24(sp),d0
   11e24:	|  |   lsl.l #3,d0
   11e26:	|  |   movea.l d1,a0
   11e28:	|  |   adda.l d0,a0
   11e2a:	|  |   move.l 4(a0),8(sp)
   11e30:	|  |   move.l 19c4c <SysBase>,d0
   11e36:	|  |   movea.l d0,a6
   11e38:	|  |   movea.l 8(sp),a1
   11e3c:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   11e40:	|  |   movea.l 19d54 <currentFloor>,a0
   11e46:	|  |   move.l 16(a0),d1
   11e4a:	|  |   move.l 24(sp),d0
   11e4e:	|  |   add.l d0,d0
   11e50:	|  |   add.l d0,d0
   11e52:	|  |   movea.l d1,a0
   11e54:	|  |   adda.l d0,a0
   11e56:	|  |   move.l (a0),4(sp)
   11e5a:	|  |   move.l 19c4c <SysBase>,d0
   11e60:	|  |   movea.l d0,a6
   11e62:	|  |   movea.l 4(sp),a1
   11e66:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   11e6a:	|  |   addq.l #1,24(sp)
   11e6e:	|  \-> movea.l 19d54 <currentFloor>,a0
   11e74:	|      move.l 8(a0),d0
   11e78:	|      cmp.l 24(sp),d0
   11e7c:	\----- bgt.s 11e16 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   11e7e:	       movea.l 19d54 <currentFloor>,a0
   11e84:	       move.l 12(a0),20(sp)
   11e8a:	       move.l 19c4c <SysBase>,d0
   11e90:	       movea.l d0,a6
   11e92:	       movea.l 20(sp),a1
   11e96:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   11e9a:	       movea.l 19d54 <currentFloor>,a0
   11ea0:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   11ea4:	       movea.l 19d54 <currentFloor>,a0
   11eaa:	       move.l 4(a0),16(sp)
   11eb0:	       move.l 19c4c <SysBase>,d0
   11eb6:	       movea.l d0,a6
   11eb8:	       movea.l 16(sp),a1
   11ebc:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   11ec0:	       movea.l 19d54 <currentFloor>,a0
   11ec6:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   11eca:	       movea.l 19d54 <currentFloor>,a0
   11ed0:	       move.l 16(a0),12(sp)
   11ed6:	       move.l 19c4c <SysBase>,d0
   11edc:	       movea.l d0,a6
   11ede:	       movea.l 12(sp),a1
   11ee2:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   11ee6:	       movea.l 19d54 <currentFloor>,a0
   11eec:	       clr.l 16(a0)
}
   11ef0:	       nop
   11ef2:	       movea.l (sp)+,a6
   11ef4:	       lea 24(sp),sp
   11ef8:	       rts

00011efa <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   11efa:	                   lea -12(sp),sp
	int sharedVertices = 0;
   11efe:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   11f02:	                   clr.l 4(sp)
   11f06:	   /-------------- bra.s 11f52 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   11f08:	/--|-------------> clr.l (sp)
   11f0a:	|  |     /-------- bra.s 11f46 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   11f0c:	|  |  /--|-------> move.l 20(sp),d1
   11f10:	|  |  |  |         move.l 4(sp),d0
   11f14:	|  |  |  |         add.l d0,d0
   11f16:	|  |  |  |         add.l d0,d0
   11f18:	|  |  |  |         movea.l d1,a0
   11f1a:	|  |  |  |         adda.l d0,a0
   11f1c:	|  |  |  |         move.l (a0),d1
   11f1e:	|  |  |  |         movea.l 28(sp),a0
   11f22:	|  |  |  |         move.l (sp),d0
   11f24:	|  |  |  |         add.l d0,d0
   11f26:	|  |  |  |         add.l d0,d0
   11f28:	|  |  |  |         adda.l d0,a0
   11f2a:	|  |  |  |         move.l (a0),d0
   11f2c:	|  |  |  |         cmp.l d1,d0
   11f2e:	|  |  |  |     /-- bne.s 11f44 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   11f30:	|  |  |  |     |   move.l 8(sp),d0
   11f34:	|  |  |  |     |   move.l d0,d1
   11f36:	|  |  |  |     |   addq.l #1,d1
   11f38:	|  |  |  |     |   move.l d1,8(sp)
   11f3c:	|  |  |  |     |   tst.l d0
   11f3e:	|  |  |  |     +-- beq.s 11f44 <polysShareSide+0x4a>
   11f40:	|  |  |  |     |   moveq #1,d0
   11f42:	|  |  |  |  /--|-- bra.s 11f5e <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   11f44:	|  |  |  |  |  \-> addq.l #1,(sp)
   11f46:	|  |  |  \--|----> move.l 24(sp),d0
   11f4a:	|  |  |     |      cmp.l (sp),d0
   11f4c:	|  |  \-----|----- bgt.s 11f0c <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   11f4e:	|  |        |      addq.l #1,4(sp)
   11f52:	|  \--------|----> move.l 16(sp),d0
   11f56:	|           |      cmp.l 4(sp),d0
   11f5a:	\-----------|----- bgt.s 11f08 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   11f5c:	            |      clr.w d0
}
   11f5e:	            \----> lea 12(sp),sp
   11f62:	                   rts

00011f64 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   11f64:	             lea -28(sp),sp
   11f68:	             move.l d3,-(sp)
   11f6a:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   11f6c:	             clr.l 32(sp)
   11f70:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   11f74:	             movea.l 40(sp),a0
   11f78:	             move.l (a0),d0
   11f7a:	             move.l d0,d1
   11f7c:	             subq.l #1,d1
   11f7e:	             move.l d1,28(sp)
   11f82:	   /-------- bra.w 1217c <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   11f86:	/--|-------> movea.l 19d54 <currentFloor>,a0
   11f8c:	|  |         move.l 4(a0),d1
   11f90:	|  |         movea.l 40(sp),a0
   11f94:	|  |         movea.l 4(a0),a0
   11f98:	|  |         move.l 32(sp),d0
   11f9c:	|  |         add.l d0,d0
   11f9e:	|  |         add.l d0,d0
   11fa0:	|  |         adda.l d0,a0
   11fa2:	|  |         move.l (a0),d0
   11fa4:	|  |         lsl.l #3,d0
   11fa6:	|  |         movea.l d1,a0
   11fa8:	|  |         adda.l d0,a0
   11faa:	|  |         move.l (a0),d0
   11fac:	|  |         move.l d0,-(sp)
   11fae:	|  |         jsr 12e5c <__floatsisf>
   11fb4:	|  |         addq.l #4,sp
   11fb6:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   11fba:	|  |         movea.l 19d54 <currentFloor>,a0
   11fc0:	|  |         move.l 4(a0),d1
   11fc4:	|  |         movea.l 40(sp),a0
   11fc8:	|  |         movea.l 4(a0),a0
   11fcc:	|  |         move.l 32(sp),d0
   11fd0:	|  |         add.l d0,d0
   11fd2:	|  |         add.l d0,d0
   11fd4:	|  |         adda.l d0,a0
   11fd6:	|  |         move.l (a0),d0
   11fd8:	|  |         lsl.l #3,d0
   11fda:	|  |         movea.l d1,a0
   11fdc:	|  |         adda.l d0,a0
   11fde:	|  |         move.l 4(a0),d0
   11fe2:	|  |         move.l d0,-(sp)
   11fe4:	|  |         jsr 12e5c <__floatsisf>
   11fea:	|  |         addq.l #4,sp
   11fec:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   11ff0:	|  |         movea.l 19d54 <currentFloor>,a0
   11ff6:	|  |         move.l 4(a0),d1
   11ffa:	|  |         movea.l 40(sp),a0
   11ffe:	|  |         movea.l 4(a0),a0
   12002:	|  |         move.l 28(sp),d0
   12006:	|  |         add.l d0,d0
   12008:	|  |         add.l d0,d0
   1200a:	|  |         adda.l d0,a0
   1200c:	|  |         move.l (a0),d0
   1200e:	|  |         lsl.l #3,d0
   12010:	|  |         movea.l d1,a0
   12012:	|  |         adda.l d0,a0
   12014:	|  |         move.l (a0),d0
   12016:	|  |         move.l d0,-(sp)
   12018:	|  |         jsr 12e5c <__floatsisf>
   1201e:	|  |         addq.l #4,sp
   12020:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   12024:	|  |         movea.l 19d54 <currentFloor>,a0
   1202a:	|  |         move.l 4(a0),d1
   1202e:	|  |         movea.l 40(sp),a0
   12032:	|  |         movea.l 4(a0),a0
   12036:	|  |         move.l 28(sp),d0
   1203a:	|  |         add.l d0,d0
   1203c:	|  |         add.l d0,d0
   1203e:	|  |         adda.l d0,a0
   12040:	|  |         move.l (a0),d0
   12042:	|  |         lsl.l #3,d0
   12044:	|  |         movea.l d1,a0
   12046:	|  |         adda.l d0,a0
   12048:	|  |         move.l 4(a0),d0
   1204c:	|  |         move.l d0,-(sp)
   1204e:	|  |         jsr 12e5c <__floatsisf>
   12054:	|  |         addq.l #4,sp
   12056:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1205a:	|  |         move.l 48(sp),-(sp)
   1205e:	|  |         jsr 12e5c <__floatsisf>
   12064:	|  |         addq.l #4,sp
   12066:	|  |         move.l d0,-(sp)
   12068:	|  |         move.l 20(sp),-(sp)
   1206c:	|  |         jsr 12ffe <__lesf2>
   12072:	|  |         addq.l #8,sp
   12074:	|  |         tst.l d0
   12076:	|  |     /-- bgt.s 12096 <pointInFloorPolygon+0x132>
   12078:	|  |     |   move.l 48(sp),-(sp)
   1207c:	|  |     |   jsr 12e5c <__floatsisf>
   12082:	|  |     |   addq.l #4,sp
   12084:	|  |     |   move.l d0,-(sp)
   12086:	|  |     |   move.l 12(sp),-(sp)
   1208a:	|  |     |   jsr 12fc8 <__gtsf2>
   12090:	|  |     |   addq.l #8,sp
   12092:	|  |     |   tst.l d0
   12094:	|  |  /--|-- bgt.s 120d6 <pointInFloorPolygon+0x172>
   12096:	|  |  |  \-> move.l 48(sp),-(sp)
   1209a:	|  |  |      jsr 12e5c <__floatsisf>
   120a0:	|  |  |      addq.l #4,sp
   120a2:	|  |  |      move.l d0,-(sp)
   120a4:	|  |  |      move.l 12(sp),-(sp)
   120a8:	|  |  |      jsr 12ffe <__lesf2>
   120ae:	|  |  |      addq.l #8,sp
   120b0:	|  |  |      tst.l d0
   120b2:	|  |  |  /-- bgt.w 1216c <pointInFloorPolygon+0x208>
   120b6:	|  |  |  |   move.l 48(sp),-(sp)
   120ba:	|  |  |  |   jsr 12e5c <__floatsisf>
   120c0:	|  |  |  |   addq.l #4,sp
   120c2:	|  |  |  |   move.l d0,-(sp)
   120c4:	|  |  |  |   move.l 20(sp),-(sp)
   120c8:	|  |  |  |   jsr 12fc8 <__gtsf2>
   120ce:	|  |  |  |   addq.l #8,sp
   120d0:	|  |  |  |   tst.l d0
   120d2:	|  |  |  +-- ble.w 1216c <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   120d6:	|  |  \--|-> move.l 44(sp),-(sp)
   120da:	|  |     |   jsr 12e5c <__floatsisf>
   120e0:	|  |     |   addq.l #4,sp
   120e2:	|  |     |   move.l d0,d3
   120e4:	|  |     |   move.l 20(sp),-(sp)
   120e8:	|  |     |   move.l 16(sp),-(sp)
   120ec:	|  |     |   jsr 13150 <__subsf3>
   120f2:	|  |     |   addq.l #8,sp
   120f4:	|  |     |   move.l d0,d2
   120f6:	|  |     |   move.l 48(sp),-(sp)
   120fa:	|  |     |   jsr 12e5c <__floatsisf>
   12100:	|  |     |   addq.l #4,sp
   12102:	|  |     |   move.l 16(sp),-(sp)
   12106:	|  |     |   move.l d0,-(sp)
   12108:	|  |     |   jsr 13150 <__subsf3>
   1210e:	|  |     |   addq.l #8,sp
   12110:	|  |     |   move.l d0,-(sp)
   12112:	|  |     |   move.l d2,-(sp)
   12114:	|  |     |   jsr 12f0e <__mulsf3>
   1211a:	|  |     |   addq.l #8,sp
   1211c:	|  |     |   move.l d0,d2
   1211e:	|  |     |   move.l 16(sp),-(sp)
   12122:	|  |     |   move.l 12(sp),-(sp)
   12126:	|  |     |   jsr 13150 <__subsf3>
   1212c:	|  |     |   addq.l #8,sp
   1212e:	|  |     |   move.l d0,-(sp)
   12130:	|  |     |   move.l d2,-(sp)
   12132:	|  |     |   jsr 12d08 <__divsf3>
   12138:	|  |     |   addq.l #8,sp
   1213a:	|  |     |   move.l 20(sp),-(sp)
   1213e:	|  |     |   move.l d0,-(sp)
   12140:	|  |     |   jsr 12c0e <__addsf3>
   12146:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   12148:	|  |     |   move.l d0,-(sp)
   1214a:	|  |     |   move.l d3,-(sp)
   1214c:	|  |     |   jsr 13082 <__ltsf2>
   12152:	|  |     |   addq.l #8,sp
   12154:	|  |     |   tst.l d0
   12156:	|  |     +-- bge.s 1216c <pointInFloorPolygon+0x208>

			c = !c;
   12158:	|  |     |   tst.l 24(sp)
   1215c:	|  |     |   seq d0
   1215e:	|  |     |   neg.b d0
   12160:	|  |     |   move.b d0,d0
   12162:	|  |     |   andi.l #255,d0
   12168:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1216c:	|  |     \-> move.l 32(sp),d0
   12170:	|  |         move.l d0,d1
   12172:	|  |         addq.l #1,d1
   12174:	|  |         move.l d1,32(sp)
   12178:	|  |         move.l d0,28(sp)
   1217c:	|  \-------> movea.l 40(sp),a0
   12180:	|            move.l (a0),d0
   12182:	|            cmp.l 32(sp),d0
   12186:	\----------- bgt.w 11f86 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   1218a:	             tst.l 24(sp)
   1218e:	             sne d0
   12190:	             neg.b d0
   12192:	             move.b d0,d0
   12194:	             andi.w #255,d0
}
   12198:	             move.l (sp)+,d2
   1219a:	             move.l (sp)+,d3
   1219c:	             lea 28(sp),sp
   121a0:	             rts

000121a2 <setFloor>:

BOOL setFloor (int fileNum) {
   121a2:	                               lea -132(sp),sp
   121a6:	                               move.l a6,-(sp)
   121a8:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   121aa:	                               jsr 11e0a <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   121b0:	                               move.l 144(sp),-(sp)
   121b4:	                               jsr 446c <openFileFromNum>
   121ba:	                               addq.l #4,sp
   121bc:	                               tst.l d0
   121be:	                           /-- bne.s 121c6 <setFloor+0x24>
   121c0:	                           |   clr.w d0
   121c2:	/--------------------------|-- bra.w 12912 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   121c6:	|                          \-> movea.l 19d54 <currentFloor>,a0
   121cc:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   121d0:	|                              move.l 19c34 <bigDataFile>,118(sp)
   121d8:	|                              move.l 19c54 <DOSBase>,d0
   121de:	|                              movea.l d0,a6
   121e0:	|                              move.l 118(sp),d1
   121e4:	|                              jsr -306(a6)
   121e8:	|                              move.l d0,114(sp)
   121ec:	|                              move.l 114(sp),d0
   121f0:	|                              movea.l 19d54 <currentFloor>,a0
   121f6:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   121fa:	|                              movea.l 19d54 <currentFloor>,a0
   12200:	|                              move.l 8(a0),d0
   12204:	|                              lsl.l #3,d0
   12206:	|                              move.l d0,110(sp)
   1220a:	|                              clr.l 106(sp)
   1220e:	|                              move.l 19c4c <SysBase>,d0
   12214:	|                              movea.l d0,a6
   12216:	|                              move.l 110(sp),d0
   1221a:	|                              move.l 106(sp),d1
   1221e:	|                              jsr -684(a6)
   12222:	|                              move.l d0,102(sp)
   12226:	|                              move.l 102(sp),d0
   1222a:	|                              movea.l 19d54 <currentFloor>,a0
   12230:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   12234:	|                              movea.l 19d54 <currentFloor>,a0
   1223a:	|                              move.l 12(a0),d0
   1223e:	|                          /-- bne.s 12254 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   12240:	|                          |   pea 1694b <main_sludge.c.2f5c5368+0xe71>
   12246:	|                          |   jsr 12a04 <KPrintF>
   1224c:	|                          |   addq.l #4,sp
		return FALSE;
   1224e:	|                          |   clr.w d0
   12250:	+--------------------------|-- bra.w 12912 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12254:	|                          \-> clr.l 136(sp)
   12258:	|                    /-------- bra.w 12370 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1225c:	|                 /--|-------> move.l 19c34 <bigDataFile>,26(sp)
   12264:	|                 |  |         move.l 19c54 <DOSBase>,d0
   1226a:	|                 |  |         movea.l d0,a6
   1226c:	|                 |  |         move.l 26(sp),d1
   12270:	|                 |  |         jsr -306(a6)
   12274:	|                 |  |         move.l d0,22(sp)
   12278:	|                 |  |         move.l 22(sp),d1
   1227c:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   12282:	|                 |  |         movea.l 12(a0),a0
   12286:	|                 |  |         move.l 136(sp),d0
   1228a:	|                 |  |         lsl.l #3,d0
   1228c:	|                 |  |         adda.l d0,a0
   1228e:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   12290:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   12296:	|                 |  |         move.l 12(a0),d1
   1229a:	|                 |  |         move.l 136(sp),d0
   1229e:	|                 |  |         lsl.l #3,d0
   122a0:	|                 |  |         movea.l d1,a0
   122a2:	|                 |  |         adda.l d0,a0
   122a4:	|                 |  |         move.l (a0),d0
   122a6:	|                 |  |         add.l d0,d0
   122a8:	|                 |  |         add.l d0,d0
   122aa:	|                 |  |         move.l d0,18(sp)
   122ae:	|                 |  |         clr.l 14(sp)
   122b2:	|                 |  |         move.l 19c4c <SysBase>,d0
   122b8:	|                 |  |         movea.l d0,a6
   122ba:	|                 |  |         move.l 18(sp),d0
   122be:	|                 |  |         move.l 14(sp),d1
   122c2:	|                 |  |         jsr -684(a6)
   122c6:	|                 |  |         move.l d0,10(sp)
   122ca:	|                 |  |         move.l 10(sp),d1
   122ce:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   122d4:	|                 |  |         movea.l 12(a0),a0
   122d8:	|                 |  |         move.l 136(sp),d0
   122dc:	|                 |  |         lsl.l #3,d0
   122de:	|                 |  |         adda.l d0,a0
   122e0:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   122e4:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   122ea:	|                 |  |         move.l 12(a0),d1
   122ee:	|                 |  |         move.l 136(sp),d0
   122f2:	|                 |  |         lsl.l #3,d0
   122f4:	|                 |  |         movea.l d1,a0
   122f6:	|                 |  |         adda.l d0,a0
   122f8:	|                 |  |         move.l 4(a0),d0
   122fc:	|                 |  |     /-- bne.s 12312 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   122fe:	|                 |  |     |   pea 1694b <main_sludge.c.2f5c5368+0xe71>
   12304:	|                 |  |     |   jsr 12a04 <KPrintF>
   1230a:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1230c:	|                 |  |     |   clr.w d0
   1230e:	+-----------------|--|-----|-- bra.w 12912 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   12312:	|                 |  |     \-> clr.l 132(sp)
   12316:	|                 |  |     /-- bra.s 12350 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   12318:	|                 |  |  /--|-> move.l 19c34 <bigDataFile>,d1
   1231e:	|                 |  |  |  |   movea.l 19d54 <currentFloor>,a0
   12324:	|                 |  |  |  |   movea.l 12(a0),a0
   12328:	|                 |  |  |  |   move.l 136(sp),d0
   1232c:	|                 |  |  |  |   lsl.l #3,d0
   1232e:	|                 |  |  |  |   adda.l d0,a0
   12330:	|                 |  |  |  |   movea.l 4(a0),a0
   12334:	|                 |  |  |  |   move.l 132(sp),d0
   12338:	|                 |  |  |  |   add.l d0,d0
   1233a:	|                 |  |  |  |   add.l d0,d0
   1233c:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   12340:	|                 |  |  |  |   move.l d1,-(sp)
   12342:	|                 |  |  |  |   jsr 6bc <get2bytes>
   12348:	|                 |  |  |  |   addq.l #4,sp
   1234a:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1234c:	|                 |  |  |  |   addq.l #1,132(sp)
   12350:	|                 |  |  |  \-> movea.l 19d54 <currentFloor>,a0
   12356:	|                 |  |  |      move.l 12(a0),d1
   1235a:	|                 |  |  |      move.l 136(sp),d0
   1235e:	|                 |  |  |      lsl.l #3,d0
   12360:	|                 |  |  |      movea.l d1,a0
   12362:	|                 |  |  |      adda.l d0,a0
   12364:	|                 |  |  |      move.l (a0),d0
   12366:	|                 |  |  |      cmp.l 132(sp),d0
   1236a:	|                 |  |  \----- bgt.s 12318 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1236c:	|                 |  |         addq.l #1,136(sp)
   12370:	|                 |  \-------> movea.l 19d54 <currentFloor>,a0
   12376:	|                 |            move.l 8(a0),d0
   1237a:	|                 |            cmp.l 136(sp),d0
   1237e:	|                 \----------- bgt.w 1225c <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   12382:	|                              move.l 19c34 <bigDataFile>,d0
   12388:	|                              move.l d0,-(sp)
   1238a:	|                              jsr 6bc <get2bytes>
   12390:	|                              addq.l #4,sp
   12392:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   12396:	|                              move.l 136(sp),d0
   1239a:	|                              lsl.l #3,d0
   1239c:	|                              move.l d0,98(sp)
   123a0:	|                              clr.l 94(sp)
   123a4:	|                              move.l 19c4c <SysBase>,d0
   123aa:	|                              movea.l d0,a6
   123ac:	|                              move.l 98(sp),d0
   123b0:	|                              move.l 94(sp),d1
   123b4:	|                              jsr -684(a6)
   123b8:	|                              move.l d0,90(sp)
   123bc:	|                              move.l 90(sp),d0
   123c0:	|                              movea.l 19d54 <currentFloor>,a0
   123c6:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   123ca:	|                              movea.l 19d54 <currentFloor>,a0
   123d0:	|                              move.l 4(a0),d0
   123d4:	|                          /-- bne.s 123ea <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   123d6:	|                          |   pea 1694b <main_sludge.c.2f5c5368+0xe71>
   123dc:	|                          |   jsr 12a04 <KPrintF>
   123e2:	|                          |   addq.l #4,sp
		return FALSE;
   123e4:	|                          |   clr.w d0
   123e6:	+--------------------------|-- bra.w 12912 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   123ea:	|                          \-> clr.l 132(sp)
   123ee:	|                          /-- bra.s 12442 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   123f0:	|                       /--|-> move.l 19c34 <bigDataFile>,d1
   123f6:	|                       |  |   movea.l 19d54 <currentFloor>,a0
   123fc:	|                       |  |   movea.l 4(a0),a0
   12400:	|                       |  |   move.l 132(sp),d0
   12404:	|                       |  |   lsl.l #3,d0
   12406:	|                       |  |   lea (0,a0,d0.l),a2
   1240a:	|                       |  |   move.l d1,-(sp)
   1240c:	|                       |  |   jsr 6bc <get2bytes>
   12412:	|                       |  |   addq.l #4,sp
   12414:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   12416:	|                       |  |   move.l 19c34 <bigDataFile>,d1
   1241c:	|                       |  |   movea.l 19d54 <currentFloor>,a0
   12422:	|                       |  |   movea.l 4(a0),a0
   12426:	|                       |  |   move.l 132(sp),d0
   1242a:	|                       |  |   lsl.l #3,d0
   1242c:	|                       |  |   lea (0,a0,d0.l),a2
   12430:	|                       |  |   move.l d1,-(sp)
   12432:	|                       |  |   jsr 6bc <get2bytes>
   12438:	|                       |  |   addq.l #4,sp
   1243a:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   1243e:	|                       |  |   addq.l #1,132(sp)
   12442:	|                       |  \-> move.l 132(sp),d0
   12446:	|                       |      cmp.l 136(sp),d0
   1244a:	|                       \----- blt.s 123f0 <setFloor+0x24e>
	}

	finishAccess ();
   1244c:	|                              jsr 4364 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   12452:	|                              movea.l 19d54 <currentFloor>,a0
   12458:	|                              move.l 8(a0),d0
   1245c:	|                              add.l d0,d0
   1245e:	|                              add.l d0,d0
   12460:	|                              move.l d0,86(sp)
   12464:	|                              clr.l 82(sp)
   12468:	|                              move.l 19c4c <SysBase>,d0
   1246e:	|                              movea.l d0,a6
   12470:	|                              move.l 86(sp),d0
   12474:	|                              move.l 82(sp),d1
   12478:	|                              jsr -684(a6)
   1247c:	|                              move.l d0,78(sp)
   12480:	|                              move.l 78(sp),d0
   12484:	|                              movea.l 19d54 <currentFloor>,a0
   1248a:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1248e:	|                              movea.l 19d54 <currentFloor>,a0
   12494:	|                              move.l 8(a0),d0
   12498:	|                              add.l d0,d0
   1249a:	|                              add.l d0,d0
   1249c:	|                              move.l d0,74(sp)
   124a0:	|                              clr.l 70(sp)
   124a4:	|                              move.l 19c4c <SysBase>,d0
   124aa:	|                              movea.l d0,a6
   124ac:	|                              move.l 74(sp),d0
   124b0:	|                              move.l 70(sp),d1
   124b4:	|                              jsr -684(a6)
   124b8:	|                              move.l d0,66(sp)
   124bc:	|                              move.l 66(sp),d0
   124c0:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   124c4:	|                              movea.l 19d54 <currentFloor>,a0
   124ca:	|                              move.l 16(a0),d0
   124ce:	|                          /-- bne.s 124e4 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   124d0:	|                          |   pea 1694b <main_sludge.c.2f5c5368+0xe71>
   124d6:	|                          |   jsr 12a04 <KPrintF>
   124dc:	|                          |   addq.l #4,sp
		return FALSE;
   124de:	|                          |   clr.w d0
   124e0:	+--------------------------|-- bra.w 12912 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   124e4:	|                          \-> clr.l 136(sp)
   124e8:	|                    /-------- bra.w 1260c <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   124ec:	|                 /--|-------> movea.l 19d54 <currentFloor>,a0
   124f2:	|                 |  |         move.l 8(a0),d0
   124f6:	|                 |  |         add.l d0,d0
   124f8:	|                 |  |         add.l d0,d0
   124fa:	|                 |  |         move.l d0,50(sp)
   124fe:	|                 |  |         clr.l 46(sp)
   12502:	|                 |  |         move.l 19c4c <SysBase>,d0
   12508:	|                 |  |         movea.l d0,a6
   1250a:	|                 |  |         move.l 50(sp),d0
   1250e:	|                 |  |         move.l 46(sp),d1
   12512:	|                 |  |         jsr -684(a6)
   12516:	|                 |  |         move.l d0,42(sp)
   1251a:	|                 |  |         move.l 42(sp),d0
   1251e:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   12524:	|                 |  |         movea.l 16(a0),a0
   12528:	|                 |  |         move.l 136(sp),d1
   1252c:	|                 |  |         add.l d1,d1
   1252e:	|                 |  |         add.l d1,d1
   12530:	|                 |  |         adda.l d1,a0
   12532:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   12534:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   1253a:	|                 |  |         move.l 8(a0),d0
   1253e:	|                 |  |         add.l d0,d0
   12540:	|                 |  |         add.l d0,d0
   12542:	|                 |  |         move.l d0,38(sp)
   12546:	|                 |  |         clr.l 34(sp)
   1254a:	|                 |  |         move.l 19c4c <SysBase>,d0
   12550:	|                 |  |         movea.l d0,a6
   12552:	|                 |  |         move.l 38(sp),d0
   12556:	|                 |  |         move.l 34(sp),d1
   1255a:	|                 |  |         jsr -684(a6)
   1255e:	|                 |  |         move.l d0,30(sp)
   12562:	|                 |  |         move.l 30(sp),d1
   12566:	|                 |  |         move.l 136(sp),d0
   1256a:	|                 |  |         add.l d0,d0
   1256c:	|                 |  |         add.l d0,d0
   1256e:	|                 |  |         movea.l 62(sp),a0
   12572:	|                 |  |         adda.l d0,a0
   12574:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   12576:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   1257c:	|                 |  |         move.l 16(a0),d1
   12580:	|                 |  |         move.l 136(sp),d0
   12584:	|                 |  |         add.l d0,d0
   12586:	|                 |  |         add.l d0,d0
   12588:	|                 |  |         movea.l d1,a0
   1258a:	|                 |  |         adda.l d0,a0
   1258c:	|                 |  |         move.l (a0),d0
   1258e:	|                 |  |     /-- bne.s 125a4 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   12590:	|                 |  |     |   pea 1694b <main_sludge.c.2f5c5368+0xe71>
   12596:	|                 |  |     |   jsr 12a04 <KPrintF>
   1259c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1259e:	|                 |  |     |   clr.w d0
   125a0:	+-----------------|--|-----|-- bra.w 12912 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   125a4:	|                 |  |     \-> clr.l 132(sp)
   125a8:	|                 |  |     /-- bra.s 125f8 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   125aa:	|                 |  |  /--|-> movea.l 19d54 <currentFloor>,a0
   125b0:	|                 |  |  |  |   move.l 16(a0),d1
   125b4:	|                 |  |  |  |   move.l 136(sp),d0
   125b8:	|                 |  |  |  |   add.l d0,d0
   125ba:	|                 |  |  |  |   add.l d0,d0
   125bc:	|                 |  |  |  |   movea.l d1,a0
   125be:	|                 |  |  |  |   adda.l d0,a0
   125c0:	|                 |  |  |  |   move.l (a0),d1
   125c2:	|                 |  |  |  |   move.l 132(sp),d0
   125c6:	|                 |  |  |  |   add.l d0,d0
   125c8:	|                 |  |  |  |   add.l d0,d0
   125ca:	|                 |  |  |  |   movea.l d1,a0
   125cc:	|                 |  |  |  |   adda.l d0,a0
   125ce:	|                 |  |  |  |   moveq #-1,d1
   125d0:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   125d2:	|                 |  |  |  |   move.l 136(sp),d0
   125d6:	|                 |  |  |  |   add.l d0,d0
   125d8:	|                 |  |  |  |   add.l d0,d0
   125da:	|                 |  |  |  |   movea.l 62(sp),a0
   125de:	|                 |  |  |  |   adda.l d0,a0
   125e0:	|                 |  |  |  |   move.l (a0),d1
   125e2:	|                 |  |  |  |   move.l 132(sp),d0
   125e6:	|                 |  |  |  |   add.l d0,d0
   125e8:	|                 |  |  |  |   add.l d0,d0
   125ea:	|                 |  |  |  |   movea.l d1,a0
   125ec:	|                 |  |  |  |   adda.l d0,a0
   125ee:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   125f4:	|                 |  |  |  |   addq.l #1,132(sp)
   125f8:	|                 |  |  |  \-> movea.l 19d54 <currentFloor>,a0
   125fe:	|                 |  |  |      move.l 8(a0),d0
   12602:	|                 |  |  |      cmp.l 132(sp),d0
   12606:	|                 |  |  \----- bgt.s 125aa <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12608:	|                 |  |         addq.l #1,136(sp)
   1260c:	|                 |  \-------> movea.l 19d54 <currentFloor>,a0
   12612:	|                 |            move.l 8(a0),d0
   12616:	|                 |            cmp.l 136(sp),d0
   1261a:	|                 \----------- bgt.w 124ec <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1261e:	|                              clr.l 136(sp)
   12622:	|              /-------------- bra.w 12728 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12626:	|           /--|-------------> clr.l 132(sp)
   1262a:	|           |  |     /-------- bra.w 12712 <setFloor+0x570>
			if (i != j) {
   1262e:	|           |  |  /--|-------> move.l 136(sp),d0
   12632:	|           |  |  |  |         cmp.l 132(sp),d0
   12636:	|           |  |  |  |     /-- beq.w 126c8 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   1263a:	|           |  |  |  |     |   movea.l 19d54 <currentFloor>,a0
   12640:	|           |  |  |  |     |   move.l 12(a0),d1
   12644:	|           |  |  |  |     |   move.l 132(sp),d0
   12648:	|           |  |  |  |     |   lsl.l #3,d0
   1264a:	|           |  |  |  |     |   movea.l d1,a1
   1264c:	|           |  |  |  |     |   adda.l d0,a1
   1264e:	|           |  |  |  |     |   movea.l 19d54 <currentFloor>,a0
   12654:	|           |  |  |  |     |   move.l 12(a0),d1
   12658:	|           |  |  |  |     |   move.l 136(sp),d0
   1265c:	|           |  |  |  |     |   lsl.l #3,d0
   1265e:	|           |  |  |  |     |   movea.l d1,a0
   12660:	|           |  |  |  |     |   adda.l d0,a0
   12662:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   12666:	|           |  |  |  |     |   move.l (a1),-(sp)
   12668:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   1266c:	|           |  |  |  |     |   move.l (a0),-(sp)
   1266e:	|           |  |  |  |     |   jsr 11efa <polysShareSide>
   12674:	|           |  |  |  |     |   lea 16(sp),sp
   12678:	|           |  |  |  |     |   tst.w d0
   1267a:	|           |  |  |  |  /--|-- beq.w 1270e <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   1267e:	|           |  |  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   12684:	|           |  |  |  |  |  |   move.l 16(a0),d1
   12688:	|           |  |  |  |  |  |   move.l 136(sp),d0
   1268c:	|           |  |  |  |  |  |   add.l d0,d0
   1268e:	|           |  |  |  |  |  |   add.l d0,d0
   12690:	|           |  |  |  |  |  |   movea.l d1,a0
   12692:	|           |  |  |  |  |  |   adda.l d0,a0
   12694:	|           |  |  |  |  |  |   move.l (a0),d1
   12696:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1269a:	|           |  |  |  |  |  |   add.l d0,d0
   1269c:	|           |  |  |  |  |  |   add.l d0,d0
   1269e:	|           |  |  |  |  |  |   movea.l d1,a0
   126a0:	|           |  |  |  |  |  |   adda.l d0,a0
   126a2:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   126a6:	|           |  |  |  |  |  |   move.l 136(sp),d0
   126aa:	|           |  |  |  |  |  |   add.l d0,d0
   126ac:	|           |  |  |  |  |  |   add.l d0,d0
   126ae:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   126b2:	|           |  |  |  |  |  |   adda.l d0,a0
   126b4:	|           |  |  |  |  |  |   move.l (a0),d1
   126b6:	|           |  |  |  |  |  |   move.l 132(sp),d0
   126ba:	|           |  |  |  |  |  |   add.l d0,d0
   126bc:	|           |  |  |  |  |  |   add.l d0,d0
   126be:	|           |  |  |  |  |  |   movea.l d1,a0
   126c0:	|           |  |  |  |  |  |   adda.l d0,a0
   126c2:	|           |  |  |  |  |  |   moveq #1,d1
   126c4:	|           |  |  |  |  |  |   move.l d1,(a0)
   126c6:	|           |  |  |  |  +--|-- bra.s 1270e <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   126c8:	|           |  |  |  |  |  \-> movea.l 19d54 <currentFloor>,a0
   126ce:	|           |  |  |  |  |      move.l 16(a0),d1
   126d2:	|           |  |  |  |  |      move.l 136(sp),d0
   126d6:	|           |  |  |  |  |      add.l d0,d0
   126d8:	|           |  |  |  |  |      add.l d0,d0
   126da:	|           |  |  |  |  |      movea.l d1,a0
   126dc:	|           |  |  |  |  |      adda.l d0,a0
   126de:	|           |  |  |  |  |      move.l (a0),d1
   126e0:	|           |  |  |  |  |      move.l 132(sp),d0
   126e4:	|           |  |  |  |  |      add.l d0,d0
   126e6:	|           |  |  |  |  |      add.l d0,d0
   126e8:	|           |  |  |  |  |      movea.l d1,a0
   126ea:	|           |  |  |  |  |      adda.l d0,a0
   126ec:	|           |  |  |  |  |      moveq #-2,d0
   126ee:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   126f0:	|           |  |  |  |  |      move.l 136(sp),d0
   126f4:	|           |  |  |  |  |      add.l d0,d0
   126f6:	|           |  |  |  |  |      add.l d0,d0
   126f8:	|           |  |  |  |  |      movea.l 62(sp),a0
   126fc:	|           |  |  |  |  |      adda.l d0,a0
   126fe:	|           |  |  |  |  |      move.l (a0),d1
   12700:	|           |  |  |  |  |      move.l 132(sp),d0
   12704:	|           |  |  |  |  |      add.l d0,d0
   12706:	|           |  |  |  |  |      add.l d0,d0
   12708:	|           |  |  |  |  |      movea.l d1,a0
   1270a:	|           |  |  |  |  |      adda.l d0,a0
   1270c:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1270e:	|           |  |  |  |  \----> addq.l #1,132(sp)
   12712:	|           |  |  |  \-------> movea.l 19d54 <currentFloor>,a0
   12718:	|           |  |  |            move.l 8(a0),d0
   1271c:	|           |  |  |            cmp.l 132(sp),d0
   12720:	|           |  |  \----------- bgt.w 1262e <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12724:	|           |  |               addq.l #1,136(sp)
   12728:	|           |  \-------------> movea.l 19d54 <currentFloor>,a0
   1272e:	|           |                  move.l 8(a0),d0
   12732:	|           |                  cmp.l 136(sp),d0
   12736:	|           \----------------- bgt.w 12626 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   1273a:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   1273e:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   12742:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12746:	|  |                           clr.l 136(sp)
   1274a:	|  |     /-------------------- bra.w 128a0 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1274e:	|  |  /--|-------------------> clr.l 132(sp)
   12752:	|  |  |  |     /-------------- bra.w 1288a <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   12756:	|  |  |  |  /--|-------------> movea.l 19d54 <currentFloor>,a0
   1275c:	|  |  |  |  |  |               move.l 16(a0),d1
   12760:	|  |  |  |  |  |               move.l 136(sp),d0
   12764:	|  |  |  |  |  |               add.l d0,d0
   12766:	|  |  |  |  |  |               add.l d0,d0
   12768:	|  |  |  |  |  |               movea.l d1,a0
   1276a:	|  |  |  |  |  |               adda.l d0,a0
   1276c:	|  |  |  |  |  |               move.l (a0),d1
   1276e:	|  |  |  |  |  |               move.l 132(sp),d0
   12772:	|  |  |  |  |  |               add.l d0,d0
   12774:	|  |  |  |  |  |               add.l d0,d0
   12776:	|  |  |  |  |  |               movea.l d1,a0
   12778:	|  |  |  |  |  |               adda.l d0,a0
   1277a:	|  |  |  |  |  |               move.l (a0),d0
   1277c:	|  |  |  |  |  |               moveq #-1,d1
   1277e:	|  |  |  |  |  |               cmp.l d0,d1
   12780:	|  |  |  |  |  |  /----------- bne.w 12886 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12784:	|  |  |  |  |  |  |            clr.l 122(sp)
   12788:	|  |  |  |  |  |  |     /----- bra.w 12874 <setFloor+0x6d2>
						if (d != i && d != j) {
   1278c:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   12790:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   12794:	|  |  |  |  |  |  |  |  |  /-- beq.w 12870 <setFloor+0x6ce>
   12798:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   1279c:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   127a0:	|  |  |  |  |  |  |  |  |  +-- beq.w 12870 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   127a4:	|  |  |  |  |  |  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   127aa:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   127ae:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   127b2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   127b4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   127b6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   127b8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   127ba:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   127bc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   127c0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   127c2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   127c4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   127c6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   127c8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   127ca:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   127ce:	|  |  |  |  |  |  |  |  |  +-- bne.w 12870 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   127d2:	|  |  |  |  |  |  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   127d8:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   127dc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   127e0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   127e2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   127e4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   127e6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   127e8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   127ea:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   127ee:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   127f0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   127f2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   127f4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   127f6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   127f8:	|  |  |  |  |  |  |  |  |  +-- bmi.s 12870 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   127fa:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   127fe:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12800:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12802:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   12806:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12808:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1280a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1280e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12810:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12812:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12814:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12816:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   12818:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   1281c:	|  |  |  |  |  |  |  |  |  +-- bgt.s 12870 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   1281e:	|  |  |  |  |  |  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   12824:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   12828:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1282c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1282e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12830:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12832:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12834:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12836:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1283a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1283c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1283e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12840:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12842:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   12846:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1284a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1284c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1284e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   12852:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12854:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   12856:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1285a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1285c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1285e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12860:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12862:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   12866:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   12868:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   1286a:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12870:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   12874:	|  |  |  |  |  |  |  |  \----> movea.l 19d54 <currentFloor>,a0
   1287a:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   1287e:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   12882:	|  |  |  |  |  |  |  \-------- bgt.w 1278c <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12886:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   1288a:	|  |  |  |  |  \-------------> movea.l 19d54 <currentFloor>,a0
   12890:	|  |  |  |  |                  move.l 8(a0),d0
   12894:	|  |  |  |  |                  cmp.l 132(sp),d0
   12898:	|  |  |  |  \----------------- bgt.w 12756 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1289c:	|  |  |  |                     addq.l #1,136(sp)
   128a0:	|  |  |  \-------------------> movea.l 19d54 <currentFloor>,a0
   128a6:	|  |  |                        move.l 8(a0),d0
   128aa:	|  |  |                        cmp.l 136(sp),d0
   128ae:	|  |  \----------------------- bgt.w 1274e <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   128b2:	|  |                           tst.w 130(sp)
   128b6:	|  \-------------------------- bne.w 1273e <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   128ba:	|                              clr.l 136(sp)
   128be:	|                          /-- bra.s 128e6 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   128c0:	|                       /--|-> move.l 136(sp),d0
   128c4:	|                       |  |   add.l d0,d0
   128c6:	|                       |  |   add.l d0,d0
   128c8:	|                       |  |   movea.l 62(sp),a0
   128cc:	|                       |  |   adda.l d0,a0
   128ce:	|                       |  |   move.l (a0),54(sp)
   128d2:	|                       |  |   move.l 19c4c <SysBase>,d0
   128d8:	|                       |  |   movea.l d0,a6
   128da:	|                       |  |   movea.l 54(sp),a1
   128de:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   128e2:	|                       |  |   addq.l #1,136(sp)
   128e6:	|                       |  \-> movea.l 19d54 <currentFloor>,a0
   128ec:	|                       |      move.l 8(a0),d0
   128f0:	|                       |      cmp.l 136(sp),d0
   128f4:	|                       \----- bgt.s 128c0 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   128f6:	|                              move.l 62(sp),58(sp)
   128fc:	|                              move.l 19c4c <SysBase>,d0
   12902:	|                              movea.l d0,a6
   12904:	|                              movea.l 58(sp),a1
   12908:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   1290c:	|                              clr.l 62(sp)

	return TRUE;
   12910:	|                              moveq #1,d0
}
   12912:	\----------------------------> movea.l (sp)+,a2
   12914:	                               movea.l (sp)+,a6
   12916:	                               lea 132(sp),sp
   1291a:	                               rts

0001291c <setFloorNull>:

void setFloorNull () {
	killFloor ();
   1291c:	jsr 11e0a <killFloor>
	noFloor ();
   12922:	jsr 11d2e <noFloor>
   12928:	nop
   1292a:	rts

0001292c <WaitVbl>:
void WaitVbl() {
   1292c:	       subq.l #8,sp
	debug_start_idle();
   1292e:	       jsr 12bdc <debug_start_idle>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   12934:	   /-> movea.l #14675972,a0
   1293a:	   |   move.l (a0),d0
   1293c:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   1293e:	   |   move.l (sp),d0
   12940:	   |   andi.l #130816,d0
   12946:	   |   move.l d0,(sp)
		if (vpos!=(311<<8))
   12948:	   |   move.l (sp),d0
   1294a:	   |   cmpi.l #79616,d0
   12950:	   \-- beq.s 12934 <WaitVbl+0x8>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   12952:	/----> movea.l #14675972,a0
   12958:	|      move.l (a0),d0
   1295a:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   1295e:	|      move.l 4(sp),d0
   12962:	|      andi.l #130816,d0
   12968:	|      move.l d0,4(sp)
		if (vpos==(311<<8))
   1296c:	|      move.l 4(sp),d0
   12970:	|      cmpi.l #79616,d0
   12976:	|  /-- beq.s 1297a <WaitVbl+0x4e>
	while (1) {
   12978:	\--|-- bra.s 12952 <WaitVbl+0x26>
			break;
   1297a:	   \-> nop
	debug_stop_idle();
   1297c:	       jsr 12bf6 <debug_stop_idle>
}
   12982:	       nop
   12984:	       addq.l #8,sp
   12986:	       rts

00012988 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   12988:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   1298a:	       move.l 8(sp),(sp)
	while(len-- > 0)
   1298e:	   /-- bra.s 129a0 <memset+0x18>
		*ptr++ = val;
   12990:	/--|-> move.l (sp),d0
   12992:	|  |   move.l d0,d1
   12994:	|  |   addq.l #1,d1
   12996:	|  |   move.l d1,(sp)
   12998:	|  |   move.l 12(sp),d1
   1299c:	|  |   movea.l d0,a0
   1299e:	|  |   move.b d1,(a0)
	while(len-- > 0)
   129a0:	|  \-> move.l 16(sp),d0
   129a4:	|      move.l d0,d1
   129a6:	|      subq.l #1,d1
   129a8:	|      move.l d1,16(sp)
   129ac:	|      tst.l d0
   129ae:	\----- bne.s 12990 <memset+0x8>
	return dest;
   129b0:	       move.l 8(sp),d0
}
   129b4:	       addq.l #4,sp
   129b6:	       rts

000129b8 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   129b8:	       subq.l #8,sp
   129ba:	       move.l d2,-(sp)
	char *d = (char *)dest;
   129bc:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   129c2:	       move.l 20(sp),4(sp)
	while(len--)
   129c8:	   /-- bra.s 129ea <memcpy+0x32>
		*d++ = *s++;
   129ca:	/--|-> move.l 4(sp),d1
   129ce:	|  |   move.l d1,d0
   129d0:	|  |   addq.l #1,d0
   129d2:	|  |   move.l d0,4(sp)
   129d6:	|  |   move.l 8(sp),d0
   129da:	|  |   move.l d0,d2
   129dc:	|  |   addq.l #1,d2
   129de:	|  |   move.l d2,8(sp)
   129e2:	|  |   movea.l d1,a0
   129e4:	|  |   move.b (a0),d1
   129e6:	|  |   movea.l d0,a0
   129e8:	|  |   move.b d1,(a0)
	while(len--)
   129ea:	|  \-> move.l 24(sp),d0
   129ee:	|      move.l d0,d1
   129f0:	|      subq.l #1,d1
   129f2:	|      move.l d1,24(sp)
   129f6:	|      tst.l d0
   129f8:	\----- bne.s 129ca <memcpy+0x12>
	return dest;
   129fa:	       move.l 16(sp),d0
}
   129fe:	       move.l (sp)+,d2
   12a00:	       addq.l #8,sp
   12a02:	       rts

00012a04 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   12a04:	       lea -128(sp),sp
   12a08:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12a0c:	       move.w f0ff60 <gcc8_c_support.c.8bf68f31+0xed1811>,d0
   12a12:	       cmpi.w #20153,d0
   12a16:	   /-- beq.s 12a3a <KPrintF+0x36>
   12a18:	   |   cmpi.w #-24562,d0
   12a1c:	   +-- beq.s 12a3a <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   12a1e:	   |   movea.l 19c4c <SysBase>,a6
   12a24:	   |   movea.l 144(sp),a0
   12a28:	   |   lea 148(sp),a1
   12a2c:	   |   lea 134be <KPutCharX>,a2
   12a32:	   |   suba.l a3,a3
   12a34:	   |   jsr -522(a6)
}
   12a38:	/--|-- bra.s 12a64 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   12a3a:	|  \-> movea.l 19c4c <SysBase>,a6
   12a40:	|      movea.l 144(sp),a0
   12a44:	|      lea 148(sp),a1
   12a48:	|      lea 134cc <PutChar>,a2
   12a4e:	|      lea 12(sp),a3
   12a52:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   12a56:	|      move.l a3,-(sp)
   12a58:	|      pea 56 <_start+0x56>
   12a5c:	|      jsr f0ff60 <gcc8_c_support.c.8bf68f31+0xed1811>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12a62:	|      addq.l #8,sp
}
   12a64:	\----> movem.l (sp)+,a2-a3/a6
   12a68:	       lea 128(sp),sp
   12a6c:	       rts

00012a6e <warpmode>:

void warpmode(int on) { // bool
   12a6e:	          subq.l #8,sp
	long(*UaeConf)(long mode, int index, const char* param, int param_len, char* outbuf, int outbuf_len);
	UaeConf = (long(*)(long, int, const char*, int, char*, int))0xf0ff60;
   12a70:	          move.l #15794016,4(sp)
	if(*((UWORD *)UaeConf) == 0x4eb9 || *((UWORD *)UaeConf) == 0xa00e) {
   12a78:	          movea.l 4(sp),a0
   12a7c:	          move.w (a0),d0
   12a7e:	          cmpi.w #20153,d0
   12a82:	      /-- beq.s 12a92 <warpmode+0x24>
   12a84:	      |   movea.l 4(sp),a0
   12a88:	      |   move.w (a0),d0
   12a8a:	      |   cmpi.w #-24562,d0
   12a8e:	/-----|-- bne.w 12b96 <warpmode+0x128>
		char outbuf;
		UaeConf(82, -1, on ? "cpu_speed max" : "cpu_speed real", 0, &outbuf, 1);
   12a92:	|     \-> tst.l 12(sp)
   12a96:	|  /----- beq.s 12aa0 <warpmode+0x32>
   12a98:	|  |      move.l #92524,d0
   12a9e:	|  |  /-- bra.s 12aa6 <warpmode+0x38>
   12aa0:	|  \--|-> move.l #92538,d0
   12aa6:	|     \-> pea 1 <_start+0x1>
   12aaa:	|         move.l sp,d1
   12aac:	|         addq.l #7,d1
   12aae:	|         move.l d1,-(sp)
   12ab0:	|         clr.l -(sp)
   12ab2:	|         move.l d0,-(sp)
   12ab4:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc18b0>
   12ab8:	|         pea 52 <_start+0x52>
   12abc:	|         movea.l 28(sp),a0
   12ac0:	|         jsr (a0)
   12ac2:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_cycle_exact false" : "cpu_cycle_exact true", 0, &outbuf, 1);
   12ac6:	|         tst.l 12(sp)
   12aca:	|  /----- beq.s 12ad4 <warpmode+0x66>
   12acc:	|  |      move.l #92553,d0
   12ad2:	|  |  /-- bra.s 12ada <warpmode+0x6c>
   12ad4:	|  \--|-> move.l #92575,d0
   12ada:	|     \-> pea 1 <_start+0x1>
   12ade:	|         move.l sp,d1
   12ae0:	|         addq.l #7,d1
   12ae2:	|         move.l d1,-(sp)
   12ae4:	|         clr.l -(sp)
   12ae6:	|         move.l d0,-(sp)
   12ae8:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc18b0>
   12aec:	|         pea 52 <_start+0x52>
   12af0:	|         movea.l 28(sp),a0
   12af4:	|         jsr (a0)
   12af6:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_memory_cycle_exact false" : "cpu_memory_cycle_exact true", 0, &outbuf, 1);
   12afa:	|         tst.l 12(sp)
   12afe:	|  /----- beq.s 12b08 <warpmode+0x9a>
   12b00:	|  |      move.l #92596,d0
   12b06:	|  |  /-- bra.s 12b0e <warpmode+0xa0>
   12b08:	|  \--|-> move.l #92625,d0
   12b0e:	|     \-> pea 1 <_start+0x1>
   12b12:	|         move.l sp,d1
   12b14:	|         addq.l #7,d1
   12b16:	|         move.l d1,-(sp)
   12b18:	|         clr.l -(sp)
   12b1a:	|         move.l d0,-(sp)
   12b1c:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc18b0>
   12b20:	|         pea 52 <_start+0x52>
   12b24:	|         movea.l 28(sp),a0
   12b28:	|         jsr (a0)
   12b2a:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
   12b2e:	|         tst.l 12(sp)
   12b32:	|  /----- beq.s 12b3c <warpmode+0xce>
   12b34:	|  |      move.l #92653,d0
   12b3a:	|  |  /-- bra.s 12b42 <warpmode+0xd4>
   12b3c:	|  \--|-> move.l #92679,d0
   12b42:	|     \-> pea 1 <_start+0x1>
   12b46:	|         move.l sp,d1
   12b48:	|         addq.l #7,d1
   12b4a:	|         move.l d1,-(sp)
   12b4c:	|         clr.l -(sp)
   12b4e:	|         move.l d0,-(sp)
   12b50:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc18b0>
   12b54:	|         pea 52 <_start+0x52>
   12b58:	|         movea.l 28(sp),a0
   12b5c:	|         jsr (a0)
   12b5e:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
   12b62:	|         tst.l 12(sp)
   12b66:	|  /----- beq.s 12b70 <warpmode+0x102>
   12b68:	|  |      move.l #92704,d0
   12b6e:	|  |  /-- bra.s 12b76 <warpmode+0x108>
   12b70:	|  \--|-> move.l #92714,d0
   12b76:	|     \-> pea 1 <_start+0x1>
   12b7a:	|         move.l sp,d1
   12b7c:	|         addq.l #7,d1
   12b7e:	|         move.l d1,-(sp)
   12b80:	|         clr.l -(sp)
   12b82:	|         move.l d0,-(sp)
   12b84:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc18b0>
   12b88:	|         pea 52 <_start+0x52>
   12b8c:	|         movea.l 28(sp),a0
   12b90:	|         jsr (a0)
   12b92:	|         lea 24(sp),sp
	}
}
   12b96:	\-------> nop
   12b98:	          addq.l #8,sp
   12b9a:	          rts

00012b9c <debug_cmd>:

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   12b9c:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   12b9e:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   12ba4:	       movea.l (sp),a0
   12ba6:	       move.w (a0),d0
   12ba8:	       cmpi.w #20153,d0
   12bac:	   /-- beq.s 12bb8 <debug_cmd+0x1c>
   12bae:	   |   movea.l (sp),a0
   12bb0:	   |   move.w (a0),d0
   12bb2:	   |   cmpi.w #-24562,d0
   12bb6:	/--|-- bne.s 12bd6 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   12bb8:	|  \-> move.l 20(sp),-(sp)
   12bbc:	|      move.l 20(sp),-(sp)
   12bc0:	|      move.l 20(sp),-(sp)
   12bc4:	|      move.l 20(sp),-(sp)
   12bc8:	|      pea 58 <_start+0x58>
   12bcc:	|      movea.l 20(sp),a0
   12bd0:	|      jsr (a0)
   12bd2:	|      lea 20(sp),sp
	}
}
   12bd6:	\----> nop
   12bd8:	       addq.l #4,sp
   12bda:	       rts

00012bdc <debug_start_idle>:
	debug_cmd(barto_cmd_text, (((unsigned int)left) << 16) | ((unsigned int)top), (unsigned int)text, color);
}

// profiler
void debug_start_idle() {
	debug_cmd(barto_cmd_set_idle, 1, 0, 0);
   12bdc:	clr.l -(sp)
   12bde:	clr.l -(sp)
   12be0:	pea 1 <_start+0x1>
   12be4:	pea 5 <_start+0x5>
   12be8:	jsr 12b9c <debug_cmd>
   12bee:	lea 16(sp),sp
}
   12bf2:	nop
   12bf4:	rts

00012bf6 <debug_stop_idle>:

void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
   12bf6:	clr.l -(sp)
   12bf8:	clr.l -(sp)
   12bfa:	clr.l -(sp)
   12bfc:	pea 5 <_start+0x5>
   12c00:	jsr 12b9c <debug_cmd>
   12c06:	lea 16(sp),sp
}
   12c0a:	nop
   12c0c:	rts

00012c0e <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   12c0e:	lea -12(sp),sp
   12c12:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   12c14:	move.l 20(sp),12(sp)
   12c1a:	move.l 24(sp),8(sp)
   12c20:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12c26:	movea.l d0,a6
   12c28:	move.l 12(sp),d0
   12c2c:	move.l 8(sp),d1
   12c30:	jsr -66(a6)
   12c34:	move.l d0,4(sp)
   12c38:	move.l 4(sp),d0
}
   12c3c:	movea.l (sp)+,a6
   12c3e:	lea 12(sp),sp
   12c42:	rts

00012c44 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   12c44:	lea -32(sp),sp
   12c48:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   12c4c:	move.l 48(sp),36(sp)
   12c52:	move.l 52(sp),40(sp)
   12c58:	move.l 56(sp),28(sp)
   12c5e:	move.l 60(sp),32(sp)
   12c64:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12c6a:	movea.l d0,a6
   12c6c:	move.l 36(sp),d0
   12c70:	move.l 40(sp),d1
   12c74:	move.l 28(sp),d2
   12c78:	move.l 32(sp),d3
   12c7c:	jsr -66(a6)
   12c80:	move.l d0,12(sp)
   12c84:	move.l d1,16(sp)
   12c88:	move.l 12(sp),20(sp)
   12c8e:	move.l 16(sp),24(sp)
   12c94:	move.l 20(sp),d0
   12c98:	move.l 24(sp),d1
}
   12c9c:	movem.l (sp)+,d2-d3/a6
   12ca0:	lea 32(sp),sp
   12ca4:	rts

00012ca6 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   12ca6:	lea -32(sp),sp
   12caa:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   12cae:	move.l 48(sp),36(sp)
   12cb4:	move.l 52(sp),40(sp)
   12cba:	move.l 56(sp),28(sp)
   12cc0:	move.l 60(sp),32(sp)
   12cc6:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12ccc:	movea.l d0,a6
   12cce:	move.l 36(sp),d0
   12cd2:	move.l 40(sp),d1
   12cd6:	move.l 28(sp),d2
   12cda:	move.l 32(sp),d3
   12cde:	jsr -84(a6)
   12ce2:	move.l d0,12(sp)
   12ce6:	move.l d1,16(sp)
   12cea:	move.l 12(sp),20(sp)
   12cf0:	move.l 16(sp),24(sp)
   12cf6:	move.l 20(sp),d0
   12cfa:	move.l 24(sp),d1
}
   12cfe:	movem.l (sp)+,d2-d3/a6
   12d02:	lea 32(sp),sp
   12d06:	rts

00012d08 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   12d08:	lea -12(sp),sp
   12d0c:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   12d0e:	move.l 20(sp),12(sp)
   12d14:	move.l 24(sp),8(sp)
   12d1a:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12d20:	movea.l d0,a6
   12d22:	move.l 12(sp),d0
   12d26:	move.l 8(sp),d1
   12d2a:	jsr -84(a6)
   12d2e:	move.l d0,4(sp)
   12d32:	move.l 4(sp),d0
}
   12d36:	movea.l (sp)+,a6
   12d38:	lea 12(sp),sp
   12d3c:	rts

00012d3e <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   12d3e:	lea -12(sp),sp
   12d42:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12d44:	move.l 20(sp),12(sp)
   12d4a:	move.l 24(sp),8(sp)
   12d50:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12d56:	movea.l d0,a6
   12d58:	move.l 12(sp),d0
   12d5c:	move.l 8(sp),d1
   12d60:	jsr -42(a6)
   12d64:	move.l d0,4(sp)
   12d68:	move.l 4(sp),d0
}
   12d6c:	movea.l (sp)+,a6
   12d6e:	lea 12(sp),sp
   12d72:	rts

00012d74 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   12d74:	lea -20(sp),sp
   12d78:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   12d7a:	move.l 28(sp),20(sp)
   12d80:	move.l 19c68 <MathIeeeDoubTransBase>,d0
   12d86:	movea.l d0,a6
   12d88:	move.l 20(sp),d0
   12d8c:	jsr -108(a6)
   12d90:	move.l d0,4(sp)
   12d94:	move.l d1,8(sp)
   12d98:	move.l 4(sp),12(sp)
   12d9e:	move.l 8(sp),16(sp)
   12da4:	move.l 12(sp),d0
   12da8:	move.l 16(sp),d1
}
   12dac:	movea.l (sp)+,a6
   12dae:	lea 20(sp),sp
   12db2:	rts

00012db4 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   12db4:	lea -12(sp),sp
   12db8:	move.l a6,-(sp)
	return IEEEDPFix(value);
   12dba:	move.l 20(sp),8(sp)
   12dc0:	move.l 24(sp),12(sp)
   12dc6:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12dcc:	movea.l d0,a6
   12dce:	move.l 8(sp),d0
   12dd2:	move.l 12(sp),d1
   12dd6:	jsr -30(a6)
   12dda:	move.l d0,4(sp)
   12dde:	move.l 4(sp),d0
   12de2:	move.l d0,-(sp)
   12de4:	jsr 12e1c <__floatsidf>
   12dea:	addq.l #4,sp
}
   12dec:	movea.l (sp)+,a6
   12dee:	lea 12(sp),sp
   12df2:	rts

00012df4 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   12df4:	subq.l #8,sp
   12df6:	move.l a6,-(sp)
	return IEEESPFix(value);
   12df8:	move.l 16(sp),8(sp)
   12dfe:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12e04:	movea.l d0,a6
   12e06:	move.l 8(sp),d0
   12e0a:	jsr -30(a6)
   12e0e:	move.l d0,4(sp)
   12e12:	move.l 4(sp),d0
}
   12e16:	movea.l (sp)+,a6
   12e18:	addq.l #8,sp
   12e1a:	rts

00012e1c <__floatsidf>:


DOUBLE __floatsidf (int i) {
   12e1c:	lea -20(sp),sp
   12e20:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   12e22:	move.l 28(sp),20(sp)
   12e28:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12e2e:	movea.l d0,a6
   12e30:	move.l 20(sp),d0
   12e34:	jsr -36(a6)
   12e38:	move.l d0,4(sp)
   12e3c:	move.l d1,8(sp)
   12e40:	move.l 4(sp),12(sp)
   12e46:	move.l 8(sp),16(sp)
   12e4c:	move.l 12(sp),d0
   12e50:	move.l 16(sp),d1
}
   12e54:	movea.l (sp)+,a6
   12e56:	lea 20(sp),sp
   12e5a:	rts

00012e5c <__floatsisf>:

FLOAT __floatsisf(int i) {
   12e5c:	subq.l #8,sp
   12e5e:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   12e60:	move.l 16(sp),8(sp)
   12e66:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12e6c:	movea.l d0,a6
   12e6e:	move.l 8(sp),d0
   12e72:	jsr -36(a6)
   12e76:	move.l d0,4(sp)
   12e7a:	move.l 4(sp),d0
}
   12e7e:	movea.l (sp)+,a6
   12e80:	addq.l #8,sp
   12e82:	rts

00012e84 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   12e84:	subq.l #8,sp
   12e86:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   12e88:	move.l 16(sp),8(sp)
   12e8e:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12e94:	movea.l d0,a6
   12e96:	move.l 8(sp),d0
   12e9a:	jsr -36(a6)
   12e9e:	move.l d0,4(sp)
   12ea2:	move.l 4(sp),d0
}
   12ea6:	movea.l (sp)+,a6
   12ea8:	addq.l #8,sp
   12eaa:	rts

00012eac <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   12eac:	lea -32(sp),sp
   12eb0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   12eb4:	move.l 48(sp),36(sp)
   12eba:	move.l 52(sp),40(sp)
   12ec0:	move.l 56(sp),28(sp)
   12ec6:	move.l 60(sp),32(sp)
   12ecc:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12ed2:	movea.l d0,a6
   12ed4:	move.l 36(sp),d0
   12ed8:	move.l 40(sp),d1
   12edc:	move.l 28(sp),d2
   12ee0:	move.l 32(sp),d3
   12ee4:	jsr -78(a6)
   12ee8:	move.l d0,12(sp)
   12eec:	move.l d1,16(sp)
   12ef0:	move.l 12(sp),20(sp)
   12ef6:	move.l 16(sp),24(sp)
   12efc:	move.l 20(sp),d0
   12f00:	move.l 24(sp),d1
}
   12f04:	movem.l (sp)+,d2-d3/a6
   12f08:	lea 32(sp),sp
   12f0c:	rts

00012f0e <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   12f0e:	lea -12(sp),sp
   12f12:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   12f14:	move.l 20(sp),12(sp)
   12f1a:	move.l 24(sp),8(sp)
   12f20:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12f26:	movea.l d0,a6
   12f28:	move.l 12(sp),d0
   12f2c:	move.l 8(sp),d1
   12f30:	jsr -78(a6)
   12f34:	move.l d0,4(sp)
   12f38:	move.l 4(sp),d0
}
   12f3c:	movea.l (sp)+,a6
   12f3e:	lea 12(sp),sp
   12f42:	rts

00012f44 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   12f44:	lea -12(sp),sp
   12f48:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12f4a:	move.l 20(sp),12(sp)
   12f50:	move.l 24(sp),8(sp)
   12f56:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12f5c:	movea.l d0,a6
   12f5e:	move.l 12(sp),d0
   12f62:	move.l 8(sp),d1
   12f66:	jsr -42(a6)
   12f6a:	move.l d0,4(sp)
   12f6e:	move.l 4(sp),d0
}
   12f72:	movea.l (sp)+,a6
   12f74:	lea 12(sp),sp
   12f78:	rts

00012f7a <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   12f7a:	lea -20(sp),sp
   12f7e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   12f82:	move.l 36(sp),24(sp)
   12f88:	move.l 40(sp),28(sp)
   12f8e:	move.l 44(sp),16(sp)
   12f94:	move.l 48(sp),20(sp)
   12f9a:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12fa0:	movea.l d0,a6
   12fa2:	move.l 24(sp),d0
   12fa6:	move.l 28(sp),d1
   12faa:	move.l 16(sp),d2
   12fae:	move.l 20(sp),d3
   12fb2:	jsr -42(a6)
   12fb6:	move.l d0,12(sp)
   12fba:	move.l 12(sp),d0
}
   12fbe:	movem.l (sp)+,d2-d3/a6
   12fc2:	lea 20(sp),sp
   12fc6:	rts

00012fc8 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   12fc8:	lea -12(sp),sp
   12fcc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12fce:	move.l 20(sp),12(sp)
   12fd4:	move.l 24(sp),8(sp)
   12fda:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12fe0:	movea.l d0,a6
   12fe2:	move.l 12(sp),d0
   12fe6:	move.l 8(sp),d1
   12fea:	jsr -42(a6)
   12fee:	move.l d0,4(sp)
   12ff2:	move.l 4(sp),d0
}
   12ff6:	movea.l (sp)+,a6
   12ff8:	lea 12(sp),sp
   12ffc:	rts

00012ffe <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   12ffe:	lea -12(sp),sp
   13002:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13004:	move.l 20(sp),12(sp)
   1300a:	move.l 24(sp),8(sp)
   13010:	move.l 19c5c <MathIeeeSingBasBase>,d0
   13016:	movea.l d0,a6
   13018:	move.l 12(sp),d0
   1301c:	move.l 8(sp),d1
   13020:	jsr -42(a6)
   13024:	move.l d0,4(sp)
   13028:	move.l 4(sp),d0
}
   1302c:	movea.l (sp)+,a6
   1302e:	lea 12(sp),sp
   13032:	rts

00013034 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   13034:	lea -20(sp),sp
   13038:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1303c:	move.l 36(sp),24(sp)
   13042:	move.l 40(sp),28(sp)
   13048:	move.l 44(sp),16(sp)
   1304e:	move.l 48(sp),20(sp)
   13054:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   1305a:	movea.l d0,a6
   1305c:	move.l 24(sp),d0
   13060:	move.l 28(sp),d1
   13064:	move.l 16(sp),d2
   13068:	move.l 20(sp),d3
   1306c:	jsr -42(a6)
   13070:	move.l d0,12(sp)
   13074:	move.l 12(sp),d0
}
   13078:	movem.l (sp)+,d2-d3/a6
   1307c:	lea 20(sp),sp
   13080:	rts

00013082 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   13082:	lea -12(sp),sp
   13086:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   13088:	move.l 20(sp),12(sp)
   1308e:	move.l 24(sp),8(sp)
   13094:	move.l 19c5c <MathIeeeSingBasBase>,d0
   1309a:	movea.l d0,a6
   1309c:	move.l 12(sp),d0
   130a0:	move.l 8(sp),d1
   130a4:	jsr -42(a6)
   130a8:	move.l d0,4(sp)
   130ac:	move.l 4(sp),d0
}
   130b0:	movea.l (sp)+,a6
   130b2:	lea 12(sp),sp
   130b6:	rts

000130b8 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   130b8:	lea -12(sp),sp
   130bc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   130be:	move.l 20(sp),12(sp)
   130c4:	move.l 24(sp),8(sp)
   130ca:	move.l 19c5c <MathIeeeSingBasBase>,d0
   130d0:	movea.l d0,a6
   130d2:	move.l 12(sp),d0
   130d6:	move.l 8(sp),d1
   130da:	jsr -42(a6)
   130de:	move.l d0,4(sp)
   130e2:	move.l 4(sp),d0
}
   130e6:	movea.l (sp)+,a6
   130e8:	lea 12(sp),sp
   130ec:	rts

000130ee <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   130ee:	lea -32(sp),sp
   130f2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   130f6:	move.l 48(sp),36(sp)
   130fc:	move.l 52(sp),40(sp)
   13102:	move.l 56(sp),28(sp)
   13108:	move.l 60(sp),32(sp)
   1310e:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   13114:	movea.l d0,a6
   13116:	move.l 36(sp),d0
   1311a:	move.l 40(sp),d1
   1311e:	move.l 28(sp),d2
   13122:	move.l 32(sp),d3
   13126:	jsr -72(a6)
   1312a:	move.l d0,12(sp)
   1312e:	move.l d1,16(sp)
   13132:	move.l 12(sp),20(sp)
   13138:	move.l 16(sp),24(sp)
   1313e:	move.l 20(sp),d0
   13142:	move.l 24(sp),d1
}
   13146:	movem.l (sp)+,d2-d3/a6
   1314a:	lea 32(sp),sp
   1314e:	rts

00013150 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   13150:	lea -12(sp),sp
   13154:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   13156:	move.l 20(sp),12(sp)
   1315c:	move.l 24(sp),8(sp)
   13162:	move.l 19c5c <MathIeeeSingBasBase>,d0
   13168:	movea.l d0,a6
   1316a:	move.l 12(sp),d0
   1316e:	move.l 8(sp),d1
   13172:	jsr -72(a6)
   13176:	move.l d0,4(sp)
   1317a:	move.l 4(sp),d0
}
   1317e:	movea.l (sp)+,a6
   13180:	lea 12(sp),sp
   13184:	rts

00013186 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   13186:	lea -12(sp),sp
   1318a:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1318c:	move.l 20(sp),8(sp)
   13192:	move.l 24(sp),12(sp)
   13198:	move.l 19c68 <MathIeeeDoubTransBase>,d0
   1319e:	movea.l d0,a6
   131a0:	move.l 8(sp),d0
   131a4:	move.l 12(sp),d1
   131a8:	jsr -102(a6)
   131ac:	move.l d0,4(sp)
   131b0:	move.l 4(sp),d0
}
   131b4:	movea.l (sp)+,a6
   131b6:	lea 12(sp),sp
   131ba:	rts

000131bc <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   131bc:	       lea -24(sp),sp
   131c0:	       move.l a6,-(sp)
    if (x > 0) {
   131c2:	       clr.l -(sp)
   131c4:	       move.l 40(sp),-(sp)
   131c8:	       jsr 12fc8 <__gtsf2>
   131ce:	       addq.l #8,sp
   131d0:	       tst.l d0
   131d2:	   /-- ble.s 13204 <atan2f+0x48>
        return IEEESPAtan(y / x);
   131d4:	   |   move.l 36(sp),-(sp)
   131d8:	   |   move.l 36(sp),-(sp)
   131dc:	   |   jsr 12d08 <__divsf3>
   131e2:	   |   addq.l #8,sp
   131e4:	   |   move.l d0,8(sp)
   131e8:	   |   move.l 19c60 <MathIeeeSingTransBase>,d0
   131ee:	   |   movea.l d0,a6
   131f0:	   |   move.l 8(sp),d0
   131f4:	   |   jsr -30(a6)
   131f8:	   |   move.l d0,4(sp)
   131fc:	   |   move.l 4(sp),d0
   13200:	/--|-- bra.w 13364 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   13204:	|  \-> clr.l -(sp)
   13206:	|      move.l 40(sp),-(sp)
   1320a:	|      jsr 13082 <__ltsf2>
   13210:	|      addq.l #8,sp
   13212:	|      tst.l d0
   13214:	|  /-- bge.s 13288 <atan2f+0xcc>
   13216:	|  |   clr.l -(sp)
   13218:	|  |   move.l 36(sp),-(sp)
   1321c:	|  |   jsr 12f44 <__gesf2>
   13222:	|  |   addq.l #8,sp
   13224:	|  |   tst.l d0
   13226:	|  +-- blt.s 13288 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   13228:	|  |   move.l 36(sp),-(sp)
   1322c:	|  |   move.l 36(sp),-(sp)
   13230:	|  |   jsr 12d08 <__divsf3>
   13236:	|  |   addq.l #8,sp
   13238:	|  |   move.l d0,24(sp)
   1323c:	|  |   move.l 19c60 <MathIeeeSingTransBase>,d0
   13242:	|  |   movea.l d0,a6
   13244:	|  |   move.l 24(sp),d0
   13248:	|  |   jsr -30(a6)
   1324c:	|  |   move.l d0,20(sp)
   13250:	|  |   move.l 20(sp),d0
   13254:	|  |   move.l d0,-(sp)
   13256:	|  |   jsr 12d74 <__extendsfdf2>
   1325c:	|  |   addq.l #4,sp
   1325e:	|  |   move.l #1413754136,-(sp)
   13264:	|  |   move.l #1074340347,-(sp)
   1326a:	|  |   move.l d1,-(sp)
   1326c:	|  |   move.l d0,-(sp)
   1326e:	|  |   jsr 12c44 <__adddf3>
   13274:	|  |   lea 16(sp),sp
   13278:	|  |   move.l d1,-(sp)
   1327a:	|  |   move.l d0,-(sp)
   1327c:	|  |   jsr 13186 <__truncdfsf2>
   13282:	|  |   addq.l #8,sp
   13284:	+--|-- bra.w 13364 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   13288:	|  \-> clr.l -(sp)
   1328a:	|      move.l 40(sp),-(sp)
   1328e:	|      jsr 13082 <__ltsf2>
   13294:	|      addq.l #8,sp
   13296:	|      tst.l d0
   13298:	|  /-- bge.s 1330a <atan2f+0x14e>
   1329a:	|  |   clr.l -(sp)
   1329c:	|  |   move.l 36(sp),-(sp)
   132a0:	|  |   jsr 13082 <__ltsf2>
   132a6:	|  |   addq.l #8,sp
   132a8:	|  |   tst.l d0
   132aa:	|  +-- bge.s 1330a <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   132ac:	|  |   move.l 36(sp),-(sp)
   132b0:	|  |   move.l 36(sp),-(sp)
   132b4:	|  |   jsr 12d08 <__divsf3>
   132ba:	|  |   addq.l #8,sp
   132bc:	|  |   move.l d0,16(sp)
   132c0:	|  |   move.l 19c60 <MathIeeeSingTransBase>,d0
   132c6:	|  |   movea.l d0,a6
   132c8:	|  |   move.l 16(sp),d0
   132cc:	|  |   jsr -30(a6)
   132d0:	|  |   move.l d0,12(sp)
   132d4:	|  |   move.l 12(sp),d0
   132d8:	|  |   move.l d0,-(sp)
   132da:	|  |   jsr 12d74 <__extendsfdf2>
   132e0:	|  |   addq.l #4,sp
   132e2:	|  |   move.l #1413754136,-(sp)
   132e8:	|  |   move.l #1074340347,-(sp)
   132ee:	|  |   move.l d1,-(sp)
   132f0:	|  |   move.l d0,-(sp)
   132f2:	|  |   jsr 130ee <__subdf3>
   132f8:	|  |   lea 16(sp),sp
   132fc:	|  |   move.l d1,-(sp)
   132fe:	|  |   move.l d0,-(sp)
   13300:	|  |   jsr 13186 <__truncdfsf2>
   13306:	|  |   addq.l #8,sp
   13308:	+--|-- bra.s 13364 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1330a:	|  \-> clr.l -(sp)
   1330c:	|      move.l 40(sp),-(sp)
   13310:	|      jsr 12d3e <__eqsf2>
   13316:	|      addq.l #8,sp
   13318:	|      tst.l d0
   1331a:	|  /-- bne.s 13336 <atan2f+0x17a>
   1331c:	|  |   clr.l -(sp)
   1331e:	|  |   move.l 36(sp),-(sp)
   13322:	|  |   jsr 12fc8 <__gtsf2>
   13328:	|  |   addq.l #8,sp
   1332a:	|  |   tst.l d0
   1332c:	|  +-- ble.s 13336 <atan2f+0x17a>
        return PI / 2;
   1332e:	|  |   move.l #1070141403,d0
   13334:	+--|-- bra.s 13364 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   13336:	|  \-> clr.l -(sp)
   13338:	|      move.l 40(sp),-(sp)
   1333c:	|      jsr 12d3e <__eqsf2>
   13342:	|      addq.l #8,sp
   13344:	|      tst.l d0
   13346:	|  /-- bne.s 13362 <atan2f+0x1a6>
   13348:	|  |   clr.l -(sp)
   1334a:	|  |   move.l 36(sp),-(sp)
   1334e:	|  |   jsr 13082 <__ltsf2>
   13354:	|  |   addq.l #8,sp
   13356:	|  |   tst.l d0
   13358:	|  +-- bge.s 13362 <atan2f+0x1a6>
        return -PI / 2;
   1335a:	|  |   move.l #-1077342245,d0
   13360:	+--|-- bra.s 13364 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   13362:	|  \-> moveq #0,d0
    }
}
   13364:	\----> movea.l (sp)+,a6
   13366:	       lea 24(sp),sp
   1336a:	       rts

0001336c <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1336c:	lea -24(sp),sp
   13370:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   13372:	move.l 32(sp),20(sp)
   13378:	move.l 36(sp),24(sp)
   1337e:	move.l 19c68 <MathIeeeDoubTransBase>,d0
   13384:	movea.l d0,a6
   13386:	move.l 20(sp),d0
   1338a:	move.l 24(sp),d1
   1338e:	jsr -96(a6)
   13392:	move.l d0,4(sp)
   13396:	move.l d1,8(sp)
   1339a:	move.l 4(sp),12(sp)
   133a0:	move.l 8(sp),16(sp)
   133a6:	move.l 12(sp),d0
   133aa:	move.l 16(sp),d1
}
   133ae:	movea.l (sp)+,a6
   133b0:	lea 24(sp),sp
   133b4:	rts

000133b6 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   133b6:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   133ba:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   133be:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   133c2:	mulu.w 8(sp),d1
	addw	d1, d0
   133c6:	add.w d1,d0
	swap	d0
   133c8:	swap d0
	clrw	d0
   133ca:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   133cc:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   133d0:	mulu.w 10(sp),d1
	addl	d1, d0
   133d4:	add.l d1,d0
	rts
   133d6:	rts

000133d8 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   133d8:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   133da:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   133de:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   133e2:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   133e8:	   /-- bcc.s 13400 <__udivsi3+0x28>
	movel	d0, d2
   133ea:	   |   move.l d0,d2
	clrw	d2
   133ec:	   |   clr.w d2
	swap	d2
   133ee:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   133f0:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   133f2:	   |   move.w d2,d0
	swap	d0
   133f4:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   133f6:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   133fa:	   |   divu.w d1,d2
	movew	d2, d0
   133fc:	   |   move.w d2,d0
	jra	6f
   133fe:	/--|-- bra.s 13430 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   13400:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   13402:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   13404:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   13406:	|  |   cmpi.l #65536,d1
	jcc	4b
   1340c:	|  \-- bcc.s 13402 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   1340e:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   13410:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   13416:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   13418:	|      mulu.w d0,d1
	swap	d2
   1341a:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   1341c:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   1341e:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   13420:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   13422:	|  /-- bne.s 1342e <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   13424:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   13426:	|  +-- bcs.s 1342e <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   13428:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   1342c:	+--|-- bls.s 13430 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   1342e:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   13430:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   13432:	       rts

00013434 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   13434:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   13436:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   13438:	    move.l 12(sp),d1
	jpl	1f
   1343c:	/-- bpl.s 13442 <__divsi3+0xe>
	negl	d1
   1343e:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   13440:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   13442:	\-> move.l 8(sp),d0
	jpl	2f
   13446:	/-- bpl.s 1344c <__divsi3+0x18>
	negl	d0
   13448:	|   neg.l d0
	negb	d2
   1344a:	|   neg.b d2

2:	movel	d1, sp@-
   1344c:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1344e:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   13450:	    jsr 133d8 <__udivsi3>
	addql	#8, sp
   13456:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   13458:	    tst.b d2
	jpl	3f
   1345a:	/-- bpl.s 1345e <__divsi3+0x2a>
	negl	d0
   1345c:	|   neg.l d0

3:	movel	sp@+, d2
   1345e:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   13460:	    rts

00013462 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   13462:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   13466:	move.l 4(sp),d0
	movel	d1, sp@-
   1346a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1346c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   1346e:	jsr 13434 <__divsi3>
	addql	#8, sp
   13474:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   13476:	move.l 8(sp),d1
	movel	d1, sp@-
   1347a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1347c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1347e:	jsr 133b6 <__mulsi3>
	addql	#8, sp
   13484:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   13486:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1348a:	sub.l d0,d1
	movel	d1, d0
   1348c:	move.l d1,d0
	rts
   1348e:	rts

00013490 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   13490:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   13494:	move.l 4(sp),d0
	movel	d1, sp@-
   13498:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1349a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   1349c:	jsr 133d8 <__udivsi3>
	addql	#8, sp
   134a2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   134a4:	move.l 8(sp),d1
	movel	d1, sp@-
   134a8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   134aa:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   134ac:	jsr 133b6 <__mulsi3>
	addql	#8, sp
   134b2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   134b4:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   134b8:	sub.l d0,d1
	movel	d1, d0
   134ba:	move.l d1,d0
	rts
   134bc:	rts

000134be <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   134be:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   134c0:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   134c4:	jsr -516(a6)
    move.l (sp)+, a6
   134c8:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   134ca:	rts

000134cc <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   134cc:	move.b d0,(a3)+
	rts
   134ce:	rts
