
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #123140,d0
       8:	       subi.l #123140,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1e104 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #123140,d0
      40:	       subi.l #123140,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1e104 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 870a <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #123140,d0
      7e:	       subi.l #123140,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1e104 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 14f8a <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1e8c0 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 14fa2 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1e104 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 14f8a <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1e8c0 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1e104 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 14f8a <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1e8c0 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 19024 <PutChar+0x4>
     35c:	|  |              |   jsr 1857e <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1e8c8 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1e8c8 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1e8c8 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1e8c8 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1e8c8 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1e8c8 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1e8c8 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 1904e <PutChar+0x2e>
     834:	|   jsr 1857e <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1e8c8 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 1906a <PutChar+0x4a>
     8a6:	|   jsr 1857e <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1e8c8 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1e8c8 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1e8c8 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1e8c8 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1e8c8 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1e8c8 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1e8c8 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1e8c8 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1e8c0 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1e8c8 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 14f8a <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1e8c8 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1e7b6 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1e7b6 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1e7b6 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1e7b6 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1e7b6 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1e87e <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1e7b6 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1e7b6 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1e87a <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1e7b6 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1e7b6 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 1478 <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1e7b6 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr a2f6 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1e7b6 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1e7ba <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1e7be <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 30f6 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -48(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 19092 <PutChar+0x72>
     e1a:	          jsr 1857e <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1e7d2 <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 190ab <PutChar+0x8b>
     e30:	      |   jsr 1857e <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w 10c2 <CstBlankScreen+0x2b4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1e7cc <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,40(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1e8cc <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 64(sp),d0
     e5a:	|         sub.l 56(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,38(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 68(sp),d0
     e6c:	|         move.l 60(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,36(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 40(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 40(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 40(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 40(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 40(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 38(sp),d0
     eb0:	|         movea.l 40(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 40(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 40(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1e7d2 <CstBackDrop>,d0
     ed2:	|         move.l d0,48(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 56(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 60(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,48(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 36(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 38(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,34(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 38(sp),d0
     f10:	|         muls.w 36(sp),d0
     f14:	|         move.w d0,32(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 190d9 <PutChar+0xb9>
     f1e:	|         jsr 1857e <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 44(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 48(sp),d0
     f30:	|  |  |   movea.l 40(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 40(sp),a0
     f3c:	|  |  |   move.w 34(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1e8cc <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,48(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,44(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 44(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 190f9 <PutChar+0xd9>
     f68:	|         jsr 1857e <KPrintF>
     f6e:	|         addq.l #4,sp

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
     f70:	|         move.l 1e7ea <CstCleanupQueueDrawBuffer>,28(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
     f78:	|         moveq #20,d0
     f7a:	|         move.l d0,24(sp)
     f7e:	|         clr.l 20(sp)
     f82:	|         move.l 1e8c0 <SysBase>,d0
     f88:	|         movea.l d0,a6
     f8a:	|         move.l 24(sp),d0
     f8e:	|         move.l 20(sp),d1
     f92:	|         jsr -684(a6)
     f96:	|         move.l d0,16(sp)
     f9a:	|         move.l 16(sp),d0
     f9e:	|         move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
     fa4:	|         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
     faa:	|         move.l 28(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = x1;
     fb0:	|         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
     fb6:	|         move.l 56(sp),d0
     fba:	|         move.w d0,(a0)
  CstCleanupQueueDrawBuffer->y = y1;
     fbc:	|         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
     fc2:	|         move.l 60(sp),d0
     fc6:	|         move.w d0,2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
     fca:	|         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
     fd0:	|         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = width/16;
     fd4:	|         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
     fda:	|         move.w 38(sp),d0
     fde:	|         lsr.w #4,d0
     fe0:	|         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = height;
     fe4:	|         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
     fea:	|         move.w 36(sp),10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = x1/8;;
     ff0:	|         move.l 56(sp),d0
     ff4:	|     ,-- bpl.s ff8 <CstBlankScreen+0x1ea>
     ff6:	|     |   addq.l #7,d0
     ff8:	|     '-> asr.l #3,d0
     ffa:	|         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    1000:	|         move.l d0,d0
    1002:	|         move.w d0,12(a0)
  CstCleanupQueueDrawBuffer->starty = y1;
    1006:	|         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    100c:	|         move.l 60(sp),d0
    1010:	|         move.w d0,14(a0)

  next = CstCleanupQueueViewBuffer;
    1014:	|         move.l 1e7e6 <CstCleanupQueueViewBuffer>,28(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    101c:	|         moveq #20,d0
    101e:	|         move.l d0,12(sp)
    1022:	|         clr.l 8(sp)
    1026:	|         move.l 1e8c0 <SysBase>,d0
    102c:	|         movea.l d0,a6
    102e:	|         move.l 12(sp),d0
    1032:	|         move.l 8(sp),d1
    1036:	|         jsr -684(a6)
    103a:	|         move.l d0,4(sp)
    103e:	|         move.l 4(sp),d0
    1042:	|         move.l d0,1e7e6 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1048:	|         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    104e:	|         move.l 28(sp),16(a0)
  CstCleanupQueueViewBuffer->x = x1;
    1054:	|         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    105a:	|         move.l 56(sp),d0
    105e:	|         move.w d0,(a0)
  CstCleanupQueueViewBuffer->y = y1;
    1060:	|         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    1066:	|         move.l 60(sp),d0
    106a:	|         move.w d0,2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    106e:	|         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    1074:	|         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = width/16;
    1078:	|         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    107e:	|         move.w 38(sp),d0
    1082:	|         lsr.w #4,d0
    1084:	|         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = height;
    1088:	|         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    108e:	|         move.w 36(sp),10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = x1/8;
    1094:	|         move.l 56(sp),d0
    1098:	|     ,-- bpl.s 109c <CstBlankScreen+0x28e>
    109a:	|     |   addq.l #7,d0
    109c:	|     '-> asr.l #3,d0
    109e:	|         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    10a4:	|         move.l d0,d0
    10a6:	|         move.w d0,12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    10aa:	|         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    10b0:	|         clr.w 14(a0)

  KPrintF("CstBlankScreen: end\n");
    10b4:	|         pea 19119 <PutChar+0xf9>
    10ba:	|         jsr 1857e <KPrintF>
    10c0:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
    10c2:	'-------> movea.l (sp)+,a6
    10c4:	          lea 48(sp),sp
    10c8:	          rts

000010ca <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    10ca:	       lea -52(sp),sp
    10ce:	       move.l a6,-(sp)
    10d0:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    10d2:	       move.l #400,32(sp)
    10da:	       moveq #2,d0
    10dc:	       move.l d0,28(sp)
    10e0:	       move.l 1e8c0 <SysBase>,d0
    10e6:	       movea.l d0,a6
    10e8:	       move.l 32(sp),d0
    10ec:	       move.l 28(sp),d1
    10f0:	       jsr -198(a6)
    10f4:	       move.l d0,24(sp)
    10f8:	       move.l 24(sp),d0
    10fc:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1100:	   ,-- bne.s 112a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1102:	   |   pea 28 <_start+0x28>
    1106:	   |   pea 1912e <PutChar+0x10e>
    110c:	   |   jsr 1857e <KPrintF>
    1112:	   |   addq.l #8,sp
    Exit(1);
    1114:	   |   moveq #1,d1
    1116:	   |   move.l d1,16(sp)
    111a:	   |   move.l 1e8c8 <DOSBase>,d0
    1120:	   |   movea.l d0,a6
    1122:	   |   move.l 16(sp),d1
    1126:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    112a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1130:	       move.l 56(sp),1e7f6 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1138:	       move.l #123142,52(sp)
  for(int i=0; i<16;i++)
    1140:	       clr.l 48(sp)
    1144:	   ,-- bra.s 116a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1146:	,--|-> move.l 52(sp),d1
    114a:	|  |   move.l d1,d2
    114c:	|  |   addq.l #4,d2
    114e:	|  |   move.l d2,52(sp)
    1152:	|  |   move.l 56(sp),d0
    1156:	|  |   move.l d0,d2
    1158:	|  |   addq.l #4,d2
    115a:	|  |   move.l d2,56(sp)
    115e:	|  |   movea.l d1,a0
    1160:	|  |   move.l (a0),d1
    1162:	|  |   movea.l d0,a0
    1164:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1166:	|  |   addq.l #1,48(sp)
    116a:	|  '-> moveq #15,d0
    116c:	|      cmp.l 48(sp),d0
    1170:	'----- bge.s 1146 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1172:	       move.l #123206,52(sp)

  for(int i=0; i<12;i++)
    117a:	       clr.l 44(sp)
    117e:	   ,-- bra.s 11a4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1180:	,--|-> move.l 52(sp),d1
    1184:	|  |   move.l d1,d2
    1186:	|  |   addq.l #4,d2
    1188:	|  |   move.l d2,52(sp)
    118c:	|  |   move.l 56(sp),d0
    1190:	|  |   move.l d0,d2
    1192:	|  |   addq.l #4,d2
    1194:	|  |   move.l d2,56(sp)
    1198:	|  |   movea.l d1,a0
    119a:	|  |   move.l (a0),d1
    119c:	|  |   movea.l d0,a0
    119e:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11a0:	|  |   addq.l #1,44(sp)
    11a4:	|  '-> moveq #11,d0
    11a6:	|      cmp.l 44(sp),d0
    11aa:	'----- bge.s 1180 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11ac:	       move.l #123254,52(sp)
  for(int i=0; i<10;i++)
    11b4:	       clr.l 40(sp)
    11b8:	   ,-- bra.s 11de <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    11ba:	,--|-> move.l 52(sp),d1
    11be:	|  |   move.l d1,d2
    11c0:	|  |   addq.l #4,d2
    11c2:	|  |   move.l d2,52(sp)
    11c6:	|  |   move.l 56(sp),d0
    11ca:	|  |   move.l d0,d2
    11cc:	|  |   addq.l #4,d2
    11ce:	|  |   move.l d2,56(sp)
    11d2:	|  |   movea.l d1,a0
    11d4:	|  |   move.l (a0),d1
    11d6:	|  |   movea.l d0,a0
    11d8:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    11da:	|  |   addq.l #1,40(sp)
    11de:	|  '-> moveq #9,d0
    11e0:	|      cmp.l 40(sp),d0
    11e4:	'----- bge.s 11ba <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    11e6:	       move.l #123294,52(sp)
  CstClColor = (UWORD *) cl;
    11ee:	       move.l 56(sp),1e7ee <CstClColor>
  for(int i=0; i<32;i++)
    11f6:	       clr.l 36(sp)
    11fa:	   ,-- bra.s 1220 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    11fc:	,--|-> move.l 52(sp),d1
    1200:	|  |   move.l d1,d2
    1202:	|  |   addq.l #4,d2
    1204:	|  |   move.l d2,52(sp)
    1208:	|  |   move.l 56(sp),d0
    120c:	|  |   move.l d0,d2
    120e:	|  |   addq.l #4,d2
    1210:	|  |   move.l d2,56(sp)
    1214:	|  |   movea.l d1,a0
    1216:	|  |   move.l (a0),d1
    1218:	|  |   movea.l d0,a0
    121a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    121c:	|  |   addq.l #1,36(sp)
    1220:	|  '-> moveq #31,d0
    1222:	|      cmp.l 36(sp),d0
    1226:	'----- bge.s 11fc <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1228:	       moveq #40,d1
    122a:	       cmp.l 64(sp),d1
    122e:	   ,-- bge.s 128c <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1230:	   |   moveq #-40,d2
    1232:	   |   add.l 64(sp),d2
    1236:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    123a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1240:	   |   move.l 8(sp),d0
    1244:	   |   move.l d0,d1
    1246:	   |   addq.l #2,d1
    1248:	   |   move.l d1,8(sp)
    124c:	   |   movea.l d0,a0
    124e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1252:	   |   move.l 8(sp),d0
    1256:	   |   move.l d0,d1
    1258:	   |   addq.l #2,d1
    125a:	   |   move.l d1,8(sp)
    125e:	   |   move.l 12(sp),d1
    1262:	   |   movea.l d0,a0
    1264:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1266:	   |   move.l 8(sp),d0
    126a:	   |   move.l d0,d1
    126c:	   |   addq.l #2,d1
    126e:	   |   move.l d1,8(sp)
    1272:	   |   movea.l d0,a0
    1274:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    1278:	   |   move.l 8(sp),d0
    127c:	   |   move.l d0,d1
    127e:	   |   addq.l #2,d1
    1280:	   |   move.l d1,8(sp)
    1284:	   |   move.l 12(sp),d1
    1288:	   |   movea.l d0,a0
    128a:	   |   move.w d1,(a0)
  }

  *cl++ = 0xffdffffe;
    128c:	   '-> move.l 56(sp),d0
    1290:	       move.l d0,d1
    1292:	       addq.l #4,d1
    1294:	       move.l d1,56(sp)
    1298:	       movea.l d0,a0
    129a:	       move.l #-2097154,(a0)
  *cl++ = 0x2d01ff00;
    12a0:	       move.l 56(sp),d0
    12a4:	       move.l d0,d1
    12a6:	       addq.l #4,d1
    12a8:	       move.l d1,56(sp)
    12ac:	       movea.l d0,a0
    12ae:	       move.l #755105536,(a0)
  *cl++ = 0x9c8010;
    12b4:	       move.l 56(sp),d0
    12b8:	       move.l d0,d1
    12ba:	       addq.l #4,d1
    12bc:	       move.l d1,56(sp)
    12c0:	       movea.l d0,a0
    12c2:	       move.l #10256400,(a0)

  *cl++ = 0xfffffffe;
    12c8:	       move.l 56(sp),d0
    12cc:	       move.l d0,d1
    12ce:	       addq.l #4,d1
    12d0:	       move.l d1,56(sp)
    12d4:	       moveq #-2,d2
    12d6:	       movea.l d0,a0
    12d8:	       move.l d2,(a0)
  return (UWORD *) retval;  
    12da:	       move.l 20(sp),d0
}
    12de:	       move.l (sp)+,d2
    12e0:	       movea.l (sp)+,a6
    12e2:	       lea 52(sp),sp
    12e6:	       rts

000012e8 <CstCreateZBufferLayer>:

void CstCreateZBufferLayer (BYTE *zbufferdata, UWORD x, UWORD y, UWORD width, UWORD height)
{
    12e8:	    lea -24(sp),sp
    12ec:	    move.l a6,-(sp)
    12ee:	    movea.l 36(sp),a1
    12f2:	    movea.l 40(sp),a0
    12f6:	    move.l 44(sp),d1
    12fa:	    move.l 48(sp),d0
    12fe:	    movea.w a1,a1
    1300:	    move.w a1,12(sp)
    1304:	    movea.w a0,a0
    1306:	    move.w a0,10(sp)
    130a:	    move.w d1,d1
    130c:	    move.w d1,8(sp)
    1310:	    move.w d0,d0
    1312:	    move.w d0,6(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1316:	    move.l #14675968,22(sp)

  #ifdef EMULATOR
    debug_register_bitmap(zbufferdata, "extrazbufferlayer", 320, 250, 1, 0);
    131e:	    clr.l -(sp)
    1320:	    pea 1 <_start+0x1>
    1324:	    pea fa <copyString+0x42>
    1328:	    pea 140 <decodeFilename+0x28>
    132c:	    pea 19169 <PutChar+0x149>
    1332:	    move.l 52(sp),-(sp)
    1336:	    jsr 18666 <debug_register_bitmap>
    133c:	    lea 24(sp),sp
  #endif    

  WaitBlit();
    1340:	    move.l 1e8cc <GfxBase>,d0
    1346:	    movea.l d0,a6
    1348:	    jsr -228(a6)
  custom->bltafwm = 0xffff;
    134c:	    movea.l 22(sp),a0
    1350:	    move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1356:	    movea.l 22(sp),a0
    135a:	    move.w #-1,70(a0)
  custom->bltdmod = 0;  
    1360:	    movea.l 22(sp),a0
    1364:	    move.w #0,102(a0)
  custom->bltcon0 =  0x1f0;
    136a:	    movea.l 22(sp),a0
    136e:	    move.w #496,64(a0)
  custom->bltcon1 = 0x0;
    1374:	    movea.l 22(sp),a0
    1378:	    move.w #0,66(a0)
  custom->bltdpt = zbufferdata;
    137e:	    movea.l 22(sp),a0
    1382:	    move.l 32(sp),84(a0)
  custom->bltadat = 0;
    1388:	    movea.l 22(sp),a0
    138c:	    move.w #0,116(a0)
  custom->bltsize = 256 * 64 + 20;
    1392:	    movea.l 22(sp),a0
    1396:	    move.w #16404,88(a0)

  WaitBlit();
    139c:	    move.l 1e8cc <GfxBase>,d0
    13a2:	    movea.l d0,a6
    13a4:	    jsr -228(a6)
  UWORD bltxoffset = (x / 16)*2;
    13a8:	    move.w 12(sp),d0
    13ac:	    lsr.w #4,d0
    13ae:	    add.w d0,d0
    13b0:	    move.w d0,20(sp)
  UWORD bltshift = x % 16;
    13b4:	    move.w 12(sp),d0
    13b8:	    andi.w #15,d0
    13bc:	    move.w d0,18(sp)
  UWORD bltafwm = 0xffff >> bltshift;
    13c0:	    moveq #0,d0
    13c2:	    move.w 18(sp),d0
    13c6:	    moveq #0,d1
    13c8:	    not.w d1
    13ca:	    asr.l d0,d1
    13cc:	    move.w d1,16(sp)
  UWORD bltalwm = ~bltafwm; 
    13d0:	    move.w 16(sp),d0
    13d4:	    not.w d0
    13d6:	    move.w d0,14(sp)

  UWORD bltwidth = width / 16;
    13da:	    move.w 8(sp),d0
    13de:	    lsr.w #4,d0
    13e0:	    move.w d0,26(sp)
  if(bltalwm != 0) bltwidth += 1; 
    13e4:	    tst.w 14(sp)
    13e8:	,-- beq.s 13ee <CstCreateZBufferLayer+0x106>
    13ea:	|   addq.w #1,26(sp)

  custom->bltafwm = bltafwm;
    13ee:	'-> movea.l 22(sp),a0
    13f2:	    move.w 16(sp),68(a0)
  custom->bltalwm = bltalwm;
    13f8:	    movea.l 22(sp),a0
    13fc:	    move.w 14(sp),70(a0)
  custom->bltdmod = 40 - bltwidth*2;  
    1402:	    moveq #0,d0
    1404:	    move.w 26(sp),d0
    1408:	    moveq #20,d1
    140a:	    sub.l d0,d1
    140c:	    move.l d1,d0
    140e:	    add.w d0,d0
    1410:	    movea.l 22(sp),a0
    1414:	    move.w d0,102(a0)
  custom->bltcon0 =  0x1f0;
    1418:	    movea.l 22(sp),a0
    141c:	    move.w #496,64(a0)
  custom->bltcon1 = 0x0;
    1422:	    movea.l 22(sp),a0
    1426:	    move.w #0,66(a0)
  custom->bltdpt = zbufferdata + (y * 40) + bltxoffset;
    142c:	    moveq #0,d1
    142e:	    move.w 10(sp),d1
    1432:	    move.l d1,d0
    1434:	    add.l d0,d0
    1436:	    add.l d0,d0
    1438:	    add.l d1,d0
    143a:	    lsl.l #3,d0
    143c:	    move.l d0,d1
    143e:	    moveq #0,d0
    1440:	    move.w 20(sp),d0
    1444:	    add.l d1,d0
    1446:	    add.l 32(sp),d0
    144a:	    movea.l 22(sp),a0
    144e:	    move.l d0,84(a0)
  custom->bltadat = 0xffff;;
    1452:	    movea.l 22(sp),a0
    1456:	    move.w #-1,116(a0)
  custom->bltsize = height * 64 + bltwidth;
    145c:	    move.w 6(sp),d0
    1460:	    lsl.w #6,d0
    1462:	    add.w 26(sp),d0
    1466:	    movea.l 22(sp),a0
    146a:	    move.w d0,88(a0)

}
    146e:	    nop
    1470:	    movea.l (sp)+,a6
    1472:	    lea 24(sp),sp
    1476:	    rts

00001478 <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    1478:	lea -20(sp),sp
    147c:	movea.l 24(sp),a0
    1480:	move.l 28(sp),d1
    1484:	move.l 32(sp),d0
    1488:	movea.w a0,a0
    148a:	move.w a0,4(sp)
    148e:	move.w d1,d1
    1490:	move.w d1,2(sp)
    1494:	move.w d0,d0
    1496:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    1498:	move.w 2(sp),d0
    149c:	movea.l 36(sp),a0
    14a0:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    14a2:	move.w 4(sp),d0
    14a6:	lsr.w #1,d0
    14a8:	movea.l 36(sp),a0
    14ac:	addq.l #1,a0
    14ae:	move.l d0,d0
    14b0:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    14b2:	move.w 2(sp),d1
    14b6:	move.w (sp),d0
    14b8:	movea.l 36(sp),a0
    14bc:	addq.l #2,a0
    14be:	add.b d1,d0
    14c0:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    14c2:	move.w 4(sp),d0
    14c6:	andi.w #1,d0
    14ca:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    14ce:	move.w 2(sp),d0
    14d2:	add.w (sp),d0
    14d4:	move.w d0,d0
    14d6:	andi.l #65535,d0
    14dc:	asr.l #7,d0
    14de:	move.l d0,d0
    14e0:	move.w d0,d1
    14e2:	andi.w #2,d1
    14e6:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    14ea:	moveq #0,d0
    14ec:	move.w 2(sp),d0
    14f0:	asr.l #6,d0
    14f2:	move.l d0,d0
    14f4:	move.w d0,d1
    14f6:	andi.w #4,d1
    14fa:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    14fe:	move.w 18(sp),d1
    1502:	move.w 16(sp),d0
    1506:	add.b d0,d1
    1508:	move.w 14(sp),d0
    150c:	movea.l 36(sp),a0
    1510:	addq.l #3,a0
    1512:	add.b d1,d0
    1514:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    1516:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    151c:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1522:	move.l 10(sp),d0
    1526:	clr.w d0
    1528:	swap d0
    152a:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    152e:	move.l 1e7f6 <CstClCursor>,d0
    1534:	movea.l d0,a0
    1536:	addq.l #2,a0
    1538:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    153c:	move.l 1e7f6 <CstClCursor>,d0
    1542:	movea.l d0,a0
    1544:	addq.l #6,a0
    1546:	move.w 8(sp),(a0)

}
    154a:	nop
    154c:	lea 20(sp),sp
    1550:	rts

00001552 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    1552:	                                                                subq.l #8,sp
    1554:	                                                                movem.l d2-d7/a2-a6,-(sp)
    1558:	                                                                movea.l 56(sp),a3
    155c:	                                                                movea.l 60(sp),a2
    1560:	                                                                move.l 64(sp),d2
    1564:	                                                                move.l 68(sp),d7
    1568:	                                                                movea.w d2,a4
    156a:	                                                                move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    156e:	                                                                clr.l -(sp)
    1570:	                                                                pea 1 <_start+0x1>
    1574:	                                                                movea.w 6(a3),a0
    1578:	                                                                move.l a0,-(sp)
    157a:	                                                                movea.w 2(a3),a0
    157e:	                                                                move.l a0,-(sp)
    1580:	                                                                pea 1917b <PutChar+0x15b>
    1586:	                                                                move.l 1e7fa <CstZBufferResult>,-(sp)
    158c:	                                                                lea 18666 <debug_register_bitmap>,a5
    1592:	                                                                jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    1594:	                                                                clr.l -(sp)
    1596:	                                                                pea 1 <_start+0x1>
    159a:	                                                                movea.w 6(a3),a0
    159e:	                                                                move.l a0,-(sp)
    15a0:	                                                                move.w 2(a3),d0
    15a4:	                                                                addi.w #16,d0
    15a8:	                                                                movea.w d0,a0
    15aa:	                                                                move.l a0,-(sp)
    15ac:	                                                                pea 19186 <PutChar+0x166>
    15b2:	                                                                move.l 1e7fe <CstZBufferWork>,-(sp)
    15b8:	                                                                jsr (a5)
  #endif    

  while(zbuffer) 
    15ba:	                                                                lea 48(sp),sp
    15be:	                                                                cmpa.w #0,a2
    15c2:	,-------------------------------------------------------------- beq.w 1a80 <CstDrawZBuffer+0x52e>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    15c6:	|                                                               move.w d2,48(sp)
    15ca:	|                                                               move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    15cc:	|                                                               movea.l 4(a3),a5
  WORD zbufferset = 0;
    15d0:	|                                                               clr.w 46(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    15d4:	|                       ,-------------------------------------> move.w a5,d3
    15d6:	|                       |                                       add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    15d8:	|                       |                                       andi.l #65535,d3
    15de:	|                       |                                       cmp.l 16(a2),d3
    15e2:	|        ,--------------|-------------------------------------- bge.w 1788 <CstDrawZBuffer+0x236>
    WORD zbufferx1oncanvas = zbuffer->topx;
    15e6:	|        |              |                                       move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    15ea:	|        |              |                                       move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    15ee:	|        |              |                                       move.w d6,d0
    15f0:	|        |              |                                       add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    15f4:	|        |              |                                       move.w 6(a2),d4
    15f8:	|        |              |                                       add.w d5,d4
    {    
      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    15fa:	|        |              |                                       cmp.w a4,d6
    15fc:	|        |           ,--|-------------------------------------- bge.w 1914 <CstDrawZBuffer+0x3c2>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1600:	|        |           |  |                                       cmp.w a4,d0
    1602:	|        +-----------|--|-------------------------------------- ble.w 1788 <CstDrawZBuffer+0x236>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1606:	|        |           |  |                                       move.w 50(sp),d0
    160a:	|        |           |  |                                       cmp.w d0,d5
    160c:	|        |     ,-----|--|-------------------------------------- blt.w 1a60 <CstDrawZBuffer+0x50e>
    1610:	|        |     |     |  |                                       movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1612:	|        |     |     |  |                                       cmpa.l d3,a0
    1614:	|        +-----|-----|--|-------------------------------------- bge.w 1788 <CstDrawZBuffer+0x236>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1618:	|        |     |     |  |                                       move.w 48(sp),d0
    161c:	|        |     |     |  |                                       sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    161e:	|        |     |     |  |                                       move.w d0,d6
    1620:	|        |     |     |  |                                       andi.w #15,d6
    1624:	|        |     |     |  |                                       movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    1626:	|        |     |     |  |                                       tst.l d2
    1628:	|        |  ,--|-----|--|-------------------------------------- blt.w 17aa <CstDrawZBuffer+0x258>
    162c:	|        |  |  |  ,--|--|-------------------------------------> asr.l #4,d2
    162e:	|        |  |  |  |  |  |                                       add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    1630:	|        |  |  |  |  |  |                                       move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb1912>
          custom->bltalwm = 0xffff;                      
    1638:	|        |  |  |  |  |  |                                       move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1914>
          custom->bltcon1 = 0;          
    1640:	|        |  |  |  |  |  |                                       move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb1910>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    1648:	|        |  |  |  |  |  |                                       lea 1e8cc <GfxBase>,a0
    164e:	|        |  |  |  |  |  |                                       movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1650:	|        |  |  |  |  |  |                                       lsr.w #4,d0
    1652:	|        |  |  |  |  |  |                                       move.w d0,d6
    1654:	|        |  |  |  |  |  |                                       add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    1656:	|        |  |  |  |  |  |                                       andi.l #65535,d6
    165c:	|        |  |  |  |  |  |                                       add.l 20(a2),d6
          if (xdiffrest) {
    1660:	|        |  |  |  |  |  |                                       clr.w d0
    1662:	|        |  |  |  |  |  |                                       cmp.w a5,d0
    1664:	|        |  |  |  |  |  |        ,----------------------------- beq.w 17ea <CstDrawZBuffer+0x298>
            bytewidth += 2; 
    1668:	|        |  |  |  |  |  |        |        ,-------------------> addq.w #2,d2
            WaitBlit();   
    166a:	|        |  |  |  |  |  |        |        |                     jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    166e:	|        |  |  |  |  |  |        |        |                     move.l 1e7fe <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1678:	|        |  |  |  |  |  |        |        |                     move.w a5,d0
    167a:	|        |  |  |  |  |  |        |        |                     moveq #12,d1
    167c:	|        |  |  |  |  |  |        |        |                     lsl.w d1,d0
    167e:	|        |  |  |  |  |  |        |        |                     move.w #2544,d1
    1682:	|        |  |  |  |  |  |        |        |                     sub.w d0,d1
    1684:	|        |  |  |  |  |  |        |        |                     move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb190e>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    168a:	|        |  |  |  |  |  |        |        |                     move.l (a2),d0
    168c:	|        |  |  |  |  |  |        |        |                     move.l d0,d1
    168e:	|  ,-----|--|--|--|--|--|--------|--------|-------------------- bmi.w 1b32 <CstDrawZBuffer+0x5e0>
    1692:	|  |     |  |  |  |  |  |        |        |                     asr.l #3,d1
    1694:	|  |     |  |  |  |  |  |        |        |                     sub.w d2,d1
    1696:	|  |     |  |  |  |  |  |        |        |                     move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb1932>
            custom->bltdmod = 0;                                                            
    169c:	|  |     |  |  |  |  |  |        |        |                     move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1934>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    16a4:	|  |  ,--|--|--|--|--|--|--------|--------|-------------------> move.w d7,d1
    16a6:	|  |  |  |  |  |  |  |  |        |        |                     sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    16a8:	|  |  |  |  |  |  |  |  |        |        |                     movea.w d4,a0
    16aa:	|  |  |  |  |  |  |  |  |        |        |                     cmpa.l d3,a0
    16ac:	|  |  |  |  |  |  |  |  |        |     ,--|-------------------- ble.w 182a <CstDrawZBuffer+0x2d8>
          height = sprite->height;
    16b0:	|  |  |  |  |  |  |  |  |        |     |  |        ,----------> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    16b4:	|  |  |  |  |  |  |  |  |        |     |  |        |            move.l d0,-(sp)
    16b6:	|  |  |  |  |  |  |  |  |        |     |  |        |            move.w d1,-(sp)
    16b8:	|  |  |  |  |  |  |  |  |        |     |  |        |            clr.w -(sp)
    16ba:	|  |  |  |  |  |  |  |  |        |     |  |        |            jsr 18f0a <__mulsi3>
    16c0:	|  |  |  |  |  |  |  |  |        |     |  |        |            addq.l #8,sp
    16c2:	|  |  |  |  |  |  |  |  |        |     |  |        |            tst.l d0
    16c4:	|  |  |  |  |  |  |  |  |        |     |  |  ,-----|----------- blt.w 1840 <CstDrawZBuffer+0x2ee>
    16c8:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  ,-------> asr.l #3,d0
    16ca:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         add.l d6,d0
    16cc:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
        UWORD bltsize =  height*64+bytewidth/2;          
    16d2:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lsl.w #6,d4
    16d4:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    16d6:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         add.w d2,d4
    16d8:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
       
        WaitBlit();
    16de:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         lea 1e8cc <GfxBase>,a0
    16e4:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         movea.l (a0),a6
    16e6:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         jsr -228(a6)

        custom->bltafwm = 0xffff;
    16ea:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb1912>
        custom->bltalwm = 0xffff;
    16f2:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1914>
        custom->bltamod = 2;
    16fa:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb1932>
        custom->bltbmod = 0;
    1702:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb1930>
        custom->bltdmod = 0;
    170a:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1934>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1712:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb190e>
        custom->bltcon1 = 0;        
    171a:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb1910>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    1722:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l 1e7fe <CstZBufferWork>,d0
    1728:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         addq.l #2,d0
    172a:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>

        if (zbufferset == 0) {
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1730:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         move.l (a3),d2
    1732:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         movea.l 4(a3),a5
        if (zbufferset == 0) {
    1736:	|  |  |  |  |  |  |  |  |        |     |  |  |     |  |         tst.w 46(sp)
    173a:	|  |  |  |  |  |  |  |  |        |  ,--|--|--|-----|--|-------- bne.w 18b8 <CstDrawZBuffer+0x366>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    173e:	|  |  |  |  |  |  |  |  |        |  |  |  |  |  ,--|--|-------> move.l d2,d0
    1740:	|  |  |  |  |  |  |  |  |  ,-----|--|--|--|--|--|--|--|-------- bmi.w 18ee <CstDrawZBuffer+0x39c>
    1744:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         asr.l #3,d0
    1746:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l a5,-(sp)
    1748:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d0,-(sp)
    174a:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         jsr 18f0a <__mulsi3>
    1750:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         addq.l #8,sp
    1752:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d0,d1
    1754:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d0,d1
    1756:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d1,d1
    1758:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l d0,d1
    175a:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         add.l 24(a3),d1
    175e:	|  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |         move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
        }
        else {
          custom->bltbpt = (APTR) CstZBufferResult;
        }
        custom->bltdpt = (APTR) CstZBufferResult;
    1764:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|-------> move.l 1e7fa <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    176e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.w a5,d1
    1770:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         lsl.w #6,d1
    1772:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d2,d0
    1774:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----- bmi.w 18d6 <CstDrawZBuffer+0x384>
    1778:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,-> asr.l #4,d0
    177a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    177c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
        zbufferset = 1;
    1782:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w #1,46(sp)
      }
    }
    zbuffer = zbuffer->nextPanel;
    1788:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    178c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1790:	|  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|-- bne.w 15d4 <CstDrawZBuffer+0x82>
  }
  
  if(zbufferset == 0)
    1794:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   tst.w 46(sp)
    1798:	+--|--|--|--|--|--|--|-----|--|--|--|--|--|--|--|--|--|--|--|-- beq.w 1a80 <CstDrawZBuffer+0x52e>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    179c:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.l 1e7fa <CstZBufferResult>,d0

}
    17a2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    17a6:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    17a8:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    17aa:	|  |  |  |  >--|--|--|-----|--|--|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    17ac:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    17ae:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    17b0:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    17b2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb1912>
          custom->bltalwm = 0xffff;                      
    17ba:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1914>
          custom->bltcon1 = 0;          
    17c2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb1910>
            WaitBlit();   
    17ca:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   lea 1e8cc <GfxBase>,a0
    17d0:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    17d2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    17d4:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    17d6:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    17d8:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    17de:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    17e2:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   clr.w d0
    17e4:	|  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    17e6:	|  |  |  |  |  |  |  |     |  |  |  |  |  '--|--|--|--|--|--|-- bne.w 1668 <CstDrawZBuffer+0x116>
            WaitBlit();         
    17ea:	|  |  |  |  |  |  |  |     |  |  '--|--|-----|--|--|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    17ee:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l 1e7fe <CstZBufferWork>,d0
    17f4:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   addq.l #2,d0
    17f6:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
            custom->bltcon0 = 4096 + 0x9f0;              
    17fc:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb190e>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1804:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l (a2),d0
    1806:	|  |  |  |  |  |  |  |     |  |     |  |     |  |  |  |  |  |   move.l d0,d1
    1808:	|  |  |  |  |  |  |  |  ,--|--|-----|--|-----|--|--|--|--|--|-- bmi.w 1b1a <CstDrawZBuffer+0x5c8>
    180c:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   asr.l #3,d1
    180e:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   sub.w d2,d1
    1810:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb1932>
            custom->bltdmod = 2;                                                            
    1816:	|  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1934>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    181e:	|  |  |  |  |  |  |  |  |  |  |  ,--|--|-----|--|--|--|--|--|-> move.w d7,d1
    1820:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1822:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   movea.w d4,a0
    1824:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |   cmpa.l d3,a0
    1826:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  '--|--|--|-- bgt.w 16b0 <CstDrawZBuffer+0x15e>
          height = zbuffery2oncanvas - spritey1oncanvas;
    182a:	|  |  |  |  |  |  |  |  |  |  |  |  |  '-----|--|-----|--|--|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    182c:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   move.l d0,-(sp)
    182e:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   move.w d1,-(sp)
    1830:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   clr.w -(sp)
    1832:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   jsr 18f0a <__mulsi3>
    1838:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   addq.l #8,sp
    183a:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     |  |  |   tst.l d0
    183c:	|  |  |  |  |  |  |  |  |  |  |  |  |        |  |     '--|--|-- bge.w 16c8 <CstDrawZBuffer+0x176>
    1840:	|  |  |  |  |  |  |  |  |  |  |  |  |        '--|--------|--|-> addq.l #7,d0
    1842:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   asr.l #3,d0
    1844:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   add.l d6,d0
    1846:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
        UWORD bltsize =  height*64+bytewidth/2;          
    184c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lsl.w #6,d4
    184e:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1850:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   add.w d2,d4
    1852:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
        WaitBlit();
    1858:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   lea 1e8cc <GfxBase>,a0
    185e:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   movea.l (a0),a6
    1860:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   jsr -228(a6)
        custom->bltafwm = 0xffff;
    1864:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb1912>
        custom->bltalwm = 0xffff;
    186c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1914>
        custom->bltamod = 2;
    1874:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb1932>
        custom->bltbmod = 0;
    187c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb1930>
        custom->bltdmod = 0;
    1884:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1934>
        custom->bltcon0 = 0xd0c; //Copy A to D
    188c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb190e>
        custom->bltcon1 = 0;        
    1894:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb1910>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    189c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l 1e7fe <CstZBufferWork>,d0
    18a2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   addq.l #2,d0
    18a4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    18aa:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   move.l (a3),d2
    18ac:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   movea.l 4(a3),a5
        if (zbufferset == 0) {
    18b0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |   tst.w 46(sp)
    18b4:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--------|--|-- beq.w 173e <CstDrawZBuffer+0x1ec>
          custom->bltbpt = (APTR) CstZBufferResult;
    18b8:	|  |  |  |  |  |  |  |  |  |  |  |  '--------------------|--|-> move.l 1e7fa <CstZBufferResult>,dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
        custom->bltdpt = (APTR) CstZBufferResult;
    18c2:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.l 1e7fa <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    18cc:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.w a5,d1
    18ce:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   lsl.w #6,d1
    18d0:	|  |  |  |  |  |  |  |  |  |  |  |                       |  |   move.l d2,d0
    18d2:	|  |  |  |  |  |  |  |  |  |  |  |                       |  '-- bpl.w 1778 <CstDrawZBuffer+0x226>
    18d6:	|  |  |  |  |  |  |  |  |  |  |  |                       '----> moveq #15,d0
    18d8:	|  |  |  |  |  |  |  |  |  |  |  |                              add.l d2,d0
    18da:	|  |  |  |  |  |  |  |  |  |  |  |                              asr.l #4,d0
    18dc:	|  |  |  |  |  |  |  |  |  |  |  |                              add.w d1,d0
    18de:	|  |  |  |  |  |  |  |  |  |  |  |                              move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
        zbufferset = 1;
    18e4:	|  |  |  |  |  |  |  |  |  |  |  |                              move.w #1,46(sp)
    18ea:	|  |  |  +--|--|--|--|--|--|--|--|----------------------------- bra.w 1788 <CstDrawZBuffer+0x236>
          custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    18ee:	|  |  |  |  |  |  |  |  |  '--|--|----------------------------> addq.l #7,d0
    18f0:	|  |  |  |  |  |  |  |  |     |  |                              asr.l #3,d0
    18f2:	|  |  |  |  |  |  |  |  |     |  |                              move.l a5,-(sp)
    18f4:	|  |  |  |  |  |  |  |  |     |  |                              move.l d0,-(sp)
    18f6:	|  |  |  |  |  |  |  |  |     |  |                              jsr 18f0a <__mulsi3>
    18fc:	|  |  |  |  |  |  |  |  |     |  |                              addq.l #8,sp
    18fe:	|  |  |  |  |  |  |  |  |     |  |                              move.l d0,d1
    1900:	|  |  |  |  |  |  |  |  |     |  |                              add.l d0,d1
    1902:	|  |  |  |  |  |  |  |  |     |  |                              add.l d1,d1
    1904:	|  |  |  |  |  |  |  |  |     |  |                              add.l d0,d1
    1906:	|  |  |  |  |  |  |  |  |     |  |                              add.l 24(a3),d1
    190a:	|  |  |  |  |  |  |  |  |     |  |                              move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
    1910:	|  |  |  |  |  |  |  |  |     '--|----------------------------- bra.w 1764 <CstDrawZBuffer+0x212>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1914:	|  |  |  |  |  |  |  '--|--------|----------------------------> move.w 48(sp),d1
    1918:	|  |  |  |  |  |  |     |        |                              add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    191a:	|  |  |  |  |  |  |     |        |                              andi.l #65535,d1
    1920:	|  |  |  |  |  |  |     |        |                              movea.l d1,a6
    1922:	|  |  |  |  |  |  |     |        |                              movea.w d6,a1
    1924:	|  |  |  |  |  |  |     |        |                              cmpa.l d1,a1
    1926:	|  |  |  +--|--|--|-----|--------|----------------------------- bge.w 1788 <CstDrawZBuffer+0x236>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    192a:	|  |  |  |  |  |  |     |        |                              move.w 50(sp),d1
    192e:	|  |  |  |  |  |  |     |        |                              cmp.w d1,d5
    1930:	|  |  |  |  |  |  |     |        |        ,-------------------- bge.w 1a3c <CstDrawZBuffer+0x4ea>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1934:	|  |  |  |  |  |  |     |        |        |                     cmp.w 50(sp),d4
    1938:	|  |  |  +--|--|--|-----|--------|--------|-------------------- ble.w 1788 <CstDrawZBuffer+0x236>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    193c:	|  |  |  |  |  |  |     |        |        |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1940:	|  |  |  |  |  |  |     |        |        |                     move.w d6,d1
    1942:	|  |  |  |  |  |  |     |        |        |                     lsr.w #4,d1
    1944:	|  |  |  |  |  |  |     |        |        |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1946:	|  |  |  |  |  |  |     |        |        |                     andi.w #15,d6
    194a:	|  |  |  |  |  |  |     |        |        |                     move.w d6,44(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    194e:	|  |  |  |  |  |  |     |        |        |                     tst.l d2
    1950:	|  |  |  |  |  |  |     |        |     ,--|-------------------- blt.w 19da <CstDrawZBuffer+0x488>
    1954:	|  |  |  |  |  |  |     |        |     |  |  ,----------------> asr.l #4,d2
    1956:	|  |  |  |  |  |  |     |        |     |  |  |                  addq.l #1,d2
    1958:	|  |  |  |  |  |  |     |        |     |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    195a:	|  |  |  |  |  |  |     |        |     |  |  |                  movea.w d0,a0
    195c:	|  |  |  |  |  |  |     |        |     |  |  |                  cmpa.l a0,a6
    195e:	|  |  |  |  |  |  |     |        |     |  |  |  ,-------------- bge.w 19ec <CstDrawZBuffer+0x49a>
            WaitBlit();  
    1962:	|  |  |  |  |  |  |     |        |     |  |  |  |  ,----------> lea 1e8cc <GfxBase>,a0
    1968:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            movea.l (a0),a6
    196a:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    196e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb1912>
            custom->bltalwm = 0xffff;          
    1976:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1914>
            custom->bltdpt = CstZBufferWork;        
    197e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l 1e7fe <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
            custom->bltcon1 = 0;               
    1988:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb1910>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1990:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1994:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l (a2),d0
    1996:	|  |  |  |  |  |  |     |        |     |  |  |  |  |            move.l d0,d1
    1998:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     ,----- bmi.s 1a04 <CstDrawZBuffer+0x4b2>
    199a:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      asr.l #3,d1
    199c:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      movea.w d1,a6
    199e:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    19a0:	|  |  |  |  |  |  |     |        |     |  |  |  |  |     |      tst.w 44(sp)
    19a4:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  ,--|----- beq.s 1a12 <CstDrawZBuffer+0x4c0>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    19a6:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  ,-> move.w 44(sp),d6
    19aa:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   moveq #12,d1
    19ac:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   lsl.w d1,d6
    19ae:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addi.w #2544,d6
    19b2:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb190e>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    19b8:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb1932>
              custom->bltdmod = 0;                                                            
    19be:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1934>
              xdiffbyte += 2;                 
    19c6:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.w a5,d1
    19c8:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addq.w #1,d1
    19ca:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    19cc:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   andi.l #65535,d1
    19d2:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   move.l a0,d6
    19d4:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   sub.l d1,d6
    19d6:	|  |  +--|--|--|--|-----|--------|-----|--|--|--|--|--|--|--|-- bra.w 16a4 <CstDrawZBuffer+0x152>
          bytewidth = (sprite->width/16)*2 + 2;
    19da:	|  |  |  |  |  |  |     |        |     >--|--|--|--|--|--|--|-> moveq #15,d6
    19dc:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.l d6,d2
    19de:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   asr.l #4,d2
    19e0:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   addq.l #1,d2
    19e2:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    19e4:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   movea.w d0,a0
    19e6:	|  |  |  |  |  |  |     |        |     |  |  |  |  |  |  |  |   cmpa.l a0,a6
    19e8:	|  |  |  |  |  |  |     |        |     |  |  |  |  '--|--|--|-- blt.w 1962 <CstDrawZBuffer+0x410>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    19ec:	|  |  |  |  |  |  |     |        |     |  |  |  '-----|--|--|-> pea 19190 <PutChar+0x170>
    19f2:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   jsr 1857e <KPrintF>
              return FALSE;
    19f8:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   addq.l #4,sp
    19fa:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   moveq #0,d0
}
    19fc:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1a00:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   addq.l #8,sp
    1a02:	|  |  |  |  |  |  |     |        |     |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a04:	|  |  |  |  |  |  |     |        |     |  |  |        |  '--|-> addq.l #7,d1
    1a06:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   asr.l #3,d1
    1a08:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   movea.w d1,a6
    1a0a:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    1a0c:	|  |  |  |  |  |  |     |        |     |  |  |        |     |   tst.w 44(sp)
    1a10:	|  |  |  |  |  |  |     |        |     |  |  |        |     '-- bne.s 19a6 <CstDrawZBuffer+0x454>
              custom->bltcon0 = 0x9f0;              
    1a12:	|  |  |  |  |  |  |     |        |     |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb190e>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a1a:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb1932>
              custom->bltdmod = 0;                                                            
    1a20:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1934>
              xdiffbyte += 2;                 
    1a28:	|  |  |  |  |  |  |     |        |     |  |  |                  move.w a5,d1
    1a2a:	|  |  |  |  |  |  |     |        |     |  |  |                  addq.w #1,d1
    1a2c:	|  |  |  |  |  |  |     |        |     |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a2e:	|  |  |  |  |  |  |     |        |     |  |  |                  andi.l #65535,d1
    1a34:	|  |  |  |  |  |  |     |        |     |  |  |                  move.l a0,d6
    1a36:	|  |  |  |  |  |  |     |        |     |  |  |                  sub.l d1,d6
    1a38:	|  |  +--|--|--|--|-----|--------|-----|--|--|----------------- bra.w 16a4 <CstDrawZBuffer+0x152>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1a3c:	|  |  |  |  |  |  |     |        |     |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1a3e:	|  |  |  |  |  |  |     |        |     |     |                  cmpa.l d3,a0
    1a40:	|  |  |  +--|--|--|-----|--------|-----|-----|----------------- bge.w 1788 <CstDrawZBuffer+0x236>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1a44:	|  |  |  |  |  |  |     |        |     |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1a48:	|  |  |  |  |  |  |     |        |     |     |                  move.w d6,d1
    1a4a:	|  |  |  |  |  |  |     |        |     |     |                  lsr.w #4,d1
    1a4c:	|  |  |  |  |  |  |     |        |     |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1a4e:	|  |  |  |  |  |  |     |        |     |     |                  andi.w #15,d6
    1a52:	|  |  |  |  |  |  |     |        |     |     |                  move.w d6,44(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1a56:	|  |  |  |  |  |  |     |        |     |     |                  tst.l d2
    1a58:	|  |  |  |  |  |  |     |        |     |     '----------------- bge.w 1954 <CstDrawZBuffer+0x402>
    1a5c:	|  |  |  |  |  |  |     |        |     '----------------------- bra.w 19da <CstDrawZBuffer+0x488>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1a60:	|  |  |  |  |  '--|-----|--------|----------------------------> cmp.w 50(sp),d4
    1a64:	|  |  |  '--|-----|-----|--------|----------------------------- ble.w 1788 <CstDrawZBuffer+0x236>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1a68:	|  |  |     |     |     |        |                              move.w 48(sp),d0
    1a6c:	|  |  |     |     |     |        |                              sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1a6e:	|  |  |     |     |     |        |                              move.w d0,d6
    1a70:	|  |  |     |     |     |        |                              andi.w #15,d6
    1a74:	|  |  |     |     |     |        |                              movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1a76:	|  |  |     |     |     |        |                              tst.l d2
    1a78:	|  |  |     |     '-----|--------|----------------------------- bge.w 162c <CstDrawZBuffer+0xda>
    1a7c:	|  |  |     '-----------|--------|----------------------------- bra.w 17aa <CstDrawZBuffer+0x258>
    WaitBlit();
    1a80:	'--|--|-----------------|--------|----------------------------> movea.l 1e8cc <GfxBase>,a6
    1a86:	   |  |                 |        |                              jsr -228(a6)
    custom->bltafwm = 0xffff;
    1a8a:	   |  |                 |        |                              move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb1912>
    custom->bltalwm = 0xffff;
    1a92:	   |  |                 |        |                              move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb1914>
    custom->bltamod = 0;
    1a9a:	   |  |                 |        |                              move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb1932>
    custom->bltbmod = 0;
    1aa2:	   |  |                 |        |                              move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb1930>
    custom->bltcmod = 0;
    1aaa:	   |  |                 |        |                              move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb192e>
    custom->bltdmod = 0;
    1ab2:	   |  |                 |        |                              move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1934>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1aba:	   |  |                 |        |                              move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb190e>
    custom->bltcon1 = 0;        
    1ac2:	   |  |                 |        |                              move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb1910>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1aca:	   |  |                 |        |                              move.l (a3),d2
    1acc:	   |  |                 |        |                              move.l 4(a3),d3
    1ad0:	   |  |                 |        |                              move.l d2,d0
    1ad2:	   |  |                 |        |                    ,-------- bmi.w 1b5a <CstDrawZBuffer+0x608>
    1ad6:	   |  |                 |        |                    |         asr.l #3,d0
    1ad8:	   |  |                 |        |                    |         move.l d3,-(sp)
    1ada:	   |  |                 |        |                    |         move.l d0,-(sp)
    1adc:	   |  |                 |        |                    |         jsr 18f0a <__mulsi3>
    1ae2:	   |  |                 |        |                    |         addq.l #8,sp
    1ae4:	   |  |                 |        |                    |         move.l d0,d1
    1ae6:	   |  |                 |        |                    |         add.l d0,d1
    1ae8:	   |  |                 |        |                    |         add.l d1,d1
    1aea:	   |  |                 |        |                    |         add.l d1,d0
    1aec:	   |  |                 |        |                    |         add.l 24(a3),d0
    1af0:	   |  |                 |        |                    |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltdpt = (APTR) CstZBufferResult;
    1af6:	   |  |                 |        |                    |         move.l 1e7fa <CstZBufferResult>,d0
    1afc:	   |  |                 |        |                    |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b02:	   |  |                 |        |                    |         lsl.w #6,d3
    1b04:	   |  |                 |        |                    |         tst.l d2
    1b06:	   |  |                 |        |                 ,--|-------- blt.s 1b4a <CstDrawZBuffer+0x5f8>
    1b08:	   |  |                 |        |                 |  |  ,----> asr.l #4,d2
    1b0a:	   |  |                 |        |                 |  |  |      add.w d2,d3
    1b0c:	   |  |                 |        |                 |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
}
    1b12:	   |  |                 |        |                 |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1b16:	   |  |                 |        |                 |  |  |  |   addq.l #8,sp
    1b18:	   |  |                 |        |                 |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b1a:	   |  |                 '--------|-----------------|--|--|--|-> addq.l #7,d1
    1b1c:	   |  |                          |                 |  |  |  |   asr.l #3,d1
    1b1e:	   |  |                          |                 |  |  |  |   sub.w d2,d1
    1b20:	   |  |                          |                 |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb1932>
            custom->bltdmod = 2;                                                            
    1b26:	   |  |                          |                 |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1934>
    1b2e:	   |  |                          '-----------------|--|--|--|-- bra.w 181e <CstDrawZBuffer+0x2cc>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b32:	   '--|--------------------------------------------|--|--|--|-> addq.l #7,d1
    1b34:	      |                                            |  |  |  |   asr.l #3,d1
    1b36:	      |                                            |  |  |  |   sub.w d2,d1
    1b38:	      |                                            |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb1932>
            custom->bltdmod = 0;                                                            
    1b3e:	      |                                            |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1934>
    1b46:	      '--------------------------------------------|--|--|--|-- bra.w 16a4 <CstDrawZBuffer+0x152>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b4a:	                                                   >--|--|--|-> moveq #15,d1
    1b4c:	                                                   |  |  |  |   add.l d1,d2
    1b4e:	                                                   |  |  |  |   asr.l #4,d2
    1b50:	                                                   |  |  |  |   add.w d2,d3
    1b52:	                                                   |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
  return CstZBufferResult;
    1b58:	                                                   |  |  |  '-- bra.s 1b12 <CstDrawZBuffer+0x5c0>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1b5a:	                                                   |  '--|----> addq.l #7,d0
    1b5c:	                                                   |     |      asr.l #3,d0
    1b5e:	                                                   |     |      move.l d3,-(sp)
    1b60:	                                                   |     |      move.l d0,-(sp)
    1b62:	                                                   |     |      jsr 18f0a <__mulsi3>
    1b68:	                                                   |     |      addq.l #8,sp
    1b6a:	                                                   |     |      move.l d0,d1
    1b6c:	                                                   |     |      add.l d0,d1
    1b6e:	                                                   |     |      add.l d1,d1
    1b70:	                                                   |     |      add.l d1,d0
    1b72:	                                                   |     |      add.l 24(a3),d0
    1b76:	                                                   |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b7c:	                                                   |     |      move.l 1e7fa <CstZBufferResult>,d0
    1b82:	                                                   |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b88:	                                                   |     |      lsl.w #6,d3
    1b8a:	                                                   |     |      tst.l d2
    1b8c:	                                                   |     '----- bge.w 1b08 <CstDrawZBuffer+0x5b6>
    1b90:	                                                   '----------- bra.s 1b4a <CstDrawZBuffer+0x5f8>

00001b92 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b92:	    lea -20(sp),sp
    1b96:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b98:	    move.l 1e7e2 <CstDrawBuffer>,d0
    1b9e:	,-- beq.s 1bb8 <CstFreeBuffer+0x26>
    1ba0:	|   move.l 1e7e2 <CstDrawBuffer>,20(sp)
    1ba8:	|   move.l 1e8c0 <SysBase>,d0
    1bae:	|   movea.l d0,a6
    1bb0:	|   movea.l 20(sp),a1
    1bb4:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1bb8:	'-> move.l 1e7de <CstViewBuffer>,d0
    1bbe:	,-- beq.s 1bd8 <CstFreeBuffer+0x46>
    1bc0:	|   move.l 1e7de <CstViewBuffer>,16(sp)
    1bc8:	|   move.l 1e8c0 <SysBase>,d0
    1bce:	|   movea.l d0,a6
    1bd0:	|   movea.l 16(sp),a1
    1bd4:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1bd8:	'-> move.l 1e7da <CstCopperList>,d0
    1bde:	,-- beq.s 1bf8 <CstFreeBuffer+0x66>
    1be0:	|   move.l 1e7da <CstCopperList>,12(sp)
    1be8:	|   move.l 1e8c0 <SysBase>,d0
    1bee:	|   movea.l d0,a6
    1bf0:	|   movea.l 12(sp),a1
    1bf4:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1bf8:	'-> move.l 1e7d2 <CstBackDrop>,d0
    1bfe:	,-- beq.s 1c18 <CstFreeBuffer+0x86>
    1c00:	|   move.l 1e7d2 <CstBackDrop>,8(sp)
    1c08:	|   move.l 1e8c0 <SysBase>,d0
    1c0e:	|   movea.l d0,a6
    1c10:	|   movea.l 8(sp),a1
    1c14:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1c18:	'-> move.l 1e7d6 <CstBackDropBackup>,d0
    1c1e:	,-- beq.s 1c38 <CstFreeBuffer+0xa6>
    1c20:	|   move.l 1e7d6 <CstBackDropBackup>,4(sp)
    1c28:	|   move.l 1e8c0 <SysBase>,d0
    1c2e:	|   movea.l d0,a6
    1c30:	|   movea.l 4(sp),a1
    1c34:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1c38:	'-> clr.l 1e7e2 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1c3e:	    clr.l 1e7de <CstViewBuffer>
  CstCopperList = NULL;
    1c44:	    clr.l 1e7da <CstCopperList>
  CstBackDrop = NULL;
    1c4a:	    clr.l 1e7d2 <CstBackDrop>

}
    1c50:	    nop
    1c52:	    movea.l (sp)+,a6
    1c54:	    lea 20(sp),sp
    1c58:	    rts

00001c5a <CstFreeze>:



void CstFreeze( ) {
    1c5a:	       lea -64(sp),sp
    1c5e:	       move.l a6,-(sp)
    1c60:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1c62:	       pea 191e0 <PutChar+0x1c0>
    1c68:	       jsr 1857e <KPrintF>
    1c6e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c70:	       move.l 1e806 <winWidth>,d0
    1c76:	       lsr.l #3,d0
    1c78:	       move.l d0,d1
    1c7a:	       move.l 1e80a <winHeight>,d0
    1c80:	       move.l d0,d0
    1c82:	       muls.w d0,d1
    1c84:	       move.w d1,d0
    1c86:	       add.w d0,d0
    1c88:	       add.w d0,d0
    1c8a:	       move.w d0,d2
    1c8c:	       add.w d1,d2
    1c8e:	       move.w d2,54(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c92:	       move.l #14675968,50(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c9a:	       moveq #0,d0
    1c9c:	       move.w 54(sp),d0
    1ca0:	       move.l d0,46(sp)
    1ca4:	       clr.l 42(sp)
    1ca8:	       move.l 1e8c0 <SysBase>,d0
    1cae:	       movea.l d0,a6
    1cb0:	       move.l 46(sp),d0
    1cb4:	       move.l 42(sp),d1
    1cb8:	       jsr -684(a6)
    1cbc:	       move.l d0,38(sp)
    1cc0:	       move.l 38(sp),d0
    1cc4:	       move.l d0,1e7d6 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1cca:	       move.l 1e7d6 <CstBackDropBackup>,d0
    1cd0:	   ,-- bne.s 1ce0 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1cd2:	   |   pea 19207 <PutChar+0x1e7>
    1cd8:	   |   jsr 1857e <KPrintF>
    1cde:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1ce0:	   '-> move.l 1e80a <winHeight>,d0
    1ce6:	       move.l d0,d0
    1ce8:	       movea.w d0,a1
    1cea:	       move.l 1e806 <winWidth>,d0
    1cf0:	       move.l d0,d0
    1cf2:	       movea.w d0,a0
    1cf4:	       move.l 1e7d6 <CstBackDropBackup>,d0
    1cfa:	       clr.l -(sp)
    1cfc:	       pea 5 <_start+0x5>
    1d00:	       move.l a1,-(sp)
    1d02:	       move.l a0,-(sp)
    1d04:	       pea 1923f <PutChar+0x21f>
    1d0a:	       move.l d0,-(sp)
    1d0c:	       jsr 18666 <debug_register_bitmap>
    1d12:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1d16:	       move.l 1e7d2 <CstBackDrop>,68(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1d1e:	       move.l 1e7d6 <CstBackDropBackup>,64(sp)
  for(int i=0;i<size/4;i++) 
    1d26:	       clr.l 60(sp)
    1d2a:	   ,-- bra.s 1d50 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1d2c:	,--|-> move.l 68(sp),d1
    1d30:	|  |   move.l d1,d0
    1d32:	|  |   addq.l #4,d0
    1d34:	|  |   move.l d0,68(sp)
    1d38:	|  |   move.l 64(sp),d0
    1d3c:	|  |   move.l d0,d2
    1d3e:	|  |   addq.l #4,d2
    1d40:	|  |   move.l d2,64(sp)
    1d44:	|  |   movea.l d1,a0
    1d46:	|  |   move.l (a0),d1
    1d48:	|  |   movea.l d0,a0
    1d4a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d4c:	|  |   addq.l #1,60(sp)
    1d50:	|  '-> move.w 54(sp),d0
    1d54:	|      lsr.w #2,d0
    1d56:	|      move.w d0,d0
    1d58:	|      andi.l #65535,d0
    1d5e:	|      cmp.l 60(sp),d0
    1d62:	'----- bgt.s 1d2c <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1d64:	       move.l 1e7de <CstViewBuffer>,68(sp)
  dst = (ULONG *) CstBackDrop;
    1d6c:	       move.l 1e7d2 <CstBackDrop>,64(sp)

  for(int i=0;i<size/4;i++) 
    1d74:	       clr.l 56(sp)
    1d78:	   ,-- bra.s 1d9e <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1d7a:	,--|-> move.l 68(sp),d1
    1d7e:	|  |   move.l d1,d0
    1d80:	|  |   addq.l #4,d0
    1d82:	|  |   move.l d0,68(sp)
    1d86:	|  |   move.l 64(sp),d0
    1d8a:	|  |   move.l d0,d2
    1d8c:	|  |   addq.l #4,d2
    1d8e:	|  |   move.l d2,64(sp)
    1d92:	|  |   movea.l d1,a0
    1d94:	|  |   move.l (a0),d1
    1d96:	|  |   movea.l d0,a0
    1d98:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d9a:	|  |   addq.l #1,56(sp)
    1d9e:	|  '-> move.w 54(sp),d0
    1da2:	|      lsr.w #2,d0
    1da4:	|      move.w d0,d0
    1da6:	|      andi.l #65535,d0
    1dac:	|      cmp.l 56(sp),d0
    1db0:	'----- bgt.s 1d7a <CstFreeze+0x120>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    1db2:	       move.l 1e7ea <CstCleanupQueueDrawBuffer>,34(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1dba:	       moveq #20,d0
    1dbc:	       move.l d0,30(sp)
    1dc0:	       clr.l 26(sp)
    1dc4:	       move.l 1e8c0 <SysBase>,d0
    1dca:	       movea.l d0,a6
    1dcc:	       move.l 30(sp),d0
    1dd0:	       move.l 26(sp),d1
    1dd4:	       jsr -684(a6)
    1dd8:	       move.l d0,22(sp)
    1ddc:	       move.l 22(sp),d0
    1de0:	       move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    1de6:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    1dec:	       move.l 34(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    1df2:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    1df8:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    1dfa:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    1e00:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    1e04:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    1e0a:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    1e0e:	       move.l 1e806 <winWidth>,d0
    1e14:	       lsr.l #4,d0
    1e16:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    1e1c:	       move.l d0,d0
    1e1e:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    1e22:	       move.l 1e80a <winHeight>,d0
    1e28:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    1e2e:	       move.l d0,d0
    1e30:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    1e34:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    1e3a:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    1e3e:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    1e44:	       clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    1e48:	       move.l 1e7e6 <CstCleanupQueueViewBuffer>,34(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1e50:	       moveq #20,d2
    1e52:	       move.l d2,18(sp)
    1e56:	       clr.l 14(sp)
    1e5a:	       move.l 1e8c0 <SysBase>,d0
    1e60:	       movea.l d0,a6
    1e62:	       move.l 18(sp),d0
    1e66:	       move.l 14(sp),d1
    1e6a:	       jsr -684(a6)
    1e6e:	       move.l d0,10(sp)
    1e72:	       move.l 10(sp),d0
    1e76:	       move.l d0,1e7e6 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1e7c:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    1e82:	       move.l 34(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    1e88:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    1e8e:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    1e90:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    1e96:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    1e9a:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    1ea0:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    1ea4:	       move.l 1e806 <winWidth>,d0
    1eaa:	       lsr.l #4,d0
    1eac:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    1eb2:	       move.l d0,d0
    1eb4:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    1eb8:	       move.l 1e80a <winHeight>,d0
    1ebe:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    1ec4:	       move.l d0,d0
    1ec6:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    1eca:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    1ed0:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    1ed4:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    1eda:	       clr.w 14(a0)

  KPrintF("CstFreeze: Finished");
    1ede:	       pea 1924e <PutChar+0x22e>
    1ee4:	       jsr 1857e <KPrintF>
    1eea:	       addq.l #4,sp

}  
    1eec:	       nop
    1eee:	       move.l (sp)+,d2
    1ef0:	       movea.l (sp)+,a6
    1ef2:	       lea 64(sp),sp
    1ef6:	       rts

00001ef8 <CstLoadBackdrop>:

  AddIntServer( INTB_COPER, CstVbint); 

}

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1ef8:	             lea -172(sp),sp
    1efc:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f00:	             pea 19270 <PutChar+0x250>
    1f06:	             jsr 1857e <KPrintF>
    1f0c:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f0e:	             move.l 192(sp),-(sp)
    1f12:	             jsr 6bc <get2bytes>
    1f18:	             addq.l #4,sp
    1f1a:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1f1e:	             move.l 192(sp),-(sp)
    1f22:	             jsr 6bc <get2bytes>
    1f28:	             addq.l #4,sp
    1f2a:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1f2e:	             move.w 162(sp),d0
    1f32:	             lsr.w #3,d0
    1f34:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1f38:	             move.w 158(sp),d0
    1f3c:	             lsr.w #1,d0
    1f3e:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1f42:	             move.l 1e806 <winWidth>,d0
    1f48:	             lsr.l #3,d0
    1f4a:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1f4e:	             move.w 158(sp),d0
    1f52:	             muls.w 160(sp),d0
    1f56:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1f5a:	             move.w 152(sp),d1
    1f5e:	             move.w d1,d0
    1f60:	             add.w d0,d0
    1f62:	             add.w d0,d0
    1f64:	             move.w d0,d2
    1f66:	             add.w d1,d2
    1f68:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1f6c:	             move.w 1e7cc <CstPaletteLoaded>,d0
    1f72:	,----------- bne.w 200c <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1f76:	|            move.w #384,148(sp)

    if(CstPalette) {
    1f7c:	|            move.l 1e7f2 <CstPalette>,d0
    1f82:	|        ,-- beq.s 1f9c <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1f84:	|        |   move.l 1e7f2 <CstPalette>,144(sp)
    1f8c:	|        |   move.l 1e8c0 <SysBase>,d0
    1f92:	|        |   movea.l d0,a6
    1f94:	|        |   movea.l 144(sp),a1
    1f98:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1f9c:	|        '-> moveq #64,d0
    1f9e:	|            move.l d0,140(sp)
    1fa2:	|            clr.l 136(sp)
    1fa6:	|            move.l 1e8c0 <SysBase>,d0
    1fac:	|            movea.l d0,a6
    1fae:	|            move.l 140(sp),d0
    1fb2:	|            move.l 136(sp),d1
    1fb6:	|            jsr -684(a6)
    1fba:	|            move.l d0,132(sp)
    1fbe:	|            move.l 132(sp),d0
    1fc2:	|            move.l d0,1e7f2 <CstPalette>
    CstPaletteLoaded = 1;
    1fc8:	|            move.w #1,1e7cc <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1fd0:	|            move.l 1e7f2 <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1fd8:	|            clr.l 180(sp)
    1fdc:	|        ,-- bra.s 2002 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1fde:	|     ,--|-> move.l 192(sp),-(sp)
    1fe2:	|     |  |   jsr 6bc <get2bytes>
    1fe8:	|     |  |   addq.l #4,sp
    1fea:	|     |  |   move.l d0,d1
    1fec:	|     |  |   move.l 184(sp),d0
    1ff0:	|     |  |   move.l d0,d2
    1ff2:	|     |  |   addq.l #2,d2
    1ff4:	|     |  |   move.l d2,184(sp)
    1ff8:	|     |  |   move.l d1,d1
    1ffa:	|     |  |   movea.l d0,a0
    1ffc:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ffe:	|     |  |   addq.l #1,180(sp)
    2002:	|     |  '-> moveq #31,d0
    2004:	|     |      cmp.l 180(sp),d0
    2008:	|     '----- bge.s 1fde <CstLoadBackdrop+0xe6>
    200a:	|  ,-------- bra.s 202a <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    200c:	'--|-------> clr.l 176(sp)
    2010:	   |     ,-- bra.s 2022 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    2012:	   |  ,--|-> move.l 192(sp),-(sp)
    2016:	   |  |  |   jsr 6bc <get2bytes>
    201c:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    201e:	   |  |  |   addq.l #1,176(sp)
    2022:	   |  |  '-> moveq #31,d2
    2024:	   |  |      cmp.l 176(sp),d2
    2028:	   |  '----- bge.s 2012 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    202a:	   '-------> moveq #0,d0
    202c:	             move.w 150(sp),d0
    2030:	             move.l d0,128(sp)
    2034:	             moveq #2,d0
    2036:	             move.l d0,124(sp)
    203a:	             move.l 1e8c0 <SysBase>,d0
    2040:	             movea.l d0,a6
    2042:	             move.l 128(sp),d0
    2046:	             move.l 124(sp),d1
    204a:	             jsr -684(a6)
    204e:	             move.l d0,120(sp)
    2052:	             move.l 120(sp),d0
    2056:	             move.l d0,116(sp)
  if( !tmpbuffer)
    205a:	         ,-- bne.s 206a <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    205c:	         |   pea 1929f <PutChar+0x27f>
    2062:	         |   jsr 1857e <KPrintF>
    2068:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    206a:	         '-> moveq #0,d0
    206c:	             move.w 152(sp),d0
    2070:	             move.l d0,112(sp)
    2074:	             moveq #2,d2
    2076:	             move.l d2,108(sp)
    207a:	             move.l 1e8c0 <SysBase>,d0
    2080:	             movea.l d0,a6
    2082:	             move.l 112(sp),d0
    2086:	             move.l 108(sp),d1
    208a:	             jsr -684(a6)
    208e:	             move.l d0,104(sp)
    2092:	             move.l 104(sp),d0
    2096:	             move.l d0,100(sp)
  if( !tmpmask)
    209a:	         ,-- bne.s 20aa <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    209c:	         |   pea 192d5 <PutChar+0x2b5>
    20a2:	         |   jsr 1857e <KPrintF>
    20a8:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    20aa:	         '-> move.w 160(sp),d0
    20ae:	             movea.w d0,a1
    20b0:	             move.w 162(sp),d0
    20b4:	             movea.w d0,a0
    20b6:	             clr.l -(sp)
    20b8:	             pea 5 <_start+0x5>
    20bc:	             move.l a1,-(sp)
    20be:	             move.l a0,-(sp)
    20c0:	             pea 19309 <PutChar+0x2e9>
    20c6:	             move.l 136(sp),-(sp)
    20ca:	             jsr 18666 <debug_register_bitmap>
    20d0:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    20d4:	             move.w 160(sp),d0
    20d8:	             movea.w d0,a1
    20da:	             move.w 162(sp),d0
    20de:	             movea.w d0,a0
    20e0:	             clr.l -(sp)
    20e2:	             pea 1 <_start+0x1>
    20e6:	             move.l a1,-(sp)
    20e8:	             move.l a0,-(sp)
    20ea:	             pea 19317 <PutChar+0x2f7>
    20f0:	             move.l 136(sp),-(sp)
    20f4:	             jsr 18666 <debug_register_bitmap>
    20fa:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    20fe:	             move.l 192(sp),96(sp)
    2104:	             move.l 116(sp),92(sp)
    210a:	             moveq #2,d0
    210c:	             move.l d0,88(sp)
    2110:	             move.w 150(sp),d0
    2114:	             lsr.w #1,d0
    2116:	             move.w d0,d0
    2118:	             andi.l #65535,d0
    211e:	             move.l d0,84(sp)
    2122:	             move.l 1e8c8 <DOSBase>,d0
    2128:	             movea.l d0,a6
    212a:	             move.l 96(sp),d1
    212e:	             move.l 92(sp),d2
    2132:	             move.l 88(sp),d3
    2136:	             move.l 84(sp),d4
    213a:	             jsr -324(a6)
    213e:	             move.l d0,80(sp)
    2142:	             move.l 80(sp),d0
    2146:	             move.w d0,78(sp)
  if(!count) {
    214a:	         ,-- bne.s 215e <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    214c:	         |   pea 19323 <PutChar+0x303>
    2152:	         |   jsr 1857e <KPrintF>
    2158:	         |   addq.l #4,sp
    return;
    215a:	   ,-----|-- bra.w 246e <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    215e:	   |     '-> move.l 192(sp),74(sp)
    2164:	   |         move.l 100(sp),70(sp)
    216a:	   |         moveq #2,d2
    216c:	   |         move.l d2,66(sp)
    2170:	   |         move.w 152(sp),d0
    2174:	   |         lsr.w #1,d0
    2176:	   |         move.w d0,d0
    2178:	   |         andi.l #65535,d0
    217e:	   |         move.l d0,62(sp)
    2182:	   |         move.l 1e8c8 <DOSBase>,d0
    2188:	   |         movea.l d0,a6
    218a:	   |         move.l 74(sp),d1
    218e:	   |         move.l 70(sp),d2
    2192:	   |         move.l 66(sp),d3
    2196:	   |         move.l 62(sp),d4
    219a:	   |         jsr -324(a6)
    219e:	   |         move.l d0,58(sp)
    21a2:	   |         move.l 58(sp),d0
    21a6:	   |         move.w d0,78(sp)
   

  if(!count) {
    21aa:	   |     ,-- bne.s 21be <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    21ac:	   |     |   pea 19323 <PutChar+0x303>
    21b2:	   |     |   jsr 1857e <KPrintF>
    21b8:	   |     |   addq.l #4,sp
    return;
    21ba:	   +-----|-- bra.w 246e <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    21be:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    21c6:	   |         move.l 1e7d2 <CstBackDrop>,d0
    21cc:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    21d0:	   |         move.l 200(sp),d0
    21d4:	   |         move.w d0,d1
    21d6:	   |         muls.w 154(sp),d1
    21da:	   |         move.l 196(sp),d0
    21de:	   |     ,-- bpl.s 21e2 <CstLoadBackdrop+0x2ea>
    21e0:	   |     |   addq.l #7,d0
    21e2:	   |     '-> asr.l #3,d0
    21e4:	   |         move.l d0,d0
    21e6:	   |         movea.w d1,a0
    21e8:	   |         adda.w d0,a0
    21ea:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    21ee:	   |         moveq #0,d0
    21f0:	   |         move.w 52(sp),d0
    21f4:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    21f8:	   |         pea 1933e <PutChar+0x31e>
    21fe:	   |         jsr 1857e <KPrintF>
    2204:	   |         addq.l #4,sp


  WaitBlit();
    2206:	   |         move.l 1e8cc <GfxBase>,d0
    220c:	   |         movea.l d0,a6
    220e:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2212:	   |         movea.l 54(sp),a0
    2216:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    221c:	   |         movea.l 54(sp),a0
    2220:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2226:	   |         movea.l 54(sp),a0
    222a:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2230:	   |         movea.l 54(sp),a0
    2234:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    223a:	   |         move.w 154(sp),d0
    223e:	   |         sub.w 158(sp),d0
    2242:	   |         movea.l 54(sp),a0
    2246:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    224a:	   |         move.w 154(sp),d0
    224e:	   |         sub.w 158(sp),d0
    2252:	   |         movea.l 54(sp),a0
    2256:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    225a:	   |         movea.l 54(sp),a0
    225e:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2264:	   |         movea.l 54(sp),a0
    2268:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    226e:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2274:	   |         clr.l 164(sp)
    2278:	   |     ,-- bra.s 22e6 <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    227a:	   |  ,--|-> move.l 1e8cc <GfxBase>,d0
    2280:	   |  |  |   movea.l d0,a6
    2282:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    2286:	   |  |  |   movea.l 54(sp),a0
    228a:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2290:	   |  |  |   move.l 168(sp),d0
    2294:	   |  |  |   movea.l 54(sp),a0
    2298:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    229c:	   |  |  |   move.l 172(sp),d0
    22a0:	   |  |  |   movea.l 54(sp),a0
    22a4:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    22a8:	   |  |  |   move.l 172(sp),d0
    22ac:	   |  |  |   movea.l 54(sp),a0
    22b0:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    22b4:	   |  |  |   move.w 160(sp),d0
    22b8:	   |  |  |   lsl.w #6,d0
    22ba:	   |  |  |   add.w 156(sp),d0
    22be:	   |  |  |   movea.l 54(sp),a0
    22c2:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    22c6:	   |  |  |   moveq #0,d0
    22c8:	   |  |  |   move.w 152(sp),d0
    22cc:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    22d0:	   |  |  |   move.w 1e7d0 <CstBackdropSizePlane>,d0
    22d6:	   |  |  |   move.w d0,d0
    22d8:	   |  |  |   andi.l #65535,d0
    22de:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    22e2:	   |  |  |   addq.l #1,164(sp)
    22e6:	   |  |  '-> moveq #4,d0
    22e8:	   |  |      cmp.l 164(sp),d0
    22ec:	   |  '----- bge.s 227a <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    22ee:	   |         move.l 1e8cc <GfxBase>,d0
    22f4:	   |         movea.l d0,a6
    22f6:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    22fa:	   |         pea 1935d <PutChar+0x33d>
    2300:	   |         jsr 1857e <KPrintF>
    2306:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2308:	   |         move.l 116(sp),48(sp)
    230e:	   |         move.l 1e8c0 <SysBase>,d0
    2314:	   |         movea.l d0,a6
    2316:	   |         movea.l 48(sp),a1
    231a:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    231e:	   |         move.l 100(sp),44(sp)
    2324:	   |         move.l 1e8c0 <SysBase>,d0
    232a:	   |         movea.l d0,a6
    232c:	   |         movea.l 44(sp),a1
    2330:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2334:	   |         move.l 1e7ea <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    233c:	   |         moveq #20,d2
    233e:	   |         move.l d2,36(sp)
    2342:	   |         clr.l 32(sp)
    2346:	   |         move.l 1e8c0 <SysBase>,d0
    234c:	   |         movea.l d0,a6
    234e:	   |         move.l 36(sp),d0
    2352:	   |         move.l 32(sp),d1
    2356:	   |         jsr -684(a6)
    235a:	   |         move.l d0,28(sp)
    235e:	   |         move.l 28(sp),d0
    2362:	   |         move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    2368:	   |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    236e:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    2374:	   |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    237a:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    237c:	   |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2382:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    2386:	   |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    238c:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    2390:	   |         move.l 1e806 <winWidth>,d0
    2396:	   |         lsr.l #4,d0
    2398:	   |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    239e:	   |         move.l d0,d0
    23a0:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    23a4:	   |         move.l 1e80a <winHeight>,d0
    23aa:	   |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    23b0:	   |         move.l d0,d0
    23b2:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    23b6:	   |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    23bc:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    23c0:	   |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    23c6:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    23ca:	   |         move.l 1e7e6 <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    23d2:	   |         moveq #20,d0
    23d4:	   |         move.l d0,24(sp)
    23d8:	   |         clr.l 20(sp)
    23dc:	   |         move.l 1e8c0 <SysBase>,d0
    23e2:	   |         movea.l d0,a6
    23e4:	   |         move.l 24(sp),d0
    23e8:	   |         move.l 20(sp),d1
    23ec:	   |         jsr -684(a6)
    23f0:	   |         move.l d0,16(sp)
    23f4:	   |         move.l 16(sp),d0
    23f8:	   |         move.l d0,1e7e6 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    23fe:	   |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2404:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    240a:	   |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2410:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    2412:	   |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2418:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    241c:	   |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2422:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    2426:	   |         move.l 1e806 <winWidth>,d0
    242c:	   |         lsr.l #4,d0
    242e:	   |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2434:	   |         move.l d0,d0
    2436:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    243a:	   |         move.l 1e80a <winHeight>,d0
    2440:	   |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2446:	   |         move.l d0,d0
    2448:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    244c:	   |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2452:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    2456:	   |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    245c:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    2460:	   |         pea 1937d <PutChar+0x35d>
    2466:	   |         jsr 1857e <KPrintF>
    246c:	   |         addq.l #4,sp

}
    246e:	   '-------> movem.l (sp)+,d2-d4/a6
    2472:	             lea 172(sp),sp
    2476:	             rts

00002478 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    2478:	                lea -156(sp),sp
    247c:	                move.l a6,-(sp)
    247e:	                move.l d2,-(sp)
    2480:	                move.l 172(sp),d1
    2484:	                move.l 176(sp),d0
    2488:	                move.w d1,d1
    248a:	                move.w d1,10(sp)
    248e:	                move.w d0,d0
    2490:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    2494:	                move.l #14675968,112(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    249c:	                clr.l 108(sp)
  destination = (UWORD *) CstBackDrop;      
    24a0:	                move.l 1e7d2 <CstBackDrop>,108(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    24a8:	                clr.l 140(sp)

  blitwidth = single->width/16;
    24ac:	                movea.l 168(sp),a0
    24b0:	                move.l (a0),d0
    24b2:	                movea.l d0,a0
    24b4:	                cmpa.w #0,a0
    24b8:	            ,-- bge.s 24be <CstPasteChar+0x46>
    24ba:	            |   lea 15(a0),a0
    24be:	            '-> move.l a0,d0
    24c0:	                asr.l #4,d0
    24c2:	                move.l d0,124(sp)
  if(blitwidth == 0) blitwidth = 1;
    24c6:	            ,-- bne.s 24ce <CstPasteChar+0x56>
    24c8:	            |   moveq #1,d0
    24ca:	            |   move.l d0,124(sp)

  if( y < 0) {
    24ce:	            '-> tst.w 8(sp)
    24d2:	         ,----- bge.s 251c <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    24d4:	         |      movea.w 8(sp),a1
    24d8:	         |      movea.l 168(sp),a0
    24dc:	         |      move.l 4(a0),d0
    24e0:	         |      add.l a1,d0
    24e2:	         |  ,-- bpl.s 24f6 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24e4:	         |  |   pea 19397 <PutChar+0x377>
    24ea:	         |  |   jsr 1857e <KPrintF>
    24f0:	         |  |   addq.l #4,sp
      return;
    24f2:	,--------|--|-- bra.w 2e6a <CstPasteChar+0x9f2>
    }
    ystartdst = 0;
    24f6:	|        |  '-> clr.l 136(sp)
    ystartsrc = y*-1;
    24fa:	|        |      move.w 8(sp),d0
    24fe:	|        |      ext.l d0
    2500:	|        |      move.l d0,d1
    2502:	|        |      neg.l d1
    2504:	|        |      move.l d1,132(sp)
    blitheight = single->height+y;
    2508:	|        |      movea.l 168(sp),a0
    250c:	|        |      move.l 4(a0),d0
    2510:	|        |      movea.w 8(sp),a0
    2514:	|        |      add.l a0,d0
    2516:	|        |      move.l d0,128(sp)
    251a:	|     ,--|----- bra.s 258e <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    251c:	|     |  '----> movea.w 8(sp),a1
    2520:	|     |         movea.l 168(sp),a0
    2524:	|     |         move.l 4(a0),d0
    2528:	|     |         move.l a1,d1
    252a:	|     |         add.l d0,d1
    252c:	|     |         move.l 1e80a <winHeight>,d0
    2532:	|     |         cmp.l d1,d0
    2534:	|     |  ,----- bge.s 2576 <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    2536:	|     |  |      movea.w 8(sp),a0
    253a:	|     |  |      move.l 1e80a <winHeight>,d0
    2540:	|     |  |      cmp.l a0,d0
    2542:	|     |  |  ,-- bge.s 2556 <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2544:	|     |  |  |   pea 19397 <PutChar+0x377>
    254a:	|     |  |  |   jsr 1857e <KPrintF>
    2550:	|     |  |  |   addq.l #4,sp
      return;
    2552:	+-----|--|--|-- bra.w 2e6a <CstPasteChar+0x9f2>
    }
    ystartdst = y;
    2556:	|     |  |  '-> movea.w 8(sp),a0
    255a:	|     |  |      move.l a0,136(sp)
    ystartsrc = 0;
    255e:	|     |  |      clr.l 132(sp)
    blitheight = winHeight-y;
    2562:	|     |  |      move.l 1e80a <winHeight>,d0
    2568:	|     |  |      movea.w 8(sp),a0
    256c:	|     |  |      move.l d0,d1
    256e:	|     |  |      sub.l a0,d1
    2570:	|     |  |      move.l d1,128(sp)
    2574:	|     +--|----- bra.s 258e <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    2576:	|     |  '----> movea.w 8(sp),a0
    257a:	|     |         move.l a0,136(sp)
    ystartsrc = 0;
    257e:	|     |         clr.l 132(sp)
    blitheight = single->height;
    2582:	|     |         movea.l 168(sp),a0
    2586:	|     |         move.l 4(a0),d0
    258a:	|     |         move.l d0,128(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    258e:	|     '-------> tst.w 10(sp)
    2592:	|        ,----- bge.w 27da <CstPasteChar+0x362>
    if(x + single->width < 0) {
    2596:	|        |      movea.w 10(sp),a1
    259a:	|        |      movea.l 168(sp),a0
    259e:	|        |      move.l (a0),d0
    25a0:	|        |      add.l a1,d0
    25a2:	|        |  ,-- bpl.s 25b6 <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    25a4:	|        |  |   pea 19397 <PutChar+0x377>
    25aa:	|        |  |   jsr 1857e <KPrintF>
    25b0:	|        |  |   addq.l #4,sp
      return;
    25b2:	+--------|--|-- bra.w 2e6a <CstPasteChar+0x9f2>

    }
    
    extrawords = 1;
    25b6:	|        |  '-> move.w #1,162(sp)

    cutwordssource = (x*-1)/16; 
    25bc:	|        |      move.w 10(sp),d0
    25c0:	|        |  ,-- bpl.s 25c6 <CstPasteChar+0x14e>
    25c2:	|        |  |   addi.w #15,d0
    25c6:	|        |  '-> asr.w #4,d0
    25c8:	|        |      neg.w d0
    25ca:	|        |      move.w d0,160(sp)
    cutmaskpixel = (x*-1)%16;     
    25ce:	|        |      move.w 10(sp),d0
    25d2:	|        |      ext.l d0
    25d4:	|        |      neg.l d0
    25d6:	|        |      andi.l #-2147483633,d0
    25dc:	|        |  ,-- bpl.s 25e6 <CstPasteChar+0x16e>
    25de:	|        |  |   subq.l #1,d0
    25e0:	|        |  |   moveq #-16,d1
    25e2:	|        |  |   or.l d1,d0
    25e4:	|        |  |   addq.l #1,d0
    25e6:	|        |  '-> move.w d0,158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    25ea:	|        |      clr.w 156(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    25ee:	|        |      movea.l 168(sp),a0
    25f2:	|        |      move.l 24(a0),d0
    25f6:	|        |      move.l d0,d1
    25f8:	|        |      moveq #0,d0
    25fa:	|        |      move.w 160(sp),d0
    25fe:	|        |      add.l d0,d0
    2600:	|        |      move.l d1,d2
    2602:	|        |      add.l d0,d2
    2604:	|        |      movea.l 168(sp),a0
    2608:	|        |      move.l (a0),d0
    260a:	|        |      move.l 132(sp),-(sp)
    260e:	|        |      move.l d0,-(sp)
    2610:	|        |      jsr 18f0a <__mulsi3>
    2616:	|        |      addq.l #8,sp
    2618:	|        |      lsr.l #3,d0
    261a:	|        |      move.l d2,d1
    261c:	|        |      add.l d0,d1
    261e:	|        |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2622:	|        |      move.l 1e806 <winWidth>,d0
    2628:	|        |      move.l 136(sp),-(sp)
    262c:	|        |      move.l d0,-(sp)
    262e:	|        |      jsr 18f0a <__mulsi3>
    2634:	|        |      addq.l #8,sp
    2636:	|        |      lsr.l #3,d0
    2638:	|        |      move.l 108(sp),d1
    263c:	|        |      add.l d1,d0
    263e:	|        |      move.l d0,d2
    2640:	|        |      subq.l #2,d2
    2642:	|        |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2646:	|        |      move.l 1e806 <winWidth>,d0
    264c:	|        |      move.l 136(sp),-(sp)
    2650:	|        |      move.l d0,-(sp)
    2652:	|        |      jsr 18f0a <__mulsi3>
    2658:	|        |      addq.l #8,sp
    265a:	|        |      lsr.l #3,d0
    265c:	|        |      move.l 108(sp),d1
    2660:	|        |      add.l d1,d0
    2662:	|        |      move.l d0,d1
    2664:	|        |      subq.l #2,d1
    2666:	|        |      move.l d1,144(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    266a:	|        |      moveq #0,d0
    266c:	|        |      move.w 158(sp),d0
    2670:	|        |      moveq #16,d1
    2672:	|        |      sub.l d0,d1
    2674:	|        |      move.l d1,d0
    2676:	|        |      moveq #12,d2
    2678:	|        |      lsl.l d2,d0
    267a:	|        |      move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    267e:	|        |      move.l 1e7ea <CstCleanupQueueDrawBuffer>,48(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2686:	|        |      moveq #20,d0
    2688:	|        |      move.l d0,44(sp)
    268c:	|        |      clr.l 40(sp)
    2690:	|        |      move.l 1e8c0 <SysBase>,d0
    2696:	|        |      movea.l d0,a6
    2698:	|        |      move.l 44(sp),d0
    269c:	|        |      move.l 40(sp),d1
    26a0:	|        |      jsr -684(a6)
    26a4:	|        |      move.l d0,36(sp)
    26a8:	|        |      move.l 36(sp),d0
    26ac:	|        |      move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    26b2:	|        |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    26b8:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = 0;
    26be:	|        |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    26c4:	|        |      clr.w (a0)
    CstCleanupQueueDrawBuffer->y = 0;
    26c6:	|        |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    26cc:	|        |      clr.w 2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    26d0:	|        |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    26d6:	|        |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    26da:	|        |      movea.l 168(sp),a0
    26de:	|        |      move.l (a0),d0
    26e0:	|        |      movea.l d0,a0
    26e2:	|        |      cmpa.w #0,a0
    26e6:	|        |  ,-- bge.s 26ec <CstPasteChar+0x274>
    26e8:	|        |  |   lea 15(a0),a0
    26ec:	|        |  '-> move.l a0,d0
    26ee:	|        |      asr.l #4,d0
    26f0:	|        |      move.l d0,d0
    26f2:	|        |      add.w 160(sp),d0
    26f6:	|        |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    26fc:	|        |      add.w 162(sp),d0
    2700:	|        |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2704:	|        |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    270a:	|        |      move.l 128(sp),d0
    270e:	|        |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    2712:	|        |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2718:	|        |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    271c:	|        |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2722:	|        |      move.l 136(sp),d0
    2726:	|        |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    272a:	|        |      move.l 1e7e6 <CstCleanupQueueViewBuffer>,48(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2732:	|        |      moveq #20,d1
    2734:	|        |      move.l d1,32(sp)
    2738:	|        |      clr.l 28(sp)
    273c:	|        |      move.l 1e8c0 <SysBase>,d0
    2742:	|        |      movea.l d0,a6
    2744:	|        |      move.l 32(sp),d0
    2748:	|        |      move.l 28(sp),d1
    274c:	|        |      jsr -684(a6)
    2750:	|        |      move.l d0,24(sp)
    2754:	|        |      move.l 24(sp),d0
    2758:	|        |      move.l d0,1e7e6 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    275e:	|        |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2764:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueViewBuffer->x = 0;
    276a:	|        |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2770:	|        |      clr.w (a0)
    CstCleanupQueueViewBuffer->y = 0;
    2772:	|        |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2778:	|        |      clr.w 2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    277c:	|        |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2782:	|        |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2786:	|        |      movea.l 168(sp),a0
    278a:	|        |      move.l (a0),d0
    278c:	|        |      movea.l d0,a0
    278e:	|        |      cmpa.w #0,a0
    2792:	|        |  ,-- bge.s 2798 <CstPasteChar+0x320>
    2794:	|        |  |   lea 15(a0),a0
    2798:	|        |  '-> move.l a0,d0
    279a:	|        |      asr.l #4,d0
    279c:	|        |      move.l d0,d0
    279e:	|        |      add.w 160(sp),d0
    27a2:	|        |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    27a8:	|        |      add.w 162(sp),d0
    27ac:	|        |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    27b0:	|        |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    27b6:	|        |      move.l 128(sp),d0
    27ba:	|        |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = 0;
    27be:	|        |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    27c4:	|        |      clr.w 12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst; 
    27c8:	|        |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    27ce:	|        |      move.l 136(sp),d0
    27d2:	|        |      move.w d0,14(a0)
    27d6:	|     ,--|----- bra.w 2cd2 <CstPasteChar+0x85a>
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    27da:	|     |  '----> movea.w 10(sp),a1
    27de:	|     |         movea.l 168(sp),a0
    27e2:	|     |         move.l (a0),d0
    27e4:	|     |         move.l a1,d1
    27e6:	|     |         add.l d0,d1
    27e8:	|     |         move.l 1e806 <winWidth>,d0
    27ee:	|     |         cmp.l d1,d0
    27f0:	|     |  ,----- bge.w 2a7c <CstPasteChar+0x604>

    if(x - single->width > (int) winWidth)
    27f4:	|     |  |      movea.w 10(sp),a1
    27f8:	|     |  |      movea.l 168(sp),a0
    27fc:	|     |  |      move.l (a0),d0
    27fe:	|     |  |      move.l a1,d1
    2800:	|     |  |      sub.l d0,d1
    2802:	|     |  |      move.l 1e806 <winWidth>,d0
    2808:	|     |  |      cmp.l d1,d0
    280a:	|     |  |  ,-- bge.s 281e <CstPasteChar+0x3a6>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    280c:	|     |  |  |   pea 19397 <PutChar+0x377>
    2812:	|     |  |  |   jsr 1857e <KPrintF>
    2818:	|     |  |  |   addq.l #4,sp
      return;
    281a:	+-----|--|--|-- bra.w 2e6a <CstPasteChar+0x9f2>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    281e:	|     |  |  '-> clr.w 162(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2822:	|     |  |      movea.w 10(sp),a1
    2826:	|     |  |      movea.l 168(sp),a0
    282a:	|     |  |      move.l (a0),d0
    282c:	|     |  |      add.l a1,d0
    282e:	|     |  |      move.l d0,d1
    2830:	|     |  |      move.l 1e806 <winWidth>,d0
    2836:	|     |  |      sub.l d0,d1
    2838:	|     |  |      move.l d1,d0
    283a:	|     |  |      lsr.l #4,d0
    283c:	|     |  |      move.w d0,160(sp)
    cutmaskpixel = 0;
    2840:	|     |  |      clr.w 158(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2844:	|     |  |      move.w #-1,156(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    284a:	|     |  |      movea.l 168(sp),a0
    284e:	|     |  |      move.l 24(a0),d0
    2852:	|     |  |      move.l d0,d2
    2854:	|     |  |      movea.l 168(sp),a0
    2858:	|     |  |      move.l (a0),d0
    285a:	|     |  |      move.l 132(sp),-(sp)
    285e:	|     |  |      move.l d0,-(sp)
    2860:	|     |  |      jsr 18f0a <__mulsi3>
    2866:	|     |  |      addq.l #8,sp
    2868:	|     |  |      lsr.l #3,d0
    286a:	|     |  |      move.l d2,d1
    286c:	|     |  |      add.l d0,d1
    286e:	|     |  |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2872:	|     |  |      move.l 1e806 <winWidth>,d0
    2878:	|     |  |      move.l 136(sp),-(sp)
    287c:	|     |  |      move.l d0,-(sp)
    287e:	|     |  |      jsr 18f0a <__mulsi3>
    2884:	|     |  |      addq.l #8,sp
    2886:	|     |  |      lsr.l #3,d0
    2888:	|     |  |      move.l 108(sp),d1
    288c:	|     |  |      add.l d0,d1
    288e:	|     |  |      move.w 10(sp),d0
    2892:	|     |  |  ,-- bpl.s 2898 <CstPasteChar+0x420>
    2894:	|     |  |  |   addi.w #15,d0
    2898:	|     |  |  '-> asr.w #4,d0
    289a:	|     |  |      movea.w d0,a0
    289c:	|     |  |      move.l a0,d0
    289e:	|     |  |      add.l a0,d0
    28a0:	|     |  |      move.l d1,d2
    28a2:	|     |  |      add.l d0,d2
    28a4:	|     |  |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28a8:	|     |  |      move.l 1e806 <winWidth>,d0
    28ae:	|     |  |      move.l 136(sp),-(sp)
    28b2:	|     |  |      move.l d0,-(sp)
    28b4:	|     |  |      jsr 18f0a <__mulsi3>
    28ba:	|     |  |      addq.l #8,sp
    28bc:	|     |  |      lsr.l #3,d0
    28be:	|     |  |      move.l 108(sp),d1
    28c2:	|     |  |      add.l d0,d1
    28c4:	|     |  |      move.w 10(sp),d0
    28c8:	|     |  |  ,-- bpl.s 28ce <CstPasteChar+0x456>
    28ca:	|     |  |  |   addi.w #15,d0
    28ce:	|     |  |  '-> asr.w #4,d0
    28d0:	|     |  |      movea.w d0,a0
    28d2:	|     |  |      move.l a0,d0
    28d4:	|     |  |      add.l a0,d0
    28d6:	|     |  |      move.l d1,d2
    28d8:	|     |  |      add.l d0,d2
    28da:	|     |  |      move.l d2,144(sp)
    bltcon0 = ((single->width%16) << 12);    
    28de:	|     |  |      movea.l 168(sp),a0
    28e2:	|     |  |      move.l (a0),d0
    28e4:	|     |  |      andi.l #-2147483633,d0
    28ea:	|     |  |  ,-- bpl.s 28f4 <CstPasteChar+0x47c>
    28ec:	|     |  |  |   subq.l #1,d0
    28ee:	|     |  |  |   moveq #-16,d1
    28f0:	|     |  |  |   or.l d1,d0
    28f2:	|     |  |  |   addq.l #1,d0
    28f4:	|     |  |  '-> moveq #12,d2
    28f6:	|     |  |      lsl.l d2,d0
    28f8:	|     |  |      move.l d0,140(sp)
    
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    28fc:	|     |  |      move.l 1e7ea <CstCleanupQueueDrawBuffer>,76(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2904:	|     |  |      moveq #20,d0
    2906:	|     |  |      move.l d0,72(sp)
    290a:	|     |  |      clr.l 68(sp)
    290e:	|     |  |      move.l 1e8c0 <SysBase>,d0
    2914:	|     |  |      movea.l d0,a6
    2916:	|     |  |      move.l 72(sp),d0
    291a:	|     |  |      move.l 68(sp),d1
    291e:	|     |  |      jsr -684(a6)
    2922:	|     |  |      move.l d0,64(sp)
    2926:	|     |  |      move.l 64(sp),d0
    292a:	|     |  |      move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2930:	|     |  |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2936:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    293c:	|     |  |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2942:	|     |  |      move.w 10(sp),d0
    2946:	|     |  |      move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    2948:	|     |  |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    294e:	|     |  |      move.l 136(sp),d0
    2952:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2956:	|     |  |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    295c:	|     |  |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource;
    2960:	|     |  |      movea.l 168(sp),a0
    2964:	|     |  |      move.l (a0),d0
    2966:	|     |  |      movea.l d0,a0
    2968:	|     |  |      cmpa.w #0,a0
    296c:	|     |  |  ,-- bge.s 2972 <CstPasteChar+0x4fa>
    296e:	|     |  |  |   lea 15(a0),a0
    2972:	|     |  |  '-> move.l a0,d0
    2974:	|     |  |      asr.l #4,d0
    2976:	|     |  |      move.l d0,d0
    2978:	|     |  |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    297e:	|     |  |      add.w 160(sp),d0
    2982:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2986:	|     |  |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    298c:	|     |  |      move.l 128(sp),d0
    2990:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2994:	|     |  |      move.w 10(sp),d0
    2998:	|     |  |  ,-- bpl.s 299e <CstPasteChar+0x526>
    299a:	|     |  |  |   addi.w #15,d0
    299e:	|     |  |  '-> asr.w #4,d0
    29a0:	|     |  |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    29a6:	|     |  |      add.w d0,d0
    29a8:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    29ac:	|     |  |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    29b2:	|     |  |      move.l 136(sp),d0
    29b6:	|     |  |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    29ba:	|     |  |      move.l 1e7e6 <CstCleanupQueueViewBuffer>,76(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    29c2:	|     |  |      moveq #20,d1
    29c4:	|     |  |      move.l d1,60(sp)
    29c8:	|     |  |      clr.l 56(sp)
    29cc:	|     |  |      move.l 1e8c0 <SysBase>,d0
    29d2:	|     |  |      movea.l d0,a6
    29d4:	|     |  |      move.l 60(sp),d0
    29d8:	|     |  |      move.l 56(sp),d1
    29dc:	|     |  |      jsr -684(a6)
    29e0:	|     |  |      move.l d0,52(sp)
    29e4:	|     |  |      move.l 52(sp),d0
    29e8:	|     |  |      move.l d0,1e7e6 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    29ee:	|     |  |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    29f4:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    29fa:	|     |  |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2a00:	|     |  |      move.w 10(sp),d0
    2a04:	|     |  |      move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2a06:	|     |  |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2a0c:	|     |  |      move.l 136(sp),d0
    2a10:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2a14:	|     |  |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2a1a:	|     |  |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    2a1e:	|     |  |      movea.l 168(sp),a0
    2a22:	|     |  |      move.l (a0),d0
    2a24:	|     |  |      movea.l d0,a0
    2a26:	|     |  |      cmpa.w #0,a0
    2a2a:	|     |  |  ,-- bge.s 2a30 <CstPasteChar+0x5b8>
    2a2c:	|     |  |  |   lea 15(a0),a0
    2a30:	|     |  |  '-> move.l a0,d0
    2a32:	|     |  |      asr.l #4,d0
    2a34:	|     |  |      move.l d0,d0
    2a36:	|     |  |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2a3c:	|     |  |      add.w 160(sp),d0
    2a40:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2a44:	|     |  |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2a4a:	|     |  |      move.l 128(sp),d0
    2a4e:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2a52:	|     |  |      move.w 10(sp),d0
    2a56:	|     |  |  ,-- bpl.s 2a5c <CstPasteChar+0x5e4>
    2a58:	|     |  |  |   addi.w #15,d0
    2a5c:	|     |  |  '-> asr.w #4,d0
    2a5e:	|     |  |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2a64:	|     |  |      add.w d0,d0
    2a66:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;     
    2a6a:	|     |  |      movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2a70:	|     |  |      move.l 136(sp),d0
    2a74:	|     |  |      move.w d0,14(a0)
    2a78:	|     +--|----- bra.w 2cd2 <CstPasteChar+0x85a>
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2a7c:	|     |  '----> move.w #1,162(sp)
    cutwordssource = 0;
    2a82:	|     |         clr.w 160(sp)
    cutmaskpixel = 0;
    2a86:	|     |         clr.w 158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2a8a:	|     |         clr.w 156(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2a8e:	|     |         movea.l 168(sp),a0
    2a92:	|     |         move.l 24(a0),d0
    2a96:	|     |         move.l d0,d2
    2a98:	|     |         movea.l 168(sp),a0
    2a9c:	|     |         move.l (a0),d0
    2a9e:	|     |         movea.l d0,a0
    2aa0:	|     |         cmpa.w #0,a0
    2aa4:	|     |     ,-- bge.s 2aaa <CstPasteChar+0x632>
    2aa6:	|     |     |   lea 15(a0),a0
    2aaa:	|     |     '-> move.l a0,d0
    2aac:	|     |         asr.l #4,d0
    2aae:	|     |         move.l 132(sp),-(sp)
    2ab2:	|     |         move.l d0,-(sp)
    2ab4:	|     |         jsr 18f0a <__mulsi3>
    2aba:	|     |         addq.l #8,sp
    2abc:	|     |         add.l d0,d0
    2abe:	|     |         move.l d2,d1
    2ac0:	|     |         add.l d0,d1
    2ac2:	|     |         move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2ac6:	|     |         move.l 1e806 <winWidth>,d0
    2acc:	|     |         move.l 136(sp),-(sp)
    2ad0:	|     |         move.l d0,-(sp)
    2ad2:	|     |         jsr 18f0a <__mulsi3>
    2ad8:	|     |         addq.l #8,sp
    2ada:	|     |         lsr.l #3,d0
    2adc:	|     |         move.l 108(sp),d1
    2ae0:	|     |         add.l d0,d1
    2ae2:	|     |         move.w 10(sp),d0
    2ae6:	|     |     ,-- bpl.s 2aec <CstPasteChar+0x674>
    2ae8:	|     |     |   addi.w #15,d0
    2aec:	|     |     '-> asr.w #4,d0
    2aee:	|     |         movea.w d0,a0
    2af0:	|     |         move.l a0,d0
    2af2:	|     |         add.l a0,d0
    2af4:	|     |         move.l d1,d2
    2af6:	|     |         add.l d0,d2
    2af8:	|     |         move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2afc:	|     |         move.l 1e806 <winWidth>,d0
    2b02:	|     |         move.l 136(sp),-(sp)
    2b06:	|     |         move.l d0,-(sp)
    2b08:	|     |         jsr 18f0a <__mulsi3>
    2b0e:	|     |         addq.l #8,sp
    2b10:	|     |         lsr.l #3,d0
    2b12:	|     |         move.l 108(sp),d1
    2b16:	|     |         add.l d0,d1
    2b18:	|     |         move.w 10(sp),d0
    2b1c:	|     |     ,-- bpl.s 2b22 <CstPasteChar+0x6aa>
    2b1e:	|     |     |   addi.w #15,d0
    2b22:	|     |     '-> asr.w #4,d0
    2b24:	|     |         movea.w d0,a0
    2b26:	|     |         move.l a0,d0
    2b28:	|     |         add.l a0,d0
    2b2a:	|     |         move.l d1,d2
    2b2c:	|     |         add.l d0,d2
    2b2e:	|     |         move.l d2,144(sp)
    bltcon0 = ((x%16) << 12);
    2b32:	|     |         move.w 10(sp),d0
    2b36:	|     |         andi.w #-32753,d0
    2b3a:	|     |     ,-- bpl.s 2b44 <CstPasteChar+0x6cc>
    2b3c:	|     |     |   subq.w #1,d0
    2b3e:	|     |     |   ori.w #-16,d0
    2b42:	|     |     |   addq.w #1,d0
    2b44:	|     |     '-> ext.l d0
    2b46:	|     |         moveq #12,d1
    2b48:	|     |         lsl.l d1,d0
    2b4a:	|     |         move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2b4e:	|     |         move.l 1e7ea <CstCleanupQueueDrawBuffer>,104(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2b56:	|     |         moveq #20,d2
    2b58:	|     |         move.l d2,100(sp)
    2b5c:	|     |         clr.l 96(sp)
    2b60:	|     |         move.l 1e8c0 <SysBase>,d0
    2b66:	|     |         movea.l d0,a6
    2b68:	|     |         move.l 100(sp),d0
    2b6c:	|     |         move.l 96(sp),d1
    2b70:	|     |         jsr -684(a6)
    2b74:	|     |         move.l d0,92(sp)
    2b78:	|     |         move.l 92(sp),d0
    2b7c:	|     |         move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2b82:	|     |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2b88:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    2b8e:	|     |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2b94:	|     |         move.w 10(sp),d0
    2b98:	|     |         move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    2b9a:	|     |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2ba0:	|     |         move.l 136(sp),d0
    2ba4:	|     |         move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2ba8:	|     |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2bae:	|     |         clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2bb2:	|     |         movea.l 168(sp),a0
    2bb6:	|     |         move.l (a0),d0
    2bb8:	|     |         movea.l d0,a0
    2bba:	|     |         cmpa.w #0,a0
    2bbe:	|     |     ,-- bge.s 2bc4 <CstPasteChar+0x74c>
    2bc0:	|     |     |   lea 15(a0),a0
    2bc4:	|     |     '-> move.l a0,d0
    2bc6:	|     |         asr.l #4,d0
    2bc8:	|     |         move.l d0,d0
    2bca:	|     |         add.w 160(sp),d0
    2bce:	|     |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2bd4:	|     |         add.w 162(sp),d0
    2bd8:	|     |         move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2bdc:	|     |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2be2:	|     |         move.l 128(sp),d0
    2be6:	|     |         move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2bea:	|     |         move.w 10(sp),d0
    2bee:	|     |     ,-- bpl.s 2bf4 <CstPasteChar+0x77c>
    2bf0:	|     |     |   addi.w #15,d0
    2bf4:	|     |     '-> asr.w #4,d0
    2bf6:	|     |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2bfc:	|     |         add.w d0,d0
    2bfe:	|     |         move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2c02:	|     |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2c08:	|     |         move.l 136(sp),d0
    2c0c:	|     |         move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    2c10:	|     |         move.l 1e7e6 <CstCleanupQueueViewBuffer>,104(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2c18:	|     |         moveq #20,d0
    2c1a:	|     |         move.l d0,88(sp)
    2c1e:	|     |         clr.l 84(sp)
    2c22:	|     |         move.l 1e8c0 <SysBase>,d0
    2c28:	|     |         movea.l d0,a6
    2c2a:	|     |         move.l 88(sp),d0
    2c2e:	|     |         move.l 84(sp),d1
    2c32:	|     |         jsr -684(a6)
    2c36:	|     |         move.l d0,80(sp)
    2c3a:	|     |         move.l 80(sp),d0
    2c3e:	|     |         move.l d0,1e7e6 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2c44:	|     |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2c4a:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    2c50:	|     |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2c56:	|     |         move.w 10(sp),d0
    2c5a:	|     |         move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2c5c:	|     |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2c62:	|     |         move.l 136(sp),d0
    2c66:	|     |         move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2c6a:	|     |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2c70:	|     |         clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2c74:	|     |         movea.l 168(sp),a0
    2c78:	|     |         move.l (a0),d0
    2c7a:	|     |         movea.l d0,a0
    2c7c:	|     |         cmpa.w #0,a0
    2c80:	|     |     ,-- bge.s 2c86 <CstPasteChar+0x80e>
    2c82:	|     |     |   lea 15(a0),a0
    2c86:	|     |     '-> move.l a0,d0
    2c88:	|     |         asr.l #4,d0
    2c8a:	|     |         move.l d0,d0
    2c8c:	|     |         add.w 160(sp),d0
    2c90:	|     |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2c96:	|     |         add.w 162(sp),d0
    2c9a:	|     |         move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2c9e:	|     |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2ca4:	|     |         move.l 128(sp),d0
    2ca8:	|     |         move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2cac:	|     |         move.w 10(sp),d0
    2cb0:	|     |     ,-- bpl.s 2cb6 <CstPasteChar+0x83e>
    2cb2:	|     |     |   addi.w #15,d0
    2cb6:	|     |     '-> asr.w #4,d0
    2cb8:	|     |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2cbe:	|     |         add.w d0,d0
    2cc0:	|     |         move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;    
    2cc4:	|     |         movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    2cca:	|     |         move.l 136(sp),d0
    2cce:	|     |         move.w d0,14(a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2cd2:	|     '-------> moveq #0,d0
    2cd4:	|               move.w 158(sp),d0
    2cd8:	|               moveq #0,d1
    2cda:	|               not.w d1
    2cdc:	|               asr.l d0,d1
    2cde:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2ce2:	|               moveq #0,d1
    2ce4:	|               move.w 160(sp),d1
    2ce8:	|               moveq #0,d0
    2cea:	|               move.w 162(sp),d0
    2cee:	|               sub.l d0,d1
    2cf0:	|               move.l d1,d0
    2cf2:	|               add.w d0,d0
    2cf4:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2cf8:	|               move.l 1e806 <winWidth>,d0
    2cfe:	|               lsr.l #3,d0
    2d00:	|               move.l d0,d2
    2d02:	|               move.w 160(sp),d1
    2d06:	|               sub.w 162(sp),d1
    2d0a:	|               move.l 124(sp),d0
    2d0e:	|               sub.w d0,d1
    2d10:	|               move.w d1,d0
    2d12:	|               add.w d1,d0
    2d14:	|               add.w d2,d0
    2d16:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2d1a:	|               move.l 1e806 <winWidth>,d0
    2d20:	|               lsr.l #3,d0
    2d22:	|               move.l d0,d2
    2d24:	|               move.w 160(sp),d1
    2d28:	|               sub.w 162(sp),d1
    2d2c:	|               move.l 124(sp),d0
    2d30:	|               sub.w d0,d1
    2d32:	|               move.w d1,d0
    2d34:	|               add.w d1,d0
    2d36:	|               add.w d2,d0
    2d38:	|               move.w d0,16(sp)

  WaitBlit();
    2d3c:	|               move.l 1e8cc <GfxBase>,d0
    2d42:	|               movea.l d0,a6
    2d44:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2d48:	|               movea.l 112(sp),a0
    2d4c:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2d52:	|               movea.l 112(sp),a0
    2d56:	|               move.w 156(sp),70(a0)
  custom->bltamod = bltamod;
    2d5c:	|               move.w 20(sp),d0
    2d60:	|               movea.l 112(sp),a0
    2d64:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2d68:	|               move.w 18(sp),d0
    2d6c:	|               movea.l 112(sp),a0
    2d70:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2d74:	|               move.w 16(sp),d0
    2d78:	|               movea.l 112(sp),a0
    2d7c:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2d80:	|               move.l 1e806 <winWidth>,d0
    2d86:	|               lsr.l #3,d0
    2d88:	|               move.l d0,d1
    2d8a:	|               move.l 1e80a <winHeight>,d0
    2d90:	|               move.l d0,d0
    2d92:	|               move.w d1,d2
    2d94:	|               muls.w d0,d2
    2d96:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2d9a:	|               move.w 1e7ca <textPaletteIndex>,122(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2da2:	|               move.w 122(sp),d0
    2da6:	|               andi.w #1,d0
    2daa:	|               move.w d0,12(sp)
  if(tmp2) {
    2dae:	|        ,----- beq.s 2db8 <CstPasteChar+0x940>
    minterm = 0xbfa;
    2db0:	|        |      move.w #3066,120(sp)
    2db6:	|        |  ,-- bra.s 2dbe <CstPasteChar+0x946>
  } else {
    minterm = 0xb0a;
    2db8:	|        '--|-> move.w #2826,120(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2dbe:	|           '-> clr.l 116(sp)
    2dc2:	|     ,-------- bra.w 2e60 <CstPasteChar+0x9e8>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2dc6:	|  ,--|-------> move.l 140(sp),d0
    2dca:	|  |  |         add.w 120(sp),d0
    2dce:	|  |  |         movea.l 112(sp),a0
    2dd2:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2dd6:	|  |  |         move.l 152(sp),d0
    2dda:	|  |  |         movea.l 112(sp),a0
    2dde:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2de2:	|  |  |         move.l 148(sp),d0
    2de6:	|  |  |         movea.l 112(sp),a0
    2dea:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2dee:	|  |  |         move.l 144(sp),d0
    2df2:	|  |  |         movea.l 112(sp),a0
    2df6:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2dfa:	|  |  |         move.l 128(sp),d0
    2dfe:	|  |  |         lsl.w #6,d0
    2e00:	|  |  |         move.l 124(sp),d1
    2e04:	|  |  |         add.w d1,d0
    2e06:	|  |  |         sub.w 160(sp),d0
    2e0a:	|  |  |         add.w 162(sp),d0
    2e0e:	|  |  |         movea.l 112(sp),a0
    2e12:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2e16:	|  |  |         moveq #0,d0
    2e18:	|  |  |         move.w 14(sp),d0
    2e1c:	|  |  |         add.l d0,148(sp)
    bltdpt += bltcptplus;
    2e20:	|  |  |         moveq #0,d0
    2e22:	|  |  |         move.w 14(sp),d0
    2e26:	|  |  |         add.l d0,144(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2e2a:	|  |  |         move.w 122(sp),d0
    2e2e:	|  |  |         lsr.w #1,d0
    2e30:	|  |  |         move.w d0,122(sp)
    tmp2 = tmp & 0x01;
    2e34:	|  |  |         move.w 122(sp),d1
    2e38:	|  |  |         andi.w #1,d1
    2e3c:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2e40:	|  |  |  ,----- beq.s 2e4a <CstPasteChar+0x9d2>
      minterm = 0xbfa;
    2e42:	|  |  |  |      move.w #3066,120(sp)
    2e48:	|  |  |  |  ,-- bra.s 2e50 <CstPasteChar+0x9d8>
    } else {
      minterm = 0xb0a;
    2e4a:	|  |  |  '--|-> move.w #2826,120(sp)
    }   

    WaitBlit();     
    2e50:	|  |  |     '-> move.l 1e8cc <GfxBase>,d0
    2e56:	|  |  |         movea.l d0,a6
    2e58:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2e5c:	|  |  |         addq.l #1,116(sp)
    2e60:	|  |  '-------> moveq #4,d2
    2e62:	|  |            cmp.l 116(sp),d2
    2e66:	|  '----------- bge.w 2dc6 <CstPasteChar+0x94e>
  }   
  //custom->color[0] = 0x000;
}
    2e6a:	'-------------> move.l (sp)+,d2
    2e6c:	                movea.l (sp)+,a6
    2e6e:	                lea 156(sp),sp
    2e72:	                rts

00002e74 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2e74:	                   lea -36(sp),sp
    2e78:	                   move.l a6,-(sp)
    2e7a:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2e7c:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2e84:	                   move.l 1e7ea <CstCleanupQueueDrawBuffer>,d0
    2e8a:	,----------------- beq.w 30ea <CstRestoreScreen+0x276>
    2e8e:	|                  move.l 1e7e2 <CstDrawBuffer>,d0
    2e94:	+----------------- beq.w 30ea <CstRestoreScreen+0x276>
    return;
  } 

  UWORD *colorpos = CstPalette;
    2e98:	|                  move.l 1e7f2 <CstPalette>,40(sp)
  UWORD *tmp = CstClColor;
    2ea0:	|                  move.l 1e7ee <CstClColor>,36(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2ea8:	|                  clr.l 32(sp)
    2eac:	|              ,-- bra.s 2ede <CstRestoreScreen+0x6a>
    *tmp++;
    2eae:	|           ,--|-> move.l 36(sp),d0
    2eb2:	|           |  |   move.l d0,d1
    2eb4:	|           |  |   addq.l #2,d1
    2eb6:	|           |  |   move.l d1,36(sp)
    *tmp++ = *colorpos++;
    2eba:	|           |  |   move.l 40(sp),d1
    2ebe:	|           |  |   move.l d1,d2
    2ec0:	|           |  |   addq.l #2,d2
    2ec2:	|           |  |   move.l d2,40(sp)
    2ec6:	|           |  |   move.l 36(sp),d0
    2eca:	|           |  |   move.l d0,d2
    2ecc:	|           |  |   addq.l #2,d2
    2ece:	|           |  |   move.l d2,36(sp)
    2ed2:	|           |  |   movea.l d1,a0
    2ed4:	|           |  |   move.w (a0),d1
    2ed6:	|           |  |   movea.l d0,a0
    2ed8:	|           |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2eda:	|           |  |   addq.l #1,32(sp)
    2ede:	|           |  '-> moveq #31,d0
    2ee0:	|           |      cmp.l 32(sp),d0
    2ee4:	|           '----- bge.s 2eae <CstRestoreScreen+0x3a>
  }

  WaitBlit();
    2ee6:	|                  move.l 1e8cc <GfxBase>,d0
    2eec:	|                  movea.l d0,a6
    2eee:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2ef2:	|                  movea.l 16(sp),a0
    2ef6:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2efc:	|                  movea.l 16(sp),a0
    2f00:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2f06:	|                  movea.l 16(sp),a0
    2f0a:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2f10:	|     ,----------- bra.w 30de <CstRestoreScreen+0x26a>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
    2f14:	|  ,--|----------> movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2f1a:	|  |  |            move.l 4(a0),d0
    2f1e:	|  |  |     ,----- beq.s 2f34 <CstRestoreScreen+0xc0>
    2f20:	|  |  |     |      movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2f26:	|  |  |     |      movea.l 4(a0),a0
    2f2a:	|  |  |     |      move.l 16(a0),d0
    2f2e:	|  |  |     |      moveq #2,d1
    2f30:	|  |  |     |      cmp.l d0,d1
    2f32:	|  |  |     |  ,-- bge.s 2f42 <CstRestoreScreen+0xce>
      || CstCleanupQueueDrawBuffer->person == NULL)
    2f34:	|  |  |     '--|-> movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2f3a:	|  |  |        |   move.l 4(a0),d0
    2f3e:	|  |  |  ,-----|-- bne.w 30ac <CstRestoreScreen+0x238>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f42:	|  |  |  |     '-> move.l 1e806 <winWidth>,d0
    2f48:	|  |  |  |         lsr.l #3,d0
    2f4a:	|  |  |  |         move.l d0,d1
    2f4c:	|  |  |  |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2f52:	|  |  |  |         move.w 8(a0),d0
    2f56:	|  |  |  |         add.w d0,d0
    2f58:	|  |  |  |         sub.w d0,d1
    2f5a:	|  |  |  |         movea.l 16(sp),a0
    2f5e:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f62:	|  |  |  |         move.l 1e806 <winWidth>,d0
    2f68:	|  |  |  |         lsr.l #3,d0
    2f6a:	|  |  |  |         move.l d0,d1
    2f6c:	|  |  |  |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2f72:	|  |  |  |         move.w 8(a0),d0
    2f76:	|  |  |  |         add.w d0,d0
    2f78:	|  |  |  |         sub.w d0,d1
    2f7a:	|  |  |  |         movea.l 16(sp),a0
    2f7e:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2f82:	|  |  |  |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2f88:	|  |  |  |         move.w 14(a0),d0
    2f8c:	|  |  |  |         move.w d0,d0
    2f8e:	|  |  |  |         andi.l #65535,d0
    2f94:	|  |  |  |         move.l 1e806 <winWidth>,d1
    2f9a:	|  |  |  |         move.l d1,-(sp)
    2f9c:	|  |  |  |         move.l d0,-(sp)
    2f9e:	|  |  |  |         jsr 18f0a <__mulsi3>
    2fa4:	|  |  |  |         addq.l #8,sp
    2fa6:	|  |  |  |         move.l d0,d1
    2fa8:	|  |  |  |         lsr.l #3,d1
    2faa:	|  |  |  |         move.l 1e7d2 <CstBackDrop>,d0
    2fb0:	|  |  |  |         add.l d0,d1
    2fb2:	|  |  |  |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2fb8:	|  |  |  |         move.w 12(a0),d0
    2fbc:	|  |  |  |         move.w d0,d0
    2fbe:	|  |  |  |         andi.l #65535,d0
    2fc4:	|  |  |  |         move.l d1,d2
    2fc6:	|  |  |  |         add.l d0,d2
    2fc8:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2fcc:	|  |  |  |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    2fd2:	|  |  |  |         move.w 14(a0),d0
    2fd6:	|  |  |  |         move.w d0,d0
    2fd8:	|  |  |  |         andi.l #65535,d0
    2fde:	|  |  |  |         move.l 1e806 <winWidth>,d1
    2fe4:	|  |  |  |         move.l d1,-(sp)
    2fe6:	|  |  |  |         move.l d0,-(sp)
    2fe8:	|  |  |  |         jsr 18f0a <__mulsi3>
    2fee:	|  |  |  |         addq.l #8,sp
    2ff0:	|  |  |  |         move.l d0,d1
    2ff2:	|  |  |  |         lsr.l #3,d1
    2ff4:	|  |  |  |         move.l 1e7e2 <CstDrawBuffer>,d0
    2ffa:	|  |  |  |         add.l d0,d1
    2ffc:	|  |  |  |         movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    3002:	|  |  |  |         move.w 12(a0),d0
    3006:	|  |  |  |         move.w d0,d0
    3008:	|  |  |  |         andi.l #65535,d0
    300e:	|  |  |  |         move.l d1,d2
    3010:	|  |  |  |         add.l d0,d2
    3012:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3016:	|  |  |  |         clr.l 20(sp)
    301a:	|  |  |  |     ,-- bra.w 30a2 <CstRestoreScreen+0x22e>
      {
        custom->bltapt = (APTR) bltapt;
    301e:	|  |  |  |  ,--|-> move.l 28(sp),d0
    3022:	|  |  |  |  |  |   movea.l 16(sp),a0
    3026:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    302a:	|  |  |  |  |  |   move.l 24(sp),d0
    302e:	|  |  |  |  |  |   movea.l 16(sp),a0
    3032:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    3036:	|  |  |  |  |  |   movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    303c:	|  |  |  |  |  |   move.w 10(a0),d0
    3040:	|  |  |  |  |  |   lsl.w #6,d0
    3042:	|  |  |  |  |  |   movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    3048:	|  |  |  |  |  |   move.w 8(a0),d1
    304c:	|  |  |  |  |  |   add.w d1,d0
    304e:	|  |  |  |  |  |   movea.l 16(sp),a0
    3052:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    3056:	|  |  |  |  |  |   move.l 1e806 <winWidth>,d0
    305c:	|  |  |  |  |  |   lsr.l #3,d0
    305e:	|  |  |  |  |  |   move.l 1e80a <winHeight>,d1
    3064:	|  |  |  |  |  |   move.l d1,-(sp)
    3066:	|  |  |  |  |  |   move.l d0,-(sp)
    3068:	|  |  |  |  |  |   jsr 18f0a <__mulsi3>
    306e:	|  |  |  |  |  |   addq.l #8,sp
    3070:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    3074:	|  |  |  |  |  |   move.l 1e806 <winWidth>,d0
    307a:	|  |  |  |  |  |   lsr.l #3,d0
    307c:	|  |  |  |  |  |   move.l 1e80a <winHeight>,d1
    3082:	|  |  |  |  |  |   move.l d1,-(sp)
    3084:	|  |  |  |  |  |   move.l d0,-(sp)
    3086:	|  |  |  |  |  |   jsr 18f0a <__mulsi3>
    308c:	|  |  |  |  |  |   addq.l #8,sp
    308e:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    3092:	|  |  |  |  |  |   move.l 1e8cc <GfxBase>,d0
    3098:	|  |  |  |  |  |   movea.l d0,a6
    309a:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    309e:	|  |  |  |  |  |   addq.l #1,20(sp)
    30a2:	|  |  |  |  |  '-> moveq #4,d0
    30a4:	|  |  |  |  |      cmp.l 20(sp),d0
    30a8:	|  |  |  |  '----- bge.w 301e <CstRestoreScreen+0x1aa>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    30ac:	|  |  |  '-------> move.l 1e7ea <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    30b4:	|  |  |            movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    30ba:	|  |  |            move.l 16(a0),d0
    30be:	|  |  |            move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    30c4:	|  |  |            move.l 12(sp),8(sp)
    30ca:	|  |  |            move.l 1e8c0 <SysBase>,d0
    30d0:	|  |  |            movea.l d0,a6
    30d2:	|  |  |            movea.l 8(sp),a1
    30d6:	|  |  |            jsr -690(a6)
    todelete = NULL;
    30da:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    30de:	|  |  '----------> move.l 1e7ea <CstCleanupQueueDrawBuffer>,d0
    30e4:	|  '-------------- bne.w 2f14 <CstRestoreScreen+0xa0>
    30e8:	|              ,-- bra.s 30ec <CstRestoreScreen+0x278>
    return;
    30ea:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    30ec:	               '-> move.l (sp)+,d2
    30ee:	                   movea.l (sp)+,a6
    30f0:	                   lea 36(sp),sp
    30f4:	                   rts

000030f6 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    30f6:	                                                                                           lea -32(sp),sp
    30fa:	                                                                                           movem.l d2-d7/a2-a6,-(sp)
    30fe:	                                                                                           movea.l 80(sp),a2
    3102:	                                                                                           move.l 84(sp),64(sp)
    3108:	                                                                                           move.l 88(sp),d3
    310c:	                                                                                           move.l 92(sp),48(sp)
    3112:	                                                                                           move.w d3,d7
    3114:	                                                                                           move.w 50(sp),d2
    3118:	                                                                                           move.w 98(sp),d5
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    311c:	                                                                                           movea.w d2,a3
    311e:	                                                                                           movea.w d3,a6
    3120:	                                                                                           move.l a3,-(sp)
    3122:	                                                                                           move.l a6,-(sp)
    3124:	                                                                                           move.l 1e920 <zBuffer>,-(sp)
    312a:	                                                                                           move.l a2,-(sp)
    312c:	                                                                                           jsr 1552 <CstDrawZBuffer>
    3132:	                                                                                           move.l d0,d4

  UWORD *destination = 0;
  switch(destinationtype)
    3134:	                                                                                           lea 16(sp),sp
    3138:	                                                                                           cmpi.w #1,d5
    313c:	                                                            ,----------------------------- beq.w 360c <CstScaleSprite+0x516>
    3140:	                                                            |                              cmpi.w #2,d5
    3144:	                                                            |                 ,----------- beq.w 3472 <CstScaleSprite+0x37c>
    3148:	                                                            |                 |            suba.l a4,a4
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    314a:	                                                            |  ,--------------|----------> move.l 4(a2),d1
    314e:	                                                            |  |              |            move.l a3,d0
    3150:	                                                            |  |              |            add.l d1,d0
  if( y < 0) {
    3152:	                                                            |  |              |            tst.w d2
    3154:	                                                            |  |           ,--|----------- blt.w 3486 <CstScaleSprite+0x390>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    3158:	                                                            |  |           |  |  ,-------> movea.l 1e80a <winHeight>,a0
    315e:	                                                            |  |           |  |  |         cmp.l a0,d0
    3160:	                                                            |  |  ,--------|--|--|-------- ble.w 3616 <CstScaleSprite+0x520>
    if(y  > (int) winHeight) {
    3164:	                                                            |  |  |        |  |  |         cmpa.l a3,a0
    3166:	                     ,--------------------------------------|--|--|--------|--|--|-------- blt.w 3744 <CstScaleSprite+0x64e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    316a:	                     |                                      |  |  |        |  |  |         move.l a3,d6
    ystartsrc = 0;
    blitheight = winHeight-y;
    316c:	                     |                                      |  |  |        |  |  |         suba.l a3,a0
    316e:	                     |                                      |  |  |        |  |  |         move.l a0,54(sp)
    ystartsrc = 0;
    3172:	                     |                                      |  |  |        |  |  |         moveq #0,d2


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    3174:	                     |                                      |  |  |  ,-----|--|--|-------> move.l (a2),d1
    3176:	                     |                                      |  |  |  |     |  |  |         move.l a6,d0
    3178:	                     |                                      |  |  |  |     |  |  |         add.l d1,d0
  if( x < 0) 
    317a:	                     |                                      |  |  |  |     |  |  |         tst.w d7
    317c:	                     |                                      |  |  |  |     |  |  |  ,----- blt.w 34a2 <CstScaleSprite+0x3ac>
      CstCleanupQueueViewBuffer->height = blitheight; 
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    }           
  } 
  else if(x + single->width > (int) winWidth) 
    3180:	                     |                                      |  |  |  |     |  |  |  |  ,-> movea.l 1e806 <winWidth>,a5
    3186:	                     |                                      |  |  |  |     |  |  |  |  |   cmp.l a5,d0
    3188:	                     |                                      |  |  |  |  ,--|--|--|--|--|-- ble.w 3622 <CstScaleSprite+0x52c>
  { //Rightmost part outside screen   

    if(x - single->width > (int) winWidth)
    318c:	                     |                                      |  |  |  |  |  |  |  |  |  |   suba.l d1,a6
    318e:	                     |                                      |  |  |  |  |  |  |  |  |  |   cmpa.l a5,a6
    3190:	                     +--------------------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 3744 <CstScaleSprite+0x64e>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    3194:	                     |                                      |  |  |  |  |  |  |  |  |  |   sub.l a5,d0
    3196:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    3198:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,68(sp)
    319c:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d0,a3
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    319e:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 18f0a <__mulsi3>,a6
    31a4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,-(sp)
    31a6:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    31a8:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    31aa:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    31ac:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    31ae:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l d0,d4
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    31b0:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    31b4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    31b8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,d7
    31ba:	                     |                                      |  |  |  |  |  |  |  |  |  |   asr.w #4,d7
    31bc:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d6,-(sp)
    31be:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    31c0:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    31c2:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    31c4:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    31c6:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d7,a0
    31c8:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    31ca:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a4
    31cc:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea (0,a4,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    31d0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,d2
    31d2:	                     |                                      |  |  |  |  |  |  |  |  |  |   andi.w #15,d2
    31d6:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,58(sp)
    31da:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #15,d1
    31dc:	                     |                                      |  |  |  |  |  |  |  |  |  |   and.l d3,d1
    31de:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    31e0:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d2
    31e2:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d2,d0
    31e4:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a4
    31e6:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 4042(a4),a4
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    31ea:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d0
    31ec:	                     |                                      |  |  |  |  |  |  |  |  |  |   not.w d0
    31ee:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d1,d0
    31f0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d0,52(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    31f4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 1e7ea <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    31fa:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l 1e8c0 <SysBase>,a6
    3200:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    3202:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    3204:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    3208:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    320a:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3210:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,16(a0)

    CstCleanupQueueDrawBuffer->x = x;
    3214:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3216:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    321c:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3222:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    3224:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    3226:	         ,-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3a24 <CstScaleSprite+0x92e>
    322a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    322c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   movea.w 70(sp),a1
    3230:	         |           |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    3232:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3236:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 56(sp),d2
    323a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    323e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d7,d7
    3240:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,74(sp)
    3244:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3248:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,54(sp)
    324c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,14(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    } 
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3250:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 70(sp),d6
    3254:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d6,d6
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    3256:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    325a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),d7
    325e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    3260:	         |           |                                      |  |  |  |  |  |  |  |  |  |   lsl.w d0,d7
    3262:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,58(sp)
    if( destinationtype != SCREEN)
    3266:	         |           |                                      |  |  |  |  |  |  |  |  |  |   cmpi.w #1,d5
    326a:	      ,--|-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 3a94 <CstScaleSprite+0x99e>
      next = CstCleanupQueueViewBuffer;
    326e:	      |  |  ,--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1e7e6 <CstCleanupQueueViewBuffer>,d5
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3274:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l 1e8c0 <SysBase>,a6
    327a:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    327c:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    327e:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    3282:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    3284:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1e7e6 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    328a:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d5,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    328e:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,(a0)
      CstCleanupQueueViewBuffer->y = y;
    3290:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    3296:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    329c:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    329e:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    32a0:	   ,--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3ada <CstScaleSprite+0x9e4>
    32a4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    32a6:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 70(sp),d7
    32aa:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d7
    32ac:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    32b0:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    32b4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 74(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    32ba:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 54(sp),14(a0)
    32c0:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.w #-1,a4
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    32c4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   clr.w d7
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    32c6:	,--|--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1e806 <winWidth>,d0
    32cc:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    32ce:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,d5
    32d0:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d5
    32d2:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   tst.l d1
    32d4:	|  |  |  |  |  ,-----|--------------------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3818 <CstScaleSprite+0x722>
    32d8:	|  |  |  |  |  |  ,--|--------------------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    32da:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   sub.w d1,d5
  WaitBlit();
    32dc:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l #125132,d3
    32e2:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    32e4:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    32e6:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    32ea:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,dff044 <gcc8_c_support.c.c60c1f2b+0xdb1912>
  custom->bltalwm = bltalwm;
    32f0:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 52(sp),dff046 <gcc8_c_support.c.c60c1f2b+0xdb1914>
  custom->bltamod = bltamod;
    32f8:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb1932>
  custom->bltbmod = bltbmod;
    32fe:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d6,dff062 <gcc8_c_support.c.c60c1f2b+0xdb1930>
  custom->bltcmod = bltcmod;
    3304:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d5,dff060 <gcc8_c_support.c.c60c1f2b+0xdb192e>
  custom->bltdmod = bltdmod;
    330a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d5,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1934>
  custom->bltcon0 = bltcon0;
    3310:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb190e>
  custom->bltcon1 = bltcon1;  
    3318:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb1910>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    3320:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3322:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsl.w #6,d2
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3324:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d6
    3326:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   asr.l #3,d6
    3328:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d6
    bltbpt += bltbptplus;
    332c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
  UWORD bltcptplus = winWidth/8*winHeight;
    3332:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 1e806 <winWidth>,d5
    3338:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d5
    333a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 1e80c <winHeight+0x2>,d5
    bltcpt += bltcptplus;
    3340:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d5
    custom->bltapt = (APTR) bltapt;
    3346:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltbpt = (APTR) bltbpt;
    334c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
    custom->bltcpt = (APTR) bltcpt;
    3354:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1916>
    custom->bltdpt = (APTR) bltdpt;
    335a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3360:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   tst.l d0
    3362:	|  |  |  |  |  |  |  |                       ,--------------|--|--|--|--|--|--|--|--|--|-- blt.w 38a8 <CstScaleSprite+0x7b2>
    3366:	|  |  |  |  |  |  |  |                       |     ,--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3368:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    336a:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    336c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    336e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
    bltbpt += bltbptplus;
    3374:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a4
    3378:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d6,a4
    bltcpt += bltcptplus;
    337a:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d5,a5
    bltdpt += bltcptplus;
    WaitBlit();
    337c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    337e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3380:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3384:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3386:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltbpt = (APTR) bltbpt;
    338c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
    custom->bltcpt = (APTR) bltcpt;
    3392:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1916>
    custom->bltdpt = (APTR) bltdpt;
    3398:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    339e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    33a0:	|  |  |  |  |  |  |  |                 ,-----|-----|--------|--|--|--|--|--|--|--|--|--|-- blt.w 38ea <CstScaleSprite+0x7f4>
    33a4:	|  |  |  |  |  |  |  |                 |     |  ,--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33a6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    33a8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33aa:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    33ac:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
    bltbpt += bltbptplus;
    33b2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d6,a4
    bltcpt += bltcptplus;
    33b4:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d5,a5
    WaitBlit();
    33b6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    33b8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    33ba:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33be:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33c0:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltbpt = (APTR) bltbpt;
    33c6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
    custom->bltcpt = (APTR) bltcpt;
    33cc:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1916>
    custom->bltdpt = (APTR) bltdpt;
    33d2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33d8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    33da:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3928 <CstScaleSprite+0x832>
    33de:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33e0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    33e2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33e4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    33e6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
    bltbpt += bltbptplus;
    33ec:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d6,a4
    bltcpt += bltcptplus;
    33ee:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d5,a5
    WaitBlit();
    33f0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    33f2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    33f4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33f8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33fa:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltbpt = (APTR) bltbpt;
    3400:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
    custom->bltcpt = (APTR) bltcpt;
    3406:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1916>
    custom->bltdpt = (APTR) bltdpt;
    340c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3412:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3414:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3966 <CstScaleSprite+0x870>
    3418:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    341a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    341c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    341e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d0
    3420:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
    bltbpt += bltbptplus;
    3426:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a4,d6
    bltcpt += bltcptplus;
    3428:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a5,d5
    WaitBlit();
    342a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    342c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    342e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3432:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3434:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltbpt = (APTR) bltbpt;
    343a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d6,dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
    custom->bltcpt = (APTR) bltcpt;
    3440:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1916>
    custom->bltdpt = (APTR) bltdpt;
    3446:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    344c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    344e:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 39a4 <CstScaleSprite+0x8ae>
    3452:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d7
    3456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d7
    3458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w a3,d7
    345a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d7,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
    WaitBlit();
    3460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    3462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    3468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    346c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 32(sp),sp
    3470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
      destination = (UWORD *) CstBackDrop;      
    3472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  '--|--|--|-> movea.l 1e7d2 <CstBackDrop>,a4
    if(y + single->height < 0) {
    3478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l 4(a2),d1
    347c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l a3,d0
    347e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   add.l d1,d0
  if( y < 0) {
    3480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   tst.w d2
    3482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     '--|--|-- bge.w 3158 <CstScaleSprite+0x62>
    if(y + single->height < 0) {
    3486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  '--------|--|-> tst.l d0
    3488:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|-----------|--|-- blt.w 3744 <CstScaleSprite+0x64e>
    ystartsrc = y*-1;
    348c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a3,d2
    348e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   neg.l d2
    blitheight = single->height+y;
    3490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l d0,54(sp)
    ystartdst = 0;
    3494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   moveq #0,d6
    if(x + single->width < 0) {
    3496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l (a2),d1
    3498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a6,d0
    349a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   add.l d1,d0
  if( x < 0) 
    349c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   tst.w d7
    349e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  '-- bge.w 3180 <CstScaleSprite+0x8a>
    if(x + single->width < 0) {
    34a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           '----> tst.l d0
    34a4:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|----------------- blt.w 3744 <CstScaleSprite+0x64e>
    cutwordssource = (x*-1)/16; 
    34a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d3,d0
    34aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addi.w #15,d0
    34ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  asr.w #4,d0
    34b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.w d0
    34b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,52(sp)
    34b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  movea.w d0,a3
    cutmaskpixel = (x*-1)%16;   
    34b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l a6,d0
    34ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.l d0
    34bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  moveq #15,d7
    34be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  and.l d0,d7
    34c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d7,68(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lea 18f0a <__mulsi3>,a6
    34ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 1e806 <winWidth>,-(sp)
    34d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d6,-(sp)
    34d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d1,52(sp)
    34d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  jsr (a6)
    34d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addq.l #8,sp
    34da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    34dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 44(sp),d1
    34e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  tst.l d7
    34e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  ,-------------- beq.w 375a <CstScaleSprite+0x664>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea (-2,a4,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 52(sp),d7
    34ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               subq.w #1,d7
    34f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d7,74(sp)
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    34f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w #16,a0
    34f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               suba.l 68(sp),a0
    34fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l a0,d7
    34fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #12,d0
    3500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.l d0,d7
  custom->bltcon0 = bltcon0;
    3502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addi.w #4042,d7
    3506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d7,72(sp)
  custom->bltcon1 = bltcon1;  
    350a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a0,d7
    350c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.w d0,d7
    350e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d7,58(sp)
      extrawords = 1;
    3512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #1,d7
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w 52(sp),a4
    3518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l a4,a4
    351a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d2,-(sp)
    351c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,-(sp)
    351e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr (a6)
    3520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addq.l #8,sp
    3522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsr.l #3,d0
    3524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d4
    3526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l d0,d4
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l 24(a2),a4
    352c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d0
    352e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 1e7ea <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l 1e8c0 <SysBase>,a6
    353e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #20,d0
    3540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #0,d1
    3542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr -684(a6)
    3546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l d0,a0
    3548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    354e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d2,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    355a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l (a2),d1
    3562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,d0
    3564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     ,-------- bmi.w 37c4 <CstScaleSprite+0x6ce>
    3568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     ,-> asr.l #4,d0
    356a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w 52(sp),d0
    356e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d7,d0
    3570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    3574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 56(sp),d2
    3578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    357c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d6,54(sp)
    3584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d6,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   moveq #0,d0
    358a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   not.w d0
    358c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.l 68(sp),d6
    3590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   asr.l d6,d0
    3592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   movea.l d0,a4
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 74(sp),d6
    3598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d6,d6
    if( destinationtype != SCREEN)
    359a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   cmpi.w #1,d5
    359e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  ,--|-----|-- beq.w 3802 <CstScaleSprite+0x70c>
      next = CstCleanupQueueViewBuffer;
    35a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  ,--|-> move.l 1e7e6 <CstCleanupQueueViewBuffer>,d5
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    35a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l 1e8c0 <SysBase>,a6
    35ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    35b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    35b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    35b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    35b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d0,1e7e6 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;
    35be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    35c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d3,(a0)
      CstCleanupQueueViewBuffer->y = y;
    35c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
      CstCleanupQueueViewBuffer->person = person;
    35ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    35d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    35d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    35d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|--|--|-- bmi.w 3a6e <CstScaleSprite+0x978>
    35d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    35da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w 52(sp),d0
    35de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    35e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    35e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    35e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    35ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w 54(sp),14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    35f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 52(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|-> move.l 1e806 <winWidth>,d0
    35fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    35fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d6,d5
    3600:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d5
    3602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3604:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 32d8 <CstScaleSprite+0x1e2>
    3608:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3818 <CstScaleSprite+0x722>
      destination = (UWORD *) CstDrawBuffer;      
    360c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|-> movea.l 1e7e2 <CstDrawBuffer>,a4
      break;
    3612:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--|--|--|--|--|-- bra.w 314a <CstScaleSprite+0x54>
    ystartdst = y;
    3616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--|--|--|--|--|-> move.l a3,d6
    blitheight = single->height;
    3618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   move.l d1,54(sp)
    ystartsrc = 0;
    361c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   moveq #0,d2
    361e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--|--|--|--|--|-- bra.w 3174 <CstScaleSprite+0x7e>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3622:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--|--|--|--|--|-> lea 18f0a <__mulsi3>,a3
    3628:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d2,-(sp)
    362a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,-(sp)
    362c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a3)
    362e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    3630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    3632:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l d0,d4
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3634:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l 24(a2),d0
    3638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    363c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d3,d7
    363e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   asr.w #4,d7
    3640:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d6,-(sp)
    3642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l a5,-(sp)
    3644:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a3)
    3646:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    3648:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    364a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.w d7,a0
    364c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a0
    364e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a4
    3650:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea (0,a4,d0.l),a5
    bltcon0 = 0xfca + ((x%16) << 12);
    3654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d3,d2
    3656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   andi.w #15,d2
    365a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d2,58(sp)
    365e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #15,d0
    3660:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   and.l d3,d0
    3662:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #12,d1
    3664:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsl.l d1,d0
    3666:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a3
    3668:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 4042(a3),a3
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    366c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 1e7ea <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3672:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l 1e8c0 <SysBase>,a6
    3678:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #20,d0
    367a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #0,d1
    367c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr -684(a6)
    3680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a0
    3682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d2,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    368c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    368e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    3694:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    369a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l (a2),d1
    369c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,d0
    369e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-----|--|--|--|--|-- bmi.w 39c8 <CstScaleSprite+0x8d2>
    36a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   asr.l #4,d0
    36a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   addq.w #1,d0
    36a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    36aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 56(sp),d2
    36ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    36b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   add.w d7,d7
    36b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    36b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   movea.w d6,a4
    36ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,14(a0)
  custom->bltcon0 = bltcon0;
    36be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w a3,72(sp)
  custom->bltcon1 = bltcon1;  
    36c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 58(sp),d6
    36c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   moveq #12,d0
    36c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   lsl.w d0,d6
    36ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,58(sp)
    if( destinationtype != SCREEN)
    36ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   cmpi.w #1,d5
    36d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|-----|--|--|--|--|-- beq.w 3a00 <CstScaleSprite+0x90a>
      next = CstCleanupQueueViewBuffer;
    36d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,--|--|--|--|--|-> move.l 1e7e6 <CstCleanupQueueViewBuffer>,d5
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    36dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l 1e8c0 <SysBase>,a6
    36e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #20,d0
    36e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #0,d1
    36e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   jsr -684(a6)
    36ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l d0,a0
    36ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d0,1e7e6 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    36f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d5,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    36f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w d3,(a0)
      CstCleanupQueueViewBuffer->y = y;
    36f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w 50(sp),2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    36fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3704:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l (a2),d1
    3706:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d1,d0
    3708:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|-- bmi.w 3ab0 <CstScaleSprite+0x9ba>
    370c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   asr.l #4,d0
    370e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   addq.w #1,d0
    3710:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3714:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    3718:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d7,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    371c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w a4,14(a0)
    3720:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   movea.w #-1,a4
    3724:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #-2,d6
    bltalwm = 0; //Last Word of this channel almost masked out
    3726:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   clr.w 52(sp)
    cutwordssource = 0;
    372a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   suba.l a3,a3
    extrawords = 1;
    372c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #1,d7
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    372e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|-> move.l 1e806 <winWidth>,d0
    3734:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    3736:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d6,d5
    3738:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d5
    373a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    373c:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 32d8 <CstScaleSprite+0x1e2>
    3740:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3818 <CstScaleSprite+0x722>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    3744:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> move.l #103319,80(sp)
}
    374c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3750:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 32(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    3754:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jmp 1857e <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    375a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|-> lea (0,a4,d0.l),a5
    375e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 52(sp),74(sp)
    3764:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w 58(sp)
    3768:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w #4042,72(sp)
      extrawords = 0;
    376e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w d7
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3770:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.w 52(sp),a4
    3774:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l a4,a4
    3776:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d2,-(sp)
    3778:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,-(sp)
    377a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr (a6)
    377c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   addq.l #8,sp
    377e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lsr.l #3,d0
    3780:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d4
    3782:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l d0,d4
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3784:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l 24(a2),a4
    3788:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d0
    378a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    378e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 1e7ea <CstCleanupQueueDrawBuffer>,d2
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3794:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l 1e8c0 <SysBase>,a6
    379a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #20,d0
    379c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #0,d1
    379e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr -684(a6)
    37a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l d0,a0
    37a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    37aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d2,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    37ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w d3,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    37b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 50(sp),2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    37b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    37bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l (a2),d1
    37be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,d0
    37c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-- bpl.w 3568 <CstScaleSprite+0x472>
    37c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  '--|----> moveq #15,d0
    37c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.l d1,d0
    37c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l #4,d0
    37ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w 52(sp),d0
    37ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d7,d0
    37d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    37d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 56(sp),d2
    37d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    37dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    37e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d6,54(sp)
    37e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d6,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    37e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      moveq #0,d0
    37ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      not.w d0
    37ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.l 68(sp),d6
    37f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l d6,d0
    37f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      movea.l d0,a4
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    37f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 74(sp),d6
    37f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d6,d6
    if( destinationtype != SCREEN)
    37fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      cmpi.w #1,d5
    37fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     '----- bne.w 35a2 <CstScaleSprite+0x4ac>
    bltalwm = 0; //Last Word of this channel almost masked out
    3802:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '----------> clr.w 52(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3806:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1e806 <winWidth>,d0
    380c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    380e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,d5
    3810:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  add.w d0,d5
    3812:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d1
    3814:	|  |  |  |  |  |  +-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- bge.w 32d8 <CstScaleSprite+0x1e2>
    3818:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------> addq.l #7,d1
    381a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d1
    381c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  sub.w d1,d5
  WaitBlit();
    381e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l #125132,d3
    3824:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l d3,a0
    3826:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l (a0),a6
    3828:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr -228(a6)
  custom->bltafwm = bltafwm;
    382c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w a4,dff044 <gcc8_c_support.c.c60c1f2b+0xdb1912>
  custom->bltalwm = bltalwm;
    3832:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 52(sp),dff046 <gcc8_c_support.c.c60c1f2b+0xdb1914>
  custom->bltamod = bltamod;
    383a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb1932>
  custom->bltbmod = bltbmod;
    3840:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d6,dff062 <gcc8_c_support.c.c60c1f2b+0xdb1930>
  custom->bltcmod = bltcmod;
    3846:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d5,dff060 <gcc8_c_support.c.c60c1f2b+0xdb192e>
  custom->bltdmod = bltdmod;
    384c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d5,dff066 <gcc8_c_support.c.c60c1f2b+0xdb1934>
  custom->bltcon0 = bltcon0;
    3852:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb190e>
  custom->bltcon1 = bltcon1;  
    385a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 58(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb1910>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3862:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3864:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsl.w #6,d2
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3866:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d0,d6
    3868:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d6
    386a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 6(a2),d6
    bltbpt += bltbptplus;
    386e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d6
  UWORD bltcptplus = winWidth/8*winHeight;
    3874:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1e806 <winWidth>,d5
    387a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d5
    387c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 1e80c <winHeight+0x2>,d5
    bltcpt += bltcptplus;
    3882:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d5
    custom->bltapt = (APTR) bltapt;
    3888:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltbpt = (APTR) bltbpt;
    388e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
    custom->bltcpt = (APTR) bltcpt;
    3896:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1916>
    custom->bltdpt = (APTR) bltdpt;
    389c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d0
    38a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|----------------- bge.w 3366 <CstScaleSprite+0x270>
    38a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--|-----|--|--|--|--|--|--|----------------> moveq #15,d1
    38aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.l d1,d0
    38ac:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  asr.l #4,d0
    38ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d7,d0
    38b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d2,d0
    38b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  sub.w a3,d0
    38b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
    bltbpt += bltbptplus;
    38ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l 60(sp),a4
    38be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d6,a4
    bltcpt += bltcptplus;
    38c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d5,a5
    WaitBlit();
    38c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l d3,a0
    38c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l (a0),a6
    38c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    38cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltbpt = (APTR) bltbpt;
    38d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
    custom->bltcpt = (APTR) bltcpt;
    38d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1916>
    custom->bltdpt = (APTR) bltdpt;
    38de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  tst.l d0
    38e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     '-----|--|--|--|--|--|--|----------------- bge.w 33a4 <CstScaleSprite+0x2ae>
    38ea:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|--|--|----------------> moveq #15,d1
    38ec:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.l d1,d0
    38ee:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  asr.l #4,d0
    38f0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d7,d0
    38f2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d2,d0
    38f4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  sub.w a3,d0
    38f6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
    bltbpt += bltbptplus;
    38fc:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d6,a4
    bltcpt += bltcptplus;
    38fe:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d5,a5
    WaitBlit();
    3900:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l d3,a0
    3902:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l (a0),a6
    3904:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3908:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    390a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltbpt = (APTR) bltbpt;
    3910:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
    custom->bltcpt = (APTR) bltcpt;
    3916:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1916>
    custom->bltdpt = (APTR) bltdpt;
    391c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3922:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  tst.l d0
    3924:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|--|--|----------------- bge.w 33de <CstScaleSprite+0x2e8>
    3928:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|--|--|----------------> moveq #15,d1
    392a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.l d1,d0
    392c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  asr.l #4,d0
    392e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d7,d0
    3930:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d2,d0
    3932:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  sub.w a3,d0
    3934:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
    bltbpt += bltbptplus;
    393a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d6,a4
    bltcpt += bltcptplus;
    393c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d5,a5
    WaitBlit();
    393e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l d3,a0
    3940:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l (a0),a6
    3942:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3946:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3948:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltbpt = (APTR) bltbpt;
    394e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
    custom->bltcpt = (APTR) bltcpt;
    3954:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1916>
    custom->bltdpt = (APTR) bltdpt;
    395a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3960:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  tst.l d0
    3962:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|--|--|----------------- bge.w 3418 <CstScaleSprite+0x322>
    3966:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    3968:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l d1,d0
    396a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  asr.l #4,d0
    396c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d7,d0
    396e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d2,d0
    3970:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  sub.w a3,d0
    3972:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
    bltbpt += bltbptplus;
    3978:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a4,d6
    bltcpt += bltcptplus;
    397a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a5,d5
    WaitBlit();
    397c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l d3,a0
    397e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l (a0),a6
    3980:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3984:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3986:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff050 <gcc8_c_support.c.c60c1f2b+0xdb191e>
    custom->bltbpt = (APTR) bltbpt;
    398c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d6,dff04c <gcc8_c_support.c.c60c1f2b+0xdb191a>
    custom->bltcpt = (APTR) bltcpt;
    3992:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb1916>
    custom->bltdpt = (APTR) bltdpt;
    3998:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb1922>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    399e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  tst.l d0
    39a0:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|--|--|----------------- bge.w 3452 <CstScaleSprite+0x35c>
    39a4:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    39a6:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.l d1,d0
    39a8:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  asr.l #4,d0
    39aa:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d0,d7
    39ac:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d2,d7
    39ae:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  sub.w a3,d7
    39b0:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  move.w d7,dff058 <gcc8_c_support.c.c60c1f2b+0xdb1926>
    WaitBlit();
    39b6:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l d3,a0
    39b8:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l (a0),a6
    39ba:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  jsr -228(a6)
}
    39be:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movem.l (sp)+,d2-d7/a2-a6
    39c2:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  lea 32(sp),sp
    39c6:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  rts
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    39c8:	|  |  |  |  |  |  |                                   |  |  |  |  |  '--|----------------> moveq #15,d0
    39ca:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.l d1,d0
    39cc:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  asr.l #4,d0
    39ce:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  addq.w #1,d0
    39d0:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    39d4:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 56(sp),d2
    39d8:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    39dc:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.w d7,d7
    39de:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    39e2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  movea.w d6,a4
    39e4:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,14(a0)
  custom->bltcon0 = bltcon0;
    39e8:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w a3,72(sp)
  custom->bltcon1 = bltcon1;  
    39ec:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 58(sp),d6
    39f0:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  moveq #12,d0
    39f2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  lsl.w d0,d6
    39f4:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,58(sp)
    if( destinationtype != SCREEN)
    39f8:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  cmpi.w #1,d5
    39fc:	|  |  |  |  |  |  |                                   |  |  |  |  |     '----------------- bne.w 36d6 <CstScaleSprite+0x5e0>
    extrawords = 1;
    3a00:	|  |  |  |  |  |  |                                   |  |  |  |  '----------------------> moveq #1,d7
    3a02:	|  |  |  |  |  |  |                                   |  |  |  |                           movea.w #-1,a4
    3a06:	|  |  |  |  |  |  |                                   |  |  |  |                           moveq #-2,d6
    bltalwm = 0; //Last Word of this channel almost masked out
    3a08:	|  |  |  |  |  |  |                                   |  |  |  |                           clr.w 52(sp)
    cutwordssource = 0;
    3a0c:	|  |  |  |  |  |  |                                   |  |  |  |                           suba.l a3,a3
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3a0e:	|  |  |  |  |  |  |                                   |  |  |  |                           move.l 1e806 <winWidth>,d0
    3a14:	|  |  |  |  |  |  |                                   |  |  |  |                           lsr.l #3,d0
    3a16:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w d6,d5
    3a18:	|  |  |  |  |  |  |                                   |  |  |  |                           add.w d0,d5
    3a1a:	|  |  |  |  |  |  |                                   |  |  |  |                           tst.l d1
    3a1c:	|  |  |  |  |  |  +-----------------------------------|--|--|--|-------------------------- bge.w 32d8 <CstScaleSprite+0x1e2>
    3a20:	|  |  |  |  |  +--|-----------------------------------|--|--|--|-------------------------- bra.w 3818 <CstScaleSprite+0x722>
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3a24:	|  |  |  '--|--|--|-----------------------------------|--|--|--|-------------------------> moveq #15,d0
    3a26:	|  |  |     |  |  |                                   |  |  |  |                           add.l d1,d0
    3a28:	|  |  |     |  |  |                                   |  |  |  |                           asr.l #4,d0
    3a2a:	|  |  |     |  |  |                                   |  |  |  |                           movea.w 70(sp),a1
    3a2e:	|  |  |     |  |  |                                   |  |  |  |                           adda.w d0,a1
    3a30:	|  |  |     |  |  |                                   |  |  |  |                           move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3a34:	|  |  |     |  |  |                                   |  |  |  |                           move.w 56(sp),d2
    3a38:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3a3c:	|  |  |     |  |  |                                   |  |  |  |                           add.w d7,d7
    3a3e:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,74(sp)
    3a42:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3a46:	|  |  |     |  |  |                                   |  |  |  |                           move.w d6,54(sp)
    3a4a:	|  |  |     |  |  |                                   |  |  |  |                           move.w d6,14(a0)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3a4e:	|  |  |     |  |  |                                   |  |  |  |                           move.w 70(sp),d6
    3a52:	|  |  |     |  |  |                                   |  |  |  |                           add.w d6,d6
  custom->bltcon0 = bltcon0;
    3a54:	|  |  |     |  |  |                                   |  |  |  |                           move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    3a58:	|  |  |     |  |  |                                   |  |  |  |                           move.w 58(sp),d7
    3a5c:	|  |  |     |  |  |                                   |  |  |  |                           moveq #12,d0
    3a5e:	|  |  |     |  |  |                                   |  |  |  |                           lsl.w d0,d7
    3a60:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,58(sp)
    if( destinationtype != SCREEN)
    3a64:	|  |  |     |  |  |                                   |  |  |  |                           cmpi.w #1,d5
    3a68:	|  |  |     '--|--|-----------------------------------|--|--|--|-------------------------- bne.w 326e <CstScaleSprite+0x178>
    3a6c:	|  |  +--------|--|-----------------------------------|--|--|--|-------------------------- bra.s 3a94 <CstScaleSprite+0x99e>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3a6e:	|  |  |        |  |                                   |  '--|--|-------------------------> moveq #15,d0
    3a70:	|  |  |        |  |                                   |     |  |                           add.l d1,d0
    3a72:	|  |  |        |  |                                   |     |  |                           asr.l #4,d0
    3a74:	|  |  |        |  |                                   |     |  |                           add.w 52(sp),d0
    3a78:	|  |  |        |  |                                   |     |  |                           add.w d7,d0
    3a7a:	|  |  |        |  |                                   |     |  |                           move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    3a7e:	|  |  |        |  |                                   |     |  |                           move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    3a82:	|  |  |        |  |                                   |     |  |                           clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    3a86:	|  |  |        |  |                                   |     |  |                           move.w 54(sp),14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3a8c:	|  |  |        |  |                                   |     |  |                           clr.w 52(sp)
    3a90:	|  |  |        |  |                                   '-----|--|-------------------------- bra.w 35f6 <CstScaleSprite+0x500>
    3a94:	|  |  '--------|--|-----------------------------------------|--|-------------------------> movea.w #-1,a4
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3a98:	|  |           |  |                                         |  |                           clr.w d7
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3a9a:	|  |           |  |                                         |  |                           move.l 1e806 <winWidth>,d0
    3aa0:	|  |           |  |                                         |  |                           lsr.l #3,d0
    3aa2:	|  |           |  |                                         |  |                           move.w d6,d5
    3aa4:	|  |           |  |                                         |  |                           add.w d0,d5
    3aa6:	|  |           |  |                                         |  |                           tst.l d1
    3aa8:	|  |           |  '-----------------------------------------|--|-------------------------- bge.w 32d8 <CstScaleSprite+0x1e2>
    3aac:	|  |           '--------------------------------------------|--|-------------------------- bra.w 3818 <CstScaleSprite+0x722>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3ab0:	|  |                                                        |  '-------------------------> moveq #15,d0
    3ab2:	|  |                                                        |                              add.l d1,d0
    3ab4:	|  |                                                        |                              asr.l #4,d0
    3ab6:	|  |                                                        |                              addq.w #1,d0
    3ab8:	|  |                                                        |                              move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3abc:	|  |                                                        |                              move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    3ac0:	|  |                                                        |                              move.w d7,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    3ac4:	|  |                                                        |                              move.w a4,14(a0)
    3ac8:	|  |                                                        |                              movea.w #-1,a4
    3acc:	|  |                                                        |                              moveq #-2,d6
    bltalwm = 0; //Last Word of this channel almost masked out
    3ace:	|  |                                                        |                              clr.w 52(sp)
    cutwordssource = 0;
    3ad2:	|  |                                                        |                              suba.l a3,a3
    extrawords = 1;
    3ad4:	|  |                                                        |                              moveq #1,d7
    3ad6:	|  |                                                        '----------------------------- bra.w 372e <CstScaleSprite+0x638>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    3ada:	|  '-------------------------------------------------------------------------------------> moveq #15,d0
    3adc:	|                                                                                          add.l d1,d0
    3ade:	|                                                                                          asr.l #4,d0
    3ae0:	|                                                                                          move.w 70(sp),d7
    3ae4:	|                                                                                          add.w d0,d7
    3ae6:	|                                                                                          move.w d7,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    3aea:	|                                                                                          move.w d2,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3aee:	|                                                                                          move.w 74(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    3af4:	|                                                                                          move.w 54(sp),14(a0)
    3afa:	|                                                                                          movea.w #-1,a4
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3afe:	|                                                                                          clr.w d7
    3b00:	'----------------------------------------------------------------------------------------- bra.w 32c6 <CstScaleSprite+0x1d0>

00003b04 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3b04:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3b06:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3b0c:	move.l 8(sp),d0
    3b10:	movea.l (sp),a0
    3b12:	move.l d0,128(a0)
}
    3b16:	nop
    3b18:	addq.l #4,sp
    3b1a:	rts

00003b1c <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3b1c:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3b20:	move.l 1e7de <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3b28:	move.l 1e7e2 <CstDrawBuffer>,d0
    3b2e:	move.l d0,1e7de <CstViewBuffer>
  CstDrawBuffer = tmp;
    3b34:	move.l 16(sp),1e7e2 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3b3c:	move.l 1e7e6 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3b44:	move.l 1e7ea <CstCleanupQueueDrawBuffer>,d0
    3b4a:	move.l d0,1e7e6 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3b50:	move.l 12(sp),1e7ea <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3b58:	move.l 1e7da <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3b60:	move.l 1e7de <CstViewBuffer>,d0
    3b66:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3b6a:	move.l 4(sp),d0
    3b6e:	clr.w d0
    3b70:	swap d0
    3b72:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3b76:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3b7a:	movea.w #118,a0
    3b7e:	adda.l 8(sp),a0
    3b82:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3b84:	movea.w #114,a0
    3b88:	adda.l 8(sp),a0
    3b8c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3b90:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3b98:	move.l 4(sp),d0
    3b9c:	clr.w d0
    3b9e:	swap d0
    3ba0:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3ba4:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3ba8:	movea.w #126,a0
    3bac:	adda.l 8(sp),a0
    3bb0:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3bb2:	movea.w #122,a0
    3bb6:	adda.l 8(sp),a0
    3bba:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3bbe:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3bc6:	move.l 4(sp),d0
    3bca:	clr.w d0
    3bcc:	swap d0
    3bce:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3bd2:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3bd6:	movea.l 8(sp),a0
    3bda:	lea 134(a0),a0
    3bde:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3be0:	movea.l 8(sp),a0
    3be4:	lea 130(a0),a0
    3be8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3bec:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3bf4:	move.l 4(sp),d0
    3bf8:	clr.w d0
    3bfa:	swap d0
    3bfc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c00:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3c04:	movea.l 8(sp),a0
    3c08:	lea 142(a0),a0
    3c0c:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3c0e:	movea.l 8(sp),a0
    3c12:	lea 138(a0),a0
    3c16:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3c1a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3c22:	move.l 4(sp),d0
    3c26:	clr.w d0
    3c28:	swap d0
    3c2a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c2e:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3c32:	movea.l 8(sp),a0
    3c36:	lea 150(a0),a0
    3c3a:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3c3c:	movea.l 8(sp),a0
    3c40:	lea 146(a0),a0
    3c44:	move.w 2(sp),(a0)

}
    3c48:	nop
    3c4a:	lea 20(sp),sp
    3c4e:	rts

00003c50 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3c50:	          lea -68(sp),sp
    3c54:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3c56:	          pea 193ca <PutChar+0x3aa>
    3c5c:	          jsr 1857e <KPrintF>
    3c62:	          addq.l #4,sp

  width = width / 8;
    3c64:	          move.l 76(sp),d0
    3c68:	      ,-- bpl.s 3c6c <CstReserveBackdrop+0x1c>
    3c6a:	      |   addq.l #7,d0
    3c6c:	      '-> asr.l #3,d0
    3c6e:	          move.l d0,76(sp)

  if( width < 40) 
    3c72:	          moveq #39,d0
    3c74:	          cmp.l 76(sp),d0
    3c78:	      ,-- blt.s 3c8e <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3c7a:	      |   pea 193e4 <PutChar+0x3c4>
    3c80:	      |   jsr 1857e <KPrintF>
    3c86:	      |   addq.l #4,sp
    return FALSE;
    3c88:	      |   clr.w d0
    3c8a:	,-----|-- bra.w 3fca <CstReserveBackdrop+0x37a>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3c8e:	|     '-> pea 19422 <PutChar+0x402>
    3c94:	|         jsr 1857e <KPrintF>
    3c9a:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3c9c:	|         move.l 76(sp),-(sp)
    3ca0:	|         jsr 10ca <CstCreateCopperlist>
    3ca6:	|         addq.l #4,sp
    3ca8:	|         move.l d0,1e7da <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3cae:	|         pea 19442 <PutChar+0x422>
    3cb4:	|         jsr 1857e <KPrintF>
    3cba:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3cbc:	|         move.l 76(sp),d1
    3cc0:	|         move.l 80(sp),d0
    3cc4:	|         muls.w d1,d0
    3cc6:	|         move.w d0,1e7d0 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3ccc:	|         move.w 1e7d0 <CstBackdropSizePlane>,d1
    3cd2:	|         move.w d1,d0
    3cd4:	|         add.w d0,d0
    3cd6:	|         add.w d0,d0
    3cd8:	|         add.w d1,d0
    3cda:	|         move.w d0,1e7ce <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3ce0:	|         move.w 1e7ce <CstBackdropSize>,d0
    3ce6:	|         move.w d0,d0
    3ce8:	|         andi.l #65535,d0
    3cee:	|         move.l d0,60(sp)
    3cf2:	|         moveq #2,d1
    3cf4:	|         move.l d1,56(sp)
    3cf8:	|         move.l 1e8c0 <SysBase>,d0
    3cfe:	|         movea.l d0,a6
    3d00:	|         move.l 60(sp),d0
    3d04:	|         move.l 56(sp),d1
    3d08:	|         jsr -684(a6)
    3d0c:	|         move.l d0,52(sp)
    3d10:	|         move.l 52(sp),d0
    3d14:	|         move.l d0,1e7d2 <CstBackDrop>
  if( !CstBackDrop)
    3d1a:	|         move.l 1e7d2 <CstBackDrop>,d0
    3d20:	|     ,-- bne.s 3d36 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3d22:	|     |   pea 19469 <PutChar+0x449>
    3d28:	|     |   jsr 1857e <KPrintF>
    3d2e:	|     |   addq.l #4,sp
    return FALSE;  
    3d30:	|     |   clr.w d0
    3d32:	+-----|-- bra.w 3fca <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3d36:	|     '-> pea 194a1 <PutChar+0x481>
    3d3c:	|         jsr 1857e <KPrintF>
    3d42:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3d44:	|         move.l 1e7d2 <CstBackDrop>,68(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3d4c:	|         clr.l 64(sp)
    3d50:	|     ,-- bra.s 3d66 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3d52:	|  ,--|-> move.l 68(sp),d0
    3d56:	|  |  |   move.l d0,d1
    3d58:	|  |  |   addq.l #4,d1
    3d5a:	|  |  |   move.l d1,68(sp)
    3d5e:	|  |  |   movea.l d0,a0
    3d60:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3d62:	|  |  |   addq.l #1,64(sp)
    3d66:	|  |  '-> move.w 1e7ce <CstBackdropSize>,d0
    3d6c:	|  |      lsr.w #2,d0
    3d6e:	|  |      move.w d0,d0
    3d70:	|  |      andi.l #65535,d0
    3d76:	|  |      cmp.l 64(sp),d0
    3d7a:	|  '----- bgt.s 3d52 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3d7c:	|         move.w 1e7ce <CstBackdropSize>,d0
    3d82:	|         move.w d0,d0
    3d84:	|         andi.l #65535,d0
    3d8a:	|         move.l 76(sp),d1
    3d8e:	|         add.l d1,d1
    3d90:	|         add.l d1,d0
    3d92:	|         move.l d0,48(sp)
    3d96:	|         moveq #2,d0
    3d98:	|         move.l d0,44(sp)
    3d9c:	|         move.l 1e8c0 <SysBase>,d0
    3da2:	|         movea.l d0,a6
    3da4:	|         move.l 48(sp),d0
    3da8:	|         move.l 44(sp),d1
    3dac:	|         jsr -684(a6)
    3db0:	|         move.l d0,40(sp)
    3db4:	|         move.l 40(sp),d0
    3db8:	|         move.l d0,1e7e2 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3dbe:	|         move.l 1e7e2 <CstDrawBuffer>,d0
    3dc4:	|     ,-- bne.s 3dda <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3dc6:	|     |   pea 194c7 <PutChar+0x4a7>
    3dcc:	|     |   jsr 1857e <KPrintF>
    3dd2:	|     |   addq.l #4,sp
    return FALSE;  
    3dd4:	|     |   clr.w d0
    3dd6:	+-----|-- bra.w 3fca <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3dda:	|     '-> pea 19501 <PutChar+0x4e1>
    3de0:	|         jsr 1857e <KPrintF>
    3de6:	|         addq.l #4,sp
    
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3de8:	|         move.w 1e7ce <CstBackdropSize>,d0
    3dee:	|         move.w d0,d0
    3df0:	|         andi.l #65535,d0
    3df6:	|         move.l 76(sp),d1
    3dfa:	|         add.l d1,d1
    3dfc:	|         add.l d1,d0
    3dfe:	|         move.l d0,36(sp)
    3e02:	|         moveq #2,d1
    3e04:	|         move.l d1,32(sp)
    3e08:	|         move.l 1e8c0 <SysBase>,d0
    3e0e:	|         movea.l d0,a6
    3e10:	|         move.l 36(sp),d0
    3e14:	|         move.l 32(sp),d1
    3e18:	|         jsr -684(a6)
    3e1c:	|         move.l d0,28(sp)
    3e20:	|         move.l 28(sp),d0
    3e24:	|         move.l d0,1e7de <CstViewBuffer>
  if( !CstViewBuffer)
    3e2a:	|         move.l 1e7de <CstViewBuffer>,d0
    3e30:	|     ,-- bne.s 3e46 <CstReserveBackdrop+0x1f6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3e32:	|     |   pea 19529 <PutChar+0x509>
    3e38:	|     |   jsr 1857e <KPrintF>
    3e3e:	|     |   addq.l #4,sp
    return FALSE;  
    3e40:	|     |   clr.w d0
    3e42:	+-----|-- bra.w 3fca <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3e46:	|     '-> pea 19563 <PutChar+0x543>
    3e4c:	|         jsr 1857e <KPrintF>
    3e52:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3e54:	|         move.l 1e7e2 <CstDrawBuffer>,d1
    3e5a:	|         move.l 76(sp),d0
    3e5e:	|     ,-- bpl.s 3e62 <CstReserveBackdrop+0x212>
    3e60:	|     |   addq.l #3,d0
    3e62:	|     '-> asr.l #2,d0
    3e64:	|         add.l d0,d0
    3e66:	|         add.l d0,d0
    3e68:	|         add.l d1,d0
    3e6a:	|         move.l d0,1e7e2 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3e70:	|         move.l 1e7de <CstViewBuffer>,d1
    3e76:	|         move.l 76(sp),d0
    3e7a:	|     ,-- bpl.s 3e7e <CstReserveBackdrop+0x22e>
    3e7c:	|     |   addq.l #3,d0
    3e7e:	|     '-> asr.l #2,d0
    3e80:	|         add.l d0,d0
    3e82:	|         add.l d0,d0
    3e84:	|         add.l d1,d0
    3e86:	|         move.l d0,1e7de <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3e8c:	|         move.l #5200,24(sp)
    3e94:	|         moveq #2,d0
    3e96:	|         move.l d0,20(sp)
    3e9a:	|         move.l 1e8c0 <SysBase>,d0
    3ea0:	|         movea.l d0,a6
    3ea2:	|         move.l 24(sp),d0
    3ea6:	|         move.l 20(sp),d1
    3eaa:	|         jsr -684(a6)
    3eae:	|         move.l d0,16(sp)
    3eb2:	|         move.l 16(sp),d0
    3eb6:	|         move.l d0,1e7fa <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3ebc:	|         move.l #5600,12(sp)
    3ec4:	|         moveq #2,d1
    3ec6:	|         move.l d1,8(sp)
    3eca:	|         move.l 1e8c0 <SysBase>,d0
    3ed0:	|         movea.l d0,a6
    3ed2:	|         move.l 12(sp),d0
    3ed6:	|         move.l 8(sp),d1
    3eda:	|         jsr -684(a6)
    3ede:	|         move.l d0,4(sp)
    3ee2:	|         move.l 4(sp),d0
    3ee6:	|         move.l d0,1e7fe <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3eec:	|         move.l 1e7d2 <CstBackDrop>,d0
    3ef2:	|         clr.l -(sp)
    3ef4:	|         pea 5 <_start+0x5>
    3ef8:	|         pea 100 <copyString+0x48>
    3efc:	|         pea 140 <decodeFilename+0x28>
    3f00:	|         pea 1958b <PutChar+0x56b>
    3f06:	|         move.l d0,-(sp)
    3f08:	|         jsr 18666 <debug_register_bitmap>
    3f0e:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3f12:	|         move.l 80(sp),d0
    3f16:	|         movea.w d0,a1
    3f18:	|         move.l 76(sp),d0
    3f1c:	|         lsl.w #3,d0
    3f1e:	|         movea.w d0,a0
    3f20:	|         move.l 1e7e2 <CstDrawBuffer>,d0
    3f26:	|         clr.l -(sp)
    3f28:	|         pea 5 <_start+0x5>
    3f2c:	|         move.l a1,-(sp)
    3f2e:	|         move.l a0,-(sp)
    3f30:	|         pea 1959b <PutChar+0x57b>
    3f36:	|         move.l d0,-(sp)
    3f38:	|         jsr 18666 <debug_register_bitmap>
    3f3e:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3f42:	|         move.l 80(sp),d0
    3f46:	|         movea.w d0,a1
    3f48:	|         move.l 76(sp),d0
    3f4c:	|         lsl.w #3,d0
    3f4e:	|         movea.w d0,a0
    3f50:	|         move.l 1e7de <CstViewBuffer>,d0
    3f56:	|         clr.l -(sp)
    3f58:	|         pea 5 <_start+0x5>
    3f5c:	|         move.l a1,-(sp)
    3f5e:	|         move.l a0,-(sp)
    3f60:	|         pea 195aa <PutChar+0x58a>
    3f66:	|         move.l d0,-(sp)
    3f68:	|         jsr 18666 <debug_register_bitmap>
    3f6e:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3f72:	|         move.l 1e7da <CstCopperList>,d0
    3f78:	|     ,-- beq.s 3f8a <CstReserveBackdrop+0x33a>
    3f7a:	|     |   move.l 1e7e2 <CstDrawBuffer>,d0
    3f80:	|     +-- beq.s 3f8a <CstReserveBackdrop+0x33a>
    3f82:	|     |   move.l 1e7de <CstViewBuffer>,d0
    3f88:	|  ,--|-- bne.s 3f9c <CstReserveBackdrop+0x34c>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3f8a:	|  |  '-> pea 195b9 <PutChar+0x599>
    3f90:	|  |      jsr 1857e <KPrintF>
    3f96:	|  |      addq.l #4,sp
    return FALSE;
    3f98:	|  |      clr.w d0
    3f9a:	+--|----- bra.s 3fca <CstReserveBackdrop+0x37a>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3f9c:	|  '----> pea 195e6 <PutChar+0x5c6>
    3fa2:	|         jsr 1857e <KPrintF>
    3fa8:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3faa:	|         move.l 1e7da <CstCopperList>,d0
    3fb0:	|         move.l d0,-(sp)
    3fb2:	|         jsr 3b04 <CstSetCl>
    3fb8:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3fba:	|         pea 1960d <PutChar+0x5ed>
    3fc0:	|         jsr 1857e <KPrintF>
    3fc6:	|         addq.l #4,sp
  return TRUE;
    3fc8:	|         moveq #1,d0

}
    3fca:	'-------> movea.l (sp)+,a6
    3fcc:	          lea 68(sp),sp
    3fd0:	          rts

00003fd2 <CstUnfreeze>:

void CstUnfreeze() {
    3fd2:	       lea -52(sp),sp
    3fd6:	       move.l a6,-(sp)
    3fd8:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3fda:	       pea 19630 <PutChar+0x610>
    3fe0:	       jsr 1857e <KPrintF>
    3fe6:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3fe8:	       move.l 1e806 <winWidth>,d0
    3fee:	       lsr.l #3,d0
    3ff0:	       move.l d0,d1
    3ff2:	       move.l 1e80a <winHeight>,d0
    3ff8:	       move.l d0,d0
    3ffa:	       muls.w d0,d1
    3ffc:	       move.w d1,d0
    3ffe:	       add.w d0,d0
    4000:	       add.w d0,d0
    4002:	       move.w d0,d2
    4004:	       add.w d1,d2
    4006:	       move.w d2,46(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    400a:	       move.l #14675968,42(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    4012:	       move.l 1e80a <winHeight>,d0
    4018:	       move.l d0,d0
    401a:	       movea.w d0,a1
    401c:	       move.l 1e806 <winWidth>,d0
    4022:	       move.l d0,d0
    4024:	       movea.w d0,a0
    4026:	       move.l 1e7d6 <CstBackDropBackup>,d0
    402c:	       clr.l -(sp)
    402e:	       pea 5 <_start+0x5>
    4032:	       move.l a1,-(sp)
    4034:	       move.l a0,-(sp)
    4036:	       pea 1923f <PutChar+0x21f>
    403c:	       move.l d0,-(sp)
    403e:	       jsr 18666 <debug_register_bitmap>
    4044:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    4048:	       move.l 1e7d6 <CstBackDropBackup>,56(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    4050:	       move.l 1e7d2 <CstBackDrop>,52(sp)
  for(int i=0;i<size/4;i++) 
    4058:	       clr.l 48(sp)
    405c:	   ,-- bra.s 4082 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    405e:	,--|-> move.l 56(sp),d1
    4062:	|  |   move.l d1,d0
    4064:	|  |   addq.l #4,d0
    4066:	|  |   move.l d0,56(sp)
    406a:	|  |   move.l 52(sp),d0
    406e:	|  |   move.l d0,d2
    4070:	|  |   addq.l #4,d2
    4072:	|  |   move.l d2,52(sp)
    4076:	|  |   movea.l d1,a0
    4078:	|  |   move.l (a0),d1
    407a:	|  |   movea.l d0,a0
    407c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    407e:	|  |   addq.l #1,48(sp)
    4082:	|  '-> move.w 46(sp),d0
    4086:	|      lsr.w #2,d0
    4088:	|      move.w d0,d0
    408a:	|      andi.l #65535,d0
    4090:	|      cmp.l 48(sp),d0
    4094:	'----- bgt.s 405e <CstUnfreeze+0x8c>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    4096:	       move.l 1e7ea <CstCleanupQueueDrawBuffer>,38(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    409e:	       moveq #20,d0
    40a0:	       move.l d0,34(sp)
    40a4:	       clr.l 30(sp)
    40a8:	       move.l 1e8c0 <SysBase>,d0
    40ae:	       movea.l d0,a6
    40b0:	       move.l 34(sp),d0
    40b4:	       move.l 30(sp),d1
    40b8:	       jsr -684(a6)
    40bc:	       move.l d0,26(sp)
    40c0:	       move.l 26(sp),d0
    40c4:	       move.l d0,1e7ea <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    40ca:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    40d0:	       move.l 38(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    40d6:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    40dc:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    40de:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    40e4:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    40e8:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    40ee:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    40f2:	       move.l 1e806 <winWidth>,d0
    40f8:	       lsr.l #4,d0
    40fa:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    4100:	       move.l d0,d0
    4102:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    4106:	       move.l 1e80a <winHeight>,d0
    410c:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    4112:	       move.l d0,d0
    4114:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    4118:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    411e:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    4122:	       movea.l 1e7ea <CstCleanupQueueDrawBuffer>,a0
    4128:	       clr.w 14(a0)
  next = CstCleanupQueueViewBuffer;
    412c:	       move.l 1e7e6 <CstCleanupQueueViewBuffer>,38(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    4134:	       moveq #20,d2
    4136:	       move.l d2,22(sp)
    413a:	       clr.l 18(sp)
    413e:	       move.l 1e8c0 <SysBase>,d0
    4144:	       movea.l d0,a6
    4146:	       move.l 22(sp),d0
    414a:	       move.l 18(sp),d1
    414e:	       jsr -684(a6)
    4152:	       move.l d0,14(sp)
    4156:	       move.l 14(sp),d0
    415a:	       move.l d0,1e7e6 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    4160:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    4166:	       move.l 38(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    416c:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    4172:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    4174:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    417a:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    417e:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    4184:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    4188:	       move.l 1e806 <winWidth>,d0
    418e:	       lsr.l #4,d0
    4190:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    4196:	       move.l d0,d0
    4198:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    419c:	       move.l 1e80a <winHeight>,d0
    41a2:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    41a8:	       move.l d0,d0
    41aa:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    41ae:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    41b4:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0;  
    41b8:	       movea.l 1e7e6 <CstCleanupQueueViewBuffer>,a0
    41be:	       clr.w 14(a0)
  
  if( CstBackDropBackup) {
    41c2:	       move.l 1e7d6 <CstBackDropBackup>,d0
    41c8:	   ,-- beq.s 41f0 <CstUnfreeze+0x21e>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    41ca:	   |   pea 1965b <PutChar+0x63b>
    41d0:	   |   jsr 1857e <KPrintF>
    41d6:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    41d8:	   |   move.l 1e7d6 <CstBackDropBackup>,10(sp)
    41e0:	   |   move.l 1e8c0 <SysBase>,d0
    41e6:	   |   movea.l d0,a6
    41e8:	   |   movea.l 10(sp),a1
    41ec:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    41f0:	   '-> pea 1967f <PutChar+0x65f>
    41f6:	       jsr 1857e <KPrintF>
    41fc:	       addq.l #4,sp

}
    41fe:	       nop
    4200:	       move.l (sp)+,d2
    4202:	       movea.l (sp)+,a6
    4204:	       lea 52(sp),sp
    4208:	       rts

0000420a <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    420a:	       lea -28(sp),sp
    420e:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    4212:	       move.l 52(sp),-(sp)
    4216:	       jsr 16b88 <stringWidth>
    421c:	       addq.l #4,sp
    421e:	       asr.l #1,d0
    4220:	       move.l d0,-(sp)
    4222:	       jsr 189b0 <__floatsisf>
    4228:	       addq.l #4,sp
    422a:	       move.l d0,d1
    422c:	       move.l 1e246 <cameraZoom>,d0
    4232:	       move.l d0,-(sp)
    4234:	       move.l d1,-(sp)
    4236:	       jsr 18866 <__divsf3>
    423c:	       addq.l #8,sp
    423e:	       move.l d0,-(sp)
    4240:	       jsr 18948 <__fixsfsi>
    4246:	       addq.l #4,sp
    4248:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    424c:	       move.l 56(sp),d0
    4250:	       sub.l 44(sp),d0
    4254:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4258:	       move.l 56(sp),d0
    425c:	       add.l 44(sp),d0
    4260:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    4264:	       moveq #12,d0
    4266:	       move.l d0,32(sp)
    426a:	       clr.l 28(sp)
    426e:	       move.l 1e8c0 <SysBase>,d0
    4274:	       movea.l d0,a6
    4276:	       move.l 32(sp),d0
    427a:	       move.l 28(sp),d1
    427e:	       jsr -684(a6)
    4282:	       move.l d0,24(sp)
    4286:	       move.l 24(sp),d0
    428a:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    428e:	       movea.l 1e802 <speech>,a0
    4294:	       move.l 4(a0),d0
    4298:	       movea.l 20(sp),a0
    429c:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    42a0:	       move.l 52(sp),-(sp)
    42a4:	       jsr b8 <copyString>
    42aa:	       addq.l #4,sp
    42ac:	       movea.l 20(sp),a0
    42b0:	       move.l d0,(a0)
	newLine -> x = xx1;
    42b2:	       movea.l 20(sp),a0
    42b6:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    42bc:	       movea.l 1e802 <speech>,a0
    42c2:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    42c8:	       moveq #4,d0
    42ca:	       cmp.l 40(sp),d0
    42ce:	   ,-- blt.s 42f0 <addSpeechLine+0xe6>
    42d0:	   |   movea.l 60(sp),a0
    42d4:	   |   move.l (a0),d1
    42d6:	   |   moveq #5,d0
    42d8:	   |   sub.l 40(sp),d0
    42dc:	   |   cmp.l d1,d0
    42de:	   +-- ble.s 42f0 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    42e0:	   |   moveq #5,d0
    42e2:	   |   sub.l 40(sp),d0
    42e6:	   |   movea.l 60(sp),a0
    42ea:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    42ec:	,--|-- bra.w 441c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    42f0:	|  '-> move.l 36(sp),-(sp)
    42f4:	|      jsr 189b0 <__floatsisf>
    42fa:	|      addq.l #4,sp
    42fc:	|      move.l d0,d2
    42fe:	|      move.l 1e806 <winWidth>,d0
    4304:	|      move.l d0,-(sp)
    4306:	|      jsr 189d8 <__floatunsisf>
    430c:	|      addq.l #4,sp
    430e:	|      move.l d0,d1
    4310:	|      move.l 1e246 <cameraZoom>,d0
    4316:	|      move.l d0,-(sp)
    4318:	|      move.l d1,-(sp)
    431a:	|      jsr 18866 <__divsf3>
    4320:	|      addq.l #8,sp
    4322:	|      move.l #1084227584,-(sp)
    4328:	|      move.l d0,-(sp)
    432a:	|      jsr 18ca4 <__subsf3>
    4330:	|      addq.l #8,sp
    4332:	|      move.l d0,-(sp)
    4334:	|      move.l d2,-(sp)
    4336:	|      jsr 18a98 <__gesf2>
    433c:	|      addq.l #8,sp
    433e:	|      tst.l d0
    4340:	|  ,-- bge.s 4346 <addSpeechLine+0x13c>
}
    4342:	+--|-- bra.w 441c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4346:	|  '-> movea.l 60(sp),a0
    434a:	|      move.l (a0),d0
    434c:	|      move.l d0,-(sp)
    434e:	|      jsr 189b0 <__floatsisf>
    4354:	|      addq.l #4,sp
    4356:	|      move.l d0,-(sp)
    4358:	|      jsr 188d2 <__extendsfdf2>
    435e:	|      addq.l #4,sp
    4360:	|      move.l d0,d4
    4362:	|      move.l d1,d5
    4364:	|      move.l 1e806 <winWidth>,d0
    436a:	|      move.l d0,-(sp)
    436c:	|      jsr 189d8 <__floatunsisf>
    4372:	|      addq.l #4,sp
    4374:	|      move.l d0,d1
    4376:	|      move.l 1e246 <cameraZoom>,d0
    437c:	|      move.l d0,-(sp)
    437e:	|      move.l d1,-(sp)
    4380:	|      jsr 18866 <__divsf3>
    4386:	|      addq.l #8,sp
    4388:	|      move.l d0,-(sp)
    438a:	|      jsr 188d2 <__extendsfdf2>
    4390:	|      addq.l #4,sp
    4392:	|      clr.l -(sp)
    4394:	|      move.l #1075052544,-(sp)
    439a:	|      move.l d1,-(sp)
    439c:	|      move.l d0,-(sp)
    439e:	|      jsr 18c42 <__subdf3>
    43a4:	|      lea 16(sp),sp
    43a8:	|      move.l d0,d2
    43aa:	|      move.l d1,d3
    43ac:	|      move.l 36(sp),-(sp)
    43b0:	|      jsr 18970 <__floatsidf>
    43b6:	|      addq.l #4,sp
    43b8:	|      move.l d1,-(sp)
    43ba:	|      move.l d0,-(sp)
    43bc:	|      move.l d3,-(sp)
    43be:	|      move.l d2,-(sp)
    43c0:	|      jsr 18c42 <__subdf3>
    43c6:	|      lea 16(sp),sp
    43ca:	|      move.l d1,-(sp)
    43cc:	|      move.l d0,-(sp)
    43ce:	|      move.l d5,-(sp)
    43d0:	|      move.l d4,-(sp)
    43d2:	|      jsr 18ace <__gtdf2>
    43d8:	|      lea 16(sp),sp
    43dc:	|      tst.l d0
    43de:	|  ,-- bgt.s 43e2 <addSpeechLine+0x1d8>
}
    43e0:	+--|-- bra.s 441c <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    43e2:	|  '-> move.l 1e806 <winWidth>,d0
    43e8:	|      move.l d0,-(sp)
    43ea:	|      jsr 189d8 <__floatunsisf>
    43f0:	|      addq.l #4,sp
    43f2:	|      move.l d0,d1
    43f4:	|      move.l 1e246 <cameraZoom>,d0
    43fa:	|      move.l d0,-(sp)
    43fc:	|      move.l d1,-(sp)
    43fe:	|      jsr 18866 <__divsf3>
    4404:	|      addq.l #8,sp
    4406:	|      move.l d0,-(sp)
    4408:	|      jsr 18948 <__fixsfsi>
    440e:	|      addq.l #4,sp
    4410:	|      subq.l #5,d0
    4412:	|      sub.l 36(sp),d0
    4416:	|      movea.l 60(sp),a0
    441a:	|      move.l d0,(a0)
}
    441c:	'----> nop
    441e:	       movem.l (sp)+,d2-d5/a6
    4422:	       lea 28(sp),sp
    4426:	       rts

00004428 <initSpeech>:


void initSpeech () {
    4428:	       lea -12(sp),sp
    442c:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    442e:	       moveq #20,d0
    4430:	       move.l d0,12(sp)
    4434:	       clr.l 8(sp)
    4438:	       move.l 1e8c0 <SysBase>,d0
    443e:	       movea.l d0,a6
    4440:	       move.l 12(sp),d0
    4444:	       move.l 8(sp),d1
    4448:	       jsr -684(a6)
    444c:	       move.l d0,4(sp)
    4450:	       move.l 4(sp),d0
    4454:	       move.l d0,1e802 <speech>
	if (speech) {
    445a:	       move.l 1e802 <speech>,d0
    4460:	,----- beq.s 448c <initSpeech+0x64>
		speech -> currentTalker = NULL;
    4462:	|      movea.l 1e802 <speech>,a0
    4468:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    446a:	|      movea.l 1e802 <speech>,a0
    4470:	|      clr.l 4(a0)
		speech -> speechY = 0;
    4474:	|      movea.l 1e802 <speech>,a0
    447a:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    447e:	|      movea.l 1e802 <speech>,a0
    4484:	|      moveq #-1,d0
    4486:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    448a:	|  ,-- bra.s 449a <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    448c:	'--|-> pea 196be <PutChar+0x69e>
    4492:	   |   jsr 1857e <KPrintF>
    4498:	   |   addq.l #4,sp
}
    449a:	   '-> nop
    449c:	       movea.l (sp)+,a6
    449e:	       lea 12(sp),sp
    44a2:	       rts

000044a4 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    44a4:	       movea.l 1e802 <speech>,a0
    44aa:	       move.l 4(a0),d0
    44ae:	,----- beq.s 44bc <isThereAnySpeechGoingOn+0x18>
    44b0:	|      movea.l 1e802 <speech>,a0
    44b6:	|      move.l 16(a0),d0
    44ba:	|  ,-- bra.s 44be <isThereAnySpeechGoingOn+0x1a>
    44bc:	'--|-> moveq #-1,d0
}
    44be:	   '-> rts

000044c0 <killAllSpeech>:

void killAllSpeech () {
    44c0:	       lea -12(sp),sp
    44c4:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    44c6:	       movea.l 1e802 <speech>,a0
    44cc:	       move.l 12(a0),d0
    44d0:	       moveq #-1,d1
    44d2:	       cmp.l d0,d1
    44d4:	   ,-- beq.s 44e2 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    44d6:	   |   movea.l 1e802 <speech>,a0
    44dc:	   |   moveq #-1,d0
    44de:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    44e2:	   '-> movea.l 1e802 <speech>,a0
    44e8:	       move.l (a0),d0
    44ea:	,----- beq.w 4576 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    44ee:	|      movea.l 1e802 <speech>,a0
    44f4:	|      move.l (a0),d1
    44f6:	|      lea -132(sp),sp
    44fa:	|      move.l sp,d0
    44fc:	|      movea.w #132,a0
    4500:	|      move.l a0,-(sp)
    4502:	|      move.l d1,-(sp)
    4504:	|      move.l d0,-(sp)
    4506:	|      jsr 18532 <memcpy>
    450c:	|      lea 12(sp),sp
    4510:	|      jsr b558 <makeSilent>
    4516:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    451a:	|      movea.l 1e802 <speech>,a0
    4520:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    4522:	+----- bra.s 4576 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    4524:	|  ,-> movea.l 1e802 <speech>,a0
    452a:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    4530:	|  |   movea.l 1e802 <speech>,a0
    4536:	|  |   movea.l 4(a0),a1
    453a:	|  |   movea.l 1e802 <speech>,a0
    4540:	|  |   move.l 4(a1),d0
    4544:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4548:	|  |   movea.l 12(sp),a0
    454c:	|  |   move.l (a0),8(sp)
    4550:	|  |   move.l 1e8c0 <SysBase>,d0
    4556:	|  |   movea.l d0,a6
    4558:	|  |   movea.l 8(sp),a1
    455c:	|  |   jsr -690(a6)
		FreeVec(killMe);
    4560:	|  |   move.l 12(sp),4(sp)
    4566:	|  |   move.l 1e8c0 <SysBase>,d0
    456c:	|  |   movea.l d0,a6
    456e:	|  |   movea.l 4(sp),a1
    4572:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4576:	'--|-> movea.l 1e802 <speech>,a0
    457c:	   |   move.l 4(a0),d0
    4580:	   '-- bne.s 4524 <killAllSpeech+0x64>
	}
}
    4582:	       nop
    4584:	       nop
    4586:	       movea.l (sp)+,a6
    4588:	       lea 12(sp),sp
    458c:	       rts

0000458e <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    458e:	pea 2 <_start+0x2>
    4592:	move.l 8(sp),-(sp)
    4596:	jsr 46ee <setFrames>
    459c:	addq.l #8,sp
}
    459e:	nop
    45a0:	rts

000045a2 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    45a2:	       lea -52(sp),sp
    45a6:	       move.l a6,-(sp)
    45a8:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    45aa:	       movea.l 64(sp),a0
    45ae:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    45b4:	       move.l 1e21e <speechSpeed>,d0
    45ba:	       move.l 68(sp),-(sp)
    45be:	       move.l d0,-(sp)
    45c0:	       jsr a46 <putFloat>
    45c6:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    45c8:	       movea.l 64(sp),a0
    45cc:	       move.l 8(a0),d0
    45d0:	       move.l 68(sp),-(sp)
    45d4:	       move.l d0,-(sp)
    45d6:	       jsr 8d0 <put2bytes>
    45dc:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    45de:	       movea.l 64(sp),a0
    45e2:	       move.l 16(a0),d0
    45e6:	       move.l 68(sp),-(sp)
    45ea:	       move.l d0,-(sp)
    45ec:	       jsr 8d0 <put2bytes>
    45f2:	       addq.l #8,sp
		if (sS -> currentTalker) {
    45f4:	       movea.l 64(sp),a0
    45f8:	       move.l (a0),d0
    45fa:	   ,-- beq.s 463e <saveSpeech+0x9c>
			FPutC (fp, 1);
    45fc:	   |   move.l 68(sp),40(sp)
    4602:	   |   moveq #1,d0
    4604:	   |   move.l d0,36(sp)
    4608:	   |   move.l 1e8c8 <DOSBase>,d0
    460e:	   |   movea.l d0,a6
    4610:	   |   move.l 40(sp),d1
    4614:	   |   move.l 36(sp),d2
    4618:	   |   jsr -312(a6)
    461c:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4620:	   |   movea.l 64(sp),a0
    4624:	   |   movea.l (a0),a0
    4626:	   |   movea.l 114(a0),a0
    462a:	   |   move.l 4(a0),d0
    462e:	   |   move.l 68(sp),-(sp)
    4632:	   |   move.l d0,-(sp)
    4634:	   |   jsr 8d0 <put2bytes>
    463a:	   |   addq.l #8,sp
    463c:	,--|-- bra.s 46ba <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    463e:	|  '-> move.l 68(sp),52(sp)
    4644:	|      clr.l 48(sp)
    4648:	|      move.l 1e8c8 <DOSBase>,d0
    464e:	|      movea.l d0,a6
    4650:	|      move.l 52(sp),d1
    4654:	|      move.l 48(sp),d2
    4658:	|      jsr -312(a6)
    465c:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4660:	+----- bra.s 46ba <saveSpeech+0x118>
			FPutC (fp, 1);
    4662:	|  ,-> move.l 68(sp),16(sp)
    4668:	|  |   moveq #1,d0
    466a:	|  |   move.l d0,12(sp)
    466e:	|  |   move.l 1e8c8 <DOSBase>,d0
    4674:	|  |   movea.l d0,a6
    4676:	|  |   move.l 16(sp),d1
    467a:	|  |   move.l 12(sp),d2
    467e:	|  |   jsr -312(a6)
    4682:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4686:	|  |   movea.l 56(sp),a0
    468a:	|  |   move.l (a0),d0
    468c:	|  |   move.l 68(sp),-(sp)
    4690:	|  |   move.l d0,-(sp)
    4692:	|  |   jsr bd8 <writeString>
    4698:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    469a:	|  |   movea.l 56(sp),a0
    469e:	|  |   move.l 8(a0),d0
    46a2:	|  |   move.l 68(sp),-(sp)
    46a6:	|  |   move.l d0,-(sp)
    46a8:	|  |   jsr 8d0 <put2bytes>
    46ae:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    46b0:	|  |   movea.l 56(sp),a0
    46b4:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    46ba:	'--|-> tst.l 56(sp)
    46be:	   '-- bne.s 4662 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    46c0:	       move.l 68(sp),28(sp)
    46c6:	       clr.l 24(sp)
    46ca:	       move.l 1e8c8 <DOSBase>,d0
    46d0:	       movea.l d0,a6
    46d2:	       move.l 28(sp),d1
    46d6:	       move.l 24(sp),d2
    46da:	       jsr -312(a6)
    46de:	       move.l d0,20(sp)
}
    46e2:	       nop
    46e4:	       move.l (sp)+,d2
    46e6:	       movea.l (sp)+,a6
    46e8:	       lea 52(sp),sp
    46ec:	       rts

000046ee <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    46ee:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    46f0:	movea.l 8(sp),a0
    46f4:	movea.l 80(a0),a0
    46f8:	move.l (a0),d2
    46fa:	movea.l 8(sp),a0
    46fe:	movea.l 80(a0),a0
    4702:	move.l 4(a0),d0
    4706:	move.l 12(sp),-(sp)
    470a:	move.l d0,-(sp)
    470c:	jsr 18f0a <__mulsi3>
    4712:	addq.l #8,sp
    4714:	move.l d0,d1
    4716:	movea.l 8(sp),a0
    471a:	move.l 106(a0),d0
    471e:	add.l d1,d0
    4720:	add.l d0,d0
    4722:	add.l d0,d0
    4724:	movea.l d2,a0
    4726:	adda.l d0,a0
    4728:	move.l (a0),d0
    472a:	movea.l 8(sp),a0
    472e:	move.l d0,72(a0)
}
    4732:	nop
    4734:	move.l (sp)+,d2
    4736:	rts

00004738 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4738:	       lea -20(sp),sp
    473c:	       move.l d2,-(sp)
    473e:	       move.l 40(sp),d0
    4742:	       move.w d0,d0
    4744:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4748:	       movea.l 1e802 <speech>,a0
    474e:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    4754:	       move.l 32(sp),-(sp)
    4758:	       jsr b018 <findPerson>
    475e:	       addq.l #4,sp
    4760:	       move.l d0,16(sp)
    if (thisPerson) {
    4764:	   ,-- beq.s 478a <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    4766:	   |   movea.w 6(sp),a0
    476a:	   |   move.l a0,-(sp)
    476c:	   |   move.l 40(sp),-(sp)
    4770:	   |   move.l 24(sp),-(sp)
    4774:	   |   move.l 40(sp),-(sp)
    4778:	   |   jsr 4850 <wrapSpeechPerson>
    477e:	   |   lea 16(sp),sp
    4782:	   |   move.l d0,20(sp)
    4786:	,--|-- bra.w 4844 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    478a:	|  '-> move.l 32(sp),-(sp)
    478e:	|      jsr 16d60 <getRegionForObject>
    4794:	|      addq.l #4,sp
    4796:	|      move.l d0,12(sp)
        if (thisRegion) {
    479a:	|  ,-- beq.s 4806 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    479c:	|  |   movea.l 12(sp),a0
    47a0:	|  |   movea.l 28(a0),a0
    47a4:	|  |   move.l 28(a0),d0
    47a8:	|  |   movea.l 12(sp),a0
    47ac:	|  |   movea.l 4(a0),a1
    47b0:	|  |   movea.l 12(sp),a0
    47b4:	|  |   movea.l 28(a0),a0
    47b8:	|  |   move.l 20(a0),d1
    47bc:	|  |   movea.l a1,a0
    47be:	|  |   suba.l d1,a0
    47c0:	|  |   move.l 1e97e <cameraY>,d1
    47c6:	|  |   movea.l a0,a1
    47c8:	|  |   suba.l d1,a1
    47ca:	|  |   movea.l 12(sp),a0
    47ce:	|  |   move.l (a0),d2
    47d0:	|  |   movea.l 12(sp),a0
    47d4:	|  |   move.l 8(a0),d1
    47d8:	|  |   add.l d2,d1
    47da:	|  |   move.l d1,d2
    47dc:	|  |   asr.l #1,d2
    47de:	|  |   move.l 1e97a <cameraX>,d1
    47e4:	|  |   movea.l d2,a0
    47e6:	|  |   suba.l d1,a0
    47e8:	|  |   move.l 36(sp),-(sp)
    47ec:	|  |   move.l d0,-(sp)
    47ee:	|  |   move.l a1,-(sp)
    47f0:	|  |   move.l a0,-(sp)
    47f2:	|  |   move.l 44(sp),-(sp)
    47f6:	|  |   jsr 496e <wrapSpeechXY>
    47fc:	|  |   lea 20(sp),sp
    4800:	|  |   move.l d0,20(sp)
    4804:	+--|-- bra.s 4844 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    4806:	|  '-> move.l 32(sp),-(sp)
    480a:	|      jsr df86 <findObjectType>
    4810:	|      addq.l #4,sp
    4812:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    4816:	|      movea.l 8(sp),a0
    481a:	|      move.l 28(a0),d1
    481e:	|      move.l 1e806 <winWidth>,d0
    4824:	|      lsr.l #1,d0
    4826:	|      move.l 36(sp),-(sp)
    482a:	|      move.l d1,-(sp)
    482c:	|      pea a <_start+0xa>
    4830:	|      move.l d0,-(sp)
    4832:	|      move.l 44(sp),-(sp)
    4836:	|      jsr 496e <wrapSpeechXY>
    483c:	|      lea 20(sp),sp
    4840:	|      move.l d0,20(sp)
        }
    }
    return i;
    4844:	'----> move.l 20(sp),d0
}
    4848:	       move.l (sp)+,d2
    484a:	       lea 20(sp),sp
    484e:	       rts

00004850 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    4850:	    subq.l #8,sp
    4852:	    movem.l d2-d4,-(sp)
    4856:	    move.l 36(sp),d0
    485a:	    move.w d0,d0
    485c:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    4860:	    movea.l 28(sp),a0
    4864:	    movea.l 114(a0),a0
    4868:	    move.l 28(a0),d2
    486c:	    movea.l 28(sp),a0
    4870:	    move.l 4(a0),d3
    4874:	    move.l 1e97e <cameraY>,d0
    487a:	    move.l d0,-(sp)
    487c:	    jsr 189b0 <__floatsisf>
    4882:	    addq.l #4,sp
    4884:	    move.l d0,-(sp)
    4886:	    move.l d3,-(sp)
    4888:	    jsr 18ca4 <__subsf3>
    488e:	    addq.l #8,sp
    4890:	    move.l d0,d3
    4892:	    movea.l 28(sp),a0
    4896:	    move.l 32(a0),d4
    489a:	    movea.l 28(sp),a0
    489e:	    move.l 20(a0),d1
    48a2:	    movea.l 28(sp),a0
    48a6:	    move.l 24(a0),d0
    48aa:	    sub.l d0,d1
    48ac:	    move.l d1,-(sp)
    48ae:	    jsr 189b0 <__floatsisf>
    48b4:	    addq.l #4,sp
    48b6:	    move.l d0,-(sp)
    48b8:	    move.l d4,-(sp)
    48ba:	    jsr 18a62 <__mulsf3>
    48c0:	    addq.l #8,sp
    48c2:	    move.l d0,-(sp)
    48c4:	    move.l d3,-(sp)
    48c6:	    jsr 18ca4 <__subsf3>
    48cc:	    addq.l #8,sp
    48ce:	    move.l d0,d3
    48d0:	    movea.l 28(sp),a0
    48d4:	    movea.l 114(a0),a0
    48d8:	    move.l 20(a0),d0
    48dc:	    move.l d0,-(sp)
    48de:	    jsr 189b0 <__floatsisf>
    48e4:	    addq.l #4,sp
    48e6:	    move.l d0,-(sp)
    48e8:	    move.l d3,-(sp)
    48ea:	    jsr 18ca4 <__subsf3>
    48f0:	    addq.l #8,sp
    48f2:	    move.l d0,-(sp)
    48f4:	    jsr 18948 <__fixsfsi>
    48fa:	    addq.l #4,sp
    48fc:	    move.l d0,d4
    48fe:	    movea.l 28(sp),a0
    4902:	    move.l (a0),d3
    4904:	    move.l 1e97a <cameraX>,d0
    490a:	    move.l d0,-(sp)
    490c:	    jsr 189b0 <__floatsisf>
    4912:	    addq.l #4,sp
    4914:	    move.l d0,-(sp)
    4916:	    move.l d3,-(sp)
    4918:	    jsr 18ca4 <__subsf3>
    491e:	    addq.l #8,sp
    4920:	    move.l d0,-(sp)
    4922:	    jsr 18948 <__fixsfsi>
    4928:	    addq.l #4,sp
    492a:	    move.l 32(sp),-(sp)
    492e:	    move.l d2,-(sp)
    4930:	    move.l d4,-(sp)
    4932:	    move.l d0,-(sp)
    4934:	    move.l 40(sp),-(sp)
    4938:	    jsr 496e <wrapSpeechXY>
    493e:	    lea 20(sp),sp
    4942:	    move.l d0,16(sp)
	if (animPerson) {
    4946:	    tst.w 14(sp)
    494a:	,-- beq.s 4962 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    494c:	|   move.l 28(sp),-(sp)
    4950:	|   jsr 458e <makeTalker>
    4956:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4958:	|   movea.l 1e802 <speech>,a0
    495e:	|   move.l 28(sp),(a0)
	}
	return i;
    4962:	'-> move.l 16(sp),d0
}
    4966:	    movem.l (sp)+,d2-d4
    496a:	    addq.l #8,sp
    496c:	    rts

0000496e <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    496e:	                   lea -16(sp),sp
    4972:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    4976:	                   clr.l 16(sp)
    killAllSpeech();
    497a:	                   jsr 44c0 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    4980:	                   move.l 36(sp),-(sp)
    4984:	                   jsr 14f8a <strlen>
    498a:	                   addq.l #4,sp
    498c:	                   movea.l d0,a0
    498e:	                   lea 20(a0),a0
    4992:	                   move.l a0,-(sp)
    4994:	                   jsr 189d8 <__floatunsisf>
    499a:	                   addq.l #4,sp
    499c:	                   move.l d0,d1
    499e:	                   move.l 1e21e <speechSpeed>,d0
    49a4:	                   move.l d0,-(sp)
    49a6:	                   move.l d1,-(sp)
    49a8:	                   jsr 18a62 <__mulsf3>
    49ae:	                   addq.l #8,sp
    49b0:	                   move.l d0,-(sp)
    49b2:	                   jsr 18948 <__fixsfsi>
    49b8:	                   addq.l #4,sp
    49ba:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    49be:	               ,-- bgt.s 49c6 <wrapSpeechXY+0x58>
    49c0:	               |   moveq #1,d0
    49c2:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    49c6:	               '-> moveq #-1,d1
    49c8:	                   cmp.l 52(sp),d1
    49cc:	               ,-- beq.s 4a0c <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    49ce:	               |   move.l 1e98e <speechMode>,d0
    49d4:	               +-- ble.s 4a0c <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    49d6:	               |   clr.l -(sp)
    49d8:	               |   move.l 56(sp),-(sp)
    49dc:	               |   jsr dc46 <startSound>
    49e2:	               |   addq.l #8,sp
    49e4:	               |   tst.w d0
    49e6:	               +-- beq.s 4a0c <wrapSpeechXY+0x9e>
                speechTime = -10;
    49e8:	               |   moveq #-10,d0
    49ea:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    49ee:	               |   movea.l 1e802 <speech>,a0
    49f4:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    49fa:	               |   move.l 1e98e <speechMode>,d0
    4a00:	               |   moveq #2,d1
    4a02:	               |   cmp.l d0,d1
    4a04:	               +-- bne.s 4a0c <wrapSpeechXY+0x9e>
    4a06:	               |   moveq #-10,d0
    4a08:	,--------------|-- bra.w 4c92 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    4a0c:	|              '-> movea.l 1e802 <speech>,a0
    4a12:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    4a18:	|     ,----------- bra.w 4acc <wrapSpeechXY+0x15e>
        a = wrap;
    4a1c:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    4a22:	|  |  |        ,-- bra.s 4a32 <wrapSpeechXY+0xc4>
            a--;
    4a24:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4a28:	|  |  |  |     +-- bne.s 4a32 <wrapSpeechXY+0xc4>
                a = wrap;
    4a2a:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4a30:	|  |  |  |  ,--|-- bra.s 4a44 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    4a32:	|  |  |  |  |  '-> move.l 28(sp),d0
    4a36:	|  |  |  |  |      movea.l 36(sp),a0
    4a3a:	|  |  |  |  |      adda.l d0,a0
    4a3c:	|  |  |  |  |      move.b (a0),d0
    4a3e:	|  |  |  |  |      cmpi.b #32,d0
    4a42:	|  |  |  '--|----- bne.s 4a24 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    4a44:	|  |  |     '----> move.l 28(sp),d0
    4a48:	|  |  |            movea.l 36(sp),a0
    4a4c:	|  |  |            adda.l d0,a0
    4a4e:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4a50:	|  |  |            lea 16(sp),a0
    4a54:	|  |  |            move.l a0,-(sp)
    4a56:	|  |  |            move.l 44(sp),-(sp)
    4a5a:	|  |  |            move.l 44(sp),-(sp)
    4a5e:	|  |  |            jsr 420a <addSpeechLine>
    4a64:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4a68:	|  |  |            move.l 28(sp),d0
    4a6c:	|  |  |            movea.l 36(sp),a0
    4a70:	|  |  |            adda.l d0,a0
    4a72:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    4a76:	|  |  |            move.l 28(sp),d0
    4a7a:	|  |  |            addq.l #1,d0
    4a7c:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    4a80:	|  |  |            move.l 44(sp),-(sp)
    4a84:	|  |  |            jsr 189b0 <__floatsisf>
    4a8a:	|  |  |            addq.l #4,sp
    4a8c:	|  |  |            move.l d0,d2
    4a8e:	|  |  |            move.l 1e9b8 <fontHeight>,d0
    4a94:	|  |  |            move.l d0,-(sp)
    4a96:	|  |  |            jsr 189b0 <__floatsisf>
    4a9c:	|  |  |            addq.l #4,sp
    4a9e:	|  |  |            move.l d0,d1
    4aa0:	|  |  |            move.l 1e246 <cameraZoom>,d0
    4aa6:	|  |  |            move.l d0,-(sp)
    4aa8:	|  |  |            move.l d1,-(sp)
    4aaa:	|  |  |            jsr 18866 <__divsf3>
    4ab0:	|  |  |            addq.l #8,sp
    4ab2:	|  |  |            move.l d0,-(sp)
    4ab4:	|  |  |            move.l d2,-(sp)
    4ab6:	|  |  |            jsr 18ca4 <__subsf3>
    4abc:	|  |  |            addq.l #8,sp
    4abe:	|  |  |            move.l d0,-(sp)
    4ac0:	|  |  |            jsr 18948 <__fixsfsi>
    4ac6:	|  |  |            addq.l #4,sp
    4ac8:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    4acc:	|  |  '----------> move.l 36(sp),-(sp)
    4ad0:	|  |               jsr 14f8a <strlen>
    4ad6:	|  |               addq.l #4,sp
    4ad8:	|  |               move.l d0,d1
    4ada:	|  |               move.l 48(sp),d0
    4ade:	|  |               cmp.l d1,d0
    4ae0:	|  '-------------- bcs.w 4a1c <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    4ae4:	|                  lea 16(sp),a0
    4ae8:	|                  move.l a0,-(sp)
    4aea:	|                  move.l 44(sp),-(sp)
    4aee:	|                  move.l 44(sp),-(sp)
    4af2:	|                  jsr 420a <addSpeechLine>
    4af8:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    4afc:	|                  move.l 44(sp),-(sp)
    4b00:	|                  jsr 189b0 <__floatsisf>
    4b06:	|                  addq.l #4,sp
    4b08:	|                  move.l d0,d2
    4b0a:	|                  move.l 1e9b8 <fontHeight>,d0
    4b10:	|                  move.l d0,-(sp)
    4b12:	|                  jsr 189b0 <__floatsisf>
    4b18:	|                  addq.l #4,sp
    4b1a:	|                  move.l d0,d1
    4b1c:	|                  move.l 1e246 <cameraZoom>,d0
    4b22:	|                  move.l d0,-(sp)
    4b24:	|                  move.l d1,-(sp)
    4b26:	|                  jsr 18866 <__divsf3>
    4b2c:	|                  addq.l #8,sp
    4b2e:	|                  move.l d0,-(sp)
    4b30:	|                  move.l d2,-(sp)
    4b32:	|                  jsr 18ca4 <__subsf3>
    4b38:	|                  addq.l #8,sp
    4b3a:	|                  move.l d0,-(sp)
    4b3c:	|                  jsr 18948 <__fixsfsi>
    4b42:	|                  addq.l #4,sp
    4b44:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4b48:	|              ,-- bpl.s 4b66 <wrapSpeechXY+0x1f8>
    4b4a:	|              |   movea.l 1e802 <speech>,a0
    4b50:	|              |   move.l 8(a0),d0
    4b54:	|              |   movea.l 1e802 <speech>,a0
    4b5a:	|              |   sub.l 44(sp),d0
    4b5e:	|              |   move.l d0,8(a0)
    4b62:	|           ,--|-- bra.w 4c54 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    4b66:	|           |  '-> movea.l 1e802 <speech>,a0
    4b6c:	|           |      move.l 8(a0),d0
    4b70:	|           |      move.l d0,-(sp)
    4b72:	|           |      jsr 189b0 <__floatsisf>
    4b78:	|           |      addq.l #4,sp
    4b7a:	|           |      move.l d0,d2
    4b7c:	|           |      move.l 1e97e <cameraY>,d0
    4b82:	|           |      move.l d0,-(sp)
    4b84:	|           |      jsr 189b0 <__floatsisf>
    4b8a:	|           |      addq.l #4,sp
    4b8c:	|           |      move.l d0,d3
    4b8e:	|           |      move.l 1e80a <winHeight>,d4
    4b94:	|           |      move.l 1e9b8 <fontHeight>,d0
    4b9a:	|           |      pea 3 <_start+0x3>
    4b9e:	|           |      move.l d0,-(sp)
    4ba0:	|           |      jsr 18f88 <__divsi3>
    4ba6:	|           |      addq.l #8,sp
    4ba8:	|           |      move.l d4,d1
    4baa:	|           |      sub.l d0,d1
    4bac:	|           |      move.l d1,-(sp)
    4bae:	|           |      jsr 189d8 <__floatunsisf>
    4bb4:	|           |      addq.l #4,sp
    4bb6:	|           |      move.l d0,d1
    4bb8:	|           |      move.l 1e246 <cameraZoom>,d0
    4bbe:	|           |      move.l d0,-(sp)
    4bc0:	|           |      move.l d1,-(sp)
    4bc2:	|           |      jsr 18866 <__divsf3>
    4bc8:	|           |      addq.l #8,sp
    4bca:	|           |      move.l d0,-(sp)
    4bcc:	|           |      move.l d3,-(sp)
    4bce:	|           |      jsr 1876c <__addsf3>
    4bd4:	|           |      addq.l #8,sp
    4bd6:	|           |      move.l d0,-(sp)
    4bd8:	|           |      move.l d2,-(sp)
    4bda:	|           |      jsr 18b1c <__gtsf2>
    4be0:	|           |      addq.l #8,sp
    4be2:	|           |      tst.l d0
    4be4:	|           +----- ble.s 4c54 <wrapSpeechXY+0x2e6>
    4be6:	|           |      move.l 1e97e <cameraY>,d0
    4bec:	|           |      move.l d0,-(sp)
    4bee:	|           |      jsr 189b0 <__floatsisf>
    4bf4:	|           |      addq.l #4,sp
    4bf6:	|           |      move.l d0,d2
    4bf8:	|           |      move.l 1e80a <winHeight>,d3
    4bfe:	|           |      move.l 1e9b8 <fontHeight>,d0
    4c04:	|           |      pea 3 <_start+0x3>
    4c08:	|           |      move.l d0,-(sp)
    4c0a:	|           |      jsr 18f88 <__divsi3>
    4c10:	|           |      addq.l #8,sp
    4c12:	|           |      move.l d3,d1
    4c14:	|           |      sub.l d0,d1
    4c16:	|           |      move.l d1,-(sp)
    4c18:	|           |      jsr 189d8 <__floatunsisf>
    4c1e:	|           |      addq.l #4,sp
    4c20:	|           |      move.l d0,d1
    4c22:	|           |      move.l 1e246 <cameraZoom>,d0
    4c28:	|           |      move.l d0,-(sp)
    4c2a:	|           |      move.l d1,-(sp)
    4c2c:	|           |      jsr 18866 <__divsf3>
    4c32:	|           |      addq.l #8,sp
    4c34:	|           |      move.l d0,-(sp)
    4c36:	|           |      move.l d2,-(sp)
    4c38:	|           |      jsr 1876c <__addsf3>
    4c3e:	|           |      addq.l #8,sp
    4c40:	|           |      movea.l 1e802 <speech>,a2
    4c46:	|           |      move.l d0,-(sp)
    4c48:	|           |      jsr 18948 <__fixsfsi>
    4c4e:	|           |      addq.l #4,sp
    4c50:	|           |      move.l d0,8(a2)

    if (offset) {
    4c54:	|           '----> move.l 16(sp),d0
    4c58:	|        ,-------- beq.s 4c8e <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4c5a:	|        |         movea.l 1e802 <speech>,a0
    4c60:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4c66:	|        |     ,-- bra.s 4c88 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4c68:	|        |  ,--|-> movea.l 20(sp),a0
    4c6c:	|        |  |  |   move.l 8(a0),d1
    4c70:	|        |  |  |   move.l 16(sp),d0
    4c74:	|        |  |  |   add.l d1,d0
    4c76:	|        |  |  |   movea.l 20(sp),a0
    4c7a:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4c7e:	|        |  |  |   movea.l 20(sp),a0
    4c82:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4c88:	|        |  |  '-> tst.l 20(sp)
    4c8c:	|        |  '----- bne.s 4c68 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    4c8e:	|        '-------> move.l 24(sp),d0
}
    4c92:	'----------------> movem.l (sp)+,d2-d4/a2
    4c96:	                   lea 16(sp),sp
    4c9a:	                   rts

00004c9c <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4c9c:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4ca0:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4ca4:	       tst.l 24(sp)
    4ca8:	   ,-- bge.s 4cae <drawLine+0x12>
    4caa:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    4cae:	   '-> tst.l 28(sp)
    4cb2:	   ,-- bge.s 4cb8 <drawLine+0x1c>
    4cb4:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4cb8:	   '-> tst.l 32(sp)
    4cbc:	   ,-- bge.s 4cc2 <drawLine+0x26>
    4cbe:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    4cc2:	   '-> tst.l 36(sp)
    4cc6:	   ,-- bge.s 4ccc <drawLine+0x30>
    4cc8:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4ccc:	   '-> move.l 1e95c <sceneWidth>,d0
    4cd2:	       cmp.l 24(sp),d0
    4cd6:	   ,-- bge.s 4ce6 <drawLine+0x4a>
    4cd8:	   |   move.l 1e95c <sceneWidth>,d0
    4cde:	   |   move.l d0,d1
    4ce0:	   |   subq.l #1,d1
    4ce2:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4ce6:	   '-> move.l 1e95c <sceneWidth>,d0
    4cec:	       cmp.l 32(sp),d0
    4cf0:	   ,-- bge.s 4d00 <drawLine+0x64>
    4cf2:	   |   move.l 1e95c <sceneWidth>,d0
    4cf8:	   |   move.l d0,d1
    4cfa:	   |   subq.l #1,d1
    4cfc:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4d00:	   '-> move.l 1e960 <sceneHeight>,d0
    4d06:	       cmp.l 28(sp),d0
    4d0a:	   ,-- bge.s 4d1a <drawLine+0x7e>
    4d0c:	   |   move.l 1e960 <sceneHeight>,d0
    4d12:	   |   move.l d0,d1
    4d14:	   |   subq.l #1,d1
    4d16:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4d1a:	   '-> move.l 1e960 <sceneHeight>,d0
    4d20:	       cmp.l 36(sp),d0
    4d24:	   ,-- bge.s 4d34 <drawLine+0x98>
    4d26:	   |   move.l 1e960 <sceneHeight>,d0
    4d2c:	   |   move.l d0,d1
    4d2e:	   |   subq.l #1,d1
    4d30:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4d34:	   '-> move.l 24(sp),d0
    4d38:	       cmp.l 32(sp),d0
    4d3c:	,----- ble.s 4d58 <drawLine+0xbc>
		x = x2; 
    4d3e:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4d44:	|      tst.w 10(sp)
    4d48:	|      seq d0
    4d4a:	|      neg.b d0
    4d4c:	|      move.b d0,d0
    4d4e:	|      andi.w #255,d0
    4d52:	|      move.w d0,10(sp)
    4d56:	|  ,-- bra.s 4d5e <drawLine+0xc2>
	} else x = x1;
    4d58:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4d5e:	   '-> move.l 28(sp),d1
    4d62:	       cmp.l 36(sp),d1
    4d66:	,----- ble.s 4d82 <drawLine+0xe6>
		y = y2; 
    4d68:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4d6e:	|      tst.w 10(sp)
    4d72:	|      seq d0
    4d74:	|      neg.b d0
    4d76:	|      move.b d0,d0
    4d78:	|      andi.w #255,d0
    4d7c:	|      move.w d0,10(sp)
    4d80:	|  ,-- bra.s 4d88 <drawLine+0xec>
	} else y = y1;	
    4d82:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4d88:	   '-> move.l 32(sp),d0
    4d8c:	       sub.l 24(sp),d0
    4d90:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4d94:	       move.l 6(sp),d0
    4d98:	   ,-- bpl.s 4d9c <drawLine+0x100>
    4d9a:	   |   neg.l d0
    4d9c:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4da0:	       move.l 36(sp),d1
    4da4:	       sub.l 28(sp),d1
    4da8:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4dac:	       move.l 2(sp),d0
    4db0:	   ,-- bpl.s 4db4 <drawLine+0x118>
    4db2:	   |   neg.l d0
    4db4:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4db8:	       tst.l 6(sp)
    4dbc:	   ,-- bne.s 4de0 <drawLine+0x144>
		diffX = 1;
    4dbe:	   |   moveq #1,d0
    4dc0:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4dc4:	   |   move.l 1e95c <sceneWidth>,d0
    4dca:	   |   subq.l #1,d0
    4dcc:	   |   cmp.l 16(sp),d0
    4dd0:	   +-- bne.s 4de0 <drawLine+0x144>
    4dd2:	   |   move.l 1e95c <sceneWidth>,d0
    4dd8:	   |   move.l d0,d1
    4dda:	   |   subq.l #2,d1
    4ddc:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4de0:	   '-> tst.l 2(sp)
    4de4:	   ,-- bne.s 4e08 <drawLine+0x16c>
		diffY = 1;
    4de6:	   |   moveq #1,d0
    4de8:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4dec:	   |   move.l 1e960 <sceneHeight>,d0
    4df2:	   |   subq.l #1,d0
    4df4:	   |   cmp.l 12(sp),d0
    4df8:	   +-- bne.s 4e08 <drawLine+0x16c>
    4dfa:	   |   move.l 1e960 <sceneHeight>,d0
    4e00:	   |   move.l d0,d1
    4e02:	   |   subq.l #2,d1
    4e04:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4e08:	   '-> pea 196fb <PutChar+0x6db>
    4e0e:	       jsr 1857e <KPrintF>
    4e14:	       addq.l #4,sp
	
}
    4e16:	       nop
    4e18:	       lea 20(sp),sp
    4e1c:	       rts

00004e1e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4e1e:	                      lea -24(sp),sp
    4e22:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4e24:	                      move.l 1e80e <firstTexture>,d0
    4e2a:	,-------------------- beq.w 4f08 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4e2e:	|                     clr.l 24(sp)
    4e32:	|     ,-------------- bra.w 4efc <deleteTextures+0xde>
			BOOL found = FALSE;
    4e36:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4e3a:	|  |  |               move.l 1e80e <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4e42:	|  |  |               movea.l 20(sp),a0
    4e46:	|  |  |               move.l (a0),d1
    4e48:	|  |  |               move.l 24(sp),d0
    4e4c:	|  |  |               add.l d0,d0
    4e4e:	|  |  |               add.l d0,d0
    4e50:	|  |  |               movea.l 36(sp),a0
    4e54:	|  |  |               adda.l d0,a0
    4e56:	|  |  |               move.l (a0),d0
    4e58:	|  |  |               cmp.l d1,d0
    4e5a:	|  |  |  ,----------- bne.w 4eee <deleteTextures+0xd0>
				found = TRUE;
    4e5e:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4e64:	|  |  |  |            movea.l 20(sp),a0
    4e68:	|  |  |  |            move.l 12(a0),d0
    4e6c:	|  |  |  |            move.l d0,1e80e <firstTexture>
				FreeVec(list);
    4e72:	|  |  |  |            move.l 20(sp),6(sp)
    4e78:	|  |  |  |            move.l 1e8c0 <SysBase>,d0
    4e7e:	|  |  |  |            movea.l d0,a6
    4e80:	|  |  |  |            movea.l 6(sp),a1
    4e84:	|  |  |  |            jsr -690(a6)
				continue;
    4e88:	|  |  |  |  ,-------- bra.s 4ef8 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4e8a:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4e8e:	|  |  |  |  |  |      movea.l 12(a0),a0
    4e92:	|  |  |  |  |  |      move.l (a0),d1
    4e94:	|  |  |  |  |  |      move.l 24(sp),d0
    4e98:	|  |  |  |  |  |      add.l d0,d0
    4e9a:	|  |  |  |  |  |      add.l d0,d0
    4e9c:	|  |  |  |  |  |      movea.l 36(sp),a0
    4ea0:	|  |  |  |  |  |      adda.l d0,a0
    4ea2:	|  |  |  |  |  |      move.l (a0),d0
    4ea4:	|  |  |  |  |  |      cmp.l d1,d0
    4ea6:	|  |  |  |  |  |  ,-- bne.s 4ee4 <deleteTextures+0xc6>
					found = TRUE;
    4ea8:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4eae:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4eb2:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4eb8:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4ebc:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4ec0:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4ec4:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4ec8:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4ecc:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4ed2:	|  |  |  |  |  |  |   move.l 1e8c0 <SysBase>,d0
    4ed8:	|  |  |  |  |  |  |   movea.l d0,a6
    4eda:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4ede:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4ee2:	|  |  |  |  +--|--|-- bra.s 4ef8 <deleteTextures+0xda>
				}
				list = list->next;
    4ee4:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4ee8:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4eee:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4ef2:	|  |  |     |  |      move.l 12(a0),d0
    4ef6:	|  |  |     |  '----- bne.s 4e8a <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4ef8:	|  |  |     '-------> addq.l #1,24(sp)
    4efc:	|  |  '-------------> move.l 24(sp),d0
    4f00:	|  |                  cmp.l 32(sp),d0
    4f04:	|  '----------------- bcs.w 4e36 <deleteTextures+0x18>
			}
		}
	}
}
    4f08:	'-------------------> nop
    4f0a:	                      movea.l (sp)+,a6
    4f0c:	                      lea 24(sp),sp
    4f10:	                      rts

00004f12 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4f12:	subq.l #4,sp
    4f14:	move.l 8(sp),d0
    4f18:	move.w d0,d0
    4f1a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4f1e:	pea 1971e <PutChar+0x6fe>
    4f24:	jsr 1857e <KPrintF>
    4f2a:	addq.l #4,sp
}
    4f2c:	nop
    4f2e:	addq.l #4,sp
    4f30:	rts

00004f32 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4f32:	       moveq #-1,d0
    4f34:	       cmp.l 4(sp),d0
    4f38:	   ,-- bne.s 4f3e <resourceNameFromNum+0xc>
    4f3a:	   |   moveq #0,d0
    4f3c:	,--|-- bra.s 4f76 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4f3e:	|  '-> move.l 1e89a <numResourceNames>,d0
    4f44:	|  ,-- bne.s 4f4e <resourceNameFromNum+0x1c>
    4f46:	|  |   move.l #104270,d0
    4f4c:	+--|-- bra.s 4f76 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4f4e:	|  '-> move.l 1e89a <numResourceNames>,d0
    4f54:	|      cmp.l 4(sp),d0
    4f58:	|  ,-- ble.s 4f70 <resourceNameFromNum+0x3e>
    4f5a:	|  |   move.l 1e852 <allResourceNames>,d1
    4f60:	|  |   move.l 4(sp),d0
    4f64:	|  |   add.l d0,d0
    4f66:	|  |   add.l d0,d0
    4f68:	|  |   movea.l d1,a0
    4f6a:	|  |   adda.l d0,a0
    4f6c:	|  |   move.l (a0),d0
    4f6e:	+--|-- bra.s 4f76 <resourceNameFromNum+0x44>
	return "Unknown resource";
    4f70:	|  '-> move.l #104279,d0
    4f76:	'----> rts

00004f78 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4f78:	                lea -44(sp),sp
    4f7c:	                movem.l d2-d3/a6,-(sp)

	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4f80:	                move.l #320,1e806 <winWidth>
    winHeight = 256;
    4f8a:	                move.l #256,1e80a <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4f94:	                tst.l 60(sp)
    4f98:	            ,-- bne.s 4fb0 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4f9a:	            |   pea 19768 <PutChar+0x748>
    4fa0:	            |   jsr b8 <copyString>
    4fa6:	            |   addq.l #4,sp
    4fa8:	            |   move.l d0,1e81e <bundleFolder>
    4fae:	         ,--|-- bra.s 4fc6 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4fb0:	         |  '-> movea.l 64(sp),a0
    4fb4:	         |      move.l (a0),d0
    4fb6:	         |      move.l d0,-(sp)
    4fb8:	         |      jsr b8 <copyString>
    4fbe:	         |      addq.l #4,sp
    4fc0:	         |      move.l d0,1e81e <bundleFolder>
	}
    
	int lastSlash = -1;
    4fc6:	         '----> moveq #-1,d0
    4fc8:	                move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4fcc:	                clr.l 44(sp)
    4fd0:	         ,----- bra.s 4ff2 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4fd2:	      ,--|----> move.l 1e81e <bundleFolder>,d1
    4fd8:	      |  |      move.l 44(sp),d0
    4fdc:	      |  |      movea.l d1,a0
    4fde:	      |  |      adda.l d0,a0
    4fe0:	      |  |      move.b (a0),d0
    4fe2:	      |  |      cmpi.b #47,d0
    4fe6:	      |  |  ,-- bne.s 4fee <main_sludge+0x76>
    4fe8:	      |  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4fee:	      |  |  '-> addq.l #1,44(sp)
    4ff2:	      |  '----> move.l 1e81e <bundleFolder>,d1
    4ff8:	      |         move.l 44(sp),d0
    4ffc:	      |         movea.l d1,a0
    4ffe:	      |         adda.l d0,a0
    5000:	      |         move.b (a0),d0
    5002:	      '-------- bne.s 4fd2 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    5004:	                move.l 1e81e <bundleFolder>,d0
    500a:	                move.l 48(sp),d1
    500e:	                addq.l #1,d1
    5010:	                movea.l d0,a0
    5012:	                adda.l d1,a0
    5014:	                clr.b (a0)

	if (argc > 1) {
    5016:	                moveq #1,d0
    5018:	                cmp.l 60(sp),d0
    501c:	            ,-- bge.s 5038 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    501e:	            |   move.l 60(sp),d0
    5022:	            |   addi.l #1073741823,d0
    5028:	            |   add.l d0,d0
    502a:	            |   add.l d0,d0
    502c:	            |   movea.l 64(sp),a0
    5030:	            |   adda.l d0,a0
    5032:	            |   move.l (a0),52(sp)
    5036:	         ,--|-- bra.s 5092 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    5038:	         |  '-> move.l 1e81e <bundleFolder>,d0
    503e:	         |      pea 1976e <PutChar+0x74e>
    5044:	         |      move.l d0,-(sp)
    5046:	         |      jsr 14fca <joinStrings>
    504c:	         |      addq.l #8,sp
    504e:	         |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    5052:	         |      move.l 52(sp),-(sp)
    5056:	         |      jsr 14ec4 <fileExists>
    505c:	         |      addq.l #4,sp
    505e:	         |      tst.b d0
    5060:	         +----- bne.s 5092 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    5062:	         |      move.l 52(sp),40(sp)
    5068:	         |      move.l 1e8c0 <SysBase>,d0
    506e:	         |      movea.l d0,a6
    5070:	         |      movea.l 40(sp),a1
    5074:	         |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    5078:	         |      move.l 1e81e <bundleFolder>,d0
    507e:	         |      pea 1977b <PutChar+0x75b>
    5084:	         |      move.l d0,-(sp)
    5086:	         |      jsr 14fca <joinStrings>
    508c:	         |      addq.l #8,sp
    508e:	         |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    5092:	         '----> move.l 52(sp),-(sp)
    5096:	                jsr 14ec4 <fileExists>
    509c:	                addq.l #4,sp
    509e:	                tst.b d0
    50a0:	            ,-- bne.s 50f8 <main_sludge+0x180>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    50a2:	            |   move.l 1e8c8 <DOSBase>,d0
    50a8:	            |   movea.l d0,a6
    50aa:	            |   jsr -60(a6)
    50ae:	            |   move.l d0,32(sp)
    50b2:	            |   move.l 32(sp),d0
    50b6:	            |   move.l d0,28(sp)
    50ba:	            |   move.l #104324,24(sp)
    50c2:	            |   moveq #21,d0
    50c4:	            |   move.l d0,20(sp)
    50c8:	            |   move.l 1e8c8 <DOSBase>,d0
    50ce:	            |   movea.l d0,a6
    50d0:	            |   move.l 28(sp),d1
    50d4:	            |   move.l 24(sp),d2
    50d8:	            |   move.l 20(sp),d3
    50dc:	            |   jsr -48(a6)
    50e0:	            |   move.l d0,16(sp)
		KPrintF("Game file not found.\n");
    50e4:	            |   pea 19784 <PutChar+0x764>
    50ea:	            |   jsr 1857e <KPrintF>
    50f0:	            |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    50f2:	            |   moveq #0,d0
    50f4:	,-----------|-- bra.w 537a <main_sludge+0x402>
	}

	KPrintF("Setgamefilepath\n");
    50f8:	|           '-> pea 1979a <PutChar+0x77a>
    50fe:	|               jsr 1857e <KPrintF>
    5104:	|               addq.l #4,sp
	setGameFilePath (sludgeFile);	
    5106:	|               move.l 52(sp),-(sp)
    510a:	|               jsr 5384 <setGameFilePath>
    5110:	|               addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    5112:	|               move.l 52(sp),-(sp)
    5116:	|               jsr 68ca <initSludge>
    511c:	|               addq.l #4,sp
    511e:	|               tst.w d0
    5120:	|           ,-- bne.s 5128 <main_sludge+0x1b0>
    5122:	|           |   moveq #0,d0
    5124:	+-----------|-- bra.w 537a <main_sludge+0x402>
	
	if( winWidth != 320 || winHeight != 256) {
    5128:	|           '-> move.l 1e806 <winWidth>,d0
    512e:	|               cmpi.l #320,d0
    5134:	|           ,-- bne.s 5144 <main_sludge+0x1cc>
    5136:	|           |   move.l 1e80a <winHeight>,d0
    513c:	|           |   cmpi.l #256,d0
    5142:	|        ,--|-- beq.s 5166 <main_sludge+0x1ee>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    5144:	|        |  '-> pea 197ab <PutChar+0x78b>
    514a:	|        |      jsr 1857e <KPrintF>
    5150:	|        |      addq.l #4,sp
		winWidth = 320;
    5152:	|        |      move.l #320,1e806 <winWidth>
		winHeight = 256;
    515c:	|        |      move.l #256,1e80a <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    5166:	|        '----> pea 19828 <PutChar+0x808>
    516c:	|               jsr 1857e <KPrintF>
    5172:	|               addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    5174:	|               move.l 1e80a <winHeight>,d0
    517a:	|               move.l d0,d1
    517c:	|               move.l 1e806 <winWidth>,d0
    5182:	|               move.l d1,-(sp)
    5184:	|               move.l d0,-(sp)
    5186:	|               jsr de64 <resizeBackdrop>
    518c:	|               addq.l #8,sp
    518e:	|               tst.w d0
    5190:	|           ,-- bne.s 51a6 <main_sludge+0x22e>
		KPrintF("Couldn't allocate memory for backdrop");
    5192:	|           |   pea 1983b <PutChar+0x81b>
    5198:	|           |   jsr 1857e <KPrintF>
    519e:	|           |   addq.l #4,sp
		return FALSE;
    51a0:	|           |   moveq #0,d0
    51a2:	+-----------|-- bra.w 537a <main_sludge+0x402>
	}

	KPrintF("Init People\n");
    51a6:	|           '-> pea 19861 <PutChar+0x841>
    51ac:	|               jsr 1857e <KPrintF>
    51b2:	|               addq.l #4,sp
	if (! initPeople ())
    51b4:	|               jsr b37e <initPeople>
    51ba:	|               tst.w d0
    51bc:	|           ,-- bne.s 51d2 <main_sludge+0x25a>
	{
		KPrintF("Couldn't initialise people stuff");
    51be:	|           |   pea 1986e <PutChar+0x84e>
    51c4:	|           |   jsr 1857e <KPrintF>
    51ca:	|           |   addq.l #4,sp
		return FALSE;
    51cc:	|           |   moveq #0,d0
    51ce:	+-----------|-- bra.w 537a <main_sludge+0x402>
	}

	KPrintF("Init Floor\n");
    51d2:	|           '-> pea 1988f <PutChar+0x86f>
    51d8:	|               jsr 1857e <KPrintF>
    51de:	|               addq.l #4,sp
	if (! initFloor ())
    51e0:	|               jsr 17934 <initFloor>
    51e6:	|               tst.w d0
    51e8:	|           ,-- bne.s 51fe <main_sludge+0x286>
	{
		KPrintF("Couldn't initialise floor stuff");
    51ea:	|           |   pea 1989b <PutChar+0x87b>
    51f0:	|           |   jsr 1857e <KPrintF>
    51f6:	|           |   addq.l #4,sp
		
		return FALSE;
    51f8:	|           |   moveq #0,d0
    51fa:	+-----------|-- bra.w 537a <main_sludge+0x402>
	}

	KPrintF("Init Objecttype\n");
    51fe:	|           '-> pea 198bb <PutChar+0x89b>
    5204:	|               jsr 1857e <KPrintF>
    520a:	|               addq.l #4,sp
	if (! initObjectTypes ())
    520c:	|               jsr e020 <initObjectTypes>
    5212:	|               tst.w d0
    5214:	|           ,-- bne.s 522a <main_sludge+0x2b2>
	{
		KPrintF("Couldn't initialise object type stuff");
    5216:	|           |   pea 198cc <PutChar+0x8ac>
    521c:	|           |   jsr 1857e <KPrintF>
    5222:	|           |   addq.l #4,sp
		return FALSE;
    5224:	|           |   moveq #0,d0
    5226:	+-----------|-- bra.w 537a <main_sludge+0x402>
	}

	KPrintF("Init speech\n");
    522a:	|           '-> pea 198f2 <PutChar+0x8d2>
    5230:	|               jsr 1857e <KPrintF>
    5236:	|               addq.l #4,sp
	initSpeech ();
    5238:	|               jsr 4428 <initSpeech>
	KPrintF("Init status bar\n");
    523e:	|               pea 198ff <PutChar+0x8df>
    5244:	|               jsr 1857e <KPrintF>
    524a:	|               addq.l #4,sp
	initStatusBar ();
    524c:	|               jsr 8c4a <initStatusBar>

	KPrintF("Get numbered string\n");
    5252:	|               pea 19910 <PutChar+0x8f0>
    5258:	|               jsr 1857e <KPrintF>
    525e:	|               addq.l #4,sp
	gameName = getNumberedString(1);
    5260:	|               pea 1 <_start+0x1>
    5264:	|               jsr 7e74 <getNumberedString>
    526a:	|               addq.l #4,sp
    526c:	|               move.l d0,1e816 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    5272:	|               pea 19925 <PutChar+0x905>
    5278:	|               jsr 1857e <KPrintF>
    527e:	|               addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    5280:	|               move.l 1e88e <noStack>,d0
    5286:	|               pea 1 <_start+0x1>
    528a:	|               move.l d0,-(sp)
    528c:	|               clr.l -(sp)
    528e:	|               clr.l -(sp)
    5290:	|               clr.l -(sp)
    5292:	|               jsr 7d42 <startNewFunctionNum>
    5298:	|               lea 20(sp),sp

	KPrintF("Starting main loop");
    529c:	|               pea 1993d <PutChar+0x91d>
    52a2:	|               jsr 1857e <KPrintF>
    52a8:	|               addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    52aa:	|               move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    52b2:	|               clr.l 1e822 <weAreDoneSoQuit>
	//WaitVbl();
	FrameCounter = 0;
    52b8:	|               clr.w 1e8be <FrameCounter>

	while ( !weAreDoneSoQuit ) {	
    52be:	|     ,-------- bra.w 5370 <main_sludge+0x3f8>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    52c2:	|  ,--|-------> jsr 7bc8 <sludgeDisplay>
		CsiCheckInput();
    52c8:	|  |  |         jsr d982 <CsiCheckInput>
		walkAllPeople();
    52ce:	|  |  |         jsr c93c <walkAllPeople>
		handleInput();
    52d4:	|  |  |         jsr 6644 <handleInput>
		//custom->color[0] = 0x000;			
		//WaitVbl();
		while( FrameCounter < gameSettings.refreshRate)
    52da:	|  |  |         nop
    52dc:	|  |  |     ,-> move.w 1e8be <FrameCounter>,d0
    52e2:	|  |  |     |   move.w d0,d0
    52e4:	|  |  |     |   andi.l #65535,d0
    52ea:	|  |  |     |   move.l 1e9a6 <gameSettings+0xa>,d1
    52f0:	|  |  |     |   cmp.l d0,d1
    52f2:	|  |  |     '-- bhi.s 52dc <main_sludge+0x364>
		{		
		}
		if( FrameCounter > gameSettings.refreshRate)
    52f4:	|  |  |         move.w 1e8be <FrameCounter>,d0
    52fa:	|  |  |         move.w d0,d0
    52fc:	|  |  |         andi.l #65535,d0
    5302:	|  |  |         move.l 1e9a6 <gameSettings+0xa>,d1
    5308:	|  |  |         cmp.l d0,d1
    530a:	|  |  |     ,-- bcc.s 531a <main_sludge+0x3a2>
		{
			KPrintF("Framerate too slow\n");
    530c:	|  |  |     |   pea 19950 <PutChar+0x930>
    5312:	|  |  |     |   jsr 1857e <KPrintF>
    5318:	|  |  |     |   addq.l #4,sp
		}
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
    531a:	|  |  |     '-> movea.l #14675972,a0
    5320:	|  |  |         move.l (a0),d0
    5322:	|  |  |         move.l d0,12(sp)
		vpos&=0x1ff00;
    5326:	|  |  |         move.l 12(sp),d0
    532a:	|  |  |         andi.l #130816,d0
    5330:	|  |  |         move.l d0,12(sp)
		while(vpos<(300<<8)) {
    5334:	|  |  |     ,-- bra.s 535e <main_sludge+0x3e6>
			vpos=*(volatile ULONG*)0xDFF004;
    5336:	|  |  |  ,--|-> movea.l #14675972,a0
    533c:	|  |  |  |  |   move.l (a0),d0
    533e:	|  |  |  |  |   move.l d0,12(sp)
			vpos&=0x1ff00;			
    5342:	|  |  |  |  |   move.l 12(sp),d0
    5346:	|  |  |  |  |   andi.l #130816,d0
    534c:	|  |  |  |  |   move.l d0,12(sp)
			KPrintF("Waiting for Frame to finish\n");
    5350:	|  |  |  |  |   pea 19964 <PutChar+0x944>
    5356:	|  |  |  |  |   jsr 1857e <KPrintF>
    535c:	|  |  |  |  |   addq.l #4,sp
		while(vpos<(300<<8)) {
    535e:	|  |  |  |  '-> move.l 12(sp),d0
    5362:	|  |  |  |      cmpi.l #76799,d0
    5368:	|  |  |  '----- bls.s 5336 <main_sludge+0x3be>
		}

		FrameCounter = 0;
    536a:	|  |  |         clr.w 1e8be <FrameCounter>
	while ( !weAreDoneSoQuit ) {	
    5370:	|  |  '-------> move.l 1e822 <weAreDoneSoQuit>,d0
    5376:	|  '----------- beq.w 52c2 <main_sludge+0x34a>
	}	
	//Amiga Cleanup
	//FreeVec(sludgeFile);
}
    537a:	'-------------> movem.l (sp)+,d2-d3/a6
    537e:	                lea 44(sp),sp
    5382:	                rts

00005384 <setGameFilePath>:

void setGameFilePath (char * f) {
    5384:	          lea -1104(sp),sp
    5388:	          move.l a6,-(sp)
    538a:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    538c:	          move.l #1112,d0
    5392:	          add.l sp,d0
    5394:	          addi.l #-1102,d0
    539a:	          move.l d0,1100(sp)
    539e:	          move.l #998,1096(sp)
    53a6:	          move.l 1e8c8 <DOSBase>,d0
    53ac:	          movea.l d0,a6
    53ae:	          move.l 1100(sp),d1
    53b2:	          move.l 1096(sp),d2
    53b6:	          jsr -564(a6)
    53ba:	          move.w d0,1094(sp)
    53be:	          move.w 1094(sp),d0
    53c2:	      ,-- bne.s 53d2 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    53c4:	      |   pea 19981 <PutChar+0x961>
    53ca:	      |   jsr 1857e <KPrintF>
    53d0:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    53d2:	      '-> moveq #-1,d0
    53d4:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    53d8:	          clr.l 1104(sp)
    53dc:	   ,----- bra.s 53fa <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    53de:	,--|----> move.l 1104(sp),d0
    53e2:	|  |      movea.l 1116(sp),a0
    53e6:	|  |      adda.l d0,a0
    53e8:	|  |      move.b (a0),d0
    53ea:	|  |      cmpi.b #47,d0
    53ee:	|  |  ,-- bne.s 53f6 <setGameFilePath+0x72>
    53f0:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    53f6:	|  |  '-> addq.l #1,1104(sp)
    53fa:	|  '----> move.l 1104(sp),d0
    53fe:	|         movea.l 1116(sp),a0
    5402:	|         adda.l d0,a0
    5404:	|         move.b (a0),d0
    5406:	'-------- bne.s 53de <setGameFilePath+0x5a>
	}

	if (got != -1) {
    5408:	          moveq #-1,d0
    540a:	          cmp.l 1108(sp),d0
    540e:	   ,----- beq.s 5488 <setGameFilePath+0x104>
		f[got] = 0;	
    5410:	   |      move.l 1108(sp),d0
    5414:	   |      movea.l 1116(sp),a0
    5418:	   |      adda.l d0,a0
    541a:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    541c:	   |      move.l 1116(sp),1090(sp)
    5422:	   |      moveq #-2,d0
    5424:	   |      move.l d0,1086(sp)
    5428:	   |      move.l 1e8c8 <DOSBase>,d0
    542e:	   |      movea.l d0,a6
    5430:	   |      move.l 1090(sp),d1
    5434:	   |      move.l 1086(sp),d2
    5438:	   |      jsr -84(a6)
    543c:	   |      move.l d0,1082(sp)
    5440:	   |      move.l 1082(sp),d0
    5444:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    5448:	   |      move.l 1078(sp),1074(sp)
    544e:	   |      move.l 1e8c8 <DOSBase>,d0
    5454:	   |      movea.l d0,a6
    5456:	   |      move.l 1074(sp),d1
    545a:	   |      jsr -126(a6)
    545e:	   |      move.l d0,1070(sp)
    5462:	   |      move.l 1070(sp),d0
    5466:	   |  ,-- bne.s 547a <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    5468:	   |  |   move.l 1116(sp),-(sp)
    546c:	   |  |   pea 199a7 <PutChar+0x987>
    5472:	   |  |   jsr 1857e <KPrintF>
    5478:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    547a:	   |  '-> move.l 1108(sp),d0
    547e:	   |      movea.l 1116(sp),a0
    5482:	   |      adda.l d0,a0
    5484:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    5488:	   '----> move.l #400,1066(sp)
    5490:	          clr.l 1062(sp)
    5494:	          move.l 1e8c0 <SysBase>,d0
    549a:	          movea.l d0,a6
    549c:	          move.l 1066(sp),d0
    54a0:	          move.l 1062(sp),d1
    54a4:	          jsr -684(a6)
    54a8:	          move.l d0,1058(sp)
    54ac:	          move.l 1058(sp),d0
    54b0:	          move.l d0,1e81a <gamePath>
	if (gamePath==0) {
    54b6:	          move.l 1e81a <gamePath>,d0
    54bc:	      ,-- bne.s 54d0 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    54be:	      |   pea 199da <PutChar+0x9ba>
    54c4:	      |   jsr 1857e <KPrintF>
    54ca:	      |   addq.l #4,sp
    54cc:	   ,--|-- bra.w 55b8 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    54d0:	   |  '-> move.l 1e81a <gamePath>,1054(sp)
    54d8:	   |      moveq #-2,d0
    54da:	   |      move.l d0,1050(sp)
    54de:	   |      move.l 1e8c8 <DOSBase>,d0
    54e4:	   |      movea.l d0,a6
    54e6:	   |      move.l 1054(sp),d1
    54ea:	   |      move.l 1050(sp),d2
    54ee:	   |      jsr -84(a6)
    54f2:	   |      move.l d0,1046(sp)
    54f6:	   |      move.l 1046(sp),d0
    54fa:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    54fe:	   |      move.l 1042(sp),1038(sp)
    5504:	   |      move.l 1e8c8 <DOSBase>,d0
    550a:	   |      movea.l d0,a6
    550c:	   |      move.l 1038(sp),d1
    5510:	   |      jsr -126(a6)
    5514:	   |      move.l d0,1034(sp)
    5518:	   |      move.l 1034(sp),d0
    551c:	   |  ,-- bne.s 552c <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    551e:	   |  |   pea 19a15 <PutChar+0x9f5>
    5524:	   |  |   jsr 1857e <KPrintF>
    552a:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    552c:	   |  '-> move.l #1112,d0
    5532:	   |      add.l sp,d0
    5534:	   |      addi.l #-1102,d0
    553a:	   |      move.l d0,1030(sp)
    553e:	   |      moveq #-2,d0
    5540:	   |      move.l d0,1026(sp)
    5544:	   |      move.l 1e8c8 <DOSBase>,d0
    554a:	   |      movea.l d0,a6
    554c:	   |      move.l 1030(sp),d1
    5550:	   |      move.l 1026(sp),d2
    5554:	   |      jsr -84(a6)
    5558:	   |      move.l d0,1022(sp)
    555c:	   |      move.l 1022(sp),d0
    5560:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    5564:	   |      move.l 1042(sp),1018(sp)
    556a:	   |      move.l 1e8c8 <DOSBase>,d0
    5570:	   |      movea.l d0,a6
    5572:	   |      move.l 1018(sp),d1
    5576:	   |      jsr -126(a6)
    557a:	   |      move.l d0,1014(sp)
    557e:	   |      move.l 1014(sp),d0
    5582:	   |  ,-- bne.s 5598 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    5584:	   |  |   moveq #10,d0
    5586:	   |  |   add.l sp,d0
    5588:	   |  |   move.l d0,-(sp)
    558a:	   |  |   pea 19a41 <PutChar+0xa21>
    5590:	   |  |   jsr 1857e <KPrintF>
    5596:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    5598:	   |  '-> move.l 1e81a <gamePath>,d0
    559e:	   +----- beq.s 55b8 <setGameFilePath+0x234>
    55a0:	   |      move.l 1e81a <gamePath>,1010(sp)
    55a8:	   |      move.l 1e8c0 <SysBase>,d0
    55ae:	   |      movea.l d0,a6
    55b0:	   |      movea.l 1010(sp),a1
    55b4:	   |      jsr -690(a6)
}
    55b8:	   '----> move.l (sp)+,d2
    55ba:	          movea.l (sp)+,a6
    55bc:	          lea 1104(sp),sp
    55c0:	          rts

000055c2 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    55c2:	,-------> subq.l #8,sp
    55c4:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    55c6:	|         move.l 16(sp),d0
    55ca:	|         move.l d0,-(sp)
    55cc:	|         pea 19b49 <PutChar+0xb29>
    55d2:	|         jsr 1857e <KPrintF>
    55d8:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    55da:	|         move.l 16(sp),-(sp)
    55de:	|         jsr 794e <pauseFunction>
    55e4:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    55e6:	|     ,-- bra.s 55f8 <abortFunction+0x36>
    55e8:	|  ,--|-> moveq #24,d0
    55ea:	|  |  |   add.l 16(sp),d0
    55ee:	|  |  |   move.l d0,-(sp)
    55f0:	|  |  |   jsr 16422 <trimStack>
    55f6:	|  |  |   addq.l #4,sp
    55f8:	|  |  '-> movea.l 16(sp),a0
    55fc:	|  |      move.l 24(a0),d0
    5600:	|  '----- bne.s 55e8 <abortFunction+0x26>
	//FreeVec( fun -> compiledLines);
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5602:	|         clr.l 8(sp)
    5606:	|     ,-- bra.s 5626 <abortFunction+0x64>
    5608:	|  ,--|-> movea.l 16(sp),a0
    560c:	|  |  |   move.l 20(a0),d1
    5610:	|  |  |   move.l 8(sp),d0
    5614:	|  |  |   lsl.l #3,d0
    5616:	|  |  |   add.l d1,d0
    5618:	|  |  |   move.l d0,-(sp)
    561a:	|  |  |   jsr 15cec <unlinkVar>
    5620:	|  |  |   addq.l #4,sp
    5622:	|  |  |   addq.l #1,8(sp)
    5626:	|  |  '-> movea.l 16(sp),a0
    562a:	|  |      move.l 8(a0),d0
    562e:	|  |      cmp.l 8(sp),d0
    5632:	|  '----- bgt.s 5608 <abortFunction+0x46>
	if( fun -> numLocals > 0) {
    5634:	|         movea.l 16(sp),a0
    5638:	|         move.l 8(a0),d0
    563c:	|     ,-- ble.s 5658 <abortFunction+0x96>
		FreeVec(fun -> localVars);
    563e:	|     |   movea.l 16(sp),a0
    5642:	|     |   move.l 20(a0),4(sp)
    5648:	|     |   move.l 1e8c0 <SysBase>,d0
    564e:	|     |   movea.l d0,a6
    5650:	|     |   movea.l 4(sp),a1
    5654:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    5658:	|     '-> moveq #28,d0
    565a:	|         add.l 16(sp),d0
    565e:	|         move.l d0,-(sp)
    5660:	|         jsr 15cec <unlinkVar>
    5666:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);	
    5668:	|         movea.l 16(sp),a0
    566c:	|         move.l 40(a0),d0
    5670:	|     ,-- beq.s 5682 <abortFunction+0xc0>
    5672:	|     |   movea.l 16(sp),a0
    5676:	|     |   move.l 40(a0),d0
    567a:	|     |   move.l d0,-(sp)
    567c:	'-----|-- jsr 55c2 <abortFunction>(pc)
    5680:	      |   addq.l #4,sp
	fun->unloaded = 1;
    5682:	      '-> movea.l 16(sp),a0
    5686:	          moveq #1,d0
    5688:	          move.l d0,58(a0)

	KPrintF("abortFunction finished\n");
    568c:	          pea 19b63 <PutChar+0xb43>
    5692:	          jsr 1857e <KPrintF>
    5698:	          addq.l #4,sp
}
    569a:	          nop
    569c:	          movea.l (sp)+,a6
    569e:	          addq.l #8,sp
    56a0:	          rts

000056a2 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    56a2:	          subq.l #8,sp
	int n = 0;
    56a4:	          clr.l 4(sp)
	*killedMyself = FALSE;
    56a8:	          movea.l 20(sp),a0
    56ac:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    56ae:	          move.l 1e856 <allRunningFunctions>,(sp)
	while (fun) {
    56b4:	   ,----- bra.s 56e2 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    56b6:	,--|----> movea.l (sp),a0
    56b8:	|  |      move.l (a0),d0
    56ba:	|  |      cmp.l 12(sp),d0
    56be:	|  |  ,-- bne.s 56dc <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    56c0:	|  |  |   movea.l (sp),a0
    56c2:	|  |  |   move.w #1,54(a0)
			n++;
    56c8:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    56cc:	|  |  |   move.l (sp),d0
    56ce:	|  |  |   cmp.l 16(sp),d0
    56d2:	|  |  +-- bne.s 56dc <cancelAFunction+0x3a>
    56d4:	|  |  |   movea.l 20(sp),a0
    56d8:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    56dc:	|  |  '-> movea.l (sp),a0
    56de:	|  |      move.l 44(a0),(sp)
	while (fun) {
    56e2:	|  '----> tst.l (sp)
    56e4:	'-------- bne.s 56b6 <cancelAFunction+0x14>
	}
	return n;
    56e6:	          move.l 4(sp),d0
}
    56ea:	          addq.l #8,sp
    56ec:	          rts

000056ee <completeTimers>:


void completeTimers () {
    56ee:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    56f0:	          move.l 1e856 <allRunningFunctions>,(sp)

	while (thisFunction) {
    56f6:	   ,----- bra.s 570c <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    56f8:	,--|----> movea.l (sp),a0
    56fa:	|  |      move.b 56(a0),d0
    56fe:	|  |  ,-- bne.s 5706 <completeTimers+0x18>
    5700:	|  |  |   movea.l (sp),a0
    5702:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    5706:	|  |  '-> movea.l (sp),a0
    5708:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    570c:	|  '----> tst.l (sp)
    570e:	'-------- bne.s 56f8 <completeTimers+0xa>
	}
}
    5710:	          nop
    5712:	          nop
    5714:	          addq.l #4,sp
    5716:	          rts

00005718 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    5718:	                                                             lea -80(sp),sp
	BOOL keepLooping = TRUE;
    571c:	                                                             move.w #1,78(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    5722:	                                                             movea.l 84(sp),a0
    5726:	                                                             move.w 54(a0),d0
    572a:	,----------------------------------------------------------- beq.w 65d6 <continueFunction+0xebe>
		abortFunction (fun);
    572e:	|                                                            move.l 84(sp),-(sp)
    5732:	|                                                            jsr 55c2 <abortFunction>
    5738:	|                                                            addq.l #4,sp
		return TRUE;
    573a:	|                                                            moveq #1,d0
    573c:	|  ,-------------------------------------------------------- bra.w 65e0 <continueFunction+0xec8>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    5740:	|  |  ,----------------------------------------------------> move.w #1,76(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    5746:	|  |  |                                                      movea.l 84(sp),a0
    574a:	|  |  |                                                      move.l 4(a0),d1
    574e:	|  |  |                                                      movea.l 84(sp),a0
    5752:	|  |  |                                                      move.l 36(a0),d0
    5756:	|  |  |                                                      lsl.l #3,d0
    5758:	|  |  |                                                      movea.l d1,a0
    575a:	|  |  |                                                      adda.l d0,a0
    575c:	|  |  |                                                      move.l 4(a0),72(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    5762:	|  |  |                                                      movea.l 84(sp),a0
    5766:	|  |  |                                                      move.l 4(a0),d1
    576a:	|  |  |                                                      movea.l 84(sp),a0
    576e:	|  |  |                                                      move.l 36(a0),d0
    5772:	|  |  |                                                      lsl.l #3,d0
    5774:	|  |  |                                                      movea.l d1,a0
    5776:	|  |  |                                                      adda.l d0,a0
    5778:	|  |  |                                                      move.l (a0),68(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    577c:	|  |  |                                                      moveq #41,d0
    577e:	|  |  |                                                      cmp.l 68(sp),d0
    5782:	|  |  |  ,-------------------------------------------------- bcs.w 658a <continueFunction+0xe72>
    5786:	|  |  |  |                                                   move.l 68(sp),d0
    578a:	|  |  |  |                                                   add.l d0,d0
    578c:	|  |  |  |                                                   movea.l d0,a0
    578e:	|  |  |  |                                                   adda.l #22426,a0
    5794:	|  |  |  |                                                   move.w (a0),d0
    5796:	|  |  |  |                                                   jmp (579a <continueFunction+0x82>,pc,d0.w)
    579a:	|  |  |  |                                                   bset d6,(84,a0,d0.w)
    579e:	|  |  |  |                                                   .short 0x0a8c
    57a0:	|  |  |  |                                                   eori.w #2446,-(a4)
    57a4:	|  |  |  |                                                   bchg d4,-(a0)
    57a6:	|  |  |  |                                                   .short 0x09ba
    57a8:	|  |  |  |                                                   andi.l #182979304,-(a2)
    57ae:	|  |  |  |                                                   .short 0x0ae8
    57b0:	|  |  |  |                                                   .short 0x0ae8
    57b2:	|  |  |  |                                                   .short 0x02d0
    57b4:	|  |  |  |                                                   btst d1,2792(a4)
    57b8:	|  |  |  |                                                   .short 0x0ae8
    57ba:	|  |  |  |                                                   .short 0x0ae8
    57bc:	|  |  |  |                                                   andi.l #61342600,d2
    57c2:	|  |  |  |                                                   .short 0x00e2
    57c4:	|  |  |  |                                                   .short 0x040a
    57c6:	|  |  |  |                                                   andi.w #968,-(a2)
    57ca:	|  |  |  |                                                   eori.b #72,2534(a6)
    57d0:	|  |  |  |                                                   .short 0x0ae8
    57d2:	|  |  |  |                                                   .short 0x0ae8
    57d4:	|  |  |  |                                                   eori.l #65538792,(a6)+
    57da:	|  |  |  |                                                   .short 0x0ae8
    57dc:	|  |  |  |                                                   bclr d3,d0
    57de:	|  |  |  |                                                   bchg #-6,(-22,a0,d0.l)
    57e4:	|  |  |  |                                                   addi.w #1068,d6
    57e8:	|  |  |  |                                                   subi.b #44,2570(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    57ee:	|  |  |  |                                                   movea.l 84(sp),a0
    57f2:	|  |  |  |                                                   move.l 40(a0),d0
    57f6:	|  |  |  |                                            ,----- beq.s 5864 <continueFunction+0x14c>
				struct loadedFunction * returnTo = fun -> calledBy;
    57f8:	|  |  |  |                                            |      movea.l 84(sp),a0
    57fc:	|  |  |  |                                            |      move.l 40(a0),48(sp)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    5802:	|  |  |  |                                            |      movea.l 84(sp),a0
    5806:	|  |  |  |                                            |      move.w 48(a0),d0
    580a:	|  |  |  |                                            |  ,-- beq.s 5824 <continueFunction+0x10c>
    580c:	|  |  |  |                                            |  |   moveq #28,d1
    580e:	|  |  |  |                                            |  |   add.l 48(sp),d1
    5812:	|  |  |  |                                            |  |   moveq #28,d0
    5814:	|  |  |  |                                            |  |   add.l 84(sp),d0
    5818:	|  |  |  |                                            |  |   move.l d1,-(sp)
    581a:	|  |  |  |                                            |  |   move.l d0,-(sp)
    581c:	|  |  |  |                                            |  |   jsr 15f58 <copyVariable>
    5822:	|  |  |  |                                            |  |   addq.l #8,sp
				int tmptimeleft = fun -> timeLeft;
    5824:	|  |  |  |                                            |  '-> movea.l 84(sp),a0
    5828:	|  |  |  |                                            |      move.l 12(a0),44(sp)
				finishFunction (fun);
    582e:	|  |  |  |                                            |      move.l 84(sp),-(sp)
    5832:	|  |  |  |                                            |      jsr 65e6 <finishFunction>
    5838:	|  |  |  |                                            |      addq.l #4,sp
				fun = returnTo;
    583a:	|  |  |  |                                            |      move.l 48(sp),84(sp)
				fun -> timeLeft += tmptimeleft;
    5840:	|  |  |  |                                            |      movea.l 84(sp),a0
    5844:	|  |  |  |                                            |      move.l 12(a0),d0
    5848:	|  |  |  |                                            |      add.l 44(sp),d0
    584c:	|  |  |  |                                            |      movea.l 84(sp),a0
    5850:	|  |  |  |                                            |      move.l d0,12(a0)
				restartFunction (fun);
    5854:	|  |  |  |                                            |      move.l 84(sp),-(sp)
    5858:	|  |  |  |                                            |      jsr 79c6 <restartFunction>
    585e:	|  |  |  |                                            |      addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    5860:	|  |  |  |  ,-----------------------------------------|----- bra.w 65be <continueFunction+0xea6>
				finishFunction (fun);
    5864:	|  |  |  |  |                                         '----> move.l 84(sp),-(sp)
    5868:	|  |  |  |  |                                                jsr 65e6 <finishFunction>
    586e:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5870:	|  |  |  |  |                                                clr.w 76(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    5874:	|  |  |  |  |                                                clr.w 78(sp)
			break;
    5878:	|  |  |  |  +----------------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    587c:	|  |  |  |  |                                                movea.l 84(sp),a0
    5880:	|  |  |  |  |                                                move.l 28(a0),d0
    5884:	|  |  |  |  |                                                moveq #2,d1
    5886:	|  |  |  |  |                                                cmp.l d0,d1
    5888:	|  |  |  |  |                                            ,-- beq.s 5894 <continueFunction+0x17c>
    588a:	|  |  |  |  |                                            |   moveq #4,d1
    588c:	|  |  |  |  |                                            |   cmp.l d0,d1
    588e:	|  |  |  |  |                                         ,--|-- beq.s 58e2 <continueFunction+0x1ca>
    5890:	|  |  |  |  |                                ,--------|--|-- bra.w 59ca <continueFunction+0x2b2>
				case SVT_FUNC:
				pauseFunction (fun);		
    5894:	|  |  |  |  |                                |        |  '-> move.l 84(sp),-(sp)
    5898:	|  |  |  |  |                                |        |      jsr 794e <pauseFunction>
    589e:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    58a0:	|  |  |  |  |                                |        |      moveq #24,d0
    58a2:	|  |  |  |  |                                |        |      add.l 84(sp),d0
    58a6:	|  |  |  |  |                                |        |      movea.l 84(sp),a0
    58aa:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    58ae:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    58b2:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    58b4:	|  |  |  |  |                                |        |      move.l 92(sp),-(sp)
    58b8:	|  |  |  |  |                                |        |      move.l 84(sp),-(sp)
    58bc:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    58be:	|  |  |  |  |                                |        |      jsr 7d42 <startNewFunctionNum>
    58c4:	|  |  |  |  |                                |        |      lea 20(sp),sp
    58c8:	|  |  |  |  |                                |        |      tst.l d0
    58ca:	|  |  |  |  |                                |        |  ,-- bne.s 58d2 <continueFunction+0x1ba>
    58cc:	|  |  |  |  |                                |        |  |   clr.w d0
    58ce:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 65e0 <continueFunction+0xec8>
				fun = allRunningFunctions;
    58d2:	|  |  |  |  |                                |        |  '-> move.l 1e856 <allRunningFunctions>,84(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    58da:	|  |  |  |  |                                |        |      clr.w 76(sp)
				break;
    58de:	|  |  |  |  |                                |  ,-----|----- bra.w 59de <continueFunction+0x2c6>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    58e2:	|  |  |  |  |                                |  |     '----> move.l 72(sp),d1
    58e6:	|  |  |  |  |                                |  |            movea.l 84(sp),a0
    58ea:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    58ee:	|  |  |  |  |                                |  |            move.l 84(sp),-(sp)
    58f2:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    58f4:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    58f6:	|  |  |  |  |                                |  |            jsr 1476a <callBuiltIn>
    58fc:	|  |  |  |  |                                |  |            lea 12(sp),sp
    5900:	|  |  |  |  |                                |  |            move.l d0,56(sp)

					switch (br) {
    5904:	|  |  |  |  |                                |  |            moveq #5,d0
    5906:	|  |  |  |  |                                |  |            cmp.l 56(sp),d0
    590a:	|  |  |  |  |                                |  |  ,-------- bcs.w 59c6 <continueFunction+0x2ae>
    590e:	|  |  |  |  |                                |  |  |         move.l 56(sp),d0
    5912:	|  |  |  |  |                                |  |  |         add.l d0,d0
    5914:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    5916:	|  |  |  |  |                                |  |  |         adda.l #22818,a0
    591c:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    591e:	|  |  |  |  |                                |  |  |         jmp (5922 <continueFunction+0x20a>,pc,d0.w)
    5922:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    5928:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    592c:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    5932:	|  |  |  |  |                                |  |  |         .short 0x9b7b
    5934:	|  |  |  |  |                                |  |  |         jsr 1857e <KPrintF>
    593a:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    593c:	|  |  |  |  |                                |  |  |         clr.w d0
    593e:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 65e0 <continueFunction+0xec8>

						case BR_PAUSE:
						pauseFunction (fun);
    5942:	|  |  |  |  |                                |  |  |         move.l 84(sp),-(sp)
    5946:	|  |  |  |  |                                |  |  |         jsr 794e <pauseFunction>
    594c:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    594e:	|  |  |  |  |                                |  |  |         clr.w 78(sp)
						break;
    5952:	|  |  |  |  |                                |  |  |  ,----- bra.s 59c8 <continueFunction+0x2b0>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    5954:	|  |  |  |  |                                |  |  |  |      clr.w 78(sp)
						advanceNow = FALSE;
    5958:	|  |  |  |  |                                |  |  |  |      clr.w 76(sp)
						break;
    595c:	|  |  |  |  |                                |  |  |  +----- bra.s 59c8 <continueFunction+0x2b0>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    595e:	|  |  |  |  |                                |  |  |  |      movea.l 84(sp),a0
    5962:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),52(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    5968:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    596a:	|  |  |  |  |                                |  |  |  |      add.l 84(sp),d0
    596e:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5972:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5976:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5978:	|  |  |  |  |                                |  |  |  |      jsr 16390 <setVariable>
    597e:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    5982:	|  |  |  |  |                                |  |  |  |      move.l 84(sp),-(sp)
    5986:	|  |  |  |  |                                |  |  |  |      jsr 794e <pauseFunction>
    598c:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    598e:	|  |  |  |  |                                |  |  |  |      move.l 1e88e <noStack>,d1
    5994:	|  |  |  |  |                                |  |  |  |      move.l 52(sp),d0
    5998:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    599a:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    599c:	|  |  |  |  |                                |  |  |  |      move.l 92(sp),-(sp)
    59a0:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    59a2:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    59a4:	|  |  |  |  |                                |  |  |  |      jsr 7d42 <startNewFunctionNum>
    59aa:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    59ae:	|  |  |  |  |                                |  |  |  |      tst.l d0
    59b0:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 59b8 <continueFunction+0x2a0>
    59b2:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    59b4:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 65e0 <continueFunction+0xec8>
							fun = allRunningFunctions;
    59b8:	|  |  |  |  |                                |  |  |  |  '-> move.l 1e856 <allRunningFunctions>,84(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    59c0:	|  |  |  |  |                                |  |  |  |      clr.w 76(sp)
						}
						break;
    59c4:	|  |  |  |  |                                |  |  |  +----- bra.s 59c8 <continueFunction+0x2b0>

						default:
						break;
    59c6:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    59c8:	|  |  |  |  |                                |  +-----'----X bra.s 59de <continueFunction+0x2c6>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    59ca:	|  |  |  |  |                                '--|----------> pea 19bc6 <PutChar+0xba6>
    59d0:	|  |  |  |  |                                   |            jsr 1857e <KPrintF>
    59d6:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    59d8:	|  |  |  |  |                                   |            clr.w d0
    59da:	|  +--|--|--|-----------------------------------|----------- bra.w 65e0 <continueFunction+0xec8>
			}
			break;
    59de:	|  |  |  |  +-----------------------------------'----------X bra.w 65be <continueFunction+0xea6>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    59e2:	|  |  |  |  |                                                moveq #28,d0
    59e4:	|  |  |  |  |                                                add.l 84(sp),d0
    59e8:	|  |  |  |  |                                                clr.l -(sp)
    59ea:	|  |  |  |  |                                                clr.l -(sp)
    59ec:	|  |  |  |  |                                                move.l d0,-(sp)
    59ee:	|  |  |  |  |                                                jsr 16390 <setVariable>
    59f4:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    59f8:	|  |  |  |  +----------------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    59fc:	|  |  |  |  |                                                move.l 72(sp),d1
    5a00:	|  |  |  |  |                                                moveq #28,d0
    5a02:	|  |  |  |  |                                                add.l 84(sp),d0
    5a06:	|  |  |  |  |                                                move.l d1,-(sp)
    5a08:	|  |  |  |  |                                                pea 5 <_start+0x5>
    5a0c:	|  |  |  |  |                                                move.l d0,-(sp)
    5a0e:	|  |  |  |  |                                                jsr 16390 <setVariable>
    5a14:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5a18:	|  |  |  |  +----------------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    5a1c:	|  |  |  |  |                                                move.l 72(sp),d1
    5a20:	|  |  |  |  |                                                moveq #28,d0
    5a22:	|  |  |  |  |                                                add.l 84(sp),d0
    5a26:	|  |  |  |  |                                                move.l d1,-(sp)
    5a28:	|  |  |  |  |                                                pea 1 <_start+0x1>
    5a2c:	|  |  |  |  |                                                move.l d0,-(sp)
    5a2e:	|  |  |  |  |                                                jsr 16390 <setVariable>
    5a34:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5a38:	|  |  |  |  +----------------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    5a3c:	|  |  |  |  |                                                moveq #28,d0
    5a3e:	|  |  |  |  |                                                add.l 84(sp),d0
    5a42:	|  |  |  |  |                                                movea.l 84(sp),a0
    5a46:	|  |  |  |  |                                                movea.l 20(a0),a0
    5a4a:	|  |  |  |  |                                                move.l 72(sp),d1
    5a4e:	|  |  |  |  |                                                lsl.l #3,d1
    5a50:	|  |  |  |  |                                                add.l a0,d1
    5a52:	|  |  |  |  |                                                move.l d0,-(sp)
    5a54:	|  |  |  |  |                                                move.l d1,-(sp)
    5a56:	|  |  |  |  |                                                jsr 15f58 <copyVariable>
    5a5c:	|  |  |  |  |                                                addq.l #8,sp
    5a5e:	|  |  |  |  |                                                tst.w d0
    5a60:	|  |  |  |  |  ,-------------------------------------------- bne.w 659c <continueFunction+0xe84>
    5a64:	|  |  |  |  |  |                                             clr.w d0
    5a66:	|  +--|--|--|--|-------------------------------------------- bra.w 65e0 <continueFunction+0xec8>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    5a6a:	|  |  |  |  |  |                                             moveq #28,d0
    5a6c:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5a70:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5a72:	|  |  |  |  |  |                                             jsr 15fde <getBoolean>
    5a78:	|  |  |  |  |  |                                             addq.l #4,sp
    5a7a:	|  |  |  |  |  |                                             tst.w d0
    5a7c:	|  |  |  |  |  |                                      ,----- beq.s 5a98 <continueFunction+0x380>
    5a7e:	|  |  |  |  |  |                                      |      movea.l 84(sp),a0
    5a82:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    5a86:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    5a88:	|  |  |  |  |  |                                      |      jsr 15fde <getBoolean>
    5a8e:	|  |  |  |  |  |                                      |      addq.l #4,sp
    5a90:	|  |  |  |  |  |                                      |      tst.w d0
    5a92:	|  |  |  |  |  |                                      +----- beq.s 5a98 <continueFunction+0x380>
    5a94:	|  |  |  |  |  |                                      |      moveq #1,d0
    5a96:	|  |  |  |  |  |                                      |  ,-- bra.s 5a9a <continueFunction+0x382>
    5a98:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5a9a:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5a9c:	|  |  |  |  |  |                                             add.l 84(sp),d1
    5aa0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5aa2:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5aa6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5aa8:	|  |  |  |  |  |                                             jsr 16390 <setVariable>
    5aae:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5ab2:	|  |  |  |  |  |                                             moveq #24,d0
    5ab4:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5ab8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5aba:	|  |  |  |  |  |                                             jsr 16422 <trimStack>
    5ac0:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5ac2:	|  |  |  |  +--|-------------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5ac6:	|  |  |  |  |  |                                             moveq #28,d0
    5ac8:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5acc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5ace:	|  |  |  |  |  |                                             jsr 15fde <getBoolean>
    5ad4:	|  |  |  |  |  |                                             addq.l #4,sp
    5ad6:	|  |  |  |  |  |                                             tst.w d0
    5ad8:	|  |  |  |  |  |                                         ,-- bne.s 5af0 <continueFunction+0x3d8>
    5ada:	|  |  |  |  |  |                                         |   movea.l 84(sp),a0
    5ade:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5ae2:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    5ae4:	|  |  |  |  |  |                                         |   jsr 15fde <getBoolean>
    5aea:	|  |  |  |  |  |                                         |   addq.l #4,sp
    5aec:	|  |  |  |  |  |                                         |   tst.w d0
    5aee:	|  |  |  |  |  |                                      ,--|-- beq.s 5af4 <continueFunction+0x3dc>
    5af0:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    5af2:	|  |  |  |  |  |                                      |  ,-- bra.s 5af6 <continueFunction+0x3de>
    5af4:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5af6:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5af8:	|  |  |  |  |  |                                             add.l 84(sp),d1
    5afc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5afe:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5b02:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5b04:	|  |  |  |  |  |                                             jsr 16390 <setVariable>
    5b0a:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5b0e:	|  |  |  |  |  |                                             moveq #24,d0
    5b10:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5b14:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b16:	|  |  |  |  |  |                                             jsr 16422 <trimStack>
    5b1c:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5b1e:	|  |  |  |  +--|-------------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    5b22:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5b26:	|  |  |  |  |  |                                             moveq #28,d0
    5b28:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5b2c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5b2e:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    5b32:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b34:	|  |  |  |  |  |                                             jsr 16390 <setVariable>
    5b3a:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5b3e:	|  |  |  |  +--|-------------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    5b42:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5b46:	|  |  |  |  |  |                                             moveq #28,d0
    5b48:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5b4c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5b4e:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    5b52:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b54:	|  |  |  |  |  |                                             jsr 16390 <setVariable>
    5b5a:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5b5e:	|  |  |  |  +--|-------------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5b62:	|  |  |  |  |  |                                             move.l 72(sp),d1
    5b66:	|  |  |  |  |  |                                             moveq #28,d0
    5b68:	|  |  |  |  |  |                                             add.l 84(sp),d0
    5b6c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5b6e:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5b72:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b74:	|  |  |  |  |  |                                             jsr 16390 <setVariable>
    5b7a:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5b7e:	|  |  |  |  +--|-------------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5b82:	|  |  |  |  |  |                                             move.l 1e812 <dialogValue>,d0
    5b88:	|  |  |  |  |  |                                             moveq #1,d1
    5b8a:	|  |  |  |  |  |                                             cmp.l d0,d1
    5b8c:	|  |  |  |  |  |  ,----------------------------------------- beq.w 65a0 <continueFunction+0xe88>
				KPrintF(ERROR_HACKER);
    5b90:	|  |  |  |  |  |  |                                          pea 19bdb <PutChar+0xbbb>
    5b96:	|  |  |  |  |  |  |                                          jsr 1857e <KPrintF>
    5b9c:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5b9e:	|  |  |  |  |  |  |                                          clr.w d0
    5ba0:	|  +--|--|--|--|--|----------------------------------------- bra.w 65e0 <continueFunction+0xec8>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5ba4:	|  |  |  |  |  |  |                                          move.l 72(sp),d1
    5ba8:	|  |  |  |  |  |  |                                          moveq #28,d0
    5baa:	|  |  |  |  |  |  |                                          add.l 84(sp),d0
    5bae:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5bb0:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5bb2:	|  |  |  |  |  |  |                                          jsr 15b22 <loadStringToVar>
    5bb8:	|  |  |  |  |  |  |                                          addq.l #8,sp
    5bba:	|  |  |  |  |  |  |                                          tst.w d0
    5bbc:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 65a4 <continueFunction+0xe8c>
					return FALSE;
    5bc0:	|  |  |  |  |  |  |  |                                       clr.w d0
    5bc2:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 65e0 <continueFunction+0xec8>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5bc6:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5bca:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5bce:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5bd0:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5bd2:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5bd4:	|  |  |  |  |  |  |  |                                ,----- beq.s 5c32 <continueFunction+0x51a>
    5bd6:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    5bd8:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    5bda:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5dc6 <continueFunction+0x6ae>
    5bde:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5be0:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 5bec <continueFunction+0x4d4>
    5be2:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    5be4:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    5be6:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 5c32 <continueFunction+0x51a>
    5be8:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5dc6 <continueFunction+0x6ae>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    5bec:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    5bee:	|  |  |  |  |  |  |  |              |                 |      cmp.l 68(sp),d0
    5bf2:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 5c1e <continueFunction+0x506>
					setVariable (&fun -> reg, SVT_NULL, 0);
    5bf4:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    5bf6:	|  |  |  |  |  |  |  |              |                 |  |   add.l 84(sp),d0
    5bfa:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5bfc:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5bfe:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5c00:	|  |  |  |  |  |  |  |              |                 |  |   jsr 16390 <setVariable>
    5c06:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    5c0a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    5c0c:	|  |  |  |  |  |  |  |              |                 |  |   add.l 84(sp),d0
    5c10:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5c12:	|  |  |  |  |  |  |  |              |                 |  |   jsr 16422 <trimStack>
    5c18:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    5c1a:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5ddc <continueFunction+0x6c4>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    5c1e:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 19c1c <PutChar+0xbfc>
    5c24:	|  |  |  |  |  |  |  |              |  |              |      jsr 1857e <KPrintF>
    5c2a:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    5c2c:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    5c2e:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 65e0 <continueFunction+0xec8>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5c32:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 84(sp),a0
    5c36:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5c3a:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    5c3e:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    5c40:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c56 <continueFunction+0x53e>
					KPrintF((ERROR_INDEX_EMPTY));
    5c42:	|  |  |  |  |  |  |  |              |  |                 |   pea 19c58 <PutChar+0xc38>
    5c48:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1857e <KPrintF>
    5c4e:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    5c50:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5c52:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 65e0 <continueFunction+0xec8>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5c56:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    5c58:	|  |  |  |  |  |  |  |              |  |                     add.l 84(sp),d0
    5c5c:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5c5e:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5c62:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    5c66:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    5c68:	|  |  |  |  |  |  |  |              |  |                     jsr 15a9e <getValueType>
    5c6e:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5c72:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5c74:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c7c <continueFunction+0x564>
    5c76:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5c78:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 65e0 <continueFunction+0xec8>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5c7c:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 84(sp),a0
    5c80:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5c84:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5c86:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5c88:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5c8a:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5cac <continueFunction+0x594>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    5c8c:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5c90:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5c92:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 84(sp),a0
    5c96:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5c9a:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5c9e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5ca0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5ca2:	|  |  |  |  |  |  |  |              |  |                 |   jsr 15728 <fastArrayGetByIndex>
    5ca8:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    5caa:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 5ccc <continueFunction+0x5b4>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    5cac:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5cb0:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5cb2:	|  |  |  |  |  |  |  |              |  |              |      movea.l 84(sp),a0
    5cb6:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    5cba:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5cbe:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5cc0:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5cc2:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5cc4:	|  |  |  |  |  |  |  |              |  |              |      jsr 163b2 <stackGetByIndex>
    5cca:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5ccc:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,64(sp)

					trimStack (&fun -> stack);
    5cd0:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5cd2:	|  |  |  |  |  |  |  |              |  |                     add.l 84(sp),d0
    5cd6:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5cd8:	|  |  |  |  |  |  |  |              |  |                     jsr 16422 <trimStack>
    5cde:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5ce0:	|  |  |  |  |  |  |  |              |  |                     tst.l 64(sp)
    5ce4:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5d00 <continueFunction+0x5e8>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5ce6:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    5ce8:	|  |  |  |  |  |  |  |              |  |                 |   add.l 84(sp),d0
    5cec:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5cee:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5cf0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5cf2:	|  |  |  |  |  |  |  |              |  |                 |   jsr 16390 <setVariable>
    5cf8:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5cfc:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 5dda <continueFunction+0x6c2>
						switch (com) {
    5d00:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5d02:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 68(sp),d0
    5d06:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 5d14 <continueFunction+0x5fc>
    5d08:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5d0a:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 68(sp),d1
    5d0e:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5d5e <continueFunction+0x646>
    5d10:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5da6 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5d14:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 64(sp),-(sp)
    5d18:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5d1c:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5d20:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5d22:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 15a9e <getValueType>
    5d28:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5d2c:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5d2e:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 5d36 <continueFunction+0x61e>
    5d30:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5d32:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5dc0 <continueFunction+0x6a8>
							setVariable (&fun -> reg, SVT_INT, ii);
    5d36:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    5d38:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5d3a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 84(sp),d0
    5d3e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    5d40:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    5d44:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    5d46:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 16390 <setVariable>
    5d4c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5d50:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5d52:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    5d54:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 64(sp),a0
    5d58:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    5d5c:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5dc4 <continueFunction+0x6ac>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5d5e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 64(sp),-(sp)
    5d62:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5d66:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5d6a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    5d6c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 15a9e <getValueType>
    5d72:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5d76:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5d78:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5d7e <continueFunction+0x666>
    5d7a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    5d7c:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5dc0 <continueFunction+0x6a8>
							setVariable (&fun -> reg, SVT_INT, ii);
    5d7e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5d80:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5d82:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 84(sp),d0
    5d86:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5d88:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5d8c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5d8e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 16390 <setVariable>
    5d94:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5d98:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5d9a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5d9c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 64(sp),a0
    5da0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5da4:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5dc4 <continueFunction+0x6ac>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5da6:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5da8:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 84(sp),d0
    5dac:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5dae:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 68(sp),-(sp)
    5db2:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 15f58 <copyVariable>
    5db8:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5dba:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    5dbc:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5dda <continueFunction+0x6c2>
    5dbe:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5dc0:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 65e0 <continueFunction+0xec8>
				break;
    5dc4:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 5dda <continueFunction+0x6c2>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5dc6:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 19c76 <PutChar+0xc56>
    5dcc:	|  |  |  |  |  |  |  |                 |  |                  jsr 1857e <KPrintF>
    5dd2:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5dd4:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5dd6:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 65e0 <continueFunction+0xec8>
				break;
    5dda:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5ddc:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 65be <continueFunction+0xea6>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5de0:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5de4:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5de8:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5dea:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5dec:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5dee:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5dfc <continueFunction+0x6e4>
    5df0:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5df2:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5df4:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5ea8 <continueFunction+0x790>
    5df8:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5f06 <continueFunction+0x7ee>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5dfc:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 84(sp),a0
    5e00:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5e04:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5e08:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5e0a:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5e20 <continueFunction+0x708>
					KPrintF((ERROR_INDEX_EMPTY));
    5e0c:	|  |  |  |  |  |  |  |                             |  |  |   pea 19c58 <PutChar+0xc38>
    5e12:	|  |  |  |  |  |  |  |                             |  |  |   jsr 1857e <KPrintF>
    5e18:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5e1a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5e1c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 65e0 <continueFunction+0xec8>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5e20:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5e22:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5e26:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e28:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5e2c:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5e30:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5e32:	|  |  |  |  |  |  |  |                             |  |      jsr 15a9e <getValueType>
    5e38:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5e3c:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5e3e:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5e46 <continueFunction+0x72e>
    5e40:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5e42:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 65e0 <continueFunction+0xec8>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5e46:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 84(sp),a0
    5e4a:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5e4e:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5e52:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5e54:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5e58:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5e5a:	|  |  |  |  |  |  |  |                             |  |      movea.l 84(sp),a0
    5e5e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5e62:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5e66:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5e68:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5e6a:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5e6c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e6e:	|  |  |  |  |  |  |  |                             |  |      jsr 7bee <stackSetByIndex>
    5e74:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5e78:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5e7a:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5e82 <continueFunction+0x76a>
						return FALSE;
    5e7c:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5e7e:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 65e0 <continueFunction+0xec8>
					}
					trimStack (&fun -> stack);
    5e82:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5e84:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5e88:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e8a:	|  |  |  |  |  |  |  |                             |  |      jsr 16422 <trimStack>
    5e90:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5e92:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5e94:	|  |  |  |  |  |  |  |                             |  |      add.l 84(sp),d0
    5e98:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e9a:	|  |  |  |  |  |  |  |                             |  |      jsr 16422 <trimStack>
    5ea0:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5ea2:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5ea4:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 65be <continueFunction+0xea6>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5ea8:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5eaa:	|  |  |  |  |  |  |  |                             |         add.l 84(sp),d0
    5eae:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5eb0:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5eb4:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5eb8:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5eba:	|  |  |  |  |  |  |  |                             |         jsr 15a9e <getValueType>
    5ec0:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5ec4:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5ec6:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5ece <continueFunction+0x7b6>
    5ec8:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5eca:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 65e0 <continueFunction+0xec8>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5ece:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5ed2:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5ed4:	|  |  |  |  |  |  |  |                             |         movea.l 84(sp),a0
    5ed8:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5edc:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5ee0:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5ee2:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5ee4:	|  |  |  |  |  |  |  |                             |         jsr 15728 <fastArrayGetByIndex>
    5eea:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5eec:	|  |  |  |  |  |  |  |                             |         move.l d0,60(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5ef0:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5f00 <continueFunction+0x7e8>
    5ef2:	|  |  |  |  |  |  |  |                             |     |   pea 19c9a <PutChar+0xc7a>
    5ef8:	|  |  |  |  |  |  |  |                             |     |   jsr 1857e <KPrintF>
    5efe:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5f00:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5f02:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 65e0 <continueFunction+0xec8>
				KPrintF((ERROR_INDEX_NONSTACK));
    5f06:	|  |  |  |  |  |  |  |                             '-------> pea 19c76 <PutChar+0xc56>
    5f0c:	|  |  |  |  |  |  |  |                                       jsr 1857e <KPrintF>
    5f12:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5f14:	|  |  |  |  |  |  |  |                                       clr.w d0
    5f16:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 65e0 <continueFunction+0xec8>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5f1a:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5f1e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5f22:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f26:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f28:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5f2a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f2c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f30:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5f34:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5f36:	|  |  |  |  |  |  |  |                                       jsr 15a9e <getValueType>
    5f3c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5f40:	|  |  |  |  |  |  |  |                                       tst.w d0
    5f42:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5f4a <continueFunction+0x832>
    5f44:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5f46:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 65e0 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    5f4a:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5f4e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5f50:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    5f54:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f56:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f5a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f5c:	|  |  |  |  |  |  |  |                                       jsr 16390 <setVariable>
    5f62:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5f66:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5f6a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5f6c:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5f6e:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    5f72:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5f76:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f7a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f7c:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5f7e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f80:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f84:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f86:	|  |  |  |  |  |  |  |                                       jsr 16390 <setVariable>
    5f8c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5f90:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5f94:	|  |  |  |  |  |  |  |                                       move.l 1e86c <globalVars>,d1
    5f9a:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5f9e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5fa0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5fa2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fa4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fa8:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5fac:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5fae:	|  |  |  |  |  |  |  |                                       jsr 15a9e <getValueType>
    5fb4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5fb8:	|  |  |  |  |  |  |  |                                       tst.w d0
    5fba:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5fc2 <continueFunction+0x8aa>
    5fbc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5fbe:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 65e0 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    5fc2:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5fc6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5fc8:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    5fcc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5fce:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fd2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fd4:	|  |  |  |  |  |  |  |                                       jsr 16390 <setVariable>
    5fda:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5fde:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5fe2:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5fe4:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5fe6:	|  |  |  |  |  |  |  |                                       movea.l 1e86c <globalVars>,a0
    5fec:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    5ff0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ff2:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5ff4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ff6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ffa:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ffc:	|  |  |  |  |  |  |  |                                       jsr 16390 <setVariable>
    6002:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    6006:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    600a:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    600e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    6012:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    6016:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6018:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    601a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    601c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6020:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    6024:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    6026:	|  |  |  |  |  |  |  |                                       jsr 15a9e <getValueType>
    602c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    6030:	|  |  |  |  |  |  |  |                                       tst.w d0
    6032:	|  |  |  |  |  |  |  |                                   ,-- bne.s 603a <continueFunction+0x922>
    6034:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    6036:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 65e0 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    603a:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    603e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    6040:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    6044:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6046:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    604a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    604c:	|  |  |  |  |  |  |  |                                       jsr 16390 <setVariable>
    6052:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    6056:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    605a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    605c:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    605e:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    6062:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    6066:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    606a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    606c:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    606e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6070:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6074:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6076:	|  |  |  |  |  |  |  |                                       jsr 16390 <setVariable>
    607c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    6080:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    6084:	|  |  |  |  |  |  |  |                                       move.l 1e86c <globalVars>,d1
    608a:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    608e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6090:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    6092:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6094:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6098:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    609c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    609e:	|  |  |  |  |  |  |  |                                       jsr 15a9e <getValueType>
    60a4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    60a8:	|  |  |  |  |  |  |  |                                       tst.w d0
    60aa:	|  |  |  |  |  |  |  |                                   ,-- bne.s 60b2 <continueFunction+0x99a>
    60ac:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    60ae:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 65e0 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, ii);
    60b2:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    60b6:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    60b8:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    60bc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    60be:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    60c2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    60c4:	|  |  |  |  |  |  |  |                                       jsr 16390 <setVariable>
    60ca:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    60ce:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    60d2:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    60d4:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    60d6:	|  |  |  |  |  |  |  |                                       movea.l 1e86c <globalVars>,a0
    60dc:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    60e0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    60e2:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    60e4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    60e6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    60ea:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    60ec:	|  |  |  |  |  |  |  |                                       jsr 16390 <setVariable>
    60f2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    60f6:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    60fa:	|  |  |  |  |  |  |  |                                       movea.l 84(sp),a0
    60fe:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    6102:	|  |  |  |  |  |  |  |                                       move.l 72(sp),d0
    6106:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6108:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    610a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    610c:	|  |  |  |  |  |  |  |                                       add.l 84(sp),d0
    6110:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6112:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6114:	|  |  |  |  |  |  |  |                                       jsr 15f58 <copyVariable>
    611a:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    611c:	|  |  |  |  |  |  |  |                                       tst.w d0
    611e:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 65a8 <continueFunction+0xe90>
    6122:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    6124:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 65e0 <continueFunction+0xec8>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    6128:	|  |  |  |  |  |  |  |  |                                    move.l 1e86c <globalVars>,d1
    612e:	|  |  |  |  |  |  |  |  |                                    move.l 72(sp),d0
    6132:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    6134:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    6136:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    6138:	|  |  |  |  |  |  |  |  |                                    add.l 84(sp),d0
    613c:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    613e:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    6140:	|  |  |  |  |  |  |  |  |                                    jsr 15f58 <copyVariable>
    6146:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    6148:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    614a:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 65ac <continueFunction+0xe94>
    614e:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    6150:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 65e0 <continueFunction+0xec8>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    6154:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    6156:	|  |  |  |  |  |  |  |  |  |                                 add.l 84(sp),d0
    615a:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1e86c <globalVars>,a0
    6160:	|  |  |  |  |  |  |  |  |  |                                 move.l 72(sp),d1
    6164:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    6166:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    6168:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    616a:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    616c:	|  |  |  |  |  |  |  |  |  |                                 jsr 15f58 <copyVariable>
    6172:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    6174:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    6176:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 65b0 <continueFunction+0xe98>
    617a:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    617c:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 65e0 <continueFunction+0xec8>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    6180:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    6182:	|  |  |  |  |  |  |  |  |  |  |                              add.l 84(sp),d1
    6186:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    6188:	|  |  |  |  |  |  |  |  |  |  |                              add.l 84(sp),d0
    618c:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    618e:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    6190:	|  |  |  |  |  |  |  |  |  |  |                              jsr 152da <addVarToStack>
    6196:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    6198:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    619a:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 65b4 <continueFunction+0xe9c>
    619e:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    61a0:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 65e0 <continueFunction+0xec8>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    61a4:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    61a6:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 84(sp),d1
    61aa:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    61ac:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 84(sp),d0
    61b0:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    61b2:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    61b4:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 15360 <addVarToStackQuick>
    61ba:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    61bc:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    61be:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 65b8 <continueFunction+0xea0>
    61c2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    61c4:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 65e0 <continueFunction+0xec8>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    61c8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    61ca:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    61ce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    61d0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15fde <getBoolean>
    61d6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    61d8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    61da:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    61dc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    61de:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    61e0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    61e2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    61e4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    61e8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    61ea:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    61ee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    61f0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 16390 <setVariable>
    61f6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    61fa:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    61fe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    6200:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 84(sp),d0
    6204:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    6206:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15fde <getBoolean>
    620c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    620e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    6210:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 65bc <continueFunction+0xea4>
				advanceNow = FALSE;
    6214:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 76(sp)
				fun -> runThisLine = param;
    6218:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    621c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 72(sp),36(a0)
			}
			break;
    6222:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 65bc <continueFunction+0xea4>

			case SLU_BRANCH:
			advanceNow = FALSE;
    6226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 76(sp)
			fun -> runThisLine = param;
    622a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    622e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 72(sp),36(a0)
			break;
    6234:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 65be <continueFunction+0xea6>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    6238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    623a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 84(sp),d0
    623e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    6240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    6244:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    6248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    624a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 15a9e <getValueType>
    6250:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    6254:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    6256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 625e <continueFunction+0xb46>
    6258:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    625a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 65e0 <continueFunction+0xec8>
				setVariable (&fun -> reg, SVT_INT, -i);
    625e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    6262:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    6264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    6266:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    6268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 84(sp),d0
    626c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    626e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    6272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    6274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 16390 <setVariable>
    627a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    627e:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 65be <continueFunction+0xea6>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    6282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 84(sp),a0
    6286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    628a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 6574 <continueFunction+0xe5c>
				int firstValue, secondValue;

				switch (com) {
    628e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    6290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 68(sp),d0
    6294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 6310 <continueFunction+0xbf8>
    6296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    6298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 68(sp),d1
    629c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 635a <continueFunction+0xc42>
    62a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    62a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 68(sp),d0
    62a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 62b4 <continueFunction+0xb9c>
    62a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    62aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 68(sp),d1
    62ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 62e2 <continueFunction+0xbca>
    62b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 635a <continueFunction+0xc42>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    62b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    62b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 84(sp),d0
    62ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 84(sp),a0
    62be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    62c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    62c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    62c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 153d4 <addVariablesInSecond>
    62cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    62ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    62d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 84(sp),d0
    62d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    62d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 16422 <trimStack>
    62dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    62de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 6588 <continueFunction+0xe70>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    62e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    62e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 84(sp),d0
    62e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 84(sp),a0
    62ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    62f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    62f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    62f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 15492 <compareVariablesInSecond>
    62fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    62fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    62fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 84(sp),d0
    6302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    6304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 16422 <trimStack>
    630a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    630c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 6588 <continueFunction+0xe70>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    6310:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    6312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 84(sp),d0
    6316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    631a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    631e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    6320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    6322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 15492 <compareVariablesInSecond>
    6328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    632a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    632c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 84(sp),d0
    6330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    6332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 16422 <trimStack>
    6338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    633a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    633e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    6342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    6344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    6346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    6348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    634e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 84(sp),a0
    6352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    6356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 6588 <continueFunction+0xe70>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    635a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 84(sp),a0
    635e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    6362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    6368:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    636c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    636e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15a9e <getValueType>
    6374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    6378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    637a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 6382 <continueFunction+0xc6a>
    637c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    637e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 65e0 <continueFunction+0xec8>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    6382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    6384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 84(sp),d0
    6388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    638a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    638e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    6392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    6394:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15a9e <getValueType>
    639a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    639e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    63a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 63a8 <continueFunction+0xc90>
    63a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    63a4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 65e0 <continueFunction+0xec8>
					trimStack (&fun -> stack);
    63a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    63aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 84(sp),d0
    63ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    63b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 16422 <trimStack>
    63b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    63b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    63ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 68(sp),d0
    63be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    63c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    63c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 6586 <continueFunction+0xe6e>
    63c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    63c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    63ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #25558,a0
    63d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    63d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (63d6 <continueFunction+0xcbe>,pc,d0.w)
    63d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    63da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    63dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    63e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    63e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    63ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    63f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    63fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    6406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    640a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    640e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18f0a <__mulsi3>
    6418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    641a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    641c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    641e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    642a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16390 <setVariable>
    6430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6588 <continueFunction+0xe70>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    6438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    643c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    6442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    644a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    644e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16390 <setVariable>
    6456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    645a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6588 <continueFunction+0xe70>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    645e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    6466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    646a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18fb6 <__modsi3>
    6470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    6474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    647a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    647c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16390 <setVariable>
    6488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    648c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6588 <continueFunction+0xe70>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    6490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    6498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    649a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    649c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18f88 <__divsi3>
    64a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    64a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    64a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    64ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    64b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16390 <setVariable>
    64ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6588 <continueFunction+0xe70>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    64c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    64c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    64ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    64cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    64ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    64d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    64d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    64d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    64da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    64e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16390 <setVariable>
    64e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 6588 <continueFunction+0xe70>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    64f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    64f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    64f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    64fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    64fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    64fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    650a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    650e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16390 <setVariable>
    6516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    651a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 6588 <continueFunction+0xe70>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    651c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    6528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    652a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    652c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    652e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    653a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    653c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16390 <setVariable>
    6542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 6588 <continueFunction+0xe70>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    6548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    654c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    6554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    655a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    655c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 84(sp),d0
    6560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16390 <setVariable>
    656e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 6588 <continueFunction+0xe70>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    6574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 19cbb <PutChar+0xc9b>
    657a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 1857e <KPrintF>
    6580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    6582:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    6584:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 65e0 <continueFunction+0xec8>
						break;
    6586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    6588:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 65be <continueFunction+0xea6>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    658a:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 19cd3 <PutChar+0xcb3>
    6590:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 1857e <KPrintF>
    6596:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    6598:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    659a:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 65e0 <continueFunction+0xec8>
			break;
    659c:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    659e:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 65be <continueFunction+0xea6>
			break;
    65a0:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    65a2:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 65be <continueFunction+0xea6>
			break;
    65a4:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    65a6:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 65be <continueFunction+0xea6>
			break;
    65a8:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    65aa:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 65be <continueFunction+0xea6>
			break;
    65ac:	|  |  |     |              '--|--|--|--|-------------------> nop
    65ae:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 65be <continueFunction+0xea6>
			break;
    65b0:	|  |  |     |                 '--|--|--|-------------------> nop
    65b2:	|  |  |     +--------------------|--|--|-------------------- bra.s 65be <continueFunction+0xea6>
			break;
    65b4:	|  |  |     |                    '--|--|-------------------> nop
    65b6:	|  |  |     +-----------------------|--|-------------------- bra.s 65be <continueFunction+0xea6>
			break;
    65b8:	|  |  |     |                       '--|-------------------> nop
    65ba:	|  |  |     +--------------------------|-------------------- bra.s 65be <continueFunction+0xea6>
			break;
    65bc:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    65be:	|  |  |     '----------------------------------------------> tst.w 76(sp)
    65c2:	+--|--|----------------------------------------------------- beq.s 65d6 <continueFunction+0xebe>
    65c4:	|  |  |                                                      movea.l 84(sp),a0
    65c8:	|  |  |                                                      move.l 36(a0),d0
    65cc:	|  |  |                                                      addq.l #1,d0
    65ce:	|  |  |                                                      movea.l 84(sp),a0
    65d2:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    65d6:	'--|--|----------------------------------------------------> tst.w 78(sp)
    65da:	   |  '----------------------------------------------------- bne.w 5740 <continueFunction+0x28>

	}
	return TRUE;
    65de:	   |                                                         moveq #1,d0
}
    65e0:	   '-------------------------------------------------------> lea 80(sp),sp
    65e4:	                                                             rts

000065e6 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	//KPrintF("finishFunction started\n");

	pauseFunction (fun);
    65e6:	    move.l 4(sp),-(sp)
    65ea:	    jsr 794e <pauseFunction>
    65f0:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    65f2:	    movea.l 1e224 <currentEvents>,a0
    65f8:	    move.l 20(a0),d0
    65fc:	    cmp.l 4(sp),d0
    6600:	,-- beq.s 660e <finishFunction+0x28>
		unloadFunction (fun);
    6602:	|   move.l 4(sp),-(sp)
    6606:	|   jsr 7d8e <unloadFunction>
    660c:	|   addq.l #4,sp
	}	
	//KPrintF("finishFunction finished\n");
}
    660e:	'-> nop
    6610:	    rts

00006612 <freezeSubs>:

void freezeSubs () {
    6612:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6614:	          move.l 1e856 <allRunningFunctions>,(sp)

	while (thisFunction) {
    661a:	   ,----- bra.s 6638 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    661c:	,--|----> movea.l (sp),a0
    661e:	|  |      move.w 52(a0),d0
    6622:	|  |  ,-- bne.s 6632 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    6624:	|  |  |   movea.l (sp),a0
    6626:	|  |  |   move.b 56(a0),d0
    662a:	|  |  |   addq.b #1,d0
    662c:	|  |  |   movea.l (sp),a0
    662e:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    6632:	|  |  '-> movea.l (sp),a0
    6634:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6638:	|  '----> tst.l (sp)
    663a:	'-------- bne.s 661c <freezeSubs+0xa>
	}
}
    663c:	          nop
    663e:	          nop
    6640:	          addq.l #4,sp
    6642:	          rts

00006644 <handleInput>:

BOOL handleInput () {
    6644:	             lea -20(sp),sp
    6648:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    664a:	             move.l 1e9d4 <overRegion>,d0
    6650:	         ,-- bne.s 6658 <handleInput+0x14>
    6652:	         |   jsr 16cda <getOverRegion>

	if (input.justMoved) {
    6658:	         '-> move.w 1e874 <input+0x4>,d0
    665e:	         ,-- beq.s 669c <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    6660:	         |   movea.l 1e224 <currentEvents>,a0
    6666:	         |   move.l 16(a0),d0
    666a:	         +-- beq.s 669c <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    666c:	         |   move.l 1e88e <noStack>,d1
    6672:	         |   movea.l 1e224 <currentEvents>,a0
    6678:	         |   move.l 16(a0),d0
    667c:	         |   pea 1 <_start+0x1>
    6680:	         |   move.l d1,-(sp)
    6682:	         |   clr.l -(sp)
    6684:	         |   clr.l -(sp)
    6686:	         |   move.l d0,-(sp)
    6688:	         |   jsr 7d42 <startNewFunctionNum>
    668e:	         |   lea 20(sp),sp
    6692:	         |   tst.l d0
    6694:	         +-- bne.s 669c <handleInput+0x58>
    6696:	         |   clr.w d0
    6698:	,--------|-- bra.w 68c2 <handleInput+0x27e>
		}
	}
	input.justMoved = FALSE;
    669c:	|        '-> clr.w 1e874 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    66a2:	|            move.l 1e886 <lastRegion>,d1
    66a8:	|            move.l 1e9d4 <overRegion>,d0
    66ae:	|            cmp.l d1,d0
    66b0:	|  ,-------- beq.w 6788 <handleInput+0x144>
    66b4:	|  |         movea.l 1e224 <currentEvents>,a0
    66ba:	|  |         move.l 20(a0),d0
    66be:	|  +-------- beq.w 6788 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    66c2:	|  |         moveq #12,d0
    66c4:	|  |         move.l d0,20(sp)
    66c8:	|  |         clr.l 16(sp)
    66cc:	|  |         move.l 1e8c0 <SysBase>,d0
    66d2:	|  |         movea.l d0,a6
    66d4:	|  |         move.l 20(sp),d0
    66d8:	|  |         move.l 16(sp),d1
    66dc:	|  |         jsr -684(a6)
    66e0:	|  |         move.l d0,12(sp)
    66e4:	|  |         move.l 12(sp),d0
    66e8:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    66ec:	|  |         move.l 4(sp),d0
    66f0:	|  |     ,-- bne.s 6706 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    66f2:	|  |     |   pea 19cff <PutChar+0xcdf>
    66f8:	|  |     |   jsr 1857e <KPrintF>
    66fe:	|  |     |   addq.l #4,sp
			return FALSE;
    6700:	|  |     |   clr.w d0
    6702:	+--|-----|-- bra.w 68c2 <handleInput+0x27e>
		}
		
		initVarNew (tempStack -> thisVar);
    6706:	|  |     '-> movea.l 4(sp),a0
    670a:	|  |         clr.l (a0)
		if (overRegion) {
    670c:	|  |         move.l 1e9d4 <overRegion>,d0
    6712:	|  |  ,----- beq.s 673a <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    6714:	|  |  |      movea.l 1e9d4 <overRegion>,a0
    671a:	|  |  |      movea.l 28(a0),a0
    671e:	|  |  |      move.l 4(a0),d1
    6722:	|  |  |      move.l 4(sp),d0
    6726:	|  |  |      move.l d1,-(sp)
    6728:	|  |  |      pea 7 <_start+0x7>
    672c:	|  |  |      move.l d0,-(sp)
    672e:	|  |  |      jsr 16390 <setVariable>
    6734:	|  |  |      lea 12(sp),sp
    6738:	|  |  |  ,-- bra.s 6750 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    673a:	|  |  '--|-> move.l 4(sp),d0
    673e:	|  |     |   clr.l -(sp)
    6740:	|  |     |   pea 1 <_start+0x1>
    6744:	|  |     |   move.l d0,-(sp)
    6746:	|  |     |   jsr 16390 <setVariable>
    674c:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    6750:	|  |     '-> movea.l 4(sp),a0
    6754:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    6758:	|  |         movea.l 1e224 <currentEvents>,a0
    675e:	|  |         move.l 20(a0),d0
    6762:	|  |         pea 1 <_start+0x1>
    6766:	|  |         lea 8(sp),a0
    676a:	|  |         move.l a0,-(sp)
    676c:	|  |         clr.l -(sp)
    676e:	|  |         pea 1 <_start+0x1>
    6772:	|  |         move.l d0,-(sp)
    6774:	|  |         jsr 7c32 <startNewFunctionLoaded>
    677a:	|  |         lea 20(sp),sp
    677e:	|  |         tst.l d0
    6780:	|  +-------- bne.s 6788 <handleInput+0x144>
    6782:	|  |         clr.w d0
    6784:	+--|-------- bra.w 68c2 <handleInput+0x27e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    6788:	|  '-------> move.w 1e876 <input+0x6>,d0
    678e:	|        ,-- beq.s 67cc <handleInput+0x188>
    6790:	|        |   movea.l 1e224 <currentEvents>,a0
    6796:	|        |   move.l 4(a0),d0
    679a:	|        +-- beq.s 67cc <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    679c:	|        |   move.l 1e88e <noStack>,d1
    67a2:	|        |   movea.l 1e224 <currentEvents>,a0
    67a8:	|        |   move.l 4(a0),d0
    67ac:	|        |   pea 1 <_start+0x1>
    67b0:	|        |   move.l d1,-(sp)
    67b2:	|        |   clr.l -(sp)
    67b4:	|        |   clr.l -(sp)
    67b6:	|        |   move.l d0,-(sp)
    67b8:	|        |   jsr 7d42 <startNewFunctionNum>
    67be:	|        |   lea 20(sp),sp
    67c2:	|        |   tst.l d0
    67c4:	|        +-- bne.s 67cc <handleInput+0x188>
    67c6:	|        |   clr.w d0
    67c8:	+--------|-- bra.w 68c2 <handleInput+0x27e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    67cc:	|        '-> move.w 1e878 <input+0x8>,d0
    67d2:	|        ,-- beq.s 6810 <handleInput+0x1cc>
    67d4:	|        |   movea.l 1e224 <currentEvents>,a0
    67da:	|        |   move.l 12(a0),d0
    67de:	|        +-- beq.s 6810 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    67e0:	|        |   move.l 1e88e <noStack>,d1
    67e6:	|        |   movea.l 1e224 <currentEvents>,a0
    67ec:	|        |   move.l 12(a0),d0
    67f0:	|        |   pea 1 <_start+0x1>
    67f4:	|        |   move.l d1,-(sp)
    67f6:	|        |   clr.l -(sp)
    67f8:	|        |   clr.l -(sp)
    67fa:	|        |   move.l d0,-(sp)
    67fc:	|        |   jsr 7d42 <startNewFunctionNum>
    6802:	|        |   lea 20(sp),sp
    6806:	|        |   tst.l d0
    6808:	|        +-- bne.s 6810 <handleInput+0x1cc>
    680a:	|        |   clr.w d0
    680c:	+--------|-- bra.w 68c2 <handleInput+0x27e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction) {
    6810:	|        '-> move.w 1e870 <input>,d0
    6816:	|        ,-- beq.s 686e <handleInput+0x22a>
    6818:	|        |   movea.l 1e224 <currentEvents>,a0
    681e:	|        |   move.l (a0),d0
    6820:	|        +-- beq.s 686e <handleInput+0x22a>
		int test[1];
		test[0] = currentEvents -> leftMouseFunction;
    6822:	|        |   movea.l 1e224 <currentEvents>,a0
    6828:	|        |   move.l (a0),d0
    682a:	|        |   move.l d0,8(sp)
		KPrintF("handleinput: Onleftmousefunction: %ld will be run\n", test[0]);
    682e:	|        |   move.l 8(sp),d0
    6832:	|        |   move.l d0,-(sp)
    6834:	|        |   pea 19d35 <PutChar+0xd15>
    683a:	|        |   jsr 1857e <KPrintF>
    6840:	|        |   addq.l #8,sp
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6842:	|        |   move.l 1e88e <noStack>,d1
    6848:	|        |   movea.l 1e224 <currentEvents>,a0
    684e:	|        |   move.l (a0),d0
    6850:	|        |   pea 1 <_start+0x1>
    6854:	|        |   move.l d1,-(sp)
    6856:	|        |   clr.l -(sp)
    6858:	|        |   clr.l -(sp)
    685a:	|        |   move.l d0,-(sp)
    685c:	|        |   jsr 7d42 <startNewFunctionNum>
    6862:	|        |   lea 20(sp),sp
    6866:	|        |   tst.l d0
    6868:	|        +-- bne.s 686e <handleInput+0x22a>
    686a:	|        |   clr.w d0
    686c:	+--------|-- bra.s 68c2 <handleInput+0x27e>
	}		
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    686e:	|        '-> move.w 1e872 <input+0x2>,d0
    6874:	|        ,-- beq.s 68b0 <handleInput+0x26c>
    6876:	|        |   movea.l 1e224 <currentEvents>,a0
    687c:	|        |   move.l 8(a0),d0
    6880:	|        +-- beq.s 68b0 <handleInput+0x26c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6882:	|        |   move.l 1e88e <noStack>,d1
    6888:	|        |   movea.l 1e224 <currentEvents>,a0
    688e:	|        |   move.l 8(a0),d0
    6892:	|        |   pea 1 <_start+0x1>
    6896:	|        |   move.l d1,-(sp)
    6898:	|        |   clr.l -(sp)
    689a:	|        |   clr.l -(sp)
    689c:	|        |   move.l d0,-(sp)
    689e:	|        |   jsr 7d42 <startNewFunctionNum>
    68a4:	|        |   lea 20(sp),sp
    68a8:	|        |   tst.l d0
    68aa:	|        +-- bne.s 68b0 <handleInput+0x26c>
    68ac:	|        |   clr.w d0
    68ae:	+--------|-- bra.s 68c2 <handleInput+0x27e>
	}

	lastRegion = overRegion;
    68b0:	|        '-> move.l 1e9d4 <overRegion>,d0
    68b6:	|            move.l d0,1e886 <lastRegion>
	return runSludge ();
    68bc:	|            jsr 7a06 <runSludge>
}
    68c2:	'----------> movea.l (sp)+,a6
    68c4:	             lea 20(sp),sp
    68c8:	             rts

000068ca <initSludge>:

BOOL initSludge (char * filename) {
    68ca:	             lea -292(sp),sp
    68ce:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    68d2:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    68d6:	             jsr b75c <makeNullAnim>
    68dc:	             move.l d0,1e7b6 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    68e2:	             pea 1e868 <gameVersion>
    68e8:	             pea 19d68 <PutChar+0xd48>
    68ee:	             pea 45 <_start+0x45>
    68f2:	             pea 47 <_start+0x47>
    68f6:	             move.l 332(sp),-(sp)
    68fa:	             jsr 75de <openAndVerify>
    6900:	             lea 20(sp),sp
    6904:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    6908:	         ,-- bne.s 6910 <initSludge+0x46>
    690a:	         |   clr.w d0
    690c:	,--------|-- bra.w 7038 <initSludge+0x76e>
	if (FGetC (fp)) {
    6910:	|        '-> move.l 288(sp),284(sp)
    6916:	|            move.l 1e8c8 <DOSBase>,d0
    691c:	|            movea.l d0,a6
    691e:	|            move.l 284(sp),d1
    6922:	|            jsr -306(a6)
    6926:	|            move.l d0,280(sp)
    692a:	|            move.l 280(sp),d0
    692e:	|  ,-------- beq.w 6ad8 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    6932:	|  |         move.l 288(sp),-(sp)
    6936:	|  |         jsr 6bc <get2bytes>
    693c:	|  |         addq.l #4,sp
    693e:	|  |         move.l d0,1e892 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    6944:	|  |         move.l 1e892 <numBIFNames>,d0
    694a:	|  |         move.l d0,276(sp)
    694e:	|  |         clr.l 272(sp)
    6952:	|  |         move.l 1e8c0 <SysBase>,d0
    6958:	|  |         movea.l d0,a6
    695a:	|  |         move.l 276(sp),d0
    695e:	|  |         move.l 272(sp),d1
    6962:	|  |         jsr -684(a6)
    6966:	|  |         move.l d0,268(sp)
    696a:	|  |         move.l 268(sp),d0
    696e:	|  |         move.l d0,1e842 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    6974:	|  |         move.l 1e842 <allBIFNames>,d0
    697a:	|  |     ,-- bne.s 6982 <initSludge+0xb8>
    697c:	|  |     |   clr.w d0
    697e:	+--|-----|-- bra.w 7038 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6982:	|  |     '-> clr.l 304(sp)
    6986:	|  |     ,-- bra.s 69ac <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    6988:	|  |  ,--|-> move.l 1e842 <allBIFNames>,d1
    698e:	|  |  |  |   move.l 304(sp),d0
    6992:	|  |  |  |   add.l d0,d0
    6994:	|  |  |  |   add.l d0,d0
    6996:	|  |  |  |   movea.l d1,a2
    6998:	|  |  |  |   adda.l d0,a2
    699a:	|  |  |  |   move.l 288(sp),-(sp)
    699e:	|  |  |  |   jsr b02 <readString>
    69a4:	|  |  |  |   addq.l #4,sp
    69a6:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    69a8:	|  |  |  |   addq.l #1,304(sp)
    69ac:	|  |  |  '-> move.l 1e892 <numBIFNames>,d0
    69b2:	|  |  |      cmp.l 304(sp),d0
    69b6:	|  |  '----- bgt.s 6988 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    69b8:	|  |         move.l 288(sp),-(sp)
    69bc:	|  |         jsr 6bc <get2bytes>
    69c2:	|  |         addq.l #4,sp
    69c4:	|  |         move.l d0,1e89e <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    69ca:	|  |         move.l 1e89e <numUserFunc>,d0
    69d0:	|  |         move.l d0,264(sp)
    69d4:	|  |         clr.l 260(sp)
    69d8:	|  |         move.l 1e8c0 <SysBase>,d0
    69de:	|  |         movea.l d0,a6
    69e0:	|  |         move.l 264(sp),d0
    69e4:	|  |         move.l 260(sp),d1
    69e8:	|  |         jsr -684(a6)
    69ec:	|  |         move.l d0,256(sp)
    69f0:	|  |         move.l 256(sp),d0
    69f4:	|  |         move.l d0,1e85a <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    69fa:	|  |         move.l 1e85a <allUserFunc>,d0
    6a00:	|  |     ,-- bne.s 6a08 <initSludge+0x13e>
    6a02:	|  |     |   clr.w d0
    6a04:	+--|-----|-- bra.w 7038 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    6a08:	|  |     '-> clr.l 300(sp)
    6a0c:	|  |     ,-- bra.s 6a32 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    6a0e:	|  |  ,--|-> move.l 1e85a <allUserFunc>,d1
    6a14:	|  |  |  |   move.l 300(sp),d0
    6a18:	|  |  |  |   add.l d0,d0
    6a1a:	|  |  |  |   add.l d0,d0
    6a1c:	|  |  |  |   movea.l d1,a2
    6a1e:	|  |  |  |   adda.l d0,a2
    6a20:	|  |  |  |   move.l 288(sp),-(sp)
    6a24:	|  |  |  |   jsr b02 <readString>
    6a2a:	|  |  |  |   addq.l #4,sp
    6a2c:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    6a2e:	|  |  |  |   addq.l #1,300(sp)
    6a32:	|  |  |  '-> move.l 1e89e <numUserFunc>,d0
    6a38:	|  |  |      cmp.l 300(sp),d0
    6a3c:	|  |  '----- bgt.s 6a0e <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    6a3e:	|  |         move.l 1e868 <gameVersion>,d0
    6a44:	|  |         cmpi.l #258,d0
    6a4a:	|  +-------- ble.w 6ad8 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    6a4e:	|  |         move.l 288(sp),-(sp)
    6a52:	|  |         jsr 6bc <get2bytes>
    6a58:	|  |         addq.l #4,sp
    6a5a:	|  |         move.l d0,1e89a <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    6a60:	|  |         move.l 1e89a <numResourceNames>,d0
    6a66:	|  |         add.l d0,d0
    6a68:	|  |         add.l d0,d0
    6a6a:	|  |         move.l d0,252(sp)
    6a6e:	|  |         clr.l 248(sp)
    6a72:	|  |         move.l 1e8c0 <SysBase>,d0
    6a78:	|  |         movea.l d0,a6
    6a7a:	|  |         move.l 252(sp),d0
    6a7e:	|  |         move.l 248(sp),d1
    6a82:	|  |         jsr -684(a6)
    6a86:	|  |         move.l d0,244(sp)
    6a8a:	|  |         move.l 244(sp),d0
    6a8e:	|  |         move.l d0,1e852 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    6a94:	|  |         move.l 1e852 <allResourceNames>,d0
    6a9a:	|  |     ,-- bne.s 6aa2 <initSludge+0x1d8>
    6a9c:	|  |     |   clr.w d0
    6a9e:	+--|-----|-- bra.w 7038 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    6aa2:	|  |     '-> clr.l 296(sp)
    6aa6:	|  |     ,-- bra.s 6acc <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    6aa8:	|  |  ,--|-> move.l 1e852 <allResourceNames>,d1
    6aae:	|  |  |  |   move.l 296(sp),d0
    6ab2:	|  |  |  |   add.l d0,d0
    6ab4:	|  |  |  |   add.l d0,d0
    6ab6:	|  |  |  |   movea.l d1,a2
    6ab8:	|  |  |  |   adda.l d0,a2
    6aba:	|  |  |  |   move.l 288(sp),-(sp)
    6abe:	|  |  |  |   jsr b02 <readString>
    6ac4:	|  |  |  |   addq.l #4,sp
    6ac6:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    6ac8:	|  |  |  |   addq.l #1,296(sp)
    6acc:	|  |  |  '-> move.l 1e89a <numResourceNames>,d0
    6ad2:	|  |  |      cmp.l 296(sp),d0
    6ad6:	|  |  '----- bgt.s 6aa8 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    6ad8:	|  '-------> move.l #129,1e87a <input+0xa>
	input.mouseY = 100;
    6ae2:	|            moveq #100,d0
    6ae4:	|            move.l d0,1e87e <input+0xe>
	winWidth = get2bytes (fp);
    6aea:	|            move.l 288(sp),-(sp)
    6aee:	|            jsr 6bc <get2bytes>
    6af4:	|            addq.l #4,sp
    6af6:	|            move.l d0,1e806 <winWidth>
	winHeight = get2bytes (fp);
    6afc:	|            move.l 288(sp),-(sp)
    6b00:	|            jsr 6bc <get2bytes>
    6b06:	|            addq.l #4,sp
    6b08:	|            move.l d0,1e80a <winHeight>
	specialSettings = FGetC (fp);
    6b0e:	|            move.l 288(sp),240(sp)
    6b14:	|            move.l 1e8c8 <DOSBase>,d0
    6b1a:	|            movea.l d0,a6
    6b1c:	|            move.l 240(sp),d1
    6b20:	|            jsr -306(a6)
    6b24:	|            move.l d0,236(sp)
    6b28:	|            move.l 236(sp),d0
    6b2c:	|            move.l d0,1e8a2 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    6b32:	|            move.l 288(sp),232(sp)
    6b38:	|            move.l 1e8c8 <DOSBase>,d0
    6b3e:	|            movea.l d0,a6
    6b40:	|            move.l 232(sp),d1
    6b44:	|            jsr -306(a6)
    6b48:	|            move.l d0,228(sp)
    6b4c:	|            move.l 228(sp),d0
    6b50:	|            move.l d0,-(sp)
    6b52:	|            pea 3e8 <encodeFilename+0xea>
    6b56:	|            jsr 18f88 <__divsi3>
    6b5c:	|            addq.l #8,sp
    6b5e:	|            move.l d0,1e236 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    6b64:	|            move.l 288(sp),-(sp)
    6b68:	|            jsr b02 <readString>
    6b6e:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    6b70:	|            move.l 288(sp),224(sp)
    6b76:	|            move.l #125024,220(sp)
    6b7e:	|            moveq #8,d1
    6b80:	|            move.l d1,216(sp)
    6b84:	|            moveq #1,d0
    6b86:	|            move.l d0,212(sp)
    6b8a:	|            move.l 1e8c8 <DOSBase>,d0
    6b90:	|            movea.l d0,a6
    6b92:	|            move.l 224(sp),d1
    6b96:	|            move.l 220(sp),d2
    6b9a:	|            move.l 216(sp),d3
    6b9e:	|            move.l 212(sp),d4
    6ba2:	|            jsr -324(a6)
    6ba6:	|            move.l d0,208(sp)
    6baa:	|            move.l 208(sp),d0
    6bae:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    6bb2:	|            moveq #1,d1
    6bb4:	|            cmp.l 204(sp),d1
    6bb8:	|        ,-- beq.s 6bc8 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6bba:	|        |   pea 19da1 <PutChar+0xd81>
    6bc0:	|        |   jsr 1857e <KPrintF>
    6bc6:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    6bc8:	|        '-> move.l 1e868 <gameVersion>,d0
    6bce:	|            cmpi.l #258,d0
    6bd4:	|        ,-- ble.s 6be4 <initSludge+0x31a>
    6bd6:	|        |   move.l 288(sp),-(sp)
    6bda:	|        |   jsr b02 <readString>
    6be0:	|        |   addq.l #4,sp
    6be2:	|     ,--|-- bra.s 6bf8 <initSludge+0x32e>
    6be4:	|     |  '-> pea 19dbf <PutChar+0xd9f>
    6bea:	|     |      pea 19dbf <PutChar+0xd9f>
    6bf0:	|     |      jsr 14fca <joinStrings>
    6bf6:	|     |      addq.l #8,sp
    6bf8:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    6bfc:	|            move.l 1e868 <gameVersion>,d0
    6c02:	|            cmpi.l #258,d0
    6c08:	|     ,----- ble.s 6c2a <initSludge+0x360>
    6c0a:	|     |      move.l 288(sp),196(sp)
    6c10:	|     |      move.l 1e8c8 <DOSBase>,d0
    6c16:	|     |      movea.l d0,a6
    6c18:	|     |      move.l 196(sp),d1
    6c1c:	|     |      jsr -306(a6)
    6c20:	|     |      move.l d0,192(sp)
    6c24:	|     |      move.l 192(sp),d0
    6c28:	|     |  ,-- bra.s 6c2c <initSludge+0x362>
    6c2a:	|     '--|-> moveq #0,d0
    6c2c:	|        '-> move.l d0,1e9a0 <gameSettings+0x4>
	makeLanguageTable (fp);
    6c32:	|            move.l 288(sp),-(sp)
    6c36:	|            jsr 1496a <makeLanguageTable>
    6c3c:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    6c3e:	|            move.l 1e868 <gameVersion>,d0
    6c44:	|            cmpi.l #261,d0
    6c4a:	|        ,-- ble.s 6c98 <initSludge+0x3ce>
	{
		FGetC(fp);
    6c4c:	|        |   move.l 288(sp),188(sp)
    6c52:	|        |   move.l 1e8c8 <DOSBase>,d0
    6c58:	|        |   movea.l d0,a6
    6c5a:	|        |   move.l 188(sp),d1
    6c5e:	|        |   jsr -306(a6)
    6c62:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    6c66:	|        |   move.l 288(sp),180(sp)
    6c6c:	|        |   move.l 1e8c8 <DOSBase>,d0
    6c72:	|        |   movea.l d0,a6
    6c74:	|        |   move.l 180(sp),d1
    6c78:	|        |   jsr -306(a6)
    6c7c:	|        |   move.l d0,176(sp)
		getFloat (fp);
    6c80:	|        |   move.l 288(sp),-(sp)
    6c84:	|        |   jsr 7d8 <getFloat>
    6c8a:	|        |   addq.l #4,sp
		getFloat (fp);
    6c8c:	|        |   move.l 288(sp),-(sp)
    6c90:	|        |   jsr 7d8 <getFloat>
    6c96:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6c98:	|        '-> move.l 288(sp),-(sp)
    6c9c:	|            jsr b02 <readString>
    6ca2:	|            addq.l #4,sp
    6ca4:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6ca8:	|            pea 19dc0 <PutChar+0xda0>
    6cae:	|            move.l 176(sp),-(sp)
    6cb2:	|            jsr 14f4a <strcmp>
    6cb8:	|            addq.l #8,sp
    6cba:	|            tst.l d0
    6cbc:	|        ,-- beq.s 6cc4 <initSludge+0x3fa>
		return FALSE;
    6cbe:	|        |   clr.w d0
    6cc0:	+--------|-- bra.w 7038 <initSludge+0x76e>
	}
	FreeVec( checker);
    6cc4:	|        '-> move.l 172(sp),168(sp)
    6cca:	|            move.l 1e8c0 <SysBase>,d0
    6cd0:	|            movea.l d0,a6
    6cd2:	|            movea.l 168(sp),a1
    6cd6:	|            jsr -690(a6)
	checker = NULL;
    6cda:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6cde:	|            move.l 288(sp),164(sp)
    6ce4:	|            move.l 1e8c8 <DOSBase>,d0
    6cea:	|            movea.l d0,a6
    6cec:	|            move.l 164(sp),d1
    6cf0:	|            jsr -306(a6)
    6cf4:	|            move.l d0,160(sp)
    6cf8:	|            move.l 160(sp),d0
    6cfc:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6d00:	|            moveq #0,d0
    6d02:	|            move.b 159(sp),d0
    6d06:	|            moveq #1,d1
    6d08:	|            and.l d1,d0
    6d0a:	|        ,-- beq.s 6d62 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6d0c:	|        |   move.l 1e8c8 <DOSBase>,d0
    6d12:	|        |   movea.l d0,a6
    6d14:	|        |   jsr -60(a6)
    6d18:	|        |   move.l d0,38(sp)
    6d1c:	|        |   move.l 38(sp),d0
    6d20:	|        |   move.l d0,34(sp)
    6d24:	|        |   move.l #105928,30(sp)
    6d2c:	|        |   moveq #54,d0
    6d2e:	|        |   move.l d0,26(sp)
    6d32:	|        |   move.l 1e8c8 <DOSBase>,d0
    6d38:	|        |   movea.l d0,a6
    6d3a:	|        |   move.l 34(sp),d1
    6d3e:	|        |   move.l 30(sp),d2
    6d42:	|        |   move.l 26(sp),d3
    6d46:	|        |   jsr -48(a6)
    6d4a:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6d4e:	|        |   pea 19dff <PutChar+0xddf>
    6d54:	|        |   jsr 1857e <KPrintF>
    6d5a:	|        |   addq.l #4,sp
		return FALSE;
    6d5c:	|        |   clr.w d0
    6d5e:	+--------|-- bra.w 7038 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6d62:	|        '-> move.l 288(sp),-(sp)
    6d66:	|            jsr 6bc <get2bytes>
    6d6c:	|            addq.l #4,sp
    6d6e:	|            move.l d0,1e896 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6d74:	|            move.l 1e896 <numGlobals>,d0
    6d7a:	|            lsl.l #3,d0
    6d7c:	|            move.l d0,154(sp)
    6d80:	|            clr.l 150(sp)
    6d84:	|            move.l 1e8c0 <SysBase>,d0
    6d8a:	|            movea.l d0,a6
    6d8c:	|            move.l 154(sp),d0
    6d90:	|            move.l 150(sp),d1
    6d94:	|            jsr -684(a6)
    6d98:	|            move.l d0,146(sp)
    6d9c:	|            move.l 146(sp),d0
    6da0:	|            move.l d0,1e86c <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6da6:	|            move.l 1e86c <globalVars>,d0
    6dac:	|        ,-- bne.s 6dca <initSludge+0x500>
    6dae:	|        |   move.l 1e896 <numGlobals>,d0
    6db4:	|        +-- ble.s 6dca <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6db6:	|        |   pea 19e37 <PutChar+0xe17>
    6dbc:	|        |   jsr 1857e <KPrintF>
    6dc2:	|        |   addq.l #4,sp
		return FALSE;
    6dc4:	|        |   clr.w d0
    6dc6:	+--------|-- bra.w 7038 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6dca:	|        '-> clr.l 308(sp)
    6dce:	|        ,-- bra.s 6de6 <initSludge+0x51c>
    6dd0:	|     ,--|-> move.l 1e86c <globalVars>,d1
    6dd6:	|     |  |   move.l 308(sp),d0
    6dda:	|     |  |   lsl.l #3,d0
    6ddc:	|     |  |   movea.l d1,a0
    6dde:	|     |  |   adda.l d0,a0
    6de0:	|     |  |   clr.l (a0)
    6de2:	|     |  |   addq.l #1,308(sp)
    6de6:	|     |  '-> move.l 1e896 <numGlobals>,d0
    6dec:	|     |      cmp.l 308(sp),d0
    6df0:	|     '----- bgt.s 6dd0 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6df2:	|            move.l 1e9a0 <gameSettings+0x4>,d0
    6df8:	|            clr.l -(sp)
    6dfa:	|            move.l d0,-(sp)
    6dfc:	|            move.l 296(sp),-(sp)
    6e00:	|            jsr 81ba <setFileIndices>
    6e06:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6e0a:	|            pea 1 <_start+0x1>
    6e0e:	|            jsr 7e74 <getNumberedString>
    6e14:	|            addq.l #4,sp
    6e16:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6e1a:	|            move.l 142(sp),-(sp)
    6e1e:	|            jsr 2fe <encodeFilename>
    6e24:	|            addq.l #4,sp
    6e26:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6e2a:	|            move.l 142(sp),134(sp)
    6e30:	|            move.l 1e8c0 <SysBase>,d0
    6e36:	|            movea.l d0,a6
    6e38:	|            movea.l 134(sp),a1
    6e3c:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6e40:	|            move.l 138(sp),130(sp)
    6e46:	|            move.l 1e8c8 <DOSBase>,d0
    6e4c:	|            movea.l d0,a6
    6e4e:	|            move.l 130(sp),d1
    6e52:	|            jsr -120(a6)
    6e56:	|            move.l d0,126(sp)
    6e5a:	|            move.l 126(sp),d0
    6e5e:	|            move.l d0,292(sp)
	if(lock == 0) {
    6e62:	|        ,-- bne.s 6e90 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6e64:	|        |   move.l 138(sp),122(sp)
    6e6a:	|        |   moveq #-2,d1
    6e6c:	|        |   move.l d1,118(sp)
    6e70:	|        |   move.l 1e8c8 <DOSBase>,d0
    6e76:	|        |   movea.l d0,a6
    6e78:	|        |   move.l 122(sp),d1
    6e7c:	|        |   move.l 118(sp),d2
    6e80:	|        |   jsr -84(a6)
    6e84:	|        |   move.l d0,114(sp)
    6e88:	|        |   move.l 114(sp),d0
    6e8c:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6e90:	|        '-> move.l 292(sp),110(sp)
    6e96:	|            move.l 1e8c8 <DOSBase>,d0
    6e9c:	|            movea.l d0,a6
    6e9e:	|            move.l 110(sp),d1
    6ea2:	|            jsr -126(a6)
    6ea6:	|            move.l d0,106(sp)
    6eaa:	|            move.l 106(sp),d0
    6eae:	|        ,-- bne.s 6f0a <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6eb0:	|        |   move.l 138(sp),-(sp)
    6eb4:	|        |   pea 19e6a <PutChar+0xe4a>
    6eba:	|        |   jsr 1857e <KPrintF>
    6ec0:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6ec2:	|        |   move.l 1e8c8 <DOSBase>,d0
    6ec8:	|        |   movea.l d0,a6
    6eca:	|        |   jsr -60(a6)
    6ece:	|        |   move.l d0,58(sp)
    6ed2:	|        |   move.l 58(sp),d0
    6ed6:	|        |   move.l d0,54(sp)
    6eda:	|        |   move.l #106135,50(sp)
    6ee2:	|        |   moveq #40,d0
    6ee4:	|        |   move.l d0,46(sp)
    6ee8:	|        |   move.l 1e8c8 <DOSBase>,d0
    6eee:	|        |   movea.l d0,a6
    6ef0:	|        |   move.l 54(sp),d1
    6ef4:	|        |   move.l 50(sp),d2
    6ef8:	|        |   move.l 46(sp),d3
    6efc:	|        |   jsr -48(a6)
    6f00:	|        |   move.l d0,42(sp)
		return FALSE;
    6f04:	|        |   clr.w d0
    6f06:	+--------|-- bra.w 7038 <initSludge+0x76e>
	}

	FreeVec(gameName);
    6f0a:	|        '-> move.l 138(sp),102(sp)
    6f10:	|            move.l 1e8c0 <SysBase>,d0
    6f16:	|            movea.l d0,a6
    6f18:	|            movea.l 102(sp),a1
    6f1c:	|            jsr -690(a6)

	readIniFile (filename);
    6f20:	|            move.l 316(sp),-(sp)
    6f24:	|            jsr 14a9e <readIniFile>
    6f2a:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6f2c:	|            jsr 14870 <getLanguageForFileB>
    6f32:	|            move.l d0,1e228 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6f38:	|            move.l 1e228 <languageNum>,d0
    6f3e:	|        ,-- bpl.s 6f4e <initSludge+0x684>
    6f40:	|        |   pea 19ec0 <PutChar+0xea0>
    6f46:	|        |   jsr 1857e <KPrintF>
    6f4c:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6f4e:	|        '-> move.l 1e228 <languageNum>,d0
    6f54:	|            move.l d0,d1
    6f56:	|            move.l 1e9a0 <gameSettings+0x4>,d0
    6f5c:	|            move.l d1,-(sp)
    6f5e:	|            move.l d0,-(sp)
    6f60:	|            clr.l -(sp)
    6f62:	|            jsr 81ba <setFileIndices>
    6f68:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6f6c:	|            movea.l 200(sp),a0
    6f70:	|            move.b (a0),d0
    6f72:	|     ,----- beq.w 701c <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6f76:	|     |      move.l 200(sp),-(sp)
    6f7a:	|     |      jsr 2fe <encodeFilename>
    6f80:	|     |      addq.l #4,sp
    6f82:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6f86:	|     |      move.l 98(sp),94(sp)
    6f8c:	|     |      move.l 1e8c8 <DOSBase>,d0
    6f92:	|     |      movea.l d0,a6
    6f94:	|     |      move.l 94(sp),d1
    6f98:	|     |      jsr -120(a6)
    6f9c:	|     |      move.l d0,90(sp)
    6fa0:	|     |      move.l 90(sp),d0
    6fa4:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6fa8:	|     |  ,-- bne.s 6fd6 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6faa:	|     |  |   move.l 98(sp),86(sp)
    6fb0:	|     |  |   moveq #-2,d1
    6fb2:	|     |  |   move.l d1,82(sp)
    6fb6:	|     |  |   move.l 1e8c8 <DOSBase>,d0
    6fbc:	|     |  |   movea.l d0,a6
    6fbe:	|     |  |   move.l 86(sp),d1
    6fc2:	|     |  |   move.l 82(sp),d2
    6fc6:	|     |  |   jsr -84(a6)
    6fca:	|     |  |   move.l d0,78(sp)
    6fce:	|     |  |   move.l 78(sp),d0
    6fd2:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6fd6:	|     |  '-> move.l 292(sp),74(sp)
    6fdc:	|     |      move.l 1e8c8 <DOSBase>,d0
    6fe2:	|     |      movea.l d0,a6
    6fe4:	|     |      move.l 74(sp),d1
    6fe8:	|     |      jsr -126(a6)
    6fec:	|     |      move.l d0,70(sp)
    6ff0:	|     |      move.l 70(sp),d0
    6ff4:	|     |  ,-- bne.s 7006 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6ff6:	|     |  |   move.l 1e8c8 <DOSBase>,d0
    6ffc:	|     |  |   movea.l d0,a6
    6ffe:	|     |  |   jsr -60(a6)
    7002:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    7006:	|     |  '-> move.l 98(sp),62(sp)
    700c:	|     |      move.l 1e8c0 <SysBase>,d0
    7012:	|     |      movea.l d0,a6
    7014:	|     |      movea.l 62(sp),a1
    7018:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    701c:	|     '----> movea.l 1e80a <winHeight>,a0
    7022:	|            lea -15(a0),a0
    7026:	|            move.l a0,d0
    7028:	|            move.l d0,-(sp)
    702a:	|            pea a <_start+0xa>
    702e:	|            jsr 8ce0 <positionStatus>
    7034:	|            addq.l #8,sp

	return TRUE;
    7036:	|            moveq #1,d0
}
    7038:	'----------> movem.l (sp)+,d2-d4/a2/a6
    703c:	             lea 292(sp),sp
    7040:	             rts

00007042 <killSpeechTimers>:

void killSpeechTimers () {
    7042:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7044:	          move.l 1e856 <allRunningFunctions>,(sp)

	while (thisFunction) {
    704a:	   ,----- bra.s 7076 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    704c:	,--|----> movea.l (sp),a0
    704e:	|  |      move.b 56(a0),d0
    7052:	|  |  ,-- bne.s 7070 <killSpeechTimers+0x2e>
    7054:	|  |  |   movea.l (sp),a0
    7056:	|  |  |   move.w 50(a0),d0
    705a:	|  |  +-- beq.s 7070 <killSpeechTimers+0x2e>
    705c:	|  |  |   movea.l (sp),a0
    705e:	|  |  |   move.l 12(a0),d0
    7062:	|  |  +-- beq.s 7070 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    7064:	|  |  |   movea.l (sp),a0
    7066:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    706a:	|  |  |   movea.l (sp),a0
    706c:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    7070:	|  |  '-> movea.l (sp),a0
    7072:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    7076:	|  '----> tst.l (sp)
    7078:	'-------- bne.s 704c <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    707a:	          jsr 44c0 <killAllSpeech>
}
    7080:	          nop
    7082:	          addq.l #4,sp
    7084:	          rts

00007086 <loadFunctionCode>:

struct loadedFunction *loadFunctionCode (unsigned int originalNumber) {
    7086:	                         lea -104(sp),sp
    708a:	                         move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	struct loadedFunction * newFunc = NULL;
    708c:	                         clr.l 100(sp)
	int a;

#ifndef DISABLEFUNCTIONCACHE
	struct cachedFunction * current = allCachedFunctions;
    7090:	                         move.l 1e846 <allCachedFunctions>,92(sp)
	while( current) {
    7098:	               ,-------- bra.s 70e0 <loadFunctionCode+0x5a>
		if (current->theFunction->originalNumber == originalNumber)
    709a:	            ,--|-------> movea.l 92(sp),a0
    709e:	            |  |         movea.l 4(a0),a0
    70a2:	            |  |         move.l (a0),d0
    70a4:	            |  |         cmp.l 112(sp),d0
    70a8:	            |  |  ,----- bne.s 70d6 <loadFunctionCode+0x50>
		{
			if( current->theFunction->unloaded == 1)
    70aa:	            |  |  |      movea.l 92(sp),a0
    70ae:	            |  |  |      movea.l 4(a0),a0
    70b2:	            |  |  |      move.l 58(a0),d0
    70b6:	            |  |  |      moveq #1,d1
    70b8:	            |  |  |      cmp.l d0,d1
    70ba:	            |  |  +----- bne.s 70d6 <loadFunctionCode+0x50>
			{ 
				newFunc = current->theFunction;	
    70bc:	            |  |  |      movea.l 92(sp),a0
    70c0:	            |  |  |      move.l 4(a0),100(sp)
				KPrintF("loadFunctionCode: Found in Cache\n");
    70c6:	            |  |  |      pea 19eeb <PutChar+0xecb>
    70cc:	            |  |  |      jsr 1857e <KPrintF>
    70d2:	            |  |  |      addq.l #4,sp
				break;
    70d4:	            |  |  |  ,-- bra.s 70e6 <loadFunctionCode+0x60>
			}									
		}
		current = current->next;
    70d6:	            |  |  '--|-> movea.l 92(sp),a0
    70da:	            |  |     |   move.l 8(a0),92(sp)
	while( current) {
    70e0:	            |  '-----|-> tst.l 92(sp)
    70e4:	            '--------|-- bne.s 709a <loadFunctionCode+0x14>
	}			

	if( !newFunc)
    70e6:	                     '-> tst.l 100(sp)
    70ea:	               ,-------- bne.w 7342 <loadFunctionCode+0x2bc>
	{		
		KPrintF("loadFunctionCode: Function not in cache. Loading new function\n");
    70ee:	               |         pea 19f0d <PutChar+0xeed>
    70f4:	               |         jsr 1857e <KPrintF>
    70fa:	               |         addq.l #4,sp
		numCachedFunctions++;
    70fc:	               |         move.l 1e84e <numCachedFunctions>,d0
    7102:	               |         addq.l #1,d0
    7104:	               |         move.l d0,1e84e <numCachedFunctions>
#endif		
		newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    710a:	               |         moveq #62,d0
    710c:	               |         move.l d0,84(sp)
    7110:	               |         clr.l 80(sp)
    7114:	               |         move.l 1e8c0 <SysBase>,d0
    711a:	               |         movea.l d0,a6
    711c:	               |         move.l 84(sp),d0
    7120:	               |         move.l 80(sp),d1
    7124:	               |         jsr -684(a6)
    7128:	               |         move.l d0,76(sp)
    712c:	               |         move.l 76(sp),d0
    7130:	               |         move.l d0,100(sp)
	
		if(!newFunc) {
    7134:	               |     ,-- bne.s 714a <loadFunctionCode+0xc4>
			KPrintF("loadFunctionCode: Cannot allocate memory");
    7136:	               |     |   pea 19f4c <PutChar+0xf2c>
    713c:	               |     |   jsr 1857e <KPrintF>
    7142:	               |     |   addq.l #4,sp
			return 0;
    7144:	               |     |   moveq #0,d0
    7146:	,--------------|-----|-- bra.w 7536 <loadFunctionCode+0x4b0>
		}

		newFunc -> originalNumber = originalNumber;
    714a:	|              |     '-> move.l 112(sp),d0
    714e:	|              |         movea.l 100(sp),a0
    7152:	|              |         move.l d0,(a0)

		if (! openSubSlice (originalNumber)) return FALSE;
    7154:	|              |         move.l 112(sp),d0
    7158:	|              |         move.l d0,-(sp)
    715a:	|              |         jsr 80fa <openSubSlice>
    7160:	|              |         addq.l #4,sp
    7162:	|              |         tst.w d0
    7164:	|              |     ,-- bne.s 716c <loadFunctionCode+0xe6>
    7166:	|              |     |   moveq #0,d0
    7168:	+--------------|-----|-- bra.w 7536 <loadFunctionCode+0x4b0>
		

		newFunc-> unfreezable	= FGetC (bigDataFile);
    716c:	|              |     '-> move.l 1e8a6 <bigDataFile>,72(sp)
    7174:	|              |         move.l 1e8c8 <DOSBase>,d0
    717a:	|              |         movea.l d0,a6
    717c:	|              |         move.l 72(sp),d1
    7180:	|              |         jsr -306(a6)
    7184:	|              |         move.l d0,68(sp)
    7188:	|              |         move.l 68(sp),d0
    718c:	|              |         move.l d0,d0
    718e:	|              |         movea.l 100(sp),a0
    7192:	|              |         move.w d0,52(a0)
		numLines				= get2bytes (bigDataFile);
    7196:	|              |         move.l 1e8a6 <bigDataFile>,d0
    719c:	|              |         move.l d0,-(sp)
    719e:	|              |         jsr 6bc <get2bytes>
    71a4:	|              |         addq.l #4,sp
    71a6:	|              |         move.l d0,64(sp)
		newFunc -> numArgs		= get2bytes (bigDataFile);
    71aa:	|              |         move.l 1e8a6 <bigDataFile>,d0
    71b0:	|              |         move.l d0,-(sp)
    71b2:	|              |         jsr 6bc <get2bytes>
    71b8:	|              |         addq.l #4,sp
    71ba:	|              |         movea.l 100(sp),a0
    71be:	|              |         move.l d0,16(a0)
		newFunc -> numLocals	= get2bytes (bigDataFile);	
    71c2:	|              |         move.l 1e8a6 <bigDataFile>,d0
    71c8:	|              |         move.l d0,-(sp)
    71ca:	|              |         jsr 6bc <get2bytes>
    71d0:	|              |         addq.l #4,sp
    71d2:	|              |         movea.l 100(sp),a0
    71d6:	|              |         move.l d0,8(a0)

		newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    71da:	|              |         move.l 64(sp),d0
    71de:	|              |         lsl.l #3,d0
    71e0:	|              |         move.l d0,60(sp)
    71e4:	|              |         clr.l 56(sp)
    71e8:	|              |         move.l 1e8c0 <SysBase>,d0
    71ee:	|              |         movea.l d0,a6
    71f0:	|              |         move.l 60(sp),d0
    71f4:	|              |         move.l 56(sp),d1
    71f8:	|              |         jsr -684(a6)
    71fc:	|              |         move.l d0,52(sp)
    7200:	|              |         move.l 52(sp),d0
    7204:	|              |         movea.l 100(sp),a0
    7208:	|              |         move.l d0,4(a0)
		if (! newFunc -> compiledLines) {
    720c:	|              |         movea.l 100(sp),a0
    7210:	|              |         move.l 4(a0),d0
    7214:	|              |     ,-- bne.s 722a <loadFunctionCode+0x1a4>
			KPrintF("loadFunctionCode: cannot allocate memory");
    7216:	|              |     |   pea 19f75 <PutChar+0xf55>
    721c:	|              |     |   jsr 1857e <KPrintF>
    7222:	|              |     |   addq.l #4,sp
			return FALSE;
    7224:	|              |     |   moveq #0,d0
    7226:	+--------------|-----|-- bra.w 7536 <loadFunctionCode+0x4b0>
		}
		
		for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    722a:	|              |     '-> clr.l 104(sp)
    722e:	|              |     ,-- bra.s 7290 <loadFunctionCode+0x20a>
			newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    7230:	|              |  ,--|-> move.l 1e8a6 <bigDataFile>,32(sp)
    7238:	|              |  |  |   move.l 1e8c8 <DOSBase>,d0
    723e:	|              |  |  |   movea.l d0,a6
    7240:	|              |  |  |   move.l 32(sp),d1
    7244:	|              |  |  |   jsr -306(a6)
    7248:	|              |  |  |   move.l d0,28(sp)
    724c:	|              |  |  |   move.l 28(sp),d1
    7250:	|              |  |  |   movea.l 100(sp),a0
    7254:	|              |  |  |   movea.l 4(a0),a0
    7258:	|              |  |  |   move.l 104(sp),d0
    725c:	|              |  |  |   lsl.l #3,d0
    725e:	|              |  |  |   adda.l d0,a0
    7260:	|              |  |  |   move.l d1,d0
    7262:	|              |  |  |   move.l d0,(a0)
			newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    7264:	|              |  |  |   move.l 1e8a6 <bigDataFile>,d0
    726a:	|              |  |  |   move.l d0,-(sp)
    726c:	|              |  |  |   jsr 6bc <get2bytes>
    7272:	|              |  |  |   addq.l #4,sp
    7274:	|              |  |  |   move.l d0,d1
    7276:	|              |  |  |   movea.l 100(sp),a0
    727a:	|              |  |  |   movea.l 4(a0),a0
    727e:	|              |  |  |   move.l 104(sp),d0
    7282:	|              |  |  |   lsl.l #3,d0
    7284:	|              |  |  |   adda.l d0,a0
    7286:	|              |  |  |   move.l d1,d0
    7288:	|              |  |  |   move.l d0,4(a0)
		for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    728c:	|              |  |  |   addq.l #1,104(sp)
    7290:	|              |  |  '-> move.l 104(sp),d1
    7294:	|              |  |      cmp.l 64(sp),d1
    7298:	|              |  '----- bcs.s 7230 <loadFunctionCode+0x1aa>
		}
		finishAccess ();
    729a:	|              |         jsr 7e6a <finishAccess>

#ifndef DISABLEFUNCTIONCACHE		
		struct cachedFunction  *next = allCachedFunctions;
    72a0:	|              |         move.l 1e846 <allCachedFunctions>,48(sp)
		allCachedFunctions = AllocVec(sizeof(struct cachedFunction),MEMF_ANY);
    72a8:	|              |         moveq #16,d0
    72aa:	|              |         move.l d0,44(sp)
    72ae:	|              |         clr.l 40(sp)
    72b2:	|              |         move.l 1e8c0 <SysBase>,d0
    72b8:	|              |         movea.l d0,a6
    72ba:	|              |         move.l 44(sp),d0
    72be:	|              |         move.l 40(sp),d1
    72c2:	|              |         jsr -684(a6)
    72c6:	|              |         move.l d0,36(sp)
    72ca:	|              |         move.l 36(sp),d0
    72ce:	|              |         move.l d0,1e846 <allCachedFunctions>
		allCachedFunctions -> prev = NULL;
    72d4:	|              |         movea.l 1e846 <allCachedFunctions>,a0
    72da:	|              |         clr.l 12(a0)
		if (! allCachedFunctions) {
    72de:	|              |         move.l 1e846 <allCachedFunctions>,d0
    72e4:	|              |     ,-- bne.s 72fa <loadFunctionCode+0x274>
			KPrintF("loadFunctionCode: cannot allocate memory for cached function");
    72e6:	|              |     |   pea 19f9e <PutChar+0xf7e>
    72ec:	|              |     |   jsr 1857e <KPrintF>
    72f2:	|              |     |   addq.l #4,sp
			return NULL;
    72f4:	|              |     |   moveq #0,d0
    72f6:	+--------------|-----|-- bra.w 7536 <loadFunctionCode+0x4b0>
		}
		if( !next) {
    72fa:	|              |     '-> tst.l 48(sp)
    72fe:	|              |     ,-- bne.s 730c <loadFunctionCode+0x286>
			lastCachedFunction = allCachedFunctions;
    7300:	|              |     |   move.l 1e846 <allCachedFunctions>,d0
    7306:	|              |     |   move.l d0,1e84a <lastCachedFunction>
		} 	

		if(next) next->prev = allCachedFunctions;
    730c:	|              |     '-> tst.l 48(sp)
    7310:	|              |     ,-- beq.s 7320 <loadFunctionCode+0x29a>
    7312:	|              |     |   move.l 1e846 <allCachedFunctions>,d0
    7318:	|              |     |   movea.l 48(sp),a0
    731c:	|              |     |   move.l d0,12(a0)
		
		allCachedFunctions->next = next;
    7320:	|              |     '-> movea.l 1e846 <allCachedFunctions>,a0
    7326:	|              |         move.l 48(sp),8(a0)
		allCachedFunctions->theFunction = newFunc;
    732c:	|              |         movea.l 1e846 <allCachedFunctions>,a0
    7332:	|              |         move.l 100(sp),4(a0)
		allCachedFunctions->funcNum = originalNumber;
    7338:	|              |         movea.l 1e846 <allCachedFunctions>,a0
    733e:	|              |         move.l 112(sp),(a0)

	}	

	newFunc -> unloaded = 0;	
    7342:	|              '-------> movea.l 100(sp),a0
    7346:	|                        clr.l 58(a0)
#endif
	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    734a:	|                        movea.l 100(sp),a0
    734e:	|                        move.l 8(a0),d0
    7352:	|              ,-------- ble.w 73d8 <loadFunctionCode+0x352>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    7356:	|              |         movea.l 100(sp),a0
    735a:	|              |         move.l 8(a0),d0
    735e:	|              |         lsl.l #3,d0
    7360:	|              |         move.l d0,24(sp)
    7364:	|              |         clr.l 20(sp)
    7368:	|              |         move.l 1e8c0 <SysBase>,d0
    736e:	|              |         movea.l d0,a6
    7370:	|              |         move.l 24(sp),d0
    7374:	|              |         move.l 20(sp),d1
    7378:	|              |         jsr -684(a6)
    737c:	|              |         move.l d0,16(sp)
    7380:	|              |         move.l 16(sp),d0
    7384:	|              |         movea.l 100(sp),a0
    7388:	|              |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    738c:	|              |         movea.l 100(sp),a0
    7390:	|              |         move.l 20(a0),d0
    7394:	|              |     ,-- bne.s 73aa <loadFunctionCode+0x324>
			KPrintF("loadFunctionCode: cannot allocate memory");
    7396:	|              |     |   pea 19f75 <PutChar+0xf55>
    739c:	|              |     |   jsr 1857e <KPrintF>
    73a2:	|              |     |   addq.l #4,sp
			return FALSE;
    73a4:	|              |     |   moveq #0,d0
    73a6:	+--------------|-----|-- bra.w 7536 <loadFunctionCode+0x4b0>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    73aa:	|              |     '-> clr.l 96(sp)
    73ae:	|              |     ,-- bra.s 73c8 <loadFunctionCode+0x342>
			initVarNew (newFunc -> localVars[a]);
    73b0:	|              |  ,--|-> movea.l 100(sp),a0
    73b4:	|              |  |  |   move.l 20(a0),d1
    73b8:	|              |  |  |   move.l 96(sp),d0
    73bc:	|              |  |  |   lsl.l #3,d0
    73be:	|              |  |  |   movea.l d1,a0
    73c0:	|              |  |  |   adda.l d0,a0
    73c2:	|              |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    73c4:	|              |  |  |   addq.l #1,96(sp)
    73c8:	|              |  |  '-> movea.l 100(sp),a0
    73cc:	|              |  |      move.l 8(a0),d0
    73d0:	|              |  |      cmp.l 96(sp),d0
    73d4:	|              |  '----- bgt.s 73b0 <loadFunctionCode+0x32a>
    73d6:	|              |     ,-- bra.s 73e0 <loadFunctionCode+0x35a>
		}
	} else
	{
		newFunc->numLocals = NULL;
    73d8:	|              '-----|-> movea.l 100(sp),a0
    73dc:	|                    |   clr.l 8(a0)
	}	

#ifndef DISABLEFUNCTIONCACHE
	if( numCachedFunctions >= CACHEFUNCTIONMAX) 
    73e0:	|                    '-> move.l 1e84e <numCachedFunctions>,d0
    73e6:	|                        moveq #9,d1
    73e8:	|                        cmp.l d0,d1
    73ea:	|  ,-------------------- bge.w 7532 <loadFunctionCode+0x4ac>
	{
		struct cachedFunction *huntanddestroy = lastCachedFunction;
    73ee:	|  |                     move.l 1e84a <lastCachedFunction>,88(sp)
		while (huntanddestroy) 
    73f6:	|  |     ,-------------- bra.w 74b4 <loadFunctionCode+0x42e>
		{
			if (huntanddestroy->theFunction->unloaded == 1) 
    73fa:	|  |  ,--|-------------> movea.l 88(sp),a0
    73fe:	|  |  |  |               movea.l 4(a0),a0
    7402:	|  |  |  |               move.l 58(a0),d0
    7406:	|  |  |  |               moveq #1,d1
    7408:	|  |  |  |               cmp.l d0,d1
    740a:	|  |  |  |  ,----------- bne.w 74aa <loadFunctionCode+0x424>
			{
				if( huntanddestroy->prev)
    740e:	|  |  |  |  |            movea.l 88(sp),a0
    7412:	|  |  |  |  |            move.l 12(a0),d0
    7416:	|  |  |  |  |        ,-- beq.s 742e <loadFunctionCode+0x3a8>
					huntanddestroy->prev->next = huntanddestroy->next;							
    7418:	|  |  |  |  |        |   movea.l 88(sp),a0
    741c:	|  |  |  |  |        |   movea.l 12(a0),a0
    7420:	|  |  |  |  |        |   movea.l 88(sp),a1
    7424:	|  |  |  |  |        |   move.l 8(a1),d0
    7428:	|  |  |  |  |        |   move.l d0,8(a0)
    742c:	|  |  |  |  |     ,--|-- bra.s 744e <loadFunctionCode+0x3c8>
				else
				{
					allCachedFunctions = huntanddestroy->next;
    742e:	|  |  |  |  |     |  '-> movea.l 88(sp),a0
    7432:	|  |  |  |  |     |      move.l 8(a0),d0
    7436:	|  |  |  |  |     |      move.l d0,1e846 <allCachedFunctions>
					if( allCachedFunctions)
    743c:	|  |  |  |  |     |      move.l 1e846 <allCachedFunctions>,d0
    7442:	|  |  |  |  |     +----- beq.s 744e <loadFunctionCode+0x3c8>
						allCachedFunctions->prev = NULL;
    7444:	|  |  |  |  |     |      movea.l 1e846 <allCachedFunctions>,a0
    744a:	|  |  |  |  |     |      clr.l 12(a0)
				}

				if (huntanddestroy == lastCachedFunction) {
    744e:	|  |  |  |  |     '----> move.l 1e84a <lastCachedFunction>,d0
    7454:	|  |  |  |  |            cmp.l 88(sp),d0
    7458:	|  |  |  |  |     ,----- bne.s 748a <loadFunctionCode+0x404>
					if( huntanddestroy->prev)
    745a:	|  |  |  |  |     |      movea.l 88(sp),a0
    745e:	|  |  |  |  |     |      move.l 12(a0),d0
    7462:	|  |  |  |  |     |  ,-- beq.s 7474 <loadFunctionCode+0x3ee>
						lastCachedFunction = huntanddestroy->prev;
    7464:	|  |  |  |  |     |  |   movea.l 88(sp),a0
    7468:	|  |  |  |  |     |  |   move.l 12(a0),d0
    746c:	|  |  |  |  |     |  |   move.l d0,1e84a <lastCachedFunction>
				{
					if( huntanddestroy->next)
						huntanddestroy->next->prev = huntanddestroy->prev;																
				}				

				break;
    7472:	|  |  |  |  |  ,--|--|-- bra.s 74be <loadFunctionCode+0x438>
						lastCachedFunction = NULL;
    7474:	|  |  |  |  |  |  |  '-> clr.l 1e84a <lastCachedFunction>
						KPrintF("loadFunctionCode: Last cached function is NULL\n");
    747a:	|  |  |  |  |  |  |      pea 19fdb <PutChar+0xfbb>
    7480:	|  |  |  |  |  |  |      jsr 1857e <KPrintF>
    7486:	|  |  |  |  |  |  |      addq.l #4,sp
				break;
    7488:	|  |  |  |  |  +--|----- bra.s 74be <loadFunctionCode+0x438>
					if( huntanddestroy->next)
    748a:	|  |  |  |  |  |  '----> movea.l 88(sp),a0
    748e:	|  |  |  |  |  |         move.l 8(a0),d0
    7492:	|  |  |  |  |  +-------- beq.s 74be <loadFunctionCode+0x438>
						huntanddestroy->next->prev = huntanddestroy->prev;																
    7494:	|  |  |  |  |  |         movea.l 88(sp),a0
    7498:	|  |  |  |  |  |         movea.l 8(a0),a0
    749c:	|  |  |  |  |  |         movea.l 88(sp),a1
    74a0:	|  |  |  |  |  |         move.l 12(a1),d0
    74a4:	|  |  |  |  |  |         move.l d0,12(a0)
				break;
    74a8:	|  |  |  |  |  +-------- bra.s 74be <loadFunctionCode+0x438>
			}
			
			huntanddestroy = huntanddestroy->prev;
    74aa:	|  |  |  |  '--|-------> movea.l 88(sp),a0
    74ae:	|  |  |  |     |         move.l 12(a0),88(sp)
		while (huntanddestroy) 
    74b4:	|  |  |  '-----|-------> tst.l 88(sp)
    74b8:	|  |  '--------|-------- bne.w 73fa <loadFunctionCode+0x374>
    74bc:	|  |           |     ,-- bra.s 74c0 <loadFunctionCode+0x43a>
				break;
    74be:	|  |           '-----|-> nop
		}		

		if( huntanddestroy)
    74c0:	|  |                 '-> tst.l 88(sp)
    74c4:	|  |                 ,-- beq.s 7524 <loadFunctionCode+0x49e>
		{
			numCachedFunctions--;
    74c6:	|  |                 |   move.l 1e84e <numCachedFunctions>,d0
    74cc:	|  |                 |   subq.l #1,d0
    74ce:	|  |                 |   move.l d0,1e84e <numCachedFunctions>
			FreeVec(huntanddestroy->theFunction->compiledLines);
    74d4:	|  |                 |   movea.l 88(sp),a0
    74d8:	|  |                 |   movea.l 4(a0),a0
    74dc:	|  |                 |   move.l 4(a0),12(sp)
    74e2:	|  |                 |   move.l 1e8c0 <SysBase>,d0
    74e8:	|  |                 |   movea.l d0,a6
    74ea:	|  |                 |   movea.l 12(sp),a1
    74ee:	|  |                 |   jsr -690(a6)
			FreeVec(huntanddestroy->theFunction);
    74f2:	|  |                 |   movea.l 88(sp),a0
    74f6:	|  |                 |   move.l 4(a0),8(sp)
    74fc:	|  |                 |   move.l 1e8c0 <SysBase>,d0
    7502:	|  |                 |   movea.l d0,a6
    7504:	|  |                 |   movea.l 8(sp),a1
    7508:	|  |                 |   jsr -690(a6)
			FreeVec(huntanddestroy);
    750c:	|  |                 |   move.l 88(sp),4(sp)
    7512:	|  |                 |   move.l 1e8c0 <SysBase>,d0
    7518:	|  |                 |   movea.l d0,a6
    751a:	|  |                 |   movea.l 4(sp),a1
    751e:	|  |                 |   jsr -690(a6)
    7522:	|  +-----------------|-- bra.s 7532 <loadFunctionCode+0x4ac>
		} else 
		{
			KPrintF("loadFunctionCode: Function is still in use\n");
    7524:	|  |                 '-> pea 1a00b <PutChar+0xfeb>
    752a:	|  |                     jsr 1857e <KPrintF>
    7530:	|  |                     addq.l #4,sp
		}
	}	
#endif					
	
	return newFunc;
    7532:	|  '-------------------> move.l 100(sp),d0

}
    7536:	'----------------------> movea.l (sp)+,a6
    7538:	                         lea 104(sp),sp
    753c:	                         rts

0000753e <loadHandlers>:

void loadHandlers (BPTR fp) {
    753e:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    7540:	movea.l 1e224 <currentEvents>,a2
    7546:	move.l 8(sp),-(sp)
    754a:	jsr 6bc <get2bytes>
    7550:	addq.l #4,sp
    7552:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    7554:	movea.l 1e224 <currentEvents>,a2
    755a:	move.l 8(sp),-(sp)
    755e:	jsr 6bc <get2bytes>
    7564:	addq.l #4,sp
    7566:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    756a:	movea.l 1e224 <currentEvents>,a2
    7570:	move.l 8(sp),-(sp)
    7574:	jsr 6bc <get2bytes>
    757a:	addq.l #4,sp
    757c:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    7580:	movea.l 1e224 <currentEvents>,a2
    7586:	move.l 8(sp),-(sp)
    758a:	jsr 6bc <get2bytes>
    7590:	addq.l #4,sp
    7592:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    7596:	movea.l 1e224 <currentEvents>,a2
    759c:	move.l 8(sp),-(sp)
    75a0:	jsr 6bc <get2bytes>
    75a6:	addq.l #4,sp
    75a8:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    75ac:	move.l 8(sp),-(sp)
    75b0:	jsr 718 <get4bytes>
    75b6:	addq.l #4,sp
    75b8:	movea.l 1e224 <currentEvents>,a0
    75be:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    75c2:	movea.l 1e224 <currentEvents>,a2
    75c8:	move.l 8(sp),-(sp)
    75cc:	jsr 6bc <get2bytes>
    75d2:	addq.l #4,sp
    75d4:	move.l d0,24(a2)
}
    75d8:	nop
    75da:	movea.l (sp)+,a2
    75dc:	rts

000075de <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    75de:	       lea -312(sp),sp
    75e2:	       movem.l d2-d3/a6,-(sp)
    75e6:	       move.l 332(sp),d1
    75ea:	       move.l 336(sp),d0
    75ee:	       move.b d1,d1
    75f0:	       move.b d1,16(sp)
    75f4:	       move.b d0,d0
    75f6:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    75fa:	       move.l 328(sp),318(sp)
    7600:	       move.l #1005,314(sp)
    7608:	       move.l 1e8c8 <DOSBase>,d0
    760e:	       movea.l d0,a6
    7610:	       move.l 318(sp),d1
    7614:	       move.l 314(sp),d2
    7618:	       jsr -30(a6)
    761c:	       move.l d0,310(sp)
    7620:	       move.l 310(sp),d0
    7624:	       move.l d0,306(sp)

	if (! fp) {
    7628:	   ,-- bne.s 7684 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    762a:	   |   move.l 1e8c8 <DOSBase>,d0
    7630:	   |   movea.l d0,a6
    7632:	   |   jsr -60(a6)
    7636:	   |   move.l d0,154(sp)
    763a:	   |   move.l 154(sp),d0
    763e:	   |   move.l d0,150(sp)
    7642:	   |   move.l #106551,146(sp)
    764a:	   |   moveq #31,d0
    764c:	   |   move.l d0,142(sp)
    7650:	   |   move.l 1e8c8 <DOSBase>,d0
    7656:	   |   movea.l d0,a6
    7658:	   |   move.l 150(sp),d1
    765c:	   |   move.l 146(sp),d2
    7660:	   |   move.l 142(sp),d3
    7664:	   |   jsr -48(a6)
    7668:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    766c:	   |   move.l 328(sp),-(sp)
    7670:	   |   pea 1a057 <PutChar+0x1037>
    7676:	   |   jsr 1857e <KPrintF>
    767c:	   |   addq.l #8,sp
		return NULL;
    767e:	   |   moveq #0,d0
    7680:	,--|-- bra.w 7944 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    7684:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    7688:	|      move.l 306(sp),302(sp)
    768e:	|      move.l 1e8c8 <DOSBase>,d0
    7694:	|      movea.l d0,a6
    7696:	|      move.l 302(sp),d1
    769a:	|      jsr -306(a6)
    769e:	|      move.l d0,298(sp)
    76a2:	|      move.l 298(sp),d0
    76a6:	|      moveq #83,d1
    76a8:	|      cmp.l d0,d1
    76aa:	|  ,-- beq.s 76b2 <openAndVerify+0xd4>
    76ac:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    76b2:	|  '-> move.l 306(sp),294(sp)
    76b8:	|      move.l 1e8c8 <DOSBase>,d0
    76be:	|      movea.l d0,a6
    76c0:	|      move.l 294(sp),d1
    76c4:	|      jsr -306(a6)
    76c8:	|      move.l d0,290(sp)
    76cc:	|      move.l 290(sp),d0
    76d0:	|      moveq #76,d1
    76d2:	|      cmp.l d0,d1
    76d4:	|  ,-- beq.s 76dc <openAndVerify+0xfe>
    76d6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    76dc:	|  '-> move.l 306(sp),286(sp)
    76e2:	|      move.l 1e8c8 <DOSBase>,d0
    76e8:	|      movea.l d0,a6
    76ea:	|      move.l 286(sp),d1
    76ee:	|      jsr -306(a6)
    76f2:	|      move.l d0,282(sp)
    76f6:	|      move.l 282(sp),d0
    76fa:	|      moveq #85,d1
    76fc:	|      cmp.l d0,d1
    76fe:	|  ,-- beq.s 7706 <openAndVerify+0x128>
    7700:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    7706:	|  '-> move.l 306(sp),278(sp)
    770c:	|      move.l 1e8c8 <DOSBase>,d0
    7712:	|      movea.l d0,a6
    7714:	|      move.l 278(sp),d1
    7718:	|      jsr -306(a6)
    771c:	|      move.l d0,274(sp)
    7720:	|      move.l 274(sp),d0
    7724:	|      moveq #68,d1
    7726:	|      cmp.l d0,d1
    7728:	|  ,-- beq.s 7730 <openAndVerify+0x152>
    772a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    7730:	|  '-> move.l 306(sp),270(sp)
    7736:	|      move.l 1e8c8 <DOSBase>,d0
    773c:	|      movea.l d0,a6
    773e:	|      move.l 270(sp),d1
    7742:	|      jsr -306(a6)
    7746:	|      move.l d0,266(sp)
    774a:	|      move.l 266(sp),d1
    774e:	|      move.b 16(sp),d0
    7752:	|      ext.w d0
    7754:	|      movea.w d0,a0
    7756:	|      cmpa.l d1,a0
    7758:	|  ,-- beq.s 7760 <openAndVerify+0x182>
    775a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    7760:	|  '-> move.l 306(sp),262(sp)
    7766:	|      move.l 1e8c8 <DOSBase>,d0
    776c:	|      movea.l d0,a6
    776e:	|      move.l 262(sp),d1
    7772:	|      jsr -306(a6)
    7776:	|      move.l d0,258(sp)
    777a:	|      move.l 258(sp),d1
    777e:	|      move.b 14(sp),d0
    7782:	|      ext.w d0
    7784:	|      movea.w d0,a0
    7786:	|      cmpa.l d1,a0
    7788:	|  ,-- beq.s 7790 <openAndVerify+0x1b2>
    778a:	|  |   move.w #1,322(sp)
	if (headerBad) {
    7790:	|  '-> tst.w 322(sp)
    7794:	|  ,-- beq.s 77ec <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    7796:	|  |   move.l 1e8c8 <DOSBase>,d0
    779c:	|  |   movea.l d0,a6
    779e:	|  |   jsr -60(a6)
    77a2:	|  |   move.l d0,174(sp)
    77a6:	|  |   move.l 174(sp),d0
    77aa:	|  |   move.l d0,170(sp)
    77ae:	|  |   move.l #106614,166(sp)
    77b6:	|  |   moveq #31,d0
    77b8:	|  |   move.l d0,162(sp)
    77bc:	|  |   move.l 1e8c8 <DOSBase>,d0
    77c2:	|  |   movea.l d0,a6
    77c4:	|  |   move.l 170(sp),d1
    77c8:	|  |   move.l 166(sp),d2
    77cc:	|  |   move.l 162(sp),d3
    77d0:	|  |   jsr -48(a6)
    77d4:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    77d8:	|  |   pea 1a076 <PutChar+0x1056>
    77de:	|  |   jsr 1857e <KPrintF>
    77e4:	|  |   addq.l #4,sp
		return NULL;
    77e6:	|  |   moveq #0,d0
    77e8:	+--|-- bra.w 7944 <openAndVerify+0x366>
	}
	FGetC (fp);
    77ec:	|  '-> move.l 306(sp),254(sp)
    77f2:	|      move.l 1e8c8 <DOSBase>,d0
    77f8:	|      movea.l d0,a6
    77fa:	|      move.l 254(sp),d1
    77fe:	|      jsr -306(a6)
    7802:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    7806:	|      nop
    7808:	|  ,-> move.l 306(sp),246(sp)
    780e:	|  |   move.l 1e8c8 <DOSBase>,d0
    7814:	|  |   movea.l d0,a6
    7816:	|  |   move.l 246(sp),d1
    781a:	|  |   jsr -306(a6)
    781e:	|  |   move.l d0,242(sp)
    7822:	|  |   move.l 242(sp),d0
    7826:	|  '-- bne.s 7808 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    7828:	|      move.l 306(sp),238(sp)
    782e:	|      move.l 1e8c8 <DOSBase>,d0
    7834:	|      movea.l d0,a6
    7836:	|      move.l 238(sp),d1
    783a:	|      jsr -306(a6)
    783e:	|      move.l d0,234(sp)
    7842:	|      move.l 234(sp),d0
    7846:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    784a:	|      move.l 306(sp),226(sp)
    7850:	|      move.l 1e8c8 <DOSBase>,d0
    7856:	|      movea.l d0,a6
    7858:	|      move.l 226(sp),d1
    785c:	|      jsr -306(a6)
    7860:	|      move.l d0,222(sp)
    7864:	|      move.l 222(sp),d0
    7868:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    786c:	|      move.l 230(sp),d0
    7870:	|      lsl.l #8,d0
    7872:	|      add.l 218(sp),d0
    7876:	|      movea.l 344(sp),a0
    787a:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    787c:	|      movea.l 344(sp),a0
    7880:	|      move.l (a0),d0
    7882:	|      cmpi.l #514,d0
    7888:	|  ,-- ble.s 78de <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    788a:	|  |   move.l 1e8c8 <DOSBase>,d0
    7890:	|  |   movea.l d0,a6
    7892:	|  |   jsr -60(a6)
    7896:	|  |   move.l d0,194(sp)
    789a:	|  |   move.l 194(sp),d0
    789e:	|  |   move.l d0,190(sp)
    78a2:	|  |   move.l #106641,186(sp)
    78aa:	|  |   moveq #100,d1
    78ac:	|  |   move.l d1,182(sp)
    78b0:	|  |   move.l 1e8c8 <DOSBase>,d0
    78b6:	|  |   movea.l d0,a6
    78b8:	|  |   move.l 190(sp),d1
    78bc:	|  |   move.l 186(sp),d2
    78c0:	|  |   move.l 182(sp),d3
    78c4:	|  |   jsr -48(a6)
    78c8:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    78cc:	|  |   pea 1a091 <PutChar+0x1071>
    78d2:	|  |   jsr 1857e <KPrintF>
    78d8:	|  |   addq.l #4,sp
		return NULL;
    78da:	|  |   moveq #0,d0
    78dc:	+--|-- bra.s 7944 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    78de:	|  '-> movea.l 344(sp),a0
    78e2:	|      move.l (a0),d0
    78e4:	|      cmpi.l #257,d0
    78ea:	|  ,-- bgt.s 7940 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    78ec:	|  |   move.l 1e8c8 <DOSBase>,d0
    78f2:	|  |   movea.l d0,a6
    78f4:	|  |   jsr -60(a6)
    78f8:	|  |   move.l d0,214(sp)
    78fc:	|  |   move.l 214(sp),d0
    7900:	|  |   move.l d0,210(sp)
    7904:	|  |   move.l #106710,206(sp)
    790c:	|  |   moveq #100,d0
    790e:	|  |   move.l d0,202(sp)
    7912:	|  |   move.l 1e8c8 <DOSBase>,d0
    7918:	|  |   movea.l d0,a6
    791a:	|  |   move.l 210(sp),d1
    791e:	|  |   move.l 206(sp),d2
    7922:	|  |   move.l 202(sp),d3
    7926:	|  |   jsr -48(a6)
    792a:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    792e:	|  |   pea 1a0d6 <PutChar+0x10b6>
    7934:	|  |   jsr 1857e <KPrintF>
    793a:	|  |   addq.l #4,sp
		return NULL;
    793c:	|  |   moveq #0,d0
    793e:	+--|-- bra.s 7944 <openAndVerify+0x366>
	}
	return fp;
    7940:	|  '-> move.l 306(sp),d0
}
    7944:	'----> movem.l (sp)+,d2-d3/a6
    7948:	       lea 312(sp),sp
    794c:	       rts

0000794e <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    794e:	          subq.l #8,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    7950:	          move.l #125014,4(sp)
	while (* huntAndDestroy) {
    7958:	   ,----- bra.s 79a8 <pauseFunction+0x5a>
		if (fun == * huntAndDestroy) {
    795a:	,--|----> movea.l 4(sp),a0
    795e:	|  |      move.l (a0),d0
    7960:	|  |      cmp.l 12(sp),d0
    7964:	|  |  ,-- bne.s 799a <pauseFunction+0x4c>
			int test[1];
			test[0] = fun -> originalNumber;
    7966:	|  |  |   movea.l 12(sp),a0
    796a:	|  |  |   move.l (a0),d0
    796c:	|  |  |   move.l d0,(sp)
			KPrintF("Function %ld removed from running functions\n", test[0]);
    796e:	|  |  |   move.l (sp),d0
    7970:	|  |  |   move.l d0,-(sp)
    7972:	|  |  |   pea 1a11d <PutChar+0x10fd>
    7978:	|  |  |   jsr 1857e <KPrintF>
    797e:	|  |  |   addq.l #8,sp
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    7980:	|  |  |   movea.l 4(sp),a0
    7984:	|  |  |   movea.l (a0),a0
    7986:	|  |  |   move.l 44(a0),d0
    798a:	|  |  |   movea.l 4(sp),a0
    798e:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    7990:	|  |  |   movea.l 12(sp),a0
    7994:	|  |  |   clr.l 44(a0)
    7998:	|  +--|-- bra.s 79a8 <pauseFunction+0x5a>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    799a:	|  |  '-> movea.l 4(sp),a0
    799e:	|  |      move.l (a0),d0
    79a0:	|  |      moveq #44,d1
    79a2:	|  |      add.l d0,d1
    79a4:	|  |      move.l d1,4(sp)
	while (* huntAndDestroy) {
    79a8:	|  '----> movea.l 4(sp),a0
    79ac:	|         move.l (a0),d0
    79ae:	'-------- bne.s 795a <pauseFunction+0xc>
		}
	}
}
    79b0:	          nop
    79b2:	          nop
    79b4:	          addq.l #8,sp
    79b6:	          rts

000079b8 <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {		

	return loadFunctionCode (funcNum);	
    79b8:	move.l 4(sp),-(sp)
    79bc:	jsr 7086 <loadFunctionCode>
    79c2:	addq.l #4,sp
}
    79c4:	rts

000079c6 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
    79c6:	subq.l #4,sp

	int test[1];
	test[0] = fun -> originalNumber;
    79c8:	movea.l 8(sp),a0
    79cc:	move.l (a0),d0
    79ce:	move.l d0,(sp)

	KPrintF("Function %ld restarted\n", test[0]);
    79d0:	move.l (sp),d0
    79d2:	move.l d0,-(sp)
    79d4:	pea 1a14a <PutChar+0x112a>
    79da:	jsr 1857e <KPrintF>
    79e0:	addq.l #8,sp

	fun -> next = allRunningFunctions;
    79e2:	move.l 1e856 <allRunningFunctions>,d0
    79e8:	movea.l 8(sp),a0
    79ec:	move.l d0,44(a0)
	fun -> unloaded = 0;
    79f0:	movea.l 8(sp),a0
    79f4:	clr.l 58(a0)
	allRunningFunctions = fun;
    79f8:	move.l 8(sp),1e856 <allRunningFunctions>
}
    7a00:	nop
    7a02:	addq.l #4,sp
    7a04:	rts

00007a06 <runSludge>:

BOOL runSludge () {
    7a06:	                      lea -12(sp),sp
    7a0a:	                      move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    7a0c:	                      move.l 1e856 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    7a14:	      ,-------------- bra.s 7a90 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    7a16:	   ,--|-------------> movea.l 12(sp),a0
    7a1a:	   |  |               move.l 44(a0),8(sp)

		if (! thisFunction -> freezerLevel) {
    7a20:	   |  |               movea.l 12(sp),a0
    7a24:	   |  |               move.b 56(a0),d0
    7a28:	   |  |  ,----------- bne.s 7a8a <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    7a2a:	   |  |  |            movea.l 12(sp),a0
    7a2e:	   |  |  |            move.l 12(a0),d0
    7a32:	   |  |  |     ,----- beq.s 7a5c <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    7a34:	   |  |  |     |      movea.l 12(sp),a0
    7a38:	   |  |  |     |      move.l 12(a0),d0
    7a3c:	   |  |  |     |  ,-- bpl.s 7a48 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    7a3e:	   |  |  |     |  |   movea.l 12(sp),a0
    7a42:	   |  |  |     |  |   clr.l 12(a0)
    7a46:	   |  |  +-----|--|-- bra.s 7a8a <runSludge+0x84>
				} 
				else {
					thisFunction -> timeLeft--;
    7a48:	   |  |  |     |  '-> movea.l 12(sp),a0
    7a4c:	   |  |  |     |      move.l 12(a0),d0
    7a50:	   |  |  |     |      subq.l #1,d0
    7a52:	   |  |  |     |      movea.l 12(sp),a0
    7a56:	   |  |  |     |      move.l d0,12(a0)
					break;
    7a5a:	   |  |  |  ,--|----- bra.s 7a96 <runSludge+0x90>
				}
			} else {
				if (thisFunction -> isSpeech) {
    7a5c:	   |  |  |  |  '----> movea.l 12(sp),a0
    7a60:	   |  |  |  |         move.w 50(a0),d0
    7a64:	   |  |  |  |     ,-- beq.s 7a74 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    7a66:	   |  |  |  |     |   movea.l 12(sp),a0
    7a6a:	   |  |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    7a6e:	   |  |  |  |     |   jsr 44c0 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    7a74:	   |  |  |  |     '-> move.l 12(sp),-(sp)
    7a78:	   |  |  |  |         jsr 5718 <continueFunction>
    7a7e:	   |  |  |  |         addq.l #4,sp
    7a80:	   |  |  |  |         tst.w d0
    7a82:	   |  |  +--|-------- bne.s 7a8a <runSludge+0x84>
					return FALSE;
    7a84:	   |  |  |  |         clr.w d0
    7a86:	,--|--|--|--|-------- bra.w 7b16 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    7a8a:	|  |  |  '--|-------> move.l 8(sp),12(sp)
	while (thisFunction) {
    7a90:	|  |  '-----|-------> tst.l 12(sp)
    7a94:	|  '--------|-------- bne.s 7a16 <runSludge+0x10>
	}

	if (loadNow) {
    7a96:	|           '-------> move.l 1e88a <loadNow>,d0
    7a9c:	|           ,-------- beq.s 7b14 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    7a9e:	|           |         movea.l 1e88a <loadNow>,a0
    7aa4:	|           |         move.b (a0),d0
    7aa6:	|           |         cmpi.b #58,d0
    7aaa:	|           |  ,----- bne.s 7ade <runSludge+0xd8>
			saveGame (loadNow + 1);
    7aac:	|           |  |      move.l 1e88a <loadNow>,d0
    7ab2:	|           |  |      addq.l #1,d0
    7ab4:	|           |  |      move.l d0,-(sp)
    7ab6:	|           |  |      jsr d1b2 <saveGame>
    7abc:	|           |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    7abe:	|           |  |      movea.l 1e98a <saverFunc>,a0
    7ac4:	|           |  |      lea 28(a0),a0
    7ac8:	|           |  |      pea 1 <_start+0x1>
    7acc:	|           |  |      pea 1 <_start+0x1>
    7ad0:	|           |  |      move.l a0,-(sp)
    7ad2:	|           |  |      jsr 16390 <setVariable>
    7ad8:	|           |  |      lea 12(sp),sp
    7adc:	|           |  |  ,-- bra.s 7af6 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    7ade:	|           |  '--|-> move.l 1e88a <loadNow>,d0
    7ae4:	|           |     |   move.l d0,-(sp)
    7ae6:	|           |     |   jsr ccfa <loadGame>
    7aec:	|           |     |   addq.l #4,sp
    7aee:	|           |     |   tst.w d0
    7af0:	|           |     +-- bne.s 7af6 <runSludge+0xf0>
    7af2:	|           |     |   clr.w d0
    7af4:	+-----------|-----|-- bra.s 7b16 <runSludge+0x110>
		}
		FreeVec(loadNow);
    7af6:	|           |     '-> move.l 1e88a <loadNow>,4(sp)
    7afe:	|           |         move.l 1e8c0 <SysBase>,d0
    7b04:	|           |         movea.l d0,a6
    7b06:	|           |         movea.l 4(sp),a1
    7b0a:	|           |         jsr -690(a6)
		loadNow = NULL;
    7b0e:	|           |         clr.l 1e88a <loadNow>
	}

	return TRUE;
    7b14:	|           '-------> moveq #1,d0
}
    7b16:	'-------------------> movea.l (sp)+,a6
    7b18:	                      lea 12(sp),sp
    7b1c:	                      rts

00007b1e <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    7b1e:	movea.l 1e224 <currentEvents>,a0
    7b24:	move.l (a0),d0
    7b26:	move.l 4(sp),-(sp)
    7b2a:	move.l d0,-(sp)
    7b2c:	jsr 8d0 <put2bytes>
    7b32:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    7b34:	movea.l 1e224 <currentEvents>,a0
    7b3a:	move.l 4(a0),d0
    7b3e:	move.l 4(sp),-(sp)
    7b42:	move.l d0,-(sp)
    7b44:	jsr 8d0 <put2bytes>
    7b4a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    7b4c:	movea.l 1e224 <currentEvents>,a0
    7b52:	move.l 8(a0),d0
    7b56:	move.l 4(sp),-(sp)
    7b5a:	move.l d0,-(sp)
    7b5c:	jsr 8d0 <put2bytes>
    7b62:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    7b64:	movea.l 1e224 <currentEvents>,a0
    7b6a:	move.l 12(a0),d0
    7b6e:	move.l 4(sp),-(sp)
    7b72:	move.l d0,-(sp)
    7b74:	jsr 8d0 <put2bytes>
    7b7a:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    7b7c:	movea.l 1e224 <currentEvents>,a0
    7b82:	move.l 16(a0),d0
    7b86:	move.l 4(sp),-(sp)
    7b8a:	move.l d0,-(sp)
    7b8c:	jsr 8d0 <put2bytes>
    7b92:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    7b94:	movea.l 1e224 <currentEvents>,a0
    7b9a:	move.l 20(a0),d0
    7b9e:	move.l 4(sp),-(sp)
    7ba2:	move.l d0,-(sp)
    7ba4:	jsr 958 <put4bytes>
    7baa:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    7bac:	movea.l 1e224 <currentEvents>,a0
    7bb2:	move.l 24(a0),d0
    7bb6:	move.l 4(sp),-(sp)
    7bba:	move.l d0,-(sp)
    7bbc:	jsr 8d0 <put2bytes>
    7bc2:	addq.l #8,sp
}
    7bc4:	nop
    7bc6:	rts

00007bc8 <sludgeDisplay>:

void sludgeDisplay () {					
    7bc8:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7bca:	move.l #14675968,(sp)
	displayCursor();
    7bd0:	jsr c58 <displayCursor>
	CstRestoreScreen();
    7bd6:	jsr 2e74 <CstRestoreScreen>
	drawPeople();
    7bdc:	jsr aa34 <drawPeople>
	CstSwapBuffer();
    7be2:	jsr 3b1c <CstSwapBuffer>
}
    7be8:	nop
    7bea:	addq.l #4,sp
    7bec:	rts

00007bee <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    7bee:	      ,-- bra.s 7c0e <stackSetByIndex+0x20>
		vS = vS->next;
    7bf0:	,-----|-> movea.l 4(sp),a0
    7bf4:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    7bfa:	|     +-- bne.s 7c0e <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    7bfc:	|     |   pea 1a162 <PutChar+0x1142>
    7c02:	|     |   jsr 1857e <KPrintF>
    7c08:	|     |   addq.l #4,sp
			return FALSE;
    7c0a:	|     |   clr.w d0
    7c0c:	|  ,--|-- bra.s 7c30 <stackSetByIndex+0x42>
	while (theIndex--) {
    7c0e:	|  |  '-> move.l 8(sp),d0
    7c12:	|  |      move.l d0,d1
    7c14:	|  |      subq.l #1,d1
    7c16:	|  |      move.l d1,8(sp)
    7c1a:	|  |      tst.l d0
    7c1c:	'--|----- bne.s 7bf0 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    7c1e:	   |      move.l 4(sp),d0
    7c22:	   |      move.l d0,-(sp)
    7c24:	   |      move.l 16(sp),-(sp)
    7c28:	   |      jsr 15f58 <copyVariable>
    7c2e:	   |      addq.l #8,sp
}
    7c30:	   '----> rts

00007c32 <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7c32:	             subq.l #8,sp
    7c34:	             move.l 28(sp),d0
    7c38:	             move.w d0,d0
    7c3a:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    7c3e:	             movea.l 12(sp),a0
    7c42:	             move.l 16(a0),d1
    7c46:	             move.l 16(sp),d0
    7c4a:	             cmp.l d1,d0
    7c4c:	         ,-- beq.s 7c62 <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    7c4e:	         |   pea 1a17b <PutChar+0x115b>
    7c54:	         |   jsr 1857e <KPrintF>
    7c5a:	         |   addq.l #4,sp
		return NULL; 
    7c5c:	         |   moveq #0,d0
    7c5e:	,--------|-- bra.w 7d3e <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    7c62:	|        '-> movea.l 12(sp),a0
    7c66:	|            move.l 16(a0),d1
    7c6a:	|            movea.l 12(sp),a0
    7c6e:	|            move.l 8(a0),d0
    7c72:	|            cmp.l d1,d0
    7c74:	|  ,-------- bge.s 7cde <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    7c76:	|  |         pea 1a197 <PutChar+0x1177>
    7c7c:	|  |         jsr 1857e <KPrintF>
    7c82:	|  |         addq.l #4,sp
		return NULL; 
    7c84:	|  |         moveq #0,d0
    7c86:	+--|-------- bra.w 7d3e <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    7c8a:	|  |  ,----> movea.l 24(sp),a0
    7c8e:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    7c92:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    7c96:	|  |  |      movea.l 24(sp),a0
    7c9a:	|  |  |      move.l (a0),d0
    7c9c:	|  |  |  ,-- bne.s 7cb2 <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7c9e:	|  |  |  |   pea 1a1c1 <PutChar+0x11a1>
    7ca4:	|  |  |  |   jsr 1857e <KPrintF>
    7caa:	|  |  |  |   addq.l #4,sp
			return NULL;
    7cac:	|  |  |  |   moveq #0,d0
    7cae:	+--|--|--|-- bra.w 7d3e <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    7cb2:	|  |  |  '-> movea.l 12(sp),a0
    7cb6:	|  |  |      move.l 20(a0),d1
    7cba:	|  |  |      move.l 16(sp),d0
    7cbe:	|  |  |      lsl.l #3,d0
    7cc0:	|  |  |      add.l d0,d1
    7cc2:	|  |  |      move.l 4(sp),d0
    7cc6:	|  |  |      move.l d1,-(sp)
    7cc8:	|  |  |      move.l d0,-(sp)
    7cca:	|  |  |      jsr 15f58 <copyVariable>
    7cd0:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7cd2:	|  |  |      move.l 24(sp),-(sp)
    7cd6:	|  |  |      jsr 16422 <trimStack>
    7cdc:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    7cde:	|  '--|----> tst.l 16(sp)
    7ce2:	|     '----- bne.s 7c8a <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    7ce4:	|            movea.l 12(sp),a0
    7ce8:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    7cec:	|            movea.l 12(sp),a0
    7cf0:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    7cf4:	|            movea.l 12(sp),a0
    7cf8:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    7cfe:	|            movea.l 12(sp),a0
    7d02:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    7d08:	|            movea.l 12(sp),a0
    7d0c:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    7d10:	|            movea.l 12(sp),a0
    7d14:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    7d18:	|            movea.l 12(sp),a0
    7d1c:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    7d20:	|            movea.l 12(sp),a0
    7d24:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    7d28:	|            movea.l 12(sp),a0
    7d2c:	|            clr.l 28(a0)

	restartFunction (newFunc);
    7d30:	|            move.l 12(sp),-(sp)
    7d34:	|            jsr 79c6 <restartFunction>
    7d3a:	|            addq.l #4,sp
	return 1;
    7d3c:	|            moveq #1,d0
}
    7d3e:	'----------> addq.l #8,sp
    7d40:	             rts

00007d42 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7d42:	lea -12(sp),sp
    7d46:	move.l 32(sp),d0
    7d4a:	move.w d0,d0
    7d4c:	move.w d0,2(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7d50:	move.l #14675968,8(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction *newFunc = loadFunctionCode (funcNum);	
    7d58:	move.l 16(sp),-(sp)
    7d5c:	jsr 7086 <loadFunctionCode>
    7d62:	addq.l #4,sp
    7d64:	move.l d0,4(sp)
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    7d68:	movea.w 2(sp),a0
    7d6c:	move.l a0,-(sp)
    7d6e:	move.l 32(sp),-(sp)
    7d72:	move.l 32(sp),-(sp)
    7d76:	move.l 32(sp),-(sp)
    7d7a:	move.l 20(sp),-(sp)
    7d7e:	jsr 7c32 <startNewFunctionLoaded>
    7d84:	lea 20(sp),sp
}
    7d88:	lea 12(sp),sp
    7d8c:	rts

00007d8e <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    7d8e:	             subq.l #8,sp
    7d90:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    7d92:	             movea.l 1e224 <currentEvents>,a0
    7d98:	             move.l 20(a0),d0
    7d9c:	             cmp.l 16(sp),d0
    7da0:	,----------- beq.w 7e30 <unloadFunction+0xa2>
		return;
	}

	if (fun -> stack) 
    7da4:	|            movea.l 16(sp),a0
    7da8:	|            move.l 24(a0),d0
    7dac:	|        ,-- beq.s 7dbe <unloadFunction+0x30>
	{
		KPrintF("unloadfunction: error non empty stack");
    7dae:	|        |   pea 1a20c <PutChar+0x11ec>
    7db4:	|        |   jsr 1857e <KPrintF>
    7dba:	|        |   addq.l #4,sp
		return;
    7dbc:	|  ,-----|-- bra.s 7e32 <unloadFunction+0xa4>
	}
	
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    7dbe:	|  |     '-> clr.l 8(sp)
    7dc2:	|  |     ,-- bra.s 7de2 <unloadFunction+0x54>
    7dc4:	|  |  ,--|-> movea.l 16(sp),a0
    7dc8:	|  |  |  |   move.l 20(a0),d1
    7dcc:	|  |  |  |   move.l 8(sp),d0
    7dd0:	|  |  |  |   lsl.l #3,d0
    7dd2:	|  |  |  |   add.l d1,d0
    7dd4:	|  |  |  |   move.l d0,-(sp)
    7dd6:	|  |  |  |   jsr 15cec <unlinkVar>
    7ddc:	|  |  |  |   addq.l #4,sp
    7dde:	|  |  |  |   addq.l #1,8(sp)
    7de2:	|  |  |  '-> movea.l 16(sp),a0
    7de6:	|  |  |      move.l 8(a0),d0
    7dea:	|  |  |      cmp.l 8(sp),d0
    7dee:	|  |  '----- bgt.s 7dc4 <unloadFunction+0x36>
	if( fun->numLocals > 0) {
    7df0:	|  |         movea.l 16(sp),a0
    7df4:	|  |         move.l 8(a0),d0
    7df8:	|  |     ,-- ble.s 7e14 <unloadFunction+0x86>
		FreeVec(fun -> localVars);
    7dfa:	|  |     |   movea.l 16(sp),a0
    7dfe:	|  |     |   move.l 20(a0),4(sp)
    7e04:	|  |     |   move.l 1e8c0 <SysBase>,d0
    7e0a:	|  |     |   movea.l d0,a6
    7e0c:	|  |     |   movea.l 4(sp),a1
    7e10:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    7e14:	|  |     '-> moveq #28,d0
    7e16:	|  |         add.l 16(sp),d0
    7e1a:	|  |         move.l d0,-(sp)
    7e1c:	|  |         jsr 15cec <unlinkVar>
    7e22:	|  |         addq.l #4,sp
	fun->unloaded = 1;
    7e24:	|  |         movea.l 16(sp),a0
    7e28:	|  |         moveq #1,d0
    7e2a:	|  |         move.l d0,58(a0)
    7e2e:	|  +-------- bra.s 7e32 <unloadFunction+0xa4>
		return;
    7e30:	'--|-------> nop

}
    7e32:	   '-------> movea.l (sp)+,a6
    7e34:	             addq.l #8,sp
    7e36:	             rts

00007e38 <unfreezeSubs>:

void unfreezeSubs () {
    7e38:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7e3a:	          move.l 1e856 <allRunningFunctions>,(sp)

	while (thisFunction) {
    7e40:	   ,----- bra.s 7e5e <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    7e42:	,--|----> movea.l (sp),a0
    7e44:	|  |      move.b 56(a0),d0
    7e48:	|  |  ,-- beq.s 7e58 <unfreezeSubs+0x20>
    7e4a:	|  |  |   movea.l (sp),a0
    7e4c:	|  |  |   move.b 56(a0),d0
    7e50:	|  |  |   subq.b #1,d0
    7e52:	|  |  |   movea.l (sp),a0
    7e54:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    7e58:	|  |  '-> movea.l (sp),a0
    7e5a:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    7e5e:	|  '----> tst.l (sp)
    7e60:	'-------- bne.s 7e42 <unfreezeSubs+0xa>
	}
}
    7e62:	          nop
    7e64:	          nop
    7e66:	          addq.l #4,sp
    7e68:	          rts

00007e6a <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    7e6a:	clr.w 1e230 <sliceBusy>
}
    7e70:	nop
    7e72:	rts

00007e74 <getNumberedString>:

char * getNumberedString (int value) {
    7e74:	       lea -56(sp),sp
    7e78:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    7e7c:	       move.w 1e230 <sliceBusy>,d0
    7e82:	   ,-- beq.s 7ecc <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    7e84:	   |   move.l 1e8c8 <DOSBase>,d0
    7e8a:	   |   movea.l d0,a6
    7e8c:	   |   jsr -60(a6)
    7e90:	   |   move.l d0,28(sp)
    7e94:	   |   move.l 28(sp),d0
    7e98:	   |   move.l d0,24(sp)
    7e9c:	   |   move.l #107058,20(sp)
    7ea4:	   |   moveq #76,d0
    7ea6:	   |   move.l d0,16(sp)
    7eaa:	   |   move.l 1e8c8 <DOSBase>,d0
    7eb0:	   |   movea.l d0,a6
    7eb2:	   |   move.l 24(sp),d1
    7eb6:	   |   move.l 20(sp),d2
    7eba:	   |   move.l 16(sp),d3
    7ebe:	   |   jsr -48(a6)
    7ec2:	   |   move.l d0,12(sp)
		return NULL;
    7ec6:	   |   moveq #0,d0
    7ec8:	,--|-- bra.w 7f68 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    7ecc:	|  '-> move.l 1e8a6 <bigDataFile>,64(sp)
    7ed4:	|      move.l 72(sp),d0
    7ed8:	|      add.l d0,d0
    7eda:	|      add.l d0,d0
    7edc:	|      move.l d0,d1
    7ede:	|      move.l 1e8b2 <startOfTextIndex>,d0
    7ee4:	|      add.l d1,d0
    7ee6:	|      move.l d0,60(sp)
    7eea:	|      moveq #-1,d0
    7eec:	|      move.l d0,56(sp)
    7ef0:	|      move.l 1e8c8 <DOSBase>,d0
    7ef6:	|      movea.l d0,a6
    7ef8:	|      move.l 64(sp),d1
    7efc:	|      move.l 60(sp),d2
    7f00:	|      move.l 56(sp),d3
    7f04:	|      jsr -66(a6)
    7f08:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    7f0c:	|      move.l 1e8a6 <bigDataFile>,d0
    7f12:	|      move.l d0,-(sp)
    7f14:	|      jsr 718 <get4bytes>
    7f1a:	|      addq.l #4,sp
    7f1c:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7f20:	|      move.l 1e8a6 <bigDataFile>,48(sp)
    7f28:	|      move.l 72(sp),44(sp)
    7f2e:	|      moveq #-1,d0
    7f30:	|      move.l d0,40(sp)
    7f34:	|      move.l 1e8c8 <DOSBase>,d0
    7f3a:	|      movea.l d0,a6
    7f3c:	|      move.l 48(sp),d1
    7f40:	|      move.l 44(sp),d2
    7f44:	|      move.l 40(sp),d3
    7f48:	|      jsr -66(a6)
    7f4c:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    7f50:	|      move.l 1e8a6 <bigDataFile>,d0
    7f56:	|      move.l d0,-(sp)
    7f58:	|      jsr b02 <readString>
    7f5e:	|      addq.l #4,sp
    7f60:	|      move.l d0,32(sp)
	
	return s;
    7f64:	|      move.l 32(sp),d0
}
    7f68:	'----> movem.l (sp)+,d2-d3/a6
    7f6c:	       lea 56(sp),sp
    7f70:	       rts

00007f72 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    7f72:	       lea -32(sp),sp
    7f76:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7f7a:	       move.w 1e230 <sliceBusy>,d0
    7f80:	   ,-- beq.s 7f9c <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7f82:	   |   pea 1a27f <PutChar+0x125f>
    7f88:	   |   pea 1a29d <PutChar+0x127d>
    7f8e:	   |   jsr 1857e <KPrintF>
    7f94:	   |   addq.l #8,sp
		return 0;
    7f96:	   |   moveq #0,d0
    7f98:	,--|-- bra.w 8030 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7f9c:	|  '-> move.l 1e8a6 <bigDataFile>,40(sp)
    7fa4:	|      move.l 48(sp),d0
    7fa8:	|      add.l d0,d0
    7faa:	|      add.l d0,d0
    7fac:	|      move.l d0,d1
    7fae:	|      move.l 1e8ae <startOfDataIndex>,d0
    7fb4:	|      add.l d1,d0
    7fb6:	|      move.l d0,36(sp)
    7fba:	|      moveq #-1,d0
    7fbc:	|      move.l d0,32(sp)
    7fc0:	|      move.l 1e8c8 <DOSBase>,d0
    7fc6:	|      movea.l d0,a6
    7fc8:	|      move.l 40(sp),d1
    7fcc:	|      move.l 36(sp),d2
    7fd0:	|      move.l 32(sp),d3
    7fd4:	|      jsr -66(a6)
    7fd8:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    7fdc:	|      move.l 1e8a6 <bigDataFile>,24(sp)
    7fe4:	|      move.l 1e8a6 <bigDataFile>,d0
    7fea:	|      move.l d0,-(sp)
    7fec:	|      jsr 718 <get4bytes>
    7ff2:	|      addq.l #4,sp
    7ff4:	|      move.l d0,20(sp)
    7ff8:	|      clr.l 16(sp)
    7ffc:	|      move.l 1e8c8 <DOSBase>,d0
    8002:	|      movea.l d0,a6
    8004:	|      move.l 24(sp),d1
    8008:	|      move.l 20(sp),d2
    800c:	|      move.l 16(sp),d3
    8010:	|      jsr -66(a6)
    8014:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    8018:	|      move.w #1,1e230 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    8020:	|      move.l 1e8a6 <bigDataFile>,d0
    8026:	|      move.l d0,-(sp)
    8028:	|      jsr 718 <get4bytes>
    802e:	|      addq.l #4,sp
}
    8030:	'----> movem.l (sp)+,d2-d3/a6
    8034:	       lea 32(sp),sp
    8038:	       rts

0000803a <openObjectSlice>:

BOOL openObjectSlice (int num) {
    803a:	       lea -32(sp),sp
    803e:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    8042:	       move.w 1e230 <sliceBusy>,d0
    8048:	   ,-- beq.s 8064 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    804a:	   |   pea 1a27f <PutChar+0x125f>
    8050:	   |   pea 1a29d <PutChar+0x127d>
    8056:	   |   jsr 1857e <KPrintF>
    805c:	   |   addq.l #8,sp
        return FALSE;
    805e:	   |   clr.w d0
    8060:	,--|-- bra.w 80f0 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    8064:	|  '-> move.l 1e8a6 <bigDataFile>,40(sp)
    806c:	|      move.l 48(sp),d0
    8070:	|      add.l d0,d0
    8072:	|      add.l d0,d0
    8074:	|      move.l d0,d1
    8076:	|      move.l 1e8ba <startOfObjectIndex>,d0
    807c:	|      add.l d1,d0
    807e:	|      move.l d0,36(sp)
    8082:	|      moveq #-1,d0
    8084:	|      move.l d0,32(sp)
    8088:	|      move.l 1e8c8 <DOSBase>,d0
    808e:	|      movea.l d0,a6
    8090:	|      move.l 40(sp),d1
    8094:	|      move.l 36(sp),d2
    8098:	|      move.l 32(sp),d3
    809c:	|      jsr -66(a6)
    80a0:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    80a4:	|      move.l 1e8a6 <bigDataFile>,24(sp)
    80ac:	|      move.l 1e8a6 <bigDataFile>,d0
    80b2:	|      move.l d0,-(sp)
    80b4:	|      jsr 718 <get4bytes>
    80ba:	|      addq.l #4,sp
    80bc:	|      move.l d0,20(sp)
    80c0:	|      moveq #-1,d0
    80c2:	|      move.l d0,16(sp)
    80c6:	|      move.l 1e8c8 <DOSBase>,d0
    80cc:	|      movea.l d0,a6
    80ce:	|      move.l 24(sp),d1
    80d2:	|      move.l 20(sp),d2
    80d6:	|      move.l 16(sp),d3
    80da:	|      jsr -66(a6)
    80de:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    80e2:	|      move.w #1,1e230 <sliceBusy>
    80ea:	|      move.w 1e230 <sliceBusy>,d0
}
    80f0:	'----> movem.l (sp)+,d2-d3/a6
    80f4:	       lea 32(sp),sp
    80f8:	       rts

000080fa <openSubSlice>:

BOOL openSubSlice (int num) {
    80fa:	       lea -32(sp),sp
    80fe:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    8102:	       move.w 1e230 <sliceBusy>,d0
    8108:	   ,-- beq.s 8124 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    810a:	   |   pea 1a27f <PutChar+0x125f>
    8110:	   |   pea 1a29d <PutChar+0x127d>
    8116:	   |   jsr 1857e <KPrintF>
    811c:	   |   addq.l #8,sp
		return FALSE;
    811e:	   |   clr.w d0
    8120:	,--|-- bra.w 81b0 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    8124:	|  '-> move.l 1e8a6 <bigDataFile>,40(sp)
    812c:	|      move.l 48(sp),d0
    8130:	|      add.l d0,d0
    8132:	|      add.l d0,d0
    8134:	|      move.l d0,d1
    8136:	|      move.l 1e8b6 <startOfSubIndex>,d0
    813c:	|      add.l d1,d0
    813e:	|      move.l d0,36(sp)
    8142:	|      moveq #-1,d0
    8144:	|      move.l d0,32(sp)
    8148:	|      move.l 1e8c8 <DOSBase>,d0
    814e:	|      movea.l d0,a6
    8150:	|      move.l 40(sp),d1
    8154:	|      move.l 36(sp),d2
    8158:	|      move.l 32(sp),d3
    815c:	|      jsr -66(a6)
    8160:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    8164:	|      move.l 1e8a6 <bigDataFile>,24(sp)
    816c:	|      move.l 1e8a6 <bigDataFile>,d0
    8172:	|      move.l d0,-(sp)
    8174:	|      jsr 718 <get4bytes>
    817a:	|      addq.l #4,sp
    817c:	|      move.l d0,20(sp)
    8180:	|      moveq #-1,d0
    8182:	|      move.l d0,16(sp)
    8186:	|      move.l 1e8c8 <DOSBase>,d0
    818c:	|      movea.l d0,a6
    818e:	|      move.l 24(sp),d1
    8192:	|      move.l 20(sp),d2
    8196:	|      move.l 16(sp),d3
    819a:	|      jsr -66(a6)
    819e:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    81a2:	|      move.w #1,1e230 <sliceBusy>
    81aa:	|      move.w 1e230 <sliceBusy>,d0
}
    81b0:	'----> movem.l (sp)+,d2-d3/a6
    81b4:	       lea 32(sp),sp
    81b8:	       rts

000081ba <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    81ba:	       lea -180(sp),sp
    81be:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    81c2:	       tst.l 196(sp)
    81c6:	,----- beq.s 8206 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    81c8:	|      move.l 196(sp),1e8a6 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    81d0:	|      move.l 196(sp),168(sp)
    81d6:	|      clr.l 164(sp)
    81da:	|      clr.l 160(sp)
    81de:	|      move.l 1e8c8 <DOSBase>,d0
    81e4:	|      movea.l d0,a6
    81e6:	|      move.l 168(sp),d1
    81ea:	|      move.l 164(sp),d2
    81ee:	|      move.l 160(sp),d3
    81f2:	|      jsr -66(a6)
    81f6:	|      move.l d0,156(sp)
    81fa:	|      move.l 156(sp),d0
    81fe:	|      move.l d0,1e8aa <startIndex>
    8204:	|  ,-- bra.s 8240 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    8206:	'--|-> move.l 1e8a6 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    820e:	   |   move.l 196(sp),184(sp)
    8214:	   |   move.l 1e8aa <startIndex>,d0
    821a:	   |   move.l d0,180(sp)
    821e:	   |   moveq #-1,d0
    8220:	   |   move.l d0,176(sp)
    8224:	   |   move.l 1e8c8 <DOSBase>,d0
    822a:	   |   movea.l d0,a6
    822c:	   |   move.l 184(sp),d1
    8230:	   |   move.l 180(sp),d2
    8234:	   |   move.l 176(sp),d3
    8238:	   |   jsr -66(a6)
    823c:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    8240:	   '-> clr.w 1e230 <sliceBusy>

	if (skipBefore > numLanguages) {
    8246:	       move.l 204(sp),d0
    824a:	       cmp.l 200(sp),d0
    824e:	   ,-- bls.s 8262 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    8250:	   |   pea 1a2b7 <PutChar+0x1297>
    8256:	   |   jsr 1857e <KPrintF>
    825c:	   |   addq.l #4,sp
		skipBefore = 0;
    825e:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    8262:	   '-> move.l 200(sp),d0
    8266:	       sub.l 204(sp),d0
    826a:	       move.l d0,188(sp)
	while (skipBefore) {
    826e:	   ,-- bra.s 82ac <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    8270:	,--|-> move.l 196(sp),24(sp)
    8276:	|  |   move.l 196(sp),-(sp)
    827a:	|  |   jsr 718 <get4bytes>
    8280:	|  |   addq.l #4,sp
    8282:	|  |   move.l d0,20(sp)
    8286:	|  |   moveq #-1,d0
    8288:	|  |   move.l d0,16(sp)
    828c:	|  |   move.l 1e8c8 <DOSBase>,d0
    8292:	|  |   movea.l d0,a6
    8294:	|  |   move.l 24(sp),d1
    8298:	|  |   move.l 20(sp),d2
    829c:	|  |   move.l 16(sp),d3
    82a0:	|  |   jsr -66(a6)
    82a4:	|  |   move.l d0,12(sp)
		skipBefore --;
    82a8:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    82ac:	|  '-> tst.l 204(sp)
    82b0:	'----- bne.s 8270 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    82b2:	       move.l 196(sp),152(sp)
    82b8:	       clr.l 148(sp)
    82bc:	       clr.l 144(sp)
    82c0:	       move.l 1e8c8 <DOSBase>,d0
    82c6:	       movea.l d0,a6
    82c8:	       move.l 152(sp),d1
    82cc:	       move.l 148(sp),d2
    82d0:	       move.l 144(sp),d3
    82d4:	       jsr -66(a6)
    82d8:	       move.l d0,140(sp)
    82dc:	       move.l 140(sp),d0
    82e0:	       addq.l #4,d0
    82e2:	       move.l d0,1e8b2 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    82e8:	       move.l 196(sp),136(sp)
    82ee:	       move.l 196(sp),-(sp)
    82f2:	       jsr 718 <get4bytes>
    82f8:	       addq.l #4,sp
    82fa:	       move.l d0,132(sp)
    82fe:	       moveq #-1,d0
    8300:	       move.l d0,128(sp)
    8304:	       move.l 1e8c8 <DOSBase>,d0
    830a:	       movea.l d0,a6
    830c:	       move.l 136(sp),d1
    8310:	       move.l 132(sp),d2
    8314:	       move.l 128(sp),d3
    8318:	       jsr -66(a6)
    831c:	       move.l d0,124(sp)

	while (skipAfter) {
    8320:	   ,-- bra.s 835e <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    8322:	,--|-> move.l 196(sp),40(sp)
    8328:	|  |   move.l 196(sp),-(sp)
    832c:	|  |   jsr 718 <get4bytes>
    8332:	|  |   addq.l #4,sp
    8334:	|  |   move.l d0,36(sp)
    8338:	|  |   moveq #-1,d0
    833a:	|  |   move.l d0,32(sp)
    833e:	|  |   move.l 1e8c8 <DOSBase>,d0
    8344:	|  |   movea.l d0,a6
    8346:	|  |   move.l 40(sp),d1
    834a:	|  |   move.l 36(sp),d2
    834e:	|  |   move.l 32(sp),d3
    8352:	|  |   jsr -66(a6)
    8356:	|  |   move.l d0,28(sp)
		skipAfter --;
    835a:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    835e:	|  '-> tst.l 188(sp)
    8362:	'----- bne.s 8322 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    8364:	       move.l 196(sp),120(sp)
    836a:	       clr.l 116(sp)
    836e:	       clr.l 112(sp)
    8372:	       move.l 1e8c8 <DOSBase>,d0
    8378:	       movea.l d0,a6
    837a:	       move.l 120(sp),d1
    837e:	       move.l 116(sp),d2
    8382:	       move.l 112(sp),d3
    8386:	       jsr -66(a6)
    838a:	       move.l d0,108(sp)
    838e:	       move.l 108(sp),d0
    8392:	       addq.l #4,d0
    8394:	       move.l d0,1e8b6 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    839a:	       move.l 196(sp),104(sp)
    83a0:	       move.l 196(sp),-(sp)
    83a4:	       jsr 718 <get4bytes>
    83aa:	       addq.l #4,sp
    83ac:	       move.l d0,100(sp)
    83b0:	       clr.l 96(sp)
    83b4:	       move.l 1e8c8 <DOSBase>,d0
    83ba:	       movea.l d0,a6
    83bc:	       move.l 104(sp),d1
    83c0:	       move.l 100(sp),d2
    83c4:	       move.l 96(sp),d3
    83c8:	       jsr -66(a6)
    83cc:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    83d0:	       move.l 196(sp),88(sp)
    83d6:	       clr.l 84(sp)
    83da:	       clr.l 80(sp)
    83de:	       move.l 1e8c8 <DOSBase>,d0
    83e4:	       movea.l d0,a6
    83e6:	       move.l 88(sp),d1
    83ea:	       move.l 84(sp),d2
    83ee:	       move.l 80(sp),d3
    83f2:	       jsr -66(a6)
    83f6:	       move.l d0,76(sp)
    83fa:	       move.l 76(sp),d0
    83fe:	       addq.l #4,d0
    8400:	       move.l d0,1e8ba <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    8406:	       move.l 196(sp),72(sp)
    840c:	       move.l 196(sp),-(sp)
    8410:	       jsr 718 <get4bytes>
    8416:	       addq.l #4,sp
    8418:	       move.l d0,68(sp)
    841c:	       clr.l 64(sp)
    8420:	       move.l 1e8c8 <DOSBase>,d0
    8426:	       movea.l d0,a6
    8428:	       move.l 72(sp),d1
    842c:	       move.l 68(sp),d2
    8430:	       move.l 64(sp),d3
    8434:	       jsr -66(a6)
    8438:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    843c:	       move.l 196(sp),56(sp)
    8442:	       clr.l 52(sp)
    8446:	       clr.l 48(sp)
    844a:	       move.l 1e8c8 <DOSBase>,d0
    8450:	       movea.l d0,a6
    8452:	       move.l 56(sp),d1
    8456:	       move.l 52(sp),d2
    845a:	       move.l 48(sp),d3
    845e:	       jsr -66(a6)
    8462:	       move.l d0,44(sp)
    8466:	       move.l 44(sp),d0
    846a:	       move.l d0,1e8ae <startOfDataIndex>
    8470:	       nop
    8472:	       movem.l (sp)+,d2-d3/a6
    8476:	       lea 180(sp),sp
    847a:	       rts

0000847c <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    847c:	    lea -20(sp),sp
    8480:	    move.l a6,-(sp)
    8482:	    move.l d7,-(sp)
	APTR vbr = 0;
    8484:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    8488:	    move.w #20090,10(sp)
    848e:	    move.w #2049,12(sp)
    8494:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    849a:	    movea.l 1e8c0 <SysBase>,a0
    84a0:	    move.w 296(a0),d0
    84a4:	    move.w d0,d0
    84a6:	    andi.l #65535,d0
    84ac:	    moveq #1,d1
    84ae:	    and.l d1,d0
    84b0:	,-- beq.s 84de <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    84b2:	|   lea 28(sp),a0
    84b6:	|   lea -18(a0),a0
    84ba:	|   move.l a0,20(sp)
    84be:	|   move.l 1e8c0 <SysBase>,d0
    84c4:	|   movea.l d0,a6
    84c6:	|   move.l 20(sp),d7
    84ca:	|   exg d7,a5
    84cc:	|   jsr -30(a6)
    84d0:	|   exg d7,a5
    84d2:	|   move.l d0,16(sp)
    84d6:	|   move.l 16(sp),d0
    84da:	|   move.l d0,24(sp)

	return vbr;
    84de:	'-> move.l 24(sp),d0
}
    84e2:	    move.l (sp)+,d7
    84e4:	    movea.l (sp)+,a6
    84e6:	    lea 20(sp),sp
    84ea:	    rts

000084ec <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    84ec:	movea.l 1e8e6 <VBR>,a0
    84f2:	lea 108(a0),a0
    84f6:	move.l 4(sp),(a0)
}
    84fa:	nop
    84fc:	rts

000084fe <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    84fe:	movea.l 1e8e6 <VBR>,a0
    8504:	move.l 108(a0),d0
}
    8508:	rts

0000850a <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    850a:	       subq.l #8,sp
    850c:	       move.l a6,-(sp)
	Forbid();
    850e:	       move.l 1e8c0 <SysBase>,d0
    8514:	       movea.l d0,a6
    8516:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	SystemADKCON=custom->adkconr;
    851a:	       movea.l 1e8c4 <custom>,a0
    8520:	       move.w 16(a0),d0
    8524:	       move.w d0,1e8e4 <SystemADKCON>
	SystemInts=custom->intenar;
    852a:	       movea.l 1e8c4 <custom>,a0
    8530:	       move.w 28(a0),d0
    8534:	       move.w d0,1e8e0 <SystemInts>
	SystemDMA=custom->dmaconr;
    853a:	       movea.l 1e8c4 <custom>,a0
    8540:	       move.w 2(a0),d0
    8544:	       move.w d0,1e8e2 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    854a:	       movea.l 1e8cc <GfxBase>,a0
    8550:	       move.l 34(a0),d0
    8554:	       move.l d0,1e8ee <ActiView>

	LoadView(0);
    855a:	       clr.l 4(sp)
    855e:	       move.l 1e8cc <GfxBase>,d0
    8564:	       movea.l d0,a6
    8566:	       movea.l 4(sp),a1
    856a:	       jsr -222(a6)
	WaitTOF();
    856e:	       move.l 1e8cc <GfxBase>,d0
    8574:	       movea.l d0,a6
    8576:	       jsr -270(a6)
	WaitTOF();
    857a:	       move.l 1e8cc <GfxBase>,d0
    8580:	       movea.l d0,a6
    8582:	       jsr -270(a6)

	WaitVbl();
    8586:	       jsr 184b2 <WaitVbl>
	WaitVbl();
    858c:	       jsr 184b2 <WaitVbl>

	OwnBlitter();
    8592:	       move.l 1e8cc <GfxBase>,d0
    8598:	       movea.l d0,a6
    859a:	       jsr -456(a6)
	WaitBlit();	
    859e:	       move.l 1e8cc <GfxBase>,d0
    85a4:	       movea.l d0,a6
    85a6:	       jsr -228(a6)
	//Disable();
	
	/*custom->intena=0x7fff;//disable all interrupts
	custom->intreq=0x7fff;//Clear any interrupts that were pending*/
	
	custom->dmacon=0x7fff;//Clear all DMA channels
    85aa:	       movea.l 1e8c4 <custom>,a0
    85b0:	       move.w #32767,150(a0)

	//set all colors black
	for(int a=0;a<32;a++)
    85b6:	       clr.l 8(sp)
    85ba:	   ,-- bra.s 85d8 <TakeSystem+0xce>
		custom->color[a]=0;
    85bc:	,--|-> movea.l 1e8c4 <custom>,a0
    85c2:	|  |   move.l 8(sp),d0
    85c6:	|  |   addi.l #192,d0
    85cc:	|  |   add.l d0,d0
    85ce:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    85d4:	|  |   addq.l #1,8(sp)
    85d8:	|  '-> moveq #31,d0
    85da:	|      cmp.l 8(sp),d0
    85de:	'----- bge.s 85bc <TakeSystem+0xb2>

	WaitVbl();
    85e0:	       jsr 184b2 <WaitVbl>
	WaitVbl();
    85e6:	       jsr 184b2 <WaitVbl>

	VBR=GetVBR();
    85ec:	       jsr 847c <GetVBR>
    85f2:	       move.l d0,1e8e6 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register
    85f8:	       jsr 84fe <GetInterruptHandler>
    85fe:	       move.l d0,1e8ea <SystemIrq>
}
    8604:	       nop
    8606:	       movea.l (sp)+,a6
    8608:	       addq.l #8,sp
    860a:	       rts

0000860c <FreeSystem>:

void FreeSystem() { 
    860c:	subq.l #4,sp
    860e:	move.l a6,-(sp)
	WaitVbl();
    8610:	jsr 184b2 <WaitVbl>
	WaitBlit();
    8616:	move.l 1e8cc <GfxBase>,d0
    861c:	movea.l d0,a6
    861e:	jsr -228(a6)
	/*custom->intena=0x7fff;//disable all interrupts
	custom->intreq=0x7fff;//Clear any interrupts that were pending*/
	custom->dmacon=0x7fff;//Clear all DMA channels
    8622:	movea.l 1e8c4 <custom>,a0
    8628:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    862e:	move.l 1e8ea <SystemIrq>,d0
    8634:	move.l d0,-(sp)
    8636:	jsr 84ec <SetInterruptHandler>
    863c:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    863e:	movea.l 1e8cc <GfxBase>,a0
    8644:	move.l 38(a0),d0
    8648:	movea.l 1e8c4 <custom>,a0
    864e:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    8652:	movea.l 1e8cc <GfxBase>,a0
    8658:	move.l 50(a0),d0
    865c:	movea.l 1e8c4 <custom>,a0
    8662:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    8666:	movea.l 1e8c4 <custom>,a0
    866c:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    8672:	move.w 1e8e2 <SystemDMA>,d0
    8678:	movea.l 1e8c4 <custom>,a0
    867e:	ori.w #-32768,d0
    8682:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    8686:	move.w 1e8e4 <SystemADKCON>,d0
    868c:	movea.l 1e8c4 <custom>,a0
    8692:	ori.w #-32768,d0
    8696:	move.w d0,158(a0)

	WaitBlit();	
    869a:	move.l 1e8cc <GfxBase>,d0
    86a0:	movea.l d0,a6
    86a2:	jsr -228(a6)
	DisownBlitter();
    86a6:	move.l 1e8cc <GfxBase>,d0
    86ac:	movea.l d0,a6
    86ae:	jsr -462(a6)
	//Enable();

	LoadView(ActiView);
    86b2:	move.l 1e8ee <ActiView>,4(sp)
    86ba:	move.l 1e8cc <GfxBase>,d0
    86c0:	movea.l d0,a6
    86c2:	movea.l 4(sp),a1
    86c6:	jsr -222(a6)
	WaitTOF();
    86ca:	move.l 1e8cc <GfxBase>,d0
    86d0:	movea.l d0,a6
    86d2:	jsr -270(a6)
	WaitTOF();
    86d6:	move.l 1e8cc <GfxBase>,d0
    86dc:	movea.l d0,a6
    86de:	jsr -270(a6)

	Permit();
    86e2:	move.l 1e8c0 <SysBase>,d0
    86e8:	movea.l d0,a6
    86ea:	jsr -138(a6)
}
    86ee:	nop
    86f0:	movea.l (sp)+,a6
    86f2:	addq.l #4,sp
    86f4:	rts

000086f6 <interruptHandler>:
    0xFFFF,  /* WAIT opcode with vertical=255 (max) */
    0xFFFE   /* horizontal=254 → impossible combination → halt */
};

void interruptHandler() {
	FrameCounter++;	
    86f6:	move.w 1e8be <FrameCounter>,d0
    86fc:	addq.w #1,d0
    86fe:	move.w d0,1e8be <FrameCounter>
	__asm  volatile ("move.l #0,%d0");
    8704:	moveq #0,d0
	
}
    8706:	nop
    8708:	rts

0000870a <main>:

struct Interrupt *vbInt;

int main(int argc, char *argv[]) {
    870a:	       lea -176(sp),sp
    870e:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    8712:	       clr.l 184(sp)
    8716:	   ,-- bra.s 871c <main+0x12>
    8718:	,--|-> addq.l #1,184(sp)
    871c:	|  '-> cmpi.l #999,184(sp)
    8724:	'----- ble.s 8718 <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    8726:	       movea.w #4,a0
    872a:	       move.l (a0),d0
    872c:	       move.l d0,1e8c0 <SysBase>
	custom = (struct Custom*)0xdff000;	
    8732:	       move.l #14675968,1e8c4 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    873c:	       move.l #107264,180(sp)
    8744:	       clr.l 176(sp)
    8748:	       move.l 1e8c0 <SysBase>,d0
    874e:	       movea.l d0,a6
    8750:	       movea.l 180(sp),a1
    8754:	       move.l 176(sp),d0
    8758:	       jsr -552(a6)
    875c:	       move.l d0,172(sp)
    8760:	       move.l 172(sp),d0
    8764:	       move.l d0,1e8cc <GfxBase>
	if (!GfxBase)
    876a:	       move.l 1e8cc <GfxBase>,d0
    8770:	   ,-- bne.s 8786 <main+0x7c>
		Exit(0);
    8772:	   |   clr.l 168(sp)
    8776:	   |   move.l 1e8c8 <DOSBase>,d0
    877c:	   |   movea.l d0,a6
    877e:	   |   move.l 168(sp),d1
    8782:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    8786:	   '-> move.l #107281,164(sp)
    878e:	       clr.l 160(sp)
    8792:	       move.l 1e8c0 <SysBase>,d0
    8798:	       movea.l d0,a6
    879a:	       movea.l 164(sp),a1
    879e:	       move.l 160(sp),d0
    87a2:	       jsr -552(a6)
    87a6:	       move.l d0,156(sp)
    87aa:	       move.l 156(sp),d0
    87ae:	       move.l d0,1e8c8 <DOSBase>
	if (!DOSBase)
    87b4:	       move.l 1e8c8 <DOSBase>,d0
    87ba:	   ,-- bne.s 87d0 <main+0xc6>
		Exit(0);
    87bc:	   |   clr.l 152(sp)
    87c0:	   |   move.l 1e8c8 <DOSBase>,d0
    87c6:	   |   movea.l d0,a6
    87c8:	   |   move.l 152(sp),d1
    87cc:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    87d0:	   '-> move.l #107293,148(sp)
    87d8:	       clr.l 144(sp)
    87dc:	       move.l 1e8c0 <SysBase>,d0
    87e2:	       movea.l d0,a6
    87e4:	       movea.l 148(sp),a1
    87e8:	       move.l 144(sp),d0
    87ec:	       jsr -552(a6)
    87f0:	       move.l d0,140(sp)
    87f4:	       move.l 140(sp),d0
    87f8:	       move.l d0,1e8d0 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    87fe:	       move.l 1e8d0 <MathIeeeSingBasBase>,d0
    8804:	   ,-- bne.s 881a <main+0x110>
		Exit(0);	
    8806:	   |   clr.l 136(sp)
    880a:	   |   move.l 1e8c8 <DOSBase>,d0
    8810:	   |   movea.l d0,a6
    8812:	   |   move.l 136(sp),d1
    8816:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    881a:	   '-> move.l #107317,132(sp)
    8822:	       clr.l 128(sp)
    8826:	       move.l 1e8c0 <SysBase>,d0
    882c:	       movea.l d0,a6
    882e:	       movea.l 132(sp),a1
    8832:	       move.l 128(sp),d0
    8836:	       jsr -552(a6)
    883a:	       move.l d0,124(sp)
    883e:	       move.l 124(sp),d0
    8842:	       move.l d0,1e8d4 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    8848:	       move.l 1e8d4 <MathIeeeSingTransBase>,d0
    884e:	   ,-- bne.s 8864 <main+0x15a>
		Exit(0);
    8850:	   |   clr.l 120(sp)
    8854:	   |   move.l 1e8c8 <DOSBase>,d0
    885a:	   |   movea.l d0,a6
    885c:	   |   move.l 120(sp),d1
    8860:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    8864:	   '-> move.l #107343,116(sp)
    886c:	       clr.l 112(sp)
    8870:	       move.l 1e8c0 <SysBase>,d0
    8876:	       movea.l d0,a6
    8878:	       movea.l 116(sp),a1
    887c:	       move.l 112(sp),d0
    8880:	       jsr -552(a6)
    8884:	       move.l d0,108(sp)
    8888:	       move.l 108(sp),d0
    888c:	       move.l d0,1e8dc <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    8892:	       move.l 1e8dc <MathIeeeDoubTransBase>,d0
    8898:	   ,-- bne.s 88ae <main+0x1a4>
		Exit(0);
    889a:	   |   clr.l 104(sp)
    889e:	   |   move.l 1e8c8 <DOSBase>,d0
    88a4:	   |   movea.l d0,a6
    88a6:	   |   move.l 104(sp),d1
    88aa:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    88ae:	   '-> move.l #107369,100(sp)
    88b6:	       clr.l 96(sp)
    88ba:	       move.l 1e8c0 <SysBase>,d0
    88c0:	       movea.l d0,a6
    88c2:	       movea.l 100(sp),a1
    88c6:	       move.l 96(sp),d0
    88ca:	       jsr -552(a6)
    88ce:	       move.l d0,92(sp)
    88d2:	       move.l 92(sp),d0
    88d6:	       move.l d0,1e8d8 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    88dc:	       move.l 1e8d8 <MathIeeeDoubBasBase>,d0
    88e2:	   ,-- bne.s 88f8 <main+0x1ee>
		Exit(0);		
    88e4:	   |   clr.l 88(sp)
    88e8:	   |   move.l 1e8c8 <DOSBase>,d0
    88ee:	   |   movea.l d0,a6
    88f0:	   |   move.l 88(sp),d1
    88f4:	   |   jsr -144(a6)

	KPrintF(" debugger from Amiga Test 035!\n");
    88f8:	   '-> pea 1a381 <PutChar+0x1361>
    88fe:	       jsr 1857e <KPrintF>
    8904:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    8906:	       move.l 1e8c8 <DOSBase>,d0
    890c:	       movea.l d0,a6
    890e:	       jsr -60(a6)
    8912:	       move.l d0,84(sp)
    8916:	       move.l 84(sp),d0
    891a:	       move.l d0,80(sp)
    891e:	       move.l #107425,76(sp)
    8926:	       moveq #25,d0
    8928:	       move.l d0,72(sp)
    892c:	       move.l 1e8c8 <DOSBase>,d0
    8932:	       movea.l d0,a6
    8934:	       move.l 80(sp),d1
    8938:	       move.l 76(sp),d2
    893c:	       move.l 72(sp),d3
    8940:	       jsr -48(a6)
    8944:	       move.l d0,68(sp)
	Delay(50);
    8948:	       moveq #50,d1
    894a:	       move.l d1,64(sp)
    894e:	       move.l 1e8c8 <DOSBase>,d0
    8954:	       movea.l d0,a6
    8956:	       move.l 64(sp),d1
    895a:	       jsr -198(a6)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/


	KPrintF("Taking System\n");
    895e:	       pea 1a3ba <PutChar+0x139a>
    8964:	       jsr 1857e <KPrintF>
    896a:	       addq.l #4,sp
	TakeSystem();
    896c:	       jsr 850a <TakeSystem>
	KPrintF("System Taken\n");
    8972:	       pea 1a3c9 <PutChar+0x13a9>
    8978:	       jsr 1857e <KPrintF>
    897e:	       addq.l #4,sp

	WaitVbl();
    8980:	       jsr 184b2 <WaitVbl>

	USHORT* copper1 = (USHORT*)AllocMem(1024, MEMF_CHIP);
    8986:	       move.l #1024,60(sp)
    898e:	       moveq #2,d0
    8990:	       move.l d0,56(sp)
    8994:	       move.l 1e8c0 <SysBase>,d0
    899a:	       movea.l d0,a6
    899c:	       move.l 60(sp),d0
    89a0:	       move.l 56(sp),d1
    89a4:	       jsr -198(a6)
    89a8:	       move.l d0,52(sp)
    89ac:	       move.l 52(sp),d0
    89b0:	       move.l d0,48(sp)
	USHORT* copPtr = copper1;	
    89b4:	       move.l 48(sp),44(sp)

	*copPtr++ = 0xffdf;
    89ba:	       move.l 44(sp),d0
    89be:	       move.l d0,d1
    89c0:	       addq.l #2,d1
    89c2:	       move.l d1,44(sp)
    89c6:	       movea.l d0,a0
    89c8:	       move.w #-33,(a0)
	*copPtr++ = 0xfffe;
    89cc:	       move.l 44(sp),d0
    89d0:	       move.l d0,d1
    89d2:	       addq.l #2,d1
    89d4:	       move.l d1,44(sp)
    89d8:	       movea.l d0,a0
    89da:	       move.w #-2,(a0)
	*copPtr++ = 0x2d01,
    89de:	       move.l 44(sp),d0
    89e2:	       move.l d0,d1
    89e4:	       addq.l #2,d1
    89e6:	       move.l d1,44(sp)
    89ea:	       movea.l d0,a0
    89ec:	       move.w #11521,(a0)
	*copPtr++ = 0xff00; 
    89f0:	       move.l 44(sp),d0
    89f4:	       move.l d0,d1
    89f6:	       addq.l #2,d1
    89f8:	       move.l d1,44(sp)
    89fc:	       movea.l d0,a0
    89fe:	       move.w #-256,(a0)
	*copPtr++ = 0x9c; 
    8a02:	       move.l 44(sp),d0
    8a06:	       move.l d0,d1
    8a08:	       addq.l #2,d1
    8a0a:	       move.l d1,44(sp)
    8a0e:	       movea.l d0,a0
    8a10:	       move.w #156,(a0)
	*copPtr++ = 0x8010; 
    8a14:	       move.l 44(sp),d0
    8a18:	       move.l d0,d1
    8a1a:	       addq.l #2,d1
    8a1c:	       move.l d1,44(sp)
    8a20:	       movea.l d0,a0
    8a22:	       move.w #-32752,(a0)
	*copPtr++ = 0xffff;
    8a26:	       move.l 44(sp),d0
    8a2a:	       move.l d0,d1
    8a2c:	       addq.l #2,d1
    8a2e:	       move.l d1,44(sp)
    8a32:	       movea.l d0,a0
    8a34:	       move.w #-1,(a0)
	*copPtr++ = 0xfffe; // end copper list
    8a38:	       move.l 44(sp),d0
    8a3c:	       move.l d0,d1
    8a3e:	       addq.l #2,d1
    8a40:	       move.l d1,44(sp)
    8a44:	       movea.l d0,a0
    8a46:	       move.w #-2,(a0)

	custom->cop1lc = (ULONG)copper1;
    8a4a:	       movea.l 1e8c4 <custom>,a0
    8a50:	       move.l 48(sp),d0
    8a54:	       move.l d0,128(a0)

	custom->dmacon = 0x87ff;	
    8a58:	       movea.l 1e8c4 <custom>,a0
    8a5e:	       move.w #-30721,150(a0)

    ULONG counter = 0;
    8a64:	       clr.l 12(sp)
    ULONG endcount;
                                                       /* Allocate memory for  */
    if (vbInt = AllocMem(sizeof(struct Interrupt),     /* interrupt node. */
    8a68:	       moveq #22,d0
    8a6a:	       move.l d0,40(sp)
    8a6e:	       move.l #65537,36(sp)
    8a76:	       move.l 1e8c0 <SysBase>,d0
    8a7c:	       movea.l d0,a6
    8a7e:	       move.l 40(sp),d0
    8a82:	       move.l 36(sp),d1
    8a86:	       jsr -198(a6)
    8a8a:	       move.l d0,32(sp)
    8a8e:	       move.l 32(sp),d0
    8a92:	       move.l d0,1e8f2 <vbInt>
    8a98:	       move.l 1e8f2 <vbInt>,d0
    8a9e:	   ,-- beq.s 8aea <main+0x3e0>
                         MEMF_PUBLIC|MEMF_CLEAR))
    {
        vbInt->is_Node.ln_Type = NT_INTERRUPT;         /* Initialize the node. */
    8aa0:	   |   movea.l 1e8f2 <vbInt>,a0
    8aa6:	   |   move.b #2,8(a0)
        vbInt->is_Node.ln_Pri = -60;
    8aac:	   |   movea.l 1e8f2 <vbInt>,a0
    8ab2:	   |   move.b #-60,9(a0)
        vbInt->is_Node.ln_Name = "VertB-Asludge";
    8ab8:	   |   movea.l 1e8f2 <vbInt>,a0
    8abe:	   |   move.l #107479,10(a0)
        vbInt->is_Data = (APTR)&counter;
    8ac6:	   |   movea.l 1e8f2 <vbInt>,a0
    8acc:	   |   moveq #67,d1
    8ace:	   |   not.b d1
    8ad0:	   |   add.l sp,d1
    8ad2:	   |   addi.l #-176,d1
    8ad8:	   |   move.l d1,14(a0)
        vbInt->is_Code = interruptHandler;
    8adc:	   |   movea.l 1e8f2 <vbInt>,a0
    8ae2:	   |   move.l #34550,18(a0)
	}
	
	AddIntServer( INTB_COPER, vbInt);
    8aea:	   '-> moveq #4,d0
    8aec:	       move.l d0,28(sp)
    8af0:	       move.l 1e8f2 <vbInt>,24(sp)
    8af8:	       move.l 1e8c0 <SysBase>,d0
    8afe:	       movea.l d0,a6
    8b00:	       move.l 28(sp),d0
    8b04:	       movea.l 24(sp),a1
    8b08:	       jsr -168(a6)


	KPrintF("Starting main_sludge\n");
    8b0c:	       pea 1a3e5 <PutChar+0x13c5>
    8b12:	       jsr 1857e <KPrintF>
    8b18:	       addq.l #4,sp
	
	main_sludge(argc, argv);	
    8b1a:	       move.l 196(sp),-(sp)
    8b1e:	       move.l 196(sp),-(sp)
    8b22:	       jsr 4f78 <main_sludge>
    8b28:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    8b2a:	       jsr 860c <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    8b30:	       move.l 1e8c8 <DOSBase>,20(sp)
    8b38:	       move.l 1e8c0 <SysBase>,d0
    8b3e:	       movea.l d0,a6
    8b40:	       movea.l 20(sp),a1
    8b44:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    8b48:	       move.l 1e8cc <GfxBase>,16(sp)
    8b50:	       move.l 1e8c0 <SysBase>,d0
    8b56:	       movea.l d0,a6
    8b58:	       movea.l 16(sp),a1
    8b5c:	       jsr -414(a6)
    8b60:	       moveq #0,d0
}
    8b62:	       movem.l (sp)+,d2-d3/a6
    8b66:	       lea 176(sp),sp
    8b6a:	       rts

00008b6c <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    8b6c:	    lea -16(sp),sp
    8b70:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    8b72:	    moveq #8,d0
    8b74:	    move.l d0,16(sp)
    8b78:	    clr.l 12(sp)
    8b7c:	    move.l 1e8c0 <SysBase>,d0
    8b82:	    movea.l d0,a6
    8b84:	    move.l 16(sp),d0
    8b88:	    move.l 12(sp),d1
    8b8c:	    jsr -684(a6)
    8b90:	    move.l d0,8(sp)
    8b94:	    move.l 8(sp),d0
    8b98:	    move.l d0,4(sp)
	if (!newStat) {
    8b9c:	,-- bne.s 8bcc <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    8b9e:	|   movea.l 1e232 <nowStatus>,a0
    8ba4:	|   move.l (a0),d0
    8ba6:	|   movea.l 4(sp),a0
    8baa:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    8bae:	|   pea 19dbf <PutChar+0xd9f>
    8bb4:	|   jsr b8 <copyString>
    8bba:	|   addq.l #4,sp
    8bbc:	|   movea.l 4(sp),a0
    8bc0:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    8bc2:	|   movea.l 1e232 <nowStatus>,a0
    8bc8:	|   move.l 4(sp),(a0)
	}
}
    8bcc:	'-> nop
    8bce:	    movea.l (sp)+,a6
    8bd0:	    lea 16(sp),sp
    8bd4:	    rts

00008bd6 <clearStatusBar>:

void clearStatusBar () {
    8bd6:	       lea -16(sp),sp
    8bda:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    8bdc:	       movea.l 1e232 <nowStatus>,a0
    8be2:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8be6:	       movea.l 1e232 <nowStatus>,a0
    8bec:	       moveq #-1,d0
    8bee:	       move.l d0,6(a0)
	while (stat) {
    8bf2:	   ,-- bra.s 8c32 <clearStatusBar+0x5c>
		kill = stat;
    8bf4:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    8bfa:	|  |   movea.l 16(sp),a0
    8bfe:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    8c04:	|  |   movea.l 12(sp),a0
    8c08:	|  |   move.l (a0),8(sp)
    8c0c:	|  |   move.l 1e8c0 <SysBase>,d0
    8c12:	|  |   movea.l d0,a6
    8c14:	|  |   movea.l 8(sp),a1
    8c18:	|  |   jsr -690(a6)
		FreeVec(kill);
    8c1c:	|  |   move.l 12(sp),4(sp)
    8c22:	|  |   move.l 1e8c0 <SysBase>,d0
    8c28:	|  |   movea.l d0,a6
    8c2a:	|  |   movea.l 4(sp),a1
    8c2e:	|  |   jsr -690(a6)
	while (stat) {
    8c32:	|  '-> tst.l 16(sp)
    8c36:	'----- bne.s 8bf4 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    8c38:	       movea.l 1e232 <nowStatus>,a0
    8c3e:	       clr.l (a0)
}
    8c40:	       nop
    8c42:	       movea.l (sp)+,a6
    8c44:	       lea 16(sp),sp
    8c48:	       rts

00008c4a <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    8c4a:	clr.l 1e8f6 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    8c50:	move.w #-1,1e8fa <mainStatus+0x4>
	mainStatus.litStatus = -1;
    8c58:	moveq #-1,d0
    8c5a:	move.l d0,1e8fc <mainStatus+0x6>
	mainStatus.statusX = 10;
    8c60:	moveq #10,d0
    8c62:	move.l d0,1e900 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    8c68:	movea.l 1e80a <winHeight>,a0
    8c6e:	lea -15(a0),a0
    8c72:	move.l a0,d0
    8c74:	move.l d0,1e904 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    8c7a:	nop
    8c7c:	rts

00008c7e <killLastStatus>:

void killLastStatus () {
    8c7e:	    lea -12(sp),sp
    8c82:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    8c84:	    movea.l 1e232 <nowStatus>,a0
    8c8a:	    move.l (a0),d0
    8c8c:	,-- beq.s 8cd6 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    8c8e:	|   movea.l 1e232 <nowStatus>,a0
    8c94:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    8c98:	|   movea.l 1e232 <nowStatus>,a0
    8c9e:	|   movea.l 12(sp),a1
    8ca2:	|   move.l 4(a1),d0
    8ca6:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8ca8:	|   movea.l 12(sp),a0
    8cac:	|   move.l (a0),8(sp)
    8cb0:	|   move.l 1e8c0 <SysBase>,d0
    8cb6:	|   movea.l d0,a6
    8cb8:	|   movea.l 8(sp),a1
    8cbc:	|   jsr -690(a6)
		FreeVec(kill);
    8cc0:	|   move.l 12(sp),4(sp)
    8cc6:	|   move.l 1e8c0 <SysBase>,d0
    8ccc:	|   movea.l d0,a6
    8cce:	|   movea.l 4(sp),a1
    8cd2:	|   jsr -690(a6)
	}
}
    8cd6:	'-> nop
    8cd8:	    movea.l (sp)+,a6
    8cda:	    lea 12(sp),sp
    8cde:	    rts

00008ce0 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    8ce0:	movea.l 1e232 <nowStatus>,a0
    8ce6:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    8cec:	movea.l 1e232 <nowStatus>,a0
    8cf2:	move.l 8(sp),14(a0)
}
    8cf8:	nop
    8cfa:	rts

00008cfc <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    8cfc:	       lea -100(sp),sp
    8d00:	       move.l a6,-(sp)
    8d02:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    8d04:	       movea.l 1e232 <nowStatus>,a0
    8d0a:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    8d0e:	       movea.l 1e232 <nowStatus>,a0
    8d14:	       move.w 4(a0),d0
    8d18:	       move.w d0,d0
    8d1a:	       andi.l #65535,d0
    8d20:	       move.l 112(sp),-(sp)
    8d24:	       move.l d0,-(sp)
    8d26:	       jsr 8d0 <put2bytes>
    8d2c:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    8d2e:	       movea.l 1e232 <nowStatus>,a0
    8d34:	       move.l 6(a0),d0
    8d38:	       move.l d0,d0
    8d3a:	       movea.w d0,a0
    8d3c:	       move.l 112(sp),-(sp)
    8d40:	       move.l a0,-(sp)
    8d42:	       jsr a9c <putSigned>
    8d48:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    8d4a:	       movea.l 1e232 <nowStatus>,a0
    8d50:	       move.l 10(a0),d0
    8d54:	       move.l 112(sp),-(sp)
    8d58:	       move.l d0,-(sp)
    8d5a:	       jsr 8d0 <put2bytes>
    8d60:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    8d62:	       movea.l 1e232 <nowStatus>,a0
    8d68:	       move.l 14(a0),d0
    8d6c:	       move.l 112(sp),-(sp)
    8d70:	       move.l d0,-(sp)
    8d72:	       jsr 8d0 <put2bytes>
    8d78:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    8d7a:	       move.l 112(sp),100(sp)
    8d80:	       movea.l 1e232 <nowStatus>,a0
    8d86:	       move.l 18(a0),96(sp)
    8d8c:	       move.l 1e8c8 <DOSBase>,d0
    8d92:	       movea.l d0,a6
    8d94:	       move.l 100(sp),d1
    8d98:	       move.l 96(sp),d2
    8d9c:	       jsr -312(a6)
    8da0:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    8da4:	       move.l 112(sp),88(sp)
    8daa:	       movea.l 1e232 <nowStatus>,a0
    8db0:	       move.l 22(a0),84(sp)
    8db6:	       move.l 1e8c8 <DOSBase>,d0
    8dbc:	       movea.l d0,a6
    8dbe:	       move.l 88(sp),d1
    8dc2:	       move.l 84(sp),d2
    8dc6:	       jsr -312(a6)
    8dca:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    8dce:	       move.l 112(sp),76(sp)
    8dd4:	       movea.l 1e232 <nowStatus>,a0
    8dda:	       move.l 26(a0),72(sp)
    8de0:	       move.l 1e8c8 <DOSBase>,d0
    8de6:	       movea.l d0,a6
    8de8:	       move.l 76(sp),d1
    8dec:	       move.l 72(sp),d2
    8df0:	       jsr -312(a6)
    8df4:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8df8:	       move.l 112(sp),64(sp)
    8dfe:	       movea.l 1e232 <nowStatus>,a0
    8e04:	       move.l 30(a0),60(sp)
    8e0a:	       move.l 1e8c8 <DOSBase>,d0
    8e10:	       movea.l d0,a6
    8e12:	       move.l 64(sp),d1
    8e16:	       move.l 60(sp),d2
    8e1a:	       jsr -312(a6)
    8e1e:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    8e22:	       move.l 112(sp),52(sp)
    8e28:	       movea.l 1e232 <nowStatus>,a0
    8e2e:	       move.l 34(a0),48(sp)
    8e34:	       move.l 1e8c8 <DOSBase>,d0
    8e3a:	       movea.l d0,a6
    8e3c:	       move.l 52(sp),d1
    8e40:	       move.l 48(sp),d2
    8e44:	       jsr -312(a6)
    8e48:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    8e4c:	       move.l 112(sp),40(sp)
    8e52:	       movea.l 1e232 <nowStatus>,a0
    8e58:	       move.l 38(a0),36(sp)
    8e5e:	       move.l 1e8c8 <DOSBase>,d0
    8e64:	       movea.l d0,a6
    8e66:	       move.l 40(sp),d1
    8e6a:	       move.l 36(sp),d2
    8e6e:	       jsr -312(a6)
    8e72:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8e76:	   ,-- bra.s 8eba <saveStatusBars+0x1be>
		FPutC (fp,1);
    8e78:	,--|-> move.l 112(sp),16(sp)
    8e7e:	|  |   moveq #1,d0
    8e80:	|  |   move.l d0,12(sp)
    8e84:	|  |   move.l 1e8c8 <DOSBase>,d0
    8e8a:	|  |   movea.l d0,a6
    8e8c:	|  |   move.l 16(sp),d1
    8e90:	|  |   move.l 12(sp),d2
    8e94:	|  |   jsr -312(a6)
    8e98:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    8e9c:	|  |   movea.l 104(sp),a0
    8ea0:	|  |   move.l (a0),d0
    8ea2:	|  |   move.l 112(sp),-(sp)
    8ea6:	|  |   move.l d0,-(sp)
    8ea8:	|  |   jsr bd8 <writeString>
    8eae:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    8eb0:	|  |   movea.l 104(sp),a0
    8eb4:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8eba:	|  '-> tst.l 104(sp)
    8ebe:	'----- bne.s 8e78 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    8ec0:	       move.l 112(sp),28(sp)
    8ec6:	       clr.l 24(sp)
    8eca:	       move.l 1e8c8 <DOSBase>,d0
    8ed0:	       movea.l d0,a6
    8ed2:	       move.l 28(sp),d1
    8ed6:	       move.l 24(sp),d2
    8eda:	       jsr -312(a6)
    8ede:	       move.l d0,20(sp)
}
    8ee2:	       nop
    8ee4:	       move.l (sp)+,d2
    8ee6:	       movea.l (sp)+,a6
    8ee8:	       lea 100(sp),sp
    8eec:	       rts

00008eee <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    8eee:	movea.l 1e232 <nowStatus>,a0
    8ef4:	move.l 4(sp),6(a0)
}
    8efa:	nop
    8efc:	rts

00008efe <setStatusBar>:

void setStatusBar (char * txt) {
    8efe:	    subq.l #4,sp
    8f00:	    move.l a6,-(sp)
    8f02:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8f04:	    movea.l 1e232 <nowStatus>,a0
    8f0a:	    move.l (a0),d0
    8f0c:	,-- beq.s 8f40 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    8f0e:	|   movea.l 1e232 <nowStatus>,a0
    8f14:	|   movea.l (a0),a0
    8f16:	|   move.l (a0),8(sp)
    8f1a:	|   move.l 1e8c0 <SysBase>,d0
    8f20:	|   movea.l d0,a6
    8f22:	|   movea.l 8(sp),a1
    8f26:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    8f2a:	|   movea.l 1e232 <nowStatus>,a0
    8f30:	|   movea.l (a0),a2
    8f32:	|   move.l 16(sp),-(sp)
    8f36:	|   jsr b8 <copyString>
    8f3c:	|   addq.l #4,sp
    8f3e:	|   move.l d0,(a2)
	}
}
    8f40:	'-> nop
    8f42:	    movea.l (sp)+,a2
    8f44:	    movea.l (sp)+,a6
    8f46:	    addq.l #4,sp
    8f48:	    rts

00008f4a <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    8f4a:	       movea.l 1e232 <nowStatus>,a0
    8f50:	       move.l (a0),d0
    8f52:	,----- beq.s 8f60 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    8f54:	|      movea.l 1e232 <nowStatus>,a0
    8f5a:	|      movea.l (a0),a0
    8f5c:	|      move.l (a0),d0
    8f5e:	|  ,-- bra.s 8f66 <statusBarText+0x1c>
	} else {
		return "";
    8f60:	'--|-> move.l #105919,d0
	}
    8f66:	   '-> rts

00008f68 <addZBufferLayer>:

#define EMULATOR

struct zBufferData *zBuffer;

void addZBufferLayer (int x, int y, int width, int height, int yz) {
    8f68:	lea -32(sp),sp
    8f6c:	movem.l d2-d3/a6,-(sp)

	struct zBufferData *createthis = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8f70:	moveq #28,d0
    8f72:	move.l d0,40(sp)
    8f76:	clr.l 36(sp)
    8f7a:	move.l 1e8c0 <SysBase>,d0
    8f80:	movea.l d0,a6
    8f82:	move.l 40(sp),d0
    8f86:	move.l 36(sp),d1
    8f8a:	jsr -684(a6)
    8f8e:	move.l d0,32(sp)
    8f92:	move.l 32(sp),d0
    8f96:	move.l d0,28(sp)
	createthis->width = sceneWidth;
    8f9a:	move.l 1e95c <sceneWidth>,d0
    8fa0:	movea.l 28(sp),a0
    8fa4:	move.l d0,(a0)
	createthis->height = sceneHeight;
    8fa6:	move.l 1e960 <sceneHeight>,d0
    8fac:	movea.l 28(sp),a0
    8fb0:	move.l d0,4(a0)
	createthis->topx = 0;
    8fb4:	movea.l 28(sp),a0
    8fb8:	clr.l 8(a0)
	createthis->topy = 0;
    8fbc:	movea.l 28(sp),a0
    8fc0:	clr.l 12(a0)
	createthis->yz = yz;
    8fc4:	movea.l 28(sp),a0
    8fc8:	move.l 64(sp),16(a0)
	createthis->nextPanel = zBuffer;
    8fce:	move.l 1e920 <zBuffer>,d0
    8fd4:	movea.l 28(sp),a0
    8fd8:	move.l d0,24(a0)

	zBuffer = createthis;
    8fdc:	move.l 28(sp),1e920 <zBuffer>

	UWORD size = sceneWidth * sceneHeight / 8;	
    8fe4:	move.l 1e95c <sceneWidth>,d0
    8fea:	move.l 1e960 <sceneHeight>,d1
    8ff0:	move.l d1,-(sp)
    8ff2:	move.l d0,-(sp)
    8ff4:	jsr 18f0a <__mulsi3>
    8ffa:	addq.l #8,sp
    8ffc:	lsr.l #3,d0
    8ffe:	move.w d0,26(sp)
	createthis->bitplane = AllocVec( size, MEMF_CHIP);
    9002:	moveq #0,d0
    9004:	move.w 26(sp),d0
    9008:	move.l d0,22(sp)
    900c:	moveq #2,d0
    900e:	move.l d0,18(sp)
    9012:	move.l 1e8c0 <SysBase>,d0
    9018:	movea.l d0,a6
    901a:	move.l 22(sp),d0
    901e:	move.l 18(sp),d1
    9022:	jsr -684(a6)
    9026:	move.l d0,14(sp)
    902a:	move.l 14(sp),d0
    902e:	movea.l 28(sp),a0
    9032:	move.l d0,20(a0)
	CstCreateZBufferLayer (createthis->bitplane, x, y, width, height);
    9036:	move.l 60(sp),d0
    903a:	moveq #0,d3
    903c:	move.w d0,d3
    903e:	move.l 56(sp),d0
    9042:	moveq #0,d2
    9044:	move.w d0,d2
    9046:	move.l 52(sp),d0
    904a:	moveq #0,d1
    904c:	move.w d0,d1
    904e:	move.l 48(sp),d0
    9052:	move.w d0,d0
    9054:	andi.l #65535,d0
    905a:	movea.l 28(sp),a0
    905e:	movea.l 20(a0),a0
    9062:	move.l d3,-(sp)
    9064:	move.l d2,-(sp)
    9066:	move.l d1,-(sp)
    9068:	move.l d0,-(sp)
    906a:	move.l a0,-(sp)
    906c:	jsr 12e8 <CstCreateZBufferLayer>
    9072:	lea 20(sp),sp

}
    9076:	nop
    9078:	movem.l (sp)+,d2-d3/a6
    907c:	lea 32(sp),sp
    9080:	rts

00009082 <killZBuffer>:

void killZBuffer () {
    9082:	       lea -16(sp),sp
    9086:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    9088:	       move.l 1e920 <zBuffer>,16(sp)

	while(zbuffercursor) {
    9090:	   ,-- bra.s 90d2 <killZBuffer+0x50>
		struct zBufferData *deleteme = zbuffercursor;
    9092:	,--|-> move.l 16(sp),12(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    9098:	|  |   movea.l 16(sp),a0
    909c:	|  |   move.l 24(a0),16(sp)
		FreeVec(deleteme->bitplane);
    90a2:	|  |   movea.l 12(sp),a0
    90a6:	|  |   move.l 20(a0),8(sp)
    90ac:	|  |   move.l 1e8c0 <SysBase>,d0
    90b2:	|  |   movea.l d0,a6
    90b4:	|  |   movea.l 8(sp),a1
    90b8:	|  |   jsr -690(a6)
		FreeVec(deleteme);
    90bc:	|  |   move.l 12(sp),4(sp)
    90c2:	|  |   move.l 1e8c0 <SysBase>,d0
    90c8:	|  |   movea.l d0,a6
    90ca:	|  |   movea.l 4(sp),a1
    90ce:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    90d2:	|  '-> tst.l 16(sp)
    90d6:	'----- bne.s 9092 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    90d8:	       clr.l 1e920 <zBuffer>
}
    90de:	       nop
    90e0:	       movea.l (sp)+,a6
    90e2:	       lea 16(sp),sp
    90e6:	       rts

000090e8 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    90e8:	                lea -304(sp),sp
    90ec:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    90f0:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    90f4:	                jsr 9082 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    90fa:	                move.l 328(sp),d0
    90fe:	                move.l d0,-(sp)
    9100:	                jsr 7f72 <openFileFromNum>
    9106:	                addq.l #4,sp
    9108:	                tst.l d0
    910a:	            ,-- bne.s 9112 <setZBuffer+0x2a>
    910c:	            |   clr.w d0
    910e:	,-----------|-- bra.w 93d0 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    9112:	|           '-> move.l 1e8a6 <bigDataFile>,310(sp)
    911a:	|               move.l 1e8c8 <DOSBase>,d0
    9120:	|               movea.l d0,a6
    9122:	|               move.l 310(sp),d1
    9126:	|               jsr -306(a6)
    912a:	|               move.l d0,306(sp)
    912e:	|               move.l 306(sp),d0
    9132:	|               moveq #97,d1
    9134:	|               cmp.l d0,d1
    9136:	|        ,----- bne.s 91aa <setZBuffer+0xc2>
    9138:	|        |      move.l 1e8a6 <bigDataFile>,302(sp)
    9140:	|        |      move.l 1e8c8 <DOSBase>,d0
    9146:	|        |      movea.l d0,a6
    9148:	|        |      move.l 302(sp),d1
    914c:	|        |      jsr -306(a6)
    9150:	|        |      move.l d0,298(sp)
    9154:	|        |      move.l 298(sp),d0
    9158:	|        |      moveq #115,d1
    915a:	|        |      cmp.l d0,d1
    915c:	|        +----- bne.s 91aa <setZBuffer+0xc2>
    915e:	|        |      move.l 1e8a6 <bigDataFile>,294(sp)
    9166:	|        |      move.l 1e8c8 <DOSBase>,d0
    916c:	|        |      movea.l d0,a6
    916e:	|        |      move.l 294(sp),d1
    9172:	|        |      jsr -306(a6)
    9176:	|        |      move.l d0,290(sp)
    917a:	|        |      move.l 290(sp),d0
    917e:	|        |      moveq #122,d1
    9180:	|        |      cmp.l d0,d1
    9182:	|        +----- bne.s 91aa <setZBuffer+0xc2>
    9184:	|        |      move.l 1e8a6 <bigDataFile>,286(sp)
    918c:	|        |      move.l 1e8c8 <DOSBase>,d0
    9192:	|        |      movea.l d0,a6
    9194:	|        |      move.l 286(sp),d1
    9198:	|        |      jsr -306(a6)
    919c:	|        |      move.l d0,282(sp)
    91a0:	|        |      move.l 282(sp),d0
    91a4:	|        |      moveq #98,d1
    91a6:	|        |      cmp.l d0,d1
    91a8:	|        |  ,-- beq.s 91be <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    91aa:	|        '--|-> pea 1a422 <PutChar+0x1402>
    91b0:	|           |   jsr 1857e <KPrintF>
    91b6:	|           |   addq.l #4,sp
		 return FALSE;
    91b8:	|           |   clr.w d0
    91ba:	+-----------|-- bra.w 93d0 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    91be:	|           '-> move.l 1e8a6 <bigDataFile>,278(sp)
    91c6:	|               move.l 1e8c8 <DOSBase>,d0
    91cc:	|               movea.l d0,a6
    91ce:	|               move.l 278(sp),d1
    91d2:	|               jsr -306(a6)
    91d6:	|               move.l d0,274(sp)
    91da:	|               move.l 274(sp),d0
    91de:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    91e2:	|               moveq #28,d0
    91e4:	|               move.l d0,270(sp)
    91e8:	|               clr.l 266(sp)
    91ec:	|               move.l 1e8c0 <SysBase>,d0
    91f2:	|               movea.l d0,a6
    91f4:	|               move.l 270(sp),d0
    91f8:	|               move.l 266(sp),d1
    91fc:	|               jsr -684(a6)
    9200:	|               move.l d0,262(sp)
    9204:	|               move.l 262(sp),d0
    9208:	|               move.l d0,1e920 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    920e:	|               move.l 1e920 <zBuffer>,318(sp)

	while(numelements--)
    9216:	|     ,-------- bra.w 93b6 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    921a:	|  ,--|-------> move.l 1e8a6 <bigDataFile>,d0
    9220:	|  |  |         move.l d0,-(sp)
    9222:	|  |  |         jsr 6bc <get2bytes>
    9228:	|  |  |         addq.l #4,sp
    922a:	|  |  |         movea.l 318(sp),a0
    922e:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    9230:	|  |  |         move.l 1e8a6 <bigDataFile>,d0
    9236:	|  |  |         move.l d0,-(sp)
    9238:	|  |  |         jsr 6bc <get2bytes>
    923e:	|  |  |         addq.l #4,sp
    9240:	|  |  |         movea.l 318(sp),a0
    9244:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    9248:	|  |  |         move.l 1e8a6 <bigDataFile>,d0
    924e:	|  |  |         move.l d0,-(sp)
    9250:	|  |  |         jsr 6bc <get2bytes>
    9256:	|  |  |         addq.l #4,sp
    9258:	|  |  |         movea.l 318(sp),a0
    925c:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    9260:	|  |  |         move.l 1e8a6 <bigDataFile>,d0
    9266:	|  |  |         move.l d0,-(sp)
    9268:	|  |  |         jsr 6bc <get2bytes>
    926e:	|  |  |         addq.l #4,sp
    9270:	|  |  |         movea.l 318(sp),a0
    9274:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    9278:	|  |  |         move.l 1e8a6 <bigDataFile>,d0
    927e:	|  |  |         move.l d0,-(sp)
    9280:	|  |  |         jsr 6bc <get2bytes>
    9286:	|  |  |         addq.l #4,sp
    9288:	|  |  |         movea.l 318(sp),a0
    928c:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    9290:	|  |  |         movea.l 318(sp),a0
    9294:	|  |  |         move.l (a0),d0
    9296:	|  |  |         movea.l 318(sp),a0
    929a:	|  |  |         move.l 4(a0),d1
    929e:	|  |  |         move.l d1,-(sp)
    92a0:	|  |  |         move.l d0,-(sp)
    92a2:	|  |  |         jsr 18f0a <__mulsi3>
    92a8:	|  |  |         addq.l #8,sp
    92aa:	|  |  |         tst.l d0
    92ac:	|  |  |     ,-- bge.s 92b0 <setZBuffer+0x1c8>
    92ae:	|  |  |     |   addq.l #7,d0
    92b0:	|  |  |     '-> asr.l #3,d0
    92b2:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    92b6:	|  |  |         moveq #0,d0
    92b8:	|  |  |         move.w 260(sp),d0
    92bc:	|  |  |         move.l d0,256(sp)
    92c0:	|  |  |         moveq #2,d1
    92c2:	|  |  |         move.l d1,252(sp)
    92c6:	|  |  |         move.l 1e8c0 <SysBase>,d0
    92cc:	|  |  |         movea.l d0,a6
    92ce:	|  |  |         move.l 256(sp),d0
    92d2:	|  |  |         move.l 252(sp),d1
    92d6:	|  |  |         jsr -684(a6)
    92da:	|  |  |         move.l d0,248(sp)
    92de:	|  |  |         move.l 248(sp),d0
    92e2:	|  |  |         movea.l 318(sp),a0
    92e6:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    92ea:	|  |  |         move.l 1e8a6 <bigDataFile>,244(sp)
    92f2:	|  |  |         movea.l 318(sp),a0
    92f6:	|  |  |         move.l 20(a0),240(sp)
    92fc:	|  |  |         moveq #1,d0
    92fe:	|  |  |         move.l d0,236(sp)
    9302:	|  |  |         moveq #0,d0
    9304:	|  |  |         move.w 260(sp),d0
    9308:	|  |  |         move.l d0,232(sp)
    930c:	|  |  |         move.l 1e8c8 <DOSBase>,d0
    9312:	|  |  |         movea.l d0,a6
    9314:	|  |  |         move.l 244(sp),d1
    9318:	|  |  |         move.l 240(sp),d2
    931c:	|  |  |         move.l 236(sp),d3
    9320:	|  |  |         move.l 232(sp),d4
    9324:	|  |  |         jsr -324(a6)
    9328:	|  |  |         move.l d0,228(sp)
    932c:	|  |  |         move.l 228(sp),d0
    9330:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    9334:	|  |  |         tst.w 322(sp)
    9338:	|  |  |  ,----- beq.s 9374 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    933a:	|  |  |  |      moveq #28,d1
    933c:	|  |  |  |      move.l d1,222(sp)
    9340:	|  |  |  |      clr.l 218(sp)
    9344:	|  |  |  |      move.l 1e8c0 <SysBase>,d0
    934a:	|  |  |  |      movea.l d0,a6
    934c:	|  |  |  |      move.l 222(sp),d0
    9350:	|  |  |  |      move.l 218(sp),d1
    9354:	|  |  |  |      jsr -684(a6)
    9358:	|  |  |  |      move.l d0,214(sp)
    935c:	|  |  |  |      move.l 214(sp),d0
    9360:	|  |  |  |      movea.l 318(sp),a0
    9364:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    9368:	|  |  |  |      movea.l 318(sp),a0
    936c:	|  |  |  |      move.l 24(a0),318(sp)
    9372:	|  |  |  |  ,-- bra.s 937c <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    9374:	|  |  |  '--|-> movea.l 318(sp),a0
    9378:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    937c:	|  |  |     '-> movea.l 318(sp),a0
    9380:	|  |  |         move.l 4(a0),d0
    9384:	|  |  |         move.l d0,d0
    9386:	|  |  |         movea.w d0,a1
    9388:	|  |  |         movea.l 318(sp),a0
    938c:	|  |  |         move.l (a0),d0
    938e:	|  |  |         move.l d0,d0
    9390:	|  |  |         movea.w d0,a0
    9392:	|  |  |         movea.l 318(sp),a2
    9396:	|  |  |         move.l 20(a2),d0
    939a:	|  |  |         clr.l -(sp)
    939c:	|  |  |         pea 1 <_start+0x1>
    93a0:	|  |  |         move.l a1,-(sp)
    93a2:	|  |  |         move.l a0,-(sp)
    93a4:	|  |  |         pea 1a436 <PutChar+0x1416>
    93aa:	|  |  |         move.l d0,-(sp)
    93ac:	|  |  |         jsr 18666 <debug_register_bitmap>
    93b2:	|  |  |         lea 24(sp),sp
	while(numelements--)
    93b6:	|  |  '-------> move.w 322(sp),d0
    93ba:	|  |            move.w d0,d1
    93bc:	|  |            subq.w #1,d1
    93be:	|  |            move.w d1,322(sp)
    93c2:	|  |            tst.w d0
    93c4:	|  '----------- bne.w 921a <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    93c8:	|               jsr 7e6a <finishAccess>
	
	return TRUE;
    93ce:	|               moveq #1,d0
}
    93d0:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    93d4:	                lea 304(sp),sp
    93d8:	                rts

000093da <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    93da:	          lea -32(sp),sp
    93de:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    93e0:	          move.l 40(sp),d0
    93e4:	          addq.l #8,d0
    93e6:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    93ea:	          clr.l 32(sp)
    93ee:	   ,----- bra.s 9434 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    93f0:	,--|----> movea.l 24(sp),a0
    93f4:	|  |      movea.l 8(a0),a0
    93f8:	|  |      move.l 32(sp),d1
    93fc:	|  |      move.l d1,d0
    93fe:	|  |      lsl.l #3,d0
    9400:	|  |      sub.l d1,d0
    9402:	|  |      add.l d0,d0
    9404:	|  |      add.l d0,d0
    9406:	|  |      adda.l d0,a0
    9408:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    940c:	|  |      movea.l 8(sp),a0
    9410:	|  |      move.l 24(a0),d0
    9414:	|  |  ,-- beq.s 9430 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    9416:	|  |  |   movea.l 8(sp),a0
    941a:	|  |  |   move.l 24(a0),4(sp)
    9420:	|  |  |   move.l 1e8c0 <SysBase>,d0
    9426:	|  |  |   movea.l d0,a6
    9428:	|  |  |   movea.l 4(sp),a1
    942c:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    9430:	|  |  '-> addq.l #1,32(sp)
    9434:	|  '----> movea.l 24(sp),a0
    9438:	|         move.l (a0),d0
    943a:	|         cmp.l 32(sp),d0
    943e:	'-------- bgt.s 93f0 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    9440:	          movea.l 24(sp),a0
    9444:	          move.l 8(a0),20(sp)
    944a:	          move.l 1e8c0 <SysBase>,d0
    9450:	          movea.l d0,a6
    9452:	          movea.l 20(sp),a1
    9456:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    945a:	          move.l 1e9d8 <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    9462:	      ,-- bra.s 946e <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    9464:	   ,--|-> movea.l 28(sp),a0
    9468:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    946e:	   |  '-> movea.l 28(sp),a0
    9472:	   |      movea.l 22(a0),a0
    9476:	   |      move.l (a0),d1
    9478:	   |      movea.l 40(sp),a0
    947c:	   |      move.l (a0),d0
    947e:	   |      cmp.l d1,d0
    9480:	   |  ,-- beq.s 9488 <forgetSpriteBank+0xae>
    9482:	   |  |   tst.l 28(sp)
    9486:	   '--|-- bne.s 9464 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    9488:	      '-> tst.l 28(sp)
    948c:	   ,----- beq.s 94b6 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    948e:	   |      movea.l 40(sp),a0
    9492:	   |      move.l 22(a0),d0
    9496:	   |      movea.l 28(sp),a0
    949a:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    949e:	   |      move.l 40(sp),12(sp)
    94a4:	   |      move.l 1e8c0 <SysBase>,d0
    94aa:	   |      movea.l d0,a6
    94ac:	   |      movea.l 12(sp),a1
    94b0:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    94b4:	   |  ,-- bra.s 94dc <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    94b6:	   '--|-> movea.l 1e9d8 <allLoadedBanks>,a0
    94bc:	      |   move.l 22(a0),d0
    94c0:	      |   move.l d0,1e9d8 <allLoadedBanks>
		FreeVec( forgetme);
    94c6:	      |   move.l 40(sp),16(sp)
    94cc:	      |   move.l 1e8c0 <SysBase>,d0
    94d2:	      |   movea.l d0,a6
    94d4:	      |   movea.l 16(sp),a1
    94d8:	      |   jsr -690(a6)
}
    94dc:	      '-> nop
    94de:	          movea.l (sp)+,a6
    94e0:	          lea 32(sp),sp
    94e4:	          rts

000094e6 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    94e6:	                      lea -84(sp),sp
    94ea:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    94ee:	                      pea 1a442 <PutChar+0x1422>
    94f4:	                      jsr 1857e <KPrintF>
    94fa:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    94fc:	                      clr.l 94(sp)
    9500:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    9504:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    9508:	                      move.l 108(sp),-(sp)
    950c:	                      jsr 7f72 <openFileFromNum>
    9512:	                      addq.l #4,sp
    9514:	                      tst.l d0
    9516:	                  ,-- bne.s 952c <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    9518:	                  |   pea 1a45c <PutChar+0x143c>
    951e:	                  |   jsr 1857e <KPrintF>
    9524:	                  |   addq.l #4,sp
		return FALSE;
    9526:	                  |   clr.w d0
    9528:	,-----------------|-- bra.w 9920 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    952c:	|                 '-> move.l 1e8a6 <bigDataFile>,d0
    9532:	|                     move.l d0,-(sp)
    9534:	|                     jsr 6bc <get2bytes>
    953a:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    953c:	|                     move.l 1e8a6 <bigDataFile>,82(sp)
    9544:	|                     move.l 1e8c8 <DOSBase>,d0
    954a:	|                     movea.l d0,a6
    954c:	|                     move.l 82(sp),d1
    9550:	|                     jsr -306(a6)
    9554:	|                     move.l d0,78(sp)
    9558:	|                     move.l 78(sp),d0
    955c:	|                     movea.l 112(sp),a0
    9560:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    9564:	|                     move.l 1e8a6 <bigDataFile>,d0
    956a:	|                     move.l d0,-(sp)
    956c:	|                     jsr 6bc <get2bytes>
    9572:	|                     addq.l #4,sp
    9574:	|                     move.l d0,74(sp)

	if (total <= 0) {
    9578:	|                 ,-- bgt.s 958e <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    957a:	|                 |   pea 1a48a <PutChar+0x146a>
    9580:	|                 |   jsr 1857e <KPrintF>
    9586:	|                 |   addq.l #4,sp
		return FALSE;
    9588:	|                 |   clr.w d0
    958a:	+-----------------|-- bra.w 9920 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    958e:	|                 '-> movea.l 112(sp),a0
    9592:	|                     move.l 4(a0),d0
    9596:	|                     moveq #3,d1
    9598:	|                     cmp.l d0,d1
    959a:	|                 ,-- bne.s 95a8 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    959c:	|                 |   movea.l 112(sp),a0
    95a0:	|                 |   move.w #1,12(a0)
    95a6:	|              ,--|-- bra.s 95ca <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    95a8:	|              |  '-> movea.l 112(sp),a0
    95ac:	|              |      move.l 4(a0),d0
    95b0:	|              |      moveq #3,d1
    95b2:	|              |      cmp.l d0,d1
    95b4:	|              +----- bge.s 95ca <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    95b6:	|              |      pea 1a4ca <PutChar+0x14aa>
    95bc:	|              |      jsr 1857e <KPrintF>
    95c2:	|              |      addq.l #4,sp
		return FALSE;
    95c4:	|              |      clr.w d0
    95c6:	+--------------|----- bra.w 9920 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    95ca:	|              '----> movea.l 112(sp),a0
    95ce:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    95d2:	|                     move.l 74(sp),d1
    95d6:	|                     move.l d1,d0
    95d8:	|                     lsl.l #3,d0
    95da:	|                     sub.l d1,d0
    95dc:	|                     add.l d0,d0
    95de:	|                     add.l d0,d0
    95e0:	|                     move.l d0,70(sp)
    95e4:	|                     clr.l 66(sp)
    95e8:	|                     move.l 1e8c0 <SysBase>,d0
    95ee:	|                     movea.l d0,a6
    95f0:	|                     move.l 70(sp),d0
    95f4:	|                     move.l 66(sp),d1
    95f8:	|                     jsr -684(a6)
    95fc:	|                     move.l d0,62(sp)
    9600:	|                     move.l 62(sp),d0
    9604:	|                     movea.l 112(sp),a0
    9608:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    960c:	|                     movea.l 112(sp),a0
    9610:	|                     move.l 8(a0),d0
    9614:	|                 ,-- bne.s 961c <loadSpriteBank+0x136>
    9616:	|                 |   clr.w d0
    9618:	+-----------------|-- bra.w 9920 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    961c:	|                 '-> moveq #1,d0
    961e:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    9622:	|                     clr.l 100(sp)
    9626:	|     ,-------------- bra.w 98fe <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    962a:	|  ,--|-------------> move.l 1e8a6 <bigDataFile>,d0
    9630:	|  |  |               move.l d0,-(sp)
    9632:	|  |  |               jsr 6bc <get2bytes>
    9638:	|  |  |               addq.l #4,sp
    963a:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    963e:	|  |  |               movea.l 112(sp),a0
    9642:	|  |  |               movea.l 8(a0),a0
    9646:	|  |  |               move.l 100(sp),d1
    964a:	|  |  |               move.l d1,d0
    964c:	|  |  |               lsl.l #3,d0
    964e:	|  |  |               sub.l d1,d0
    9650:	|  |  |               add.l d0,d0
    9652:	|  |  |               add.l d0,d0
    9654:	|  |  |               adda.l d0,a0
    9656:	|  |  |               moveq #0,d0
    9658:	|  |  |               move.w 60(sp),d0
    965c:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    965e:	|  |  |               movea.l 1e8a6 <bigDataFile>,a1
    9664:	|  |  |               movea.l 112(sp),a0
    9668:	|  |  |               movea.l 8(a0),a0
    966c:	|  |  |               move.l 100(sp),d1
    9670:	|  |  |               move.l d1,d0
    9672:	|  |  |               lsl.l #3,d0
    9674:	|  |  |               sub.l d1,d0
    9676:	|  |  |               add.l d0,d0
    9678:	|  |  |               add.l d0,d0
    967a:	|  |  |               lea (0,a0,d0.l),a2
    967e:	|  |  |               move.l a1,-(sp)
    9680:	|  |  |               jsr 6bc <get2bytes>
    9686:	|  |  |               addq.l #4,sp
    9688:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    968c:	|  |  |               movea.l 1e8a6 <bigDataFile>,a1
    9692:	|  |  |               movea.l 112(sp),a0
    9696:	|  |  |               movea.l 8(a0),a0
    969a:	|  |  |               move.l 100(sp),d1
    969e:	|  |  |               move.l d1,d0
    96a0:	|  |  |               lsl.l #3,d0
    96a2:	|  |  |               sub.l d1,d0
    96a4:	|  |  |               add.l d0,d0
    96a6:	|  |  |               add.l d0,d0
    96a8:	|  |  |               lea (0,a0,d0.l),a2
    96ac:	|  |  |               move.l a1,-(sp)
    96ae:	|  |  |               jsr 6bc <get2bytes>
    96b4:	|  |  |               addq.l #4,sp
    96b6:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    96ba:	|  |  |               movea.l 1e8a6 <bigDataFile>,a1
    96c0:	|  |  |               movea.l 112(sp),a0
    96c4:	|  |  |               movea.l 8(a0),a0
    96c8:	|  |  |               move.l 100(sp),d1
    96cc:	|  |  |               move.l d1,d0
    96ce:	|  |  |               lsl.l #3,d0
    96d0:	|  |  |               sub.l d1,d0
    96d2:	|  |  |               add.l d0,d0
    96d4:	|  |  |               add.l d0,d0
    96d6:	|  |  |               lea (0,a0,d0.l),a2
    96da:	|  |  |               move.l a1,-(sp)
    96dc:	|  |  |               jsr 6bc <get2bytes>
    96e2:	|  |  |               addq.l #4,sp
    96e4:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    96e8:	|  |  |               movea.l 112(sp),a0
    96ec:	|  |  |               move.l 4(a0),d0
    96f0:	|  |  |               moveq #3,d1
    96f2:	|  |  |               cmp.l d0,d1
    96f4:	|  |  |     ,-------- beq.w 9790 <loadSpriteBank+0x2aa>
    96f8:	|  |  |     |         moveq #3,d1
    96fa:	|  |  |     |         cmp.l d0,d1
    96fc:	|  |  |  ,--|-------- blt.w 9836 <loadSpriteBank+0x350>
    9700:	|  |  |  |  |         moveq #1,d1
    9702:	|  |  |  |  |         cmp.l d0,d1
    9704:	|  |  |  |  |     ,-- beq.s 9710 <loadSpriteBank+0x22a>
    9706:	|  |  |  |  |     |   moveq #2,d1
    9708:	|  |  |  |  |     |   cmp.l d0,d1
    970a:	|  |  |  |  |  ,--|-- beq.s 973c <loadSpriteBank+0x256>
    970c:	|  |  |  +--|--|--|-- bra.w 9836 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    9710:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    9714:	|  |  |  |  |  |      movea.l 8(a0),a0
    9718:	|  |  |  |  |  |      move.l 100(sp),d1
    971c:	|  |  |  |  |  |      move.l d1,d0
    971e:	|  |  |  |  |  |      lsl.l #3,d0
    9720:	|  |  |  |  |  |      sub.l d1,d0
    9722:	|  |  |  |  |  |      add.l d0,d0
    9724:	|  |  |  |  |  |      add.l d0,d0
    9726:	|  |  |  |  |  |      adda.l d0,a0
    9728:	|  |  |  |  |  |      move.l 4(a0),d0
    972c:	|  |  |  |  |  |      addq.l #2,d0
    972e:	|  |  |  |  |  |      move.l d0,d0
    9730:	|  |  |  |  |  |      add.w d0,d0
    9732:	|  |  |  |  |  |      add.w d0,d0
    9734:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    9738:	|  |  |  +--|--|----- bra.w 9836 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    973c:	|  |  |  |  |  '----> movea.l 112(sp),a0
    9740:	|  |  |  |  |         movea.l 8(a0),a0
    9744:	|  |  |  |  |         move.l 100(sp),d1
    9748:	|  |  |  |  |         move.l d1,d0
    974a:	|  |  |  |  |         lsl.l #3,d0
    974c:	|  |  |  |  |         sub.l d1,d0
    974e:	|  |  |  |  |         add.l d0,d0
    9750:	|  |  |  |  |         add.l d0,d0
    9752:	|  |  |  |  |         adda.l d0,a0
    9754:	|  |  |  |  |         move.l (a0),d0
    9756:	|  |  |  |  |     ,-- bpl.s 975a <loadSpriteBank+0x274>
    9758:	|  |  |  |  |     |   addq.l #7,d0
    975a:	|  |  |  |  |     '-> asr.l #3,d0
    975c:	|  |  |  |  |         move.l d0,d2
    975e:	|  |  |  |  |         movea.l 112(sp),a0
    9762:	|  |  |  |  |         movea.l 8(a0),a0
    9766:	|  |  |  |  |         move.l 100(sp),d1
    976a:	|  |  |  |  |         move.l d1,d0
    976c:	|  |  |  |  |         lsl.l #3,d0
    976e:	|  |  |  |  |         sub.l d1,d0
    9770:	|  |  |  |  |         add.l d0,d0
    9772:	|  |  |  |  |         add.l d0,d0
    9774:	|  |  |  |  |         adda.l d0,a0
    9776:	|  |  |  |  |         move.l 4(a0),d0
    977a:	|  |  |  |  |         move.l d0,d0
    977c:	|  |  |  |  |         move.w d2,d1
    977e:	|  |  |  |  |         muls.w d0,d1
    9780:	|  |  |  |  |         move.w d1,d0
    9782:	|  |  |  |  |         add.w d0,d0
    9784:	|  |  |  |  |         add.w d1,d0
    9786:	|  |  |  |  |         add.w d0,d0
    9788:	|  |  |  |  |         move.w d0,98(sp)
				break;
    978c:	|  |  |  +--|-------- bra.w 9836 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    9790:	|  |  |  |  '-------> movea.l 112(sp),a0
    9794:	|  |  |  |            movea.l 8(a0),a0
    9798:	|  |  |  |            move.l 100(sp),d1
    979c:	|  |  |  |            move.l d1,d0
    979e:	|  |  |  |            lsl.l #3,d0
    97a0:	|  |  |  |            sub.l d1,d0
    97a2:	|  |  |  |            add.l d0,d0
    97a4:	|  |  |  |            add.l d0,d0
    97a6:	|  |  |  |            adda.l d0,a0
    97a8:	|  |  |  |            move.l (a0),d0
    97aa:	|  |  |  |            andi.l #-2147483633,d0
    97b0:	|  |  |  |        ,-- bpl.s 97ba <loadSpriteBank+0x2d4>
    97b2:	|  |  |  |        |   subq.l #1,d0
    97b4:	|  |  |  |        |   moveq #-16,d1
    97b6:	|  |  |  |        |   or.l d1,d0
    97b8:	|  |  |  |        |   addq.l #1,d0
    97ba:	|  |  |  |        '-> tst.l d0
    97bc:	|  |  |  |     ,----- ble.s 97c2 <loadSpriteBank+0x2dc>
    97be:	|  |  |  |     |      moveq #2,d0
    97c0:	|  |  |  |     |  ,-- bra.s 97c4 <loadSpriteBank+0x2de>
    97c2:	|  |  |  |     '--|-> clr.w d0
    97c4:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    97c8:	|  |  |  |            movea.l 112(sp),a0
    97cc:	|  |  |  |            movea.l 8(a0),a0
    97d0:	|  |  |  |            move.l 100(sp),d1
    97d4:	|  |  |  |            move.l d1,d0
    97d6:	|  |  |  |            lsl.l #3,d0
    97d8:	|  |  |  |            sub.l d1,d0
    97da:	|  |  |  |            add.l d0,d0
    97dc:	|  |  |  |            add.l d0,d0
    97de:	|  |  |  |            adda.l d0,a0
    97e0:	|  |  |  |            move.l (a0),d0
    97e2:	|  |  |  |            movea.l d0,a0
    97e4:	|  |  |  |            cmpa.w #0,a0
    97e8:	|  |  |  |        ,-- bge.s 97ee <loadSpriteBank+0x308>
    97ea:	|  |  |  |        |   lea 15(a0),a0
    97ee:	|  |  |  |        '-> move.l a0,d0
    97f0:	|  |  |  |            asr.l #4,d0
    97f2:	|  |  |  |            add.l d0,d0
    97f4:	|  |  |  |            move.l d0,d1
    97f6:	|  |  |  |            moveq #0,d0
    97f8:	|  |  |  |            move.w 58(sp),d0
    97fc:	|  |  |  |            add.l d1,d0
    97fe:	|  |  |  |            move.l d0,d2
    9800:	|  |  |  |            movea.l 112(sp),a0
    9804:	|  |  |  |            movea.l 8(a0),a0
    9808:	|  |  |  |            move.l 100(sp),d1
    980c:	|  |  |  |            move.l d1,d0
    980e:	|  |  |  |            lsl.l #3,d0
    9810:	|  |  |  |            sub.l d1,d0
    9812:	|  |  |  |            add.l d0,d0
    9814:	|  |  |  |            add.l d0,d0
    9816:	|  |  |  |            adda.l d0,a0
    9818:	|  |  |  |            move.l 4(a0),d0
    981c:	|  |  |  |            move.l d0,d0
    981e:	|  |  |  |            move.w d2,d1
    9820:	|  |  |  |            muls.w d0,d1
    9822:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    9826:	|  |  |  |            cmpi.w #100,98(sp)
    982c:	|  |  |  |        ,-- bls.s 9834 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    982e:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    9834:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    9836:	|  |  |  '----------> moveq #0,d0
    9838:	|  |  |               move.w 98(sp),d0
    983c:	|  |  |               add.l d0,d0
    983e:	|  |  |               move.l d0,52(sp)
    9842:	|  |  |               moveq #2,d0
    9844:	|  |  |               move.l d0,48(sp)
    9848:	|  |  |               move.l 1e8c0 <SysBase>,d0
    984e:	|  |  |               movea.l d0,a6
    9850:	|  |  |               move.l 52(sp),d0
    9854:	|  |  |               move.l 48(sp),d1
    9858:	|  |  |               jsr -684(a6)
    985c:	|  |  |               move.l d0,44(sp)
    9860:	|  |  |               movea.l 44(sp),a1
    9864:	|  |  |               movea.l 112(sp),a0
    9868:	|  |  |               movea.l 8(a0),a0
    986c:	|  |  |               move.l 100(sp),d1
    9870:	|  |  |               move.l d1,d0
    9872:	|  |  |               lsl.l #3,d0
    9874:	|  |  |               sub.l d1,d0
    9876:	|  |  |               add.l d0,d0
    9878:	|  |  |               add.l d0,d0
    987a:	|  |  |               adda.l d0,a0
    987c:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    9880:	|  |  |               move.l 1e8a6 <bigDataFile>,40(sp)
    9888:	|  |  |               movea.l 112(sp),a0
    988c:	|  |  |               movea.l 8(a0),a0
    9890:	|  |  |               move.l 100(sp),d1
    9894:	|  |  |               move.l d1,d0
    9896:	|  |  |               lsl.l #3,d0
    9898:	|  |  |               sub.l d1,d0
    989a:	|  |  |               add.l d0,d0
    989c:	|  |  |               add.l d0,d0
    989e:	|  |  |               adda.l d0,a0
    98a0:	|  |  |               move.l 24(a0),36(sp)
    98a6:	|  |  |               moveq #2,d1
    98a8:	|  |  |               move.l d1,32(sp)
    98ac:	|  |  |               move.w 98(sp),d0
    98b0:	|  |  |               lsr.w #1,d0
    98b2:	|  |  |               move.w d0,d0
    98b4:	|  |  |               andi.l #65535,d0
    98ba:	|  |  |               move.l d0,28(sp)
    98be:	|  |  |               move.l 1e8c8 <DOSBase>,d0
    98c4:	|  |  |               movea.l d0,a6
    98c6:	|  |  |               move.l 40(sp),d1
    98ca:	|  |  |               move.l 36(sp),d2
    98ce:	|  |  |               move.l 32(sp),d3
    98d2:	|  |  |               move.l 28(sp),d4
    98d6:	|  |  |               jsr -324(a6)
    98da:	|  |  |               move.l d0,24(sp)
    98de:	|  |  |               move.l 24(sp),d0
    98e2:	|  |  |               move.w d0,22(sp)
		if (!count) {
    98e6:	|  |  |           ,-- bne.s 98fa <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    98e8:	|  |  |           |   pea 1a4ff <PutChar+0x14df>
    98ee:	|  |  |           |   jsr 1857e <KPrintF>
    98f4:	|  |  |           |   addq.l #4,sp
			return FALSE;
    98f6:	|  |  |           |   clr.w d0
    98f8:	+--|--|-----------|-- bra.s 9920 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    98fa:	|  |  |           '-> addq.l #1,100(sp)
    98fe:	|  |  '-------------> move.l 100(sp),d0
    9902:	|  |                  cmp.l 74(sp),d0
    9906:	|  '----------------- blt.w 962a <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    990a:	|                     jsr 7e6a <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    9910:	|                     pea 1a532 <PutChar+0x1512>
    9916:	|                     jsr 1857e <KPrintF>
    991c:	|                     addq.l #4,sp
	return TRUE;
    991e:	|                     moveq #1,d0
}
    9920:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    9924:	                      lea 84(sp),sp
    9928:	                      rts

0000992a <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    992a:	                   lea -16(sp),sp
    992e:	                   move.l d2,-(sp)
    9930:	                   move.l 32(sp),d0
    9934:	                   move.w d0,d0
    9936:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    993a:	                   movea.l 28(sp),a0
    993e:	                   move.l (a0),d2
    9940:	                   movea.l 24(sp),a0
    9944:	                   move.l 8(a0),d0
    9948:	                   move.l d0,-(sp)
    994a:	                   jsr 189b0 <__floatsisf>
    9950:	                   addq.l #4,sp
    9952:	                   move.l d0,-(sp)
    9954:	                   move.l d2,-(sp)
    9956:	                   jsr 18ca4 <__subsf3>
    995c:	                   addq.l #8,sp
    995e:	                   move.l d0,-(sp)
    9960:	                   jsr 18948 <__fixsfsi>
    9966:	                   addq.l #4,sp
    9968:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    996c:	                   movea.l 28(sp),a0
    9970:	                   move.l 4(a0),d2
    9974:	                   movea.l 24(sp),a0
    9978:	                   move.l 12(a0),d0
    997c:	                   move.l d0,-(sp)
    997e:	                   jsr 189b0 <__floatsisf>
    9984:	                   addq.l #4,sp
    9986:	                   move.l d0,-(sp)
    9988:	                   move.l d2,-(sp)
    998a:	                   jsr 18ca4 <__subsf3>
    9990:	                   addq.l #8,sp
    9992:	                   move.l d0,-(sp)
    9994:	                   jsr 18948 <__fixsfsi>
    999a:	                   addq.l #4,sp
    999c:	                   move.w d0,8(sp)

	if( x < 0)
    99a0:	                   tst.w 18(sp)
    99a4:	               ,-- bge.s 99d8 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    99a6:	               |   movea.l 28(sp),a0
    99aa:	               |   move.l (a0),d2
    99ac:	               |   movea.l 24(sp),a0
    99b0:	               |   move.l 8(a0),d0
    99b4:	               |   move.l d0,-(sp)
    99b6:	               |   jsr 189b0 <__floatsisf>
    99bc:	               |   addq.l #4,sp
    99be:	               |   move.l d0,-(sp)
    99c0:	               |   move.l d2,-(sp)
    99c2:	               |   jsr 18ca4 <__subsf3>
    99c8:	               |   addq.l #8,sp
    99ca:	               |   move.l d0,-(sp)
    99cc:	               |   jsr 18948 <__fixsfsi>
    99d2:	               |   addq.l #4,sp
    99d4:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    99d8:	               '-> movea.w 8(sp),a1
    99dc:	                   movea.w 18(sp),a0
    99e0:	                   pea 1 <_start+0x1>
    99e4:	                   move.l a1,-(sp)
    99e6:	                   move.l a0,-(sp)
    99e8:	                   move.l 40(sp),-(sp)
    99ec:	                   move.l 40(sp),-(sp)
    99f0:	                   jsr 30f6 <CstScaleSprite>
    99f6:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    99fa:	                   movea.l 28(sp),a0
    99fe:	                   move.l 118(a0),d0
    9a02:	                   moveq #8,d1
    9a04:	                   and.l d1,d0
    9a06:	   ,-------------- beq.w 9ad2 <scaleSprite+0x1a8>
		if (single->xhot < 0)
    9a0a:	   |               movea.l 24(sp),a0
    9a0e:	   |               move.l 8(a0),d0
    9a12:	   |  ,----------- bpl.s 9a4e <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9a14:	   |  |            move.w 18(sp),d0
    9a18:	   |  |            tst.w 6(sp)
    9a1c:	   |  |     ,----- beq.s 9a36 <scaleSprite+0x10c>
    9a1e:	   |  |     |      movea.l 24(sp),a0
    9a22:	   |  |     |      move.l (a0),d1
    9a24:	   |  |     |      move.l d1,d2
    9a26:	   |  |     |      movea.l 24(sp),a0
    9a2a:	   |  |     |      move.l 8(a0),d1
    9a2e:	   |  |     |      move.l d1,d1
    9a30:	   |  |     |      movea.w d2,a0
    9a32:	   |  |     |      suba.w d1,a0
    9a34:	   |  |     |  ,-- bra.s 9a44 <scaleSprite+0x11a>
    9a36:	   |  |     '--|-> movea.l 24(sp),a0
    9a3a:	   |  |        |   move.l 8(a0),d1
    9a3e:	   |  |        |   move.l d1,d1
    9a40:	   |  |        |   movea.w d1,a0
    9a42:	   |  |        |   addq.w #1,a0
    9a44:	   |  |        '-> move.w d0,d1
    9a46:	   |  |            sub.w a0,d1
    9a48:	   |  |            move.w d1,16(sp)
    9a4c:	   |  |  ,-------- bra.s 9a86 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9a4e:	   |  '--|-------> move.w 18(sp),d1
    9a52:	   |     |         tst.w 6(sp)
    9a56:	   |     |  ,----- beq.s 9a74 <scaleSprite+0x14a>
    9a58:	   |     |  |      movea.l 24(sp),a0
    9a5c:	   |     |  |      move.l (a0),d0
    9a5e:	   |     |  |      move.l d0,d2
    9a60:	   |     |  |      movea.l 24(sp),a0
    9a64:	   |     |  |      move.l 8(a0),d0
    9a68:	   |     |  |      move.l d0,d0
    9a6a:	   |     |  |      movea.w d2,a0
    9a6c:	   |     |  |      suba.w d0,a0
    9a6e:	   |     |  |      move.w a0,d0
    9a70:	   |     |  |      subq.w #1,d0
    9a72:	   |     |  |  ,-- bra.s 9a7e <scaleSprite+0x154>
    9a74:	   |     |  '--|-> movea.l 24(sp),a0
    9a78:	   |     |     |   move.l 8(a0),d0
    9a7c:	   |     |     |   move.l d0,d0
    9a7e:	   |     |     '-> movea.w d1,a0
    9a80:	   |     |         suba.w d0,a0
    9a82:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9a86:	   |     '-------> movea.l 28(sp),a0
    9a8a:	   |               move.l 24(a0),d0
    9a8e:	   |               move.l d0,d1
    9a90:	   |               movea.l 24(sp),a0
    9a94:	   |               move.l 12(a0),d0
    9a98:	   |               move.l d0,d0
    9a9a:	   |               sub.w d0,d1
    9a9c:	   |               move.w 8(sp),d0
    9aa0:	   |               movea.w d1,a0
    9aa2:	   |               adda.w d0,a0
    9aa4:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    9aa8:	   |               movea.l 24(sp),a0
    9aac:	   |               move.l (a0),d0
    9aae:	   |               move.l d0,d0
    9ab0:	   |               move.w 16(sp),d1
    9ab4:	   |               add.w d0,d1
    9ab6:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    9aba:	   |               movea.l 24(sp),a0
    9abe:	   |               move.l 4(a0),d0
    9ac2:	   |               move.l d0,d0
    9ac4:	   |               movea.w 14(sp),a0
    9ac8:	   |               adda.w d0,a0
    9aca:	   |               move.w a0,10(sp)
    9ace:	,--|-------------- bra.w 9bba <scaleSprite+0x290>
	} else {
		x -= cameraX;
    9ad2:	|  '-------------> move.w 18(sp),d1
    9ad6:	|                  move.l 1e97a <cameraX>,d0
    9adc:	|                  move.l d0,d0
    9ade:	|                  sub.w d0,d1
    9ae0:	|                  move.w d1,18(sp)
		y -= cameraY;
    9ae4:	|                  move.w 8(sp),d1
    9ae8:	|                  move.l 1e97e <cameraY>,d0
    9aee:	|                  move.l d0,d0
    9af0:	|                  sub.w d0,d1
    9af2:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    9af6:	|                  movea.l 24(sp),a0
    9afa:	|                  move.l 8(a0),d0
    9afe:	|     ,----------- bpl.s 9b3a <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9b00:	|     |            move.w 18(sp),d0
    9b04:	|     |            tst.w 6(sp)
    9b08:	|     |     ,----- beq.s 9b22 <scaleSprite+0x1f8>
    9b0a:	|     |     |      movea.l 24(sp),a0
    9b0e:	|     |     |      move.l (a0),d1
    9b10:	|     |     |      move.l d1,d2
    9b12:	|     |     |      movea.l 24(sp),a0
    9b16:	|     |     |      move.l 8(a0),d1
    9b1a:	|     |     |      move.l d1,d1
    9b1c:	|     |     |      movea.w d2,a0
    9b1e:	|     |     |      suba.w d1,a0
    9b20:	|     |     |  ,-- bra.s 9b30 <scaleSprite+0x206>
    9b22:	|     |     '--|-> movea.l 24(sp),a0
    9b26:	|     |        |   move.l 8(a0),d1
    9b2a:	|     |        |   move.l d1,d1
    9b2c:	|     |        |   movea.w d1,a0
    9b2e:	|     |        |   addq.w #1,a0
    9b30:	|     |        '-> move.w d0,d1
    9b32:	|     |            sub.w a0,d1
    9b34:	|     |            move.w d1,16(sp)
    9b38:	|     |  ,-------- bra.s 9b72 <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9b3a:	|     '--|-------> move.w 18(sp),d1
    9b3e:	|        |         tst.w 6(sp)
    9b42:	|        |  ,----- beq.s 9b60 <scaleSprite+0x236>
    9b44:	|        |  |      movea.l 24(sp),a0
    9b48:	|        |  |      move.l (a0),d0
    9b4a:	|        |  |      move.l d0,d2
    9b4c:	|        |  |      movea.l 24(sp),a0
    9b50:	|        |  |      move.l 8(a0),d0
    9b54:	|        |  |      move.l d0,d0
    9b56:	|        |  |      movea.w d2,a0
    9b58:	|        |  |      suba.w d0,a0
    9b5a:	|        |  |      move.w a0,d0
    9b5c:	|        |  |      subq.w #1,d0
    9b5e:	|        |  |  ,-- bra.s 9b6a <scaleSprite+0x240>
    9b60:	|        |  '--|-> movea.l 24(sp),a0
    9b64:	|        |     |   move.l 8(a0),d0
    9b68:	|        |     |   move.l d0,d0
    9b6a:	|        |     '-> movea.w d1,a0
    9b6c:	|        |         suba.w d0,a0
    9b6e:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9b72:	|        '-------> movea.l 28(sp),a0
    9b76:	|                  move.l 24(a0),d0
    9b7a:	|                  move.l d0,d1
    9b7c:	|                  movea.l 24(sp),a0
    9b80:	|                  move.l 12(a0),d0
    9b84:	|                  move.l d0,d0
    9b86:	|                  sub.w d0,d1
    9b88:	|                  move.w 8(sp),d0
    9b8c:	|                  movea.w d1,a0
    9b8e:	|                  adda.w d0,a0
    9b90:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    9b94:	|                  movea.l 24(sp),a0
    9b98:	|                  move.l (a0),d0
    9b9a:	|                  move.l d0,d0
    9b9c:	|                  move.w 16(sp),d1
    9ba0:	|                  add.w d0,d1
    9ba2:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    9ba6:	|                  movea.l 24(sp),a0
    9baa:	|                  move.l 4(a0),d0
    9bae:	|                  move.l d0,d0
    9bb0:	|                  movea.w 14(sp),a0
    9bb4:	|                  adda.w d0,a0
    9bb6:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9bba:	'----------------> move.l 1e87a <input+0xa>,d1
    9bc0:	                   moveq #0,d0
    9bc2:	                   move.w 16(sp),d0
    9bc6:	                   cmp.l d1,d0
    9bc8:	            ,----- bgt.s 9bfe <scaleSprite+0x2d4>
    9bca:	            |      move.l 1e87a <input+0xa>,d1
    9bd0:	            |      moveq #0,d0
    9bd2:	            |      move.w 12(sp),d0
    9bd6:	            |      cmp.l d1,d0
    9bd8:	            +----- blt.s 9bfe <scaleSprite+0x2d4>
    9bda:	            |      move.l 1e87e <input+0xe>,d1
    9be0:	            |      moveq #0,d0
    9be2:	            |      move.w 14(sp),d0
    9be6:	            |      cmp.l d1,d0
    9be8:	            +----- bgt.s 9bfe <scaleSprite+0x2d4>
    9bea:	            |      move.l 1e87e <input+0xe>,d1
    9bf0:	            |      moveq #0,d0
    9bf2:	            |      move.w 10(sp),d0
    9bf6:	            |      cmp.l d1,d0
    9bf8:	            +----- blt.s 9bfe <scaleSprite+0x2d4>
		return TRUE;
    9bfa:	            |      moveq #1,d0
    9bfc:	            |  ,-- bra.s 9c00 <scaleSprite+0x2d6>
	}
	return FALSE;
    9bfe:	            '--|-> clr.w d0
    9c00:	               '-> move.l (sp)+,d2
    9c02:	                   lea 16(sp),sp
    9c06:	                   rts

00009c08 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9c08:	    move.l 4(sp),d0
    9c0c:	,-- bpl.s 9c10 <TF_abs+0x8>
    9c0e:	|   neg.l d0
}
    9c10:	'-> rts

00009c12 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9c12:	             lea -28(sp),sp
    9c16:	             move.l a6,-(sp)
    9c18:	             move.l d2,-(sp)
	
	struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9c1a:	             move.l #132,28(sp)
    9c22:	             clr.l 24(sp)
    9c26:	             move.l 1e8c0 <SysBase>,d0
    9c2c:	             movea.l d0,a6
    9c2e:	             move.l 28(sp),d0
    9c32:	             move.l 24(sp),d1
    9c36:	             jsr -684(a6)
    9c3a:	             move.l d0,20(sp)
    9c3e:	             move.l 20(sp),d0
    9c42:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9c46:	         ,-- bne.s 9c4e <addPerson+0x3c>
    9c48:	         |   clr.w d0
    9c4a:	,--------|-- bra.w 9e7e <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9c4e:	|        '-> move.l 48(sp),-(sp)
    9c52:	|            jsr e076 <loadObjectType>
    9c58:	|            addq.l #4,sp
    9c5a:	|            movea.l 16(sp),a0
    9c5e:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9c62:	|            movea.l 16(sp),a0
    9c66:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9c6e:	|            movea.l 16(sp),a0
    9c72:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    9c76:	|            movea.l 16(sp),a0
    9c7a:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    9c7e:	|            move.l 44(sp),-(sp)
    9c82:	|            jsr 189b0 <__floatsisf>
    9c88:	|            addq.l #4,sp
    9c8a:	|            move.l d0,d2
    9c8c:	|            move.l 40(sp),-(sp)
    9c90:	|            jsr 189b0 <__floatsisf>
    9c96:	|            addq.l #4,sp
    9c98:	|            move.l d2,-(sp)
    9c9a:	|            move.l d0,-(sp)
    9c9c:	|            move.l 24(sp),-(sp)
    9ca0:	|            jsr b7c2 <moveAndScale>
    9ca6:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9caa:	|            movea.l 16(sp),a0
    9cae:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    9cb2:	|            movea.l 16(sp),a0
    9cb6:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9cbc:	|            movea.l 16(sp),a0
    9cc0:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9cc6:	|            movea.l 16(sp),a0
    9cca:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9cce:	|            movea.l 16(sp),a0
    9cd2:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9cd6:	|            movea.l 16(sp),a0
    9cda:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9ce0:	|            movea.l 16(sp),a0
    9ce4:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9ce8:	|            movea.l 16(sp),a0
    9cec:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9cf4:	|            movea.l 16(sp),a0
    9cf8:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9d00:	|            movea.l 16(sp),a0
    9d04:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9d08:	|            movea.l 16(sp),a0
    9d0c:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9d10:	|            movea.l 16(sp),a0
    9d14:	|            movea.l 114(a0),a0
    9d18:	|            move.l 24(a0),d0
    9d1c:	|            movea.l 16(sp),a0
    9d20:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9d24:	|            movea.l 16(sp),a0
    9d28:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9d2c:	|            movea.l 16(sp),a0
    9d30:	|            movea.l 114(a0),a0
    9d34:	|            move.l 32(a0),d0
    9d38:	|            movea.l 16(sp),a0
    9d3c:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9d40:	|            movea.l 16(sp),a0
    9d44:	|            clr.b 126(a0)
    newPerson->g = 0;
    9d48:	|            movea.l 16(sp),a0
    9d4c:	|            clr.b 127(a0)
    newPerson->b = 0;
    9d50:	|            movea.l 16(sp),a0
    9d54:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9d58:	|            movea.l 16(sp),a0
    9d5c:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    9d60:	|            movea.l 16(sp),a0
    9d64:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9d68:	|            movea.l 16(sp),a0
    9d6c:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9d72:	|            clr.l -(sp)
    9d74:	|            move.l 20(sp),-(sp)
    9d78:	|            jsr 46ee <setFrames>
    9d7e:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    9d80:	|            movea.l 52(sp),a0
    9d84:	|            movea.l (a0),a0
    9d86:	|            movea.l (a0),a0
    9d88:	|            movea.l 4(a0),a0
    9d8c:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    9d90:	|     ,----- bpl.s 9d9a <addPerson+0x188>
    9d92:	|     |      move.l 12(sp),d0
    9d96:	|     |      neg.l d0
    9d98:	|     |  ,-- bra.s 9d9c <addPerson+0x18a>
    9d9a:	|     '--|-> moveq #1,d0
    9d9c:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    9da0:	|            movea.l 52(sp),a0
    9da4:	|            movea.l (a0),a0
    9da6:	|            movea.l (a0),a0
    9da8:	|            movea.l (a0),a0
    9daa:	|            move.l 8(a0),d0
    9dae:	|            cmp.l 8(sp),d0
    9db2:	|     ,----- bgt.s 9de4 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    9db4:	|     |      tst.l 12(sp)
    9db8:	|     |  ,-- bge.s 9dc6 <addPerson+0x1b4>
            newPerson->height = 5;
    9dba:	|     |  |   movea.l 16(sp),a0
    9dbe:	|     |  |   moveq #5,d0
    9dc0:	|     |  |   move.l d0,20(a0)
    9dc4:	|  ,--|--|-- bra.s 9e10 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9dc6:	|  |  |  '-> movea.l 52(sp),a0
    9dca:	|  |  |      movea.l (a0),a0
    9dcc:	|  |  |      movea.l (a0),a0
    9dce:	|  |  |      movea.l (a0),a0
    9dd0:	|  |  |      movea.l 16(a0),a0
    9dd4:	|  |  |      move.l 12(a0),d0
    9dd8:	|  |  |      addq.l #5,d0
    9dda:	|  |  |      movea.l 16(sp),a0
    9dde:	|  |  |      move.l d0,20(a0)
    9de2:	|  +--|----- bra.s 9e10 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9de4:	|  |  '----> movea.l 52(sp),a0
    9de8:	|  |         movea.l (a0),a0
    9dea:	|  |         movea.l (a0),a0
    9dec:	|  |         movea.l (a0),a0
    9dee:	|  |         movea.l 16(a0),a0
    9df2:	|  |         move.l 8(sp),d1
    9df6:	|  |         move.l d1,d0
    9df8:	|  |         lsl.l #3,d0
    9dfa:	|  |         sub.l d1,d0
    9dfc:	|  |         add.l d0,d0
    9dfe:	|  |         add.l d0,d0
    9e00:	|  |         adda.l d0,a0
    9e02:	|  |         move.l 12(a0),d0
    9e06:	|  |         addq.l #5,d0
    9e08:	|  |         movea.l 16(sp),a0
    9e0c:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9e10:	|  '-------> move.l #125220,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9e18:	|        ,-- bra.s 9e28 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9e1a:	|     ,--|-> movea.l 32(sp),a0
    9e1e:	|     |  |   move.l (a0),d0
    9e20:	|     |  |   moveq #36,d1
    9e22:	|     |  |   add.l d0,d1
    9e24:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9e28:	|     |  '-> movea.l 32(sp),a0
    9e2c:	|     |      move.l (a0),d0
    9e2e:	|     |  ,-- beq.s 9e56 <addPerson+0x244>
    9e30:	|     |  |   movea.l 32(sp),a0
    9e34:	|     |  |   movea.l (a0),a0
    9e36:	|     |  |   move.l 4(a0),d2
    9e3a:	|     |  |   move.l 44(sp),-(sp)
    9e3e:	|     |  |   jsr 189b0 <__floatsisf>
    9e44:	|     |  |   addq.l #4,sp
    9e46:	|     |  |   move.l d0,-(sp)
    9e48:	|     |  |   move.l d2,-(sp)
    9e4a:	|     |  |   jsr 18bd6 <__ltsf2>
    9e50:	|     |  |   addq.l #8,sp
    9e52:	|     |  |   tst.l d0
    9e54:	|     '--|-- blt.s 9e1a <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9e56:	|        '-> movea.l 32(sp),a0
    9e5a:	|            move.l (a0),d0
    9e5c:	|            movea.l 16(sp),a0
    9e60:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9e64:	|            movea.l 32(sp),a0
    9e68:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9e6c:	|            movea.l 16(sp),a0
    9e70:	|            move.l 114(a0),d0
    9e74:	|            sne d0
    9e76:	|            neg.b d0
    9e78:	|            move.b d0,d0
    9e7a:	|            andi.w #255,d0
}
    9e7e:	'----------> move.l (sp)+,d2
    9e80:	             movea.l (sp)+,a6
    9e82:	             lea 28(sp),sp
    9e86:	             rts

00009e88 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    9e88:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9e8a:	       move.l 8(sp),-(sp)
    9e8e:	       jsr b018 <findPerson>
    9e94:	       addq.l #4,sp
    9e96:	       move.l d0,(sp)
    if (moveMe) {
    9e98:	,----- beq.s 9ecc <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9e9a:	|      movea.l (sp),a0
    9e9c:	|      move.l 68(a0),d0
    9ea0:	|  ,-- beq.s 9eb2 <animatePerson+0x2a>
    9ea2:	|  |   movea.l (sp),a0
    9ea4:	|  |   move.l 68(a0),d0
    9ea8:	|  |   move.l d0,-(sp)
    9eaa:	|  |   jsr 55c2 <abortFunction>
    9eb0:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    9eb2:	|  '-> movea.l (sp),a0
    9eb4:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9eb8:	|      movea.l (sp),a0
    9eba:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9ebe:	|      movea.l (sp),a0
    9ec0:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9ec4:	|      movea.l (sp),a0
    9ec6:	|      move.l 12(sp),72(a0)
    }
}
    9ecc:	'----> nop
    9ece:	       addq.l #4,sp
    9ed0:	       rts

00009ed2 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9ed2:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9ed4:	       move.l 8(sp),-(sp)
    9ed8:	       jsr b018 <findPerson>
    9ede:	       addq.l #4,sp
    9ee0:	       move.l d0,(sp)
    if (moveMe) {
    9ee2:	,----- beq.s 9f24 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9ee4:	|      movea.l (sp),a0
    9ee6:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9eea:	|      movea.l (sp),a0
    9eec:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9ef2:	|      move.l (sp),-(sp)
    9ef4:	|      jsr b950 <rethinkAngle>
    9efa:	|      addq.l #4,sp
        if (moveMe->walking) {
    9efc:	|      movea.l (sp),a0
    9efe:	|      move.w 64(a0),d0
    9f02:	|  ,-- beq.s 9f16 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9f04:	|  |   pea 1 <_start+0x1>
    9f08:	|  |   move.l 4(sp),-(sp)
    9f0c:	|  |   jsr 46ee <setFrames>
    9f12:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9f14:	+--|-- bra.s 9f24 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9f16:	|  '-> clr.l -(sp)
    9f18:	|      move.l 4(sp),-(sp)
    9f1c:	|      jsr 46ee <setFrames>
    9f22:	|      addq.l #8,sp
}
    9f24:	'----> nop
    9f26:	       addq.l #4,sp
    9f28:	       rts

00009f2a <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9f2a:	             lea -36(sp),sp
    9f2e:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9f30:	             movea.l 44(sp),a0
    9f34:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9f3a:	             moveq #12,d0
    9f3c:	             move.l d0,28(sp)
    9f40:	             clr.l 24(sp)
    9f44:	             move.l 1e8c0 <SysBase>,d0
    9f4a:	             movea.l d0,a6
    9f4c:	             move.l 28(sp),d0
    9f50:	             move.l 24(sp),d1
    9f54:	             jsr -684(a6)
    9f58:	             move.l d0,20(sp)
    9f5c:	             move.l 20(sp),d0
    9f60:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9f64:	         ,-- bne.s 9f7a <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9f66:	         |   pea 1a54c <PutChar+0x152c>
    9f6c:	         |   jsr 1857e <KPrintF>
    9f72:	         |   addq.l #4,sp
		return NULL;
    9f74:	         |   moveq #0,d0
    9f76:	,--------|-- bra.w a0cc <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9f7a:	|        '-> movea.l 44(sp),a0
    9f7e:	|            move.l (a0),d0
    9f80:	|            movea.l 16(sp),a0
    9f84:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9f86:	|            movea.l 16(sp),a0
    9f8a:	|            movea.l (a0),a0
    9f8c:	|            move.l 4(a0),d0
    9f90:	|            addq.l #1,d0
    9f92:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9f96:	|            movea.l 16(sp),a0
    9f9a:	|            move.l 32(sp),8(a0)

	if (num) {
    9fa0:	|  ,-------- beq.w a0c0 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9fa4:	|  |         move.l 32(sp),d1
    9fa8:	|  |         move.l d1,d0
    9faa:	|  |         add.l d0,d0
    9fac:	|  |         add.l d1,d0
    9fae:	|  |         add.l d0,d0
    9fb0:	|  |         add.l d0,d0
    9fb2:	|  |         move.l d0,12(sp)
    9fb6:	|  |         clr.l 8(sp)
    9fba:	|  |         move.l 1e8c0 <SysBase>,d0
    9fc0:	|  |         movea.l d0,a6
    9fc2:	|  |         move.l 12(sp),d0
    9fc6:	|  |         move.l 8(sp),d1
    9fca:	|  |         jsr -684(a6)
    9fce:	|  |         move.l d0,4(sp)
    9fd2:	|  |         move.l 4(sp),d0
    9fd6:	|  |         movea.l 16(sp),a0
    9fda:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9fde:	|  |         movea.l 16(sp),a0
    9fe2:	|  |         move.l 4(a0),d0
    9fe6:	|  |     ,-- bne.s 9ffc <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9fe8:	|  |     |   pea 1a54c <PutChar+0x152c>
    9fee:	|  |     |   jsr 1857e <KPrintF>
    9ff4:	|  |     |   addq.l #4,sp
			return NULL;
    9ff6:	|  |     |   moveq #0,d0
    9ff8:	+--|-----|-- bra.w a0cc <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9ffc:	|  |     '-> clr.l 36(sp)
    a000:	|  |     ,-- bra.w a0b2 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    a004:	|  |  ,--|-> movea.l 44(sp),a0
    a008:	|  |  |  |   movea.l 4(a0),a0
    a00c:	|  |  |  |   move.l 36(sp),d1
    a010:	|  |  |  |   move.l d1,d0
    a012:	|  |  |  |   add.l d0,d0
    a014:	|  |  |  |   add.l d1,d0
    a016:	|  |  |  |   add.l d0,d0
    a018:	|  |  |  |   add.l d0,d0
    a01a:	|  |  |  |   lea (0,a0,d0.l),a1
    a01e:	|  |  |  |   movea.l 16(sp),a0
    a022:	|  |  |  |   movea.l 4(a0),a0
    a026:	|  |  |  |   move.l 36(sp),d1
    a02a:	|  |  |  |   move.l d1,d0
    a02c:	|  |  |  |   add.l d0,d0
    a02e:	|  |  |  |   add.l d1,d0
    a030:	|  |  |  |   add.l d0,d0
    a032:	|  |  |  |   add.l d0,d0
    a034:	|  |  |  |   adda.l d0,a0
    a036:	|  |  |  |   move.l (a1),d0
    a038:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    a03a:	|  |  |  |   movea.l 44(sp),a0
    a03e:	|  |  |  |   movea.l 4(a0),a0
    a042:	|  |  |  |   move.l 36(sp),d1
    a046:	|  |  |  |   move.l d1,d0
    a048:	|  |  |  |   add.l d0,d0
    a04a:	|  |  |  |   add.l d1,d0
    a04c:	|  |  |  |   add.l d0,d0
    a04e:	|  |  |  |   add.l d0,d0
    a050:	|  |  |  |   lea (0,a0,d0.l),a1
    a054:	|  |  |  |   movea.l 16(sp),a0
    a058:	|  |  |  |   movea.l 4(a0),a0
    a05c:	|  |  |  |   move.l 36(sp),d1
    a060:	|  |  |  |   move.l d1,d0
    a062:	|  |  |  |   add.l d0,d0
    a064:	|  |  |  |   add.l d1,d0
    a066:	|  |  |  |   add.l d0,d0
    a068:	|  |  |  |   add.l d0,d0
    a06a:	|  |  |  |   adda.l d0,a0
    a06c:	|  |  |  |   move.l 4(a1),d0
    a070:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    a074:	|  |  |  |   movea.l 44(sp),a0
    a078:	|  |  |  |   movea.l 4(a0),a0
    a07c:	|  |  |  |   move.l 36(sp),d1
    a080:	|  |  |  |   move.l d1,d0
    a082:	|  |  |  |   add.l d0,d0
    a084:	|  |  |  |   add.l d1,d0
    a086:	|  |  |  |   add.l d0,d0
    a088:	|  |  |  |   add.l d0,d0
    a08a:	|  |  |  |   lea (0,a0,d0.l),a1
    a08e:	|  |  |  |   movea.l 16(sp),a0
    a092:	|  |  |  |   movea.l 4(a0),a0
    a096:	|  |  |  |   move.l 36(sp),d1
    a09a:	|  |  |  |   move.l d1,d0
    a09c:	|  |  |  |   add.l d0,d0
    a09e:	|  |  |  |   add.l d1,d0
    a0a0:	|  |  |  |   add.l d0,d0
    a0a2:	|  |  |  |   add.l d0,d0
    a0a4:	|  |  |  |   adda.l d0,a0
    a0a6:	|  |  |  |   move.l 8(a1),d0
    a0aa:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    a0ae:	|  |  |  |   addq.l #1,36(sp)
    a0b2:	|  |  |  '-> move.l 36(sp),d0
    a0b6:	|  |  |      cmp.l 32(sp),d0
    a0ba:	|  |  '----- blt.w a004 <copyAnim+0xda>
    a0be:	|  |     ,-- bra.s a0c8 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    a0c0:	|  '-----|-> movea.l 16(sp),a0
    a0c4:	|        |   clr.l 4(a0)
	}

	return newAnim;
    a0c8:	|        '-> move.l 16(sp),d0
}
    a0cc:	'----------> movea.l (sp)+,a6
    a0ce:	             lea 36(sp),sp
    a0d2:	             rts

0000a0d4 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    a0d4:	                lea -44(sp),sp
    a0d8:	                move.l a6,-(sp)
    a0da:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    a0dc:	                moveq #12,d0
    a0de:	                move.l d0,40(sp)
    a0e2:	                clr.l 36(sp)
    a0e6:	                move.l 1e8c0 <SysBase>,d0
    a0ec:	                movea.l d0,a6
    a0ee:	                move.l 40(sp),d0
    a0f2:	                move.l 36(sp),d1
    a0f6:	                jsr -684(a6)
    a0fa:	                move.l d0,32(sp)
    a0fe:	                move.l 32(sp),d0
    a102:	                move.l d0,28(sp)
	if( !newP) {
    a106:	            ,-- bne.s a11c <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    a108:	            |   pea 1a56d <PutChar+0x154d>
    a10e:	            |   jsr 1857e <KPrintF>
    a114:	            |   addq.l #4,sp
		return NULL;
    a116:	            |   moveq #0,d0
    a118:	,-----------|-- bra.w a2ec <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    a11c:	|           '-> movea.l 28(sp),a0
    a120:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    a126:	|               move.l 56(sp),d1
    a12a:	|               move.l d1,d0
    a12c:	|               add.l d0,d0
    a12e:	|               add.l d1,d0
    a130:	|               add.l d0,d0
    a132:	|               add.l d0,d0
    a134:	|               move.l d0,24(sp)
    a138:	|               clr.l 20(sp)
    a13c:	|               move.l 1e8c0 <SysBase>,d0
    a142:	|               movea.l d0,a6
    a144:	|               move.l 24(sp),d0
    a148:	|               move.l 20(sp),d1
    a14c:	|               jsr -684(a6)
    a150:	|               move.l d0,16(sp)
    a154:	|               move.l 16(sp),d0
    a158:	|               movea.l 28(sp),a0
    a15c:	|               move.l d0,4(a0)
	if( !newP->frames) {
    a160:	|               movea.l 28(sp),a0
    a164:	|               move.l 4(a0),d0
    a168:	|           ,-- bne.s a17e <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    a16a:	|           |   pea 1a56d <PutChar+0x154d>
    a170:	|           |   jsr 1857e <KPrintF>
    a176:	|           |   addq.l #4,sp
		return NULL;
    a178:	|           |   moveq #0,d0
    a17a:	+-----------|-- bra.w a2ec <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    a17e:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    a184:	|               movea.l 60(sp),a0
    a188:	|               move.l (a0),44(sp)
	while (a) {
    a18c:	|     ,-------- bra.w a2e0 <createPersonaAnim+0x20c>
		a --;
    a190:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    a194:	|  |  |         movea.l 28(sp),a0
    a198:	|  |  |         movea.l 4(a0),a0
    a19c:	|  |  |         move.l 48(sp),d1
    a1a0:	|  |  |         move.l d1,d0
    a1a2:	|  |  |         add.l d0,d0
    a1a4:	|  |  |         add.l d1,d0
    a1a6:	|  |  |         add.l d0,d0
    a1a8:	|  |  |         add.l d0,d0
    a1aa:	|  |  |         adda.l d0,a0
    a1ac:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    a1b0:	|  |  |         movea.l 44(sp),a0
    a1b4:	|  |  |         move.l (a0),d0
    a1b6:	|  |  |         moveq #5,d1
    a1b8:	|  |  |         cmp.l d0,d1
    a1ba:	|  |  |     ,-- bne.s a1e6 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    a1bc:	|  |  |     |   movea.l 28(sp),a0
    a1c0:	|  |  |     |   movea.l 4(a0),a0
    a1c4:	|  |  |     |   move.l 48(sp),d1
    a1c8:	|  |  |     |   move.l d1,d0
    a1ca:	|  |  |     |   add.l d0,d0
    a1cc:	|  |  |     |   add.l d1,d0
    a1ce:	|  |  |     |   add.l d0,d0
    a1d0:	|  |  |     |   add.l d0,d0
    a1d2:	|  |  |     |   lea (0,a0,d0.l),a1
    a1d6:	|  |  |     |   movea.l 44(sp),a0
    a1da:	|  |  |     |   move.l 4(a0),d0
    a1de:	|  |  |     |   move.l d0,8(a1)
    a1e2:	|  |  |  ,--|-- bra.w a28e <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    a1e6:	|  |  |  |  '-> movea.l 44(sp),a0
    a1ea:	|  |  |  |      move.l (a0),d0
    a1ec:	|  |  |  |      moveq #2,d1
    a1ee:	|  |  |  |      cmp.l d0,d1
    a1f0:	|  |  |  |  ,-- bne.s a21c <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    a1f2:	|  |  |  |  |   movea.l 44(sp),a0
    a1f6:	|  |  |  |  |   move.l 4(a0),d2
    a1fa:	|  |  |  |  |   movea.l 28(sp),a0
    a1fe:	|  |  |  |  |   movea.l 4(a0),a0
    a202:	|  |  |  |  |   move.l 48(sp),d1
    a206:	|  |  |  |  |   move.l d1,d0
    a208:	|  |  |  |  |   add.l d0,d0
    a20a:	|  |  |  |  |   add.l d1,d0
    a20c:	|  |  |  |  |   add.l d0,d0
    a20e:	|  |  |  |  |   add.l d0,d0
    a210:	|  |  |  |  |   adda.l d0,a0
    a212:	|  |  |  |  |   move.l d2,d0
    a214:	|  |  |  |  |   neg.l d0
    a216:	|  |  |  |  |   move.l d0,8(a0)
    a21a:	|  |  |  +--|-- bra.s a28e <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    a21c:	|  |  |  |  '-> movea.l 44(sp),a0
    a220:	|  |  |  |      move.l (a0),d0
    a222:	|  |  |  |      moveq #6,d1
    a224:	|  |  |  |      cmp.l d0,d1
    a226:	|  |  |  |  ,-- bne.s a26e <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    a228:	|  |  |  |  |   movea.l 44(sp),a0
    a22c:	|  |  |  |  |   movea.l 4(a0),a0
    a230:	|  |  |  |  |   move.l (a0),d0
    a232:	|  |  |  |  |   move.l d0,-(sp)
    a234:	|  |  |  |  |   pea 1 <_start+0x1>
    a238:	|  |  |  |  |   lea 20(sp),a0
    a23c:	|  |  |  |  |   move.l a0,-(sp)
    a23e:	|  |  |  |  |   jsr 15a9e <getValueType>
    a244:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    a248:	|  |  |  |  |   movea.l 44(sp),a0
    a24c:	|  |  |  |  |   movea.l 4(a0),a0
    a250:	|  |  |  |  |   movea.l (a0),a0
    a252:	|  |  |  |  |   move.l 8(a0),d0
    a256:	|  |  |  |  |   move.l d0,-(sp)
    a258:	|  |  |  |  |   pea 1 <_start+0x1>
    a25c:	|  |  |  |  |   lea 16(sp),a0
    a260:	|  |  |  |  |   move.l a0,-(sp)
    a262:	|  |  |  |  |   jsr 15a9e <getValueType>
    a268:	|  |  |  |  |   lea 12(sp),sp
    a26c:	|  |  |  +--|-- bra.s a28e <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    a26e:	|  |  |  |  '-> move.l 44(sp),d0
    a272:	|  |  |  |      move.l d0,-(sp)
    a274:	|  |  |  |      pea 1 <_start+0x1>
    a278:	|  |  |  |      lea 20(sp),a0
    a27c:	|  |  |  |      move.l a0,-(sp)
    a27e:	|  |  |  |      jsr 15a9e <getValueType>
    a284:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    a288:	|  |  |  |      moveq #1,d0
    a28a:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    a28e:	|  |  |  '----> move.l 60(sp),-(sp)
    a292:	|  |  |         jsr 16422 <trimStack>
    a298:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    a29a:	|  |  |         movea.l 28(sp),a0
    a29e:	|  |  |         movea.l 4(a0),a0
    a2a2:	|  |  |         move.l 48(sp),d1
    a2a6:	|  |  |         move.l d1,d0
    a2a8:	|  |  |         add.l d0,d0
    a2aa:	|  |  |         add.l d1,d0
    a2ac:	|  |  |         add.l d0,d0
    a2ae:	|  |  |         add.l d0,d0
    a2b0:	|  |  |         adda.l d0,a0
    a2b2:	|  |  |         move.l 12(sp),d0
    a2b6:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    a2b8:	|  |  |         movea.l 28(sp),a0
    a2bc:	|  |  |         movea.l 4(a0),a0
    a2c0:	|  |  |         move.l 48(sp),d1
    a2c4:	|  |  |         move.l d1,d0
    a2c6:	|  |  |         add.l d0,d0
    a2c8:	|  |  |         add.l d1,d0
    a2ca:	|  |  |         add.l d0,d0
    a2cc:	|  |  |         add.l d0,d0
    a2ce:	|  |  |         adda.l d0,a0
    a2d0:	|  |  |         move.l 8(sp),d0
    a2d4:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    a2d8:	|  |  |         movea.l 60(sp),a0
    a2dc:	|  |  |         move.l (a0),44(sp)
	while (a) {
    a2e0:	|  |  '-------> tst.l 48(sp)
    a2e4:	|  '----------- bne.w a190 <createPersonaAnim+0xbc>
	}

	return newP;
    a2e8:	|               move.l 28(sp),d0
}
    a2ec:	'-------------> move.l (sp)+,d2
    a2ee:	                movea.l (sp)+,a6
    a2f0:	                lea 44(sp),sp
    a2f4:	                rts

0000a2f6 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    a2f6:	       lea -12(sp),sp
    a2fa:	       move.l a6,-(sp)

	if(orig->theSprites)
    a2fc:	       movea.l 20(sp),a0
    a300:	       move.l (a0),d0
    a302:	   ,-- beq.s a32c <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    a304:	   |   movea.l 20(sp),a0
    a308:	   |   movea.l (a0),a0
    a30a:	   |   move.l 4(a0),d0
    a30e:	   |   subq.l #1,d0
    a310:	   |   move.l d0,4(a0)
    a314:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    a31a:	   +-- bne.s a32c <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    a31c:	   |   movea.l 20(sp),a0
    a320:	   |   move.l (a0),d0
    a322:	   |   move.l d0,-(sp)
    a324:	   |   jsr 93da <forgetSpriteBank>
    a32a:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    a32c:	   '-> tst.l 20(sp)
    a330:	,----- beq.s a370 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    a332:	|      movea.l 20(sp),a0
    a336:	|      move.l 8(a0),d0
    a33a:	|  ,-- beq.s a356 <deleteAnim+0x60>
			FreeVec( orig->frames);
    a33c:	|  |   movea.l 20(sp),a0
    a340:	|  |   move.l 4(a0),8(sp)
    a346:	|  |   move.l 1e8c0 <SysBase>,d0
    a34c:	|  |   movea.l d0,a6
    a34e:	|  |   movea.l 8(sp),a1
    a352:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    a356:	|  '-> move.l 20(sp),4(sp)
    a35c:	|      move.l 1e8c0 <SysBase>,d0
    a362:	|      movea.l d0,a6
    a364:	|      movea.l 4(sp),a1
    a368:	|      jsr -690(a6)
		orig = NULL;
    a36c:	|      clr.l 20(sp)
	}	
	
}
    a370:	'----> nop
    a372:	       movea.l (sp)+,a6
    a374:	       lea 12(sp),sp
    a378:	       rts

0000a37a <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    a37a:	          lea -124(sp),sp
    a37e:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    a382:	          movea.l 152(sp),a0
    a386:	          move.l 56(a0),d1
    a38a:	          movea.l 152(sp),a0
    a38e:	          move.l 60(a0),d0
    a392:	          cmp.l d1,d0
    a394:	      ,-- bne.s a3c4 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    a396:	      |   movea.l 152(sp),a0
    a39a:	      |   moveq #-1,d0
    a39c:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    a3a0:	      |   movea.l 152(sp),a0
    a3a4:	      |   move.l 40(a0),d0
    a3a8:	      |   movea.l 152(sp),a0
    a3ac:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    a3b0:	      |   movea.l 152(sp),a0
    a3b4:	      |   move.l 44(a0),d0
    a3b8:	      |   movea.l 152(sp),a0
    a3bc:	      |   move.l d0,52(a0)
    a3c0:	   ,--|-- bra.w a92a <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    a3c4:	   |  '-> movea.l 1e9dc <currentFloor>,a0
    a3ca:	   |      move.l 16(a0),d1
    a3ce:	   |      movea.l 152(sp),a0
    a3d2:	   |      move.l 56(a0),d0
    a3d6:	   |      add.l d0,d0
    a3d8:	   |      add.l d0,d0
    a3da:	   |      movea.l d1,a0
    a3dc:	   |      adda.l d0,a0
    a3de:	   |      move.l (a0),d1
    a3e0:	   |      movea.l 152(sp),a0
    a3e4:	   |      move.l 60(a0),d0
    a3e8:	   |      add.l d0,d0
    a3ea:	   |      add.l d0,d0
    a3ec:	   |      movea.l d1,a0
    a3ee:	   |      adda.l d0,a0
    a3f0:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    a3f4:	   |      moveq #-1,d0
    a3f6:	   |      cmp.l 144(sp),d0
    a3fa:	   |  ,-- bne.s a402 <doBorderStuff+0x88>
    a3fc:	   |  |   clr.w d0
    a3fe:	,--|--|-- bra.w aa2a <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    a402:	|  |  '-> movea.l 1e9dc <currentFloor>,a0
    a408:	|  |      move.l 12(a0),d1
    a40c:	|  |      move.l 144(sp),d0
    a410:	|  |      lsl.l #3,d0
    a412:	|  |      add.l d0,d1
    a414:	|  |      movea.l 1e9dc <currentFloor>,a0
    a41a:	|  |      movea.l 12(a0),a1
    a41e:	|  |      movea.l 152(sp),a0
    a422:	|  |      move.l 56(a0),d0
    a426:	|  |      lsl.l #3,d0
    a428:	|  |      add.l a1,d0
    a42a:	|  |      lea 40(sp),a0
    a42e:	|  |      move.l a0,-(sp)
    a430:	|  |      lea 48(sp),a0
    a434:	|  |      move.l a0,-(sp)
    a436:	|  |      move.l d1,-(sp)
    a438:	|  |      move.l d0,-(sp)
    a43a:	|  |      jsr 177e4 <getMatchingCorners>
    a440:	|  |      lea 16(sp),sp
    a444:	|  |      tst.w d0
    a446:	|  |  ,-- bne.s a45c <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    a448:	|  |  |   pea 1a597 <PutChar+0x1577>
    a44e:	|  |  |   jsr 1857e <KPrintF>
    a454:	|  |  |   addq.l #4,sp
            return FALSE;
    a456:	|  |  |   clr.w d0
    a458:	+--|--|-- bra.w aa2a <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    a45c:	|  |  '-> movea.l 152(sp),a0
    a460:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    a466:	|  |      movea.l 152(sp),a0
    a46a:	|  |      move.l (a0),d0
    a46c:	|  |      move.l d0,-(sp)
    a46e:	|  |      jsr 18948 <__fixsfsi>
    a474:	|  |      addq.l #4,sp
    a476:	|  |      move.l d0,140(sp)
    a47a:	|  |      movea.l 152(sp),a0
    a47e:	|  |      move.l 4(a0),d0
    a482:	|  |      move.l d0,-(sp)
    a484:	|  |      jsr 18948 <__fixsfsi>
    a48a:	|  |      addq.l #4,sp
    a48c:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    a490:	|  |      movea.l 152(sp),a0
    a494:	|  |      move.l 40(a0),132(sp)
    a49a:	|  |      movea.l 152(sp),a0
    a49e:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    a4a4:	|  |      movea.l 1e9dc <currentFloor>,a0
    a4aa:	|  |      move.l 4(a0),d1
    a4ae:	|  |      move.l 44(sp),d0
    a4b2:	|  |      lsl.l #3,d0
    a4b4:	|  |      movea.l d1,a0
    a4b6:	|  |      adda.l d0,a0
    a4b8:	|  |      move.l (a0),124(sp)
    a4bc:	|  |      movea.l 1e9dc <currentFloor>,a0
    a4c2:	|  |      move.l 4(a0),d1
    a4c6:	|  |      move.l 44(sp),d0
    a4ca:	|  |      lsl.l #3,d0
    a4cc:	|  |      movea.l d1,a0
    a4ce:	|  |      adda.l d0,a0
    a4d0:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    a4d6:	|  |      movea.l 1e9dc <currentFloor>,a0
    a4dc:	|  |      move.l 4(a0),d1
    a4e0:	|  |      move.l 40(sp),d0
    a4e4:	|  |      lsl.l #3,d0
    a4e6:	|  |      movea.l d1,a0
    a4e8:	|  |      adda.l d0,a0
    a4ea:	|  |      move.l (a0),116(sp)
    a4ee:	|  |      movea.l 1e9dc <currentFloor>,a0
    a4f4:	|  |      move.l 4(a0),d1
    a4f8:	|  |      move.l 40(sp),d0
    a4fc:	|  |      lsl.l #3,d0
    a4fe:	|  |      movea.l d1,a0
    a500:	|  |      adda.l d0,a0
    a502:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    a508:	|  |      move.l 140(sp),d0
    a50c:	|  |      sub.l 132(sp),d0
    a510:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    a514:	|  |      move.l 136(sp),d0
    a518:	|  |      sub.l 128(sp),d0
    a51c:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    a520:	|  |      move.l 116(sp),d0
    a524:	|  |      sub.l 124(sp),d0
    a528:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    a52c:	|  |      move.l 112(sp),d0
    a530:	|  |      sub.l 120(sp),d0
    a534:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    a538:	|  |      move.l 124(sp),d0
    a53c:	|  |      sub.l 140(sp),d0
    a540:	|  |      move.l 104(sp),-(sp)
    a544:	|  |      move.l d0,-(sp)
    a546:	|  |      jsr 18f0a <__mulsi3>
    a54c:	|  |      addq.l #8,sp
    a54e:	|  |      move.l d0,d2
    a550:	|  |      move.l 120(sp),d0
    a554:	|  |      sub.l 136(sp),d0
    a558:	|  |      move.l 108(sp),-(sp)
    a55c:	|  |      move.l d0,-(sp)
    a55e:	|  |      jsr 18f0a <__mulsi3>
    a564:	|  |      addq.l #8,sp
    a566:	|  |      move.l d2,d1
    a568:	|  |      sub.l d0,d1
    a56a:	|  |      move.l d1,-(sp)
    a56c:	|  |      jsr 18970 <__floatsidf>
    a572:	|  |      addq.l #4,sp
    a574:	|  |      move.l d0,32(sp)
    a578:	|  |      move.l d1,36(sp)
    a57c:	|  |      move.l 32(sp),88(sp)
    a582:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    a588:	|  |      move.l 96(sp),-(sp)
    a58c:	|  |      move.l 112(sp),-(sp)
    a590:	|  |      jsr 18f0a <__mulsi3>
    a596:	|  |      addq.l #8,sp
    a598:	|  |      move.l d0,d2
    a59a:	|  |      move.l 100(sp),-(sp)
    a59e:	|  |      move.l 108(sp),-(sp)
    a5a2:	|  |      jsr 18f0a <__mulsi3>
    a5a8:	|  |      addq.l #8,sp
    a5aa:	|  |      move.l d2,d1
    a5ac:	|  |      sub.l d0,d1
    a5ae:	|  |      move.l d1,-(sp)
    a5b0:	|  |      jsr 18970 <__floatsidf>
    a5b6:	|  |      addq.l #4,sp
    a5b8:	|  |      move.l d1,-(sp)
    a5ba:	|  |      move.l d0,-(sp)
    a5bc:	|  |      move.l 100(sp),-(sp)
    a5c0:	|  |      move.l 100(sp),-(sp)
    a5c4:	|  |      jsr 18804 <__divdf3>
    a5ca:	|  |      lea 16(sp),sp
    a5ce:	|  |      move.l d0,24(sp)
    a5d2:	|  |      move.l d1,28(sp)
    a5d6:	|  |      move.l 24(sp),88(sp)
    a5dc:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    a5e2:	|  |      clr.l -(sp)
    a5e4:	|  |      clr.l -(sp)
    a5e6:	|  |      move.l 100(sp),-(sp)
    a5ea:	|  |      move.l 100(sp),-(sp)
    a5ee:	|  |      jsr 18ace <__gtdf2>
    a5f4:	|  |      lea 16(sp),sp
    a5f8:	|  |      tst.l d0
    a5fa:	|  |  ,-- ble.w a6d2 <doBorderStuff+0x358>
    a5fe:	|  |  |   clr.l -(sp)
    a600:	|  |  |   move.l #1072693248,-(sp)
    a606:	|  |  |   move.l 100(sp),-(sp)
    a60a:	|  |  |   move.l 100(sp),-(sp)
    a60e:	|  |  |   jsr 18b88 <__ltdf2>
    a614:	|  |  |   lea 16(sp),sp
    a618:	|  |  |   tst.l d0
    a61a:	|  |  +-- bge.w a6d2 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    a61e:	|  |  |   move.l 124(sp),-(sp)
    a622:	|  |  |   jsr 18970 <__floatsidf>
    a628:	|  |  |   addq.l #4,sp
    a62a:	|  |  |   move.l d0,d2
    a62c:	|  |  |   move.l d1,d3
    a62e:	|  |  |   move.l 100(sp),-(sp)
    a632:	|  |  |   jsr 18970 <__floatsidf>
    a638:	|  |  |   addq.l #4,sp
    a63a:	|  |  |   move.l 92(sp),-(sp)
    a63e:	|  |  |   move.l 92(sp),-(sp)
    a642:	|  |  |   move.l d1,-(sp)
    a644:	|  |  |   move.l d0,-(sp)
    a646:	|  |  |   jsr 18a00 <__muldf3>
    a64c:	|  |  |   lea 16(sp),sp
    a650:	|  |  |   move.l d1,-(sp)
    a652:	|  |  |   move.l d0,-(sp)
    a654:	|  |  |   move.l d3,-(sp)
    a656:	|  |  |   move.l d2,-(sp)
    a658:	|  |  |   jsr 187a2 <__adddf3>
    a65e:	|  |  |   lea 16(sp),sp
    a662:	|  |  |   move.l d1,-(sp)
    a664:	|  |  |   move.l d0,-(sp)
    a666:	|  |  |   jsr 18912 <__fixdfsi>
    a66c:	|  |  |   addq.l #8,sp
    a66e:	|  |  |   movea.l 152(sp),a0
    a672:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    a676:	|  |  |   move.l 120(sp),-(sp)
    a67a:	|  |  |   jsr 18970 <__floatsidf>
    a680:	|  |  |   addq.l #4,sp
    a682:	|  |  |   move.l d0,d2
    a684:	|  |  |   move.l d1,d3
    a686:	|  |  |   move.l 96(sp),-(sp)
    a68a:	|  |  |   jsr 18970 <__floatsidf>
    a690:	|  |  |   addq.l #4,sp
    a692:	|  |  |   move.l 92(sp),-(sp)
    a696:	|  |  |   move.l 92(sp),-(sp)
    a69a:	|  |  |   move.l d1,-(sp)
    a69c:	|  |  |   move.l d0,-(sp)
    a69e:	|  |  |   jsr 18a00 <__muldf3>
    a6a4:	|  |  |   lea 16(sp),sp
    a6a8:	|  |  |   move.l d1,-(sp)
    a6aa:	|  |  |   move.l d0,-(sp)
    a6ac:	|  |  |   move.l d3,-(sp)
    a6ae:	|  |  |   move.l d2,-(sp)
    a6b0:	|  |  |   jsr 187a2 <__adddf3>
    a6b6:	|  |  |   lea 16(sp),sp
    a6ba:	|  |  |   move.l d1,-(sp)
    a6bc:	|  |  |   move.l d0,-(sp)
    a6be:	|  |  |   jsr 18912 <__fixdfsi>
    a6c4:	|  |  |   addq.l #8,sp
    a6c6:	|  |  |   movea.l 152(sp),a0
    a6ca:	|  |  |   move.l d0,52(a0)
    a6ce:	|  +--|-- bra.w a92a <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    a6d2:	|  |  '-> move.l 140(sp),d0
    a6d6:	|  |      sub.l 124(sp),d0
    a6da:	|  |      move.l d0,84(sp)
    a6de:	|  |      move.l 140(sp),d0
    a6e2:	|  |      sub.l 116(sp),d0
    a6e6:	|  |      move.l d0,80(sp)
    a6ea:	|  |      move.l 132(sp),d0
    a6ee:	|  |      sub.l 124(sp),d0
    a6f2:	|  |      move.l d0,76(sp)
    a6f6:	|  |      move.l 132(sp),d0
    a6fa:	|  |      sub.l 116(sp),d0
    a6fe:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    a702:	|  |      move.l 136(sp),d0
    a706:	|  |      sub.l 120(sp),d0
    a70a:	|  |      move.l d0,68(sp)
    a70e:	|  |      move.l 136(sp),d0
    a712:	|  |      sub.l 112(sp),d0
    a716:	|  |      move.l d0,64(sp)
    a71a:	|  |      move.l 128(sp),d0
    a71e:	|  |      sub.l 120(sp),d0
    a722:	|  |      move.l d0,60(sp)
    a726:	|  |      move.l 128(sp),d0
    a72a:	|  |      sub.l 112(sp),d0
    a72e:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    a732:	|  |      move.l 84(sp),-(sp)
    a736:	|  |      move.l 88(sp),-(sp)
    a73a:	|  |      jsr 18f0a <__mulsi3>
    a740:	|  |      addq.l #8,sp
    a742:	|  |      move.l d0,84(sp)
    a746:	|  |      move.l 80(sp),-(sp)
    a74a:	|  |      move.l 84(sp),-(sp)
    a74e:	|  |      jsr 18f0a <__mulsi3>
    a754:	|  |      addq.l #8,sp
    a756:	|  |      move.l d0,80(sp)
    a75a:	|  |      move.l 76(sp),-(sp)
    a75e:	|  |      move.l 80(sp),-(sp)
    a762:	|  |      jsr 18f0a <__mulsi3>
    a768:	|  |      addq.l #8,sp
    a76a:	|  |      move.l d0,76(sp)
    a76e:	|  |      move.l 72(sp),-(sp)
    a772:	|  |      move.l 76(sp),-(sp)
    a776:	|  |      jsr 18f0a <__mulsi3>
    a77c:	|  |      addq.l #8,sp
    a77e:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    a782:	|  |      move.l 68(sp),-(sp)
    a786:	|  |      move.l 72(sp),-(sp)
    a78a:	|  |      jsr 18f0a <__mulsi3>
    a790:	|  |      addq.l #8,sp
    a792:	|  |      move.l d0,68(sp)
    a796:	|  |      move.l 64(sp),-(sp)
    a79a:	|  |      move.l 68(sp),-(sp)
    a79e:	|  |      jsr 18f0a <__mulsi3>
    a7a4:	|  |      addq.l #8,sp
    a7a6:	|  |      move.l d0,64(sp)
    a7aa:	|  |      move.l 60(sp),-(sp)
    a7ae:	|  |      move.l 64(sp),-(sp)
    a7b2:	|  |      jsr 18f0a <__mulsi3>
    a7b8:	|  |      addq.l #8,sp
    a7ba:	|  |      move.l d0,60(sp)
    a7be:	|  |      move.l 56(sp),-(sp)
    a7c2:	|  |      move.l 60(sp),-(sp)
    a7c6:	|  |      jsr 18f0a <__mulsi3>
    a7cc:	|  |      addq.l #8,sp
    a7ce:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a7d2:	|  |      move.l 84(sp),-(sp)
    a7d6:	|  |      jsr 18970 <__floatsidf>
    a7dc:	|  |      addq.l #4,sp
    a7de:	|  |      move.l d0,d2
    a7e0:	|  |      move.l d1,d3
    a7e2:	|  |      move.l 68(sp),-(sp)
    a7e6:	|  |      jsr 18970 <__floatsidf>
    a7ec:	|  |      addq.l #4,sp
    a7ee:	|  |      move.l d1,-(sp)
    a7f0:	|  |      move.l d0,-(sp)
    a7f2:	|  |      move.l d3,-(sp)
    a7f4:	|  |      move.l d2,-(sp)
    a7f6:	|  |      jsr 187a2 <__adddf3>
    a7fc:	|  |      lea 16(sp),sp
    a800:	|  |      move.l d1,-(sp)
    a802:	|  |      move.l d0,-(sp)
    a804:	|  |      jsr 18ec0 <sqrt>
    a80a:	|  |      addq.l #8,sp
    a80c:	|  |      move.l d0,d2
    a80e:	|  |      move.l d1,d3
    a810:	|  |      move.l 76(sp),-(sp)
    a814:	|  |      jsr 18970 <__floatsidf>
    a81a:	|  |      addq.l #4,sp
    a81c:	|  |      move.l d0,d4
    a81e:	|  |      move.l d1,d5
    a820:	|  |      move.l 60(sp),-(sp)
    a824:	|  |      jsr 18970 <__floatsidf>
    a82a:	|  |      addq.l #4,sp
    a82c:	|  |      move.l d1,-(sp)
    a82e:	|  |      move.l d0,-(sp)
    a830:	|  |      move.l d5,-(sp)
    a832:	|  |      move.l d4,-(sp)
    a834:	|  |      jsr 187a2 <__adddf3>
    a83a:	|  |      lea 16(sp),sp
    a83e:	|  |      move.l d1,-(sp)
    a840:	|  |      move.l d0,-(sp)
    a842:	|  |      jsr 18ec0 <sqrt>
    a848:	|  |      addq.l #8,sp
    a84a:	|  |      move.l d1,-(sp)
    a84c:	|  |      move.l d0,-(sp)
    a84e:	|  |      move.l d3,-(sp)
    a850:	|  |      move.l d2,-(sp)
    a852:	|  |      jsr 187a2 <__adddf3>
    a858:	|  |      lea 16(sp),sp
    a85c:	|  |      move.l d0,d2
    a85e:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    a860:	|  |      move.l 80(sp),-(sp)
    a864:	|  |      jsr 18970 <__floatsidf>
    a86a:	|  |      addq.l #4,sp
    a86c:	|  |      move.l d0,d4
    a86e:	|  |      move.l d1,d5
    a870:	|  |      move.l 64(sp),-(sp)
    a874:	|  |      jsr 18970 <__floatsidf>
    a87a:	|  |      addq.l #4,sp
    a87c:	|  |      move.l d1,-(sp)
    a87e:	|  |      move.l d0,-(sp)
    a880:	|  |      move.l d5,-(sp)
    a882:	|  |      move.l d4,-(sp)
    a884:	|  |      jsr 187a2 <__adddf3>
    a88a:	|  |      lea 16(sp),sp
    a88e:	|  |      move.l d1,-(sp)
    a890:	|  |      move.l d0,-(sp)
    a892:	|  |      jsr 18ec0 <sqrt>
    a898:	|  |      addq.l #8,sp
    a89a:	|  |      move.l d0,d4
    a89c:	|  |      move.l d1,d5
    a89e:	|  |      move.l 72(sp),-(sp)
    a8a2:	|  |      jsr 18970 <__floatsidf>
    a8a8:	|  |      addq.l #4,sp
    a8aa:	|  |      move.l d0,d6
    a8ac:	|  |      move.l d1,d7
    a8ae:	|  |      move.l 56(sp),-(sp)
    a8b2:	|  |      jsr 18970 <__floatsidf>
    a8b8:	|  |      addq.l #4,sp
    a8ba:	|  |      move.l d1,-(sp)
    a8bc:	|  |      move.l d0,-(sp)
    a8be:	|  |      move.l d7,-(sp)
    a8c0:	|  |      move.l d6,-(sp)
    a8c2:	|  |      jsr 187a2 <__adddf3>
    a8c8:	|  |      lea 16(sp),sp
    a8cc:	|  |      move.l d1,-(sp)
    a8ce:	|  |      move.l d0,-(sp)
    a8d0:	|  |      jsr 18ec0 <sqrt>
    a8d6:	|  |      addq.l #8,sp
    a8d8:	|  |      move.l d1,-(sp)
    a8da:	|  |      move.l d0,-(sp)
    a8dc:	|  |      move.l d5,-(sp)
    a8de:	|  |      move.l d4,-(sp)
    a8e0:	|  |      jsr 187a2 <__adddf3>
    a8e6:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a8ea:	|  |      move.l d1,-(sp)
    a8ec:	|  |      move.l d0,-(sp)
    a8ee:	|  |      move.l d3,-(sp)
    a8f0:	|  |      move.l d2,-(sp)
    a8f2:	|  |      jsr 18b88 <__ltdf2>
    a8f8:	|  |      lea 16(sp),sp
    a8fc:	|  |      tst.l d0
    a8fe:	|  |  ,-- bge.s a916 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a900:	|  |  |   movea.l 152(sp),a0
    a904:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a90a:	|  |  |   movea.l 152(sp),a0
    a90e:	|  |  |   move.l 120(sp),52(a0)
    a914:	|  +--|-- bra.s a92a <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a916:	|  |  '-> movea.l 152(sp),a0
    a91a:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a920:	|  |      movea.l 152(sp),a0
    a924:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a92a:	|  '----> movea.l 152(sp),a0
    a92e:	|         move.l 52(a0),d0
    a932:	|         move.l d0,-(sp)
    a934:	|         jsr 189b0 <__floatsisf>
    a93a:	|         addq.l #4,sp
    a93c:	|         move.l d0,d1
    a93e:	|         movea.l 152(sp),a0
    a942:	|         move.l 4(a0),d0
    a946:	|         move.l d0,-(sp)
    a948:	|         move.l d1,-(sp)
    a94a:	|         jsr 18ca4 <__subsf3>
    a950:	|         addq.l #8,sp
    a952:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a956:	|         movea.l 152(sp),a0
    a95a:	|         move.l (a0),d2
    a95c:	|         movea.l 152(sp),a0
    a960:	|         move.l 48(a0),d0
    a964:	|         move.l d0,-(sp)
    a966:	|         jsr 189b0 <__floatsisf>
    a96c:	|         addq.l #4,sp
    a96e:	|         move.l d0,-(sp)
    a970:	|         move.l d2,-(sp)
    a972:	|         jsr 18ca4 <__subsf3>
    a978:	|         addq.l #8,sp
    a97a:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a97e:	|         clr.l -(sp)
    a980:	|         move.l 52(sp),-(sp)
    a984:	|         jsr 18c0c <__nesf2>
    a98a:	|         addq.l #8,sp
    a98c:	|         tst.l d0
    a98e:	|     ,-- bne.s a9a2 <doBorderStuff+0x628>
    a990:	|     |   clr.l -(sp)
    a992:	|     |   move.l 56(sp),-(sp)
    a996:	|     |   jsr 18c0c <__nesf2>
    a99c:	|     |   addq.l #8,sp
    a99e:	|     |   tst.l d0
    a9a0:	|  ,--|-- beq.s aa18 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a9a2:	|  |  '-> move.l 52(sp),d0
    a9a6:	|  |      move.l d0,-(sp)
    a9a8:	|  |      move.l d0,-(sp)
    a9aa:	|  |      jsr 1876c <__addsf3>
    a9b0:	|  |      addq.l #8,sp
    a9b2:	|  |      move.l d0,-(sp)
    a9b4:	|  |      move.l 52(sp),-(sp)
    a9b8:	|  |      jsr 18d10 <atan2f>
    a9be:	|  |      addq.l #8,sp
    a9c0:	|  |      move.l d0,-(sp)
    a9c2:	|  |      jsr 188d2 <__extendsfdf2>
    a9c8:	|  |      addq.l #4,sp
    a9ca:	|  |      move.l #-1540411785,-(sp)
    a9d0:	|  |      move.l #1078765033,-(sp)
    a9d6:	|  |      move.l d1,-(sp)
    a9d8:	|  |      move.l d0,-(sp)
    a9da:	|  |      jsr 18a00 <__muldf3>
    a9e0:	|  |      lea 16(sp),sp
    a9e4:	|  |      clr.l -(sp)
    a9e6:	|  |      move.l #1080459264,-(sp)
    a9ec:	|  |      move.l d1,-(sp)
    a9ee:	|  |      move.l d0,-(sp)
    a9f0:	|  |      jsr 187a2 <__adddf3>
    a9f6:	|  |      lea 16(sp),sp
    a9fa:	|  |      move.l d1,-(sp)
    a9fc:	|  |      move.l d0,-(sp)
    a9fe:	|  |      jsr 18912 <__fixdfsi>
    aa04:	|  |      addq.l #8,sp
    aa06:	|  |      movea.l 152(sp),a0
    aa0a:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    aa0e:	|  |      movea.l 152(sp),a0
    aa12:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    aa18:	|  '----> pea 1 <_start+0x1>
    aa1c:	|         move.l 156(sp),-(sp)
    aa20:	|         jsr 46ee <setFrames>
    aa26:	|         addq.l #8,sp
    return TRUE;
    aa28:	|         moveq #1,d0
}
    aa2a:	'-------> movem.l (sp)+,d2-d7
    aa2e:	          lea 124(sp),sp
    aa32:	          rts

0000aa34 <drawPeople>:

void drawPeople () {
    aa34:	                   lea -24(sp),sp
    aa38:	                   move.l d2,-(sp)

	shufflePeople ();
    aa3a:	                   jsr c532 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    aa40:	                   move.l 1e924 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    aa48:	                   clr.l 20(sp)
	overRegion = NULL;
    aa4c:	                   clr.l 1e9d4 <overRegion>

	while (thisPerson) {
    aa52:	   ,-------------- bra.w b004 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    aa56:	,--|-------------> movea.l 24(sp),a0
    aa5a:	|  |               move.w 104(a0),d0
    aa5e:	|  |  ,----------- beq.w adb8 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    aa62:	|  |  |            movea.l 24(sp),a0
    aa66:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    aa6c:	|  |  |            movea.l 24(sp),a0
    aa70:	|  |  |            move.l 76(a0),d0
    aa74:	|  |  |            cmp.l 20(sp),d0
    aa78:	|  |  |  ,-------- beq.w ac46 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    aa7c:	|  |  |  |         movea.l 24(sp),a0
    aa80:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    aa84:	|  |  |  |         movea.l 24(sp),a0
    aa88:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    aa8e:	|  |  |  |         movea.l 24(sp),a0
    aa92:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    aa96:	|  |  |  |         movea.l 20(sp),a0
    aa9a:	|  |  |  |         movea.l 4(a0),a0
    aa9e:	|  |  |  |         move.l 4(a0),d0
    aaa2:	|  |  |  |         movea.l 24(sp),a0
    aaa6:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    aaaa:	|  |  |  |         movea.l 20(sp),a0
    aaae:	|  |  |  |         movea.l 4(a0),a1
    aab2:	|  |  |  |         movea.l 24(sp),a0
    aab6:	|  |  |  |         move.l 84(a0),d0
    aaba:	|  |  |  |         move.l d0,d1
    aabc:	|  |  |  |         move.l d1,d0
    aabe:	|  |  |  |         add.l d0,d0
    aac0:	|  |  |  |         add.l d1,d0
    aac2:	|  |  |  |         add.l d0,d0
    aac4:	|  |  |  |         add.l d0,d0
    aac6:	|  |  |  |         lea (0,a1,d0.l),a0
    aaca:	|  |  |  |         move.l 8(a0),d0
    aace:	|  |  |  |     ,-- ble.w ab70 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    aad2:	|  |  |  |     |   movea.l 20(sp),a0
    aad6:	|  |  |  |     |   movea.l 4(a0),a1
    aada:	|  |  |  |     |   movea.l 24(sp),a0
    aade:	|  |  |  |     |   move.l 84(a0),d0
    aae2:	|  |  |  |     |   move.l d0,d1
    aae4:	|  |  |  |     |   move.l d1,d0
    aae6:	|  |  |  |     |   add.l d0,d0
    aae8:	|  |  |  |     |   add.l d1,d0
    aaea:	|  |  |  |     |   add.l d0,d0
    aaec:	|  |  |  |     |   add.l d0,d0
    aaee:	|  |  |  |     |   lea (0,a1,d0.l),a0
    aaf2:	|  |  |  |     |   move.l 8(a0),d0
    aaf6:	|  |  |  |     |   clr.l -(sp)
    aaf8:	|  |  |  |     |   move.l d0,-(sp)
    aafa:	|  |  |  |     |   jsr dc46 <startSound>
    ab00:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    ab02:	|  |  |  |     |   movea.l 24(sp),a0
    ab06:	|  |  |  |     |   move.l 84(a0),d0
    ab0a:	|  |  |  |     |   addq.l #1,d0
    ab0c:	|  |  |  |     |   movea.l 24(sp),a0
    ab10:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    ab14:	|  |  |  |     |   movea.l 24(sp),a0
    ab18:	|  |  |  |     |   move.l 84(a0),d0
    ab1c:	|  |  |  |     |   movea.l 24(sp),a0
    ab20:	|  |  |  |     |   movea.l 72(a0),a0
    ab24:	|  |  |  |     |   move.l 8(a0),d1
    ab28:	|  |  |  |     |   move.l d1,-(sp)
    ab2a:	|  |  |  |     |   move.l d0,-(sp)
    ab2c:	|  |  |  |     |   jsr 18fb6 <__modsi3>
    ab32:	|  |  |  |     |   addq.l #8,sp
    ab34:	|  |  |  |     |   movea.l 24(sp),a0
    ab38:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    ab3c:	|  |  |  |     |   movea.l 24(sp),a0
    ab40:	|  |  |  |     |   movea.l 72(a0),a0
    ab44:	|  |  |  |     |   movea.l 4(a0),a1
    ab48:	|  |  |  |     |   movea.l 24(sp),a0
    ab4c:	|  |  |  |     |   move.l 84(a0),d0
    ab50:	|  |  |  |     |   move.l d0,d1
    ab52:	|  |  |  |     |   move.l d1,d0
    ab54:	|  |  |  |     |   add.l d0,d0
    ab56:	|  |  |  |     |   add.l d1,d0
    ab58:	|  |  |  |     |   add.l d0,d0
    ab5a:	|  |  |  |     |   add.l d0,d0
    ab5c:	|  |  |  |     |   lea (0,a1,d0.l),a0
    ab60:	|  |  |  |     |   move.l 4(a0),d0
    ab64:	|  |  |  |     |   movea.l 24(sp),a0
    ab68:	|  |  |  |     |   move.l d0,88(a0)
    ab6c:	|  |  |  |  ,--|-- bra.w acae <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    ab70:	|  |  |  |  |  '-> movea.l 20(sp),a0
    ab74:	|  |  |  |  |      movea.l 4(a0),a1
    ab78:	|  |  |  |  |      movea.l 24(sp),a0
    ab7c:	|  |  |  |  |      move.l 84(a0),d0
    ab80:	|  |  |  |  |      move.l d0,d1
    ab82:	|  |  |  |  |      move.l d1,d0
    ab84:	|  |  |  |  |      add.l d0,d0
    ab86:	|  |  |  |  |      add.l d1,d0
    ab88:	|  |  |  |  |      add.l d0,d0
    ab8a:	|  |  |  |  |      add.l d0,d0
    ab8c:	|  |  |  |  |      lea (0,a1,d0.l),a0
    ab90:	|  |  |  |  |      move.l 8(a0),d0
    ab94:	|  |  |  |  +----- beq.w acae <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    ab98:	|  |  |  |  |      movea.l 1e88e <noStack>,a1
    ab9e:	|  |  |  |  |      movea.l 20(sp),a0
    aba2:	|  |  |  |  |      move.l 4(a0),d2
    aba6:	|  |  |  |  |      movea.l 24(sp),a0
    abaa:	|  |  |  |  |      move.l 84(a0),d0
    abae:	|  |  |  |  |      move.l d0,d1
    abb0:	|  |  |  |  |      move.l d1,d0
    abb2:	|  |  |  |  |      add.l d0,d0
    abb4:	|  |  |  |  |      add.l d1,d0
    abb6:	|  |  |  |  |      add.l d0,d0
    abb8:	|  |  |  |  |      add.l d0,d0
    abba:	|  |  |  |  |      movea.l d2,a0
    abbc:	|  |  |  |  |      adda.l d0,a0
    abbe:	|  |  |  |  |      move.l 8(a0),d0
    abc2:	|  |  |  |  |      neg.l d0
    abc4:	|  |  |  |  |      pea 1 <_start+0x1>
    abc8:	|  |  |  |  |      move.l a1,-(sp)
    abca:	|  |  |  |  |      clr.l -(sp)
    abcc:	|  |  |  |  |      clr.l -(sp)
    abce:	|  |  |  |  |      move.l d0,-(sp)
    abd0:	|  |  |  |  |      jsr 7d42 <startNewFunctionNum>
    abd6:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    abda:	|  |  |  |  |      movea.l 24(sp),a0
    abde:	|  |  |  |  |      move.l 84(a0),d0
    abe2:	|  |  |  |  |      addq.l #1,d0
    abe4:	|  |  |  |  |      movea.l 24(sp),a0
    abe8:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    abec:	|  |  |  |  |      movea.l 24(sp),a0
    abf0:	|  |  |  |  |      move.l 84(a0),d0
    abf4:	|  |  |  |  |      movea.l 24(sp),a0
    abf8:	|  |  |  |  |      movea.l 72(a0),a0
    abfc:	|  |  |  |  |      move.l 8(a0),d1
    ac00:	|  |  |  |  |      move.l d1,-(sp)
    ac02:	|  |  |  |  |      move.l d0,-(sp)
    ac04:	|  |  |  |  |      jsr 18fb6 <__modsi3>
    ac0a:	|  |  |  |  |      addq.l #8,sp
    ac0c:	|  |  |  |  |      movea.l 24(sp),a0
    ac10:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    ac14:	|  |  |  |  |      movea.l 24(sp),a0
    ac18:	|  |  |  |  |      movea.l 72(a0),a0
    ac1c:	|  |  |  |  |      movea.l 4(a0),a1
    ac20:	|  |  |  |  |      movea.l 24(sp),a0
    ac24:	|  |  |  |  |      move.l 84(a0),d0
    ac28:	|  |  |  |  |      move.l d0,d1
    ac2a:	|  |  |  |  |      move.l d1,d0
    ac2c:	|  |  |  |  |      add.l d0,d0
    ac2e:	|  |  |  |  |      add.l d1,d0
    ac30:	|  |  |  |  |      add.l d0,d0
    ac32:	|  |  |  |  |      add.l d0,d0
    ac34:	|  |  |  |  |      lea (0,a1,d0.l),a0
    ac38:	|  |  |  |  |      move.l 4(a0),d0
    ac3c:	|  |  |  |  |      movea.l 24(sp),a0
    ac40:	|  |  |  |  |      move.l d0,88(a0)
    ac44:	|  |  |  |  +----- bra.s acae <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    ac46:	|  |  |  '--|----> movea.l 24(sp),a0
    ac4a:	|  |  |     |      move.l (a0),d0
    ac4c:	|  |  |     |      movea.l 24(sp),a0
    ac50:	|  |  |     |      move.l 8(a0),d1
    ac54:	|  |  |     |      move.l d1,-(sp)
    ac56:	|  |  |     |      move.l d0,-(sp)
    ac58:	|  |  |     |      jsr 1889c <__eqsf2>
    ac5e:	|  |  |     |      addq.l #8,sp
    ac60:	|  |  |     |      tst.l d0
    ac62:	|  |  |     |  ,-- bne.s aca6 <drawPeople+0x272>
    ac64:	|  |  |     |  |   movea.l 24(sp),a0
    ac68:	|  |  |     |  |   move.l 4(a0),d0
    ac6c:	|  |  |     |  |   movea.l 24(sp),a0
    ac70:	|  |  |     |  |   move.l 12(a0),d1
    ac74:	|  |  |     |  |   move.l d1,-(sp)
    ac76:	|  |  |     |  |   move.l d0,-(sp)
    ac78:	|  |  |     |  |   jsr 1889c <__eqsf2>
    ac7e:	|  |  |     |  |   addq.l #8,sp
    ac80:	|  |  |     |  |   tst.l d0
    ac82:	|  |  |     |  +-- bne.s aca6 <drawPeople+0x272>
    ac84:	|  |  |     |  |   movea.l 20(sp),a0
    ac88:	|  |  |     |  |   move.l 8(a0),d0
    ac8c:	|  |  |     |  |   moveq #1,d1
    ac8e:	|  |  |     |  |   cmp.l d0,d1
    ac90:	|  |  |     |  +-- bne.s aca6 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    ac92:	|  |  |     |  |   movea.l 24(sp),a0
    ac96:	|  |  |     |  |   move.l 16(a0),d0
    ac9a:	|  |  |     |  |   addq.l #1,d0
    ac9c:	|  |  |     |  |   movea.l 24(sp),a0
    aca0:	|  |  |     |  |   move.l d0,16(a0)
    aca4:	|  |  |     +--|-- bra.s acae <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    aca6:	|  |  |     |  '-> movea.l 24(sp),a0
    acaa:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    acae:	|  |  |     '----> movea.l 24(sp),a0
    acb2:	|  |  |            move.l (a0),d0
    acb4:	|  |  |            movea.l 24(sp),a0
    acb8:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    acbc:	|  |  |            movea.l 24(sp),a0
    acc0:	|  |  |            move.l 4(a0),d0
    acc4:	|  |  |            movea.l 24(sp),a0
    acc8:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    accc:	|  |  |            movea.l 20(sp),a0
    acd0:	|  |  |            movea.l 4(a0),a1
    acd4:	|  |  |            movea.l 24(sp),a0
    acd8:	|  |  |            move.l 84(a0),d0
    acdc:	|  |  |            move.l d0,d1
    acde:	|  |  |            move.l d1,d0
    ace0:	|  |  |            add.l d0,d0
    ace2:	|  |  |            add.l d1,d0
    ace4:	|  |  |            add.l d0,d0
    ace6:	|  |  |            add.l d0,d0
    ace8:	|  |  |            lea (0,a1,d0.l),a0
    acec:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    acf0:	|  |  |            move.l 8(sp),d0
    acf4:	|  |  |            add.l d0,d0
    acf6:	|  |  |            subx.l d0,d0
    acf8:	|  |  |            neg.l d0
    acfa:	|  |  |            move.b d0,d0
    acfc:	|  |  |            move.b d0,d0
    acfe:	|  |  |            andi.l #255,d0
    ad04:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    ad08:	|  |  |            move.l 8(sp),-(sp)
    ad0c:	|  |  |            jsr 9c08 <TF_abs>
    ad12:	|  |  |            addq.l #4,sp
    ad14:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    ad18:	|  |  |            movea.l 20(sp),a0
    ad1c:	|  |  |            movea.l (a0),a0
    ad1e:	|  |  |            move.l 8(a0),d0
    ad22:	|  |  |            cmp.l 12(sp),d0
    ad26:	|  |  |        ,-- bgt.s ad36 <drawPeople+0x302>
				fNum = 0;
    ad28:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    ad2c:	|  |  |        |   moveq #2,d0
    ad2e:	|  |  |        |   sub.l 16(sp),d0
    ad32:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    ad36:	|  |  |        '-> moveq #2,d1
    ad38:	|  |  |            cmp.l 16(sp),d1
    ad3c:	|  |  +----------- beq.s adb8 <drawPeople+0x384>
				BOOL r = FALSE;
    ad3e:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    ad42:	|  |  |            move.l 16(sp),d0
    ad46:	|  |  |            movea.w d0,a0
    ad48:	|  |  |            movea.l 20(sp),a1
    ad4c:	|  |  |            movea.l (a1),a1
    ad4e:	|  |  |            movea.l 16(a1),a1
    ad52:	|  |  |            move.l 12(sp),d1
    ad56:	|  |  |            move.l d1,d0
    ad58:	|  |  |            lsl.l #3,d0
    ad5a:	|  |  |            sub.l d1,d0
    ad5c:	|  |  |            add.l d0,d0
    ad5e:	|  |  |            add.l d0,d0
    ad60:	|  |  |            add.l a1,d0
    ad62:	|  |  |            move.l a0,-(sp)
    ad64:	|  |  |            move.l 28(sp),-(sp)
    ad68:	|  |  |            move.l d0,-(sp)
    ad6a:	|  |  |            jsr 992a <scaleSprite>
    ad70:	|  |  |            lea 12(sp),sp
    ad74:	|  |  |            move.w d0,6(sp)
				if (r) {
    ad78:	|  |  +----------- beq.s adb8 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    ad7a:	|  |  |            movea.l 24(sp),a0
    ad7e:	|  |  |            movea.l 114(a0),a0
    ad82:	|  |  |            movea.l (a0),a0
    ad84:	|  |  |            move.b (a0),d0
    ad86:	|  |  +----------- beq.s adb8 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    ad88:	|  |  |            move.l 1e944 <personRegion+0x1c>,d1
    ad8e:	|  |  |            movea.l 24(sp),a0
    ad92:	|  |  |            move.l 114(a0),d0
    ad96:	|  |  |            cmp.l d1,d0
    ad98:	|  |  |        ,-- beq.s ada0 <drawPeople+0x36c>
    ad9a:	|  |  |        |   clr.l 1e886 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    ada0:	|  |  |        '-> movea.l 24(sp),a0
    ada4:	|  |  |            move.l 114(a0),d0
    ada8:	|  |  |            move.l d0,1e944 <personRegion+0x1c>
						overRegion = & personRegion;
    adae:	|  |  |            move.l #125224,1e9d4 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    adb8:	|  |  '----------> movea.l 24(sp),a0
    adbc:	|  |               move.l 88(a0),d0
    adc0:	|  |               subq.l #1,d0
    adc2:	|  |               movea.l 24(sp),a0
    adc6:	|  |               move.l d0,88(a0)
    adca:	|  |               movea.l 24(sp),a0
    adce:	|  |               move.l 88(a0),d0
    add2:	|  |        ,----- bne.w affa <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    add6:	|  |        |      movea.l 24(sp),a0
    adda:	|  |        |      move.l 84(a0),d0
    adde:	|  |        |      addq.l #1,d0
    ade0:	|  |        |      movea.l 24(sp),a0
    ade4:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    ade8:	|  |        |      movea.l 24(sp),a0
    adec:	|  |        |      move.l 84(a0),d0
    adf0:	|  |        |      movea.l 24(sp),a0
    adf4:	|  |        |      movea.l 72(a0),a0
    adf8:	|  |        |      move.l 8(a0),d1
    adfc:	|  |        |      move.l d1,-(sp)
    adfe:	|  |        |      move.l d0,-(sp)
    ae00:	|  |        |      jsr 18fb6 <__modsi3>
    ae06:	|  |        |      addq.l #8,sp
    ae08:	|  |        |      movea.l 24(sp),a0
    ae0c:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    ae10:	|  |        |      movea.l 24(sp),a0
    ae14:	|  |        |      movea.l 72(a0),a0
    ae18:	|  |        |      movea.l 4(a0),a1
    ae1c:	|  |        |      movea.l 24(sp),a0
    ae20:	|  |        |      move.l 84(a0),d0
    ae24:	|  |        |      move.l d0,d1
    ae26:	|  |        |      move.l d1,d0
    ae28:	|  |        |      add.l d0,d0
    ae2a:	|  |        |      add.l d1,d0
    ae2c:	|  |        |      add.l d0,d0
    ae2e:	|  |        |      add.l d0,d0
    ae30:	|  |        |      lea (0,a1,d0.l),a0
    ae34:	|  |        |      move.l 4(a0),d0
    ae38:	|  |        |      movea.l 24(sp),a0
    ae3c:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    ae40:	|  |        |      movea.l 24(sp),a0
    ae44:	|  |        |      move.w 104(a0),d0
    ae48:	|  |        +----- beq.w affa <drawPeople+0x5c6>
    ae4c:	|  |        |      tst.l 20(sp)
    ae50:	|  |        +----- beq.w affa <drawPeople+0x5c6>
    ae54:	|  |        |      movea.l 20(sp),a0
    ae58:	|  |        |      move.l 4(a0),d0
    ae5c:	|  |        +----- beq.w affa <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    ae60:	|  |        |      movea.l 20(sp),a0
    ae64:	|  |        |      movea.l 4(a0),a1
    ae68:	|  |        |      movea.l 24(sp),a0
    ae6c:	|  |        |      move.l 84(a0),d0
    ae70:	|  |        |      move.l d0,d1
    ae72:	|  |        |      move.l d1,d0
    ae74:	|  |        |      add.l d0,d0
    ae76:	|  |        |      add.l d1,d0
    ae78:	|  |        |      add.l d0,d0
    ae7a:	|  |        |      add.l d0,d0
    ae7c:	|  |        |      lea (0,a1,d0.l),a0
    ae80:	|  |        |      move.l 8(a0),d0
    ae84:	|  |        |  ,-- ble.w af26 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    ae88:	|  |        |  |   movea.l 20(sp),a0
    ae8c:	|  |        |  |   movea.l 4(a0),a1
    ae90:	|  |        |  |   movea.l 24(sp),a0
    ae94:	|  |        |  |   move.l 84(a0),d0
    ae98:	|  |        |  |   move.l d0,d1
    ae9a:	|  |        |  |   move.l d1,d0
    ae9c:	|  |        |  |   add.l d0,d0
    ae9e:	|  |        |  |   add.l d1,d0
    aea0:	|  |        |  |   add.l d0,d0
    aea2:	|  |        |  |   add.l d0,d0
    aea4:	|  |        |  |   lea (0,a1,d0.l),a0
    aea8:	|  |        |  |   move.l 8(a0),d0
    aeac:	|  |        |  |   clr.l -(sp)
    aeae:	|  |        |  |   move.l d0,-(sp)
    aeb0:	|  |        |  |   jsr dc46 <startSound>
    aeb6:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    aeb8:	|  |        |  |   movea.l 24(sp),a0
    aebc:	|  |        |  |   move.l 84(a0),d0
    aec0:	|  |        |  |   addq.l #1,d0
    aec2:	|  |        |  |   movea.l 24(sp),a0
    aec6:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    aeca:	|  |        |  |   movea.l 24(sp),a0
    aece:	|  |        |  |   move.l 84(a0),d0
    aed2:	|  |        |  |   movea.l 24(sp),a0
    aed6:	|  |        |  |   movea.l 72(a0),a0
    aeda:	|  |        |  |   move.l 8(a0),d1
    aede:	|  |        |  |   move.l d1,-(sp)
    aee0:	|  |        |  |   move.l d0,-(sp)
    aee2:	|  |        |  |   jsr 18fb6 <__modsi3>
    aee8:	|  |        |  |   addq.l #8,sp
    aeea:	|  |        |  |   movea.l 24(sp),a0
    aeee:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    aef2:	|  |        |  |   movea.l 24(sp),a0
    aef6:	|  |        |  |   movea.l 72(a0),a0
    aefa:	|  |        |  |   movea.l 4(a0),a1
    aefe:	|  |        |  |   movea.l 24(sp),a0
    af02:	|  |        |  |   move.l 84(a0),d0
    af06:	|  |        |  |   move.l d0,d1
    af08:	|  |        |  |   move.l d1,d0
    af0a:	|  |        |  |   add.l d0,d0
    af0c:	|  |        |  |   add.l d1,d0
    af0e:	|  |        |  |   add.l d0,d0
    af10:	|  |        |  |   add.l d0,d0
    af12:	|  |        |  |   lea (0,a1,d0.l),a0
    af16:	|  |        |  |   move.l 4(a0),d0
    af1a:	|  |        |  |   movea.l 24(sp),a0
    af1e:	|  |        |  |   move.l d0,88(a0)
    af22:	|  |        +--|-- bra.w affa <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    af26:	|  |        |  '-> movea.l 20(sp),a0
    af2a:	|  |        |      movea.l 4(a0),a1
    af2e:	|  |        |      movea.l 24(sp),a0
    af32:	|  |        |      move.l 84(a0),d0
    af36:	|  |        |      move.l d0,d1
    af38:	|  |        |      move.l d1,d0
    af3a:	|  |        |      add.l d0,d0
    af3c:	|  |        |      add.l d1,d0
    af3e:	|  |        |      add.l d0,d0
    af40:	|  |        |      add.l d0,d0
    af42:	|  |        |      lea (0,a1,d0.l),a0
    af46:	|  |        |      move.l 8(a0),d0
    af4a:	|  |        +----- beq.w affa <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    af4e:	|  |        |      movea.l 1e88e <noStack>,a1
    af54:	|  |        |      movea.l 20(sp),a0
    af58:	|  |        |      move.l 4(a0),d2
    af5c:	|  |        |      movea.l 24(sp),a0
    af60:	|  |        |      move.l 84(a0),d0
    af64:	|  |        |      move.l d0,d1
    af66:	|  |        |      move.l d1,d0
    af68:	|  |        |      add.l d0,d0
    af6a:	|  |        |      add.l d1,d0
    af6c:	|  |        |      add.l d0,d0
    af6e:	|  |        |      add.l d0,d0
    af70:	|  |        |      movea.l d2,a0
    af72:	|  |        |      adda.l d0,a0
    af74:	|  |        |      move.l 8(a0),d0
    af78:	|  |        |      neg.l d0
    af7a:	|  |        |      pea 1 <_start+0x1>
    af7e:	|  |        |      move.l a1,-(sp)
    af80:	|  |        |      clr.l -(sp)
    af82:	|  |        |      clr.l -(sp)
    af84:	|  |        |      move.l d0,-(sp)
    af86:	|  |        |      jsr 7d42 <startNewFunctionNum>
    af8c:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    af90:	|  |        |      movea.l 24(sp),a0
    af94:	|  |        |      move.l 84(a0),d0
    af98:	|  |        |      addq.l #1,d0
    af9a:	|  |        |      movea.l 24(sp),a0
    af9e:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    afa2:	|  |        |      movea.l 24(sp),a0
    afa6:	|  |        |      move.l 84(a0),d0
    afaa:	|  |        |      movea.l 24(sp),a0
    afae:	|  |        |      movea.l 72(a0),a0
    afb2:	|  |        |      move.l 8(a0),d1
    afb6:	|  |        |      move.l d1,-(sp)
    afb8:	|  |        |      move.l d0,-(sp)
    afba:	|  |        |      jsr 18fb6 <__modsi3>
    afc0:	|  |        |      addq.l #8,sp
    afc2:	|  |        |      movea.l 24(sp),a0
    afc6:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    afca:	|  |        |      movea.l 24(sp),a0
    afce:	|  |        |      movea.l 72(a0),a0
    afd2:	|  |        |      movea.l 4(a0),a1
    afd6:	|  |        |      movea.l 24(sp),a0
    afda:	|  |        |      move.l 84(a0),d0
    afde:	|  |        |      move.l d0,d1
    afe0:	|  |        |      move.l d1,d0
    afe2:	|  |        |      add.l d0,d0
    afe4:	|  |        |      add.l d1,d0
    afe6:	|  |        |      add.l d0,d0
    afe8:	|  |        |      add.l d0,d0
    afea:	|  |        |      lea (0,a1,d0.l),a0
    afee:	|  |        |      move.l 4(a0),d0
    aff2:	|  |        |      movea.l 24(sp),a0
    aff6:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    affa:	|  |        '----> movea.l 24(sp),a0
    affe:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    b004:	|  '-------------> tst.l 24(sp)
    b008:	'----------------- bne.w aa56 <drawPeople+0x22>
	}
}
    b00c:	                   nop
    b00e:	                   nop
    b010:	                   move.l (sp)+,d2
    b012:	                   lea 24(sp),sp
    b016:	                   rts

0000b018 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    b018:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    b01a:	          pea 1a5af <PutChar+0x158f>
    b020:	          jsr 1857e <KPrintF>
    b026:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    b028:	          move.l 1e924 <allPeople>,(sp)
	while (thisPerson) {
    b02e:	      ,-- bra.s b046 <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    b030:	,-----|-> movea.l (sp),a0
    b032:	|     |   movea.l 114(a0),a0
    b036:	|     |   move.l 4(a0),d0
    b03a:	|     |   cmp.l 8(sp),d0
    b03e:	|  ,--|-- beq.s b04c <findPerson+0x34>
		thisPerson = thisPerson -> next;
    b040:	|  |  |   movea.l (sp),a0
    b042:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    b046:	|  |  '-> tst.l (sp)
    b048:	'--|----- bne.s b030 <findPerson+0x18>
    b04a:	   |  ,-- bra.s b04e <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    b04c:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    b04e:	      '-> pea 1a5c3 <PutChar+0x15a3>
    b054:	          jsr 1857e <KPrintF>
    b05a:	          addq.l #4,sp
	return thisPerson;
    b05c:	          move.l (sp),d0
}
    b05e:	          addq.l #4,sp
    b060:	          rts

0000b062 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    b062:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    b064:	       move.l 12(sp),-(sp)
    b068:	       jsr b018 <findPerson>
    b06e:	       addq.l #4,sp
    b070:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    b072:	   ,-- bne.s b078 <floatCharacter+0x16>
    b074:	   |   clr.w d0
    b076:	,--|-- bra.s b082 <floatCharacter+0x20>
	moveMe -> floaty = f;
    b078:	|  '-> movea.l (sp),a0
    b07a:	|      move.l 8(sp),24(a0)
	return TRUE;
    b080:	|      moveq #1,d0
}
    b082:	'----> addq.l #4,sp
    b084:	       rts

0000b086 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    b086:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    b088:	          tst.l 8(sp)
    b08c:	      ,-- bne.s b09a <forceWalkingPerson+0x14>
    b08e:	      |   tst.l 12(sp)
    b092:	      +-- bne.s b09a <forceWalkingPerson+0x14>
    b094:	      |   clr.w d0
    b096:	,-----|-- bra.w b12c <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    b09a:	|     '-> move.l 16(sp),-(sp)
    b09e:	|         jsr b018 <findPerson>
    b0a4:	|         addq.l #4,sp
    b0a6:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    b0a8:	|     ,-- bne.s b0ae <forceWalkingPerson+0x28>
    b0aa:	|     |   clr.w d0
    b0ac:	+-----|-- bra.s b12c <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    b0ae:	|     '-> movea.l (sp),a0
    b0b0:	|         move.l 68(a0),d0
    b0b4:	|     ,-- beq.s b0c6 <forceWalkingPerson+0x40>
    b0b6:	|     |   movea.l (sp),a0
    b0b8:	|     |   move.l 68(a0),d0
    b0bc:	|     |   move.l d0,-(sp)
    b0be:	|     |   jsr 55c2 <abortFunction>
    b0c4:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    b0c6:	|     '-> movea.l (sp),a0
    b0c8:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    b0ce:	|         movea.l (sp),a0
    b0d0:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    b0d4:	|         movea.l (sp),a0
    b0d6:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    b0dc:	|         movea.l (sp),a0
    b0de:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    b0e4:	|         movea.l (sp),a0
    b0e6:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    b0ec:	|         movea.l (sp),a0
    b0ee:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    b0f2:	|         movea.l (sp),a0
    b0f4:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    b0f8:	|         move.l (sp),-(sp)
    b0fa:	|         jsr a37a <doBorderStuff>
    b100:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    b102:	|         pea 1 <_start+0x1>
    b106:	|         move.l 4(sp),-(sp)
    b10a:	|         jsr c9c0 <walkMe>
    b110:	|         addq.l #8,sp
    b112:	|         tst.w d0
    b114:	|     ,-- bne.s b11e <forceWalkingPerson+0x98>
    b116:	|     |   movea.l (sp),a0
    b118:	|     |   move.w 66(a0),d0
    b11c:	|  ,--|-- beq.s b12a <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    b11e:	|  |  '-> movea.l (sp),a0
    b120:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    b126:	|  |      moveq #1,d0
    b128:	+--|----- bra.s b12c <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    b12a:	|  '----> clr.w d0
    }
}
    b12c:	'-------> addq.l #4,sp
    b12e:	          rts

0000b130 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    b130:	                lea -56(sp),sp
    b134:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    b136:	                pea 1a5d8 <PutChar+0x15b8>
    b13c:	                jsr 1857e <KPrintF>
    b142:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    b144:	                move.l #320,56(sp)
    b14c:	                move.l #200,52(sp)
    b154:	                moveq #-1,d0
    b156:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    b15a:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    b162:	                clr.l 44(sp)
    b166:	   ,----------- bra.w b33e <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    b16a:	,--|----------> movea.l 1e9dc <currentFloor>,a0
    b170:	|  |            move.l 12(a0),d1
    b174:	|  |            move.l 44(sp),d0
    b178:	|  |            lsl.l #3,d0
    b17a:	|  |            movea.l d1,a0
    b17c:	|  |            adda.l d0,a0
    b17e:	|  |            move.l (a0),d0
    b180:	|  |            move.l d0,d1
    b182:	|  |            subq.l #1,d1
    b184:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    b188:	|  |            clr.l 40(sp)
    b18c:	|  |     ,----- bra.w b31c <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    b190:	|  |  ,--|----> movea.l 1e9dc <currentFloor>,a0
    b196:	|  |  |  |      move.l 4(a0),d1
    b19a:	|  |  |  |      movea.l 1e9dc <currentFloor>,a0
    b1a0:	|  |  |  |      movea.l 12(a0),a0
    b1a4:	|  |  |  |      move.l 44(sp),d0
    b1a8:	|  |  |  |      lsl.l #3,d0
    b1aa:	|  |  |  |      adda.l d0,a0
    b1ac:	|  |  |  |      movea.l 4(a0),a0
    b1b0:	|  |  |  |      move.l 40(sp),d0
    b1b4:	|  |  |  |      add.l d0,d0
    b1b6:	|  |  |  |      add.l d0,d0
    b1b8:	|  |  |  |      adda.l d0,a0
    b1ba:	|  |  |  |      move.l (a0),d0
    b1bc:	|  |  |  |      lsl.l #3,d0
    b1be:	|  |  |  |      movea.l d1,a0
    b1c0:	|  |  |  |      adda.l d0,a0
    b1c2:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    b1c6:	|  |  |  |      movea.l 1e9dc <currentFloor>,a0
    b1cc:	|  |  |  |      move.l 4(a0),d1
    b1d0:	|  |  |  |      movea.l 1e9dc <currentFloor>,a0
    b1d6:	|  |  |  |      movea.l 12(a0),a0
    b1da:	|  |  |  |      move.l 44(sp),d0
    b1de:	|  |  |  |      lsl.l #3,d0
    b1e0:	|  |  |  |      adda.l d0,a0
    b1e2:	|  |  |  |      movea.l 4(a0),a0
    b1e6:	|  |  |  |      move.l 40(sp),d0
    b1ea:	|  |  |  |      add.l d0,d0
    b1ec:	|  |  |  |      add.l d0,d0
    b1ee:	|  |  |  |      adda.l d0,a0
    b1f0:	|  |  |  |      move.l (a0),d0
    b1f2:	|  |  |  |      lsl.l #3,d0
    b1f4:	|  |  |  |      movea.l d1,a0
    b1f6:	|  |  |  |      adda.l d0,a0
    b1f8:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    b1fe:	|  |  |  |      movea.l 1e9dc <currentFloor>,a0
    b204:	|  |  |  |      move.l 4(a0),d1
    b208:	|  |  |  |      movea.l 1e9dc <currentFloor>,a0
    b20e:	|  |  |  |      movea.l 12(a0),a0
    b212:	|  |  |  |      move.l 44(sp),d0
    b216:	|  |  |  |      lsl.l #3,d0
    b218:	|  |  |  |      adda.l d0,a0
    b21a:	|  |  |  |      movea.l 4(a0),a0
    b21e:	|  |  |  |      move.l 36(sp),d0
    b222:	|  |  |  |      add.l d0,d0
    b224:	|  |  |  |      add.l d0,d0
    b226:	|  |  |  |      adda.l d0,a0
    b228:	|  |  |  |      move.l (a0),d0
    b22a:	|  |  |  |      lsl.l #3,d0
    b22c:	|  |  |  |      movea.l d1,a0
    b22e:	|  |  |  |      adda.l d0,a0
    b230:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    b234:	|  |  |  |      movea.l 1e9dc <currentFloor>,a0
    b23a:	|  |  |  |      move.l 4(a0),d1
    b23e:	|  |  |  |      movea.l 1e9dc <currentFloor>,a0
    b244:	|  |  |  |      movea.l 12(a0),a0
    b248:	|  |  |  |      move.l 44(sp),d0
    b24c:	|  |  |  |      lsl.l #3,d0
    b24e:	|  |  |  |      adda.l d0,a0
    b250:	|  |  |  |      movea.l 4(a0),a0
    b254:	|  |  |  |      move.l 36(sp),d0
    b258:	|  |  |  |      add.l d0,d0
    b25a:	|  |  |  |      add.l d0,d0
    b25c:	|  |  |  |      adda.l d0,a0
    b25e:	|  |  |  |      move.l (a0),d0
    b260:	|  |  |  |      lsl.l #3,d0
    b262:	|  |  |  |      movea.l d1,a0
    b264:	|  |  |  |      adda.l d0,a0
    b266:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    b26c:	|  |  |  |      movea.l 68(sp),a0
    b270:	|  |  |  |      move.l (a0),d1
    b272:	|  |  |  |      movea.l 64(sp),a0
    b276:	|  |  |  |      move.l (a0),d0
    b278:	|  |  |  |      move.l d1,-(sp)
    b27a:	|  |  |  |      move.l d0,-(sp)
    b27c:	|  |  |  |      move.l 24(sp),-(sp)
    b280:	|  |  |  |      move.l 32(sp),-(sp)
    b284:	|  |  |  |      move.l 40(sp),-(sp)
    b288:	|  |  |  |      move.l 48(sp),-(sp)
    b28c:	|  |  |  |      lea 28(sp),a0
    b290:	|  |  |  |      move.l a0,-(sp)
    b292:	|  |  |  |      lea 36(sp),a0
    b296:	|  |  |  |      move.l a0,-(sp)
    b298:	|  |  |  |      jsr 1737c <closestPointOnLine>
    b29e:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    b2a2:	|  |  |  |      movea.l 64(sp),a0
    b2a6:	|  |  |  |      move.l (a0),d0
    b2a8:	|  |  |  |      move.l 8(sp),d1
    b2ac:	|  |  |  |      move.l d0,d2
    b2ae:	|  |  |  |      sub.l d1,d2
    b2b0:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    b2b4:	|  |  |  |      movea.l 68(sp),a0
    b2b8:	|  |  |  |      move.l (a0),d0
    b2ba:	|  |  |  |      move.l 4(sp),d1
    b2be:	|  |  |  |      move.l d0,d2
    b2c0:	|  |  |  |      sub.l d1,d2
    b2c2:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    b2c6:	|  |  |  |      move.l 28(sp),-(sp)
    b2ca:	|  |  |  |      move.l 32(sp),-(sp)
    b2ce:	|  |  |  |      jsr 18f0a <__mulsi3>
    b2d4:	|  |  |  |      addq.l #8,sp
    b2d6:	|  |  |  |      move.l d0,d2
    b2d8:	|  |  |  |      move.l 24(sp),-(sp)
    b2dc:	|  |  |  |      move.l 28(sp),-(sp)
    b2e0:	|  |  |  |      jsr 18f0a <__mulsi3>
    b2e6:	|  |  |  |      addq.l #8,sp
    b2e8:	|  |  |  |      move.l d2,d1
    b2ea:	|  |  |  |      add.l d0,d1
    b2ec:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    b2f0:	|  |  |  |      move.l 12(sp),d2
    b2f4:	|  |  |  |      cmp.l 32(sp),d2
    b2f8:	|  |  |  |  ,-- bge.s b312 <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    b2fa:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    b300:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    b306:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    b30c:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    b312:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    b318:	|  |  |  |      addq.l #1,40(sp)
    b31c:	|  |  |  '----> movea.l 1e9dc <currentFloor>,a0
    b322:	|  |  |         move.l 12(a0),d1
    b326:	|  |  |         move.l 44(sp),d0
    b32a:	|  |  |         lsl.l #3,d0
    b32c:	|  |  |         movea.l d1,a0
    b32e:	|  |  |         adda.l d0,a0
    b330:	|  |  |         move.l (a0),d0
    b332:	|  |  |         cmp.l 40(sp),d0
    b336:	|  |  '-------- bgt.w b190 <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    b33a:	|  |            addq.l #1,44(sp)
    b33e:	|  '----------> movea.l 1e9dc <currentFloor>,a0
    b344:	|               move.l 8(a0),d0
    b348:	|               cmp.l 44(sp),d0
    b34c:	'-------------- bgt.w b16a <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    b350:	                moveq #-1,d0
    b352:	                cmp.l 48(sp),d0
    b356:	            ,-- bne.s b35c <handleClosestPoint+0x22c>
    b358:	            |   clr.w d0
    b35a:	         ,--|-- bra.s b376 <handleClosestPoint+0x246>
	*setX = gotX;
    b35c:	         |  '-> movea.l 64(sp),a0
    b360:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    b364:	         |      movea.l 68(sp),a0
    b368:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    b36c:	         |      movea.l 72(sp),a0
    b370:	         |      move.l 48(sp),(a0)

	return TRUE;
    b374:	         |      moveq #1,d0
}
    b376:	         '----> move.l (sp)+,d2
    b378:	                lea 56(sp),sp
    b37c:	                rts

0000b37e <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    b37e:	clr.l 1e938 <personRegion+0x10>
	personRegion.sY = 0;
    b384:	clr.l 1e93c <personRegion+0x14>
	personRegion.di = -1;
    b38a:	moveq #-1,d0
    b38c:	move.l d0,1e940 <personRegion+0x18>
	allScreenRegions = NULL;
    b392:	clr.l 1e9d0 <allScreenRegions>

	return TRUE;
    b398:	moveq #1,d0
}
    b39a:	rts

0000b39c <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    b39c:	          subq.l #4,sp
    b39e:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    b3a0:	          tst.l 12(sp)
    b3a4:	      ,-- bne.s b3ac <jumpPerson+0x10>
    b3a6:	      |   tst.l 16(sp)
    b3aa:	,-----|-- beq.s b420 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    b3ac:	|     '-> move.l 20(sp),-(sp)
    b3b0:	|         jsr b018 <findPerson>
    b3b6:	|         addq.l #4,sp
    b3b8:	|         move.l d0,4(sp)
    if (!moveMe) return;
    b3bc:	|  ,----- beq.s b424 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    b3be:	|  |      movea.l 4(sp),a0
    b3c2:	|  |      move.l 68(a0),d0
    b3c6:	|  |  ,-- beq.s b3da <jumpPerson+0x3e>
    b3c8:	|  |  |   movea.l 4(sp),a0
    b3cc:	|  |  |   move.l 68(a0),d0
    b3d0:	|  |  |   move.l d0,-(sp)
    b3d2:	|  |  |   jsr 55c2 <abortFunction>
    b3d8:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    b3da:	|  |  '-> movea.l 4(sp),a0
    b3de:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    b3e2:	|  |      movea.l 4(sp),a0
    b3e6:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    b3ea:	|  |      movea.l 4(sp),a0
    b3ee:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    b3f2:	|  |      move.l 16(sp),-(sp)
    b3f6:	|  |      jsr 189b0 <__floatsisf>
    b3fc:	|  |      addq.l #4,sp
    b3fe:	|  |      move.l d0,d2
    b400:	|  |      move.l 12(sp),-(sp)
    b404:	|  |      jsr 189b0 <__floatsisf>
    b40a:	|  |      addq.l #4,sp
    b40c:	|  |      move.l d2,-(sp)
    b40e:	|  |      move.l d0,-(sp)
    b410:	|  |      move.l 12(sp),-(sp)
    b414:	|  |      jsr b7c2 <moveAndScale>
    b41a:	|  |      lea 12(sp),sp
    b41e:	|  |  ,-- bra.s b426 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    b420:	'--|--|-> nop
    b422:	   |  +-- bra.s b426 <jumpPerson+0x8a>
    if (!moveMe) return;
    b424:	   '--|-> nop
}
    b426:	      '-> move.l (sp)+,d2
    b428:	          addq.l #4,sp
    b42a:	          rts

0000b42c <killAllPeople>:


void killAllPeople () {
    b42c:	          subq.l #8,sp
    b42e:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    b430:	   ,----- bra.s b49c <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    b432:	,--|----> movea.l 1e924 <allPeople>,a0
    b438:	|  |      move.l 68(a0),d0
    b43c:	|  |  ,-- beq.s b452 <killAllPeople+0x26>
    b43e:	|  |  |   movea.l 1e924 <allPeople>,a0
    b444:	|  |  |   move.l 68(a0),d0
    b448:	|  |  |   move.l d0,-(sp)
    b44a:	|  |  |   jsr 55c2 <abortFunction>
    b450:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    b452:	|  |  '-> movea.l 1e924 <allPeople>,a0
    b458:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    b45c:	|  |      move.l 1e924 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    b464:	|  |      movea.l 1e924 <allPeople>,a0
    b46a:	|  |      move.l 36(a0),d0
    b46e:	|  |      move.l d0,1e924 <allPeople>
		removeObjectType (killPeople -> thisType);
    b474:	|  |      movea.l 8(sp),a0
    b478:	|  |      move.l 114(a0),d0
    b47c:	|  |      move.l d0,-(sp)
    b47e:	|  |      jsr e32e <removeObjectType>
    b484:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    b486:	|  |      move.l 8(sp),4(sp)
    b48c:	|  |      move.l 1e8c0 <SysBase>,d0
    b492:	|  |      movea.l d0,a6
    b494:	|  |      movea.l 4(sp),a1
    b498:	|  |      jsr -690(a6)
	while (allPeople) {
    b49c:	|  '----> move.l 1e924 <allPeople>,d0
    b4a2:	'-------- bne.s b432 <killAllPeople+0x6>
	}
}
    b4a4:	          nop
    b4a6:	          nop
    b4a8:	          movea.l (sp)+,a6
    b4aa:	          addq.l #8,sp
    b4ac:	          rts

0000b4ae <killMostPeople>:

void killMostPeople() {
    b4ae:	          lea -12(sp),sp
    b4b2:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    b4b4:	          move.l #125220,12(sp)

    while (*lookyHere) {
    b4bc:	   ,----- bra.w b542 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    b4c0:	,--|----> movea.l 12(sp),a0
    b4c4:	|  |      movea.l (a0),a0
    b4c6:	|  |      move.l 118(a0),d0
    b4ca:	|  |      moveq #32,d1
    b4cc:	|  |      and.l d1,d0
    b4ce:	|  |  ,-- beq.s b4e0 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    b4d0:	|  |  |   movea.l 12(sp),a0
    b4d4:	|  |  |   move.l (a0),d0
    b4d6:	|  |  |   moveq #36,d1
    b4d8:	|  |  |   add.l d0,d1
    b4da:	|  |  |   move.l d1,12(sp)
    b4de:	|  +--|-- bra.s b542 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    b4e0:	|  |  '-> movea.l 12(sp),a0
    b4e4:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    b4e8:	|  |      movea.l 8(sp),a0
    b4ec:	|  |      move.l 36(a0),d0
    b4f0:	|  |      movea.l 12(sp),a0
    b4f4:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    b4f6:	|  |      movea.l 8(sp),a0
    b4fa:	|  |      move.l 68(a0),d0
    b4fe:	|  |  ,-- beq.s b512 <killMostPeople+0x64>
    b500:	|  |  |   movea.l 8(sp),a0
    b504:	|  |  |   move.l 68(a0),d0
    b508:	|  |  |   move.l d0,-(sp)
    b50a:	|  |  |   jsr 55c2 <abortFunction>
    b510:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    b512:	|  |  '-> movea.l 8(sp),a0
    b516:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    b51a:	|  |      movea.l 8(sp),a0
    b51e:	|  |      move.l 114(a0),d0
    b522:	|  |      move.l d0,-(sp)
    b524:	|  |      jsr e32e <removeObjectType>
    b52a:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    b52c:	|  |      move.l 8(sp),4(sp)
    b532:	|  |      move.l 1e8c0 <SysBase>,d0
    b538:	|  |      movea.l d0,a6
    b53a:	|  |      movea.l 4(sp),a1
    b53e:	|  |      jsr -690(a6)
    while (*lookyHere) {
    b542:	|  '----> movea.l 12(sp),a0
    b546:	|         move.l (a0),d0
    b548:	'-------- bne.w b4c0 <killMostPeople+0x12>
        }
    }
}
    b54c:	          nop
    b54e:	          nop
    b550:	          movea.l (sp)+,a6
    b552:	          lea 12(sp),sp
    b556:	          rts

0000b558 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    b558:	clr.l -(sp)
    b55a:	move.l sp,d0
    b55c:	addq.l #8,d0
    b55e:	move.l d0,-(sp)
    b560:	jsr 46ee <setFrames>
    b566:	addq.l #8,sp
}
    b568:	nop
    b56a:	rts

0000b56c <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    b56c:	          lea -12(sp),sp
    b570:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    b572:	          pea 1a65c <PutChar+0x163c>
    b578:	          jsr 1857e <KPrintF>
    b57e:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    b580:	          tst.l 20(sp)
    b584:	      ,-- bne.s b592 <makeWalkingPerson+0x26>
    b586:	      |   tst.l 24(sp)
    b58a:	      +-- bne.s b592 <makeWalkingPerson+0x26>
    b58c:	      |   clr.w d0
    b58e:	,-----|-- bra.w b754 <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    b592:	|     '-> movea.l 1e9dc <currentFloor>,a0
    b598:	|         move.l 8(a0),d0
    b59c:	|     ,-- bne.s b5a4 <makeWalkingPerson+0x38>
    b59e:	|     |   clr.w d0
    b5a0:	+-----|-- bra.w b754 <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b5a4:	|     '-> move.l 28(sp),d0
    b5a8:	|         move.l d0,-(sp)
    b5aa:	|         jsr b018 <findPerson>
    b5b0:	|         addq.l #4,sp
    b5b2:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    b5b6:	|     ,-- bne.s b5d2 <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    b5b8:	|     |   move.l 28(sp),d0
    b5bc:	|     |   move.l d0,-(sp)
    b5be:	|     |   pea 1a677 <PutChar+0x1657>
    b5c4:	|     |   jsr 1857e <KPrintF>
    b5ca:	|     |   addq.l #8,sp
		return FALSE;
    b5cc:	|     |   clr.w d0
    b5ce:	+-----|-- bra.w b754 <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    b5d2:	|     '-> movea.l 12(sp),a0
    b5d6:	|         move.l 68(a0),d0
    b5da:	|     ,-- beq.s b5ee <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    b5dc:	|     |   movea.l 12(sp),a0
    b5e0:	|     |   move.l 68(a0),d0
    b5e4:	|     |   move.l d0,-(sp)
    b5e6:	|     |   jsr 55c2 <abortFunction>
    b5ec:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    b5ee:	|     '-> movea.l 12(sp),a0
    b5f2:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    b5f6:	|         movea.l 12(sp),a0
    b5fa:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    b600:	|         movea.l 12(sp),a0
    b604:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    b60a:	|         movea.l 12(sp),a0
    b60e:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    b614:	|         movea.l 12(sp),a0
    b618:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    b61e:	|         move.l 24(sp),-(sp)
    b622:	|         move.l 24(sp),-(sp)
    b626:	|         jsr 178c4 <inFloor>
    b62c:	|         addq.l #8,sp
    b62e:	|         movea.l 12(sp),a0
    b632:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    b636:	|         movea.l 12(sp),a0
    b63a:	|         move.l 60(a0),d0
    b63e:	|         moveq #-1,d1
    b640:	|         cmp.l d0,d1
    b642:	|     ,-- bne.s b672 <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    b644:	|     |   movea.w #60,a0
    b648:	|     |   adda.l 12(sp),a0
    b64c:	|     |   moveq #44,d1
    b64e:	|     |   add.l 12(sp),d1
    b652:	|     |   moveq #40,d0
    b654:	|     |   add.l 12(sp),d0
    b658:	|     |   move.l a0,-(sp)
    b65a:	|     |   move.l d1,-(sp)
    b65c:	|     |   move.l d0,-(sp)
    b65e:	|     |   jsr b130 <handleClosestPoint>
    b664:	|     |   lea 12(sp),sp
    b668:	|     |   tst.w d0
    b66a:	|     +-- bne.s b672 <makeWalkingPerson+0x106>
    b66c:	|     |   clr.w d0
    b66e:	+-----|-- bra.w b754 <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    b672:	|     '-> movea.l 12(sp),a0
    b676:	|         move.l 4(a0),d0
    b67a:	|         move.l d0,-(sp)
    b67c:	|         jsr 18948 <__fixsfsi>
    b682:	|         addq.l #4,sp
    b684:	|         move.l d0,d2
    b686:	|         movea.l 12(sp),a0
    b68a:	|         move.l (a0),d0
    b68c:	|         move.l d0,-(sp)
    b68e:	|         jsr 18948 <__fixsfsi>
    b694:	|         addq.l #4,sp
    b696:	|         move.l d2,-(sp)
    b698:	|         move.l d0,-(sp)
    b69a:	|         jsr 178c4 <inFloor>
    b6a0:	|         addq.l #8,sp
    b6a2:	|         movea.l 12(sp),a0
    b6a6:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    b6aa:	|         movea.l 12(sp),a0
    b6ae:	|         move.l 56(a0),d0
    b6b2:	|         moveq #-1,d1
    b6b4:	|         cmp.l d0,d1
    b6b6:	|     ,-- bne.s b708 <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    b6b8:	|     |   movea.l 12(sp),a0
    b6bc:	|     |   move.l (a0),d0
    b6be:	|     |   move.l d0,-(sp)
    b6c0:	|     |   jsr 18948 <__fixsfsi>
    b6c6:	|     |   addq.l #4,sp
    b6c8:	|     |   move.l d0,8(sp)
    b6cc:	|     |   movea.l 12(sp),a0
    b6d0:	|     |   move.l 4(a0),d0
    b6d4:	|     |   move.l d0,-(sp)
    b6d6:	|     |   jsr 18948 <__fixsfsi>
    b6dc:	|     |   addq.l #4,sp
    b6de:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    b6e2:	|     |   moveq #56,d0
    b6e4:	|     |   add.l 12(sp),d0
    b6e8:	|     |   move.l d0,-(sp)
    b6ea:	|     |   lea 8(sp),a0
    b6ee:	|     |   move.l a0,-(sp)
    b6f0:	|     |   moveq #16,d0
    b6f2:	|     |   add.l sp,d0
    b6f4:	|     |   move.l d0,-(sp)
    b6f6:	|     |   jsr b130 <handleClosestPoint>
    b6fc:	|     |   lea 12(sp),sp
    b700:	|     |   tst.w d0
    b702:	|     +-- bne.s b708 <makeWalkingPerson+0x19c>
    b704:	|     |   clr.w d0
    b706:	+-----|-- bra.s b754 <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    b708:	|     '-> move.l 12(sp),-(sp)
    b70c:	|         jsr a37a <doBorderStuff>
    b712:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    b714:	|         clr.l -(sp)
    b716:	|         move.l 16(sp),-(sp)
    b71a:	|         jsr c9c0 <walkMe>
    b720:	|         addq.l #8,sp
    b722:	|         tst.w d0
    b724:	|     ,-- bne.s b730 <makeWalkingPerson+0x1c4>
    b726:	|     |   movea.l 12(sp),a0
    b72a:	|     |   move.w 66(a0),d0
    b72e:	|  ,--|-- beq.s b752 <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    b730:	|  |  '-> lea 28(sp),a0
    b734:	|  |      move.l a0,-(sp)
    b736:	|  |      pea 1a6a0 <PutChar+0x1680>
    b73c:	|  |      jsr 1857e <KPrintF>
    b742:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    b744:	|  |      movea.l 12(sp),a0
    b748:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    b74e:	|  |      moveq #1,d0
    b750:	+--|----- bra.s b754 <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    b752:	|  '----> clr.w d0
	}
}
    b754:	'-------> move.l (sp)+,d2
    b756:	          lea 12(sp),sp
    b75a:	          rts

0000b75c <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    b75c:	       lea -16(sp),sp
    b760:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    b762:	       moveq #12,d0
    b764:	       move.l d0,16(sp)
    b768:	       clr.l 12(sp)
    b76c:	       move.l 1e8c0 <SysBase>,d0
    b772:	       movea.l d0,a6
    b774:	       move.l 16(sp),d0
    b778:	       move.l 12(sp),d1
    b77c:	       jsr -684(a6)
    b780:	       move.l d0,8(sp)
    b784:	       move.l 8(sp),d0
    b788:	       move.l d0,4(sp)
    if(newAnim == 0) {
    b78c:	   ,-- bne.s b7a0 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    b78e:	   |   pea 1a6d3 <PutChar+0x16b3>
    b794:	   |   jsr 1857e <KPrintF>
    b79a:	   |   addq.l #4,sp
        return NULL;    
    b79c:	   |   moveq #0,d0
    b79e:	,--|-- bra.s b7ba <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    b7a0:	|  '-> movea.l 4(sp),a0
    b7a4:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    b7a6:	|      movea.l 4(sp),a0
    b7aa:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    b7ae:	|      movea.l 4(sp),a0
    b7b2:	|      clr.l 4(a0)
	return newAnim;
    b7b6:	|      move.l 4(sp),d0
}
    b7ba:	'----> movea.l (sp)+,a6
    b7bc:	       lea 16(sp),sp
    b7c0:	       rts

0000b7c2 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    b7c2:	    move.l d2,-(sp)
	me->x = x;
    b7c4:	    movea.l 8(sp),a0
    b7c8:	    move.l 12(sp),(a0)
	me->y = y;
    b7cc:	    movea.l 8(sp),a0
    b7d0:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    b7d6:	    movea.l 8(sp),a0
    b7da:	    clr.l 8(a0)
	me->oldy = 0;
    b7de:	    movea.l 8(sp),a0
    b7e2:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    b7e6:	    movea.l 8(sp),a0
    b7ea:	    move.l 118(a0),d0
    b7ee:	    moveq #2,d1
    b7f0:	    and.l d1,d0
    b7f2:	,-- bne.s b84a <moveAndScale+0x88>
    b7f4:	|   move.w 1e23c <scaleDivide>,d0
    b7fa:	+-- beq.s b84a <moveAndScale+0x88>
    b7fc:	|   movea.l 8(sp),a0
    b800:	|   move.l 4(a0),d2
    b804:	|   move.w 1e23a <scaleHorizon>,d0
    b80a:	|   movea.w d0,a0
    b80c:	|   move.l a0,-(sp)
    b80e:	|   jsr 189b0 <__floatsisf>
    b814:	|   addq.l #4,sp
    b816:	|   move.l d0,-(sp)
    b818:	|   move.l d2,-(sp)
    b81a:	|   jsr 18ca4 <__subsf3>
    b820:	|   addq.l #8,sp
    b822:	|   move.l d0,d2
    b824:	|   move.w 1e23c <scaleDivide>,d0
    b82a:	|   movea.w d0,a0
    b82c:	|   move.l a0,-(sp)
    b82e:	|   jsr 189b0 <__floatsisf>
    b834:	|   addq.l #4,sp
    b836:	|   move.l d0,-(sp)
    b838:	|   move.l d2,-(sp)
    b83a:	|   jsr 18866 <__divsf3>
    b840:	|   addq.l #8,sp
    b842:	|   movea.l 8(sp),a0
    b846:	|   move.l d0,32(a0)
}
    b84a:	'-> nop
    b84c:	    move.l (sp)+,d2
    b84e:	    rts

0000b850 <removeOneCharacter>:

void removeOneCharacter (int i) {
    b850:	          lea -16(sp),sp
    b854:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    b856:	          move.l 24(sp),-(sp)
    b85a:	          jsr b018 <findPerson>
    b860:	          addq.l #4,sp
    b862:	          move.l d0,8(sp)

    if (p) {
    b866:	,-------- beq.w b946 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    b86a:	|         move.l 1e9d4 <overRegion>,d0
    b870:	|         cmpi.l #125224,d0
    b876:	|     ,-- bne.s b894 <removeOneCharacter+0x44>
    b878:	|     |   movea.l 1e9d4 <overRegion>,a0
    b87e:	|     |   move.l 28(a0),d1
    b882:	|     |   movea.l 8(sp),a0
    b886:	|     |   move.l 114(a0),d0
    b88a:	|     |   cmp.l d1,d0
    b88c:	|     +-- bne.s b894 <removeOneCharacter+0x44>
            overRegion = NULL;
    b88e:	|     |   clr.l 1e9d4 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    b894:	|     '-> movea.l 8(sp),a0
    b898:	|         move.l 68(a0),d0
    b89c:	|     ,-- beq.s b8b0 <removeOneCharacter+0x60>
    b89e:	|     |   movea.l 8(sp),a0
    b8a2:	|     |   move.l 68(a0),d0
    b8a6:	|     |   move.l d0,-(sp)
    b8a8:	|     |   jsr 55c2 <abortFunction>
    b8ae:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    b8b0:	|     '-> movea.l 8(sp),a0
    b8b4:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    b8b8:	|         clr.l 12(sp)
    b8bc:	|     ,-- bra.s b8e4 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    b8be:	|  ,--|-> movea.l 8(sp),a0
    b8c2:	|  |  |   movea.l 80(a0),a0
    b8c6:	|  |  |   move.l (a0),d1
    b8c8:	|  |  |   move.l 12(sp),d0
    b8cc:	|  |  |   add.l d0,d0
    b8ce:	|  |  |   add.l d0,d0
    b8d0:	|  |  |   movea.l d1,a0
    b8d2:	|  |  |   adda.l d0,a0
    b8d4:	|  |  |   move.l (a0),d0
    b8d6:	|  |  |   move.l d0,-(sp)
    b8d8:	|  |  |   jsr a2f6 <deleteAnim>
    b8de:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    b8e0:	|  |  |   addq.l #1,12(sp)
    b8e4:	|  |  '-> moveq #2,d0
    b8e6:	|  |      cmp.l 12(sp),d0
    b8ea:	|  '----- bge.s b8be <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    b8ec:	|         move.l #125220,16(sp)
    b8f4:	|     ,-- bra.s b904 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    b8f6:	|  ,--|-> movea.l 16(sp),a0
    b8fa:	|  |  |   move.l (a0),d0
    b8fc:	|  |  |   moveq #36,d1
    b8fe:	|  |  |   add.l d0,d1
    b900:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    b904:	|  |  '-> movea.l 16(sp),a0
    b908:	|  |      move.l (a0),d0
    b90a:	|  |      cmp.l 8(sp),d0
    b90e:	|  '----- bne.s b8f6 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    b910:	|         movea.l 8(sp),a0
    b914:	|         move.l 36(a0),d0
    b918:	|         movea.l 16(sp),a0
    b91c:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b91e:	|         movea.l 8(sp),a0
    b922:	|         move.l 114(a0),d0
    b926:	|         move.l d0,-(sp)
    b928:	|         jsr e32e <removeObjectType>
    b92e:	|         addq.l #4,sp
        FreeVec(p);
    b930:	|         move.l 8(sp),4(sp)
    b936:	|         move.l 1e8c0 <SysBase>,d0
    b93c:	|         movea.l d0,a6
    b93e:	|         movea.l 4(sp),a1
    b942:	|         jsr -690(a6)
		
    }
}
    b946:	'-------> nop
    b948:	          movea.l (sp)+,a6
    b94a:	          lea 16(sp),sp
    b94e:	          rts

0000b950 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b950:	       subq.l #8,sp
    b952:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b954:	       movea.l 16(sp),a0
    b958:	       movea.l 80(a0),a0
    b95c:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b962:	       movea.l 16(sp),a0
    b966:	       move.l 92(a0),d2
    b96a:	       move.l 4(sp),-(sp)
    b96e:	       pea b4 <_start+0xb4>
    b972:	       jsr 18f88 <__divsi3>
    b978:	       addq.l #8,sp
    b97a:	       add.l d2,d0
    b97c:	       move.l d0,d1
    b97e:	       addi.l #180,d1
    b984:	       movea.l 16(sp),a0
    b988:	       move.l 100(a0),d0
    b98c:	       move.l d1,d2
    b98e:	       add.l d0,d2
    b990:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b994:	   ,-- bra.s b99e <rethinkAngle+0x4e>
    b996:	,--|-> addi.l #-360,8(sp)
    b99e:	|  '-> cmpi.l #359,8(sp)
    b9a6:	'----- bgt.s b996 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b9a8:	       move.l 4(sp),-(sp)
    b9ac:	       move.l 12(sp),-(sp)
    b9b0:	       jsr 18f0a <__mulsi3>
    b9b6:	       addq.l #8,sp
    b9b8:	       pea 168 <decodeFilename+0x50>
    b9bc:	       move.l d0,-(sp)
    b9be:	       jsr 18f88 <__divsi3>
    b9c4:	       addq.l #8,sp
    b9c6:	       movea.l 16(sp),a0
    b9ca:	       move.l d0,106(a0)
}
    b9ce:	       nop
    b9d0:	       move.l (sp)+,d2
    b9d2:	       addq.l #8,sp
    b9d4:	       rts

0000b9d6 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b9d6:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b9d8:	          movea.l 8(sp),a0
    b9dc:	          move.l 8(a0),d0
    b9e0:	          move.l 12(sp),-(sp)
    b9e4:	          move.l d0,-(sp)
    b9e6:	          jsr 8d0 <put2bytes>
    b9ec:	          addq.l #8,sp
	if (p -> numFrames) {
    b9ee:	          movea.l 8(sp),a0
    b9f2:	          move.l 8(a0),d0
    b9f6:	,-------- beq.w ba9a <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b9fa:	|         movea.l 8(sp),a0
    b9fe:	|         movea.l (a0),a0
    ba00:	|         move.l (a0),d0
    ba02:	|         move.l 12(sp),-(sp)
    ba06:	|         move.l d0,-(sp)
    ba08:	|         jsr 958 <put4bytes>
    ba0e:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    ba10:	|         clr.l (sp)
    ba12:	|     ,-- bra.s ba8c <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    ba14:	|  ,--|-> movea.l 8(sp),a0
    ba18:	|  |  |   movea.l 4(a0),a0
    ba1c:	|  |  |   move.l (sp),d1
    ba1e:	|  |  |   move.l d1,d0
    ba20:	|  |  |   add.l d0,d0
    ba22:	|  |  |   add.l d1,d0
    ba24:	|  |  |   add.l d0,d0
    ba26:	|  |  |   add.l d0,d0
    ba28:	|  |  |   adda.l d0,a0
    ba2a:	|  |  |   move.l (a0),d0
    ba2c:	|  |  |   move.l 12(sp),-(sp)
    ba30:	|  |  |   move.l d0,-(sp)
    ba32:	|  |  |   jsr 958 <put4bytes>
    ba38:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    ba3a:	|  |  |   movea.l 8(sp),a0
    ba3e:	|  |  |   movea.l 4(a0),a0
    ba42:	|  |  |   move.l (sp),d1
    ba44:	|  |  |   move.l d1,d0
    ba46:	|  |  |   add.l d0,d0
    ba48:	|  |  |   add.l d1,d0
    ba4a:	|  |  |   add.l d0,d0
    ba4c:	|  |  |   add.l d0,d0
    ba4e:	|  |  |   adda.l d0,a0
    ba50:	|  |  |   move.l 4(a0),d0
    ba54:	|  |  |   move.l 12(sp),-(sp)
    ba58:	|  |  |   move.l d0,-(sp)
    ba5a:	|  |  |   jsr 958 <put4bytes>
    ba60:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    ba62:	|  |  |   movea.l 8(sp),a0
    ba66:	|  |  |   movea.l 4(a0),a0
    ba6a:	|  |  |   move.l (sp),d1
    ba6c:	|  |  |   move.l d1,d0
    ba6e:	|  |  |   add.l d0,d0
    ba70:	|  |  |   add.l d1,d0
    ba72:	|  |  |   add.l d0,d0
    ba74:	|  |  |   add.l d0,d0
    ba76:	|  |  |   adda.l d0,a0
    ba78:	|  |  |   move.l 8(a0),d0
    ba7c:	|  |  |   move.l 12(sp),-(sp)
    ba80:	|  |  |   move.l d0,-(sp)
    ba82:	|  |  |   jsr 958 <put4bytes>
    ba88:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    ba8a:	|  |  |   addq.l #1,(sp)
    ba8c:	|  |  '-> movea.l 8(sp),a0
    ba90:	|  |      move.l 8(a0),d0
    ba94:	|  |      cmp.l (sp),d0
    ba96:	|  '----- bgt.w ba14 <saveAnim+0x3e>
		}
	}
	return TRUE;
    ba9a:	'-------> moveq #1,d0
}
    ba9c:	          addq.l #4,sp
    ba9e:	          rts

0000baa0 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    baa0:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    baa2:	             movea.l 8(sp),a0
    baa6:	             move.l 4(a0),d0
    baaa:	             move.l 12(sp),-(sp)
    baae:	             move.l d0,-(sp)
    bab0:	             jsr 8d0 <put2bytes>
    bab6:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    bab8:	             clr.l (sp)
    baba:	   ,-------- bra.s bae6 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    babc:	,--|-------> movea.l 8(sp),a0
    bac0:	|  |         move.l (a0),d1
    bac2:	|  |         move.l (sp),d0
    bac4:	|  |         add.l d0,d0
    bac6:	|  |         add.l d0,d0
    bac8:	|  |         movea.l d1,a0
    baca:	|  |         adda.l d0,a0
    bacc:	|  |         move.l (a0),d0
    bace:	|  |         move.l 12(sp),-(sp)
    bad2:	|  |         move.l d0,-(sp)
    bad4:	|  |         jsr b9d6 <saveAnim>
    bada:	|  |         addq.l #8,sp
    badc:	|  |         tst.w d0
    bade:	|  |     ,-- bne.s bae4 <saveCostume+0x44>
    bae0:	|  |     |   clr.w d0
    bae2:	|  |  ,--|-- bra.s bafa <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    bae4:	|  |  |  '-> addq.l #1,(sp)
    bae6:	|  '--|----> movea.l 8(sp),a0
    baea:	|     |      move.l 4(a0),d1
    baee:	|     |      move.l d1,d0
    baf0:	|     |      add.l d0,d0
    baf2:	|     |      add.l d1,d0
    baf4:	|     |      cmp.l (sp),d0
    baf6:	'-----|----- bgt.s babc <saveCostume+0x1c>
	}

	return TRUE;
    baf8:	      |      moveq #1,d0
}
    bafa:	      '----> addq.l #4,sp
    bafc:	             rts

0000bafe <savePeople>:

BOOL savePeople (BPTR fp) {
    bafe:	             lea -144(sp),sp
    bb02:	             move.l a6,-(sp)
    bb04:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    bb06:	             move.l 1e924 <allPeople>,148(sp)
	int countPeople = 0, a;
    bb0e:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    bb12:	             move.w 1e23a <scaleHorizon>,d0
    bb18:	             movea.w d0,a0
    bb1a:	             move.l 156(sp),-(sp)
    bb1e:	             move.l a0,-(sp)
    bb20:	             jsr a9c <putSigned>
    bb26:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    bb28:	             move.w 1e23c <scaleDivide>,d0
    bb2e:	             movea.w d0,a0
    bb30:	             move.l 156(sp),-(sp)
    bb34:	             move.l a0,-(sp)
    bb36:	             jsr a9c <putSigned>
    bb3c:	             addq.l #8,sp

	while (me) {
    bb3e:	         ,-- bra.s bb4e <savePeople+0x50>
		countPeople ++;
    bb40:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    bb44:	      |  |   movea.l 148(sp),a0
    bb48:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    bb4e:	      |  '-> tst.l 148(sp)
    bb52:	      '----- bne.s bb40 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    bb54:	             move.l 156(sp),-(sp)
    bb58:	             move.l 148(sp),-(sp)
    bb5c:	             jsr 8d0 <put2bytes>
    bb62:	             addq.l #8,sp

	me = allPeople;
    bb64:	             move.l 1e924 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    bb6c:	             clr.l 140(sp)
    bb70:	   ,-------- bra.w bfc8 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    bb74:	,--|-------> movea.l 148(sp),a0
    bb78:	|  |         move.l (a0),d0
    bb7a:	|  |         move.l 156(sp),-(sp)
    bb7e:	|  |         move.l d0,-(sp)
    bb80:	|  |         jsr a46 <putFloat>
    bb86:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    bb88:	|  |         movea.l 148(sp),a0
    bb8c:	|  |         move.l 4(a0),d0
    bb90:	|  |         move.l 156(sp),-(sp)
    bb94:	|  |         move.l d0,-(sp)
    bb96:	|  |         jsr a46 <putFloat>
    bb9c:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    bb9e:	|  |         movea.l 148(sp),a0
    bba2:	|  |         move.l 80(a0),d0
    bba6:	|  |         move.l 156(sp),-(sp)
    bbaa:	|  |         move.l d0,-(sp)
    bbac:	|  |         jsr baa0 <saveCostume>
    bbb2:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    bbb4:	|  |         movea.l 148(sp),a0
    bbb8:	|  |         move.l 72(a0),d0
    bbbc:	|  |         move.l 156(sp),-(sp)
    bbc0:	|  |         move.l d0,-(sp)
    bbc2:	|  |         jsr b9d6 <saveAnim>
    bbc8:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    bbca:	|  |         move.l 156(sp),136(sp)
    bbd0:	|  |         movea.l 148(sp),a0
    bbd4:	|  |         move.l 72(a0),d1
    bbd8:	|  |         movea.l 148(sp),a0
    bbdc:	|  |         move.l 76(a0),d0
    bbe0:	|  |         cmp.l d1,d0
    bbe2:	|  |         seq d0
    bbe4:	|  |         neg.b d0
    bbe6:	|  |         move.b d0,d0
    bbe8:	|  |         andi.l #255,d0
    bbee:	|  |         move.l d0,132(sp)
    bbf2:	|  |         move.l 1e8c8 <DOSBase>,d0
    bbf8:	|  |         movea.l d0,a6
    bbfa:	|  |         move.l 136(sp),d1
    bbfe:	|  |         move.l 132(sp),d2
    bc02:	|  |         jsr -312(a6)
    bc06:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    bc0a:	|  |         movea.l 148(sp),a0
    bc0e:	|  |         move.l 32(a0),d0
    bc12:	|  |         move.l 156(sp),-(sp)
    bc16:	|  |         move.l d0,-(sp)
    bc18:	|  |         jsr a46 <putFloat>
    bc1e:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    bc20:	|  |         movea.l 148(sp),a0
    bc24:	|  |         move.l 118(a0),d0
    bc28:	|  |         move.l 156(sp),-(sp)
    bc2c:	|  |         move.l d0,-(sp)
    bc2e:	|  |         jsr 8d0 <put2bytes>
    bc34:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    bc36:	|  |         movea.l 148(sp),a0
    bc3a:	|  |         move.l 20(a0),d0
    bc3e:	|  |         move.l 156(sp),-(sp)
    bc42:	|  |         move.l d0,-(sp)
    bc44:	|  |         jsr 8d0 <put2bytes>
    bc4a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    bc4c:	|  |         movea.l 148(sp),a0
    bc50:	|  |         move.l 40(a0),d0
    bc54:	|  |         move.l 156(sp),-(sp)
    bc58:	|  |         move.l d0,-(sp)
    bc5a:	|  |         jsr 8d0 <put2bytes>
    bc60:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    bc62:	|  |         movea.l 148(sp),a0
    bc66:	|  |         move.l 44(a0),d0
    bc6a:	|  |         move.l 156(sp),-(sp)
    bc6e:	|  |         move.l d0,-(sp)
    bc70:	|  |         jsr 8d0 <put2bytes>
    bc76:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    bc78:	|  |         movea.l 148(sp),a0
    bc7c:	|  |         move.l 48(a0),d0
    bc80:	|  |         move.l 156(sp),-(sp)
    bc84:	|  |         move.l d0,-(sp)
    bc86:	|  |         jsr 8d0 <put2bytes>
    bc8c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    bc8e:	|  |         movea.l 148(sp),a0
    bc92:	|  |         move.l 52(a0),d0
    bc96:	|  |         move.l 156(sp),-(sp)
    bc9a:	|  |         move.l d0,-(sp)
    bc9c:	|  |         jsr 8d0 <put2bytes>
    bca2:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    bca4:	|  |         movea.l 148(sp),a0
    bca8:	|  |         move.l 84(a0),d0
    bcac:	|  |         move.l 156(sp),-(sp)
    bcb0:	|  |         move.l d0,-(sp)
    bcb2:	|  |         jsr 8d0 <put2bytes>
    bcb8:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    bcba:	|  |         movea.l 148(sp),a0
    bcbe:	|  |         move.l 88(a0),d0
    bcc2:	|  |         move.l 156(sp),-(sp)
    bcc6:	|  |         move.l d0,-(sp)
    bcc8:	|  |         jsr 8d0 <put2bytes>
    bcce:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    bcd0:	|  |         movea.l 148(sp),a0
    bcd4:	|  |         move.l 28(a0),d0
    bcd8:	|  |         move.l 156(sp),-(sp)
    bcdc:	|  |         move.l d0,-(sp)
    bcde:	|  |         jsr 8d0 <put2bytes>
    bce4:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    bce6:	|  |         movea.l 148(sp),a0
    bcea:	|  |         move.l 122(a0),d0
    bcee:	|  |         move.l 156(sp),-(sp)
    bcf2:	|  |         move.l d0,-(sp)
    bcf4:	|  |         jsr 8d0 <put2bytes>
    bcfa:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    bcfc:	|  |         movea.l 148(sp),a0
    bd00:	|  |         move.l 24(a0),d0
    bd04:	|  |         move.l d0,d0
    bd06:	|  |         movea.w d0,a0
    bd08:	|  |         move.l 156(sp),-(sp)
    bd0c:	|  |         move.l a0,-(sp)
    bd0e:	|  |         jsr a9c <putSigned>
    bd14:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    bd16:	|  |         move.l 156(sp),124(sp)
    bd1c:	|  |         movea.l 148(sp),a0
    bd20:	|  |         move.w 104(a0),d0
    bd24:	|  |         movea.w d0,a0
    bd26:	|  |         move.l a0,120(sp)
    bd2a:	|  |         move.l 1e8c8 <DOSBase>,d0
    bd30:	|  |         movea.l d0,a6
    bd32:	|  |         move.l 124(sp),d1
    bd36:	|  |         move.l 120(sp),d2
    bd3a:	|  |         jsr -312(a6)
    bd3e:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    bd42:	|  |         move.l 156(sp),112(sp)
    bd48:	|  |         movea.l 148(sp),a0
    bd4c:	|  |         move.w 64(a0),d0
    bd50:	|  |         movea.w d0,a0
    bd52:	|  |         move.l a0,108(sp)
    bd56:	|  |         move.l 1e8c8 <DOSBase>,d0
    bd5c:	|  |         movea.l d0,a6
    bd5e:	|  |         move.l 112(sp),d1
    bd62:	|  |         move.l 108(sp),d2
    bd66:	|  |         jsr -312(a6)
    bd6a:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    bd6e:	|  |         move.l 156(sp),100(sp)
    bd74:	|  |         movea.l 148(sp),a0
    bd78:	|  |         move.w 66(a0),d0
    bd7c:	|  |         movea.w d0,a0
    bd7e:	|  |         move.l a0,96(sp)
    bd82:	|  |         move.l 1e8c8 <DOSBase>,d0
    bd88:	|  |         movea.l d0,a6
    bd8a:	|  |         move.l 100(sp),d1
    bd8e:	|  |         move.l 96(sp),d2
    bd92:	|  |         jsr -312(a6)
    bd96:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    bd9a:	|  |         movea.l 148(sp),a0
    bd9e:	|  |         move.l 68(a0),d0
    bda2:	|  |  ,----- beq.s bde0 <savePeople+0x2e2>
			FPutC (fp, 1);
    bda4:	|  |  |      move.l 156(sp),76(sp)
    bdaa:	|  |  |      moveq #1,d0
    bdac:	|  |  |      move.l d0,72(sp)
    bdb0:	|  |  |      move.l 1e8c8 <DOSBase>,d0
    bdb6:	|  |  |      movea.l d0,a6
    bdb8:	|  |  |      move.l 76(sp),d1
    bdbc:	|  |  |      move.l 72(sp),d2
    bdc0:	|  |  |      jsr -312(a6)
    bdc4:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    bdc8:	|  |  |      movea.l 148(sp),a0
    bdcc:	|  |  |      move.l 68(a0),d0
    bdd0:	|  |  |      move.l 156(sp),-(sp)
    bdd4:	|  |  |      move.l d0,-(sp)
    bdd6:	|  |  |      jsr cffa <saveFunction>
    bddc:	|  |  |      addq.l #8,sp
    bdde:	|  |  |  ,-- bra.s be04 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    bde0:	|  |  '--|-> move.l 156(sp),88(sp)
    bde6:	|  |     |   moveq #1,d0
    bde8:	|  |     |   move.l d0,84(sp)
    bdec:	|  |     |   move.l 1e8c8 <DOSBase>,d0
    bdf2:	|  |     |   movea.l d0,a6
    bdf4:	|  |     |   move.l 88(sp),d1
    bdf8:	|  |     |   move.l 84(sp),d2
    bdfc:	|  |     |   jsr -312(a6)
    be00:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    be04:	|  |     '-> movea.l 148(sp),a0
    be08:	|  |         move.l 106(a0),d0
    be0c:	|  |         move.l 156(sp),-(sp)
    be10:	|  |         move.l d0,-(sp)
    be12:	|  |         jsr 8d0 <put2bytes>
    be18:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    be1a:	|  |         movea.l 148(sp),a0
    be1e:	|  |         move.l 92(a0),d0
    be22:	|  |         move.l 156(sp),-(sp)
    be26:	|  |         move.l d0,-(sp)
    be28:	|  |         jsr 8d0 <put2bytes>
    be2e:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    be30:	|  |         movea.l 148(sp),a0
    be34:	|  |         move.l 100(a0),d0
    be38:	|  |         move.l 156(sp),-(sp)
    be3c:	|  |         move.l d0,-(sp)
    be3e:	|  |         jsr 8d0 <put2bytes>
    be44:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    be46:	|  |         movea.l 148(sp),a0
    be4a:	|  |         move.l 96(a0),d0
    be4e:	|  |         move.l 156(sp),-(sp)
    be52:	|  |         move.l d0,-(sp)
    be54:	|  |         jsr 8d0 <put2bytes>
    be5a:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    be5c:	|  |         movea.l 148(sp),a0
    be60:	|  |         move.l 110(a0),d0
    be64:	|  |         move.l d0,d0
    be66:	|  |         movea.w d0,a0
    be68:	|  |         move.l 156(sp),-(sp)
    be6c:	|  |         move.l a0,-(sp)
    be6e:	|  |         jsr a9c <putSigned>
    be74:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    be76:	|  |         movea.l 148(sp),a0
    be7a:	|  |         move.l 56(a0),d0
    be7e:	|  |         move.l d0,d0
    be80:	|  |         movea.w d0,a0
    be82:	|  |         move.l 156(sp),-(sp)
    be86:	|  |         move.l a0,-(sp)
    be88:	|  |         jsr a9c <putSigned>
    be8e:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    be90:	|  |         movea.l 148(sp),a0
    be94:	|  |         move.l 60(a0),d0
    be98:	|  |         move.l d0,d0
    be9a:	|  |         movea.w d0,a0
    be9c:	|  |         move.l 156(sp),-(sp)
    bea0:	|  |         move.l a0,-(sp)
    bea2:	|  |         jsr a9c <putSigned>
    bea8:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    beaa:	|  |         move.l 156(sp),64(sp)
    beb0:	|  |         movea.l 148(sp),a0
    beb4:	|  |         move.b 126(a0),d0
    beb8:	|  |         move.b d0,d0
    beba:	|  |         andi.l #255,d0
    bec0:	|  |         move.l d0,60(sp)
    bec4:	|  |         move.l 1e8c8 <DOSBase>,d0
    beca:	|  |         movea.l d0,a6
    becc:	|  |         move.l 64(sp),d1
    bed0:	|  |         move.l 60(sp),d2
    bed4:	|  |         jsr -312(a6)
    bed8:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    bedc:	|  |         move.l 156(sp),52(sp)
    bee2:	|  |         movea.l 148(sp),a0
    bee6:	|  |         move.b 127(a0),d0
    beea:	|  |         move.b d0,d0
    beec:	|  |         andi.l #255,d0
    bef2:	|  |         move.l d0,48(sp)
    bef6:	|  |         move.l 1e8c8 <DOSBase>,d0
    befc:	|  |         movea.l d0,a6
    befe:	|  |         move.l 52(sp),d1
    bf02:	|  |         move.l 48(sp),d2
    bf06:	|  |         jsr -312(a6)
    bf0a:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    bf0e:	|  |         move.l 156(sp),40(sp)
    bf14:	|  |         movea.l 148(sp),a0
    bf18:	|  |         move.b 128(a0),d0
    bf1c:	|  |         move.b d0,d0
    bf1e:	|  |         andi.l #255,d0
    bf24:	|  |         move.l d0,36(sp)
    bf28:	|  |         move.l 1e8c8 <DOSBase>,d0
    bf2e:	|  |         movea.l d0,a6
    bf30:	|  |         move.l 40(sp),d1
    bf34:	|  |         move.l 36(sp),d2
    bf38:	|  |         jsr -312(a6)
    bf3c:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    bf40:	|  |         move.l 156(sp),28(sp)
    bf46:	|  |         movea.l 148(sp),a0
    bf4a:	|  |         move.b 129(a0),d0
    bf4e:	|  |         move.b d0,d0
    bf50:	|  |         andi.l #255,d0
    bf56:	|  |         move.l d0,24(sp)
    bf5a:	|  |         move.l 1e8c8 <DOSBase>,d0
    bf60:	|  |         movea.l d0,a6
    bf62:	|  |         move.l 28(sp),d1
    bf66:	|  |         move.l 24(sp),d2
    bf6a:	|  |         jsr -312(a6)
    bf6e:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    bf72:	|  |         move.l 156(sp),16(sp)
    bf78:	|  |         movea.l 148(sp),a0
    bf7c:	|  |         move.b 130(a0),d0
    bf80:	|  |         move.b d0,d0
    bf82:	|  |         andi.l #255,d0
    bf88:	|  |         move.l d0,12(sp)
    bf8c:	|  |         move.l 1e8c8 <DOSBase>,d0
    bf92:	|  |         movea.l d0,a6
    bf94:	|  |         move.l 16(sp),d1
    bf98:	|  |         move.l 12(sp),d2
    bf9c:	|  |         jsr -312(a6)
    bfa0:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    bfa4:	|  |         movea.l 148(sp),a0
    bfa8:	|  |         move.l 114(a0),d0
    bfac:	|  |         move.l 156(sp),-(sp)
    bfb0:	|  |         move.l d0,-(sp)
    bfb2:	|  |         jsr e3ce <saveObjectRef>
    bfb8:	|  |         addq.l #8,sp

		me = me -> next;
    bfba:	|  |         movea.l 148(sp),a0
    bfbe:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    bfc4:	|  |         addq.l #1,140(sp)
    bfc8:	|  '-------> movea.l 140(sp),a0
    bfcc:	|            cmpa.l 144(sp),a0
    bfd0:	'----------- blt.w bb74 <savePeople+0x76>
	}
	return TRUE;
    bfd4:	             moveq #1,d0
}
    bfd6:	             move.l (sp)+,d2
    bfd8:	             movea.l (sp)+,a6
    bfda:	             lea 144(sp),sp
    bfde:	             rts

0000bfe0 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    bfe0:	movea.l 4(sp),a0
    bfe4:	move.l 8(sp),(a0)
}
    bfe8:	nop
    bfea:	rts

0000bfec <setDrawMode>:


void setDrawMode (int h, int ob) {
    bfec:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    bfee:	       move.l 12(sp),-(sp)
    bff2:	       jsr b018 <findPerson>
    bff8:	       addq.l #4,sp
    bffa:	       move.l d0,(sp)
	if (! moveMe) return;
    bffc:	,----- beq.s c010 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    bffe:	|      move.l 8(sp),-(sp)
    c002:	|      move.l 4(sp),-(sp)
    c006:	|      jsr c016 <setMyDrawMode>
    c00c:	|      addq.l #8,sp
    c00e:	|  ,-- bra.s c012 <setDrawMode+0x26>
	if (! moveMe) return;
    c010:	'--|-> nop
}
    c012:	   '-> addq.l #4,sp
    c014:	       rts

0000c016 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    c016:	       moveq #19,d0
    c018:	       cmp.l 8(sp),d0
    c01c:	,----- bcs.w c4f4 <setMyDrawMode+0x4de>
    c020:	|      move.l 8(sp),d0
    c024:	|      add.l d0,d0
    c026:	|      movea.l d0,a0
    c028:	|      adda.l #49204,a0
    c02e:	|      move.w (a0),d0
    c030:	|      jmp (c034 <setMyDrawMode+0x1e>,pc,d0.w)
    c034:	|      .short 0x04c0
    c036:	|      ori.l #6684712,-(a4)
    c03c:	|      btst d0,-(a0)
    c03e:	|      bchg d0,(a6)+
    c040:	|      bclr d0,(a4)+
    c042:	|      bset d0,(a2)+
    c044:	|      andi.b #84,(a6)
    c048:	|      andi.l #55575312,(a2)
    c04e:	|      .short 0x02d0
    c050:	|      bclr d1,(a0)
    c052:	|      .short 0x044a
    c054:	|      .short 0x040c
    c056:	|      movep.l d1,1158(a6)
    c05a:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c05c:	|      movea.l 4(sp),a0
    c060:	|      clr.b 128(a0)
    c064:	|      movea.l 4(sp),a0
    c068:	|      move.b 128(a0),d0
    c06c:	|      movea.l 4(sp),a0
    c070:	|      move.b d0,127(a0)
    c074:	|      movea.l 4(sp),a0
    c078:	|      move.b 127(a0),d0
    c07c:	|      movea.l 4(sp),a0
    c080:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    c084:	|      movea.l 4(sp),a0
    c088:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    c08c:	|      movea.l 4(sp),a0
    c090:	|      move.b #64,130(a0)
			break;
    c096:	|  ,-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c09a:	|  |   movea.l 4(sp),a0
    c09e:	|  |   clr.b 128(a0)
    c0a2:	|  |   movea.l 4(sp),a0
    c0a6:	|  |   move.b 128(a0),d0
    c0aa:	|  |   movea.l 4(sp),a0
    c0ae:	|  |   move.b d0,127(a0)
    c0b2:	|  |   movea.l 4(sp),a0
    c0b6:	|  |   move.b 127(a0),d0
    c0ba:	|  |   movea.l 4(sp),a0
    c0be:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c0c2:	|  |   movea.l 4(sp),a0
    c0c6:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    c0ca:	|  |   movea.l 4(sp),a0
    c0ce:	|  |   move.b #-128,130(a0)
			break;
    c0d4:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c0d8:	|  |   movea.l 4(sp),a0
    c0dc:	|  |   clr.b 128(a0)
    c0e0:	|  |   movea.l 4(sp),a0
    c0e4:	|  |   move.b 128(a0),d0
    c0e8:	|  |   movea.l 4(sp),a0
    c0ec:	|  |   move.b d0,127(a0)
    c0f0:	|  |   movea.l 4(sp),a0
    c0f4:	|  |   move.b 127(a0),d0
    c0f8:	|  |   movea.l 4(sp),a0
    c0fc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c100:	|  |   movea.l 4(sp),a0
    c104:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    c108:	|  |   movea.l 4(sp),a0
    c10c:	|  |   move.b #-64,130(a0)
			break;
    c112:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c116:	|  |   movea.l 4(sp),a0
    c11a:	|  |   clr.b 128(a0)
    c11e:	|  |   movea.l 4(sp),a0
    c122:	|  |   move.b 128(a0),d0
    c126:	|  |   movea.l 4(sp),a0
    c12a:	|  |   move.b d0,127(a0)
    c12e:	|  |   movea.l 4(sp),a0
    c132:	|  |   move.b 127(a0),d0
    c136:	|  |   movea.l 4(sp),a0
    c13a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c13e:	|  |   movea.l 4(sp),a0
    c142:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    c146:	|  |   movea.l 4(sp),a0
    c14a:	|  |   move.b #-2,130(a0)
			break;
    c150:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c154:	|  |   movea.l 4(sp),a0
    c158:	|  |   clr.b 128(a0)
    c15c:	|  |   movea.l 4(sp),a0
    c160:	|  |   move.b 128(a0),d0
    c164:	|  |   movea.l 4(sp),a0
    c168:	|  |   move.b d0,127(a0)
    c16c:	|  |   movea.l 4(sp),a0
    c170:	|  |   move.b 127(a0),d0
    c174:	|  |   movea.l 4(sp),a0
    c178:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c17c:	|  |   movea.l 4(sp),a0
    c180:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c186:	|  |   movea.l 4(sp),a0
    c18a:	|  |   clr.b 130(a0)
			break;
    c18e:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c192:	|  |   movea.l 4(sp),a0
    c196:	|  |   clr.b 128(a0)
    c19a:	|  |   movea.l 4(sp),a0
    c19e:	|  |   move.b 128(a0),d0
    c1a2:	|  |   movea.l 4(sp),a0
    c1a6:	|  |   move.b d0,127(a0)
    c1aa:	|  |   movea.l 4(sp),a0
    c1ae:	|  |   move.b 127(a0),d0
    c1b2:	|  |   movea.l 4(sp),a0
    c1b6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c1ba:	|  |   movea.l 4(sp),a0
    c1be:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c1c4:	|  |   movea.l 4(sp),a0
    c1c8:	|  |   clr.b 130(a0)
			break;
    c1cc:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c1d0:	|  |   movea.l 4(sp),a0
    c1d4:	|  |   clr.b 128(a0)
    c1d8:	|  |   movea.l 4(sp),a0
    c1dc:	|  |   move.b 128(a0),d0
    c1e0:	|  |   movea.l 4(sp),a0
    c1e4:	|  |   move.b d0,127(a0)
    c1e8:	|  |   movea.l 4(sp),a0
    c1ec:	|  |   move.b 127(a0),d0
    c1f0:	|  |   movea.l 4(sp),a0
    c1f4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c1f8:	|  |   movea.l 4(sp),a0
    c1fc:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c202:	|  |   movea.l 4(sp),a0
    c206:	|  |   clr.b 130(a0)
			break;
    c20a:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c20e:	|  |   movea.l 4(sp),a0
    c212:	|  |   clr.b 128(a0)
    c216:	|  |   movea.l 4(sp),a0
    c21a:	|  |   move.b 128(a0),d0
    c21e:	|  |   movea.l 4(sp),a0
    c222:	|  |   move.b d0,127(a0)
    c226:	|  |   movea.l 4(sp),a0
    c22a:	|  |   move.b 127(a0),d0
    c22e:	|  |   movea.l 4(sp),a0
    c232:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c236:	|  |   movea.l 4(sp),a0
    c23a:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c23e:	|  |   movea.l 4(sp),a0
    c242:	|  |   clr.b 130(a0)
			break;
    c246:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c24a:	|  |   movea.l 4(sp),a0
    c24e:	|  |   clr.b 128(a0)
    c252:	|  |   movea.l 4(sp),a0
    c256:	|  |   move.b 128(a0),d0
    c25a:	|  |   movea.l 4(sp),a0
    c25e:	|  |   move.b d0,127(a0)
    c262:	|  |   movea.l 4(sp),a0
    c266:	|  |   move.b 127(a0),d0
    c26a:	|  |   movea.l 4(sp),a0
    c26e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c272:	|  |   movea.l 4(sp),a0
    c276:	|  |   st 129(a0)
			moveMe->transparency = 64;
    c27a:	|  |   movea.l 4(sp),a0
    c27e:	|  |   move.b #64,130(a0)
			break;
    c284:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c288:	|  |   movea.l 4(sp),a0
    c28c:	|  |   clr.b 128(a0)
    c290:	|  |   movea.l 4(sp),a0
    c294:	|  |   move.b 128(a0),d0
    c298:	|  |   movea.l 4(sp),a0
    c29c:	|  |   move.b d0,127(a0)
    c2a0:	|  |   movea.l 4(sp),a0
    c2a4:	|  |   move.b 127(a0),d0
    c2a8:	|  |   movea.l 4(sp),a0
    c2ac:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c2b0:	|  |   movea.l 4(sp),a0
    c2b4:	|  |   st 129(a0)
			moveMe->transparency = 128;
    c2b8:	|  |   movea.l 4(sp),a0
    c2bc:	|  |   move.b #-128,130(a0)
			break;
    c2c2:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c2c6:	|  |   movea.l 4(sp),a0
    c2ca:	|  |   clr.b 128(a0)
    c2ce:	|  |   movea.l 4(sp),a0
    c2d2:	|  |   move.b 128(a0),d0
    c2d6:	|  |   movea.l 4(sp),a0
    c2da:	|  |   move.b d0,127(a0)
    c2de:	|  |   movea.l 4(sp),a0
    c2e2:	|  |   move.b 127(a0),d0
    c2e6:	|  |   movea.l 4(sp),a0
    c2ea:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c2ee:	|  |   movea.l 4(sp),a0
    c2f2:	|  |   st 129(a0)
			moveMe->transparency = 192;
    c2f6:	|  |   movea.l 4(sp),a0
    c2fa:	|  |   move.b #-64,130(a0)
			break;
    c300:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c304:	|  |   movea.l 4(sp),a0
    c308:	|  |   move.b #-128,128(a0)
    c30e:	|  |   movea.l 4(sp),a0
    c312:	|  |   move.b 128(a0),d0
    c316:	|  |   movea.l 4(sp),a0
    c31a:	|  |   move.b d0,127(a0)
    c31e:	|  |   movea.l 4(sp),a0
    c322:	|  |   move.b 127(a0),d0
    c326:	|  |   movea.l 4(sp),a0
    c32a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c32e:	|  |   movea.l 4(sp),a0
    c332:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c338:	|  |   movea.l 4(sp),a0
    c33c:	|  |   clr.b 130(a0)
			break;
    c340:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c344:	|  |   movea.l 4(sp),a0
    c348:	|  |   move.b #-128,128(a0)
    c34e:	|  |   movea.l 4(sp),a0
    c352:	|  |   move.b 128(a0),d0
    c356:	|  |   movea.l 4(sp),a0
    c35a:	|  |   move.b d0,127(a0)
    c35e:	|  |   movea.l 4(sp),a0
    c362:	|  |   move.b 127(a0),d0
    c366:	|  |   movea.l 4(sp),a0
    c36a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c36e:	|  |   movea.l 4(sp),a0
    c372:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c378:	|  |   movea.l 4(sp),a0
    c37c:	|  |   clr.b 130(a0)
			break;
    c380:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c384:	|  |   movea.l 4(sp),a0
    c388:	|  |   move.b #-128,128(a0)
    c38e:	|  |   movea.l 4(sp),a0
    c392:	|  |   move.b 128(a0),d0
    c396:	|  |   movea.l 4(sp),a0
    c39a:	|  |   move.b d0,127(a0)
    c39e:	|  |   movea.l 4(sp),a0
    c3a2:	|  |   move.b 127(a0),d0
    c3a6:	|  |   movea.l 4(sp),a0
    c3aa:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c3ae:	|  |   movea.l 4(sp),a0
    c3b2:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c3b8:	|  |   movea.l 4(sp),a0
    c3bc:	|  |   clr.b 130(a0)
			break;
    c3c0:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    c3c4:	|  |   movea.l 4(sp),a0
    c3c8:	|  |   move.b #-128,128(a0)
    c3ce:	|  |   movea.l 4(sp),a0
    c3d2:	|  |   move.b 128(a0),d0
    c3d6:	|  |   movea.l 4(sp),a0
    c3da:	|  |   move.b d0,127(a0)
    c3de:	|  |   movea.l 4(sp),a0
    c3e2:	|  |   move.b 127(a0),d0
    c3e6:	|  |   movea.l 4(sp),a0
    c3ea:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c3ee:	|  |   movea.l 4(sp),a0
    c3f2:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c3f6:	|  |   movea.l 4(sp),a0
    c3fa:	|  |   clr.b 130(a0)
			break;
    c3fe:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c402:	|  |   movea.l 4(sp),a0
    c406:	|  |   st 128(a0)
    c40a:	|  |   movea.l 4(sp),a0
    c40e:	|  |   move.b 128(a0),d0
    c412:	|  |   movea.l 4(sp),a0
    c416:	|  |   move.b d0,127(a0)
    c41a:	|  |   movea.l 4(sp),a0
    c41e:	|  |   move.b 127(a0),d0
    c422:	|  |   movea.l 4(sp),a0
    c426:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c42a:	|  |   movea.l 4(sp),a0
    c42e:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c434:	|  |   movea.l 4(sp),a0
    c438:	|  |   clr.b 130(a0)
			break;
    c43c:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c440:	|  |   movea.l 4(sp),a0
    c444:	|  |   st 128(a0)
    c448:	|  |   movea.l 4(sp),a0
    c44c:	|  |   move.b 128(a0),d0
    c450:	|  |   movea.l 4(sp),a0
    c454:	|  |   move.b d0,127(a0)
    c458:	|  |   movea.l 4(sp),a0
    c45c:	|  |   move.b 127(a0),d0
    c460:	|  |   movea.l 4(sp),a0
    c464:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c468:	|  |   movea.l 4(sp),a0
    c46c:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c472:	|  |   movea.l 4(sp),a0
    c476:	|  |   clr.b 130(a0)
			break;
    c47a:	|  +-- bra.w c52e <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c47e:	|  |   movea.l 4(sp),a0
    c482:	|  |   st 128(a0)
    c486:	|  |   movea.l 4(sp),a0
    c48a:	|  |   move.b 128(a0),d0
    c48e:	|  |   movea.l 4(sp),a0
    c492:	|  |   move.b d0,127(a0)
    c496:	|  |   movea.l 4(sp),a0
    c49a:	|  |   move.b 127(a0),d0
    c49e:	|  |   movea.l 4(sp),a0
    c4a2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c4a6:	|  |   movea.l 4(sp),a0
    c4aa:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c4b0:	|  |   movea.l 4(sp),a0
    c4b4:	|  |   clr.b 130(a0)
			break;
    c4b8:	|  +-- bra.s c52e <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c4ba:	|  |   movea.l 4(sp),a0
    c4be:	|  |   st 128(a0)
    c4c2:	|  |   movea.l 4(sp),a0
    c4c6:	|  |   move.b 128(a0),d0
    c4ca:	|  |   movea.l 4(sp),a0
    c4ce:	|  |   move.b d0,127(a0)
    c4d2:	|  |   movea.l 4(sp),a0
    c4d6:	|  |   move.b 127(a0),d0
    c4da:	|  |   movea.l 4(sp),a0
    c4de:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c4e2:	|  |   movea.l 4(sp),a0
    c4e6:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c4ea:	|  |   movea.l 4(sp),a0
    c4ee:	|  |   clr.b 130(a0)
			break;
    c4f2:	|  +-- bra.s c52e <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c4f4:	'--|-> movea.l 4(sp),a0
    c4f8:	   |   clr.b 128(a0)
    c4fc:	   |   movea.l 4(sp),a0
    c500:	   |   move.b 128(a0),d0
    c504:	   |   movea.l 4(sp),a0
    c508:	   |   move.b d0,127(a0)
    c50c:	   |   movea.l 4(sp),a0
    c510:	   |   move.b 127(a0),d0
    c514:	   |   movea.l 4(sp),a0
    c518:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c51c:	   |   movea.l 4(sp),a0
    c520:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    c524:	   |   movea.l 4(sp),a0
    c528:	   |   clr.b 130(a0)
			break;
    c52c:	   |   nop
	}
}
    c52e:	   '-> nop
    c530:	       rts

0000c532 <shufflePeople>:

void shufflePeople () {
    c532:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    c536:	             move.l #125220,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    c53e:	             move.l 1e924 <allPeople>,d0
    c544:	,----------- beq.w c61a <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    c548:	|     ,----- bra.w c60a <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    c54c:	|  ,--|----> movea.l 16(sp),a0
    c550:	|  |  |      movea.l (a0),a0
    c552:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    c558:	|  |  |      movea.l 16(sp),a0
    c55c:	|  |  |      movea.l (a0),a0
    c55e:	|  |  |      move.l 118(a0),d0
    c562:	|  |  |      moveq #1,d1
    c564:	|  |  |      and.l d1,d0
    c566:	|  |  |  ,-- beq.s c57e <shufflePeople+0x4c>
    c568:	|  |  |  |   move.l #1148846080,-(sp)
    c56e:	|  |  |  |   move.l 16(sp),-(sp)
    c572:	|  |  |  |   jsr 1876c <__addsf3>
    c578:	|  |  |  |   addq.l #8,sp
    c57a:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    c57e:	|  |  |  '-> movea.l 16(sp),a0
    c582:	|  |  |      movea.l (a0),a0
    c584:	|  |  |      movea.l 36(a0),a0
    c588:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    c58e:	|  |  |      movea.l 16(sp),a0
    c592:	|  |  |      movea.l (a0),a0
    c594:	|  |  |      movea.l 36(a0),a0
    c598:	|  |  |      move.l 118(a0),d0
    c59c:	|  |  |      moveq #1,d1
    c59e:	|  |  |      and.l d1,d0
    c5a0:	|  |  |  ,-- beq.s c5b8 <shufflePeople+0x86>
    c5a2:	|  |  |  |   move.l #1148846080,-(sp)
    c5a8:	|  |  |  |   move.l 12(sp),-(sp)
    c5ac:	|  |  |  |   jsr 1876c <__addsf3>
    c5b2:	|  |  |  |   addq.l #8,sp
    c5b4:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    c5b8:	|  |  |  '-> move.l 8(sp),-(sp)
    c5bc:	|  |  |      move.l 16(sp),-(sp)
    c5c0:	|  |  |      jsr 18b1c <__gtsf2>
    c5c6:	|  |  |      addq.l #8,sp
    c5c8:	|  |  |      tst.l d0
    c5ca:	|  |  |  ,-- ble.s c5fc <shufflePeople+0xca>
			A = (*thisReference);
    c5cc:	|  |  |  |   movea.l 16(sp),a0
    c5d0:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    c5d4:	|  |  |  |   movea.l 16(sp),a0
    c5d8:	|  |  |  |   movea.l (a0),a0
    c5da:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    c5de:	|  |  |  |   movea.l (sp),a0
    c5e0:	|  |  |  |   move.l 36(a0),d0
    c5e4:	|  |  |  |   movea.l 4(sp),a0
    c5e8:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    c5ec:	|  |  |  |   movea.l (sp),a0
    c5ee:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    c5f4:	|  |  |  |   movea.l 16(sp),a0
    c5f8:	|  |  |  |   move.l (sp),(a0)
    c5fa:	|  |  +--|-- bra.s c60a <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    c5fc:	|  |  |  '-> movea.l 16(sp),a0
    c600:	|  |  |      move.l (a0),d0
    c602:	|  |  |      moveq #36,d1
    c604:	|  |  |      add.l d0,d1
    c606:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    c60a:	|  |  '----> movea.l 16(sp),a0
    c60e:	|  |         movea.l (a0),a0
    c610:	|  |         move.l 36(a0),d0
    c614:	|  '-------- bne.w c54c <shufflePeople+0x1a>
    c618:	|        ,-- bra.s c61c <shufflePeople+0xea>
	if (!allPeople) return;
    c61a:	'--------|-> nop
		}
	}
}
    c61c:	         '-> lea 20(sp),sp
    c620:	             rts

0000c622 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    c622:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    c624:	       tst.l 8(sp)
    c628:	   ,-- bgt.s c62e <setCharacterWalkSpeed+0xc>
    c62a:	   |   clr.w d0
    c62c:	,--|-- bra.s c64c <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    c62e:	|  '-> move.l 12(sp),-(sp)
    c632:	|      jsr b018 <findPerson>
    c638:	|      addq.l #4,sp
    c63a:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    c63c:	|  ,-- bne.s c642 <setCharacterWalkSpeed+0x20>
    c63e:	|  |   clr.w d0
    c640:	+--|-- bra.s c64c <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    c642:	|  '-> movea.l (sp),a0
    c644:	|      move.l 8(sp),28(a0)
	return TRUE;
    c64a:	|      moveq #1,d0
}
    c64c:	'----> addq.l #4,sp
    c64e:	       rts

0000c650 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    c650:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c652:	       move.l 8(sp),-(sp)
    c656:	       jsr b018 <findPerson>
    c65c:	       addq.l #4,sp
    c65e:	       move.l d0,(sp)
    if (thisPerson) {
    c660:	,----- beq.s c680 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    c662:	|      movea.l (sp),a0
    c664:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    c66a:	|      moveq #2,d0
    c66c:	|      and.l 12(sp),d0
    c670:	|  ,-- beq.s c67c <setPersonExtra+0x2c>
    c672:	|  |   movea.l (sp),a0
    c674:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    c67c:	|  '-> moveq #1,d0
    c67e:	|  ,-- bra.s c682 <setPersonExtra+0x32>
    }
    return FALSE;
    c680:	'--|-> clr.w d0
}
    c682:	   '-> addq.l #4,sp
    c684:	       rts

0000c686 <setScale>:


void setScale (short int h, short int d) {
    c686:	subq.l #4,sp
    c688:	move.l 8(sp),d1
    c68c:	move.l 12(sp),d0
    c690:	move.w d1,d1
    c692:	move.w d1,2(sp)
    c696:	move.w d0,d0
    c698:	move.w d0,(sp)
	scaleHorizon = h;
    c69a:	move.w 2(sp),1e23a <scaleHorizon>
	scaleDivide = d;
    c6a2:	move.w (sp),1e23c <scaleDivide>
}
    c6a8:	nop
    c6aa:	addq.l #4,sp
    c6ac:	rts

0000c6ae <setShown>:

void setShown (BOOL h, int ob) {
    c6ae:	    subq.l #8,sp
    c6b0:	    move.l 12(sp),d0
    c6b4:	    move.w d0,d0
    c6b6:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    c6ba:	    move.l 16(sp),-(sp)
    c6be:	    jsr b018 <findPerson>
    c6c4:	    addq.l #4,sp
    c6c6:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    c6ca:	,-- beq.s c6d6 <setShown+0x28>
    c6cc:	|   movea.l 4(sp),a0
    c6d0:	|   move.w 2(sp),104(a0)
}
    c6d6:	'-> nop
    c6d8:	    addq.l #8,sp
    c6da:	    rts

0000c6dc <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    c6dc:	       subq.l #8,sp
    c6de:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    c6e0:	       movea.l 16(sp),a0
    c6e4:	       move.l 92(a0),d0
    c6e8:	       move.l d0,d1
    c6ea:	       addi.l #360,d1
    c6f0:	       movea.l 16(sp),a0
    c6f4:	       move.l 96(a0),d0
    c6f8:	       move.l d1,d2
    c6fa:	       sub.l d0,d2
    c6fc:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    c700:	       movea.l 16(sp),a0
    c704:	       move.l 122(a0),d0
    c708:	   ,-- beq.s c714 <spinStep+0x38>
    c70a:	   |   movea.l 16(sp),a0
    c70e:	   |   move.l 122(a0),d0
    c712:	,--|-- bra.s c72e <spinStep+0x52>
    c714:	|  '-> movea.l 16(sp),a0
    c718:	|      movea.l 80(a0),a0
    c71c:	|      move.l 4(a0),d0
    c720:	|      move.l d0,-(sp)
    c722:	|      pea 168 <decodeFilename+0x50>
    c726:	|      jsr 18f88 <__divsi3>
    c72c:	|      addq.l #8,sp
    c72e:	'----> move.l d0,4(sp)
	while (diff > 180) {
    c732:	   ,-- bra.s c73c <spinStep+0x60>
		diff -= 360;
    c734:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    c73c:	|  '-> cmpi.l #180,8(sp)
    c744:	'----- bgt.s c734 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    c746:	       move.l 8(sp),d0
    c74a:	       cmp.l 4(sp),d0
    c74e:	   ,-- blt.s c76c <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    c750:	   |   movea.l 16(sp),a0
    c754:	   |   move.l 92(a0),d0
    c758:	   |   sub.l 4(sp),d0
    c75c:	   |   move.l d0,-(sp)
    c75e:	   |   move.l 20(sp),-(sp)
    c762:	   |   jsr c84c <turnMeAngle>
    c768:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    c76a:	,--|-- bra.s c7b2 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    c76c:	|  '-> move.l 4(sp),d0
    c770:	|      neg.l d0
    c772:	|      cmp.l 8(sp),d0
    c776:	|  ,-- blt.s c794 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    c778:	|  |   movea.l 16(sp),a0
    c77c:	|  |   move.l 92(a0),d0
    c780:	|  |   add.l 4(sp),d0
    c784:	|  |   move.l d0,-(sp)
    c786:	|  |   move.l 20(sp),-(sp)
    c78a:	|  |   jsr c84c <turnMeAngle>
    c790:	|  |   addq.l #8,sp
}
    c792:	+--|-- bra.s c7b2 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    c794:	|  '-> movea.l 16(sp),a0
    c798:	|      move.l 96(a0),d0
    c79c:	|      move.l d0,-(sp)
    c79e:	|      move.l 20(sp),-(sp)
    c7a2:	|      jsr c84c <turnMeAngle>
    c7a8:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    c7aa:	|      movea.l 16(sp),a0
    c7ae:	|      clr.w 66(a0)
}
    c7b2:	'----> nop
    c7b4:	       move.l (sp)+,d2
    c7b6:	       addq.l #8,sp
    c7b8:	       rts

0000c7ba <stopPerson>:


BOOL stopPerson (int o) {
    c7ba:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    c7bc:	       move.l 8(sp),-(sp)
    c7c0:	       jsr b018 <findPerson>
    c7c6:	       addq.l #4,sp
    c7c8:	       move.l d0,(sp)
    if (moveMe)
    c7ca:	,----- beq.s c808 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    c7cc:	|      movea.l (sp),a0
    c7ce:	|      move.l 68(a0),d0
    c7d2:	+----- beq.s c808 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    c7d4:	|      movea.l (sp),a0
    c7d6:	|      move.l 68(a0),d0
    c7da:	|      move.l d0,-(sp)
    c7dc:	|      jsr 55c2 <abortFunction>
    c7e2:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    c7e4:	|      movea.l (sp),a0
    c7e6:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    c7ea:	|      movea.l (sp),a0
    c7ec:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    c7f0:	|      movea.l (sp),a0
    c7f2:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    c7f6:	|      clr.l -(sp)
    c7f8:	|      move.l 4(sp),-(sp)
    c7fc:	|      jsr 46ee <setFrames>
    c802:	|      addq.l #8,sp
            return TRUE;
    c804:	|      moveq #1,d0
    c806:	|  ,-- bra.s c80a <stopPerson+0x50>
        }
    return FALSE;
    c808:	'--|-> clr.w d0
}
    c80a:	   '-> addq.l #4,sp
    c80c:	       rts

0000c80e <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    c80e:	       subq.l #8,sp
	int total = 0;
    c810:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c814:	       clr.l (sp)
    c816:	   ,-- bra.s c838 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    c818:	,--|-> movea.l 12(sp),a0
    c81c:	|  |   movea.l 4(a0),a0
    c820:	|  |   move.l (sp),d1
    c822:	|  |   move.l d1,d0
    c824:	|  |   add.l d0,d0
    c826:	|  |   add.l d1,d0
    c828:	|  |   add.l d0,d0
    c82a:	|  |   add.l d0,d0
    c82c:	|  |   adda.l d0,a0
    c82e:	|  |   move.l 4(a0),d0
    c832:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c836:	|  |   addq.l #1,(sp)
    c838:	|  '-> movea.l 12(sp),a0
    c83c:	|      move.l 8(a0),d0
    c840:	|      cmp.l (sp),d0
    c842:	'----- bgt.s c818 <timeForAnim+0xa>
	}
	return total;
    c844:	       move.l 4(sp),d0
}
    c848:	       addq.l #8,sp
    c84a:	       rts

0000c84c <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    c84c:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    c84e:	       movea.l 8(sp),a0
    c852:	       movea.l 80(a0),a0
    c856:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    c85a:	       movea.l 8(sp),a0
    c85e:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    c864:	       move.l (sp),-(sp)
    c866:	       pea b4 <_start+0xb4>
    c86a:	       jsr 18f88 <__divsi3>
    c870:	       addq.l #8,sp
    c872:	       move.l d0,d1
    c874:	       addi.l #180,d1
    c87a:	       movea.l 8(sp),a0
    c87e:	       move.l 100(a0),d0
    c882:	       add.l d1,d0
    c884:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    c888:	   ,-- bra.s c892 <turnMeAngle+0x46>
    c88a:	,--|-> addi.l #-360,12(sp)
    c892:	|  '-> cmpi.l #359,12(sp)
    c89a:	'----- bgt.s c88a <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    c89c:	       move.l (sp),-(sp)
    c89e:	       move.l 16(sp),-(sp)
    c8a2:	       jsr 18f0a <__mulsi3>
    c8a8:	       addq.l #8,sp
    c8aa:	       pea 168 <decodeFilename+0x50>
    c8ae:	       move.l d0,-(sp)
    c8b0:	       jsr 18f88 <__divsi3>
    c8b6:	       addq.l #8,sp
    c8b8:	       movea.l 8(sp),a0
    c8bc:	       move.l d0,106(a0)
}
    c8c0:	       nop
    c8c2:	       addq.l #4,sp
    c8c4:	       rts

0000c8c6 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    c8c6:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c8c8:	          move.l 8(sp),-(sp)
    c8cc:	          jsr b018 <findPerson>
    c8d2:	          addq.l #4,sp
    c8d4:	          move.l d0,(sp)
    if (thisPerson) {
    c8d6:	,-------- beq.s c936 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    c8d8:	|         movea.l (sp),a0
    c8da:	|         move.l 68(a0),d0
    c8de:	|     ,-- beq.s c8f0 <turnPersonToFace+0x2a>
    c8e0:	|     |   movea.l (sp),a0
    c8e2:	|     |   move.l 68(a0),d0
    c8e6:	|     |   move.l d0,-(sp)
    c8e8:	|     |   jsr 55c2 <abortFunction>
    c8ee:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    c8f0:	|     '-> movea.l (sp),a0
    c8f2:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    c8f6:	|         movea.l (sp),a0
    c8f8:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    c8fc:	|         movea.l (sp),a0
    c8fe:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    c902:	|         move.l 12(sp),-(sp)
    c906:	|         move.l 4(sp),-(sp)
    c90a:	|         jsr c84c <turnMeAngle>
    c910:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    c912:	|         movea.l 1e802 <speech>,a0
    c918:	|         move.l (a0),d0
    c91a:	|         cmp.l (sp),d0
    c91c:	|  ,----- bne.s c922 <turnPersonToFace+0x5c>
    c91e:	|  |      moveq #2,d0
    c920:	|  |  ,-- bra.s c924 <turnPersonToFace+0x5e>
    c922:	|  '--|-> moveq #0,d0
    c924:	|     '-> move.l d0,-(sp)
    c926:	|         move.l 4(sp),-(sp)
    c92a:	|         jsr 46ee <setFrames>
    c930:	|         addq.l #8,sp
        return TRUE;
    c932:	|         moveq #1,d0
    c934:	|     ,-- bra.s c938 <turnPersonToFace+0x72>
    }
    return FALSE;
    c936:	'-----|-> clr.w d0
}
    c938:	      '-> addq.l #4,sp
    c93a:	          rts

0000c93c <walkAllPeople>:

void walkAllPeople() {
    c93c:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c93e:	             move.l 1e924 <allPeople>,(sp)

	while (thisPerson) {
    c944:	   ,-------- bra.s c9b4 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c946:	,--|-------> movea.l (sp),a0
    c948:	|  |         move.w 64(a0),d0
    c94c:	|  |     ,-- beq.s c960 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c94e:	|  |     |   pea 1 <_start+0x1>
    c952:	|  |     |   move.l 4(sp),-(sp)
    c956:	|  |     |   jsr c9c0 <walkMe>
    c95c:	|  |     |   addq.l #8,sp
    c95e:	|  |  ,--|-- bra.s c980 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c960:	|  |  |  '-> movea.l (sp),a0
    c962:	|  |  |      move.w 66(a0),d0
    c966:	|  |  +----- beq.s c980 <walkAllPeople+0x44>
			spinStep(thisPerson);
    c968:	|  |  |      move.l (sp),-(sp)
    c96a:	|  |  |      jsr c6dc <spinStep>
    c970:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c972:	|  |  |      clr.l -(sp)
    c974:	|  |  |      move.l 4(sp),-(sp)
    c978:	|  |  |      jsr 46ee <setFrames>
    c97e:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c980:	|  |  '----> movea.l (sp),a0
    c982:	|  |         move.w 64(a0),d0
    c986:	|  |     ,-- bne.s c9ae <walkAllPeople+0x72>
    c988:	|  |     |   movea.l (sp),a0
    c98a:	|  |     |   move.w 66(a0),d0
    c98e:	|  |     +-- bne.s c9ae <walkAllPeople+0x72>
    c990:	|  |     |   movea.l (sp),a0
    c992:	|  |     |   move.l 68(a0),d0
    c996:	|  |     +-- beq.s c9ae <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c998:	|  |     |   movea.l (sp),a0
    c99a:	|  |     |   move.l 68(a0),d0
    c99e:	|  |     |   move.l d0,-(sp)
    c9a0:	|  |     |   jsr 79c6 <restartFunction>
    c9a6:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c9a8:	|  |     |   movea.l (sp),a0
    c9aa:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c9ae:	|  |     '-> movea.l (sp),a0
    c9b0:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c9b4:	|  '-------> tst.l (sp)
    c9b6:	'----------- bne.s c946 <walkAllPeople+0xa>
	}
}
    c9b8:	             nop
    c9ba:	             nop
    c9bc:	             addq.l #4,sp
    c9be:	             rts

0000c9c0 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c9c0:	                lea -20(sp),sp
    c9c4:	                move.l d3,-(sp)
    c9c6:	                move.l d2,-(sp)
    c9c8:	                move.l 36(sp),d0
    c9cc:	                move.w d0,d0
    c9ce:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c9d2:	                cmpi.w #-1,10(sp)
    c9d8:	,-------------- bne.s c9e0 <walkMe+0x20>
    c9da:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c9e0:	>-------------> movea.l 32(sp),a0
    c9e4:	|               move.l 48(a0),d0
    c9e8:	|               move.l d0,-(sp)
    c9ea:	|               jsr 189b0 <__floatsisf>
    c9f0:	|               addq.l #4,sp
    c9f2:	|               move.l d0,d1
    c9f4:	|               movea.l 32(sp),a0
    c9f8:	|               move.l (a0),d0
    c9fa:	|               move.l d0,-(sp)
    c9fc:	|               move.l d1,-(sp)
    c9fe:	|               jsr 18ca4 <__subsf3>
    ca04:	|               addq.l #8,sp
    ca06:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    ca0a:	|               movea.l 32(sp),a0
    ca0e:	|               move.l 52(a0),d0
    ca12:	|               move.l d0,-(sp)
    ca14:	|               jsr 189b0 <__floatsisf>
    ca1a:	|               addq.l #4,sp
    ca1c:	|               move.l d0,d1
    ca1e:	|               movea.l 32(sp),a0
    ca22:	|               move.l 4(a0),d0
    ca26:	|               move.l d0,-(sp)
    ca28:	|               move.l d1,-(sp)
    ca2a:	|               jsr 18ca4 <__subsf3>
    ca30:	|               addq.l #8,sp
    ca32:	|               move.l d0,-(sp)
    ca34:	|               move.l d0,-(sp)
    ca36:	|               jsr 1876c <__addsf3>
    ca3c:	|               addq.l #8,sp
    ca3e:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    ca42:	|               movea.l 32(sp),a0
    ca46:	|               move.l 32(a0),d2
    ca4a:	|               movea.l 32(sp),a0
    ca4e:	|               move.l 28(a0),d0
    ca52:	|               move.l d0,-(sp)
    ca54:	|               jsr 189b0 <__floatsisf>
    ca5a:	|               addq.l #4,sp
    ca5c:	|               move.l d0,-(sp)
    ca5e:	|               move.l d2,-(sp)
    ca60:	|               jsr 18a62 <__mulsf3>
    ca66:	|               addq.l #8,sp
    ca68:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    ca6c:	|               move.l 24(sp),-(sp)
    ca70:	|               jsr 188d2 <__extendsfdf2>
    ca76:	|               addq.l #4,sp
    ca78:	|               move.l #-1717986918,-(sp)
    ca7e:	|               move.l #1070176665,-(sp)
    ca84:	|               move.l d1,-(sp)
    ca86:	|               move.l d0,-(sp)
    ca88:	|               jsr 18b88 <__ltdf2>
    ca8e:	|               lea 16(sp),sp
    ca92:	|               tst.l d0
    ca94:	|           ,-- bge.s ca9e <walkMe+0xde>
    ca96:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    ca9e:	|           '-> move.l 20(sp),-(sp)
    caa2:	|               jsr 18948 <__fixsfsi>
    caa8:	|               addq.l #4,sp
    caaa:	|               move.l d0,-(sp)
    caac:	|               jsr 9c08 <TF_abs>
    cab2:	|               addq.l #4,sp
    cab4:	|               move.l d0,d2
    cab6:	|               move.l 16(sp),-(sp)
    caba:	|               jsr 18948 <__fixsfsi>
    cac0:	|               addq.l #4,sp
    cac2:	|               move.l d0,-(sp)
    cac4:	|               jsr 9c08 <TF_abs>
    caca:	|               addq.l #4,sp
    cacc:	|               cmp.l d2,d0
    cace:	|        ,----- bgt.s caf2 <walkMe+0x132>
    cad0:	|        |      move.l 20(sp),-(sp)
    cad4:	|        |      jsr 18948 <__fixsfsi>
    cada:	|        |      addq.l #4,sp
    cadc:	|        |      move.l d0,-(sp)
    cade:	|        |      jsr 9c08 <TF_abs>
    cae4:	|        |      addq.l #4,sp
    cae6:	|        |      move.l d0,-(sp)
    cae8:	|        |      jsr 189b0 <__floatsisf>
    caee:	|        |      addq.l #4,sp
    caf0:	|        |  ,-- bra.s cb12 <walkMe+0x152>
    caf2:	|        '--|-> move.l 16(sp),-(sp)
    caf6:	|           |   jsr 18948 <__fixsfsi>
    cafc:	|           |   addq.l #4,sp
    cafe:	|           |   move.l d0,-(sp)
    cb00:	|           |   jsr 9c08 <TF_abs>
    cb06:	|           |   addq.l #4,sp
    cb08:	|           |   move.l d0,-(sp)
    cb0a:	|           |   jsr 189b0 <__floatsisf>
    cb10:	|           |   addq.l #4,sp
    cb12:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    cb16:	|               move.l 12(sp),-(sp)
    cb1a:	|               jsr 18948 <__fixsfsi>
    cb20:	|               addq.l #4,sp
    cb22:	|               move.l d0,-(sp)
    cb24:	|               jsr 9c08 <TF_abs>
    cb2a:	|               addq.l #4,sp
    cb2c:	|               move.l d0,-(sp)
    cb2e:	|               jsr 189b0 <__floatsisf>
    cb34:	|               addq.l #4,sp
    cb36:	|               move.l d0,-(sp)
    cb38:	|               move.l 28(sp),-(sp)
    cb3c:	|               jsr 18bd6 <__ltsf2>
    cb42:	|               addq.l #8,sp
    cb44:	|               tst.l d0
    cb46:	|        ,----- bge.w cbf8 <walkMe+0x238>
			if (thisPerson->spinning) {
    cb4a:	|        |      movea.l 32(sp),a0
    cb4e:	|        |      move.w 66(a0),d0
    cb52:	|        |  ,-- beq.s cb70 <walkMe+0x1b0>
				spinStep(thisPerson);
    cb54:	|        |  |   move.l 32(sp),-(sp)
    cb58:	|        |  |   jsr c6dc <spinStep>
    cb5e:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    cb60:	|        |  |   pea 1 <_start+0x1>
    cb64:	|        |  |   move.l 36(sp),-(sp)
    cb68:	|        |  |   jsr 46ee <setFrames>
    cb6e:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    cb70:	|        |  '-> move.l 24(sp),-(sp)
    cb74:	|        |      move.l 16(sp),-(sp)
    cb78:	|        |      jsr 18866 <__divsf3>
    cb7e:	|        |      addq.l #8,sp
    cb80:	|        |      move.l d0,24(sp)
			if (move)
    cb84:	|        |      tst.w 10(sp)
    cb88:	|        |  ,-- beq.s cbf2 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    cb8a:	|        |  |   movea.l 32(sp),a0
    cb8e:	|        |  |   move.l 4(a0),d2
    cb92:	|        |  |   move.l 24(sp),d0
    cb96:	|        |  |   move.l d0,-(sp)
    cb98:	|        |  |   move.l d0,-(sp)
    cb9a:	|        |  |   jsr 1876c <__addsf3>
    cba0:	|        |  |   addq.l #8,sp
    cba2:	|        |  |   move.l d0,-(sp)
    cba4:	|        |  |   move.l 20(sp),-(sp)
    cba8:	|        |  |   jsr 18866 <__divsf3>
    cbae:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    cbb0:	|        |  |   move.l d0,-(sp)
    cbb2:	|        |  |   move.l d2,-(sp)
    cbb4:	|        |  |   jsr 1876c <__addsf3>
    cbba:	|        |  |   addq.l #8,sp
    cbbc:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    cbbe:	|        |  |   movea.l 32(sp),a0
    cbc2:	|        |  |   move.l (a0),d3
    cbc4:	|        |  |   move.l 24(sp),-(sp)
    cbc8:	|        |  |   move.l 24(sp),-(sp)
    cbcc:	|        |  |   jsr 18866 <__divsf3>
    cbd2:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    cbd4:	|        |  |   move.l d0,-(sp)
    cbd6:	|        |  |   move.l d3,-(sp)
    cbd8:	|        |  |   jsr 1876c <__addsf3>
    cbde:	|        |  |   addq.l #8,sp
    cbe0:	|        |  |   move.l d2,-(sp)
    cbe2:	|        |  |   move.l d0,-(sp)
    cbe4:	|        |  |   move.l 40(sp),-(sp)
    cbe8:	|        |  |   jsr b7c2 <moveAndScale>
    cbee:	|        |  |   lea 12(sp),sp
			return TRUE;
    cbf2:	|        |  '-> moveq #1,d0
    cbf4:	|  ,-----|----- bra.w cca6 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    cbf8:	|  |     '----> movea.l 32(sp),a0
    cbfc:	|  |            move.l 56(a0),d0
    cc00:	|  |            moveq #-1,d1
    cc02:	|  |            cmp.l d0,d1
    cc04:	|  |        ,-- bne.s cc3c <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    cc06:	|  |        |   movea.l 32(sp),a0
    cc0a:	|  |        |   move.l 110(a0),d0
    cc0e:	|  |        |   moveq #-1,d1
    cc10:	|  |        |   cmp.l d0,d1
    cc12:	|  |  ,-----|-- beq.s cc50 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    cc14:	|  |  |     |   movea.l 32(sp),a0
    cc18:	|  |  |     |   move.l 110(a0),d0
    cc1c:	|  |  |     |   movea.l 32(sp),a0
    cc20:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    cc24:	|  |  |     |   movea.l 32(sp),a0
    cc28:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    cc2e:	|  |  |     |   move.l 32(sp),-(sp)
    cc32:	|  |  |     |   jsr c6dc <spinStep>
    cc38:	|  |  |     |   addq.l #4,sp
			}
			break;
    cc3a:	|  |  +-----|-- bra.s cc50 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    cc3c:	|  |  |     '-> move.l 32(sp),-(sp)
    cc40:	|  |  |         jsr a37a <doBorderStuff>
    cc46:	|  |  |         addq.l #4,sp
    cc48:	|  |  |         tst.w d0
    cc4a:	|  |  |  ,----- beq.s cc54 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    cc4c:	'--|--|--|----- bra.w c9e0 <walkMe+0x20>
			break;
    cc50:	   |  '--|----> nop
    cc52:	   |     |  ,-- bra.s cc56 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    cc54:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    cc56:	   |        '-> movea.l 32(sp),a0
    cc5a:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    cc5e:	   |            clr.l -(sp)
    cc60:	   |            move.l 36(sp),-(sp)
    cc64:	   |            jsr 46ee <setFrames>
    cc6a:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    cc6c:	   |            movea.l 32(sp),a0
    cc70:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    cc74:	   |            move.l d0,-(sp)
    cc76:	   |            jsr 189b0 <__floatsisf>
    cc7c:	   |            addq.l #4,sp
    cc7e:	   |            move.l d0,d2
				 thisPerson->walkToX,
    cc80:	   |            movea.l 32(sp),a0
    cc84:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    cc88:	   |            move.l d0,-(sp)
    cc8a:	   |            jsr 189b0 <__floatsisf>
    cc90:	   |            addq.l #4,sp
    cc92:	   |            move.l d2,-(sp)
    cc94:	   |            move.l d0,-(sp)
    cc96:	   |            move.l 40(sp),-(sp)
    cc9a:	   |            jsr b7c2 <moveAndScale>
    cca0:	   |            lea 12(sp),sp
	return FALSE;
    cca4:	   |            clr.w d0
}
    cca6:	   '----------> move.l (sp)+,d2
    cca8:	                move.l (sp)+,d3
    ccaa:	                lea 20(sp),sp
    ccae:	                rts

0000ccb0 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    ccb0:	       subq.l #8,sp
    ccb2:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    ccb4:	   ,-- bra.s cce4 <clearStackLib+0x34>
		k = stackLib;
    ccb6:	,--|-> move.l 1e950 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    ccbe:	|  |   movea.l 1e950 <stackLib>,a0
    ccc4:	|  |   move.l 4(a0),d0
    ccc8:	|  |   move.l d0,1e950 <stackLib>
		FreeVec(k);
    ccce:	|  |   move.l 8(sp),4(sp)
    ccd4:	|  |   move.l 1e8c0 <SysBase>,d0
    ccda:	|  |   movea.l d0,a6
    ccdc:	|  |   movea.l 4(sp),a1
    cce0:	|  |   jsr -690(a6)
	while (stackLib) {
    cce4:	|  '-> move.l 1e950 <stackLib>,d0
    ccea:	'----- bne.s ccb6 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    ccec:	       clr.l 1e94c <stackLibTotal>
}
    ccf2:	       nop
    ccf4:	       movea.l (sp)+,a6
    ccf6:	       addq.l #8,sp
    ccf8:	       rts

0000ccfa <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    ccfa:	          lea -128(sp),sp
    ccfe:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    cd02:	      ,-- bra.s cd14 <loadGame+0x1a>
    cd04:	   ,--|-> move.l 1e856 <allRunningFunctions>,d0
    cd0a:	   |  |   move.l d0,-(sp)
    cd0c:	   |  |   jsr 65e6 <finishFunction>
    cd12:	   |  |   addq.l #4,sp
    cd14:	   |  '-> move.l 1e856 <allRunningFunctions>,d0
    cd1a:	   '----- bne.s cd04 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    cd1c:	          pea 1e954 <ssgVersion>
    cd22:	          pea 1a6f7 <PutChar+0x16d7>
    cd28:	          pea 41 <_start+0x41>
    cd2c:	          pea 53 <_start+0x53>
    cd30:	          move.l 160(sp),-(sp)
    cd34:	          jsr 75de <openAndVerify>
    cd3a:	          lea 20(sp),sp
    cd3e:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    cd42:	      ,-- bne.s cd4a <loadGame+0x50>
    cd44:	      |   clr.w d0
    cd46:	,-----|-- bra.w cff0 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    cd4a:	|     '-> move.l 112(sp),108(sp)
    cd50:	|         lea 140(sp),a0
    cd54:	|         lea -126(a0),a0
    cd58:	|         move.l a0,120(sp)
    cd5c:	|         moveq #8,d0
    cd5e:	|         move.l d0,116(sp)
    cd62:	|         move.l 1e8c8 <DOSBase>,d0
    cd68:	|         movea.l d0,a6
    cd6a:	|         move.l 108(sp),d1
    cd6e:	|         move.l 120(sp),d2
    cd72:	|         move.l 116(sp),d3
    cd76:	|         jsr -42(a6)
    cd7a:	|         move.l d0,132(sp)
    cd7e:	|         move.l 132(sp),d0
    cd82:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    cd86:	|         moveq #8,d0
    cd88:	|         cmp.l 128(sp),d0
    cd8c:	|     ,-- beq.s cd9c <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    cd8e:	|     |   pea 1a718 <PutChar+0x16f8>
    cd94:	|     |   jsr 1857e <KPrintF>
    cd9a:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    cd9c:	|     '-> move.l 14(sp),d1
    cda0:	|         move.l 1e860 <fileTime>,d0
    cda6:	|         cmp.l d1,d0
    cda8:	|     ,-- bne.s cdb8 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    cdaa:	|     |   move.l 18(sp),d1
    cdae:	|     |   move.l 1e864 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    cdb4:	|     |   cmp.l d1,d0
    cdb6:	|  ,--|-- beq.s cdd8 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    cdb8:	|  |  '-> move.l 144(sp),-(sp)
    cdbc:	|  |      pea 1a734 <PutChar+0x1714>
    cdc2:	|  |      pea 1a7fb <PutChar+0x17db>
    cdc8:	|  |      jsr 1857e <KPrintF>
    cdce:	|  |      lea 12(sp),sp
		return FALSE; 
    cdd2:	|  |      clr.w d0
    cdd4:	+--|----- bra.w cff0 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    cdd8:	|  '----> move.l 112(sp),124(sp)
    cdde:	|         move.l 1e8c8 <DOSBase>,d0
    cde4:	|         movea.l d0,a6
    cde6:	|         move.l 124(sp),d1
    cdea:	|         jsr -306(a6)
    cdee:	|         move.l d0,136(sp)
    cdf2:	|         move.l 136(sp),d0
    cdf6:	|         move.l d0,d0
    cdf8:	|         move.w d0,1e104 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    cdfe:	|         move.l 112(sp),100(sp)
    ce04:	|         move.l 1e8c8 <DOSBase>,d0
    ce0a:	|         movea.l d0,a6
    ce0c:	|         move.l 100(sp),d1
    ce10:	|         jsr -306(a6)
    ce14:	|         move.l d0,96(sp)
    ce18:	|         move.l 96(sp),d0
    ce1c:	|         move.l d0,d0
    ce1e:	|         move.w d0,1e85e <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    ce24:	|         move.l 112(sp),92(sp)
    ce2a:	|         move.l 1e8c8 <DOSBase>,d0
    ce30:	|         movea.l d0,a6
    ce32:	|         move.l 92(sp),d1
    ce36:	|         jsr -306(a6)
    ce3a:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    ce3e:	|         move.l 112(sp),84(sp)
    ce44:	|         move.l 1e8c8 <DOSBase>,d0
    ce4a:	|         movea.l d0,a6
    ce4c:	|         move.l 84(sp),d1
    ce50:	|         jsr -306(a6)
    ce54:	|         move.l d0,80(sp)
    ce58:	|         move.l 80(sp),d0
    ce5c:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    ce60:	|     ,-- beq.s ce94 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    ce62:	|     |   move.l 112(sp),-(sp)
    ce66:	|     |   jsr 6bc <get2bytes>
    ce6c:	|     |   addq.l #4,sp
    ce6e:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    ce72:	|     |   move.l 112(sp),-(sp)
    ce76:	|     |   jsr 6bc <get2bytes>
    ce7c:	|     |   addq.l #4,sp
    ce7e:	|     |   move.l d0,1e9b8 <fontHeight>
		charOrder = readString(fp);		
    ce84:	|     |   move.l 112(sp),-(sp)
    ce88:	|     |   jsr b02 <readString>
    ce8e:	|     |   addq.l #4,sp
    ce90:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    ce94:	|     '-> move.l 104(sp),70(sp)
    ce9a:	|         move.l 1e8c0 <SysBase>,d0
    cea0:	|         movea.l d0,a6
    cea2:	|         movea.l 70(sp),a1
    cea6:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    ceaa:	|         move.l 112(sp),-(sp)
    ceae:	|         jsr 854 <getSigned>
    ceb4:	|         addq.l #4,sp
    ceb6:	|         move.w d0,1e7b4 <fontSpace>

	killAllPeople ();
    cebc:	|         jsr b42c <killAllPeople>
	killAllRegions ();
    cec2:	|         jsr 16d8e <killAllRegions>

	int camerX = get2bytes (fp);
    cec8:	|         move.l 112(sp),-(sp)
    cecc:	|         jsr 6bc <get2bytes>
    ced2:	|         addq.l #4,sp
    ced4:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    ced8:	|         move.l 112(sp),-(sp)
    cedc:	|         jsr 6bc <get2bytes>
    cee2:	|         addq.l #4,sp
    cee4:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    cee8:	|         move.l 112(sp),-(sp)
    ceec:	|         jsr 7d8 <getFloat>
    cef2:	|         addq.l #4,sp
    cef4:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    cef8:	|         move.l 112(sp),54(sp)
    cefe:	|         move.l 1e8c8 <DOSBase>,d0
    cf04:	|         movea.l d0,a6
    cf06:	|         move.l 54(sp),d1
    cf0a:	|         jsr -306(a6)
    cf0e:	|         move.l d0,50(sp)
    cf12:	|         move.l 50(sp),d0
    cf16:	|         move.l d0,d0
    cf18:	|         move.b d0,1e222 <brightnessLevel>

	loadHandlers (fp);
    cf1e:	|         move.l 112(sp),-(sp)
    cf22:	|         jsr 753e <loadHandlers>
    cf28:	|         addq.l #4,sp
	loadRegions (fp);
    cf2a:	|         move.l 112(sp),-(sp)
    cf2e:	|         jsr 16dea <loadRegions>
    cf34:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    cf36:	|         moveq #12,d0
    cf38:	|         move.l d0,46(sp)
    cf3c:	|         clr.l 42(sp)
    cf40:	|         move.l 1e8c0 <SysBase>,d0
    cf46:	|         movea.l d0,a6
    cf48:	|         move.l 46(sp),d0
    cf4c:	|         move.l 42(sp),d1
    cf50:	|         jsr -684(a6)
    cf54:	|         move.l d0,38(sp)
    cf58:	|         move.l 38(sp),d0
    cf5c:	|         move.l d0,1e7b6 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    cf62:	|         move.l 1e7b6 <mouseCursorAnim>,d0
    cf68:	|     ,-- bne.s cf7c <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    cf6a:	|     |   pea 1a805 <PutChar+0x17e5>
    cf70:	|     |   jsr 1857e <KPrintF>
    cf76:	|     |   addq.l #4,sp
		return FALSE;
    cf78:	|     |   clr.w d0
    cf7a:	+-----|-- bra.s cff0 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    cf7c:	|     '-> jsr de20 <nosnapshot>
	if (FGetC (fp)) {
    cf82:	|         move.l 112(sp),34(sp)
    cf88:	|         move.l 1e8c8 <DOSBase>,d0
    cf8e:	|         movea.l d0,a6
    cf90:	|         move.l 34(sp),d1
    cf94:	|         jsr -306(a6)
    cf98:	|         move.l d0,30(sp)
    cf9c:	|         move.l 30(sp),d0
    cfa0:	|     ,-- beq.s cfb6 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    cfa2:	|     |   move.l 112(sp),-(sp)
    cfa6:	|     |   jsr dea0 <restoreSnapshot>
    cfac:	|     |   addq.l #4,sp
    cfae:	|     |   tst.w d0
    cfb0:	|     +-- bne.s cfb6 <loadGame+0x2bc>
    cfb2:	|     |   clr.w d0
    cfb4:	+-----|-- bra.s cff0 <loadGame+0x2f6>
	}

	Close (fp);
    cfb6:	|     '-> move.l 112(sp),26(sp)
    cfbc:	|         move.l 1e8c8 <DOSBase>,d0
    cfc2:	|         movea.l d0,a6
    cfc4:	|         move.l 26(sp),d1
    cfc8:	|         jsr -36(a6)
    cfcc:	|         move.l d0,22(sp)
	clearStackLib ();
    cfd0:	|         jsr ccb0 <clearStackLib>

	cameraX = camerX;
    cfd6:	|         move.l 66(sp),1e97a <cameraX>
	cameraY = camerY;
    cfde:	|         move.l 62(sp),1e97e <cameraY>
	cameraZoom = camerZ;
    cfe6:	|         move.l 58(sp),1e246 <cameraZoom>

	return TRUE;
    cfee:	|         moveq #1,d0
}
    cff0:	'-------> movem.l (sp)+,d2-d3/a6
    cff4:	          lea 128(sp),sp
    cff8:	          rts

0000cffa <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    cffa:	   ,-> lea -64(sp),sp
    cffe:	   |   move.l a6,-(sp)
    d000:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    d002:	   |   movea.l 76(sp),a0
    d006:	   |   move.l (a0),d0
    d008:	   |   move.l 80(sp),-(sp)
    d00c:	   |   move.l d0,-(sp)
    d00e:	   |   jsr 8d0 <put2bytes>
    d014:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    d016:	   |   movea.l 76(sp),a0
    d01a:	   |   move.l 40(a0),d0
    d01e:	,--|-- beq.s d05a <saveFunction+0x60>
		FPutC (fp, 1);
    d020:	|  |   move.l 80(sp),52(sp)
    d026:	|  |   moveq #1,d0
    d028:	|  |   move.l d0,48(sp)
    d02c:	|  |   move.l 1e8c8 <DOSBase>,d0
    d032:	|  |   movea.l d0,a6
    d034:	|  |   move.l 52(sp),d1
    d038:	|  |   move.l 48(sp),d2
    d03c:	|  |   jsr -312(a6)
    d040:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    d044:	|  |   movea.l 76(sp),a0
    d048:	|  |   move.l 40(a0),d0
    d04c:	|  |   move.l 80(sp),-(sp)
    d050:	|  |   move.l d0,-(sp)
    d052:	|  '-- jsr cffa <saveFunction>(pc)
    d056:	|      addq.l #8,sp
    d058:	|  ,-- bra.s d07c <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    d05a:	'--|-> move.l 80(sp),64(sp)
    d060:	   |   clr.l 60(sp)
    d064:	   |   move.l 1e8c8 <DOSBase>,d0
    d06a:	   |   movea.l d0,a6
    d06c:	   |   move.l 64(sp),d1
    d070:	   |   move.l 60(sp),d2
    d074:	   |   jsr -312(a6)
    d078:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    d07c:	   '-> movea.l 76(sp),a0
    d080:	       move.l 12(a0),d0
    d084:	       move.l 80(sp),-(sp)
    d088:	       move.l d0,-(sp)
    d08a:	       jsr 958 <put4bytes>
    d090:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    d092:	       movea.l 76(sp),a0
    d096:	       move.l 36(a0),d0
    d09a:	       move.l 80(sp),-(sp)
    d09e:	       move.l d0,-(sp)
    d0a0:	       jsr 8d0 <put2bytes>
    d0a6:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    d0a8:	       move.l 80(sp),40(sp)
    d0ae:	       movea.l 76(sp),a0
    d0b2:	       move.w 54(a0),d0
    d0b6:	       movea.w d0,a0
    d0b8:	       move.l a0,36(sp)
    d0bc:	       move.l 1e8c8 <DOSBase>,d0
    d0c2:	       movea.l d0,a6
    d0c4:	       move.l 40(sp),d1
    d0c8:	       move.l 36(sp),d2
    d0cc:	       jsr -312(a6)
    d0d0:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    d0d4:	       move.l 80(sp),28(sp)
    d0da:	       movea.l 76(sp),a0
    d0de:	       move.w 48(a0),d0
    d0e2:	       movea.w d0,a0
    d0e4:	       move.l a0,24(sp)
    d0e8:	       move.l 1e8c8 <DOSBase>,d0
    d0ee:	       movea.l d0,a6
    d0f0:	       move.l 28(sp),d1
    d0f4:	       move.l 24(sp),d2
    d0f8:	       jsr -312(a6)
    d0fc:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    d100:	       move.l 80(sp),16(sp)
    d106:	       movea.l 76(sp),a0
    d10a:	       move.w 50(a0),d0
    d10e:	       movea.w d0,a0
    d110:	       move.l a0,12(sp)
    d114:	       move.l 1e8c8 <DOSBase>,d0
    d11a:	       movea.l d0,a6
    d11c:	       move.l 16(sp),d1
    d120:	       move.l 12(sp),d2
    d124:	       jsr -312(a6)
    d128:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    d12c:	       moveq #28,d0
    d12e:	       add.l 76(sp),d0
    d132:	       move.l 80(sp),-(sp)
    d136:	       move.l d0,-(sp)
    d138:	       jsr d852 <saveVariable>
    d13e:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    d140:	       movea.l 76(sp),a0
    d144:	       move.b 56(a0),d0
    d148:	   ,-- beq.s d158 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    d14a:	   |   pea 1a826 <PutChar+0x1806>
    d150:	   |   jsr 1857e <KPrintF>
    d156:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    d158:	   '-> movea.l 76(sp),a0
    d15c:	       move.l 24(a0),d0
    d160:	       move.l 80(sp),-(sp)
    d164:	       move.l d0,-(sp)
    d166:	       jsr d6c6 <saveStack>
    d16c:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    d16e:	       clr.l 68(sp)
    d172:	   ,-- bra.s d196 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    d174:	,--|-> movea.l 76(sp),a0
    d178:	|  |   move.l 20(a0),d1
    d17c:	|  |   move.l 68(sp),d0
    d180:	|  |   lsl.l #3,d0
    d182:	|  |   add.l d1,d0
    d184:	|  |   move.l 80(sp),-(sp)
    d188:	|  |   move.l d0,-(sp)
    d18a:	|  |   jsr d852 <saveVariable>
    d190:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    d192:	|  |   addq.l #1,68(sp)
    d196:	|  '-> movea.l 76(sp),a0
    d19a:	|      move.l 8(a0),d0
    d19e:	|      cmp.l 68(sp),d0
    d1a2:	'----- bgt.s d174 <saveFunction+0x17a>
	}
}
    d1a4:	       nop
    d1a6:	       nop
    d1a8:	       move.l (sp)+,d2
    d1aa:	       movea.l (sp)+,a6
    d1ac:	       lea 64(sp),sp
    d1b0:	       rts

0000d1b2 <saveGame>:

BOOL saveGame (char * fname) {
    d1b2:	          lea -248(sp),sp
    d1b6:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    d1ba:	          move.l 264(sp),244(sp)
    d1c0:	          move.l #1006,240(sp)
    d1c8:	          move.l 1e8c8 <DOSBase>,d0
    d1ce:	          movea.l d0,a6
    d1d0:	          move.l 244(sp),d1
    d1d4:	          move.l 240(sp),d2
    d1d8:	          jsr -30(a6)
    d1dc:	          move.l d0,236(sp)
    d1e0:	          move.l 236(sp),d0
    d1e4:	          move.l d0,232(sp)
	if (fp == NULL) {
    d1e8:	      ,-- bne.s d1fe <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    d1ea:	      |   pea 1a848 <PutChar+0x1828>
    d1f0:	      |   jsr 1857e <KPrintF>
    d1f6:	      |   addq.l #4,sp
		return FALSE;
    d1f8:	      |   clr.w d0
    d1fa:	,-----|-- bra.w d6bc <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    d1fe:	|     '-> move.l 232(sp),228(sp)
    d204:	|         move.l #108645,224(sp)
    d20c:	|         moveq #6,d0
    d20e:	|         move.l d0,220(sp)
    d212:	|         move.l 1e8c8 <DOSBase>,d0
    d218:	|         movea.l d0,a6
    d21a:	|         move.l 228(sp),d1
    d21e:	|         move.l 224(sp),d2
    d222:	|         move.l 220(sp),d3
    d226:	|         jsr -48(a6)
    d22a:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    d22e:	|         move.l 232(sp),212(sp)
    d234:	|         clr.l 208(sp)
    d238:	|         move.l 1e8c8 <DOSBase>,d0
    d23e:	|         movea.l d0,a6
    d240:	|         move.l 212(sp),d1
    d244:	|         move.l 208(sp),d2
    d248:	|         jsr -312(a6)
    d24c:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    d250:	|         move.l 232(sp),200(sp)
    d256:	|         clr.l 196(sp)
    d25a:	|         move.l 1e8c8 <DOSBase>,d0
    d260:	|         movea.l d0,a6
    d262:	|         move.l 200(sp),d1
    d266:	|         move.l 196(sp),d2
    d26a:	|         jsr -312(a6)
    d26e:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    d272:	|         move.l 232(sp),188(sp)
    d278:	|         moveq #2,d0
    d27a:	|         move.l d0,184(sp)
    d27e:	|         move.l 1e8c8 <DOSBase>,d0
    d284:	|         movea.l d0,a6
    d286:	|         move.l 188(sp),d1
    d28a:	|         move.l 184(sp),d2
    d28e:	|         jsr -312(a6)
    d292:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    d296:	|         move.l 232(sp),176(sp)
    d29c:	|         moveq #2,d0
    d29e:	|         move.l d0,172(sp)
    d2a2:	|         move.l 1e8c8 <DOSBase>,d0
    d2a8:	|         movea.l d0,a6
    d2aa:	|         move.l 176(sp),d1
    d2ae:	|         move.l 172(sp),d2
    d2b2:	|         jsr -312(a6)
    d2b6:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    d2ba:	|         move.l 232(sp),164(sp)
    d2c0:	|         move.l #125024,160(sp)
    d2c8:	|         moveq #8,d0
    d2ca:	|         move.l d0,156(sp)
    d2ce:	|         move.l 1e8c8 <DOSBase>,d0
    d2d4:	|         movea.l d0,a6
    d2d6:	|         move.l 164(sp),d1
    d2da:	|         move.l 160(sp),d2
    d2de:	|         move.l 156(sp),d3
    d2e2:	|         jsr -48(a6)
    d2e6:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    d2ea:	|         move.l 232(sp),148(sp)
    d2f0:	|         move.w 1e104 <allowAnyFilename>,d0
    d2f6:	|         movea.w d0,a0
    d2f8:	|         move.l a0,144(sp)
    d2fc:	|         move.l 1e8c8 <DOSBase>,d0
    d302:	|         movea.l d0,a6
    d304:	|         move.l 148(sp),d1
    d308:	|         move.l 144(sp),d2
    d30c:	|         jsr -312(a6)
    d310:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    d314:	|         move.l 232(sp),136(sp)
    d31a:	|         move.w 1e85e <captureAllKeys>,d0
    d320:	|         movea.w d0,a0
    d322:	|         move.l a0,132(sp)
    d326:	|         move.l 1e8c8 <DOSBase>,d0
    d32c:	|         movea.l d0,a6
    d32e:	|         move.l 136(sp),d1
    d332:	|         move.l 132(sp),d2
    d336:	|         jsr -312(a6)
    d33a:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    d33e:	|         move.l 232(sp),124(sp)
    d344:	|         moveq #1,d0
    d346:	|         move.l d0,120(sp)
    d34a:	|         move.l 1e8c8 <DOSBase>,d0
    d350:	|         movea.l d0,a6
    d352:	|         move.l 124(sp),d1
    d356:	|         move.l 120(sp),d2
    d35a:	|         jsr -312(a6)
    d35e:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    d362:	|         move.l 232(sp),112(sp)
    d368:	|         move.l 1e9c8 <fontTableSize>,d0
    d36e:	|         sgt d0
    d370:	|         neg.b d0
    d372:	|         move.b d0,d0
    d374:	|         andi.l #255,d0
    d37a:	|         move.l d0,108(sp)
    d37e:	|         move.l 1e8c8 <DOSBase>,d0
    d384:	|         movea.l d0,a6
    d386:	|         move.l 112(sp),d1
    d38a:	|         move.l 108(sp),d2
    d38e:	|         jsr -312(a6)
    d392:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    d396:	|         move.l 1e9c8 <fontTableSize>,d0
    d39c:	|     ,-- ble.s d3da <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    d39e:	|     |   move.l 1e9bc <loadedFontNum>,d0
    d3a4:	|     |   move.l 232(sp),-(sp)
    d3a8:	|     |   move.l d0,-(sp)
    d3aa:	|     |   jsr 8d0 <put2bytes>
    d3b0:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    d3b2:	|     |   move.l 1e9b8 <fontHeight>,d0
    d3b8:	|     |   move.l 232(sp),-(sp)
    d3bc:	|     |   move.l d0,-(sp)
    d3be:	|     |   jsr 8d0 <put2bytes>
    d3c4:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    d3c6:	|     |   move.l 1e9c0 <fontOrderString>,d0
    d3cc:	|     |   move.l 232(sp),-(sp)
    d3d0:	|     |   move.l d0,-(sp)
    d3d2:	|     |   jsr bd8 <writeString>
    d3d8:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    d3da:	|     '-> move.w 1e7b4 <fontSpace>,d0
    d3e0:	|         movea.w d0,a0
    d3e2:	|         move.l 232(sp),-(sp)
    d3e6:	|         move.l a0,-(sp)
    d3e8:	|         jsr a9c <putSigned>
    d3ee:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    d3f0:	|         move.l 1e97a <cameraX>,d0
    d3f6:	|         move.l 232(sp),-(sp)
    d3fa:	|         move.l d0,-(sp)
    d3fc:	|         jsr 8d0 <put2bytes>
    d402:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    d404:	|         move.l 1e97e <cameraY>,d0
    d40a:	|         move.l 232(sp),-(sp)
    d40e:	|         move.l d0,-(sp)
    d410:	|         jsr 8d0 <put2bytes>
    d416:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    d418:	|         move.l 1e246 <cameraZoom>,d0
    d41e:	|         move.l 232(sp),-(sp)
    d422:	|         move.l d0,-(sp)
    d424:	|         jsr a46 <putFloat>
    d42a:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    d42c:	|         move.l 232(sp),100(sp)
    d432:	|         move.b 1e222 <brightnessLevel>,d0
    d438:	|         move.b d0,d0
    d43a:	|         andi.l #255,d0
    d440:	|         move.l d0,96(sp)
    d444:	|         move.l 1e8c8 <DOSBase>,d0
    d44a:	|         movea.l d0,a6
    d44c:	|         move.l 100(sp),d1
    d450:	|         move.l 96(sp),d2
    d454:	|         jsr -312(a6)
    d458:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    d45c:	|         move.l 232(sp),-(sp)
    d460:	|         jsr 7b1e <saveHandlers>
    d466:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    d468:	|         move.l 232(sp),-(sp)
    d46c:	|         jsr 16fa4 <saveRegions>
    d472:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    d474:	|         move.l 1e7b6 <mouseCursorAnim>,d0
    d47a:	|         move.l 232(sp),-(sp)
    d47e:	|         move.l d0,-(sp)
    d480:	|         jsr b9d6 <saveAnim>
    d486:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    d488:	|         move.l 1e7ba <mouseCursorFrameNum>,d0
    d48e:	|         move.l 232(sp),-(sp)
    d492:	|         move.l d0,-(sp)
    d494:	|         jsr 8d0 <put2bytes>
    d49a:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    d49c:	|         move.l 1e856 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    d4a4:	|         clr.l 248(sp)
	while (thisFunction) {
    d4a8:	|     ,-- bra.s d4b8 <saveGame+0x306>
		countFunctions ++;
    d4aa:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    d4ae:	|  |  |   movea.l 252(sp),a0
    d4b2:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    d4b8:	|  |  '-> tst.l 252(sp)
    d4bc:	|  '----- bne.s d4aa <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    d4be:	|         move.l 232(sp),-(sp)
    d4c2:	|         move.l 252(sp),-(sp)
    d4c6:	|         jsr 8d0 <put2bytes>
    d4cc:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    d4ce:	|         move.l 1e856 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    d4d6:	|     ,-- bra.s d4f2 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    d4d8:	|  ,--|-> move.l 232(sp),-(sp)
    d4dc:	|  |  |   move.l 256(sp),-(sp)
    d4e0:	|  |  |   jsr cffa <saveFunction>
    d4e6:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    d4e8:	|  |  |   movea.l 252(sp),a0
    d4ec:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    d4f2:	|  |  '-> tst.l 252(sp)
    d4f6:	|  '----- bne.s d4d8 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    d4f8:	|         clr.l 256(sp)
    d4fc:	|     ,-- bra.s d51e <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    d4fe:	|  ,--|-> move.l 1e86c <globalVars>,d1
    d504:	|  |  |   move.l 256(sp),d0
    d508:	|  |  |   lsl.l #3,d0
    d50a:	|  |  |   add.l d1,d0
    d50c:	|  |  |   move.l 232(sp),-(sp)
    d510:	|  |  |   move.l d0,-(sp)
    d512:	|  |  |   jsr d852 <saveVariable>
    d518:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    d51a:	|  |  |   addq.l #1,256(sp)
    d51e:	|  |  '-> move.l 1e896 <numGlobals>,d0
    d524:	|  |      cmp.l 256(sp),d0
    d528:	|  '----- bgt.s d4fe <saveGame+0x34c>
	}

	savePeople (fp);
    d52a:	|         move.l 232(sp),-(sp)
    d52e:	|         jsr bafe <savePeople>
    d534:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    d536:	|         movea.l 1e9dc <currentFloor>,a0
    d53c:	|         move.l 8(a0),d0
    d540:	|  ,----- beq.s d57e <saveGame+0x3cc>
		FPutC (fp, 1);
    d542:	|  |      move.l 232(sp),76(sp)
    d548:	|  |      moveq #1,d0
    d54a:	|  |      move.l d0,72(sp)
    d54e:	|  |      move.l 1e8c8 <DOSBase>,d0
    d554:	|  |      movea.l d0,a6
    d556:	|  |      move.l 76(sp),d1
    d55a:	|  |      move.l 72(sp),d2
    d55e:	|  |      jsr -312(a6)
    d562:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    d566:	|  |      movea.l 1e9dc <currentFloor>,a0
    d56c:	|  |      move.l (a0),d0
    d56e:	|  |      move.l 232(sp),-(sp)
    d572:	|  |      move.l d0,-(sp)
    d574:	|  |      jsr 8d0 <put2bytes>
    d57a:	|  |      addq.l #8,sp
    d57c:	|  |  ,-- bra.s d5a0 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    d57e:	|  '--|-> move.l 232(sp),88(sp)
    d584:	|     |   clr.l 84(sp)
    d588:	|     |   move.l 1e8c8 <DOSBase>,d0
    d58e:	|     |   movea.l d0,a6
    d590:	|     |   move.l 88(sp),d1
    d594:	|     |   move.l 84(sp),d2
    d598:	|     |   jsr -312(a6)
    d59c:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    d5a0:	|     '-> move.l 232(sp),64(sp)
    d5a6:	|         move.l 1e98e <speechMode>,60(sp)
    d5ae:	|         move.l 1e8c8 <DOSBase>,d0
    d5b4:	|         movea.l d0,a6
    d5b6:	|         move.l 64(sp),d1
    d5ba:	|         move.l 60(sp),d2
    d5be:	|         jsr -312(a6)
    d5c2:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    d5c6:	|         move.b 1e78a <fadeMode>,d0
    d5cc:	|         move.b d0,d0
    d5ce:	|         andi.l #255,d0
    d5d4:	|         move.l d0,52(sp)
    d5d8:	|         move.l 232(sp),48(sp)
    d5de:	|         move.l 1e8c8 <DOSBase>,d0
    d5e4:	|         movea.l d0,a6
    d5e6:	|         move.l 52(sp),d1
    d5ea:	|         move.l 48(sp),d2
    d5ee:	|         jsr -312(a6)
    d5f2:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    d5f6:	|         move.l 1e802 <speech>,d0
    d5fc:	|         move.l 232(sp),-(sp)
    d600:	|         move.l d0,-(sp)
    d602:	|         jsr 45a2 <saveSpeech>
    d608:	|         addq.l #8,sp
	saveStatusBars (fp);
    d60a:	|         move.l 232(sp),-(sp)
    d60e:	|         jsr 8cfc <saveStatusBars>
    d614:	|         addq.l #4,sp
	saveSounds (fp);
    d616:	|         move.l 232(sp),-(sp)
    d61a:	|         jsr dbc4 <saveSounds>
    d620:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    d622:	|         move.w 1e978 <saveEncoding>,d0
    d628:	|         move.w d0,d0
    d62a:	|         andi.l #65535,d0
    d630:	|         move.l 232(sp),-(sp)
    d634:	|         move.l d0,-(sp)
    d636:	|         jsr 8d0 <put2bytes>
    d63c:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    d63e:	|         move.l 1e96a <parallaxStuff>,d0
    d644:	|         move.l 232(sp),-(sp)
    d648:	|         move.l d0,-(sp)
    d64a:	|         jsr dec6 <saveParallaxRecursive>
    d650:	|         addq.l #8,sp
	FPutC (fp, 0);
    d652:	|         move.l 232(sp),40(sp)
    d658:	|         clr.l 36(sp)
    d65c:	|         move.l 1e8c8 <DOSBase>,d0
    d662:	|         movea.l d0,a6
    d664:	|         move.l 40(sp),d1
    d668:	|         move.l 36(sp),d2
    d66c:	|         jsr -312(a6)
    d670:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    d674:	|         move.l 232(sp),28(sp)
    d67a:	|         move.l 1e228 <languageNum>,24(sp)
    d682:	|         move.l 1e8c8 <DOSBase>,d0
    d688:	|         movea.l d0,a6
    d68a:	|         move.l 28(sp),d1
    d68e:	|         move.l 24(sp),d2
    d692:	|         jsr -312(a6)
    d696:	|         move.l d0,20(sp)

	Close(fp);
    d69a:	|         move.l 232(sp),16(sp)
    d6a0:	|         move.l 1e8c8 <DOSBase>,d0
    d6a6:	|         movea.l d0,a6
    d6a8:	|         move.l 16(sp),d1
    d6ac:	|         jsr -36(a6)
    d6b0:	|         move.l d0,12(sp)
	clearStackLib ();
    d6b4:	|         jsr ccb0 <clearStackLib>
	return TRUE;
    d6ba:	|         moveq #1,d0
}
    d6bc:	'-------> movem.l (sp)+,d2-d3/a6
    d6c0:	          lea 248(sp),sp
    d6c4:	          rts

0000d6c6 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    d6c6:	       lea -12(sp),sp
	int elements = 0;
    d6ca:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    d6ce:	       move.l 16(sp),(sp)
	while (search) {
    d6d2:	   ,-- bra.s d6de <saveStack+0x18>
		elements ++;
    d6d4:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    d6d8:	|  |   movea.l (sp),a0
    d6da:	|  |   move.l 8(a0),(sp)
	while (search) {
    d6de:	|  '-> tst.l (sp)
    d6e0:	'----- bne.s d6d4 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    d6e2:	       move.l 20(sp),-(sp)
    d6e6:	       move.l 12(sp),-(sp)
    d6ea:	       jsr 8d0 <put2bytes>
    d6f0:	       addq.l #8,sp
	search = vs;
    d6f2:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    d6f6:	       clr.l 4(sp)
    d6fa:	   ,-- bra.s d716 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    d6fc:	,--|-> move.l (sp),d0
    d6fe:	|  |   move.l 20(sp),-(sp)
    d702:	|  |   move.l d0,-(sp)
    d704:	|  |   jsr d852 <saveVariable>
    d70a:	|  |   addq.l #8,sp
		search = search -> next;
    d70c:	|  |   movea.l (sp),a0
    d70e:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    d712:	|  |   addq.l #1,4(sp)
    d716:	|  '-> move.l 4(sp),d0
    d71a:	|      cmp.l 8(sp),d0
    d71e:	'----- blt.s d6fc <saveStack+0x36>
	}
}
    d720:	       nop
    d722:	       nop
    d724:	       lea 12(sp),sp
    d728:	       rts

0000d72a <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    d72a:	             lea -44(sp),sp
    d72e:	             move.l a6,-(sp)
    d730:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    d732:	             move.l 1e950 <stackLib>,48(sp)
	int a = 0;
    d73a:	             clr.l 44(sp)
	while (s) {
    d73e:	      ,----- bra.s d79c <saveStackRef+0x72>
		if (s -> stack == vs) {
    d740:	   ,--|----> movea.l 48(sp),a0
    d744:	   |  |      move.l (a0),d0
    d746:	   |  |      cmp.l 56(sp),d0
    d74a:	   |  |  ,-- bne.s d78e <saveStackRef+0x64>
			FPutC (fp, 1);
    d74c:	   |  |  |   move.l 60(sp),16(sp)
    d752:	   |  |  |   moveq #1,d0
    d754:	   |  |  |   move.l d0,12(sp)
    d758:	   |  |  |   move.l 1e8c8 <DOSBase>,d0
    d75e:	   |  |  |   movea.l d0,a6
    d760:	   |  |  |   move.l 16(sp),d1
    d764:	   |  |  |   move.l 12(sp),d2
    d768:	   |  |  |   jsr -312(a6)
    d76c:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    d770:	   |  |  |   move.l 1e94c <stackLibTotal>,d0
    d776:	   |  |  |   sub.l 44(sp),d0
    d77a:	   |  |  |   move.l 60(sp),-(sp)
    d77e:	   |  |  |   move.l d0,-(sp)
    d780:	   |  |  |   jsr 8d0 <put2bytes>
    d786:	   |  |  |   addq.l #8,sp
			return TRUE;
    d788:	   |  |  |   moveq #1,d0
    d78a:	,--|--|--|-- bra.w d848 <saveStackRef+0x11e>
		}
		s = s -> next;
    d78e:	|  |  |  '-> movea.l 48(sp),a0
    d792:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    d798:	|  |  |      addq.l #1,44(sp)
	while (s) {
    d79c:	|  |  '----> tst.l 48(sp)
    d7a0:	|  '-------- bne.s d740 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    d7a2:	|            move.l 60(sp),40(sp)
    d7a8:	|            clr.l 36(sp)
    d7ac:	|            move.l 1e8c8 <DOSBase>,d0
    d7b2:	|            movea.l d0,a6
    d7b4:	|            move.l 40(sp),d1
    d7b8:	|            move.l 36(sp),d2
    d7bc:	|            jsr -312(a6)
    d7c0:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    d7c4:	|            movea.l 56(sp),a0
    d7c8:	|            move.l (a0),d0
    d7ca:	|            move.l 60(sp),-(sp)
    d7ce:	|            move.l d0,-(sp)
    d7d0:	|            jsr d6c6 <saveStack>
    d7d6:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    d7d8:	|            moveq #8,d0
    d7da:	|            move.l d0,28(sp)
    d7de:	|            clr.l 24(sp)
    d7e2:	|            move.l 1e8c0 <SysBase>,d0
    d7e8:	|            movea.l d0,a6
    d7ea:	|            move.l 28(sp),d0
    d7ee:	|            move.l 24(sp),d1
    d7f2:	|            jsr -684(a6)
    d7f6:	|            move.l d0,20(sp)
    d7fa:	|            move.l 20(sp),d0
    d7fe:	|            move.l d0,48(sp)
	stackLibTotal ++;
    d802:	|            move.l 1e94c <stackLibTotal>,d0
    d808:	|            addq.l #1,d0
    d80a:	|            move.l d0,1e94c <stackLibTotal>
	if (! s) {
    d810:	|            tst.l 48(sp)
    d814:	|        ,-- bne.s d828 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    d816:	|        |   pea 1a894 <PutChar+0x1874>
    d81c:	|        |   jsr 1857e <KPrintF>
    d822:	|        |   addq.l #4,sp
		return FALSE;
    d824:	|        |   clr.w d0
    d826:	+--------|-- bra.s d848 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    d828:	|        '-> move.l 1e950 <stackLib>,d0
    d82e:	|            movea.l 48(sp),a0
    d832:	|            move.l d0,4(a0)
	s -> stack = vs;
    d836:	|            movea.l 48(sp),a0
    d83a:	|            move.l 56(sp),(a0)
	stackLib = s;
    d83e:	|            move.l 48(sp),1e950 <stackLib>
	return TRUE;
    d846:	|            moveq #1,d0
}
    d848:	'----------> move.l (sp)+,d2
    d84a:	             movea.l (sp)+,a6
    d84c:	             lea 44(sp),sp
    d850:	             rts

0000d852 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    d852:	          lea -12(sp),sp
    d856:	          move.l a6,-(sp)
    d858:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    d85a:	          move.l 28(sp),16(sp)
    d860:	          movea.l 24(sp),a0
    d864:	          move.l (a0),d0
    d866:	          move.l d0,12(sp)
    d86a:	          move.l 1e8c8 <DOSBase>,d0
    d870:	          movea.l d0,a6
    d872:	          move.l 16(sp),d1
    d876:	          move.l 12(sp),d2
    d87a:	          jsr -312(a6)
    d87e:	          move.l d0,8(sp)
	switch (from -> varType) {
    d882:	          movea.l 24(sp),a0
    d886:	          move.l (a0),d0
    d888:	          moveq #9,d1
    d88a:	          cmp.l d0,d1
    d88c:	      ,-- bcs.w d93c <saveVariable+0xea>
    d890:	      |   add.l d0,d0
    d892:	      |   movea.l d0,a0
    d894:	      |   adda.l #55456,a0
    d89a:	      |   move.w (a0),d0
    d89c:	      |   jmp (d8a0 <saveVariable+0x4e>,pc,d0.w)
    d8a0:	      |   ori.l #1310740,(a0)+
    d8a6:	      |   ori.b #20,(20,a0,d0.w)
    d8ac:	      |   .short 0x004c
    d8ae:	      |   ori.b #126,(a4)
    d8b2:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    d8b6:	      |   ori.b #40,(a0)+
    d8ba:	      |   ori.b #47,d4
    d8be:	      |   ori.b #0,(a4)+
    d8c2:	      |   jsr 958 <put4bytes>
    d8c8:	      |   addq.l #8,sp
		return TRUE;
    d8ca:	      |   moveq #1,d0
    d8cc:	,-----|-- bra.w d978 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    d8d0:	|     |   movea.l 24(sp),a0
    d8d4:	|     |   move.l 4(a0),d0
    d8d8:	|     |   move.l 28(sp),-(sp)
    d8dc:	|     |   move.l d0,-(sp)
    d8de:	|     |   jsr bd8 <writeString>
    d8e4:	|     |   addq.l #8,sp
		return TRUE;
    d8e6:	|     |   moveq #1,d0
    d8e8:	+-----|-- bra.w d978 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    d8ec:	|     |   movea.l 24(sp),a0
    d8f0:	|     |   move.l 4(a0),d0
    d8f4:	|     |   move.l 28(sp),-(sp)
    d8f8:	|     |   move.l d0,-(sp)
    d8fa:	|     |   jsr d72a <saveStackRef>
    d900:	|     |   addq.l #8,sp
    d902:	+-----|-- bra.s d978 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    d904:	|     |   movea.l 24(sp),a0
    d908:	|     |   move.l 4(a0),d0
    d90c:	|     |   move.l 28(sp),-(sp)
    d910:	|     |   move.l d0,-(sp)
    d912:	|     |   jsr baa0 <saveCostume>
    d918:	|     |   addq.l #8,sp
		return FALSE;
    d91a:	|     |   clr.w d0
    d91c:	+-----|-- bra.s d978 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    d91e:	|     |   movea.l 24(sp),a0
    d922:	|     |   move.l 4(a0),d0
    d926:	|     |   move.l 28(sp),-(sp)
    d92a:	|     |   move.l d0,-(sp)
    d92c:	|     |   jsr b9d6 <saveAnim>
    d932:	|     |   addq.l #8,sp
		return FALSE;
    d934:	|     |   clr.w d0
    d936:	+-----|-- bra.s d978 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d938:	|     |   clr.w d0
    d93a:	+-----|-- bra.s d978 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d93c:	|     '-> movea.l 24(sp),a0
    d940:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d942:	|         moveq #10,d1
    d944:	|         cmp.l d0,d1
    d946:	|  ,----- bcs.s d960 <saveVariable+0x10e>
						typeName[from->varType] :
    d948:	|  |      movea.l 24(sp),a0
    d94c:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d94e:	|  |      add.l d0,d0
    d950:	|  |      movea.l d0,a1
    d952:	|  |      adda.l d0,a1
    d954:	|  |      lea 1e78c <typeName>,a0
    d95a:	|  |      move.l (0,a1,a0.l),d0
    d95e:	|  |  ,-- bra.s d966 <saveVariable+0x114>
    d960:	|  '--|-> move.l #108729,d0
    d966:	|     '-> move.l d0,-(sp)
    d968:	|         pea 1a8c0 <PutChar+0x18a0>
    d96e:	|         jsr 1857e <KPrintF>
    d974:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d976:	|         moveq #1,d0
    d978:	'-------> move.l (sp)+,d2
    d97a:	          movea.l (sp)+,a6
    d97c:	          lea 12(sp),sp
    d980:	          rts

0000d982 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d982:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d986:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d98e:	          movea.l 4(sp),a0
    d992:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d998:	          movea.l 4(sp),a0
    d99c:	          move.w 10(a0),d0
    d9a0:	          lsr.w #8,d0
    d9a2:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d9a6:	          movea.l 4(sp),a0
    d9aa:	          move.w 10(a0),d0
    d9ae:	          move.b d0,(sp)

    if(counterx_new)
    d9b0:	,-------- beq.w da56 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d9b4:	|         clr.w d1
    d9b6:	|         move.b (sp),d1
    d9b8:	|         move.w 1e958 <counterx_old>,d0
    d9be:	|         sub.w d0,d1
    d9c0:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d9c4:	|         cmpi.w #128,10(sp)
    d9ca:	|     ,-- blt.s d9e2 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d9cc:	|     |   move.w #1,1e874 <input+0x4>
            counterx_diff -= 256;    
    d9d4:	|     |   move.w 10(sp),d0
    d9d8:	|     |   addi.w #-256,d0
    d9dc:	|     |   move.w d0,10(sp)
    d9e0:	|  ,--|-- bra.s da0e <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d9e2:	|  |  '-> cmpi.w #-129,10(sp)
    d9e8:	|  |  ,-- bgt.s da00 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d9ea:	|  |  |   move.w 10(sp),d0
    d9ee:	|  |  |   addi.w #256,d0
    d9f2:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d9f6:	|  |  |   move.w #1,1e874 <input+0x4>
    d9fe:	|  +--|-- bra.s da0e <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    da00:	|  |  '-> tst.w 10(sp)
    da04:	|  +----- beq.s da0e <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    da06:	|  |      move.w #1,1e874 <input+0x4>
        }

        input.mouseX += counterx_diff;
    da0e:	|  '----> move.l 1e87a <input+0xa>,d0
    da14:	|         movea.w 10(sp),a0
    da18:	|         add.l a0,d0
    da1a:	|         move.l d0,1e87a <input+0xa>

        if( input.mouseX > (int) winWidth) {
    da20:	|         move.l 1e87a <input+0xa>,d1
    da26:	|         move.l 1e806 <winWidth>,d0
    da2c:	|         cmp.l d1,d0
    da2e:	|     ,-- bge.s da3e <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    da30:	|     |   move.l 1e806 <winWidth>,d0
    da36:	|     |   move.l d0,1e87a <input+0xa>
    da3c:	|  ,--|-- bra.s da4c <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    da3e:	|  |  '-> move.l 1e87a <input+0xa>,d0
    da44:	|  +----- bpl.s da4c <CsiCheckInput+0xca>
            input.mouseX = 0;
    da46:	|  |      clr.l 1e87a <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    da4c:	|  '----> clr.w d0
    da4e:	|         move.b (sp),d0
    da50:	|         move.w d0,1e958 <counterx_old>
    }    

    if(countery_new)
    da56:	'-------> tst.b 1(sp)
    da5a:	,-------- beq.w db04 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    da5e:	|         clr.w d1
    da60:	|         move.b 1(sp),d1
    da64:	|         move.w 1e95a <countery_old>,d0
    da6a:	|         sub.w d0,d1
    da6c:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    da70:	|         cmpi.w #128,8(sp)
    da76:	|     ,-- blt.s da8e <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    da78:	|     |   move.w #1,1e874 <input+0x4>
            countery_diff -= 256;    
    da80:	|     |   move.w 8(sp),d0
    da84:	|     |   addi.w #-256,d0
    da88:	|     |   move.w d0,8(sp)
    da8c:	|  ,--|-- bra.s daba <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    da8e:	|  |  '-> cmpi.w #-129,8(sp)
    da94:	|  |  ,-- bgt.s daac <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    da96:	|  |  |   move.w #1,1e874 <input+0x4>
            countery_diff += 256;
    da9e:	|  |  |   move.w 8(sp),d0
    daa2:	|  |  |   addi.w #256,d0
    daa6:	|  |  |   move.w d0,8(sp)
    daaa:	|  +--|-- bra.s daba <CsiCheckInput+0x138>
        } else if (countery_diff) {
    daac:	|  |  '-> tst.w 8(sp)
    dab0:	|  +----- beq.s daba <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    dab2:	|  |      move.w #1,1e874 <input+0x4>
        }

        input.mouseY += countery_diff;
    daba:	|  '----> move.l 1e87e <input+0xe>,d0
    dac0:	|         movea.w 8(sp),a0
    dac4:	|         add.l a0,d0
    dac6:	|         move.l d0,1e87e <input+0xe>

        if( input.mouseY > (int) winHeight) {
    dacc:	|         move.l 1e87e <input+0xe>,d1
    dad2:	|         move.l 1e80a <winHeight>,d0
    dad8:	|         cmp.l d1,d0
    dada:	|     ,-- bge.s daea <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    dadc:	|     |   move.l 1e80a <winHeight>,d0
    dae2:	|     |   move.l d0,1e87e <input+0xe>
    dae8:	|  ,--|-- bra.s daf8 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    daea:	|  |  '-> move.l 1e87e <input+0xe>,d0
    daf0:	|  +----- bpl.s daf8 <CsiCheckInput+0x176>
            input.mouseY = 0;
    daf2:	|  |      clr.l 1e87e <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    daf8:	|  '----> clr.w d0
    dafa:	|         move.b 1(sp),d0
    dafe:	|         move.w d0,1e95a <countery_old>
    } 

    input.leftRelease = FALSE;
    db04:	'-------> clr.w 1e876 <input+0x6>
    input.rightRelease = FALSE;
    db0a:	          clr.w 1e878 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    db10:	          move.w 1e870 <input>,d0
    db16:	      ,-- beq.s db3c <CsiCheckInput+0x1ba>
    db18:	      |   movea.l #12574721,a0
    db1e:	      |   move.b (a0),d0
    db20:	      |   move.b d0,d0
    db22:	      |   andi.l #255,d0
    db28:	      |   moveq #64,d1
    db2a:	      |   and.l d1,d0
    db2c:	      +-- beq.s db3c <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    db2e:	      |   clr.w 1e870 <input>
        input.leftRelease = TRUE;
    db34:	      |   move.w #1,1e876 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    db3c:	      '-> move.w 1e872 <input+0x2>,d0
    db42:	      ,-- beq.s db6a <CsiCheckInput+0x1e8>
    db44:	      |   movea.l #14675990,a0
    db4a:	      |   move.w (a0),d0
    db4c:	      |   move.w d0,d0
    db4e:	      |   andi.l #65535,d0
    db54:	      |   andi.l #1024,d0
    db5a:	      +-- beq.s db6a <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    db5c:	      |   clr.w 1e872 <input+0x2>
        input.rightRelease = TRUE;
    db62:	      |   move.w #1,1e878 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    db6a:	      '-> movea.l #12574721,a0
    db70:	          move.b (a0),d0
    db72:	          move.b d0,d0
    db74:	          andi.l #255,d0
    db7a:	          moveq #64,d1
    db7c:	          and.l d1,d0
    db7e:	      ,-- bne.s db88 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    db80:	      |   move.w #1,1e870 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    db88:	      '-> movea.l #14675990,a0
    db8e:	          move.w (a0),d0
    db90:	          move.w d0,d0
    db92:	          andi.l #65535,d0
    db98:	          andi.l #1024,d0
    db9e:	      ,-- bne.s dba8 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    dba0:	      |   move.w #1,1e872 <input+0x2>
    }

    dba8:	      '-> nop
    dbaa:	          lea 12(sp),sp
    dbae:	          rts

0000dbb0 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    dbb0:	moveq #0,d0
}
    dbb2:	rts

0000dbb4 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    dbb4:	nop
    dbb6:	rts

0000dbb8 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    dbb8:	nop
    dbba:	rts

0000dbbc <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    dbbc:	moveq #1,d0
}
    dbbe:	rts

0000dbc0 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    dbc0:	nop
    dbc2:	rts

0000dbc4 <saveSounds>:

void saveSounds (BPTR fp) {
    dbc4:	lea -12(sp),sp
    dbc8:	move.l a6,-(sp)
    dbca:	move.l d2,-(sp)
	FPutC (fp,0);
    dbcc:	move.l 24(sp),16(sp)
    dbd2:	clr.l 12(sp)
    dbd6:	move.l 1e8c8 <DOSBase>,d0
    dbdc:	movea.l d0,a6
    dbde:	move.l 16(sp),d1
    dbe2:	move.l 12(sp),d2
    dbe6:	jsr -312(a6)
    dbea:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    dbee:	move.l 1e242 <defSoundVol>,d0
    dbf4:	move.l 24(sp),-(sp)
    dbf8:	move.l d0,-(sp)
    dbfa:	jsr 8d0 <put2bytes>
    dc00:	addq.l #8,sp
	put2bytes (defVol, fp);
    dc02:	move.l 1e23e <defVol>,d0
    dc08:	move.l 24(sp),-(sp)
    dc0c:	move.l d0,-(sp)
    dc0e:	jsr 8d0 <put2bytes>
    dc14:	addq.l #8,sp
}
    dc16:	nop
    dc18:	move.l (sp)+,d2
    dc1a:	movea.l (sp)+,a6
    dc1c:	lea 12(sp),sp
    dc20:	rts

0000dc22 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    dc22:	move.l 4(sp),1e23e <defVol>
}
    dc2a:	nop
    dc2c:	rts

0000dc2e <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    dc2e:	move.l 4(sp),1e242 <defSoundVol>
}
    dc36:	nop
    dc38:	rts

0000dc3a <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    dc3a:	nop
    dc3c:	rts

0000dc3e <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    dc3e:	nop
    dc40:	rts

0000dc42 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    dc42:	nop
    dc44:	rts

0000dc46 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    dc46:	subq.l #4,sp
    dc48:	move.l 12(sp),d0
    dc4c:	move.w d0,d0
    dc4e:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    dc52:	moveq #1,d0
}
    dc54:	addq.l #4,sp
    dc56:	rts

0000dc58 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    dc58:	nop
    dc5a:	rts

0000dc5c <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    dc5c:	move.l 16(sp),-(sp)
    dc60:	move.l 16(sp),-(sp)
    dc64:	move.l 16(sp),-(sp)
    dc68:	move.l 16(sp),-(sp)
    dc6c:	jsr e0e <CstBlankScreen>
    dc72:	lea 16(sp),sp
}
    dc76:	nop
    dc78:	rts

0000dc7a <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    dc7a:	pea 1a8e3 <PutChar+0x18c3>
    dc80:	jsr 1857e <KPrintF>
    dc86:	addq.l #4,sp
}
    dc88:	nop
    dc8a:	rts

0000dc8c <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    dc8c:	movea.l 8(sp),a1
    dc90:	movea.l 12(sp),a0
    dc94:	move.l 8(sp),d1
    dc98:	move.l 4(sp),d0
    dc9c:	move.l a1,-(sp)
    dc9e:	move.l a0,-(sp)
    dca0:	move.l d1,-(sp)
    dca2:	move.l d0,-(sp)
    dca4:	jsr 4c9c <drawLine>
    dcaa:	lea 16(sp),sp
}
    dcae:	nop
    dcb0:	rts

0000dcb2 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    dcb2:	movea.l 12(sp),a1
    dcb6:	movea.l 4(sp),a0
    dcba:	move.l 8(sp),d1
    dcbe:	move.l 4(sp),d0
    dcc2:	move.l a1,-(sp)
    dcc4:	move.l a0,-(sp)
    dcc6:	move.l d1,-(sp)
    dcc8:	move.l d0,-(sp)
    dcca:	jsr 4c9c <drawLine>
    dcd0:	lea 16(sp),sp
}
    dcd4:	nop
    dcd6:	rts

0000dcd8 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    dcd8:	pea 1a91c <PutChar+0x18fc>
    dcde:	jsr 1857e <KPrintF>
    dce4:	addq.l #4,sp
}
    dce6:	nop
    dce8:	rts

0000dcea <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    dcea:	jsr 1b92 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    dcf0:	pea 1e964 <backdropTextureName>
    dcf6:	pea 1 <_start+0x1>
    dcfa:	jsr 4e1e <deleteTextures>
    dd00:	addq.l #8,sp
	backdropTextureName = 0;
    dd02:	clr.l 1e964 <backdropTextureName>
	backdropExists = FALSE;
    dd08:	clr.w 1e968 <backdropExists>
}
    dd0e:	nop
    dd10:	rts

0000dd12 <killParallax>:

void killParallax () {
    dd12:	          lea -12(sp),sp
    dd16:	          move.l a6,-(sp)
	while (parallaxStuff) {
    dd18:	   ,----- bra.s dd84 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    dd1a:	,--|----> move.l 1e96a <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    dd22:	|  |      movea.l 12(sp),a0
    dd26:	|  |      move.l 42(a0),d0
    dd2a:	|  |      move.l d0,1e96a <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    dd30:	|  |      move.l 12(sp),d0
    dd34:	|  |      addq.l #4,d0
    dd36:	|  |      move.l d0,-(sp)
    dd38:	|  |      pea 1 <_start+0x1>
    dd3c:	|  |      jsr 4e1e <deleteTextures>
    dd42:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    dd44:	|  |      movea.l 12(sp),a0
    dd48:	|  |      move.l (a0),d0
    dd4a:	|  |  ,-- beq.s dd64 <killParallax+0x52>
    dd4c:	|  |  |   movea.l 12(sp),a0
    dd50:	|  |  |   move.l (a0),8(sp)
    dd54:	|  |  |   move.l 1e8c0 <SysBase>,d0
    dd5a:	|  |  |   movea.l d0,a6
    dd5c:	|  |  |   movea.l 8(sp),a1
    dd60:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    dd64:	|  |  '-> tst.l 12(sp)
    dd68:	|  |  ,-- beq.s dd80 <killParallax+0x6e>
    dd6a:	|  |  |   move.l 12(sp),4(sp)
    dd70:	|  |  |   move.l 1e8c0 <SysBase>,d0
    dd76:	|  |  |   movea.l d0,a6
    dd78:	|  |  |   movea.l 4(sp),a1
    dd7c:	|  |  |   jsr -690(a6)
		k = NULL;
    dd80:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    dd84:	|  '----> move.l 1e96a <parallaxStuff>,d0
    dd8a:	'-------- bne.s dd1a <killParallax+0x8>
	}
}
    dd8c:	          nop
    dd8e:	          nop
    dd90:	          movea.l (sp)+,a6
    dd92:	          lea 12(sp),sp
    dd96:	          rts

0000dd98 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    dd98:	       move.l 4(sp),-(sp)
    dd9c:	       jsr 7f72 <openFileFromNum>
    dda2:	       addq.l #4,sp
    dda4:	       tst.l d0
    dda6:	   ,-- bne.s ddb8 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    dda8:	   |   pea 1a93d <PutChar+0x191d>
    ddae:	   |   jsr 1857e <KPrintF>
    ddb4:	   |   addq.l #4,sp
		return;
    ddb6:	,--|-- bra.s ddd8 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    ddb8:	|  '-> move.l 1e8a6 <bigDataFile>,d0
    ddbe:	|      move.l 12(sp),-(sp)
    ddc2:	|      move.l 12(sp),-(sp)
    ddc6:	|      move.l d0,-(sp)
    ddc8:	|      jsr 1ef8 <CstLoadBackdrop>
    ddce:	|      lea 12(sp),sp
	finishAccess ();
    ddd2:	|      jsr 7e6a <finishAccess>
	
}
    ddd8:	'----> rts

0000ddda <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    ddda:	subq.l #8,sp
    dddc:	movea.l 12(sp),a0
    dde0:	move.l 16(sp),d1
    dde4:	move.l 20(sp),d0
    dde8:	movea.w a0,a0
    ddea:	move.w a0,6(sp)
    ddee:	move.w d1,d1
    ddf0:	move.w d1,4(sp)
    ddf4:	move.w d0,d0
    ddf6:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    ddfa:	pea 1a98c <PutChar+0x196c>
    de00:	jsr 1857e <KPrintF>
    de06:	addq.l #4,sp

}
    de08:	nop
    de0a:	addq.l #8,sp
    de0c:	rts

0000de0e <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    de0e:	pea 1a9af <PutChar+0x198f>
    de14:	jsr 1857e <KPrintF>
    de1a:	addq.l #4,sp
}
    de1c:	nop
    de1e:	rts

0000de20 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    de20:	pea 1e96e <snapshotTextureName>
    de26:	pea 1 <_start+0x1>
    de2a:	jsr 4e1e <deleteTextures>
    de30:	addq.l #8,sp
	snapshotTextureName = 0;
    de32:	clr.l 1e96e <snapshotTextureName>
}
    de38:	nop
    de3a:	rts

0000de3c <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    de3c:	clr.l 1e97a <cameraX>
	cameraY = 0;
    de42:	clr.l 1e97e <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    de48:	move.l 1e960 <sceneHeight>,d0
    de4e:	move.l d0,d1
    de50:	move.l 1e95c <sceneWidth>,d0
    de56:	move.l d1,-(sp)
    de58:	move.l d0,-(sp)
    de5a:	jsr 3c50 <CstReserveBackdrop>
    de60:	addq.l #8,sp
}
    de62:	rts

0000de64 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    de64:	jsr dcea <killBackDrop>
	killParallax ();
    de6a:	jsr dd12 <killParallax>
	killZBuffer ();
    de70:	jsr 9082 <killZBuffer>
	sceneWidth = x;
    de76:	move.l 4(sp),d0
    de7a:	move.l d0,1e95c <sceneWidth>
	sceneHeight = y;
    de80:	move.l 8(sp),d0
    de84:	move.l d0,1e960 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    de8a:	pea 1a9e8 <PutChar+0x19c8>
    de90:	jsr 1857e <KPrintF>
    de96:	addq.l #4,sp
	return reserveBackdrop();
    de98:	jsr de3c <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    de9e:	rts

0000dea0 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    dea0:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    dea2:	move.l 12(sp),-(sp)
    dea6:	jsr 6bc <get2bytes>
    deac:	addq.l #4,sp
    deae:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    deb2:	move.l 12(sp),-(sp)
    deb6:	jsr 6bc <get2bytes>
    debc:	addq.l #4,sp
    debe:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    dec0:	moveq #1,d0
}
    dec2:	addq.l #8,sp
    dec4:	rts

0000dec6 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    dec6:	   ,-> lea -12(sp),sp
    deca:	   |   move.l a6,-(sp)
    decc:	   |   move.l d2,-(sp)
	if (me) {
    dece:	   |   tst.l 24(sp)
    ded2:	,--|-- beq.w df68 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    ded6:	|  |   movea.l 24(sp),a0
    deda:	|  |   move.l 42(a0),d0
    dede:	|  |   move.l 28(sp),-(sp)
    dee2:	|  |   move.l d0,-(sp)
    dee4:	|  '-- jsr dec6 <saveParallaxRecursive>(pc)
    dee8:	|      addq.l #8,sp
		FPutC (fp, 1);
    deea:	|      move.l 28(sp),16(sp)
    def0:	|      moveq #1,d0
    def2:	|      move.l d0,12(sp)
    def6:	|      move.l 1e8c8 <DOSBase>,d0
    defc:	|      movea.l d0,a6
    defe:	|      move.l 16(sp),d1
    df02:	|      move.l 12(sp),d2
    df06:	|      jsr -312(a6)
    df0a:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    df0e:	|      movea.l 24(sp),a0
    df12:	|      move.w 28(a0),d0
    df16:	|      move.w d0,d0
    df18:	|      andi.l #65535,d0
    df1e:	|      move.l 28(sp),-(sp)
    df22:	|      move.l d0,-(sp)
    df24:	|      jsr 8d0 <put2bytes>
    df2a:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    df2c:	|      movea.l 24(sp),a0
    df30:	|      move.w 30(a0),d0
    df34:	|      move.w d0,d0
    df36:	|      andi.l #65535,d0
    df3c:	|      move.l 28(sp),-(sp)
    df40:	|      move.l d0,-(sp)
    df42:	|      jsr 8d0 <put2bytes>
    df48:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    df4a:	|      movea.l 24(sp),a0
    df4e:	|      move.w 32(a0),d0
    df52:	|      move.w d0,d0
    df54:	|      andi.l #65535,d0
    df5a:	|      move.l 28(sp),-(sp)
    df5e:	|      move.l d0,-(sp)
    df60:	|      jsr 8d0 <put2bytes>
    df66:	|      addq.l #8,sp
	}
}
    df68:	'----> nop
    df6a:	       move.l (sp)+,d2
    df6c:	       movea.l (sp)+,a6
    df6e:	       lea 12(sp),sp
    df72:	       rts

0000df74 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    df74:	pea 1aa0f <PutChar+0x19ef>
    df7a:	jsr 1857e <KPrintF>
    df80:	addq.l #4,sp
	return TRUE;
    df82:	moveq #1,d0
    df84:	rts

0000df86 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    df86:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    df88:	             move.l 1e972 <allObjectTypes>,(sp)

	while (huntType) {
    df8e:	      ,----- bra.s dfa6 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    df90:	   ,--|----> movea.l (sp),a0
    df92:	   |  |      move.l 4(a0),d0
    df96:	   |  |      cmp.l 8(sp),d0
    df9a:	   |  |  ,-- bne.s dfa0 <findObjectType+0x1a>
    df9c:	   |  |  |   move.l (sp),d0
    df9e:	,--|--|--|-- bra.s dfb6 <findObjectType+0x30>
		huntType = huntType -> next;
    dfa0:	|  |  |  '-> movea.l (sp),a0
    dfa2:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    dfa6:	|  |  '----> tst.l (sp)
    dfa8:	|  '-------- bne.s df90 <findObjectType+0xa>
	}

	return loadObjectType (i);
    dfaa:	|            move.l 8(sp),-(sp)
    dfae:	|            jsr e076 <loadObjectType>
    dfb4:	|            addq.l #4,sp
}
    dfb6:	'----------> addq.l #4,sp
    dfb8:	             rts

0000dfba <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    dfba:	             lea -12(sp),sp
	int i, num = 0;
    dfbe:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    dfc2:	             move.l 20(sp),-(sp)
    dfc6:	             jsr df86 <findObjectType>
    dfcc:	             addq.l #4,sp
    dfce:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    dfd0:	             clr.l 8(sp)
    dfd4:	   ,-------- bra.s e00a <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    dfd6:	,--|-------> movea.l (sp),a0
    dfd8:	|  |         move.l 38(a0),d1
    dfdc:	|  |         move.l 8(sp),d0
    dfe0:	|  |         lsl.l #3,d0
    dfe2:	|  |         movea.l d1,a0
    dfe4:	|  |         adda.l d0,a0
    dfe6:	|  |         move.l (a0),d0
    dfe8:	|  |         cmp.l 16(sp),d0
    dfec:	|  |  ,----- bne.s e006 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    dfee:	|  |  |      movea.l (sp),a0
    dff0:	|  |  |      move.l 38(a0),d1
    dff4:	|  |  |      move.l 8(sp),d0
    dff8:	|  |  |      lsl.l #3,d0
    dffa:	|  |  |      movea.l d1,a0
    dffc:	|  |  |      adda.l d0,a0
    dffe:	|  |  |      move.l 4(a0),4(sp)
			break;
    e004:	|  |  |  ,-- bra.s e016 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    e006:	|  |  '--|-> addq.l #1,8(sp)
    e00a:	|  '-----|-> movea.l (sp),a0
    e00c:	|        |   move.l 16(a0),d0
    e010:	|        |   cmp.l 8(sp),d0
    e014:	'--------|-- bgt.s dfd6 <getCombinationFunction+0x1c>
		}
	}

	return num;
    e016:	         '-> move.l 4(sp),d0
}
    e01a:	             lea 12(sp),sp
    e01e:	             rts

0000e020 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    e020:	moveq #1,d0
}
    e022:	rts

0000e024 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    e024:	subq.l #8,sp
    e026:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    e028:	move.l 16(sp),-(sp)
    e02c:	jsr 6bc <get2bytes>
    e032:	addq.l #4,sp
    e034:	move.l d0,-(sp)
    e036:	jsr e076 <loadObjectType>
    e03c:	addq.l #4,sp
    e03e:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    e042:	movea.l 8(sp),a0
    e046:	move.l (a0),4(sp)
    e04a:	move.l 1e8c0 <SysBase>,d0
    e050:	movea.l d0,a6
    e052:	movea.l 4(sp),a1
    e056:	jsr -690(a6)
	r -> screenName = readString (fp);
    e05a:	move.l 16(sp),-(sp)
    e05e:	jsr b02 <readString>
    e064:	addq.l #4,sp
    e066:	movea.l 8(sp),a0
    e06a:	move.l d0,(a0)
	return r;
    e06c:	move.l 8(sp),d0
}
    e070:	movea.l (sp)+,a6
    e072:	addq.l #8,sp
    e074:	rts

0000e076 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    e076:	          lea -84(sp),sp
    e07a:	          move.l a6,-(sp)
    e07c:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    e07e:	          moveq #42,d0
    e080:	          move.l d0,84(sp)
    e084:	          clr.l 80(sp)
    e088:	          move.l 1e8c0 <SysBase>,d0
    e08e:	          movea.l d0,a6
    e090:	          move.l 84(sp),d0
    e094:	          move.l 80(sp),d1
    e098:	          jsr -684(a6)
    e09c:	          move.l d0,76(sp)
    e0a0:	          move.l 76(sp),d0
    e0a4:	          move.l d0,72(sp)

    if (newType) {
    e0a8:	,-------- beq.w e322 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    e0ac:	|         move.l 96(sp),-(sp)
    e0b0:	|         jsr 803a <openObjectSlice>
    e0b6:	|         addq.l #4,sp
    e0b8:	|         tst.w d0
    e0ba:	+-------- beq.w e322 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    e0be:	|         move.l 1e8a6 <bigDataFile>,d0
    e0c4:	|         move.l d0,-(sp)
    e0c6:	|         jsr 6bc <get2bytes>
    e0cc:	|         addq.l #4,sp
    e0ce:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    e0d2:	|         move.l 1e8a6 <bigDataFile>,64(sp)
    e0da:	|         move.l 1e8c8 <DOSBase>,d0
    e0e0:	|         movea.l d0,a6
    e0e2:	|         move.l 64(sp),d1
    e0e6:	|         jsr -306(a6)
    e0ea:	|         move.l d0,60(sp)
    e0ee:	|         move.l 60(sp),d0
    e0f2:	|         move.l d0,d0
    e0f4:	|         movea.l 72(sp),a0
    e0f8:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    e0fc:	|         move.l 1e8a6 <bigDataFile>,56(sp)
    e104:	|         move.l 1e8c8 <DOSBase>,d0
    e10a:	|         movea.l d0,a6
    e10c:	|         move.l 56(sp),d1
    e110:	|         jsr -306(a6)
    e114:	|         move.l d0,52(sp)
    e118:	|         move.l 52(sp),d0
    e11c:	|         move.l d0,d0
    e11e:	|         movea.l 72(sp),a0
    e122:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    e126:	|         move.l 1e8a6 <bigDataFile>,48(sp)
    e12e:	|         move.l 1e8c8 <DOSBase>,d0
    e134:	|         movea.l d0,a6
    e136:	|         move.l 48(sp),d1
    e13a:	|         jsr -306(a6)
    e13e:	|         move.l d0,44(sp)
    e142:	|         move.l 44(sp),d0
    e146:	|         move.l d0,d0
    e148:	|         movea.l 72(sp),a0
    e14c:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    e150:	|         move.l 1e8a6 <bigDataFile>,40(sp)
    e158:	|         move.l 1e8c8 <DOSBase>,d0
    e15e:	|         movea.l d0,a6
    e160:	|         move.l 40(sp),d1
    e164:	|         jsr -306(a6)
    e168:	|         move.l d0,36(sp)
    e16c:	|         move.l 36(sp),d0
    e170:	|         movea.l 72(sp),a0
    e174:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    e178:	|         move.l 1e8a6 <bigDataFile>,32(sp)
    e180:	|         move.l 1e8c8 <DOSBase>,d0
    e186:	|         movea.l d0,a6
    e188:	|         move.l 32(sp),d1
    e18c:	|         jsr -306(a6)
    e190:	|         move.l d0,28(sp)
    e194:	|         move.l 28(sp),d0
    e198:	|         movea.l 72(sp),a0
    e19c:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    e1a0:	|         move.l 1e8a6 <bigDataFile>,d0
    e1a6:	|         move.l d0,-(sp)
    e1a8:	|         jsr 718 <get4bytes>
    e1ae:	|         addq.l #4,sp
    e1b0:	|         movea.l 72(sp),a0
    e1b4:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    e1b8:	|         move.l 1e8a6 <bigDataFile>,d0
    e1be:	|         move.l d0,-(sp)
    e1c0:	|         jsr 6bc <get2bytes>
    e1c6:	|         addq.l #4,sp
    e1c8:	|         movea.l 72(sp),a0
    e1cc:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    e1d0:	|         move.l 1e8a6 <bigDataFile>,24(sp)
    e1d8:	|         move.l 1e8c8 <DOSBase>,d0
    e1de:	|         movea.l d0,a6
    e1e0:	|         move.l 24(sp),d1
    e1e4:	|         jsr -306(a6)
    e1e8:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    e1ec:	|         move.l 1e8a6 <bigDataFile>,d0
    e1f2:	|         move.l d0,-(sp)
    e1f4:	|         jsr 7d8 <getFloat>
    e1fa:	|         addq.l #4,sp
            getFloat(bigDataFile);
    e1fc:	|         move.l 1e8a6 <bigDataFile>,d0
    e202:	|         move.l d0,-(sp)
    e204:	|         jsr 7d8 <getFloat>
    e20a:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    e20c:	|         move.l 1e8a6 <bigDataFile>,d0
    e212:	|         move.l d0,-(sp)
    e214:	|         jsr 6bc <get2bytes>
    e21a:	|         addq.l #4,sp
    e21c:	|         move.l d0,d0
    e21e:	|         movea.l 72(sp),a0
    e222:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    e226:	|         move.l 1e8a6 <bigDataFile>,d0
    e22c:	|         move.l d0,-(sp)
    e22e:	|         jsr 6bc <get2bytes>
    e234:	|         addq.l #4,sp
    e236:	|         movea.l 72(sp),a0
    e23a:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    e23e:	|         movea.l 72(sp),a0
    e242:	|         move.l 16(a0),d0
    e246:	|  ,----- beq.s e278 <loadObjectType+0x202>
    e248:	|  |      movea.l 72(sp),a0
    e24c:	|  |      move.l 16(a0),d0
    e250:	|  |      lsl.l #3,d0
    e252:	|  |      move.l d0,16(sp)
    e256:	|  |      clr.l 12(sp)
    e25a:	|  |      move.l 1e8c0 <SysBase>,d0
    e260:	|  |      movea.l d0,a6
    e262:	|  |      move.l 16(sp),d0
    e266:	|  |      move.l 12(sp),d1
    e26a:	|  |      jsr -684(a6)
    e26e:	|  |      move.l d0,8(sp)
    e272:	|  |      move.l 8(sp),d0
    e276:	|  |  ,-- bra.s e27a <loadObjectType+0x204>
    e278:	|  '--|-> moveq #0,d0
    e27a:	|     '-> movea.l 72(sp),a0
    e27e:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    e282:	|         clr.l 88(sp)
    e286:	|     ,-- bra.s e2d6 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    e288:	|  ,--|-> move.l 1e8a6 <bigDataFile>,d1
    e28e:	|  |  |   movea.l 72(sp),a0
    e292:	|  |  |   movea.l 38(a0),a0
    e296:	|  |  |   move.l 88(sp),d0
    e29a:	|  |  |   lsl.l #3,d0
    e29c:	|  |  |   lea (0,a0,d0.l),a2
    e2a0:	|  |  |   move.l d1,-(sp)
    e2a2:	|  |  |   jsr 6bc <get2bytes>
    e2a8:	|  |  |   addq.l #4,sp
    e2aa:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    e2ac:	|  |  |   move.l 1e8a6 <bigDataFile>,d1
    e2b2:	|  |  |   movea.l 72(sp),a0
    e2b6:	|  |  |   movea.l 38(a0),a0
    e2ba:	|  |  |   move.l 88(sp),d0
    e2be:	|  |  |   lsl.l #3,d0
    e2c0:	|  |  |   lea (0,a0,d0.l),a2
    e2c4:	|  |  |   move.l d1,-(sp)
    e2c6:	|  |  |   jsr 6bc <get2bytes>
    e2cc:	|  |  |   addq.l #4,sp
    e2ce:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    e2d2:	|  |  |   addq.l #1,88(sp)
    e2d6:	|  |  '-> movea.l 72(sp),a0
    e2da:	|  |      move.l 16(a0),d0
    e2de:	|  |      cmp.l 88(sp),d0
    e2e2:	|  '----- bgt.s e288 <loadObjectType+0x212>
            }
            finishAccess();
    e2e4:	|         jsr 7e6a <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    e2ea:	|         move.l 68(sp),-(sp)
    e2ee:	|         jsr 7e74 <getNumberedString>
    e2f4:	|         addq.l #4,sp
    e2f6:	|         movea.l 72(sp),a0
    e2fa:	|         move.l d0,(a0)
            newType->objectNum = i;
    e2fc:	|         movea.l 72(sp),a0
    e300:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    e306:	|         move.l 1e972 <allObjectTypes>,d0
    e30c:	|         movea.l 72(sp),a0
    e310:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    e314:	|         move.l 72(sp),1e972 <allObjectTypes>
            return newType;
    e31c:	|         move.l 72(sp),d0
    e320:	|     ,-- bra.s e324 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    e322:	'-----|-> moveq #0,d0
}
    e324:	      '-> movea.l (sp)+,a2
    e326:	          movea.l (sp)+,a6
    e328:	          lea 84(sp),sp
    e32c:	          rts

0000e32e <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    e32e:	             lea -16(sp),sp
    e332:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    e334:	             move.l #125298,16(sp)

	while (* huntRegion) {
    e33c:	   ,-------- bra.s e3b0 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    e33e:	,--|-------> movea.l 16(sp),a0
    e342:	|  |         move.l (a0),d0
    e344:	|  |         cmp.l 24(sp),d0
    e348:	|  |  ,----- bne.s e3a2 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    e34a:	|  |  |      movea.l 24(sp),a0
    e34e:	|  |  |      move.l 8(a0),d0
    e352:	|  |  |      movea.l 16(sp),a0
    e356:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    e358:	|  |  |      movea.l 24(sp),a0
    e35c:	|  |  |      move.l 38(a0),12(sp)
    e362:	|  |  |      move.l 1e8c0 <SysBase>,d0
    e368:	|  |  |      movea.l d0,a6
    e36a:	|  |  |      movea.l 12(sp),a1
    e36e:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    e372:	|  |  |      movea.l 24(sp),a0
    e376:	|  |  |      move.l (a0),8(sp)
    e37a:	|  |  |      move.l 1e8c0 <SysBase>,d0
    e380:	|  |  |      movea.l d0,a6
    e382:	|  |  |      movea.l 8(sp),a1
    e386:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    e38a:	|  |  |      move.l 24(sp),4(sp)
    e390:	|  |  |      move.l 1e8c0 <SysBase>,d0
    e396:	|  |  |      movea.l d0,a6
    e398:	|  |  |      movea.l 4(sp),a1
    e39c:	|  |  |      jsr -690(a6)
			return;
    e3a0:	|  |  |  ,-- bra.s e3c6 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    e3a2:	|  |  '--|-> movea.l 16(sp),a0
    e3a6:	|  |     |   move.l (a0),d0
    e3a8:	|  |     |   move.l d0,d1
    e3aa:	|  |     |   addq.l #8,d1
    e3ac:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    e3b0:	|  '-----|-> movea.l 16(sp),a0
    e3b4:	|        |   move.l (a0),d0
    e3b6:	'--------|-- bne.s e33e <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    e3b8:	         |   pea 1aa36 <PutChar+0x1a16>
    e3be:	         |   jsr 1857e <KPrintF>
    e3c4:	         |   addq.l #4,sp
}
    e3c6:	         '-> movea.l (sp)+,a6
    e3c8:	             lea 16(sp),sp
    e3cc:	             rts

0000e3ce <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    e3ce:	movea.l 4(sp),a0
    e3d2:	move.l 4(a0),d0
    e3d6:	move.l 8(sp),-(sp)
    e3da:	move.l d0,-(sp)
    e3dc:	jsr 8d0 <put2bytes>
    e3e2:	addq.l #8,sp
	writeString (r -> screenName, fp);
    e3e4:	movea.l 4(sp),a0
    e3e8:	move.l (a0),d0
    e3ea:	move.l 8(sp),-(sp)
    e3ee:	move.l d0,-(sp)
    e3f0:	jsr bd8 <writeString>
    e3f6:	addq.l #8,sp
    e3f8:	nop
    e3fa:	rts

0000e3fc <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    e3fc:	                         lea -112(sp),sp
    e400:	                         move.l a6,-(sp)
    e402:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    e404:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    e408:	                         move.w 1e978 <saveEncoding>,d0
    e40e:	                  ,----- beq.s e418 <fileToStack+0x1c>
    e410:	                  |      move.l #109148,d0
    e416:	                  |  ,-- bra.s e41e <fileToStack+0x22>
    e418:	                  '--|-> move.l #109174,d0
    e41e:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    e422:	                         move.l 124(sp),112(sp)
    e428:	                         move.l #1005,108(sp)
    e430:	                         move.l 1e8c8 <DOSBase>,d0
    e436:	                         movea.l d0,a6
    e438:	                         move.l 112(sp),d1
    e43c:	                         move.l 108(sp),d2
    e440:	                         jsr -30(a6)
    e444:	                         move.l d0,104(sp)
    e448:	                         move.l 104(sp),d0
    e44c:	                         move.l d0,100(sp)
    if (!fp) {
    e450:	                     ,-- bne.s e46a <fileToStack+0x6e>
        KPrintF("No such file", filename);
    e452:	                     |   move.l 124(sp),-(sp)
    e456:	                     |   pea 1aa8d <PutChar+0x1a6d>
    e45c:	                     |   jsr 1857e <KPrintF>
    e462:	                     |   addq.l #8,sp
        return FALSE;
    e464:	                     |   clr.w d0
    e466:	,--------------------|-- bra.w e760 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    e46a:	|                    '-> move.w 1e978 <saveEncoding>,d0
    e470:	|                        move.l d0,d0
    e472:	|                        move.b d0,1e976 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    e478:	|                        move.w 1e978 <saveEncoding>,d0
    e47e:	|                        lsr.w #8,d0
    e480:	|                        move.l d0,d0
    e482:	|                        move.b d0,1e977 <encode2>

    while (*checker) {
    e488:	|                 ,----- bra.s e4ec <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    e48a:	|              ,--|----> move.l 100(sp),30(sp)
    e490:	|              |  |      move.l 1e8c8 <DOSBase>,d0
    e496:	|              |  |      movea.l d0,a6
    e498:	|              |  |      move.l 30(sp),d1
    e49c:	|              |  |      jsr -306(a6)
    e4a0:	|              |  |      move.l d0,26(sp)
    e4a4:	|              |  |      move.l 26(sp),d1
    e4a8:	|              |  |      movea.l 116(sp),a0
    e4ac:	|              |  |      move.b (a0),d0
    e4ae:	|              |  |      ext.w d0
    e4b0:	|              |  |      movea.w d0,a0
    e4b2:	|              |  |      cmpa.l d1,a0
    e4b4:	|              |  |  ,-- beq.s e4e8 <fileToStack+0xec>
            Close(fp);
    e4b6:	|              |  |  |   move.l 100(sp),22(sp)
    e4bc:	|              |  |  |   move.l 1e8c8 <DOSBase>,d0
    e4c2:	|              |  |  |   movea.l d0,a6
    e4c4:	|              |  |  |   move.l 22(sp),d1
    e4c8:	|              |  |  |   jsr -36(a6)
    e4cc:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    e4d0:	|              |  |  |   move.l 124(sp),-(sp)
    e4d4:	|              |  |  |   pea 1aa9a <PutChar+0x1a7a>
    e4da:	|              |  |  |   jsr 1857e <KPrintF>
    e4e0:	|              |  |  |   addq.l #8,sp
            return FALSE;
    e4e2:	|              |  |  |   clr.w d0
    e4e4:	+--------------|--|--|-- bra.w e760 <fileToStack+0x364>
        }
        checker++;
    e4e8:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    e4ec:	|              |  '----> movea.l 116(sp),a0
    e4f0:	|              |         move.b (a0),d0
    e4f2:	|              '-------- bne.s e48a <fileToStack+0x8e>
    }

    if (saveEncoding) {
    e4f4:	|                        move.w 1e978 <saveEncoding>,d0
    e4fa:	|  ,-------------------- beq.s e56e <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    e4fc:	|  |                     move.l 100(sp),-(sp)
    e500:	|  |                     jsr e76a <readStringEncoded>
    e506:	|  |                     addq.l #4,sp
    e508:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    e50c:	|  |                     pea 1aadb <PutChar+0x1abb>
    e512:	|  |                     move.l 100(sp),-(sp)
    e516:	|  |                     jsr 14f4a <strcmp>
    e51c:	|  |                     addq.l #8,sp
    e51e:	|  |                     tst.l d0
    e520:	|  |                 ,-- beq.s e554 <fileToStack+0x158>
            Close(fp);
    e522:	|  |                 |   move.l 100(sp),88(sp)
    e528:	|  |                 |   move.l 1e8c8 <DOSBase>,d0
    e52e:	|  |                 |   movea.l d0,a6
    e530:	|  |                 |   move.l 88(sp),d1
    e534:	|  |                 |   jsr -36(a6)
    e538:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    e53c:	|  |                 |   move.l 124(sp),-(sp)
    e540:	|  |                 |   pea 1aaea <PutChar+0x1aca>
    e546:	|  |                 |   jsr 1857e <KPrintF>
    e54c:	|  |                 |   addq.l #8,sp
            return FALSE;
    e54e:	|  |                 |   clr.w d0
    e550:	+--|-----------------|-- bra.w e760 <fileToStack+0x364>
        }
        FreeVec(checker);
    e554:	|  |                 '-> move.l 96(sp),92(sp)
    e55a:	|  |                     move.l 1e8c0 <SysBase>,d0
    e560:	|  |                     movea.l d0,a6
    e562:	|  |                     movea.l 92(sp),a1
    e566:	|  |                     jsr -690(a6)
        checker = NULL;
    e56a:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    e56e:	|  >-------------------> move.w 1e978 <saveEncoding>,d0
    e574:	|  |     ,-------------- beq.w e6a8 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    e578:	|  |     |               move.l 100(sp),76(sp)
    e57e:	|  |     |               move.l 1e8c8 <DOSBase>,d0
    e584:	|  |     |               movea.l d0,a6
    e586:	|  |     |               move.l 76(sp),d1
    e58a:	|  |     |               jsr -306(a6)
    e58e:	|  |     |               move.l d0,72(sp)
    e592:	|  |     |               move.l 72(sp),d0
    e596:	|  |     |               move.b 1e976 <encode1>,d1
    e59c:	|  |     |               ext.w d1
    e59e:	|  |     |               ext.l d1
    e5a0:	|  |     |               move.l d0,d2
    e5a2:	|  |     |               eor.l d1,d2
    e5a4:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    e5a8:	|  |     |               moveq #-1,d0
    e5aa:	|  |     |               cmp.l 68(sp),d0
    e5ae:	|  |  ,--|-------------- beq.w e73e <fileToStack+0x342>

            char i = (char) tmp;
    e5b2:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    e5b8:	|  |  |  |               move.b 67(sp),d0
    e5bc:	|  |  |  |               ext.w d0
    e5be:	|  |  |  |               movea.w d0,a0
    e5c0:	|  |  |  |               moveq #2,d2
    e5c2:	|  |  |  |               cmp.l a0,d2
    e5c4:	|  |  |  |     ,-------- beq.s e640 <fileToStack+0x244>
    e5c6:	|  |  |  |     |         moveq #2,d0
    e5c8:	|  |  |  |     |         cmp.l a0,d0
    e5ca:	|  |  |  |  ,--|-------- blt.w e676 <fileToStack+0x27a>
    e5ce:	|  |  |  |  |  |         cmpa.w #0,a0
    e5d2:	|  |  |  |  |  |     ,-- beq.s e5de <fileToStack+0x1e2>
    e5d4:	|  |  |  |  |  |     |   moveq #1,d2
    e5d6:	|  |  |  |  |  |     |   cmp.l a0,d2
    e5d8:	|  |  |  |  |  |  ,--|-- beq.s e61a <fileToStack+0x21e>
    e5da:	|  |  |  |  +--|--|--|-- bra.w e676 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    e5de:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    e5e2:	|  |  |  |  |  |  |      jsr e76a <readStringEncoded>
    e5e8:	|  |  |  |  |  |  |      addq.l #4,sp
    e5ea:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    e5ee:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    e5f2:	|  |  |  |  |  |  |      lea 14(sp),a0
    e5f6:	|  |  |  |  |  |  |      move.l a0,-(sp)
    e5f8:	|  |  |  |  |  |  |      jsr 15cc0 <makeTextVar>
    e5fe:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    e600:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    e606:	|  |  |  |  |  |  |      move.l 1e8c0 <SysBase>,d0
    e60c:	|  |  |  |  |  |  |      movea.l d0,a6
    e60e:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    e612:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    e616:	|  |  |  |  |  |  |  ,-- bra.w e6ce <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    e61a:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    e61e:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    e624:	|  |  |  |  |  |     |   addq.l #4,sp
    e626:	|  |  |  |  |  |     |   move.l d0,-(sp)
    e628:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    e62c:	|  |  |  |  |  |     |   lea 18(sp),a0
    e630:	|  |  |  |  |  |     |   move.l a0,-(sp)
    e632:	|  |  |  |  |  |     |   jsr 16390 <setVariable>
    e638:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    e63c:	|  |  |  |  |  |     +-- bra.w e6ce <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    e640:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    e646:	|  |  |  |  |        |   move.l 1e8c8 <DOSBase>,d0
    e64c:	|  |  |  |  |        |   movea.l d0,a6
    e64e:	|  |  |  |  |        |   move.l 62(sp),d1
    e652:	|  |  |  |  |        |   jsr -306(a6)
    e656:	|  |  |  |  |        |   move.l d0,58(sp)
    e65a:	|  |  |  |  |        |   move.l 58(sp),d0
    e65e:	|  |  |  |  |        |   move.l d0,-(sp)
    e660:	|  |  |  |  |        |   pea 1 <_start+0x1>
    e664:	|  |  |  |  |        |   lea 18(sp),a0
    e668:	|  |  |  |  |        |   move.l a0,-(sp)
    e66a:	|  |  |  |  |        |   jsr 16390 <setVariable>
    e670:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    e674:	|  |  |  |  |        +-- bra.s e6ce <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    e676:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    e67a:	|  |  |  |           |   pea 1ab6c <PutChar+0x1b4c>
    e680:	|  |  |  |           |   jsr 1857e <KPrintF>
    e686:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    e688:	|  |  |  |           |   move.l 100(sp),46(sp)
    e68e:	|  |  |  |           |   move.l 1e8c8 <DOSBase>,d0
    e694:	|  |  |  |           |   movea.l d0,a6
    e696:	|  |  |  |           |   move.l 46(sp),d1
    e69a:	|  |  |  |           |   jsr -36(a6)
    e69e:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    e6a2:	|  |  |  |           |   clr.w d0
    e6a4:	+--|--|--|-----------|-- bra.w e760 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    e6a8:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    e6ac:	|  |  |              |   jsr e830 <readTextPlain>
    e6b2:	|  |  |              |   addq.l #4,sp
    e6b4:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    e6b8:	|  |  |        ,-----|-- beq.w e742 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    e6bc:	|  |  |        |     |   move.l 80(sp),-(sp)
    e6c0:	|  |  |        |     |   lea 14(sp),a0
    e6c4:	|  |  |        |     |   move.l a0,-(sp)
    e6c6:	|  |  |        |     |   jsr 15cc0 <makeTextVar>
    e6cc:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    e6ce:	|  |  |        |     '-> movea.l 128(sp),a0
    e6d2:	|  |  |        |         move.l (a0),d0
    e6d4:	|  |  |        |  ,----- bne.s e704 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    e6d6:	|  |  |        |  |      move.l 128(sp),d0
    e6da:	|  |  |        |  |      move.l d0,-(sp)
    e6dc:	|  |  |        |  |      lea 14(sp),a0
    e6e0:	|  |  |        |  |      move.l a0,-(sp)
    e6e2:	|  |  |        |  |      jsr 15360 <addVarToStackQuick>
    e6e8:	|  |  |        |  |      addq.l #8,sp
    e6ea:	|  |  |        |  |      tst.w d0
    e6ec:	|  |  |        |  |  ,-- bne.s e6f2 <fileToStack+0x2f6>
    e6ee:	|  |  |        |  |  |   clr.w d0
    e6f0:	+--|--|--------|--|--|-- bra.s e760 <fileToStack+0x364>
            sH->last = sH->first;
    e6f2:	|  |  |        |  |  '-> movea.l 128(sp),a0
    e6f6:	|  |  |        |  |      move.l (a0),d0
    e6f8:	|  |  |        |  |      movea.l 128(sp),a0
    e6fc:	|  |  |        |  |      move.l d0,4(a0)
    e700:	|  +--|--------|--|----- bra.w e56e <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    e704:	|  |  |        |  '----> movea.l 128(sp),a0
    e708:	|  |  |        |         move.l 4(a0),d0
    e70c:	|  |  |        |         addq.l #8,d0
    e70e:	|  |  |        |         move.l d0,-(sp)
    e710:	|  |  |        |         lea 14(sp),a0
    e714:	|  |  |        |         move.l a0,-(sp)
    e716:	|  |  |        |         jsr 15360 <addVarToStackQuick>
    e71c:	|  |  |        |         addq.l #8,sp
    e71e:	|  |  |        |         tst.w d0
    e720:	|  |  |        |     ,-- bne.s e726 <fileToStack+0x32a>
    e722:	|  |  |        |     |   clr.w d0
    e724:	+--|--|--------|-----|-- bra.s e760 <fileToStack+0x364>
            sH->last = sH->last->next;
    e726:	|  |  |        |     '-> movea.l 128(sp),a0
    e72a:	|  |  |        |         movea.l 4(a0),a0
    e72e:	|  |  |        |         move.l 8(a0),d0
    e732:	|  |  |        |         movea.l 128(sp),a0
    e736:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    e73a:	|  '--|--------|-------- bra.w e56e <fileToStack+0x172>
            if (tmp == -1) break;
    e73e:	|     '--------|-------> nop
    e740:	|              |     ,-- bra.s e744 <fileToStack+0x348>
            if (!line) break;
    e742:	|              '-----|-> nop
        }
    }
    Close(fp);
    e744:	|                    '-> move.l 100(sp),38(sp)
    e74a:	|                        move.l 1e8c8 <DOSBase>,d0
    e750:	|                        movea.l d0,a6
    e752:	|                        move.l 38(sp),d1
    e756:	|                        jsr -36(a6)
    e75a:	|                        move.l d0,34(sp)
    return TRUE;
    e75e:	|                        moveq #1,d0
}
    e760:	'----------------------> move.l (sp)+,d2
    e762:	                         movea.l (sp)+,a6
    e764:	                         lea 112(sp),sp
    e768:	                         rts

0000e76a <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    e76a:	          lea -32(sp),sp
    e76e:	          move.l a6,-(sp)
    e770:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    e772:	          move.l 44(sp),-(sp)
    e776:	          jsr 6bc <get2bytes>
    e77c:	          addq.l #4,sp
    e77e:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    e782:	          move.l 32(sp),d0
    e786:	          addq.l #1,d0
    e788:	          move.l d0,28(sp)
    e78c:	          clr.l 24(sp)
    e790:	          move.l 1e8c0 <SysBase>,d0
    e796:	          movea.l d0,a6
    e798:	          move.l 28(sp),d0
    e79c:	          move.l 24(sp),d1
    e7a0:	          jsr -684(a6)
    e7a4:	          move.l d0,20(sp)
    e7a8:	          move.l 20(sp),d0
    e7ac:	          move.l d0,16(sp)
    if (!s) return NULL;
    e7b0:	      ,-- bne.s e7b6 <readStringEncoded+0x4c>
    e7b2:	      |   moveq #0,d0
    e7b4:	,-----|-- bra.s e826 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    e7b6:	|     '-> clr.l 36(sp)
    e7ba:	|     ,-- bra.s e80c <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    e7bc:	|  ,--|-> move.l 44(sp),12(sp)
    e7c2:	|  |  |   move.l 1e8c8 <DOSBase>,d0
    e7c8:	|  |  |   movea.l d0,a6
    e7ca:	|  |  |   move.l 12(sp),d1
    e7ce:	|  |  |   jsr -306(a6)
    e7d2:	|  |  |   move.l d0,8(sp)
    e7d6:	|  |  |   move.l 8(sp),d0
    e7da:	|  |  |   move.l d0,d1
    e7dc:	|  |  |   move.b 1e976 <encode1>,d2
    e7e2:	|  |  |   move.l 36(sp),d0
    e7e6:	|  |  |   movea.l 16(sp),a0
    e7ea:	|  |  |   adda.l d0,a0
    e7ec:	|  |  |   move.b d1,d0
    e7ee:	|  |  |   eor.b d2,d0
    e7f0:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    e7f2:	|  |  |   move.b 1e976 <encode1>,d0
    e7f8:	|  |  |   move.b d0,d1
    e7fa:	|  |  |   move.b 1e977 <encode2>,d0
    e800:	|  |  |   add.b d1,d0
    e802:	|  |  |   move.b d0,1e976 <encode1>
    for (a = 0; a < len; a++) {
    e808:	|  |  |   addq.l #1,36(sp)
    e80c:	|  |  '-> move.l 36(sp),d0
    e810:	|  |      cmp.l 32(sp),d0
    e814:	|  '----- blt.s e7bc <readStringEncoded+0x52>
    }
    s[len] = 0;
    e816:	|         move.l 32(sp),d0
    e81a:	|         movea.l 16(sp),a0
    e81e:	|         adda.l d0,a0
    e820:	|         clr.b (a0)
    return s;
    e822:	|         move.l 16(sp),d0
}
    e826:	'-------> move.l (sp)+,d2
    e828:	          movea.l (sp)+,a6
    e82a:	          lea 32(sp),sp
    e82e:	          rts

0000e830 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    e830:	             lea -104(sp),sp
    e834:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    e838:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    e83c:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    e842:	             move.l 124(sp),106(sp)
    e848:	             clr.l 102(sp)
    e84c:	             clr.l 98(sp)
    e850:	             move.l 1e8c8 <DOSBase>,d0
    e856:	             movea.l d0,a6
    e858:	             move.l 106(sp),d1
    e85c:	             move.l 102(sp),d2
    e860:	             move.l 98(sp),d3
    e864:	             jsr -66(a6)
    e868:	             move.l d0,94(sp)
    e86c:	             move.l 94(sp),d0
    e870:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    e874:	   ,-------- bra.s e8b8 <readTextPlain+0x88>
        tmp = FGetC(fp);
    e876:	,--|-------> move.l 124(sp),22(sp)
    e87c:	|  |         move.l 1e8c8 <DOSBase>,d0
    e882:	|  |         movea.l d0,a6
    e884:	|  |         move.l 22(sp),d1
    e888:	|  |         jsr -306(a6)
    e88c:	|  |         move.l d0,18(sp)
    e890:	|  |         move.l 18(sp),d0
    e894:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    e898:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    e89e:	|  |         cmpi.b #10,17(sp)
    e8a4:	|  |  ,----- beq.s e8ae <readTextPlain+0x7e>
    e8a6:	|  |  |      moveq #-1,d0
    e8a8:	|  |  |      cmp.l 110(sp),d0
    e8ac:	|  |  |  ,-- bne.s e8b4 <readTextPlain+0x84>
            keepGoing = FALSE;
    e8ae:	|  |  '--|-> clr.w 114(sp)
    e8b2:	|  +-----|-- bra.s e8b8 <readTextPlain+0x88>
        } else {
            stringSize++;
    e8b4:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    e8b8:	|  '-------> tst.w 114(sp)
    e8bc:	'----------- bne.s e876 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    e8be:	             tst.l 116(sp)
    e8c2:	         ,-- bne.s e8d2 <readTextPlain+0xa2>
    e8c4:	         |   moveq #-1,d0
    e8c6:	         |   cmp.l 110(sp),d0
    e8ca:	         +-- bne.s e8d2 <readTextPlain+0xa2>
        return NULL;
    e8cc:	         |   moveq #0,d0
    e8ce:	      ,--|-- bra.w e9b8 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    e8d2:	      |  '-> move.l 124(sp),86(sp)
    e8d8:	      |      move.l 90(sp),82(sp)
    e8de:	      |      moveq #-1,d0
    e8e0:	      |      move.l d0,78(sp)
    e8e4:	      |      move.l 1e8c8 <DOSBase>,d0
    e8ea:	      |      movea.l d0,a6
    e8ec:	      |      move.l 86(sp),d1
    e8f0:	      |      move.l 82(sp),d2
    e8f4:	      |      move.l 78(sp),d3
    e8f8:	      |      jsr -66(a6)
    e8fc:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    e900:	      |      move.l 116(sp),d0
    e904:	      |      addq.l #1,d0
    e906:	      |      move.l d0,70(sp)
    e90a:	      |      clr.l 66(sp)
    e90e:	      |      move.l 1e8c0 <SysBase>,d0
    e914:	      |      movea.l d0,a6
    e916:	      |      move.l 70(sp),d0
    e91a:	      |      move.l 66(sp),d1
    e91e:	      |      jsr -684(a6)
    e922:	      |      move.l d0,62(sp)
    e926:	      |      move.l 62(sp),d0
    e92a:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    e92e:	      |  ,-- bne.s e936 <readTextPlain+0x106>
    e930:	      |  |   moveq #0,d0
    e932:	      +--|-- bra.w e9b8 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e936:	      |  '-> move.l 124(sp),54(sp)
    e93c:	      |      move.l 58(sp),50(sp)
    e942:	      |      moveq #1,d0
    e944:	      |      move.l d0,46(sp)
    e948:	      |      move.l 116(sp),42(sp)
    e94e:	      |      move.l 1e8c8 <DOSBase>,d0
    e954:	      |      movea.l d0,a6
    e956:	      |      move.l 54(sp),d1
    e95a:	      |      move.l 50(sp),d2
    e95e:	      |      move.l 46(sp),d3
    e962:	      |      move.l 42(sp),d4
    e966:	      |      jsr -324(a6)
    e96a:	      |      move.l d0,38(sp)
    e96e:	      |      move.l 38(sp),d0
    e972:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e976:	      |      move.l 34(sp),d0
    e97a:	      |      cmp.l 116(sp),d0
    e97e:	      |  ,-- beq.s e98e <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e980:	      |  |   pea 1aba1 <PutChar+0x1b81>
    e986:	      |  |   jsr 1857e <KPrintF>
    e98c:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e98e:	      |  '-> move.l 124(sp),30(sp)
    e994:	      |      move.l 1e8c8 <DOSBase>,d0
    e99a:	      |      movea.l d0,a6
    e99c:	      |      move.l 30(sp),d1
    e9a0:	      |      jsr -306(a6)
    e9a4:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e9a8:	      |      move.l 116(sp),d0
    e9ac:	      |      movea.l 58(sp),a0
    e9b0:	      |      adda.l d0,a0
    e9b2:	      |      clr.b (a0)
    }

    return reply;
    e9b4:	      |      move.l 58(sp),d0
}
    e9b8:	      '----> movem.l (sp)+,d2-d4/a6
    e9bc:	             lea 104(sp),sp
    e9c0:	             rts

0000e9c2 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e9c2:	                      lea -144(sp),sp
    e9c6:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e9ca:	                      move.l 160(sp),148(sp)
    e9d0:	                      move.l #1006,144(sp)
    e9d8:	                      move.l 1e8c8 <DOSBase>,d0
    e9de:	                      movea.l d0,a6
    e9e0:	                      move.l 148(sp),d1
    e9e4:	                      move.l 144(sp),d2
    e9e8:	                      jsr -30(a6)
    e9ec:	                      move.l d0,140(sp)
    e9f0:	                      move.l 140(sp),d0
    e9f4:	                      move.l d0,136(sp)

    if (!fp) {
    e9f8:	                  ,-- bne.s ea12 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e9fa:	                  |   move.l 160(sp),-(sp)
    e9fe:	                  |   pea 1abc2 <PutChar+0x1ba2>
    ea04:	                  |   jsr 1857e <KPrintF>
    ea0a:	                  |   addq.l #8,sp
        return FALSE;
    ea0c:	                  |   clr.w d0
    ea0e:	,-----------------|-- bra.w ecce <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    ea12:	|                 '-> movea.l 164(sp),a0
    ea16:	|                     movea.l 4(a0),a0
    ea1a:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    ea1e:	|                     move.w 1e978 <saveEncoding>,d0
    ea24:	|                     move.l d0,d0
    ea26:	|                     move.b d0,1e976 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    ea2c:	|                     move.w 1e978 <saveEncoding>,d0
    ea32:	|                     lsr.w #8,d0
    ea34:	|                     move.l d0,d0
    ea36:	|                     move.b d0,1e977 <encode2>

    if (saveEncoding) {
    ea3c:	|                     move.w 1e978 <saveEncoding>,d0
    ea42:	|                 ,-- beq.s ea94 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    ea44:	|                 |   move.l 136(sp),116(sp)
    ea4a:	|                 |   move.l #109148,112(sp)
    ea52:	|                 |   moveq #99,d0
    ea54:	|                 |   not.b d0
    ea56:	|                 |   add.l sp,d0
    ea58:	|                 |   addi.l #-144,d0
    ea5e:	|                 |   move.l d0,108(sp)
    ea62:	|                 |   move.l 1e8c8 <DOSBase>,d0
    ea68:	|                 |   movea.l d0,a6
    ea6a:	|                 |   move.l 116(sp),d1
    ea6e:	|                 |   move.l 112(sp),d2
    ea72:	|                 |   move.l 108(sp),d3
    ea76:	|                 |   jsr -354(a6)
    ea7a:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    ea7e:	|                 |   move.l 136(sp),-(sp)
    ea82:	|                 |   pea 1aadb <PutChar+0x1abb>
    ea88:	|                 |   jsr ecd8 <writeStringEncoded>
    ea8e:	|                 |   addq.l #8,sp
    ea90:	|  ,--------------|-- bra.w eca6 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    ea94:	|  |              '-> move.l 136(sp),132(sp)
    ea9a:	|  |                  move.l #109174,128(sp)
    eaa2:	|  |                  moveq #99,d1
    eaa4:	|  |                  not.b d1
    eaa6:	|  |                  add.l sp,d1
    eaa8:	|  |                  addi.l #-144,d1
    eaae:	|  |                  move.l d1,124(sp)
    eab2:	|  |                  move.l 1e8c8 <DOSBase>,d0
    eab8:	|  |                  movea.l d0,a6
    eaba:	|  |                  move.l 132(sp),d1
    eabe:	|  |                  move.l 128(sp),d2
    eac2:	|  |                  move.l 124(sp),d3
    eac6:	|  |                  jsr -354(a6)
    eaca:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    eace:	|  +----------------- bra.w eca6 <stackToFile+0x2e4>
        if (saveEncoding) {
    ead2:	|  |  ,-------------> move.w 1e978 <saveEncoding>,d0
    ead8:	|  |  |     ,-------- beq.w ec2a <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    eadc:	|  |  |     |         movea.l 152(sp),a0
    eae0:	|  |  |     |         move.l (a0),d0
    eae2:	|  |  |     |         moveq #1,d1
    eae4:	|  |  |     |         cmp.l d0,d1
    eae6:	|  |  |     |     ,-- beq.s eb36 <stackToFile+0x174>
    eae8:	|  |  |     |     |   moveq #3,d1
    eaea:	|  |  |     |     |   cmp.l d0,d1
    eaec:	|  |  |     |  ,--|-- bne.w ebf8 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    eaf0:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    eaf6:	|  |  |     |  |  |   move.b 1e976 <encode1>,d0
    eafc:	|  |  |     |  |  |   ext.w d0
    eafe:	|  |  |     |  |  |   movea.w d0,a0
    eb00:	|  |  |     |  |  |   move.l a0,72(sp)
    eb04:	|  |  |     |  |  |   move.l 1e8c8 <DOSBase>,d0
    eb0a:	|  |  |     |  |  |   movea.l d0,a6
    eb0c:	|  |  |     |  |  |   move.l 76(sp),d1
    eb10:	|  |  |     |  |  |   move.l 72(sp),d2
    eb14:	|  |  |     |  |  |   jsr -312(a6)
    eb18:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    eb1c:	|  |  |     |  |  |   movea.l 152(sp),a0
    eb20:	|  |  |     |  |  |   move.l 4(a0),d0
    eb24:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    eb28:	|  |  |     |  |  |   move.l d0,-(sp)
    eb2a:	|  |  |     |  |  |   jsr ecd8 <writeStringEncoded>
    eb30:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    eb32:	|  |  |  ,--|--|--|-- bra.w ec9c <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    eb36:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    eb3a:	|  |  |  |  |  |      move.l 4(a0),d0
    eb3e:	|  |  |  |  |  |  ,-- bmi.s ebae <stackToFile+0x1ec>
    eb40:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    eb44:	|  |  |  |  |  |  |   move.l 4(a0),d0
    eb48:	|  |  |  |  |  |  |   cmpi.l #255,d0
    eb4e:	|  |  |  |  |  |  +-- bgt.s ebae <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    eb50:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    eb56:	|  |  |  |  |  |  |   move.b 1e976 <encode1>,d0
    eb5c:	|  |  |  |  |  |  |   eori.b #2,d0
    eb60:	|  |  |  |  |  |  |   ext.w d0
    eb62:	|  |  |  |  |  |  |   movea.w d0,a0
    eb64:	|  |  |  |  |  |  |   move.l a0,60(sp)
    eb68:	|  |  |  |  |  |  |   move.l 1e8c8 <DOSBase>,d0
    eb6e:	|  |  |  |  |  |  |   movea.l d0,a6
    eb70:	|  |  |  |  |  |  |   move.l 64(sp),d1
    eb74:	|  |  |  |  |  |  |   move.l 60(sp),d2
    eb78:	|  |  |  |  |  |  |   jsr -312(a6)
    eb7c:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    eb80:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    eb86:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    eb8a:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    eb90:	|  |  |  |  |  |  |   move.l 1e8c8 <DOSBase>,d0
    eb96:	|  |  |  |  |  |  |   movea.l d0,a6
    eb98:	|  |  |  |  |  |  |   move.l 52(sp),d1
    eb9c:	|  |  |  |  |  |  |   move.l 48(sp),d2
    eba0:	|  |  |  |  |  |  |   jsr -312(a6)
    eba4:	|  |  |  |  |  |  |   move.l d0,44(sp)
    eba8:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    ebaa:	|  |  |  +--|--|--|-- bra.w ec9c <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    ebae:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    ebb4:	|  |  |  |  |  |      move.b 1e976 <encode1>,d0
    ebba:	|  |  |  |  |  |      eori.b #1,d0
    ebbe:	|  |  |  |  |  |      ext.w d0
    ebc0:	|  |  |  |  |  |      movea.w d0,a0
    ebc2:	|  |  |  |  |  |      move.l a0,36(sp)
    ebc6:	|  |  |  |  |  |      move.l 1e8c8 <DOSBase>,d0
    ebcc:	|  |  |  |  |  |      movea.l d0,a6
    ebce:	|  |  |  |  |  |      move.l 40(sp),d1
    ebd2:	|  |  |  |  |  |      move.l 36(sp),d2
    ebd6:	|  |  |  |  |  |      jsr -312(a6)
    ebda:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    ebde:	|  |  |  |  |  |      movea.l 152(sp),a0
    ebe2:	|  |  |  |  |  |      move.l 4(a0),d0
    ebe6:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    ebea:	|  |  |  |  |  |      move.l d0,-(sp)
    ebec:	|  |  |  |  |  |      jsr 958 <put4bytes>
    ebf2:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    ebf4:	|  |  |  +--|--|----- bra.w ec9c <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    ebf8:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    ebfc:	|  |  |  |  |         pea 1abd4 <PutChar+0x1bb4>
    ec02:	|  |  |  |  |         jsr 1857e <KPrintF>
    ec08:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    ec0a:	|  |  |  |  |         move.l 136(sp),28(sp)
    ec10:	|  |  |  |  |         move.l 1e8c8 <DOSBase>,d0
    ec16:	|  |  |  |  |         movea.l d0,a6
    ec18:	|  |  |  |  |         move.l 28(sp),d1
    ec1c:	|  |  |  |  |         jsr -36(a6)
    ec20:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    ec24:	|  |  |  |  |         clr.w d0
    ec26:	+--|--|--|--|-------- bra.w ecce <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    ec2a:	|  |  |  |  '-------> move.l 152(sp),d0
    ec2e:	|  |  |  |            move.l d0,-(sp)
    ec30:	|  |  |  |            jsr 16074 <getTextFromAnyVar>
    ec36:	|  |  |  |            addq.l #4,sp
    ec38:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    ec3c:	|  |  |  |     ,----- beq.s ecb0 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    ec3e:	|  |  |  |     |      movea.l 100(sp),a0
    ec42:	|  |  |  |     |      move.b (a0),d0
    ec44:	|  |  |  |     |      ext.w d0
    ec46:	|  |  |  |     |      movea.w d0,a0
    ec48:	|  |  |  |     |      move.l a0,12(sp)
    ec4c:	|  |  |  |     |      move.l 136(sp),96(sp)
    ec52:	|  |  |  |     |      move.l #109616,92(sp)
    ec5a:	|  |  |  |     |      moveq #99,d0
    ec5c:	|  |  |  |     |      not.b d0
    ec5e:	|  |  |  |     |      add.l sp,d0
    ec60:	|  |  |  |     |      addi.l #-144,d0
    ec66:	|  |  |  |     |      move.l d0,88(sp)
    ec6a:	|  |  |  |     |      move.l 1e8c8 <DOSBase>,d0
    ec70:	|  |  |  |     |      movea.l d0,a6
    ec72:	|  |  |  |     |      move.l 96(sp),d1
    ec76:	|  |  |  |     |      move.l 92(sp),d2
    ec7a:	|  |  |  |     |      move.l 88(sp),d3
    ec7e:	|  |  |  |     |      jsr -354(a6)
    ec82:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    ec86:	|  |  |  |     |      move.l 100(sp),80(sp)
    ec8c:	|  |  |  |     |      move.l 1e8c0 <SysBase>,d0
    ec92:	|  |  |  |     |      movea.l d0,a6
    ec94:	|  |  |  |     |      movea.l 80(sp),a1
    ec98:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    ec9c:	|  |  |  '-----|----> movea.l 152(sp),a0
    eca0:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    eca6:	|  '--|--------|----> tst.l 152(sp)
    ecaa:	|     '--------|----- bne.w ead2 <stackToFile+0x110>
    ecae:	|              |  ,-- bra.s ecb2 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    ecb0:	|              '--|-> nop
    }
    Close(fp);
    ecb2:	|                 '-> move.l 136(sp),20(sp)
    ecb8:	|                     move.l 1e8c8 <DOSBase>,d0
    ecbe:	|                     movea.l d0,a6
    ecc0:	|                     move.l 20(sp),d1
    ecc4:	|                     jsr -36(a6)
    ecc8:	|                     move.l d0,16(sp)
    return TRUE;
    eccc:	|                     moveq #1,d0
}
    ecce:	'-------------------> movem.l (sp)+,d2-d3/a6
    ecd2:	                      lea 144(sp),sp
    ecd6:	                      rts

0000ecd8 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    ecd8:	       lea -20(sp),sp
    ecdc:	       move.l a6,-(sp)
    ecde:	       move.l d2,-(sp)
	int a, len = strlen (s);
    ece0:	       move.l 32(sp),-(sp)
    ece4:	       jsr 14f8a <strlen>
    ecea:	       addq.l #4,sp
    ecec:	       move.l d0,20(sp)

	put2bytes (len, fp);
    ecf0:	       move.l 36(sp),-(sp)
    ecf4:	       move.l 24(sp),-(sp)
    ecf8:	       jsr 8d0 <put2bytes>
    ecfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    ed00:	       clr.l 24(sp)
    ed04:	   ,-- bra.s ed5a <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    ed06:	,--|-> move.l 36(sp),16(sp)
    ed0c:	|  |   move.l 24(sp),d0
    ed10:	|  |   movea.l 32(sp),a0
    ed14:	|  |   adda.l d0,a0
    ed16:	|  |   move.b (a0),d1
    ed18:	|  |   move.b 1e976 <encode1>,d0
    ed1e:	|  |   eor.b d1,d0
    ed20:	|  |   ext.w d0
    ed22:	|  |   movea.w d0,a0
    ed24:	|  |   move.l a0,12(sp)
    ed28:	|  |   move.l 1e8c8 <DOSBase>,d0
    ed2e:	|  |   movea.l d0,a6
    ed30:	|  |   move.l 16(sp),d1
    ed34:	|  |   move.l 12(sp),d2
    ed38:	|  |   jsr -312(a6)
    ed3c:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    ed40:	|  |   move.b 1e976 <encode1>,d0
    ed46:	|  |   move.b d0,d1
    ed48:	|  |   move.b 1e977 <encode2>,d0
    ed4e:	|  |   add.b d1,d0
    ed50:	|  |   move.b d0,1e976 <encode1>
	for (a = 0; a < len; a ++) {
    ed56:	|  |   addq.l #1,24(sp)
    ed5a:	|  '-> move.l 24(sp),d0
    ed5e:	|      cmp.l 20(sp),d0
    ed62:	'----- blt.s ed06 <writeStringEncoded+0x2e>
	}
}
    ed64:	       nop
    ed66:	       nop
    ed68:	       move.l (sp)+,d2
    ed6a:	       movea.l (sp)+,a6
    ed6c:	       lea 20(sp),sp
    ed70:	       rts

0000ed72 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    ed72:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    ed74:	                   tst.l 8(sp)
    ed78:	               ,-- bne.s ed7e <failSecurityCheck+0xc>
    ed7a:	               |   moveq #1,d0
    ed7c:	,--------------|-- bra.s edfc <failSecurityCheck+0x8a>

	int a = 0;
    ed7e:	|              '-> clr.l (sp)

	while (fn[a]) {
    ed80:	|     ,----------- bra.s edee <failSecurityCheck+0x7c>
		switch (fn[a]) {
    ed82:	|  ,--|----------> move.l (sp),d0
    ed84:	|  |  |            movea.l 8(sp),a0
    ed88:	|  |  |            adda.l d0,a0
    ed8a:	|  |  |            move.b (a0),d0
    ed8c:	|  |  |            ext.w d0
    ed8e:	|  |  |            movea.w d0,a0
    ed90:	|  |  |            moveq #124,d0
    ed92:	|  |  |            cmp.l a0,d0
    ed94:	|  |  |     ,----- beq.s edd6 <failSecurityCheck+0x64>
    ed96:	|  |  |     |      moveq #124,d1
    ed98:	|  |  |     |      cmp.l a0,d1
    ed9a:	|  |  |  ,--|----- blt.s edec <failSecurityCheck+0x7a>
    ed9c:	|  |  |  |  |      moveq #92,d0
    ed9e:	|  |  |  |  |      cmp.l a0,d0
    eda0:	|  |  |  |  +----- beq.s edd6 <failSecurityCheck+0x64>
    eda2:	|  |  |  |  |      moveq #92,d1
    eda4:	|  |  |  |  |      cmp.l a0,d1
    eda6:	|  |  |  +--|----- blt.s edec <failSecurityCheck+0x7a>
    eda8:	|  |  |  |  |      moveq #60,d0
    edaa:	|  |  |  |  |      cmp.l a0,d0
    edac:	|  |  |  |  |  ,-- blt.s edcc <failSecurityCheck+0x5a>
    edae:	|  |  |  |  |  |   moveq #34,d1
    edb0:	|  |  |  |  |  |   cmp.l a0,d1
    edb2:	|  |  |  +--|--|-- bgt.s edec <failSecurityCheck+0x7a>
    edb4:	|  |  |  |  |  |   moveq #-34,d1
    edb6:	|  |  |  |  |  |   add.l a0,d1
    edb8:	|  |  |  |  |  |   move.l #83894529,d0
    edbe:	|  |  |  |  |  |   lsr.l d1,d0
    edc0:	|  |  |  |  |  |   moveq #1,d1
    edc2:	|  |  |  |  |  |   and.l d1,d0
    edc4:	|  |  |  |  |  |   sne d0
    edc6:	|  |  |  |  |  |   neg.b d0
    edc8:	|  |  |  |  +--|-- bne.s edd6 <failSecurityCheck+0x64>
    edca:	|  |  |  +--|--|-- bra.s edec <failSecurityCheck+0x7a>
    edcc:	|  |  |  |  |  '-> lea -62(a0),a0
    edd0:	|  |  |  |  |      moveq #1,d0
    edd2:	|  |  |  |  |      cmp.l a0,d0
    edd4:	|  |  |  +--|----- bcs.s edec <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    edd6:	|  |  |  |  '----> move.l 8(sp),-(sp)
    edda:	|  |  |  |         pea 1ac34 <PutChar+0x1c14>
    ede0:	|  |  |  |         jsr 1857e <KPrintF>
    ede6:	|  |  |  |         addq.l #8,sp
				return TRUE;
    ede8:	|  |  |  |         moveq #1,d0
    edea:	+--|--|--|-------- bra.s edfc <failSecurityCheck+0x8a>
		}
		a++;
    edec:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    edee:	|  |  '----------> move.l (sp),d0
    edf0:	|  |               movea.l 8(sp),a0
    edf4:	|  |               adda.l d0,a0
    edf6:	|  |               move.b (a0),d0
    edf8:	|  '-------------- bne.s ed82 <failSecurityCheck+0x10>
	}
	return FALSE;
    edfa:	|                  clr.w d0
}
    edfc:	'----------------> addq.l #4,sp
    edfe:	                   rts

0000ee00 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    ee00:	             lea -24(sp),sp
    ee04:	             move.l a6,-(sp)
    ee06:	             move.l 40(sp),d0
    ee0a:	             move.w d0,d0
    ee0c:	             move.w d0,6(sp)
	int fileNum = -1;
    ee10:	             moveq #-1,d0
    ee12:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    ee16:	             jsr 7042 <killSpeechTimers>

	switch (numParams) {
    ee1c:	             moveq #2,d0
    ee1e:	             cmp.l 32(sp),d0
    ee22:	      ,----- beq.s ee66 <sayCore+0x66>
    ee24:	      |      moveq #3,d0
    ee26:	      |      cmp.l 32(sp),d0
    ee2a:	,-----|----- bne.w ef48 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    ee2e:	|     |      movea.l 36(sp),a0
    ee32:	|     |      move.l 24(a0),d0
    ee36:	|     |      move.l d0,-(sp)
    ee38:	|     |      pea 5 <_start+0x5>
    ee3c:	|     |      lea 20(sp),a0
    ee40:	|     |      move.l a0,-(sp)
    ee42:	|     |      jsr 15a9e <getValueType>
    ee48:	|     |      lea 12(sp),sp
    ee4c:	|     |      tst.w d0
    ee4e:	|     |  ,-- bne.s ee56 <sayCore+0x56>
    ee50:	|     |  |   moveq #1,d0
    ee52:	|  ,--|--|-- bra.w ef58 <sayCore+0x158>
			trimStack (&fun -> stack);
    ee56:	|  |  |  '-> moveq #24,d0
    ee58:	|  |  |      add.l 36(sp),d0
    ee5c:	|  |  |      move.l d0,-(sp)
    ee5e:	|  |  |      jsr 16422 <trimStack>
    ee64:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    ee66:	|  |  '----> movea.l 36(sp),a0
    ee6a:	|  |         move.l 24(a0),d0
    ee6e:	|  |         move.l d0,-(sp)
    ee70:	|  |         jsr 16074 <getTextFromAnyVar>
    ee76:	|  |         addq.l #4,sp
    ee78:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    ee7c:	|  |     ,-- bne.s ee84 <sayCore+0x84>
    ee7e:	|  |     |   moveq #1,d0
    ee80:	|  +-----|-- bra.w ef58 <sayCore+0x158>
			trimStack (&fun -> stack);
    ee84:	|  |     '-> moveq #24,d0
    ee86:	|  |         add.l 36(sp),d0
    ee8a:	|  |         move.l d0,-(sp)
    ee8c:	|  |         jsr 16422 <trimStack>
    ee92:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee94:	|  |         movea.l 36(sp),a0
    ee98:	|  |         move.l 24(a0),d0
    ee9c:	|  |         move.l d0,-(sp)
    ee9e:	|  |         pea 7 <_start+0x7>
    eea2:	|  |         lea 16(sp),a0
    eea6:	|  |         move.l a0,-(sp)
    eea8:	|  |         jsr 15a9e <getValueType>
    eeae:	|  |         lea 12(sp),sp
    eeb2:	|  |         tst.w d0
    eeb4:	|  |     ,-- bne.s eebc <sayCore+0xbc>
    eeb6:	|  |     |   moveq #1,d0
    eeb8:	|  +-----|-- bra.w ef58 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eebc:	|  |     '-> movea.l 36(sp),a0
    eec0:	|  |         move.l 24(a0),d0
    eec4:	|  |         move.l d0,-(sp)
    eec6:	|  |         pea 7 <_start+0x7>
    eeca:	|  |         lea 16(sp),a0
    eece:	|  |         move.l a0,-(sp)
    eed0:	|  |         jsr 15a9e <getValueType>
    eed6:	|  |         lea 12(sp),sp
    eeda:	|  |         tst.w d0
    eedc:	|  |     ,-- bne.s eee2 <sayCore+0xe2>
    eede:	|  |     |   moveq #1,d0
    eee0:	|  +-----|-- bra.s ef58 <sayCore+0x158>
			trimStack (&fun -> stack);
    eee2:	|  |     '-> moveq #24,d0
    eee4:	|  |         add.l 36(sp),d0
    eee8:	|  |         move.l d0,-(sp)
    eeea:	|  |         jsr 16422 <trimStack>
    eef0:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    eef2:	|  |         movea.w 6(sp),a0
    eef6:	|  |         move.l 12(sp),d1
    eefa:	|  |         move.l 8(sp),d0
    eefe:	|  |         move.l a0,-(sp)
    ef00:	|  |         move.l d1,-(sp)
    ef02:	|  |         move.l d0,-(sp)
    ef04:	|  |         move.l 36(sp),-(sp)
    ef08:	|  |         jsr 4738 <wrapSpeech>
    ef0e:	|  |         lea 16(sp),sp
    ef12:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    ef16:	|  |         movea.l 36(sp),a0
    ef1a:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    ef20:	|  |         movea.l 36(sp),a0
    ef24:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    ef2a:	|  |         move.l 24(sp),16(sp)
    ef30:	|  |         move.l 1e8c0 <SysBase>,d0
    ef36:	|  |         movea.l d0,a6
    ef38:	|  |         movea.l 16(sp),a1
    ef3c:	|  |         jsr -690(a6)
			newText = NULL;
    ef40:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    ef44:	|  |         moveq #0,d0
    ef46:	|  +-------- bra.s ef58 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    ef48:	'--|-------> pea 1acba <PutChar+0x1c9a>
    ef4e:	   |         jsr 1857e <KPrintF>
    ef54:	   |         addq.l #4,sp
	return BR_ERROR;
    ef56:	   |         moveq #1,d0
}
    ef58:	   '-------> movea.l (sp)+,a6
    ef5a:	             lea 24(sp),sp
    ef5e:	             rts

0000ef60 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    ef60:	pea 1 <_start+0x1>
    ef64:	move.l 12(sp),-(sp)
    ef68:	move.l 12(sp),-(sp)
    ef6c:	jsr ee00 <sayCore>
    ef72:	lea 12(sp),sp
}
    ef76:	rts

0000ef78 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    ef78:	clr.l -(sp)
    ef7a:	move.l 12(sp),-(sp)
    ef7e:	move.l 12(sp),-(sp)
    ef82:	jsr ee00 <sayCore>
    ef88:	lea 12(sp),sp
}
    ef8c:	rts

0000ef8e <builtIn_freeze>:

builtIn(freeze)
{
	KPrintF("running freeze\n");
    ef8e:	pea 1ace8 <PutChar+0x1cc8>
    ef94:	jsr 1857e <KPrintF>
    ef9a:	addq.l #4,sp
	UNUSEDALL
	freeze ();
    ef9c:	jsr 1646a <freeze>
	freezeSubs (); 
    efa2:	jsr 6612 <freezeSubs>
	fun -> freezerLevel = 0;
    efa8:	movea.l 8(sp),a0
    efac:	clr.b 56(a0)
	return BR_CONTINUE;
    efb0:	moveq #2,d0
}
    efb2:	rts

0000efb4 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	KPrintF("running unfreeze\n");
    efb4:	pea 1acf8 <PutChar+0x1cd8>
    efba:	jsr 1857e <KPrintF>
    efc0:	addq.l #4,sp
	UNUSEDALL
	unfreeze ();
    efc2:	jsr 1666e <unfreeze>
	unfreezeSubs (); 
    efc8:	jsr 7e38 <unfreezeSubs>
	return BR_CONTINUE;
    efce:	moveq #2,d0
}
    efd0:	rts

0000efd2 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	//KPrintF("running howfrozen\n");
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    efd2:	jsr 1664a <howFrozen>
    efd8:	move.l d0,d1
    efda:	moveq #28,d0
    efdc:	add.l 8(sp),d0
    efe0:	move.l d1,-(sp)
    efe2:	pea 1 <_start+0x1>
    efe6:	move.l d0,-(sp)
    efe8:	jsr 16390 <setVariable>
    efee:	lea 12(sp),sp
	return BR_CONTINUE; 
    eff2:	moveq #2,d0
}
    eff4:	rts

0000eff6 <builtIn_setCursor>:

builtIn(setCursor)
{
    eff6:	subq.l #4,sp
	KPrintF("running setCursor\n");
    eff8:	pea 1ad0a <PutChar+0x1cea>
    effe:	jsr 1857e <KPrintF>
    f004:	addq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    f006:	movea.l 12(sp),a0
    f00a:	move.l 24(a0),d0
    f00e:	move.l d0,-(sp)
    f010:	jsr 15f76 <getAnimationFromVar>
    f016:	addq.l #4,sp
    f018:	move.l d0,(sp)
	pickAnimCursor (aa);
    f01a:	move.l (sp),-(sp)
    f01c:	jsr d6c <pickAnimCursor>
    f022:	addq.l #4,sp
	trimStack (&fun -> stack);
    f024:	moveq #24,d0
    f026:	add.l 12(sp),d0
    f02a:	move.l d0,-(sp)
    f02c:	jsr 16422 <trimStack>
    f032:	addq.l #4,sp
	return BR_CONTINUE;
    f034:	moveq #2,d0
}
    f036:	addq.l #4,sp
    f038:	rts

0000f03a <builtIn_getMouseX>:

builtIn(getMouseX)
{
	KPrintF("running getMouseX\n");
    f03a:	pea 1ad1d <PutChar+0x1cfd>
    f040:	jsr 1857e <KPrintF>
    f046:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    f048:	move.l 1e87a <input+0xa>,d1
    f04e:	move.l 1e97a <cameraX>,d0
    f054:	add.l d0,d1
    f056:	moveq #28,d0
    f058:	add.l 8(sp),d0
    f05c:	move.l d1,-(sp)
    f05e:	pea 1 <_start+0x1>
    f062:	move.l d0,-(sp)
    f064:	jsr 16390 <setVariable>
    f06a:	lea 12(sp),sp
	return BR_CONTINUE;
    f06e:	moveq #2,d0
}
    f070:	rts

0000f072 <builtIn_getMouseY>:

builtIn(getMouseY)
{
	KPrintF("running getMouseY\n");
    f072:	pea 1ad30 <PutChar+0x1d10>
    f078:	jsr 1857e <KPrintF>
    f07e:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    f080:	move.l 1e87e <input+0xe>,d1
    f086:	move.l 1e97e <cameraY>,d0
    f08c:	add.l d0,d1
    f08e:	moveq #28,d0
    f090:	add.l 8(sp),d0
    f094:	move.l d1,-(sp)
    f096:	pea 1 <_start+0x1>
    f09a:	move.l d0,-(sp)
    f09c:	jsr 16390 <setVariable>
    f0a2:	lea 12(sp),sp
	return BR_CONTINUE;
    f0a6:	moveq #2,d0
}
    f0a8:	rts

0000f0aa <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	KPrintF("running getMouseScreenX\n");
    f0aa:	pea 1ad43 <PutChar+0x1d23>
    f0b0:	jsr 1857e <KPrintF>
    f0b6:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    f0b8:	move.l 1e87a <input+0xa>,d0
    f0be:	move.l d0,-(sp)
    f0c0:	jsr 189b0 <__floatsisf>
    f0c6:	addq.l #4,sp
    f0c8:	move.l d0,d1
    f0ca:	move.l 1e246 <cameraZoom>,d0
    f0d0:	move.l d0,-(sp)
    f0d2:	move.l d1,-(sp)
    f0d4:	jsr 18a62 <__mulsf3>
    f0da:	addq.l #8,sp
    f0dc:	move.l d0,-(sp)
    f0de:	jsr 18948 <__fixsfsi>
    f0e4:	addq.l #4,sp
    f0e6:	move.l d0,d1
    f0e8:	moveq #28,d0
    f0ea:	add.l 8(sp),d0
    f0ee:	move.l d1,-(sp)
    f0f0:	pea 1 <_start+0x1>
    f0f4:	move.l d0,-(sp)
    f0f6:	jsr 16390 <setVariable>
    f0fc:	lea 12(sp),sp
	return BR_CONTINUE;
    f100:	moveq #2,d0
}
    f102:	rts

0000f104 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	KPrintF("running getMouseScreenY\n");
    f104:	pea 1ad5c <PutChar+0x1d3c>
    f10a:	jsr 1857e <KPrintF>
    f110:	addq.l #4,sp
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    f112:	move.l 1e87e <input+0xe>,d0
    f118:	move.l d0,-(sp)
    f11a:	jsr 189b0 <__floatsisf>
    f120:	addq.l #4,sp
    f122:	move.l d0,d1
    f124:	move.l 1e246 <cameraZoom>,d0
    f12a:	move.l d0,-(sp)
    f12c:	move.l d1,-(sp)
    f12e:	jsr 18a62 <__mulsf3>
    f134:	addq.l #8,sp
    f136:	move.l d0,-(sp)
    f138:	jsr 18948 <__fixsfsi>
    f13e:	addq.l #4,sp
    f140:	move.l d0,d1
    f142:	moveq #28,d0
    f144:	add.l 8(sp),d0
    f148:	move.l d1,-(sp)
    f14a:	pea 1 <_start+0x1>
    f14e:	move.l d0,-(sp)
    f150:	jsr 16390 <setVariable>
    f156:	lea 12(sp),sp
	return BR_CONTINUE;
    f15a:	moveq #2,d0
}
    f15c:	rts

0000f15e <builtIn_getStatusText>:

builtIn(getStatusText)
{
	KPrintF("running getStatusText\n");
    f15e:	pea 1ad75 <PutChar+0x1d55>
    f164:	jsr 1857e <KPrintF>
    f16a:	addq.l #4,sp
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    f16c:	jsr 8f4a <statusBarText>
    f172:	move.l d0,d1
    f174:	moveq #28,d0
    f176:	add.l 8(sp),d0
    f17a:	move.l d1,-(sp)
    f17c:	move.l d0,-(sp)
    f17e:	jsr 15cc0 <makeTextVar>
    f184:	addq.l #8,sp
	return BR_CONTINUE;
    f186:	moveq #2,d0
}
    f188:	rts

0000f18a <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    f18a:	       lea -20(sp),sp
    f18e:	       move.l a6,-(sp)
	KPrintF("running getMatchingFiles\n");
    f190:	       pea 1ad8c <PutChar+0x1d6c>
    f196:	       jsr 1857e <KPrintF>
    f19c:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f19e:	       movea.l 32(sp),a0
    f1a2:	       move.l 24(a0),d0
    f1a6:	       move.l d0,-(sp)
    f1a8:	       jsr 16074 <getTextFromAnyVar>
    f1ae:	       addq.l #4,sp
    f1b0:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    f1b4:	   ,-- bne.s f1bc <builtIn_getMatchingFiles+0x32>
    f1b6:	   |   moveq #1,d0
    f1b8:	,--|-- bra.w f27e <builtIn_getMatchingFiles+0xf4>
	trimStack (&fun -> stack);
    f1bc:	|  '-> moveq #24,d0
    f1be:	|      add.l 32(sp),d0
    f1c2:	|      move.l d0,-(sp)
    f1c4:	|      jsr 16422 <trimStack>
    f1ca:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    f1cc:	|      moveq #28,d0
    f1ce:	|      add.l 32(sp),d0
    f1d2:	|      move.l d0,-(sp)
    f1d4:	|      jsr 15cec <unlinkVar>
    f1da:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    f1dc:	|      movea.l 32(sp),a0
    f1e0:	|      moveq #6,d0
    f1e2:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    f1e6:	|      moveq #12,d0
    f1e8:	|      move.l d0,16(sp)
    f1ec:	|      clr.l 12(sp)
    f1f0:	|      move.l 1e8c0 <SysBase>,d0
    f1f6:	|      movea.l d0,a6
    f1f8:	|      move.l 16(sp),d0
    f1fc:	|      move.l 12(sp),d1
    f200:	|      jsr -684(a6)
    f204:	|      move.l d0,8(sp)
    f208:	|      move.l 8(sp),d0
    f20c:	|      movea.l 32(sp),a0
    f210:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    f214:	|      moveq #32,d0
    f216:	|      add.l 32(sp),d0
    f21a:	|  ,-- bne.s f220 <builtIn_getMatchingFiles+0x96>
    f21c:	|  |   moveq #1,d0
    f21e:	+--|-- bra.s f27e <builtIn_getMatchingFiles+0xf4>
	fun -> reg.varData.theStack -> first = NULL;
    f220:	|  '-> movea.l 32(sp),a0
    f224:	|      movea.l 32(a0),a0
    f228:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    f22a:	|      movea.l 32(sp),a0
    f22e:	|      movea.l 32(a0),a0
    f232:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    f236:	|      movea.l 32(sp),a0
    f23a:	|      movea.l 32(a0),a0
    f23e:	|      moveq #1,d0
    f240:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    f244:	|      movea.l 32(sp),a0
    f248:	|      move.l 32(a0),d0
    f24c:	|      move.l 20(sp),-(sp)
    f250:	|      move.l d0,-(sp)
    f252:	|      jsr 1585a <getSavedGamesStack>
    f258:	|      addq.l #8,sp
    f25a:	|      tst.w d0
    f25c:	|  ,-- bne.s f262 <builtIn_getMatchingFiles+0xd8>
    f25e:	|  |   moveq #1,d0
    f260:	+--|-- bra.s f27e <builtIn_getMatchingFiles+0xf4>
	FreeVec(newText);
    f262:	|  '-> move.l 20(sp),4(sp)
    f268:	|      move.l 1e8c0 <SysBase>,d0
    f26e:	|      movea.l d0,a6
    f270:	|      movea.l 4(sp),a1
    f274:	|      jsr -690(a6)
	newText = NULL;
    f278:	|      clr.l 20(sp)
	return BR_CONTINUE;
    f27c:	|      moveq #2,d0
}
    f27e:	'----> movea.l (sp)+,a6
    f280:	       lea 20(sp),sp
    f284:	       rts

0000f286 <builtIn_saveGame>:

builtIn(saveGame)
{
    f286:	       lea -12(sp),sp
    f28a:	       move.l a6,-(sp)
	KPrintF("running saveGame\n");
    f28c:	       pea 1ada6 <PutChar+0x1d86>
    f292:	       jsr 1857e <KPrintF>
    f298:	       addq.l #4,sp

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    f29a:	       movea.l 24(sp),a0
    f29e:	       move.l 24(a0),d0
    f2a2:	       move.l d0,-(sp)
    f2a4:	       jsr 16074 <getTextFromAnyVar>
    f2aa:	       addq.l #4,sp
    f2ac:	       move.l d0,1e88a <loadNow>
    trimStack(&fun->stack);
    f2b2:	       moveq #24,d0
    f2b4:	       add.l 24(sp),d0
    f2b8:	       move.l d0,-(sp)
    f2ba:	       jsr 16422 <trimStack>
    f2c0:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    f2c2:	       move.l 1e88a <loadNow>,d0
    f2c8:	       move.l d0,-(sp)
    f2ca:	       jsr 2fe <encodeFilename>
    f2d0:	       addq.l #4,sp
    f2d2:	       move.l d0,12(sp)
    FreeVec(loadNow);
    f2d6:	       move.l 1e88a <loadNow>,8(sp)
    f2de:	       move.l 1e8c0 <SysBase>,d0
    f2e4:	       movea.l d0,a6
    f2e6:	       movea.l 8(sp),a1
    f2ea:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    f2ee:	       move.l 12(sp),-(sp)
    f2f2:	       jsr ed72 <failSecurityCheck>
    f2f8:	       addq.l #4,sp
    f2fa:	       tst.w d0
    f2fc:	   ,-- beq.s f302 <builtIn_saveGame+0x7c>
    f2fe:	   |   moveq #1,d0
    f300:	,--|-- bra.s f352 <builtIn_saveGame+0xcc>

    loadNow = joinStrings(":", aaaaa);
    f302:	|  '-> move.l 12(sp),-(sp)
    f306:	|      pea 1adb8 <PutChar+0x1d98>
    f30c:	|      jsr 14fca <joinStrings>
    f312:	|      addq.l #8,sp
    f314:	|      move.l d0,1e88a <loadNow>
    FreeVec(aaaaa);
    f31a:	|      move.l 12(sp),4(sp)
    f320:	|      move.l 1e8c0 <SysBase>,d0
    f326:	|      movea.l d0,a6
    f328:	|      movea.l 4(sp),a1
    f32c:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    f330:	|      moveq #28,d0
    f332:	|      add.l 24(sp),d0
    f336:	|      clr.l -(sp)
    f338:	|      pea 1 <_start+0x1>
    f33c:	|      move.l d0,-(sp)
    f33e:	|      jsr 16390 <setVariable>
    f344:	|      lea 12(sp),sp
    saverFunc = fun;
    f348:	|      move.l 24(sp),1e98a <saverFunc>
    return BR_KEEP_AND_PAUSE;
    f350:	|      moveq #0,d0
}
    f352:	'----> movea.l (sp)+,a6
    f354:	       lea 12(sp),sp
    f358:	       rts

0000f35a <builtIn_fileExists>:

builtIn(fileExists)
{
    f35a:	       lea -36(sp),sp
    f35e:	       move.l a6,-(sp)
    f360:	       move.l d2,-(sp)
	KPrintF("running fileExists\n");
    f362:	       pea 1adba <PutChar+0x1d9a>
    f368:	       jsr 1857e <KPrintF>
    f36e:	       addq.l #4,sp
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    f370:	       movea.l 52(sp),a0
    f374:	       move.l 24(a0),d0
    f378:	       move.l d0,-(sp)
    f37a:	       jsr 16074 <getTextFromAnyVar>
    f380:	       addq.l #4,sp
    f382:	       move.l d0,1e88a <loadNow>
    trimStack(&fun->stack);
    f388:	       moveq #24,d0
    f38a:	       add.l 52(sp),d0
    f38e:	       move.l d0,-(sp)
    f390:	       jsr 16422 <trimStack>
    f396:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    f398:	       move.l 1e88a <loadNow>,d0
    f39e:	       move.l d0,-(sp)
    f3a0:	       jsr 2fe <encodeFilename>
    f3a6:	       addq.l #4,sp
    f3a8:	       move.l d0,40(sp)
    FreeVec(loadNow);
    f3ac:	       move.l 1e88a <loadNow>,36(sp)
    f3b4:	       move.l 1e8c0 <SysBase>,d0
    f3ba:	       movea.l d0,a6
    f3bc:	       movea.l 36(sp),a1
    f3c0:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    f3c4:	       move.l 40(sp),-(sp)
    f3c8:	       jsr ed72 <failSecurityCheck>
    f3ce:	       addq.l #4,sp
    f3d0:	       tst.w d0
    f3d2:	   ,-- beq.s f3da <builtIn_fileExists+0x80>
    f3d4:	   |   moveq #1,d0
    f3d6:	,--|-- bra.w f47a <builtIn_fileExists+0x120>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    f3da:	|  '-> move.l 40(sp),32(sp)
    f3e0:	|      move.l #1005,28(sp)
    f3e8:	|      move.l 1e8c8 <DOSBase>,d0
    f3ee:	|      movea.l d0,a6
    f3f0:	|      move.l 32(sp),d1
    f3f4:	|      move.l 28(sp),d2
    f3f8:	|      jsr -30(a6)
    f3fc:	|      move.l d0,24(sp)
    f400:	|      move.l 24(sp),d0
    f404:	|      move.l d0,20(sp)
    if (!fp) {        
    f408:	|  ,-- bne.s f418 <builtIn_fileExists+0xbe>
        KPrintF("Can't get current directory.\n");      
    f40a:	|  |   pea 1adce <PutChar+0x1dae>
    f410:	|  |   jsr 1857e <KPrintF>
    f416:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    f418:	|  '-> tst.l 20(sp)
    f41c:	|      sne d0
    f41e:	|      neg.b d0
    f420:	|      moveq #0,d1
    f422:	|      move.b d0,d1
    f424:	|      moveq #28,d0
    f426:	|      add.l 52(sp),d0
    f42a:	|      move.l d1,-(sp)
    f42c:	|      pea 1 <_start+0x1>
    f430:	|      move.l d0,-(sp)
    f432:	|      jsr 16390 <setVariable>
    f438:	|      lea 12(sp),sp
    if (fp) Close(fp);
    f43c:	|      tst.l 20(sp)
    f440:	|  ,-- beq.s f45c <builtIn_fileExists+0x102>
    f442:	|  |   move.l 20(sp),16(sp)
    f448:	|  |   move.l 1e8c8 <DOSBase>,d0
    f44e:	|  |   movea.l d0,a6
    f450:	|  |   move.l 16(sp),d1
    f454:	|  |   jsr -36(a6)
    f458:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    f45c:	|  '-> move.l 40(sp),8(sp)
    f462:	|      move.l 1e8c0 <SysBase>,d0
    f468:	|      movea.l d0,a6
    f46a:	|      movea.l 8(sp),a1
    f46e:	|      jsr -690(a6)
    loadNow = NULL;
    f472:	|      clr.l 1e88a <loadNow>
    return BR_CONTINUE;
    f478:	|      moveq #2,d0
}
    f47a:	'----> move.l (sp)+,d2
    f47c:	       movea.l (sp)+,a6
    f47e:	       lea 36(sp),sp
    f482:	       rts

0000f484 <builtIn_loadGame>:

builtIn(loadGame)
{
    f484:	       lea -36(sp),sp
    f488:	       move.l a6,-(sp)
    f48a:	       move.l d2,-(sp)
	KPrintF("running loadGame\n");
    f48c:	       pea 1adec <PutChar+0x1dcc>
    f492:	       jsr 1857e <KPrintF>
    f498:	       addq.l #4,sp
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    f49a:	       movea.l 52(sp),a0
    f49e:	       move.l 24(a0),d0
    f4a2:	       move.l d0,-(sp)
    f4a4:	       jsr 16074 <getTextFromAnyVar>
    f4aa:	       addq.l #4,sp
    f4ac:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    f4b0:	       moveq #24,d0
    f4b2:	       add.l 52(sp),d0
    f4b6:	       move.l d0,-(sp)
    f4b8:	       jsr 16422 <trimStack>
    f4be:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    f4c0:	       move.l 40(sp),-(sp)
    f4c4:	       jsr 2fe <encodeFilename>
    f4ca:	       addq.l #4,sp
    f4cc:	       move.l d0,1e88a <loadNow>
    FreeVec(aaaaa);
    f4d2:	       move.l 40(sp),36(sp)
    f4d8:	       move.l 1e8c0 <SysBase>,d0
    f4de:	       movea.l d0,a6
    f4e0:	       movea.l 36(sp),a1
    f4e4:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    f4e8:	       move.l 1e88a <loadNow>,d0
    f4ee:	       move.l d0,-(sp)
    f4f0:	       jsr ed72 <failSecurityCheck>
    f4f6:	       addq.l #4,sp
    f4f8:	       tst.w d0
    f4fa:	   ,-- beq.s f500 <builtIn_loadGame+0x7c>
    f4fc:	   |   moveq #1,d0
    f4fe:	,--|-- bra.s f570 <builtIn_loadGame+0xec>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    f500:	|  '-> move.l 1e88a <loadNow>,32(sp)
    f508:	|      move.l #1005,28(sp)
    f510:	|      move.l 1e8c8 <DOSBase>,d0
    f516:	|      movea.l d0,a6
    f518:	|      move.l 32(sp),d1
    f51c:	|      move.l 28(sp),d2
    f520:	|      jsr -30(a6)
    f524:	|      move.l d0,24(sp)
    f528:	|      move.l 24(sp),d0
    f52c:	|      move.l d0,20(sp)
    if (fp) {
    f530:	|  ,-- beq.s f550 <builtIn_loadGame+0xcc>
        Close(fp);
    f532:	|  |   move.l 20(sp),12(sp)
    f538:	|  |   move.l 1e8c8 <DOSBase>,d0
    f53e:	|  |   movea.l d0,a6
    f540:	|  |   move.l 12(sp),d1
    f544:	|  |   jsr -36(a6)
    f548:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    f54c:	|  |   moveq #0,d0
    f54e:	+--|-- bra.s f570 <builtIn_loadGame+0xec>
    }
    FreeVec(loadNow);
    f550:	|  '-> move.l 1e88a <loadNow>,16(sp)
    f558:	|      move.l 1e8c0 <SysBase>,d0
    f55e:	|      movea.l d0,a6
    f560:	|      movea.l 16(sp),a1
    f564:	|      jsr -690(a6)
    loadNow = NULL;
    f568:	|      clr.l 1e88a <loadNow>
    return BR_CONTINUE;
    f56e:	|      moveq #2,d0
}
    f570:	'----> move.l (sp)+,d2
    f572:	       movea.l (sp)+,a6
    f574:	       lea 36(sp),sp
    f578:	       rts

0000f57a <builtIn_blankScreen>:
#pragma mark -
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	KPrintF("running blankScreen\n");
    f57a:	pea 1adfe <PutChar+0x1dde>
    f580:	jsr 1857e <KPrintF>
    f586:	addq.l #4,sp
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    f588:	move.l 1e960 <sceneHeight>,d0
    f58e:	move.l d0,d1
    f590:	move.l 1e95c <sceneWidth>,d0
    f596:	move.l d1,-(sp)
    f598:	move.l d0,-(sp)
    f59a:	clr.l -(sp)
    f59c:	clr.l -(sp)
    f59e:	jsr dc5c <blankScreen>
    f5a4:	lea 16(sp),sp
	return BR_CONTINUE;
    f5a8:	moveq #2,d0
}
    f5aa:	rts

0000f5ac <builtIn_blankArea>:

builtIn(blankArea)
{
    f5ac:	       lea -16(sp),sp
	KPrintF("running blankArea\n");
    f5b0:	       pea 1ae13 <PutChar+0x1df3>
    f5b6:	       jsr 1857e <KPrintF>
    f5bc:	       addq.l #4,sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f5be:	       movea.l 24(sp),a0
    f5c2:	       move.l 24(a0),d0
    f5c6:	       move.l d0,-(sp)
    f5c8:	       pea 1 <_start+0x1>
    f5cc:	       lea 8(sp),a0
    f5d0:	       move.l a0,-(sp)
    f5d2:	       jsr 15a9e <getValueType>
    f5d8:	       lea 12(sp),sp
    f5dc:	       tst.w d0
    f5de:	   ,-- bne.s f5e6 <builtIn_blankArea+0x3a>
    f5e0:	   |   moveq #1,d0
    f5e2:	,--|-- bra.w f6bc <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f5e6:	|  '-> moveq #24,d0
    f5e8:	|      add.l 24(sp),d0
    f5ec:	|      move.l d0,-(sp)
    f5ee:	|      jsr 16422 <trimStack>
    f5f4:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f5f6:	|      movea.l 24(sp),a0
    f5fa:	|      move.l 24(a0),d0
    f5fe:	|      move.l d0,-(sp)
    f600:	|      pea 1 <_start+0x1>
    f604:	|      lea 12(sp),a0
    f608:	|      move.l a0,-(sp)
    f60a:	|      jsr 15a9e <getValueType>
    f610:	|      lea 12(sp),sp
    f614:	|      tst.w d0
    f616:	|  ,-- bne.s f61e <builtIn_blankArea+0x72>
    f618:	|  |   moveq #1,d0
    f61a:	+--|-- bra.w f6bc <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f61e:	|  '-> moveq #24,d0
    f620:	|      add.l 24(sp),d0
    f624:	|      move.l d0,-(sp)
    f626:	|      jsr 16422 <trimStack>
    f62c:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f62e:	|      movea.l 24(sp),a0
    f632:	|      move.l 24(a0),d0
    f636:	|      move.l d0,-(sp)
    f638:	|      pea 1 <_start+0x1>
    f63c:	|      moveq #16,d0
    f63e:	|      add.l sp,d0
    f640:	|      move.l d0,-(sp)
    f642:	|      jsr 15a9e <getValueType>
    f648:	|      lea 12(sp),sp
    f64c:	|      tst.w d0
    f64e:	|  ,-- bne.s f654 <builtIn_blankArea+0xa8>
    f650:	|  |   moveq #1,d0
    f652:	+--|-- bra.s f6bc <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f654:	|  '-> moveq #24,d0
    f656:	|      add.l 24(sp),d0
    f65a:	|      move.l d0,-(sp)
    f65c:	|      jsr 16422 <trimStack>
    f662:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f664:	|      movea.l 24(sp),a0
    f668:	|      move.l 24(a0),d0
    f66c:	|      move.l d0,-(sp)
    f66e:	|      pea 1 <_start+0x1>
    f672:	|      moveq #20,d0
    f674:	|      add.l sp,d0
    f676:	|      move.l d0,-(sp)
    f678:	|      jsr 15a9e <getValueType>
    f67e:	|      lea 12(sp),sp
    f682:	|      tst.w d0
    f684:	|  ,-- bne.s f68a <builtIn_blankArea+0xde>
    f686:	|  |   moveq #1,d0
    f688:	+--|-- bra.s f6bc <builtIn_blankArea+0x110>
	trimStack (&fun -> stack);
    f68a:	|  '-> moveq #24,d0
    f68c:	|      add.l 24(sp),d0
    f690:	|      move.l d0,-(sp)
    f692:	|      jsr 16422 <trimStack>
    f698:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    f69a:	|      movea.l (sp),a1
    f69c:	|      movea.l 4(sp),a0
    f6a0:	|      move.l 8(sp),d1
    f6a4:	|      move.l 12(sp),d0
    f6a8:	|      move.l a1,-(sp)
    f6aa:	|      move.l a0,-(sp)
    f6ac:	|      move.l d1,-(sp)
    f6ae:	|      move.l d0,-(sp)
    f6b0:	|      jsr dc5c <blankScreen>
    f6b6:	|      lea 16(sp),sp
	return BR_CONTINUE;
    f6ba:	|      moveq #2,d0
}
    f6bc:	'----> lea 16(sp),sp
    f6c0:	       rts

0000f6c2 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	KPrintF("running darkBackground\n");
    f6c2:	pea 1ae26 <PutChar+0x1e06>
    f6c8:	jsr 1857e <KPrintF>
    f6ce:	addq.l #4,sp
	UNUSEDALL
	darkScreen ();
    f6d0:	jsr dc7a <darkScreen>
	return BR_CONTINUE;
    f6d6:	moveq #2,d0
}
    f6d8:	rts

0000f6da <builtIn_addOverlay>:

builtIn(addOverlay)
{
    f6da:	       lea -12(sp),sp
	KPrintF("running addOverlay\n");
    f6de:	       pea 1ae3e <PutChar+0x1e1e>
    f6e4:	       jsr 1857e <KPrintF>
    f6ea:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f6ec:	       movea.l 20(sp),a0
    f6f0:	       move.l 24(a0),d0
    f6f4:	       move.l d0,-(sp)
    f6f6:	       pea 1 <_start+0x1>
    f6fa:	       lea 8(sp),a0
    f6fe:	       move.l a0,-(sp)
    f700:	       jsr 15a9e <getValueType>
    f706:	       lea 12(sp),sp
    f70a:	       tst.w d0
    f70c:	   ,-- bne.s f714 <builtIn_addOverlay+0x3a>
    f70e:	   |   moveq #1,d0
    f710:	,--|-- bra.w f7ac <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f714:	|  '-> moveq #24,d0
    f716:	|      add.l 20(sp),d0
    f71a:	|      move.l d0,-(sp)
    f71c:	|      jsr 16422 <trimStack>
    f722:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f724:	|      movea.l 20(sp),a0
    f728:	|      move.l 24(a0),d0
    f72c:	|      move.l d0,-(sp)
    f72e:	|      pea 1 <_start+0x1>
    f732:	|      moveq #12,d0
    f734:	|      add.l sp,d0
    f736:	|      move.l d0,-(sp)
    f738:	|      jsr 15a9e <getValueType>
    f73e:	|      lea 12(sp),sp
    f742:	|      tst.w d0
    f744:	|  ,-- bne.s f74a <builtIn_addOverlay+0x70>
    f746:	|  |   moveq #1,d0
    f748:	+--|-- bra.s f7ac <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f74a:	|  '-> moveq #24,d0
    f74c:	|      add.l 20(sp),d0
    f750:	|      move.l d0,-(sp)
    f752:	|      jsr 16422 <trimStack>
    f758:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f75a:	|      movea.l 20(sp),a0
    f75e:	|      move.l 24(a0),d0
    f762:	|      move.l d0,-(sp)
    f764:	|      pea 5 <_start+0x5>
    f768:	|      moveq #16,d0
    f76a:	|      add.l sp,d0
    f76c:	|      move.l d0,-(sp)
    f76e:	|      jsr 15a9e <getValueType>
    f774:	|      lea 12(sp),sp
    f778:	|      tst.w d0
    f77a:	|  ,-- bne.s f780 <builtIn_addOverlay+0xa6>
    f77c:	|  |   moveq #1,d0
    f77e:	+--|-- bra.s f7ac <builtIn_addOverlay+0xd2>
	trimStack (&fun -> stack);
    f780:	|  '-> moveq #24,d0
    f782:	|      add.l 20(sp),d0
    f786:	|      move.l d0,-(sp)
    f788:	|      jsr 16422 <trimStack>
    f78e:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    f790:	|      movea.l (sp),a0
    f792:	|      move.l 4(sp),d1
    f796:	|      move.l 8(sp),d0
    f79a:	|      move.l a0,-(sp)
    f79c:	|      move.l d1,-(sp)
    f79e:	|      move.l d0,-(sp)
    f7a0:	|      jsr dd98 <loadBackDrop>
    f7a6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f7aa:	|      moveq #2,d0
}
    f7ac:	'----> lea 12(sp),sp
    f7b0:	       rts

0000f7b2 <builtIn_addZBufferLayer>:

//addZBufferLayer( xPos, yPos, width, height )
builtIn(addZBufferLayer)
{
    f7b2:	       lea -20(sp),sp
    f7b6:	       move.l d2,-(sp)
	KPrintF("running addZBufferLayer\n");
    f7b8:	       pea 1ae52 <PutChar+0x1e32>
    f7be:	       jsr 1857e <KPrintF>
    f7c4:	       addq.l #4,sp
	UNUSEDALL
	int xpos, ypos, width, height, yz;
	if (! getValueType(&yz, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7c6:	       movea.l 32(sp),a0
    f7ca:	       move.l 24(a0),d0
    f7ce:	       move.l d0,-(sp)
    f7d0:	       pea 1 <_start+0x1>
    f7d4:	       lea 12(sp),a0
    f7d8:	       move.l a0,-(sp)
    f7da:	       jsr 15a9e <getValueType>
    f7e0:	       lea 12(sp),sp
    f7e4:	       tst.w d0
    f7e6:	   ,-- bne.s f7ee <builtIn_addZBufferLayer+0x3c>
    f7e8:	   |   moveq #1,d0
    f7ea:	,--|-- bra.w f904 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);
    f7ee:	|  '-> moveq #24,d0
    f7f0:	|      add.l 32(sp),d0
    f7f4:	|      move.l d0,-(sp)
    f7f6:	|      jsr 16422 <trimStack>
    f7fc:	|      addq.l #4,sp
	if (! getValueType(&height, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7fe:	|      movea.l 32(sp),a0
    f802:	|      move.l 24(a0),d0
    f806:	|      move.l d0,-(sp)
    f808:	|      pea 1 <_start+0x1>
    f80c:	|      lea 16(sp),a0
    f810:	|      move.l a0,-(sp)
    f812:	|      jsr 15a9e <getValueType>
    f818:	|      lea 12(sp),sp
    f81c:	|      tst.w d0
    f81e:	|  ,-- bne.s f826 <builtIn_addZBufferLayer+0x74>
    f820:	|  |   moveq #1,d0
    f822:	+--|-- bra.w f904 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);
    f826:	|  '-> moveq #24,d0
    f828:	|      add.l 32(sp),d0
    f82c:	|      move.l d0,-(sp)
    f82e:	|      jsr 16422 <trimStack>
    f834:	|      addq.l #4,sp
	if (! getValueType(&width, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f836:	|      movea.l 32(sp),a0
    f83a:	|      move.l 24(a0),d0
    f83e:	|      move.l d0,-(sp)
    f840:	|      pea 1 <_start+0x1>
    f844:	|      lea 20(sp),a0
    f848:	|      move.l a0,-(sp)
    f84a:	|      jsr 15a9e <getValueType>
    f850:	|      lea 12(sp),sp
    f854:	|      tst.w d0
    f856:	|  ,-- bne.s f85e <builtIn_addZBufferLayer+0xac>
    f858:	|  |   moveq #1,d0
    f85a:	+--|-- bra.w f904 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f85e:	|  '-> moveq #24,d0
    f860:	|      add.l 32(sp),d0
    f864:	|      move.l d0,-(sp)
    f866:	|      jsr 16422 <trimStack>
    f86c:	|      addq.l #4,sp
	if (! getValueType(&ypos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f86e:	|      movea.l 32(sp),a0
    f872:	|      move.l 24(a0),d0
    f876:	|      move.l d0,-(sp)
    f878:	|      pea 1 <_start+0x1>
    f87c:	|      moveq #24,d0
    f87e:	|      add.l sp,d0
    f880:	|      move.l d0,-(sp)
    f882:	|      jsr 15a9e <getValueType>
    f888:	|      lea 12(sp),sp
    f88c:	|      tst.w d0
    f88e:	|  ,-- bne.s f894 <builtIn_addZBufferLayer+0xe2>
    f890:	|  |   moveq #1,d0
    f892:	+--|-- bra.s f904 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f894:	|  '-> moveq #24,d0
    f896:	|      add.l 32(sp),d0
    f89a:	|      move.l d0,-(sp)
    f89c:	|      jsr 16422 <trimStack>
    f8a2:	|      addq.l #4,sp
	if (! getValueType(&xpos, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f8a4:	|      movea.l 32(sp),a0
    f8a8:	|      move.l 24(a0),d0
    f8ac:	|      move.l d0,-(sp)
    f8ae:	|      pea 1 <_start+0x1>
    f8b2:	|      moveq #28,d0
    f8b4:	|      add.l sp,d0
    f8b6:	|      move.l d0,-(sp)
    f8b8:	|      jsr 15a9e <getValueType>
    f8be:	|      lea 12(sp),sp
    f8c2:	|      tst.w d0
    f8c4:	|  ,-- bne.s f8ca <builtIn_addZBufferLayer+0x118>
    f8c6:	|  |   moveq #1,d0
    f8c8:	+--|-- bra.s f904 <builtIn_addZBufferLayer+0x152>
	trimStack (&fun -> stack);	
    f8ca:	|  '-> moveq #24,d0
    f8cc:	|      add.l 32(sp),d0
    f8d0:	|      move.l d0,-(sp)
    f8d2:	|      jsr 16422 <trimStack>
    f8d8:	|      addq.l #4,sp
	addZBufferLayer( xpos, ypos, width, height, yz);
    f8da:	|      move.l 4(sp),d2
    f8de:	|      movea.l 8(sp),a1
    f8e2:	|      movea.l 12(sp),a0
    f8e6:	|      move.l 16(sp),d1
    f8ea:	|      move.l 20(sp),d0
    f8ee:	|      move.l d2,-(sp)
    f8f0:	|      move.l a1,-(sp)
    f8f2:	|      move.l a0,-(sp)
    f8f4:	|      move.l d1,-(sp)
    f8f6:	|      move.l d0,-(sp)
    f8f8:	|      jsr 8f68 <addZBufferLayer>
    f8fe:	|      lea 20(sp),sp
	return BR_CONTINUE;
    f902:	|      moveq #2,d0
}
    f904:	'----> move.l (sp)+,d2
    f906:	       lea 20(sp),sp
    f90a:	       rts

0000f90c <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    f90c:	       lea -12(sp),sp
	KPrintF("running mixOverlay\n");
    f910:	       pea 1ae6b <PutChar+0x1e4b>
    f916:	       jsr 1857e <KPrintF>
    f91c:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f91e:	       movea.l 20(sp),a0
    f922:	       move.l 24(a0),d0
    f926:	       move.l d0,-(sp)
    f928:	       pea 1 <_start+0x1>
    f92c:	       lea 8(sp),a0
    f930:	       move.l a0,-(sp)
    f932:	       jsr 15a9e <getValueType>
    f938:	       lea 12(sp),sp
    f93c:	       tst.w d0
    f93e:	   ,-- bne.s f946 <builtIn_mixOverlay+0x3a>
    f940:	   |   moveq #1,d0
    f942:	,--|-- bra.w f9de <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f946:	|  '-> moveq #24,d0
    f948:	|      add.l 20(sp),d0
    f94c:	|      move.l d0,-(sp)
    f94e:	|      jsr 16422 <trimStack>
    f954:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f956:	|      movea.l 20(sp),a0
    f95a:	|      move.l 24(a0),d0
    f95e:	|      move.l d0,-(sp)
    f960:	|      pea 1 <_start+0x1>
    f964:	|      moveq #12,d0
    f966:	|      add.l sp,d0
    f968:	|      move.l d0,-(sp)
    f96a:	|      jsr 15a9e <getValueType>
    f970:	|      lea 12(sp),sp
    f974:	|      tst.w d0
    f976:	|  ,-- bne.s f97c <builtIn_mixOverlay+0x70>
    f978:	|  |   moveq #1,d0
    f97a:	+--|-- bra.s f9de <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f97c:	|  '-> moveq #24,d0
    f97e:	|      add.l 20(sp),d0
    f982:	|      move.l d0,-(sp)
    f984:	|      jsr 16422 <trimStack>
    f98a:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f98c:	|      movea.l 20(sp),a0
    f990:	|      move.l 24(a0),d0
    f994:	|      move.l d0,-(sp)
    f996:	|      pea 5 <_start+0x5>
    f99a:	|      moveq #16,d0
    f99c:	|      add.l sp,d0
    f99e:	|      move.l d0,-(sp)
    f9a0:	|      jsr 15a9e <getValueType>
    f9a6:	|      lea 12(sp),sp
    f9aa:	|      tst.w d0
    f9ac:	|  ,-- bne.s f9b2 <builtIn_mixOverlay+0xa6>
    f9ae:	|  |   moveq #1,d0
    f9b0:	+--|-- bra.s f9de <builtIn_mixOverlay+0xd2>
	trimStack (&fun -> stack);
    f9b2:	|  '-> moveq #24,d0
    f9b4:	|      add.l 20(sp),d0
    f9b8:	|      move.l d0,-(sp)
    f9ba:	|      jsr 16422 <trimStack>
    f9c0:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    f9c2:	|      movea.l (sp),a0
    f9c4:	|      move.l 4(sp),d1
    f9c8:	|      move.l 8(sp),d0
    f9cc:	|      move.l a0,-(sp)
    f9ce:	|      move.l d1,-(sp)
    f9d0:	|      move.l d0,-(sp)
    f9d2:	|      jsr de0e <mixBackDrop>
    f9d8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f9dc:	|      moveq #2,d0
}
    f9de:	'----> lea 12(sp),sp
    f9e2:	       rts

0000f9e4 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    f9e4:	       lea -12(sp),sp
	KPrintF("running pasteImage\n");
    f9e8:	       pea 1ae7f <PutChar+0x1e5f>
    f9ee:	       jsr 1857e <KPrintF>
    f9f4:	       addq.l #4,sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f9f6:	       movea.l 20(sp),a0
    f9fa:	       move.l 24(a0),d0
    f9fe:	       move.l d0,-(sp)
    fa00:	       pea 1 <_start+0x1>
    fa04:	       lea 8(sp),a0
    fa08:	       move.l a0,-(sp)
    fa0a:	       jsr 15a9e <getValueType>
    fa10:	       lea 12(sp),sp
    fa14:	       tst.w d0
    fa16:	   ,-- bne.s fa1e <builtIn_pasteImage+0x3a>
    fa18:	   |   moveq #1,d0
    fa1a:	,--|-- bra.w faae <builtIn_pasteImage+0xca>
	trimStack (&fun -> stack);
    fa1e:	|  '-> moveq #24,d0
    fa20:	|      add.l 20(sp),d0
    fa24:	|      move.l d0,-(sp)
    fa26:	|      jsr 16422 <trimStack>
    fa2c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa2e:	|      movea.l 20(sp),a0
    fa32:	|      move.l 24(a0),d0
    fa36:	|      move.l d0,-(sp)
    fa38:	|      pea 1 <_start+0x1>
    fa3c:	|      moveq #12,d0
    fa3e:	|      add.l sp,d0
    fa40:	|      move.l d0,-(sp)
    fa42:	|      jsr 15a9e <getValueType>
    fa48:	|      lea 12(sp),sp
    fa4c:	|      tst.w d0
    fa4e:	|  ,-- bne.s fa54 <builtIn_pasteImage+0x70>
    fa50:	|  |   moveq #1,d0
    fa52:	+--|-- bra.s faae <builtIn_pasteImage+0xca>
	trimStack (&fun -> stack);
    fa54:	|  '-> moveq #24,d0
    fa56:	|      add.l 20(sp),d0
    fa5a:	|      move.l d0,-(sp)
    fa5c:	|      jsr 16422 <trimStack>
    fa62:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    fa64:	|      movea.l 20(sp),a0
    fa68:	|      move.l 24(a0),d0
    fa6c:	|      move.l d0,-(sp)
    fa6e:	|      jsr 15f76 <getAnimationFromVar>
    fa74:	|      addq.l #4,sp
    fa76:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    fa7a:	|      moveq #24,d0
    fa7c:	|      add.l 20(sp),d0
    fa80:	|      move.l d0,-(sp)
    fa82:	|      jsr 16422 <trimStack>
    fa88:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    fa8a:	|      tst.l 8(sp)
    fa8e:	|  ,-- bne.s fa94 <builtIn_pasteImage+0xb0>
    fa90:	|  |   moveq #2,d0
    fa92:	+--|-- bra.s faae <builtIn_pasteImage+0xca>

	pasteCursor (x, y, pp);
    fa94:	|  '-> move.l (sp),d1
    fa96:	|      move.l 4(sp),d0
    fa9a:	|      move.l 8(sp),-(sp)
    fa9e:	|      move.l d1,-(sp)
    faa0:	|      move.l d0,-(sp)
    faa2:	|      jsr d94 <pasteCursor>
    faa8:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    faac:	|      moveq #2,d0
}
    faae:	'----> lea 12(sp),sp
    fab2:	       rts

0000fab4 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    fab4:	       subq.l #8,sp
	KPrintF("running setSceneDimensions\n");
    fab6:	       pea 1ae93 <PutChar+0x1e73>
    fabc:	       jsr 1857e <KPrintF>
    fac2:	       addq.l #4,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fac4:	       movea.l 16(sp),a0
    fac8:	       move.l 24(a0),d0
    facc:	       move.l d0,-(sp)
    face:	       pea 1 <_start+0x1>
    fad2:	       move.l sp,d0
    fad4:	       addq.l #8,d0
    fad6:	       move.l d0,-(sp)
    fad8:	       jsr 15a9e <getValueType>
    fade:	       lea 12(sp),sp
    fae2:	       tst.w d0
    fae4:	   ,-- bne.s faec <builtIn_setSceneDimensions+0x38>
    fae6:	   |   moveq #1,d0
    fae8:	,--|-- bra.w fb74 <builtIn_setSceneDimensions+0xc0>
	trimStack (&fun -> stack);
    faec:	|  '-> moveq #24,d0
    faee:	|      add.l 16(sp),d0
    faf2:	|      move.l d0,-(sp)
    faf4:	|      jsr 16422 <trimStack>
    fafa:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fafc:	|      movea.l 16(sp),a0
    fb00:	|      move.l 24(a0),d0
    fb04:	|      move.l d0,-(sp)
    fb06:	|      pea 1 <_start+0x1>
    fb0a:	|      moveq #12,d0
    fb0c:	|      add.l sp,d0
    fb0e:	|      move.l d0,-(sp)
    fb10:	|      jsr 15a9e <getValueType>
    fb16:	|      lea 12(sp),sp
    fb1a:	|      tst.w d0
    fb1c:	|  ,-- bne.s fb22 <builtIn_setSceneDimensions+0x6e>
    fb1e:	|  |   moveq #1,d0
    fb20:	+--|-- bra.s fb74 <builtIn_setSceneDimensions+0xc0>
	trimStack (&fun -> stack);
    fb22:	|  '-> moveq #24,d0
    fb24:	|      add.l 16(sp),d0
    fb28:	|      move.l d0,-(sp)
    fb2a:	|      jsr 16422 <trimStack>
    fb30:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    fb32:	|      move.l (sp),d1
    fb34:	|      move.l 4(sp),d0
    fb38:	|      move.l d1,-(sp)
    fb3a:	|      move.l d0,-(sp)
    fb3c:	|      jsr de64 <resizeBackdrop>
    fb42:	|      addq.l #8,sp
    fb44:	|      tst.w d0
    fb46:	|  ,-- beq.s fb64 <builtIn_setSceneDimensions+0xb0>
		blankScreen (0, 0, x, y);
    fb48:	|  |   move.l (sp),d1
    fb4a:	|  |   move.l 4(sp),d0
    fb4e:	|  |   move.l d1,-(sp)
    fb50:	|  |   move.l d0,-(sp)
    fb52:	|  |   clr.l -(sp)
    fb54:	|  |   clr.l -(sp)
    fb56:	|  |   jsr dc5c <blankScreen>
    fb5c:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    fb60:	|  |   moveq #2,d0
    fb62:	+--|-- bra.s fb74 <builtIn_setSceneDimensions+0xc0>
	}
	KPrintF("Out of memory creating new backdrop.");
    fb64:	|  '-> pea 1aeaf <PutChar+0x1e8f>
    fb6a:	|      jsr 1857e <KPrintF>
    fb70:	|      addq.l #4,sp
	return BR_ERROR;
    fb72:	|      moveq #1,d0
}
    fb74:	'----> addq.l #8,sp
    fb76:	       rts

0000fb78 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    fb78:	          move.l d3,-(sp)
    fb7a:	          move.l d2,-(sp)
	KPrintF("running aimCamera\n");
    fb7c:	          pea 1aed4 <PutChar+0x1eb4>
    fb82:	          jsr 1857e <KPrintF>
    fb88:	          addq.l #4,sp
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fb8a:	          movea.l 16(sp),a0
    fb8e:	          move.l 24(a0),d0
    fb92:	          move.l d0,-(sp)
    fb94:	          pea 1 <_start+0x1>
    fb98:	          pea 1e97e <cameraY>
    fb9e:	          jsr 15a9e <getValueType>
    fba4:	          lea 12(sp),sp
    fba8:	          tst.w d0
    fbaa:	      ,-- bne.s fbb2 <builtIn_aimCamera+0x3a>
    fbac:	      |   moveq #1,d0
    fbae:	,-----|-- bra.w fe34 <builtIn_aimCamera+0x2bc>
	trimStack (&fun -> stack);
    fbb2:	|     '-> moveq #24,d0
    fbb4:	|         add.l 16(sp),d0
    fbb8:	|         move.l d0,-(sp)
    fbba:	|         jsr 16422 <trimStack>
    fbc0:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fbc2:	|         movea.l 16(sp),a0
    fbc6:	|         move.l 24(a0),d0
    fbca:	|         move.l d0,-(sp)
    fbcc:	|         pea 1 <_start+0x1>
    fbd0:	|         pea 1e97a <cameraX>
    fbd6:	|         jsr 15a9e <getValueType>
    fbdc:	|         lea 12(sp),sp
    fbe0:	|         tst.w d0
    fbe2:	|     ,-- bne.s fbea <builtIn_aimCamera+0x72>
    fbe4:	|     |   moveq #1,d0
    fbe6:	+-----|-- bra.w fe34 <builtIn_aimCamera+0x2bc>
	trimStack (&fun -> stack);
    fbea:	|     '-> moveq #24,d0
    fbec:	|         add.l 16(sp),d0
    fbf0:	|         move.l d0,-(sp)
    fbf2:	|         jsr 16422 <trimStack>
    fbf8:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    fbfa:	|         move.l 1e97a <cameraX>,d0
    fc00:	|         move.l d0,-(sp)
    fc02:	|         jsr 189b0 <__floatsisf>
    fc08:	|         addq.l #4,sp
    fc0a:	|         move.l d0,d2
    fc0c:	|         move.l 1e806 <winWidth>,d0
    fc12:	|         lsr.l #1,d0
    fc14:	|         move.l d0,-(sp)
    fc16:	|         jsr 189d8 <__floatunsisf>
    fc1c:	|         addq.l #4,sp
    fc1e:	|         move.l d0,d1
    fc20:	|         move.l 1e246 <cameraZoom>,d0
    fc26:	|         move.l d0,-(sp)
    fc28:	|         move.l d1,-(sp)
    fc2a:	|         jsr 18866 <__divsf3>
    fc30:	|         addq.l #8,sp
    fc32:	|         move.l d0,-(sp)
    fc34:	|         move.l d2,-(sp)
    fc36:	|         jsr 18ca4 <__subsf3>
    fc3c:	|         addq.l #8,sp
    fc3e:	|         move.l d0,-(sp)
    fc40:	|         jsr 18948 <__fixsfsi>
    fc46:	|         addq.l #4,sp
    fc48:	|         move.l d0,1e97a <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    fc4e:	|         move.l 1e97e <cameraY>,d0
    fc54:	|         move.l d0,-(sp)
    fc56:	|         jsr 189b0 <__floatsisf>
    fc5c:	|         addq.l #4,sp
    fc5e:	|         move.l d0,d2
    fc60:	|         move.l 1e80a <winHeight>,d0
    fc66:	|         lsr.l #1,d0
    fc68:	|         move.l d0,-(sp)
    fc6a:	|         jsr 189d8 <__floatunsisf>
    fc70:	|         addq.l #4,sp
    fc72:	|         move.l d0,d1
    fc74:	|         move.l 1e246 <cameraZoom>,d0
    fc7a:	|         move.l d0,-(sp)
    fc7c:	|         move.l d1,-(sp)
    fc7e:	|         jsr 18866 <__divsf3>
    fc84:	|         addq.l #8,sp
    fc86:	|         move.l d0,-(sp)
    fc88:	|         move.l d2,-(sp)
    fc8a:	|         jsr 18ca4 <__subsf3>
    fc90:	|         addq.l #8,sp
    fc92:	|         move.l d0,-(sp)
    fc94:	|         jsr 18948 <__fixsfsi>
    fc9a:	|         addq.l #4,sp
    fc9c:	|         move.l d0,1e97e <cameraY>

	if (cameraX < 0) cameraX = 0;
    fca2:	|         move.l 1e97a <cameraX>,d0
    fca8:	|     ,-- bpl.s fcb4 <builtIn_aimCamera+0x13c>
    fcaa:	|     |   clr.l 1e97a <cameraX>
    fcb0:	|  ,--|-- bra.w fd6a <builtIn_aimCamera+0x1f2>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    fcb4:	|  |  '-> move.l 1e97a <cameraX>,d0
    fcba:	|  |      move.l d0,-(sp)
    fcbc:	|  |      jsr 189b0 <__floatsisf>
    fcc2:	|  |      addq.l #4,sp
    fcc4:	|  |      move.l d0,d2
    fcc6:	|  |      move.l 1e95c <sceneWidth>,d0
    fccc:	|  |      move.l d0,-(sp)
    fcce:	|  |      jsr 189d8 <__floatunsisf>
    fcd4:	|  |      addq.l #4,sp
    fcd6:	|  |      move.l d0,d3
    fcd8:	|  |      move.l 1e806 <winWidth>,d0
    fcde:	|  |      move.l d0,-(sp)
    fce0:	|  |      jsr 189d8 <__floatunsisf>
    fce6:	|  |      addq.l #4,sp
    fce8:	|  |      move.l d0,d1
    fcea:	|  |      move.l 1e246 <cameraZoom>,d0
    fcf0:	|  |      move.l d0,-(sp)
    fcf2:	|  |      move.l d1,-(sp)
    fcf4:	|  |      jsr 18866 <__divsf3>
    fcfa:	|  |      addq.l #8,sp
    fcfc:	|  |      move.l d0,-(sp)
    fcfe:	|  |      move.l d3,-(sp)
    fd00:	|  |      jsr 18ca4 <__subsf3>
    fd06:	|  |      addq.l #8,sp
    fd08:	|  |      move.l d0,-(sp)
    fd0a:	|  |      move.l d2,-(sp)
    fd0c:	|  |      jsr 18b1c <__gtsf2>
    fd12:	|  |      addq.l #8,sp
    fd14:	|  |      tst.l d0
    fd16:	|  +----- ble.s fd6a <builtIn_aimCamera+0x1f2>
    fd18:	|  |      move.l 1e95c <sceneWidth>,d0
    fd1e:	|  |      move.l d0,-(sp)
    fd20:	|  |      jsr 189d8 <__floatunsisf>
    fd26:	|  |      addq.l #4,sp
    fd28:	|  |      move.l d0,d2
    fd2a:	|  |      move.l 1e806 <winWidth>,d0
    fd30:	|  |      move.l d0,-(sp)
    fd32:	|  |      jsr 189d8 <__floatunsisf>
    fd38:	|  |      addq.l #4,sp
    fd3a:	|  |      move.l d0,d1
    fd3c:	|  |      move.l 1e246 <cameraZoom>,d0
    fd42:	|  |      move.l d0,-(sp)
    fd44:	|  |      move.l d1,-(sp)
    fd46:	|  |      jsr 18866 <__divsf3>
    fd4c:	|  |      addq.l #8,sp
    fd4e:	|  |      move.l d0,-(sp)
    fd50:	|  |      move.l d2,-(sp)
    fd52:	|  |      jsr 18ca4 <__subsf3>
    fd58:	|  |      addq.l #8,sp
    fd5a:	|  |      move.l d0,-(sp)
    fd5c:	|  |      jsr 18948 <__fixsfsi>
    fd62:	|  |      addq.l #4,sp
    fd64:	|  |      move.l d0,1e97a <cameraX>
	if (cameraY < 0) cameraY = 0;
    fd6a:	|  '----> move.l 1e97e <cameraY>,d0
    fd70:	|     ,-- bpl.s fd7c <builtIn_aimCamera+0x204>
    fd72:	|     |   clr.l 1e97e <cameraY>
    fd78:	|  ,--|-- bra.w fe32 <builtIn_aimCamera+0x2ba>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    fd7c:	|  |  '-> move.l 1e97e <cameraY>,d0
    fd82:	|  |      move.l d0,-(sp)
    fd84:	|  |      jsr 189b0 <__floatsisf>
    fd8a:	|  |      addq.l #4,sp
    fd8c:	|  |      move.l d0,d2
    fd8e:	|  |      move.l 1e960 <sceneHeight>,d0
    fd94:	|  |      move.l d0,-(sp)
    fd96:	|  |      jsr 189d8 <__floatunsisf>
    fd9c:	|  |      addq.l #4,sp
    fd9e:	|  |      move.l d0,d3
    fda0:	|  |      move.l 1e80a <winHeight>,d0
    fda6:	|  |      move.l d0,-(sp)
    fda8:	|  |      jsr 189d8 <__floatunsisf>
    fdae:	|  |      addq.l #4,sp
    fdb0:	|  |      move.l d0,d1
    fdb2:	|  |      move.l 1e246 <cameraZoom>,d0
    fdb8:	|  |      move.l d0,-(sp)
    fdba:	|  |      move.l d1,-(sp)
    fdbc:	|  |      jsr 18866 <__divsf3>
    fdc2:	|  |      addq.l #8,sp
    fdc4:	|  |      move.l d0,-(sp)
    fdc6:	|  |      move.l d3,-(sp)
    fdc8:	|  |      jsr 18ca4 <__subsf3>
    fdce:	|  |      addq.l #8,sp
    fdd0:	|  |      move.l d0,-(sp)
    fdd2:	|  |      move.l d2,-(sp)
    fdd4:	|  |      jsr 18b1c <__gtsf2>
    fdda:	|  |      addq.l #8,sp
    fddc:	|  |      tst.l d0
    fdde:	|  +----- ble.s fe32 <builtIn_aimCamera+0x2ba>
    fde0:	|  |      move.l 1e960 <sceneHeight>,d0
    fde6:	|  |      move.l d0,-(sp)
    fde8:	|  |      jsr 189d8 <__floatunsisf>
    fdee:	|  |      addq.l #4,sp
    fdf0:	|  |      move.l d0,d2
    fdf2:	|  |      move.l 1e80a <winHeight>,d0
    fdf8:	|  |      move.l d0,-(sp)
    fdfa:	|  |      jsr 189d8 <__floatunsisf>
    fe00:	|  |      addq.l #4,sp
    fe02:	|  |      move.l d0,d1
    fe04:	|  |      move.l 1e246 <cameraZoom>,d0
    fe0a:	|  |      move.l d0,-(sp)
    fe0c:	|  |      move.l d1,-(sp)
    fe0e:	|  |      jsr 18866 <__divsf3>
    fe14:	|  |      addq.l #8,sp
    fe16:	|  |      move.l d0,-(sp)
    fe18:	|  |      move.l d2,-(sp)
    fe1a:	|  |      jsr 18ca4 <__subsf3>
    fe20:	|  |      addq.l #8,sp
    fe22:	|  |      move.l d0,-(sp)
    fe24:	|  |      jsr 18948 <__fixsfsi>
    fe2a:	|  |      addq.l #4,sp
    fe2c:	|  |      move.l d0,1e97e <cameraY>
	return BR_CONTINUE;
    fe32:	|  '----> moveq #2,d0
}
    fe34:	'-------> move.l (sp)+,d2
    fe36:	          move.l (sp)+,d3
    fe38:	          rts

0000fe3a <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    fe3a:	       subq.l #4,sp
    fe3c:	       move.l d2,-(sp)
	KPrintF("running zoomCamera\n");
    fe3e:	       pea 1aee7 <PutChar+0x1ec7>
    fe44:	       jsr 1857e <KPrintF>
    fe4a:	       addq.l #4,sp
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fe4c:	       movea.l 16(sp),a0
    fe50:	       move.l 24(a0),d0
    fe54:	       move.l d0,-(sp)
    fe56:	       pea 1 <_start+0x1>
    fe5a:	       moveq #12,d0
    fe5c:	       add.l sp,d0
    fe5e:	       move.l d0,-(sp)
    fe60:	       jsr 15a9e <getValueType>
    fe66:	       lea 12(sp),sp
    fe6a:	       tst.w d0
    fe6c:	   ,-- bne.s fe74 <builtIn_zoomCamera+0x3a>
    fe6e:	   |   moveq #1,d0
    fe70:	,--|-- bra.w 1006e <builtIn_zoomCamera+0x234>
	trimStack (&fun -> stack);
    fe74:	|  '-> moveq #24,d0
    fe76:	|      add.l 16(sp),d0
    fe7a:	|      move.l d0,-(sp)
    fe7c:	|      jsr 16422 <trimStack>
    fe82:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    fe84:	|      move.l 1e87a <input+0xa>,d0
    fe8a:	|      move.l d0,-(sp)
    fe8c:	|      jsr 189b0 <__floatsisf>
    fe92:	|      addq.l #4,sp
    fe94:	|      move.l d0,d1
    fe96:	|      move.l 1e246 <cameraZoom>,d0
    fe9c:	|      move.l d0,-(sp)
    fe9e:	|      move.l d1,-(sp)
    fea0:	|      jsr 18a62 <__mulsf3>
    fea6:	|      addq.l #8,sp
    fea8:	|      move.l d0,-(sp)
    feaa:	|      jsr 18948 <__fixsfsi>
    feb0:	|      addq.l #4,sp
    feb2:	|      move.l d0,1e87a <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    feb8:	|      move.l 1e87e <input+0xe>,d0
    febe:	|      move.l d0,-(sp)
    fec0:	|      jsr 189b0 <__floatsisf>
    fec6:	|      addq.l #4,sp
    fec8:	|      move.l d0,d1
    feca:	|      move.l 1e246 <cameraZoom>,d0
    fed0:	|      move.l d0,-(sp)
    fed2:	|      move.l d1,-(sp)
    fed4:	|      jsr 18a62 <__mulsf3>
    feda:	|      addq.l #8,sp
    fedc:	|      move.l d0,-(sp)
    fede:	|      jsr 18948 <__fixsfsi>
    fee4:	|      addq.l #4,sp
    fee6:	|      move.l d0,1e87e <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    feec:	|      move.l 4(sp),d0
    fef0:	|      move.l d0,-(sp)
    fef2:	|      jsr 189b0 <__floatsisf>
    fef8:	|      addq.l #4,sp
    fefa:	|      move.l #1008981770,-(sp)
    ff00:	|      move.l d0,-(sp)
    ff02:	|      jsr 18a62 <__mulsf3>
    ff08:	|      addq.l #8,sp
    ff0a:	|      move.l d0,1e246 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    ff10:	|      move.l 1e806 <winWidth>,d0
    ff16:	|      move.l d0,-(sp)
    ff18:	|      jsr 189d8 <__floatunsisf>
    ff1e:	|      addq.l #4,sp
    ff20:	|      move.l d0,d1
    ff22:	|      move.l 1e246 <cameraZoom>,d0
    ff28:	|      move.l d0,-(sp)
    ff2a:	|      move.l d1,-(sp)
    ff2c:	|      jsr 18866 <__divsf3>
    ff32:	|      addq.l #8,sp
    ff34:	|      move.l d0,d2
    ff36:	|      move.l 1e95c <sceneWidth>,d0
    ff3c:	|      move.l d0,-(sp)
    ff3e:	|      jsr 189d8 <__floatunsisf>
    ff44:	|      addq.l #4,sp
    ff46:	|      move.l d0,-(sp)
    ff48:	|      move.l d2,-(sp)
    ff4a:	|      jsr 18b1c <__gtsf2>
    ff50:	|      addq.l #8,sp
    ff52:	|      tst.l d0
    ff54:	|  ,-- ble.s ff8a <builtIn_zoomCamera+0x150>
    ff56:	|  |   move.l 1e806 <winWidth>,d0
    ff5c:	|  |   move.l d0,-(sp)
    ff5e:	|  |   jsr 189d8 <__floatunsisf>
    ff64:	|  |   addq.l #4,sp
    ff66:	|  |   move.l d0,d2
    ff68:	|  |   move.l 1e95c <sceneWidth>,d0
    ff6e:	|  |   move.l d0,-(sp)
    ff70:	|  |   jsr 189d8 <__floatunsisf>
    ff76:	|  |   addq.l #4,sp
    ff78:	|  |   move.l d0,-(sp)
    ff7a:	|  |   move.l d2,-(sp)
    ff7c:	|  |   jsr 18866 <__divsf3>
    ff82:	|  |   addq.l #8,sp
    ff84:	|  |   move.l d0,1e246 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    ff8a:	|  '-> move.l 1e80a <winHeight>,d0
    ff90:	|      move.l d0,-(sp)
    ff92:	|      jsr 189d8 <__floatunsisf>
    ff98:	|      addq.l #4,sp
    ff9a:	|      move.l d0,d1
    ff9c:	|      move.l 1e246 <cameraZoom>,d0
    ffa2:	|      move.l d0,-(sp)
    ffa4:	|      move.l d1,-(sp)
    ffa6:	|      jsr 18866 <__divsf3>
    ffac:	|      addq.l #8,sp
    ffae:	|      move.l d0,d2
    ffb0:	|      move.l 1e960 <sceneHeight>,d0
    ffb6:	|      move.l d0,-(sp)
    ffb8:	|      jsr 189d8 <__floatunsisf>
    ffbe:	|      addq.l #4,sp
    ffc0:	|      move.l d0,-(sp)
    ffc2:	|      move.l d2,-(sp)
    ffc4:	|      jsr 18b1c <__gtsf2>
    ffca:	|      addq.l #8,sp
    ffcc:	|      tst.l d0
    ffce:	|  ,-- ble.s 10004 <builtIn_zoomCamera+0x1ca>
    ffd0:	|  |   move.l 1e80a <winHeight>,d0
    ffd6:	|  |   move.l d0,-(sp)
    ffd8:	|  |   jsr 189d8 <__floatunsisf>
    ffde:	|  |   addq.l #4,sp
    ffe0:	|  |   move.l d0,d2
    ffe2:	|  |   move.l 1e960 <sceneHeight>,d0
    ffe8:	|  |   move.l d0,-(sp)
    ffea:	|  |   jsr 189d8 <__floatunsisf>
    fff0:	|  |   addq.l #4,sp
    fff2:	|  |   move.l d0,-(sp)
    fff4:	|  |   move.l d2,-(sp)
    fff6:	|  |   jsr 18866 <__divsf3>
    fffc:	|  |   addq.l #8,sp
    fffe:	|  |   move.l d0,1e246 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
   10004:	|  '-> move.l 1e87a <input+0xa>,d0
   1000a:	|      move.l d0,-(sp)
   1000c:	|      jsr 189b0 <__floatsisf>
   10012:	|      addq.l #4,sp
   10014:	|      move.l d0,d1
   10016:	|      move.l 1e246 <cameraZoom>,d0
   1001c:	|      move.l d0,-(sp)
   1001e:	|      move.l d1,-(sp)
   10020:	|      jsr 18866 <__divsf3>
   10026:	|      addq.l #8,sp
   10028:	|      move.l d0,-(sp)
   1002a:	|      jsr 18948 <__fixsfsi>
   10030:	|      addq.l #4,sp
   10032:	|      move.l d0,1e87a <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
   10038:	|      move.l 1e87e <input+0xe>,d0
   1003e:	|      move.l d0,-(sp)
   10040:	|      jsr 189b0 <__floatsisf>
   10046:	|      addq.l #4,sp
   10048:	|      move.l d0,d1
   1004a:	|      move.l 1e246 <cameraZoom>,d0
   10050:	|      move.l d0,-(sp)
   10052:	|      move.l d1,-(sp)
   10054:	|      jsr 18866 <__divsf3>
   1005a:	|      addq.l #8,sp
   1005c:	|      move.l d0,-(sp)
   1005e:	|      jsr 18948 <__fixsfsi>
   10064:	|      addq.l #4,sp
   10066:	|      move.l d0,1e87e <input+0xe>

	return BR_CONTINUE;
   1006c:	|      moveq #2,d0
}
   1006e:	'----> move.l (sp)+,d2
   10070:	       addq.l #4,sp
   10072:	       rts

00010074 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
   10074:	             subq.l #4,sp
	KPrintF("running pickOne\n");
   10076:	             pea 1aefb <PutChar+0x1edb>
   1007c:	             jsr 1857e <KPrintF>
   10082:	             addq.l #4,sp
	UNUSEDALL
	if (! numParams) {
   10084:	             tst.l 8(sp)
   10088:	         ,-- bne.s 1009c <builtIn_pickOne+0x28>
		KPrintF ("Built-in function should have at least 1 parameter");
   1008a:	         |   pea 1af0c <PutChar+0x1eec>
   10090:	         |   jsr 1857e <KPrintF>
   10096:	         |   addq.l #4,sp
		return BR_ERROR;
   10098:	         |   moveq #1,d0
   1009a:	,--------|-- bra.s 100fc <builtIn_pickOne+0x88>
	}
	int i = rand() % numParams;
   1009c:	|        '-> jsr 1713e <rand>
   100a2:	|            move.l d0,d1
   100a4:	|            move.l 8(sp),d0
   100a8:	|            move.l d0,-(sp)
   100aa:	|            move.l d1,-(sp)
   100ac:	|            jsr 18fe4 <__umodsi3>
   100b2:	|            addq.l #8,sp
   100b4:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
   100b6:	|     ,----- bra.s 100ea <builtIn_pickOne+0x76>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
   100b8:	|  ,--|----> move.l (sp),d0
   100ba:	|  |  |      cmp.l 8(sp),d0
   100be:	|  |  |  ,-- bne.s 100da <builtIn_pickOne+0x66>
   100c0:	|  |  |  |   moveq #28,d0
   100c2:	|  |  |  |   add.l 12(sp),d0
   100c6:	|  |  |  |   movea.l 12(sp),a0
   100ca:	|  |  |  |   move.l 24(a0),d1
   100ce:	|  |  |  |   move.l d0,-(sp)
   100d0:	|  |  |  |   move.l d1,-(sp)
   100d2:	|  |  |  |   jsr 15f58 <copyVariable>
   100d8:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
   100da:	|  |  |  '-> moveq #24,d0
   100dc:	|  |  |      add.l 12(sp),d0
   100e0:	|  |  |      move.l d0,-(sp)
   100e2:	|  |  |      jsr 16422 <trimStack>
   100e8:	|  |  |      addq.l #4,sp
	while (numParams --) {
   100ea:	|  |  '----> move.l 8(sp),d0
   100ee:	|  |         move.l d0,d1
   100f0:	|  |         subq.l #1,d1
   100f2:	|  |         move.l d1,8(sp)
   100f6:	|  |         tst.l d0
   100f8:	|  '-------- bne.s 100b8 <builtIn_pickOne+0x44>
	}
	return BR_CONTINUE;
   100fa:	|            moveq #2,d0
}
   100fc:	'----------> addq.l #4,sp
   100fe:	             rts

00010100 <builtIn_substring>:

builtIn(substring)
{
   10100:	       lea -40(sp),sp
   10104:	       move.l a6,-(sp)
   10106:	       move.l d2,-(sp)
	KPrintF("running substring\n");
   10108:	       pea 1af3f <PutChar+0x1f1f>
   1010e:	       jsr 1857e <KPrintF>
   10114:	       addq.l #4,sp
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10116:	       movea.l 56(sp),a0
   1011a:	       move.l 24(a0),d0
   1011e:	       move.l d0,-(sp)
   10120:	       pea 1 <_start+0x1>
   10124:	       lea 16(sp),a0
   10128:	       move.l a0,-(sp)
   1012a:	       jsr 15a9e <getValueType>
   10130:	       lea 12(sp),sp
   10134:	       tst.w d0
   10136:	   ,-- bne.s 1013e <builtIn_substring+0x3e>
   10138:	   |   moveq #1,d0
   1013a:	,--|-- bra.w 102b6 <builtIn_substring+0x1b6>
    trimStack(&fun->stack);
   1013e:	|  '-> moveq #24,d0
   10140:	|      add.l 56(sp),d0
   10144:	|      move.l d0,-(sp)
   10146:	|      jsr 16422 <trimStack>
   1014c:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   1014e:	|      movea.l 56(sp),a0
   10152:	|      move.l 24(a0),d0
   10156:	|      move.l d0,-(sp)
   10158:	|      pea 1 <_start+0x1>
   1015c:	|      lea 20(sp),a0
   10160:	|      move.l a0,-(sp)
   10162:	|      jsr 15a9e <getValueType>
   10168:	|      lea 12(sp),sp
   1016c:	|      tst.w d0
   1016e:	|  ,-- bne.s 10176 <builtIn_substring+0x76>
   10170:	|  |   moveq #1,d0
   10172:	+--|-- bra.w 102b6 <builtIn_substring+0x1b6>
    trimStack(&fun->stack);
   10176:	|  '-> moveq #24,d0
   10178:	|      add.l 56(sp),d0
   1017c:	|      move.l d0,-(sp)
   1017e:	|      jsr 16422 <trimStack>
   10184:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
   10186:	|      movea.l 56(sp),a0
   1018a:	|      move.l 24(a0),d0
   1018e:	|      move.l d0,-(sp)
   10190:	|      jsr 16074 <getTextFromAnyVar>
   10196:	|      addq.l #4,sp
   10198:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
   1019c:	|      moveq #24,d0
   1019e:	|      add.l 56(sp),d0
   101a2:	|      move.l d0,-(sp)
   101a4:	|      jsr 16422 <trimStack>
   101aa:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
   101ac:	|      move.l 44(sp),-(sp)
   101b0:	|      jsr 14f8a <strlen>
   101b6:	|      addq.l #4,sp
   101b8:	|      move.l d0,d1
   101ba:	|      move.l 12(sp),d0
   101be:	|      movea.l d0,a0
   101c0:	|      move.l 8(sp),d0
   101c4:	|      add.l a0,d0
   101c6:	|      cmp.l d1,d0
   101c8:	|  ,-- bls.s 101fe <builtIn_substring+0xfe>
        length = strlen(wholeString) - start;
   101ca:	|  |   move.l 44(sp),-(sp)
   101ce:	|  |   jsr 14f8a <strlen>
   101d4:	|  |   addq.l #4,sp
   101d6:	|  |   move.l d0,d1
   101d8:	|  |   move.l 12(sp),d0
   101dc:	|  |   sub.l d0,d1
   101de:	|  |   move.l d1,d0
   101e0:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
   101e4:	|  |   move.l 44(sp),-(sp)
   101e8:	|  |   jsr 14f8a <strlen>
   101ee:	|  |   addq.l #4,sp
   101f0:	|  |   move.l d0,d1
   101f2:	|  |   move.l 12(sp),d0
   101f6:	|  |   cmp.l d1,d0
   101f8:	|  +-- bls.s 101fe <builtIn_substring+0xfe>
            start = 0;
   101fa:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
   101fe:	|  '-> move.l 8(sp),d0
   10202:	|  ,-- bpl.s 10208 <builtIn_substring+0x108>
        length = 0;
   10204:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
   10208:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
   1020e:	|      move.l 12(sp),d1
   10212:	|      move.l 8(sp),d0
   10216:	|      move.l d1,d2
   10218:	|      add.l d0,d2
   1021a:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
   1021e:	|      move.l 36(sp),d0
   10222:	|      sub.l 40(sp),d0
   10226:	|      addq.l #1,d0
   10228:	|      move.l d0,32(sp)
   1022c:	|      clr.l 28(sp)
   10230:	|      move.l 1e8c0 <SysBase>,d0
   10236:	|      movea.l d0,a6
   10238:	|      move.l 32(sp),d0
   1023c:	|      move.l 28(sp),d1
   10240:	|      jsr -684(a6)
   10244:	|      move.l d0,24(sp)
   10248:	|      move.l 24(sp),d0
   1024c:	|      move.l d0,20(sp)
    if (!newString) {
   10250:	|  ,-- bne.s 10256 <builtIn_substring+0x156>
        return BR_ERROR;
   10252:	|  |   moveq #1,d0
   10254:	+--|-- bra.s 102b6 <builtIn_substring+0x1b6>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
   10256:	|  '-> move.l 36(sp),d0
   1025a:	|      sub.l 40(sp),d0
   1025e:	|      move.l d0,d1
   10260:	|      move.l 40(sp),d0
   10264:	|      add.l 44(sp),d0
   10268:	|      move.l d1,-(sp)
   1026a:	|      move.l d0,-(sp)
   1026c:	|      move.l 28(sp),-(sp)
   10270:	|      jsr 18532 <memcpy>
   10276:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
   1027a:	|      move.l 36(sp),d0
   1027e:	|      sub.l 40(sp),d0
   10282:	|      movea.l 20(sp),a0
   10286:	|      adda.l d0,a0
   10288:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
   1028a:	|      moveq #28,d0
   1028c:	|      add.l 56(sp),d0
   10290:	|      move.l 20(sp),-(sp)
   10294:	|      move.l d0,-(sp)
   10296:	|      jsr 15cc0 <makeTextVar>
   1029c:	|      addq.l #8,sp
    FreeVec(newString);
   1029e:	|      move.l 20(sp),16(sp)
   102a4:	|      move.l 1e8c0 <SysBase>,d0
   102aa:	|      movea.l d0,a6
   102ac:	|      movea.l 16(sp),a1
   102b0:	|      jsr -690(a6)
    return BR_CONTINUE;
   102b4:	|      moveq #2,d0
}
   102b6:	'----> move.l (sp)+,d2
   102b8:	       movea.l (sp)+,a6
   102ba:	       lea 40(sp),sp
   102be:	       rts

000102c0 <builtIn_stringLength>:

builtIn(stringLength)
{
   102c0:	subq.l #8,sp
   102c2:	move.l a6,-(sp)
	KPrintF("running stringLength\n");
   102c4:	pea 1af52 <PutChar+0x1f32>
   102ca:	jsr 1857e <KPrintF>
   102d0:	addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   102d2:	movea.l 20(sp),a0
   102d6:	move.l 24(a0),d0
   102da:	move.l d0,-(sp)
   102dc:	jsr 16074 <getTextFromAnyVar>
   102e2:	addq.l #4,sp
   102e4:	move.l d0,8(sp)
	trimStack (&fun -> stack);
   102e8:	moveq #24,d0
   102ea:	add.l 20(sp),d0
   102ee:	move.l d0,-(sp)
   102f0:	jsr 16422 <trimStack>
   102f6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
   102f8:	move.l 8(sp),-(sp)
   102fc:	jsr 14f8a <strlen>
   10302:	addq.l #4,sp
   10304:	move.l d0,d1
   10306:	moveq #28,d0
   10308:	add.l 20(sp),d0
   1030c:	move.l d1,-(sp)
   1030e:	pea 1 <_start+0x1>
   10312:	move.l d0,-(sp)
   10314:	jsr 16390 <setVariable>
   1031a:	lea 12(sp),sp
	FreeVec(newText);
   1031e:	move.l 8(sp),4(sp)
   10324:	move.l 1e8c0 <SysBase>,d0
   1032a:	movea.l d0,a6
   1032c:	movea.l 4(sp),a1
   10330:	jsr -690(a6)
	return BR_CONTINUE;
   10334:	moveq #2,d0
}
   10336:	movea.l (sp)+,a6
   10338:	addq.l #8,sp
   1033a:	rts

0001033c <builtIn_newStack>:

builtIn(newStack)
{
   1033c:	             lea -12(sp),sp
   10340:	             move.l a6,-(sp)
	KPrintF("running newStack\n");
   10342:	             pea 1af68 <PutChar+0x1f48>
   10348:	             jsr 1857e <KPrintF>
   1034e:	             addq.l #4,sp
    UNUSEDALL
    unlinkVar(&fun->reg);
   10350:	             moveq #28,d0
   10352:	             add.l 24(sp),d0
   10356:	             move.l d0,-(sp)
   10358:	             jsr 15cec <unlinkVar>
   1035e:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
   10360:	             movea.l 24(sp),a0
   10364:	             moveq #6,d0
   10366:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1036a:	             moveq #12,d1
   1036c:	             move.l d1,12(sp)
   10370:	             clr.l 8(sp)
   10374:	             move.l 1e8c0 <SysBase>,d0
   1037a:	             movea.l d0,a6
   1037c:	             move.l 12(sp),d0
   10380:	             move.l 8(sp),d1
   10384:	             jsr -684(a6)
   10388:	             move.l d0,4(sp)
   1038c:	             move.l 4(sp),d0
   10390:	             movea.l 24(sp),a0
   10394:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
   10398:	             movea.l 24(sp),a0
   1039c:	             move.l 32(a0),d0
   103a0:	         ,-- bne.s 103a8 <builtIn_newStack+0x6c>
   103a2:	         |   moveq #1,d0
   103a4:	,--------|-- bra.w 1043a <builtIn_newStack+0xfe>
    fun->reg.varData.theStack->first = NULL;
   103a8:	|        '-> movea.l 24(sp),a0
   103ac:	|            movea.l 32(a0),a0
   103b0:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
   103b2:	|            movea.l 24(sp),a0
   103b6:	|            movea.l 32(a0),a0
   103ba:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
   103be:	|            movea.l 24(sp),a0
   103c2:	|            movea.l 32(a0),a0
   103c6:	|            moveq #1,d0
   103c8:	|            move.l d0,8(a0)
    
    while (numParams--) {
   103cc:	|     ,----- bra.s 10428 <builtIn_newStack+0xec>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
   103ce:	|  ,--|----> movea.l 24(sp),a0
   103d2:	|  |  |      move.l 32(a0),d0
   103d6:	|  |  |      move.l d0,d1
   103d8:	|  |  |      movea.l 24(sp),a0
   103dc:	|  |  |      move.l 24(a0),d0
   103e0:	|  |  |      move.l d1,-(sp)
   103e2:	|  |  |      move.l d0,-(sp)
   103e4:	|  |  |      jsr 152da <addVarToStack>
   103ea:	|  |  |      addq.l #8,sp
   103ec:	|  |  |      tst.w d0
   103ee:	|  |  |  ,-- bne.s 103f4 <builtIn_newStack+0xb8>
   103f0:	|  |  |  |   moveq #1,d0
   103f2:	+--|--|--|-- bra.s 1043a <builtIn_newStack+0xfe>
        if (fun->reg.varData.theStack->last == NULL) {
   103f4:	|  |  |  '-> movea.l 24(sp),a0
   103f8:	|  |  |      movea.l 32(a0),a0
   103fc:	|  |  |      move.l 4(a0),d0
   10400:	|  |  |  ,-- bne.s 10418 <builtIn_newStack+0xdc>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
   10402:	|  |  |  |   movea.l 24(sp),a0
   10406:	|  |  |  |   movea.l 32(a0),a1
   1040a:	|  |  |  |   movea.l 24(sp),a0
   1040e:	|  |  |  |   movea.l 32(a0),a0
   10412:	|  |  |  |   move.l (a1),d0
   10414:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
   10418:	|  |  |  '-> moveq #24,d0
   1041a:	|  |  |      add.l 24(sp),d0
   1041e:	|  |  |      move.l d0,-(sp)
   10420:	|  |  |      jsr 16422 <trimStack>
   10426:	|  |  |      addq.l #4,sp
    while (numParams--) {
   10428:	|  |  '----> move.l 20(sp),d0
   1042c:	|  |         move.l d0,d1
   1042e:	|  |         subq.l #1,d1
   10430:	|  |         move.l d1,20(sp)
   10434:	|  |         tst.l d0
   10436:	|  '-------- bne.s 103ce <builtIn_newStack+0x92>
    }
    return BR_CONTINUE;
   10438:	|            moveq #2,d0
}
   1043a:	'----------> movea.l (sp)+,a6
   1043c:	             lea 12(sp),sp
   10440:	             rts

00010442 <builtIn_stackSize>:
// wait is exactly the same function, but limited to 2 parameters
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	KPrintF("running stackSize\n");
   10442:	          pea 1af7a <PutChar+0x1f5a>
   10448:	          jsr 1857e <KPrintF>
   1044e:	          addq.l #4,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   10450:	          movea.l 8(sp),a0
   10454:	          movea.l 24(a0),a0
   10458:	          move.l (a0),d0
   1045a:	          moveq #6,d1
   1045c:	          cmp.l d0,d1
   1045e:	      ,-- beq.s 1047a <builtIn_stackSize+0x38>
   10460:	      |   moveq #10,d1
   10462:	      |   cmp.l d0,d1
   10464:	   ,--|-- beq.s 104be <builtIn_stackSize+0x7c>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
   10466:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
   10468:	   |  |   pea 1af8d <PutChar+0x1f6d>
   1046e:	   |  |   jsr 1857e <KPrintF>
   10474:	   |  |   addq.l #4,sp
	return BR_ERROR;
   10476:	   |  |   moveq #1,d0
   10478:	,--|--|-- bra.s 104f8 <builtIn_stackSize+0xb6>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
   1047a:	|  |  '-> movea.l 8(sp),a0
   1047e:	|  |      movea.l 24(a0),a0
   10482:	|  |      move.l 4(a0),d0
   10486:	|  |      move.l d0,-(sp)
   10488:	|  |      jsr 163fe <stackSize>
   1048e:	|  |      addq.l #4,sp
   10490:	|  |      move.l d0,d1
   10492:	|  |      moveq #28,d0
   10494:	|  |      add.l 8(sp),d0
   10498:	|  |      move.l d1,-(sp)
   1049a:	|  |      pea 1 <_start+0x1>
   1049e:	|  |      move.l d0,-(sp)
   104a0:	|  |      jsr 16390 <setVariable>
   104a6:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
   104aa:	|  |      moveq #24,d0
   104ac:	|  |      add.l 8(sp),d0
   104b0:	|  |      move.l d0,-(sp)
   104b2:	|  |      jsr 16422 <trimStack>
   104b8:	|  |      addq.l #4,sp
			return BR_CONTINUE;
   104ba:	|  |      moveq #2,d0
   104bc:	+--|----- bra.s 104f8 <builtIn_stackSize+0xb6>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
   104be:	|  '----> movea.l 8(sp),a0
   104c2:	|         movea.l 24(a0),a0
   104c6:	|         movea.l 4(a0),a0
   104ca:	|         move.l 4(a0),d1
   104ce:	|         moveq #28,d0
   104d0:	|         add.l 8(sp),d0
   104d4:	|         move.l d1,-(sp)
   104d6:	|         pea 1 <_start+0x1>
   104da:	|         move.l d0,-(sp)
   104dc:	|         jsr 16390 <setVariable>
   104e2:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
   104e6:	|         moveq #24,d0
   104e8:	|         add.l 8(sp),d0
   104ec:	|         move.l d0,-(sp)
   104ee:	|         jsr 16422 <trimStack>
   104f4:	|         addq.l #4,sp
			return BR_CONTINUE;
   104f6:	|         moveq #2,d0
}
   104f8:	'-------> rts

000104fa <builtIn_copyStack>:

builtIn(copyStack)
{
	KPrintF("running copyStack\n");
   104fa:	       pea 1afb6 <PutChar+0x1f96>
   10500:	       jsr 1857e <KPrintF>
   10506:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   10508:	       movea.l 8(sp),a0
   1050c:	       movea.l 24(a0),a0
   10510:	       move.l (a0),d0
   10512:	       moveq #6,d1
   10514:	       cmp.l d0,d1
   10516:	   ,-- beq.s 1052a <builtIn_copyStack+0x30>
		KPrintF ("Parameter isn't a stack.");
   10518:	   |   pea 1afc9 <PutChar+0x1fa9>
   1051e:	   |   jsr 1857e <KPrintF>
   10524:	   |   addq.l #4,sp
		return BR_ERROR;
   10526:	   |   moveq #1,d0
   10528:	,--|-- bra.s 1055e <builtIn_copyStack+0x64>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
   1052a:	|  '-> moveq #28,d0
   1052c:	|      add.l 8(sp),d0
   10530:	|      movea.l 8(sp),a0
   10534:	|      move.l 24(a0),d1
   10538:	|      move.l d0,-(sp)
   1053a:	|      move.l d1,-(sp)
   1053c:	|      jsr 155a4 <copyStack>
   10542:	|      addq.l #8,sp
   10544:	|      tst.w d0
   10546:	|  ,-- bne.s 1054c <builtIn_copyStack+0x52>
   10548:	|  |   moveq #1,d0
   1054a:	+--|-- bra.s 1055e <builtIn_copyStack+0x64>
	trimStack (&fun -> stack);
   1054c:	|  '-> moveq #24,d0
   1054e:	|      add.l 8(sp),d0
   10552:	|      move.l d0,-(sp)
   10554:	|      jsr 16422 <trimStack>
   1055a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1055c:	|      moveq #2,d0
}
   1055e:	'----> rts

00010560 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	KPrintF("running pushToStack\n");
   10560:	       pea 1afe2 <PutChar+0x1fc2>
   10566:	       jsr 1857e <KPrintF>
   1056c:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   1056e:	       movea.l 8(sp),a0
   10572:	       movea.l 24(a0),a0
   10576:	       movea.l 8(a0),a0
   1057a:	       move.l (a0),d0
   1057c:	       moveq #6,d1
   1057e:	       cmp.l d0,d1
   10580:	   ,-- beq.s 10596 <builtIn_pushToStack+0x36>
		KPrintF("Parameter isn't a stack");
   10582:	   |   pea 1aff7 <PutChar+0x1fd7>
   10588:	   |   jsr 1857e <KPrintF>
   1058e:	   |   addq.l #4,sp
		return BR_ERROR;
   10590:	   |   moveq #1,d0
   10592:	,--|-- bra.w 10624 <builtIn_pushToStack+0xc4>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
   10596:	|  '-> movea.l 8(sp),a0
   1059a:	|      movea.l 24(a0),a0
   1059e:	|      movea.l 8(a0),a0
   105a2:	|      move.l 4(a0),d0
   105a6:	|      move.l d0,d1
   105a8:	|      movea.l 8(sp),a0
   105ac:	|      move.l 24(a0),d0
   105b0:	|      move.l d1,-(sp)
   105b2:	|      move.l d0,-(sp)
   105b4:	|      jsr 152da <addVarToStack>
   105ba:	|      addq.l #8,sp
   105bc:	|      tst.w d0
   105be:	|  ,-- bne.s 105c4 <builtIn_pushToStack+0x64>
		return BR_ERROR;
   105c0:	|  |   moveq #1,d0
   105c2:	+--|-- bra.s 10624 <builtIn_pushToStack+0xc4>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
   105c4:	|  '-> movea.l 8(sp),a0
   105c8:	|      movea.l 24(a0),a0
   105cc:	|      movea.l 8(a0),a0
   105d0:	|      movea.l 4(a0),a0
   105d4:	|      movea.l (a0),a0
   105d6:	|      move.l 8(a0),d0
   105da:	|  ,-- bne.s 10602 <builtIn_pushToStack+0xa2>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
   105dc:	|  |   movea.l 8(sp),a0
   105e0:	|  |   movea.l 24(a0),a0
   105e4:	|  |   movea.l 8(a0),a0
   105e8:	|  |   movea.l 4(a0),a1
   105ec:	|  |   movea.l 8(sp),a0
   105f0:	|  |   movea.l 24(a0),a0
   105f4:	|  |   movea.l 8(a0),a0
   105f8:	|  |   movea.l 4(a0),a0
   105fc:	|  |   move.l (a1),d0
   105fe:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
   10602:	|  '-> moveq #24,d0
   10604:	|      add.l 8(sp),d0
   10608:	|      move.l d0,-(sp)
   1060a:	|      jsr 16422 <trimStack>
   10610:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   10612:	|      moveq #24,d0
   10614:	|      add.l 8(sp),d0
   10618:	|      move.l d0,-(sp)
   1061a:	|      jsr 16422 <trimStack>
   10620:	|      addq.l #4,sp
	return BR_CONTINUE;
   10622:	|      moveq #2,d0
}
   10624:	'----> rts

00010626 <builtIn_enqueue>:

builtIn(enqueue)
{
	KPrintF("running enqueue\n");
   10626:	             pea 1b00f <PutChar+0x1fef>
   1062c:	             jsr 1857e <KPrintF>
   10632:	             addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   10634:	             movea.l 8(sp),a0
   10638:	             movea.l 24(a0),a0
   1063c:	             movea.l 8(a0),a0
   10640:	             move.l (a0),d0
   10642:	             moveq #6,d1
   10644:	             cmp.l d0,d1
   10646:	         ,-- beq.s 1065c <builtIn_enqueue+0x36>
		KPrintF ("Parameter isn't a stack");
   10648:	         |   pea 1aff7 <PutChar+0x1fd7>
   1064e:	         |   jsr 1857e <KPrintF>
   10654:	         |   addq.l #4,sp
		return BR_ERROR;
   10656:	         |   moveq #1,d0
   10658:	,--------|-- bra.w 1074a <builtIn_enqueue+0x124>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
   1065c:	|        '-> movea.l 8(sp),a0
   10660:	|            movea.l 24(a0),a0
   10664:	|            movea.l 8(a0),a0
   10668:	|            movea.l 4(a0),a0
   1066c:	|            move.l (a0),d0
   1066e:	|     ,----- bne.s 106c8 <builtIn_enqueue+0xa2>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
   10670:	|     |      movea.l 8(sp),a0
   10674:	|     |      movea.l 24(a0),a0
   10678:	|     |      movea.l 8(a0),a0
   1067c:	|     |      move.l 4(a0),d0
   10680:	|     |      move.l d0,d1
   10682:	|     |      movea.l 8(sp),a0
   10686:	|     |      move.l 24(a0),d0
   1068a:	|     |      move.l d1,-(sp)
   1068c:	|     |      move.l d0,-(sp)
   1068e:	|     |      jsr 152da <addVarToStack>
   10694:	|     |      addq.l #8,sp
   10696:	|     |      tst.w d0
   10698:	|     |  ,-- bne.s 106a0 <builtIn_enqueue+0x7a>
			return BR_ERROR;
   1069a:	|     |  |   moveq #1,d0
   1069c:	+-----|--|-- bra.w 1074a <builtIn_enqueue+0x124>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
   106a0:	|     |  '-> movea.l 8(sp),a0
   106a4:	|     |      movea.l 24(a0),a0
   106a8:	|     |      movea.l 8(a0),a0
   106ac:	|     |      movea.l 4(a0),a1
   106b0:	|     |      movea.l 8(sp),a0
   106b4:	|     |      movea.l 24(a0),a0
   106b8:	|     |      movea.l 8(a0),a0
   106bc:	|     |      movea.l 4(a0),a0
   106c0:	|     |      move.l (a1),d0
   106c2:	|     |      move.l d0,4(a0)
   106c6:	|  ,--|----- bra.s 10728 <builtIn_enqueue+0x102>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
   106c8:	|  |  '----> movea.l 8(sp),a0
   106cc:	|  |         movea.l 24(a0),a0
   106d0:	|  |         movea.l 8(a0),a0
   106d4:	|  |         movea.l 4(a0),a0
   106d8:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
   106dc:	|  |         move.l d0,d1
   106de:	|  |         addq.l #8,d1
   106e0:	|  |         movea.l 8(sp),a0
   106e4:	|  |         move.l 24(a0),d0
   106e8:	|  |         move.l d1,-(sp)
   106ea:	|  |         move.l d0,-(sp)
   106ec:	|  |         jsr 152da <addVarToStack>
   106f2:	|  |         addq.l #8,sp
   106f4:	|  |         tst.w d0
   106f6:	|  |     ,-- bne.s 106fc <builtIn_enqueue+0xd6>
			return BR_ERROR;
   106f8:	|  |     |   moveq #1,d0
   106fa:	+--|-----|-- bra.s 1074a <builtIn_enqueue+0x124>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
   106fc:	|  |     '-> movea.l 8(sp),a0
   10700:	|  |         movea.l 24(a0),a0
   10704:	|  |         movea.l 8(a0),a0
   10708:	|  |         movea.l 4(a0),a0
   1070c:	|  |         movea.l 4(a0),a1
   10710:	|  |         movea.l 8(sp),a0
   10714:	|  |         movea.l 24(a0),a0
   10718:	|  |         movea.l 8(a0),a0
   1071c:	|  |         movea.l 4(a0),a0
   10720:	|  |         move.l 8(a1),d0
   10724:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
   10728:	|  '-------> moveq #24,d0
   1072a:	|            add.l 8(sp),d0
   1072e:	|            move.l d0,-(sp)
   10730:	|            jsr 16422 <trimStack>
   10736:	|            addq.l #4,sp
	trimStack (&fun -> stack);
   10738:	|            moveq #24,d0
   1073a:	|            add.l 8(sp),d0
   1073e:	|            move.l d0,-(sp)
   10740:	|            jsr 16422 <trimStack>
   10746:	|            addq.l #4,sp
	return BR_CONTINUE;
   10748:	|            moveq #2,d0
}
   1074a:	'----------> rts

0001074c <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
   1074c:	       move.l a2,-(sp)
	KPrintF("running deleteFromStack\n");
   1074e:	       pea 1b020 <PutChar+0x2000>
   10754:	       jsr 1857e <KPrintF>
   1075a:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   1075c:	       movea.l 12(sp),a0
   10760:	       movea.l 24(a0),a0
   10764:	       movea.l 8(a0),a0
   10768:	       move.l (a0),d0
   1076a:	       moveq #6,d1
   1076c:	       cmp.l d0,d1
   1076e:	   ,-- beq.s 10784 <builtIn_deleteFromStack+0x38>
		KPrintF ("Parameter isn't a stack.");
   10770:	   |   pea 1afc9 <PutChar+0x1fa9>
   10776:	   |   jsr 1857e <KPrintF>
   1077c:	   |   addq.l #4,sp
		return BR_ERROR;
   1077e:	   |   moveq #1,d0
   10780:	,--|-- bra.w 1081a <builtIn_deleteFromStack+0xce>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
   10784:	|  '-> movea.l 12(sp),a0
   10788:	|      movea.l 24(a0),a0
   1078c:	|      movea.l 8(a0),a0
   10790:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10794:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
   10796:	|      movea.l 12(sp),a0
   1079a:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   1079e:	|      clr.l -(sp)
   107a0:	|      move.l d1,-(sp)
   107a2:	|      move.l d0,-(sp)
   107a4:	|      jsr 1567a <deleteVarFromStack>
   107aa:	|      lea 12(sp),sp
   107ae:	|      move.l d0,d1
   107b0:	|      moveq #28,d0
   107b2:	|      add.l 12(sp),d0
   107b6:	|      move.l d1,-(sp)
   107b8:	|      pea 1 <_start+0x1>
   107bc:	|      move.l d0,-(sp)
   107be:	|      jsr 16390 <setVariable>
   107c4:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
   107c8:	|      movea.l 12(sp),a0
   107cc:	|      movea.l 24(a0),a0
   107d0:	|      movea.l 8(a0),a0
   107d4:	|      movea.l 4(a0),a0
   107d8:	|      move.l (a0),d0
   107da:	|      movea.l 12(sp),a0
   107de:	|      movea.l 24(a0),a0
   107e2:	|      movea.l 8(a0),a0
   107e6:	|      movea.l 4(a0),a2
   107ea:	|      move.l d0,-(sp)
   107ec:	|      jsr 163da <stackFindLast>
   107f2:	|      addq.l #4,sp
   107f4:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   107f8:	|      moveq #24,d0
   107fa:	|      add.l 12(sp),d0
   107fe:	|      move.l d0,-(sp)
   10800:	|      jsr 16422 <trimStack>
   10806:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   10808:	|      moveq #24,d0
   1080a:	|      add.l 12(sp),d0
   1080e:	|      move.l d0,-(sp)
   10810:	|      jsr 16422 <trimStack>
   10816:	|      addq.l #4,sp
	return BR_CONTINUE;
   10818:	|      moveq #2,d0
}
   1081a:	'----> movea.l (sp)+,a2
   1081c:	       rts

0001081e <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
   1081e:	       move.l a2,-(sp)
	KPrintF("running deleteAllFromStack\n");
   10820:	       pea 1b039 <PutChar+0x2019>
   10826:	       jsr 1857e <KPrintF>
   1082c:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   1082e:	       movea.l 12(sp),a0
   10832:	       movea.l 24(a0),a0
   10836:	       movea.l 8(a0),a0
   1083a:	       move.l (a0),d0
   1083c:	       moveq #6,d1
   1083e:	       cmp.l d0,d1
   10840:	   ,-- beq.s 10856 <builtIn_deleteAllFromStack+0x38>
		KPrintF ("Parameter isn't a stack.");
   10842:	   |   pea 1afc9 <PutChar+0x1fa9>
   10848:	   |   jsr 1857e <KPrintF>
   1084e:	   |   addq.l #4,sp
		return BR_ERROR;
   10850:	   |   moveq #1,d0
   10852:	,--|-- bra.w 108ee <builtIn_deleteAllFromStack+0xd0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
   10856:	|  '-> movea.l 12(sp),a0
   1085a:	|      movea.l 24(a0),a0
   1085e:	|      movea.l 8(a0),a0
   10862:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10866:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
   10868:	|      movea.l 12(sp),a0
   1086c:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10870:	|      pea 1 <_start+0x1>
   10874:	|      move.l d1,-(sp)
   10876:	|      move.l d0,-(sp)
   10878:	|      jsr 1567a <deleteVarFromStack>
   1087e:	|      lea 12(sp),sp
   10882:	|      move.l d0,d1
   10884:	|      moveq #28,d0
   10886:	|      add.l 12(sp),d0
   1088a:	|      move.l d1,-(sp)
   1088c:	|      pea 1 <_start+0x1>
   10890:	|      move.l d0,-(sp)
   10892:	|      jsr 16390 <setVariable>
   10898:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
   1089c:	|      movea.l 12(sp),a0
   108a0:	|      movea.l 24(a0),a0
   108a4:	|      movea.l 8(a0),a0
   108a8:	|      movea.l 4(a0),a0
   108ac:	|      move.l (a0),d0
   108ae:	|      movea.l 12(sp),a0
   108b2:	|      movea.l 24(a0),a0
   108b6:	|      movea.l 8(a0),a0
   108ba:	|      movea.l 4(a0),a2
   108be:	|      move.l d0,-(sp)
   108c0:	|      jsr 163da <stackFindLast>
   108c6:	|      addq.l #4,sp
   108c8:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   108cc:	|      moveq #24,d0
   108ce:	|      add.l 12(sp),d0
   108d2:	|      move.l d0,-(sp)
   108d4:	|      jsr 16422 <trimStack>
   108da:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   108dc:	|      moveq #24,d0
   108de:	|      add.l 12(sp),d0
   108e2:	|      move.l d0,-(sp)
   108e4:	|      jsr 16422 <trimStack>
   108ea:	|      addq.l #4,sp
	return BR_CONTINUE;
   108ec:	|      moveq #2,d0
} 
   108ee:	'----> movea.l (sp)+,a2
   108f0:	       rts

000108f2 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	KPrintF("running popFromStack\n");
   108f2:	       pea 1b055 <PutChar+0x2035>
   108f8:	       jsr 1857e <KPrintF>
   108fe:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   10900:	       movea.l 8(sp),a0
   10904:	       movea.l 24(a0),a0
   10908:	       move.l (a0),d0
   1090a:	       moveq #6,d1
   1090c:	       cmp.l d0,d1
   1090e:	   ,-- beq.s 10922 <builtIn_popFromStack+0x30>
		KPrintF ("Parameter isn't a stack.");
   10910:	   |   pea 1afc9 <PutChar+0x1fa9>
   10916:	   |   jsr 1857e <KPrintF>
   1091c:	   |   addq.l #4,sp
		return BR_ERROR;
   1091e:	   |   moveq #1,d0
   10920:	,--|-- bra.s 1098c <builtIn_popFromStack+0x9a>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   10922:	|  '-> movea.l 8(sp),a0
   10926:	|      movea.l 24(a0),a0
   1092a:	|      movea.l 4(a0),a0
   1092e:	|      move.l (a0),d0
   10930:	|  ,-- bne.s 10944 <builtIn_popFromStack+0x52>
		KPrintF ("The stack's empty.");
   10932:	|  |   pea 1b06b <PutChar+0x204b>
   10938:	|  |   jsr 1857e <KPrintF>
   1093e:	|  |   addq.l #4,sp
		return BR_ERROR;
   10940:	|  |   moveq #1,d0
   10942:	+--|-- bra.s 1098c <builtIn_popFromStack+0x9a>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   10944:	|  '-> moveq #28,d0
   10946:	|      add.l 8(sp),d0
   1094a:	|      movea.l 8(sp),a0
   1094e:	|      movea.l 24(a0),a0
   10952:	|      movea.l 4(a0),a0
   10956:	|      move.l (a0),d1
   10958:	|      move.l d0,-(sp)
   1095a:	|      move.l d1,-(sp)
   1095c:	|      jsr 15f58 <copyVariable>
   10962:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
   10964:	|      movea.l 8(sp),a0
   10968:	|      movea.l 24(a0),a0
   1096c:	|      move.l 4(a0),d0
   10970:	|      move.l d0,-(sp)
   10972:	|      jsr 16422 <trimStack>
   10978:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   1097a:	|      moveq #24,d0
   1097c:	|      add.l 8(sp),d0
   10980:	|      move.l d0,-(sp)
   10982:	|      jsr 16422 <trimStack>
   10988:	|      addq.l #4,sp
	return BR_CONTINUE;
   1098a:	|      moveq #2,d0
}
   1098c:	'----> rts

0001098e <builtIn_peekStart>:

builtIn(peekStart)
{
	KPrintF("running peekStart\n");
   1098e:	       pea 1b07e <PutChar+0x205e>
   10994:	       jsr 1857e <KPrintF>
   1099a:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   1099c:	       movea.l 8(sp),a0
   109a0:	       movea.l 24(a0),a0
   109a4:	       move.l (a0),d0
   109a6:	       moveq #6,d1
   109a8:	       cmp.l d0,d1
   109aa:	   ,-- beq.s 109be <builtIn_peekStart+0x30>
		KPrintF ("Parameter isn't a stack.");
   109ac:	   |   pea 1afc9 <PutChar+0x1fa9>
   109b2:	   |   jsr 1857e <KPrintF>
   109b8:	   |   addq.l #4,sp
		return BR_ERROR;
   109ba:	   |   moveq #1,d0
   109bc:	,--|-- bra.s 10a12 <builtIn_peekStart+0x84>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   109be:	|  '-> movea.l 8(sp),a0
   109c2:	|      movea.l 24(a0),a0
   109c6:	|      movea.l 4(a0),a0
   109ca:	|      move.l (a0),d0
   109cc:	|  ,-- bne.s 109e0 <builtIn_peekStart+0x52>
		KPrintF ("The stack's empty.");
   109ce:	|  |   pea 1b06b <PutChar+0x204b>
   109d4:	|  |   jsr 1857e <KPrintF>
   109da:	|  |   addq.l #4,sp
		return BR_ERROR;
   109dc:	|  |   moveq #1,d0
   109de:	+--|-- bra.s 10a12 <builtIn_peekStart+0x84>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   109e0:	|  '-> moveq #28,d0
   109e2:	|      add.l 8(sp),d0
   109e6:	|      movea.l 8(sp),a0
   109ea:	|      movea.l 24(a0),a0
   109ee:	|      movea.l 4(a0),a0
   109f2:	|      move.l (a0),d1
   109f4:	|      move.l d0,-(sp)
   109f6:	|      move.l d1,-(sp)
   109f8:	|      jsr 15f58 <copyVariable>
   109fe:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   10a00:	|      moveq #24,d0
   10a02:	|      add.l 8(sp),d0
   10a06:	|      move.l d0,-(sp)
   10a08:	|      jsr 16422 <trimStack>
   10a0e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10a10:	|      moveq #2,d0
}
   10a12:	'----> rts

00010a14 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	KPrintF("running peekEnd\n");
   10a14:	       pea 1b091 <PutChar+0x2071>
   10a1a:	       jsr 1857e <KPrintF>
   10a20:	       addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   10a22:	       movea.l 8(sp),a0
   10a26:	       movea.l 24(a0),a0
   10a2a:	       move.l (a0),d0
   10a2c:	       moveq #6,d1
   10a2e:	       cmp.l d0,d1
   10a30:	   ,-- beq.s 10a44 <builtIn_peekEnd+0x30>
		KPrintF ("Parameter isn't a stack.");
   10a32:	   |   pea 1afc9 <PutChar+0x1fa9>
   10a38:	   |   jsr 1857e <KPrintF>
   10a3e:	   |   addq.l #4,sp
		return BR_ERROR;
   10a40:	   |   moveq #1,d0
   10a42:	,--|-- bra.s 10a9a <builtIn_peekEnd+0x86>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   10a44:	|  '-> movea.l 8(sp),a0
   10a48:	|      movea.l 24(a0),a0
   10a4c:	|      movea.l 4(a0),a0
   10a50:	|      move.l (a0),d0
   10a52:	|  ,-- bne.s 10a66 <builtIn_peekEnd+0x52>
		KPrintF ("The stack's empty.");
   10a54:	|  |   pea 1b06b <PutChar+0x204b>
   10a5a:	|  |   jsr 1857e <KPrintF>
   10a60:	|  |   addq.l #4,sp
		return BR_ERROR;
   10a62:	|  |   moveq #1,d0
   10a64:	+--|-- bra.s 10a9a <builtIn_peekEnd+0x86>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
   10a66:	|  '-> moveq #28,d0
   10a68:	|      add.l 8(sp),d0
   10a6c:	|      movea.l 8(sp),a0
   10a70:	|      movea.l 24(a0),a0
   10a74:	|      movea.l 4(a0),a0
   10a78:	|      move.l 4(a0),d1
   10a7c:	|      move.l d0,-(sp)
   10a7e:	|      move.l d1,-(sp)
   10a80:	|      jsr 15f58 <copyVariable>
   10a86:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   10a88:	|      moveq #24,d0
   10a8a:	|      add.l 8(sp),d0
   10a8e:	|      move.l d0,-(sp)
   10a90:	|      jsr 16422 <trimStack>
   10a96:	|      addq.l #4,sp
	return BR_CONTINUE;
   10a98:	|      moveq #2,d0
}
   10a9a:	'----> rts

00010a9c <builtIn_random>:

builtIn(random)
{
   10a9c:	       subq.l #4,sp
	KPrintF("running random\n");
   10a9e:	       pea 1b0a2 <PutChar+0x2082>
   10aa4:	       jsr 1857e <KPrintF>
   10aaa:	       addq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
   10aac:	       movea.l 12(sp),a0
   10ab0:	       move.l 24(a0),d0
   10ab4:	       move.l d0,-(sp)
   10ab6:	       pea 1 <_start+0x1>
   10aba:	       move.l sp,d0
   10abc:	       addq.l #8,d0
   10abe:	       move.l d0,-(sp)
   10ac0:	       jsr 15a9e <getValueType>
   10ac6:	       lea 12(sp),sp
   10aca:	       tst.w d0
   10acc:	   ,-- bne.s 10ad2 <builtIn_random+0x36>
		return BR_ERROR;
   10ace:	   |   moveq #1,d0
   10ad0:	,--|-- bra.s 10b1c <builtIn_random+0x80>

	trimStack (&fun -> stack);
   10ad2:	|  '-> moveq #24,d0
   10ad4:	|      add.l 12(sp),d0
   10ad8:	|      move.l d0,-(sp)
   10ada:	|      jsr 16422 <trimStack>
   10ae0:	|      addq.l #4,sp
	if (num <= 0) num = 1;
   10ae2:	|      move.l (sp),d0
   10ae4:	|  ,-- bgt.s 10aea <builtIn_random+0x4e>
   10ae6:	|  |   moveq #1,d0
   10ae8:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
   10aea:	|  '-> jsr 1713e <rand>
   10af0:	|      move.l d0,d1
   10af2:	|      move.l (sp),d0
   10af4:	|      move.l d0,-(sp)
   10af6:	|      move.l d1,-(sp)
   10af8:	|      jsr 18fe4 <__umodsi3>
   10afe:	|      addq.l #8,sp
   10b00:	|      move.l d0,d1
   10b02:	|      moveq #28,d0
   10b04:	|      add.l 12(sp),d0
   10b08:	|      move.l d1,-(sp)
   10b0a:	|      pea 1 <_start+0x1>
   10b0e:	|      move.l d0,-(sp)
   10b10:	|      jsr 16390 <setVariable>
   10b16:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10b1a:	|      moveq #2,d0
}
   10b1c:	'----> addq.l #4,sp
   10b1e:	       rts

00010b20 <builtIn_setStatusColour>:

builtIn (setStatusColour)
{
	KPrintF("running setStatusColour\n");
   10b20:	pea 1b0b2 <PutChar+0x2092>
   10b26:	jsr 1857e <KPrintF>
   10b2c:	addq.l #4,sp
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
   10b2e:	nop
   10b30:	rts

00010b32 <builtIn_setLitStatusColour>:

builtIn (setLitStatusColour)
{
	KPrintF("running setLitStatusColour\n");
   10b32:	pea 1b0cb <PutChar+0x20ab>
   10b38:	jsr 1857e <KPrintF>
   10b3e:	addq.l #4,sp

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
   10b40:	moveq #2,d0
}
   10b42:	rts

00010b44 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
   10b44:	       subq.l #4,sp
	KPrintF("running setPasteColour\n");
   10b46:	       pea 1b0e7 <PutChar+0x20c7>
   10b4c:	       jsr 1857e <KPrintF>
   10b52:	       addq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
   10b54:	       movea.l 12(sp),a0
   10b58:	       move.l 24(a0),d0
   10b5c:	       move.l d0,-(sp)
   10b5e:	       pea 1 <_start+0x1>
   10b62:	       move.l sp,d0
   10b64:	       addq.l #8,d0
   10b66:	       move.l d0,-(sp)
   10b68:	       jsr 15a9e <getValueType>
   10b6e:	       lea 12(sp),sp
   10b72:	       tst.w d0
   10b74:	   ,-- bne.s 10b88 <builtIn_setPasteColour+0x44>
		KPrintF ("setPasteColour: Parameter not a number");
   10b76:	   |   pea 1b0ff <PutChar+0x20df>
   10b7c:	   |   jsr 1857e <KPrintF>
   10b82:	   |   addq.l #4,sp
		return BR_ERROR;
   10b84:	   |   moveq #1,d0
   10b86:	,--|-- bra.s 10bc8 <builtIn_setPasteColour+0x84>
	}
	trimStack (&fun -> stack);
   10b88:	|  '-> moveq #24,d0
   10b8a:	|      add.l 12(sp),d0
   10b8e:	|      move.l d0,-(sp)
   10b90:	|      jsr 16422 <trimStack>
   10b96:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
   10b98:	|      move.l (sp),d0
   10b9a:	|      move.l d0,d0
   10b9c:	|      move.w d0,1e7ca <textPaletteIndex>

	if( textPaletteIndex > 31) {
   10ba2:	|      move.w 1e7ca <textPaletteIndex>,d0
   10ba8:	|      cmpi.w #31,d0
   10bac:	|  ,-- bls.s 10bc6 <builtIn_setPasteColour+0x82>
		KPrintF ("setPasteColour: Paletteindex out of Range");
   10bae:	|  |   pea 1b126 <PutChar+0x2106>
   10bb4:	|  |   jsr 1857e <KPrintF>
   10bba:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
   10bbc:	|  |   clr.w 1e7ca <textPaletteIndex>
		return BR_ERROR;
   10bc2:	|  |   moveq #1,d0
   10bc4:	+--|-- bra.s 10bc8 <builtIn_setPasteColour+0x84>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
   10bc6:	|  '-> moveq #2,d0
}
   10bc8:	'----> addq.l #4,sp
   10bca:	       rts

00010bcc <builtIn_setBlankColour>:

builtIn (setBlankColour)
{
	KPrintF("running setBlankColour\n");
   10bcc:	pea 1b150 <PutChar+0x2130>
   10bd2:	jsr 1857e <KPrintF>
   10bd8:	addq.l #4,sp
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10bda:	moveq #2,d0
}
   10bdc:	rts

00010bde <builtIn_setBurnColour>:

builtIn (setBurnColour)
{
	KPrintF("running setBurnColour\n");
   10bde:	pea 1b168 <PutChar+0x2148>
   10be4:	jsr 1857e <KPrintF>
   10bea:	addq.l #4,sp

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10bec:	moveq #2,d0
}
   10bee:	rts

00010bf0 <builtIn_setFont>:


builtIn(setFont)
{
   10bf0:	       lea -16(sp),sp
   10bf4:	       move.l a6,-(sp)
	KPrintF("running setFont\n");
   10bf6:	       pea 1b17f <PutChar+0x215f>
   10bfc:	       jsr 1857e <KPrintF>
   10c02:	       addq.l #4,sp
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10c04:	       movea.l 28(sp),a0
   10c08:	       move.l 24(a0),d0
   10c0c:	       move.l d0,-(sp)
   10c0e:	       pea 1 <_start+0x1>
   10c12:	       lea 12(sp),a0
   10c16:	       move.l a0,-(sp)
   10c18:	       jsr 15a9e <getValueType>
   10c1e:	       lea 12(sp),sp
   10c22:	       tst.w d0
   10c24:	   ,-- bne.s 10c2c <builtIn_setFont+0x3c>
   10c26:	   |   moveq #1,d0
   10c28:	,--|-- bra.w 10cda <builtIn_setFont+0xea>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
   10c2c:	|  '-> moveq #24,d0
   10c2e:	|      add.l 28(sp),d0
   10c32:	|      move.l d0,-(sp)
   10c34:	|      jsr 16422 <trimStack>
   10c3a:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10c3c:	|      movea.l 28(sp),a0
   10c40:	|      move.l 24(a0),d0
   10c44:	|      move.l d0,-(sp)
   10c46:	|      jsr 16074 <getTextFromAnyVar>
   10c4c:	|      addq.l #4,sp
   10c4e:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
   10c52:	|  ,-- bne.s 10c5a <builtIn_setFont+0x6a>
   10c54:	|  |   moveq #1,d0
   10c56:	+--|-- bra.w 10cda <builtIn_setFont+0xea>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
   10c5a:	|  '-> moveq #24,d0
   10c5c:	|      add.l 28(sp),d0
   10c60:	|      move.l d0,-(sp)
   10c62:	|      jsr 16422 <trimStack>
   10c68:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10c6a:	|      movea.l 28(sp),a0
   10c6e:	|      move.l 24(a0),d0
   10c72:	|      move.l d0,-(sp)
   10c74:	|      pea 5 <_start+0x5>
   10c78:	|      lea 16(sp),a0
   10c7c:	|      move.l a0,-(sp)
   10c7e:	|      jsr 15a9e <getValueType>
   10c84:	|      lea 12(sp),sp
   10c88:	|      tst.w d0
   10c8a:	|  ,-- bne.s 10c90 <builtIn_setFont+0xa0>
   10c8c:	|  |   moveq #1,d0
   10c8e:	+--|-- bra.s 10cda <builtIn_setFont+0xea>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
   10c90:	|  '-> moveq #24,d0
   10c92:	|      add.l 28(sp),d0
   10c96:	|      move.l d0,-(sp)
   10c98:	|      jsr 16422 <trimStack>
   10c9e:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
   10ca0:	|      move.l 4(sp),d1
   10ca4:	|      move.l 8(sp),d0
   10ca8:	|      move.l d1,-(sp)
   10caa:	|      move.l 20(sp),-(sp)
   10cae:	|      move.l d0,-(sp)
   10cb0:	|      jsr 168d6 <loadFont>
   10cb6:	|      lea 12(sp),sp
   10cba:	|      tst.w d0
   10cbc:	|  ,-- bne.s 10cc2 <builtIn_setFont+0xd2>
   10cbe:	|  |   moveq #1,d0
   10cc0:	+--|-- bra.s 10cda <builtIn_setFont+0xea>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   10cc2:	|  '-> move.l 16(sp),12(sp)
   10cc8:	|      move.l 1e8c0 <SysBase>,d0
   10cce:	|      movea.l d0,a6
   10cd0:	|      movea.l 12(sp),a1
   10cd4:	|      jsr -690(a6)

    return BR_CONTINUE;
   10cd8:	|      moveq #2,d0
}
   10cda:	'----> movea.l (sp)+,a6
   10cdc:	       lea 16(sp),sp
   10ce0:	       rts

00010ce2 <builtIn_inFont>:

builtIn(inFont)
{
   10ce2:	       subq.l #4,sp
	KPrintF("running inFont\n");
   10ce4:	       pea 1b190 <PutChar+0x2170>
   10cea:	       jsr 1857e <KPrintF>
   10cf0:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10cf2:	       movea.l 12(sp),a0
   10cf6:	       move.l 24(a0),d0
   10cfa:	       move.l d0,-(sp)
   10cfc:	       jsr 16074 <getTextFromAnyVar>
   10d02:	       addq.l #4,sp
   10d04:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   10d06:	   ,-- bne.s 10d0c <builtIn_inFont+0x2a>
   10d08:	   |   moveq #1,d0
   10d0a:	,--|-- bra.s 10d42 <builtIn_inFont+0x60>
	trimStack (&fun -> stack);
   10d0c:	|  '-> moveq #24,d0
   10d0e:	|      add.l 12(sp),d0
   10d12:	|      move.l d0,-(sp)
   10d14:	|      jsr 16422 <trimStack>
   10d1a:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   10d1c:	|      move.l (sp),-(sp)
   10d1e:	|      jsr 168c4 <isInFont>
   10d24:	|      addq.l #4,sp
   10d26:	|      movea.w d0,a0
   10d28:	|      moveq #28,d0
   10d2a:	|      add.l 12(sp),d0
   10d2e:	|      move.l a0,-(sp)
   10d30:	|      pea 1 <_start+0x1>
   10d34:	|      move.l d0,-(sp)
   10d36:	|      jsr 16390 <setVariable>
   10d3c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10d40:	|      moveq #2,d0
}
   10d42:	'----> addq.l #4,sp
   10d44:	       rts

00010d46 <builtIn_pasteString>:

builtIn(pasteString)
{
   10d46:	       lea -16(sp),sp
   10d4a:	       move.l a6,-(sp)
   10d4c:	       move.l d2,-(sp)
	KPrintF("running pasteString\n");
   10d4e:	       pea 1b1a0 <PutChar+0x2180>
   10d54:	       jsr 1857e <KPrintF>
   10d5a:	       addq.l #4,sp
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10d5c:	       movea.l 32(sp),a0
   10d60:	       move.l 24(a0),d0
   10d64:	       move.l d0,-(sp)
   10d66:	       jsr 16074 <getTextFromAnyVar>
   10d6c:	       addq.l #4,sp
   10d6e:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   10d72:	       moveq #24,d0
   10d74:	       add.l 32(sp),d0
   10d78:	       move.l d0,-(sp)
   10d7a:	       jsr 16422 <trimStack>
   10d80:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10d82:	       movea.l 32(sp),a0
   10d86:	       move.l 24(a0),d0
   10d8a:	       move.l d0,-(sp)
   10d8c:	       pea 1 <_start+0x1>
   10d90:	       lea 20(sp),a0
   10d94:	       move.l a0,-(sp)
   10d96:	       jsr 15a9e <getValueType>
   10d9c:	       lea 12(sp),sp
   10da0:	       tst.w d0
   10da2:	   ,-- bne.s 10daa <builtIn_pasteString+0x64>
   10da4:	   |   moveq #1,d0
   10da6:	,--|-- bra.w 10e4c <builtIn_pasteString+0x106>
    trimStack(&fun->stack);
   10daa:	|  '-> moveq #24,d0
   10dac:	|      add.l 32(sp),d0
   10db0:	|      move.l d0,-(sp)
   10db2:	|      jsr 16422 <trimStack>
   10db8:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10dba:	|      movea.l 32(sp),a0
   10dbe:	|      move.l 24(a0),d0
   10dc2:	|      move.l d0,-(sp)
   10dc4:	|      pea 1 <_start+0x1>
   10dc8:	|      lea 16(sp),a0
   10dcc:	|      move.l a0,-(sp)
   10dce:	|      jsr 15a9e <getValueType>
   10dd4:	|      lea 12(sp),sp
   10dd8:	|      tst.w d0
   10dda:	|  ,-- bne.s 10de0 <builtIn_pasteString+0x9a>
   10ddc:	|  |   moveq #1,d0
   10dde:	+--|-- bra.s 10e4c <builtIn_pasteString+0x106>
    trimStack(&fun->stack);
   10de0:	|  '-> moveq #24,d0
   10de2:	|      add.l 32(sp),d0
   10de6:	|      move.l d0,-(sp)
   10de8:	|      jsr 16422 <trimStack>
   10dee:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   10df0:	|      move.l 8(sp),d0
   10df4:	|      cmpi.l #65535,d0
   10dfa:	|  ,-- bne.s 10e1a <builtIn_pasteString+0xd4>
		x = (winWidth - stringWidth(newText)) >> 1;
   10dfc:	|  |   move.l 1e806 <winWidth>,d2
   10e02:	|  |   move.l 20(sp),-(sp)
   10e06:	|  |   jsr 16b88 <stringWidth>
   10e0c:	|  |   addq.l #4,sp
   10e0e:	|  |   move.l d2,d1
   10e10:	|  |   sub.l d0,d1
   10e12:	|  |   move.l d1,d0
   10e14:	|  |   lsr.l #1,d0
   10e16:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   10e1a:	|  '-> move.l 12(sp),d1
   10e1e:	|      move.l 8(sp),d0
   10e22:	|      move.l d1,-(sp)
   10e24:	|      move.l d0,-(sp)
   10e26:	|      move.l 28(sp),-(sp)
   10e2a:	|      jsr 16aaa <pasteStringToBackdrop>
   10e30:	|      lea 12(sp),sp
    FreeVec(newText); 
   10e34:	|      move.l 20(sp),16(sp)
   10e3a:	|      move.l 1e8c0 <SysBase>,d0
   10e40:	|      movea.l d0,a6
   10e42:	|      movea.l 16(sp),a1
   10e46:	|      jsr -690(a6)
    return BR_CONTINUE;
   10e4a:	|      moveq #2,d0
}
   10e4c:	'----> move.l (sp)+,d2
   10e4e:	       movea.l (sp)+,a6
   10e50:	       lea 16(sp),sp
   10e54:	       rts

00010e56 <builtIn_anim>:

builtIn(anim)
{
   10e56:	       lea -12(sp),sp
	KPrintF("running anim\n");
   10e5a:	       pea 1b1b5 <PutChar+0x2195>
   10e60:	       jsr 1857e <KPrintF>
   10e66:	       addq.l #4,sp
	UNUSEDALL
	if (numParams < 2) {
   10e68:	       moveq #1,d0
   10e6a:	       cmp.l 16(sp),d0
   10e6e:	   ,-- blt.s 10e84 <builtIn_anim+0x2e>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10e70:	   |   pea 1b1c3 <PutChar+0x21a3>
   10e76:	   |   jsr 1857e <KPrintF>
   10e7c:	   |   addq.l #4,sp
		return BR_ERROR;
   10e7e:	   |   moveq #1,d0
   10e80:	,--|-- bra.w 10f12 <builtIn_anim+0xbc>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   10e84:	|  '-> moveq #24,d1
   10e86:	|      add.l 20(sp),d1
   10e8a:	|      move.l 16(sp),d0
   10e8e:	|      subq.l #1,d0
   10e90:	|      move.l d1,-(sp)
   10e92:	|      move.l d0,-(sp)
   10e94:	|      jsr a0d4 <createPersonaAnim>
   10e9a:	|      addq.l #8,sp
   10e9c:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ea0:	|      movea.l 20(sp),a0
   10ea4:	|      move.l 24(a0),d0
   10ea8:	|      move.l d0,-(sp)
   10eaa:	|      pea 5 <_start+0x5>
   10eae:	|      lea 8(sp),a0
   10eb2:	|      move.l a0,-(sp)
   10eb4:	|      jsr 15a9e <getValueType>
   10eba:	|      lea 12(sp),sp
   10ebe:	|      tst.w d0
   10ec0:	|  ,-- bne.s 10ec6 <builtIn_anim+0x70>
   10ec2:	|  |   moveq #1,d0
   10ec4:	+--|-- bra.s 10f12 <builtIn_anim+0xbc>
	trimStack (&fun -> stack);
   10ec6:	|  '-> moveq #24,d0
   10ec8:	|      add.l 20(sp),d0
   10ecc:	|      move.l d0,-(sp)
   10ece:	|      jsr 16422 <trimStack>
   10ed4:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   10ed6:	|      move.l (sp),d0
   10ed8:	|      move.l d0,-(sp)
   10eda:	|      jsr 172a0 <loadBankForAnim>
   10ee0:	|      addq.l #4,sp
   10ee2:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   10ee6:	|  ,-- bne.s 10eec <builtIn_anim+0x96>
   10ee8:	|  |   moveq #1,d0
   10eea:	+--|-- bra.s 10f12 <builtIn_anim+0xbc>
	setBankFile (ba, sprBanky);
   10eec:	|  '-> move.l 4(sp),-(sp)
   10ef0:	|      move.l 12(sp),-(sp)
   10ef4:	|      jsr bfe0 <setBankFile>
   10efa:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10efc:	|      moveq #28,d0
   10efe:	|      add.l 20(sp),d0
   10f02:	|      move.l 8(sp),-(sp)
   10f06:	|      move.l d0,-(sp)
   10f08:	|      jsr 1634c <newAnimationVariable>
   10f0e:	|      addq.l #8,sp
	return BR_CONTINUE;
   10f10:	|      moveq #2,d0
}
   10f12:	'----> lea 12(sp),sp
   10f16:	       rts

00010f18 <builtIn_costume>:

builtIn(costume)
{
   10f18:	          lea -32(sp),sp
   10f1c:	          move.l a6,-(sp)
   10f1e:	          move.l a2,-(sp)
	KPrintF("running costume\n");
   10f20:	          pea 1b1fd <PutChar+0x21dd>
   10f26:	          jsr 1857e <KPrintF>
   10f2c:	          addq.l #4,sp
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10f2e:	          moveq #8,d0
   10f30:	          move.l d0,32(sp)
   10f34:	          clr.l 28(sp)
   10f38:	          move.l 1e8c0 <SysBase>,d0
   10f3e:	          movea.l d0,a6
   10f40:	          move.l 32(sp),d0
   10f44:	          move.l 28(sp),d1
   10f48:	          jsr -684(a6)
   10f4c:	          move.l d0,24(sp)
   10f50:	          move.l 24(sp),d0
   10f54:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   10f58:	      ,-- bne.s 10f60 <builtIn_costume+0x48>
   10f5a:	      |   moveq #1,d0
   10f5c:	,-----|-- bra.w 11048 <builtIn_costume+0x130>
    newPersona->numDirections = numParams / 3;
   10f60:	|     '-> move.l 44(sp),d0
   10f64:	|         pea 3 <_start+0x3>
   10f68:	|         move.l d0,-(sp)
   10f6a:	|         jsr 18f88 <__divsi3>
   10f70:	|         addq.l #8,sp
   10f72:	|         movea.l 20(sp),a0
   10f76:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10f7a:	|         tst.l 44(sp)
   10f7e:	|     ,-- beq.s 10f94 <builtIn_costume+0x7c>
   10f80:	|     |   movea.l 20(sp),a0
   10f84:	|     |   move.l 4(a0),d1
   10f88:	|     |   move.l d1,d0
   10f8a:	|     |   add.l d0,d0
   10f8c:	|     |   add.l d1,d0
   10f8e:	|     |   cmp.l 44(sp),d0
   10f92:	|  ,--|-- beq.s 10fa8 <builtIn_costume+0x90>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   10f94:	|  |  '-> pea 1b20e <PutChar+0x21ee>
   10f9a:	|  |      jsr 1857e <KPrintF>
   10fa0:	|  |      addq.l #4,sp
        return BR_ERROR;
   10fa2:	|  |      moveq #1,d0
   10fa4:	+--|----- bra.w 11048 <builtIn_costume+0x130>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10fa8:	|  '----> move.l 44(sp),d0
   10fac:	|         add.l d0,d0
   10fae:	|         add.l d0,d0
   10fb0:	|         move.l d0,16(sp)
   10fb4:	|         clr.l 12(sp)
   10fb8:	|         move.l 1e8c0 <SysBase>,d0
   10fbe:	|         movea.l d0,a6
   10fc0:	|         move.l 16(sp),d0
   10fc4:	|         move.l 12(sp),d1
   10fc8:	|         jsr -684(a6)
   10fcc:	|         move.l d0,8(sp)
   10fd0:	|         move.l 8(sp),d0
   10fd4:	|         movea.l 20(sp),a0
   10fd8:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10fda:	|         movea.l 20(sp),a0
   10fde:	|         move.l (a0),d0
   10fe0:	|     ,-- bne.s 10fe6 <builtIn_costume+0xce>
   10fe2:	|     |   moveq #1,d0
   10fe4:	+-----|-- bra.s 11048 <builtIn_costume+0x130>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10fe6:	|     '-> move.l 44(sp),d0
   10fea:	|         subq.l #1,d0
   10fec:	|         move.l d0,36(sp)
   10ff0:	|     ,-- bra.s 1102c <builtIn_costume+0x114>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10ff2:	|  ,--|-> movea.l 48(sp),a0
   10ff6:	|  |  |   move.l 24(a0),d0
   10ffa:	|  |  |   movea.l 20(sp),a0
   10ffe:	|  |  |   movea.l (a0),a0
   11000:	|  |  |   move.l 36(sp),d1
   11004:	|  |  |   add.l d1,d1
   11006:	|  |  |   add.l d1,d1
   11008:	|  |  |   lea (0,a0,d1.l),a2
   1100c:	|  |  |   move.l d0,-(sp)
   1100e:	|  |  |   jsr 15f76 <getAnimationFromVar>
   11014:	|  |  |   addq.l #4,sp
   11016:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   11018:	|  |  |   moveq #24,d0
   1101a:	|  |  |   add.l 48(sp),d0
   1101e:	|  |  |   move.l d0,-(sp)
   11020:	|  |  |   jsr 16422 <trimStack>
   11026:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   11028:	|  |  |   subq.l #1,36(sp)
   1102c:	|  |  '-> tst.l 36(sp)
   11030:	|  '----- bge.s 10ff2 <builtIn_costume+0xda>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   11032:	|         moveq #28,d0
   11034:	|         add.l 48(sp),d0
   11038:	|         move.l 20(sp),-(sp)
   1103c:	|         move.l d0,-(sp)
   1103e:	|         jsr 1636e <newCostumeVariable>
   11044:	|         addq.l #8,sp
    return BR_CONTINUE;
   11046:	|         moveq #2,d0
}
   11048:	'-------> movea.l (sp)+,a2
   1104a:	          movea.l (sp)+,a6
   1104c:	          lea 32(sp),sp
   11050:	          rts

00011052 <builtIn_launch>:

builtIn(launch)
{
   11052:	          lea -20(sp),sp
   11056:	          move.l a6,-(sp)
	KPrintF("running launch\n");
   11058:	          pea 1b259 <PutChar+0x2239>
   1105e:	          jsr 1857e <KPrintF>
   11064:	          addq.l #4,sp
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   11066:	          movea.l 32(sp),a0
   1106a:	          move.l 24(a0),d0
   1106e:	          move.l d0,-(sp)
   11070:	          jsr 16074 <getTextFromAnyVar>
   11076:	          addq.l #4,sp
   11078:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   1107c:	      ,-- bne.s 11084 <builtIn_launch+0x32>
   1107e:	      |   moveq #1,d0
   11080:	,-----|-- bra.w 111b2 <builtIn_launch+0x160>

    char * newText = encodeFilename(newTextA);
   11084:	|     '-> move.l 20(sp),-(sp)
   11088:	|         jsr 2fe <encodeFilename>
   1108e:	|         addq.l #4,sp
   11090:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   11094:	|         moveq #24,d0
   11096:	|         add.l 32(sp),d0
   1109a:	|         move.l d0,-(sp)
   1109c:	|         jsr 16422 <trimStack>
   110a2:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   110a4:	|         movea.l 20(sp),a0
   110a8:	|         move.b (a0),d0
   110aa:	|         cmpi.b #104,d0
   110ae:	|  ,----- bne.s 11118 <builtIn_launch+0xc6>
        newTextA[1] == 't' &&
   110b0:	|  |      movea.l 20(sp),a0
   110b4:	|  |      addq.l #1,a0
   110b6:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   110b8:	|  |      cmpi.b #116,d0
   110bc:	|  +----- bne.s 11118 <builtIn_launch+0xc6>
        newTextA[2] == 't' &&
   110be:	|  |      movea.l 20(sp),a0
   110c2:	|  |      addq.l #2,a0
   110c4:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   110c6:	|  |      cmpi.b #116,d0
   110ca:	|  +----- bne.s 11118 <builtIn_launch+0xc6>
        newTextA[3] == 'p' &&
   110cc:	|  |      movea.l 20(sp),a0
   110d0:	|  |      addq.l #3,a0
   110d2:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   110d4:	|  |      cmpi.b #112,d0
   110d8:	|  +----- bne.s 11118 <builtIn_launch+0xc6>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   110da:	|  |      movea.l 20(sp),a0
   110de:	|  |      addq.l #4,a0
   110e0:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   110e2:	|  |      cmpi.b #58,d0
   110e6:	|  |  ,-- beq.s 11104 <builtIn_launch+0xb2>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   110e8:	|  |  |   movea.l 20(sp),a0
   110ec:	|  |  |   addq.l #4,a0
   110ee:	|  |  |   move.b (a0),d0
   110f0:	|  |  |   cmpi.b #115,d0
   110f4:	|  +--|-- bne.s 11118 <builtIn_launch+0xc6>
   110f6:	|  |  |   movea.l 20(sp),a0
   110fa:	|  |  |   addq.l #5,a0
   110fc:	|  |  |   move.b (a0),d0
   110fe:	|  |  |   cmpi.b #58,d0
   11102:	|  +--|-- bne.s 11118 <builtIn_launch+0xc6>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   11104:	|  |  '-> move.l 20(sp),-(sp)
   11108:	|  |      jsr b8 <copyString>
   1110e:	|  |      addq.l #4,sp
   11110:	|  |      move.l d0,1e982 <launchMe>
   11116:	|  |  ,-- bra.s 1116a <builtIn_launch+0x118>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   11118:	|  '--|-> move.l 1e81a <gamePath>,d0
   1111e:	|     |   pea 1b269 <PutChar+0x2249>
   11124:	|     |   move.l d0,-(sp)
   11126:	|     |   jsr 14fca <joinStrings>
   1112c:	|     |   addq.l #8,sp
   1112e:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   11132:	|     |   move.l 16(sp),-(sp)
   11136:	|     |   move.l 16(sp),-(sp)
   1113a:	|     |   jsr 14fca <joinStrings>
   11140:	|     |   addq.l #8,sp
   11142:	|     |   move.l d0,1e982 <launchMe>
        FreeVec(newText);
   11148:	|     |   move.l 16(sp),8(sp)
   1114e:	|     |   move.l 1e8c0 <SysBase>,d0
   11154:	|     |   movea.l d0,a6
   11156:	|     |   movea.l 8(sp),a1
   1115a:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   1115e:	|     |   move.l 1e982 <launchMe>,d0
   11164:	|     +-- bne.s 1116a <builtIn_launch+0x118>
   11166:	|     |   moveq #1,d0
   11168:	+-----|-- bra.s 111b2 <builtIn_launch+0x160>
    }
    FreeVec(newTextA);
   1116a:	|     '-> move.l 20(sp),4(sp)
   11170:	|         move.l 1e8c0 <SysBase>,d0
   11176:	|         movea.l d0,a6
   11178:	|         movea.l 4(sp),a1
   1117c:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   11180:	|         clr.l -(sp)
   11182:	|         jsr 4f12 <setGraphicsWindow>
   11188:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   1118a:	|         moveq #28,d0
   1118c:	|         add.l 32(sp),d0
   11190:	|         pea 1 <_start+0x1>
   11194:	|         pea 1 <_start+0x1>
   11198:	|         move.l d0,-(sp)
   1119a:	|         jsr 16390 <setVariable>
   111a0:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   111a4:	|         moveq #28,d0
   111a6:	|         add.l 32(sp),d0
   111aa:	|         move.l d0,1e986 <launchResult>

    return BR_KEEP_AND_PAUSE;
   111b0:	|         moveq #0,d0
}
   111b2:	'-------> movea.l (sp)+,a6
   111b4:	          lea 20(sp),sp
   111b8:	          rts

000111ba <builtIn_pause>:

builtIn(pause)
{
   111ba:	       subq.l #4,sp
	//KPrintF("running pause\n");
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111bc:	       movea.l 12(sp),a0
   111c0:	       move.l 24(a0),d0
   111c4:	       move.l d0,-(sp)
   111c6:	       pea 1 <_start+0x1>
   111ca:	       move.l sp,d0
   111cc:	       addq.l #8,d0
   111ce:	       move.l d0,-(sp)
   111d0:	       jsr 15a9e <getValueType>
   111d6:	       lea 12(sp),sp
   111da:	       tst.w d0
   111dc:	   ,-- bne.s 111e2 <builtIn_pause+0x28>
   111de:	   |   moveq #1,d0
   111e0:	,--|-- bra.s 11210 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   111e2:	|  '-> moveq #24,d0
   111e4:	|      add.l 12(sp),d0
   111e8:	|      move.l d0,-(sp)
   111ea:	|      jsr 16422 <trimStack>
   111f0:	|      addq.l #4,sp
	if (theTime > 0) {
   111f2:	|      move.l (sp),d0
   111f4:	|  ,-- ble.s 1120e <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   111f6:	|  |   move.l (sp),d0
   111f8:	|  |   subq.l #1,d0
   111fa:	|  |   movea.l 12(sp),a0
   111fe:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   11202:	|  |   movea.l 12(sp),a0
   11206:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   1120a:	|  |   moveq #0,d0
   1120c:	+--|-- bra.s 11210 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   1120e:	|  '-> moveq #2,d0
}
   11210:	'----> addq.l #4,sp
   11212:	       rts

00011214 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	KPrintF("running completeTimers\n");
   11214:	pea 1b26b <PutChar+0x224b>
   1121a:	jsr 1857e <KPrintF>
   11220:	addq.l #4,sp
	UNUSEDALL
	completeTimers();
   11222:	jsr 56ee <completeTimers>
	return BR_CONTINUE;
   11228:	moveq #2,d0
}
   1122a:	rts

0001122c <builtIn_callEvent>:

builtIn(callEvent)
{
   1122c:	       lea -12(sp),sp
	KPrintF("running callEvent\n");
   11230:	       pea 1b283 <PutChar+0x2263>
   11236:	       jsr 1857e <KPrintF>
   1123c:	       addq.l #4,sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1123e:	       movea.l 20(sp),a0
   11242:	       move.l 24(a0),d0
   11246:	       move.l d0,-(sp)
   11248:	       pea 7 <_start+0x7>
   1124c:	       lea 8(sp),a0
   11250:	       move.l a0,-(sp)
   11252:	       jsr 15a9e <getValueType>
   11258:	       lea 12(sp),sp
   1125c:	       tst.w d0
   1125e:	   ,-- bne.s 11266 <builtIn_callEvent+0x3a>
   11260:	   |   moveq #1,d0
   11262:	,--|-- bra.w 112fc <builtIn_callEvent+0xd0>
	trimStack (&fun -> stack);
   11266:	|  '-> moveq #24,d0
   11268:	|      add.l 20(sp),d0
   1126c:	|      move.l d0,-(sp)
   1126e:	|      jsr 16422 <trimStack>
   11274:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11276:	|      movea.l 20(sp),a0
   1127a:	|      move.l 24(a0),d0
   1127e:	|      move.l d0,-(sp)
   11280:	|      pea 7 <_start+0x7>
   11284:	|      moveq #12,d0
   11286:	|      add.l sp,d0
   11288:	|      move.l d0,-(sp)
   1128a:	|      jsr 15a9e <getValueType>
   11290:	|      lea 12(sp),sp
   11294:	|      tst.w d0
   11296:	|  ,-- bne.s 1129c <builtIn_callEvent+0x70>
   11298:	|  |   moveq #1,d0
   1129a:	+--|-- bra.s 112fc <builtIn_callEvent+0xd0>
	trimStack (&fun -> stack);
   1129c:	|  '-> moveq #24,d0
   1129e:	|      add.l 20(sp),d0
   112a2:	|      move.l d0,-(sp)
   112a4:	|      jsr 16422 <trimStack>
   112aa:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   112ac:	|      move.l (sp),d1
   112ae:	|      move.l 4(sp),d0
   112b2:	|      move.l d1,-(sp)
   112b4:	|      move.l d0,-(sp)
   112b6:	|      jsr dfba <getCombinationFunction>
   112bc:	|      addq.l #8,sp
   112be:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   112c2:	|  ,-- beq.s 112e2 <builtIn_callEvent+0xb6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   112c4:	|  |   moveq #28,d0
   112c6:	|  |   add.l 20(sp),d0
   112ca:	|  |   move.l 8(sp),-(sp)
   112ce:	|  |   pea 2 <_start+0x2>
   112d2:	|  |   move.l d0,-(sp)
   112d4:	|  |   jsr 16390 <setVariable>
   112da:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   112de:	|  |   moveq #4,d0
   112e0:	+--|-- bra.s 112fc <builtIn_callEvent+0xd0>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   112e2:	|  '-> moveq #28,d0
   112e4:	|      add.l 20(sp),d0
   112e8:	|      clr.l -(sp)
   112ea:	|      pea 1 <_start+0x1>
   112ee:	|      move.l d0,-(sp)
   112f0:	|      jsr 16390 <setVariable>
   112f6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   112fa:	|      moveq #2,d0
}
   112fc:	'----> lea 12(sp),sp
   11300:	       rts

00011302 <builtIn_quitGame>:

BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	KPrintF("running quitGame\n");
   11302:	pea 1b296 <PutChar+0x2276>
   11308:	jsr 1857e <KPrintF>
   1130e:	addq.l #4,sp
	UNUSEDALL
	reallyWantToQuit = TRUE;
   11310:	move.w #1,1e992 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   11318:	moveq #2,d0
}
   1131a:	rts

0001131c <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{	
	UNUSEDALL
	trimStack (&fun -> stack);
   1131c:	moveq #24,d0
   1131e:	add.l 8(sp),d0
   11322:	move.l d0,-(sp)
   11324:	jsr 16422 <trimStack>
   1132a:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   1132c:	pea 1b2a8 <PutChar+0x2288>
   11332:	jsr 1857e <KPrintF>
   11338:	addq.l #4,sp
	return BR_CONTINUE;
   1133a:	moveq #2,d0
}
   1133c:	rts

0001133e <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   1133e:	pea 1b2a8 <PutChar+0x2288>
   11344:	jsr 1857e <KPrintF>
   1134a:	addq.l #4,sp
	return BR_CONTINUE;
   1134c:	moveq #2,d0
}
   1134e:	rts

00011350 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   11350:	pea 1b2a8 <PutChar+0x2288>
   11356:	jsr 1857e <KPrintF>
   1135c:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   1135e:	moveq #2,d0
}
   11360:	rts

00011362 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   11362:	pea 1b2a8 <PutChar+0x2288>
   11368:	jsr 1857e <KPrintF>
   1136e:	addq.l #4,sp
	return BR_CONTINUE;
   11370:	moveq #2,d0
}
   11372:	rts

00011374 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   11374:	pea 1b2a8 <PutChar+0x2288>
   1137a:	jsr 1857e <KPrintF>
   11380:	addq.l #4,sp
	return BR_CONTINUE;
   11382:	moveq #2,d0
}
   11384:	rts

00011386 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   11386:	pea 1b2a8 <PutChar+0x2288>
   1138c:	jsr 1857e <KPrintF>
   11392:	addq.l #4,sp
	return BR_CONTINUE;
   11394:	moveq #2,d0
}
   11396:	rts

00011398 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   11398:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1139c:	       movea.l 20(sp),a0
   113a0:	       move.l 24(a0),d0
   113a4:	       move.l d0,-(sp)
   113a6:	       pea 1 <_start+0x1>
   113aa:	       moveq #16,d0
   113ac:	       add.l sp,d0
   113ae:	       move.l d0,-(sp)
   113b0:	       jsr 15a9e <getValueType>
   113b6:	       lea 12(sp),sp
   113ba:	       tst.w d0
   113bc:	   ,-- bne.s 113c4 <builtIn_startMusic+0x2c>
   113be:	   |   moveq #1,d0
   113c0:	,--|-- bra.w 11464 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   113c4:	|  '-> moveq #24,d0
   113c6:	|      add.l 20(sp),d0
   113ca:	|      move.l d0,-(sp)
   113cc:	|      jsr 16422 <trimStack>
   113d2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113d4:	|      movea.l 20(sp),a0
   113d8:	|      move.l 24(a0),d0
   113dc:	|      move.l d0,-(sp)
   113de:	|      pea 1 <_start+0x1>
   113e2:	|      moveq #12,d0
   113e4:	|      add.l sp,d0
   113e6:	|      move.l d0,-(sp)
   113e8:	|      jsr 15a9e <getValueType>
   113ee:	|      lea 12(sp),sp
   113f2:	|      tst.w d0
   113f4:	|  ,-- bne.s 113fa <builtIn_startMusic+0x62>
   113f6:	|  |   moveq #1,d0
   113f8:	+--|-- bra.s 11464 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   113fa:	|  '-> moveq #24,d0
   113fc:	|      add.l 20(sp),d0
   11400:	|      move.l d0,-(sp)
   11402:	|      jsr 16422 <trimStack>
   11408:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1140a:	|      movea.l 20(sp),a0
   1140e:	|      move.l 24(a0),d0
   11412:	|      move.l d0,-(sp)
   11414:	|      pea 5 <_start+0x5>
   11418:	|      lea 8(sp),a0
   1141c:	|      move.l a0,-(sp)
   1141e:	|      jsr 15a9e <getValueType>
   11424:	|      lea 12(sp),sp
   11428:	|      tst.w d0
   1142a:	|  ,-- bne.s 11430 <builtIn_startMusic+0x98>
   1142c:	|  |   moveq #1,d0
   1142e:	+--|-- bra.s 11464 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   11430:	|  '-> moveq #24,d0
   11432:	|      add.l 20(sp),d0
   11436:	|      move.l d0,-(sp)
   11438:	|      jsr 16422 <trimStack>
   1143e:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   11440:	|      movea.l 8(sp),a0
   11444:	|      move.l 4(sp),d1
   11448:	|      move.l (sp),d0
   1144a:	|      move.l a0,-(sp)
   1144c:	|      move.l d1,-(sp)
   1144e:	|      move.l d0,-(sp)
   11450:	|      jsr dbbc <playMOD>
   11456:	|      lea 12(sp),sp
   1145a:	|      tst.w d0
   1145c:	|  ,-- bne.s 11462 <builtIn_startMusic+0xca>
   1145e:	|  |   moveq #2,d0
   11460:	+--|-- bra.s 11464 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   11462:	|  '-> moveq #2,d0
}
   11464:	'----> lea 12(sp),sp
   11468:	       rts

0001146a <builtIn_stopMusic>:

builtIn(stopMusic)
{
   1146a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1146c:	       movea.l 12(sp),a0
   11470:	       move.l 24(a0),d0
   11474:	       move.l d0,-(sp)
   11476:	       pea 1 <_start+0x1>
   1147a:	       move.l sp,d0
   1147c:	       addq.l #8,d0
   1147e:	       move.l d0,-(sp)
   11480:	       jsr 15a9e <getValueType>
   11486:	       lea 12(sp),sp
   1148a:	       tst.w d0
   1148c:	   ,-- bne.s 11492 <builtIn_stopMusic+0x28>
   1148e:	   |   moveq #1,d0
   11490:	,--|-- bra.s 114b0 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   11492:	|  '-> moveq #24,d0
   11494:	|      add.l 12(sp),d0
   11498:	|      move.l d0,-(sp)
   1149a:	|      jsr 16422 <trimStack>
   114a0:	|      addq.l #4,sp
	stopMOD (v);
   114a2:	|      move.l (sp),d0
   114a4:	|      move.l d0,-(sp)
   114a6:	|      jsr dc58 <stopMOD>
   114ac:	|      addq.l #4,sp
	return BR_CONTINUE;
   114ae:	|      moveq #2,d0
}
   114b0:	'----> addq.l #4,sp
   114b2:	       rts

000114b4 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   114b4:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114b6:	       movea.l 16(sp),a0
   114ba:	       move.l 24(a0),d0
   114be:	       move.l d0,-(sp)
   114c0:	       pea 1 <_start+0x1>
   114c4:	       move.l sp,d0
   114c6:	       addq.l #8,d0
   114c8:	       move.l d0,-(sp)
   114ca:	       jsr 15a9e <getValueType>
   114d0:	       lea 12(sp),sp
   114d4:	       tst.w d0
   114d6:	   ,-- bne.s 114dc <builtIn_setMusicVolume+0x28>
   114d8:	   |   moveq #1,d0
   114da:	,--|-- bra.s 11536 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   114dc:	|  '-> moveq #24,d0
   114de:	|      add.l 16(sp),d0
   114e2:	|      move.l d0,-(sp)
   114e4:	|      jsr 16422 <trimStack>
   114ea:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114ec:	|      movea.l 16(sp),a0
   114f0:	|      move.l 24(a0),d0
   114f4:	|      move.l d0,-(sp)
   114f6:	|      pea 1 <_start+0x1>
   114fa:	|      moveq #12,d0
   114fc:	|      add.l sp,d0
   114fe:	|      move.l d0,-(sp)
   11500:	|      jsr 15a9e <getValueType>
   11506:	|      lea 12(sp),sp
   1150a:	|      tst.w d0
   1150c:	|  ,-- bne.s 11512 <builtIn_setMusicVolume+0x5e>
   1150e:	|  |   moveq #1,d0
   11510:	+--|-- bra.s 11536 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   11512:	|  '-> moveq #24,d0
   11514:	|      add.l 16(sp),d0
   11518:	|      move.l d0,-(sp)
   1151a:	|      jsr 16422 <trimStack>
   11520:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   11522:	|      move.l (sp),d1
   11524:	|      move.l 4(sp),d0
   11528:	|      move.l d1,-(sp)
   1152a:	|      move.l d0,-(sp)
   1152c:	|      jsr dc3e <setMusicVolume>
   11532:	|      addq.l #8,sp
	return BR_CONTINUE;
   11534:	|      moveq #2,d0
}
   11536:	'----> addq.l #8,sp
   11538:	       rts

0001153a <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   1153a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1153c:	       movea.l 12(sp),a0
   11540:	       move.l 24(a0),d0
   11544:	       move.l d0,-(sp)
   11546:	       pea 1 <_start+0x1>
   1154a:	       move.l sp,d0
   1154c:	       addq.l #8,d0
   1154e:	       move.l d0,-(sp)
   11550:	       jsr 15a9e <getValueType>
   11556:	       lea 12(sp),sp
   1155a:	       tst.w d0
   1155c:	   ,-- bne.s 11562 <builtIn_setDefaultMusicVolume+0x28>
   1155e:	   |   moveq #1,d0
   11560:	,--|-- bra.s 11580 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   11562:	|  '-> moveq #24,d0
   11564:	|      add.l 12(sp),d0
   11568:	|      move.l d0,-(sp)
   1156a:	|      jsr 16422 <trimStack>
   11570:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   11572:	|      move.l (sp),d0
   11574:	|      move.l d0,-(sp)
   11576:	|      jsr dc22 <setDefaultMusicVolume>
   1157c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1157e:	|      moveq #2,d0
}
   11580:	'----> addq.l #4,sp
   11582:	       rts

00011584 <builtIn_playSound>:

builtIn(playSound)
{
   11584:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11586:	       movea.l 12(sp),a0
   1158a:	       move.l 24(a0),d0
   1158e:	       move.l d0,-(sp)
   11590:	       pea 5 <_start+0x5>
   11594:	       move.l sp,d0
   11596:	       addq.l #8,d0
   11598:	       move.l d0,-(sp)
   1159a:	       jsr 15a9e <getValueType>
   115a0:	       lea 12(sp),sp
   115a4:	       tst.w d0
   115a6:	   ,-- bne.s 115ac <builtIn_playSound+0x28>
   115a8:	   |   moveq #1,d0
   115aa:	,--|-- bra.s 115d4 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   115ac:	|  '-> moveq #24,d0
   115ae:	|      add.l 12(sp),d0
   115b2:	|      move.l d0,-(sp)
   115b4:	|      jsr 16422 <trimStack>
   115ba:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   115bc:	|      move.l (sp),d0
   115be:	|      clr.l -(sp)
   115c0:	|      move.l d0,-(sp)
   115c2:	|      jsr dc46 <startSound>
   115c8:	|      addq.l #8,sp
   115ca:	|      tst.w d0
   115cc:	|  ,-- bne.s 115d2 <builtIn_playSound+0x4e>
   115ce:	|  |   moveq #2,d0
   115d0:	+--|-- bra.s 115d4 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   115d2:	|  '-> moveq #2,d0
}
   115d4:	'----> addq.l #4,sp
   115d6:	       rts

000115d8 <builtIn_loopSound>:

builtIn(loopSound)
{
   115d8:	             lea -28(sp),sp
   115dc:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   115de:	             tst.l 36(sp)
   115e2:	         ,-- bgt.s 115f8 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   115e4:	         |   pea 1b2cb <PutChar+0x22ab>
   115ea:	         |   jsr 1857e <KPrintF>
   115f0:	         |   addq.l #4,sp
		return BR_ERROR;
   115f2:	         |   moveq #1,d0
   115f4:	,--------|-- bra.w 117b4 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   115f8:	|        '-> moveq #1,d0
   115fa:	|            cmp.l 36(sp),d0
   115fe:	|     ,----- blt.s 1165a <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   11600:	|     |      movea.l 40(sp),a0
   11604:	|     |      move.l 24(a0),d0
   11608:	|     |      move.l d0,-(sp)
   1160a:	|     |      pea 5 <_start+0x5>
   1160e:	|     |      lea 16(sp),a0
   11612:	|     |      move.l a0,-(sp)
   11614:	|     |      jsr 15a9e <getValueType>
   1161a:	|     |      lea 12(sp),sp
   1161e:	|     |      tst.w d0
   11620:	|     |  ,-- bne.s 11628 <builtIn_loopSound+0x50>
   11622:	|     |  |   moveq #1,d0
   11624:	+-----|--|-- bra.w 117b4 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   11628:	|     |  '-> moveq #24,d0
   1162a:	|     |      add.l 40(sp),d0
   1162e:	|     |      move.l d0,-(sp)
   11630:	|     |      jsr 16422 <trimStack>
   11636:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   11638:	|     |      move.l 8(sp),d0
   1163c:	|     |      pea 1 <_start+0x1>
   11640:	|     |      move.l d0,-(sp)
   11642:	|     |      jsr dc46 <startSound>
   11648:	|     |      addq.l #8,sp
   1164a:	|     |      tst.w d0
   1164c:	|     |  ,-- bne.s 11654 <builtIn_loopSound+0x7c>
   1164e:	|     |  |   moveq #2,d0
   11650:	+-----|--|-- bra.w 117b4 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   11654:	|     |  '-> moveq #2,d0
   11656:	+-----|----- bra.w 117b4 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   1165a:	|     '----> moveq #2,d1
   1165c:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   11660:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   11664:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   11668:	|            movea.l 40(sp),a0
   1166c:	|            movea.l 24(a0),a0
   11670:	|            move.l (a0),d0
   11672:	|            moveq #5,d1
   11674:	|            cmp.l d0,d1
   11676:	|  ,-------- beq.w 1174e <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   1167a:	|  |         movea.l 40(sp),a0
   1167e:	|  |         move.l 24(a0),d0
   11682:	|  |         move.l d0,-(sp)
   11684:	|  |         pea 1 <_start+0x1>
   11688:	|  |         lea 12(sp),a0
   1168c:	|  |         move.l a0,-(sp)
   1168e:	|  |         jsr 15a9e <getValueType>
   11694:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   11698:	|  |         moveq #24,d0
   1169a:	|  |         add.l 40(sp),d0
   1169e:	|  |         move.l d0,-(sp)
   116a0:	|  |         jsr 16422 <trimStack>
   116a6:	|  |         addq.l #4,sp
			numParams--;
   116a8:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   116ac:	|  +-------- bra.w 1174e <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   116b0:	|  |  ,----> movea.l 40(sp),a0
   116b4:	|  |  |      move.l 24(a0),d0
   116b8:	|  |  |      move.l d0,-(sp)
   116ba:	|  |  |      pea 5 <_start+0x5>
   116be:	|  |  |      lea 16(sp),a0
   116c2:	|  |  |      move.l a0,-(sp)
   116c4:	|  |  |      jsr 15a9e <getValueType>
   116ca:	|  |  |      lea 12(sp),sp
   116ce:	|  |  |      tst.w d0
   116d0:	|  |  |  ,-- bne.s 116e6 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   116d2:	|  |  |  |   pea 1b309 <PutChar+0x22e9>
   116d8:	|  |  |  |   jsr 1857e <KPrintF>
   116de:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   116e0:	|  |  |  |   moveq #1,d0
   116e2:	+--|--|--|-- bra.w 117b4 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   116e6:	|  |  |  '-> moveq #20,d0
   116e8:	|  |  |      move.l d0,20(sp)
   116ec:	|  |  |      clr.l 16(sp)
   116f0:	|  |  |      move.l 1e8c0 <SysBase>,d0
   116f6:	|  |  |      movea.l d0,a6
   116f8:	|  |  |      move.l 20(sp),d0
   116fc:	|  |  |      move.l 16(sp),d1
   11700:	|  |  |      jsr -684(a6)
   11704:	|  |  |      move.l d0,12(sp)
   11708:	|  |  |      move.l 12(sp),d0
   1170c:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   11710:	|  |  |  ,-- bne.s 11718 <builtIn_loopSound+0x140>
   11712:	|  |  |  |   moveq #1,d0
   11714:	+--|--|--|-- bra.w 117b4 <builtIn_loopSound+0x1dc>

			s->next = old;
   11718:	|  |  |  '-> movea.l 28(sp),a0
   1171c:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   11722:	|  |  |      movea.l 28(sp),a0
   11726:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   1172a:	|  |  |      move.l 8(sp),d0
   1172e:	|  |  |      movea.l 28(sp),a0
   11732:	|  |  |      move.l d0,(a0)
			old = s;
   11734:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   1173a:	|  |  |      moveq #24,d0
   1173c:	|  |  |      add.l 40(sp),d0
   11740:	|  |  |      move.l d0,-(sp)
   11742:	|  |  |      jsr 16422 <trimStack>
   11748:	|  |  |      addq.l #4,sp
			numParams--;
   1174a:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   1174e:	|  '--|----> tst.l 36(sp)
   11752:	|     '----- bne.w 116b0 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   11756:	|        ,-- bra.s 11762 <builtIn_loopSound+0x18a>
   11758:	|     ,--|-> movea.l 28(sp),a0
   1175c:	|     |  |   move.l 4(a0),28(sp)
   11762:	|     |  '-> movea.l 28(sp),a0
   11766:	|     |      move.l 4(a0),d0
   1176a:	|     '----- bne.s 11758 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   1176c:	|            move.l 4(sp),d0
   11770:	|            moveq #1,d1
   11772:	|            cmp.l d0,d1
   11774:	|     ,----- bge.s 1178c <builtIn_loopSound+0x1b4>
			s->next = old;
   11776:	|     |      movea.l 28(sp),a0
   1177a:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   11780:	|     |      movea.l 24(sp),a0
   11784:	|     |      move.l 28(sp),8(a0)
   1178a:	|     |  ,-- bra.s 1179c <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   1178c:	|     '--|-> move.l 4(sp),d0
   11790:	|        +-- beq.s 1179c <builtIn_loopSound+0x1c4>
			s->next = s;
   11792:	|        |   movea.l 28(sp),a0
   11796:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   1179c:	|        '-> movea.l 24(sp),a0
   117a0:	|            moveq #-1,d0
   117a2:	|            move.l d0,16(a0)
		playSoundList(old);
   117a6:	|            move.l 24(sp),-(sp)
   117aa:	|            jsr dbc0 <playSoundList>
   117b0:	|            addq.l #4,sp
		return BR_CONTINUE;
   117b2:	|            moveq #2,d0
	}
}
   117b4:	'----------> movea.l (sp)+,a6
   117b6:	             lea 28(sp),sp
   117ba:	             rts

000117bc <builtIn_stopSound>:

builtIn(stopSound)
{
   117bc:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   117be:	       movea.l 12(sp),a0
   117c2:	       move.l 24(a0),d0
   117c6:	       move.l d0,-(sp)
   117c8:	       pea 5 <_start+0x5>
   117cc:	       move.l sp,d0
   117ce:	       addq.l #8,d0
   117d0:	       move.l d0,-(sp)
   117d2:	       jsr 15a9e <getValueType>
   117d8:	       lea 12(sp),sp
   117dc:	       tst.w d0
   117de:	   ,-- bne.s 117e4 <builtIn_stopSound+0x28>
   117e0:	   |   moveq #1,d0
   117e2:	,--|-- bra.s 11802 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   117e4:	|  '-> moveq #24,d0
   117e6:	|      add.l 12(sp),d0
   117ea:	|      move.l d0,-(sp)
   117ec:	|      jsr 16422 <trimStack>
   117f2:	|      addq.l #4,sp
	huntKillSound (v);
   117f4:	|      move.l (sp),d0
   117f6:	|      move.l d0,-(sp)
   117f8:	|      jsr dbb8 <huntKillSound>
   117fe:	|      addq.l #4,sp
	return BR_CONTINUE;
   11800:	|      moveq #2,d0
}
   11802:	'----> addq.l #4,sp
   11804:	       rts

00011806 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   11806:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11808:	       movea.l 12(sp),a0
   1180c:	       move.l 24(a0),d0
   11810:	       move.l d0,-(sp)
   11812:	       pea 1 <_start+0x1>
   11816:	       move.l sp,d0
   11818:	       addq.l #8,d0
   1181a:	       move.l d0,-(sp)
   1181c:	       jsr 15a9e <getValueType>
   11822:	       lea 12(sp),sp
   11826:	       tst.w d0
   11828:	   ,-- bne.s 1182e <builtIn_setDefaultSoundVolume+0x28>
   1182a:	   |   moveq #1,d0
   1182c:	,--|-- bra.s 1184c <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   1182e:	|  '-> moveq #24,d0
   11830:	|      add.l 12(sp),d0
   11834:	|      move.l d0,-(sp)
   11836:	|      jsr 16422 <trimStack>
   1183c:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   1183e:	|      move.l (sp),d0
   11840:	|      move.l d0,-(sp)
   11842:	|      jsr dc2e <setDefaultSoundVolume>
   11848:	|      addq.l #4,sp
	return BR_CONTINUE;
   1184a:	|      moveq #2,d0
}
   1184c:	'----> addq.l #4,sp
   1184e:	       rts

00011850 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   11850:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11852:	       movea.l 16(sp),a0
   11856:	       move.l 24(a0),d0
   1185a:	       move.l d0,-(sp)
   1185c:	       pea 1 <_start+0x1>
   11860:	       move.l sp,d0
   11862:	       addq.l #8,d0
   11864:	       move.l d0,-(sp)
   11866:	       jsr 15a9e <getValueType>
   1186c:	       lea 12(sp),sp
   11870:	       tst.w d0
   11872:	   ,-- bne.s 11878 <builtIn_setSoundVolume+0x28>
   11874:	   |   moveq #1,d0
   11876:	,--|-- bra.s 118d2 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   11878:	|  '-> moveq #24,d0
   1187a:	|      add.l 16(sp),d0
   1187e:	|      move.l d0,-(sp)
   11880:	|      jsr 16422 <trimStack>
   11886:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11888:	|      movea.l 16(sp),a0
   1188c:	|      move.l 24(a0),d0
   11890:	|      move.l d0,-(sp)
   11892:	|      pea 5 <_start+0x5>
   11896:	|      moveq #12,d0
   11898:	|      add.l sp,d0
   1189a:	|      move.l d0,-(sp)
   1189c:	|      jsr 15a9e <getValueType>
   118a2:	|      lea 12(sp),sp
   118a6:	|      tst.w d0
   118a8:	|  ,-- bne.s 118ae <builtIn_setSoundVolume+0x5e>
   118aa:	|  |   moveq #1,d0
   118ac:	+--|-- bra.s 118d2 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   118ae:	|  '-> moveq #24,d0
   118b0:	|      add.l 16(sp),d0
   118b4:	|      move.l d0,-(sp)
   118b6:	|      jsr 16422 <trimStack>
   118bc:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   118be:	|      move.l (sp),d1
   118c0:	|      move.l 4(sp),d0
   118c4:	|      move.l d1,-(sp)
   118c6:	|      move.l d0,-(sp)
   118c8:	|      jsr dc42 <setSoundVolume>
   118ce:	|      addq.l #8,sp
	return BR_CONTINUE;
   118d0:	|      moveq #2,d0
}
   118d2:	'----> addq.l #8,sp
   118d4:	       rts

000118d6 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   118d6:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   118da:	       movea.l 20(sp),a0
   118de:	       move.l 24(a0),d0
   118e2:	       move.l d0,-(sp)
   118e4:	       pea 1 <_start+0x1>
   118e8:	       moveq #12,d0
   118ea:	       add.l sp,d0
   118ec:	       move.l d0,-(sp)
   118ee:	       jsr 15a9e <getValueType>
   118f4:	       lea 12(sp),sp
   118f8:	       tst.w d0
   118fa:	   ,-- bne.s 11902 <builtIn_setSoundLoopPoints+0x2c>
   118fc:	   |   moveq #1,d0
   118fe:	,--|-- bra.w 1199a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   11902:	|  '-> moveq #24,d0
   11904:	|      add.l 20(sp),d0
   11908:	|      move.l d0,-(sp)
   1190a:	|      jsr 16422 <trimStack>
   11910:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11912:	|      movea.l 20(sp),a0
   11916:	|      move.l 24(a0),d0
   1191a:	|      move.l d0,-(sp)
   1191c:	|      pea 1 <_start+0x1>
   11920:	|      lea 8(sp),a0
   11924:	|      move.l a0,-(sp)
   11926:	|      jsr 15a9e <getValueType>
   1192c:	|      lea 12(sp),sp
   11930:	|      tst.w d0
   11932:	|  ,-- bne.s 11938 <builtIn_setSoundLoopPoints+0x62>
   11934:	|  |   moveq #1,d0
   11936:	+--|-- bra.s 1199a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   11938:	|  '-> moveq #24,d0
   1193a:	|      add.l 20(sp),d0
   1193e:	|      move.l d0,-(sp)
   11940:	|      jsr 16422 <trimStack>
   11946:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11948:	|      movea.l 20(sp),a0
   1194c:	|      move.l 24(a0),d0
   11950:	|      move.l d0,-(sp)
   11952:	|      pea 5 <_start+0x5>
   11956:	|      moveq #16,d0
   11958:	|      add.l sp,d0
   1195a:	|      move.l d0,-(sp)
   1195c:	|      jsr 15a9e <getValueType>
   11962:	|      lea 12(sp),sp
   11966:	|      tst.w d0
   11968:	|  ,-- bne.s 1196e <builtIn_setSoundLoopPoints+0x98>
   1196a:	|  |   moveq #1,d0
   1196c:	+--|-- bra.s 1199a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   1196e:	|  '-> moveq #24,d0
   11970:	|      add.l 20(sp),d0
   11974:	|      move.l d0,-(sp)
   11976:	|      jsr 16422 <trimStack>
   1197c:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   1197e:	|      movea.l 4(sp),a0
   11982:	|      move.l (sp),d1
   11984:	|      move.l 8(sp),d0
   11988:	|      move.l a0,-(sp)
   1198a:	|      move.l d1,-(sp)
   1198c:	|      move.l d0,-(sp)
   1198e:	|      jsr dc3a <setSoundLoop>
   11994:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11998:	|      moveq #2,d0
}
   1199a:	'----> lea 12(sp),sp
   1199e:	       rts

000119a0 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   119a0:	          subq.l #4,sp
	KPrintF("running setFloor\n");
   119a2:	          pea 1b340 <PutChar+0x2320>
   119a8:	          jsr 1857e <KPrintF>
   119ae:	          addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   119b0:	          movea.l 12(sp),a0
   119b4:	          movea.l 24(a0),a0
   119b8:	          move.l (a0),d0
   119ba:	          moveq #5,d1
   119bc:	          cmp.l d0,d1
   119be:	,-------- bne.s 11a02 <builtIn_setFloor+0x62>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   119c0:	|         movea.l 12(sp),a0
   119c4:	|         move.l 24(a0),d0
   119c8:	|         move.l d0,-(sp)
   119ca:	|         pea 5 <_start+0x5>
   119ce:	|         move.l sp,d0
   119d0:	|         addq.l #8,d0
   119d2:	|         move.l d0,-(sp)
   119d4:	|         jsr 15a9e <getValueType>
   119da:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   119de:	|         moveq #24,d0
   119e0:	|         add.l 12(sp),d0
   119e4:	|         move.l d0,-(sp)
   119e6:	|         jsr 16422 <trimStack>
   119ec:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   119ee:	|         move.l (sp),d0
   119f0:	|         move.l d0,-(sp)
   119f2:	|         jsr 17d28 <setFloor>
   119f8:	|         addq.l #4,sp
   119fa:	|         tst.w d0
   119fc:	|  ,----- bne.s 11a18 <builtIn_setFloor+0x78>
   119fe:	|  |      moveq #1,d0
   11a00:	|  |  ,-- bra.s 11a1a <builtIn_setFloor+0x7a>
	} else {
		trimStack (&fun -> stack);
   11a02:	'--|--|-> moveq #24,d0
   11a04:	   |  |   add.l 12(sp),d0
   11a08:	   |  |   move.l d0,-(sp)
   11a0a:	   |  |   jsr 16422 <trimStack>
   11a10:	   |  |   addq.l #4,sp
		setFloorNull ();
   11a12:	   |  |   jsr 184a2 <setFloorNull>
	}
	return BR_CONTINUE;
   11a18:	   '--|-> moveq #2,d0
}
   11a1a:	      '-> addq.l #4,sp
   11a1c:	          rts

00011a1e <builtIn_showFloor>:

builtIn(showFloor)
{
	KPrintF("running showFloor\n");
   11a1e:	pea 1b352 <PutChar+0x2332>
   11a24:	jsr 1857e <KPrintF>
   11a2a:	addq.l #4,sp
	UNUSEDALL
	drawFloor ();
   11a2c:	jsr 175a4 <drawFloor>
	return BR_CONTINUE;
   11a32:	moveq #2,d0
}
   11a34:	rts

00011a36 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   11a36:	          subq.l #4,sp
	KPrintF("running setZBuffer\n");
   11a38:	          pea 1b365 <PutChar+0x2345>
   11a3e:	          jsr 1857e <KPrintF>
   11a44:	          addq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   11a46:	          movea.l 12(sp),a0
   11a4a:	          movea.l 24(a0),a0
   11a4e:	          move.l (a0),d0
   11a50:	          moveq #5,d1
   11a52:	          cmp.l d0,d1
   11a54:	,-------- bne.s 11a98 <builtIn_setZBuffer+0x62>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   11a56:	|         movea.l 12(sp),a0
   11a5a:	|         move.l 24(a0),d0
   11a5e:	|         move.l d0,-(sp)
   11a60:	|         pea 5 <_start+0x5>
   11a64:	|         move.l sp,d0
   11a66:	|         addq.l #8,d0
   11a68:	|         move.l d0,-(sp)
   11a6a:	|         jsr 15a9e <getValueType>
   11a70:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   11a74:	|         moveq #24,d0
   11a76:	|         add.l 12(sp),d0
   11a7a:	|         move.l d0,-(sp)
   11a7c:	|         jsr 16422 <trimStack>
   11a82:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   11a84:	|         move.l (sp),d0
   11a86:	|         move.l d0,-(sp)
   11a88:	|         jsr 90e8 <setZBuffer>
   11a8e:	|         addq.l #4,sp
   11a90:	|         tst.w d0
   11a92:	|  ,----- bne.s 11aae <builtIn_setZBuffer+0x78>
   11a94:	|  |      moveq #1,d0
   11a96:	|  |  ,-- bra.s 11ab0 <builtIn_setZBuffer+0x7a>
	} else {
		trimStack (&fun -> stack);
   11a98:	'--|--|-> moveq #24,d0
   11a9a:	   |  |   add.l 12(sp),d0
   11a9e:	   |  |   move.l d0,-(sp)
   11aa0:	   |  |   jsr 16422 <trimStack>
   11aa6:	   |  |   addq.l #4,sp
		killZBuffer ();
   11aa8:	   |  |   jsr 9082 <killZBuffer>
	}
	return BR_CONTINUE;
   11aae:	   '--|-> moveq #2,d0
}
   11ab0:	      '-> addq.l #4,sp
   11ab2:	          rts

00011ab4 <builtIn_setLightMap>:

builtIn(setLightMap)
{
	KPrintF("running setLightMap\n");
   11ab4:	pea 1b379 <PutChar+0x2359>
   11aba:	jsr 1857e <KPrintF>
   11ac0:	addq.l #4,sp

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   11ac2:	pea 1b38e <PutChar+0x236e>
   11ac8:	jsr 1857e <KPrintF>
   11ace:	addq.l #4,sp
	return BR_CONTINUE;
   11ad0:	moveq #2,d0
}
   11ad2:	rts

00011ad4 <builtIn_setSpeechMode>:
#pragma mark -
#pragma mark Objects

builtIn(setSpeechMode)
{
	KPrintF("running setSpeechMode\n");
   11ad4:	          pea 1b3a7 <PutChar+0x2387>
   11ada:	          jsr 1857e <KPrintF>
   11ae0:	          addq.l #4,sp
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ae2:	          movea.l 8(sp),a0
   11ae6:	          move.l 24(a0),d0
   11aea:	          move.l d0,-(sp)
   11aec:	          pea 1 <_start+0x1>
   11af0:	          pea 1e98e <speechMode>
   11af6:	          jsr 15a9e <getValueType>
   11afc:	          lea 12(sp),sp
   11b00:	          tst.w d0
   11b02:	      ,-- bne.s 11b08 <builtIn_setSpeechMode+0x34>
   11b04:	      |   moveq #1,d0
   11b06:	,-----|-- bra.s 11b40 <builtIn_setSpeechMode+0x6c>
	trimStack (&fun -> stack);
   11b08:	|     '-> moveq #24,d0
   11b0a:	|         add.l 8(sp),d0
   11b0e:	|         move.l d0,-(sp)
   11b10:	|         jsr 16422 <trimStack>
   11b16:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   11b18:	|         move.l 1e98e <speechMode>,d0
   11b1e:	|     ,-- bmi.s 11b2c <builtIn_setSpeechMode+0x58>
   11b20:	|     |   move.l 1e98e <speechMode>,d0
   11b26:	|     |   moveq #2,d1
   11b28:	|     |   cmp.l d0,d1
   11b2a:	|  ,--|-- bge.s 11b3e <builtIn_setSpeechMode+0x6a>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   11b2c:	|  |  '-> pea 1b3be <PutChar+0x239e>
   11b32:	|  |      jsr 1857e <KPrintF>
   11b38:	|  |      addq.l #4,sp
		return BR_ERROR;
   11b3a:	|  |      moveq #1,d0
   11b3c:	+--|----- bra.s 11b40 <builtIn_setSpeechMode+0x6c>
	}
	return BR_CONTINUE;
   11b3e:	|  '----> moveq #2,d0
}
   11b40:	'-------> rts

00011b42 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   11b42:	       subq.l #4,sp
	KPrintF("running somethingSpeaking\n");
   11b44:	       pea 1b3fc <PutChar+0x23dc>
   11b4a:	       jsr 1857e <KPrintF>
   11b50:	       addq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   11b52:	       jsr 44a4 <isThereAnySpeechGoingOn>
   11b58:	       move.l d0,(sp)
	if (i == -1) {
   11b5a:	       moveq #-1,d0
   11b5c:	       cmp.l (sp),d0
   11b5e:	,----- bne.s 11b7a <builtIn_somethingSpeaking+0x38>
		setVariable (&fun -> reg, SVT_INT, 0);
   11b60:	|      moveq #28,d0
   11b62:	|      add.l 12(sp),d0
   11b66:	|      clr.l -(sp)
   11b68:	|      pea 1 <_start+0x1>
   11b6c:	|      move.l d0,-(sp)
   11b6e:	|      jsr 16390 <setVariable>
   11b74:	|      lea 12(sp),sp
   11b78:	|  ,-- bra.s 11b92 <builtIn_somethingSpeaking+0x50>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   11b7a:	'--|-> moveq #28,d0
   11b7c:	   |   add.l 12(sp),d0
   11b80:	   |   move.l (sp),-(sp)
   11b82:	   |   pea 7 <_start+0x7>
   11b86:	   |   move.l d0,-(sp)
   11b88:	   |   jsr 16390 <setVariable>
   11b8e:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11b92:	   '-> moveq #2,d0
}
   11b94:	       addq.l #4,sp
   11b96:	       rts

00011b98 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	KPrintF("running skipSpeech\n");
   11b98:	pea 1b417 <PutChar+0x23f7>
   11b9e:	jsr 1857e <KPrintF>
   11ba4:	addq.l #4,sp
	UNUSEDALL
	killSpeechTimers ();
   11ba6:	jsr 7042 <killSpeechTimers>
	return BR_CONTINUE;
   11bac:	moveq #2,d0
}
   11bae:	rts

00011bb0 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	KPrintF("running getOverObject\n");
   11bb0:	       pea 1b42b <PutChar+0x240b>
   11bb6:	       jsr 1857e <KPrintF>
   11bbc:	       addq.l #4,sp
	UNUSEDALL
	if (overRegion)
   11bbe:	       move.l 1e9d4 <overRegion>,d0
   11bc4:	,----- beq.s 11bee <builtIn_getOverObject+0x3e>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   11bc6:	|      movea.l 1e9d4 <overRegion>,a0
   11bcc:	|      movea.l 28(a0),a0
   11bd0:	|      move.l 4(a0),d1
   11bd4:	|      moveq #28,d0
   11bd6:	|      add.l 8(sp),d0
   11bda:	|      move.l d1,-(sp)
   11bdc:	|      pea 7 <_start+0x7>
   11be0:	|      move.l d0,-(sp)
   11be2:	|      jsr 16390 <setVariable>
   11be8:	|      lea 12(sp),sp
   11bec:	|  ,-- bra.s 11c06 <builtIn_getOverObject+0x56>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   11bee:	'--|-> moveq #28,d0
   11bf0:	   |   add.l 8(sp),d0
   11bf4:	   |   clr.l -(sp)
   11bf6:	   |   pea 1 <_start+0x1>
   11bfa:	   |   move.l d0,-(sp)
   11bfc:	   |   jsr 16390 <setVariable>
   11c02:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   11c06:	   '-> moveq #2,d0
}
   11c08:	       rts

00011c0a <builtIn_rename>:

builtIn(rename)
{
   11c0a:	       lea -16(sp),sp
   11c0e:	       move.l a6,-(sp)
	KPrintF("running rename\n");
   11c10:	       pea 1b442 <PutChar+0x2422>
   11c16:	       jsr 1857e <KPrintF>
   11c1c:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11c1e:	       movea.l 28(sp),a0
   11c22:	       move.l 24(a0),d0
   11c26:	       move.l d0,-(sp)
   11c28:	       jsr 16074 <getTextFromAnyVar>
   11c2e:	       addq.l #4,sp
   11c30:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   11c34:	   ,-- bne.s 11c3a <builtIn_rename+0x30>
   11c36:	   |   moveq #1,d0
   11c38:	,--|-- bra.s 11cb4 <builtIn_rename+0xaa>
	trimStack(&fun->stack);
   11c3a:	|  '-> moveq #24,d0
   11c3c:	|      add.l 28(sp),d0
   11c40:	|      move.l d0,-(sp)
   11c42:	|      jsr 16422 <trimStack>
   11c48:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   11c4a:	|      movea.l 28(sp),a0
   11c4e:	|      move.l 24(a0),d0
   11c52:	|      move.l d0,-(sp)
   11c54:	|      pea 7 <_start+0x7>
   11c58:	|      lea 12(sp),a0
   11c5c:	|      move.l a0,-(sp)
   11c5e:	|      jsr 15a9e <getValueType>
   11c64:	|      lea 12(sp),sp
   11c68:	|      tst.w d0
   11c6a:	|  ,-- bne.s 11c70 <builtIn_rename+0x66>
   11c6c:	|  |   moveq #1,d0
   11c6e:	+--|-- bra.s 11cb4 <builtIn_rename+0xaa>
	trimStack(&fun->stack);
   11c70:	|  '-> moveq #24,d0
   11c72:	|      add.l 28(sp),d0
   11c76:	|      move.l d0,-(sp)
   11c78:	|      jsr 16422 <trimStack>
   11c7e:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   11c80:	|      move.l 4(sp),d0
   11c84:	|      move.l d0,-(sp)
   11c86:	|      jsr df86 <findObjectType>
   11c8c:	|      addq.l #4,sp
   11c8e:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   11c92:	|      movea.l 12(sp),a0
   11c96:	|      move.l (a0),8(sp)
   11c9a:	|      move.l 1e8c0 <SysBase>,d0
   11ca0:	|      movea.l d0,a6
   11ca2:	|      movea.l 8(sp),a1
   11ca6:	|      jsr -690(a6)
	o->screenName = newText;
   11caa:	|      movea.l 12(sp),a0
   11cae:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   11cb2:	|      moveq #2,d0
}
   11cb4:	'----> movea.l (sp)+,a6
   11cb6:	       lea 16(sp),sp
   11cba:	       rts

00011cbc <builtIn_getObjectX>:

builtIn (getObjectX)
{
   11cbc:	          lea -12(sp),sp
	KPrintF("running getObjectX\n");
   11cc0:	          pea 1b452 <PutChar+0x2432>
   11cc6:	          jsr 1857e <KPrintF>
   11ccc:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11cce:	          movea.l 20(sp),a0
   11cd2:	          move.l 24(a0),d0
   11cd6:	          move.l d0,-(sp)
   11cd8:	          pea 7 <_start+0x7>
   11cdc:	          lea 8(sp),a0
   11ce0:	          move.l a0,-(sp)
   11ce2:	          jsr 15a9e <getValueType>
   11ce8:	          lea 12(sp),sp
   11cec:	          tst.w d0
   11cee:	      ,-- bne.s 11cf6 <builtIn_getObjectX+0x3a>
   11cf0:	      |   moveq #1,d0
   11cf2:	,-----|-- bra.w 11d92 <builtIn_getObjectX+0xd6>
	trimStack (&fun -> stack);
   11cf6:	|     '-> moveq #24,d0
   11cf8:	|         add.l 20(sp),d0
   11cfc:	|         move.l d0,-(sp)
   11cfe:	|         jsr 16422 <trimStack>
   11d04:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11d06:	|         move.l (sp),d0
   11d08:	|         move.l d0,-(sp)
   11d0a:	|         jsr b018 <findPerson>
   11d10:	|         addq.l #4,sp
   11d12:	|         move.l d0,8(sp)
	if (pers) {
   11d16:	|     ,-- beq.s 11d44 <builtIn_getObjectX+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   11d18:	|     |   movea.l 8(sp),a0
   11d1c:	|     |   move.l (a0),d0
   11d1e:	|     |   move.l d0,-(sp)
   11d20:	|     |   jsr 18948 <__fixsfsi>
   11d26:	|     |   addq.l #4,sp
   11d28:	|     |   move.l d0,d1
   11d2a:	|     |   moveq #28,d0
   11d2c:	|     |   add.l 20(sp),d0
   11d30:	|     |   move.l d1,-(sp)
   11d32:	|     |   pea 1 <_start+0x1>
   11d36:	|     |   move.l d0,-(sp)
   11d38:	|     |   jsr 16390 <setVariable>
   11d3e:	|     |   lea 12(sp),sp
   11d42:	|  ,--|-- bra.s 11d90 <builtIn_getObjectX+0xd4>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11d44:	|  |  '-> move.l (sp),d0
   11d46:	|  |      move.l d0,-(sp)
   11d48:	|  |      jsr 16d60 <getRegionForObject>
   11d4e:	|  |      addq.l #4,sp
   11d50:	|  |      move.l d0,4(sp)
		if (la) {
   11d54:	|  |  ,-- beq.s 11d78 <builtIn_getObjectX+0xbc>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   11d56:	|  |  |   movea.l 4(sp),a0
   11d5a:	|  |  |   move.l 16(a0),d1
   11d5e:	|  |  |   moveq #28,d0
   11d60:	|  |  |   add.l 20(sp),d0
   11d64:	|  |  |   move.l d1,-(sp)
   11d66:	|  |  |   pea 1 <_start+0x1>
   11d6a:	|  |  |   move.l d0,-(sp)
   11d6c:	|  |  |   jsr 16390 <setVariable>
   11d72:	|  |  |   lea 12(sp),sp
   11d76:	|  +--|-- bra.s 11d90 <builtIn_getObjectX+0xd4>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   11d78:	|  |  '-> moveq #28,d0
   11d7a:	|  |      add.l 20(sp),d0
   11d7e:	|  |      clr.l -(sp)
   11d80:	|  |      pea 1 <_start+0x1>
   11d84:	|  |      move.l d0,-(sp)
   11d86:	|  |      jsr 16390 <setVariable>
   11d8c:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11d90:	|  '----> moveq #2,d0
}
   11d92:	'-------> lea 12(sp),sp
   11d96:	          rts

00011d98 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   11d98:	          lea -12(sp),sp
	KPrintF("running getObjectY\n");
   11d9c:	          pea 1b466 <PutChar+0x2446>
   11da2:	          jsr 1857e <KPrintF>
   11da8:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11daa:	          movea.l 20(sp),a0
   11dae:	          move.l 24(a0),d0
   11db2:	          move.l d0,-(sp)
   11db4:	          pea 7 <_start+0x7>
   11db8:	          lea 8(sp),a0
   11dbc:	          move.l a0,-(sp)
   11dbe:	          jsr 15a9e <getValueType>
   11dc4:	          lea 12(sp),sp
   11dc8:	          tst.w d0
   11dca:	      ,-- bne.s 11dd2 <builtIn_getObjectY+0x3a>
   11dcc:	      |   moveq #1,d0
   11dce:	,-----|-- bra.w 11e70 <builtIn_getObjectY+0xd8>
	trimStack (&fun -> stack);
   11dd2:	|     '-> moveq #24,d0
   11dd4:	|         add.l 20(sp),d0
   11dd8:	|         move.l d0,-(sp)
   11dda:	|         jsr 16422 <trimStack>
   11de0:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11de2:	|         move.l (sp),d0
   11de4:	|         move.l d0,-(sp)
   11de6:	|         jsr b018 <findPerson>
   11dec:	|         addq.l #4,sp
   11dee:	|         move.l d0,8(sp)
	if (pers) {
   11df2:	|     ,-- beq.s 11e22 <builtIn_getObjectY+0x8a>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   11df4:	|     |   movea.l 8(sp),a0
   11df8:	|     |   move.l 4(a0),d0
   11dfc:	|     |   move.l d0,-(sp)
   11dfe:	|     |   jsr 18948 <__fixsfsi>
   11e04:	|     |   addq.l #4,sp
   11e06:	|     |   move.l d0,d1
   11e08:	|     |   moveq #28,d0
   11e0a:	|     |   add.l 20(sp),d0
   11e0e:	|     |   move.l d1,-(sp)
   11e10:	|     |   pea 1 <_start+0x1>
   11e14:	|     |   move.l d0,-(sp)
   11e16:	|     |   jsr 16390 <setVariable>
   11e1c:	|     |   lea 12(sp),sp
   11e20:	|  ,--|-- bra.s 11e6e <builtIn_getObjectY+0xd6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11e22:	|  |  '-> move.l (sp),d0
   11e24:	|  |      move.l d0,-(sp)
   11e26:	|  |      jsr 16d60 <getRegionForObject>
   11e2c:	|  |      addq.l #4,sp
   11e2e:	|  |      move.l d0,4(sp)
		if (la) {
   11e32:	|  |  ,-- beq.s 11e56 <builtIn_getObjectY+0xbe>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   11e34:	|  |  |   movea.l 4(sp),a0
   11e38:	|  |  |   move.l 20(a0),d1
   11e3c:	|  |  |   moveq #28,d0
   11e3e:	|  |  |   add.l 20(sp),d0
   11e42:	|  |  |   move.l d1,-(sp)
   11e44:	|  |  |   pea 1 <_start+0x1>
   11e48:	|  |  |   move.l d0,-(sp)
   11e4a:	|  |  |   jsr 16390 <setVariable>
   11e50:	|  |  |   lea 12(sp),sp
   11e54:	|  +--|-- bra.s 11e6e <builtIn_getObjectY+0xd6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   11e56:	|  |  '-> moveq #28,d0
   11e58:	|  |      add.l 20(sp),d0
   11e5c:	|  |      clr.l -(sp)
   11e5e:	|  |      pea 1 <_start+0x1>
   11e62:	|  |      move.l d0,-(sp)
   11e64:	|  |      jsr 16390 <setVariable>
   11e6a:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11e6e:	|  '----> moveq #2,d0
}
   11e70:	'-------> lea 12(sp),sp
   11e74:	          rts

00011e76 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   11e76:	       lea -32(sp),sp
   11e7a:	       movem.l d2-d5,-(sp)
	KPrintF("running addScreenRegion\n");
   11e7e:	       pea 1b47a <PutChar+0x245a>
   11e84:	       jsr 1857e <KPrintF>
   11e8a:	       addq.l #4,sp
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e8c:	       movea.l 56(sp),a0
   11e90:	       move.l 24(a0),d0
   11e94:	       move.l d0,-(sp)
   11e96:	       pea 1 <_start+0x1>
   11e9a:	       lea 28(sp),a0
   11e9e:	       move.l a0,-(sp)
   11ea0:	       jsr 15a9e <getValueType>
   11ea6:	       lea 12(sp),sp
   11eaa:	       tst.w d0
   11eac:	   ,-- bne.s 11eb4 <builtIn_addScreenRegion+0x3e>
   11eae:	   |   moveq #1,d0
   11eb0:	,--|-- bra.w 1208e <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11eb4:	|  '-> moveq #24,d0
   11eb6:	|      add.l 56(sp),d0
   11eba:	|      move.l d0,-(sp)
   11ebc:	|      jsr 16422 <trimStack>
   11ec2:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ec4:	|      movea.l 56(sp),a0
   11ec8:	|      move.l 24(a0),d0
   11ecc:	|      move.l d0,-(sp)
   11ece:	|      pea 1 <_start+0x1>
   11ed2:	|      moveq #48,d0
   11ed4:	|      add.l sp,d0
   11ed6:	|      move.l d0,-(sp)
   11ed8:	|      jsr 15a9e <getValueType>
   11ede:	|      lea 12(sp),sp
   11ee2:	|      tst.w d0
   11ee4:	|  ,-- bne.s 11eec <builtIn_addScreenRegion+0x76>
   11ee6:	|  |   moveq #1,d0
   11ee8:	+--|-- bra.w 1208e <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11eec:	|  '-> moveq #24,d0
   11eee:	|      add.l 56(sp),d0
   11ef2:	|      move.l d0,-(sp)
   11ef4:	|      jsr 16422 <trimStack>
   11efa:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11efc:	|      movea.l 56(sp),a0
   11f00:	|      move.l 24(a0),d0
   11f04:	|      move.l d0,-(sp)
   11f06:	|      pea 1 <_start+0x1>
   11f0a:	|      moveq #52,d0
   11f0c:	|      add.l sp,d0
   11f0e:	|      move.l d0,-(sp)
   11f10:	|      jsr 15a9e <getValueType>
   11f16:	|      lea 12(sp),sp
   11f1a:	|      tst.w d0
   11f1c:	|  ,-- bne.s 11f24 <builtIn_addScreenRegion+0xae>
   11f1e:	|  |   moveq #1,d0
   11f20:	+--|-- bra.w 1208e <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11f24:	|  '-> moveq #24,d0
   11f26:	|      add.l 56(sp),d0
   11f2a:	|      move.l d0,-(sp)
   11f2c:	|      jsr 16422 <trimStack>
   11f32:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f34:	|      movea.l 56(sp),a0
   11f38:	|      move.l 24(a0),d0
   11f3c:	|      move.l d0,-(sp)
   11f3e:	|      pea 1 <_start+0x1>
   11f42:	|      lea 32(sp),a0
   11f46:	|      move.l a0,-(sp)
   11f48:	|      jsr 15a9e <getValueType>
   11f4e:	|      lea 12(sp),sp
   11f52:	|      tst.w d0
   11f54:	|  ,-- bne.s 11f5c <builtIn_addScreenRegion+0xe6>
   11f56:	|  |   moveq #1,d0
   11f58:	+--|-- bra.w 1208e <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11f5c:	|  '-> moveq #24,d0
   11f5e:	|      add.l 56(sp),d0
   11f62:	|      move.l d0,-(sp)
   11f64:	|      jsr 16422 <trimStack>
   11f6a:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f6c:	|      movea.l 56(sp),a0
   11f70:	|      move.l 24(a0),d0
   11f74:	|      move.l d0,-(sp)
   11f76:	|      pea 1 <_start+0x1>
   11f7a:	|      lea 36(sp),a0
   11f7e:	|      move.l a0,-(sp)
   11f80:	|      jsr 15a9e <getValueType>
   11f86:	|      lea 12(sp),sp
   11f8a:	|      tst.w d0
   11f8c:	|  ,-- bne.s 11f94 <builtIn_addScreenRegion+0x11e>
   11f8e:	|  |   moveq #1,d0
   11f90:	+--|-- bra.w 1208e <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11f94:	|  '-> moveq #24,d0
   11f96:	|      add.l 56(sp),d0
   11f9a:	|      move.l d0,-(sp)
   11f9c:	|      jsr 16422 <trimStack>
   11fa2:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fa4:	|      movea.l 56(sp),a0
   11fa8:	|      move.l 24(a0),d0
   11fac:	|      move.l d0,-(sp)
   11fae:	|      pea 1 <_start+0x1>
   11fb2:	|      lea 40(sp),a0
   11fb6:	|      move.l a0,-(sp)
   11fb8:	|      jsr 15a9e <getValueType>
   11fbe:	|      lea 12(sp),sp
   11fc2:	|      tst.w d0
   11fc4:	|  ,-- bne.s 11fcc <builtIn_addScreenRegion+0x156>
   11fc6:	|  |   moveq #1,d0
   11fc8:	+--|-- bra.w 1208e <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   11fcc:	|  '-> moveq #24,d0
   11fce:	|      add.l 56(sp),d0
   11fd2:	|      move.l d0,-(sp)
   11fd4:	|      jsr 16422 <trimStack>
   11fda:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fdc:	|      movea.l 56(sp),a0
   11fe0:	|      move.l 24(a0),d0
   11fe4:	|      move.l d0,-(sp)
   11fe6:	|      pea 1 <_start+0x1>
   11fea:	|      lea 44(sp),a0
   11fee:	|      move.l a0,-(sp)
   11ff0:	|      jsr 15a9e <getValueType>
   11ff6:	|      lea 12(sp),sp
   11ffa:	|      tst.w d0
   11ffc:	|  ,-- bne.s 12004 <builtIn_addScreenRegion+0x18e>
   11ffe:	|  |   moveq #1,d0
   12000:	+--|-- bra.w 1208e <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   12004:	|  '-> moveq #24,d0
   12006:	|      add.l 56(sp),d0
   1200a:	|      move.l d0,-(sp)
   1200c:	|      jsr 16422 <trimStack>
   12012:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12014:	|      movea.l 56(sp),a0
   12018:	|      move.l 24(a0),d0
   1201c:	|      move.l d0,-(sp)
   1201e:	|      pea 7 <_start+0x7>
   12022:	|      lea 24(sp),a0
   12026:	|      move.l a0,-(sp)
   12028:	|      jsr 15a9e <getValueType>
   1202e:	|      lea 12(sp),sp
   12032:	|      tst.w d0
   12034:	|  ,-- bne.s 1203a <builtIn_addScreenRegion+0x1c4>
   12036:	|  |   moveq #1,d0
   12038:	+--|-- bra.s 1208e <builtIn_addScreenRegion+0x218>
	trimStack (&fun -> stack);
   1203a:	|  '-> moveq #24,d0
   1203c:	|      add.l 56(sp),d0
   12040:	|      move.l d0,-(sp)
   12042:	|      jsr 16422 <trimStack>
   12048:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   1204a:	|      move.l 16(sp),d5
   1204e:	|      move.l 20(sp),d4
   12052:	|      move.l 40(sp),d3
   12056:	|      move.l 44(sp),d2
   1205a:	|      movea.l 24(sp),a1
   1205e:	|      movea.l 28(sp),a0
   12062:	|      move.l 32(sp),d1
   12066:	|      move.l 36(sp),d0
   1206a:	|      move.l d5,-(sp)
   1206c:	|      move.l d4,-(sp)
   1206e:	|      move.l d3,-(sp)
   12070:	|      move.l d2,-(sp)
   12072:	|      move.l a1,-(sp)
   12074:	|      move.l a0,-(sp)
   12076:	|      move.l d1,-(sp)
   12078:	|      move.l d0,-(sp)
   1207a:	|      jsr 16c1a <addScreenRegion>
   12080:	|      lea 32(sp),sp
   12084:	|      tst.w d0
   12086:	|  ,-- beq.s 1208c <builtIn_addScreenRegion+0x216>
   12088:	|  |   moveq #2,d0
   1208a:	+--|-- bra.s 1208e <builtIn_addScreenRegion+0x218>
	return BR_ERROR;
   1208c:	|  '-> moveq #1,d0

}
   1208e:	'----> movem.l (sp)+,d2-d5
   12092:	       lea 32(sp),sp
   12096:	       rts

00012098 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   12098:	       subq.l #4,sp
	KPrintF("running removeScreenRegion\n");
   1209a:	       pea 1b493 <PutChar+0x2473>
   120a0:	       jsr 1857e <KPrintF>
   120a6:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   120a8:	       movea.l 12(sp),a0
   120ac:	       move.l 24(a0),d0
   120b0:	       move.l d0,-(sp)
   120b2:	       pea 7 <_start+0x7>
   120b6:	       move.l sp,d0
   120b8:	       addq.l #8,d0
   120ba:	       move.l d0,-(sp)
   120bc:	       jsr 15a9e <getValueType>
   120c2:	       lea 12(sp),sp
   120c6:	       tst.w d0
   120c8:	   ,-- bne.s 120ce <builtIn_removeScreenRegion+0x36>
   120ca:	   |   moveq #1,d0
   120cc:	,--|-- bra.s 120ec <builtIn_removeScreenRegion+0x54>
	trimStack (&fun -> stack);
   120ce:	|  '-> moveq #24,d0
   120d0:	|      add.l 12(sp),d0
   120d4:	|      move.l d0,-(sp)
   120d6:	|      jsr 16422 <trimStack>
   120dc:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   120de:	|      move.l (sp),d0
   120e0:	|      move.l d0,-(sp)
   120e2:	|      jsr 16f08 <removeScreenRegion>
   120e8:	|      addq.l #4,sp
	return BR_CONTINUE;
   120ea:	|      moveq #2,d0
}
   120ec:	'----> addq.l #4,sp
   120ee:	       rts

000120f0 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	KPrintF("running showBoxes\n");
   120f0:	pea 1b4af <PutChar+0x248f>
   120f6:	jsr 1857e <KPrintF>
   120fc:	addq.l #4,sp
	UNUSEDALL
	showBoxes ();
   120fe:	jsr 1708c <showBoxes>
	return BR_CONTINUE;
   12104:	moveq #2,d0
}
   12106:	rts

00012108 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	KPrintF("running removeAllScreenRegions\n");
   12108:	pea 1b4c2 <PutChar+0x24a2>
   1210e:	jsr 1857e <KPrintF>
   12114:	addq.l #4,sp
	UNUSEDALL
	killAllRegions ();
   12116:	jsr 16d8e <killAllRegions>
	return BR_CONTINUE;
   1211c:	moveq #2,d0
}
   1211e:	rts

00012120 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   12120:	       lea -16(sp),sp
	KPrintF("running addCharacter\n");
   12124:	       pea 1b4e2 <PutChar+0x24c2>
   1212a:	       jsr 1857e <KPrintF>
   12130:	       addq.l #4,sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   12132:	       movea.l 24(sp),a0
   12136:	       move.l 24(a0),d0
   1213a:	       move.l d0,-(sp)
   1213c:	       jsr 1574a <getCostumeFromVar>
   12142:	       addq.l #4,sp
   12144:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   12148:	   ,-- bne.s 12150 <builtIn_addCharacter+0x30>
   1214a:	   |   moveq #1,d0
   1214c:	,--|-- bra.w 1222c <builtIn_addCharacter+0x10c>

	trimStack (&fun -> stack);
   12150:	|  '-> moveq #24,d0
   12152:	|      add.l 24(sp),d0
   12156:	|      move.l d0,-(sp)
   12158:	|      jsr 16422 <trimStack>
   1215e:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12160:	|      movea.l 24(sp),a0
   12164:	|      move.l 24(a0),d0
   12168:	|      move.l d0,-(sp)
   1216a:	|      pea 1 <_start+0x1>
   1216e:	|      lea 12(sp),a0
   12172:	|      move.l a0,-(sp)
   12174:	|      jsr 15a9e <getValueType>
   1217a:	|      lea 12(sp),sp
   1217e:	|      tst.w d0
   12180:	|  ,-- bne.s 12188 <builtIn_addCharacter+0x68>
   12182:	|  |   moveq #1,d0
   12184:	+--|-- bra.w 1222c <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   12188:	|  '-> moveq #24,d0
   1218a:	|      add.l 24(sp),d0
   1218e:	|      move.l d0,-(sp)
   12190:	|      jsr 16422 <trimStack>
   12196:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12198:	|      movea.l 24(sp),a0
   1219c:	|      move.l 24(a0),d0
   121a0:	|      move.l d0,-(sp)
   121a2:	|      pea 1 <_start+0x1>
   121a6:	|      moveq #16,d0
   121a8:	|      add.l sp,d0
   121aa:	|      move.l d0,-(sp)
   121ac:	|      jsr 15a9e <getValueType>
   121b2:	|      lea 12(sp),sp
   121b6:	|      tst.w d0
   121b8:	|  ,-- bne.s 121be <builtIn_addCharacter+0x9e>
   121ba:	|  |   moveq #1,d0
   121bc:	+--|-- bra.s 1222c <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   121be:	|  '-> moveq #24,d0
   121c0:	|      add.l 24(sp),d0
   121c4:	|      move.l d0,-(sp)
   121c6:	|      jsr 16422 <trimStack>
   121cc:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121ce:	|      movea.l 24(sp),a0
   121d2:	|      move.l 24(a0),d0
   121d6:	|      move.l d0,-(sp)
   121d8:	|      pea 7 <_start+0x7>
   121dc:	|      lea 8(sp),a0
   121e0:	|      move.l a0,-(sp)
   121e2:	|      jsr 15a9e <getValueType>
   121e8:	|      lea 12(sp),sp
   121ec:	|      tst.w d0
   121ee:	|  ,-- bne.s 121f4 <builtIn_addCharacter+0xd4>
   121f0:	|  |   moveq #1,d0
   121f2:	+--|-- bra.s 1222c <builtIn_addCharacter+0x10c>
	trimStack (&fun -> stack);
   121f4:	|  '-> moveq #24,d0
   121f6:	|      add.l 24(sp),d0
   121fa:	|      move.l d0,-(sp)
   121fc:	|      jsr 16422 <trimStack>
   12202:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   12204:	|      movea.l (sp),a0
   12206:	|      move.l 4(sp),d1
   1220a:	|      move.l 8(sp),d0
   1220e:	|      move.l 12(sp),-(sp)
   12212:	|      move.l a0,-(sp)
   12214:	|      move.l d1,-(sp)
   12216:	|      move.l d0,-(sp)
   12218:	|      jsr 9c12 <addPerson>
   1221e:	|      lea 16(sp),sp
   12222:	|      tst.w d0
   12224:	|  ,-- beq.s 1222a <builtIn_addCharacter+0x10a>
   12226:	|  |   moveq #2,d0
   12228:	+--|-- bra.s 1222c <builtIn_addCharacter+0x10c>
	return BR_ERROR;
   1222a:	|  '-> moveq #1,d0
}
   1222c:	'----> lea 16(sp),sp
   12230:	       rts

00012232 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   12232:	       subq.l #4,sp
	KPrintF("running hideCharacter\n");
   12234:	       pea 1b4f8 <PutChar+0x24d8>
   1223a:	       jsr 1857e <KPrintF>
   12240:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12242:	       movea.l 12(sp),a0
   12246:	       move.l 24(a0),d0
   1224a:	       move.l d0,-(sp)
   1224c:	       pea 7 <_start+0x7>
   12250:	       move.l sp,d0
   12252:	       addq.l #8,d0
   12254:	       move.l d0,-(sp)
   12256:	       jsr 15a9e <getValueType>
   1225c:	       lea 12(sp),sp
   12260:	       tst.w d0
   12262:	   ,-- bne.s 12268 <builtIn_hideCharacter+0x36>
   12264:	   |   moveq #1,d0
   12266:	,--|-- bra.s 12288 <builtIn_hideCharacter+0x56>
	trimStack (&fun -> stack);
   12268:	|  '-> moveq #24,d0
   1226a:	|      add.l 12(sp),d0
   1226e:	|      move.l d0,-(sp)
   12270:	|      jsr 16422 <trimStack>
   12276:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   12278:	|      move.l (sp),d0
   1227a:	|      move.l d0,-(sp)
   1227c:	|      clr.l -(sp)
   1227e:	|      jsr c6ae <setShown>
   12284:	|      addq.l #8,sp
	return BR_CONTINUE;
   12286:	|      moveq #2,d0
}
   12288:	'----> addq.l #4,sp
   1228a:	       rts

0001228c <builtIn_showCharacter>:

builtIn(showCharacter)
{
   1228c:	       subq.l #4,sp
	KPrintF("running showCharacter\n");
   1228e:	       pea 1b50f <PutChar+0x24ef>
   12294:	       jsr 1857e <KPrintF>
   1229a:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1229c:	       movea.l 12(sp),a0
   122a0:	       move.l 24(a0),d0
   122a4:	       move.l d0,-(sp)
   122a6:	       pea 7 <_start+0x7>
   122aa:	       move.l sp,d0
   122ac:	       addq.l #8,d0
   122ae:	       move.l d0,-(sp)
   122b0:	       jsr 15a9e <getValueType>
   122b6:	       lea 12(sp),sp
   122ba:	       tst.w d0
   122bc:	   ,-- bne.s 122c2 <builtIn_showCharacter+0x36>
   122be:	   |   moveq #1,d0
   122c0:	,--|-- bra.s 122e4 <builtIn_showCharacter+0x58>
	trimStack (&fun -> stack);
   122c2:	|  '-> moveq #24,d0
   122c4:	|      add.l 12(sp),d0
   122c8:	|      move.l d0,-(sp)
   122ca:	|      jsr 16422 <trimStack>
   122d0:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   122d2:	|      move.l (sp),d0
   122d4:	|      move.l d0,-(sp)
   122d6:	|      pea 1 <_start+0x1>
   122da:	|      jsr c6ae <setShown>
   122e0:	|      addq.l #8,sp
	return BR_CONTINUE;
   122e2:	|      moveq #2,d0
}
   122e4:	'----> addq.l #4,sp
   122e6:	       rts

000122e8 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	KPrintF("running removeAllCharacters\n");
   122e8:	pea 1b526 <PutChar+0x2506>
   122ee:	jsr 1857e <KPrintF>
   122f4:	addq.l #4,sp
	UNUSEDALL
	killSpeechTimers ();
   122f6:	jsr 7042 <killSpeechTimers>
	killMostPeople ();
   122fc:	jsr b4ae <killMostPeople>
	return BR_CONTINUE;
   12302:	moveq #2,d0
}
   12304:	rts

00012306 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   12306:	       subq.l #8,sp
	KPrintF("running setCharacterDrawMode\n");
   12308:	       pea 1b543 <PutChar+0x2523>
   1230e:	       jsr 1857e <KPrintF>
   12314:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12316:	       movea.l 16(sp),a0
   1231a:	       move.l 24(a0),d0
   1231e:	       move.l d0,-(sp)
   12320:	       pea 1 <_start+0x1>
   12324:	       move.l sp,d0
   12326:	       addq.l #8,d0
   12328:	       move.l d0,-(sp)
   1232a:	       jsr 15a9e <getValueType>
   12330:	       lea 12(sp),sp
   12334:	       tst.w d0
   12336:	   ,-- bne.s 1233c <builtIn_setCharacterDrawMode+0x36>
   12338:	   |   moveq #1,d0
   1233a:	,--|-- bra.s 12396 <builtIn_setCharacterDrawMode+0x90>
	trimStack (&fun -> stack);
   1233c:	|  '-> moveq #24,d0
   1233e:	|      add.l 16(sp),d0
   12342:	|      move.l d0,-(sp)
   12344:	|      jsr 16422 <trimStack>
   1234a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1234c:	|      movea.l 16(sp),a0
   12350:	|      move.l 24(a0),d0
   12354:	|      move.l d0,-(sp)
   12356:	|      pea 7 <_start+0x7>
   1235a:	|      moveq #12,d0
   1235c:	|      add.l sp,d0
   1235e:	|      move.l d0,-(sp)
   12360:	|      jsr 15a9e <getValueType>
   12366:	|      lea 12(sp),sp
   1236a:	|      tst.w d0
   1236c:	|  ,-- bne.s 12372 <builtIn_setCharacterDrawMode+0x6c>
   1236e:	|  |   moveq #1,d0
   12370:	+--|-- bra.s 12396 <builtIn_setCharacterDrawMode+0x90>
	trimStack (&fun -> stack);
   12372:	|  '-> moveq #24,d0
   12374:	|      add.l 16(sp),d0
   12378:	|      move.l d0,-(sp)
   1237a:	|      jsr 16422 <trimStack>
   12380:	|      addq.l #4,sp
	setDrawMode (di, obj);
   12382:	|      move.l 4(sp),d1
   12386:	|      move.l (sp),d0
   12388:	|      move.l d1,-(sp)
   1238a:	|      move.l d0,-(sp)
   1238c:	|      jsr bfec <setDrawMode>
   12392:	|      addq.l #8,sp
	return BR_CONTINUE;
   12394:	|      moveq #2,d0
}
   12396:	'----> addq.l #8,sp
   12398:	       rts

0001239a <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	KPrintF("running setCharacterTransparency\n");
   1239a:	pea 1b561 <PutChar+0x2541>
   123a0:	jsr 1857e <KPrintF>
   123a6:	addq.l #4,sp
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   123a8:	pea 1b583 <PutChar+0x2563>
   123ae:	jsr 1857e <KPrintF>
   123b4:	addq.l #4,sp
	return BR_CONTINUE;
   123b6:	moveq #2,d0
}
   123b8:	rts

000123ba <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	KPrintF("running setCharacterColourise\n");
   123ba:	pea 1b5b6 <PutChar+0x2596>
   123c0:	jsr 1857e <KPrintF>
   123c6:	addq.l #4,sp
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   123c8:	pea 1b5d5 <PutChar+0x25b5>
   123ce:	jsr 1857e <KPrintF>
   123d4:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   123d6:	moveq #2,d0
}
   123d8:	rts

000123da <builtIn_setScale>:

builtIn(setScale)
{
   123da:	       subq.l #8,sp
	KPrintF("running setScale\n");
   123dc:	       pea 1b60f <PutChar+0x25ef>
   123e2:	       jsr 1857e <KPrintF>
   123e8:	       addq.l #4,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123ea:	       movea.l 16(sp),a0
   123ee:	       move.l 24(a0),d0
   123f2:	       move.l d0,-(sp)
   123f4:	       pea 1 <_start+0x1>
   123f8:	       move.l sp,d0
   123fa:	       addq.l #8,d0
   123fc:	       move.l d0,-(sp)
   123fe:	       jsr 15a9e <getValueType>
   12404:	       lea 12(sp),sp
   12408:	       tst.w d0
   1240a:	   ,-- bne.s 12410 <builtIn_setScale+0x36>
   1240c:	   |   moveq #1,d0
   1240e:	,--|-- bra.s 12472 <builtIn_setScale+0x98>
	trimStack (&fun -> stack);
   12410:	|  '-> moveq #24,d0
   12412:	|      add.l 16(sp),d0
   12416:	|      move.l d0,-(sp)
   12418:	|      jsr 16422 <trimStack>
   1241e:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12420:	|      movea.l 16(sp),a0
   12424:	|      move.l 24(a0),d0
   12428:	|      move.l d0,-(sp)
   1242a:	|      pea 1 <_start+0x1>
   1242e:	|      moveq #12,d0
   12430:	|      add.l sp,d0
   12432:	|      move.l d0,-(sp)
   12434:	|      jsr 15a9e <getValueType>
   1243a:	|      lea 12(sp),sp
   1243e:	|      tst.w d0
   12440:	|  ,-- bne.s 12446 <builtIn_setScale+0x6c>
   12442:	|  |   moveq #1,d0
   12444:	+--|-- bra.s 12472 <builtIn_setScale+0x98>
	trimStack (&fun -> stack);
   12446:	|  '-> moveq #24,d0
   12448:	|      add.l 16(sp),d0
   1244c:	|      move.l d0,-(sp)
   1244e:	|      jsr 16422 <trimStack>
   12454:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   12456:	|      move.l (sp),d0
   12458:	|      move.l d0,d0
   1245a:	|      movea.w d0,a1
   1245c:	|      move.l 4(sp),d0
   12460:	|      move.l d0,d0
   12462:	|      movea.w d0,a0
   12464:	|      move.l a1,-(sp)
   12466:	|      move.l a0,-(sp)
   12468:	|      jsr c686 <setScale>
   1246e:	|      addq.l #8,sp
	return BR_CONTINUE;
   12470:	|      moveq #2,d0
}
   12472:	'----> addq.l #8,sp
   12474:	       rts

00012476 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   12476:	       subq.l #4,sp
	KPrintF("running stopCharacter\n");
   12478:	       pea 1b621 <PutChar+0x2601>
   1247e:	       jsr 1857e <KPrintF>
   12484:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12486:	       movea.l 12(sp),a0
   1248a:	       move.l 24(a0),d0
   1248e:	       move.l d0,-(sp)
   12490:	       pea 7 <_start+0x7>
   12494:	       move.l sp,d0
   12496:	       addq.l #8,d0
   12498:	       move.l d0,-(sp)
   1249a:	       jsr 15a9e <getValueType>
   124a0:	       lea 12(sp),sp
   124a4:	       tst.w d0
   124a6:	   ,-- bne.s 124ac <builtIn_stopCharacter+0x36>
   124a8:	   |   moveq #1,d0
   124aa:	,--|-- bra.s 124e4 <builtIn_stopCharacter+0x6e>
	trimStack (&fun -> stack);
   124ac:	|  '-> moveq #24,d0
   124ae:	|      add.l 12(sp),d0
   124b2:	|      move.l d0,-(sp)
   124b4:	|      jsr 16422 <trimStack>
   124ba:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   124bc:	|      move.l (sp),d0
   124be:	|      move.l d0,-(sp)
   124c0:	|      jsr c7ba <stopPerson>
   124c6:	|      addq.l #4,sp
   124c8:	|      movea.w d0,a0
   124ca:	|      moveq #28,d0
   124cc:	|      add.l 12(sp),d0
   124d0:	|      move.l a0,-(sp)
   124d2:	|      pea 1 <_start+0x1>
   124d6:	|      move.l d0,-(sp)
   124d8:	|      jsr 16390 <setVariable>
   124de:	|      lea 12(sp),sp
	return BR_CONTINUE;
   124e2:	|      moveq #2,d0
}
   124e4:	'----> addq.l #4,sp
   124e6:	       rts

000124e8 <builtIn_pasteCharacter>:

builtIn(pasteCharacter)
{
	KPrintF("running pasteCharacter\n");
   124e8:	pea 1b638 <PutChar+0x2618>
   124ee:	jsr 1857e <KPrintF>
   124f4:	addq.l #4,sp
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   124f6:	pea 1b650 <PutChar+0x2630>
   124fc:	jsr 1857e <KPrintF>
   12502:	addq.l #4,sp
	return BR_CONTINUE;
   12504:	moveq #2,d0
}
   12506:	rts

00012508 <builtIn_animate>:

builtIn(animate)
{
   12508:	       subq.l #8,sp
	KPrintF("running animate\n");
   1250a:	       pea 1b66e <PutChar+0x264e>
   12510:	       jsr 1857e <KPrintF>
   12516:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   12518:	       movea.l 16(sp),a0
   1251c:	       move.l 24(a0),d0
   12520:	       move.l d0,-(sp)
   12522:	       jsr 15f76 <getAnimationFromVar>
   12528:	       addq.l #4,sp
   1252a:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1252e:	   ,-- bne.s 12534 <builtIn_animate+0x2c>
   12530:	   |   moveq #1,d0
   12532:	,--|-- bra.s 125b2 <builtIn_animate+0xaa>
	trimStack (&fun -> stack);
   12534:	|  '-> moveq #24,d0
   12536:	|      add.l 16(sp),d0
   1253a:	|      move.l d0,-(sp)
   1253c:	|      jsr 16422 <trimStack>
   12542:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12544:	|      movea.l 16(sp),a0
   12548:	|      move.l 24(a0),d0
   1254c:	|      move.l d0,-(sp)
   1254e:	|      pea 7 <_start+0x7>
   12552:	|      move.l sp,d0
   12554:	|      addq.l #8,d0
   12556:	|      move.l d0,-(sp)
   12558:	|      jsr 15a9e <getValueType>
   1255e:	|      lea 12(sp),sp
   12562:	|      tst.w d0
   12564:	|  ,-- bne.s 1256a <builtIn_animate+0x62>
   12566:	|  |   moveq #1,d0
   12568:	+--|-- bra.s 125b2 <builtIn_animate+0xaa>
	trimStack (&fun -> stack);
   1256a:	|  '-> moveq #24,d0
   1256c:	|      add.l 16(sp),d0
   12570:	|      move.l d0,-(sp)
   12572:	|      jsr 16422 <trimStack>
   12578:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1257a:	|      move.l (sp),d0
   1257c:	|      move.l 4(sp),-(sp)
   12580:	|      move.l d0,-(sp)
   12582:	|      jsr 9e88 <animatePerson>
   12588:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   1258a:	|      move.l 4(sp),-(sp)
   1258e:	|      jsr c80e <timeForAnim>
   12594:	|      addq.l #4,sp
   12596:	|      move.l d0,d1
   12598:	|      moveq #28,d0
   1259a:	|      add.l 16(sp),d0
   1259e:	|      move.l d1,-(sp)
   125a0:	|      pea 1 <_start+0x1>
   125a4:	|      move.l d0,-(sp)
   125a6:	|      jsr 16390 <setVariable>
   125ac:	|      lea 12(sp),sp
	return BR_CONTINUE;
   125b0:	|      moveq #2,d0
}
   125b2:	'----> addq.l #8,sp
   125b4:	       rts

000125b6 <builtIn_setCostume>:

builtIn(setCostume)
{
   125b6:	       subq.l #8,sp
	KPrintF("running setCostume\n");
   125b8:	       pea 1b67f <PutChar+0x265f>
   125be:	       jsr 1857e <KPrintF>
   125c4:	       addq.l #4,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   125c6:	       movea.l 16(sp),a0
   125ca:	       move.l 24(a0),d0
   125ce:	       move.l d0,-(sp)
   125d0:	       jsr 1574a <getCostumeFromVar>
   125d6:	       addq.l #4,sp
   125d8:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   125dc:	   ,-- bne.s 125e2 <builtIn_setCostume+0x2c>
   125de:	   |   moveq #1,d0
   125e0:	,--|-- bra.s 1263a <builtIn_setCostume+0x84>
	trimStack (&fun -> stack);
   125e2:	|  '-> moveq #24,d0
   125e4:	|      add.l 16(sp),d0
   125e8:	|      move.l d0,-(sp)
   125ea:	|      jsr 16422 <trimStack>
   125f0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125f2:	|      movea.l 16(sp),a0
   125f6:	|      move.l 24(a0),d0
   125fa:	|      move.l d0,-(sp)
   125fc:	|      pea 7 <_start+0x7>
   12600:	|      move.l sp,d0
   12602:	|      addq.l #8,d0
   12604:	|      move.l d0,-(sp)
   12606:	|      jsr 15a9e <getValueType>
   1260c:	|      lea 12(sp),sp
   12610:	|      tst.w d0
   12612:	|  ,-- bne.s 12618 <builtIn_setCostume+0x62>
   12614:	|  |   moveq #1,d0
   12616:	+--|-- bra.s 1263a <builtIn_setCostume+0x84>
	trimStack (&fun -> stack);
   12618:	|  '-> moveq #24,d0
   1261a:	|      add.l 16(sp),d0
   1261e:	|      move.l d0,-(sp)
   12620:	|      jsr 16422 <trimStack>
   12626:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   12628:	|      move.l (sp),d0
   1262a:	|      move.l 4(sp),-(sp)
   1262e:	|      move.l d0,-(sp)
   12630:	|      jsr 9ed2 <animatePersonUsingPersona>
   12636:	|      addq.l #8,sp
	return BR_CONTINUE;
   12638:	|      moveq #2,d0
}
   1263a:	'----> addq.l #8,sp
   1263c:	       rts

0001263e <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   1263e:	       subq.l #8,sp
	KPrintF("running floatCharacter\n");
   12640:	       pea 1b693 <PutChar+0x2673>
   12646:	       jsr 1857e <KPrintF>
   1264c:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1264e:	       movea.l 16(sp),a0
   12652:	       move.l 24(a0),d0
   12656:	       move.l d0,-(sp)
   12658:	       pea 1 <_start+0x1>
   1265c:	       move.l sp,d0
   1265e:	       addq.l #8,d0
   12660:	       move.l d0,-(sp)
   12662:	       jsr 15a9e <getValueType>
   12668:	       lea 12(sp),sp
   1266c:	       tst.w d0
   1266e:	   ,-- bne.s 12674 <builtIn_floatCharacter+0x36>
   12670:	   |   moveq #1,d0
   12672:	,--|-- bra.s 126e8 <builtIn_floatCharacter+0xaa>
	trimStack (&fun -> stack);
   12674:	|  '-> moveq #24,d0
   12676:	|      add.l 16(sp),d0
   1267a:	|      move.l d0,-(sp)
   1267c:	|      jsr 16422 <trimStack>
   12682:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12684:	|      movea.l 16(sp),a0
   12688:	|      move.l 24(a0),d0
   1268c:	|      move.l d0,-(sp)
   1268e:	|      pea 7 <_start+0x7>
   12692:	|      moveq #12,d0
   12694:	|      add.l sp,d0
   12696:	|      move.l d0,-(sp)
   12698:	|      jsr 15a9e <getValueType>
   1269e:	|      lea 12(sp),sp
   126a2:	|      tst.w d0
   126a4:	|  ,-- bne.s 126aa <builtIn_floatCharacter+0x6c>
   126a6:	|  |   moveq #1,d0
   126a8:	+--|-- bra.s 126e8 <builtIn_floatCharacter+0xaa>
	trimStack (&fun -> stack);
   126aa:	|  '-> moveq #24,d0
   126ac:	|      add.l 16(sp),d0
   126b0:	|      move.l d0,-(sp)
   126b2:	|      jsr 16422 <trimStack>
   126b8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   126ba:	|      move.l 4(sp),d1
   126be:	|      move.l (sp),d0
   126c0:	|      move.l d1,-(sp)
   126c2:	|      move.l d0,-(sp)
   126c4:	|      jsr b062 <floatCharacter>
   126ca:	|      addq.l #8,sp
   126cc:	|      movea.w d0,a0
   126ce:	|      moveq #28,d0
   126d0:	|      add.l 16(sp),d0
   126d4:	|      move.l a0,-(sp)
   126d6:	|      pea 1 <_start+0x1>
   126da:	|      move.l d0,-(sp)
   126dc:	|      jsr 16390 <setVariable>
   126e2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   126e6:	|      moveq #2,d0
}
   126e8:	'----> addq.l #8,sp
   126ea:	       rts

000126ec <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   126ec:	       subq.l #8,sp
	KPrintF("running setCharacterWalkSpeed\n");
   126ee:	       pea 1b6ab <talk.c.490538ff+0x3>
   126f4:	       jsr 1857e <KPrintF>
   126fa:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   126fc:	       movea.l 16(sp),a0
   12700:	       move.l 24(a0),d0
   12704:	       move.l d0,-(sp)
   12706:	       pea 1 <_start+0x1>
   1270a:	       move.l sp,d0
   1270c:	       addq.l #8,d0
   1270e:	       move.l d0,-(sp)
   12710:	       jsr 15a9e <getValueType>
   12716:	       lea 12(sp),sp
   1271a:	       tst.w d0
   1271c:	   ,-- bne.s 12722 <builtIn_setCharacterWalkSpeed+0x36>
   1271e:	   |   moveq #1,d0
   12720:	,--|-- bra.s 12796 <builtIn_setCharacterWalkSpeed+0xaa>
	trimStack (&fun -> stack);
   12722:	|  '-> moveq #24,d0
   12724:	|      add.l 16(sp),d0
   12728:	|      move.l d0,-(sp)
   1272a:	|      jsr 16422 <trimStack>
   12730:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12732:	|      movea.l 16(sp),a0
   12736:	|      move.l 24(a0),d0
   1273a:	|      move.l d0,-(sp)
   1273c:	|      pea 7 <_start+0x7>
   12740:	|      moveq #12,d0
   12742:	|      add.l sp,d0
   12744:	|      move.l d0,-(sp)
   12746:	|      jsr 15a9e <getValueType>
   1274c:	|      lea 12(sp),sp
   12750:	|      tst.w d0
   12752:	|  ,-- bne.s 12758 <builtIn_setCharacterWalkSpeed+0x6c>
   12754:	|  |   moveq #1,d0
   12756:	+--|-- bra.s 12796 <builtIn_setCharacterWalkSpeed+0xaa>
	trimStack (&fun -> stack);
   12758:	|  '-> moveq #24,d0
   1275a:	|      add.l 16(sp),d0
   1275e:	|      move.l d0,-(sp)
   12760:	|      jsr 16422 <trimStack>
   12766:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   12768:	|      move.l 4(sp),d1
   1276c:	|      move.l (sp),d0
   1276e:	|      move.l d1,-(sp)
   12770:	|      move.l d0,-(sp)
   12772:	|      jsr c622 <setCharacterWalkSpeed>
   12778:	|      addq.l #8,sp
   1277a:	|      movea.w d0,a0
   1277c:	|      moveq #28,d0
   1277e:	|      add.l 16(sp),d0
   12782:	|      move.l a0,-(sp)
   12784:	|      pea 1 <_start+0x1>
   12788:	|      move.l d0,-(sp)
   1278a:	|      jsr 16390 <setVariable>
   12790:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12794:	|      moveq #2,d0
}
   12796:	'----> addq.l #8,sp
   12798:	       rts

0001279a <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   1279a:	       subq.l #8,sp
	KPrintF("running turnCharacter\n");
   1279c:	       pea 1b6ca <talk.c.490538ff+0x22>
   127a2:	       jsr 1857e <KPrintF>
   127a8:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   127aa:	       movea.l 16(sp),a0
   127ae:	       move.l 24(a0),d0
   127b2:	       move.l d0,-(sp)
   127b4:	       pea 1 <_start+0x1>
   127b8:	       move.l sp,d0
   127ba:	       addq.l #8,d0
   127bc:	       move.l d0,-(sp)
   127be:	       jsr 15a9e <getValueType>
   127c4:	       lea 12(sp),sp
   127c8:	       tst.w d0
   127ca:	   ,-- bne.s 127d0 <builtIn_turnCharacter+0x36>
   127cc:	   |   moveq #1,d0
   127ce:	,--|-- bra.s 12844 <builtIn_turnCharacter+0xaa>
	trimStack (&fun -> stack);
   127d0:	|  '-> moveq #24,d0
   127d2:	|      add.l 16(sp),d0
   127d6:	|      move.l d0,-(sp)
   127d8:	|      jsr 16422 <trimStack>
   127de:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   127e0:	|      movea.l 16(sp),a0
   127e4:	|      move.l 24(a0),d0
   127e8:	|      move.l d0,-(sp)
   127ea:	|      pea 7 <_start+0x7>
   127ee:	|      moveq #12,d0
   127f0:	|      add.l sp,d0
   127f2:	|      move.l d0,-(sp)
   127f4:	|      jsr 15a9e <getValueType>
   127fa:	|      lea 12(sp),sp
   127fe:	|      tst.w d0
   12800:	|  ,-- bne.s 12806 <builtIn_turnCharacter+0x6c>
   12802:	|  |   moveq #1,d0
   12804:	+--|-- bra.s 12844 <builtIn_turnCharacter+0xaa>
	trimStack (&fun -> stack);
   12806:	|  '-> moveq #24,d0
   12808:	|      add.l 16(sp),d0
   1280c:	|      move.l d0,-(sp)
   1280e:	|      jsr 16422 <trimStack>
   12814:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   12816:	|      move.l (sp),d1
   12818:	|      move.l 4(sp),d0
   1281c:	|      move.l d1,-(sp)
   1281e:	|      move.l d0,-(sp)
   12820:	|      jsr c8c6 <turnPersonToFace>
   12826:	|      addq.l #8,sp
   12828:	|      movea.w d0,a0
   1282a:	|      moveq #28,d0
   1282c:	|      add.l 16(sp),d0
   12830:	|      move.l a0,-(sp)
   12832:	|      pea 1 <_start+0x1>
   12836:	|      move.l d0,-(sp)
   12838:	|      jsr 16390 <setVariable>
   1283e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12842:	|      moveq #2,d0
}
   12844:	'----> addq.l #8,sp
   12846:	       rts

00012848 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   12848:	       subq.l #8,sp
	KPrintF("running setCharacterExtra\n");
   1284a:	       pea 1b6e1 <talk.c.490538ff+0x39>
   12850:	       jsr 1857e <KPrintF>
   12856:	       addq.l #4,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12858:	       movea.l 16(sp),a0
   1285c:	       move.l 24(a0),d0
   12860:	       move.l d0,-(sp)
   12862:	       pea 1 <_start+0x1>
   12866:	       move.l sp,d0
   12868:	       addq.l #8,d0
   1286a:	       move.l d0,-(sp)
   1286c:	       jsr 15a9e <getValueType>
   12872:	       lea 12(sp),sp
   12876:	       tst.w d0
   12878:	   ,-- bne.s 1287e <builtIn_setCharacterExtra+0x36>
   1287a:	   |   moveq #1,d0
   1287c:	,--|-- bra.s 128f2 <builtIn_setCharacterExtra+0xaa>
	trimStack (&fun -> stack);
   1287e:	|  '-> moveq #24,d0
   12880:	|      add.l 16(sp),d0
   12884:	|      move.l d0,-(sp)
   12886:	|      jsr 16422 <trimStack>
   1288c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1288e:	|      movea.l 16(sp),a0
   12892:	|      move.l 24(a0),d0
   12896:	|      move.l d0,-(sp)
   12898:	|      pea 7 <_start+0x7>
   1289c:	|      moveq #12,d0
   1289e:	|      add.l sp,d0
   128a0:	|      move.l d0,-(sp)
   128a2:	|      jsr 15a9e <getValueType>
   128a8:	|      lea 12(sp),sp
   128ac:	|      tst.w d0
   128ae:	|  ,-- bne.s 128b4 <builtIn_setCharacterExtra+0x6c>
   128b0:	|  |   moveq #1,d0
   128b2:	+--|-- bra.s 128f2 <builtIn_setCharacterExtra+0xaa>
	trimStack (&fun -> stack);
   128b4:	|  '-> moveq #24,d0
   128b6:	|      add.l 16(sp),d0
   128ba:	|      move.l d0,-(sp)
   128bc:	|      jsr 16422 <trimStack>
   128c2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   128c4:	|      move.l (sp),d1
   128c6:	|      move.l 4(sp),d0
   128ca:	|      move.l d1,-(sp)
   128cc:	|      move.l d0,-(sp)
   128ce:	|      jsr c650 <setPersonExtra>
   128d4:	|      addq.l #8,sp
   128d6:	|      movea.w d0,a0
   128d8:	|      moveq #28,d0
   128da:	|      add.l 16(sp),d0
   128de:	|      move.l a0,-(sp)
   128e0:	|      pea 1 <_start+0x1>
   128e4:	|      move.l d0,-(sp)
   128e6:	|      jsr 16390 <setVariable>
   128ec:	|      lea 12(sp),sp
	return BR_CONTINUE;
   128f0:	|      moveq #2,d0
}
   128f2:	'----> addq.l #8,sp
   128f4:	       rts

000128f6 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   128f6:	       subq.l #4,sp
	KPrintF("running removeCharacter\n");
   128f8:	       pea 1b6fc <talk.c.490538ff+0x54>
   128fe:	       jsr 1857e <KPrintF>
   12904:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12906:	       movea.l 12(sp),a0
   1290a:	       move.l 24(a0),d0
   1290e:	       move.l d0,-(sp)
   12910:	       pea 7 <_start+0x7>
   12914:	       move.l sp,d0
   12916:	       addq.l #8,d0
   12918:	       move.l d0,-(sp)
   1291a:	       jsr 15a9e <getValueType>
   12920:	       lea 12(sp),sp
   12924:	       tst.w d0
   12926:	   ,-- bne.s 1292c <builtIn_removeCharacter+0x36>
   12928:	   |   moveq #1,d0
   1292a:	,--|-- bra.s 1294a <builtIn_removeCharacter+0x54>
	trimStack (&fun -> stack);
   1292c:	|  '-> moveq #24,d0
   1292e:	|      add.l 12(sp),d0
   12932:	|      move.l d0,-(sp)
   12934:	|      jsr 16422 <trimStack>
   1293a:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   1293c:	|      move.l (sp),d0
   1293e:	|      move.l d0,-(sp)
   12940:	|      jsr b850 <removeOneCharacter>
   12946:	|      addq.l #4,sp
	return BR_CONTINUE;
   12948:	|      moveq #2,d0
}
   1294a:	'----> addq.l #4,sp
   1294c:	       rts

0001294e <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   1294e:	                lea -28(sp),sp
   12952:	                move.l d2,-(sp)
   12954:	                move.l 44(sp),d1
   12958:	                move.l 48(sp),d0
   1295c:	                move.w d1,d1
   1295e:	                move.w d1,6(sp)
   12962:	                move.w d0,d0
   12964:	                move.w d0,4(sp)
	switch (numParams) {
   12968:	                moveq #2,d0
   1296a:	                cmp.l 36(sp),d0
   1296e:	      ,-------- beq.w 12ab0 <moveChr+0x162>
   12972:	      |         moveq #3,d0
   12974:	      |         cmp.l 36(sp),d0
   12978:	,-----|-------- bne.w 12be4 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1297c:	|     |         movea.l 40(sp),a0
   12980:	|     |         move.l 24(a0),d0
   12984:	|     |         move.l d0,-(sp)
   12986:	|     |         pea 1 <_start+0x1>
   1298a:	|     |         lea 20(sp),a0
   1298e:	|     |         move.l a0,-(sp)
   12990:	|     |         jsr 15a9e <getValueType>
   12996:	|     |         lea 12(sp),sp
   1299a:	|     |         tst.w d0
   1299c:	|     |     ,-- bne.s 129a4 <moveChr+0x56>
   1299e:	|     |     |   moveq #1,d0
   129a0:	|  ,--|-----|-- bra.w 12bf4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   129a4:	|  |  |     '-> moveq #24,d0
   129a6:	|  |  |         add.l 40(sp),d0
   129aa:	|  |  |         move.l d0,-(sp)
   129ac:	|  |  |         jsr 16422 <trimStack>
   129b2:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   129b4:	|  |  |         movea.l 40(sp),a0
   129b8:	|  |  |         move.l 24(a0),d0
   129bc:	|  |  |         move.l d0,-(sp)
   129be:	|  |  |         pea 1 <_start+0x1>
   129c2:	|  |  |         lea 24(sp),a0
   129c6:	|  |  |         move.l a0,-(sp)
   129c8:	|  |  |         jsr 15a9e <getValueType>
   129ce:	|  |  |         lea 12(sp),sp
   129d2:	|  |  |         tst.w d0
   129d4:	|  |  |     ,-- bne.s 129dc <moveChr+0x8e>
   129d6:	|  |  |     |   moveq #1,d0
   129d8:	|  +--|-----|-- bra.w 12bf4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   129dc:	|  |  |     '-> moveq #24,d0
   129de:	|  |  |         add.l 40(sp),d0
   129e2:	|  |  |         move.l d0,-(sp)
   129e4:	|  |  |         jsr 16422 <trimStack>
   129ea:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   129ec:	|  |  |         movea.l 40(sp),a0
   129f0:	|  |  |         move.l 24(a0),d0
   129f4:	|  |  |         move.l d0,-(sp)
   129f6:	|  |  |         pea 7 <_start+0x7>
   129fa:	|  |  |         lea 16(sp),a0
   129fe:	|  |  |         move.l a0,-(sp)
   12a00:	|  |  |         jsr 15a9e <getValueType>
   12a06:	|  |  |         lea 12(sp),sp
   12a0a:	|  |  |         tst.w d0
   12a0c:	|  |  |     ,-- bne.s 12a14 <moveChr+0xc6>
   12a0e:	|  |  |     |   moveq #1,d0
   12a10:	|  +--|-----|-- bra.w 12bf4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12a14:	|  |  |     '-> moveq #24,d0
   12a16:	|  |  |         add.l 40(sp),d0
   12a1a:	|  |  |         move.l d0,-(sp)
   12a1c:	|  |  |         jsr 16422 <trimStack>
   12a22:	|  |  |         addq.l #4,sp

			if (force) {
   12a24:	|  |  |         tst.w 6(sp)
   12a28:	|  |  |     ,-- beq.s 12a58 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   12a2a:	|  |  |     |   movea.l 8(sp),a0
   12a2e:	|  |  |     |   move.l 12(sp),d1
   12a32:	|  |  |     |   move.l 16(sp),d0
   12a36:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb28cd>
   12a3a:	|  |  |     |   move.l 44(sp),-(sp)
   12a3e:	|  |  |     |   move.l a0,-(sp)
   12a40:	|  |  |     |   move.l d1,-(sp)
   12a42:	|  |  |     |   move.l d0,-(sp)
   12a44:	|  |  |     |   jsr b086 <forceWalkingPerson>
   12a4a:	|  |  |     |   lea 20(sp),sp
   12a4e:	|  |  |     |   tst.w d0
   12a50:	|  |  |  ,--|-- beq.s 12aaa <moveChr+0x15c>
   12a52:	|  |  |  |  |   moveq #3,d0
   12a54:	|  +--|--|--|-- bra.w 12bf4 <moveChr+0x2a6>
			} else if (immediate) {
   12a58:	|  |  |  |  '-> tst.w 4(sp)
   12a5c:	|  |  |  |  ,-- beq.s 12a7c <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   12a5e:	|  |  |  |  |   movea.l 8(sp),a0
   12a62:	|  |  |  |  |   move.l 12(sp),d1
   12a66:	|  |  |  |  |   move.l 16(sp),d0
   12a6a:	|  |  |  |  |   move.l a0,-(sp)
   12a6c:	|  |  |  |  |   move.l d1,-(sp)
   12a6e:	|  |  |  |  |   move.l d0,-(sp)
   12a70:	|  |  |  |  |   jsr b39c <jumpPerson>
   12a76:	|  |  |  |  |   lea 12(sp),sp
   12a7a:	|  |  |  +--|-- bra.s 12aaa <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   12a7c:	|  |  |  |  '-> movea.l 8(sp),a0
   12a80:	|  |  |  |      move.l 12(sp),d1
   12a84:	|  |  |  |      move.l 16(sp),d0
   12a88:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb28cd>
   12a8c:	|  |  |  |      move.l 44(sp),-(sp)
   12a90:	|  |  |  |      move.l a0,-(sp)
   12a92:	|  |  |  |      move.l d1,-(sp)
   12a94:	|  |  |  |      move.l d0,-(sp)
   12a96:	|  |  |  |      jsr b56c <makeWalkingPerson>
   12a9c:	|  |  |  |      lea 20(sp),sp
   12aa0:	|  |  |  |      tst.w d0
   12aa2:	|  |  |  +----- beq.s 12aaa <moveChr+0x15c>
   12aa4:	|  |  |  |      moveq #3,d0
   12aa6:	|  +--|--|----- bra.w 12bf4 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   12aaa:	|  |  |  '----> moveq #2,d0
   12aac:	|  +--|-------- bra.w 12bf4 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12ab0:	|  |  '-------> movea.l 40(sp),a0
   12ab4:	|  |            move.l 24(a0),d0
   12ab8:	|  |            move.l d0,-(sp)
   12aba:	|  |            pea 7 <_start+0x7>
   12abe:	|  |            moveq #32,d0
   12ac0:	|  |            add.l sp,d0
   12ac2:	|  |            move.l d0,-(sp)
   12ac4:	|  |            jsr 15a9e <getValueType>
   12aca:	|  |            lea 12(sp),sp
   12ace:	|  |            tst.w d0
   12ad0:	|  |        ,-- bne.s 12ad8 <moveChr+0x18a>
   12ad2:	|  |        |   moveq #1,d0
   12ad4:	|  +--------|-- bra.w 12bf4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12ad8:	|  |        '-> moveq #24,d0
   12ada:	|  |            add.l 40(sp),d0
   12ade:	|  |            move.l d0,-(sp)
   12ae0:	|  |            jsr 16422 <trimStack>
   12ae6:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12ae8:	|  |            movea.l 40(sp),a0
   12aec:	|  |            move.l 24(a0),d0
   12af0:	|  |            move.l d0,-(sp)
   12af2:	|  |            pea 7 <_start+0x7>
   12af6:	|  |            lea 28(sp),a0
   12afa:	|  |            move.l a0,-(sp)
   12afc:	|  |            jsr 15a9e <getValueType>
   12b02:	|  |            lea 12(sp),sp
   12b06:	|  |            tst.w d0
   12b08:	|  |        ,-- bne.s 12b10 <moveChr+0x1c2>
   12b0a:	|  |        |   moveq #1,d0
   12b0c:	|  +--------|-- bra.w 12bf4 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12b10:	|  |        '-> moveq #24,d0
   12b12:	|  |            add.l 40(sp),d0
   12b16:	|  |            move.l d0,-(sp)
   12b18:	|  |            jsr 16422 <trimStack>
   12b1e:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   12b20:	|  |            move.l 24(sp),d0
   12b24:	|  |            move.l d0,-(sp)
   12b26:	|  |            jsr 16d60 <getRegionForObject>
   12b2c:	|  |            addq.l #4,sp
   12b2e:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   12b32:	|  |        ,-- bne.s 12b3a <moveChr+0x1ec>
   12b34:	|  |        |   moveq #2,d0
   12b36:	|  +--------|-- bra.w 12bf4 <moveChr+0x2a6>

			if (force)
   12b3a:	|  |        '-> tst.w 6(sp)
   12b3e:	|  |        ,-- beq.s 12b7a <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   12b40:	|  |        |   movea.l 28(sp),a0
   12b44:	|  |        |   move.l 24(a0),d2
   12b48:	|  |        |   movea.l 20(sp),a1
   12b4c:	|  |        |   movea.l 28(sp),a0
   12b50:	|  |        |   move.l 20(a0),d1
   12b54:	|  |        |   movea.l 28(sp),a0
   12b58:	|  |        |   move.l 16(a0),d0
   12b5c:	|  |        |   move.l d2,-(sp)
   12b5e:	|  |        |   move.l 44(sp),-(sp)
   12b62:	|  |        |   move.l a1,-(sp)
   12b64:	|  |        |   move.l d1,-(sp)
   12b66:	|  |        |   move.l d0,-(sp)
   12b68:	|  |        |   jsr b086 <forceWalkingPerson>
   12b6e:	|  |        |   lea 20(sp),sp
   12b72:	|  |        |   tst.w d0
   12b74:	|  |     ,--|-- beq.s 12be0 <moveChr+0x292>
   12b76:	|  |     |  |   moveq #3,d0
   12b78:	|  +-----|--|-- bra.s 12bf4 <moveChr+0x2a6>
			}
			else if (immediate)
   12b7a:	|  |     |  '-> tst.w 4(sp)
   12b7e:	|  |     |  ,-- beq.s 12ba6 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   12b80:	|  |     |  |   movea.l 20(sp),a1
   12b84:	|  |     |  |   movea.l 28(sp),a0
   12b88:	|  |     |  |   move.l 20(a0),d1
   12b8c:	|  |     |  |   movea.l 28(sp),a0
   12b90:	|  |     |  |   move.l 16(a0),d0
   12b94:	|  |     |  |   move.l a1,-(sp)
   12b96:	|  |     |  |   move.l d1,-(sp)
   12b98:	|  |     |  |   move.l d0,-(sp)
   12b9a:	|  |     |  |   jsr b39c <jumpPerson>
   12ba0:	|  |     |  |   lea 12(sp),sp
   12ba4:	|  |     +--|-- bra.s 12be0 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   12ba6:	|  |     |  '-> movea.l 28(sp),a0
   12baa:	|  |     |      move.l 24(a0),d2
   12bae:	|  |     |      movea.l 20(sp),a1
   12bb2:	|  |     |      movea.l 28(sp),a0
   12bb6:	|  |     |      move.l 20(a0),d1
   12bba:	|  |     |      movea.l 28(sp),a0
   12bbe:	|  |     |      move.l 16(a0),d0
   12bc2:	|  |     |      move.l d2,-(sp)
   12bc4:	|  |     |      move.l 44(sp),-(sp)
   12bc8:	|  |     |      move.l a1,-(sp)
   12bca:	|  |     |      move.l d1,-(sp)
   12bcc:	|  |     |      move.l d0,-(sp)
   12bce:	|  |     |      jsr b56c <makeWalkingPerson>
   12bd4:	|  |     |      lea 20(sp),sp
   12bd8:	|  |     |      tst.w d0
   12bda:	|  |     +----- beq.s 12be0 <moveChr+0x292>
   12bdc:	|  |     |      moveq #3,d0
   12bde:	|  +-----|----- bra.s 12bf4 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   12be0:	|  |     '----> moveq #2,d0
   12be2:	|  +----------- bra.s 12bf4 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   12be4:	'--|----------> pea 1b715 <talk.c.490538ff+0x6d>
   12bea:	   |            jsr 1857e <KPrintF>
   12bf0:	   |            addq.l #4,sp
			return BR_ERROR;
   12bf2:	   |            moveq #1,d0
	}
}
   12bf4:	   '----------> move.l (sp)+,d2
   12bf6:	                lea 28(sp),sp
   12bfa:	                rts

00012bfc <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	KPrintF("running moveCharacter\n");
   12bfc:	pea 1b74b <talk.c.490538ff+0xa3>
   12c02:	jsr 1857e <KPrintF>
   12c08:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   12c0a:	clr.l -(sp)
   12c0c:	clr.l -(sp)
   12c0e:	move.l 16(sp),-(sp)
   12c12:	move.l 16(sp),-(sp)
   12c16:	jsr 1294e <moveChr>
   12c1c:	lea 16(sp),sp
}
   12c20:	rts

00012c22 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	KPrintF("running forceCharacter\n");
   12c22:	pea 1b762 <talk.c.490538ff+0xba>
   12c28:	jsr 1857e <KPrintF>
   12c2e:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   12c30:	clr.l -(sp)
   12c32:	pea 1 <_start+0x1>
   12c36:	move.l 16(sp),-(sp)
   12c3a:	move.l 16(sp),-(sp)
   12c3e:	jsr 1294e <moveChr>
   12c44:	lea 16(sp),sp
}
   12c48:	rts

00012c4a <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	KPrintF("running jumpCharacter\n");
   12c4a:	pea 1b77a <talk.c.490538ff+0xd2>
   12c50:	jsr 1857e <KPrintF>
   12c56:	addq.l #4,sp
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   12c58:	pea 1 <_start+0x1>
   12c5c:	clr.l -(sp)
   12c5e:	move.l 16(sp),-(sp)
   12c62:	move.l 16(sp),-(sp)
   12c66:	jsr 1294e <moveChr>
   12c6c:	lea 16(sp),sp
}
   12c70:	rts

00012c72 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	KPrintF("running clearStatus\n");
   12c72:	pea 1b791 <talk.c.490538ff+0xe9>
   12c78:	jsr 1857e <KPrintF>
   12c7e:	addq.l #4,sp
	UNUSEDALL
	clearStatusBar ();
   12c80:	jsr 8bd6 <clearStatusBar>
	return BR_CONTINUE;
   12c86:	moveq #2,d0
}
   12c88:	rts

00012c8a <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	KPrintF("running removeLastStatus\n");
   12c8a:	pea 1b7a6 <talk.c.490538ff+0xfe>
   12c90:	jsr 1857e <KPrintF>
   12c96:	addq.l #4,sp
	UNUSEDALL
	killLastStatus ();
   12c98:	jsr 8c7e <killLastStatus>
	return BR_CONTINUE;
   12c9e:	moveq #2,d0
}
   12ca0:	rts

00012ca2 <builtIn_addStatus>:

builtIn(addStatus)
{
	KPrintF("running addStatus\n");
   12ca2:	pea 1b7c0 <talk.c.490538ff+0x118>
   12ca8:	jsr 1857e <KPrintF>
   12cae:	addq.l #4,sp
	UNUSEDALL
	addStatusBar ();
   12cb0:	jsr 8b6c <addStatusBar>
	return BR_CONTINUE;
   12cb6:	moveq #2,d0
}
   12cb8:	rts

00012cba <builtIn_statusText>:

builtIn(statusText)
{
   12cba:	       subq.l #8,sp
   12cbc:	       move.l a6,-(sp)
	KPrintF("running statusText\n");
   12cbe:	       pea 1b7d3 <talk.c.490538ff+0x12b>
   12cc4:	       jsr 1857e <KPrintF>
   12cca:	       addq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   12ccc:	       movea.l 20(sp),a0
   12cd0:	       move.l 24(a0),d0
   12cd4:	       move.l d0,-(sp)
   12cd6:	       jsr 16074 <getTextFromAnyVar>
   12cdc:	       addq.l #4,sp
   12cde:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   12ce2:	   ,-- bne.s 12ce8 <builtIn_statusText+0x2e>
   12ce4:	   |   moveq #1,d0
   12ce6:	,--|-- bra.s 12d1c <builtIn_statusText+0x62>
	trimStack(&fun->stack);
   12ce8:	|  '-> moveq #24,d0
   12cea:	|      add.l 20(sp),d0
   12cee:	|      move.l d0,-(sp)
   12cf0:	|      jsr 16422 <trimStack>
   12cf6:	|      addq.l #4,sp
	setStatusBar(newText);
   12cf8:	|      move.l 8(sp),-(sp)
   12cfc:	|      jsr 8efe <setStatusBar>
   12d02:	|      addq.l #4,sp
	FreeVec(newText);
   12d04:	|      move.l 8(sp),4(sp)
   12d0a:	|      move.l 1e8c0 <SysBase>,d0
   12d10:	|      movea.l d0,a6
   12d12:	|      movea.l 4(sp),a1
   12d16:	|      jsr -690(a6)
	return BR_CONTINUE;
   12d1a:	|      moveq #2,d0
}
   12d1c:	'----> movea.l (sp)+,a6
   12d1e:	       addq.l #8,sp
   12d20:	       rts

00012d22 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   12d22:	       subq.l #4,sp
	KPrintF("running lightStatus\n");
   12d24:	       pea 1b7e7 <talk.c.490538ff+0x13f>
   12d2a:	       jsr 1857e <KPrintF>
   12d30:	       addq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d32:	       movea.l 12(sp),a0
   12d36:	       move.l 24(a0),d0
   12d3a:	       move.l d0,-(sp)
   12d3c:	       pea 1 <_start+0x1>
   12d40:	       move.l sp,d0
   12d42:	       addq.l #8,d0
   12d44:	       move.l d0,-(sp)
   12d46:	       jsr 15a9e <getValueType>
   12d4c:	       lea 12(sp),sp
   12d50:	       tst.w d0
   12d52:	   ,-- bne.s 12d58 <builtIn_lightStatus+0x36>
   12d54:	   |   moveq #1,d0
   12d56:	,--|-- bra.s 12d76 <builtIn_lightStatus+0x54>
	trimStack (&fun -> stack);
   12d58:	|  '-> moveq #24,d0
   12d5a:	|      add.l 12(sp),d0
   12d5e:	|      move.l d0,-(sp)
   12d60:	|      jsr 16422 <trimStack>
   12d66:	|      addq.l #4,sp
	setLitStatus (val);
   12d68:	|      move.l (sp),d0
   12d6a:	|      move.l d0,-(sp)
   12d6c:	|      jsr 8eee <setLitStatus>
   12d72:	|      addq.l #4,sp
	return BR_CONTINUE;
   12d74:	|      moveq #2,d0
}
   12d76:	'----> addq.l #4,sp
   12d78:	       rts

00012d7a <builtIn_positionStatus>:

builtIn(positionStatus)
{
   12d7a:	       subq.l #8,sp
	KPrintF("running positionStatus\n");
   12d7c:	       pea 1b7fc <talk.c.490538ff+0x154>
   12d82:	       jsr 1857e <KPrintF>
   12d88:	       addq.l #4,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d8a:	       movea.l 16(sp),a0
   12d8e:	       move.l 24(a0),d0
   12d92:	       move.l d0,-(sp)
   12d94:	       pea 1 <_start+0x1>
   12d98:	       move.l sp,d0
   12d9a:	       addq.l #8,d0
   12d9c:	       move.l d0,-(sp)
   12d9e:	       jsr 15a9e <getValueType>
   12da4:	       lea 12(sp),sp
   12da8:	       tst.w d0
   12daa:	   ,-- bne.s 12db0 <builtIn_positionStatus+0x36>
   12dac:	   |   moveq #1,d0
   12dae:	,--|-- bra.s 12e0a <builtIn_positionStatus+0x90>
	trimStack (&fun -> stack);
   12db0:	|  '-> moveq #24,d0
   12db2:	|      add.l 16(sp),d0
   12db6:	|      move.l d0,-(sp)
   12db8:	|      jsr 16422 <trimStack>
   12dbe:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12dc0:	|      movea.l 16(sp),a0
   12dc4:	|      move.l 24(a0),d0
   12dc8:	|      move.l d0,-(sp)
   12dca:	|      pea 1 <_start+0x1>
   12dce:	|      moveq #12,d0
   12dd0:	|      add.l sp,d0
   12dd2:	|      move.l d0,-(sp)
   12dd4:	|      jsr 15a9e <getValueType>
   12dda:	|      lea 12(sp),sp
   12dde:	|      tst.w d0
   12de0:	|  ,-- bne.s 12de6 <builtIn_positionStatus+0x6c>
   12de2:	|  |   moveq #1,d0
   12de4:	+--|-- bra.s 12e0a <builtIn_positionStatus+0x90>
	trimStack (&fun -> stack);
   12de6:	|  '-> moveq #24,d0
   12de8:	|      add.l 16(sp),d0
   12dec:	|      move.l d0,-(sp)
   12dee:	|      jsr 16422 <trimStack>
   12df4:	|      addq.l #4,sp
	positionStatus (x, y);
   12df6:	|      move.l (sp),d1
   12df8:	|      move.l 4(sp),d0
   12dfc:	|      move.l d1,-(sp)
   12dfe:	|      move.l d0,-(sp)
   12e00:	|      jsr 8ce0 <positionStatus>
   12e06:	|      addq.l #8,sp
	return BR_CONTINUE;
   12e08:	|      moveq #2,d0
}
   12e0a:	'----> addq.l #8,sp
   12e0c:	       rts

00012e0e <builtIn_alignStatus>:

builtIn(alignStatus)
{
   12e0e:	       subq.l #4,sp
	KPrintF("running alignStatus\n");
   12e10:	       pea 1b814 <talk.c.490538ff+0x16c>
   12e16:	       jsr 1857e <KPrintF>
   12e1c:	       addq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e1e:	       movea.l 12(sp),a0
   12e22:	       move.l 24(a0),d0
   12e26:	       move.l d0,-(sp)
   12e28:	       pea 1 <_start+0x1>
   12e2c:	       move.l sp,d0
   12e2e:	       addq.l #8,d0
   12e30:	       move.l d0,-(sp)
   12e32:	       jsr 15a9e <getValueType>
   12e38:	       lea 12(sp),sp
   12e3c:	       tst.w d0
   12e3e:	   ,-- bne.s 12e44 <builtIn_alignStatus+0x36>
   12e40:	   |   moveq #1,d0
   12e42:	,--|-- bra.s 12e64 <builtIn_alignStatus+0x56>
	trimStack (&fun -> stack);
   12e44:	|  '-> moveq #24,d0
   12e46:	|      add.l 12(sp),d0
   12e4a:	|      move.l d0,-(sp)
   12e4c:	|      jsr 16422 <trimStack>
   12e52:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   12e54:	|      move.l (sp),d0
   12e56:	|      movea.l 1e232 <nowStatus>,a0
   12e5c:	|      move.l d0,d0
   12e5e:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   12e62:	|      moveq #2,d0
}
   12e64:	'----> addq.l #4,sp
   12e66:	       rts

00012e68 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   12e68:	             tst.l 4(sp)
   12e6c:	         ,-- beq.s 12e78 <getFuncNumForCallback+0x10>
   12e6e:	         |   moveq #1,d0
   12e70:	         |   cmp.l 4(sp),d0
   12e74:	      ,--|-- beq.s 12e80 <getFuncNumForCallback+0x18>
   12e76:	   ,--|--|-- bra.s 12eb6 <getFuncNumForCallback+0x4e>
		case 0:
			*functionNum = 0;
   12e78:	   |  |  '-> movea.l 12(sp),a0
   12e7c:	   |  |      clr.l (a0)
			break;
   12e7e:	,--|--|----- bra.s 12ec8 <getFuncNumForCallback+0x60>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   12e80:	|  |  '----> movea.l 8(sp),a0
   12e84:	|  |         move.l 24(a0),d0
   12e88:	|  |         move.l d0,-(sp)
   12e8a:	|  |         pea 2 <_start+0x2>
   12e8e:	|  |         move.l 20(sp),-(sp)
   12e92:	|  |         jsr 15a9e <getValueType>
   12e98:	|  |         lea 12(sp),sp
   12e9c:	|  |         tst.w d0
   12e9e:	|  |     ,-- bne.s 12ea4 <getFuncNumForCallback+0x3c>
   12ea0:	|  |     |   clr.w d0
   12ea2:	|  |  ,--|-- bra.s 12eca <getFuncNumForCallback+0x62>
			trimStack (&fun -> stack);
   12ea4:	|  |  |  '-> moveq #24,d0
   12ea6:	|  |  |      add.l 8(sp),d0
   12eaa:	|  |  |      move.l d0,-(sp)
   12eac:	|  |  |      jsr 16422 <trimStack>
   12eb2:	|  |  |      addq.l #4,sp
			break;
   12eb4:	+--|--|----- bra.s 12ec8 <getFuncNumForCallback+0x60>

		default:
			KPrintF ("Too many parameters.");
   12eb6:	|  '--|----> pea 1b829 <talk.c.490538ff+0x181>
   12ebc:	|     |      jsr 1857e <KPrintF>
   12ec2:	|     |      addq.l #4,sp
			return FALSE;
   12ec4:	|     |      clr.w d0
   12ec6:	|     +----- bra.s 12eca <getFuncNumForCallback+0x62>
	}
	return TRUE;
   12ec8:	'-----|----> moveq #1,d0
}
   12eca:	      '----> rts

00012ecc <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   12ecc:	       subq.l #4,sp
	KPrintF("running onLeftMouse\n");
   12ece:	       pea 1b83e <talk.c.490538ff+0x196>
   12ed4:	       jsr 1857e <KPrintF>
   12eda:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12edc:	       move.l sp,d0
   12ede:	       move.l d0,-(sp)
   12ee0:	       move.l 16(sp),-(sp)
   12ee4:	       move.l 16(sp),-(sp)
   12ee8:	       jsr 12e68 <getFuncNumForCallback>
   12eee:	       lea 12(sp),sp
   12ef2:	       tst.w d0
   12ef4:	,----- beq.s 12f04 <builtIn_onLeftMouse+0x38>
	{
		currentEvents -> leftMouseFunction = functionNum;
   12ef6:	|      movea.l 1e224 <currentEvents>,a0
   12efc:	|      move.l (sp),d0
   12efe:	|      move.l d0,(a0)
		return BR_CONTINUE;
   12f00:	|      moveq #2,d0
   12f02:	|  ,-- bra.s 12f06 <builtIn_onLeftMouse+0x3a>
	}
	return BR_ERROR;
   12f04:	'--|-> moveq #1,d0
}
   12f06:	   '-> addq.l #4,sp
   12f08:	       rts

00012f0a <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   12f0a:	       subq.l #4,sp
	KPrintF("running onLeftMouseUp\n");
   12f0c:	       pea 1b853 <talk.c.490538ff+0x1ab>
   12f12:	       jsr 1857e <KPrintF>
   12f18:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12f1a:	       move.l sp,d0
   12f1c:	       move.l d0,-(sp)
   12f1e:	       move.l 16(sp),-(sp)
   12f22:	       move.l 16(sp),-(sp)
   12f26:	       jsr 12e68 <getFuncNumForCallback>
   12f2c:	       lea 12(sp),sp
   12f30:	       tst.w d0
   12f32:	,----- beq.s 12f44 <builtIn_onLeftMouseUp+0x3a>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   12f34:	|      movea.l 1e224 <currentEvents>,a0
   12f3a:	|      move.l (sp),d0
   12f3c:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   12f40:	|      moveq #2,d0
   12f42:	|  ,-- bra.s 12f46 <builtIn_onLeftMouseUp+0x3c>
	}
	return BR_ERROR;
   12f44:	'--|-> moveq #1,d0
}
   12f46:	   '-> addq.l #4,sp
   12f48:	       rts

00012f4a <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   12f4a:	       subq.l #4,sp
	KPrintF("running onRightMouse\n");
   12f4c:	       pea 1b86a <talk.c.490538ff+0x1c2>
   12f52:	       jsr 1857e <KPrintF>
   12f58:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12f5a:	       move.l sp,d0
   12f5c:	       move.l d0,-(sp)
   12f5e:	       move.l 16(sp),-(sp)
   12f62:	       move.l 16(sp),-(sp)
   12f66:	       jsr 12e68 <getFuncNumForCallback>
   12f6c:	       lea 12(sp),sp
   12f70:	       tst.w d0
   12f72:	,----- beq.s 12f84 <builtIn_onRightMouse+0x3a>
	{
		currentEvents -> rightMouseFunction = functionNum;
   12f74:	|      movea.l 1e224 <currentEvents>,a0
   12f7a:	|      move.l (sp),d0
   12f7c:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   12f80:	|      moveq #2,d0
   12f82:	|  ,-- bra.s 12f86 <builtIn_onRightMouse+0x3c>
	}
	return BR_ERROR;
   12f84:	'--|-> moveq #1,d0
}
   12f86:	   '-> addq.l #4,sp
   12f88:	       rts

00012f8a <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   12f8a:	       subq.l #4,sp
	KPrintF("running onRightMouseUp\n");
   12f8c:	       pea 1b880 <talk.c.490538ff+0x1d8>
   12f92:	       jsr 1857e <KPrintF>
   12f98:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12f9a:	       move.l sp,d0
   12f9c:	       move.l d0,-(sp)
   12f9e:	       move.l 16(sp),-(sp)
   12fa2:	       move.l 16(sp),-(sp)
   12fa6:	       jsr 12e68 <getFuncNumForCallback>
   12fac:	       lea 12(sp),sp
   12fb0:	       tst.w d0
   12fb2:	,----- beq.s 12fc4 <builtIn_onRightMouseUp+0x3a>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   12fb4:	|      movea.l 1e224 <currentEvents>,a0
   12fba:	|      move.l (sp),d0
   12fbc:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   12fc0:	|      moveq #2,d0
   12fc2:	|  ,-- bra.s 12fc6 <builtIn_onRightMouseUp+0x3c>
	}
	return BR_ERROR;
   12fc4:	'--|-> moveq #1,d0
}
   12fc6:	   '-> addq.l #4,sp
   12fc8:	       rts

00012fca <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   12fca:	          subq.l #8,sp
   12fcc:	          move.l a2,-(sp)
	KPrintF("running onFocusChange\n");
   12fce:	          pea 1b898 <talk.c.490538ff+0x1f0>
   12fd4:	          jsr 1857e <KPrintF>
   12fda:	          addq.l #4,sp
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12fdc:	          move.l sp,d0
   12fde:	          addq.l #4,d0
   12fe0:	          move.l d0,-(sp)
   12fe2:	          move.l 24(sp),-(sp)
   12fe6:	          move.l 24(sp),-(sp)
   12fea:	          jsr 12e68 <getFuncNumForCallback>
   12ff0:	          lea 12(sp),sp
   12ff4:	          tst.w d0
   12ff6:	,-------- beq.s 13054 <builtIn_onFocusChange+0x8a>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   12ff8:	|         movea.l 1e224 <currentEvents>,a0
   12ffe:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   13004:	|         move.l 4(sp),d0
   13008:	|  ,----- beq.s 13024 <builtIn_onFocusChange+0x5a>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   1300a:	|  |      move.l 4(sp),d0
   1300e:	|  |      movea.l 1e224 <currentEvents>,a2
   13014:	|  |      move.l d0,-(sp)
   13016:	|  |      jsr 79b8 <preloadNewFunctionNum>
   1301c:	|  |      addq.l #4,sp
   1301e:	|  |      move.l d0,20(a2)
   13022:	|  |  ,-- bra.s 1302e <builtIn_onFocusChange+0x64>
		else
			currentEvents -> focusFunction = NULL;
   13024:	|  '--|-> movea.l 1e224 <currentEvents>,a0
   1302a:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   1302e:	|     '-> tst.l 8(sp)
   13032:	|     ,-- beq.s 13050 <builtIn_onFocusChange+0x86>
   13034:	|     |   movea.l 1e224 <currentEvents>,a0
   1303a:	|     |   move.l 20(a0),d0
   1303e:	|     |   cmp.l 8(sp),d0
   13042:	|     +-- beq.s 13050 <builtIn_onFocusChange+0x86>
		{
			unloadFunction(oldfunc);
   13044:	|     |   move.l 8(sp),-(sp)
   13048:	|     |   jsr 7d8e <unloadFunction>
   1304e:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   13050:	|     '-> moveq #2,d0
   13052:	|     ,-- bra.s 13056 <builtIn_onFocusChange+0x8c>
	}
	return BR_ERROR;
   13054:	'-----|-> moveq #1,d0
}
   13056:	      '-> movea.l (sp)+,a2
   13058:	          addq.l #8,sp
   1305a:	          rts

0001305c <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   1305c:	       subq.l #4,sp
	KPrintF("running onMoveMouse\n");
   1305e:	       pea 1b8af <talk.c.490538ff+0x207>
   13064:	       jsr 1857e <KPrintF>
   1306a:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1306c:	       move.l sp,d0
   1306e:	       move.l d0,-(sp)
   13070:	       move.l 16(sp),-(sp)
   13074:	       move.l 16(sp),-(sp)
   13078:	       jsr 12e68 <getFuncNumForCallback>
   1307e:	       lea 12(sp),sp
   13082:	       tst.w d0
   13084:	,----- beq.s 13096 <builtIn_onMoveMouse+0x3a>
	{
		currentEvents -> moveMouseFunction = functionNum;
   13086:	|      movea.l 1e224 <currentEvents>,a0
   1308c:	|      move.l (sp),d0
   1308e:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   13092:	|      moveq #2,d0
   13094:	|  ,-- bra.s 13098 <builtIn_onMoveMouse+0x3c>
	}
	return BR_ERROR;
   13096:	'--|-> moveq #1,d0
}
   13098:	   '-> addq.l #4,sp
   1309a:	       rts

0001309c <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   1309c:	       subq.l #4,sp
	KPrintF("running onKeyboard\n");
   1309e:	       pea 1b8c4 <talk.c.490538ff+0x21c>
   130a4:	       jsr 1857e <KPrintF>
   130aa:	       addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   130ac:	       move.l sp,d0
   130ae:	       move.l d0,-(sp)
   130b0:	       move.l 16(sp),-(sp)
   130b4:	       move.l 16(sp),-(sp)
   130b8:	       jsr 12e68 <getFuncNumForCallback>
   130be:	       lea 12(sp),sp
   130c2:	       tst.w d0
   130c4:	,----- beq.s 130d6 <builtIn_onKeyboard+0x3a>
	{
		currentEvents -> spaceFunction = functionNum;
   130c6:	|      movea.l 1e224 <currentEvents>,a0
   130cc:	|      move.l (sp),d0
   130ce:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   130d2:	|      moveq #2,d0
   130d4:	|  ,-- bra.s 130d8 <builtIn_onKeyboard+0x3c>
	}
	return BR_ERROR;
   130d6:	'--|-> moveq #1,d0
}
   130d8:	   '-> addq.l #4,sp
   130da:	       rts

000130dc <builtIn_spawnSub>:

builtIn (spawnSub)
{
   130dc:	          subq.l #4,sp
	KPrintF("running spawnSub\n");
   130de:	          pea 1b8d8 <talk.c.490538ff+0x230>
   130e4:	          jsr 1857e <KPrintF>
   130ea:	          addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   130ec:	          move.l sp,d0
   130ee:	          move.l d0,-(sp)
   130f0:	          move.l 16(sp),-(sp)
   130f4:	          move.l 16(sp),-(sp)
   130f8:	          jsr 12e68 <getFuncNumForCallback>
   130fe:	          lea 12(sp),sp
   13102:	          tst.w d0
   13104:	,-------- beq.s 13130 <builtIn_spawnSub+0x54>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   13106:	|         move.l 1e88e <noStack>,d1
   1310c:	|         move.l (sp),d0
   1310e:	|         pea 1 <_start+0x1>
   13112:	|         move.l d1,-(sp)
   13114:	|         clr.l -(sp)
   13116:	|         clr.l -(sp)
   13118:	|         move.l d0,-(sp)
   1311a:	|         jsr 7d42 <startNewFunctionNum>
   13120:	|         lea 20(sp),sp
   13124:	|         tst.l d0
   13126:	|     ,-- bne.s 1312c <builtIn_spawnSub+0x50>
   13128:	|     |   moveq #1,d0
   1312a:	|  ,--|-- bra.s 13132 <builtIn_spawnSub+0x56>
		return BR_CONTINUE;
   1312c:	|  |  '-> moveq #2,d0
   1312e:	|  +----- bra.s 13132 <builtIn_spawnSub+0x56>
	}
	return BR_ERROR;
   13130:	'--|----> moveq #1,d0
}
   13132:	   '----> addq.l #4,sp
   13134:	          rts

00013136 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   13136:	          subq.l #8,sp
	KPrintF("running cancelSub\n");
   13138:	          pea 1b8ea <talk.c.490538ff+0x242>
   1313e:	          jsr 1857e <KPrintF>
   13144:	          addq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   13146:	          move.l sp,d0
   13148:	          addq.l #4,d0
   1314a:	          move.l d0,-(sp)
   1314c:	          move.l 20(sp),-(sp)
   13150:	          move.l 20(sp),-(sp)
   13154:	          jsr 12e68 <getFuncNumForCallback>
   1315a:	          lea 12(sp),sp
   1315e:	          tst.w d0
   13160:	,-------- beq.s 13196 <builtIn_cancelSub+0x60>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   13162:	|         move.l 4(sp),d1
   13166:	|         move.l sp,d0
   13168:	|         addq.l #2,d0
   1316a:	|         move.l d0,-(sp)
   1316c:	|         move.l 20(sp),-(sp)
   13170:	|         move.l d1,-(sp)
   13172:	|         jsr 56a2 <cancelAFunction>
   13178:	|         lea 12(sp),sp
		if (killedMyself) {
   1317c:	|         move.w 2(sp),d0
   13180:	|  ,----- beq.s 13192 <builtIn_cancelSub+0x5c>
			abortFunction (fun);
   13182:	|  |      move.l 16(sp),-(sp)
   13186:	|  |      jsr 55c2 <abortFunction>
   1318c:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   1318e:	|  |      moveq #5,d0
   13190:	|  |  ,-- bra.s 13198 <builtIn_cancelSub+0x62>
		}
		return BR_CONTINUE;
   13192:	|  '--|-> moveq #2,d0
   13194:	|     +-- bra.s 13198 <builtIn_cancelSub+0x62>
	}
	return BR_ERROR;
   13196:	'-----|-> moveq #1,d0
}
   13198:	      '-> addq.l #8,sp
   1319a:	          rts

0001319c <builtIn_stringWidth>:

builtIn(stringWidth)
{
   1319c:	       subq.l #8,sp
   1319e:	       move.l a6,-(sp)
	KPrintF("running stringWidth\n");
   131a0:	       pea 1b8fd <talk.c.490538ff+0x255>
   131a6:	       jsr 1857e <KPrintF>
   131ac:	       addq.l #4,sp
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   131ae:	       movea.l 20(sp),a0
   131b2:	       move.l 24(a0),d0
   131b6:	       move.l d0,-(sp)
   131b8:	       jsr 16074 <getTextFromAnyVar>
   131be:	       addq.l #4,sp
   131c0:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   131c4:	   ,-- bne.s 131ca <builtIn_stringWidth+0x2e>
   131c6:	   |   moveq #1,d0
   131c8:	,--|-- bra.s 13218 <builtIn_stringWidth+0x7c>
	trimStack(&fun->stack);
   131ca:	|  '-> moveq #24,d0
   131cc:	|      add.l 20(sp),d0
   131d0:	|      move.l d0,-(sp)
   131d2:	|      jsr 16422 <trimStack>
   131d8:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   131da:	|      move.l 8(sp),-(sp)
   131de:	|      jsr 16b88 <stringWidth>
   131e4:	|      addq.l #4,sp
   131e6:	|      move.l d0,d1
   131e8:	|      moveq #28,d0
   131ea:	|      add.l 20(sp),d0
   131ee:	|      move.l d1,-(sp)
   131f0:	|      pea 1 <_start+0x1>
   131f4:	|      move.l d0,-(sp)
   131f6:	|      jsr 16390 <setVariable>
   131fc:	|      lea 12(sp),sp
	FreeVec(theText);
   13200:	|      move.l 8(sp),4(sp)
   13206:	|      move.l 1e8c0 <SysBase>,d0
   1320c:	|      movea.l d0,a6
   1320e:	|      movea.l 4(sp),a1
   13212:	|      jsr -690(a6)
	return BR_CONTINUE;
   13216:	|      moveq #2,d0
}
   13218:	'----> movea.l (sp)+,a6
   1321a:	       addq.l #8,sp
   1321c:	       rts

0001321e <builtIn_hardScroll>:

builtIn(hardScroll)
{
   1321e:	       subq.l #4,sp
	KPrintF("running hardScroll\n");
   13220:	       pea 1b912 <talk.c.490538ff+0x26a>
   13226:	       jsr 1857e <KPrintF>
   1322c:	       addq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1322e:	       movea.l 12(sp),a0
   13232:	       move.l 24(a0),d0
   13236:	       move.l d0,-(sp)
   13238:	       pea 1 <_start+0x1>
   1323c:	       move.l sp,d0
   1323e:	       addq.l #8,d0
   13240:	       move.l d0,-(sp)
   13242:	       jsr 15a9e <getValueType>
   13248:	       lea 12(sp),sp
   1324c:	       tst.w d0
   1324e:	   ,-- bne.s 13254 <builtIn_hardScroll+0x36>
   13250:	   |   moveq #1,d0
   13252:	,--|-- bra.s 13272 <builtIn_hardScroll+0x54>
	trimStack (&fun -> stack);
   13254:	|  '-> moveq #24,d0
   13256:	|      add.l 12(sp),d0
   1325a:	|      move.l d0,-(sp)
   1325c:	|      jsr 16422 <trimStack>
   13262:	|      addq.l #4,sp
	hardScroll (v);
   13264:	|      move.l (sp),d0
   13266:	|      move.l d0,-(sp)
   13268:	|      jsr dcd8 <hardScroll>
   1326e:	|      addq.l #4,sp
	return BR_CONTINUE;
   13270:	|      moveq #2,d0
}
   13272:	'----> addq.l #4,sp
   13274:	       rts

00013276 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   13276:	       subq.l #4,sp
	KPrintF("running isScreenRegion\n");
   13278:	       pea 1b926 <talk.c.490538ff+0x27e>
   1327e:	       jsr 1857e <KPrintF>
   13284:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13286:	       movea.l 12(sp),a0
   1328a:	       move.l 24(a0),d0
   1328e:	       move.l d0,-(sp)
   13290:	       pea 7 <_start+0x7>
   13294:	       move.l sp,d0
   13296:	       addq.l #8,d0
   13298:	       move.l d0,-(sp)
   1329a:	       jsr 15a9e <getValueType>
   132a0:	       lea 12(sp),sp
   132a4:	       tst.w d0
   132a6:	   ,-- bne.s 132ac <builtIn_isScreenRegion+0x36>
   132a8:	   |   moveq #1,d0
   132aa:	,--|-- bra.s 132ec <builtIn_isScreenRegion+0x76>
	trimStack (&fun -> stack);
   132ac:	|  '-> moveq #24,d0
   132ae:	|      add.l 12(sp),d0
   132b2:	|      move.l d0,-(sp)
   132b4:	|      jsr 16422 <trimStack>
   132ba:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   132bc:	|      move.l (sp),d0
   132be:	|      move.l d0,-(sp)
   132c0:	|      jsr 16d60 <getRegionForObject>
   132c6:	|      addq.l #4,sp
   132c8:	|      tst.l d0
   132ca:	|      sne d0
   132cc:	|      neg.b d0
   132ce:	|      moveq #0,d1
   132d0:	|      move.b d0,d1
   132d2:	|      moveq #28,d0
   132d4:	|      add.l 12(sp),d0
   132d8:	|      move.l d1,-(sp)
   132da:	|      pea 1 <_start+0x1>
   132de:	|      move.l d0,-(sp)
   132e0:	|      jsr 16390 <setVariable>
   132e6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   132ea:	|      moveq #2,d0
}
   132ec:	'----> addq.l #4,sp
   132ee:	       rts

000132f0 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   132f0:	       subq.l #4,sp
	KPrintF("running setSpeechSpeed\n");
   132f2:	       pea 1b93e <talk.c.490538ff+0x296>
   132f8:	       jsr 1857e <KPrintF>
   132fe:	       addq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13300:	       movea.l 12(sp),a0
   13304:	       move.l 24(a0),d0
   13308:	       move.l d0,-(sp)
   1330a:	       pea 1 <_start+0x1>
   1330e:	       move.l sp,d0
   13310:	       addq.l #8,d0
   13312:	       move.l d0,-(sp)
   13314:	       jsr 15a9e <getValueType>
   1331a:	       lea 12(sp),sp
   1331e:	       tst.w d0
   13320:	   ,-- bne.s 13326 <builtIn_setSpeechSpeed+0x36>
   13322:	   |   moveq #1,d0
   13324:	,--|-- bra.s 13374 <builtIn_setSpeechSpeed+0x84>
	trimStack (&fun -> stack);
   13326:	|  '-> moveq #24,d0
   13328:	|      add.l 12(sp),d0
   1332c:	|      move.l d0,-(sp)
   1332e:	|      jsr 16422 <trimStack>
   13334:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   13336:	|      move.l (sp),d0
   13338:	|      move.l d0,-(sp)
   1333a:	|      jsr 189b0 <__floatsisf>
   13340:	|      addq.l #4,sp
   13342:	|      move.l #1008981770,-(sp)
   13348:	|      move.l d0,-(sp)
   1334a:	|      jsr 18a62 <__mulsf3>
   13350:	|      addq.l #8,sp
   13352:	|      move.l d0,1e21e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   13358:	|      moveq #28,d0
   1335a:	|      add.l 12(sp),d0
   1335e:	|      pea 1 <_start+0x1>
   13362:	|      pea 1 <_start+0x1>
   13366:	|      move.l d0,-(sp)
   13368:	|      jsr 16390 <setVariable>
   1336e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13372:	|      moveq #2,d0
}
   13374:	'----> addq.l #4,sp
   13376:	       rts

00013378 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   13378:	       subq.l #4,sp
	KPrintF("running setFontSpacing\n");
   1337a:	       pea 1b956 <talk.c.490538ff+0x2ae>
   13380:	       jsr 1857e <KPrintF>
   13386:	       addq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13388:	       movea.l 12(sp),a0
   1338c:	       move.l 24(a0),d0
   13390:	       move.l d0,-(sp)
   13392:	       pea 1 <_start+0x1>
   13396:	       move.l sp,d0
   13398:	       addq.l #8,d0
   1339a:	       move.l d0,-(sp)
   1339c:	       jsr 15a9e <getValueType>
   133a2:	       lea 12(sp),sp
   133a6:	       tst.w d0
   133a8:	   ,-- bne.s 133ae <builtIn_setFontSpacing+0x36>
   133aa:	   |   moveq #1,d0
   133ac:	,--|-- bra.s 133e4 <builtIn_setFontSpacing+0x6c>
	fontSpace = fontSpaceI;
   133ae:	|  '-> move.l (sp),d0
   133b0:	|      move.l d0,d0
   133b2:	|      move.w d0,1e7b4 <fontSpace>
	trimStack (&fun -> stack);
   133b8:	|      moveq #24,d0
   133ba:	|      add.l 12(sp),d0
   133be:	|      move.l d0,-(sp)
   133c0:	|      jsr 16422 <trimStack>
   133c6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   133c8:	|      moveq #28,d0
   133ca:	|      add.l 12(sp),d0
   133ce:	|      pea 1 <_start+0x1>
   133d2:	|      pea 1 <_start+0x1>
   133d6:	|      move.l d0,-(sp)
   133d8:	|      jsr 16390 <setVariable>
   133de:	|      lea 12(sp),sp
	return BR_CONTINUE;
   133e2:	|      moveq #2,d0
}
   133e4:	'----> addq.l #4,sp
   133e6:	       rts

000133e8 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   133e8:	          subq.l #4,sp
	KPrintF("running transitionLevel\n");
   133ea:	          pea 1b96e <talk.c.490538ff+0x2c6>
   133f0:	          jsr 1857e <KPrintF>
   133f6:	          addq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   133f8:	          movea.l 12(sp),a0
   133fc:	          move.l 24(a0),d0
   13400:	          move.l d0,-(sp)
   13402:	          pea 1 <_start+0x1>
   13406:	          move.l sp,d0
   13408:	          addq.l #8,d0
   1340a:	          move.l d0,-(sp)
   1340c:	          jsr 15a9e <getValueType>
   13412:	          lea 12(sp),sp
   13416:	          tst.w d0
   13418:	      ,-- bne.s 1341e <builtIn_transitionLevel+0x36>
   1341a:	      |   moveq #1,d0
   1341c:	,-----|-- bra.s 13472 <builtIn_transitionLevel+0x8a>
	trimStack (&fun -> stack);
   1341e:	|     '-> moveq #24,d0
   13420:	|         add.l 12(sp),d0
   13424:	|         move.l d0,-(sp)
   13426:	|         jsr 16422 <trimStack>
   1342c:	|         addq.l #4,sp

	if (number < 0)
   1342e:	|         move.l (sp),d0
   13430:	|     ,-- bpl.s 1343a <builtIn_transitionLevel+0x52>
		brightnessLevel = 0;
   13432:	|     |   clr.b 1e222 <brightnessLevel>
   13438:	|  ,--|-- bra.s 13456 <builtIn_transitionLevel+0x6e>
	else if (number > 255)
   1343a:	|  |  '-> move.l (sp),d0
   1343c:	|  |      cmpi.l #255,d0
   13442:	|  |  ,-- ble.s 1344c <builtIn_transitionLevel+0x64>
		brightnessLevel = 255;
   13444:	|  |  |   st 1e222 <brightnessLevel>
   1344a:	|  +--|-- bra.s 13456 <builtIn_transitionLevel+0x6e>
	else
		brightnessLevel = number;
   1344c:	|  |  '-> move.l (sp),d0
   1344e:	|  |      move.l d0,d0
   13450:	|  |      move.b d0,1e222 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   13456:	|  '----> moveq #28,d0
   13458:	|         add.l 12(sp),d0
   1345c:	|         pea 1 <_start+0x1>
   13460:	|         pea 1 <_start+0x1>
   13464:	|         move.l d0,-(sp)
   13466:	|         jsr 16390 <setVariable>
   1346c:	|         lea 12(sp),sp
	return BR_CONTINUE;
   13470:	|         moveq #2,d0
}
   13472:	'-------> addq.l #4,sp
   13474:	          rts

00013476 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	KPrintF("running captureAllKeys\n");
   13476:	pea 1b987 <talk.c.490538ff+0x2df>
   1347c:	jsr 1857e <KPrintF>
   13482:	addq.l #4,sp
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   13484:	movea.l 8(sp),a0
   13488:	move.l 24(a0),d0
   1348c:	move.l d0,-(sp)
   1348e:	jsr 15fde <getBoolean>
   13494:	addq.l #4,sp
   13496:	move.w d0,1e85e <captureAllKeys>
	trimStack (&fun -> stack);
   1349c:	moveq #24,d0
   1349e:	add.l 8(sp),d0
   134a2:	move.l d0,-(sp)
   134a4:	jsr 16422 <trimStack>
   134aa:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   134ac:	move.w 1e85e <captureAllKeys>,d0
   134b2:	movea.w d0,a0
   134b4:	moveq #28,d0
   134b6:	add.l 8(sp),d0
   134ba:	move.l a0,-(sp)
   134bc:	pea 1 <_start+0x1>
   134c0:	move.l d0,-(sp)
   134c2:	jsr 16390 <setVariable>
   134c8:	lea 12(sp),sp
	return BR_CONTINUE;
   134cc:	moveq #2,d0
}
   134ce:	rts

000134d0 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   134d0:	       lea -12(sp),sp
	KPrintF("running spinCharacter\n");
   134d4:	       pea 1b99f <talk.c.490538ff+0x2f7>
   134da:	       jsr 1857e <KPrintF>
   134e0:	       addq.l #4,sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   134e2:	       movea.l 20(sp),a0
   134e6:	       move.l 24(a0),d0
   134ea:	       move.l d0,-(sp)
   134ec:	       pea 1 <_start+0x1>
   134f0:	       moveq #12,d0
   134f2:	       add.l sp,d0
   134f4:	       move.l d0,-(sp)
   134f6:	       jsr 15a9e <getValueType>
   134fc:	       lea 12(sp),sp
   13500:	       tst.w d0
   13502:	   ,-- bne.s 1350a <builtIn_spinCharacter+0x3a>
   13504:	   |   moveq #1,d0
   13506:	,--|-- bra.w 135ba <builtIn_spinCharacter+0xea>
	trimStack (&fun -> stack);
   1350a:	|  '-> moveq #24,d0
   1350c:	|      add.l 20(sp),d0
   13510:	|      move.l d0,-(sp)
   13512:	|      jsr 16422 <trimStack>
   13518:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1351a:	|      movea.l 20(sp),a0
   1351e:	|      move.l 24(a0),d0
   13522:	|      move.l d0,-(sp)
   13524:	|      pea 7 <_start+0x7>
   13528:	|      lea 8(sp),a0
   1352c:	|      move.l a0,-(sp)
   1352e:	|      jsr 15a9e <getValueType>
   13534:	|      lea 12(sp),sp
   13538:	|      tst.w d0
   1353a:	|  ,-- bne.s 13540 <builtIn_spinCharacter+0x70>
   1353c:	|  |   moveq #1,d0
   1353e:	+--|-- bra.s 135ba <builtIn_spinCharacter+0xea>
	trimStack (&fun -> stack);
   13540:	|  '-> moveq #24,d0
   13542:	|      add.l 20(sp),d0
   13546:	|      move.l d0,-(sp)
   13548:	|      jsr 16422 <trimStack>
   1354e:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   13550:	|      move.l (sp),d0
   13552:	|      move.l d0,-(sp)
   13554:	|      jsr b018 <findPerson>
   1355a:	|      addq.l #4,sp
   1355c:	|      move.l d0,8(sp)
	if (thisPerson) {
   13560:	|  ,-- beq.s 135a0 <builtIn_spinCharacter+0xd0>
		thisPerson -> wantAngle = number;
   13562:	|  |   move.l 4(sp),d0
   13566:	|  |   movea.l 8(sp),a0
   1356a:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   1356e:	|  |   movea.l 8(sp),a0
   13572:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   13578:	|  |   movea.l 8(sp),a0
   1357c:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13582:	|  |   moveq #28,d0
   13584:	|  |   add.l 20(sp),d0
   13588:	|  |   pea 1 <_start+0x1>
   1358c:	|  |   pea 1 <_start+0x1>
   13590:	|  |   move.l d0,-(sp)
   13592:	|  |   jsr 16390 <setVariable>
   13598:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1359c:	|  |   moveq #3,d0
   1359e:	+--|-- bra.s 135ba <builtIn_spinCharacter+0xea>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   135a0:	|  '-> moveq #28,d0
   135a2:	|      add.l 20(sp),d0
   135a6:	|      clr.l -(sp)
   135a8:	|      pea 1 <_start+0x1>
   135ac:	|      move.l d0,-(sp)
   135ae:	|      jsr 16390 <setVariable>
   135b4:	|      lea 12(sp),sp
		return BR_CONTINUE;
   135b8:	|      moveq #2,d0
	}
}
   135ba:	'----> lea 12(sp),sp
   135be:	       rts

000135c0 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   135c0:	          subq.l #8,sp
	KPrintF("running getCharacterDirection\n");
   135c2:	          pea 1b9b6 <talk.c.490538ff+0x30e>
   135c8:	          jsr 1857e <KPrintF>
   135ce:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   135d0:	          movea.l 16(sp),a0
   135d4:	          move.l 24(a0),d0
   135d8:	          move.l d0,-(sp)
   135da:	          pea 7 <_start+0x7>
   135de:	          move.l sp,d0
   135e0:	          addq.l #8,d0
   135e2:	          move.l d0,-(sp)
   135e4:	          jsr 15a9e <getValueType>
   135ea:	          lea 12(sp),sp
   135ee:	          tst.w d0
   135f0:	      ,-- bne.s 135f6 <builtIn_getCharacterDirection+0x36>
   135f2:	      |   moveq #1,d0
   135f4:	,-----|-- bra.s 13654 <builtIn_getCharacterDirection+0x94>
	trimStack (&fun -> stack);
   135f6:	|     '-> moveq #24,d0
   135f8:	|         add.l 16(sp),d0
   135fc:	|         move.l d0,-(sp)
   135fe:	|         jsr 16422 <trimStack>
   13604:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   13606:	|         move.l (sp),d0
   13608:	|         move.l d0,-(sp)
   1360a:	|         jsr b018 <findPerson>
   13610:	|         addq.l #4,sp
   13612:	|         move.l d0,4(sp)
	if (thisPerson) {
   13616:	|  ,----- beq.s 1363a <builtIn_getCharacterDirection+0x7a>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   13618:	|  |      movea.l 4(sp),a0
   1361c:	|  |      move.l 106(a0),d1
   13620:	|  |      moveq #28,d0
   13622:	|  |      add.l 16(sp),d0
   13626:	|  |      move.l d1,-(sp)
   13628:	|  |      pea 1 <_start+0x1>
   1362c:	|  |      move.l d0,-(sp)
   1362e:	|  |      jsr 16390 <setVariable>
   13634:	|  |      lea 12(sp),sp
   13638:	|  |  ,-- bra.s 13652 <builtIn_getCharacterDirection+0x92>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1363a:	|  '--|-> moveq #28,d0
   1363c:	|     |   add.l 16(sp),d0
   13640:	|     |   clr.l -(sp)
   13642:	|     |   pea 1 <_start+0x1>
   13646:	|     |   move.l d0,-(sp)
   13648:	|     |   jsr 16390 <setVariable>
   1364e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13652:	|     '-> moveq #2,d0
}
   13654:	'-------> addq.l #8,sp
   13656:	          rts

00013658 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   13658:	       subq.l #8,sp
	KPrintF("running isCharacter\n");
   1365a:	       pea 1b9d5 <talk.c.490538ff+0x32d>
   13660:	       jsr 1857e <KPrintF>
   13666:	       addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13668:	       movea.l 16(sp),a0
   1366c:	       move.l 24(a0),d0
   13670:	       move.l d0,-(sp)
   13672:	       pea 7 <_start+0x7>
   13676:	       move.l sp,d0
   13678:	       addq.l #8,d0
   1367a:	       move.l d0,-(sp)
   1367c:	       jsr 15a9e <getValueType>
   13682:	       lea 12(sp),sp
   13686:	       tst.w d0
   13688:	   ,-- bne.s 1368e <builtIn_isCharacter+0x36>
   1368a:	   |   moveq #1,d0
   1368c:	,--|-- bra.s 136d0 <builtIn_isCharacter+0x78>
	trimStack (&fun -> stack);
   1368e:	|  '-> moveq #24,d0
   13690:	|      add.l 16(sp),d0
   13694:	|      move.l d0,-(sp)
   13696:	|      jsr 16422 <trimStack>
   1369c:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1369e:	|      move.l (sp),d0
   136a0:	|      move.l d0,-(sp)
   136a2:	|      jsr b018 <findPerson>
   136a8:	|      addq.l #4,sp
   136aa:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   136ae:	|      sne d0
   136b0:	|      neg.b d0
   136b2:	|      moveq #0,d1
   136b4:	|      move.b d0,d1
   136b6:	|      moveq #28,d0
   136b8:	|      add.l 16(sp),d0
   136bc:	|      move.l d1,-(sp)
   136be:	|      pea 1 <_start+0x1>
   136c2:	|      move.l d0,-(sp)
   136c4:	|      jsr 16390 <setVariable>
   136ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
   136ce:	|      moveq #2,d0
}
   136d0:	'----> addq.l #8,sp
   136d2:	       rts

000136d4 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   136d4:	          subq.l #8,sp
	KPrintF("running normalCharacter\n");
   136d6:	          pea 1b9ea <talk.c.490538ff+0x342>
   136dc:	          jsr 1857e <KPrintF>
   136e2:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   136e4:	          movea.l 16(sp),a0
   136e8:	          move.l 24(a0),d0
   136ec:	          move.l d0,-(sp)
   136ee:	          pea 7 <_start+0x7>
   136f2:	          move.l sp,d0
   136f4:	          addq.l #8,d0
   136f6:	          move.l d0,-(sp)
   136f8:	          jsr 15a9e <getValueType>
   136fe:	          lea 12(sp),sp
   13702:	          tst.w d0
   13704:	      ,-- bne.s 1370a <builtIn_normalCharacter+0x36>
   13706:	      |   moveq #1,d0
   13708:	,-----|-- bra.s 13786 <builtIn_normalCharacter+0xb2>
	trimStack (&fun -> stack);
   1370a:	|     '-> moveq #24,d0
   1370c:	|         add.l 16(sp),d0
   13710:	|         move.l d0,-(sp)
   13712:	|         jsr 16422 <trimStack>
   13718:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1371a:	|         move.l (sp),d0
   1371c:	|         move.l d0,-(sp)
   1371e:	|         jsr b018 <findPerson>
   13724:	|         addq.l #4,sp
   13726:	|         move.l d0,4(sp)
	if (thisPerson)
   1372a:	|  ,----- beq.s 1376c <builtIn_normalCharacter+0x98>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   1372c:	|  |      movea.l 4(sp),a0
   13730:	|  |      movea.l 80(a0),a0
   13734:	|  |      move.l (a0),d1
   13736:	|  |      movea.l 4(sp),a0
   1373a:	|  |      move.l 106(a0),d0
   1373e:	|  |      add.l d0,d0
   13740:	|  |      add.l d0,d0
   13742:	|  |      movea.l d1,a0
   13744:	|  |      adda.l d0,a0
   13746:	|  |      move.l (a0),d0
   13748:	|  |      movea.l 4(sp),a0
   1374c:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13750:	|  |      moveq #28,d0
   13752:	|  |      add.l 16(sp),d0
   13756:	|  |      pea 1 <_start+0x1>
   1375a:	|  |      pea 1 <_start+0x1>
   1375e:	|  |      move.l d0,-(sp)
   13760:	|  |      jsr 16390 <setVariable>
   13766:	|  |      lea 12(sp),sp
   1376a:	|  |  ,-- bra.s 13784 <builtIn_normalCharacter+0xb0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1376c:	|  '--|-> moveq #28,d0
   1376e:	|     |   add.l 16(sp),d0
   13772:	|     |   clr.l -(sp)
   13774:	|     |   pea 1 <_start+0x1>
   13778:	|     |   move.l d0,-(sp)
   1377a:	|     |   jsr 16390 <setVariable>
   13780:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13784:	|     '-> moveq #2,d0
}
   13786:	'-------> addq.l #8,sp
   13788:	          rts

0001378a <builtIn_isMoving>:

builtIn(isMoving)
{
   1378a:	          subq.l #8,sp
	KPrintF("running isMoving\n");
   1378c:	          pea 1ba03 <talk.c.490538ff+0x35b>
   13792:	          jsr 1857e <KPrintF>
   13798:	          addq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1379a:	          movea.l 16(sp),a0
   1379e:	          move.l 24(a0),d0
   137a2:	          move.l d0,-(sp)
   137a4:	          pea 7 <_start+0x7>
   137a8:	          move.l sp,d0
   137aa:	          addq.l #8,d0
   137ac:	          move.l d0,-(sp)
   137ae:	          jsr 15a9e <getValueType>
   137b4:	          lea 12(sp),sp
   137b8:	          tst.w d0
   137ba:	      ,-- bne.s 137c0 <builtIn_isMoving+0x36>
   137bc:	      |   moveq #1,d0
   137be:	,-----|-- bra.s 13820 <builtIn_isMoving+0x96>
	trimStack (&fun -> stack);
   137c0:	|     '-> moveq #24,d0
   137c2:	|         add.l 16(sp),d0
   137c6:	|         move.l d0,-(sp)
   137c8:	|         jsr 16422 <trimStack>
   137ce:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   137d0:	|         move.l (sp),d0
   137d2:	|         move.l d0,-(sp)
   137d4:	|         jsr b018 <findPerson>
   137da:	|         addq.l #4,sp
   137dc:	|         move.l d0,4(sp)
	if (thisPerson)
   137e0:	|  ,----- beq.s 13806 <builtIn_isMoving+0x7c>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   137e2:	|  |      movea.l 4(sp),a0
   137e6:	|  |      move.w 64(a0),d0
   137ea:	|  |      movea.w d0,a0
   137ec:	|  |      moveq #28,d0
   137ee:	|  |      add.l 16(sp),d0
   137f2:	|  |      move.l a0,-(sp)
   137f4:	|  |      pea 1 <_start+0x1>
   137f8:	|  |      move.l d0,-(sp)
   137fa:	|  |      jsr 16390 <setVariable>
   13800:	|  |      lea 12(sp),sp
   13804:	|  |  ,-- bra.s 1381e <builtIn_isMoving+0x94>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13806:	|  '--|-> moveq #28,d0
   13808:	|     |   add.l 16(sp),d0
   1380c:	|     |   clr.l -(sp)
   1380e:	|     |   pea 1 <_start+0x1>
   13812:	|     |   move.l d0,-(sp)
   13814:	|     |   jsr 16390 <setVariable>
   1381a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1381e:	|     '-> moveq #2,d0
}
   13820:	'-------> addq.l #8,sp
   13822:	          rts

00013824 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   13824:	          lea -12(sp),sp
	KPrintF("running fetchEvent\n");
   13828:	          pea 1ba15 <talk.c.490538ff+0x36d>
   1382e:	          jsr 1857e <KPrintF>
   13834:	          addq.l #4,sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13836:	          movea.l 20(sp),a0
   1383a:	          move.l 24(a0),d0
   1383e:	          move.l d0,-(sp)
   13840:	          pea 7 <_start+0x7>
   13844:	          lea 8(sp),a0
   13848:	          move.l a0,-(sp)
   1384a:	          jsr 15a9e <getValueType>
   13850:	          lea 12(sp),sp
   13854:	          tst.w d0
   13856:	      ,-- bne.s 1385e <builtIn_fetchEvent+0x3a>
   13858:	      |   moveq #1,d0
   1385a:	,-----|-- bra.w 138f2 <builtIn_fetchEvent+0xce>
	trimStack (&fun -> stack);
   1385e:	|     '-> moveq #24,d0
   13860:	|         add.l 20(sp),d0
   13864:	|         move.l d0,-(sp)
   13866:	|         jsr 16422 <trimStack>
   1386c:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1386e:	|         movea.l 20(sp),a0
   13872:	|         move.l 24(a0),d0
   13876:	|         move.l d0,-(sp)
   13878:	|         pea 7 <_start+0x7>
   1387c:	|         moveq #12,d0
   1387e:	|         add.l sp,d0
   13880:	|         move.l d0,-(sp)
   13882:	|         jsr 15a9e <getValueType>
   13888:	|         lea 12(sp),sp
   1388c:	|         tst.w d0
   1388e:	|     ,-- bne.s 13894 <builtIn_fetchEvent+0x70>
   13890:	|     |   moveq #1,d0
   13892:	+-----|-- bra.s 138f2 <builtIn_fetchEvent+0xce>
	trimStack (&fun -> stack);
   13894:	|     '-> moveq #24,d0
   13896:	|         add.l 20(sp),d0
   1389a:	|         move.l d0,-(sp)
   1389c:	|         jsr 16422 <trimStack>
   138a2:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   138a4:	|         move.l (sp),d1
   138a6:	|         move.l 4(sp),d0
   138aa:	|         move.l d1,-(sp)
   138ac:	|         move.l d0,-(sp)
   138ae:	|         jsr dfba <getCombinationFunction>
   138b4:	|         addq.l #8,sp
   138b6:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   138ba:	|  ,----- beq.s 138d8 <builtIn_fetchEvent+0xb4>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   138bc:	|  |      moveq #28,d0
   138be:	|  |      add.l 20(sp),d0
   138c2:	|  |      move.l 8(sp),-(sp)
   138c6:	|  |      pea 2 <_start+0x2>
   138ca:	|  |      move.l d0,-(sp)
   138cc:	|  |      jsr 16390 <setVariable>
   138d2:	|  |      lea 12(sp),sp
   138d6:	|  |  ,-- bra.s 138f0 <builtIn_fetchEvent+0xcc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   138d8:	|  '--|-> moveq #28,d0
   138da:	|     |   add.l 20(sp),d0
   138de:	|     |   clr.l -(sp)
   138e0:	|     |   pea 1 <_start+0x1>
   138e4:	|     |   move.l d0,-(sp)
   138e6:	|     |   jsr 16390 <setVariable>
   138ec:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   138f0:	|     '-> moveq #2,d0
}
   138f2:	'-------> lea 12(sp),sp
   138f6:	          rts

000138f8 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   138f8:	       lea -24(sp),sp
   138fc:	       move.l a6,-(sp)
	KPrintF("running deleteFile\n");
   138fe:	       pea 1ba29 <talk.c.490538ff+0x381>
   13904:	       jsr 1857e <KPrintF>
   1390a:	       addq.l #4,sp
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   1390c:	       movea.l 36(sp),a0
   13910:	       move.l 24(a0),d0
   13914:	       move.l d0,-(sp)
   13916:	       jsr 16074 <getTextFromAnyVar>
   1391c:	       addq.l #4,sp
   1391e:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   13922:	       moveq #24,d0
   13924:	       add.l 36(sp),d0
   13928:	       move.l d0,-(sp)
   1392a:	       jsr 16422 <trimStack>
   13930:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   13932:	       move.l 24(sp),-(sp)
   13936:	       jsr 2fe <encodeFilename>
   1393c:	       addq.l #4,sp
   1393e:	       move.l d0,20(sp)
    FreeVec(namNormal);
   13942:	       move.l 24(sp),16(sp)
   13948:	       move.l 1e8c0 <SysBase>,d0
   1394e:	       movea.l d0,a6
   13950:	       movea.l 16(sp),a1
   13954:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   13958:	       move.l 20(sp),-(sp)
   1395c:	       jsr ed72 <failSecurityCheck>
   13962:	       addq.l #4,sp
   13964:	       tst.w d0
   13966:	   ,-- beq.s 1396c <builtIn_deleteFile+0x74>
   13968:	   |   moveq #1,d0
   1396a:	,--|-- bra.s 139ba <builtIn_deleteFile+0xc2>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   1396c:	|  '-> move.l 20(sp),12(sp)
   13972:	|      move.l 1e8c8 <DOSBase>,d0
   13978:	|      movea.l d0,a6
   1397a:	|      move.l 12(sp),d1
   1397e:	|      jsr -72(a6)
   13982:	|      move.l d0,8(sp)
   13986:	|      move.l 8(sp),d1
   1398a:	|      moveq #28,d0
   1398c:	|      add.l 36(sp),d0
   13990:	|      move.l d1,-(sp)
   13992:	|      pea 1 <_start+0x1>
   13996:	|      move.l d0,-(sp)
   13998:	|      jsr 16390 <setVariable>
   1399e:	|      lea 12(sp),sp
    FreeVec(nam);
   139a2:	|      move.l 20(sp),4(sp)
   139a8:	|      move.l 1e8c0 <SysBase>,d0
   139ae:	|      movea.l d0,a6
   139b0:	|      movea.l 4(sp),a1
   139b4:	|      jsr -690(a6)

    return BR_CONTINUE;
   139b8:	|      moveq #2,d0
}
   139ba:	'----> movea.l (sp)+,a6
   139bc:	       lea 24(sp),sp
   139c0:	       rts

000139c2 <builtIn_renameFile>:

builtIn(renameFile)
{
   139c2:	       lea -40(sp),sp
   139c6:	       move.l a6,-(sp)
   139c8:	       move.l d2,-(sp)
	KPrintF("running renameFile\n");
   139ca:	       pea 1ba3d <talk.c.490538ff+0x395>
   139d0:	       jsr 1857e <KPrintF>
   139d6:	       addq.l #4,sp
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   139d8:	       movea.l 56(sp),a0
   139dc:	       move.l 24(a0),d0
   139e0:	       move.l d0,-(sp)
   139e2:	       jsr 16074 <getTextFromAnyVar>
   139e8:	       addq.l #4,sp
   139ea:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   139ee:	       move.l 44(sp),-(sp)
   139f2:	       jsr 2fe <encodeFilename>
   139f8:	       addq.l #4,sp
   139fa:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   139fe:	       moveq #24,d0
   13a00:	       add.l 56(sp),d0
   13a04:	       move.l d0,-(sp)
   13a06:	       jsr 16422 <trimStack>
   13a0c:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   13a0e:	       move.l 40(sp),-(sp)
   13a12:	       jsr ed72 <failSecurityCheck>
   13a18:	       addq.l #4,sp
   13a1a:	       tst.w d0
   13a1c:	   ,-- beq.s 13a24 <builtIn_renameFile+0x62>
   13a1e:	   |   moveq #1,d0
   13a20:	,--|-- bra.w 13b0a <builtIn_renameFile+0x148>
	FreeVec(temp);
   13a24:	|  '-> move.l 44(sp),36(sp)
   13a2a:	|      move.l 1e8c0 <SysBase>,d0
   13a30:	|      movea.l d0,a6
   13a32:	|      movea.l 36(sp),a1
   13a36:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   13a3a:	|      movea.l 56(sp),a0
   13a3e:	|      move.l 24(a0),d0
   13a42:	|      move.l d0,-(sp)
   13a44:	|      jsr 16074 <getTextFromAnyVar>
   13a4a:	|      addq.l #4,sp
   13a4c:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   13a50:	|      move.l 44(sp),-(sp)
   13a54:	|      jsr 2fe <encodeFilename>
   13a5a:	|      addq.l #4,sp
   13a5c:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   13a60:	|      moveq #24,d0
   13a62:	|      add.l 56(sp),d0
   13a66:	|      move.l d0,-(sp)
   13a68:	|      jsr 16422 <trimStack>
   13a6e:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   13a70:	|      move.l 32(sp),-(sp)
   13a74:	|      jsr ed72 <failSecurityCheck>
   13a7a:	|      addq.l #4,sp
   13a7c:	|      tst.w d0
   13a7e:	|  ,-- beq.s 13a86 <builtIn_renameFile+0xc4>
   13a80:	|  |   moveq #1,d0
   13a82:	+--|-- bra.w 13b0a <builtIn_renameFile+0x148>
	FreeVec(temp);
   13a86:	|  '-> move.l 44(sp),28(sp)
   13a8c:	|      move.l 1e8c0 <SysBase>,d0
   13a92:	|      movea.l d0,a6
   13a94:	|      movea.l 28(sp),a1
   13a98:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   13a9c:	|      move.l 32(sp),24(sp)
   13aa2:	|      move.l 40(sp),20(sp)
   13aa8:	|      move.l 1e8c8 <DOSBase>,d0
   13aae:	|      movea.l d0,a6
   13ab0:	|      move.l 24(sp),d1
   13ab4:	|      move.l 20(sp),d2
   13ab8:	|      jsr -78(a6)
   13abc:	|      move.l d0,16(sp)
   13ac0:	|      move.l 16(sp),d1
   13ac4:	|      moveq #28,d0
   13ac6:	|      add.l 56(sp),d0
   13aca:	|      move.l d1,-(sp)
   13acc:	|      pea 1 <_start+0x1>
   13ad0:	|      move.l d0,-(sp)
   13ad2:	|      jsr 16390 <setVariable>
   13ad8:	|      lea 12(sp),sp
	FreeVec(nam);
   13adc:	|      move.l 32(sp),12(sp)
   13ae2:	|      move.l 1e8c0 <SysBase>,d0
   13ae8:	|      movea.l d0,a6
   13aea:	|      movea.l 12(sp),a1
   13aee:	|      jsr -690(a6)
	FreeVec(newnam);
   13af2:	|      move.l 40(sp),8(sp)
   13af8:	|      move.l 1e8c0 <SysBase>,d0
   13afe:	|      movea.l d0,a6
   13b00:	|      movea.l 8(sp),a1
   13b04:	|      jsr -690(a6)

	return BR_CONTINUE;
   13b08:	|      moveq #2,d0
}
   13b0a:	'----> move.l (sp)+,d2
   13b0c:	       movea.l (sp)+,a6
   13b0e:	       lea 40(sp),sp
   13b12:	       rts

00013b14 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   13b14:	       subq.l #4,sp
	KPrintF("running cacheSound\n");
   13b16:	       pea 1ba51 <talk.c.490538ff+0x3a9>
   13b1c:	       jsr 1857e <KPrintF>
   13b22:	       addq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   13b24:	       movea.l 12(sp),a0
   13b28:	       move.l 24(a0),d0
   13b2c:	       move.l d0,-(sp)
   13b2e:	       pea 5 <_start+0x5>
   13b32:	       move.l sp,d0
   13b34:	       addq.l #8,d0
   13b36:	       move.l d0,-(sp)
   13b38:	       jsr 15a9e <getValueType>
   13b3e:	       lea 12(sp),sp
   13b42:	       tst.w d0
   13b44:	   ,-- bne.s 13b4a <builtIn_cacheSound+0x36>
   13b46:	   |   moveq #1,d0
   13b48:	,--|-- bra.s 13b72 <builtIn_cacheSound+0x5e>
	trimStack (&fun -> stack);
   13b4a:	|  '-> moveq #24,d0
   13b4c:	|      add.l 12(sp),d0
   13b50:	|      move.l d0,-(sp)
   13b52:	|      jsr 16422 <trimStack>
   13b58:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   13b5a:	|      move.l (sp),d0
   13b5c:	|      move.l d0,-(sp)
   13b5e:	|      jsr dbb0 <cacheSound>
   13b64:	|      addq.l #4,sp
   13b66:	|      moveq #-1,d1
   13b68:	|      cmp.l d0,d1
   13b6a:	|  ,-- bne.s 13b70 <builtIn_cacheSound+0x5c>
   13b6c:	|  |   moveq #1,d0
   13b6e:	+--|-- bra.s 13b72 <builtIn_cacheSound+0x5e>
	return BR_CONTINUE;
   13b70:	|  '-> moveq #2,d0
}
   13b72:	'----> addq.l #4,sp
   13b74:	       rts

00013b76 <builtIn_burnString>:

builtIn(burnString)
{
	KPrintF("running burnString\n");
   13b76:	pea 1ba65 <talk.c.490538ff+0x3bd>
   13b7c:	jsr 1857e <KPrintF>
   13b82:	addq.l #4,sp
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   13b84:	pea 1ba79 <talk.c.490538ff+0x3d1>
   13b8a:	jsr 1857e <KPrintF>
   13b90:	addq.l #4,sp
	return BR_CONTINUE;
   13b92:	moveq #2,d0
}
   13b94:	rts

00013b96 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   13b96:	          lea -12(sp),sp
	KPrintF("running setCharacterSpinSpeed\n");
   13b9a:	          pea 1baa3 <talk.c.490538ff+0x3fb>
   13ba0:	          jsr 1857e <KPrintF>
   13ba6:	          addq.l #4,sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13ba8:	          movea.l 20(sp),a0
   13bac:	          move.l 24(a0),d0
   13bb0:	          move.l d0,-(sp)
   13bb2:	          pea 1 <_start+0x1>
   13bb6:	          moveq #12,d0
   13bb8:	          add.l sp,d0
   13bba:	          move.l d0,-(sp)
   13bbc:	          jsr 15a9e <getValueType>
   13bc2:	          lea 12(sp),sp
   13bc6:	          tst.w d0
   13bc8:	      ,-- bne.s 13bd0 <builtIn_setCharacterSpinSpeed+0x3a>
   13bca:	      |   moveq #1,d0
   13bcc:	,-----|-- bra.w 13c6a <builtIn_setCharacterSpinSpeed+0xd4>
	trimStack (&fun -> stack);
   13bd0:	|     '-> moveq #24,d0
   13bd2:	|         add.l 20(sp),d0
   13bd6:	|         move.l d0,-(sp)
   13bd8:	|         jsr 16422 <trimStack>
   13bde:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13be0:	|         movea.l 20(sp),a0
   13be4:	|         move.l 24(a0),d0
   13be8:	|         move.l d0,-(sp)
   13bea:	|         pea 7 <_start+0x7>
   13bee:	|         lea 8(sp),a0
   13bf2:	|         move.l a0,-(sp)
   13bf4:	|         jsr 15a9e <getValueType>
   13bfa:	|         lea 12(sp),sp
   13bfe:	|         tst.w d0
   13c00:	|     ,-- bne.s 13c06 <builtIn_setCharacterSpinSpeed+0x70>
   13c02:	|     |   moveq #1,d0
   13c04:	+-----|-- bra.s 13c6a <builtIn_setCharacterSpinSpeed+0xd4>
	trimStack (&fun -> stack);
   13c06:	|     '-> moveq #24,d0
   13c08:	|         add.l 20(sp),d0
   13c0c:	|         move.l d0,-(sp)
   13c0e:	|         jsr 16422 <trimStack>
   13c14:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   13c16:	|         move.l (sp),d0
   13c18:	|         move.l d0,-(sp)
   13c1a:	|         jsr b018 <findPerson>
   13c20:	|         addq.l #4,sp
   13c22:	|         move.l d0,8(sp)

	if (thisPerson) {
   13c26:	|  ,----- beq.s 13c50 <builtIn_setCharacterSpinSpeed+0xba>
		thisPerson -> spinSpeed = speed;
   13c28:	|  |      move.l 4(sp),d0
   13c2c:	|  |      movea.l 8(sp),a0
   13c30:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13c34:	|  |      moveq #28,d0
   13c36:	|  |      add.l 20(sp),d0
   13c3a:	|  |      pea 1 <_start+0x1>
   13c3e:	|  |      pea 1 <_start+0x1>
   13c42:	|  |      move.l d0,-(sp)
   13c44:	|  |      jsr 16390 <setVariable>
   13c4a:	|  |      lea 12(sp),sp
   13c4e:	|  |  ,-- bra.s 13c68 <builtIn_setCharacterSpinSpeed+0xd2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13c50:	|  '--|-> moveq #28,d0
   13c52:	|     |   add.l 20(sp),d0
   13c56:	|     |   clr.l -(sp)
   13c58:	|     |   pea 1 <_start+0x1>
   13c5c:	|     |   move.l d0,-(sp)
   13c5e:	|     |   jsr 16390 <setVariable>
   13c64:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13c68:	|     '-> moveq #2,d0
}
   13c6a:	'-------> lea 12(sp),sp
   13c6e:	          rts

00013c70 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   13c70:	          lea -12(sp),sp
	KPrintF("running setCharacterAngleOffset\n");
   13c74:	          pea 1bac2 <talk.c.490538ff+0x41a>
   13c7a:	          jsr 1857e <KPrintF>
   13c80:	          addq.l #4,sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13c82:	          movea.l 20(sp),a0
   13c86:	          move.l 24(a0),d0
   13c8a:	          move.l d0,-(sp)
   13c8c:	          pea 1 <_start+0x1>
   13c90:	          moveq #12,d0
   13c92:	          add.l sp,d0
   13c94:	          move.l d0,-(sp)
   13c96:	          jsr 15a9e <getValueType>
   13c9c:	          lea 12(sp),sp
   13ca0:	          tst.w d0
   13ca2:	      ,-- bne.s 13caa <builtIn_setCharacterAngleOffset+0x3a>
   13ca4:	      |   moveq #1,d0
   13ca6:	,-----|-- bra.w 13d44 <builtIn_setCharacterAngleOffset+0xd4>
	trimStack (&fun -> stack);
   13caa:	|     '-> moveq #24,d0
   13cac:	|         add.l 20(sp),d0
   13cb0:	|         move.l d0,-(sp)
   13cb2:	|         jsr 16422 <trimStack>
   13cb8:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13cba:	|         movea.l 20(sp),a0
   13cbe:	|         move.l 24(a0),d0
   13cc2:	|         move.l d0,-(sp)
   13cc4:	|         pea 7 <_start+0x7>
   13cc8:	|         lea 8(sp),a0
   13ccc:	|         move.l a0,-(sp)
   13cce:	|         jsr 15a9e <getValueType>
   13cd4:	|         lea 12(sp),sp
   13cd8:	|         tst.w d0
   13cda:	|     ,-- bne.s 13ce0 <builtIn_setCharacterAngleOffset+0x70>
   13cdc:	|     |   moveq #1,d0
   13cde:	+-----|-- bra.s 13d44 <builtIn_setCharacterAngleOffset+0xd4>
	trimStack (&fun -> stack);
   13ce0:	|     '-> moveq #24,d0
   13ce2:	|         add.l 20(sp),d0
   13ce6:	|         move.l d0,-(sp)
   13ce8:	|         jsr 16422 <trimStack>
   13cee:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   13cf0:	|         move.l (sp),d0
   13cf2:	|         move.l d0,-(sp)
   13cf4:	|         jsr b018 <findPerson>
   13cfa:	|         addq.l #4,sp
   13cfc:	|         move.l d0,8(sp)

	if (thisPerson) {
   13d00:	|  ,----- beq.s 13d2a <builtIn_setCharacterAngleOffset+0xba>
		thisPerson -> angleOffset = angle;
   13d02:	|  |      move.l 4(sp),d0
   13d06:	|  |      movea.l 8(sp),a0
   13d0a:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13d0e:	|  |      moveq #28,d0
   13d10:	|  |      add.l 20(sp),d0
   13d14:	|  |      pea 1 <_start+0x1>
   13d18:	|  |      pea 1 <_start+0x1>
   13d1c:	|  |      move.l d0,-(sp)
   13d1e:	|  |      jsr 16390 <setVariable>
   13d24:	|  |      lea 12(sp),sp
   13d28:	|  |  ,-- bra.s 13d42 <builtIn_setCharacterAngleOffset+0xd2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13d2a:	|  '--|-> moveq #28,d0
   13d2c:	|     |   add.l 20(sp),d0
   13d30:	|     |   clr.l -(sp)
   13d32:	|     |   pea 1 <_start+0x1>
   13d36:	|     |   move.l d0,-(sp)
   13d38:	|     |   jsr 16390 <setVariable>
   13d3e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13d42:	|     '-> moveq #2,d0
}
   13d44:	'-------> lea 12(sp),sp
   13d48:	          rts

00013d4a <builtIn_transitionMode>:


builtIn(transitionMode)
{
   13d4a:	       subq.l #4,sp
	KPrintF("running transitionMode\n");
   13d4c:	       pea 1bae3 <talk.c.490538ff+0x43b>
   13d52:	       jsr 1857e <KPrintF>
   13d58:	       addq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13d5a:	       movea.l 12(sp),a0
   13d5e:	       move.l 24(a0),d0
   13d62:	       move.l d0,-(sp)
   13d64:	       pea 1 <_start+0x1>
   13d68:	       move.l sp,d0
   13d6a:	       addq.l #8,d0
   13d6c:	       move.l d0,-(sp)
   13d6e:	       jsr 15a9e <getValueType>
   13d74:	       lea 12(sp),sp
   13d78:	       tst.w d0
   13d7a:	   ,-- bne.s 13d80 <builtIn_transitionMode+0x36>
   13d7c:	   |   moveq #1,d0
   13d7e:	,--|-- bra.s 13db6 <builtIn_transitionMode+0x6c>
	fadeMode = n;
   13d80:	|  '-> move.l (sp),d0
   13d82:	|      move.l d0,d0
   13d84:	|      move.b d0,1e78a <fadeMode>
	trimStack (&fun -> stack);
   13d8a:	|      moveq #24,d0
   13d8c:	|      add.l 12(sp),d0
   13d90:	|      move.l d0,-(sp)
   13d92:	|      jsr 16422 <trimStack>
   13d98:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   13d9a:	|      moveq #28,d0
   13d9c:	|      add.l 12(sp),d0
   13da0:	|      pea 1 <_start+0x1>
   13da4:	|      pea 1 <_start+0x1>
   13da8:	|      move.l d0,-(sp)
   13daa:	|      jsr 16390 <setVariable>
   13db0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13db4:	|      moveq #2,d0
}
   13db6:	'----> addq.l #4,sp
   13db8:	       rts

00013dba <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13dba:	moveq #24,d0
   13dbc:	add.l 8(sp),d0
   13dc0:	move.l d0,-(sp)
   13dc2:	jsr 16422 <trimStack>
   13dc8:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   13dca:	moveq #28,d0
   13dcc:	add.l 8(sp),d0
   13dd0:	pea 1 <_start+0x1>
   13dd4:	pea 1 <_start+0x1>
   13dd8:	move.l d0,-(sp)
   13dda:	jsr 16390 <setVariable>
   13de0:	lea 12(sp),sp
	return BR_CONTINUE;
   13de4:	moveq #2,d0
}
   13de6:	rts

00013de8 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   13de8:	pea 1bafb <talk.c.490538ff+0x453>
   13dee:	jsr 1857e <KPrintF>
   13df4:	addq.l #4,sp
	return BR_CONTINUE;
   13df6:	moveq #2,d0
}
   13df8:	rts

00013dfa <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   13dfa:	       lea -16(sp),sp
   13dfe:	       move.l a6,-(sp)
	KPrintF("running saveCustomData\n");
   13e00:	       pea 1bb28 <talk.c.490538ff+0x480>
   13e06:	       jsr 1857e <KPrintF>
   13e0c:	       addq.l #4,sp
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   13e0e:	       movea.l 28(sp),a0
   13e12:	       move.l 24(a0),d0
   13e16:	       move.l d0,-(sp)
   13e18:	       jsr 16074 <getTextFromAnyVar>
   13e1e:	       addq.l #4,sp
   13e20:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   13e24:	   ,-- bne.s 13e2c <builtIn_saveCustomData+0x32>
   13e26:	   |   moveq #1,d0
   13e28:	,--|-- bra.w 13ede <builtIn_saveCustomData+0xe4>

	char * fileName = encodeFilename(fileNameB);
   13e2c:	|  '-> move.l 16(sp),-(sp)
   13e30:	|      jsr 2fe <encodeFilename>
   13e36:	|      addq.l #4,sp
   13e38:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   13e3c:	|      move.l 16(sp),8(sp)
   13e42:	|      move.l 1e8c0 <SysBase>,d0
   13e48:	|      movea.l d0,a6
   13e4a:	|      movea.l 8(sp),a1
   13e4e:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   13e52:	|      move.l 12(sp),-(sp)
   13e56:	|      jsr ed72 <failSecurityCheck>
   13e5c:	|      addq.l #4,sp
   13e5e:	|      tst.w d0
   13e60:	|  ,-- beq.s 13e66 <builtIn_saveCustomData+0x6c>
   13e62:	|  |   moveq #1,d0
   13e64:	+--|-- bra.s 13ede <builtIn_saveCustomData+0xe4>
	trimStack(&fun->stack);
   13e66:	|  '-> moveq #24,d0
   13e68:	|      add.l 28(sp),d0
   13e6c:	|      move.l d0,-(sp)
   13e6e:	|      jsr 16422 <trimStack>
   13e74:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   13e76:	|      movea.l 28(sp),a0
   13e7a:	|      movea.l 24(a0),a0
   13e7e:	|      move.l (a0),d0
   13e80:	|      moveq #6,d1
   13e82:	|      cmp.l d0,d1
   13e84:	|  ,-- beq.s 13e98 <builtIn_saveCustomData+0x9e>
		KPrintF("First parameter isn't a stack");
   13e86:	|  |   pea 1bb40 <talk.c.490538ff+0x498>
   13e8c:	|  |   jsr 1857e <KPrintF>
   13e92:	|  |   addq.l #4,sp
		return BR_ERROR;
   13e94:	|  |   moveq #1,d0
   13e96:	+--|-- bra.s 13ede <builtIn_saveCustomData+0xe4>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   13e98:	|  '-> movea.l 28(sp),a0
   13e9c:	|      move.l 24(a0),d0
   13ea0:	|      move.l d0,-(sp)
   13ea2:	|      move.l 16(sp),-(sp)
   13ea6:	|      jsr e9c2 <stackToFile>
   13eac:	|      addq.l #8,sp
   13eae:	|      tst.w d0
   13eb0:	|  ,-- bne.s 13eb6 <builtIn_saveCustomData+0xbc>
   13eb2:	|  |   moveq #1,d0
   13eb4:	+--|-- bra.s 13ede <builtIn_saveCustomData+0xe4>
	trimStack(&fun->stack);
   13eb6:	|  '-> moveq #24,d0
   13eb8:	|      add.l 28(sp),d0
   13ebc:	|      move.l d0,-(sp)
   13ebe:	|      jsr 16422 <trimStack>
   13ec4:	|      addq.l #4,sp
	FreeVec(fileName);
   13ec6:	|      move.l 12(sp),4(sp)
   13ecc:	|      move.l 1e8c0 <SysBase>,d0
   13ed2:	|      movea.l d0,a6
   13ed4:	|      movea.l 4(sp),a1
   13ed8:	|      jsr -690(a6)
	return BR_CONTINUE;
   13edc:	|      moveq #2,d0
}
   13ede:	'----> movea.l (sp)+,a6
   13ee0:	       lea 16(sp),sp
   13ee4:	       rts

00013ee6 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   13ee6:	       lea -28(sp),sp
   13eea:	       move.l a6,-(sp)
	KPrintF("running loadCustomData\n");
   13eec:	       pea 1bb5e <talk.c.490538ff+0x4b6>
   13ef2:	       jsr 1857e <KPrintF>
   13ef8:	       addq.l #4,sp
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   13efa:	       movea.l 40(sp),a0
   13efe:	       move.l 24(a0),d0
   13f02:	       move.l d0,-(sp)
   13f04:	       jsr 16074 <getTextFromAnyVar>
   13f0a:	       addq.l #4,sp
   13f0c:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   13f10:	   ,-- bne.s 13f18 <builtIn_loadCustomData+0x32>
   13f12:	   |   moveq #1,d0
   13f14:	,--|-- bra.w 14014 <builtIn_loadCustomData+0x12e>

	char * newText = encodeFilename(newTextA);
   13f18:	|  '-> move.l 28(sp),-(sp)
   13f1c:	|      jsr 2fe <encodeFilename>
   13f22:	|      addq.l #4,sp
   13f24:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   13f28:	|      move.l 28(sp),20(sp)
   13f2e:	|      move.l 1e8c0 <SysBase>,d0
   13f34:	|      movea.l d0,a6
   13f36:	|      movea.l 20(sp),a1
   13f3a:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   13f3e:	|      move.l 24(sp),-(sp)
   13f42:	|      jsr ed72 <failSecurityCheck>
   13f48:	|      addq.l #4,sp
   13f4a:	|      tst.w d0
   13f4c:	|  ,-- beq.s 13f54 <builtIn_loadCustomData+0x6e>
   13f4e:	|  |   moveq #1,d0
   13f50:	+--|-- bra.w 14014 <builtIn_loadCustomData+0x12e>
	trimStack(&fun->stack);
   13f54:	|  '-> moveq #24,d0
   13f56:	|      add.l 40(sp),d0
   13f5a:	|      move.l d0,-(sp)
   13f5c:	|      jsr 16422 <trimStack>
   13f62:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   13f64:	|      moveq #28,d0
   13f66:	|      add.l 40(sp),d0
   13f6a:	|      move.l d0,-(sp)
   13f6c:	|      jsr 15cec <unlinkVar>
   13f72:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   13f74:	|      movea.l 40(sp),a0
   13f78:	|      moveq #6,d0
   13f7a:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13f7e:	|      moveq #12,d0
   13f80:	|      move.l d0,16(sp)
   13f84:	|      clr.l 12(sp)
   13f88:	|      move.l 1e8c0 <SysBase>,d0
   13f8e:	|      movea.l d0,a6
   13f90:	|      move.l 16(sp),d0
   13f94:	|      move.l 12(sp),d1
   13f98:	|      jsr -684(a6)
   13f9c:	|      move.l d0,8(sp)
   13fa0:	|      move.l 8(sp),d0
   13fa4:	|      movea.l 40(sp),a0
   13fa8:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   13fac:	|      movea.l 40(sp),a0
   13fb0:	|      move.l 32(a0),d0
   13fb4:	|  ,-- bne.s 13fba <builtIn_loadCustomData+0xd4>
   13fb6:	|  |   moveq #1,d0
   13fb8:	+--|-- bra.s 14014 <builtIn_loadCustomData+0x12e>
	fun->reg.varData.theStack->first = NULL;
   13fba:	|  '-> movea.l 40(sp),a0
   13fbe:	|      movea.l 32(a0),a0
   13fc2:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   13fc4:	|      movea.l 40(sp),a0
   13fc8:	|      movea.l 32(a0),a0
   13fcc:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   13fd0:	|      movea.l 40(sp),a0
   13fd4:	|      movea.l 32(a0),a0
   13fd8:	|      moveq #1,d0
   13fda:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   13fde:	|      movea.l 40(sp),a0
   13fe2:	|      move.l 32(a0),d0
   13fe6:	|      move.l d0,-(sp)
   13fe8:	|      move.l 28(sp),-(sp)
   13fec:	|      jsr e3fc <fileToStack>
   13ff2:	|      addq.l #8,sp
   13ff4:	|      tst.w d0
   13ff6:	|  ,-- bne.s 13ffc <builtIn_loadCustomData+0x116>
   13ff8:	|  |   moveq #1,d0
   13ffa:	+--|-- bra.s 14014 <builtIn_loadCustomData+0x12e>
	FreeVec(newText);
   13ffc:	|  '-> move.l 24(sp),4(sp)
   14002:	|      move.l 1e8c0 <SysBase>,d0
   14008:	|      movea.l d0,a6
   1400a:	|      movea.l 4(sp),a1
   1400e:	|      jsr -690(a6)
	return BR_CONTINUE;
   14012:	|      moveq #2,d0
}
   14014:	'----> movea.l (sp)+,a6
   14016:	       lea 28(sp),sp
   1401a:	       rts

0001401c <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   1401c:	       subq.l #4,sp
	KPrintF("running setCustomEncoding\n");
   1401e:	       pea 1bb76 <talk.c.490538ff+0x4ce>
   14024:	       jsr 1857e <KPrintF>
   1402a:	       addq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1402c:	       movea.l 12(sp),a0
   14030:	       move.l 24(a0),d0
   14034:	       move.l d0,-(sp)
   14036:	       pea 1 <_start+0x1>
   1403a:	       move.l sp,d0
   1403c:	       addq.l #8,d0
   1403e:	       move.l d0,-(sp)
   14040:	       jsr 15a9e <getValueType>
   14046:	       lea 12(sp),sp
   1404a:	       tst.w d0
   1404c:	   ,-- bne.s 14052 <builtIn_setCustomEncoding+0x36>
   1404e:	   |   moveq #1,d0
   14050:	,--|-- bra.s 14088 <builtIn_setCustomEncoding+0x6c>
	saveEncoding = n;
   14052:	|  '-> move.l (sp),d0
   14054:	|      move.l d0,d0
   14056:	|      move.w d0,1e978 <saveEncoding>
	trimStack (&fun -> stack);
   1405c:	|      moveq #24,d0
   1405e:	|      add.l 12(sp),d0
   14062:	|      move.l d0,-(sp)
   14064:	|      jsr 16422 <trimStack>
   1406a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1406c:	|      moveq #28,d0
   1406e:	|      add.l 12(sp),d0
   14072:	|      pea 1 <_start+0x1>
   14076:	|      pea 1 <_start+0x1>
   1407a:	|      move.l d0,-(sp)
   1407c:	|      jsr 16390 <setVariable>
   14082:	|      lea 12(sp),sp
	return BR_CONTINUE;
   14086:	|      moveq #2,d0
}
   14088:	'----> addq.l #4,sp
   1408a:	       rts

0001408c <builtIn_freeSound>:

builtIn(freeSound)
{
   1408c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1408e:	       movea.l 12(sp),a0
   14092:	       move.l 24(a0),d0
   14096:	       move.l d0,-(sp)
   14098:	       pea 5 <_start+0x5>
   1409c:	       move.l sp,d0
   1409e:	       addq.l #8,d0
   140a0:	       move.l d0,-(sp)
   140a2:	       jsr 15a9e <getValueType>
   140a8:	       lea 12(sp),sp
   140ac:	       tst.w d0
   140ae:	   ,-- bne.s 140b4 <builtIn_freeSound+0x28>
   140b0:	   |   moveq #1,d0
   140b2:	,--|-- bra.s 140d2 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   140b4:	|  '-> moveq #24,d0
   140b6:	|      add.l 12(sp),d0
   140ba:	|      move.l d0,-(sp)
   140bc:	|      jsr 16422 <trimStack>
   140c2:	|      addq.l #4,sp
	huntKillFreeSound (v);
   140c4:	|      move.l (sp),d0
   140c6:	|      move.l d0,-(sp)
   140c8:	|      jsr dbb4 <huntKillFreeSound>
   140ce:	|      addq.l #4,sp
	return BR_CONTINUE;
   140d0:	|      moveq #2,d0
}
   140d2:	'----> addq.l #4,sp
   140d4:	       rts

000140d6 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   140d6:	       lea -12(sp),sp
   140da:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   140dc:	       movea.l 24(sp),a0
   140e0:	       move.l 24(a0),d0
   140e4:	       move.l d0,-(sp)
   140e6:	       pea 1 <_start+0x1>
   140ea:	       moveq #16,d0
   140ec:	       add.l sp,d0
   140ee:	       move.l d0,-(sp)
   140f0:	       jsr 15a9e <getValueType>
   140f6:	       lea 12(sp),sp
   140fa:	       tst.w d0
   140fc:	   ,-- bne.s 14104 <builtIn_parallaxAdd+0x2e>
   140fe:	   |   moveq #1,d0
   14100:	,--|-- bra.w 141d8 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   14104:	|  '-> moveq #24,d0
   14106:	|      add.l 24(sp),d0
   1410a:	|      move.l d0,-(sp)
   1410c:	|      jsr 16422 <trimStack>
   14112:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   14114:	|      movea.l 24(sp),a0
   14118:	|      move.l 24(a0),d0
   1411c:	|      move.l d0,-(sp)
   1411e:	|      pea 1 <_start+0x1>
   14122:	|      moveq #20,d0
   14124:	|      add.l sp,d0
   14126:	|      move.l d0,-(sp)
   14128:	|      jsr 15a9e <getValueType>
   1412e:	|      lea 12(sp),sp
   14132:	|      tst.w d0
   14134:	|  ,-- bne.s 1413c <builtIn_parallaxAdd+0x66>
   14136:	|  |   moveq #1,d0
   14138:	+--|-- bra.w 141d8 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1413c:	|  '-> moveq #24,d0
   1413e:	|      add.l 24(sp),d0
   14142:	|      move.l d0,-(sp)
   14144:	|      jsr 16422 <trimStack>
   1414a:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1414c:	|      movea.l 24(sp),a0
   14150:	|      move.l 24(a0),d0
   14154:	|      move.l d0,-(sp)
   14156:	|      pea 5 <_start+0x5>
   1415a:	|      lea 12(sp),a0
   1415e:	|      move.l a0,-(sp)
   14160:	|      jsr 15a9e <getValueType>
   14166:	|      lea 12(sp),sp
   1416a:	|      tst.w d0
   1416c:	|  ,-- bne.s 14172 <builtIn_parallaxAdd+0x9c>
   1416e:	|  |   moveq #1,d0
   14170:	+--|-- bra.s 141d8 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   14172:	|  '-> moveq #24,d0
   14174:	|      add.l 24(sp),d0
   14178:	|      move.l d0,-(sp)
   1417a:	|      jsr 16422 <trimStack>
   14180:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   14182:	|      move.l 8(sp),d0
   14186:	|      move.l d0,d0
   14188:	|      moveq #0,d2
   1418a:	|      move.w d0,d2
   1418c:	|      move.l 12(sp),d0
   14190:	|      move.l d0,d0
   14192:	|      moveq #0,d1
   14194:	|      move.w d0,d1
   14196:	|      move.l 4(sp),d0
   1419a:	|      move.l d0,d0
   1419c:	|      move.w d0,d0
   1419e:	|      andi.l #65535,d0
   141a4:	|      move.l d2,-(sp)
   141a6:	|      move.l d1,-(sp)
   141a8:	|      move.l d0,-(sp)
   141aa:	|      jsr ddda <loadParallax>
   141b0:	|      lea 12(sp),sp
   141b4:	|      tst.w d0
   141b6:	|  ,-- bne.s 141bc <builtIn_parallaxAdd+0xe6>
   141b8:	|  |   moveq #1,d0
   141ba:	+--|-- bra.s 141d8 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   141bc:	|  '-> moveq #28,d0
   141be:	|      add.l 24(sp),d0
   141c2:	|      pea 1 <_start+0x1>
   141c6:	|      pea 1 <_start+0x1>
   141ca:	|      move.l d0,-(sp)
   141cc:	|      jsr 16390 <setVariable>
   141d2:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   141d6:	|      moveq #2,d0
}
   141d8:	'----> move.l (sp)+,d2
   141da:	       lea 12(sp),sp
   141de:	       rts

000141e0 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   141e0:	jsr dd12 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   141e6:	moveq #28,d0
   141e8:	add.l 8(sp),d0
   141ec:	pea 1 <_start+0x1>
   141f0:	pea 1 <_start+0x1>
   141f4:	move.l d0,-(sp)
   141f6:	jsr 16390 <setVariable>
   141fc:	lea 12(sp),sp
	return BR_CONTINUE;
   14200:	moveq #2,d0
}
   14202:	rts

00014204 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   14204:	pea 1bb91 <talk.c.490538ff+0x4e9>
   1420a:	jsr 1857e <KPrintF>
   14210:	addq.l #4,sp

	return BR_CONTINUE;
   14212:	moveq #2,d0
}
   14214:	rts

00014216 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   14216:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   14218:	             movea.l 16(sp),a0
   1421c:	             movea.l 24(a0),a0
   14220:	             move.l (a0),d0
   14222:	             moveq #1,d1
   14224:	             cmp.l d0,d1
   14226:	      ,----- beq.s 1426e <builtIn_makeFastArray+0x58>
   14228:	      |      moveq #6,d1
   1422a:	      |      cmp.l d0,d1
   1422c:	,-----|----- bne.s 142ac <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   1422e:	|     |      movea.l 16(sp),a0
   14232:	|     |      movea.l 24(a0),a0
   14236:	|     |      move.l 4(a0),d1
   1423a:	|     |      moveq #28,d0
   1423c:	|     |      add.l 16(sp),d0
   14240:	|     |      move.l d1,-(sp)
   14242:	|     |      move.l d0,-(sp)
   14244:	|     |      jsr 15b50 <makeFastArrayFromStack>
   1424a:	|     |      addq.l #8,sp
   1424c:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   14250:	|     |      moveq #24,d0
   14252:	|     |      add.l 16(sp),d0
   14256:	|     |      move.l d0,-(sp)
   14258:	|     |      jsr 16422 <trimStack>
   1425e:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   14260:	|     |      tst.w 6(sp)
   14264:	|     |  ,-- beq.s 1426a <builtIn_makeFastArray+0x54>
   14266:	|     |  |   moveq #2,d0
   14268:	|  ,--|--|-- bra.s 142be <builtIn_makeFastArray+0xa8>
   1426a:	|  |  |  '-> moveq #1,d0
   1426c:	|  +--|----- bra.s 142be <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   1426e:	|  |  '----> movea.l 16(sp),a0
   14272:	|  |         movea.l 24(a0),a0
   14276:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   1427c:	|  |         moveq #24,d0
   1427e:	|  |         add.l 16(sp),d0
   14282:	|  |         move.l d0,-(sp)
   14284:	|  |         jsr 16422 <trimStack>
   1428a:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   1428c:	|  |         moveq #28,d0
   1428e:	|  |         add.l 16(sp),d0
   14292:	|  |         move.l 2(sp),-(sp)
   14296:	|  |         move.l d0,-(sp)
   14298:	|  |         jsr 15bba <makeFastArraySize>
   1429e:	|  |         addq.l #8,sp
   142a0:	|  |         tst.w d0
   142a2:	|  |     ,-- beq.s 142a8 <builtIn_makeFastArray+0x92>
   142a4:	|  |     |   moveq #2,d0
   142a6:	|  +-----|-- bra.s 142be <builtIn_makeFastArray+0xa8>
   142a8:	|  |     '-> moveq #1,d0
   142aa:	|  +-------- bra.s 142be <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   142ac:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   142ae:	   |         pea 1bbba <talk.c.490538ff+0x512>
   142b4:	   |         jsr 1857e <KPrintF>
   142ba:	   |         addq.l #4,sp
	return BR_ERROR;
   142bc:	   |         moveq #1,d0
}
   142be:	   '-------> addq.l #8,sp
   142c0:	             rts

000142c2 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   142c2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   142c4:	          movea.l 16(sp),a0
   142c8:	          move.l 24(a0),d0
   142cc:	          move.l d0,-(sp)
   142ce:	          pea 7 <_start+0x7>
   142d2:	          move.l sp,d0
   142d4:	          addq.l #8,d0
   142d6:	          move.l d0,-(sp)
   142d8:	          jsr 15a9e <getValueType>
   142de:	          lea 12(sp),sp
   142e2:	          tst.w d0
   142e4:	      ,-- bne.s 142ea <builtIn_getCharacterScale+0x28>
   142e6:	      |   moveq #1,d0
   142e8:	,-----|-- bra.s 14364 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   142ea:	|     '-> moveq #24,d0
   142ec:	|         add.l 16(sp),d0
   142f0:	|         move.l d0,-(sp)
   142f2:	|         jsr 16422 <trimStack>
   142f8:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   142fa:	|         move.l (sp),d0
   142fc:	|         move.l d0,-(sp)
   142fe:	|         jsr b018 <findPerson>
   14304:	|         addq.l #4,sp
   14306:	|         move.l d0,4(sp)
	if (pers) {
   1430a:	|  ,----- beq.s 1434a <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1430c:	|  |      movea.l 4(sp),a0
   14310:	|  |      move.l 32(a0),d0
   14314:	|  |      move.l #1120403456,-(sp)
   1431a:	|  |      move.l d0,-(sp)
   1431c:	|  |      jsr 18a62 <__mulsf3>
   14322:	|  |      addq.l #8,sp
   14324:	|  |      move.l d0,-(sp)
   14326:	|  |      jsr 18948 <__fixsfsi>
   1432c:	|  |      addq.l #4,sp
   1432e:	|  |      move.l d0,d1
   14330:	|  |      moveq #28,d0
   14332:	|  |      add.l 16(sp),d0
   14336:	|  |      move.l d1,-(sp)
   14338:	|  |      pea 1 <_start+0x1>
   1433c:	|  |      move.l d0,-(sp)
   1433e:	|  |      jsr 16390 <setVariable>
   14344:	|  |      lea 12(sp),sp
   14348:	|  |  ,-- bra.s 14362 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1434a:	|  '--|-> moveq #28,d0
   1434c:	|     |   add.l 16(sp),d0
   14350:	|     |   clr.l -(sp)
   14352:	|     |   pea 1 <_start+0x1>
   14356:	|     |   move.l d0,-(sp)
   14358:	|     |   jsr 16390 <setVariable>
   1435e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   14362:	|     '-> moveq #2,d0
}
   14364:	'-------> addq.l #8,sp
   14366:	          rts

00014368 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   14368:	move.l 1e99c <gameSettings>,d0
   1436e:	move.l d0,d1
   14370:	moveq #28,d0
   14372:	add.l 8(sp),d0
   14376:	move.l d1,-(sp)
   14378:	pea 1 <_start+0x1>
   1437c:	move.l d0,-(sp)
   1437e:	jsr 16390 <setVariable>
   14384:	lea 12(sp),sp
	return BR_CONTINUE;
   14388:	moveq #2,d0
}
   1438a:	rts

0001438c <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1438c:	moveq #24,d0
   1438e:	add.l 8(sp),d0
   14392:	move.l d0,-(sp)
   14394:	jsr 16422 <trimStack>
   1439a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1439c:	moveq #24,d0
   1439e:	add.l 8(sp),d0
   143a2:	move.l d0,-(sp)
   143a4:	jsr 16422 <trimStack>
   143aa:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   143ac:	moveq #28,d0
   143ae:	add.l 8(sp),d0
   143b2:	clr.l -(sp)
   143b4:	pea 1 <_start+0x1>
   143b8:	move.l d0,-(sp)
   143ba:	jsr 16390 <setVariable>
   143c0:	lea 12(sp),sp

	return BR_CONTINUE;
   143c4:	moveq #2,d0

}
   143c6:	rts

000143c8 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   143c8:	move.l 1e22c <lastFramesPerSecond>,d1
   143ce:	moveq #28,d0
   143d0:	add.l 8(sp),d0
   143d4:	move.l d1,-(sp)
   143d6:	pea 1 <_start+0x1>
   143da:	move.l d0,-(sp)
   143dc:	jsr 16390 <setVariable>
   143e2:	lea 12(sp),sp
	return BR_CONTINUE;
   143e6:	moveq #2,d0
}
   143e8:	rts

000143ea <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   143ea:	moveq #2,d0
}
   143ec:	rts

000143ee <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   143ee:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   143f2:	          movea.l 60(sp),a0
   143f6:	          move.l 24(a0),d0
   143fa:	          move.l d0,-(sp)
   143fc:	          pea 1 <_start+0x1>
   14400:	          pea 1e7c6 <thumbHeight>
   14406:	          jsr 15a9e <getValueType>
   1440c:	          lea 12(sp),sp
   14410:	          tst.w d0
   14412:	      ,-- bne.s 1441a <builtIn_setThumbnailSize+0x2c>
   14414:	      |   moveq #1,d0
   14416:	,-----|-- bra.w 144d6 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1441a:	|     '-> moveq #24,d0
   1441c:	|         add.l 60(sp),d0
   14420:	|         move.l d0,-(sp)
   14422:	|         jsr 16422 <trimStack>
   14428:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1442a:	|         movea.l 60(sp),a0
   1442e:	|         move.l 24(a0),d0
   14432:	|         move.l d0,-(sp)
   14434:	|         pea 1 <_start+0x1>
   14438:	|         pea 1e7c2 <thumbWidth>
   1443e:	|         jsr 15a9e <getValueType>
   14444:	|         lea 12(sp),sp
   14448:	|         tst.w d0
   1444a:	|     ,-- bne.s 14452 <builtIn_setThumbnailSize+0x64>
   1444c:	|     |   moveq #1,d0
   1444e:	+-----|-- bra.w 144d6 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   14452:	|     '-> moveq #24,d0
   14454:	|         add.l 60(sp),d0
   14458:	|         move.l d0,-(sp)
   1445a:	|         jsr 16422 <trimStack>
   14460:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   14462:	|         move.l 1e7c2 <thumbWidth>,d0
   14468:	|     ,-- bmi.s 14496 <builtIn_setThumbnailSize+0xa8>
   1446a:	|     |   move.l 1e7c6 <thumbHeight>,d0
   14470:	|     +-- bmi.s 14496 <builtIn_setThumbnailSize+0xa8>
   14472:	|     |   move.l 1e7c2 <thumbWidth>,d0
   14478:	|     |   move.l d0,d1
   1447a:	|     |   move.l 1e806 <winWidth>,d0
   14480:	|     |   cmp.l d1,d0
   14482:	|     +-- bcs.s 14496 <builtIn_setThumbnailSize+0xa8>
   14484:	|     |   move.l 1e7c6 <thumbHeight>,d0
   1448a:	|     |   move.l d0,d1
   1448c:	|     |   move.l 1e80a <winHeight>,d0
   14492:	|     |   cmp.l d1,d0
   14494:	|  ,--|-- bcc.s 144d4 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   14496:	|  |  '-> move.l 1e7c6 <thumbHeight>,d1
   1449c:	|  |      move.l 1e7c2 <thumbWidth>,d0
   144a2:	|  |      move.l d1,-(sp)
   144a4:	|  |      move.l d0,-(sp)
   144a6:	|  |      pea 1bbe1 <talk.c.490538ff+0x539>
   144ac:	|  |      lea 14(sp),a0
   144b0:	|  |      move.l a0,-(sp)
   144b2:	|  |      jsr 152a8 <sprintf>
   144b8:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   144bc:	|  |      lea 2(sp),a0
   144c0:	|  |      move.l a0,-(sp)
   144c2:	|  |      pea 1bbe9 <talk.c.490538ff+0x541>
   144c8:	|  |      jsr 1857e <KPrintF>
   144ce:	|  |      addq.l #8,sp
		return BR_ERROR;
   144d0:	|  |      moveq #1,d0
   144d2:	+--|----- bra.s 144d6 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   144d4:	|  '----> moveq #2,d0
}
   144d6:	'-------> lea 52(sp),sp
   144da:	          rts

000144dc <builtIn_hasFlag>:

builtIn(hasFlag)
{
   144dc:	       lea -12(sp),sp
   144e0:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   144e2:	       movea.l 24(sp),a0
   144e6:	       move.l 24(a0),d0
   144ea:	       move.l d0,-(sp)
   144ec:	       pea 1 <_start+0x1>
   144f0:	       lea 12(sp),a0
   144f4:	       move.l a0,-(sp)
   144f6:	       jsr 15a9e <getValueType>
   144fc:	       lea 12(sp),sp
   14500:	       tst.w d0
   14502:	   ,-- bne.s 1450a <builtIn_hasFlag+0x2e>
   14504:	   |   moveq #1,d0
   14506:	,--|-- bra.w 1459a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1450a:	|  '-> moveq #24,d0
   1450c:	|      add.l 24(sp),d0
   14510:	|      move.l d0,-(sp)
   14512:	|      jsr 16422 <trimStack>
   14518:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1451a:	|      movea.l 24(sp),a0
   1451e:	|      move.l 24(a0),d0
   14522:	|      move.l d0,-(sp)
   14524:	|      pea 7 <_start+0x7>
   14528:	|      moveq #16,d0
   1452a:	|      add.l sp,d0
   1452c:	|      move.l d0,-(sp)
   1452e:	|      jsr 15a9e <getValueType>
   14534:	|      lea 12(sp),sp
   14538:	|      tst.w d0
   1453a:	|  ,-- bne.s 14540 <builtIn_hasFlag+0x64>
   1453c:	|  |   moveq #1,d0
   1453e:	+--|-- bra.s 1459a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   14540:	|  '-> moveq #24,d0
   14542:	|      add.l 24(sp),d0
   14546:	|      move.l d0,-(sp)
   14548:	|      jsr 16422 <trimStack>
   1454e:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   14550:	|      move.l 8(sp),d0
   14554:	|      move.l d0,-(sp)
   14556:	|      jsr df86 <findObjectType>
   1455c:	|      addq.l #4,sp
   1455e:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   14562:	|  ,-- bne.s 14568 <builtIn_hasFlag+0x8c>
   14564:	|  |   moveq #1,d0
   14566:	+--|-- bra.s 1459a <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   14568:	|  '-> movea.l 12(sp),a0
   1456c:	|      move.w 36(a0),d0
   14570:	|      moveq #0,d2
   14572:	|      move.w d0,d2
   14574:	|      move.l 4(sp),d1
   14578:	|      moveq #1,d0
   1457a:	|      lsl.l d1,d0
   1457c:	|      move.l d2,d1
   1457e:	|      and.l d0,d1
   14580:	|      moveq #28,d0
   14582:	|      add.l 24(sp),d0
   14586:	|      move.l d1,-(sp)
   14588:	|      pea 1 <_start+0x1>
   1458c:	|      move.l d0,-(sp)
   1458e:	|      jsr 16390 <setVariable>
   14594:	|      lea 12(sp),sp
	return BR_CONTINUE;
   14598:	|      moveq #2,d0
}
   1459a:	'----> move.l (sp)+,d2
   1459c:	       lea 12(sp),sp
   145a0:	       rts

000145a2 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   145a2:	       jsr df74 <snapshot>
   145a8:	       tst.w d0
   145aa:	,----- beq.s 145b0 <builtIn_snapshotGrab+0xe>
   145ac:	|      moveq #2,d0
   145ae:	|  ,-- bra.s 145b2 <builtIn_snapshotGrab+0x10>
   145b0:	'--|-> moveq #1,d0
}
   145b2:	   '-> rts

000145b4 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   145b4:	jsr de20 <nosnapshot>
	return BR_CONTINUE;
   145ba:	moveq #2,d0
}
   145bc:	rts

000145be <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   145be:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   145c0:	move.w 1e104 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   145c8:	movea.l 12(sp),a0
   145cc:	move.l 24(a0),d0
   145d0:	move.l d0,-(sp)
   145d2:	jsr 15fde <getBoolean>
   145d8:	addq.l #4,sp
   145da:	move.w d0,1e104 <allowAnyFilename>
	trimStack (&fun -> stack);
   145e0:	moveq #24,d0
   145e2:	add.l 12(sp),d0
   145e6:	move.l d0,-(sp)
   145e8:	jsr 16422 <trimStack>
   145ee:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   145f0:	movea.w 2(sp),a0
   145f4:	moveq #28,d0
   145f6:	add.l 12(sp),d0
   145fa:	move.l a0,-(sp)
   145fc:	pea 1 <_start+0x1>
   14600:	move.l d0,-(sp)
   14602:	jsr 16390 <setVariable>
   14608:	lea 12(sp),sp
	return BR_CONTINUE;
   1460c:	moveq #2,d0
}
   1460e:	addq.l #4,sp
   14610:	rts

00014612 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   14612:	moveq #24,d0
   14614:	add.l 8(sp),d0
   14618:	move.l d0,-(sp)
   1461a:	jsr 16422 <trimStack>
   14620:	addq.l #4,sp
	trimStack (&fun -> stack);
   14622:	moveq #24,d0
   14624:	add.l 8(sp),d0
   14628:	move.l d0,-(sp)
   1462a:	jsr 16422 <trimStack>
   14630:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   14632:	moveq #28,d0
   14634:	add.l 8(sp),d0
   14638:	clr.l -(sp)
   1463a:	pea 1 <_start+0x1>
   1463e:	move.l d0,-(sp)
   14640:	jsr 16390 <setVariable>
   14646:	lea 12(sp),sp

	return BR_CONTINUE;
   1464a:	moveq #2,d0
}
   1464c:	rts

0001464e <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   1464e:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   14650:	movea.l 12(sp),a0
   14654:	move.l 24(a0),d0
   14658:	move.l d0,-(sp)
   1465a:	jsr 16074 <getTextFromAnyVar>
   14660:	addq.l #4,sp
   14662:	move.l d0,(sp)
	trimStack (&fun -> stack);
   14664:	moveq #24,d0
   14666:	add.l 12(sp),d0
   1466a:	move.l d0,-(sp)
   1466c:	jsr 16422 <trimStack>
   14672:	addq.l #4,sp
	KPrintF (mess);
   14674:	move.l (sp),-(sp)
   14676:	jsr 1857e <KPrintF>
   1467c:	addq.l #4,sp
	return BR_ERROR;
   1467e:	moveq #1,d0
}
   14680:	addq.l #4,sp
   14682:	rts

00014684 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   14684:	moveq #24,d0
   14686:	add.l 8(sp),d0
   1468a:	move.l d0,-(sp)
   1468c:	jsr 16422 <trimStack>
   14692:	addq.l #4,sp
	trimStack (&fun -> stack);
   14694:	moveq #24,d0
   14696:	add.l 8(sp),d0
   1469a:	move.l d0,-(sp)
   1469c:	jsr 16422 <trimStack>
   146a2:	addq.l #4,sp
	trimStack (&fun -> stack);
   146a4:	moveq #24,d0
   146a6:	add.l 8(sp),d0
   146aa:	move.l d0,-(sp)
   146ac:	jsr 16422 <trimStack>
   146b2:	addq.l #4,sp
	trimStack (&fun -> stack);
   146b4:	moveq #24,d0
   146b6:	add.l 8(sp),d0
   146ba:	move.l d0,-(sp)
   146bc:	jsr 16422 <trimStack>
   146c2:	addq.l #4,sp

	return BR_CONTINUE;
   146c4:	moveq #2,d0
}
   146c6:	rts

000146c8 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   146c8:	moveq #24,d0
   146ca:	add.l 8(sp),d0
   146ce:	move.l d0,-(sp)
   146d0:	jsr 16422 <trimStack>
   146d6:	addq.l #4,sp
	trimStack (&fun -> stack);
   146d8:	moveq #24,d0
   146da:	add.l 8(sp),d0
   146de:	move.l d0,-(sp)
   146e0:	jsr 16422 <trimStack>
   146e6:	addq.l #4,sp
	trimStack (&fun -> stack);
   146e8:	moveq #24,d0
   146ea:	add.l 8(sp),d0
   146ee:	move.l d0,-(sp)
   146f0:	jsr 16422 <trimStack>
   146f6:	addq.l #4,sp

	return BR_CONTINUE;
   146f8:	moveq #2,d0

}
   146fa:	rts

000146fc <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   146fc:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   146fe:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   14704:	sne d0
   14706:	neg.b d0
   14708:	moveq #0,d1
   1470a:	move.b d0,d1
   1470c:	moveq #28,d0
   1470e:	add.l 12(sp),d0
   14712:	move.l d1,-(sp)
   14714:	pea 1 <_start+0x1>
   14718:	move.l d0,-(sp)
   1471a:	jsr 16390 <setVariable>
   14720:	lea 12(sp),sp
	return BR_CONTINUE;
   14724:	moveq #2,d0
}
   14726:	addq.l #4,sp
   14728:	rts

0001472a <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   1472a:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   1472c:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   14732:	pea 1bc00 <talk.c.490538ff+0x558>
   14738:	jsr 1857e <KPrintF>
   1473e:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   14740:	tst.w 2(sp)
   14744:	sne d0
   14746:	neg.b d0
   14748:	moveq #0,d1
   1474a:	move.b d0,d1
   1474c:	moveq #28,d0
   1474e:	add.l 12(sp),d0
   14752:	move.l d1,-(sp)
   14754:	pea 1 <_start+0x1>
   14758:	move.l d0,-(sp)
   1475a:	jsr 16390 <setVariable>
   14760:	lea 12(sp),sp
	return BR_CONTINUE;
   14764:	moveq #2,d0
}
   14766:	addq.l #4,sp
   14768:	rts

0001476a <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   1476a:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   1476e:	             move.l 104(sp),d0
   14772:	             cmpi.l #167,d0
   14778:	,----------- bhi.w 1485a <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   1477c:	|            move.l 104(sp),d0
   14780:	|            add.l d0,d0
   14782:	|            movea.l d0,a1
   14784:	|            adda.l d0,a1
   14786:	|            lea 1e24a <paramNum>,a0
   1478c:	|            move.l (0,a1,a0.l),d0
   14790:	|            moveq #-1,d1
   14792:	|            cmp.l d0,d1
   14794:	|  ,-------- beq.w 14822 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   14798:	|  |         move.l 104(sp),d0
   1479c:	|  |         add.l d0,d0
   1479e:	|  |         movea.l d0,a1
   147a0:	|  |         adda.l d0,a1
   147a2:	|  |         lea 1e24a <paramNum>,a0
   147a8:	|  |         move.l (0,a1,a0.l),d0
   147ac:	|  |         cmp.l 108(sp),d0
   147b0:	|  +-------- beq.s 14822 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   147b2:	|  |         move.l 104(sp),d0
   147b6:	|  |         add.l d0,d0
   147b8:	|  |         movea.l d0,a1
   147ba:	|  |         adda.l d0,a1
   147bc:	|  |         lea 1e24a <paramNum>,a0
   147c2:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   147c6:	|  |         moveq #1,d1
   147c8:	|  |         cmp.l d0,d1
   147ca:	|  |  ,----- bne.s 147d4 <callBuiltIn+0x6a>
   147cc:	|  |  |      move.l #105919,d0
   147d2:	|  |  |  ,-- bra.s 147da <callBuiltIn+0x70>
   147d4:	|  |  '--|-> move.l #113718,d0
   147da:	|  |     '-> move.l 104(sp),d1
   147de:	|  |         add.l d1,d1
   147e0:	|  |         movea.l d1,a1
   147e2:	|  |         adda.l d1,a1
   147e4:	|  |         lea 1e24a <paramNum>,a0
   147ea:	|  |         move.l (0,a1,a0.l),d1
   147ee:	|  |         move.l d0,-(sp)
   147f0:	|  |         move.l d1,-(sp)
   147f2:	|  |         pea 1bc38 <talk.c.490538ff+0x590>
   147f8:	|  |         lea 12(sp),a0
   147fc:	|  |         move.l a0,-(sp)
   147fe:	|  |         jsr 152a8 <sprintf>
   14804:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   14808:	|  |         movea.l sp,a0
   1480a:	|  |         move.l a0,-(sp)
   1480c:	|  |         jsr b8 <copyString>
   14812:	|  |         addq.l #4,sp
   14814:	|  |         move.l d0,-(sp)
   14816:	|  |         jsr 1857e <KPrintF>
   1481c:	|  |         addq.l #4,sp
				return BR_ERROR;
   1481e:	|  |         moveq #1,d0
   14820:	|  |     ,-- bra.s 1486a <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   14822:	|  '-----|-> move.l 104(sp),d0
   14826:	|        |   add.l d0,d0
   14828:	|        |   movea.l d0,a1
   1482a:	|        |   adda.l d0,a1
   1482c:	|        |   lea 1e4ea <builtInFunctionArray>,a0
   14832:	|        |   move.l (0,a1,a0.l),d0
   14836:	+--------|-- beq.s 1485a <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);			return builtInFunctionArray[whichFunc].func (numParams, fun);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   14838:	|        |   move.l 104(sp),d0
   1483c:	|        |   add.l d0,d0
   1483e:	|        |   movea.l d0,a1
   14840:	|        |   adda.l d0,a1
   14842:	|        |   lea 1e4ea <builtInFunctionArray>,a0
   14848:	|        |   movea.l (0,a1,a0.l),a0
   1484c:	|        |   move.l 112(sp),-(sp)
   14850:	|        |   move.l 112(sp),-(sp)
   14854:	|        |   jsr (a0)
   14856:	|        |   addq.l #8,sp
   14858:	|        +-- bra.s 1486a <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / mented built-in function.");
   1485a:	'--------|-> pea 1bc63 <talk.c.490538ff+0x5bb>
   14860:	         |   jsr 1857e <KPrintF>
   14866:	         |   addq.l #4,sp
	return BR_ERROR;
   14868:	         |   moveq #1,d0
}
   1486a:	         '-> lea 100(sp),sp
   1486e:	             rts

00014870 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   14870:	          subq.l #8,sp
	int indexNum = -1;
   14872:	          moveq #-1,d0
   14874:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   14878:	          clr.l (sp)
   1487a:	   ,----- bra.s 148a0 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   1487c:	,--|----> move.l 1e994 <languageTable>,d1
   14882:	|  |      move.l (sp),d0
   14884:	|  |      add.l d0,d0
   14886:	|  |      add.l d0,d0
   14888:	|  |      movea.l d1,a0
   1488a:	|  |      adda.l d0,a0
   1488c:	|  |      move.l (a0),d0
   1488e:	|  |      move.l d0,d1
   14890:	|  |      move.l 1e99c <gameSettings>,d0
   14896:	|  |      cmp.l d1,d0
   14898:	|  |  ,-- bne.s 1489e <getLanguageForFileB+0x2e>
   1489a:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1489e:	|  |  '-> addq.l #1,(sp)
   148a0:	|  '----> move.l 1e9a0 <gameSettings+0x4>,d0
   148a6:	|         cmp.l (sp),d0
   148a8:	'-------- bcc.s 1487c <getLanguageForFileB+0xc>
	}

	return indexNum;
   148aa:	          move.l 4(sp),d0
}
   148ae:	          addq.l #8,sp
   148b0:	          rts

000148b2 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   148b2:	          lea -20(sp),sp
   148b6:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   148b8:	          move.l 28(sp),-(sp)
   148bc:	          jsr 14f8a <strlen>
   148c2:	          addq.l #4,sp
   148c4:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   148c8:	          moveq #4,d0
   148ca:	          cmp.l 12(sp),d0
   148ce:	      ,-- bge.s 148f2 <getPrefsFilename+0x40>
   148d0:	      |   move.l 12(sp),d0
   148d4:	      |   subq.l #4,d0
   148d6:	      |   movea.l 28(sp),a0
   148da:	      |   adda.l d0,a0
   148dc:	      |   move.b (a0),d0
   148de:	      |   cmpi.b #46,d0
   148e2:	      +-- bne.s 148f2 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   148e4:	      |   move.l 12(sp),d0
   148e8:	      |   subq.l #4,d0
   148ea:	      |   movea.l 28(sp),a0
   148ee:	      |   adda.l d0,a0
   148f0:	      |   clr.b (a0)
	}

	char * f = filename;
   148f2:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   148f8:	          clr.l 20(sp)
   148fc:	   ,----- bra.s 14924 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   148fe:	,--|----> move.l 20(sp),d0
   14902:	|  |      movea.l 28(sp),a0
   14906:	|  |      adda.l d0,a0
   14908:	|  |      move.b (a0),d0
   1490a:	|  |      cmpi.b #47,d0
   1490e:	|  |  ,-- bne.s 14920 <getPrefsFilename+0x6e>
   14910:	|  |  |   move.l 20(sp),d0
   14914:	|  |  |   addq.l #1,d0
   14916:	|  |  |   move.l 28(sp),d1
   1491a:	|  |  |   add.l d0,d1
   1491c:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   14920:	|  |  '-> addq.l #1,20(sp)
   14924:	|  '----> move.l 20(sp),d0
   14928:	|         cmp.l 12(sp),d0
   1492c:	'-------- blt.s 148fe <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   1492e:	          pea 1bc87 <talk.c.490538ff+0x5df>
   14934:	          move.l 20(sp),-(sp)
   14938:	          jsr 14fca <joinStrings>
   1493e:	          addq.l #8,sp
   14940:	          move.l d0,8(sp)

	FreeVec(filename);
   14944:	          move.l 28(sp),4(sp)
   1494a:	          move.l 1e8c0 <SysBase>,d0
   14950:	          movea.l d0,a6
   14952:	          movea.l 4(sp),a1
   14956:	          jsr -690(a6)
	filename = NULL;
   1495a:	          clr.l 28(sp)
	return joined;
   1495e:	          move.l 8(sp),d0
}
   14962:	          movea.l (sp)+,a6
   14964:	          lea 20(sp),sp
   14968:	          rts

0001496a <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   1496a:	             lea -28(sp),sp
   1496e:	             move.l a6,-(sp)
   14970:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   14972:	             move.l 1e9a0 <gameSettings+0x4>,d0
   14978:	             move.l d0,d1
   1497a:	             addq.l #1,d1
   1497c:	             move.l d1,28(sp)
   14980:	             clr.l 24(sp)
   14984:	             move.l 1e8c0 <SysBase>,d0
   1498a:	             movea.l d0,a6
   1498c:	             move.l 28(sp),d0
   14990:	             move.l 24(sp),d1
   14994:	             jsr -684(a6)
   14998:	             move.l d0,20(sp)
   1499c:	             move.l 20(sp),d0
   149a0:	             move.l d0,1e994 <languageTable>
    if( languageTable == 0) {
   149a6:	             move.l 1e994 <languageTable>,d0
   149ac:	         ,-- bne.s 149bc <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   149ae:	         |   pea 1bc8c <talk.c.490538ff+0x5e4>
   149b4:	         |   jsr 1857e <KPrintF>
   149ba:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   149bc:	         '-> move.l 1e9a0 <gameSettings+0x4>,d0
   149c2:	             move.l d0,d1
   149c4:	             addq.l #1,d1
   149c6:	             move.l d1,16(sp)
   149ca:	             clr.l 12(sp)
   149ce:	             move.l 1e8c0 <SysBase>,d0
   149d4:	             movea.l d0,a6
   149d6:	             move.l 16(sp),d0
   149da:	             move.l 12(sp),d1
   149de:	             jsr -684(a6)
   149e2:	             move.l d0,8(sp)
   149e6:	             move.l 8(sp),d0
   149ea:	             move.l d0,1e998 <languageName>
	if( languageName == 0) {
   149f0:	             move.l 1e998 <languageName>,d0
   149f6:	         ,-- bne.s 14a06 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   149f8:	         |   pea 1bcc2 <talk.c.490538ff+0x61a>
   149fe:	         |   jsr 1857e <KPrintF>
   14a04:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   14a06:	         '-> clr.l 32(sp)
   14a0a:	   ,-------- bra.s 14a82 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   14a0c:	,--|-------> tst.l 32(sp)
   14a10:	|  |  ,----- beq.s 14a20 <makeLanguageTable+0xb6>
   14a12:	|  |  |      move.l 40(sp),-(sp)
   14a16:	|  |  |      jsr 6bc <get2bytes>
   14a1c:	|  |  |      addq.l #4,sp
   14a1e:	|  |  |  ,-- bra.s 14a22 <makeLanguageTable+0xb8>
   14a20:	|  |  '--|-> moveq #0,d0
   14a22:	|  |     '-> movea.l 1e994 <languageTable>,a0
   14a28:	|  |         move.l 32(sp),d1
   14a2c:	|  |         add.l d1,d1
   14a2e:	|  |         add.l d1,d1
   14a30:	|  |         adda.l d1,a0
   14a32:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   14a34:	|  |         move.l 1e998 <languageName>,d1
   14a3a:	|  |         move.l 32(sp),d0
   14a3e:	|  |         add.l d0,d0
   14a40:	|  |         add.l d0,d0
   14a42:	|  |         movea.l d1,a0
   14a44:	|  |         adda.l d0,a0
   14a46:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   14a48:	|  |         move.l 1e868 <gameVersion>,d0
   14a4e:	|  |         cmpi.l #511,d0
   14a54:	|  |     ,-- ble.s 14a7e <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   14a56:	|  |     |   move.l 1e9a0 <gameSettings+0x4>,d0
   14a5c:	|  |     +-- beq.s 14a7e <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   14a5e:	|  |     |   move.l 1e998 <languageName>,d1
   14a64:	|  |     |   move.l 32(sp),d0
   14a68:	|  |     |   add.l d0,d0
   14a6a:	|  |     |   add.l d0,d0
   14a6c:	|  |     |   movea.l d1,a2
   14a6e:	|  |     |   adda.l d0,a2
   14a70:	|  |     |   move.l 40(sp),-(sp)
   14a74:	|  |     |   jsr b02 <readString>
   14a7a:	|  |     |   addq.l #4,sp
   14a7c:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   14a7e:	|  |     '-> addq.l #1,32(sp)
   14a82:	|  '-------> move.l 1e9a0 <gameSettings+0x4>,d0
   14a88:	|            cmp.l 32(sp),d0
   14a8c:	'----------- bcc.w 14a0c <makeLanguageTable+0xa2>
		}
	}
}
   14a90:	             nop
   14a92:	             nop
   14a94:	             movea.l (sp)+,a2
   14a96:	             movea.l (sp)+,a6
   14a98:	             lea 28(sp),sp
   14a9c:	             rts

00014a9e <readIniFile>:

void readIniFile (char * filename) {
   14a9e:	                      lea -564(sp),sp
   14aa2:	                      move.l a6,-(sp)
   14aa4:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   14aa6:	                      move.l 576(sp),-(sp)
   14aaa:	                      jsr b8 <copyString>
   14ab0:	                      addq.l #4,sp
   14ab2:	                      move.l d0,-(sp)
   14ab4:	                      jsr 148b2 <getPrefsFilename>
   14aba:	                      addq.l #4,sp
   14abc:	                      move.l d0,562(sp)

	langName = joinStrings ("/", langName);
   14ac0:	                      move.l 562(sp),-(sp)
   14ac4:	                      pea 1b269 <PutChar+0x2249>
   14aca:	                      jsr 14fca <joinStrings>
   14ad0:	                      addq.l #8,sp
   14ad2:	                      move.l d0,562(sp)
	BPTR fp = Open(langName,MODE_OLDFILE);	
   14ad6:	                      move.l 562(sp),558(sp)
   14adc:	                      move.l #1005,554(sp)
   14ae4:	                      move.l 1e8c8 <DOSBase>,d0
   14aea:	                      movea.l d0,a6
   14aec:	                      move.l 558(sp),d1
   14af0:	                      move.l 554(sp),d2
   14af4:	                      jsr -30(a6)
   14af8:	                      move.l d0,550(sp)
   14afc:	                      move.l 550(sp),d0
   14b00:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   14b04:	                      clr.l 1e99c <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   14b0a:	                      move.w #1,1e9a4 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   14b12:	                      clr.l 1e9a6 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   14b18:	                      moveq #1,d0
   14b1a:	                      move.l d0,1e9aa <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   14b20:	                      clr.w 1e9ae <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   14b26:	                      clr.w 1e9b0 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   14b2c:	                      clr.w 1e9b2 <gameSettings+0x16>

	FreeVec(langName);
   14b32:	                      move.l 562(sp),542(sp)
   14b38:	                      move.l 1e8c0 <SysBase>,d0
   14b3e:	                      movea.l d0,a6
   14b40:	                      movea.l 542(sp),a1
   14b44:	                      jsr -690(a6)
	langName = NULL;
   14b48:	                      clr.l 562(sp)

	if (fp) {
   14b4c:	                      tst.l 546(sp)
   14b50:	,-------------------- beq.w 14e2e <readIniFile+0x390>
		char lineSoFar[257] = "";
   14b54:	|                     move.l sp,d0
   14b56:	|                     addi.l #265,d0
   14b5c:	|                     move.l #257,d1
   14b62:	|                     move.l d1,-(sp)
   14b64:	|                     clr.l -(sp)
   14b66:	|                     move.l d0,-(sp)
   14b68:	|                     jsr 18502 <memset>
   14b6e:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   14b72:	|                     move.l sp,d0
   14b74:	|                     addq.l #8,d0
   14b76:	|                     move.l #257,d1
   14b7c:	|                     move.l d1,-(sp)
   14b7e:	|                     clr.l -(sp)
   14b80:	|                     move.l d0,-(sp)
   14b82:	|                     jsr 18502 <memset>
   14b88:	|                     lea 12(sp),sp
		unsigned char here = 0;
   14b8c:	|                     clr.b 571(sp)
		char readChar = ' ';
   14b90:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   14b96:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   14b9c:	|                     clr.w 566(sp)
		LONG tmp = 0;
   14ba0:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   14ba4:	|  ,----------------> move.l 546(sp),534(sp)
   14baa:	|  |                  move.l 1e8c8 <DOSBase>,d0
   14bb0:	|  |                  movea.l d0,a6
   14bb2:	|  |                  move.l 534(sp),d1
   14bb6:	|  |                  jsr -306(a6)
   14bba:	|  |                  move.l d0,530(sp)
   14bbe:	|  |                  move.l 530(sp),d0
   14bc2:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   14bc6:	|  |                  moveq #-1,d1
   14bc8:	|  |                  cmp.l 538(sp),d1
   14bcc:	|  |           ,----- bne.s 14bda <readIniFile+0x13c>
				readChar = '\n';
   14bce:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   14bd4:	|  |           |      clr.w 568(sp)
   14bd8:	|  |           |  ,-- bra.s 14be0 <readIniFile+0x142>
			} else {
				readChar = (char) tmp;
   14bda:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   14be0:	|  |              '-> move.b 570(sp),d0
   14be4:	|  |                  ext.w d0
   14be6:	|  |                  movea.w d0,a0
   14be8:	|  |                  moveq #61,d0
   14bea:	|  |                  cmp.l a0,d0
   14bec:	|  |     ,----------- beq.w 14d96 <readIniFile+0x2f8>
   14bf0:	|  |     |            moveq #61,d1
   14bf2:	|  |     |            cmp.l a0,d1
   14bf4:	|  |  ,--|----------- blt.w 14da2 <readIniFile+0x304>
   14bf8:	|  |  |  |            moveq #10,d0
   14bfa:	|  |  |  |            cmp.l a0,d0
   14bfc:	|  |  |  |        ,-- beq.s 14c06 <readIniFile+0x168>
   14bfe:	|  |  |  |        |   moveq #13,d1
   14c00:	|  |  |  |        |   cmp.l a0,d1
   14c02:	|  |  +--|--------|-- bne.w 14da2 <readIniFile+0x304>
				case '\n':
				case '\r':
				if (doingSecond) {
   14c06:	|  |  |  |        '-> tst.w 566(sp)
   14c0a:	|  |  |  |     ,----- beq.w 14d84 <readIniFile+0x2e6>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   14c0e:	|  |  |  |     |      pea 1bcf6 <talk.c.490538ff+0x64e>
   14c14:	|  |  |  |     |      move.l sp,d0
   14c16:	|  |  |  |     |      addi.l #269,d0
   14c1c:	|  |  |  |     |      move.l d0,-(sp)
   14c1e:	|  |  |  |     |      jsr 14f4a <strcmp>
   14c24:	|  |  |  |     |      addq.l #8,sp
   14c26:	|  |  |  |     |      tst.l d0
   14c28:	|  |  |  |     |  ,-- bne.s 14c42 <readIniFile+0x1a4>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   14c2a:	|  |  |  |     |  |   move.l sp,d0
   14c2c:	|  |  |  |     |  |   addq.l #8,d0
   14c2e:	|  |  |  |     |  |   move.l d0,-(sp)
   14c30:	|  |  |  |     |  |   jsr 14e3a <stringToInt>
   14c36:	|  |  |  |     |  |   addq.l #4,sp
   14c38:	|  |  |  |     |  |   move.l d0,1e99c <gameSettings>
   14c3e:	|  |  |  |     +--|-- bra.w 14d84 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   14c42:	|  |  |  |     |  '-> pea 1bcff <talk.c.490538ff+0x657>
   14c48:	|  |  |  |     |      move.l sp,d0
   14c4a:	|  |  |  |     |      addi.l #269,d0
   14c50:	|  |  |  |     |      move.l d0,-(sp)
   14c52:	|  |  |  |     |      jsr 14f4a <strcmp>
   14c58:	|  |  |  |     |      addq.l #8,sp
   14c5a:	|  |  |  |     |      tst.l d0
   14c5c:	|  |  |  |     |  ,-- bne.s 14c82 <readIniFile+0x1e4>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   14c5e:	|  |  |  |     |  |   move.l sp,d0
   14c60:	|  |  |  |     |  |   addq.l #8,d0
   14c62:	|  |  |  |     |  |   move.l d0,-(sp)
   14c64:	|  |  |  |     |  |   jsr 14e3a <stringToInt>
   14c6a:	|  |  |  |     |  |   addq.l #4,sp
   14c6c:	|  |  |  |     |  |   tst.l d0
   14c6e:	|  |  |  |     |  |   seq d0
   14c70:	|  |  |  |     |  |   neg.b d0
   14c72:	|  |  |  |     |  |   move.b d0,d0
   14c74:	|  |  |  |     |  |   andi.w #255,d0
   14c78:	|  |  |  |     |  |   move.w d0,1e9a4 <gameSettings+0x8>
   14c7e:	|  |  |  |     +--|-- bra.w 14d84 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   14c82:	|  |  |  |     |  '-> pea 1bd06 <talk.c.490538ff+0x65e>
   14c88:	|  |  |  |     |      move.l sp,d0
   14c8a:	|  |  |  |     |      addi.l #269,d0
   14c90:	|  |  |  |     |      move.l d0,-(sp)
   14c92:	|  |  |  |     |      jsr 14f4a <strcmp>
   14c98:	|  |  |  |     |      addq.l #8,sp
   14c9a:	|  |  |  |     |      tst.l d0
   14c9c:	|  |  |  |     |  ,-- bne.s 14cb6 <readIniFile+0x218>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   14c9e:	|  |  |  |     |  |   move.l sp,d0
   14ca0:	|  |  |  |     |  |   addq.l #8,d0
   14ca2:	|  |  |  |     |  |   move.l d0,-(sp)
   14ca4:	|  |  |  |     |  |   jsr 14e3a <stringToInt>
   14caa:	|  |  |  |     |  |   addq.l #4,sp
   14cac:	|  |  |  |     |  |   move.l d0,1e9a6 <gameSettings+0xa>
   14cb2:	|  |  |  |     +--|-- bra.w 14d84 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   14cb6:	|  |  |  |     |  '-> pea 1bd0e <talk.c.490538ff+0x666>
   14cbc:	|  |  |  |     |      move.l sp,d0
   14cbe:	|  |  |  |     |      addi.l #269,d0
   14cc4:	|  |  |  |     |      move.l d0,-(sp)
   14cc6:	|  |  |  |     |      jsr 14f4a <strcmp>
   14ccc:	|  |  |  |     |      addq.l #8,sp
   14cce:	|  |  |  |     |      tst.l d0
   14cd0:	|  |  |  |     |  ,-- bne.s 14cea <readIniFile+0x24c>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   14cd2:	|  |  |  |     |  |   move.l sp,d0
   14cd4:	|  |  |  |     |  |   addq.l #8,d0
   14cd6:	|  |  |  |     |  |   move.l d0,-(sp)
   14cd8:	|  |  |  |     |  |   jsr 14e3a <stringToInt>
   14cde:	|  |  |  |     |  |   addq.l #4,sp
   14ce0:	|  |  |  |     |  |   move.l d0,1e9aa <gameSettings+0xe>
   14ce6:	|  |  |  |     +--|-- bra.w 14d84 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   14cea:	|  |  |  |     |  '-> pea 1bd18 <talk.c.490538ff+0x670>
   14cf0:	|  |  |  |     |      move.l sp,d0
   14cf2:	|  |  |  |     |      addi.l #269,d0
   14cf8:	|  |  |  |     |      move.l d0,-(sp)
   14cfa:	|  |  |  |     |      jsr 14f4a <strcmp>
   14d00:	|  |  |  |     |      addq.l #8,sp
   14d02:	|  |  |  |     |      tst.l d0
   14d04:	|  |  |  |     |  ,-- bne.s 14d1e <readIniFile+0x280>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   14d06:	|  |  |  |     |  |   move.l sp,d0
   14d08:	|  |  |  |     |  |   addq.l #8,d0
   14d0a:	|  |  |  |     |  |   move.l d0,-(sp)
   14d0c:	|  |  |  |     |  |   jsr 14e3a <stringToInt>
   14d12:	|  |  |  |     |  |   addq.l #4,sp
   14d14:	|  |  |  |     |  |   move.l d0,d0
   14d16:	|  |  |  |     |  |   move.w d0,1e9ae <gameSettings+0x12>
   14d1c:	|  |  |  |     +--|-- bra.s 14d84 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   14d1e:	|  |  |  |     |  '-> pea 1bd24 <talk.c.490538ff+0x67c>
   14d24:	|  |  |  |     |      move.l sp,d0
   14d26:	|  |  |  |     |      addi.l #269,d0
   14d2c:	|  |  |  |     |      move.l d0,-(sp)
   14d2e:	|  |  |  |     |      jsr 14f4a <strcmp>
   14d34:	|  |  |  |     |      addq.l #8,sp
   14d36:	|  |  |  |     |      tst.l d0
   14d38:	|  |  |  |     |  ,-- bne.s 14d52 <readIniFile+0x2b4>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   14d3a:	|  |  |  |     |  |   move.l sp,d0
   14d3c:	|  |  |  |     |  |   addq.l #8,d0
   14d3e:	|  |  |  |     |  |   move.l d0,-(sp)
   14d40:	|  |  |  |     |  |   jsr 14e3a <stringToInt>
   14d46:	|  |  |  |     |  |   addq.l #4,sp
   14d48:	|  |  |  |     |  |   move.l d0,d0
   14d4a:	|  |  |  |     |  |   move.w d0,1e9b0 <gameSettings+0x14>
   14d50:	|  |  |  |     +--|-- bra.s 14d84 <readIniFile+0x2e6>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   14d52:	|  |  |  |     |  '-> pea 1bd32 <talk.c.490538ff+0x68a>
   14d58:	|  |  |  |     |      move.l sp,d0
   14d5a:	|  |  |  |     |      addi.l #269,d0
   14d60:	|  |  |  |     |      move.l d0,-(sp)
   14d62:	|  |  |  |     |      jsr 14f4a <strcmp>
   14d68:	|  |  |  |     |      addq.l #8,sp
   14d6a:	|  |  |  |     |      tst.l d0
   14d6c:	|  |  |  |     +----- bne.s 14d84 <readIniFile+0x2e6>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   14d6e:	|  |  |  |     |      move.l sp,d0
   14d70:	|  |  |  |     |      addq.l #8,d0
   14d72:	|  |  |  |     |      move.l d0,-(sp)
   14d74:	|  |  |  |     |      jsr 14e3a <stringToInt>
   14d7a:	|  |  |  |     |      addq.l #4,sp
   14d7c:	|  |  |  |     |      move.l d0,d0
   14d7e:	|  |  |  |     |      move.w d0,1e9b2 <gameSettings+0x16>
					}
				}
				here = 0;
   14d84:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   14d88:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   14d8c:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   14d90:	|  |  |  |            clr.b 8(sp)
				break;
   14d94:	|  |  |  |  ,-------- bra.s 14e0c <readIniFile+0x36e>

				case '=':
				doingSecond = TRUE;
   14d96:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   14d9c:	|  |  |     |         clr.b 571(sp)
				break;
   14da0:	|  |  |     +-------- bra.s 14e0c <readIniFile+0x36e>

				default:
				if (doingSecond) {
   14da2:	|  |  '-----|-------> tst.w 566(sp)
   14da6:	|  |        |  ,----- beq.s 14dda <readIniFile+0x33c>
					secondSoFar[here ++] = readChar;
   14da8:	|  |        |  |      move.b 571(sp),d0
   14dac:	|  |        |  |      move.b d0,d1
   14dae:	|  |        |  |      addq.b #1,d1
   14db0:	|  |        |  |      move.b d1,571(sp)
   14db4:	|  |        |  |      move.b d0,d0
   14db6:	|  |        |  |      andi.l #255,d0
   14dbc:	|  |        |  |      lea 572(sp),a0
   14dc0:	|  |        |  |      adda.l d0,a0
   14dc2:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   14dc8:	|  |        |  |      moveq #0,d0
   14dca:	|  |        |  |      move.b 571(sp),d0
   14dce:	|  |        |  |      lea 572(sp),a0
   14dd2:	|  |        |  |      adda.l d0,a0
   14dd4:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   14dd8:	|  |        |  |  ,-- bra.s 14e0a <readIniFile+0x36c>
					lineSoFar[here ++] = readChar;
   14dda:	|  |        |  '--|-> move.b 571(sp),d0
   14dde:	|  |        |     |   move.b d0,d1
   14de0:	|  |        |     |   addq.b #1,d1
   14de2:	|  |        |     |   move.b d1,571(sp)
   14de6:	|  |        |     |   move.b d0,d0
   14de8:	|  |        |     |   andi.l #255,d0
   14dee:	|  |        |     |   lea 572(sp),a0
   14df2:	|  |        |     |   adda.l d0,a0
   14df4:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   14dfa:	|  |        |     |   moveq #0,d0
   14dfc:	|  |        |     |   move.b 571(sp),d0
   14e00:	|  |        |     |   lea 572(sp),a0
   14e04:	|  |        |     |   adda.l d0,a0
   14e06:	|  |        |     |   clr.b -307(a0)
				break;
   14e0a:	|  |        |     '-> nop
			}
		} while (keepGoing);
   14e0c:	|  |        '-------> tst.w 568(sp)
   14e10:	|  '----------------- bne.w 14ba4 <readIniFile+0x106>

		Close(fp);
   14e14:	|                     move.l 546(sp),526(sp)
   14e1a:	|                     move.l 1e8c8 <DOSBase>,d0
   14e20:	|                     movea.l d0,a6
   14e22:	|                     move.l 526(sp),d1
   14e26:	|                     jsr -36(a6)
   14e2a:	|                     move.l d0,522(sp)
	}
}
   14e2e:	'-------------------> nop
   14e30:	                      move.l (sp)+,d2
   14e32:	                      movea.l (sp)+,a6
   14e34:	                      lea 564(sp),sp
   14e38:	                      rts

00014e3a <stringToInt>:

unsigned int stringToInt (char * s) {
   14e3a:	             subq.l #8,sp
	int i = 0;
   14e3c:	             clr.l 4(sp)
	BOOL negative = FALSE;
   14e40:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   14e44:	,----------> movea.l 12(sp),a0
   14e48:	|            move.b (a0),d0
   14e4a:	|            cmpi.b #47,d0
   14e4e:	|        ,-- ble.s 14e86 <stringToInt+0x4c>
   14e50:	|        |   movea.l 12(sp),a0
   14e54:	|        |   move.b (a0),d0
   14e56:	|        |   cmpi.b #57,d0
   14e5a:	|        +-- bgt.s 14e86 <stringToInt+0x4c>
			i *= 10;
   14e5c:	|        |   move.l 4(sp),d1
   14e60:	|        |   move.l d1,d0
   14e62:	|        |   add.l d0,d0
   14e64:	|        |   add.l d0,d0
   14e66:	|        |   add.l d1,d0
   14e68:	|        |   add.l d0,d0
   14e6a:	|        |   move.l d0,4(sp)
			i += *s - '0';
   14e6e:	|        |   movea.l 12(sp),a0
   14e72:	|        |   move.b (a0),d0
   14e74:	|        |   ext.w d0
   14e76:	|        |   movea.w d0,a0
   14e78:	|        |   moveq #-48,d0
   14e7a:	|        |   add.l a0,d0
   14e7c:	|        |   add.l d0,4(sp)
			s ++;
   14e80:	|        |   addq.l #1,12(sp)
   14e84:	|  ,-----|-- bra.s 14ebe <stringToInt+0x84>
		} else if (*s == '-') {
   14e86:	|  |     '-> movea.l 12(sp),a0
   14e8a:	|  |         move.b (a0),d0
   14e8c:	|  |         cmpi.b #45,d0
   14e90:	|  |     ,-- bne.s 14eaa <stringToInt+0x70>
			negative = ! negative;
   14e92:	|  |     |   tst.w 2(sp)
   14e96:	|  |     |   seq d0
   14e98:	|  |     |   neg.b d0
   14e9a:	|  |     |   move.b d0,d0
   14e9c:	|  |     |   andi.w #255,d0
   14ea0:	|  |     |   move.w d0,2(sp)
			s++;
   14ea4:	|  |     |   addq.l #1,12(sp)
   14ea8:	+--|-----|-- bra.s 14e44 <stringToInt+0xa>
		} else {
			if (negative)
   14eaa:	|  |     '-> tst.w 2(sp)
   14eae:	|  |     ,-- beq.s 14eb8 <stringToInt+0x7e>
				return -i;
   14eb0:	|  |     |   move.l 4(sp),d0
   14eb4:	|  |     |   neg.l d0
   14eb6:	|  |  ,--|-- bra.s 14ec0 <stringToInt+0x86>
			return i;
   14eb8:	|  |  |  '-> move.l 4(sp),d0
   14ebc:	|  |  +----- bra.s 14ec0 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   14ebe:	'--'--|----X bra.s 14e44 <stringToInt+0xa>
		}
	}
   14ec0:	      '----> addq.l #8,sp
   14ec2:	             rts

00014ec4 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   14ec4:	    lea -28(sp),sp
   14ec8:	    move.l a6,-(sp)
   14eca:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   14ecc:	    pea 1bd3c <talk.c.490538ff+0x694>
   14ed2:	    jsr 1857e <KPrintF>
   14ed8:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   14eda:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   14ede:	    move.l 40(sp),30(sp)
   14ee4:	    move.l #1005,26(sp)
   14eec:	    move.l 1e8c8 <DOSBase>,d0
   14ef2:	    movea.l d0,a6
   14ef4:	    move.l 30(sp),d1
   14ef8:	    move.l 26(sp),d2
   14efc:	    jsr -30(a6)
   14f00:	    move.l d0,22(sp)
   14f04:	    move.l 22(sp),d0
   14f08:	    move.l d0,18(sp)
	if (tester) {
   14f0c:	,-- beq.s 14f3c <fileExists+0x78>
		KPrintF("fileexists: File exists");
   14f0e:	|   pea 1bd56 <talk.c.490538ff+0x6ae>
   14f14:	|   jsr 1857e <KPrintF>
   14f1a:	|   addq.l #4,sp
		retval = 1;
   14f1c:	|   move.b #1,35(sp)
		Close(tester);
   14f22:	|   move.l 18(sp),14(sp)
   14f28:	|   move.l 1e8c8 <DOSBase>,d0
   14f2e:	|   movea.l d0,a6
   14f30:	|   move.l 14(sp),d1
   14f34:	|   jsr -36(a6)
   14f38:	|   move.l d0,10(sp)
	}
	return retval;
   14f3c:	'-> move.b 35(sp),d0
   14f40:	    move.l (sp)+,d2
   14f42:	    movea.l (sp)+,a6
   14f44:	    lea 28(sp),sp
   14f48:	    rts

00014f4a <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   14f4a:	   ,-- bra.s 14f54 <strcmp+0xa>
    {
        s1++;
   14f4c:	,--|-> addq.l #1,4(sp)
        s2++;
   14f50:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   14f54:	|  '-> movea.l 4(sp),a0
   14f58:	|      move.b (a0),d0
   14f5a:	|  ,-- beq.s 14f6c <strcmp+0x22>
   14f5c:	|  |   movea.l 4(sp),a0
   14f60:	|  |   move.b (a0),d1
   14f62:	|  |   movea.l 8(sp),a0
   14f66:	|  |   move.b (a0),d0
   14f68:	|  |   cmp.b d1,d0
   14f6a:	'--|-- beq.s 14f4c <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   14f6c:	   '-> movea.l 4(sp),a0
   14f70:	       move.b (a0),d0
   14f72:	       moveq #0,d1
   14f74:	       move.b d0,d1
   14f76:	       movea.l 8(sp),a0
   14f7a:	       move.b (a0),d0
   14f7c:	       move.b d0,d0
   14f7e:	       andi.l #255,d0
   14f84:	       sub.l d0,d1
   14f86:	       move.l d1,d0
}
   14f88:	       rts

00014f8a <strlen>:

long unsigned int strlen (const char *s) 
{  
   14f8a:	       subq.l #4,sp
	long unsigned int i = 0;
   14f8c:	       clr.l (sp)
	while(s[i]) i++; 
   14f8e:	   ,-- bra.s 14f92 <strlen+0x8>
   14f90:	,--|-> addq.l #1,(sp)
   14f92:	|  '-> movea.l 8(sp),a0
   14f96:	|      adda.l (sp),a0
   14f98:	|      move.b (a0),d0
   14f9a:	'----- bne.s 14f90 <strlen+0x6>
	return(i);
   14f9c:	       move.l (sp),d0
}
   14f9e:	       addq.l #4,sp
   14fa0:	       rts

00014fa2 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   14fa2:	    nop
   14fa4:	,-> move.l 8(sp),d0
   14fa8:	|   move.l d0,d1
   14faa:	|   addq.l #1,d1
   14fac:	|   move.l d1,8(sp)
   14fb0:	|   movea.l 4(sp),a0
   14fb4:	|   lea 1(a0),a1
   14fb8:	|   move.l a1,4(sp)
   14fbc:	|   movea.l d0,a1
   14fbe:	|   move.b (a1),d0
   14fc0:	|   move.b d0,(a0)
   14fc2:	|   move.b (a0),d0
   14fc4:	'-- bne.s 14fa4 <strcpy+0x2>
}
   14fc6:	    nop
   14fc8:	    rts

00014fca <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   14fca:	    lea -20(sp),sp
   14fce:	    move.l a6,-(sp)
   14fd0:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   14fd2:	    move.l 32(sp),-(sp)
   14fd6:	    jsr 14f8a <strlen>
   14fdc:	    addq.l #4,sp
   14fde:	    move.l d0,d2
   14fe0:	    move.l 36(sp),-(sp)
   14fe4:	    jsr 14f8a <strlen>
   14fea:	    addq.l #4,sp
   14fec:	    add.l d2,d0
   14fee:	    move.l d0,d1
   14ff0:	    addq.l #1,d1
   14ff2:	    move.l d1,20(sp)
   14ff6:	    clr.l 16(sp)
   14ffa:	    move.l 1e8c0 <SysBase>,d0
   15000:	    movea.l d0,a6
   15002:	    move.l 20(sp),d0
   15006:	    move.l 16(sp),d1
   1500a:	    jsr -684(a6)
   1500e:	    move.l d0,12(sp)
   15012:	    move.l 12(sp),d0
   15016:	    move.l d0,8(sp)
	char * t = newString;
   1501a:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   15020:	    nop
   15022:	,-> move.l 32(sp),d0
   15026:	|   move.l d0,d1
   15028:	|   addq.l #1,d1
   1502a:	|   move.l d1,32(sp)
   1502e:	|   movea.l 24(sp),a0
   15032:	|   lea 1(a0),a1
   15036:	|   move.l a1,24(sp)
   1503a:	|   movea.l d0,a1
   1503c:	|   move.b (a1),d0
   1503e:	|   move.b d0,(a0)
   15040:	|   move.b (a0),d0
   15042:	'-- bne.s 15022 <joinStrings+0x58>
	t--;
   15044:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   15048:	    nop
   1504a:	,-> move.l 36(sp),d0
   1504e:	|   move.l d0,d1
   15050:	|   addq.l #1,d1
   15052:	|   move.l d1,36(sp)
   15056:	|   movea.l 24(sp),a0
   1505a:	|   lea 1(a0),a1
   1505e:	|   move.l a1,24(sp)
   15062:	|   movea.l d0,a1
   15064:	|   move.b (a1),d0
   15066:	|   move.b d0,(a0)
   15068:	|   move.b (a0),d0
   1506a:	'-- bne.s 1504a <joinStrings+0x80>

	return newString;
   1506c:	    move.l 8(sp),d0
}
   15070:	    move.l (sp)+,d2
   15072:	    movea.l (sp)+,a6
   15074:	    lea 20(sp),sp
   15078:	    rts

0001507a <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   1507a:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   1507e:	       moveq #10,d0
   15080:	       cmp.l 28(sp),d0
   15084:	   ,-- bne.s 150a2 <itoa+0x28>
   15086:	   |   tst.l 20(sp)
   1508a:	   +-- bge.s 150a2 <itoa+0x28>
        *str++ = '-';
   1508c:	   |   move.l 24(sp),d0
   15090:	   |   move.l d0,d1
   15092:	   |   addq.l #1,d1
   15094:	   |   move.l d1,24(sp)
   15098:	   |   movea.l d0,a0
   1509a:	   |   move.b #45,(a0)
        value *= -1;
   1509e:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   150a2:	   '-> move.l 24(sp),12(sp)
   150a8:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   150ae:	   ,-> move.l 20(sp),d0
   150b2:	   |   move.l 28(sp),-(sp)
   150b6:	   |   move.l d0,-(sp)
   150b8:	   |   jsr 18fb6 <__modsi3>
   150be:	   |   addq.l #8,sp
   150c0:	   |   movea.l d0,a1
   150c2:	   |   move.l 12(sp),d0
   150c6:	   |   move.l d0,d1
   150c8:	   |   addq.l #1,d1
   150ca:	   |   move.l d1,12(sp)
   150ce:	   |   lea 1bd6e <talk.c.490538ff+0x6c6>,a0
   150d4:	   |   move.b (0,a1,a0.l),d1
   150d8:	   |   movea.l d0,a0
   150da:	   |   move.b d1,(a0)
        value /= base;
   150dc:	   |   move.l 28(sp),-(sp)
   150e0:	   |   move.l 24(sp),-(sp)
   150e4:	   |   jsr 18f88 <__divsi3>
   150ea:	   |   addq.l #8,sp
   150ec:	   |   move.l d0,20(sp)
    } while (value);
   150f0:	   '-- bne.s 150ae <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   150f2:	       move.l 12(sp),d0
   150f6:	       move.l d0,d1
   150f8:	       subq.l #1,d1
   150fa:	       move.l d1,12(sp)
   150fe:	       movea.l d0,a0
   15100:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   15102:	       move.l 4(sp),8(sp)
   15108:	   ,-- bra.s 1512e <itoa+0xb4>
        char temp = *low;
   1510a:	,--|-> movea.l 8(sp),a0
   1510e:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   15112:	|  |   movea.l 12(sp),a0
   15116:	|  |   move.b (a0),d0
   15118:	|  |   movea.l 8(sp),a0
   1511c:	|  |   move.b d0,(a0)
        *ptr = temp;
   1511e:	|  |   movea.l 12(sp),a0
   15122:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   15126:	|  |   addq.l #1,8(sp)
   1512a:	|  |   subq.l #1,12(sp)
   1512e:	|  '-> move.l 8(sp),d0
   15132:	|      cmp.l 12(sp),d0
   15136:	'----- bcs.s 1510a <itoa+0x90>
    }
    return rc;
   15138:	       move.l 4(sp),d0
}
   1513c:	       lea 16(sp),sp
   15140:	       rts

00015142 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   15142:	                            lea -40(sp),sp
   15146:	                            move.l d2,-(sp)
    char* s = str;
   15148:	                            move.l 48(sp),40(sp)
    const char* p = format;
   1514e:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   15154:	   ,----------------------- bra.w 15288 <vsprintf2+0x146>
        if (*p == '%') {
   15158:	,--|----------------------> movea.l 36(sp),a0
   1515c:	|  |                        move.b (a0),d0
   1515e:	|  |                        cmpi.b #37,d0
   15162:	|  |  ,-------------------- bne.w 1526e <vsprintf2+0x12c>
            switch (*++p) {
   15166:	|  |  |                     addq.l #1,36(sp)
   1516a:	|  |  |                     movea.l 36(sp),a0
   1516e:	|  |  |                     move.b (a0),d0
   15170:	|  |  |                     ext.w d0
   15172:	|  |  |                     movea.w d0,a0
   15174:	|  |  |                     moveq #115,d0
   15176:	|  |  |                     cmp.l a0,d0
   15178:	|  |  |           ,-------- beq.s 151f0 <vsprintf2+0xae>
   1517a:	|  |  |           |         moveq #115,d1
   1517c:	|  |  |           |         cmp.l a0,d1
   1517e:	|  |  |  ,--------|-------- blt.w 15256 <vsprintf2+0x114>
   15182:	|  |  |  |        |         moveq #99,d2
   15184:	|  |  |  |        |         cmp.l a0,d2
   15186:	|  |  |  |  ,-----|-------- beq.w 1522e <vsprintf2+0xec>
   1518a:	|  |  |  |  |     |         moveq #100,d0
   1518c:	|  |  |  |  |     |         cmp.l a0,d0
   1518e:	|  |  |  +--|-----|-------- bne.w 15256 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   15192:	|  |  |  |  |     |         addq.l #4,56(sp)
   15196:	|  |  |  |  |     |         movea.l 56(sp),a0
   1519a:	|  |  |  |  |     |         move.l (a0),d0
   1519c:	|  |  |  |  |     |         move.l d0,d1
   1519e:	|  |  |  |  |     |         subq.l #1,d1
   151a0:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   151a4:	|  |  |  |  |     |         pea a <_start+0xa>
   151a8:	|  |  |  |  |     |         lea 8(sp),a0
   151ac:	|  |  |  |  |     |         move.l a0,-(sp)
   151ae:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   151b2:	|  |  |  |  |     |         jsr 1507a <itoa>
   151b8:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   151bc:	|  |  |  |  |     |         lea 44(sp),a0
   151c0:	|  |  |  |  |     |         lea -40(a0),a0
   151c4:	|  |  |  |  |     |         move.l a0,28(sp)
   151c8:	|  |  |  |  |     |     ,-- bra.s 151e4 <vsprintf2+0xa2>
                        *s++ = *b;
   151ca:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   151ce:	|  |  |  |  |     |  |  |   move.l d0,d1
   151d0:	|  |  |  |  |     |  |  |   addq.l #1,d1
   151d2:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   151d6:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   151da:	|  |  |  |  |     |  |  |   move.b (a0),d1
   151dc:	|  |  |  |  |     |  |  |   movea.l d0,a0
   151de:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   151e0:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   151e4:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   151e8:	|  |  |  |  |     |  |      move.b (a0),d0
   151ea:	|  |  |  |  |     |  '----- bne.s 151ca <vsprintf2+0x88>
                    }
                    break;
   151ec:	|  |  |  |  |  ,--|-------- bra.w 15284 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   151f0:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   151f4:	|  |  |  |  |  |            movea.l 56(sp),a0
   151f8:	|  |  |  |  |  |            move.l (a0),d0
   151fa:	|  |  |  |  |  |            move.l d0,d1
   151fc:	|  |  |  |  |  |            subq.l #1,d1
   151fe:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   15202:	|  |  |  |  |  |        ,-- bra.s 15224 <vsprintf2+0xe2>
                        *s++ = *sval++;
   15204:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   15208:	|  |  |  |  |  |     |  |   move.l d1,d2
   1520a:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1520c:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   15210:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   15214:	|  |  |  |  |  |     |  |   move.l d0,d2
   15216:	|  |  |  |  |  |     |  |   addq.l #1,d2
   15218:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   1521c:	|  |  |  |  |  |     |  |   movea.l d1,a0
   1521e:	|  |  |  |  |  |     |  |   move.b (a0),d1
   15220:	|  |  |  |  |  |     |  |   movea.l d0,a0
   15222:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   15224:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   15228:	|  |  |  |  |  |     |      move.b (a0),d0
   1522a:	|  |  |  |  |  |     '----- bne.s 15204 <vsprintf2+0xc2>
                    }
                    break;
   1522c:	|  |  |  |  |  +----------- bra.s 15284 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   1522e:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   15232:	|  |  |  |     |            movea.l 56(sp),a0
   15236:	|  |  |  |     |            move.l (a0),d0
   15238:	|  |  |  |     |            move.l d0,d1
   1523a:	|  |  |  |     |            subq.l #1,d1
   1523c:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   15240:	|  |  |  |     |            move.l 40(sp),d0
   15244:	|  |  |  |     |            move.l d0,d2
   15246:	|  |  |  |     |            addq.l #1,d2
   15248:	|  |  |  |     |            move.l d2,40(sp)
   1524c:	|  |  |  |     |            move.l 24(sp),d1
   15250:	|  |  |  |     |            movea.l d0,a0
   15252:	|  |  |  |     |            move.b d1,(a0)
                    break;
   15254:	|  |  |  |     +----------- bra.s 15284 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   15256:	|  |  |  '-----|----------> move.l 40(sp),d0
   1525a:	|  |  |        |            move.l d0,d1
   1525c:	|  |  |        |            addq.l #1,d1
   1525e:	|  |  |        |            move.l d1,40(sp)
   15262:	|  |  |        |            movea.l 36(sp),a0
   15266:	|  |  |        |            move.b (a0),d1
   15268:	|  |  |        |            movea.l d0,a0
   1526a:	|  |  |        |            move.b d1,(a0)
                    break;
   1526c:	|  |  |        +----------- bra.s 15284 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   1526e:	|  |  '--------|----------> move.l 40(sp),d0
   15272:	|  |           |            move.l d0,d1
   15274:	|  |           |            addq.l #1,d1
   15276:	|  |           |            move.l d1,40(sp)
   1527a:	|  |           |            movea.l 36(sp),a0
   1527e:	|  |           |            move.b (a0),d1
   15280:	|  |           |            movea.l d0,a0
   15282:	|  |           |            move.b d1,(a0)
        }
        p++;
   15284:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   15288:	|  '----------------------> movea.l 36(sp),a0
   1528c:	|                           move.b (a0),d0
   1528e:	'-------------------------- bne.w 15158 <vsprintf2+0x16>
    }
    *s = '\0';
   15292:	                            movea.l 40(sp),a0
   15296:	                            clr.b (a0)
    return s - str;
   15298:	                            move.l 40(sp),d0
   1529c:	                            sub.l 48(sp),d0
}
   152a0:	                            move.l (sp)+,d2
   152a2:	                            lea 40(sp),sp
   152a6:	                            rts

000152a8 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   152a8:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   152aa:	moveq #16,d0
   152ac:	add.l sp,d0
   152ae:	move.l d0,d1
   152b0:	addq.l #4,d1
   152b2:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   152b6:	move.l 16(sp),d0
   152ba:	move.l 4(sp),-(sp)
   152be:	move.l d0,-(sp)
   152c0:	move.l 20(sp),-(sp)
   152c4:	jsr 15142 <vsprintf2>
   152ca:	lea 12(sp),sp
   152ce:	move.l d0,(sp)
    va_end(args);
   152d0:	clr.l 4(sp)

    return done;
   152d4:	move.l (sp),d0
}
   152d6:	addq.l #8,sp
   152d8:	rts

000152da <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   152da:	       lea -20(sp),sp
   152de:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   152e0:	       moveq #12,d0
   152e2:	       move.l d0,20(sp)
   152e6:	       clr.l 16(sp)
   152ea:	       move.l 1e8c0 <SysBase>,d0
   152f0:	       movea.l d0,a6
   152f2:	       move.l 20(sp),d0
   152f6:	       move.l 16(sp),d1
   152fa:	       jsr -684(a6)
   152fe:	       move.l d0,12(sp)
   15302:	       move.l 12(sp),d0
   15306:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   1530a:	   ,-- bne.s 15310 <addVarToStack+0x36>
   1530c:	   |   clr.w d0
   1530e:	,--|-- bra.s 15358 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   15310:	|  '-> move.l 8(sp),d0
   15314:	|      move.l d0,-(sp)
   15316:	|      move.l 32(sp),-(sp)
   1531a:	|      jsr 15e3c <copyMain>
   15320:	|      addq.l #8,sp
   15322:	|      tst.w d0
   15324:	|  ,-- bne.s 15340 <addVarToStack+0x66>
        FreeVec(newStack);
   15326:	|  |   move.l 8(sp),4(sp)
   1532c:	|  |   move.l 1e8c0 <SysBase>,d0
   15332:	|  |   movea.l d0,a6
   15334:	|  |   movea.l 4(sp),a1
   15338:	|  |   jsr -690(a6)
        return FALSE;
   1533c:	|  |   clr.w d0
   1533e:	+--|-- bra.s 15358 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   15340:	|  '-> movea.l 32(sp),a0
   15344:	|      move.l (a0),d0
   15346:	|      movea.l 8(sp),a0
   1534a:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1534e:	|      movea.l 32(sp),a0
   15352:	|      move.l 8(sp),(a0)
    return TRUE;
   15356:	|      moveq #1,d0
}
   15358:	'----> movea.l (sp)+,a6
   1535a:	       lea 20(sp),sp
   1535e:	       rts

00015360 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   15360:	       lea -16(sp),sp
   15364:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   15366:	       moveq #12,d0
   15368:	       move.l d0,16(sp)
   1536c:	       clr.l 12(sp)
   15370:	       move.l 1e8c0 <SysBase>,d0
   15376:	       movea.l d0,a6
   15378:	       move.l 16(sp),d0
   1537c:	       move.l 12(sp),d1
   15380:	       jsr -684(a6)
   15384:	       move.l d0,8(sp)
   15388:	       move.l 8(sp),d0
   1538c:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   15390:	   ,-- bne.s 15396 <addVarToStackQuick+0x36>
   15392:	   |   clr.w d0
   15394:	,--|-- bra.s 153cc <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   15396:	|  '-> move.l 4(sp),d0
   1539a:	|      pea 8 <_start+0x8>
   1539e:	|      move.l 28(sp),-(sp)
   153a2:	|      move.l d0,-(sp)
   153a4:	|      jsr 18532 <memcpy>
   153aa:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   153ae:	|      movea.l 24(sp),a0
   153b2:	|      clr.l (a0)

    newStack->next = *thisStack;
   153b4:	|      movea.l 28(sp),a0
   153b8:	|      move.l (a0),d0
   153ba:	|      movea.l 4(sp),a0
   153be:	|      move.l d0,8(a0)
    *thisStack = newStack;
   153c2:	|      movea.l 28(sp),a0
   153c6:	|      move.l 4(sp),(a0)
    return TRUE;
   153ca:	|      moveq #1,d0
}
   153cc:	'----> movea.l (sp)+,a6
   153ce:	       lea 16(sp),sp
   153d2:	       rts

000153d4 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   153d4:	       lea -16(sp),sp
   153d8:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   153da:	       movea.l 24(sp),a0
   153de:	       move.l (a0),d0
   153e0:	       moveq #1,d1
   153e2:	       cmp.l d0,d1
   153e4:	   ,-- bne.s 1540e <addVariablesInSecond+0x3a>
   153e6:	   |   movea.l 28(sp),a0
   153ea:	   |   move.l (a0),d0
   153ec:	   |   moveq #1,d1
   153ee:	   |   cmp.l d0,d1
   153f0:	   +-- bne.s 1540e <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   153f2:	   |   movea.l 28(sp),a0
   153f6:	   |   move.l 4(a0),d1
   153fa:	   |   movea.l 24(sp),a0
   153fe:	   |   move.l 4(a0),d0
   15402:	   |   add.l d1,d0
   15404:	   |   movea.l 28(sp),a0
   15408:	   |   move.l d0,4(a0)
   1540c:	,--|-- bra.s 15488 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   1540e:	|  '-> move.l 24(sp),-(sp)
   15412:	|      jsr 16074 <getTextFromAnyVar>
   15418:	|      addq.l #4,sp
   1541a:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   1541e:	|      move.l 28(sp),-(sp)
   15422:	|      jsr 16074 <getTextFromAnyVar>
   15428:	|      addq.l #4,sp
   1542a:	|      move.l d0,12(sp)

		unlinkVar(var2);
   1542e:	|      move.l 28(sp),-(sp)
   15432:	|      jsr 15cec <unlinkVar>
   15438:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   1543a:	|      move.l 12(sp),-(sp)
   1543e:	|      move.l 20(sp),-(sp)
   15442:	|      jsr 14fca <joinStrings>
   15448:	|      addq.l #8,sp
   1544a:	|      movea.l 28(sp),a0
   1544e:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   15452:	|      movea.l 28(sp),a0
   15456:	|      moveq #3,d0
   15458:	|      move.l d0,(a0)
		FreeVec(string1);
   1545a:	|      move.l 16(sp),8(sp)
   15460:	|      move.l 1e8c0 <SysBase>,d0
   15466:	|      movea.l d0,a6
   15468:	|      movea.l 8(sp),a1
   1546c:	|      jsr -690(a6)
		FreeVec(string2);
   15470:	|      move.l 12(sp),4(sp)
   15476:	|      move.l 1e8c0 <SysBase>,d0
   1547c:	|      movea.l d0,a6
   1547e:	|      movea.l 4(sp),a1
   15482:	|      jsr -690(a6)
	}
}
   15486:	|      nop
   15488:	'----> nop
   1548a:	       movea.l (sp)+,a6
   1548c:	       lea 16(sp),sp
   15490:	       rts

00015492 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   15492:	movea.l 8(sp),a0
   15496:	move.l 4(a0),-(sp)
   1549a:	move.l (a0),-(sp)
   1549c:	movea.l 12(sp),a0
   154a0:	move.l 4(a0),-(sp)
   154a4:	move.l (a0),-(sp)
   154a6:	jsr 154c8 <compareVars>
   154ac:	lea 16(sp),sp
   154b0:	move.l d0,-(sp)
   154b2:	pea 1 <_start+0x1>
   154b6:	move.l 16(sp),-(sp)
   154ba:	jsr 16390 <setVariable>
   154c0:	lea 12(sp),sp
}
   154c4:	nop
   154c6:	rts

000154c8 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   154c8:	       subq.l #4,sp
	int re = 0;
   154ca:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   154cc:	       move.l 8(sp),d1
   154d0:	       move.l 16(sp),d0
   154d4:	       cmp.l d1,d0
   154d6:	,----- bne.w 1559e <compareVars+0xd6>
		switch (var1.varType) {
   154da:	|      move.l 8(sp),d0
   154de:	|      moveq #9,d1
   154e0:	|      cmp.l d0,d1
   154e2:	|  ,-- bcs.w 15586 <compareVars+0xbe>
   154e6:	|  |   add.l d0,d0
   154e8:	|  |   movea.l d0,a0
   154ea:	|  |   adda.l #87286,a0
   154f0:	|  |   move.w (a0),d0
   154f2:	|  |   jmp (154f6 <compareVars+0x2e>,pc,d0.w)
   154f6:	|  |   ori.b #-112,(a4)
   154fa:	|  |   ori.l #5243024,(a0)
   15500:	|  |   ori.l #7733392,(a0)
   15506:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1550c:	|  |   move.l d0,(sp)
			break;
   1550e:	+--|-- bra.w 1559e <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   15512:	|  |   move.l 12(sp),d1
   15516:	|  |   move.l 20(sp),d0
   1551a:	|  |   cmp.l d1,d0
   1551c:	|  |   seq d0
   1551e:	|  |   neg.b d0
   15520:	|  |   move.b d0,d0
   15522:	|  |   andi.l #255,d0
   15528:	|  |   move.l d0,(sp)
			break;
   1552a:	+--|-- bra.s 1559e <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   1552c:	|  |   move.l 12(sp),d1
   15530:	|  |   move.l 20(sp),d0
   15534:	|  |   cmp.l d1,d0
   15536:	|  |   seq d0
   15538:	|  |   neg.b d0
   1553a:	|  |   move.b d0,d0
   1553c:	|  |   andi.l #255,d0
   15542:	|  |   move.l d0,(sp)
			break;
   15544:	+--|-- bra.s 1559e <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   15546:	|  |   move.l 20(sp),d1
   1554a:	|  |   move.l 12(sp),d0
   1554e:	|  |   move.l d1,-(sp)
   15550:	|  |   move.l d0,-(sp)
   15552:	|  |   jsr 14f4a <strcmp>
   15558:	|  |   addq.l #8,sp
   1555a:	|  |   tst.l d0
   1555c:	|  |   seq d0
   1555e:	|  |   neg.b d0
   15560:	|  |   move.b d0,d0
   15562:	|  |   andi.l #255,d0
   15568:	|  |   move.l d0,(sp)
			break;
   1556a:	+--|-- bra.s 1559e <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   1556c:	|  |   move.l 12(sp),d1
   15570:	|  |   move.l 20(sp),d0
   15574:	|  |   cmp.l d1,d0
   15576:	|  |   seq d0
   15578:	|  |   neg.b d0
   1557a:	|  |   move.b d0,d0
   1557c:	|  |   andi.l #255,d0
   15582:	|  |   move.l d0,(sp)
			break;
   15584:	+--|-- bra.s 1559e <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   15586:	|  '-> move.l 12(sp),d1
   1558a:	|      move.l 20(sp),d0
   1558e:	|      cmp.l d1,d0
   15590:	|      seq d0
   15592:	|      neg.b d0
   15594:	|      move.b d0,d0
   15596:	|      andi.l #255,d0
   1559c:	|      move.l d0,(sp)
		}
	}
	return re;
   1559e:	'----> move.l (sp),d0
}
   155a0:	       addq.l #4,sp
   155a2:	       rts

000155a4 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   155a4:	             lea -16(sp),sp
   155a8:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   155aa:	             movea.l 28(sp),a0
   155ae:	             moveq #6,d0
   155b0:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   155b2:	             moveq #12,d0
   155b4:	             move.l d0,12(sp)
   155b8:	             clr.l 8(sp)
   155bc:	             move.l 1e8c0 <SysBase>,d0
   155c2:	             movea.l d0,a6
   155c4:	             move.l 12(sp),d0
   155c8:	             move.l 8(sp),d1
   155cc:	             jsr -684(a6)
   155d0:	             move.l d0,4(sp)
   155d4:	             move.l 4(sp),d0
   155d8:	             movea.l 28(sp),a0
   155dc:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   155e0:	             movea.l 28(sp),a0
   155e4:	             move.l 4(a0),d0
   155e8:	         ,-- bne.s 155f0 <copyStack+0x4c>
   155ea:	         |   clr.w d0
   155ec:	,--------|-- bra.w 15672 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   155f0:	|        '-> movea.l 28(sp),a0
   155f4:	|            movea.l 4(a0),a0
   155f8:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   155fa:	|            movea.l 28(sp),a0
   155fe:	|            movea.l 4(a0),a0
   15602:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   15606:	|            movea.l 28(sp),a0
   1560a:	|            movea.l 4(a0),a0
   1560e:	|            moveq #1,d0
   15610:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   15614:	|            movea.l 24(sp),a0
   15618:	|            movea.l 4(a0),a0
   1561c:	|            move.l (a0),16(sp)

	while (a) {
   15620:	|     ,----- bra.s 1566a <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   15622:	|  ,--|----> movea.l 28(sp),a0
   15626:	|  |  |      move.l 4(a0),d0
   1562a:	|  |  |      move.l d0,d1
   1562c:	|  |  |      move.l 16(sp),d0
   15630:	|  |  |      move.l d1,-(sp)
   15632:	|  |  |      move.l d0,-(sp)
   15634:	|  |  |      jsr 152da <addVarToStack>
   1563a:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   1563c:	|  |  |      movea.l 28(sp),a0
   15640:	|  |  |      movea.l 4(a0),a0
   15644:	|  |  |      move.l 4(a0),d0
   15648:	|  |  |  ,-- bne.s 15660 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   1564a:	|  |  |  |   movea.l 28(sp),a0
   1564e:	|  |  |  |   movea.l 4(a0),a1
   15652:	|  |  |  |   movea.l 28(sp),a0
   15656:	|  |  |  |   movea.l 4(a0),a0
   1565a:	|  |  |  |   move.l (a1),d0
   1565c:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   15660:	|  |  |  '-> movea.l 16(sp),a0
   15664:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   1566a:	|  |  '----> tst.l 16(sp)
   1566e:	|  '-------- bne.s 15622 <copyStack+0x7e>
	}

	return TRUE;
   15670:	|            moveq #1,d0
}
   15672:	'----------> movea.l (sp)+,a6
   15674:	             lea 16(sp),sp
   15678:	             rts

0001567a <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   1567a:	                lea -20(sp),sp
   1567e:	                move.l a6,-(sp)
   15680:	                move.l 36(sp),d0
   15684:	                move.w d0,d0
   15686:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   1568a:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   15690:	                clr.l 16(sp)

    while (*huntVar) {
   15694:	   ,----------- bra.s 15712 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   15696:	,--|----------> movea.l 20(sp),a0
   1569a:	|  |            movea.l (a0),a0
   1569c:	|  |            movea.l 28(sp),a1
   156a0:	|  |            move.l 4(a1),-(sp)
   156a4:	|  |            move.l (a1),-(sp)
   156a6:	|  |            move.l 4(a0),-(sp)
   156aa:	|  |            move.l (a0),-(sp)
   156ac:	|  |            jsr 154c8 <compareVars>
   156b2:	|  |            lea 16(sp),sp
   156b6:	|  |            tst.l d0
   156b8:	|  |  ,-------- beq.s 15704 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   156ba:	|  |  |         movea.l 20(sp),a0
   156be:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   156c2:	|  |  |         movea.l 12(sp),a0
   156c6:	|  |  |         move.l 8(a0),d0
   156ca:	|  |  |         movea.l 20(sp),a0
   156ce:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   156d0:	|  |  |         move.l 12(sp),d0
   156d4:	|  |  |         move.l d0,-(sp)
   156d6:	|  |  |         jsr 15cec <unlinkVar>
   156dc:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   156de:	|  |  |         move.l 12(sp),8(sp)
   156e4:	|  |  |         move.l 1e8c0 <SysBase>,d0
   156ea:	|  |  |         movea.l d0,a6
   156ec:	|  |  |         movea.l 8(sp),a1
   156f0:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   156f4:	|  |  |         tst.w 6(sp)
   156f8:	|  |  |     ,-- bne.s 156fe <deleteVarFromStack+0x84>
   156fa:	|  |  |     |   moveq #1,d0
   156fc:	|  |  |  ,--|-- bra.s 15720 <deleteVarFromStack+0xa6>
            reply++;
   156fe:	|  |  |  |  '-> addq.l #1,16(sp)
   15702:	|  +--|--|----- bra.s 15712 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   15704:	|  |  '--|----> movea.l 20(sp),a0
   15708:	|  |     |      move.l (a0),d0
   1570a:	|  |     |      move.l d0,d1
   1570c:	|  |     |      addq.l #8,d1
   1570e:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   15712:	|  '-----|----> movea.l 20(sp),a0
   15716:	|        |      move.l (a0),d0
   15718:	'--------|----- bne.w 15696 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1571c:	         |      move.l 16(sp),d0
}
   15720:	         '----> movea.l (sp)+,a6
   15722:	                lea 20(sp),sp
   15726:	                rts

00015728 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   15728:	       movea.l 4(sp),a0
   1572c:	       move.l 4(a0),d0
   15730:	       cmp.l 8(sp),d0
   15734:	   ,-- bhi.s 1573a <fastArrayGetByIndex+0x12>
   15736:	   |   moveq #0,d0
   15738:	,--|-- bra.s 15748 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   1573a:	|  '-> movea.l 4(sp),a0
   1573e:	|      move.l (a0),d1
   15740:	|      move.l 8(sp),d0
   15744:	|      lsl.l #3,d0
   15746:	|      add.l d1,d0
}
   15748:	'----> rts

0001574a <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   1574a:	                lea -32(sp),sp
   1574e:	                move.l a6,-(sp)
   15750:	                move.l a2,-(sp)
    struct persona *p = NULL;
   15752:	                clr.l 36(sp)

    switch (thisVar->varType) {
   15756:	                movea.l 44(sp),a0
   1575a:	                move.l (a0),d0
   1575c:	                moveq #8,d1
   1575e:	                cmp.l d0,d1
   15760:	            ,-- beq.s 1576e <getCostumeFromVar+0x24>
   15762:	            |   moveq #9,d1
   15764:	            |   cmp.l d0,d1
   15766:	   ,--------|-- beq.w 1581c <getCostumeFromVar+0xd2>
   1576a:	,--|--------|-- bra.w 15826 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   1576e:	|  |        '-> moveq #8,d0
   15770:	|  |            move.l d0,28(sp)
   15774:	|  |            clr.l 24(sp)
   15778:	|  |            move.l 1e8c0 <SysBase>,d0
   1577e:	|  |            movea.l d0,a6
   15780:	|  |            move.l 28(sp),d0
   15784:	|  |            move.l 24(sp),d1
   15788:	|  |            jsr -684(a6)
   1578c:	|  |            move.l d0,20(sp)
   15790:	|  |            move.l 20(sp),d0
   15794:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   15798:	|  |        ,-- bne.s 157a0 <getCostumeFromVar+0x56>
   1579a:	|  |        |   moveq #0,d0
   1579c:	|  |  ,-----|-- bra.w 15850 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   157a0:	|  |  |     '-> movea.l 36(sp),a0
   157a4:	|  |  |         moveq #1,d1
   157a6:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   157aa:	|  |  |         moveq #12,d0
   157ac:	|  |  |         move.l d0,16(sp)
   157b0:	|  |  |         clr.l 12(sp)
   157b4:	|  |  |         move.l 1e8c0 <SysBase>,d0
   157ba:	|  |  |         movea.l d0,a6
   157bc:	|  |  |         move.l 16(sp),d0
   157c0:	|  |  |         move.l 12(sp),d1
   157c4:	|  |  |         jsr -684(a6)
   157c8:	|  |  |         move.l d0,8(sp)
   157cc:	|  |  |         move.l 8(sp),d0
   157d0:	|  |  |         movea.l 36(sp),a0
   157d4:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   157d6:	|  |  |         movea.l 36(sp),a0
   157da:	|  |  |         move.l (a0),d0
   157dc:	|  |  |     ,-- bne.s 157e2 <getCostumeFromVar+0x98>
   157de:	|  |  |     |   moveq #0,d0
   157e0:	|  |  +-----|-- bra.s 15850 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   157e2:	|  |  |     '-> clr.l 32(sp)
   157e6:	|  |  |     ,-- bra.s 15812 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   157e8:	|  |  |  ,--|-> movea.l 44(sp),a0
   157ec:	|  |  |  |  |   move.l 4(a0),d0
   157f0:	|  |  |  |  |   movea.l 36(sp),a0
   157f4:	|  |  |  |  |   movea.l (a0),a0
   157f6:	|  |  |  |  |   move.l 32(sp),d1
   157fa:	|  |  |  |  |   add.l d1,d1
   157fc:	|  |  |  |  |   add.l d1,d1
   157fe:	|  |  |  |  |   lea (0,a0,d1.l),a2
   15802:	|  |  |  |  |   move.l d0,-(sp)
   15804:	|  |  |  |  |   jsr 9f2a <copyAnim>
   1580a:	|  |  |  |  |   addq.l #4,sp
   1580c:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1580e:	|  |  |  |  |   addq.l #1,32(sp)
   15812:	|  |  |  |  '-> moveq #2,d1
   15814:	|  |  |  |      cmp.l 32(sp),d1
   15818:	|  |  |  '----- bge.s 157e8 <getCostumeFromVar+0x9e>
            }
            break;
   1581a:	|  |  |     ,-- bra.s 1584c <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1581c:	|  '--|-----|-> movea.l 44(sp),a0
   15820:	|     |     |   move.l 4(a0),d0
   15824:	|     +-----|-- bra.s 15850 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   15826:	'-----|-----|-> movea.l 44(sp),a0
   1582a:	      |     |   move.l (a0),d0
   1582c:	      |     |   add.l d0,d0
   1582e:	      |     |   movea.l d0,a1
   15830:	      |     |   adda.l d0,a1
   15832:	      |     |   lea 1e78c <typeName>,a0
   15838:	      |     |   move.l (0,a1,a0.l),d0
   1583c:	      |     |   move.l d0,-(sp)
   1583e:	      |     |   pea 1bde0 <talk.c.490538ff+0x738>
   15844:	      |     |   jsr 1857e <KPrintF>
   1584a:	      |     |   addq.l #8,sp
    }

    return p;
   1584c:	      |     '-> move.l 36(sp),d0
}
   15850:	      '-------> movea.l (sp)+,a2
   15852:	                movea.l (sp)+,a6
   15854:	                lea 32(sp),sp
   15858:	                rts

0001585a <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   1585a:	                lea -96(sp),sp
   1585e:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   15862:	                move.l 116(sp),-(sp)
   15866:	                pea 1be18 <talk.c.490538ff+0x770>
   1586c:	                jsr 14fca <joinStrings>
   15872:	                addq.l #8,sp
   15874:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   15878:	            ,-- bne.s 15880 <getSavedGamesStack+0x26>
   1587a:	            |   clr.w d0
   1587c:	,-----------|-- bra.w 15a94 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   15880:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   15884:	|               move.l #114202,98(sp)
   1588c:	|               moveq #-2,d0
   1588e:	|               move.l d0,94(sp)
   15892:	|               move.l 1e8c8 <DOSBase>,d0
   15898:	|               movea.l d0,a6
   1589a:	|               move.l 98(sp),d1
   1589e:	|               move.l 94(sp),d2
   158a2:	|               jsr -84(a6)
   158a6:	|               move.l d0,90(sp)
   158aa:	|               move.l 90(sp),d0
   158ae:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   158b2:	|           ,-- bne.s 158ba <getSavedGamesStack+0x60>
   158b4:	|           |   clr.w d0
   158b6:	+-----------|-- bra.w 15a94 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   158ba:	|           '-> move.l #260,82(sp)
   158c2:	|               move.l #65536,78(sp)
   158ca:	|               move.l 1e8c0 <SysBase>,d0
   158d0:	|               movea.l d0,a6
   158d2:	|               move.l 82(sp),d0
   158d6:	|               move.l 78(sp),d1
   158da:	|               jsr -684(a6)
   158de:	|               move.l d0,74(sp)
   158e2:	|               move.l 74(sp),d0
   158e6:	|               move.l d0,70(sp)
	if (!fib) {
   158ea:	|           ,-- bne.s 15908 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   158ec:	|           |   move.l 86(sp),22(sp)
   158f2:	|           |   move.l 1e8c8 <DOSBase>,d0
   158f8:	|           |   movea.l d0,a6
   158fa:	|           |   move.l 22(sp),d1
   158fe:	|           |   jsr -90(a6)
		return FALSE;
   15902:	|           |   clr.w d0
   15904:	+-----------|-- bra.w 15a94 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   15908:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1590c:	|               move.l 86(sp),66(sp)
   15912:	|               move.l 70(sp),62(sp)
   15918:	|               move.l 1e8c8 <DOSBase>,d0
   1591e:	|               movea.l d0,a6
   15920:	|               move.l 66(sp),d1
   15924:	|               move.l 62(sp),d2
   15928:	|               jsr -102(a6)
   1592c:	|               move.l d0,58(sp)
   15930:	|               move.l 58(sp),d0
   15934:	|  ,----------- beq.w 15a48 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   15938:	|  |        ,-- bra.w 15a14 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   1593c:	|  |  ,-----|-> move.l 70(sp),d2
   15940:	|  |  |     |   addq.l #8,d2
   15942:	|  |  |     |   move.l 70(sp),d0
   15946:	|  |  |     |   addq.l #8,d0
   15948:	|  |  |     |   move.l d0,-(sp)
   1594a:	|  |  |     |   jsr 14f8a <strlen>
   15950:	|  |  |     |   addq.l #4,sp
   15952:	|  |  |     |   move.l d0,d3
   15954:	|  |  |     |   move.l 116(sp),-(sp)
   15958:	|  |  |     |   jsr 14f8a <strlen>
   1595e:	|  |  |     |   addq.l #4,sp
   15960:	|  |  |     |   move.l d3,d1
   15962:	|  |  |     |   sub.l d0,d1
   15964:	|  |  |     |   move.l d2,d0
   15966:	|  |  |     |   add.l d1,d0
   15968:	|  |  |     |   move.l 116(sp),-(sp)
   1596c:	|  |  |     |   move.l d0,-(sp)
   1596e:	|  |  |     |   jsr 14f4a <strcmp>
   15974:	|  |  |     |   addq.l #8,sp
   15976:	|  |  |     |   tst.l d0
   15978:	|  |  |     +-- bne.w 15a14 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   1597c:	|  |  |     |   move.l 70(sp),d0
   15980:	|  |  |     |   addq.l #8,d0
   15982:	|  |  |     |   move.l d0,-(sp)
   15984:	|  |  |     |   jsr 14f8a <strlen>
   1598a:	|  |  |     |   addq.l #4,sp
   1598c:	|  |  |     |   move.l d0,d2
   1598e:	|  |  |     |   move.l 116(sp),-(sp)
   15992:	|  |  |     |   jsr 14f8a <strlen>
   15998:	|  |  |     |   addq.l #4,sp
   1599a:	|  |  |     |   move.l d0,d1
   1599c:	|  |  |     |   move.l d2,d0
   1599e:	|  |  |     |   sub.l d1,d0
   159a0:	|  |  |     |   movea.l 70(sp),a0
   159a4:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   159a8:	|  |  |     |   move.l 70(sp),d0
   159ac:	|  |  |     |   addq.l #8,d0
   159ae:	|  |  |     |   move.l d0,-(sp)
   159b0:	|  |  |     |   jsr 118 <decodeFilename>
   159b6:	|  |  |     |   addq.l #4,sp
   159b8:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   159bc:	|  |  |     |   move.l 42(sp),-(sp)
   159c0:	|  |  |     |   lea 18(sp),a0
   159c4:	|  |  |     |   move.l a0,-(sp)
   159c6:	|  |  |     |   jsr 15cc0 <makeTextVar>
   159cc:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   159ce:	|  |  |     |   move.l 42(sp),38(sp)
   159d4:	|  |  |     |   move.l 1e8c0 <SysBase>,d0
   159da:	|  |  |     |   movea.l d0,a6
   159dc:	|  |  |     |   movea.l 38(sp),a1
   159e0:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   159e4:	|  |  |     |   move.l 112(sp),d0
   159e8:	|  |  |     |   move.l d0,-(sp)
   159ea:	|  |  |     |   lea 18(sp),a0
   159ee:	|  |  |     |   move.l a0,-(sp)
   159f0:	|  |  |     |   jsr 152da <addVarToStack>
   159f6:	|  |  |     |   addq.l #8,sp
   159f8:	|  |  |     |   tst.w d0
   159fa:	|  |  |  ,--|-- beq.s 15a4c <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   159fc:	|  |  |  |  |   movea.l 112(sp),a0
   15a00:	|  |  |  |  |   move.l 4(a0),d0
   15a04:	|  |  |  |  +-- bne.s 15a14 <getSavedGamesStack+0x1ba>
   15a06:	|  |  |  |  |   movea.l 112(sp),a0
   15a0a:	|  |  |  |  |   move.l (a0),d0
   15a0c:	|  |  |  |  |   movea.l 112(sp),a0
   15a10:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   15a14:	|  |  |  |  '-> move.l 86(sp),54(sp)
   15a1a:	|  |  |  |      move.l 70(sp),50(sp)
   15a20:	|  |  |  |      move.l 1e8c8 <DOSBase>,d0
   15a26:	|  |  |  |      movea.l d0,a6
   15a28:	|  |  |  |      move.l 54(sp),d1
   15a2c:	|  |  |  |      move.l 50(sp),d2
   15a30:	|  |  |  |      jsr -108(a6)
   15a34:	|  |  |  |      move.l d0,46(sp)
   15a38:	|  |  |  |      move.l 46(sp),d0
   15a3c:	|  |  '--|----- bne.w 1593c <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   15a40:	|  |     |      move.w #1,106(sp)
   15a46:	|  |     |  ,-- bra.s 15a4e <getSavedGamesStack+0x1f4>
	}

cleanup:
   15a48:	|  '-----|--|-> nop
   15a4a:	|        |  +-- bra.s 15a4e <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   15a4c:	|        '--|-> nop
	FreeVec(fib);
   15a4e:	|           '-> move.l 70(sp),34(sp)
   15a54:	|               move.l 1e8c0 <SysBase>,d0
   15a5a:	|               movea.l d0,a6
   15a5c:	|               movea.l 34(sp),a1
   15a60:	|               jsr -690(a6)
	UnLock(dirLock);
   15a64:	|               move.l 86(sp),30(sp)
   15a6a:	|               move.l 1e8c8 <DOSBase>,d0
   15a70:	|               movea.l d0,a6
   15a72:	|               move.l 30(sp),d1
   15a76:	|               jsr -90(a6)
	FreeVec(pattern);
   15a7a:	|               move.l 102(sp),26(sp)
   15a80:	|               move.l 1e8c0 <SysBase>,d0
   15a86:	|               movea.l d0,a6
   15a88:	|               movea.l 26(sp),a1
   15a8c:	|               jsr -690(a6)
	return result;
   15a90:	|               move.w 106(sp),d0
}
   15a94:	'-------------> movem.l (sp)+,d2-d3/a6
   15a98:	                lea 96(sp),sp
   15a9c:	                rts

00015a9e <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   15a9e:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   15aa0:	       movea.l 20(sp),a0
   15aa4:	       move.l (a0),d0
   15aa6:	       cmp.l 16(sp),d0
   15aaa:	,----- beq.s 15b0e <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   15aac:	|      move.l 16(sp),d0
   15ab0:	|      add.l d0,d0
   15ab2:	|      movea.l d0,a1
   15ab4:	|      adda.l d0,a1
   15ab6:	|      lea 1e78c <typeName>,a0
   15abc:	|      move.l (0,a1,a0.l),d0
   15ac0:	|      move.l d0,-(sp)
   15ac2:	|      pea 1be1c <talk.c.490538ff+0x774>
   15ac8:	|      jsr 14fca <joinStrings>
   15ace:	|      addq.l #8,sp
   15ad0:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   15ad4:	|      movea.l 20(sp),a0
   15ad8:	|      move.l (a0),d0
   15ada:	|      add.l d0,d0
   15adc:	|      movea.l d0,a1
   15ade:	|      adda.l d0,a1
   15ae0:	|      lea 1e78c <typeName>,a0
   15ae6:	|      move.l (0,a1,a0.l),d0
   15aea:	|      move.l d0,-(sp)
   15aec:	|      pea 1be5e <talk.c.490538ff+0x7b6>
   15af2:	|      jsr 14fca <joinStrings>
   15af8:	|      addq.l #8,sp
   15afa:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   15afc:	|      move.l (sp),-(sp)
   15afe:	|      move.l 8(sp),-(sp)
   15b02:	|      jsr 1857e <KPrintF>
   15b08:	|      addq.l #8,sp

		return FALSE;
   15b0a:	|      clr.w d0
   15b0c:	|  ,-- bra.s 15b1e <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   15b0e:	'--|-> movea.l 20(sp),a0
   15b12:	   |   move.l 4(a0),d0
   15b16:	   |   movea.l 12(sp),a0
   15b1a:	   |   move.l d0,(a0)
	return TRUE;
   15b1c:	   |   moveq #1,d0
}
   15b1e:	   '-> addq.l #8,sp
   15b20:	       rts

00015b22 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   15b22:	move.l 8(sp),-(sp)
   15b26:	jsr 7e74 <getNumberedString>
   15b2c:	addq.l #4,sp
   15b2e:	move.l d0,-(sp)
   15b30:	move.l 8(sp),-(sp)
   15b34:	jsr 15cc0 <makeTextVar>
   15b3a:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   15b3c:	movea.l 4(sp),a0
   15b40:	move.l 4(a0),d0
   15b44:	sne d0
   15b46:	neg.b d0
   15b48:	move.b d0,d0
   15b4a:	andi.w #255,d0
}
   15b4e:	rts

00015b50 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   15b50:	          subq.l #8,sp
    int size = stackSize(stacky);
   15b52:	          move.l 16(sp),-(sp)
   15b56:	          jsr 163fe <stackSize>
   15b5c:	          addq.l #4,sp
   15b5e:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   15b62:	          move.l 4(sp),-(sp)
   15b66:	          move.l 16(sp),-(sp)
   15b6a:	          jsr 15bba <makeFastArraySize>
   15b70:	          addq.l #8,sp
   15b72:	          tst.w d0
   15b74:	      ,-- bne.s 15b7a <makeFastArrayFromStack+0x2a>
   15b76:	      |   clr.w d0
   15b78:	,-----|-- bra.s 15bb6 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   15b7a:	|     '-> movea.l 16(sp),a0
   15b7e:	|         move.l (a0),(sp)
    size = 0;
   15b80:	|         clr.l 4(sp)
    while (allV) {
   15b84:	|     ,-- bra.s 15bb0 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   15b86:	|  ,--|-> movea.l 12(sp),a0
   15b8a:	|  |  |   movea.l 4(a0),a0
   15b8e:	|  |  |   move.l (a0),d1
   15b90:	|  |  |   move.l 4(sp),d0
   15b94:	|  |  |   lsl.l #3,d0
   15b96:	|  |  |   add.l d0,d1
   15b98:	|  |  |   move.l (sp),d0
   15b9a:	|  |  |   move.l d1,-(sp)
   15b9c:	|  |  |   move.l d0,-(sp)
   15b9e:	|  |  |   jsr 15e3c <copyMain>
   15ba4:	|  |  |   addq.l #8,sp
        size++;
   15ba6:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   15baa:	|  |  |   movea.l (sp),a0
   15bac:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   15bb0:	|  |  '-> tst.l (sp)
   15bb2:	|  '----- bne.s 15b86 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   15bb4:	|         moveq #1,d0
}
   15bb6:	'-------> addq.l #8,sp
   15bb8:	          rts

00015bba <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   15bba:	          lea -28(sp),sp
   15bbe:	          move.l a6,-(sp)
    if (size < 0) {
   15bc0:	          tst.l 40(sp)
   15bc4:	      ,-- bge.s 15bda <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   15bc6:	      |   pea 1bea3 <talk.c.490538ff+0x7fb>
   15bcc:	      |   jsr 1857e <KPrintF>
   15bd2:	      |   addq.l #4,sp
		return FALSE;
   15bd4:	      |   clr.w d0
   15bd6:	,-----|-- bra.w 15cb8 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   15bda:	|     '-> move.l 36(sp),-(sp)
   15bde:	|         jsr 15cec <unlinkVar>
   15be4:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   15be6:	|         movea.l 36(sp),a0
   15bea:	|         moveq #10,d0
   15bec:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   15bee:	|         moveq #12,d0
   15bf0:	|         move.l d0,24(sp)
   15bf4:	|         clr.l 20(sp)
   15bf8:	|         move.l 1e8c0 <SysBase>,d0
   15bfe:	|         movea.l d0,a6
   15c00:	|         move.l 24(sp),d0
   15c04:	|         move.l 20(sp),d1
   15c08:	|         jsr -684(a6)
   15c0c:	|         move.l d0,16(sp)
   15c10:	|         move.l 16(sp),d0
   15c14:	|         movea.l 36(sp),a0
   15c18:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   15c1c:	|         movea.l 36(sp),a0
   15c20:	|         move.l 4(a0),d0
   15c24:	|     ,-- bne.s 15c2c <makeFastArraySize+0x72>
   15c26:	|     |   clr.w d0
   15c28:	+-----|-- bra.w 15cb8 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   15c2c:	|     '-> move.l 40(sp),d0
   15c30:	|         lsl.l #3,d0
   15c32:	|         move.l d0,12(sp)
   15c36:	|         clr.l 8(sp)
   15c3a:	|         move.l 1e8c0 <SysBase>,d0
   15c40:	|         movea.l d0,a6
   15c42:	|         move.l 12(sp),d0
   15c46:	|         move.l 8(sp),d1
   15c4a:	|         jsr -684(a6)
   15c4e:	|         move.l d0,4(sp)
   15c52:	|         move.l 4(sp),d0
   15c56:	|         movea.l 36(sp),a0
   15c5a:	|         movea.l 4(a0),a0
   15c5e:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   15c60:	|         movea.l 36(sp),a0
   15c64:	|         movea.l 4(a0),a0
   15c68:	|         move.l (a0),d0
   15c6a:	|     ,-- bne.s 15c70 <makeFastArraySize+0xb6>
   15c6c:	|     |   clr.w d0
   15c6e:	+-----|-- bra.s 15cb8 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   15c70:	|     '-> clr.l 28(sp)
   15c74:	|     ,-- bra.s 15c90 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   15c76:	|  ,--|-> movea.l 36(sp),a0
   15c7a:	|  |  |   movea.l 4(a0),a0
   15c7e:	|  |  |   move.l (a0),d1
   15c80:	|  |  |   move.l 28(sp),d0
   15c84:	|  |  |   lsl.l #3,d0
   15c86:	|  |  |   movea.l d1,a0
   15c88:	|  |  |   adda.l d0,a0
   15c8a:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   15c8c:	|  |  |   addq.l #1,28(sp)
   15c90:	|  |  '-> move.l 28(sp),d0
   15c94:	|  |      cmp.l 40(sp),d0
   15c98:	|  '----- blt.s 15c76 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   15c9a:	|         movea.l 36(sp),a0
   15c9e:	|         movea.l 4(a0),a0
   15ca2:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   15ca8:	|         movea.l 36(sp),a0
   15cac:	|         movea.l 4(a0),a0
   15cb0:	|         moveq #1,d0
   15cb2:	|         move.l d0,8(a0)
    return TRUE;
   15cb6:	|         moveq #1,d0
}
   15cb8:	'-------> movea.l (sp)+,a6
   15cba:	          lea 28(sp),sp
   15cbe:	          rts

00015cc0 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   15cc0:	move.l 4(sp),-(sp)
   15cc4:	jsr 15cec <unlinkVar>
   15cca:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   15ccc:	movea.l 4(sp),a0
   15cd0:	moveq #3,d0
   15cd2:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   15cd4:	move.l 8(sp),-(sp)
   15cd8:	jsr b8 <copyString>
   15cde:	addq.l #4,sp
   15ce0:	movea.l 4(sp),a0
   15ce4:	move.l d0,4(a0)
}
   15ce8:	nop
   15cea:	rts

00015cec <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   15cec:	                      lea -16(sp),sp
   15cf0:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   15cf2:	                      movea.l 24(sp),a0
   15cf6:	                      move.l (a0),d0
   15cf8:	                      moveq #10,d1
   15cfa:	                      cmp.l d0,d1
   15cfc:	            ,-------- beq.w 15db4 <unlinkVar+0xc8>
   15d00:	            |         moveq #10,d1
   15d02:	            |         cmp.l d0,d1
   15d04:	,-----------|-------- bcs.w 15e28 <unlinkVar+0x13c>
   15d08:	|           |         moveq #8,d1
   15d0a:	|           |         cmp.l d0,d1
   15d0c:	|  ,--------|-------- beq.w 15e14 <unlinkVar+0x128>
   15d10:	|  |        |         moveq #8,d1
   15d12:	|  |        |         cmp.l d0,d1
   15d14:	+--|--------|-------- bcs.w 15e28 <unlinkVar+0x13c>
   15d18:	|  |        |         moveq #3,d1
   15d1a:	|  |        |         cmp.l d0,d1
   15d1c:	|  |        |     ,-- beq.s 15d28 <unlinkVar+0x3c>
   15d1e:	|  |        |     |   moveq #6,d1
   15d20:	|  |        |     |   cmp.l d0,d1
   15d22:	|  |        |  ,--|-- beq.s 15d4e <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   15d24:	+--|--------|--|--|-- bra.w 15e28 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   15d28:	|  |        |  |  '-> movea.l 24(sp),a0
   15d2c:	|  |        |  |      move.l 4(a0),4(sp)
   15d32:	|  |        |  |      move.l 1e8c0 <SysBase>,d0
   15d38:	|  |        |  |      movea.l d0,a6
   15d3a:	|  |        |  |      movea.l 4(sp),a1
   15d3e:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   15d42:	|  |        |  |      movea.l 24(sp),a0
   15d46:	|  |        |  |      clr.l 4(a0)
		break;
   15d4a:	|  |  ,-----|--|----- bra.w 15e32 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   15d4e:	|  |  |     |  '----> movea.l 24(sp),a0
   15d52:	|  |  |     |         movea.l 4(a0),a0
   15d56:	|  |  |     |         move.l 8(a0),d0
   15d5a:	|  |  |     |         subq.l #1,d0
   15d5c:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   15d60:	|  |  |     |         movea.l 24(sp),a0
   15d64:	|  |  |     |         movea.l 4(a0),a0
   15d68:	|  |  |     |         move.l 8(a0),d0
   15d6c:	|  |  |  ,--|-------- bgt.w 15e2c <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   15d70:	|  |  |  |  |     ,-- bra.s 15d84 <unlinkVar+0x98>
   15d72:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   15d76:	|  |  |  |  |  |  |   move.l 4(a0),d0
   15d7a:	|  |  |  |  |  |  |   move.l d0,-(sp)
   15d7c:	|  |  |  |  |  |  |   jsr 16422 <trimStack>
   15d82:	|  |  |  |  |  |  |   addq.l #4,sp
   15d84:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   15d88:	|  |  |  |  |  |      movea.l 4(a0),a0
   15d8c:	|  |  |  |  |  |      move.l (a0),d0
   15d8e:	|  |  |  |  |  '----- bne.s 15d72 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   15d90:	|  |  |  |  |         movea.l 24(sp),a0
   15d94:	|  |  |  |  |         move.l 4(a0),8(sp)
   15d9a:	|  |  |  |  |         move.l 1e8c0 <SysBase>,d0
   15da0:	|  |  |  |  |         movea.l d0,a6
   15da2:	|  |  |  |  |         movea.l 8(sp),a1
   15da6:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   15daa:	|  |  |  |  |         movea.l 24(sp),a0
   15dae:	|  |  |  |  |         clr.l 4(a0)
		break;
   15db2:	|  |  |  +--|-------- bra.s 15e2c <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   15db4:	|  |  |  |  '-------> movea.l 24(sp),a0
   15db8:	|  |  |  |            movea.l 4(a0),a0
   15dbc:	|  |  |  |            move.l 8(a0),d0
   15dc0:	|  |  |  |            subq.l #1,d0
   15dc2:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   15dc6:	|  |  |  |            movea.l 24(sp),a0
   15dca:	|  |  |  |            movea.l 4(a0),a0
   15dce:	|  |  |  |            move.l 8(a0),d0
   15dd2:	|  |  |  |        ,-- bgt.s 15e30 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   15dd4:	|  |  |  |        |   movea.l 24(sp),a0
   15dd8:	|  |  |  |        |   movea.l 4(a0),a0
   15ddc:	|  |  |  |        |   move.l (a0),16(sp)
   15de0:	|  |  |  |        |   move.l 1e8c0 <SysBase>,d0
   15de6:	|  |  |  |        |   movea.l d0,a6
   15de8:	|  |  |  |        |   movea.l 16(sp),a1
   15dec:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   15df0:	|  |  |  |        |   movea.l 24(sp),a0
   15df4:	|  |  |  |        |   move.l 4(a0),12(sp)
   15dfa:	|  |  |  |        |   move.l 1e8c0 <SysBase>,d0
   15e00:	|  |  |  |        |   movea.l d0,a6
   15e02:	|  |  |  |        |   movea.l 12(sp),a1
   15e06:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   15e0a:	|  |  |  |        |   movea.l 24(sp),a0
   15e0e:	|  |  |  |        |   clr.l 4(a0)
		break;
   15e12:	|  |  |  |        +-- bra.s 15e30 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   15e14:	|  '--|--|--------|-> movea.l 24(sp),a0
   15e18:	|     |  |        |   move.l 4(a0),d0
   15e1c:	|     |  |        |   move.l d0,-(sp)
   15e1e:	|     |  |        |   jsr a2f6 <deleteAnim>
   15e24:	|     |  |        |   addq.l #4,sp
		break;
   15e26:	|     +--|--------|-- bra.s 15e32 <unlinkVar+0x146>
		break;
   15e28:	'-----|--|--------|-> nop
   15e2a:	      +--|--------|-- bra.s 15e32 <unlinkVar+0x146>
		break;
   15e2c:	      |  '--------|-> nop
   15e2e:	      +-----------|-- bra.s 15e32 <unlinkVar+0x146>
		break;
   15e30:	      |           '-> nop
	}
}
   15e32:	      '-------------> nop
   15e34:	                      movea.l (sp)+,a6
   15e36:	                      lea 16(sp),sp
   15e3a:	                      rts

00015e3c <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   15e3c:	       movea.l 4(sp),a0
   15e40:	       move.l (a0),d0
   15e42:	       movea.l 8(sp),a0
   15e46:	       move.l d0,(a0)
	switch (to->varType) {
   15e48:	       movea.l 8(sp),a0
   15e4c:	       move.l (a0),d0
   15e4e:	       moveq #10,d1
   15e50:	       cmp.l d0,d1
   15e52:	,----- bcs.w 15f44 <copyMain+0x108>
   15e56:	|      add.l d0,d0
   15e58:	|      movea.l d0,a0
   15e5a:	|      adda.l #89702,a0
   15e60:	|      move.w (a0),d0
   15e62:	|      jmp (15e66 <copyMain+0x2a>,pc,d0.w)
   15e66:	|      .short 0x00da
   15e68:	|      ori.b #22,(a6)
   15e6c:	|      ori.w #22,(a4)
   15e70:	|      ori.b #-126,(a6)
   15e74:	|      ori.b #-68,(a6)
   15e78:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   15e80:	|      move.l 4(a0),d0
   15e84:	|      movea.l 8(sp),a0
   15e88:	|      move.l d0,4(a0)
		return TRUE;
   15e8c:	|      moveq #1,d0
   15e8e:	|  ,-- bra.w 15f56 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   15e92:	|  |   movea.l 4(sp),a0
   15e96:	|  |   move.l 4(a0),d0
   15e9a:	|  |   movea.l 8(sp),a0
   15e9e:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   15ea2:	|  |   movea.l 8(sp),a0
   15ea6:	|  |   movea.l 4(a0),a0
   15eaa:	|  |   move.l 8(a0),d0
   15eae:	|  |   addq.l #1,d0
   15eb0:	|  |   move.l d0,8(a0)
		return TRUE;
   15eb4:	|  |   moveq #1,d0
   15eb6:	|  +-- bra.w 15f56 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   15eba:	|  |   movea.l 4(sp),a0
   15ebe:	|  |   move.l 4(a0),d0
   15ec2:	|  |   move.l d0,-(sp)
   15ec4:	|  |   jsr b8 <copyString>
   15eca:	|  |   addq.l #4,sp
   15ecc:	|  |   movea.l 8(sp),a0
   15ed0:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   15ed4:	|  |   movea.l 8(sp),a0
   15ed8:	|  |   move.l 4(a0),d0
   15edc:	|  |   sne d0
   15ede:	|  |   neg.b d0
   15ee0:	|  |   move.b d0,d0
   15ee2:	|  |   andi.w #255,d0
   15ee6:	|  +-- bra.s 15f56 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   15ee8:	|  |   movea.l 4(sp),a0
   15eec:	|  |   move.l 4(a0),d0
   15ef0:	|  |   movea.l 8(sp),a0
   15ef4:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   15ef8:	|  |   movea.l 8(sp),a0
   15efc:	|  |   movea.l 4(a0),a0
   15f00:	|  |   move.l 8(a0),d0
   15f04:	|  |   addq.l #1,d0
   15f06:	|  |   move.l d0,8(a0)
		return TRUE;
   15f0a:	|  |   moveq #1,d0
   15f0c:	|  +-- bra.s 15f56 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   15f0e:	|  |   movea.l 4(sp),a0
   15f12:	|  |   move.l 4(a0),d0
   15f16:	|  |   movea.l 8(sp),a0
   15f1a:	|  |   move.l d0,4(a0)
		return TRUE;
   15f1e:	|  |   moveq #1,d0
   15f20:	|  +-- bra.s 15f56 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   15f22:	|  |   movea.l 4(sp),a0
   15f26:	|  |   move.l 4(a0),d0
   15f2a:	|  |   move.l d0,-(sp)
   15f2c:	|  |   jsr 9f2a <copyAnim>
   15f32:	|  |   addq.l #4,sp
   15f34:	|  |   movea.l 8(sp),a0
   15f38:	|  |   move.l d0,4(a0)
		return TRUE;
   15f3c:	|  |   moveq #1,d0
   15f3e:	|  +-- bra.s 15f56 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   15f40:	|  |   moveq #1,d0
   15f42:	|  +-- bra.s 15f56 <copyMain+0x11a>

		default:
		break;
   15f44:	'--|-> nop
	}
	KPrintF("Unknown value type");
   15f46:	   |   pea 1bef4 <talk.c.490538ff+0x84c>
   15f4c:	   |   jsr 1857e <KPrintF>
   15f52:	   |   addq.l #4,sp
	return FALSE;
   15f54:	   |   clr.w d0
}
   15f56:	   '-> rts

00015f58 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   15f58:	move.l 8(sp),-(sp)
   15f5c:	jsr 15cec <unlinkVar>
   15f62:	addq.l #4,sp
	return copyMain(from, to);
   15f64:	move.l 8(sp),-(sp)
   15f68:	move.l 8(sp),-(sp)
   15f6c:	jsr 15e3c <copyMain>
   15f72:	addq.l #8,sp
}
   15f74:	rts

00015f76 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   15f76:	       movea.l 4(sp),a0
   15f7a:	       move.l (a0),d0
   15f7c:	       moveq #8,d1
   15f7e:	       cmp.l d0,d1
   15f80:	   ,-- bne.s 15f96 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   15f82:	   |   movea.l 4(sp),a0
   15f86:	   |   move.l 4(a0),d0
   15f8a:	   |   move.l d0,-(sp)
   15f8c:	   |   jsr 9f2a <copyAnim>
   15f92:	   |   addq.l #4,sp
   15f94:	,--|-- bra.s 15fdc <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   15f96:	|  '-> movea.l 4(sp),a0
   15f9a:	|      move.l (a0),d0
   15f9c:	|      moveq #1,d1
   15f9e:	|      cmp.l d0,d1
   15fa0:	|  ,-- bne.s 15fb4 <getAnimationFromVar+0x3e>
   15fa2:	|  |   movea.l 4(sp),a0
   15fa6:	|  |   move.l 4(a0),d0
   15faa:	|  +-- bne.s 15fb4 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   15fac:	|  |   jsr b75c <makeNullAnim>
   15fb2:	+--|-- bra.s 15fdc <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   15fb4:	|  '-> movea.l 4(sp),a0
   15fb8:	|      move.l (a0),d0
   15fba:	|      add.l d0,d0
   15fbc:	|      movea.l d0,a1
   15fbe:	|      adda.l d0,a1
   15fc0:	|      lea 1e78c <typeName>,a0
   15fc6:	|      move.l (0,a1,a0.l),d0
   15fca:	|      move.l d0,-(sp)
   15fcc:	|      pea 1bde0 <talk.c.490538ff+0x738>
   15fd2:	|      jsr 1857e <KPrintF>
   15fd8:	|      addq.l #8,sp
	return NULL;
   15fda:	|      moveq #0,d0
}
   15fdc:	'----> rts

00015fde <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   15fde:	       movea.l 4(sp),a0
   15fe2:	       move.l (a0),d0
   15fe4:	       moveq #10,d1
   15fe6:	       cmp.l d0,d1
   15fe8:	,----- bcs.w 1606e <getBoolean+0x90>
   15fec:	|      add.l d0,d0
   15fee:	|      movea.l d0,a0
   15ff0:	|      adda.l #90108,a0
   15ff6:	|      move.w (a0),d0
   15ff8:	|      jmp (15ffc <getBoolean+0x1e>,pc,d0.w)
   15ffc:	|      ori.b #26,(a6)
   16000:	|      ori.w #68,(114,a2,d0.w)
   16006:	|      ori.w #46,(114,a2,d0.w)
   1600c:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   16012:	|      clr.w d0
   16014:	|  ,-- bra.s 16072 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   16016:	|  |   movea.l 4(sp),a0
   1601a:	|  |   move.l 4(a0),d0
   1601e:	|  |   sne d0
   16020:	|  |   neg.b d0
   16022:	|  |   move.b d0,d0
   16024:	|  |   andi.w #255,d0
   16028:	|  +-- bra.s 16072 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   1602a:	|  |   movea.l 4(sp),a0
   1602e:	|  |   movea.l 4(a0),a0
   16032:	|  |   move.l (a0),d0
   16034:	|  |   sne d0
   16036:	|  |   neg.b d0
   16038:	|  |   move.b d0,d0
   1603a:	|  |   andi.w #255,d0
   1603e:	|  +-- bra.s 16072 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   16040:	|  |   movea.l 4(sp),a0
   16044:	|  |   movea.l 4(a0),a0
   16048:	|  |   move.b (a0),d0
   1604a:	|  |   sne d0
   1604c:	|  |   neg.b d0
   1604e:	|  |   move.b d0,d0
   16050:	|  |   andi.w #255,d0
   16054:	|  +-- bra.s 16072 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   16056:	|  |   movea.l 4(sp),a0
   1605a:	|  |   movea.l 4(a0),a0
   1605e:	|  |   move.l 4(a0),d0
   16062:	|  |   sne d0
   16064:	|  |   neg.b d0
   16066:	|  |   move.b d0,d0
   16068:	|  |   andi.w #255,d0
   1606c:	|  +-- bra.s 16072 <getBoolean+0x94>

		default:
		break;
   1606e:	'--|-> nop
	}
	return TRUE;
   16070:	   |   moveq #1,d0
}
   16072:	   '-> rts

00016074 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   16074:	      ,----------> lea -76(sp),sp
   16078:	      |            move.l a6,-(sp)
	switch (from->varType) {
   1607a:	      |            movea.l 84(sp),a0
   1607e:	      |            move.l (a0),d0
   16080:	      |            moveq #10,d1
   16082:	      |            cmp.l d0,d1
   16084:	,-----|----------- bcs.w 16322 <getTextFromAnyVar+0x2ae>
   16088:	|     |            add.l d0,d0
   1608a:	|     |            movea.l d0,a0
   1608c:	|     |            adda.l #90264,a0
   16092:	|     |            move.w (a0),d0
   16094:	|     |            jmp (16098 <getTextFromAnyVar+0x24>,pc,d0.w)
   16098:	|     |            .short 0x028a
   1609a:	|     |            bset d0,(a0)+
   1609c:	|     |            .short 0x028a
   1609e:	|     |            ori.b #-118,(a6)
   160a2:	|     |            andi.b #8,ccr
   160a6:	|     |            andi.w #650,-(a0)
   160aa:	|     |            .short 0x028a
   160ac:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   160b2:	|     |            move.l 4(a0),d0
   160b6:	|     |            move.l d0,-(sp)
   160b8:	|     |            jsr b8 <copyString>
   160be:	|     |            addq.l #4,sp
   160c0:	|  ,--|----------- bra.w 16344 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   160c4:	|  |  |            pea 1bf07 <talk.c.490538ff+0x85f>
   160ca:	|  |  |            jsr b8 <copyString>
   160d0:	|  |  |            addq.l #4,sp
   160d2:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   160d6:	|  |  |            clr.l 72(sp)
   160da:	|  |  |     ,----- bra.w 16184 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   160de:	|  |  |  ,--|----> pea 1bf0d <talk.c.490538ff+0x865>
   160e4:	|  |  |  |  |      move.l 80(sp),-(sp)
   160e8:	|  |  |  |  |      jsr 14fca <joinStrings>
   160ee:	|  |  |  |  |      addq.l #8,sp
   160f0:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   160f4:	|  |  |  |  |  ,-- bne.s 160fc <getTextFromAnyVar+0x88>
   160f6:	|  |  |  |  |  |   moveq #0,d0
   160f8:	|  +--|--|--|--|-- bra.w 16344 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   160fc:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   16102:	|  |  |  |  |      move.l 1e8c0 <SysBase>,d0
   16108:	|  |  |  |  |      movea.l d0,a6
   1610a:	|  |  |  |  |      movea.l 56(sp),a1
   1610e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   16112:	|  |  |  |  |      movea.l 84(sp),a0
   16116:	|  |  |  |  |      movea.l 4(a0),a0
   1611a:	|  |  |  |  |      move.l (a0),d1
   1611c:	|  |  |  |  |      move.l 72(sp),d0
   16120:	|  |  |  |  |      lsl.l #3,d0
   16122:	|  |  |  |  |      add.l d1,d0
   16124:	|  |  |  |  |      move.l d0,-(sp)
   16126:	|  |  +--|--|----- jsr 16074 <getTextFromAnyVar>(pc)
   1612a:	|  |  |  |  |      addq.l #4,sp
   1612c:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   16130:	|  |  |  |  |      move.l 52(sp),-(sp)
   16134:	|  |  |  |  |      move.l 64(sp),-(sp)
   16138:	|  |  |  |  |      jsr 14fca <joinStrings>
   1613e:	|  |  |  |  |      addq.l #8,sp
   16140:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   16144:	|  |  |  |  |  ,-- bne.s 1614c <getTextFromAnyVar+0xd8>
   16146:	|  |  |  |  |  |   moveq #0,d0
   16148:	|  +--|--|--|--|-- bra.w 16344 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1614c:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   16152:	|  |  |  |  |      move.l 1e8c0 <SysBase>,d0
   16158:	|  |  |  |  |      movea.l d0,a6
   1615a:	|  |  |  |  |      movea.l 48(sp),a1
   1615e:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   16162:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   16166:	|  |  |  |  |      move.l 60(sp),44(sp)
   1616c:	|  |  |  |  |      move.l 1e8c0 <SysBase>,d0
   16172:	|  |  |  |  |      movea.l d0,a6
   16174:	|  |  |  |  |      movea.l 44(sp),a1
   16178:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   1617c:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   16180:	|  |  |  |  |      addq.l #1,72(sp)
   16184:	|  |  |  |  '----> movea.l 84(sp),a0
   16188:	|  |  |  |         movea.l 4(a0),a0
   1618c:	|  |  |  |         move.l 4(a0),d0
   16190:	|  |  |  |         cmp.l 72(sp),d0
   16194:	|  |  |  '-------- bgt.w 160de <getTextFromAnyVar+0x6a>
			}
			return builder;
   16198:	|  |  |            move.l 76(sp),d0
   1619c:	|  +--|----------- bra.w 16344 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   161a0:	|  |  |            pea 1bf0f <talk.c.490538ff+0x867>
   161a6:	|  |  |            jsr b8 <copyString>
   161ac:	|  |  |            addq.l #4,sp
   161ae:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   161b2:	|  |  |            movea.l 84(sp),a0
   161b6:	|  |  |            movea.l 4(a0),a0
   161ba:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   161be:	|  |  |     ,----- bra.w 16260 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   161c2:	|  |  |  ,--|----> pea 1bf0d <talk.c.490538ff+0x865>
   161c8:	|  |  |  |  |      move.l 72(sp),-(sp)
   161cc:	|  |  |  |  |      jsr 14fca <joinStrings>
   161d2:	|  |  |  |  |      addq.l #8,sp
   161d4:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   161d8:	|  |  |  |  |  ,-- bne.s 161e0 <getTextFromAnyVar+0x16c>
   161da:	|  |  |  |  |  |   moveq #0,d0
   161dc:	|  +--|--|--|--|-- bra.w 16344 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   161e0:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   161e6:	|  |  |  |  |      move.l 1e8c0 <SysBase>,d0
   161ec:	|  |  |  |  |      movea.l d0,a6
   161ee:	|  |  |  |  |      movea.l 32(sp),a1
   161f2:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   161f6:	|  |  |  |  |      move.l 64(sp),d0
   161fa:	|  |  |  |  |      move.l d0,-(sp)
   161fc:	|  |  '--|--|----- jsr 16074 <getTextFromAnyVar>(pc)
   16200:	|  |     |  |      addq.l #4,sp
   16202:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   16206:	|  |     |  |      move.l 28(sp),-(sp)
   1620a:	|  |     |  |      move.l 40(sp),-(sp)
   1620e:	|  |     |  |      jsr 14fca <joinStrings>
   16214:	|  |     |  |      addq.l #8,sp
   16216:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   1621a:	|  |     |  |  ,-- bne.s 16222 <getTextFromAnyVar+0x1ae>
   1621c:	|  |     |  |  |   moveq #0,d0
   1621e:	|  +-----|--|--|-- bra.w 16344 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   16222:	|  |     |  |  '-> move.l 28(sp),24(sp)
   16228:	|  |     |  |      move.l 1e8c0 <SysBase>,d0
   1622e:	|  |     |  |      movea.l d0,a6
   16230:	|  |     |  |      movea.l 24(sp),a1
   16234:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   16238:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   1623c:	|  |     |  |      move.l 36(sp),20(sp)
   16242:	|  |     |  |      move.l 1e8c0 <SysBase>,d0
   16248:	|  |     |  |      movea.l d0,a6
   1624a:	|  |     |  |      movea.l 20(sp),a1
   1624e:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   16252:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   16256:	|  |     |  |      movea.l 64(sp),a0
   1625a:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   16260:	|  |     |  '----> tst.l 64(sp)
   16264:	|  |     '-------- bne.w 161c2 <getTextFromAnyVar+0x14e>
			}
			return builder;
   16268:	|  |               move.l 68(sp),d0
   1626c:	|  +-------------- bra.w 16344 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   16270:	|  |               moveq #10,d0
   16272:	|  |               move.l d0,16(sp)
   16276:	|  |               clr.l 12(sp)
   1627a:	|  |               move.l 1e8c0 <SysBase>,d0
   16280:	|  |               movea.l d0,a6
   16282:	|  |               move.l 16(sp),d0
   16286:	|  |               move.l 12(sp),d1
   1628a:	|  |               jsr -684(a6)
   1628e:	|  |               move.l d0,8(sp)
   16292:	|  |               move.l 8(sp),d0
   16296:	|  |               move.l d0,4(sp)
			if (! buff) {
   1629a:	|  |           ,-- bne.s 162b0 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   1629c:	|  |           |   pea 1bf16 <talk.c.490538ff+0x86e>
   162a2:	|  |           |   jsr 1857e <KPrintF>
   162a8:	|  |           |   addq.l #4,sp
				return NULL;
   162aa:	|  |           |   moveq #0,d0
   162ac:	|  +-----------|-- bra.w 16344 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   162b0:	|  |           '-> movea.l 84(sp),a0
   162b4:	|  |               move.l 4(a0),d0
   162b8:	|  |               move.l d0,-(sp)
   162ba:	|  |               pea 1bf40 <talk.c.490538ff+0x898>
   162c0:	|  |               move.l 12(sp),-(sp)
   162c4:	|  |               jsr 152a8 <sprintf>
   162ca:	|  |               lea 12(sp),sp
			return buff;
   162ce:	|  |               move.l 4(sp),d0
   162d2:	|  +-------------- bra.s 16344 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   162d4:	|  |               movea.l 84(sp),a0
   162d8:	|  |               move.l 4(a0),d0
   162dc:	|  |               move.l d0,-(sp)
   162de:	|  |               jsr 4f32 <resourceNameFromNum>
   162e4:	|  |               addq.l #4,sp
   162e6:	|  |               move.l d0,-(sp)
   162e8:	|  |               pea 19dbf <PutChar+0xd9f>
   162ee:	|  |               jsr 14fca <joinStrings>
   162f4:	|  |               addq.l #8,sp
   162f6:	|  +-------------- bra.s 16344 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   162f8:	|  |               movea.l 84(sp),a0
   162fc:	|  |               move.l 4(a0),d0
   16300:	|  |               move.l d0,-(sp)
   16302:	|  |               jsr df86 <findObjectType>
   16308:	|  |               addq.l #4,sp
   1630a:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   1630e:	+--|-------------- beq.s 16322 <getTextFromAnyVar+0x2ae>
   16310:	|  |               movea.l 40(sp),a0
   16314:	|  |               move.l (a0),d0
   16316:	|  |               move.l d0,-(sp)
   16318:	|  |               jsr b8 <copyString>
   1631e:	|  |               addq.l #4,sp
   16320:	|  +-------------- bra.s 16344 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   16322:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   16324:	   |               movea.l 84(sp),a0
   16328:	   |               move.l (a0),d0
   1632a:	   |               add.l d0,d0
   1632c:	   |               movea.l d0,a1
   1632e:	   |               adda.l d0,a1
   16330:	   |               lea 1e78c <typeName>,a0
   16336:	   |               move.l (0,a1,a0.l),d0
   1633a:	   |               move.l d0,-(sp)
   1633c:	   |               jsr b8 <copyString>
   16342:	   |               addq.l #4,sp
}
   16344:	   '-------------> movea.l (sp)+,a6
   16346:	                   lea 76(sp),sp
   1634a:	                   rts

0001634c <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   1634c:	move.l 4(sp),-(sp)
   16350:	jsr 15cec <unlinkVar>
   16356:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   16358:	movea.l 4(sp),a0
   1635c:	moveq #8,d0
   1635e:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   16360:	movea.l 4(sp),a0
   16364:	move.l 8(sp),4(a0)
}
   1636a:	nop
   1636c:	rts

0001636e <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   1636e:	move.l 4(sp),-(sp)
   16372:	jsr 15cec <unlinkVar>
   16378:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   1637a:	movea.l 4(sp),a0
   1637e:	moveq #9,d0
   16380:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   16382:	movea.l 4(sp),a0
   16386:	move.l 8(sp),4(a0)
}
   1638c:	nop
   1638e:	rts

00016390 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   16390:	move.l 4(sp),-(sp)
   16394:	jsr 15cec <unlinkVar>
   1639a:	addq.l #4,sp
   1639c:	movea.l 4(sp),a0
   163a0:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   163a4:	movea.l 4(sp),a0
   163a8:	move.l 12(sp),4(a0)
   163ae:	nop
   163b0:	rts

000163b2 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   163b2:	      ,-- bra.s 163c4 <stackGetByIndex+0x12>
        vS = vS->next;
   163b4:	,-----|-> movea.l 4(sp),a0
   163b8:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   163be:	|     +-- bne.s 163c4 <stackGetByIndex+0x12>
            return NULL;
   163c0:	|     |   moveq #0,d0
   163c2:	|  ,--|-- bra.s 163d8 <stackGetByIndex+0x26>
    while (theIndex--) {
   163c4:	|  |  '-> move.l 8(sp),d0
   163c8:	|  |      move.l d0,d1
   163ca:	|  |      subq.l #1,d1
   163cc:	|  |      move.l d1,8(sp)
   163d0:	|  |      tst.l d0
   163d2:	'--|----- bne.s 163b4 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   163d4:	   |      move.l 4(sp),d0
}
   163d8:	   '----> rts

000163da <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   163da:	          tst.l 4(sp)
   163de:	      ,-- bne.s 163ee <stackFindLast+0x14>
		return NULL;
   163e0:	      |   moveq #0,d0
   163e2:	,-----|-- bra.s 163fc <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   163e4:	|  ,--|-> movea.l 4(sp),a0
   163e8:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   163ee:	|  |  '-> movea.l 4(sp),a0
   163f2:	|  |      move.l 8(a0),d0
   163f6:	|  '----- bne.s 163e4 <stackFindLast+0xa>

	return hunt;
   163f8:	|         move.l 4(sp),d0
}
   163fc:	'-------> rts

000163fe <stackSize>:

int stackSize (const struct stackHandler * me) {
   163fe:	       subq.l #8,sp
	int r = 0;
   16400:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   16404:	       movea.l 12(sp),a0
   16408:	       move.l (a0),(sp)
	while (a) {
   1640a:	   ,-- bra.s 16416 <stackSize+0x18>
		r ++;
   1640c:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   16410:	|  |   movea.l (sp),a0
   16412:	|  |   move.l 8(a0),(sp)
	while (a) {
   16416:	|  '-> tst.l (sp)
   16418:	'----- bne.s 1640c <stackSize+0xe>
	}
	return r;
   1641a:	       move.l 4(sp),d0
}
   1641e:	       addq.l #8,sp
   16420:	       rts

00016422 <trimStack>:

void trimStack (struct variableStack ** stack) {
   16422:	subq.l #8,sp
   16424:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   16426:	movea.l 16(sp),a0
   1642a:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   1642e:	movea.l 16(sp),a0
   16432:	movea.l (a0),a0
   16434:	move.l 8(a0),d0
   16438:	movea.l 16(sp),a0
   1643c:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   1643e:	move.l 8(sp),d0
   16442:	move.l d0,-(sp)
   16444:	jsr 15cec <unlinkVar>
   1644a:	addq.l #4,sp
	FreeVec(killMe);
   1644c:	move.l 8(sp),4(sp)
   16452:	move.l 1e8c0 <SysBase>,d0
   16458:	movea.l d0,a6
   1645a:	movea.l 4(sp),a1
   1645e:	jsr -690(a6)
   16462:	nop
   16464:	movea.l (sp)+,a6
   16466:	addq.l #8,sp
   16468:	rts

0001646a <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   1646a:	       lea -52(sp),sp
   1646e:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   16470:	       pea 1bf43 <talk.c.490538ff+0x89b>
   16476:	       jsr 1857e <KPrintF>
   1647c:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   1647e:	       moveq #68,d0
   16480:	       move.l d0,52(sp)
   16484:	       clr.l 48(sp)
   16488:	       move.l 1e8c0 <SysBase>,d0
   1648e:	       movea.l d0,a6
   16490:	       move.l 52(sp),d0
   16494:	       move.l 48(sp),d1
   16498:	       jsr -684(a6)
   1649c:	       move.l d0,44(sp)
   164a0:	       move.l 44(sp),d0
   164a4:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   164a8:	   ,-- bne.s 164b0 <freeze+0x46>
   164aa:	   |   clr.w d0
   164ac:	,--|-- bra.w 16642 <freeze+0x1d8>

	CstFreeze();
   164b0:	|  '-> jsr 1c5a <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   164b6:	|      move.l 1e95c <sceneWidth>,d0
   164bc:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   164c0:	|      move.l 1e960 <sceneHeight>,d0
   164c6:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   164ca:	|      move.l 1e95c <sceneWidth>,d0
   164d0:	|      movea.l 40(sp),a0
   164d4:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   164d8:	|      move.l 1e960 <sceneHeight>,d0
   164de:	|      movea.l 40(sp),a0
   164e2:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   164e6:	|      move.l 1e97a <cameraX>,d0
   164ec:	|      movea.l 40(sp),a0
   164f0:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   164f4:	|      move.l 1e97e <cameraY>,d0
   164fa:	|      movea.l 40(sp),a0
   164fe:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   16502:	|      move.l 1e246 <cameraZoom>,d0
   16508:	|      movea.l 40(sp),a0
   1650c:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   16510:	|      move.w #1,1e968 <backdropExists>

	newFreezer -> allPeople = allPeople;
   16518:	|      move.l 1e924 <allPeople>,d0
   1651e:	|      movea.l 40(sp),a0
   16522:	|      move.l d0,(a0)
	allPeople = NULL;
   16524:	|      clr.l 1e924 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   1652a:	|      moveq #42,d0
   1652c:	|      move.l d0,28(sp)
   16530:	|      clr.l 24(sp)
   16534:	|      move.l 1e8c0 <SysBase>,d0
   1653a:	|      movea.l d0,a6
   1653c:	|      move.l 28(sp),d0
   16540:	|      move.l 24(sp),d1
   16544:	|      jsr -684(a6)
   16548:	|      move.l d0,20(sp)
   1654c:	|      move.l 20(sp),d0
   16550:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   16554:	|  ,-- bne.s 1655c <freeze+0xf2>
   16556:	|  |   clr.w d0
   16558:	+--|-- bra.w 16642 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   1655c:	|  '-> move.l 1e9d0 <allScreenRegions>,d0
   16562:	|      movea.l 40(sp),a0
   16566:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   1656a:	|      clr.l 1e9d0 <allScreenRegions>
	overRegion = NULL;
   16570:	|      clr.l 1e9d4 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   16576:	|      move.l 1e7b6 <mouseCursorAnim>,d0
   1657c:	|      movea.l 40(sp),a0
   16580:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   16584:	|      move.l 1e7ba <mouseCursorFrameNum>,d0
   1658a:	|      movea.l 40(sp),a0
   1658e:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   16592:	|      jsr b75c <makeNullAnim>
   16598:	|      move.l d0,1e7b6 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   1659e:	|      clr.l 1e7ba <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   165a4:	|      move.l 1e920 <zBuffer>,d0
   165aa:	|      movea.l 40(sp),a0
   165ae:	|      move.l d0,60(a0)
	zBuffer = NULL;
   165b2:	|      clr.l 1e920 <zBuffer>

	newFreezer -> speech = speech;
   165b8:	|      move.l 1e802 <speech>,d0
   165be:	|      movea.l 40(sp),a0
   165c2:	|      move.l d0,20(a0)
	initSpeech ();
   165c6:	|      jsr 4428 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   165cc:	|      move.l 1e224 <currentEvents>,d0
   165d2:	|      movea.l 40(sp),a0
   165d6:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   165da:	|      moveq #28,d0
   165dc:	|      move.l d0,12(sp)
   165e0:	|      clr.l 8(sp)
   165e4:	|      move.l 1e8c0 <SysBase>,d0
   165ea:	|      movea.l d0,a6
   165ec:	|      move.l 12(sp),d0
   165f0:	|      move.l 8(sp),d1
   165f4:	|      jsr -684(a6)
   165f8:	|      move.l d0,4(sp)
   165fc:	|      move.l 4(sp),d0
   16600:	|      move.l d0,1e224 <currentEvents>
	if (!currentEvents) return FALSE;
   16606:	|      move.l 1e224 <currentEvents>,d0
   1660c:	|  ,-- bne.s 16612 <freeze+0x1a8>
   1660e:	|  |   clr.w d0
   16610:	+--|-- bra.s 16642 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   16612:	|  '-> move.l 1e224 <currentEvents>,d0
   16618:	|      pea 1c <_start+0x1c>
   1661c:	|      clr.l -(sp)
   1661e:	|      move.l d0,-(sp)
   16620:	|      jsr 18502 <memset>
   16626:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   1662a:	|      move.l 1e9b4 <frozenStuff>,d0
   16630:	|      movea.l 40(sp),a0
   16634:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   16638:	|      move.l 40(sp),1e9b4 <frozenStuff>

	return TRUE;
   16640:	|      moveq #1,d0
}
   16642:	'----> movea.l (sp)+,a6
   16644:	       lea 52(sp),sp
   16648:	       rts

0001664a <howFrozen>:

int howFrozen () {
   1664a:	       subq.l #8,sp
	int a = 0;
   1664c:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   16650:	       move.l 1e9b4 <frozenStuff>,(sp)
	while (f) {
   16656:	   ,-- bra.s 16662 <howFrozen+0x18>
		a ++;
   16658:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   1665c:	|  |   movea.l (sp),a0
   1665e:	|  |   move.l 64(a0),(sp)
	while (f) {
   16662:	|  '-> tst.l (sp)
   16664:	'----- bne.s 16658 <howFrozen+0xe>
	}
	return a;
   16666:	       move.l 4(sp),d0
}
   1666a:	       addq.l #8,sp
   1666c:	       rts

0001666e <unfreeze>:

void unfreeze () {
   1666e:	       lea -16(sp),sp
   16672:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   16674:	       move.l 1e9b4 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   1667c:	       move.l 1e9b4 <frozenStuff>,d0
   16682:	,----- beq.w 168ba <unfreeze+0x24c>

	CstUnfreeze();
   16686:	|      jsr 3fd2 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   1668c:	|      movea.l 1e9b4 <frozenStuff>,a0
   16692:	|      move.l 48(a0),d0
   16696:	|      move.l d0,1e95c <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   1669c:	|      movea.l 1e9b4 <frozenStuff>,a0
   166a2:	|      move.l 52(a0),d0
   166a6:	|      move.l d0,1e960 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   166ac:	|      movea.l 1e9b4 <frozenStuff>,a0
   166b2:	|      move.l 40(a0),d0
   166b6:	|      move.l d0,1e97a <cameraX>
	cameraY = frozenStuff -> cameraY;
   166bc:	|      movea.l 1e9b4 <frozenStuff>,a0
   166c2:	|      move.l 44(a0),d0
   166c6:	|      move.l d0,1e97e <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   166cc:	|      move.l 1e87a <input+0xa>,d0
   166d2:	|      move.l d0,-(sp)
   166d4:	|      jsr 189b0 <__floatsisf>
   166da:	|      addq.l #4,sp
   166dc:	|      move.l d0,d1
   166de:	|      move.l 1e246 <cameraZoom>,d0
   166e4:	|      move.l d0,-(sp)
   166e6:	|      move.l d1,-(sp)
   166e8:	|      jsr 18a62 <__mulsf3>
   166ee:	|      addq.l #8,sp
   166f0:	|      move.l d0,-(sp)
   166f2:	|      jsr 18948 <__fixsfsi>
   166f8:	|      addq.l #4,sp
   166fa:	|      move.l d0,1e87a <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   16700:	|      move.l 1e87e <input+0xe>,d0
   16706:	|      move.l d0,-(sp)
   16708:	|      jsr 189b0 <__floatsisf>
   1670e:	|      addq.l #4,sp
   16710:	|      move.l d0,d1
   16712:	|      move.l 1e246 <cameraZoom>,d0
   16718:	|      move.l d0,-(sp)
   1671a:	|      move.l d1,-(sp)
   1671c:	|      jsr 18a62 <__mulsf3>
   16722:	|      addq.l #8,sp
   16724:	|      move.l d0,-(sp)
   16726:	|      jsr 18948 <__fixsfsi>
   1672c:	|      addq.l #4,sp
   1672e:	|      move.l d0,1e87e <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   16734:	|      movea.l 1e9b4 <frozenStuff>,a0
   1673a:	|      move.l 56(a0),d0
   1673e:	|      move.l d0,1e246 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   16744:	|      move.l 1e87a <input+0xa>,d0
   1674a:	|      move.l d0,-(sp)
   1674c:	|      jsr 189b0 <__floatsisf>
   16752:	|      addq.l #4,sp
   16754:	|      move.l d0,d1
   16756:	|      move.l 1e246 <cameraZoom>,d0
   1675c:	|      move.l d0,-(sp)
   1675e:	|      move.l d1,-(sp)
   16760:	|      jsr 18866 <__divsf3>
   16766:	|      addq.l #8,sp
   16768:	|      move.l d0,-(sp)
   1676a:	|      jsr 18948 <__fixsfsi>
   16770:	|      addq.l #4,sp
   16772:	|      move.l d0,1e87a <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   16778:	|      move.l 1e87e <input+0xe>,d0
   1677e:	|      move.l d0,-(sp)
   16780:	|      jsr 189b0 <__floatsisf>
   16786:	|      addq.l #4,sp
   16788:	|      move.l d0,d1
   1678a:	|      move.l 1e246 <cameraZoom>,d0
   16790:	|      move.l d0,-(sp)
   16792:	|      move.l d1,-(sp)
   16794:	|      jsr 18866 <__divsf3>
   1679a:	|      addq.l #8,sp
   1679c:	|      move.l d0,-(sp)
   1679e:	|      jsr 18948 <__fixsfsi>
   167a4:	|      addq.l #4,sp
   167a6:	|      move.l d0,1e87e <input+0xe>

	killAllPeople ();
   167ac:	|      jsr b42c <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   167b2:	|      movea.l 1e9b4 <frozenStuff>,a0
   167b8:	|      move.l (a0),d0
   167ba:	|      move.l d0,1e924 <allPeople>

	killAllRegions ();
   167c0:	|      jsr 16d8e <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   167c6:	|      movea.l 1e9b4 <frozenStuff>,a0
   167cc:	|      move.l 4(a0),d0
   167d0:	|      move.l d0,1e9d0 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   167d6:	|      move.l 1e7b6 <mouseCursorAnim>,d0
   167dc:	|      move.l d0,-(sp)
   167de:	|      jsr a2f6 <deleteAnim>
   167e4:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   167e6:	|      movea.l 1e9b4 <frozenStuff>,a0
   167ec:	|      move.l 32(a0),d0
   167f0:	|      move.l d0,1e7b6 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   167f6:	|      movea.l 1e9b4 <frozenStuff>,a0
   167fc:	|      move.l 36(a0),d0
   16800:	|      move.l d0,1e7ba <mouseCursorFrameNum>

	killZBuffer ();
   16806:	|      jsr 9082 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1680c:	|      movea.l 1e9b4 <frozenStuff>,a0
   16812:	|      move.l 60(a0),d0
   16816:	|      move.l d0,1e920 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1681c:	|      move.l 1e224 <currentEvents>,d0
   16822:	|  ,-- beq.s 1683c <unfreeze+0x1ce>
   16824:	|  |   move.l 1e224 <currentEvents>,12(sp)
   1682c:	|  |   move.l 1e8c0 <SysBase>,d0
   16832:	|  |   movea.l d0,a6
   16834:	|  |   movea.l 12(sp),a1
   16838:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   1683c:	|  '-> movea.l 1e9b4 <frozenStuff>,a0
   16842:	|      move.l 28(a0),d0
   16846:	|      move.l d0,1e224 <currentEvents>

	killAllSpeech ();
   1684c:	|      jsr 44c0 <killAllSpeech>
	if (speech) FreeVec(speech);
   16852:	|      move.l 1e802 <speech>,d0
   16858:	|  ,-- beq.s 16872 <unfreeze+0x204>
   1685a:	|  |   move.l 1e802 <speech>,8(sp)
   16862:	|  |   move.l 1e8c0 <SysBase>,d0
   16868:	|  |   movea.l d0,a6
   1686a:	|  |   movea.l 8(sp),a1
   1686e:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   16872:	|  '-> movea.l 1e9b4 <frozenStuff>,a0
   16878:	|      move.l 20(a0),d0
   1687c:	|      move.l d0,1e802 <speech>

	frozenStuff = frozenStuff -> next;
   16882:	|      movea.l 1e9b4 <frozenStuff>,a0
   16888:	|      move.l 64(a0),d0
   1688c:	|      move.l d0,1e9b4 <frozenStuff>

	overRegion = NULL;
   16892:	|      clr.l 1e9d4 <overRegion>
	if (killMe) FreeVec(killMe);
   16898:	|      tst.l 16(sp)
   1689c:	|  ,-- beq.s 168b4 <unfreeze+0x246>
   1689e:	|  |   move.l 16(sp),4(sp)
   168a4:	|  |   move.l 1e8c0 <SysBase>,d0
   168aa:	|  |   movea.l d0,a6
   168ac:	|  |   movea.l 4(sp),a1
   168b0:	|  |   jsr -690(a6)
	killMe = NULL;
   168b4:	|  '-> clr.l 16(sp)
   168b8:	|  ,-- bra.s 168bc <unfreeze+0x24e>
	if (! frozenStuff) return;
   168ba:	'--|-> nop
}
   168bc:	   '-> movea.l (sp)+,a6
   168be:	       lea 16(sp),sp
   168c2:	       rts

000168c4 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   168c4:	pea 1bf55 <talk.c.490538ff+0x8ad>
   168ca:	jsr 1857e <KPrintF>
   168d0:	addq.l #4,sp
	return FALSE;
   168d2:	clr.w d0
}
   168d4:	rts

000168d6 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   168d6:	          lea -32(sp),sp
   168da:	          move.l a6,-(sp)
   168dc:	          move.l d2,-(sp)
	unsigned int a = 0;
   168de:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   168e2:	          move.l 1e9c0 <fontOrderString>,d0
   168e8:	      ,-- beq.s 16902 <loadFont+0x2c>
   168ea:	      |   move.l 1e9c0 <fontOrderString>,24(sp)
   168f2:	      |   move.l 1e8c0 <SysBase>,d0
   168f8:	      |   movea.l d0,a6
   168fa:	      |   movea.l 24(sp),a1
   168fe:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   16902:	      '-> move.l 48(sp),-(sp)
   16906:	          jsr b8 <copyString>
   1690c:	          addq.l #4,sp
   1690e:	          move.l d0,1e9c0 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   16914:	          move.l 1e9cc <theFont>,d0
   1691a:	      ,-- beq.s 1692c <loadFont+0x56>
   1691c:	      |   move.l 1e9cc <theFont>,d0
   16922:	      |   move.l d0,-(sp)
   16924:	      |   jsr 93da <forgetSpriteBank>
   1692a:	      |   addq.l #4,sp
	theFont = NULL;
   1692c:	      '-> clr.l 1e9cc <theFont>

	loadedFontNum = filenum;
   16932:	          move.l 44(sp),1e9bc <loadedFontNum>

	fontTableSize = 0;
   1693a:	          clr.l 1e9c8 <fontTableSize>
	char *tmp = charOrder;
   16940:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   16946:	   ,----- bra.s 16982 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   16948:	,--|----> movea.l 32(sp),a0
   1694c:	|  |      move.b (a0),d0
   1694e:	|  |      ext.w d0
   16950:	|  |      movea.w d0,a0
   16952:	|  |      move.l 1e9c8 <fontTableSize>,d0
   16958:	|  |      move.l d0,d0
   1695a:	|  |      move.b d0,d0
   1695c:	|  |      andi.l #255,d0
   16962:	|  |      cmp.l a0,d0
   16964:	|  |  ,-- bge.s 16976 <loadFont+0xa0>
   16966:	|  |  |   movea.l 32(sp),a0
   1696a:	|  |  |   move.b (a0),d0
   1696c:	|  |  |   ext.w d0
   1696e:	|  |  |   movea.w d0,a0
   16970:	|  |  |   move.l a0,1e9c8 <fontTableSize>
		*tmp++;
   16976:	|  |  '-> move.l 32(sp),d0
   1697a:	|  |      move.l d0,d1
   1697c:	|  |      addq.l #1,d1
   1697e:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   16982:	|  '----> movea.l 32(sp),a0
   16986:	|         move.b (a0),d0
   16988:	'-------- bne.s 16948 <loadFont+0x72>
	}
	fontTableSize++;
   1698a:	          move.l 1e9c8 <fontTableSize>,d0
   16990:	          addq.l #1,d0
   16992:	          move.l d0,1e9c8 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   16998:	          move.l 1e9c4 <fontTable>,d0
   1699e:	      ,-- beq.s 169b8 <loadFont+0xe2>
   169a0:	      |   move.l 1e9c4 <fontTable>,20(sp)
   169a8:	      |   move.l 1e8c0 <SysBase>,d0
   169ae:	      |   movea.l d0,a6
   169b0:	      |   movea.l 20(sp),a1
   169b4:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   169b8:	      '-> move.l 1e9c8 <fontTableSize>,d0
   169be:	          add.l d0,d0
   169c0:	          add.l d0,d0
   169c2:	          move.l d0,16(sp)
   169c6:	          clr.l 12(sp)
   169ca:	          move.l 1e8c0 <SysBase>,d0
   169d0:	          movea.l d0,a6
   169d2:	          move.l 16(sp),d0
   169d6:	          move.l 12(sp),d1
   169da:	          jsr -684(a6)
   169de:	          move.l d0,8(sp)
   169e2:	          move.l 8(sp),d0
   169e6:	          move.l d0,1e9c4 <fontTable>
	if (!fontTable) return FALSE;
   169ec:	          move.l 1e9c4 <fontTable>,d0
   169f2:	      ,-- bne.s 169fa <loadFont+0x124>
   169f4:	      |   clr.w d0
   169f6:	,-----|-- bra.w 16aa0 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   169fa:	|     '-> clr.l 36(sp)
   169fe:	|     ,-- bra.s 16a18 <loadFont+0x142>
		fontTable[a] = 0;
   16a00:	|  ,--|-> move.l 1e9c4 <fontTable>,d1
   16a06:	|  |  |   move.l 36(sp),d0
   16a0a:	|  |  |   add.l d0,d0
   16a0c:	|  |  |   add.l d0,d0
   16a0e:	|  |  |   movea.l d1,a0
   16a10:	|  |  |   adda.l d0,a0
   16a12:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   16a14:	|  |  |   addq.l #1,36(sp)
   16a18:	|  |  '-> move.l 1e9c8 <fontTableSize>,d0
   16a1e:	|  |      cmp.l 36(sp),d0
   16a22:	|  '----- bhi.s 16a00 <loadFont+0x12a>
	}
	a = 0;
   16a24:	|         clr.l 36(sp)
	int i = 0;
   16a28:	|         clr.l 28(sp)
	tmp = charOrder;
   16a2c:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   16a32:	|     ,-- bra.s 16a62 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   16a34:	|  ,--|-> move.l 1e9c4 <fontTable>,d1
   16a3a:	|  |  |   move.l 32(sp),d0
   16a3e:	|  |  |   move.l d0,d2
   16a40:	|  |  |   addq.l #1,d2
   16a42:	|  |  |   move.l d2,32(sp)
   16a46:	|  |  |   movea.l d0,a0
   16a48:	|  |  |   move.b (a0),d0
   16a4a:	|  |  |   ext.w d0
   16a4c:	|  |  |   movea.w d0,a0
   16a4e:	|  |  |   move.l a0,d0
   16a50:	|  |  |   add.l a0,d0
   16a52:	|  |  |   add.l d0,d0
   16a54:	|  |  |   movea.l d1,a0
   16a56:	|  |  |   adda.l d0,a0
   16a58:	|  |  |   move.l 28(sp),d0
   16a5c:	|  |  |   move.l d0,(a0)
		i++;
   16a5e:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   16a62:	|  |  '-> movea.l 32(sp),a0
   16a66:	|  |      move.b (a0),d0
   16a68:	|  '----- bne.s 16a34 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   16a6a:	|         move.l 44(sp),-(sp)
   16a6e:	|         jsr 172a0 <loadBankForAnim>
   16a74:	|         addq.l #4,sp
   16a76:	|         move.l d0,1e9cc <theFont>
	if (!theFont) {
   16a7c:	|         move.l 1e9cc <theFont>,d0
   16a82:	|     ,-- bne.s 16a96 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   16a84:	|     |   pea 1bf7c <talk.c.490538ff+0x8d4>
   16a8a:	|     |   jsr 1857e <KPrintF>
   16a90:	|     |   addq.l #4,sp
		return FALSE;
   16a92:	|     |   clr.w d0
   16a94:	+-----|-- bra.s 16aa0 <loadFont+0x1ca>
	}
	fontHeight = h;
   16a96:	|     '-> move.l 52(sp),1e9b8 <fontHeight>
	return TRUE;
   16a9e:	|         moveq #1,d0
}
   16aa0:	'-------> move.l (sp)+,d2
   16aa2:	          movea.l (sp)+,a6
   16aa4:	          lea 32(sp),sp
   16aa8:	          rts

00016aaa <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   16aaa:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   16aae:	                clr.l 4(sp)

    if (!fontTableSize) return;
   16ab2:	                move.l 1e9c8 <fontTableSize>,d0
   16ab8:	,-------------- beq.w 16b80 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   16abc:	|               move.w 1e7b4 <fontSpace>,d0
   16ac2:	|               asr.w #1,d0
   16ac4:	|               ext.l d0
   16ac6:	|               add.l d0,20(sp)
	char *tmp = theText;
   16aca:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   16ad0:	|     ,-------- bra.w 16b74 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   16ad4:	|  ,--|-------> movea.l 1e9cc <theFont>,a0
   16ada:	|  |  |         movea.l 16(a0),a0
   16ade:	|  |  |         movea.l 8(sp),a1
   16ae2:	|  |  |         move.b (a1),d0
   16ae4:	|  |  |         move.b d0,d0
   16ae6:	|  |  |         andi.l #255,d0
   16aec:	|  |  |         move.l 1e9c8 <fontTableSize>,d1
   16af2:	|  |  |         cmp.l d0,d1
   16af4:	|  |  |  ,----- bls.s 16b20 <pasteStringToBackdrop+0x76>
   16af6:	|  |  |  |      move.l 1e9c4 <fontTable>,d1
   16afc:	|  |  |  |      movea.l 8(sp),a1
   16b00:	|  |  |  |      move.b (a1),d0
   16b02:	|  |  |  |      move.b d0,d0
   16b04:	|  |  |  |      andi.l #255,d0
   16b0a:	|  |  |  |      add.l d0,d0
   16b0c:	|  |  |  |      add.l d0,d0
   16b0e:	|  |  |  |      movea.l d1,a1
   16b10:	|  |  |  |      adda.l d0,a1
   16b12:	|  |  |  |      move.l (a1),d1
   16b14:	|  |  |  |      move.l d1,d0
   16b16:	|  |  |  |      lsl.l #3,d0
   16b18:	|  |  |  |      sub.l d1,d0
   16b1a:	|  |  |  |      add.l d0,d0
   16b1c:	|  |  |  |      add.l d0,d0
   16b1e:	|  |  |  |  ,-- bra.s 16b22 <pasteStringToBackdrop+0x78>
   16b20:	|  |  |  '--|-> moveq #0,d0
   16b22:	|  |  |     '-> adda.l d0,a0
   16b24:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   16b26:	|  |  |         move.l 24(sp),d1
   16b2a:	|  |  |         movea.l (sp),a0
   16b2c:	|  |  |         move.l 12(a0),d0
   16b30:	|  |  |         move.l d0,d0
   16b32:	|  |  |         sub.w d0,d1
   16b34:	|  |  |         move.w d1,d0
   16b36:	|  |  |         movea.w d0,a1
   16b38:	|  |  |         move.l 20(sp),d1
   16b3c:	|  |  |         movea.l (sp),a0
   16b3e:	|  |  |         move.l 8(a0),d0
   16b42:	|  |  |         move.l d0,d0
   16b44:	|  |  |         sub.w d0,d1
   16b46:	|  |  |         move.w d1,d0
   16b48:	|  |  |         movea.w d0,a0
   16b4a:	|  |  |         move.l a1,-(sp)
   16b4c:	|  |  |         move.l a0,-(sp)
   16b4e:	|  |  |         move.l 8(sp),-(sp)
   16b52:	|  |  |         jsr 2478 <CstPasteChar>
   16b58:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   16b5c:	|  |  |         movea.l (sp),a0
   16b5e:	|  |  |         move.l (a0),d1
   16b60:	|  |  |         move.w 1e7b4 <fontSpace>,d0
   16b66:	|  |  |         movea.w d0,a0
   16b68:	|  |  |         move.l d1,d0
   16b6a:	|  |  |         add.l a0,d0
   16b6c:	|  |  |         add.l d0,20(sp)
		tmp++;
   16b70:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   16b74:	|  |  '-------> movea.l 8(sp),a0
   16b78:	|  |            move.b (a0),d0
   16b7a:	|  '----------- bne.w 16ad4 <pasteStringToBackdrop+0x2a>
   16b7e:	|           ,-- bra.s 16b82 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   16b80:	'-----------|-> nop
    }
}
   16b82:	            '-> lea 12(sp),sp
   16b86:	                rts

00016b88 <stringWidth>:


int stringWidth (char * theText) {
   16b88:	                lea -16(sp),sp
	int a = 0;
   16b8c:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   16b90:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   16b94:	                move.l 1e9c8 <fontTableSize>,d0
   16b9a:	            ,-- bne.s 16ba0 <stringWidth+0x18>
   16b9c:	            |   moveq #0,d0
   16b9e:	,-----------|-- bra.s 16c14 <stringWidth+0x8c>

	char *tmp = theText;
   16ba0:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   16ba6:	|     ,-------- bra.s 16c08 <stringWidth+0x80>
        c = *tmp++;
   16ba8:	|  ,--|-------> move.l 8(sp),d0
   16bac:	|  |  |         move.l d0,d1
   16bae:	|  |  |         addq.l #1,d1
   16bb0:	|  |  |         move.l d1,8(sp)
   16bb4:	|  |  |         movea.l d0,a0
   16bb6:	|  |  |         move.b (a0),d0
   16bb8:	|  |  |         ext.w d0
   16bba:	|  |  |         movea.w d0,a0
   16bbc:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   16bbe:	|  |  |         movea.l 1e9cc <theFont>,a0
   16bc4:	|  |  |         movea.l 16(a0),a1
   16bc8:	|  |  |         move.l 1e9c8 <fontTableSize>,d0
   16bce:	|  |  |         cmp.l (sp),d0
   16bd0:	|  |  |  ,----- bls.s 16bf0 <stringWidth+0x68>
   16bd2:	|  |  |  |      move.l 1e9c4 <fontTable>,d1
   16bd8:	|  |  |  |      move.l (sp),d0
   16bda:	|  |  |  |      add.l d0,d0
   16bdc:	|  |  |  |      add.l d0,d0
   16bde:	|  |  |  |      movea.l d1,a0
   16be0:	|  |  |  |      adda.l d0,a0
   16be2:	|  |  |  |      move.l (a0),d1
   16be4:	|  |  |  |      move.l d1,d0
   16be6:	|  |  |  |      lsl.l #3,d0
   16be8:	|  |  |  |      sub.l d1,d0
   16bea:	|  |  |  |      add.l d0,d0
   16bec:	|  |  |  |      add.l d0,d0
   16bee:	|  |  |  |  ,-- bra.s 16bf2 <stringWidth+0x6a>
   16bf0:	|  |  |  '--|-> moveq #0,d0
   16bf2:	|  |  |     '-> lea (0,a1,d0.l),a0
   16bf6:	|  |  |         move.l (a0),d1
   16bf8:	|  |  |         move.w 1e7b4 <fontSpace>,d0
   16bfe:	|  |  |         movea.w d0,a0
   16c00:	|  |  |         move.l d1,d0
   16c02:	|  |  |         add.l a0,d0
   16c04:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   16c08:	|  |  '-------> movea.l 8(sp),a0
   16c0c:	|  |            move.b (a0),d0
   16c0e:	|  '----------- bne.s 16ba8 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   16c10:	|               move.l 12(sp),d0
}
   16c14:	'-------------> lea 16(sp),sp
   16c18:	                rts

00016c1a <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   16c1a:	       lea -16(sp),sp
   16c1e:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   16c20:	       moveq #36,d0
   16c22:	       move.l d0,16(sp)
   16c26:	       clr.l 12(sp)
   16c2a:	       move.l 1e8c0 <SysBase>,d0
   16c30:	       movea.l d0,a6
   16c32:	       move.l 16(sp),d0
   16c36:	       move.l 12(sp),d1
   16c3a:	       jsr -684(a6)
   16c3e:	       move.l d0,8(sp)
   16c42:	       move.l 8(sp),d0
   16c46:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   16c4a:	   ,-- bne.s 16c52 <addScreenRegion+0x38>
   16c4c:	   |   clr.w d0
   16c4e:	,--|-- bra.w 16cd2 <addScreenRegion+0xb8>
    newRegion->di = di;
   16c52:	|  '-> movea.l 4(sp),a0
   16c56:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   16c5c:	|      movea.l 4(sp),a0
   16c60:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   16c64:	|      movea.l 4(sp),a0
   16c68:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   16c6e:	|      movea.l 4(sp),a0
   16c72:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   16c78:	|      movea.l 4(sp),a0
   16c7c:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   16c82:	|      movea.l 4(sp),a0
   16c86:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   16c8c:	|      movea.l 4(sp),a0
   16c90:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   16c96:	|      move.l 52(sp),-(sp)
   16c9a:	|      jsr e076 <loadObjectType>
   16ca0:	|      addq.l #4,sp
   16ca2:	|      movea.l 4(sp),a0
   16ca6:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   16caa:	|      move.l 1e9d0 <allScreenRegions>,d0
   16cb0:	|      movea.l 4(sp),a0
   16cb4:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   16cb8:	|      move.l 4(sp),1e9d0 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   16cc0:	|      movea.l 4(sp),a0
   16cc4:	|      move.l 28(a0),d0
   16cc8:	|      sne d0
   16cca:	|      neg.b d0
   16ccc:	|      move.b d0,d0
   16cce:	|      andi.w #255,d0
}
   16cd2:	'----> movea.l (sp)+,a6
   16cd4:	       lea 16(sp),sp
   16cd8:	       rts

00016cda <getOverRegion>:

void getOverRegion () {
   16cda:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   16cdc:	             move.l 1e9d0 <allScreenRegions>,(sp)
	while (thisRegion) {
   16ce2:	   ,-------- bra.s 16d50 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   16ce4:	,--|-------> move.l 1e87a <input+0xa>,d0
   16cea:	|  |         movea.l (sp),a0
   16cec:	|  |         movea.l (a0),a0
   16cee:	|  |         move.l 1e97a <cameraX>,d1
   16cf4:	|  |         suba.l d1,a0
   16cf6:	|  |         cmpa.l d0,a0
   16cf8:	|  |  ,----- bgt.s 16d4a <getOverRegion+0x70>
   16cfa:	|  |  |      move.l 1e87e <input+0xe>,d0
   16d00:	|  |  |      movea.l (sp),a0
   16d02:	|  |  |      movea.l 4(a0),a0
   16d06:	|  |  |      move.l 1e97e <cameraY>,d1
   16d0c:	|  |  |      suba.l d1,a0
   16d0e:	|  |  |      cmpa.l d0,a0
   16d10:	|  |  +----- bgt.s 16d4a <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   16d12:	|  |  |      move.l 1e87a <input+0xa>,d0
   16d18:	|  |  |      movea.l (sp),a0
   16d1a:	|  |  |      movea.l 8(a0),a0
   16d1e:	|  |  |      move.l 1e97a <cameraX>,d1
   16d24:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   16d26:	|  |  |      cmpa.l d0,a0
   16d28:	|  |  +----- blt.s 16d4a <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   16d2a:	|  |  |      move.l 1e87e <input+0xe>,d0
   16d30:	|  |  |      movea.l (sp),a0
   16d32:	|  |  |      movea.l 12(a0),a0
   16d36:	|  |  |      move.l 1e97e <cameraY>,d1
   16d3c:	|  |  |      suba.l d1,a0
   16d3e:	|  |  |      cmpa.l d0,a0
   16d40:	|  |  +----- blt.s 16d4a <getOverRegion+0x70>
			overRegion = thisRegion;
   16d42:	|  |  |      move.l (sp),1e9d4 <overRegion>
			return;
   16d48:	|  |  |  ,-- bra.s 16d5c <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   16d4a:	|  |  '--|-> movea.l (sp),a0
   16d4c:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   16d50:	|  '-----|-> tst.l (sp)
   16d52:	'--------|-- bne.s 16ce4 <getOverRegion+0xa>
	}
	overRegion = NULL;
   16d54:	         |   clr.l 1e9d4 <overRegion>
	return;
   16d5a:	         |   nop
}
   16d5c:	         '-> addq.l #4,sp
   16d5e:	             rts

00016d60 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   16d60:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   16d62:	             move.l 1e9d0 <allScreenRegions>,(sp)

	while (thisRegion) {
   16d68:	   ,-------- bra.s 16d84 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   16d6a:	,--|-------> movea.l (sp),a0
   16d6c:	|  |         movea.l 28(a0),a0
   16d70:	|  |         move.l 4(a0),d0
   16d74:	|  |         cmp.l 8(sp),d0
   16d78:	|  |     ,-- bne.s 16d7e <getRegionForObject+0x1e>
			return thisRegion;
   16d7a:	|  |     |   move.l (sp),d0
   16d7c:	|  |  ,--|-- bra.s 16d8a <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   16d7e:	|  |  |  '-> movea.l (sp),a0
   16d80:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   16d84:	|  '--|----> tst.l (sp)
   16d86:	'-----|----- bne.s 16d6a <getRegionForObject+0xa>
	}

	return NULL;
   16d88:	      |      moveq #0,d0
}
   16d8a:	      '----> addq.l #4,sp
   16d8c:	             rts

00016d8e <killAllRegions>:

void killAllRegions () {
   16d8e:	       subq.l #8,sp
   16d90:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   16d92:	   ,-- bra.s 16dd4 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   16d94:	,--|-> move.l 1e9d0 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   16d9c:	|  |   movea.l 1e9d0 <allScreenRegions>,a0
   16da2:	|  |   move.l 32(a0),d0
   16da6:	|  |   move.l d0,1e9d0 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   16dac:	|  |   movea.l 8(sp),a0
   16db0:	|  |   move.l 28(a0),d0
   16db4:	|  |   move.l d0,-(sp)
   16db6:	|  |   jsr e32e <removeObjectType>
   16dbc:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   16dbe:	|  |   move.l 8(sp),4(sp)
   16dc4:	|  |   move.l 1e8c0 <SysBase>,d0
   16dca:	|  |   movea.l d0,a6
   16dcc:	|  |   movea.l 4(sp),a1
   16dd0:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   16dd4:	|  '-> move.l 1e9d0 <allScreenRegions>,d0
   16dda:	'----- bne.s 16d94 <killAllRegions+0x6>
	}
	overRegion = NULL;
   16ddc:	       clr.l 1e9d4 <overRegion>
}
   16de2:	       nop
   16de4:	       movea.l (sp)+,a6
   16de6:	       addq.l #8,sp
   16de8:	       rts

00016dea <loadRegions>:

void loadRegions (BPTR fp) {
   16dea:	       lea -24(sp),sp
   16dee:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   16df0:	       move.l 32(sp),-(sp)
   16df4:	       jsr 6bc <get2bytes>
   16dfa:	       addq.l #4,sp
   16dfc:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   16e00:	       move.l #125392,20(sp)

	while (numRegions --) {
   16e08:	   ,-- bra.w 16ee6 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   16e0c:	,--|-> moveq #36,d0
   16e0e:	|  |   move.l d0,16(sp)
   16e12:	|  |   clr.l 12(sp)
   16e16:	|  |   move.l 1e8c0 <SysBase>,d0
   16e1c:	|  |   movea.l d0,a6
   16e1e:	|  |   move.l 16(sp),d0
   16e22:	|  |   move.l 12(sp),d1
   16e26:	|  |   jsr -684(a6)
   16e2a:	|  |   move.l d0,8(sp)
   16e2e:	|  |   move.l 8(sp),d0
   16e32:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   16e36:	|  |   movea.l 20(sp),a0
   16e3a:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   16e3e:	|  |   moveq #32,d1
   16e40:	|  |   add.l 4(sp),d1
   16e44:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   16e48:	|  |   move.l 32(sp),-(sp)
   16e4c:	|  |   jsr 6bc <get2bytes>
   16e52:	|  |   addq.l #4,sp
   16e54:	|  |   movea.l 4(sp),a0
   16e58:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   16e5a:	|  |   move.l 32(sp),-(sp)
   16e5e:	|  |   jsr 6bc <get2bytes>
   16e64:	|  |   addq.l #4,sp
   16e66:	|  |   movea.l 4(sp),a0
   16e6a:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   16e6e:	|  |   move.l 32(sp),-(sp)
   16e72:	|  |   jsr 6bc <get2bytes>
   16e78:	|  |   addq.l #4,sp
   16e7a:	|  |   movea.l 4(sp),a0
   16e7e:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   16e82:	|  |   move.l 32(sp),-(sp)
   16e86:	|  |   jsr 6bc <get2bytes>
   16e8c:	|  |   addq.l #4,sp
   16e8e:	|  |   movea.l 4(sp),a0
   16e92:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   16e96:	|  |   move.l 32(sp),-(sp)
   16e9a:	|  |   jsr 6bc <get2bytes>
   16ea0:	|  |   addq.l #4,sp
   16ea2:	|  |   movea.l 4(sp),a0
   16ea6:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   16eaa:	|  |   move.l 32(sp),-(sp)
   16eae:	|  |   jsr 6bc <get2bytes>
   16eb4:	|  |   addq.l #4,sp
   16eb6:	|  |   movea.l 4(sp),a0
   16eba:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   16ebe:	|  |   move.l 32(sp),-(sp)
   16ec2:	|  |   jsr 6bc <get2bytes>
   16ec8:	|  |   addq.l #4,sp
   16eca:	|  |   movea.l 4(sp),a0
   16ece:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   16ed2:	|  |   move.l 32(sp),-(sp)
   16ed6:	|  |   jsr e024 <loadObjectRef>
   16edc:	|  |   addq.l #4,sp
   16ede:	|  |   movea.l 4(sp),a0
   16ee2:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   16ee6:	|  '-> move.l 24(sp),d0
   16eea:	|      move.l d0,d1
   16eec:	|      subq.l #1,d1
   16eee:	|      move.l d1,24(sp)
   16ef2:	|      tst.l d0
   16ef4:	'----- bne.w 16e0c <loadRegions+0x22>
	}
	* pointy = NULL;
   16ef8:	       movea.l 20(sp),a0
   16efc:	       clr.l (a0)
}
   16efe:	       nop
   16f00:	       movea.l (sp)+,a6
   16f02:	       lea 24(sp),sp
   16f06:	       rts

00016f08 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   16f08:	             lea -12(sp),sp
   16f0c:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   16f0e:	             move.l #125392,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   16f16:	   ,-------- bra.s 16f90 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   16f18:	,--|-------> movea.l 12(sp),a0
   16f1c:	|  |         movea.l (a0),a0
   16f1e:	|  |         movea.l 28(a0),a0
   16f22:	|  |         move.l 4(a0),d0
   16f26:	|  |         cmp.l 20(sp),d0
   16f2a:	|  |  ,----- bne.s 16f82 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   16f2c:	|  |  |      movea.l 12(sp),a0
   16f30:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   16f34:	|  |  |      movea.l 8(sp),a0
   16f38:	|  |  |      move.l 32(a0),d0
   16f3c:	|  |  |      movea.l 12(sp),a0
   16f40:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   16f42:	|  |  |      movea.l 8(sp),a0
   16f46:	|  |  |      move.l 28(a0),d0
   16f4a:	|  |  |      move.l d0,-(sp)
   16f4c:	|  |  |      jsr e32e <removeObjectType>
   16f52:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   16f54:	|  |  |      move.l 1e9d4 <overRegion>,d0
   16f5a:	|  |  |      cmp.l 8(sp),d0
   16f5e:	|  |  |  ,-- bne.s 16f66 <removeScreenRegion+0x5e>
   16f60:	|  |  |  |   clr.l 1e9d4 <overRegion>
            FreeVec(killMe);
   16f66:	|  |  |  '-> move.l 8(sp),4(sp)
   16f6c:	|  |  |      move.l 1e8c0 <SysBase>,d0
   16f72:	|  |  |      movea.l d0,a6
   16f74:	|  |  |      movea.l 4(sp),a1
   16f78:	|  |  |      jsr -690(a6)
            killMe = NULL;
   16f7c:	|  |  |      clr.l 8(sp)
   16f80:	|  +--|----- bra.s 16f90 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   16f82:	|  |  '----> movea.l 12(sp),a0
   16f86:	|  |         move.l (a0),d0
   16f88:	|  |         moveq #32,d1
   16f8a:	|  |         add.l d0,d1
   16f8c:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   16f90:	|  '-------> movea.l 12(sp),a0
   16f94:	|            move.l (a0),d0
   16f96:	'----------- bne.s 16f18 <removeScreenRegion+0x10>
        }
    }
}
   16f98:	             nop
   16f9a:	             nop
   16f9c:	             movea.l (sp)+,a6
   16f9e:	             lea 12(sp),sp
   16fa2:	             rts

00016fa4 <saveRegions>:

void saveRegions (BPTR fp) {
   16fa4:	       subq.l #8,sp
	int numRegions = 0;
   16fa6:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   16faa:	       move.l 1e9d0 <allScreenRegions>,(sp)
	while (thisRegion) {
   16fb0:	   ,-- bra.s 16fbc <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   16fb2:	,--|-> movea.l (sp),a0
   16fb4:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   16fb8:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   16fbc:	|  '-> tst.l (sp)
   16fbe:	'----- bne.s 16fb2 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   16fc0:	       move.l 12(sp),-(sp)
   16fc4:	       move.l 8(sp),-(sp)
   16fc8:	       jsr 8d0 <put2bytes>
   16fce:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   16fd0:	       move.l 1e9d0 <allScreenRegions>,(sp)
	while (thisRegion) {
   16fd6:	,----- bra.w 1707e <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   16fda:	|  ,-> movea.l (sp),a0
   16fdc:	|  |   move.l (a0),d0
   16fde:	|  |   move.l 12(sp),-(sp)
   16fe2:	|  |   move.l d0,-(sp)
   16fe4:	|  |   jsr 8d0 <put2bytes>
   16fea:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   16fec:	|  |   movea.l (sp),a0
   16fee:	|  |   move.l 4(a0),d0
   16ff2:	|  |   move.l 12(sp),-(sp)
   16ff6:	|  |   move.l d0,-(sp)
   16ff8:	|  |   jsr 8d0 <put2bytes>
   16ffe:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   17000:	|  |   movea.l (sp),a0
   17002:	|  |   move.l 8(a0),d0
   17006:	|  |   move.l 12(sp),-(sp)
   1700a:	|  |   move.l d0,-(sp)
   1700c:	|  |   jsr 8d0 <put2bytes>
   17012:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   17014:	|  |   movea.l (sp),a0
   17016:	|  |   move.l 12(a0),d0
   1701a:	|  |   move.l 12(sp),-(sp)
   1701e:	|  |   move.l d0,-(sp)
   17020:	|  |   jsr 8d0 <put2bytes>
   17026:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   17028:	|  |   movea.l (sp),a0
   1702a:	|  |   move.l 16(a0),d0
   1702e:	|  |   move.l 12(sp),-(sp)
   17032:	|  |   move.l d0,-(sp)
   17034:	|  |   jsr 8d0 <put2bytes>
   1703a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   1703c:	|  |   movea.l (sp),a0
   1703e:	|  |   move.l 20(a0),d0
   17042:	|  |   move.l 12(sp),-(sp)
   17046:	|  |   move.l d0,-(sp)
   17048:	|  |   jsr 8d0 <put2bytes>
   1704e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   17050:	|  |   movea.l (sp),a0
   17052:	|  |   move.l 24(a0),d0
   17056:	|  |   move.l 12(sp),-(sp)
   1705a:	|  |   move.l d0,-(sp)
   1705c:	|  |   jsr 8d0 <put2bytes>
   17062:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   17064:	|  |   movea.l (sp),a0
   17066:	|  |   move.l 28(a0),d0
   1706a:	|  |   move.l 12(sp),-(sp)
   1706e:	|  |   move.l d0,-(sp)
   17070:	|  |   jsr e3ce <saveObjectRef>
   17076:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   17078:	|  |   movea.l (sp),a0
   1707a:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   1707e:	'--|-> tst.l (sp)
   17080:	   '-- bne.w 16fda <saveRegions+0x36>
	}
}
   17084:	       nop
   17086:	       nop
   17088:	       addq.l #8,sp
   1708a:	       rts

0001708c <showBoxes>:

void showBoxes () {
   1708c:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   1708e:	       move.l 1e9d0 <allScreenRegions>,(sp)

	while (huntRegion) {
   17094:	,----- bra.w 17130 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   17098:	|  ,-> movea.l (sp),a0
   1709a:	|  |   move.l 12(a0),d0
   1709e:	|  |   movea.l d0,a1
   170a0:	|  |   movea.l (sp),a0
   170a2:	|  |   move.l 4(a0),d0
   170a6:	|  |   move.l d0,d1
   170a8:	|  |   movea.l (sp),a0
   170aa:	|  |   move.l (a0),d0
   170ac:	|  |   move.l a1,-(sp)
   170ae:	|  |   move.l d1,-(sp)
   170b0:	|  |   move.l d0,-(sp)
   170b2:	|  |   jsr dcb2 <drawVerticalLine>
   170b8:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   170bc:	|  |   movea.l (sp),a0
   170be:	|  |   move.l 12(a0),d0
   170c2:	|  |   movea.l d0,a1
   170c4:	|  |   movea.l (sp),a0
   170c6:	|  |   move.l 4(a0),d0
   170ca:	|  |   move.l d0,d1
   170cc:	|  |   movea.l (sp),a0
   170ce:	|  |   move.l 8(a0),d0
   170d2:	|  |   move.l a1,-(sp)
   170d4:	|  |   move.l d1,-(sp)
   170d6:	|  |   move.l d0,-(sp)
   170d8:	|  |   jsr dcb2 <drawVerticalLine>
   170de:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   170e2:	|  |   movea.l (sp),a0
   170e4:	|  |   move.l 8(a0),d0
   170e8:	|  |   movea.l d0,a1
   170ea:	|  |   movea.l (sp),a0
   170ec:	|  |   move.l 4(a0),d0
   170f0:	|  |   move.l d0,d1
   170f2:	|  |   movea.l (sp),a0
   170f4:	|  |   move.l (a0),d0
   170f6:	|  |   move.l a1,-(sp)
   170f8:	|  |   move.l d1,-(sp)
   170fa:	|  |   move.l d0,-(sp)
   170fc:	|  |   jsr dc8c <drawHorizontalLine>
   17102:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   17106:	|  |   movea.l (sp),a0
   17108:	|  |   move.l 8(a0),d0
   1710c:	|  |   movea.l d0,a1
   1710e:	|  |   movea.l (sp),a0
   17110:	|  |   move.l 12(a0),d0
   17114:	|  |   move.l d0,d1
   17116:	|  |   movea.l (sp),a0
   17118:	|  |   move.l (a0),d0
   1711a:	|  |   move.l a1,-(sp)
   1711c:	|  |   move.l d1,-(sp)
   1711e:	|  |   move.l d0,-(sp)
   17120:	|  |   jsr dc8c <drawHorizontalLine>
   17126:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   1712a:	|  |   movea.l (sp),a0
   1712c:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   17130:	'--|-> tst.l (sp)
   17132:	   '-- bne.w 17098 <showBoxes+0xc>
	}
   17136:	       nop
   17138:	       nop
   1713a:	       addq.l #4,sp
   1713c:	       rts

0001713e <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   1713e:	       lea -88(sp),sp
   17142:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   17144:	       move.l 1e8c0 <SysBase>,d0
   1714a:	       movea.l d0,a6
   1714c:	       jsr -666(a6)
   17150:	       move.l d0,88(sp)
   17154:	       move.l 88(sp),d0
   17158:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   1715c:	       move.l 84(sp),80(sp)
   17162:	       moveq #40,d0
   17164:	       move.l d0,76(sp)
   17168:	       move.l 1e8c0 <SysBase>,d0
   1716e:	       movea.l d0,a6
   17170:	       movea.l 80(sp),a0
   17174:	       move.l 76(sp),d0
   17178:	       jsr -654(a6)
   1717c:	       move.l d0,72(sp)
   17180:	       move.l 72(sp),d0
   17184:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   17188:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   1718e:	       move.l #114582,60(sp)
   17196:	       clr.l 56(sp)
   1719a:	       move.l 64(sp),52(sp)
   171a0:	       clr.l 48(sp)
   171a4:	       move.l 1e8c0 <SysBase>,d0
   171aa:	       movea.l d0,a6
   171ac:	       movea.l 60(sp),a0
   171b0:	       move.l 56(sp),d0
   171b4:	       movea.l 52(sp),a1
   171b8:	       move.l 48(sp),d1
   171bc:	       jsr -444(a6)
   171c0:	       move.b d0,47(sp)
   171c4:	       move.b 47(sp),d0
   171c8:	   ,-- beq.s 171de <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   171ca:	   |   pea 1bfa3 <talk.c.490538ff+0x8fb>
   171d0:	   |   jsr 1857e <KPrintF>
   171d6:	   |   addq.l #4,sp
        return 0;
   171d8:	   |   moveq #0,d0
   171da:	,--|-- bra.w 17298 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   171de:	|  '-> movea.l 64(sp),a0
   171e2:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   171e8:	|      lea 92(sp),a0
   171ec:	|      lea -86(a0),a0
   171f0:	|      move.l a0,38(sp)
   171f4:	|      movea.l 42(sp),a6
   171f8:	|      movea.l 38(sp),a0
   171fc:	|      jsr -60(a6)
   17200:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   17204:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   1720a:	|      move.l #1103515245,-(sp)
   17210:	|      move.l 34(sp),-(sp)
   17214:	|      jsr 18f0a <__mulsi3>
   1721a:	|      addq.l #8,sp
   1721c:	|      addi.l #12345,d0
   17222:	|      move.l d0,d1
   17224:	|      bclr #31,d1
   17228:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   1722c:	|      move.l 30(sp),d0
   17230:	|      pea 64 <_start+0x64>
   17234:	|      move.l d0,-(sp)
   17236:	|      jsr 18fe4 <__umodsi3>
   1723c:	|      addq.l #8,sp
   1723e:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   17242:	|      move.l 26(sp),-(sp)
   17246:	|      pea 1bfc0 <talk.c.490538ff+0x918>
   1724c:	|      jsr 1857e <KPrintF>
   17252:	|      addq.l #8,sp

    CloseDevice(ioreq);
   17254:	|      move.l 64(sp),22(sp)
   1725a:	|      move.l 1e8c0 <SysBase>,d0
   17260:	|      movea.l d0,a6
   17262:	|      movea.l 22(sp),a1
   17266:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   1726a:	|      move.l 64(sp),18(sp)
   17270:	|      move.l 1e8c0 <SysBase>,d0
   17276:	|      movea.l d0,a6
   17278:	|      movea.l 18(sp),a0
   1727c:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   17280:	|      move.l 84(sp),14(sp)
   17286:	|      move.l 1e8c0 <SysBase>,d0
   1728c:	|      movea.l d0,a6
   1728e:	|      movea.l 14(sp),a0
   17292:	|      jsr -672(a6)
    return 0;
   17296:	|      moveq #0,d0
   17298:	'----> movea.l (sp)+,a6
   1729a:	       lea 88(sp),sp
   1729e:	       rts

000172a0 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   172a0:	             lea -20(sp),sp
   172a4:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   172a6:	             move.l 1e9d8 <allLoadedBanks>,20(sp)
	while (returnMe) {
   172ae:	      ,----- bra.s 172e0 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   172b0:	   ,--|----> movea.l 20(sp),a0
   172b4:	   |  |      move.l (a0),d0
   172b6:	   |  |      cmp.l 28(sp),d0
   172ba:	   |  |  ,-- bne.s 172d6 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   172bc:	   |  |  |   movea.l 20(sp),a0
   172c0:	   |  |  |   move.l 4(a0),d0
   172c4:	   |  |  |   addq.l #1,d0
   172c6:	   |  |  |   movea.l 20(sp),a0
   172ca:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   172ce:	   |  |  |   move.l 20(sp),d0
   172d2:	,--|--|--|-- bra.w 17374 <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   172d6:	|  |  |  '-> movea.l 20(sp),a0
   172da:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   172e0:	|  |  '----> tst.l 20(sp)
   172e4:	|  '-------- bne.s 172b0 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   172e6:	|            moveq #26,d0
   172e8:	|            move.l d0,16(sp)
   172ec:	|            clr.l 12(sp)
   172f0:	|            move.l 1e8c0 <SysBase>,d0
   172f6:	|            movea.l d0,a6
   172f8:	|            move.l 16(sp),d0
   172fc:	|            move.l 12(sp),d1
   17300:	|            jsr -684(a6)
   17304:	|            move.l d0,8(sp)
   17308:	|            move.l 8(sp),d0
   1730c:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   17310:	|     ,----- beq.s 17372 <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   17312:	|     |      movea.l 20(sp),a0
   17316:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   1731a:	|     |      move.l 20(sp),d0
   1731e:	|     |      addq.l #8,d0
   17320:	|     |      move.l d0,-(sp)
   17322:	|     |      move.l 32(sp),-(sp)
   17326:	|     |      jsr 94e6 <loadSpriteBank>
   1732c:	|     |      addq.l #8,sp
   1732e:	|     |      tst.w d0
   17330:	|     |  ,-- beq.s 17358 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   17332:	|     |  |   movea.l 20(sp),a0
   17336:	|     |  |   moveq #1,d0
   17338:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   1733c:	|     |  |   move.l 1e9d8 <allLoadedBanks>,d0
   17342:	|     |  |   movea.l 20(sp),a0
   17346:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   1734a:	|     |  |   move.l 20(sp),1e9d8 <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   17352:	|     |  |   move.l 20(sp),d0
   17356:	+-----|--|-- bra.s 17374 <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   17358:	|     |  '-> move.l 20(sp),4(sp)
   1735e:	|     |      move.l 1e8c0 <SysBase>,d0
   17364:	|     |      movea.l d0,a6
   17366:	|     |      movea.l 4(sp),a1
   1736a:	|     |      jsr -690(a6)
			return NULL;
   1736e:	|     |      moveq #0,d0
   17370:	+-----|----- bra.s 17374 <loadBankForAnim+0xd4>
		}
	} else return NULL;
   17372:	|     '----> moveq #0,d0
}
   17374:	'----------> movea.l (sp)+,a6
   17376:	             lea 20(sp),sp
   1737a:	             rts

0001737c <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   1737c:	       lea -60(sp),sp
   17380:	       move.l d3,-(sp)
   17382:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   17384:	       move.l 88(sp),d0
   17388:	       sub.l 80(sp),d0
   1738c:	       move.l d0,-(sp)
   1738e:	       jsr 18970 <__floatsidf>
   17394:	       addq.l #4,sp
   17396:	       move.l d0,32(sp)
   1739a:	       move.l d1,36(sp)
   1739e:	       move.l 32(sp),60(sp)
   173a4:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   173aa:	       move.l 92(sp),d0
   173ae:	       sub.l 84(sp),d0
   173b2:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   173b6:	       move.l 96(sp),d0
   173ba:	       sub.l 80(sp),d0
   173be:	       move.l d0,-(sp)
   173c0:	       jsr 18970 <__floatsidf>
   173c6:	       addq.l #4,sp
   173c8:	       move.l 64(sp),-(sp)
   173cc:	       move.l 64(sp),-(sp)
   173d0:	       move.l d1,-(sp)
   173d2:	       move.l d0,-(sp)
   173d4:	       jsr 18a00 <__muldf3>
   173da:	       lea 16(sp),sp
   173de:	       move.l d0,d2
   173e0:	       move.l d1,d3
   173e2:	       move.l 100(sp),d0
   173e6:	       sub.l 84(sp),d0
   173ea:	       move.l 56(sp),-(sp)
   173ee:	       move.l d0,-(sp)
   173f0:	       jsr 18f0a <__mulsi3>
   173f6:	       addq.l #8,sp
   173f8:	       move.l d0,-(sp)
   173fa:	       jsr 18970 <__floatsidf>
   17400:	       addq.l #4,sp
   17402:	       move.l d1,-(sp)
   17404:	       move.l d0,-(sp)
   17406:	       move.l d3,-(sp)
   17408:	       move.l d2,-(sp)
   1740a:	       jsr 187a2 <__adddf3>
   17410:	       lea 16(sp),sp
   17414:	       move.l d0,24(sp)
   17418:	       move.l d1,28(sp)
   1741c:	       move.l 24(sp),48(sp)
   17422:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   17428:	       move.l 64(sp),-(sp)
   1742c:	       move.l 64(sp),-(sp)
   17430:	       move.l 72(sp),-(sp)
   17434:	       move.l 72(sp),-(sp)
   17438:	       jsr 18a00 <__muldf3>
   1743e:	       lea 16(sp),sp
   17442:	       move.l d0,d2
   17444:	       move.l d1,d3
   17446:	       move.l 56(sp),-(sp)
   1744a:	       move.l 60(sp),-(sp)
   1744e:	       jsr 18f0a <__mulsi3>
   17454:	       addq.l #8,sp
   17456:	       move.l d0,-(sp)
   17458:	       jsr 18970 <__floatsidf>
   1745e:	       addq.l #4,sp
   17460:	       move.l d1,-(sp)
   17462:	       move.l d0,-(sp)
   17464:	       move.l d3,-(sp)
   17466:	       move.l d2,-(sp)
   17468:	       jsr 187a2 <__adddf3>
   1746e:	       lea 16(sp),sp
   17472:	       move.l d1,-(sp)
   17474:	       move.l d0,-(sp)
   17476:	       move.l 60(sp),-(sp)
   1747a:	       move.l 60(sp),-(sp)
   1747e:	       jsr 18804 <__divdf3>
   17484:	       lea 16(sp),sp
   17488:	       move.l d0,16(sp)
   1748c:	       move.l d1,20(sp)
   17490:	       move.l 16(sp),48(sp)
   17496:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   1749c:	       clr.l -(sp)
   1749e:	       clr.l -(sp)
   174a0:	       move.l 60(sp),-(sp)
   174a4:	       move.l 60(sp),-(sp)
   174a8:	       jsr 18b88 <__ltdf2>
   174ae:	       lea 16(sp),sp
   174b2:	       tst.l d0
   174b4:	   ,-- bge.s 174ca <closestPointOnLine+0x14e>
		*closestX = x1;
   174b6:	   |   movea.l 72(sp),a0
   174ba:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   174be:	   |   movea.l 76(sp),a0
   174c2:	   |   move.l 84(sp),(a0)
   174c6:	,--|-- bra.w 17598 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   174ca:	|  '-> clr.l -(sp)
   174cc:	|      move.l #1072693248,-(sp)
   174d2:	|      move.l 60(sp),-(sp)
   174d6:	|      move.l 60(sp),-(sp)
   174da:	|      jsr 18ace <__gtdf2>
   174e0:	|      lea 16(sp),sp
   174e4:	|      tst.l d0
   174e6:	|  ,-- ble.s 174fc <closestPointOnLine+0x180>
		*closestX = x2;
   174e8:	|  |   movea.l 72(sp),a0
   174ec:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   174f0:	|  |   movea.l 76(sp),a0
   174f4:	|  |   move.l 92(sp),(a0)
   174f8:	+--|-- bra.w 17598 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   174fc:	|  '-> move.l 64(sp),-(sp)
   17500:	|      move.l 64(sp),-(sp)
   17504:	|      move.l 60(sp),-(sp)
   17508:	|      move.l 60(sp),-(sp)
   1750c:	|      jsr 18a00 <__muldf3>
   17512:	|      lea 16(sp),sp
   17516:	|      move.l d0,8(sp)
   1751a:	|      move.l d1,12(sp)
   1751e:	|      move.l 8(sp),40(sp)
   17524:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   1752a:	|      move.l 44(sp),-(sp)
   1752e:	|      move.l 44(sp),-(sp)
   17532:	|      jsr 18912 <__fixdfsi>
   17538:	|      addq.l #8,sp
   1753a:	|      movea.l 72(sp),a0
   1753e:	|      move.l d0,(a0)
		*closestX += x1;
   17540:	|      movea.l 72(sp),a0
   17544:	|      move.l (a0),d0
   17546:	|      add.l 80(sp),d0
   1754a:	|      movea.l 72(sp),a0
   1754e:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   17550:	|      move.l 56(sp),-(sp)
   17554:	|      jsr 18970 <__floatsidf>
   1755a:	|      addq.l #4,sp
   1755c:	|      move.l 52(sp),-(sp)
   17560:	|      move.l 52(sp),-(sp)
   17564:	|      move.l d1,-(sp)
   17566:	|      move.l d0,-(sp)
   17568:	|      jsr 18a00 <__muldf3>
   1756e:	|      lea 16(sp),sp
   17572:	|      move.l d1,-(sp)
   17574:	|      move.l d0,-(sp)
   17576:	|      jsr 18912 <__fixdfsi>
   1757c:	|      addq.l #8,sp
   1757e:	|      movea.l 76(sp),a0
   17582:	|      move.l d0,(a0)
		*closestY += y1;
   17584:	|      movea.l 76(sp),a0
   17588:	|      move.l (a0),d0
   1758a:	|      add.l 84(sp),d0
   1758e:	|      movea.l 76(sp),a0
   17592:	|      move.l d0,(a0)
		return TRUE;
   17594:	|      moveq #1,d0
   17596:	|  ,-- bra.s 1759a <closestPointOnLine+0x21e>
	}
	return FALSE;
   17598:	'--|-> clr.w d0
}
   1759a:	   '-> move.l (sp)+,d2
   1759c:	       move.l (sp)+,d3
   1759e:	       lea 60(sp),sp
   175a2:	       rts

000175a4 <drawFloor>:

void drawFloor() {
   175a4:	                lea -12(sp),sp
   175a8:	                move.l d3,-(sp)
   175aa:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   175ac:	                clr.l 16(sp)
   175b0:	   ,----------- bra.w 177c4 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   175b4:	,--|----------> movea.l 1e9dc <currentFloor>,a0
   175ba:	|  |            move.l 12(a0),d1
   175be:	|  |            move.l 16(sp),d0
   175c2:	|  |            lsl.l #3,d0
   175c4:	|  |            movea.l d1,a0
   175c6:	|  |            adda.l d0,a0
   175c8:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   175cc:	|  |            moveq #1,d0
   175ce:	|  |            cmp.l 8(sp),d0
   175d2:	|  |  ,-------- bge.w 177c0 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   175d6:	|  |  |         moveq #1,d0
   175d8:	|  |  |         move.l d0,12(sp)
   175dc:	|  |  |     ,-- bra.w 176d6 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   175e0:	|  |  |  ,--|-> movea.l 1e9dc <currentFloor>,a0
   175e6:	|  |  |  |  |   move.l 4(a0),d1
   175ea:	|  |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   175f0:	|  |  |  |  |   movea.l 12(a0),a0
   175f4:	|  |  |  |  |   move.l 16(sp),d0
   175f8:	|  |  |  |  |   lsl.l #3,d0
   175fa:	|  |  |  |  |   adda.l d0,a0
   175fc:	|  |  |  |  |   movea.l 4(a0),a0
   17600:	|  |  |  |  |   move.l 12(sp),d0
   17604:	|  |  |  |  |   add.l d0,d0
   17606:	|  |  |  |  |   add.l d0,d0
   17608:	|  |  |  |  |   adda.l d0,a0
   1760a:	|  |  |  |  |   move.l (a0),d0
   1760c:	|  |  |  |  |   lsl.l #3,d0
   1760e:	|  |  |  |  |   movea.l d1,a0
   17610:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   17612:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   17616:	|  |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   1761c:	|  |  |  |  |   move.l 4(a0),d1
   17620:	|  |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   17626:	|  |  |  |  |   movea.l 12(a0),a0
   1762a:	|  |  |  |  |   move.l 16(sp),d0
   1762e:	|  |  |  |  |   lsl.l #3,d0
   17630:	|  |  |  |  |   adda.l d0,a0
   17632:	|  |  |  |  |   movea.l 4(a0),a0
   17636:	|  |  |  |  |   move.l 12(sp),d0
   1763a:	|  |  |  |  |   add.l d0,d0
   1763c:	|  |  |  |  |   add.l d0,d0
   1763e:	|  |  |  |  |   adda.l d0,a0
   17640:	|  |  |  |  |   move.l (a0),d0
   17642:	|  |  |  |  |   lsl.l #3,d0
   17644:	|  |  |  |  |   movea.l d1,a0
   17646:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   17648:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1764a:	|  |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   17650:	|  |  |  |  |   move.l 4(a0),d1
   17654:	|  |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   1765a:	|  |  |  |  |   movea.l 12(a0),a0
   1765e:	|  |  |  |  |   move.l 16(sp),d0
   17662:	|  |  |  |  |   lsl.l #3,d0
   17664:	|  |  |  |  |   adda.l d0,a0
   17666:	|  |  |  |  |   movea.l 4(a0),a0
   1766a:	|  |  |  |  |   move.l 12(sp),d0
   1766e:	|  |  |  |  |   addi.l #1073741823,d0
   17674:	|  |  |  |  |   add.l d0,d0
   17676:	|  |  |  |  |   add.l d0,d0
   17678:	|  |  |  |  |   adda.l d0,a0
   1767a:	|  |  |  |  |   move.l (a0),d0
   1767c:	|  |  |  |  |   lsl.l #3,d0
   1767e:	|  |  |  |  |   movea.l d1,a0
   17680:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   17682:	|  |  |  |  |   move.l 4(a0),d1
   17686:	|  |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   1768c:	|  |  |  |  |   move.l 4(a0),d3
   17690:	|  |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   17696:	|  |  |  |  |   movea.l 12(a0),a0
   1769a:	|  |  |  |  |   move.l 16(sp),d0
   1769e:	|  |  |  |  |   lsl.l #3,d0
   176a0:	|  |  |  |  |   adda.l d0,a0
   176a2:	|  |  |  |  |   movea.l 4(a0),a0
   176a6:	|  |  |  |  |   move.l 12(sp),d0
   176aa:	|  |  |  |  |   addi.l #1073741823,d0
   176b0:	|  |  |  |  |   add.l d0,d0
   176b2:	|  |  |  |  |   add.l d0,d0
   176b4:	|  |  |  |  |   adda.l d0,a0
   176b6:	|  |  |  |  |   move.l (a0),d0
   176b8:	|  |  |  |  |   lsl.l #3,d0
   176ba:	|  |  |  |  |   movea.l d3,a0
   176bc:	|  |  |  |  |   adda.l d0,a0
   176be:	|  |  |  |  |   move.l (a0),d0
   176c0:	|  |  |  |  |   move.l d2,-(sp)
   176c2:	|  |  |  |  |   move.l a1,-(sp)
   176c4:	|  |  |  |  |   move.l d1,-(sp)
   176c6:	|  |  |  |  |   move.l d0,-(sp)
   176c8:	|  |  |  |  |   jsr 4c9c <drawLine>
   176ce:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   176d2:	|  |  |  |  |   addq.l #1,12(sp)
   176d6:	|  |  |  |  '-> move.l 12(sp),d0
   176da:	|  |  |  |      cmp.l 8(sp),d0
   176de:	|  |  |  '----- blt.w 175e0 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   176e2:	|  |  |         movea.l 1e9dc <currentFloor>,a0
   176e8:	|  |  |         move.l 4(a0),d1
   176ec:	|  |  |         movea.l 1e9dc <currentFloor>,a0
   176f2:	|  |  |         movea.l 12(a0),a0
   176f6:	|  |  |         move.l 16(sp),d0
   176fa:	|  |  |         lsl.l #3,d0
   176fc:	|  |  |         adda.l d0,a0
   176fe:	|  |  |         movea.l 4(a0),a0
   17702:	|  |  |         move.l 8(sp),d0
   17706:	|  |  |         addi.l #1073741823,d0
   1770c:	|  |  |         add.l d0,d0
   1770e:	|  |  |         add.l d0,d0
   17710:	|  |  |         adda.l d0,a0
   17712:	|  |  |         move.l (a0),d0
   17714:	|  |  |         lsl.l #3,d0
   17716:	|  |  |         movea.l d1,a0
   17718:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1771a:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   1771e:	|  |  |         movea.l 1e9dc <currentFloor>,a0
   17724:	|  |  |         move.l 4(a0),d1
   17728:	|  |  |         movea.l 1e9dc <currentFloor>,a0
   1772e:	|  |  |         movea.l 12(a0),a0
   17732:	|  |  |         move.l 16(sp),d0
   17736:	|  |  |         lsl.l #3,d0
   17738:	|  |  |         adda.l d0,a0
   1773a:	|  |  |         movea.l 4(a0),a0
   1773e:	|  |  |         move.l 8(sp),d0
   17742:	|  |  |         addi.l #1073741823,d0
   17748:	|  |  |         add.l d0,d0
   1774a:	|  |  |         add.l d0,d0
   1774c:	|  |  |         adda.l d0,a0
   1774e:	|  |  |         move.l (a0),d0
   17750:	|  |  |         lsl.l #3,d0
   17752:	|  |  |         movea.l d1,a0
   17754:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   17756:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   17758:	|  |  |         movea.l 1e9dc <currentFloor>,a0
   1775e:	|  |  |         move.l 4(a0),d1
   17762:	|  |  |         movea.l 1e9dc <currentFloor>,a0
   17768:	|  |  |         movea.l 12(a0),a0
   1776c:	|  |  |         move.l 16(sp),d0
   17770:	|  |  |         lsl.l #3,d0
   17772:	|  |  |         adda.l d0,a0
   17774:	|  |  |         movea.l 4(a0),a0
   17778:	|  |  |         move.l (a0),d0
   1777a:	|  |  |         lsl.l #3,d0
   1777c:	|  |  |         movea.l d1,a0
   1777e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   17780:	|  |  |         move.l 4(a0),d1
   17784:	|  |  |         movea.l 1e9dc <currentFloor>,a0
   1778a:	|  |  |         move.l 4(a0),d3
   1778e:	|  |  |         movea.l 1e9dc <currentFloor>,a0
   17794:	|  |  |         movea.l 12(a0),a0
   17798:	|  |  |         move.l 16(sp),d0
   1779c:	|  |  |         lsl.l #3,d0
   1779e:	|  |  |         adda.l d0,a0
   177a0:	|  |  |         movea.l 4(a0),a0
   177a4:	|  |  |         move.l (a0),d0
   177a6:	|  |  |         lsl.l #3,d0
   177a8:	|  |  |         movea.l d3,a0
   177aa:	|  |  |         adda.l d0,a0
   177ac:	|  |  |         move.l (a0),d0
   177ae:	|  |  |         move.l d2,-(sp)
   177b0:	|  |  |         move.l a1,-(sp)
   177b2:	|  |  |         move.l d1,-(sp)
   177b4:	|  |  |         move.l d0,-(sp)
   177b6:	|  |  |         jsr 4c9c <drawLine>
   177bc:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   177c0:	|  |  '-------> addq.l #1,16(sp)
   177c4:	|  '----------> movea.l 1e9dc <currentFloor>,a0
   177ca:	|               move.l 8(a0),d0
   177ce:	|               cmp.l 16(sp),d0
   177d2:	'-------------- bgt.w 175b4 <drawFloor+0x10>
        }
    }
}
   177d6:	                nop
   177d8:	                nop
   177da:	                move.l (sp)+,d2
   177dc:	                move.l (sp)+,d3
   177de:	                lea 12(sp),sp
   177e2:	                rts

000177e4 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   177e4:	                      lea -12(sp),sp
    int sharedVertices = 0;
   177e8:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   177ec:	                      clr.l 4(sp)
   177f0:	   ,----------------- bra.w 17882 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   177f4:	,--|----------------> clr.l (sp)
   177f6:	|  |     ,----------- bra.s 17872 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   177f8:	|  |  ,--|----------> movea.l 16(sp),a0
   177fc:	|  |  |  |            move.l 4(a0),d1
   17800:	|  |  |  |            move.l 4(sp),d0
   17804:	|  |  |  |            add.l d0,d0
   17806:	|  |  |  |            add.l d0,d0
   17808:	|  |  |  |            movea.l d1,a0
   1780a:	|  |  |  |            adda.l d0,a0
   1780c:	|  |  |  |            move.l (a0),d1
   1780e:	|  |  |  |            movea.l 20(sp),a0
   17812:	|  |  |  |            movea.l 4(a0),a0
   17816:	|  |  |  |            move.l (sp),d0
   17818:	|  |  |  |            add.l d0,d0
   1781a:	|  |  |  |            add.l d0,d0
   1781c:	|  |  |  |            adda.l d0,a0
   1781e:	|  |  |  |            move.l (a0),d0
   17820:	|  |  |  |            cmp.l d1,d0
   17822:	|  |  |  |  ,-------- bne.s 17870 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   17824:	|  |  |  |  |         move.l 8(sp),d0
   17828:	|  |  |  |  |         move.l d0,d1
   1782a:	|  |  |  |  |         addq.l #1,d1
   1782c:	|  |  |  |  |         move.l d1,8(sp)
   17830:	|  |  |  |  |         tst.l d0
   17832:	|  |  |  |  |     ,-- beq.s 17854 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   17834:	|  |  |  |  |     |   movea.l 16(sp),a0
   17838:	|  |  |  |  |     |   move.l 4(a0),d1
   1783c:	|  |  |  |  |     |   move.l 4(sp),d0
   17840:	|  |  |  |  |     |   add.l d0,d0
   17842:	|  |  |  |  |     |   add.l d0,d0
   17844:	|  |  |  |  |     |   movea.l d1,a0
   17846:	|  |  |  |  |     |   adda.l d0,a0
   17848:	|  |  |  |  |     |   move.l (a0),d0
   1784a:	|  |  |  |  |     |   movea.l 28(sp),a0
   1784e:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   17850:	|  |  |  |  |     |   moveq #1,d0
   17852:	|  |  |  |  |  ,--|-- bra.s 17892 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   17854:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   17858:	|  |  |  |  |  |      move.l 4(a0),d1
   1785c:	|  |  |  |  |  |      move.l 4(sp),d0
   17860:	|  |  |  |  |  |      add.l d0,d0
   17862:	|  |  |  |  |  |      add.l d0,d0
   17864:	|  |  |  |  |  |      movea.l d1,a0
   17866:	|  |  |  |  |  |      adda.l d0,a0
   17868:	|  |  |  |  |  |      move.l (a0),d0
   1786a:	|  |  |  |  |  |      movea.l 24(sp),a0
   1786e:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   17870:	|  |  |  |  '--|----> addq.l #1,(sp)
   17872:	|  |  |  '-----|----> movea.l 20(sp),a0
   17876:	|  |  |        |      move.l (a0),d0
   17878:	|  |  |        |      cmp.l (sp),d0
   1787a:	|  |  '--------|----- bgt.w 177f8 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   1787e:	|  |           |      addq.l #1,4(sp)
   17882:	|  '-----------|----> movea.l 16(sp),a0
   17886:	|              |      move.l (a0),d0
   17888:	|              |      cmp.l 4(sp),d0
   1788c:	'--------------|----- bgt.w 177f4 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   17890:	               |      clr.w d0
}
   17892:	               '----> lea 12(sp),sp
   17896:	                      rts

00017898 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   17898:	movea.l 1e9dc <currentFloor>,a0
   1789e:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   178a2:	movea.l 1e9dc <currentFloor>,a0
   178a8:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   178ac:	movea.l 1e9dc <currentFloor>,a0
   178b2:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   178b6:	movea.l 1e9dc <currentFloor>,a0
   178bc:	clr.l 16(a0)
}
   178c0:	nop
   178c2:	rts

000178c4 <inFloor>:

int inFloor (int x, int y) {
   178c4:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   178c6:	          pea 1bfd3 <talk.c.490538ff+0x92b>
   178cc:	          jsr 1857e <KPrintF>
   178d2:	          addq.l #4,sp
	int i, r = -1;
   178d4:	          moveq #-1,d0
   178d6:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   178d8:	          clr.l 4(sp)
   178dc:	   ,----- bra.s 17910 <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   178de:	,--|----> movea.l 1e9dc <currentFloor>,a0
   178e4:	|  |      move.l 12(a0),d1
   178e8:	|  |      move.l 4(sp),d0
   178ec:	|  |      lsl.l #3,d0
   178ee:	|  |      add.l d1,d0
   178f0:	|  |      move.l 16(sp),-(sp)
   178f4:	|  |      move.l 16(sp),-(sp)
   178f8:	|  |      move.l d0,-(sp)
   178fa:	|  |      jsr 17aea <pointInFloorPolygon>
   17900:	|  |      lea 12(sp),sp
   17904:	|  |      tst.w d0
   17906:	|  |  ,-- beq.s 1790c <inFloor+0x48>
			r = i;
   17908:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1790c:	|  |  '-> addq.l #1,4(sp)
   17910:	|  '----> movea.l 1e9dc <currentFloor>,a0
   17916:	|         move.l 8(a0),d0
   1791a:	|         cmp.l 4(sp),d0
   1791e:	'-------- bgt.s 178de <inFloor+0x1a>

	KPrintF("infloor finished\n");
   17920:	          pea 1bfe4 <talk.c.490538ff+0x93c>
   17926:	          jsr 1857e <KPrintF>
   1792c:	          addq.l #4,sp
	return r;
   1792e:	          move.l (sp),d0
}
   17930:	          addq.l #8,sp
   17932:	          rts

00017934 <initFloor>:

BOOL initFloor () {
   17934:	       lea -12(sp),sp
   17938:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   1793a:	       moveq #20,d0
   1793c:	       move.l d0,12(sp)
   17940:	       clr.l 8(sp)
   17944:	       move.l 1e8c0 <SysBase>,d0
   1794a:	       movea.l d0,a6
   1794c:	       move.l 12(sp),d0
   17950:	       move.l 8(sp),d1
   17954:	       jsr -684(a6)
   17958:	       move.l d0,4(sp)
   1795c:	       move.l 4(sp),d0
   17960:	       move.l d0,1e9dc <currentFloor>

    if(currentFloor == 0) {
   17966:	       move.l 1e9dc <currentFloor>,d0
   1796c:	,----- bne.s 17980 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   1796e:	|      pea 1bff6 <talk.c.490538ff+0x94e>
   17974:	|      jsr 1857e <KPrintF>
   1797a:	|      addq.l #4,sp
        return FALSE;
   1797c:	|      clr.w d0
   1797e:	|  ,-- bra.s 17988 <initFloor+0x54>
    }

	noFloor ();
   17980:	'--|-> jsr 17898 <noFloor>
	return TRUE;
   17986:	   |   moveq #1,d0
}
   17988:	   '-> movea.l (sp)+,a6
   1798a:	       lea 12(sp),sp
   1798e:	       rts

00017990 <killFloor>:

void killFloor () {
   17990:	       lea -24(sp),sp
   17994:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   17996:	       clr.l 24(sp)
   1799a:	   ,-- bra.s 179f4 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   1799c:	,--|-> movea.l 1e9dc <currentFloor>,a0
   179a2:	|  |   move.l 12(a0),d1
   179a6:	|  |   move.l 24(sp),d0
   179aa:	|  |   lsl.l #3,d0
   179ac:	|  |   movea.l d1,a0
   179ae:	|  |   adda.l d0,a0
   179b0:	|  |   move.l 4(a0),8(sp)
   179b6:	|  |   move.l 1e8c0 <SysBase>,d0
   179bc:	|  |   movea.l d0,a6
   179be:	|  |   movea.l 8(sp),a1
   179c2:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   179c6:	|  |   movea.l 1e9dc <currentFloor>,a0
   179cc:	|  |   move.l 16(a0),d1
   179d0:	|  |   move.l 24(sp),d0
   179d4:	|  |   add.l d0,d0
   179d6:	|  |   add.l d0,d0
   179d8:	|  |   movea.l d1,a0
   179da:	|  |   adda.l d0,a0
   179dc:	|  |   move.l (a0),4(sp)
   179e0:	|  |   move.l 1e8c0 <SysBase>,d0
   179e6:	|  |   movea.l d0,a6
   179e8:	|  |   movea.l 4(sp),a1
   179ec:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   179f0:	|  |   addq.l #1,24(sp)
   179f4:	|  '-> movea.l 1e9dc <currentFloor>,a0
   179fa:	|      move.l 8(a0),d0
   179fe:	|      cmp.l 24(sp),d0
   17a02:	'----- bgt.s 1799c <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   17a04:	       movea.l 1e9dc <currentFloor>,a0
   17a0a:	       move.l 12(a0),20(sp)
   17a10:	       move.l 1e8c0 <SysBase>,d0
   17a16:	       movea.l d0,a6
   17a18:	       movea.l 20(sp),a1
   17a1c:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   17a20:	       movea.l 1e9dc <currentFloor>,a0
   17a26:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   17a2a:	       movea.l 1e9dc <currentFloor>,a0
   17a30:	       move.l 4(a0),16(sp)
   17a36:	       move.l 1e8c0 <SysBase>,d0
   17a3c:	       movea.l d0,a6
   17a3e:	       movea.l 16(sp),a1
   17a42:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   17a46:	       movea.l 1e9dc <currentFloor>,a0
   17a4c:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   17a50:	       movea.l 1e9dc <currentFloor>,a0
   17a56:	       move.l 16(a0),12(sp)
   17a5c:	       move.l 1e8c0 <SysBase>,d0
   17a62:	       movea.l d0,a6
   17a64:	       movea.l 12(sp),a1
   17a68:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   17a6c:	       movea.l 1e9dc <currentFloor>,a0
   17a72:	       clr.l 16(a0)
}
   17a76:	       nop
   17a78:	       movea.l (sp)+,a6
   17a7a:	       lea 24(sp),sp
   17a7e:	       rts

00017a80 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   17a80:	                   lea -12(sp),sp
	int sharedVertices = 0;
   17a84:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   17a88:	                   clr.l 4(sp)
   17a8c:	   ,-------------- bra.s 17ad8 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   17a8e:	,--|-------------> clr.l (sp)
   17a90:	|  |     ,-------- bra.s 17acc <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   17a92:	|  |  ,--|-------> move.l 20(sp),d1
   17a96:	|  |  |  |         move.l 4(sp),d0
   17a9a:	|  |  |  |         add.l d0,d0
   17a9c:	|  |  |  |         add.l d0,d0
   17a9e:	|  |  |  |         movea.l d1,a0
   17aa0:	|  |  |  |         adda.l d0,a0
   17aa2:	|  |  |  |         move.l (a0),d1
   17aa4:	|  |  |  |         movea.l 28(sp),a0
   17aa8:	|  |  |  |         move.l (sp),d0
   17aaa:	|  |  |  |         add.l d0,d0
   17aac:	|  |  |  |         add.l d0,d0
   17aae:	|  |  |  |         adda.l d0,a0
   17ab0:	|  |  |  |         move.l (a0),d0
   17ab2:	|  |  |  |         cmp.l d1,d0
   17ab4:	|  |  |  |     ,-- bne.s 17aca <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   17ab6:	|  |  |  |     |   move.l 8(sp),d0
   17aba:	|  |  |  |     |   move.l d0,d1
   17abc:	|  |  |  |     |   addq.l #1,d1
   17abe:	|  |  |  |     |   move.l d1,8(sp)
   17ac2:	|  |  |  |     |   tst.l d0
   17ac4:	|  |  |  |     +-- beq.s 17aca <polysShareSide+0x4a>
   17ac6:	|  |  |  |     |   moveq #1,d0
   17ac8:	|  |  |  |  ,--|-- bra.s 17ae4 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   17aca:	|  |  |  |  |  '-> addq.l #1,(sp)
   17acc:	|  |  |  '--|----> move.l 24(sp),d0
   17ad0:	|  |  |     |      cmp.l (sp),d0
   17ad2:	|  |  '-----|----- bgt.s 17a92 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   17ad4:	|  |        |      addq.l #1,4(sp)
   17ad8:	|  '--------|----> move.l 16(sp),d0
   17adc:	|           |      cmp.l 4(sp),d0
   17ae0:	'-----------|----- bgt.s 17a8e <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   17ae2:	            |      clr.w d0
}
   17ae4:	            '----> lea 12(sp),sp
   17ae8:	                   rts

00017aea <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   17aea:	             lea -28(sp),sp
   17aee:	             move.l d3,-(sp)
   17af0:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   17af2:	             clr.l 32(sp)
   17af6:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   17afa:	             movea.l 40(sp),a0
   17afe:	             move.l (a0),d0
   17b00:	             move.l d0,d1
   17b02:	             subq.l #1,d1
   17b04:	             move.l d1,28(sp)
   17b08:	   ,-------- bra.w 17d02 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   17b0c:	,--|-------> movea.l 1e9dc <currentFloor>,a0
   17b12:	|  |         move.l 4(a0),d1
   17b16:	|  |         movea.l 40(sp),a0
   17b1a:	|  |         movea.l 4(a0),a0
   17b1e:	|  |         move.l 32(sp),d0
   17b22:	|  |         add.l d0,d0
   17b24:	|  |         add.l d0,d0
   17b26:	|  |         adda.l d0,a0
   17b28:	|  |         move.l (a0),d0
   17b2a:	|  |         lsl.l #3,d0
   17b2c:	|  |         movea.l d1,a0
   17b2e:	|  |         adda.l d0,a0
   17b30:	|  |         move.l (a0),d0
   17b32:	|  |         move.l d0,-(sp)
   17b34:	|  |         jsr 189b0 <__floatsisf>
   17b3a:	|  |         addq.l #4,sp
   17b3c:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   17b40:	|  |         movea.l 1e9dc <currentFloor>,a0
   17b46:	|  |         move.l 4(a0),d1
   17b4a:	|  |         movea.l 40(sp),a0
   17b4e:	|  |         movea.l 4(a0),a0
   17b52:	|  |         move.l 32(sp),d0
   17b56:	|  |         add.l d0,d0
   17b58:	|  |         add.l d0,d0
   17b5a:	|  |         adda.l d0,a0
   17b5c:	|  |         move.l (a0),d0
   17b5e:	|  |         lsl.l #3,d0
   17b60:	|  |         movea.l d1,a0
   17b62:	|  |         adda.l d0,a0
   17b64:	|  |         move.l 4(a0),d0
   17b68:	|  |         move.l d0,-(sp)
   17b6a:	|  |         jsr 189b0 <__floatsisf>
   17b70:	|  |         addq.l #4,sp
   17b72:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   17b76:	|  |         movea.l 1e9dc <currentFloor>,a0
   17b7c:	|  |         move.l 4(a0),d1
   17b80:	|  |         movea.l 40(sp),a0
   17b84:	|  |         movea.l 4(a0),a0
   17b88:	|  |         move.l 28(sp),d0
   17b8c:	|  |         add.l d0,d0
   17b8e:	|  |         add.l d0,d0
   17b90:	|  |         adda.l d0,a0
   17b92:	|  |         move.l (a0),d0
   17b94:	|  |         lsl.l #3,d0
   17b96:	|  |         movea.l d1,a0
   17b98:	|  |         adda.l d0,a0
   17b9a:	|  |         move.l (a0),d0
   17b9c:	|  |         move.l d0,-(sp)
   17b9e:	|  |         jsr 189b0 <__floatsisf>
   17ba4:	|  |         addq.l #4,sp
   17ba6:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   17baa:	|  |         movea.l 1e9dc <currentFloor>,a0
   17bb0:	|  |         move.l 4(a0),d1
   17bb4:	|  |         movea.l 40(sp),a0
   17bb8:	|  |         movea.l 4(a0),a0
   17bbc:	|  |         move.l 28(sp),d0
   17bc0:	|  |         add.l d0,d0
   17bc2:	|  |         add.l d0,d0
   17bc4:	|  |         adda.l d0,a0
   17bc6:	|  |         move.l (a0),d0
   17bc8:	|  |         lsl.l #3,d0
   17bca:	|  |         movea.l d1,a0
   17bcc:	|  |         adda.l d0,a0
   17bce:	|  |         move.l 4(a0),d0
   17bd2:	|  |         move.l d0,-(sp)
   17bd4:	|  |         jsr 189b0 <__floatsisf>
   17bda:	|  |         addq.l #4,sp
   17bdc:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   17be0:	|  |         move.l 48(sp),-(sp)
   17be4:	|  |         jsr 189b0 <__floatsisf>
   17bea:	|  |         addq.l #4,sp
   17bec:	|  |         move.l d0,-(sp)
   17bee:	|  |         move.l 20(sp),-(sp)
   17bf2:	|  |         jsr 18b52 <__lesf2>
   17bf8:	|  |         addq.l #8,sp
   17bfa:	|  |         tst.l d0
   17bfc:	|  |     ,-- bgt.s 17c1c <pointInFloorPolygon+0x132>
   17bfe:	|  |     |   move.l 48(sp),-(sp)
   17c02:	|  |     |   jsr 189b0 <__floatsisf>
   17c08:	|  |     |   addq.l #4,sp
   17c0a:	|  |     |   move.l d0,-(sp)
   17c0c:	|  |     |   move.l 12(sp),-(sp)
   17c10:	|  |     |   jsr 18b1c <__gtsf2>
   17c16:	|  |     |   addq.l #8,sp
   17c18:	|  |     |   tst.l d0
   17c1a:	|  |  ,--|-- bgt.s 17c5c <pointInFloorPolygon+0x172>
   17c1c:	|  |  |  '-> move.l 48(sp),-(sp)
   17c20:	|  |  |      jsr 189b0 <__floatsisf>
   17c26:	|  |  |      addq.l #4,sp
   17c28:	|  |  |      move.l d0,-(sp)
   17c2a:	|  |  |      move.l 12(sp),-(sp)
   17c2e:	|  |  |      jsr 18b52 <__lesf2>
   17c34:	|  |  |      addq.l #8,sp
   17c36:	|  |  |      tst.l d0
   17c38:	|  |  |  ,-- bgt.w 17cf2 <pointInFloorPolygon+0x208>
   17c3c:	|  |  |  |   move.l 48(sp),-(sp)
   17c40:	|  |  |  |   jsr 189b0 <__floatsisf>
   17c46:	|  |  |  |   addq.l #4,sp
   17c48:	|  |  |  |   move.l d0,-(sp)
   17c4a:	|  |  |  |   move.l 20(sp),-(sp)
   17c4e:	|  |  |  |   jsr 18b1c <__gtsf2>
   17c54:	|  |  |  |   addq.l #8,sp
   17c56:	|  |  |  |   tst.l d0
   17c58:	|  |  |  +-- ble.w 17cf2 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   17c5c:	|  |  '--|-> move.l 44(sp),-(sp)
   17c60:	|  |     |   jsr 189b0 <__floatsisf>
   17c66:	|  |     |   addq.l #4,sp
   17c68:	|  |     |   move.l d0,d3
   17c6a:	|  |     |   move.l 20(sp),-(sp)
   17c6e:	|  |     |   move.l 16(sp),-(sp)
   17c72:	|  |     |   jsr 18ca4 <__subsf3>
   17c78:	|  |     |   addq.l #8,sp
   17c7a:	|  |     |   move.l d0,d2
   17c7c:	|  |     |   move.l 48(sp),-(sp)
   17c80:	|  |     |   jsr 189b0 <__floatsisf>
   17c86:	|  |     |   addq.l #4,sp
   17c88:	|  |     |   move.l 16(sp),-(sp)
   17c8c:	|  |     |   move.l d0,-(sp)
   17c8e:	|  |     |   jsr 18ca4 <__subsf3>
   17c94:	|  |     |   addq.l #8,sp
   17c96:	|  |     |   move.l d0,-(sp)
   17c98:	|  |     |   move.l d2,-(sp)
   17c9a:	|  |     |   jsr 18a62 <__mulsf3>
   17ca0:	|  |     |   addq.l #8,sp
   17ca2:	|  |     |   move.l d0,d2
   17ca4:	|  |     |   move.l 16(sp),-(sp)
   17ca8:	|  |     |   move.l 12(sp),-(sp)
   17cac:	|  |     |   jsr 18ca4 <__subsf3>
   17cb2:	|  |     |   addq.l #8,sp
   17cb4:	|  |     |   move.l d0,-(sp)
   17cb6:	|  |     |   move.l d2,-(sp)
   17cb8:	|  |     |   jsr 18866 <__divsf3>
   17cbe:	|  |     |   addq.l #8,sp
   17cc0:	|  |     |   move.l 20(sp),-(sp)
   17cc4:	|  |     |   move.l d0,-(sp)
   17cc6:	|  |     |   jsr 1876c <__addsf3>
   17ccc:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   17cce:	|  |     |   move.l d0,-(sp)
   17cd0:	|  |     |   move.l d3,-(sp)
   17cd2:	|  |     |   jsr 18bd6 <__ltsf2>
   17cd8:	|  |     |   addq.l #8,sp
   17cda:	|  |     |   tst.l d0
   17cdc:	|  |     +-- bge.s 17cf2 <pointInFloorPolygon+0x208>

			c = !c;
   17cde:	|  |     |   tst.l 24(sp)
   17ce2:	|  |     |   seq d0
   17ce4:	|  |     |   neg.b d0
   17ce6:	|  |     |   move.b d0,d0
   17ce8:	|  |     |   andi.l #255,d0
   17cee:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   17cf2:	|  |     '-> move.l 32(sp),d0
   17cf6:	|  |         move.l d0,d1
   17cf8:	|  |         addq.l #1,d1
   17cfa:	|  |         move.l d1,32(sp)
   17cfe:	|  |         move.l d0,28(sp)
   17d02:	|  '-------> movea.l 40(sp),a0
   17d06:	|            move.l (a0),d0
   17d08:	|            cmp.l 32(sp),d0
   17d0c:	'----------- bgt.w 17b0c <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   17d10:	             tst.l 24(sp)
   17d14:	             sne d0
   17d16:	             neg.b d0
   17d18:	             move.b d0,d0
   17d1a:	             andi.w #255,d0
}
   17d1e:	             move.l (sp)+,d2
   17d20:	             move.l (sp)+,d3
   17d22:	             lea 28(sp),sp
   17d26:	             rts

00017d28 <setFloor>:

BOOL setFloor (int fileNum) {
   17d28:	                               lea -132(sp),sp
   17d2c:	                               move.l a6,-(sp)
   17d2e:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   17d30:	                               jsr 17990 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   17d36:	                               move.l 144(sp),-(sp)
   17d3a:	                               jsr 7f72 <openFileFromNum>
   17d40:	                               addq.l #4,sp
   17d42:	                               tst.l d0
   17d44:	                           ,-- bne.s 17d4c <setFloor+0x24>
   17d46:	                           |   clr.w d0
   17d48:	,--------------------------|-- bra.w 18498 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   17d4c:	|                          '-> movea.l 1e9dc <currentFloor>,a0
   17d52:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   17d56:	|                              move.l 1e8a6 <bigDataFile>,118(sp)
   17d5e:	|                              move.l 1e8c8 <DOSBase>,d0
   17d64:	|                              movea.l d0,a6
   17d66:	|                              move.l 118(sp),d1
   17d6a:	|                              jsr -306(a6)
   17d6e:	|                              move.l d0,114(sp)
   17d72:	|                              move.l 114(sp),d0
   17d76:	|                              movea.l 1e9dc <currentFloor>,a0
   17d7c:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   17d80:	|                              movea.l 1e9dc <currentFloor>,a0
   17d86:	|                              move.l 8(a0),d0
   17d8a:	|                              lsl.l #3,d0
   17d8c:	|                              move.l d0,110(sp)
   17d90:	|                              clr.l 106(sp)
   17d94:	|                              move.l 1e8c0 <SysBase>,d0
   17d9a:	|                              movea.l d0,a6
   17d9c:	|                              move.l 110(sp),d0
   17da0:	|                              move.l 106(sp),d1
   17da4:	|                              jsr -684(a6)
   17da8:	|                              move.l d0,102(sp)
   17dac:	|                              move.l 102(sp),d0
   17db0:	|                              movea.l 1e9dc <currentFloor>,a0
   17db6:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   17dba:	|                              movea.l 1e9dc <currentFloor>,a0
   17dc0:	|                              move.l 12(a0),d0
   17dc4:	|                          ,-- bne.s 17dda <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   17dc6:	|                          |   pea 1c01a <talk.c.490538ff+0x972>
   17dcc:	|                          |   jsr 1857e <KPrintF>
   17dd2:	|                          |   addq.l #4,sp
		return FALSE;
   17dd4:	|                          |   clr.w d0
   17dd6:	+--------------------------|-- bra.w 18498 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17dda:	|                          '-> clr.l 136(sp)
   17dde:	|                    ,-------- bra.w 17ef6 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   17de2:	|                 ,--|-------> move.l 1e8a6 <bigDataFile>,26(sp)
   17dea:	|                 |  |         move.l 1e8c8 <DOSBase>,d0
   17df0:	|                 |  |         movea.l d0,a6
   17df2:	|                 |  |         move.l 26(sp),d1
   17df6:	|                 |  |         jsr -306(a6)
   17dfa:	|                 |  |         move.l d0,22(sp)
   17dfe:	|                 |  |         move.l 22(sp),d1
   17e02:	|                 |  |         movea.l 1e9dc <currentFloor>,a0
   17e08:	|                 |  |         movea.l 12(a0),a0
   17e0c:	|                 |  |         move.l 136(sp),d0
   17e10:	|                 |  |         lsl.l #3,d0
   17e12:	|                 |  |         adda.l d0,a0
   17e14:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   17e16:	|                 |  |         movea.l 1e9dc <currentFloor>,a0
   17e1c:	|                 |  |         move.l 12(a0),d1
   17e20:	|                 |  |         move.l 136(sp),d0
   17e24:	|                 |  |         lsl.l #3,d0
   17e26:	|                 |  |         movea.l d1,a0
   17e28:	|                 |  |         adda.l d0,a0
   17e2a:	|                 |  |         move.l (a0),d0
   17e2c:	|                 |  |         add.l d0,d0
   17e2e:	|                 |  |         add.l d0,d0
   17e30:	|                 |  |         move.l d0,18(sp)
   17e34:	|                 |  |         clr.l 14(sp)
   17e38:	|                 |  |         move.l 1e8c0 <SysBase>,d0
   17e3e:	|                 |  |         movea.l d0,a6
   17e40:	|                 |  |         move.l 18(sp),d0
   17e44:	|                 |  |         move.l 14(sp),d1
   17e48:	|                 |  |         jsr -684(a6)
   17e4c:	|                 |  |         move.l d0,10(sp)
   17e50:	|                 |  |         move.l 10(sp),d1
   17e54:	|                 |  |         movea.l 1e9dc <currentFloor>,a0
   17e5a:	|                 |  |         movea.l 12(a0),a0
   17e5e:	|                 |  |         move.l 136(sp),d0
   17e62:	|                 |  |         lsl.l #3,d0
   17e64:	|                 |  |         adda.l d0,a0
   17e66:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   17e6a:	|                 |  |         movea.l 1e9dc <currentFloor>,a0
   17e70:	|                 |  |         move.l 12(a0),d1
   17e74:	|                 |  |         move.l 136(sp),d0
   17e78:	|                 |  |         lsl.l #3,d0
   17e7a:	|                 |  |         movea.l d1,a0
   17e7c:	|                 |  |         adda.l d0,a0
   17e7e:	|                 |  |         move.l 4(a0),d0
   17e82:	|                 |  |     ,-- bne.s 17e98 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   17e84:	|                 |  |     |   pea 1c01a <talk.c.490538ff+0x972>
   17e8a:	|                 |  |     |   jsr 1857e <KPrintF>
   17e90:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   17e92:	|                 |  |     |   clr.w d0
   17e94:	+-----------------|--|-----|-- bra.w 18498 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   17e98:	|                 |  |     '-> clr.l 132(sp)
   17e9c:	|                 |  |     ,-- bra.s 17ed6 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   17e9e:	|                 |  |  ,--|-> move.l 1e8a6 <bigDataFile>,d1
   17ea4:	|                 |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   17eaa:	|                 |  |  |  |   movea.l 12(a0),a0
   17eae:	|                 |  |  |  |   move.l 136(sp),d0
   17eb2:	|                 |  |  |  |   lsl.l #3,d0
   17eb4:	|                 |  |  |  |   adda.l d0,a0
   17eb6:	|                 |  |  |  |   movea.l 4(a0),a0
   17eba:	|                 |  |  |  |   move.l 132(sp),d0
   17ebe:	|                 |  |  |  |   add.l d0,d0
   17ec0:	|                 |  |  |  |   add.l d0,d0
   17ec2:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   17ec6:	|                 |  |  |  |   move.l d1,-(sp)
   17ec8:	|                 |  |  |  |   jsr 6bc <get2bytes>
   17ece:	|                 |  |  |  |   addq.l #4,sp
   17ed0:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   17ed2:	|                 |  |  |  |   addq.l #1,132(sp)
   17ed6:	|                 |  |  |  '-> movea.l 1e9dc <currentFloor>,a0
   17edc:	|                 |  |  |      move.l 12(a0),d1
   17ee0:	|                 |  |  |      move.l 136(sp),d0
   17ee4:	|                 |  |  |      lsl.l #3,d0
   17ee6:	|                 |  |  |      movea.l d1,a0
   17ee8:	|                 |  |  |      adda.l d0,a0
   17eea:	|                 |  |  |      move.l (a0),d0
   17eec:	|                 |  |  |      cmp.l 132(sp),d0
   17ef0:	|                 |  |  '----- bgt.s 17e9e <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17ef2:	|                 |  |         addq.l #1,136(sp)
   17ef6:	|                 |  '-------> movea.l 1e9dc <currentFloor>,a0
   17efc:	|                 |            move.l 8(a0),d0
   17f00:	|                 |            cmp.l 136(sp),d0
   17f04:	|                 '----------- bgt.w 17de2 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   17f08:	|                              move.l 1e8a6 <bigDataFile>,d0
   17f0e:	|                              move.l d0,-(sp)
   17f10:	|                              jsr 6bc <get2bytes>
   17f16:	|                              addq.l #4,sp
   17f18:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   17f1c:	|                              move.l 136(sp),d0
   17f20:	|                              lsl.l #3,d0
   17f22:	|                              move.l d0,98(sp)
   17f26:	|                              clr.l 94(sp)
   17f2a:	|                              move.l 1e8c0 <SysBase>,d0
   17f30:	|                              movea.l d0,a6
   17f32:	|                              move.l 98(sp),d0
   17f36:	|                              move.l 94(sp),d1
   17f3a:	|                              jsr -684(a6)
   17f3e:	|                              move.l d0,90(sp)
   17f42:	|                              move.l 90(sp),d0
   17f46:	|                              movea.l 1e9dc <currentFloor>,a0
   17f4c:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   17f50:	|                              movea.l 1e9dc <currentFloor>,a0
   17f56:	|                              move.l 4(a0),d0
   17f5a:	|                          ,-- bne.s 17f70 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   17f5c:	|                          |   pea 1c01a <talk.c.490538ff+0x972>
   17f62:	|                          |   jsr 1857e <KPrintF>
   17f68:	|                          |   addq.l #4,sp
		return FALSE;
   17f6a:	|                          |   clr.w d0
   17f6c:	+--------------------------|-- bra.w 18498 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   17f70:	|                          '-> clr.l 132(sp)
   17f74:	|                          ,-- bra.s 17fc8 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   17f76:	|                       ,--|-> move.l 1e8a6 <bigDataFile>,d1
   17f7c:	|                       |  |   movea.l 1e9dc <currentFloor>,a0
   17f82:	|                       |  |   movea.l 4(a0),a0
   17f86:	|                       |  |   move.l 132(sp),d0
   17f8a:	|                       |  |   lsl.l #3,d0
   17f8c:	|                       |  |   lea (0,a0,d0.l),a2
   17f90:	|                       |  |   move.l d1,-(sp)
   17f92:	|                       |  |   jsr 6bc <get2bytes>
   17f98:	|                       |  |   addq.l #4,sp
   17f9a:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   17f9c:	|                       |  |   move.l 1e8a6 <bigDataFile>,d1
   17fa2:	|                       |  |   movea.l 1e9dc <currentFloor>,a0
   17fa8:	|                       |  |   movea.l 4(a0),a0
   17fac:	|                       |  |   move.l 132(sp),d0
   17fb0:	|                       |  |   lsl.l #3,d0
   17fb2:	|                       |  |   lea (0,a0,d0.l),a2
   17fb6:	|                       |  |   move.l d1,-(sp)
   17fb8:	|                       |  |   jsr 6bc <get2bytes>
   17fbe:	|                       |  |   addq.l #4,sp
   17fc0:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   17fc4:	|                       |  |   addq.l #1,132(sp)
   17fc8:	|                       |  '-> move.l 132(sp),d0
   17fcc:	|                       |      cmp.l 136(sp),d0
   17fd0:	|                       '----- blt.s 17f76 <setFloor+0x24e>
	}

	finishAccess ();
   17fd2:	|                              jsr 7e6a <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   17fd8:	|                              movea.l 1e9dc <currentFloor>,a0
   17fde:	|                              move.l 8(a0),d0
   17fe2:	|                              add.l d0,d0
   17fe4:	|                              add.l d0,d0
   17fe6:	|                              move.l d0,86(sp)
   17fea:	|                              clr.l 82(sp)
   17fee:	|                              move.l 1e8c0 <SysBase>,d0
   17ff4:	|                              movea.l d0,a6
   17ff6:	|                              move.l 86(sp),d0
   17ffa:	|                              move.l 82(sp),d1
   17ffe:	|                              jsr -684(a6)
   18002:	|                              move.l d0,78(sp)
   18006:	|                              move.l 78(sp),d0
   1800a:	|                              movea.l 1e9dc <currentFloor>,a0
   18010:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   18014:	|                              movea.l 1e9dc <currentFloor>,a0
   1801a:	|                              move.l 8(a0),d0
   1801e:	|                              add.l d0,d0
   18020:	|                              add.l d0,d0
   18022:	|                              move.l d0,74(sp)
   18026:	|                              clr.l 70(sp)
   1802a:	|                              move.l 1e8c0 <SysBase>,d0
   18030:	|                              movea.l d0,a6
   18032:	|                              move.l 74(sp),d0
   18036:	|                              move.l 70(sp),d1
   1803a:	|                              jsr -684(a6)
   1803e:	|                              move.l d0,66(sp)
   18042:	|                              move.l 66(sp),d0
   18046:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   1804a:	|                              movea.l 1e9dc <currentFloor>,a0
   18050:	|                              move.l 16(a0),d0
   18054:	|                          ,-- bne.s 1806a <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   18056:	|                          |   pea 1c01a <talk.c.490538ff+0x972>
   1805c:	|                          |   jsr 1857e <KPrintF>
   18062:	|                          |   addq.l #4,sp
		return FALSE;
   18064:	|                          |   clr.w d0
   18066:	+--------------------------|-- bra.w 18498 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1806a:	|                          '-> clr.l 136(sp)
   1806e:	|                    ,-------- bra.w 18192 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   18072:	|                 ,--|-------> movea.l 1e9dc <currentFloor>,a0
   18078:	|                 |  |         move.l 8(a0),d0
   1807c:	|                 |  |         add.l d0,d0
   1807e:	|                 |  |         add.l d0,d0
   18080:	|                 |  |         move.l d0,50(sp)
   18084:	|                 |  |         clr.l 46(sp)
   18088:	|                 |  |         move.l 1e8c0 <SysBase>,d0
   1808e:	|                 |  |         movea.l d0,a6
   18090:	|                 |  |         move.l 50(sp),d0
   18094:	|                 |  |         move.l 46(sp),d1
   18098:	|                 |  |         jsr -684(a6)
   1809c:	|                 |  |         move.l d0,42(sp)
   180a0:	|                 |  |         move.l 42(sp),d0
   180a4:	|                 |  |         movea.l 1e9dc <currentFloor>,a0
   180aa:	|                 |  |         movea.l 16(a0),a0
   180ae:	|                 |  |         move.l 136(sp),d1
   180b2:	|                 |  |         add.l d1,d1
   180b4:	|                 |  |         add.l d1,d1
   180b6:	|                 |  |         adda.l d1,a0
   180b8:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   180ba:	|                 |  |         movea.l 1e9dc <currentFloor>,a0
   180c0:	|                 |  |         move.l 8(a0),d0
   180c4:	|                 |  |         add.l d0,d0
   180c6:	|                 |  |         add.l d0,d0
   180c8:	|                 |  |         move.l d0,38(sp)
   180cc:	|                 |  |         clr.l 34(sp)
   180d0:	|                 |  |         move.l 1e8c0 <SysBase>,d0
   180d6:	|                 |  |         movea.l d0,a6
   180d8:	|                 |  |         move.l 38(sp),d0
   180dc:	|                 |  |         move.l 34(sp),d1
   180e0:	|                 |  |         jsr -684(a6)
   180e4:	|                 |  |         move.l d0,30(sp)
   180e8:	|                 |  |         move.l 30(sp),d1
   180ec:	|                 |  |         move.l 136(sp),d0
   180f0:	|                 |  |         add.l d0,d0
   180f2:	|                 |  |         add.l d0,d0
   180f4:	|                 |  |         movea.l 62(sp),a0
   180f8:	|                 |  |         adda.l d0,a0
   180fa:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   180fc:	|                 |  |         movea.l 1e9dc <currentFloor>,a0
   18102:	|                 |  |         move.l 16(a0),d1
   18106:	|                 |  |         move.l 136(sp),d0
   1810a:	|                 |  |         add.l d0,d0
   1810c:	|                 |  |         add.l d0,d0
   1810e:	|                 |  |         movea.l d1,a0
   18110:	|                 |  |         adda.l d0,a0
   18112:	|                 |  |         move.l (a0),d0
   18114:	|                 |  |     ,-- bne.s 1812a <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   18116:	|                 |  |     |   pea 1c01a <talk.c.490538ff+0x972>
   1811c:	|                 |  |     |   jsr 1857e <KPrintF>
   18122:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   18124:	|                 |  |     |   clr.w d0
   18126:	+-----------------|--|-----|-- bra.w 18498 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1812a:	|                 |  |     '-> clr.l 132(sp)
   1812e:	|                 |  |     ,-- bra.s 1817e <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   18130:	|                 |  |  ,--|-> movea.l 1e9dc <currentFloor>,a0
   18136:	|                 |  |  |  |   move.l 16(a0),d1
   1813a:	|                 |  |  |  |   move.l 136(sp),d0
   1813e:	|                 |  |  |  |   add.l d0,d0
   18140:	|                 |  |  |  |   add.l d0,d0
   18142:	|                 |  |  |  |   movea.l d1,a0
   18144:	|                 |  |  |  |   adda.l d0,a0
   18146:	|                 |  |  |  |   move.l (a0),d1
   18148:	|                 |  |  |  |   move.l 132(sp),d0
   1814c:	|                 |  |  |  |   add.l d0,d0
   1814e:	|                 |  |  |  |   add.l d0,d0
   18150:	|                 |  |  |  |   movea.l d1,a0
   18152:	|                 |  |  |  |   adda.l d0,a0
   18154:	|                 |  |  |  |   moveq #-1,d1
   18156:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   18158:	|                 |  |  |  |   move.l 136(sp),d0
   1815c:	|                 |  |  |  |   add.l d0,d0
   1815e:	|                 |  |  |  |   add.l d0,d0
   18160:	|                 |  |  |  |   movea.l 62(sp),a0
   18164:	|                 |  |  |  |   adda.l d0,a0
   18166:	|                 |  |  |  |   move.l (a0),d1
   18168:	|                 |  |  |  |   move.l 132(sp),d0
   1816c:	|                 |  |  |  |   add.l d0,d0
   1816e:	|                 |  |  |  |   add.l d0,d0
   18170:	|                 |  |  |  |   movea.l d1,a0
   18172:	|                 |  |  |  |   adda.l d0,a0
   18174:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1817a:	|                 |  |  |  |   addq.l #1,132(sp)
   1817e:	|                 |  |  |  '-> movea.l 1e9dc <currentFloor>,a0
   18184:	|                 |  |  |      move.l 8(a0),d0
   18188:	|                 |  |  |      cmp.l 132(sp),d0
   1818c:	|                 |  |  '----- bgt.s 18130 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1818e:	|                 |  |         addq.l #1,136(sp)
   18192:	|                 |  '-------> movea.l 1e9dc <currentFloor>,a0
   18198:	|                 |            move.l 8(a0),d0
   1819c:	|                 |            cmp.l 136(sp),d0
   181a0:	|                 '----------- bgt.w 18072 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   181a4:	|                              clr.l 136(sp)
   181a8:	|              ,-------------- bra.w 182ae <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   181ac:	|           ,--|-------------> clr.l 132(sp)
   181b0:	|           |  |     ,-------- bra.w 18298 <setFloor+0x570>
			if (i != j) {
   181b4:	|           |  |  ,--|-------> move.l 136(sp),d0
   181b8:	|           |  |  |  |         cmp.l 132(sp),d0
   181bc:	|           |  |  |  |     ,-- beq.w 1824e <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   181c0:	|           |  |  |  |     |   movea.l 1e9dc <currentFloor>,a0
   181c6:	|           |  |  |  |     |   move.l 12(a0),d1
   181ca:	|           |  |  |  |     |   move.l 132(sp),d0
   181ce:	|           |  |  |  |     |   lsl.l #3,d0
   181d0:	|           |  |  |  |     |   movea.l d1,a1
   181d2:	|           |  |  |  |     |   adda.l d0,a1
   181d4:	|           |  |  |  |     |   movea.l 1e9dc <currentFloor>,a0
   181da:	|           |  |  |  |     |   move.l 12(a0),d1
   181de:	|           |  |  |  |     |   move.l 136(sp),d0
   181e2:	|           |  |  |  |     |   lsl.l #3,d0
   181e4:	|           |  |  |  |     |   movea.l d1,a0
   181e6:	|           |  |  |  |     |   adda.l d0,a0
   181e8:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   181ec:	|           |  |  |  |     |   move.l (a1),-(sp)
   181ee:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   181f2:	|           |  |  |  |     |   move.l (a0),-(sp)
   181f4:	|           |  |  |  |     |   jsr 17a80 <polysShareSide>
   181fa:	|           |  |  |  |     |   lea 16(sp),sp
   181fe:	|           |  |  |  |     |   tst.w d0
   18200:	|           |  |  |  |  ,--|-- beq.w 18294 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   18204:	|           |  |  |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   1820a:	|           |  |  |  |  |  |   move.l 16(a0),d1
   1820e:	|           |  |  |  |  |  |   move.l 136(sp),d0
   18212:	|           |  |  |  |  |  |   add.l d0,d0
   18214:	|           |  |  |  |  |  |   add.l d0,d0
   18216:	|           |  |  |  |  |  |   movea.l d1,a0
   18218:	|           |  |  |  |  |  |   adda.l d0,a0
   1821a:	|           |  |  |  |  |  |   move.l (a0),d1
   1821c:	|           |  |  |  |  |  |   move.l 132(sp),d0
   18220:	|           |  |  |  |  |  |   add.l d0,d0
   18222:	|           |  |  |  |  |  |   add.l d0,d0
   18224:	|           |  |  |  |  |  |   movea.l d1,a0
   18226:	|           |  |  |  |  |  |   adda.l d0,a0
   18228:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   1822c:	|           |  |  |  |  |  |   move.l 136(sp),d0
   18230:	|           |  |  |  |  |  |   add.l d0,d0
   18232:	|           |  |  |  |  |  |   add.l d0,d0
   18234:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   18238:	|           |  |  |  |  |  |   adda.l d0,a0
   1823a:	|           |  |  |  |  |  |   move.l (a0),d1
   1823c:	|           |  |  |  |  |  |   move.l 132(sp),d0
   18240:	|           |  |  |  |  |  |   add.l d0,d0
   18242:	|           |  |  |  |  |  |   add.l d0,d0
   18244:	|           |  |  |  |  |  |   movea.l d1,a0
   18246:	|           |  |  |  |  |  |   adda.l d0,a0
   18248:	|           |  |  |  |  |  |   moveq #1,d1
   1824a:	|           |  |  |  |  |  |   move.l d1,(a0)
   1824c:	|           |  |  |  |  +--|-- bra.s 18294 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   1824e:	|           |  |  |  |  |  '-> movea.l 1e9dc <currentFloor>,a0
   18254:	|           |  |  |  |  |      move.l 16(a0),d1
   18258:	|           |  |  |  |  |      move.l 136(sp),d0
   1825c:	|           |  |  |  |  |      add.l d0,d0
   1825e:	|           |  |  |  |  |      add.l d0,d0
   18260:	|           |  |  |  |  |      movea.l d1,a0
   18262:	|           |  |  |  |  |      adda.l d0,a0
   18264:	|           |  |  |  |  |      move.l (a0),d1
   18266:	|           |  |  |  |  |      move.l 132(sp),d0
   1826a:	|           |  |  |  |  |      add.l d0,d0
   1826c:	|           |  |  |  |  |      add.l d0,d0
   1826e:	|           |  |  |  |  |      movea.l d1,a0
   18270:	|           |  |  |  |  |      adda.l d0,a0
   18272:	|           |  |  |  |  |      moveq #-2,d0
   18274:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   18276:	|           |  |  |  |  |      move.l 136(sp),d0
   1827a:	|           |  |  |  |  |      add.l d0,d0
   1827c:	|           |  |  |  |  |      add.l d0,d0
   1827e:	|           |  |  |  |  |      movea.l 62(sp),a0
   18282:	|           |  |  |  |  |      adda.l d0,a0
   18284:	|           |  |  |  |  |      move.l (a0),d1
   18286:	|           |  |  |  |  |      move.l 132(sp),d0
   1828a:	|           |  |  |  |  |      add.l d0,d0
   1828c:	|           |  |  |  |  |      add.l d0,d0
   1828e:	|           |  |  |  |  |      movea.l d1,a0
   18290:	|           |  |  |  |  |      adda.l d0,a0
   18292:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   18294:	|           |  |  |  |  '----> addq.l #1,132(sp)
   18298:	|           |  |  |  '-------> movea.l 1e9dc <currentFloor>,a0
   1829e:	|           |  |  |            move.l 8(a0),d0
   182a2:	|           |  |  |            cmp.l 132(sp),d0
   182a6:	|           |  |  '----------- bgt.w 181b4 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   182aa:	|           |  |               addq.l #1,136(sp)
   182ae:	|           |  '-------------> movea.l 1e9dc <currentFloor>,a0
   182b4:	|           |                  move.l 8(a0),d0
   182b8:	|           |                  cmp.l 136(sp),d0
   182bc:	|           '----------------- bgt.w 181ac <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   182c0:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   182c4:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   182c8:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   182cc:	|  |                           clr.l 136(sp)
   182d0:	|  |     ,-------------------- bra.w 18426 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   182d4:	|  |  ,--|-------------------> clr.l 132(sp)
   182d8:	|  |  |  |     ,-------------- bra.w 18410 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   182dc:	|  |  |  |  ,--|-------------> movea.l 1e9dc <currentFloor>,a0
   182e2:	|  |  |  |  |  |               move.l 16(a0),d1
   182e6:	|  |  |  |  |  |               move.l 136(sp),d0
   182ea:	|  |  |  |  |  |               add.l d0,d0
   182ec:	|  |  |  |  |  |               add.l d0,d0
   182ee:	|  |  |  |  |  |               movea.l d1,a0
   182f0:	|  |  |  |  |  |               adda.l d0,a0
   182f2:	|  |  |  |  |  |               move.l (a0),d1
   182f4:	|  |  |  |  |  |               move.l 132(sp),d0
   182f8:	|  |  |  |  |  |               add.l d0,d0
   182fa:	|  |  |  |  |  |               add.l d0,d0
   182fc:	|  |  |  |  |  |               movea.l d1,a0
   182fe:	|  |  |  |  |  |               adda.l d0,a0
   18300:	|  |  |  |  |  |               move.l (a0),d0
   18302:	|  |  |  |  |  |               moveq #-1,d1
   18304:	|  |  |  |  |  |               cmp.l d0,d1
   18306:	|  |  |  |  |  |  ,----------- bne.w 1840c <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1830a:	|  |  |  |  |  |  |            clr.l 122(sp)
   1830e:	|  |  |  |  |  |  |     ,----- bra.w 183fa <setFloor+0x6d2>
						if (d != i && d != j) {
   18312:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   18316:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   1831a:	|  |  |  |  |  |  |  |  |  ,-- beq.w 183f6 <setFloor+0x6ce>
   1831e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   18322:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   18326:	|  |  |  |  |  |  |  |  |  +-- beq.w 183f6 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   1832a:	|  |  |  |  |  |  |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   18330:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   18334:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   18338:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1833a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1833c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1833e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   18340:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   18342:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   18346:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18348:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1834a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1834c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1834e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   18350:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   18354:	|  |  |  |  |  |  |  |  |  +-- bne.w 183f6 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   18358:	|  |  |  |  |  |  |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   1835e:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   18362:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   18366:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18368:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1836a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1836c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1836e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   18370:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   18374:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18376:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18378:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1837a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1837c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   1837e:	|  |  |  |  |  |  |  |  |  +-- bmi.s 183f6 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   18380:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   18384:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18386:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18388:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1838c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1838e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   18390:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   18394:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18396:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   18398:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1839a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1839c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   1839e:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   183a2:	|  |  |  |  |  |  |  |  |  +-- bgt.s 183f6 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   183a4:	|  |  |  |  |  |  |  |  |  |   movea.l 1e9dc <currentFloor>,a0
   183aa:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   183ae:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   183b2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   183b4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   183b6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   183b8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   183ba:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   183bc:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   183c0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   183c2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   183c4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   183c6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   183c8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   183cc:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   183d0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   183d2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   183d4:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   183d8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   183da:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   183dc:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   183e0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   183e2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   183e4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   183e6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   183e8:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   183ec:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   183ee:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   183f0:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   183f6:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   183fa:	|  |  |  |  |  |  |  |  '----> movea.l 1e9dc <currentFloor>,a0
   18400:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   18404:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   18408:	|  |  |  |  |  |  |  '-------- bgt.w 18312 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1840c:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   18410:	|  |  |  |  |  '-------------> movea.l 1e9dc <currentFloor>,a0
   18416:	|  |  |  |  |                  move.l 8(a0),d0
   1841a:	|  |  |  |  |                  cmp.l 132(sp),d0
   1841e:	|  |  |  |  '----------------- bgt.w 182dc <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   18422:	|  |  |  |                     addq.l #1,136(sp)
   18426:	|  |  |  '-------------------> movea.l 1e9dc <currentFloor>,a0
   1842c:	|  |  |                        move.l 8(a0),d0
   18430:	|  |  |                        cmp.l 136(sp),d0
   18434:	|  |  '----------------------- bgt.w 182d4 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   18438:	|  |                           tst.w 130(sp)
   1843c:	|  '-------------------------- bne.w 182c4 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   18440:	|                              clr.l 136(sp)
   18444:	|                          ,-- bra.s 1846c <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   18446:	|                       ,--|-> move.l 136(sp),d0
   1844a:	|                       |  |   add.l d0,d0
   1844c:	|                       |  |   add.l d0,d0
   1844e:	|                       |  |   movea.l 62(sp),a0
   18452:	|                       |  |   adda.l d0,a0
   18454:	|                       |  |   move.l (a0),54(sp)
   18458:	|                       |  |   move.l 1e8c0 <SysBase>,d0
   1845e:	|                       |  |   movea.l d0,a6
   18460:	|                       |  |   movea.l 54(sp),a1
   18464:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   18468:	|                       |  |   addq.l #1,136(sp)
   1846c:	|                       |  '-> movea.l 1e9dc <currentFloor>,a0
   18472:	|                       |      move.l 8(a0),d0
   18476:	|                       |      cmp.l 136(sp),d0
   1847a:	|                       '----- bgt.s 18446 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   1847c:	|                              move.l 62(sp),58(sp)
   18482:	|                              move.l 1e8c0 <SysBase>,d0
   18488:	|                              movea.l d0,a6
   1848a:	|                              movea.l 58(sp),a1
   1848e:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   18492:	|                              clr.l 62(sp)

	return TRUE;
   18496:	|                              moveq #1,d0
}
   18498:	'----------------------------> movea.l (sp)+,a2
   1849a:	                               movea.l (sp)+,a6
   1849c:	                               lea 132(sp),sp
   184a0:	                               rts

000184a2 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   184a2:	jsr 17990 <killFloor>
	noFloor ();
   184a8:	jsr 17898 <noFloor>
   184ae:	nop
   184b0:	rts

000184b2 <WaitVbl>:
void WaitVbl() {
   184b2:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   184b4:	   ,-> movea.l #14675972,a0
   184ba:	   |   move.l (a0),d0
   184bc:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   184be:	   |   move.l (sp),d0
   184c0:	   |   andi.l #130816,d0
   184c6:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   184c8:	   |   move.l (sp),d0
   184ca:	   |   cmpi.l #76800,d0
   184d0:	   '-- beq.s 184b4 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   184d2:	,----> movea.l #14675972,a0
   184d8:	|      move.l (a0),d0
   184da:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   184de:	|      move.l 4(sp),d0
   184e2:	|      andi.l #130816,d0
   184e8:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   184ec:	|      move.l 4(sp),d0
   184f0:	|      cmpi.l #76800,d0
   184f6:	|  ,-- beq.s 184fa <WaitVbl+0x48>
	while (1) {
   184f8:	'--|-- bra.s 184d2 <WaitVbl+0x20>
			break;
   184fa:	   '-> nop
}
   184fc:	       nop
   184fe:	       addq.l #8,sp
   18500:	       rts

00018502 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   18502:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   18504:	       move.l 8(sp),(sp)
	while(len-- > 0)
   18508:	   ,-- bra.s 1851a <memset+0x18>
		*ptr++ = val;
   1850a:	,--|-> move.l (sp),d0
   1850c:	|  |   move.l d0,d1
   1850e:	|  |   addq.l #1,d1
   18510:	|  |   move.l d1,(sp)
   18512:	|  |   move.l 12(sp),d1
   18516:	|  |   movea.l d0,a0
   18518:	|  |   move.b d1,(a0)
	while(len-- > 0)
   1851a:	|  '-> move.l 16(sp),d0
   1851e:	|      move.l d0,d1
   18520:	|      subq.l #1,d1
   18522:	|      move.l d1,16(sp)
   18526:	|      tst.l d0
   18528:	'----- bne.s 1850a <memset+0x8>
	return dest;
   1852a:	       move.l 8(sp),d0
}
   1852e:	       addq.l #4,sp
   18530:	       rts

00018532 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   18532:	       subq.l #8,sp
   18534:	       move.l d2,-(sp)
	char *d = (char *)dest;
   18536:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   1853c:	       move.l 20(sp),4(sp)
	while(len--)
   18542:	   ,-- bra.s 18564 <memcpy+0x32>
		*d++ = *s++;
   18544:	,--|-> move.l 4(sp),d1
   18548:	|  |   move.l d1,d0
   1854a:	|  |   addq.l #1,d0
   1854c:	|  |   move.l d0,4(sp)
   18550:	|  |   move.l 8(sp),d0
   18554:	|  |   move.l d0,d2
   18556:	|  |   addq.l #1,d2
   18558:	|  |   move.l d2,8(sp)
   1855c:	|  |   movea.l d1,a0
   1855e:	|  |   move.b (a0),d1
   18560:	|  |   movea.l d0,a0
   18562:	|  |   move.b d1,(a0)
	while(len--)
   18564:	|  '-> move.l 24(sp),d0
   18568:	|      move.l d0,d1
   1856a:	|      subq.l #1,d1
   1856c:	|      move.l d1,24(sp)
   18570:	|      tst.l d0
   18572:	'----- bne.s 18544 <memcpy+0x12>
	return dest;
   18574:	       move.l 16(sp),d0
}
   18578:	       move.l (sp)+,d2
   1857a:	       addq.l #8,sp
   1857c:	       rts

0001857e <KPrintF>:
void KPrintF(const char* fmt, ...) {
   1857e:	       lea -128(sp),sp
   18582:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   18586:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec282e>,d0
   1858c:	       cmpi.w #20153,d0
   18590:	   ,-- beq.s 185b4 <KPrintF+0x36>
   18592:	   |   cmpi.w #-24562,d0
   18596:	   +-- beq.s 185b4 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   18598:	   |   movea.l 1e8c0 <SysBase>,a6
   1859e:	   |   movea.l 144(sp),a0
   185a2:	   |   lea 148(sp),a1
   185a6:	   |   lea 19012 <KPutCharX>,a2
   185ac:	   |   suba.l a3,a3
   185ae:	   |   jsr -522(a6)
}
   185b2:	,--|-- bra.s 185de <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   185b4:	|  '-> movea.l 1e8c0 <SysBase>,a6
   185ba:	|      movea.l 144(sp),a0
   185be:	|      lea 148(sp),a1
   185c2:	|      lea 19020 <PutChar>,a2
   185c8:	|      lea 12(sp),a3
   185cc:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   185d0:	|      move.l a3,-(sp)
   185d2:	|      pea 56 <_start+0x56>
   185d6:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec282e>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   185dc:	|      addq.l #8,sp
}
   185de:	'----> movem.l (sp)+,a2-a3/a6
   185e2:	       lea 128(sp),sp
   185e6:	       rts

000185e8 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   185e8:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   185ea:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   185f0:	       movea.l (sp),a0
   185f2:	       move.w (a0),d0
   185f4:	       cmpi.w #20153,d0
   185f8:	   ,-- beq.s 18604 <debug_cmd+0x1c>
   185fa:	   |   movea.l (sp),a0
   185fc:	   |   move.w (a0),d0
   185fe:	   |   cmpi.w #-24562,d0
   18602:	,--|-- bne.s 18622 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   18604:	|  '-> move.l 20(sp),-(sp)
   18608:	|      move.l 20(sp),-(sp)
   1860c:	|      move.l 20(sp),-(sp)
   18610:	|      move.l 20(sp),-(sp)
   18614:	|      pea 58 <_start+0x58>
   18618:	|      movea.l 20(sp),a0
   1861c:	|      jsr (a0)
   1861e:	|      lea 20(sp),sp
	}
}
   18622:	'----> nop
   18624:	       addq.l #4,sp
   18626:	       rts

00018628 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   18628:	       move.l d2,-(sp)
	while(*source && --num > 0)
   1862a:	   ,-- bra.s 1864c <my_strncpy+0x24>
		*destination++ = *source++;
   1862c:	,--|-> move.l 12(sp),d1
   18630:	|  |   move.l d1,d0
   18632:	|  |   addq.l #1,d0
   18634:	|  |   move.l d0,12(sp)
   18638:	|  |   move.l 8(sp),d0
   1863c:	|  |   move.l d0,d2
   1863e:	|  |   addq.l #1,d2
   18640:	|  |   move.l d2,8(sp)
   18644:	|  |   movea.l d1,a0
   18646:	|  |   move.b (a0),d1
   18648:	|  |   movea.l d0,a0
   1864a:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   1864c:	|  '-> movea.l 12(sp),a0
   18650:	|      move.b (a0),d0
   18652:	|  ,-- beq.s 1865a <my_strncpy+0x32>
   18654:	|  |   subq.l #1,16(sp)
   18658:	'--|-- bne.s 1862c <my_strncpy+0x4>
	*destination = '\0';
   1865a:	   '-> movea.l 8(sp),a0
   1865e:	       clr.b (a0)
}
   18660:	       nop
   18662:	       move.l (sp)+,d2
   18664:	       rts

00018666 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   18666:	    lea -60(sp),sp
   1866a:	    movea.l 72(sp),a1
   1866e:	    movea.l 76(sp),a0
   18672:	    move.l 80(sp),d1
   18676:	    move.l 84(sp),d0
   1867a:	    movea.w a1,a1
   1867c:	    move.w a1,8(sp)
   18680:	    movea.w a0,a0
   18682:	    move.w a0,6(sp)
   18686:	    move.w d1,d1
   18688:	    move.w d1,4(sp)
   1868c:	    move.w d0,d0
   1868e:	    move.w d0,2(sp)
	struct debug_resource resource = {
   18692:	    lea 10(sp),a0
   18696:	    clr.l (a0)
   18698:	    addq.l #4,a0
   1869a:	    clr.l (a0)
   1869c:	    addq.l #4,a0
   1869e:	    clr.l (a0)
   186a0:	    addq.l #4,a0
   186a2:	    clr.l (a0)
   186a4:	    addq.l #4,a0
   186a6:	    clr.l (a0)
   186a8:	    addq.l #4,a0
   186aa:	    clr.l (a0)
   186ac:	    addq.l #4,a0
   186ae:	    clr.l (a0)
   186b0:	    addq.l #4,a0
   186b2:	    clr.l (a0)
   186b4:	    addq.l #4,a0
   186b6:	    clr.l (a0)
   186b8:	    addq.l #4,a0
   186ba:	    clr.l (a0)
   186bc:	    addq.l #4,a0
   186be:	    clr.l (a0)
   186c0:	    addq.l #4,a0
   186c2:	    clr.l (a0)
   186c4:	    addq.l #4,a0
   186c6:	    clr.w (a0)
   186c8:	    addq.l #2,a0
		.address = (unsigned int)addr,
   186ca:	    move.l 64(sp),d0
	struct debug_resource resource = {
   186ce:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   186d2:	    move.w 8(sp),d0
   186d6:	,-- bpl.s 186da <debug_register_bitmap+0x74>
   186d8:	|   addq.w #7,d0
   186da:	'-> asr.w #3,d0
   186dc:	    movea.w d0,a0
   186de:	    movea.w 6(sp),a1
   186e2:	    move.l a1,-(sp)
   186e4:	    move.l a0,-(sp)
   186e6:	    jsr 18f0a <__mulsi3>
   186ec:	    addq.l #8,sp
   186ee:	    movea.w 4(sp),a0
   186f2:	    move.l a0,-(sp)
   186f4:	    move.l d0,-(sp)
   186f6:	    jsr 18f0a <__mulsi3>
   186fc:	    addq.l #8,sp
	struct debug_resource resource = {
   186fe:	    move.l d0,14(sp)
   18702:	    move.w 2(sp),52(sp)
   18708:	    move.w 8(sp),54(sp)
   1870e:	    move.w 6(sp),56(sp)
   18714:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   1871a:	    moveq #0,d0
   1871c:	    move.w 2(sp),d0
   18720:	    moveq #2,d1
   18722:	    and.l d1,d0
   18724:	,-- beq.s 18730 <debug_register_bitmap+0xca>
		resource.size *= 2;
   18726:	|   move.l 14(sp),d0
   1872a:	|   add.l d0,d0
   1872c:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   18730:	'-> pea 20 <_start+0x20>
   18734:	    move.l 72(sp),-(sp)
   18738:	    lea 18(sp),a0
   1873c:	    move.l a0,d0
   1873e:	    addq.l #8,d0
   18740:	    move.l d0,-(sp)
   18742:	    jsr 18628 <my_strncpy>
   18748:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   1874c:	    lea 10(sp),a0
   18750:	    clr.l -(sp)
   18752:	    clr.l -(sp)
   18754:	    move.l a0,-(sp)
   18756:	    pea 4 <_start+0x4>
   1875a:	    jsr 185e8 <debug_cmd>
   18760:	    lea 16(sp),sp
}
   18764:	    nop
   18766:	    lea 60(sp),sp
   1876a:	    rts

0001876c <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   1876c:	lea -12(sp),sp
   18770:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   18772:	move.l 20(sp),12(sp)
   18778:	move.l 24(sp),8(sp)
   1877e:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   18784:	movea.l d0,a6
   18786:	move.l 12(sp),d0
   1878a:	move.l 8(sp),d1
   1878e:	jsr -66(a6)
   18792:	move.l d0,4(sp)
   18796:	move.l 4(sp),d0
}
   1879a:	movea.l (sp)+,a6
   1879c:	lea 12(sp),sp
   187a0:	rts

000187a2 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   187a2:	lea -32(sp),sp
   187a6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   187aa:	move.l 48(sp),36(sp)
   187b0:	move.l 52(sp),40(sp)
   187b6:	move.l 56(sp),28(sp)
   187bc:	move.l 60(sp),32(sp)
   187c2:	move.l 1e8d8 <MathIeeeDoubBasBase>,d0
   187c8:	movea.l d0,a6
   187ca:	move.l 36(sp),d0
   187ce:	move.l 40(sp),d1
   187d2:	move.l 28(sp),d2
   187d6:	move.l 32(sp),d3
   187da:	jsr -66(a6)
   187de:	move.l d0,12(sp)
   187e2:	move.l d1,16(sp)
   187e6:	move.l 12(sp),20(sp)
   187ec:	move.l 16(sp),24(sp)
   187f2:	move.l 20(sp),d0
   187f6:	move.l 24(sp),d1
}
   187fa:	movem.l (sp)+,d2-d3/a6
   187fe:	lea 32(sp),sp
   18802:	rts

00018804 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   18804:	lea -32(sp),sp
   18808:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   1880c:	move.l 48(sp),36(sp)
   18812:	move.l 52(sp),40(sp)
   18818:	move.l 56(sp),28(sp)
   1881e:	move.l 60(sp),32(sp)
   18824:	move.l 1e8d8 <MathIeeeDoubBasBase>,d0
   1882a:	movea.l d0,a6
   1882c:	move.l 36(sp),d0
   18830:	move.l 40(sp),d1
   18834:	move.l 28(sp),d2
   18838:	move.l 32(sp),d3
   1883c:	jsr -84(a6)
   18840:	move.l d0,12(sp)
   18844:	move.l d1,16(sp)
   18848:	move.l 12(sp),20(sp)
   1884e:	move.l 16(sp),24(sp)
   18854:	move.l 20(sp),d0
   18858:	move.l 24(sp),d1
}
   1885c:	movem.l (sp)+,d2-d3/a6
   18860:	lea 32(sp),sp
   18864:	rts

00018866 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   18866:	lea -12(sp),sp
   1886a:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   1886c:	move.l 20(sp),12(sp)
   18872:	move.l 24(sp),8(sp)
   18878:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   1887e:	movea.l d0,a6
   18880:	move.l 12(sp),d0
   18884:	move.l 8(sp),d1
   18888:	jsr -84(a6)
   1888c:	move.l d0,4(sp)
   18890:	move.l 4(sp),d0
}
   18894:	movea.l (sp)+,a6
   18896:	lea 12(sp),sp
   1889a:	rts

0001889c <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   1889c:	lea -12(sp),sp
   188a0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   188a2:	move.l 20(sp),12(sp)
   188a8:	move.l 24(sp),8(sp)
   188ae:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   188b4:	movea.l d0,a6
   188b6:	move.l 12(sp),d0
   188ba:	move.l 8(sp),d1
   188be:	jsr -42(a6)
   188c2:	move.l d0,4(sp)
   188c6:	move.l 4(sp),d0
}
   188ca:	movea.l (sp)+,a6
   188cc:	lea 12(sp),sp
   188d0:	rts

000188d2 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   188d2:	lea -20(sp),sp
   188d6:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   188d8:	move.l 28(sp),20(sp)
   188de:	move.l 1e8dc <MathIeeeDoubTransBase>,d0
   188e4:	movea.l d0,a6
   188e6:	move.l 20(sp),d0
   188ea:	jsr -108(a6)
   188ee:	move.l d0,4(sp)
   188f2:	move.l d1,8(sp)
   188f6:	move.l 4(sp),12(sp)
   188fc:	move.l 8(sp),16(sp)
   18902:	move.l 12(sp),d0
   18906:	move.l 16(sp),d1
}
   1890a:	movea.l (sp)+,a6
   1890c:	lea 20(sp),sp
   18910:	rts

00018912 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   18912:	lea -12(sp),sp
   18916:	move.l a6,-(sp)
	return IEEEDPFix(value);
   18918:	move.l 20(sp),8(sp)
   1891e:	move.l 24(sp),12(sp)
   18924:	move.l 1e8d8 <MathIeeeDoubBasBase>,d0
   1892a:	movea.l d0,a6
   1892c:	move.l 8(sp),d0
   18930:	move.l 12(sp),d1
   18934:	jsr -30(a6)
   18938:	move.l d0,4(sp)
   1893c:	move.l 4(sp),d0
}
   18940:	movea.l (sp)+,a6
   18942:	lea 12(sp),sp
   18946:	rts

00018948 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   18948:	subq.l #8,sp
   1894a:	move.l a6,-(sp)
	return IEEESPFix(value);
   1894c:	move.l 16(sp),8(sp)
   18952:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   18958:	movea.l d0,a6
   1895a:	move.l 8(sp),d0
   1895e:	jsr -30(a6)
   18962:	move.l d0,4(sp)
   18966:	move.l 4(sp),d0
}
   1896a:	movea.l (sp)+,a6
   1896c:	addq.l #8,sp
   1896e:	rts

00018970 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   18970:	lea -20(sp),sp
   18974:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   18976:	move.l 28(sp),20(sp)
   1897c:	move.l 1e8d8 <MathIeeeDoubBasBase>,d0
   18982:	movea.l d0,a6
   18984:	move.l 20(sp),d0
   18988:	jsr -36(a6)
   1898c:	move.l d0,4(sp)
   18990:	move.l d1,8(sp)
   18994:	move.l 4(sp),12(sp)
   1899a:	move.l 8(sp),16(sp)
   189a0:	move.l 12(sp),d0
   189a4:	move.l 16(sp),d1
}
   189a8:	movea.l (sp)+,a6
   189aa:	lea 20(sp),sp
   189ae:	rts

000189b0 <__floatsisf>:

FLOAT __floatsisf(int i) {
   189b0:	subq.l #8,sp
   189b2:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   189b4:	move.l 16(sp),8(sp)
   189ba:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   189c0:	movea.l d0,a6
   189c2:	move.l 8(sp),d0
   189c6:	jsr -36(a6)
   189ca:	move.l d0,4(sp)
   189ce:	move.l 4(sp),d0
}
   189d2:	movea.l (sp)+,a6
   189d4:	addq.l #8,sp
   189d6:	rts

000189d8 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   189d8:	subq.l #8,sp
   189da:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   189dc:	move.l 16(sp),8(sp)
   189e2:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   189e8:	movea.l d0,a6
   189ea:	move.l 8(sp),d0
   189ee:	jsr -36(a6)
   189f2:	move.l d0,4(sp)
   189f6:	move.l 4(sp),d0
}
   189fa:	movea.l (sp)+,a6
   189fc:	addq.l #8,sp
   189fe:	rts

00018a00 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   18a00:	lea -32(sp),sp
   18a04:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   18a08:	move.l 48(sp),36(sp)
   18a0e:	move.l 52(sp),40(sp)
   18a14:	move.l 56(sp),28(sp)
   18a1a:	move.l 60(sp),32(sp)
   18a20:	move.l 1e8d8 <MathIeeeDoubBasBase>,d0
   18a26:	movea.l d0,a6
   18a28:	move.l 36(sp),d0
   18a2c:	move.l 40(sp),d1
   18a30:	move.l 28(sp),d2
   18a34:	move.l 32(sp),d3
   18a38:	jsr -78(a6)
   18a3c:	move.l d0,12(sp)
   18a40:	move.l d1,16(sp)
   18a44:	move.l 12(sp),20(sp)
   18a4a:	move.l 16(sp),24(sp)
   18a50:	move.l 20(sp),d0
   18a54:	move.l 24(sp),d1
}
   18a58:	movem.l (sp)+,d2-d3/a6
   18a5c:	lea 32(sp),sp
   18a60:	rts

00018a62 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   18a62:	lea -12(sp),sp
   18a66:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   18a68:	move.l 20(sp),12(sp)
   18a6e:	move.l 24(sp),8(sp)
   18a74:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   18a7a:	movea.l d0,a6
   18a7c:	move.l 12(sp),d0
   18a80:	move.l 8(sp),d1
   18a84:	jsr -78(a6)
   18a88:	move.l d0,4(sp)
   18a8c:	move.l 4(sp),d0
}
   18a90:	movea.l (sp)+,a6
   18a92:	lea 12(sp),sp
   18a96:	rts

00018a98 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   18a98:	lea -12(sp),sp
   18a9c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18a9e:	move.l 20(sp),12(sp)
   18aa4:	move.l 24(sp),8(sp)
   18aaa:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   18ab0:	movea.l d0,a6
   18ab2:	move.l 12(sp),d0
   18ab6:	move.l 8(sp),d1
   18aba:	jsr -42(a6)
   18abe:	move.l d0,4(sp)
   18ac2:	move.l 4(sp),d0
}
   18ac6:	movea.l (sp)+,a6
   18ac8:	lea 12(sp),sp
   18acc:	rts

00018ace <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   18ace:	lea -20(sp),sp
   18ad2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   18ad6:	move.l 36(sp),24(sp)
   18adc:	move.l 40(sp),28(sp)
   18ae2:	move.l 44(sp),16(sp)
   18ae8:	move.l 48(sp),20(sp)
   18aee:	move.l 1e8d8 <MathIeeeDoubBasBase>,d0
   18af4:	movea.l d0,a6
   18af6:	move.l 24(sp),d0
   18afa:	move.l 28(sp),d1
   18afe:	move.l 16(sp),d2
   18b02:	move.l 20(sp),d3
   18b06:	jsr -42(a6)
   18b0a:	move.l d0,12(sp)
   18b0e:	move.l 12(sp),d0
}
   18b12:	movem.l (sp)+,d2-d3/a6
   18b16:	lea 20(sp),sp
   18b1a:	rts

00018b1c <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   18b1c:	lea -12(sp),sp
   18b20:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18b22:	move.l 20(sp),12(sp)
   18b28:	move.l 24(sp),8(sp)
   18b2e:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   18b34:	movea.l d0,a6
   18b36:	move.l 12(sp),d0
   18b3a:	move.l 8(sp),d1
   18b3e:	jsr -42(a6)
   18b42:	move.l d0,4(sp)
   18b46:	move.l 4(sp),d0
}
   18b4a:	movea.l (sp)+,a6
   18b4c:	lea 12(sp),sp
   18b50:	rts

00018b52 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   18b52:	lea -12(sp),sp
   18b56:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18b58:	move.l 20(sp),12(sp)
   18b5e:	move.l 24(sp),8(sp)
   18b64:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   18b6a:	movea.l d0,a6
   18b6c:	move.l 12(sp),d0
   18b70:	move.l 8(sp),d1
   18b74:	jsr -42(a6)
   18b78:	move.l d0,4(sp)
   18b7c:	move.l 4(sp),d0
}
   18b80:	movea.l (sp)+,a6
   18b82:	lea 12(sp),sp
   18b86:	rts

00018b88 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   18b88:	lea -20(sp),sp
   18b8c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   18b90:	move.l 36(sp),24(sp)
   18b96:	move.l 40(sp),28(sp)
   18b9c:	move.l 44(sp),16(sp)
   18ba2:	move.l 48(sp),20(sp)
   18ba8:	move.l 1e8d8 <MathIeeeDoubBasBase>,d0
   18bae:	movea.l d0,a6
   18bb0:	move.l 24(sp),d0
   18bb4:	move.l 28(sp),d1
   18bb8:	move.l 16(sp),d2
   18bbc:	move.l 20(sp),d3
   18bc0:	jsr -42(a6)
   18bc4:	move.l d0,12(sp)
   18bc8:	move.l 12(sp),d0
}
   18bcc:	movem.l (sp)+,d2-d3/a6
   18bd0:	lea 20(sp),sp
   18bd4:	rts

00018bd6 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   18bd6:	lea -12(sp),sp
   18bda:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18bdc:	move.l 20(sp),12(sp)
   18be2:	move.l 24(sp),8(sp)
   18be8:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   18bee:	movea.l d0,a6
   18bf0:	move.l 12(sp),d0
   18bf4:	move.l 8(sp),d1
   18bf8:	jsr -42(a6)
   18bfc:	move.l d0,4(sp)
   18c00:	move.l 4(sp),d0
}
   18c04:	movea.l (sp)+,a6
   18c06:	lea 12(sp),sp
   18c0a:	rts

00018c0c <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   18c0c:	lea -12(sp),sp
   18c10:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   18c12:	move.l 20(sp),12(sp)
   18c18:	move.l 24(sp),8(sp)
   18c1e:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   18c24:	movea.l d0,a6
   18c26:	move.l 12(sp),d0
   18c2a:	move.l 8(sp),d1
   18c2e:	jsr -42(a6)
   18c32:	move.l d0,4(sp)
   18c36:	move.l 4(sp),d0
}
   18c3a:	movea.l (sp)+,a6
   18c3c:	lea 12(sp),sp
   18c40:	rts

00018c42 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   18c42:	lea -32(sp),sp
   18c46:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   18c4a:	move.l 48(sp),36(sp)
   18c50:	move.l 52(sp),40(sp)
   18c56:	move.l 56(sp),28(sp)
   18c5c:	move.l 60(sp),32(sp)
   18c62:	move.l 1e8d8 <MathIeeeDoubBasBase>,d0
   18c68:	movea.l d0,a6
   18c6a:	move.l 36(sp),d0
   18c6e:	move.l 40(sp),d1
   18c72:	move.l 28(sp),d2
   18c76:	move.l 32(sp),d3
   18c7a:	jsr -72(a6)
   18c7e:	move.l d0,12(sp)
   18c82:	move.l d1,16(sp)
   18c86:	move.l 12(sp),20(sp)
   18c8c:	move.l 16(sp),24(sp)
   18c92:	move.l 20(sp),d0
   18c96:	move.l 24(sp),d1
}
   18c9a:	movem.l (sp)+,d2-d3/a6
   18c9e:	lea 32(sp),sp
   18ca2:	rts

00018ca4 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   18ca4:	lea -12(sp),sp
   18ca8:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   18caa:	move.l 20(sp),12(sp)
   18cb0:	move.l 24(sp),8(sp)
   18cb6:	move.l 1e8d0 <MathIeeeSingBasBase>,d0
   18cbc:	movea.l d0,a6
   18cbe:	move.l 12(sp),d0
   18cc2:	move.l 8(sp),d1
   18cc6:	jsr -72(a6)
   18cca:	move.l d0,4(sp)
   18cce:	move.l 4(sp),d0
}
   18cd2:	movea.l (sp)+,a6
   18cd4:	lea 12(sp),sp
   18cd8:	rts

00018cda <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   18cda:	lea -12(sp),sp
   18cde:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   18ce0:	move.l 20(sp),8(sp)
   18ce6:	move.l 24(sp),12(sp)
   18cec:	move.l 1e8dc <MathIeeeDoubTransBase>,d0
   18cf2:	movea.l d0,a6
   18cf4:	move.l 8(sp),d0
   18cf8:	move.l 12(sp),d1
   18cfc:	jsr -102(a6)
   18d00:	move.l d0,4(sp)
   18d04:	move.l 4(sp),d0
}
   18d08:	movea.l (sp)+,a6
   18d0a:	lea 12(sp),sp
   18d0e:	rts

00018d10 <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   18d10:	       lea -24(sp),sp
   18d14:	       move.l a6,-(sp)
    if (x > 0) {
   18d16:	       clr.l -(sp)
   18d18:	       move.l 40(sp),-(sp)
   18d1c:	       jsr 18b1c <__gtsf2>
   18d22:	       addq.l #8,sp
   18d24:	       tst.l d0
   18d26:	   ,-- ble.s 18d58 <atan2f+0x48>
        return IEEESPAtan(y / x);
   18d28:	   |   move.l 36(sp),-(sp)
   18d2c:	   |   move.l 36(sp),-(sp)
   18d30:	   |   jsr 18866 <__divsf3>
   18d36:	   |   addq.l #8,sp
   18d38:	   |   move.l d0,8(sp)
   18d3c:	   |   move.l 1e8d4 <MathIeeeSingTransBase>,d0
   18d42:	   |   movea.l d0,a6
   18d44:	   |   move.l 8(sp),d0
   18d48:	   |   jsr -30(a6)
   18d4c:	   |   move.l d0,4(sp)
   18d50:	   |   move.l 4(sp),d0
   18d54:	,--|-- bra.w 18eb8 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   18d58:	|  '-> clr.l -(sp)
   18d5a:	|      move.l 40(sp),-(sp)
   18d5e:	|      jsr 18bd6 <__ltsf2>
   18d64:	|      addq.l #8,sp
   18d66:	|      tst.l d0
   18d68:	|  ,-- bge.s 18ddc <atan2f+0xcc>
   18d6a:	|  |   clr.l -(sp)
   18d6c:	|  |   move.l 36(sp),-(sp)
   18d70:	|  |   jsr 18a98 <__gesf2>
   18d76:	|  |   addq.l #8,sp
   18d78:	|  |   tst.l d0
   18d7a:	|  +-- blt.s 18ddc <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   18d7c:	|  |   move.l 36(sp),-(sp)
   18d80:	|  |   move.l 36(sp),-(sp)
   18d84:	|  |   jsr 18866 <__divsf3>
   18d8a:	|  |   addq.l #8,sp
   18d8c:	|  |   move.l d0,24(sp)
   18d90:	|  |   move.l 1e8d4 <MathIeeeSingTransBase>,d0
   18d96:	|  |   movea.l d0,a6
   18d98:	|  |   move.l 24(sp),d0
   18d9c:	|  |   jsr -30(a6)
   18da0:	|  |   move.l d0,20(sp)
   18da4:	|  |   move.l 20(sp),d0
   18da8:	|  |   move.l d0,-(sp)
   18daa:	|  |   jsr 188d2 <__extendsfdf2>
   18db0:	|  |   addq.l #4,sp
   18db2:	|  |   move.l #1413754136,-(sp)
   18db8:	|  |   move.l #1074340347,-(sp)
   18dbe:	|  |   move.l d1,-(sp)
   18dc0:	|  |   move.l d0,-(sp)
   18dc2:	|  |   jsr 187a2 <__adddf3>
   18dc8:	|  |   lea 16(sp),sp
   18dcc:	|  |   move.l d1,-(sp)
   18dce:	|  |   move.l d0,-(sp)
   18dd0:	|  |   jsr 18cda <__truncdfsf2>
   18dd6:	|  |   addq.l #8,sp
   18dd8:	+--|-- bra.w 18eb8 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   18ddc:	|  '-> clr.l -(sp)
   18dde:	|      move.l 40(sp),-(sp)
   18de2:	|      jsr 18bd6 <__ltsf2>
   18de8:	|      addq.l #8,sp
   18dea:	|      tst.l d0
   18dec:	|  ,-- bge.s 18e5e <atan2f+0x14e>
   18dee:	|  |   clr.l -(sp)
   18df0:	|  |   move.l 36(sp),-(sp)
   18df4:	|  |   jsr 18bd6 <__ltsf2>
   18dfa:	|  |   addq.l #8,sp
   18dfc:	|  |   tst.l d0
   18dfe:	|  +-- bge.s 18e5e <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   18e00:	|  |   move.l 36(sp),-(sp)
   18e04:	|  |   move.l 36(sp),-(sp)
   18e08:	|  |   jsr 18866 <__divsf3>
   18e0e:	|  |   addq.l #8,sp
   18e10:	|  |   move.l d0,16(sp)
   18e14:	|  |   move.l 1e8d4 <MathIeeeSingTransBase>,d0
   18e1a:	|  |   movea.l d0,a6
   18e1c:	|  |   move.l 16(sp),d0
   18e20:	|  |   jsr -30(a6)
   18e24:	|  |   move.l d0,12(sp)
   18e28:	|  |   move.l 12(sp),d0
   18e2c:	|  |   move.l d0,-(sp)
   18e2e:	|  |   jsr 188d2 <__extendsfdf2>
   18e34:	|  |   addq.l #4,sp
   18e36:	|  |   move.l #1413754136,-(sp)
   18e3c:	|  |   move.l #1074340347,-(sp)
   18e42:	|  |   move.l d1,-(sp)
   18e44:	|  |   move.l d0,-(sp)
   18e46:	|  |   jsr 18c42 <__subdf3>
   18e4c:	|  |   lea 16(sp),sp
   18e50:	|  |   move.l d1,-(sp)
   18e52:	|  |   move.l d0,-(sp)
   18e54:	|  |   jsr 18cda <__truncdfsf2>
   18e5a:	|  |   addq.l #8,sp
   18e5c:	+--|-- bra.s 18eb8 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   18e5e:	|  '-> clr.l -(sp)
   18e60:	|      move.l 40(sp),-(sp)
   18e64:	|      jsr 1889c <__eqsf2>
   18e6a:	|      addq.l #8,sp
   18e6c:	|      tst.l d0
   18e6e:	|  ,-- bne.s 18e8a <atan2f+0x17a>
   18e70:	|  |   clr.l -(sp)
   18e72:	|  |   move.l 36(sp),-(sp)
   18e76:	|  |   jsr 18b1c <__gtsf2>
   18e7c:	|  |   addq.l #8,sp
   18e7e:	|  |   tst.l d0
   18e80:	|  +-- ble.s 18e8a <atan2f+0x17a>
        return PI / 2;
   18e82:	|  |   move.l #1070141403,d0
   18e88:	+--|-- bra.s 18eb8 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   18e8a:	|  '-> clr.l -(sp)
   18e8c:	|      move.l 40(sp),-(sp)
   18e90:	|      jsr 1889c <__eqsf2>
   18e96:	|      addq.l #8,sp
   18e98:	|      tst.l d0
   18e9a:	|  ,-- bne.s 18eb6 <atan2f+0x1a6>
   18e9c:	|  |   clr.l -(sp)
   18e9e:	|  |   move.l 36(sp),-(sp)
   18ea2:	|  |   jsr 18bd6 <__ltsf2>
   18ea8:	|  |   addq.l #8,sp
   18eaa:	|  |   tst.l d0
   18eac:	|  +-- bge.s 18eb6 <atan2f+0x1a6>
        return -PI / 2;
   18eae:	|  |   move.l #-1077342245,d0
   18eb4:	+--|-- bra.s 18eb8 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   18eb6:	|  '-> moveq #0,d0
    }
}
   18eb8:	'----> movea.l (sp)+,a6
   18eba:	       lea 24(sp),sp
   18ebe:	       rts

00018ec0 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   18ec0:	lea -24(sp),sp
   18ec4:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   18ec6:	move.l 32(sp),20(sp)
   18ecc:	move.l 36(sp),24(sp)
   18ed2:	move.l 1e8dc <MathIeeeDoubTransBase>,d0
   18ed8:	movea.l d0,a6
   18eda:	move.l 20(sp),d0
   18ede:	move.l 24(sp),d1
   18ee2:	jsr -96(a6)
   18ee6:	move.l d0,4(sp)
   18eea:	move.l d1,8(sp)
   18eee:	move.l 4(sp),12(sp)
   18ef4:	move.l 8(sp),16(sp)
   18efa:	move.l 12(sp),d0
   18efe:	move.l 16(sp),d1
}
   18f02:	movea.l (sp)+,a6
   18f04:	lea 24(sp),sp
   18f08:	rts

00018f0a <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   18f0a:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   18f0e:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   18f12:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   18f16:	mulu.w 8(sp),d1
	addw	d1, d0
   18f1a:	add.w d1,d0
	swap	d0
   18f1c:	swap d0
	clrw	d0
   18f1e:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   18f20:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   18f24:	mulu.w 10(sp),d1
	addl	d1, d0
   18f28:	add.l d1,d0
	rts
   18f2a:	rts

00018f2c <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   18f2c:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   18f2e:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   18f32:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   18f36:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   18f3c:	   ,-- bcc.s 18f54 <__udivsi3+0x28>
	movel	d0, d2
   18f3e:	   |   move.l d0,d2
	clrw	d2
   18f40:	   |   clr.w d2
	swap	d2
   18f42:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   18f44:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   18f46:	   |   move.w d2,d0
	swap	d0
   18f48:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   18f4a:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   18f4e:	   |   divu.w d1,d2
	movew	d2, d0
   18f50:	   |   move.w d2,d0
	jra	6f
   18f52:	,--|-- bra.s 18f84 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   18f54:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   18f56:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   18f58:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   18f5a:	|  |   cmpi.l #65536,d1
	jcc	4b
   18f60:	|  '-- bcc.s 18f56 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   18f62:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   18f64:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   18f6a:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   18f6c:	|      mulu.w d0,d1
	swap	d2
   18f6e:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   18f70:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   18f72:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   18f74:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   18f76:	|  ,-- bne.s 18f82 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   18f78:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   18f7a:	|  +-- bcs.s 18f82 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   18f7c:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   18f80:	+--|-- bls.s 18f84 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   18f82:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   18f84:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18f86:	       rts

00018f88 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   18f88:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   18f8a:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   18f8c:	    move.l 12(sp),d1
	jpl	1f
   18f90:	,-- bpl.s 18f96 <__divsi3+0xe>
	negl	d1
   18f92:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   18f94:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   18f96:	'-> move.l 8(sp),d0
	jpl	2f
   18f9a:	,-- bpl.s 18fa0 <__divsi3+0x18>
	negl	d0
   18f9c:	|   neg.l d0
	negb	d2
   18f9e:	|   neg.b d2

2:	movel	d1, sp@-
   18fa0:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18fa2:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   18fa4:	    jsr 18f2c <__udivsi3>
	addql	#8, sp
   18faa:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   18fac:	    tst.b d2
	jpl	3f
   18fae:	,-- bpl.s 18fb2 <__divsi3+0x2a>
	negl	d0
   18fb0:	|   neg.l d0

3:	movel	sp@+, d2
   18fb2:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18fb4:	    rts

00018fb6 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   18fb6:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   18fba:	move.l 4(sp),d0
	movel	d1, sp@-
   18fbe:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18fc0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   18fc2:	jsr 18f88 <__divsi3>
	addql	#8, sp
   18fc8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   18fca:	move.l 8(sp),d1
	movel	d1, sp@-
   18fce:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18fd0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   18fd2:	jsr 18f0a <__mulsi3>
	addql	#8, sp
   18fd8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18fda:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   18fde:	sub.l d0,d1
	movel	d1, d0
   18fe0:	move.l d1,d0
	rts
   18fe2:	rts

00018fe4 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   18fe4:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   18fe8:	move.l 4(sp),d0
	movel	d1, sp@-
   18fec:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18fee:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   18ff0:	jsr 18f2c <__udivsi3>
	addql	#8, sp
   18ff6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   18ff8:	move.l 8(sp),d1
	movel	d1, sp@-
   18ffc:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18ffe:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   19000:	jsr 18f0a <__mulsi3>
	addql	#8, sp
   19006:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   19008:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1900c:	sub.l d0,d1
	movel	d1, d0
   1900e:	move.l d1,d0
	rts
   19010:	rts

00019012 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   19012:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   19014:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   19018:	jsr -516(a6)
    move.l (sp)+, a6
   1901c:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   1901e:	rts

00019020 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   19020:	move.b d0,(a3)+
	rts
   19022:	rts
